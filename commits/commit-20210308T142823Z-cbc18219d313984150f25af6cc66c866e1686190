{
  "sha": "cbc18219d313984150f25af6cc66c866e1686190",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2JjMTgyMTlkMzEzOTg0MTUwZjI1YWY2Y2M2NmM4NjZlMTY4NjE5MA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:23Z"
    },
    "message": "Implement UNOP_MEMVAL and UNOP_MEMVAL_TYPE\n\nThis adds class unop_memval_operation and unop_memval_type_operation,\nwhich implement UNOP_MEMVAL and UNOP_MEMVAL_TYPE.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expop.h (class unop_memval_operation)\n\t(class unop_memval_type_operation): New.\n\t* eval.c (eval_op_memval): No longer static.\n\t(unop_memval_operation::evaluate_for_address)\n\t(unop_memval_type_operation::evaluate_for_address)\n\t(unop_memval_operation::evaluate_for_sizeof)\n\t(unop_memval_type_operation::evaluate_for_sizeof): New methods.\n\t* ax-gdb.c (unop_memval_operation::do_generate_ax)\n\t(unop_memval_type_operation::do_generate_ax): New methods.",
    "tree": {
      "sha": "3d389830898d13f65dc6f509c785e461010286a6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3d389830898d13f65dc6f509c785e461010286a6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cbc18219d313984150f25af6cc66c866e1686190",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cbc18219d313984150f25af6cc66c866e1686190",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cbc18219d313984150f25af6cc66c866e1686190",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cbc18219d313984150f25af6cc66c866e1686190/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ae4bb61e199c90c71e3482169233a0f40f446484",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ae4bb61e199c90c71e3482169233a0f40f446484",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ae4bb61e199c90c71e3482169233a0f40f446484"
    }
  ],
  "stats": {
    "total": 166,
    "additions": 165,
    "deletions": 1
  },
  "files": [
    {
      "sha": "f93f0f2666d31690625ee1f0fe029504d106ec79",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cbc18219d313984150f25af6cc66c866e1686190/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cbc18219d313984150f25af6cc66c866e1686190/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=cbc18219d313984150f25af6cc66c866e1686190",
      "patch": "@@ -1,3 +1,15 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expop.h (class unop_memval_operation)\n+\t(class unop_memval_type_operation): New.\n+\t* eval.c (eval_op_memval): No longer static.\n+\t(unop_memval_operation::evaluate_for_address)\n+\t(unop_memval_type_operation::evaluate_for_address)\n+\t(unop_memval_operation::evaluate_for_sizeof)\n+\t(unop_memval_type_operation::evaluate_for_sizeof): New methods.\n+\t* ax-gdb.c (unop_memval_operation::do_generate_ax)\n+\t(unop_memval_type_operation::do_generate_ax): New methods.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (class unop_alignof_operation): New."
    },
    {
      "sha": "6514e40cdbfa6c241a20bcf406a78781c5bce46b",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cbc18219d313984150f25af6cc66c866e1686190/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cbc18219d313984150f25af6cc66c866e1686190/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=cbc18219d313984150f25af6cc66c866e1686190",
      "patch": "@@ -2514,6 +2514,46 @@ unop_sizeof_operation::do_generate_ax (struct expression *exp,\n   value->type = builtin_type (ax->gdbarch)->builtin_int;\n }\n \n+void\n+unop_memval_operation::do_generate_ax (struct expression *exp,\n+\t\t\t\t       struct agent_expr *ax,\n+\t\t\t\t       struct axs_value *value,\n+\t\t\t\t       struct type *cast_type)\n+{\n+  std::get<0> (m_storage)->generate_ax (exp, ax, value);\n+  /* If we have an axs_rvalue or an axs_lvalue_memory, then we\n+     already have the right value on the stack.  For\n+     axs_lvalue_register, we must convert.  */\n+  if (value->kind == axs_lvalue_register)\n+    require_rvalue (ax, value);\n+\n+  value->type = std::get<1> (m_storage);\n+  value->kind = axs_lvalue_memory;\n+}\n+\n+void\n+unop_memval_type_operation::do_generate_ax (struct expression *exp,\n+\t\t\t\t\t    struct agent_expr *ax,\n+\t\t\t\t\t    struct axs_value *value,\n+\t\t\t\t\t    struct type *cast_type)\n+{\n+  struct value *val\n+    = std::get<0> (m_storage)->evaluate (nullptr, exp,\n+\t\t\t\t\t EVAL_AVOID_SIDE_EFFECTS);\n+  struct type *type = value_type (val);\n+\n+  std::get<1> (m_storage)->generate_ax (exp, ax, value);\n+\n+  /* If we have an axs_rvalue or an axs_lvalue_memory, then we\n+     already have the right value on the stack.  For\n+     axs_lvalue_register, we must convert.  */\n+  if (value->kind == axs_lvalue_register)\n+    require_rvalue (ax, value);\n+\n+  value->type = type;\n+  value->kind = axs_lvalue_memory;\n+}\n+\n }\n \n /* This handles the middle-to-right-side of code generation for binary"
    },
    {
      "sha": "2781e1d993e3e6783532d0744cb7af31125ae7f4",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 36,
      "deletions": 1,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cbc18219d313984150f25af6cc66c866e1686190/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cbc18219d313984150f25af6cc66c866e1686190/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=cbc18219d313984150f25af6cc66c866e1686190",
      "patch": "@@ -1897,7 +1897,7 @@ eval_op_alignof (struct type *expect_type, struct expression *exp,\n \n /* A helper function for UNOP_MEMVAL.  */\n \n-static struct value *\n+struct value *\n eval_op_memval (struct type *expect_type, struct expression *exp,\n \t\tenum noside noside,\n \t\tstruct value *arg1, struct type *type)\n@@ -3333,6 +3333,25 @@ var_msym_value_operation::evaluate_for_address (struct expression *exp,\n     return value_addr (val);\n }\n \n+value *\n+unop_memval_operation::evaluate_for_address (struct expression *exp,\n+\t\t\t\t\t     enum noside noside)\n+{\n+  return value_cast (lookup_pointer_type (std::get<1> (m_storage)),\n+\t\t     std::get<0> (m_storage)->evaluate (nullptr, exp, noside));\n+}\n+\n+value *\n+unop_memval_type_operation::evaluate_for_address (struct expression *exp,\n+\t\t\t\t\t\t  enum noside noside)\n+{\n+  value *typeval = std::get<0> (m_storage)->evaluate (nullptr, exp,\n+\t\t\t\t\t\t      EVAL_AVOID_SIDE_EFFECTS);\n+  struct type *type = value_type (typeval);\n+  return value_cast (lookup_pointer_type (type),\n+\t\t     std::get<1> (m_storage)->evaluate (nullptr, exp, noside));\n+}\n+\n }\n \n /* Evaluate like `evaluate_subexp' except coercing arrays to pointers.\n@@ -3604,6 +3623,22 @@ unop_ind_base_operation::evaluate_for_sizeof (struct expression *exp,\n   return value_from_longest (size_type, (LONGEST) TYPE_LENGTH (type));\n }\n \n+value *\n+unop_memval_operation::evaluate_for_sizeof (struct expression *exp,\n+\t\t\t\t\t    enum noside noside)\n+{\n+  return evaluate_subexp_for_sizeof_base (exp, std::get<1> (m_storage));\n+}\n+\n+value *\n+unop_memval_type_operation::evaluate_for_sizeof (struct expression *exp,\n+\t\t\t\t\t\t enum noside noside)\n+{\n+  value *typeval = std::get<0> (m_storage)->evaluate (nullptr, exp,\n+\t\t\t\t\t\t      EVAL_AVOID_SIDE_EFFECTS);\n+  return evaluate_subexp_for_sizeof_base (exp, value_type (typeval));\n+}\n+\n }\n \n /* Evaluate a subexpression of EXP, at index *POS, and return a value"
    },
    {
      "sha": "b808c0f63bc770ed049908fc46fa2db3c38bb1e2",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 77,
      "deletions": 0,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cbc18219d313984150f25af6cc66c866e1686190/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cbc18219d313984150f25af6cc66c866e1686190/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=cbc18219d313984150f25af6cc66c866e1686190",
      "patch": "@@ -193,6 +193,10 @@ extern struct value *eval_op_alignof (struct type *expect_type,\n \t\t\t\t      struct expression *exp,\n \t\t\t\t      enum noside noside,\n \t\t\t\t      struct value *arg1);\n+extern struct value *eval_op_memval (struct type *expect_type,\n+\t\t\t\t     struct expression *exp,\n+\t\t\t\t     enum noside noside,\n+\t\t\t\t     struct value *arg1, struct type *type);\n \n namespace expr\n {\n@@ -1636,6 +1640,79 @@ class unop_alignof_operation\n   { return UNOP_ALIGNOF; }\n };\n \n+/* Implement UNOP_MEMVAL.  */\n+class unop_memval_operation\n+  : public tuple_holding_operation<operation_up, struct type *>\n+{\n+public:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    value *val = std::get<0> (m_storage)->evaluate (expect_type, exp, noside);\n+    return eval_op_memval (expect_type, exp, noside, val,\n+\t\t\t   std::get<1> (m_storage));\n+  }\n+\n+  value *evaluate_for_sizeof (struct expression *exp,\n+\t\t\t      enum noside noside) override;\n+\n+  value *evaluate_for_address (struct expression *exp,\n+\t\t\t       enum noside noside) override;\n+\n+  enum exp_opcode opcode () const override\n+  { return UNOP_MEMVAL; }\n+\n+protected:\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override;\n+};\n+\n+/* Implement UNOP_MEMVAL_TYPE.  */\n+class unop_memval_type_operation\n+  : public tuple_holding_operation<operation_up, operation_up>\n+{\n+public:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    value *typeval\n+      = std::get<0> (m_storage)->evaluate (expect_type, exp,\n+\t\t\t\t\t   EVAL_AVOID_SIDE_EFFECTS);\n+    struct type *type = value_type (typeval);\n+    value *val = std::get<1> (m_storage)->evaluate (expect_type, exp, noside);\n+    return eval_op_memval (expect_type, exp, noside, val, type);\n+  }\n+\n+  value *evaluate_for_sizeof (struct expression *exp,\n+\t\t\t      enum noside noside) override;\n+\n+  value *evaluate_for_address (struct expression *exp,\n+\t\t\t       enum noside noside) override;\n+\n+  enum exp_opcode opcode () const override\n+  { return UNOP_MEMVAL_TYPE; }\n+\n+protected:\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override;\n+};\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    }
  ]
}