{
  "sha": "489dbda6a8d6d54bbc349c7048553fc5f791cb41",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDg5ZGJkYTZhOGQ2ZDU0YmJjMzQ5YzcwNDg1NTNmYzVmNzkxY2I0MQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-11-30T17:05:23Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-12-01T03:47:44Z"
    },
    "message": "Correctly compute length of DW_TAG_variant_part union\n\nCurrently, gdb internally transforms DW_TAG_variant_part into a union\n(with some special attbributes).  When doing so, it computes the\nlength of this union from the length of the fields.  However, this\ncomputation didn't include the offset of these fields, resulting in\nthe length being too short.\n\nThis is not a problem given the way the code currently works.\nHowever, I have a patch series to switch gdb to value-based printing,\nwhere this does have an impact.\n\nTested on x86-64 Fedora 28; and, considering that this only affects\nRust, I am checking it in.\n\ngdb/ChangeLog\n2019-11-30  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2read.c (dwarf2_add_field): Include field offset when\n\tcomputing variant part length.\n\nChange-Id: I25d84fc237eb3c1e7f11f6eaf35ffe198efde6cc",
    "tree": {
      "sha": "f2e6fa591fdec540aa51bf967003548d033be018",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f2e6fa591fdec540aa51bf967003548d033be018"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/489dbda6a8d6d54bbc349c7048553fc5f791cb41",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/489dbda6a8d6d54bbc349c7048553fc5f791cb41",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/489dbda6a8d6d54bbc349c7048553fc5f791cb41",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/489dbda6a8d6d54bbc349c7048553fc5f791cb41/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "425124817eef869ad3595a03aaa999cbb1504bb6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/425124817eef869ad3595a03aaa999cbb1504bb6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/425124817eef869ad3595a03aaa999cbb1504bb6"
    }
  ],
  "stats": {
    "total": 16,
    "additions": 13,
    "deletions": 3
  },
  "files": [
    {
      "sha": "621cbbbf95938c15d541fae4ce5667ee5715ca12",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/489dbda6a8d6d54bbc349c7048553fc5f791cb41/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/489dbda6a8d6d54bbc349c7048553fc5f791cb41/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=489dbda6a8d6d54bbc349c7048553fc5f791cb41",
      "patch": "@@ -1,3 +1,8 @@\n+2019-11-30  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2read.c (dwarf2_add_field): Include field offset when\n+\tcomputing variant part length.\n+\n 2019-11-30  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \t* NEWS:  Mention define-prefix.  Tell that command names can now\n \tcontain a . character."
    },
    {
      "sha": "fd7d21c02e949341167af19a4794b5489e6550ff",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/489dbda6a8d6d54bbc349c7048553fc5f791cb41/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/489dbda6a8d6d54bbc349c7048553fc5f791cb41/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=489dbda6a8d6d54bbc349c7048553fc5f791cb41",
      "patch": "@@ -15252,13 +15252,18 @@ dwarf2_add_field (struct field_info *fip, struct die_info *die,\n \n       /* Normally a DW_TAG_variant_part won't have a size, but our\n \t representation requires one, so set it to the maximum of the\n-\t child sizes.  */\n+\t child sizes, being sure to account for the offset at which\n+\t each child is seen.  */\n       if (TYPE_LENGTH (fp->type) == 0)\n \t{\n \t  unsigned max = 0;\n \t  for (int i = 0; i < TYPE_NFIELDS (fp->type); ++i)\n-\t    if (TYPE_LENGTH (TYPE_FIELD_TYPE (fp->type, i)) > max)\n-\t      max = TYPE_LENGTH (TYPE_FIELD_TYPE (fp->type, i));\n+\t    {\n+\t      unsigned len = ((TYPE_FIELD_BITPOS (fp->type, i) + 7) / 8\n+\t\t\t      + TYPE_LENGTH (TYPE_FIELD_TYPE (fp->type, i)));\n+\t      if (len > max)\n+\t\tmax = len;\n+\t    }\n \t  TYPE_LENGTH (fp->type) = max;\n \t}\n     }"
    }
  ]
}