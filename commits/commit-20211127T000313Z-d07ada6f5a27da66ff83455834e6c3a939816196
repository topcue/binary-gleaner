{
  "sha": "d07ada6f5a27da66ff83455834e6c3a939816196",
  "node_id": "C_kwDOANOeidoAKGQwN2FkYTZmNWEyN2RhNjZmZjgzNDU1ODM0ZTZjM2E5Mzk4MTYxOTY",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-22T04:12:39Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-27T00:03:13Z"
    },
    "message": "sim: testsuite: replace global_ld_options with LDFLAGS_FOR_TARGET\n\nOnly a few tests actually use global_ld_options, but we can replace the\nsim-specific settings with the dejagnu common LDFLAGS_FOR_TARGET and get\nthe same result.",
    "tree": {
      "sha": "ded41735d77331a2485d202e56f777dcfddeb0ca",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ded41735d77331a2485d202e56f777dcfddeb0ca"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d07ada6f5a27da66ff83455834e6c3a939816196",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d07ada6f5a27da66ff83455834e6c3a939816196",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d07ada6f5a27da66ff83455834e6c3a939816196",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d07ada6f5a27da66ff83455834e6c3a939816196/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fd02ad8772fd5087d860437b39f91f0f76148d15",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fd02ad8772fd5087d860437b39f91f0f76148d15",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fd02ad8772fd5087d860437b39f91f0f76148d15"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 14,
    "deletions": 30
  },
  "files": [
    {
      "sha": "c138bb8f18aa447a619ad60a4526f117fd6566d3",
      "filename": "sim/testsuite/bpf/allinsn.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d07ada6f5a27da66ff83455834e6c3a939816196/sim/testsuite/bpf/allinsn.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d07ada6f5a27da66ff83455834e6c3a939816196/sim/testsuite/bpf/allinsn.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/bpf/allinsn.exp?ref=d07ada6f5a27da66ff83455834e6c3a939816196",
      "patch": "@@ -9,10 +9,8 @@ if [istarget bpf-unknown-none] {\n \tset global_sim_options \"--memory-size=4Mb\"\n     }\n \n-    global global_ld_options\n-    if ![info exists global_ld_options] {\n-        set global_ld_options \"-Ttext=0x0\"\n-    }\n+    global LDFLAGS_FOR_TARGET\n+    set LDFLAGS_FOR_TARGET \"-Ttext=0x0\"\n \n     foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.s]] {\n \t# If we're only testing specific files and this isn't one of them,"
    },
    {
      "sha": "82033634e93674092cc63e410dab4f9d23bb9a9f",
      "filename": "sim/testsuite/cris/hw/rv-n-cris/rvc.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 14,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d07ada6f5a27da66ff83455834e6c3a939816196/sim/testsuite/cris/hw/rv-n-cris/rvc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d07ada6f5a27da66ff83455834e6c3a939816196/sim/testsuite/cris/hw/rv-n-cris/rvc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/cris/hw/rv-n-cris/rvc.exp?ref=d07ada6f5a27da66ff83455834e6c3a939816196",
      "patch": "@@ -21,7 +21,6 @@\n proc sim_has_rv_and_cris {} {\n     global srcdir\n     global subdir\n-    global global_ld_options\n     global global_sim_options\n \n     # We need to assemble and link a trivial program and pass that, in\n@@ -31,9 +30,6 @@ proc sim_has_rv_and_cris {} {\n     # what we want to do it to run the simulator without affecting the\n     # PASS/FAIL counters, and we can use e.g. run_sim_test for that.\n \n-    if ![info exists global_ld_options] {\n-        set global_ld_options \"\"\n-    }\n     if ![info exists global_sim_options] {\n         set global_sim_options \"\"\n     }\n@@ -47,7 +43,7 @@ proc sim_has_rv_and_cris {} {\n \treturn 0\n     }\n \n-    set comp_output [target_link quit.o quit.x \"$global_ld_options\"]\n+    set comp_output [target_link quit.o quit.x \"\"]\n \n     if ![string match \"\" $comp_output] {\n \tverbose -log \"$comp_output\" 3\n@@ -114,12 +110,11 @@ proc slurp_rv { file } {\n \n if [istarget cris*-*-*] {\n     global ASFLAGS_FOR_TARGET\n+    global LDFLAGS_FOR_TARGET\n     set has_rv_and_cris [sim_has_rv_and_cris]\n-    global global_ld_options\n     global global_sim_options\n \n     set saved_global_sim_options $global_sim_options\n-    set saved_global_ld_options $global_ld_options\n \n     # See the logic in sim-defs.exp for more details.\n     set sim [board_info target sim]\n@@ -162,7 +157,7 @@ if [istarget cris*-*-*] {\n \t    }\n \n \t    set sim_defaults \"--hw-file $srcdir/$subdir/std.dev\"\n-\t    set ld_defaults \"--section-start=.text=0\"\n+\t    set LDFLAGS_FOR_TARGET \"--section-start=.text=0\"\n \n \t    # We parse options an extra time besides in run_sim_test,\n \t    # to determine if our defaults should be overridden.\n@@ -178,10 +173,6 @@ if [istarget cris*-*-*] {\n \t\tif { $opt_name == \"sim\" && $opt_machs == \"\" } {\n \t\t    set sim_defaults \"\"\n \t\t}\n-\n-\t\tif { $opt_name == \"ld\" && $opt_machs == \"\" } {\n-\t\t    set ld_defaults \"\"\n-\t\t}\n \t    }\n \n \t    set rvdummy_id -1\n@@ -220,10 +211,8 @@ if [istarget cris*-*-*] {\n \t    # Unfortunately this seems like the only way to pass\n \t    # additional sim, ld etc. options to run_sim_test.\n \t    set global_sim_options \"$saved_global_sim_options $sim_defaults\"\n-\t    set global_ld_options \"$saved_global_ld_options $ld_defaults\"\n \t    run_sim_test $src $mach\n \t    set global_sim_options $saved_global_sim_options\n-\t    set global_ld_options $saved_global_ld_options\n \n \t    # Stop the rvdummy, if it's still running.  We need to\n \t    # wait on it anyway to avoid it turning into a zombie."
    },
    {
      "sha": "4c8f653ad7267eb28b7eaa2295cee65b5f32c5ba",
      "filename": "sim/testsuite/example-synacor/allinsn.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d07ada6f5a27da66ff83455834e6c3a939816196/sim/testsuite/example-synacor/allinsn.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d07ada6f5a27da66ff83455834e6c3a939816196/sim/testsuite/example-synacor/allinsn.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/example-synacor/allinsn.exp?ref=d07ada6f5a27da66ff83455834e6c3a939816196",
      "patch": "@@ -4,7 +4,8 @@ if [istarget *] {\n     # All machines.\n     set all_machs \"example\"\n \n-    set global_ld_options \"-Ttext=0\"\n+    global LDFLAGS_FOR_TARGET\n+    set LDFLAGS_FOR_TARGET \"-Ttext=0\"\n \n     foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.s]] {\n \t# If we're only testing specific files and this isn't one of them,\n@@ -15,5 +16,5 @@ if [istarget *] {\n \trun_sim_test $src $all_machs\n     }\n \n-    unset global_ld_options\n+    unset LDFLAGS_FOR_TARGET\n }"
    },
    {
      "sha": "a9431fc46090a96e567a262dc91f9070ec048893",
      "filename": "sim/testsuite/lib/sim-defs.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d07ada6f5a27da66ff83455834e6c3a939816196/sim/testsuite/lib/sim-defs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d07ada6f5a27da66ff83455834e6c3a939816196/sim/testsuite/lib/sim-defs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/lib/sim-defs.exp?ref=d07ada6f5a27da66ff83455834e6c3a939816196",
      "patch": "@@ -185,7 +185,6 @@ proc run_sim_test { name requested_machs } {\n     global opts\n     global cpu_option\n     global cpu_option_sep\n-    global global_ld_options\n     global global_sim_options\n \n     if ![file exists [sim_tool_path]] {\n@@ -220,9 +219,6 @@ proc run_sim_test { name requested_machs } {\n     set opts(kfail) \"\"\n     set seen_output 0\n \n-    if ![info exists global_ld_options] {\n-        set global_ld_options \"\"\n-    }\n     if ![info exists global_sim_options] {\n         set global_sim_options \"\"\n     }\n@@ -325,7 +321,7 @@ proc run_sim_test { name requested_machs } {\n \tif ![info exists opts(ld,$mach)] {\n \t    set opts(ld,$mach) $opts(ld)\n \t}\n-\tregsub {(^ *| +)([^ ]+)} \"$opts(ld,$mach) $global_ld_options\" { -Wl,\\2} c_ld_options\n+\tregsub {(^ *| +)([^ ]+)} \"$opts(ld,$mach)\" { -Wl,\\2} c_ld_options\n \n \tif ![info exists opts(cc,$mach)] {\n \t    set opts(cc,$mach) $opts(cc)\n@@ -351,7 +347,7 @@ proc run_sim_test { name requested_machs } {\n \t\tcontinue\n \t    }\n \n-\t    set comp_output [target_link ${name}.o ${name}.x \"$opts(ld,$mach) $global_ld_options\"]\n+\t    set comp_output [target_link ${name}.o ${name}.x \"$opts(ld,$mach)\"]\n \t    set method \"linking\"\n \t}\n "
    },
    {
      "sha": "701cca6ec643e933d9149fdb752d9f40b2eb098e",
      "filename": "sim/testsuite/or1k/alltests.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d07ada6f5a27da66ff83455834e6c3a939816196/sim/testsuite/or1k/alltests.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d07ada6f5a27da66ff83455834e6c3a939816196/sim/testsuite/or1k/alltests.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/or1k/alltests.exp?ref=d07ada6f5a27da66ff83455834e6c3a939816196",
      "patch": "@@ -18,8 +18,8 @@\n if [istarget or1k*-*-*] {\n     set all_machs \"or1k\"\n \n-    global global_ld_options\n-    set global_ld_options \"-T $srcdir/$subdir/or1k-test.ld\"\n+    global LDFLAGS_FOR_TARGET\n+    set LDFLAGS_FOR_TARGET \"-T $srcdir/$subdir/or1k-test.ld\"\n \n     foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.S]] {\n "
    },
    {
      "sha": "05a28e0074225cb25b9e6dd0309151ee00b25fe2",
      "filename": "sim/testsuite/sh/allinsn.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d07ada6f5a27da66ff83455834e6c3a939816196/sim/testsuite/sh/allinsn.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d07ada6f5a27da66ff83455834e6c3a939816196/sim/testsuite/sh/allinsn.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sh/allinsn.exp?ref=d07ada6f5a27da66ff83455834e6c3a939816196",
      "patch": "@@ -3,12 +3,12 @@\n set all_machs \"sh shdsp\"\n \n global ASFLAGS_FOR_TARGET\n-set global_ld_options \"\"\n+global LDFLAGS_FOR_TARGET\n \n foreach opt $board_variant_list {\n     switch \"x$opt\" {\n \tx-ml { set ASFLAGS_FOR_TARGET \"-little --defsym LITTLE=1\"\n-\t       set global_ld_options \"-EL\" }\n+\t       set LDFLAGS_FOR_TARGET \"-EL\" }\n     }\n }\n "
    }
  ]
}