{
  "sha": "c410035d37d8237c641155c4e51e7ccf53decb29",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzQxMDAzNWQzN2Q4MjM3YzY0MTE1NWM0ZTUxZTdjY2Y1M2RlY2IyOQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-12-15T14:12:21Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-12-16T04:47:53Z"
    },
    "message": "constify elfNN_bed\n\nelfNN_bed was made writable as an expedient means of communicating\nld -z max-page-size and ld -z common-page-size values to BFD linker\ncode, and even for objcopy to communicate segment alignment between\ncopy_private_bfd_data, rewrite_elf_program_header and\nassign_file_positions_for_load_sections.  Some time later elfNN_bed\nelf_osabi was written by gas.  It turns out none of these\nmodifications to elfNN_bed was necessary, so make it const again.\n\ninclude/\n\t* bfdlink.h (struct bfd_link_info): Add maxpagesize and\n\tcommonpagesize.\nbfd/\n\t* elfxx-target.h (elfNN_bed): Constify.\n\t* bfd.c (bfd_elf_set_pagesize): Delete.\n\t(bfd_emul_set_maxpagesize, bfd_emul_set_commonpagesize): Delete.\n\t* elf.c (get_program_header_size): Get commonpagesize from\n\tlink info.\n\t(_bfd_elf_map_sections_to_segments): Get maxpagesize from link info.\n\t(assign_file_positions_for_load_sections): Likewise.\n\t(assign_file_positions_for_non_load_sections): Likewise.\n\t(rewrite_elf_program_header): Add maxpagesize param.  Set map_p_align.\n\t(copy_private_bfd_data): Don't call bfd_elf_set_maxpagesize.\n\tInstead pass maxpagesize to rewrite_elf_program_header.\n\t* elf32-nds32.c (relax_range_measurement): Add link_info param.\n\tGet maxpagesize from link_info.  Adjust caller.\n\t* bfd-in2.h: Regenerate.\ngas/\n\t* config/obj-elf.c (obj_elf_section): Don't set elf_osabi here.\n\t(obj_elf_type): Likewise.\nld/\n\t* ld.h (ld_config_type): Delete maxpagesize and commonpagesize.\n\t* emultempl/elf.em: Use link_info rather than config\n\tfor maxpagesize and commonpagesize.\n\t* emultempl/ppc32elf.em: Likewise.\n\t* ldexp.c (fold_binary, fold_name): Likewise.\n\t* ldemul.c (after_parse_default): Likewise.\n\t(set_output_arch_default): Don't call bfd_emul_set_maxpagesize\n\tor bfd_emul_set_commonpagesize.",
    "tree": {
      "sha": "f61182fd4ba33baefa14ea1cbe197dfb05d9204b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f61182fd4ba33baefa14ea1cbe197dfb05d9204b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c410035d37d8237c641155c4e51e7ccf53decb29",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c410035d37d8237c641155c4e51e7ccf53decb29",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c410035d37d8237c641155c4e51e7ccf53decb29",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c410035d37d8237c641155c4e51e7ccf53decb29/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3f75e1d67fe871db85d46618b95d0dc92291577d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f75e1d67fe871db85d46618b95d0dc92291577d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3f75e1d67fe871db85d46618b95d0dc92291577d"
    }
  ],
  "stats": {
    "total": 247,
    "additions": 120,
    "deletions": 127
  },
  "files": [
    {
      "sha": "f88a56567eeec9a3785af9c3691c276e7f99c190",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c410035d37d8237c641155c4e51e7ccf53decb29/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c410035d37d8237c641155c4e51e7ccf53decb29/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=c410035d37d8237c641155c4e51e7ccf53decb29",
      "patch": "@@ -1,3 +1,20 @@\n+2020-12-16  Alan Modra  <amodra@gmail.com>\n+\n+\t* elfxx-target.h (elfNN_bed): Constify.\n+\t* bfd.c (bfd_elf_set_pagesize): Delete.\n+\t(bfd_emul_set_maxpagesize, bfd_emul_set_commonpagesize): Delete.\n+\t* elf.c (get_program_header_size): Get commonpagesize from\n+\tlink info.\n+\t(_bfd_elf_map_sections_to_segments): Get maxpagesize from link info.\n+\t(assign_file_positions_for_load_sections): Likewise.\n+\t(assign_file_positions_for_non_load_sections): Likewise.\n+\t(rewrite_elf_program_header): Add maxpagesize param.  Set map_p_align.\n+\t(copy_private_bfd_data): Don't call bfd_elf_set_maxpagesize.\n+\tInstead pass maxpagesize to rewrite_elf_program_header.\n+\t* elf32-nds32.c (relax_range_measurement): Add link_info param.\n+\tGet maxpagesize from link_info.  Adjust caller.\n+\t* bfd-in2.h: Regenerate.\n+\n 2020-12-16  Alan Modra  <amodra@gmail.com>\n \n \t* elflink.c (elf_flags_to_names): Constify."
    },
    {
      "sha": "f1bef5742ae50cc512265d941646932dca83a580",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c410035d37d8237c641155c4e51e7ccf53decb29/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c410035d37d8237c641155c4e51e7ccf53decb29/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=c410035d37d8237c641155c4e51e7ccf53decb29",
      "patch": "@@ -7224,12 +7224,8 @@ bfd_boolean bfd_alt_mach_code (bfd *abfd, int alternative);\n \n bfd_vma bfd_emul_get_maxpagesize (const char *);\n \n-void bfd_emul_set_maxpagesize (const char *, bfd_vma);\n-\n bfd_vma bfd_emul_get_commonpagesize (const char *, bfd_boolean);\n \n-void bfd_emul_set_commonpagesize (const char *, bfd_vma);\n-\n char *bfd_demangle (bfd *, const char *, int);\n \n void bfd_update_compression_header"
    },
    {
      "sha": "81d074e13bc54fc265a689acdac80adaa5519987",
      "filename": "bfd/bfd.c",
      "status": "modified",
      "additions": 0,
      "deletions": 68,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c410035d37d8237c641155c4e51e7ccf53decb29/bfd/bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c410035d37d8237c641155c4e51e7ccf53decb29/bfd/bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd.c?ref=c410035d37d8237c641155c4e51e7ccf53decb29",
      "patch": "@@ -2335,49 +2335,6 @@ bfd_emul_get_maxpagesize (const char *emul)\n   return 0;\n }\n \n-static void\n-bfd_elf_set_pagesize (const bfd_target *target, bfd_vma size,\n-\t\t      int offset, const bfd_target *orig_target)\n-{\n-  if (target->flavour == bfd_target_elf_flavour)\n-    {\n-      const struct elf_backend_data *bed;\n-\n-      bed = xvec_get_elf_backend_data (target);\n-      *((bfd_vma *) ((char *) bed + offset)) = size;\n-    }\n-\n-  if (target->alternative_target\n-      && target->alternative_target != orig_target)\n-    bfd_elf_set_pagesize (target->alternative_target, size, offset,\n-\t\t\t  orig_target);\n-}\n-\n-/*\n-FUNCTION\n-\tbfd_emul_set_maxpagesize\n-\n-SYNOPSIS\n-\tvoid bfd_emul_set_maxpagesize (const char *, bfd_vma);\n-\n-DESCRIPTION\n-\tFor ELF, set the maximum page size for the emulation.  It is\n-\ta no-op for other formats.\n-\n-*/\n-\n-void\n-bfd_emul_set_maxpagesize (const char *emul, bfd_vma size)\n-{\n-  const bfd_target *target;\n-\n-  target = bfd_find_target (emul, NULL);\n-  if (target)\n-    bfd_elf_set_pagesize (target, size,\n-\t\t\t  offsetof (struct elf_backend_data,\n-\t\t\t\t    maxpagesize), target);\n-}\n-\n /*\n FUNCTION\n \tbfd_emul_get_commonpagesize\n@@ -2413,31 +2370,6 @@ bfd_emul_get_commonpagesize (const char *emul, bfd_boolean relro)\n   return 0;\n }\n \n-/*\n-FUNCTION\n-\tbfd_emul_set_commonpagesize\n-\n-SYNOPSIS\n-\tvoid bfd_emul_set_commonpagesize (const char *, bfd_vma);\n-\n-DESCRIPTION\n-\tFor ELF, set the common page size for the emulation.  It is\n-\ta no-op for other formats.\n-\n-*/\n-\n-void\n-bfd_emul_set_commonpagesize (const char *emul, bfd_vma size)\n-{\n-  const bfd_target *target;\n-\n-  target = bfd_find_target (emul, NULL);\n-  if (target)\n-    bfd_elf_set_pagesize (target, size,\n-\t\t\t  offsetof (struct elf_backend_data,\n-\t\t\t\t    commonpagesize), target);\n-}\n-\n /*\n FUNCTION\n \tbfd_demangle"
    },
    {
      "sha": "9c82912aeb6f02e26406f42cbc289bfc7e28b561",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 42,
      "deletions": 12,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c410035d37d8237c641155c4e51e7ccf53decb29/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c410035d37d8237c641155c4e51e7ccf53decb29/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=c410035d37d8237c641155c4e51e7ccf53decb29",
      "patch": "@@ -4428,7 +4428,14 @@ get_program_header_size (bfd *abfd, struct bfd_link_info *info)\n       && (elf_tdata (abfd)->has_gnu_osabi & elf_gnu_osabi_mbind) != 0)\n     {\n       /* Add a PT_GNU_MBIND segment for each mbind section.  */\n-      unsigned int page_align_power = bfd_log2 (bed->commonpagesize);\n+      bfd_vma commonpagesize;\n+      unsigned int page_align_power;\n+\n+      if (info != NULL)\n+\tcommonpagesize = info->commonpagesize;\n+      else\n+\tcommonpagesize = bed->commonpagesize;\n+      page_align_power = bfd_log2 (commonpagesize);\n       for (s = abfd->sections; s != NULL; s = s->next)\n \tif (elf_section_flags (s) & SHF_GNU_MBIND)\n \t  {\n@@ -4672,7 +4679,10 @@ _bfd_elf_map_sections_to_segments (bfd *abfd, struct bfd_link_info *info)\n       phdr_size += bed->s->sizeof_ehdr;\n       /* phdr_size is compared to LMA values which are in bytes.  */\n       phdr_size /= opb;\n-      maxpagesize = bed->maxpagesize;\n+      if (info != NULL)\n+\tmaxpagesize = info->maxpagesize;\n+      else\n+\tmaxpagesize = bed->maxpagesize;\n       if (maxpagesize == 0)\n \tmaxpagesize = 1;\n       phdr_in_segment = info != NULL && info->load_phdrs;\n@@ -5475,7 +5485,12 @@ assign_file_positions_for_load_sections (bfd *abfd,\n \n   maxpagesize = 1;\n   if ((abfd->flags & D_PAGED) != 0)\n-    maxpagesize = bed->maxpagesize;\n+    {\n+      if (link_info != NULL)\n+\tmaxpagesize = link_info->maxpagesize;\n+      else\n+\tmaxpagesize = bed->maxpagesize;\n+    }\n \n   /* Sections must map to file offsets past the ELF file header.  */\n   off = bed->s->sizeof_ehdr;\n@@ -6056,7 +6071,12 @@ assign_file_positions_for_non_load_sections (bfd *abfd,\n   struct elf_segment_map *m;\n   file_ptr off;\n   unsigned int opb = bfd_octets_per_byte (abfd, NULL);\n+  bfd_vma maxpagesize;\n \n+  if (link_info != NULL)\n+    maxpagesize = link_info->maxpagesize;\n+  else\n+    maxpagesize = bed->maxpagesize;\n   i_shdrpp = elf_elfsections (abfd);\n   end_hdrpp = i_shdrpp + elf_numsections (abfd);\n   off = elf_next_file_pos (abfd);\n@@ -6089,7 +6109,7 @@ assign_file_positions_for_non_load_sections (bfd *abfd,\n \t  /* We don't need to page align empty sections.  */\n \t  if ((abfd->flags & D_PAGED) != 0 && hdr->sh_size != 0)\n \t    off += vma_page_aligned_bias (hdr->sh_addr, off,\n-\t\t\t\t\t  bed->maxpagesize);\n+\t\t\t\t\t  maxpagesize);\n \t  else\n \t    off += vma_page_aligned_bias (hdr->sh_addr, off,\n \t\t\t\t\t  hdr->sh_addralign);\n@@ -6767,7 +6787,7 @@ _bfd_elf_symbol_from_bfd_symbol (bfd *abfd, asymbol **asym_ptr_ptr)\n /* Rewrite program header information.  */\n \n static bfd_boolean\n-rewrite_elf_program_header (bfd *ibfd, bfd *obfd)\n+rewrite_elf_program_header (bfd *ibfd, bfd *obfd, bfd_vma maxpagesize)\n {\n   Elf_Internal_Ehdr *iehdr;\n   struct elf_segment_map *map;\n@@ -6779,7 +6799,6 @@ rewrite_elf_program_header (bfd *ibfd, bfd *obfd)\n   unsigned int num_segments;\n   bfd_boolean phdr_included = FALSE;\n   bfd_boolean p_paddr_valid;\n-  bfd_vma maxpagesize;\n   struct elf_segment_map *phdr_adjust_seg = NULL;\n   unsigned int phdr_adjust_num = 0;\n   const struct elf_backend_data *bed;\n@@ -6792,7 +6811,6 @@ rewrite_elf_program_header (bfd *ibfd, bfd *obfd)\n   pointer_to_map = &map_first;\n \n   num_segments = elf_elfheader (ibfd)->e_phnum;\n-  maxpagesize = get_elf_backend_data (obfd)->maxpagesize;\n \n   /* Returns the end address of the segment + 1.  */\n #define SEGMENT_END(segment, start)\t\t\t\t\t\\\n@@ -7049,6 +7067,17 @@ rewrite_elf_program_header (bfd *ibfd, bfd *obfd)\n       map->p_flags = segment->p_flags;\n       map->p_flags_valid = 1;\n \n+      if (map->p_type == PT_LOAD\n+\t  && (ibfd->flags & D_PAGED) != 0\n+\t  && maxpagesize > 1\n+\t  && segment->p_align > 1)\n+\t{\n+\t  map->p_align = segment->p_align;\n+\t  if (segment->p_align > maxpagesize)\n+\t    map->p_align = maxpagesize;\n+\t  map->p_align_valid = 1;\n+\t}\n+\n       /* If the first section in the input segment is removed, there is\n \t no need to preserve segment physical address in the corresponding\n \t output segment.  */\n@@ -7613,6 +7642,8 @@ copy_elf_program_header (bfd *ibfd, bfd *obfd)\n static bfd_boolean\n copy_private_bfd_data (bfd *ibfd, bfd *obfd)\n {\n+  bfd_vma maxpagesize;\n+\n   if (bfd_get_flavour (ibfd) != bfd_target_elf_flavour\n       || bfd_get_flavour (obfd) != bfd_target_elf_flavour)\n     return TRUE;\n@@ -7697,14 +7728,14 @@ copy_private_bfd_data (bfd *ibfd, bfd *obfd)\n     }\n \n  rewrite:\n+  maxpagesize = 0;\n   if (ibfd->xvec == obfd->xvec)\n     {\n       /* When rewriting program header, set the output maxpagesize to\n \t the maximum alignment of input PT_LOAD segments.  */\n       Elf_Internal_Phdr *segment;\n       unsigned int i;\n       unsigned int num_segments = elf_elfheader (ibfd)->e_phnum;\n-      bfd_vma maxpagesize = 0;\n \n       for (i = 0, segment = elf_tdata (ibfd)->phdr;\n \t   i < num_segments;\n@@ -7721,12 +7752,11 @@ copy_private_bfd_data (bfd *ibfd, bfd *obfd)\n \t    else\n \t      maxpagesize = segment->p_align;\n \t  }\n-\n-      if (maxpagesize != get_elf_backend_data (obfd)->maxpagesize)\n-\tbfd_emul_set_maxpagesize (bfd_get_target (obfd), maxpagesize);\n     }\n+  if (maxpagesize == 0)\n+    maxpagesize = get_elf_backend_data (obfd)->maxpagesize;\n \n-  return rewrite_elf_program_header (ibfd, obfd);\n+  return rewrite_elf_program_header (ibfd, obfd, maxpagesize);\n }\n \n /* Initialize private output section information from input section.  */"
    },
    {
      "sha": "85bbd091c83bd8c56a30f2c6a1b5411a1657059a",
      "filename": "bfd/elf32-nds32.c",
      "status": "modified",
      "additions": 7,
      "deletions": 3,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c410035d37d8237c641155c4e51e7ccf53decb29/bfd/elf32-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c410035d37d8237c641155c4e51e7ccf53decb29/bfd/elf32-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nds32.c?ref=c410035d37d8237c641155c4e51e7ccf53decb29",
      "patch": "@@ -9514,11 +9514,11 @@ nds32_elf_insn_size (bfd *abfd ATTRIBUTE_UNUSED,\n    to do gp relaxation.  */\n \n static void\n-relax_range_measurement (bfd *abfd)\n+relax_range_measurement (bfd *abfd, struct bfd_link_info *link_info)\n {\n   asection *sec_f, *sec_b;\n   /* For upper bound.   */\n-  bfd_vma maxpgsz = get_elf_backend_data (abfd)->maxpagesize;\n+  bfd_vma maxpgsz;\n   bfd_vma align;\n   static int decide_relax_range = 0;\n   int i;\n@@ -9550,6 +9550,10 @@ relax_range_measurement (bfd *abfd)\n       sec_b = sec_b->next;\n     }\n \n+  if (link_info != NULL)\n+    maxpgsz = link_info->maxpagesize;\n+  else\n+    maxpgsz = get_elf_backend_data (abfd)->maxpagesize;\n   /* I guess we can not determine the section before\n      gp located section, so we assume the align is max page size.  */\n   for (i = 0; i < range_number; i++)\n@@ -12121,7 +12125,7 @@ nds32_elf_relax_section (bfd *abfd, asection *sec,\n       is_SDA_BASE_set = 1;\n       nds32_elf_final_sda_base (sec->output_section->owner, link_info,\n \t\t\t\t&gp, FALSE);\n-      relax_range_measurement (abfd);\n+      relax_range_measurement (abfd, link_info);\n     }\n \n   symtab_hdr = &elf_tdata (abfd)->symtab_hdr;"
    },
    {
      "sha": "a0186faca34eb1494b45d1cf18c918e59c3e961d",
      "filename": "bfd/elfxx-target.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c410035d37d8237c641155c4e51e7ccf53decb29/bfd/elfxx-target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c410035d37d8237c641155c4e51e7ccf53decb29/bfd/elfxx-target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-target.h?ref=c410035d37d8237c641155c4e51e7ccf53decb29",
      "patch": "@@ -802,7 +802,7 @@\n \n extern const struct elf_size_info _bfd_elfNN_size_info;\n \n-static struct elf_backend_data elfNN_bed =\n+static const struct elf_backend_data elfNN_bed =\n {\n   ELF_ARCH,\t\t\t/* arch */\n   ELF_TARGET_ID,\t\t/* target_id */"
    },
    {
      "sha": "2816395825e0adcde0126a5e2e9fe059d118cb98",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c410035d37d8237c641155c4e51e7ccf53decb29/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c410035d37d8237c641155c4e51e7ccf53decb29/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=c410035d37d8237c641155c4e51e7ccf53decb29",
      "patch": "@@ -1,3 +1,8 @@\n+2020-12-16  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/obj-elf.c (obj_elf_section): Don't set elf_osabi here.\n+\t(obj_elf_type): Likewise.\n+\n 2020-12-15  Alan Modra  <amodra@gmail.com>\n \n \tPR 27071"
    },
    {
      "sha": "d030b548fb824c646e1f87ec509957e3b3556187",
      "filename": "gas/config/obj-elf.c",
      "status": "modified",
      "additions": 11,
      "deletions": 16,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c410035d37d8237c641155c4e51e7ccf53decb29/gas/config/obj-elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c410035d37d8237c641155c4e51e7ccf53decb29/gas/config/obj-elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/obj-elf.c?ref=c410035d37d8237c641155c4e51e7ccf53decb29",
      "patch": "@@ -1425,13 +1425,13 @@ obj_elf_section (int push)\n \n   if ((gnu_attr & (SHF_GNU_MBIND | SHF_GNU_RETAIN)) != 0)\n     {\n-      struct elf_backend_data *bed;\n+      const struct elf_backend_data *bed;\n       bfd_boolean mbind_p = (gnu_attr & SHF_GNU_MBIND) != 0;\n \n       if (mbind_p && (attr & SHF_ALLOC) == 0)\n \tas_bad (_(\"SHF_ALLOC isn't set for GNU_MBIND section: %s\"), name);\n \n-      bed = (struct elf_backend_data *) get_elf_backend_data (stdoutput);\n+      bed = get_elf_backend_data (stdoutput);\n \n       if (bed->elf_osabi != ELFOSABI_GNU\n \t  && bed->elf_osabi != ELFOSABI_FREEBSD\n@@ -1440,9 +1440,6 @@ obj_elf_section (int push)\n \t\tmbind_p ? \"GNU_MBIND\" : \"GNU_RETAIN\");\n       else\n \t{\n-\t  if (bed->elf_osabi == ELFOSABI_NONE)\n-\t    bed->elf_osabi = ELFOSABI_GNU;\n-\n \t  if (mbind_p)\n \t    elf_tdata (stdoutput)->has_gnu_osabi |= elf_gnu_osabi_mbind;\n \t  if ((gnu_attr & SHF_GNU_RETAIN) != 0)\n@@ -2361,13 +2358,12 @@ obj_elf_type (int ignore ATTRIBUTE_UNUSED)\n \t   || strcmp (type_name, \"10\") == 0\n \t   || strcmp (type_name, \"STT_GNU_IFUNC\") == 0)\n     {\n-      struct elf_backend_data *bed;\n+      const struct elf_backend_data *bed;\n \n-      bed = (struct elf_backend_data *) get_elf_backend_data (stdoutput);\n-      if (bed->elf_osabi == ELFOSABI_NONE)\n-\tbed->elf_osabi = ELFOSABI_GNU;\n-      else if (bed->elf_osabi != ELFOSABI_GNU\n-\t       && bed->elf_osabi != ELFOSABI_FREEBSD)\n+      bed = get_elf_backend_data (stdoutput);\n+      if (bed->elf_osabi != ELFOSABI_NONE\n+\t  && bed->elf_osabi != ELFOSABI_GNU\n+\t  && bed->elf_osabi != ELFOSABI_FREEBSD)\n \tas_bad (_(\"symbol type \\\"%s\\\" is supported only by GNU \"\n \t\t  \"and FreeBSD targets\"), type_name);\n       /* MIPS targets do not support IFUNCS.  */\n@@ -2379,12 +2375,11 @@ obj_elf_type (int ignore ATTRIBUTE_UNUSED)\n     }\n   else if (strcmp (type_name, \"gnu_unique_object\") == 0)\n     {\n-      struct elf_backend_data *bed;\n+      const struct elf_backend_data *bed;\n \n-      bed = (struct elf_backend_data *) get_elf_backend_data (stdoutput);\n-      if (bed->elf_osabi == ELFOSABI_NONE)\n-\tbed->elf_osabi = ELFOSABI_GNU;\n-      else if (bed->elf_osabi != ELFOSABI_GNU)\n+      bed = get_elf_backend_data (stdoutput);\n+      if (bed->elf_osabi != ELFOSABI_NONE\n+\t  && bed->elf_osabi != ELFOSABI_GNU)\n \tas_bad (_(\"symbol type \\\"%s\\\" is supported only by GNU targets\"),\n \t\ttype_name);\n       elf_tdata (stdoutput)->has_gnu_osabi |= elf_gnu_osabi_unique;"
    },
    {
      "sha": "9c19b8765c9b4a749394d2f96b32975473cedf2e",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c410035d37d8237c641155c4e51e7ccf53decb29/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c410035d37d8237c641155c4e51e7ccf53decb29/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=c410035d37d8237c641155c4e51e7ccf53decb29",
      "patch": "@@ -1,3 +1,8 @@\n+2020-12-16  Alan Modra  <amodra@gmail.com>\n+\n+\t* bfdlink.h (struct bfd_link_info): Add maxpagesize and\n+\tcommonpagesize.\n+\n 2020-12-16  Alan Modra  <amodra@gmail.com>\n \n \t* xtensa-isa-internal.h (xtensa_format_internal),"
    },
    {
      "sha": "6b179ec112e451ad5059d4dc57245e3819f22438",
      "filename": "include/bfdlink.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c410035d37d8237c641155c4e51e7ccf53decb29/include/bfdlink.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c410035d37d8237c641155c4e51e7ccf53decb29/include/bfdlink.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/bfdlink.h?ref=c410035d37d8237c641155c4e51e7ccf53decb29",
      "patch": "@@ -661,6 +661,12 @@ struct bfd_link_info\n   /* May be used to set ELF visibility for __start_* / __stop_.  */\n   unsigned int start_stop_visibility;\n \n+  /* The maximum page size for ELF.  */\n+  bfd_vma maxpagesize;\n+\n+  /* The common page size for ELF.  */\n+  bfd_vma commonpagesize;\n+\n   /* Start and end of RELRO region.  */\n   bfd_vma relro_start, relro_end;\n "
    },
    {
      "sha": "46acbd904ddbc6591243d4dd2b2c95265c5086e2",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c410035d37d8237c641155c4e51e7ccf53decb29/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c410035d37d8237c641155c4e51e7ccf53decb29/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=c410035d37d8237c641155c4e51e7ccf53decb29",
      "patch": "@@ -1,3 +1,14 @@\n+2020-12-16  Alan Modra  <amodra@gmail.com>\n+\n+\t* ld.h (ld_config_type): Delete maxpagesize and commonpagesize.\n+\t* emultempl/elf.em: Use link_info rather than config\n+\tfor maxpagesize and commonpagesize.\n+\t* emultempl/ppc32elf.em: Likewise.\n+\t* ldexp.c (fold_binary, fold_name): Likewise.\n+\t* ldemul.c (after_parse_default): Likewise.\n+\t(set_output_arch_default): Don't call bfd_emul_set_maxpagesize\n+\tor bfd_emul_set_commonpagesize.\n+\n 2020-12-15  Vivek Das Mohapatra  <vivek@collabora.com>\n \n \t* emultempl/elf.em (gld${EMULATION_NAME}_handle_option):"
    },
    {
      "sha": "b915ad52d6a07e3eab031520cfcd0cdcae8f9ec4",
      "filename": "ld/emultempl/elf.em",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c410035d37d8237c641155c4e51e7ccf53decb29/ld/emultempl/elf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c410035d37d8237c641155c4e51e7ccf53decb29/ld/emultempl/elf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/elf.em?ref=c410035d37d8237c641155c4e51e7ccf53decb29",
      "patch": "@@ -716,17 +716,18 @@ fragment <<EOF\n \t{\n \t  char *end;\n \n-\t  config.maxpagesize = strtoul (optarg + 14, &end, 0);\n-\t  if (*end || (config.maxpagesize & (config.maxpagesize - 1)) != 0)\n+\t  link_info.maxpagesize = strtoul (optarg + 14, &end, 0);\n+\t  if (*end\n+\t      || (link_info.maxpagesize & (link_info.maxpagesize - 1)) != 0)\n \t    einfo (_(\"%F%P: invalid maximum page size \\`%s'\\n\"),\n \t\t   optarg + 14);\n \t}\n       else if (CONST_STRNEQ (optarg, \"common-page-size=\"))\n \t{\n \t  char *end;\n-\t  config.commonpagesize = strtoul (optarg + 17, &end, 0);\n+\t  link_info.commonpagesize = strtoul (optarg + 17, &end, 0);\n \t  if (*end\n-\t      || (config.commonpagesize & (config.commonpagesize - 1)) != 0)\n+\t      || (link_info.commonpagesize & (link_info.commonpagesize - 1)) != 0)\n \t    einfo (_(\"%F%P: invalid common page size \\`%s'\\n\"),\n \t\t   optarg + 17);\n \t}"
    },
    {
      "sha": "9d8e9334281b3346c1dc8a20206039fa69ee88e2",
      "filename": "ld/emultempl/ppc32elf.em",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c410035d37d8237c641155c4e51e7ccf53decb29/ld/emultempl/ppc32elf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c410035d37d8237c641155c4e51e7ccf53decb29/ld/emultempl/ppc32elf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/ppc32elf.em?ref=c410035d37d8237c641155c4e51e7ccf53decb29",
      "patch": "@@ -51,7 +51,7 @@ ppc_after_open_output (void)\n     params.emit_stub_syms = (link_info.emitrelocations\n \t\t\t     || bfd_link_pic (&link_info));\n   if (params.pagesize == 0)\n-    params.pagesize = config.commonpagesize;\n+    params.pagesize = link_info.commonpagesize;\n   ppc_elf_link_params (&link_info, &params);\n }\n "
    },
    {
      "sha": "612d53088b2c7e2e944f19838ea6a1348743e104",
      "filename": "ld/ld.h",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c410035d37d8237c641155c4e51e7ccf53decb29/ld/ld.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c410035d37d8237c641155c4e51e7ccf53decb29/ld/ld.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ld.h?ref=c410035d37d8237c641155c4e51e7ccf53decb29",
      "patch": "@@ -294,12 +294,6 @@ typedef struct\n   /* The size of the hash table to use.  */\n   unsigned long hash_table_size;\n \n-  /* The maximum page size for ELF.  */\n-  bfd_vma maxpagesize;\n-\n-  /* The common page size for ELF.  */\n-  bfd_vma commonpagesize;\n-\n   /* If set, print discarded sections in map file output.  */\n   bfd_boolean print_map_discarded;\n "
    },
    {
      "sha": "fc514939b52b24ee8877bec529ed2140e923a266",
      "filename": "ld/ldemul.c",
      "status": "modified",
      "additions": 5,
      "deletions": 8,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c410035d37d8237c641155c4e51e7ccf53decb29/ld/ldemul.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c410035d37d8237c641155c4e51e7ccf53decb29/ld/ldemul.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldemul.c?ref=c410035d37d8237c641155c4e51e7ccf53decb29",
      "patch": "@@ -232,11 +232,11 @@ after_parse_default (void)\n       if (!is_vma)\n \tldlang_add_undef (entry_symbol.name, entry_from_cmdline);\n     }\n-  if (config.maxpagesize == 0)\n-    config.maxpagesize = bfd_emul_get_maxpagesize (default_target);\n-  if (config.commonpagesize == 0)\n-    config.commonpagesize = bfd_emul_get_commonpagesize (default_target,\n-\t\t\t\t\t\t\t link_info.relro);\n+  if (link_info.maxpagesize == 0)\n+    link_info.maxpagesize = bfd_emul_get_maxpagesize (default_target);\n+  if (link_info.commonpagesize == 0)\n+    link_info.commonpagesize = bfd_emul_get_commonpagesize (default_target,\n+\t\t\t\t\t\t\t    link_info.relro);\n }\n \n void\n@@ -303,9 +303,6 @@ set_output_arch_default (void)\n   /* Set the output architecture and machine if possible.  */\n   bfd_set_arch_mach (link_info.output_bfd,\n \t\t     ldfile_output_architecture, ldfile_output_machine);\n-\n-  bfd_emul_set_maxpagesize (output_target, config.maxpagesize);\n-  bfd_emul_set_commonpagesize (output_target, config.commonpagesize);\n }\n \n void"
    },
    {
      "sha": "905055ab1c9581852859b5b86dc0fc3efe89e757",
      "filename": "ld/ldexp.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c410035d37d8237c641155c4e51e7ccf53decb29/ld/ldexp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c410035d37d8237c641155c4e51e7ccf53decb29/ld/ldexp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldexp.c?ref=c410035d37d8237c641155c4e51e7ccf53decb29",
      "patch": "@@ -547,8 +547,8 @@ fold_binary (etree_type *tree)\n \t  {\n \t    if (!seg->used\n \t\t&& config.magic_demand_paged\n-\t\t&& config.maxpagesize != 0\n-\t\t&& (seg->value % config.maxpagesize) != 0)\n+\t\t&& link_info.maxpagesize != 0\n+\t\t&& (seg->value % link_info.maxpagesize) != 0)\n \t      einfo (_(\"%P: warning: address of `%s' \"\n \t\t       \"isn't multiple of maximum page size\\n\"),\n \t\t     segment_name);\n@@ -898,9 +898,9 @@ fold_name (etree_type *tree)\n \n     case CONSTANT:\n       if (strcmp (tree->name.name, \"MAXPAGESIZE\") == 0)\n-\tnew_number (config.maxpagesize);\n+\tnew_number (link_info.maxpagesize);\n       else if (strcmp (tree->name.name, \"COMMONPAGESIZE\") == 0)\n-\tnew_number (config.commonpagesize);\n+\tnew_number (link_info.commonpagesize);\n       else\n \teinfo (_(\"%F%P:%pS: unknown constant `%s' referenced in expression\\n\"),\n \t       tree, tree->name.name);"
    }
  ]
}