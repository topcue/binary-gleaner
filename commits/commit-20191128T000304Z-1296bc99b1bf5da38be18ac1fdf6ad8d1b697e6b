{
  "sha": "1296bc99b1bf5da38be18ac1fdf6ad8d1b697e6b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTI5NmJjOTliMWJmNWRhMzhiZTE4YWMxZmRmNmFkOGQxYjY5N2U2Yg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-11-18T15:28:20Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-11-28T00:03:04Z"
    },
    "message": "binutils: Make DWARF register name lookup be via a function pointer\n\nAdd a layer of indirection for DWARF register name lookup by\nintroducing a function pointer.  Right now all targets use the same\ntable based implementation that they always have, however, this will\nchange in a later commit.\n\nbinutils/ChangeLog:\n\n\t* dwarf.c (typedef dwarf_regname_lookup_ftype): New typedef.\n\t(dwarf_regnames_lookup_func): New static global.\n\t(init_dwarf_regnames_i386): Set dwarf_regnames_lookup_func.\n\t(init_dwarf_regnames_iamcu): Likewise.\n\t(init_dwarf_regnames_x86_64): Likewise.\n\t(init_dwarf_regnames_aarch64): Likewise.\n\t(init_dwarf_regnames_s390): Likewise.\n\t(init_dwarf_regnames_riscv): Likewise.\n\t(init_dwarf_regnames_by_elf_machine_code): Reset\n\tdwarf_regnames_lookup_func to NULL.\n\t(init_dwarf_regnames_by_bfd_arch_and_mach): Likewise.\n\t(regname_internal_by_table_only): New function.\n\t(regname): Make use of dwarf_regnames_lookup_func.\n\nChange-Id: Ibbff61c0abea32927f35c9e478793039ab8bb57d",
    "tree": {
      "sha": "5f810f6208df89370c4de3119ca77f9fc4584601",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5f810f6208df89370c4de3119ca77f9fc4584601"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1296bc99b1bf5da38be18ac1fdf6ad8d1b697e6b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1296bc99b1bf5da38be18ac1fdf6ad8d1b697e6b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1296bc99b1bf5da38be18ac1fdf6ad8d1b697e6b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1296bc99b1bf5da38be18ac1fdf6ad8d1b697e6b/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "99f6fdd9eb60f5b8b9b172b1b2cfa627be566a9d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/99f6fdd9eb60f5b8b9b172b1b2cfa627be566a9d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/99f6fdd9eb60f5b8b9b172b1b2cfa627be566a9d"
    }
  ],
  "stats": {
    "total": 59,
    "additions": 51,
    "deletions": 8
  },
  "files": [
    {
      "sha": "9aace1337f4d6f61d902f0660b98e0c75502662a",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1296bc99b1bf5da38be18ac1fdf6ad8d1b697e6b/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1296bc99b1bf5da38be18ac1fdf6ad8d1b697e6b/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=1296bc99b1bf5da38be18ac1fdf6ad8d1b697e6b",
      "patch": "@@ -1,3 +1,19 @@\n+2019-11-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* dwarf.c (typedef dwarf_regname_lookup_ftype): New typedef.\n+\t(dwarf_regnames_lookup_func): New static global.\n+\t(init_dwarf_regnames_i386): Set dwarf_regnames_lookup_func.\n+\t(init_dwarf_regnames_iamcu): Likewise.\n+\t(init_dwarf_regnames_x86_64): Likewise.\n+\t(init_dwarf_regnames_aarch64): Likewise.\n+\t(init_dwarf_regnames_s390): Likewise.\n+\t(init_dwarf_regnames_riscv): Likewise.\n+\t(init_dwarf_regnames_by_elf_machine_code): Reset\n+\tdwarf_regnames_lookup_func to NULL.\n+\t(init_dwarf_regnames_by_bfd_arch_and_mach): Likewise.\n+\t(regname_internal_by_table_only): New function.\n+\t(regname): Make use of dwarf_regnames_lookup_func.\n+\n 2019-11-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* dwarf.c (init_dwarf_regnames_i386): Make static."
    },
    {
      "sha": "483d7c080bb9b97a6a6b1a13fdcb42bf91b20099",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 35,
      "deletions": 8,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1296bc99b1bf5da38be18ac1fdf6ad8d1b697e6b/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1296bc99b1bf5da38be18ac1fdf6ad8d1b697e6b/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=1296bc99b1bf5da38be18ac1fdf6ad8d1b697e6b",
      "patch": "@@ -38,6 +38,7 @@\n #define MIN(a, b) ((a) < (b) ? (a) : (b))\n \n static const char *regname (unsigned int regno, int row);\n+static const char *regname_internal_by_table_only (unsigned int regno);\n \n static int have_frame_base;\n static int need_base_address;\n@@ -7360,9 +7361,12 @@ typedef struct Frame_Chunk\n }\n Frame_Chunk;\n \n+typedef const char *(*dwarf_regname_lookup_ftype) (unsigned int);\n+static dwarf_regname_lookup_ftype dwarf_regnames_lookup_func;\n static const char *const *dwarf_regnames;\n static unsigned int dwarf_regnames_count;\n \n+\n /* A marker for a col_type that means this column was never referenced\n    in the frame info.  */\n #define DW_CFA_unreferenced (-1)\n@@ -7469,13 +7473,15 @@ init_dwarf_regnames_i386 (void)\n {\n   dwarf_regnames = dwarf_regnames_i386;\n   dwarf_regnames_count = ARRAY_SIZE (dwarf_regnames_i386);\n+  dwarf_regnames_lookup_func = regname_internal_by_table_only;\n }\n \n static void\n init_dwarf_regnames_iamcu (void)\n {\n   dwarf_regnames = dwarf_regnames_iamcu;\n   dwarf_regnames_count = ARRAY_SIZE (dwarf_regnames_iamcu);\n+  dwarf_regnames_lookup_func = regname_internal_by_table_only;\n }\n \n static const char *const dwarf_regnames_x86_64[] =\n@@ -7515,6 +7521,7 @@ init_dwarf_regnames_x86_64 (void)\n {\n   dwarf_regnames = dwarf_regnames_x86_64;\n   dwarf_regnames_count = ARRAY_SIZE (dwarf_regnames_x86_64);\n+  dwarf_regnames_lookup_func = regname_internal_by_table_only;\n }\n \n static const char *const dwarf_regnames_aarch64[] =\n@@ -7542,6 +7549,7 @@ init_dwarf_regnames_aarch64 (void)\n {\n   dwarf_regnames = dwarf_regnames_aarch64;\n   dwarf_regnames_count = ARRAY_SIZE (dwarf_regnames_aarch64);\n+  dwarf_regnames_lookup_func = regname_internal_by_table_only;\n }\n \n static const char *const dwarf_regnames_s390[] =\n@@ -7566,6 +7574,7 @@ init_dwarf_regnames_s390 (void)\n {\n   dwarf_regnames = dwarf_regnames_s390;\n   dwarf_regnames_count = ARRAY_SIZE (dwarf_regnames_s390);\n+  dwarf_regnames_lookup_func = regname_internal_by_table_only;\n }\n \n static const char *const dwarf_regnames_riscv[] =\n@@ -7587,11 +7596,14 @@ init_dwarf_regnames_riscv (void)\n {\n   dwarf_regnames = dwarf_regnames_riscv;\n   dwarf_regnames_count = ARRAY_SIZE (dwarf_regnames_riscv);\n+  dwarf_regnames_lookup_func = regname_internal_by_table_only;\n }\n \n void\n init_dwarf_regnames_by_elf_machine_code (unsigned int e_machine)\n {\n+  dwarf_regnames_lookup_func = NULL;\n+\n   switch (e_machine)\n     {\n     case EM_386:\n@@ -7632,6 +7644,8 @@ void\n init_dwarf_regnames_by_bfd_arch_and_mach (enum bfd_architecture arch,\n \t\t\t\t\t  unsigned long mach)\n {\n+  dwarf_regnames_lookup_func = NULL;\n+\n   switch (arch)\n     {\n     case bfd_arch_i386:\n@@ -7674,18 +7688,31 @@ init_dwarf_regnames_by_bfd_arch_and_mach (enum bfd_architecture arch,\n }\n \n static const char *\n-regname (unsigned int regno, int row)\n+regname_internal_by_table_only (unsigned int regno)\n {\n-  static char reg[64];\n-\n-  if (dwarf_regnames\n+  if (dwarf_regnames != NULL\n       && regno < dwarf_regnames_count\n       && dwarf_regnames [regno] != NULL)\n+    return dwarf_regnames [regno];\n+\n+  return NULL;\n+}\n+\n+static const char *\n+regname (unsigned int regno, int name_only_p)\n+{\n+  static char reg[64];\n+\n+  const char *name = NULL;\n+\n+  if (dwarf_regnames_lookup_func != NULL)\n+    name = dwarf_regnames_lookup_func (regno);\n+\n+  if (name != NULL)\n     {\n-      if (row)\n-\treturn dwarf_regnames [regno];\n-      snprintf (reg, sizeof (reg), \"r%d (%s)\", regno,\n-\t\tdwarf_regnames [regno]);\n+      if (name_only_p)\n+\treturn name;\n+      snprintf (reg, sizeof (reg), \"r%d (%s)\", regno, name);\n     }\n   else\n     snprintf (reg, sizeof (reg), \"r%d\", regno);"
    }
  ]
}