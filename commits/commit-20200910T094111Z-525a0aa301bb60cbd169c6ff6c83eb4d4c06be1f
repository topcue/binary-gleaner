{
  "sha": "525a0aa301bb60cbd169c6ff6c83eb4d4c06be1f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTI1YTBhYTMwMWJiNjBjYmQxNjljNmZmNmM4M2ViNGQ0YzA2YmUxZg==",
  "commit": {
    "author": {
      "name": "Cooper Qu",
      "email": "cooper.qu@linux.alibaba.com",
      "date": "2020-09-10T09:36:24Z"
    },
    "committer": {
      "name": "Lifang Xia",
      "email": "xlf194833_xia@alibaba-inc.com",
      "date": "2020-09-10T09:41:11Z"
    },
    "message": "CSKY: Add new arches while refine the cpu option process.\n\nAdd arches CK804, CK805 and CK800. CK800 is an special arch which\nsupport all instructions for CSKYV2. Refine the cpu tables to\nsimplify adding a new cpu.\n\nCo-Authored-By: Lifang Xia <lifang_xia@c-sky.com>\n\ngas/\n\t* config/tc-csky.c (struct csky_cpu_info): Add new members\n\tisa_flag, features and ver.\n\t(struct csky_cpu_feature): New.\n\t(struct csky_cpu_version): New.\n\t(CSKY_FEATURE_MAX): Define.\n\t(CSKY_CPU_REVERISON_MAX): Define.\n\t(FEATURE_DSP_EXT, FEATURE_DSP, FEATURE_MMU, FEATURE_VDSP,\n\t FEATURE_FLOAT, FEATURE_TRUST, FEATURE_JAVA, FEATURE_SHIELD):\n\tDefine, each standard one collection of instructions.\n\t(CSKY_FEATURES_DEF_NULL, CSKY_FEATURES_DEF_e,\n\t CSKY_FEATURES_DEF_t, CSKY_FEATURES_DEF_f, CSKY_FEATURES_DEF_v,\n\t CSKY_FEATURES_DEF_ef, CSKY_FEATURES_DEF_jt,\n\t CSKY_FEATURES_DEF_efht, CSKY_FEATURES_DEF_efv,\n\t CSKY_FEATURES_DEF_eft, CSKY_FEATURES_DEF_d,\n\t CSKY_FEATURES_DEF_df, CSKY_FEATURES_DEF_ft,\n\t CSKY_FEATURES_DEF_tv, CSKY_FEATURES_DEF_fv,\n\t CSKY_FEATURES_DEF_dft, CSKY_FEATURES_DEF_dfv,\n\t CSKY_FEATURES_DEF_ftv, CSKY_FEATURES_DEF_eftv): Define,\n\tthe features combination used by cpu.\n\t(CSKY_CPU_REVERISON_r0p0, CSKY_CPU_REVERISON_r1p0,\n\t CSKY_CPU_REVERISON_r2p0, CSKY_CPU_REVERISON_r3p0,\n\t CSKY_CPU_REVERISON_RESERVED, CSKY_CPU_REVERISON_R3):\n\tDefine, version information used by cpu.\n\t(csky_cpus): Refine, and add CK804, CK805 and CK800.\n\t(parse_cpu): Refine.\n\t(parse_arch): Refine.\n\t(md_show_usage): Refine.\n\t(md_begin): Refine.\n\ninclude/\n\t* opcode/csky.h (CSKY_ARCH_804): Define.\n\t(CSKY_ARCH_805): Define.\n\t(CSKY_ARCH_800): Define.",
    "tree": {
      "sha": "d8de68dc7017ff055db19347df14d3b056e56c08",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d8de68dc7017ff055db19347df14d3b056e56c08"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/525a0aa301bb60cbd169c6ff6c83eb4d4c06be1f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/525a0aa301bb60cbd169c6ff6c83eb4d4c06be1f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/525a0aa301bb60cbd169c6ff6c83eb4d4c06be1f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/525a0aa301bb60cbd169c6ff6c83eb4d4c06be1f/comments",
  "author": {
    "login": "Cooper-Qu",
    "id": 68842787,
    "node_id": "MDQ6VXNlcjY4ODQyNzg3",
    "avatar_url": "https://avatars.githubusercontent.com/u/68842787?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Cooper-Qu",
    "html_url": "https://github.com/Cooper-Qu",
    "followers_url": "https://api.github.com/users/Cooper-Qu/followers",
    "following_url": "https://api.github.com/users/Cooper-Qu/following{/other_user}",
    "gists_url": "https://api.github.com/users/Cooper-Qu/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Cooper-Qu/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Cooper-Qu/subscriptions",
    "organizations_url": "https://api.github.com/users/Cooper-Qu/orgs",
    "repos_url": "https://api.github.com/users/Cooper-Qu/repos",
    "events_url": "https://api.github.com/users/Cooper-Qu/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Cooper-Qu/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": null,
  "parents": [
    {
      "sha": "36efe0aea5f7e5088f79e4c8d0265de0c0ec2be9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/36efe0aea5f7e5088f79e4c8d0265de0c0ec2be9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/36efe0aea5f7e5088f79e4c8d0265de0c0ec2be9"
    }
  ],
  "stats": {
    "total": 646,
    "additions": 474,
    "deletions": 172
  },
  "files": [
    {
      "sha": "72b1fc886a68ab473356a0204758fac3d4d0f5e7",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/525a0aa301bb60cbd169c6ff6c83eb4d4c06be1f/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/525a0aa301bb60cbd169c6ff6c83eb4d4c06be1f/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=525a0aa301bb60cbd169c6ff6c83eb4d4c06be1f",
      "patch": "@@ -1,3 +1,34 @@\n+2020-09-10  Cooper Qu  <cooper.qu@linux.alibaba.com>\n+\n+\t* config/tc-csky.c (struct csky_cpu_info): Add new members\n+\tisa_flag, features and ver.\n+\t(struct csky_cpu_feature): New.\n+\t(struct csky_cpu_version): New.\n+\t(CSKY_FEATURE_MAX): Define.\n+\t(CSKY_CPU_REVERISON_MAX): Define.\n+\t(FEATURE_DSP_EXT, FEATURE_DSP, FEATURE_MMU, FEATURE_VDSP,\n+\t FEATURE_FLOAT, FEATURE_TRUST, FEATURE_JAVA, FEATURE_SHIELD):\n+\tDefine, each standard one collection of instructions.\n+\t(CSKY_FEATURES_DEF_NULL, CSKY_FEATURES_DEF_e,\n+\t CSKY_FEATURES_DEF_t, CSKY_FEATURES_DEF_f, CSKY_FEATURES_DEF_v,\n+\t CSKY_FEATURES_DEF_ef, CSKY_FEATURES_DEF_jt,\n+\t CSKY_FEATURES_DEF_efht, CSKY_FEATURES_DEF_efv,\n+\t CSKY_FEATURES_DEF_eft, CSKY_FEATURES_DEF_d,\n+\t CSKY_FEATURES_DEF_df, CSKY_FEATURES_DEF_ft,\n+\t CSKY_FEATURES_DEF_tv, CSKY_FEATURES_DEF_fv,\n+\t CSKY_FEATURES_DEF_dft, CSKY_FEATURES_DEF_dfv,\n+\t CSKY_FEATURES_DEF_ftv, CSKY_FEATURES_DEF_eftv): Define,\n+\tthe features combination used by cpu.\n+\t(CSKY_CPU_REVERISON_r0p0, CSKY_CPU_REVERISON_r1p0,\n+\t CSKY_CPU_REVERISON_r2p0, CSKY_CPU_REVERISON_r3p0,\n+\t CSKY_CPU_REVERISON_RESERVED, CSKY_CPU_REVERISON_R3):\n+\tDefine, version information used by cpu.\n+\t(csky_cpus): Refine, and add CK804, CK805 and CK800.\n+\t(parse_cpu): Refine.\n+\t(parse_arch): Refine.\n+\t(md_show_usage): Refine.\n+\t(md_begin): Refine.\n+\n 2020-09-09  Alan Modra  <amodra@gmail.com>\n \n \t* config/tc-ppc.c (md_assemble): Emit prefix insn by parts when"
    },
    {
      "sha": "cafadcc942ffdcf0247f98612a70260130a9c603",
      "filename": "gas/config/tc-csky.c",
      "status": "modified",
      "additions": 435,
      "deletions": 172,
      "changes": 607,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/525a0aa301bb60cbd169c6ff6c83eb4d4c06be1f/gas/config/tc-csky.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/525a0aa301bb60cbd169c6ff6c83eb4d4c06be1f/gas/config/tc-csky.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-csky.c?ref=525a0aa301bb60cbd169c6ff6c83eb4d4c06be1f",
      "patch": "@@ -231,13 +231,6 @@ struct csky_arch_info\n   unsigned int bfd_mach_flag;\n };\n \n-struct csky_cpu_info\n-{\n-  const char *name;\n-  unsigned int mach_flag;\n-  BFD_HOST_U_64_BIT isa_flag;\n-};\n-\n typedef enum\n {\n   INSN_OPCODE,\n@@ -266,6 +259,8 @@ struct csky_insn_info\n   char *output;\n   /* End of instruction.  */\n   char *opcode_end;\n+  /* CPU infomations.  */\n+  const struct csky_cpu_info *cpu;\n   /* Flag for INSN_OPCODE16F, INSN_OPCODE32F, INSN_OPCODE, INSN_MACRO.  */\n   inst_flag flag_force;\n   /* Operand number.  */\n@@ -591,129 +586,356 @@ const struct csky_arch_info csky_archs[] =\n #define CSKY_ARCH_807_BASE    CSKY_ARCH_807 | CSKY_ARCH_DSP\n #define CSKY_ARCH_810_BASE    CSKY_ARCH_810 | CSKY_ARCH_DSP\n \n-/* C-SKY cpus table.  */\n+struct csky_cpu_feature\n+{\n+  const char unique;\n+  unsigned int arch_flag;\n+  bfd_uint64_t isa_flag;\n+};\n+\n+struct csky_cpu_version\n+{\n+  int r;\n+  int p;\n+  bfd_uint64_t isa_flag;\n+};\n+\n+#define CSKY_FEATURE_MAX  10\n+#define CSKY_CPU_REVERISON_MAX 10\n+\n+struct csky_cpu_info\n+{\n+  const char *name;\n+  unsigned int arch_flag;\n+  bfd_uint64_t isa_flag;\n+  struct csky_cpu_feature features[CSKY_FEATURE_MAX];\n+  struct csky_cpu_version ver[CSKY_CPU_REVERISON_MAX];\n+};\n+\n+#define FEATURE_DSP_EXT(isa)                \\\n+   {'e', CSKY_ARCH_DSP, isa}\n+#define FEATURE_DSP(isa)                    \\\n+   {'d', CSKY_ARCH_DSP, isa}\n+#define FEATURE_MMU()                       \\\n+   {'m', 0, 0}\n+#define FEATURE_VDSP(isa)                   \\\n+   {'v', CSKY_ARCH_DSP, isa}\n+#define FEATURE_FLOAT(isa)                  \\\n+   {'f', CSKY_ARCH_FLOAT, isa}\n+#define FEATURE_TRUST(isa)                  \\\n+   {'t', 0, isa}\n+#define FEATURE_JAVA(isa)                   \\\n+   {'j', CSKY_ARCH_JAVA, isa}\n+#define FEATURE_SHIELD(isa)                 \\\n+   {'h', 0, isa}\n+\n+\n+#define CSKY_FEATURES_DEF_NULL()            \\\n+   {{0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+#define CSKY_FEATURES_DEF_e(isa_e)          \\\n+   {FEATURE_DSP_EXT(isa_e),                 \\\n+    {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+#define CSKY_FEATURES_DEF_t(isa_t)          \\\n+   {FEATURE_TRUST(isa_t),                   \\\n+    {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+#define CSKY_FEATURES_DEF_f(isa_f)          \\\n+   {FEATURE_FLOAT(isa_f),                   \\\n+    {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+#define CSKY_FEATURES_DEF_v(isa_v)          \\\n+   {FEATURE_VDSP(isa_v),                    \\\n+    {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+#define CSKY_FEATURES_DEF_ef(isa_e, isa_f)  \\\n+   {FEATURE_DSP_EXT(isa_e),                 \\\n+    FEATURE_FLOAT(isa_f),                   \\\n+    {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+#define CSKY_FEATURES_DEF_jt(isa_j, isa_t)  \\\n+   {FEATURE_JAVA(isa_j),                    \\\n+    FEATURE_TRUST(isa_t),                   \\\n+    {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+#define CSKY_FEATURES_DEF_efht(isa_e, isa_f, isa_h, isa_t) \\\n+   {FEATURE_DSP_EXT(isa_e),                 \\\n+    FEATURE_FLOAT(isa_f),                   \\\n+    FEATURE_SHIELD(isa_h),                  \\\n+    FEATURE_TRUST(isa_t),                   \\\n+    {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+#define CSKY_FEATURES_DEF_efv(isa_e, isa_f, isa_v) \\\n+   {FEATURE_DSP_EXT(isa_e),                 \\\n+    FEATURE_FLOAT(isa_f),                   \\\n+    FEATURE_VDSP(isa_v),                    \\\n+    {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+#define CSKY_FEATURES_DEF_eft(isa_e, isa_f, isa_t) \\\n+   {FEATURE_DSP_EXT(isa_e),                 \\\n+    FEATURE_FLOAT(isa_f),                   \\\n+    FEATURE_TRUST(isa_t),                   \\\n+    {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+#define CSKY_FEATURES_DEF_d(isa_d) \\\n+   {FEATURE_DSP(isa_d),             \\\n+    {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+#define CSKY_FEATURES_DEF_df(isa_d, isa_f)  \\\n+   {FEATURE_DSP(isa_d),             \\\n+    FEATURE_FLOAT(isa_f),               \\\n+    {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+#define CSKY_FEATURES_DEF_ft(isa_f, isa_t)  \\\n+   {FEATURE_FLOAT(isa_f),                   \\\n+    FEATURE_TRUST(isa_t),                   \\\n+    {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+#define CSKY_FEATURES_DEF_tv(isa_t, isa_v)  \\\n+   {FEATURE_TRUST(isa_t),                   \\\n+    FEATURE_VDSP(isa_v),                    \\\n+    {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+#define CSKY_FEATURES_DEF_fv(isa_f, isa_v)  \\\n+   {FEATURE_FLOAT(isa_f),                   \\\n+    FEATURE_VDSP(isa_v),                    \\\n+    {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+\n+#define CSKY_FEATURES_DEF_dft(isa_d, isa_f, isa_t) \\\n+   {FEATURE_DSP(isa_d),                     \\\n+    FEATURE_FLOAT(isa_f),                   \\\n+    FEATURE_TRUST(isa_t),                   \\\n+    {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+#define CSKY_FEATURES_DEF_dfv(isa_d, isa_f, isa_v) \\\n+   {FEATURE_DSP(isa_d),                     \\\n+    FEATURE_FLOAT(isa_f),                   \\\n+    FEATURE_VDSP(isa_v),                    \\\n+    {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+#define CSKY_FEATURES_DEF_ftv(isa_f, isa_t, isa_v) \\\n+   {FEATURE_FLOAT(isa_f),                   \\\n+    FEATURE_TRUST(isa_t),                   \\\n+    FEATURE_VDSP(isa_v),                    \\\n+    {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+#define CSKY_FEATURES_DEF_eftv(isa_e, isa_f, isa_t, isa_v) \\\n+   {FEATURE_DSP_EXT(isa_e),                 \\\n+    FEATURE_FLOAT(isa_f),                   \\\n+    FEATURE_TRUST(isa_t),                   \\\n+    FEATURE_VDSP(isa_v),                    \\\n+    {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+\n+#define CSKY_CPU_REVERISON_r0p0(isa)        \\\n+    {0, 0, 0}\n+#define CSKY_CPU_REVERISON_r1p0(isa)        \\\n+    {1, 0, isa}\n+#define CSKY_CPU_REVERISON_r2p0(isa)        \\\n+    {2, 0, isa}\n+#define CSKY_CPU_REVERISON_r3p0(isa)        \\\n+    {3, 0, isa}\n+\n+#define CSKY_CPU_REVERISON_RESERVED()  \\\n+{{0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+#define CSKY_CPU_REVERISON_R3(isa1, isa2, isa3) \\\n+  {CSKY_CPU_REVERISON_r1p0(isa1),           \\\n+   CSKY_CPU_REVERISON_r2p0(isa2),           \\\n+   CSKY_CPU_REVERISON_r3p0(isa3),           \\\n+   {0}, {0}, {0}, {0}, {0}, {0}, {0}}\n+\n+/* CSKY cpus table.  */\n const struct csky_cpu_info csky_cpus[] =\n {\n-  /* CK510 series.  */\n-#define CSKYV1_ISA_DSP   CSKY_ISA_DSP | CSKY_ISA_MAC_DSP\n-  {\"ck510\",  CSKY_ARCH_510, CSKYV1_ISA_E1},\n-  {\"ck510e\", CSKY_ARCH_510 | CSKY_ARCH_DSP, CSKYV1_ISA_E1 | CSKYV1_ISA_DSP},\n-  {\"ck520\",  CSKY_ARCH_510 | CSKY_ARCH_MAC, CSKYV1_ISA_E1 | CSKY_ISA_MAC | CSKY_ISA_MAC_DSP},\n-\n-#define CSKY_ISA_610          CSKYV1_ISA_E1 | CSKY_ISA_CP\n-  /* CK610 series.  */\n-  {\"ck610\",  CSKY_ARCH_610, CSKY_ISA_610},\n-  {\"ck610e\", CSKY_ARCH_610 | CSKY_ARCH_DSP, CSKY_ISA_610 | CSKYV1_ISA_DSP},\n-  {\"ck610f\", CSKY_ARCH_610 | CSKY_ARCH_FLOAT, CSKY_ISA_610 | CSKY_ISA_FLOAT_E1},\n-  {\"ck610ef\", CSKY_ARCH_610 | CSKY_ARCH_FLOAT | CSKY_ARCH_DSP, CSKY_ISA_610 | CSKY_ISA_FLOAT_E1 | CSKYV1_ISA_DSP},\n-  {\"ck610fe\", CSKY_ARCH_610 | CSKY_ARCH_FLOAT | CSKY_ARCH_DSP, CSKY_ISA_610 | CSKY_ISA_FLOAT_E1 | CSKYV1_ISA_DSP},\n-  {\"ck620\",  CSKY_ARCH_610 | CSKY_ARCH_MAC, CSKY_ISA_610 | CSKY_ISA_MAC | CSKY_ISA_MAC_DSP},\n-\n-  /* CK801 series.  */\n-#define CSKY_ISA_801    CSKYV2_ISA_E1\n+#define CSKYV1_ISA_DSP   (CSKY_ISA_DSP | CSKY_ISA_MAC_DSP)\n+#define CSKY_ISA_510     (CSKYV1_ISA_E1)\n+#define CSKY_ISA_610     (CSKYV1_ISA_E1 | CSKY_ISA_CP)\n+  {\"ck510\",\n+    CSKY_ARCH_510,\n+    CSKY_ISA_510,\n+    CSKY_FEATURES_DEF_e(CSKYV1_ISA_DSP),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+  {\"ck520\",\n+    CSKY_ARCH_510 | CSKY_ARCH_MAC,\n+    CSKY_ISA_510 | CSKY_ISA_MAC | CSKY_ISA_MAC_DSP,\n+    CSKY_FEATURES_DEF_NULL(),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+  {\"ck610\", CSKY_ARCH_610, CSKY_ISA_610,\n+    CSKY_FEATURES_DEF_ef(CSKYV1_ISA_DSP, CSKY_ISA_FLOAT_E1),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+  {\"ck620\",\n+    CSKY_ARCH_610 | CSKY_ARCH_MAC,\n+    CSKY_ISA_610 | CSKY_ISA_MAC | CSKY_ISA_MAC_DSP,\n+    CSKY_FEATURES_DEF_NULL(),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+\n+#define CSKY_ISA_801    (CSKYV2_ISA_E1 | CSKY_ISA_TRUST)\n #define CSKYV2_ISA_DSP  (CSKY_ISA_DSP | CSKY_ISA_DSP_1E2 | CSKY_ISA_DSPE60)\n-  {\"ck801\", CSKY_ARCH_801, CSKY_ISA_801},\n-  {\"ck801t\", CSKY_ARCH_801, CSKY_ISA_801 | CSKY_ISA_TRUST},\n-\n-  /* CK802 series.  */\n+  {\"ck801\",\n+    CSKY_ARCH_801,\n+    CSKY_ISA_801,\n+    CSKY_FEATURES_DEF_t(0),\n+    CSKY_CPU_REVERISON_RESERVED()},\n #define CSKY_ISA_802    (CSKY_ISA_801 | CSKYV2_ISA_1E2 | CSKY_ISA_NVIC)\n-  {\"ck802\", CSKY_ARCH_802, CSKY_ISA_802},\n-  {\"ck802j\", CSKY_ARCH_802 | CSKY_ARCH_JAVA, CSKY_ISA_802 | CSKY_ISA_JAVA},\n-  {\"ck802t\", CSKY_ARCH_802, CSKY_ISA_802 | CSKY_ISA_TRUST},\n-\n-  /* CK803 series.  */\n+  {\"ck802\",\n+    CSKY_ARCH_802,\n+    CSKY_ISA_802,\n+    CSKY_FEATURES_DEF_jt(CSKY_ISA_JAVA, 0),\n+    CSKY_CPU_REVERISON_RESERVED()},\n #define CSKY_ISA_803    (CSKY_ISA_802 | CSKYV2_ISA_2E3 | CSKY_ISA_MP)\n-#define CSKY_ISA_803R1  (CSKY_ISA_803 | CSKYV2_ISA_3E3R1)\n+#define CSKY_ISA_803R1  (CSKYV2_ISA_3E3R1)\n+#define CSKY_ISA_803R2  (CSKYV2_ISA_3E3R1 | CSKYV2_ISA_3E3R2)\n+#define CSKY_ISA_803R3  (CSKYV2_ISA_3E3R1 | CSKYV2_ISA_3E3R2 | CSKYV2_ISA_3E3R3)\n #define CSKY_ISA_FLOAT_803 (CSKY_ISA_FLOAT_E1 | CSKY_ISA_FLOAT_1E3)\n-#define CSKY_ISA_EDSP   (CSKYV2_ISA_3E3R3 | CSKY_ISA_DSP_ENHANCE)\n-  {\"ck803\", CSKY_ARCH_803, CSKY_ISA_803 },\n-  {\"ck803h\", CSKY_ARCH_803, CSKY_ISA_803 },\n-  {\"ck803t\", CSKY_ARCH_803, CSKY_ISA_803 | CSKY_ISA_TRUST},\n-  {\"ck803ht\", CSKY_ARCH_803, CSKY_ISA_803 | CSKY_ISA_TRUST},\n-  {\"ck803f\", CSKY_ARCH_803 | CSKY_ARCH_FLOAT, CSKY_ISA_803 | CSKY_ISA_FLOAT_803},\n-  {\"ck803fh\", CSKY_ARCH_803 | CSKY_ARCH_FLOAT, CSKY_ISA_803 | CSKY_ISA_FLOAT_803},\n-  {\"ck803e\", CSKY_ARCH_803 | CSKY_ARCH_DSP, CSKY_ISA_803 | CSKYV2_ISA_DSP},\n-  {\"ck803eh\", CSKY_ARCH_803 | CSKY_ARCH_DSP, CSKY_ISA_803 | CSKYV2_ISA_DSP},\n-  {\"ck803et\", CSKY_ARCH_803 | CSKY_ARCH_DSP, CSKY_ISA_803 | CSKYV2_ISA_DSP | CSKY_ISA_TRUST},\n-  {\"ck803eht\", CSKY_ARCH_803 | CSKY_ARCH_DSP, CSKY_ISA_803 | CSKYV2_ISA_DSP | CSKY_ISA_TRUST},\n-  {\"ck803ef\", CSKY_ARCH_803 | CSKY_ARCH_DSP | CSKY_ARCH_FLOAT, CSKY_ISA_803 | CSKYV2_ISA_DSP | CSKY_ISA_FLOAT_803},\n-  {\"ck803efh\", CSKY_ARCH_803 | CSKY_ARCH_DSP | CSKY_ARCH_FLOAT, CSKY_ISA_803 | CSKYV2_ISA_DSP | CSKY_ISA_FLOAT_803},\n-  {\"ck803ft\", CSKY_ARCH_803 | CSKY_ARCH_FLOAT, CSKY_ISA_803 | CSKY_ISA_FLOAT_803 | CSKY_ISA_TRUST},\n-  {\"ck803eft\", CSKY_ARCH_803 | CSKY_ARCH_DSP | CSKY_ARCH_FLOAT, CSKY_ISA_803 | CSKYV2_ISA_DSP | CSKY_ISA_FLOAT_803 | CSKY_ISA_TRUST},\n-  {\"ck803efht\", CSKY_ARCH_803 | CSKY_ARCH_DSP | CSKY_ARCH_FLOAT, CSKY_ISA_803 | CSKYV2_ISA_DSP | CSKY_ISA_FLOAT_803 | CSKY_ISA_TRUST},\n-  {\"ck803r1\", CSKY_ARCH_803, CSKY_ISA_803R1 },\n-  {\"ck803hr1\", CSKY_ARCH_803, CSKY_ISA_803R1 },\n-  {\"ck803tr1\", CSKY_ARCH_803, CSKY_ISA_803R1 | CSKY_ISA_TRUST},\n-  {\"ck803htr1\", CSKY_ARCH_803, CSKY_ISA_803R1 | CSKY_ISA_TRUST},\n-  {\"ck803fr1\", CSKY_ARCH_803 | CSKY_ARCH_FLOAT, CSKY_ISA_803R1 | CSKY_ISA_FLOAT_803},\n-  {\"ck803fhr1\", CSKY_ARCH_803 | CSKY_ARCH_FLOAT, CSKY_ISA_803R1 | CSKY_ISA_FLOAT_803},\n-  {\"ck803er1\", CSKY_ARCH_803 | CSKY_ARCH_DSP, CSKY_ISA_803R1 | CSKY_ISA_EDSP},\n-  {\"ck803ehr1\", CSKY_ARCH_803 | CSKY_ARCH_DSP, CSKY_ISA_803R1 | CSKY_ISA_EDSP},\n-  {\"ck803etr1\", CSKY_ARCH_803 | CSKY_ARCH_DSP, CSKY_ISA_803R1 | CSKY_ISA_EDSP | CSKY_ISA_TRUST},\n-  {\"ck803ehtr1\", CSKY_ARCH_803 | CSKY_ARCH_DSP, CSKY_ISA_803R1 | CSKY_ISA_EDSP | CSKY_ISA_TRUST},\n-  {\"ck803efr1\", CSKY_ARCH_803 | CSKY_ARCH_DSP | CSKY_ARCH_FLOAT, CSKY_ISA_803R1 | CSKY_ISA_EDSP | CSKY_ISA_FLOAT_803},\n-  {\"ck803efhr1\", CSKY_ARCH_803 | CSKY_ARCH_DSP | CSKY_ARCH_FLOAT, CSKY_ISA_803R1 | CSKY_ISA_EDSP | CSKY_ISA_FLOAT_803},\n-  {\"ck803ftr1\", CSKY_ARCH_803 | CSKY_ARCH_FLOAT, CSKY_ISA_803R1 | CSKY_ISA_FLOAT_803 | CSKY_ISA_TRUST},\n-  {\"ck803eftr1\", CSKY_ARCH_803 | CSKY_ARCH_DSP | CSKY_ARCH_FLOAT, CSKY_ISA_803R1 | CSKY_ISA_EDSP | CSKY_ISA_FLOAT_803 | CSKY_ISA_TRUST},\n-  {\"ck803ehftr1\", CSKY_ARCH_803 | CSKY_ARCH_DSP | CSKY_ARCH_FLOAT, CSKY_ISA_803R1 | CSKY_ISA_EDSP | CSKY_ISA_FLOAT_803 | CSKY_ISA_TRUST},\n-\n-#define CSKY_ISA_803R2  (CSKY_ISA_803R1 | CSKYV2_ISA_3E3R2)\n-  {\"ck803r2\", CSKY_ARCH_803, CSKY_ISA_803R2},\n-  {\"ck803hr2\", CSKY_ARCH_803, CSKY_ISA_803R2},\n-  {\"ck803tr2\", CSKY_ARCH_803, CSKY_ISA_803R2 | CSKY_ISA_TRUST},\n-  {\"ck803htr2\", CSKY_ARCH_803, CSKY_ISA_803R2 | CSKY_ISA_TRUST},\n-  {\"ck803fr2\", CSKY_ARCH_803 | CSKY_ARCH_FLOAT, CSKY_ISA_803R2 | CSKY_ISA_FLOAT_803},\n-  {\"ck803fhr2\", CSKY_ARCH_803 | CSKY_ARCH_FLOAT, CSKY_ISA_803R2 | CSKY_ISA_FLOAT_803},\n-  {\"ck803er2\", CSKY_ARCH_803 | CSKY_ARCH_DSP, CSKY_ISA_803R2 | CSKY_ISA_EDSP},\n-  {\"ck803ehr2\", CSKY_ARCH_803 | CSKY_ARCH_DSP, CSKY_ISA_803R2 | CSKY_ISA_EDSP},\n-  {\"ck803etr2\", CSKY_ARCH_803 | CSKY_ARCH_DSP, CSKY_ISA_803R2 | CSKY_ISA_EDSP | CSKY_ISA_TRUST},\n-  {\"ck803ehtr2\", CSKY_ARCH_803 | CSKY_ARCH_DSP, CSKY_ISA_803R2 | CSKY_ISA_EDSP | CSKY_ISA_TRUST},\n-  {\"ck803efr2\", CSKY_ARCH_803 | CSKY_ARCH_DSP | CSKY_ARCH_FLOAT, CSKY_ISA_803R2 | CSKY_ISA_EDSP | CSKY_ISA_FLOAT_803},\n-  {\"ck803efhr2\", CSKY_ARCH_803 | CSKY_ARCH_DSP | CSKY_ARCH_FLOAT, CSKY_ISA_803R2 | CSKY_ISA_EDSP | CSKY_ISA_FLOAT_803},\n-  {\"ck803ftr2\", CSKY_ARCH_803 | CSKY_ARCH_FLOAT, CSKY_ISA_803R2 | CSKY_ISA_FLOAT_803 | CSKY_ISA_TRUST},\n-  {\"ck803eftr2\", CSKY_ARCH_803 | CSKY_ARCH_DSP | CSKY_ARCH_FLOAT, CSKY_ISA_803R2 | CSKY_ISA_EDSP | CSKY_ISA_FLOAT_803 | CSKY_ISA_TRUST},\n-  {\"ck803efhtr2\", CSKY_ARCH_803 | CSKY_ARCH_DSP | CSKY_ARCH_FLOAT, CSKY_ISA_803R2 | CSKY_ISA_EDSP | CSKY_ISA_FLOAT_803 | CSKY_ISA_TRUST},\n-\n-#define CSKY_ISA_803R3  (CSKY_ISA_803R2 | CSKYV2_ISA_3E3R3)\n-  {\"ck803r3\", CSKY_ARCH_803, CSKY_ISA_803R3},\n-\n-  {\"ck803s\", CSKY_ARCH_803, CSKY_ISA_803R1 },\n-  {\"ck803se\", CSKY_ARCH_803 | CSKY_ARCH_DSP, CSKY_ISA_803R1 | CSKYV2_ISA_DSP},\n-  {\"ck803sj\", CSKY_ARCH_803 | CSKY_ARCH_JAVA, CSKY_ISA_803R1 | CSKY_ISA_JAVA},\n-  {\"ck803sf\", CSKY_ARCH_803 | CSKY_ARCH_FLOAT, CSKY_ISA_803R1 | CSKY_ISA_FLOAT_803},\n-  {\"ck803sef\", CSKY_ARCH_803 | CSKY_ARCH_DSP | CSKY_ARCH_FLOAT, CSKY_ISA_803R1 | CSKYV2_ISA_DSP | CSKY_ISA_FLOAT_803},\n-  {\"ck803st\", CSKY_ARCH_803, CSKY_ISA_803R1 | CSKY_ISA_TRUST},\n-\n-  /* CK807 series.  */\n-#define CSKY_ISA_807    (CSKY_ISA_803 | CSKYV2_ISA_3E7 | CSKY_ISA_DSP | CSKY_ISA_MP_1E2 | CSKY_ISA_CACHE)\n+#define CSKY_ISA_EDSP   (CSKYV2_ISA_3E3R1 | CSKYV2_ISA_3E3R3 | CSKY_ISA_DSP_ENHANCE)\n+   {\"ck803s\",\n+    CSKY_ARCH_803,\n+    CSKY_ISA_803 | CSKY_ISA_803R1,\n+    CSKY_FEATURES_DEF_eft(CSKYV2_ISA_DSP, CSKY_ISA_FLOAT_803, 0),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+   {\"ck803\",\n+    CSKY_ARCH_803,\n+    CSKY_ISA_803,\n+    CSKY_FEATURES_DEF_efht(CSKYV2_ISA_DSP, CSKY_ISA_FLOAT_803, 0, 0),\n+    CSKY_CPU_REVERISON_R3(CSKY_ISA_803R1, CSKY_ISA_803R2, CSKY_ISA_803R3)},\n+#define CSKY_ISA_804   (CSKY_ISA_803 | CSKY_ISA_803R3)\n+   {\"ck804\",\n+    CSKY_ARCH_804,\n+    CSKY_ISA_804,\n+    CSKY_FEATURES_DEF_efht(CSKY_ISA_EDSP, CSKY_ISA_FLOAT_803, 0, 0),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+#define CSKY_ISA_805   (CSKY_ISA_804 | CSKY_ISA_VDSP_2)\n+#define CSKY_ARCH_805V  (CSKY_ARCH_805 | CSKY_ARCH_DSP)\n+#define CSKY_ISA_FLOAT_805 CSKY_ISA_FLOAT_803\n+   {\"ck805\",\n+    CSKY_ARCH_805,\n+    CSKY_ISA_805,\n+    CSKY_FEATURES_DEF_eft(CSKY_ISA_EDSP, CSKY_ISA_FLOAT_805, 0),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+#define CSKY_ISA_807       (CSKY_ISA_803 | CSKYV2_ISA_3E7 | CSKY_ISA_MP_1E2 | CSKY_ISA_CACHE | CSKYV2_ISA_DSP)\n #define CSKY_ISA_FLOAT_807 (CSKY_ISA_FLOAT_803 | CSKY_ISA_FLOAT_3E4 | CSKY_ISA_FLOAT_1E2)\n-  {\"ck807e\", CSKY_ARCH_807_BASE, CSKY_ISA_807 | CSKYV2_ISA_DSP},\n-  {\"ck807ef\", CSKY_ARCH_807_BASE | CSKY_ARCH_FLOAT, CSKY_ISA_807 | CSKYV2_ISA_DSP | CSKY_ISA_FLOAT_807},\n-  {\"ck807\", CSKY_ARCH_807_BASE, CSKY_ISA_807 | CSKYV2_ISA_DSP},\n-  {\"ck807f\", CSKY_ARCH_807_BASE | CSKY_ARCH_FLOAT,  CSKY_ISA_807 | CSKYV2_ISA_DSP | CSKY_ISA_FLOAT_807},\n-\n-  /* CK810 series.  */\n-#define CSKY_ISA_810    (CSKY_ISA_807 | CSKYV2_ISA_7E10)\n+   {\"ck807\",\n+    CSKY_ARCH_807,\n+    CSKY_ISA_807,\n+    CSKY_FEATURES_DEF_ef(CSKYV2_ISA_DSP, CSKY_ISA_FLOAT_807),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+#define CSKY_ISA_810       (CSKY_ISA_807 | CSKYV2_ISA_7E10)\n #define CSKY_ISA_FLOAT_810 (CSKY_ISA_FLOAT_E1 | CSKY_ISA_FLOAT_1E2)\n-  {\"ck810e\", CSKY_ARCH_810_BASE, CSKY_ISA_810 | CSKYV2_ISA_DSP},\n-  {\"ck810et\", CSKY_ARCH_810_BASE, CSKY_ISA_810 | CSKYV2_ISA_DSP | CSKY_ISA_TRUST},\n-  {\"ck810ef\", CSKY_ARCH_810_BASE | CSKY_ARCH_FLOAT, CSKY_ISA_810 | CSKYV2_ISA_DSP | CSKY_ISA_FLOAT_810},\n-  {\"ck810eft\", CSKY_ARCH_810_BASE | CSKY_ARCH_FLOAT, CSKY_ISA_810 | CSKYV2_ISA_DSP | CSKY_ISA_FLOAT_810 | CSKY_ISA_TRUST},\n-  {\"ck810\", CSKY_ARCH_810_BASE, CSKY_ISA_810 | CSKYV2_ISA_DSP},\n-  {\"ck810v\", CSKY_ARCH_810_BASE, CSKY_ISA_810 | CSKYV2_ISA_DSP | CSKY_ISA_VDSP},\n-  {\"ck810f\", CSKY_ARCH_810_BASE | CSKY_ARCH_FLOAT, CSKY_ISA_810 | CSKYV2_ISA_DSP | CSKY_ISA_FLOAT_810},\n-  {\"ck810t\", CSKY_ARCH_810_BASE, CSKY_ISA_810 | CSKYV2_ISA_DSP | CSKY_ISA_TRUST},\n-  {\"ck810tv\", CSKY_ARCH_810_BASE, CSKY_ISA_810 | CSKYV2_ISA_DSP | CSKY_ISA_TRUST},\n-  {\"ck810ft\", CSKY_ARCH_810_BASE | CSKY_ARCH_FLOAT, CSKY_ISA_810 | CSKYV2_ISA_DSP | CSKY_ISA_VDSP | CSKY_ISA_FLOAT_810 | CSKY_ISA_TRUST},\n-  {\"ck810ftv\", CSKY_ARCH_810_BASE | CSKY_ARCH_FLOAT, CSKY_ISA_810 | CSKYV2_ISA_DSP | CSKY_ISA_VDSP | CSKY_ISA_FLOAT_810 | CSKY_ISA_TRUST},\n-\n-  /* CK860 Series.  */\n-#define CSKY_ISA_860    (CSKY_ISA_810 | CSKYV2_ISA_10E60 | CSKYV2_ISA_3E3R3 | CSKY_ISA_DSPE60)\n-#define CSKY_ISA_860F (CSKY_ISA_860 | CSKY_ISA_FLOAT_7E60)\n-  {\"ck860\", CSKY_ARCH_860, CSKY_ISA_860},\n-  {\"ck860f\", CSKY_ARCH_860, CSKY_ISA_860F},\n-\n-  {NULL, 0, 0}\n+   {\"ck810v\",\n+    CSKY_ARCH_810 | CSKY_ARCH_DSP,\n+    CSKY_ISA_810 | CSKY_ISA_VDSP,\n+    CSKY_FEATURES_DEF_NULL (),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+   {\"ck810\",\n+    CSKY_ARCH_810,\n+    CSKY_ISA_810,\n+    CSKY_FEATURES_DEF_eftv(0, CSKY_ISA_FLOAT_810, 0, CSKY_ISA_VDSP),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+#define CSKY_ISA_860       ((CSKY_ISA_810 & ~(CSKYV2_ISA_DSP)) | CSKYV2_ISA_10E60 | CSKY_ISA_803R3 | CSKY_ISA_DSPE60)\n+#define CSKY_ISA_860F      (CSKY_ISA_860 | CSKY_ISA_FLOAT_7E60)\n+#define CSKY_ISA_VDSP_860  (CSKY_ISA_VDSP_2)\n+   {\"ck860v\",\n+    CSKY_ARCH_860 | CSKY_ARCH_DSP,\n+    CSKY_ISA_860 | CSKY_ISA_VDSP_860,\n+    CSKY_FEATURES_DEF_f(CSKY_ISA_FLOAT_7E60),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+   {\"ck860\",\n+    CSKY_ARCH_860,\n+    CSKY_ISA_860,\n+    CSKY_FEATURES_DEF_fv(CSKY_ISA_FLOAT_7E60, CSKY_ISA_VDSP_860),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+\n+   /* It is a special cpu, support all instructions.  */\n+#define CSKY_ISA_800       (CSKY_ISA_860 | CSKY_ISA_810 | CSKY_ISA_807 | CSKY_ISA_803)\n+   {\"ck800\",\n+    CSKY_ARCH_800,\n+    CSKY_ISA_800,\n+    CSKY_FEATURES_DEF_NULL(),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+\n+\n+#define CSKY_ISA_E801      (CSKY_ISA_801)\n+#define CSKY_ISA_E802      (CSKY_ISA_E801 | CSKYV2_ISA_1E2 | CSKY_ISA_NVIC)\n+#define CSKY_ISA_E803      (CSKY_ISA_E802 | CSKYV2_ISA_2E3 | CSKY_ISA_MP | CSKYV2_ISA_3E3R1 | CSKYV2_ISA_3E3R2 | CSKYV2_ISA_3E3R3)\n+#define CSKY_ISA_E804      (CSKY_ISA_E803)\n+#define CSKY_ISA_FLOAT_V1  (CSKY_ISA_FLOAT_E1 | CSKY_ISA_FLOAT_1E3)\n+  {\"e801\",\n+    CSKY_ARCH_801,\n+    CSKY_ISA_E801,\n+    CSKY_FEATURES_DEF_NULL(),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+  {\"e802\",\n+    CSKY_ARCH_802,\n+    CSKY_ISA_E802,\n+    CSKY_FEATURES_DEF_t(0),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+  {\"e803\",\n+    CSKY_ARCH_803,\n+    CSKY_ISA_E803,\n+    CSKY_FEATURES_DEF_t(0),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+  {\"e804\",\n+    CSKY_ARCH_804,\n+    CSKY_ISA_E804,\n+    CSKY_FEATURES_DEF_dft(CSKY_ISA_EDSP, CSKY_ISA_FLOAT_V1, 0),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+\n+#define CSKY_ISA_S802       (CSKY_ISA_E801 | CSKYV2_ISA_1E2 | CSKY_ISA_NVIC | CSKY_ISA_TRUST)\n+#define CSKY_ISA_S803       (CSKY_ISA_S802 | CSKYV2_ISA_2E3 | CSKY_ISA_MP | CSKYV2_ISA_3E3R1 | CSKYV2_ISA_3E3R2 | CSKYV2_ISA_3E3R3)\n+  {\"s802\",\n+    CSKY_ARCH_802,\n+    CSKY_ISA_S802,\n+    CSKY_FEATURES_DEF_t(0),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+  {\"s803\",\n+    CSKY_ARCH_803,\n+    CSKY_ISA_S803,\n+    CSKY_FEATURES_DEF_t(0),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+#define CSKY_ISA_I805       (CSKY_ISA_S803)\n+  {\"i805\",\n+    CSKY_ARCH_805 | CSKY_ARCH_DSP,\n+    CSKY_ISA_I805 | CSKY_ISA_VDSP_2,\n+    CSKY_FEATURES_DEF_ft(CSKY_ISA_FLOAT_V1, 0),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+#define CSKYV2_ISA_DSP      (CSKY_ISA_DSP | CSKY_ISA_DSP_1E2 | CSKY_ISA_DSPE60)\n+#define CSKY_ISA_C807       (CSKY_ISA_E802 | CSKYV2_ISA_2E3 | CSKY_ISA_MP | CSKYV2_ISA_3E7 | CSKY_ISA_MP_1E2 | CSKY_ISA_CACHE | CSKYV2_ISA_DSP)\n+#define CSKY_ISA_FLOAT_C807 (CSKY_ISA_FLOAT_V1 | CSKY_ISA_FLOAT_3E4 | CSKY_ISA_FLOAT_1E2)\n+#define CSKY_ISA_FLOAT_C810 (CSKY_ISA_FLOAT_E1 | CSKY_ISA_FLOAT_1E2)\n+#define CSKY_ARCH_C810      (CSKY_ARCH_810 | CSKY_ARCH_FLOAT)\n+#define CSKY_ISA_C810       (CSKY_ISA_C807 | CSKYV2_ISA_7E10 | CSKY_ISA_FLOAT_C810)\n+#define CSKY_ARCH_C860      (CSKY_ARCH_860 | CSKY_ARCH_FLOAT)\n+#define CSKY_ISA_C860       (CSKY_ISA_860 | CSKY_ISA_FLOAT_7E60)\n+  {\"c807\",\n+    CSKY_ARCH_807,\n+    CSKY_ISA_C807,\n+    CSKY_FEATURES_DEF_fv(CSKY_ISA_FLOAT_C807, CSKY_ISA_VDSP),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+  {\"c810\",\n+    CSKY_ARCH_C810,\n+    CSKY_ISA_C810,\n+    CSKY_FEATURES_DEF_tv(0, CSKY_ISA_VDSP),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+  {\"c860\",\n+    CSKY_ARCH_C860,\n+    CSKY_ISA_C860,\n+    CSKY_FEATURES_DEF_v(CSKY_ISA_VDSP_2),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+#define CSKY_ISA_R807       (CSKY_ISA_E802 | CSKYV2_ISA_2E3 | CSKY_ISA_MP | CSKYV2_ISA_3E7 | CSKY_ISA_MP_1E2 | CSKY_ISA_CACHE | CSKYV2_ISA_DSP)\n+#define CSKY_ISA_FLOAT_R807 (CSKY_ISA_FLOAT_V1 | CSKY_ISA_FLOAT_3E4 | CSKY_ISA_FLOAT_1E2)\n+  {\"r807\",\n+    CSKY_ARCH_807,\n+    CSKY_ISA_R807,\n+    CSKY_FEATURES_DEF_f(CSKY_ISA_FLOAT_R807),\n+    CSKY_CPU_REVERISON_RESERVED()},\n+\n+/* Start of private CPUs.  */\n+/* End of private CPUs.  */\n+\n+  {NULL},\n };\n \n int md_short_jump_size = 2;\n@@ -938,13 +1160,60 @@ parse_cpu (const char *str)\n   int i = 0;\n \n   for (; csky_cpus[i].name != NULL; i++)\n-    if (strcasecmp (str, csky_cpus[i].name) == 0)\n+    if (strncasecmp (str, csky_cpus[i].name, strlen (csky_cpus[i].name)) == 0)\n       {\n-\tmach_flag |= csky_cpus[i].mach_flag;\n+\tcsky_insn.cpu = &csky_cpus[i];\n+\tmach_flag |= csky_cpus[i].arch_flag;\n \tisa_flag = csky_cpus[i].isa_flag;\n-\tother_flag |= (csky_cpus[i].mach_flag & ~CSKY_ARCH_MASK);\n+\tconst char *s = str + strlen (csky_cpus[i].name);\n+\twhile (*s)\n+\t  {\n+\t    const struct csky_cpu_feature *feature = csky_cpus[i].features;\n+\t    const struct csky_cpu_version *version = csky_cpus[i].ver;\n+\t    char *next;\n+\n+\t    if (*s == 'r')\n+\t      {\n+\t\ts++;\n+\t\twhile (version->r)\n+\t\t  {\n+\t\t    if (version->r == strtol (s, &next, 10))\n+\t\t      break;\n+\t\t    version++;\n+\t\t  }\n+\t\tif (version->r)\n+\t\t  {\n+\t\t    isa_flag |= version->isa_flag;\n+\t\t    s = next;\n+\t\t  }\n+\t\telse\n+\t\t  goto unknown_cpu;\n+\t\tisa_flag = isa_flag & ~CSKYV2_ISA_DSP;\n+\t\tisa_flag |= CSKY_ISA_EDSP;\n+\t\tcontinue;\n+\t      }\n+\n+\t    /* Parse csky features.  */\n+\t    while (feature->unique)\n+\t      {\n+\t\tif (feature->unique == *s)\n+\t\t  break;\n+\t\tfeature++;\n+\t      }\n+\t    if (feature->unique)\n+\t      {\n+\t\tisa_flag |= feature->isa_flag;\n+\t\tmach_flag |= feature->arch_flag;\n+\t      }\n+\t    else\n+\t      goto unknown_cpu;\n+\n+\t    s++;\n+\t  }\n \treturn;\n       }\n+\n+unknown_cpu:\n   as_bad (_(\"unknown cpu `%s'\"), str);\n }\n \n@@ -954,10 +1223,12 @@ static void\n parse_arch (const char *str)\n {\n   int i = 0;\n-  for (; csky_archs[i].name != NULL; i++)\n-    if (strcasecmp (str, csky_archs[i].name) == 0)\n+  for (; csky_cpus[i].name != NULL; i++)\n+    if (strcasecmp (str, csky_cpus[i].name) == 0)\n       {\n-\tarch_flag |= csky_archs[i].arch_flag;\n+\tcsky_insn.cpu = &csky_cpus[i];\n+\tarch_flag |= csky_cpus[i].arch_flag;\n+\tisa_flag |= csky_cpus[i].isa_flag;\n \treturn;\n       }\n   as_bad (_(\"unknown architecture `%s'\"), str);\n@@ -1156,20 +1427,28 @@ md_show_usage (FILE *fp)\n \n   fprintf (fp, _(\"\\\n   -mcpu=CPU\t\t\tselect processor CPU:\"));\n-  for (i = 0, n = margin; csky_cpus[i].name != NULL; i++)\n-    {\n-      int l = strlen (csky_cpus[i].name);\n-      if (n + l >= margin)\n-\t{\n-\t  fprintf (fp, \"\\n\\t\\t\\t\\t\");\n-\t  n = l;\n-\t}\n-      else\n-\t{\n-\t  fprintf (fp, \" \");\n-\t  n += l + 1;\n-\t}\n-      fprintf (fp, \"%s\", csky_cpus[i].name);\n+  const struct csky_cpu_feature *feature = NULL;\n+  const struct csky_cpu_version *version = NULL;\n+  for (i = 0; csky_cpus[i].name != NULL; i++)\n+    {\n+\tfprintf (fp, \"\\t\\t\\t\\t%s\", csky_cpus[i].name);\n+\tfeature = csky_cpus[i].features;\n+\tversion = csky_cpus[i].ver;\n+\twhile (feature->unique)\n+\t  {\n+\t    if ((feature + 1)->unique)\n+\t      fprintf (fp, \"[%c]\", feature->unique);\n+\t    feature++;\n+\t  }\n+\twhile (version->r)\n+\t  {\n+\t    if (csky_cpus[i].name[0] == 'c'\n+\t\t&& csky_cpus[i].name[1] == 'k')\n+\t      fprintf (fp, \"[r%d]\", version->r);\n+\t    else\n+\t      fprintf (fp, \"[-r%dp%d]\", version->r, version->p);\n+\t    version++;\n+\t  }\n     }\n   fprintf (fp, \"\\n\");\n \n@@ -1346,50 +1625,34 @@ md_begin (void)\n   struct csky_macro_info const *macro;\n   struct csky_arch_info const *p_arch;\n   struct csky_cpu_info const *p_cpu;\n-  unsigned int flags = (other_flag | do_opt_mmp | do_opt_mcp | do_opt_mcache\n-\t\t\t| do_opt_msecurity | do_opt_mhard_float);\n+  int flags;\n+  other_flag = (do_opt_mmp | do_opt_mcp | do_opt_mcache\n+\t\t| do_opt_msecurity | do_opt_mhard_float);\n   dsp_flag |= do_opt_mdsp | do_opt_medsp;\n   isa_flag |= do_opt_mtrust | do_opt_mvdsp;\n+  flags = other_flag;\n \n   if (dsp_flag)\n     flags |= CSKY_ARCH_DSP;\n \n   if (mach_flag != 0)\n     {\n-      if (((mach_flag & CSKY_ARCH_MASK) != (arch_flag & CSKY_ARCH_MASK))\n-          && arch_flag != 0)\n-\tas_warn (_(\"-mcpu conflict with -march option, using -mcpu\"));\n-      if (((mach_flag & ~CSKY_ARCH_MASK) != (flags & ~CSKY_ARCH_MASK))\n-\t  && flags != 0)\n-\tas_warn (_(\"-mcpu conflict with other model parameters, using -mcpu\"));\n+      if (((mach_flag & CSKY_ARCH_MASK)\n+\t    != (arch_flag & CSKY_ARCH_MASK))\n+\t   && arch_flag != 0)\n+\tas_warn (\"-mcpu conflict with -march option, actually use -mcpu\");\n     }\n   else if (arch_flag != 0)\n-    {\n-      if ((arch_flag & CSKY_ARCH_MASK) == CSKY_ARCH_810\n-\t  || ((arch_flag & CSKY_ARCH_MASK) == CSKY_ARCH_807)) {\n-\t  /* CK807 and CK810 have DSP instruction by default.  */\n-\t  mach_flag |= CSKY_ARCH_DSP;\n-      }\n-      mach_flag |= arch_flag | flags;\n-    }\n+    mach_flag |= arch_flag | other_flag;\n   else\n     {\n #ifdef TARGET_WITH_CPU\n-      int i = 0;\n-      for (; csky_cpus[i].name != NULL; i++)\n-\t{\n-\t  if (strcmp (TARGET_WITH_CPU, csky_cpus[i].name) == 0)\n-\t    {\n-\t      mach_flag |= csky_cpus[i].mach_flag;\n-\t      isa_flag = csky_cpus[i].isa_flag;\n-\t      break;\n-\t    }\n-\t}\n+      parse_cpu (TARGET_WITH_CPU);\n #else\n #if _CSKY_ABI==1\n-      mach_flag |= CSKY_ARCH_610 | flags;\n+      parse_cpu (\"ck610\");\n #else\n-      mach_flag |= CSKY_ARCH_810_BASE | flags;\n+      parse_cpu (\"ck810\");\n #endif\n #endif\n     }\n@@ -1420,8 +1683,8 @@ md_begin (void)\n       }\n \n   /* Find isa_flag.  */\n-  for (p_cpu = csky_cpus; p_cpu->mach_flag != 0; p_cpu++)\n-    if ((mach_flag & CPU_ARCH_MASK) == p_cpu->mach_flag)\n+  for (p_cpu = csky_cpus; p_cpu->arch_flag != 0; p_cpu++)\n+    if ((mach_flag & CPU_ARCH_MASK) == p_cpu->arch_flag)\n       {\n \tbfd_elf_add_obj_attr_string (stdoutput, OBJ_ATTR_PROC,\n \t\t\t\t     Tag_CSKY_CPU_NAME, p_cpu->name);"
    },
    {
      "sha": "cc29c6da6a9b8a83a49e4be7cd8ea01367b6b306",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/525a0aa301bb60cbd169c6ff6c83eb4d4c06be1f/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/525a0aa301bb60cbd169c6ff6c83eb4d4c06be1f/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=525a0aa301bb60cbd169c6ff6c83eb4d4c06be1f",
      "patch": "@@ -1,3 +1,9 @@\n+2020-09-10  Cooper Qu  <cooper.qu@linux.alibaba.com>\n+\n+\t* opcode/csky.h (CSKY_ARCH_804): Define.\n+\t(CSKY_ARCH_805): Define.\n+\t(CSKY_ARCH_800): Define.\n+\n 2020-09-10  Nick Clifton  <nickc@redhat.com>\n \n \t* opcode/csky.h (CSKY_ISA_FLOAT_7E60): Use a long long type for"
    },
    {
      "sha": "ba0f4605f54e70b89c5ad8b819dc141c4f85fb1d",
      "filename": "opcodes/csky-dis.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/525a0aa301bb60cbd169c6ff6c83eb4d4c06be1f/opcodes/csky-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/525a0aa301bb60cbd169c6ff6c83eb4d4c06be1f/opcodes/csky-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/csky-dis.c?ref=525a0aa301bb60cbd169c6ff6c83eb4d4c06be1f",
      "patch": "@@ -649,6 +649,7 @@ csky_output_operand (char *str, struct operand const *oprnd,\n \tmemcpy (&f, &value, sizeof (float));\n \tsprintf (buf, \"%f\\t// imm9:%4d, imm4:%2d\", f, imm8, imm4);\n \tstrcat (str, buf);\n+\n \tbreak;\n       }\n \n@@ -677,6 +678,7 @@ csky_output_operand (char *str, struct operand const *oprnd,\n \tmemcpy (&d, &dvalue, sizeof (double));\n \tsprintf (buf, \"%lf\\t// imm9:%4ld, imm4:%2ld\", d, (long) imm8, (long) imm4);\n \tstrcat (str, buf);\n+\n \tbreak;\n       }\n     case OPRND_TYPE_LABEL_WITH_BRACKET:"
    }
  ]
}