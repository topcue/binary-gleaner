{
  "sha": "fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmJjMDllN2FmNzE1ZjE5ZjZlNWM3MDBhOWRmNmQxM2NkZDA1ZTFlNQ==",
  "commit": {
    "author": {
      "name": "Marcus Comstedt",
      "email": "marcus@mc.pp.se",
      "date": "2021-01-05T21:50:32Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-01-06T09:57:52Z"
    },
    "message": "RISC-V: Implement support for big endian targets.\n\nRISC-V instruction/code is always little endian, but data might be\nbig-endian.  Therefore, we can not use the original bfd_get/bfd_put\nto get/put the code for big endian targets.  Add new riscv_get_insn\nand riscv_put_insn to always get/put code as little endian can resolve\nthe problem.  Just remember to update them once we have supported\nthe 48-bit/128-bit instructions in the future patches.\n\nbfd/\n    * config.bfd: Added targets riscv64be*-*-*, riscv32be*-*-* and\n    riscvbe*-*-*.  Also added riscv_elf[32|64]_be_vec.\n    * configure.ac: Handle riscv_elf[32|64]_be_vec.\n    * configure: Regenerate.\n    * elfnn-riscv.c: Include <limits.h> and define CHAR_BIT for\n    riscv_is_insn_reloc.\n    (riscv_get_insn): RISC-V instructions are always little endian, but\n    bfd_get may be used for big-endian, so add new riscv_get_insn to handle\n    the insturctions.\n    (riscv_put_insn): Likewsie.\n    (riscv_is_insn_reloc): Check if we are relocaing an instruction.\n    (perform_relocation): Call riscv_is_insn_reloc to decide if we should\n    use riscv_[get|put]_insn or bfd_[get|put].\n    (riscv_zero_pcrel_hi_reloc): Use riscv_[get|put]_insn, bfd_[get|put]l32\n    or bfd_[get|put]l16 for code.\n    (riscv_elf_relocate_section): Likewise.\n    (riscv_elf_finish_dynamic_symbol): Likewise.\n    (riscv_elf_finish_dynamic_sections): Likewise.\n    (_bfd_riscv_relax_call): Likewise.\n    (_bfd_riscv_relax_lui): Likewise.\n    (_bfd_riscv_relax_align): Likewise.\n    (_bfd_riscv_relax_pc): Likewise.\n    (riscv_elf_object_p): Handled for big endian.\n    (TARGET_BIG_SYM, TARGET_BIG_NAME): Defined.\n    * targets.c: Add riscv_elf[32|64]_be_vec.\n    (_bfd_target_vector): Likewise.\n\ngas/\n    * config/tc-riscv.c (riscv_target_format): Add elf64-bigriscv and\n    elf32-bigriscv.\n    (install_insn): Always write instructions as little endian.\n    (riscv_make_nops): Likewise.\n    (md_convert_frag_branch): Likewise.\n    (md_number_to_chars): Write data in target endianness.\n    (options, md_longopts): Add -mbig-endian and -mlittle-endian options.\n    (md_parse_option): Handle the endian options.\n    * config/tc-riscv.h: Only define TARGET_BYTES_BIG_ENDIAN if not\n    already defined.\n    * configure.tgt: Added riscv64be*, riscv32be*, riscvbe*.\n\nld/\n    * configure.tgt: Added riscvbe-*-*, riscv32be*-*-*, riscv64be*-*-*,\n    riscv32be*-*-linux*, and riscv64be*-*-linux*.\n    * Makefile.am: Added eelf32briscv.c, eelf32briscv_ilp32f.c and\n    eelf32briscv_ilp32.c.\n    * Makefile.in: Regenerate.\n    * emulparams/elf32briscv.sh: Added.\n    * emulparams/elf32briscv_ilp32.sh: Likewise.\n    * emulparams/elf32briscv_ilp32f.sh: Likewise.\n    * emulparams/elf64briscv.sh: Likewise.\n    * emulparams/elf64briscv_lp64.sh: Likewise.\n    * emulparams/elf64briscv_lp64f.sh: Likewise.",
    "tree": {
      "sha": "b7cfb144e27508c018d5ea332e56d36548216e9b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b7cfb144e27508c018d5ea332e56d36548216e9b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/comments",
  "author": {
    "login": "zeldin",
    "id": 411296,
    "node_id": "MDQ6VXNlcjQxMTI5Ng==",
    "avatar_url": "https://avatars.githubusercontent.com/u/411296?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/zeldin",
    "html_url": "https://github.com/zeldin",
    "followers_url": "https://api.github.com/users/zeldin/followers",
    "following_url": "https://api.github.com/users/zeldin/following{/other_user}",
    "gists_url": "https://api.github.com/users/zeldin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/zeldin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/zeldin/subscriptions",
    "organizations_url": "https://api.github.com/users/zeldin/orgs",
    "repos_url": "https://api.github.com/users/zeldin/repos",
    "events_url": "https://api.github.com/users/zeldin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/zeldin/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": null,
  "parents": [
    {
      "sha": "865288236d881acecdcf0aaa636fd28fd811d862",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/865288236d881acecdcf0aaa636fd28fd811d862",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/865288236d881acecdcf0aaa636fd28fd811d862"
    }
  ],
  "stats": {
    "total": 292,
    "additions": 245,
    "deletions": 47
  },
  "files": [
    {
      "sha": "a629e8ad6fa7e9468428aa8eebdbb556cdf2825e",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -1,3 +1,32 @@\n+2021-01-06  Marcus Comstedt  <marcus@mc.pp.se>\n+\n+\t* config.bfd: Added targets riscv64be*-*-*, riscv32be*-*-* and\n+\triscvbe*-*-*.  Also added riscv_elf[32|64]_be_vec.\n+\t* configure.ac: Handle riscv_elf[32|64]_be_vec.\n+\t* configure: Regenerate.\n+\t* elfnn-riscv.c: Include <limits.h> and define CHAR_BIT for\n+\triscv_is_insn_reloc.\n+\t(riscv_get_insn): RISC-V instructions are always little endian, but\n+\tbfd_get may be used for big-endian, so add new riscv_get_insn to handle\n+\tthe insturctions.\n+\t(riscv_put_insn): Likewsie.\n+\t(riscv_is_insn_reloc): Check if we are relocaing an instruction.\n+\t(perform_relocation): Call riscv_is_insn_reloc to decide if we should\n+\tuse riscv_[get|put]_insn or bfd_[get|put].\n+\t(riscv_zero_pcrel_hi_reloc): Use riscv_[get|put]_insn, bfd_[get|put]l32\n+\tor bfd_[get|put]l16 for code.\n+\t(riscv_elf_relocate_section): Likewise.\n+\t(riscv_elf_finish_dynamic_symbol): Likewise.\n+\t(riscv_elf_finish_dynamic_sections): Likewise.\n+\t(_bfd_riscv_relax_call): Likewise.\n+\t(_bfd_riscv_relax_lui): Likewise.\n+\t(_bfd_riscv_relax_align): Likewise.\n+\t(_bfd_riscv_relax_pc): Likewise.\n+\t(riscv_elf_object_p): Handled for big endian.\n+\t(TARGET_BIG_SYM, TARGET_BIG_NAME): Defined.\n+\t* targets.c: Add riscv_elf[32|64]_be_vec.\n+\t(_bfd_target_vector): Likewise.\n+\n 2021-01-05  Alan Modra  <amodra@gmail.com>\n \n \t* elflink.c (bfd_elf_link_record_dynamic_symbol): Handle no_export"
    },
    {
      "sha": "bbd0aaa9ef1a1b124167250e439112fa0a613382",
      "filename": "bfd/config.bfd",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/bfd/config.bfd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/bfd/config.bfd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/config.bfd?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -1158,14 +1158,24 @@ case \"${targ}\" in\n     ;;\n \n #ifdef BFD64\n+  riscvbe-*-* | riscv32be*-*-*)\n+    targ_defvec=riscv_elf32_be_vec\n+    targ_selvecs=\"riscv_elf32_vec riscv_elf64_vec riscv_elf32_be_vec riscv_elf64_be_vec\"\n+    want64=true\n+    ;;\n   riscv-*-* | riscv32*-*-*)\n     targ_defvec=riscv_elf32_vec\n-    targ_selvecs=\"riscv_elf32_vec riscv_elf64_vec\"\n+    targ_selvecs=\"riscv_elf32_vec riscv_elf64_vec riscv_elf32_be_vec riscv_elf64_be_vec\"\n+    want64=true\n+    ;;\n+  riscv64be*-*-*)\n+    targ_defvec=riscv_elf64_be_vec\n+    targ_selvecs=\"riscv_elf32_vec riscv_elf64_vec riscv_elf32_be_vec riscv_elf64_be_vec\"\n     want64=true\n     ;;\n   riscv64*-*-*)\n     targ_defvec=riscv_elf64_vec\n-    targ_selvecs=\"riscv_elf32_vec riscv_elf64_vec\"\n+    targ_selvecs=\"riscv_elf32_vec riscv_elf64_vec riscv_elf32_be_vec riscv_elf64_be_vec\"\n     want64=true\n     ;;\n #endif"
    },
    {
      "sha": "1460bbdfba3e5a0c3f8071081ce816defa0e4975",
      "filename": "bfd/configure",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/bfd/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/bfd/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -14919,6 +14919,8 @@ do\n     pru_elf32_vec)\t\t tb=\"$tb elf32-pru.lo elf32.lo $elf\" ;;\n     riscv_elf32_vec)\t\t tb=\"$tb elf32-riscv.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf\" ;;\n     riscv_elf64_vec)\t\t tb=\"$tb elf64-riscv.lo elf64.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf\"; target_size=64 ;;\n+    riscv_elf32_be_vec)\t\t tb=\"$tb elf32-riscv.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf\" ;;\n+    riscv_elf64_be_vec)\t\t tb=\"$tb elf64-riscv.lo elf64.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf\"; target_size=64 ;;\n     rl78_elf32_vec)\t\t tb=\"$tb elf32-rl78.lo elf32.lo $elf\" ;;\n     rs6000_xcoff64_vec)\t\t tb=\"$tb coff64-rs6000.lo aix5ppc-core.lo $xcoff\"; target_size=64 ;;\n     rs6000_xcoff64_aix_vec)\t tb=\"$tb coff64-rs6000.lo aix5ppc-core.lo $xcoff\"; target_size=64 ;;"
    },
    {
      "sha": "0797a08ff37a01c33b2f781a11d8a1063114c7de",
      "filename": "bfd/configure.ac",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/bfd/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/bfd/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure.ac?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -625,6 +625,8 @@ do\n     pru_elf32_vec)\t\t tb=\"$tb elf32-pru.lo elf32.lo $elf\" ;;\n     riscv_elf32_vec)\t\t tb=\"$tb elf32-riscv.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf\" ;;\n     riscv_elf64_vec)\t\t tb=\"$tb elf64-riscv.lo elf64.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf\"; target_size=64 ;;\n+    riscv_elf32_be_vec)\t\t tb=\"$tb elf32-riscv.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf\" ;;\n+    riscv_elf64_be_vec)\t\t tb=\"$tb elf64-riscv.lo elf64.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf\"; target_size=64 ;;\n     rl78_elf32_vec)\t\t tb=\"$tb elf32-rl78.lo elf32.lo $elf\" ;;\n     rs6000_xcoff64_vec)\t\t tb=\"$tb coff64-rs6000.lo aix5ppc-core.lo $xcoff\"; target_size=64 ;;\n     rs6000_xcoff64_aix_vec)\t tb=\"$tb coff64-rs6000.lo aix5ppc-core.lo $xcoff\"; target_size=64 ;;"
    },
    {
      "sha": "098fe9efa6b1095876450894d9933d1ea2a57201",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 74,
      "deletions": 33,
      "changes": 107,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -33,6 +33,13 @@\n #include \"opcode/riscv.h\"\n #include \"objalloc.h\"\n \n+#ifdef HAVE_LIMITS_H\n+#include <limits.h>\n+#endif\n+#ifndef CHAR_BIT\n+#define CHAR_BIT 8\n+#endif\n+\n /* Internal relocations used exclusively by the relaxation pass.  */\n #define R_RISCV_DELETE (R_RISCV_max + 1)\n \n@@ -125,6 +132,18 @@ struct riscv_elf_link_hash_table\n   bfd_vma last_iplt_index;\n };\n \n+/* Instruction access functions. */\n+\n+#define riscv_get_insn(bits, ptr)\t\t\\\n+  ((bits) == 16 ? bfd_getl16 (ptr)\t\t\\\n+   : (bits) == 32 ? bfd_getl32 (ptr)\t\t\\\n+   : (bits) == 64 ? bfd_getl64 (ptr)\t\t\\\n+   : (abort (), (bfd_vma) - 1))\n+#define riscv_put_insn(bits, val, ptr)\t\t\\\n+  ((bits) == 16 ? bfd_putl16 (val, ptr)\t\t\\\n+   : (bits) == 32 ? bfd_putl32 (val, ptr)\t\\\n+   : (bits) == 64 ? bfd_putl64 (val, ptr)\t\\\n+   : (abort (), (void) 0))\n \n /* Get the RISC-V ELF linker hash table from a link_info structure.  */\n #define riscv_elf_hash_table(p) \\\n@@ -152,6 +171,19 @@ riscv_elf_append_rela (bfd *abfd, asection *s, Elf_Internal_Rela *rel)\n   bed->s->swap_reloca_out (abfd, rel, loc);\n }\n \n+/* Return true if a relocation is modifying an instruction. */\n+\n+static bfd_boolean\n+riscv_is_insn_reloc (const reloc_howto_type *howto)\n+{\n+  /* Heuristic: A multibyte destination with a nontrivial mask\n+     is an instruction */\n+  return (howto->bitsize > 8\n+\t  && howto->dst_mask != 0\n+\t  && ~(howto->dst_mask | (howto->bitsize < sizeof(bfd_vma) * CHAR_BIT\n+\t       ? (MINUS_ONE << howto->bitsize) : (bfd_vma)0)) != 0);\n+}\n+\n /* PLT/GOT stuff.  */\n \n #define PLT_HEADER_INSNS 8\n@@ -1645,10 +1677,10 @@ perform_relocation (const reloc_howto_type *howto,\n \t  /* Linker relaxation can convert an address equal to or greater than\n \t     0x800 to slightly below 0x800.  C.LUI does not accept zero as a\n \t     valid immediate.  We can fix this by converting it to a C.LI.  */\n-\t  bfd_vma insn = bfd_get (howto->bitsize, input_bfd,\n-\t\t\t\t  contents + rel->r_offset);\n+\t  bfd_vma insn = riscv_get_insn (howto->bitsize,\n+\t\t\t\t\t contents + rel->r_offset);\n \t  insn = (insn & ~MATCH_C_LUI) | MATCH_C_LI;\n-\t  bfd_put (howto->bitsize, input_bfd, insn, contents + rel->r_offset);\n+\t  riscv_put_insn (howto->bitsize, insn, contents + rel->r_offset);\n \t  value = ENCODE_RVC_IMM (0);\n \t}\n       else if (!VALID_RVC_LUI_IMM (RISCV_CONST_HIGH_PART (value)))\n@@ -1684,9 +1716,16 @@ perform_relocation (const reloc_howto_type *howto,\n       return bfd_reloc_notsupported;\n     }\n \n-  bfd_vma word = bfd_get (howto->bitsize, input_bfd, contents + rel->r_offset);\n+  bfd_vma word;\n+  if (riscv_is_insn_reloc (howto))\n+    word = riscv_get_insn (howto->bitsize, contents + rel->r_offset);\n+  else\n+    word = bfd_get (howto->bitsize, input_bfd, contents + rel->r_offset);\n   word = (word & ~howto->dst_mask) | (value & howto->dst_mask);\n-  bfd_put (howto->bitsize, input_bfd, word, contents + rel->r_offset);\n+  if (riscv_is_insn_reloc (howto))\n+    riscv_put_insn (howto->bitsize, word, contents + rel->r_offset);\n+  else\n+    bfd_put (howto->bitsize, input_bfd, word, contents + rel->r_offset);\n \n   return bfd_reloc_ok;\n }\n@@ -1764,7 +1803,7 @@ riscv_zero_pcrel_hi_reloc (Elf_Internal_Rela *rel,\n \t\t\t   bfd_vma addr,\n \t\t\t   bfd_byte *contents,\n \t\t\t   const reloc_howto_type *howto,\n-\t\t\t   bfd *input_bfd)\n+\t\t\t   bfd *input_bfd ATTRIBUTE_UNUSED)\n {\n   /* We may need to reference low addreses in PC-relative modes even when the\n    * PC is far away from these addresses.  For example, undefweak references\n@@ -1790,9 +1829,9 @@ riscv_zero_pcrel_hi_reloc (Elf_Internal_Rela *rel,\n \n   rel->r_info = ELFNN_R_INFO(addr, R_RISCV_HI20);\n \n-  bfd_vma insn = bfd_get(howto->bitsize, input_bfd, contents + rel->r_offset);\n+  bfd_vma insn = riscv_get_insn(howto->bitsize, contents + rel->r_offset);\n   insn = (insn & ~MASK_AUIPC) | MATCH_LUI;\n-  bfd_put(howto->bitsize, input_bfd, insn, contents + rel->r_offset);\n+  riscv_put_insn(howto->bitsize, insn, contents + rel->r_offset);\n   return TRUE;\n }\n \n@@ -2380,10 +2419,9 @@ riscv_elf_relocate_section (bfd *output_bfd,\n \t      && (!bfd_link_pic (info) || h->plt.offset == MINUS_ONE))\n \t    {\n \t      /* We can use x0 as the base register.  */\n-\t      bfd_vma insn = bfd_get_32 (input_bfd,\n-\t\t\t\t\t contents + rel->r_offset + 4);\n+\t      bfd_vma insn = bfd_getl32 (contents + rel->r_offset + 4);\n \t      insn &= ~(OP_MASK_RS1 << OP_SH_RS1);\n-\t      bfd_put_32 (input_bfd, insn, contents + rel->r_offset + 4);\n+\t      bfd_putl32 (insn, contents + rel->r_offset + 4);\n \t      /* Set the relocation value so that we get 0 after the pc\n \t\t relative adjustment.  */\n \t      relocation = sec_addr (input_section) + rel->r_offset;\n@@ -2416,10 +2454,10 @@ riscv_elf_relocate_section (bfd *output_bfd,\n \t  if (VALID_ITYPE_IMM (relocation + rel->r_addend))\n \t    {\n \t      /* We can use tp as the base register.  */\n-\t      bfd_vma insn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n+\t      bfd_vma insn = bfd_getl32 (contents + rel->r_offset);\n \t      insn &= ~(OP_MASK_RS1 << OP_SH_RS1);\n \t      insn |= X_TP << OP_SH_RS1;\n-\t      bfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n+\t      bfd_putl32 (insn, contents + rel->r_offset);\n \t    }\n \t  else\n \t    r = bfd_reloc_overflow;\n@@ -2433,14 +2471,14 @@ riscv_elf_relocate_section (bfd *output_bfd,\n \t    if (x0_base || VALID_ITYPE_IMM (relocation + rel->r_addend - gp))\n \t      {\n \t\t/* We can use x0 or gp as the base register.  */\n-\t\tbfd_vma insn = bfd_get_32 (input_bfd, contents + rel->r_offset);\n+\t\tbfd_vma insn = bfd_getl32 (contents + rel->r_offset);\n \t\tinsn &= ~(OP_MASK_RS1 << OP_SH_RS1);\n \t\tif (!x0_base)\n \t\t  {\n \t\t    rel->r_addend -= gp;\n \t\t    insn |= X_GP << OP_SH_RS1;\n \t\t  }\n-\t\tbfd_put_32 (input_bfd, insn, contents + rel->r_offset);\n+\t\tbfd_putl32 (insn, contents + rel->r_offset);\n \t      }\n \t    else\n \t      r = bfd_reloc_overflow;\n@@ -2864,7 +2902,7 @@ riscv_elf_finish_dynamic_symbol (bfd *output_bfd,\n \treturn FALSE;\n \n       for (i = 0; i < PLT_ENTRY_INSNS; i++)\n-\tbfd_put_32 (output_bfd, plt_entry[i], loc + 4*i);\n+\tbfd_putl32 (plt_entry[i], loc + 4*i);\n \n       /* Fill in the initial value of the .got.plt entry.  */\n       loc = gotplt->contents + (got_address - sec_addr (gotplt));\n@@ -3161,7 +3199,7 @@ riscv_elf_finish_dynamic_sections (bfd *output_bfd,\n \t    return ret;\n \n \t  for (i = 0; i < PLT_HEADER_INSNS; i++)\n-\t    bfd_put_32 (output_bfd, plt_header[i], splt->contents + 4*i);\n+\t    bfd_putl32 (plt_header[i], splt->contents + 4*i);\n \n \t  elf_section_data (splt->output_section)->this_hdr.sh_entsize\n \t    = PLT_ENTRY_SIZE;\n@@ -4118,8 +4156,8 @@ _bfd_riscv_relax_call (bfd *abfd, asection *sec, asection *sym_sec,\n   /* Shorten the function call.  */\n   BFD_ASSERT (rel->r_offset + 8 <= sec->size);\n \n-  auipc = bfd_get_32 (abfd, contents + rel->r_offset);\n-  jalr = bfd_get_32 (abfd, contents + rel->r_offset + 4);\n+  auipc = bfd_getl32 (contents + rel->r_offset);\n+  jalr = bfd_getl32 (contents + rel->r_offset + 4);\n   rd = (jalr >> OP_SH_RD) & OP_MASK_RD;\n   rvc = rvc && VALID_RVC_J_IMM (foff);\n \n@@ -4149,7 +4187,7 @@ _bfd_riscv_relax_call (bfd *abfd, asection *sec, asection *sym_sec,\n   /* Replace the R_RISCV_CALL reloc.  */\n   rel->r_info = ELFNN_R_INFO (ELFNN_R_SYM (rel->r_info), r_type);\n   /* Replace the AUIPC.  */\n-  bfd_put (8 * len, abfd, auipc, contents + rel->r_offset);\n+  riscv_put_insn (8 * len, auipc, contents + rel->r_offset);\n \n   /* Delete unnecessary JALR.  */\n   *again = TRUE;\n@@ -4223,9 +4261,9 @@ _bfd_riscv_relax_lui (bfd *abfd,\n \t  if (undefined_weak)\n \t    {\n \t      /* Change the RS1 to zero.  */\n-\t      bfd_vma insn = bfd_get_32 (abfd, contents + rel->r_offset);\n+\t      bfd_vma insn = bfd_getl32 (contents + rel->r_offset);\n \t      insn &= ~(OP_MASK_RS1 << OP_SH_RS1);\n-\t      bfd_put_32 (abfd, insn, contents + rel->r_offset);\n+\t      bfd_putl32 (insn, contents + rel->r_offset);\n \t    }\n \t  else\n \t    rel->r_info = ELFNN_R_INFO (sym, R_RISCV_GPREL_I);\n@@ -4235,9 +4273,9 @@ _bfd_riscv_relax_lui (bfd *abfd,\n \t  if (undefined_weak)\n \t    {\n \t      /* Change the RS1 to zero.  */\n-\t      bfd_vma insn = bfd_get_32 (abfd, contents + rel->r_offset);\n+\t      bfd_vma insn = bfd_getl32 (contents + rel->r_offset);\n \t      insn &= ~(OP_MASK_RS1 << OP_SH_RS1);\n-\t      bfd_put_32 (abfd, insn, contents + rel->r_offset);\n+\t      bfd_putl32 (insn, contents + rel->r_offset);\n \t    }\n \t  else\n \t    rel->r_info = ELFNN_R_INFO (sym, R_RISCV_GPREL_S);\n@@ -4268,13 +4306,13 @@ _bfd_riscv_relax_lui (bfd *abfd,\n \t\t\t       : ELF_MAXPAGESIZE)))\n     {\n       /* Replace LUI with C.LUI if legal (i.e., rd != x0 and rd != x2/sp).  */\n-      bfd_vma lui = bfd_get_32 (abfd, contents + rel->r_offset);\n+      bfd_vma lui = bfd_getl32 (contents + rel->r_offset);\n       unsigned rd = ((unsigned)lui >> OP_SH_RD) & OP_MASK_RD;\n       if (rd == 0 || rd == X_SP)\n \treturn TRUE;\n \n       lui = (lui & (OP_MASK_RD << OP_SH_RD)) | MATCH_C_LUI;\n-      bfd_put_32 (abfd, lui, contents + rel->r_offset);\n+      bfd_putl32 (lui, contents + rel->r_offset);\n \n       /* Replace the R_RISCV_HI20 reloc.  */\n       rel->r_info = ELFNN_R_INFO (ELFNN_R_SYM (rel->r_info), R_RISCV_RVC_LUI);\n@@ -4376,11 +4414,11 @@ _bfd_riscv_relax_align (bfd *abfd, asection *sec,\n \n   /* Write as many RISC-V NOPs as we need.  */\n   for (pos = 0; pos < (nop_bytes & -4); pos += 4)\n-    bfd_put_32 (abfd, RISCV_NOP, contents + rel->r_offset + pos);\n+    bfd_putl32 (RISCV_NOP, contents + rel->r_offset + pos);\n \n   /* Write a final RVC NOP if need be.  */\n   if (nop_bytes % 4 != 0)\n-    bfd_put_16 (abfd, RVC_NOP, contents + rel->r_offset + pos);\n+    bfd_putl16 (RVC_NOP, contents + rel->r_offset + pos);\n \n   /* Delete the excess bytes.  */\n   return riscv_relax_delete_bytes (abfd, sec, rel->r_offset + nop_bytes,\n@@ -4487,9 +4525,9 @@ _bfd_riscv_relax_pc  (bfd *abfd ATTRIBUTE_UNUSED,\n \t    {\n \t      /* Change the RS1 to zero, and then modify the relocation\n \t\t type to R_RISCV_LO12_I.  */\n-\t      bfd_vma insn = bfd_get_32 (abfd, contents + rel->r_offset);\n+\t      bfd_vma insn = bfd_getl32 (contents + rel->r_offset);\n \t      insn &= ~(OP_MASK_RS1 << OP_SH_RS1);\n-\t      bfd_put_32 (abfd, insn, contents + rel->r_offset);\n+\t      bfd_putl32 (insn, contents + rel->r_offset);\n \t      rel->r_info = ELFNN_R_INFO (sym, R_RISCV_LO12_I);\n \t      rel->r_addend = hi_reloc.hi_addend;\n \t    }\n@@ -4505,9 +4543,9 @@ _bfd_riscv_relax_pc  (bfd *abfd ATTRIBUTE_UNUSED,\n \t    {\n \t      /* Change the RS1 to zero, and then modify the relocation\n \t\t type to R_RISCV_LO12_S.  */\n-\t      bfd_vma insn = bfd_get_32 (abfd, contents + rel->r_offset);\n+\t      bfd_vma insn = bfd_getl32 (contents + rel->r_offset);\n \t      insn &= ~(OP_MASK_RS1 << OP_SH_RS1);\n-\t      bfd_put_32 (abfd, insn, contents + rel->r_offset);\n+\t      bfd_putl32 (insn, contents + rel->r_offset);\n \t      rel->r_info = ELFNN_R_INFO (sym, R_RISCV_LO12_S);\n \t      rel->r_addend = hi_reloc.hi_addend;\n \t    }\n@@ -4919,7 +4957,8 @@ static bfd_boolean\n riscv_elf_object_p (bfd *abfd)\n {\n   /* There are only two mach types in RISCV currently.  */\n-  if (strcmp (abfd->xvec->name, \"elf32-littleriscv\") == 0)\n+  if (strcmp (abfd->xvec->name, \"elf32-littleriscv\") == 0\n+      || strcmp (abfd->xvec->name, \"elf32-bigriscv\") == 0)\n     bfd_default_set_arch_mach (abfd, bfd_arch_riscv, bfd_mach_riscv32);\n   else\n     bfd_default_set_arch_mach (abfd, bfd_arch_riscv, bfd_mach_riscv64);\n@@ -4938,6 +4977,8 @@ riscv_elf_obj_attrs_arg_type (int tag)\n \n #define TARGET_LITTLE_SYM\t\triscv_elfNN_vec\n #define TARGET_LITTLE_NAME\t\t\"elfNN-littleriscv\"\n+#define TARGET_BIG_SYM\t\t\triscv_elfNN_be_vec\n+#define TARGET_BIG_NAME\t\t\t\"elfNN-bigriscv\"\n \n #define elf_backend_reloc_type_class\t     riscv_reloc_type_class\n "
    },
    {
      "sha": "8086f03e464078ede6e71f5147efde90266b1413",
      "filename": "bfd/targets.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/bfd/targets.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/bfd/targets.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/targets.c?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -843,6 +843,8 @@ extern const bfd_target powerpc_xcoff_vec;\n extern const bfd_target pru_elf32_vec;\n extern const bfd_target riscv_elf32_vec;\n extern const bfd_target riscv_elf64_vec;\n+extern const bfd_target riscv_elf32_be_vec;\n+extern const bfd_target riscv_elf64_be_vec;\n extern const bfd_target rl78_elf32_vec;\n extern const bfd_target rs6000_xcoff64_vec;\n extern const bfd_target rs6000_xcoff64_aix_vec;\n@@ -1237,6 +1239,8 @@ static const bfd_target * const _bfd_target_vector[] =\n #ifdef BFD64\n \t&riscv_elf32_vec,\n \t&riscv_elf64_vec,\n+\t&riscv_elf32_be_vec,\n+\t&riscv_elf64_be_vec,\n #endif\n \t&rl78_elf32_vec,\n "
    },
    {
      "sha": "57bc038a563c520635911d96229dcef3f5e2014c",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -1,3 +1,17 @@\n+2021-01-06  Marcus Comstedt  <marcus@mc.pp.se>\n+\n+\t* config/tc-riscv.c (riscv_target_format): Add elf64-bigriscv and\n+\telf32-bigriscv.\n+\t(install_insn): Always write instructions as little endian.\n+\t(riscv_make_nops): Likewise.\n+\t(md_convert_frag_branch): Likewise.\n+\t(md_number_to_chars): Write data in target endianness.\n+\t(options, md_longopts): Add -mbig-endian and -mlittle-endian options.\n+\t(md_parse_option): Handle the endian options.\n+\t* config/tc-riscv.h: Only define TARGET_BYTES_BIG_ENDIAN if not\n+\talready defined.\n+\t* configure.tgt: Added riscv64be*, riscv32be*, riscvbe*.\n+\n 2021-01-04  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR ld/26256"
    },
    {
      "sha": "55d5f1b50d9d78aff1f5996cb4bf5df945bc46da",
      "filename": "gas/config/tc-riscv.c",
      "status": "modified",
      "additions": 25,
      "deletions": 7,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/gas/config/tc-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/gas/config/tc-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.c?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -445,7 +445,10 @@ static char *expr_end;\n const char *\n riscv_target_format (void)\n {\n-  return xlen == 64 ? \"elf64-littleriscv\" : \"elf32-littleriscv\";\n+  if (target_big_endian)\n+    return xlen == 64 ? \"elf64-bigriscv\" : \"elf32-bigriscv\";\n+  else\n+    return xlen == 64 ? \"elf64-littleriscv\" : \"elf32-littleriscv\";\n }\n \n /* Return the length of instruction INSN.  */\n@@ -474,7 +477,7 @@ static void\n install_insn (const struct riscv_cl_insn *insn)\n {\n   char *f = insn->frag->fr_literal + insn->where;\n-  md_number_to_chars (f, insn->insn_opcode, insn_length (insn));\n+  number_to_chars_littleendian (f, insn->insn_opcode, insn_length (insn));\n }\n \n /* Move INSN to offset WHERE in FRAG.  Adjust the fixups accordingly\n@@ -2662,7 +2665,10 @@ md_atof (int type, char *litP, int *sizeP)\n void\n md_number_to_chars (char *buf, valueT val, int n)\n {\n-  number_to_chars_littleendian (buf, val, n);\n+  if (target_big_endian)\n+    number_to_chars_bigendian (buf, val, n);\n+  else\n+    number_to_chars_littleendian (buf, val, n);\n }\n \n const char *md_shortopts = \"O::g::G:\";\n@@ -2681,6 +2687,8 @@ enum options\n   OPTION_NO_CSR_CHECK,\n   OPTION_MISA_SPEC,\n   OPTION_MPRIV_SPEC,\n+  OPTION_BIG_ENDIAN,\n+  OPTION_LITTLE_ENDIAN,\n   OPTION_END_OF_ENUM\n };\n \n@@ -2699,6 +2707,8 @@ struct option md_longopts[] =\n   {\"mno-csr-check\", no_argument, NULL, OPTION_NO_CSR_CHECK},\n   {\"misa-spec\", required_argument, NULL, OPTION_MISA_SPEC},\n   {\"mpriv-spec\", required_argument, NULL, OPTION_MPRIV_SPEC},\n+  {\"mbig-endian\", no_argument, NULL, OPTION_BIG_ENDIAN},\n+  {\"mlittle-endian\", no_argument, NULL, OPTION_LITTLE_ENDIAN},\n \n   {NULL, no_argument, NULL, 0}\n };\n@@ -2777,6 +2787,14 @@ md_parse_option (int c, const char *arg)\n     case OPTION_MPRIV_SPEC:\n       return riscv_set_default_priv_spec (arg);\n \n+    case OPTION_BIG_ENDIAN:\n+      target_big_endian = 1;\n+      break;\n+\n+    case OPTION_LITTLE_ENDIAN:\n+      target_big_endian = 0;\n+      break;\n+\n     default:\n       return 0;\n     }\n@@ -3258,13 +3276,13 @@ riscv_make_nops (char *buf, bfd_vma bytes)\n   /* Use at most one 2-byte NOP.  */\n   if ((bytes - i) % 4 == 2)\n     {\n-      md_number_to_chars (buf + i, RVC_NOP, 2);\n+      number_to_chars_littleendian (buf + i, RVC_NOP, 2);\n       i += 2;\n     }\n \n   /* Fill the remainder with 4-byte NOPs.  */\n   for ( ; i < bytes; i += 4)\n-    md_number_to_chars (buf + i, RISCV_NOP, 4);\n+    number_to_chars_littleendian (buf + i, RISCV_NOP, 4);\n }\n \n /* Called from md_do_align.  Used to create an alignment frag in a\n@@ -3468,14 +3486,14 @@ md_convert_frag_branch (fragS *fragp)\n       insn = bfd_getl32 (buf);\n       insn ^= MATCH_BEQ ^ MATCH_BNE;\n       insn |= ENCODE_SBTYPE_IMM (8);\n-      md_number_to_chars ((char *) buf, insn, 4);\n+      bfd_putl32 (insn, buf);\n       buf += 4;\n \n     jump:\n       /* Jump to the target.  */\n       fixp = fix_new_exp (fragp, buf - (bfd_byte *)fragp->fr_literal,\n \t\t\t  4, &exp, FALSE, BFD_RELOC_RISCV_JMP);\n-      md_number_to_chars ((char *) buf, MATCH_JAL, 4);\n+      bfd_putl32 (MATCH_JAL, buf);\n       buf += 4;\n       break;\n "
    },
    {
      "sha": "6f202887b293dfdfae33f1ce62356b704baa8326",
      "filename": "gas/config/tc-riscv.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/gas/config/tc-riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/gas/config/tc-riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.h?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -28,7 +28,9 @@\n struct frag;\n struct expressionS;\n \n+#ifndef TARGET_BYTES_BIG_ENDIAN\n #define TARGET_BYTES_BIG_ENDIAN 0\n+#endif\n \n #define TARGET_ARCH bfd_arch_riscv\n "
    },
    {
      "sha": "6f46e0a63292f37ed3c8280f0874c43470732db7",
      "filename": "gas/configure.tgt",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/gas/configure.tgt",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/gas/configure.tgt",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/configure.tgt?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -89,7 +89,9 @@ case ${cpu} in\n   pj*)\t\t\tcpu_type=pj endian=big ;;\n   powerpc*le*)\t\tcpu_type=ppc endian=little ;;\n   powerpc*)\t\tcpu_type=ppc endian=big ;;\n+  riscv64be*)\t\tcpu_type=riscv endian=big arch=riscv64 ;;\n   riscv64*)\t\tcpu_type=riscv endian=little arch=riscv64 ;;\n+  riscv32be*|riscvbe*)\tcpu_type=riscv endian=big arch=riscv32 ;;\n   riscv32* | riscv*)\tcpu_type=riscv endian=little arch=riscv32 ;;\n   rs6000*)\t\tcpu_type=ppc ;;\n   rl78*)\t\tcpu_type=rl78 ;;\n@@ -357,7 +359,7 @@ case ${generic_target} in\n \n   pru-*-*)\t\t\t\tfmt=elf ;;\n \n-  riscv*-*-*)\t\t\t\tfmt=elf endian=little ;;\n+  riscv*-*-*)\t\t\t\tfmt=elf ;;\n \n   rx-*-linux*)\t\t\t\tfmt=elf em=linux ;;\n "
    },
    {
      "sha": "2e51333bb1b353f1e928e1f4d4727c9a6f5f0535",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -1,3 +1,17 @@\n+2021-01-06  Marcus Comstedt  <marcus@mc.pp.se>\n+\n+\t* configure.tgt: Added riscvbe-*-*, riscv32be*-*-*, riscv64be*-*-*,\n+\triscv32be*-*-linux*, and riscv64be*-*-linux*.\n+\t* Makefile.am: Added eelf32briscv.c, eelf32briscv_ilp32f.c and\n+\teelf32briscv_ilp32.c.\n+\t* Makefile.in: Regenerate.\n+\t* emulparams/elf32briscv.sh: Added.\n+\t* emulparams/elf32briscv_ilp32.sh: Likewise.\n+\t* emulparams/elf32briscv_ilp32f.sh: Likewise.\n+\t* emulparams/elf64briscv.sh: Likewise.\n+\t* emulparams/elf64briscv_lp64.sh: Likewise.\n+\t* emulparams/elf64briscv_lp64f.sh: Likewise.\n+\n 2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* testsuite/ld-ctf/enum-forward.c: New test."
    },
    {
      "sha": "2c9a487335c6894d12b9df60e60ffa29af242ef7",
      "filename": "ld/Makefile.am",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/Makefile.am?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -266,6 +266,9 @@ ALL_EMULATION_SOURCES = \\\n \teelf32lriscv.c \\\n \teelf32lriscv_ilp32f.c \\\n \teelf32lriscv_ilp32.c \\\n+\teelf32briscv.c \\\n+\teelf32briscv_ilp32f.c \\\n+\teelf32briscv_ilp32.c \\\n \teelf32rl78.c \\\n \teelf32rx.c \\\n \teelf32rx_linux.c \\\n@@ -435,6 +438,9 @@ ALL_64_EMULATION_SOURCES = \\\n \teelf64lriscv.c \\\n \teelf64lriscv_lp64f.c \\\n \teelf64lriscv_lp64.c \\\n+\teelf64briscv.c \\\n+\teelf64briscv_lp64f.c \\\n+\teelf64briscv_lp64.c \\\n \teelf64ltsmip.c \\\n \teelf64ltsmip_fbsd.c \\\n \teelf64mmix.c \\\n@@ -751,6 +757,9 @@ $(ALL_EMULATION_SOURCES) $(ALL_64_EMULATION_SOURCES): $(GEN_DEPENDS)\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32lriscv.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32lriscv_ilp32f.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32lriscv_ilp32.Pc@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32briscv.Pc@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32briscv_ilp32f.Pc@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32briscv_ilp32.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32rl78.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32rx.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32rx_linux.Pc@am__quote@\n@@ -916,6 +925,9 @@ $(ALL_EMULATION_SOURCES) $(ALL_64_EMULATION_SOURCES): $(GEN_DEPENDS)\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64lriscv.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64lriscv_lp64f.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64lriscv_lp64.Pc@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64briscv.Pc@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64briscv_lp64f.Pc@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64briscv_lp64.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64ltsmip.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64ltsmip_fbsd.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64mmix.Pc@am__quote@"
    },
    {
      "sha": "c1c42aa9ec1510133df992b4461c08cbd8a66b18",
      "filename": "ld/Makefile.in",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/Makefile.in?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -521,6 +521,7 @@ pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n psdir = @psdir@\n+runstatedir = @runstatedir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n srcdir = @srcdir@\n@@ -755,6 +756,9 @@ ALL_EMULATION_SOURCES = \\\n \teelf32lriscv.c \\\n \teelf32lriscv_ilp32f.c \\\n \teelf32lriscv_ilp32.c \\\n+\teelf32briscv.c \\\n+\teelf32briscv_ilp32f.c \\\n+\teelf32briscv_ilp32.c \\\n \teelf32rl78.c \\\n \teelf32rx.c \\\n \teelf32rx_linux.c \\\n@@ -923,6 +927,9 @@ ALL_64_EMULATION_SOURCES = \\\n \teelf64lriscv.c \\\n \teelf64lriscv_lp64f.c \\\n \teelf64lriscv_lp64.c \\\n+\teelf64briscv.c \\\n+\teelf64briscv_lp64f.c \\\n+\teelf64briscv_lp64.c \\\n \teelf64ltsmip.c \\\n \teelf64ltsmip_fbsd.c \\\n \teelf64mmix.c \\\n@@ -1318,6 +1325,9 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32bfinfd.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32bmip.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32bmipn32.Po@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32briscv.Po@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32briscv_ilp32.Po@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32briscv_ilp32f.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32bsmip.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32btsmip.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32btsmip_fbsd.Po@am__quote@\n@@ -1403,6 +1413,9 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64alpha_nbsd.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64bmip.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64bpf.Po@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64briscv.Po@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64briscv_lp64.Po@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64briscv_lp64f.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64btsmip.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64btsmip_fbsd.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64hppa.Po@am__quote@\n@@ -2403,6 +2416,9 @@ $(ALL_EMULATION_SOURCES) $(ALL_64_EMULATION_SOURCES): $(GEN_DEPENDS)\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32lriscv.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32lriscv_ilp32f.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32lriscv_ilp32.Pc@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32briscv.Pc@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32briscv_ilp32f.Pc@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32briscv_ilp32.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32rl78.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32rx.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf32rx_linux.Pc@am__quote@\n@@ -2568,6 +2584,9 @@ $(ALL_EMULATION_SOURCES) $(ALL_64_EMULATION_SOURCES): $(GEN_DEPENDS)\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64lriscv.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64lriscv_lp64f.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64lriscv_lp64.Pc@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64briscv.Pc@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64briscv_lp64f.Pc@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64briscv_lp64.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64ltsmip.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64ltsmip_fbsd.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eelf64mmix.Pc@am__quote@"
    },
    {
      "sha": "0c780b24d5773517d451e222f9d2d655f1a8f264",
      "filename": "ld/configure.tgt",
      "status": "modified",
      "additions": 21,
      "deletions": 4,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/configure.tgt",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/configure.tgt",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/configure.tgt?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -738,21 +738,38 @@ powerpc-*-windiss*)\ttarg_emul=elf32ppcwindiss\n \t\t\t;;\n pru*-*-*)\t\ttarg_emul=pruelf\n \t\t\t;;\n+riscv32be*-*-linux*)\ttarg_emul=elf32briscv\n+\t\t\ttarg_extra_emuls=\"elf32briscv_ilp32f elf32briscv_ilp32 elf64briscv elf64briscv_lp64f elf64briscv_lp64 elf32lriscv elf32lriscv_ilp32f elf32lriscv_ilp32 elf64lriscv elf64lriscv_lp64f elf64lriscv_lp64\"\n+\t\t\ttarg_extra_libpath=$targ_extra_emuls\n+\t\t\t;;\n riscv32*-*-linux*)\ttarg_emul=elf32lriscv\n-\t\t\ttarg_extra_emuls=\"elf32lriscv_ilp32f elf32lriscv_ilp32 elf64lriscv elf64lriscv_lp64f elf64lriscv_lp64\"\n+\t\t\ttarg_extra_emuls=\"elf32lriscv_ilp32f elf32lriscv_ilp32 elf64lriscv elf64lriscv_lp64f elf64lriscv_lp64 elf32briscv elf32briscv_ilp32f elf32briscv_ilp32 elf64briscv elf64briscv_lp64f elf64briscv_lp64\"\n+\t\t\ttarg_extra_libpath=$targ_extra_emuls\n+\t\t\t;;\n+riscvbe-*-* | riscv32be*-*-*)\n+\t\t\ttarg_emul=elf32briscv\n+\t\t\ttarg_extra_emuls=\"elf64briscv elf32lriscv elf64lriscv\"\n \t\t\ttarg_extra_libpath=$targ_extra_emuls\n \t\t\t;;\n riscv-*-* | riscv32*-*-*)\n \t\t\ttarg_emul=elf32lriscv\n-\t\t\ttarg_extra_emuls=\"elf64lriscv\"\n+\t\t\ttarg_extra_emuls=\"elf64lriscv elf32briscv elf64briscv\"\n+\t\t\ttarg_extra_libpath=$targ_extra_emuls\n+\t\t\t;;\n+riscv64be*-*-linux*)\ttarg_emul=elf64briscv\n+\t\t\ttarg_extra_emuls=\"elf64briscv_lp64f elf64briscv_lp64 elf32briscv elf32briscv_ilp32f elf32briscv_ilp32 elf64lriscv elf64lriscv_lp64f elf64lriscv_lp64 elf32lriscv elf32lriscv_ilp32f elf32lriscv_ilp32\"\n \t\t\ttarg_extra_libpath=$targ_extra_emuls\n \t\t\t;;\n riscv64*-*-linux*)\ttarg_emul=elf64lriscv\n-\t\t\ttarg_extra_emuls=\"elf64lriscv_lp64f elf64lriscv_lp64 elf32lriscv elf32lriscv_ilp32f elf32lriscv_ilp32\"\n+\t\t\ttarg_extra_emuls=\"elf64lriscv_lp64f elf64lriscv_lp64 elf32lriscv elf32lriscv_ilp32f elf32lriscv_ilp32 elf64briscv elf64briscv_lp64f elf64briscv_lp64 elf32briscv elf32briscv_ilp32f elf32briscv_ilp32\"\n+\t\t\ttarg_extra_libpath=$targ_extra_emuls\n+\t\t\t;;\n+riscv64be*-*-*)\t\ttarg_emul=elf64briscv\n+\t\t\ttarg_extra_emuls=\"elf32briscv elf64lriscv elf32lriscv\"\n \t\t\ttarg_extra_libpath=$targ_extra_emuls\n \t\t\t;;\n riscv64*-*-*)\t\ttarg_emul=elf64lriscv\n-\t\t\ttarg_extra_emuls=\"elf32lriscv\"\n+\t\t\ttarg_extra_emuls=\"elf32lriscv elf64briscv elf32briscv\"\n \t\t\ttarg_extra_libpath=$targ_extra_emuls\n \t\t\t;;\n rs6000-*-aix[5-9]*)\ttarg_emul=aix5rs6"
    },
    {
      "sha": "bad02bd5cf22547e78a8e5f934981e8c4e48cde2",
      "filename": "ld/emulparams/elf32briscv.sh",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/emulparams/elf32briscv.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/emulparams/elf32briscv.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emulparams/elf32briscv.sh?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -0,0 +1,2 @@\n+source_sh ${srcdir}/emulparams/elf32lriscv.sh\n+OUTPUT_FORMAT=\"elf32-bigriscv\""
    },
    {
      "sha": "c150108d3a8eaebe11422a38222f823e94d3b7c1",
      "filename": "ld/emulparams/elf32briscv_ilp32.sh",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/emulparams/elf32briscv_ilp32.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/emulparams/elf32briscv_ilp32.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emulparams/elf32briscv_ilp32.sh?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -0,0 +1,2 @@\n+source_sh ${srcdir}/emulparams/elf32lriscv_ilp32.sh\n+OUTPUT_FORMAT=\"elf32-bigriscv\""
    },
    {
      "sha": "52117e6b0ccf9c7abb7c5dc0997cdd9a376d0a47",
      "filename": "ld/emulparams/elf32briscv_ilp32f.sh",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/emulparams/elf32briscv_ilp32f.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/emulparams/elf32briscv_ilp32f.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emulparams/elf32briscv_ilp32f.sh?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -0,0 +1,2 @@\n+source_sh ${srcdir}/emulparams/elf32lriscv_ilp32f.sh\n+OUTPUT_FORMAT=\"elf32-bigriscv\""
    },
    {
      "sha": "86a429f10fd12cb799546384619c04dd93871f36",
      "filename": "ld/emulparams/elf64briscv.sh",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/emulparams/elf64briscv.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/emulparams/elf64briscv.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emulparams/elf64briscv.sh?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -0,0 +1,2 @@\n+source_sh ${srcdir}/emulparams/elf64lriscv.sh\n+OUTPUT_FORMAT=\"elf64-bigriscv\""
    },
    {
      "sha": "b00717c31afd4f743d4e4d33329657114aeb5cbb",
      "filename": "ld/emulparams/elf64briscv_lp64.sh",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/emulparams/elf64briscv_lp64.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/emulparams/elf64briscv_lp64.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emulparams/elf64briscv_lp64.sh?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -0,0 +1,2 @@\n+source_sh ${srcdir}/emulparams/elf64lriscv_lp64.sh\n+OUTPUT_FORMAT=\"elf64-bigriscv\""
    },
    {
      "sha": "a54a3f41c65001b30b6aa2015fba10af18cb3761",
      "filename": "ld/emulparams/elf64briscv_lp64f.sh",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/emulparams/elf64briscv_lp64f.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5/ld/emulparams/elf64briscv_lp64f.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emulparams/elf64briscv_lp64f.sh?ref=fbc09e7af715f19f6e5c700a9df6d13cdd05e1e5",
      "patch": "@@ -0,0 +1,2 @@\n+source_sh ${srcdir}/emulparams/elf64lriscv_lp64f.sh\n+OUTPUT_FORMAT=\"elf64-bigriscv\""
    }
  ]
}