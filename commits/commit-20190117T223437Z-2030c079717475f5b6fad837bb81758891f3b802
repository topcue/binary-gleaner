{
  "sha": "2030c079717475f5b6fad837bb81758891f3b802",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjAzMGMwNzk3MTc0NzVmNWI2ZmFkODM3YmI4MTc1ODg5MWYzYjgwMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-15T23:55:05Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-17T22:34:37Z"
    },
    "message": "Change all_objfiles adapter to be a method on program_space\n\nThis changes the all_objfiles range adapter to be a method on the\nprogram space, and fixes up all the users.\n\ngdb/ChangeLog\n2019-01-17  Tom Tromey  <tom@tromey.com>\n\n\t* progspace.h (program_space) <objfiles_range>: New typedef.\n\t<objfiles>: New method.\n\t<objfiles_head>: Rename from objfiles.\n\t(object_files): Update.\n\t* guile/scm-progspace.c (gdbscm_progspace_objfiles): Update.\n\t* guile/scm-pretty-print.c\n\t(ppscm_find_pretty_printer_from_objfiles): Update.\n\t* guile/scm-objfile.c (gdbscm_objfiles): Update.\n\t* python/py-xmethods.c (gdbpy_get_matching_xmethod_workers):\n\tUpdate.\n\t* python/py-progspace.c (pspy_get_objfiles): Update.\n\t* python/py-prettyprint.c (find_pretty_printer_from_objfiles):\n\tUpdate.\n\t* python/py-objfile.c (objfpy_lookup_objfile_by_name)\n\t(objfpy_lookup_objfile_by_build_id): Update.\n\t* mi/mi-cmd-file.c (mi_cmd_file_list_exec_source_files): Update.\n\t* windows-tdep.c (windows_iterate_over_objfiles_in_search_order):\n\tUpdate.\n\t* symtab.c (iterate_over_symtabs, matching_obj_sections)\n\t(expand_symtab_containing_pc, lookup_objfile_from_block)\n\t(lookup_static_symbol, basic_lookup_transparent_type)\n\t(find_pc_sect_compunit_symtab, find_symbol_at_address)\n\t(find_line_symtab, info_sources_command)\n\t(default_collect_symbol_completion_matches_break_on)\n\t(make_source_files_completion_list, find_main_name): Update.\n\t* symmisc.c (print_symbol_bcache_statistics)\n\t(print_objfile_statistics, maintenance_print_symbols)\n\t(maintenance_print_msymbols, maintenance_print_objfiles)\n\t(maintenance_info_symtabs, maintenance_check_symtabs)\n\t(maintenance_expand_symtabs, maintenance_info_line_tables):\n\tUpdate.\n\t* symfile.c (remove_symbol_file_command, overlay_invalidate_all)\n\t(find_pc_overlay, find_pc_mapped_section, list_overlays_command)\n\t(map_overlay_command, unmap_overlay_command)\n\t(simple_overlay_update, expand_symtabs_matching)\n\t(map_symbol_filenames): Update.\n\t* symfile-debug.c (set_debug_symfile): Update.\n\t* spu-tdep.c (spu_overlay_update, spu_objfile_from_frame):\n\tUpdate.\n\t* source.c (select_source_symtab, forget_cached_source_info):\n\tUpdate.\n\t* solib.c (solib_read_symbols): Update.\n\t* solib-spu.c (append_ocl_sos): Update.\n\t* psymtab.c (maintenance_print_psymbols)\n\t(maintenance_info_psymtabs, maintenance_check_psymtabs): Update.\n\t* probe.c (parse_probes_in_pspace, find_probe_by_pc): Update.\n\t* printcmd.c (info_symbol_command): Update.\n\t* ppc-linux-tdep.c (ppc_linux_spe_context_inferior_created):\n\tUpdate.\n\t* objfiles.h (class all_objfiles): Remove.\n\t* objfiles.c (have_partial_symbols, have_full_symbols)\n\t(have_minimal_symbols, qsort_cmp, update_section_map)\n\t(shared_objfile_contains_address_p)\n\t(default_iterate_over_objfiles_in_search_order): Update.\n\t* objc-lang.c (info_selectors_command, info_classes_command)\n\t(find_methods): Update.\n\t* minsyms.c (find_solib_trampoline_target): Update.\n\t* maint.c (maintenance_info_sections)\n\t(maintenance_translate_address, count_symtabs_and_blocks):\n\tUpdate.\n\t* main.c (captured_main_1): Update.\n\t* linux-thread-db.c (try_thread_db_load_from_pdir)\n\t(has_libpthread): Update.\n\t* linespec.c (iterate_over_all_matching_symtabs)\n\t(search_minsyms_for_name): Update.\n\t* jit.c (jit_find_objf_with_entry_addr): Update.\n\t* hppa-tdep.c (find_unwind_entry)\n\t(hppa_lookup_stub_minimal_symbol): Update.\n\t* gcore.c (gcore_create_callback, objfile_find_memory_regions):\n\tUpdate.\n\t* elfread.c (elf_gnu_ifunc_resolve_by_cache)\n\t(elf_gnu_ifunc_resolve_by_got): Update.\n\t* dwarf2-frame.c (dwarf2_frame_find_fde): Update.\n\t* dwarf-index-write.c (save_gdb_index_command): Update.\n\t* cp-support.c (add_symbol_overload_list_qualified): Update.\n\t* breakpoint.c (create_overlay_event_breakpoint)\n\t(create_longjmp_master_breakpoint)\n\t(create_std_terminate_master_breakpoint)\n\t(create_exception_master_breakpoint): Update.\n\t* blockframe.c (find_pc_partial_function): Update.\n\t* ada-lang.c (ada_lookup_simple_minsym, add_nonlocal_symbols)\n\t(ada_collect_symbol_completion_matches)\n\t(ada_add_global_exceptions): Update.",
    "tree": {
      "sha": "8e06590d01fccfdb5156b518f584d24da423c3fb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8e06590d01fccfdb5156b518f584d24da423c3fb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2030c079717475f5b6fad837bb81758891f3b802",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2030c079717475f5b6fad837bb81758891f3b802",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2030c079717475f5b6fad837bb81758891f3b802",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2030c079717475f5b6fad837bb81758891f3b802/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "776489e0a79a14cb3f1138d4e4158ab9a8c7ecf3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/776489e0a79a14cb3f1138d4e4158ab9a8c7ecf3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/776489e0a79a14cb3f1138d4e4158ab9a8c7ecf3"
    }
  ],
  "stats": {
    "total": 356,
    "additions": 219,
    "deletions": 137
  },
  "files": [
    {
      "sha": "e8178dbf18fd93ed3e70ac74a142dec1b8945000",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 86,
      "deletions": 0,
      "changes": 86,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -1,3 +1,89 @@\n+2019-01-17  Tom Tromey  <tom@tromey.com>\n+\n+\t* progspace.h (program_space) <objfiles_range>: New typedef.\n+\t<objfiles>: New method.\n+\t<objfiles_head>: Rename from objfiles.\n+\t(object_files): Update.\n+\t* guile/scm-progspace.c (gdbscm_progspace_objfiles): Update.\n+\t* guile/scm-pretty-print.c\n+\t(ppscm_find_pretty_printer_from_objfiles): Update.\n+\t* guile/scm-objfile.c (gdbscm_objfiles): Update.\n+\t* python/py-xmethods.c (gdbpy_get_matching_xmethod_workers):\n+\tUpdate.\n+\t* python/py-progspace.c (pspy_get_objfiles): Update.\n+\t* python/py-prettyprint.c (find_pretty_printer_from_objfiles):\n+\tUpdate.\n+\t* python/py-objfile.c (objfpy_lookup_objfile_by_name)\n+\t(objfpy_lookup_objfile_by_build_id): Update.\n+\t* mi/mi-cmd-file.c (mi_cmd_file_list_exec_source_files): Update.\n+\t* windows-tdep.c (windows_iterate_over_objfiles_in_search_order):\n+\tUpdate.\n+\t* symtab.c (iterate_over_symtabs, matching_obj_sections)\n+\t(expand_symtab_containing_pc, lookup_objfile_from_block)\n+\t(lookup_static_symbol, basic_lookup_transparent_type)\n+\t(find_pc_sect_compunit_symtab, find_symbol_at_address)\n+\t(find_line_symtab, info_sources_command)\n+\t(default_collect_symbol_completion_matches_break_on)\n+\t(make_source_files_completion_list, find_main_name): Update.\n+\t* symmisc.c (print_symbol_bcache_statistics)\n+\t(print_objfile_statistics, maintenance_print_symbols)\n+\t(maintenance_print_msymbols, maintenance_print_objfiles)\n+\t(maintenance_info_symtabs, maintenance_check_symtabs)\n+\t(maintenance_expand_symtabs, maintenance_info_line_tables):\n+\tUpdate.\n+\t* symfile.c (remove_symbol_file_command, overlay_invalidate_all)\n+\t(find_pc_overlay, find_pc_mapped_section, list_overlays_command)\n+\t(map_overlay_command, unmap_overlay_command)\n+\t(simple_overlay_update, expand_symtabs_matching)\n+\t(map_symbol_filenames): Update.\n+\t* symfile-debug.c (set_debug_symfile): Update.\n+\t* spu-tdep.c (spu_overlay_update, spu_objfile_from_frame):\n+\tUpdate.\n+\t* source.c (select_source_symtab, forget_cached_source_info):\n+\tUpdate.\n+\t* solib.c (solib_read_symbols): Update.\n+\t* solib-spu.c (append_ocl_sos): Update.\n+\t* psymtab.c (maintenance_print_psymbols)\n+\t(maintenance_info_psymtabs, maintenance_check_psymtabs): Update.\n+\t* probe.c (parse_probes_in_pspace, find_probe_by_pc): Update.\n+\t* printcmd.c (info_symbol_command): Update.\n+\t* ppc-linux-tdep.c (ppc_linux_spe_context_inferior_created):\n+\tUpdate.\n+\t* objfiles.h (class all_objfiles): Remove.\n+\t* objfiles.c (have_partial_symbols, have_full_symbols)\n+\t(have_minimal_symbols, qsort_cmp, update_section_map)\n+\t(shared_objfile_contains_address_p)\n+\t(default_iterate_over_objfiles_in_search_order): Update.\n+\t* objc-lang.c (info_selectors_command, info_classes_command)\n+\t(find_methods): Update.\n+\t* minsyms.c (find_solib_trampoline_target): Update.\n+\t* maint.c (maintenance_info_sections)\n+\t(maintenance_translate_address, count_symtabs_and_blocks):\n+\tUpdate.\n+\t* main.c (captured_main_1): Update.\n+\t* linux-thread-db.c (try_thread_db_load_from_pdir)\n+\t(has_libpthread): Update.\n+\t* linespec.c (iterate_over_all_matching_symtabs)\n+\t(search_minsyms_for_name): Update.\n+\t* jit.c (jit_find_objf_with_entry_addr): Update.\n+\t* hppa-tdep.c (find_unwind_entry)\n+\t(hppa_lookup_stub_minimal_symbol): Update.\n+\t* gcore.c (gcore_create_callback, objfile_find_memory_regions):\n+\tUpdate.\n+\t* elfread.c (elf_gnu_ifunc_resolve_by_cache)\n+\t(elf_gnu_ifunc_resolve_by_got): Update.\n+\t* dwarf2-frame.c (dwarf2_frame_find_fde): Update.\n+\t* dwarf-index-write.c (save_gdb_index_command): Update.\n+\t* cp-support.c (add_symbol_overload_list_qualified): Update.\n+\t* breakpoint.c (create_overlay_event_breakpoint)\n+\t(create_longjmp_master_breakpoint)\n+\t(create_std_terminate_master_breakpoint)\n+\t(create_exception_master_breakpoint): Update.\n+\t* blockframe.c (find_pc_partial_function): Update.\n+\t* ada-lang.c (ada_lookup_simple_minsym, add_nonlocal_symbols)\n+\t(ada_collect_symbol_completion_matches)\n+\t(ada_add_global_exceptions): Update.\n+\n 2019-01-17  Tom Tromey  <tom@tromey.com>\n \n \t* solib-target.c (lm_info_target_p): Remove typedef.  Don't"
    },
    {
      "sha": "df915c594c26498085c787713bc41bbd3fe02452",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -4922,7 +4922,7 @@ ada_lookup_simple_minsym (const char *name)\n   symbol_name_matcher_ftype *match_name\n     = ada_get_symbol_name_matcher (lookup_name);\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       for (minimal_symbol *msymbol : objfile_msymbols (objfile))\n \t{\n@@ -5612,7 +5612,7 @@ add_nonlocal_symbols (struct obstack *obstackp,\n \n   bool is_wild_match = lookup_name.ada ().wild_match_p ();\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       data.objfile = objfile;\n \n@@ -5645,7 +5645,7 @@ add_nonlocal_symbols (struct obstack *obstackp,\n       const char *name = ada_lookup_name (lookup_name);\n       std::string name1 = std::string (\"<_ada_\") + name + '>';\n \n-      for (objfile *objfile : all_objfiles (current_program_space))\n+      for (objfile *objfile : current_program_space->objfiles ())\n         {\n \t  data.objfile = objfile;\n \t  objfile->sf->qf->map_matching_symbols (objfile, name1.c_str (),\n@@ -6409,7 +6409,7 @@ ada_collect_symbol_completion_matches (completion_tracker &tracker,\n      anything that isn't a text symbol (everything else will be\n      handled by the psymtab code above).  */\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       for (minimal_symbol *msymbol : objfile_msymbols (objfile))\n \t{\n@@ -6465,7 +6465,7 @@ ada_collect_symbol_completion_matches (completion_tracker &tracker,\n   /* Go through the symtabs and check the externs and statics for\n      symbols which match.  */\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       for (compunit_symtab *s : objfile_compunits (objfile))\n \t{\n@@ -6484,7 +6484,7 @@ ada_collect_symbol_completion_matches (completion_tracker &tracker,\n \t}\n     }\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       for (compunit_symtab *s : objfile_compunits (objfile))\n \t{\n@@ -13566,7 +13566,7 @@ ada_add_global_exceptions (compiled_regex *preg,\n \t\t\t   NULL,\n \t\t\t   VARIABLES_DOMAIN);\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       for (compunit_symtab *s : objfile_compunits (objfile))\n \t{"
    },
    {
      "sha": "fe7807b87a6e726e1474fe3949c1154c470633ea",
      "filename": "gdb/blockframe.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/blockframe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/blockframe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/blockframe.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -236,7 +236,7 @@ find_pc_partial_function (CORE_ADDR pc, const char **name, CORE_ADDR *address,\n     goto return_cached_value;\n \n   msymbol = lookup_minimal_symbol_by_pc_section (mapped_pc, section);\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       if (objfile->sf)\n \t{"
    },
    {
      "sha": "3166fa01296051f922b6ca9de37b0bbb2e7267ef",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -3205,7 +3205,7 @@ create_overlay_event_breakpoint (void)\n {\n   const char *const func_name = \"_ovly_debug_event\";\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       struct breakpoint *b;\n       struct breakpoint_objfile_data *bp_objfile_data;\n@@ -3263,7 +3263,7 @@ create_longjmp_master_breakpoint (void)\n   {\n     set_current_program_space (pspace);\n \n-    for (objfile *objfile : all_objfiles (current_program_space))\n+    for (objfile *objfile : current_program_space->objfiles ())\n       {\n \tint i;\n \tstruct gdbarch *gdbarch;\n@@ -3366,7 +3366,7 @@ create_std_terminate_master_breakpoint (void)\n \n     set_current_program_space (pspace);\n \n-    for (objfile *objfile : all_objfiles (current_program_space))\n+    for (objfile *objfile : current_program_space->objfiles ())\n       {\n \tstruct breakpoint *b;\n \tstruct breakpoint_objfile_data *bp_objfile_data;\n@@ -3411,7 +3411,7 @@ create_exception_master_breakpoint (void)\n {\n   const char *const func_name = \"_Unwind_DebugHook\";\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       struct breakpoint *b;\n       struct gdbarch *gdbarch;"
    },
    {
      "sha": "82b839336ba21542f772660af2ecf1c76869c244",
      "filename": "gdb/compile/compile-object-run.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/compile/compile-object-run.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/compile/compile-object-run.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-object-run.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -82,7 +82,7 @@ do_module_cleanup (void *arg, int registers_valid)\n \t}\n     }\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     if ((objfile->flags & OBJF_USERLOADED) == 0\n         && (strcmp (objfile_name (objfile), data->objfile_name_string) == 0))\n       {"
    },
    {
      "sha": "4e4d2cbc747901e44d119135086dc4fef88c5ca3",
      "filename": "gdb/cp-support.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/cp-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/cp-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -1378,7 +1378,7 @@ add_symbol_overload_list_qualified (const char *func_name,\n   /* Look through the partial symtabs for all symbols which begin by\n      matching FUNC_NAME.  Make sure we read that symbol table in.  */\n \n-  for (objfile *objf : all_objfiles (current_program_space))\n+  for (objfile *objf : current_program_space->objfiles ())\n     {\n       if (objf->sf)\n \tobjf->sf->qf->expand_symtabs_for_function (objf, func_name);\n@@ -1395,7 +1395,7 @@ add_symbol_overload_list_qualified (const char *func_name,\n   /* Go through the symtabs and check the externs and statics for\n      symbols which match.  */\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       for (compunit_symtab *cust : objfile_compunits (objfile))\n \t{\n@@ -1405,7 +1405,7 @@ add_symbol_overload_list_qualified (const char *func_name,\n \t}\n     }\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       for (compunit_symtab *cust : objfile_compunits (objfile))\n \t{"
    },
    {
      "sha": "01c1256bcb63ef81a5341ec6a13bf2d8a97cb648",
      "filename": "gdb/dwarf-index-write.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/dwarf-index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/dwarf-index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf-index-write.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -1662,7 +1662,7 @@ save_gdb_index_command (const char *arg, int from_tty)\n   if (!*arg)\n     error (_(\"usage: save gdb-index [-dwarf-5] DIRECTORY\"));\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       struct stat st;\n "
    },
    {
      "sha": "b3a2e627b0469db1ab2da631aa3c1124e88394c7",
      "filename": "gdb/dwarf2-frame.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/dwarf2-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/dwarf2-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2-frame.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -1702,7 +1702,7 @@ bsearch_fde_cmp (const void *key, const void *element)\n static struct dwarf2_fde *\n dwarf2_frame_find_fde (CORE_ADDR *pc, CORE_ADDR *out_offset)\n {\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       struct dwarf2_fde_table *fde_table;\n       struct dwarf2_fde **p_fde;"
    },
    {
      "sha": "8fc6692b112cf2c17990abb668a1b88fc1b9d7db",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -759,7 +759,7 @@ elf_gnu_ifunc_record_cache (const char *name, CORE_ADDR addr)\n static int\n elf_gnu_ifunc_resolve_by_cache (const char *name, CORE_ADDR *addr_p)\n {\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       htab_t htab;\n       struct elf_gnu_ifunc_cache *entry_p;\n@@ -804,7 +804,7 @@ elf_gnu_ifunc_resolve_by_got (const char *name, CORE_ADDR *addr_p)\n   name_got_plt = (char *) alloca (strlen (name) + got_suffix_len + 1);\n   sprintf (name_got_plt, \"%s\" SYMBOL_GOT_PLT_SUFFIX, name);\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       bfd *obfd = objfile->obfd;\n       struct gdbarch *gdbarch = get_objfile_arch (objfile);"
    },
    {
      "sha": "aca3be9858234e873e93f0cc693b99a12e283ac2",
      "filename": "gdb/gcore.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/gcore.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/gcore.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gcore.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -426,7 +426,7 @@ gcore_create_callback (CORE_ADDR vaddr, unsigned long size, int read,\n \t If so, we can avoid copying its contents by clearing SEC_LOAD.  */\n       struct obj_section *objsec;\n \n-      for (objfile *objfile : all_objfiles (current_program_space))\n+      for (objfile *objfile : current_program_space->objfiles ())\n \tALL_OBJFILE_OSECTIONS (objfile, objsec)\n \t  {\n \t    bfd *abfd = objfile->obfd;\n@@ -493,7 +493,7 @@ objfile_find_memory_regions (struct target_ops *self,\n   bfd_vma temp_bottom, temp_top;\n \n   /* Call callback function for each objfile section.  */\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     ALL_OBJFILE_OSECTIONS (objfile, objsec)\n       {\n \tbfd *ibfd = objfile->obfd;"
    },
    {
      "sha": "c70de766176889e808aa4985529708103d96a1ba",
      "filename": "gdb/guile/scm-objfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/guile/scm-objfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/guile/scm-objfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-objfile.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -370,7 +370,7 @@ gdbscm_objfiles (void)\n \n   result = SCM_EOL;\n \n-  for (objfile *objf : all_objfiles (current_program_space))\n+  for (objfile *objf : current_program_space->objfiles ())\n     {\n       SCM item = ofscm_scm_from_objfile (objf);\n "
    },
    {
      "sha": "e5096944b680f0ea43e6772c21d2ad26c25a29d3",
      "filename": "gdb/guile/scm-pretty-print.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/guile/scm-pretty-print.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/guile/scm-pretty-print.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-pretty-print.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -427,7 +427,7 @@ ppscm_search_pp_list (SCM list, SCM value)\n static SCM\n ppscm_find_pretty_printer_from_objfiles (SCM value)\n {\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       objfile_smob *o_smob = ofscm_objfile_smob_from_objfile (objfile);\n       SCM pp"
    },
    {
      "sha": "352d32d147fff47ae4e8ff8c4823950ce14afa18",
      "filename": "gdb/guile/scm-progspace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/guile/scm-progspace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/guile/scm-progspace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-progspace.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -289,7 +289,7 @@ gdbscm_progspace_objfiles (SCM self)\n \n   result = SCM_EOL;\n \n-  for (objfile *objfile : all_objfiles (p_smob->pspace))\n+  for (objfile *objfile : p_smob->pspace->objfiles ())\n     {\n       if (objfile->separate_debug_objfile_backlink == NULL)\n \t{"
    },
    {
      "sha": "46deeac90c85bc73d5bbf5e4cdff15f960738f68",
      "filename": "gdb/hppa-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/hppa-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/hppa-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/hppa-tdep.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -497,7 +497,7 @@ find_unwind_entry (CORE_ADDR pc)\n       return NULL;\n     }\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       struct hppa_unwind_info *ui;\n       ui = NULL;\n@@ -2542,7 +2542,7 @@ hppa_lookup_stub_minimal_symbol (const char *name,\n {\n   struct bound_minimal_symbol result = { NULL, NULL };\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       for (minimal_symbol *msym : objfile_msymbols (objfile))\n \t{"
    },
    {
      "sha": "b1cf2f5bb75be170b49917339cd4aa31cab2285e",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -984,7 +984,7 @@ jit_unregister_code (struct objfile *objfile)\n static struct objfile *\n jit_find_objf_with_entry_addr (CORE_ADDR entry_addr)\n {\n-  for (objfile *objf : all_objfiles (current_program_space))\n+  for (objfile *objf : current_program_space->objfiles ())\n     {\n       struct jit_objfile_data *objf_data;\n "
    },
    {
      "sha": "54f17b7a8b4db105797661fd3bf8a4b99fc6d43f",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -1141,7 +1141,7 @@ iterate_over_all_matching_symtabs\n \n     set_current_program_space (pspace);\n \n-    for (objfile *objfile : all_objfiles (current_program_space))\n+    for (objfile *objfile : current_program_space->objfiles ())\n       {\n \tif (objfile->sf)\n \t  objfile->sf->qf->expand_symtabs_matching (objfile,\n@@ -4357,7 +4357,7 @@ search_minsyms_for_name (struct collect_info *info,\n \n \tset_current_program_space (pspace);\n \n-\tfor (objfile *objfile : all_objfiles (current_program_space))\n+\tfor (objfile *objfile : current_program_space->objfiles ())\n \t  {\n \t    iterate_over_minimal_symbols (objfile, name,\n \t\t\t\t\t  [&] (struct minimal_symbol *msym)"
    },
    {
      "sha": "d2b013e2e3bbe5c92ba1e33744bb5ced52799f1f",
      "filename": "gdb/linux-thread-db.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/linux-thread-db.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/linux-thread-db.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-thread-db.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -1056,7 +1056,7 @@ try_thread_db_load_from_pdir (const char *subdir)\n   if (!auto_load_thread_db)\n     return 0;\n \n-  for (objfile *obj : all_objfiles (current_program_space))\n+  for (objfile *obj : current_program_space->objfiles ())\n     if (libpthread_name_p (objfile_name (obj)))\n       {\n \tif (try_thread_db_load_from_pdir_1 (obj, subdir))\n@@ -1165,7 +1165,7 @@ thread_db_load_search (void)\n static int\n has_libpthread (void)\n {\n-  for (objfile *obj : all_objfiles (current_program_space))\n+  for (objfile *obj : current_program_space->objfiles ())\n     if (libpthread_name_p (objfile_name (obj)))\n       return 1;\n "
    },
    {
      "sha": "ebfc38329ed86ae302edce09a177db4e03a26070",
      "filename": "gdb/main.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/main.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -1123,7 +1123,7 @@ captured_main_1 (struct captured_main_args *context)\n      We wait until now because it is common to add to the source search\n      path in local_gdbinit.  */\n   global_auto_load = save_auto_load;\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     load_auto_scripts_for_objfile (objfile);\n \n   /* Process '-x' and '-ex' options.  */"
    },
    {
      "sha": "e653a5d4ac82eec3170847ddd4f3ea41569e9001",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -357,7 +357,7 @@ maintenance_info_sections (const char *arg, int from_tty)\n \t  if (strcmp (arg, \"ALLOBJ\") == 0)\n \t    arg = NULL;\n \n-\t  for (objfile *ofile : all_objfiles (current_program_space))\n+\t  for (objfile *ofile : current_program_space->objfiles ())\n \t    {\n \t      printf_filtered (_(\"  Object file: %s\\n\"), \n \t\t\t       bfd_get_filename (ofile->obfd));\n@@ -447,7 +447,7 @@ maintenance_translate_address (const char *arg, int from_tty)\n       int arg_len = p - arg;\n       p = skip_spaces (p + 1);\n \n-      for (objfile *objfile : all_objfiles (current_program_space))\n+      for (objfile *objfile : current_program_space->objfiles ())\n \tALL_OBJFILE_OSECTIONS (objfile, sect)\n \t  {\n \t    if (strncmp (sect->the_bfd_section->name, arg, arg_len) == 0)\n@@ -771,7 +771,7 @@ count_symtabs_and_blocks (int *nr_symtabs_ptr, int *nr_compunit_symtabs_ptr,\n      current_program_space may be NULL.  */\n   if (current_program_space != NULL)\n     {\n-      for (objfile *o : all_objfiles (current_program_space))\n+      for (objfile *o : current_program_space->objfiles ())\n \t{\n \t  for (compunit_symtab *cu : objfile_compunits (o))\n \t    {"
    },
    {
      "sha": "0d9770a2f58ea970627a9b2776ece0f0f398dc33",
      "filename": "gdb/mi/mi-cmd-file.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/mi/mi-cmd-file.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/mi/mi-cmd-file.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-file.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -92,7 +92,7 @@ mi_cmd_file_list_exec_source_files (const char *command, char **argv, int argc)\n   uiout->begin (ui_out_type_list, \"files\");\n \n   /* Look at all of the file symtabs.  */\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       for (compunit_symtab *cu : objfile_compunits (objfile))\n \t{"
    },
    {
      "sha": "053c93ece8eaa3b0d58b268416adfbbf2a415c6f",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -1492,7 +1492,7 @@ find_solib_trampoline_target (struct frame_info *frame, CORE_ADDR pc)\n \n   if (tsymbol != NULL)\n     {\n-      for (objfile *objfile : all_objfiles (current_program_space))\n+      for (objfile *objfile : current_program_space->objfiles ())\n \t{\n \t  for (minimal_symbol *msymbol : objfile_msymbols (objfile))\n \t    {"
    },
    {
      "sha": "accd378816f672061c5d68845a0b6e9e07b5d13a",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -605,7 +605,7 @@ info_selectors_command (const char *regexp, int from_tty)\n     }\n \n   /* First time thru is JUST to get max length and count.  */\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       for (minimal_symbol *msymbol : objfile_msymbols (objfile))\n \t{\n@@ -645,7 +645,7 @@ info_selectors_command (const char *regexp, int from_tty)\n \n       sym_arr = XALLOCAVEC (struct symbol *, matches);\n       matches = 0;\n-      for (objfile *objfile : all_objfiles (current_program_space))\n+      for (objfile *objfile : current_program_space->objfiles ())\n \t{\n \t  for (minimal_symbol *msymbol : objfile_msymbols (objfile))\n \t    {\n@@ -759,7 +759,7 @@ info_classes_command (const char *regexp, int from_tty)\n     }\n \n   /* First time thru is JUST to get max length and count.  */\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       for (minimal_symbol *msymbol : objfile_msymbols (objfile))\n \t{\n@@ -786,7 +786,7 @@ info_classes_command (const char *regexp, int from_tty)\n \t\t       regexp ? regexp : \"*\");\n       sym_arr = XALLOCAVEC (struct symbol *, matches);\n       matches = 0;\n-      for (objfile *objfile : all_objfiles (current_program_space))\n+      for (objfile *objfile : current_program_space->objfiles ())\n \t{\n \t  for (minimal_symbol *msymbol : objfile_msymbols (objfile))\n \t    {\n@@ -992,7 +992,7 @@ find_methods (char type, const char *theclass, const char *category,\n \n   gdb_assert (symbol_names != NULL);\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       unsigned int *objc_csym;\n "
    },
    {
      "sha": "02b1a9d06433d6f7be01a65bf173488494d2b025",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -1013,7 +1013,7 @@ objfile_has_symbols (struct objfile *objfile)\n int\n have_partial_symbols (void)\n {\n-  for (objfile *ofp : all_objfiles (current_program_space))\n+  for (objfile *ofp : current_program_space->objfiles ())\n     {\n       if (objfile_has_partial_symbols (ofp))\n \treturn 1;\n@@ -1028,7 +1028,7 @@ have_partial_symbols (void)\n int\n have_full_symbols (void)\n {\n-  for (objfile *ofp : all_objfiles (current_program_space))\n+  for (objfile *ofp : current_program_space->objfiles ())\n     {\n       if (objfile_has_full_symbols (ofp))\n \treturn 1;\n@@ -1062,7 +1062,7 @@ objfile_purge_solibs (void)\n int\n have_minimal_symbols (void)\n {\n-  for (objfile *ofp : all_objfiles (current_program_space))\n+  for (objfile *ofp : current_program_space->objfiles ())\n     {\n       if (ofp->per_bfd->minimal_symbol_count > 0)\n \t{\n@@ -1133,7 +1133,7 @@ qsort_cmp (const void *a, const void *b)\n \t{\n \t  /* Sort on sequence number of the objfile in the chain.  */\n \n-\t  for (objfile *objfile : all_objfiles (current_program_space))\n+\t  for (objfile *objfile : current_program_space->objfiles ())\n \t    if (objfile == objfile1)\n \t      return -1;\n \t    else if (objfile == objfile2)\n@@ -1317,7 +1317,7 @@ update_section_map (struct program_space *pspace,\n   xfree (map);\n \n   alloc_size = 0;\n-  for (objfile *objfile : all_objfiles (pspace))\n+  for (objfile *objfile : pspace->objfiles ())\n     ALL_OBJFILE_OSECTIONS (objfile, s)\n       if (insert_section_p (objfile->obfd, s->the_bfd_section))\n \talloc_size += 1;\n@@ -1333,7 +1333,7 @@ update_section_map (struct program_space *pspace,\n   map = XNEWVEC (struct obj_section *, alloc_size);\n \n   i = 0;\n-  for (objfile *objfile : all_objfiles (pspace))\n+  for (objfile *objfile : pspace->objfiles ())\n     ALL_OBJFILE_OSECTIONS (objfile, s)\n       if (insert_section_p (objfile->obfd, s->the_bfd_section))\n \tmap[i++] = s;\n@@ -1477,7 +1477,7 @@ int\n shared_objfile_contains_address_p (struct program_space *pspace,\n \t\t\t\t   CORE_ADDR address)\n {\n-  for (objfile *objfile : all_objfiles (pspace))\n+  for (objfile *objfile : pspace->objfiles ())\n     {\n       if ((objfile->flags & OBJF_SHARED) != 0\n \t  && is_addr_in_objfile (address, objfile))\n@@ -1488,7 +1488,7 @@ shared_objfile_contains_address_p (struct program_space *pspace,\n }\n \n /* The default implementation for the \"iterate_over_objfiles_in_search_order\"\n-   gdbarch method.  It is equivalent to use the all_objfiles iterable,\n+   gdbarch method.  It is equivalent to use the objfiles iterable,\n    searching the objfiles in the order they are stored internally,\n    ignoring CURRENT_OBJFILE.\n \n@@ -1503,7 +1503,7 @@ default_iterate_over_objfiles_in_search_order\n {\n   int stop = 0;\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n        stop = cb (objfile, cb_data);\n        if (stop)"
    },
    {
      "sha": "eca46e59f8af00fa12a96146e2ec39651dd8a83e",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 2,
      "deletions": 17,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -416,7 +416,7 @@ struct objfile\n      Although this is a tree structure, GDB only support one level\n      (ie a separate debug for a separate debug is not supported).  Note that\n      separate debug object are in the main chain and therefore will be\n-     visited by all_objfiles & co iterators.  Separate debug objfile always\n+     visited by objfiles & co iterators.  Separate debug objfile always\n      has a non-nul separate_debug_objfile_backlink.  */\n \n   /* Link to the first separate debug object, if any.  */\n@@ -553,21 +553,6 @@ extern void default_iterate_over_objfiles_in_search_order\n    void *cb_data, struct objfile *current_objfile);\n \f\n \n-/* An iterarable object that can be used to iterate over all\n-   objfiles.  The basic use is in a foreach, like:\n-\n-   for (objfile *objf : all_objfiles (pspace)) { ... }  */\n-\n-class all_objfiles : public next_adapter<struct objfile>\n-{\n-public:\n-\n-  explicit all_objfiles (struct program_space *pspace)\n-    : next_adapter<struct objfile> (pspace->objfiles)\n-  {\n-  }\n-};\n-\n /* An iterarable object that can be used to iterate over all\n    objfiles.  The basic use is in a foreach, like:\n \n@@ -585,7 +570,7 @@ class all_objfiles_safe\n   explicit all_objfiles_safe (struct program_space *pspace)\n     : next_adapter<struct objfile,\n \t\t   basic_safe_iterator<next_iterator<objfile>>>\n-        (pspace->objfiles)\n+        (pspace->objfiles_head)\n   {\n   }\n };"
    },
    {
      "sha": "df44ad826e72eb8add9bf5545c4ffa5e035e9b94",
      "filename": "gdb/ppc-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/ppc-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/ppc-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-linux-tdep.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -1789,7 +1789,7 @@ static void\n ppc_linux_spe_context_inferior_created (struct target_ops *t, int from_tty)\n {\n   ppc_linux_spe_context_lookup (NULL);\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     ppc_linux_spe_context_lookup (objfile);\n }\n "
    },
    {
      "sha": "e6fdbcf344e107773d1d43b802cf1ab7ab173c6a",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -1282,7 +1282,7 @@ info_symbol_command (const char *arg, int from_tty)\n     error_no_arg (_(\"address\"));\n \n   addr = parse_and_eval_address (arg);\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     ALL_OBJFILE_OSECTIONS (objfile, osect)\n       {\n \t/* Only process each object file once, even if there's a separate"
    },
    {
      "sha": "b9337a9d19f28af49ed0f8c0338373d5faca3be1",
      "filename": "gdb/probe.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/probe.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -73,7 +73,7 @@ parse_probes_in_pspace (const static_probe_ops *spops,\n \t\t\tconst char *name,\n \t\t\tstd::vector<symtab_and_line> *result)\n {\n-  for (objfile *objfile : all_objfiles (search_pspace))\n+  for (objfile *objfile : search_pspace->objfiles ())\n     {\n       if (!objfile->sf || !objfile->sf->sym_probe_fns)\n \tcontinue;\n@@ -249,7 +249,7 @@ find_probe_by_pc (CORE_ADDR pc)\n   result.objfile = NULL;\n   result.prob = NULL;\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       if (!objfile->sf || !objfile->sf->sym_probe_fns\n \t  || objfile->sect_index_text == -1)\n@@ -294,7 +294,7 @@ collect_probes (const std::string &objname, const std::string &provider,\n     obj_pat.emplace (objname.c_str (), REG_NOSUB,\n \t\t     _(\"Invalid object file regexp\"));\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       if (! objfile->sf || ! objfile->sf->sym_probe_fns)\n \tcontinue;"
    },
    {
      "sha": "abc53973b6fb733d75c4e32d49fc6c8928149f79",
      "filename": "gdb/progspace.h",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/progspace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/progspace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/progspace.h?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -137,6 +137,17 @@ struct program_space\n   program_space (address_space *aspace_);\n   ~program_space ();\n \n+  typedef next_adapter<struct objfile> objfiles_range;\n+\n+  /* Return an iterarable object that can be used to iterate over all\n+     objfiles.  The basic use is in a foreach, like:\n+\n+     for (objfile *objf : pspace->objfiles ()) { ... }  */\n+  objfiles_range objfiles ()\n+  {\n+    return objfiles_range (objfiles_head);\n+  }\n+\n   /* Pointer to next in linked list.  */\n   struct program_space *next = NULL;\n \n@@ -189,7 +200,7 @@ struct program_space\n \n   /* All known objfiles are kept in a linked list.  This points to\n      the head of this list.  */\n-  struct objfile *objfiles = NULL;\n+  struct objfile *objfiles_head = NULL;\n \n   /* The set of target sections matching the sections mapped into\n      this program space.  Managed by both exec_ops and solib.c.  */\n@@ -232,7 +243,7 @@ struct address_space\n \n /* All known objfiles are kept in a linked list.  This points to the\n    root of this list.  */\n-#define object_files current_program_space->objfiles\n+#define object_files current_program_space->objfiles_head\n \n /* The set of target sections matching the sections mapped into the\n    current program space.  */"
    },
    {
      "sha": "776f59c3acb43d4e85076ee02a58a8be41a83229",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -1942,7 +1942,7 @@ maintenance_print_psymbols (const char *args, int from_tty)\n     }\n \n   found = 0;\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       int printed_objfile_header = 0;\n       int print_for_objfile = 1;\n@@ -2035,7 +2035,7 @@ maintenance_info_psymtabs (const char *regexp, int from_tty)\n     re_comp (regexp);\n \n   ALL_PSPACES (pspace)\n-    for (objfile *objfile : all_objfiles (pspace))\n+    for (objfile *objfile : pspace->objfiles ())\n       {\n \tstruct gdbarch *gdbarch = get_objfile_arch (objfile);\n \n@@ -2148,7 +2148,7 @@ maintenance_check_psymtabs (const char *ignore, int from_tty)\n   struct block *b;\n   int length;\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     for (partial_symtab *ps : require_partial_symbols (objfile, 1))\n       {\n \tstruct gdbarch *gdbarch = get_objfile_arch (objfile);"
    },
    {
      "sha": "efad0072c27d65455e2ced65ce7a9ebd29f70a04",
      "filename": "gdb/python/py-objfile.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/python/py-objfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/python/py-objfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-objfile.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -501,7 +501,7 @@ objfpy_build_id_matches (const struct bfd_build_id *build_id,\n static struct objfile *\n objfpy_lookup_objfile_by_name (const char *name)\n {\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       const char *filename;\n \n@@ -527,7 +527,7 @@ objfpy_lookup_objfile_by_name (const char *name)\n static struct objfile *\n objfpy_lookup_objfile_by_build_id (const char *build_id)\n {\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       const struct bfd_build_id *obfd_build_id;\n "
    },
    {
      "sha": "ae3001e61691e149102903afdf6847c7916b6d57",
      "filename": "gdb/python/py-prettyprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/python/py-prettyprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/python/py-prettyprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-prettyprint.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -93,7 +93,7 @@ search_pp_list (PyObject *list, PyObject *value)\n static PyObject *\n find_pretty_printer_from_objfiles (PyObject *value)\n {\n-  for (objfile *obj : all_objfiles (current_program_space))\n+  for (objfile *obj : current_program_space->objfiles ())\n     {\n       gdbpy_ref<> objf = objfile_to_objfile_object (obj);\n       if (objf == NULL)"
    },
    {
      "sha": "b80b2c260f2be32f090339124a3d67da12a74dc1",
      "filename": "gdb/python/py-progspace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/python/py-progspace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/python/py-progspace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-progspace.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -333,7 +333,7 @@ pspy_get_objfiles (PyObject *self_, PyObject *args)\n \n   if (self->pspace != NULL)\n     {\n-      for (objfile *objf : all_objfiles (self->pspace))\n+      for (objfile *objf : self->pspace->objfiles ())\n \t{\n \t  gdbpy_ref<> item = objfile_to_objfile_object (objf);\n "
    },
    {
      "sha": "2e0b2bbcc91ee1641206e93c41f36b90fbc0767e",
      "filename": "gdb/python/py-xmethods.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/python/py-xmethods.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/python/py-xmethods.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-xmethods.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -143,7 +143,7 @@ gdbpy_get_matching_xmethod_workers\n   /* Gather debug method matchers registered with the object files.\n      This could be done differently by iterating over each objfile's matcher\n      list individually, but there's no data yet to show it's needed.  */\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       gdbpy_ref<> py_objfile = objfile_to_objfile_object (objfile);\n "
    },
    {
      "sha": "4f5e8e0c75b391f59187e6378fcaeaa77553d24b",
      "filename": "gdb/solib-spu.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/solib-spu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/solib-spu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-spu.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -102,7 +102,7 @@ append_ocl_sos (struct so_list **link_ptr)\n {\n   CORE_ADDR *ocl_program_addr_base;\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       ocl_program_addr_base\n \t= (CORE_ADDR *) objfile_data (objfile, ocl_program_data_key);"
    },
    {
      "sha": "3a6db5e12d06f2af68a1ad673895a519f83da120",
      "filename": "gdb/solib.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/solib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/solib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -678,7 +678,7 @@ solib_read_symbols (struct so_list *so, symfile_add_flags flags)\n \t{\n \t  /* Have we already loaded this shared object?  */\n \t  so->objfile = nullptr;\n-\t  for (objfile *objfile : all_objfiles (current_program_space))\n+\t  for (objfile *objfile : current_program_space->objfiles ())\n \t    {\n \t      if (filename_cmp (objfile_name (objfile), so->so_name) == 0\n \t\t  && objfile->addr_low == so->addr_low)"
    },
    {
      "sha": "196680deafc80699c0a1b670736d7e831537b3a3",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -269,7 +269,7 @@ select_source_symtab (struct symtab *s)\n \n   current_source_line = 1;\n \n-  for (objfile *ofp : all_objfiles (current_program_space))\n+  for (objfile *ofp : current_program_space->objfiles ())\n     {\n       for (compunit_symtab *cu : objfile_compunits (ofp))\n \t{\n@@ -291,7 +291,7 @@ select_source_symtab (struct symtab *s)\n   if (current_source_symtab)\n     return;\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       if (objfile->sf)\n \ts = objfile->sf->qf->find_last_source_symtab (objfile);\n@@ -382,7 +382,7 @@ forget_cached_source_info (void)\n   struct program_space *pspace;\n \n   ALL_PSPACES (pspace)\n-    for (objfile *objfile : all_objfiles (pspace))\n+    for (objfile *objfile : pspace->objfiles ())\n       {\n \tforget_cached_source_info_for_objfile (objfile);\n       }"
    },
    {
      "sha": "a9bab946bdba3df56af5dc2ec5b1e6d3f74fd90f",
      "filename": "gdb/spu-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/spu-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/spu-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/spu-tdep.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -1883,7 +1883,7 @@ spu_overlay_update (struct obj_section *osect)\n   /* All sections.  */\n   else\n     {\n-      for (objfile *objfile : all_objfiles (current_program_space))\n+      for (objfile *objfile : current_program_space->objfiles ())\n \tALL_OBJFILE_OSECTIONS (objfile, osect)\n \t  if (section_is_overlay (osect))\n \t    spu_overlay_update_osect (osect);\n@@ -2003,7 +2003,7 @@ spu_objfile_from_frame (struct frame_info *frame)\n   if (gdbarch_bfd_arch_info (gdbarch)->arch != bfd_arch_spu)\n     return NULL;\n \n-  for (objfile *obj : all_objfiles (current_program_space))\n+  for (objfile *obj : current_program_space->objfiles ())\n     {\n       if (obj->sections != obj->sections_end\n \t  && SPUADDR_SPU (obj_section_addr (obj->sections)) == tdep->id)"
    },
    {
      "sha": "9dc1880732637db296c3bc1eb85497ae235a6323",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -662,7 +662,7 @@ set_debug_symfile (const char *args, int from_tty, struct cmd_list_element *c)\n   struct program_space *pspace;\n \n   ALL_PSPACES (pspace)\n-    for (objfile *objfile : all_objfiles (pspace))\n+    for (objfile *objfile : pspace->objfiles ())\n       {\n \tif (debug_symfile)\n \t  {"
    },
    {
      "sha": "7f800add8c143db2bcf214caeb7742271f9f3577",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -2351,7 +2351,7 @@ remove_symbol_file_command (const char *args, int from_tty)\n \n       addr = parse_and_eval_address (argv[1]);\n \n-      for (objfile *objfile : all_objfiles (current_program_space))\n+      for (objfile *objfile : current_program_space->objfiles ())\n \t{\n \t  if ((objfile->flags & OBJF_USERLOADED) != 0\n \t      && (objfile->flags & OBJF_SHARED) != 0\n@@ -2372,7 +2372,7 @@ remove_symbol_file_command (const char *args, int from_tty)\n \n       gdb::unique_xmalloc_ptr<char> filename (tilde_expand (argv[0]));\n \n-      for (objfile *objfile : all_objfiles (current_program_space))\n+      for (objfile *objfile : current_program_space->objfiles ())\n \t{\n \t  if ((objfile->flags & OBJF_USERLOADED) != 0\n \t      && (objfile->flags & OBJF_SHARED) != 0\n@@ -2980,7 +2980,7 @@ overlay_invalidate_all (void)\n {\n   struct obj_section *sect;\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     ALL_OBJFILE_OSECTIONS (objfile, sect)\n       if (section_is_overlay (sect))\n \tsect->ovly_mapped = -1;\n@@ -3158,7 +3158,7 @@ find_pc_overlay (CORE_ADDR pc)\n \n   if (overlay_debugging)\n     {\n-      for (objfile *objfile : all_objfiles (current_program_space))\n+      for (objfile *objfile : current_program_space->objfiles ())\n \tALL_OBJFILE_OSECTIONS (objfile, osect)\n \t  if (section_is_overlay (osect))\n \t    {\n@@ -3187,7 +3187,7 @@ find_pc_mapped_section (CORE_ADDR pc)\n \n   if (overlay_debugging)\n     {\n-      for (objfile *objfile : all_objfiles (current_program_space))\n+      for (objfile *objfile : current_program_space->objfiles ())\n \tALL_OBJFILE_OSECTIONS (objfile, osect)\n \t  if (pc_in_mapped_range (pc, osect) && section_is_mapped (osect))\n \t    return osect;\n@@ -3207,7 +3207,7 @@ list_overlays_command (const char *args, int from_tty)\n \n   if (overlay_debugging)\n     {\n-      for (objfile *objfile : all_objfiles (current_program_space))\n+      for (objfile *objfile : current_program_space->objfiles ())\n \tALL_OBJFILE_OSECTIONS (objfile, osect)\n \t  if (section_is_mapped (osect))\n \t    {\n@@ -3255,7 +3255,7 @@ map_overlay_command (const char *args, int from_tty)\n     error (_(\"Argument required: name of an overlay section\"));\n \n   /* First, find a section matching the user supplied argument.  */\n-  for (objfile *obj_file : all_objfiles (current_program_space))\n+  for (objfile *obj_file : current_program_space->objfiles ())\n     ALL_OBJFILE_OSECTIONS (obj_file, sec)\n       if (!strcmp (bfd_section_name (obj_file->obfd, sec->the_bfd_section),\n \t\t   args))\n@@ -3269,7 +3269,7 @@ map_overlay_command (const char *args, int from_tty)\n \n \t  /* Next, make a pass and unmap any sections that are\n \t     overlapped by this new section: */\n-\t  for (objfile *objfile2 : all_objfiles (current_program_space))\n+\t  for (objfile *objfile2 : current_program_space->objfiles ())\n \t    ALL_OBJFILE_OSECTIONS (objfile2, sec2)\n \t      if (sec2->ovly_mapped && sec != sec2 && sections_overlap (sec,\n \t\t\t\t\t\t\t\t\tsec2))\n@@ -3303,7 +3303,7 @@ unmap_overlay_command (const char *args, int from_tty)\n     error (_(\"Argument required: name of an overlay section\"));\n \n   /* First, find a section matching the user supplied argument.  */\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     ALL_OBJFILE_OSECTIONS (objfile, sec)\n       if (!strcmp (bfd_section_name (objfile->obfd, sec->the_bfd_section), args))\n \t{\n@@ -3574,7 +3574,7 @@ simple_overlay_update (struct obj_section *osect)\n     return;\n \n   /* Now may as well update all sections, even if only one was requested.  */\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     ALL_OBJFILE_OSECTIONS (objfile, osect)\n       if (section_is_overlay (osect))\n \t{\n@@ -3790,7 +3790,7 @@ expand_symtabs_matching\n    gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n    enum search_domain kind)\n {\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       if (objfile->sf)\n \tobjfile->sf->qf->expand_symtabs_matching (objfile, file_matcher,\n@@ -3808,7 +3808,7 @@ void\n map_symbol_filenames (symbol_filename_ftype *fun, void *data,\n \t\t      int need_fullname)\n {\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       if (objfile->sf)\n \tobjfile->sf->qf->map_symbol_filenames (objfile, fun, data,"
    },
    {
      "sha": "d2feddc39be14ccf3f88980d1f5d25f178583f0c",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -64,7 +64,7 @@ print_symbol_bcache_statistics (void)\n   struct program_space *pspace;\n \n   ALL_PSPACES (pspace)\n-    for (objfile *objfile : all_objfiles (pspace))\n+    for (objfile *objfile : pspace->objfiles ())\n       {\n \tQUIT;\n \tprintf_filtered (_(\"Byte cache statistics for '%s':\\n\"),\n@@ -86,7 +86,7 @@ print_objfile_statistics (void)\n   int i, linetables, blockvectors;\n \n   ALL_PSPACES (pspace)\n-  for (objfile *objfile : all_objfiles (pspace))\n+  for (objfile *objfile : pspace->objfiles ())\n     {\n       QUIT;\n       printf_filtered (_(\"Statistics for '%s':\\n\"), objfile_name (objfile));\n@@ -475,7 +475,7 @@ maintenance_print_symbols (const char *args, int from_tty)\n     {\n       int found = 0;\n \n-      for (objfile *objfile : all_objfiles (current_program_space))\n+      for (objfile *objfile : current_program_space->objfiles ())\n \t{\n \t  int print_for_objfile = 1;\n \n@@ -736,7 +736,7 @@ maintenance_print_msymbols (const char *args, int from_tty)\n       outfile = &arg_outfile;\n     }\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       QUIT;\n       if (objfile_arg == NULL\n@@ -756,7 +756,7 @@ maintenance_print_objfiles (const char *regexp, int from_tty)\n     re_comp (regexp);\n \n   ALL_PSPACES (pspace)\n-    for (objfile *objfile : all_objfiles (pspace))\n+    for (objfile *objfile : pspace->objfiles ())\n       {\n \tQUIT;\n \tif (! regexp\n@@ -778,7 +778,7 @@ maintenance_info_symtabs (const char *regexp, int from_tty)\n     re_comp (regexp);\n \n   ALL_PSPACES (pspace)\n-    for (objfile *objfile : all_objfiles (pspace))\n+    for (objfile *objfile : pspace->objfiles ())\n       {\n \t/* We don't want to print anything for this objfile until we\n \t   actually find a symtab whose name matches.  */\n@@ -863,7 +863,7 @@ maintenance_check_symtabs (const char *ignore, int from_tty)\n   struct program_space *pspace;\n \n   ALL_PSPACES (pspace)\n-    for (objfile *objfile : all_objfiles (pspace))\n+    for (objfile *objfile : pspace->objfiles ())\n       {\n \t/* We don't want to print anything for this objfile until we\n \t   actually find something worth printing.  */\n@@ -929,7 +929,7 @@ maintenance_expand_symtabs (const char *args, int from_tty)\n     re_comp (regexp);\n \n   ALL_PSPACES (pspace)\n-    for (objfile *objfile : all_objfiles (pspace))\n+    for (objfile *objfile : pspace->objfiles ())\n       {\n \tif (objfile->sf)\n \t  {\n@@ -1030,7 +1030,7 @@ maintenance_info_line_tables (const char *regexp, int from_tty)\n     re_comp (regexp);\n \n   ALL_PSPACES (pspace)\n-    for (objfile *objfile : all_objfiles (pspace))\n+    for (objfile *objfile : pspace->objfiles ())\n       {\n \tfor (compunit_symtab *cust : objfile_compunits (objfile))\n \t  {"
    },
    {
      "sha": "370c8b45b3268bc1945ddc09dffa2ca77a6fbdda",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 23,
      "deletions": 23,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -473,7 +473,7 @@ iterate_over_symtabs (const char *name,\n       gdb_assert (IS_ABSOLUTE_PATH (real_path.get ()));\n     }\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       if (iterate_over_some_symtabs (name, real_path.get (),\n \t\t\t\t     objfile->compunit_symtabs, NULL,\n@@ -484,7 +484,7 @@ iterate_over_symtabs (const char *name,\n   /* Same search rules as above apply here, but now we look thru the\n      psymtabs.  */\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       if (objfile->sf\n \t  && objfile->sf->qf->map_symtabs_matching_filename (objfile,\n@@ -1010,7 +1010,7 @@ matching_obj_sections (struct obj_section *obj_first,\n   /* Otherwise check that they are in corresponding objfiles.  */\n \n   struct objfile *obj = NULL;\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     if (objfile->obfd == first->owner)\n       {\n \tobj = objfile;\n@@ -1047,7 +1047,7 @@ expand_symtab_containing_pc (CORE_ADDR pc, struct obj_section *section)\n \t  || MSYMBOL_TYPE (msymbol.minsym) == mst_file_bss))\n     return;\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       struct compunit_symtab *cust = NULL;\n \n@@ -2169,7 +2169,7 @@ lookup_objfile_from_block (const struct block *block)\n \n   block = block_global_block (block);\n   /* Look through all blockvectors.  */\n-  for (objfile *obj : all_objfiles (current_program_space))\n+  for (objfile *obj : current_program_space->objfiles ())\n     {\n       for (compunit_symtab *cust : objfile_compunits (obj))\n \tif (block == BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (cust),\n@@ -2588,7 +2588,7 @@ lookup_static_symbol (const char *name, const domain_enum domain)\n       return result;\n     }\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       result = lookup_symbol_in_objfile (objfile, STATIC_BLOCK, name, domain);\n       if (result.symbol != NULL)\n@@ -2795,14 +2795,14 @@ basic_lookup_transparent_type (const char *name)\n      of the desired name as a global, then do psymtab-to-symtab\n      conversion on the fly and return the found symbol.  */\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       t = basic_lookup_transparent_type_1 (objfile, GLOBAL_BLOCK, name);\n       if (t)\n \treturn t;\n     }\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       t = basic_lookup_transparent_type_quick (objfile, GLOBAL_BLOCK, name);\n       if (t)\n@@ -2816,14 +2816,14 @@ basic_lookup_transparent_type (const char *name)\n      of the desired name as a file-level static, then do psymtab-to-symtab\n      conversion on the fly and return the found symbol.  */\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       t = basic_lookup_transparent_type_1 (objfile, STATIC_BLOCK, name);\n       if (t)\n \treturn t;\n     }\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       t = basic_lookup_transparent_type_quick (objfile, STATIC_BLOCK, name);\n       if (t)\n@@ -2902,7 +2902,7 @@ find_pc_sect_compunit_symtab (CORE_ADDR pc, struct obj_section *section)\n      It also happens for objfiles that have their functions reordered.\n      For these, the symtab we are looking for is not necessarily read in.  */\n \n-  for (objfile *obj_file : all_objfiles (current_program_space))\n+  for (objfile *obj_file : current_program_space->objfiles ())\n     {\n       for (compunit_symtab *cust : objfile_compunits (obj_file))\n \t{\n@@ -2964,7 +2964,7 @@ find_pc_sect_compunit_symtab (CORE_ADDR pc, struct obj_section *section)\n \n   /* Not found in symtabs, search the \"quick\" symtabs (e.g. psymtabs).  */\n \n-  for (objfile *objf : all_objfiles (current_program_space))\n+  for (objfile *objf : current_program_space->objfiles ())\n     {\n       struct compunit_symtab *result;\n \n@@ -2996,7 +2996,7 @@ find_pc_compunit_symtab (CORE_ADDR pc)\n struct symbol *\n find_symbol_at_address (CORE_ADDR address)\n {\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       if (objfile->sf == NULL\n \t  || objfile->sf->qf->find_compunit_symtab_by_address == NULL)\n@@ -3351,14 +3351,14 @@ find_line_symtab (struct symtab *sym_tab, int line,\n       else\n \tbest = 0;\n \n-      for (objfile *objfile : all_objfiles (current_program_space))\n+      for (objfile *objfile : current_program_space->objfiles ())\n \t{\n \t  if (objfile->sf)\n \t    objfile->sf->qf->expand_symtabs_with_fullname\n \t      (objfile, symtab_to_fullname (sym_tab));\n \t}\n \n-      for (objfile *objfile : all_objfiles (current_program_space))\n+      for (objfile *objfile : current_program_space->objfiles ())\n \t{\n \t  for (compunit_symtab *cu : objfile_compunits (objfile))\n \t    {\n@@ -4198,7 +4198,7 @@ info_sources_command (const char *ignore, int from_tty)\n   printf_filtered (\"Source files for which symbols have been read in:\\n\\n\");\n \n   data.first = 1;\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       for (compunit_symtab *cu : objfile_compunits (objfile))\n \t{\n@@ -4453,7 +4453,7 @@ search_symbols (const char *regexp, enum search_domain kind,\n \n   if (nfiles == 0 && (kind == VARIABLES_DOMAIN || kind == FUNCTIONS_DOMAIN))\n     {\n-      for (objfile *objfile : all_objfiles (current_program_space))\n+      for (objfile *objfile : current_program_space->objfiles ())\n \t{\n \t  for (minimal_symbol *msymbol : objfile_msymbols (objfile))\n \t    {\n@@ -4490,7 +4490,7 @@ search_symbols (const char *regexp, enum search_domain kind,\n \t}\n     }\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       for (compunit_symtab *cust : objfile_compunits (objfile))\n \t{\n@@ -4556,7 +4556,7 @@ search_symbols (const char *regexp, enum search_domain kind,\n   if ((found_misc || (nfiles == 0 && kind != FUNCTIONS_DOMAIN))\n       && !treg.has_value ())\n     {\n-      for (objfile *objfile : all_objfiles (current_program_space))\n+      for (objfile *objfile : current_program_space->objfiles ())\n \t{\n \t  for (minimal_symbol *msymbol : objfile_msymbols (objfile))\n \t    {\n@@ -5272,7 +5272,7 @@ default_collect_symbol_completion_matches_break_on\n \n   if (code == TYPE_CODE_UNDEF)\n     {\n-      for (objfile *objfile : all_objfiles (current_program_space))\n+      for (objfile *objfile : current_program_space->objfiles ())\n \t{\n \t  for (minimal_symbol *msymbol : objfile_msymbols (objfile))\n \t    {\n@@ -5291,7 +5291,7 @@ default_collect_symbol_completion_matches_break_on\n     }\n \n   /* Add completions for all currently loaded symbol tables.  */\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       for (compunit_symtab *cust : objfile_compunits (objfile))\n \tadd_symtab_completions (cust, tracker, mode, lookup_name,\n@@ -5600,7 +5600,7 @@ make_source_files_completion_list (const char *text, const char *word)\n \n   filename_seen_cache filenames_seen;\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       for (compunit_symtab *cu : objfile_compunits (objfile))\n \t{\n@@ -5717,7 +5717,7 @@ find_main_name (void)\n      relies on the order of objfile creation -- which still isn't\n      guaranteed to get the correct answer, but is just probably more\n      accurate.  */\n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       if (objfile->per_bfd->name_of_main != NULL)\n \t{"
    },
    {
      "sha": "2f223b3dfe93956ba00c3dce483ec09330d3990a",
      "filename": "gdb/windows-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2030c079717475f5b6fad837bb81758891f3b802/gdb/windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2030c079717475f5b6fad837bb81758891f3b802/gdb/windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-tdep.c?ref=2030c079717475f5b6fad837bb81758891f3b802",
      "patch": "@@ -423,7 +423,7 @@ windows_iterate_over_objfiles_in_search_order\n \treturn;\n     }\n \n-  for (objfile *objfile : all_objfiles (current_program_space))\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       if (objfile != current_objfile)\n \t{"
    }
  ]
}