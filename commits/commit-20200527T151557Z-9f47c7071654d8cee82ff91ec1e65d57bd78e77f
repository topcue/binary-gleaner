{
  "sha": "9f47c7071654d8cee82ff91ec1e65d57bd78e77f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWY0N2M3MDcxNjU0ZDhjZWU4MmZmOTFlYzFlNjVkNTdiZDc4ZTc3Zg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:14:04Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:15:57Z"
    },
    "message": "Remove dwarf2_per_cu_data::objfile ()\n\nSince dwarf2_per_cu_data objects are going to become\nobjfile-independent, the backlink from dwarf2_per_cu_data to one\nparticular objfile must be removed.  Instead, users of\ndwarf2_per_cu_data that need an objfile must know from somewhere else in\nthe context of which objfile they are using this CU.\n\nThis also helps remove a dwarf2_per_cu_data::dwarf2_per_objfile\nreference (from where the objfile was obtained).\n\nNote that the dwarf2_per_cu_data::objfile method has a special case to\nmake sure to return the main objfile, if the objfile associated to the\ndwarf2_per_cu_data is a separate debug objfile.  I don't really know if\nthis is necessary: I ignored that, and didn't see any regression when\ntesting with the various Dejagnu boards with separate debug info, so I\npresume it wasn't needed.  If it turns out this was needed, then we can\nhave a helper method on the objfile type for that.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.h (struct dwarf2_per_cu_data) <objfile>: Remove.\n\t* dwarf2/read.c (dwarf2_compute_name): Pass per_objfile down.\n\t(read_call_site_scope): Assign per_objfile.\n\t(dwarf2_per_cu_data::objfile): Remove.\n\t* gdbtypes.h (struct call_site) <per_objfile>: New member.\n\t* dwarf2/loc.h (dwarf2_evaluate_loc_desc): Add\n\tdwarf2_per_objfile parameter.\n\t* dwarf2/loc.c (dwarf2_evaluate_loc_desc_full): Add\n\tdwarf2_per_objfile parameter.\n\t(dwarf_expr_reg_to_entry_parameter): Add output\n\tdwarf2_per_objfile parameter.\n\t(locexpr_get_frame_base): Update.\n\t(class dwarf_evaluate_loc_desc) <get_tls_address>: Update.\n\t<push_dwarf_reg_entry_value>: Update.\n\t<call_site_to_target_addr>: Update.\n\t(dwarf_entry_parameter_to_value): Add dwarf2_per_objfile\n\tparameter.\n\t(value_of_dwarf_reg_entry): Update.\n\t(rw_pieced_value): Update.\n\t(indirect_synthetic_pointer): Update.\n\t(dwarf2_evaluate_property): Update.\n\t(dwarf2_loc_desc_get_symbol_read_needs): Add dwarf2_per_objfile\n\tparameter.\n\t(locexpr_read_variable): Update.\n\t(locexpr_get_symbol_read_needs): Update.\n\t(loclist_read_variable): Update.\n\nChange-Id: Idb40d1a94995af305054d463967bb6ce11a08f25",
    "tree": {
      "sha": "d85134af274fb8ff26ab4d6365ec591428fd4cbf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d85134af274fb8ff26ab4d6365ec591428fd4cbf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9f47c7071654d8cee82ff91ec1e65d57bd78e77f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9f47c7071654d8cee82ff91ec1e65d57bd78e77f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9f47c7071654d8cee82ff91ec1e65d57bd78e77f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9f47c7071654d8cee82ff91ec1e65d57bd78e77f/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "14095eb32673d88b8495769e95e1db8393ed2a3a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14095eb32673d88b8495769e95e1db8393ed2a3a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/14095eb32673d88b8495769e95e1db8393ed2a3a"
    }
  ],
  "stats": {
    "total": 158,
    "additions": 94,
    "deletions": 64
  },
  "files": [
    {
      "sha": "865ce0979daedaab840bf39ccac9475acfba0f4e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9f47c7071654d8cee82ff91ec1e65d57bd78e77f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9f47c7071654d8cee82ff91ec1e65d57bd78e77f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9f47c7071654d8cee82ff91ec1e65d57bd78e77f",
      "patch": "@@ -1,3 +1,32 @@\n+2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/read.h (struct dwarf2_per_cu_data) <objfile>: Remove.\n+\t* dwarf2/read.c (dwarf2_compute_name): Pass per_objfile down.\n+\t(read_call_site_scope): Assign per_objfile.\n+\t(dwarf2_per_cu_data::objfile): Remove.\n+\t* gdbtypes.h (struct call_site) <per_objfile>: New member.\n+\t* dwarf2/loc.h (dwarf2_evaluate_loc_desc): Add\n+\tdwarf2_per_objfile parameter.\n+\t* dwarf2/loc.c (dwarf2_evaluate_loc_desc_full): Add\n+\tdwarf2_per_objfile parameter.\n+\t(dwarf_expr_reg_to_entry_parameter): Add output\n+\tdwarf2_per_objfile parameter.\n+\t(locexpr_get_frame_base): Update.\n+\t(class dwarf_evaluate_loc_desc) <get_tls_address>: Update.\n+\t<push_dwarf_reg_entry_value>: Update.\n+\t<call_site_to_target_addr>: Update.\n+\t(dwarf_entry_parameter_to_value): Add dwarf2_per_objfile\n+\tparameter.\n+\t(value_of_dwarf_reg_entry): Update.\n+\t(rw_pieced_value): Update.\n+\t(indirect_synthetic_pointer): Update.\n+\t(dwarf2_evaluate_property): Update.\n+\t(dwarf2_loc_desc_get_symbol_read_needs): Add dwarf2_per_objfile\n+\tparameter.\n+\t(locexpr_read_variable): Update.\n+\t(locexpr_get_symbol_read_needs): Update.\n+\t(loclist_read_variable): Update.\n+\n 2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* dwarf2/read.h (dwarf2_fetch_die_loc_sect_off,"
    },
    {
      "sha": "e98c67384877a65f9485b378d217d6297744e104",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 53,
      "deletions": 41,
      "changes": 94,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9f47c7071654d8cee82ff91ec1e65d57bd78e77f/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9f47c7071654d8cee82ff91ec1e65d57bd78e77f/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=9f47c7071654d8cee82ff91ec1e65d57bd78e77f",
      "patch": "@@ -47,19 +47,17 @@\n #include \"gdbsupport/underlying.h\"\n #include \"gdbsupport/byte-vector.h\"\n \n-static struct value *dwarf2_evaluate_loc_desc_full (struct type *type,\n-\t\t\t\t\t\t    struct frame_info *frame,\n-\t\t\t\t\t\t    const gdb_byte *data,\n-\t\t\t\t\t\t    size_t size,\n-\t\t\t\t\t\t    struct dwarf2_per_cu_data *per_cu,\n-\t\t\t\t\t\t    struct type *subobj_type,\n-\t\t\t\t\t\t    LONGEST subobj_byte_offset);\n+static struct value *dwarf2_evaluate_loc_desc_full\n+  (struct type *type, struct frame_info *frame, const gdb_byte *data,\n+   size_t size, dwarf2_per_cu_data *per_cu, dwarf2_per_objfile *per_objfile,\n+   struct type *subobj_type, LONGEST subobj_byte_offset);\n \n static struct call_site_parameter *dwarf_expr_reg_to_entry_parameter\n     (struct frame_info *frame,\n      enum call_site_parameter_kind kind,\n      union call_site_parameter_u kind_u,\n-     struct dwarf2_per_cu_data **per_cu_return);\n+     dwarf2_per_cu_data **per_cu_return,\n+     dwarf2_per_objfile **per_objfile_return);\n \n static struct value *indirect_synthetic_pointer\n   (sect_offset die, LONGEST byte_offset,\n@@ -476,7 +474,7 @@ locexpr_get_frame_base (struct symbol *framefunc, struct frame_info *frame)\n   SYMBOL_BLOCK_OPS (framefunc)->find_frame_base_location\n     (framefunc, get_frame_pc (frame), &start, &length);\n   result = dwarf2_evaluate_loc_desc (type, frame, start, length,\n-\t\t\t\t     dlbaton->per_cu);\n+\t\t\t\t     dlbaton->per_cu, dlbaton->per_objfile);\n \n   /* The DW_AT_frame_base attribute contains a location description which\n      computes the base address itself.  However, the call to\n@@ -533,7 +531,7 @@ loclist_get_frame_base (struct symbol *framefunc, struct frame_info *frame)\n   SYMBOL_BLOCK_OPS (framefunc)->find_frame_base_location\n     (framefunc, get_frame_pc (frame), &start, &length);\n   result = dwarf2_evaluate_loc_desc (type, frame, start, length,\n-\t\t\t\t     dlbaton->per_cu);\n+\t\t\t\t     dlbaton->per_cu, dlbaton->per_objfile);\n \n   /* The DW_AT_frame_base attribute contains a location description which\n      computes the base address itself.  However, the call to\n@@ -654,9 +652,7 @@ class dwarf_evaluate_loc_desc : public dwarf_expr_context\n      current thread's thread-local storage with offset OFFSET.  */\n   CORE_ADDR get_tls_address (CORE_ADDR offset) override\n   {\n-    struct objfile *objfile = per_cu->objfile ();\n-\n-    return target_translate_tls_address (objfile, offset);\n+    return target_translate_tls_address (per_objfile->objfile, offset);\n   }\n \n   /* Helper interface of per_cu_dwarf_call for\n@@ -716,18 +712,22 @@ class dwarf_evaluate_loc_desc : public dwarf_expr_context\n \t\t\t\t   int deref_size) override\n   {\n     struct frame_info *caller_frame;\n-    struct dwarf2_per_cu_data *caller_per_cu;\n+    dwarf2_per_cu_data *caller_per_cu;\n+    dwarf2_per_objfile *caller_per_objfile;\n     struct call_site_parameter *parameter;\n     const gdb_byte *data_src;\n     size_t size;\n \n     caller_frame = get_prev_frame (frame);\n \n     parameter = dwarf_expr_reg_to_entry_parameter (frame, kind, kind_u,\n-\t\t\t\t\t\t   &caller_per_cu);\n+\t\t\t\t\t\t   &caller_per_cu,\n+\t\t\t\t\t\t   &caller_per_objfile);\n     data_src = deref_size == -1 ? parameter->value : parameter->data_value;\n     size = deref_size == -1 ? parameter->value_size : parameter->data_value_size;\n \n+    gdb_assert (this->per_objfile == caller_per_objfile);\n+\n     /* DEREF_SIZE size is not verified here.  */\n     if (data_src == NULL)\n       throw_error (NO_ENTRY_VALUE_ERROR,\n@@ -741,7 +741,7 @@ class dwarf_evaluate_loc_desc : public dwarf_expr_context\n \t\t\t\t\t\t\t(CORE_ADDR) 0);\n \n     scoped_restore save_arch = make_scoped_restore (&this->gdbarch);\n-    this->gdbarch = per_cu->objfile ()->arch ();\n+    this->gdbarch = this->per_objfile->objfile->arch ();\n     scoped_restore save_addr_size = make_scoped_restore (&this->addr_size);\n     this->addr_size = per_cu->addr_size ();\n \n@@ -869,7 +869,8 @@ call_site_to_target_addr (struct gdbarch *call_site_gdbarch,\n \tcaller_core_addr_type = builtin_type (caller_arch)->builtin_func_ptr;\n \tval = dwarf2_evaluate_loc_desc (caller_core_addr_type, caller_frame,\n \t\t\t\t\tdwarf_block->data, dwarf_block->size,\n-\t\t\t\t\tdwarf_block->per_cu);\n+\t\t\t\t\tdwarf_block->per_cu,\n+\t\t\t\t\tdwarf_block->per_objfile);\n \t/* DW_AT_call_target is a DWARF expression, not a DWARF location.  */\n \tif (VALUE_LVAL (val) == lval_memory)\n \t  return value_address (val);\n@@ -1290,7 +1291,8 @@ static struct call_site_parameter *\n dwarf_expr_reg_to_entry_parameter (struct frame_info *frame,\n \t\t\t\t   enum call_site_parameter_kind kind,\n \t\t\t\t   union call_site_parameter_u kind_u,\n-\t\t\t\t   struct dwarf2_per_cu_data **per_cu_return)\n+\t\t\t\t   dwarf2_per_cu_data **per_cu_return,\n+\t\t\t\t   dwarf2_per_objfile **per_objfile_return)\n {\n   CORE_ADDR func_addr, caller_pc;\n   struct gdbarch *gdbarch;\n@@ -1381,6 +1383,7 @@ dwarf_expr_reg_to_entry_parameter (struct frame_info *frame,\n     }\n \n   *per_cu_return = call_site->per_cu;\n+  *per_objfile_return = call_site->per_objfile;\n   return parameter;\n }\n \n@@ -1398,7 +1401,8 @@ static struct value *\n dwarf_entry_parameter_to_value (struct call_site_parameter *parameter,\n \t\t\t\tCORE_ADDR deref_size, struct type *type,\n \t\t\t\tstruct frame_info *caller_frame,\n-\t\t\t\tstruct dwarf2_per_cu_data *per_cu)\n+\t\t\t\tdwarf2_per_cu_data *per_cu,\n+\t\t\t\tdwarf2_per_objfile *per_objfile)\n {\n   const gdb_byte *data_src;\n   gdb_byte *data;\n@@ -1419,7 +1423,8 @@ dwarf_entry_parameter_to_value (struct call_site_parameter *parameter,\n   memcpy (data, data_src, size);\n   data[size] = DW_OP_stack_value;\n \n-  return dwarf2_evaluate_loc_desc (type, caller_frame, data, size + 1, per_cu);\n+  return dwarf2_evaluate_loc_desc (type, caller_frame, data, size + 1, per_cu,\n+\t\t\t\t   per_objfile);\n }\n \n /* VALUE must be of type lval_computed with entry_data_value_funcs.  Perform\n@@ -1493,14 +1498,17 @@ value_of_dwarf_reg_entry (struct type *type, struct frame_info *frame,\n   struct frame_info *caller_frame = get_prev_frame (frame);\n   struct value *outer_val, *target_val, *val;\n   struct call_site_parameter *parameter;\n-  struct dwarf2_per_cu_data *caller_per_cu;\n+  dwarf2_per_cu_data *caller_per_cu;\n+  dwarf2_per_objfile *caller_per_objfile;\n \n   parameter = dwarf_expr_reg_to_entry_parameter (frame, kind, kind_u,\n-\t\t\t\t\t\t &caller_per_cu);\n+\t\t\t\t\t\t &caller_per_cu,\n+\t\t\t\t\t\t &caller_per_objfile);\n \n   outer_val = dwarf_entry_parameter_to_value (parameter, -1 /* deref_size */,\n \t\t\t\t\t      type, caller_frame,\n-\t\t\t\t\t      caller_per_cu);\n+\t\t\t\t\t      caller_per_cu,\n+\t\t\t\t\t      caller_per_objfile);\n \n   /* Check if DW_AT_call_data_value cannot be used.  If it should be\n      used and it is not available do not fall back to OUTER_VAL - dereferencing\n@@ -1514,7 +1522,8 @@ value_of_dwarf_reg_entry (struct type *type, struct frame_info *frame,\n   target_val = dwarf_entry_parameter_to_value (parameter,\n \t\t\t\t\t       TYPE_LENGTH (target_type),\n \t\t\t\t\t       target_type, caller_frame,\n-\t\t\t\t\t       caller_per_cu);\n+\t\t\t\t\t       caller_per_cu,\n+\t\t\t\t\t       caller_per_objfile);\n \n   val = allocate_computed_value (type, &entry_data_value_funcs,\n \t\t\t\t release_value (target_val).release ());\n@@ -1831,8 +1840,7 @@ rw_pieced_value (struct value *v, struct value *from)\n \t\tbreak;\n \t      }\n \n-\t    struct objfile *objfile = c->per_cu->objfile ();\n-\t    struct gdbarch *objfile_gdbarch = objfile->arch ();\n+\t    gdbarch *objfile_gdbarch = c->per_objfile->objfile->arch ();\n \t    ULONGEST stack_value_size_bits\n \t      = 8 * TYPE_LENGTH (value_type (p->v.value));\n \n@@ -2023,6 +2031,7 @@ indirect_synthetic_pointer (sect_offset die, LONGEST byte_offset,\n   if (baton.data != NULL)\n     return dwarf2_evaluate_loc_desc_full (orig_type, frame, baton.data,\n \t\t\t\t\t  baton.size, baton.per_cu,\n+\t\t\t\t\t  baton.per_objfile,\n \t\t\t\t\t  TYPE_TARGET_TYPE (type),\n \t\t\t\t\t  byte_offset);\n   else\n@@ -2187,12 +2196,12 @@ static const struct lval_funcs pieced_value_funcs = {\n static struct value *\n dwarf2_evaluate_loc_desc_full (struct type *type, struct frame_info *frame,\n \t\t\t       const gdb_byte *data, size_t size,\n-\t\t\t       struct dwarf2_per_cu_data *per_cu,\n+\t\t\t       dwarf2_per_cu_data *per_cu,\n+\t\t\t       dwarf2_per_objfile *per_objfile,\n \t\t\t       struct type *subobj_type,\n \t\t\t       LONGEST subobj_byte_offset)\n {\n   struct value *retval;\n-  struct objfile *objfile = per_cu->objfile ();\n \n   if (subobj_type == NULL)\n     {\n@@ -2205,15 +2214,14 @@ dwarf2_evaluate_loc_desc_full (struct type *type, struct frame_info *frame,\n   if (size == 0)\n     return allocate_optimized_out_value (subobj_type);\n \n-  dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n   dwarf_evaluate_loc_desc ctx (per_objfile);\n   ctx.frame = frame;\n   ctx.per_cu = per_cu;\n   ctx.obj_address = 0;\n \n   scoped_value_mark free_values;\n \n-  ctx.gdbarch = objfile->arch ();\n+  ctx.gdbarch = per_objfile->objfile->arch ();\n   ctx.addr_size = per_cu->addr_size ();\n   ctx.ref_addr_size = per_cu->ref_addr_size ();\n \n@@ -2336,7 +2344,7 @@ dwarf2_evaluate_loc_desc_full (struct type *type, struct frame_info *frame,\n \t    size_t n = TYPE_LENGTH (value_type (value));\n \t    size_t len = TYPE_LENGTH (subobj_type);\n \t    size_t max = TYPE_LENGTH (type);\n-\t    struct gdbarch *objfile_gdbarch = objfile->arch ();\n+\t    gdbarch *objfile_gdbarch = per_objfile->objfile->arch ();\n \n \t    if (subobj_byte_offset + len > max)\n \t      invalid_synthetic_pointer ();\n@@ -2399,10 +2407,11 @@ dwarf2_evaluate_loc_desc_full (struct type *type, struct frame_info *frame,\n struct value *\n dwarf2_evaluate_loc_desc (struct type *type, struct frame_info *frame,\n \t\t\t  const gdb_byte *data, size_t size,\n-\t\t\t  struct dwarf2_per_cu_data *per_cu)\n+\t\t\t  dwarf2_per_cu_data *per_cu,\n+\t\t\t  dwarf2_per_objfile *per_objfile)\n {\n   return dwarf2_evaluate_loc_desc_full (type, frame, data, size, per_cu,\n-\t\t\t\t\tNULL, 0);\n+\t\t\t\t\tper_objfile, NULL, 0);\n }\n \n /* A specialization of dwarf_evaluate_loc_desc that is used by\n@@ -2603,7 +2612,8 @@ dwarf2_evaluate_property (const struct dynamic_prop *prop,\n \tif (data != NULL)\n \t  {\n \t    val = dwarf2_evaluate_loc_desc (baton->property_type, frame, data,\n-\t\t\t\t\t    size, baton->loclist.per_cu);\n+\t\t\t\t\t    size, baton->loclist.per_cu,\n+\t\t\t\t\t    baton->loclist.per_objfile);\n \t    if (!value_optimized_out (val))\n \t      {\n \t\t*value = value_as_address (val);\n@@ -2806,18 +2816,18 @@ class symbol_needs_eval_context : public dwarf_expr_context\n \n static enum symbol_needs_kind\n dwarf2_loc_desc_get_symbol_read_needs (const gdb_byte *data, size_t size,\n-\t\t\t\t       struct dwarf2_per_cu_data *per_cu)\n+\t\t\t\t       dwarf2_per_cu_data *per_cu,\n+\t\t\t\t       dwarf2_per_objfile *per_objfile)\n {\n   int in_reg;\n-  struct objfile *objfile = per_cu->objfile ();\n \n   scoped_value_mark free_values;\n \n-  symbol_needs_eval_context ctx (get_dwarf2_per_objfile (objfile));\n+  symbol_needs_eval_context ctx (per_objfile);\n \n   ctx.needs = SYMBOL_NEEDS_NONE;\n   ctx.per_cu = per_cu;\n-  ctx.gdbarch = objfile->arch ();\n+  ctx.gdbarch = per_objfile->objfile->arch ();\n   ctx.addr_size = per_cu->addr_size ();\n   ctx.ref_addr_size = per_cu->ref_addr_size ();\n \n@@ -3641,7 +3651,8 @@ locexpr_read_variable (struct symbol *symbol, struct frame_info *frame)\n   struct value *val;\n \n   val = dwarf2_evaluate_loc_desc (SYMBOL_TYPE (symbol), frame, dlbaton->data,\n-\t\t\t\t  dlbaton->size, dlbaton->per_cu);\n+\t\t\t\t  dlbaton->size, dlbaton->per_cu,\n+\t\t\t\t  dlbaton->per_objfile);\n \n   return val;\n }\n@@ -3670,7 +3681,8 @@ locexpr_get_symbol_read_needs (struct symbol *symbol)\n     = (struct dwarf2_locexpr_baton *) SYMBOL_LOCATION_BATON (symbol);\n \n   return dwarf2_loc_desc_get_symbol_read_needs (dlbaton->data, dlbaton->size,\n-\t\t\t\t\t\tdlbaton->per_cu);\n+\t\t\t\t\t\tdlbaton->per_cu,\n+\t\t\t\t\t\tdlbaton->per_objfile);\n }\n \n /* Return true if DATA points to the end of a piece.  END is one past\n@@ -4460,7 +4472,7 @@ loclist_read_variable (struct symbol *symbol, struct frame_info *frame)\n \n   data = dwarf2_find_location_expression (dlbaton, &size, pc);\n   val = dwarf2_evaluate_loc_desc (SYMBOL_TYPE (symbol), frame, data, size,\n-\t\t\t\t  dlbaton->per_cu);\n+\t\t\t\t  dlbaton->per_cu, dlbaton->per_objfile);\n \n   return val;\n }"
    },
    {
      "sha": "907455b72c1cd3c384c62d4f7047d13078d620f2",
      "filename": "gdb/dwarf2/loc.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9f47c7071654d8cee82ff91ec1e65d57bd78e77f/gdb/dwarf2/loc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9f47c7071654d8cee82ff91ec1e65d57bd78e77f/gdb/dwarf2/loc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.h?ref=9f47c7071654d8cee82ff91ec1e65d57bd78e77f",
      "patch": "@@ -61,7 +61,8 @@ struct value *dwarf2_evaluate_loc_desc (struct type *type,\n \t\t\t\t\tstruct frame_info *frame,\n \t\t\t\t\tconst gdb_byte *data,\n \t\t\t\t\tsize_t size,\n-\t\t\t\t\tstruct dwarf2_per_cu_data *per_cu);\n+\t\t\t\t\tdwarf2_per_cu_data *per_cu,\n+\t\t\t\t\tdwarf2_per_objfile *per_objfile);\n \n /* A chain of addresses that might be needed to resolve a dynamic\n    property.  */"
    },
    {
      "sha": "8d71cb41122568bca88680a44e5ca412077267da",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 3,
      "deletions": 16,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9f47c7071654d8cee82ff91ec1e65d57bd78e77f/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9f47c7071654d8cee82ff91ec1e65d57bd78e77f/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=9f47c7071654d8cee82ff91ec1e65d57bd78e77f",
      "patch": "@@ -10354,7 +10354,8 @@ dwarf2_compute_name (const char *name,\n \t\t\tv = dwarf2_evaluate_loc_desc (type, NULL,\n \t\t\t\t\t\t      baton->data,\n \t\t\t\t\t\t      baton->size,\n-\t\t\t\t\t\t      baton->per_cu);\n+\t\t\t\t\t\t      baton->per_cu,\n+\t\t\t\t\t\t      baton->per_objfile);\n \t\t      else if (bytes != NULL)\n \t\t\t{\n \t\t\t  v = allocate_value (type);\n@@ -13498,6 +13499,7 @@ read_call_site_scope (struct die_info *die, struct dwarf2_cu *cu)\n \t       sect_offset_str (die->sect_off), objfile_name (objfile));\n \n   call_site->per_cu = cu->per_cu;\n+  call_site->per_objfile = per_objfile;\n \n   for (child_die = die->child;\n        child_die && child_die->tag;\n@@ -23316,21 +23318,6 @@ dwarf2_symbol_mark_computed (const struct attribute *attr, struct symbol *sym,\n     }\n }\n \n-/* See read.h.  */\n-\n-struct objfile *\n-dwarf2_per_cu_data::objfile () const\n-{\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n-\n-  /* Return the master objfile, so that we can report and look up the\n-     correct file containing this variable.  */\n-  if (objfile->separate_debug_objfile_backlink)\n-    objfile = objfile->separate_debug_objfile_backlink;\n-\n-  return objfile;\n-}\n-\n /* Return comp_unit_head for PER_CU, either already available in PER_CU->CU\n    (CU_HEADERP is unused in such case) or prepare a temporary copy at\n    CU_HEADERP first.  */"
    },
    {
      "sha": "dda5ed71c4d3b5be01619962315be334de5a3e5b",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9f47c7071654d8cee82ff91ec1e65d57bd78e77f/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9f47c7071654d8cee82ff91ec1e65d57bd78e77f/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=9f47c7071654d8cee82ff91ec1e65d57bd78e77f",
      "patch": "@@ -491,11 +491,6 @@ struct dwarf2_per_cu_data\n     imported_symtabs = nullptr;\n   }\n \n-  /* Return the OBJFILE associated with this compilation unit.  If\n-     this compilation unit came from a separate debuginfo file, then\n-     the master objfile is returned.  */\n-  struct objfile *objfile () const;\n-\n   /* Return the address size given in the compilation unit header for\n      this CU.  */\n   int addr_size () const;"
    },
    {
      "sha": "47d79afe2e699ff5ab167086ec9d51b380e755b5",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9f47c7071654d8cee82ff91ec1e65d57bd78e77f/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9f47c7071654d8cee82ff91ec1e65d57bd78e77f/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=9f47c7071654d8cee82ff91ec1e65d57bd78e77f",
      "patch": "@@ -58,6 +58,8 @@ struct field;\n struct block;\n struct value_print_options;\n struct language_defn;\n+struct dwarf2_per_cu_data;\n+struct dwarf2_per_objfile;\n \n /* These declarations are DWARF-specific as some of the gdbtypes.h data types\n    are already DWARF-specific.  */\n@@ -1390,7 +1392,11 @@ struct call_site\n     /* * CU of the function where the call is located.  It gets used\n        for DWARF blocks execution in the parameter array below.  */\n \n-    struct dwarf2_per_cu_data *per_cu;\n+    dwarf2_per_cu_data *per_cu;\n+\n+    /* objfile of the function where the call is located.  */\n+\n+    dwarf2_per_objfile *per_objfile;\n \n     /* * Describe DW_TAG_call_site's DW_TAG_formal_parameter.  */\n "
    }
  ]
}