{
  "sha": "041d9819fb0d05f55d54e2d7880a63db9fa423cb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDQxZDk4MTlmYjBkMDVmNTVkNTRlMmQ3ODgwYTYzZGI5ZmE0MjNjYg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-08-09T22:26:48Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-08-09T22:26:48Z"
    },
    "message": "gdb: replace function pointer with `void *` data with function_view\n\nReplace the function pointer + `void *` parameters of\ndwarf2_fetch_die_loc_sect_off and dwarf2_fetch_die_loc_cu_off with a\nfunction_view parameter.  Change call sites to use a lambda function.\nThis improves type-safety, so reduces the chances of errors.\n\ngdb/ChangeLog:\n\n\t* read.h (dwarf2_fetch_die_loc_sect_off,\n\tdwarf2_fetch_die_loc_cu_off): Replace function pointer +\n\t`void *` parameter with function_view.\n\t* read.c (dwarf2_fetch_die_loc_sect_off,\n\tdwarf2_fetch_die_loc_cu_off): Likewise.\n\t* loc.c (get_frame_pc_for_per_cu_dwarf_call): Remove.\n\t(per_cu_dwarf_call): Adjust.\n\t(get_frame_address_in_block_wrapper): Remove.\n\t(indirect_synthetic_pointer): Adjust.\n\t(get_ax_pc): Remove.\n\t(dwarf2_compile_expr_to_ax): Adjust.\n\nChange-Id: Ic9b6ced0c4128f2b75ca62e0ed638b0962a22859",
    "tree": {
      "sha": "b3025209375196af78ae14ade1fc60582013f519",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b3025209375196af78ae14ade1fc60582013f519"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/041d9819fb0d05f55d54e2d7880a63db9fa423cb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/041d9819fb0d05f55d54e2d7880a63db9fa423cb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/041d9819fb0d05f55d54e2d7880a63db9fa423cb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/041d9819fb0d05f55d54e2d7880a63db9fa423cb/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0770687e1ee8205b656a71698e4680e1ef8d746f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0770687e1ee8205b656a71698e4680e1ef8d746f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0770687e1ee8205b656a71698e4680e1ef8d746f"
    }
  ],
  "stats": {
    "total": 81,
    "additions": 40,
    "deletions": 41
  },
  "files": [
    {
      "sha": "e875b44cb1db4bc3ff3c5841ac7f7e91e589d89b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/041d9819fb0d05f55d54e2d7880a63db9fa423cb/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/041d9819fb0d05f55d54e2d7880a63db9fa423cb/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=041d9819fb0d05f55d54e2d7880a63db9fa423cb",
      "patch": "@@ -1,3 +1,17 @@\n+2020-08-09  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* read.h (dwarf2_fetch_die_loc_sect_off,\n+\tdwarf2_fetch_die_loc_cu_off): Replace function pointer +\n+\t`void *` parameter with function_view.\n+\t* read.c (dwarf2_fetch_die_loc_sect_off,\n+\tdwarf2_fetch_die_loc_cu_off): Likewise.\n+\t* loc.c (get_frame_pc_for_per_cu_dwarf_call): Remove.\n+\t(per_cu_dwarf_call): Adjust.\n+\t(get_frame_address_in_block_wrapper): Remove.\n+\t(indirect_synthetic_pointer): Adjust.\n+\t(get_ax_pc): Remove.\n+\t(dwarf2_compile_expr_to_ax): Adjust.\n+\n 2020-08-08  Tom de Vries  <tdevries@suse.de>\n \n \tPR build/26344"
    },
    {
      "sha": "72cf9261e0ad267f4494d63b3e153dcc7b8e2b20",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 16,
      "deletions": 30,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/041d9819fb0d05f55d54e2d7880a63db9fa423cb/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/041d9819fb0d05f55d54e2d7880a63db9fa423cb/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=041d9819fb0d05f55d54e2d7880a63db9fa423cb",
      "patch": "@@ -600,23 +600,19 @@ func_get_frame_base_dwarf_block (struct symbol *framefunc, CORE_ADDR pc,\n \t   framefunc->natural_name ());\n }\n \n-static CORE_ADDR\n-get_frame_pc_for_per_cu_dwarf_call (void *baton)\n-{\n-  dwarf_expr_context *ctx = (dwarf_expr_context *) baton;\n-\n-  return ctx->get_frame_pc ();\n-}\n-\n static void\n per_cu_dwarf_call (struct dwarf_expr_context *ctx, cu_offset die_offset,\n \t\t   dwarf2_per_cu_data *per_cu, dwarf2_per_objfile *per_objfile)\n {\n   struct dwarf2_locexpr_baton block;\n \n+  auto get_frame_pc_from_ctx = [ctx] ()\n+    {\n+      return ctx->get_frame_pc ();\n+    };\n+\n   block = dwarf2_fetch_die_loc_cu_off (die_offset, per_cu, per_objfile,\n-\t\t\t\t       get_frame_pc_for_per_cu_dwarf_call,\n-\t\t\t\t       ctx);\n+\t\t\t\t       get_frame_pc_from_ctx);\n \n   /* DW_OP_call_ref is currently not supported.  */\n   gdb_assert (block.per_cu == per_cu);\n@@ -2001,14 +1997,6 @@ check_pieced_synthetic_pointer (const struct value *value, LONGEST bit_offset,\n   return 1;\n }\n \n-/* A wrapper function for get_frame_address_in_block.  */\n-\n-static CORE_ADDR\n-get_frame_address_in_block_wrapper (void *baton)\n-{\n-  return get_frame_address_in_block ((struct frame_info *) baton);\n-}\n-\n /* Fetch a DW_AT_const_value through a synthetic pointer.  */\n \n static struct value *\n@@ -2052,9 +2040,13 @@ indirect_synthetic_pointer (sect_offset die, LONGEST byte_offset,\n \t\t\t    bool resolve_abstract_p)\n {\n   /* Fetch the location expression of the DIE we're pointing to.  */\n+  auto get_frame_address_in_block_wrapper = [frame] ()\n+    {\n+     return get_frame_address_in_block (frame);\n+    };\n   struct dwarf2_locexpr_baton baton\n     = dwarf2_fetch_die_loc_sect_off (die, per_cu, per_objfile,\n-\t\t\t\t     get_frame_address_in_block_wrapper, frame,\n+\t\t\t\t     get_frame_address_in_block_wrapper,\n \t\t\t\t     resolve_abstract_p);\n \n   /* Get type of pointed-to DIE.  */\n@@ -2994,16 +2986,6 @@ access_memory (struct gdbarch *arch, struct agent_expr *expr, ULONGEST nbits)\n     }\n }\n \n-/* A helper function to return the frame's PC.  */\n-\n-static CORE_ADDR\n-get_ax_pc (void *baton)\n-{\n-  struct agent_expr *expr = (struct agent_expr *) baton;\n-\n-  return expr->scope;\n-}\n-\n /* Compile a DWARF location expression to an agent expression.\n    \n    EXPR is the agent expression we are building.\n@@ -3655,9 +3637,13 @@ dwarf2_compile_expr_to_ax (struct agent_expr *expr, struct axs_value *loc,\n \t    uoffset = extract_unsigned_integer (op_ptr, size, byte_order);\n \t    op_ptr += size;\n \n+\t    auto get_frame_pc_from_expr = [expr] ()\n+\t      {\n+\t\treturn expr->scope;\n+\t      };\n \t    cu_offset cuoffset = (cu_offset) uoffset;\n \t    block = dwarf2_fetch_die_loc_cu_off (cuoffset, per_cu, per_objfile,\n-\t\t\t\t\t\t get_ax_pc, expr);\n+\t\t\t\t\t\t get_frame_pc_from_expr);\n \n \t    /* DW_OP_call_ref is currently not supported.  */\n \t    gdb_assert (block.per_cu == per_cu);"
    },
    {
      "sha": "0ac8533263aaa8c26126c8f614f32462558b68b3",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/041d9819fb0d05f55d54e2d7880a63db9fa423cb/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/041d9819fb0d05f55d54e2d7880a63db9fa423cb/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=041d9819fb0d05f55d54e2d7880a63db9fa423cb",
      "patch": "@@ -22973,8 +22973,8 @@ struct dwarf2_locexpr_baton\n dwarf2_fetch_die_loc_sect_off (sect_offset sect_off,\n \t\t\t       dwarf2_per_cu_data *per_cu,\n \t\t\t       dwarf2_per_objfile *per_objfile,\n-\t\t\t       CORE_ADDR (*get_frame_pc) (void *baton),\n-\t\t\t       void *baton, bool resolve_abstract_p)\n+\t\t\t       gdb::function_view<CORE_ADDR ()> get_frame_pc,\n+\t\t\t       bool resolve_abstract_p)\n {\n   struct die_info *die;\n   struct attribute *attr;\n@@ -23003,7 +23003,7 @@ dwarf2_fetch_die_loc_sect_off (sect_offset sect_off,\n       && (per_objfile->per_bfd->abstract_to_concrete.find (die->sect_off)\n \t  != per_objfile->per_bfd->abstract_to_concrete.end ()))\n     {\n-      CORE_ADDR pc = (*get_frame_pc) (baton);\n+      CORE_ADDR pc = get_frame_pc ();\n       CORE_ADDR baseaddr = objfile->text_section_offset ();\n       struct gdbarch *gdbarch = objfile->arch ();\n \n@@ -23044,7 +23044,7 @@ dwarf2_fetch_die_loc_sect_off (sect_offset sect_off,\n   else if (attr->form_is_section_offset ())\n     {\n       struct dwarf2_loclist_baton loclist_baton;\n-      CORE_ADDR pc = (*get_frame_pc) (baton);\n+      CORE_ADDR pc = get_frame_pc ();\n       size_t size;\n \n       fill_in_loclist_baton (cu, &loclist_baton, attr);\n@@ -23077,13 +23077,12 @@ struct dwarf2_locexpr_baton\n dwarf2_fetch_die_loc_cu_off (cu_offset offset_in_cu,\n \t\t\t     dwarf2_per_cu_data *per_cu,\n \t\t\t     dwarf2_per_objfile *per_objfile,\n-\t\t\t     CORE_ADDR (*get_frame_pc) (void *baton),\n-\t\t\t     void *baton)\n+\t\t\t     gdb::function_view<CORE_ADDR ()> get_frame_pc)\n {\n   sect_offset sect_off = per_cu->sect_off + to_underlying (offset_in_cu);\n \n   return dwarf2_fetch_die_loc_sect_off (sect_off, per_cu, per_objfile,\n-\t\t\t\t\tget_frame_pc, baton);\n+\t\t\t\t\tget_frame_pc);\n }\n \n /* Write a constant of a given type as target-ordered bytes into"
    },
    {
      "sha": "fe5aab0e9a1fe657319fc637f895dc77188041ed",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/041d9819fb0d05f55d54e2d7880a63db9fa423cb/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/041d9819fb0d05f55d54e2d7880a63db9fa423cb/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=041d9819fb0d05f55d54e2d7880a63db9fa423cb",
      "patch": "@@ -28,6 +28,7 @@\n #include \"filename-seen-cache.h\"\n #include \"gdb_obstack.h\"\n #include \"gdbsupport/hash_enum.h\"\n+#include \"gdbsupport/function-view.h\"\n #include \"psympriv.h\"\n \n /* Hold 'maintenance (set|show) dwarf' commands.  */\n@@ -662,17 +663,16 @@ CORE_ADDR dwarf2_read_addr_index (dwarf2_per_cu_data *per_cu,\n struct dwarf2_locexpr_baton dwarf2_fetch_die_loc_sect_off\n   (sect_offset sect_off, dwarf2_per_cu_data *per_cu,\n    dwarf2_per_objfile *per_objfile,\n-   CORE_ADDR (*get_frame_pc) (void *baton),\n-   void *baton, bool resolve_abstract_p = false);\n+   gdb::function_view<CORE_ADDR ()> get_frame_pc,\n+   bool resolve_abstract_p = false);\n \n /* Like dwarf2_fetch_die_loc_sect_off, but take a CU\n    offset.  */\n \n struct dwarf2_locexpr_baton dwarf2_fetch_die_loc_cu_off\n   (cu_offset offset_in_cu, dwarf2_per_cu_data *per_cu,\n    dwarf2_per_objfile *per_objfile,\n-   CORE_ADDR (*get_frame_pc) (void *baton),\n-   void *baton);\n+   gdb::function_view<CORE_ADDR ()> get_frame_pc);\n \n /* If the DIE at SECT_OFF in PER_CU has a DW_AT_const_value, return a\n    pointer to the constant bytes and set LEN to the length of the"
    }
  ]
}