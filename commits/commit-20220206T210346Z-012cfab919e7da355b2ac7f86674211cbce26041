{
  "sha": "012cfab919e7da355b2ac7f86674211cbce26041",
  "node_id": "C_kwDOANOeidoAKDAxMmNmYWI5MTllN2RhMzU1YjJhYzdmODY2NzQyMTFjYmNlMjYwNDE",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-11-21T02:32:41Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2022-02-06T21:03:46Z"
    },
    "message": "gdb: remove SYMTAB_BLOCKVECTOR macro\n\nRemove the macro, replace with an equivalent method.\n\nChange-Id: Id6fe2a79c04bcd6c69ccaefb7a69bc06a476288c",
    "tree": {
      "sha": "da86dca9362d26fd408ce24b08dd8679a6c91769",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/da86dca9362d26fd408ce24b08dd8679a6c91769"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/012cfab919e7da355b2ac7f86674211cbce26041",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/012cfab919e7da355b2ac7f86674211cbce26041",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/012cfab919e7da355b2ac7f86674211cbce26041",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/012cfab919e7da355b2ac7f86674211cbce26041/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1ee2e9f9304d05f2962bbc4b83096b850fe4e433",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ee2e9f9304d05f2962bbc4b83096b850fe4e433",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1ee2e9f9304d05f2962bbc4b83096b850fe4e433"
    }
  ],
  "stats": {
    "total": 58,
    "additions": 32,
    "deletions": 26
  },
  "files": [
    {
      "sha": "0d5083f513bf058839b38e97b898c8ad65b9e5ba",
      "filename": "gdb/ada-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/012cfab919e7da355b2ac7f86674211cbce26041/gdb/ada-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/012cfab919e7da355b2ac7f86674211cbce26041/gdb/ada-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.y?ref=012cfab919e7da355b2ac7f86674211cbce26041",
      "patch": "@@ -1302,7 +1302,7 @@ block_lookup (const struct block *context, const char *raw_name)\n     symtab = NULL;\n \n   if (symtab != NULL)\n-    result = BLOCKVECTOR_BLOCK (SYMTAB_BLOCKVECTOR (symtab), STATIC_BLOCK);\n+    result = BLOCKVECTOR_BLOCK (symtab->blockvector (), STATIC_BLOCK);\n   else if (syms.empty () || SYMBOL_CLASS (syms[0].symbol) != LOC_BLOCK)\n     {\n       if (context == NULL)"
    },
    {
      "sha": "f3b8442b5508f21b1ebe6869a9a80dd3db1cfdcc",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/012cfab919e7da355b2ac7f86674211cbce26041/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/012cfab919e7da355b2ac7f86674211cbce26041/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=012cfab919e7da355b2ac7f86674211cbce26041",
      "patch": "@@ -4384,9 +4384,9 @@ cache_symbol (const char *name, domain_enum domain, struct symbol *sym,\n      the symbol is local or not, we check the block where we found it\n      against the global and static blocks of its associated symtab.  */\n   if (sym\n-      && BLOCKVECTOR_BLOCK (SYMTAB_BLOCKVECTOR (symbol_symtab (sym)),\n+      && BLOCKVECTOR_BLOCK (symbol_symtab (sym)->blockvector (),\n \t\t\t    GLOBAL_BLOCK) != block\n-      && BLOCKVECTOR_BLOCK (SYMTAB_BLOCKVECTOR (symbol_symtab (sym)),\n+      && BLOCKVECTOR_BLOCK (symbol_symtab (sym)->blockvector (),\n \t\t\t    STATIC_BLOCK) != block)\n     return;\n "
    },
    {
      "sha": "4b58ce0410021dfa73838cb50f5872e321ea03ac",
      "filename": "gdb/c-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/012cfab919e7da355b2ac7f86674211cbce26041/gdb/c-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/012cfab919e7da355b2ac7f86674211cbce26041/gdb/c-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.y?ref=012cfab919e7da355b2ac7f86674211cbce26041",
      "patch": "@@ -3109,7 +3109,7 @@ classify_name (struct parser_state *par_state, const struct block *block,\n \t  symtab = lookup_symtab (copy.c_str ());\n \t  if (symtab)\n \t    {\n-\t      yylval.bval = BLOCKVECTOR_BLOCK (SYMTAB_BLOCKVECTOR (symtab),\n+\t      yylval.bval = BLOCKVECTOR_BLOCK (symtab->blockvector (),\n \t\t\t\t\t       STATIC_BLOCK);\n \t      return FILENAME;\n \t    }"
    },
    {
      "sha": "af0699bed2d55472b3086c0048af6613ea8284c3",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/012cfab919e7da355b2ac7f86674211cbce26041/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/012cfab919e7da355b2ac7f86674211cbce26041/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=012cfab919e7da355b2ac7f86674211cbce26041",
      "patch": "@@ -1483,7 +1483,7 @@ patch_opaque_types (struct symtab *s)\n   struct symbol *real_sym;\n \n   /* Go through the per-file symbols only.  */\n-  b = BLOCKVECTOR_BLOCK (SYMTAB_BLOCKVECTOR (s), STATIC_BLOCK);\n+  b = BLOCKVECTOR_BLOCK (s->blockvector (), STATIC_BLOCK);\n   ALL_BLOCK_SYMBOLS (b, iter, real_sym)\n     {\n       /* Find completed typedefs to use to fix opaque ones."
    },
    {
      "sha": "692e9906fd7d2a577cad12bc89f3292a823be5c5",
      "filename": "gdb/compile/compile-object-load.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/012cfab919e7da355b2ac7f86674211cbce26041/gdb/compile/compile-object-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/012cfab919e7da355b2ac7f86674211cbce26041/gdb/compile/compile-object-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-object-load.c?ref=012cfab919e7da355b2ac7f86674211cbce26041",
      "patch": "@@ -421,7 +421,7 @@ get_out_value_type (struct symbol *func_sym, struct objfile *objfile,\n   lookup_name_info func_matcher (GCC_FE_WRAPPER_FUNCTION,\n \t\t\t\t symbol_name_match_type::SEARCH_NAME);\n \n-  bv = SYMTAB_BLOCKVECTOR (func_sym->owner.symtab);\n+  bv = func_sym->owner.symtab->blockvector ();\n   nblocks = BLOCKVECTOR_NBLOCKS (bv);\n \n   gdb_ptr_type_sym = NULL;"
    },
    {
      "sha": "5ab4e48f30619b6daa0a4c243b2f31c204232fc0",
      "filename": "gdb/compile/compile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/012cfab919e7da355b2ac7f86674211cbce26041/gdb/compile/compile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/012cfab919e7da355b2ac7f86674211cbce26041/gdb/compile/compile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile.c?ref=012cfab919e7da355b2ac7f86674211cbce26041",
      "patch": "@@ -484,7 +484,7 @@ get_expr_block_and_pc (CORE_ADDR *pc)\n       struct symtab_and_line cursal = get_current_source_symtab_and_line ();\n \n       if (cursal.symtab)\n-\tblock = BLOCKVECTOR_BLOCK (SYMTAB_BLOCKVECTOR (cursal.symtab),\n+\tblock = BLOCKVECTOR_BLOCK (cursal.symtab->blockvector (),\n \t\t\t\t   STATIC_BLOCK);\n       if (block != NULL)\n \t*pc = BLOCK_ENTRY_PC (block);"
    },
    {
      "sha": "e2a90e580166469cc4a4b0c89ef6e058493e2f8c",
      "filename": "gdb/guile/scm-symtab.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/012cfab919e7da355b2ac7f86674211cbce26041/gdb/guile/scm-symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/012cfab919e7da355b2ac7f86674211cbce26041/gdb/guile/scm-symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-symtab.c?ref=012cfab919e7da355b2ac7f86674211cbce26041",
      "patch": "@@ -363,7 +363,7 @@ gdbscm_symtab_global_block (SCM self)\n   const struct blockvector *blockvector;\n   const struct block *block;\n \n-  blockvector = SYMTAB_BLOCKVECTOR (symtab);\n+  blockvector = symtab->blockvector ();\n   block = BLOCKVECTOR_BLOCK (blockvector, GLOBAL_BLOCK);\n \n   return bkscm_scm_from_block (block, SYMTAB_OBJFILE (symtab));\n@@ -381,7 +381,7 @@ gdbscm_symtab_static_block (SCM self)\n   const struct blockvector *blockvector;\n   const struct block *block;\n \n-  blockvector = SYMTAB_BLOCKVECTOR (symtab);\n+  blockvector = symtab->blockvector ();\n   block = BLOCKVECTOR_BLOCK (blockvector, STATIC_BLOCK);\n \n   return bkscm_scm_from_block (block, SYMTAB_OBJFILE (symtab));"
    },
    {
      "sha": "31e3b36d3aa911377a42202ea26fbd0fd6660925",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/012cfab919e7da355b2ac7f86674211cbce26041/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/012cfab919e7da355b2ac7f86674211cbce26041/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=012cfab919e7da355b2ac7f86674211cbce26041",
      "patch": "@@ -1190,10 +1190,10 @@ iterate_over_all_matching_symtabs\n \t\t  int i;\n \n \t\t  for (i = FIRST_LOCAL_BLOCK;\n-\t\t       i < BLOCKVECTOR_NBLOCKS (SYMTAB_BLOCKVECTOR (symtab));\n+\t\t       i < BLOCKVECTOR_NBLOCKS (symtab->blockvector ());\n \t\t       i++)\n \t\t    {\n-\t\t      block = BLOCKVECTOR_BLOCK (SYMTAB_BLOCKVECTOR (symtab), i);\n+\t\t      block = BLOCKVECTOR_BLOCK (symtab->blockvector (), i);\n \t\t      state->language->iterate_over_symbols\n \t\t\t(block, lookup_name, name_domain,\n \t\t\t [&] (block_symbol *bsym)\n@@ -1232,7 +1232,7 @@ iterate_over_file_blocks\n {\n   const struct block *block;\n \n-  for (block = BLOCKVECTOR_BLOCK (SYMTAB_BLOCKVECTOR (symtab), STATIC_BLOCK);\n+  for (block = BLOCKVECTOR_BLOCK (symtab->blockvector (), STATIC_BLOCK);\n        block != NULL;\n        block = BLOCK_SUPERBLOCK (block))\n     current_language->iterate_over_symbols (block, name, domain, callback);"
    },
    {
      "sha": "b98ac8fe7996acbaa1b54d4a429c02264140e3b2",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/012cfab919e7da355b2ac7f86674211cbce26041/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/012cfab919e7da355b2ac7f86674211cbce26041/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=012cfab919e7da355b2ac7f86674211cbce26041",
      "patch": "@@ -628,7 +628,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n       break;\n \n     case stGlobal:\t\t/* External symbol, goes into global block.  */\n-      b = BLOCKVECTOR_BLOCK (SYMTAB_BLOCKVECTOR (top_stack->cur_st),\n+      b = BLOCKVECTOR_BLOCK (top_stack->cur_st->blockvector (),\n \t\t\t     GLOBAL_BLOCK);\n       s = new_symbol (name);\n       SET_SYMBOL_VALUE_ADDRESS (s, (CORE_ADDR) sh->value);\n@@ -771,7 +771,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n       if (sh->st == stProc)\n \t{\n \t  const struct blockvector *bv\n-\t    = SYMTAB_BLOCKVECTOR (top_stack->cur_st);\n+\t    = top_stack->cur_st->blockvector ();\n \n \t  /* The next test should normally be true, but provides a\n \t     hook for nested functions (which we don't want to make\n@@ -1144,7 +1144,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \t{\n \t  /* Finished with procedure */\n \t  const struct blockvector *bv\n-\t    = SYMTAB_BLOCKVECTOR (top_stack->cur_st);\n+\t    = top_stack->cur_st->blockvector ();\n \t  struct mdebug_extra_func_info *e;\n \t  struct block *cblock = top_stack->cur_block;\n \t  struct type *ftype = top_stack->cur_type;\n@@ -4186,7 +4186,7 @@ mdebug_expand_psymtab (legacy_psymtab *pst, struct objfile *objfile)\n \t FIXME, Maybe quit once we have found the right number of ext's?  */\n       top_stack->cur_st = cust->primary_filetab ();\n       top_stack->cur_block\n-\t= BLOCKVECTOR_BLOCK (SYMTAB_BLOCKVECTOR (top_stack->cur_st),\n+\t= BLOCKVECTOR_BLOCK (top_stack->cur_st->blockvector (),\n \t\t\t     GLOBAL_BLOCK);\n       top_stack->blocktype = stFile;\n \n@@ -4496,13 +4496,13 @@ add_block (struct block *b, struct symtab *s)\n {\n   /* Cast away \"const\", but that's ok because we're building the\n      symtab and blockvector here.  */\n-  struct blockvector *bv = (struct blockvector *) SYMTAB_BLOCKVECTOR (s);\n+  struct blockvector *bv = (struct blockvector *) s->blockvector ();\n \n   bv = (struct blockvector *) xrealloc ((void *) bv,\n \t\t\t\t\t(sizeof (struct blockvector)\n \t\t\t\t\t + BLOCKVECTOR_NBLOCKS (bv)\n \t\t\t\t\t * sizeof (bv->block)));\n-  if (bv != SYMTAB_BLOCKVECTOR (s))\n+  if (bv != s->blockvector ())\n     s->compunit ()->set_blockvector (bv);\n \n   BLOCKVECTOR_BLOCK (bv, BLOCKVECTOR_NBLOCKS (bv)++) = b;\n@@ -4566,7 +4566,7 @@ sort_blocks (struct symtab *s)\n {\n   /* We have to cast away const here, but this is ok because we're\n      constructing the blockvector in this code.  */\n-  struct blockvector *bv = (struct blockvector *) SYMTAB_BLOCKVECTOR (s);\n+  struct blockvector *bv = (struct blockvector *) s->blockvector ();\n \n   if (BLOCKVECTOR_NBLOCKS (bv) <= FIRST_LOCAL_BLOCK)\n     {"
    },
    {
      "sha": "10738d073f6ec61e61039c4c4b76d2e648ca4801",
      "filename": "gdb/p-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/012cfab919e7da355b2ac7f86674211cbce26041/gdb/p-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/012cfab919e7da355b2ac7f86674211cbce26041/gdb/p-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-exp.y?ref=012cfab919e7da355b2ac7f86674211cbce26041",
      "patch": "@@ -619,7 +619,7 @@ block\t:\tBLOCKNAME\n \t\t\t      struct symtab *tem =\n \t\t\t\t  lookup_symtab (copy.c_str ());\n \t\t\t      if (tem)\n-\t\t\t\t$$ = BLOCKVECTOR_BLOCK (SYMTAB_BLOCKVECTOR (tem),\n+\t\t\t\t$$ = BLOCKVECTOR_BLOCK (tem->blockvector (),\n \t\t\t\t\t\t\tSTATIC_BLOCK);\n \t\t\t      else\n \t\t\t\terror (_(\"No file or function \\\"%s\\\".\"),"
    },
    {
      "sha": "23f0e66bf275fe5699cfc5a673735e369a732e89",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/012cfab919e7da355b2ac7f86674211cbce26041/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/012cfab919e7da355b2ac7f86674211cbce26041/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=012cfab919e7da355b2ac7f86674211cbce26041",
      "patch": "@@ -462,7 +462,7 @@ parse_exp_in_context (const char **stringptr, CORE_ADDR pc,\n       struct symtab_and_line cursal = get_current_source_symtab_and_line ();\n       if (cursal.symtab)\n \texpression_context_block\n-\t  = BLOCKVECTOR_BLOCK (SYMTAB_BLOCKVECTOR (cursal.symtab),\n+\t  = BLOCKVECTOR_BLOCK (cursal.symtab->blockvector (),\n \t\t\t       STATIC_BLOCK);\n       if (expression_context_block)\n \texpression_context_pc = BLOCK_ENTRY_PC (expression_context_block);"
    },
    {
      "sha": "33657f1e6e435249f1ddcb3adc6cb0ca7c0eba8a",
      "filename": "gdb/python/py-symtab.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/012cfab919e7da355b2ac7f86674211cbce26041/gdb/python/py-symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/012cfab919e7da355b2ac7f86674211cbce26041/gdb/python/py-symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-symtab.c?ref=012cfab919e7da355b2ac7f86674211cbce26041",
      "patch": "@@ -181,7 +181,7 @@ stpy_global_block (PyObject *self, PyObject *args)\n \n   STPY_REQUIRE_VALID (self, symtab);\n \n-  blockvector = SYMTAB_BLOCKVECTOR (symtab);\n+  blockvector = symtab->blockvector ();\n   block = BLOCKVECTOR_BLOCK (blockvector, GLOBAL_BLOCK);\n   return block_to_block_object (block, SYMTAB_OBJFILE (symtab));\n }\n@@ -197,7 +197,7 @@ stpy_static_block (PyObject *self, PyObject *args)\n \n   STPY_REQUIRE_VALID (self, symtab);\n \n-  blockvector = SYMTAB_BLOCKVECTOR (symtab);\n+  blockvector = symtab->blockvector ();\n   block = BLOCKVECTOR_BLOCK (blockvector, STATIC_BLOCK);\n   return block_to_block_object (block, SYMTAB_OBJFILE (symtab));\n }"
    },
    {
      "sha": "3f5f840fbe7fdd895b8b44a308b6abdacdc86bdc",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/012cfab919e7da355b2ac7f86674211cbce26041/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/012cfab919e7da355b2ac7f86674211cbce26041/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=012cfab919e7da355b2ac7f86674211cbce26041",
      "patch": "@@ -278,7 +278,7 @@ dump_symtab_1 (struct symtab *symtab, struct ui_file *outfile)\n   if (is_main_symtab_of_compunit_symtab (symtab))\n     {\n       fprintf_filtered (outfile, \"\\nBlockvector:\\n\\n\");\n-      bv = SYMTAB_BLOCKVECTOR (symtab);\n+      bv = symtab->blockvector ();\n       len = BLOCKVECTOR_NBLOCKS (bv);\n       for (i = 0; i < len; i++)\n \t{"
    },
    {
      "sha": "1935113336a8977ba9b6a91dc03184eb6451a430",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/012cfab919e7da355b2ac7f86674211cbce26041/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/012cfab919e7da355b2ac7f86674211cbce26041/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=012cfab919e7da355b2ac7f86674211cbce26041",
      "patch": "@@ -1403,6 +1403,8 @@ struct symtab\n     m_language = language;\n   }\n \n+  const struct blockvector *blockvector () const;\n+\n   /* Unordered chain of all filetabs in the compunit,  with the exception\n      that the \"main\" source file is the first entry in the list.  */\n \n@@ -1435,8 +1437,6 @@ struct symtab\n \n using symtab_range = next_range<symtab>;\n \n-#define SYMTAB_BLOCKVECTOR(symtab) \\\n-  (symtab->compunit ()->blockvector ())\n #define SYMTAB_OBJFILE(symtab) \\\n   (symtab->compunit ()->objfile ())\n #define SYMTAB_PSPACE(symtab) (SYMTAB_OBJFILE (symtab)->pspace)\n@@ -1683,6 +1683,12 @@ struct compunit_symtab\n \n using compunit_symtab_range = next_range<compunit_symtab>;\n \n+inline const struct blockvector *\n+symtab::blockvector () const\n+{\n+  return this->compunit ()->blockvector ();\n+}\n+\n /* Return the language of CUST.  */\n \n extern enum language compunit_language (const struct compunit_symtab *cust);"
    }
  ]
}