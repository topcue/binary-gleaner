{
  "sha": "dcce7ec41082666e51e39480e2c4037124e1e1b5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGNjZTdlYzQxMDgyNjY2ZTUxZTM5NDgwZTJjNDAzNzEyNGUxZTFiNQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-07-04T18:31:18Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-07-17T16:41:42Z"
    },
    "message": "Pass file_and_directory through DWARF line-decoding code\n\nThis patch removes the redundant \"comp_unit\" parameter from\ncompute_include_file_name, and arranges to pass a file_and_directory\nobject from the readers down to this function.  It also changes the\npartial symtab reader to use find_file_and_directory, rather than\nreimplement this functionality by hand.",
    "tree": {
      "sha": "d5ce473d0191b5a3114cee727b49e8ebbd3eb6d4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d5ce473d0191b5a3114cee727b49e8ebbd3eb6d4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dcce7ec41082666e51e39480e2c4037124e1e1b5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dcce7ec41082666e51e39480e2c4037124e1e1b5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dcce7ec41082666e51e39480e2c4037124e1e1b5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dcce7ec41082666e51e39480e2c4037124e1e1b5/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ae9a5dd6ae1245163c367aded91bde66e45bb4b0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ae9a5dd6ae1245163c367aded91bde66e45bb4b0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ae9a5dd6ae1245163c367aded91bde66e45bb4b0"
    }
  ],
  "stats": {
    "total": 57,
    "additions": 25,
    "deletions": 32
  },
  "files": [
    {
      "sha": "95246cbd02335be7a25813beee849099233d3d2a",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 25,
      "deletions": 32,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dcce7ec41082666e51e39480e2c4037124e1e1b5/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dcce7ec41082666e51e39480e2c4037124e1e1b5/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=dcce7ec41082666e51e39480e2c4037124e1e1b5",
      "patch": "@@ -1192,7 +1192,9 @@ static struct die_info *die_specification (struct die_info *die,\n static line_header_up dwarf_decode_line_header (sect_offset sect_off,\n \t\t\t\t\t\tstruct dwarf2_cu *cu);\n \n-static void dwarf_decode_lines (struct line_header *, const char *,\n+struct file_and_directory;\n+static void dwarf_decode_lines (struct line_header *,\n+\t\t\t\tconst file_and_directory &,\n \t\t\t\tstruct dwarf2_cu *, dwarf2_psymtab *,\n \t\t\t\tCORE_ADDR, int decode_mapping);\n \n@@ -5728,6 +5730,7 @@ dwarf2_create_include_psymtab (dwarf2_per_bfd *per_bfd,\n static void\n dwarf2_build_include_psymtabs (struct dwarf2_cu *cu,\n \t\t\t       struct die_info *die,\n+\t\t\t       const file_and_directory &fnd,\n \t\t\t       dwarf2_psymtab *pst)\n {\n   line_header_up lh;\n@@ -5743,7 +5746,7 @@ dwarf2_build_include_psymtabs (struct dwarf2_cu *cu,\n      that we pass in the raw text_low here; that is ok because we're\n      only decoding the line table to make include partial symtabs, and\n      so the addresses aren't really used.  */\n-  dwarf_decode_lines (lh.get (), pst->dirname, cu, pst,\n+  dwarf_decode_lines (lh.get (), fnd, cu, pst,\n \t\t      pst->raw_text_low (), 1);\n }\n \n@@ -6894,7 +6897,6 @@ process_psymtab_comp_unit_reader (const struct die_reader_specs *reader,\n   CORE_ADDR best_lowpc = 0, best_highpc = 0;\n   dwarf2_psymtab *pst;\n   enum pc_bounds_kind cu_bounds_kind;\n-  const char *filename;\n \n   gdb_assert (! per_cu->is_debug_types);\n \n@@ -6903,18 +6905,16 @@ process_psymtab_comp_unit_reader (const struct die_reader_specs *reader,\n   /* Allocate a new partial symbol table structure.  */\n   gdb::unique_xmalloc_ptr<char> debug_filename;\n   static const char artificial[] = \"<artificial>\";\n-  filename = dwarf2_string_attr (comp_unit_die, DW_AT_name, cu);\n-  if (filename == NULL)\n-    filename = \"\";\n-  else if (strcmp (filename, artificial) == 0)\n+  file_and_directory fnd = find_file_and_directory (comp_unit_die, cu);\n+  if (strcmp (fnd.name, artificial) == 0)\n     {\n       debug_filename.reset (concat (artificial, \"@\",\n \t\t\t\t    sect_offset_str (per_cu->sect_off),\n \t\t\t\t    (char *) NULL));\n-      filename = debug_filename.get ();\n+      fnd.name = debug_filename.get ();\n     }\n \n-  pst = create_partial_symtab (per_cu, per_objfile, filename);\n+  pst = create_partial_symtab (per_cu, per_objfile, fnd.name);\n \n   /* This must be done before calling dwarf2_build_include_psymtabs.  */\n   pst->dirname = dwarf2_string_attr (comp_unit_die, DW_AT_comp_dir, cu);\n@@ -7000,7 +7000,7 @@ process_psymtab_comp_unit_reader (const struct die_reader_specs *reader,\n \n   /* Get the list of files included in the current compilation unit,\n      and build a psymtab for each of them.  */\n-  dwarf2_build_include_psymtabs (cu, comp_unit_die, pst);\n+  dwarf2_build_include_psymtabs (cu, comp_unit_die, fnd, pst);\n \n   dwarf_read_debug_printf (\"Psymtab for %s unit @%s: %s - %s\"\n \t\t\t   \", %d global, %d static syms\",\n@@ -10414,7 +10414,7 @@ find_file_and_directory (struct die_info *die, struct dwarf2_cu *cu)\n \n static void\n handle_DW_AT_stmt_list (struct die_info *die, struct dwarf2_cu *cu,\n-\t\t\tconst char *comp_dir, CORE_ADDR lowpc) /* ARI: editCase function */\n+\t\t\tconst file_and_directory &fnd, CORE_ADDR lowpc) /* ARI: editCase function */\n {\n   dwarf2_per_objfile *per_objfile = cu->per_objfile;\n   struct attribute *attr;\n@@ -10502,7 +10502,7 @@ handle_DW_AT_stmt_list (struct die_info *die, struct dwarf2_cu *cu,\n       gdb_assert (die->tag != DW_TAG_partial_unit);\n     }\n   decode_mapping = (die->tag != DW_TAG_partial_unit);\n-  dwarf_decode_lines (cu->line_header, comp_dir, cu, NULL, lowpc,\n+  dwarf_decode_lines (cu->line_header, fnd, cu, nullptr, lowpc,\n \t\t      decode_mapping);\n \n }\n@@ -10543,7 +10543,7 @@ read_file_scope (struct die_info *die, struct dwarf2_cu *cu)\n   /* Decode line number information if present.  We do this before\n      processing child DIEs, so that the line header table is available\n      for DW_AT_decl_file.  */\n-  handle_DW_AT_stmt_list (die, cu, fnd.comp_dir, lowpc);\n+  handle_DW_AT_stmt_list (die, cu, fnd, lowpc);\n \n   /* Process all dies in compilation unit.  */\n   if (die->child != NULL)\n@@ -20607,7 +20607,6 @@ dwarf_decode_line_header (sect_offset sect_off, struct dwarf2_cu *cu)\n \n /* Subroutine of dwarf_decode_lines to simplify it.\n    Return the file name for the given file_entry.\n-   COMP_DIR is the compilation directory (DW_AT_comp_dir) or NULL if unknown.\n    CU_INFO describes the CU's DW_AT_name and DW_AT_comp_dir.\n    If space for the result is malloc'd, *NAME_HOLDER will be set.\n    Returns NULL if FILE_INDEX should be ignored, i.e., it is\n@@ -20616,7 +20615,6 @@ dwarf_decode_line_header (sect_offset sect_off, struct dwarf2_cu *cu)\n static const char *\n compute_include_file_name (const struct line_header *lh, const file_entry &fe,\n \t\t\t   const file_and_directory &cu_info,\n-\t\t\t   const char *comp_dir,\n \t\t\t   gdb::unique_xmalloc_ptr<char> *name_holder)\n {\n   const char *include_name = fe.name;\n@@ -20626,7 +20624,7 @@ compute_include_file_name (const struct line_header *lh, const file_entry &fe,\n \n   gdb::unique_xmalloc_ptr<char> hold_compare;\n   if (!IS_ABSOLUTE_PATH (include_name)\n-      && (dir_name != NULL || comp_dir != NULL))\n+      && (dir_name != NULL || cu_info.comp_dir != NULL))\n     {\n       /* Avoid creating a duplicate name for CU_INFO.\n \t We do this by comparing INCLUDE_NAME and CU_INFO.\n@@ -20656,9 +20654,9 @@ compute_include_file_name (const struct line_header *lh, const file_entry &fe,\n \t  include_name = name_holder->get ();\n \t  include_name_to_compare = include_name;\n \t}\n-      if (!IS_ABSOLUTE_PATH (include_name) && comp_dir != NULL)\n+      if (!IS_ABSOLUTE_PATH (include_name) && cu_info.comp_dir != nullptr)\n \t{\n-\t  hold_compare.reset (concat (comp_dir, SLASH_STRING,\n+\t  hold_compare.reset (concat (cu_info.comp_dir, SLASH_STRING,\n \t\t\t\t      include_name, (char *) NULL));\n \t  include_name_to_compare = hold_compare.get ();\n \t}\n@@ -21344,16 +21342,15 @@ dwarf_decode_lines_1 (struct line_header *lh, struct dwarf2_cu *cu,\n       the list of files included by the unit represented by PST, and\n       builds all the associated partial symbol tables.\n \n-   COMP_DIR is the compilation directory (DW_AT_comp_dir) or NULL if unknown.\n+   FND holds the CU file name and directory, if known.\n    It is used for relative paths in the line table.\n-   NOTE: When processing partial symtabs (pst != NULL),\n-   comp_dir == pst->dirname.\n \n-   NOTE: It is important that psymtabs have the same file name (via strcmp)\n-   as the corresponding symtab.  Since COMP_DIR is not used in the name of the\n-   symtab we don't use it in the name of the psymtabs we create.\n-   E.g. expand_line_sal requires this when finding psymtabs to expand.\n-   A good testcase for this is mb-inline.exp.\n+   NOTE: It is important that psymtabs have the same file name (via\n+   strcmp) as the corresponding symtab.  Since the directory is not\n+   used in the name of the symtab we don't use it in the name of the\n+   psymtabs we create.  E.g. expand_line_sal requires this when\n+   finding psymtabs to expand.  A good testcase for this is\n+   mb-inline.exp.\n \n    LOWPC is the lowest address in CU (or 0 if not known).\n \n@@ -21362,7 +21359,7 @@ dwarf_decode_lines_1 (struct line_header *lh, struct dwarf2_cu *cu,\n    table is read in.  */\n \n static void\n-dwarf_decode_lines (struct line_header *lh, const char *comp_dir,\n+dwarf_decode_lines (struct line_header *lh, const file_and_directory &fnd,\n \t\t    struct dwarf2_cu *cu, dwarf2_psymtab *pst,\n \t\t    CORE_ADDR lowpc, int decode_mapping)\n {\n@@ -21376,16 +21373,12 @@ dwarf_decode_lines (struct line_header *lh, const char *comp_dir,\n     {\n       /* Now that we're done scanning the Line Header Program, we can\n \t create the psymtab of each included file.  */\n-      file_and_directory fnd;\n-      fnd.name = pst->filename;\n-      fnd.comp_dir = pst->dirname;\n       for (auto &file_entry : lh->file_names ())\n \tif (file_entry.included_p)\n \t  {\n \t    gdb::unique_xmalloc_ptr<char> name_holder;\n \t    const char *include_name =\n-\t      compute_include_file_name (lh, file_entry, fnd,\n-\t\t\t\t\t comp_dir, &name_holder);\n+\t      compute_include_file_name (lh, file_entry, fnd, &name_holder);\n \t    if (include_name != NULL)\n \t      dwarf2_create_include_psymtab\n \t\t(cu->per_objfile->per_bfd, include_name, pst,"
    }
  ]
}