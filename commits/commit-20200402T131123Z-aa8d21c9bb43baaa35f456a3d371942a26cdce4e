{
  "sha": "aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWE4ZDIxYzliYjQzYmFhYTM1ZjQ1NmEzZDM3MTk0MmEyNmNkY2U0ZQ==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:23Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:23Z"
    },
    "message": "gdbserver/linux-low: turn 'regs_info' into a method\n\ngdbserver/ChangeLog:\n2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn the 'regs_info' linux target op into a method of\n\tlinux_process_target.\n\n\t* linux-low.h (struct linux_target_ops) <regs_info>: Remove.\n\t(class linux_process_target) <get_regs_info>: Define.\n\n\tUpdate the callers below.\n\n\t* linux-low.cc (linux_process_target::fetch_registers)\n\t(linux_process_target::store_registers)\n\t* proc-service.cc (gregset_info)\n\n\t* linux-x86-low.cc (class x86_target) <get_regs_info>: Declare.\n\t(x86_linux_regs_info): Turn into ...\n\t(x86_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-aarch64-low.cc (class aarch64_target) <get_regs_info>:\n\tDeclare.\n\t(aarch64_regs_info): Turn into ...\n\t(aarch64_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-arm-low.cc (class arm_target) <get_regs_info>: Declare.\n\t(arm_regs_info): Turn into ...\n\t(arm_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-bfin-low.cc (class bfin_target) <get_regs_info>: Declare.\n\t(bfin_regs_info): Turn into ...\n\t(bfin_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-cris-low.cc (class cris_target) <get_regs_info>: Declare.\n\t(cris_regs_info): Turn into ...\n\t(cris_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-crisv32-low.cc (class crisv32_target) <get_regs_info>:\n\tDeclare.\n\t(crisv32_regs_info): Turn into ...\n\t(crisv32_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-ia64-low.cc (class ia64_target) <get_regs_info>: Declare.\n\t(ia64_regs_info): Turn into ...\n\t(ia64_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-m32r-low.cc (class m32r_target) <get_regs_info>: Declare.\n\t(m32r_regs_info): Turn into ...\n\t(m32r_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-m68k-low.cc (class m68k_target) <get_regs_info>: Declare.\n\t(m68k_regs_info): Turn into ...\n\t(m68k_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-mips-low.cc (class mips_target) <get_regs_info>: Declare.\n\t(mips_regs_info): Turn into ...\n\t(mips_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.\n\t(get_usrregs_info): Update the call to the op.\n\t* linux-nios2-low.cc (class nios2_target) <get_regs_info>: Declare.\n\t(nios2_regs_info): Turn into ...\n\t(nios2_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-ppc-low.cc (class ppc_target) <get_regs_info>: Declare.\n\t(ppc_regs_info): Turn into ...\n\t(ppc_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-riscv-low.cc (class riscv_target) <get_regs_info>: Declare.\n\t(riscv_regs_info): Turn into ...\n\t(riscv_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-s390-low.cc (class s390_target) <get_regs_info>: Declare.\n\t(s390_regs_info): Turn into ...\n\t(s390_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.\n\t(s390_collect_ptrace_register)\n\t(s390_supply_ptrace_register)\n\t(s390_fill_gregset): Update the call to the op.\n\t* linux-sh-low.cc (class sh_target) <get_regs_info>: Declare.\n\t(sh_regs_info): Turn into ...\n\t(sh_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-sparc-low.cc (class sparc_target) <get_regs_info>: Declare.\n\t(sparc_regs_info): Turn into ...\n\t(sparc_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-tic6x-low.cc (class tic6x_target) <get_regs_info>: Declare.\n\t(tic6x_regs_info): Turn into ...\n\t(tic6x_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-tile-low.cc (class tile_target) <get_regs_info>: Declare.\n\t(tile_regs_info): Turn into ...\n\t(tile_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-xtensa-low.cc (class xtensa_target) <get_regs_info>:\n\tDeclare.\n\t(xtensa_regs_info): Turn into ...\n\t(xtensa_target::get_regs_info): ...this.\n\t(the_low_target): Remove the op field.",
    "tree": {
      "sha": "5314e7b7f95e5c9a7ed2947dbfcccabfbf0fbba9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5314e7b7f95e5c9a7ed2947dbfcccabfbf0fbba9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "797bcff595c5e161b333077299fcaca19bb4fd17",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/797bcff595c5e161b333077299fcaca19bb4fd17",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/797bcff595c5e161b333077299fcaca19bb4fd17"
    }
  ],
  "stats": {
    "total": 315,
    "additions": 217,
    "deletions": 98
  },
  "files": [
    {
      "sha": "bbfc628a3681ddf812f59841d43c57f70a583f5b",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 98,
      "deletions": 0,
      "changes": 98,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -1,3 +1,101 @@\n+2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn the 'regs_info' linux target op into a method of\n+\tlinux_process_target.\n+\n+\t* linux-low.h (struct linux_target_ops) <regs_info>: Remove.\n+\t(class linux_process_target) <get_regs_info>: Define.\n+\n+\tUpdate the callers below.\n+\n+\t* linux-low.cc (linux_process_target::fetch_registers)\n+\t(linux_process_target::store_registers)\n+\t* proc-service.cc (gregset_info)\n+\n+\t* linux-x86-low.cc (class x86_target) <get_regs_info>: Declare.\n+\t(x86_linux_regs_info): Turn into ...\n+\t(x86_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-aarch64-low.cc (class aarch64_target) <get_regs_info>:\n+\tDeclare.\n+\t(aarch64_regs_info): Turn into ...\n+\t(aarch64_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-arm-low.cc (class arm_target) <get_regs_info>: Declare.\n+\t(arm_regs_info): Turn into ...\n+\t(arm_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-bfin-low.cc (class bfin_target) <get_regs_info>: Declare.\n+\t(bfin_regs_info): Turn into ...\n+\t(bfin_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-cris-low.cc (class cris_target) <get_regs_info>: Declare.\n+\t(cris_regs_info): Turn into ...\n+\t(cris_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-crisv32-low.cc (class crisv32_target) <get_regs_info>:\n+\tDeclare.\n+\t(crisv32_regs_info): Turn into ...\n+\t(crisv32_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-ia64-low.cc (class ia64_target) <get_regs_info>: Declare.\n+\t(ia64_regs_info): Turn into ...\n+\t(ia64_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-m32r-low.cc (class m32r_target) <get_regs_info>: Declare.\n+\t(m32r_regs_info): Turn into ...\n+\t(m32r_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-m68k-low.cc (class m68k_target) <get_regs_info>: Declare.\n+\t(m68k_regs_info): Turn into ...\n+\t(m68k_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-mips-low.cc (class mips_target) <get_regs_info>: Declare.\n+\t(mips_regs_info): Turn into ...\n+\t(mips_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\t(get_usrregs_info): Update the call to the op.\n+\t* linux-nios2-low.cc (class nios2_target) <get_regs_info>: Declare.\n+\t(nios2_regs_info): Turn into ...\n+\t(nios2_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-ppc-low.cc (class ppc_target) <get_regs_info>: Declare.\n+\t(ppc_regs_info): Turn into ...\n+\t(ppc_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-riscv-low.cc (class riscv_target) <get_regs_info>: Declare.\n+\t(riscv_regs_info): Turn into ...\n+\t(riscv_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-s390-low.cc (class s390_target) <get_regs_info>: Declare.\n+\t(s390_regs_info): Turn into ...\n+\t(s390_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\t(s390_collect_ptrace_register)\n+\t(s390_supply_ptrace_register)\n+\t(s390_fill_gregset): Update the call to the op.\n+\t* linux-sh-low.cc (class sh_target) <get_regs_info>: Declare.\n+\t(sh_regs_info): Turn into ...\n+\t(sh_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-sparc-low.cc (class sparc_target) <get_regs_info>: Declare.\n+\t(sparc_regs_info): Turn into ...\n+\t(sparc_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-tic6x-low.cc (class tic6x_target) <get_regs_info>: Declare.\n+\t(tic6x_regs_info): Turn into ...\n+\t(tic6x_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-tile-low.cc (class tile_target) <get_regs_info>: Declare.\n+\t(tile_regs_info): Turn into ...\n+\t(tile_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-xtensa-low.cc (class xtensa_target) <get_regs_info>:\n+\tDeclare.\n+\t(xtensa_regs_info): Turn into ...\n+\t(xtensa_target::get_regs_info): ...this.\n+\t(the_low_target): Remove the op field.\n+\n 2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn the 'arch_setup' linux target op into a method of"
    },
    {
      "sha": "ebbfbe6cba37d6e7da01023b715a3ba403012d2e",
      "filename": "gdbserver/linux-aarch64-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-aarch64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-aarch64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-aarch64-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -55,6 +55,8 @@ class aarch64_target : public linux_process_target\n {\n public:\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -619,10 +621,10 @@ static struct regs_info regs_info_aarch64_sve =\n     &aarch64_sve_regsets_info,\n   };\n \n-/* Implementation of linux_target_ops method \"regs_info\".  */\n+/* Implementation of linux target ops method \"get_regs_info\".  */\n \n-static const struct regs_info *\n-aarch64_regs_info (void)\n+const regs_info *\n+aarch64_target::get_regs_info ()\n {\n   if (!is_64bit_tdesc ())\n     return &regs_info_aarch32;\n@@ -3065,7 +3067,6 @@ aarch64_supports_hardware_single_step (void)\n \n struct linux_target_ops the_low_target =\n {\n-  aarch64_regs_info,\n   NULL, /* cannot_fetch_register */\n   NULL, /* cannot_store_register */\n   NULL, /* fetch_register */"
    },
    {
      "sha": "c59e8bddc08bb9ae138779883944de4d85b1d3ec",
      "filename": "gdbserver/linux-arm-low.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-arm-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-arm-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-arm-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -60,6 +60,8 @@ class arm_target : public linux_process_target\n {\n public:\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -1007,8 +1009,8 @@ static struct regs_info regs_info_arm =\n     &arm_regsets_info\n   };\n \n-static const struct regs_info *\n-arm_regs_info (void)\n+const regs_info *\n+arm_target::get_regs_info ()\n {\n   const struct target_desc *tdesc = current_process ()->tdesc;\n \n@@ -1021,7 +1023,6 @@ arm_regs_info (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  arm_regs_info,\n   arm_cannot_fetch_register,\n   arm_cannot_store_register,\n   NULL, /* fetch_register */"
    },
    {
      "sha": "fee79b74da13220e4e1c4e392e11ff7cc0a6c329",
      "filename": "gdbserver/linux-bfin-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-bfin-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-bfin-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-bfin-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -29,6 +29,8 @@ class bfin_target : public linux_process_target\n {\n public:\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -116,20 +118,19 @@ static struct usrregs_info bfin_usrregs_info =\n     bfin_regmap,\n   };\n \n-static struct regs_info regs_info =\n+static struct regs_info myregs_info =\n   {\n     NULL, /* regset_bitmap */\n     &bfin_usrregs_info,\n   };\n \n-static const struct regs_info *\n-bfin_regs_info (void)\n+const regs_info *\n+bfin_target::get_regs_info ()\n {\n-  return &regs_info;\n+  return &myregs_info;\n }\n \n struct linux_target_ops the_low_target = {\n-  bfin_regs_info,\n   bfin_cannot_fetch_register,\n   bfin_cannot_store_register,\n   NULL, /* fetch_register */"
    },
    {
      "sha": "dcb7d3fd5f4677cef85b4b3b20a9c3f5365d7703",
      "filename": "gdbserver/linux-cris-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-cris-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-cris-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-cris-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -26,6 +26,8 @@ class cris_target : public linux_process_target\n {\n public:\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -113,20 +115,19 @@ static struct usrregs_info cris_usrregs_info =\n     cris_regmap,\n   };\n \n-static struct regs_info regs_info =\n+static struct regs_info myregs_info =\n   {\n     NULL, /* regset_bitmap */\n     &cris_usrregs_info,\n   };\n \n-static const struct regs_info *\n-cris_regs_info (void)\n+const regs_info *\n+cris_target::get_regs_info ()\n {\n-  return &regs_info;\n+  return &myregs_info;\n }\n \n struct linux_target_ops the_low_target = {\n-  cris_regs_info,\n   cris_cannot_fetch_register,\n   cris_cannot_store_register,\n   NULL, /* fetch_register */"
    },
    {
      "sha": "b7763ab13564a227ebf4012fbef0e0f02a1169c4",
      "filename": "gdbserver/linux-crisv32-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-crisv32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-crisv32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-crisv32-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -26,6 +26,8 @@ class crisv32_target : public linux_process_target\n {\n public:\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -395,21 +397,20 @@ static struct usrregs_info cris_usrregs_info =\n     cris_regmap,\n   };\n \n-static struct regs_info regs_info =\n+static struct regs_info myregs_info =\n   {\n     NULL, /* regset_bitmap */\n     &cris_usrregs_info,\n     &cris_regsets_info\n   };\n \n-static const struct regs_info *\n-cris_regs_info (void)\n+const regs_info *\n+crisv32_target::get_regs_info ()\n {\n-  return &regs_info;\n+  return &myregs_info;\n }\n \n struct linux_target_ops the_low_target = {\n-  cris_regs_info,\n   NULL,\n   NULL,\n   NULL, /* fetch_register */"
    },
    {
      "sha": "d6508d2fb1de48f1808aac4f32b312037eb59166",
      "filename": "gdbserver/linux-ia64-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-ia64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-ia64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-ia64-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -29,6 +29,8 @@ class ia64_target : public linux_process_target\n {\n public:\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -341,16 +343,16 @@ static struct usrregs_info ia64_usrregs_info =\n     ia64_regmap,\n   };\n \n-static struct regs_info regs_info =\n+static struct regs_info myregs_info =\n   {\n     NULL, /* regset_bitmap */\n     &ia64_usrregs_info\n   };\n \n-static const struct regs_info *\n-ia64_regs_info (void)\n+const regs_info *\n+ia64_target::get_regs_info ()\n {\n-  return &regs_info;\n+  return &myregs_info;\n }\n \n void\n@@ -361,7 +363,6 @@ ia64_target::low_arch_setup ()\n \n \n struct linux_target_ops the_low_target = {\n-  ia64_regs_info,\n   ia64_cannot_fetch_register,\n   ia64_cannot_store_register,\n   ia64_fetch_register,"
    },
    {
      "sha": "546ca731d8f2271329191579382dc8e3a3c8f071",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -5576,7 +5576,7 @@ linux_process_target::fetch_registers (regcache *regcache, int regno)\n {\n   int use_regsets;\n   int all = 0;\n-  const struct regs_info *regs_info = (*the_low_target.regs_info) ();\n+  const regs_info *regs_info = get_regs_info ();\n \n   if (regno == -1)\n     {\n@@ -5609,7 +5609,7 @@ linux_process_target::store_registers (regcache *regcache, int regno)\n {\n   int use_regsets;\n   int all = 0;\n-  const struct regs_info *regs_info = (*the_low_target.regs_info) ();\n+  const regs_info *regs_info = get_regs_info ();\n \n   if (regno == -1)\n     {"
    },
    {
      "sha": "697b4af53a4f3ac79b94dfb0691b22cc4d9c2265",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -131,8 +131,6 @@ struct lwp_info;\n \n struct linux_target_ops\n {\n-  const struct regs_info *(*regs_info) (void);\n-\n   /* Return 0 if we can fetch/store the register, 1 if we cannot\n      fetch/store the register.  */\n   int (*cannot_fetch_register) (int);\n@@ -478,6 +476,10 @@ class linux_process_target : public process_stratum_target\n \n   int get_ipa_tdesc_idx () override;\n \n+  /* Return the information to access registers.  This has public\n+     visibility because proc-service uses it.  */\n+  virtual const regs_info *get_regs_info () = 0;\n+\n private:\n \n   /* Handle a GNU/Linux extended wait response.  If we see a clone,"
    },
    {
      "sha": "2a5c6ea9bbe5a2b4e9a300b64577642f1d457372",
      "filename": "gdbserver/linux-m32r-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-m32r-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-m32r-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m32r-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -29,6 +29,8 @@ class m32r_target : public linux_process_target\n {\n public:\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -115,20 +117,19 @@ static struct usrregs_info m32r_usrregs_info =\n     m32r_regmap,\n   };\n \n-static struct regs_info regs_info =\n+static struct regs_info myregs_info =\n   {\n     NULL, /* regset_bitmap */\n     &m32r_usrregs_info,\n   };\n \n-static const struct regs_info *\n-m32r_regs_info (void)\n+const regs_info *\n+m32r_target::get_regs_info ()\n {\n-  return &regs_info;\n+  return &myregs_info;\n }\n \n struct linux_target_ops the_low_target = {\n-  m32r_regs_info,\n   m32r_cannot_fetch_register,\n   m32r_cannot_store_register,\n   NULL, /* fetch_register */"
    },
    {
      "sha": "cbecc7a7f525976329d9ff05cae987eb186fa87e",
      "filename": "gdbserver/linux-m68k-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-m68k-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-m68k-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m68k-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -25,6 +25,8 @@ class m68k_target : public linux_process_target\n {\n public:\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -195,17 +197,17 @@ static struct usrregs_info m68k_usrregs_info =\n     m68k_regmap,\n   };\n \n-static struct regs_info regs_info =\n+static struct regs_info myregs_info =\n   {\n     NULL, /* regset_bitmap */\n     &m68k_usrregs_info,\n     &m68k_regsets_info\n   };\n \n-static const struct regs_info *\n-m68k_regs_info (void)\n+const regs_info *\n+m68k_target::get_regs_info ()\n {\n-  return &regs_info;\n+  return &myregs_info;\n }\n \n void\n@@ -223,7 +225,6 @@ m68k_supports_hardware_single_step (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  m68k_regs_info,\n   m68k_cannot_fetch_register,\n   m68k_cannot_store_register,\n   NULL, /* fetch_register */"
    },
    {
      "sha": "8231217dac9acde7d2d4d90812bacf5da08dd9fc",
      "filename": "gdbserver/linux-mips-low.cc",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-mips-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-mips-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-mips-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -31,6 +31,8 @@ class mips_target : public linux_process_target\n {\n public:\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -171,7 +173,7 @@ mips_target::low_arch_setup ()\n static struct usrregs_info *\n get_usrregs_info (void)\n {\n-  const struct regs_info *regs_info = the_low_target.regs_info ();\n+  const struct regs_info *regs_info = the_linux_target->get_regs_info ();\n \n   return regs_info->usrregs;\n }\n@@ -935,24 +937,23 @@ static struct regs_info dsp_regs_info =\n     &mips_regsets_info\n   };\n \n-static struct regs_info regs_info =\n+static struct regs_info myregs_info =\n   {\n     NULL, /* regset_bitmap */\n     &mips_usrregs_info,\n     &mips_regsets_info\n   };\n \n-static const struct regs_info *\n-mips_regs_info (void)\n+const regs_info *\n+mips_target::get_regs_info ()\n {\n   if (have_dsp)\n     return &dsp_regs_info;\n   else\n-    return &regs_info;\n+    return &myregs_info;\n }\n \n struct linux_target_ops the_low_target = {\n-  mips_regs_info,\n   mips_cannot_fetch_register,\n   mips_cannot_store_register,\n   mips_fetch_register,"
    },
    {
      "sha": "2e19b8dc7de7041b27c3fecb1ccd4ca78fc79b1e",
      "filename": "gdbserver/linux-nios2-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-nios2-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-nios2-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-nios2-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -37,6 +37,8 @@ class nios2_target : public linux_process_target\n {\n public:\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -236,22 +238,21 @@ static struct usrregs_info nios2_usrregs_info =\n     nios2_regmap,\n   };\n \n-static struct regs_info regs_info =\n+static struct regs_info myregs_info =\n   {\n     NULL, /* regset_bitmap */\n     &nios2_usrregs_info,\n     &nios2_regsets_info\n   };\n \n-static const struct regs_info *\n-nios2_regs_info (void)\n+const regs_info *\n+nios2_target::get_regs_info ()\n {\n-  return &regs_info;\n+  return &myregs_info;\n }\n \n struct linux_target_ops the_low_target =\n {\n-  nios2_regs_info,\n   nios2_cannot_fetch_register,\n   nios2_cannot_store_register,\n   NULL,"
    },
    {
      "sha": "fe63e7bf07b767479bdf9547e88e60e469633563",
      "filename": "gdbserver/linux-ppc-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-ppc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-ppc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-ppc-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -50,6 +50,8 @@ class ppc_target : public linux_process_target\n {\n public:\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -806,17 +808,17 @@ static struct regsets_info ppc_regsets_info =\n     NULL, /* disabled_regsets */\n   };\n \n-static struct regs_info regs_info =\n+static struct regs_info myregs_info =\n   {\n     NULL, /* regset_bitmap */\n     &ppc_usrregs_info,\n     &ppc_regsets_info\n   };\n \n-static const struct regs_info *\n-ppc_regs_info (void)\n+const regs_info *\n+ppc_target::get_regs_info ()\n {\n-  return &regs_info;\n+  return &myregs_info;\n }\n \n void\n@@ -3386,7 +3388,6 @@ ppc_get_ipa_tdesc_idx (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  ppc_regs_info,\n   ppc_cannot_fetch_register,\n   ppc_cannot_store_register,\n   NULL, /* fetch_register */"
    },
    {
      "sha": "092f497b85ab95066650071f59118892833d4f80",
      "filename": "gdbserver/linux-riscv-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-riscv-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-riscv-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-riscv-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -36,6 +36,8 @@ class riscv_target : public linux_process_target\n {\n public:\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -160,10 +162,10 @@ static struct regs_info riscv_regs =\n     &riscv_regsets_info,\n   };\n \n-/* Implementation of linux_target_ops method \"regs_info\".  */\n+/* Implementation of linux target ops method \"get_regs_info\".  */\n \n-static const struct regs_info *\n-riscv_regs_info ()\n+const regs_info *\n+riscv_target::get_regs_info ()\n {\n   return &riscv_regs;\n }\n@@ -271,7 +273,6 @@ riscv_breakpoint_at (CORE_ADDR pc)\n /* RISC-V/Linux target operations.  */\n struct linux_target_ops the_low_target =\n {\n-  riscv_regs_info,\n   NULL, /* cannot_fetch_register */\n   NULL, /* cannot_store_register */\n   riscv_fetch_register,"
    },
    {
      "sha": "464f60d8d42b80822360725047ef84aaa5395121",
      "filename": "gdbserver/linux-s390-low.cc",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-s390-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-s390-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-s390-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -57,6 +57,8 @@ class s390_target : public linux_process_target\n {\n public:\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -171,7 +173,7 @@ static void\n s390_collect_ptrace_register (struct regcache *regcache, int regno, char *buf)\n {\n   int size = register_size (regcache->tdesc, regno);\n-  const struct regs_info *regs_info = (*the_low_target.regs_info) ();\n+  const struct regs_info *regs_info = the_linux_target->get_regs_info ();\n   struct usrregs_info *usr = regs_info->usrregs;\n   int regaddr = usr->regmap[regno];\n \n@@ -218,7 +220,7 @@ s390_supply_ptrace_register (struct regcache *regcache,\n \t\t\t     int regno, const char *buf)\n {\n   int size = register_size (regcache->tdesc, regno);\n-  const struct regs_info *regs_info = (*the_low_target.regs_info) ();\n+  const struct regs_info *regs_info = the_linux_target->get_regs_info ();\n   struct usrregs_info *usr = regs_info->usrregs;\n   int regaddr = usr->regmap[regno];\n \n@@ -276,7 +278,7 @@ static void\n s390_fill_gregset (struct regcache *regcache, void *buf)\n {\n   int i;\n-  const struct regs_info *regs_info = (*the_low_target.regs_info) ();\n+  const struct regs_info *regs_info = the_linux_target->get_regs_info ();\n   struct usrregs_info *usr = regs_info->usrregs;\n \n   for (i = 0; i < usr->num_regs; i++)\n@@ -687,7 +689,7 @@ static struct regsets_info s390_regsets_info =\n     NULL, /* disabled_regsets */\n   };\n \n-static struct regs_info regs_info =\n+static struct regs_info myregs_info =\n   {\n     NULL, /* regset_bitmap */\n     &s390_usrregs_info,\n@@ -714,8 +716,8 @@ static struct regs_info regs_info_3264 =\n     &s390_regsets_info_3264\n   };\n \n-static const struct regs_info *\n-s390_regs_info (void)\n+const regs_info *\n+s390_target::get_regs_info ()\n {\n   if (have_hwcap_s390_high_gprs)\n     {\n@@ -728,7 +730,7 @@ s390_regs_info (void)\n       return &regs_info_3264;\n #endif\n     }\n-  return &regs_info;\n+  return &myregs_info;\n }\n \n /* The \"supports_tracepoints\" linux_target_ops method.  */\n@@ -2806,7 +2808,6 @@ s390_emit_ops (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  s390_regs_info,\n   s390_cannot_fetch_register,\n   s390_cannot_store_register,\n   NULL, /* fetch_register */"
    },
    {
      "sha": "d47cd402def1f4c71e586f0d3cdcd479400d515f",
      "filename": "gdbserver/linux-sh-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-sh-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-sh-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sh-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -25,6 +25,8 @@ class sh_target : public linux_process_target\n {\n public:\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -138,17 +140,17 @@ static struct usrregs_info sh_usrregs_info =\n     sh_regmap,\n   };\n \n-static struct regs_info regs_info =\n+static struct regs_info myregs_info =\n   {\n     NULL, /* regset_bitmap */\n     &sh_usrregs_info,\n     &sh_regsets_info\n   };\n \n-static const struct regs_info *\n-sh_regs_info (void)\n+const regs_info *\n+sh_target::get_regs_info ()\n {\n-  return &regs_info;\n+  return &myregs_info;\n }\n \n void\n@@ -158,7 +160,6 @@ sh_target::low_arch_setup ()\n }\n \n struct linux_target_ops the_low_target = {\n-  sh_regs_info,\n   sh_cannot_fetch_register,\n   sh_cannot_store_register,\n   NULL, /* fetch_register */"
    },
    {
      "sha": "7be5c15c25620aecd65f717d7a2dca6f38b383e0",
      "filename": "gdbserver/linux-sparc-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-sparc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-sparc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sparc-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -48,6 +48,8 @@ class sparc_target : public linux_process_target\n {\n public:\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -299,21 +301,20 @@ static struct usrregs_info sparc_usrregs_info =\n     NULL\n   };\n \n-static struct regs_info regs_info =\n+static struct regs_info myregs_info =\n   {\n     NULL, /* regset_bitmap */\n     &sparc_usrregs_info,\n     &sparc_regsets_info\n   };\n \n-static const struct regs_info *\n-sparc_regs_info (void)\n+const regs_info *\n+sparc_target::get_regs_info ()\n {\n-  return &regs_info;\n+  return &myregs_info;\n }\n \n struct linux_target_ops the_low_target = {\n-  sparc_regs_info,\n   sparc_cannot_fetch_register,\n   sparc_cannot_store_register,\n   NULL, /* fetch_register */"
    },
    {
      "sha": "1f8d2f6451e31d8444bb6e9c4642bb7ddf69a6f7",
      "filename": "gdbserver/linux-tic6x-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-tic6x-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-tic6x-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tic6x-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -44,6 +44,8 @@ class tic6x_target : public linux_process_target\n {\n public:\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -387,21 +389,20 @@ static struct regsets_info tic6x_regsets_info =\n     NULL, /* disabled_regsets */\n   };\n \n-static struct regs_info regs_info =\n+static struct regs_info myregs_info =\n   {\n     NULL, /* regset_bitmap */\n     &tic6x_usrregs_info,\n     &tic6x_regsets_info\n   };\n \n-static const struct regs_info *\n-tic6x_regs_info (void)\n+const regs_info *\n+tic6x_target::get_regs_info ()\n {\n-  return &regs_info;\n+  return &myregs_info;\n }\n \n struct linux_target_ops the_low_target = {\n-  tic6x_regs_info,\n   tic6x_cannot_fetch_register,\n   tic6x_cannot_store_register,\n   NULL, /* fetch_register */"
    },
    {
      "sha": "6f173ccdf83d85b392998d79d76a4ddff8d60f82",
      "filename": "gdbserver/linux-tile-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-tile-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-tile-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tile-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -29,6 +29,8 @@ class tile_target : public linux_process_target\n {\n public:\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -149,17 +151,17 @@ static struct usrregs_info tile_usrregs_info =\n     tile_regmap,\n   };\n \n-static struct regs_info regs_info =\n+static struct regs_info myregs_info =\n   {\n     NULL, /* regset_bitmap */\n     &tile_usrregs_info,\n     &tile_regsets_info,\n   };\n \n-static const struct regs_info *\n-tile_regs_info (void)\n+const regs_info *\n+tile_target::get_regs_info ()\n {\n-  return &regs_info;\n+  return &myregs_info;\n }\n \n void\n@@ -190,7 +192,6 @@ tile_supports_hardware_single_step (void)\n \n struct linux_target_ops the_low_target =\n {\n-  tile_regs_info,\n   tile_cannot_fetch_register,\n   tile_cannot_store_register,\n   NULL,"
    },
    {
      "sha": "4fdeeef2eeebe971f0ad768a9ec9e839ea96185a",
      "filename": "gdbserver/linux-x86-low.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-x86-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-x86-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-x86-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -104,6 +104,8 @@ class x86_target : public linux_process_target\n      connected, and it may or not support xml target descriptions.  */\n   void update_xmltarget ();\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -982,8 +984,8 @@ static struct regs_info i386_linux_regs_info =\n     &x86_regsets_info\n   };\n \n-static const struct regs_info *\n-x86_linux_regs_info (void)\n+const regs_info *\n+x86_target::get_regs_info ()\n {\n #ifdef __x86_64__\n   if (is_64bit_tdesc ())\n@@ -2879,7 +2881,6 @@ x86_get_ipa_tdesc_idx (void)\n \n struct linux_target_ops the_low_target =\n {\n-  x86_linux_regs_info,\n   x86_cannot_fetch_register,\n   x86_cannot_store_register,\n   NULL, /* fetch_register */"
    },
    {
      "sha": "ee2cd3bd9a46fccfb4332c6ed373f73b14cc7494",
      "filename": "gdbserver/linux-xtensa-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-xtensa-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/linux-xtensa-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-xtensa-low.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -26,6 +26,8 @@ class xtensa_target : public linux_process_target\n {\n public:\n \n+  const regs_info *get_regs_info () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -254,7 +256,7 @@ static struct regsets_info xtensa_regsets_info =\n     NULL, /* disabled_regsets */\n   };\n \n-static struct regs_info regs_info =\n+static struct regs_info myregs_info =\n   {\n     NULL, /* regset_bitmap */\n     NULL, /* usrregs */\n@@ -275,14 +277,13 @@ xtensa_supports_hardware_single_step (void)\n   return 1;\n }\n \n-static const struct regs_info *\n-xtensa_regs_info (void)\n+const regs_info *\n+xtensa_target::get_regs_info ()\n {\n-  return &regs_info;\n+  return &myregs_info;\n }\n \n struct linux_target_ops the_low_target = {\n-  xtensa_regs_info,\n   0,\n   0,\n   NULL, /* fetch_register */"
    },
    {
      "sha": "803c704e3f34b68f2c1fff185d9cea0d6a645fac",
      "filename": "gdbserver/proc-service.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/proc-service.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa8d21c9bb43baaa35f456a3d371942a26cdce4e/gdbserver/proc-service.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/proc-service.cc?ref=aa8d21c9bb43baaa35f456a3d371942a26cdce4e",
      "patch": "@@ -42,7 +42,7 @@ static struct regset_info *\n gregset_info (void)\n {\n   int i = 0;\n-  const struct regs_info *regs_info = (*the_low_target.regs_info) ();\n+  const regs_info *regs_info = the_linux_target->get_regs_info ();\n   struct regsets_info *regsets_info = regs_info->regsets_info;\n \n   while (regsets_info->regsets[i].size != -1)"
    }
  ]
}