{
  "sha": "39ef85a896e7efa0391a7ed14cc965fe1d46cbb9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzllZjg1YTg5NmU3ZWZhMDM5MWE3ZWQxNGNjOTY1ZmUxZDQ2Y2JiOQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-13T23:39:52Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-14T00:03:42Z"
    },
    "message": "Introduce ada_value_print_num\n\nThis adds ada_value_print_num, a value-based analogue of\nada_val_print_num.\n\ngdb/ChangeLog\n2020-03-13  Tom Tromey  <tom@tromey.com>\n\n\t* ada-valprint.c (ada_value_print_num): New function.\n\t(ada_value_print_1): Use it.",
    "tree": {
      "sha": "66fc73a5777ea5573501230273104552144e38a1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/66fc73a5777ea5573501230273104552144e38a1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/39ef85a896e7efa0391a7ed14cc965fe1d46cbb9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39ef85a896e7efa0391a7ed14cc965fe1d46cbb9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/39ef85a896e7efa0391a7ed14cc965fe1d46cbb9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39ef85a896e7efa0391a7ed14cc965fe1d46cbb9/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b9fa6e07980f901f2a3f99b7eed4356d3209a3c4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b9fa6e07980f901f2a3f99b7eed4356d3209a3c4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b9fa6e07980f901f2a3f99b7eed4356d3209a3c4"
    }
  ],
  "stats": {
    "total": 91,
    "additions": 88,
    "deletions": 3
  },
  "files": [
    {
      "sha": "b235b0f6d647184cc24004461e46b4da80606715",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39ef85a896e7efa0391a7ed14cc965fe1d46cbb9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39ef85a896e7efa0391a7ed14cc965fe1d46cbb9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=39ef85a896e7efa0391a7ed14cc965fe1d46cbb9",
      "patch": "@@ -1,3 +1,8 @@\n+2020-03-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* ada-valprint.c (ada_value_print_num): New function.\n+\t(ada_value_print_1): Use it.\n+\n 2020-03-13  Tom Tromey  <tom@tromey.com>\n \n \t* ada-valprint.c (ada_value_print_1) <TYPE_CODE_FLT>: Rewrite."
    },
    {
      "sha": "4b89473fef39cbb6407ad837e8afcc299da13d71",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 83,
      "deletions": 3,
      "changes": 86,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39ef85a896e7efa0391a7ed14cc965fe1d46cbb9/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39ef85a896e7efa0391a7ed14cc965fe1d46cbb9/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=39ef85a896e7efa0391a7ed14cc965fe1d46cbb9",
      "patch": "@@ -937,6 +937,88 @@ ada_val_print_num (struct type *type, const gdb_byte *valaddr,\n     }\n }\n \n+/* Implement Ada val_print'ing for the case where TYPE is\n+   a TYPE_CODE_INT or TYPE_CODE_RANGE.  */\n+\n+static void\n+ada_value_print_num (struct value *val, struct ui_file *stream, int recurse,\n+\t\t     const struct value_print_options *options)\n+{\n+  struct type *type = ada_check_typedef (value_type (val));\n+  const gdb_byte *valaddr = value_contents_for_printing (val);\n+\n+  if (ada_is_fixed_point_type (type))\n+    {\n+      struct value *scale = ada_scaling_factor (type);\n+      val = value_cast (value_type (scale), val);\n+      val = value_binop (val, scale, BINOP_MUL);\n+\n+      const char *fmt = TYPE_LENGTH (type) < 4 ? \"%.11g\" : \"%.17g\";\n+      std::string str\n+\t= target_float_to_string (value_contents (val), value_type (val), fmt);\n+      fputs_filtered (str.c_str (), stream);\n+      return;\n+    }\n+  else if (TYPE_CODE (type) == TYPE_CODE_RANGE\n+\t   && (TYPE_CODE (TYPE_TARGET_TYPE (type)) == TYPE_CODE_ENUM\n+\t       || TYPE_CODE (TYPE_TARGET_TYPE (type)) == TYPE_CODE_BOOL\n+\t       || TYPE_CODE (TYPE_TARGET_TYPE (type)) == TYPE_CODE_CHAR))\n+    {\n+      /* For enum-valued ranges, we want to recurse, because we'll end\n+\t up printing the constant's name rather than its numeric\n+\t value.  Character and fixed-point types are also printed\n+\t differently, so recuse for those as well.  */\n+      struct type *target_type = TYPE_TARGET_TYPE (type);\n+      val = value_cast (target_type, val);\n+      common_val_print (val, stream, recurse + 1, options,\n+\t\t\tlanguage_def (language_ada));\n+      return;\n+    }\n+  else\n+    {\n+      int format = (options->format ? options->format\n+\t\t    : options->output_format);\n+\n+      if (format)\n+\t{\n+\t  struct value_print_options opts = *options;\n+\n+\t  opts.format = format;\n+\t  value_print_scalar_formatted (val, &opts, 0, stream);\n+\t}\n+      else if (ada_is_system_address_type (type))\n+\t{\n+\t  /* FIXME: We want to print System.Address variables using\n+\t     the same format as for any access type.  But for some\n+\t     reason GNAT encodes the System.Address type as an int,\n+\t     so we have to work-around this deficiency by handling\n+\t     System.Address values as a special case.  */\n+\n+\t  struct gdbarch *gdbarch = get_type_arch (type);\n+\t  struct type *ptr_type = builtin_type (gdbarch)->builtin_data_ptr;\n+\t  CORE_ADDR addr = extract_typed_address (valaddr, ptr_type);\n+\n+\t  fprintf_filtered (stream, \"(\");\n+\t  type_print (type, \"\", stream, -1);\n+\t  fprintf_filtered (stream, \") \");\n+\t  fputs_filtered (paddress (gdbarch, addr), stream);\n+\t}\n+      else\n+\t{\n+\t  value_print_scalar_formatted (val, options, 0, stream);\n+\t  if (ada_is_character_type (type))\n+\t    {\n+\t      LONGEST c;\n+\n+\t      fputs_filtered (\" \", stream);\n+\t      c = unpack_long (type, valaddr);\n+\t      ada_printchar (c, type, stream);\n+\t    }\n+\t}\n+      return;\n+    }\n+}\n+\n /* Implement Ada val_print'ing for the case where TYPE is\n    a TYPE_CODE_ENUM.  */\n \n@@ -1282,9 +1364,7 @@ ada_value_print_1 (struct value *val, struct ui_file *stream, int recurse,\n \n     case TYPE_CODE_INT:\n     case TYPE_CODE_RANGE:\n-      ada_val_print_num (type, valaddr, 0, 0,\n-\t\t\t address, stream, recurse, val,\n-\t\t\t options);\n+      ada_value_print_num (val, stream, recurse, options);\n       break;\n \n     case TYPE_CODE_ENUM:"
    }
  ]
}