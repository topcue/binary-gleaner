{
  "sha": "0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGI3YjJjMmFkZmY0M2QzOWVlM2JkMzllYmQ5MWE2NzEwZDkxNzVlNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-04-17T15:35:04Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-04-17T15:35:06Z"
    },
    "message": "Simplify quick_symbol_functions::map_matching_symbols\n\nquick_symbol_functions::map_matching_symbols is only used by the Ada\ncode.  Currently, it both expands certain psymtabs and then walks over\nthe full symtabs -- including any already-expanded ones -- calling a\ncallback.\n\nIt appears to work lazily as well, in that if the callback returns\nfalse, iteration stops.  However, only the psymtab implementation does\nthis; the DWARF index implementations are not lazy.  It turns out,\nthough, that the only callback that is ever passed here never returns\nfalse.\n\nThis patch simplifies this method by removing the callback.  The\nmethod is also renamed.  In the new scheme, the caller is responsible\nfor walking the full symtabs, which removes some redundancy as well.\n\ngdb/ChangeLog\n2021-04-17  Tom Tromey  <tom@tromey.com>\n\n\t* psymtab.c (psymbol_functions::expand_matching_symbols): Rename\n\tfrom map_matching_symbols.  Change parameters.\n\t* psympriv.h (struct psymbol_functions) <expand_matching_symbols>:\n\tRename from map_matching_symbols.  Change parameters.\n\t* dwarf2/read.c (struct dwarf2_gdb_index)\n\t<expand_matching_symbols>: Rename from map_matching_symbols.\n\tChange parameters.\n\t(struct dwarf2_debug_names_index) <expand_matching_symbols>:\n\tRename from map_matching_symbols.  Change parameters.\n\t(dwarf2_gdb_index::expand_matching_symbols): Rename from\n\tdw2_map_matching_symbols.  Change parameters.\n\t(dwarf2_gdb_index::expand_matching_symbols): Remove old\n\timplementation.\n\t(dwarf2_debug_names_index::expand_matching_symbols): Rename from\n\tmap_matching_symbols.  Change parameters.\n\t* objfiles.h (struct objfile) <expand_matching_symbols>: Rename\n\tfrom map_matching_symbols.  Change parameters.\n\t* symfile-debug.c (objfile::expand_matching_symbols): Rename from\n\tmap_matching_symbols.  Change parameters.\n\t* ada-lang.c (map_matching_symbols): New function.\n\t(add_nonlocal_symbols): Update.",
    "tree": {
      "sha": "319e0422ab99a88c82017e660b06e7b0e0f27c41",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/319e0422ab99a88c82017e660b06e7b0e0f27c41"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "90160b57032ce8c2d12864a53036bab2c5b86682",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/90160b57032ce8c2d12864a53036bab2c5b86682",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/90160b57032ce8c2d12864a53036bab2c5b86682"
    }
  ],
  "stats": {
    "total": 160,
    "additions": 76,
    "deletions": 84
  },
  "files": [
    {
      "sha": "33a0997afcc85be3216b48d4bd9421684b0ec05b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4",
      "patch": "@@ -1,3 +1,27 @@\n+2021-04-17  Tom Tromey  <tom@tromey.com>\n+\n+\t* psymtab.c (psymbol_functions::expand_matching_symbols): Rename\n+\tfrom map_matching_symbols.  Change parameters.\n+\t* psympriv.h (struct psymbol_functions) <expand_matching_symbols>:\n+\tRename from map_matching_symbols.  Change parameters.\n+\t* dwarf2/read.c (struct dwarf2_gdb_index)\n+\t<expand_matching_symbols>: Rename from map_matching_symbols.\n+\tChange parameters.\n+\t(struct dwarf2_debug_names_index) <expand_matching_symbols>:\n+\tRename from map_matching_symbols.  Change parameters.\n+\t(dwarf2_gdb_index::expand_matching_symbols): Rename from\n+\tdw2_map_matching_symbols.  Change parameters.\n+\t(dwarf2_gdb_index::expand_matching_symbols): Remove old\n+\timplementation.\n+\t(dwarf2_debug_names_index::expand_matching_symbols): Rename from\n+\tmap_matching_symbols.  Change parameters.\n+\t* objfiles.h (struct objfile) <expand_matching_symbols>: Rename\n+\tfrom map_matching_symbols.  Change parameters.\n+\t* symfile-debug.c (objfile::expand_matching_symbols): Rename from\n+\tmap_matching_symbols.  Change parameters.\n+\t* ada-lang.c (map_matching_symbols): New function.\n+\t(add_nonlocal_symbols): Update.\n+\n 2021-04-17  Tom Tromey  <tom@tromey.com>\n \n \t* quick-symbol.h (struct quick_symbol_functions)"
    },
    {
      "sha": "d170a1e662a7ecfd79fc5bf65a1602d23f254373",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 31,
      "deletions": 10,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4",
      "patch": "@@ -5175,6 +5175,33 @@ ada_lookup_name (const lookup_name_info &lookup_name)\n   return lookup_name.ada ().lookup_name ().c_str ();\n }\n \n+/* A helper for add_nonlocal_symbols.  Call expand_matching_symbols\n+   for OBJFILE, then walk the objfile's symtabs and update the\n+   results.  */\n+\n+static void\n+map_matching_symbols (struct objfile *objfile,\n+\t\t      const lookup_name_info &lookup_name,\n+\t\t      bool is_wild_match,\n+\t\t      domain_enum domain,\n+\t\t      int global,\n+\t\t      match_data &data)\n+{\n+  data.objfile = objfile;\n+  objfile->expand_matching_symbols (lookup_name, domain, global,\n+\t\t\t\t    is_wild_match ? nullptr : compare_names);\n+\n+  const int block_kind = global ? GLOBAL_BLOCK : STATIC_BLOCK;\n+  for (compunit_symtab *symtab : objfile->compunits ())\n+    {\n+      const struct block *block\n+\t= BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (symtab), block_kind);\n+      if (!iterate_over_symbols_terminated (block, lookup_name,\n+\t\t\t\t\t    domain, data))\n+\tbreak;\n+    }\n+}\n+\n /* Add to RESULT all non-local symbols whose name and domain match\n    LOOKUP_NAME and DOMAIN respectively.  The search is performed on\n    GLOBAL_BLOCK symbols if GLOBAL is non-zero, or on STATIC_BLOCK\n@@ -5191,10 +5218,8 @@ add_nonlocal_symbols (std::vector<struct block_symbol> &result,\n \n   for (objfile *objfile : current_program_space->objfiles ())\n     {\n-      data.objfile = objfile;\n-\n-      objfile->map_matching_symbols (lookup_name, domain, global, data,\n-\t\t\t\t     is_wild_match ? NULL : compare_names);\n+      map_matching_symbols (objfile, lookup_name, is_wild_match, domain,\n+\t\t\t    global, data);\n \n       for (compunit_symtab *cu : objfile->compunits ())\n \t{\n@@ -5214,12 +5239,8 @@ add_nonlocal_symbols (std::vector<struct block_symbol> &result,\n       lookup_name_info name1 (bracket_name, symbol_name_match_type::FULL);\n \n       for (objfile *objfile : current_program_space->objfiles ())\n-\t{\n-\t  data.objfile = objfile;\n-\t  objfile->map_matching_symbols (name1, domain, global, data,\n-\t\t\t\t\t compare_names);\n-\t}\n-    }      \t\n+\tmap_matching_symbols (objfile, name1, false, domain, global, data);\n+    }\n }\n \n /* Find symbols in DOMAIN matching LOOKUP_NAME, in BLOCK and, if"
    },
    {
      "sha": "22a5f333b785be2f11c7ae22918c8dddfe7fef01",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 4,
      "deletions": 38,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4",
      "patch": "@@ -2260,12 +2260,11 @@ struct dwarf2_gdb_index : public dwarf2_base_index_functions\n {\n   void dump (struct objfile *objfile) override;\n \n-  void map_matching_symbols\n+  void expand_matching_symbols\n     (struct objfile *,\n      const lookup_name_info &lookup_name,\n      domain_enum domain,\n      int global,\n-     gdb::function_view<symbol_found_callback_ftype> callback,\n      symbol_compare_ftype *ordered_compare) override;\n \n   bool expand_symtabs_matching\n@@ -2283,12 +2282,11 @@ struct dwarf2_debug_names_index : public dwarf2_base_index_functions\n {\n   void dump (struct objfile *objfile) override;\n \n-  void map_matching_symbols\n+  void expand_matching_symbols\n     (struct objfile *,\n      const lookup_name_info &lookup_name,\n      domain_enum domain,\n      int global,\n-     gdb::function_view<symbol_found_callback_ftype> callback,\n      symbol_compare_ftype *ordered_compare) override;\n \n   bool expand_symtabs_matching\n@@ -3538,11 +3536,10 @@ dw2_expand_symtabs_matching_one\n    gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify);\n \n void\n-dwarf2_gdb_index::map_matching_symbols\n+dwarf2_gdb_index::expand_matching_symbols\n   (struct objfile *objfile,\n    const lookup_name_info &name, domain_enum domain,\n    int global,\n-   gdb::function_view<symbol_found_callback_ftype> callback,\n    symbol_compare_ftype *ordered_compare)\n {\n   /* Used for Ada.  */\n@@ -3581,18 +3578,6 @@ dwarf2_gdb_index::map_matching_symbols\n       /* We have -readnow: no .gdb_index, but no partial symtabs either.  So,\n \t proceed assuming all symtabs have been read in.  */\n     }\n-\n-  for (compunit_symtab *cust : objfile->compunits ())\n-    {\n-      const struct block *block;\n-\n-      if (cust == NULL)\n-\tcontinue;\n-      block = BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (cust), block_kind);\n-      if (!iterate_over_symbols_terminated (block, name,\n-\t\t\t\t\t    domain, callback))\n-\treturn;\n-    }\n }\n \n /* Starting from a search name, return the string that finds the upper\n@@ -5509,11 +5494,10 @@ dwarf2_debug_names_index::dump (struct objfile *objfile)\n }\n \n void\n-dwarf2_debug_names_index::map_matching_symbols\n+dwarf2_debug_names_index::expand_matching_symbols\n   (struct objfile *objfile,\n    const lookup_name_info &name, domain_enum domain,\n    int global,\n-   gdb::function_view<symbol_found_callback_ftype> callback,\n    symbol_compare_ftype *ordered_compare)\n {\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n@@ -5523,7 +5507,6 @@ dwarf2_debug_names_index::map_matching_symbols\n     return;\n \n   mapped_debug_names &map = *per_objfile->per_bfd->debug_names_table;\n-  const block_enum block_kind = global ? GLOBAL_BLOCK : STATIC_BLOCK;\n   const block_search_flags block_flags\n     = global ? SEARCH_GLOBAL_BLOCK : SEARCH_STATIC_BLOCK;\n \n@@ -5549,23 +5532,6 @@ dwarf2_debug_names_index::map_matching_symbols\n \t\t\t\t\t nullptr);\n       return true;\n     }, per_objfile);\n-\n-  /* It's a shame we couldn't do this inside the\n-     dw2_expand_symtabs_matching_symbol callback, but that skips CUs\n-     that have already been expanded.  Instead, this loop matches what\n-     the psymtab code does.  */\n-  for (dwarf2_per_cu_data *per_cu : per_objfile->per_bfd->all_comp_units)\n-    {\n-      compunit_symtab *symtab = per_objfile->get_symtab (per_cu);\n-      if (symtab != nullptr)\n-\t{\n-\t  const struct block *block\n-\t    = BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (symtab), block_kind);\n-\t  if (!iterate_over_symbols_terminated (block, name,\n-\t\t\t\t\t\tdomain, callback))\n-\t    break;\n-\t}\n-    }\n }\n \n bool"
    },
    {
      "sha": "5a8a782a64623dd9ecf37e485bd6af255e9bac73",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4",
      "patch": "@@ -621,10 +621,9 @@ struct objfile\n   void expand_symtabs_with_fullname (const char *fullname);\n \n   /* See quick_symbol_functions.  */\n-  void map_matching_symbols\n+  void expand_matching_symbols\n     (const lookup_name_info &name, domain_enum domain,\n      int global,\n-     gdb::function_view<symbol_found_callback_ftype> callback,\n      symbol_compare_ftype *ordered_compare);\n \n   /* See quick_symbol_functions.  */"
    },
    {
      "sha": "59dd66f57e5d58dc94f1bd5935a4fd74ac3a15d2",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4",
      "patch": "@@ -518,12 +518,11 @@ struct psymbol_functions : public quick_symbol_functions\n \n   void expand_all_symtabs (struct objfile *objfile) override;\n \n-  void map_matching_symbols\n+  void expand_matching_symbols\n     (struct objfile *,\n      const lookup_name_info &lookup_name,\n      domain_enum domain,\n      int global,\n-     gdb::function_view<symbol_found_callback_ftype> callback,\n      symbol_compare_ftype *ordered_compare) override;\n \n   bool expand_symtabs_matching"
    },
    {
      "sha": "75a307c89aa31c93f950589b7f249e3718c4a2c1",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 5,
      "deletions": 18,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4",
      "patch": "@@ -979,36 +979,23 @@ psymtab_to_fullname (struct partial_symtab *ps)\n   return ps->fullname;\n }\n \n-/* Psymtab version of map_matching_symbols.  See its definition in\n+/* Psymtab version of expand_matching_symbols.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n \n void\n-psymbol_functions::map_matching_symbols\n+psymbol_functions::expand_matching_symbols\n   (struct objfile *objfile,\n    const lookup_name_info &name, domain_enum domain,\n    int global,\n-   gdb::function_view<symbol_found_callback_ftype> callback,\n    symbol_compare_ftype *ordered_compare)\n {\n-  const int block_kind = global ? GLOBAL_BLOCK : STATIC_BLOCK;\n-\n   for (partial_symtab *ps : require_partial_symbols (objfile))\n     {\n       QUIT;\n-      if (ps->readin_p (objfile)\n-\t  || match_partial_symbol (objfile, ps, global, name, domain,\n+      if (!ps->readin_p (objfile)\n+\t  && match_partial_symbol (objfile, ps, global, name, domain,\n \t\t\t\t   ordered_compare))\n-\t{\n-\t  struct compunit_symtab *cust = psymtab_to_symtab (objfile, ps);\n-\t  const struct block *block;\n-\n-\t  if (cust == NULL)\n-\t    continue;\n-\t  block = BLOCKVECTOR_BLOCK (COMPUNIT_BLOCKVECTOR (cust), block_kind);\n-\t  if (!iterate_over_symbols_terminated (block, name,\n-\t\t\t\t\t\tdomain, callback))\n-\t    return;\n-\t}\n+\tpsymtab_to_symtab (objfile, ps);\n     }\n }\n "
    },
    {
      "sha": "f06ceff41c238250dfef373adb11670334c70802",
      "filename": "gdb/quick-symbol.h",
      "status": "modified",
      "additions": 6,
      "deletions": 9,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4/gdb/quick-symbol.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4/gdb/quick-symbol.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/quick-symbol.h?ref=0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4",
      "patch": "@@ -120,11 +120,10 @@ struct quick_symbol_functions\n   virtual void expand_all_symtabs (struct objfile *objfile) = 0;\n \n   /* Find global or static symbols in all tables that are in DOMAIN\n-     and for which MATCH (symbol name, NAME) == 0, passing each to \n-     CALLBACK, reading in partial symbol tables as needed.  Look\n-     through global symbols if GLOBAL and otherwise static symbols.\n-     Passes NAME and NAMESPACE to CALLBACK with each symbol\n-     found.  After each block is processed, passes NULL to CALLBACK.\n+     and for which MATCH (symbol name, NAME) == 0, reading in partial\n+     symbol tables as needed.  Look through global symbols if GLOBAL\n+     and otherwise static symbols.\n+\n      MATCH must be weaker than strcmp_iw_ordered in the sense that\n      strcmp_iw_ordered(x,y) == 0 --> MATCH(x,y) == 0.  ORDERED_COMPARE,\n      if non-null, must be an ordering relation compatible with\n@@ -133,15 +132,13 @@ struct quick_symbol_functions\n      and \n \t    strcmp_iw_ordered(x,y) <= 0 --> ORDERED_COMPARE(x,y) <= 0\n      (allowing strcmp_iw_ordered(x,y) < 0 while ORDERED_COMPARE(x, y) == 0).\n-     CALLBACK returns true to indicate that the scan should continue, or\n-     false to indicate that the scan should be terminated.  */\n+  */\n \n-  virtual void map_matching_symbols\n+  virtual void expand_matching_symbols\n     (struct objfile *,\n      const lookup_name_info &lookup_name,\n      domain_enum domain,\n      int global,\n-     gdb::function_view<symbol_found_callback_ftype> callback,\n      symbol_compare_ftype *ordered_compare) = 0;\n \n   /* Expand all symbol tables in OBJFILE matching some criteria."
    },
    {
      "sha": "b839194e2f74272444a450aacdd7eb22503021c4",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=0b7b2c2adff43d39ee3bd39ebd91a6710d9175e4",
      "patch": "@@ -353,22 +353,21 @@ objfile::expand_symtabs_with_fullname (const char *fullname)\n }\n \n void\n-objfile::map_matching_symbols\n+objfile::expand_matching_symbols\n   (const lookup_name_info &name, domain_enum domain,\n    int global,\n-   gdb::function_view<symbol_found_callback_ftype> callback,\n    symbol_compare_ftype *ordered_compare)\n {\n   if (debug_symfile)\n     fprintf_filtered (gdb_stdlog,\n-\t\t      \"qf->map_matching_symbols (%s, %s, %d, %s)\\n\",\n+\t\t      \"qf->expand_matching_symbols (%s, %s, %d, %s)\\n\",\n \t\t      objfile_debug_name (this),\n \t\t      domain_name (domain), global,\n \t\t      host_address_to_string (ordered_compare));\n \n   for (const auto &iter : qf)\n-    iter->map_matching_symbols (this, name, domain, global,\n-\t\t\t\tcallback, ordered_compare);\n+    iter->expand_matching_symbols (this, name, domain, global,\n+\t\t\t\t   ordered_compare);\n }\n \n bool"
    }
  ]
}