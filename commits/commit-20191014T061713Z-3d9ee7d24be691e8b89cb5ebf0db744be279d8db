{
  "sha": "3d9ee7d24be691e8b89cb5ebf0db744be279d8db",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2Q5ZWU3ZDI0YmU2OTFlOGI4OWNiNWViZjBkYjc0NGJlMjc5ZDhkYg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-10-14T03:27:01Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-10-14T06:17:13Z"
    },
    "message": "qsort: ldctor.c CONSTRUCTORS\n\nctor_cmp had an ineffective comparison of addresses in an attempt to\nensure sort stability.  Comparing the addresses passed to the\ncomparison function can't work since those addresses may be from an\narray that is already perturbed by qsort.\n\n\t* ldctor.h (struct set_element): Make next field a union, adding\n\tidx field.\n\t* ldctor.c (ctor_cmp): Dereference pointer and lose unnecessary\n\tconst.  Replace final sort on pointer value with final sort on idx.\n\t(ldctor_add_set_entry): Adjust next field access.\n\t(ldctor_build_sets): Likewise.  Set u.idx field for sort.",
    "tree": {
      "sha": "147e7737f9ad5aece81d86128dd57becec88730d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/147e7737f9ad5aece81d86128dd57becec88730d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3d9ee7d24be691e8b89cb5ebf0db744be279d8db",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d9ee7d24be691e8b89cb5ebf0db744be279d8db",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3d9ee7d24be691e8b89cb5ebf0db744be279d8db",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d9ee7d24be691e8b89cb5ebf0db744be279d8db/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "08dec09d8a26c115921b17110da1e07cb233c494",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/08dec09d8a26c115921b17110da1e07cb233c494",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/08dec09d8a26c115921b17110da1e07cb233c494"
    }
  ],
  "stats": {
    "total": 52,
    "additions": 31,
    "deletions": 21
  },
  "files": [
    {
      "sha": "f8dca8633f7df0c8d8438199c991061b8f7827d8",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d9ee7d24be691e8b89cb5ebf0db744be279d8db/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d9ee7d24be691e8b89cb5ebf0db744be279d8db/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=3d9ee7d24be691e8b89cb5ebf0db744be279d8db",
      "patch": "@@ -1,3 +1,12 @@\n+2019-10-14  Alan Modra  <amodra@gmail.com>\n+\n+\t* ldctor.h (struct set_element): Make next field a union, adding\n+\tidx field.\n+\t* ldctor.c (ctor_cmp): Dereference pointer and lose unnecessary\n+\tconst.  Replace final sort on pointer value with final sort on idx.\n+\t(ldctor_add_set_entry): Adjust next field access.\n+\t(ldctor_build_sets): Likewise.  Set u.idx field for sort.\n+\n 2019-10-14  Alan Modra  <amodra@gmail.com>\n \n \t* pe-dll.c (reloc_data_type): Add idx field."
    },
    {
      "sha": "881ca258cbc2d403eeaa1da2c70ee858da5adead",
      "filename": "ld/ldctor.c",
      "status": "modified",
      "additions": 18,
      "deletions": 20,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d9ee7d24be691e8b89cb5ebf0db744be279d8db/ld/ldctor.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d9ee7d24be691e8b89cb5ebf0db744be279d8db/ld/ldctor.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldctor.c?ref=3d9ee7d24be691e8b89cb5ebf0db744be279d8db",
      "patch": "@@ -106,12 +106,12 @@ ldctor_add_set_entry (struct bfd_link_hash_entry *h,\n     }\n \n   e = (struct set_element *) xmalloc (sizeof (struct set_element));\n-  e->next = NULL;\n+  e->u.next = NULL;\n   e->name = name;\n   e->section = section;\n   e->value = value;\n \n-  for (epp = &p->elements; *epp != NULL; epp = &(*epp)->next)\n+  for (epp = &p->elements; *epp != NULL; epp = &(*epp)->u.next)\n     ;\n   *epp = e;\n \n@@ -152,19 +152,17 @@ ctor_prio (const char *name)\n static int\n ctor_cmp (const void *p1, const void *p2)\n {\n-  const struct set_element *const *pe1\n-    = (const struct set_element *const *) p1;\n-  const struct set_element *const *pe2\n-    = (const struct set_element *const *) p2;\n+  const struct set_element *pe1 = *(const struct set_element **) p1;\n+  const struct set_element *pe2 = *(const struct set_element **) p2;\n   const char *n1;\n   const char *n2;\n   int prio1;\n   int prio2;\n \n-  n1 = (*pe1)->name;\n+  n1 = pe1->name;\n   if (n1 == NULL)\n     n1 = \"\";\n-  n2 = (*pe2)->name;\n+  n2 = pe2->name;\n   if (n2 == NULL)\n     n2 = \"\";\n \n@@ -178,17 +176,15 @@ ctor_cmp (const void *p1, const void *p2)\n   /* We sort in reverse order because that is what g++ expects.  */\n   if (prio1 < prio2)\n     return 1;\n-  else if (prio1 > prio2)\n+  if (prio1 > prio2)\n     return -1;\n \n   /* Force a stable sort.  */\n-\n-  if (pe1 < pe2)\n+  if (pe1->u.idx < pe2->u.idx)\n     return -1;\n-  else if (pe1 > pe2)\n+  if (pe1->u.idx > pe2->u.idx)\n     return 1;\n-  else\n-    return 0;\n+  return 0;\n }\n \n /* This function is called after the first phase of the link and\n@@ -214,22 +210,24 @@ ldctor_build_sets (void)\n       for (p = sets; p != NULL; p = p->next)\n \t{\n \t  int c, i;\n-\t  struct set_element *e;\n+\t  struct set_element *e, *enext;\n \t  struct set_element **array;\n \n \t  if (p->elements == NULL)\n \t    continue;\n \n \t  c = 0;\n-\t  for (e = p->elements; e != NULL; e = e->next)\n+\t  for (e = p->elements; e != NULL; e = e->u.next)\n \t    ++c;\n \n \t  array = (struct set_element **) xmalloc (c * sizeof *array);\n \n \t  i = 0;\n-\t  for (e = p->elements; e != NULL; e = e->next)\n+\t  for (e = p->elements; e != NULL; e = enext)\n \t    {\n \t      array[i] = e;\n+\t      enext = e->u.next;\n+\t      e->u.idx = i;\n \t      ++i;\n \t    }\n \n@@ -238,8 +236,8 @@ ldctor_build_sets (void)\n \t  e = array[0];\n \t  p->elements = e;\n \t  for (i = 0; i < c - 1; i++)\n-\t    array[i]->next = array[i + 1];\n-\t  array[i]->next = NULL;\n+\t    array[i]->u.next = array[i + 1];\n+\t  array[i]->u.next = NULL;\n \n \t  free (array);\n \t}\n@@ -334,7 +332,7 @@ ldctor_build_sets (void)\n \t\t\t\t       FALSE));\n       lang_add_data (size, exp_intop (p->count));\n \n-      for (e = p->elements; e != NULL; e = e->next)\n+      for (e = p->elements; e != NULL; e = e->u.next)\n \t{\n \t  if (config.map_file != NULL)\n \t    {"
    },
    {
      "sha": "b48a0dbb635d2ad40d7524cc962f0053b3c61a87",
      "filename": "ld/ldctor.h",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d9ee7d24be691e8b89cb5ebf0db744be279d8db/ld/ldctor.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d9ee7d24be691e8b89cb5ebf0db744be279d8db/ld/ldctor.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldctor.h?ref=3d9ee7d24be691e8b89cb5ebf0db744be279d8db",
      "patch": "@@ -40,7 +40,10 @@ struct set_info {\n };\n \n struct set_element {\n-  struct set_element *next;\t\t/* Next element.  */\n+  union {\n+    struct set_element *next;\t\t/* Next element.  */\n+    long idx;\n+  } u;\n   const char *name;\t\t\t/* Name in set (may be NULL).  */\n   asection *section;\t\t\t/* Section of value in set.  */\n   bfd_vma value;\t\t\t/* Value in set.  */"
    }
  ]
}