{
  "sha": "bd3d1480a80effbbf3eedf1bd51368730ec9078d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmQzZDE0ODBhODBlZmZiYmYzZWVkZjFiZDUxMzY4NzMwZWM5MDc4ZA==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-04-06T08:54:57Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-04-06T08:54:57Z"
    },
    "message": "ld: warn about PE base relocations to sections above .reloc\n\nDue to a bogus linker script, or perhaps because a section doesn't get\nplaced by a linker script while default placement puts it too high up,\nsections can end up above .reloc. Since the process of determining its\ncontents (and hence its size) happens before final section placement,\nrelocations needed for such sections would no longer point at the\ncorrect address in the final binary. Warn about this (down the road this\nmay want to become an error, unless size determination and content\ncreation for .reloc would get decoupled).\n\nTo avoid triggering the warning when .reloc gets discarded, suppress\npopulating the section in the first place in this case.",
    "tree": {
      "sha": "3e8e96c1c85af04173449ac81abf74b245a6e004",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3e8e96c1c85af04173449ac81abf74b245a6e004"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bd3d1480a80effbbf3eedf1bd51368730ec9078d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd3d1480a80effbbf3eedf1bd51368730ec9078d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bd3d1480a80effbbf3eedf1bd51368730ec9078d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd3d1480a80effbbf3eedf1bd51368730ec9078d/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d811a7cf74fa8523f67a13c0527b27f4954e9ae1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d811a7cf74fa8523f67a13c0527b27f4954e9ae1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d811a7cf74fa8523f67a13c0527b27f4954e9ae1"
    }
  ],
  "stats": {
    "total": 16,
    "additions": 15,
    "deletions": 1
  },
  "files": [
    {
      "sha": "71aa06ab45acdd9053ec07e9ea1420f4ddf39605",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd3d1480a80effbbf3eedf1bd51368730ec9078d/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd3d1480a80effbbf3eedf1bd51368730ec9078d/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=bd3d1480a80effbbf3eedf1bd51368730ec9078d",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-06  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* pe-dll.c (generate_reloc): Bail immediately when .reloc is\n+\tbeing discarded. Warn when relocated entry is above .reloc.\n+\n 2021-04-05  Alan Modra  <amodra@gmail.com>\n \n \t* configure.ac: Move initfini-array arg handling earlier.  Don't"
    },
    {
      "sha": "e7b82ba6ffadf74dc1b9ee71dc13d48336941e51",
      "filename": "ld/pe-dll.c",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd3d1480a80effbbf3eedf1bd51368730ec9078d/ld/pe-dll.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd3d1480a80effbbf3eedf1bd51368730ec9078d/ld/pe-dll.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/pe-dll.c?ref=bd3d1480a80effbbf3eedf1bd51368730ec9078d",
      "patch": "@@ -1516,7 +1516,7 @@ generate_reloc (bfd *abfd, struct bfd_link_info *info)\n   bfd *b;\n   struct bfd_section *s;\n \n-  if (reloc_s == NULL)\n+  if (reloc_s == NULL || reloc_s->output_section == bfd_abs_section_ptr)\n     return;\n   total_relocs = 0;\n   for (b = info->input_bfds; b; b = b->link.next)\n@@ -1627,6 +1627,15 @@ generate_reloc (bfd *abfd, struct bfd_link_info *info)\n \t\t  reloc_data[total_relocs].vma = sec_vma + relocs[i]->address;\n \t\t  reloc_data[total_relocs].idx = total_relocs;\n \n+\t\t  /* Since we're only about to determine .reloc's size,\n+\t\t     subsequent output section VMA calculations will shift up\n+\t\t     sections at this or higher addresses.  Relocations for\n+\t\t     such sections would hence end up not being correct.  */\n+\t\t  if (reloc_data[total_relocs].vma\n+\t\t      >= reloc_s->output_section->vma)\n+\t\t    einfo (_(\"%P: base relocation for section `%s' above \"\n+\t\t\t     \".reloc section\\n\"), s->output_section->name);\n+\n #define BITS_AND_SHIFT(bits, shift) (bits * 1000 | shift)\n \n \t\t  switch BITS_AND_SHIFT (relocs[i]->howto->bitsize,"
    }
  ]
}