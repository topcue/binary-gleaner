{
  "sha": "b2c759ce68102931140ce34c2ac00619ba363622",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjJjNzU5Y2U2ODEwMjkzMTE0MGNlMzRjMmFjMDA2MTliYTM2MzYyMg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-01-13T00:16:55Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-01-13T01:42:30Z"
    },
    "message": "ubsan: score: left shift of negative value\n\n\t* score-dis.c (print_insn_score48): Use unsigned variables for\n\tunsigned values.  Don't left shift negative values.\n\t(print_insn_score32): Likewise.\n\t* score7-dis.c (print_insn_score32, print_insn_score16): Likewise.",
    "tree": {
      "sha": "ac4f7a6f709927a91d8be9ed67c385ecf6cf1711",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ac4f7a6f709927a91d8be9ed67c385ecf6cf1711"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b2c759ce68102931140ce34c2ac00619ba363622",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b2c759ce68102931140ce34c2ac00619ba363622",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b2c759ce68102931140ce34c2ac00619ba363622",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b2c759ce68102931140ce34c2ac00619ba363622/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b50ef514ff0c8d5506227c412c508f9f538bcf5a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b50ef514ff0c8d5506227c412c508f9f538bcf5a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b50ef514ff0c8d5506227c412c508f9f538bcf5a"
    }
  ],
  "stats": {
    "total": 55,
    "additions": 31,
    "deletions": 24
  },
  "files": [
    {
      "sha": "47401860b7074bca068471ad0842906ea11c3e20",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b2c759ce68102931140ce34c2ac00619ba363622/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b2c759ce68102931140ce34c2ac00619ba363622/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=b2c759ce68102931140ce34c2ac00619ba363622",
      "patch": "@@ -1,3 +1,10 @@\n+2020-01-13  Alan Modra  <amodra@gmail.com>\n+\n+\t* score-dis.c (print_insn_score48): Use unsigned variables for\n+\tunsigned values.  Don't left shift negative values.\n+\t(print_insn_score32): Likewise.\n+\t* score7-dis.c (print_insn_score32, print_insn_score16): Likewise.\n+\n 2020-01-13  Alan Modra  <amodra@gmail.com>\n \n \t* tic4x-dis.c (tic4x_print_register): Remove dead code."
    },
    {
      "sha": "6f37dfdc4f18b40edda1c3ae5f8f2508fc248552",
      "filename": "opcodes/score-dis.c",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b2c759ce68102931140ce34c2ac00619ba363622/opcodes/score-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b2c759ce68102931140ce34c2ac00619ba363622/opcodes/score-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/score-dis.c?ref=b2c759ce68102931140ce34c2ac00619ba363622",
      "patch": "@@ -565,7 +565,7 @@ print_insn_score48 (struct disassemble_info *info, bfd_vma given)\n                               {\n                               case 'r':\n                                 {\n-                                  long reg;\n+                                  unsigned long reg;\n \n                                   reg = given >> bitstart;\n                                   reg &= (2u << (bitend - bitstart)) - 1;\n@@ -575,7 +575,7 @@ print_insn_score48 (struct disassemble_info *info, bfd_vma given)\n                                 break;\n                               case 'd':\n                                 {\n-                                  long reg;\n+                                  unsigned long reg;\n \n                                   reg = given >> bitstart;\n                                   reg &= (2u << (bitend - bitstart)) - 1;\n@@ -600,14 +600,14 @@ print_insn_score48 (struct disassemble_info *info, bfd_vma given)\n                                       || ((given & insn->mask) == 0x0c00000b)   /* stc1  */\n                                       || ((given & insn->mask) == 0x0c000013)   /* stc2  */\n                                       || ((given & insn->mask) == 0x0c00001b))  /* stc3  */\n-                                    reg <<= 2;\n+                                    reg *= 4;\n \n                                   func (stream, \"%ld\", reg);\n                                 }\n                                 break;\n                               case 'x':\n                                 {\n-                                  long reg;\n+                                  unsigned long reg;\n \n                                   reg = given >> bitstart;\n                                   reg &= (2u << (bitend - bitstart)) - 1;\n@@ -617,7 +617,7 @@ print_insn_score48 (struct disassemble_info *info, bfd_vma given)\n                                 break;\n                                 case 'w':\n                                 {\n-                                    long reg;\n+                                    unsigned long reg;\n                                     reg = given >> bitstart;\n                                     reg &= (2u << (bitend - bitstart)) - 1;\n                                     reg <<= 2;\n@@ -731,7 +731,7 @@ print_insn_score32 (bfd_vma pc, struct disassemble_info *info, long given)\n                            }\n                            else\n                            {\n-                               long reg;\n+                               unsigned long reg;\n                                int bitstart = 10;\n                                int bitend = 14;\n                                reg = given >> bitstart;\n@@ -784,7 +784,7 @@ print_insn_score32 (bfd_vma pc, struct disassemble_info *info, long given)\n                               {\n                               case 'r':\n                                 {\n-                                  long reg;\n+                                  unsigned long reg;\n \n                                   reg = given >> bitstart;\n                                   reg &= (2u << (bitend - bitstart)) - 1;\n@@ -794,7 +794,7 @@ print_insn_score32 (bfd_vma pc, struct disassemble_info *info, long given)\n                                 break;\n                               case 'd':\n                                 {\n-                                  long reg;\n+                                  unsigned long reg;\n \n                                   reg = given >> bitstart;\n                                   reg &= (2u << (bitend - bitstart)) - 1;\n@@ -817,14 +817,14 @@ print_insn_score32 (bfd_vma pc, struct disassemble_info *info, long given)\n                                       || ((given & insn->mask) == 0x0c00000b)   /* stc1  */\n                                       || ((given & insn->mask) == 0x0c000013)   /* stc2  */\n                                       || ((given & insn->mask) == 0x0c00001b))  /* stc3  */\n-                                    reg <<= 2;\n+                                    reg *= 4;\n \n                                   func (stream, \"%ld\", reg);\n                                 }\n                                 break;\n                               case 'x':\n                                 {\n-                                  long reg;\n+                                  unsigned long reg;\n \n                                   reg = given >> bitstart;\n                                   reg &= (2u << (bitend - bitstart)) - 1;"
    },
    {
      "sha": "c9b235b7b4c6a60b07ce68b91bf3e212a7f74ddb",
      "filename": "opcodes/score7-dis.c",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b2c759ce68102931140ce34c2ac00619ba363622/opcodes/score7-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b2c759ce68102931140ce34c2ac00619ba363622/opcodes/score7-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/score7-dis.c?ref=b2c759ce68102931140ce34c2ac00619ba363622",
      "patch": "@@ -613,20 +613,20 @@ print_insn_score32 (bfd_vma pc, struct disassemble_info *info, long given)\n                               {\n                               case 'r':\n                                 {\n-                                  long reg;\n+                                  unsigned long reg;\n \n                                   reg = given >> bitstart;\n-                                  reg &= (2 << (bitend - bitstart)) - 1;\n+                                  reg &= (2u << (bitend - bitstart)) - 1;\n \n                                   func (stream, \"%s\", score_regnames[reg]);\n                                 }\n                                 break;\n                               case 'd':\n                                 {\n-                                  long reg;\n+                                  unsigned long reg;\n \n                                   reg = given >> bitstart;\n-                                  reg &= (2 << (bitend - bitstart)) - 1;\n+                                  reg &= (2u << (bitend - bitstart)) - 1;\n \n                                   func (stream, \"%ld\", reg);\n                                 }\n@@ -636,27 +636,27 @@ print_insn_score32 (bfd_vma pc, struct disassemble_info *info, long given)\n                                   long reg;\n \n                                   reg = given >> bitstart;\n-                                  reg &= (2 << (bitend - bitstart)) - 1;\n-                                  reg = ((reg ^ (1 << (bitend - bitstart))) -\n-                                        (1 << (bitend - bitstart)));\n+                                  reg &= (2u << (bitend - bitstart)) - 1;\n+                                  reg = ((reg ^ (1 << (bitend - bitstart)))\n+\t\t\t\t\t - (1 << (bitend - bitstart)));\n \n                                   if (((given & insn->mask) == 0x0c00000a)      /* ldc1  */\n                                       || ((given & insn->mask) == 0x0c000012)   /* ldc2  */\n                                       || ((given & insn->mask) == 0x0c00001c)   /* ldc3  */\n                                       || ((given & insn->mask) == 0x0c00000b)   /* stc1  */\n                                       || ((given & insn->mask) == 0x0c000013)   /* stc2  */\n                                       || ((given & insn->mask) == 0x0c00001b))  /* stc3  */\n-                                    reg <<= 2;\n+                                    reg *= 4;\n \n                                   func (stream, \"%ld\", reg);\n                                 }\n                                 break;\n                               case 'x':\n                                 {\n-                                  long reg;\n+                                  unsigned long reg;\n \n                                   reg = given >> bitstart;\n-                                  reg &= (2 << (bitend - bitstart)) - 1;\n+                                  reg &= (2u << (bitend - bitstart)) - 1;\n \n                                   func (stream, \"%lx\", reg);\n                                 }\n@@ -667,12 +667,12 @@ print_insn_score32 (bfd_vma pc, struct disassemble_info *info, long given)\n                             break;\n                           case '`':\n                             c++;\n-                            if ((given & (1 << bitstart)) == 0)\n+                            if ((given & (1u << bitstart)) == 0)\n                               func (stream, \"%c\", *c);\n                             break;\n                           case '\\'':\n                             c++;\n-                            if ((given & (1 << bitstart)) != 0)\n+                            if ((given & (1u << bitstart)) != 0)\n                               func (stream, \"%c\", *c);\n                             break;\n                           default:\n@@ -789,7 +789,7 @@ print_insn_score16 (bfd_vma pc, struct disassemble_info *info, long given)\n                               if (!bitend)\n                                 abort ();\n                               reg = given >> bitstart;\n-                              reg &= (2 << (bitend - bitstart)) - 1;\n+                              reg &= (2u << (bitend - bitstart)) - 1;\n                               switch (*c)\n                                 {\n                                 case 'R':\n@@ -835,7 +835,7 @@ print_insn_score16 (bfd_vma pc, struct disassemble_info *info, long given)\n \n                           case '\\'':\n                             c++;\n-                            if ((given & (1 << bitstart)) != 0)\n+                            if ((given & (1u << bitstart)) != 0)\n                               func (stream, \"%c\", *c);\n                             break;\n                           default:"
    }
  ]
}