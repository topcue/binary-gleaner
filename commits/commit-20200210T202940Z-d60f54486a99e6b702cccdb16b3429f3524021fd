{
  "sha": "d60f54486a99e6b702cccdb16b3429f3524021fd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDYwZjU0NDg2YTk5ZTZiNzAyY2NjZGIxNmIzNDI5ZjM1MjQwMjFmZA==",
  "commit": {
    "author": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2020-02-10T20:27:36Z"
    },
    "committer": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2020-02-10T20:29:40Z"
    },
    "message": "MSP430: Add printf statements to assist with debugging during relaxation\n\nbfd/ChangeLog:\n\n2020-02-10  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* elf32-msp430.c (msp430_final_link_relocate): Add printf statements for\n\tdebugging relocations.\n\t(msp430_elf_relax_delete_bytes): Likewise.\n\t(msp430_elf_relax_add_two_words): Likewise.\n\t(msp430_elf_relax_section): Likewise.",
    "tree": {
      "sha": "fda31773e22a92ba07f0c8e923131982e6e3e0cf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fda31773e22a92ba07f0c8e923131982e6e3e0cf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d60f54486a99e6b702cccdb16b3429f3524021fd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d60f54486a99e6b702cccdb16b3429f3524021fd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d60f54486a99e6b702cccdb16b3429f3524021fd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d60f54486a99e6b702cccdb16b3429f3524021fd/comments",
  "author": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5aae9ae97f65f6651cf91db856a1f8b4bef5e896",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5aae9ae97f65f6651cf91db856a1f8b4bef5e896",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5aae9ae97f65f6651cf91db856a1f8b4bef5e896"
    }
  ],
  "stats": {
    "total": 103,
    "additions": 98,
    "deletions": 5
  },
  "files": [
    {
      "sha": "4dc98e95cf7ae0a51dfd3d3858454ca3e39b27d5",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d60f54486a99e6b702cccdb16b3429f3524021fd/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d60f54486a99e6b702cccdb16b3429f3524021fd/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=d60f54486a99e6b702cccdb16b3429f3524021fd",
      "patch": "@@ -1,3 +1,11 @@\n+2020-02-10  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* elf32-msp430.c (msp430_final_link_relocate): Add printf statements for\n+\tdebugging relocations.\n+\t(msp430_elf_relax_delete_bytes): Likewise.\n+\t(msp430_elf_relax_add_two_words): Likewise.\n+\t(msp430_elf_relax_section): Likewise.\n+\n 2020-02-10  Alan Modra  <amodra@gmail.com>\n \n \t* archures.c: Wrap overlong z80 comments."
    },
    {
      "sha": "93524dcd6aff22f3c394598accd3967dfc0b4c5c",
      "filename": "bfd/elf32-msp430.c",
      "status": "modified",
      "additions": 90,
      "deletions": 5,
      "changes": 95,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d60f54486a99e6b702cccdb16b3429f3524021fd/bfd/elf32-msp430.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d60f54486a99e6b702cccdb16b3429f3524021fd/bfd/elf32-msp430.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-msp430.c?ref=d60f54486a99e6b702cccdb16b3429f3524021fd",
      "patch": "@@ -26,6 +26,8 @@\n #include \"elf-bfd.h\"\n #include \"elf/msp430.h\"\n \n+static bfd_boolean debug_relocs = 0;\n+\n /* All users of this file have bfd_octets_per_byte (abfd, sec) == 1.  */\n #define OCTETS_PER_BYTE(ABFD, SEC) 1\n \n@@ -742,6 +744,10 @@ msp430_final_link_relocate (reloc_howto_type *\t   howto,\n       BFD_ASSERT (! is_rel_reloc || rel->r_addend == 0);\n     }\n \n+  if (debug_relocs)\n+    printf (\"writing relocation (%p) at 0x%lx type: %d\\n\", rel,\n+\t    input_section->output_section->vma + input_section->output_offset\n+\t    + rel->r_offset, howto->type);\n   if (sym_diff_section != NULL)\n     {\n       BFD_ASSERT (sym_diff_section == input_section);\n@@ -1663,6 +1669,9 @@ msp430_elf_relax_delete_bytes (bfd * abfd, asection * sec, bfd_vma addr,\n   contents = elf_section_data (sec)->this_hdr.contents;\n \n   toaddr = sec->size;\n+  if (debug_relocs)\n+    printf (\"      deleting %d bytes between 0x%lx to 0x%lx\\n\",\n+\t    count, addr, toaddr);\n \n   irel = elf_section_data (sec)->relocs;\n   irelend = irel + sec->reloc_count;\n@@ -1710,10 +1719,15 @@ msp430_elf_relax_delete_bytes (bfd * abfd, asection * sec, bfd_vma addr,\n \t\t  && (CONST_STRNEQ (name, \".Letext\")\n \t\t      || CONST_STRNEQ (name, \".LFE\")))))\n \t{\n+\t  if (debug_relocs)\n+\t    printf (\"      adjusting value of local symbol %s from 0x%lx \",\n+\t\t    name, isym->st_value);\n \t  if (isym->st_value < addr + count)\n \t    isym->st_value = addr;\n \t  else\n \t    isym->st_value -= count;\n+\t  if (debug_relocs)\n+\t    printf (\"to 0x%lx\\n\", isym->st_value);\n \t}\n       /* Adjust the function symbol's size as well.  */\n       else if (ELF_ST_TYPE (isym->st_info) == STT_FUNC\n@@ -1772,6 +1786,9 @@ msp430_elf_relax_add_two_words (bfd * abfd, asection * sec, bfd_vma addr,\n   unsigned int symcount;\n   bfd_vma sec_end;\n   asection *p;\n+  if (debug_relocs)\n+    printf (\"      adding two words at 0x%lx\\n\",\n+\t    sec->output_section->vma + sec->output_offset + addr);\n \n   contents = elf_section_data (sec)->this_hdr.contents;\n   sec_end = sec->size;\n@@ -1808,7 +1825,14 @@ msp430_elf_relax_add_two_words (bfd * abfd, asection * sec, bfd_vma addr,\n   for (isymend = isym + symtab_hdr->sh_info; isym < isymend; isym++)\n     if (isym->st_shndx == sec_shndx\n \t&& isym->st_value >= addr && isym->st_value < sec_end)\n-      isym->st_value += 4;\n+      {\n+\tif (debug_relocs)\n+\t  printf (\"      adjusting value of local symbol %s from 0x%lx to \"\n+\t\t  \"0x%lx\\n\", bfd_elf_string_from_elf_section\n+\t\t  (abfd, symtab_hdr->sh_link, isym->st_name),\n+\t\t  isym->st_value, isym->st_value + 4);\n+\tisym->st_value += 4;\n+      }\n \n   /* Now adjust the global symbols defined in this section.  */\n   symcount = (symtab_hdr->sh_size / sizeof (Elf32_External_Sym)\n@@ -1853,6 +1877,10 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n     || sec->reloc_count == 0 || (sec->flags & SEC_CODE) == 0)\n     return TRUE;\n \n+  if (debug_relocs)\n+    printf (\"Relaxing %s (%p), output_offset: 0x%lx sec size: 0x%lx\\n\",\n+\t    sec->name, sec, sec->output_offset, sec->size);\n+\n   symtab_hdr = & elf_tdata (abfd)->symtab_hdr;\n \n   /* Get a copy of the native relocations.  */\n@@ -1864,6 +1892,8 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n   /* Walk through them looking for relaxing opportunities.  */\n   irelend = internal_relocs + sec->reloc_count;\n \n+  if (debug_relocs)\n+    printf (\"  trying code size growing relocs\\n\");\n   /* Do code size growing relocs first.  */\n   for (irel = internal_relocs; irel < irelend; irel++)\n     {\n@@ -1920,6 +1950,14 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n \t    sym_sec = bfd_section_from_elf_index (abfd, isym->st_shndx);\n \t  symval = (isym->st_value\n \t\t    + sym_sec->output_section->vma + sym_sec->output_offset);\n+\n+\t  if (debug_relocs)\n+\t    printf (\"    processing reloc at 0x%lx for local sym: %s \"\n+\t\t    \"st_value: 0x%lx adj value: 0x%lx\\n\", sec->output_offset\n+\t\t    + sec->output_section->vma + irel->r_offset,\n+\t\t    bfd_elf_string_from_elf_section (abfd, symtab_hdr->sh_link,\n+\t\t\t\t\t\t     isym->st_name),\n+\t\t    isym->st_value, symval);\n \t}\n       else\n \t{\n@@ -1941,6 +1979,11 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n \t  symval = (h->root.u.def.value\n \t\t    + h->root.u.def.section->output_section->vma\n \t\t    + h->root.u.def.section->output_offset);\n+\t  if (debug_relocs)\n+\t    printf (\"    processing reloc at 0x%lx for global sym: %s \"\n+\t\t    \"st_value: 0x%lx adj value: 0x%lx\\n\", sec->output_offset\n+\t\t    + sec->output_section->vma + irel->r_offset,\n+\t\t    h->root.root.string, h->root.u.def.value, symval);\n \t}\n \n       /* For simplicity of coding, we are going to modify the section\n@@ -1960,6 +2003,7 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n       value -= (sec->output_section->vma + sec->output_offset);\n       value -= irel->r_offset;\n       value -= 2;\n+\n       /* Scale.  */\n       value >>= 1;\n \n@@ -2009,6 +2053,10 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n       /* Insert the new branch instruction.  */\n       if (uses_msp430x_relocs (abfd))\n \t{\n+\t  if (debug_relocs)\n+\t    printf (\"      R_MSP430X_10_PCREL -> R_MSP430X_ABS20_ADR_SRC \"\n+\t\t    \"(growing with new opcode 0x%x)\\n\", opcode);\n+\n \t  /* Insert an absolute branch (aka MOVA) instruction.  */\n \t  contents = msp430_elf_relax_add_two_words\n \t    (abfd, sec, irel->r_offset + 2, 0x0080, 0x0000);\n@@ -2024,6 +2072,9 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n \t}\n       else\n \t{\n+\t  if (debug_relocs)\n+\t    printf (\"      R_MSP430_10_PCREL -> R_MSP430_16 \"\n+\t\t    \"(growing with new opcode 0x%x)\\n\", opcode);\n \t  contents = msp430_elf_relax_add_two_words\n \t    (abfd, sec, irel->r_offset + 2, 0x4030, 0x0000);\n \n@@ -2039,6 +2090,9 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n       *again = TRUE;\n     }\n \n+    if (debug_relocs)\n+      printf (\"  trying code size shrinking relocs\\n\");\n+\n     for (irel = internal_relocs; irel < irelend; irel++)\n       {\n \tbfd_vma symval;\n@@ -2083,6 +2137,14 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n \t      sym_sec = bfd_section_from_elf_index (abfd, isym->st_shndx);\n \t    symval = (isym->st_value\n \t\t      + sym_sec->output_section->vma + sym_sec->output_offset);\n+\n+\t    if (debug_relocs)\n+\t      printf (\"    processing reloc at 0x%lx for local sym: %s \"\n+\t\t      \"st_value: 0x%lx adj value: 0x%lx\\n\", sec->output_offset\n+\t\t      + sec->output_section->vma + irel->r_offset,\n+\t\t      bfd_elf_string_from_elf_section\n+\t\t      (abfd, symtab_hdr->sh_link, isym->st_name),\n+\t\t      isym->st_value, symval);\n \t  }\n \telse\n \t  {\n@@ -2104,6 +2166,11 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n \t    symval = (h->root.u.def.value\n \t\t      + h->root.u.def.section->output_section->vma\n \t\t      + h->root.u.def.section->output_offset);\n+\t    if (debug_relocs)\n+\t      printf (\"    processing reloc at 0x%lx for global sym: %s \"\n+\t\t      \"st_value: 0x%lx adj value: 0x%lx\\n\", sec->output_offset\n+\t\t      + sec->output_section->vma + irel->r_offset,\n+\t\t      h->root.root.string, h->root.u.def.value, symval);\n \t  }\n \n \t/* For simplicity of coding, we are going to modify the section\n@@ -2187,6 +2254,8 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n \t\telf_section_data (sec)->this_hdr.contents = contents;\n \t\tsymtab_hdr->contents = (unsigned char *) isymbuf;\n \n+\t\tif (debug_relocs)\n+\t\t  printf (\"      R_MSP430_RL_PCREL -> \");\n \t\t/* Fix the relocation's type.  */\n \t\tif (uses_msp430x_relocs (abfd))\n \t\t  {\n@@ -2200,11 +2269,21 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n \t\telse\n \t\t  {\n \t\t    if (rx->labels == 3)\t/* Handle special cases.  */\n-\t\t      irel->r_info = ELF32_R_INFO (ELF32_R_SYM (irel->r_info),\n-\t\t\t\t\t\t   R_MSP430_2X_PCREL);\n+\t\t      {\n+\t\t\tirel->r_info = ELF32_R_INFO (ELF32_R_SYM (irel->r_info),\n+\t\t\t\t\t\t     R_MSP430_2X_PCREL);\n+\t\t\tif (debug_relocs)\n+\t\t\t  printf (\"R_MSP430_2X_PCREL (shrinking with new opcode\"\n+\t\t\t\t  \" 0x%x)\\n\", rx->t0);\n+\t\t      }\n \t\t    else\n-\t\t      irel->r_info = ELF32_R_INFO (ELF32_R_SYM (irel->r_info),\n-\t\t\t\t\t\t   R_MSP430_10_PCREL);\n+\t\t      {\n+\t\t\tirel->r_info = ELF32_R_INFO (ELF32_R_SYM (irel->r_info),\n+\t\t\t\t\t\t     R_MSP430_10_PCREL);\n+\t\t\tif (debug_relocs)\n+\t\t\t  printf (\"R_MSP430_10_PCREL (shrinking with new opcode\"\n+\t\t\t\t  \" 0x%x)\\n\", rx->t0);\n+\t\t      }\n \t\t  }\n \n \t\t/* Fix the opcode right way.  */\n@@ -2266,12 +2345,18 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n \t\t  {\n \t\t    irel->r_info = ELF32_R_INFO (ELF32_R_SYM (irel->r_info),\n \t\t\t\t\t\t R_MSP430X_10_PCREL);\n+\t\t    if (debug_relocs)\n+\t\t      printf (\"      R_MSP430X_16 -> R_MSP430X_10_PCREL \");\n \t\t  }\n \t\telse\n \t\t  {\n \t\t    irel->r_info = ELF32_R_INFO (ELF32_R_SYM (irel->r_info),\n \t\t\t\t\t\t R_MSP430_10_PCREL);\n+\t\t    if (debug_relocs)\n+\t\t      printf (\"      R_MSP430_16 -> R_MSP430_10_PCREL \");\n \t\t  }\n+\t\tif (debug_relocs)\n+\t\t  printf (\"(shrinking with new opcode 0x3c00)\\n\");\n \n \t\t/* Fix the opcode right way.  */\n \t\tbfd_put_16 (abfd, 0x3c00, contents + irel->r_offset - 2);"
    }
  ]
}