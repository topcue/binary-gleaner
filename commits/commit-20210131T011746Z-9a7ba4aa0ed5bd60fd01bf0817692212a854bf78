{
  "sha": "9a7ba4aa0ed5bd60fd01bf0817692212a854bf78",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWE3YmE0YWEwZWQ1YmQ2MGZkMDFiZjA4MTc2OTIyMTJhODU0YmY3OA==",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-01-19T03:59:19Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-01-31T01:17:46Z"
    },
    "message": "sim: common: change gennltvals helper to Python\n\nThis tool is only run by developers and not in a release build,\nso rewrite it in Python to make it more maintainable.",
    "tree": {
      "sha": "55b72c71a97f7d2a9aa3ed943ad28b0555aa9dfb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/55b72c71a97f7d2a9aa3ed943ad28b0555aa9dfb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9a7ba4aa0ed5bd60fd01bf0817692212a854bf78",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a7ba4aa0ed5bd60fd01bf0817692212a854bf78",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9a7ba4aa0ed5bd60fd01bf0817692212a854bf78",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a7ba4aa0ed5bd60fd01bf0817692212a854bf78/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ca51543cf525edfdf3ed0822f288988d380382c9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca51543cf525edfdf3ed0822f288988d380382c9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ca51543cf525edfdf3ed0822f288988d380382c9"
    }
  ],
  "stats": {
    "total": 483,
    "additions": 243,
    "deletions": 240
  },
  "files": [
    {
      "sha": "47aae1aaf5b4543206f121ccef28afcbdcc6b19e",
      "filename": "sim/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a7ba4aa0ed5bd60fd01bf0817692212a854bf78/sim/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a7ba4aa0ed5bd60fd01bf0817692212a854bf78/sim/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ChangeLog?ref=9a7ba4aa0ed5bd60fd01bf0817692212a854bf78",
      "patch": "@@ -1,3 +1,7 @@\n+2021-01-30  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* Makefile.in (nltvals): Change to gennltvals.py.\n+\n 2021-01-30  Mike Frysinger  <vapier@gentoo.org>\n \n \t* README-HACKING: Delete reference to sizeof_pc."
    },
    {
      "sha": "1a2dbb145e66cf6317e5b8f89f416cc5207fae09",
      "filename": "sim/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a7ba4aa0ed5bd60fd01bf0817692212a854bf78/sim/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a7ba4aa0ed5bd60fd01bf0817692212a854bf78/sim/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/Makefile.in?ref=9a7ba4aa0ed5bd60fd01bf0817692212a854bf78",
      "patch": "@@ -232,7 +232,7 @@ config.status: configure\n # An alternative is to slurp in the tables at runtime.\n .PHONY: nltvals\n nltvals:\n-\t$(SHELL) $(abs_srcdir)/common/gennltvals.sh --cpp \"$(CPP)\" --output nltvals.def --srcroot $(srcroot) && \\\n+\t$(abs_srcdir)/common/gennltvals.py --cpp \"$(CPP)\" --output nltvals.def --srcroot $(srcroot) && \\\n \t$(SHELL) $(srcroot)/move-if-change nltvals.def $(abs_srcdir)/common/nltvals.def\n \n # Utility to run autoconf in each directory that uses the common framework."
    },
    {
      "sha": "a00866dcd46e775e1043da47ddf65d1ed029de96",
      "filename": "sim/common/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a7ba4aa0ed5bd60fd01bf0817692212a854bf78/sim/common/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a7ba4aa0ed5bd60fd01bf0817692212a854bf78/sim/common/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/ChangeLog?ref=9a7ba4aa0ed5bd60fd01bf0817692212a854bf78",
      "patch": "@@ -1,3 +1,9 @@\n+2021-01-30  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* gennltvals.sh: Replace shell script with ...\n+\t* gennltvals.py: ... this Python script.\n+\t* nltvals.def: Regenerate.\n+\n 2021-01-30  Mike Frysinger  <vapier@gentoo.org>\n \n \t* sim-watch.c (schedule_watchpoint): Change sizeof_pc to sizeof"
    },
    {
      "sha": "3ca510d0388928fd4d48c3e7bf3ce4215614f4e3",
      "filename": "sim/common/gennltvals.py",
      "status": "added",
      "additions": 230,
      "deletions": 0,
      "changes": 230,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a7ba4aa0ed5bd60fd01bf0817692212a854bf78/sim/common/gennltvals.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a7ba4aa0ed5bd60fd01bf0817692212a854bf78/sim/common/gennltvals.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/gennltvals.py?ref=9a7ba4aa0ed5bd60fd01bf0817692212a854bf78",
      "patch": "@@ -0,0 +1,230 @@\n+#!/usr/bin/env python3\n+# Copyright (C) 1996-2021 Free Software Foundation, Inc.\n+#\n+# This file is part of the GNU simulators.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+\"\"\"Helper to generate nltvals.def.\n+\n+nltvals.def is a file that describes various newlib/libgloss target values used\n+by the host/target interface.  This needs to be rerun whenever the newlib source\n+changes.  Developers manually run it.\n+\n+If the path to newlib is not specified, it will be searched for in:\n+- the root of this source tree\n+- alongside this source tree\n+\"\"\"\n+\n+import argparse\n+from pathlib import Path\n+import re\n+import subprocess\n+import sys\n+from typing import Iterable, List, TextIO\n+\n+\n+PROG = Path(__file__).name\n+\n+# Unfortunately, each newlib/libgloss port has seen fit to define their own\n+# syscall.h file.  This means that system call numbers can vary for each port.\n+# Support for all this crud is kept here, rather than trying to get too fancy.\n+# If you want to try to improve this, please do, but don't break anything.\n+# Note that there is a standard syscall.h file (libgloss/syscall.h) now which\n+# hopefully more targets can use.\n+#\n+# NB: New ports should use libgloss, not newlib.\n+TARGET_DIRS = {\n+    'cr16': 'libgloss/cr16/sys',\n+    'd10v': 'newlib/libc/sys/d10v/sys',\n+    'i960': 'libgloss/i960',\n+    'mcore': 'libgloss/mcore',\n+    'v850': 'libgloss/v850/sys',\n+}\n+TARGETS = {\n+    'bfin',\n+    'cr16',\n+    'd10v',\n+    'fr30',\n+    'frv',\n+    'i960',\n+    'lm32',\n+    'm32r',\n+    'mcore',\n+    'mn10200',\n+    'mn10300',\n+    'msp430',\n+    'pru',\n+    'sparc',\n+    'v850',\n+}\n+\n+# Make sure TARGET_DIRS doesn't gain any typos.\n+assert not set(TARGET_DIRS) - TARGETS\n+\n+# The header for the generated def file.\n+FILE_HEADER = f\"\"\"\\\n+/* Newlib/libgloss macro values needed by remote target support.  */\n+/* This file is machine generated by {PROG}.  */\\\n+\"\"\"\n+\n+\n+def gentvals(output: TextIO, cpp: str, srctype: str, srcdir: Path,\n+             headers: Iterable[str],\n+             pattern: str,\n+             target: str = None):\n+    \"\"\"Extract constants from the specified files using a regular expression.\n+\n+    We'll run things through the preprocessor.\n+    \"\"\"\n+    headers = tuple(headers)\n+\n+    # Require all files exist in order to regenerate properly.\n+    for header in headers:\n+        fullpath = srcdir / header\n+        assert fullpath.exists(), f'{fullpath} does not exist'\n+\n+    if target is None:\n+        print(f'#ifdef {srctype}_defs', file=output)\n+    else:\n+        print(f'#ifdef NL_TARGET_{target}', file=output)\n+        print(f'#ifdef {srctype}_defs', file=output)\n+\n+    print('\\n'.join(f'/* from {x} */' for x in headers), file=output)\n+\n+    if target is None:\n+        print(f'/* begin {srctype} target macros */', file=output)\n+    else:\n+        print(f'/* begin {target} {srctype} target macros */', file=output)\n+\n+    # Extract all the symbols.\n+    srcfile = ''.join(f'#include <{x}>\\n' for x in headers)\n+    syms = set()\n+    define_pattern = re.compile(r'^#\\s*define\\s+(' + pattern + ')')\n+    for header in headers:\n+        with open(srcdir / header, 'r', encoding='utf-8') as fp:\n+            data = fp.read()\n+        for line in data.splitlines():\n+            m = define_pattern.match(line)\n+            if m:\n+                syms.add(m.group(1))\n+    for sym in sorted(syms):\n+        srcfile += f'#ifdef {sym}\\nDEFVAL {{ \"{sym}\", {sym} }},\\n#endif\\n'\n+\n+    result = subprocess.run(\n+        f'{cpp} -E -I\"{srcdir}\" -', shell=True, check=True, encoding='utf-8',\n+        input=srcfile, capture_output=True)\n+    for line in result.stdout.splitlines():\n+        if line.startswith('DEFVAL '):\n+            print(line[6:].rstrip(), file=output)\n+\n+    if target is None:\n+        print(f'/* end {srctype} target macros */', file=output)\n+        print('#endif', file=output)\n+    else:\n+        print(f'/* end {target} {srctype} target macros */', file=output)\n+        print('#endif', file=output)\n+        print('#endif', file=output)\n+\n+\n+def gen_common(output: TextIO, newlib: Path, cpp: str):\n+    \"\"\"Generate the common C library constants.\n+\n+    No arch should override these.\n+    \"\"\"\n+    gentvals(output, cpp, 'errno', newlib / 'newlib/libc/include',\n+             ('errno.h', 'sys/errno.h'), 'E[A-Z0-9]*')\n+\n+    gentvals(output, cpp, 'signal', newlib / 'newlib/libc/include',\n+             ('signal.h', 'sys/signal.h'), r'SIG[A-Z0-9]*')\n+\n+    gentvals(output, cpp, 'open', newlib / 'newlib/libc/include',\n+             ('fcntl.h', 'sys/fcntl.h', 'sys/_default_fcntl.h'), r'O_[A-Z0-9]*')\n+\n+\n+def gen_targets(output: TextIO, newlib: Path, cpp: str):\n+    \"\"\"Generate the target-specific lists.\"\"\"\n+    for target in sorted(TARGETS):\n+        subdir = TARGET_DIRS.get(target, 'libgloss')\n+        gentvals(output, cpp, 'sys', newlib / subdir, ('syscall.h',),\n+                 r'SYS_[_a-zA-Z0-9]*', target=target)\n+\n+\n+def gen(output: TextIO, newlib: Path, cpp: str):\n+    \"\"\"Generate all the things!\"\"\"\n+    print(FILE_HEADER, file=output)\n+    gen_common(output, newlib, cpp)\n+    gen_targets(output, newlib, cpp)\n+\n+\n+def get_parser() -> argparse.ArgumentParser:\n+    \"\"\"Get CLI parser.\"\"\"\n+    parser = argparse.ArgumentParser(\n+        description=__doc__,\n+        formatter_class=argparse.RawDescriptionHelpFormatter)\n+    parser.add_argument(\n+        '-o', '--output', type=Path,\n+        help='write to the specified file instead of stdout')\n+    parser.add_argument(\n+        '--cpp', type=str, default='cpp',\n+        help='the preprocessor to use')\n+    parser.add_argument(\n+        '--srcroot', type=Path,\n+        help='the root of this source tree')\n+    parser.add_argument(\n+        'newlib', nargs='?', type=Path,\n+        help='path to the newlib+libgloss source tree')\n+    return parser\n+\n+\n+def parse_args(argv: List[str]) -> argparse.Namespace:\n+    \"\"\"Process the command line & default options.\"\"\"\n+    parser = get_parser()\n+    opts = parser.parse_args(argv)\n+\n+    if opts.srcroot is None:\n+        opts.srcroot = Path(__file__).resolve().parent.parent.parent\n+\n+    if opts.newlib is None:\n+        # Try to find newlib relative to our source tree.\n+        if (opts.srcroot / 'newlib').is_dir():\n+            # If newlib is manually in the same source tree, use it.\n+            if (opts.srcroot / 'libgloss').is_dir():\n+                opts.newlib = opts.srcroot\n+            else:\n+                opts.newlib = opts.srcroot / 'newlib'\n+        elif (opts.srcroot.parent / 'newlib').is_dir():\n+            # Or see if it's alongside the gdb/binutils repo.\n+            opts.newlib = opts.srcroot.parent / 'newlib'\n+    if opts.newlib is None or not opts.newlib.is_dir():\n+        parser.error('unable to find newlib')\n+\n+    return opts\n+\n+\n+def main(argv: List[str]) -> int:\n+    \"\"\"The main entry point for scripts.\"\"\"\n+    opts = parse_args(argv)\n+\n+    if opts.output is not None:\n+        output = open(opts.output, 'w', encoding='utf-8')\n+    else:\n+        output = sys.stdout\n+\n+    gen(output, opts.newlib, opts.cpp)\n+    return 0\n+\n+\n+if __name__ == '__main__':\n+    sys.exit(main(sys.argv[1:]))"
    },
    {
      "sha": "869cba273ccf10b5da327bc1d2f9a523758ef52e",
      "filename": "sim/common/gennltvals.sh",
      "status": "removed",
      "additions": 0,
      "deletions": 238,
      "changes": 238,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca51543cf525edfdf3ed0822f288988d380382c9/sim/common/gennltvals.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca51543cf525edfdf3ed0822f288988d380382c9/sim/common/gennltvals.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/gennltvals.sh?ref=ca51543cf525edfdf3ed0822f288988d380382c9",
      "patch": "@@ -1,238 +0,0 @@\n-#! /bin/sh\n-# Copyright (C) 1996-2021 Free Software Foundation, Inc.\n-#\n-# This file is part of the GNU simulators.\n-#\n-# This program is free software; you can redistribute it and/or modify\n-# it under the terms of the GNU General Public License as published by\n-# the Free Software Foundation; either version 3 of the License, or\n-# (at your option) any later version.\n-#\n-# This program is distributed in the hope that it will be useful,\n-# but WITHOUT ANY WARRANTY; without even the implied warranty of\n-# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-# GNU General Public License for more details.\n-#\n-# You should have received a copy of the GNU General Public License\n-# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n-\n-# Display the tool usage and exit.\n-usage() {\n-  cat <<EOF\n-Usage: $0 [path to newlib source tree]\n-\n-Generate nltvals.def, a file that describes various newlib/libgloss target\n-values used by the host/target interface.  This needs to be rerun whenever\n-the newlib source changes.  Developers manually run it.\n-\n-If the path to newlib is not specified, it will be searched for in:\n-- the root of this source tree\n-- alongside this source tree\n-\n-Options:\n-  -o, --output <file>   Write to the specified file instead of stdout.\n-  --cpp <cpp>           The preprocessor to use.\n-  --srcroot <dir>       The root of this source tree.\n-  -h, --help            This text you're reading!\n-EOF\n-  if [ $# -gt 0 ]; then\n-    error \"$*\"\n-  fi\n-  exit 0\n-}\n-\n-# Show an error message and exit.\n-error() {\n-  echo \"$0: error: $*\" >&2\n-  exit 1\n-}\n-\n-ARG_CPP=\"cpp\"\n-ARG_SRCROOT=\"\"\n-ARG_NEWLIB=\"\"\n-ARG_OUTPUT=\"\"\n-\n-# Emit the header for this generated def file.\n-gen_header() {\n-  cat <<EOF\n-/* Newlib/libgloss macro values needed by remote target support.  */\n-/* This file is machine generated by gennltvals.sh.  */\n-EOF\n-}\n-\n-# Extract constants from the specified files using a regular expression and the\n-# preprocessor.\n-gentvals() {\n-  target=$1\n-  type=$2\n-  dir=$3\n-  # FIXME: Would be nice to process #include's in these files.\n-  files=$4\n-  pattern=$5\n-\n-  # Require all files exist in order to regenerate properly.\n-  for f in ${files}; do\n-    if [ ! -f \"${dir}/${f}\" ]; then\n-      error \"file does not exist: ${dir}/${f}\"\n-    fi\n-  done\n-\n-  if [ -z \"${target}\" ]; then\n-    echo \"#ifdef ${type}_defs\"\n-  else\n-    echo \"#ifdef NL_TARGET_${target}\"\n-    echo \"#ifdef ${type}_defs\"\n-  fi\n-\n-  printf \"/* from %s */\\n\" ${files}\n-\n-  if [ -z \"${target}\" ]; then\n-    echo \"/* begin ${type} target macros */\"\n-  else\n-    echo \"/* begin ${target} ${type} target macros */\"\n-  fi\n-\n-  # Extract all the symbols.\n-  (\n-  printf '#include <%s>\\n' ${files}\n-  for f in ${files}; do\n-    sed -E -n -e \"/^# *define[[:space:]]${pattern}/{\\\n-        s|# *define[[:space:]](${pattern})[[:space:]]*([^[:space:]][^[:space:]]*).*$|\\1|; \\\n-        p}\" \\\n-      \"${dir}/${f}\"\n-  done |\n-  sort -u |\n-  while read -r sym; do\n-    echo \"#ifdef ${sym}\"\n-    echo \"DEFVAL { \\\"${sym}\\\", ${sym} },\"\n-    echo \"#endif\"\n-  done\n-  ) |\n-  ${ARG_CPP} -E -I\"${dir}\" - |\n-  sed -E -n -e '/^DEFVAL/{s/DEFVAL//; s/[[:space:]]+/ /; p}'\n-\n-  if [ -z \"${target}\" ]; then\n-    echo \"/* end ${type} target macros */\"\n-    echo \"#endif\"\n-  else\n-    echo \"/* end ${target} ${type} target macros */\"\n-    echo \"#endif\"\n-    echo \"#endif\"\n-  fi\n-}\n-\n-# Generate the common C library constants.  No arch should override these.\n-gen_common() {\n-  gentvals \"\" errno ${ARG_NEWLIB}/newlib/libc/include \\\n-    \"errno.h sys/errno.h\" 'E[[:upper:][:digit:]]*'\n-\n-  gentvals \"\" signal ${ARG_NEWLIB}/newlib/libc/include \\\n-    \"signal.h sys/signal.h\" 'SIG[[:upper:][:digit:]]*'\n-\n-  gentvals \"\" open ${ARG_NEWLIB}/newlib/libc/include \\\n-    \"fcntl.h sys/fcntl.h sys/_default_fcntl.h\" 'O_[[:upper:][:digit:]]*'\n-}\n-\n-# Unfortunately, each newlib/libgloss port has seen fit to define their own\n-# syscall.h file.  This means that system call numbers can vary for each port.\n-# Support for all this crud is kept here, rather than trying to get too fancy.\n-# If you want to try to improve this, please do, but don't break anything.\n-# Note that there is a standard syscall.h file (libgloss/syscall.h) now which\n-# hopefully more targets can use.\n-#\n-# NB: New ports should use libgloss, not newlib.\n-gen_arch() {\n-  target=\"$1\"\n-  dir=\"${2:-libgloss}\"\n-  gentvals \"${target}\" sys \"${ARG_NEWLIB}/${dir}\" \"syscall.h\" 'SYS_[_[:alnum:]]*'\n-}\n-\n-gen_arches() {\n-  gen_arch bfin\n-  gen_arch cr16 libgloss/cr16/sys\n-  gen_arch d10v newlib/libc/sys/d10v/sys\n-  gen_arch fr30\n-  gen_arch frv\n-  gen_arch i960 libgloss/i960\n-  gen_arch lm32\n-  gen_arch m32r\n-  gen_arch mcore libgloss/mcore\n-  gen_arch mn10200\n-  gen_arch mn10300\n-  gen_arch msp430\n-  gen_arch pru\n-  gen_arch sparc\n-  gen_arch v850 libgloss/v850/sys\n-}\n-\n-# Process the script command line options.\n-parse_opts() {\n-  while [ $# -gt 0 ]; do\n-    case $1 in\n-      --cpp)\n-        ARG_CPP=\"$2\"\n-        shift\n-        ;;\n-      -o|--output)\n-        ARG_OUTPUT=\"$2\"\n-        shift\n-        ;;\n-      --srcroot)\n-        ARG_SRCROOT=\"$2\"\n-        shift\n-        ;;\n-      -h|--help)\n-        usage\n-        ;;\n-      --)\n-        shift\n-        break\n-        ;;\n-      -*)\n-        usage \"unknown option: $1\"\n-        ;;\n-      *)\n-        break\n-        ;;\n-    esac\n-    shift\n-  done\n-\n-  if [ $# -gt 2 ]; then\n-    error \"too many arguments: $*\"\n-  elif [ $# -eq 1 ]; then\n-    ARG_NEWLIB=\"$1\"\n-  fi\n-\n-  # Try to find newlib relative to our source tree.\n-  if [ -z \"${ARG_NEWLIB}\" ]; then\n-    if [ -z \"${ARG_SRCROOT}\" ]; then\n-      ARG_SRCROOT=\"$(dirname \"$0\")/../..\"\n-    fi\n-    if [ -d \"${ARG_SRCROOT}/newlib\" ]; then\n-      # If newlib is manually in the same source tree, use it.\n-      ARG_NEWLIB=\"${ARG_SRCROOT}/newlib\"\n-    elif [ -d \"${ARG_SRCROOT}/../newlib\" ]; then\n-      # Or see if it's alongside the gdb/binutils repo.\n-      ARG_NEWLIB=\"${ARG_SRCROOT}/../newlib\"\n-    else\n-      error \"unable to find newlib\"\n-    fi\n-  fi\n-}\n-\n-main() {\n-  # The error checking isn't perfect, but should be good enough for this script.\n-  set -e\n-\n-  parse_opts \"$@\"\n-\n-  if [ -n \"${ARG_OUTPUT}\" ]; then\n-    exec >\"${ARG_OUTPUT}\" || exit 1\n-  fi\n-\n-  gen_header\n-  gen_common\n-  gen_arches\n-}\n-main \"$@\""
    },
    {
      "sha": "4ab05642d1263848c27dc6fcb6363664de8e95b2",
      "filename": "sim/common/nltvals.def",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a7ba4aa0ed5bd60fd01bf0817692212a854bf78/sim/common/nltvals.def",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a7ba4aa0ed5bd60fd01bf0817692212a854bf78/sim/common/nltvals.def",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/nltvals.def?ref=9a7ba4aa0ed5bd60fd01bf0817692212a854bf78",
      "patch": "@@ -1,5 +1,5 @@\n /* Newlib/libgloss macro values needed by remote target support.  */\n-/* This file is machine generated by gennltvals.sh.  */\n+/* This file is machine generated by gennltvals.py.  */\n #ifdef errno_defs\n /* from errno.h */\n /* from sys/errno.h */\n@@ -604,6 +604,7 @@\n  { \"SYS_rename\", 134 },\n  { \"SYS_stat\", 38 },\n  { \"SYS_time\", 23 },\n+ { \"SYS_times\", 43 },\n  { \"SYS_unlink\", 10 },\n  { \"SYS_utime\", 201 },\n  { \"SYS_wait\", 202 },"
    }
  ]
}