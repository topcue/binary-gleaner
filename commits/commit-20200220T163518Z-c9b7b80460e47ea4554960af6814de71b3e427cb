{
  "sha": "c9b7b80460e47ea4554960af6814de71b3e427cb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzliN2I4MDQ2MGU0N2VhNDU1NDk2MGFmNjgxNGRlNzFiM2U0MjdjYg==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-17T15:12:02Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-20T16:35:18Z"
    },
    "message": "gdbserver: turn target ops 'multifs_{open, readlink, unlink}' into methods\n\ngdbserver/ChangeLog:\n2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn process_stratum_target's multifs_open, multifs_readlink,\n\tmultifs_unlink ops into methods of process_target.\n\n\t* target.h (struct process_stratum_target): Remove the target ops.\n\t(class process_target): Add the target ops.  Also add\n\t'supports_multifs'.\n\t* target.cc: Include \"fcntl.h\", \"unistd.h\", \"sys/types.h\", and\n\t\"sys/stat.h\".\n\t(process_target::supports_multifs): Define.\n\t(process_target::multifs_open): Define.\n\t(process_target::multifs_readlink): Define.\n\t(process_target::multifs_unlink): Define.\n\n\tUpdate the derived classes and callers below.\n\n\t* hostio.cc (handle_setfs): Update.\n\t(handle_open): Update.\n\t(handle_unlink): Update.\n\t(handle_readlink): Update.\n\t* linux-low.cc (linux_target_ops): Update.\n\t(linux_process_target::supports_multifs): Define.\n\t(linux_process_target::multifs_open): Define.\n\t(linux_process_target::multifs_readlink): Define.\n\t(linux_process_target::multifs_unlink): Define.\n\t* linux-low.h (class linux_process_target): Update.\n\t* lynx-low.cc (lynx_target_ops): Update.\n\t* nto-low.cc (nto_target_ops): Update.\n\t* win32-low.cc (win32_target_ops): Update.",
    "tree": {
      "sha": "46a37f8679442430281c5ea253bcb51a0e49ce2b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/46a37f8679442430281c5ea253bcb51a0e49ce2b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c9b7b80460e47ea4554960af6814de71b3e427cb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c9b7b80460e47ea4554960af6814de71b3e427cb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c9b7b80460e47ea4554960af6814de71b3e427cb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c9b7b80460e47ea4554960af6814de71b3e427cb/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8247b8236bc5528993d9b2938bc0544a5acea21d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8247b8236bc5528993d9b2938bc0544a5acea21d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8247b8236bc5528993d9b2938bc0544a5acea21d"
    }
  ],
  "stats": {
    "total": 175,
    "additions": 130,
    "deletions": 45
  },
  "files": [
    {
      "sha": "dee5728f0aa6452da630a3fc2c790c1692c9cdbf",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9b7b80460e47ea4554960af6814de71b3e427cb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9b7b80460e47ea4554960af6814de71b3e427cb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=c9b7b80460e47ea4554960af6814de71b3e427cb",
      "patch": "@@ -1,3 +1,34 @@\n+2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn process_stratum_target's multifs_open, multifs_readlink,\n+\tmultifs_unlink ops into methods of process_target.\n+\n+\t* target.h (struct process_stratum_target): Remove the target ops.\n+\t(class process_target): Add the target ops.  Also add\n+\t'supports_multifs'.\n+\t* target.cc: Include \"fcntl.h\", \"unistd.h\", \"sys/types.h\", and\n+\t\"sys/stat.h\".\n+\t(process_target::supports_multifs): Define.\n+\t(process_target::multifs_open): Define.\n+\t(process_target::multifs_readlink): Define.\n+\t(process_target::multifs_unlink): Define.\n+\n+\tUpdate the derived classes and callers below.\n+\n+\t* hostio.cc (handle_setfs): Update.\n+\t(handle_open): Update.\n+\t(handle_unlink): Update.\n+\t(handle_readlink): Update.\n+\t* linux-low.cc (linux_target_ops): Update.\n+\t(linux_process_target::supports_multifs): Define.\n+\t(linux_process_target::multifs_open): Define.\n+\t(linux_process_target::multifs_readlink): Define.\n+\t(linux_process_target::multifs_unlink): Define.\n+\t* linux-low.h (class linux_process_target): Update.\n+\t* lynx-low.cc (lynx_target_ops): Update.\n+\t* nto-low.cc (nto_target_ops): Update.\n+\t* win32-low.cc (win32_target_ops): Update.\n+\n 2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn process_stratum_target's pid_to_exec_file op into a method"
    },
    {
      "sha": "6223b24a8870f53649515b6fd00cedd0651b712e",
      "filename": "gdbserver/hostio.cc",
      "status": "modified",
      "additions": 10,
      "deletions": 12,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9b7b80460e47ea4554960af6814de71b3e427cb/gdbserver/hostio.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9b7b80460e47ea4554960af6814de71b3e427cb/gdbserver/hostio.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/hostio.cc?ref=c9b7b80460e47ea4554960af6814de71b3e427cb",
      "patch": "@@ -272,9 +272,7 @@ handle_setfs (char *own_buf)\n      then there's no point in GDB sending \"vFile:setfs:\" packets.  We\n      reply with an empty packet (i.e. we pretend we don't understand\n      \"vFile:setfs:\") and that should stop GDB sending any more.  */\n-  if (the_target->multifs_open == NULL\n-      && the_target->multifs_unlink == NULL\n-      && the_target->multifs_readlink == NULL)\n+  if (!the_target->pt->supports_multifs ())\n     {\n       own_buf[0] = '\\0';\n       return;\n@@ -321,9 +319,9 @@ handle_open (char *own_buf)\n \n   /* We do not need to convert MODE, since the fileio protocol\n      uses the standard values.  */\n-  if (hostio_fs_pid != 0 && the_target->multifs_open != NULL)\n-    fd = the_target->multifs_open (hostio_fs_pid, filename,\n-\t\t\t\t   flags, mode);\n+  if (hostio_fs_pid != 0)\n+    fd = the_target->pt->multifs_open (hostio_fs_pid, filename,\n+\t\t\t\t       flags, mode);\n   else\n     fd = open (filename, flags, mode);\n \n@@ -541,8 +539,8 @@ handle_unlink (char *own_buf)\n       return;\n     }\n \n-  if (hostio_fs_pid != 0 && the_target->multifs_unlink != NULL)\n-    ret = the_target->multifs_unlink (hostio_fs_pid, filename);\n+  if (hostio_fs_pid != 0)\n+    ret = the_target->pt->multifs_unlink (hostio_fs_pid, filename);\n   else\n     ret = unlink (filename);\n \n@@ -571,10 +569,10 @@ handle_readlink (char *own_buf, int *new_packet_len)\n       return;\n     }\n \n-  if (hostio_fs_pid != 0 && the_target->multifs_readlink != NULL)\n-    ret = the_target->multifs_readlink (hostio_fs_pid, filename,\n-\t\t\t\t\tlinkname,\n-\t\t\t\t\tsizeof (linkname) - 1);\n+  if (hostio_fs_pid != 0)\n+    ret = the_target->pt->multifs_readlink (hostio_fs_pid, filename,\n+\t\t\t\t\t    linkname,\n+\t\t\t\t\t    sizeof (linkname) - 1);\n   else\n     ret = readlink (filename, linkname, sizeof (linkname) - 1);\n "
    },
    {
      "sha": "c49ba8924682b13724e5110f2a75968f67c9772a",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 26,
      "deletions": 3,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9b7b80460e47ea4554960af6814de71b3e427cb/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9b7b80460e47ea4554960af6814de71b3e427cb/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=c9b7b80460e47ea4554960af6814de71b3e427cb",
      "patch": "@@ -6453,6 +6453,32 @@ linux_process_target::pid_to_exec_file (int pid)\n   return linux_proc_pid_to_exec_file (pid);\n }\n \n+bool\n+linux_process_target::supports_multifs ()\n+{\n+  return true;\n+}\n+\n+int\n+linux_process_target::multifs_open (int pid, const char *filename,\n+\t\t\t\t    int flags, mode_t mode)\n+{\n+  return linux_mntns_open_cloexec (pid, filename, flags, mode);\n+}\n+\n+int\n+linux_process_target::multifs_unlink (int pid, const char *filename)\n+{\n+  return linux_mntns_unlink (pid, filename);\n+}\n+\n+ssize_t\n+linux_process_target::multifs_readlink (int pid, const char *filename,\n+\t\t\t\t\tchar *buf, size_t bufsiz)\n+{\n+  return linux_mntns_readlink (pid, filename, buf, bufsiz);\n+}\n+\n #if defined PT_GETDSBT || defined PTRACE_GETFDPIC\n struct target_loadseg\n {\n@@ -7483,9 +7509,6 @@ linux_get_hwcap2 (int wordsize)\n static linux_process_target the_linux_target;\n \n static process_stratum_target linux_target_ops = {\n-  linux_mntns_open_cloexec,\n-  linux_mntns_unlink,\n-  linux_mntns_readlink,\n   linux_breakpoint_kind_from_pc,\n   linux_sw_breakpoint_from_kind,\n   linux_proc_tid_get_name,"
    },
    {
      "sha": "9fd2bc0ea35a42b29be19692c318d0fef1ced154",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9b7b80460e47ea4554960af6814de71b3e427cb/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9b7b80460e47ea4554960af6814de71b3e427cb/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=c9b7b80460e47ea4554960af6814de71b3e427cb",
      "patch": "@@ -452,6 +452,16 @@ class linux_process_target : public process_target\n   bool supports_pid_to_exec_file () override;\n \n   char *pid_to_exec_file (int pid) override;\n+\n+  bool supports_multifs () override;\n+\n+  int multifs_open (int pid, const char *filename, int flags,\n+\t\t    mode_t mode) override;\n+\n+  int multifs_unlink (int pid, const char *filename) override;\n+\n+  ssize_t multifs_readlink (int pid, const char *filename, char *buf,\n+\t\t\t    size_t bufsiz) override;\n };\n \n #define get_thread_lwp(thr) ((struct lwp_info *) (thread_target_data (thr)))"
    },
    {
      "sha": "ad669c8e9d7ffe6a682fc7ee02979c0a34b69dbd",
      "filename": "gdbserver/lynx-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9b7b80460e47ea4554960af6814de71b3e427cb/gdbserver/lynx-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9b7b80460e47ea4554960af6814de71b3e427cb/gdbserver/lynx-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.cc?ref=c9b7b80460e47ea4554960af6814de71b3e427cb",
      "patch": "@@ -735,9 +735,6 @@ static lynx_process_target the_lynx_target;\n /* The LynxOS target_ops vector.  */\n \n static process_stratum_target lynx_target_ops = {\n-  NULL,  /* multifs_open */\n-  NULL,  /* multifs_unlink */\n-  NULL,  /* multifs_readlink */\n   NULL,  /* breakpoint_kind_from_pc */\n   NULL,  /* sw_breakpoint_from_kind */\n   NULL,  /* thread_name */"
    },
    {
      "sha": "1140b5b6d498eca653568f907e88568f0473a659",
      "filename": "gdbserver/nto-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9b7b80460e47ea4554960af6814de71b3e427cb/gdbserver/nto-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9b7b80460e47ea4554960af6814de71b3e427cb/gdbserver/nto-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.cc?ref=c9b7b80460e47ea4554960af6814de71b3e427cb",
      "patch": "@@ -947,9 +947,6 @@ nto_sw_breakpoint_from_kind (int kind, int *size)\n static nto_process_target the_nto_target;\n \n static process_stratum_target nto_target_ops = {\n-  NULL, /* multifs_open */\n-  NULL, /* multifs_unlink */\n-  NULL, /* multifs_readlink */\n   NULL, /* breakpoint_kind_from_pc */\n   nto_sw_breakpoint_from_kind,\n   NULL, /* thread_name */"
    },
    {
      "sha": "4c92fa6f89dae3915aa36329dd1b3354a6a6fe6a",
      "filename": "gdbserver/target.cc",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9b7b80460e47ea4554960af6814de71b3e427cb/gdbserver/target.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9b7b80460e47ea4554960af6814de71b3e427cb/gdbserver/target.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.cc?ref=c9b7b80460e47ea4554960af6814de71b3e427cb",
      "patch": "@@ -22,6 +22,10 @@\n #include \"tracepoint.h\"\n #include \"gdbsupport/byte-vector.h\"\n #include \"hostio.h\"\n+#include <fcntl.h>\n+#include <unistd.h>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n \n process_stratum_target *the_target;\n \n@@ -771,3 +775,29 @@ process_target::pid_to_exec_file (int pid)\n {\n   gdb_assert_not_reached (\"target op pid_to_exec_file not supported\");\n }\n+\n+bool\n+process_target::supports_multifs ()\n+{\n+  return false;\n+}\n+\n+int\n+process_target::multifs_open (int pid, const char *filename,\n+\t\t\t      int flags, mode_t mode)\n+{\n+  return open (filename, flags, mode);\n+}\n+\n+int\n+process_target::multifs_unlink (int pid, const char *filename)\n+{\n+  return unlink (filename);\n+}\n+\n+ssize_t\n+process_target::multifs_readlink (int pid, const char *filename,\n+\t\t\t\t  char *buf, size_t bufsiz)\n+{\n+  return readlink (filename, buf, bufsiz);\n+}"
    },
    {
      "sha": "bf653a4d08a4547b8f8886996a015a393d61d1a4",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 23,
      "deletions": 21,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9b7b80460e47ea4554960af6814de71b3e427cb/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9b7b80460e47ea4554960af6814de71b3e427cb/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=c9b7b80460e47ea4554960af6814de71b3e427cb",
      "patch": "@@ -70,27 +70,6 @@ class process_target;\n    shared code.  */\n struct process_stratum_target\n {\n-  /* Multiple-filesystem-aware open.  Like open(2), but operating in\n-     the filesystem as it appears to process PID.  Systems where all\n-     processes share a common filesystem should set this to NULL.\n-     If NULL, the caller should fall back to open(2).  */\n-  int (*multifs_open) (int pid, const char *filename,\n-\t\t       int flags, mode_t mode);\n-\n-  /* Multiple-filesystem-aware unlink.  Like unlink(2), but operates\n-     in the filesystem as it appears to process PID.  Systems where\n-     all processes share a common filesystem should set this to NULL.\n-     If NULL, the caller should fall back to unlink(2).  */\n-  int (*multifs_unlink) (int pid, const char *filename);\n-\n-  /* Multiple-filesystem-aware readlink.  Like readlink(2), but\n-     operating in the filesystem as it appears to process PID.\n-     Systems where all processes share a common filesystem should\n-     set this to NULL.  If NULL, the caller should fall back to\n-     readlink(2).  */\n-  ssize_t (*multifs_readlink) (int pid, const char *filename,\n-\t\t\t       char *buf, size_t bufsiz);\n-\n   /* Return the breakpoint kind for this target based on PC.  The PCPTR is\n      adjusted to the real memory location in case a flag (e.g., the Thumb bit on\n      ARM) was present in the PC.  */\n@@ -501,6 +480,29 @@ class process_target\n      string should be copied into a buffer by the client if the string\n      will not be immediately used, or if it must persist.  */\n   virtual char *pid_to_exec_file (int pid);\n+\n+  /* Return true if any of the multifs ops is supported.  */\n+  virtual bool supports_multifs ();\n+\n+  /* Multiple-filesystem-aware open.  Like open(2), but operating in\n+     the filesystem as it appears to process PID.  Systems where all\n+     processes share a common filesystem should not override this.\n+     The default behavior is to use open(2).  */\n+  virtual int multifs_open (int pid, const char *filename,\n+\t\t\t    int flags, mode_t mode);\n+\n+  /* Multiple-filesystem-aware unlink.  Like unlink(2), but operates\n+     in the filesystem as it appears to process PID.  Systems where\n+     all processes share a common filesystem should not override this.\n+     The default behavior is to use unlink(2).  */\n+  virtual int multifs_unlink (int pid, const char *filename);\n+\n+  /* Multiple-filesystem-aware readlink.  Like readlink(2), but\n+     operating in the filesystem as it appears to process PID.\n+     Systems where all processes share a common filesystem should\n+     not override this.  The default behavior is to use readlink(2).  */\n+  virtual ssize_t multifs_readlink (int pid, const char *filename,\n+\t\t\t\t    char *buf, size_t bufsiz);\n };\n \n extern process_stratum_target *the_target;"
    },
    {
      "sha": "eb51a857b25d2b18f05d2d3974608aa537d81d50",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9b7b80460e47ea4554960af6814de71b3e427cb/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9b7b80460e47ea4554960af6814de71b3e427cb/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=c9b7b80460e47ea4554960af6814de71b3e427cb",
      "patch": "@@ -1858,9 +1858,6 @@ win32_sw_breakpoint_from_kind (int kind, int *size)\n static win32_process_target the_win32_target;\n \n static process_stratum_target win32_target_ops = {\n-  NULL, /* multifs_open */\n-  NULL, /* multifs_unlink */\n-  NULL, /* multifs_readlink */\n   NULL, /* breakpoint_kind_from_pc */\n   win32_sw_breakpoint_from_kind,\n   NULL, /* thread_name */"
    }
  ]
}