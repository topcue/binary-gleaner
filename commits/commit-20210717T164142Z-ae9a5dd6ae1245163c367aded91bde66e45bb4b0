{
  "sha": "ae9a5dd6ae1245163c367aded91bde66e45bb4b0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWU5YTVkZDZhZTEyNDUxNjNjMzY3YWRlZDkxYmRlNjZlNDViYjRiMA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-07-04T18:21:31Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-07-17T16:41:42Z"
    },
    "message": "Rename and refactor psymtab_include_file_name\n\nIn order to fix an index-related regression, I want to use\npsymtab_include_file_name in the DWARF index file-handling code.  This\npatch renames this function and changes it to no longer require a\npartial symtab to be passed in.  A subsequent patch will further\nrefactor this code to remove the redundant parameter (which was always\nthere but is now more obvious).",
    "tree": {
      "sha": "6cb1585b3e537d63cd0bb1595f801135ddf24401",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6cb1585b3e537d63cd0bb1595f801135ddf24401"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ae9a5dd6ae1245163c367aded91bde66e45bb4b0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ae9a5dd6ae1245163c367aded91bde66e45bb4b0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ae9a5dd6ae1245163c367aded91bde66e45bb4b0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ae9a5dd6ae1245163c367aded91bde66e45bb4b0/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3dab9e15d3ab1cde555dfbf4a958eb17eec2ecb3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3dab9e15d3ab1cde555dfbf4a958eb17eec2ecb3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3dab9e15d3ab1cde555dfbf4a958eb17eec2ecb3"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 19,
    "deletions": 18
  },
  "files": [
    {
      "sha": "bdac6f257929418f2e542d3a16f9839f2f8c554c",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 19,
      "deletions": 18,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ae9a5dd6ae1245163c367aded91bde66e45bb4b0/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ae9a5dd6ae1245163c367aded91bde66e45bb4b0/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=ae9a5dd6ae1245163c367aded91bde66e45bb4b0",
      "patch": "@@ -20606,30 +20606,30 @@ dwarf_decode_line_header (sect_offset sect_off, struct dwarf2_cu *cu)\n }\n \n /* Subroutine of dwarf_decode_lines to simplify it.\n-   Return the file name of the psymtab for the given file_entry.\n+   Return the file name for the given file_entry.\n    COMP_DIR is the compilation directory (DW_AT_comp_dir) or NULL if unknown.\n+   CU_INFO describes the CU's DW_AT_name and DW_AT_comp_dir.\n    If space for the result is malloc'd, *NAME_HOLDER will be set.\n-   Returns NULL if FILE_INDEX should be ignored, i.e., it is pst->filename.  */\n+   Returns NULL if FILE_INDEX should be ignored, i.e., it is\n+   equivalent to CU_INFO.  */\n \n static const char *\n-psymtab_include_file_name (const struct line_header *lh, const file_entry &fe,\n-\t\t\t   const dwarf2_psymtab *pst,\n+compute_include_file_name (const struct line_header *lh, const file_entry &fe,\n+\t\t\t   const file_and_directory &cu_info,\n \t\t\t   const char *comp_dir,\n \t\t\t   gdb::unique_xmalloc_ptr<char> *name_holder)\n {\n   const char *include_name = fe.name;\n   const char *include_name_to_compare = include_name;\n-  const char *pst_filename;\n-  int file_is_pst;\n \n   const char *dir_name = fe.include_dir (lh);\n \n   gdb::unique_xmalloc_ptr<char> hold_compare;\n   if (!IS_ABSOLUTE_PATH (include_name)\n       && (dir_name != NULL || comp_dir != NULL))\n     {\n-      /* Avoid creating a duplicate psymtab for PST.\n-\t We do this by comparing INCLUDE_NAME and PST_FILENAME.\n+      /* Avoid creating a duplicate name for CU_INFO.\n+\t We do this by comparing INCLUDE_NAME and CU_INFO.\n \t Before we do the comparison, however, we need to account\n \t for DIR_NAME and COMP_DIR.\n \t First prepend dir_name (if non-NULL).  If we still don't\n@@ -20664,19 +20664,17 @@ psymtab_include_file_name (const struct line_header *lh, const file_entry &fe,\n \t}\n     }\n \n-  pst_filename = pst->filename;\n   gdb::unique_xmalloc_ptr<char> copied_name;\n-  if (!IS_ABSOLUTE_PATH (pst_filename) && pst->dirname != NULL)\n+  const char *cu_filename = cu_info.name;\n+  if (!IS_ABSOLUTE_PATH (cu_filename) && cu_info.comp_dir != nullptr)\n     {\n-      copied_name.reset (concat (pst->dirname, SLASH_STRING,\n-\t\t\t\t pst_filename, (char *) NULL));\n-      pst_filename = copied_name.get ();\n+      copied_name.reset (concat (cu_info.comp_dir, SLASH_STRING,\n+\t\t\t\t cu_filename, (char *) NULL));\n+      cu_filename = copied_name.get ();\n     }\n \n-  file_is_pst = FILENAME_CMP (include_name_to_compare, pst_filename) == 0;\n-\n-  if (file_is_pst)\n-    return NULL;\n+  if (FILENAME_CMP (include_name_to_compare, cu_filename) == 0)\n+    return nullptr;\n   return include_name;\n }\n \n@@ -21378,12 +21376,15 @@ dwarf_decode_lines (struct line_header *lh, const char *comp_dir,\n     {\n       /* Now that we're done scanning the Line Header Program, we can\n \t create the psymtab of each included file.  */\n+      file_and_directory fnd;\n+      fnd.name = pst->filename;\n+      fnd.comp_dir = pst->dirname;\n       for (auto &file_entry : lh->file_names ())\n \tif (file_entry.included_p)\n \t  {\n \t    gdb::unique_xmalloc_ptr<char> name_holder;\n \t    const char *include_name =\n-\t      psymtab_include_file_name (lh, file_entry, pst,\n+\t      compute_include_file_name (lh, file_entry, fnd,\n \t\t\t\t\t comp_dir, &name_holder);\n \t    if (include_name != NULL)\n \t      dwarf2_create_include_psymtab"
    }
  ]
}