{
  "sha": "60f993ce170b91876ad41e8f7339c24afd63fac2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjBmOTkzY2UxNzBiOTE4NzZhZDQxZThmNzMzOWMyNGFmZDYzZmFjMg==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-04-15T10:58:47Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-04-15T11:31:45Z"
    },
    "message": "[binutils, ARM, 12/16] Scalar Low Overhead loop instructions for Armv8.1-M Mainline\n\ns patch is part of a series of patches to add support for Armv8.1-M Mainline instructions to binutils.\nThis patch adds support to the Scalar low overhead loop instructions:\nLE\nWLS\nDLS\n\nWe also add a new assembler resolvable relocation bfd_reloc_code_real enum for the 12-bit branch offset used in these instructions.\n\nChangeLog entries are as follows:\n*** bfd/ChnageLog ***\n\n2019-04-12  Sudakshina Das  <sudi.das@arm.com>\n\n\t* reloc.c (BFD_RELOC_ARM_THUMB_LOOP12): New.\n\t* bfd-in2.h: Regenerated.\n\t* libbfd.h: Regenerated.\n\n*** gas/ChangeLog ***\n\n2019-04-12  Sudakshina Das  <sudi.das@arm.com>\n             Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/tc-arm.c (operand_parse_code): Add OP_LR and OP_oLR\n\tfor the LR operand and optional LR operand.\n\t(parse_operands): Add switch cases for OP_LR and OP_oLR for\n\tboth type checking and value checking.\n\t(encode_thumb32_addr_mode): New entries for DLS, WLS and LE.\n\t(v8_1_loop_reloc): New helper function for handling labels\n\tfor the low overhead loop instructions.\n\t(do_t_loloop): New function to encode DLS, WLS and LE.\n\t(insns): New entries for WLS, DLS and LE.\n\t(md_pcrel_from_section): New switch case\n\tfor BFD_RELOC_ARM_THUMB_LOOP12.\n\t(md_appdy_fix): Likewise.\n\t(tc_gen_reloc): Likewise.\n\t* testsuite/gas/arm/armv8_1-m-tloop.s: New.\n\t* testsuite/gas/arm/armv8_1-m-tloop.d: New.\n\t* testsuite/gas/arm/armv8_1-m-tloop-bad.s: New.\n\t* testsuite/gas/arm/armv8_1-m-tloop-bad.d: New.\n\t* testsuite/gas/arm/armv8_1-m-tloop-bad.l: New.\n\n*** opcodes/ChangeLog ***\n\n2019-04-12  Sudakshina Das  <sudi.das@arm.com>\n\n\t* arm-dis.c (print_insn_thumb32): Updated to accept new %P\n\tand %Q patterns.",
    "tree": {
      "sha": "2326ba080630de9a1378466903b492084a476616",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2326ba080630de9a1378466903b492084a476616"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/60f993ce170b91876ad41e8f7339c24afd63fac2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/60f993ce170b91876ad41e8f7339c24afd63fac2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/60f993ce170b91876ad41e8f7339c24afd63fac2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/60f993ce170b91876ad41e8f7339c24afd63fac2/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f6b2b12db82f7b76c30ec389a67fbce5d2805323",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f6b2b12db82f7b76c30ec389a67fbce5d2805323",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f6b2b12db82f7b76c30ec389a67fbce5d2805323"
    }
  ],
  "stats": {
    "total": 246,
    "additions": 246,
    "deletions": 0
  },
  "files": [
    {
      "sha": "7876f516895a5de384f01da79dabdd2a82a16d8f",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60f993ce170b91876ad41e8f7339c24afd63fac2/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60f993ce170b91876ad41e8f7339c24afd63fac2/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=60f993ce170b91876ad41e8f7339c24afd63fac2",
      "patch": "@@ -1,3 +1,9 @@\n+2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* reloc.c (BFD_RELOC_ARM_THUMB_LOOP12): New.\n+\t* bfd-in2.h: Regenerated.\n+\t* libbfd.h: Regenerated.\n+\n 2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n \n \t* reloc.c (BFD_RELOC_THUMB_PCREL_BFCSEL): New relocation."
    },
    {
      "sha": "540b9f71c181841ea782c63d87d0d5271c864966",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60f993ce170b91876ad41e8f7339c24afd63fac2/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60f993ce170b91876ad41e8f7339c24afd63fac2/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=60f993ce170b91876ad41e8f7339c24afd63fac2",
      "patch": "@@ -3579,6 +3579,9 @@ field in the instruction.  */\n /* ARM 19-bit pc-relative branch for Branch Future Link instruction.  */\n   BFD_RELOC_ARM_THUMB_BF19,\n \n+/* ARM 12-bit pc-relative branch for Low Overhead Loop instructions.  */\n+  BFD_RELOC_ARM_THUMB_LOOP12,\n+\n /* Thumb 7-, 9-, 12-, 20-, 23-, and 25-bit pc-relative branches.\n The lowest bit must be zero and is not stored in the instruction.\n Note that the corresponding ELF R_ARM_THM_JUMPnn constant has an"
    },
    {
      "sha": "f64a8f3892ad3aff5c4570f0281875bce35846a6",
      "filename": "bfd/libbfd.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60f993ce170b91876ad41e8f7339c24afd63fac2/bfd/libbfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60f993ce170b91876ad41e8f7339c24afd63fac2/bfd/libbfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.h?ref=60f993ce170b91876ad41e8f7339c24afd63fac2",
      "patch": "@@ -1534,6 +1534,7 @@ static const char *const bfd_reloc_code_real_names[] = { \"@@uninitialized@@\",\n   \"BFD_RELOC_ARM_THUMB_BF17\",\n   \"BFD_RELOC_ARM_THUMB_BF13\",\n   \"BFD_RELOC_ARM_THUMB_BF19\",\n+  \"BFD_RELOC_ARM_THUMB_LOOP12\",\n   \"BFD_RELOC_THUMB_PCREL_BRANCH7\",\n   \"BFD_RELOC_THUMB_PCREL_BRANCH9\",\n   \"BFD_RELOC_THUMB_PCREL_BRANCH12\","
    },
    {
      "sha": "e6ba9e265027a6c34a8ad183dd5825a9af9c1f82",
      "filename": "bfd/reloc.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60f993ce170b91876ad41e8f7339c24afd63fac2/bfd/reloc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60f993ce170b91876ad41e8f7339c24afd63fac2/bfd/reloc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/reloc.c?ref=60f993ce170b91876ad41e8f7339c24afd63fac2",
      "patch": "@@ -3039,6 +3039,11 @@ ENUM\n ENUMDOC\n   ARM 19-bit pc-relative branch for Branch Future Link instruction.\n \n+ENUM\n+  BFD_RELOC_ARM_THUMB_LOOP12\n+ENUMDOC\n+  ARM 12-bit pc-relative branch for Low Overhead Loop instructions.\n+\n ENUM\n   BFD_RELOC_THUMB_PCREL_BRANCH7\n ENUMX"
    },
    {
      "sha": "ecb3702d7818891896fc931740b682feba2d0833",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60f993ce170b91876ad41e8f7339c24afd63fac2/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60f993ce170b91876ad41e8f7339c24afd63fac2/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=60f993ce170b91876ad41e8f7339c24afd63fac2",
      "patch": "@@ -1,3 +1,25 @@\n+2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n+            Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/tc-arm.c (operand_parse_code): Add OP_LR and OP_oLR\n+\tfor the LR operand and optional LR operand.\n+\t(parse_operands): Add switch cases for OP_LR and OP_oLR for\n+\tboth type checking and value checking.\n+\t(encode_thumb32_addr_mode): New entries for DLS, WLS and LE.\n+\t(v8_1_loop_reloc): New helper function for handling labels\n+\tfor the low overhead loop instructions.\n+\t(do_t_loloop): New function to encode DLS, WLS and LE.\n+\t(insns): New entries for WLS, DLS and LE.\n+\t(md_pcrel_from_section): New switch case\n+\tfor BFD_RELOC_ARM_THUMB_LOOP12.\n+\t(md_appdy_fix): Likewise.\n+\t(tc_gen_reloc): Likewise.\n+\t* testsuite/gas/arm/armv8_1-m-tloop.s: New.\n+\t* testsuite/gas/arm/armv8_1-m-tloop.d: New.\n+\t* testsuite/gas/arm/armv8_1-m-tloop-bad.s: New.\n+\t* testsuite/gas/arm/armv8_1-m-tloop-bad.d: New.\n+\t* testsuite/gas/arm/armv8_1-m-tloop-bad.l: New.\n+\n 2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n             Andre Vieira  <andre.simoesdiasvieira@arm.com>\n "
    },
    {
      "sha": "828dfc1eddce9857a1c038b2ff927d71eccda6e9",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 113,
      "deletions": 0,
      "changes": 113,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60f993ce170b91876ad41e8f7339c24afd63fac2/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60f993ce170b91876ad41e8f7339c24afd63fac2/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=60f993ce170b91876ad41e8f7339c24afd63fac2",
      "patch": "@@ -6543,6 +6543,10 @@ enum operand_parse_code\n   OP_RIWG,\t/* iWMMXt wCG register */\n   OP_RXA,\t/* XScale accumulator register */\n \n+  /* New operands for Armv8.1-M Mainline.  */\n+  OP_LR,\t/* ARM LR register */\n+  OP_RRnpcsp_I32, /* ARM register (no BadReg) or literal 1 .. 32 */\n+\n   OP_REGLST,\t/* ARM register list */\n   OP_VRSLST,\t/* VFP single-precision register list */\n   OP_VRDLST,\t/* VFP double-precision register list */\n@@ -6622,6 +6626,7 @@ enum operand_parse_code\n   OP_oI255c,\t /*\t  curly-brace enclosed, 0 .. 255 */\n \n   OP_oRR,\t /* ARM register */\n+  OP_oLR,\t /* ARM LR register */\n   OP_oRRnpc,\t /* ARM register, not the PC */\n   OP_oRRnpcsp,\t /* ARM register, neither the PC nor the SP (a.k.a. BadReg) */\n   OP_oRRw,\t /* ARM register, not r15, optional trailing ! */\n@@ -6790,6 +6795,8 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \tcase OP_RRnpc:\n \tcase OP_RRnpcsp:\n \tcase OP_oRR:\n+\tcase OP_LR:\n+\tcase OP_oLR:\n \tcase OP_RR:    po_reg_or_fail (REG_TYPE_RN);\t  break;\n \tcase OP_RCP:   po_reg_or_fail (REG_TYPE_CP);\t  break;\n \tcase OP_RCN:   po_reg_or_fail (REG_TYPE_CN);\t  break;\n@@ -7307,6 +7314,12 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \t  inst.operands[i].imm = val;\n \t  break;\n \n+\tcase OP_LR:\n+\tcase OP_oLR:\n+\t  if (inst.operands[i].reg != REG_LR)\n+\t    inst.error = _(\"operand must be LR register\");\n+\t  break;\n+\n \tdefault:\n \t  break;\n \t}\n@@ -10518,6 +10531,7 @@ encode_thumb32_addr_mode (int i, bfd_boolean is_t, bfd_boolean is_d)\n   X(_cpsid, b670, f3af8600),\t\t\t\\\n   X(_cpy,   4600, ea4f0000),\t\t\t\\\n   X(_dec_sp,80dd, f1ad0d00),\t\t\t\\\n+  X(_dls,   0000, f040e001),\t\t\t\\\n   X(_eor,   4040, ea800000),\t\t\t\\\n   X(_eors,  4040, ea900000),\t\t\t\\\n   X(_inc_sp,00dd, f10d0d00),\t\t\t\\\n@@ -10530,6 +10544,7 @@ encode_thumb32_addr_mode (int i, bfd_boolean is_t, bfd_boolean is_d)\n   X(_ldr_pc,4800, f85f0000),\t\t\t\\\n   X(_ldr_pc2,4800, f85f0000),\t\t\t\\\n   X(_ldr_sp,9800, f85d0000),\t\t\t\\\n+  X(_le,    0000, f00fc001),\t\t\t\\\n   X(_lsl,   0000, fa00f000),\t\t\t\\\n   X(_lsls,  0000, fa10f000),\t\t\t\\\n   X(_lsr,   0800, fa20f000),\t\t\t\\\n@@ -10571,6 +10586,7 @@ encode_thumb32_addr_mode (int i, bfd_boolean is_t, bfd_boolean is_d)\n   X(_yield, bf10, f3af8001),\t\t\t\\\n   X(_wfe,   bf20, f3af8002),\t\t\t\\\n   X(_wfi,   bf30, f3af8003),\t\t\t\\\n+  X(_wls,   0000, f040c001),\t\t\t\\\n   X(_sev,   bf40, f3af8004),                    \\\n   X(_sevl,  bf50, f3af8005),\t\t\t\\\n   X(_udf,   de00, f7f0a000)\n@@ -13434,6 +13450,64 @@ do_t_branch_future (void)\n     }\n }\n \n+/* Helper function for do_t_loloop to handle relocations.  */\n+static void\n+v8_1_loop_reloc (int is_le)\n+{\n+  if (inst.relocs[0].exp.X_op == O_constant)\n+    {\n+      int value = inst.relocs[0].exp.X_add_number;\n+      value = (is_le) ? -value : value;\n+\n+      if (v8_1_branch_value_check (value, 12, FALSE) == FAIL)\n+\tas_bad (BAD_BRANCH_OFF);\n+\n+      int imml, immh;\n+\n+      immh = (value & 0x00000ffc) >> 2;\n+      imml = (value & 0x00000002) >> 1;\n+\n+      inst.instruction |= (imml << 11) | (immh << 1);\n+    }\n+  else\n+    {\n+      inst.relocs[0].type = BFD_RELOC_ARM_THUMB_LOOP12;\n+      inst.relocs[0].pc_rel = 1;\n+    }\n+}\n+\n+/* To handle the Scalar Low Overhead Loop instructions\n+   in Armv8.1-M Mainline.  */\n+static void\n+do_t_loloop (void)\n+{\n+  unsigned long insn = inst.instruction;\n+\n+  set_it_insn_type (OUTSIDE_IT_INSN);\n+  inst.instruction = THUMB_OP32 (inst.instruction);\n+\n+  switch (insn)\n+    {\n+    case T_MNEM_le:\n+      /* le <label>.  */\n+      if (!inst.operands[0].present)\n+\tinst.instruction |= 1 << 21;\n+\n+      v8_1_loop_reloc (TRUE);\n+      break;\n+\n+    case T_MNEM_wls:\n+      v8_1_loop_reloc (FALSE);\n+      /* Fall through.  */\n+    case T_MNEM_dls:\n+      constraint (inst.operands[1].isreg != 1, BAD_ARGS);\n+      inst.instruction |= (inst.operands[1].reg << 16);\n+      break;\n+\n+    default: abort();\n+    }\n+}\n+\n /* Neon instruction encoder helpers.  */\n \n /* Encodings for the different types for various Neon opcodes.  */\n@@ -21756,6 +21830,10 @@ static const struct asm_opcode insns[] =\n  toC(\"bfx\",    _bfx,\t2, (EXPs, RRnpcsp),\t     t_branch_future),\n  toC(\"bfl\",    _bfl,\t2, (EXPs, EXPs),\t     t_branch_future),\n  toC(\"bflx\",   _bflx,\t2, (EXPs, RRnpcsp),\t     t_branch_future),\n+\n+ toU(\"dls\", _dls, 2, (LR, RRnpcsp),\t t_loloop),\n+ toU(\"wls\", _wls, 3, (LR, RRnpcsp, EXP), t_loloop),\n+ toU(\"le\",  _le,  2, (oLR, EXP),\t t_loloop),\n };\n #undef ARM_VARIANT\n #undef THUMB_VARIANT\n@@ -22996,6 +23074,7 @@ md_pcrel_from_section (fixS * fixP, segT seg)\n     case BFD_RELOC_ARM_THUMB_BF17:\n     case BFD_RELOC_ARM_THUMB_BF19:\n     case BFD_RELOC_ARM_THUMB_BF13:\n+    case BFD_RELOC_ARM_THUMB_LOOP12:\n       return base + 4;\n \n     case BFD_RELOC_THUMB_PCREL_BRANCH23:\n@@ -25025,6 +25104,39 @@ md_apply_fix (fixS *\tfixP,\n \t}\n       break;\n \n+    case BFD_RELOC_ARM_THUMB_LOOP12:\n+      if (fixP->fx_addsy\n+\t  && (S_GET_SEGMENT (fixP->fx_addsy) == seg)\n+\t  && !S_FORCE_RELOC (fixP->fx_addsy, TRUE)\n+\t  && ARM_IS_FUNC (fixP->fx_addsy)\n+\t  && ARM_CPU_HAS_FEATURE (selected_cpu, arm_ext_v8_1m_main))\n+\t{\n+\t  /* Force a relocation for a branch 12 bits wide.  */\n+\t  fixP->fx_done = 0;\n+\t}\n+\n+      bfd_vma insn = get_thumb32_insn (buf);\n+      /* le lr, <label> or le <label> */\n+      if (((insn & 0xffffffff) == 0xf00fc001)\n+\t  || ((insn & 0xffffffff) == 0xf02fc001))\n+\tvalue = -value;\n+\n+      if (v8_1_branch_value_check (value, 12, FALSE) == FAIL)\n+\tas_bad_where (fixP->fx_file, fixP->fx_line,\n+\t\t      BAD_BRANCH_OFF);\n+      if (fixP->fx_done || !seg->use_rela_p)\n+\t{\n+\t  addressT imml, immh;\n+\n+\t  immh = (value & 0x00000ffc) >> 2;\n+\t  imml = (value & 0x00000002) >> 1;\n+\n+\t  newval  = md_chars_to_number (buf + THUMB_SIZE, THUMB_SIZE);\n+\t  newval |= (imml << 11) | (immh << 1);\n+\t  md_number_to_chars (buf + THUMB_SIZE, newval, THUMB_SIZE);\n+\t}\n+      break;\n+\n     case BFD_RELOC_ARM_V4BX:\n       /* This will need to go in the object file.  */\n       fixP->fx_done = 0;\n@@ -25241,6 +25353,7 @@ tc_gen_reloc (asection *section, fixS *fixp)\n \n     case BFD_RELOC_THUMB_PCREL_BRANCH5:\n     case BFD_RELOC_THUMB_PCREL_BFCSEL:\n+    case BFD_RELOC_ARM_THUMB_LOOP12:\n       as_bad_where (fixp->fx_file, fixp->fx_line,\n \t\t    _(\"%s used for a symbol not defined in the same file\"),\n \t\t    bfd_get_reloc_code_name (fixp->fx_r_type));"
    },
    {
      "sha": "d1f2a8dfae4fdcb7ca031f8d198d3e5091697391",
      "filename": "gas/testsuite/gas/arm/armv8_1-m-loloop-bad.d",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60f993ce170b91876ad41e8f7339c24afd63fac2/gas/testsuite/gas/arm/armv8_1-m-loloop-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60f993ce170b91876ad41e8f7339c24afd63fac2/gas/testsuite/gas/arm/armv8_1-m-loloop-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv8_1-m-loloop-bad.d?ref=60f993ce170b91876ad41e8f7339c24afd63fac2",
      "patch": "@@ -0,0 +1,4 @@\n+#name: Invalid Armv8.1-M Mainline Low Overhead Loop instructions\n+#source: armv8_1-m-loloop-bad.s\n+#as: -march=armv8.1-m.main\n+#error_output: armv8_1-m-loloop-bad.l"
    },
    {
      "sha": "691917ebdcefb33aadf8e25314a2aaa4dbc13f86",
      "filename": "gas/testsuite/gas/arm/armv8_1-m-loloop-bad.l",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60f993ce170b91876ad41e8f7339c24afd63fac2/gas/testsuite/gas/arm/armv8_1-m-loloop-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60f993ce170b91876ad41e8f7339c24afd63fac2/gas/testsuite/gas/arm/armv8_1-m-loloop-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv8_1-m-loloop-bad.l?ref=60f993ce170b91876ad41e8f7339c24afd63fac2",
      "patch": "@@ -0,0 +1,7 @@\n+.*: Assembler messages:\n+.*:5: Error: operand must be LR register -- `wls r1,r2,.LB1'\n+.*:6: Error: operand must be LR register -- `dls r2,r2'\n+.*:7: Error: r15 not allowed here -- `dls lr,pc'\n+.*:8: Error: branch out of range or not a multiple of 2\n+.*:9: Error: branch out of range or not a multiple of 2\n+.*:10: Error: branch out of range or not a multiple of 2"
    },
    {
      "sha": "b4f19625db1406e503c2d80ef19162c2d0c1f27e",
      "filename": "gas/testsuite/gas/arm/armv8_1-m-loloop-bad.s",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60f993ce170b91876ad41e8f7339c24afd63fac2/gas/testsuite/gas/arm/armv8_1-m-loloop-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60f993ce170b91876ad41e8f7339c24afd63fac2/gas/testsuite/gas/arm/armv8_1-m-loloop-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv8_1-m-loloop-bad.s?ref=60f993ce170b91876ad41e8f7339c24afd63fac2",
      "patch": "@@ -0,0 +1,12 @@\n+\t.syntax unified\n+\t.text\n+\t.thumb\n+foo:\n+\twls r1, r2, .LB1\n+\tdls r2, r2\n+\tdls lr, pc\n+\tle lr, #4096\n+\tle #-4098\n+\tle #-4095\n+.LB1:\n+\tmov r3, r2"
    },
    {
      "sha": "1e02b82651f7127c5c98d3518a0a653445db4c9a",
      "filename": "gas/testsuite/gas/arm/armv8_1-m-loloop.d",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60f993ce170b91876ad41e8f7339c24afd63fac2/gas/testsuite/gas/arm/armv8_1-m-loloop.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60f993ce170b91876ad41e8f7339c24afd63fac2/gas/testsuite/gas/arm/armv8_1-m-loloop.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv8_1-m-loloop.d?ref=60f993ce170b91876ad41e8f7339c24afd63fac2",
      "patch": "@@ -0,0 +1,17 @@\n+#name: Valid Armv8.1-M Mainline Low Overhead loop instructions\n+#source: armv8_1-m-loloop.s\n+#as: -march=armv8.1-m.main\n+#objdump: -dr --prefix-addresses --show-raw-insn\n+\n+.*: +file format .*arm.*\n+\n+Disassembly of section .text:\n+0[0-9a-f]+ <[^>]+> f042 c00d \twls\tlr, r2, 0000001c <foo\\+0x1c>\n+0[0-9a-f]+ <[^>]+> f042 e001 \tdls\tlr, r2\n+0[0-9a-f]+ <[^>]+> f04e e001 \tdls\tlr, lr\n+0[0-9a-f]+ <[^>]+> f00f c009 \tle\tlr, 00000000 <foo>\n+0[0-9a-f]+ <[^>]+> f02f c00b \tle\t00000000 <foo>\n+0[0-9a-f]+ <[^>]+> f00f c24b \tle\tlr, fffffb84 <foo\\+0xfffffb84>\n+0[0-9a-f]+ <[^>]+> f02f c007 \tle\t00000010 <foo\\+0x10>\n+0[0-9a-f]+ <[^>]+> 4613      \tmov\tr3, r2\n+#..."
    },
    {
      "sha": "8fb87e40aa5d17955903ff473e55c0f37eac50bb",
      "filename": "gas/testsuite/gas/arm/armv8_1-m-loloop.s",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60f993ce170b91876ad41e8f7339c24afd63fac2/gas/testsuite/gas/arm/armv8_1-m-loloop.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60f993ce170b91876ad41e8f7339c24afd63fac2/gas/testsuite/gas/arm/armv8_1-m-loloop.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv8_1-m-loloop.s?ref=60f993ce170b91876ad41e8f7339c24afd63fac2",
      "patch": "@@ -0,0 +1,14 @@\n+\t.syntax unified\n+\t.text\n+\t.thumb\n+foo:\n+.Lstart:\n+\twls lr, r2, .LB1\n+\tdls lr, r2\n+\tdls lr, lr\n+\tle lr, .Lstart\n+\tle .Lstart\n+\tle lr, #-1172\n+\tle #-12\n+.LB1:\n+\tmov r3, r2"
    },
    {
      "sha": "7f86025443f2eefd3a163d0b7ebe020e0aef3117",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60f993ce170b91876ad41e8f7339c24afd63fac2/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60f993ce170b91876ad41e8f7339c24afd63fac2/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=60f993ce170b91876ad41e8f7339c24afd63fac2",
      "patch": "@@ -1,3 +1,8 @@\n+2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n+\n+\t* arm-dis.c (print_insn_thumb32): Updated to accept new %P\n+\tand %Q patterns.\n+\n 2019-04-15  Sudakshina Das  <sudi.das@arm.com>\n \n \t* arm-dis.c (thumb32_opcodes): New instruction bfcsel."
    },
    {
      "sha": "4a0f76a57b4773a86e4fa6cff93efdcf2c9831d5",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60f993ce170b91876ad41e8f7339c24afd63fac2/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60f993ce170b91876ad41e8f7339c24afd63fac2/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=60f993ce170b91876ad41e8f7339c24afd63fac2",
      "patch": "@@ -2717,6 +2717,8 @@ static const struct opcode16 thumb_opcodes[] =\n        %W\t\tprint an offset for BF instruction\n        %Y\t\tprint an offset for BFL instruction\n        %Z\t\tprint an offset for BFCSEL instruction\n+       %Q\t\tprint an offset for Low Overhead Loop instructions\n+       %P\t\tprint an offset for Low Overhead Loop end instructions\n        %b\t\tprint a conditional branch offset\n        %B\t\tprint an unconditional branch offset\n        %s\t\tprint the shift field of an SSAT instruction\n@@ -2750,6 +2752,15 @@ static const struct opcode16 thumb_opcodes[] =\n static const struct opcode32 thumb32_opcodes[] =\n {\n   /* Armv8.1-M Mainline instructions.  */\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+    0xf040c001, 0xfff0f001, \"wls\\tlr, %16-19S, %Q\"},\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+    0xf040e001, 0xfff0ffff, \"dls\\tlr, %16-19S\"},\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+    0xf02fc001, 0xfffff001, \"le\\t%P\"},\n+  {ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n+    0xf00fc001, 0xfffff001, \"le\\tlr, %P\"},\n+\n   {ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n     0xf040e001, 0xf860f001, \"bf%c\\t%G, %W\"},\n   {ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_1M_MAIN),\n@@ -5944,6 +5955,32 @@ print_insn_thumb32 (bfd_vma pc, struct disassemble_info *info, long given)\n \t\t}\n \t\tbreak;\n \n+\t      case 'Q':\n+\t\t{\n+\t\t  unsigned int immh = (given & 0x000007feu) >> 1;\n+\t\t  unsigned int imml = (given & 0x00000800u) >> 11;\n+\t\t  bfd_vma imm32 = 0;\n+\n+\t\t  imm32 |= immh << 2;\n+\t\t  imm32 |= imml << 1;\n+\n+\t\t  info->print_address_func (pc + 4 + imm32, info);\n+\t\t}\n+\t\tbreak;\n+\n+\t      case 'P':\n+\t\t{\n+\t\t  unsigned int immh = (given & 0x000007feu) >> 1;\n+\t\t  unsigned int imml = (given & 0x00000800u) >> 11;\n+\t\t  bfd_vma imm32 = 0;\n+\n+\t\t  imm32 |= immh << 2;\n+\t\t  imm32 |= imml << 1;\n+\n+\t\t  info->print_address_func (pc + 4 - imm32, info);\n+\t\t}\n+\t\tbreak;\n+\n \t      case 'b':\n \t\t{\n \t\t  unsigned int S = (given & 0x04000000u) >> 26;"
    }
  ]
}