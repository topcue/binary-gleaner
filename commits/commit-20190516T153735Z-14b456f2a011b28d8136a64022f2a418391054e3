{
  "sha": "14b456f2a011b28d8136a64022f2a418391054e3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTRiNDU2ZjJhMDExYjI4ZDgxMzZhNjQwMjJmMmE0MTgzOTEwNTRlMw==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T13:48:34Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:37:35Z"
    },
    "message": "[PATCH 56/57][Arm][OBJDUMP] Add support for MVE instructions: vpnot, vpsel, vqabs, vqadd, vqsub, vqneg and vrev\n\nopcodes/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Michael Collison <michael.collison@arm.com>\n\n\t* arm-dis.c (thumb32_opcodes): Add new instructions.\n\t(enum mve_instructions): Likewise.\n\t(enum mve_undefined): Add new reasons.\n\t(is_mve_encoding_conflict): Handle new instructions.\n\t(is_mve_undefined): Likewise.\n\t(is_mve_unpredictable): Likewise.\n\t(print_mve_undefined): Likewise.\n\t(print_mve_size): Likewise.",
    "tree": {
      "sha": "7ad26ebc4604445f14ae72a100ad2faff3951c00",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7ad26ebc4604445f14ae72a100ad2faff3951c00"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/14b456f2a011b28d8136a64022f2a418391054e3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14b456f2a011b28d8136a64022f2a418391054e3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/14b456f2a011b28d8136a64022f2a418391054e3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14b456f2a011b28d8136a64022f2a418391054e3/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f49bb598d96fd66bb6f2e9b14951f094e3d29396",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f49bb598d96fd66bb6f2e9b14951f094e3d29396",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f49bb598d96fd66bb6f2e9b14951f094e3d29396"
    }
  ],
  "stats": {
    "total": 154,
    "additions": 154,
    "deletions": 0
  },
  "files": [
    {
      "sha": "01059aed24d93f39a1805f894882b6aa4a704d0b",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/14b456f2a011b28d8136a64022f2a418391054e3/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/14b456f2a011b28d8136a64022f2a418391054e3/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=14b456f2a011b28d8136a64022f2a418391054e3",
      "patch": "@@ -1,3 +1,15 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Michael Collison <michael.collison@arm.com>\n+\n+\t* arm-dis.c (thumb32_opcodes): Add new instructions.\n+\t(enum mve_instructions): Likewise.\n+\t(enum mve_undefined): Add new reasons.\n+\t(is_mve_encoding_conflict): Handle new instructions.\n+\t(is_mve_undefined): Likewise.\n+\t(is_mve_unpredictable): Likewise.\n+\t(print_mve_undefined): Likewise.\n+\t(print_mve_size): Likewise.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Michael Collison <michael.collison@arm.com>\n "
    },
    {
      "sha": "096b5715cab368b76df8fc1b2f32938286ac62af",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 142,
      "deletions": 0,
      "changes": 142,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/14b456f2a011b28d8136a64022f2a418391054e3/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/14b456f2a011b28d8136a64022f2a418391054e3/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=14b456f2a011b28d8136a64022f2a418391054e3",
      "patch": "@@ -253,6 +253,17 @@ enum mve_instructions\n   MVE_VRMULH,\n   MVE_VNEG_FP,\n   MVE_VNEG_VEC,\n+  MVE_VPNOT,\n+  MVE_VPSEL,\n+  MVE_VQABS,\n+  MVE_VQADD_T1,\n+  MVE_VQADD_T2,\n+  MVE_VQSUB_T1,\n+  MVE_VQSUB_T2,\n+  MVE_VQNEG,\n+  MVE_VREV16,\n+  MVE_VREV32,\n+  MVE_VREV64,\n   MVE_NONE\n };\n \n@@ -290,6 +301,7 @@ enum mve_undefined\n   UNDEF_SIZE_2,\t\t\t/* undefined because size == 2.  */\n   UNDEF_SIZE_3,\t\t\t/* undefined because size == 3.  */\n   UNDEF_SIZE_LE_1,\t\t/* undefined because size <= 1.  */\n+  UNDEF_SIZE_NOT_0,\t\t/* undefined because size != 0.  */\n   UNDEF_SIZE_NOT_2,\t\t/* undefined because size != 2.  */\n   UNDEF_SIZE_NOT_3,\t\t/* undefined because size != 3.  */\n   UNDEF_NOT_UNS_SIZE_0,\t\t/* undefined because U == 0 and\n@@ -2893,6 +2905,36 @@ static const struct mopcode32 mve_opcodes[] =\n    0xee300f01, 0xefb10f51,\n    \"vqdmull%T%v.s%28s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n \n+  /* Vector VPNOT.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VPNOT,\n+   0xfe310f4d, 0xffffffff,\n+   \"vpnot%v\"},\n+\n+  /* Vector VPSEL.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VPSEL,\n+   0xfe310f01, 0xffb11f51,\n+   \"vpsel%v\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VQABS.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQABS,\n+   0xffb00740, 0xffb31fd1,\n+   \"vqabs%v.s%18-19s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VQADD T1 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQADD_T1,\n+   0xef000050, 0xef811f51,\n+   \"vqadd%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VQADD T2 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQADD_T2,\n+   0xee000f60, 0xef811f70,\n+   \"vqadd%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+\n   /* Vector VQDMULL T2 variant.  */\n   {ARM_FEATURE_COPROC (FPU_MVE),\n    MVE_VQDMULL_T2,\n@@ -2983,6 +3025,12 @@ static const struct mopcode32 mve_opcodes[] =\n    0xfe010e60, 0xff811f70,\n    \"vqrdmulh%v.s%20-21s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n \n+  /* Vector VQNEG.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQNEG,\n+   0xffb007c0, 0xffb31fd1,\n+   \"vqneg%v.s%18-19s\\t%13-15,22Q, %1-3,5Q\"},\n+\n   /* Vector VQRSHL T1 variant.  */\n   {ARM_FEATURE_COPROC (FPU_MVE),\n    MVE_VQRSHL_T1,\n@@ -3031,6 +3079,36 @@ static const struct mopcode32 mve_opcodes[] =\n    0xee800fc0, 0xffa00fd1,\n    \"vqshrun%T%v.s%19-20s\\t%13-15,22Q, %1-3,5Q, #%16-18d\"},\n \n+  /* Vector VQSUB T1 Variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQSUB_T1,\n+   0xef000250, 0xef811f51,\n+   \"vqsub%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VQSUB T2 Variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQSUB_T2,\n+   0xee001f60, 0xef811f70,\n+   \"vqsub%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+\n+  /* Vector VREV16.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VREV16,\n+   0xffb00140, 0xffb31fd1,\n+   \"vrev16%v.8\\t%13-15,22Q, %1-3,5Q\"},\n+\n+  /* Vector VREV32.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VREV32,\n+   0xffb000c0, 0xffb31fd1,\n+   \"vrev32%v.%18-19s\\t%13-15,22Q, %1-3,5Q\"},\n+\n+  /* Vector VREV64.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VREV64,\n+   0xffb00040, 0xffb31fd1,\n+   \"vrev64%v.%18-19s\\t%13-15,22Q, %1-3,5Q\"},\n+\n   /* Vector VRINT floating point.  */\n   {ARM_FEATURE_COPROC (FPU_MVE_FP),\n    MVE_VRINT_FP,\n@@ -5239,6 +5317,8 @@ is_mve_encoding_conflict (unsigned long given,\n       else\n \treturn FALSE;\n \n+    case MVE_VQADD_T2:\n+    case MVE_VQSUB_T2:\n     case MVE_VMUL_VEC_T2:\n     case MVE_VMULH:\n     case MVE_VRMULH:\n@@ -5539,6 +5619,8 @@ is_mve_undefined (unsigned long given, enum mve_instructions matched_insn,\n       else\n \treturn FALSE;\n \n+    case MVE_VQADD_T1:\n+    case MVE_VQSUB_T1:\n     case MVE_VMUL_VEC_T1:\n     case MVE_VABD_VEC:\n     case MVE_VADD_VEC_T1:\n@@ -5881,6 +5963,8 @@ is_mve_undefined (unsigned long given, enum mve_instructions matched_insn,\n \telse\n \t  return FALSE;\n \n+    case MVE_VQNEG:\n+    case MVE_VQABS:\n     case MVE_VNEG_VEC:\n     case MVE_VCLS:\n     case MVE_VCLZ:\n@@ -5892,6 +5976,36 @@ is_mve_undefined (unsigned long given, enum mve_instructions matched_insn,\n       else\n \treturn FALSE;\n \n+    case MVE_VREV16:\n+      if (arm_decode_field (given, 18, 19) == 0)\n+\treturn FALSE;\n+      else\n+\t{\n+\t  *undefined_code = UNDEF_SIZE_NOT_0;\n+\t  return TRUE;\n+\t}\n+\n+    case MVE_VREV32:\n+      {\n+\tunsigned long size = arm_decode_field (given, 18, 19);\n+\tif ((size & 2) == 2)\n+\t  {\n+\t    *undefined_code = UNDEF_SIZE_2;\n+\t    return TRUE;\n+\t  }\n+\telse\n+\t  return FALSE;\n+      }\n+\n+    case MVE_VREV64:\n+      if (arm_decode_field (given, 18, 19) != 3)\n+\treturn FALSE;\n+      else\n+\t{\n+\t  *undefined_code = UNDEF_SIZE_3;\n+\t  return TRUE;\n+\t}\n+\n     default:\n       return FALSE;\n     }\n@@ -5951,6 +6065,8 @@ is_mve_unpredictable (unsigned long given, enum mve_instructions matched_insn,\n \treturn FALSE;\n       }\n \n+    case MVE_VQADD_T2:\n+    case MVE_VQSUB_T2:\n     case MVE_VMUL_FP_T2:\n     case MVE_VMUL_VEC_T2:\n     case MVE_VMLA:\n@@ -6360,6 +6476,20 @@ is_mve_unpredictable (unsigned long given, enum mve_instructions matched_insn,\n       else\n \treturn FALSE;\n \n+    case MVE_VREV64:\n+      {\n+\tunsigned long qd = arm_decode_field_multiple (given, 13, 15, 22, 22);\n+\tunsigned long qm = arm_decode_field_multiple (given, 1, 3, 6, 6);\n+\n+\tif (qd == qm)\n+\t  {\n+\t    *unpredictable_code = UNPRED_Q_REGS_EQUAL;\n+\t    return TRUE;\n+\t  }\n+\telse\n+\t  return FALSE;\n+      }\n+\n     default:\n       return FALSE;\n     }\n@@ -6590,6 +6720,10 @@ print_mve_undefined (struct disassemble_info *info,\n       func (stream, \"size <= 1\");\n       break;\n \n+    case UNDEF_SIZE_NOT_0:\n+      func (stream, \"size not equal to 0\");\n+      break;\n+\n     case UNDEF_SIZE_NOT_2:\n       func (stream, \"size not equal to 2\");\n       break;\n@@ -7094,6 +7228,9 @@ print_mve_size (struct disassemble_info *info,\n     case MVE_VPT_VEC_T4:\n     case MVE_VPT_VEC_T5:\n     case MVE_VPT_VEC_T6:\n+    case MVE_VQABS:\n+    case MVE_VQADD_T1:\n+    case MVE_VQADD_T2:\n     case MVE_VQDMLADH:\n     case MVE_VQRDMLADH:\n     case MVE_VQDMLAH:\n@@ -7106,10 +7243,15 @@ print_mve_size (struct disassemble_info *info,\n     case MVE_VQRDMULH_T2:\n     case MVE_VQDMULH_T3:\n     case MVE_VQRDMULH_T4:\n+    case MVE_VQNEG:\n     case MVE_VQRSHL_T1:\n     case MVE_VQRSHL_T2:\n     case MVE_VQSHL_T1:\n     case MVE_VQSHL_T4:\n+    case MVE_VQSUB_T1:\n+    case MVE_VQSUB_T2:\n+    case MVE_VREV32:\n+    case MVE_VREV64:\n     case MVE_VRHADD:\n     case MVE_VRINT_FP:\n     case MVE_VRSHL_T1:"
    }
  ]
}