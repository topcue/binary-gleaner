{
  "sha": "51457761649bab6868343b3da2258d73a62901f7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTE0NTc3NjE2NDliYWI2ODY4MzQzYjNkYTIyNThkNzNhNjI5MDFmNw==",
  "commit": {
    "author": {
      "name": "Tamar Christina",
      "email": "tamar.christina@arm.com",
      "date": "2019-03-25T12:12:03Z"
    },
    "committer": {
      "name": "Tamar Christina",
      "email": "tamar.christina@arm.com",
      "date": "2019-03-25T15:05:53Z"
    },
    "message": "AArch64: Fix AArch64 disassembler mapping symbol search\n\nMy previous patch for AArch64 was not enough to catch all the cases where\ndisassembling an out-of-order section could go wrong.  It had missed the case\nDATA sections could be incorrectly disassembled as TEXT.\n\nOut of order here refers to an object file where sections are not listed in a\nmonotonic increasing VMA order.\n\nThe ELF ABI for AArch64 [1] specifies the following for mapping symbols:\n\n  1) A text section must always have a corresponding mapping symbol at it's\n     start.\n  2) Data sections do not require any mapping symbols.\n  3) The range of a mapping symbol extends from the address it starts on up to\n     the next mapping symbol (exclusive) or section end (inclusive).\n\nHowever there is no defined order between a symbol and it's corresponding\nmapping symbol in the symbol table.  This means that while in general we look\nup for a corresponding mapping symbol, we have to make at least one check of\nthe symbol below the address being disassembled.\n\nWhen disassembling different PCs within the same section, the search for mapping\nsymbol can be cached somewhat.  We know that the mapping symbol corresponding to\nthe current PC is either the previous one used, or one at the same address as\nthe current PC.\n\nHowever this optimization and mapping symbol search must stop as soon as we\nreach the end or start of the section.  Furthermore if we're only disassembling\na part of a section, the search is a allowed to search further than the current\nchunk, but is not allowed to search past it (The mapping symbol if there, must\nbe at the same address, so in practice we usually stop at PC+4).\n\nlastly, since only data sections don't require a mapping symbol the default\nmapping type should be DATA and not INSN as previously defined, however if the\nbinary has had all its symbols stripped than this isn't very useful.  To fix this\nwe determine the default based on the section flags.  This will allow the\ndisassembler to be more useful on stripped binaries.  If there is no section than\nwe assume you to be disassembling INSN.\n\n[1] https://developer.arm.com/docs/ihi0056/latest/elf-for-the-arm-64-bit-architecture-aarch64-abi-2018q4#aaelf64-section4-5-4\n\nbinutils/ChangeLog:\n\n\t* testsuite/binutils-all/aarch64/in-order.d: New test.\n\t* testsuite/binutils-all/aarch64/out-of-order.d: Disassemble data as\n\twell.\n\nopcodes/ChangeLog:\n\n\t* aarch64-dis.c (print_insn_aarch64): Update the mapping symbol search\n\torder.",
    "tree": {
      "sha": "5eafa5a450c200b8ae23aa19b6745bad7ab8a850",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5eafa5a450c200b8ae23aa19b6745bad7ab8a850"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/51457761649bab6868343b3da2258d73a62901f7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/51457761649bab6868343b3da2258d73a62901f7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/51457761649bab6868343b3da2258d73a62901f7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/51457761649bab6868343b3da2258d73a62901f7/comments",
  "author": {
    "login": "TamarChristinaArm",
    "id": 48126768,
    "node_id": "MDQ6VXNlcjQ4MTI2NzY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TamarChristinaArm",
    "html_url": "https://github.com/TamarChristinaArm",
    "followers_url": "https://api.github.com/users/TamarChristinaArm/followers",
    "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}",
    "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions",
    "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs",
    "repos_url": "https://api.github.com/users/TamarChristinaArm/repos",
    "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "TamarChristinaArm",
    "id": 48126768,
    "node_id": "MDQ6VXNlcjQ4MTI2NzY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TamarChristinaArm",
    "html_url": "https://github.com/TamarChristinaArm",
    "followers_url": "https://api.github.com/users/TamarChristinaArm/followers",
    "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}",
    "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions",
    "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs",
    "repos_url": "https://api.github.com/users/TamarChristinaArm/repos",
    "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "53b2f36bf6aa939feab6f82f05d7dad52f82660d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/53b2f36bf6aa939feab6f82f05d7dad52f82660d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/53b2f36bf6aa939feab6f82f05d7dad52f82660d"
    }
  ],
  "stats": {
    "total": 100,
    "additions": 93,
    "deletions": 7
  },
  "files": [
    {
      "sha": "1c6c354484f67377e7a28c77fa542cec934a5c24",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51457761649bab6868343b3da2258d73a62901f7/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51457761649bab6868343b3da2258d73a62901f7/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=51457761649bab6868343b3da2258d73a62901f7",
      "patch": "@@ -1,3 +1,9 @@\n+2019-03-25  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* testsuite/binutils-all/aarch64/in-order.d: New test.\n+\t* testsuite/binutils-all/aarch64/out-of-order.d: Disassemble data as\n+\twell.\n+\n 2019-03-25  Tamar Christina  <tamar.christina@arm.com>\n \n \t* objdump.c (disassemble_bytes): Pass stop_offset."
    },
    {
      "sha": "090337f141db270172580b279d7a8e7c2be52913",
      "filename": "binutils/testsuite/binutils-all/aarch64/in-order.d",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51457761649bab6868343b3da2258d73a62901f7/binutils/testsuite/binutils-all/aarch64/in-order.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51457761649bab6868343b3da2258d73a62901f7/binutils/testsuite/binutils-all/aarch64/in-order.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/aarch64/in-order.d?ref=51457761649bab6868343b3da2258d73a62901f7",
      "patch": "@@ -0,0 +1,28 @@\n+#PROG: objcopy\n+#source: out-of-order.s\n+#ld: -e v1 -Ttext-segment=0x400000\n+#objdump: -d\n+#name: Check if disassembler can handle sections in default order\n+\n+.*: +file format .*aarch64.*\n+\n+Disassembly of section \\.func1:\n+\n+0000000000400000 <v1>:\n+  400000:\t8b010000 \tadd\tx0, x0, x1\n+  400004:\t00000000 \t\\.word\t0x00000000\n+\n+Disassembly of section .func2:\n+\n+0000000000400008 <\\.func2>:\n+  400008:\t8b010000 \tadd\tx0, x0, x1\n+\n+Disassembly of section \\.func3:\n+\n+000000000040000c <\\.func3>:\n+  40000c:\t8b010000 \tadd\tx0, x0, x1\n+  400010:\t8b010000 \tadd\tx0, x0, x1\n+  400014:\t8b010000 \tadd\tx0, x0, x1\n+  400018:\t8b010000 \tadd\tx0, x0, x1\n+  40001c:\t8b010000 \tadd\tx0, x0, x1\n+  400020:\t00000000 \t\\.word\t0x00000000"
    },
    {
      "sha": "f78adec2162b0714f2f461111651f1cc6e561e13",
      "filename": "binutils/testsuite/binutils-all/aarch64/out-of-order.d",
      "status": "modified",
      "additions": 16,
      "deletions": 1,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51457761649bab6868343b3da2258d73a62901f7/binutils/testsuite/binutils-all/aarch64/out-of-order.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51457761649bab6868343b3da2258d73a62901f7/binutils/testsuite/binutils-all/aarch64/out-of-order.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/aarch64/out-of-order.d?ref=51457761649bab6868343b3da2258d73a62901f7",
      "patch": "@@ -1,10 +1,20 @@\n #PROG: objcopy\n #ld: -T out-of-order.T\n-#objdump: -d\n+#objdump: -D\n #name: Check if disassembler can handle sections in different order than header\n \n .*: +file format .*aarch64.*\n \n+Disassembly of section \\.global:\n+\n+00000000ffe00000 <\\.global>:\n+    ffe00000:\t00000001 \t\\.word\t0x00000001\n+    ffe00004:\t00000000 \t\\.word\t0x00000000\n+    ffe00008:\t00000001 \t\\.word\t0x00000001\n+    ffe0000c:\t00000000 \t\\.word\t0x00000000\n+    ffe00010:\t00000001 \t\\.word\t0x00000001\n+    ffe00014:\t00000000 \t\\.word\t0x00000000\n+\n Disassembly of section \\.func2:\n \n 0000000004018280 <\\.func2>:\n@@ -25,3 +35,8 @@ Disassembly of section \\.func3:\n  401500c:\t8b010000 \tadd\tx0, x0, x1\n  4015010:\t8b010000 \tadd\tx0, x0, x1\n  4015014:\t00000000 \t\\.word\t0x00000000\n+\n+Disassembly of section \\.rodata:\n+\n+0000000004015018 <\\.rodata>:\n+ 4015018:\t00000004 \t\\.word\t0x00000004"
    },
    {
      "sha": "e5705d7aadc491c8ebd743187f908f11b0055640",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51457761649bab6868343b3da2258d73a62901f7/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51457761649bab6868343b3da2258d73a62901f7/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=51457761649bab6868343b3da2258d73a62901f7",
      "patch": "@@ -1,3 +1,8 @@\n+2019-03-25  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* aarch64-dis.c (print_insn_aarch64): Update the mapping symbol search\n+\torder.\n+\n 2019-03-25  Tamar Christina  <tamar.christina@arm.com>\n \n \t* aarch64-dis.c (last_stop_offset): New."
    },
    {
      "sha": "1f931d09327580ee9d257901655b3dad77b93837",
      "filename": "opcodes/aarch64-dis.c",
      "status": "modified",
      "additions": 38,
      "deletions": 6,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/51457761649bab6868343b3da2258d73a62901f7/opcodes/aarch64-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/51457761649bab6868343b3da2258d73a62901f7/opcodes/aarch64-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.c?ref=51457761649bab6868343b3da2258d73a62901f7",
      "patch": "@@ -3318,14 +3318,26 @@ print_insn_aarch64 (bfd_vma pc,\n   /* Aarch64 instructions are always little-endian */\n   info->endian_code = BFD_ENDIAN_LITTLE;\n \n+  /* Default to DATA.  A text section is required by the ABI to contain an\n+     INSN mapping symbol at the start.  A data section has no such\n+     requirement, hence if no mapping symbol is found the section must\n+     contain only data.  This however isn't very useful if the user has\n+     fully stripped the binaries.  If this is the case use the section\n+     attributes to determine the default.  If we have no section default to\n+     INSN as well, as we may be disassembling some raw bytes on a baremetal\n+     HEX file or similar.  */\n+  enum map_type type = MAP_DATA;\n+  if ((info->section && info->section->flags & SEC_CODE) || !info->section)\n+    type = MAP_INSN;\n+\n   /* First check the full symtab for a mapping symbol, even if there\n      are no usable non-mapping symbols for this address.  */\n   if (info->symtab_size != 0\n       && bfd_asymbol_flavour (*info->symtab) == bfd_target_elf_flavour)\n     {\n-      enum map_type type = MAP_INSN;\n       int last_sym = -1;\n-      bfd_vma addr;\n+      bfd_vma addr, section_vma = 0;\n+      bfd_boolean can_use_search_opt_p;\n       int n;\n \n       if (pc <= last_mapping_addr)\n@@ -3334,13 +3346,20 @@ print_insn_aarch64 (bfd_vma pc,\n       /* Start scanning at the start of the function, or wherever\n \t we finished last time.  */\n       n = info->symtab_pos + 1;\n+\n       /* If the last stop offset is different from the current one it means we\n \t are disassembling a different glob of bytes.  As such the optimization\n \t would not be safe and we should start over.  */\n-      if (n < last_mapping_sym && info->stop_offset == last_stop_offset)\n+      can_use_search_opt_p = last_mapping_sym >= 0\n+\t\t\t     && info->stop_offset == last_stop_offset;\n+\n+      if (n >= last_mapping_sym && can_use_search_opt_p)\n \tn = last_mapping_sym;\n \n-      /* Scan up to the location being disassembled.  */\n+      /* Look down while we haven't passed the location being disassembled.\n+\t The reason for this is that there's no defined order between a symbol\n+\t and an mapping symbol that may be at the same address.  We may have to\n+\t look at least one position ahead.  */\n       for (; n < info->symtab_size; n++)\n \t{\n \t  addr = bfd_asymbol_value (info->symtab[n]);\n@@ -3356,13 +3375,24 @@ print_insn_aarch64 (bfd_vma pc,\n       if (!found)\n \t{\n \t  n = info->symtab_pos;\n-\t  if (n < last_mapping_sym)\n+\t  if (n >= last_mapping_sym && can_use_search_opt_p)\n \t    n = last_mapping_sym;\n \n \t  /* No mapping symbol found at this address.  Look backwards\n-\t     for a preceeding one.  */\n+\t     for a preceeding one, but don't go pass the section start\n+\t     otherwise a data section with no mapping symbol can pick up\n+\t     a text mapping symbol of a preceeding section.  The documentation\n+\t     says section can be NULL, in which case we will seek up all the\n+\t     way to the top.  */\n+\t  if (info->section)\n+\t    section_vma = info->section->vma;\n+\n \t  for (; n >= 0; n--)\n \t    {\n+\t      addr = bfd_asymbol_value (info->symtab[n]);\n+\t      if (addr < section_vma)\n+\t\tbreak;\n+\n \t      if (get_sym_code_type (info, n, &type))\n \t\t{\n \t\t  last_sym = n;\n@@ -3400,6 +3430,8 @@ print_insn_aarch64 (bfd_vma pc,\n \t    size = (pc & 1) ? 1 : 2;\n \t}\n     }\n+  else\n+    last_type = type;\n \n   if (last_type == MAP_DATA)\n     {"
    }
  ]
}