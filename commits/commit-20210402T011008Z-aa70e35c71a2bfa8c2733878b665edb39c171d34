{
  "sha": "aa70e35c71a2bfa8c2733878b665edb39c171d34",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWE3MGUzNWM3MWEyYmZhOGMyNzMzODc4YjY2NWVkYjM5YzE3MWQzNA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-04-02T01:10:08Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-04-02T01:10:08Z"
    },
    "message": "gdb: add type::is_declared_class / type::set_is_declared_class\n\nAdd the `is_declared_class` and `set_is_declared_class` methods on\n`struct type`, in order to remove the `TYPE_DECLARED_CLASS` macro.  In\nthis patch, the macro is changed to use the getter, so all the call\nsites of the macro that are used as a setter are changed to use the\nsetter method directly.  The next patch will remove the macro\ncompletely.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <is_declared_class,\n\tset_is_declared_class>: New methods.\n\t(TYPE_DECLARED_CLASS): Use type::is_declared_class, change all\n\twrite call sites to use type::set_is_declared_class.\n\nChange-Id: Idf08d32e137c885a0aba0a18f556a899c1cbfd68",
    "tree": {
      "sha": "5d8bcf5241d4d3d37f6cd32468765295dfba68c5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5d8bcf5241d4d3d37f6cd32468765295dfba68c5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/aa70e35c71a2bfa8c2733878b665edb39c171d34",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa70e35c71a2bfa8c2733878b665edb39c171d34",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/aa70e35c71a2bfa8c2733878b665edb39c171d34",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa70e35c71a2bfa8c2733878b665edb39c171d34/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3451a2d7a3501e9c3fc344cbc4950c495f30c16d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3451a2d7a3501e9c3fc344cbc4950c495f30c16d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3451a2d7a3501e9c3fc344cbc4950c495f30c16d"
    }
  ],
  "stats": {
    "total": 32,
    "additions": 28,
    "deletions": 4
  },
  "files": [
    {
      "sha": "77395fb796f7ecb176a69ca55bea6b1b1febeea3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa70e35c71a2bfa8c2733878b665edb39c171d34/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa70e35c71a2bfa8c2733878b665edb39c171d34/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=aa70e35c71a2bfa8c2733878b665edb39c171d34",
      "patch": "@@ -1,3 +1,10 @@\n+2021-04-01  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct type) <is_declared_class,\n+\tset_is_declared_class>: New methods.\n+\t(TYPE_DECLARED_CLASS): Use type::is_declared_class, change all\n+\twrite call sites to use type::set_is_declared_class.\n+\n 2021-02-28  Boris Staletic  <boris.staletic@gmail.com>\n \n \t* gdb/python/lib/gdb/__init__.py: Use importlib on python 3.4+"
    },
    {
      "sha": "9a90d992cc9d5f6e802f03f6b140ed607305f555",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa70e35c71a2bfa8c2733878b665edb39c171d34/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa70e35c71a2bfa8c2733878b665edb39c171d34/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=aa70e35c71a2bfa8c2733878b665edb39c171d34",
      "patch": "@@ -16147,7 +16147,7 @@ read_structure_type (struct die_info *die, struct dwarf2_cu *cu)\n     }\n \n   if (cu->language == language_cplus && die->tag == DW_TAG_class_type)\n-    TYPE_DECLARED_CLASS (type) = 1;\n+    type->set_is_declared_class (true);\n \n   /* Store the calling convention in the type if it's available in\n      the die.  Otherwise the calling convention remains set to\n@@ -16761,7 +16761,7 @@ read_enumeration_type (struct die_info *die, struct dwarf2_cu *cu)\n \tset_type_align (type, TYPE_RAW_ALIGN (underlying_type));\n     }\n \n-  TYPE_DECLARED_CLASS (type) = dwarf2_flag_true_p (die, DW_AT_enum_class, cu);\n+  type->set_is_declared_class (dwarf2_flag_true_p (die, DW_AT_enum_class, cu));\n \n   set_die_type (die, type, cu);\n "
    },
    {
      "sha": "7444e7ad23941142ae884e7aa199ef2436282a2f",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 19,
      "deletions": 2,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa70e35c71a2bfa8c2733878b665edb39c171d34/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa70e35c71a2bfa8c2733878b665edb39c171d34/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=aa70e35c71a2bfa8c2733878b665edb39c171d34",
      "patch": "@@ -226,7 +226,7 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n    enum types, this is true when \"enum class\" or \"enum struct\" was\n    used to declare the type..  */\n \n-#define TYPE_DECLARED_CLASS(t) (TYPE_MAIN_TYPE (t)->flag_declared_class)\n+#define TYPE_DECLARED_CLASS(t) ((t)->declared_class ())\n \n /* * True if this type is a \"flag\" enum.  A flag enum is one where all\n    the values are pairwise disjoint when \"and\"ed together.  This\n@@ -815,7 +815,7 @@ struct main_type\n   /* * True if this type was declared with \"class\" rather than\n      \"struct\".  */\n \n-  unsigned int flag_declared_class : 1;\n+  unsigned int m_flag_declared_class : 1;\n \n   /* * True if this is an enum type with disjoint values.  This\n      affects how the enum is printed.  */\n@@ -1187,6 +1187,23 @@ struct type\n     this->main_type->m_flag_endianity_not_default = endianity_is_not_default;\n   }\n \n+\n+  /* True if this type was declared using the \"class\" keyword.  This is\n+     only valid for C++ structure and enum types.  If false, a structure\n+     was declared as a \"struct\"; if true it was declared \"class\".  For\n+     enum types, this is true when \"enum class\" or \"enum struct\" was\n+     used to declare the type.  */\n+\n+  bool is_declared_class () const\n+  {\n+    return this->main_type->m_flag_declared_class;\n+  }\n+\n+  void set_is_declared_class (bool is_declared_class) const\n+  {\n+    this->main_type->m_flag_declared_class = is_declared_class;\n+  }\n+\n   /* * Assuming that THIS is a TYPE_CODE_FIXED_POINT, return a reference\n      to this type's fixed_point_info.  */\n "
    }
  ]
}