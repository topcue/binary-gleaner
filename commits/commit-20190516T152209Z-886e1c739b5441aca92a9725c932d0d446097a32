{
  "sha": "886e1c739b5441aca92a9725c932d0d446097a32",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODg2ZTFjNzM5YjU0NDFhY2E5MmE5NzI1YzkzMmQwZDQ0NjA5N2EzMg==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-15T15:56:30Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:22:09Z"
    },
    "message": "[PATCH 5/57][Arm][GAS] Add support for MVE instructions: vmull{b,t}\n\ngas/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/tc-arm.c (BAD_MVE_AUTO): New error message.\n\t(BAD_MVE_SRCDEST): Likewise.\n\t(mark_feature_used): Diagnose MVE only instructions when in\n\tauto-detection mode or -march=all.\n\t(enum operand_parse_code): Define new operand.\n\t(parse_operands): Handle new operand.\n\t(M_MNEM_vmullt, M_MNEM_vmullb): New encodings.\n\t(mve_encode_qqq): New encoding helper function.\n\t(do_mve_vmull): New encoding function.\n\t(insns): Handle new instructions.\n\t* testsuite/gas/arm/mve-vmullbt-bad.d: New test.\n\t* testsuite/gas/arm/mve-vmullbt-bad.l: New test.\n\t* testsuite/gas/arm/mve-vmullbt-bad.s: New test.",
    "tree": {
      "sha": "983011c50eca2503652b78678e00ef79e42d224f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/983011c50eca2503652b78678e00ef79e42d224f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/886e1c739b5441aca92a9725c932d0d446097a32",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/886e1c739b5441aca92a9725c932d0d446097a32",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/886e1c739b5441aca92a9725c932d0d446097a32",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/886e1c739b5441aca92a9725c932d0d446097a32/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a302e574182dc12e95850dec078dac93701f1bde",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a302e574182dc12e95850dec078dac93701f1bde",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a302e574182dc12e95850dec078dac93701f1bde"
    }
  ],
  "stats": {
    "total": 194,
    "additions": 192,
    "deletions": 2
  },
  "files": [
    {
      "sha": "551415ce89c7e0ccff722b96e389c482310fa288",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/886e1c739b5441aca92a9725c932d0d446097a32/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/886e1c739b5441aca92a9725c932d0d446097a32/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=886e1c739b5441aca92a9725c932d0d446097a32",
      "patch": "@@ -1,3 +1,19 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/tc-arm.c (BAD_MVE_AUTO): New error message.\n+\t(BAD_MVE_SRCDEST): Likewise.\n+\t(mark_feature_used): Diagnose MVE only instructions when in\n+\tauto-detection mode or -march=all.\n+\t(enum operand_parse_code): Define new operand.\n+\t(parse_operands): Handle new operand.\n+\t(M_MNEM_vmullt, M_MNEM_vmullb): New encodings.\n+\t(mve_encode_qqq): New encoding helper function.\n+\t(do_mve_vmull): New encoding function.\n+\t(insns): Handle new instructions.\n+\t* testsuite/gas/arm/mve-vmullbt-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vmullbt-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vmullbt-bad.s: New test.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/tc-arm.c (struct asm_opcode): Make avalue a full int."
    },
    {
      "sha": "f325dcf1f1161d105b098b1463f09dfe0833a99b",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 98,
      "deletions": 2,
      "changes": 100,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/886e1c739b5441aca92a9725c932d0d446097a32/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/886e1c739b5441aca92a9725c932d0d446097a32/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=886e1c739b5441aca92a9725c932d0d446097a32",
      "patch": "@@ -887,6 +887,11 @@ struct asm_opcode\n #define MVE_BAD_SP\t_(\"Warning: instruction is UNPREDICTABLE with SP\" \\\n \t\t\t  \" operand\")\n #define BAD_SIMD_TYPE\t_(\"bad type in SIMD instruction\")\n+#define BAD_MVE_AUTO\t\\\n+  _(\"GAS auto-detection mode and -march=all is deprecated for MVE, please\" \\\n+    \" use a valid -march or -mcpu option.\")\n+#define BAD_MVE_SRCDEST\t_(\"Warning: 32-bit element size and same destination \"\\\n+\t\t\t  \"and source operands makes instruction UNPREDICTABLE\")\n \n static struct hash_control * arm_ops_hsh;\n static struct hash_control * arm_cond_hsh;\n@@ -1538,6 +1543,15 @@ record_feature_use (const arm_feature_set *feature)\n static bfd_boolean\n mark_feature_used (const arm_feature_set *feature)\n {\n+\n+  /* Do not support the use of MVE only instructions when in auto-detection or\n+     -march=all.  */\n+  if (((feature == &mve_ext) || (feature == &mve_fp_ext))\n+      && ARM_CPU_IS_ANY (cpu_variant))\n+    {\n+      first_error (BAD_MVE_AUTO);\n+      return FALSE;\n+    }\n   /* Ensure the option is valid on the current architecture.  */\n   if (!ARM_CPU_HAS_FEATURE (cpu_variant, *feature))\n     return FALSE;\n@@ -6740,6 +6754,8 @@ enum operand_parse_code\n   OP_RR_RNSC,   /* ARM reg or Neon scalar.  */\n   OP_RNSD_RNSC, /* Neon S or D reg, or Neon scalar.  */\n   OP_RNSDQ_RNSC, /* Vector S, D or Q reg, or Neon scalar.  */\n+  OP_RNSDQ_RNSC_MQ, /* Vector S, D or Q reg, Neon scalar or MVE vector register.\n+\t\t     */\n   OP_RNDQ_RNSC, /* Neon D or Q reg, or Neon scalar.  */\n   OP_RND_RNSC,  /* Neon D reg, or Neon scalar.  */\n   OP_VMOV,      /* Neon VMOV operands.  */\n@@ -7091,6 +7107,10 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \t  }\n \t  break;\n \n+\tcase OP_RNSDQ_RNSC_MQ:\n+\t  po_reg_or_goto (REG_TYPE_MQ, try_rnsdq_rnsc);\n+\t  break;\n+\ttry_rnsdq_rnsc:\n \tcase OP_RNSDQ_RNSC:\n \t  {\n \t    po_scalar_or_goto (8, try_nsdq);\n@@ -13833,6 +13853,8 @@ do_t_loloop (void)\n #define M_MNEM_vmlsdava\t  0xeef00e21\n #define M_MNEM_vmlsdavx\t  0xeef01e01\n #define M_MNEM_vmlsdavax  0xeef01e21\n+#define M_MNEM_vmullt\t0xee011e00\n+#define M_MNEM_vmullb\t0xee010e00\n \n /* Neon instruction encoder helpers.  */\n \n@@ -15220,6 +15242,23 @@ mve_encode_rqq (unsigned bit28, unsigned size)\n   inst.is_neon = 1;\n }\n \n+static void\n+mve_encode_qqq (int ubit, int size)\n+{\n+\n+  inst.instruction |= (ubit != 0) << 28;\n+  inst.instruction |= HI1 (inst.operands[0].reg) << 22;\n+  inst.instruction |= neon_logbits (size) << 20;\n+  inst.instruction |= LOW4 (inst.operands[1].reg) << 16;\n+  inst.instruction |= LOW4 (inst.operands[0].reg) << 12;\n+  inst.instruction |= HI1 (inst.operands[1].reg) << 7;\n+  inst.instruction |= HI1 (inst.operands[2].reg) << 5;\n+  inst.instruction |= LOW4 (inst.operands[2].reg);\n+\n+  inst.is_neon = 1;\n+}\n+\n+\n /* Encode insns with bit pattern:\n \n   |28/24|23|22 |21 20|19 16|15 12|11    8|7|6|5|4|3  0|\n@@ -15938,6 +15977,61 @@ do_neon_qdmulh (void)\n     }\n }\n \n+static void\n+do_mve_vmull (void)\n+{\n+\n+  enum neon_shape rs = neon_select_shape (NS_HHH, NS_FFF, NS_DDD, NS_DDS,\n+\t\t\t\t\t  NS_QQS, NS_QQQ, NS_QQR, NS_NULL);\n+  if (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext)\n+      && inst.cond == COND_ALWAYS\n+      && ((unsigned)inst.instruction) == M_MNEM_vmullt)\n+    {\n+      if (rs == NS_QQQ)\n+\t{\n+\n+\t  struct neon_type_el et = neon_check_type (3, rs, N_EQK , N_EQK,\n+\t\t\t\t\t\t    N_SUF_32 | N_F64 | N_P8\n+\t\t\t\t\t\t    | N_P16 | N_I_MVE | N_KEY);\n+\t  if (((et.type == NT_poly) && et.size == 8\n+\t       && ARM_CPU_IS_ANY (cpu_variant))\n+\t      || (et.type == NT_integer) || (et.type == NT_float))\n+\t    goto neon_vmul;\n+\t}\n+      else\n+\tgoto neon_vmul;\n+    }\n+\n+  constraint (rs != NS_QQQ, BAD_FPU);\n+  struct neon_type_el et = neon_check_type (3, rs, N_EQK , N_EQK,\n+\t\t\t\t\t    N_SU_32 | N_P8 | N_P16 | N_KEY);\n+\n+  /* We are dealing with MVE's vmullt.  */\n+  if (et.size == 32\n+      && (inst.operands[0].reg == inst.operands[1].reg\n+\t  || inst.operands[0].reg == inst.operands[2].reg))\n+    as_tsktsk (BAD_MVE_SRCDEST);\n+\n+  if (inst.cond > COND_ALWAYS)\n+    inst.pred_insn_type = INSIDE_VPT_INSN;\n+  else\n+    inst.pred_insn_type = MVE_OUTSIDE_PRED_INSN;\n+\n+  if (et.type == NT_poly)\n+    mve_encode_qqq (neon_logbits (et.size), 64);\n+  else\n+    mve_encode_qqq (et.type == NT_unsigned, et.size);\n+\n+  return;\n+\n+neon_vmul:\n+  inst.instruction = N_MNEM_vmul;\n+  inst.cond = 0xb;\n+  if (thumb_mode)\n+    inst.pred_insn_type = INSIDE_IT_INSN;\n+  do_neon_mul ();\n+}\n+\n static void\n do_mve_vabav (void)\n {\n@@ -22748,6 +22842,7 @@ static const struct asm_opcode insns[] =\n  ToC(\"vpsteee\",\tfe712f4d, 0, (), mve_vpt),\n \n  /* MVE and MVE FP only.  */\n+ mCEF(vmullb,\t_vmullb,    3, (RMQ, RMQ, RMQ),\t\t\t  mve_vmull),\n  mCEF(vabav,\t_vabav,\t    3, (RRnpcsp, RMQ, RMQ),\t\t  mve_vabav),\n  mCEF(vmladav,\t  _vmladav,\t3, (RRe, RMQ, RMQ),\t\tmve_vmladav),\n  mCEF(vmladava,\t  _vmladava,\t3, (RRe, RMQ, RMQ),\t\tmve_vmladav),\n@@ -22765,8 +22860,9 @@ static const struct asm_opcode insns[] =\n #undef  THUMB_VARIANT\n #define THUMB_VARIANT  & arm_ext_v6t2\n \n- mnCEF(vadd,     _vadd,    3, (RNSDQMQ, oRNSDQMQ, RNSDQMQR), neon_addsub_if_i),\n- mnCEF(vsub,     _vsub,    3, (RNSDQMQ, oRNSDQMQ, RNSDQMQR), neon_addsub_if_i),\n+ mCEF(vmullt, _vmullt,\t3, (RNSDQMQ, oRNSDQMQ, RNSDQ_RNSC_MQ),\tmve_vmull),\n+ mnCEF(vadd,  _vadd,\t3, (RNSDQMQ, oRNSDQMQ, RNSDQMQR),\tneon_addsub_if_i),\n+ mnCEF(vsub,  _vsub,\t3, (RNSDQMQ, oRNSDQMQ, RNSDQMQR),\tneon_addsub_if_i),\n \n  MNCEF(vabs,  1b10300,\t2, (RNSDQMQ, RNSDQMQ),\tneon_abs_neg),\n  MNCEF(vneg,  1b10380,\t2, (RNSDQMQ, RNSDQMQ),\tneon_abs_neg),"
    },
    {
      "sha": "91cbb1c1b71570595bb64b664489024da0f0722e",
      "filename": "gas/testsuite/gas/arm/mve-vmullbt-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/886e1c739b5441aca92a9725c932d0d446097a32/gas/testsuite/gas/arm/mve-vmullbt-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/886e1c739b5441aca92a9725c932d0d446097a32/gas/testsuite/gas/arm/mve-vmullbt-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmullbt-bad.d?ref=886e1c739b5441aca92a9725c932d0d446097a32",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VMULL instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vmullbt-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "19f99dcc2ea3b04d1ce7ac656c47c1d08718ef26",
      "filename": "gas/testsuite/gas/arm/mve-vmullbt-bad.l",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/886e1c739b5441aca92a9725c932d0d446097a32/gas/testsuite/gas/arm/mve-vmullbt-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/886e1c739b5441aca92a9725c932d0d446097a32/gas/testsuite/gas/arm/mve-vmullbt-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmullbt-bad.l?ref=886e1c739b5441aca92a9725c932d0d446097a32",
      "patch": "@@ -0,0 +1,33 @@\n+[^:]*: Assembler messages:\n+[^:]*:13: Error: bad type in SIMD instruction -- `vmullb.s64 q0,q1,q2'\n+[^:]*:14: Error: bad type in SIMD instruction -- `vmullb.f16 q0,q1,q2'\n+[^:]*:15: Error: bad type in SIMD instruction -- `vmullb.f32 q0,q1,q2'\n+[^:]*:16: Warning: 32-bit element size and same destination and source operands makes instruction UNPREDICTABLE\n+[^:]*:17: Warning: 32-bit element size and same destination and source operands makes instruction UNPREDICTABLE\n+[^:]*:18: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:18: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:18: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:18: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:18: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:18: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:19: Error: bad type in SIMD instruction -- `vmullt.s64 q0,q1,q2'\n+[^:]*:20: Error: bad type in SIMD instruction -- `vmullt.f16 q0,q1,q2'\n+[^:]*:21: Error: bad type in SIMD instruction -- `vmullt.f32 q0,q1,q2'\n+[^:]*:22: Warning: 32-bit element size and same destination and source operands makes instruction UNPREDICTABLE\n+[^:]*:23: Warning: 32-bit element size and same destination and source operands makes instruction UNPREDICTABLE\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Error: syntax error -- `vmullbeq.s32 q0,q1,q2'\n+[^:]*:27: Error: syntax error -- `vmullbeq.s32 q0,q1,q2'\n+[^:]*:29: Error: syntax error -- `vmullbeq.s32 q0,q1,q2'\n+[^:]*:31: Error: instruction missing MVE vector predication code -- `vmullb.s32 q0,q1,q2'\n+[^:]*:32: Error: vector predicated instruction should be in VPT/VPST block -- `vmullbt.s32 q0,q1,q2'\n+[^:]*:34: Error: syntax error -- `vmullteq.s32 q0,q1,q2'\n+[^:]*:35: Error: syntax error -- `vmullteq.s32 q0,q1,q2'\n+[^:]*:37: Error: syntax error -- `vmullteq.s32 q0,q1,q2'\n+[^:]*:39: Error: instruction missing MVE vector predication code -- `vmullt.s32 q0,q1,q2'\n+[^:]*:40: Error: vector predicated instruction should be in VPT/VPST block -- `vmulltt.s32 q0,q1,q2'"
    },
    {
      "sha": "e48269492b65990812abd1e6ab3766dd35723759",
      "filename": "gas/testsuite/gas/arm/mve-vmullbt-bad.s",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/886e1c739b5441aca92a9725c932d0d446097a32/gas/testsuite/gas/arm/mve-vmullbt-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/886e1c739b5441aca92a9725c932d0d446097a32/gas/testsuite/gas/arm/mve-vmullbt-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vmullbt-bad.s?ref=886e1c739b5441aca92a9725c932d0d446097a32",
      "patch": "@@ -0,0 +1,40 @@\n+.macro cond op\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+\\op\\().s32 q0, q1, q2\n+.endr\n+.endm\n+\n+\n+\n+.syntax unified\n+.text\n+.thumb\n+vmullb.s64 q0, q1, q2\n+vmullb.f16 q0, q1, q2\n+vmullb.f32 q0, q1, q2\n+vmullb.s32  q1, q1, q2\n+vmullb.s32  q2, q1, q2\n+cond vmullb\n+vmullt.s64 q0, q1, q2\n+vmullt.f16 q0, q1, q2\n+vmullt.f32 q0, q1, q2\n+vmullt.u32  q1, q1, q2\n+vmullt.u32  q2, q1, q2\n+cond vmullt\n+it eq\n+vmullbeq.s32 q0, q1, q2\n+vmullbeq.s32 q0, q1, q2\n+vpst\n+vmullbeq.s32 q0, q1, q2\n+vpst\n+vmullb.s32 q0, q1, q2\n+vmullbt.s32 q0, q1, q2\n+it eq\n+vmullteq.s32 q0, q1, q2\n+vmullteq.s32 q0, q1, q2\n+vpst\n+vmullteq.s32 q0, q1, q2\n+vpst\n+vmullt.s32 q0, q1, q2\n+vmulltt.s32 q0, q1, q2"
    }
  ]
}