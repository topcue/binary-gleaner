{
  "sha": "a67a1c41fe4ab9bd8b1dcb7d5f68e080a0e96dfe",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTY3YTFjNDFmZTRhYjliZDhiMWRjYjdkNWY2OGUwODBhMGU5NmRmZQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-22T13:57:55Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-22T15:09:16Z"
    },
    "message": "gdb/python: Use reference not pointer in py-registers.c\n\nPedro's review comments arrived after I'd already committed this\nchange:\n\n  commit f7306dac19c502232f766c3881313857915f330d\n  Date:   Tue Jul 7 15:00:30 2020 +0100\n\n      gdb/python: Reuse gdb.RegisterDescriptor objects where possible\n\nSee:\n\n  https://sourceware.org/pipermail/gdb-patches/2020-July/170726.html\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* python/py-registers.c (gdbpy_register_object_data_init): Remove\n\tredundant local variable.\n\t(gdbpy_get_register_descriptor): Extract descriptor vector as a\n\treference, not pointer, update code accordingly.",
    "tree": {
      "sha": "42b836fae3e703bbc10120fdadd46c6e15eeca19",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/42b836fae3e703bbc10120fdadd46c6e15eeca19"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a67a1c41fe4ab9bd8b1dcb7d5f68e080a0e96dfe",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a67a1c41fe4ab9bd8b1dcb7d5f68e080a0e96dfe",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a67a1c41fe4ab9bd8b1dcb7d5f68e080a0e96dfe",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a67a1c41fe4ab9bd8b1dcb7d5f68e080a0e96dfe/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "df16e041deafa1d7fe7d8e65c02213b885c60a8e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/df16e041deafa1d7fe7d8e65c02213b885c60a8e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/df16e041deafa1d7fe7d8e65c02213b885c60a8e"
    }
  ],
  "stats": {
    "total": 25,
    "additions": 16,
    "deletions": 9
  },
  "files": [
    {
      "sha": "1cef37dea6c21f3ad9d9f59252677652b14ae871",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a67a1c41fe4ab9bd8b1dcb7d5f68e080a0e96dfe/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a67a1c41fe4ab9bd8b1dcb7d5f68e080a0e96dfe/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a67a1c41fe4ab9bd8b1dcb7d5f68e080a0e96dfe",
      "patch": "@@ -1,3 +1,10 @@\n+2020-07-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python/py-registers.c (gdbpy_register_object_data_init): Remove\n+\tredundant local variable.\n+\t(gdbpy_get_register_descriptor): Extract descriptor vector as a\n+\treference, not pointer, update code accordingly.\n+\n 2020-07-22  Simon Marchi  <simon.marchi@polymtl.ca>\n \t    Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n "
    },
    {
      "sha": "f64ca3c401b010d00fa71d52fca8d7a361a4e9de",
      "filename": "gdb/python/py-registers.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a67a1c41fe4ab9bd8b1dcb7d5f68e080a0e96dfe/gdb/python/py-registers.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a67a1c41fe4ab9bd8b1dcb7d5f68e080a0e96dfe/gdb/python/py-registers.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-registers.c?ref=a67a1c41fe4ab9bd8b1dcb7d5f68e080a0e96dfe",
      "patch": "@@ -92,8 +92,7 @@ extern PyTypeObject reggroup_object_type\n static void *\n gdbpy_register_object_data_init (struct gdbarch *gdbarch)\n {\n-  std::vector<gdbpy_ref<>> *vec = new (std::vector<gdbpy_ref<>>);\n-  return (void *) vec;\n+  return new std::vector<gdbpy_ref<>>;\n }\n \n /* Return a gdb.RegisterGroup object wrapping REGGROUP.  The register\n@@ -158,16 +157,17 @@ static gdbpy_ref<>\n gdbpy_get_register_descriptor (struct gdbarch *gdbarch,\n \t\t\t       int regnum)\n {\n-  auto vec = (std::vector<gdbpy_ref<>> *) gdbarch_data\n-    (gdbarch, gdbpy_register_object_data);\n+  auto &vec\n+    = *(std::vector<gdbpy_ref<>> *) gdbarch_data (gdbarch,\n+\t\t\t\t\t\t  gdbpy_register_object_data);\n \n   /* Ensure that we have enough entries in the vector.  */\n-  if (vec->size () <= regnum)\n-    vec->resize ((regnum + 1), nullptr);\n+  if (vec.size () <= regnum)\n+    vec.resize ((regnum + 1), nullptr);\n \n   /* If we don't already have a descriptor for REGNUM in GDBARCH then\n      create one now.  */\n-  if (vec->at (regnum) == nullptr)\n+  if (vec[regnum] == nullptr)\n     {\n       gdbpy_ref <register_descriptor_object> reg\n \t(PyObject_New (register_descriptor_object,\n@@ -176,12 +176,12 @@ gdbpy_get_register_descriptor (struct gdbarch *gdbarch,\n \treturn NULL;\n       reg->regnum = regnum;\n       reg->gdbarch = gdbarch;\n-      vec->at (regnum) = gdbpy_ref<> ((PyObject *) reg.release ());\n+      vec[regnum] = gdbpy_ref<> ((PyObject *) reg.release ());\n     }\n \n   /* Grab the register descriptor from the vector, the reference count is\n      automatically incremented thanks to gdbpy_ref.  */\n-  return vec->at (regnum);\n+  return vec[regnum];\n }\n \n /* Convert the register descriptor to a string.  */"
    }
  ]
}