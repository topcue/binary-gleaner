{
  "sha": "1a1bfce78f58cc934bf6ace4d03ddc87c9cbb860",
  "node_id": "C_kwDOANOeidoAKDFhMWJmY2U3OGY1OGNjOTM0YmY2YWNlNGQwM2RkYzg3YzljYmI4NjA",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-01-27T00:57:33Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-02-06T21:27:58Z"
    },
    "message": "Merge do_val_print and common_val_print\n\nThe only caller of do_val_print just does a small bit of work before\nthe call.  This patch merges the two functions, and removes an\nunnecessary local variable, making gdb a bit simpler.",
    "tree": {
      "sha": "c6868e38013866ca266f78296387f76b349b0c15",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c6868e38013866ca266f78296387f76b349b0c15"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1a1bfce78f58cc934bf6ace4d03ddc87c9cbb860",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a1bfce78f58cc934bf6ace4d03ddc87c9cbb860",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1a1bfce78f58cc934bf6ace4d03ddc87c9cbb860",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a1bfce78f58cc934bf6ace4d03ddc87c9cbb860/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5d0027b9bab7cbf5eb41a8c8ad1b9e4650d5f87e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5d0027b9bab7cbf5eb41a8c8ad1b9e4650d5f87e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5d0027b9bab7cbf5eb41a8c8ad1b9e4650d5f87e"
    }
  ],
  "stats": {
    "total": 56,
    "additions": 21,
    "deletions": 35
  },
  "files": [
    {
      "sha": "25e4a8dc8e15dffdaa3a83ed265be2f1bf8bfe42",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 21,
      "deletions": 35,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a1bfce78f58cc934bf6ace4d03ddc87c9cbb860/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a1bfce78f58cc934bf6ace4d03ddc87c9cbb860/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=1a1bfce78f58cc934bf6ace4d03ddc87c9cbb860",
      "patch": "@@ -989,16 +989,27 @@ generic_value_print (struct value *val, struct ui_file *stream, int recurse,\n     }\n }\n \n-/* Helper function for val_print and common_val_print that does the\n-   work.  Arguments are as to val_print, but FULL_VALUE, if given, is\n-   the value to be printed.  */\n+/* Print using the given LANGUAGE the value VAL onto stream STREAM according\n+   to OPTIONS.\n \n-static void\n-do_val_print (struct value *value, struct ui_file *stream, int recurse,\n-\t      const struct value_print_options *options,\n-\t      const struct language_defn *language)\n+   This is a preferable interface to val_print, above, because it uses\n+   GDB's value mechanism.  */\n+\n+void\n+common_val_print (struct value *value, struct ui_file *stream, int recurse,\n+\t\t  const struct value_print_options *options,\n+\t\t  const struct language_defn *language)\n {\n-  int ret = 0;\n+  if (language->la_language == language_ada)\n+    /* The value might have a dynamic type, which would cause trouble\n+       below when trying to extract the value contents (since the value\n+       size is determined from the type size which is unknown).  So\n+       get a fixed representation of our value.  */\n+    value = ada_to_fixed_value (value);\n+\n+  if (value_lazy (value))\n+    value_fetch_lazy (value);\n+\n   struct value_print_options local_opts = *options;\n   struct type *type = value_type (value);\n   struct type *real_type = check_typedef (type);\n@@ -1024,9 +1035,8 @@ do_val_print (struct value *value, struct ui_file *stream, int recurse,\n \n   if (!options->raw)\n     {\n-      ret = apply_ext_lang_val_pretty_printer (value, stream, recurse, options,\n-\t\t\t\t\t       language);\n-      if (ret)\n+      if (apply_ext_lang_val_pretty_printer (value, stream, recurse, options,\n+\t\t\t\t\t     language))\n \treturn;\n     }\n \n@@ -1127,30 +1137,6 @@ value_check_printable (struct value *val, struct ui_file *stream,\n   return 1;\n }\n \n-/* Print using the given LANGUAGE the value VAL onto stream STREAM according\n-   to OPTIONS.\n-\n-   This is a preferable interface to val_print, above, because it uses\n-   GDB's value mechanism.  */\n-\n-void\n-common_val_print (struct value *val, struct ui_file *stream, int recurse,\n-\t\t  const struct value_print_options *options,\n-\t\t  const struct language_defn *language)\n-{\n-  if (language->la_language == language_ada)\n-    /* The value might have a dynamic type, which would cause trouble\n-       below when trying to extract the value contents (since the value\n-       size is determined from the type size which is unknown).  So\n-       get a fixed representation of our value.  */\n-    val = ada_to_fixed_value (val);\n-\n-  if (value_lazy (val))\n-    value_fetch_lazy (val);\n-\n-  do_val_print (val, stream, recurse, options, language);\n-}\n-\n /* See valprint.h.  */\n \n void"
    }
  ]
}