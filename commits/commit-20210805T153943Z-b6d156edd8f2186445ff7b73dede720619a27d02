{
  "sha": "b6d156edd8f2186445ff7b73dede720619a27d02",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjZkMTU2ZWRkOGYyMTg2NDQ1ZmY3YjczZGVkZTcyMDYxOWEyN2QwMg==",
  "commit": {
    "author": {
      "name": "Zoran Zaric",
      "email": "zoran.zaric@amd.com",
      "date": "2020-09-15T09:27:29Z"
    },
    "committer": {
      "name": "Zoran Zaric",
      "email": "zoran.zaric@amd.com",
      "date": "2021-08-05T15:39:43Z"
    },
    "message": "Move dwarf_call to dwarf_expr_context\n\nFollowing the idea of merging the evaluators, the dwarf_call and\nget_frame_pc method can be moved from dwarf_expr_executor and\ndwarf_evaluate_loc_desc classes to their base class dwarf_expr_context.\nOnce this is done, the get_frame_pc can be replace with lambda\nfunction.\n\ngdb/ChangeLog:\n\n\t* dwarf2/expr.c (dwarf_expr_context::dwarf_call): Move from\n\tdwarf_evaluate_loc_desc.\n\t(dwarf_expr_context::get_frame_pc): Replace with lambda.\n\t* dwarf2/expr.h (dwarf_expr_context::get_frame_pc): Remove\n\tmethod.\n\t* dwarf2/frame.c (dwarf_expr_executor::dwarf_call): Remove\n\tmethod.\n\t(dwarf_expr_executor::get_frame_pc): Remove method.\n\t* dwarf2/loc.c (dwarf_evaluate_loc_desc::get_frame_pc): Remove\n\tmethod.\n\t(dwarf_evaluate_loc_desc::dwarf_call): Move to\n\tdwarf_expr_context.\n\t(per_cu_dwarf_call): Inline function.",
    "tree": {
      "sha": "6e7f9b6d1cf8ad722c79768e53401aea1e6a703f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6e7f9b6d1cf8ad722c79768e53401aea1e6a703f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b6d156edd8f2186445ff7b73dede720619a27d02",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b6d156edd8f2186445ff7b73dede720619a27d02",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b6d156edd8f2186445ff7b73dede720619a27d02",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b6d156edd8f2186445ff7b73dede720619a27d02/comments",
  "author": {
    "login": "ZaricZoran",
    "id": 81635026,
    "node_id": "MDQ6VXNlcjgxNjM1MDI2",
    "avatar_url": "https://avatars.githubusercontent.com/u/81635026?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ZaricZoran",
    "html_url": "https://github.com/ZaricZoran",
    "followers_url": "https://api.github.com/users/ZaricZoran/followers",
    "following_url": "https://api.github.com/users/ZaricZoran/following{/other_user}",
    "gists_url": "https://api.github.com/users/ZaricZoran/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ZaricZoran/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ZaricZoran/subscriptions",
    "organizations_url": "https://api.github.com/users/ZaricZoran/orgs",
    "repos_url": "https://api.github.com/users/ZaricZoran/repos",
    "events_url": "https://api.github.com/users/ZaricZoran/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ZaricZoran/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "ZaricZoran",
    "id": 81635026,
    "node_id": "MDQ6VXNlcjgxNjM1MDI2",
    "avatar_url": "https://avatars.githubusercontent.com/u/81635026?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ZaricZoran",
    "html_url": "https://github.com/ZaricZoran",
    "followers_url": "https://api.github.com/users/ZaricZoran/followers",
    "following_url": "https://api.github.com/users/ZaricZoran/following{/other_user}",
    "gists_url": "https://api.github.com/users/ZaricZoran/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ZaricZoran/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ZaricZoran/subscriptions",
    "organizations_url": "https://api.github.com/users/ZaricZoran/orgs",
    "repos_url": "https://api.github.com/users/ZaricZoran/repos",
    "events_url": "https://api.github.com/users/ZaricZoran/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ZaricZoran/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a580d9604bb71c19741465f2e3a46c5a07672be0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a580d9604bb71c19741465f2e3a46c5a07672be0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a580d9604bb71c19741465f2e3a46c5a07672be0"
    }
  ],
  "stats": {
    "total": 103,
    "additions": 33,
    "deletions": 70
  },
  "files": [
    {
      "sha": "b13de9879082386e9750b1a57daeaee92c8c61de",
      "filename": "gdb/dwarf2/expr.c",
      "status": "modified",
      "additions": 27,
      "deletions": 1,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6d156edd8f2186445ff7b73dede720619a27d02/gdb/dwarf2/expr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6d156edd8f2186445ff7b73dede720619a27d02/gdb/dwarf2/expr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/expr.c?ref=b6d156edd8f2186445ff7b73dede720619a27d02",
      "patch": "@@ -224,6 +224,31 @@ dwarf_expr_context::get_base_type (cu_offset die_cu_off)\n   return result;\n }\n \n+/* See expr.h.  */\n+\n+void\n+dwarf_expr_context::dwarf_call (cu_offset die_cu_off)\n+{\n+  ensure_have_per_cu (this->per_cu, \"DW_OP_call\");\n+\n+  frame_info *frame = this->frame;\n+\n+  auto get_pc_from_frame = [frame] ()\n+    {\n+      ensure_have_frame (frame, \"DW_OP_call\");\n+      return get_frame_address_in_block (frame);\n+    };\n+\n+  dwarf2_locexpr_baton block\n+    = dwarf2_fetch_die_loc_cu_off (die_cu_off, this->per_cu, this->per_objfile,\n+\t\t\t\t   get_pc_from_frame);\n+\n+  /* DW_OP_call_ref is currently not supported.  */\n+  gdb_assert (block.per_cu == this->per_cu);\n+\n+  this->eval (block.data, block.size);\n+}\n+\n /* Require that TYPE be an integral type; throw an exception if not.  */\n \n static void\n@@ -1269,7 +1294,8 @@ dwarf_expr_context::execute_stack_op (const gdb_byte *op_ptr,\n \t  returned.  */\n \t  result = value_as_long (fetch (0));\n \t  pop ();\n-\t  result = this->get_tls_address (result);\n+\t  result = target_translate_tls_address (this->per_objfile->objfile,\n+\t\t\t\t\t\t result);\n \t  result_val = value_from_ulongest (address_type, result);\n \t  break;\n "
    },
    {
      "sha": "52f50516d968b97e01fe8974a10bf690042e84ac",
      "filename": "gdb/dwarf2/expr.h",
      "status": "modified",
      "additions": 6,
      "deletions": 16,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6d156edd8f2186445ff7b73dede720619a27d02/gdb/dwarf2/expr.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6d156edd8f2186445ff7b73dede720619a27d02/gdb/dwarf2/expr.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/expr.h?ref=b6d156edd8f2186445ff7b73dede720619a27d02",
      "patch": "@@ -191,22 +191,6 @@ struct dwarf_expr_context\n   /* Read LENGTH bytes at ADDR into BUF.  */\n   virtual void read_mem (gdb_byte *buf, CORE_ADDR addr, size_t length) = 0;\n \n-  /* Return the PC for the frame.  */\n-  virtual CORE_ADDR get_frame_pc ()\n-  {\n-    error (_(\"%s is invalid in this context\"), \"DW_OP_implicit_pointer\");\n-  }\n-\n-  /* Return the thread-local storage address for\n-     DW_OP_GNU_push_tls_address or DW_OP_form_tls_address.  */\n-  virtual CORE_ADDR get_tls_address (CORE_ADDR offset) = 0;\n-\n-  /* Execute DW_AT_location expression for the DWARF expression\n-     subroutine in the DIE at DIE_CU_OFF in the CU.  Do not touch\n-     STACK while it being passed to and returned from the called DWARF\n-     subroutine.  */\n-  virtual void dwarf_call (cu_offset die_cu_off) = 0;\n-\n   /* Push on DWARF stack an entry evaluated for DW_TAG_call_site's\n      parameter matching KIND and KIND_U at the caller of specified BATON.\n      If DEREF_SIZE is not -1 then use DW_AT_call_data_value instead of\n@@ -242,6 +226,12 @@ struct dwarf_expr_context\n      This can throw an exception if the DIE is invalid or does not\n      represent a base type.  */\n   struct type *get_base_type (cu_offset die_cu_off);\n+\n+  /* Execute DW_AT_location expression for the DWARF expression\n+     subroutine in the DIE at DIE_CU_OFF in the CU.  Do not touch\n+     STACK while it being passed to and returned from the called DWARF\n+     subroutine.  */\n+  void dwarf_call (cu_offset die_cu_off);\n };\n \n /* Return the value of register number REG (a DWARF register number),"
    },
    {
      "sha": "6aaad942d4f158cd8144ef1b60307465ee6b77de",
      "filename": "gdb/dwarf2/frame.c",
      "status": "modified",
      "additions": 0,
      "deletions": 10,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6d156edd8f2186445ff7b73dede720619a27d02/gdb/dwarf2/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6d156edd8f2186445ff7b73dede720619a27d02/gdb/dwarf2/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/frame.c?ref=b6d156edd8f2186445ff7b73dede720619a27d02",
      "patch": "@@ -249,16 +249,6 @@ class dwarf_expr_executor : public dwarf_expr_context\n     invalid (\"DW_OP_push_object_address\");\n   }\n \n-  CORE_ADDR get_tls_address (CORE_ADDR offset) override\n-  {\n-    invalid (\"DW_OP_form_tls_address\");\n-  }\n-\n-  void dwarf_call (cu_offset die_offset) override\n-  {\n-    invalid (\"DW_OP_call*\");\n-  }\n-\n  private:\n \n   void invalid (const char *op) ATTRIBUTE_NORETURN"
    },
    {
      "sha": "e63b3393e41a2dd8b36a1cb674ceb9d681d8d5a4",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 0,
      "deletions": 43,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6d156edd8f2186445ff7b73dede720619a27d02/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6d156edd8f2186445ff7b73dede720619a27d02/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=b6d156edd8f2186445ff7b73dede720619a27d02",
      "patch": "@@ -618,26 +618,6 @@ func_get_frame_base_dwarf_block (struct symbol *framefunc, CORE_ADDR pc,\n \t   framefunc->natural_name ());\n }\n \n-static void\n-per_cu_dwarf_call (struct dwarf_expr_context *ctx, cu_offset die_offset,\n-\t\t   dwarf2_per_cu_data *per_cu, dwarf2_per_objfile *per_objfile)\n-{\n-  struct dwarf2_locexpr_baton block;\n-\n-  auto get_frame_pc_from_ctx = [ctx] ()\n-    {\n-      return ctx->get_frame_pc ();\n-    };\n-\n-  block = dwarf2_fetch_die_loc_cu_off (die_offset, per_cu, per_objfile,\n-\t\t\t\t       get_frame_pc_from_ctx);\n-\n-  /* DW_OP_call_ref is currently not supported.  */\n-  gdb_assert (block.per_cu == per_cu);\n-\n-  ctx->eval (block.data, block.size);\n-}\n-\n /* A helper function to find the definition of NAME and compute its\n    value.  Returns nullptr if the name is not found.  */\n \n@@ -696,29 +676,6 @@ class dwarf_evaluate_loc_desc : public dwarf_expr_context\n \n   CORE_ADDR obj_address;\n \n-  /* Helper function for dwarf2_evaluate_loc_desc.  Computes the PC for\n-     the frame in BATON.  */\n-\n-  CORE_ADDR get_frame_pc () override\n-  {\n-    return get_frame_address_in_block (frame);\n-  }\n-\n-  /* Using the objfile specified in BATON, find the address for the\n-     current thread's thread-local storage with offset OFFSET.  */\n-  CORE_ADDR get_tls_address (CORE_ADDR offset) override\n-  {\n-    return target_translate_tls_address (per_objfile->objfile, offset);\n-  }\n-\n-  /* Helper interface of per_cu_dwarf_call for\n-     dwarf2_evaluate_loc_desc.  */\n-\n-  void dwarf_call (cu_offset die_offset) override\n-  {\n-    per_cu_dwarf_call (this, die_offset, per_cu, per_objfile);\n-  }\n-\n   /* Callback function for get_object_address. Return the address of the VLA\n      object.  */\n "
    }
  ]
}