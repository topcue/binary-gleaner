{
  "sha": "eb00e4686dd1a1530737e2de7eae971d61332da1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWIwMGU0Njg2ZGQxYTE1MzA3MzdlMmRlN2VhZTk3MWQ2MTMzMmRhMQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:40Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:44Z"
    },
    "message": "Remove sym_fns::sym_read_psymbols\n\nPartial symbols are read via the sym_fns::sym_read_psymbols function\npointer.  In order to separate the partial symbols from the objfile,\nthis must instead be done via a virtual method on\nquick_symbol_functions.  This patch implements this change.\n\ngdb/ChangeLog\n2021-03-20  Tom Tromey  <tom@tromey.com>\n\n\t* xcoffread.c (xcoff_sym_fns): Update.\n\t* symfile.h (struct sym_fns) <sym_read_psymbols>: Remove.\n\t* symfile-debug.c (objfile::has_partial_symbols): Use\n\tcan_lazily_read_symbols.\n\t(debug_sym_read_psymbols): Remove.\n\t(debug_sym_fns, install_symfile_debug_logging): Update.\n\t* quick-symbol.h (struct quick_symbol_functions)\n\t<can_lazily_read_symbols, read_partial_symbols>: New methods.\n\t* psymtab.c (require_partial_symbols): Use new 'qf' methods.\n\t* mipsread.c (ecoff_sym_fns): Update.\n\t* machoread.c (macho_sym_fns): Update.\n\t* elfread.c (struct lazy_dwarf_reader): New.\n\t(elf_symfile_read): Update.\n\t(read_psyms): Now a method of lazy_dwarf_reader.\n\t(elf_sym_fns): Update.\n\t(elf_sym_fns_lazy_psyms): Remove.\n\t* dbxread.c (aout_sym_fns): Update.\n\t* coffread.c (coff_sym_fns): Update.",
    "tree": {
      "sha": "72c57133482f5dbc22fe2d204357ab13c194bc06",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/72c57133482f5dbc22fe2d204357ab13c194bc06"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/eb00e4686dd1a1530737e2de7eae971d61332da1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb00e4686dd1a1530737e2de7eae971d61332da1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/eb00e4686dd1a1530737e2de7eae971d61332da1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb00e4686dd1a1530737e2de7eae971d61332da1/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b29b98cf8411ac136d17fc68236fc029447f1461",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b29b98cf8411ac136d17fc68236fc029447f1461",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b29b98cf8411ac136d17fc68236fc029447f1461"
    }
  ],
  "stats": {
    "total": 120,
    "additions": 59,
    "deletions": 61
  },
  "files": [
    {
      "sha": "1640270a7c197b56a65329db2d11336602a9c629",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=eb00e4686dd1a1530737e2de7eae971d61332da1",
      "patch": "@@ -1,3 +1,24 @@\n+2021-03-20  Tom Tromey  <tom@tromey.com>\n+\n+\t* xcoffread.c (xcoff_sym_fns): Update.\n+\t* symfile.h (struct sym_fns) <sym_read_psymbols>: Remove.\n+\t* symfile-debug.c (objfile::has_partial_symbols): Use\n+\tcan_lazily_read_symbols.\n+\t(debug_sym_read_psymbols): Remove.\n+\t(debug_sym_fns, install_symfile_debug_logging): Update.\n+\t* quick-symbol.h (struct quick_symbol_functions)\n+\t<can_lazily_read_symbols, read_partial_symbols>: New methods.\n+\t* psymtab.c (require_partial_symbols): Use new 'qf' methods.\n+\t* mipsread.c (ecoff_sym_fns): Update.\n+\t* machoread.c (macho_sym_fns): Update.\n+\t* elfread.c (struct lazy_dwarf_reader): New.\n+\t(elf_symfile_read): Update.\n+\t(read_psyms): Now a method of lazy_dwarf_reader.\n+\t(elf_sym_fns): Update.\n+\t(elf_sym_fns_lazy_psyms): Remove.\n+\t* dbxread.c (aout_sym_fns): Update.\n+\t* coffread.c (coff_sym_fns): Update.\n+\n 2021-03-20  Tom Tromey  <tom@tromey.com>\n \n \t* symfile.c (syms_from_objfile_1): Call reset_psymtabs."
    },
    {
      "sha": "b527f934c95f086360db92a5f1bc8038191f2295",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=eb00e4686dd1a1530737e2de7eae971d61332da1",
      "patch": "@@ -2168,7 +2168,6 @@ static const struct sym_fns coff_sym_fns =\n \t\t\t\t   for sym_read() */\n   coff_symfile_read,\t\t/* sym_read: read a symbol file into\n \t\t\t\t   symtab */\n-  NULL,\t\t\t\t/* sym_read_psymbols */\n   coff_symfile_finish,\t\t/* sym_finish: finished with file,\n \t\t\t\t   cleanup */\n   default_symfile_offsets,\t/* sym_offsets: xlate external to"
    },
    {
      "sha": "e0cc2597f73235afd3d5845447a85c674fb8e629",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=eb00e4686dd1a1530737e2de7eae971d61332da1",
      "patch": "@@ -3131,7 +3131,6 @@ static const struct sym_fns aout_sym_fns =\n   dbx_new_init,\t\t\t/* init anything gbl to entire symtab */\n   dbx_symfile_init,\t\t/* read initial info, setup for sym_read() */\n   dbx_symfile_read,\t\t/* read a symbol file into symtab */\n-  NULL,\t\t\t\t/* sym_read_psymbols */\n   dbx_symfile_finish,\t\t/* finished with file, cleanup */\n   default_symfile_offsets, \t/* parse user's offsets to internal form */\n   default_symfile_segments,\t/* Get segment information from a file.  */"
    },
    {
      "sha": "157a07178289a48f42f14a849223f1117c3b415e",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 20,
      "deletions": 29,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=eb00e4686dd1a1530737e2de7eae971d61332da1",
      "patch": "@@ -53,7 +53,24 @@\n #include \"debuginfod-support.h\"\n #include \"dwarf2/public.h\"\n \n-/* Forward declarations.  */\n+/* A subclass of psymbol_functions that arranges to read the DWARF\n+   partial symbols when needed.  */\n+struct lazy_dwarf_reader : public psymbol_functions\n+{\n+  using psymbol_functions::psymbol_functions;\n+\n+  bool can_lazily_read_symbols () override\n+  {\n+    return true;\n+  }\n+\n+  void read_partial_symbols (struct objfile *objfile) override\n+  {\n+    if (dwarf2_has_info (objfile, nullptr))\n+      dwarf2_build_psymtabs (objfile);\n+  }\n+};\n+\n extern const struct sym_fns elf_sym_fns_lazy_psyms;\n \n /* The struct elfinfo is available only during ELF symbol table and\n@@ -1283,7 +1300,8 @@ elf_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n \t     partial symbols, because OBJF_PSYMTABS_READ has not been\n \t     set, and so our lazy reader function will still be called\n \t     when needed.  */\n-\t  objfile_set_sym_fns (objfile, &elf_sym_fns_lazy_psyms);\n+\t  objfile->qf.reset\n+\t    (new lazy_dwarf_reader (objfile->partial_symtabs));\n \t}\n     }\n   /* If the file has its own symbol tables it has no separate debug\n@@ -1353,15 +1371,6 @@ elf_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n     }\n }\n \n-/* Callback to lazily read psymtabs.  */\n-\n-static void\n-read_psyms (struct objfile *objfile)\n-{\n-  if (dwarf2_has_info (objfile, NULL))\n-    dwarf2_build_psymtabs (objfile);\n-}\n-\n /* Initialize anything that needs initializing when a completely new symbol\n    file is specified (not just adding some symbols from another file, e.g. a\n    shared library).  */\n@@ -1428,24 +1437,6 @@ static const struct sym_fns elf_sym_fns =\n   elf_new_init,\t\t\t/* init anything gbl to entire symtab */\n   elf_symfile_init,\t\t/* read initial info, setup for sym_read() */\n   elf_symfile_read,\t\t/* read a symbol file into symtab */\n-  NULL,\t\t\t\t/* sym_read_psymbols */\n-  elf_symfile_finish,\t\t/* finished with file, cleanup */\n-  default_symfile_offsets,\t/* Translate ext. to int. relocation */\n-  elf_symfile_segments,\t\t/* Get segment information from a file.  */\n-  NULL,\n-  default_symfile_relocate,\t/* Relocate a debug section.  */\n-  &elf_probe_fns,\t\t/* sym_probe_fns */\n-};\n-\n-/* The same as elf_sym_fns, but not registered and lazily reads\n-   psymbols.  */\n-\n-const struct sym_fns elf_sym_fns_lazy_psyms =\n-{\n-  elf_new_init,\t\t\t/* init anything gbl to entire symtab */\n-  elf_symfile_init,\t\t/* read initial info, setup for sym_read() */\n-  elf_symfile_read,\t\t/* read a symbol file into symtab */\n-  read_psyms,\t\t\t/* sym_read_psymbols */\n   elf_symfile_finish,\t\t/* finished with file, cleanup */\n   default_symfile_offsets,\t/* Translate ext. to int. relocation */\n   elf_symfile_segments,\t\t/* Get segment information from a file.  */"
    },
    {
      "sha": "17aa9ceee01c7d6164e7fcf250c3224fbcb2575a",
      "filename": "gdb/machoread.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/machoread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/machoread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/machoread.c?ref=eb00e4686dd1a1530737e2de7eae971d61332da1",
      "patch": "@@ -951,7 +951,6 @@ static const struct sym_fns macho_sym_fns = {\n   macho_new_init,               /* init anything gbl to entire symtab */\n   macho_symfile_init,           /* read initial info, setup for sym_read() */\n   macho_symfile_read,           /* read a symbol file into symtab */\n-  NULL,\t\t\t\t/* sym_read_psymbols */\n   macho_symfile_finish,         /* finished with file, cleanup */\n   macho_symfile_offsets,        /* xlate external to internal form */\n   default_symfile_segments,\t/* Get segment information from a file.  */"
    },
    {
      "sha": "b51af3eeaa609811d7800cfe4d2dfddb1f5556a5",
      "filename": "gdb/mipsread.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/mipsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/mipsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mipsread.c?ref=eb00e4686dd1a1530737e2de7eae971d61332da1",
      "patch": "@@ -369,7 +369,6 @@ static const struct sym_fns ecoff_sym_fns =\n   mipscoff_new_init,\t\t/* init anything gbl to entire symtab */\n   mipscoff_symfile_init,\t/* read initial info, setup for sym_read() */\n   mipscoff_symfile_read,\t/* read a symbol file into symtab */\n-  NULL,\t\t\t\t/* sym_read_psymbols */\n   mipscoff_symfile_finish,\t/* finished with file, cleanup */\n   default_symfile_offsets,\t/* dummy FIXME til implem sym reloc */\n   default_symfile_segments,\t/* Get segment information from a file.  */"
    },
    {
      "sha": "b5ddef90878715a419e5070069bb3cd8c872e0fd",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=eb00e4686dd1a1530737e2de7eae971d61332da1",
      "patch": "@@ -84,13 +84,12 @@ require_partial_symbols (struct objfile *objfile, bool verbose)\n     {\n       objfile->flags |= OBJF_PSYMTABS_READ;\n \n-      if (objfile->sf != nullptr\n-\t  && objfile->sf->sym_read_psymbols)\n+      if (objfile->qf->can_lazily_read_symbols ())\n \t{\n \t  if (verbose)\n \t    printf_filtered (_(\"Reading symbols from %s...\\n\"),\n \t\t\t     objfile_name (objfile));\n-\t  (*objfile->sf->sym_read_psymbols) (objfile);\n+\t  objfile->qf->read_partial_symbols (objfile);\n \n \t  if (verbose && !objfile_has_symbols (objfile))\n \t    printf_filtered (_(\"(No debugging symbols found in %s)\\n\"),"
    },
    {
      "sha": "dd2b896fd5f5e5fb5b0fbf7a808a48f31cb1cbe6",
      "filename": "gdb/quick-symbol.h",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/quick-symbol.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/quick-symbol.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/quick-symbol.h?ref=eb00e4686dd1a1530737e2de7eae971d61332da1",
      "patch": "@@ -237,6 +237,20 @@ struct quick_symbol_functions\n   {\n     /* Do nothing.  */\n   }\n+\n+  /* Return true if this class can lazily read the symbols.  This may\n+     only return true if there are in fact symbols to be read, because\n+     this is used in the implementation of 'has_partial_symbols'.  */\n+  virtual bool can_lazily_read_symbols ()\n+  {\n+    return false;\n+  }\n+\n+  /* Read the partial symbols for OBJFILE.  This will only ever be\n+     called if can_lazily_read_symbols returns true.  */\n+  virtual void read_partial_symbols (struct objfile *objfile)\n+  {\n+  }\n };\n \n typedef std::unique_ptr<quick_symbol_functions> quick_symbol_functions_up;"
    },
    {
      "sha": "94559c7370c4e8079ee0b97fef04e3548797b243",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 2,
      "deletions": 17,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=eb00e4686dd1a1530737e2de7eae971d61332da1",
      "patch": "@@ -81,8 +81,8 @@ objfile::has_partial_symbols ()\n      this function the symbols may have been already read in but they also may\n      not be present in this objfile.  */\n   if ((flags & OBJF_PSYMTABS_READ) == 0\n-      && sf != nullptr\n-      && sf->sym_read_psymbols != NULL)\n+      && qf != nullptr\n+      && qf->can_lazily_read_symbols ())\n     retval = true;\n   else if (qf != nullptr)\n     retval = qf->has_symbols (this);\n@@ -420,18 +420,6 @@ debug_sym_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n   debug_data->real_sf->sym_read (objfile, symfile_flags);\n }\n \n-static void\n-debug_sym_read_psymbols (struct objfile *objfile)\n-{\n-  const struct debug_sym_fns_data *debug_data\n-    = symfile_debug_objfile_data_key.get (objfile);\n-\n-  fprintf_filtered (gdb_stdlog, \"sf->sym_read_psymbols (%s)\\n\",\n-\t\t    objfile_debug_name (objfile));\n-\n-  debug_data->real_sf->sym_read_psymbols (objfile);\n-}\n-\n static void\n debug_sym_finish (struct objfile *objfile)\n {\n@@ -508,7 +496,6 @@ static const struct sym_fns debug_sym_fns =\n   debug_sym_new_init,\n   debug_sym_init,\n   debug_sym_read,\n-  debug_sym_read_psymbols,\n   debug_sym_finish,\n   debug_sym_offsets,\n   debug_sym_segments,\n@@ -543,8 +530,6 @@ install_symfile_debug_logging (struct objfile *objfile)\n   COPY_SF_PTR (real_sf, debug_data, sym_new_init, debug_sym_new_init);\n   COPY_SF_PTR (real_sf, debug_data, sym_init, debug_sym_init);\n   COPY_SF_PTR (real_sf, debug_data, sym_read, debug_sym_read);\n-  COPY_SF_PTR (real_sf, debug_data, sym_read_psymbols,\n-\t       debug_sym_read_psymbols);\n   COPY_SF_PTR (real_sf, debug_data, sym_finish, debug_sym_finish);\n   COPY_SF_PTR (real_sf, debug_data, sym_offsets, debug_sym_offsets);\n   COPY_SF_PTR (real_sf, debug_data, sym_segments, debug_sym_segments);"
    },
    {
      "sha": "bae2a798703ecbad0552c84e0577807d747578fe",
      "filename": "gdb/symfile.h",
      "status": "modified",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/symfile.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/symfile.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.h?ref=eb00e4686dd1a1530737e2de7eae971d61332da1",
      "patch": "@@ -137,13 +137,6 @@ struct sym_fns\n \n   void (*sym_read) (struct objfile *, symfile_add_flags);\n \n-  /* Read the partial symbols for an objfile.  This may be NULL, in which case\n-     gdb has to check other ways if this objfile has any symbols.  This may\n-     only be non-NULL if the objfile actually does have debuginfo available.\n-     */\n-\n-  void (*sym_read_psymbols) (struct objfile *);\n-\n   /* Called when we are finished with an objfile.  Should do all\n      cleanup that is specific to the object file format for the\n      particular objfile.  */"
    },
    {
      "sha": "7f2fee3a29cc5241f745c41beab1c10aafaae4a2",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/eb00e4686dd1a1530737e2de7eae971d61332da1/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=eb00e4686dd1a1530737e2de7eae971d61332da1",
      "patch": "@@ -3005,7 +3005,6 @@ static const struct sym_fns xcoff_sym_fns =\n   xcoff_new_init,\t\t/* init anything gbl to entire symtab */\n   xcoff_symfile_init,\t\t/* read initial info, setup for sym_read() */\n   xcoff_initial_scan,\t\t/* read a symbol file into symtab */\n-  NULL,\t\t\t\t/* sym_read_psymbols */\n   xcoff_symfile_finish,\t\t/* finished with file, cleanup */\n   xcoff_symfile_offsets,\t/* xlate offsets ext->int form */\n   default_symfile_segments,\t/* Get segment information from a file.  */"
    }
  ]
}