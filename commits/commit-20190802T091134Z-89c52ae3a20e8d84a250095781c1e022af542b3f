{
  "sha": "89c52ae3a20e8d84a250095781c1e022af542b3f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODljNTJhZTNhMjBlOGQ4NGEyNTAwOTU3ODFjMWUwMjJhZjU0MmIzZg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-08-01T02:20:55Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-08-02T09:11:34Z"
    },
    "message": "[GOLD] PowerPC64 pc-relative TLS support\n\nGold version of git commit c213164ad2.\n\nelfcpp/\n\t* powerpc.h (R_PPC64_TPREL34, R_PPC64_DTPREL34),\n\t(R_PPC64_GOT_TLSGD34, R_PPC64_GOT_TLSLD34),\n\t(R_PPC64_GOT_TPREL34, R_PPC64_GOT_DTPREL34): Define.\ngold/\n\t* powerpc.cc (Target_powerpc::Scan::get_reference_flags): Set\n\tflags for new relocations, and some missing older relocs.\n\t(Target_powerpc::Scan::local): Handle new pcrel tls relocs.\n\tCall set_has_static_tls for tprel relocs.\n\t(Target_powerpc::Scan::global): Likewise.\n\t(Target_powerpc::Relocate::relocate): Handle new pcrel tls relocs.",
    "tree": {
      "sha": "c93ddd916ff0d10ab87a232627575c9eb6f553e9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c93ddd916ff0d10ab87a232627575c9eb6f553e9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/89c52ae3a20e8d84a250095781c1e022af542b3f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89c52ae3a20e8d84a250095781c1e022af542b3f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/89c52ae3a20e8d84a250095781c1e022af542b3f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89c52ae3a20e8d84a250095781c1e022af542b3f/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6a010cf67a96adcaf80c74f926df6b42ce13e7df",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a010cf67a96adcaf80c74f926df6b42ce13e7df",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6a010cf67a96adcaf80c74f926df6b42ce13e7df"
    }
  ],
  "stats": {
    "total": 427,
    "additions": 359,
    "deletions": 68
  },
  "files": [
    {
      "sha": "30b167a7ef75b8588fdc5f98a1f9603349a10aee",
      "filename": "elfcpp/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/89c52ae3a20e8d84a250095781c1e022af542b3f/elfcpp/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/89c52ae3a20e8d84a250095781c1e022af542b3f/elfcpp/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/elfcpp/ChangeLog?ref=89c52ae3a20e8d84a250095781c1e022af542b3f",
      "patch": "@@ -1,3 +1,9 @@\n+2019-08-02  Alan Modra  <amodra@gmail.com>\n+\n+\t* powerpc.h (R_PPC64_TPREL34, R_PPC64_DTPREL34),\n+\t(R_PPC64_GOT_TLSGD34, R_PPC64_GOT_TLSLD34),\n+\t(R_PPC64_GOT_TPREL34, R_PPC64_GOT_DTPREL34): Define.\n+\n 2019-07-13  Alan Modra  <amodra@gmail.com>\n \n \t* powerpc.h (R_PPC64_PCREL_OPT, R_PPC64_D34, R_PPC64_D34_LO),"
    },
    {
      "sha": "631de3a731b67b6d5b79099fe2c0a2199a95370a",
      "filename": "elfcpp/powerpc.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/89c52ae3a20e8d84a250095781c1e022af542b3f/elfcpp/powerpc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/89c52ae3a20e8d84a250095781c1e022af542b3f/elfcpp/powerpc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/elfcpp/powerpc.h?ref=89c52ae3a20e8d84a250095781c1e022af542b3f",
      "patch": "@@ -203,6 +203,12 @@ enum\n   R_PPC64_REL16_HIGHESTA34 = 143,\n   R_PPC64_D28 = 144,\n   R_PPC64_PCREL28 = 145,\n+  R_PPC64_TPREL34 = 146,\n+  R_PPC64_DTPREL34 = 147,\n+  R_PPC64_GOT_TLSGD34 = 148,\n+  R_PPC64_GOT_TLSLD34 = 149,\n+  R_PPC64_GOT_TPREL34 = 150,\n+  R_PPC64_GOT_DTPREL34 = 151,\n \n   R_PPC_VLE_REL8 = 216,\n   R_PPC_VLE_REL15 = 217,"
    },
    {
      "sha": "85af0a3f873c19095df0fcb53aabce7e5cae8d05",
      "filename": "gold/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/89c52ae3a20e8d84a250095781c1e022af542b3f/gold/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/89c52ae3a20e8d84a250095781c1e022af542b3f/gold/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/ChangeLog?ref=89c52ae3a20e8d84a250095781c1e022af542b3f",
      "patch": "@@ -1,3 +1,12 @@\n+2019-08-02  Alan Modra  <amodra@gmail.com>\n+\n+\t* powerpc.cc (Target_powerpc::Scan::get_reference_flags): Set\n+\tflags for new relocations, and some missing older relocs.\n+\t(Target_powerpc::Scan::local): Handle new pcrel tls relocs.\n+\tCall set_has_static_tls for tprel relocs.\n+\t(Target_powerpc::Scan::global): Likewise.\n+\t(Target_powerpc::Relocate::relocate): Handle new pcrel tls relocs.\n+\n 2019-08-02  Alan Modra  <amodra@gmail.com>\n \n \t* powerpc.cc (Powerpc_relocate_functions::rela, rela_ua): Perform"
    },
    {
      "sha": "e69ce192e364db854eb6746aa62cc583aaf71d1b",
      "filename": "gold/powerpc.cc",
      "status": "modified",
      "additions": 338,
      "deletions": 68,
      "changes": 406,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/89c52ae3a20e8d84a250095781c1e022af542b3f/gold/powerpc.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/89c52ae3a20e8d84a250095781c1e022af542b3f/gold/powerpc.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/powerpc.cc?ref=89c52ae3a20e8d84a250095781c1e022af542b3f",
      "patch": "@@ -7205,6 +7205,15 @@ Target_powerpc<size, big_endian>::Scan::get_reference_flags(\n     case elfcpp::R_POWERPC_ADDR16_LO:\n     case elfcpp::R_POWERPC_ADDR16_HI:\n     case elfcpp::R_POWERPC_ADDR16_HA:\n+    case elfcpp::R_PPC64_ADDR16_HIGHER34:\n+    case elfcpp::R_PPC64_ADDR16_HIGHERA34:\n+    case elfcpp::R_PPC64_ADDR16_HIGHEST34:\n+    case elfcpp::R_PPC64_ADDR16_HIGHESTA34:\n+    case elfcpp::R_PPC64_D34:\n+    case elfcpp::R_PPC64_D34_LO:\n+    case elfcpp::R_PPC64_D34_HI30:\n+    case elfcpp::R_PPC64_D34_HA30:\n+    case elfcpp::R_PPC64_D28:\n       ref = Symbol::ABSOLUTE_REF;\n       break;\n \n@@ -7273,6 +7282,14 @@ Target_powerpc<size, big_endian>::Scan::get_reference_flags(\n \n     case elfcpp::R_POWERPC_GOT_TPREL16:\n     case elfcpp::R_POWERPC_TLS:\n+    case elfcpp::R_PPC64_TLSGD:\n+    case elfcpp::R_PPC64_TLSLD:\n+    case elfcpp::R_PPC64_TPREL34:\n+    case elfcpp::R_PPC64_DTPREL34:\n+    case elfcpp::R_PPC64_GOT_TLSGD34:\n+    case elfcpp::R_PPC64_GOT_TLSLD34:\n+    case elfcpp::R_PPC64_GOT_TPREL34:\n+    case elfcpp::R_PPC64_GOT_DTPREL34:\n       ref = Symbol::TLS_REF;\n       break;\n \n@@ -7617,16 +7634,15 @@ Target_powerpc<size, big_endian>::Scan::local(\n     case elfcpp::R_PPC64_REL16_HIGHERA34:\n     case elfcpp::R_PPC64_REL16_HIGHEST34:\n     case elfcpp::R_PPC64_REL16_HIGHESTA34:\n-      break;\n-\n     case elfcpp::R_PPC64_D34:\n     case elfcpp::R_PPC64_D34_LO:\n     case elfcpp::R_PPC64_D34_HI30:\n     case elfcpp::R_PPC64_D34_HA30:\n     case elfcpp::R_PPC64_D28:\n     case elfcpp::R_PPC64_PCREL34:\n     case elfcpp::R_PPC64_PCREL28:\n-      target->set_powerxx_stubs();\n+    case elfcpp::R_PPC64_TPREL34:\n+    case elfcpp::R_PPC64_DTPREL34:\n       break;\n \n     case elfcpp::R_PPC64_TOC:\n@@ -7720,8 +7736,6 @@ Target_powerpc<size, big_endian>::Scan::local(\n \n     case elfcpp::R_PPC64_PLT_PCREL34:\n     case elfcpp::R_PPC64_PLT_PCREL34_NOTOC:\n-      target->set_powerxx_stubs();\n-      // Fall through.\n     case elfcpp::R_POWERPC_PLT16_LO:\n     case elfcpp::R_POWERPC_PLT16_HI:\n     case elfcpp::R_POWERPC_PLT16_HA:\n@@ -7821,8 +7835,6 @@ Target_powerpc<size, big_endian>::Scan::local(\n       break;\n \n     case elfcpp::R_PPC64_GOT_PCREL34:\n-      target->set_powerxx_stubs();\n-      // Fall through.\n     case elfcpp::R_POWERPC_GOT16:\n     case elfcpp::R_POWERPC_GOT16_LO:\n     case elfcpp::R_POWERPC_GOT16_HI:\n@@ -7871,6 +7883,7 @@ Target_powerpc<size, big_endian>::Scan::local(\n       target->got_section(symtab, layout);\n       break;\n \n+    case elfcpp::R_PPC64_GOT_TLSGD34:\n     case elfcpp::R_POWERPC_GOT_TLSGD16:\n     case elfcpp::R_POWERPC_GOT_TLSGD16_LO:\n     case elfcpp::R_POWERPC_GOT_TLSGD16_HI:\n@@ -7895,6 +7908,7 @@ Target_powerpc<size, big_endian>::Scan::local(\n       }\n       break;\n \n+    case elfcpp::R_PPC64_GOT_TLSLD34:\n     case elfcpp::R_POWERPC_GOT_TLSLD16:\n     case elfcpp::R_POWERPC_GOT_TLSLD16_LO:\n     case elfcpp::R_POWERPC_GOT_TLSLD16_HI:\n@@ -7918,6 +7932,7 @@ Target_powerpc<size, big_endian>::Scan::local(\n       }\n       break;\n \n+    case elfcpp::R_PPC64_GOT_DTPREL34:\n     case elfcpp::R_POWERPC_GOT_DTPREL16:\n     case elfcpp::R_POWERPC_GOT_DTPREL16_LO:\n     case elfcpp::R_POWERPC_GOT_DTPREL16_HI:\n@@ -7930,6 +7945,7 @@ Target_powerpc<size, big_endian>::Scan::local(\n       }\n       break;\n \n+    case elfcpp::R_PPC64_GOT_TPREL34:\n     case elfcpp::R_POWERPC_GOT_TPREL16:\n     case elfcpp::R_POWERPC_GOT_TPREL16_LO:\n     case elfcpp::R_POWERPC_GOT_TPREL16_HI:\n@@ -8121,6 +8137,52 @@ Target_powerpc<size, big_endian>::Scan::local(\n     case elfcpp::R_PPC64_TOC16:\n     case elfcpp::R_PPC64_TOC16_DS:\n       ppc_object->set_has_small_toc_reloc();\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  switch (r_type)\n+    {\n+    case elfcpp::R_POWERPC_TPREL16:\n+    case elfcpp::R_POWERPC_TPREL16_LO:\n+    case elfcpp::R_POWERPC_TPREL16_HI:\n+    case elfcpp::R_POWERPC_TPREL16_HA:\n+    case elfcpp::R_PPC64_TPREL16_DS:\n+    case elfcpp::R_PPC64_TPREL16_LO_DS:\n+    case elfcpp::R_PPC64_TPREL16_HIGH:\n+    case elfcpp::R_PPC64_TPREL16_HIGHA:\n+    case elfcpp::R_PPC64_TPREL16_HIGHER:\n+    case elfcpp::R_PPC64_TPREL16_HIGHERA:\n+    case elfcpp::R_PPC64_TPREL16_HIGHEST:\n+    case elfcpp::R_PPC64_TPREL16_HIGHESTA:\n+    case elfcpp::R_PPC64_TPREL34:\n+      layout->set_has_static_tls();\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  switch (r_type)\n+    {\n+    case elfcpp::R_PPC64_D34:\n+    case elfcpp::R_PPC64_D34_LO:\n+    case elfcpp::R_PPC64_D34_HI30:\n+    case elfcpp::R_PPC64_D34_HA30:\n+    case elfcpp::R_PPC64_D28:\n+    case elfcpp::R_PPC64_PCREL34:\n+    case elfcpp::R_PPC64_PCREL28:\n+    case elfcpp::R_PPC64_TPREL34:\n+    case elfcpp::R_PPC64_DTPREL34:\n+    case elfcpp::R_PPC64_PLT_PCREL34:\n+    case elfcpp::R_PPC64_PLT_PCREL34_NOTOC:\n+    case elfcpp::R_PPC64_GOT_PCREL34:\n+    case elfcpp::R_PPC64_GOT_TLSGD34:\n+    case elfcpp::R_PPC64_GOT_TLSLD34:\n+    case elfcpp::R_PPC64_GOT_DTPREL34:\n+    case elfcpp::R_PPC64_GOT_TPREL34:\n+      target->set_powerxx_stubs();\n+      break;\n     default:\n       break;\n     }\n@@ -8217,16 +8279,15 @@ Target_powerpc<size, big_endian>::Scan::global(\n     case elfcpp::R_PPC64_REL16_HIGHERA34:\n     case elfcpp::R_PPC64_REL16_HIGHEST34:\n     case elfcpp::R_PPC64_REL16_HIGHESTA34:\n-      break;\n-\n     case elfcpp::R_PPC64_D34:\n     case elfcpp::R_PPC64_D34_LO:\n     case elfcpp::R_PPC64_D34_HI30:\n     case elfcpp::R_PPC64_D34_HA30:\n     case elfcpp::R_PPC64_D28:\n     case elfcpp::R_PPC64_PCREL34:\n     case elfcpp::R_PPC64_PCREL28:\n-      target->set_powerxx_stubs();\n+    case elfcpp::R_PPC64_TPREL34:\n+    case elfcpp::R_PPC64_DTPREL34:\n       break;\n \n     case elfcpp::R_PPC64_TOC:\n@@ -8364,8 +8425,6 @@ Target_powerpc<size, big_endian>::Scan::global(\n \n     case elfcpp::R_PPC64_PLT_PCREL34:\n     case elfcpp::R_PPC64_PLT_PCREL34_NOTOC:\n-      target->set_powerxx_stubs();\n-      // Fall through.\n     case elfcpp::R_POWERPC_PLT16_LO:\n     case elfcpp::R_POWERPC_PLT16_HI:\n     case elfcpp::R_POWERPC_PLT16_HA:\n@@ -8499,8 +8558,6 @@ Target_powerpc<size, big_endian>::Scan::global(\n       break;\n \n     case elfcpp::R_PPC64_GOT_PCREL34:\n-      target->set_powerxx_stubs();\n-      // Fall through.\n     case elfcpp::R_POWERPC_GOT16:\n     case elfcpp::R_POWERPC_GOT16_LO:\n     case elfcpp::R_POWERPC_GOT16_HI:\n@@ -8559,6 +8616,7 @@ Target_powerpc<size, big_endian>::Scan::global(\n       target->got_section(symtab, layout);\n       break;\n \n+    case elfcpp::R_PPC64_GOT_TLSGD34:\n     case elfcpp::R_POWERPC_GOT_TLSGD16:\n     case elfcpp::R_POWERPC_GOT_TLSGD16_LO:\n     case elfcpp::R_POWERPC_GOT_TLSGD16_HI:\n@@ -8607,6 +8665,7 @@ Target_powerpc<size, big_endian>::Scan::global(\n       }\n       break;\n \n+    case elfcpp::R_PPC64_GOT_TLSLD34:\n     case elfcpp::R_POWERPC_GOT_TLSLD16:\n     case elfcpp::R_POWERPC_GOT_TLSLD16_LO:\n     case elfcpp::R_POWERPC_GOT_TLSLD16_HI:\n@@ -8630,6 +8689,7 @@ Target_powerpc<size, big_endian>::Scan::global(\n       }\n       break;\n \n+    case elfcpp::R_PPC64_GOT_DTPREL34:\n     case elfcpp::R_POWERPC_GOT_DTPREL16:\n     case elfcpp::R_POWERPC_GOT_DTPREL16_LO:\n     case elfcpp::R_POWERPC_GOT_DTPREL16_HI:\n@@ -8649,6 +8709,7 @@ Target_powerpc<size, big_endian>::Scan::global(\n       }\n       break;\n \n+    case elfcpp::R_PPC64_GOT_TPREL34:\n     case elfcpp::R_POWERPC_GOT_TPREL16:\n     case elfcpp::R_POWERPC_GOT_TPREL16_LO:\n     case elfcpp::R_POWERPC_GOT_TPREL16_HI:\n@@ -8834,6 +8895,52 @@ Target_powerpc<size, big_endian>::Scan::global(\n     case elfcpp::R_PPC64_TOC16:\n     case elfcpp::R_PPC64_TOC16_DS:\n       ppc_object->set_has_small_toc_reloc();\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  switch (r_type)\n+    {\n+    case elfcpp::R_POWERPC_TPREL16:\n+    case elfcpp::R_POWERPC_TPREL16_LO:\n+    case elfcpp::R_POWERPC_TPREL16_HI:\n+    case elfcpp::R_POWERPC_TPREL16_HA:\n+    case elfcpp::R_PPC64_TPREL16_DS:\n+    case elfcpp::R_PPC64_TPREL16_LO_DS:\n+    case elfcpp::R_PPC64_TPREL16_HIGH:\n+    case elfcpp::R_PPC64_TPREL16_HIGHA:\n+    case elfcpp::R_PPC64_TPREL16_HIGHER:\n+    case elfcpp::R_PPC64_TPREL16_HIGHERA:\n+    case elfcpp::R_PPC64_TPREL16_HIGHEST:\n+    case elfcpp::R_PPC64_TPREL16_HIGHESTA:\n+    case elfcpp::R_PPC64_TPREL34:\n+      layout->set_has_static_tls();\n+      break;\n+    default:\n+      break;\n+    }\n+\n+  switch (r_type)\n+    {\n+    case elfcpp::R_PPC64_D34:\n+    case elfcpp::R_PPC64_D34_LO:\n+    case elfcpp::R_PPC64_D34_HI30:\n+    case elfcpp::R_PPC64_D34_HA30:\n+    case elfcpp::R_PPC64_D28:\n+    case elfcpp::R_PPC64_PCREL34:\n+    case elfcpp::R_PPC64_PCREL28:\n+    case elfcpp::R_PPC64_TPREL34:\n+    case elfcpp::R_PPC64_DTPREL34:\n+    case elfcpp::R_PPC64_PLT_PCREL34:\n+    case elfcpp::R_PPC64_PLT_PCREL34_NOTOC:\n+    case elfcpp::R_PPC64_GOT_PCREL34:\n+    case elfcpp::R_PPC64_GOT_TLSGD34:\n+    case elfcpp::R_PPC64_GOT_TLSLD34:\n+    case elfcpp::R_PPC64_GOT_DTPREL34:\n+    case elfcpp::R_PPC64_GOT_TPREL34:\n+      target->set_powerxx_stubs();\n+      break;\n     default:\n       break;\n     }\n@@ -10141,7 +10248,8 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n   else if (r_type == elfcpp::R_POWERPC_GOT_TLSGD16\n \t   || r_type == elfcpp::R_POWERPC_GOT_TLSGD16_LO\n \t   || r_type == elfcpp::R_POWERPC_GOT_TLSGD16_HI\n-\t   || r_type == elfcpp::R_POWERPC_GOT_TLSGD16_HA)\n+\t   || r_type == elfcpp::R_POWERPC_GOT_TLSGD16_HA\n+\t   || r_type == elfcpp::R_PPC64_GOT_TLSGD34)\n     {\n       // First instruction of a global dynamic sequence, arg setup insn.\n       const bool final = gsym == NULL || gsym->final_value_is_known();\n@@ -10163,67 +10271,121 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t      gold_assert(object->local_has_got_offset(r_sym, got_type));\n \t      value = object->local_got_offset(r_sym, got_type);\n \t    }\n-\t  value -= target->got_section()->got_base_offset(object);\n+\t  if (r_type == elfcpp::R_PPC64_GOT_TLSGD34)\n+\t    value += target->got_section()->address();\n+\t  else\n+\t    value -= target->got_section()->got_base_offset(object);\n \t}\n       if (tls_type == tls::TLSOPT_TO_IE)\n \t{\n-\t  if (r_type == elfcpp::R_POWERPC_GOT_TLSGD16\n-\t      || r_type == elfcpp::R_POWERPC_GOT_TLSGD16_LO)\n+\t  if (r_type == elfcpp::R_PPC64_GOT_TLSGD34)\n \t    {\n-\t      Insn* iview = reinterpret_cast<Insn*>(view - d_offset);\n-\t      Insn insn = elfcpp::Swap<32, big_endian>::readval(iview);\n-\t      insn &= (1 << 26) - (1 << 16); // extract rt,ra from addi\n-\t      if (size == 32)\n-\t\tinsn |= 32 << 26; // lwz\n-\t      else\n-\t\tinsn |= 58 << 26; // ld\n-\t      elfcpp::Swap<32, big_endian>::writeval(iview, insn);\n+\t      Insn* iview = reinterpret_cast<Insn*>(view);\n+\t      uint64_t pinsn = elfcpp::Swap<32, big_endian>::readval(iview);\n+\t      pinsn <<= 32;\n+\t      pinsn |= elfcpp::Swap<32, big_endian>::readval(iview + 1);\n+\t      // pla -> pld\n+\t      pinsn += (-2ULL << 56) + (57ULL << 26) - (14ULL << 26);\n+\t      elfcpp::Swap<32, big_endian>::writeval(iview, pinsn >> 32);\n+\t      elfcpp::Swap<32, big_endian>::writeval(iview + 1,\n+\t\t\t\t\t\t     pinsn & 0xffffffff);\n+\t      r_type = elfcpp::R_PPC64_GOT_TPREL34;\n+\t    }\n+\t  else\n+\t    {\n+\t      if (r_type == elfcpp::R_POWERPC_GOT_TLSGD16\n+\t\t  || r_type == elfcpp::R_POWERPC_GOT_TLSGD16_LO)\n+\t\t{\n+\t\t  Insn* iview = reinterpret_cast<Insn*>(view - d_offset);\n+\t\t  Insn insn = elfcpp::Swap<32, big_endian>::readval(iview);\n+\t\t  insn &= (1 << 26) - (1 << 16); // extract rt,ra from addi\n+\t\t  if (size == 32)\n+\t\t    insn |= 32 << 26; // lwz\n+\t\t  else\n+\t\t    insn |= 58 << 26; // ld\n+\t\t  elfcpp::Swap<32, big_endian>::writeval(iview, insn);\n+\t\t}\n+\t      r_type += (elfcpp::R_POWERPC_GOT_TPREL16\n+\t\t\t - elfcpp::R_POWERPC_GOT_TLSGD16);\n \t    }\n-\t  r_type += (elfcpp::R_POWERPC_GOT_TPREL16\n-\t\t     - elfcpp::R_POWERPC_GOT_TLSGD16);\n \t}\n       else if (tls_type == tls::TLSOPT_TO_LE)\n \t{\n-\t  if (r_type == elfcpp::R_POWERPC_GOT_TLSGD16\n-\t      || r_type == elfcpp::R_POWERPC_GOT_TLSGD16_LO)\n+\t  if (r_type == elfcpp::R_PPC64_GOT_TLSGD34)\n \t    {\n-\t      Insn* iview = reinterpret_cast<Insn*>(view - d_offset);\n-\t      Insn insn = elfcpp::Swap<32, big_endian>::readval(iview);\n-\t      insn &= (1 << 26) - (1 << 21); // extract rt\n-\t      if (size == 32)\n-\t\tinsn |= addis_0_2;\n-\t      else\n-\t\tinsn |= addis_0_13;\n-\t      elfcpp::Swap<32, big_endian>::writeval(iview, insn);\n-\t      r_type = elfcpp::R_POWERPC_TPREL16_HA;\n+\t      Insn* iview = reinterpret_cast<Insn*>(view);\n+\t      uint64_t pinsn = elfcpp::Swap<32, big_endian>::readval(iview);\n+\t      pinsn <<= 32;\n+\t      pinsn |= elfcpp::Swap<32, big_endian>::readval(iview + 1);\n+\t      // pla pcrel -> paddi r13\n+\t      pinsn += (-1ULL << 52) + (13ULL << 16);\n+\t      elfcpp::Swap<32, big_endian>::writeval(iview, pinsn >> 32);\n+\t      elfcpp::Swap<32, big_endian>::writeval(iview + 1,\n+\t\t\t\t\t\t     pinsn & 0xffffffff);\n+\t      r_type = elfcpp::R_PPC64_TPREL34;\n \t      value = psymval->value(object, rela.get_r_addend());\n \t    }\n \t  else\n \t    {\n-\t      Insn* iview = reinterpret_cast<Insn*>(view - d_offset);\n-\t      Insn insn = nop;\n-\t      elfcpp::Swap<32, big_endian>::writeval(iview, insn);\n-\t      r_type = elfcpp::R_POWERPC_NONE;\n+\t      if (r_type == elfcpp::R_POWERPC_GOT_TLSGD16\n+\t\t  || r_type == elfcpp::R_POWERPC_GOT_TLSGD16_LO)\n+\t\t{\n+\t\t  Insn* iview = reinterpret_cast<Insn*>(view - d_offset);\n+\t\t  Insn insn = elfcpp::Swap<32, big_endian>::readval(iview);\n+\t\t  insn &= (1 << 26) - (1 << 21); // extract rt\n+\t\t  if (size == 32)\n+\t\t    insn |= addis_0_2;\n+\t\t  else\n+\t\t    insn |= addis_0_13;\n+\t\t  elfcpp::Swap<32, big_endian>::writeval(iview, insn);\n+\t\t  r_type = elfcpp::R_POWERPC_TPREL16_HA;\n+\t\t  value = psymval->value(object, rela.get_r_addend());\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  Insn* iview = reinterpret_cast<Insn*>(view - d_offset);\n+\t\t  Insn insn = nop;\n+\t\t  elfcpp::Swap<32, big_endian>::writeval(iview, insn);\n+\t\t  r_type = elfcpp::R_POWERPC_NONE;\n+\t\t}\n \t    }\n \t}\n     }\n   else if (r_type == elfcpp::R_POWERPC_GOT_TLSLD16\n \t   || r_type == elfcpp::R_POWERPC_GOT_TLSLD16_LO\n \t   || r_type == elfcpp::R_POWERPC_GOT_TLSLD16_HI\n-\t   || r_type == elfcpp::R_POWERPC_GOT_TLSLD16_HA)\n+\t   || r_type == elfcpp::R_POWERPC_GOT_TLSLD16_HA\n+\t   || r_type == elfcpp::R_PPC64_GOT_TLSLD34)\n     {\n       // First instruction of a local dynamic sequence, arg setup insn.\n       const tls::Tls_optimization tls_type = target->optimize_tls_ld();\n       if (tls_type == tls::TLSOPT_NONE)\n \t{\n \t  value = target->tlsld_got_offset();\n-\t  value -= target->got_section()->got_base_offset(object);\n+\t  if (r_type == elfcpp::R_PPC64_GOT_TLSLD34)\n+\t    value += target->got_section()->address();\n+\t  else\n+\t    value -= target->got_section()->got_base_offset(object);\n \t}\n       else\n \t{\n \t  gold_assert(tls_type == tls::TLSOPT_TO_LE);\n-\t  if (r_type == elfcpp::R_POWERPC_GOT_TLSLD16\n-\t      || r_type == elfcpp::R_POWERPC_GOT_TLSLD16_LO)\n+\t  if (r_type == elfcpp::R_PPC64_GOT_TLSLD34)\n+\t    {\n+\t      Insn* iview = reinterpret_cast<Insn*>(view);\n+\t      uint64_t pinsn = elfcpp::Swap<32, big_endian>::readval(iview);\n+\t      pinsn <<= 32;\n+\t      pinsn |= elfcpp::Swap<32, big_endian>::readval(iview + 1);\n+\t      // pla pcrel -> paddi r13\n+\t      pinsn += (-1ULL << 52) + (13ULL << 16);\n+\t      elfcpp::Swap<32, big_endian>::writeval(iview, pinsn >> 32);\n+\t      elfcpp::Swap<32, big_endian>::writeval(iview + 1,\n+\t\t\t\t\t\t     pinsn & 0xffffffff);\n+\t      r_type = elfcpp::R_PPC64_TPREL34;\n+\t      value = dtp_offset;\n+\t    }\n+\t  else if (r_type == elfcpp::R_POWERPC_GOT_TLSLD16\n+\t\t   || r_type == elfcpp::R_POWERPC_GOT_TLSLD16_LO)\n \t    {\n \t      Insn* iview = reinterpret_cast<Insn*>(view - d_offset);\n \t      Insn insn = elfcpp::Swap<32, big_endian>::readval(iview);\n@@ -10248,7 +10410,8 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n   else if (r_type == elfcpp::R_POWERPC_GOT_DTPREL16\n \t   || r_type == elfcpp::R_POWERPC_GOT_DTPREL16_LO\n \t   || r_type == elfcpp::R_POWERPC_GOT_DTPREL16_HI\n-\t   || r_type == elfcpp::R_POWERPC_GOT_DTPREL16_HA)\n+\t   || r_type == elfcpp::R_POWERPC_GOT_DTPREL16_HA\n+\t   || r_type == elfcpp::R_PPC64_GOT_DTPREL34)\n     {\n       // Accesses relative to a local dynamic sequence address,\n       // no optimisation here.\n@@ -10262,12 +10425,16 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t  gold_assert(object->local_has_got_offset(r_sym, GOT_TYPE_DTPREL));\n \t  value = object->local_got_offset(r_sym, GOT_TYPE_DTPREL);\n \t}\n-      value -= target->got_section()->got_base_offset(object);\n+      if (r_type == elfcpp::R_PPC64_GOT_DTPREL34)\n+\tvalue += target->got_section()->address();\n+      else\n+\tvalue -= target->got_section()->got_base_offset(object);\n     }\n   else if (r_type == elfcpp::R_POWERPC_GOT_TPREL16\n \t   || r_type == elfcpp::R_POWERPC_GOT_TPREL16_LO\n \t   || r_type == elfcpp::R_POWERPC_GOT_TPREL16_HI\n-\t   || r_type == elfcpp::R_POWERPC_GOT_TPREL16_HA)\n+\t   || r_type == elfcpp::R_POWERPC_GOT_TPREL16_HA\n+\t   || r_type == elfcpp::R_PPC64_GOT_TPREL34)\n     {\n       // First instruction of initial exec sequence.\n       const bool final = gsym == NULL || gsym->final_value_is_known();\n@@ -10284,13 +10451,31 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t      gold_assert(object->local_has_got_offset(r_sym, GOT_TYPE_TPREL));\n \t      value = object->local_got_offset(r_sym, GOT_TYPE_TPREL);\n \t    }\n-\t  value -= target->got_section()->got_base_offset(object);\n+\t  if (r_type == elfcpp::R_PPC64_GOT_TPREL34)\n+\t    value += target->got_section()->address();\n+\t  else\n+\t    value -= target->got_section()->got_base_offset(object);\n \t}\n       else\n \t{\n \t  gold_assert(tls_type == tls::TLSOPT_TO_LE);\n-\t  if (r_type == elfcpp::R_POWERPC_GOT_TPREL16\n-\t      || r_type == elfcpp::R_POWERPC_GOT_TPREL16_LO)\n+\t  if (r_type == elfcpp::R_PPC64_GOT_TPREL34)\n+\t    {\n+\t      Insn* iview = reinterpret_cast<Insn*>(view);\n+\t      uint64_t pinsn = elfcpp::Swap<32, big_endian>::readval(iview);\n+\t      pinsn <<= 32;\n+\t      pinsn |= elfcpp::Swap<32, big_endian>::readval(iview + 1);\n+\t      // pld ra,sym@got@tprel@pcrel -> paddi ra,r13,sym@tprel\n+\t      pinsn += ((2ULL << 56) + (-1ULL << 52)\n+\t\t\t+ (14ULL << 26) - (57ULL << 26) + (13ULL << 16));\n+\t      elfcpp::Swap<32, big_endian>::writeval(iview, pinsn >> 32);\n+\t      elfcpp::Swap<32, big_endian>::writeval(iview + 1,\n+\t\t\t\t\t\t     pinsn & 0xffffffff);\n+\t      r_type = elfcpp::R_PPC64_TPREL34;\n+\t      value = psymval->value(object, rela.get_r_addend());\n+\t    }\n+\t  else if (r_type == elfcpp::R_POWERPC_GOT_TPREL16\n+\t\t   || r_type == elfcpp::R_POWERPC_GOT_TPREL16_LO)\n \t    {\n \t      Insn* iview = reinterpret_cast<Insn*>(view - d_offset);\n \t      Insn insn = elfcpp::Swap<32, big_endian>::readval(iview);\n@@ -10333,12 +10518,33 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n \t    }\n \t  else\n \t    {\n+\t      bool is_pcrel = false;\n+\t      const int reloc_size = elfcpp::Elf_sizes<size>::rela_size;\n+\t      elfcpp::Shdr<size, big_endian> shdr(relinfo->reloc_shdr);\n+\t      size_t reloc_count = shdr.get_sh_size() / reloc_size;\n+\t      if (relnum < reloc_count - 1)\n+\t\t{\n+\t\t  Reltype next_rela(preloc + reloc_size);\n+\t\t  unsigned int r_type2\n+\t\t    = elfcpp::elf_r_type<size>(next_rela.get_r_info());\n+\t\t  if ((r_type2 == elfcpp::R_PPC64_REL24_NOTOC\n+\t\t       || r_type2 == elfcpp::R_PPC64_PLTCALL_NOTOC)\n+\t\t      && next_rela.get_r_offset() == rela.get_r_offset())\n+\t\t    is_pcrel = true;\n+\t\t}\n \t      Insn* iview = reinterpret_cast<Insn*>(view);\n-\t      Insn insn = addi_3_3;\n-\t      elfcpp::Swap<32, big_endian>::writeval(iview, insn);\n-\t      r_type = elfcpp::R_POWERPC_TPREL16_LO;\n-\t      view += d_offset;\n-\t      value = psymval->value(object, rela.get_r_addend());\n+\t      if (is_pcrel)\n+\t\t{\n+\t\t  elfcpp::Swap<32, big_endian>::writeval(iview, nop);\n+\t\t  r_type = elfcpp::R_POWERPC_NONE;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  elfcpp::Swap<32, big_endian>::writeval(iview, addi_3_3);\n+\t\t  r_type = elfcpp::R_POWERPC_TPREL16_LO;\n+\t\t  view += d_offset;\n+\t\t  value = psymval->value(object, rela.get_r_addend());\n+\t\t}\n \t    }\n \t  this->skip_next_tls_get_addr_call();\n \t}\n@@ -10352,13 +10558,34 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n       const tls::Tls_optimization tls_type = target->optimize_tls_ld();\n       if (tls_type == tls::TLSOPT_TO_LE)\n \t{\n+\t  bool is_pcrel = false;\n+\t  const int reloc_size = elfcpp::Elf_sizes<size>::rela_size;\n+\t  elfcpp::Shdr<size, big_endian> shdr(relinfo->reloc_shdr);\n+\t  size_t reloc_count = shdr.get_sh_size() / reloc_size;\n+\t  if (relnum < reloc_count - 1)\n+\t    {\n+\t      Reltype next_rela(preloc + reloc_size);\n+\t      unsigned int r_type2\n+\t\t= elfcpp::elf_r_type<size>(next_rela.get_r_info());\n+\t      if ((r_type2 == elfcpp::R_PPC64_REL24_NOTOC\n+\t\t   || r_type2 == elfcpp::R_PPC64_PLTCALL_NOTOC)\n+\t\t  && next_rela.get_r_offset() == rela.get_r_offset())\n+\t\tis_pcrel = true;\n+\t    }\n \t  Insn* iview = reinterpret_cast<Insn*>(view);\n-\t  Insn insn = addi_3_3;\n-\t  elfcpp::Swap<32, big_endian>::writeval(iview, insn);\n+\t  if (is_pcrel)\n+\t    {\n+\t      elfcpp::Swap<32, big_endian>::writeval(iview, nop);\n+\t      r_type = elfcpp::R_POWERPC_NONE;\n+\t    }\n+\t  else\n+\t    {\n+\t      elfcpp::Swap<32, big_endian>::writeval(iview, addi_3_3);\n+\t      r_type = elfcpp::R_POWERPC_TPREL16_LO;\n+\t      view += d_offset;\n+\t      value = dtp_offset;\n+\t    }\n \t  this->skip_next_tls_get_addr_call();\n-\t  r_type = elfcpp::R_POWERPC_TPREL16_LO;\n-\t  view += d_offset;\n-\t  value = dtp_offset;\n \t}\n     }\n   else if (r_type == elfcpp::R_POWERPC_TLS)\n@@ -10368,15 +10595,40 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n       const tls::Tls_optimization tls_type = target->optimize_tls_ie(final);\n       if (tls_type == tls::TLSOPT_TO_LE)\n \t{\n-\t  Insn* iview = reinterpret_cast<Insn*>(view);\n+\t  Address roff = rela.get_r_offset() & 3;\n+\t  Insn* iview = reinterpret_cast<Insn*>(view - roff);\n \t  Insn insn = elfcpp::Swap<32, big_endian>::readval(iview);\n \t  unsigned int reg = size == 32 ? 2 : 13;\n \t  insn = at_tls_transform(insn, reg);\n \t  gold_assert(insn != 0);\n-\t  elfcpp::Swap<32, big_endian>::writeval(iview, insn);\n-\t  r_type = elfcpp::R_POWERPC_TPREL16_LO;\n-\t  view += d_offset;\n-\t  value = psymval->value(object, rela.get_r_addend());\n+\t  if (roff == 0)\n+\t    {\n+\t      elfcpp::Swap<32, big_endian>::writeval(iview, insn);\n+\t      r_type = elfcpp::R_POWERPC_TPREL16_LO;\n+\t      view += d_offset;\n+\t      value = psymval->value(object, rela.get_r_addend());\n+\t    }\n+\t  else if (roff == 1)\n+\t    {\n+\t      // For pcrel IE to LE we already have the full offset\n+\t      // and thus don't need an addi here.  A nop or mr will do.\n+\t      if ((insn & (0x3f << 26)) == 14 << 26)\n+\t\t{\n+\t\t  // Extract regs from addi rt,ra,si.\n+\t\t  unsigned int rt = (insn >> 21) & 0x1f;\n+\t\t  unsigned int ra = (insn >> 16) & 0x1f;\n+\t\t  if (rt == ra)\n+\t\t    insn = nop;\n+\t\t  else\n+\t\t    {\n+\t\t      // Build or ra,rs,rb with rb==rs, ie. mr ra,rs.\n+\t\t      insn = (rt << 16) | (ra << 21) | (ra << 11);\n+\t\t      insn |= (31u << 26) | (444u << 1);\n+\t\t    }\n+\t\t}\n+\t      elfcpp::Swap<32, big_endian>::writeval(iview, insn);\n+\t      r_type = elfcpp::R_POWERPC_NONE;\n+\t    }\n \t}\n     }\n   else if (!has_stub_value)\n@@ -10479,6 +10731,10 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n     case elfcpp::R_PPC64_PLT_PCREL34:\n     case elfcpp::R_PPC64_PLT_PCREL34_NOTOC:\n     case elfcpp::R_PPC64_PCREL28:\n+    case elfcpp::R_PPC64_GOT_TLSGD34:\n+    case elfcpp::R_PPC64_GOT_TLSLD34:\n+    case elfcpp::R_PPC64_GOT_TPREL34:\n+    case elfcpp::R_PPC64_GOT_DTPREL34:\n     case elfcpp::R_PPC64_REL16_HIGHER34:\n     case elfcpp::R_PPC64_REL16_HIGHERA34:\n     case elfcpp::R_PPC64_REL16_HIGHEST34:\n@@ -10524,6 +10780,7 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n     case elfcpp::R_PPC64_TPREL16_HIGHERA:\n     case elfcpp::R_PPC64_TPREL16_HIGHEST:\n     case elfcpp::R_PPC64_TPREL16_HIGHESTA:\n+    case elfcpp::R_PPC64_TPREL34:\n       // tls symbol values are relative to tls_segment()->vaddr()\n       value -= tp_offset;\n       break;\n@@ -10546,6 +10803,7 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n     case elfcpp::R_POWERPC_DTPREL:\n     case elfcpp::R_PPC64_DTPREL16_HIGH:\n     case elfcpp::R_PPC64_DTPREL16_HIGHA:\n+    case elfcpp::R_PPC64_DTPREL34:\n       // tls symbol values are relative to tls_segment()->vaddr()\n       value -= dtp_offset;\n       break;\n@@ -11011,6 +11269,12 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n     case elfcpp::R_PPC64_PLT_PCREL34_NOTOC:\n     case elfcpp::R_PPC64_D28:\n     case elfcpp::R_PPC64_PCREL28:\n+    case elfcpp::R_PPC64_TPREL34:\n+    case elfcpp::R_PPC64_DTPREL34:\n+    case elfcpp::R_PPC64_GOT_TLSGD34:\n+    case elfcpp::R_PPC64_GOT_TLSLD34:\n+    case elfcpp::R_PPC64_GOT_TPREL34:\n+    case elfcpp::R_PPC64_GOT_DTPREL34:\n       overflow = Reloc::CHECK_SIGNED;\n       break;\n     }\n@@ -11307,6 +11571,12 @@ Target_powerpc<size, big_endian>::Relocate::relocate(\n     case elfcpp::R_PPC64_GOT_PCREL34:\n     case elfcpp::R_PPC64_PLT_PCREL34:\n     case elfcpp::R_PPC64_PLT_PCREL34_NOTOC:\n+    case elfcpp::R_PPC64_TPREL34:\n+    case elfcpp::R_PPC64_DTPREL34:\n+    case elfcpp::R_PPC64_GOT_TLSGD34:\n+    case elfcpp::R_PPC64_GOT_TLSLD34:\n+    case elfcpp::R_PPC64_GOT_TPREL34:\n+    case elfcpp::R_PPC64_GOT_DTPREL34:\n       if (size == 32)\n \tgoto unsupp;\n       status = Reloc::addr34(view, value, overflow);"
    }
  ]
}