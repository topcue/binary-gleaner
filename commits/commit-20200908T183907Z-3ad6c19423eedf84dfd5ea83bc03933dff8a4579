{
  "sha": "3ad6c19423eedf84dfd5ea83bc03933dff8a4579",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2FkNmMxOTQyM2VlZGY4NGRmZDVlYTgzYmMwMzkzM2RmZjhhNDU3OQ==",
  "commit": {
    "author": {
      "name": "David Faust",
      "email": "david.faust@oracle.com",
      "date": "2020-09-08T18:39:07Z"
    },
    "committer": {
      "name": "David Faust",
      "email": "david.faust@oracle.com",
      "date": "2020-09-08T18:39:07Z"
    },
    "message": "bpf: simulator: correct div, mod insn semantics\n\nThe div and mod eBPF instructions are unsigned, but the semantic\nspecification for the simulator incorrectly used signed operators.\nCorrect them to unsigned versions, and correct the ALU tests in\nthe simulator (which incorrectly assumed signed semantics).\n\nTested in bpf-unknown-none.\n\ncpu/ChangeLog:\n2020-09-08  David Faust  <david.faust@oracle.com>\n\n\t* bpf.cpu (define-alu-instructions): Correct semantic operators\n\tfor div, mod to unsigned versions.\n\nsim/ChangeLog:\n2020-09-08  David Faust  <david.faust@oracle.com>\n\n\t* bpf/sem-be.c: Regenerate.\n\t* bpf/sem-le.c: Likewise.\n\nsim/testsuite/ChangeLog:\n2020-09-08  David Faust  <david.faust@oracle.com>\n\n\t* sim/bpf/alu.s: Correct div and mod tests.\n\t* sim/bpf/alu32.s: Likewise.",
    "tree": {
      "sha": "e76e0f17f4d59deba3bd65dabb1b19f1a0eba84c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e76e0f17f4d59deba3bd65dabb1b19f1a0eba84c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3ad6c19423eedf84dfd5ea83bc03933dff8a4579",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3ad6c19423eedf84dfd5ea83bc03933dff8a4579",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3ad6c19423eedf84dfd5ea83bc03933dff8a4579",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3ad6c19423eedf84dfd5ea83bc03933dff8a4579/comments",
  "author": {
    "login": "dafaust",
    "id": 4460334,
    "node_id": "MDQ6VXNlcjQ0NjAzMzQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dafaust",
    "html_url": "https://github.com/dafaust",
    "followers_url": "https://api.github.com/users/dafaust/followers",
    "following_url": "https://api.github.com/users/dafaust/following{/other_user}",
    "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions",
    "organizations_url": "https://api.github.com/users/dafaust/orgs",
    "repos_url": "https://api.github.com/users/dafaust/repos",
    "events_url": "https://api.github.com/users/dafaust/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dafaust/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "dafaust",
    "id": 4460334,
    "node_id": "MDQ6VXNlcjQ0NjAzMzQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dafaust",
    "html_url": "https://github.com/dafaust",
    "followers_url": "https://api.github.com/users/dafaust/followers",
    "following_url": "https://api.github.com/users/dafaust/following{/other_user}",
    "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions",
    "organizations_url": "https://api.github.com/users/dafaust/orgs",
    "repos_url": "https://api.github.com/users/dafaust/repos",
    "events_url": "https://api.github.com/users/dafaust/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dafaust/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "790147a9e9ee05542c621a36669288413880c876",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/790147a9e9ee05542c621a36669288413880c876",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/790147a9e9ee05542c621a36669288413880c876"
    }
  ],
  "stats": {
    "total": 108,
    "additions": 73,
    "deletions": 35
  },
  "files": [
    {
      "sha": "29e2512bddce6f8f5b90b513662a8aae0d523d71",
      "filename": "cpu/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ad6c19423eedf84dfd5ea83bc03933dff8a4579/cpu/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ad6c19423eedf84dfd5ea83bc03933dff8a4579/cpu/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/ChangeLog?ref=3ad6c19423eedf84dfd5ea83bc03933dff8a4579",
      "patch": "@@ -1,3 +1,8 @@\n+2020-09-08  David Faust  <david.faust@oracle.com>\n+\n+\t* bpf.cpu (define-alu-instructions): Correct semantic operators\n+\tfor div, mod to unsigned versions.\n+\n 2020-09-01  Alan Modra  <amodra@gmail.com>\n \n \t* mep-core.cpu (f-8s8a2, f-12s4a2, f-17s16a2): Multiply signed"
    },
    {
      "sha": "eb7bf5caa5e85db724349e18aa9c5b662f7b19ae",
      "filename": "cpu/bpf.cpu",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ad6c19423eedf84dfd5ea83bc03933dff8a4579/cpu/bpf.cpu",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ad6c19423eedf84dfd5ea83bc03933dff8a4579/cpu/bpf.cpu",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/bpf.cpu?ref=3ad6c19423eedf84dfd5ea83bc03933dff8a4579",
      "patch": "@@ -487,12 +487,12 @@\n     (daib add OP_CODE_ADD x-endian add)\n     (daib sub OP_CODE_SUB x-endian sub)\n     (daib mul OP_CODE_MUL x-endian mul)\n-    (daib div OP_CODE_DIV x-endian div)\n+    (daib div OP_CODE_DIV x-endian udiv)\n     (daib or  OP_CODE_OR x-endian or)\n     (daib and OP_CODE_AND x-endian and)\n     (daib lsh OP_CODE_LSH x-endian sll)\n     (daib rsh OP_CODE_RSH x-endian srl)\n-    (daib mod OP_CODE_MOD x-endian mod)\n+    (daib mod OP_CODE_MOD x-endian umod)\n     (daib xor OP_CODE_XOR x-endian xor)\n     (daib arsh OP_CODE_ARSH x-endian sra)\n     (daiu neg OP_CODE_NEG x-endian neg)"
    },
    {
      "sha": "c806bd62aa7ccc0c87f1ddce7d6d7b182aa5242a",
      "filename": "sim/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ad6c19423eedf84dfd5ea83bc03933dff8a4579/sim/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ad6c19423eedf84dfd5ea83bc03933dff8a4579/sim/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ChangeLog?ref=3ad6c19423eedf84dfd5ea83bc03933dff8a4579",
      "patch": "@@ -1,3 +1,8 @@\n+2020-09-08  David Faust  <david.faust@oracle.com>\n+\n+\t* bpf/sem-be.c: Regenerate.\n+\t* bpf/sem-le.c: Likewise.\n+\n 2020-09-03  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* bpf/bpf.c: Include bpf-helpers.h."
    },
    {
      "sha": "0a3e927990d20badc2f7da2999900224dffaaa96",
      "filename": "sim/bpf/sem-be.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ad6c19423eedf84dfd5ea83bc03933dff8a4579/sim/bpf/sem-be.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ad6c19423eedf84dfd5ea83bc03933dff8a4579/sim/bpf/sem-be.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/sem-be.c?ref=3ad6c19423eedf84dfd5ea83bc03933dff8a4579",
      "patch": "@@ -461,7 +461,7 @@ SEM_FN_NAME (bpfbf_ebpfbe,divibe) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);\n \n   {\n-    DI opval = DIVDI (CPU (h_gpr[FLD (f_dstbe)]), FLD (f_imm32));\n+    DI opval = UDIVDI (CPU (h_gpr[FLD (f_dstbe)]), FLD (f_imm32));\n     CPU (h_gpr[FLD (f_dstbe)]) = opval;\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"gpr\", 'D', opval);\n   }\n@@ -482,7 +482,7 @@ SEM_FN_NAME (bpfbf_ebpfbe,divrbe) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);\n \n   {\n-    DI opval = DIVDI (CPU (h_gpr[FLD (f_dstbe)]), CPU (h_gpr[FLD (f_srcbe)]));\n+    DI opval = UDIVDI (CPU (h_gpr[FLD (f_dstbe)]), CPU (h_gpr[FLD (f_srcbe)]));\n     CPU (h_gpr[FLD (f_dstbe)]) = opval;\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"gpr\", 'D', opval);\n   }\n@@ -503,7 +503,7 @@ SEM_FN_NAME (bpfbf_ebpfbe,div32ibe) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);\n \n   {\n-    USI opval = DIVSI (CPU (h_gpr[FLD (f_dstbe)]), FLD (f_imm32));\n+    USI opval = UDIVSI (CPU (h_gpr[FLD (f_dstbe)]), FLD (f_imm32));\n     CPU (h_gpr[FLD (f_dstbe)]) = opval;\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"gpr\", 'x', opval);\n   }\n@@ -524,7 +524,7 @@ SEM_FN_NAME (bpfbf_ebpfbe,div32rbe) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);\n \n   {\n-    USI opval = DIVSI (CPU (h_gpr[FLD (f_dstbe)]), CPU (h_gpr[FLD (f_srcbe)]));\n+    USI opval = UDIVSI (CPU (h_gpr[FLD (f_dstbe)]), CPU (h_gpr[FLD (f_srcbe)]));\n     CPU (h_gpr[FLD (f_dstbe)]) = opval;\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"gpr\", 'x', opval);\n   }\n@@ -881,7 +881,7 @@ SEM_FN_NAME (bpfbf_ebpfbe,modibe) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);\n \n   {\n-    DI opval = MODDI (CPU (h_gpr[FLD (f_dstbe)]), FLD (f_imm32));\n+    DI opval = UMODDI (CPU (h_gpr[FLD (f_dstbe)]), FLD (f_imm32));\n     CPU (h_gpr[FLD (f_dstbe)]) = opval;\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"gpr\", 'D', opval);\n   }\n@@ -902,7 +902,7 @@ SEM_FN_NAME (bpfbf_ebpfbe,modrbe) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);\n \n   {\n-    DI opval = MODDI (CPU (h_gpr[FLD (f_dstbe)]), CPU (h_gpr[FLD (f_srcbe)]));\n+    DI opval = UMODDI (CPU (h_gpr[FLD (f_dstbe)]), CPU (h_gpr[FLD (f_srcbe)]));\n     CPU (h_gpr[FLD (f_dstbe)]) = opval;\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"gpr\", 'D', opval);\n   }\n@@ -923,7 +923,7 @@ SEM_FN_NAME (bpfbf_ebpfbe,mod32ibe) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);\n \n   {\n-    USI opval = MODSI (CPU (h_gpr[FLD (f_dstbe)]), FLD (f_imm32));\n+    USI opval = UMODSI (CPU (h_gpr[FLD (f_dstbe)]), FLD (f_imm32));\n     CPU (h_gpr[FLD (f_dstbe)]) = opval;\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"gpr\", 'x', opval);\n   }\n@@ -944,7 +944,7 @@ SEM_FN_NAME (bpfbf_ebpfbe,mod32rbe) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);\n \n   {\n-    USI opval = MODSI (CPU (h_gpr[FLD (f_dstbe)]), CPU (h_gpr[FLD (f_srcbe)]));\n+    USI opval = UMODSI (CPU (h_gpr[FLD (f_dstbe)]), CPU (h_gpr[FLD (f_srcbe)]));\n     CPU (h_gpr[FLD (f_dstbe)]) = opval;\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"gpr\", 'x', opval);\n   }"
    },
    {
      "sha": "58a59b124228801a6d94e92262fcce5a7ee15f46",
      "filename": "sim/bpf/sem-le.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ad6c19423eedf84dfd5ea83bc03933dff8a4579/sim/bpf/sem-le.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ad6c19423eedf84dfd5ea83bc03933dff8a4579/sim/bpf/sem-le.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/bpf/sem-le.c?ref=3ad6c19423eedf84dfd5ea83bc03933dff8a4579",
      "patch": "@@ -461,7 +461,7 @@ SEM_FN_NAME (bpfbf_ebpfle,divile) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);\n \n   {\n-    DI opval = DIVDI (CPU (h_gpr[FLD (f_dstle)]), FLD (f_imm32));\n+    DI opval = UDIVDI (CPU (h_gpr[FLD (f_dstle)]), FLD (f_imm32));\n     CPU (h_gpr[FLD (f_dstle)]) = opval;\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"gpr\", 'D', opval);\n   }\n@@ -482,7 +482,7 @@ SEM_FN_NAME (bpfbf_ebpfle,divrle) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);\n \n   {\n-    DI opval = DIVDI (CPU (h_gpr[FLD (f_dstle)]), CPU (h_gpr[FLD (f_srcle)]));\n+    DI opval = UDIVDI (CPU (h_gpr[FLD (f_dstle)]), CPU (h_gpr[FLD (f_srcle)]));\n     CPU (h_gpr[FLD (f_dstle)]) = opval;\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"gpr\", 'D', opval);\n   }\n@@ -503,7 +503,7 @@ SEM_FN_NAME (bpfbf_ebpfle,div32ile) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);\n \n   {\n-    USI opval = DIVSI (CPU (h_gpr[FLD (f_dstle)]), FLD (f_imm32));\n+    USI opval = UDIVSI (CPU (h_gpr[FLD (f_dstle)]), FLD (f_imm32));\n     CPU (h_gpr[FLD (f_dstle)]) = opval;\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"gpr\", 'x', opval);\n   }\n@@ -524,7 +524,7 @@ SEM_FN_NAME (bpfbf_ebpfle,div32rle) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);\n \n   {\n-    USI opval = DIVSI (CPU (h_gpr[FLD (f_dstle)]), CPU (h_gpr[FLD (f_srcle)]));\n+    USI opval = UDIVSI (CPU (h_gpr[FLD (f_dstle)]), CPU (h_gpr[FLD (f_srcle)]));\n     CPU (h_gpr[FLD (f_dstle)]) = opval;\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"gpr\", 'x', opval);\n   }\n@@ -881,7 +881,7 @@ SEM_FN_NAME (bpfbf_ebpfle,modile) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);\n \n   {\n-    DI opval = MODDI (CPU (h_gpr[FLD (f_dstle)]), FLD (f_imm32));\n+    DI opval = UMODDI (CPU (h_gpr[FLD (f_dstle)]), FLD (f_imm32));\n     CPU (h_gpr[FLD (f_dstle)]) = opval;\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"gpr\", 'D', opval);\n   }\n@@ -902,7 +902,7 @@ SEM_FN_NAME (bpfbf_ebpfle,modrle) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);\n \n   {\n-    DI opval = MODDI (CPU (h_gpr[FLD (f_dstle)]), CPU (h_gpr[FLD (f_srcle)]));\n+    DI opval = UMODDI (CPU (h_gpr[FLD (f_dstle)]), CPU (h_gpr[FLD (f_srcle)]));\n     CPU (h_gpr[FLD (f_dstle)]) = opval;\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"gpr\", 'D', opval);\n   }\n@@ -923,7 +923,7 @@ SEM_FN_NAME (bpfbf_ebpfle,mod32ile) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);\n \n   {\n-    USI opval = MODSI (CPU (h_gpr[FLD (f_dstle)]), FLD (f_imm32));\n+    USI opval = UMODSI (CPU (h_gpr[FLD (f_dstle)]), FLD (f_imm32));\n     CPU (h_gpr[FLD (f_dstle)]) = opval;\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"gpr\", 'x', opval);\n   }\n@@ -944,7 +944,7 @@ SEM_FN_NAME (bpfbf_ebpfle,mod32rle) (SIM_CPU *current_cpu, SEM_ARG sem_arg)\n   SEM_PC vpc = SEM_NEXT_VPC (sem_arg, pc, 8);\n \n   {\n-    USI opval = MODSI (CPU (h_gpr[FLD (f_dstle)]), CPU (h_gpr[FLD (f_srcle)]));\n+    USI opval = UMODSI (CPU (h_gpr[FLD (f_dstle)]), CPU (h_gpr[FLD (f_srcle)]));\n     CPU (h_gpr[FLD (f_dstle)]) = opval;\n     CGEN_TRACE_RESULT (current_cpu, abuf, \"gpr\", 'x', opval);\n   }"
    },
    {
      "sha": "14055f82cdc7d758bc4befd46f1121f0429667cf",
      "filename": "sim/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ad6c19423eedf84dfd5ea83bc03933dff8a4579/sim/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ad6c19423eedf84dfd5ea83bc03933dff8a4579/sim/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/ChangeLog?ref=3ad6c19423eedf84dfd5ea83bc03933dff8a4579",
      "patch": "@@ -1,3 +1,8 @@\n+2020-09-08  David Faust  <david.faust@oracle.com>\n+\n+\t* sim/bpf/alu.s: Correct div and mod tests.\n+\t* sim/bpf/alu32.s: Likewise.\n+\n 2020-08-04  David Faust  <david.faust@oracle.com>\n \t    Jose E. Marchesi  <jose.marchesi@oracle.com>\n "
    },
    {
      "sha": "4dc37b1f01a0dabc28d62d0e4b572037dee89816",
      "filename": "sim/testsuite/sim/bpf/alu.s",
      "status": "modified",
      "additions": 19,
      "deletions": 7,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ad6c19423eedf84dfd5ea83bc03933dff8a4579/sim/testsuite/sim/bpf/alu.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ad6c19423eedf84dfd5ea83bc03933dff8a4579/sim/testsuite/sim/bpf/alu.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/bpf/alu.s?ref=3ad6c19423eedf84dfd5ea83bc03933dff8a4579",
      "patch": "@@ -40,11 +40,16 @@ main:\n     ;; div\n     div         %r2, %r1\n     fail_ne     %r2, 0\n-    div         %r1, -10000\n-    fail_ne     %r1, -11007531\n+    div         %r1, 10000\n+    fail_ne     %r1, 11007531\n     div         %r1, %r1\n     fail_ne     %r1, 1\n \n+    ;; div is unsigned\n+    lddw        %r1, -8\n+    div         %r1, 2\n+    fail_ne     %r1, 0x7ffffffffffffffc ; sign bits NOT maintained - large pos.\n+\n     ;; and\n     lddw        %r1, 0xaaaaaaaa55555555\n     and         %r1, 0x55aaaaaa         ; we still only have 32-bit imm.\n@@ -84,14 +89,21 @@ main:\n \n     ;; mod\n     mov         %r1, 1025\n-    mod         %r1, -16\n+    mod         %r1, 16\n+    fail_ne     %r1, 1\n+\n+    ;; mod is unsigned\n+    mov         %r1, 1025\n+    mod         %r1, -16        ; mod unsigned -> will treat as large positive\n+    fail_ne     %r1, 1025\n+\n+    mov         %r1, -25        ; -25 is 0xff..ffe7\n+    mov         %r2, 5          ; ... which when unsigned is a large positive\n+    mod         %r1, %r2        ; ... which is not evenly divisible by 5\n     fail_ne     %r1, 1\n-    mov         %r1, -25\n-    mov         %r2, 5\n-    mod         %r1, %r2\n-    fail_ne     %r1, 0\n \n     ;; xor\n+    mov         %r1, 0\n     xor         %r1, %r2\n     fail_ne     %r1, 5\n     xor         %r1, 0x7eadbeef"
    },
    {
      "sha": "e8d5062476cd6200bf15dacbe1e2403dd55aaae4",
      "filename": "sim/testsuite/sim/bpf/alu32.s",
      "status": "modified",
      "additions": 21,
      "deletions": 10,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ad6c19423eedf84dfd5ea83bc03933dff8a4579/sim/testsuite/sim/bpf/alu32.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ad6c19423eedf84dfd5ea83bc03933dff8a4579/sim/testsuite/sim/bpf/alu32.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/bpf/alu32.s?ref=3ad6c19423eedf84dfd5ea83bc03933dff8a4579",
      "patch": "@@ -31,10 +31,15 @@ main:\n     fail_ne32   %r1, 264\n \n     ;; div\n-    div32       %r1, %r2        ; r1 /= r2 (r1 = 264 / -6 = -44)\n-    div32       %r1, -2         ; r1 /= -2 (r1 = 22)\n-    div32       %r1, 2          ; r1 /= 2  (r1 = 11)\n-    fail_ne32   %r1, 11\n+    div32       %r1, 6\n+    mov32       %r2, 11\n+    div32       %r1, %r2\n+    fail_ne32   %r1, 4\n+\n+    ;; div is unsigned\n+    mov32       %r1, -8         ; 0xfffffff8\n+    div32       %r1, 2\n+    fail_ne32   %r1, 0x7ffffffc ; sign bits are not preserved\n \n     ;; and (bitwise)\n     mov32       %r1, 0xb        ; r1  = (0xb = 0b1011)\n@@ -70,13 +75,19 @@ main:\n                                 ; i.e. upper-32 bits should be untouched\n \n     ;; mod\n-    mov32       %r1, -25\n-    mov32       %r2, 4\n+    mov32       %r1, 1025\n+    mod32       %r1, 16\n+    fail_ne32   %r1, 1\n+\n+    ;; mod is unsigned\n+    mov32       %r1, 1025\n+    mod32       %r1, -16        ; when unsigned, much larger than 1025\n+    fail_ne32   %r1, 1025\n+\n+    mov32       %r1, -25        ; when unsigned, a large positive which is\n+    mov32       %r2, 5          ; ... not evenly divisible by 5\n     mod32       %r1, %r2\n-    fail_ne32   %r1, -1\n-    mov32       %r1, 25\n-    mod32       %r1, 5\n-    fail_ne32   %r1, 0\n+    fail_ne32   %r1, 1\n \n     ;; xor\n     xor32       %r1, %r2"
    }
  ]
}