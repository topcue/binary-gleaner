{
  "sha": "1f9b1a84350d3755ce8620900a35c3d1997535e6",
  "node_id": "C_kwDOANOeidoAKDFmOWIxYTg0MzUwZDM3NTVjZTg2MjA5MDBhMzVjM2QxOTk3NTM1ZTY",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-02-15T09:41:03Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-02-16T11:35:10Z"
    },
    "message": "What to do when sh_addralign isn't a power of two\n\nBFD generally doesn't handle anything but a power of two section\nalignment, and ELF sh_addralign is required to be an integral power of\ntwo (or zero) by the ELF spec.  Of course this is ignored by fuzzers,\nand because bfd_log2 rounds up, we can end up with alignment_power\nbeing 32 on a 32-bit object or 64 on a 64-bit object.  That then\ntriggers ubsan warnings in places like bfd_update_compression_header\nwhere we want to convert from alignment_power back to an alignment.\nI suppose we could reject object files that have non-compliant\nsh_addralign, but I think it's also reasonable to use the greatest\npower of two divisor of sh_addralign, ie. the rightmost 1 bit.\n\n\t* elf.c (_bfd_elf_make_section_from_shdr): Use greatest power\n\tof two divisor of sh_addralign.\n\t(_bfd_elf_assign_file_position_for_section): Likewise.\n\t(assign_file_positions_for_non_load_sections): Likewise.",
    "tree": {
      "sha": "faf43bbd8090ba94d17758ac78e56dee925253a5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/faf43bbd8090ba94d17758ac78e56dee925253a5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1f9b1a84350d3755ce8620900a35c3d1997535e6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1f9b1a84350d3755ce8620900a35c3d1997535e6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1f9b1a84350d3755ce8620900a35c3d1997535e6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1f9b1a84350d3755ce8620900a35c3d1997535e6/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6e731729881ae4c1a9542843c29a3981166c9e45",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6e731729881ae4c1a9542843c29a3981166c9e45",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6e731729881ae4c1a9542843c29a3981166c9e45"
    }
  ],
  "stats": {
    "total": 13,
    "additions": 7,
    "deletions": 6
  },
  "files": [
    {
      "sha": "a67415e76e1d37b56f6844a0605eae4ce2e6880f",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1f9b1a84350d3755ce8620900a35c3d1997535e6/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1f9b1a84350d3755ce8620900a35c3d1997535e6/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=1f9b1a84350d3755ce8620900a35c3d1997535e6",
      "patch": "@@ -1104,7 +1104,8 @@ _bfd_elf_make_section_from_shdr (bfd *abfd,\n \n   if (!bfd_set_section_vma (newsect, hdr->sh_addr / opb)\n       || !bfd_set_section_size (newsect, hdr->sh_size)\n-      || !bfd_set_section_alignment (newsect, bfd_log2 (hdr->sh_addralign)))\n+      || !bfd_set_section_alignment (newsect, bfd_log2 (hdr->sh_addralign\n+\t\t\t\t\t\t\t& -hdr->sh_addralign)))\n     return false;\n \n   /* As a GNU extension, if the name begins with .gnu.linkonce, we\n@@ -4227,7 +4228,7 @@ _bfd_elf_assign_file_position_for_section (Elf_Internal_Shdr *i_shdrp,\n \t\t\t\t\t   bool align)\n {\n   if (align && i_shdrp->sh_addralign > 1)\n-    offset = BFD_ALIGN (offset, i_shdrp->sh_addralign);\n+    offset = BFD_ALIGN (offset, i_shdrp->sh_addralign & -i_shdrp->sh_addralign);\n   i_shdrp->sh_offset = offset;\n   if (i_shdrp->bfd_section != NULL)\n     i_shdrp->bfd_section->filepos = offset;\n@@ -6149,6 +6150,7 @@ assign_file_positions_for_non_load_sections (bfd *abfd,\n   for (hdrpp = i_shdrpp + 1; hdrpp < end_hdrpp; hdrpp++)\n     {\n       Elf_Internal_Shdr *hdr;\n+      bfd_vma align;\n \n       hdr = *hdrpp;\n       if (hdr->bfd_section != NULL\n@@ -6174,11 +6176,10 @@ assign_file_positions_for_non_load_sections (bfd *abfd,\n \t\t: hdr->bfd_section->name));\n \t  /* We don't need to page align empty sections.  */\n \t  if ((abfd->flags & D_PAGED) != 0 && hdr->sh_size != 0)\n-\t    off += vma_page_aligned_bias (hdr->sh_addr, off,\n-\t\t\t\t\t  maxpagesize);\n+\t    align = maxpagesize;\n \t  else\n-\t    off += vma_page_aligned_bias (hdr->sh_addr, off,\n-\t\t\t\t\t  hdr->sh_addralign);\n+\t    align = hdr->sh_addralign & -hdr->sh_addralign;\n+\t  off += vma_page_aligned_bias (hdr->sh_addr, off, align);\n \t  off = _bfd_elf_assign_file_position_for_section (hdr, off,\n \t\t\t\t\t\t\t   false);\n \t}"
    }
  ]
}