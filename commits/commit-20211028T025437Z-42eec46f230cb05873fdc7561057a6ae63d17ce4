{
  "sha": "42eec46f230cb05873fdc7561057a6ae63d17ce4",
  "node_id": "C_kwDOANOeidoAKDQyZWVjNDZmMjMwY2IwNTg3M2ZkYzc1NjEwNTdhNmFlNjNkMTdjZTQ",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-28T02:17:26Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-28T02:54:37Z"
    },
    "message": "bfd: remove use of INLINE\n\nNo need to use anything fancy, plain inline works just as well.\n\n\t* bfd-in.h (INLINE): Don't define.\n\t* bfd-in2.h: Regenerate.\n\t* aoutx.h: Replace use of INLINE with inline.\n\t* elf-eh-frame.c: Likewise.\n\t* elf32-score7.c: Likewise.\n\t* elfxx-mips.c: Likewise.\n\t* ihex.c: Likewise.\n\t* mach-o.c: Likewise.\n\t* mmo.c: Likewise.",
    "tree": {
      "sha": "d760e79e5de354b15d49c8caa762ff21543c3125",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d760e79e5de354b15d49c8caa762ff21543c3125"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/42eec46f230cb05873fdc7561057a6ae63d17ce4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/42eec46f230cb05873fdc7561057a6ae63d17ce4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/42eec46f230cb05873fdc7561057a6ae63d17ce4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/42eec46f230cb05873fdc7561057a6ae63d17ce4/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1cba418d26929e0fa0f9c43b2323093b1c7fa9de",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1cba418d26929e0fa0f9c43b2323093b1c7fa9de",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1cba418d26929e0fa0f9c43b2323093b1c7fa9de"
    }
  ],
  "stats": {
    "total": 60,
    "additions": 22,
    "deletions": 38
  },
  "files": [
    {
      "sha": "d7bb928d0caa8a2da3e0d993ec7461f73c130f05",
      "filename": "bfd/aoutx.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42eec46f230cb05873fdc7561057a6ae63d17ce4/bfd/aoutx.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42eec46f230cb05873fdc7561057a6ae63d17ce4/bfd/aoutx.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aoutx.h?ref=42eec46f230cb05873fdc7561057a6ae63d17ce4",
      "patch": "@@ -3964,7 +3964,7 @@ aout_link_reloc_link_order (struct aout_final_link_info *flaginfo,\n \n /* Get the section corresponding to a reloc index.  */\n \n-static INLINE asection *\n+static inline asection *\n aout_reloc_index_to_section (bfd *abfd, int indx)\n {\n   switch (indx & N_TYPE)"
    },
    {
      "sha": "41417055c0e2da7ade5d71a3a813321a881a159c",
      "filename": "bfd/bfd-in.h",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42eec46f230cb05873fdc7561057a6ae63d17ce4/bfd/bfd-in.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42eec46f230cb05873fdc7561057a6ae63d17ce4/bfd/bfd-in.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in.h?ref=42eec46f230cb05873fdc7561057a6ae63d17ce4",
      "patch": "@@ -84,14 +84,6 @@ typedef BFD_HOST_U_64_BIT bfd_uint64_t;\n #define BFD64\n #endif\n \n-#ifndef INLINE\n-#if __GNUC__ >= 2\n-#define INLINE __inline__\n-#else\n-#define INLINE\n-#endif\n-#endif\n-\n /* Declaring a type wide enough to hold a host long and a host pointer.  */\n #define BFD_HOSTPTR_T @BFD_HOSTPTR_T@\n typedef BFD_HOSTPTR_T bfd_hostptr_t;"
    },
    {
      "sha": "9bdbe04ef88321d2020deb853ddecd9eb10b8a64",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42eec46f230cb05873fdc7561057a6ae63d17ce4/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42eec46f230cb05873fdc7561057a6ae63d17ce4/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=42eec46f230cb05873fdc7561057a6ae63d17ce4",
      "patch": "@@ -91,14 +91,6 @@ typedef BFD_HOST_U_64_BIT bfd_uint64_t;\n #define BFD64\n #endif\n \n-#ifndef INLINE\n-#if __GNUC__ >= 2\n-#define INLINE __inline__\n-#else\n-#define INLINE\n-#endif\n-#endif\n-\n /* Declaring a type wide enough to hold a host long and a host pointer.  */\n #define BFD_HOSTPTR_T @BFD_HOSTPTR_T@\n typedef BFD_HOSTPTR_T bfd_hostptr_t;"
    },
    {
      "sha": "24c6e2c4739018c1e57d0a393c83595318471234",
      "filename": "bfd/elf-eh-frame.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42eec46f230cb05873fdc7561057a6ae63d17ce4/bfd/elf-eh-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42eec46f230cb05873fdc7561057a6ae63d17ce4/bfd/elf-eh-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-eh-frame.c?ref=42eec46f230cb05873fdc7561057a6ae63d17ce4",
      "patch": "@@ -282,7 +282,7 @@ cie_compute_hash (struct cie *c)\n /* Return the number of extra bytes that we'll be inserting into\n    ENTRY's augmentation string.  */\n \n-static INLINE unsigned int\n+static inline unsigned int\n extra_augmentation_string_bytes (struct eh_cie_fde *entry)\n {\n   unsigned int size = 0;\n@@ -298,7 +298,7 @@ extra_augmentation_string_bytes (struct eh_cie_fde *entry)\n \n /* Likewise ENTRY's augmentation data.  */\n \n-static INLINE unsigned int\n+static inline unsigned int\n extra_augmentation_data_bytes (struct eh_cie_fde *entry)\n {\n   unsigned int size = 0;"
    },
    {
      "sha": "50d607de15613f2381fddca67ee563df29bea95a",
      "filename": "bfd/elf32-score7.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42eec46f230cb05873fdc7561057a6ae63d17ce4/bfd/elf32-score7.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42eec46f230cb05873fdc7561057a6ae63d17ce4/bfd/elf32-score7.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-score7.c?ref=42eec46f230cb05873fdc7561057a6ae63d17ce4",
      "patch": "@@ -878,7 +878,7 @@ static const struct score_reloc_map elf32_score_reloc_map[] =\n   {BFD_RELOC_SCORE_DUMMY_HI16,\t R_SCORE_DUMMY_HI16},\n };\n \n-static INLINE hashval_t\n+static inline hashval_t\n score_elf_hash_bfd_vma (bfd_vma addr)\n {\n #ifdef BFD64"
    },
    {
      "sha": "4aaa3ea1fc3c02a971790f277e671449ef79dfd2",
      "filename": "bfd/elfxx-mips.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42eec46f230cb05873fdc7561057a6ae63d17ce4/bfd/elfxx-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42eec46f230cb05873fdc7561057a6ae63d17ce4/bfd/elfxx-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.c?ref=42eec46f230cb05873fdc7561057a6ae63d17ce4",
      "patch": "@@ -3075,7 +3075,7 @@ gptab_compare (const void *p1, const void *p2)\n /* Use all 64 bits of a bfd_vma for the computation of a 32-bit\n    hash number.  */\n \n-static INLINE hashval_t\n+static inline hashval_t\n mips_elf_hash_bfd_vma (bfd_vma addr)\n {\n #ifdef BFD64\n@@ -7024,7 +7024,7 @@ _bfd_elf_mips_mach (flagword flags)\n \n /* Return printable name for ABI.  */\n \n-static INLINE char *\n+static inline char *\n elf_mips_abi_name (bfd *abfd)\n {\n   flagword flags;"
    },
    {
      "sha": "1e8563e61101586f8f1aea3f17b6cc1bd2308c5e",
      "filename": "bfd/ihex.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42eec46f230cb05873fdc7561057a6ae63d17ce4/bfd/ihex.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42eec46f230cb05873fdc7561057a6ae63d17ce4/bfd/ihex.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ihex.c?ref=42eec46f230cb05873fdc7561057a6ae63d17ce4",
      "patch": "@@ -189,7 +189,7 @@ ihex_mkobject (bfd *abfd)\n /* Read a byte from a BFD.  Set *ERRORPTR if an error occurred.\n    Return EOF on error or end of file.  */\n \n-static INLINE int\n+static inline int\n ihex_get_byte (bfd *abfd, bool *errorptr)\n {\n   bfd_byte c;"
    },
    {
      "sha": "31a109b17a8b7dd0503c13665e605d00864f8705",
      "filename": "bfd/mach-o.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42eec46f230cb05873fdc7561057a6ae63d17ce4/bfd/mach-o.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42eec46f230cb05873fdc7561057a6ae63d17ce4/bfd/mach-o.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mach-o.c?ref=42eec46f230cb05873fdc7561057a6ae63d17ce4",
      "patch": "@@ -66,7 +66,7 @@ bfd_mach_o_valid (bfd *abfd)\n   return true;\n }\n \n-static INLINE bool\n+static inline bool\n mach_o_wide_p (bfd_mach_o_header *header)\n {\n   switch (header->version)\n@@ -81,7 +81,7 @@ mach_o_wide_p (bfd_mach_o_header *header)\n     }\n }\n \n-static INLINE bool\n+static inline bool\n bfd_mach_o_wide_p (bfd *abfd)\n {\n   return mach_o_wide_p (&bfd_mach_o_get_data (abfd)->header);"
    },
    {
      "sha": "cb018a1c2750df4a94e83f9af909474a3cbb9861",
      "filename": "bfd/mmo.c",
      "status": "modified",
      "additions": 13,
      "deletions": 13,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42eec46f230cb05873fdc7561057a6ae63d17ce4/bfd/mmo.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42eec46f230cb05873fdc7561057a6ae63d17ce4/bfd/mmo.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mmo.c?ref=42eec46f230cb05873fdc7561057a6ae63d17ce4",
      "patch": "@@ -382,7 +382,7 @@ static bool mmo_scan (bfd *);\n static asection *mmo_decide_section (bfd *, bfd_vma);\n static asection *mmo_get_generic_spec_data_section (bfd *, int);\n static asection *mmo_get_spec_section (bfd *, int);\n-static INLINE bfd_byte *mmo_get_loc (asection *, bfd_vma, int);\n+static inline bfd_byte *mmo_get_loc (asection *, bfd_vma, int);\n static void mmo_xore_64 (asection *, bfd_vma vma, bfd_vma value);\n static void mmo_xore_32 (asection *, bfd_vma vma, unsigned int);\n static void mmo_xore_16 (asection *, bfd_vma vma, unsigned int);\n@@ -741,7 +741,7 @@ mmo_decide_section (bfd *abfd, bfd_vma vma)\n \n /* Xor in a 64-bit value VALUE at VMA.  */\n \n-static INLINE void\n+static inline void\n mmo_xore_64 (asection *sec, bfd_vma vma, bfd_vma value)\n {\n   bfd_byte *loc = mmo_get_loc (sec, vma, 8);\n@@ -753,7 +753,7 @@ mmo_xore_64 (asection *sec, bfd_vma vma, bfd_vma value)\n \n /* Xor in a 32-bit value VALUE at VMA.  */\n \n-static INLINE void\n+static inline void\n mmo_xore_32 (asection *sec, bfd_vma vma, unsigned int value)\n {\n   bfd_byte *loc = mmo_get_loc (sec, vma, 4);\n@@ -765,7 +765,7 @@ mmo_xore_32 (asection *sec, bfd_vma vma, unsigned int value)\n \n /* Xor in a 16-bit value VALUE at VMA.  */\n \n-static INLINE void\n+static inline void\n mmo_xore_16 (asection *sec, bfd_vma vma, unsigned int value)\n {\n   bfd_byte *loc = mmo_get_loc (sec, vma, 2);\n@@ -777,7 +777,7 @@ mmo_xore_16 (asection *sec, bfd_vma vma, unsigned int value)\n \n /* Write a 32-bit word to output file, no lop_quote generated.  */\n \n-static INLINE void\n+static inline void\n mmo_write_tetra_raw (bfd *abfd, unsigned int value)\n {\n   bfd_byte buf[4];\n@@ -790,7 +790,7 @@ mmo_write_tetra_raw (bfd *abfd, unsigned int value)\n \n /* Write a 32-bit word to output file; lop_quote if necessary.  */\n \n-static INLINE void\n+static inline void\n mmo_write_tetra (bfd *abfd, unsigned int value)\n {\n   if (((value >> 24) & 0xff) == LOP)\n@@ -801,7 +801,7 @@ mmo_write_tetra (bfd *abfd, unsigned int value)\n \n /* Write a 64-bit word to output file, perhaps with lop_quoting.  */\n \n-static INLINE void\n+static inline void\n mmo_write_octa (bfd *abfd, bfd_vma value)\n {\n   mmo_write_tetra (abfd, (unsigned int) (value >> 32));\n@@ -810,7 +810,7 @@ mmo_write_octa (bfd *abfd, bfd_vma value)\n \n /* Write a 64-bit word to output file, without lop_quoting.  */\n \n-static INLINE void\n+static inline void\n mmo_write_octa_raw (bfd *abfd, bfd_vma value)\n {\n   mmo_write_tetra_raw (abfd, (unsigned int) (value >> 32));\n@@ -820,7 +820,7 @@ mmo_write_octa_raw (bfd *abfd, bfd_vma value)\n /* Write quoted contents.  Intended to be called multiple times in\n    sequence, followed by a call to mmo_flush_chunk.  */\n \n-static INLINE bool\n+static inline bool\n mmo_write_chunk (bfd *abfd, const bfd_byte *loc, unsigned int len)\n {\n   bool retval = true;\n@@ -872,7 +872,7 @@ mmo_write_chunk (bfd *abfd, const bfd_byte *loc, unsigned int len)\n /* Flush remaining bytes, from a previous mmo_write_chunk, zero-padded to\n    4 bytes.  */\n \n-static INLINE bool\n+static inline bool\n mmo_flush_chunk (bfd *abfd)\n {\n   if (abfd->tdata.mmo_data->byte_no != 0)\n@@ -889,7 +889,7 @@ mmo_flush_chunk (bfd *abfd)\n \n /* Same, but from a list.  */\n \n-static INLINE bool\n+static inline bool\n mmo_write_chunk_list (bfd *abfd, mmo_data_list_type *datap)\n {\n   for (; datap != NULL; datap = datap->next)\n@@ -970,7 +970,7 @@ mmo_write_loc_chunk (bfd *abfd, bfd_vma vma, const bfd_byte *loc,\n \n /* Same, but from a list.  */\n \n-static INLINE bool\n+static inline bool\n mmo_write_loc_chunk_list (bfd *abfd, mmo_data_list_type *datap)\n {\n   /* Get an address different than the address of the first chunk.  */\n@@ -1472,7 +1472,7 @@ SUBSECTION\n    If there's new contents, allocate to the next multiple of\n    MMO_SEC_CONTENTS_CHUNK_SIZE.  */\n \n-static INLINE bfd_byte *\n+static inline bfd_byte *\n mmo_get_loc (asection *sec, bfd_vma vma, int size)\n {\n   bfd_size_type allocated_size;"
    }
  ]
}