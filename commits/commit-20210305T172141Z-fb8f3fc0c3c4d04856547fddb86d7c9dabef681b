{
  "sha": "fb8f3fc0c3c4d04856547fddb86d7c9dabef681b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmI4ZjNmYzBjM2M0ZDA0ODU2NTQ3ZmRkYjg2ZDdjOWRhYmVmNjgxYg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-11-30T12:15:08Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-05T17:21:41Z"
    },
    "message": "gdb/riscv: introduce bare metal core dump support\n\nThis commit adds the ability for bare metal RISC-V target to generate\ncore files from within GDB.\n\nThe intended use case is that a user will connect to a remote bare\nmetal target, debug up to some error condition, then generate a core\nfile in the normal way using:\n\n  (gdb) generate-core-file\n\nThis core file can then be used to revisit the state of the remote\ntarget without having to reconnect to the remote target.\n\nThe core file creation code is split between two new files.  In\nelf-none-tdep.c is code for any architecture with the none\nABI (i.e. bare metal) when the BFD library is built with ELF support.\n\nIn riscv-none-tdep.c are the RISC-V specific parts.  This is where the\nregset and regcache_map_entry structures are defined that control how\nregisters are laid out in the core file.  As this file could (in\ntheory at least) be used for a non-ELF bare metal RISC-V target, the\ncalls into elf-none-tdep.c are guarded with '#ifdef HAVE_ELF'.\n\nCurrently for RISC-V only the x-regs and f-regs (if present) are\nwritten out.  In future commits I plan to add support for writing out\nthe RISC-V CSRs.\n\nThe core dump format is based around generating an ELF containing\nsections for the writable regions of memory that a user could be\nusing.  Which regions are dumped rely on GDB's existing common core\ndumping code, GDB will attempt to figure out the stack and heap as\nwell as copying out writable data sections as identified by the\noriginal ELF.\n\nRegister information is added to the core dump using notes, just as it\nis for Linux of FreeBSD core dumps.  The note types used consist of\nthe 3 basic types you would expect in a OS based core dump,\nNT_PRPSINFO, NT_PRSTATUS, NT_FPREGSET.\n\nThe layout of these notes differs slightly (due to field sizes)\nbetween RV32 and RV64.  Below I describe the data layout for each\nnote.  In all cases, all padding fields should be set to zero.\n\nNote NT_PRPSINFO is optional.  Its data layout is:\n\n  struct prpsinfo32_t\t\t/* For RV32.  */\n  {\n    uint8_t padding[32];\n    char fname[16];\n    char psargs[80];\n  }\n\n  struct prpsinfo64_t\t\t/* For RV64.  */\n  {\n    uint8_t padding[40];\n    char fname[16];\n    char psargs[80];\n  }\n\nField 'fname' - null terminated string consisting of the basename of\n    (up to the fist 15 characters of) the executable.  Any additional\n    space should be set to zero.  If there's no executable name then\n    this field can be set to all zero.\n\nField 'psargs' - a null terminated string up to 80 characters in\n    length.  Any additional space should be filled with zero.  This\n    field contains the full executable path and any arguments passed\n    to the executable.  If there's nothing sensible to write in this\n    field then fill it with zero.\n\nNote NT_PRSTATUS is required, its data layout is:\n\n  struct prstatus32_t\t\t/* For RV32.  */\n  {\n    uint8_t padding_1[12];\n    uint16_t sig;\n    uint8_t padding_2[10];\n    uint32_t thread_id;\n    uint8_t padding_3[44];\n    uint32_t x_regs[32];\n    uint8_t padding_4[4];\n  }\n\n  struct prstatus64_t\t\t/* For RV64.  */\n  {\n    uint8_t padding_1[12];\n    uint16_t sig;\n    uint8_t padding_2[18];\n    uint32_t thread_id;\n    uint8_t padding_3[76];\n    uint64_t x_regs[32];\n    uint8_t padding_4[4];\n  }\n\nField 'sig' - the signal that stopped this thread.  It's implementation\n    defined what this field actually means.  Within GDB this will be\n    the signal number that the remote target reports as the stop\n    reason for this thread.\n\nField 'thread_is' - the thread id for this thread.  It's implementation\n    defined what this field actually means.  Within GDB this will be\n    thread thread-id that is assigned to each remote thread.\n\nField 'x_regs' - at index 0 we store the program counter, and at\n    indices 1 to 31 we store x-registers 1 to 31.  x-register 0 is not\n    stored, its value is always zero anyway.\n\nNote NT_FPREGSET is optional, its data layout is:\n\n  fpregset32_t\t\t\t/* For targets with 'F' extension.  */\n  {\n    uint32_t f_regs[32];\n    uint32_t fcsr;\n  }\n\n  fpregset64_t\t\t\t/* For targets with 'D' extension .  */\n  {\n    uint64_t f_regs[32];\n    uint32_t fcsr;\n  }\n\nField 'f_regs' - stores f-registers 0 to 31.\n\nField 'fcsr' - stores the fcsr CSR register, and is always 4-bytes.\n\nThe rules for ordering the notes is the same as for Linux.  The\nNT_PRSTATUS note must come before any other notes about additional\nregister sets.  And for multi-threaded targets all registers for a\nsingle thread should be grouped together.  This is because only\nNT_PRSTATUS includes a thread-id, all additional register notes after\na NT_PRSTATUS are assumed to belong to the same thread until a\ndifferent NT_PRSTATUS is seen.\n\ngdb/ChangeLog:\n\n\t* Makefile.in (ALL_TARGET_OBS): Add riscv-none-tdep.o.\n\t(ALLDEPFILES): Add riscv-none-tdep.c.\n\t* configure: Regenerate.\n\t* configure.ac (CONFIG_OBS): Add elf-none-tdep.o when BFD has ELF\n\tsupport.\n\t* configure.tgt (riscv*-*-*): Include riscv-none-tdep.c.\n\t* elf-none-tdep.c: New file.\n\t* elf-none-tdep.h: New file.\n\t* riscv-none-tdep.c: New file.",
    "tree": {
      "sha": "4004e4486f4e20b65b869b4f65686f3e08454f19",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4004e4486f4e20b65b869b4f65686f3e08454f19"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0897bb7d6dc4e803cd99d4656186c965f099d01c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0897bb7d6dc4e803cd99d4656186c965f099d01c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0897bb7d6dc4e803cd99d4656186c965f099d01c"
    }
  ],
  "stats": {
    "total": 294,
    "additions": 291,
    "deletions": 3
  },
  "files": [
    {
      "sha": "1a1076abc8205b8618052f91eae2856b0a19601c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fb8f3fc0c3c4d04856547fddb86d7c9dabef681b",
      "patch": "@@ -1,3 +1,16 @@\n+2021-03-05  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\t    Craig Blackmore  <craig.blackmore@embecosm.com>\n+\n+\t* Makefile.in (ALL_TARGET_OBS): Add riscv-none-tdep.o.\n+\t(ALLDEPFILES): Add riscv-none-tdep.c.\n+\t* configure: Regenerate.\n+\t* configure.ac (CONFIG_OBS): Add elf-none-tdep.o when BFD has ELF\n+\tsupport.\n+\t* configure.tgt (riscv*-*-*): Include riscv-none-tdep.c.\n+\t* elf-none-tdep.c: New file.\n+\t* elf-none-tdep.h: New file.\n+\t* riscv-none-tdep.c: New file.\n+\n 2021-03-05  Craig Blackmore  <craig.blackmore@embecosm.com>\n \t    Andrew Burgess  <andrew.burgess@embecosm.com>\n "
    },
    {
      "sha": "a6ca5a5365524271a422205958c28777c7ee624b",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=fb8f3fc0c3c4d04856547fddb86d7c9dabef681b",
      "patch": "@@ -808,6 +808,7 @@ ALL_TARGET_OBS = \\\n \travenscar-thread.o \\\n \triscv-fbsd-tdep.o \\\n \triscv-linux-tdep.o \\\n+\triscv-none-tdep.o \\\n \triscv-ravenscar-thread.o \\\n \triscv-tdep.o \\\n \trl78-tdep.o \\\n@@ -1189,6 +1190,7 @@ SFILES = \\\n \tcp-name-parser.y \\\n \td-exp.y \\\n \tdtrace-probe.c \\\n+\telf-none-tdep.c \\\n \telfread.c \\\n \tf-exp.y \\\n \tgcore-elf.c \\\n@@ -1363,6 +1365,7 @@ HFILES_NO_SRCDIR = \\\n \tnetbsd-tdep.h \\\n \tnds32-tdep.h \\\n \tnios2-tdep.h \\\n+\telf-none-tdep.h \\\n \tnto-tdep.h \\\n \tobjc-lang.h \\\n \tobjfiles.h \\\n@@ -2274,6 +2277,7 @@ ALLDEPFILES = \\\n \triscv-fbsd-tdep.c \\\n \triscv-linux-nat.c \\\n \triscv-linux-tdep.c \\\n+\triscv-none-tdep.c \\\n \triscv-ravenscar-thread.c \\\n \triscv-tdep.c \\\n \trl78-tdep.c \\"
    },
    {
      "sha": "4c80350596c2c1a922ab791ed51e9f493414568b",
      "filename": "gdb/configure",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b/gdb/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b/gdb/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure?ref=fb8f3fc0c3c4d04856547fddb86d7c9dabef681b",
      "patch": "@@ -17264,7 +17264,8 @@ $as_echo \"$gdb_cv_var_elf\" >&6; }\n   LDFLAGS=$OLD_LDFLAGS\n   LIBS=$OLD_LIBS\n if test \"$gdb_cv_var_elf\" = yes; then\n-  CONFIG_OBS=\"$CONFIG_OBS elfread.o stap-probe.o dtrace-probe.o gcore-elf.o\"\n+  CONFIG_OBS=\"$CONFIG_OBS elfread.o stap-probe.o dtrace-probe.o \\\n+\t\tgcore-elf.o elf-none-tdep.o\"\n \n $as_echo \"#define HAVE_ELF 1\" >>confdefs.h\n "
    },
    {
      "sha": "7035014484ecc5b9fc2e0785fe417ef540b12b99",
      "filename": "gdb/configure.ac",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b/gdb/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b/gdb/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.ac?ref=fb8f3fc0c3c4d04856547fddb86d7c9dabef681b",
      "patch": "@@ -1882,7 +1882,8 @@ WIN32LIBS=\"$WIN32LIBS $WIN32APILIBS\"\n GDB_AC_CHECK_BFD([for ELF support in BFD], gdb_cv_var_elf,\n                  [bfd_get_elf_phdr_upper_bound (NULL)], elf-bfd.h)\n if test \"$gdb_cv_var_elf\" = yes; then\n-  CONFIG_OBS=\"$CONFIG_OBS elfread.o stap-probe.o dtrace-probe.o gcore-elf.o\"\n+  CONFIG_OBS=\"$CONFIG_OBS elfread.o stap-probe.o dtrace-probe.o \\\n+\t\tgcore-elf.o elf-none-tdep.o\"\n   AC_DEFINE(HAVE_ELF, 1,\n \t    [Define if ELF support should be included.])\n   # -ldl is provided by bfd/Makfile.am (LIBDL) <PLUGINS>."
    },
    {
      "sha": "91020678bf04c7197ea0f04703b8179d69ecfe3a",
      "filename": "gdb/configure.tgt",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b/gdb/configure.tgt",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b/gdb/configure.tgt",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.tgt?ref=fb8f3fc0c3c4d04856547fddb86d7c9dabef681b",
      "patch": "@@ -85,7 +85,7 @@ ia64*-*-*)\n \t;;\n \n riscv*-*-*)\n-\tcpu_obs=\"riscv-tdep.o arch/riscv.o \\\n+\tcpu_obs=\"riscv-tdep.o riscv-none-tdep.o arch/riscv.o \\\n \t         ravenscar-thread.o riscv-ravenscar-thread.o\";;\n \n x86_64-*-*)"
    },
    {
      "sha": "4cbb664607e735586524cffba1082c784fa212d9",
      "filename": "gdb/elf-none-tdep.c",
      "status": "added",
      "additions": 126,
      "deletions": 0,
      "changes": 126,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b/gdb/elf-none-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b/gdb/elf-none-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elf-none-tdep.c?ref=fb8f3fc0c3c4d04856547fddb86d7c9dabef681b",
      "patch": "@@ -0,0 +1,126 @@\n+/* Common code for targets with the none ABI (bare-metal), but where the\n+   BFD library is build with ELF support.\n+\n+   Copyright (C) 2020-2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"elf-none-tdep.h\"\n+#include \"regset.h\"\n+#include \"elf-bfd.h\"            /* for elfcore_write_* */\n+#include \"inferior.h\"\n+#include \"regcache.h\"\n+#include \"gdbarch.h\"\n+#include \"gcore.h\"\n+#include \"gcore-elf.h\"\n+\n+/* Build the note section for a corefile, and return it in a malloc\n+   buffer.  Currently this just dumps all available registers for each\n+   thread.  */\n+\n+static gdb::unique_xmalloc_ptr<char>\n+elf_none_make_corefile_notes (struct gdbarch *gdbarch, bfd *obfd,\n+\t\t\t      int *note_size)\n+{\n+  gdb::unique_xmalloc_ptr<char> note_data;\n+\n+  /* Add note information about the executable and its arguments.  */\n+  std::string fname;\n+  std::string psargs;\n+  static const size_t fname_len = 16;\n+  static const size_t psargs_len = 80;\n+  if (get_exec_file (0))\n+    {\n+      const char *exe = get_exec_file (0);\n+      fname = lbasename (exe);\n+      psargs = std::string (exe);\n+\n+      const char *infargs = get_inferior_args ();\n+      if (infargs != nullptr)\n+\tpsargs += \" \" + std::string (infargs);\n+\n+      /* All existing targets that handle writing out prpsinfo expect the\n+\t fname and psargs strings to be at least 16 and 80 characters long\n+\t respectively, including a null terminator at the end.  Resize to\n+\t the expected length minus one to ensure there is a null within the\n+\t required length.  */\n+      fname.resize (fname_len - 1);\n+      psargs.resize (psargs_len - 1);\n+    }\n+\n+  /* Resize the buffers up to their required lengths.  This will fill any\n+     remaining space with the null character.  */\n+  fname.resize (fname_len);\n+  psargs.resize (psargs_len);\n+\n+  /* Now write out the prpsinfo structure.  */\n+  note_data.reset (elfcore_write_prpsinfo (obfd, note_data.release (),\n+\t\t\t\t\t   note_size, fname.c_str (),\n+\t\t\t\t\t   psargs.c_str ()));\n+  if (note_data == nullptr)\n+    return nullptr;\n+\n+  /* Thread register information.  */\n+  try\n+    {\n+      update_thread_list ();\n+    }\n+  catch (const gdb_exception_error &e)\n+    {\n+      exception_print (gdb_stderr, e);\n+    }\n+\n+  /* Like the Linux kernel, prefer dumping the signalled thread first.\n+     \"First thread\" is what tools use to infer the signalled thread.  */\n+  thread_info *signalled_thr = gcore_find_signalled_thread ();\n+\n+  /* All threads are reported as having been stopped by the same signal\n+     that stopped SIGNALLED_THR.  */\n+  gdb_signal stop_signal;\n+  if (signalled_thr != nullptr)\n+    stop_signal = signalled_thr->suspend.stop_signal;\n+  else\n+    stop_signal = GDB_SIGNAL_0;\n+\n+  if (signalled_thr != nullptr)\n+    gcore_elf_build_thread_register_notes (gdbarch, signalled_thr,\n+\t\t\t\t\t   stop_signal, obfd, &note_data,\n+\t\t\t\t\t   note_size);\n+  for (thread_info *thr : current_inferior ()->non_exited_threads ())\n+    {\n+      if (thr == signalled_thr)\n+\tcontinue;\n+\n+      gcore_elf_build_thread_register_notes (gdbarch, thr, stop_signal, obfd,\n+\t\t\t\t\t     &note_data, note_size);\n+    }\n+\n+\n+  /* Target description.  */\n+  gcore_elf_make_tdesc_note (obfd, &note_data, note_size);\n+\n+  return note_data;\n+}\n+\n+/* See none-tdep.h.  */\n+\n+void\n+elf_none_init_abi (struct gdbarch *gdbarch)\n+{\n+  /* Default core file support.  */\n+  set_gdbarch_make_corefile_notes (gdbarch, elf_none_make_corefile_notes);\n+}"
    },
    {
      "sha": "9ce9a20e468d8f498422f44ed4d0e9f82f1415e6",
      "filename": "gdb/elf-none-tdep.h",
      "status": "added",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b/gdb/elf-none-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b/gdb/elf-none-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elf-none-tdep.h?ref=fb8f3fc0c3c4d04856547fddb86d7c9dabef681b",
      "patch": "@@ -0,0 +1,30 @@\n+/* Architecture independent code for ABI 'none' (bare-metal).\n+\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef NONE_TDEP_H\n+#define NONE_TDEP_H\n+\n+struct gdbarch;\n+\n+/* Initialize support for cross-architecture features applicable for the\n+   GDB_OSABI_NONE ABI, that is bare-metal targets.  */\n+\n+void elf_none_init_abi (struct gdbarch *gdbarch);\n+\n+#endif /* NONE_TDEP_H */"
    },
    {
      "sha": "f1ac592bfac6f38e73f6f1700721b1bf91fa7d21",
      "filename": "gdb/riscv-none-tdep.c",
      "status": "added",
      "additions": 113,
      "deletions": 0,
      "changes": 113,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b/gdb/riscv-none-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fb8f3fc0c3c4d04856547fddb86d7c9dabef681b/gdb/riscv-none-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-none-tdep.c?ref=fb8f3fc0c3c4d04856547fddb86d7c9dabef681b",
      "patch": "@@ -0,0 +1,113 @@\n+/* Copyright (C) 2020-2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This file contain code that is specific for bare-metal RISC-V targets.  */\n+\n+#include \"defs.h\"\n+#include \"arch-utils.h\"\n+#include \"regcache.h\"\n+#include \"riscv-tdep.h\"\n+#include \"elf-bfd.h\"\n+#include \"regset.h\"\n+\n+#ifdef HAVE_ELF\n+#include \"elf-none-tdep.h\"\n+#endif\n+\n+/* Define the general register mapping.  This follows the same format as\n+   the RISC-V linux corefile.  The linux kernel puts the PC at offset 0,\n+   gdb puts it at offset 32.  Register x0 is always 0 and can be ignored.\n+   Registers x1 to x31 are in the same place.  */\n+\n+static const struct regcache_map_entry riscv_gregmap[] =\n+{\n+  { 1,  RISCV_PC_REGNUM, 0 },\n+  { 31, RISCV_RA_REGNUM, 0 }, /* x1 to x31 */\n+  { 0 }\n+};\n+\n+/* Define the FP register mapping.  This follows the same format as the\n+   RISC-V linux corefile.  The kernel puts the 32 FP regs first, and then\n+   FCSR.  */\n+\n+static const struct regcache_map_entry riscv_fregmap[] =\n+{\n+  { 32, RISCV_FIRST_FP_REGNUM, 0 },\n+  { 1, RISCV_CSR_FCSR_REGNUM, 4 },\t/* Always stored as 4-bytes.  */\n+  { 0 }\n+};\n+\n+/* Define the general register regset.  */\n+\n+static const struct regset riscv_gregset =\n+{\n+  riscv_gregmap, riscv_supply_regset, regcache_collect_regset\n+};\n+\n+/* Define the FP register regset.  */\n+\n+static const struct regset riscv_fregset =\n+{\n+  riscv_fregmap, riscv_supply_regset, regcache_collect_regset\n+};\n+\n+/* Implement the \"iterate_over_regset_sections\" gdbarch method.  */\n+\n+static void\n+riscv_iterate_over_regset_sections (struct gdbarch *gdbarch,\n+\t\t\t\t    iterate_over_regset_sections_cb *cb,\n+\t\t\t\t    void *cb_data,\n+\t\t\t\t    const struct regcache *regcache)\n+{\n+  /* Write out the GPRs.  */\n+  int sz = 32 * riscv_isa_xlen (gdbarch);\n+  cb (\".reg\", sz, sz, &riscv_gregset, NULL, cb_data);\n+\n+  /* Write out the FPRs, but only if present.  */\n+  if (riscv_isa_flen (gdbarch) > 0)\n+    {\n+      sz = (32 * riscv_isa_flen (gdbarch)\n+\t    + register_size (gdbarch, RISCV_CSR_FCSR_REGNUM));\n+      cb (\".reg2\", sz, sz, &riscv_fregset, NULL, cb_data);\n+    }\n+}\n+\n+/* Initialize RISC-V bare-metal ABI info.  */\n+\n+static void\n+riscv_none_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n+{\n+#ifdef HAVE_ELF\n+  elf_none_init_abi (gdbarch);\n+#endif\n+\n+  /* Iterate over registers for reading and writing bare metal RISC-V core\n+     files.  */\n+  set_gdbarch_iterate_over_regset_sections\n+    (gdbarch, riscv_iterate_over_regset_sections);\n+\n+}\n+\n+/* Initialize RISC-V bare-metal target support.  */\n+\n+void _initialize_riscv_none_tdep ();\n+void\n+_initialize_riscv_none_tdep ()\n+{\n+  gdbarch_register_osabi (bfd_arch_riscv, 0, GDB_OSABI_NONE,\n+\t\t\t  riscv_none_init_abi);\n+}"
    }
  ]
}