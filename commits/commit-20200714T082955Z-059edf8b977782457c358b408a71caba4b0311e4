{
  "sha": "059edf8b977782457c358b408a71caba4b0311e4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDU5ZWRmOGI5Nzc3ODI0NTdjMzU4YjQwOGE3MWNhYmE0YjAzMTFlNA==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-14T08:29:55Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-14T08:29:55Z"
    },
    "message": "x86: merge/move logic determining the EVEX disp8 shift\n\nFold redundant case blocks and move the extra adjustments logic into\nthe single case block that actually needs it - there's no need to go\nthrough the extra logic for all the other cases. Also utilize there that\nvex.b cannot be set at this point, due to earlier logic. Reduce the\ncomment there, which was partly stale anyway.",
    "tree": {
      "sha": "5456d047310ddc34fcb3272d73dcb8af977b91cd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5456d047310ddc34fcb3272d73dcb8af977b91cd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/059edf8b977782457c358b408a71caba4b0311e4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/059edf8b977782457c358b408a71caba4b0311e4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/059edf8b977782457c358b408a71caba4b0311e4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/059edf8b977782457c358b408a71caba4b0311e4/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4726e9a47938baa67a8e41c704bfdde1f123c01e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4726e9a47938baa67a8e41c704bfdde1f123c01e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4726e9a47938baa67a8e41c704bfdde1f123c01e"
    }
  ],
  "stats": {
    "total": 52,
    "additions": 23,
    "deletions": 29
  },
  "files": [
    {
      "sha": "88ea70d54a5ae5a3e91bae43f378926056233798",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/059edf8b977782457c358b408a71caba4b0311e4/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/059edf8b977782457c358b408a71caba4b0311e4/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=059edf8b977782457c358b408a71caba4b0311e4",
      "patch": "@@ -1,3 +1,10 @@\n+2020-07-14  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-dis.c (OP_E_memory): Move xmm_mw_mode, xmm_mb_mode,\n+\tdqd_mode, xmm_md_mode, d_mode, d_swap_mode, and\n+\td_scalar_swap_mode case handling. Move shift adjsutment into\n+\tthe case its applicable to.\n+\n 2020-07-14  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-dis.c (EVEX_W_0F3862_P_2, EVEX_W_0F3863_P_2): Delete."
    },
    {
      "sha": "708d820f51d8d9d5a2d01198f21973a335a33356",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 16,
      "deletions": 29,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/059edf8b977782457c358b408a71caba4b0311e4/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/059edf8b977782457c358b408a71caba4b0311e4/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=059edf8b977782457c358b408a71caba4b0311e4",
      "patch": "@@ -14517,15 +14517,22 @@ OP_E_memory (int bytemode, int sizeflag)\n \t{\n \tcase dqw_mode:\n \tcase dw_mode:\n+\tcase xmm_mw_mode:\n \t  shift = 1;\n \t  break;\n \tcase dqb_mode:\n \tcase db_mode:\n+\tcase xmm_mb_mode:\n \t  shift = 0;\n \t  break;\n \tcase dq_mode:\n \t  if (address_mode != mode_64bit)\n \t    {\n+\tcase dqd_mode:\n+\tcase xmm_md_mode:\n+\tcase d_mode:\n+\tcase d_swap_mode:\n+\tcase d_scalar_swap_mode:\n \t      shift = 2;\n \t      break;\n \t    }\n@@ -14566,6 +14573,15 @@ OP_E_memory (int bytemode, int sizeflag)\n \t    default:\n \t      abort ();\n \t    }\n+\t  /* Make necessary corrections to shift for modes that need it.  */\n+\t  if (bytemode == xmmq_mode\n+\t      || bytemode == evex_half_bcst_xmmq_mode\n+\t      || (bytemode == ymmq_mode && vex.length == 128))\n+\t    shift -= 1;\n+\t  else if (bytemode == xmmqd_mode)\n+\t    shift -= 2;\n+\t  else if (bytemode == xmmdw_mode)\n+\t    shift -= 3;\n \t  break;\n \tcase ymm_mode:\n \t  shift = 5;\n@@ -14579,41 +14595,12 @@ OP_E_memory (int bytemode, int sizeflag)\n \tcase q_scalar_swap_mode:\n \t  shift = 3;\n \t  break;\n-\tcase dqd_mode:\n-\tcase xmm_md_mode:\n-\tcase d_mode:\n-\tcase d_swap_mode:\n-\tcase d_scalar_swap_mode:\n-\t  shift = 2;\n-\t  break;\n \tcase bw_unit_mode:\n \t  shift = vex.w ? 1 : 0;\n \t  break;\n-\tcase xmm_mw_mode:\n-\t  shift = 1;\n-\t  break;\n-\tcase xmm_mb_mode:\n-\t  shift = 0;\n-\t  break;\n \tdefault:\n \t  abort ();\n \t}\n-      /* Make necessary corrections to shift for modes that need it.\n-\t For these modes we currently have shift 4, 5 or 6 depending on\n-\t vex.length (it corresponds to xmmword, ymmword or zmmword\n-\t operand).  We might want to make it 3, 4 or 5 (e.g. for\n-\t xmmq_mode).  In case of broadcast enabled the corrections\n-\t aren't needed, as element size is always 32 or 64 bits.  */\n-      if (!vex.b\n-\t  && (bytemode == xmmq_mode\n-\t      || bytemode == evex_half_bcst_xmmq_mode))\n-\tshift -= 1;\n-      else if (bytemode == xmmqd_mode)\n-\tshift -= 2;\n-      else if (bytemode == xmmdw_mode)\n-\tshift -= 3;\n-      else if (bytemode == ymmq_mode && vex.length == 128)\n-\tshift -= 1;\n     }\n   else\n     shift = 0;"
    }
  ]
}