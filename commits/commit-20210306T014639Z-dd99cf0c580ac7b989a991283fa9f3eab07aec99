{
  "sha": "dd99cf0c580ac7b989a991283fa9f3eab07aec99",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGQ5OWNmMGM1ODBhYzdiOTg5YTk5MTI4M2ZhOWYzZWFiMDdhZWM5OQ==",
  "commit": {
    "author": {
      "name": "Weimin Pan",
      "email": "weimin.pan@oracle.com",
      "date": "2021-03-06T00:17:00Z"
    },
    "committer": {
      "name": "Weimin Pan",
      "email": "weimin.pan@oracle.com",
      "date": "2021-03-06T01:46:39Z"
    },
    "message": "CTF: add all members of an enum type to psymtab\n\nWith the following change which was made last April:\n\n    [gdb] Use partial symbol table to find language for main\n    commit d3214198119c1a2f9a6a2b8fcc56d8c324e1a245\n\nThe ctf reader was modified to enter all members of an enum type,\nsimilar to what the dwarf2 reader did, into the psymtab or gdb\nwon't be able to find them. In addition, the empty name checking\nneeded to be moved down so members of a unnamed enum were not left\nout.\n\ngdb/ChangeLog:\n\n\t* ctfread.c (ctf_psymtab_add_enums): New function.\n\t(ctf_psymtab_type_cb): call ctf_psymtab_add_enums.",
    "tree": {
      "sha": "fa00af9e843598266fa0bf68a7818e3e3c7b8b54",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fa00af9e843598266fa0bf68a7818e3e3c7b8b54"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dd99cf0c580ac7b989a991283fa9f3eab07aec99",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd99cf0c580ac7b989a991283fa9f3eab07aec99",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dd99cf0c580ac7b989a991283fa9f3eab07aec99",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd99cf0c580ac7b989a991283fa9f3eab07aec99/comments",
  "author": {
    "login": "wmwpan",
    "id": 50341885,
    "node_id": "MDQ6VXNlcjUwMzQxODg1",
    "avatar_url": "https://avatars.githubusercontent.com/u/50341885?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wmwpan",
    "html_url": "https://github.com/wmwpan",
    "followers_url": "https://api.github.com/users/wmwpan/followers",
    "following_url": "https://api.github.com/users/wmwpan/following{/other_user}",
    "gists_url": "https://api.github.com/users/wmwpan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wmwpan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wmwpan/subscriptions",
    "organizations_url": "https://api.github.com/users/wmwpan/orgs",
    "repos_url": "https://api.github.com/users/wmwpan/repos",
    "events_url": "https://api.github.com/users/wmwpan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wmwpan/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "wmwpan",
    "id": 50341885,
    "node_id": "MDQ6VXNlcjUwMzQxODg1",
    "avatar_url": "https://avatars.githubusercontent.com/u/50341885?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wmwpan",
    "html_url": "https://github.com/wmwpan",
    "followers_url": "https://api.github.com/users/wmwpan/followers",
    "following_url": "https://api.github.com/users/wmwpan/following{/other_user}",
    "gists_url": "https://api.github.com/users/wmwpan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wmwpan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wmwpan/subscriptions",
    "organizations_url": "https://api.github.com/users/wmwpan/orgs",
    "repos_url": "https://api.github.com/users/wmwpan/repos",
    "events_url": "https://api.github.com/users/wmwpan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wmwpan/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "844be3f24027a13630dc0f67e006eee2ee5c6776",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/844be3f24027a13630dc0f67e006eee2ee5c6776",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/844be3f24027a13630dc0f67e006eee2ee5c6776"
    }
  ],
  "stats": {
    "total": 35,
    "additions": 32,
    "deletions": 3
  },
  "files": [
    {
      "sha": "ef9e2d8a13dd9497cc02d835d3ad66dccac0995e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd99cf0c580ac7b989a991283fa9f3eab07aec99/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd99cf0c580ac7b989a991283fa9f3eab07aec99/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=dd99cf0c580ac7b989a991283fa9f3eab07aec99",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-06  Weimin Pan  <weimin.pan@oracle.com>\n+\n+\t* ctfread.c (ctf_psymtab_add_enums): New function.\n+\t(ctf_psymtab_type_cb): call ctf_psymtab_add_enums.\n+\n 2021-03-06  Weimin Pan  <weimin.pan@oracle.com>\n \n \t* ctfread.c (read_func_kind_type): Set up function arguments."
    },
    {
      "sha": "4ff475fe22dabfa425258a6b72dd07ac9b28a734",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 27,
      "deletions": 3,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd99cf0c580ac7b989a991283fa9f3eab07aec99/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd99cf0c580ac7b989a991283fa9f3eab07aec99/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=dd99cf0c580ac7b989a991283fa9f3eab07aec99",
      "patch": "@@ -1245,6 +1245,27 @@ ctf_end_symtab (ctf_psymtab *pst,\n   return result;\n }\n \n+/* Add all members of an enum with type TID to partial symbol table.  */\n+\n+static void\n+ctf_psymtab_add_enums (struct ctf_context *ccp, ctf_id_t tid)\n+{\n+  int val;\n+  const char *ename;\n+  ctf_next_t *i = nullptr;\n+\n+  while ((ename = ctf_enum_next (ccp->fp, tid, &i, &val)) != nullptr)\n+    {\n+      ccp->pst->add_psymbol (ename, true,\n+\t\t\t     VAR_DOMAIN, LOC_CONST, -1,\n+\t\t\t     psymbol_placement::GLOBAL,\n+\t\t\t     0, language_c, ccp->of);\n+    }\n+  if (ctf_errno (ccp->fp) != ECTF_NEXT_END)\n+    complaint (_(\"ctf_enum_next ctf_psymtab_add_enums failed - %s\"),\n+\t       ctf_errmsg (ctf_errno (ccp->fp)));\n+}\n+\n /* Read in full symbols for PST, and anything it depends on.  */\n \n void\n@@ -1366,17 +1387,17 @@ ctf_psymtab_type_cb (ctf_id_t tid, void *arg)\n \n   ccp = (struct ctf_context *) arg;\n   gdb::unique_xmalloc_ptr<char> name (ctf_type_aname_raw (ccp->fp, tid));\n-  if (name == nullptr || strlen (name.get ()) == 0)\n-    return 0;\n \n   domain_enum domain = UNDEF_DOMAIN;\n   enum address_class aclass = LOC_UNDEF;\n   kind = ctf_type_kind (ccp->fp, tid);\n   switch (kind)\n     {\n+      case CTF_K_ENUM:\n+\tctf_psymtab_add_enums (ccp, tid);\n+\t/* FALL THROUGH */\n       case CTF_K_STRUCT:\n       case CTF_K_UNION:\n-      case CTF_K_ENUM:\n \tdomain = STRUCT_DOMAIN;\n \taclass = LOC_TYPEDEF;\n \tbreak;\n@@ -1407,6 +1428,9 @@ ctf_psymtab_type_cb (ctf_id_t tid, void *arg)\n \treturn 0;\n     }\n \n+  if (name == nullptr || strlen (name.get ()) == 0)\n+    return 0;\n+\n   ccp->pst->add_psymbol (name.get (), true,\n \t\t\t domain, aclass, section,\n \t\t\t psymbol_placement::GLOBAL,"
    }
  ]
}