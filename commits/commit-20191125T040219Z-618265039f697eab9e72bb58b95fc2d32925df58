{
  "sha": "618265039f697eab9e72bb58b95fc2d32925df58",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjE4MjY1MDM5ZjY5N2VhYjllNzJiYjU4Yjk1ZmMyZDMyOTI1ZGY1OA==",
  "commit": {
    "author": {
      "name": "Christian Eggers",
      "email": "ceggers@gmx.de",
      "date": "2019-11-21T21:17:29Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-11-25T04:02:19Z"
    },
    "message": "Introduce new section flag: SEC_ELF_OCTETS\n\nAll symbols, sizes and relocations in this section are octets instead of\nbytes.  Required for DWARF debug sections as DWARF information is\norganized in octets, not bytes.\n\nbfd/\n\t* section.c (struct bfd_section): New flag SEC_ELF_OCTETS.\n\t* archures.c (bfd_octets_per_byte): New parameter sec.\n\tIf section is not NULL and SEC_ELF_OCTETS is set, one octet es\n\treturned [ELF targets only].\n\t* bfd.c (bfd_get_section_limit): Provide section parameter to\n\tbfd_octets_per_byte.\n\t* bfd-in2.h: regenerate.\n\t* binary.c (binary_set_section_contents): Move call to\n\tbfd_octets_per_byte into section loop. Provide section parameter\n\tto bfd_octets_per_byte.\n\t* coff-arm.c (coff_arm_reloc): Provide section parameter\n\tto bfd_octets_per_byte.\n\t* coff-i386.c (coff_i386_reloc): likewise.\n\t* coff-mips.c (mips_reflo_reloc): likewise.\n\t* coff-x86_64.c (coff_amd64_reloc): likewise.\n\t* cofflink.c (_bfd_coff_link_input_bfd): likewise.\n\t(_bfd_coff_reloc_link_order): likewise.\n\t* elf.c (_bfd_elf_section_offset): likewise.\n\t(_bfd_elf_make_section_from_shdr): likewise.\n\tSet SEC_ELF_OCTETS for sections with names .gnu.build.attributes,\n\t.debug*, .zdebug* and .note.gnu*.\n\t* elf32-msp430.c (rl78_sym_diff_handler): Provide section parameter\n\tto bfd_octets_per_byte.\n\t* elf32-nds.c (nds32_elf_get_relocated_section_contents): likewise.\n\t* elf32-ppc.c (ppc_elf_addr16_ha_reloc): likewise.\n\t* elf32-pru.c (pru_elf32_do_ldi32_relocate): likewise.\n\t* elf32-s12z.c (opru18_reloc): likewise.\n\t* elf32-sh.c (sh_elf_reloc): likewise.\n\t* elf32-spu.c (spu_elf_rel9): likewise.\n\t* elf32-xtensa.c (bfd_elf_xtensa_reloc): likewise\n\t* elf64-ppc.c (ppc64_elf_brtaken_reloc): likewise.\n\t(ppc64_elf_addr16_ha_reloc): likewise.\n\t(ppc64_elf_toc64_reloc): likewise.\n\t* elflink.c (bfd_elf_final_link): likewise.\n\t(bfd_elf_perform_complex_relocation): likewise.\n\t(elf_fixup_link_order): likewise.\n\t(elf_link_input_bfd): likewise.\n\t(elf_link_sort_relocs): likewise.\n\t(elf_reloc_link_order): likewise.\n\t(resolve_section): likewise.\n\t* linker.c (_bfd_generic_reloc_link_order): likewise.\n\t(bfd_generic_define_common_symbol): likewise.\n\t(default_data_link_order): likewise.\n\t(default_indirect_link_order): likewise.\n\t* srec.c (srec_set_section_contents): likewise.\n\t(srec_write_section): likewise.\n\t* syms.c (_bfd_stab_section_find_nearest_line): likewise.\n\t* reloc.c (_bfd_final_link_relocate): likewise.\n\t(bfd_generic_get_relocated_section_contents): likewise.\n\t(bfd_install_relocation): likewise.\n\tFor section which have SEC_ELF_OCTETS set, multiply output_base\n\tand output_offset with bfd_octets_per_byte.\n\t(bfd_perform_relocation): likewise.\ninclude/\n\t* coff/ti.h (GET_SCNHDR_SIZE, PUT_SCNHDR_SIZE, GET_SCN_SCNLEN),\n\t(PUT_SCN_SCNLEN): Adjust bfd_octets_per_byte calls.\nbinutils/\n\t* objdump.c (disassemble_data): Provide section parameter to\n\tbfd_octets_per_byte.\n\t(dump_section): likewise\n\t(dump_section_header): likewise. Show SEC_ELF_OCTETS flag if set.\ngas/\n\t* as.h: Define SEC_OCTETS as SEC_ELF_OCTETS if OBJ_ELF.\n\t* dwarf2dbg.c: (dwarf2_finish): Set section flag SEC_OCTETS for\n\t.debug_line, .debug_info, .debug_abbrev, .debug_aranges, .debug_str\n\tand .debug_ranges sections.\n\t* write.c (maybe_generate_build_notes): Set section flag\n\tSEC_OCTETS for .gnu.build.attributes section.\n\t* frags.c (frag_now_fix): Don't divide by OCTETS_PER_BYTE if\n\tSEC_OCTETS is set.\n\t* symbols.c (resolve_symbol_value): Likewise.\nld/\n\t* ldexp.c (fold_name): Provide section parameter to\n\tbfd_octets_per_byte.\n\t* ldlang (init_opb): New argument s. Set opb_shift to 0 if\n\tSEC_ELF_OCTETS for the current section is set.\n\t(print_input_section): Pass current section to init_opb.\n\t(print_data_statement,print_reloc_statement,\n\tprint_padding_statement): Likewise.\n\t(lang_check_section_addresses): Call init_opb for each\n\tsection.\n\t(lang_size_sections_1,lang_size_sections_1,\n\tlang_do_assignments_1): Likewise.\n\t(lang_process): Pass NULL to init_opb.",
    "tree": {
      "sha": "a32a2e00b57952023e867de420d17a4fabd0dfdf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a32a2e00b57952023e867de420d17a4fabd0dfdf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/618265039f697eab9e72bb58b95fc2d32925df58",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/618265039f697eab9e72bb58b95fc2d32925df58",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/618265039f697eab9e72bb58b95fc2d32925df58",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/618265039f697eab9e72bb58b95fc2d32925df58/comments",
  "author": null,
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e2b9a97eda81ff2565aa5c783088215fab12fc9b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2b9a97eda81ff2565aa5c783088215fab12fc9b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e2b9a97eda81ff2565aa5c783088215fab12fc9b"
    }
  ],
  "stats": {
    "total": 360,
    "additions": 279,
    "deletions": 81
  },
  "files": [
    {
      "sha": "c310fea4c72517d9f769de40268722ed7db77680",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 56,
      "deletions": 0,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -1,3 +1,59 @@\n+2019-11-25  Christian Eggers  <ceggers@gmx.de>\n+\n+\t* section.c (struct bfd_section): New flag SEC_ELF_OCTETS.\n+\t* archures.c (bfd_octets_per_byte): New parameter sec.\n+\tIf section is not NULL and SEC_ELF_OCTETS is set, one octet es\n+\treturned [ELF targets only].\n+\t* bfd.c (bfd_get_section_limit): Provide section parameter to\n+\tbfd_octets_per_byte.\n+\t* bfd-in2.h: regenerate.\n+\t* binary.c (binary_set_section_contents): Move call to\n+\tbfd_octets_per_byte into section loop. Provide section parameter\n+\tto bfd_octets_per_byte.\n+\t* coff-arm.c (coff_arm_reloc): Provide section parameter\n+\tto bfd_octets_per_byte.\n+\t* coff-i386.c (coff_i386_reloc): likewise.\n+\t* coff-mips.c (mips_reflo_reloc): likewise.\n+\t* coff-x86_64.c (coff_amd64_reloc): likewise.\n+\t* cofflink.c (_bfd_coff_link_input_bfd): likewise.\n+\t(_bfd_coff_reloc_link_order): likewise.\n+\t* elf.c (_bfd_elf_section_offset): likewise.\n+\t(_bfd_elf_make_section_from_shdr): likewise.\n+\tSet SEC_ELF_OCTETS for sections with names .gnu.build.attributes,\n+\t.debug*, .zdebug* and .note.gnu*.\n+\t* elf32-msp430.c (rl78_sym_diff_handler): Provide section parameter\n+\tto bfd_octets_per_byte.\n+\t* elf32-nds.c (nds32_elf_get_relocated_section_contents): likewise.\n+\t* elf32-ppc.c (ppc_elf_addr16_ha_reloc): likewise.\n+\t* elf32-pru.c (pru_elf32_do_ldi32_relocate): likewise.\n+\t* elf32-s12z.c (opru18_reloc): likewise.\n+\t* elf32-sh.c (sh_elf_reloc): likewise.\n+\t* elf32-spu.c (spu_elf_rel9): likewise.\n+\t* elf32-xtensa.c (bfd_elf_xtensa_reloc): likewise\n+\t* elf64-ppc.c (ppc64_elf_brtaken_reloc): likewise.\n+\t(ppc64_elf_addr16_ha_reloc): likewise.\n+\t(ppc64_elf_toc64_reloc): likewise.\n+\t* elflink.c (bfd_elf_final_link): likewise.\n+\t(bfd_elf_perform_complex_relocation): likewise.\n+\t(elf_fixup_link_order): likewise.\n+\t(elf_link_input_bfd): likewise.\n+\t(elf_link_sort_relocs): likewise.\n+\t(elf_reloc_link_order): likewise.\n+\t(resolve_section): likewise.\n+\t* linker.c (_bfd_generic_reloc_link_order): likewise.\n+\t(bfd_generic_define_common_symbol): likewise.\n+\t(default_data_link_order): likewise.\n+\t(default_indirect_link_order): likewise.\n+\t* srec.c (srec_set_section_contents): likewise.\n+\t(srec_write_section): likewise.\n+\t* syms.c (_bfd_stab_section_find_nearest_line): likewise.\n+\t* reloc.c (_bfd_final_link_relocate): likewise.\n+\t(bfd_generic_get_relocated_section_contents): likewise.\n+\t(bfd_install_relocation): likewise.\n+\tFor section which have SEC_ELF_OCTETS set, multiply output_base\n+\tand output_offset with bfd_octets_per_byte.\n+\t(bfd_perform_relocation): likewise.\n+\n 2019-11-21  Alan Modra  <amodra@gmail.com>\n \n \t* elf32-arm.c (elf32_arm_size_stubs): Exclude dynamic library"
    },
    {
      "sha": "1e6611069c8adb8590a836b50487d7939a8aa333",
      "filename": "bfd/archures.c",
      "status": "modified",
      "additions": 12,
      "deletions": 4,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/archures.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/archures.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archures.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -1379,7 +1379,8 @@ FUNCTION\n \tbfd_octets_per_byte\n \n SYNOPSIS\n-\tunsigned int bfd_octets_per_byte (const bfd *abfd);\n+\tunsigned int bfd_octets_per_byte (const bfd *abfd,\n+\t\t\t\t\t  const asection *sec);\n \n DESCRIPTION\n \tReturn the number of octets (8-bit quantities) per target byte\n@@ -1388,10 +1389,17 @@ DESCRIPTION\n */\n \n unsigned int\n-bfd_octets_per_byte (const bfd *abfd)\n+bfd_octets_per_byte (const bfd *abfd, const asection *sec)\n {\n-  return bfd_arch_mach_octets_per_byte (bfd_get_arch (abfd),\n-\t\t\t\t\tbfd_get_mach (abfd));\n+  unsigned int opb = bfd_arch_mach_octets_per_byte (bfd_get_arch (abfd),\n+\t\t\t\t\t\t    bfd_get_mach (abfd));\n+\n+  if (bfd_get_flavour (abfd) == bfd_target_elf_flavour\n+      && sec != NULL\n+      && (sec->flags & SEC_ELF_OCTETS) != 0)\n+    opb = 1;\n+\n+  return opb;\n }\n \n /*"
    },
    {
      "sha": "80ff8e89b58413b15530da7967ea43d0c371f8a6",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -992,6 +992,11 @@ typedef struct bfd_section\n   /* This section contains vliw code.  This is for Toshiba MeP only.  */\n #define SEC_MEP_VLIW               0x20000000\n \n+  /* All symbols, sizes and relocations in this section are octets\n+     instead of bytes.  Required for DWARF debug sections as DWARF\n+     information is organized in octets, not bytes.  */\n+#define SEC_ELF_OCTETS             0x40000000\n+\n   /* Indicate that section has the no read flag set. This happens\n      when memory read flag isn't set. */\n #define SEC_COFF_NOREAD            0x40000000\n@@ -1993,7 +1998,8 @@ const bfd_arch_info_type *bfd_lookup_arch\n const char *bfd_printable_arch_mach\n    (enum bfd_architecture arch, unsigned long machine);\n \n-unsigned int bfd_octets_per_byte (const bfd *abfd);\n+unsigned int bfd_octets_per_byte (const bfd *abfd,\n+    const asection *sec);\n \n unsigned int bfd_arch_mach_octets_per_byte\n    (enum bfd_architecture arch, unsigned long machine);\n@@ -6854,7 +6860,8 @@ bfd_get_section_limit_octets (const bfd *abfd, const asection *sec)\n static inline bfd_size_type\n bfd_get_section_limit (const bfd *abfd, const asection *sec)\n {\n-  return bfd_get_section_limit_octets (abfd, sec) / bfd_octets_per_byte (abfd);\n+  return (bfd_get_section_limit_octets (abfd, sec)\n+          / bfd_octets_per_byte (abfd, NULL));\n }\n \n /* Functions to handle insertion and deletion of a bfd's sections.  These"
    },
    {
      "sha": "c1f3fcadd69f0938ffd1548566e55c5ccf9b580c",
      "filename": "bfd/bfd.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -492,7 +492,8 @@ CODE_FRAGMENT\n .static inline bfd_size_type\n .bfd_get_section_limit (const bfd *abfd, const asection *sec)\n .{\n-.  return bfd_get_section_limit_octets (abfd, sec) / bfd_octets_per_byte (abfd);\n+.  return (bfd_get_section_limit_octets (abfd, sec)\n+.\t   / bfd_octets_per_byte (abfd, NULL));\n .}\n .\n .{* Functions to handle insertion and deletion of a bfd's sections.  These"
    },
    {
      "sha": "06dfdf7b6efd134c3e8618905414cc0c5ff71c68",
      "filename": "bfd/binary.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/binary.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/binary.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/binary.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -230,7 +230,6 @@ binary_set_section_contents (bfd *abfd,\n \n   if (! abfd->output_has_begun)\n     {\n-      unsigned int opb;\n       bfd_boolean found_low;\n       bfd_vma low;\n       asection *s;\n@@ -251,9 +250,10 @@ binary_set_section_contents (bfd *abfd,\n \t    found_low = TRUE;\n \t  }\n \n-      opb = bfd_octets_per_byte (abfd);\n       for (s = abfd->sections; s != NULL; s = s->next)\n \t{\n+\t  unsigned int opb = bfd_octets_per_byte (abfd, s);\n+\n \t  s->filepos = (s->lma - low) * opb;\n \n \t  /* Skip following warning check for sections that will not"
    },
    {
      "sha": "e297df27e833975b84717f2e4ad8fdb127cc0434",
      "filename": "bfd/coff-arm.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/coff-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/coff-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-arm.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -118,7 +118,7 @@ coff_arm_reloc (bfd *abfd,\n \n       if (! bfd_reloc_offset_in_range (howto, abfd, input_section,\n \t\t\t\t       reloc_entry->address\n-\t\t\t\t       * bfd_octets_per_byte (abfd)))\n+\t\t\t\t       * bfd_octets_per_byte (abfd, NULL)))\n \treturn bfd_reloc_outofrange;\n \n       switch (howto->size)"
    },
    {
      "sha": "f28eb8af0cd3cb40604debbaae93420907c0f6dd",
      "filename": "bfd/coff-i386.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/coff-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/coff-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-i386.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -146,7 +146,7 @@ coff_i386_reloc (bfd *abfd,\n \n       if (! bfd_reloc_offset_in_range (howto, abfd, input_section,\n \t\t\t\t       reloc_entry->address\n-\t\t\t\t       * bfd_octets_per_byte (abfd)))\n+\t\t\t\t       * bfd_octets_per_byte (abfd, NULL)))\n \treturn bfd_reloc_outofrange;\n \n       switch (howto->size)"
    },
    {
      "sha": "c9c7fc66ba229261f92c663da0562ebd0072aa7c",
      "filename": "bfd/coff-mips.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/coff-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/coff-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-mips.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -507,7 +507,7 @@ mips_reflo_reloc (bfd *abfd ATTRIBUTE_UNUSED,\n \t  if (! bfd_reloc_offset_in_range (reloc_entry->howto, abfd,\n \t\t\t\t\t   input_section,\n \t\t\t\t\t   reloc_entry->address\n-\t\t\t\t\t   * bfd_octets_per_byte (abfd)))\n+\t\t\t\t\t   * bfd_octets_per_byte (abfd, NULL)))\n \t    return bfd_reloc_outofrange;\n \n \t  /* Do the REFHI relocation.  Note that we actually don't"
    },
    {
      "sha": "94fd7ac3e4f9c2d7e282d157f7a127d982dec809",
      "filename": "bfd/coff-x86_64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/coff-x86_64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/coff-x86_64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-x86_64.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -145,7 +145,7 @@ coff_amd64_reloc (bfd *abfd,\n \n       if (! bfd_reloc_offset_in_range (howto, abfd, input_section,\n \t\t\t\t       reloc_entry->address\n-\t\t\t\t       * bfd_octets_per_byte (abfd)))\n+\t\t\t\t       * bfd_octets_per_byte (abfd, NULL)))\n \treturn bfd_reloc_outofrange;\n \n       switch (howto->size)"
    },
    {
      "sha": "23a8e6b2264c835e8bce75db54c7c527be0279b7",
      "filename": "bfd/cofflink.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/cofflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/cofflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cofflink.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -2541,7 +2541,8 @@ _bfd_coff_link_input_bfd (struct coff_final_link_info *flaginfo, bfd *input_bfd)\n       /* Write out the modified section contents.  */\n       if (secdata == NULL || secdata->stab_info == NULL)\n \t{\n-\t  file_ptr loc = o->output_offset * bfd_octets_per_byte (output_bfd);\n+\t  file_ptr loc = (o->output_offset\n+\t\t\t  * bfd_octets_per_byte (output_bfd, NULL));\n \t  if (! bfd_set_section_contents (output_bfd, o->output_section,\n \t\t\t\t\t  contents, loc, o->size))\n \t    return FALSE;\n@@ -2852,7 +2853,7 @@ _bfd_coff_reloc_link_order (bfd *output_bfd,\n \t     (bfd *) NULL, (asection *) NULL, (bfd_vma) 0);\n \t  break;\n \t}\n-      loc = link_order->offset * bfd_octets_per_byte (output_bfd);\n+      loc = link_order->offset * bfd_octets_per_byte (output_bfd, NULL);\n       ok = bfd_set_section_contents (output_bfd, output_section, buf,\n \t\t\t\t     loc, size);\n       free (buf);"
    },
    {
      "sha": "43ef632fa7959ddba67560b3c6059d7ca0338bce",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -1120,6 +1120,15 @@ _bfd_elf_make_section_from_shdr (bfd *abfd,\n \t    p = NULL, n = 0;\n \t  if (p != NULL && strncmp (name, p, n) == 0)\n \t    flags |= SEC_DEBUGGING;\n+\n+\t  /* DWARF debug sections and ELF notes are organized in octets. */\n+\t  if (strncmp (name, \".debug\", 6) == 0 ||\n+\t      strncmp (name, \".zdebug\", 7) == 0 ||\n+\t      strncmp (name, GNU_BUILD_ATTRS_SECTION_NAME, 21) == 0 ||\n+\t      strncmp (name, \".note.gnu\", 9) == 0)\n+\t    {\n+\t      flags |= SEC_ELF_OCTETS;\n+\t    }\n \t}\n     }\n \n@@ -12054,7 +12063,8 @@ _bfd_elf_section_offset (bfd *abfd,\n \n \t  /* address_size and sec->size are in octets.  Convert\n \t     to bytes before subtracting the original offset.  */\n-\t  offset = (sec->size - address_size) / bfd_octets_per_byte (abfd) - offset;\n+\t  offset = ((sec->size - address_size)\n+\t\t    / bfd_octets_per_byte (abfd, NULL) - offset);\n \t}\n       return offset;\n     }"
    },
    {
      "sha": "7f675fcc34d20b6828c44a7ac46454e122af283f",
      "filename": "bfd/elf32-msp430.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf32-msp430.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf32-msp430.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-msp430.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -36,7 +36,7 @@ rl78_sym_diff_handler (bfd * abfd,\n \t\t       char ** error_message ATTRIBUTE_UNUSED)\n {\n   bfd_size_type octets;\n-  octets = reloc->address * bfd_octets_per_byte (abfd);\n+  octets = reloc->address * bfd_octets_per_byte (abfd, NULL);\n \n   /* Catch the case where bfd_install_relocation would return\n      bfd_reloc_outofrange because the SYM_DIFF reloc is being used in a very"
    },
    {
      "sha": "a47d98e27084d1ae302278b098a9853b82235b1b",
      "filename": "bfd/elf32-nds32.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf32-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf32-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nds32.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -13220,7 +13220,7 @@ nds32_elf_get_relocated_section_contents (bfd *abfd,\n \t\t= HOWTO (0, 0, 0, 0, FALSE, 0, complain_overflow_dont, NULL,\n \t\t\t \"unused\", FALSE, 0, 0, FALSE);\n \n-\t      off = (*parent)->address * bfd_octets_per_byte (input_bfd);\n+\t      off = (*parent)->address * bfd_octets_per_byte (input_bfd, NULL);\n \t      _bfd_clear_contents ((*parent)->howto, input_bfd,\n \t\t\t\t   input_section, data, off);\n \t      (*parent)->sym_ptr_ptr = bfd_abs_section_ptr->symbol_ptr_ptr;"
    },
    {
      "sha": "0e6a3476d28b7c7addaa5cdf1a5f161d28b52746",
      "filename": "bfd/elf32-ppc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf32-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf32-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ppc.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -956,7 +956,7 @@ ppc_elf_addr16_ha_reloc (bfd *abfd,\n \t    + input_section->output_section->vma);\n   value >>= 16;\n \n-  octets = reloc_entry->address * bfd_octets_per_byte (abfd);\n+  octets = reloc_entry->address * bfd_octets_per_byte (abfd, NULL);\n   insn = bfd_get_32 (abfd, (bfd_byte *) data + octets);\n   insn &= ~0x1fffc1;\n   insn |= (value & 0xffc1) | ((value & 0x3e) << 15);"
    },
    {
      "sha": "98b2018621acd5b8f821bb728fb022466c24417e",
      "filename": "bfd/elf32-pru.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf32-pru.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf32-pru.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-pru.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -537,7 +537,7 @@ pru_elf32_do_ldi32_relocate (bfd *abfd, reloc_howto_type *howto,\n \t\t\t     bfd_vma symbol_value, bfd_vma addend)\n {\n   bfd_signed_vma relocation;\n-  bfd_size_type octets = offset * bfd_octets_per_byte (abfd);\n+  bfd_size_type octets = offset * bfd_octets_per_byte (abfd, NULL);\n   bfd_byte *location;\n   unsigned long in1, in2;\n \n@@ -557,7 +557,7 @@ pru_elf32_do_ldi32_relocate (bfd *abfd, reloc_howto_type *howto,\n   BFD_ASSERT (!howto->pc_relative);\n \n   /* A hacked-up version of _bfd_relocate_contents() follows.  */\n-  location = data + offset * bfd_octets_per_byte (abfd);\n+  location = data + offset * bfd_octets_per_byte (abfd, NULL);\n \n   BFD_ASSERT (!howto->pc_relative);\n "
    },
    {
      "sha": "8b3099c26ee3f98846404cc13de70fa5abe60160",
      "filename": "bfd/elf32-s12z.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf32-s12z.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf32-s12z.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-s12z.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -43,7 +43,8 @@ opru18_reloc (bfd *abfd, arelent *reloc_entry, struct bfd_symbol *symbol,\n      is shifted one place to the left of where it would normally be.  See\n      Appendix A.4 of the S12Z reference manual.  */\n \n-  bfd_size_type octets = reloc_entry->address * bfd_octets_per_byte (abfd);\n+  bfd_size_type octets = (reloc_entry->address\n+\t\t\t  * bfd_octets_per_byte (abfd, NULL));\n   bfd_vma result = bfd_get_24 (abfd, (unsigned char *) data + octets);\n   bfd_vma val = bfd_asymbol_value (symbol);\n "
    },
    {
      "sha": "3dc25eefe5937a4433db9c15c81caca7dbf9e90a",
      "filename": "bfd/elf32-sh.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf32-sh.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf32-sh.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-sh.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -254,7 +254,8 @@ sh_elf_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol_in,\n     return bfd_reloc_undefined;\n \n   /* PR 17512: file: 9891ca98.  */\n-  if (addr * bfd_octets_per_byte (abfd) + bfd_get_reloc_size (reloc_entry->howto)\n+  if ((addr * bfd_octets_per_byte (abfd, NULL)\n+       + bfd_get_reloc_size (reloc_entry->howto))\n       > bfd_get_section_limit_octets (abfd, input_section))\n     return bfd_reloc_outofrange;\n "
    },
    {
      "sha": "6f8b32ab58d450a005da2f5f573e8d2b0f6806ad",
      "filename": "bfd/elf32-spu.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf32-spu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf32-spu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-spu.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -212,7 +212,7 @@ spu_elf_rel9 (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n \n   if (reloc_entry->address > bfd_get_section_limit (abfd, input_section))\n     return bfd_reloc_outofrange;\n-  octets = reloc_entry->address * bfd_octets_per_byte (abfd);\n+  octets = reloc_entry->address * bfd_octets_per_byte (abfd, NULL);\n \n   /* Get symbol value.  */\n   val = 0;"
    },
    {
      "sha": "31e9530256d3a33c1e04a18a67d20a90c13b17cd",
      "filename": "bfd/elf32-xtensa.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf32-xtensa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf32-xtensa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-xtensa.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -2103,7 +2103,8 @@ bfd_elf_xtensa_reloc (bfd *abfd,\n {\n   bfd_vma relocation;\n   bfd_reloc_status_type flag;\n-  bfd_size_type octets = reloc_entry->address * bfd_octets_per_byte (abfd);\n+  bfd_size_type octets = (reloc_entry->address\n+\t\t\t  * bfd_octets_per_byte (abfd, NULL));\n   bfd_vma output_base = 0;\n   reloc_howto_type *howto = reloc_entry->howto;\n   asection *reloc_target_output_section;"
    },
    {
      "sha": "5c7f32315fa57cb7fee28f82bfbe8e60fe04d2e9",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -1405,7 +1405,7 @@ ppc64_elf_ha_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n \t    + input_section->output_section->vma);\n   value = (bfd_signed_vma) value >> 16;\n \n-  octets = reloc_entry->address * bfd_octets_per_byte (abfd);\n+  octets = reloc_entry->address * bfd_octets_per_byte (abfd, NULL);\n   insn = bfd_get_32 (abfd, (bfd_byte *) data + octets);\n   insn &= ~0x1fffc1;\n   insn |= (value & 0xffc1) | ((value & 0x3e) << 15);\n@@ -1480,7 +1480,7 @@ ppc64_elf_brtaken_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n     return bfd_elf_generic_reloc (abfd, reloc_entry, symbol, data,\n \t\t\t\t  input_section, output_bfd, error_message);\n \n-  octets = reloc_entry->address * bfd_octets_per_byte (abfd);\n+  octets = reloc_entry->address * bfd_octets_per_byte (abfd, NULL);\n   insn = bfd_get_32 (abfd, (bfd_byte *) data + octets);\n   insn &= ~(0x01 << 21);\n   r_type = reloc_entry->howto->type;\n@@ -1630,7 +1630,7 @@ ppc64_elf_toc64_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol,\n   if (TOCstart == 0)\n     TOCstart = ppc64_elf_set_toc (NULL, input_section->output_section->owner);\n \n-  octets = reloc_entry->address * bfd_octets_per_byte (abfd);\n+  octets = reloc_entry->address * bfd_octets_per_byte (abfd, NULL);\n   bfd_put_64 (abfd, TOCstart + TOC_BASE_OFF, (bfd_byte *) data + octets);\n   return bfd_reloc_ok;\n }"
    },
    {
      "sha": "824669a53649c81a1aa0273705b9710d2cb25a80",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 11,
      "deletions": 8,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -8456,7 +8456,8 @@ resolve_section (const char *name,\n \t{\n \t  if (strncmp (\".end\", name + len, 4) == 0)\n \t    {\n-\t      *result = curr->vma + curr->size / bfd_octets_per_byte (abfd);\n+\t      *result = (curr->vma\n+\t\t\t + curr->size / bfd_octets_per_byte (abfd, NULL));\n \t      return TRUE;\n \t    }\n \n@@ -8778,7 +8779,8 @@ bfd_elf_perform_complex_relocation (bfd *input_bfd,\n     shift = (8 * wordsz) - (start + len);\n \n   x = get_value (wordsz, chunksz, input_bfd,\n-\t\t contents + rel->r_offset * bfd_octets_per_byte (input_bfd));\n+\t\t contents\n+\t\t + rel->r_offset * bfd_octets_per_byte (input_bfd, NULL));\n \n #ifdef DEBUG\n   printf (\"Doing complex reloc: \"\n@@ -8811,7 +8813,7 @@ bfd_elf_perform_complex_relocation (bfd *input_bfd,\n \t  (unsigned long) ((relocation & mask) << shift), (unsigned long) x);\n #endif\n   put_value (wordsz, chunksz, input_bfd, x,\n-\t     contents + rel->r_offset * bfd_octets_per_byte (input_bfd));\n+\t     contents + rel->r_offset * bfd_octets_per_byte (input_bfd, NULL));\n   return r;\n }\n \n@@ -9175,7 +9177,7 @@ elf_link_sort_relocs (bfd *abfd, struct bfd_link_info *info, asection **psec)\n   struct elf_link_sort_rela *sq;\n   const struct elf_backend_data *bed = get_elf_backend_data (abfd);\n   int i2e = bed->s->int_rels_per_ext_rel;\n-  unsigned int opb = bfd_octets_per_byte (abfd);\n+  unsigned int opb = bfd_octets_per_byte (abfd, NULL);\n   void (*swap_in) (bfd *, const bfd_byte *, Elf_Internal_Rela *);\n   void (*swap_out) (bfd *, const Elf_Internal_Rela *, bfd_byte *);\n   struct bfd_link_order *lo;\n@@ -11303,7 +11305,7 @@ elf_link_input_bfd (struct elf_final_link_info *flinfo, bfd *input_bfd)\n \t\tfile_ptr offset = (file_ptr) o->output_offset;\n \t\tbfd_size_type todo = o->size;\n \n-\t\toffset *= bfd_octets_per_byte (output_bfd);\n+\t\toffset *= bfd_octets_per_byte (output_bfd, NULL);\n \n \t\tif ((o->flags & SEC_ELF_REVERSE_COPY))\n \t\t  {\n@@ -11465,7 +11467,7 @@ elf_reloc_link_order (bfd *output_bfd,\n \n       ok = bfd_set_section_contents (output_bfd, output_section, buf,\n \t\t\t\t     link_order->offset\n-\t\t\t\t     * bfd_octets_per_byte (output_bfd),\n+\t\t\t\t     * bfd_octets_per_byte (output_bfd, NULL),\n \t\t\t\t     size);\n       free (buf);\n       if (! ok)\n@@ -11633,7 +11635,7 @@ elf_fixup_link_order (bfd *abfd, asection *o)\n       s = sections[n]->u.indirect.section;\n       mask = ~(bfd_vma) 0 << s->alignment_power;\n       offset = (offset + ~mask) & mask;\n-      s->output_offset = offset / bfd_octets_per_byte (abfd);\n+      s->output_offset = offset / bfd_octets_per_byte (abfd, NULL);\n       sections[n]->offset = offset;\n       offset += sections[n]->size;\n     }\n@@ -12857,7 +12859,8 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n \t      if (! bfd_set_section_contents (abfd, o->output_section,\n \t\t\t\t\t      o->contents,\n \t\t\t\t\t      (file_ptr) o->output_offset\n-\t\t\t\t\t      * bfd_octets_per_byte (abfd),\n+\t\t\t\t\t      * bfd_octets_per_byte (abfd,\n+\t\t\t\t\t\t\t\t     NULL),\n \t\t\t\t\t      o->size))\n \t\tgoto error_return;\n \t    }"
    },
    {
      "sha": "b247cf589b72a6da486dadfc0573ac611c5d95d7",
      "filename": "bfd/linker.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/linker.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/linker.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/linker.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -2402,7 +2402,7 @@ _bfd_generic_reloc_link_order (bfd *abfd,\n \t     NULL, NULL, 0);\n \t  break;\n \t}\n-      loc = link_order->offset * bfd_octets_per_byte (abfd);\n+      loc = link_order->offset * bfd_octets_per_byte (abfd, sec);\n       ok = bfd_set_section_contents (abfd, sec, buf, loc, size);\n       free (buf);\n       if (! ok)\n@@ -2518,7 +2518,7 @@ default_data_link_order (bfd *abfd,\n \t}\n     }\n \n-  loc = link_order->offset * bfd_octets_per_byte (abfd);\n+  loc = link_order->offset * bfd_octets_per_byte (abfd, sec);\n   result = bfd_set_section_contents (abfd, sec, fill, loc, size);\n \n   if (fill != link_order->u.data.contents)\n@@ -2655,7 +2655,8 @@ default_indirect_link_order (bfd *output_bfd,\n     }\n \n   /* Output the section contents.  */\n-  loc = input_section->output_offset * bfd_octets_per_byte (output_bfd);\n+  loc = (input_section->output_offset\n+\t * bfd_octets_per_byte (output_bfd, output_section));\n   if (! bfd_set_section_contents (output_bfd, output_section,\n \t\t\t\t  new_contents, loc, input_section->size))\n     goto error_return;\n@@ -3099,7 +3100,7 @@ bfd_generic_define_common_symbol (bfd *output_bfd,\n \n   /* Increase the size of the section to align the common symbol.\n      The alignment must be a power of two.  */\n-  alignment = bfd_octets_per_byte (output_bfd) << power_of_two;\n+  alignment = bfd_octets_per_byte (output_bfd, section) << power_of_two;\n   BFD_ASSERT (alignment != 0 && (alignment & -alignment) == alignment);\n   section->size += alignment - 1;\n   section->size &= -alignment;"
    },
    {
      "sha": "e01cb5182ec2a1e4d3d5675662d791b85d0fa5fa",
      "filename": "bfd/reloc.c",
      "status": "modified",
      "additions": 25,
      "deletions": 7,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/reloc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/reloc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/reloc.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -722,7 +722,7 @@ bfd_perform_relocation (bfd *abfd,\n     return bfd_reloc_undefined;\n \n   /* Is the address of the relocation really within the section?  */\n-  octets = reloc_entry->address * bfd_octets_per_byte (abfd);\n+  octets = reloc_entry->address * bfd_octets_per_byte (abfd, input_section);\n   if (!bfd_reloc_offset_in_range (howto, abfd, input_section, octets))\n     return bfd_reloc_outofrange;\n \n@@ -744,7 +744,14 @@ bfd_perform_relocation (bfd *abfd,\n   else\n     output_base = reloc_target_output_section->vma;\n \n-  relocation += output_base + symbol->section->output_offset;\n+  /* For sections where relocations are in octets, output_base and\n+     output_offset must also be converted to octets.  */\n+  if (bfd_get_flavour (abfd) == bfd_target_elf_flavour\n+      && (symbol->section->flags & SEC_ELF_OCTETS))\n+    relocation += ((output_base + symbol->section->output_offset)\n+\t\t   * bfd_octets_per_byte (abfd, NULL));\n+  else\n+    relocation += output_base + symbol->section->output_offset;\n \n   /* Add in supplied addend.  */\n   relocation += reloc_entry->addend;\n@@ -1052,7 +1059,7 @@ bfd_install_relocation (bfd *abfd,\n      it will have been checked in `bfd_perform_relocation already'.  */\n \n   /* Is the address of the relocation really within the section?  */\n-  octets = reloc_entry->address * bfd_octets_per_byte (abfd);\n+  octets = reloc_entry->address * bfd_octets_per_byte (abfd, input_section);\n   if (!bfd_reloc_offset_in_range (howto, abfd, input_section, octets))\n     return bfd_reloc_outofrange;\n \n@@ -1073,7 +1080,14 @@ bfd_install_relocation (bfd *abfd,\n   else\n     output_base = reloc_target_output_section->vma;\n \n-  relocation += output_base + symbol->section->output_offset;\n+  /* For sections where relocations are in octets, output_base and\n+     output_offset must also be converted to octets.  */\n+  if (bfd_get_flavour (abfd) == bfd_target_elf_flavour\n+      && (symbol->section->flags & SEC_ELF_OCTETS))\n+    relocation += ((output_base + symbol->section->output_offset)\n+\t\t   * bfd_octets_per_byte (abfd, NULL));\n+  else\n+    relocation += output_base + symbol->section->output_offset;\n \n   /* Add in supplied addend.  */\n   relocation += reloc_entry->addend;\n@@ -1337,7 +1351,8 @@ _bfd_final_link_relocate (reloc_howto_type *howto,\n \t\t\t  bfd_vma addend)\n {\n   bfd_vma relocation;\n-  bfd_size_type octets = address * bfd_octets_per_byte (input_bfd);\n+  bfd_size_type octets = (address\n+\t\t\t  * bfd_octets_per_byte (input_bfd, input_section));\n \n   /* Sanity check the address.  */\n   if (!bfd_reloc_offset_in_range (howto, input_bfd, input_section, octets))\n@@ -1369,7 +1384,9 @@ _bfd_final_link_relocate (reloc_howto_type *howto,\n \n   return _bfd_relocate_contents (howto, input_bfd, relocation,\n \t\t\t\t contents\n-\t\t\t\t + address * bfd_octets_per_byte (input_bfd));\n+\t\t\t\t + address\n+\t\t\t\t * bfd_octets_per_byte (input_bfd,\n+\t\t\t\t\t\t\tinput_section));\n }\n \n /* Relocate a given location using a given value and howto.  */\n@@ -8346,7 +8363,8 @@ bfd_generic_get_relocated_section_contents (bfd *abfd,\n \t\t= HOWTO (0, 0, 0, 0, FALSE, 0, complain_overflow_dont, NULL,\n \t\t\t \"unused\", FALSE, 0, 0, FALSE);\n \n-\t      off = (*parent)->address * bfd_octets_per_byte (input_bfd);\n+\t      off = ((*parent)->address\n+\t\t     * bfd_octets_per_byte (input_bfd, input_section));\n \t      _bfd_clear_contents ((*parent)->howto, input_bfd,\n \t\t\t\t   input_section, data, off);\n \t      (*parent)->sym_ptr_ptr = bfd_abs_section_ptr->symbol_ptr_ptr;"
    },
    {
      "sha": "470792de144e8c47b025d7f995462b335fbbe166",
      "filename": "bfd/section.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/section.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/section.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/section.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -351,6 +351,11 @@ CODE_FRAGMENT\n .  {* This section contains vliw code.  This is for Toshiba MeP only.  *}\n .#define SEC_MEP_VLIW               0x20000000\n .\n+.  {* All symbols, sizes and relocations in this section are octets\n+.     instead of bytes.  Required for DWARF debug sections as DWARF\n+.     information is organized in octets, not bytes.  *}\n+.#define SEC_ELF_OCTETS             0x40000000\n+.\n .  {* Indicate that section has the no read flag set. This happens\n .     when memory read flag isn't set. *}\n .#define SEC_COFF_NOREAD            0x40000000"
    },
    {
      "sha": "449d88c6b0868bcf2f4c48d346f2b495e9a60453",
      "filename": "bfd/srec.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/srec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/srec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/srec.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -885,7 +885,7 @@ srec_set_section_contents (bfd *abfd,\n \t\t\t   file_ptr offset,\n \t\t\t   bfd_size_type bytes_to_do)\n {\n-  int opb = bfd_octets_per_byte (abfd);\n+  int opb = bfd_octets_per_byte (abfd, NULL);\n   tdata_type *tdata = abfd->tdata.srec_data;\n   srec_data_list_type *entry;\n \n@@ -1053,7 +1053,8 @@ srec_write_section (bfd *abfd,\n       if (octets_this_chunk > _bfd_srec_len)\n \toctets_this_chunk = _bfd_srec_len;\n \n-      address = list->where + octets_written / bfd_octets_per_byte (abfd);\n+      address = list->where + (octets_written\n+\t\t\t       / bfd_octets_per_byte (abfd, NULL));\n \n       if (! srec_write_record (abfd,\n \t\t\t       tdata->type,"
    },
    {
      "sha": "ec7d2c8dbafc720e6a8125bc52358e77d39c9611",
      "filename": "bfd/syms.c",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/bfd/syms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/bfd/syms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/syms.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -1090,7 +1090,8 @@ _bfd_stab_section_find_nearest_line (bfd *abfd,\n \t\t  || r->howto->pc_relative\n \t\t  || r->howto->bitpos != 0\n \t\t  || r->howto->dst_mask != 0xffffffff\n-\t\t  || r->address * bfd_octets_per_byte (abfd) + 4 > stabsize)\n+\t\t  || (r->address * bfd_octets_per_byte (abfd, NULL) + 4\n+\t\t      > stabsize))\n \t\t{\n \t\t  _bfd_error_handler\n \t\t    (_(\"unsupported .stab relocation\"));\n@@ -1101,12 +1102,13 @@ _bfd_stab_section_find_nearest_line (bfd *abfd,\n \t\t}\n \n \t      val = bfd_get_32 (abfd, info->stabs\n-\t\t\t\t+ r->address * bfd_octets_per_byte (abfd));\n+\t\t\t\t+ (r->address\n+\t\t\t\t   * bfd_octets_per_byte (abfd, NULL)));\n \t      val &= r->howto->src_mask;\n \t      sym = *r->sym_ptr_ptr;\n \t      val += sym->value + sym->section->vma + r->addend;\n \t      bfd_put_32 (abfd, (bfd_vma) val, info->stabs\n-\t\t\t  + r->address * bfd_octets_per_byte (abfd));\n+\t\t\t  + r->address * bfd_octets_per_byte (abfd, NULL));\n \t    }\n \t}\n "
    },
    {
      "sha": "7c0d0feadcabf0e7f073202a2b801dd388b1c23c",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -1,3 +1,10 @@\n+2019-11-25  Christian Eggers  <ceggers@gmx.de>\n+\n+\t* objdump.c (disassemble_data): Provide section parameter to\n+\tbfd_octets_per_byte.\n+\t(dump_section): likewise\n+\t(dump_section_header): likewise. Show SEC_ELF_OCTETS flag if set.\n+\n 2019-11-21  Alan Modra  <amodra@gmail.com>\n \n \tPR 273"
    },
    {
      "sha": "115f1fc000421d723230747990bff3597ea8b0dd",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -532,7 +532,7 @@ static void\n dump_section_header (bfd *abfd, asection *section, void *data)\n {\n   char *comma = \"\";\n-  unsigned int opb = bfd_octets_per_byte (abfd);\n+  unsigned int opb = bfd_octets_per_byte (abfd, section);\n   int longest_section_name = *((int *) data);\n \n   /* Ignore linker created section.  See elfNN_ia64_object_p in\n@@ -584,7 +584,10 @@ dump_section_header (bfd *abfd, asection *section, void *data)\n       PF (SEC_COFF_NOREAD, \"NOREAD\");\n     }\n   else if (bfd_get_flavour (abfd) == bfd_target_elf_flavour)\n-    PF (SEC_ELF_PURECODE, \"PURECODE\");\n+    {\n+      PF (SEC_ELF_OCTETS, \"OCTETS\");\n+      PF (SEC_ELF_PURECODE, \"PURECODE\");\n+    }\n   PF (SEC_THREAD_LOCAL, \"THREAD_LOCAL\");\n   PF (SEC_GROUP, \"GROUP\");\n   if (bfd_get_arch (abfd) == bfd_arch_mep)\n@@ -2682,7 +2685,7 @@ disassemble_data (bfd *abfd)\n   disasm_info.arch = bfd_get_arch (abfd);\n   disasm_info.mach = bfd_get_mach (abfd);\n   disasm_info.disassembler_options = disassembler_options;\n-  disasm_info.octets_per_byte = bfd_octets_per_byte (abfd);\n+  disasm_info.octets_per_byte = bfd_octets_per_byte (abfd, NULL);\n   disasm_info.skip_zeroes = DEFAULT_SKIP_ZEROES;\n   disasm_info.skip_zeroes_at_end = DEFAULT_SKIP_ZEROES_AT_END;\n   disasm_info.disassembler_needs_relocs = FALSE;\n@@ -3459,7 +3462,7 @@ dump_section (bfd *abfd, asection *section, void *dummy ATTRIBUTE_UNUSED)\n   bfd_vma addr_offset;\n   bfd_vma start_offset;\n   bfd_vma stop_offset;\n-  unsigned int opb = bfd_octets_per_byte (abfd);\n+  unsigned int opb = bfd_octets_per_byte (abfd, section);\n   /* Bytes per line.  */\n   const int onaline = 16;\n   char buf[64];"
    },
    {
      "sha": "b3affbbaa170fd73c5cb1d8823b244a5998f25f5",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -1,3 +1,15 @@\n+2019-11-25  Christian Eggers  <ceggers@gmx.de>\n+\n+\t* as.h: Define SEC_OCTETS as SEC_ELF_OCTETS if OBJ_ELF.\n+\t* dwarf2dbg.c: (dwarf2_finish): Set section flag SEC_OCTETS for\n+\t.debug_line, .debug_info, .debug_abbrev, .debug_aranges, .debug_str\n+\tand .debug_ranges sections.\n+\t* write.c (maybe_generate_build_notes): Set section flag\n+\tSEC_OCTETS for .gnu.build.attributes section.\n+\t* frags.c (frag_now_fix): Don't divide by OCTETS_PER_BYTE if\n+\tSEC_OCTETS is set.\n+\t* symbols.c (resolve_symbol_value): Likewise.\n+\n 2019-11-25  Christian Eggers  <ceggers@gmx.de>\n \n \t* dwarf2dbg.c (out_set_addr): Revert 2019-03-13 change."
    },
    {
      "sha": "3d492d4eb1f6f03940b7b2097bcc4dd59a2293e5",
      "filename": "gas/as.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/gas/as.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/gas/as.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/as.h?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -649,4 +649,11 @@ COMMON int flag_sectname_subst;\n  #error \"Octets per byte conflicts with its power-of-two definition!\"\n #endif\n \n+#if defined OBJ_ELF || defined OBJ_MAYBE_ELF\n+/* On ELF platforms, mark debug sections with SEC_ELF_OCTETS */\n+#define SEC_OCTETS (IS_ELF ? SEC_ELF_OCTETS : 0)\n+#else\n+#define SEC_OCTETS 0\n+#endif\n+\n #endif /* GAS */"
    },
    {
      "sha": "001e2a16ad190043a2f7b08bedc4608cf36d1313",
      "filename": "gas/dwarf2dbg.c",
      "status": "modified",
      "additions": 12,
      "deletions": 7,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/gas/dwarf2dbg.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/gas/dwarf2dbg.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/dwarf2dbg.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -2215,7 +2215,7 @@ dwarf2_finish (void)\n \n   /* Create and switch to the line number section.  */\n   line_seg = subseg_new (\".debug_line\", 0);\n-  bfd_set_section_flags (line_seg, SEC_READONLY | SEC_DEBUGGING);\n+  bfd_set_section_flags (line_seg, SEC_READONLY | SEC_DEBUGGING | SEC_OCTETS);\n \n   /* For each subsection, chain the debug entries together.  */\n   for (s = all_segs; s; s = s->next)\n@@ -2261,11 +2261,15 @@ dwarf2_finish (void)\n       aranges_seg = subseg_new (\".debug_aranges\", 0);\n       str_seg = subseg_new (\".debug_str\", 0);\n \n-      bfd_set_section_flags (info_seg, SEC_READONLY | SEC_DEBUGGING);\n-      bfd_set_section_flags (abbrev_seg, SEC_READONLY | SEC_DEBUGGING);\n-      bfd_set_section_flags (aranges_seg, SEC_READONLY | SEC_DEBUGGING);\n-      bfd_set_section_flags (str_seg, (SEC_READONLY | SEC_DEBUGGING\n-\t\t\t\t       | SEC_MERGE | SEC_STRINGS));\n+      bfd_set_section_flags (info_seg,\n+\t\t\t      SEC_READONLY | SEC_DEBUGGING | SEC_OCTETS);\n+      bfd_set_section_flags (abbrev_seg,\n+\t\t\t      SEC_READONLY | SEC_DEBUGGING | SEC_OCTETS);\n+      bfd_set_section_flags (aranges_seg,\n+\t\t\t      SEC_READONLY | SEC_DEBUGGING | SEC_OCTETS);\n+      bfd_set_section_flags (str_seg,\n+\t\t\t      SEC_READONLY | SEC_DEBUGGING | SEC_OCTETS\n+\t\t\t\t       | SEC_MERGE | SEC_STRINGS);\n       str_seg->entsize = 1;\n \n       record_alignment (aranges_seg, ffs (2 * sizeof_address) - 1);\n@@ -2275,7 +2279,8 @@ dwarf2_finish (void)\n       else\n \t{\n \t  ranges_seg = subseg_new (\".debug_ranges\", 0);\n-\t  bfd_set_section_flags (ranges_seg, SEC_READONLY | SEC_DEBUGGING);\n+\t  bfd_set_section_flags (ranges_seg,\n+\t\t\t\t SEC_READONLY | SEC_DEBUGGING | SEC_OCTETS);\n \t  record_alignment (ranges_seg, ffs (2 * sizeof_address) - 1);\n \t  out_debug_ranges (ranges_seg);\n \t}"
    },
    {
      "sha": "f35cc80a386ed0dd6e04af32e9ba7cb520ecb437",
      "filename": "gas/frags.c",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/gas/frags.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/gas/frags.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/frags.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -395,7 +395,12 @@ frag_now_fix_octets (void)\n addressT\n frag_now_fix (void)\n {\n-  return frag_now_fix_octets () / OCTETS_PER_BYTE;\n+  /* Symbols whose section has SEC_ELF_OCTETS set,\n+     resolve to octets instead of target bytes.  */\n+  if (now_seg->flags & SEC_OCTETS)\n+    return frag_now_fix_octets ();\n+  else\n+    return frag_now_fix_octets () / OCTETS_PER_BYTE;\n }\n \n void"
    },
    {
      "sha": "857a3e6c5cc44eb921ab3f63937d54e4420a06c7",
      "filename": "gas/symbols.c",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/gas/symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/gas/symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/symbols.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -1217,7 +1217,13 @@ resolve_symbol_value (symbolS *symp)\n       if (local_symbol_resolved_p (locsym))\n \treturn final_val;\n \n-      final_val += local_symbol_get_frag (locsym)->fr_address / OCTETS_PER_BYTE;\n+      /* Symbols whose section has SEC_ELF_OCTETS set,\n+\t resolve to octets instead of target bytes. */\n+      if (locsym->lsy_section->flags & SEC_OCTETS)\n+\tfinal_val += local_symbol_get_frag (locsym)->fr_address;\n+      else\n+\tfinal_val += (local_symbol_get_frag (locsym)->fr_address\n+\t\t      / OCTETS_PER_BYTE);\n \n       if (finalize_syms)\n \t{\n@@ -1330,7 +1336,12 @@ resolve_symbol_value (symbolS *symp)\n \t  /* Fall through.  */\n \n \tcase O_constant:\n-\t  final_val += symp->sy_frag->fr_address / OCTETS_PER_BYTE;\n+\t  /* Symbols whose section has SEC_ELF_OCTETS set,\n+\t     resolve to octets instead of target bytes. */\n+\t  if (symp->bsym->section->flags & SEC_OCTETS)\n+\t    final_val += symp->sy_frag->fr_address;\n+\t  else\n+\t    final_val += symp->sy_frag->fr_address / OCTETS_PER_BYTE;\n \t  if (final_seg == expr_section)\n \t    final_seg = absolute_section;\n \t  /* Fall through.  */"
    },
    {
      "sha": "d5da41850cc428bb4f716f079de339b7dbb1f8ff",
      "filename": "gas/write.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/gas/write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/gas/write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/write.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -1960,7 +1960,8 @@ maybe_generate_build_notes (void)\n   /* Create a GNU Build Attribute section.  */\n   sec = subseg_new (GNU_BUILD_ATTRS_SECTION_NAME, FALSE);\n   elf_section_type (sec) = SHT_NOTE;\n-  bfd_set_section_flags (sec, SEC_READONLY | SEC_HAS_CONTENTS | SEC_DATA);\n+  bfd_set_section_flags (sec, (SEC_READONLY | SEC_HAS_CONTENTS | SEC_DATA\n+\t\t\t       | SEC_OCTETS));\n   bfd_set_section_alignment (sec, 2);\n \n   /* Work out the size of the notes that we will create,"
    },
    {
      "sha": "47bb86cf712809dade16d6558c6095f4783929d7",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 3,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -1,3 +1,8 @@\n+2019-11-25  Alan Modra  <amodra@gmail.com>\n+\n+\t* coff/ti.h (GET_SCNHDR_SIZE, PUT_SCNHDR_SIZE, GET_SCN_SCNLEN),\n+\t(PUT_SCN_SCNLEN): Adjust bfd_octets_per_byte calls.\n+\n 2019-11-22  Mihail Ionescu  <mihail.ionescu@arm.com>\n \n \t* opcode/arm.h (ARM_EXT2_CRC): New extension feature\n@@ -26,15 +31,15 @@\n \tinstructions that do not require special handling.\n \n 2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n-2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\t    Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* opcode/arm.h (ARM_EXT2_V8_6A, ARM_AEXT2_V8_6A,\n \tARM_ARCH_V8_6A): New.\n \t* opcode/arm.h (ARM_EXT2_BF16): New feature macro.\n \t(ARM_AEXT2_V8_6A): Include above macro in definition.\n \n 2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n-2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\t    Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* opcode/aarch64.h (AARCH64_FEATURE_BFLOAT16): New feature macros.\n \t(AARCH64_ARCH_V8_6): Include BFloat16 feature macros.\n@@ -45,7 +50,7 @@\n \tinstructions to support the movprfx constraint.\n \n 2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n-2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\t    Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* opcode/aarch64.h (AARCH64_FEATURE_V8_6): New.\n \t(AARCH64_ARCH_V8_6): New."
    },
    {
      "sha": "17bac8c0fc5d3a19272fc7f51fdaf5eb68e093e3",
      "filename": "include/coff/ti.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/include/coff/ti.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/include/coff/ti.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/coff/ti.h?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -313,9 +313,9 @@ struct external_scnhdr {\n /* TI COFF stores section size as number of bytes (address units, not octets),\n    so adjust to be number of octets, which is what BFD expects */ \n #define GET_SCNHDR_SIZE(ABFD, SZP) \\\n-  (H_GET_32 (ABFD, SZP) * bfd_octets_per_byte (ABFD))\n+  (H_GET_32 (ABFD, SZP) * bfd_octets_per_byte (ABFD, NULL))\n #define PUT_SCNHDR_SIZE(ABFD, SZ, SZP) \\\n-  H_PUT_32 (ABFD, (SZ) / bfd_octets_per_byte (ABFD), SZP)\n+  H_PUT_32 (ABFD, (SZ) / bfd_octets_per_byte (ABFD, NULL), SZP)\n \n #define COFF_ADJUST_SCNHDR_IN_POST(ABFD, EXT, INT) \\\n   do\t\t\t\t\t\t\t\t\t\\\n@@ -471,9 +471,9 @@ union external_auxent {\n \n /* section lengths are in target bytes (not host bytes) */\n #define GET_SCN_SCNLEN(ABFD, EXT) \\\n-  (H_GET_32 (ABFD, (EXT)->x_scn.x_scnlen) * bfd_octets_per_byte (ABFD))\n+  (H_GET_32 (ABFD, (EXT)->x_scn.x_scnlen) * bfd_octets_per_byte (ABFD, NULL))\n #define PUT_SCN_SCNLEN(ABFD, INT, EXT) \\\n-  H_PUT_32 (ABFD, (INT) / bfd_octets_per_byte (ABFD), (EXT)->x_scn.x_scnlen)\n+  H_PUT_32 (ABFD, (INT) / bfd_octets_per_byte (ABFD, NULL), (EXT)->x_scn.x_scnlen)\n \n /* lnsz size is in bits in COFF file, in bytes in BFD */\n #define GET_LNSZ_SIZE(abfd, ext) \\"
    },
    {
      "sha": "e969c0f1f739d6cdb9b2a17ab98b21330ceca205",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -1,3 +1,18 @@\n+2019-11-25  Christian Eggers  <ceggers@gmx.de>\n+\n+\t* ldexp.c (fold_name): Provide section parameter to\n+\tbfd_octets_per_byte.\n+\t* ldlang (init_opb): New argument s. Set opb_shift to 0 if\n+\tSEC_ELF_OCTETS for the current section is set.\n+\t(print_input_section): Pass current section to init_opb.\n+\t(print_data_statement,print_reloc_statement,\n+\tprint_padding_statement): Likewise.\n+\t(lang_check_section_addresses): Call init_opb for each\n+\tsection.\n+\t(lang_size_sections_1,lang_size_sections_1,\n+\tlang_do_assignments_1): Likewise.\n+\t(lang_process): Pass NULL to init_opb.\n+\n 2019-11-22  Nick Clifton  <nickc@redhat.com>\n \n \t* ld.texi (Output Section Discarding): Add note indicating that"
    },
    {
      "sha": "8327a3f2bc14b9ceaa75d5d40a6a19a26aac8be6",
      "filename": "ld/ldexp.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/ld/ldexp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/ld/ldexp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldexp.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -852,7 +852,7 @@ fold_name (etree_type *tree)\n \n \t      if (tree->type.node_code == SIZEOF)\n \t\tval = (os->bfd_section->size\n-\t\t       / bfd_octets_per_byte (link_info.output_bfd));\n+\t\t       / bfd_octets_per_byte (link_info.output_bfd, NULL));\n \t      else\n \t\tval = (bfd_vma)1 << os->bfd_section->alignment_power;\n "
    },
    {
      "sha": "3bcab7a876e3036cf69c14daeeed0a0c7ef06845",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 17,
      "deletions": 6,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/618265039f697eab9e72bb58b95fc2d32925df58/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/618265039f697eab9e72bb58b95fc2d32925df58/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=618265039f697eab9e72bb58b95fc2d32925df58",
      "patch": "@@ -3440,10 +3440,17 @@ ldlang_open_output (lang_statement_union_type *statement)\n }\n \n static void\n-init_opb (void)\n+init_opb (asection *s)\n {\n   unsigned x = bfd_arch_mach_octets_per_byte (ldfile_output_architecture,\n \t\t\t\t\t      ldfile_output_machine);\n+  if (s != NULL)\n+    {\n+      if (bfd_get_flavour (link_info.output_bfd) == bfd_target_elf_flavour\n+\t  && (s->flags & SEC_ELF_OCTETS))\n+\tx = 1;\n+    }\n+\n   opb_shift = 0;\n   if (x > 1)\n     while ((x & 1) == 0)\n@@ -4626,7 +4633,7 @@ print_input_section (asection *i, bfd_boolean is_discarded)\n   int len;\n   bfd_vma addr;\n \n-  init_opb ();\n+  init_opb (i);\n \n   print_space ();\n   minfo (\"%s\", i->name);\n@@ -4707,7 +4714,7 @@ print_data_statement (lang_data_statement_type *data)\n   bfd_size_type size;\n   const char *name;\n \n-  init_opb ();\n+  init_opb (data->output_section);\n   for (i = 0; i < SECTION_NAME_MAP_LENGTH; i++)\n     print_space ();\n \n@@ -4776,7 +4783,7 @@ print_reloc_statement (lang_reloc_statement_type *reloc)\n   bfd_vma addr;\n   bfd_size_type size;\n \n-  init_opb ();\n+  init_opb (reloc->output_section);\n   for (i = 0; i < SECTION_NAME_MAP_LENGTH; i++)\n     print_space ();\n \n@@ -4806,7 +4813,7 @@ print_padding_statement (lang_padding_statement_type *s)\n   int len;\n   bfd_vma addr;\n \n-  init_opb ();\n+  init_opb (s->output_section);\n   minfo (\" *fill*\");\n \n   len = sizeof \" *fill*\" - 1;\n@@ -5276,6 +5283,7 @@ lang_check_section_addresses (void)\n   for (p = NULL, i = 0; i < count; i++)\n     {\n       s = sections[i].sec;\n+      init_opb (s);\n       if ((s->flags & SEC_LOAD) != 0)\n \t{\n \t  s_start = s->lma;\n@@ -5326,6 +5334,7 @@ lang_check_section_addresses (void)\n       for (p = NULL, i = 0; i < count; i++)\n \t{\n \t  s = sections[i].sec;\n+\t  init_opb (s);\n \t  s_start = s->vma;\n \t  s_end = s_start + TO_ADDR (s->size) - 1;\n \n@@ -5450,6 +5459,7 @@ lang_size_sections_1\n \t    int section_alignment = 0;\n \n \t    os = &s->output_section_statement;\n+\t    init_opb (os->bfd_section);\n \t    if (os->constraint == -1)\n \t      break;\n \n@@ -6191,6 +6201,7 @@ lang_do_assignments_1 (lang_statement_union_type *s,\n \n \t    os = &(s->output_section_statement);\n \t    os->after_end = *found_end;\n+\t    init_opb (os->bfd_section);\n \t    if (os->bfd_section != NULL && !os->ignored)\n \t      {\n \t\tif ((os->bfd_section->flags & SEC_ALLOC) != 0)\n@@ -7622,7 +7633,7 @@ lang_process (void)\n \n   /* Open the output file.  */\n   lang_for_each_statement (ldlang_open_output);\n-  init_opb ();\n+  init_opb (NULL);\n \n   ldemul_create_output_section_statements ();\n "
    }
  ]
}