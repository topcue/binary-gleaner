{
  "sha": "13084383e8955c2ff7017ac8839301688a9ee34d",
  "node_id": "C_kwDOANOeidoAKDEzMDg0MzgzZTg5NTVjMmZmNzAxN2FjODgzOTMwMTY4OGE5ZWUzNGQ",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-22T15:56:33Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-09-30T19:21:48Z"
    },
    "message": "gdbsupport: make gdb_open_cloexec return scoped_fd\n\nMake gdb_open_cloexec return a scoped_fd, to encourage using automatic\nmanagement of the file descriptor closing.  Except in the most trivial\ncases, I changed the callers to just release the fd, which retains their\nexisting behavior.  That will allow the transition to using scoped_fd\nmore to go gradually, one caller at a time.\n\nChange-Id: Ife022b403f96e71d5ebb4f1056ef6251b30fe554",
    "tree": {
      "sha": "ffc4d5429e7315de53715fe7fce7bd26abd958b8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ffc4d5429e7315de53715fe7fce7bd26abd958b8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/13084383e8955c2ff7017ac8839301688a9ee34d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13084383e8955c2ff7017ac8839301688a9ee34d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/13084383e8955c2ff7017ac8839301688a9ee34d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/13084383e8955c2ff7017ac8839301688a9ee34d/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e6e51c9c4b402cd46595790b26087ebf2fead8c1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e6e51c9c4b402cd46595790b26087ebf2fead8c1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e6e51c9c4b402cd46595790b26087ebf2fead8c1"
    }
  ],
  "stats": {
    "total": 91,
    "additions": 41,
    "deletions": 50
  },
  "files": [
    {
      "sha": "120e5c7cc21ba4bebf4cc2cad85591d4f6b35a99",
      "filename": "gdb/auxv.c",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/auxv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/auxv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auxv.c?ref=13084383e8955c2ff7017ac8839301688a9ee34d",
      "patch": "@@ -46,23 +46,21 @@ procfs_xfer_auxv (gdb_byte *readbuf,\n \t\t  ULONGEST len,\n \t\t  ULONGEST *xfered_len)\n {\n-  int fd;\n   ssize_t l;\n \n   std::string pathname = string_printf (\"/proc/%d/auxv\", inferior_ptid.pid ());\n-  fd = gdb_open_cloexec (pathname, writebuf != NULL ? O_WRONLY : O_RDONLY, 0);\n-  if (fd < 0)\n+  scoped_fd fd\n+    = gdb_open_cloexec (pathname, writebuf != NULL ? O_WRONLY : O_RDONLY, 0);\n+  if (fd.get () < 0)\n     return TARGET_XFER_E_IO;\n \n   if (offset != (ULONGEST) 0\n-      && lseek (fd, (off_t) offset, SEEK_SET) != (off_t) offset)\n+      && lseek (fd.get (), (off_t) offset, SEEK_SET) != (off_t) offset)\n     l = -1;\n   else if (readbuf != NULL)\n-    l = read (fd, readbuf, (size_t) len);\n+    l = read (fd.get (), readbuf, (size_t) len);\n   else\n-    l = write (fd, writebuf, (size_t) len);\n-\n-  (void) close (fd);\n+    l = write (fd.get (), writebuf, (size_t) len);\n \n   if (l < 0)\n     return TARGET_XFER_E_IO;"
    },
    {
      "sha": "5f48d96aa12de0d16f199e65b76b5af3bc4d441b",
      "filename": "gdb/corelow.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/corelow.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/corelow.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/corelow.c?ref=13084383e8955c2ff7017ac8839301688a9ee34d",
      "patch": "@@ -437,7 +437,7 @@ core_target_open (const char *arg, int from_tty)\n     flags |= O_RDWR;\n   else\n     flags |= O_RDONLY;\n-  scratch_chan = gdb_open_cloexec (filename.get (), flags, 0);\n+  scratch_chan = gdb_open_cloexec (filename.get (), flags, 0).release ();\n   if (scratch_chan < 0)\n     perror_with_name (filename.get ());\n "
    },
    {
      "sha": "525f59ae2ceae58ccb844e9ee9d118ad3c53737c",
      "filename": "gdb/darwin-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/darwin-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/darwin-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/darwin-nat.c?ref=13084383e8955c2ff7017ac8839301688a9ee34d",
      "patch": "@@ -1822,7 +1822,7 @@ may_have_sip ()\n static void\n copy_shell_to_cache (const char *shell, const std::string &new_name)\n {\n-  scoped_fd from_fd (gdb_open_cloexec (shell, O_RDONLY, 0));\n+  scoped_fd from_fd = gdb_open_cloexec (shell, O_RDONLY, 0);\n   if (from_fd.get () < 0)\n     error (_(\"Could not open shell (%s) for reading: %s\"),\n \t   shell, safe_strerror (errno));"
    },
    {
      "sha": "c6ff409d49c6bc4352a1d140022ad8e9a4352b2e",
      "filename": "gdb/gdb_bfd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/gdb_bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/gdb_bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdb_bfd.c?ref=13084383e8955c2ff7017ac8839301688a9ee34d",
      "patch": "@@ -541,7 +541,7 @@ gdb_bfd_open (const char *name, const char *target, int fd,\n \n   if (fd == -1)\n     {\n-      fd = gdb_open_cloexec (name, O_RDONLY | O_BINARY, 0);\n+      fd = gdb_open_cloexec (name, O_RDONLY | O_BINARY, 0).release ();\n       if (fd == -1)\n \t{\n \t  bfd_set_error (bfd_error_system_call);"
    },
    {
      "sha": "5084f448c1e0369f8980f0bdc4f6b70e6ff3c54b",
      "filename": "gdb/inf-child.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/inf-child.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/inf-child.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inf-child.c?ref=13084383e8955c2ff7017ac8839301688a9ee34d",
      "patch": "@@ -261,7 +261,7 @@ inf_child_target::fileio_open (struct inferior *inf, const char *filename,\n       return -1;\n     }\n \n-  fd = gdb_open_cloexec (filename, nat_flags, nat_mode);\n+  fd = gdb_open_cloexec (filename, nat_flags, nat_mode).release ();\n   if (fd == -1)\n     *target_errno = host_to_fileio_error (errno);\n "
    },
    {
      "sha": "6f50ea39142450c044f182ac21b3cf1ed0eb25cc",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=13084383e8955c2ff7017ac8839301688a9ee34d",
      "patch": "@@ -3832,7 +3832,7 @@ linux_proc_xfer_memory_partial_pid (ptid_t ptid,\n \t\t \"/proc/%d/task/%ld/mem\", ptid.pid (), ptid.lwp ());\n \n       last_proc_mem_file.fd\n-\t= gdb_open_cloexec (filename, O_RDWR | O_LARGEFILE, 0);\n+\t= gdb_open_cloexec (filename, O_RDWR | O_LARGEFILE, 0).release ();\n \n       if (last_proc_mem_file.fd == -1)\n \t{"
    },
    {
      "sha": "c5d5eb4ea8ce799b162e4d938f4d79632ef70b7e",
      "filename": "gdb/nat/linux-namespaces.c",
      "status": "modified",
      "additions": 4,
      "deletions": 9,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/nat/linux-namespaces.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/nat/linux-namespaces.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/linux-namespaces.c?ref=13084383e8955c2ff7017ac8839301688a9ee34d",
      "patch": "@@ -520,13 +520,8 @@ static ssize_t\n mnsh_handle_open (int sock, const char *filename,\n \t\t  int flags, mode_t mode)\n {\n-  int fd = gdb_open_cloexec (filename, flags, mode);\n-  ssize_t result = mnsh_return_fd (sock, fd, errno);\n-\n-  if (fd >= 0)\n-    close (fd);\n-\n-  return result;\n+  scoped_fd fd = gdb_open_cloexec (filename, flags, mode);\n+  return mnsh_return_fd (sock, fd.get (), errno);\n }\n \n /* Handle a MNSH_REQ_UNLINK message.  Must be async-signal-safe.  */\n@@ -901,7 +896,7 @@ linux_mntns_access_fs (pid_t pid)\n   if (ns == NULL)\n     return MNSH_FS_DIRECT;\n \n-  fd = gdb_open_cloexec (linux_ns_filename (ns, pid), O_RDONLY, 0);\n+  fd = gdb_open_cloexec (linux_ns_filename (ns, pid), O_RDONLY, 0).release ();\n   if (fd < 0)\n     return MNSH_FS_ERROR;\n \n@@ -968,7 +963,7 @@ linux_mntns_open_cloexec (pid_t pid, const char *filename,\n     return -1;\n \n   if (access == MNSH_FS_DIRECT)\n-    return gdb_open_cloexec (filename, flags, mode);\n+    return gdb_open_cloexec (filename, flags, mode).release ();\n \n   gdb_assert (access == MNSH_FS_HELPER);\n "
    },
    {
      "sha": "20ec0f215aae48c7930d11a08983661f578cdda2",
      "filename": "gdb/remote-fileio.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/remote-fileio.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/remote-fileio.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote-fileio.c?ref=13084383e8955c2ff7017ac8839301688a9ee34d",
      "patch": "@@ -425,7 +425,7 @@ remote_fileio_func_open (remote_target *remote, char *buf)\n \t}\n     }\n \n-  fd = gdb_open_cloexec (pathname, flags, mode);\n+  fd = gdb_open_cloexec (pathname, flags, mode).release ();\n   if (fd < 0)\n     {\n       remote_fileio_return_errno (remote, -1);"
    },
    {
      "sha": "597032afe8967b7ccc311e75029cd66b4c7789bf",
      "filename": "gdb/ser-unix.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/ser-unix.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/ser-unix.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ser-unix.c?ref=13084383e8955c2ff7017ac8839301688a9ee34d",
      "patch": "@@ -75,7 +75,7 @@ static int hardwire_setstopbits (struct serial *, int);\n static int\n hardwire_open (struct serial *scb, const char *name)\n {\n-  scb->fd = gdb_open_cloexec (name, O_RDWR, 0);\n+  scb->fd = gdb_open_cloexec (name, O_RDWR, 0).release ();\n   if (scb->fd < 0)\n     return -1;\n "
    },
    {
      "sha": "dba3d843025ed0f7bfe75ba02e715a90c6fe6718",
      "filename": "gdb/solib.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/solib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/solib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.c?ref=13084383e8955c2ff7017ac8839301688a9ee34d",
      "patch": "@@ -257,7 +257,8 @@ solib_find_1 (const char *in_pathname, int *fd, bool is_solib)\n     }\n \n   /* Now see if we can open it.  */\n-  found_file = gdb_open_cloexec (temp_pathname.get (), O_RDONLY | O_BINARY, 0);\n+  found_file = gdb_open_cloexec (temp_pathname.get (),\n+\t\t\t\t O_RDONLY | O_BINARY, 0).release ();\n \n   /* If the search in gdb_sysroot failed, and the path name has a\n      drive spec (e.g, c:/foo), try stripping ':' from the drive spec,\n@@ -278,7 +279,7 @@ solib_find_1 (const char *in_pathname, int *fd, bool is_solib)\n \t\t\t\t   in_pathname + 2, (char *) NULL));\n \n       found_file = gdb_open_cloexec (temp_pathname.get (),\n-\t\t\t\t     O_RDONLY | O_BINARY, 0);\n+\t\t\t\t     O_RDONLY | O_BINARY, 0).release ();\n       if (found_file < 0)\n \t{\n \t  /* If the search in gdb_sysroot still failed, try fully\n@@ -292,7 +293,7 @@ solib_find_1 (const char *in_pathname, int *fd, bool is_solib)\n \t\t\t\t       in_pathname + 2, (char *) NULL));\n \n \t  found_file = gdb_open_cloexec (temp_pathname.get (),\n-\t\t\t\t\t O_RDONLY | O_BINARY, 0);\n+\t\t\t\t\t O_RDONLY | O_BINARY, 0).release ();\n \t}\n     }\n "
    },
    {
      "sha": "3559eeac283e44d6d2f62e2a982dbb7503e69654",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=13084383e8955c2ff7017ac8839301688a9ee34d",
      "patch": "@@ -832,7 +832,7 @@ openp (const char *path, openp_flags opts, const char *string,\n \t{\n \t  filename = (char *) alloca (strlen (string) + 1);\n \t  strcpy (filename, string);\n-\t  fd = gdb_open_cloexec (filename, mode, 0);\n+\t  fd = gdb_open_cloexec (filename, mode, 0).release ();\n \t  if (fd >= 0)\n \t    goto done;\n \t  last_errno = errno;\n@@ -924,7 +924,7 @@ openp (const char *path, openp_flags opts, const char *string,\n \n       if (is_regular_file (filename, &reg_file_errno))\n \t{\n-\t  fd = gdb_open_cloexec (filename, mode, 0);\n+\t  fd = gdb_open_cloexec (filename, mode, 0).release ();\n \t  if (fd >= 0)\n \t    break;\n \t  last_errno = errno;\n@@ -1060,7 +1060,6 @@ find_and_open_source (const char *filename,\n {\n   char *path = source_path;\n   const char *p;\n-  int result;\n \n   /* If reading of source files is disabled then return a result indicating\n      the attempt to read this source file failed.  GDB will then display\n@@ -1080,12 +1079,11 @@ find_and_open_source (const char *filename,\n       if (rewritten_fullname != NULL)\n \t*fullname = std::move (rewritten_fullname);\n \n-      result = gdb_open_cloexec (fullname->get (), OPEN_MODE, 0);\n-\n-      if (result >= 0)\n+      scoped_fd result = gdb_open_cloexec (fullname->get (), OPEN_MODE, 0);\n+      if (result.get () >= 0)\n \t{\n \t  *fullname = gdb_realpath (fullname->get ());\n-\t  return scoped_fd (result);\n+\t  return result;\n \t}\n \n       /* Didn't work -- free old one, try again.  */\n@@ -1129,8 +1127,8 @@ find_and_open_source (const char *filename,\n     filename = rewritten_filename.get ();\n \n   /* Try to locate file using filename.  */\n-  result = openp (path, OPF_SEARCH_IN_PATH | OPF_RETURN_REALPATH, filename,\n-\t\t  OPEN_MODE, fullname);\n+  int result = openp (path, OPF_SEARCH_IN_PATH | OPF_RETURN_REALPATH, filename,\n+\t\t      OPEN_MODE, fullname);\n   if (result < 0 && dirname != NULL)\n     {\n       /* Remove characters from the start of PATH that we don't need when"
    },
    {
      "sha": "bca007e38ffab3be78d4046ee11ed38839c7b197",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=13084383e8955c2ff7017ac8839301688a9ee34d",
      "patch": "@@ -335,13 +335,11 @@ ui::~ui ()\n static gdb_file_up\n open_terminal_stream (const char *name)\n {\n-  int fd;\n-\n-  fd = gdb_open_cloexec (name, O_RDWR | O_NOCTTY, 0);\n-  if (fd < 0)\n+  scoped_fd fd = gdb_open_cloexec (name, O_RDWR | O_NOCTTY, 0);\n+  if (fd.get () < 0)\n     perror_with_name  (_(\"opening terminal failed\"));\n \n-  return gdb_file_up (fdopen (fd, \"w+\"));\n+  return fd.to_file (\"w+\");\n }\n \n /* Implementation of the \"new-ui\" command.  */"
    },
    {
      "sha": "e1534826c5fe2b987c7d26d9ab5d7b5e710882e3",
      "filename": "gdb/tracefile-tfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/tracefile-tfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13084383e8955c2ff7017ac8839301688a9ee34d/gdb/tracefile-tfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracefile-tfile.c?ref=13084383e8955c2ff7017ac8839301688a9ee34d",
      "patch": "@@ -475,7 +475,7 @@ tfile_target_open (const char *arg, int from_tty)\n \n   flags = O_BINARY | O_LARGEFILE;\n   flags |= O_RDONLY;\n-  scratch_chan = gdb_open_cloexec (filename.get (), flags, 0);\n+  scratch_chan = gdb_open_cloexec (filename.get (), flags, 0).release ();\n   if (scratch_chan < 0)\n     perror_with_name (filename.get ());\n "
    },
    {
      "sha": "2975a0e6a990a97014412423e3f9a941fee3b8b6",
      "filename": "gdbsupport/filestuff.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13084383e8955c2ff7017ac8839301688a9ee34d/gdbsupport/filestuff.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13084383e8955c2ff7017ac8839301688a9ee34d/gdbsupport/filestuff.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/filestuff.cc?ref=13084383e8955c2ff7017ac8839301688a9ee34d",
      "patch": "@@ -306,13 +306,13 @@ socket_mark_cloexec (int fd)\n \n /* See filestuff.h.  */\n \n-int\n+scoped_fd\n gdb_open_cloexec (const char *filename, int flags, unsigned long mode)\n {\n-  int fd = open (filename, flags | O_CLOEXEC, mode);\n+  scoped_fd fd (open (filename, flags | O_CLOEXEC, mode));\n \n-  if (fd >= 0)\n-    maybe_mark_cloexec (fd);\n+  if (fd.get () >= 0)\n+    maybe_mark_cloexec (fd.get ());\n \n   return fd;\n }"
    },
    {
      "sha": "a2cb916dd15d8d35222ffa1ceea16c7fd0b67bbb",
      "filename": "gdbsupport/filestuff.h",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13084383e8955c2ff7017ac8839301688a9ee34d/gdbsupport/filestuff.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13084383e8955c2ff7017ac8839301688a9ee34d/gdbsupport/filestuff.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/filestuff.h?ref=13084383e8955c2ff7017ac8839301688a9ee34d",
      "patch": "@@ -22,6 +22,7 @@\n #include <dirent.h>\n #include <fcntl.h>\n #include \"gdb_file.h\"\n+#include \"scoped_fd.h\"\n \n /* Note all the file descriptors which are open when this is called.\n    These file descriptors will not be closed by close_most_fds.  */\n@@ -47,8 +48,8 @@ extern void close_most_fds (void);\n /* Like 'open', but ensures that the returned file descriptor has the\n    close-on-exec flag set.  */\n \n-extern int gdb_open_cloexec (const char *filename, int flags,\n-\t\t\t     /* mode_t */ unsigned long mode);\n+extern scoped_fd gdb_open_cloexec (const char *filename, int flags,\n+\t\t\t\t   /* mode_t */ unsigned long mode);\n \n /* Like mkstemp, but ensures that the file descriptor is\n    close-on-exec.  */\n@@ -63,7 +64,7 @@ gdb_mkostemp_cloexec (char *name_template, int flags = 0)\n /* Convenience wrapper for the above, which takes the filename as an\n    std::string.  */\n \n-static inline int\n+static inline scoped_fd\n gdb_open_cloexec (const std::string &filename, int flags,\n \t\t  /* mode_t */ unsigned long mode)\n {"
    },
    {
      "sha": "598b3280381ff1bf4067bb6295f15365c68e7a00",
      "filename": "gdbsupport/scoped_mmap.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/13084383e8955c2ff7017ac8839301688a9ee34d/gdbsupport/scoped_mmap.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/13084383e8955c2ff7017ac8839301688a9ee34d/gdbsupport/scoped_mmap.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/scoped_mmap.cc?ref=13084383e8955c2ff7017ac8839301688a9ee34d",
      "patch": "@@ -27,7 +27,7 @@\n scoped_mmap\n mmap_file (const char *filename)\n {\n-  scoped_fd fd (gdb_open_cloexec (filename, O_RDONLY, 0));\n+  scoped_fd fd = gdb_open_cloexec (filename, O_RDONLY, 0);\n   if (fd.get () < 0)\n     perror_with_name ((\"open\"));\n "
    }
  ]
}