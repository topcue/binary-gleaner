{
  "sha": "e5f3ece2ab3b14677c87d9694d822c9ee01b36fe",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTVmM2VjZTJhYjNiMTQ2NzdjODdkOTY5NGQ4MjJjOWVlMDFiMzZmZQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-06-10T12:46:53Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-06-10T12:46:53Z"
    },
    "message": "[gdb/symtab] Fix name lookup in dw2_map_matching_symbols\n\nIn commit 9a0bacfb08 \"[gdb/symtab] Handle .gdb_index in ada language mode\", a\nmissing part of dw2_map_matching_symbols was added, containing a call to\ndw2_expand_symtabs_matching_symbol.\n\nHowever, the callback passed to that call has one problem: the callback has an\nargument \"offset_type namei\", which is ignored.  Instead, match_name is passed\nas argument to dw2_symtab_iter_init, where a name lookup is done, which may or\nmay not yield the same value as namei.\n\nFix this by creating a new version of dw2_symtab_iter_init that takes a\n\"offset_type namei\" argument instead of \"const char *name\", and passing namei.\n\nTested on x86_64-linux, with native and target board cc-with-gdb-index.\n\ngdb/ChangeLog:\n\n2020-06-10  Tom de Vries  <tdevries@suse.de>\n\n\t* dwarf2/read.c (dw2_symtab_iter_init_common): Factor out of ...\n\t(dw2_symtab_iter_init): ... here.  Add variant with \"offset_type\n\tnamei\" instead of \"const char *name\" argument.\n\t(dw2_map_matching_symbols): Use \"offset_type namei\" variant of\n\tdw2_symtab_iter_init.",
    "tree": {
      "sha": "a3d298550febe9d946af4f99b695edf00f538534",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a3d298550febe9d946af4f99b695edf00f538534"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e5f3ece2ab3b14677c87d9694d822c9ee01b36fe",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e5f3ece2ab3b14677c87d9694d822c9ee01b36fe",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e5f3ece2ab3b14677c87d9694d822c9ee01b36fe",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e5f3ece2ab3b14677c87d9694d822c9ee01b36fe/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e1b5d517d1c293a64df311d2749bbbbfbe035a4c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e1b5d517d1c293a64df311d2749bbbbfbe035a4c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e1b5d517d1c293a64df311d2749bbbbfbe035a4c"
    }
  ],
  "stats": {
    "total": 69,
    "additions": 55,
    "deletions": 14
  },
  "files": [
    {
      "sha": "40ce7bb546cc2d4ac7d1aa9e49ad6661afe9931e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5f3ece2ab3b14677c87d9694d822c9ee01b36fe/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5f3ece2ab3b14677c87d9694d822c9ee01b36fe/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e5f3ece2ab3b14677c87d9694d822c9ee01b36fe",
      "patch": "@@ -1,3 +1,11 @@\n+2020-06-10  Tom de Vries  <tdevries@suse.de>\n+\n+\t* dwarf2/read.c (dw2_symtab_iter_init_common): Factor out of ...\n+\t(dw2_symtab_iter_init): ... here.  Add variant with \"offset_type\n+\tnamei\" instead of \"const char *name\" argument.\n+\t(dw2_map_matching_symbols): Use \"offset_type namei\" variant of\n+\tdw2_symtab_iter_init.\n+\n 2020-06-08  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (TYPE_FIELD_TYPE): Remove.  Change all call sites"
    },
    {
      "sha": "c33f0a1e682408cf52977cbca5cc277a1dff1fd6",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 47,
      "deletions": 14,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5f3ece2ab3b14677c87d9694d822c9ee01b36fe/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5f3ece2ab3b14677c87d9694d822c9ee01b36fe/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=e5f3ece2ab3b14677c87d9694d822c9ee01b36fe",
      "patch": "@@ -3436,31 +3436,64 @@ struct dw2_symtab_iterator\n   int global_seen;\n };\n \n-/* Initialize the index symtab iterator ITER.  */\n+/* Initialize the index symtab iterator ITER, common part.  */\n \n static void\n-dw2_symtab_iter_init (struct dw2_symtab_iterator *iter,\n-\t\t      dwarf2_per_objfile *per_objfile,\n-\t\t      gdb::optional<block_enum> block_index,\n-\t\t      domain_enum domain,\n-\t\t      const char *name)\n+dw2_symtab_iter_init_common (struct dw2_symtab_iterator *iter,\n+\t\t\t     dwarf2_per_objfile *per_objfile,\n+\t\t\t     gdb::optional<block_enum> block_index,\n+\t\t\t     domain_enum domain)\n {\n   iter->per_objfile = per_objfile;\n   iter->block_index = block_index;\n   iter->domain = domain;\n   iter->next = 0;\n   iter->global_seen = 0;\n+  iter->vec = NULL;\n+  iter->length = 0;\n+}\n \n-  mapped_index *index = per_objfile->per_bfd->index_table.get ();\n+/* Initialize the index symtab iterator ITER, const char *NAME variant.  */\n+\n+static void\n+dw2_symtab_iter_init (struct dw2_symtab_iterator *iter,\n+\t\t      dwarf2_per_objfile *per_objfile,\n+\t\t      gdb::optional<block_enum> block_index,\n+\t\t      domain_enum domain,\n+\t\t      const char *name)\n+{\n+  dw2_symtab_iter_init_common (iter, per_objfile, block_index, domain);\n \n+  mapped_index *index = per_objfile->per_bfd->index_table.get ();\n   /* index is NULL if OBJF_READNOW.  */\n-  if (index != NULL && find_slot_in_mapped_hash (index, name, &iter->vec))\n+  if (index == NULL)\n+    return;\n+\n+  if (find_slot_in_mapped_hash (index, name, &iter->vec))\n     iter->length = MAYBE_SWAP (*iter->vec);\n-  else\n-    {\n-      iter->vec = NULL;\n-      iter->length = 0;\n-    }\n+}\n+\n+/* Initialize the index symtab iterator ITER, offset_type NAMEI variant.  */\n+\n+static void\n+dw2_symtab_iter_init (struct dw2_symtab_iterator *iter,\n+\t\t      dwarf2_per_objfile *per_objfile,\n+\t\t      gdb::optional<block_enum> block_index,\n+\t\t      domain_enum domain, offset_type namei)\n+{\n+  dw2_symtab_iter_init_common (iter, per_objfile, block_index, domain);\n+\n+  mapped_index *index = per_objfile->per_bfd->index_table.get ();\n+  /* index is NULL if OBJF_READNOW.  */\n+  if (index == NULL)\n+    return;\n+\n+  gdb_assert (!index->symbol_name_slot_invalid (namei));\n+  const auto &bucket = index->symbol_table[namei];\n+\n+  iter->vec = (offset_type *) (index->constant_pool\n+\t\t\t       + MAYBE_SWAP (bucket.vec));\n+  iter->length = MAYBE_SWAP (*iter->vec);\n }\n \n /* Return the next matching CU or NULL if there are no more.  */\n@@ -3765,7 +3798,7 @@ dw2_map_matching_symbols\n \tstruct dwarf2_per_cu_data *per_cu;\n \n \tdw2_symtab_iter_init (&iter, per_objfile, block_kind, domain,\n-\t\t\t      match_name);\n+\t\t\t      namei);\n \twhile ((per_cu = dw2_symtab_iter_next (&iter)) != NULL)\n \t  dw2_expand_symtabs_matching_one (per_cu, per_objfile, nullptr,\n \t\t\t\t\t   nullptr);"
    }
  ]
}