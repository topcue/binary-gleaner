{
  "sha": "f5424cfa7e9337a6cb02a1f83c9feea0995c5350",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjU0MjRjZmE3ZTkzMzdhNmNiMDJhMWY4M2M5ZmVlYTA5OTVjNTM1MA==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2019-03-12T20:39:02Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2019-03-12T20:45:48Z"
    },
    "message": "Support TLS variables on FreeBSD/amd64.\n\nUse the fs_base register to fetch the address of a thread's tcb and\ncalculate the address of the DTV array.  This value is then passed to\nfbsd_get_thread_local_address to compute the final variable address.\n\nNote that fs_base is currently only available via the native target as\ncore dumps on FreeBSD do not store the value of fs_base.\n\ngdb/ChangeLog:\n\n\t* amd64-fbsd-tdep.c (amd64fbsd_get_thread_local_address): New.\n\t(amd64fbsd_init_abi): Install gdbarch\n\t\"fetch_tls_load_module_address\" and \"get_thread_local_address\"\n\tmethods.",
    "tree": {
      "sha": "56e48f7e78cd5dd52b187aa3b4153e6a5480c15d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/56e48f7e78cd5dd52b187aa3b4153e6a5480c15d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f5424cfa7e9337a6cb02a1f83c9feea0995c5350",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f5424cfa7e9337a6cb02a1f83c9feea0995c5350",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f5424cfa7e9337a6cb02a1f83c9feea0995c5350",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f5424cfa7e9337a6cb02a1f83c9feea0995c5350/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "945f3901b5889e57edf5a2ee25acb51f0078a719",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/945f3901b5889e57edf5a2ee25acb51f0078a719",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/945f3901b5889e57edf5a2ee25acb51f0078a719"
    }
  ],
  "stats": {
    "total": 32,
    "additions": 32,
    "deletions": 0
  },
  "files": [
    {
      "sha": "2268dd2ca64e0490ef801914c14def95c729f540",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f5424cfa7e9337a6cb02a1f83c9feea0995c5350/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f5424cfa7e9337a6cb02a1f83c9feea0995c5350/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f5424cfa7e9337a6cb02a1f83c9feea0995c5350",
      "patch": "@@ -1,3 +1,10 @@\n+2019-03-12  John Baldwin  <jhb@FreeBSD.org>\n+\n+\t* amd64-fbsd-tdep.c (amd64fbsd_get_thread_local_address): New.\n+\t(amd64fbsd_init_abi): Install gdbarch\n+\t\"fetch_tls_load_module_address\" and \"get_thread_local_address\"\n+\tmethods.\n+\n 2019-03-12  John Baldwin  <jhb@FreeBSD.org>\n \n \t* fbsd-tdep.c (fbsd_pspace_data_handle): New variable."
    },
    {
      "sha": "7e2e9edf21de3b8fa4e43c21046db8171c9da719",
      "filename": "gdb/amd64-fbsd-tdep.c",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f5424cfa7e9337a6cb02a1f83c9feea0995c5350/gdb/amd64-fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f5424cfa7e9337a6cb02a1f83c9feea0995c5350/gdb/amd64-fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-fbsd-tdep.c?ref=f5424cfa7e9337a6cb02a1f83c9feea0995c5350",
      "patch": "@@ -204,6 +204,26 @@ amd64fbsd_iterate_over_regset_sections (struct gdbarch *gdbarch,\n       &amd64fbsd_xstateregset, \"XSAVE extended state\", cb_data);\n }\n \n+/* Implement the get_thread_local_address gdbarch method.  */\n+\n+static CORE_ADDR\n+amd64fbsd_get_thread_local_address (struct gdbarch *gdbarch, ptid_t ptid,\n+\t\t\t\t    CORE_ADDR lm_addr, CORE_ADDR offset)\n+{\n+  struct regcache *regcache;\n+\n+  regcache = get_thread_arch_regcache (ptid, gdbarch);\n+\n+  target_fetch_registers (regcache, AMD64_FSBASE_REGNUM);\n+\n+  ULONGEST fsbase;\n+  if (regcache->cooked_read (AMD64_FSBASE_REGNUM, &fsbase) != REG_VALID)\n+    error (_(\"Unable to fetch %%fsbase\"));\n+\n+  CORE_ADDR dtv_addr = fsbase + gdbarch_ptr_bit (gdbarch) / 8;\n+  return fbsd_get_thread_local_address (gdbarch, dtv_addr, lm_addr, offset);\n+}\n+\n static void\n amd64fbsd_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n@@ -241,6 +261,11 @@ amd64fbsd_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   /* FreeBSD uses SVR4-style shared libraries.  */\n   set_solib_svr4_fetch_link_map_offsets\n     (gdbarch, svr4_lp64_fetch_link_map_offsets);\n+\n+  set_gdbarch_fetch_tls_load_module_address (gdbarch,\n+\t\t\t\t\t     svr4_fetch_objfile_link_map);\n+  set_gdbarch_get_thread_local_address (gdbarch,\n+\t\t\t\t\tamd64fbsd_get_thread_local_address);\n }\n \n void"
    }
  ]
}