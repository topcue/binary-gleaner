{
  "sha": "fce6cd341b48a2589cb4520c7718c80cb0b27c80",
  "node_id": "C_kwDOANOeidoAKGZjZTZjZDM0MWI0OGEyNTg5Y2I0NTIwYzc3MThjODBjYjBiMjdjODA",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2021-11-24T11:36:12Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2021-11-25T10:00:18Z"
    },
    "message": "gdb: hoist target_async_permitted checks into target.c\n\nThis commit moves the target_async_permitted check out of each targets\n::can_async_p method and into the target_can_async_p wrapper function.\n\nI've left some asserts in the two ::can_async_p methods that I\nchanged, which will hopefully catch any direct calls to these methods\nthat might be added in the future.\n\nThere should be no user visible changes after this commit.",
    "tree": {
      "sha": "236e91b872a6a2a2753503bfd2d002365a8844d0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/236e91b872a6a2a2753503bfd2d002365a8844d0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fce6cd341b48a2589cb4520c7718c80cb0b27c80",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fce6cd341b48a2589cb4520c7718c80cb0b27c80",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fce6cd341b48a2589cb4520c7718c80cb0b27c80",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fce6cd341b48a2589cb4520c7718c80cb0b27c80/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "0c1e6e265b276542ccb3f392c3070c3dd9339303",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0c1e6e265b276542ccb3f392c3070c3dd9339303",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0c1e6e265b276542ccb3f392c3070c3dd9339303"
    }
  ],
  "stats": {
    "total": 21,
    "additions": 11,
    "deletions": 10
  },
  "files": [
    {
      "sha": "fbb60a398b0c9e355e0b68646fd4ce8372fe3ba8",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fce6cd341b48a2589cb4520c7718c80cb0b27c80/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fce6cd341b48a2589cb4520c7718c80cb0b27c80/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=fce6cd341b48a2589cb4520c7718c80cb0b27c80",
      "patch": "@@ -4088,9 +4088,11 @@ linux_nat_target::is_async_p ()\n bool\n linux_nat_target::can_async_p ()\n {\n-  /* We're always async, unless the user explicitly prevented it with the\n-     \"maint set target-async\" command.  */\n-  return target_async_permitted;\n+  /* This flag should be checked in the common target.c code.  */\n+  gdb_assert (target_async_permitted);\n+  \n+  /* Otherwise, this targets is always able to support async mode.  */\n+  return true;\n }\n \n bool"
    },
    {
      "sha": "6ecea5b7fd71b57715ec485b9034ba5fcb22c22b",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fce6cd341b48a2589cb4520c7718c80cb0b27c80/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fce6cd341b48a2589cb4520c7718c80cb0b27c80/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=fce6cd341b48a2589cb4520c7718c80cb0b27c80",
      "patch": "@@ -14379,14 +14379,11 @@ remote_target::thread_info_to_thread_handle (struct thread_info *tp)\n bool\n remote_target::can_async_p ()\n {\n-  struct remote_state *rs = get_remote_state ();\n-\n-  /* We don't go async if the user has explicitly prevented it with the\n-     \"maint set target-async\" command.  */\n-  if (!target_async_permitted)\n-    return false;\n+  /* This flag should be checked in the common target.c code.  */\n+  gdb_assert (target_async_permitted);\n \n-  /* We're async whenever the serial device is.  */\n+  /* We're async whenever the serial device can.  */\n+  struct remote_state *rs = get_remote_state ();\n   return serial_can_async_p (rs->remote_desc);\n }\n "
    },
    {
      "sha": "db1abcc325eb52bf0d4cf3f642d53ef84a39b96b",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fce6cd341b48a2589cb4520c7718c80cb0b27c80/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fce6cd341b48a2589cb4520c7718c80cb0b27c80/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=fce6cd341b48a2589cb4520c7718c80cb0b27c80",
      "patch": "@@ -399,6 +399,8 @@ target_can_async_p ()\n bool\n target_can_async_p (struct target_ops *target)\n {\n+  if (!target_async_permitted)\n+    return false;\n   return target->can_async_p ();\n }\n "
    }
  ]
}