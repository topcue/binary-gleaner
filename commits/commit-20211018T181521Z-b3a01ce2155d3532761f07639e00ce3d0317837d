{
  "sha": "b3a01ce2155d3532761f07639e00ce3d0317837d",
  "node_id": "C_kwDOANOeidoAKGIzYTAxY2UyMTU1ZDM1MzI3NjFmMDc2MzllMDBjZTNkMDMxNzgzN2Q",
  "commit": {
    "author": {
      "name": "Weimin Pan",
      "email": "weimin.pan@oracle.com",
      "date": "2021-10-18T18:15:21Z"
    },
    "committer": {
      "name": "Weimin Pan",
      "email": "weimin.pan@oracle.com",
      "date": "2021-10-18T18:15:21Z"
    },
    "message": "CTF: incorrect underlying type setting for enumeration types\n\nA bug was filed against the incorrect underlying type setting for\nan enumeration type, which was caused by a copy and paste error.\nThis patch fixes the problem by setting it by calling objfile_int_type,\nwhich was originally dwarf2_per_objfile::int_type, with ctf_type_size bits.\nAlso add error checking on ctf_func_type_info call.",
    "tree": {
      "sha": "401a78bd61bb190b2da7ccdd27248d49e18ff954",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/401a78bd61bb190b2da7ccdd27248d49e18ff954"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b3a01ce2155d3532761f07639e00ce3d0317837d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b3a01ce2155d3532761f07639e00ce3d0317837d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b3a01ce2155d3532761f07639e00ce3d0317837d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b3a01ce2155d3532761f07639e00ce3d0317837d/comments",
  "author": {
    "login": "wmwpan",
    "id": 50341885,
    "node_id": "MDQ6VXNlcjUwMzQxODg1",
    "avatar_url": "https://avatars.githubusercontent.com/u/50341885?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wmwpan",
    "html_url": "https://github.com/wmwpan",
    "followers_url": "https://api.github.com/users/wmwpan/followers",
    "following_url": "https://api.github.com/users/wmwpan/following{/other_user}",
    "gists_url": "https://api.github.com/users/wmwpan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wmwpan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wmwpan/subscriptions",
    "organizations_url": "https://api.github.com/users/wmwpan/orgs",
    "repos_url": "https://api.github.com/users/wmwpan/repos",
    "events_url": "https://api.github.com/users/wmwpan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wmwpan/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "wmwpan",
    "id": 50341885,
    "node_id": "MDQ6VXNlcjUwMzQxODg1",
    "avatar_url": "https://avatars.githubusercontent.com/u/50341885?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wmwpan",
    "html_url": "https://github.com/wmwpan",
    "followers_url": "https://api.github.com/users/wmwpan/followers",
    "following_url": "https://api.github.com/users/wmwpan/following{/other_user}",
    "gists_url": "https://api.github.com/users/wmwpan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wmwpan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wmwpan/subscriptions",
    "organizations_url": "https://api.github.com/users/wmwpan/orgs",
    "repos_url": "https://api.github.com/users/wmwpan/repos",
    "events_url": "https://api.github.com/users/wmwpan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wmwpan/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "19b96124487358e723f920bfa30c272f5c0c5995",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/19b96124487358e723f920bfa30c272f5c0c5995",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/19b96124487358e723f920bfa30c272f5c0c5995"
    }
  ],
  "stats": {
    "total": 78,
    "additions": 42,
    "deletions": 36
  },
  "files": [
    {
      "sha": "06e2224c085fe6a21dd41e9e55ed789fc9bc269a",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3a01ce2155d3532761f07639e00ce3d0317837d/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3a01ce2155d3532761f07639e00ce3d0317837d/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=b3a01ce2155d3532761f07639e00ce3d0317837d",
      "patch": "@@ -691,7 +691,12 @@ read_func_kind_type (struct ctf_context *ccp, ctf_id_t tid)\n   type = alloc_type (of);\n \n   type->set_code (TYPE_CODE_FUNC);\n-  ctf_func_type_info (fp, tid, &cfi);\n+  if (ctf_func_type_info (fp, tid, &cfi) < 0)\n+    {\n+      const char *fname = ctf_type_name_raw (fp, tid);\n+      error (_(\"Error getting function type info: %s\"),\n+\t     fname == nullptr ? \"noname\" : fname);\n+    }\n   rettype = fetch_tid_type (ccp, cfi.ctc_return);\n   TYPE_TARGET_TYPE (type) = rettype;\n   set_type_align (type, ctf_type_align (fp, tid));\n@@ -733,8 +738,7 @@ read_enum_type (struct ctf_context *ccp, ctf_id_t tid)\n {\n   struct objfile *of = ccp->of;\n   ctf_dict_t *fp = ccp->fp;\n-  struct type *type, *target_type;\n-  ctf_funcinfo_t fi;\n+  struct type *type;\n \n   type = alloc_type (of);\n \n@@ -744,9 +748,8 @@ read_enum_type (struct ctf_context *ccp, ctf_id_t tid)\n \n   type->set_code (TYPE_CODE_ENUM);\n   TYPE_LENGTH (type) = ctf_type_size (fp, tid);\n-  ctf_func_type_info (fp, tid, &fi);\n-  target_type = get_tid_type (of, fi.ctc_return);\n-  TYPE_TARGET_TYPE (type) = target_type;\n+  /* Set the underlying type based on its ctf_type_size bits.  */\n+  TYPE_TARGET_TYPE (type) = objfile_int_type (of, TYPE_LENGTH (type), false);\n   set_type_align (type, ctf_type_align (fp, tid));\n \n   return set_tid_type (of, tid, type);"
    },
    {
      "sha": "e7aed774c25cf5d20e6a64313fb0b8fe9750e6b7",
      "filename": "gdb/dwarf2/cu.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3a01ce2155d3532761f07639e00ce3d0317837d/gdb/dwarf2/cu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3a01ce2155d3532761f07639e00ce3d0317837d/gdb/dwarf2/cu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/cu.c?ref=b3a01ce2155d3532761f07639e00ce3d0317837d",
      "patch": "@@ -46,7 +46,7 @@ struct type *\n dwarf2_cu::addr_sized_int_type (bool unsigned_p) const\n {\n   int addr_size = this->per_cu->addr_size ();\n-  return this->per_objfile->int_type (addr_size, unsigned_p);\n+  return objfile_int_type (this->per_objfile->objfile, addr_size, unsigned_p);\n }\n \n /* Start a symtab for DWARF.  NAME, COMP_DIR, LOW_PC are passed to the"
    },
    {
      "sha": "e456c37e193a68d15de16037af6253ad4bc2e564",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 25,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3a01ce2155d3532761f07639e00ce3d0317837d/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3a01ce2155d3532761f07639e00ce3d0317837d/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=b3a01ce2155d3532761f07639e00ce3d0317837d",
      "patch": "@@ -17429,7 +17429,7 @@ read_tag_string_type (struct die_info *die, struct dwarf2_cu *cu)\n \t  /* Pass 0 as the default as we know this attribute is constant\n \t     and the default value will not be returned.  */\n \t  LONGEST sz = len->constant_value (0);\n-\t  prop_type = cu->per_objfile->int_type (sz, true);\n+\t  prop_type = objfile_int_type (objfile, sz, true);\n \t}\n       else\n \t{\n@@ -18480,30 +18480,6 @@ attr_to_dynamic_prop (const struct attribute *attr, struct die_info *die,\n \n /* See read.h.  */\n \n-struct type *\n-dwarf2_per_objfile::int_type (int size_in_bytes, bool unsigned_p) const\n-{\n-  struct type *int_type;\n-\n-  /* Helper macro to examine the various builtin types.  */\n-#define TRY_TYPE(F)\t\t\t\t\t\t\t\\\n-  int_type = (unsigned_p\t\t\t\t\t\t\\\n-\t      ? objfile_type (objfile)->builtin_unsigned_ ## F\t\t\\\n-\t      : objfile_type (objfile)->builtin_ ## F);\t\t\t\\\n-  if (int_type != NULL && TYPE_LENGTH (int_type) == size_in_bytes)\t\\\n-    return int_type\n-\n-  TRY_TYPE (char);\n-  TRY_TYPE (short);\n-  TRY_TYPE (int);\n-  TRY_TYPE (long);\n-  TRY_TYPE (long_long);\n-\n-#undef TRY_TYPE\n-\n-  gdb_assert_not_reached (\"unable to find suitable integer type\");\n-}\n-\n /* Read the DW_AT_type attribute for a sub-range.  If this attribute is not\n    present (which is valid) then compute the default type based on the\n    compilation units address size.  */"
    },
    {
      "sha": "1638d8521c0f176f3a0ecd0ce469a5e5a214e3df",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3a01ce2155d3532761f07639e00ce3d0317837d/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3a01ce2155d3532761f07639e00ce3d0317837d/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=b3a01ce2155d3532761f07639e00ce3d0317837d",
      "patch": "@@ -537,10 +537,6 @@ struct dwarf2_per_objfile\n   void set_type_for_signatured_type (signatured_type *sig_type,\n \t\t\t\t     struct type *type);\n \n-  /* Find an integer type SIZE_IN_BYTES bytes in size and return it.\n-     UNSIGNED_P controls if the integer is unsigned or not.  */\n-  struct type *int_type (int size_in_bytes, bool unsigned_p) const;\n-\n   /* Get the dwarf2_cu matching PER_CU for this objfile.  */\n   dwarf2_cu *get_cu (dwarf2_per_cu_data *per_cu);\n "
    },
    {
      "sha": "3da6f5211aa136210796d105ca716acaca493d92",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3a01ce2155d3532761f07639e00ce3d0317837d/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3a01ce2155d3532761f07639e00ce3d0317837d/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=b3a01ce2155d3532761f07639e00ce3d0317837d",
      "patch": "@@ -1374,3 +1374,29 @@ objfile_flavour_name (struct objfile *objfile)\n     return bfd_flavour_name (bfd_get_flavour (objfile->obfd));\n   return NULL;\n }\n+\n+/* See objfiles.h.  */\n+\n+struct type *\n+objfile_int_type (struct objfile *of, int size_in_bytes, bool unsigned_p)\n+{\n+  struct type *int_type;\n+\n+  /* Helper macro to examine the various builtin types.  */\n+#define TRY_TYPE(F)\t\t\t\t\t\t\t\\\n+  int_type = (unsigned_p\t\t\t\t\t\t\\\n+\t      ? objfile_type (of)->builtin_unsigned_ ## F\t\t\\\n+\t      : objfile_type (of)->builtin_ ## F);\t\t\t\\\n+  if (int_type != NULL && TYPE_LENGTH (int_type) == size_in_bytes)\t\\\n+    return int_type\n+\n+  TRY_TYPE (char);\n+  TRY_TYPE (short);\n+  TRY_TYPE (int);\n+  TRY_TYPE (long);\n+  TRY_TYPE (long_long);\n+\n+#undef TRY_TYPE\n+\n+  gdb_assert_not_reached (\"unable to find suitable integer type\");\n+}"
    },
    {
      "sha": "6062a3f61cd0aa0f30f7524d484f39da227f19f2",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b3a01ce2155d3532761f07639e00ce3d0317837d/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b3a01ce2155d3532761f07639e00ce3d0317837d/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=b3a01ce2155d3532761f07639e00ce3d0317837d",
      "patch": "@@ -936,6 +936,11 @@ const char *objfile_flavour_name (struct objfile *objfile);\n extern void set_objfile_main_name (struct objfile *objfile,\n \t\t\t\t   const char *name, enum language lang);\n \n+/* Find an integer type SIZE_IN_BYTES bytes in size from OF and return it.\n+   UNSIGNED_P controls if the integer is unsigned or not.  */\n+extern struct type *objfile_int_type (struct objfile *of, int size_in_bytes,\n+\t\t\t\t      bool unsigned_p);\n+\n extern void objfile_register_static_link\n   (struct objfile *objfile,\n    const struct block *block,"
    }
  ]
}