{
  "sha": "fd0de36e274c8141a5dd4579cd04856dc88370da",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmQwZGUzNmUyNzRjODE0MWE1ZGQ0NTc5Y2QwNDg1NmRjODgzNzBkYQ==",
  "commit": {
    "author": {
      "name": "Jose E. Marchesi",
      "email": "jose.marchesi@oracle.com",
      "date": "2019-05-23T17:33:41Z"
    },
    "committer": {
      "name": "Jose E. Marchesi",
      "email": "jose.marchesi@oracle.com",
      "date": "2019-05-23T17:33:41Z"
    },
    "message": "bfd: add support for eBPF\n\nThis patch adds support to BFD for elf64-bpf, in both little-endian\nand big-endian variants.\n\nbfd/ChangeLog:\n\n2019-05-23  Jose E. Marchesi  <jose.marchesi@oracle.com>\n\n\t* configure.ac: Add bpf_elf64_le_vec and bpf_elf64_be_vec.\n\t* configure: Regenerated.\n\t* Makefile.am (ALL_MACHINES): Add cpu-bpf.lo.\n\t(ALL_MACHINES_CFILES): Add cpu-bpf.c.\n\t(BFD64_BACKENDS): Add elf64-bpf.lo.\n\t(BFD64_BACKENDS_CFILES): Add elf64-bpf.c.\n\t* Makefile.in (SOURCE_HFILES): Regenerate.\n\t* config.bfd (targ_cpu): Handle bpf-*-* targets.\n\t* cpu-bpf.c: New file.\n\t* elf64-bpf.c: Likewise.\n\t* targets.c (_bfd_target_vector): Add bpf_elf64_be_vec and\n\tbpf_elf64_le_vec.\n\t* archures.c: Define architecture bfd_arch_bpf and machine\n\tbfd_arch_bpf.\n\t* reloc.c: Define BFD relocations used by the BPF target.\n\t* bfd-in2.h: Regenerated.\n\t* libbfd.h: Likewise.",
    "tree": {
      "sha": "57c7a0131ce2a1a077f811e6f1ba471034d9bf54",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/57c7a0131ce2a1a077f811e6f1ba471034d9bf54"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fd0de36e274c8141a5dd4579cd04856dc88370da",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fd0de36e274c8141a5dd4579cd04856dc88370da",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fd0de36e274c8141a5dd4579cd04856dc88370da",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fd0de36e274c8141a5dd4579cd04856dc88370da/comments",
  "author": {
    "login": "jemarch",
    "id": 7061875,
    "node_id": "MDQ6VXNlcjcwNjE4NzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jemarch",
    "html_url": "https://github.com/jemarch",
    "followers_url": "https://api.github.com/users/jemarch/followers",
    "following_url": "https://api.github.com/users/jemarch/following{/other_user}",
    "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions",
    "organizations_url": "https://api.github.com/users/jemarch/orgs",
    "repos_url": "https://api.github.com/users/jemarch/repos",
    "events_url": "https://api.github.com/users/jemarch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jemarch/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jemarch",
    "id": 7061875,
    "node_id": "MDQ6VXNlcjcwNjE4NzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jemarch",
    "html_url": "https://github.com/jemarch",
    "followers_url": "https://api.github.com/users/jemarch/followers",
    "following_url": "https://api.github.com/users/jemarch/following{/other_user}",
    "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions",
    "organizations_url": "https://api.github.com/users/jemarch/orgs",
    "repos_url": "https://api.github.com/users/jemarch/repos",
    "events_url": "https://api.github.com/users/jemarch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jemarch/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8ebe62124023224eafd1b82c8bc2325962711ef8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8ebe62124023224eafd1b82c8bc2325962711ef8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8ebe62124023224eafd1b82c8bc2325962711ef8"
    }
  ],
  "stats": {
    "total": 617,
    "additions": 609,
    "deletions": 8
  },
  "files": [
    {
      "sha": "85f00362a21dfaae7949d3a20215bec1eda4505e",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=fd0de36e274c8141a5dd4579cd04856dc88370da",
      "patch": "@@ -1,3 +1,23 @@\n+2019-05-23  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* configure.ac: Add bpf_elf64_le_vec and bpf_elf64_be_vec.\n+\t* configure: Regenerated.\n+\t* Makefile.am (ALL_MACHINES): Add cpu-bpf.lo.\n+\t(ALL_MACHINES_CFILES): Add cpu-bpf.c.\n+\t(BFD64_BACKENDS): Add elf64-bpf.lo.\n+\t(BFD64_BACKENDS_CFILES): Add elf64-bpf.c.\n+\t* Makefile.in (SOURCE_HFILES): Regenerate.\n+\t* config.bfd (targ_cpu): Handle bpf-*-* targets.\n+\t* cpu-bpf.c: New file.\n+\t* elf64-bpf.c: Likewise.\n+\t* targets.c (_bfd_target_vector): Add bpf_elf64_be_vec and\n+\tbpf_elf64_le_vec.\n+\t* archures.c: Define architecture bfd_arch_bpf and machine\n+\tbfd_arch_bpf.\n+\t* reloc.c: Define BFD relocations used by the BPF target.\n+\t* bfd-in2.h: Regenerated.\n+\t* libbfd.h: Likewise.\n+\n 2019-05-22  Alan Modra  <amodra@gmail.com>\n \n \t* elf32-arm.c (arm_allocate_glue_section_space): Clear section"
    },
    {
      "sha": "4703955ee4ec454e1b6145dbb5ac80303be7ff29",
      "filename": "bfd/Makefile.am",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/Makefile.am?ref=fd0de36e274c8141a5dd4579cd04856dc88370da",
      "patch": "@@ -96,6 +96,7 @@ ALL_MACHINES = \\\n \tcpu-arm.lo \\\n \tcpu-avr.lo \\\n \tcpu-bfin.lo \\\n+\tcpu-bpf.lo \\\n \tcpu-cr16.lo \\\n \tcpu-cr16c.lo \\\n \tcpu-cris.lo \\\n@@ -182,6 +183,7 @@ ALL_MACHINES_CFILES = \\\n \tcpu-arm.c \\\n \tcpu-avr.c \\\n \tcpu-bfin.c \\\n+\tcpu-bpf.c \\\n \tcpu-cr16.c \\\n \tcpu-cr16c.c \\\n \tcpu-cris.c \\\n@@ -574,6 +576,7 @@ BFD64_BACKENDS = \\\n \telf64-tilegx.lo \\\n \telf64-x86-64.lo \\\n \telfxx-x86.lo \\\n+\telf64-bpf.lo \\\n \telf64.lo \\\n \tmach-o-aarch64.lo \\\n \tmach-o-x86-64.lo \\\n@@ -607,6 +610,7 @@ BFD64_BACKENDS_CFILES = \\\n \telf64-tilegx.c \\\n \telf64-x86-64.c \\\n \telfxx-x86.c \\\n+\telf64-bpf.c \\\n \telf64.c \\\n \telfn32-mips.c \\\n \telfxx-aarch64.c \\"
    },
    {
      "sha": "5578997e5d6b5f5a37c7d8e14fd41b24e825fa70",
      "filename": "bfd/Makefile.in",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/Makefile.in?ref=fd0de36e274c8141a5dd4579cd04856dc88370da",
      "patch": "@@ -438,6 +438,7 @@ pdfdir = @pdfdir@\n prefix = @prefix@\n program_transform_name = @program_transform_name@\n psdir = @psdir@\n+runstatedir = @runstatedir@\n sbindir = @sbindir@\n sharedstatedir = @sharedstatedir@\n srcdir = @srcdir@\n@@ -519,6 +520,7 @@ ALL_MACHINES = \\\n \tcpu-arm.lo \\\n \tcpu-avr.lo \\\n \tcpu-bfin.lo \\\n+\tcpu-bpf.lo \\\n \tcpu-cr16.lo \\\n \tcpu-cr16c.lo \\\n \tcpu-cris.lo \\\n@@ -605,6 +607,7 @@ ALL_MACHINES_CFILES = \\\n \tcpu-arm.c \\\n \tcpu-avr.c \\\n \tcpu-bfin.c \\\n+\tcpu-bpf.c \\\n \tcpu-cr16.c \\\n \tcpu-cr16c.c \\\n \tcpu-cris.c \\\n@@ -999,6 +1002,7 @@ BFD64_BACKENDS = \\\n \telf64-tilegx.lo \\\n \telf64-x86-64.lo \\\n \telfxx-x86.lo \\\n+\telf64-bpf.lo \\\n \telf64.lo \\\n \tmach-o-aarch64.lo \\\n \tmach-o-x86-64.lo \\\n@@ -1032,6 +1036,7 @@ BFD64_BACKENDS_CFILES = \\\n \telf64-tilegx.c \\\n \telf64-x86-64.c \\\n \telfxx-x86.c \\\n+\telf64-bpf.c \\\n \telf64.c \\\n \telfn32-mips.c \\\n \telfxx-aarch64.c \\\n@@ -1322,6 +1327,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-arm.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-avr.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-bfin.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-bpf.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-cr16.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-cr16c.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-cris.Plo@am__quote@\n@@ -1484,6 +1490,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf32.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf64-aarch64.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf64-alpha.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf64-bpf.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf64-gen.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf64-hppa.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf64-ia64-vms.Plo@am__quote@"
    },
    {
      "sha": "3465406213f5c2c13710a59d7fc014d2c4d2665a",
      "filename": "bfd/archures.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/archures.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/archures.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archures.c?ref=fd0de36e274c8141a5dd4579cd04856dc88370da",
      "patch": "@@ -415,6 +415,8 @@ DESCRIPTION\n . bfd_arch_iq2000,     {* Vitesse IQ2000.  *}\n .#define bfd_mach_iq2000\t1\n .#define bfd_mach_iq10\t\t2\n+.  bfd_arch_bpf,       {* Linux eBPF.  *}\n+.#define bfd_mach_bpf\t\t1\n .  bfd_arch_epiphany,  {* Adapteva EPIPHANY.  *}\n .#define bfd_mach_epiphany16\t1\n .#define bfd_mach_epiphany32\t2\n@@ -601,6 +603,7 @@ extern const bfd_arch_info_type bfd_csky_arch;\n extern const bfd_arch_info_type bfd_d10v_arch;\n extern const bfd_arch_info_type bfd_d30v_arch;\n extern const bfd_arch_info_type bfd_dlx_arch;\n+extern const bfd_arch_info_type bfd_bpf_arch;\n extern const bfd_arch_info_type bfd_epiphany_arch;\n extern const bfd_arch_info_type bfd_fr30_arch;\n extern const bfd_arch_info_type bfd_frv_arch;\n@@ -692,6 +695,7 @@ static const bfd_arch_info_type * const bfd_archures_list[] =\n     &bfd_d10v_arch,\n     &bfd_d30v_arch,\n     &bfd_dlx_arch,\n+    &bfd_bpf_arch,\n     &bfd_epiphany_arch,\n     &bfd_fr30_arch,\n     &bfd_frv_arch,"
    },
    {
      "sha": "03d644c61e2d727a8988ed6d8bbd7fb8256ca42a",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=fd0de36e274c8141a5dd4579cd04856dc88370da",
      "patch": "@@ -2357,6 +2357,8 @@ enum bfd_architecture\n  bfd_arch_iq2000,     /* Vitesse IQ2000.  */\n #define bfd_mach_iq2000        1\n #define bfd_mach_iq10          2\n+  bfd_arch_bpf,       /* Linux eBPF.  */\n+#define bfd_mach_bpf           1\n   bfd_arch_epiphany,  /* Adapteva EPIPHANY.  */\n #define bfd_mach_epiphany16    1\n #define bfd_mach_epiphany32    2\n@@ -6651,6 +6653,13 @@ assembler and not (currently) written to any object files.  */\n   BFD_RELOC_TILEGX_IMM8_Y0_TLS_ADD,\n   BFD_RELOC_TILEGX_IMM8_Y1_TLS_ADD,\n \n+/* Linux eBPF relocations.  */\n+  BFD_RELOC_BPF_64,\n+  BFD_RELOC_BPF_32,\n+  BFD_RELOC_BPF_16,\n+  BFD_RELOC_BPF_DISP16,\n+  BFD_RELOC_BPF_DISP32,\n+\n /* Adapteva EPIPHANY - 8 bit signed pc-relative displacement  */\n   BFD_RELOC_EPIPHANY_SIMM8,\n "
    },
    {
      "sha": "562c331c55b2def59c2f4dd6ca78e1ce5a159372",
      "filename": "bfd/config.bfd",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/config.bfd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/config.bfd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/config.bfd?ref=fd0de36e274c8141a5dd4579cd04856dc88370da",
      "patch": "@@ -480,6 +480,12 @@ case \"${targ}\" in\n     targ_defvec=d30v_elf32_vec\n     ;;\n \n+  bpf-*-none)\n+    targ_defvec=bpf_elf64_le_vec\n+    targ_selvecs=bpf_elf64_be_vec\n+    targ_underscore=yes\n+    ;;\n+\n   epiphany-*-*)\n     targ_defvec=epiphany_elf32_vec\n     targ_underscore=yes\n@@ -1420,6 +1426,12 @@ case \"${targ}\" in\n     ;;\n \n # END OF targmatch.h\n+  bpf-*-*)\n+    echo \"*** Configuration $targ is not fully supported.\" >&2\n+    echo \"*** Use bpf or bpf-*-none as the target instead.\" >&2\n+    exit 1\n+    ;;\n+\n   *)\n     echo 1>&2 \"*** BFD does not support target ${targ}.\"\n     echo 1>&2 \"*** Look in bfd/config.bfd for supported targets.\""
    },
    {
      "sha": "f2f8735629a239541e3c67aa6c1bf56781fd8597",
      "filename": "bfd/configure",
      "status": "modified",
      "additions": 22,
      "deletions": 8,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure?ref=fd0de36e274c8141a5dd4579cd04856dc88370da",
      "patch": "@@ -793,6 +793,7 @@ infodir\n docdir\n oldincludedir\n includedir\n+runstatedir\n localstatedir\n sharedstatedir\n sysconfdir\n@@ -889,6 +890,7 @@ datadir='${datarootdir}'\n sysconfdir='${prefix}/etc'\n sharedstatedir='${prefix}/com'\n localstatedir='${prefix}/var'\n+runstatedir='${localstatedir}/run'\n includedir='${prefix}/include'\n oldincludedir='/usr/include'\n docdir='${datarootdir}/doc/${PACKAGE_TARNAME}'\n@@ -1141,6 +1143,15 @@ do\n   | -silent | --silent | --silen | --sile | --sil)\n     silent=yes ;;\n \n+  -runstatedir | --runstatedir | --runstatedi | --runstated \\\n+  | --runstate | --runstat | --runsta | --runst | --runs \\\n+  | --run | --ru | --r)\n+    ac_prev=runstatedir ;;\n+  -runstatedir=* | --runstatedir=* | --runstatedi=* | --runstated=* \\\n+  | --runstate=* | --runstat=* | --runsta=* | --runst=* | --runs=* \\\n+  | --run=* | --ru=* | --r=*)\n+    runstatedir=$ac_optarg ;;\n+\n   -sbindir | --sbindir | --sbindi | --sbind | --sbin | --sbi | --sb)\n     ac_prev=sbindir ;;\n   -sbindir=* | --sbindir=* | --sbindi=* | --sbind=* | --sbin=* \\\n@@ -1278,7 +1289,7 @@ fi\n for ac_var in\texec_prefix prefix bindir sbindir libexecdir datarootdir \\\n \t\tdatadir sysconfdir sharedstatedir localstatedir includedir \\\n \t\toldincludedir docdir infodir htmldir dvidir pdfdir psdir \\\n-\t\tlibdir localedir mandir\n+\t\tlibdir localedir mandir runstatedir\n do\n   eval ac_val=\\$$ac_var\n   # Remove trailing slashes.\n@@ -1431,6 +1442,7 @@ Fine tuning of the installation directories:\n   --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]\n   --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]\n   --localstatedir=DIR     modifiable single-machine data [PREFIX/var]\n+  --runstatedir=DIR       modifiable per-process data [LOCALSTATEDIR/run]\n   --libdir=DIR            object code libraries [EPREFIX/lib]\n   --includedir=DIR        C header files [PREFIX/include]\n   --oldincludedir=DIR     C header files for non-gcc [/usr/include]\n@@ -11728,7 +11740,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11731 \"configure\"\n+#line 11743 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11834,7 +11846,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11837 \"configure\"\n+#line 11849 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -12223,7 +12235,7 @@ else\n     We can't simply define LARGE_OFF_T to be 9223372036854775807,\n     since some C++ compilers masquerading as C compilers\n     incorrectly reject 9223372036854775807.  */\n-#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+#define LARGE_OFF_T ((((off_t) 1 << 31) << 31) - 1 + (((off_t) 1 << 31) << 31))\n   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n \t\t       && LARGE_OFF_T % 2147483647 == 1)\n \t\t      ? 1 : -1];\n@@ -12269,7 +12281,7 @@ else\n     We can't simply define LARGE_OFF_T to be 9223372036854775807,\n     since some C++ compilers masquerading as C compilers\n     incorrectly reject 9223372036854775807.  */\n-#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+#define LARGE_OFF_T ((((off_t) 1 << 31) << 31) - 1 + (((off_t) 1 << 31) << 31))\n   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n \t\t       && LARGE_OFF_T % 2147483647 == 1)\n \t\t      ? 1 : -1];\n@@ -12293,7 +12305,7 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n     We can't simply define LARGE_OFF_T to be 9223372036854775807,\n     since some C++ compilers masquerading as C compilers\n     incorrectly reject 9223372036854775807.  */\n-#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+#define LARGE_OFF_T ((((off_t) 1 << 31) << 31) - 1 + (((off_t) 1 << 31) << 31))\n   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n \t\t       && LARGE_OFF_T % 2147483647 == 1)\n \t\t      ? 1 : -1];\n@@ -12338,7 +12350,7 @@ else\n     We can't simply define LARGE_OFF_T to be 9223372036854775807,\n     since some C++ compilers masquerading as C compilers\n     incorrectly reject 9223372036854775807.  */\n-#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+#define LARGE_OFF_T ((((off_t) 1 << 31) << 31) - 1 + (((off_t) 1 << 31) << 31))\n   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n \t\t       && LARGE_OFF_T % 2147483647 == 1)\n \t\t      ? 1 : -1];\n@@ -12362,7 +12374,7 @@ rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n     We can't simply define LARGE_OFF_T to be 9223372036854775807,\n     since some C++ compilers masquerading as C compilers\n     incorrectly reject 9223372036854775807.  */\n-#define LARGE_OFF_T (((off_t) 1 << 62) - 1 + ((off_t) 1 << 62))\n+#define LARGE_OFF_T ((((off_t) 1 << 31) << 31) - 1 + (((off_t) 1 << 31) << 31))\n   int off_t_is_large[(LARGE_OFF_T % 2147483629 == 721\n \t\t       && LARGE_OFF_T % 2147483647 == 1)\n \t\t      ? 1 : -1];\n@@ -14740,6 +14752,8 @@ do\n     elf32_le_vec)\t\t tb=\"$tb elf32-gen.lo elf32.lo $elf\" ;;\n     elf64_be_vec)\t\t tb=\"$tb elf64-gen.lo elf64.lo $elf\"; target_size=64 ;;\n     elf64_le_vec)\t\t tb=\"$tb elf64-gen.lo elf64.lo $elf\"; target_size=64 ;;\n+    bpf_elf64_le_vec)\t\t tb=\"$tb elf64-bpf.lo elf64.lo $elf\" ;;\n+    bpf_elf64_be_vec)\t\t tb=\"$tb elf64-bpf.lo elf64.lo $elf\" ;;\n     epiphany_elf32_vec)\t\t tb=\"$tb elf32-epiphany.lo elf32.lo $elf\" ;;\n     fr30_elf32_vec)\t\t tb=\"$tb elf32-fr30.lo elf32.lo $elf\" ;;\n     frv_elf32_vec)\t\t tb=\"$tb elf32-frv.lo elf32.lo $elf\" ;;"
    },
    {
      "sha": "fe6754e789f214983b9539292d4f49e458f9adf6",
      "filename": "bfd/configure.ac",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure.ac?ref=fd0de36e274c8141a5dd4579cd04856dc88370da",
      "patch": "@@ -476,6 +476,8 @@ do\n     elf32_le_vec)\t\t tb=\"$tb elf32-gen.lo elf32.lo $elf\" ;;\n     elf64_be_vec)\t\t tb=\"$tb elf64-gen.lo elf64.lo $elf\"; target_size=64 ;;\n     elf64_le_vec)\t\t tb=\"$tb elf64-gen.lo elf64.lo $elf\"; target_size=64 ;;\n+    bpf_elf64_le_vec)\t\t tb=\"$tb elf64-bpf.lo elf64.lo $elf\" ;;\n+    bpf_elf64_be_vec)\t\t tb=\"$tb elf64-bpf.lo elf64.lo $elf\" ;;\n     epiphany_elf32_vec)\t\t tb=\"$tb elf32-epiphany.lo elf32.lo $elf\" ;;\n     fr30_elf32_vec)\t\t tb=\"$tb elf32-fr30.lo elf32.lo $elf\" ;;\n     frv_elf32_vec)\t\t tb=\"$tb elf32-frv.lo elf32.lo $elf\" ;;"
    },
    {
      "sha": "57fe7d75026e00045b7cbc6c851cc6c3895d8711",
      "filename": "bfd/cpu-bpf.c",
      "status": "added",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/cpu-bpf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/cpu-bpf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-bpf.c?ref=fd0de36e274c8141a5dd4579cd04856dc88370da",
      "patch": "@@ -0,0 +1,41 @@\n+/* BFD support for the BPF processor.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+   Contributed by Oracle Inc.\n+\n+   This file is part of BFD, the Binary File Descriptor library.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#include \"sysdep.h\"\n+#include \"bfd.h\"\n+#include \"libbfd.h\"\n+\n+const bfd_arch_info_type bfd_bpf_arch =\n+{\n+  64,\t\t\t\t/* Bits per word */\n+  64,\t\t\t\t/* Bits per address.  */\n+  8,\t\t\t\t/* Bits per byte.  */\n+  bfd_arch_bpf,\t\t\t/* Architecture.  */\n+  bfd_mach_bpf,\t\t\t/* Machine.  */\n+  \"bpf\",\t\t\t/* Architecture name.  */\n+  \"bpf\",\t\t\t/* Machine name.  */\n+  3,\t\t\t\t/* Section align power.  */\n+  TRUE,\t\t\t\t/* The default ?  */\n+  bfd_default_compatible,\t/* Architecture comparison fn.  */\n+  bfd_default_scan,\t\t/* String to architecture convert fn.  */\n+  bfd_arch_default_fill,\t/* Default fill.  */\n+  NULL\t\t\t\t/* Next in list.  */\n+};"
    },
    {
      "sha": "3bfa25b54b559e83a0688efb95836e731805e3ac",
      "filename": "bfd/elf64-bpf.c",
      "status": "added",
      "additions": 463,
      "deletions": 0,
      "changes": 463,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/elf64-bpf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/elf64-bpf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-bpf.c?ref=fd0de36e274c8141a5dd4579cd04856dc88370da",
      "patch": "@@ -0,0 +1,463 @@\n+/* Linux bpf specific support for 64-bit ELF\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+   Contributed by Oracle Inc.\n+\n+   This file is part of BFD, the Binary File Descriptor library.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+#include \"sysdep.h\"\n+#include \"bfd.h\"\n+#include \"libbfd.h\"\n+#include \"elf-bfd.h\"\n+#include \"elf/bpf.h\"\n+#include \"libiberty.h\"\n+\n+/* In case we're on a 32-bit machine, construct a 64-bit \"-1\" value.  */\n+#define MINUS_ONE (~ (bfd_vma) 0)\n+\n+#define BASEADDR(SEC)\t((SEC)->output_section->vma + (SEC)->output_offset)\n+\n+/* Handler for PC-relative relocations, which must be handled in\n+   64-bit words.  */\n+\n+static bfd_reloc_status_type\n+bpf_elf_insn_disp_reloc (bfd *abfd,\n+                         arelent *reloc_entry,\n+                         asymbol *symbol,\n+                         void *data,\n+                         asection *input_section,\n+                         bfd *output_bfd,\n+                         char **error_message ATTRIBUTE_UNUSED)\n+{\n+  bfd_signed_vma relocation;\n+  bfd_signed_vma addend;\n+  reloc_howto_type *howto = reloc_entry->howto;\n+\n+  /* This part is from bfd_elf_generic_reloc.  */\n+  if (output_bfd != NULL\n+      && (symbol->flags & BSF_SECTION_SYM) == 0\n+      && (! reloc_entry->howto->partial_inplace\n+\t  || reloc_entry->addend == 0))\n+    {\n+      reloc_entry->address += input_section->output_offset;\n+      return bfd_reloc_ok;\n+    }\n+\n+  /* This works because partial_inplace is FALSE.  */\n+  if (output_bfd != NULL)\n+    return bfd_reloc_continue;\n+\n+  if (reloc_entry->address > bfd_get_section_limit (abfd, input_section))\n+    return bfd_reloc_outofrange;\n+\n+  relocation = (symbol->value\n+\t\t+ symbol->section->output_section->vma\n+\t\t+ symbol->section->output_offset);\n+  /* Make it PC relative.  */\n+  relocation -= (input_section->output_section->vma\n+                 + input_section->output_offset);\n+  relocation -= reloc_entry->address;\n+  /* Make it 64-bit words.  */\n+  relocation = relocation / 8;\n+\n+  /* Get the addend from the instruction and apply it.  */\n+  switch (howto->bitsize)\n+    {\n+    default:\n+      abort ();\n+      break;\n+    case 16:\n+      addend = bfd_get_16 (abfd, (bfd_byte *) data + reloc_entry->address + 2);\n+      break;\n+    case 32:\n+      addend = bfd_get_32 (abfd, (bfd_byte *) data + reloc_entry->address + 4);\n+      break;\n+    }\n+\n+  if ((addend & (((~howto->src_mask) >> 1) & howto->src_mask)) != 0)\n+    addend -= (((~howto->src_mask) >> 1) & howto->src_mask) << 1;\n+  relocation += addend;\n+\n+  /* Write out the relocated value.  */\n+  switch (howto->bitsize)\n+    {\n+    default:\n+      abort ();\n+      break;\n+    case 16:\n+      bfd_put_16 (abfd, relocation, (bfd_byte *) data + reloc_entry->address + 2);\n+      break;\n+    case 32:\n+      bfd_put_32 (abfd, relocation, (bfd_byte *) data + reloc_entry->address + 4);\n+      break;\n+    }\n+\n+  /* Check for overflow.  */\n+  if (howto->complain_on_overflow == complain_overflow_signed)\n+    {\n+      bfd_signed_vma reloc_signed_max = (1 << (howto->bitsize - 1)) - 1;\n+      bfd_signed_vma reloc_signed_min = ~reloc_signed_max;\n+      \n+      if (relocation > reloc_signed_max || relocation < reloc_signed_min)\n+        return bfd_reloc_overflow;\n+    }\n+  else\n+    abort();\n+\n+  return bfd_reloc_ok;\n+}\n+\n+/* Relocation tables.  */\n+static reloc_howto_type bpf_elf_howto_table [] =\n+{\n+  /* This reloc does nothing.  */\n+  HOWTO (R_BPF_NONE,\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 3,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 0,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_dont, /* complain_on_overflow */\n+\t bfd_elf_generic_reloc, /* special_function */\n+\t \"R_BPF_NONE\",\t\t/* name */\n+\t FALSE,\t\t\t/* partial_inplace */\n+\t 0,\t\t\t/* src_mask */\n+\t 0,\t\t\t/* dst_mask */\n+\t FALSE),\t\t/* pcrel_offset */\n+\n+  /* 64-immediate in LDDW instruction.  */\n+  HOWTO (R_BPF_INSN_64,\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 4,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 64,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_signed, /* complain_on_overflow */\n+\t bfd_elf_generic_reloc, /* special_function */\n+\t \"R_BPF_INSN_64\",\t/* name */\n+\t FALSE,\t\t\t/* partial_inplace */\n+\t 0,\t\t\t/* src_mask */\n+\t MINUS_ONE,\t\t/* dst_mask */\n+\t TRUE),\t\t\t/* pcrel_offset */\n+\n+  /* 32-immediate in LDDW instruction.  */\n+  HOWTO (R_BPF_INSN_32,\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 32,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_signed, /* complain_on_overflow */\n+\t bfd_elf_generic_reloc, /* special_function */\n+\t \"R_BPF_INSN_32\",\t/* name */\n+\t FALSE,\t\t\t/* partial_inplace */\n+\t 0,\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t/* dst_mask */\n+\t TRUE),\t\t\t/* pcrel_offset */\n+\n+  /* 16-bit offsets in instructions.  */\n+  HOWTO (R_BPF_INSN_16,\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 16,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_signed, /* complain_on_overflow */\n+\t bfd_elf_generic_reloc, /* special_function */\n+\t \"R_BPF_INSN_16\",\t/* name */\n+\t FALSE,\t\t\t/* partial_inplace */\n+\t 0,\t\t\t/* src_mask */\n+\t 0x0000ffff,\t\t/* dst_mask */\n+\t TRUE),\t\t\t/* pcrel_offset */\n+\n+  /* 16-bit PC-relative address in jump instructions.  */\n+  HOWTO (R_BPF_INSN_DISP16,\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 16,\t\t\t/* bitsize */\n+\t TRUE,\t\t\t/* pc_relative */\n+\t 32,\t\t\t/* bitpos */\n+\t complain_overflow_signed, /* complain_on_overflow */\n+\t bpf_elf_insn_disp_reloc, /* special_function */\n+\t \"R_BPF_INSN_DISP16\",   /* name */\n+\t FALSE,\t\t\t/* partial_inplace */\n+\t 0xffff,\t\t/* src_mask */\n+\t 0xffff,\t\t/* dst_mask */\n+\t TRUE),\t\t\t/* pcrel_offset */\n+\n+  HOWTO (R_BPF_DATA_8_PCREL,\n+\t 0,\t\t\t/* rightshift */\n+\t 0,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 8,\t\t\t/* bitsize */\n+\t TRUE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_signed, /* complain_on_overflow */\n+\t bfd_elf_generic_reloc, /* special_function */\n+\t \"R_BPF_8_PCREL\",\t/* name */\n+\t FALSE,\t\t\t/* partial_inplace */\n+\t 0,\t\t\t/* src_mask */\n+\t 0xff,\t\t\t/* dst_mask */\n+\t TRUE),\t\t\t/* pcrel_offset */\n+\n+  HOWTO (R_BPF_DATA_16_PCREL,\n+\t 0,\t\t\t/* rightshift */\n+\t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 16,\t\t\t/* bitsize */\n+\t TRUE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_signed, /* complain_on_overflow */\n+\t bfd_elf_generic_reloc, /* special_function */\n+\t \"R_BPF_16_PCREL\",\t/* name */\n+\t FALSE,\t\t\t/* partial_inplace */\n+\t 0,\t\t\t/* src_mask */\n+\t 0xffff,\t\t/* dst_mask */\n+\t TRUE),\t\t\t/* pcrel_offset */\n+\n+  HOWTO (R_BPF_DATA_32_PCREL,\n+\t 0,\t\t\t/* rightshift */\n+\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 32,\t\t\t/* bitsize */\n+\t TRUE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_signed, /* complain_on_overflow */\n+\t bfd_elf_generic_reloc, /* special_function */\n+\t \"R_BPF_32_PCREL\",\t/* name */\n+\t FALSE,\t\t\t/* partial_inplace */\n+\t 0,\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t/* dst_mask */\n+\t TRUE),\t\t\t/* pcrel_offset */\n+\n+  HOWTO (R_BPF_DATA_8,\n+\t 0,\t\t\t/* rightshift */\n+\t 0,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 8,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_unsigned, /* complain_on_overflow */\n+\t bfd_elf_generic_reloc, /* special_function */\n+\t \"R_BPF_DATA_8\",\t/* name */\n+\t FALSE,\t\t\t/* partial_inplace */\n+\t 0,\t\t\t/* src_mask */\n+\t 0xff,\t\t\t/* dst_mask */\n+\t FALSE),\t\t/* pcrel_offset */\n+\n+  HOWTO (R_BPF_DATA_16,\n+\t 0,\t\t\t/* rightshift */\n+\t 1,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 16,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_unsigned, /* complain_on_overflow */\n+\t bfd_elf_generic_reloc, /* special_function */\n+\t \"R_BPF_DATA_16\",\t/* name */\n+\t FALSE,\t\t\t/* partial_inplace */\n+\t 0,\t\t\t/* src_mask */\n+\t 0xffff,\t\t/* dst_mask */\n+\t FALSE),\t\t/* pcrel_offset */\n+\n+  /* 32-bit PC-relative address in call instructions.  */\n+  HOWTO (R_BPF_INSN_DISP32,\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 32,\t\t\t/* bitsize */\n+\t TRUE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_signed, /* complain_on_overflow */\n+\t bpf_elf_insn_disp_reloc, /* special_function */\n+\t \"R_BPF_INSN_DISP32\",   /* name */\n+\t FALSE,\t\t\t/* partial_inplace */\n+\t 0xffffffff,\t\t/* src_mask */\n+\t 0xffffffff,\t\t/* dst_mask */\n+\t TRUE),\t\t\t/* pcrel_offset */\n+\n+  /* 32-bit data.  */\n+  HOWTO (R_BPF_DATA_32,\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 2,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 32,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_bitfield, /* complain_on_overflow */\n+\t bfd_elf_generic_reloc, /* special_function */\n+\t \"R_BPF_DATA_32\",\t/* name */\n+\t FALSE,\t\t\t/* partial_inplace */\n+\t 0,\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t/* dst_mask */\n+\t TRUE),\t\t\t/* pcrel_offset */\n+\n+  /* 64-bit data.  */\n+  HOWTO (R_BPF_DATA_64,\t\t/* type */\n+\t 0,\t\t\t/* rightshift */\n+\t 4,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 64,\t\t\t/* bitsize */\n+\t FALSE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_bitfield, /* complain_on_overflow */\n+\t bfd_elf_generic_reloc, /* special_function */\n+\t \"R_BPF_DATA_64\",\t/* name */\n+\t FALSE,\t\t\t/* partial_inplace */\n+\t 0,\t\t\t/* src_mask */\n+\t MINUS_ONE,\t\t/* dst_mask */\n+\t TRUE),\t\t\t/* pcrel_offset */\n+\n+  HOWTO (R_BPF_DATA_64_PCREL,\n+\t 0,\t\t\t/* rightshift */\n+\t 4,\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n+\t 64,\t\t\t/* bitsize */\n+\t TRUE,\t\t\t/* pc_relative */\n+\t 0,\t\t\t/* bitpos */\n+\t complain_overflow_signed, /* complain_on_overflow */\n+\t bfd_elf_generic_reloc, /* special_function */\n+\t \"R_BPF_64_PCREL\",\t/* name */\n+\t FALSE,\t\t\t/* partial_inplace */\n+\t 0,\t\t\t/* src_mask */\n+\t MINUS_ONE,\t\t/* dst_mask */\n+\t TRUE),\t\t\t/* pcrel_offset */\n+};\n+#undef AHOW\n+\n+/* Map BFD reloc types to bpf ELF reloc types.  */\n+\n+static reloc_howto_type *\n+bpf_reloc_type_lookup (bfd * abfd ATTRIBUTE_UNUSED,\n+                        bfd_reloc_code_real_type code)\n+{\n+  /* Note that the bpf_elf_howto_table is indxed by the R_\n+     constants.  Thus, the order that the howto records appear in the\n+     table *must* match the order of the relocation types defined in\n+     include/elf/bpf.h.  */\n+\n+  switch (code)\n+    {\n+    case BFD_RELOC_NONE:\n+      return &bpf_elf_howto_table[ (int) R_BPF_NONE];\n+\n+    case BFD_RELOC_8_PCREL:\n+      return &bpf_elf_howto_table[ (int) R_BPF_DATA_8_PCREL];\n+    case BFD_RELOC_16_PCREL:\n+      return &bpf_elf_howto_table[ (int) R_BPF_DATA_16_PCREL];\n+    case BFD_RELOC_32_PCREL:\n+      return &bpf_elf_howto_table[ (int) R_BPF_DATA_32_PCREL];\n+    case BFD_RELOC_64_PCREL:\n+      return &bpf_elf_howto_table[ (int) R_BPF_DATA_64_PCREL];\n+\n+    case BFD_RELOC_8:\n+      return &bpf_elf_howto_table[ (int) R_BPF_DATA_8];\n+    case BFD_RELOC_16:\n+      return &bpf_elf_howto_table[ (int) R_BPF_DATA_16];\n+    case BFD_RELOC_32:\n+      return &bpf_elf_howto_table[ (int) R_BPF_DATA_32];\n+    case BFD_RELOC_64:\n+      return &bpf_elf_howto_table[ (int) R_BPF_DATA_64];\n+\n+    case BFD_RELOC_BPF_64:\n+      return &bpf_elf_howto_table[ (int) R_BPF_INSN_64];\n+    case BFD_RELOC_BPF_32:\n+      return &bpf_elf_howto_table[ (int) R_BPF_INSN_32];\n+    case BFD_RELOC_BPF_16:\n+      return &bpf_elf_howto_table[ (int) R_BPF_INSN_16];\n+    case BFD_RELOC_BPF_DISP16:\n+      return &bpf_elf_howto_table[ (int) R_BPF_INSN_DISP16];\n+    case BFD_RELOC_BPF_DISP32:\n+      return &bpf_elf_howto_table[ (int) R_BPF_INSN_DISP32];\n+\n+    default:\n+      /* Pacify gcc -Wall.  */\n+      return NULL;\n+    }\n+  return NULL;\n+}\n+\n+/* Map BFD reloc names to bpf ELF reloc names.  */\n+\n+static reloc_howto_type *\n+bpf_reloc_name_lookup (bfd *abfd ATTRIBUTE_UNUSED, const char *r_name)\n+{\n+  unsigned int i;\n+\n+  for (i = 0; i < ARRAY_SIZE (bpf_elf_howto_table); i++)\n+    if (bpf_elf_howto_table[i].name != NULL\n+\t&& strcasecmp (bpf_elf_howto_table[i].name, r_name) == 0)\n+      return &bpf_elf_howto_table[i];\n+\n+  return NULL;\n+}\n+\n+/* Set the howto pointer for a bpf reloc.  */\n+\n+static bfd_boolean\n+bpf_info_to_howto (bfd *abfd, arelent *bfd_reloc,\n+                    Elf_Internal_Rela *elf_reloc)\n+{\n+  unsigned int r_type;\n+\n+  r_type = ELF64_R_TYPE (elf_reloc->r_info);\n+  if (r_type >= (unsigned int) R_BPF_max)\n+    {\n+      /* xgettext:c-format */\n+      _bfd_error_handler (_(\"%pB: unsupported relocation type %#x\"),\n+                          abfd, r_type);\n+      bfd_set_error (bfd_error_bad_value);\n+      return FALSE;\n+    }\n+\n+  bfd_reloc->howto = &bpf_elf_howto_table [r_type];\n+  return TRUE;\n+}\n+\n+/* Merge backend specific data from an object file to the output\n+   object file when linking.  */\n+\n+static bfd_boolean\n+elf64_bpf_merge_private_bfd_data (bfd *ibfd, struct bfd_link_info *info)\n+{\n+  /* Check if we have the same endianness.  */\n+  if (! _bfd_generic_verify_endian_match (ibfd, info))\n+    return FALSE;\n+\n+  return TRUE;\n+}\n+\n+/* The macros below configure the architecture.  */\n+\n+#define TARGET_LITTLE_SYM bpf_elf64_le_vec\n+#define TARGET_LITTLE_NAME \"elf64-bpfle\"\n+\n+#define TARGET_BIG_SYM bpf_elf64_be_vec\n+#define TARGET_BIG_NAME \"elf64-bpfbe\"\n+\n+#define ELF_ARCH bfd_arch_bpf\n+#define ELF_MACHINE_CODE EM_BPF\n+\n+#define ELF_MAXPAGESIZE 0x100000\n+\n+#define elf_info_to_howto_rel bpf_info_to_howto\n+#define elf_info_to_howto bpf_info_to_howto\n+\n+#define elf_backend_may_use_rel_p\t\t1\n+#define elf_backend_may_use_rela_p\t\t0\n+#define elf_backend_default_use_rela_p\t\t0\n+\n+#define elf_backend_can_gc_sections\t\t0\n+\n+#define elf_symbol_leading_char\t\t\t'_'\n+#define bfd_elf64_bfd_reloc_type_lookup\t\tbpf_reloc_type_lookup\n+#define bfd_elf64_bfd_reloc_name_lookup\t\tbpf_reloc_name_lookup\n+\n+#define bfd_elf64_bfd_merge_private_bfd_data elf64_bpf_merge_private_bfd_data\n+\n+#include \"elf64-target.h\""
    },
    {
      "sha": "da52a2b0982d96fe9532e98e8ac2c4bbcf64ad8e",
      "filename": "bfd/libbfd.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/libbfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/libbfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.h?ref=fd0de36e274c8141a5dd4579cd04856dc88370da",
      "patch": "@@ -3238,6 +3238,11 @@ static const char *const bfd_reloc_code_real_names[] = { \"@@uninitialized@@\",\n   \"BFD_RELOC_TILEGX_IMM8_X1_TLS_ADD\",\n   \"BFD_RELOC_TILEGX_IMM8_Y0_TLS_ADD\",\n   \"BFD_RELOC_TILEGX_IMM8_Y1_TLS_ADD\",\n+  \"BFD_RELOC_BPF_64\",\n+  \"BFD_RELOC_BPF_32\",\n+  \"BFD_RELOC_BPF_16\",\n+  \"BFD_RELOC_BPF_DISP16\",\n+  \"BFD_RELOC_BPF_DISP32\",\n   \"BFD_RELOC_EPIPHANY_SIMM8\",\n   \"BFD_RELOC_EPIPHANY_SIMM24\",\n   \"BFD_RELOC_EPIPHANY_HIGH\","
    },
    {
      "sha": "8f0263e35491dac5e561525e375f4a80ab1233e4",
      "filename": "bfd/reloc.c",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/reloc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/reloc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/reloc.c?ref=fd0de36e274c8141a5dd4579cd04856dc88370da",
      "patch": "@@ -7882,6 +7882,19 @@ ENUMX\n ENUMDOC\n   Tilera TILE-Gx Relocations.\n \n+ENUM\n+  BFD_RELOC_BPF_64\n+ENUMX\n+  BFD_RELOC_BPF_32\n+ENUMX\n+  BFD_RELOC_BPF_16\n+ENUMX\n+  BFD_RELOC_BPF_DISP16\n+ENUMX\n+  BFD_RELOC_BPF_DISP32\n+ENUMDOC\n+  Linux eBPF relocations.\n+\n ENUM\n   BFD_RELOC_EPIPHANY_SIMM8\n ENUMDOC"
    },
    {
      "sha": "d3d52a5e2aa078c1611f4af8cdf0ccd531c03c12",
      "filename": "bfd/targets.c",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/targets.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd0de36e274c8141a5dd4579cd04856dc88370da/bfd/targets.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/targets.c?ref=fd0de36e274c8141a5dd4579cd04856dc88370da",
      "patch": "@@ -639,6 +639,8 @@ extern const bfd_target elf32_be_vec;\n extern const bfd_target elf32_le_vec;\n extern const bfd_target elf64_be_vec;\n extern const bfd_target elf64_le_vec;\n+extern const bfd_target bpf_elf64_le_vec;\n+extern const bfd_target bpf_elf64_be_vec;\n extern const bfd_target epiphany_elf32_vec;\n extern const bfd_target fr30_elf32_vec;\n extern const bfd_target frv_elf32_vec;\n@@ -1020,6 +1022,11 @@ static const bfd_target * const _bfd_target_vector[] =\n \n \t&iamcu_elf32_vec,\n \n+#ifdef BFD64\n+\t&bpf_elf64_be_vec,\n+\t&bpf_elf64_le_vec,\n+#endif\n+\n #ifdef BFD64\n #if 0\n \t&ia64_elf32_be_vec,"
    }
  ]
}