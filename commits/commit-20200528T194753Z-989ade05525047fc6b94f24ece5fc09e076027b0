{
  "sha": "989ade05525047fc6b94f24ece5fc09e076027b0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTg5YWRlMDU1MjUwNDdmYzZiOTRmMjRlY2U1ZmMwOWUwNzYwMjdiMA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-05-28T19:47:53Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-05-28T19:47:53Z"
    },
    "message": "gdb: add comment in dwarf_evaluate_loc_desc::push_dwarf_reg_entry_value\n\nAdd a comment to clarify why we temporarily override some of the\ncontext's fields, and especially the per_objfile field.  A longer\nexplanation can be found in this previous commit\n\n    44486dcf19b (\"gdb: use caller objfile in dwarf_evaluate_loc_desc::push_dwarf_reg_entry_value\")\n\ngdb/ChangeLog:\n\n\t* dwarf2/loc.c (class dwarf_evaluate_loc_desc)\n\t<push_dwarf_reg_entry_value>: Add comment.\n\nChange-Id: I60c6e1062799f729b30a9db78bcb6448783324b4",
    "tree": {
      "sha": "572f397400e3008548b24603eeaebc15cc5ce594",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/572f397400e3008548b24603eeaebc15cc5ce594"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/989ade05525047fc6b94f24ece5fc09e076027b0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/989ade05525047fc6b94f24ece5fc09e076027b0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/989ade05525047fc6b94f24ece5fc09e076027b0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/989ade05525047fc6b94f24ece5fc09e076027b0/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c47bae859a5af0d95224d90000df0e529f7c5aa0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c47bae859a5af0d95224d90000df0e529f7c5aa0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c47bae859a5af0d95224d90000df0e529f7c5aa0"
    }
  ],
  "stats": {
    "total": 11,
    "additions": 11,
    "deletions": 0
  },
  "files": [
    {
      "sha": "44300d258ea922b15293da5e5198b047a408f6b9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/989ade05525047fc6b94f24ece5fc09e076027b0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/989ade05525047fc6b94f24ece5fc09e076027b0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=989ade05525047fc6b94f24ece5fc09e076027b0",
      "patch": "@@ -1,3 +1,8 @@\n+2020-05-28  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* dwarf2/loc.c (class dwarf_evaluate_loc_desc)\n+\t<push_dwarf_reg_entry_value>: Add comment.\n+\n 2020-05-28  Kevin Buettner  <kevinb@redhat.com>\n \t    Keith Seitz  <keiths@redhat.com>\n "
    },
    {
      "sha": "400bb4d16fc7ad7d37bcf03e054d87db96277894",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/989ade05525047fc6b94f24ece5fc09e076027b0/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/989ade05525047fc6b94f24ece5fc09e076027b0/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=989ade05525047fc6b94f24ece5fc09e076027b0",
      "patch": "@@ -731,6 +731,12 @@ class dwarf_evaluate_loc_desc : public dwarf_expr_context\n       throw_error (NO_ENTRY_VALUE_ERROR,\n \t\t   _(\"Cannot resolve DW_AT_call_data_value\"));\n \n+    /* We are about to evaluate an expression in the context of the caller\n+       of the current frame.  This evaluation context may be different from\n+       the current (callee's) context), so temporarily set the caller's context.\n+\n+       It is possible for the caller to be from a different objfile from the\n+       callee if the call is made through a function pointer.  */\n     scoped_restore save_frame = make_scoped_restore (&this->frame,\n \t\t\t\t\t\t     caller_frame);\n     scoped_restore save_per_cu = make_scoped_restore (&this->per_cu,"
    }
  ]
}