{
  "sha": "0b88415108880f2bd6c0f40937d7c321e524c3a9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGI4ODQxNTEwODg4MGYyYmQ2YzBmNDA5MzdkN2MzMjFlNTI0YzNhOQ==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-06-11T14:48:55Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-07-22T17:03:57Z"
    },
    "message": "binutils, testsuite: allow compilation before doing run_dump_test\n\nThe CTF assembler emitted by GCC has architecture-dependent pseudos in\nit, and is (obviously) tightly tied to a particular set of C source\nfiles with specific types in them.  The CTF tests do run_dump_test on\nsome candidate input, link it using the run_dump_test ld machinery, and\ncompare objdump --ctf output.  To avoid skew, we'd like to be able\nto easily regenerate the .s being scanned so that the .c doesn't get\nout of sync with it, but since GCC emits arch-dependent pseudos, we\nare forced to hand-hack the output every time (quite severely on some\narches, like x86-32 and -64, where every single pseudo used is not only\narch-dependent but undocumented).\n\nTo avoid this, teach run_dump_test how to optionally compile things\ngiven new, optional additional flags passed in in the cc option.\nOnly sources with the .c suffix are compiled, so there is no effect on\nany existing tests.  The .s files go into the tmpdir, from which\nexisting run_dump_test code picks them up as usual.\n\nbinutils/\n\t* testsuite/lib/binutils-common.exp (run_dump_test): Add 'cc'\n\toption.",
    "tree": {
      "sha": "ca94212dd096d685499076dd1a18817a368e4303",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ca94212dd096d685499076dd1a18817a368e4303"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0b88415108880f2bd6c0f40937d7c321e524c3a9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b88415108880f2bd6c0f40937d7c321e524c3a9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0b88415108880f2bd6c0f40937d7c321e524c3a9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b88415108880f2bd6c0f40937d7c321e524c3a9/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5dba6f05b7ba3d0e1c99da54592815564c782b39",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5dba6f05b7ba3d0e1c99da54592815564c782b39",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5dba6f05b7ba3d0e1c99da54592815564c782b39"
    }
  ],
  "stats": {
    "total": 63,
    "additions": 58,
    "deletions": 5
  },
  "files": [
    {
      "sha": "69596150c92df6e0e46c54e6cecd04241b8c9980",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b88415108880f2bd6c0f40937d7c321e524c3a9/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b88415108880f2bd6c0f40937d7c321e524c3a9/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=0b88415108880f2bd6c0f40937d7c321e524c3a9",
      "patch": "@@ -1,3 +1,8 @@\n+2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* testsuite/lib/binutils-common.exp (run_dump_test): Add 'cc'\n+\toption.\n+\n 2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* objdump.c (dump_ctf_archive_member): Remove linefeeds."
    },
    {
      "sha": "b9a1e6e4bc0c8644a3273a8532088ed05eb4fcea",
      "filename": "binutils/testsuite/lib/binutils-common.exp",
      "status": "modified",
      "additions": 53,
      "deletions": 5,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b88415108880f2bd6c0f40937d7c321e524c3a9/binutils/testsuite/lib/binutils-common.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b88415108880f2bd6c0f40937d7c321e524c3a9/binutils/testsuite/lib/binutils-common.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/lib/binutils-common.exp?ref=0b88415108880f2bd6c0f40937d7c321e524c3a9",
      "patch": "@@ -576,6 +576,7 @@ if ![string length [info proc prune_warnings]] {\n # run_dump_test FILE (optional:) EXTRA_OPTIONS\n #\n # Assemble a .s file, then run some utility on it and check the output.\n+# Optionally generate the .s file first by running the compiler.\n #\n # There should be an assembly language file named FILE.s in the test\n # suite directory, and a pattern file called FILE.d.  run_dump_test\n@@ -634,6 +635,11 @@ if ![string length [info proc prune_warnings]] {\n #   ld_after_inputfiles: FLAGS\n #\tSimilar to \"ld\", but put FLAGS after all input files.\n #\n+#   cc: FLAGS\n+#       Run the compiler with FLAGS (to which -S is added) to generate assembler\n+#       source first.  source: must be provided and should consist of .c files.\n+#       Source-specific CC flags are not supported.\n+#\n #   objcopy_objects: FLAGS\n #\tRun objcopy with the specified flags after assembling any source\n #\tthat has the special marker RUN_OBJCOPY in the source specific\n@@ -760,8 +766,8 @@ if ![string length [info proc prune_warnings]] {\n # regexps in FILE.d.\n #\n proc run_dump_test { name {extra_options {}} } {\n-    global ADDR2LINE ADDR2LINEFLAGS AS ASFLAGS ELFEDIT ELFEDITFLAGS LD LDFLAGS\n-    global NM NMFLAGS OBJCOPY OBJCOPYFLAGS OBJDUMP OBJDUMPFLAGS\n+    global ADDR2LINE ADDR2LINEFLAGS AS ASFLAGS CC CFLAGS ELFEDIT ELFEDITFLAGS\n+    global LD LDFLAGS NM NMFLAGS OBJCOPY OBJCOPYFLAGS OBJDUMP OBJDUMPFLAGS\n     global READELF READELFFLAGS STRIP STRIPFLAGS\n     global copyfile env runtests srcdir subdir verbose\n \n@@ -795,6 +801,7 @@ proc run_dump_test { name {extra_options {}} } {\n     set opts(as) {}\n     set as_final_flags {}\n     set as_additional_flags {}\n+    set opts(cc) {}\n     set opts(dump) {}\n     set opts(elfedit) {}\n     set opts(error) {}\n@@ -838,10 +845,10 @@ proc run_dump_test { name {extra_options {}} } {\n \t    return\n \t}\n \n-\t# Allow more substitutions, including tcl functions, for as and ld.\n-\t# Not done in general because extra quoting is needed for glob\n+\t# Allow more substitutions, including tcl functions, for as, ld,\n+\t# and cc.  Not done in general because extra quoting is needed for glob\n \t# args used for example in binutils-all/remove-relocs-04.d.\n-\tif { $opt_name == \"as\" || $opt_name == \"ld\" } {\n+\tif { $opt_name == \"as\" || $opt_name == \"ld\" || $opt_name == \"cc\" } {\n \t    set opt_val [subst $opt_val]\n \t} else {\n \t    # Just substitute $srcdir and $subdir\n@@ -1047,6 +1054,47 @@ proc run_dump_test { name {extra_options {}} } {\n \t}\n     }\n \n+    # Possibly compile some of the inputs, and build up a replacement\n+    # for opts(source) with the output .s names substituted in as we go.\n+    # Set the .s names from the objfile_names to take advantage of the\n+    # uniquification that happened earlier.\n+    if { $opts(cc) != \"\"} {\n+\tset cmdret 0\n+\tset new_source \"\"\n+\n+\tforeach cfile $opts(source) ofile $objfile_names {\n+\t    if { [file extension $cfile] != \".c\" } {\n+\t\tlappend new_source \"$cfile\"\n+\t\tcontinue\n+\t    }\n+\n+\t    if { ! [string match \"./*\" $cfile] } {\n+\t\tset cfile \"$srcdir/$subdir/$cfile\"\n+\t    }\n+\t    # ofile is never absolute, so this always works to protect sfile\n+\t    # from later absolutization.\n+\t    set sfile \"./[file rootname $ofile].s\"\n+\t    set cmd \"$CC $CFLAGS -S $opts(cc) -o $sfile $cfile\"\n+\t    send_log \"$cmd\\n\"\n+\t    set cmdret [remote_exec host [concat sh -c [list \"$cmd 2>&1\"]] \"\" \"/dev/null\" \"dump.tmp\"]\n+\t    remote_upload host \"dump.tmp\"\n+\t    set comp_output [prune_warnings [file_contents \"dump.tmp\"]]\n+\t    remote_file host delete \"dump.tmp\"\n+\t    remote_file build delete \"dump.tmp\"\n+\t    lappend new_source \"$sfile\"\n+\t    set cmdret [lindex $cmdret 0]\n+\n+\t    regsub \"\\n$\" $comp_output \"\" comp_output\n+\t    if { $cmdret != 0} {\n+\t\tsend_log \"compilation of $cfile failed, exit status $cmdret with <$comp_output>\"\n+                # Should this be 'unresolved', or is that too silent?\n+\t\tfail $testname\n+\t\treturn 0\n+\t    }\n+\t}\n+\tset opts(source) $new_source\n+    }\n+\n     if { $opts(source) == \"\" } {\n \tset sourcefiles [list ${file}.s]\n \tset asflags [list \"\"]"
    }
  ]
}