{
  "sha": "284a1309021a0ef4c29f198470d95652f02b13f0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Mjg0YTEzMDkwMjFhMGVmNGMyOWYxOTg0NzBkOTU2NTJmMDJiMTNmMA==",
  "commit": {
    "author": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2021-05-06T11:51:25Z"
    },
    "committer": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2021-05-06T11:51:25Z"
    },
    "message": "or1k: Support large plt_relocs when generating plt entries\n\nThe current PLT generation code will generate invalid code when the PLT\nrelocation offset exceeds 64k.  This fixes the issue by detecting large\nplt_reloc offsets and generare code sequences to create larger plt\nrelocations.\n\nThe \"large\" plt code needs 2 extra instructions to create 32-bit offsets.\n\nbfd/ChangeLog:\n\n\tPR 27746\n\t* elf32-or1k.c (PLT_ENTRY_SIZE_LARGE, PLT_MAX_INSN_COUNT,\n\tOR1K_ADD, OR1K_ORI): New macros to help with plt creation.\n\t(elf_or1k_link_hash_table): New field plt_count.\n\t(elf_or1k_link_hash_entry): New field plt_index.\n\t(elf_or1k_plt_entry_size): New function.\n\t(or1k_write_plt_entry): Update to support variable size PLTs.\n\t(or1k_elf_finish_dynamic_sections): Use new or1k_write_plt_entry\n\tAPI.\n\t(or1k_elf_finish_dynamic_symbol): Update to write large PLTs\n\twhen needed.\n\t(allocate_dynrelocs): Use elf_or1k_plt_entry_size to account for\n\tPLT size.\n\nld/ChangeLog:\n\n\tPR 27746\n\ttestsuite/ld-or1k/or1k.exp (or1kplttests): Add tests for linking\n\talong with gotha() relocations.\n\ttestsuite/ld-or1k/gotha1.dd: New file.\n\ttestsuite/ld-or1k/gotha1.s: New file.\n\ttestsuite/ld-or1k/gotha2.dd: New file.\n\ttestsuite/ld-or1k/gotha2.s: New file\n\ttestsuite/ld-or1k/pltlib.s (x): Define size to avoid link\n\tfailure.",
    "tree": {
      "sha": "2d03e9e8e31054b85767672cc6802712b14161eb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2d03e9e8e31054b85767672cc6802712b14161eb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/284a1309021a0ef4c29f198470d95652f02b13f0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/284a1309021a0ef4c29f198470d95652f02b13f0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/284a1309021a0ef4c29f198470d95652f02b13f0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/284a1309021a0ef4c29f198470d95652f02b13f0/comments",
  "author": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3c3de29b048bca6b4aa4235c647b9328e71801b6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3c3de29b048bca6b4aa4235c647b9328e71801b6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3c3de29b048bca6b4aa4235c647b9328e71801b6"
    }
  ],
  "stats": {
    "total": 287,
    "additions": 248,
    "deletions": 39
  },
  "files": [
    {
      "sha": "85084531822de3fa80056374b2e0ea1aac7267b2",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/284a1309021a0ef4c29f198470d95652f02b13f0/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/284a1309021a0ef4c29f198470d95652f02b13f0/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=284a1309021a0ef4c29f198470d95652f02b13f0",
      "patch": "@@ -1,3 +1,19 @@\n+2021-05-06  Stafford Horne  <shorne@gmail.com>\n+\n+\tPR 27746\n+\t* elf32-or1k.c (PLT_ENTRY_SIZE_LARGE, PLT_MAX_INSN_COUNT,\n+\tOR1K_ADD, OR1K_ORI): New macros to help with plt creation.\n+\t(elf_or1k_link_hash_table): New field plt_count.\n+\t(elf_or1k_link_hash_entry): New field plt_index.\n+\t(elf_or1k_plt_entry_size): New function.\n+\t(or1k_write_plt_entry): Update to support variable size PLTs.\n+\t(or1k_elf_finish_dynamic_sections): Use new or1k_write_plt_entry\n+\tAPI.\n+\t(or1k_elf_finish_dynamic_symbol): Update to write large PLTs\n+\twhen needed.\n+\t(allocate_dynrelocs): Use elf_or1k_plt_entry_size to account for\n+\tPLT size.\n+\n 2021-05-06  Stafford Horne  <shorne@gmail.com>\n \n \tPR 21464"
    },
    {
      "sha": "4ae7f324d33f6b0af3d0465145da4a52cbb2429f",
      "filename": "bfd/elf32-or1k.c",
      "status": "modified",
      "additions": 110,
      "deletions": 39,
      "changes": 149,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/284a1309021a0ef4c29f198470d95652f02b13f0/bfd/elf32-or1k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/284a1309021a0ef4c29f198470d95652f02b13f0/bfd/elf32-or1k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-or1k.c?ref=284a1309021a0ef4c29f198470d95652f02b13f0",
      "patch": "@@ -30,10 +30,14 @@\n #define N_ONES(X)\t(((bfd_vma)2 << (X)) - 1)\n \n #define PLT_ENTRY_SIZE 16\n+#define PLT_ENTRY_SIZE_LARGE (6*4)\n+#define PLT_MAX_INSN_COUNT 6\n \n #define OR1K_MOVHI(D)\t\t(0x18000000 | (D << 21))\n #define OR1K_ADRP(D)\t\t(0x08000000 | (D << 21))\n #define OR1K_LWZ(D,A)\t\t(0x84000000 | (D << 21) | (A << 16))\n+#define OR1K_ADD(D,A,B)\t\t(0xE0000000 | (D << 21) | (A << 16) | (B << 11))\n+#define OR1K_ORI(D,A)\t\t(0xA8000000 | (D << 21) | (A << 16))\n #define OR1K_ORI0(D)\t\t(0xA8000000 | (D << 21))\n #define OR1K_JR(B)\t\t(0x44000000 | (B << 11))\n #define OR1K_NOP\t\t0x15000000\n@@ -907,6 +911,8 @@ struct elf_or1k_link_hash_entry\n {\n   struct elf_link_hash_entry root;\n \n+  /* For calculating PLT size.  */\n+  bfd_vma plt_index;\n   /* Track type of TLS access.  */\n   unsigned char tls_type;\n };\n@@ -931,9 +937,20 @@ struct elf_or1k_link_hash_table\n {\n   struct elf_link_hash_table root;\n \n+  bfd_vma plt_count;\n   bool saw_plta;\n };\n \n+static size_t\n+elf_or1k_plt_entry_size (bfd_vma plt_index)\n+{\n+  bfd_vma plt_reloc;\n+\n+  plt_reloc = plt_index * sizeof (Elf32_External_Rela);\n+\n+  return (plt_reloc > 0xffff) ? PLT_ENTRY_SIZE_LARGE : PLT_ENTRY_SIZE;\n+}\n+\n /* Get the ELF linker hash table from a link_info structure.  */\n #define or1k_elf_hash_table(p) \\\n   ((is_elf_hash_table ((p)->hash)\t\t\t\t\t\\\n@@ -2222,33 +2239,46 @@ or1k_elf_check_relocs (bfd *abfd,\n }\n \n static void\n-or1k_write_plt_entry (bfd *output_bfd, bfd_byte *contents, unsigned insn1,\n-\t\t      unsigned insn2, unsigned insn3, unsigned insnj)\n+or1k_write_plt_entry (bfd *output_bfd, bfd_byte *contents, unsigned insnj,\n+\t\t      unsigned insns[], size_t insn_count)\n {\n   unsigned nodelay = elf_elfheader (output_bfd)->e_flags & EF_OR1K_NODELAY;\n-  unsigned insn4;\n+  unsigned output_insns[PLT_MAX_INSN_COUNT];\n+\n+  /* Copy instructions into the output buffer.  */\n+  for (size_t i = 0; i < insn_count; i++)\n+    output_insns[i] = insns[i];\n \n   /* Honor the no-delay-slot setting.  */\n-  if (insn3 == OR1K_NOP)\n+  if (insns[insn_count-1] == OR1K_NOP)\n     {\n-      insn4 = insn3;\n+      unsigned slot1, slot2;\n+\n       if (nodelay)\n-\tinsn3 = insnj;\n+\tslot1 = insns[insn_count-2], slot2 = insnj;\n       else\n-\tinsn3 = insn2, insn2 = insnj;\n+\tslot1 = insnj, slot2 = insns[insn_count-2];\n+\n+      output_insns[insn_count-2] = slot1;\n+      output_insns[insn_count-1] = slot2;\n+      output_insns[insn_count]   = OR1K_NOP;\n     }\n   else\n     {\n+      unsigned slot1, slot2;\n+\n       if (nodelay)\n-\tinsn4 = insnj;\n+\tslot1 = insns[insn_count-1], slot2 = insnj;\n       else\n-\tinsn4 = insn3, insn3 = insnj;\n+\tslot1 = insnj, slot2 = insns[insn_count-1];\n+\n+      output_insns[insn_count-1] = slot1;\n+      output_insns[insn_count]   = slot2;\n     }\n \n-  bfd_put_32 (output_bfd, insn1, contents);\n-  bfd_put_32 (output_bfd, insn2, contents + 4);\n-  bfd_put_32 (output_bfd, insn3, contents + 8);\n-  bfd_put_32 (output_bfd, insn4, contents + 12);\n+  /* Write out the output buffer.  */\n+  for (size_t i = 0; i < (insn_count+1); i++)\n+    bfd_put_32 (output_bfd, output_insns[i], contents + (i*4));\n }\n \n /* Finish up the dynamic sections.  */\n@@ -2315,7 +2345,8 @@ or1k_elf_finish_dynamic_sections (bfd *output_bfd,\n       splt = htab->root.splt;\n       if (splt && splt->size > 0)\n \t{\n-\t  unsigned plt0, plt1, plt2;\n+\t  unsigned plt[PLT_MAX_INSN_COUNT];\n+\t  size_t plt_insn_count = 3;\n \t  bfd_vma got_addr = sgot->output_section->vma + sgot->output_offset;\n \n \t  /* Note we force 16 byte alignment on the .got, so that\n@@ -2326,27 +2357,27 @@ or1k_elf_finish_dynamic_sections (bfd *output_bfd,\n \t      bfd_vma pc = splt->output_section->vma + splt->output_offset;\n \t      unsigned pa = ((got_addr >> 13) - (pc >> 13)) & 0x1fffff;\n \t      unsigned po = got_addr & 0x1fff;\n-\t      plt0 = OR1K_ADRP(12) | pa;\n-\t      plt1 = OR1K_LWZ(15,12) | (po + 8);\n-\t      plt2 = OR1K_LWZ(12,12) | (po + 4);\n+\t      plt[0] = OR1K_ADRP(12) | pa;\n+\t      plt[1] = OR1K_LWZ(15,12) | (po + 8);\n+\t      plt[2] = OR1K_LWZ(12,12) | (po + 4);\n \t    }\n \t  else if (bfd_link_pic (info))\n \t    {\n-\t      plt0 = OR1K_LWZ(15, 16) | 8;\t/* .got+8 */\n-\t      plt1 = OR1K_LWZ(12, 16) | 4;\t/* .got+4 */\n-\t      plt2 = OR1K_NOP;\n+\t      plt[0] = OR1K_LWZ(15, 16) | 8;\t/* .got+8 */\n+\t      plt[1] = OR1K_LWZ(12, 16) | 4;\t/* .got+4 */\n+\t      plt[2] = OR1K_NOP;\n \t    }\n \t  else\n \t    {\n \t      unsigned ha = ((got_addr + 0x8000) >> 16) & 0xffff;\n \t      unsigned lo = got_addr & 0xffff;\n-\t      plt0 = OR1K_MOVHI(12) | ha;\n-\t      plt1 = OR1K_LWZ(15,12) | (lo + 8);\n-\t      plt2 = OR1K_LWZ(12,12) | (lo + 4);\n+\t      plt[0] = OR1K_MOVHI(12) | ha;\n+\t      plt[1] = OR1K_LWZ(15,12) | (lo + 8);\n+\t      plt[2] = OR1K_LWZ(12,12) | (lo + 4);\n \t    }\n \n-\t  or1k_write_plt_entry (output_bfd, splt->contents,\n-\t\t\t\tplt0, plt1, plt2, OR1K_JR(15));\n+\t  or1k_write_plt_entry (output_bfd, splt->contents, OR1K_JR(15),\n+\t\t\t\tplt, plt_insn_count);\n \n \t  elf_section_data (splt->output_section)->this_hdr.sh_entsize = 4;\n \t}\n@@ -2389,7 +2420,8 @@ or1k_elf_finish_dynamic_symbol (bfd *output_bfd,\n \n   if (h->plt.offset != (bfd_vma) -1)\n     {\n-      unsigned int plt0, plt1, plt2;\n+      unsigned int plt[PLT_MAX_INSN_COUNT];\n+      size_t plt_insn_count = 3;\n       asection *splt;\n       asection *sgot;\n       asection *srela;\n@@ -2401,6 +2433,7 @@ or1k_elf_finish_dynamic_symbol (bfd *output_bfd,\n       bfd_vma got_offset;\n       bfd_vma got_addr;\n       Elf_Internal_Rela rela;\n+      bool large_plt_entry;\n \n       /* This symbol has an entry in the procedure linkage table.  Set\n \t it up.  */\n@@ -2418,10 +2451,13 @@ or1k_elf_finish_dynamic_symbol (bfd *output_bfd,\n \t corresponds to this symbol.  This is the index of this symbol\n \t in all the symbols for which we are making plt entries.  The\n \t first entry in the procedure linkage table is reserved.  */\n-      plt_index = h->plt.offset / PLT_ENTRY_SIZE - 1;\n+      plt_index = ((struct elf_or1k_link_hash_entry *) h)->plt_index;\n       plt_addr = plt_base_addr + h->plt.offset;\n       plt_reloc = plt_index * sizeof (Elf32_External_Rela);\n \n+      large_plt_entry = (elf_or1k_plt_entry_size (plt_index)\n+\t\t\t == PLT_ENTRY_SIZE_LARGE);\n+\n       /* Get the offset into the .got table of the entry that\n \tcorresponds to this function.  Each .got entry is 4 bytes.\n \tThe first three are reserved.  */\n@@ -2433,27 +2469,57 @@ or1k_elf_finish_dynamic_symbol (bfd *output_bfd,\n \t{\n \t  unsigned pa = ((got_addr >> 13) - (plt_addr >> 13)) & 0x1fffff;\n \t  unsigned po = (got_addr & 0x1fff);\n-\t  plt0 = OR1K_ADRP(12) | pa;\n-\t  plt1 = OR1K_LWZ(12,12) | po;\n-\t  plt2 = OR1K_ORI0(11) | plt_reloc;\n+\t  plt[0] = OR1K_ADRP(12) | pa;\n+\t  plt[1] = OR1K_LWZ(12,12) | po;\n+\t  plt[2] = OR1K_ORI0(11) | plt_reloc;\n \t}\n       else if (bfd_link_pic (info))\n \t{\n-\t  plt0 = OR1K_LWZ(12,16) | got_offset;\n-\t  plt1 = OR1K_ORI0(11) | plt_reloc;\n-\t  plt2 = OR1K_NOP;\n+\t  if (large_plt_entry)\n+\t    {\n+\t      unsigned gotha = ((got_offset + 0x8000) >> 16) & 0xffff;\n+\t      unsigned got = got_offset & 0xffff;\n+\t      unsigned pltrelhi = (plt_reloc >> 16) & 0xffff;\n+\t      unsigned pltrello = plt_reloc & 0xffff;\n+\n+\t      plt[0] = OR1K_MOVHI(12) | gotha;\n+\t      plt[1] = OR1K_ADD(12,12,16);\n+\t      plt[2] = OR1K_LWZ(12,12) | got;\n+\t      plt[3] = OR1K_MOVHI(11) | pltrelhi;\n+\t      plt[4] = OR1K_ORI(11,11) | pltrello;\n+\t      plt_insn_count = 5;\n+\t    }\n+\t  else\n+\t    {\n+\t      plt[0] = OR1K_LWZ(12,16) | got_offset;\n+\t      plt[1] = OR1K_ORI0(11) | plt_reloc;\n+\t      plt[2] = OR1K_NOP;\n+\t    }\n \t}\n       else\n \t{\n \t  unsigned ha = ((got_addr + 0x8000) >> 16) & 0xffff;\n \t  unsigned lo = got_addr & 0xffff;\n-\t  plt0 = OR1K_MOVHI(12) | ha;\n-\t  plt1 = OR1K_LWZ(12,12) | lo;\n-\t  plt2 = OR1K_ORI0(11) | plt_reloc;\n+\t  plt[0] = OR1K_MOVHI(12) | ha;\n+\t  plt[1] = OR1K_LWZ(12,12) | lo;\n+\t  plt[2] = OR1K_ORI0(11) | plt_reloc;\n+\t}\n+\n+      /* For large code model we fixup the non-PIC PLT relocation instructions\n+\t here.  */\n+      if (large_plt_entry && !bfd_link_pic (info))\n+\t{\n+\t  unsigned pltrelhi = (plt_reloc >> 16) & 0xffff;\n+\t  unsigned pltrello = plt_reloc & 0xffff;\n+\n+\t  plt[2] = OR1K_MOVHI(11) | pltrelhi;\n+\t  plt[3] = OR1K_ORI(11,11) | pltrello;\n+\t  plt[4] = OR1K_NOP;\n+\t  plt_insn_count = 5;\n \t}\n \n       or1k_write_plt_entry (output_bfd, splt->contents + h->plt.offset,\n-\t\t\t    plt0, plt1, plt2, OR1K_JR(12));\n+\t\t\t    OR1K_JR(12), plt, plt_insn_count);\n \n       /* Fill in the entry in the global offset table.  We initialize it to\n \t point to the top of the plt.  This is done to lazy lookup the actual\n@@ -2777,11 +2843,16 @@ allocate_dynrelocs (struct elf_link_hash_entry *h, void * inf)\n       if (WILL_CALL_FINISH_DYNAMIC_SYMBOL (1, bfd_link_pic (info), h))\n \t{\n \t  asection *splt = htab->root.splt;\n+\t  bfd_vma plt_index;\n+\n+\t  /* Track the index of our plt entry for use in calculating size.  */\n+\t  plt_index = htab->plt_count++;\n+\t  ((struct elf_or1k_link_hash_entry *) h)->plt_index = plt_index;\n \n \t  /* If this is the first .plt entry, make room for the special\n \t     first entry.  */\n \t  if (splt->size == 0)\n-\t    splt->size = PLT_ENTRY_SIZE;\n+\t    splt->size = elf_or1k_plt_entry_size (plt_index);\n \n \t  h->plt.offset = splt->size;\n \n@@ -2798,7 +2869,7 @@ allocate_dynrelocs (struct elf_link_hash_entry *h, void * inf)\n \t    }\n \n \t  /* Make room for this entry.  */\n-\t  splt->size += PLT_ENTRY_SIZE;\n+\t  splt->size += elf_or1k_plt_entry_size (plt_index);\n \n \t  /* We also need to make an entry in the .got.plt section, which\n \t     will be placed in the .got section by the linker script.  */"
    },
    {
      "sha": "6f6acdfb58a051150d12d06736557a335a4c5ca7",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/284a1309021a0ef4c29f198470d95652f02b13f0/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/284a1309021a0ef4c29f198470d95652f02b13f0/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=284a1309021a0ef4c29f198470d95652f02b13f0",
      "patch": "@@ -1,3 +1,15 @@\n+2021-05-06  Stafford Horne  <shorne@gmail.com>\n+\n+\tPR 27746\n+\ttestsuite/ld-or1k/or1k.exp (or1kplttests): Add tests for linking\n+\talong with gotha() relocations.\n+\ttestsuite/ld-or1k/gotha1.dd: New file.\n+\ttestsuite/ld-or1k/gotha1.s: New file.\n+\ttestsuite/ld-or1k/gotha2.dd: New file.\n+\ttestsuite/ld-or1k/gotha2.s: New file\n+\ttestsuite/ld-or1k/pltlib.s (x): Define size to avoid link\n+\tfailure.\n+\n 2021-05-06  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* testsuite/ld-ctf/ctf.exp: Use -gctf, not -gt."
    },
    {
      "sha": "0ad1f8f53996177d4c74d18bdd650f8cb03e078e",
      "filename": "ld/testsuite/ld-or1k/gotha1.dd",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/284a1309021a0ef4c29f198470d95652f02b13f0/ld/testsuite/ld-or1k/gotha1.dd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/284a1309021a0ef4c29f198470d95652f02b13f0/ld/testsuite/ld-or1k/gotha1.dd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-or1k/gotha1.dd?ref=284a1309021a0ef4c29f198470d95652f02b13f0",
      "patch": "@@ -0,0 +1,34 @@\n+\n+.*\\.x:     file format elf32-or1k\n+\n+\n+Disassembly of section \\.plt:\n+\n+[0-9a-f]+ <\\.plt>:\n+ +[0-9a-f]+:\t19 80 00 00 \tl\\.movhi r12,0x0\n+ +[0-9a-f]+:\t85 ec [0-9a-f]+ [0-9a-f]+ \tl\\.lwz r15,[0-9]+\\(r12\\)\n+ +[0-9a-f]+:\t44 00 78 00 \tl\\.jr r15\n+ +[0-9a-f]+:\t85 8c [0-9a-f]+ [0-9a-f]+ \tl\\.lwz r12,[0-9]+\\(r12\\)\n+ +[0-9a-f]+:\t19 80 00 00 \tl\\.movhi r12,0x0\n+ +[0-9a-f]+:\t85 8c [0-9a-f]+ [0-9a-f]+ \tl\\.lwz r12,[0-9]+\\(r12\\)\n+ +[0-9a-f]+:\t44 00 60 00 \tl\\.jr r12\n+ +[0-9a-f]+:\ta9 60 00 00 \tl\\.ori r11,r0,0x0\n+\n+Disassembly of section \\.text:\n+\n+[0-9a-f]+ <_start>:\n+ +[0-9a-f]+:\t9c 21 ff fc \tl\\.addi r1,r1,-4\n+ +[0-9a-f]+:\td4 01 48 00 \tl\\.sw 0\\(r1\\),r9\n+ +[0-9a-f]+:\t04 00 00 02 \tl\\.jal [0-9a-f]+ <_start\\+0x10>\n+ +[0-9a-f]+:\t1a 60 00 00 \tl\\.movhi r19,0x0\n+ +[0-9a-f]+:\taa 73 [0-9a-f]+ [0-9a-f]+ \tl\\.ori r19,r19,0x[0-9a-f]+\n+ +[0-9a-f]+:\te2 73 48 00 \tl\\.add r19,r19,r9\n+ +[0-9a-f]+:\t1a 20 00 00 \tl\\.movhi r17,0x0\n+ +[0-9a-f]+:\te2 31 98 00 \tl\\.add r17,r17,r19\n+ +[0-9a-f]+:\t86 31 00 10 \tl\\.lwz r17,16\\(r17\\)\n+ +[0-9a-f]+:\t84 71 00 00 \tl\\.lwz r3,0\\(r17\\)\n+ +[0-9a-f]+:\t07 ff ff f2 \tl\\.jal [0-9a-f]+ <\\.plt\\+0x10>\n+ +[0-9a-f]+:\t15 00 00 00 \tl\\.nop 0x0\n+ +[0-9a-f]+:\t85 21 00 00 \tl\\.lwz r9,0\\(r1\\)\n+ +[0-9a-f]+:\t44 00 48 00 \tl\\.jr r9\n+ +[0-9a-f]+:\t9c 21 00 04 \tl\\.addi r1,r1,4"
    },
    {
      "sha": "42b16db425c4a9a308d83cde22993f7600720d31",
      "filename": "ld/testsuite/ld-or1k/gotha1.s",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/284a1309021a0ef4c29f198470d95652f02b13f0/ld/testsuite/ld-or1k/gotha1.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/284a1309021a0ef4c29f198470d95652f02b13f0/ld/testsuite/ld-or1k/gotha1.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-or1k/gotha1.s?ref=284a1309021a0ef4c29f198470d95652f02b13f0",
      "patch": "@@ -0,0 +1,24 @@\n+\t.data\n+\t.p2align 16\n+\n+\t.text\n+\t.globl\t_start\n+_start:\n+\tl.addi\tr1, r1, -4\n+\tl.sw\t0(r1), r9\n+\n+\tl.jal\t8\n+\t l.movhi\tr19, gotpchi(_GLOBAL_OFFSET_TABLE_-4)\n+\tl.ori\tr19, r19, gotpclo(_GLOBAL_OFFSET_TABLE_+0)\n+\tl.add\tr19, r19, r9\n+\n+\tl.movhi\tr17, gotha(x)\n+\tl.add\tr17, r17, r19\n+\tl.lwz\tr17, got(x)(r17)\n+\tl.lwz\tr3, 0(r17)\n+\n+\tl.jal\tplt(func)\n+\t l.nop\n+\tl.lwz\tr9, 0(r1)\n+\tl.jr\tr9\n+\t l.addi\tr1, r1, 4"
    },
    {
      "sha": "fe09da5466b155f062eec27e87ea1b3b6c5c65a7",
      "filename": "ld/testsuite/ld-or1k/gotha2.dd",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/284a1309021a0ef4c29f198470d95652f02b13f0/ld/testsuite/ld-or1k/gotha2.dd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/284a1309021a0ef4c29f198470d95652f02b13f0/ld/testsuite/ld-or1k/gotha2.dd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-or1k/gotha2.dd?ref=284a1309021a0ef4c29f198470d95652f02b13f0",
      "patch": "@@ -0,0 +1,21 @@\n+\n+.*\\.x:     file format elf32-or1k\n+\n+\n+Disassembly of section \\.text:\n+\n+[0-9a-f]+ <test>:\n+ +[0-9a-f]+:\t9c 21 ff f8 \tl\\.addi r1,r1,-8\n+ +[0-9a-f]+:\td4 01 80 00 \tl\\.sw 0\\(r1\\),r16\n+ +[0-9a-f]+:\td4 01 48 04 \tl\\.sw 4\\(r1\\),r9\n+ +[0-9a-f]+:\t04 00 [0-9a-f]+ [0-9a-f]+ \tl\\.jal [0-9a-f]+ <test\\+0x14>\n+ +[0-9a-f]+:\t1a 00 00 00 \tl\\.movhi r16,0x0\n+ +[0-9a-f]+:\taa 10 [0-9a-f]+ [0-9a-f]+ \tl\\.ori r16,r16,0x[0-9a-f]+\n+ +[0-9a-f]+:\te2 10 48 00 \tl\\.add r16,r16,r9\n+ +[0-9a-f]+:\t1a 20 00 00 \tl\\.movhi r17,0x0\n+ +[0-9a-f]+:\te2 31 80 00 \tl\\.add r17,r17,r16\n+ +[0-9a-f]+:\t86 31 00 0c \tl\\.lwz r17,12\\(r17\\)\n+ +[0-9a-f]+:\t85 21 00 04 \tl\\.lwz r9,4\\(r1\\)\n+ +[0-9a-f]+:\t86 01 00 00 \tl\\.lwz r16,0\\(r1\\)\n+ +[0-9a-f]+:\t44 00 48 00 \tl\\.jr r9\n+ +[0-9a-f]+:\t9c 21 00 08 \tl\\.addi r1,r1,8"
    },
    {
      "sha": "164b282f2dd1c89851593507df5d80da54f4db0e",
      "filename": "ld/testsuite/ld-or1k/gotha2.s",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/284a1309021a0ef4c29f198470d95652f02b13f0/ld/testsuite/ld-or1k/gotha2.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/284a1309021a0ef4c29f198470d95652f02b13f0/ld/testsuite/ld-or1k/gotha2.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-or1k/gotha2.s?ref=284a1309021a0ef4c29f198470d95652f02b13f0",
      "patch": "@@ -0,0 +1,22 @@\n+\t.section\t.text\n+\t.align 4\n+\t.global\ttest\n+\t.type\ttest, @function\n+test:\n+\tl.addi\tr1, r1, -8\n+\tl.sw\t0(r1), r16\n+\tl.sw\t4(r1), r9\n+\n+\tl.jal\t8\n+\t l.movhi\tr16, gotpchi(_GLOBAL_OFFSET_TABLE_-4)\n+\tl.ori\tr16, r16, gotpclo(_GLOBAL_OFFSET_TABLE_+0)\n+\tl.add\tr16, r16, r9\n+\n+\tl.movhi\tr17, gotha(i)\n+\tl.add\tr17, r17, r16\n+\tl.lwz\tr17, got(i)(r17)\n+\n+\tl.lwz\tr9, 4(r1)\n+\tl.lwz\tr16, 0(r1)\n+\tl.jr\tr9\n+\t l.addi\tr1, r1, 8"
    },
    {
      "sha": "f10949e89aae1e18174f8605bf15b7116580111a",
      "filename": "ld/testsuite/ld-or1k/or1k.exp",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/284a1309021a0ef4c29f198470d95652f02b13f0/ld/testsuite/ld-or1k/or1k.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/284a1309021a0ef4c29f198470d95652f02b13f0/ld/testsuite/ld-or1k/or1k.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-or1k/or1k.exp?ref=284a1309021a0ef4c29f198470d95652f02b13f0",
      "patch": "@@ -53,6 +53,14 @@ set or1kplttests {\n      \"\" {plt1.s}\n      {{objdump -dr plt1.x.dd}}\n      \"plt1.x\"}\n+    {\"gotha exec plt\" \"tmpdir/libpltlib.so\" \"\"\n+     \"\" {gotha1.s}\n+     {{objdump -dr gotha1.dd}}\n+     \"gotha1.x\"}\n+    {\"gotha -fpic -shared\" \"-fpic -shared\" \"\"\n+     \"\" {gotha2.s}\n+     {{objdump -dr gotha2.dd}}\n+     \"gotha2.x\"}\n }\n \n # Not implemented yet"
    },
    {
      "sha": "8b4d7ba48fddd7faf24c9f68f37f78df73267c64",
      "filename": "ld/testsuite/ld-or1k/pltlib.s",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/284a1309021a0ef4c29f198470d95652f02b13f0/ld/testsuite/ld-or1k/pltlib.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/284a1309021a0ef4c29f198470d95652f02b13f0/ld/testsuite/ld-or1k/pltlib.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-or1k/pltlib.s?ref=284a1309021a0ef4c29f198470d95652f02b13f0",
      "patch": "@@ -1,5 +1,6 @@\n \t.section .data\n \t.globl x, y\n+\t.size x, 4\n x:\t.long 33\n y:\t.long 44\n "
    }
  ]
}