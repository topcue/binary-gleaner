{
  "sha": "e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTgyMTdlNjFmNTk1MmNjZmRhYmIwYzRlZTBjMjM3YTM2M2U5YmQ5OQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-02-14T20:29:08Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-02-14T20:29:08Z"
    },
    "message": "gdb: make gdbarch_displaced_step_copy_insn return an std::unique_ptr\n\nThis callback dynamically allocates a specialized displaced_step_closure, and\ngives the ownership of the object to its caller.  So I think it would make\nsense for the callback to return an std::unique_ptr, this is what this patch\nimplements.\n\ngdb/ChangeLog:\n\n\t* gdbarch.sh (displaced_step_copy_insn): Change return type to an\n\tstd::unique_ptr.\n\t* gdbarch.c: Re-generate.\n\t* gdbarch.h: Re-generate.\n\t* infrun.c (displaced_step_prepare_throw): Adjust to std::unique_ptr\n\tchange.\n\t* aarch64-tdep.c (aarch64_displaced_step_copy_insn): Change return\n\ttype to std::unique_ptr.\n\t* aarch64-tdep.h (aarch64_displaced_step_copy_insn): Likewise.\n\t* amd64-tdep.c (amd64_displaced_step_copy_insn): Likewise.\n\t* amd64-tdep.h (amd64_displaced_step_copy_insn): Likewise.\n\t* arm-linux-tdep.c (arm_linux_displaced_step_copy_insn): Likewise.\n\t* i386-linux-tdep.c (i386_linux_displaced_step_copy_insn): Likewise.\n\t* i386-tdep.c (i386_displaced_step_copy_insn): Likewise.\n\t* i386-tdep.h (i386_displaced_step_copy_insn): Likewise.\n\t* rs6000-tdep.c (ppc_displaced_step_copy_insn): Likewise.\n\t* s390-tdep.c (s390_displaced_step_copy_insn): Likewise.",
    "tree": {
      "sha": "19aca9edacd70c4cfb8e8d6333ccaddb536b3584",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/19aca9edacd70c4cfb8e8d6333ccaddb536b3584"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d8d83535e6d3dbb3fb8664f6a98a37470c091f01",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d8d83535e6d3dbb3fb8664f6a98a37470c091f01",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d8d83535e6d3dbb3fb8664f6a98a37470c091f01"
    }
  ],
  "stats": {
    "total": 84,
    "additions": 52,
    "deletions": 32
  },
  "files": [
    {
      "sha": "b71251c6a209210d9baf9beb402d86501853ab16",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
      "patch": "@@ -1,3 +1,23 @@\n+2020-02-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbarch.sh (displaced_step_copy_insn): Change return type to an\n+\tstd::unique_ptr.\n+\t* gdbarch.c: Re-generate.\n+\t* gdbarch.h: Re-generate.\n+\t* infrun.c (displaced_step_prepare_throw): Adjust to std::unique_ptr\n+\tchange.\n+\t* aarch64-tdep.c (aarch64_displaced_step_copy_insn): Change return\n+\ttype to std::unique_ptr.\n+\t* aarch64-tdep.h (aarch64_displaced_step_copy_insn): Likewise.\n+\t* amd64-tdep.c (amd64_displaced_step_copy_insn): Likewise.\n+\t* amd64-tdep.h (amd64_displaced_step_copy_insn): Likewise.\n+\t* arm-linux-tdep.c (arm_linux_displaced_step_copy_insn): Likewise.\n+\t* i386-linux-tdep.c (i386_linux_displaced_step_copy_insn): Likewise.\n+\t* i386-tdep.c (i386_displaced_step_copy_insn): Likewise.\n+\t* i386-tdep.h (i386_displaced_step_copy_insn): Likewise.\n+\t* rs6000-tdep.c (ppc_displaced_step_copy_insn): Likewise.\n+\t* s390-tdep.c (s390_displaced_step_copy_insn): Likewise.\n+\n 2020-02-14  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* infrun.c (get_displaced_step_closure_by_addr): Adjust to"
    },
    {
      "sha": "1bf6bfdf92ccc56028c9106ab1d8109f16f57512",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
      "patch": "@@ -2999,7 +2999,7 @@ static const struct aarch64_insn_visitor visitor =\n \n /* Implement the \"displaced_step_copy_insn\" gdbarch method.  */\n \n-struct displaced_step_closure *\n+std::unique_ptr<displaced_step_closure>\n aarch64_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t\t  CORE_ADDR from, CORE_ADDR to,\n \t\t\t\t  struct regcache *regs)\n@@ -3053,7 +3053,7 @@ aarch64_displaced_step_copy_insn (struct gdbarch *gdbarch,\n       dsc = NULL;\n     }\n \n-  return dsc.release ();\n+  return dsc;\n }\n \n /* Implement the \"displaced_step_fixup\" gdbarch method.  */"
    },
    {
      "sha": "fc397967cd8eef0701c77d2465b748e98c7d8ca1",
      "filename": "gdb/aarch64-tdep.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/aarch64-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/aarch64-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.h?ref=e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
      "patch": "@@ -106,7 +106,7 @@ const target_desc *aarch64_read_description (uint64_t vq, bool pauth_p);\n extern int aarch64_process_record (struct gdbarch *gdbarch,\n                                struct regcache *regcache, CORE_ADDR addr);\n \n-struct displaced_step_closure *\n+struct std::unique_ptr<displaced_step_closure>\n   aarch64_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t\t    CORE_ADDR from, CORE_ADDR to,\n \t\t\t\t    struct regcache *regs);"
    },
    {
      "sha": "35ddfbaa32df7cd25e6b554844815bc8eb9f046a",
      "filename": "gdb/amd64-tdep.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/amd64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/amd64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-tdep.c?ref=e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
      "patch": "@@ -1465,7 +1465,7 @@ fixup_displaced_copy (struct gdbarch *gdbarch,\n     }\n }\n \n-struct displaced_step_closure *\n+std::unique_ptr<displaced_step_closure>\n amd64_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t\tCORE_ADDR from, CORE_ADDR to,\n \t\t\t\tstruct regcache *regs)\n@@ -1474,8 +1474,8 @@ amd64_displaced_step_copy_insn (struct gdbarch *gdbarch,\n   /* Extra space for sentinels so fixup_{riprel,displaced_copy} don't have to\n      continually watch for running off the end of the buffer.  */\n   int fixup_sentinel_space = len;\n-  amd64_displaced_step_closure *dsc\n-    = new amd64_displaced_step_closure (len + fixup_sentinel_space);\n+  std::unique_ptr<amd64_displaced_step_closure> dsc\n+    (new amd64_displaced_step_closure (len + fixup_sentinel_space));\n   gdb_byte *buf = &dsc->insn_buf[0];\n   struct amd64_insn *details = &dsc->insn_details;\n \n@@ -1500,7 +1500,7 @@ amd64_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \n   /* Modify the insn to cope with the address where it will be executed from.\n      In particular, handle any rip-relative addressing.\t */\n-  fixup_displaced_copy (gdbarch, dsc, from, to, regs);\n+  fixup_displaced_copy (gdbarch, dsc.get (), from, to, regs);\n \n   write_memory (to, buf, len);\n "
    },
    {
      "sha": "33ef0c3cea7e8e875df8e97033e9a205a61d4bdf",
      "filename": "gdb/amd64-tdep.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/amd64-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/amd64-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-tdep.h?ref=e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
      "patch": "@@ -87,7 +87,7 @@ enum amd64_regnum\n \n #define AMD64_NUM_REGS\t\t(AMD64_GSBASE_REGNUM + 1)\n \n-extern struct displaced_step_closure *amd64_displaced_step_copy_insn\n+extern std::unique_ptr<displaced_step_closure> amd64_displaced_step_copy_insn\n   (struct gdbarch *gdbarch, CORE_ADDR from, CORE_ADDR to,\n    struct regcache *regs);\n extern void amd64_displaced_step_fixup (struct gdbarch *gdbarch,"
    },
    {
      "sha": "b3ae04fb431fb3bd98219101a3d5d011f5b095d6",
      "filename": "gdb/arm-linux-tdep.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/arm-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/arm-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-linux-tdep.c?ref=e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
      "patch": "@@ -1103,12 +1103,13 @@ arm_catch_kernel_helper_return (struct gdbarch *gdbarch, CORE_ADDR from,\n    the program has stepped into a Linux kernel helper routine (which must be\n    handled as a special case).  */\n \n-static struct displaced_step_closure *\n+static std::unique_ptr<displaced_step_closure>\n arm_linux_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t\t    CORE_ADDR from, CORE_ADDR to,\n \t\t\t\t    struct regcache *regs)\n {\n-  arm_displaced_step_closure *dsc = new arm_displaced_step_closure;\n+  std::unique_ptr<arm_displaced_step_closure> dsc\n+    (new arm_displaced_step_closure);\n \n   /* Detect when we enter an (inaccessible by GDB) Linux kernel helper, and\n      stop at the return location.  */\n@@ -1118,17 +1119,17 @@ arm_linux_displaced_step_copy_insn (struct gdbarch *gdbarch,\n         fprintf_unfiltered (gdb_stdlog, \"displaced: detected kernel helper \"\n \t\t\t    \"at %.8lx\\n\", (unsigned long) from);\n \n-      arm_catch_kernel_helper_return (gdbarch, from, to, regs, dsc);\n+      arm_catch_kernel_helper_return (gdbarch, from, to, regs, dsc.get ());\n     }\n   else\n     {\n       /* Override the default handling of SVC instructions.  */\n       dsc->u.svc.copy_svc_os = arm_linux_copy_svc;\n \n-      arm_process_displaced_insn (gdbarch, from, to, regs, dsc);\n+      arm_process_displaced_insn (gdbarch, from, to, regs, dsc.get ());\n     }\n \n-  arm_displaced_init_closure (gdbarch, from, to, dsc);\n+  arm_displaced_init_closure (gdbarch, from, to, dsc.get ());\n \n   return dsc;\n }"
    },
    {
      "sha": "4e59b375f7888f0e0c62bec60a4fdab74c644734",
      "filename": "gdb/gdbarch.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/gdbarch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/gdbarch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.c?ref=e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
      "patch": "@@ -3936,7 +3936,7 @@ gdbarch_displaced_step_copy_insn_p (struct gdbarch *gdbarch)\n   return gdbarch->displaced_step_copy_insn != NULL;\n }\n \n-struct displaced_step_closure *\n+std::unique_ptr<displaced_step_closure>\n gdbarch_displaced_step_copy_insn (struct gdbarch *gdbarch, CORE_ADDR from, CORE_ADDR to, struct regcache *regs)\n {\n   gdb_assert (gdbarch != NULL);"
    },
    {
      "sha": "8a3a07181c544f0df300ed63ff3596a2d0948ad5",
      "filename": "gdb/gdbarch.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/gdbarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/gdbarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.h?ref=e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
      "patch": "@@ -1036,8 +1036,8 @@ extern void set_gdbarch_max_insn_length (struct gdbarch *gdbarch, ULONGEST max_i\n \n extern int gdbarch_displaced_step_copy_insn_p (struct gdbarch *gdbarch);\n \n-typedef struct displaced_step_closure * (gdbarch_displaced_step_copy_insn_ftype) (struct gdbarch *gdbarch, CORE_ADDR from, CORE_ADDR to, struct regcache *regs);\n-extern struct displaced_step_closure * gdbarch_displaced_step_copy_insn (struct gdbarch *gdbarch, CORE_ADDR from, CORE_ADDR to, struct regcache *regs);\n+typedef std::unique_ptr<displaced_step_closure> (gdbarch_displaced_step_copy_insn_ftype) (struct gdbarch *gdbarch, CORE_ADDR from, CORE_ADDR to, struct regcache *regs);\n+extern std::unique_ptr<displaced_step_closure> gdbarch_displaced_step_copy_insn (struct gdbarch *gdbarch, CORE_ADDR from, CORE_ADDR to, struct regcache *regs);\n extern void set_gdbarch_displaced_step_copy_insn (struct gdbarch *gdbarch, gdbarch_displaced_step_copy_insn_ftype *displaced_step_copy_insn);\n \n /* Return true if GDB should use hardware single-stepping to execute"
    },
    {
      "sha": "d4170c9822357f78e6e2b4b7d39b1c2db6039667",
      "filename": "gdb/gdbarch.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/gdbarch.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/gdbarch.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.sh?ref=e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
      "patch": "@@ -816,7 +816,7 @@ V;ULONGEST;max_insn_length;;;0;0\n # If the instruction cannot execute out of line, return NULL.  The\n # core falls back to stepping past the instruction in-line instead in\n # that case.\n-M;struct displaced_step_closure *;displaced_step_copy_insn;CORE_ADDR from, CORE_ADDR to, struct regcache *regs;from, to, regs\n+M;std::unique_ptr<displaced_step_closure>;displaced_step_copy_insn;CORE_ADDR from, CORE_ADDR to, struct regcache *regs;from, to, regs\n \n # Return true if GDB should use hardware single-stepping to execute\n # the displaced instruction identified by CLOSURE.  If false,"
    },
    {
      "sha": "7170687f4deb7a44e2beab0e30c14d5eb59f20bb",
      "filename": "gdb/i386-linux-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/i386-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/i386-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-linux-tdep.c?ref=e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
      "patch": "@@ -797,20 +797,20 @@ i386_linux_iterate_over_regset_sections (struct gdbarch *gdbarch,\n    which does not seem worth it.  The same effect is achieved by patching that\n    'nop' instruction there instead.  */\n \n-static struct displaced_step_closure *\n+static std::unique_ptr<displaced_step_closure>\n i386_linux_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t\t     CORE_ADDR from, CORE_ADDR to,\n \t\t\t\t     struct regcache *regs)\n {\n-  displaced_step_closure *closure_\n+  std::unique_ptr<displaced_step_closure> closure_\n     =  i386_displaced_step_copy_insn (gdbarch, from, to, regs);\n \n   if (i386_linux_get_syscall_number_from_regcache (regs) != -1)\n     {\n       /* The closure returned by i386_displaced_step_copy_insn is simply a\n \t buffer with a copy of the instruction. */\n       i386_displaced_step_closure *closure\n-\t= (i386_displaced_step_closure *) closure_;\n+\t= (i386_displaced_step_closure *) closure_.get ();\n \n       /* Fake nop.  */\n       closure->buf[0] = 0x90;"
    },
    {
      "sha": "4b6f3d0ecdcf41ef7c05cd1b0e8dc9bd91a75cce",
      "filename": "gdb/i386-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/i386-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/i386-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.c?ref=e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
      "patch": "@@ -798,13 +798,14 @@ i386_insn_is_jump (struct gdbarch *gdbarch, CORE_ADDR addr)\n \n /* Some kernels may run one past a syscall insn, so we have to cope.  */\n \n-struct displaced_step_closure *\n+std::unique_ptr<displaced_step_closure>\n i386_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t       CORE_ADDR from, CORE_ADDR to,\n \t\t\t       struct regcache *regs)\n {\n   size_t len = gdbarch_max_insn_length (gdbarch);\n-  i386_displaced_step_closure *closure = new i386_displaced_step_closure (len);\n+  std::unique_ptr<i386_displaced_step_closure> closure\n+    (new i386_displaced_step_closure (len));\n   gdb_byte *buf = closure->buf.data ();\n \n   read_memory (from, buf, len);"
    },
    {
      "sha": "41faf515868dcac7c298b94394cbe7dde0e4df64",
      "filename": "gdb/i386-tdep.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/i386-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/i386-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.h?ref=e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
      "patch": "@@ -428,7 +428,7 @@ extern void\n \n typedef buf_displaced_step_closure i386_displaced_step_closure;\n \n-extern struct displaced_step_closure *i386_displaced_step_copy_insn\n+extern std::unique_ptr<displaced_step_closure> i386_displaced_step_copy_insn\n   (struct gdbarch *gdbarch, CORE_ADDR from, CORE_ADDR to,\n    struct regcache *regs);\n extern void i386_displaced_step_fixup (struct gdbarch *gdbarch,"
    },
    {
      "sha": "d9a6f733519486bd86ee25c571334b78803f8e1f",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
      "patch": "@@ -1646,7 +1646,6 @@ displaced_step_prepare_throw (thread_info *tp)\n   const address_space *aspace = regcache->aspace ();\n   CORE_ADDR original, copy;\n   ULONGEST len;\n-  struct displaced_step_closure *closure;\n   int status;\n \n   /* We should never reach this function if the architecture does not\n@@ -1738,9 +1737,9 @@ displaced_step_prepare_throw (thread_info *tp)\n \t\t\t\t len);\n     };\n \n-  closure = gdbarch_displaced_step_copy_insn (gdbarch,\n-\t\t\t\t\t      original, copy, regcache);\n-  if (closure == NULL)\n+  displaced->step_closure\n+    = gdbarch_displaced_step_copy_insn (gdbarch, original, copy, regcache);\n+  if (displaced->step_closure == NULL)\n     {\n       /* The architecture doesn't know how or want to displaced step\n \t this instruction or instruction sequence.  Fallback to\n@@ -1752,7 +1751,6 @@ displaced_step_prepare_throw (thread_info *tp)\n      succeeds.  */\n   displaced->step_thread = tp;\n   displaced->step_gdbarch = gdbarch;\n-  displaced->step_closure.reset (closure);\n   displaced->step_original = original;\n   displaced->step_copy = copy;\n "
    },
    {
      "sha": "010bbc9e01a9529508a0c3c0763645a9d00fbb87",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
      "patch": "@@ -855,7 +855,7 @@ typedef buf_displaced_step_closure ppc_displaced_step_closure;\n \n /* We can't displaced step atomic sequences.  */\n \n-static struct displaced_step_closure *\n+static std::unique_ptr<displaced_step_closure>\n ppc_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t      CORE_ADDR from, CORE_ADDR to,\n \t\t\t      struct regcache *regs)\n@@ -894,7 +894,7 @@ ppc_displaced_step_copy_insn (struct gdbarch *gdbarch,\n       displaced_step_dump_bytes (gdb_stdlog, buf, len);\n     }\n \n-  return closure.release ();\n+  return closure;\n }\n \n /* Fix up the state of registers and memory after having single-stepped"
    },
    {
      "sha": "313d459cb3a32417904acec8afe09c3f9ec2d8a6",
      "filename": "gdb/s390-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/s390-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8217e61f5952ccfdabb0c4ee0c237a363e9bd99/gdb/s390-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s390-tdep.c?ref=e8217e61f5952ccfdabb0c4ee0c237a363e9bd99",
      "patch": "@@ -425,7 +425,7 @@ typedef buf_displaced_step_closure s390_displaced_step_closure;\n \n /* Implementation of gdbarch_displaced_step_copy_insn.  */\n \n-static struct displaced_step_closure *\n+static std::unique_ptr<displaced_step_closure>\n s390_displaced_step_copy_insn (struct gdbarch *gdbarch,\n \t\t\t       CORE_ADDR from, CORE_ADDR to,\n \t\t\t       struct regcache *regs)\n@@ -477,7 +477,7 @@ s390_displaced_step_copy_insn (struct gdbarch *gdbarch,\n       displaced_step_dump_bytes (gdb_stdlog, buf, len);\n     }\n \n-  return closure.release ();\n+  return closure;\n }\n \n /* Fix up the state of registers and memory after having single-stepped"
    }
  ]
}