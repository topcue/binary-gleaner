{
  "sha": "fa9b11648c07ecb02a9c038304d646a5c652a5e7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmE5YjExNjQ4YzA3ZWNiMDJhOWMwMzgzMDRkNjQ2YTVjNjUyYTVlNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-17T17:47:50Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-17T17:58:56Z"
    },
    "message": "Use htab_up in typedef_hash_table\n\nThis changes typedef_hash_table to use htab_up rather than explicit\ncalls to htab_delete.\n\ngdb/ChangeLog\n2020-09-17  Tom Tromey  <tom@tromey.com>\n\n\t* typeprint.h (class typedef_hash_table) <~typedef_hash_table>:\n\tRemove.\n\t<m_table>: Now htab_up.\n\t* typeprint.c (typedef_hash_table::recursively_update)\n\t(typedef_hash_table::add_template_parameters)\n\t(typedef_hash_table::typedef_hash_table): Update.\n\t(typedef_hash_table::~typedef_hash_table): Remove.\n\t(typedef_hash_table::typedef_hash_table)\n\t(typedef_hash_table::find_global_typedef)\n\t(typedef_hash_table::find_typedef): Update.",
    "tree": {
      "sha": "30f830d568e56b9b315c23d7055adb4e32a4f287",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/30f830d568e56b9b315c23d7055adb4e32a4f287"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fa9b11648c07ecb02a9c038304d646a5c652a5e7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fa9b11648c07ecb02a9c038304d646a5c652a5e7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fa9b11648c07ecb02a9c038304d646a5c652a5e7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fa9b11648c07ecb02a9c038304d646a5c652a5e7/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "eb53f10555eb56c43212659acbc2014f6d416a32",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb53f10555eb56c43212659acbc2014f6d416a32",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/eb53f10555eb56c43212659acbc2014f6d416a32"
    }
  ],
  "stats": {
    "total": 46,
    "additions": 25,
    "deletions": 21
  },
  "files": [
    {
      "sha": "375fa335f3a0233ce2598ca54a31b13b5c805303",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa9b11648c07ecb02a9c038304d646a5c652a5e7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa9b11648c07ecb02a9c038304d646a5c652a5e7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fa9b11648c07ecb02a9c038304d646a5c652a5e7",
      "patch": "@@ -1,3 +1,16 @@\n+2020-09-17  Tom Tromey  <tom@tromey.com>\n+\n+\t* typeprint.h (class typedef_hash_table) <~typedef_hash_table>:\n+\tRemove.\n+\t<m_table>: Now htab_up.\n+\t* typeprint.c (typedef_hash_table::recursively_update)\n+\t(typedef_hash_table::add_template_parameters)\n+\t(typedef_hash_table::typedef_hash_table): Update.\n+\t(typedef_hash_table::~typedef_hash_table): Remove.\n+\t(typedef_hash_table::typedef_hash_table)\n+\t(typedef_hash_table::find_global_typedef)\n+\t(typedef_hash_table::find_typedef): Update.\n+\n 2020-09-17  Tom Tromey  <tom@tromey.com>\n \n \t* target-descriptions.c (tdesc_use_registers): Use htab_up."
    },
    {
      "sha": "82ca42579627f7be3a824809503c77acaf515851",
      "filename": "gdb/typeprint.c",
      "status": "modified",
      "additions": 11,
      "deletions": 18,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa9b11648c07ecb02a9c038304d646a5c652a5e7/gdb/typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa9b11648c07ecb02a9c038304d646a5c652a5e7/gdb/typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/typeprint.c?ref=fa9b11648c07ecb02a9c038304d646a5c652a5e7",
      "patch": "@@ -209,7 +209,7 @@ typedef_hash_table::recursively_update (struct type *t)\n       struct decl_field *tdef = &TYPE_TYPEDEF_FIELD (t, i);\n       void **slot;\n \n-      slot = htab_find_slot (m_table, tdef, INSERT);\n+      slot = htab_find_slot (m_table.get (), tdef, INSERT);\n       /* Only add a given typedef name once.  Really this shouldn't\n \t happen; but it is safe enough to do the updates breadth-first\n \t and thus use the most specific typedef.  */\n@@ -242,7 +242,7 @@ typedef_hash_table::add_template_parameters (struct type *t)\n       tf->name = TYPE_TEMPLATE_ARGUMENT (t, i)->linkage_name ();\n       tf->type = SYMBOL_TYPE (TYPE_TEMPLATE_ARGUMENT (t, i));\n \n-      slot = htab_find_slot (m_table, tf, INSERT);\n+      slot = htab_find_slot (m_table.get (), tf, INSERT);\n       if (*slot == NULL)\n \t*slot = tf;\n     }\n@@ -251,16 +251,9 @@ typedef_hash_table::add_template_parameters (struct type *t)\n /* See typeprint.h.  */\n \n typedef_hash_table::typedef_hash_table ()\n+  : m_table (htab_create_alloc (10, hash_typedef_field, eq_typedef_field,\n+\t\t\t\tNULL, xcalloc, xfree))\n {\n-  m_table = htab_create_alloc (10, hash_typedef_field, eq_typedef_field,\n-\t\t\t       NULL, xcalloc, xfree);\n-}\n-\n-/* Free a typedef field table.  */\n-\n-typedef_hash_table::~typedef_hash_table ()\n-{\n-  htab_delete (m_table);\n }\n \n /* Helper function for typedef_hash_table::copy.  */\n@@ -282,10 +275,10 @@ copy_typedef_hash_element (void **slot, void *nt)\n \n typedef_hash_table::typedef_hash_table (const typedef_hash_table &table)\n {\n-  m_table = htab_create_alloc (10, hash_typedef_field, eq_typedef_field,\n-\t\t\t       NULL, xcalloc, xfree);\n-  htab_traverse_noresize (table.m_table, copy_typedef_hash_element,\n-\t\t\t  m_table);\n+  m_table.reset (htab_create_alloc (10, hash_typedef_field, eq_typedef_field,\n+\t\t\t\t    NULL, xcalloc, xfree));\n+  htab_traverse_noresize (table.m_table.get (), copy_typedef_hash_element,\n+\t\t\t  m_table.get ());\n }\n \n /* Look up the type T in the global typedef hash.  If it is found,\n@@ -307,7 +300,7 @@ typedef_hash_table::find_global_typedef (const struct type_print_options *flags,\n   tf.name = NULL;\n   tf.type = t;\n \n-  slot = htab_find_slot (flags->global_typedefs->m_table, &tf, INSERT);\n+  slot = htab_find_slot (flags->global_typedefs->m_table.get (), &tf, INSERT);\n   if (*slot != NULL)\n     {\n       new_tf = (struct decl_field *) *slot;\n@@ -346,8 +339,8 @@ typedef_hash_table::find_typedef (const struct type_print_options *flags,\n \n       tf.name = NULL;\n       tf.type = t;\n-      found = (struct decl_field *) htab_find (flags->local_typedefs->m_table,\n-\t\t\t\t\t       &tf);\n+      htab_t table = flags->local_typedefs->m_table.get ();\n+      found = (struct decl_field *) htab_find (table, &tf);\n \n       if (found != NULL)\n \treturn found->name;"
    },
    {
      "sha": "8936b9adf53787b93093497e9c7f3a2f49f11581",
      "filename": "gdb/typeprint.h",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fa9b11648c07ecb02a9c038304d646a5c652a5e7/gdb/typeprint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fa9b11648c07ecb02a9c038304d646a5c652a5e7/gdb/typeprint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/typeprint.h?ref=fa9b11648c07ecb02a9c038304d646a5c652a5e7",
      "patch": "@@ -116,8 +116,6 @@ class typedef_hash_table\n   /* Create a new typedef-lookup hash table.  */\n   typedef_hash_table ();\n \n-  ~typedef_hash_table ();\n-\n   /* Copy a typedef hash.  */\n   typedef_hash_table (const typedef_hash_table &);\n \n@@ -144,7 +142,7 @@ class typedef_hash_table\n \n \n   /* The actual hash table.  */\n-  htab_t m_table;\n+  htab_up m_table;\n \n   /* Storage for typedef_field objects that must be synthesized.  */\n   auto_obstack m_storage;"
    }
  ]
}