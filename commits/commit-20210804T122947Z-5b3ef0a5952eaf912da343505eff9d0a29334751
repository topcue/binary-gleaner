{
  "sha": "5b3ef0a5952eaf912da343505eff9d0a29334751",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWIzZWYwYTU5NTJlYWY5MTJkYTM0MzUwNWVmZjlkMGEyOTMzNDc1MQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-08-04T12:29:47Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-08-04T12:29:47Z"
    },
    "message": "[gdb/symtab] Use lambda function instead of addrmap_foreach_check\n\nUse a lambda function instead of addrmap_foreach_check,\nwhich removes the need for static variables.\n\nAlso remove unnecessary static on local var temp_obstack in test_addrmap.\n\ngdb/ChangeLog:\n\n2021-08-04  Tom de Vries  <tdevries@suse.de>\n\n\t* addrmap.c (addrmap_foreach_check): Remove.\n\t(array, val1, val2): Move ...\n\t(test_addrmap): ... here.  Remove static on temp_obstack.  Use lambda\n\tfunction instead of addrmap_foreach_check.",
    "tree": {
      "sha": "d9cd55e1760949110d1c8651126ffeed3e147e54",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d9cd55e1760949110d1c8651126ffeed3e147e54"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5b3ef0a5952eaf912da343505eff9d0a29334751",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b3ef0a5952eaf912da343505eff9d0a29334751",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5b3ef0a5952eaf912da343505eff9d0a29334751",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b3ef0a5952eaf912da343505eff9d0a29334751/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f897689c880ed1049b708e6c1f9745c8604808e3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f897689c880ed1049b708e6c1f9745c8604808e3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f897689c880ed1049b708e6c1f9745c8604808e3"
    }
  ],
  "stats": {
    "total": 51,
    "additions": 21,
    "deletions": 30
  },
  "files": [
    {
      "sha": "22817824cdc9befb7c4374a55fb2d0b850301652",
      "filename": "gdb/addrmap.c",
      "status": "modified",
      "additions": 21,
      "deletions": 30,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b3ef0a5952eaf912da343505eff9d0a29334751/gdb/addrmap.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b3ef0a5952eaf912da343505eff9d0a29334751/gdb/addrmap.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/addrmap.c?ref=5b3ef0a5952eaf912da343505eff9d0a29334751",
      "patch": "@@ -611,41 +611,20 @@ core_addr (void *p)\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n \n-/* We'll verify using the addresses of the elements of this array.  */\n-static char *array;\n-/* We'll verify using these values stored into the map.  */\n-static void *val1;\n-static void *val2;\n-\n-/* Callback for addrmap_foreach to check transitions.  */\n-\n-static int\n-addrmap_foreach_check (CORE_ADDR start_addr, void *obj)\n-{\n-  if (start_addr == core_addr (nullptr))\n-    SELF_CHECK (obj == nullptr);\n-  else if (start_addr == core_addr (&array[10]))\n-    SELF_CHECK (obj == val1);\n-  else if (start_addr == core_addr (&array[13]))\n-    SELF_CHECK (obj == nullptr);\n-  else\n-    SELF_CHECK (false);\n-  return 0;\n-}\n-\n /* Entry point for addrmap unit tests.  */\n \n static void\n test_addrmap ()\n {\n-  /* Initialize static variables.  */\n-  char local_array[20];\n-  array = local_array;\n-  val1 = &array[1];\n-  val2 = &array[2];\n+  /* We'll verify using the addresses of the elements of this array.  */\n+  char array[20];\n+\n+  /* We'll verify using these values stored into the map.  */\n+  void *val1 = &array[1];\n+  void *val2 = &array[2];\n \n   /* Create mutable addrmap.  */\n-  static struct obstack temp_obstack;\n+  struct obstack temp_obstack;\n   obstack_init (&temp_obstack);\n   struct addrmap *map = addrmap_create_mutable (&temp_obstack);\n   SELF_CHECK (map != nullptr);\n@@ -668,8 +647,20 @@ test_addrmap ()\n   CHECK_ADDRMAP_FIND (map2, array, 13, 19, nullptr);\n \n   /* Iterate over both addrmaps.  */\n-  SELF_CHECK (addrmap_foreach (map, addrmap_foreach_check) == 0);\n-  SELF_CHECK (addrmap_foreach (map2, addrmap_foreach_check) == 0);\n+  auto callback = [&] (CORE_ADDR start_addr, void *obj)\n+    {\n+      if (start_addr == core_addr (nullptr))\n+\tSELF_CHECK (obj == nullptr);\n+      else if (start_addr == core_addr (&array[10]))\n+\tSELF_CHECK (obj == val1);\n+      else if (start_addr == core_addr (&array[13]))\n+\tSELF_CHECK (obj == nullptr);\n+      else\n+\tSELF_CHECK (false);\n+      return 0;\n+    };\n+  SELF_CHECK (addrmap_foreach (map, callback) == 0);\n+  SELF_CHECK (addrmap_foreach (map2, callback) == 0);\n \n   /* Relocate fixed addrmap.  */\n   addrmap_relocate (map2, 1);"
    }
  ]
}