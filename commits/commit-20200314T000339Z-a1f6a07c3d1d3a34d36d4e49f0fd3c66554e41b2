{
  "sha": "a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTFmNmEwN2MzZDFkM2EzNGQzNmQ0ZTQ5ZjBmZDNjNjY1NTRlNDFiMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-13T23:39:52Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-14T00:03:39Z"
    },
    "message": "Use common_val_print in c-valprint.c\n\nThis changes c_value_print to call common_val_print.  This is more\ncomplicated than the usual sort of common_val_print change, due to the\nhandling of RTTI.\n\ngdb/ChangeLog\n2020-03-13  Tom Tromey  <tom@tromey.com>\n\n\t* c-valprint.c (c_value_print): Use common_val_print.\n\ngdb/testsuite/ChangeLog\n2020-03-13  Tom Tromey  <tom@tromey.com>\n\n\t* gdb.base/printcmds.exp (test_print_strings): Add regression\n\ttest.\n\t* gdb.base/printcmds.c (charptr): New typedef.\n\t(teststring2): New global.",
    "tree": {
      "sha": "0903e61b62d8cfc09a77c4198f21672fa577d2d2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0903e61b62d8cfc09a77c4198f21672fa577d2d2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "410cf315014145f169c146442e9c28163d9ae10a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/410cf315014145f169c146442e9c28163d9ae10a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/410cf315014145f169c146442e9c28163d9ae10a"
    }
  ],
  "stats": {
    "total": 74,
    "additions": 37,
    "deletions": 37
  },
  "files": [
    {
      "sha": "a66a918424433292a5a5a7d4c0dd1fe5891286d6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2",
      "patch": "@@ -1,3 +1,7 @@\n+2020-03-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* c-valprint.c (c_value_print): Use common_val_print.\n+\n 2020-03-13  Tom Tromey  <tom@tromey.com>\n \n \t* cp-valprint.c (cp_print_static_field): Use common_val_print."
    },
    {
      "sha": "759ab43c723041eab5dea31145d717e4561b8f45",
      "filename": "gdb/c-valprint.c",
      "status": "modified",
      "additions": 20,
      "deletions": 37,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2/gdb/c-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2/gdb/c-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-valprint.c?ref=a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2",
      "patch": "@@ -567,7 +567,7 @@ void\n c_value_print (struct value *val, struct ui_file *stream, \n \t       const struct value_print_options *options)\n {\n-  struct type *type, *real_type, *val_type;\n+  struct type *type, *real_type;\n   int full, using_enc;\n   LONGEST top;\n   struct value_print_options opts = *options;\n@@ -581,24 +581,22 @@ c_value_print (struct value *val, struct ui_file *stream,\n      C++: if it is a member pointer, we will take care\n      of that when we print it.  */\n \n-  /* Preserve the original type before stripping typedefs.  We prefer\n-     to pass down the original type when possible, but for local\n-     checks it is better to look past the typedefs.  */\n-  val_type = value_type (val);\n-  type = check_typedef (val_type);\n+  type = check_typedef (value_type (val));\n \n   if (TYPE_CODE (type) == TYPE_CODE_PTR || TYPE_IS_REFERENCE (type))\n     {\n+      struct type *original_type = value_type (val);\n+\n       /* Hack:  remove (char *) for char strings.  Their\n          type is indicated by the quoted string anyway.\n          (Don't use c_textual_element_type here; quoted strings\n          are always exactly (char *), (wchar_t *), or the like.  */\n-      if (TYPE_CODE (val_type) == TYPE_CODE_PTR\n-\t  && TYPE_NAME (val_type) == NULL\n-\t  && TYPE_NAME (TYPE_TARGET_TYPE (val_type)) != NULL\n-\t  && (strcmp (TYPE_NAME (TYPE_TARGET_TYPE (val_type)),\n+      if (TYPE_CODE (original_type) == TYPE_CODE_PTR\n+\t  && TYPE_NAME (original_type) == NULL\n+\t  && TYPE_NAME (TYPE_TARGET_TYPE (original_type)) != NULL\n+\t  && (strcmp (TYPE_NAME (TYPE_TARGET_TYPE (original_type)),\n \t\t      \"char\") == 0\n-\t      || textual_name (TYPE_NAME (TYPE_TARGET_TYPE (val_type)))))\n+\t      || textual_name (TYPE_NAME (TYPE_TARGET_TYPE (original_type)))))\n \t{\n \t  /* Print nothing.  */\n \t}\n@@ -624,7 +622,6 @@ c_value_print (struct value *val, struct ui_file *stream,\n \t      if (real_type)\n \t\t{\n \t\t  /* RTTI entry found.  */\n-\t\t  type = real_type;\n \n \t\t  /* Need to adjust pointer value.  */\n \t\t  val = value_from_pointer (real_type,\n@@ -637,14 +634,11 @@ c_value_print (struct value *val, struct ui_file *stream,\n \t    }\n \n \t  if (is_ref)\n-\t    {\n-\t      val = value_ref (value_ind (val), refcode);\n-\t      type = value_type (val);\n-\t    }\n+\t    val = value_ref (value_ind (val), refcode);\n \n+\t  type = value_type (val);\n \t  type_print (type, \"\", stream, -1);\n \t  fprintf_filtered (stream, \") \");\n-\t  val_type = type;\n \t}\n       else\n \t{\n@@ -667,36 +661,25 @@ c_value_print (struct value *val, struct ui_file *stream,\n \t  /* We have RTTI information, so use it.  */\n \t  val = value_full_object (val, real_type, \n \t\t\t\t   full, top, using_enc);\n+\t  /* In a destructor we might see a real type that is a\n+\t     superclass of the object's type.  In this case it is\n+\t     better to leave the object as-is.  */\n+\t  if (!(full\n+\t\t&& (TYPE_LENGTH (real_type)\n+\t\t    < TYPE_LENGTH (value_enclosing_type (val)))))\n+\t    val = value_cast (real_type, val);\n \t  fprintf_filtered (stream, \"(%s%s) \",\n \t\t\t    TYPE_NAME (real_type),\n \t\t\t    full ? \"\" : _(\" [incomplete object]\"));\n-\t  /* Print out object: enclosing type is same as real_type if\n-\t     full.  */\n-\t  val_print (value_enclosing_type (val),\n-\t\t     0,\n-\t\t     value_address (val), stream, 0,\n-\t\t     val, &opts, current_language);\n-\t  return;\n-          /* Note: When we look up RTTI entries, we don't get any\n-             information on const or volatile attributes.  */\n \t}\n       else if (type != check_typedef (value_enclosing_type (val)))\n \t{\n \t  /* No RTTI information, so let's do our best.  */\n \t  fprintf_filtered (stream, \"(%s ?) \",\n \t\t\t    TYPE_NAME (value_enclosing_type (val)));\n-\t  val_print (value_enclosing_type (val),\n-\t\t     0,\n-\t\t     value_address (val), stream, 0,\n-\t\t     val, &opts, current_language);\n-\t  return;\n+\t  val = value_cast (value_enclosing_type (val), val);\n \t}\n-      /* Otherwise, we end up at the return outside this \"if\".  */\n     }\n \n-  val_print (val_type,\n-\t     value_embedded_offset (val),\n-\t     value_address (val),\n-\t     stream, 0,\n-\t     val, &opts, current_language);\n+  common_val_print (val, stream, 0, &opts, current_language);\n }"
    },
    {
      "sha": "ec22de89d57898e1e51c5dc361312125ab382530",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2",
      "patch": "@@ -1,3 +1,10 @@\n+2020-03-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdb.base/printcmds.exp (test_print_strings): Add regression\n+\ttest.\n+\t* gdb.base/printcmds.c (charptr): New typedef.\n+\t(teststring2): New global.\n+\n 2020-03-13  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.base/break-interp.exp: Use the tail of the filename, not the"
    },
    {
      "sha": "04b766fc0c2c9b0b870d23d0453a5b995fd30c64",
      "filename": "gdb/testsuite/gdb.base/printcmds.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2/gdb/testsuite/gdb.base/printcmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2/gdb/testsuite/gdb.base/printcmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/printcmds.c?ref=a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2",
      "patch": "@@ -72,6 +72,9 @@ int int4dim[1][2][3][2] = {{{{0,1},{2,3},{4,5}},{{6,7},{8,9},{10,11}}}};\n \n char *teststring = (char*)\"teststring contents\";\n \n+typedef char *charptr;\n+charptr teststring2 = \"more contents\";\n+\n /* Test printing of a struct containing character arrays. */\n \n struct some_arrays {"
    },
    {
      "sha": "2c8baad5aa839c171c16629c745cdcd19d39ac55",
      "filename": "gdb/testsuite/gdb.base/printcmds.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2/gdb/testsuite/gdb.base/printcmds.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2/gdb/testsuite/gdb.base/printcmds.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/printcmds.exp?ref=a1f6a07c3d1d3a34d36d4e49f0fd3c66554e41b2",
      "patch": "@@ -519,6 +519,9 @@ proc test_print_strings {} {\n     gdb_test \"p teststring\" \\\n \t\" = (.unsigned char .. )?\\\"teststring contents\\\"\" \"p teststring with elements set to 20\"\n \n+    gdb_test \"print teststring2\" \\\n+\t\" = (charptr) \\\"more contents\\\"\"\n+\n     gdb_test_no_output \"set print elements 8\"\n \n     # Set the target-charset to ASCII, because the output varies from"
    }
  ]
}