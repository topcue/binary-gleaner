{
  "sha": "8d9fd3a107c4ae251a4cbcfc995115334e0cf84e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGQ5ZmQzYTEwN2M0YWUyNTFhNGNiY2ZjOTk1MTE1MzM0ZTBjZjg0ZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-11-04T16:17:58Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-11-04T16:17:58Z"
    },
    "message": "Print Ada type name in more cases\n\nIn some cases the name of an Ada type cannot be decoded by\ndecoded_type_name.  For example, the name\n\"p__complex_variable_record_type__T9s\" in the included test case is\nrejected due to the \"T\".  This causes ptype to display the full\ncontents of a record type -- when in fact the name is available and\nought to be printed.\n\nFixing this in decoded_type_name isn't possible because the \"__T\" name\nis not the real name of the type -- it is just a compiler-assigned\nname of convenience.\n\nThis patch fixes the problem by using the resolved type's name when\nthe original type's name isn't suitable.\n\ngdb/ChangeLog\n2020-11-04  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-typeprint.c (ada_print_type): Handle __T types.\n\ngdb/testsuite/ChangeLog\n2020-11-04  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/rec_ptype.exp: New file.\n\t* gdb.ada/rec_ptype/main.adb: New file.\n\t* gdb.ada/rec_ptype/p.ads: New file.",
    "tree": {
      "sha": "48f17c1b0bd417a9e080b148fa0352878c6bf0ae",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/48f17c1b0bd417a9e080b148fa0352878c6bf0ae"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8d9fd3a107c4ae251a4cbcfc995115334e0cf84e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8d9fd3a107c4ae251a4cbcfc995115334e0cf84e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8d9fd3a107c4ae251a4cbcfc995115334e0cf84e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8d9fd3a107c4ae251a4cbcfc995115334e0cf84e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d8f62e8447e7ddba311e9a51d1bf36ef533a2745",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d8f62e8447e7ddba311e9a51d1bf36ef533a2745",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d8f62e8447e7ddba311e9a51d1bf36ef533a2745"
    }
  ],
  "stats": {
    "total": 138,
    "additions": 137,
    "deletions": 1
  },
  "files": [
    {
      "sha": "478da8238f5064ff4ebadaa2f85453f748d83857",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d9fd3a107c4ae251a4cbcfc995115334e0cf84e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d9fd3a107c4ae251a4cbcfc995115334e0cf84e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8d9fd3a107c4ae251a4cbcfc995115334e0cf84e",
      "patch": "@@ -1,3 +1,7 @@\n+2020-11-04  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-typeprint.c (ada_print_type): Handle __T types.\n+\n 2020-11-04  Tom Tromey  <tromey@adacore.com>\n \n \t* dwarf2/read.c (add_partial_symbol, process_die):"
    },
    {
      "sha": "0892c7c3dcd9dd7be230e44115daa82cd1f7151e",
      "filename": "gdb/ada-typeprint.c",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d9fd3a107c4ae251a4cbcfc995115334e0cf84e/gdb/ada-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d9fd3a107c4ae251a4cbcfc995115334e0cf84e/gdb/ada-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-typeprint.c?ref=8d9fd3a107c4ae251a4cbcfc995115334e0cf84e",
      "patch": "@@ -955,7 +955,20 @@ ada_print_type (struct type *type0, const char *varstring,\n \t\tconst struct type_print_options *flags)\n {\n   struct type *type = ada_check_typedef (ada_get_base_type (type0));\n-  char *type_name = decoded_type_name (type0);\n+  /* If we can decode the original type name, use it.  However, there\n+     are cases where the original type is an internally-generated type\n+     with a name that can't be decoded (and whose encoded name might\n+     not actually bear any relation to the type actually declared in\n+     the sources). In that case, try using the name of the base type\n+     in its place.\n+\n+     Note that we looked at the possibility of always using the name\n+     of the base type. This does not always work, unfortunately, as\n+     there are situations where it's the base type which has an\n+     internally-generated name.  */\n+  const char *type_name = decoded_type_name (type0);\n+  if (type_name == nullptr)\n+    type_name = decoded_type_name (type);\n   int is_var_decl = (varstring != NULL && varstring[0] != '\\0');\n \n   if (type == NULL)"
    },
    {
      "sha": "6927735324f61c4bca9da807459a670cc1452d8b",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d9fd3a107c4ae251a4cbcfc995115334e0cf84e/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d9fd3a107c4ae251a4cbcfc995115334e0cf84e/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=8d9fd3a107c4ae251a4cbcfc995115334e0cf84e",
      "patch": "@@ -1,3 +1,9 @@\n+2020-11-04  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/rec_ptype.exp: New file.\n+\t* gdb.ada/rec_ptype/main.adb: New file.\n+\t* gdb.ada/rec_ptype/p.ads: New file.\n+\n 2020-11-04  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.ada/tick_length_array_enum_idx.exp: Add ptype test."
    },
    {
      "sha": "0639f5505b080c811529a177793b3b6e85be40f6",
      "filename": "gdb/testsuite/gdb.ada/rec_ptype.exp",
      "status": "added",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d9fd3a107c4ae251a4cbcfc995115334e0cf84e/gdb/testsuite/gdb.ada/rec_ptype.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d9fd3a107c4ae251a4cbcfc995115334e0cf84e/gdb/testsuite/gdb.ada/rec_ptype.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/rec_ptype.exp?ref=8d9fd3a107c4ae251a4cbcfc995115334e0cf84e",
      "patch": "@@ -0,0 +1,42 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+load_lib \"ada.exp\"\n+\n+if { [skip_ada_tests] } { return -1 }\n+\n+standard_ada_testfile main\n+\n+# Note we don't test the \"none\" (no -fgnat-encodings option) scenario\n+# here, because \"all\" and \"minimal\" cover the cases, and this way we\n+# don't have to update the test when gnat changes its default.\n+foreach_with_prefix scenario {all minimal} {\n+    set flags [list debug additional_flags=-fgnat-encodings=$scenario]\n+\n+    if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable $flags] != \"\"} {\n+\treturn -1\n+    }\n+\n+    clean_restart ${testfile}\n+\n+    set bp_location [gdb_get_line_number \"STOP\" ${testdir}/main.adb]\n+    runto \"main.adb:$bp_location\"\n+\n+    gdb_test \"ptype Test.top_level_record_complex_record\" \\\n+\t[multi_line \"type = record\" \\\n+\t     \"    kind: p.kind_type;\" \\\n+\t     \"    complex_variable_record_variable_record: p.variable_record_type;\" \\\n+\t     \"end record\"]\n+}"
    },
    {
      "sha": "b54ce78564e9c2b9369339847edb2c492045b2d3",
      "filename": "gdb/testsuite/gdb.ada/rec_ptype/main.adb",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d9fd3a107c4ae251a4cbcfc995115334e0cf84e/gdb/testsuite/gdb.ada/rec_ptype/main.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d9fd3a107c4ae251a4cbcfc995115334e0cf84e/gdb/testsuite/gdb.ada/rec_ptype/main.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/rec_ptype/main.adb?ref=8d9fd3a107c4ae251a4cbcfc995115334e0cf84e",
      "patch": "@@ -0,0 +1,23 @@\n+--  Copyright 2020 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+with P; use P;\n+\n+procedure Main is\n+   Test : Top_Level_Record_Type := Top_Level_Record_Type'\n+     (Top_Level_Record_Complex_Record => (Kind => A_Kind, others => <>));\n+begin\n+   null; -- STOP\n+end Main;"
    },
    {
      "sha": "a175f4a9778f5225b5023699dc4aad4c26b99cfd",
      "filename": "gdb/testsuite/gdb.ada/rec_ptype/p.ads",
      "status": "added",
      "additions": 48,
      "deletions": 0,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d9fd3a107c4ae251a4cbcfc995115334e0cf84e/gdb/testsuite/gdb.ada/rec_ptype/p.ads",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d9fd3a107c4ae251a4cbcfc995115334e0cf84e/gdb/testsuite/gdb.ada/rec_ptype/p.ads",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/rec_ptype/p.ads?ref=8d9fd3a107c4ae251a4cbcfc995115334e0cf84e",
      "patch": "@@ -0,0 +1,48 @@\n+--  Copyright 2020 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+package P is\n+\n+   type Kind_Type is (No_Kind, A_Kind, B_Kind);\n+\n+   type PID_Type is new Integer;\n+   Default_Value : constant PID_Type := 0;\n+\n+   type Name_Type is array (1 ..3) of Character;\n+   Name_Default_Value : constant Name_Type := \"AAA\";\n+\n+   type Variable_Record_Type(Kind : Kind_Type := No_Kind) is record\n+      case Kind is\n+         when A_Kind =>\n+            Variable_Record_A : PID_Type := Default_Value;\n+\n+         when B_Kind =>\n+            Variable_Record_B : Name_Type := Name_Default_Value;\n+\n+         when No_Kind =>\n+            null;\n+\n+      end case;\n+   end record;\n+\n+   type Complex_Variable_Record_Type (Kind : Kind_Type := No_Kind) is record\n+      Complex_Variable_Record_Variable_Record : Variable_Record_Type(Kind);\n+   end record;\n+\n+   type Top_Level_Record_Type is record\n+      Top_Level_Record_Complex_Record : Complex_Variable_Record_Type;\n+   end record;\n+\n+end P;"
    }
  ]
}