{
  "sha": "08feed99cbcc75ecdd111f7a10c163b6f99c428f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDhmZWVkOTljYmNjNzVlY2RkMTExZjdhMTBjMTYzYjZmOTljNDI4Zg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-04-18T14:35:04Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-04-18T14:35:04Z"
    },
    "message": "Change get_objfile_arch to a method on objfile\n\nThis changes get_objfile_arch to be a new inline method,\nobjfile::arch.\n\nTo my surprise, this function came up while profiling DWARF psymbol\nreading.  Making this change improved performance from 1.986 seconds\nto 1.869 seconds.  Both measurements were done by taking the mean of\n10 runs on a fixed copy of the gdb executable.\n\ngdb/ChangeLog\n2020-04-18  Tom Tromey  <tom@tromey.com>\n\n\t* xcoffread.c (enter_line_range, scan_xcoff_symtab): Update.\n\t* value.c (value_fn_field): Update.\n\t* valops.c (find_function_in_inferior)\n\t(value_allocate_space_in_inferior): Update.\n\t* tui/tui-winsource.c (tui_update_source_windows_with_line):\n\tUpdate.\n\t* tui/tui-source.c (tui_source_window::set_contents): Update.\n\t* symtab.c (lookup_global_or_static_symbol)\n\t(find_function_start_sal_1, skip_prologue_sal)\n\t(print_msymbol_info, find_gnu_ifunc, symbol_arch): Update.\n\t* symmisc.c (dump_msymbols, dump_symtab_1)\n\t(maintenance_print_one_line_table): Update.\n\t* symfile.c (init_entry_point_info, section_is_mapped)\n\t(list_overlays_command, simple_read_overlay_table)\n\t(simple_overlay_update_1): Update.\n\t* stap-probe.c (handle_stap_probe): Update.\n\t* stabsread.c (dbx_init_float_type, define_symbol)\n\t(read_one_struct_field, read_enum_type, read_range_type): Update.\n\t* source.c (info_line_command): Update.\n\t* python/python.c (gdbpy_source_objfile_script)\n\t(gdbpy_execute_objfile_script): Update.\n\t* python/py-type.c (save_objfile_types): Update.\n\t* python/py-objfile.c (py_free_objfile): Update.\n\t* python/py-inferior.c (python_new_objfile): Update.\n\t* psymtab.c (psym_find_pc_sect_compunit_symtab, dump_psymtab)\n\t(dump_psymtab_addrmap_1, maintenance_info_psymtabs)\n\t(maintenance_check_psymtabs): Update.\n\t* printcmd.c (info_address_command): Update.\n\t* objfiles.h (struct objfile) <arch>: New method, from\n\tget_objfile_arch.\n\t(get_objfile_arch): Don't declare.\n\t* objfiles.c (get_objfile_arch): Remove.\n\t(filter_overlapping_sections): Update.\n\t* minsyms.c (msymbol_is_function): Update.\n\t* mi/mi-symbol-cmds.c (mi_cmd_symbol_list_lines)\n\t(output_nondebug_symbol): Update.\n\t* mdebugread.c (parse_symbol, basic_type, parse_partial_symbols)\n\t(mdebug_expand_psymtab): Update.\n\t* machoread.c (macho_add_oso_symfile): Update.\n\t* linux-tdep.c (linux_infcall_mmap, linux_infcall_munmap):\n\tUpdate.\n\t* linux-fork.c (checkpoint_command): Update.\n\t* linespec.c (convert_linespec_to_sals): Update.\n\t* jit.c (finalize_symtab): Update.\n\t* infrun.c (insert_exception_resume_from_probe): Update.\n\t* ia64-tdep.c (ia64_find_unwind_table): Update.\n\t* hppa-tdep.c (internalize_unwinds): Update.\n\t* gdbtypes.c (get_type_arch, init_float_type, objfile_type):\n\tUpdate.\n\t* gcore.c (call_target_sbrk): Update.\n\t* elfread.c (record_minimal_symbol, elf_symtab_read)\n\t(elf_rel_plt_read, elf_gnu_ifunc_record_cache)\n\t(elf_gnu_ifunc_resolve_by_got): Update.\n\t* dwarf2/read.c (create_addrmap_from_index)\n\t(create_addrmap_from_aranges, dw2_find_pc_sect_compunit_symtab)\n\t(read_debug_names_from_section)\n\t(process_psymtab_comp_unit_reader, add_partial_symbol)\n\t(add_partial_subprogram, process_full_comp_unit)\n\t(read_file_scope, read_func_scope, read_lexical_block_scope)\n\t(read_call_site_scope, dwarf2_ranges_read)\n\t(dwarf2_record_block_ranges, dwarf2_add_field)\n\t(mark_common_block_symbol_computed, read_tag_pointer_type)\n\t(read_tag_string_type, dwarf2_init_float_type)\n\t(dwarf2_init_complex_target_type, read_base_type)\n\t(partial_die_info::read, partial_die_info::read)\n\t(read_attribute_value, dwarf_decode_lines_1, new_symbol)\n\t(dwarf2_fetch_die_loc_sect_off): Update.\n\t* dwarf2/loc.c (dwarf2_find_location_expression)\n\t(class dwarf_evaluate_loc_desc, rw_pieced_value)\n\t(dwarf2_evaluate_loc_desc_full, dwarf2_locexpr_baton_eval)\n\t(dwarf2_loc_desc_get_symbol_read_needs)\n\t(locexpr_describe_location_piece, locexpr_describe_location_1)\n\t(loclist_describe_location): Update.\n\t* dwarf2/index-write.c (write_debug_names): Update.\n\t* dwarf2/frame.c (dwarf2_build_frame_info): Update.\n\t* dtrace-probe.c (dtrace_process_dof): Update.\n\t* dbxread.c (read_dbx_symtab, dbx_end_psymtab)\n\t(process_one_symbol): Update.\n\t* ctfread.c (ctf_init_float_type, read_base_type): Update.\n\t* coffread.c (coff_symtab_read, enter_linenos, decode_base_type)\n\t(coff_read_enum_type): Update.\n\t* cli/cli-cmds.c (edit_command, list_command): Update.\n\t* buildsym.c (buildsym_compunit::finish_block_internal): Update.\n\t* breakpoint.c (create_overlay_event_breakpoint)\n\t(create_longjmp_master_breakpoint)\n\t(create_std_terminate_master_breakpoint)\n\t(create_exception_master_breakpoint, get_sal_arch): Update.\n\t* block.c (block_gdbarch): Update.\n\t* annotate.c (annotate_source_line): Update.",
    "tree": {
      "sha": "bdecd46de78e72dfd7765d8d05cbbe86629f637c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bdecd46de78e72dfd7765d8d05cbbe86629f637c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/08feed99cbcc75ecdd111f7a10c163b6f99c428f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/08feed99cbcc75ecdd111f7a10c163b6f99c428f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/08feed99cbcc75ecdd111f7a10c163b6f99c428f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/08feed99cbcc75ecdd111f7a10c163b6f99c428f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "18f97353547b1a00d5840d2ad6e7e67f44488070",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/18f97353547b1a00d5840d2ad6e7e67f44488070",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/18f97353547b1a00d5840d2ad6e7e67f44488070"
    }
  ],
  "stats": {
    "total": 373,
    "additions": 231,
    "deletions": 142
  },
  "files": [
    {
      "sha": "7078129fe7c8896aea857c5afd199e1738a7b54d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 92,
      "deletions": 0,
      "changes": 92,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -1,3 +1,95 @@\n+2020-04-18  Tom Tromey  <tom@tromey.com>\n+\n+\t* xcoffread.c (enter_line_range, scan_xcoff_symtab): Update.\n+\t* value.c (value_fn_field): Update.\n+\t* valops.c (find_function_in_inferior)\n+\t(value_allocate_space_in_inferior): Update.\n+\t* tui/tui-winsource.c (tui_update_source_windows_with_line):\n+\tUpdate.\n+\t* tui/tui-source.c (tui_source_window::set_contents): Update.\n+\t* symtab.c (lookup_global_or_static_symbol)\n+\t(find_function_start_sal_1, skip_prologue_sal)\n+\t(print_msymbol_info, find_gnu_ifunc, symbol_arch): Update.\n+\t* symmisc.c (dump_msymbols, dump_symtab_1)\n+\t(maintenance_print_one_line_table): Update.\n+\t* symfile.c (init_entry_point_info, section_is_mapped)\n+\t(list_overlays_command, simple_read_overlay_table)\n+\t(simple_overlay_update_1): Update.\n+\t* stap-probe.c (handle_stap_probe): Update.\n+\t* stabsread.c (dbx_init_float_type, define_symbol)\n+\t(read_one_struct_field, read_enum_type, read_range_type): Update.\n+\t* source.c (info_line_command): Update.\n+\t* python/python.c (gdbpy_source_objfile_script)\n+\t(gdbpy_execute_objfile_script): Update.\n+\t* python/py-type.c (save_objfile_types): Update.\n+\t* python/py-objfile.c (py_free_objfile): Update.\n+\t* python/py-inferior.c (python_new_objfile): Update.\n+\t* psymtab.c (psym_find_pc_sect_compunit_symtab, dump_psymtab)\n+\t(dump_psymtab_addrmap_1, maintenance_info_psymtabs)\n+\t(maintenance_check_psymtabs): Update.\n+\t* printcmd.c (info_address_command): Update.\n+\t* objfiles.h (struct objfile) <arch>: New method, from\n+\tget_objfile_arch.\n+\t(get_objfile_arch): Don't declare.\n+\t* objfiles.c (get_objfile_arch): Remove.\n+\t(filter_overlapping_sections): Update.\n+\t* minsyms.c (msymbol_is_function): Update.\n+\t* mi/mi-symbol-cmds.c (mi_cmd_symbol_list_lines)\n+\t(output_nondebug_symbol): Update.\n+\t* mdebugread.c (parse_symbol, basic_type, parse_partial_symbols)\n+\t(mdebug_expand_psymtab): Update.\n+\t* machoread.c (macho_add_oso_symfile): Update.\n+\t* linux-tdep.c (linux_infcall_mmap, linux_infcall_munmap):\n+\tUpdate.\n+\t* linux-fork.c (checkpoint_command): Update.\n+\t* linespec.c (convert_linespec_to_sals): Update.\n+\t* jit.c (finalize_symtab): Update.\n+\t* infrun.c (insert_exception_resume_from_probe): Update.\n+\t* ia64-tdep.c (ia64_find_unwind_table): Update.\n+\t* hppa-tdep.c (internalize_unwinds): Update.\n+\t* gdbtypes.c (get_type_arch, init_float_type, objfile_type):\n+\tUpdate.\n+\t* gcore.c (call_target_sbrk): Update.\n+\t* elfread.c (record_minimal_symbol, elf_symtab_read)\n+\t(elf_rel_plt_read, elf_gnu_ifunc_record_cache)\n+\t(elf_gnu_ifunc_resolve_by_got): Update.\n+\t* dwarf2/read.c (create_addrmap_from_index)\n+\t(create_addrmap_from_aranges, dw2_find_pc_sect_compunit_symtab)\n+\t(read_debug_names_from_section)\n+\t(process_psymtab_comp_unit_reader, add_partial_symbol)\n+\t(add_partial_subprogram, process_full_comp_unit)\n+\t(read_file_scope, read_func_scope, read_lexical_block_scope)\n+\t(read_call_site_scope, dwarf2_ranges_read)\n+\t(dwarf2_record_block_ranges, dwarf2_add_field)\n+\t(mark_common_block_symbol_computed, read_tag_pointer_type)\n+\t(read_tag_string_type, dwarf2_init_float_type)\n+\t(dwarf2_init_complex_target_type, read_base_type)\n+\t(partial_die_info::read, partial_die_info::read)\n+\t(read_attribute_value, dwarf_decode_lines_1, new_symbol)\n+\t(dwarf2_fetch_die_loc_sect_off): Update.\n+\t* dwarf2/loc.c (dwarf2_find_location_expression)\n+\t(class dwarf_evaluate_loc_desc, rw_pieced_value)\n+\t(dwarf2_evaluate_loc_desc_full, dwarf2_locexpr_baton_eval)\n+\t(dwarf2_loc_desc_get_symbol_read_needs)\n+\t(locexpr_describe_location_piece, locexpr_describe_location_1)\n+\t(loclist_describe_location): Update.\n+\t* dwarf2/index-write.c (write_debug_names): Update.\n+\t* dwarf2/frame.c (dwarf2_build_frame_info): Update.\n+\t* dtrace-probe.c (dtrace_process_dof): Update.\n+\t* dbxread.c (read_dbx_symtab, dbx_end_psymtab)\n+\t(process_one_symbol): Update.\n+\t* ctfread.c (ctf_init_float_type, read_base_type): Update.\n+\t* coffread.c (coff_symtab_read, enter_linenos, decode_base_type)\n+\t(coff_read_enum_type): Update.\n+\t* cli/cli-cmds.c (edit_command, list_command): Update.\n+\t* buildsym.c (buildsym_compunit::finish_block_internal): Update.\n+\t* breakpoint.c (create_overlay_event_breakpoint)\n+\t(create_longjmp_master_breakpoint)\n+\t(create_std_terminate_master_breakpoint)\n+\t(create_exception_master_breakpoint, get_sal_arch): Update.\n+\t* block.c (block_gdbarch): Update.\n+\t* annotate.c (annotate_source_line): Update.\n+\n 2020-04-17  Tom Tromey  <tromey@adacore.com>\n \n \t* auto-load.c (show_auto_load_cmd): Remove."
    },
    {
      "sha": "6daa0c570179b676ec7aa4e9b2feaf325d54a162",
      "filename": "gdb/annotate.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/annotate.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/annotate.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/annotate.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -450,7 +450,7 @@ annotate_source_line (struct symtab *s, int line, int mid_statement,\n \treturn;\n \n       annotate_source (s->fullname, line, (int) (*offsets)[line - 1],\n-\t\t       mid_statement, get_objfile_arch (SYMTAB_OBJFILE (s)),\n+\t\t       mid_statement, SYMTAB_OBJFILE (s)->arch (),\n \t\t       pc);\n     }\n }"
    },
    {
      "sha": "9b582433e48b8684f272d424ea2c9dbf997f0bca",
      "filename": "gdb/block.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/block.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/block.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/block.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -62,7 +62,7 @@ block_gdbarch (const struct block *block)\n   if (BLOCK_FUNCTION (block) != NULL)\n     return symbol_arch (BLOCK_FUNCTION (block));\n \n-  return get_objfile_arch (block_objfile (block));\n+  return block_objfile (block)->arch ();\n }\n \n /* See block.h.  */"
    },
    {
      "sha": "858f4c756918724072706d0aa6f9e19757646f3d",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -3201,7 +3201,7 @@ create_overlay_event_breakpoint (void)\n \t}\n \n       addr = BMSYMBOL_VALUE_ADDRESS (bp_objfile_data->overlay_msym);\n-      b = create_internal_breakpoint (get_objfile_arch (objfile), addr,\n+      b = create_internal_breakpoint (objfile->arch (), addr,\n                                       bp_overlay_event,\n \t\t\t\t      &internal_breakpoint_ops);\n       initialize_explicit_location (&explicit_loc);\n@@ -3238,7 +3238,7 @@ create_longjmp_master_breakpoint (void)\n \tstruct gdbarch *gdbarch;\n \tstruct breakpoint_objfile_data *bp_objfile_data;\n \n-\tgdbarch = get_objfile_arch (objfile);\n+\tgdbarch = objfile->arch ();\n \n \tbp_objfile_data = get_breakpoint_objfile_data (objfile);\n \n@@ -3362,7 +3362,7 @@ create_std_terminate_master_breakpoint (void)\n \t  }\n \n \taddr = BMSYMBOL_VALUE_ADDRESS (bp_objfile_data->terminate_msym);\n-\tb = create_internal_breakpoint (get_objfile_arch (objfile), addr,\n+\tb = create_internal_breakpoint (objfile->arch (), addr,\n \t\t\t\t\tbp_std_terminate_master,\n \t\t\t\t\t&internal_breakpoint_ops);\n \tinitialize_explicit_location (&explicit_loc);\n@@ -3414,7 +3414,7 @@ create_exception_master_breakpoint (void)\n \n       if (!bp_objfile_data->exception_probes.empty ())\n \t{\n-\t  gdbarch = get_objfile_arch (objfile);\n+\t  gdbarch = objfile->arch ();\n \n \t  for (probe *p : bp_objfile_data->exception_probes)\n \t    {\n@@ -3434,7 +3434,7 @@ create_exception_master_breakpoint (void)\n       if (msym_not_found_p (bp_objfile_data->exception_msym.minsym))\n \tcontinue;\n \n-      gdbarch = get_objfile_arch (objfile);\n+      gdbarch = objfile->arch ();\n \n       if (bp_objfile_data->exception_msym.minsym == NULL)\n \t{\n@@ -7116,9 +7116,9 @@ struct gdbarch *\n get_sal_arch (struct symtab_and_line sal)\n {\n   if (sal.section)\n-    return get_objfile_arch (sal.section->objfile);\n+    return sal.section->objfile->arch ();\n   if (sal.symtab)\n-    return get_objfile_arch (SYMTAB_OBJFILE (sal.symtab));\n+    return SYMTAB_OBJFILE (sal.symtab)->arch ();\n \n   return NULL;\n }"
    },
    {
      "sha": "b9bcc33080abece60428d1dc2feb426a6694fb05",
      "filename": "gdb/buildsym.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/buildsym.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/buildsym.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/buildsym.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -213,7 +213,7 @@ buildsym_compunit::finish_block_internal\n      CORE_ADDR start, CORE_ADDR end,\n      int is_global, int expandable)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (m_objfile);\n+  struct gdbarch *gdbarch = m_objfile->arch ();\n   struct pending *next, *next1;\n   struct block *block;\n   struct pending_block *pblock;"
    },
    {
      "sha": "1b677f5d7a197889ec8691ffec569827b5da7d5a",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -925,7 +925,7 @@ edit_command (const char *arg, int from_tty)\n \t    error (_(\"No source file for address %s.\"),\n \t\t   paddress (get_current_arch (), sal.pc));\n \n-\t  gdbarch = get_objfile_arch (SYMTAB_OBJFILE (sal.symtab));\n+\t  gdbarch = SYMTAB_OBJFILE (sal.symtab)->arch ();\n           sym = find_pc_function (sal.pc);\n           if (sym)\n \t    printf_filtered (\"%s is in %s (%s:%d).\\n\",\n@@ -1257,7 +1257,7 @@ list_command (const char *arg, int from_tty)\n \terror (_(\"No source file for address %s.\"),\n \t       paddress (get_current_arch (), sal.pc));\n \n-      gdbarch = get_objfile_arch (SYMTAB_OBJFILE (sal.symtab));\n+      gdbarch = SYMTAB_OBJFILE (sal.symtab)->arch ();\n       sym = find_pc_function (sal.pc);\n       if (sym)\n \tprintf_filtered (\"%s is in %s (%s:%d).\\n\","
    },
    {
      "sha": "7fbdcc4f68fb6742634d328bfd5e73ef26a87cb3",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -753,7 +753,7 @@ coff_symtab_read (minimal_symbol_reader &reader,\n \t\t  long symtab_offset, unsigned int nsyms,\n \t\t  struct objfile *objfile)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   struct context_stack *newobj = nullptr;\n   struct coff_symbol coff_symbol;\n   struct coff_symbol *cs = &coff_symbol;\n@@ -1402,7 +1402,7 @@ static void\n enter_linenos (long file_offset, int first_line,\n \t       int last_line, struct objfile *objfile)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   char *rawptr;\n   struct internal_lineno lptr;\n \n@@ -1834,7 +1834,7 @@ decode_base_type (struct coff_symbol *cs,\n \t\t  union internal_auxent *aux, \n \t\t  struct objfile *objfile)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   struct type *type;\n \n   switch (c_type)\n@@ -2062,7 +2062,7 @@ static struct type *\n coff_read_enum_type (int index, int length, int lastsym,\n \t\t     struct objfile *objfile)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   struct symbol *sym;\n   struct type *type;\n   int nsyms = 0;"
    },
    {
      "sha": "8cc7271c0750a0c6bfe020453f7086b0739d6e57",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -330,7 +330,7 @@ ctf_init_float_type (struct objfile *objfile,\n \t\t     const char *name,\n \t\t     const char *name_hint)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   const struct floatformat **format;\n   struct type *type;\n \n@@ -521,7 +521,7 @@ read_base_type (struct ctf_context *ccp, ctf_id_t tid)\n   if (kind == CTF_K_INTEGER)\n     {\n       uint32_t issigned, ischar, isbool;\n-      struct gdbarch *gdbarch = get_objfile_arch (of);\n+      struct gdbarch *gdbarch = of->arch ();\n \n       issigned = cet.cte_format & CTF_INT_SIGNED;\n       ischar = cet.cte_format & CTF_INT_CHAR;"
    },
    {
      "sha": "c0155593e3b4301021ac06d00cb540db6509c94e",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -951,7 +951,7 @@ function_outside_compilation_unit_complaint (const char *arg1)\n static void\n read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   struct external_nlist *bufp = 0;\t/* =0 avoids gcc -Wall glitch.  */\n   struct internal_nlist nlist;\n   CORE_ADDR text_addr;\n@@ -1936,7 +1936,7 @@ dbx_end_psymtab (struct objfile *objfile, legacy_psymtab *pst,\n \t\t int textlow_not_set)\n {\n   int i;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n \n   if (capping_symbol_offset != -1)\n     LDSYMLEN (pst) = capping_symbol_offset - LDSYMOFF (pst);\n@@ -2338,7 +2338,7 @@ process_one_symbol (int type, int desc, CORE_ADDR valu, const char *name,\n \t\t    const section_offsets &section_offsets,\n \t\t    struct objfile *objfile, enum language language)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   struct context_stack *newobj;\n   struct context_stack cstk;\n   /* This remembers the address of the start of a function.  It is"
    },
    {
      "sha": "c452ac9b476c5f84dfc2326d709075f25939da60",
      "filename": "gdb/dtrace-probe.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/dtrace-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/dtrace-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dtrace-probe.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -520,7 +520,7 @@ dtrace_process_dof (asection *sect, struct objfile *objfile,\n \t\t    std::vector<std::unique_ptr<probe>> *probesp,\n \t\t    struct dtrace_dof_hdr *dof)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   struct dtrace_dof_sect *section;\n   int i;\n "
    },
    {
      "sha": "f7276d48ce79dc339a0c915a593e163b67a70a26",
      "filename": "gdb/dwarf2/frame.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/dwarf2/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/dwarf2/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/frame.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -2147,7 +2147,7 @@ dwarf2_build_frame_info (struct objfile *objfile)\n   dwarf2_cie_table cie_table;\n   dwarf2_fde_table fde_table;\n \n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n \n   /* Build a minimal decoding of the DWARF2 compilation unit.  */\n   std::unique_ptr<comp_unit> unit (new comp_unit (objfile));"
    },
    {
      "sha": "fc42816b1e7c517ef93649a949fb74f000d53acb",
      "filename": "gdb/dwarf2/index-write.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/dwarf2/index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/dwarf2/index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-write.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -1493,7 +1493,7 @@ write_debug_names (struct dwarf2_per_objfile *dwarf2_per_objfile,\n   const bool dwarf5_is_dwarf64 = check_dwarf64_offsets (dwarf2_per_objfile);\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   const enum bfd_endian dwarf5_byte_order\n-    = gdbarch_byte_order (get_objfile_arch (objfile));\n+    = gdbarch_byte_order (objfile->arch ());\n \n   /* The CU list is already sorted, so we don't need to do additional\n      work here.  Also, the debug_types entries do not appear in"
    },
    {
      "sha": "b9456bc9dfbb90e311fb81538829fe5559f3a0f1",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -318,7 +318,7 @@ dwarf2_find_location_expression (struct dwarf2_loclist_baton *baton,\n \t\t\t\t size_t *locexpr_length, CORE_ADDR pc)\n {\n   struct objfile *objfile = baton->per_cu->objfile ();\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n   unsigned int addr_size = baton->per_cu->addr_size ();\n   int signed_addr_p = bfd_get_sign_extend_vma (objfile->obfd);\n@@ -729,7 +729,7 @@ class dwarf_evaluate_loc_desc : public dwarf_expr_context\n \t\t\t\t\t\t\t(CORE_ADDR) 0);\n \n     scoped_restore save_arch = make_scoped_restore (&this->gdbarch);\n-    this->gdbarch = get_objfile_arch (per_cu->objfile ());\n+    this->gdbarch = per_cu->objfile ()->arch ();\n     scoped_restore save_addr_size = make_scoped_restore (&this->addr_size);\n     this->addr_size = per_cu->addr_size ();\n     scoped_restore save_offset = make_scoped_restore (&this->offset);\n@@ -1816,7 +1816,7 @@ rw_pieced_value (struct value *v, struct value *from)\n \t      }\n \n \t    struct objfile *objfile = c->per_cu->objfile ();\n-\t    struct gdbarch *objfile_gdbarch = get_objfile_arch (objfile);\n+\t    struct gdbarch *objfile_gdbarch = objfile->arch ();\n \t    ULONGEST stack_value_size_bits\n \t      = 8 * TYPE_LENGTH (value_type (p->v.value));\n \n@@ -2192,7 +2192,7 @@ dwarf2_evaluate_loc_desc_full (struct type *type, struct frame_info *frame,\n \n   scoped_value_mark free_values;\n \n-  ctx.gdbarch = get_objfile_arch (objfile);\n+  ctx.gdbarch = objfile->arch ();\n   ctx.addr_size = per_cu->addr_size ();\n   ctx.ref_addr_size = per_cu->ref_addr_size ();\n   ctx.offset = per_cu->text_offset ();\n@@ -2315,7 +2315,7 @@ dwarf2_evaluate_loc_desc_full (struct type *type, struct frame_info *frame,\n \t    size_t n = TYPE_LENGTH (value_type (value));\n \t    size_t len = TYPE_LENGTH (subobj_type);\n \t    size_t max = TYPE_LENGTH (type);\n-\t    struct gdbarch *objfile_gdbarch = get_objfile_arch (objfile);\n+\t    struct gdbarch *objfile_gdbarch = objfile->arch ();\n \n \t    if (subobj_byte_offset + len > max)\n \t      invalid_synthetic_pointer ();\n@@ -2409,7 +2409,7 @@ dwarf2_locexpr_baton_eval (const struct dwarf2_locexpr_baton *dlbaton,\n \n   objfile = dlbaton->per_cu->objfile ();\n \n-  ctx.gdbarch = get_objfile_arch (objfile);\n+  ctx.gdbarch = objfile->arch ();\n   ctx.addr_size = dlbaton->per_cu->addr_size ();\n   ctx.ref_addr_size = dlbaton->per_cu->ref_addr_size ();\n   ctx.offset = dlbaton->per_cu->text_offset ();\n@@ -2740,7 +2740,7 @@ dwarf2_loc_desc_get_symbol_read_needs (const gdb_byte *data, size_t size,\n \n   ctx.needs = SYMBOL_NEEDS_NONE;\n   ctx.per_cu = per_cu;\n-  ctx.gdbarch = get_objfile_arch (objfile);\n+  ctx.gdbarch = objfile->arch ();\n   ctx.addr_size = per_cu->addr_size ();\n   ctx.ref_addr_size = per_cu->ref_addr_size ();\n   ctx.offset = per_cu->text_offset ();\n@@ -3638,7 +3638,7 @@ locexpr_describe_location_piece (struct symbol *symbol, struct ui_file *stream,\n \t\t\t\t const gdb_byte *data, const gdb_byte *end,\n \t\t\t\t unsigned int addr_size)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   size_t leb128_size;\n \n   if (data[0] >= DW_OP_reg0 && data[0] <= DW_OP_reg31)\n@@ -4234,7 +4234,7 @@ locexpr_describe_location_1 (struct symbol *symbol, CORE_ADDR addr,\n \t{\n \t  fprintf_filtered (stream, _(\"a complex DWARF expression:\\n\"));\n \t  data = disassemble_dwarf_expression (stream,\n-\t\t\t\t\t       get_objfile_arch (objfile),\n+\t\t\t\t\t       objfile->arch (),\n \t\t\t\t\t       addr_size, offset_size, data,\n \t\t\t\t\t       data, end, 0,\n \t\t\t\t\t       dwarf_always_disassemble,\n@@ -4436,7 +4436,7 @@ loclist_describe_location (struct symbol *symbol, CORE_ADDR addr,\n     = (struct dwarf2_loclist_baton *) SYMBOL_LOCATION_BATON (symbol);\n   const gdb_byte *loc_ptr, *buf_end;\n   struct objfile *objfile = dlbaton->per_cu->objfile ();\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n   unsigned int addr_size = dlbaton->per_cu->addr_size ();\n   int offset_size = dlbaton->per_cu->offset_size ();"
    },
    {
      "sha": "41db511c85103c9dfb1bb98298029fa22da2e58b",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 32,
      "deletions": 30,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -2567,7 +2567,7 @@ create_addrmap_from_index (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t\t   struct mapped_index *index)\n {\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   const gdb_byte *iter, *end;\n   struct addrmap *mutable_map;\n   CORE_ADDR baseaddr;\n@@ -2624,7 +2624,7 @@ create_addrmap_from_aranges (struct dwarf2_per_objfile *dwarf2_per_objfile,\n {\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   bfd *abfd = objfile->obfd;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   const CORE_ADDR baseaddr = objfile->text_section_offset ();\n \n   auto_obstack temp_obstack;\n@@ -4690,7 +4690,7 @@ dw2_find_pc_sect_compunit_symtab (struct objfile *objfile,\n \n   if (warn_if_readin && data->v.quick->compunit_symtab)\n     warning (_(\"(Internal error: pc %s in read in CU, but not in symtab.)\"),\n-\t     paddress (get_objfile_arch (objfile), pc));\n+\t     paddress (objfile->arch (), pc));\n \n   result\n     = recursively_find_pc_sect_compunit_symtab (dw2_instantiate_symtab (data,\n@@ -4820,7 +4820,7 @@ read_debug_names_from_section (struct objfile *objfile,\n \n   section->read (objfile);\n \n-  map.dwarf5_byte_order = gdbarch_byte_order (get_objfile_arch (objfile));\n+  map.dwarf5_byte_order = gdbarch_byte_order (objfile->arch ());\n \n   const gdb_byte *addr = section->buffer;\n \n@@ -7253,7 +7253,7 @@ process_psymtab_comp_unit_reader (const struct die_reader_specs *reader,\n {\n   struct dwarf2_cu *cu = reader->cu;\n   struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   struct dwarf2_per_cu_data *per_cu = cu->per_cu;\n   CORE_ADDR baseaddr;\n   CORE_ADDR best_lowpc = 0, best_highpc = 0;\n@@ -8167,7 +8167,7 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n   struct dwarf2_per_objfile *dwarf2_per_objfile\n     = cu->per_cu->dwarf2_per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   CORE_ADDR addr = 0;\n   const char *actual_name = NULL;\n   CORE_ADDR baseaddr;\n@@ -8410,7 +8410,7 @@ add_partial_subprogram (struct partial_die_info *pdi,\n \t  if (set_addrmap)\n \t    {\n \t      struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n-\t      struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+\t      struct gdbarch *gdbarch = objfile->arch ();\n \t      CORE_ADDR baseaddr;\n \t      CORE_ADDR this_highpc;\n \t      CORE_ADDR this_lowpc;\n@@ -9546,7 +9546,7 @@ process_full_comp_unit (struct dwarf2_per_cu_data *per_cu,\n   struct dwarf2_cu *cu = per_cu->cu;\n   struct dwarf2_per_objfile *dwarf2_per_objfile = per_cu->dwarf2_per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   CORE_ADDR lowpc, highpc;\n   struct compunit_symtab *cust;\n   CORE_ADDR baseaddr;\n@@ -10751,7 +10751,7 @@ read_file_scope (struct die_info *die, struct dwarf2_cu *cu)\n   struct dwarf2_per_objfile *dwarf2_per_objfile\n     = cu->per_cu->dwarf2_per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   CORE_ADDR lowpc = ((CORE_ADDR) -1);\n   CORE_ADDR highpc = ((CORE_ADDR) 0);\n   struct attribute *attr;\n@@ -12830,7 +12830,7 @@ static void\n read_func_scope (struct die_info *die, struct dwarf2_cu *cu)\n {\n   struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   struct context_stack *newobj;\n   CORE_ADDR lowpc;\n   CORE_ADDR highpc;\n@@ -13031,7 +13031,7 @@ static void\n read_lexical_block_scope (struct die_info *die, struct dwarf2_cu *cu)\n {\n   struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   CORE_ADDR lowpc, highpc;\n   struct die_info *child_die;\n   CORE_ADDR baseaddr;\n@@ -13102,7 +13102,7 @@ static void\n read_call_site_scope (struct die_info *die, struct dwarf2_cu *cu)\n {\n   struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   CORE_ADDR pc, baseaddr;\n   struct attribute *attr;\n   struct call_site *call_site, call_site_local;\n@@ -13747,7 +13747,7 @@ dwarf2_ranges_read (unsigned offset, CORE_ADDR *low_return,\n \t\t    dwarf2_psymtab *ranges_pst)\n {\n   struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   const CORE_ADDR baseaddr = objfile->text_section_offset ();\n   int low_set = 0;\n   CORE_ADDR low = 0;\n@@ -13991,7 +13991,7 @@ dwarf2_record_block_ranges (struct die_info *die, struct block *block,\n                             CORE_ADDR baseaddr, struct dwarf2_cu *cu)\n {\n   struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   struct attribute *attr;\n   struct attribute *attr_high;\n \n@@ -14179,7 +14179,7 @@ dwarf2_add_field (struct field_info *fip, struct die_info *die,\n \t\t  struct dwarf2_cu *cu)\n {\n   struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   struct nextfield *new_field;\n   struct attribute *attr;\n   struct field *fp;\n@@ -15945,7 +15945,7 @@ mark_common_block_symbol_computed (struct symbol *sym,\n   struct dwarf2_locexpr_baton *baton;\n   gdb_byte *ptr;\n   unsigned int cu_off;\n-  enum bfd_endian byte_order = gdbarch_byte_order (get_objfile_arch (objfile));\n+  enum bfd_endian byte_order = gdbarch_byte_order (objfile->arch ());\n   LONGEST offset = 0;\n \n   gdb_assert (common_loc && member_loc);\n@@ -16253,7 +16253,7 @@ static struct type *\n read_tag_pointer_type (struct die_info *die, struct dwarf2_cu *cu)\n {\n   struct gdbarch *gdbarch\n-    = get_objfile_arch (cu->per_cu->dwarf2_per_objfile->objfile);\n+    = cu->per_cu->dwarf2_per_objfile->objfile->arch ();\n   struct comp_unit_head *cu_header = &cu->header;\n   struct type *type;\n   struct attribute *attr_byte_size;\n@@ -16512,7 +16512,7 @@ static struct type *\n read_tag_string_type (struct die_info *die, struct dwarf2_cu *cu)\n {\n   struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   struct type *type, *range_type, *index_type, *char_type;\n   struct attribute *attr;\n   struct dynamic_prop prop;\n@@ -16830,7 +16830,7 @@ static struct type *\n dwarf2_init_float_type (struct objfile *objfile, int bits, const char *name,\n \t\t\tconst char *name_hint, enum bfd_endian byte_order)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   const struct floatformat **format;\n   struct type *type;\n \n@@ -16878,7 +16878,7 @@ dwarf2_init_complex_target_type (struct dwarf2_cu *cu,\n \t\t\t\t int bits, const char *name_hint,\n \t\t\t\t enum bfd_endian byte_order)\n {\n-  gdbarch *gdbarch = get_objfile_arch (objfile);\n+  gdbarch *gdbarch = objfile->arch ();\n   struct type *tt = nullptr;\n \n   /* Try to find a suitable floating point builtin type of size BITS.\n@@ -16951,7 +16951,7 @@ read_base_type (struct die_info *die, struct dwarf2_cu *cu)\n   if (!name)\n     complaint (_(\"DW_AT_name missing from DW_TAG_base_type\"));\n \n-  arch = get_objfile_arch (objfile);\n+  arch = objfile->arch ();\n   enum bfd_endian byte_order = gdbarch_byte_order (arch);\n \n   attr = dwarf2_attr (die, DW_AT_endianity, cu);\n@@ -18173,7 +18173,7 @@ partial_die_info::read (const struct die_reader_specs *reader,\n       if (lowpc == 0 && !dwarf2_per_objfile->has_section_at_zero)\n \t{\n \t  struct objfile *objfile = dwarf2_per_objfile->objfile;\n-\t  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+\t  struct gdbarch *gdbarch = objfile->arch ();\n \n \t  complaint (_(\"DW_AT_low_pc %s is zero \"\n \t\t       \"for DIE at %s [in module %s]\"),\n@@ -18185,7 +18185,7 @@ partial_die_info::read (const struct die_reader_specs *reader,\n       else if (lowpc >= highpc)\n \t{\n \t  struct objfile *objfile = dwarf2_per_objfile->objfile;\n-\t  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+\t  struct gdbarch *gdbarch = objfile->arch ();\n \n \t  complaint (_(\"DW_AT_low_pc %s is not < DW_AT_high_pc %s \"\n \t\t       \"for DIE at %s [in module %s]\"),\n@@ -18589,7 +18589,6 @@ read_attribute_value (const struct die_reader_specs *reader,\n   struct dwarf2_per_objfile *dwarf2_per_objfile\n     = cu->per_cu->dwarf2_per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n   bfd *abfd = reader->abfd;\n   struct comp_unit_head *cu_header = &cu->header;\n   unsigned int bytes_read;\n@@ -18613,9 +18612,12 @@ read_attribute_value (const struct die_reader_specs *reader,\n       info_ptr += bytes_read;\n       break;\n     case DW_FORM_addr:\n-      DW_ADDR (attr) = cu->header.read_address (abfd, info_ptr, &bytes_read);\n-      DW_ADDR (attr) = gdbarch_adjust_dwarf2_addr (gdbarch, DW_ADDR (attr));\n-      info_ptr += bytes_read;\n+      {\n+\tstruct gdbarch *gdbarch = objfile->arch ();\n+\tDW_ADDR (attr) = cu->header.read_address (abfd, info_ptr, &bytes_read);\n+\tDW_ADDR (attr) = gdbarch_adjust_dwarf2_addr (gdbarch, DW_ADDR (attr));\n+\tinfo_ptr += bytes_read;\n+      }\n       break;\n     case DW_FORM_block2:\n       blk = dwarf_alloc_block (cu);\n@@ -19827,7 +19829,7 @@ dwarf_decode_lines_1 (struct line_header *lh, struct dwarf2_cu *cu,\n   CORE_ADDR baseaddr;\n   struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n   bfd *abfd = objfile->obfd;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   /* True if we're recording line info (as opposed to building partial\n      symtabs and just interested in finding include files mentioned by\n      the line number program).  */\n@@ -20251,7 +20253,7 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n   struct dwarf2_per_objfile *dwarf2_per_objfile\n     = cu->per_cu->dwarf2_per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   struct symbol *sym = NULL;\n   const char *name;\n   struct attribute *attr = NULL;\n@@ -21898,7 +21900,7 @@ dwarf2_fetch_die_loc_sect_off (sect_offset sect_off,\n     {\n       CORE_ADDR pc = (*get_frame_pc) (baton);\n       CORE_ADDR baseaddr = objfile->text_section_offset ();\n-      struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+      struct gdbarch *gdbarch = objfile->arch ();\n \n       for (const auto &cand_off\n \t     : dwarf2_per_objfile->abstract_to_concrete[die->sect_off])"
    },
    {
      "sha": "2f2fef93996acd817acc9038b68a931fcca7f5bb",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -206,7 +206,7 @@ record_minimal_symbol (minimal_symbol_reader &reader,\n \t\t       enum minimal_symbol_type ms_type,\n \t\t       asection *bfd_section, struct objfile *objfile)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n \n   if (ms_type == mst_text || ms_type == mst_file_text\n       || ms_type == mst_text_gnu_ifunc)\n@@ -251,7 +251,7 @@ elf_symtab_read (minimal_symbol_reader &reader,\n \t\t long number_of_symbols, asymbol **symbol_table,\n \t\t bool copy_names)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   asymbol *sym;\n   long i;\n   CORE_ADDR symaddr;\n@@ -559,7 +559,7 @@ elf_rel_plt_read (minimal_symbol_reader &reader,\n   const struct elf_backend_data *bed = get_elf_backend_data (obfd);\n   asection *relplt, *got_plt;\n   bfd_size_type reloc_count, reloc;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   struct type *ptr_type = builtin_type (gdbarch)->builtin_data_ptr;\n   size_t ptr_size = TYPE_LENGTH (ptr_type);\n \n@@ -747,7 +747,7 @@ elf_gnu_ifunc_record_cache (const char *name, CORE_ADDR addr)\n     {\n       struct elf_gnu_ifunc_cache *entry_found_p\n \t= (struct elf_gnu_ifunc_cache *) *slot;\n-      struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+      struct gdbarch *gdbarch = objfile->arch ();\n \n       if (entry_found_p->addr != addr)\n \t{\n@@ -825,7 +825,7 @@ elf_gnu_ifunc_resolve_by_got (const char *name, CORE_ADDR *addr_p)\n   for (objfile *objfile : current_program_space->objfiles ())\n     {\n       bfd *obfd = objfile->obfd;\n-      struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+      struct gdbarch *gdbarch = objfile->arch ();\n       struct type *ptr_type = builtin_type (gdbarch)->builtin_data_ptr;\n       size_t ptr_size = TYPE_LENGTH (ptr_type);\n       CORE_ADDR pointer_address, addr;"
    },
    {
      "sha": "7b653fb74e37e7417b66696d958a710382d992f6",
      "filename": "gdb/gcore.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/gcore.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/gcore.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gcore.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -282,7 +282,7 @@ call_target_sbrk (int sbrk_arg)\n   else\n     return (bfd_vma) 0;\n \n-  gdbarch = get_objfile_arch (sbrk_objf);\n+  gdbarch = sbrk_objf->arch ();\n   target_sbrk_arg = value_from_longest (builtin_type (gdbarch)->builtin_int, \n \t\t\t\t\tsbrk_arg);\n   gdb_assert (target_sbrk_arg);"
    },
    {
      "sha": "157b3c5e614cfa0ba3ff0b40f74ff36c597c4278",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -236,7 +236,7 @@ get_type_arch (const struct type *type)\n   struct gdbarch *arch;\n \n   if (TYPE_OBJFILE_OWNED (type))\n-    arch = get_objfile_arch (TYPE_OWNER (type).objfile);\n+    arch = TYPE_OWNER (type).objfile->arch ();\n   else\n     arch = TYPE_OWNER (type).gdbarch;\n \n@@ -3000,7 +3000,7 @@ init_float_type (struct objfile *objfile,\n {\n   if (byte_order == BFD_ENDIAN_UNKNOWN)\n     {\n-      struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+      struct gdbarch *gdbarch = objfile->arch ();\n       byte_order = gdbarch_byte_order (gdbarch);\n     }\n   const struct floatformat *fmt = floatformats[byte_order];\n@@ -5607,7 +5607,7 @@ objfile_type (struct objfile *objfile)\n \t\t\t\t 1, struct objfile_type);\n \n   /* Use the objfile architecture to determine basic type properties.  */\n-  gdbarch = get_objfile_arch (objfile);\n+  gdbarch = objfile->arch ();\n \n   /* Basic types.  */\n   objfile_type->builtin_void"
    },
    {
      "sha": "88abe90c5a898fe68256fa2714a0fd13c5e5d8f7",
      "filename": "gdb/hppa-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/hppa-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/hppa-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/hppa-tdep.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -258,7 +258,7 @@ internalize_unwinds (struct objfile *objfile, struct unwind_table_entry *table,\n \n   if (size > 0)\n     {\n-      struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+      struct gdbarch *gdbarch = objfile->arch ();\n       unsigned long tmp;\n       unsigned i;\n       char *buf = (char *) alloca (size);"
    },
    {
      "sha": "5fa0fad2888a5321658966529aa7002372fd9a91",
      "filename": "gdb/ia64-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/ia64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/ia64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ia64-tdep.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -2764,7 +2764,7 @@ ia64_find_unwind_table (struct objfile *objfile, unw_word_t ip,\n \n   dip->start_ip = p_text->p_vaddr + load_base;\n   dip->end_ip = dip->start_ip + p_text->p_memsz;\n-  dip->gp = ia64_find_global_pointer (get_objfile_arch (objfile), ip);\n+  dip->gp = ia64_find_global_pointer (objfile->arch (), ip);\n   dip->format = UNW_INFO_FORMAT_REMOTE_TABLE;\n   dip->u.rti.name_ptr = (unw_word_t) bfd_get_filename (bfd);\n   dip->u.rti.segbase = segbase;"
    },
    {
      "sha": "5d60e64230b5efe9e789cd888c23d5c5695b47ae",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -7819,7 +7819,7 @@ insert_exception_resume_from_probe (struct thread_info *tp,\n   if (debug_infrun)\n     fprintf_unfiltered (gdb_stdlog,\n \t\t\t\"infrun: exception resume at %s\\n\",\n-\t\t\tpaddress (get_objfile_arch (probe->objfile),\n+\t\t\tpaddress (probe->objfile->arch (),\n \t\t\t\t  handler));\n \n   bp = set_momentary_breakpoint_at_pc (get_frame_arch (frame),"
    },
    {
      "sha": "07e9ce7ae245539ab3cc08601abc34ba380bb700",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -656,7 +656,7 @@ finalize_symtab (struct gdb_symtab *stab, struct objfile *objfile)\n     {\n       struct block *new_block = allocate_block (&objfile->objfile_obstack);\n       struct symbol *block_name = allocate_symbol (objfile);\n-      struct type *block_type = arch_type (get_objfile_arch (objfile),\n+      struct type *block_type = arch_type (objfile->arch (),\n \t\t\t\t\t   TYPE_CODE_VOID,\n \t\t\t\t\t   TARGET_CHAR_BIT,\n \t\t\t\t\t   \"void\");"
    },
    {
      "sha": "0eb3bc5b8d4fe4119e3debee22c6b70bd2ace83e",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -2291,7 +2291,7 @@ convert_linespec_to_sals (struct linespec_state *state, linespec_p ls)\n \t\t\t  if (MSYMBOL_TYPE (elem.minsym) == mst_data_gnu_ifunc)\n \t\t\t    {\n \t\t\t      struct gdbarch *gdbarch\n-\t\t\t\t= get_objfile_arch (elem.objfile);\n+\t\t\t\t= elem.objfile->arch ();\n \t\t\t      msym_addr\n \t\t\t\t= (gdbarch_convert_from_func_ptr_addr\n \t\t\t\t   (gdbarch,"
    },
    {
      "sha": "2233d4429ce0a0fd4effd912ed5d7aa1f7e60285",
      "filename": "gdb/linux-fork.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/linux-fork.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/linux-fork.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-fork.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -663,7 +663,7 @@ checkpoint_command (const char *args, int from_tty)\n   if (!fork_fn)\n     error (_(\"checkpoint: can't find fork function in inferior.\"));\n \n-  gdbarch = get_objfile_arch (fork_objf);\n+  gdbarch = fork_objf->arch ();\n   ret = value_from_longest (builtin_type (gdbarch)->builtin_int, 0);\n \n   /* Tell linux-nat.c that we're checkpointing this inferior.  */"
    },
    {
      "sha": "ed84d6ace6b61b518dde3d9b02bfd2202056b783",
      "filename": "gdb/linux-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-tdep.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -2326,7 +2326,7 @@ linux_infcall_mmap (CORE_ADDR size, unsigned prot)\n      \"mmap\" uses 64-bit off_t on x86_64 and 32-bit off_t on i386 and x32.  */\n   struct value *mmap_val = find_function_in_inferior (\"mmap64\", &objf);\n   struct value *addr_val;\n-  struct gdbarch *gdbarch = get_objfile_arch (objf);\n+  struct gdbarch *gdbarch = objf->arch ();\n   CORE_ADDR retval;\n   enum\n     {\n@@ -2365,7 +2365,7 @@ linux_infcall_munmap (CORE_ADDR addr, CORE_ADDR size)\n   struct objfile *objf;\n   struct value *munmap_val = find_function_in_inferior (\"munmap\", &objf);\n   struct value *retval_val;\n-  struct gdbarch *gdbarch = get_objfile_arch (objf);\n+  struct gdbarch *gdbarch = objf->arch ();\n   LONGEST retval;\n   enum\n     {"
    },
    {
      "sha": "4655b67f118c770c69565b3c8f10bd10f1ca37d2",
      "filename": "gdb/machoread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/machoread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/machoread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/machoread.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -493,7 +493,7 @@ macho_add_oso_symfile (oso_el *oso, const gdb_bfd_ref_ptr &abfd,\n             {\n               if (mach_o_debug_level > 4)\n                 {\n-                  struct gdbarch *arch = get_objfile_arch (main_objfile);\n+                  struct gdbarch *arch = main_objfile->arch ();\n                   printf_unfiltered\n                     (_(\"Adding symbol %s (addr: %s)\\n\"),\n                      sym->name, paddress (arch, sym->value));\n@@ -567,7 +567,7 @@ macho_add_oso_symfile (oso_el *oso, const gdb_bfd_ref_ptr &abfd,\n \n                   if (mach_o_debug_level > 3)\n                     {\n-                      struct gdbarch *arch = get_objfile_arch (main_objfile);\n+                      struct gdbarch *arch = main_objfile->arch ();\n                       printf_unfiltered\n                         (_(\"resolve sect %s with %s (set to %s)\\n\"),\n                          sec->name, sym->name,"
    },
    {
      "sha": "5c4158cd6fbfabe1d1546d6ba05b7c69b5be6e54",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -573,7 +573,7 @@ static int\n parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \t      const section_offsets &section_offsets, struct objfile *objfile)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   const bfd_size_type external_sym_size = debug_swap->external_sym_size;\n   void (*const swap_sym_in) (bfd *, void *, SYMR *) = debug_swap->swap_sym_in;\n   const char *name;\n@@ -1357,7 +1357,7 @@ static const struct objfile_key<struct type *,\n static struct type *\n basic_type (int bt, struct objfile *objfile)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   struct type **map_bt = basic_type_data.get (objfile);\n   struct type *tp;\n \n@@ -2283,7 +2283,7 @@ static void\n parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t       struct objfile *objfile)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   const bfd_size_type external_sym_size = debug_swap->external_sym_size;\n   const bfd_size_type external_rfd_size = debug_swap->external_rfd_size;\n   const bfd_size_type external_ext_size = debug_swap->external_ext_size;\n@@ -3899,7 +3899,7 @@ mdebug_expand_psymtab (legacy_psymtab *pst, struct objfile *objfile)\n \n   if (processing_gcc_compilation != 0)\n     {\n-      struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+      struct gdbarch *gdbarch = objfile->arch ();\n \n       /* This symbol table contains stabs-in-ecoff entries.  */\n "
    },
    {
      "sha": "d48d0effe271ffa99c8fdf01d0fc40b36ec624e8",
      "filename": "gdb/mi/mi-symbol-cmds.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/mi/mi-symbol-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/mi/mi-symbol-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-symbol-cmds.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -50,7 +50,7 @@ mi_cmd_symbol_list_lines (const char *command, char **argv, int argc)\n      already sorted by increasing values in the symbol table, so no\n      need to perform any other sorting.  */\n \n-  gdbarch = get_objfile_arch (SYMTAB_OBJFILE (s));\n+  gdbarch = SYMTAB_OBJFILE (s)->arch ();\n \n   ui_out_emit_list list_emitter (uiout, \"lines\");\n   if (SYMTAB_LINETABLE (s) != NULL && SYMTAB_LINETABLE (s)->nitems > 0)\n@@ -96,7 +96,7 @@ static void\n output_nondebug_symbol (ui_out *uiout,\n \t\t\tconst struct bound_minimal_symbol &msymbol)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (msymbol.objfile);\n+  struct gdbarch *gdbarch = msymbol.objfile->arch ();\n   ui_out_emit_tuple tuple_emitter (uiout, NULL);\n \n   uiout->field_core_addr (\"address\", gdbarch,"
    },
    {
      "sha": "2c1262b0dd6c26a20f2ed9a5e7328db79b1cd0ad",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -77,7 +77,7 @@ msymbol_is_function (struct objfile *objfile, minimal_symbol *minsym,\n     case mst_file_bss:\n     case mst_data_gnu_ifunc:\n       {\n-\tstruct gdbarch *gdbarch = get_objfile_arch (objfile);\n+\tstruct gdbarch *gdbarch = objfile->arch ();\n \tCORE_ADDR pc\n \t  = gdbarch_convert_from_func_ptr_addr (gdbarch, msym_addr,\n \t\t\t\t\t\tcurrent_top_target ());"
    },
    {
      "sha": "d329a953c17cac6b1ef5c77bf8d59e686000e2c4",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 1,
      "deletions": 9,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -374,14 +374,6 @@ objfile::objfile (bfd *abfd, const char *name, objfile_flags flags_)\n   per_bfd = get_objfile_bfd_data (this, abfd);\n }\n \n-/* Retrieve the gdbarch associated with OBJFILE.  */\n-\n-struct gdbarch *\n-get_objfile_arch (const struct objfile *objfile)\n-{\n-  return objfile->per_bfd->gdbarch;\n-}\n-\n /* If there is a valid and known entry point, function fills *ENTRY_P with it\n    and returns non-zero; otherwise it returns zero.  */\n \n@@ -1132,7 +1124,7 @@ filter_overlapping_sections (struct obj_section **map, int map_size)\n \n \t      const CORE_ADDR sect2_endaddr = obj_section_endaddr (sect2);\n \n-\t      struct gdbarch *const gdbarch = get_objfile_arch (objf1);\n+\t      struct gdbarch *const gdbarch = objf1->arch ();\n \n \t      complaint (_(\"unexpected overlap between:\\n\"\n \t\t\t   \" (A) section `%s' from `%s' [%s, %s)\\n\""
    },
    {
      "sha": "77f94e4f21d14a8fb1e8b1ff883e49a9ce01e9ce",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -544,6 +544,12 @@ struct objfile\n \t\t\t\t\t\t\tstr.size () + 1);\n   }\n \n+  /* Retrieve the gdbarch associated with this objfile.  */\n+  struct gdbarch *arch () const\n+  {\n+    return per_bfd->gdbarch;\n+  }\n+\n \n   /* The object file's original name as specified by the user,\n      made absolute, and tilde-expanded.  However, it is not canonicalized\n@@ -709,8 +715,6 @@ typedef std::unique_ptr<objfile, objfile_deleter> objfile_up;\n \n /* Declarations for functions defined in objfiles.c */\n \n-extern struct gdbarch *get_objfile_arch (const struct objfile *);\n-\n extern int entry_point_address_query (CORE_ADDR *entry_p);\n \n extern CORE_ADDR entry_point_address (void);"
    },
    {
      "sha": "de6d3d43bb4983ebdf02ae580461bba865650f06",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -1442,7 +1442,7 @@ info_address_command (const char *exp, int from_tty)\n \t{\n \t  struct objfile *objfile = msymbol.objfile;\n \n-\t  gdbarch = get_objfile_arch (objfile);\n+\t  gdbarch = objfile->arch ();\n \t  load_addr = BMSYMBOL_VALUE_ADDRESS (msymbol);\n \n \t  printf_filtered (\"Symbol \\\"\");"
    },
    {
      "sha": "b156aa0e228da6970f5dedb42cc130d14339fc3c",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -392,7 +392,7 @@ psym_find_pc_sect_compunit_symtab (struct objfile *objfile,\n \t   continue, so let's not.  */\n \twarning (_(\"\\\n (Internal error: pc %s in read in psymtab, but not in symtab.)\\n\"),\n-\t\t paddress (get_objfile_arch (objfile), pc));\n+\t\t paddress (objfile->arch (), pc));\n       psymtab_to_symtab (objfile, ps);\n       return ps->get_compunit_symtab ();\n     }\n@@ -927,7 +927,7 @@ static void\n dump_psymtab (struct objfile *objfile, struct partial_symtab *psymtab,\n \t      struct ui_file *outfile)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   int i;\n \n   if (psymtab->anonymous)\n@@ -1779,7 +1779,7 @@ dump_psymtab_addrmap_1 (void *datap, CORE_ADDR start_addr, void *obj)\n {\n   struct dump_psymtab_addrmap_data *data\n     = (struct dump_psymtab_addrmap_data *) datap;\n-  struct gdbarch *gdbarch = get_objfile_arch (data->objfile);\n+  struct gdbarch *gdbarch = data->objfile->arch ();\n   struct partial_symtab *addrmap_psymtab = (struct partial_symtab *) obj;\n   const char *psymtab_address_or_end = NULL;\n \n@@ -1999,7 +1999,7 @@ maintenance_info_psymtabs (const char *regexp, int from_tty)\n   ALL_PSPACES (pspace)\n     for (objfile *objfile : pspace->objfiles ())\n       {\n-\tstruct gdbarch *gdbarch = get_objfile_arch (objfile);\n+\tstruct gdbarch *gdbarch = objfile->arch ();\n \n \t/* We don't want to print anything for this objfile until we\n \t   actually find a symtab whose name matches.  */\n@@ -2118,7 +2118,7 @@ maintenance_check_psymtabs (const char *ignore, int from_tty)\n   for (objfile *objfile : current_program_space->objfiles ())\n     for (partial_symtab *ps : require_partial_symbols (objfile, true))\n       {\n-\tstruct gdbarch *gdbarch = get_objfile_arch (objfile);\n+\tstruct gdbarch *gdbarch = objfile->arch ();\n \n \t/* We don't call psymtab_to_symtab here because that may cause symtab\n \t   expansion.  When debugging a problem it helps if checkers leave"
    },
    {
      "sha": "b9268c11d4385b6eeef25aa0e92222c796ed30eb",
      "filename": "gdb/python/py-inferior.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/python/py-inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/python/py-inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-inferior.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -193,7 +193,7 @@ python_new_objfile (struct objfile *objfile)\n     return;\n \n   gdbpy_enter enter_py (objfile != NULL\n-\t\t\t? get_objfile_arch (objfile)\n+\t\t\t? objfile->arch ()\n \t\t\t: target_gdbarch (),\n \t\t\tcurrent_language);\n "
    },
    {
      "sha": "205da8b649fa3fc2874d004c057d58b44c8063b5",
      "filename": "gdb/python/py-objfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/python/py-objfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/python/py-objfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-objfile.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -661,7 +661,7 @@ gdbpy_lookup_objfile (PyObject *self, PyObject *args, PyObject *kw)\n static void\n py_free_objfile (struct objfile *objfile, void *datum)\n {\n-  gdbpy_enter enter_py (get_objfile_arch (objfile), current_language);\n+  gdbpy_enter enter_py (objfile->arch (), current_language);\n   gdbpy_ref<objfile_object> object ((objfile_object *) datum);\n   object->objfile = NULL;\n }"
    },
    {
      "sha": "61720491c7ab7cbda20084b0f323290a22942797",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -1049,7 +1049,7 @@ save_objfile_types (struct objfile *objfile, void *datum)\n \n   /* This prevents another thread from freeing the objects we're\n      operating on.  */\n-  gdbpy_enter enter_py (get_objfile_arch (objfile), current_language);\n+  gdbpy_enter enter_py (objfile->arch (), current_language);\n \n   copied_types = create_copied_types_hash (objfile);\n "
    },
    {
      "sha": "d65cca403bec4755baf51507211a0331c19c8e7f",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -1389,7 +1389,7 @@ gdbpy_source_objfile_script (const struct extension_language_defn *extlang,\n   if (!gdb_python_initialized)\n     return;\n \n-  gdbpy_enter enter_py (get_objfile_arch (objfile), current_language);\n+  gdbpy_enter enter_py (objfile->arch (), current_language);\n   gdbpy_current_objfile = objfile;\n \n   python_run_simple_file (file, filename);\n@@ -1411,7 +1411,7 @@ gdbpy_execute_objfile_script (const struct extension_language_defn *extlang,\n   if (!gdb_python_initialized)\n     return;\n \n-  gdbpy_enter enter_py (get_objfile_arch (objfile), current_language);\n+  gdbpy_enter enter_py (objfile->arch (), current_language);\n   gdbpy_current_objfile = objfile;\n \n   PyRun_SimpleString (script);"
    },
    {
      "sha": "7d22bbb5db34524ab4dbb599650b592855ef3c21",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -1499,8 +1499,7 @@ info_line_command (const char *arg, int from_tty)\n       else if (sal.line > 0\n \t       && find_line_pc_range (sal, &start_pc, &end_pc))\n \t{\n-\t  struct gdbarch *gdbarch\n-\t    = get_objfile_arch (SYMTAB_OBJFILE (sal.symtab));\n+\t  struct gdbarch *gdbarch = SYMTAB_OBJFILE (sal.symtab)->arch ();\n \n \t  if (start_pc == end_pc)\n \t    {"
    },
    {
      "sha": "5ef7748a9ebfc59bd9345e6001386d10ef1712ee",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -369,7 +369,7 @@ dbx_alloc_type (int typenums[2], struct objfile *objfile)\n static struct type *\n dbx_init_float_type (struct objfile *objfile, int bits)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   const struct floatformat **format;\n   struct type *type;\n \n@@ -649,7 +649,7 @@ struct symbol *\n define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \t       struct objfile *objfile)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   struct symbol *sym;\n   const char *p = find_name_end (string);\n   int deftype;\n@@ -2823,7 +2823,7 @@ read_one_struct_field (struct stab_field_info *fip, const char **pp,\n \t\t       const char *p, struct type *type,\n \t\t       struct objfile *objfile)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n \n   fip->list->field.name\n     = obstack_strndup (&objfile->objfile_obstack, *pp, p - *pp);\n@@ -3581,7 +3581,7 @@ static struct type *\n read_enum_type (const char **pp, struct type *type,\n \t\tstruct objfile *objfile)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   const char *p;\n   char *name;\n   long n;\n@@ -3997,7 +3997,7 @@ static struct type *\n read_range_type (const char **pp, int typenums[2], int type_size,\n                  struct objfile *objfile)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   const char *orig_pp = *pp;\n   int rangenums[2];\n   long n2, n3;"
    },
    {
      "sha": "4b1a75f8166ea4e11772442033ac42f8294b99e5",
      "filename": "gdb/stap-probe.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/stap-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/stap-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stap-probe.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -1517,7 +1517,7 @@ handle_stap_probe (struct objfile *objfile, struct sdt_note *el,\n {\n   bfd *abfd = objfile->obfd;\n   int size = bfd_get_arch_size (abfd) / 8;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   struct type *ptr_type = builtin_type (gdbarch)->builtin_data_ptr;\n \n   /* Provider and the name of the probe.  */"
    },
    {
      "sha": "7c862d5513a276365614751d3decd030ccabe04d",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -852,14 +852,14 @@ init_entry_point_info (struct objfile *objfile)\n       /* Make certain that the address points at real code, and not a\n \t function descriptor.  */\n       entry_point\n-\t= gdbarch_convert_from_func_ptr_addr (get_objfile_arch (objfile),\n+\t= gdbarch_convert_from_func_ptr_addr (objfile->arch (),\n \t\t\t\t\t      entry_point,\n \t\t\t\t\t      current_top_target ());\n \n       /* Remove any ISA markers, so that this matches entries in the\n \t symbol table.  */\n       ei->entry_point\n-\t= gdbarch_addr_bits_remove (get_objfile_arch (objfile), entry_point);\n+\t= gdbarch_addr_bits_remove (objfile->arch (), entry_point);\n \n       found = 0;\n       ALL_OBJFILE_OSECTIONS (objfile, osect)\n@@ -2998,7 +2998,7 @@ section_is_mapped (struct obj_section *osect)\n     case ovly_auto:\t\t/* overlay debugging automatic */\n       /* Unles there is a gdbarch_overlay_update function,\n          there's really nothing useful to do here (can't really go auto).  */\n-      gdbarch = get_objfile_arch (osect->objfile);\n+      gdbarch = osect->objfile->arch ();\n       if (gdbarch_overlay_update_p (gdbarch))\n \t{\n \t  if (overlay_cache_invalid)\n@@ -3197,7 +3197,7 @@ list_overlays_command (const char *args, int from_tty)\n \tALL_OBJFILE_OSECTIONS (objfile, osect)\n \t  if (section_is_mapped (osect))\n \t    {\n-\t      struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+\t      struct gdbarch *gdbarch = objfile->arch ();\n \t      const char *name;\n \t      bfd_vma lma, vma;\n \t      int size;\n@@ -3453,7 +3453,7 @@ simple_read_overlay_table (void)\n       return 0;\n     }\n \n-  gdbarch = get_objfile_arch (ovly_table_msym.objfile);\n+  gdbarch = ovly_table_msym.objfile->arch ();\n   word_size = gdbarch_long_bit (gdbarch) / TARGET_CHAR_BIT;\n   byte_order = gdbarch_byte_order (gdbarch);\n \n@@ -3482,7 +3482,7 @@ simple_overlay_update_1 (struct obj_section *osect)\n {\n   int i;\n   asection *bsect = osect->the_bfd_section;\n-  struct gdbarch *gdbarch = get_objfile_arch (osect->objfile);\n+  struct gdbarch *gdbarch = osect->objfile->arch ();\n   int word_size = gdbarch_long_bit (gdbarch) / TARGET_CHAR_BIT;\n   enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n "
    },
    {
      "sha": "f45364a8832f4251b37df9483cf9ac8cce47d995",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -179,7 +179,7 @@ dump_objfile (struct objfile *objfile)\n static void\n dump_msymbols (struct objfile *objfile, struct ui_file *outfile)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   int index;\n   char ms_type;\n \n@@ -269,7 +269,7 @@ static void\n dump_symtab_1 (struct symtab *symtab, struct ui_file *outfile)\n {\n   struct objfile *objfile = SYMTAB_OBJFILE (symtab);\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   int i;\n   struct mdict_iterator miter;\n   int len;\n@@ -1050,7 +1050,7 @@ maintenance_print_one_line_table (struct symtab *symtab, void *data)\n \t    uiout->field_signed (\"line\", item->line);\n \t  else\n \t    uiout->field_string (\"line\", _(\"END\"));\n-\t  uiout->field_core_addr (\"address\", get_objfile_arch (objfile),\n+\t  uiout->field_core_addr (\"address\", objfile->arch (),\n \t\t\t\t  item->pc);\n \t  uiout->field_string (\"is-stmt\", item->is_stmt ? \"Y\" : \"\");\n \t  uiout->text (\"\\n\");"
    },
    {
      "sha": "dc079efbc2717f858d486bea13e6e7fd05c7f784",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -2666,7 +2666,7 @@ lookup_global_or_static_symbol (const char *name,\n       lookup_data.block_index = block_index;\n       lookup_data.domain = domain;\n       gdbarch_iterate_over_objfiles_in_search_order\n-\t(objfile != NULL ? get_objfile_arch (objfile) : target_gdbarch (),\n+\t(objfile != NULL ? objfile->arch () : target_gdbarch (),\n \t lookup_symbol_global_or_static_iterator_cb, &lookup_data, objfile);\n       result = lookup_data.result;\n     }\n@@ -3647,7 +3647,7 @@ find_function_start_sal_1 (CORE_ADDR func_addr, obj_section *section,\n       && (COMPUNIT_LOCATIONS_VALID (SYMTAB_COMPUNIT (sal.symtab))\n \t  || SYMTAB_LANGUAGE (sal.symtab) == language_asm))\n     {\n-      struct gdbarch *gdbarch = get_objfile_arch (SYMTAB_OBJFILE (sal.symtab));\n+      struct gdbarch *gdbarch = SYMTAB_OBJFILE (sal.symtab)->arch ();\n \n       sal.pc = func_addr;\n       if (gdbarch_skip_entrypoint_p (gdbarch))\n@@ -3806,7 +3806,7 @@ skip_prologue_sal (struct symtab_and_line *sal)\n       name = msymbol.minsym->linkage_name ();\n     }\n \n-  gdbarch = get_objfile_arch (objfile);\n+  gdbarch = objfile->arch ();\n \n   /* Process the prologue in two passes.  In the first pass try to skip the\n      prologue (SKIP is true) and verify there is a real need for it (indicated\n@@ -4928,7 +4928,7 @@ print_symbol_info (enum search_domain kind,\n static void\n print_msymbol_info (struct bound_minimal_symbol msymbol)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (msymbol.objfile);\n+  struct gdbarch *gdbarch = msymbol.objfile->arch ();\n   char *tmp;\n \n   if (gdbarch_addr_bit (gdbarch) <= 32)\n@@ -5550,7 +5550,7 @@ find_gnu_ifunc (const symbol *sym)\n \t  CORE_ADDR msym_addr = MSYMBOL_VALUE_ADDRESS (objfile, minsym);\n \t  if (MSYMBOL_TYPE (minsym) == mst_data_gnu_ifunc)\n \t    {\n-\t      struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+\t      struct gdbarch *gdbarch = objfile->arch ();\n \t      msym_addr\n \t\t= gdbarch_convert_from_func_ptr_addr (gdbarch,\n \t\t\t\t\t\t      msym_addr,\n@@ -6405,7 +6405,7 @@ symbol_arch (const struct symbol *symbol)\n {\n   if (!SYMBOL_OBJFILE_OWNED (symbol))\n     return symbol->owner.arch;\n-  return get_objfile_arch (SYMTAB_OBJFILE (symbol->owner.symtab));\n+  return SYMTAB_OBJFILE (symbol->owner.symtab)->arch ();\n }\n \n /* See symtab.h.  */"
    },
    {
      "sha": "fd5bd7dd9608617889f55218948f7896913e248c",
      "filename": "gdb/tui/tui-source.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/tui/tui-source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/tui/tui-source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -74,7 +74,7 @@ tui_source_window::set_contents (struct gdbarch *arch,\n   m_fullname = make_unique_xstrdup (symtab_to_fullname (s));\n \n   cur_line = 0;\n-  m_gdbarch = get_objfile_arch (SYMTAB_OBJFILE (s));\n+  m_gdbarch = SYMTAB_OBJFILE (s)->arch ();\n   m_start_line_or_addr.loa = LOA_LINE;\n   cur_line_no = m_start_line_or_addr.u.line_no = line_no;\n "
    },
    {
      "sha": "db0add996883d416c8e733a492e0bfbe706d2d2d",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -216,7 +216,7 @@ tui_update_source_windows_with_line (struct symtab_and_line sal)\n   if (sal.symtab != nullptr)\n     {\n       find_line_pc (sal.symtab, sal.line, &sal.pc);\n-      gdbarch = get_objfile_arch (SYMTAB_OBJFILE (sal.symtab));\n+      gdbarch = SYMTAB_OBJFILE (sal.symtab)->arch ();\n     }\n \n   for (struct tui_source_window_base *win_info : tui_source_windows ())"
    },
    {
      "sha": "04cf22cced138975ed58c56fd3ef58bd27ddae80",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -139,7 +139,7 @@ find_function_in_inferior (const char *name, struct objfile **objf_p)\n       if (msymbol.minsym != NULL)\n \t{\n \t  struct objfile *objfile = msymbol.objfile;\n-\t  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+\t  struct gdbarch *gdbarch = objfile->arch ();\n \n \t  struct type *type;\n \t  CORE_ADDR maddr;\n@@ -175,7 +175,7 @@ value_allocate_space_in_inferior (int len)\n {\n   struct objfile *objf;\n   struct value *val = find_function_in_inferior (\"malloc\", &objf);\n-  struct gdbarch *gdbarch = get_objfile_arch (objf);\n+  struct gdbarch *gdbarch = objf->arch ();\n   struct value *blocklen;\n \n   blocklen = value_from_longest (builtin_type (gdbarch)->builtin_int, len);"
    },
    {
      "sha": "6e2a9ba4fccc3350604825640dfa7f76adbd69e6",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -3068,7 +3068,7 @@ value_fn_field (struct value **arg1p, struct fn_field *f,\n       /* The minimal symbol might point to a function descriptor;\n \t resolve it to the actual code address instead.  */\n       struct objfile *objfile = msym.objfile;\n-      struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+      struct gdbarch *gdbarch = objfile->arch ();\n \n       set_value_address (v,\n \tgdbarch_convert_from_func_ptr_addr"
    },
    {
      "sha": "2c19dc8c8226c0075b4b963b5042efec0b20ed13",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08feed99cbcc75ecdd111f7a10c163b6f99c428f/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=08feed99cbcc75ecdd111f7a10c163b6f99c428f",
      "patch": "@@ -829,7 +829,7 @@ enter_line_range (struct subfile *subfile, unsigned beginoffset,\n \t\t  CORE_ADDR endaddr, unsigned *firstLine)\n {\n   struct objfile *objfile = this_symtab_objfile;\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   unsigned int curoffset;\n   CORE_ADDR addr;\n   void *ext_lnno;\n@@ -2121,7 +2121,7 @@ static void\n scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t   struct objfile *objfile)\n {\n-  struct gdbarch *gdbarch = get_objfile_arch (objfile);\n+  struct gdbarch *gdbarch = objfile->arch ();\n   CORE_ADDR toc_offset = 0;\t/* toc offset value in data section.  */\n   const char *filestring = NULL;\n "
    }
  ]
}