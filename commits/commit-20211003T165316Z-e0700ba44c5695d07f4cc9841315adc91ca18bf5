{
  "sha": "e0700ba44c5695d07f4cc9841315adc91ca18bf5",
  "node_id": "C_kwDOANOeidoAKGUwNzAwYmE0NGM1Njk1ZDA3ZjRjYzk4NDEzMTVhZGM5MWNhMThiZjU",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-09-10T21:10:13Z"
    },
    "committer": {
      "name": "Lancelot SIX",
      "email": "lsix@lancelotsix.com",
      "date": "2021-10-03T16:53:16Z"
    },
    "message": "gdb: make string-like set show commands use std::string variable\n\nString-like settings (var_string, var_filename, var_optional_filename,\nvar_string_noescape) currently take a pointer to a `char *` storage\nvariable (typically global) that holds the setting's value.  I'd like to\n\"mordernize\" this by changing them to use an std::string for storage.\n\nAn obvious reason is that string operations on std::string are often\neasier to write than with C strings.  And they avoid having to do any\nmanual memory management.\n\nAnother interesting reason is that, with `char *`, nullptr and an empty\nstring often both have the same meaning of \"no value\".  String settings\nare initially nullptr (unless initialized otherwise).  But when doing\n\"set foo\" (where `foo` is a string setting), the setting now points to\nan empty string.  For example, solib_search_path is nullptr at startup,\nbut points to an empty string after doing \"set solib-search-path\".  This\nleads to some code that needs to check for both to check for \"no value\".\nOr some code that converts back and forth between NULL and \"\" when\ngetting or setting the value.  I find this very error-prone, because it\nis very easy to forget one or the other.  With std::string, we at least\nknow that the variable is not \"NULL\".  There is only one way of\nrepresenting an empty string setting, that is with an empty string.\n\nI was wondering whether the distinction between NULL and \"\" would be\nimportant for some setting, but it doesn't seem so.  If that ever\nhappens, it would be more C++-y and self-descriptive to use\noptional<string> anyway.\n\nActually, there's one spot where this distinction mattered, it's in\ninit_history, for the test gdb.base/gdbinit-history.exp.  init_history\nsets the history filename to the default \".gdb_history\" if it sees that\nthe setting was never set - if history_filename is nullptr.  If\nhistory_filename is an empty string, it means the setting was explicitly\ncleared, so it leaves it as-is.  With the change to std::string, this\ndistinction doesn't exist anymore.  This can be fixed by moving the code\nthat chooses a good default value for history_filename to\n_initialize_top.  This is ran before -ex commands are processed, so an\n-ex command can then clear that value if needed (what\ngdb.base/gdbinit-history.exp tests).\n\nAnother small improvement, in my opinion is that we can now easily\ngive string parameters initial values, by simply initializing the global\nvariables, instead of xstrdup-ing it in the _initialize function.\n\nIn Python and Guile, when registering a string-like parameter, we\nallocate (with new) an std::string that is owned by the param_smob (in\nGuile) and the parmpy_object (in Python) objects.\n\nThis patch started by changing all relevant add_setshow_* commands to\ntake an `std::string *` instead of a `char **` and fixing everything\nthat failed to build.  That includes of course all string setting\nvariable and their uses.\n\nstring_option_def now uses an std::string also, because there's a\nconnection between options and settings (see\nadd_setshow_cmds_for_options).\n\nThe add_path function in source.c is really complex and twisted, I'd\nrather not try to change it to work on an std::string right now.\nInstead, I added an overload that copies the std:string to a `char *`\nand back.  This means more copying, but this is not used in a hot path\nat all, so I think it is acceptable.\n\nChange-Id: I92c50a1bdd8307141cdbacb388248e4e4fc08c93\nCo-authored-by: Lancelot SIX <lsix@lancelotsix.com>",
    "tree": {
      "sha": "b8ba80e26fb783ab67094df1722733c9d1ff101b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b8ba80e26fb783ab67094df1722733c9d1ff101b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e0700ba44c5695d07f4cc9841315adc91ca18bf5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e0700ba44c5695d07f4cc9841315adc91ca18bf5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e0700ba44c5695d07f4cc9841315adc91ca18bf5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e0700ba44c5695d07f4cc9841315adc91ca18bf5/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "lsix",
    "id": 724339,
    "node_id": "MDQ6VXNlcjcyNDMzOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/724339?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsix",
    "html_url": "https://github.com/lsix",
    "followers_url": "https://api.github.com/users/lsix/followers",
    "following_url": "https://api.github.com/users/lsix/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsix/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsix/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsix/subscriptions",
    "organizations_url": "https://api.github.com/users/lsix/orgs",
    "repos_url": "https://api.github.com/users/lsix/repos",
    "events_url": "https://api.github.com/users/lsix/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsix/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1d7fe7f01b93ecaeb3e481ed09d3deac7890a97f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d7fe7f01b93ecaeb3e481ed09d3deac7890a97f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1d7fe7f01b93ecaeb3e481ed09d3deac7890a97f"
    }
  ],
  "stats": {
    "total": 987,
    "additions": 477,
    "deletions": 510
  },
  "files": [
    {
      "sha": "36d87252b3fe80d0b2aae35884c28b16593af322",
      "filename": "gdb/auto-load.c",
      "status": "modified",
      "additions": 17,
      "deletions": 31,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/auto-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/auto-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auto-load.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -137,19 +137,16 @@ show_auto_load_local_gdbinit (struct ui_file *file, int from_tty,\n /* Directory list from which to load auto-loaded scripts.  It is not checked\n    for absolute paths but they are strongly recommended.  It is initialized by\n    _initialize_auto_load.  */\n-static char *auto_load_dir;\n+static std::string auto_load_dir = AUTO_LOAD_DIR;\n \n /* \"set\" command for the auto_load_dir configuration variable.  */\n \n static void\n set_auto_load_dir (const char *args, int from_tty, struct cmd_list_element *c)\n {\n   /* Setting the variable to \"\" resets it to the compile time defaults.  */\n-  if (auto_load_dir[0] == '\\0')\n-    {\n-      xfree (auto_load_dir);\n-      auto_load_dir = xstrdup (AUTO_LOAD_DIR);\n-    }\n+  if (auto_load_dir.empty ())\n+    auto_load_dir = AUTO_LOAD_DIR;\n }\n \n /* \"show\" command for the auto_load_dir configuration variable.  */\n@@ -166,7 +163,7 @@ show_auto_load_dir (struct ui_file *file, int from_tty,\n /* Directory list safe to hold auto-loaded files.  It is not checked for\n    absolute paths but they are strongly recommended.  It is initialized by\n    _initialize_auto_load.  */\n-static char *auto_load_safe_path;\n+static std::string auto_load_safe_path = AUTO_LOAD_SAFE_PATH;\n \n /* Vector of directory elements of AUTO_LOAD_SAFE_PATH with each one normalized\n    by tilde_expand and possibly each entries has added its gdb_realpath\n@@ -181,7 +178,7 @@ auto_load_expand_dir_vars (const char *string)\n {\n   char *s = xstrdup (string);\n   substitute_path_component (&s, \"$datadir\", gdb_datadir.c_str ());\n-  substitute_path_component (&s, \"$debugdir\", debug_file_directory);\n+  substitute_path_component (&s, \"$debugdir\", debug_file_directory.c_str ());\n \n   if (debug_auto_load && strcmp (s, string) != 0)\n     auto_load_debug_printf (\"Expanded $-variables to \\\"%s\\\".\", s);\n@@ -199,9 +196,10 @@ static void\n auto_load_safe_path_vec_update (void)\n {\n   auto_load_debug_printf (\"Updating directories of \\\"%s\\\".\",\n-\t\t\t  auto_load_safe_path);\n+\t\t\t  auto_load_safe_path.c_str ());\n \n-  auto_load_safe_path_vec = auto_load_expand_dir_vars (auto_load_safe_path);\n+  auto_load_safe_path_vec\n+    = auto_load_expand_dir_vars (auto_load_safe_path.c_str ());\n   size_t len = auto_load_safe_path_vec.size ();\n \n   /* Apply tilde_expand and gdb_realpath to each AUTO_LOAD_SAFE_PATH_VEC\n@@ -253,11 +251,8 @@ set_auto_load_safe_path (const char *args,\n \t\t\t int from_tty, struct cmd_list_element *c)\n {\n   /* Setting the variable to \"\" resets it to the compile time defaults.  */\n-  if (auto_load_safe_path[0] == '\\0')\n-    {\n-      xfree (auto_load_safe_path);\n-      auto_load_safe_path = xstrdup (AUTO_LOAD_SAFE_PATH);\n-    }\n+  if (auto_load_safe_path.empty ())\n+    auto_load_safe_path = AUTO_LOAD_SAFE_PATH;\n \n   auto_load_safe_path_vec_update ();\n }\n@@ -291,17 +286,14 @@ show_auto_load_safe_path (struct ui_file *file, int from_tty,\n static void\n add_auto_load_safe_path (const char *args, int from_tty)\n {\n-  char *s;\n-\n   if (args == NULL || *args == 0)\n     error (_(\"\\\n Directory argument required.\\n\\\n Use 'set auto-load safe-path /' for disabling the auto-load safe-path security.\\\n \"));\n \n-  s = xstrprintf (\"%s%c%s\", auto_load_safe_path, DIRNAME_SEPARATOR, args);\n-  xfree (auto_load_safe_path);\n-  auto_load_safe_path = s;\n+  auto_load_safe_path = string_printf (\"%s%c%s\", auto_load_safe_path.c_str (),\n+\t\t\t\t       DIRNAME_SEPARATOR, args);\n \n   auto_load_safe_path_vec_update ();\n }\n@@ -312,14 +304,11 @@ Use 'set auto-load safe-path /' for disabling the auto-load safe-path security.\\\n static void\n add_auto_load_dir (const char *args, int from_tty)\n {\n-  char *s;\n-\n   if (args == NULL || *args == 0)\n     error (_(\"Directory argument required.\"));\n \n-  s = xstrprintf (\"%s%c%s\", auto_load_dir, DIRNAME_SEPARATOR, args);\n-  xfree (auto_load_dir);\n-  auto_load_dir = s;\n+  auto_load_dir = string_printf (\"%s%c%s\", auto_load_dir.c_str (),\n+\t\t\t\t DIRNAME_SEPARATOR, args);\n }\n \n /* Implementation for filename_is_in_pattern overwriting the caller's FILENAME\n@@ -459,7 +448,7 @@ file_is_auto_load_safe (const char *filename)\n   warning (_(\"File \\\"%ps\\\" auto-loading has been declined by your \"\n \t     \"`auto-load safe-path' set to \\\"%s\\\".\"),\n \t   styled_string (file_name_style.style (), filename_real.get ()),\n-\t   auto_load_safe_path);\n+\t   auto_load_safe_path.c_str ());\n \n   if (!advice_printed)\n     {\n@@ -749,11 +738,11 @@ auto_load_objfile_script_1 (struct objfile *objfile, const char *realname,\n \t directory.  */\n \n       std::vector<gdb::unique_xmalloc_ptr<char>> vec\n-\t= auto_load_expand_dir_vars (auto_load_dir);\n+\t= auto_load_expand_dir_vars (auto_load_dir.c_str ());\n \n       auto_load_debug_printf\n \t(\"Searching 'set auto-load scripts-directory' path \\\"%s\\\".\",\n-\t auto_load_dir);\n+\t auto_load_dir.c_str ());\n \n       /* Convert Windows file name from c:/dir/file to /c/dir/file.  */\n       if (HAS_DRIVE_SPEC (debugfile))\n@@ -1542,8 +1531,6 @@ This option has security implications for untrusted inferiors.\"),\n Usage: info auto-load local-gdbinit\"),\n \t   auto_load_info_cmdlist_get ());\n \n-  auto_load_dir = xstrdup (AUTO_LOAD_DIR);\n-\n   suffix = ext_lang_auto_load_suffix (get_ext_lang_defn (EXT_LANG_GDB));\n   gdb_name_help\n     = xstrprintf (_(\"\\\n@@ -1595,7 +1582,6 @@ Show the list of directories from which to load auto-loaded scripts.\"),\n   xfree (gdb_name_help);\n   xfree (guile_name_help);\n \n-  auto_load_safe_path = xstrdup (AUTO_LOAD_SAFE_PATH);\n   auto_load_safe_path_vec_update ();\n   add_setshow_optional_filename_cmd (\"safe-path\", class_support,\n \t\t\t\t     &auto_load_safe_path, _(\"\\"
    },
    {
      "sha": "e742a1eccfeb6889e62a811fd9a12486d470f453",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 10,
      "deletions": 12,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -276,7 +276,7 @@ static const char *dprintf_style = dprintf_style_gdb;\n    copied into the command, so it can be anything that GDB can\n    evaluate to a callable address, not necessarily a function name.  */\n \n-static char *dprintf_function;\n+static std::string dprintf_function = \"printf\";\n \n /* The channel to use for dynamic printf if the preferred style is to\n    call into the inferior; if a nonempty string, it will be passed to\n@@ -286,7 +286,7 @@ static char *dprintf_function;\n    \"stderr\", this could be an app-specific expression like\n    \"mystreams[curlogger]\".  */\n \n-static char *dprintf_channel;\n+static std::string dprintf_channel;\n \n /* True if dprintf commands should continue to operate even if GDB\n    has disconnected.  */\n@@ -6658,7 +6658,7 @@ default_collect_info (void)\n   /* If it has no value (which is frequently the case), say nothing; a\n      message like \"No default-collect.\" gets in user's face when it's\n      not wanted.  */\n-  if (!*default_collect)\n+  if (default_collect.empty ())\n     return;\n \n   /* The following phrase lines up nicely with per-tracepoint collect\n@@ -8759,17 +8759,17 @@ update_dprintf_command_list (struct breakpoint *b)\n     printf_line = xstrprintf (\"printf %s\", dprintf_args);\n   else if (strcmp (dprintf_style, dprintf_style_call) == 0)\n     {\n-      if (!dprintf_function)\n+      if (dprintf_function.empty ())\n \terror (_(\"No function supplied for dprintf call\"));\n \n-      if (dprintf_channel && strlen (dprintf_channel) > 0)\n+      if (!dprintf_channel.empty ())\n \tprintf_line = xstrprintf (\"call (void) %s (%s,%s)\",\n-\t\t\t\t  dprintf_function,\n-\t\t\t\t  dprintf_channel,\n+\t\t\t\t  dprintf_function.c_str (),\n+\t\t\t\t  dprintf_channel.c_str (),\n \t\t\t\t  dprintf_args);\n       else\n \tprintf_line = xstrprintf (\"call (void) %s (%s)\",\n-\t\t\t\t  dprintf_function,\n+\t\t\t\t  dprintf_function.c_str (),\n \t\t\t\t  dprintf_args);\n     }\n   else if (strcmp (dprintf_style, dprintf_style_agent) == 0)\n@@ -15102,8 +15102,8 @@ save_breakpoints (const char *filename, int from_tty,\n \t}\n     }\n \n-  if (extra_trace_bits && *default_collect)\n-    fp.printf (\"set default-collect %s\\n\", default_collect);\n+  if (extra_trace_bits && !default_collect.empty ())\n+    fp.printf (\"set default-collect %s\\n\", default_collect.c_str ());\n \n   if (from_tty)\n     printf_filtered (_(\"Saved to file '%s'.\\n\"), expanded_filename.get ());\n@@ -16014,15 +16014,13 @@ output stream by setting dprintf-function and dprintf-channel.\"),\n \t\t\tupdate_dprintf_commands, NULL,\n \t\t\t&setlist, &showlist);\n \n-  dprintf_function = xstrdup (\"printf\");\n   add_setshow_string_cmd (\"dprintf-function\", class_support,\n \t\t\t  &dprintf_function, _(\"\\\n Set the function to use for dynamic printf.\"), _(\"\\\n Show the function to use for dynamic printf.\"), NULL,\n \t\t\t  update_dprintf_commands, NULL,\n \t\t\t  &setlist, &showlist);\n \n-  dprintf_channel = xstrdup (\"\");\n   add_setshow_string_cmd (\"dprintf-channel\", class_support,\n \t\t\t  &dprintf_channel, _(\"\\\n Set the channel to use for dynamic printf.\"), _(\"\\"
    },
    {
      "sha": "553d6cec3d21f9e7af3dfec1156b6624847a74ba",
      "filename": "gdb/build-id.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/build-id.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/build-id.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/build-id.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -130,7 +130,7 @@ build_id_to_bfd_suffix (size_t build_id_len, const bfd_byte *build_id,\n      cause \"/.build-id/...\" lookups.  */\n \n   std::vector<gdb::unique_xmalloc_ptr<char>> debugdir_vec\n-    = dirnames_to_char_ptr_vec (debug_file_directory);\n+    = dirnames_to_char_ptr_vec (debug_file_directory.c_str ());\n \n   for (const gdb::unique_xmalloc_ptr<char> &debugdir : debugdir_vec)\n     {\n@@ -167,7 +167,7 @@ build_id_to_bfd_suffix (size_t build_id_len, const bfd_byte *build_id,\n \t Don't do it if the sysroot is the target system (\"target:\").  It\n \t could work in theory, but the lrealpath in build_id_to_debug_bfd_1\n \t only works with local paths.  */\n-      if (strcmp (gdb_sysroot, TARGET_SYSROOT_PREFIX) != 0)\n+      if (gdb_sysroot != TARGET_SYSROOT_PREFIX)\n \t{\n \t  link = gdb_sysroot + link;\n \t  debug_bfd = build_id_to_debug_bfd_1 (link, build_id_len, build_id);"
    },
    {
      "sha": "f8f013348dba82b0fae10fbef496d07a9817365c",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 30,
      "deletions": 19,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -650,7 +650,7 @@ find_and_open_script (const char *script_file, int search_path)\n   /* Search for and open 'file' on the search path used for source\n      files.  Put the full location in *FULL_PATHP.  */\n   gdb::unique_xmalloc_ptr<char> full_path;\n-  fd = openp (source_path, search_flags,\n+  fd = openp (source_path.c_str (), search_flags,\n \t      file.get (), O_RDONLY, &full_path);\n \n   if (fd == -1)\n@@ -1042,12 +1042,7 @@ edit_command (const char *arg, int from_tty)\n struct pipe_cmd_opts\n {\n   /* For \"-d\".  */\n-  char *delimiter = nullptr;\n-\n-  ~pipe_cmd_opts ()\n-  {\n-    xfree (delimiter);\n-  }\n+  std::string delimiter;\n };\n \n static const gdb::option::option_def pipe_cmd_option_defs[] = {\n@@ -1084,8 +1079,8 @@ pipe_command (const char *arg, int from_tty)\n     (&arg, gdb::option::PROCESS_OPTIONS_UNKNOWN_IS_OPERAND, grp);\n \n   const char *delim = \"|\";\n-  if (opts.delimiter != nullptr)\n-    delim = opts.delimiter;\n+  if (!opts.delimiter.empty ())\n+    delim = opts.delimiter.c_str ();\n \n   const char *command = arg;\n   if (command == nullptr)\n@@ -1148,8 +1143,8 @@ pipe_command_completer (struct cmd_list_element *ignore,\n     return;\n \n   const char *delimiter = \"|\";\n-  if (opts.delimiter != nullptr)\n-    delimiter = opts.delimiter;\n+  if (!opts.delimiter.empty ())\n+    delimiter = opts.delimiter.c_str ();\n \n   /* Check if we're past option values already.  */\n   if (text > org_text && !isspace (text[-1]))\n@@ -2152,13 +2147,21 @@ value_from_setting (const setting &var, struct gdbarch *gdbarch)\n     case var_enum:\n       {\n \tconst char *value;\n+\tsize_t len;\n \tif (var.type () == var_enum)\n-\t  value = var.get<const char *> ();\n+\t  {\n+\t    value = var.get<const char *> ();\n+\t    len = strlen (value);\n+\t  }\n \telse\n-\t  value = var.get<char *> ();\n+\t  {\n+\t    const std::string &st = var.get<std::string> ();\n+\t    value = st.c_str ();\n+\t    len = st.length ();\n+\t  }\n \n-\tif (value != nullptr)\n-\t  return value_cstring (value, strlen (value),\n+\tif (len > 0)\n+\t  return value_cstring (value, len,\n \t\t\t\tbuiltin_type (gdbarch)->builtin_char);\n \telse\n \t  return value_cstring (\"\", 1,\n@@ -2231,13 +2234,21 @@ str_value_from_setting (const setting &var, struct gdbarch *gdbarch)\n \t similarly to the value_from_setting code for these casevar.  */\n       {\n \tconst char *value;\n+\tsize_t len;\n \tif (var.type () == var_enum)\n-\t  value = var.get<const char *> ();\n+\t  {\n+\t    value = var.get<const char *> ();\n+\t    len = strlen (value);\n+\t  }\n \telse\n-\t  value = var.get<char *> ();\n+\t  {\n+\t    const std::string &st = var.get<std::string> ();\n+\t    value = st.c_str ();\n+\t    len = st.length ();\n+\t  }\n \n-\tif (value != nullptr)\n-\t  return value_cstring (value, strlen (value),\n+\tif (len > 0)\n+\t  return value_cstring (value, len,\n \t\t\t\tbuiltin_type (gdbarch)->builtin_char);\n \telse\n \t  return value_cstring (\"\", 1,"
    },
    {
      "sha": "b3bf62761574d177b06737e1df9c79b641df33e1",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 20,
      "deletions": 18,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -655,7 +655,7 @@ add_setshow_boolean_cmd (const char *name, enum command_class theclass, bool *va\n \n set_show_commands\n add_setshow_filename_cmd (const char *name, enum command_class theclass,\n-\t\t\t  char **var,\n+\t\t\t  std::string *var,\n \t\t\t  const char *set_doc, const char *show_doc,\n \t\t\t  const char *help_doc,\n \t\t\t  cmd_func_ftype *set_func,\n@@ -664,10 +664,10 @@ add_setshow_filename_cmd (const char *name, enum command_class theclass,\n \t\t\t  struct cmd_list_element **show_list)\n {\n   set_show_commands commands\n-    = add_setshow_cmd_full<char *> (name, theclass, var_filename, var,\n-\t\t\t\t    set_doc, show_doc, help_doc,\n-\t\t\t\t    set_func, show_func,\n-\t\t\t\t    set_list, show_list);\n+    = add_setshow_cmd_full<std::string> (name, theclass, var_filename, var,\n+\t\t\t\t\t set_doc, show_doc, help_doc,\n+\t\t\t\t\t set_func, show_func,\n+\t\t\t\t\t set_list, show_list);\n \n   set_cmd_completer (commands.set, filename_completer);\n \n@@ -679,7 +679,7 @@ add_setshow_filename_cmd (const char *name, enum command_class theclass,\n \n set_show_commands\n add_setshow_string_cmd (const char *name, enum command_class theclass,\n-\t\t\tchar **var,\n+\t\t\tstd::string *var,\n \t\t\tconst char *set_doc, const char *show_doc,\n \t\t\tconst char *help_doc,\n \t\t\tcmd_func_ftype *set_func,\n@@ -688,10 +688,10 @@ add_setshow_string_cmd (const char *name, enum command_class theclass,\n \t\t\tstruct cmd_list_element **show_list)\n {\n   set_show_commands commands\n-    = add_setshow_cmd_full<char *> (name, theclass, var_string, var,\n-\t\t\t\t    set_doc, show_doc, help_doc,\n-\t\t\t\t    set_func, show_func,\n-\t\t\t\t    set_list, show_list);\n+    = add_setshow_cmd_full<std::string> (name, theclass, var_string, var,\n+\t\t\t\t\t set_doc, show_doc, help_doc,\n+\t\t\t\t\t set_func, show_func,\n+\t\t\t\t\t set_list, show_list);\n \n   /* Disable the default symbol completer.  */\n   set_cmd_completer (commands.set, nullptr);\n@@ -704,7 +704,7 @@ add_setshow_string_cmd (const char *name, enum command_class theclass,\n \n set_show_commands\n add_setshow_string_noescape_cmd (const char *name, enum command_class theclass,\n-\t\t\t\t char **var,\n+\t\t\t\t std::string *var,\n \t\t\t\t const char *set_doc, const char *show_doc,\n \t\t\t\t const char *help_doc,\n \t\t\t\t cmd_func_ftype *set_func,\n@@ -713,9 +713,10 @@ add_setshow_string_noescape_cmd (const char *name, enum command_class theclass,\n \t\t\t\t struct cmd_list_element **show_list)\n {\n   set_show_commands commands\n-    = add_setshow_cmd_full<char *> (name, theclass, var_string_noescape, var,\n-\t\t\t\t    set_doc, show_doc, help_doc, set_func,\n-\t\t\t\t    show_func, set_list, show_list);\n+    = add_setshow_cmd_full<std::string> (name, theclass, var_string_noescape,\n+\t\t\t\t\t var, set_doc, show_doc, help_doc,\n+\t\t\t\t\t set_func, show_func, set_list,\n+\t\t\t\t\t show_list);\n \n   /* Disable the default symbol completer.  */\n   set_cmd_completer (commands.set, nullptr);\n@@ -728,7 +729,7 @@ add_setshow_string_noescape_cmd (const char *name, enum command_class theclass,\n \n set_show_commands\n add_setshow_optional_filename_cmd (const char *name, enum command_class theclass,\n-\t\t\t\t   char **var,\n+\t\t\t\t   std::string *var,\n \t\t\t\t   const char *set_doc, const char *show_doc,\n \t\t\t\t   const char *help_doc,\n \t\t\t\t   cmd_func_ftype *set_func,\n@@ -737,9 +738,10 @@ add_setshow_optional_filename_cmd (const char *name, enum command_class theclass\n \t\t\t\t   struct cmd_list_element **show_list)\n {\n   set_show_commands commands\n-    = add_setshow_cmd_full<char *> (name, theclass, var_optional_filename,\n-\t\t\t\t    var, set_doc, show_doc, help_doc,\n-\t\t\t\t    set_func, show_func, set_list, show_list);\n+    = add_setshow_cmd_full<std::string> (name, theclass, var_optional_filename,\n+\t\t\t\t\t var, set_doc, show_doc, help_doc,\n+\t\t\t\t\t set_func, show_func, set_list,\n+\t\t\t\t\t show_list);\n \n   set_cmd_completer (commands.set, filename_completer);\n "
    },
    {
      "sha": "c9093520a71bd310759ff640116508fc3772450c",
      "filename": "gdb/cli/cli-logging.c",
      "status": "modified",
      "additions": 10,
      "deletions": 13,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/cli/cli-logging.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/cli/cli-logging.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-logging.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -25,7 +25,7 @@\n \n static char *saved_filename;\n \n-static char *logging_filename;\n+static std::string logging_filename = \"gdb.txt\";\n static void\n show_logging_filename (struct ui_file *file, int from_tty,\n \t\t       struct cmd_list_element *c, const char *value)\n@@ -102,28 +102,28 @@ handle_redirections (int from_tty)\n     }\n \n   stdio_file_up log (new no_terminal_escape_file ());\n-  if (!log->open (logging_filename, logging_overwrite ? \"w\" : \"a\"))\n+  if (!log->open (logging_filename.c_str (), logging_overwrite ? \"w\" : \"a\"))\n     perror_with_name (_(\"set logging\"));\n \n   /* Redirects everything to gdb_stdout while this is running.  */\n   if (from_tty)\n     {\n       if (!logging_redirect)\n \tfprintf_unfiltered (gdb_stdout, \"Copying output to %s.\\n\",\n-\t\t\t    logging_filename);\n+\t\t\t    logging_filename.c_str ());\n       else\n \tfprintf_unfiltered (gdb_stdout, \"Redirecting output to %s.\\n\",\n-\t\t\t    logging_filename);\n+\t\t\t    logging_filename.c_str ());\n \n       if (!debug_redirect)\n \tfprintf_unfiltered (gdb_stdout, \"Copying debug output to %s.\\n\",\n-\t\t\t    logging_filename);\n+\t\t\t    logging_filename.c_str ());\n       else\n \tfprintf_unfiltered (gdb_stdout, \"Redirecting debug output to %s.\\n\",\n-\t\t\t    logging_filename);\n+\t\t\t    logging_filename.c_str ());\n     }\n \n-  saved_filename = xstrdup (logging_filename);\n+  saved_filename = xstrdup (logging_filename.c_str ());\n \n   /* Let the interpreter do anything it needs.  */\n   current_interp_set_logging (std::move (log), logging_redirect,\n@@ -145,10 +145,8 @@ set_logging_on (const char *args, int from_tty)\n   const char *rest = args;\n \n   if (rest && *rest)\n-    {\n-      xfree (logging_filename);\n-      logging_filename = xstrdup (rest);\n-    }\n+    logging_filename = rest;\n+\n   handle_redirections (from_tty);\n }\n \n@@ -201,6 +199,7 @@ If debug redirect is on, debug will go only to the log file.\"),\n \t\t\t   set_logging_redirect,\n \t\t\t   show_logging_redirect,\n \t\t\t   &set_logging_cmdlist, &show_logging_cmdlist);\n+\n   add_setshow_filename_cmd (\"file\", class_support, &logging_filename, _(\"\\\n Set the current logfile.\"), _(\"\\\n Show the current logfile.\"), _(\"\\\n@@ -212,6 +211,4 @@ The logfile is used when directing GDB's output.\"),\n \t   _(\"Enable logging.\"), &set_logging_cmdlist);\n   add_cmd (\"off\", class_support, set_logging_off,\n \t   _(\"Disable logging.\"), &set_logging_cmdlist);\n-\n-  logging_filename = xstrdup (\"gdb.txt\");\n }"
    },
    {
      "sha": "846b8198985f9df6f1e02d6ea3fa9297d136c7b6",
      "filename": "gdb/cli/cli-option.c",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/cli/cli-option.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/cli/cli-option.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-option.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -45,7 +45,7 @@ union option_value\n   const char *enumeration;\n \n   /* For var_string options.  This is malloc-allocated.  */\n-  char *string;\n+  std::string *string;\n };\n \n /* Holds an options definition and its value.  */\n@@ -87,7 +87,7 @@ struct option_def_and_value\n     if (value.has_value ())\n       {\n \tif (option.type == var_string)\n-\t  xfree (value->string);\n+\t  delete value->string;\n       }\n   }\n \n@@ -439,7 +439,7 @@ parse_option (gdb::array_view<const option_def_group> options_group,\n \t  error (_(\"-%s requires an argument\"), match->name);\n \n \toption_value val;\n-\tval.string = xstrdup (str.c_str ());\n+\tval.string = new std::string (std::move (str));\n \treturn option_def_and_value {*match, match_ctx, val};\n       }\n \n@@ -603,8 +603,7 @@ save_option_value_in_ctx (gdb::optional<option_def_and_value> &ov)\n       break;\n     case var_string:\n       *ov->option.var_address.string (ov->option, ov->ctx)\n-\t= ov->value->string;\n-      ov->value->string = nullptr;\n+\t= std::move (*ov->value->string);\n       break;\n     default:\n       gdb_assert_not_reached (\"unhandled option type\");"
    },
    {
      "sha": "b7ede4587485b04be7898896e31c195a7f799dac",
      "filename": "gdb/cli/cli-option.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/cli/cli-option.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/cli/cli-option.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-option.h?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -86,7 +86,7 @@ struct option_def\n       unsigned int *(*uinteger) (const option_def &, void *ctx);\n       int *(*integer) (const option_def &, void *ctx);\n       const char **(*enumeration) (const option_def &, void *ctx);\n-      char **(*string) (const option_def &, void *ctx);\n+      std::string *(*string) (const option_def &, void *ctx);\n     }\n   var_address;\n \n@@ -268,7 +268,7 @@ template<typename Context>\n struct string_option_def : option_def\n {\n   string_option_def (const char *long_option_,\n-\t\t     char **(*get_var_address_cb_) (Context *),\n+\t\t     std::string *(*get_var_address_cb_) (Context *),\n \t\t     show_value_ftype *show_cmd_cb_,\n \t\t     const char *set_doc_,\n \t\t     const char *show_doc_ = nullptr,"
    },
    {
      "sha": "8d29c0c3fc2fdd76a7940cef6935ce5faf8fceba",
      "filename": "gdb/cli/cli-setshow.c",
      "status": "modified",
      "additions": 22,
      "deletions": 37,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/cli/cli-setshow.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/cli/cli-setshow.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-setshow.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -360,27 +360,22 @@ do_set_command (const char *arg, int from_tty, struct cmd_list_element *c)\n \t*q++ = '\\0';\n \tnewobj = (char *) xrealloc (newobj, q - newobj);\n \n-\tchar * const var = c->var->get<char *> ();\n-\tif (var == nullptr\n-\t    || strcmp (var, newobj) != 0)\n+\tconst std::string &cur_val = c->var->get<std::string> ();\n+\tif (strcmp (cur_val.c_str(),  newobj) != 0)\n \t  {\n-\t    xfree (var);\n-\t    c->var->set<char *> (newobj);\n+\t    c->var->set<std::string> (std::string (newobj));\n \n \t    option_changed = true;\n \t  }\n-\telse\n-\t  xfree (newobj);\n+\txfree (newobj);\n       }\n       break;\n     case var_string_noescape:\n       {\n-\tchar * const var = c->var->get<char *> ();\n-\tif (var == nullptr\n-\t    || strcmp (var, arg) != 0)\n+\tconst std::string &cur_val = c->var->get<std::string> ();\n+\tif (strcmp (cur_val.c_str (), arg) != 0)\n \t  {\n-\t    xfree (var);\n-\t    c->var->set<char *> (xstrdup (arg));\n+\t    c->var->set<std::string> (std::string (arg));\n \n \t    option_changed = true;\n \t  }\n@@ -410,17 +405,14 @@ do_set_command (const char *arg, int from_tty, struct cmd_list_element *c)\n \telse\n \t  val = xstrdup (\"\");\n \n-\tchar * const var = c->var->get<char *> ();\n-\tif (var == nullptr\n-\t    || strcmp (var, val) != 0)\n+\tconst std::string &cur_val = c->var->get<std::string> ();\n+\tif (strcmp (cur_val.c_str (), val) != 0)\n \t  {\n-\t    xfree (var);\n-\t    c->var->set<char *> (val);\n+\t    c->var->set<std::string> (std::string (val));\n \n \t    option_changed = true;\n \t  }\n-\telse\n-\t  xfree (val);\n+\txfree (val);\n       }\n       break;\n     case var_boolean:\n@@ -598,15 +590,12 @@ do_set_command (const char *arg, int from_tty, struct cmd_list_element *c)\n \tcase var_string_noescape:\n \tcase var_filename:\n \tcase var_optional_filename:\n+\t  gdb::observers::command_param_changed.notify\n+\t    (name, c->var->get<std::string> ().c_str ());\n+\t  break;\n \tcase var_enum:\n-\t  {\n-\t    const char *var;\n-\t    if (c->var->type () == var_enum)\n-\t      var = c->var->get<const char *> ();\n-\t    else\n-\t      var = c->var->get<char *> ();\n-\t    gdb::observers::command_param_changed.notify (name, var);\n-\t  }\n+\t  gdb::observers::command_param_changed.notify\n+\t    (name, c->var->get<const char *> ());\n \t  break;\n \tcase var_boolean:\n \t  {\n@@ -658,23 +647,19 @@ get_setshow_command_value_string (const setting &var)\n     {\n     case var_string:\n       {\n-\tchar *value = var.get<char *> ();\n-\n-\tif (value != nullptr)\n-\t  stb.putstr (value, '\"');\n+\tstd::string value = var.get<std::string> ();\n+\tif (!value.empty ())\n+\t  stb.putstr (value.c_str (), '\"');\n       }\n       break;\n     case var_string_noescape:\n     case var_optional_filename:\n     case var_filename:\n+      stb.puts (var.get<std::string> ().c_str ());\n+      break;\n     case var_enum:\n       {\n-\tconst char *value;\n-\tif (var.type () == var_enum)\n-\t  value = var.get<const char *> ();\n-\telse\n-\t  value = var.get<char *> ();\n-\n+\tconst char *value = var.get<const char *> ();\n \tif (value != nullptr)\n \t  stb.puts (value);\n       }"
    },
    {
      "sha": "e6e6ec8a5d86991bfa85d561ac2a56c32759b7f9",
      "filename": "gdb/command.h",
      "status": "modified",
      "additions": 11,
      "deletions": 12,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/command.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/command.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/command.h?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -97,16 +97,15 @@ typedef enum var_types\n \n     /* String which the user enters with escapes (e.g. the user types\n        \\n and it is a real newline in the stored string).\n-       *VAR is a malloc'd string, or NULL if the string is empty.  */\n+       *VAR is a std::string, \"\" if the string is empty.  */\n     var_string,\n     /* String which stores what the user types verbatim.\n-       *VAR is a malloc'd string, or NULL if the string is empty.  */\n+       *VAR is std::string, \"\" if the string is empty.  */\n     var_string_noescape,\n-    /* String which stores a filename.  (*VAR) is a malloc'd string,\n-       or \"\" if the string was empty.  */\n+    /* String which stores a filename.  (*VAR) is a std::string,\n+       \"\" if the string was empty.  */\n     var_optional_filename,\n-    /* String which stores a filename.  (*VAR) is a malloc'd\n-       string.  */\n+    /* String which stores a filename.  (*VAR) is a std::string.  */\n     var_filename,\n     /* ZeroableInteger.  *VAR is an int.  Like var_integer except\n        that zero really means zero.  */\n@@ -166,9 +165,9 @@ inline bool var_type_uses<int> (var_types t)\n \t  || t == var_zuinteger_unlimited);\n }\n \n-/* Return true if a setting of type T is backed by a char * variable.  */\n+/* Return true if a setting of type T is backed by a std::string variable.  */\n template<>\n-inline bool var_type_uses<char *> (var_types t)\n+inline bool var_type_uses<std::string> (var_types t)\n {\n   return (t == var_string || t == var_string_noescape\n \t  || t == var_optional_filename || t == var_filename);\n@@ -562,25 +561,25 @@ extern set_show_commands add_setshow_boolean_cmd\n    cmd_list_element **show_list);\n \n extern set_show_commands add_setshow_filename_cmd\n-  (const char *name, command_class theclass, char **var, const char *set_doc,\n+  (const char *name, command_class theclass, std::string *var, const char *set_doc,\n    const char *show_doc, const char *help_doc, cmd_func_ftype *set_func,\n    show_value_ftype *show_func, cmd_list_element **set_list,\n    cmd_list_element **show_list);\n \n extern set_show_commands add_setshow_string_cmd\n-  (const char *name, command_class theclass, char **var, const char *set_doc,\n+  (const char *name, command_class theclass, std::string *var, const char *set_doc,\n    const char *show_doc, const char *help_doc, cmd_func_ftype *set_func,\n    show_value_ftype *show_func, cmd_list_element **set_list,\n    cmd_list_element **show_list);\n \n extern set_show_commands add_setshow_string_noescape_cmd\n-  (const char *name, command_class theclass, char **var, const char *set_doc,\n+  (const char *name, command_class theclass, std::string *var, const char *set_doc,\n    const char *show_doc, const char *help_doc, cmd_func_ftype *set_func,\n    show_value_ftype *show_func, cmd_list_element **set_list,\n    cmd_list_element **show_list);\n \n extern set_show_commands add_setshow_optional_filename_cmd\n-  (const char *name, command_class theclass, char **var, const char *set_doc,\n+  (const char *name, command_class theclass, std::string *var, const char *set_doc,\n    const char *show_doc, const char *help_doc, cmd_func_ftype *set_func,\n    show_value_ftype *show_func, cmd_list_element **set_list,\n    cmd_list_element **show_list);"
    },
    {
      "sha": "25cfd283b333e81531cf984f07931c4e7feb624c",
      "filename": "gdb/compile/compile.c",
      "status": "modified",
      "additions": 23,
      "deletions": 23,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/compile/compile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/compile/compile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -495,7 +495,22 @@ get_expr_block_and_pc (CORE_ADDR *pc)\n }\n \n /* String for 'set compile-args' and 'show compile-args'.  */\n-static char *compile_args;\n+static std::string compile_args =\n+  /* Override flags possibly coming from DW_AT_producer.  */\n+  \"-O0 -gdwarf-4\"\n+  /* We use -fPIE Otherwise GDB would need to reserve space large enough for\n+     any object file in the inferior in advance to get the final address when\n+     to link the object file to and additionally the default system linker\n+     script would need to be modified so that one can specify there the\n+     absolute target address.\n+     -fPIC is not used at is would require from GDB to generate .got.  */\n+  \" -fPIE\"\n+  /* We want warnings, except for some commonly happening for GDB commands.  */\n+  \" -Wall \"\n+  \" -Wno-unused-but-set-variable\"\n+  \" -Wno-unused-variable\"\n+  /* Override CU's possible -fstack-protector-strong.  */\n+  \" -fno-stack-protector\";\n \n /* Parsed form of COMPILE_ARGS.  */\n static gdb_argv compile_args_argv;\n@@ -505,7 +520,7 @@ static gdb_argv compile_args_argv;\n static void\n set_compile_args (const char *args, int from_tty, struct cmd_list_element *c)\n {\n-  compile_args_argv = gdb_argv (compile_args);\n+  compile_args_argv = gdb_argv (compile_args.c_str ());\n }\n \n /* Implement 'show compile-args'.  */\n@@ -520,7 +535,7 @@ show_compile_args (struct ui_file *file, int from_tty,\n }\n \n /* String for 'set compile-gcc' and 'show compile-gcc'.  */\n-static char *compile_gcc;\n+static std::string compile_gcc;\n \n /* Implement 'show compile-gcc'.  */\n \n@@ -696,13 +711,13 @@ compile_to_object (struct command_line *cmd, const char *cmd_string,\n \n   compiler->set_verbose (compile_debug);\n \n-  if (compile_gcc[0] != 0)\n+  if (!compile_gcc.empty ())\n     {\n       if (compiler->version () < GCC_FE_VERSION_1)\n \terror (_(\"Command 'set compile-gcc' requires GCC version 6 or higher \"\n \t\t \"(libcc1 interface version 1 or higher)\"));\n \n-      compiler->set_driver_filename (compile_gcc);\n+      compiler->set_driver_filename (compile_gcc.c_str ());\n     }\n   else\n     {\n@@ -1029,23 +1044,9 @@ String quoting is parsed like in shell, for example:\\n\\\n   -mno-align-double \\\"-I/dir with a space/include\\\"\"),\n \t\t\t  set_compile_args, show_compile_args, &setlist, &showlist);\n \n-  /* Override flags possibly coming from DW_AT_producer.  */\n-  compile_args = xstrdup (\"-O0 -gdwarf-4\"\n-  /* We use -fPIE Otherwise GDB would need to reserve space large enough for\n-     any object file in the inferior in advance to get the final address when\n-     to link the object file to and additionally the default system linker\n-     script would need to be modified so that one can specify there the\n-     absolute target address.\n-     -fPIC is not used at is would require from GDB to generate .got.  */\n-\t\t\t \" -fPIE\"\n-  /* We want warnings, except for some commonly happening for GDB commands.  */\n-\t\t\t \" -Wall \"\n-\t\t\t \" -Wno-unused-but-set-variable\"\n-\t\t\t \" -Wno-unused-variable\"\n-  /* Override CU's possible -fstack-protector-strong.  */\n-\t\t\t \" -fno-stack-protector\"\n-  );\n-  set_compile_args (compile_args, 0, NULL);\n+\n+  /* Initialize compile_args_argv.  */\n+  set_compile_args (compile_args.c_str (), 0, NULL);\n \n   add_setshow_optional_filename_cmd (\"compile-gcc\", class_support,\n \t\t\t\t     &compile_gcc,\n@@ -1058,5 +1059,4 @@ It should be absolute filename of the gcc executable.\\n\\\n If empty the default target triplet will be searched in $PATH.\"),\n \t\t\t\t     NULL, show_compile_gcc, &setlist,\n \t\t\t\t     &showlist);\n-  compile_gcc = xstrdup (\"\");\n }"
    },
    {
      "sha": "4b1451487e282d0751611fd834585664f546ce9b",
      "filename": "gdb/corefile.c",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/corefile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/corefile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/corefile.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -395,7 +395,7 @@ write_memory_signed_integer (CORE_ADDR addr, int len,\n const char *gnutarget;\n \n /* Same thing, except it is \"auto\" not NULL for the default case.  */\n-static char *gnutarget_string;\n+static std::string gnutarget_string;\n static void\n show_gnutarget_string (struct ui_file *file, int from_tty,\n \t\t       struct cmd_list_element *c,\n@@ -409,15 +409,15 @@ static void\n set_gnutarget_command (const char *ignore, int from_tty,\n \t\t       struct cmd_list_element *c)\n {\n-  char *gend = gnutarget_string + strlen (gnutarget_string);\n+  const char *gend = gnutarget_string.c_str () + gnutarget_string.size ();\n+  gend = remove_trailing_whitespace (gnutarget_string.c_str (), gend);\n+  gnutarget_string\n+    = gnutarget_string.substr (0, gend - gnutarget_string.data ());\n \n-  gend = remove_trailing_whitespace (gnutarget_string, gend);\n-  *gend = '\\0';\n-\n-  if (strcmp (gnutarget_string, \"auto\") == 0)\n+  if (gnutarget_string == \"auto\")\n     gnutarget = NULL;\n   else\n-    gnutarget = gnutarget_string;\n+    gnutarget = gnutarget_string.c_str ();\n }\n \n /* A completion function for \"set gnutarget\".  */\n@@ -449,8 +449,7 @@ complete_set_gnutarget (struct cmd_list_element *cmd,\n void\n set_gnutarget (const char *newtarget)\n {\n-  xfree (gnutarget_string);\n-  gnutarget_string = xstrdup (newtarget);\n+  gnutarget_string = newtarget;\n   set_gnutarget_command (NULL, 0, NULL);\n }\n "
    },
    {
      "sha": "f7e09eca9db18a154d9c67e1dd299037230130dc",
      "filename": "gdb/defs.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/defs.h?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -121,7 +121,7 @@ using RequireLongest = gdb::Requires<gdb::Or<std::is_same<T, LONGEST>,\n extern int dbx_commands;\n \n /* * System root path, used to find libraries etc.  */\n-extern char *gdb_sysroot;\n+extern std::string gdb_sysroot;\n \n /* * GDB datadir, used to store data files.  */\n extern std::string gdb_datadir;\n@@ -131,7 +131,7 @@ extern std::string gdb_datadir;\n extern std::string python_libdir;\n \n /* * Search path for separate debug files.  */\n-extern char *debug_file_directory;\n+extern std::string debug_file_directory;\n \n /* GDB's SIGINT handler basically sets a flag; code that might take a\n    long time before it gets back to the event loop, and which ought to"
    },
    {
      "sha": "c788f5b618c303f5616e6333e57fdb6432706938",
      "filename": "gdb/disasm.c",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/disasm.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -39,7 +39,7 @@\n \n /* This variable is used to hold the prospective disassembler_options value\n    which is set by the \"set disassembler_options\" command.  */\n-static char *prospective_options = NULL;\n+static std::string prospective_options;\n \n /* This structure is used to store line number information for the\n    deprecated /m option.\n@@ -928,13 +928,16 @@ get_disassembler_options (struct gdbarch *gdbarch)\n }\n \n void\n-set_disassembler_options (char *prospective_options)\n+set_disassembler_options (const char *prospective_options)\n {\n   struct gdbarch *gdbarch = get_current_arch ();\n   char **disassembler_options = gdbarch_disassembler_options (gdbarch);\n   const disasm_options_and_args_t *valid_options_and_args;\n   const disasm_options_t *valid_options;\n-  char *options = remove_whitespace_and_extra_commas (prospective_options);\n+  gdb::unique_xmalloc_ptr<char> prospective_options_local\n+    = make_unique_xstrdup (prospective_options);\n+  char *options = remove_whitespace_and_extra_commas\n+    (prospective_options_local.get ());\n   const char *opt;\n \n   /* Allow all architectures, even ones that do not support 'set disassembler',\n@@ -1003,7 +1006,7 @@ static void\n set_disassembler_options_sfunc (const char *args, int from_tty,\n \t\t\t\tstruct cmd_list_element *c)\n {\n-  set_disassembler_options (prospective_options);\n+  set_disassembler_options (prospective_options.c_str ());\n }\n \n static void"
    },
    {
      "sha": "6cbfdcd4f6b63f112fdf936e2d9d5fb31718f426",
      "filename": "gdb/disasm.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/disasm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/disasm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/disasm.h?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -164,6 +164,6 @@ extern char *get_disassembler_options (struct gdbarch *gdbarch);\n \n /* Sets the active gdbarch's disassembler options to OPTIONS.  */\n \n-extern void set_disassembler_options (char *options);\n+extern void set_disassembler_options (const char *options);\n \n #endif"
    },
    {
      "sha": "5e963d5b47a670320c32b5672cef09687be8c7c2",
      "filename": "gdb/dwarf2/dwz.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/dwarf2/dwz.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/dwarf2/dwz.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/dwz.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -118,7 +118,7 @@ dwz_search_other_debugdirs (std::string &filename, bfd_byte *buildid,\n \n   gdb_bfd_ref_ptr dwz_bfd;\n   std::vector<gdb::unique_xmalloc_ptr<char>> debugdir_vec\n-    = dirnames_to_char_ptr_vec (debug_file_directory);\n+    = dirnames_to_char_ptr_vec (debug_file_directory.c_str ());\n \n   for (const gdb::unique_xmalloc_ptr<char> &debugdir : debugdir_vec)\n     {"
    },
    {
      "sha": "f439b37db5aede62750c81fc98d55bcdbb5af495",
      "filename": "gdb/dwarf2/index-cache.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/dwarf2/index-cache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/dwarf2/index-cache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-cache.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -37,7 +37,7 @@\n static bool debug_index_cache = false;\n \n /* The index cache directory, used for \"set/show index-cache directory\".  */\n-static char *index_cache_directory = NULL;\n+static std::string index_cache_directory;\n \n /* See dwarf-index.cache.h.  */\n index_cache global_index_cache;\n@@ -290,9 +290,9 @@ set_index_cache_directory_command (const char *arg, int from_tty,\n \t\t\t\t   cmd_list_element *element)\n {\n   /* Make sure the index cache directory is absolute and tilde-expanded.  */\n-  gdb::unique_xmalloc_ptr<char> abs (gdb_abspath (index_cache_directory));\n-  xfree (index_cache_directory);\n-  index_cache_directory = abs.release ();\n+  gdb::unique_xmalloc_ptr<char> abs\n+    = gdb_abspath (index_cache_directory.c_str ());\n+  index_cache_directory = abs.get ();\n   global_index_cache.set_directory (index_cache_directory);\n }\n \n@@ -325,7 +325,7 @@ _initialize_index_cache ()\n   std::string cache_dir = get_standard_cache_dir ();\n   if (!cache_dir.empty ())\n     {\n-      index_cache_directory = xstrdup (cache_dir.c_str ());\n+      index_cache_directory = cache_dir;\n       global_index_cache.set_directory (std::move (cache_dir));\n     }\n   else"
    },
    {
      "sha": "214810da183c209ec6a035e74610204d3be85c03",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -12134,18 +12134,18 @@ try_open_dwop_file (dwarf2_per_objfile *per_objfile,\n   gdb::unique_xmalloc_ptr<char> search_path_holder;\n   if (search_cwd)\n     {\n-      if (*debug_file_directory != '\\0')\n+      if (!debug_file_directory.empty ())\n \t{\n \t  search_path_holder.reset (concat (\".\", dirname_separator_string,\n-\t\t\t\t\t    debug_file_directory,\n+\t\t\t\t\t    debug_file_directory.c_str (),\n \t\t\t\t\t    (char *) NULL));\n \t  search_path = search_path_holder.get ();\n \t}\n       else\n \tsearch_path = \".\";\n     }\n   else\n-    search_path = debug_file_directory;\n+    search_path = debug_file_directory.c_str ();\n \n   /* Add the path for the executable binary to the list of search paths.  */\n   std::string objfile_dir = ldirname (objfile_name (per_objfile->objfile));\n@@ -12216,7 +12216,7 @@ open_dwo_file (dwarf2_per_objfile *per_objfile,\n   /* That didn't work, try debug-file-directory, which, despite its name,\n      is a list of paths.  */\n \n-  if (*debug_file_directory == '\\0')\n+  if (debug_file_directory.empty ())\n     return NULL;\n \n   return try_open_dwop_file (per_objfile, file_name,\n@@ -12545,7 +12545,7 @@ open_dwp_file (dwarf2_per_objfile *per_objfile, const char *file_name)\n      [IWBN if the dwp file name was recorded in the executable, akin to\n      .gnu_debuglink, but that doesn't exist yet.]\n      Strip the directory from FILE_NAME and search again.  */\n-  if (*debug_file_directory != '\\0')\n+  if (!debug_file_directory.empty ())\n     {\n       /* Don't implicitly search the current directory here.\n \t If the user wants to search \".\" to handle this case,"
    },
    {
      "sha": "530ea29824780050b75b6d492adaf9a5a3b4b9c7",
      "filename": "gdb/event-top.c",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/event-top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/event-top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/event-top.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -439,13 +439,11 @@ display_gdb_prompt (const char *new_prompt)\n static std::string\n top_level_prompt (void)\n {\n-  char *prompt;\n-\n   /* Give observers a chance of changing the prompt.  E.g., the python\n      `gdb.prompt_hook' is installed as an observer.  */\n-  gdb::observers::before_prompt.notify (get_prompt ());\n+  gdb::observers::before_prompt.notify (get_prompt ().c_str ());\n \n-  prompt = get_prompt ();\n+  const std::string &prompt = get_prompt ();\n \n   if (annotation_level >= 2)\n     {\n@@ -456,7 +454,7 @@ top_level_prompt (void)\n \t beginning.  */\n       const char suffix[] = \"\\n\\032\\032prompt\\n\";\n \n-      return std::string (prefix) + prompt + suffix;\n+      return std::string (prefix) + prompt.c_str () + suffix;\n     }\n \n   return prompt;\n@@ -1253,13 +1251,13 @@ handle_sigtstp (int sig)\n static void\n async_sigtstp_handler (gdb_client_data arg)\n {\n-  char *prompt = get_prompt ();\n+  const std::string &prompt = get_prompt ();\n \n   signal (SIGTSTP, SIG_DFL);\n   unblock_signal (SIGTSTP);\n   raise (SIGTSTP);\n   signal (SIGTSTP, handle_sigtstp);\n-  printf_unfiltered (\"%s\", prompt);\n+  printf_unfiltered (\"%s\", prompt.c_str ());\n   gdb_flush (gdb_stdout);\n \n   /* Forget about any previous command -- null line now will do"
    },
    {
      "sha": "3e995ed6f654d503b317f5e6d44fe7249f8de229",
      "filename": "gdb/fork-child.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/fork-child.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/fork-child.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fork-child.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -33,14 +33,14 @@\n /* The exec-wrapper, if any, that will be used when starting the\n    inferior.  */\n \n-static char *exec_wrapper = NULL;\n+static std::string exec_wrapper;\n \n /* See gdbsupport/common-inferior.h.  */\n \n const char *\n get_exec_wrapper ()\n {\n-  return exec_wrapper;\n+  return !exec_wrapper.empty () ? exec_wrapper.c_str () : nullptr;\n }\n \n /* See nat/fork-inferior.h.  */\n@@ -139,8 +139,7 @@ gdb_startup_inferior (pid_t pid, int num_traps)\n static void\n unset_exec_wrapper_command (const char *args, int from_tty)\n {\n-  xfree (exec_wrapper);\n-  exec_wrapper = NULL;\n+  exec_wrapper.clear ();\n }\n \n static void"
    },
    {
      "sha": "17746daaf336fbaaaa36bb6087f63a8d6115c2d0",
      "filename": "gdb/guile/scm-param.c",
      "status": "modified",
      "additions": 35,
      "deletions": 27,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/guile/scm-param.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/guile/scm-param.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-param.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -44,7 +44,7 @@ union pascm_variable\n   unsigned int uintval;\n \n   /* Hold a string, for the various string types.  */\n-  char *stringval;\n+  std::string *stringval;\n \n   /* Hold a string, for enums.  */\n   const char *cstringval;\n@@ -57,10 +57,7 @@ union pascm_variable\n    2) Call register-parameter! to add the parameter to gdb.\n    It is done this way so that the constructor, make-parameter, doesn't have\n    any side-effects.  This means that the smob needs to store everything\n-   that was passed to make-parameter.\n-\n-   N.B. There is no free function for this smob.\n-   All objects pointed to by this smob must live in GC space.  */\n+   that was passed to make-parameter.  */\n \n struct param_smob\n {\n@@ -120,7 +117,6 @@ struct param_smob\n static setting\n make_setting (param_smob *s)\n {\n-\n   if (var_type_uses<bool> (s->type))\n     return setting (s->type, &s->value.boolval);\n   else if (var_type_uses<int> (s->type))\n@@ -129,8 +125,8 @@ make_setting (param_smob *s)\n     return setting (s->type, &s->value.autoboolval);\n   else if (var_type_uses<unsigned int> (s->type))\n     return setting (s->type, &s->value.uintval);\n-  else if (var_type_uses<char *> (s->type))\n-    return setting (s->type, &s->value.stringval);\n+  else if (var_type_uses<std::string> (s->type))\n+    return setting (s->type, s->value.stringval);\n   else if (var_type_uses<const char *> (s->type))\n     return setting (s->type, &s->value.cstringval);\n   else\n@@ -432,14 +428,14 @@ add_setshow_generic (enum var_types param_type, enum command_class cmd_class,\n \n     case var_string:\n       commands = add_setshow_string_cmd (cmd_name, cmd_class,\n-\t\t\t\t\t &self->value.stringval, set_doc,\n+\t\t\t\t\t self->value.stringval, set_doc,\n \t\t\t\t\t show_doc, help_doc, set_func,\n \t\t\t\t\t show_func, set_list, show_list);\n       break;\n \n     case var_string_noescape:\n       commands = add_setshow_string_noescape_cmd (cmd_name, cmd_class,\n-\t\t\t\t\t\t  &self->value.stringval,\n+\t\t\t\t\t\t  self->value.stringval,\n \t\t\t\t\t\t  set_doc, show_doc, help_doc,\n \t\t\t\t\t\t  set_func, show_func, set_list,\n \t\t\t\t\t\t  show_list);\n@@ -448,15 +444,15 @@ add_setshow_generic (enum var_types param_type, enum command_class cmd_class,\n \n     case var_optional_filename:\n       commands = add_setshow_optional_filename_cmd (cmd_name, cmd_class,\n-\t\t\t\t\t\t    &self->value.stringval,\n+\t\t\t\t\t\t    self->value.stringval,\n \t\t\t\t\t\t    set_doc, show_doc, help_doc,\n \t\t\t\t\t\t    set_func, show_func,\n \t\t\t\t\t\t    set_list, show_list);\n       break;\n \n     case var_filename:\n       commands = add_setshow_filename_cmd (cmd_name, cmd_class,\n-\t\t\t\t\t   &self->value.stringval, set_doc,\n+\t\t\t\t\t   self->value.stringval, set_doc,\n \t\t\t\t\t   show_doc, help_doc, set_func,\n \t\t\t\t\t   show_func, set_list, show_list);\n       break;\n@@ -602,14 +598,14 @@ pascm_param_value (const setting &var, int arg_pos, const char *func_name)\n     case var_string_noescape:\n     case var_optional_filename:\n     case var_filename:\n-    case var_enum:\n       {\n-\tconst char *str;\n-\tif (var.type () == var_enum)\n-\t  str = var.get<const char *> ();\n-\telse\n-\t  str = var.get<char *> ();\n+\tconst std::string &str = var.get<std::string> ();\n+\treturn gdbscm_scm_from_host_string (str.c_str (), str.length ());\n+      }\n \n+    case var_enum:\n+      {\n+\tconst char *str = var.get<const char *> ();\n \tif (str == nullptr)\n \t  str = \"\";\n \treturn gdbscm_scm_from_host_string (str, strlen (str));\n@@ -682,13 +678,7 @@ pascm_set_param_value_x (param_smob *p_smob,\n \t\t       value, arg_pos, func_name,\n \t\t       _(\"string or #f for non-PARAM_FILENAME parameters\"));\n       if (gdbscm_is_false (value))\n-\t{\n-\t  xfree (var.get<char *> ());\n-\t  if (var.type () == var_optional_filename)\n-\t    var.set<char *> (xstrdup (\"\"));\n-\t  else\n-\t    var.set<char *> (nullptr);\n-\t}\n+\tvar.set<std::string> (\"\");\n       else\n \t{\n \t  SCM exception;\n@@ -697,8 +687,7 @@ pascm_set_param_value_x (param_smob *p_smob,\n \t    = gdbscm_scm_to_host_string (value, nullptr, &exception);\n \t  if (string == nullptr)\n \t    gdbscm_throw (exception);\n-\t  xfree (var.get<char *> ());\n-\t  var.set<char *> (string.release ());\n+\t  var.set<std::string> (string.release ());\n \t}\n       break;\n \n@@ -798,6 +787,21 @@ pascm_set_param_value_x (param_smob *p_smob,\n       gdb_assert_not_reached (\"bad parameter type\");\n     }\n }\n+\n+/* Free function for a param_smob.  */\n+static size_t\n+pascm_free_parameter_smob (SCM self)\n+{\n+  param_smob *p_smob = (param_smob *) SCM_SMOB_DATA (self);\n+\n+  if (var_type_uses<std::string> (p_smob->type))\n+    {\n+      delete p_smob->value.stringval;\n+      p_smob->value.stringval = nullptr;\n+    }\n+\n+  return 0;\n+}\n \f\n /* Parameter Scheme functions.  */\n \n@@ -954,6 +958,10 @@ gdbscm_make_parameter (SCM name_scm, SCM rest)\n   p_smob->set_func = set_func;\n   p_smob->show_func = show_func;\n \n+  scm_set_smob_free (parameter_smob_tag, pascm_free_parameter_smob);\n+  if (var_type_uses<std::string> (p_smob->type))\n+    p_smob->value.stringval = new std::string;\n+\n   if (initial_value_arg_pos > 0)\n     {\n       if (gdbscm_is_procedure (initial_value_scm))"
    },
    {
      "sha": "b55a56c020d959e26bf9d068c7562346542b8917",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -71,16 +71,16 @@ static void step_1 (int, int, const char *);\n    Arguments are separated by spaces.  Empty string (pointer to '\\0')\n    means no args.  */\n \n-static char *inferior_args_scratch;\n+static std::string inferior_args_scratch;\n \n /* Scratch area where the new cwd will be stored by 'set cwd'.  */\n \n-static char *inferior_cwd_scratch;\n+static std::string inferior_cwd_scratch;\n \n /* Scratch area where 'set inferior-tty' will store user-provided value.\n    We'll immediate copy it into per-inferior storage.  */\n \n-static char *inferior_io_terminal_scratch;\n+static std::string inferior_io_terminal_scratch;\n \n /* Pid of our debugged inferior, or 0 if no inferior now.\n    Since various parts of infrun.c test this to see whether there is a program\n@@ -2021,18 +2021,16 @@ path_info (const char *args, int from_tty)\n static void\n path_command (const char *dirname, int from_tty)\n {\n-  char *exec_path;\n   const char *env;\n \n   dont_repeat ();\n   env = current_inferior ()->environment.get (path_var_name);\n   /* Can be null if path is not set.  */\n   if (!env)\n     env = \"\";\n-  exec_path = xstrdup (env);\n-  mod_path (dirname, &exec_path);\n-  current_inferior ()->environment.set (path_var_name, exec_path);\n-  xfree (exec_path);\n+  std::string exec_path = env;\n+  mod_path (dirname, exec_path);\n+  current_inferior ()->environment.set (path_var_name, exec_path.c_str ());\n   if (from_tty)\n     path_info (NULL, from_tty);\n }"
    },
    {
      "sha": "54e68ccd0d75be39505b0e90aace71a8065c17a6",
      "filename": "gdb/linux-thread-db.c",
      "status": "modified",
      "additions": 6,
      "deletions": 11,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/linux-thread-db.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/linux-thread-db.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-thread-db.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -110,7 +110,7 @@ class thread_db_target final : public target_ops\n   gdb::byte_vector thread_info_to_thread_handle (struct thread_info *) override;\n };\n \n-static char *libthread_db_search_path;\n+static std::string libthread_db_search_path = LIBTHREAD_DB_SEARCH_PATH;\n \n /* Set to true if thread_db auto-loading is enabled\n    by the \"set auto-load libthread-db\" command.  */\n@@ -135,11 +135,8 @@ static void\n set_libthread_db_search_path (const char *ignored, int from_tty,\n \t\t\t      struct cmd_list_element *c)\n {\n-  if (*libthread_db_search_path == '\\0')\n-    {\n-      xfree (libthread_db_search_path);\n-      libthread_db_search_path = xstrdup (LIBTHREAD_DB_SEARCH_PATH);\n-    }\n+  if (libthread_db_search_path.empty ())\n+    libthread_db_search_path = LIBTHREAD_DB_SEARCH_PATH;\n }\n \n /* If non-zero, print details of libthread_db processing.  */\n@@ -941,7 +938,7 @@ try_thread_db_load_1 (struct thread_db_info *info)\n \n   printf_unfiltered (_(\"[Thread debugging using libthread_db enabled]\\n\"));\n \n-  if (*libthread_db_search_path || libthread_db_debug)\n+  if (!libthread_db_search_path.empty () || libthread_db_debug)\n     {\n       struct ui_file *file;\n       const char *library;\n@@ -954,7 +951,7 @@ try_thread_db_load_1 (struct thread_db_info *info)\n \t disabled, still print it to gdb_stdout if debug output is\n \t enabled.  User visible output should not depend on debug\n \t settings.  */\n-      file = *libthread_db_search_path != '\\0' ? gdb_stdout : gdb_stdlog;\n+      file = !libthread_db_search_path.empty () ? gdb_stdout : gdb_stdlog;\n       fprintf_unfiltered (file,\n \t\t\t  _(\"Using host libthread_db library \\\"%ps\\\".\\n\"),\n \t\t\t  styled_string (file_name_style.style (), library));\n@@ -1142,7 +1139,7 @@ thread_db_load_search (void)\n   bool rc = false;\n \n   std::vector<gdb::unique_xmalloc_ptr<char>> dir_vec\n-    = dirnames_to_char_ptr_vec (libthread_db_search_path);\n+    = dirnames_to_char_ptr_vec (libthread_db_search_path.c_str ());\n \n   for (const gdb::unique_xmalloc_ptr<char> &this_dir_up : dir_vec)\n     {\n@@ -2005,8 +2002,6 @@ _initialize_thread_db ()\n      and until there is a running inferior, we can't tell which\n      libthread_db is the correct one to load.  */\n \n-  libthread_db_search_path = xstrdup (LIBTHREAD_DB_SEARCH_PATH);\n-\n   add_setshow_optional_filename_cmd (\"libthread-db-search-path\",\n \t\t\t\t     class_support,\n \t\t\t\t     &libthread_db_search_path, _(\"\\"
    },
    {
      "sha": "ca4ccc375dc7c3a9145b57e6584e2348f0715776",
      "filename": "gdb/main.c",
      "status": "modified",
      "additions": 6,
      "deletions": 11,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/main.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -65,7 +65,7 @@ char *interpreter_p;\n int dbx_commands = 0;\n \n /* System root path, used to find libraries etc.  */\n-char *gdb_sysroot = 0;\n+std::string gdb_sysroot;\n \n /* GDB datadir, used to store data files.  */\n std::string gdb_datadir;\n@@ -710,19 +710,14 @@ captured_main_1 (struct captured_main_args *context)\n     perror_warning_with_name (_(\"error finding working directory\"));\n \n   /* Set the sysroot path.  */\n-  gdb_sysroot\n-    = xstrdup (relocate_gdb_directory (TARGET_SYSTEM_ROOT,\n-\t\t\t\t     TARGET_SYSTEM_ROOT_RELOCATABLE).c_str ());\n+  gdb_sysroot = relocate_gdb_directory (TARGET_SYSTEM_ROOT,\n+\t\t\t\t\tTARGET_SYSTEM_ROOT_RELOCATABLE);\n \n-  if (*gdb_sysroot == '\\0')\n-    {\n-      xfree (gdb_sysroot);\n-      gdb_sysroot = xstrdup (TARGET_SYSROOT_PREFIX);\n-    }\n+  if (gdb_sysroot.empty ())\n+    gdb_sysroot = TARGET_SYSROOT_PREFIX;\n \n   debug_file_directory\n-    = xstrdup (relocate_gdb_directory (DEBUGDIR,\n-\t\t\t\t     DEBUGDIR_RELOCATABLE).c_str ());\n+    = relocate_gdb_directory (DEBUGDIR, DEBUGDIR_RELOCATABLE);\n \n   gdb_datadir = relocate_gdb_directory (GDB_DATADIR,\n \t\t\t\t\tGDB_DATADIR_RELOCATABLE);"
    },
    {
      "sha": "77a013d3b7a2d5fc3fd789cdd9bd2b8778d25290",
      "filename": "gdb/maint-test-options.c",
      "status": "modified",
      "additions": 2,
      "deletions": 9,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/maint-test-options.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/maint-test-options.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint-test-options.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -133,17 +133,12 @@ struct test_options_opts\n   const char *enum_opt = test_options_enum_values_xxx;\n   unsigned int uint_opt = 0;\n   int zuint_unl_opt = 0;\n-  char *string_opt = nullptr;\n+  std::string string_opt;\n \n   test_options_opts () = default;\n \n   DISABLE_COPY_AND_ASSIGN (test_options_opts);\n \n-  ~test_options_opts ()\n-  {\n-    xfree (string_opt);\n-  }\n-\n   /* Dump the options to FILE.  ARGS is the remainder unprocessed\n      arguments.  */\n   void dump (ui_file *file, const char *args) const\n@@ -162,9 +157,7 @@ struct test_options_opts\n \t\t\t(zuint_unl_opt == -1\n \t\t\t ? \"unlimited\"\n \t\t\t : plongest (zuint_unl_opt)),\n-\t\t\t(string_opt != nullptr\n-\t\t\t ? string_opt\n-\t\t\t : \"\"),\n+\t\t\tstring_opt.c_str (),\n \t\t\targs);\n   }\n };"
    },
    {
      "sha": "eea3ea9957267c94e9ff68069ef9ffd461dab544",
      "filename": "gdb/maint-test-settings.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/maint-test-settings.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/maint-test-settings.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint-test-settings.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -44,13 +44,13 @@ static unsigned int maintenance_test_settings_zuinteger;\n \n static int maintenance_test_settings_zuinteger_unlimited;\n \n-static char *maintenance_test_settings_string;\n+static std::string maintenance_test_settings_string;\n \n-static char *maintenance_test_settings_string_noescape;\n+static std::string maintenance_test_settings_string_noescape;\n \n-static char *maintenance_test_settings_optional_filename;\n+static std::string maintenance_test_settings_optional_filename;\n \n-static char *maintenance_test_settings_filename;\n+static std::string maintenance_test_settings_filename;\n \n /* Enum values for the \"maintenance set/show test-settings boolean\"\n    commands.  */"
    },
    {
      "sha": "f9685a515ad9bd3d7662d02bf3353d678726f016",
      "filename": "gdb/mi/mi-cmd-env.c",
      "status": "modified",
      "additions": 8,
      "deletions": 10,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/mi/mi-cmd-env.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/mi/mi-cmd-env.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-env.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -93,7 +93,7 @@ mi_cmd_env_cd (const char *command, char **argv, int argc)\n }\n \n static void\n-env_mod_path (const char *dirname, char **which_path)\n+env_mod_path (const char *dirname, std::string &which_path)\n {\n   if (dirname == 0 || dirname[0] == '\\0')\n     return;\n@@ -109,7 +109,6 @@ void\n mi_cmd_env_path (const char *command, char **argv, int argc)\n {\n   struct ui_out *uiout = current_uiout;\n-  char *exec_path;\n   const char *env;\n   int reset = 0;\n   int oind = 0;\n@@ -152,11 +151,11 @@ mi_cmd_env_path (const char *command, char **argv, int argc)\n   argv += oind;\n   argc -= oind;\n \n-\n+  std::string exec_path;\n   if (reset)\n     {\n       /* Reset implies resetting to original path first.  */\n-      exec_path = xstrdup (orig_path);\n+      exec_path = orig_path;\n     }\n   else\n     {\n@@ -166,14 +165,14 @@ mi_cmd_env_path (const char *command, char **argv, int argc)\n       /* Can be null if path is not set.  */\n       if (!env)\n \tenv = \"\";\n-      exec_path = xstrdup (env);\n+\n+      exec_path = env;\n     }\n \n   for (i = argc - 1; i >= 0; --i)\n-    env_mod_path (argv[i], &exec_path);\n+    env_mod_path (argv[i], exec_path);\n \n-  current_inferior ()->environment.set (path_var_name, exec_path);\n-  xfree (exec_path);\n+  current_inferior ()->environment.set (path_var_name, exec_path.c_str ());\n   env = current_inferior ()->environment.get (path_var_name);\n   uiout->field_string (\"path\", env);\n }\n@@ -228,12 +227,11 @@ mi_cmd_env_dir (const char *command, char **argv, int argc)\n   if (reset)\n     {\n       /* Reset means setting to default path first.  */\n-      xfree (source_path);\n       init_source_path ();\n     }\n \n   for (i = argc - 1; i >= 0; --i)\n-    env_mod_path (argv[i], &source_path);\n+    env_mod_path (argv[i], source_path);\n \n   uiout->field_string (\"source-path\", source_path);\n   forget_cached_source_info ();"
    },
    {
      "sha": "40bde7893bd8ce787cf77c7736f22742a437bc22",
      "filename": "gdb/proc-api.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/proc-api.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/proc-api.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/proc-api.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -50,14 +50,14 @@ struct trans {\n \n static bool  procfs_trace   = false;\n static FILE *procfs_file     = NULL;\n-static char *procfs_filename;\n+static std::string procfs_filename = \"procfs_trace\";\n \n static void\n prepare_to_trace (void)\n {\n   if (procfs_trace)\t\t\t/* if procfs tracing turned on */\n     if (procfs_file == NULL)\t\t/* if output file not yet open */\n-      procfs_file = fopen (procfs_filename, \"a\");\t/* open output file */\n+      procfs_file = fopen (procfs_filename.c_str (), \"a\");\t/* open output file */\n }\n \n static void\n@@ -425,7 +425,6 @@ Show tracing for /proc api calls.\"), NULL,\n \t\t\t   NULL, /* FIXME: i18n: */\n \t\t\t   &setlist, &showlist);\n \n-  procfs_filename = xstrdup (\"procfs_trace\");\n   add_setshow_filename_cmd (\"procfs-file\", no_class, &procfs_filename, _(\"\\\n Set filename for /proc tracefile.\"), _(\"\\\n Show filename for /proc tracefile.\"), NULL,"
    },
    {
      "sha": "407db045d930081184cb6d3c80c75611ff062c17",
      "filename": "gdb/python/py-param.c",
      "status": "modified",
      "additions": 25,
      "deletions": 20,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/python/py-param.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/python/py-param.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-param.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -64,8 +64,9 @@ union parmpy_variable\n   /* Hold an unsigned integer value, for uinteger.  */\n   unsigned int uintval;\n \n-  /* Hold a string, for the various string types.  */\n-  char *stringval;\n+  /* Hold a string, for the various string types.  The std::string is\n+     new-ed.  */\n+  std::string *stringval;\n \n   /* Hold a string, for enums.  */\n   const char *cstringval;\n@@ -95,7 +96,6 @@ struct parmpy_object\n static setting\n make_setting (parmpy_object *s)\n {\n-\n   if (var_type_uses<bool> (s->type))\n     return setting (s->type, &s->value.boolval);\n   else if (var_type_uses<int> (s->type))\n@@ -104,8 +104,8 @@ make_setting (parmpy_object *s)\n     return setting (s->type, &s->value.autoboolval);\n   else if (var_type_uses<unsigned int> (s->type))\n     return setting (s->type, &s->value.uintval);\n-  else if (var_type_uses<char *> (s->type))\n-    return setting (s->type, &s->value.stringval);\n+  else if (var_type_uses<std::string> (s->type))\n+    return setting (s->type, s->value.stringval);\n   else if (var_type_uses<const char *> (s->type))\n     return setting (s->type, &s->value.cstringval);\n   else\n@@ -163,22 +163,15 @@ set_parameter_value (parmpy_object *self, PyObject *value)\n \t  return -1;\n \t}\n       if (value == Py_None)\n-\t{\n-\t  xfree (self->value.stringval);\n-\t  if (self->type == var_optional_filename)\n-\t    self->value.stringval = xstrdup (\"\");\n-\t  else\n-\t    self->value.stringval = NULL;\n-\t}\n+\tself->value.stringval->clear ();\n       else\n \t{\n \t  gdb::unique_xmalloc_ptr<char>\n \t    string (python_string_to_host_string (value));\n \t  if (string == NULL)\n \t    return -1;\n \n-\t  xfree (self->value.stringval);\n-\t  self->value.stringval = string.release ();\n+\t  *self->value.stringval = string.get ();\n \t}\n       break;\n \n@@ -525,22 +518,22 @@ add_setshow_generic (int parmclass, enum command_class cmdclass,\n \n     case var_string:\n       commands = add_setshow_string_cmd (cmd_name.get (), cmdclass,\n-\t\t\t\t\t &self->value.stringval, set_doc,\n+\t\t\t\t\t self->value.stringval, set_doc,\n \t\t\t\t\t show_doc, help_doc, get_set_value,\n \t\t\t\t\t get_show_value, set_list, show_list);\n       break;\n \n     case var_string_noescape:\n       commands = add_setshow_string_noescape_cmd (cmd_name.get (), cmdclass,\n-\t\t\t\t\t\t  &self->value.stringval,\n+\t\t\t\t\t\t  self->value.stringval,\n \t\t\t\t\t\t  set_doc, show_doc, help_doc,\n \t\t\t\t\t\t  get_set_value, get_show_value,\n \t\t\t\t\t\t  set_list, show_list);\n       break;\n \n     case var_optional_filename:\n       commands = add_setshow_optional_filename_cmd (cmd_name.get (), cmdclass,\n-\t\t\t\t\t\t    &self->value.stringval,\n+\t\t\t\t\t\t    self->value.stringval,\n \t\t\t\t\t\t    set_doc, show_doc, help_doc,\n \t\t\t\t\t\t    get_set_value,\n \t\t\t\t\t\t    get_show_value, set_list,\n@@ -549,7 +542,7 @@ add_setshow_generic (int parmclass, enum command_class cmdclass,\n \n     case var_filename:\n       commands = add_setshow_filename_cmd (cmd_name.get (), cmdclass,\n-\t\t\t\t\t   &self->value.stringval, set_doc,\n+\t\t\t\t\t   self->value.stringval, set_doc,\n \t\t\t\t\t   show_doc, help_doc, get_set_value,\n \t\t\t\t\t   get_show_value, set_list, show_list);\n       break;\n@@ -732,6 +725,9 @@ parmpy_init (PyObject *self, PyObject *args, PyObject *kwds)\n   obj->type = (enum var_types) parmclass;\n   memset (&obj->value, 0, sizeof (obj->value));\n \n+  if (var_type_uses<std::string> (obj->type))\n+    obj->value.stringval = new std::string;\n+\n   gdb::unique_xmalloc_ptr<char> cmd_name\n     = gdbpy_parse_command_name (name, &set_list, &setlist);\n   if (cmd_name == nullptr)\n@@ -764,7 +760,16 @@ parmpy_init (PyObject *self, PyObject *args, PyObject *kwds)\n   return 0;\n }\n \n-\f\n+/* Deallocate function for a gdb.Parameter.  */\n+\n+static void\n+parmpy_dealloc (PyObject *obj)\n+{\n+  parmpy_object *parm_obj = (parmpy_object *) obj;\n+\n+  if (var_type_uses<std::string> (parm_obj->type))\n+    delete parm_obj->value.stringval;\n+}\n \n /* Initialize the 'parameters' module.  */\n int\n@@ -803,7 +808,7 @@ PyTypeObject parmpy_object_type =\n   \"gdb.Parameter\",\t\t  /*tp_name*/\n   sizeof (parmpy_object),\t  /*tp_basicsize*/\n   0,\t\t\t\t  /*tp_itemsize*/\n-  0,\t\t\t\t  /*tp_dealloc*/\n+  parmpy_dealloc,\t\t  /*tp_dealloc*/\n   0,\t\t\t\t  /*tp_print*/\n   0,\t\t\t\t  /*tp_getattr*/\n   0,\t\t\t\t  /*tp_setattr*/"
    },
    {
      "sha": "fcd367fe2ec93f6980fc8c02c3c70037cfff5caa",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -460,13 +460,11 @@ gdbpy_parameter_value (const setting &var)\n     case var_enum:\n       {\n \tconst char *str;\n-        if (var.type () == var_enum)\n-          str = var.get<const char *> ();\n-        else\n-          str = var.get<char *> ();\n+\tif (var.type () == var_enum)\n+\t  str = var.get<const char *> ();\n+\telse\n+\t  str = var.get<std::string> ().c_str ();\n \n-\tif (str == nullptr)\n-\t  str = \"\";\n \treturn host_string_to_python_string (str).release ();\n       }\n "
    },
    {
      "sha": "5bfce2a9a318e99762466512187746bf0901d424",
      "filename": "gdb/remote-sim.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/remote-sim.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/remote-sim.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote-sim.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -680,10 +680,9 @@ gdbsim_target_open (const char *args, int from_tty)\n   int len;\n   char *arg_buf;\n   struct sim_inferior_data *sim_data;\n-  const char *sysroot;\n   SIM_DESC gdbsim_desc;\n \n-  sysroot = gdb_sysroot;\n+  const std::string &sysroot = gdb_sysroot;\n   if (is_target_filename (sysroot))\n     sysroot += strlen (TARGET_SYSROOT_PREFIX);\n \n@@ -704,7 +703,7 @@ gdbsim_target_open (const char *args, int from_tty)\n   len = (7 + 1\t\t\t/* gdbsim */\n \t + strlen (\" -E little\")\n \t + strlen (\" --architecture=xxxxxxxxxx\")\n-\t + strlen (\" --sysroot=\") + strlen (sysroot) +\n+\t + strlen (\" --sysroot=\") + sysroot.length () +\n \t + (args ? strlen (args) : 0)\n \t + 50) /* slack */ ;\n   arg_buf = (char *) alloca (len);\n@@ -731,7 +730,7 @@ gdbsim_target_open (const char *args, int from_tty)\n     }\n   /* Pass along gdb's concept of the sysroot.  */\n   strcat (arg_buf, \" --sysroot=\");\n-  strcat (arg_buf, sysroot);\n+  strcat (arg_buf, sysroot.c_str ());\n   /* finally, any explicit args */\n   if (args)\n     {"
    },
    {
      "sha": "d5eb40ce57857db839b0da7e21f7af8869464ab7",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -1004,7 +1004,7 @@ static const struct program_space_key<char, gdb::xfree_deleter<char>>\n    remote exec-file commands.  While the remote exec-file setting is\n    per-program-space, the set/show machinery uses this as the \n    location of the remote exec-file value.  */\n-static char *remote_exec_file_var;\n+static std::string remote_exec_file_var;\n \n /* The size to align memory write packets, when practical.  The protocol\n    does not guarantee any alignment, and gdb will generate short\n@@ -1355,8 +1355,8 @@ static void\n set_remote_exec_file (const char *ignored, int from_tty,\n \t\t      struct cmd_list_element *c)\n {\n-  gdb_assert (remote_exec_file_var != NULL);\n-  set_pspace_remote_exec_file (current_program_space, remote_exec_file_var);\n+  set_pspace_remote_exec_file (current_program_space,\n+\t\t\t       remote_exec_file_var.c_str ());\n }\n \n /* The \"set/show remote exec-file\" show command hook.  */\n@@ -12628,7 +12628,7 @@ remote_target::filesystem_is_local ()\n      this case we treat the remote filesystem as local if the\n      sysroot is exactly TARGET_SYSROOT_PREFIX and if the stub\n      does not support vFile:open.  */\n-  if (strcmp (gdb_sysroot, TARGET_SYSROOT_PREFIX) == 0)\n+  if (gdb_sysroot == TARGET_SYSROOT_PREFIX)\n     {\n       enum packet_support ps = packet_support (PACKET_vFile_open);\n \n@@ -13256,7 +13256,7 @@ remote_target::download_tracepoint (struct bp_location *loc)\n \t\t   \"ignoring tp %d cond\"), b->number);\n     }\n \n-  if (b->commands || *default_collect)\n+  if (b->commands || !default_collect.empty ())\n     {\n       size_left = buf.size () - strlen (buf.data ());\n "
    },
    {
      "sha": "5ec79a11aac42a865176f152df628b9f20b1bfbf",
      "filename": "gdb/serial.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/serial.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/serial.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/serial.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -38,7 +38,7 @@ static struct serial *scb_base;\n /* Non-NULL gives filename which contains a recording of the remote session,\n    suitable for playback by gdbserver.  */\n \n-static char *serial_logfile = NULL;\n+static std::string serial_logfile;\n static struct ui_file *serial_logfp = NULL;\n \n static const struct serial_ops *serial_interface_lookup (const char *);\n@@ -251,12 +251,12 @@ serial_open_ops_1 (const struct serial_ops *ops, const char *open_name)\n   scb->next = scb_base;\n   scb_base = scb;\n \n-  if (serial_logfile != NULL)\n+  if (!serial_logfile.empty ())\n     {\n       stdio_file_up file (new stdio_file ());\n \n-      if (!file->open (serial_logfile, \"w\"))\n-\tperror_with_name (serial_logfile);\n+      if (!file->open (serial_logfile.c_str (), \"w\"))\n+\tperror_with_name (serial_logfile.c_str ());\n \n       serial_logfp = file.release ();\n     }"
    },
    {
      "sha": "3947c2d1d2e3931924e74642ac1791fc0fd9fd7a",
      "filename": "gdb/solib.c",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/solib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/solib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -98,7 +98,7 @@ struct target_so_ops *current_target_so_ops;\n /* If non-empty, this is a search path for loading non-absolute shared library\n    symbol files.  This takes precedence over the environment variables PATH\n    and LD_LIBRARY_PATH.  */\n-static char *solib_search_path = NULL;\n+static std::string solib_search_path;\n static void\n show_solib_search_path (struct ui_file *file, int from_tty,\n \t\t\tstruct cmd_list_element *c, const char *value)\n@@ -157,7 +157,7 @@ solib_find_1 (const char *in_pathname, int *fd, bool is_solib)\n   int found_file = -1;\n   gdb::unique_xmalloc_ptr<char> temp_pathname;\n   const char *fskind = effective_target_file_system_kind ();\n-  const char *sysroot = gdb_sysroot;\n+  const char *sysroot = gdb_sysroot.c_str ();\n   int prefix_len, orig_prefix_len;\n \n   /* If the absolute prefix starts with \"target:\" but the filesystem\n@@ -322,17 +322,17 @@ solib_find_1 (const char *in_pathname, int *fd, bool is_solib)\n \n   /* If not found, and we're looking for a solib, search the\n      solib_search_path (if any).  */\n-  if (is_solib && found_file < 0 && solib_search_path != NULL)\n-    found_file = openp (solib_search_path,\n+  if (is_solib && found_file < 0 && !solib_search_path.empty ())\n+    found_file = openp (solib_search_path.c_str (),\n \t\t\tOPF_TRY_CWD_FIRST | OPF_RETURN_REALPATH,\n \t\t\tin_pathname, O_RDONLY | O_BINARY, &temp_pathname);\n \n   /* If not found, and we're looking for a solib, next search the\n      solib_search_path (if any) for the basename only (ignoring the\n      path).  This is to allow reading solibs from a path that differs\n      from the opened path.  */\n-  if (is_solib && found_file < 0 && solib_search_path != NULL)\n-    found_file = openp (solib_search_path,\n+  if (is_solib && found_file < 0 && !solib_search_path.empty ())\n+    found_file = openp (solib_search_path.c_str (),\n \t\t\tOPF_TRY_CWD_FIRST | OPF_RETURN_REALPATH,\n \t\t\ttarget_lbasename (fskind, in_pathname),\n \t\t\tO_RDONLY | O_BINARY, &temp_pathname);\n@@ -381,7 +381,7 @@ exec_file_find (const char *in_pathname, int *fd)\n   if (in_pathname == NULL)\n     return NULL;\n \n-  if (*gdb_sysroot != '\\0' && IS_TARGET_ABSOLUTE_PATH (fskind, in_pathname))\n+  if (!gdb_sysroot.empty () && IS_TARGET_ABSOLUTE_PATH (fskind, in_pathname))\n     {\n       result = solib_find_1 (in_pathname, fd, false);\n \n@@ -1397,18 +1397,18 @@ gdb_sysroot_changed (const char *ignored, int from_tty,\n   const char *old_prefix = \"remote:\";\n   const char *new_prefix = TARGET_SYSROOT_PREFIX;\n \n-  if (startswith (gdb_sysroot, old_prefix))\n+  if (startswith (gdb_sysroot.c_str (), old_prefix))\n     {\n       static bool warning_issued = false;\n \n       gdb_assert (strlen (old_prefix) == strlen (new_prefix));\n-      memcpy (gdb_sysroot, new_prefix, strlen (new_prefix));\n+      gdb_sysroot = new_prefix + gdb_sysroot.substr (strlen (old_prefix));\n \n       if (!warning_issued)\n \t{\n \t  warning (_(\"\\\"%s\\\" is deprecated, use \\\"%s\\\" instead.\"),\n \t\t   old_prefix, new_prefix);\n-\t  warning (_(\"sysroot set to \\\"%s\\\".\"), gdb_sysroot);\n+\t  warning (_(\"sysroot set to \\\"%s\\\".\"), gdb_sysroot.c_str ());\n \n \t  warning_issued = true;\n \t}"
    },
    {
      "sha": "3810af83042d254fe4a6d667d402cd6dd59f65fb",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 38,
      "deletions": 28,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -57,7 +57,7 @@\n /* Path of directories to search for source files.\n    Same format as the PATH environment variable's value.  */\n \n-char *source_path;\n+std::string source_path;\n \n /* Support for source path substitution commands.  */\n \n@@ -379,17 +379,15 @@ set_directories_command (const char *args,\n {\n   /* This is the value that was set.\n      It needs to be processed to maintain $cdir:$cwd and remove dups.  */\n-  char *set_path = source_path;\n+  std::string set_path = source_path;\n \n   /* We preserve the invariant that $cdir:$cwd begins life at the end of\n      the list by calling init_source_path.  If they appear earlier in\n      SET_PATH then mod_path will move them appropriately.\n      mod_path will also remove duplicates.  */\n   init_source_path ();\n-  if (*set_path != '\\0')\n-    mod_path (set_path, &source_path);\n-\n-  xfree (set_path);\n+  if (!set_path.empty ())\n+    mod_path (set_path.c_str (), source_path);\n }\n \n /* Print the list of source directories.\n@@ -400,7 +398,7 @@ static void\n show_directories_1 (char *ignore, int from_tty)\n {\n   puts_filtered (\"Source directories searched: \");\n-  puts_filtered (source_path);\n+  puts_filtered (source_path.c_str ());\n   puts_filtered (\"\\n\");\n }\n \n@@ -451,10 +449,7 @@ forget_cached_source_info (void)\n void\n init_source_path (void)\n {\n-  char buf[20];\n-\n-  xsnprintf (buf, sizeof (buf), \"$cdir%c$cwd\", DIRNAME_SEPARATOR);\n-  source_path = xstrdup (buf);\n+  source_path = string_printf (\"$cdir%c$cwd\", DIRNAME_SEPARATOR);\n   forget_cached_source_info ();\n }\n \n@@ -470,20 +465,20 @@ directory_command (const char *dirname, int from_tty)\n     {\n       if (!from_tty || query (_(\"Reinitialize source path to empty? \")))\n \t{\n-\t  xfree (source_path);\n \t  init_source_path ();\n \t  value_changed = true;\n \t}\n     }\n   else\n     {\n-      mod_path (dirname, &source_path);\n+      mod_path (dirname, source_path);\n       forget_cached_source_info ();\n       value_changed = true;\n     }\n   if (value_changed)\n     {\n-      gdb::observers::command_param_changed.notify (\"directories\", source_path);\n+      gdb::observers::command_param_changed.notify (\"directories\",\n+\t\t\t\t\t\t    source_path.c_str ());\n       if (from_tty)\n \tshow_directories_1 ((char *) 0, from_tty);\n     }\n@@ -495,13 +490,13 @@ directory_command (const char *dirname, int from_tty)\n void\n directory_switch (const char *dirname, int from_tty)\n {\n-  add_path (dirname, &source_path, 0);\n+  add_path (dirname, source_path, 0);\n }\n \n /* Add zero or more directories to the front of an arbitrary path.  */\n \n void\n-mod_path (const char *dirname, char **which_path)\n+mod_path (const char *dirname, std::string &which_path)\n {\n   add_path (dirname, which_path, 1);\n }\n@@ -689,6 +684,17 @@ add_path (const char *dirname, char **which_path, int parse_separators)\n     }\n }\n \n+/* add_path would need to be re-written to work on an std::string, but this is\n+   not trivial.  Hence this overload which copies to a `char *` and back.  */\n+\n+void\n+add_path (const char *dirname, std::string &which_path, int parse_separators)\n+{\n+  char *which_path_copy = xstrdup (which_path.data ());\n+  add_path (dirname, &which_path_copy, parse_separators);\n+  which_path = which_path_copy;\n+  xfree (which_path_copy);\n+}\n \n static void\n info_source_command (const char *ignore, int from_tty)\n@@ -967,7 +973,7 @@ source_full_path_of (const char *filename,\n {\n   int fd;\n \n-  fd = openp (source_path,\n+  fd = openp (source_path.c_str (),\n \t      OPF_TRY_CWD_FIRST | OPF_SEARCH_IN_PATH | OPF_RETURN_REALPATH,\n \t      filename, O_RDONLY, full_pathname);\n   if (fd < 0)\n@@ -1058,7 +1064,8 @@ find_and_open_source (const char *filename,\n \t\t      const char *dirname,\n \t\t      gdb::unique_xmalloc_ptr<char> *fullname)\n {\n-  char *path = source_path;\n+  const char *path = source_path.c_str ();\n+  std::string expanded_path_holder;\n   const char *p;\n \n   /* If reading of source files is disabled then return a result indicating\n@@ -1104,19 +1111,22 @@ find_and_open_source (const char *filename,\n       /* Replace a path entry of $cdir with the compilation directory\n \t name.  */\n #define\tcdir_len\t5\n-      p = strstr (source_path, \"$cdir\");\n+      p = strstr (source_path.c_str (), \"$cdir\");\n       if (p && (p == path || p[-1] == DIRNAME_SEPARATOR)\n \t  && (p[cdir_len] == DIRNAME_SEPARATOR || p[cdir_len] == '\\0'))\n \t{\n-\t  int len;\n-\n-\t  path = (char *)\n-\t    alloca (strlen (source_path) + 1 + strlen (dirname) + 1);\n-\t  len = p - source_path;\n-\t  strncpy (path, source_path, len);\t/* Before $cdir */\n-\t  strcpy (path + len, dirname);\t\t/* new stuff */\n-\t  strcat (path + len, source_path + len + cdir_len);\t/* After\n-\t\t\t\t\t\t\t\t   $cdir */\n+\t  int len = p - source_path.c_str ();\n+\n+\t  /* Before $cdir */\n+\t  expanded_path_holder = source_path.substr (0, len);\n+\n+\t  /* new stuff */\n+\t  expanded_path_holder += dirname;\n+\n+\t  /* After $cdir */\n+\t  expanded_path_holder += source_path.c_str () + len + cdir_len;\n+\n+\t  path = expanded_path_holder.c_str ();\n \t}\n     }\n "
    },
    {
      "sha": "2b9e8f38c039038c9694de934dba5365a4c32265",
      "filename": "gdb/source.h",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/source.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/source.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.h?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -39,13 +39,14 @@ extern int openp (const char *, openp_flags, const char *, int,\n \n extern int source_full_path_of (const char *, gdb::unique_xmalloc_ptr<char> *);\n \n-extern void mod_path (const char *, char **);\n+extern void mod_path (const char *, std::string &);\n \n extern void add_path (const char *, char **, int);\n+extern void add_path (const char *, std::string &, int);\n \n extern void directory_switch (const char *, int);\n \n-extern char *source_path;\n+extern std::string source_path;\n \n extern void init_source_path (void);\n "
    },
    {
      "sha": "8b29ab505e5c0dd86cadde28c1245918b12a5ec3",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -2426,12 +2426,7 @@ print_frame_local_vars (struct frame_info *frame,\n struct info_print_options\n {\n   bool quiet = false;\n-  char *type_regexp = nullptr;\n-\n-  ~info_print_options ()\n-  {\n-    xfree (type_regexp);\n-  }\n+  std::string type_regexp;\n };\n \n /* The options used by the 'info locals' and 'info args' commands.  */\n@@ -2490,9 +2485,11 @@ info_locals_command (const char *args, int from_tty)\n   if (args != nullptr && *args == '\\0')\n     args = nullptr;\n \n-  print_frame_local_vars (get_selected_frame (_(\"No frame selected.\")),\n-\t\t\t  opts.quiet, args, opts.type_regexp,\n-\t\t\t  0, gdb_stdout);\n+  print_frame_local_vars\n+    (get_selected_frame (_(\"No frame selected.\")),\n+     opts.quiet, args,\n+     opts.type_regexp.empty () ? nullptr : opts.type_regexp.c_str (),\n+     0, gdb_stdout);\n }\n \n /* Iterate over all the argument variables in block B.  */\n@@ -2601,8 +2598,11 @@ info_args_command (const char *args, int from_tty)\n   if (args != nullptr && *args == '\\0')\n     args = nullptr;\n \n-  print_frame_arg_vars (get_selected_frame (_(\"No frame selected.\")),\n-\t\t\topts.quiet, args, opts.type_regexp, gdb_stdout);\n+  print_frame_arg_vars\n+    (get_selected_frame (_(\"No frame selected.\")),\n+     opts.quiet, args,\n+     opts.type_regexp.empty () ? nullptr : opts.type_regexp.c_str (),\n+     gdb_stdout);\n }\n \f\n /* Return the symbol-block in which the selected frame is executing."
    },
    {
      "sha": "9e5c2d488812967b8541e1115039cd93dd104d13",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 24,
      "deletions": 25,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -1349,7 +1349,7 @@ separate_debug_file_exists (const std::string &name, unsigned long crc,\n   return 1;\n }\n \n-char *debug_file_directory = NULL;\n+std::string debug_file_directory;\n static void\n show_debug_file_directory (struct ui_file *file, int from_tty,\n \t\t\t   struct cmd_list_element *c, const char *value)\n@@ -1406,8 +1406,9 @@ find_separate_debug_file (const char *dir,\n   bool target_prefix = startswith (dir, \"target:\");\n   const char *dir_notarget = target_prefix ? dir + strlen (\"target:\") : dir;\n   std::vector<gdb::unique_xmalloc_ptr<char>> debugdir_vec\n-    = dirnames_to_char_ptr_vec (debug_file_directory);\n-  gdb::unique_xmalloc_ptr<char> canon_sysroot = gdb_realpath (gdb_sysroot);\n+    = dirnames_to_char_ptr_vec (debug_file_directory.c_str ());\n+  gdb::unique_xmalloc_ptr<char> canon_sysroot\n+    = gdb_realpath (gdb_sysroot.c_str ());\n \n  /* MS-Windows/MS-DOS don't allow colons in file names; we must\n     convert the drive letter into a one-letter directory, so that the\n@@ -1448,7 +1449,7 @@ find_separate_debug_file (const char *dir,\n \t  if (canon_sysroot.get () != NULL)\n \t    base_path = child_path (canon_sysroot.get (), canon_dir);\n \t  else\n-\t    base_path = child_path (gdb_sysroot, canon_dir);\n+\t    base_path = child_path (gdb_sysroot.c_str (), canon_dir);\n \t}\n       if (base_path != NULL)\n \t{\n@@ -2654,7 +2655,7 @@ add_filename_language (const char *ext, enum language lang)\n   filename_language_table.emplace_back (ext, lang);\n }\n \n-static char *ext_args;\n+static std::string ext_args;\n static void\n show_ext_args (struct ui_file *file, int from_tty,\n \t       struct cmd_list_element *c, const char *value)\n@@ -2669,48 +2670,48 @@ static void\n set_ext_lang_command (const char *args,\n \t\t      int from_tty, struct cmd_list_element *e)\n {\n-  char *cp = ext_args;\n-  enum language lang;\n+  const char *begin = ext_args.c_str ();\n+  const char *end = ext_args.c_str ();\n \n   /* First arg is filename extension, starting with '.'  */\n-  if (*cp != '.')\n-    error (_(\"'%s': Filename extension must begin with '.'\"), ext_args);\n+  if (*end != '.')\n+    error (_(\"'%s': Filename extension must begin with '.'\"), ext_args.c_str ());\n \n   /* Find end of first arg.  */\n-  while (*cp && !isspace (*cp))\n-    cp++;\n+  while (*end != '\\0' && !isspace (*end))\n+    end++;\n \n-  if (*cp == '\\0')\n+  if (*end == '\\0')\n     error (_(\"'%s': two arguments required -- \"\n \t     \"filename extension and language\"),\n-\t   ext_args);\n+\t   ext_args.c_str ());\n \n-  /* Null-terminate first arg.  */\n-  *cp++ = '\\0';\n+  /* Extract first arg, the extension.  */\n+  std::string extension = ext_args.substr (0, end - begin);\n \n   /* Find beginning of second arg, which should be a source language.  */\n-  cp = skip_spaces (cp);\n+  begin = skip_spaces (end);\n \n-  if (*cp == '\\0')\n+  if (*begin == '\\0')\n     error (_(\"'%s': two arguments required -- \"\n \t     \"filename extension and language\"),\n-\t   ext_args);\n+\t   ext_args.c_str ());\n \n   /* Lookup the language from among those we know.  */\n-  lang = language_enum (cp);\n+  language lang = language_enum (begin);\n \n   auto it = filename_language_table.begin ();\n   /* Now lookup the filename extension: do we already know it?  */\n   for (; it != filename_language_table.end (); it++)\n     {\n-      if (it->ext == ext_args)\n+      if (it->ext == extension)\n \tbreak;\n     }\n \n   if (it == filename_language_table.end ())\n     {\n       /* New file extension.  */\n-      add_filename_language (ext_args, lang);\n+      add_filename_language (extension.data (), lang);\n     }\n   else\n     {\n@@ -3784,17 +3785,15 @@ test_set_ext_lang_command ()\n   SELF_CHECK (lang == language_unknown);\n \n   /* Test adding a new extension using the CLI command.  */\n-  auto args_holder = make_unique_xstrdup (\".hello rust\");\n-  ext_args = args_holder.get ();\n+  ext_args = \".hello rust\";\n   set_ext_lang_command (NULL, 1, NULL);\n \n   lang = deduce_language_from_filename (\"cake.hello\");\n   SELF_CHECK (lang == language_rust);\n \n   /* Test overriding an existing extension using the CLI command.  */\n   int size_before = filename_language_table.size ();\n-  args_holder.reset (xstrdup (\".hello pascal\"));\n-  ext_args = args_holder.get ();\n+  ext_args = \".hello pascal\";\n   set_ext_lang_command (NULL, 1, NULL);\n   int size_after = filename_language_table.size ();\n "
    },
    {
      "sha": "e6851c31e273deb86e6e3b76da644fbf6ba97cf4",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 22,
      "deletions": 24,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -5170,12 +5170,7 @@ struct info_vars_funcs_options\n {\n   bool quiet = false;\n   bool exclude_minsyms = false;\n-  char *type_regexp = nullptr;\n-\n-  ~info_vars_funcs_options ()\n-  {\n-    xfree (type_regexp);\n-  }\n+  std::string type_regexp;\n };\n \n /* The options used by the 'info variables' and 'info functions'\n@@ -5198,8 +5193,7 @@ static const gdb::option::option_def info_vars_funcs_options_defs[] = {\n \n   gdb::option::string_option_def<info_vars_funcs_options> {\n     \"t\",\n-    [] (info_vars_funcs_options *opt) { return &opt->type_regexp;\n-  },\n+    [] (info_vars_funcs_options *opt) { return &opt->type_regexp; },\n     nullptr, /* show_cmd_cb */\n     nullptr /* set_doc */\n   }\n@@ -5243,8 +5237,10 @@ info_variables_command (const char *args, int from_tty)\n   if (args != nullptr && *args == '\\0')\n     args = nullptr;\n \n-  symtab_symbol_info (opts.quiet, opts.exclude_minsyms, args, VARIABLES_DOMAIN,\n-\t\t      opts.type_regexp, from_tty);\n+  symtab_symbol_info\n+    (opts.quiet, opts.exclude_minsyms, args, VARIABLES_DOMAIN,\n+     opts.type_regexp.empty () ? nullptr : opts.type_regexp.c_str (),\n+     from_tty);\n }\n \n /* Implement the 'info functions' command.  */\n@@ -5260,8 +5256,10 @@ info_functions_command (const char *args, int from_tty)\n   if (args != nullptr && *args == '\\0')\n     args = nullptr;\n \n-  symtab_symbol_info (opts.quiet, opts.exclude_minsyms, args,\n-\t\t      FUNCTIONS_DOMAIN, opts.type_regexp, from_tty);\n+  symtab_symbol_info\n+    (opts.quiet, opts.exclude_minsyms, args, FUNCTIONS_DOMAIN,\n+     opts.type_regexp.empty () ? nullptr : opts.type_regexp.c_str (),\n+     from_tty);\n }\n \n /* Holds the -q option for the 'info types' command.  */\n@@ -6773,14 +6771,8 @@ info_module_subcommand (bool quiet, const char *module_regexp,\n struct info_modules_var_func_options\n {\n   bool quiet = false;\n-  char *type_regexp = nullptr;\n-  char *module_regexp = nullptr;\n-\n-  ~info_modules_var_func_options ()\n-  {\n-    xfree (type_regexp);\n-    xfree (module_regexp);\n-  }\n+  std::string type_regexp;\n+  std::string module_regexp;\n };\n \n /* The options used by 'info module variables' and 'info module functions'\n@@ -6830,8 +6822,11 @@ info_module_functions_command (const char *args, int from_tty)\n   if (args != nullptr && *args == '\\0')\n     args = nullptr;\n \n-  info_module_subcommand (opts.quiet, opts.module_regexp, args,\n-\t\t\t  opts.type_regexp, FUNCTIONS_DOMAIN);\n+  info_module_subcommand\n+    (opts.quiet,\n+     opts.module_regexp.empty () ? nullptr : opts.module_regexp.c_str (), args,\n+     opts.type_regexp.empty () ? nullptr : opts.type_regexp.c_str (),\n+     FUNCTIONS_DOMAIN);\n }\n \n /* Implements the 'info module variables' command.  */\n@@ -6846,8 +6841,11 @@ info_module_variables_command (const char *args, int from_tty)\n   if (args != nullptr && *args == '\\0')\n     args = nullptr;\n \n-  info_module_subcommand (opts.quiet, opts.module_regexp, args,\n-\t\t\t  opts.type_regexp, VARIABLES_DOMAIN);\n+  info_module_subcommand\n+    (opts.quiet,\n+     opts.module_regexp.empty () ? nullptr : opts.module_regexp.c_str (), args,\n+     opts.type_regexp.empty () ? nullptr : opts.type_regexp.c_str (),\n+     VARIABLES_DOMAIN);\n }\n \n /* Command completer for 'info module ...' sub-commands.  */"
    },
    {
      "sha": "f5ec617bb2e34931784a1ac6f1904f9859c5a8f5",
      "filename": "gdb/target-descriptions.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/target-descriptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/target-descriptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-descriptions.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -510,7 +510,7 @@ target_desc_info_free (struct target_desc_info *tdesc_info)\n \n /* The string manipulated by the \"set tdesc filename ...\" command.  */\n \n-static char *tdesc_filename_cmd_string;\n+static std::string tdesc_filename_cmd_string;\n \n /* Fetch the current target's description, and switch the current\n    architecture to one which incorporates that description.  */"
    },
    {
      "sha": "75692d34dfa95d48e6b990fafc858d469da077f1",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 53,
      "deletions": 59,
      "changes": 112,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -84,8 +84,6 @@\n \n extern void initialize_all_files (void);\n \n-static bool history_filename_empty (void);\n-\n #define PROMPT(X) the_prompts.prompt_stack[the_prompts.top + X].prompt\n #define PREFIX(X) the_prompts.prompt_stack[the_prompts.top + X].prefix\n #define SUFFIX(X) the_prompts.prompt_stack[the_prompts.top + X].suffix\n@@ -921,12 +919,16 @@ static bool command_editing_p;\n    variable must be set to something sensible.  */\n static bool write_history_p;\n \n+/* The name of the file in which GDB history will be written.  If this is\n+   set to NULL, of the empty string then history will not be written.  */\n+static std::string history_filename;\n+\n /* Implement 'show history save'.  */\n static void\n show_write_history_p (struct ui_file *file, int from_tty,\n \t\t      struct cmd_list_element *c, const char *value)\n {\n-  if (!write_history_p || !history_filename_empty ())\n+  if (!write_history_p || !history_filename.empty ())\n     fprintf_filtered (file, _(\"Saving of the history record on exit is %s.\\n\"),\n \t\t      value);\n   else\n@@ -960,24 +962,12 @@ show_history_remove_duplicates (struct ui_file *file, int from_tty,\n \t\t    value);\n }\n \n-/* The name of the file in which GDB history will be written.  If this is\n-   set to NULL, of the empty string then history will not be written.  */\n-static char *history_filename;\n-\n-/* Return true if the history_filename is either NULL or the empty string,\n-   indicating that we should not try to read, nor write out the history.  */\n-static bool\n-history_filename_empty (void)\n-{\n-  return (history_filename == nullptr || *history_filename == '\\0');\n-}\n-\n /* Implement 'show history filename'.  */\n static void\n show_history_filename (struct ui_file *file, int from_tty,\n \t\t       struct cmd_list_element *c, const char *value)\n {\n-  if (!history_filename_empty ())\n+  if (!history_filename.empty ())\n     fprintf_filtered (file, _(\"The filename in which to record \"\n \t\t\t      \"the command history is \\\"%ps\\\".\\n\"),\n \t\t      styled_string (file_name_style.style (), value));\n@@ -1244,14 +1234,15 @@ gdb_safe_append_history (void)\n   int ret, saved_errno;\n \n   std::string local_history_filename\n-    = string_printf (\"%s-gdb%ld~\", history_filename, (long) getpid ());\n+    = string_printf (\"%s-gdb%ld~\", history_filename.c_str (), (long) getpid ());\n \n-  ret = rename (history_filename, local_history_filename.c_str ());\n+  ret = rename (history_filename.c_str (), local_history_filename.c_str ());\n   saved_errno = errno;\n   if (ret < 0 && saved_errno != ENOENT)\n     {\n       warning (_(\"Could not rename %ps to %ps: %s\"),\n-\t       styled_string (file_name_style.style (), history_filename),\n+\t       styled_string (file_name_style.style (),\n+\t\t\t      history_filename.c_str ()),\n \t       styled_string (file_name_style.style (),\n \t\t\t      local_history_filename.c_str ()),\n \t       safe_strerror (saved_errno));\n@@ -1279,11 +1270,11 @@ gdb_safe_append_history (void)\n \t\t\t\t   history_max_entries);\n \t}\n \n-      ret = rename (local_history_filename.c_str (), history_filename);\n+      ret = rename (local_history_filename.c_str (), history_filename.c_str ());\n       saved_errno = errno;\n       if (ret < 0 && saved_errno != EEXIST)\n \twarning (_(\"Could not rename %s to %s: %s\"),\n-\t\t local_history_filename.c_str (), history_filename,\n+\t\t local_history_filename.c_str (), history_filename.c_str (),\n \t\t safe_strerror (saved_errno));\n     }\n }\n@@ -1656,12 +1647,12 @@ tree, and GDB will still find it.)\\n\\\n \n /* The current top level prompt, settable with \"set prompt\", and/or\n    with the python `gdb.prompt_hook' hook.  */\n-static char *top_prompt;\n+static std::string top_prompt;\n \n /* Access method for the GDB prompt string.  */\n \n-char *\n-get_prompt (void)\n+const std::string &\n+get_prompt ()\n {\n   return top_prompt;\n }\n@@ -1671,10 +1662,7 @@ get_prompt (void)\n void\n set_prompt (const char *s)\n {\n-  char *p = xstrdup (s);\n-\n-  xfree (top_prompt);\n-  top_prompt = p;\n+  top_prompt = s;\n }\n \f\n \n@@ -1814,7 +1802,7 @@ quit_force (int *exit_arg, int from_tty)\n   /* Save the history information if it is appropriate to do so.  */\n   try\n     {\n-      if (write_history_p && history_filename)\n+      if (write_history_p && !history_filename.empty ())\n \t{\n \t  int save = 0;\n \n@@ -2062,27 +2050,8 @@ init_history (void)\n \n   set_readline_history_size (history_size_setshow_var);\n \n-  tmpenv = getenv (\"GDBHISTFILE\");\n-  if (tmpenv != nullptr)\n-    history_filename = xstrdup (tmpenv);\n-  else if (history_filename == nullptr)\n-    {\n-      /* We include the current directory so that if the user changes\n-\t directories the file written will be the same as the one\n-\t that was read.  */\n-#ifdef __MSDOS__\n-      /* No leading dots in file names are allowed on MSDOS.  */\n-      const char *fname = \"_gdb_history\";\n-#else\n-      const char *fname = \".gdb_history\";\n-#endif\n-\n-      gdb::unique_xmalloc_ptr<char> temp (gdb_abspath (fname));\n-      history_filename = temp.release ();\n-    }\n-\n-  if (!history_filename_empty ())\n-    read_history (history_filename);\n+  if (!history_filename.empty ())\n+    read_history (history_filename.c_str ());\n }\n \n static void\n@@ -2132,21 +2101,20 @@ show_exec_done_display_p (struct ui_file *file, int from_tty,\n    Extension languages, for example Python's gdb.parameter API, will read\n    the value directory from this variable, so we must ensure that this\n    always contains the correct value.  */\n-static char *staged_gdb_datadir;\n+static std::string staged_gdb_datadir;\n \n /* \"set\" command for the gdb_datadir configuration variable.  */\n \n static void\n set_gdb_datadir (const char *args, int from_tty, struct cmd_list_element *c)\n {\n-  set_gdb_data_directory (staged_gdb_datadir);\n+  set_gdb_data_directory (staged_gdb_datadir.c_str ());\n \n   /* SET_GDB_DATA_DIRECTORY will resolve relative paths in\n      STAGED_GDB_DATADIR, so we now copy the value from GDB_DATADIR\n      back into STAGED_GDB_DATADIR so the extension languages can read the\n      correct value.  */\n-  free (staged_gdb_datadir);\n-  staged_gdb_datadir = strdup (gdb_datadir.c_str ());\n+  staged_gdb_datadir = gdb_datadir;\n \n   gdb::observers::gdb_datadir_changed.notify ();\n }\n@@ -2171,12 +2139,13 @@ set_history_filename (const char *args,\n   /* We include the current directory so that if the user changes\n      directories the file written will be the same as the one\n      that was read.  */\n-  if (!history_filename_empty () && !IS_ABSOLUTE_PATH (history_filename))\n+  if (!history_filename.empty ()\n+      && !IS_ABSOLUTE_PATH (history_filename.c_str ()))\n     {\n-      gdb::unique_xmalloc_ptr<char> temp (gdb_abspath (history_filename));\n+      gdb::unique_xmalloc_ptr<char> temp\n+\t(gdb_abspath (history_filename.c_str ()));\n \n-      xfree (history_filename);\n-      history_filename = temp.release ();\n+      history_filename = temp.get ();\n     }\n }\n \n@@ -2342,7 +2311,7 @@ When set, GDB uses the specified path to search for data files.\"),\n \t\t\t   &setlist,\n \t\t\t    &showlist);\n   /* Prime the initial value for data-directory.  */\n-  staged_gdb_datadir = strdup (gdb_datadir.c_str ());\n+  staged_gdb_datadir = gdb_datadir;\n \n   add_setshow_auto_boolean_cmd (\"interactive-mode\", class_support,\n \t\t\t\t&interactive_mode, _(\"\\\n@@ -2428,3 +2397,28 @@ gdb_init ()\n   /* Create $_gdb_major and $_gdb_minor convenience variables.  */\n   init_gdb_version_vars ();\n }\n+\n+void _initialize_top ();\n+void\n+_initialize_top ()\n+{\n+  /* Determine a default value for the history filename.  */\n+  const char *tmpenv = getenv (\"GDBHISTFILE\");\n+  if (tmpenv != nullptr)\n+    history_filename = tmpenv;\n+  else\n+    {\n+      /* We include the current directory so that if the user changes\n+\t directories the file written will be the same as the one\n+\t that was read.  */\n+#ifdef __MSDOS__\n+      /* No leading dots in file names are allowed on MSDOS.  */\n+      const char *fname = \"_gdb_history\";\n+#else\n+      const char *fname = \".gdb_history\";\n+#endif\n+\n+      gdb::unique_xmalloc_ptr<char> temp (gdb_abspath (fname));\n+      history_filename = temp.get ();\n+    }\n+}"
    },
    {
      "sha": "f8a5c39bbdf445603cbf2d903a3f5831ecead203",
      "filename": "gdb/top.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/top.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/top.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.h?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -261,7 +261,7 @@ extern scoped_value_mark prepare_execute_command (void);\n \n /* This function returns a pointer to the string that is used\n    by gdb for its command prompt.  */\n-extern char *get_prompt (void);\n+extern const std::string &get_prompt ();\n \n /* This function returns a pointer to the string that is used\n    by gdb for its command prompt.  */"
    },
    {
      "sha": "3997d211182cbaba142edaa67c6e64fae5e622ad",
      "filename": "gdb/tracepoint.c",
      "status": "modified",
      "additions": 15,
      "deletions": 14,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.c?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -130,7 +130,7 @@ static traceframe_info_up current_traceframe_info;\n static struct cmd_list_element *tfindlist;\n \n /* List of expressions to collect by default at each tracepoint hit.  */\n-char *default_collect;\n+std::string default_collect;\n \n static bool disconnected_tracing;\n \n@@ -146,15 +146,15 @@ static int trace_buffer_size = -1;\n \n /* Textual notes applying to the current and/or future trace runs.  */\n \n-static char *trace_user = NULL;\n+static std::string trace_user;\n \n /* Textual notes applying to the current and/or future trace runs.  */\n \n-static char *trace_notes = NULL;\n+static std::string trace_notes;\n \n /* Textual notes applying to the stopping of a trace.  */\n \n-static char *trace_stop_notes = NULL;\n+static std::string trace_stop_notes;\n \n /* support routines */\n \n@@ -1688,10 +1688,11 @@ start_tracing (const char *notes)\n   target_set_trace_buffer_size (trace_buffer_size);\n \n   if (!notes)\n-    notes = trace_notes;\n-  ret = target_set_trace_notes (trace_user, notes, NULL);\n+    notes = trace_notes.c_str ();\n \n-  if (!ret && (trace_user || notes))\n+  ret = target_set_trace_notes (trace_user.c_str (), notes, NULL);\n+\n+  if (!ret && (!trace_user.empty () || notes))\n     warning (_(\"Target does not support trace user/notes, info ignored\"));\n \n   /* Now insert traps and begin collecting data.  */\n@@ -1764,7 +1765,8 @@ stop_tracing (const char *note)\n     }\n \n   if (!note)\n-    note = trace_stop_notes;\n+    note = trace_stop_notes.c_str ();\n+\n   ret = target_set_trace_notes (NULL, NULL, note);\n \n   if (!ret && note)\n@@ -2804,10 +2806,10 @@ all_tracepoint_actions (struct breakpoint *t)\n      validation is per-tracepoint (local var \"xyz\" might be valid for\n      one tracepoint and not another, etc), we make up the action on\n      the fly, and don't cache it.  */\n-  if (*default_collect)\n+  if (!default_collect.empty ())\n     {\n       gdb::unique_xmalloc_ptr<char> default_collect_line\n-\t(xstrprintf (\"collect %s\", default_collect));\n+\t(xstrprintf (\"collect %s\", default_collect.c_str ()));\n \n       validate_actionline (default_collect_line.get (), t);\n       actions.reset (new struct command_line (simple_control,\n@@ -2896,7 +2898,7 @@ set_trace_user (const char *args, int from_tty,\n {\n   int ret;\n \n-  ret = target_set_trace_notes (trace_user, NULL, NULL);\n+  ret = target_set_trace_notes (trace_user.c_str (), NULL, NULL);\n \n   if (!ret)\n     warning (_(\"Target does not support trace notes, user ignored\"));\n@@ -2908,7 +2910,7 @@ set_trace_notes (const char *args, int from_tty,\n {\n   int ret;\n \n-  ret = target_set_trace_notes (NULL, trace_notes, NULL);\n+  ret = target_set_trace_notes (NULL, trace_notes.c_str (), NULL);\n \n   if (!ret)\n     warning (_(\"Target does not support trace notes, note ignored\"));\n@@ -2920,7 +2922,7 @@ set_trace_stop_notes (const char *args, int from_tty,\n {\n   int ret;\n \n-  ret = target_set_trace_notes (NULL, NULL, trace_stop_notes);\n+  ret = target_set_trace_notes (NULL, NULL, trace_stop_notes.c_str ());\n \n   if (!ret)\n     warning (_(\"Target does not support trace notes, stop note ignored\"));\n@@ -4137,7 +4139,6 @@ Tracepoint actions may include collecting of specified data,\\n\\\n single-stepping, or enabling/disabling other tracepoints,\\n\\\n depending on target's capabilities.\"));\n \n-  default_collect = xstrdup (\"\");\n   add_setshow_string_cmd (\"default-collect\", class_trace,\n \t\t\t  &default_collect, _(\"\\\n Set the list of expressions to collect by default.\"), _(\"\\"
    },
    {
      "sha": "a66226f93f16fec762dcc8daf91a5c0b12572dd1",
      "filename": "gdb/tracepoint.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/tracepoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0700ba44c5695d07f4cc9841315adc91ca18bf5/gdb/tracepoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.h?ref=e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "patch": "@@ -159,7 +159,7 @@ struct trace_status\n \n struct trace_status *current_trace_status (void);\n \n-extern char *default_collect;\n+extern std::string default_collect;\n \n extern int trace_regblock_size;\n "
    }
  ]
}