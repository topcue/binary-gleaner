{
  "sha": "37eedb39824dc26c82a92b5515a352d7de0c9b5b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzdlZWRiMzk4MjRkYzI2YzgyYTkyYjU1MTVhMzUyZDdkZTBjOWI1Yg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-24T16:28:42Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-05T01:55:10Z"
    },
    "message": "Make base class for parser_state\n\nThis makes a new base class, expr_builder, for parser_state.  This\nseparates the state needed to construct an expression from the state\nneeded by the parsers.\n\ngdb/ChangeLog\n2019-04-04  Tom Tromey  <tom@tromey.com>\n\n\t* gdbarch.h, gdbarch.c: Rebuild.\n\t* gdbarch.sh (dtrace_parse_probe_argument): Change type.\n\t* stap-probe.h:\n\t(struct stap_parse_info): Replace \"parser_state\" with\n\t\"expr_builder\".\n\t* parser-defs.h (struct expr_builder): Rename from \"parser_state\".\n\t(parser_state): New class.\n\t* parse.c (expr_builder): Rename.\n\t(expr_builder::release): Rename.\n\t(write_exp_elt, write_exp_elt_opcode, write_exp_elt_sym)\n\t(write_exp_elt_msym, write_exp_elt_block, write_exp_elt_objfile)\n\t(write_exp_elt_longcst, write_exp_elt_floatcst)\n\t(write_exp_elt_type, write_exp_elt_intern, write_exp_string)\n\t(write_exp_string_vector, write_exp_bitstring)\n\t(write_exp_msymbol, mark_struct_expression)\n\t(write_dollar_variable)\n\t(insert_type_address_space, increase_expout_size): Replace\n\t\"parser_state\" with \"expr_builder\".\n\t* dtrace-probe.c: Replace \"parser_state\" with \"expr_builder\".\n\t* amd64-linux-tdep.c (amd64_dtrace_parse_probe_argument): Replace\n\t\"parser_state\" with \"expr_builder\".",
    "tree": {
      "sha": "aaa2ca172270575273773089cbdcea2978e83ed1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/aaa2ca172270575273773089cbdcea2978e83ed1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/37eedb39824dc26c82a92b5515a352d7de0c9b5b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/37eedb39824dc26c82a92b5515a352d7de0c9b5b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/37eedb39824dc26c82a92b5515a352d7de0c9b5b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/37eedb39824dc26c82a92b5515a352d7de0c9b5b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "73923d7eedc7ab52144308ef7e9c12cbe4341bca",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/73923d7eedc7ab52144308ef7e9c12cbe4341bca",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/73923d7eedc7ab52144308ef7e9c12cbe4341bca"
    }
  ],
  "stats": {
    "total": 188,
    "additions": 115,
    "deletions": 73
  },
  "files": [
    {
      "sha": "49dfd207168ecc636d0336281d263ecdaafb9b63",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37eedb39824dc26c82a92b5515a352d7de0c9b5b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37eedb39824dc26c82a92b5515a352d7de0c9b5b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=37eedb39824dc26c82a92b5515a352d7de0c9b5b",
      "patch": "@@ -1,3 +1,27 @@\n+2019-04-04  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdbarch.h, gdbarch.c: Rebuild.\n+\t* gdbarch.sh (dtrace_parse_probe_argument): Change type.\n+\t* stap-probe.h: \n+\t(struct stap_parse_info): Replace \"parser_state\" with\n+\t\"expr_builder\".\n+\t* parser-defs.h (struct expr_builder): Rename from \"parser_state\".\n+\t(parser_state): New class.\n+\t* parse.c (expr_builder): Rename.\n+\t(expr_builder::release): Rename.\n+\t(write_exp_elt, write_exp_elt_opcode, write_exp_elt_sym)\n+\t(write_exp_elt_msym, write_exp_elt_block, write_exp_elt_objfile)\n+\t(write_exp_elt_longcst, write_exp_elt_floatcst)\n+\t(write_exp_elt_type, write_exp_elt_intern, write_exp_string)\n+\t(write_exp_string_vector, write_exp_bitstring)\n+\t(write_exp_msymbol, mark_struct_expression)\n+\t(write_dollar_variable)\n+\t(insert_type_address_space, increase_expout_size): Replace\n+\t\"parser_state\" with \"expr_builder\".\n+\t* dtrace-probe.c: Replace \"parser_state\" with \"expr_builder\".\n+\t* amd64-linux-tdep.c (amd64_dtrace_parse_probe_argument): Replace\n+\t\"parser_state\" with \"expr_builder\".\n+\n 2019-04-04  Tom Tromey  <tom@tromey.com>\n \n \t* rust-exp.y: Replace \"parse_language\" with method call."
    },
    {
      "sha": "5475cf629f353b8445e18c9cb8d929046621fc6e",
      "filename": "gdb/amd64-linux-tdep.c",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37eedb39824dc26c82a92b5515a352d7de0c9b5b/gdb/amd64-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37eedb39824dc26c82a92b5515a352d7de0c9b5b/gdb/amd64-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-linux-tdep.c?ref=37eedb39824dc26c82a92b5515a352d7de0c9b5b",
      "patch": "@@ -1735,7 +1735,7 @@ amd64_dtrace_disable_probe (struct gdbarch *gdbarch, CORE_ADDR addr)\n \n static void\n amd64_dtrace_parse_probe_argument (struct gdbarch *gdbarch,\n-\t\t\t\t   struct parser_state *pstate,\n+\t\t\t\t   struct expr_builder *builder,\n \t\t\t\t   int narg)\n {\n   struct stoken str;\n@@ -1758,39 +1758,39 @@ amd64_dtrace_parse_probe_argument (struct gdbarch *gdbarch,\n       int regno = arg_reg_map[narg];\n       const char *regname = user_reg_map_regnum_to_name (gdbarch, regno);\n \n-      write_exp_elt_opcode (pstate, OP_REGISTER);\n+      write_exp_elt_opcode (builder, OP_REGISTER);\n       str.ptr = regname;\n       str.length = strlen (regname);\n-      write_exp_string (pstate, str);\n-      write_exp_elt_opcode (pstate, OP_REGISTER);\n+      write_exp_string (builder, str);\n+      write_exp_elt_opcode (builder, OP_REGISTER);\n     }\n   else\n     {\n       /* Additional arguments are passed on the stack.  */\n       const char *regname = user_reg_map_regnum_to_name (gdbarch, AMD64_RSP_REGNUM);\n \n       /* Displacement.  */\n-      write_exp_elt_opcode (pstate, OP_LONG);\n-      write_exp_elt_type (pstate, builtin_type (gdbarch)->builtin_long);\n-      write_exp_elt_longcst (pstate, narg - 6);\n-      write_exp_elt_opcode (pstate, OP_LONG);\n+      write_exp_elt_opcode (builder, OP_LONG);\n+      write_exp_elt_type (builder, builtin_type (gdbarch)->builtin_long);\n+      write_exp_elt_longcst (builder, narg - 6);\n+      write_exp_elt_opcode (builder, OP_LONG);\n \n       /* Register: SP.  */\n-      write_exp_elt_opcode (pstate, OP_REGISTER);\n+      write_exp_elt_opcode (builder, OP_REGISTER);\n       str.ptr = regname;\n       str.length = strlen (regname);\n-      write_exp_string (pstate, str);\n-      write_exp_elt_opcode (pstate, OP_REGISTER);\n+      write_exp_string (builder, str);\n+      write_exp_elt_opcode (builder, OP_REGISTER);\n \n-      write_exp_elt_opcode (pstate, BINOP_ADD);\n+      write_exp_elt_opcode (builder, BINOP_ADD);\n \n       /* Cast to long. */\n-      write_exp_elt_opcode (pstate, UNOP_CAST);\n-      write_exp_elt_type (pstate,\n+      write_exp_elt_opcode (builder, UNOP_CAST);\n+      write_exp_elt_type (builder,\n \t\t\t  lookup_pointer_type (builtin_type (gdbarch)->builtin_long));\n-      write_exp_elt_opcode (pstate, UNOP_CAST);\n+      write_exp_elt_opcode (builder, UNOP_CAST);\n \n-      write_exp_elt_opcode (pstate, UNOP_IND);\n+      write_exp_elt_opcode (builder, UNOP_IND);\n     }\n }\n "
    },
    {
      "sha": "bd5cddcf804c9dcb745b5a836dcd386f7298ec90",
      "filename": "gdb/dtrace-probe.c",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37eedb39824dc26c82a92b5515a352d7de0c9b5b/gdb/dtrace-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37eedb39824dc26c82a92b5515a352d7de0c9b5b/gdb/dtrace-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dtrace-probe.c?ref=37eedb39824dc26c82a92b5515a352d7de0c9b5b",
      "patch": "@@ -624,26 +624,25 @@ dtrace_probe::build_arg_exprs (struct gdbarch *gdbarch)\n      value of the argument when executed at the PC of the probe.  */\n   for (dtrace_probe_arg &arg : m_args)\n     {\n-      /* Initialize the expression buffer in the parser state.  The\n-\t language does not matter, since we are using our own\n-\t parser.  */\n-      parser_state pstate (current_language, gdbarch);\n+      /* Initialize the expression builder.  The language does not\n+\t matter, since we are using our own parser.  */\n+      expr_builder builder (current_language, gdbarch);\n \n       /* The argument value, which is ABI dependent and casted to\n \t `long int'.  */\n-      gdbarch_dtrace_parse_probe_argument (gdbarch, &pstate, argc);\n+      gdbarch_dtrace_parse_probe_argument (gdbarch, &builder, argc);\n \n       /* Casting to the expected type, but only if the type was\n \t recognized at probe load time.  Otherwise the argument will\n \t be evaluated as the long integer passed to the probe.  */\n       if (arg.type != NULL)\n \t{\n-\t  write_exp_elt_opcode (&pstate, UNOP_CAST);\n-\t  write_exp_elt_type (&pstate, arg.type);\n-\t  write_exp_elt_opcode (&pstate, UNOP_CAST);\n+\t  write_exp_elt_opcode (&builder, UNOP_CAST);\n+\t  write_exp_elt_type (&builder, arg.type);\n+\t  write_exp_elt_opcode (&builder, UNOP_CAST);\n \t}\n \n-      arg.expr = pstate.release ();\n+      arg.expr = builder.release ();\n       prefixify_expression (arg.expr.get ());\n       ++argc;\n     }"
    },
    {
      "sha": "a0c169d74d44874a45fe880d848c8ce2f70e8cbb",
      "filename": "gdb/gdbarch.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37eedb39824dc26c82a92b5515a352d7de0c9b5b/gdb/gdbarch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37eedb39824dc26c82a92b5515a352d7de0c9b5b/gdb/gdbarch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.c?ref=37eedb39824dc26c82a92b5515a352d7de0c9b5b",
      "patch": "@@ -4523,13 +4523,13 @@ gdbarch_dtrace_parse_probe_argument_p (struct gdbarch *gdbarch)\n }\n \n void\n-gdbarch_dtrace_parse_probe_argument (struct gdbarch *gdbarch, struct parser_state *pstate, int narg)\n+gdbarch_dtrace_parse_probe_argument (struct gdbarch *gdbarch, struct expr_builder *builder, int narg)\n {\n   gdb_assert (gdbarch != NULL);\n   gdb_assert (gdbarch->dtrace_parse_probe_argument != NULL);\n   if (gdbarch_debug >= 2)\n     fprintf_unfiltered (gdb_stdlog, \"gdbarch_dtrace_parse_probe_argument called\\n\");\n-  gdbarch->dtrace_parse_probe_argument (gdbarch, pstate, narg);\n+  gdbarch->dtrace_parse_probe_argument (gdbarch, builder, narg);\n }\n \n void"
    },
    {
      "sha": "7ebd365a31e471a29de73bf7405fce4b5ae0f3a8",
      "filename": "gdb/gdbarch.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37eedb39824dc26c82a92b5515a352d7de0c9b5b/gdb/gdbarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37eedb39824dc26c82a92b5515a352d7de0c9b5b/gdb/gdbarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.h?ref=37eedb39824dc26c82a92b5515a352d7de0c9b5b",
      "patch": "@@ -60,7 +60,7 @@ struct syscall;\n struct agent_expr;\n struct axs_value;\n struct stap_parse_info;\n-struct parser_state;\n+struct expr_builder;\n struct ravenscar_arch_ops;\n struct mem_range;\n struct syscalls_info;\n@@ -1356,8 +1356,8 @@ extern void set_gdbarch_stap_parse_special_token (struct gdbarch *gdbarch, gdbar\n \n extern int gdbarch_dtrace_parse_probe_argument_p (struct gdbarch *gdbarch);\n \n-typedef void (gdbarch_dtrace_parse_probe_argument_ftype) (struct gdbarch *gdbarch, struct parser_state *pstate, int narg);\n-extern void gdbarch_dtrace_parse_probe_argument (struct gdbarch *gdbarch, struct parser_state *pstate, int narg);\n+typedef void (gdbarch_dtrace_parse_probe_argument_ftype) (struct gdbarch *gdbarch, struct expr_builder *builder, int narg);\n+extern void gdbarch_dtrace_parse_probe_argument (struct gdbarch *gdbarch, struct expr_builder *builder, int narg);\n extern void set_gdbarch_dtrace_parse_probe_argument (struct gdbarch *gdbarch, gdbarch_dtrace_parse_probe_argument_ftype *dtrace_parse_probe_argument);\n \n /* True if the given ADDR does not contain the instruction sequence"
    },
    {
      "sha": "59493d8c21512b2b85d10cf80c000b91057b1760",
      "filename": "gdb/gdbarch.sh",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37eedb39824dc26c82a92b5515a352d7de0c9b5b/gdb/gdbarch.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37eedb39824dc26c82a92b5515a352d7de0c9b5b/gdb/gdbarch.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.sh?ref=37eedb39824dc26c82a92b5515a352d7de0c9b5b",
      "patch": "@@ -1034,7 +1034,7 @@ M;int;stap_parse_special_token;struct stap_parse_info *p;p\n \n # The expression to compute the NARTGth+1 argument to a DTrace USDT probe.\n # NARG must be >= 0.\n-M;void;dtrace_parse_probe_argument;struct parser_state *pstate, int narg;pstate, narg\n+M;void;dtrace_parse_probe_argument;struct expr_builder *builder, int narg;builder, narg\n \n # True if the given ADDR does not contain the instruction sequence\n # corresponding to a disabled DTrace is-enabled probe.\n@@ -1305,7 +1305,7 @@ struct syscall;\n struct agent_expr;\n struct axs_value;\n struct stap_parse_info;\n-struct parser_state;\n+struct expr_builder;\n struct ravenscar_arch_ops;\n struct mem_range;\n struct syscalls_info;"
    },
    {
      "sha": "c4c35176915acd7c3ede21378c8518a2dad3ef18",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 21,
      "deletions": 21,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37eedb39824dc26c82a92b5515a352d7de0c9b5b/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37eedb39824dc26c82a92b5515a352d7de0c9b5b/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=37eedb39824dc26c82a92b5515a352d7de0c9b5b",
      "patch": "@@ -119,7 +119,7 @@ static expression_up parse_exp_in_context (const char **, CORE_ADDR,\n \t\t\t\t\t   int, int *,\n \t\t\t\t\t   innermost_block_tracker_types);\n \n-static void increase_expout_size (struct parser_state *ps, size_t lenelt);\n+static void increase_expout_size (struct expr_builder *ps, size_t lenelt);\n \n \n /* Documented at it's declaration.  */\n@@ -165,7 +165,7 @@ end_arglist (void)\n \n /* See definition in parser-defs.h.  */\n \n-parser_state::parser_state (const struct language_defn *lang,\n+expr_builder::expr_builder (const struct language_defn *lang,\n \t\t\t    struct gdbarch *gdbarch)\n   : expout_size (10),\n     expout (XNEWVAR (expression,\n@@ -178,7 +178,7 @@ parser_state::parser_state (const struct language_defn *lang,\n }\n \n expression_up\n-parser_state::release ()\n+expr_builder::release ()\n {\n   /* Record the actual number of expression elements, and then\n      reallocate the expression memory so that we free up any\n@@ -201,7 +201,7 @@ parser_state::release ()\n    a register through here.  */\n \n static void\n-write_exp_elt (struct parser_state *ps, const union exp_element *expelt)\n+write_exp_elt (struct expr_builder *ps, const union exp_element *expelt)\n {\n   if (ps->expout_ptr >= ps->expout_size)\n     {\n@@ -214,7 +214,7 @@ write_exp_elt (struct parser_state *ps, const union exp_element *expelt)\n }\n \n void\n-write_exp_elt_opcode (struct parser_state *ps, enum exp_opcode expelt)\n+write_exp_elt_opcode (struct expr_builder *ps, enum exp_opcode expelt)\n {\n   union exp_element tmp;\n \n@@ -224,7 +224,7 @@ write_exp_elt_opcode (struct parser_state *ps, enum exp_opcode expelt)\n }\n \n void\n-write_exp_elt_sym (struct parser_state *ps, struct symbol *expelt)\n+write_exp_elt_sym (struct expr_builder *ps, struct symbol *expelt)\n {\n   union exp_element tmp;\n \n@@ -234,7 +234,7 @@ write_exp_elt_sym (struct parser_state *ps, struct symbol *expelt)\n }\n \n void\n-write_exp_elt_msym (struct parser_state *ps, minimal_symbol *expelt)\n+write_exp_elt_msym (struct expr_builder *ps, minimal_symbol *expelt)\n {\n   union exp_element tmp;\n \n@@ -244,7 +244,7 @@ write_exp_elt_msym (struct parser_state *ps, minimal_symbol *expelt)\n }\n \n void\n-write_exp_elt_block (struct parser_state *ps, const struct block *b)\n+write_exp_elt_block (struct expr_builder *ps, const struct block *b)\n {\n   union exp_element tmp;\n \n@@ -254,7 +254,7 @@ write_exp_elt_block (struct parser_state *ps, const struct block *b)\n }\n \n void\n-write_exp_elt_objfile (struct parser_state *ps, struct objfile *objfile)\n+write_exp_elt_objfile (struct expr_builder *ps, struct objfile *objfile)\n {\n   union exp_element tmp;\n \n@@ -264,7 +264,7 @@ write_exp_elt_objfile (struct parser_state *ps, struct objfile *objfile)\n }\n \n void\n-write_exp_elt_longcst (struct parser_state *ps, LONGEST expelt)\n+write_exp_elt_longcst (struct expr_builder *ps, LONGEST expelt)\n {\n   union exp_element tmp;\n \n@@ -274,7 +274,7 @@ write_exp_elt_longcst (struct parser_state *ps, LONGEST expelt)\n }\n \n void\n-write_exp_elt_floatcst (struct parser_state *ps, const gdb_byte expelt[16])\n+write_exp_elt_floatcst (struct expr_builder *ps, const gdb_byte expelt[16])\n {\n   union exp_element tmp;\n   int index;\n@@ -286,7 +286,7 @@ write_exp_elt_floatcst (struct parser_state *ps, const gdb_byte expelt[16])\n }\n \n void\n-write_exp_elt_type (struct parser_state *ps, struct type *expelt)\n+write_exp_elt_type (struct expr_builder *ps, struct type *expelt)\n {\n   union exp_element tmp;\n \n@@ -296,7 +296,7 @@ write_exp_elt_type (struct parser_state *ps, struct type *expelt)\n }\n \n void\n-write_exp_elt_intern (struct parser_state *ps, struct internalvar *expelt)\n+write_exp_elt_intern (struct expr_builder *ps, struct internalvar *expelt)\n {\n   union exp_element tmp;\n \n@@ -327,7 +327,7 @@ write_exp_elt_intern (struct parser_state *ps, struct internalvar *expelt)\n \n \n void\n-write_exp_string (struct parser_state *ps, struct stoken str)\n+write_exp_string (struct expr_builder *ps, struct stoken str)\n {\n   int len = str.length;\n   size_t lenelt;\n@@ -369,7 +369,7 @@ write_exp_string (struct parser_state *ps, struct stoken str)\n    long constant, followed by the contents of the string.  */\n \n void\n-write_exp_string_vector (struct parser_state *ps, int type,\n+write_exp_string_vector (struct expr_builder *ps, int type,\n \t\t\t struct stoken_vector *vec)\n {\n   int i, len;\n@@ -422,7 +422,7 @@ write_exp_string_vector (struct parser_state *ps, int type,\n    either end of the bitstring.  */\n \n void\n-write_exp_bitstring (struct parser_state *ps, struct stoken str)\n+write_exp_bitstring (struct expr_builder *ps, struct stoken str)\n {\n   int bits = str.length;\t/* length in bits */\n   int len = (bits + HOST_CHAR_BIT - 1) / HOST_CHAR_BIT;\n@@ -532,7 +532,7 @@ find_minsym_type_and_address (minimal_symbol *msymbol,\n    the expression.  */\n \n void\n-write_exp_msymbol (struct parser_state *ps,\n+write_exp_msymbol (struct expr_builder *ps,\n \t\t   struct bound_minimal_symbol bound_msym)\n {\n   write_exp_elt_opcode (ps, OP_VAR_MSYM_VALUE);\n@@ -545,7 +545,7 @@ write_exp_msymbol (struct parser_state *ps,\n    expression.  This is used when completing on field names.  */\n \n void\n-mark_struct_expression (struct parser_state *ps)\n+mark_struct_expression (struct expr_builder *ps)\n {\n   gdb_assert (parse_completion\n \t      && expout_tag_completion_type == TYPE_CODE_UNDEF);\n@@ -593,7 +593,7 @@ mark_completion_tag (enum type_code tag, const char *ptr, int length)\n    value in the value history, I.e. $$1  */\n \n void\n-write_dollar_variable (struct parser_state *ps, struct stoken str)\n+write_dollar_variable (struct expr_builder *ps, struct stoken str)\n {\n   struct block_symbol sym;\n   struct bound_minimal_symbol msym;\n@@ -1405,7 +1405,7 @@ push_type_int (int n)\n    item.  */\n \n void\n-insert_type_address_space (struct parser_state *pstate, char *string)\n+insert_type_address_space (struct expr_builder *pstate, char *string)\n {\n   union type_stack_elt element;\n   int slot;\n@@ -1829,7 +1829,7 @@ exp_uses_objfile (struct expression *exp, struct objfile *objfile)\n    there is enough room for the elements.  */\n \n static void\n-increase_expout_size (struct parser_state *ps, size_t lenelt)\n+increase_expout_size (struct expr_builder *ps, size_t lenelt)\n {\n   if ((ps->expout_ptr + lenelt) >= ps->expout_size)\n     {"
    },
    {
      "sha": "5bc9d253d48cf68e7476da64f84f94907642ea3b",
      "filename": "gdb/parser-defs.h",
      "status": "modified",
      "additions": 38,
      "deletions": 18,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37eedb39824dc26c82a92b5515a352d7de0c9b5b/gdb/parser-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37eedb39824dc26c82a92b5515a352d7de0c9b5b/gdb/parser-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parser-defs.h?ref=37eedb39824dc26c82a92b5515a352d7de0c9b5b",
      "patch": "@@ -32,15 +32,17 @@ struct internalvar;\n \n extern int parser_debug;\n \n-struct parser_state\n+/* A class that can be used to build a \"struct expression\".  */\n+\n+struct expr_builder\n {\n   /* Constructor.  LANG is the language used to parse the expression.\n      And GDBARCH is the gdbarch to use during parsing.  */\n \n-  parser_state (const struct language_defn *lang,\n+  expr_builder (const struct language_defn *lang,\n \t\tstruct gdbarch *gdbarch);\n \n-  DISABLE_COPY_AND_ASSIGN (parser_state);\n+  DISABLE_COPY_AND_ASSIGN (expr_builder);\n \n   /* Resize the allocated expression to the correct size, and return\n      it as an expression_up -- passing ownership to the caller.  */\n@@ -74,6 +76,24 @@ struct parser_state\n   size_t expout_ptr;\n };\n \n+/* An instance of this type is instantiated during expression parsing,\n+   and passed to the appropriate parser.  It holds both inputs to the\n+   parser, and result.  */\n+\n+struct parser_state : public expr_builder\n+{\n+  /* Constructor.  LANG is the language used to parse the expression.\n+     And GDBARCH is the gdbarch to use during parsing.  */\n+\n+  parser_state (const struct language_defn *lang,\n+\t\tstruct gdbarch *gdbarch)\n+    : expr_builder (lang, gdbarch)\n+  {\n+  }\n+\n+  DISABLE_COPY_AND_ASSIGN (parser_state);\n+};\n+\n /* If this is nonzero, this block is used as the lexical context\n    for symbol names.  */\n \n@@ -236,36 +256,36 @@ struct type_stack\n \n extern int prefixify_expression (struct expression *expr);\n \n-extern void write_exp_elt_opcode (struct parser_state *, enum exp_opcode);\n+extern void write_exp_elt_opcode (struct expr_builder *, enum exp_opcode);\n \n-extern void write_exp_elt_sym (struct parser_state *, struct symbol *);\n+extern void write_exp_elt_sym (struct expr_builder *, struct symbol *);\n \n-extern void write_exp_elt_longcst (struct parser_state *, LONGEST);\n+extern void write_exp_elt_longcst (struct expr_builder *, LONGEST);\n \n-extern void write_exp_elt_floatcst (struct parser_state *, const gdb_byte *);\n+extern void write_exp_elt_floatcst (struct expr_builder *, const gdb_byte *);\n \n-extern void write_exp_elt_type (struct parser_state *, struct type *);\n+extern void write_exp_elt_type (struct expr_builder *, struct type *);\n \n-extern void write_exp_elt_intern (struct parser_state *, struct internalvar *);\n+extern void write_exp_elt_intern (struct expr_builder *, struct internalvar *);\n \n-extern void write_exp_string (struct parser_state *, struct stoken);\n+extern void write_exp_string (struct expr_builder *, struct stoken);\n \n-void write_exp_string_vector (struct parser_state *, int type,\n+void write_exp_string_vector (struct expr_builder *, int type,\n \t\t\t      struct stoken_vector *vec);\n \n-extern void write_exp_bitstring (struct parser_state *, struct stoken);\n+extern void write_exp_bitstring (struct expr_builder *, struct stoken);\n \n-extern void write_exp_elt_block (struct parser_state *, const struct block *);\n+extern void write_exp_elt_block (struct expr_builder *, const struct block *);\n \n-extern void write_exp_elt_objfile (struct parser_state *,\n+extern void write_exp_elt_objfile (struct expr_builder *,\n \t\t\t\t   struct objfile *objfile);\n \n-extern void write_exp_msymbol (struct parser_state *,\n+extern void write_exp_msymbol (struct expr_builder *,\n \t\t\t       struct bound_minimal_symbol);\n \n-extern void write_dollar_variable (struct parser_state *, struct stoken str);\n+extern void write_dollar_variable (struct expr_builder *, struct stoken str);\n \n-extern void mark_struct_expression (struct parser_state *);\n+extern void mark_struct_expression (struct expr_builder *);\n \n extern const char *find_template_name_end (const char *);\n \n@@ -281,7 +301,7 @@ extern void push_type (enum type_pieces);\n \n extern void push_type_int (int);\n \n-extern void insert_type_address_space (struct parser_state *, char *);\n+extern void insert_type_address_space (struct expr_builder *, char *);\n \n extern enum type_pieces pop_type (void);\n "
    },
    {
      "sha": "d5199d9a24553067a5beec22a0d34ff5faf9cc6a",
      "filename": "gdb/stap-probe.h",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37eedb39824dc26c82a92b5515a352d7de0c9b5b/gdb/stap-probe.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37eedb39824dc26c82a92b5515a352d7de0c9b5b/gdb/stap-probe.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stap-probe.h?ref=37eedb39824dc26c82a92b5515a352d7de0c9b5b",
      "patch": "@@ -20,7 +20,6 @@\n #if !defined (STAP_PROBE_H)\n #define STAP_PROBE_H 1\n \n-/* For `struct parser_state'.  */\n #include \"parser-defs.h\"\n \n /* Structure which holds information about the parsing process of one probe's\n@@ -46,7 +45,7 @@ struct stap_parse_info\n   const char *arg;\n \n   /* The parser state to be used when generating the expression.  */\n-  struct parser_state pstate;\n+  struct expr_builder pstate;\n \n   /* A pointer to the full chain of arguments.  This is useful for printing\n      error messages.  The parser functions should not modify this argument"
    }
  ]
}