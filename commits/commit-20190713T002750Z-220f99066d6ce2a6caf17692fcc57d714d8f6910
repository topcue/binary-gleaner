{
  "sha": "220f99066d6ce2a6caf17692fcc57d714d8f6910",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjIwZjk5MDY2ZDZjZTJhNmNhZjE3NjkyZmNjNTdkNzE0ZDhmNjkxMA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-01T05:07:49Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-13T00:27:50Z"
    },
    "message": "[GOLD] PowerPC notoc eh_frame\n\nWhen generating notoc call and branch stubs without the benefit of\npc-relative insns, the stubs need to use LR to access the run time PC.\nAll LR changes must be described in .eh_frame if we're to support\nunwinding through asynchronous exceptions.  That's what this patch\ndoes.\n\nThe patch has gone through way too many iterations.  At first I\nattempted to add multiple FDEs, one for each stub.  That ran into\ndifficulties with do_plt_fde_location which is only capable of setting\nthe address of a single FDE per Output_data section, and with removing\nany FDEs added on a previous do_relax pass.  Removing FDEs (git commit\nbe897fb774) went overboard in matching the FDE contents.  That means\neither stashing the contents created for add_eh_frame_for_plt to use\nwhen calling remove_eh_frame_for_plt, or recreating contents on the\nfly (*) just to remove FDEs.  In fact, FDE content matching is quite\nunnecesary.  FDEs added by a previous do_relax pass are those with\nu_.from_linker.post_map set.  So they can easily be recognised just by\nlooking at that flag.  This patch keeps that part of the multiple FDE\nchanges.\n\nIn the end I went for just one FDE per stub group to describe the call\nstubs.  That's reasonably efficient for the common case of only\nneeding to describe the __tls_get_addr_opt call stub.  We don't expect\nto be making many calls using notoc stubs without pc-relative insns.\n\n*) Which has it's own set of problems.  The contents must be recreated\nusing the old stub layout, but .eh_frame size can affect stub\nrequirements so you need to temporarily keep the old .eh_frame size\nwhen creating new stubs, then reset .eh_frame size before adding new\nFDEs.\n\n\t* ehframe.cc (Fde::operator==): Delete.\n\t(Cie::remove_fde): Delete.\n\t(Eh_frame::remove_ehframe_for_plt): Delete fde_data and fde_length\n\tparameters.  Remove all post-map plt FDEs.\n\t* ehframe.h (Fde:post_map): Make const, add variant to compare plt.\n\t(Fde::operator==): Delete.\n\t(Cie::remove_fde): Implement here.\n\t(Cie::last_fde): New accessor.\n\t(Eh_frame::remove_ehframe_for_plt): Update prototype.\n\t* layout.cc (Layout::remove_eh_frame_for_plt): Delete fde_data and\n\tfde_length parameters.\n\t* layout.h (Layout::remove_eh_frame_for_plt): Update prototype.\n\t* powerpc.cc (Stub_table::tls_get_addr_opt_bctrl_): Delete.\n\t(Stub_table::plt_fde_len_, plt_fde_, init_plt_fde): Delete.\n\t(Stub_table::add_plt_call_entry): Don't set tls_get_addr_opt_bctrl_.\n\t(eh_advance): New function.\n\t(stub_sort): New function.\n\t(Stub_table::add_eh_frame): Emit eh_frame for notoc plt calls and\n\tbranches as well as __tls_get_addr_opt plt call stub.\n\t(Stub_table::remove_eh_frame): Update to suit.",
    "tree": {
      "sha": "81dbd577f8116359ab582788dd808abaf08da32a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/81dbd577f8116359ab582788dd808abaf08da32a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/220f99066d6ce2a6caf17692fcc57d714d8f6910",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/220f99066d6ce2a6caf17692fcc57d714d8f6910",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/220f99066d6ce2a6caf17692fcc57d714d8f6910",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/220f99066d6ce2a6caf17692fcc57d714d8f6910/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "32f598441988e5a086ba8580e82f4944c3692eb5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32f598441988e5a086ba8580e82f4944c3692eb5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/32f598441988e5a086ba8580e82f4944c3692eb5"
    }
  ],
  "stats": {
    "total": 307,
    "additions": 190,
    "deletions": 117
  },
  "files": [
    {
      "sha": "355ffc56dfd67c7ce340ee3739493dfaf94c18cf",
      "filename": "gold/ChangeLog",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/220f99066d6ce2a6caf17692fcc57d714d8f6910/gold/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/220f99066d6ce2a6caf17692fcc57d714d8f6910/gold/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/ChangeLog?ref=220f99066d6ce2a6caf17692fcc57d714d8f6910",
      "patch": "@@ -1,3 +1,26 @@\n+2019-07-13  Alan Modra  <amodra@gmail.com>\n+\n+\t* ehframe.cc (Fde::operator==): Delete.\n+\t(Cie::remove_fde): Delete.\n+\t(Eh_frame::remove_ehframe_for_plt): Delete fde_data and fde_length\n+\tparameters.  Remove all post-map plt FDEs.\n+\t* ehframe.h (Fde:post_map): Make const, add variant to compare plt.\n+\t(Fde::operator==): Delete.\n+\t(Cie::remove_fde): Implement here.\n+\t(Cie::last_fde): New accessor.\n+\t(Eh_frame::remove_ehframe_for_plt): Update prototype.\n+\t* layout.cc (Layout::remove_eh_frame_for_plt): Delete fde_data and\n+\tfde_length parameters.\n+\t* layout.h (Layout::remove_eh_frame_for_plt): Update prototype.\n+\t* powerpc.cc (Stub_table::tls_get_addr_opt_bctrl_): Delete.\n+\t(Stub_table::plt_fde_len_, plt_fde_, init_plt_fde): Delete.\n+\t(Stub_table::add_plt_call_entry): Don't set tls_get_addr_opt_bctrl_.\n+\t(eh_advance): New function.\n+\t(stub_sort): New function.\n+\t(Stub_table::add_eh_frame): Emit eh_frame for notoc plt calls and\n+\tbranches as well as __tls_get_addr_opt plt call stub.\n+\t(Stub_table::remove_eh_frame): Update to suit.\n+\n 2019-07-13  Alan Modra  <amodra@gmail.com>\n \n \t* powerpc.cc (Target_powerpc::maybe_skip_tls_get_addr_call): Handle"
    },
    {
      "sha": "51490e0e908477b4d0f1eda0e225c92cb360a5c7",
      "filename": "gold/ehframe.cc",
      "status": "modified",
      "additions": 14,
      "deletions": 33,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/220f99066d6ce2a6caf17692fcc57d714d8f6910/gold/ehframe.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/220f99066d6ce2a6caf17692fcc57d714d8f6910/gold/ehframe.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/ehframe.cc?ref=220f99066d6ce2a6caf17692fcc57d714d8f6910",
      "patch": "@@ -325,21 +325,6 @@ Eh_frame_hdr::get_fde_addresses(Output_file* of,\n \n // Class Fde.\n \n-bool\n-Fde::operator==(const Fde& that) const\n-{\n-  if (this->object_ != that.object_\n-      || this->contents_ != that.contents_)\n-    return false;\n-  if (this->object_ == NULL)\n-    return (this->u_.from_linker.plt == that.u_.from_linker.plt\n-\t    && this->u_.from_linker.post_map == that.u_.from_linker.post_map);\n-  else\n-    return (this->u_.from_object.shndx == that.u_.from_object.shndx\n-\t    && (this->u_.from_object.input_offset\n-\t\t== that.u_.from_object.input_offset));\n-}\n-\n // Write the FDE to OVIEW starting at OFFSET.  CIE_OFFSET is the\n // offset of the CIE in OVIEW.  OUTPUT_OFFSET is the offset of the\n // Eh_frame section within the output section.  FDE_ENCODING is the\n@@ -458,15 +443,6 @@ Cie::set_output_offset(section_offset_type output_offset,\n   return output_offset + length;\n }\n \n-// Remove FDE.  Only the last FDE using this CIE may be removed.\n-\n-void\n-Cie::remove_fde(const Fde* fde)\n-{\n-  gold_assert(*fde == *this->fdes_.back());\n-  this->fdes_.pop_back();\n-}\n-\n // Write the CIE to OVIEW starting at OFFSET.  OUTPUT_OFFSET is the\n // offset of the Eh_frame section within the output section.  Round up\n // the bytes to ADDRALIGN.  ADDRESS is the virtual address of OVIEW.\n@@ -1167,26 +1143,31 @@ Eh_frame::add_ehframe_for_plt(Output_data* plt, const unsigned char* cie_data,\n     this->final_data_size_ += align_address(fde_length + 8, this->addralign());\n }\n \n-// Remove unwind information for a PLT.  Only the last FDE added may be removed.\n+// Remove all post-map unwind information for a PLT.\n \n void\n Eh_frame::remove_ehframe_for_plt(Output_data* plt,\n \t\t\t\t const unsigned char* cie_data,\n-\t\t\t\t size_t cie_length,\n-\t\t\t\t const unsigned char* fde_data,\n-\t\t\t\t size_t fde_length)\n+\t\t\t\t size_t cie_length)\n {\n+  if (!this->mappings_are_done_)\n+    return;\n+\n   Cie cie(NULL, 0, 0, elfcpp::DW_EH_PE_pcrel | elfcpp::DW_EH_PE_sdata4, \"\",\n \t  cie_data, cie_length);\n   Cie_offsets::iterator find_cie = this->cie_offsets_.find(&cie);\n   gold_assert (find_cie != this->cie_offsets_.end());\n   Cie* pcie = *find_cie;\n \n-  Fde* fde = new Fde(plt, fde_data, fde_length, this->mappings_are_done_);\n-  pcie->remove_fde(fde);\n-\n-  if (this->mappings_are_done_)\n-    this->final_data_size_ -= align_address(fde_length + 8, this->addralign());\n+  while (pcie->fde_count() != 0)\n+    {\n+      const Fde* fde = pcie->last_fde();\n+      if (!fde->post_map(plt))\n+\tbreak;\n+      size_t length = fde->length();\n+      this->final_data_size_ -= align_address(length + 8, this->addralign());\n+      pcie->remove_fde();\n+    }\n }\n \n // Return the number of FDEs."
    },
    {
      "sha": "4fd8f3e2f68885c3fc7325788c0e01d4c53dca5c",
      "filename": "gold/ehframe.h",
      "status": "modified",
      "additions": 16,
      "deletions": 9,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/220f99066d6ce2a6caf17692fcc57d714d8f6910/gold/ehframe.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/220f99066d6ce2a6caf17692fcc57d714d8f6910/gold/ehframe.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/ehframe.h?ref=220f99066d6ce2a6caf17692fcc57d714d8f6910",
      "patch": "@@ -203,9 +203,14 @@ class Fde\n \n   // Return whether this FDE was added after merge mapping.\n   bool\n-  post_map()\n+  post_map() const\n   { return this->object_ == NULL && this->u_.from_linker.post_map; }\n \n+  // Return whether this FDE was added for the PLT after merge mapping.\n+  bool\n+  post_map(const Output_data* plt) const\n+  { return this->post_map() && this->u_.from_linker.plt == plt; }\n+\n   // Write the FDE to OVIEW starting at OFFSET.  FDE_ENCODING is the\n   // encoding, from the CIE.  Round up the bytes to ADDRALIGN if\n   // necessary.  ADDRESS is the virtual address of OVIEW.  Record the\n@@ -217,8 +222,6 @@ class Fde\n \tsection_offset_type cie_offset, unsigned char fde_encoding,\n \tEh_frame_hdr* eh_frame_hdr);\n \n-  bool operator==(const Fde&) const;\n-\n  private:\n   // The object in which this FDE was seen.  This will be NULL for a\n   // linker generated FDE.\n@@ -300,9 +303,15 @@ class Cie\n   add_fde(Fde* fde)\n   { this->fdes_.push_back(fde); }\n \n-  // Remove an FDE associated with this CIE.  Only the last FDE may be removed.\n+  // Remove the last FDE associated with this CIE.\n   void\n-  remove_fde(const Fde*);\n+  remove_fde()\n+  { this->fdes_.pop_back(); }\n+\n+  // Access the last FDE associated with this CIE.\n+  const Fde*\n+  last_fde() const\n+  { return this->fdes_.back(); }\n \n   // Return the number of FDEs.\n   unsigned int\n@@ -411,12 +420,10 @@ class Eh_frame : public Output_section_data\n \t\t      size_t cie_length, const unsigned char* fde_data,\n \t\t      size_t fde_length);\n \n-  // Remove unwind information for a PLT.  Only the last FDE added may\n-  // be removed.\n+  // Remove all post-map unwind information for a PLT.\n   void\n   remove_ehframe_for_plt(Output_data* plt, const unsigned char* cie_data,\n-\t\t\t size_t cie_length, const unsigned char* fde_data,\n-\t\t\t size_t fde_length);\n+\t\t\t size_t cie_length);\n \n   // Return the number of FDEs.\n   unsigned int"
    },
    {
      "sha": "fc7cdf8b8bbef679fbb3a664887d839cbc7e7cad",
      "filename": "gold/layout.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/220f99066d6ce2a6caf17692fcc57d714d8f6910/gold/layout.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/220f99066d6ce2a6caf17692fcc57d714d8f6910/gold/layout.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/layout.cc?ref=220f99066d6ce2a6caf17692fcc57d714d8f6910",
      "patch": "@@ -1604,21 +1604,18 @@ Layout::add_eh_frame_for_plt(Output_data* plt, const unsigned char* cie_data,\n     }\n }\n \n-// Remove .eh_frame information for a PLT.  FDEs using the CIE must\n-// be removed in reverse order to the order they were added.\n+// Remove all post-map .eh_frame information for a PLT.\n \n void\n Layout::remove_eh_frame_for_plt(Output_data* plt, const unsigned char* cie_data,\n-\t\t\t\tsize_t cie_length, const unsigned char* fde_data,\n-\t\t\t\tsize_t fde_length)\n+\t\t\t\tsize_t cie_length)\n {\n   if (parameters->incremental())\n     {\n       // FIXME: Maybe this could work some day....\n       return;\n     }\n-  this->eh_frame_data_->remove_ehframe_for_plt(plt, cie_data, cie_length,\n-\t\t\t\t\t       fde_data, fde_length);\n+  this->eh_frame_data_->remove_ehframe_for_plt(plt, cie_data, cie_length);\n }\n \n // Scan a .debug_info or .debug_types section, and add summary"
    },
    {
      "sha": "bfd44e13077ba201a836f87494fee2bfb9284c6f",
      "filename": "gold/layout.h",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/220f99066d6ce2a6caf17692fcc57d714d8f6910/gold/layout.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/220f99066d6ce2a6caf17692fcc57d714d8f6910/gold/layout.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/layout.h?ref=220f99066d6ce2a6caf17692fcc57d714d8f6910",
      "patch": "@@ -666,12 +666,10 @@ class Layout\n \t\t       size_t cie_length, const unsigned char* fde_data,\n \t\t       size_t fde_length);\n \n-  // Remove .eh_frame information for a PLT.  FDEs using the CIE must\n-  // be removed in reverse order to the order they were added.\n+  // Remove all post-map .eh_frame information for a PLT.\n   void\n   remove_eh_frame_for_plt(Output_data* plt, const unsigned char* cie_data,\n-\t\t\t  size_t cie_length, const unsigned char* fde_data,\n-\t\t\t  size_t fde_length);\n+\t\t\t  size_t cie_length);\n \n   // Scan a .debug_info or .debug_types section, and add summary\n   // information to the .gdb_index section."
    },
    {
      "sha": "494a1fd93bc439293731fe5cf95262ac01b3b8ab",
      "filename": "gold/powerpc.cc",
      "status": "modified",
      "additions": 132,
      "deletions": 65,
      "changes": 197,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/220f99066d6ce2a6caf17692fcc57d714d8f6910/gold/powerpc.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/220f99066d6ce2a6caf17692fcc57d714d8f6910/gold/powerpc.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/powerpc.cc?ref=220f99066d6ce2a6caf17692fcc57d714d8f6910",
      "patch": "@@ -4542,7 +4542,7 @@ class Stub_table : public Output_relaxed_input_section\n       plt_size_(0), last_plt_size_(0),\n       branch_size_(0), last_branch_size_(0), min_size_threshold_(0),\n       need_save_res_(false), need_resize_(false), resizing_(false),\n-      uniq_(id), tls_get_addr_opt_bctrl_(-1u), plt_fde_len_(0)\n+      uniq_(id)\n   {\n     this->set_output_section(output_section);\n \n@@ -4724,10 +4724,6 @@ class Stub_table : public Output_relaxed_input_section\n     return false;\n   }\n \n-  // Generate a suitable FDE to describe code in this stub group.\n-  void\n-  init_plt_fde();\n-\n   // Add .eh_frame info for this stub section.\n   void\n   add_eh_frame(Layout* layout);\n@@ -4932,11 +4928,6 @@ class Stub_table : public Output_relaxed_input_section\n   bool resizing_;\n   // Per stub table unique identifier.\n   uint32_t uniq_;\n-  // The bctrl in the __tls_get_addr_opt stub, if present.\n-  unsigned int tls_get_addr_opt_bctrl_;\n-  // FDE unwind info for this stub group.\n-  unsigned int plt_fde_len_;\n-  unsigned char plt_fde_[20];\n };\n \n // Add a plt call stub, if we do not already have one for this\n@@ -4986,10 +4977,7 @@ Stub_table<size, big_endian>::add_plt_call_entry(\n \t}\n       this->plt_size_ += this->plt_call_size(p.first);\n       if (this->targ_->is_tls_get_addr_opt(gsym))\n-\t{\n-\t  this->targ_->set_has_tls_get_addr_opt();\n-\t  this->tls_get_addr_opt_bctrl_ = this->plt_size_ - 5 * 4;\n-\t}\n+\tthis->targ_->set_has_tls_get_addr_opt();\n       this->plt_size_ = this->plt_call_align(this->plt_size_);\n     }\n   return this->can_reach_stub(from, p.first->second.off_, r_type);\n@@ -5159,48 +5147,39 @@ Stub_table<size, big_endian>::find_long_branch_entry(\n   return &p->second;\n }\n \n-// Generate a suitable FDE to describe code in this stub group.\n-// The __tls_get_addr_opt call stub needs to describe where it saves\n-// LR, to support exceptions that might be thrown from __tls_get_addr.\n-\n-template<int size, bool big_endian>\n-void\n-Stub_table<size, big_endian>::init_plt_fde()\n+template<bool big_endian>\n+static void\n+eh_advance (std::vector<unsigned char>& fde, unsigned int delta)\n {\n-  unsigned char* p = this->plt_fde_;\n-  // offset pcrel sdata4, size udata4, and augmentation size byte.\n-  memset (p, 0, 9);\n-  p += 9;\n-  if (this->tls_get_addr_opt_bctrl_ != -1u)\n+  delta /= 4;\n+  if (delta < 64)\n+    fde.push_back(elfcpp::DW_CFA_advance_loc + delta);\n+  else if (delta < 256)\n     {\n-      unsigned int to_bctrl = this->tls_get_addr_opt_bctrl_ / 4;\n-      if (to_bctrl < 64)\n-\t*p++ = elfcpp::DW_CFA_advance_loc + to_bctrl;\n-      else if (to_bctrl < 256)\n-\t{\n-\t  *p++ = elfcpp::DW_CFA_advance_loc1;\n-\t  *p++ = to_bctrl;\n-\t}\n-      else if (to_bctrl < 65536)\n-\t{\n-\t  *p++ = elfcpp::DW_CFA_advance_loc2;\n-\t  elfcpp::Swap<16, big_endian>::writeval(p, to_bctrl);\n-\t  p += 2;\n-\t}\n-      else\n-\t{\n-\t  *p++ = elfcpp::DW_CFA_advance_loc4;\n-\t  elfcpp::Swap<32, big_endian>::writeval(p, to_bctrl);\n-\t  p += 4;\n-\t}\n-      *p++ = elfcpp::DW_CFA_offset_extended_sf;\n-      *p++ = 65;\n-      *p++ = -(this->targ_->stk_linker() / 8) & 0x7f;\n-      *p++ = elfcpp::DW_CFA_advance_loc + 4;\n-      *p++ = elfcpp::DW_CFA_restore_extended;\n-      *p++ = 65;\n+      fde.push_back(elfcpp::DW_CFA_advance_loc1);\n+      fde.push_back(delta);\n     }\n-  this->plt_fde_len_ = p - this->plt_fde_;\n+  else if (delta < 65536)\n+    {\n+      fde.resize(fde.size() + 3);\n+      unsigned char *p = &*fde.end() - 3;\n+      *p++ = elfcpp::DW_CFA_advance_loc2;\n+      elfcpp::Swap<16, big_endian>::writeval(p, delta);\n+    }\n+  else\n+    {\n+      fde.resize(fde.size() + 5);\n+      unsigned char *p = &*fde.end() - 5;\n+      *p++ = elfcpp::DW_CFA_advance_loc4;\n+      elfcpp::Swap<32, big_endian>::writeval(p, delta);\n+    }\n+}\n+\n+template<typename T>\n+static bool\n+stub_sort(T s1, T s2)\n+{\n+  return s1->second.off_ < s2->second.off_;\n }\n \n // Add .eh_frame info for this stub section.  Unlike other linker\n@@ -5212,7 +5191,8 @@ template<int size, bool big_endian>\n void\n Stub_table<size, big_endian>::add_eh_frame(Layout* layout)\n {\n-  if (!parameters->options().ld_generated_unwind_info())\n+  if (size != 64\n+      || !parameters->options().ld_generated_unwind_info())\n     return;\n \n   // Since we add stub .eh_frame info late, it must be placed\n@@ -5223,28 +5203,115 @@ Stub_table<size, big_endian>::add_eh_frame(Layout* layout)\n   if (!this->targ_->has_glink())\n     return;\n \n-  if (this->plt_size_ + this->branch_size_ + this->need_save_res_ == 0)\n+  typedef typename Plt_stub_entries::const_iterator plt_iter;\n+  std::vector<plt_iter> calls;\n+  if (!this->plt_call_stubs_.empty())\n+    for (plt_iter cs = this->plt_call_stubs_.begin();\n+\t cs != this->plt_call_stubs_.end();\n+\t ++cs)\n+      if ((this->targ_->is_tls_get_addr_opt(cs->first.sym_)\n+\t   && cs->second.r2save_\n+\t   && !cs->second.localentry0_)\n+\t  || cs->second.notoc_)\n+\tcalls.push_back(cs);\n+  if (calls.size() > 1)\n+    std::stable_sort(calls.begin(), calls.end(),\n+\t\t     stub_sort<plt_iter>);\n+\n+  typedef typename Branch_stub_entries::const_iterator branch_iter;\n+  std::vector<branch_iter> branches;\n+  if (!this->long_branch_stubs_.empty())\n+    for (branch_iter bs = this->long_branch_stubs_.begin();\n+\t bs != this->long_branch_stubs_.end();\n+\t ++bs)\n+      if (bs->second.notoc_)\n+\tbranches.push_back(bs);\n+  if (branches.size() > 1)\n+    std::stable_sort(branches.begin(), branches.end(),\n+\t\t     stub_sort<branch_iter>);\n+\n+  if (calls.empty() && branches.empty())\n     return;\n \n-  this->init_plt_fde();\n+  unsigned int last_eh_loc = 0;\n+  // offset pcrel sdata4, size udata4, and augmentation size byte.\n+  std::vector<unsigned char> fde(9, 0);\n+\n+  for (unsigned int i = 0; i < calls.size(); i++)\n+    {\n+      plt_iter cs = calls[i];\n+      unsigned int off = cs->second.off_;\n+      // The __tls_get_addr_opt call stub needs to describe where\n+      // it saves LR, to support exceptions that might be thrown\n+      // from __tls_get_addr, and to support asynchronous exceptions.\n+      if (this->targ_->is_tls_get_addr_opt(cs->first.sym_))\n+\t{\n+\t  off += 7 * 4;\n+\t  if (cs->second.r2save_\n+\t      && !cs->second.localentry0_)\n+\t    {\n+\t      off += 2 * 4;\n+\t      eh_advance<big_endian>(fde, off - last_eh_loc);\n+\t      fde.resize(fde.size() + 6);\n+\t      unsigned char* p = &*fde.end() - 6;\n+\t      *p++ = elfcpp::DW_CFA_offset_extended_sf;\n+\t      *p++ = 65;\n+\t      *p++ = -(this->targ_->stk_linker() / 8) & 0x7f;\n+\t      unsigned int delta = this->plt_call_size(cs) - 4 - 9 * 4;\n+\t      *p++ = elfcpp::DW_CFA_advance_loc + delta / 4;\n+\t      *p++ = elfcpp::DW_CFA_restore_extended;\n+\t      *p++ = 65;\n+\t      last_eh_loc = off + delta;\n+\t      continue;\n+\t    }\n+\t}\n+      // notoc stubs also should describe LR changes, to support\n+      // asynchronous exceptions.\n+      off += (cs->second.r2save_ ? 4 : 0) + 8;\n+      eh_advance<big_endian>(fde, off - last_eh_loc);\n+      fde.resize(fde.size() + 6);\n+      unsigned char* p = &*fde.end() - 6;\n+      *p++ = elfcpp::DW_CFA_register;\n+      *p++ = 65;\n+      *p++ = 12;\n+      *p++ = elfcpp::DW_CFA_advance_loc + 8 / 4;\n+      *p++ = elfcpp::DW_CFA_restore_extended;\n+      *p++ = 65;\n+      last_eh_loc = off + 8;\n+    }\n+\n+  for (unsigned int i = 0; i < branches.size(); i++)\n+    {\n+      branch_iter bs = branches[i];\n+      unsigned int off = bs->second.off_ + 8;\n+      eh_advance<big_endian>(fde, off - last_eh_loc);\n+      fde.resize(fde.size() + 6);\n+      unsigned char* p = &*fde.end() - 6;\n+      *p++ = elfcpp::DW_CFA_register;\n+      *p++ = 65;\n+      *p++ = 12;\n+      *p++ = elfcpp::DW_CFA_advance_loc + 8 / 4;\n+      *p++ = elfcpp::DW_CFA_restore_extended;\n+      *p++ = 65;\n+      last_eh_loc = off + 8;\n+    }\n+\n   layout->add_eh_frame_for_plt(this,\n \t\t\t       Eh_cie<size>::eh_frame_cie,\n \t\t\t       sizeof (Eh_cie<size>::eh_frame_cie),\n-\t\t\t       this->plt_fde_, this->plt_fde_len_);\n+\t\t\t       &*fde.begin(), fde.size());\n }\n \n template<int size, bool big_endian>\n void\n Stub_table<size, big_endian>::remove_eh_frame(Layout* layout)\n {\n-  if (this->plt_fde_len_ != 0)\n-    {\n-      layout->remove_eh_frame_for_plt(this,\n-\t\t\t\t      Eh_cie<size>::eh_frame_cie,\n-\t\t\t\t      sizeof (Eh_cie<size>::eh_frame_cie),\n-\t\t\t\t      this->plt_fde_, this->plt_fde_len_);\n-      this->plt_fde_len_ = 0;\n-    }\n+  if (size == 64\n+      && parameters->options().ld_generated_unwind_info()\n+      && this->targ_->has_glink())\n+    layout->remove_eh_frame_for_plt(this,\n+\t\t\t\t    Eh_cie<size>::eh_frame_cie,\n+\t\t\t\t    sizeof (Eh_cie<size>::eh_frame_cie));\n }\n \n // A class to handle .glink."
    }
  ]
}