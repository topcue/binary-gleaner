{
  "sha": "bfc7d04afbeb56a3dc3caa71322a71fbb084d5dd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmZjN2QwNGFmYmViNTZhM2RjM2NhYTcxMzIyYTcxZmJiMDg0ZDVkZA==",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2015-12-30T06:52:01Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-01-07T17:21:12Z"
    },
    "message": "sim: h8300: delete opcode caching\n\nThis is in preparation for converting h8300 over to the common memory\nframework.  It's not clear how much of a speed gain this was providing\nin the first place -- a naive test of ~400k insns (using shlr.s) shows\nthat this code actually slowed things down a bit.\n\nIf anyone really cares about h8300 anymore, they can migrate to the\ncommon insn caching logic.",
    "tree": {
      "sha": "6ec8b991acd29ffebe10b5831399c3d3ed475a06",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6ec8b991acd29ffebe10b5831399c3d3ed475a06"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bfc7d04afbeb56a3dc3caa71322a71fbb084d5dd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bfc7d04afbeb56a3dc3caa71322a71fbb084d5dd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bfc7d04afbeb56a3dc3caa71322a71fbb084d5dd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bfc7d04afbeb56a3dc3caa71322a71fbb084d5dd/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e904f56d02afd68ffd9333435fe8b026f1e14b5f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e904f56d02afd68ffd9333435fe8b026f1e14b5f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e904f56d02afd68ffd9333435fe8b026f1e14b5f"
    }
  ],
  "stats": {
    "total": 156,
    "additions": 20,
    "deletions": 136
  },
  "files": [
    {
      "sha": "d45b75fb2c6ddf3efb012847e333b5dd735bd15c",
      "filename": "sim/h8300/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bfc7d04afbeb56a3dc3caa71322a71fbb084d5dd/sim/h8300/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bfc7d04afbeb56a3dc3caa71322a71fbb084d5dd/sim/h8300/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/h8300/ChangeLog?ref=bfc7d04afbeb56a3dc3caa71322a71fbb084d5dd",
      "patch": "@@ -1,3 +1,19 @@\n+2021-01-07  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* compile.c (set_simcache_size, h8_get_cache_top, h8_set_cache_top,\n+\th8_get_compiles, h8_increment_compiles, h8_get_cache_idx_buf,\n+\th8_set_cache_idx_buf, h8_get_cache_idx, h8_set_cache_idx, compile,\n+\tset_simcache_size): Delete.\n+\t(init_pointers): Delete calls to h8_get_cache_idx_buf,\n+\th8_set_cache_idx_buf, and set_simcache_size.\n+\t(step_once): Replace call to h8_get_cache_idx with decode.  Delete\n+\tcase 0 handling and call to compile.\n+\t(sim_write): Delete call to h8_set_cache_idx.\n+\t(sim_info): Delete call to h8_get_compiles & sim_cache_size.\n+\t(sim_load): Delete calls to h8_get_cache_idx_buf & h8_set_cache_idx_buf.\n+\t* sim-main.h (sim_state): Delete sim_cache_size, sim_cache, cache_idx,\n+\tcache_top, and compiles.\n+\n 2021-01-04  Mike Frysinger  <vapier@gentoo.org>\n \n \t* configure: Regenerate."
    },
    {
      "sha": "3a3b2e7241bbcdba3a270ef3a7d0fec9956d7202",
      "filename": "sim/h8300/compile.c",
      "status": "modified",
      "additions": 4,
      "deletions": 131,
      "changes": 135,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bfc7d04afbeb56a3dc3caa71322a71fbb084d5dd/sim/h8300/compile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bfc7d04afbeb56a3dc3caa71322a71fbb084d5dd/sim/h8300/compile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/h8300/compile.c?ref=bfc7d04afbeb56a3dc3caa71322a71fbb084d5dd",
      "patch": "@@ -42,12 +42,6 @@\n \n int debug;\n \n-/* FIXME: Needs to live in header file.\n-   This header should also include the things in remote-sim.h.\n-   One could move this to remote-sim.h but this function isn't needed\n-   by gdb.  */\n-static void set_simcache_size (SIM_DESC, int);\n-\n #define X(op, size)  (op * 4 + size)\n \n #define SP (h8300hmode && !h8300_normal_mode ? SL : SW)\n@@ -118,18 +112,6 @@ h8_set_vbr (SIM_DESC sd, int val)\n   (STATE_CPU (sd, 0)) -> regs[VBR_REGNUM] = val;\n }\n \n-static int\n-h8_get_cache_top (SIM_DESC sd)\n-{\n-  return sd -> cache_top;\n-}\n-\n-static void\n-h8_set_cache_top (SIM_DESC sd, int val)\n-{\n-  sd -> cache_top = val;\n-}\n-\n static int\n h8_get_mask (SIM_DESC sd)\n {\n@@ -226,18 +208,6 @@ h8_set_macl (SIM_DESC sd, unsigned int val)\n   (STATE_CPU (sd, 0)) -> regs[MACL_REGNUM] = val;\n }\n \n-static int\n-h8_get_compiles (SIM_DESC sd)\n-{\n-  return sd -> compiles;\n-}\n-\n-static void\n-h8_increment_compiles (SIM_DESC sd)\n-{\n-  sd -> compiles ++;\n-}\n-\n static unsigned int *\n h8_get_reg_buf (SIM_DESC sd)\n {\n@@ -270,32 +240,6 @@ h8_increment_stats (SIM_DESC sd, int idx)\n }\n #endif /* ADEBUG */\n \n-static unsigned short *\n-h8_get_cache_idx_buf (SIM_DESC sd)\n-{\n-  return sd -> cache_idx;\n-}\n-\n-static void\n-h8_set_cache_idx_buf (SIM_DESC sd, unsigned short *ptr)\n-{\n-  sd -> cache_idx = ptr;\n-}\n-\n-static unsigned short\n-h8_get_cache_idx (SIM_DESC sd, unsigned int idx)\n-{\n-  if (idx > sd->memory_size)\n-    return (unsigned short) -1;\n-  return sd -> cache_idx[idx];\n-}\n-\n-static void\n-h8_set_cache_idx (SIM_DESC sd, int idx, unsigned int val)\n-{\n-  sd -> cache_idx[idx] = (unsigned short) val;\n-}\n-\n static unsigned char *\n h8_get_memory_buf (SIM_DESC sd)\n {\n@@ -1197,34 +1141,6 @@ decode (SIM_DESC sd, int addr, unsigned char *data, decoded_inst *dst)\n   dst->opcode = O (O_ILL, SB);\n }\n \n-static void\n-compile (SIM_DESC sd, int pc)\n-{\n-  int idx;\n-\n-  /* Find the next cache entry to use.  */\n-  idx = h8_get_cache_top (sd) + 1;\n-  h8_increment_compiles (sd);\n-  if (idx >= sd->sim_cache_size)\n-    {\n-      idx = 1;\n-    }\n-  h8_set_cache_top (sd, idx);\n-\n-  /* Throw away its old meaning.  */\n-  h8_set_cache_idx (sd, sd->sim_cache[idx].oldpc, 0);\n-\n-  /* Set to new address.  */\n-  sd->sim_cache[idx].oldpc = pc;\n-\n-  /* Fill in instruction info.  */\n-  decode (sd, pc, h8_get_memory_buf (sd) + pc, sd->sim_cache + idx);\n-\n-  /* Point to new cache entry.  */\n-  h8_set_cache_idx (sd, pc, idx);\n-}\n-\n-\n static unsigned char  *breg[32];\n static unsigned short *wreg[16];\n \n@@ -1749,15 +1665,11 @@ init_pointers (SIM_DESC sd)\n \n       if (h8_get_memory_buf (sd))\n \tfree (h8_get_memory_buf (sd));\n-      if (h8_get_cache_idx_buf (sd))\n-\tfree (h8_get_cache_idx_buf (sd));\n       if (h8_get_eightbit_buf (sd))\n \tfree (h8_get_eightbit_buf (sd));\n \n       h8_set_memory_buf (sd, (unsigned char *) \n \t\t\t calloc (sizeof (char), memory_size));\n-      h8_set_cache_idx_buf (sd, (unsigned short *) \n-\t\t\t    calloc (sizeof (short), memory_size));\n       sd->memory_size = memory_size;\n       h8_set_eightbit_buf (sd, (unsigned char *) calloc (sizeof (char), 256));\n \n@@ -1808,10 +1720,6 @@ init_pointers (SIM_DESC sd)\n \t}\n \n       init_pointers_needed = 0;\n-\n-      /* Initialize the seg registers.  */\n-      if (!sd->sim_cache)\n-\tset_simcache_size (sd, CSIZE);\n     }\n }\n \n@@ -1875,16 +1783,10 @@ step_once (SIM_DESC sd, SIM_CPU *cpu)\n     h8_set_mask (sd, 0xffff);\n   do\n     {\n-      unsigned short cidx;\n-      decoded_inst *code;\n-\n-    top:\n-      cidx = h8_get_cache_idx (sd, pc);\n-      if (cidx == (unsigned short) -1 ||\n-\t  cidx >= sd->sim_cache_size)\n-\tgoto illegal;\n-\t  \n-      code = sd->sim_cache + cidx;\n+      decoded_inst _code, *code = &_code;\n+      memset (code, 0, sizeof (*code));\n+      decode (sd, pc, h8_get_memory_buf (sd) + pc, code);\n+      code->oldpc = pc;\n \n #if ADEBUG\n       if (debug)\n@@ -1903,15 +1805,6 @@ step_once (SIM_DESC sd, SIM_CPU *cpu)\n \n       switch (code->opcode)\n \t{\n-\tcase 0:\n-\t  /*\n-\t   * This opcode is a fake for when we get to an\n-\t   * instruction which hasnt been compiled\n-\t   */\n-\t  compile (sd, pc);\n-\t  goto top;\n-\t  break;\n-\n \tcase O (O_MOVAB, SL):\n \tcase O (O_MOVAW, SL):\n \tcase O (O_MOVAL, SL):\n@@ -4553,7 +4446,6 @@ sim_write (SIM_DESC sd, SIM_ADDR addr, const unsigned char *buffer, int size)\n       if (addr < memory_size)\n \t{\n \t  h8_set_memory    (sd, addr + i, buffer[i]);\n-\t  h8_set_cache_idx (sd, addr + i,  0);\n \t}\n       else\n \t{\n@@ -4682,19 +4574,6 @@ h8300_reg_fetch (SIM_CPU *cpu, int rn, unsigned char *buf, int length)\n     }\n }\n \n-static void\n-set_simcache_size (SIM_DESC sd, int n)\n-{\n-  if (sd->sim_cache)\n-    free (sd->sim_cache);\n-  if (n < 2)\n-    n = 2;\n-  sd->sim_cache = (decoded_inst *) malloc (sizeof (decoded_inst) * n);\n-  memset (sd->sim_cache, 0, sizeof (decoded_inst) * n);\n-  sd->sim_cache_size = n;\n-}\n-\n-\n void\n sim_info (SIM_DESC sd, int verbose)\n {\n@@ -4707,8 +4586,6 @@ sim_info (SIM_DESC sd, int verbose)\n   sim_io_printf (sd, \"#virtual time taken     %10.4f\\n\", virttime);\n   if (timetaken != 0.0)\n     sim_io_printf (sd, \"#simulation ratio       %10.4f\\n\", virttime / timetaken);\n-  sim_io_printf (sd, \"#compiles               %10d\\n\", h8_get_compiles (sd));\n-  sim_io_printf (sd, \"#cache size             %10d\\n\", sd->sim_cache_size);\n \n #ifdef ADEBUG\n   /* This to be conditional on `what' (aka `verbose'),\n@@ -4962,15 +4839,11 @@ sim_load (SIM_DESC sd, const char *prog, bfd *abfd, int from_tty)\n \n   if (h8_get_memory_buf (sd))\n     free (h8_get_memory_buf (sd));\n-  if (h8_get_cache_idx_buf (sd))\n-    free (h8_get_cache_idx_buf (sd));\n   if (h8_get_eightbit_buf (sd))\n     free (h8_get_eightbit_buf (sd));\n \n   h8_set_memory_buf (sd, (unsigned char *) \n \t\t     calloc (sizeof (char), memory_size));\n-  h8_set_cache_idx_buf (sd, (unsigned short *) \n-\t\t\tcalloc (sizeof (short), memory_size));\n   sd->memory_size = memory_size;\n   h8_set_eightbit_buf (sd, (unsigned char *) calloc (sizeof (char), 256));\n "
    },
    {
      "sha": "3b5ae2adb0a86d44486d55d3f6d5ce24c457d48e",
      "filename": "sim/h8300/sim-main.h",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bfc7d04afbeb56a3dc3caa71322a71fbb084d5dd/sim/h8300/sim-main.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bfc7d04afbeb56a3dc3caa71322a71fbb084d5dd/sim/h8300/sim-main.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/h8300/sim-main.h?ref=bfc7d04afbeb56a3dc3caa71322a71fbb084d5dd",
      "patch": "@@ -135,12 +135,7 @@ struct _sim_cpu {\n /* The sim_state struct.  */\n struct sim_state {\n   sim_cpu *cpu[MAX_NR_PROCESSORS];\n-  unsigned int sim_cache_size;\n-  decoded_inst *sim_cache;\n-  unsigned short *cache_idx;\n   unsigned long memory_size;\n-  int cache_top;\n-  int compiles;\n #ifdef ADEBUG\n   int stats[O_LAST];\n #endif"
    }
  ]
}