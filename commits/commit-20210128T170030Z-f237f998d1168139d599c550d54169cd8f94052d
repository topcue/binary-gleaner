{
  "sha": "f237f998d1168139d599c550d54169cd8f94052d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjIzN2Y5OThkMTE2ODEzOWQ1OTljNTUwZDU0MTY5Y2Q4Zjk0MDUyZA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-01-25T18:43:19Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-01-28T17:00:30Z"
    },
    "message": "gdb/tui: remove special handling of locator/status window\n\nThe locator window, or status window as it is sometimes called is\nhandled differently to all the other windows.\n\nThe reason for this is that the class representing this\nwindow (tui_locator_window) does two jobs, first this class represents\na window just like any other that has space on the screen and fills\nthe space with content.  The second job is that this class serves as a\nstorage area to hold information about the current location that the\nTUI windows represent, so the class has members like 'addr' and\n'line_no', for example which are used within this class, and others\nwhen they want to know which line/address the TUI windows should be\nshowing to the user.\n\nBecause of this dual purpose we must always have an instance of the\ntui_locator_window so that there is somewhere to store this location\ninformation.\n\nThe result of this is that the locator window must never be deleted\nlike other windows, which results in some special case code.\n\nIn this patch I propose splitting the two roles of the\ntui_locator_window class.  The tui_locator_window class will retain\njust its window drawing parts, and will be treated just like any other\nwindow.  This should allow all special case code for this window to be\ndeleted.\n\nThe other role, that of tracking the current tui location will be\nmoved into a new class (tui_location_tracker), of which there will be\na single global instance.  All of the places where we previously use\nthe locator window to get location information will now be updated to\nget this from the tui_location_tracker.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* Makefile.in (SUBDIR_TUI_SRCS): Add tui/tui-location.c.\n\t(HFILES_NO_SRCDIR): Add tui/tui-location.h.\n\t* tui/tui-data.h (TUI_STATUS_WIN): Define.\n\t(tui_locator_win_info_ptr): Delete declaration.\n\t* tui/tui-disasm.c: Add 'tui/tui-location.h' include.\n\t(tui_disasm_window::set_contents): Fetch state from tui_location\n\tglobal.\n\t(tui_get_begin_asm_address): Likewise.\n\t* tui/tui-layout.c (tui_apply_current_layout): Remove special case\n\tfor locator window.\n\t(get_locator_window): Delete.\n\t(initialize_known_windows): Treat locator window just like all the\n\trest.\n\t* tui/tui-source.c: Add 'tui/tui-location.h' include.\n\t(tui_source_window::set_contents): Fetch state from tui_location\n\tglobal.\n\t(tui_source_window::showing_source_p): Likewise.\n\t* tui/tui-stack.c: Add 'tui/tui-location.h' include.\n\t(_locator): Delete.\n\t(tui_locator_win_info_ptr): Delete.\n\t(tui_locator_window::make_status_line): Fetch state from\n\ttui_location global.\n\t(tui_locator_window::rerender): Remove check of 'handle',\n\treindent function body.\n\t(tui_locator_window::set_locator_fullname): Delete.\n\t(tui_locator_window::set_locator_info): Delete.\n\t(tui_update_locator_fullname): Delete.\n\t(tui_show_frame_info): Likewise.\n\t(tui_show_locator_content): Access window through TUI_STATUS_WIN.\n\t* tui/tui-stack.h (tui_locator_window::set_locator_info): Moved to\n\ttui/tui-location.h and renamed to\n\ttui_location_tracker::set_location.\n\t(tui_locator_window::set_locator_fullname): Moved to\n\ttui/tui-location.h and renamed to\n\ttui_location_tracker::set_fullname.\n\t(tui_locator_window::full_name): Delete.\n\t(tui_locator_window::proc_name): Delete.\n\t(tui_locator_window::line_no): Delete.\n\t(tui_locator_window::addr): Delete.\n\t(tui_locator_window::gdbarch): Delete.\n\t(tui_update_locator_fullname): Delete declaration.\n\t* tui/tui-wingeneral.c (tui_refresh_all): Removed special handling\n\tfor locator window.\n\t* tui/tui-winsource.c: Add 'tui/tui-location.h' include.\n\t(tui_display_main): Call function on tui_location directly.\n\t* tui/tui.h (enum tui_win_type): Add STATUS_WIN.\n\t* tui/tui-location.c: New file.\n\t* tui/tui-location.h: New file.",
    "tree": {
      "sha": "950aea5216a480dd88366bbe0d565272f17c7170",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/950aea5216a480dd88366bbe0d565272f17c7170"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f237f998d1168139d599c550d54169cd8f94052d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f237f998d1168139d599c550d54169cd8f94052d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f237f998d1168139d599c550d54169cd8f94052d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f237f998d1168139d599c550d54169cd8f94052d/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cdeba395cffb0eda272cb239d27e899794efe658",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cdeba395cffb0eda272cb239d27e899794efe658",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cdeba395cffb0eda272cb239d27e899794efe658"
    }
  ],
  "stats": {
    "total": 408,
    "additions": 270,
    "deletions": 138
  },
  "files": [
    {
      "sha": "e1082744c2a106eba880822160e9f9b7178ecfdd",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 51,
      "deletions": 0,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f237f998d1168139d599c550d54169cd8f94052d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f237f998d1168139d599c550d54169cd8f94052d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f237f998d1168139d599c550d54169cd8f94052d",
      "patch": "@@ -1,3 +1,54 @@\n+2021-01-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* Makefile.in (SUBDIR_TUI_SRCS): Add tui/tui-location.c.\n+\t(HFILES_NO_SRCDIR): Add tui/tui-location.h.\n+\t* tui/tui-data.h (TUI_STATUS_WIN): Define.\n+\t(tui_locator_win_info_ptr): Delete declaration.\n+\t* tui/tui-disasm.c: Add 'tui/tui-location.h' include.\n+\t(tui_disasm_window::set_contents): Fetch state from tui_location\n+\tglobal.\n+\t(tui_get_begin_asm_address): Likewise.\n+\t* tui/tui-layout.c (tui_apply_current_layout): Remove special case\n+\tfor locator window.\n+\t(get_locator_window): Delete.\n+\t(initialize_known_windows): Treat locator window just like all the\n+\trest.\n+\t* tui/tui-source.c: Add 'tui/tui-location.h' include.\n+\t(tui_source_window::set_contents): Fetch state from tui_location\n+\tglobal.\n+\t(tui_source_window::showing_source_p): Likewise.\n+\t* tui/tui-stack.c: Add 'tui/tui-location.h' include.\n+\t(_locator): Delete.\n+\t(tui_locator_win_info_ptr): Delete.\n+\t(tui_locator_window::make_status_line): Fetch state from\n+\ttui_location global.\n+\t(tui_locator_window::rerender): Remove check of 'handle',\n+\treindent function body.\n+\t(tui_locator_window::set_locator_fullname): Delete.\n+\t(tui_locator_window::set_locator_info): Delete.\n+\t(tui_update_locator_fullname): Delete.\n+\t(tui_show_frame_info): Likewise.\n+\t(tui_show_locator_content): Access window through TUI_STATUS_WIN.\n+\t* tui/tui-stack.h (tui_locator_window::set_locator_info): Moved to\n+\ttui/tui-location.h and renamed to\n+\ttui_location_tracker::set_location.\n+\t(tui_locator_window::set_locator_fullname): Moved to\n+\ttui/tui-location.h and renamed to\n+\ttui_location_tracker::set_fullname.\n+\t(tui_locator_window::full_name): Delete.\n+\t(tui_locator_window::proc_name): Delete.\n+\t(tui_locator_window::line_no): Delete.\n+\t(tui_locator_window::addr): Delete.\n+\t(tui_locator_window::gdbarch): Delete.\n+\t(tui_update_locator_fullname): Delete declaration.\n+\t* tui/tui-wingeneral.c (tui_refresh_all): Removed special handling\n+\tfor locator window.\n+\t* tui/tui-winsource.c: Add 'tui/tui-location.h' include.\n+\t(tui_display_main): Call function on tui_location directly.\n+\t* tui/tui.h (enum tui_win_type): Add STATUS_WIN.\n+\t* tui/tui-location.c: New file.\n+\t* tui/tui-location.h: New file.\n+\n 2021-01-28  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* gdbtypes.h (get_type_arch): Rename to..."
    },
    {
      "sha": "36ef45d455966a0a8c553026b348e7ef859c520b",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f237f998d1168139d599c550d54169cd8f94052d/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f237f998d1168139d599c550d54169cd8f94052d/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=f237f998d1168139d599c550d54169cd8f94052d",
      "patch": "@@ -310,6 +310,7 @@ SUBDIR_TUI_SRCS = \\\n \ttui/tui-interp.c \\\n \ttui/tui-io.c \\\n \ttui/tui-layout.c \\\n+\ttui/tui-location.c \\\n \ttui/tui-out.c \\\n \ttui/tui-regs.c \\\n \ttui/tui-source.c \\\n@@ -1541,6 +1542,7 @@ HFILES_NO_SRCDIR = \\\n \ttui/tui-hooks.h \\\n \ttui/tui-io.h \\\n \ttui/tui-layout.h \\\n+\ttui/tui-location.h \\\n \ttui/tui-out.h \\\n \ttui/tui-regs.h \\\n \ttui/tui-source.h \\"
    },
    {
      "sha": "c92c8f9d36436e5f11a139787e170be5b08706c4",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=f237f998d1168139d599c550d54169cd8f94052d",
      "patch": "@@ -180,6 +180,7 @@ extern struct tui_win_info *tui_win_list[MAX_MAJOR_WINDOWS];\n #define TUI_DISASM_WIN\t((tui_disasm_window *) tui_win_list[DISASSEM_WIN])\n #define TUI_DATA_WIN    ((tui_data_window *) tui_win_list[DATA_WIN])\n #define TUI_CMD_WIN     ((tui_cmd_window *) tui_win_list[CMD_WIN])\n+#define TUI_STATUS_WIN  ((tui_locator_window *) tui_win_list[STATUS_WIN])\n \n /* All the windows that are currently instantiated, in layout\n    order.  */\n@@ -197,7 +198,6 @@ extern int tui_term_height (void);\n extern void tui_set_term_height_to (int);\n extern int tui_term_width (void);\n extern void tui_set_term_width_to (int);\n-extern struct tui_locator_window *tui_locator_win_info_ptr (void);\n extern struct tui_win_info *tui_win_with_focus (void);\n extern bool tui_win_resized ();\n extern void tui_set_win_resized_to (bool);"
    },
    {
      "sha": "65b300cb0084cf77feac954397a1aaa08a5bd65c",
      "filename": "gdb/tui/tui-disasm.c",
      "status": "modified",
      "additions": 5,
      "deletions": 8,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-disasm.c?ref=f237f998d1168139d599c550d54169cd8f94052d",
      "patch": "@@ -40,6 +40,7 @@\n #include \"progspace.h\"\n #include \"objfiles.h\"\n #include \"cli/cli-style.h\"\n+#include \"tui/tui-location.h\"\n \n #include \"gdb_curses.h\"\n \n@@ -320,7 +321,6 @@ tui_disasm_window::set_contents (struct gdbarch *arch,\n   int i;\n   int max_lines;\n   CORE_ADDR cur_pc;\n-  struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n   int tab_len = tui_tab_width;\n   int insn_pos;\n \n@@ -331,7 +331,7 @@ tui_disasm_window::set_contents (struct gdbarch *arch,\n   m_gdbarch = arch;\n   m_start_line_or_addr.loa = LOA_ADDRESS;\n   m_start_line_or_addr.u.addr = pc;\n-  cur_pc = locator->addr;\n+  cur_pc = tui_location.addr ();\n \n   /* Window size, excluding highlight box.  */\n   max_lines = height - 2;\n@@ -384,13 +384,10 @@ tui_disasm_window::set_contents (struct gdbarch *arch,\n void\n tui_get_begin_asm_address (struct gdbarch **gdbarch_p, CORE_ADDR *addr_p)\n {\n-  struct tui_locator_window *locator;\n   struct gdbarch *gdbarch = get_current_arch ();\n   CORE_ADDR addr = 0;\n \n-  locator = tui_locator_win_info_ptr ();\n-\n-  if (locator->addr == 0)\n+  if (tui_location.addr () == 0)\n     {\n       if (have_full_symbols () || have_partial_symbols ())\n \t{\n@@ -411,8 +408,8 @@ tui_get_begin_asm_address (struct gdbarch **gdbarch_p, CORE_ADDR *addr_p)\n     }\n   else\t\t\t\t/* The target is executing.  */\n     {\n-      gdbarch = locator->gdbarch;\n-      addr = locator->addr;\n+      gdbarch = tui_location.gdbarch ();\n+      addr = tui_location.addr ();\n     }\n \n   *gdbarch_p = gdbarch;"
    },
    {
      "sha": "90555f52736e747cbe3bf9136220d1d26b857119",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 3,
      "deletions": 13,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=f237f998d1168139d599c550d54169cd8f94052d",
      "patch": "@@ -98,15 +98,12 @@ tui_apply_current_layout ()\n \n   /* Now delete any window that was not re-applied.  */\n   tui_win_info *focus = tui_win_with_focus ();\n-  tui_win_info *locator = tui_locator_win_info_ptr ();\n   for (tui_win_info *win_info : saved_tui_windows)\n     {\n       if (!win_info->is_visible ())\n \t{\n \t  if (focus == win_info)\n \t    tui_set_win_focus_to (tui_windows[0]);\n-\t  if (win_info != locator)\n-\t    delete win_info;\n \t}\n     }\n \n@@ -331,15 +328,6 @@ make_standard_window (const char *)\n   return tui_win_list[V];\n }\n \n-/* Helper function to wrap tui_locator_win_info_ptr for\n-   tui_get_window_by_name.  */\n-\n-static tui_win_info *\n-get_locator_window (const char *)\n-{\n-  return tui_locator_win_info_ptr ();\n-}\n-\n /* A map holding all the known window types, keyed by name.  Note that\n    this is heap-allocated and \"leaked\" at gdb exit.  This avoids\n    ordering issues with destroying elements in the map at shutdown.\n@@ -386,7 +374,9 @@ initialize_known_windows ()\n   known_window_types->emplace (DISASSEM_NAME,\n \t\t\t       make_standard_window<DISASSEM_WIN,\n \t\t\t\t\t\t    tui_disasm_window>);\n-  known_window_types->emplace (STATUS_NAME, get_locator_window);\n+  known_window_types->emplace (STATUS_NAME,\n+\t\t\t       make_standard_window<STATUS_WIN,\n+\t\t\t\t\t\t    tui_locator_window>);\n }\n \n /* See tui-layout.h.  */"
    },
    {
      "sha": "6bd7fa0afb133003690f08f41d3ec07432ce7dd0",
      "filename": "gdb/tui/tui-location.c",
      "status": "added",
      "additions": 81,
      "deletions": 0,
      "changes": 81,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-location.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-location.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-location.c?ref=f237f998d1168139d599c550d54169cd8f94052d",
      "patch": "@@ -0,0 +1,81 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"tui/tui.h\"\n+#include \"tui/tui-stack.h\"\n+#include \"tui/tui-data.h\"\n+#include \"tui/tui-location.h\"\n+#include \"symtab.h\"\n+#include \"source.h\"\n+\n+/* See tui/tui-location.h.  */\n+\n+tui_location_tracker tui_location;\n+\n+/* See tui/tui-location.h.  */\n+\n+bool\n+tui_location_tracker::set_location (struct gdbarch *gdbarch,\n+\t\t\t\t    const struct symtab_and_line &sal,\n+\t\t\t\t    const char *procname)\n+{\n+  gdb_assert (procname != nullptr);\n+\n+  bool location_changed_p = set_fullname (sal.symtab);\n+  location_changed_p |= procname != m_proc_name;\n+  location_changed_p |= sal.line != m_line_no;\n+  location_changed_p |= sal.pc != m_addr;\n+  location_changed_p |= gdbarch != m_gdbarch;\n+\n+  m_proc_name = procname;\n+  m_line_no = sal.line;\n+  m_addr = sal.pc;\n+  m_gdbarch = gdbarch;\n+\n+  if (location_changed_p)\n+    tui_show_locator_content ();\n+\n+  return location_changed_p;\n+}\n+\n+/* See tui/tui-location.h.  */\n+\n+bool\n+tui_location_tracker::set_location (struct symtab *symtab)\n+{\n+  bool location_changed_p = set_fullname (symtab);\n+\n+  if (location_changed_p)\n+    tui_show_locator_content ();\n+\n+  return location_changed_p;\n+}\n+\n+/* See tui/tui-location.h.  */\n+\n+bool\n+tui_location_tracker::set_fullname (struct symtab *symtab)\n+{\n+  const char *fullname = (symtab == nullptr\n+\t\t\t  ? \"??\"\n+\t\t\t  : symtab_to_fullname (symtab));\n+  bool location_changed_p = fullname != m_full_name;\n+  m_full_name = std::string (fullname);\n+\n+  return location_changed_p;\n+}"
    },
    {
      "sha": "804142f6814161ebc483014b239572921a307079",
      "filename": "gdb/tui/tui-location.h",
      "status": "added",
      "additions": 93,
      "deletions": 0,
      "changes": 93,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-location.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-location.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-location.h?ref=f237f998d1168139d599c550d54169cd8f94052d",
      "patch": "@@ -0,0 +1,93 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef TUI_TUI_LOCATION_H\n+#define TUI_TUI_LOCATION_H\n+\n+#include \"tui/tui.h\"\n+#include \"tui/tui.h\"\n+#include \"gdb_curses.h\"\t/* For WINDOW.  */\n+#include \"observable.h\"\n+\n+/* Class used to track the current location that the TUI is displaying.  An\n+   instance of this class will be created; as events occur within GDB the\n+   location information within this instance will be updated.  As windows\n+   like the status window, source window, or disassembler window need to\n+   update themselves, they will ask this instance which location they\n+   should be displaying.  */\n+\n+struct tui_location_tracker\n+{\n+  /* Update the current location with the provided arguments.  Returns true\n+     if any of the locator's fields were actually changed, and false\n+     otherwise.  */\n+  bool set_location (struct gdbarch *gdbarch,\n+\t\t     const struct symtab_and_line &sal,\n+\t\t     const char *procname);\n+\n+  /* Update the current location with the with the provided argument.\n+     Return true if any of the fields actually changed, otherwise false.  */\n+  bool set_location (struct symtab *symtab);\n+\n+  /* Return the address of the current location.  */\n+  CORE_ADDR addr () const\n+  { return m_addr; }\n+\n+  /* Return the architecture for the current location.  */\n+  struct gdbarch *gdbarch () const\n+  { return m_gdbarch; }\n+\n+  /* Return the full name of the file containing the current location.  */\n+  const std::string &full_name () const\n+  { return m_full_name; }\n+\n+  /* Return the name of the function containing the current location.  */\n+  const std::string &proc_name () const\n+  { return m_proc_name; }\n+\n+  /* Return the line number for the current location.  */\n+  int line_no () const\n+  { return m_line_no; }\n+\n+private:\n+\n+  /* Update M_FULL_NAME from SYMTAB.   Return true if M_FULL_NAME actually\n+     changed, otherwise, return false.  */\n+  bool set_fullname (struct symtab *symtab);\n+\n+  /* The full name for the file containing the current location.  */\n+  std::string m_full_name;\n+\n+  /* The name of the function we're currently within.  */\n+  std::string m_proc_name;\n+\n+  /* The line number for the current location.  */\n+  int m_line_no = 0;\n+\n+  /* The address of the current location.  */\n+  CORE_ADDR m_addr = 0;\n+\n+  /* Architecture associated with code at this location.  */\n+  struct gdbarch *m_gdbarch = nullptr;\n+};\n+\n+/* The single global instance of the location tracking class.  Tracks the\n+   current location that the TUI windows are displaying.  */\n+\n+extern tui_location_tracker tui_location;\n+\n+#endif /* TUI_TUI_LOCATION_H */"
    },
    {
      "sha": "69f51ceb6f14ac95ef3fecb0466df213fb8e7da1",
      "filename": "gdb/tui/tui-source.c",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.c?ref=f237f998d1168139d599c550d54169cd8f94052d",
      "patch": "@@ -37,6 +37,7 @@\n #include \"tui/tui-win.h\"\n #include \"tui/tui-winsource.h\"\n #include \"tui/tui-source.h\"\n+#include \"tui/tui-location.h\"\n #include \"gdb_curses.h\"\n \n /* Function to display source in the source window.  */\n@@ -62,8 +63,6 @@ tui_source_window::set_contents (struct gdbarch *arch,\n     return false;\n \n   int cur_line_no, cur_line;\n-  struct tui_locator_window *locator\n-    = tui_locator_win_info_ptr ();\n   const char *s_filename = symtab_to_filename_for_display (s);\n \n   title = s_filename;\n@@ -104,9 +103,9 @@ tui_source_window::set_contents (struct gdbarch *arch,\n       element->line_or_addr.loa = LOA_LINE;\n       element->line_or_addr.u.line_no = cur_line_no;\n       element->is_exec_point\n-\t= (filename_cmp (locator->full_name.c_str (),\n+\t= (filename_cmp (tui_location.full_name ().c_str (),\n \t\t\t symtab_to_fullname (s)) == 0\n-\t   && cur_line_no == locator->line_no);\n+\t   && cur_line_no == tui_location.line_no ());\n \n       m_content[cur_line].line = std::move (text);\n \n@@ -124,7 +123,7 @@ bool\n tui_source_window::showing_source_p (const char *fullname) const\n {\n   return (!m_content.empty ()\n-\t  && (filename_cmp (tui_locator_win_info_ptr ()->full_name.c_str (),\n+\t  && (filename_cmp (tui_location.full_name ().c_str (),\n \t\t\t    fullname) == 0));\n }\n "
    },
    {
      "sha": "b5daa61b4e2a072de362820682b6ae316fb4a942",
      "filename": "gdb/tui/tui-stack.c",
      "status": "modified",
      "additions": 27,
      "deletions": 87,
      "changes": 114,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-stack.c?ref=f237f998d1168139d599c550d54169cd8f94052d",
      "patch": "@@ -36,6 +36,7 @@\n #include \"tui/tui-source.h\"\n #include \"tui/tui-winsource.h\"\n #include \"tui/tui-file.h\"\n+#include \"tui/tui-location.h\"\n \n #include \"gdb_curses.h\"\n \n@@ -54,18 +55,8 @@\n #define MAX_TARGET_WIDTH  10\n #define MAX_PID_WIDTH     19\n \n-static struct tui_locator_window _locator;\n-\n \f\n \n-/* Accessor for the locator win info.  Answers a pointer to the static\n-   locator win info struct.  */\n-struct tui_locator_window *\n-tui_locator_win_info_ptr (void)\n-{\n-  return &_locator;\n-}\n-\n std::string\n tui_locator_window::make_status_line () const\n {\n@@ -97,6 +88,7 @@ tui_locator_window::make_status_line () const\n   status_size = width;\n \n   /* Translate line number and obtain its size.  */\n+  int line_no = tui_location.line_no ();\n   if (line_no > 0)\n     xsnprintf (line_buf, sizeof (line_buf), \"%d\", line_no);\n   else\n@@ -106,6 +98,8 @@ tui_locator_window::make_status_line () const\n     line_width = MIN_LINE_WIDTH;\n \n   /* Translate PC address.  */\n+  struct gdbarch *gdbarch = tui_location.gdbarch ();\n+  CORE_ADDR addr = tui_location.addr ();\n   std::string pc_out (gdbarch\n \t\t      ? paddress (gdbarch, addr)\n \t\t      : \"??\");\n@@ -169,6 +163,7 @@ tui_locator_window::make_status_line () const\n   /* Procedure/class name.  */\n   if (proc_width > 0)\n     {\n+      const std::string &proc_name = tui_location.proc_name ();\n       if (proc_name.size () > proc_width)\n \tstring.printf (\"%s%*.*s* \", PROC_PREFIX,\n \t\t       1 - proc_width, proc_width - 1, proc_name.c_str ());\n@@ -229,76 +224,22 @@ tui_get_function_from_frame (struct frame_info *fi)\n void\n tui_locator_window::rerender ()\n {\n-  if (handle != NULL)\n-    {\n-      std::string string = make_status_line ();\n-      scrollok (handle.get (), FALSE);\n-      wmove (handle.get (), 0, 0);\n-      /* We ignore the return value from wstandout and wstandend, casting\n-\t them to void in order to avoid a compiler warning.  The warning\n-\t itself was introduced by a patch to ncurses 5.7 dated 2009-08-29,\n-\t changing these macro to expand to code that causes the compiler\n-\t to generate an unused-value warning.  */\n-      (void) wstandout (handle.get ());\n-      waddstr (handle.get (), string.c_str ());\n-      wclrtoeol (handle.get ());\n-      (void) wstandend (handle.get ());\n-      refresh_window ();\n-      wmove (handle.get (), 0, 0);\n-    }\n-}\n-\n-/* See tui-stack.h.  */\n-\n-void\n-tui_locator_window::set_locator_fullname (const char *fullname)\n-{\n-  full_name = fullname;\n-  rerender ();\n-}\n-\n-/* See tui-stack.h.  */\n-\n-bool\n-tui_locator_window::set_locator_info (struct gdbarch *gdbarch_in,\n-\t\t\t\t      const struct symtab_and_line &sal,\n-\t\t\t\t      const char *procname)\n-{\n-  bool locator_changed_p = false;\n-\n-  gdb_assert (procname != NULL);\n-\n-  const char *fullname = (sal.symtab == nullptr\n-\t\t\t  ? \"??\"\n-\t\t\t  : symtab_to_fullname (sal.symtab));\n-\n-  locator_changed_p |= proc_name != procname;\n-  locator_changed_p |= sal.line != line_no;\n-  locator_changed_p |= sal.pc != addr;\n-  locator_changed_p |= gdbarch_in != gdbarch;\n-  locator_changed_p |= full_name != fullname;\n-\n-  proc_name = procname;\n-  line_no = sal.line;\n-  addr = sal.pc;\n-  gdbarch = gdbarch_in;\n-  set_locator_fullname (fullname);\n-\n-  return locator_changed_p;\n-}\n-\n-/* Update only the full_name portion of the locator.  */\n-void\n-tui_update_locator_fullname (struct symtab *symtab)\n-{\n-  struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n-\n-  const char *fullname;\n-  if (symtab != nullptr)\n-    fullname = symtab_to_fullname (symtab);\n-  else\n-    fullname = \"??\";\n-  locator->set_locator_fullname (fullname);\n+  gdb_assert (handle != NULL);\n+\n+  std::string string = make_status_line ();\n+  scrollok (handle.get (), FALSE);\n+  wmove (handle.get (), 0, 0);\n+  /* We ignore the return value from wstandout and wstandend, casting them\n+     to void in order to avoid a compiler warning.  The warning itself was\n+     introduced by a patch to ncurses 5.7 dated 2009-08-29, changing these\n+     macro to expand to code that causes the compiler to generate an\n+     unused-value warning.  */\n+  (void) wstandout (handle.get ());\n+  waddstr (handle.get (), string.c_str ());\n+  wclrtoeol (handle.get ());\n+  (void) wstandend (handle.get ());\n+  refresh_window ();\n+  wmove (handle.get (), 0, 0);\n }\n \n /* Function to print the frame information for the TUI.  The windows are\n@@ -311,9 +252,8 @@ bool\n tui_show_frame_info (struct frame_info *fi)\n {\n   bool locator_changed_p;\n-  struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n \n-  if (fi)\n+  if (fi != nullptr)\n     {\n       symtab_and_line sal = find_frame_sal (fi);\n \n@@ -325,8 +265,8 @@ tui_show_frame_info (struct frame_info *fi)\n       else\n \tfunc_name = _(\"<unavailable>\");\n \n-      locator_changed_p = locator->set_locator_info (get_frame_arch (fi),\n-\t\t\t\t\t\t     sal, func_name);\n+      locator_changed_p\n+\t= tui_location.set_location (get_frame_arch (fi), sal, func_name);\n \n       /* If the locator information has not changed, then frame information has\n \t not changed.  If frame information has not changed, then the windows'\n@@ -344,7 +284,7 @@ tui_show_frame_info (struct frame_info *fi)\n     {\n       symtab_and_line sal {};\n \n-      locator_changed_p = locator->set_locator_info (NULL, sal, \"\");\n+      locator_changed_p = tui_location.set_location (NULL, sal, \"\");\n \n       if (!locator_changed_p)\n \treturn false;\n@@ -359,8 +299,8 @@ tui_show_frame_info (struct frame_info *fi)\n void\n tui_show_locator_content ()\n {\n-  struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n-  locator->rerender ();\n+  if (tui_is_window_visible (STATUS_WIN))\n+    TUI_STATUS_WIN->rerender ();\n }\n \n /* Command to update the display with the current execution point.  */"
    },
    {
      "sha": "55121f71e21f291d0cfded30c5fd530d6d1e368e",
      "filename": "gdb/tui/tui-stack.h",
      "status": "modified",
      "additions": 0,
      "deletions": 19,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-stack.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-stack.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-stack.h?ref=f237f998d1168139d599c550d54169cd8f94052d",
      "patch": "@@ -59,24 +59,6 @@ struct tui_locator_window : public tui_win_info\n \n   void rerender () override;\n \n-  /* Update the locator, with the provided arguments.\n-\n-     Returns true if any of the locator's fields were actually\n-     changed, and false otherwise.  */\n-  bool set_locator_info (struct gdbarch *gdbarch,\n-\t\t\t const struct symtab_and_line &sal,\n-\t\t\t const char *procname);\n-\n-  /* Set the full_name portion of the locator.  */\n-  void set_locator_fullname (const char *fullname);\n-\n-  std::string full_name;\n-  std::string proc_name;\n-  int line_no = 0;\n-  CORE_ADDR addr = 0;\n-  /* Architecture associated with code at this location.  */\n-  struct gdbarch *gdbarch = nullptr;\n-\n protected:\n \n   void do_scroll_vertical (int n) override\n@@ -96,7 +78,6 @@ struct tui_locator_window : public tui_win_info\n   std::string make_status_line () const;\n };\n \n-extern void tui_update_locator_fullname (struct symtab *symtab);\n extern void tui_show_locator_content (void);\n extern bool tui_show_frame_info (struct frame_info *);\n "
    },
    {
      "sha": "35776f2f5c9889161e420a42556b5dd46076aa83",
      "filename": "gdb/tui/tui-wingeneral.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-wingeneral.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-wingeneral.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-wingeneral.c?ref=f237f998d1168139d599c550d54169cd8f94052d",
      "patch": "@@ -200,13 +200,9 @@ tui_win_info::make_visible (bool visible)\n void\n tui_refresh_all ()\n {\n-  struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n-\n   for (tui_win_info *win_info : all_tui_windows ())\n     {\n       if (win_info->is_visible ())\n \twin_info->refresh_window ();\n     }\n-  if (locator->is_visible ())\n-    locator->refresh_window ();\n }"
    },
    {
      "sha": "058079e208aa44fdeaa3104d7617b8f712ec378a",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=f237f998d1168139d599c550d54169cd8f94052d",
      "patch": "@@ -39,6 +39,7 @@\n #include \"tui/tui-winsource.h\"\n #include \"tui/tui-source.h\"\n #include \"tui/tui-disasm.h\"\n+#include \"tui/tui-location.h\"\n #include \"gdb_curses.h\"\n \n /* Function to display the \"main\" routine.  */\n@@ -58,7 +59,7 @@ tui_display_main ()\n \n \t  tui_update_source_windows_with_addr (gdbarch, addr);\n \t  s = find_pc_line_symtab (addr);\n-\t  tui_update_locator_fullname (s);\n+\t  tui_location.set_location (s);\n \t}\n     }\n }"
    },
    {
      "sha": "6aa6cf947b126ca1a3ad35b7327ed1d539ddd022",
      "filename": "gdb/tui/tui.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f237f998d1168139d599c550d54169cd8f94052d/gdb/tui/tui.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui.h?ref=f237f998d1168139d599c550d54169cd8f94052d",
      "patch": "@@ -38,6 +38,7 @@ enum tui_win_type\n   DISASSEM_WIN,\n   DATA_WIN,\n   CMD_WIN,\n+  STATUS_WIN,\n   /* This must ALWAYS be AFTER the major windows last.  */\n   MAX_MAJOR_WINDOWS,\n };"
    }
  ]
}