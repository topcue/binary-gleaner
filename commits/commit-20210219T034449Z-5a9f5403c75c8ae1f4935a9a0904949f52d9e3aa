{
  "sha": "5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWE5ZjU0MDNjNzVjOGFlMWY0OTM1YTlhMDkwNDk0OWY1MmQ5ZTNhYQ==",
  "commit": {
    "author": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-01-26T10:02:38Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-02-19T03:44:49Z"
    },
    "message": "RISC-V: PR27158, fixed UJ/SB types and added CSS/CL/CS types for .insn.\n\n* Renamed obsolete UJ/SB types and RVC types, also added CSS/CL(CS) types,\n\n[VALID/EXTRACT/ENCODE macros]\nBTYPE_IMM:            Renamed from SBTYPE_IMM.\nJTYPE_IMM:            Renamed from UJTYPE_IMM.\nCITYPE_IMM:           Renamed from RVC_IMM.\nCITYPE_LUI_IMM:       Renamed from RVC_LUI_IMM.\nCITYPE_ADDI16SP_IMM:  Renamed from RVC_ADDI16SP_IMM.\nCITYPE_LWSP_IMM:      Renamed from RVC_LWSP_IMM.\nCITYPE_LDSP_IMM:      Renamed from RVC_LDSP_IMM.\nCIWTYPE_IMM:          Renamed from RVC_UIMM8.\nCIWTYPE_ADDI4SPN_IMM: Renamed from RVC_ADDI4SPN_IMM.\nCSSTYPE_IMM:          Added for .insn without special encoding.\nCSSTYPE_SWSP_IMM:     Renamed from RVC_SWSP_IMM.\nCSSTYPE_SDSP_IMM:     Renamed from RVC_SDSP_IMM.\nCLTYPE_IMM:           Added for .insn without special encoding.\nCLTYPE_LW_IMM:        Renamed from RVC_LW_IMM.\nCLTYPE_LD_IMM:        Renamed from RVC_LD_IMM.\nRVC_SIMM3:            Unused and removed.\nCBTYPE_IMM:           Renamed from RVC_B_IMM.\nCJTYPE_IMM:           Renamed from RVC_J_IMM.\n\n* Added new operands and removed the unused ones,\n\nC5: Unsigned CL(CS) immediate, added for .insn directive.\nC6: Unsigned CSS immediate, added for .insn directive.\nCi: Unused and removed.\nC<: Unused and removed.\n\nbfd/\n    PR 27158\n    * elfnn-riscv.c (perform_relocation): Updated encoding macros.\n    (_bfd_riscv_relax_call): Likewise.\n    (_bfd_riscv_relax_lui): Likewise.\n    * elfxx-riscv.c (howto_table): Likewise.\ngas/\n    PR 27158\n    * config/tc-riscv.c (riscv_ip): Updated encoding macros.\n    (md_apply_fix): Likewise.\n    (md_convert_frag_branch): Likewise.\n    (validate_riscv_insn): Likewise.  Also arranged operands, including\n    added C5 and C6 operands, and removed unused Ci and C< operands.\n    * doc/c-riscv.texi: Updated and added CSS/CL/CS types.\n    * testsuite/gas/riscv/insn.d: Added CSS/CL/CS instructions.\n    * testsuite/gas/riscv/insn.s: Likewise.\ngdb/\n    PR 27158\n    * riscv-tdep.c (decode_ci_type_insn): Updated encoding macros.\n    (decode_j_type_insn): Likewise.\n    (decode_cj_type_insn): Likewise.\n    (decode_b_type_insn): Likewise.\n    (decode): Likewise.\ninclude/\n    PR 27158\n    * opcode/riscv.h: Updated encoding macros.\nopcodes/\n    PR 27158\n    * riscv-dis.c (print_insn_args): Updated encoding macros.\n    * riscv-opc.c (MASK_RVC_IMM): defined to ENCODE_CITYPE_IMM.\n    (match_c_addi16sp): Updated encoding macros.\n    (match_c_lui): Likewise.\n    (match_c_lui_with_hint): Likewise.\n    (match_c_addi4spn): Likewise.\n    (match_c_slli): Likewise.\n    (match_slli_as_c_slli): Likewise.\n    (match_c_slli64): Likewise.\n    (match_srxi_as_c_srxi): Likewise.\n    (riscv_insn_types): Added .insn css/cl/cs.\nsim/\n    PR 27158\n    * riscv/sim-main.c (execute_i): Updated encoding macros.",
    "tree": {
      "sha": "7fd17df7fe3b4eb80cb7dc6d03087b7a5c04857a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7fd17df7fe3b4eb80cb7dc6d03087b7a5c04857a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "2f973f134d7752cbc662ec65da8ad8bbe4c6fb8f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f973f134d7752cbc662ec65da8ad8bbe4c6fb8f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2f973f134d7752cbc662ec65da8ad8bbe4c6fb8f"
    }
  ],
  "stats": {
    "total": 725,
    "additions": 417,
    "deletions": 308
  },
  "files": [
    {
      "sha": "7c7afe1edb0d934f4113c75742288410d8ccd0ba",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
      "patch": "@@ -1,3 +1,11 @@\n+2021-02-19  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\tPR 27158\n+\t* elfnn-riscv.c (perform_relocation): Updated encoding macros.\n+\t(_bfd_riscv_relax_call): Likewise.\n+\t(_bfd_riscv_relax_lui): Likewise.\n+\t* elfxx-riscv.c (howto_table): Likewise.\n+\n 2021-02-18  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* Makefile.am: Added cpu-riscv.h."
    },
    {
      "sha": "ec8a3e73c8fb60dfe0f0c017cfaa17da7245206e",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 17,
      "deletions": 17,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
      "patch": "@@ -1646,27 +1646,27 @@ perform_relocation (const reloc_howto_type *howto,\n       break;\n \n     case R_RISCV_JAL:\n-      if (!VALID_UJTYPE_IMM (value))\n+      if (!VALID_JTYPE_IMM (value))\n \treturn bfd_reloc_overflow;\n-      value = ENCODE_UJTYPE_IMM (value);\n+      value = ENCODE_JTYPE_IMM (value);\n       break;\n \n     case R_RISCV_BRANCH:\n-      if (!VALID_SBTYPE_IMM (value))\n+      if (!VALID_BTYPE_IMM (value))\n \treturn bfd_reloc_overflow;\n-      value = ENCODE_SBTYPE_IMM (value);\n+      value = ENCODE_BTYPE_IMM (value);\n       break;\n \n     case R_RISCV_RVC_BRANCH:\n-      if (!VALID_RVC_B_IMM (value))\n+      if (!VALID_CBTYPE_IMM (value))\n \treturn bfd_reloc_overflow;\n-      value = ENCODE_RVC_B_IMM (value);\n+      value = ENCODE_CBTYPE_IMM (value);\n       break;\n \n     case R_RISCV_RVC_JUMP:\n-      if (!VALID_RVC_J_IMM (value))\n+      if (!VALID_CJTYPE_IMM (value))\n \treturn bfd_reloc_overflow;\n-      value = ENCODE_RVC_J_IMM (value);\n+      value = ENCODE_CJTYPE_IMM (value);\n       break;\n \n     case R_RISCV_RVC_LUI:\n@@ -1679,12 +1679,12 @@ perform_relocation (const reloc_howto_type *howto,\n \t\t\t\t\t contents + rel->r_offset);\n \t  insn = (insn & ~MATCH_C_LUI) | MATCH_C_LI;\n \t  riscv_put_insn (howto->bitsize, insn, contents + rel->r_offset);\n-\t  value = ENCODE_RVC_IMM (0);\n+\t  value = ENCODE_CITYPE_IMM (0);\n \t}\n-      else if (!VALID_RVC_LUI_IMM (RISCV_CONST_HIGH_PART (value)))\n+      else if (!VALID_CITYPE_LUI_IMM (RISCV_CONST_HIGH_PART (value)))\n \treturn bfd_reloc_overflow;\n       else\n-\tvalue = ENCODE_RVC_LUI_IMM (RISCV_CONST_HIGH_PART (value));\n+\tvalue = ENCODE_CITYPE_LUI_IMM (RISCV_CONST_HIGH_PART (value));\n       break;\n \n     case R_RISCV_32:\n@@ -4139,7 +4139,7 @@ _bfd_riscv_relax_call (bfd *abfd, asection *sec, asection *sym_sec,\n      cause the PC-relative offset to later increase, so we need to add in the\n      max alignment of any section inclusive from the call to the target.\n      Otherwise, we only need to use the alignment of the current section.  */\n-  if (VALID_UJTYPE_IMM (foff))\n+  if (VALID_JTYPE_IMM (foff))\n     {\n       if (sym_sec->output_section == sec->output_section\n \t  && sym_sec->output_section != bfd_abs_section_ptr)\n@@ -4148,7 +4148,7 @@ _bfd_riscv_relax_call (bfd *abfd, asection *sec, asection *sym_sec,\n     }\n \n   /* See if this function call can be shortened.  */\n-  if (!VALID_UJTYPE_IMM (foff) && !(!bfd_link_pic (link_info) && near_zero))\n+  if (!VALID_JTYPE_IMM (foff) && !(!bfd_link_pic (link_info) && near_zero))\n     return TRUE;\n \n   /* Shorten the function call.  */\n@@ -4157,7 +4157,7 @@ _bfd_riscv_relax_call (bfd *abfd, asection *sec, asection *sym_sec,\n   auipc = bfd_getl32 (contents + rel->r_offset);\n   jalr = bfd_getl32 (contents + rel->r_offset + 4);\n   rd = (jalr >> OP_SH_RD) & OP_MASK_RD;\n-  rvc = rvc && VALID_RVC_J_IMM (foff);\n+  rvc = rvc && VALID_CJTYPE_IMM (foff);\n \n   /* C.J exists on RV32 and RV64, but C.JAL is RV32-only.  */\n   rvc = rvc && (rd == 0 || (rd == X_RA && ARCH_SIZE == 32));\n@@ -4169,7 +4169,7 @@ _bfd_riscv_relax_call (bfd *abfd, asection *sec, asection *sym_sec,\n       auipc = rd == 0 ? MATCH_C_J : MATCH_C_JAL;\n       len = 2;\n     }\n-  else if (VALID_UJTYPE_IMM (foff))\n+  else if (VALID_JTYPE_IMM (foff))\n     {\n       /* Relax to JAL rd, addr.  */\n       r_type = R_RISCV_JAL;\n@@ -4298,8 +4298,8 @@ _bfd_riscv_relax_lui (bfd *abfd,\n \n   if (use_rvc\n       && ELFNN_R_TYPE (rel->r_info) == R_RISCV_HI20\n-      && VALID_RVC_LUI_IMM (RISCV_CONST_HIGH_PART (symval))\n-      && VALID_RVC_LUI_IMM (RISCV_CONST_HIGH_PART (symval)\n+      && VALID_CITYPE_LUI_IMM (RISCV_CONST_HIGH_PART (symval))\n+      && VALID_CITYPE_LUI_IMM (RISCV_CONST_HIGH_PART (symval)\n \t\t\t    + (link_info->relro ? 2 * ELF_MAXPAGESIZE\n \t\t\t       : ELF_MAXPAGESIZE)))\n     {"
    },
    {
      "sha": "fd0fb490347e7822951eb961525839ee27e78d9a",
      "filename": "bfd/elfxx-riscv.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/bfd/elfxx-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/bfd/elfxx-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.c?ref=5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
      "patch": "@@ -235,7 +235,7 @@ static reloc_howto_type howto_table[] =\n \t \"R_RISCV_BRANCH\",\t\t/* name */\n \t FALSE,\t\t\t\t/* partial_inplace */\n \t 0,\t\t\t\t/* src_mask */\n-\t ENCODE_SBTYPE_IMM (-1U),\t/* dst_mask */\n+\t ENCODE_BTYPE_IMM (-1U),\t/* dst_mask */\n \t TRUE),\t\t\t\t/* pcrel_offset */\n \n   /* 20-bit PC-relative jump offset.  */\n@@ -250,7 +250,7 @@ static reloc_howto_type howto_table[] =\n \t \"R_RISCV_JAL\",\t\t\t/* name */\n \t FALSE,\t\t\t\t/* partial_inplace */\n \t 0,\t\t\t\t/* src_mask */\n-\t ENCODE_UJTYPE_IMM (-1U),\t/* dst_mask */\n+\t ENCODE_JTYPE_IMM (-1U),\t/* dst_mask */\n \t TRUE),\t\t\t\t/* pcrel_offset */\n \n   /* 32-bit PC-relative function call (AUIPC/JALR).  */\n@@ -659,7 +659,7 @@ static reloc_howto_type howto_table[] =\n \t \"R_RISCV_RVC_BRANCH\",\t\t/* name */\n \t FALSE,\t\t\t\t/* partial_inplace */\n \t 0,\t\t\t\t/* src_mask */\n-\t ENCODE_RVC_B_IMM (-1U),\t/* dst_mask */\n+\t ENCODE_CBTYPE_IMM (-1U),\t/* dst_mask */\n \t TRUE),\t\t\t\t/* pcrel_offset */\n \n   /* 11-bit PC-relative jump offset.  */\n@@ -674,7 +674,7 @@ static reloc_howto_type howto_table[] =\n \t \"R_RISCV_RVC_JUMP\",\t\t/* name */\n \t FALSE,\t\t\t\t/* partial_inplace */\n \t 0,\t\t\t\t/* src_mask */\n-\t ENCODE_RVC_J_IMM (-1U),\t/* dst_mask */\n+\t ENCODE_CJTYPE_IMM (-1U),\t/* dst_mask */\n \t TRUE),\t\t\t\t/* pcrel_offset */\n \n   /* High 6 bits of 18-bit absolute address.  */\n@@ -689,7 +689,7 @@ static reloc_howto_type howto_table[] =\n \t \"R_RISCV_RVC_LUI\",\t\t/* name */\n \t FALSE,\t\t\t\t/* partial_inplace */\n \t 0,\t\t\t\t/* src_mask */\n-\t ENCODE_RVC_IMM (-1U),\t\t/* dst_mask */\n+\t ENCODE_CITYPE_IMM (-1U),\t/* dst_mask */\n \t FALSE),\t\t\t/* pcrel_offset */\n \n   /* GP-relative load.  */"
    },
    {
      "sha": "ae1bd92ff9f1656d4dfca17773c5310ee2f839aa",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
      "patch": "@@ -1,3 +1,15 @@\n+2021-02-19  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\tPR 27158\n+\t* config/tc-riscv.c (riscv_ip): Updated encoding macros.\n+\t(md_apply_fix): Likewise.\n+\t(md_convert_frag_branch): Likewise.\n+\t(validate_riscv_insn): Likewise.  Also arranged operands, including\n+\tadded C5 and C6 operands, and removed unused Ci and C< operands.\n+\t* doc/c-riscv.texi: Updated and added CSS/CL/CS types.\n+\t* testsuite/gas/riscv/insn.d: Added CSS/CL/CS instructions.\n+\t* testsuite/gas/riscv/insn.s: Likewise.\n+\n 2021-02-18  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* config/tc-riscv.c: Included cpu-riscv.h."
    },
    {
      "sha": "5f4f3ec273d56404262f6ef7c172e7974b220657",
      "filename": "gas/config/tc-riscv.c",
      "status": "modified",
      "additions": 92,
      "deletions": 89,
      "changes": 181,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/gas/config/tc-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/gas/config/tc-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.c?ref=5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
      "patch": "@@ -996,36 +996,37 @@ validate_riscv_insn (const struct riscv_opcode *opc, int length)\n       case 'C': /* RVC */\n \tswitch (c = *p++)\n \t  {\n-\t  case 'a': used_bits |= ENCODE_RVC_J_IMM (-1U); break;\n-\t  case 'c': break; /* RS1, constrained to equal sp.  */\n-\t  case 'i': used_bits |= ENCODE_RVC_SIMM3(-1U); break;\n-\t  case 'j': used_bits |= ENCODE_RVC_IMM (-1U); break;\n-\t  case 'o': used_bits |= ENCODE_RVC_IMM (-1U); break;\n-\t  case 'k': used_bits |= ENCODE_RVC_LW_IMM (-1U); break;\n-\t  case 'l': used_bits |= ENCODE_RVC_LD_IMM (-1U); break;\n-\t  case 'm': used_bits |= ENCODE_RVC_LWSP_IMM (-1U); break;\n-\t  case 'n': used_bits |= ENCODE_RVC_LDSP_IMM (-1U); break;\n-\t  case 'p': used_bits |= ENCODE_RVC_B_IMM (-1U); break;\n+\t  case 'U': break; /* CRS1, constrained to equal RD.  */\n+\t  case 'c': break; /* CRS1, constrained to equal sp.  */\n+\t  case 'T': /* CRS2, floating point.  */\n+\t  case 'V': USE_BITS (OP_MASK_CRS2, OP_SH_CRS2); break;\n+\t  case 'S': /* CRS1S, floating point.  */\n \t  case 's': USE_BITS (OP_MASK_CRS1S, OP_SH_CRS1S); break;\n+\t  case 'w': break; /* CRS1S, constrained to equal RD.  */\n+\t  case 'D': /* CRS2S, floating point.  */\n \t  case 't': USE_BITS (OP_MASK_CRS2S, OP_SH_CRS2S); break;\n-\t  case 'u': used_bits |= ENCODE_RVC_IMM (-1U); break;\n-\t  case 'v': used_bits |= ENCODE_RVC_IMM (-1U); break;\n-\t  case 'w': break; /* RS1S, constrained to equal RD.  */\n-\t  case 'x': break; /* RS2S, constrained to equal RD.  */\n-\t  case 'z': break; /* RS2S, constrained to be x0.  */\n-\t  case 'K': used_bits |= ENCODE_RVC_ADDI4SPN_IMM (-1U); break;\n-\t  case 'L': used_bits |= ENCODE_RVC_ADDI16SP_IMM (-1U); break;\n-\t  case 'M': used_bits |= ENCODE_RVC_SWSP_IMM (-1U); break;\n-\t  case 'N': used_bits |= ENCODE_RVC_SDSP_IMM (-1U); break;\n-\t  case 'U': break; /* RS1, constrained to equal RD.  */\n-\t  case 'V': USE_BITS (OP_MASK_CRS2, OP_SH_CRS2); break;\n-\t  case '<': used_bits |= ENCODE_RVC_IMM (-1U); break;\n-\t  case '>': used_bits |= ENCODE_RVC_IMM (-1U); break;\n-\t  case '8': used_bits |= ENCODE_RVC_UIMM8 (-1U); break;\n-\t  case 'S': USE_BITS (OP_MASK_CRS1S, OP_SH_CRS1S); break;\n-\t  case 'T': USE_BITS (OP_MASK_CRS2, OP_SH_CRS2); break;\n-\t  case 'D': USE_BITS (OP_MASK_CRS2S, OP_SH_CRS2S); break;\n-\t  case 'F': /* RVC funct for .insn directive.  */\n+\t  case 'x': break; /* CRS2S, constrained to equal RD.  */\n+\t  case 'z': break; /* CRS2S, constrained to be x0.  */\n+\t  case '>': /* CITYPE immediate, compressed shift.  */\n+\t  case 'u': /* CITYPE immediate, compressed lui.  */\n+\t  case 'v': /* CITYPE immediate, li to compressed lui.  */\n+\t  case 'o': /* CITYPE immediate, allow zero.  */\n+\t  case 'j': used_bits |= ENCODE_CITYPE_IMM (-1U); break;\n+\t  case 'L': used_bits |= ENCODE_CITYPE_ADDI16SP_IMM (-1U); break;\n+\t  case 'm': used_bits |= ENCODE_CITYPE_LWSP_IMM (-1U); break;\n+\t  case 'n': used_bits |= ENCODE_CITYPE_LDSP_IMM (-1U); break;\n+\t  case '6': used_bits |= ENCODE_CSSTYPE_IMM (-1U); break;\n+\t  case 'M': used_bits |= ENCODE_CSSTYPE_SWSP_IMM (-1U); break;\n+\t  case 'N': used_bits |= ENCODE_CSSTYPE_SDSP_IMM (-1U); break;\n+\t  case '8': used_bits |= ENCODE_CIWTYPE_IMM (-1U); break;\n+\t  case 'K': used_bits |= ENCODE_CIWTYPE_ADDI4SPN_IMM (-1U); break;\n+\t  /* CLTYPE and CSTYPE have the same immediate encoding.  */\n+\t  case '5': used_bits |= ENCODE_CLTYPE_IMM (-1U); break;\n+\t  case 'k': used_bits |= ENCODE_CLTYPE_LW_IMM (-1U); break;\n+\t  case 'l': used_bits |= ENCODE_CLTYPE_LD_IMM (-1U); break;\n+\t  case 'p': used_bits |= ENCODE_CBTYPE_IMM (-1U); break;\n+\t  case 'a': used_bits |= ENCODE_CJTYPE_IMM (-1U); break;\n+\t  case 'F': /* Compressed funct for .insn directive.  */\n \t    switch (c = *p++)\n \t      {\n \t\tcase '6': USE_BITS (OP_MASK_CFUNCT6, OP_SH_CFUNCT6); break;\n@@ -1051,34 +1052,36 @@ validate_riscv_insn (const struct riscv_opcode *opc, int length)\n       case ')': break;\n       case '<': USE_BITS (OP_MASK_SHAMTW, OP_SH_SHAMTW); break;\n       case '>': USE_BITS (OP_MASK_SHAMT, OP_SH_SHAMT); break;\n-      case 'A': break;\n-      case 'D': USE_BITS (OP_MASK_RD, OP_SH_RD); break;\n-      case 'Z': USE_BITS (OP_MASK_RS1, OP_SH_RS1); break;\n-      case 'E': USE_BITS (OP_MASK_CSR, OP_SH_CSR); break;\n-      case 'I': break;\n-      case 'R': USE_BITS (OP_MASK_RS3, OP_SH_RS3); break;\n-      case 'S': USE_BITS (OP_MASK_RS1, OP_SH_RS1); break;\n-      case 'U': USE_BITS (OP_MASK_RS1, OP_SH_RS1);\n-\t/* Fall through.  */\n-      case 'T': USE_BITS (OP_MASK_RS2, OP_SH_RS2); break;\n+      case 'A': break; /* Macro operand, must be symbol.  */\n+      case 'B': break; /* Macro operand, must be symbol or constant.  */\n+      case 'I': break; /* Macro operand, must be constant.  */\n+      case 'D': /* RD, floating point.  */\n       case 'd': USE_BITS (OP_MASK_RD, OP_SH_RD); break;\n-      case 'm': USE_BITS (OP_MASK_RM, OP_SH_RM); break;\n+      case 'Z': /* RS1, CSR number.  */\n+      case 'S': /* RS1, floating point.  */\n       case 's': USE_BITS (OP_MASK_RS1, OP_SH_RS1); break;\n+      case 'U': /* RS1 and RS2 are the same, floating point.  */\n+\tUSE_BITS (OP_MASK_RS1, OP_SH_RS1);\n+\t/* Fall through.  */\n+      case 'T': /* RS2, floating point.  */\n       case 't': USE_BITS (OP_MASK_RS2, OP_SH_RS2); break;\n-      case 'r': USE_BITS (OP_MASK_RS3, OP_SH_RS3);     break;\n+      case 'R': /* RS3, floating point.  */\n+      case 'r': USE_BITS (OP_MASK_RS3, OP_SH_RS3); break;\n+      case 'm': USE_BITS (OP_MASK_RM, OP_SH_RM); break;\n+      case 'E': USE_BITS (OP_MASK_CSR, OP_SH_CSR); break;\n       case 'P': USE_BITS (OP_MASK_PRED, OP_SH_PRED); break;\n       case 'Q': USE_BITS (OP_MASK_SUCC, OP_SH_SUCC); break;\n-      case 'o':\n+      case 'o': /* ITYPE immediate, load displacement.  */\n       case 'j': used_bits |= ENCODE_ITYPE_IMM (-1U); break;\n-      case 'a': used_bits |= ENCODE_UJTYPE_IMM (-1U); break;\n-      case 'p': used_bits |= ENCODE_SBTYPE_IMM (-1U); break;\n+      case 'a': used_bits |= ENCODE_JTYPE_IMM (-1U); break;\n+      case 'p': used_bits |= ENCODE_BTYPE_IMM (-1U); break;\n       case 'q': used_bits |= ENCODE_STYPE_IMM (-1U); break;\n       case 'u': used_bits |= ENCODE_UTYPE_IMM (-1U); break;\n-      case 'z': break;\n-      case '[': break;\n-      case ']': break;\n-      case '0': break;\n-      case '1': break;\n+      case 'z': break; /* Zero immediate.  */\n+      case '[': break; /* Unused operand.  */\n+      case ']': break; /* Unused operand.  */\n+      case '0': break; /* AMO displacement, must to zero.  */\n+      case '1': break; /* Relaxation operand.  */\n       case 'F': /* Funct for .insn directive.  */\n \tswitch (c = *p++)\n \t  {\n@@ -2078,130 +2081,130 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t      || imm_expr->X_add_number <= 0\n \t\t      || imm_expr->X_add_number >= 64)\n \t\t    break;\n-\t\t  ip->insn_opcode |= ENCODE_RVC_IMM (imm_expr->X_add_number);\n+\t\t  ip->insn_opcode |= ENCODE_CITYPE_IMM (imm_expr->X_add_number);\n \t\trvc_imm_done:\n \t\t  s = expr_end;\n \t\t  imm_expr->X_op = O_absent;\n \t\t  continue;\n-\t\tcase '<':\n+\t\tcase '5':\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || imm_expr->X_add_number <= 0\n+\t\t      || imm_expr->X_add_number < 0\n \t\t      || imm_expr->X_add_number >= 32\n-\t\t      || !VALID_RVC_IMM ((valueT) imm_expr->X_add_number))\n+\t\t      || !VALID_CLTYPE_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n-\t\t  ip->insn_opcode |= ENCODE_RVC_IMM (imm_expr->X_add_number);\n+\t\t    ip->insn_opcode |= ENCODE_CLTYPE_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n-\t\tcase '8':\n+\t\tcase '6':\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n \t\t      || imm_expr->X_add_number < 0\n-\t\t      || imm_expr->X_add_number >= 256\n-\t\t      || !VALID_RVC_UIMM8 ((valueT) imm_expr->X_add_number))\n+\t\t      || imm_expr->X_add_number >= 64\n+\t\t      || !VALID_CSSTYPE_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n-\t\t  ip->insn_opcode |= ENCODE_RVC_UIMM8 (imm_expr->X_add_number);\n+\t\t    ip->insn_opcode |= ENCODE_CSSTYPE_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n-\t\tcase 'i':\n+\t\tcase '8':\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || imm_expr->X_add_number == 0\n-\t\t      || !VALID_RVC_SIMM3 ((valueT) imm_expr->X_add_number))\n+\t\t      || imm_expr->X_add_number < 0\n+\t\t      || imm_expr->X_add_number >= 256\n+\t\t      || !VALID_CIWTYPE_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n-\t\t  ip->insn_opcode |= ENCODE_RVC_SIMM3 (imm_expr->X_add_number);\n+\t\t    ip->insn_opcode |= ENCODE_CIWTYPE_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n \t\tcase 'j':\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n \t\t      || imm_expr->X_add_number == 0\n-\t\t      || !VALID_RVC_IMM ((valueT) imm_expr->X_add_number))\n+\t\t      || !VALID_CITYPE_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n-\t\t  ip->insn_opcode |= ENCODE_RVC_IMM (imm_expr->X_add_number);\n+\t\t  ip->insn_opcode |= ENCODE_CITYPE_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n \t\tcase 'k':\n \t\t  if (riscv_handle_implicit_zero_offset (imm_expr, s))\n \t\t    continue;\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || !VALID_RVC_LW_IMM ((valueT) imm_expr->X_add_number))\n+\t\t      || !VALID_CLTYPE_LW_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n-\t\t  ip->insn_opcode |= ENCODE_RVC_LW_IMM (imm_expr->X_add_number);\n+\t\t  ip->insn_opcode |= ENCODE_CLTYPE_LW_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n \t\tcase 'l':\n \t\t  if (riscv_handle_implicit_zero_offset (imm_expr, s))\n \t\t    continue;\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || !VALID_RVC_LD_IMM ((valueT) imm_expr->X_add_number))\n+\t\t      || !VALID_CLTYPE_LD_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n-\t\t  ip->insn_opcode |= ENCODE_RVC_LD_IMM (imm_expr->X_add_number);\n+\t\t  ip->insn_opcode |= ENCODE_CLTYPE_LD_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n \t\tcase 'm':\n \t\t  if (riscv_handle_implicit_zero_offset (imm_expr, s))\n \t\t    continue;\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || !VALID_RVC_LWSP_IMM ((valueT) imm_expr->X_add_number))\n+\t\t      || !VALID_CITYPE_LWSP_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |=\n-\t\t    ENCODE_RVC_LWSP_IMM (imm_expr->X_add_number);\n+\t\t    ENCODE_CITYPE_LWSP_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n \t\tcase 'n':\n \t\t  if (riscv_handle_implicit_zero_offset (imm_expr, s))\n \t\t    continue;\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || !VALID_RVC_LDSP_IMM ((valueT) imm_expr->X_add_number))\n+\t\t      || !VALID_CITYPE_LDSP_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |=\n-\t\t    ENCODE_RVC_LDSP_IMM (imm_expr->X_add_number);\n+\t\t    ENCODE_CITYPE_LDSP_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n \t\tcase 'o':\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n \t\t      /* C.addiw, c.li, and c.andi allow zero immediate.\n \t\t\t C.addi allows zero immediate as hint.  Otherwise this\n \t\t\t is same as 'j'.  */\n-\t\t      || !VALID_RVC_IMM ((valueT) imm_expr->X_add_number))\n+\t\t      || !VALID_CITYPE_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n-\t\t  ip->insn_opcode |= ENCODE_RVC_IMM (imm_expr->X_add_number);\n+\t\t  ip->insn_opcode |= ENCODE_CITYPE_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n \t\tcase 'K':\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n \t\t      || imm_expr->X_add_number == 0\n-\t\t      || !VALID_RVC_ADDI4SPN_IMM ((valueT) imm_expr->X_add_number))\n+\t\t      || !VALID_CIWTYPE_ADDI4SPN_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |=\n-\t\t    ENCODE_RVC_ADDI4SPN_IMM (imm_expr->X_add_number);\n+\t\t    ENCODE_CIWTYPE_ADDI4SPN_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n \t\tcase 'L':\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || imm_expr->X_add_number == 0\n-\t\t      || !VALID_RVC_ADDI16SP_IMM ((valueT) imm_expr->X_add_number))\n+\t\t      || !VALID_CITYPE_ADDI16SP_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |=\n-\t\t    ENCODE_RVC_ADDI16SP_IMM (imm_expr->X_add_number);\n+\t\t    ENCODE_CITYPE_ADDI16SP_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n \t\tcase 'M':\n \t\t  if (riscv_handle_implicit_zero_offset (imm_expr, s))\n \t\t    continue;\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || !VALID_RVC_SWSP_IMM ((valueT) imm_expr->X_add_number))\n+\t\t      || !VALID_CSSTYPE_SWSP_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |=\n-\t\t    ENCODE_RVC_SWSP_IMM (imm_expr->X_add_number);\n+\t\t    ENCODE_CSSTYPE_SWSP_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n \t\tcase 'N':\n \t\t  if (riscv_handle_implicit_zero_offset (imm_expr, s))\n \t\t    continue;\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n \t\t      || imm_expr->X_op != O_constant\n-\t\t      || !VALID_RVC_SDSP_IMM ((valueT) imm_expr->X_add_number))\n+\t\t      || !VALID_CSSTYPE_SDSP_IMM ((valueT) imm_expr->X_add_number))\n \t\t    break;\n \t\t  ip->insn_opcode |=\n-\t\t    ENCODE_RVC_SDSP_IMM (imm_expr->X_add_number);\n+\t\t    ENCODE_CSSTYPE_SDSP_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n \t\tcase 'u':\n \t\t  p = percent_op_utype;\n@@ -2215,7 +2218,7 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t\t\t  && (imm_expr->X_add_number <\n \t\t\t      RISCV_BIGIMM_REACH - RISCV_RVC_IMM_REACH / 2)))\n \t\t    break;\n-\t\t  ip->insn_opcode |= ENCODE_RVC_IMM (imm_expr->X_add_number);\n+\t\t  ip->insn_opcode |= ENCODE_CITYPE_IMM (imm_expr->X_add_number);\n \t\t  goto rvc_imm_done;\n \t\tcase 'v':\n \t\t  if (my_getSmallExpression (imm_expr, imm_reloc, s, p)\n@@ -3114,7 +3117,7 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg ATTRIBUTE_UNUSED)\n \t  /* Fill in a tentative value to improve objdump readability.  */\n \t  bfd_vma target = S_GET_VALUE (fixP->fx_addsy) + *valP;\n \t  bfd_vma delta = target - md_pcrel_from (fixP);\n-\t  bfd_putl32 (bfd_getl32 (buf) | ENCODE_UJTYPE_IMM (delta), buf);\n+\t  bfd_putl32 (bfd_getl32 (buf) | ENCODE_JTYPE_IMM (delta), buf);\n \t}\n       break;\n \n@@ -3124,7 +3127,7 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg ATTRIBUTE_UNUSED)\n \t  /* Fill in a tentative value to improve objdump readability.  */\n \t  bfd_vma target = S_GET_VALUE (fixP->fx_addsy) + *valP;\n \t  bfd_vma delta = target - md_pcrel_from (fixP);\n-\t  bfd_putl32 (bfd_getl32 (buf) | ENCODE_SBTYPE_IMM (delta), buf);\n+\t  bfd_putl32 (bfd_getl32 (buf) | ENCODE_BTYPE_IMM (delta), buf);\n \t}\n       break;\n \n@@ -3134,7 +3137,7 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg ATTRIBUTE_UNUSED)\n \t  /* Fill in a tentative value to improve objdump readability.  */\n \t  bfd_vma target = S_GET_VALUE (fixP->fx_addsy) + *valP;\n \t  bfd_vma delta = target - md_pcrel_from (fixP);\n-\t  bfd_putl16 (bfd_getl16 (buf) | ENCODE_RVC_B_IMM (delta), buf);\n+\t  bfd_putl16 (bfd_getl16 (buf) | ENCODE_CBTYPE_IMM (delta), buf);\n \t}\n       break;\n \n@@ -3144,7 +3147,7 @@ md_apply_fix (fixS *fixP, valueT *valP, segT seg ATTRIBUTE_UNUSED)\n \t  /* Fill in a tentative value to improve objdump readability.  */\n \t  bfd_vma target = S_GET_VALUE (fixP->fx_addsy) + *valP;\n \t  bfd_vma delta = target - md_pcrel_from (fixP);\n-\t  bfd_putl16 (bfd_getl16 (buf) | ENCODE_RVC_J_IMM (delta), buf);\n+\t  bfd_putl16 (bfd_getl16 (buf) | ENCODE_CJTYPE_IMM (delta), buf);\n \t}\n       break;\n \n@@ -3530,7 +3533,7 @@ md_convert_frag_branch (fragS *fragp)\n \t    /* Invert the branch condition.  Branch over the jump.  */\n \t    insn = bfd_getl16 (buf);\n \t    insn ^= MATCH_C_BEQZ ^ MATCH_C_BNEZ;\n-\t    insn |= ENCODE_RVC_B_IMM (6);\n+\t    insn |= ENCODE_CBTYPE_IMM (6);\n \t    bfd_putl16 (insn, buf);\n \t    buf += 2;\n \t    goto jump;\n@@ -3557,7 +3560,7 @@ md_convert_frag_branch (fragS *fragp)\n       /* Invert the branch condition.  Branch over the jump.  */\n       insn = bfd_getl32 (buf);\n       insn ^= MATCH_BEQ ^ MATCH_BNE;\n-      insn |= ENCODE_SBTYPE_IMM (8);\n+      insn |= ENCODE_BTYPE_IMM (8);\n       bfd_putl32 (insn, buf);\n       buf += 4;\n "
    },
    {
      "sha": "c15297e1beab9edcf1984ee0fdd807d7e8ec3b42",
      "filename": "gas/doc/c-riscv.texi",
      "status": "modified",
      "additions": 93,
      "deletions": 67,
      "changes": 160,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/gas/doc/c-riscv.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/gas/doc/c-riscv.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/c-riscv.texi?ref=5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
      "patch": "@@ -363,7 +363,7 @@ The pseudo la.tls.gd instruction can be expended to\n @cindex instruction formats, risc-v\n @cindex RISC-V instruction formats\n \n-The RISC-V Instruction Set Manual Volume I: User-Level ISA lists 12\n+The RISC-V Instruction Set Manual Volume I: User-Level ISA lists 15\n instruction formats where some of the formats have multiple variants.\n For the @samp{.insn} pseudo directive the assembler recognizes some\n of the formats.\n@@ -394,6 +394,8 @@ only accept s0-s1, a0-a5, fs0-fs1 and fa0-fa5.\n @item simm12 @tab Sign-extended 12-bit immediate for operand x.\n @item simm20 @tab Sign-extended 20-bit immediate for operand x.\n @item simm6 @tab Sign-extended 6-bit immediate for operand x.\n+@item uimm5 @tab Unsigned 5-bit immediate for operand x.\n+@item uimm6 @tab Unsigned 6-bit immediate for operand x.\n @item uimm8 @tab Unsigned 8-bit immediate for operand x.\n @item symbol @tab Symbol or lable reference for operand x.\n @end multitable\n@@ -487,112 +489,136 @@ The following table lists the RISC-V instruction formats that are available\n with the @samp{.insn} pseudo directive:\n \n @table @code\n-@item R type: .insn r opcode, func3, func7, rd, rs1, rs2\n+@item R type: .insn r opcode6, func3, func7, rd, rs1, rs2\n @verbatim\n-+-------+-----+-----+-------+----+-------------+\n-| func7 | rs2 | rs1 | func3 | rd |      opcode |\n-+-------+-----+-----+-------+----+-------------+\n-31      25    20    15      12   7             0\n++-------+-----+-----+-------+----+---------+\n+| func7 | rs2 | rs1 | func3 | rd | opcode6 |\n++-------+-----+-----+-------+----+---------+\n+31      25    20    15      12   7        0\n @end verbatim\n \n-@item R type with 4 register operands: .insn r opcode, func3, func2, rd, rs1, rs2, rs3\n-@itemx R4 type: .insn r4 opcode, func3, func2, rd, rs1, rs2, rs3\n+@item R type with 4 register operands: .insn r opcode6, func3, func2, rd, rs1, rs2, rs3\n+@itemx R4 type: .insn r4 opcode6, func3, func2, rd, rs1, rs2, rs3\n @verbatim\n-+-----+-------+-----+-----+-------+----+-------------+\n-| rs3 | func2 | rs2 | rs1 | func3 | rd |      opcode |\n-+-----+-------+-----+-----+-------+----+-------------+\n-31    27      25    20    15      12   7             0\n++-----+-------+-----+-----+-------+----+---------+\n+| rs3 | func2 | rs2 | rs1 | func3 | rd | opcode6 |\n++-----+-------+-----+-----+-------+----+---------+\n+31    27      25    20    15      12   7         0\n @end verbatim\n \n-@item I type: .insn i opcode, func3, rd, rs1, simm12\n-@itemx I type: .insn i opcode, func3, rd, simm12(rs1)\n+@item I type: .insn i opcode6, func3, rd, rs1, simm12\n+@itemx I type: .insn i opcode6, func3, rd, simm12(rs1)\n @verbatim\n-+-------------+-----+-------+----+-------------+\n-|      simm12 | rs1 | func3 | rd |      opcode |\n-+-------------+-----+-------+----+-------------+\n-31            20    15      12   7             0\n++--------------+-----+-------+----+---------+\n+| simm12[11:0] | rs1 | func3 | rd | opcode6 |\n++--------------+-----+-------+----+---------+\n+31             20    15      12   7         0\n @end verbatim\n \n-@item S type: .insn s opcode, func3, rs2, simm12(rs1)\n+@item S type: .insn s opcode6, func3, rs2, simm12(rs1)\n @verbatim\n-+--------------+-----+-----+-------+-------------+-------------+\n-| simm12[11:5] | rs2 | rs1 | func3 | simm12[4:0] |      opcode |\n-+--------------+-----+-----+-------+-------------+-------------+\n-31             25    20    15      12            7             0\n++--------------+-----+-----+-------+-------------+---------+\n+| simm12[11:5] | rs2 | rs1 | func3 | simm12[4:0] | opcode6 |\n++--------------+-----+-----+-------+-------------+---------+\n+31             25    20    15      12            7         0\n @end verbatim\n \n-@item B type: .insn s opcode, func3, rs1, rs2, symbol\n-@itemx SB type: .insn sb opcode, func3, rs1, rs2, symbol\n+@item B type: .insn s opcode6, func3, rs1, rs2, symbol\n+@itemx SB type: .insn sb opcode6, func3, rs1, rs2, symbol\n @verbatim\n-+------------+--------------+-----+-----+-------+-------------+-------------+--------+\n-| simm12[12] | simm12[10:5] | rs2 | rs1 | func3 | simm12[4:1] | simm12[11]] | opcode |\n-+------------+--------------+-----+-----+-------+-------------+-------------+--------+\n-31          30            25    20    15      12           7            0\n++-----------------+-----+-----+-------+----------------+---------+\n+| simm12[12|10:5] | rs2 | rs1 | func3 | simm12[4:1|11] | opcode6 |\n++-----------------+-----+-----+-------+----------------+---------+\n+31                25    20    15      12               7         0\n @end verbatim\n \n-@item U type: .insn u opcode, rd, simm20\n+@item U type: .insn u opcode6, rd, simm20\n @verbatim\n-+---------------------------+----+-------------+\n-|                    simm20 | rd |      opcode |\n-+---------------------------+----+-------------+\n-31                          12   7             0\n++--------------------------+----+---------+\n+| simm20[20|10:1|11|19:12] | rd | opcode6 |\n++--------------------------+----+---------+\n+31                         12   7         0\n @end verbatim\n \n-@item J type: .insn j opcode, rd, symbol\n-@itemx UJ type: .insn uj opcode, rd, symbol\n+@item J type: .insn j opcode6, rd, symbol\n+@itemx UJ type: .insn uj opcode6, rd, symbol\n @verbatim\n-+------------+--------------+------------+---------------+----+-------------+\n-| simm20[20] | simm20[10:1] | simm20[11] | simm20[19:12] | rd |      opcode |\n-+------------+--------------+------------+---------------+----+-------------+\n-31           30             21           20              12   7             0\n++------------+--------------+------------+---------------+----+---------+\n+| simm20[20] | simm20[10:1] | simm20[11] | simm20[19:12] | rd | opcode6 |\n++------------+--------------+------------+---------------+----+---------+\n+31           30             21           20              12   7         0\n @end verbatim\n \n @item CR type: .insn cr opcode2, func4, rd, rs2\n @verbatim\n-+---------+--------+-----+---------+\n-|   func4 | rd/rs1 | rs2 | opcode2 |\n-+---------+--------+-----+---------+\n-15        12       7     2        0\n++-------+--------+-----+---------+\n+| func4 | rd/rs1 | rs2 | opcode2 |\n++-------+--------+-----+---------+\n+15      12       7     2        0\n @end verbatim\n \n @item CI type: .insn ci opcode2, func3, rd, simm6\n @verbatim\n-+---------+-----+--------+-----+---------+\n-|   func3 | imm | rd/rs1 | imm | opcode2 |\n-+---------+-----+--------+-----+---------+\n-15        13    12       7     2         0\n++-------+----------+--------+------------+---------+\n+| func3 | simm6[5] | rd/rs1 | simm6[4:0] | opcode2 |\n++-------+----------+--------+------------+---------+\n+15      13         12       7            2         0\n @end verbatim\n \n-@item CIW type: .insn ciw opcode2, func3, rd, uimm8\n+@item CIW type: .insn ciw opcode2, func3, rd', uimm8\n @verbatim\n-+---------+--------------+-----+---------+\n-|   func3 |          imm | rd' | opcode2 |\n-+---------+--------------+-----+---------+\n-15        13             7     2         0\n++-------+------------+-----+---------+\n+| func3 | uimm8[7:0] | rd' | opcode2 |\n++-------+-------- ---+-----+---------+\n+15      13           5     2         0\n @end verbatim\n \n-@item CA type: .insn ca opcode2, func6, func2, rd, rs2\n+@item CSS type: .insn css opcode2, func3, rd, uimm6\n @verbatim\n-+---------+----------+-------+------+--------+\n-|   func6 | rd'/rs1' | func2 | rs2' | opcode |\n-+---------+----------+-------+------+--------+\n-15        10         7       5      2        0\n++-------+------------+----+---------+\n+| func3 | uimm6[5:0] | rd | opcode2 |\n++-------+------------+----+---------+\n+15      13           7    2         0\n @end verbatim\n \n-@item CB type: .insn cb opcode2, func3, rs1, symbol\n+@item CL type: .insn cl opcode2, func3, rd', uimm5(rs1')\n @verbatim\n-+---------+--------+------+--------+---------+\n-|   func3 | offset | rs1' | offset | opcode2 |\n-+---------+--------+------+--------+---------+\n-15        13       10     7        2         0\n++-------+------------+------+------------+------+---------+\n+| func3 | uimm5[4:2] | rs1' | uimm5[1:0] |  rd' | opcode2 |\n++-------+------------+------+------------+------+---------+\n+15      13           10     7            5      2         0\n+@end verbatim\n+\n+@item CS type: .insn cs opcode2, func3, rs2', uimm5(rs1')\n+@verbatim\n++-------+------------+------+------------+------+---------+\n+| func3 | uimm5[4:2] | rs1' | uimm5[1:0] | rs2' | opcode2 |\n++-------+------------+------+------------+------+---------+\n+15      13           10     7            5      2         0\n+@end verbatim\n+\n+@item CA type: .insn ca opcode2, func6, func2, rd', rs2'\n+@verbatim\n++-- ----+----------+-------+------+---------+\n+| func6 | rd'/rs1' | func2 | rs2' | opcode2 |\n++-------+----------+-------+------+---------+\n+15      10         7       5      2         0\n+@end verbatim\n+\n+@item CB type: .insn cb opcode2, func3, rs1', symbol\n+@verbatim\n++-------+--------------+------+------------------+---------+\n+| func3 | simm8[8|4:3] | rs1' | simm8[7:6|2:1|5] | opcode2 |\n++-------+--------------+------+------------------+---------+\n+15      13             10     7                  2         0\n @end verbatim\n \n @item CJ type: .insn cj opcode2, symbol\n @verbatim\n-+---------+--------------------+---------+\n-|   func3 |        jump target | opcode2 |\n-+---------+--------------------+---------+\n-15        13             7     2         0\n++-------+-------------------------------+---------+\n+| func3 | simm11[11|4|9:8|10|6|7|3:1|5] | opcode2 |\n++-------+-------------------------------+---------+\n+15      13                              2         0\n @end verbatim\n \n "
    },
    {
      "sha": "8cb3d64b1a532c531e31a2b86a4dad67179b34d8",
      "filename": "gas/testsuite/gas/riscv/insn.d",
      "status": "modified",
      "additions": 16,
      "deletions": 10,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/gas/testsuite/gas/riscv/insn.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/gas/testsuite/gas/riscv/insn.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/insn.d?ref=5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
      "patch": "@@ -21,34 +21,40 @@ Disassembly of section .text:\n [^:]+: R_RISCV_JAL[\t]+target\n [^:]+:[ \t]+fddff56f[ \t]+jal[ \t]+a0,0 \\<target\\>\n [^:]+: R_RISCV_JAL[\t]+target\n-[^:]+:[ \t]+0511[ \t]+addi[ \t]+a0,a0,4\n [^:]+:[ \t]+852e[ \t]+mv[ \t]+a0,a1\n+[^:]+:[ \t]+0511[ \t]+addi[ \t]+a0,a0,4\n [^:]+:[ \t]+002c[ \t]+addi[ \t]+a1,sp,8\n-[^:]+:[ \t]+d9e9[ \t]+beqz[ \t]+a1,0 \\<target\\>\n+[^:]+:[ \t]+c0aa[ \t]+sw[ \t]+a0,64\\(sp\\)\n+[^:]+:[ \t]+41a8[ \t]+lw[ \t]+a0,64\\(a1\\)\n+[^:]+:[ \t]+c1a8[ \t]+sw[ \t]+a0,64\\(a1\\)\n+[^:]+:[ \t]+d5f1[ \t]+beqz[ \t]+a1,0 \\<target\\>\n [^:]+: R_RISCV_RVC_BRANCH[\t]+target\n-[^:]+:[ \t]+bfc1[ \t]+j[ \t]+0 \\<target\\>\n+[^:]+:[ \t]+b7e9[ \t]+j[ \t]+0 \\<target\\>\n [^:]+: R_RISCV_RVC_JUMP[\t]+target\n [^:]+:[ \t]+00c58533[ \t]+add[ \t]+a0,a1,a2\n [^:]+:[ \t]+00d58513[ \t]+addi[ \t]+a0,a1,13\n [^:]+:[ \t]+00a58567[ \t]+jalr[ \t]+a0,10\\(a1\\)\n [^:]+:[ \t]+00458503[ \t]+lb[ \t]+a0,4\\(a1\\)\n-[^:]+:[ \t]+fab50fe3[ \t]+beq[ \t]+a0,a1,0 \\<target\\>\n+[^:]+:[ \t]+fab50ce3[ \t]+beq[ \t]+a0,a1,0 \\<target\\>\n [^:]+: R_RISCV_BRANCH[\t]+target\n-[^:]+:[ \t]+fab50de3[ \t]+beq[ \t]+a0,a1,0 \\<target\\>\n+[^:]+:[ \t]+fab50ae3[ \t]+beq[ \t]+a0,a1,0 \\<target\\>\n [^:]+: R_RISCV_BRANCH[\t]+target\n [^:]+:[ \t]+00a58223[ \t]+sb[ \t]+a0,4\\(a1\\)\n [^:]+:[ \t]+00fff537[ \t]+lui[ \t]+a0,0xfff\n-[^:]+:[ \t]+fafff56f[ \t]+jal[ \t]+a0,0 \\<target\\>\n+[^:]+:[ \t]+fa9ff56f[ \t]+jal[ \t]+a0,0 \\<target\\>\n [^:]+: R_RISCV_JAL[\t]+target\n-[^:]+:[ \t]+fabff56f[ \t]+jal[ \t]+a0,0 \\<target\\>\n+[^:]+:[ \t]+fa5ff56f[ \t]+jal[ \t]+a0,0 \\<target\\>\n [^:]+: R_RISCV_JAL[\t]+target\n-[^:]+:[ \t]+0511[ \t]+addi[ \t]+a0,a0,4\n [^:]+:[ \t]+852e[ \t]+mv[ \t]+a0,a1\n+[^:]+:[ \t]+0511[ \t]+addi[ \t]+a0,a0,4\n [^:]+:[ \t]+002c[ \t]+addi[ \t]+a1,sp,8\n+[^:]+:[ \t]+c0aa[ \t]+sw[ \t]+a0,64\\(sp\\)\n+[^:]+:[ \t]+41a8[ \t]+lw[ \t]+a0,64\\(a1\\)\n+[^:]+:[ \t]+c1a8[ \t]+sw[ \t]+a0,64\\(a1\\)\n [^:]+:[ \t]+8d6d[ \t]+and[ \t]+a0,a0,a1\n-[^:]+:[ \t]+ddd9[ \t]+beqz[ \t]+a1,0 \\<target\\>\n+[^:]+:[ \t]+d9c9[ \t]+beqz[ \t]+a1,0 \\<target\\>\n [^:]+: R_RISCV_RVC_BRANCH[\t]+target\n-[^:]+:[ \t]+bf71[ \t]+j[ \t]+0 \\<target\\>\n+[^:]+:[ \t]+bf41[ \t]+j[ \t]+0 \\<target\\>\n [^:]+: R_RISCV_RVC_JUMP[\t]+target\n [^:]+:[ \t]+68c58543[ \t]+fmadd.s[ \t]+fa0,fa1,fa2,fa3,rne\n [^:]+:[ \t]+68c58543[ \t]+fmadd.s[ \t]+fa0,fa1,fa2,fa3,rne"
    },
    {
      "sha": "937ad119ff2352158528d457cb447d26b1f3244c",
      "filename": "gas/testsuite/gas/riscv/insn.s",
      "status": "modified",
      "additions": 15,
      "deletions": 9,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/gas/testsuite/gas/riscv/insn.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/gas/testsuite/gas/riscv/insn.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/insn.s?ref=5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
      "patch": "@@ -10,11 +10,14 @@ target:\n \t.insn uj 0x6f, a0, target\n \t.insn j  0x6f, a0, target\n \n-\t.insn ci 0x1, 0x0, a0, 4\n-\t.insn cr 0x2, 0x8, a0, a1\n+\t.insn cr  0x2, 0x8, a0, a1\n+\t.insn ci  0x1, 0x0, a0, 4\n \t.insn ciw 0x0, 0x0, a1, 1\n-\t.insn cb 0x1, 0x6, a1, target\n-\t.insn cj 0x1, 0x5, target\n+\t.insn css 0x2, 0x6, a0, 1\n+\t.insn cl  0x0, 0x2, a0, 1(a1)\n+\t.insn cs  0x0, 0x6, a0, 1(a1)\n+\t.insn cb  0x1, 0x6, a1, target\n+\t.insn cj  0x1, 0x5, target\n \n \t.insn r  OP,  0,  0, a0, a1, a2\n \t.insn i  OP_IMM,  0, a0, a1, 13\n@@ -27,12 +30,15 @@ target:\n \t.insn uj JAL, a0, target\n \t.insn j  JAL, a0, target\n \n-\t.insn ci C1, 0x0, a0, 4\n-\t.insn cr C2, 0x8, a0, a1\n+\t.insn cr  C2, 0x8, a0, a1\n+\t.insn ci  C1, 0x0, a0, 4\n \t.insn ciw C0, 0x0, a1, 1\n-\t.insn ca C1, 0x23, 0x3, a0, a1\n-\t.insn cb C1, 0x6, a1, target\n-\t.insn cj C1, 0x5, target\n+\t.insn css C2, 0x6, a0, 1\n+\t.insn cl  C0, 0x2, a0, 1(a1)\n+\t.insn cs  C0, 0x6, a0, 1(a1)\n+\t.insn ca  C1, 0x23, 0x3, a0, a1\n+\t.insn cb  C1, 0x6, a1, target\n+\t.insn cj  C1, 0x5, target\n \n \t.insn r  MADD, 0, 0, a0, a1, a2, a3\n \t.insn r4 MADD, 0, 0, a0, a1, a2, a3"
    },
    {
      "sha": "f608d9e4ee0a76c8147e29ece429c164ea26b4d2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
      "patch": "@@ -1,3 +1,12 @@\n+2021-02-19  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\tPR 27158\n+\t* riscv-tdep.c (decode_ci_type_insn): Updated encoding macros.\n+\t(decode_j_type_insn): Likewise.\n+\t(decode_cj_type_insn): Likewise.\n+\t(decode_b_type_insn): Likewise.\n+\t(decode): Likewise.\n+\n 2021-02-18  Tom Tromey  <tom@tromey.com>\n \n \t* expression.h (struct expression) <evaluate>: Declare method."
    },
    {
      "sha": "7463b0c33363db431a5b6a1ff52228b2574322c0",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
      "patch": "@@ -1399,7 +1399,7 @@ class riscv_insn\n   {\n     m_opcode = opcode;\n     m_rd = m_rs1 = decode_register_index (ival, OP_SH_CRS1S);\n-    m_imm.s = EXTRACT_RVC_IMM (ival);\n+    m_imm.s = EXTRACT_CITYPE_IMM (ival);\n   }\n \n   /* Helper for DECODE, decode 32-bit S-type instruction.  */\n@@ -1449,29 +1449,29 @@ class riscv_insn\n   {\n     m_opcode = opcode;\n     m_rd = decode_register_index (ival, OP_SH_RD);\n-    m_imm.s = EXTRACT_UJTYPE_IMM (ival);\n+    m_imm.s = EXTRACT_JTYPE_IMM (ival);\n   }\n \n   /* Helper for DECODE, decode 32-bit J-type instruction.  */\n   void decode_cj_type_insn (enum opcode opcode, ULONGEST ival)\n   {\n     m_opcode = opcode;\n-    m_imm.s = EXTRACT_RVC_J_IMM (ival);\n+    m_imm.s = EXTRACT_CJTYPE_IMM (ival);\n   }\n \n   void decode_b_type_insn (enum opcode opcode, ULONGEST ival)\n   {\n     m_opcode = opcode;\n     m_rs1 = decode_register_index (ival, OP_SH_RS1);\n     m_rs2 = decode_register_index (ival, OP_SH_RS2);\n-    m_imm.s = EXTRACT_SBTYPE_IMM (ival);\n+    m_imm.s = EXTRACT_BTYPE_IMM (ival);\n   }\n \n   void decode_cb_type_insn (enum opcode opcode, ULONGEST ival)\n   {\n     m_opcode = opcode;\n     m_rs1 = decode_register_index_short (ival, OP_SH_CRS1S);\n-    m_imm.s = EXTRACT_RVC_B_IMM (ival);\n+    m_imm.s = EXTRACT_CBTYPE_IMM (ival);\n   }\n \n   /* Fetch instruction from target memory at ADDR, return the content of\n@@ -1629,31 +1629,31 @@ riscv_insn::decode (struct gdbarch *gdbarch, CORE_ADDR pc)\n \t{\n \t  m_opcode = ADDI;\n \t  m_rd = m_rs1 = decode_register_index (ival, OP_SH_RD);\n-\t  m_imm.s = EXTRACT_RVC_ADDI16SP_IMM (ival);\n+\t  m_imm.s = EXTRACT_CITYPE_ADDI16SP_IMM (ival);\n \t}\n       else if (is_c_addi4spn_insn (ival))\n \t{\n \t  m_opcode = ADDI;\n \t  m_rd = decode_register_index_short (ival, OP_SH_CRS2S);\n \t  m_rs1 = RISCV_SP_REGNUM;\n-\t  m_imm.s = EXTRACT_RVC_ADDI4SPN_IMM (ival);\n+\t  m_imm.s = EXTRACT_CIWTYPE_ADDI4SPN_IMM (ival);\n \t}\n       else if (is_c_lui_insn (ival))\n \t{\n \t  m_opcode = LUI;\n \t  m_rd = decode_register_index (ival, OP_SH_CRS1S);\n-\t  m_imm.s = EXTRACT_RVC_LUI_IMM (ival);\n+\t  m_imm.s = EXTRACT_CITYPE_LUI_IMM (ival);\n \t}\n       /* C_SD and C_FSW have the same opcode.  C_SD is RV64 and RV128 only,\n \t and C_FSW is RV32 only.  */\n       else if (xlen != 4 && is_c_sd_insn (ival))\n-\tdecode_cs_type_insn (SD, ival, EXTRACT_RVC_LD_IMM (ival));\n+\tdecode_cs_type_insn (SD, ival, EXTRACT_CLTYPE_LD_IMM (ival));\n       else if (is_c_sw_insn (ival))\n-\tdecode_cs_type_insn (SW, ival, EXTRACT_RVC_LW_IMM (ival));\n+\tdecode_cs_type_insn (SW, ival, EXTRACT_CLTYPE_LW_IMM (ival));\n       else if (is_c_swsp_insn (ival))\n-\tdecode_css_type_insn (SW, ival, EXTRACT_RVC_SWSP_IMM (ival));\n+\tdecode_css_type_insn (SW, ival, EXTRACT_CSSTYPE_SWSP_IMM (ival));\n       else if (xlen != 4 && is_c_sdsp_insn (ival))\n-\tdecode_css_type_insn (SD, ival, EXTRACT_RVC_SDSP_IMM (ival));\n+\tdecode_css_type_insn (SD, ival, EXTRACT_CSSTYPE_SDSP_IMM (ival));\n       /* C_JR and C_MV have the same opcode.  If RS2 is 0, then this is a C_JR.\n \t So must try to match C_JR first as it ahs more bits in mask.  */\n       else if (is_c_jr_insn (ival))"
    },
    {
      "sha": "a24c920fd6748279852bd2936535b1c1c0eeac37",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
      "patch": "@@ -1,3 +1,8 @@\n+2021-02-19  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\tPR 27158\n+\t* opcode/riscv.h: Updated encoding macros.\n+\n 2021-02-18  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* opcode/riscv.h: Moved stuff and make the file tidy."
    },
    {
      "sha": "e790723640b067868b0f8688716094862ea78391",
      "filename": "include/opcode/riscv.h",
      "status": "modified",
      "additions": 71,
      "deletions": 64,
      "changes": 135,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/include/opcode/riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/include/opcode/riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/riscv.h?ref=5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
      "patch": "@@ -65,112 +65,119 @@ static const char * const riscv_pred_succ[16] =\n   (RV_X(x, 20, 12) | (RV_IMM_SIGN(x) << 12))\n #define EXTRACT_STYPE_IMM(x) \\\n   (RV_X(x, 7, 5) | (RV_X(x, 25, 7) << 5) | (RV_IMM_SIGN(x) << 12))\n-#define EXTRACT_SBTYPE_IMM(x) \\\n+#define EXTRACT_BTYPE_IMM(x) \\\n   ((RV_X(x, 8, 4) << 1) | (RV_X(x, 25, 6) << 5) | (RV_X(x, 7, 1) << 11) | (RV_IMM_SIGN(x) << 12))\n #define EXTRACT_UTYPE_IMM(x) \\\n   ((RV_X(x, 12, 20) << 12) | (RV_IMM_SIGN(x) << 32))\n-#define EXTRACT_UJTYPE_IMM(x) \\\n+#define EXTRACT_JTYPE_IMM(x) \\\n   ((RV_X(x, 21, 10) << 1) | (RV_X(x, 20, 1) << 11) | (RV_X(x, 12, 8) << 12) | (RV_IMM_SIGN(x) << 20))\n-#define EXTRACT_RVC_IMM(x) \\\n+#define EXTRACT_CITYPE_IMM(x) \\\n   (RV_X(x, 2, 5) | (-RV_X(x, 12, 1) << 5))\n-#define EXTRACT_RVC_LUI_IMM(x) \\\n-  (EXTRACT_RVC_IMM (x) << RISCV_IMM_BITS)\n-#define EXTRACT_RVC_SIMM3(x) \\\n-  (RV_X(x, 10, 2) | (-RV_X(x, 12, 1) << 2))\n-#define EXTRACT_RVC_UIMM8(x) \\\n-  (RV_X(x, 5, 8))\n-#define EXTRACT_RVC_ADDI4SPN_IMM(x) \\\n-  ((RV_X(x, 6, 1) << 2) | (RV_X(x, 5, 1) << 3) | (RV_X(x, 11, 2) << 4) | (RV_X(x, 7, 4) << 6))\n-#define EXTRACT_RVC_ADDI16SP_IMM(x) \\\n+#define EXTRACT_CITYPE_LUI_IMM(x) \\\n+  (EXTRACT_CITYPE_IMM (x) << RISCV_IMM_BITS)\n+#define EXTRACT_CITYPE_ADDI16SP_IMM(x) \\\n   ((RV_X(x, 6, 1) << 4) | (RV_X(x, 2, 1) << 5) | (RV_X(x, 5, 1) << 6) | (RV_X(x, 3, 2) << 7) | (-RV_X(x, 12, 1) << 9))\n-#define EXTRACT_RVC_LW_IMM(x) \\\n-  ((RV_X(x, 6, 1) << 2) | (RV_X(x, 10, 3) << 3) | (RV_X(x, 5, 1) << 6))\n-#define EXTRACT_RVC_LD_IMM(x) \\\n-  ((RV_X(x, 10, 3) << 3) | (RV_X(x, 5, 2) << 6))\n-#define EXTRACT_RVC_LWSP_IMM(x) \\\n+#define EXTRACT_CITYPE_LWSP_IMM(x) \\\n   ((RV_X(x, 4, 3) << 2) | (RV_X(x, 12, 1) << 5) | (RV_X(x, 2, 2) << 6))\n-#define EXTRACT_RVC_LDSP_IMM(x) \\\n+#define EXTRACT_CITYPE_LDSP_IMM(x) \\\n   ((RV_X(x, 5, 2) << 3) | (RV_X(x, 12, 1) << 5) | (RV_X(x, 2, 3) << 6))\n-#define EXTRACT_RVC_SWSP_IMM(x) \\\n+#define EXTRACT_CSSTYPE_IMM(x) \\\n+  (RV_X(x, 7, 6) << 0)\n+#define EXTRACT_CSSTYPE_SWSP_IMM(x) \\\n   ((RV_X(x, 9, 4) << 2) | (RV_X(x, 7, 2) << 6))\n-#define EXTRACT_RVC_SDSP_IMM(x) \\\n+#define EXTRACT_CSSTYPE_SDSP_IMM(x) \\\n   ((RV_X(x, 10, 3) << 3) | (RV_X(x, 7, 3) << 6))\n-#define EXTRACT_RVC_B_IMM(x) \\\n+#define EXTRACT_CIWTYPE_IMM(x) \\\n+  (RV_X(x, 5, 8))\n+#define EXTRACT_CIWTYPE_ADDI4SPN_IMM(x) \\\n+  ((RV_X(x, 6, 1) << 2) | (RV_X(x, 5, 1) << 3) | (RV_X(x, 11, 2) << 4) | (RV_X(x, 7, 4) << 6))\n+#define EXTRACT_CLTYPE_IMM(x) \\\n+  ((RV_X(x, 5, 2) << 0) | (RV_X(x, 10, 3) << 2))\n+#define EXTRACT_CLTYPE_LW_IMM(x) \\\n+  ((RV_X(x, 6, 1) << 2) | (RV_X(x, 10, 3) << 3) | (RV_X(x, 5, 1) << 6))\n+#define EXTRACT_CLTYPE_LD_IMM(x) \\\n+  ((RV_X(x, 10, 3) << 3) | (RV_X(x, 5, 2) << 6))\n+#define EXTRACT_CBTYPE_IMM(x) \\\n   ((RV_X(x, 3, 2) << 1) | (RV_X(x, 10, 2) << 3) | (RV_X(x, 2, 1) << 5) | (RV_X(x, 5, 2) << 6) | (-RV_X(x, 12, 1) << 8))\n-#define EXTRACT_RVC_J_IMM(x) \\\n+#define EXTRACT_CJTYPE_IMM(x) \\\n   ((RV_X(x, 3, 3) << 1) | (RV_X(x, 11, 1) << 4) | (RV_X(x, 2, 1) << 5) | (RV_X(x, 7, 1) << 6) | (RV_X(x, 6, 1) << 7) | (RV_X(x, 9, 2) << 8) | (RV_X(x, 8, 1) << 10) | (-RV_X(x, 12, 1) << 11))\n \n #define ENCODE_ITYPE_IMM(x) \\\n   (RV_X(x, 0, 12) << 20)\n #define ENCODE_STYPE_IMM(x) \\\n   ((RV_X(x, 0, 5) << 7) | (RV_X(x, 5, 7) << 25))\n-#define ENCODE_SBTYPE_IMM(x) \\\n+#define ENCODE_BTYPE_IMM(x) \\\n   ((RV_X(x, 1, 4) << 8) | (RV_X(x, 5, 6) << 25) | (RV_X(x, 11, 1) << 7) | (RV_X(x, 12, 1) << 31))\n #define ENCODE_UTYPE_IMM(x) \\\n   (RV_X(x, 12, 20) << 12)\n-#define ENCODE_UJTYPE_IMM(x) \\\n+#define ENCODE_JTYPE_IMM(x) \\\n   ((RV_X(x, 1, 10) << 21) | (RV_X(x, 11, 1) << 20) | (RV_X(x, 12, 8) << 12) | (RV_X(x, 20, 1) << 31))\n-#define ENCODE_RVC_IMM(x) \\\n+#define ENCODE_CITYPE_IMM(x) \\\n   ((RV_X(x, 0, 5) << 2) | (RV_X(x, 5, 1) << 12))\n-#define ENCODE_RVC_LUI_IMM(x) \\\n-  ENCODE_RVC_IMM ((x) >> RISCV_IMM_BITS)\n-#define ENCODE_RVC_SIMM3(x) \\\n-  (RV_X(x, 0, 3) << 10)\n-#define ENCODE_RVC_UIMM8(x) \\\n-  (RV_X(x, 0, 8) << 5)\n-#define ENCODE_RVC_ADDI4SPN_IMM(x) \\\n-  ((RV_X(x, 2, 1) << 6) | (RV_X(x, 3, 1) << 5) | (RV_X(x, 4, 2) << 11) | (RV_X(x, 6, 4) << 7))\n-#define ENCODE_RVC_ADDI16SP_IMM(x) \\\n+#define ENCODE_CITYPE_LUI_IMM(x) \\\n+  ENCODE_CITYPE_IMM ((x) >> RISCV_IMM_BITS)\n+#define ENCODE_CITYPE_ADDI16SP_IMM(x) \\\n   ((RV_X(x, 4, 1) << 6) | (RV_X(x, 5, 1) << 2) | (RV_X(x, 6, 1) << 5) | (RV_X(x, 7, 2) << 3) | (RV_X(x, 9, 1) << 12))\n-#define ENCODE_RVC_LW_IMM(x) \\\n-  ((RV_X(x, 2, 1) << 6) | (RV_X(x, 3, 3) << 10) | (RV_X(x, 6, 1) << 5))\n-#define ENCODE_RVC_LD_IMM(x) \\\n-  ((RV_X(x, 3, 3) << 10) | (RV_X(x, 6, 2) << 5))\n-#define ENCODE_RVC_LWSP_IMM(x) \\\n+#define ENCODE_CITYPE_LWSP_IMM(x) \\\n   ((RV_X(x, 2, 3) << 4) | (RV_X(x, 5, 1) << 12) | (RV_X(x, 6, 2) << 2))\n-#define ENCODE_RVC_LDSP_IMM(x) \\\n+#define ENCODE_CITYPE_LDSP_IMM(x) \\\n   ((RV_X(x, 3, 2) << 5) | (RV_X(x, 5, 1) << 12) | (RV_X(x, 6, 3) << 2))\n-#define ENCODE_RVC_SWSP_IMM(x) \\\n+#define ENCODE_CSSTYPE_IMM(x) \\\n+  (RV_X(x, 0, 6) << 7)\n+#define ENCODE_CSSTYPE_SWSP_IMM(x) \\\n   ((RV_X(x, 2, 4) << 9) | (RV_X(x, 6, 2) << 7))\n-#define ENCODE_RVC_SDSP_IMM(x) \\\n+#define ENCODE_CSSTYPE_SDSP_IMM(x) \\\n   ((RV_X(x, 3, 3) << 10) | (RV_X(x, 6, 3) << 7))\n-#define ENCODE_RVC_B_IMM(x) \\\n+#define ENCODE_CIWTYPE_IMM(x) \\\n+  (RV_X(x, 0, 8) << 5)\n+#define ENCODE_CIWTYPE_ADDI4SPN_IMM(x) \\\n+  ((RV_X(x, 2, 1) << 6) | (RV_X(x, 3, 1) << 5) | (RV_X(x, 4, 2) << 11) | (RV_X(x, 6, 4) << 7))\n+#define ENCODE_CLTYPE_IMM(x) \\\n+  ((RV_X(x, 0, 2) << 5) | (RV_X(x, 2, 3) << 10))\n+#define ENCODE_CLTYPE_LW_IMM(x) \\\n+  ((RV_X(x, 2, 1) << 6) | (RV_X(x, 3, 3) << 10) | (RV_X(x, 6, 1) << 5))\n+#define ENCODE_CLTYPE_LD_IMM(x) \\\n+  ((RV_X(x, 3, 3) << 10) | (RV_X(x, 6, 2) << 5))\n+#define ENCODE_CBTYPE_IMM(x) \\\n   ((RV_X(x, 1, 2) << 3) | (RV_X(x, 3, 2) << 10) | (RV_X(x, 5, 1) << 2) | (RV_X(x, 6, 2) << 5) | (RV_X(x, 8, 1) << 12))\n-#define ENCODE_RVC_J_IMM(x) \\\n+#define ENCODE_CJTYPE_IMM(x) \\\n   ((RV_X(x, 1, 3) << 3) | (RV_X(x, 4, 1) << 11) | (RV_X(x, 5, 1) << 2) | (RV_X(x, 6, 1) << 7) | (RV_X(x, 7, 1) << 6) | (RV_X(x, 8, 2) << 9) | (RV_X(x, 10, 1) << 8) | (RV_X(x, 11, 1) << 12))\n \n #define VALID_ITYPE_IMM(x) (EXTRACT_ITYPE_IMM(ENCODE_ITYPE_IMM(x)) == (x))\n #define VALID_STYPE_IMM(x) (EXTRACT_STYPE_IMM(ENCODE_STYPE_IMM(x)) == (x))\n-#define VALID_SBTYPE_IMM(x) (EXTRACT_SBTYPE_IMM(ENCODE_SBTYPE_IMM(x)) == (x))\n+#define VALID_BTYPE_IMM(x) (EXTRACT_BTYPE_IMM(ENCODE_BTYPE_IMM(x)) == (x))\n #define VALID_UTYPE_IMM(x) (EXTRACT_UTYPE_IMM(ENCODE_UTYPE_IMM(x)) == (x))\n-#define VALID_UJTYPE_IMM(x) (EXTRACT_UJTYPE_IMM(ENCODE_UJTYPE_IMM(x)) == (x))\n-#define VALID_RVC_IMM(x) (EXTRACT_RVC_IMM(ENCODE_RVC_IMM(x)) == (x))\n-#define VALID_RVC_LUI_IMM(x) (ENCODE_RVC_LUI_IMM(x) != 0 && EXTRACT_RVC_LUI_IMM(ENCODE_RVC_LUI_IMM(x)) == (x))\n-#define VALID_RVC_SIMM3(x) (EXTRACT_RVC_SIMM3(ENCODE_RVC_SIMM3(x)) == (x))\n-#define VALID_RVC_UIMM8(x) (EXTRACT_RVC_UIMM8(ENCODE_RVC_UIMM8(x)) == (x))\n-#define VALID_RVC_ADDI4SPN_IMM(x) (EXTRACT_RVC_ADDI4SPN_IMM(ENCODE_RVC_ADDI4SPN_IMM(x)) == (x))\n-#define VALID_RVC_ADDI16SP_IMM(x) (EXTRACT_RVC_ADDI16SP_IMM(ENCODE_RVC_ADDI16SP_IMM(x)) == (x))\n-#define VALID_RVC_LW_IMM(x) (EXTRACT_RVC_LW_IMM(ENCODE_RVC_LW_IMM(x)) == (x))\n-#define VALID_RVC_LD_IMM(x) (EXTRACT_RVC_LD_IMM(ENCODE_RVC_LD_IMM(x)) == (x))\n-#define VALID_RVC_LWSP_IMM(x) (EXTRACT_RVC_LWSP_IMM(ENCODE_RVC_LWSP_IMM(x)) == (x))\n-#define VALID_RVC_LDSP_IMM(x) (EXTRACT_RVC_LDSP_IMM(ENCODE_RVC_LDSP_IMM(x)) == (x))\n-#define VALID_RVC_SWSP_IMM(x) (EXTRACT_RVC_SWSP_IMM(ENCODE_RVC_SWSP_IMM(x)) == (x))\n-#define VALID_RVC_SDSP_IMM(x) (EXTRACT_RVC_SDSP_IMM(ENCODE_RVC_SDSP_IMM(x)) == (x))\n-#define VALID_RVC_B_IMM(x) (EXTRACT_RVC_B_IMM(ENCODE_RVC_B_IMM(x)) == (x))\n-#define VALID_RVC_J_IMM(x) (EXTRACT_RVC_J_IMM(ENCODE_RVC_J_IMM(x)) == (x))\n+#define VALID_JTYPE_IMM(x) (EXTRACT_JTYPE_IMM(ENCODE_JTYPE_IMM(x)) == (x))\n+#define VALID_CITYPE_IMM(x) (EXTRACT_CITYPE_IMM(ENCODE_CITYPE_IMM(x)) == (x))\n+#define VALID_CITYPE_LUI_IMM(x) (ENCODE_CITYPE_LUI_IMM(x) != 0 \\\n+\t\t\t\t && EXTRACT_CITYPE_LUI_IMM(ENCODE_CITYPE_LUI_IMM(x)) == (x))\n+#define VALID_CITYPE_ADDI16SP_IMM(x) (ENCODE_CITYPE_ADDI16SP_IMM(x) != 0 \\\n+\t\t\t\t      && EXTRACT_CITYPE_ADDI16SP_IMM(ENCODE_CITYPE_ADDI16SP_IMM(x)) == (x))\n+#define VALID_CITYPE_LWSP_IMM(x) (EXTRACT_CITYPE_LWSP_IMM(ENCODE_CITYPE_LWSP_IMM(x)) == (x))\n+#define VALID_CITYPE_LDSP_IMM(x) (EXTRACT_CITYPE_LDSP_IMM(ENCODE_CITYPE_LDSP_IMM(x)) == (x))\n+#define VALID_CSSTYPE_IMM(x) (EXTRACT_CSSTYPE_IMM(ENCODE_CSSTYPE_IMM(x)) == (x))\n+#define VALID_CSSTYPE_SWSP_IMM(x) (EXTRACT_CSSTYPE_SWSP_IMM(ENCODE_CSSTYPE_SWSP_IMM(x)) == (x))\n+#define VALID_CSSTYPE_SDSP_IMM(x) (EXTRACT_CSSTYPE_SDSP_IMM(ENCODE_CSSTYPE_SDSP_IMM(x)) == (x))\n+#define VALID_CIWTYPE_IMM(x) (EXTRACT_CIWTYPE_IMM(ENCODE_CIWTYPE_IMM(x)) == (x))\n+#define VALID_CIWTYPE_ADDI4SPN_IMM(x) (EXTRACT_CIWTYPE_ADDI4SPN_IMM(ENCODE_CIWTYPE_ADDI4SPN_IMM(x)) == (x))\n+#define VALID_CLTYPE_IMM(x) (EXTRACT_CLTYPE_IMM(ENCODE_CLTYPE_IMM(x)) == (x))\n+#define VALID_CLTYPE_LW_IMM(x) (EXTRACT_CLTYPE_LW_IMM(ENCODE_CLTYPE_LW_IMM(x)) == (x))\n+#define VALID_CLTYPE_LD_IMM(x) (EXTRACT_CLTYPE_LD_IMM(ENCODE_CLTYPE_LD_IMM(x)) == (x))\n+#define VALID_CBTYPE_IMM(x) (EXTRACT_CBTYPE_IMM(ENCODE_CBTYPE_IMM(x)) == (x))\n+#define VALID_CJTYPE_IMM(x) (EXTRACT_CJTYPE_IMM(ENCODE_CJTYPE_IMM(x)) == (x))\n \n #define RISCV_RTYPE(insn, rd, rs1, rs2) \\\n   ((MATCH_ ## insn) | ((rd) << OP_SH_RD) | ((rs1) << OP_SH_RS1) | ((rs2) << OP_SH_RS2))\n #define RISCV_ITYPE(insn, rd, rs1, imm) \\\n   ((MATCH_ ## insn) | ((rd) << OP_SH_RD) | ((rs1) << OP_SH_RS1) | ENCODE_ITYPE_IMM(imm))\n #define RISCV_STYPE(insn, rs1, rs2, imm) \\\n   ((MATCH_ ## insn) | ((rs1) << OP_SH_RS1) | ((rs2) << OP_SH_RS2) | ENCODE_STYPE_IMM(imm))\n-#define RISCV_SBTYPE(insn, rs1, rs2, target) \\\n-  ((MATCH_ ## insn) | ((rs1) << OP_SH_RS1) | ((rs2) << OP_SH_RS2) | ENCODE_SBTYPE_IMM(target))\n+#define RISCV_BTYPE(insn, rs1, rs2, target) \\\n+  ((MATCH_ ## insn) | ((rs1) << OP_SH_RS1) | ((rs2) << OP_SH_RS2) | ENCODE_BTYPE_IMM(target))\n #define RISCV_UTYPE(insn, rd, bigimm) \\\n   ((MATCH_ ## insn) | ((rd) << OP_SH_RD) | ENCODE_UTYPE_IMM(bigimm))\n-#define RISCV_UJTYPE(insn, rd, target) \\\n-  ((MATCH_ ## insn) | ((rd) << OP_SH_RD) | ENCODE_UJTYPE_IMM(target))\n+#define RISCV_JTYPE(insn, rd, target) \\\n+  ((MATCH_ ## insn) | ((rd) << OP_SH_RD) | ENCODE_JTYPE_IMM(target))\n \n #define RISCV_NOP RISCV_ITYPE(ADDI, 0, 0, 0)\n #define RVC_NOP MATCH_C_ADDI"
    },
    {
      "sha": "086dd33cd0ce1d52cf72e0f939a6879b269e323b",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
      "patch": "@@ -1,3 +1,18 @@\n+2021-02-19  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\tPR 27158\n+\t* riscv-dis.c (print_insn_args): Updated encoding macros.\n+\t* riscv-opc.c (MASK_RVC_IMM): defined to ENCODE_CITYPE_IMM.\n+\t(match_c_addi16sp): Updated encoding macros.\n+\t(match_c_lui): Likewise.\n+\t(match_c_lui_with_hint): Likewise.\n+\t(match_c_addi4spn): Likewise.\n+\t(match_c_slli): Likewise.\n+\t(match_slli_as_c_slli): Likewise.\n+\t(match_c_slli64): Likewise.\n+\t(match_srxi_as_c_srxi): Likewise.\n+\t(riscv_insn_types): Added .insn css/cl/cs.\n+\n 2021-02-18  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* riscv-dis.c: Included cpu-riscv.h, and removed elfxx-riscv.h."
    },
    {
      "sha": "cc80d909457ebe783577e20d6fab7a0c53cb05a8",
      "filename": "opcodes/riscv-dis.c",
      "status": "modified",
      "additions": 17,
      "deletions": 20,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/opcodes/riscv-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/opcodes/riscv-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/riscv-dis.c?ref=5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
      "patch": "@@ -204,54 +204,51 @@ print_insn_args (const char *d, insn_t l, bfd_vma pc, disassemble_info *info)\n \t      print (info->stream, \"%s\",\n \t\t     riscv_gpr_names[EXTRACT_OPERAND (CRS2, l)]);\n \t      break;\n-\t    case 'i':\n-\t      print (info->stream, \"%d\", (int)EXTRACT_RVC_SIMM3 (l));\n-\t      break;\n \t    case 'o':\n \t    case 'j':\n-\t      print (info->stream, \"%d\", (int)EXTRACT_RVC_IMM (l));\n+\t      print (info->stream, \"%d\", (int)EXTRACT_CITYPE_IMM (l));\n \t      break;\n \t    case 'k':\n-\t      print (info->stream, \"%d\", (int)EXTRACT_RVC_LW_IMM (l));\n+\t      print (info->stream, \"%d\", (int)EXTRACT_CLTYPE_LW_IMM (l));\n \t      break;\n \t    case 'l':\n-\t      print (info->stream, \"%d\", (int)EXTRACT_RVC_LD_IMM (l));\n+\t      print (info->stream, \"%d\", (int)EXTRACT_CLTYPE_LD_IMM (l));\n \t      break;\n \t    case 'm':\n-\t      print (info->stream, \"%d\", (int)EXTRACT_RVC_LWSP_IMM (l));\n+\t      print (info->stream, \"%d\", (int)EXTRACT_CITYPE_LWSP_IMM (l));\n \t      break;\n \t    case 'n':\n-\t      print (info->stream, \"%d\", (int)EXTRACT_RVC_LDSP_IMM (l));\n+\t      print (info->stream, \"%d\", (int)EXTRACT_CITYPE_LDSP_IMM (l));\n \t      break;\n \t    case 'K':\n-\t      print (info->stream, \"%d\", (int)EXTRACT_RVC_ADDI4SPN_IMM (l));\n+\t      print (info->stream, \"%d\", (int)EXTRACT_CIWTYPE_ADDI4SPN_IMM (l));\n \t      break;\n \t    case 'L':\n-\t      print (info->stream, \"%d\", (int)EXTRACT_RVC_ADDI16SP_IMM (l));\n+\t      print (info->stream, \"%d\", (int)EXTRACT_CITYPE_ADDI16SP_IMM (l));\n \t      break;\n \t    case 'M':\n-\t      print (info->stream, \"%d\", (int)EXTRACT_RVC_SWSP_IMM (l));\n+\t      print (info->stream, \"%d\", (int)EXTRACT_CSSTYPE_SWSP_IMM (l));\n \t      break;\n \t    case 'N':\n-\t      print (info->stream, \"%d\", (int)EXTRACT_RVC_SDSP_IMM (l));\n+\t      print (info->stream, \"%d\", (int)EXTRACT_CSSTYPE_SDSP_IMM (l));\n \t      break;\n \t    case 'p':\n-\t      info->target = EXTRACT_RVC_B_IMM (l) + pc;\n+\t      info->target = EXTRACT_CBTYPE_IMM (l) + pc;\n \t      (*info->print_address_func) (info->target, info);\n \t      break;\n \t    case 'a':\n-\t      info->target = EXTRACT_RVC_J_IMM (l) + pc;\n+\t      info->target = EXTRACT_CJTYPE_IMM (l) + pc;\n \t      (*info->print_address_func) (info->target, info);\n \t      break;\n \t    case 'u':\n \t      print (info->stream, \"0x%x\",\n-\t\t     (int)(EXTRACT_RVC_IMM (l) & (RISCV_BIGIMM_REACH-1)));\n+\t\t     (int)(EXTRACT_CITYPE_IMM (l) & (RISCV_BIGIMM_REACH-1)));\n \t      break;\n \t    case '>':\n-\t      print (info->stream, \"0x%x\", (int)EXTRACT_RVC_IMM (l) & 0x3f);\n+\t      print (info->stream, \"0x%x\", (int)EXTRACT_CITYPE_IMM (l) & 0x3f);\n \t      break;\n \t    case '<':\n-\t      print (info->stream, \"0x%x\", (int)EXTRACT_RVC_IMM (l) & 0x1f);\n+\t      print (info->stream, \"0x%x\", (int)EXTRACT_CITYPE_IMM (l) & 0x1f);\n \t      break;\n \t    case 'T': /* Floating-point RS2.  */\n \t      print (info->stream, \"%s\",\n@@ -326,12 +323,12 @@ print_insn_args (const char *d, insn_t l, bfd_vma pc, disassemble_info *info)\n \t  break;\n \n \tcase 'a':\n-\t  info->target = EXTRACT_UJTYPE_IMM (l) + pc;\n+\t  info->target = EXTRACT_JTYPE_IMM (l) + pc;\n \t  (*info->print_address_func) (info->target, info);\n \t  break;\n \n \tcase 'p':\n-\t  info->target = EXTRACT_SBTYPE_IMM (l) + pc;\n+\t  info->target = EXTRACT_BTYPE_IMM (l) + pc;\n \t  (*info->print_address_func) (info->target, info);\n \t  break;\n \n@@ -341,7 +338,7 @@ print_insn_args (const char *d, insn_t l, bfd_vma pc, disassemble_info *info)\n \t  else if ((l & MASK_LUI) == MATCH_LUI)\n \t    pd->hi_addr[rd] = EXTRACT_UTYPE_IMM (l);\n \t  else if ((l & MASK_C_LUI) == MATCH_C_LUI)\n-\t    pd->hi_addr[rd] = EXTRACT_RVC_LUI_IMM (l);\n+\t    pd->hi_addr[rd] = EXTRACT_CITYPE_LUI_IMM (l);\n \t  print (info->stream, \"%s\", riscv_gpr_names[rd]);\n \t  break;\n "
    },
    {
      "sha": "e0552db272a3e3a28f43bb123ce57f2f334d49fa",
      "filename": "opcodes/riscv-opc.c",
      "status": "modified",
      "additions": 22,
      "deletions": 12,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/opcodes/riscv-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/opcodes/riscv-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/riscv-opc.c?ref=5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
      "patch": "@@ -73,7 +73,7 @@ const char * const riscv_fpr_names_abi[NFPR] =\n #define MASK_RD (OP_MASK_RD << OP_SH_RD)\n #define MASK_CRS2 (OP_MASK_CRS2 << OP_SH_CRS2)\n #define MASK_IMM ENCODE_ITYPE_IMM (-1U)\n-#define MASK_RVC_IMM ENCODE_RVC_IMM (-1U)\n+#define MASK_RVC_IMM ENCODE_CITYPE_IMM (-1U)\n #define MASK_UIMM ENCODE_UTYPE_IMM (-1U)\n #define MASK_RM (OP_MASK_RM << OP_SH_RM)\n #define MASK_PRED (OP_MASK_PRED << OP_SH_PRED)\n@@ -135,16 +135,15 @@ static int\n match_c_addi16sp (const struct riscv_opcode *op, insn_t insn)\n {\n   return (match_opcode (op, insn)\n-\t  && (((insn & MASK_RD) >> OP_SH_RD) == 2)\n-\t  && EXTRACT_RVC_ADDI16SP_IMM (insn) != 0);\n+\t  && (((insn & MASK_RD) >> OP_SH_RD) == 2));\n }\n \n static int\n match_c_lui (const struct riscv_opcode *op, insn_t insn)\n {\n   return (match_rd_nonzero (op, insn)\n \t  && (((insn & MASK_RD) >> OP_SH_RD) != 2)\n-\t  && EXTRACT_RVC_LUI_IMM (insn) != 0);\n+\t  && EXTRACT_CITYPE_LUI_IMM (insn) != 0);\n }\n \n /* We don't allow lui zero,X to become a c.lui hint, so we need a separate\n@@ -155,37 +154,37 @@ match_c_lui_with_hint (const struct riscv_opcode *op, insn_t insn)\n {\n   return (match_opcode (op, insn)\n \t  && (((insn & MASK_RD) >> OP_SH_RD) != 2)\n-\t  && EXTRACT_RVC_LUI_IMM (insn) != 0);\n+\t  && EXTRACT_CITYPE_LUI_IMM (insn) != 0);\n }\n \n static int\n match_c_addi4spn (const struct riscv_opcode *op, insn_t insn)\n {\n-  return match_opcode (op, insn) && EXTRACT_RVC_ADDI4SPN_IMM (insn) != 0;\n+  return match_opcode (op, insn) && EXTRACT_CIWTYPE_ADDI4SPN_IMM (insn) != 0;\n }\n \n /* This requires a non-zero shift.  A zero rd is a hint, so is allowed.  */\n \n static int\n match_c_slli (const struct riscv_opcode *op, insn_t insn)\n {\n-  return match_opcode (op, insn) && EXTRACT_RVC_IMM (insn) != 0;\n+  return match_opcode (op, insn) && EXTRACT_CITYPE_IMM (insn) != 0;\n }\n \n /* This requires a non-zero rd, and a non-zero shift.  */\n \n static int\n match_slli_as_c_slli (const struct riscv_opcode *op, insn_t insn)\n {\n-  return match_rd_nonzero (op, insn) && EXTRACT_RVC_IMM (insn) != 0;\n+  return match_rd_nonzero (op, insn) && EXTRACT_CITYPE_IMM (insn) != 0;\n }\n \n /* This requires a zero shift.  A zero rd is a hint, so is allowed.  */\n \n static int\n match_c_slli64 (const struct riscv_opcode *op, insn_t insn)\n {\n-  return match_opcode (op, insn) && EXTRACT_RVC_IMM (insn) == 0;\n+  return match_opcode (op, insn) && EXTRACT_CITYPE_IMM (insn) == 0;\n }\n \n /* This is used for both srli and srai.  This requires a non-zero shift.\n@@ -194,7 +193,7 @@ match_c_slli64 (const struct riscv_opcode *op, insn_t insn)\n static int\n match_srxi_as_c_srxi (const struct riscv_opcode *op, insn_t insn)\n {\n-  return match_opcode (op, insn) && EXTRACT_RVC_IMM (insn) != 0;\n+  return match_opcode (op, insn) && EXTRACT_CITYPE_IMM (insn) != 0;\n }\n \n const struct riscv_opcode riscv_opcodes[] =\n@@ -847,7 +846,6 @@ const struct riscv_opcode riscv_insn_types[] =\n {\"sb\",      0, INSN_CLASS_F,       \"O4,F3,S,t,p\",       0, 0, match_opcode, 0 },\n {\"sb\",      0, INSN_CLASS_F,       \"O4,F3,s,T,p\",       0, 0, match_opcode, 0 },\n {\"sb\",      0, INSN_CLASS_F,       \"O4,F3,S,T,p\",       0, 0, match_opcode, 0 },\n-\n {\"b\",       0, INSN_CLASS_I,       \"O4,F3,s,t,p\",       0, 0, match_opcode, 0 },\n {\"b\",       0, INSN_CLASS_F,       \"O4,F3,S,t,p\",       0, 0, match_opcode, 0 },\n {\"b\",       0, INSN_CLASS_F,       \"O4,F3,s,T,p\",       0, 0, match_opcode, 0 },\n@@ -858,7 +856,6 @@ const struct riscv_opcode riscv_insn_types[] =\n \n {\"uj\",      0, INSN_CLASS_I,       \"O4,d,a\",            0, 0, match_opcode, 0 },\n {\"uj\",      0, INSN_CLASS_F,       \"O4,D,a\",            0, 0, match_opcode, 0 },\n-\n {\"j\",       0, INSN_CLASS_I,       \"O4,d,a\",            0, 0, match_opcode, 0 },\n {\"j\",       0, INSN_CLASS_F,       \"O4,D,a\",            0, 0, match_opcode, 0 },\n \n@@ -873,6 +870,19 @@ const struct riscv_opcode riscv_insn_types[] =\n {\"ciw\",     0, INSN_CLASS_C,       \"O2,CF3,Ct,C8\",      0, 0, match_opcode, 0 },\n {\"ciw\",     0, INSN_CLASS_F_AND_C, \"O2,CF3,CD,C8\",      0, 0, match_opcode, 0 },\n \n+{\"css\",     0, INSN_CLASS_C,       \"O2,CF3,CV,C6\",      0, 0, match_opcode, 0 },\n+{\"css\",     0, INSN_CLASS_F_AND_C, \"O2,CF3,CT,C6\",      0, 0, match_opcode, 0 },\n+\n+{\"cl\",      0, INSN_CLASS_C,       \"O2,CF3,Ct,C5(Cs)\",  0, 0, match_opcode, 0 },\n+{\"cl\",      0, INSN_CLASS_F_AND_C, \"O2,CF3,CD,C5(Cs)\",  0, 0, match_opcode, 0 },\n+{\"cl\",      0, INSN_CLASS_F_AND_C, \"O2,CF3,Ct,C5(CS)\",  0, 0, match_opcode, 0 },\n+{\"cl\",      0, INSN_CLASS_F_AND_C, \"O2,CF3,CD,C5(CS)\",  0, 0, match_opcode, 0 },\n+\n+{\"cs\",      0, INSN_CLASS_C,       \"O2,CF3,Ct,C5(Cs)\",  0, 0, match_opcode, 0 },\n+{\"cs\",      0, INSN_CLASS_F_AND_C, \"O2,CF3,CD,C5(Cs)\",  0, 0, match_opcode, 0 },\n+{\"cs\",      0, INSN_CLASS_F_AND_C, \"O2,CF3,Ct,C5(CS)\",  0, 0, match_opcode, 0 },\n+{\"cs\",      0, INSN_CLASS_F_AND_C, \"O2,CF3,CD,C5(CS)\",  0, 0, match_opcode, 0 },\n+\n {\"ca\",      0, INSN_CLASS_C,       \"O2,CF6,CF2,Cs,Ct\",  0, 0, match_opcode, 0 },\n {\"ca\",      0, INSN_CLASS_F_AND_C, \"O2,CF6,CF2,CS,Ct\",  0, 0, match_opcode, 0 },\n {\"ca\",      0, INSN_CLASS_F_AND_C, \"O2,CF6,CF2,Cs,CD\",  0, 0, match_opcode, 0 },"
    },
    {
      "sha": "6bea868a74a2ee751b86228ef0018bda514154aa",
      "filename": "sim/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/sim/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/sim/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ChangeLog?ref=5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
      "patch": "@@ -1,3 +1,8 @@\n+2021-02-19  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\tPR 27158\n+\t* riscv/sim-main.c (execute_i): Updated encoding macros.\n+\n 2021-02-13  Mike Frysinger  <vapier@gentoo.org>\n \n \t* configure.tgt: Delete call to AC_SUBST(sim_arch)."
    },
    {
      "sha": "ff328a0dc204ee414e1584abb943a5a03af638f4",
      "filename": "sim/riscv/sim-main.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/sim/riscv/sim-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa/sim/riscv/sim-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/riscv/sim-main.c?ref=5a9f5403c75c8ae1f4935a9a0904949f52d9e3aa",
      "patch": "@@ -157,7 +157,7 @@ execute_i (SIM_CPU *cpu, unsigned_word iw, const struct riscv_opcode *op)\n   unsigned_word i_imm = EXTRACT_ITYPE_IMM (iw);\n   unsigned_word u_imm = EXTRACT_UTYPE_IMM ((unsigned64) iw);\n   unsigned_word s_imm = EXTRACT_STYPE_IMM (iw);\n-  unsigned_word sb_imm = EXTRACT_SBTYPE_IMM (iw);\n+  unsigned_word sb_imm = EXTRACT_BTYPE_IMM (iw);\n   unsigned_word shamt_imm = ((iw >> OP_SH_SHAMT) & OP_MASK_SHAMT);\n   unsigned_word tmp;\n   sim_cia pc = cpu->pc + 4;\n@@ -416,9 +416,9 @@ execute_i (SIM_CPU *cpu, unsigned_word iw, const struct riscv_opcode *op)\n       break;\n     case MATCH_JAL:\n       TRACE_INSN (cpu, \"jal %s, %\" PRIiTW \";\", rd_name,\n-\t\t  EXTRACT_UJTYPE_IMM (iw));\n+\t\t  EXTRACT_JTYPE_IMM (iw));\n       store_rd (cpu, rd, cpu->pc + 4);\n-      pc = cpu->pc + EXTRACT_UJTYPE_IMM (iw);\n+      pc = cpu->pc + EXTRACT_JTYPE_IMM (iw);\n       TRACE_BRANCH (cpu, \"to %#\" PRIxTW, pc);\n       break;\n     case MATCH_JALR:"
    }
  ]
}