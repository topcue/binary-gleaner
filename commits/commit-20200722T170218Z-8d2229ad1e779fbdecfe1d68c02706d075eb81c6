{
  "sha": "8d2229ad1e779fbdecfe1d68c02706d075eb81c6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGQyMjI5YWQxZTc3OWZiZGVjZmUxZDY4YzAyNzA2ZDA3NWViODFjNg==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-06-04T18:28:52Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-07-22T17:02:18Z"
    },
    "message": "libctf, link: add lazy linking: clean up input members: err/warn cleanup\n\nThis rather large and intertwined pile of changes does three things:\n\nFirst, it transitions from dprintf to ctf_err_warn for things the user might\ncare about: this one file is the major impetus for the ctf_err_warn\ninfrastructure, because things like file names are crucial in linker\nerror messages, and errno values are utterly incapable of\ncommunicating them\n\nSecond, it stabilizes the ctf_link APIs: you can now call\nctf_link_add_ctf without a CTF argument (only a NAME), to lazily\nctf_open the file with the given NAME when needed, and close it as soon\nas possible, to save memory.  This is not an API change because a null\nCTF argument was prohibited before now.\n\nSince getting CTF directly from files uses ctf_open, passing in only a\nNAME requires use of libctf, not libctf-nobfd.  The linker's behaviour\nis unchanged, as it still passes in a ctf_archive_t as before.\n\nThis also let us fix a leak: we were opening ctf_archives and their\ncontaining ctf_files, then only closing the files and leaving the\narchives open.\n\nThird, this commit restructures the ctf_link_in_member argument used by\nthe CTF linking machinery and adjusts its users accordingly.\n\nWe drop two members:\n\n- arcname, which is difficult to construct and then only used in error\n  messages (that were only dprintf()ed, so never seen!)\n- share_mode, since we store the flags passed to ctf_link (including the\n  share mode) in a new ctf_file_t.ctf_link_flags to help dedup get hold\n  of it\n\nWe rename others whose existing names were fairly dreadful:\n\n- done_main_member -> done_parent, using consistent terminology for .ctf\n  as the parent of all archive members\n- main_input_fp -> in_fp_parent, likewise\n- file_name -> in_file_name, likewise\n\nWe add one new member, cu_mapped.\n\nFinally, we move the various frees of things like mapping table data to\nthe top-level ctf_link, since deduplicating links will want to do that\ntoo.\n\ninclude/\n\t* ctf-api.h (ECTF_NEEDSBFD): New.\n\t(ECTF_NERR): Adjust.\n\t(ctf_link): Rename share_mode arg to flags.\nlibctf/\n\t* Makefile.am: Set -DNOBFD=1 in libctf-nobfd, and =0 elsewhere.\n\t* Makefile.in: Regenerated.\n\t* ctf-impl.h (ctf_link_input_name): New.\n\t(ctf_file_t) <ctf_link_flags>: New.\n\t* ctf-create.c (ctf_serialize): Adjust accordingly.\n\t* ctf-link.c: Define ctf_open as weak when PIC.\n\t(ctf_arc_close_thunk): Remove unnecessary thunk.\n\t(ctf_file_close_thunk): Likewise.\n\t(ctf_link_input_name): New.\n\t(ctf_link_input_t): New value of the ctf_file_t.ctf_link_input.\n\t(ctf_link_input_close): Adjust accordingly.\n\t(ctf_link_add_ctf_internal): New, split from...\n\t(ctf_link_add_ctf): ... here.  Return error if lazy loading of\n\tCTF is not possible.  Change to just call...\n\t(ctf_link_add): ... this new function.\n\t(ctf_link_add_cu_mapping): Transition to ctf_err_warn.  Drop the\n\tctf_file_close_thunk.\n\t(ctf_link_in_member_cb_arg_t) <file_name> Rename to...\n\t<in_file_name>: ... this.\n\t<arcname>: Drop.\n\t<share_mode>: Likewise (migrated to ctf_link_flags).\n\t<done_main_member>: Rename to...\n\t<done_parent>: ... this.\n\t<main_input_fp>: Rename to...\n\t<in_fp_parent>: ... this.\n\t<cu_mapped>: New.\n\t(ctf_link_one_type): Adjuwt accordingly.  Transition to\n\tctf_err_warn, removing a TODO.\n\t(ctf_link_one_variable): Note a case too common to warn about.\n\tReport in the debug stream if a cu-mapped link prevents addition\n\tof a conflicting variable.\n\t(ctf_link_one_input_archive_member): Adjust.\n\t(ctf_link_lazy_open): New, open a CTF archive for linking when\n\tneeded.\n\t(ctf_link_close_one_input_archive): New, close it again.\n\t(ctf_link_one_input_archive): Adjust for lazy opening, member\n\trenames, and ctf_err_warn transition.  Move the\n\tempty_link_type_mapping call to...\n\t(ctf_link): ... here.  Adjut for renamings and thunk removal.\n\tDon't spuriously fail if some input contains no CTF data.\n\t(ctf_link_write): ctf_err_warn transition.\n\t* libctf.ver: Remove not-yet-stable comment.",
    "tree": {
      "sha": "c62cc34c280ec16b5596e43fb29c16ec9530f85b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c62cc34c280ec16b5596e43fb29c16ec9530f85b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8d2229ad1e779fbdecfe1d68c02706d075eb81c6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8d2229ad1e779fbdecfe1d68c02706d075eb81c6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8d2229ad1e779fbdecfe1d68c02706d075eb81c6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e148b73013109517c4d179aa9ae5a50b6d1dd5b5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e148b73013109517c4d179aa9ae5a50b6d1dd5b5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e148b73013109517c4d179aa9ae5a50b6d1dd5b5"
    }
  ],
  "stats": {
    "total": 744,
    "additions": 611,
    "deletions": 133
  },
  "files": [
    {
      "sha": "6358ec6c78f0f51f3f426d5a61619fb86133042c",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=8d2229ad1e779fbdecfe1d68c02706d075eb81c6",
      "patch": "@@ -1,3 +1,9 @@\n+2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-api.h (ECTF_NEEDSBFD): New.\n+\t(ECTF_NERR): Adjust.\n+\t(ctf_link): Rename share_mode arg to flags.\n+\n 2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-api.h (ECTF_INTERNAL): Adjust error text."
    },
    {
      "sha": "7d3e1c8bfcd93df8d0566ad5f4f2e1e21deb1252",
      "filename": "include/ctf-api.h",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/include/ctf-api.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/include/ctf-api.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ctf-api.h?ref=8d2229ad1e779fbdecfe1d68c02706d075eb81c6",
      "patch": "@@ -208,10 +208,11 @@ enum\n    ECTF_NEXT_END,\t/* End of iteration.  */\n    ECTF_NEXT_WRONGFUN,\t/* Wrong iteration function called.  */\n    ECTF_NEXT_WRONGFP,\t/* Iteration entity changed in mid-iterate.  */\n-   ECTF_FLAGS\t\t/* CTF header contains flags unknown to libctf.  */\n+   ECTF_FLAGS,\t\t/* CTF header contains flags unknown to libctf.  */\n+   ECTF_NEEDSBFD\t/* This feature needs a libctf with BFD support.  */\n   };\n \n-#define ECTF_NERR (ECTF_FLAGS - ECTF_BASE + 1)\t/* Count of CTF errors.  */\n+#define ECTF_NERR (ECTF_NEEDSBFD - ECTF_BASE + 1) /* Count of CTF errors.  */\n \n /* The CTF data model is inferred to be the caller's data model or the data\n    model of the given object, unless ctf_setmodel() is explicitly called.  */\n@@ -452,10 +453,8 @@ extern int ctf_gzwrite (ctf_file_t *fp, gzFile fd);\n extern int ctf_compress_write (ctf_file_t * fp, int fd);\n extern unsigned char *ctf_write_mem (ctf_file_t *, size_t *, size_t threshold);\n \n-/* The ctf_link interfaces are not stable yet.  No guarantees!  */\n-\n extern int ctf_link_add_ctf (ctf_file_t *, ctf_archive_t *, const char *);\n-extern int ctf_link (ctf_file_t *, int share_mode);\n+extern int ctf_link (ctf_file_t *, int flags);\n typedef const char *ctf_link_strtab_string_f (uint32_t *offset, void *arg);\n extern int ctf_link_add_strtab (ctf_file_t *, ctf_link_strtab_string_f *,\n \t\t\t\tvoid *);"
    },
    {
      "sha": "c3451ee5aa6c7323cb088415ce11db2a4c64fce8",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=8d2229ad1e779fbdecfe1d68c02706d075eb81c6",
      "patch": "@@ -1,3 +1,48 @@\n+2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* Makefile.am: Set -DNOBFD=1 in libctf-nobfd, and =0 elsewhere.\n+\t* Makefile.in: Regenerated.\n+\t* ctf-impl.h (ctf_link_input_name): New.\n+\t(ctf_file_t) <ctf_link_flags>: New.\n+\t* ctf-create.c (ctf_serialize): Adjust accordingly.\n+\t* ctf-link.c: Define ctf_open as weak when PIC.\n+\t(ctf_arc_close_thunk): Remove unnecessary thunk.\n+\t(ctf_file_close_thunk): Likewise.\n+\t(ctf_link_input_name): New.\n+\t(ctf_link_input_t): New value of the ctf_file_t.ctf_link_input.\n+\t(ctf_link_input_close): Adjust accordingly.\n+\t(ctf_link_add_ctf_internal): New, split from...\n+\t(ctf_link_add_ctf): ... here.  Return error if lazy loading of\n+\tCTF is not possible.  Change to just call...\n+\t(ctf_link_add): ... this new function.\n+\t(ctf_link_add_cu_mapping): Transition to ctf_err_warn.  Drop the\n+\tctf_file_close_thunk.\n+\t(ctf_link_in_member_cb_arg_t) <file_name> Rename to...\n+\t<in_file_name>: ... this.\n+\t<arcname>: Drop.\n+\t<share_mode>: Likewise (migrated to ctf_link_flags).\n+\t<done_main_member>: Rename to...\n+\t<done_parent>: ... this.\n+\t<main_input_fp>: Rename to...\n+\t<in_fp_parent>: ... this.\n+\t<cu_mapped>: New.\n+\t(ctf_link_one_type): Adjuwt accordingly.  Transition to\n+\tctf_err_warn, removing a TODO.\n+\t(ctf_link_one_variable): Note a case too common to warn about.\n+\tReport in the debug stream if a cu-mapped link prevents addition\n+\tof a conflicting variable.\n+\t(ctf_link_one_input_archive_member): Adjust.\n+\t(ctf_link_lazy_open): New, open a CTF archive for linking when\n+\tneeded.\n+\t(ctf_link_close_one_input_archive): New, close it again.\n+\t(ctf_link_one_input_archive): Adjust for lazy opening, member\n+\trenames, and ctf_err_warn transition.  Move the\n+\tempty_link_type_mapping call to...\n+\t(ctf_link): ... here.  Adjut for renamings and thunk removal.\n+\tDon't spuriously fail if some input contains no CTF data.\n+\t(ctf_link_write): ctf_err_warn transition.\n+\t* libctf.ver: Remove not-yet-stable comment.\n+\n 2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-impl.h (ctf_strerror): Delete."
    },
    {
      "sha": "de27cf823947a3b1925ba22d166858bf0ddbe929",
      "filename": "libctf/Makefile.am",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/libctf/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/libctf/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/Makefile.am?ref=8d2229ad1e779fbdecfe1d68c02706d075eb81c6",
      "patch": "@@ -41,6 +41,7 @@ endif\n \n libctf_nobfd_la_LIBADD = @SHARED_LIBADD@ $(ZLIB)\n libctf_nobfd_la_LDFLAGS = -version-info 0:0:0 @SHARED_LDFLAGS@ @VERSION_FLAGS@\n+libctf_nobfd_la_CPPFLAGS = $(AM_CPPFLAGS) -DNOBFD=1\n libctf_nobfd_la_SOURCES = ctf-archive.c ctf-dump.c ctf-create.c ctf-decl.c ctf-error.c \\\n \t\t\t  ctf-hash.c ctf-labels.c ctf-link.c ctf-lookup.c ctf-open.c \\\n \t\t\t  ctf-string.c ctf-subr.c ctf-types.c ctf-util.c\n@@ -49,6 +50,7 @@ libctf_nobfd_la_SOURCES += ctf-qsort_r.c\n endif\n \n libctf_la_LIBADD = @BFD_LIBADD@ $(libctf_nobfd_la_LIBADD)\n+libctf_la_CPPFLAGS = $(AM_CPPFLAGS) -DNOBFD=0\n libctf_la_DEPENDENCIES = @BFD_DEPENDENCIES@\n libctf_la_LDFLAGS = $(libctf_nobfd_la_LDFLAGS)\n libctf_la_SOURCES = $(libctf_nobfd_la_SOURCES) ctf-open-bfd.c"
    },
    {
      "sha": "3b7feea02d23c05879026183f5b012947bba6c0e",
      "filename": "libctf/Makefile.in",
      "status": "modified",
      "additions": 268,
      "deletions": 26,
      "changes": 294,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/libctf/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/libctf/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/Makefile.in?ref=8d2229ad1e779fbdecfe1d68c02706d075eb81c6",
      "patch": "@@ -167,11 +167,15 @@ am__libctf_nobfd_la_SOURCES_DIST = ctf-archive.c ctf-dump.c \\\n \tctf-create.c ctf-decl.c ctf-error.c ctf-hash.c ctf-labels.c \\\n \tctf-link.c ctf-lookup.c ctf-open.c ctf-string.c ctf-subr.c \\\n \tctf-types.c ctf-util.c ctf-qsort_r.c\n-@NEED_CTF_QSORT_R_TRUE@am__objects_1 = ctf-qsort_r.lo\n-am_libctf_nobfd_la_OBJECTS = ctf-archive.lo ctf-dump.lo ctf-create.lo \\\n-\tctf-decl.lo ctf-error.lo ctf-hash.lo ctf-labels.lo ctf-link.lo \\\n-\tctf-lookup.lo ctf-open.lo ctf-string.lo ctf-subr.lo \\\n-\tctf-types.lo ctf-util.lo $(am__objects_1)\n+@NEED_CTF_QSORT_R_TRUE@am__objects_1 = libctf_nobfd_la-ctf-qsort_r.lo\n+am_libctf_nobfd_la_OBJECTS = libctf_nobfd_la-ctf-archive.lo \\\n+\tlibctf_nobfd_la-ctf-dump.lo libctf_nobfd_la-ctf-create.lo \\\n+\tlibctf_nobfd_la-ctf-decl.lo libctf_nobfd_la-ctf-error.lo \\\n+\tlibctf_nobfd_la-ctf-hash.lo libctf_nobfd_la-ctf-labels.lo \\\n+\tlibctf_nobfd_la-ctf-link.lo libctf_nobfd_la-ctf-lookup.lo \\\n+\tlibctf_nobfd_la-ctf-open.lo libctf_nobfd_la-ctf-string.lo \\\n+\tlibctf_nobfd_la-ctf-subr.lo libctf_nobfd_la-ctf-types.lo \\\n+\tlibctf_nobfd_la-ctf-util.lo $(am__objects_1)\n libctf_nobfd_la_OBJECTS = $(am_libctf_nobfd_la_OBJECTS)\n AM_V_lt = $(am__v_lt_@AM_V@)\n am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)\n@@ -188,11 +192,15 @@ am__libctf_la_SOURCES_DIST = ctf-archive.c ctf-dump.c ctf-create.c \\\n \tctf-decl.c ctf-error.c ctf-hash.c ctf-labels.c ctf-link.c \\\n \tctf-lookup.c ctf-open.c ctf-string.c ctf-subr.c ctf-types.c \\\n \tctf-util.c ctf-qsort_r.c ctf-open-bfd.c\n-am__objects_2 = ctf-archive.lo ctf-dump.lo ctf-create.lo ctf-decl.lo \\\n-\tctf-error.lo ctf-hash.lo ctf-labels.lo ctf-link.lo \\\n-\tctf-lookup.lo ctf-open.lo ctf-string.lo ctf-subr.lo \\\n-\tctf-types.lo ctf-util.lo $(am__objects_1)\n-am_libctf_la_OBJECTS = $(am__objects_2) ctf-open-bfd.lo\n+@NEED_CTF_QSORT_R_TRUE@am__objects_2 = libctf_la-ctf-qsort_r.lo\n+am__objects_3 = libctf_la-ctf-archive.lo libctf_la-ctf-dump.lo \\\n+\tlibctf_la-ctf-create.lo libctf_la-ctf-decl.lo \\\n+\tlibctf_la-ctf-error.lo libctf_la-ctf-hash.lo \\\n+\tlibctf_la-ctf-labels.lo libctf_la-ctf-link.lo \\\n+\tlibctf_la-ctf-lookup.lo libctf_la-ctf-open.lo \\\n+\tlibctf_la-ctf-string.lo libctf_la-ctf-subr.lo \\\n+\tlibctf_la-ctf-types.lo libctf_la-ctf-util.lo $(am__objects_2)\n+am_libctf_la_OBJECTS = $(am__objects_3) libctf_la-ctf-open-bfd.lo\n libctf_la_OBJECTS = $(am_libctf_la_OBJECTS)\n libctf_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n \t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\\n@@ -444,11 +452,13 @@ AM_CFLAGS = -std=gnu99 @ac_libctf_warn_cflags@ @warn@ @c_warn@ @WARN_PEDANTIC@ @\n @INSTALL_LIBBFD_FALSE@noinst_LTLIBRARIES = libctf.la libctf-nobfd.la\n libctf_nobfd_la_LIBADD = @SHARED_LIBADD@ $(ZLIB)\n libctf_nobfd_la_LDFLAGS = -version-info 0:0:0 @SHARED_LDFLAGS@ @VERSION_FLAGS@\n+libctf_nobfd_la_CPPFLAGS = $(AM_CPPFLAGS) -DNOBFD=1\n libctf_nobfd_la_SOURCES = ctf-archive.c ctf-dump.c ctf-create.c \\\n \tctf-decl.c ctf-error.c ctf-hash.c ctf-labels.c ctf-link.c \\\n \tctf-lookup.c ctf-open.c ctf-string.c ctf-subr.c ctf-types.c \\\n \tctf-util.c $(am__append_1)\n libctf_la_LIBADD = @BFD_LIBADD@ $(libctf_nobfd_la_LIBADD)\n+libctf_la_CPPFLAGS = $(AM_CPPFLAGS) -DNOBFD=0\n libctf_la_DEPENDENCIES = @BFD_DEPENDENCIES@\n libctf_la_LDFLAGS = $(libctf_nobfd_la_LDFLAGS)\n libctf_la_SOURCES = $(libctf_nobfd_la_SOURCES) ctf-open-bfd.c\n@@ -565,22 +575,37 @@ mostlyclean-compile:\n distclean-compile:\n \t-rm -f *.tab.c\n \n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ctf-archive.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ctf-create.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ctf-decl.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ctf-dump.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ctf-error.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ctf-hash.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ctf-labels.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ctf-link.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ctf-lookup.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ctf-open-bfd.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ctf-open.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ctf-qsort_r.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ctf-string.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ctf-subr.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ctf-types.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ctf-util.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-archive.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-create.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-decl.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-dump.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-error.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-hash.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-labels.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-link.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-lookup.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-open-bfd.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-open.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-qsort_r.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-string.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-subr.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-types.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_la-ctf-util.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-archive.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-create.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-decl.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-dump.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-error.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-hash.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-labels.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-link.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-lookup.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-open.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-qsort_r.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-string.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-subr.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-types.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/libctf_nobfd_la-ctf-util.Plo@am__quote@\n \n .c.o:\n @am__fastdepCC_TRUE@\t$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<\n@@ -603,6 +628,223 @@ distclean-compile:\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LTCOMPILE) -c -o $@ $<\n \n+libctf_nobfd_la-ctf-archive.lo: ctf-archive.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_nobfd_la-ctf-archive.lo -MD -MP -MF $(DEPDIR)/libctf_nobfd_la-ctf-archive.Tpo -c -o libctf_nobfd_la-ctf-archive.lo `test -f 'ctf-archive.c' || echo '$(srcdir)/'`ctf-archive.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_nobfd_la-ctf-archive.Tpo $(DEPDIR)/libctf_nobfd_la-ctf-archive.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-archive.c' object='libctf_nobfd_la-ctf-archive.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_nobfd_la-ctf-archive.lo `test -f 'ctf-archive.c' || echo '$(srcdir)/'`ctf-archive.c\n+\n+libctf_nobfd_la-ctf-dump.lo: ctf-dump.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_nobfd_la-ctf-dump.lo -MD -MP -MF $(DEPDIR)/libctf_nobfd_la-ctf-dump.Tpo -c -o libctf_nobfd_la-ctf-dump.lo `test -f 'ctf-dump.c' || echo '$(srcdir)/'`ctf-dump.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_nobfd_la-ctf-dump.Tpo $(DEPDIR)/libctf_nobfd_la-ctf-dump.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-dump.c' object='libctf_nobfd_la-ctf-dump.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_nobfd_la-ctf-dump.lo `test -f 'ctf-dump.c' || echo '$(srcdir)/'`ctf-dump.c\n+\n+libctf_nobfd_la-ctf-create.lo: ctf-create.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_nobfd_la-ctf-create.lo -MD -MP -MF $(DEPDIR)/libctf_nobfd_la-ctf-create.Tpo -c -o libctf_nobfd_la-ctf-create.lo `test -f 'ctf-create.c' || echo '$(srcdir)/'`ctf-create.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_nobfd_la-ctf-create.Tpo $(DEPDIR)/libctf_nobfd_la-ctf-create.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-create.c' object='libctf_nobfd_la-ctf-create.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_nobfd_la-ctf-create.lo `test -f 'ctf-create.c' || echo '$(srcdir)/'`ctf-create.c\n+\n+libctf_nobfd_la-ctf-decl.lo: ctf-decl.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_nobfd_la-ctf-decl.lo -MD -MP -MF $(DEPDIR)/libctf_nobfd_la-ctf-decl.Tpo -c -o libctf_nobfd_la-ctf-decl.lo `test -f 'ctf-decl.c' || echo '$(srcdir)/'`ctf-decl.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_nobfd_la-ctf-decl.Tpo $(DEPDIR)/libctf_nobfd_la-ctf-decl.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-decl.c' object='libctf_nobfd_la-ctf-decl.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_nobfd_la-ctf-decl.lo `test -f 'ctf-decl.c' || echo '$(srcdir)/'`ctf-decl.c\n+\n+libctf_nobfd_la-ctf-error.lo: ctf-error.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_nobfd_la-ctf-error.lo -MD -MP -MF $(DEPDIR)/libctf_nobfd_la-ctf-error.Tpo -c -o libctf_nobfd_la-ctf-error.lo `test -f 'ctf-error.c' || echo '$(srcdir)/'`ctf-error.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_nobfd_la-ctf-error.Tpo $(DEPDIR)/libctf_nobfd_la-ctf-error.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-error.c' object='libctf_nobfd_la-ctf-error.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_nobfd_la-ctf-error.lo `test -f 'ctf-error.c' || echo '$(srcdir)/'`ctf-error.c\n+\n+libctf_nobfd_la-ctf-hash.lo: ctf-hash.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_nobfd_la-ctf-hash.lo -MD -MP -MF $(DEPDIR)/libctf_nobfd_la-ctf-hash.Tpo -c -o libctf_nobfd_la-ctf-hash.lo `test -f 'ctf-hash.c' || echo '$(srcdir)/'`ctf-hash.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_nobfd_la-ctf-hash.Tpo $(DEPDIR)/libctf_nobfd_la-ctf-hash.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-hash.c' object='libctf_nobfd_la-ctf-hash.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_nobfd_la-ctf-hash.lo `test -f 'ctf-hash.c' || echo '$(srcdir)/'`ctf-hash.c\n+\n+libctf_nobfd_la-ctf-labels.lo: ctf-labels.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_nobfd_la-ctf-labels.lo -MD -MP -MF $(DEPDIR)/libctf_nobfd_la-ctf-labels.Tpo -c -o libctf_nobfd_la-ctf-labels.lo `test -f 'ctf-labels.c' || echo '$(srcdir)/'`ctf-labels.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_nobfd_la-ctf-labels.Tpo $(DEPDIR)/libctf_nobfd_la-ctf-labels.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-labels.c' object='libctf_nobfd_la-ctf-labels.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_nobfd_la-ctf-labels.lo `test -f 'ctf-labels.c' || echo '$(srcdir)/'`ctf-labels.c\n+\n+libctf_nobfd_la-ctf-link.lo: ctf-link.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_nobfd_la-ctf-link.lo -MD -MP -MF $(DEPDIR)/libctf_nobfd_la-ctf-link.Tpo -c -o libctf_nobfd_la-ctf-link.lo `test -f 'ctf-link.c' || echo '$(srcdir)/'`ctf-link.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_nobfd_la-ctf-link.Tpo $(DEPDIR)/libctf_nobfd_la-ctf-link.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-link.c' object='libctf_nobfd_la-ctf-link.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_nobfd_la-ctf-link.lo `test -f 'ctf-link.c' || echo '$(srcdir)/'`ctf-link.c\n+\n+libctf_nobfd_la-ctf-lookup.lo: ctf-lookup.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_nobfd_la-ctf-lookup.lo -MD -MP -MF $(DEPDIR)/libctf_nobfd_la-ctf-lookup.Tpo -c -o libctf_nobfd_la-ctf-lookup.lo `test -f 'ctf-lookup.c' || echo '$(srcdir)/'`ctf-lookup.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_nobfd_la-ctf-lookup.Tpo $(DEPDIR)/libctf_nobfd_la-ctf-lookup.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-lookup.c' object='libctf_nobfd_la-ctf-lookup.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_nobfd_la-ctf-lookup.lo `test -f 'ctf-lookup.c' || echo '$(srcdir)/'`ctf-lookup.c\n+\n+libctf_nobfd_la-ctf-open.lo: ctf-open.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_nobfd_la-ctf-open.lo -MD -MP -MF $(DEPDIR)/libctf_nobfd_la-ctf-open.Tpo -c -o libctf_nobfd_la-ctf-open.lo `test -f 'ctf-open.c' || echo '$(srcdir)/'`ctf-open.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_nobfd_la-ctf-open.Tpo $(DEPDIR)/libctf_nobfd_la-ctf-open.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-open.c' object='libctf_nobfd_la-ctf-open.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_nobfd_la-ctf-open.lo `test -f 'ctf-open.c' || echo '$(srcdir)/'`ctf-open.c\n+\n+libctf_nobfd_la-ctf-string.lo: ctf-string.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_nobfd_la-ctf-string.lo -MD -MP -MF $(DEPDIR)/libctf_nobfd_la-ctf-string.Tpo -c -o libctf_nobfd_la-ctf-string.lo `test -f 'ctf-string.c' || echo '$(srcdir)/'`ctf-string.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_nobfd_la-ctf-string.Tpo $(DEPDIR)/libctf_nobfd_la-ctf-string.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-string.c' object='libctf_nobfd_la-ctf-string.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_nobfd_la-ctf-string.lo `test -f 'ctf-string.c' || echo '$(srcdir)/'`ctf-string.c\n+\n+libctf_nobfd_la-ctf-subr.lo: ctf-subr.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_nobfd_la-ctf-subr.lo -MD -MP -MF $(DEPDIR)/libctf_nobfd_la-ctf-subr.Tpo -c -o libctf_nobfd_la-ctf-subr.lo `test -f 'ctf-subr.c' || echo '$(srcdir)/'`ctf-subr.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_nobfd_la-ctf-subr.Tpo $(DEPDIR)/libctf_nobfd_la-ctf-subr.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-subr.c' object='libctf_nobfd_la-ctf-subr.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_nobfd_la-ctf-subr.lo `test -f 'ctf-subr.c' || echo '$(srcdir)/'`ctf-subr.c\n+\n+libctf_nobfd_la-ctf-types.lo: ctf-types.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_nobfd_la-ctf-types.lo -MD -MP -MF $(DEPDIR)/libctf_nobfd_la-ctf-types.Tpo -c -o libctf_nobfd_la-ctf-types.lo `test -f 'ctf-types.c' || echo '$(srcdir)/'`ctf-types.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_nobfd_la-ctf-types.Tpo $(DEPDIR)/libctf_nobfd_la-ctf-types.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-types.c' object='libctf_nobfd_la-ctf-types.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_nobfd_la-ctf-types.lo `test -f 'ctf-types.c' || echo '$(srcdir)/'`ctf-types.c\n+\n+libctf_nobfd_la-ctf-util.lo: ctf-util.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_nobfd_la-ctf-util.lo -MD -MP -MF $(DEPDIR)/libctf_nobfd_la-ctf-util.Tpo -c -o libctf_nobfd_la-ctf-util.lo `test -f 'ctf-util.c' || echo '$(srcdir)/'`ctf-util.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_nobfd_la-ctf-util.Tpo $(DEPDIR)/libctf_nobfd_la-ctf-util.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-util.c' object='libctf_nobfd_la-ctf-util.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_nobfd_la-ctf-util.lo `test -f 'ctf-util.c' || echo '$(srcdir)/'`ctf-util.c\n+\n+libctf_nobfd_la-ctf-qsort_r.lo: ctf-qsort_r.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_nobfd_la-ctf-qsort_r.lo -MD -MP -MF $(DEPDIR)/libctf_nobfd_la-ctf-qsort_r.Tpo -c -o libctf_nobfd_la-ctf-qsort_r.lo `test -f 'ctf-qsort_r.c' || echo '$(srcdir)/'`ctf-qsort_r.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_nobfd_la-ctf-qsort_r.Tpo $(DEPDIR)/libctf_nobfd_la-ctf-qsort_r.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-qsort_r.c' object='libctf_nobfd_la-ctf-qsort_r.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_nobfd_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_nobfd_la-ctf-qsort_r.lo `test -f 'ctf-qsort_r.c' || echo '$(srcdir)/'`ctf-qsort_r.c\n+\n+libctf_la-ctf-archive.lo: ctf-archive.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_la-ctf-archive.lo -MD -MP -MF $(DEPDIR)/libctf_la-ctf-archive.Tpo -c -o libctf_la-ctf-archive.lo `test -f 'ctf-archive.c' || echo '$(srcdir)/'`ctf-archive.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_la-ctf-archive.Tpo $(DEPDIR)/libctf_la-ctf-archive.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-archive.c' object='libctf_la-ctf-archive.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_la-ctf-archive.lo `test -f 'ctf-archive.c' || echo '$(srcdir)/'`ctf-archive.c\n+\n+libctf_la-ctf-dump.lo: ctf-dump.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_la-ctf-dump.lo -MD -MP -MF $(DEPDIR)/libctf_la-ctf-dump.Tpo -c -o libctf_la-ctf-dump.lo `test -f 'ctf-dump.c' || echo '$(srcdir)/'`ctf-dump.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_la-ctf-dump.Tpo $(DEPDIR)/libctf_la-ctf-dump.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-dump.c' object='libctf_la-ctf-dump.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_la-ctf-dump.lo `test -f 'ctf-dump.c' || echo '$(srcdir)/'`ctf-dump.c\n+\n+libctf_la-ctf-create.lo: ctf-create.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_la-ctf-create.lo -MD -MP -MF $(DEPDIR)/libctf_la-ctf-create.Tpo -c -o libctf_la-ctf-create.lo `test -f 'ctf-create.c' || echo '$(srcdir)/'`ctf-create.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_la-ctf-create.Tpo $(DEPDIR)/libctf_la-ctf-create.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-create.c' object='libctf_la-ctf-create.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_la-ctf-create.lo `test -f 'ctf-create.c' || echo '$(srcdir)/'`ctf-create.c\n+\n+libctf_la-ctf-decl.lo: ctf-decl.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_la-ctf-decl.lo -MD -MP -MF $(DEPDIR)/libctf_la-ctf-decl.Tpo -c -o libctf_la-ctf-decl.lo `test -f 'ctf-decl.c' || echo '$(srcdir)/'`ctf-decl.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_la-ctf-decl.Tpo $(DEPDIR)/libctf_la-ctf-decl.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-decl.c' object='libctf_la-ctf-decl.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_la-ctf-decl.lo `test -f 'ctf-decl.c' || echo '$(srcdir)/'`ctf-decl.c\n+\n+libctf_la-ctf-error.lo: ctf-error.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_la-ctf-error.lo -MD -MP -MF $(DEPDIR)/libctf_la-ctf-error.Tpo -c -o libctf_la-ctf-error.lo `test -f 'ctf-error.c' || echo '$(srcdir)/'`ctf-error.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_la-ctf-error.Tpo $(DEPDIR)/libctf_la-ctf-error.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-error.c' object='libctf_la-ctf-error.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_la-ctf-error.lo `test -f 'ctf-error.c' || echo '$(srcdir)/'`ctf-error.c\n+\n+libctf_la-ctf-hash.lo: ctf-hash.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_la-ctf-hash.lo -MD -MP -MF $(DEPDIR)/libctf_la-ctf-hash.Tpo -c -o libctf_la-ctf-hash.lo `test -f 'ctf-hash.c' || echo '$(srcdir)/'`ctf-hash.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_la-ctf-hash.Tpo $(DEPDIR)/libctf_la-ctf-hash.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-hash.c' object='libctf_la-ctf-hash.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_la-ctf-hash.lo `test -f 'ctf-hash.c' || echo '$(srcdir)/'`ctf-hash.c\n+\n+libctf_la-ctf-labels.lo: ctf-labels.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_la-ctf-labels.lo -MD -MP -MF $(DEPDIR)/libctf_la-ctf-labels.Tpo -c -o libctf_la-ctf-labels.lo `test -f 'ctf-labels.c' || echo '$(srcdir)/'`ctf-labels.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_la-ctf-labels.Tpo $(DEPDIR)/libctf_la-ctf-labels.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-labels.c' object='libctf_la-ctf-labels.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_la-ctf-labels.lo `test -f 'ctf-labels.c' || echo '$(srcdir)/'`ctf-labels.c\n+\n+libctf_la-ctf-link.lo: ctf-link.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_la-ctf-link.lo -MD -MP -MF $(DEPDIR)/libctf_la-ctf-link.Tpo -c -o libctf_la-ctf-link.lo `test -f 'ctf-link.c' || echo '$(srcdir)/'`ctf-link.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_la-ctf-link.Tpo $(DEPDIR)/libctf_la-ctf-link.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-link.c' object='libctf_la-ctf-link.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_la-ctf-link.lo `test -f 'ctf-link.c' || echo '$(srcdir)/'`ctf-link.c\n+\n+libctf_la-ctf-lookup.lo: ctf-lookup.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_la-ctf-lookup.lo -MD -MP -MF $(DEPDIR)/libctf_la-ctf-lookup.Tpo -c -o libctf_la-ctf-lookup.lo `test -f 'ctf-lookup.c' || echo '$(srcdir)/'`ctf-lookup.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_la-ctf-lookup.Tpo $(DEPDIR)/libctf_la-ctf-lookup.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-lookup.c' object='libctf_la-ctf-lookup.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_la-ctf-lookup.lo `test -f 'ctf-lookup.c' || echo '$(srcdir)/'`ctf-lookup.c\n+\n+libctf_la-ctf-open.lo: ctf-open.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_la-ctf-open.lo -MD -MP -MF $(DEPDIR)/libctf_la-ctf-open.Tpo -c -o libctf_la-ctf-open.lo `test -f 'ctf-open.c' || echo '$(srcdir)/'`ctf-open.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_la-ctf-open.Tpo $(DEPDIR)/libctf_la-ctf-open.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-open.c' object='libctf_la-ctf-open.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_la-ctf-open.lo `test -f 'ctf-open.c' || echo '$(srcdir)/'`ctf-open.c\n+\n+libctf_la-ctf-string.lo: ctf-string.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_la-ctf-string.lo -MD -MP -MF $(DEPDIR)/libctf_la-ctf-string.Tpo -c -o libctf_la-ctf-string.lo `test -f 'ctf-string.c' || echo '$(srcdir)/'`ctf-string.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_la-ctf-string.Tpo $(DEPDIR)/libctf_la-ctf-string.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-string.c' object='libctf_la-ctf-string.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_la-ctf-string.lo `test -f 'ctf-string.c' || echo '$(srcdir)/'`ctf-string.c\n+\n+libctf_la-ctf-subr.lo: ctf-subr.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_la-ctf-subr.lo -MD -MP -MF $(DEPDIR)/libctf_la-ctf-subr.Tpo -c -o libctf_la-ctf-subr.lo `test -f 'ctf-subr.c' || echo '$(srcdir)/'`ctf-subr.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_la-ctf-subr.Tpo $(DEPDIR)/libctf_la-ctf-subr.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-subr.c' object='libctf_la-ctf-subr.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_la-ctf-subr.lo `test -f 'ctf-subr.c' || echo '$(srcdir)/'`ctf-subr.c\n+\n+libctf_la-ctf-types.lo: ctf-types.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_la-ctf-types.lo -MD -MP -MF $(DEPDIR)/libctf_la-ctf-types.Tpo -c -o libctf_la-ctf-types.lo `test -f 'ctf-types.c' || echo '$(srcdir)/'`ctf-types.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_la-ctf-types.Tpo $(DEPDIR)/libctf_la-ctf-types.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-types.c' object='libctf_la-ctf-types.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_la-ctf-types.lo `test -f 'ctf-types.c' || echo '$(srcdir)/'`ctf-types.c\n+\n+libctf_la-ctf-util.lo: ctf-util.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_la-ctf-util.lo -MD -MP -MF $(DEPDIR)/libctf_la-ctf-util.Tpo -c -o libctf_la-ctf-util.lo `test -f 'ctf-util.c' || echo '$(srcdir)/'`ctf-util.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_la-ctf-util.Tpo $(DEPDIR)/libctf_la-ctf-util.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-util.c' object='libctf_la-ctf-util.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_la-ctf-util.lo `test -f 'ctf-util.c' || echo '$(srcdir)/'`ctf-util.c\n+\n+libctf_la-ctf-qsort_r.lo: ctf-qsort_r.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_la-ctf-qsort_r.lo -MD -MP -MF $(DEPDIR)/libctf_la-ctf-qsort_r.Tpo -c -o libctf_la-ctf-qsort_r.lo `test -f 'ctf-qsort_r.c' || echo '$(srcdir)/'`ctf-qsort_r.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_la-ctf-qsort_r.Tpo $(DEPDIR)/libctf_la-ctf-qsort_r.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-qsort_r.c' object='libctf_la-ctf-qsort_r.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_la-ctf-qsort_r.lo `test -f 'ctf-qsort_r.c' || echo '$(srcdir)/'`ctf-qsort_r.c\n+\n+libctf_la-ctf-open-bfd.lo: ctf-open-bfd.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT libctf_la-ctf-open-bfd.lo -MD -MP -MF $(DEPDIR)/libctf_la-ctf-open-bfd.Tpo -c -o libctf_la-ctf-open-bfd.lo `test -f 'ctf-open-bfd.c' || echo '$(srcdir)/'`ctf-open-bfd.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/libctf_la-ctf-open-bfd.Tpo $(DEPDIR)/libctf_la-ctf-open-bfd.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='ctf-open-bfd.c' object='libctf_la-ctf-open-bfd.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(libctf_la_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libctf_la-ctf-open-bfd.lo `test -f 'ctf-open-bfd.c' || echo '$(srcdir)/'`ctf-open-bfd.c\n+\n mostlyclean-libtool:\n \t-rm -f *.lo\n "
    },
    {
      "sha": "85fd060262e2ebfdf1dccc4ec40f0023a3b20b98",
      "filename": "libctf/ctf-create.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/libctf/ctf-create.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/libctf/ctf-create.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-create.c?ref=8d2229ad1e779fbdecfe1d68c02706d075eb81c6",
      "patch": "@@ -542,6 +542,7 @@ ctf_serialize (ctf_file_t *fp)\n   nfp->ctf_link_type_mapping = fp->ctf_link_type_mapping;\n   nfp->ctf_link_memb_name_changer = fp->ctf_link_memb_name_changer;\n   nfp->ctf_link_memb_name_changer_arg = fp->ctf_link_memb_name_changer_arg;\n+  nfp->ctf_link_flags = fp->ctf_link_flags;\n \n   nfp->ctf_snapshot_lu = fp->ctf_snapshots;\n "
    },
    {
      "sha": "cb7de23dbbb1926461c2ee9c6b3b7ce261ecb8e1",
      "filename": "libctf/ctf-impl.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/libctf/ctf-impl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/libctf/ctf-impl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-impl.h?ref=8d2229ad1e779fbdecfe1d68c02706d075eb81c6",
      "patch": "@@ -314,6 +314,9 @@ struct ctf_file\n   ctf_dynhash_t *ctf_link_type_mapping; /* Map input types to output types.  */\n   ctf_dynhash_t *ctf_link_cu_mapping;\t/* Map CU names to CTF dict names.  */\n   /* Allow the caller to Change the name of link archive members.  */\n+  /* CTF linker flags.  */\n+  int ctf_link_flags;\n+\n   ctf_link_memb_name_changer_f *ctf_link_memb_name_changer;\n   void *ctf_link_memb_name_changer_arg; /* Argument for it.  */\n   ctf_dynhash_t *ctf_add_processing; /* Types ctf_add_type is working on now.  */\n@@ -560,6 +563,7 @@ _libctf_printflike_ (3, 4)\n extern void ctf_err_warn (ctf_file_t *, int is_warning, const char *, ...);\n extern void ctf_assert_fail_internal (ctf_file_t *, const char *,\n \t\t\t\t      size_t, const char *);\n+extern const char *ctf_link_input_name (ctf_file_t *);\n \n extern Elf64_Sym *ctf_sym_to_elf64 (const Elf32_Sym *src, Elf64_Sym *dst);\n extern const char *ctf_lookup_symbol_name (ctf_file_t *fp, unsigned long symidx);"
    },
    {
      "sha": "705701d0eb52fb1815c0344874ffe957dae7389e",
      "filename": "libctf/ctf-link.c",
      "status": "modified",
      "additions": 281,
      "deletions": 100,
      "changes": 381,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/libctf/ctf-link.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/libctf/ctf-link.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-link.c?ref=8d2229ad1e779fbdecfe1d68c02706d075eb81c6",
      "patch": "@@ -20,6 +20,10 @@\n #include <ctf-impl.h>\n #include <string.h>\n \n+#if defined (PIC)\n+#pragma weak ctf_open\n+#endif\n+\n /* Type tracking machinery.  */\n \n /* Record the correspondence between a source and ctf_add_type()-added\n@@ -137,45 +141,143 @@ ctf_type_mapping (ctf_file_t *src_fp, ctf_id_t src_type, ctf_file_t **dst_fp)\n    (otherwise) and returns it, suitable for addition in the .ctf section of the\n    output.  */\n \n-/* Add a file to a link.  */\n-\n-static void ctf_arc_close_thunk (void *arc)\n+/* Return the name of the compilation unit this CTF dict or its parent applies\n+   to, or a non-null string otherwise: prefer the parent.  Used in debugging\n+   output.  Sometimes used for outputs too.  */\n+const char *\n+ctf_link_input_name (ctf_file_t *fp)\n {\n-  ctf_arc_close ((ctf_archive_t *) arc);\n+  if (fp->ctf_parent && fp->ctf_parent->ctf_cuname)\n+    return fp->ctf_parent->ctf_cuname;\n+  else if (fp->ctf_cuname)\n+    return fp->ctf_cuname;\n+  else\n+    return \"(unnamed)\";\n }\n \n-static void ctf_file_close_thunk (void *file)\n+/* The linker inputs look like this.  clin_fp is used for short-circuited\n+   CU-mapped links that can entirely avoid the first link phase in some\n+   situations in favour of just passing on the contained ctf_file_t: it is\n+   always the sole ctf_file_t inside the corresponding clin_arc.  If set, it\n+   gets assigned directly to the final link inputs and freed from there, so it\n+   never gets explicitly freed in the ctf_link_input.  */\n+typedef struct ctf_link_input\n+{\n+  const char *clin_filename;\n+  ctf_archive_t *clin_arc;\n+  ctf_file_t *clin_fp;\n+  int n;\n+} ctf_link_input_t;\n+\n+static void\n+ctf_link_input_close (void *input)\n {\n-  ctf_file_close ((ctf_file_t *) file);\n+  ctf_link_input_t *i = (ctf_link_input_t *) input;\n+  if (i->clin_arc)\n+    ctf_arc_close (i->clin_arc);\n+  free (i);\n }\n \n-int\n-ctf_link_add_ctf (ctf_file_t *fp, ctf_archive_t *ctf, const char *name)\n+/* Like ctf_link_add_ctf, below, but with no error-checking, so it can be called\n+   in the middle of an ongoing link.  */\n+static int\n+ctf_link_add_ctf_internal (ctf_file_t *fp, ctf_archive_t *ctf,\n+\t\t\t   ctf_file_t *fp_input, const char *name)\n {\n+  ctf_link_input_t *input = NULL;\n   char *dupname = NULL;\n \n-  if (fp->ctf_link_outputs)\n-    return (ctf_set_errno (fp, ECTF_LINKADDEDLATE));\n-  if (fp->ctf_link_inputs == NULL)\n-    fp->ctf_link_inputs = ctf_dynhash_create (ctf_hash_string,\n-\t\t\t\t\t      ctf_hash_eq_string, free,\n-\t\t\t\t\t      ctf_arc_close_thunk);\n-\n-  if (fp->ctf_link_inputs == NULL)\n+  if ((input = calloc (1, sizeof (ctf_link_input_t))) == NULL)\n     goto oom;\n \n   if ((dupname = strdup (name)) == NULL)\n     goto oom;\n \n-  if (ctf_dynhash_insert (fp->ctf_link_inputs, dupname, ctf) < 0)\n+  input->clin_arc = ctf;\n+  input->clin_fp = fp_input;\n+  input->clin_filename = dupname;\n+  input->n = ctf_dynhash_elements (fp->ctf_link_inputs);\n+\n+  if (ctf_dynhash_insert (fp->ctf_link_inputs, dupname, input) < 0)\n     goto oom;\n \n   return 0;\n  oom:\n-  free (fp->ctf_link_inputs);\n-  fp->ctf_link_inputs = NULL;\n+  free (input);\n   free (dupname);\n-  return (ctf_set_errno (fp, ENOMEM));\n+  return ctf_set_errno (fp, ENOMEM);\n+}\n+\n+/* Add a file, memory buffer, or unopened file (by name) to a link.\n+\n+   You can call this with:\n+\n+    CTF and NAME: link the passed ctf_archive_t, with the given NAME.\n+    NAME alone: open NAME as a CTF file when needed.\n+    BUF and NAME: open the BUF (of length N) as CTF, with the given NAME.  (Not\n+    yet implemented.)\n+\n+    Passed in CTF args are owned by the dictionary and will be freed by it.\n+    The BUF arg is *not* owned by the dictionary, and the user should not free\n+    its referent until the link is done.\n+\n+    The order of calls to this function influences the order of types in the\n+    final link output, but otherwise is not important.\n+\n+    Private for now, but may in time become public once support for BUF is\n+    implemented.  */\n+\n+static int\n+ctf_link_add (ctf_file_t *fp, ctf_archive_t *ctf, const char *name,\n+\t      void *buf _libctf_unused_, size_t n _libctf_unused_)\n+{\n+  if (buf)\n+    return (ctf_set_errno (fp, ECTF_NOTYET));\n+\n+  if (!((ctf && name && !buf)\n+\t|| (name && !buf && !ctf)\n+\t|| (buf && name && !ctf)))\n+    return (ctf_set_errno (fp, EINVAL));\n+\n+  /* We can only lazily open files if libctf.so is in use rather than\n+     libctf-nobfd.so.  This is a little tricky: in shared libraries, we can use\n+     a weak symbol so that -lctf -lctf-nobfd works, but in static libraries we\n+     must distinguish between the two libraries explicitly.  */\n+\n+#if defined (PIC)\n+  if (!buf && !ctf && name && !ctf_open)\n+    return (ctf_set_errno (fp, ECTF_NEEDSBFD));\n+#elif NOBFD\n+  if (!buf && !ctf && name)\n+    return (ctf_set_errno (fp, ECTF_NEEDSBFD));\n+#endif\n+\n+  if (fp->ctf_link_outputs)\n+    return (ctf_set_errno (fp, ECTF_LINKADDEDLATE));\n+  if (fp->ctf_link_inputs == NULL)\n+    fp->ctf_link_inputs = ctf_dynhash_create (ctf_hash_string,\n+\t\t\t\t\t      ctf_hash_eq_string, free,\n+\t\t\t\t\t      ctf_link_input_close);\n+\n+  if (fp->ctf_link_inputs == NULL)\n+    return (ctf_set_errno (fp, ENOMEM));\n+\n+  return ctf_link_add_ctf_internal (fp, ctf, NULL, name);\n+}\n+\n+/* Add an opened CTF archive or unopened file (by name) to a link.\n+   If CTF is NULL and NAME is non-null, an unopened file is meant:\n+   otherwise, the specified archive is assumed to have the given NAME.\n+\n+    Passed in CTF args are owned by the dictionary and will be freed by it.\n+\n+    The order of calls to this function influences the order of types in the\n+    final link output, but otherwise is not important.  */\n+\n+int\n+ctf_link_add_ctf (ctf_file_t *fp, ctf_archive_t *ctf, const char *name)\n+{\n+  return ctf_link_add (fp, ctf, name, NULL, 0);\n }\n \n /* Return a per-CU output CTF dictionary suitable for the given CU, creating and\n@@ -210,9 +312,9 @@ ctf_create_per_cu (ctf_file_t *fp, const char *filename, const char *cuname)\n \n       if ((cu_fp = ctf_create (&err)) == NULL)\n \t{\n-\t  ctf_dprintf (\"Cannot create per-CU CTF archive for CU %s from \"\n-\t\t       \"input file %s: %s\\n\", cuname, filename,\n-\t\t       ctf_errmsg (err));\n+\t  ctf_err_warn (fp, 0, \"Cannot create per-CU CTF archive for \"\n+\t\t\t\"CU %s from input file %s: %s\", cuname, filename,\n+\t\t\tctf_errmsg (err));\n \t  ctf_set_errno (fp, err);\n \t  return NULL;\n \t}\n@@ -262,7 +364,8 @@ ctf_link_add_cu_mapping (ctf_file_t *fp, const char *from, const char *to)\n   if (fp->ctf_link_outputs == NULL)\n     fp->ctf_link_outputs = ctf_dynhash_create (ctf_hash_string,\n \t\t\t\t\t       ctf_hash_eq_string, free,\n-\t\t\t\t\t       ctf_file_close_thunk);\n+\t\t\t\t\t       (ctf_hash_free_fun)\n+\t\t\t\t\t       ctf_file_close);\n \n   if (fp->ctf_link_outputs == NULL)\n     return ctf_set_errno (fp, ENOMEM);\n@@ -310,15 +413,27 @@ ctf_link_set_memb_name_changer (ctf_file_t *fp,\n \n typedef struct ctf_link_in_member_cb_arg\n {\n+  /* The shared output dictionary.  */\n   ctf_file_t *out_fp;\n-  const char *file_name;\n+\n+  /* The filename of the input file, and an fp to each dictionary in that file\n+     in turn.  */\n+  const char *in_file_name;\n   ctf_file_t *in_fp;\n-  ctf_file_t *main_input_fp;\n+\n+  /* The CU name of the dict being processed.  */\n   const char *cu_name;\n-  char *arcname;\n-  int done_main_member;\n-  int share_mode;\n   int in_input_cu_file;\n+\n+  /* The parent dictionary in the input, and whether it's been processed yet.\n+     Not needed by ctf_link_one_type / ctf_link_one_variable, only by higher\n+     layers.  */\n+  ctf_file_t *in_fp_parent;\n+  int done_parent;\n+\n+  /* If true, this is the CU-mapped portion of a deduplicating link: no child\n+     dictionaries should be created.  */\n+  int cu_mapped;\n } ctf_link_in_member_cb_arg_t;\n \n /* Link one type into the link.  We rely on ctf_add_type() to detect\n@@ -332,9 +447,9 @@ ctf_link_one_type (ctf_id_t type, int isroot _libctf_unused_, void *arg_)\n   ctf_file_t *per_cu_out_fp;\n   int err;\n \n-  if (arg->share_mode != CTF_LINK_SHARE_UNCONFLICTED)\n+  if (arg->in_fp->ctf_link_flags != CTF_LINK_SHARE_UNCONFLICTED)\n     {\n-      ctf_dprintf (\"Share-duplicated mode not yet implemented.\\n\");\n+      ctf_err_warn (arg->out_fp, 0, \"Share-duplicated mode not yet implemented\");\n       return ctf_set_errno (arg->out_fp, ECTF_NOTYET);\n     }\n \n@@ -352,19 +467,18 @@ ctf_link_one_type (ctf_id_t type, int isroot _libctf_unused_, void *arg_)\n       if (err != ECTF_CONFLICT)\n \t{\n \t  if (err != ECTF_NONREPRESENTABLE)\n-\t    ctf_dprintf (\"Cannot link type %lx from archive member %s, input file %s \"\n-\t\t\t \"into output link: %s\\n\", type, arg->arcname, arg->file_name,\n-\t\t\t ctf_errmsg (err));\n+\t    ctf_err_warn (arg->out_fp, 1, \"Cannot link type %lx from input file %s, \"\n+\t\t\t  \"CU %s into output link: %s\", type, arg->cu_name,\n+\t\t\t arg->in_file_name, ctf_errmsg (err));\n \t  /* We must ignore this problem or we end up losing future types, then\n \t     trying to link the variables in, then exploding.  Better to link as\n-\t     much as possible.  XXX when we add a proper link warning\n-\t     infrastructure, we should report the error here!  */\n+\t     much as possible.  */\n \t  return 0;\n \t}\n       ctf_set_errno (arg->out_fp, 0);\n     }\n \n-  if ((per_cu_out_fp = ctf_create_per_cu (arg->out_fp, arg->file_name,\n+  if ((per_cu_out_fp = ctf_create_per_cu (arg->out_fp, arg->in_file_name,\n \t\t\t\t\t  arg->cu_name)) == NULL)\n     return -1;\t\t\t\t\t/* Errno is set for us.  */\n \n@@ -373,10 +487,10 @@ ctf_link_one_type (ctf_id_t type, int isroot _libctf_unused_, void *arg_)\n \n   err = ctf_errno (per_cu_out_fp);\n   if (err != ECTF_NONREPRESENTABLE)\n-    ctf_dprintf (\"Cannot link type %lx from CTF archive member %s, input file %s \"\n-\t\t \"into output per-CU CTF archive member %s: %s: skipped\\n\", type,\n-\t\t arg->arcname, arg->file_name, arg->arcname,\n-\t\t ctf_errmsg (err));\n+    ctf_err_warn (arg->out_fp, 1, \"Cannot link type %lx from input file %s, CU %s \"\n+\t\t \"into output per-CU CTF archive member %s: %s: skipped\", type,\n+\t\t ctf_link_input_name (arg->in_fp), arg->in_file_name,\n+\t\t ctf_link_input_name (per_cu_out_fp), ctf_errmsg (err));\n   if (err == ECTF_CONFLICT)\n       /* Conflicts are possible at this stage only if a non-ld user has combined\n \t multiple TUs into a single output dictionary.  Even in this case we do not\n@@ -402,8 +516,9 @@ check_variable (const char *name, ctf_file_t *fp, ctf_id_t type,\n   if (dvd->dvd_type != type)\n     {\n       /* Variable here.  Wrong type: cannot add.  Just skip it, because there is\n-\t no way to express this in CTF.  (This might be the parent, in which\n-\t case we'll try adding in the child first, and only then give up.)  */\n+\t no way to express this in CTF.  Don't even warn: this case is too\n+\t common.  (This might be the parent, in which case we'll try adding in\n+\t the child first, and only then give up.)  */\n       ctf_dprintf (\"Inexpressible duplicate variable %s skipped.\\n\", name);\n     }\n \n@@ -448,9 +563,18 @@ ctf_link_one_variable (const char *name, ctf_id_t type, void *arg_)\n \n   /* Can't add to the parent due to a name clash, or because it references a\n      type only present in the child.  Try adding to the child, creating if need\n-     be.  */\n+     be.  If we can't do that, skip it.  Don't add to a child if we're doing a\n+     CU-mapped link, since that has only one output.  */\n+\n+  if (arg->cu_mapped)\n+    {\n+      ctf_dprintf (\"Variable %s in input file %s depends on a type %lx hidden \"\n+\t\t   \"due to conflicts: skipped.\\n\", name, arg->in_file_name,\n+\t\t   type);\n+      return 0;\n+    }\n \n-  if ((per_cu_out_fp = ctf_create_per_cu (arg->out_fp, arg->file_name,\n+  if ((per_cu_out_fp = ctf_create_per_cu (arg->out_fp, arg->in_file_name,\n \t\t\t\t\t  arg->cu_name)) == NULL)\n     return -1;\t\t\t\t\t/* Errno is set for us.  */\n \n@@ -462,8 +586,9 @@ ctf_link_one_variable (const char *name, ctf_id_t type, void *arg_)\n \n       if (dst_type == 0)\n \t{\n-\t  ctf_dprintf (\"Type %lx for variable %s in input file %s not \"\n-\t\t       \"found: skipped.\\n\", type, name, arg->file_name);\n+\t  ctf_err_warn (arg->out_fp, 1, \"Type %lx for variable %s in input \"\n+\t\t\t\"file %s not found: skipped\", type, name,\n+\t\t\targ->in_file_name);\n \t  /* Do not terminate the link: just skip the variable.  */\n \t  return 0;\n \t}\n@@ -475,11 +600,11 @@ ctf_link_one_variable (const char *name, ctf_id_t type, void *arg_)\n   return 0;\n }\n \n-/* Merge every type and variable in this archive member into the link, so we can\n-   relink things that have already had ld run on them.  We use the archive\n-   member name, sans any leading '.ctf.', as the CU name for ambiguous types if\n-   there is one and it's not the default: otherwise, we use the name of the\n-   input file.  */\n+/* Merge every type (and optionally, variable) in this archive member into the\n+   link, so we can relink things that have already had ld run on them.  We use\n+   the archive member name, sans any leading '.ctf.', as the CU name for\n+   ambiguous types if there is one and it's not the default: otherwise, we use\n+   the name of the input file.  */\n static int\n ctf_link_one_input_archive_member (ctf_file_t *in_fp, const char *name, void *arg_)\n {\n@@ -497,32 +622,16 @@ ctf_link_one_input_archive_member (ctf_file_t *in_fp, const char *name, void *ar\n \t causes the system to erroneously conclude that all types are duplicated\n \t and should be shared, even if they are not.  */\n \n-      if (arg->done_main_member)\n+      if (arg->done_parent)\n \treturn 0;\n-      arg->arcname = strdup (\".ctf.\");\n-      if (arg->arcname)\n-\t{\n-\t  char *new_name;\n-\n-\t  new_name = ctf_str_append (arg->arcname, arg->file_name);\n-\t  if (new_name)\n-\t    arg->arcname = new_name;\n-\t  else\n-\t    free (arg->arcname);\n-\t}\n     }\n   else\n     {\n-      arg->arcname = strdup (name);\n-\n       /* Get ambiguous types from our parent.  */\n-      ctf_import (in_fp, arg->main_input_fp);\n+      ctf_import (in_fp, arg->in_fp_parent);\n       arg->in_input_cu_file = 1;\n     }\n \n-  if (!arg->arcname)\n-    return ctf_set_errno (in_fp, ENOMEM);\n-\n   arg->cu_name = name;\n   if (strncmp (arg->cu_name, \".ctf.\", strlen (\".ctf.\")) == 0)\n     arg->cu_name += strlen (\".ctf.\");\n@@ -532,7 +641,6 @@ ctf_link_one_input_archive_member (ctf_file_t *in_fp, const char *name, void *ar\n     err = ctf_variable_iter (in_fp, ctf_link_one_variable, arg);\n \n   arg->in_input_cu_file = 0;\n-  free (arg->arcname);\n \n   if (err < 0)\n       return -1;\t\t\t\t/* Errno is set for us.  */\n@@ -551,77 +659,150 @@ empty_link_type_mapping (void *key _libctf_unused_, void *value,\n     ctf_dynhash_empty (fp->ctf_link_type_mapping);\n }\n \n+/* Lazily open a CTF archive for linking, if not already open.\n+\n+   Returns the number of files contained within the opened archive (0 for none),\n+   or -1 on error, as usual.  */\n+static ssize_t\n+ctf_link_lazy_open (ctf_file_t *fp, ctf_link_input_t *input)\n+{\n+  size_t count;\n+  int err;\n+\n+  if (input->clin_arc)\n+    return ctf_archive_count (input->clin_arc);\n+\n+  if (input->clin_fp)\n+    return 1;\n+\n+  /* See ctf_link_add_ctf.  */\n+#if defined (PIC) || !NOBFD\n+  input->clin_arc = ctf_open (input->clin_filename, NULL, &err);\n+#else\n+  ctf_err_warn (fp, 0, \"Cannot open %s lazily: %s\", input->clin_filename,\n+\t\tctf_errmsg (ECTF_NEEDSBFD));\n+  ctf_set_errno (fp, ECTF_NEEDSBFD);\n+  return -1;\n+#endif\n+\n+  /* Having no CTF sections is not an error.  We just don't need to do\n+     anything.  */\n+\n+  if (!input->clin_arc)\n+    {\n+      if (err == ECTF_NOCTFDATA)\n+\treturn 0;\n+\n+      ctf_err_warn (fp, 0, \"Opening CTF %s failed: %s\",\n+\t\t    input->clin_filename, ctf_errmsg (err));\n+      ctf_set_errno (fp, err);\n+      return -1;\n+    }\n+\n+  if ((count = ctf_archive_count (input->clin_arc)) == 0)\n+    ctf_arc_close (input->clin_arc);\n+\n+  return (ssize_t) count;\n+}\n+\n+/* Close an input, as a ctf_dynhash_iter iterator.  */\n+static void\n+ctf_link_close_one_input_archive (void *key _libctf_unused_, void *value,\n+\t\t\t\t  void *arg _libctf_unused_)\n+{\n+  ctf_link_input_t *input = (ctf_link_input_t *) value;\n+  if (input->clin_arc)\n+    ctf_arc_close (input->clin_arc);\n+  input->clin_arc = NULL;\n+}\n+\n /* Link one input file's types into the output file.  */\n static void\n ctf_link_one_input_archive (void *key, void *value, void *arg_)\n {\n   const char *file_name = (const char *) key;\n-  ctf_archive_t *arc = (ctf_archive_t *) value;\n+  ctf_link_input_t *input = (ctf_link_input_t *)value;\n   ctf_link_in_member_cb_arg_t *arg = (ctf_link_in_member_cb_arg_t *) arg_;\n-  int err;\n+  int err = 0;\n+\n+  if (!input->clin_arc)\n+    {\n+      err = ctf_link_lazy_open (arg->out_fp, input);\n+      if (err == 0)\t\t\t\t/* Just no CTF.  */\n+\treturn;\n+\n+      if (err < 0)\n+\treturn;\t\t\t\t\t/* errno is set for us.  */\n+    }\n \n-  arg->file_name = file_name;\n-  arg->done_main_member = 0;\n-  if ((arg->main_input_fp = ctf_arc_open_by_name (arc, NULL, &err)) == NULL)\n+  arg->in_file_name = file_name;\n+  arg->done_parent = 0;\n+  if ((arg->in_fp_parent = ctf_arc_open_by_name (input->clin_arc, NULL,\n+\t\t\t\t\t\t &err)) == NULL)\n     if (err != ECTF_ARNNAME)\n       {\n-\tctf_dprintf (\"Cannot open main archive member in input file %s in the \"\n-\t\t     \"link: skipping: %s.\\n\", arg->file_name,\n-\t\t     ctf_errmsg (err));\n-\treturn;\n+\tctf_err_warn (arg->out_fp, 0, \"Cannot open main archive member in \"\n+\t\t      \"input file %s in the link: skipping: %s\",\n+\t\t      arg->in_file_name, ctf_errmsg (err));\n+\tgoto out;\n       }\n \n-  if (ctf_link_one_input_archive_member (arg->main_input_fp,\n+  if (ctf_link_one_input_archive_member (arg->in_fp_parent,\n \t\t\t\t\t _CTF_SECTION, arg) < 0)\n     {\n-      ctf_file_close (arg->main_input_fp);\n-      return;\n+      ctf_file_close (arg->in_fp_parent);\n+      goto out;\n     }\n-  arg->done_main_member = 1;\n-  if (ctf_archive_iter (arc, ctf_link_one_input_archive_member, arg) < 0)\n-    ctf_dprintf (\"Cannot traverse archive in input file %s: link \"\n-\t\t \"cannot continue: %s.\\n\", arg->file_name,\n-\t\t ctf_errmsg (ctf_errno (arg->out_fp)));\n+  arg->done_parent = 1;\n+  if (ctf_archive_iter (input->clin_arc, ctf_link_one_input_archive_member,\n+\t\t\targ) < 0)\n+    ctf_err_warn (arg->out_fp, 0, \"Cannot traverse archive in input file %s: \"\n+\t\t  \"link cannot continue: %s\", arg->in_file_name,\n+\t\t  ctf_errmsg (ctf_errno (arg->out_fp)));\n   else\n     {\n       /* The only error indication to the caller is the errno: so ensure that it\n \t is zero if there was no actual error from the caller.  */\n       ctf_set_errno (arg->out_fp, 0);\n     }\n-  ctf_file_close (arg->main_input_fp);\n+  ctf_file_close (arg->in_fp_parent);\n \n-  /* Discard the now-unnecessary mapping table data.  */\n-  if (arg->out_fp->ctf_link_type_mapping)\n-    ctf_dynhash_empty (arg->out_fp->ctf_link_type_mapping);\n-  ctf_dynhash_iter (arg->out_fp->ctf_link_outputs, empty_link_type_mapping, NULL);\n+ out:\n+  ctf_link_close_one_input_archive (key, value, NULL);\n }\n \n /* Merge types and variable sections in all files added to the link\n-   together.  */\n+   together.  All the added files are closed.  */\n int\n-ctf_link (ctf_file_t *fp, int share_mode)\n+ctf_link (ctf_file_t *fp, int flags)\n {\n   ctf_link_in_member_cb_arg_t arg;\n \n   memset (&arg, 0, sizeof (struct ctf_link_in_member_cb_arg));\n   arg.out_fp = fp;\n-  arg.share_mode = share_mode;\n+  fp->ctf_link_flags = flags;\n \n   if (fp->ctf_link_inputs == NULL)\n     return 0;\t\t\t\t\t/* Nothing to do. */\n \n   if (fp->ctf_link_outputs == NULL)\n     fp->ctf_link_outputs = ctf_dynhash_create (ctf_hash_string,\n \t\t\t\t\t       ctf_hash_eq_string, free,\n-\t\t\t\t\t       ctf_file_close_thunk);\n+\t\t\t\t\t       (ctf_hash_free_fun)\n+\t\t\t\t\t       ctf_file_close);\n \n   if (fp->ctf_link_outputs == NULL)\n     return ctf_set_errno (fp, ENOMEM);\n \n   ctf_dynhash_iter (fp->ctf_link_inputs, ctf_link_one_input_archive,\n \t\t    &arg);\n \n-  if (ctf_errno (fp) != 0)\n+  /* Discard the now-unnecessary mapping table data from all the outputs.  */\n+  if (fp->ctf_link_type_mapping)\n+    ctf_dynhash_empty (fp->ctf_link_type_mapping);\n+  ctf_dynhash_iter (fp->ctf_link_outputs, empty_link_type_mapping, NULL);\n+\n+  if ((ctf_errno (fp) != 0) && (ctf_errno (fp) != ECTF_NOCTFDATA))\n     return -1;\n   return 0;\n }\n@@ -908,7 +1089,7 @@ ctf_link_write (ctf_file_t *fp, size_t *size, size_t threshold)\n \tfree (arg.dynames[i]);\n       free (arg.dynames);\n     }\n-  ctf_dprintf (\"Cannot write archive in link: %s failure: %s\\n\", errloc,\n-\t       ctf_errmsg (ctf_errno (fp)));\n+  ctf_err_warn (fp, 0, \"Cannot write archive in link: %s failure: %s\", errloc,\n+\t\tctf_errmsg (ctf_errno (fp)));\n   return NULL;\n }"
    },
    {
      "sha": "7eed14ae54d023564a1f068b4032a054bf0ca672",
      "filename": "libctf/libctf.ver",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/libctf/libctf.ver",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d2229ad1e779fbdecfe1d68c02706d075eb81c6/libctf/libctf.ver",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/libctf.ver?ref=8d2229ad1e779fbdecfe1d68c02706d075eb81c6",
      "patch": "@@ -156,8 +156,6 @@ LIBCTF_1.0 {\n \tctf_getdebug;\n \tctf_errwarning_next;\n \n-\t/* Not yet part of the stable API.  */\n-\n \tctf_link_add_ctf;\n \tctf_link_add_cu_mapping;\n \tctf_link_set_memb_name_changer;"
    }
  ]
}