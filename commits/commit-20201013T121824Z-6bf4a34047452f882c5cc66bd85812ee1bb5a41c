{
  "sha": "6bf4a34047452f882c5cc66bd85812ee1bb5a41c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmJmNGEzNDA0NzQ1MmY4ODJjNWNjNjZiZDg1ODEyZWUxYmI1YTQxYw==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-10-13T12:18:13Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-10-13T12:18:24Z"
    },
    "message": "gold: Properly align the NT_GNU_PROPERTY_TYPE_0 note\n\nThe NT_GNU_PROPERTY_TYPE_0 note should be aligned to 8 bytes for 64-bit\nELF as specified by gABI.  A note section can be only placed in a PT_NOTE\nsegment with the same alignment.\n\n\tPR gold/22914\n\tPR gold/23535\n\t* layout.cc (Layout::attach_allocated_section_to_segment): Place\n\ta note section in a PT_NOTE segment with the same alignment.  Set\n\tthe alignment of the PT_NOTE segment from the alignment of the\n\tnote section.\n\t(Layout::create_note): Align the NT_GNU_PROPERTY_TYPE_0 note to 8\n\tbytes for 64-bit ELF.\n\t(Layout::segment_precedes): Place segments with larger alignments\n\tfirst.\n\t* output.cc (Output_segment::Output_segment): Initialize align_.\n\t* output.h (Output_segment): Add align, set_align and align_.\n\t* testsuite/Makefile.am (gnu_property_test.stdout): Pass -lhSWn\n\tto $(TEST_READELF).\n\t(gnu_property_test): Pass --build-id to ld.\n\t* testsuite/Makefile.in: Regenerated.\n\t* testsuite/gnu_property_test.sh (check_alignment): New.\n\tUse check_alignment to check the NT_GNU_PROPERTY_TYPE_0 note\n\talignment.  Verify that there are 2 PT_NOTE segments.",
    "tree": {
      "sha": "2d96b0c8ef59de1d9e026497798470bc9504bb08",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2d96b0c8ef59de1d9e026497798470bc9504bb08"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6bf4a34047452f882c5cc66bd85812ee1bb5a41c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6bf4a34047452f882c5cc66bd85812ee1bb5a41c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6bf4a34047452f882c5cc66bd85812ee1bb5a41c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6bf4a34047452f882c5cc66bd85812ee1bb5a41c/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "aac1d94f19492fb6bea7193497bce599952c429d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aac1d94f19492fb6bea7193497bce599952c429d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/aac1d94f19492fb6bea7193497bce599952c429d"
    }
  ],
  "stats": {
    "total": 78,
    "additions": 73,
    "deletions": 5
  },
  "files": [
    {
      "sha": "2ebe2c1c3c684c0d8190e3e5ee696e926d2981f1",
      "filename": "gold/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6bf4a34047452f882c5cc66bd85812ee1bb5a41c/gold/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6bf4a34047452f882c5cc66bd85812ee1bb5a41c/gold/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/ChangeLog?ref=6bf4a34047452f882c5cc66bd85812ee1bb5a41c",
      "patch": "@@ -1,3 +1,25 @@\n+2020-10-13  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR gold/22914\n+\tPR gold/23535\n+\t* layout.cc (Layout::attach_allocated_section_to_segment): Place\n+\ta note section in a PT_NOTE segment with the same alignment.  Set\n+\tthe alignment of the PT_NOTE segment from the alignment of the\n+\tnote section.\n+\t(Layout::create_note): Align the NT_GNU_PROPERTY_TYPE_0 note to 8\n+\tbytes for 64-bit ELF.\n+\t(Layout::segment_precedes): Place segments with larger alignments\n+\tfirst.\n+\t* output.cc (Output_segment::Output_segment): Initialize align_.\n+\t* output.h (Output_segment): Add align, set_align and align_.\n+\t* testsuite/Makefile.am (gnu_property_test.stdout): Pass -lhSWn\n+\tto $(TEST_READELF).\n+\t(gnu_property_test): Pass --build-id to ld.\n+\t* testsuite/Makefile.in: Regenerated.\n+\t* testsuite/gnu_property_test.sh (check_alignment): New.\n+\tUse check_alignment to check the NT_GNU_PROPERTY_TYPE_0 note\n+\talignment.  Verify that there are 2 PT_NOTE segments.\n+\n 2020-10-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR gold/21452"
    },
    {
      "sha": "8563f110995bd1246d641f4d08db08ea453a36e9",
      "filename": "gold/layout.cc",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6bf4a34047452f882c5cc66bd85812ee1bb5a41c/gold/layout.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6bf4a34047452f882c5cc66bd85812ee1bb5a41c/gold/layout.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/layout.cc?ref=6bf4a34047452f882c5cc66bd85812ee1bb5a41c",
      "patch": "@@ -2062,12 +2062,15 @@ Layout::attach_allocated_section_to_segment(const Target* target,\n   // segment.\n   if (os->type() == elfcpp::SHT_NOTE)\n     {\n+      uint64_t os_align = os->addralign();\n+\n       // See if we already have an equivalent PT_NOTE segment.\n       for (p = this->segment_list_.begin();\n \t   p != segment_list_.end();\n \t   ++p)\n \t{\n \t  if ((*p)->type() == elfcpp::PT_NOTE\n+\t      && (*p)->align() == os_align\n \t      && (((*p)->flags() & elfcpp::PF_W)\n \t\t  == (seg_flags & elfcpp::PF_W)))\n \t    {\n@@ -2081,6 +2084,7 @@ Layout::attach_allocated_section_to_segment(const Target* target,\n \t  Output_segment* oseg = this->make_output_segment(elfcpp::PT_NOTE,\n \t\t\t\t\t\t\t   seg_flags);\n \t  oseg->add_output_section_to_nonload(os, seg_flags);\n+\t  oseg->set_align(os_align);\n \t}\n     }\n \n@@ -3184,6 +3188,10 @@ Layout::create_note(const char* name, int note_type,\n #else\n   const int size = 32;\n #endif\n+  // The NT_GNU_PROPERTY_TYPE_0 note is aligned to the pointer size.\n+  const int addralign = ((note_type == elfcpp::NT_GNU_PROPERTY_TYPE_0\n+\t\t\t ? parameters->target().get_size()\n+\t\t\t : size) / 8);\n \n   // The contents of the .note section.\n   size_t namesz = strlen(name) + 1;\n@@ -3247,7 +3255,7 @@ Layout::create_note(const char* name, int note_type,\n     return NULL;\n \n   Output_section_data* posd = new Output_data_const_buffer(buffer, notehdrsz,\n-\t\t\t\t\t\t\t   size / 8,\n+\t\t\t\t\t\t\t   addralign,\n \t\t\t\t\t\t\t   \"** note header\");\n   os->add_output_section_data(posd);\n \n@@ -3705,6 +3713,11 @@ Layout::segment_precedes(const Output_segment* seg1,\n     {\n       if (type1 != type2)\n \treturn type1 < type2;\n+      uint64_t align1 = seg1->align();\n+      uint64_t align2 = seg2->align();\n+      // Place segments with larger alignments first.\n+      if (align1 != align2)\n+\treturn align1 > align2;\n       gold_assert(flags1 != flags2\n \t\t  || this->script_options_->saw_phdrs_clause());\n       return flags1 < flags2;"
    },
    {
      "sha": "ed021c9178f4dae8115373c0968bc79150390644",
      "filename": "gold/output.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6bf4a34047452f882c5cc66bd85812ee1bb5a41c/gold/output.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6bf4a34047452f882c5cc66bd85812ee1bb5a41c/gold/output.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/output.cc?ref=6bf4a34047452f882c5cc66bd85812ee1bb5a41c",
      "patch": "@@ -4113,6 +4113,7 @@ Output_segment::Output_segment(elfcpp::Elf_Word type, elfcpp::Elf_Word flags)\n   : vaddr_(0),\n     paddr_(0),\n     memsz_(0),\n+    align_(0),\n     max_align_(0),\n     min_p_align_(0),\n     offset_(0),"
    },
    {
      "sha": "35170c3a4f8736e75975d4e01dedb5a7acbabf05",
      "filename": "gold/output.h",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6bf4a34047452f882c5cc66bd85812ee1bb5a41c/gold/output.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6bf4a34047452f882c5cc66bd85812ee1bb5a41c/gold/output.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/output.h?ref=6bf4a34047452f882c5cc66bd85812ee1bb5a41c",
      "patch": "@@ -4688,6 +4688,16 @@ class Output_segment\n   offset() const\n   { return this->offset_; }\n \n+  // Return the segment alignment.\n+  uint64_t\n+  align() const\n+  { return this->align_; }\n+\n+  // Set the segment alignment.\n+  void\n+  set_align(uint64_t align)\n+  { this->align_ = align; }\n+\n   // Whether this is a segment created to hold large data sections.\n   bool\n   is_large_data_segment() const\n@@ -4910,6 +4920,8 @@ class Output_segment\n   uint64_t paddr_;\n   // The size of the segment in memory.\n   uint64_t memsz_;\n+  // The segment alignment.\n+  uint64_t align_;\n   // The maximum section alignment.  The is_max_align_known_ field\n   // indicates whether this has been finalized.\n   uint64_t max_align_;"
    },
    {
      "sha": "026d1010b0b4cc733dcac858e5cf7391fc77580a",
      "filename": "gold/testsuite/Makefile.am",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6bf4a34047452f882c5cc66bd85812ee1bb5a41c/gold/testsuite/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6bf4a34047452f882c5cc66bd85812ee1bb5a41c/gold/testsuite/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/testsuite/Makefile.am?ref=6bf4a34047452f882c5cc66bd85812ee1bb5a41c",
      "patch": "@@ -3306,9 +3306,9 @@ check_SCRIPTS += gnu_property_test.sh\n check_DATA += gnu_property_test.stdout\n MOSTLYCLEANFILES += gnu_property_test\n gnu_property_test.stdout: gnu_property_test\n-\t$(TEST_READELF) -n $< >$@\n+\t$(TEST_READELF) -lhSWn $< >$@\n gnu_property_test: gcctestdir/ld gnu_property_a.o gnu_property_b.o gnu_property_c.o\n-\tgcctestdir/ld -o $@ gnu_property_a.o gnu_property_b.o gnu_property_c.o\n+\tgcctestdir/ld --build-id -o $@ gnu_property_a.o gnu_property_b.o gnu_property_c.o\n gnu_property_main.o: gnu_property_main.c\n \t$(COMPILE) -c -o $@ $<\n gnu_property_a.o: gnu_property_a.S"
    },
    {
      "sha": "35c442ee8b7fd116e1940eba60d44ef14c4bddea",
      "filename": "gold/testsuite/Makefile.in",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6bf4a34047452f882c5cc66bd85812ee1bb5a41c/gold/testsuite/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6bf4a34047452f882c5cc66bd85812ee1bb5a41c/gold/testsuite/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/testsuite/Makefile.in?ref=6bf4a34047452f882c5cc66bd85812ee1bb5a41c",
      "patch": "@@ -9525,9 +9525,9 @@ uninstall-am:\n @DEFAULT_TARGET_X86_64_TRUE@@GCC_TRUE@@NATIVE_LINKER_TRUE@exception_x86_64_bnd_2.o: exception_test_2.cc gcctestdir/as\n @DEFAULT_TARGET_X86_64_TRUE@@GCC_TRUE@@NATIVE_LINKER_TRUE@\t$(CXXCOMPILE) -c -Wa,-madd-bnd-prefix -o $@ $<\n @DEFAULT_TARGET_X86_64_TRUE@@GCC_TRUE@@NATIVE_LINKER_TRUE@gnu_property_test.stdout: gnu_property_test\n-@DEFAULT_TARGET_X86_64_TRUE@@GCC_TRUE@@NATIVE_LINKER_TRUE@\t$(TEST_READELF) -n $< >$@\n+@DEFAULT_TARGET_X86_64_TRUE@@GCC_TRUE@@NATIVE_LINKER_TRUE@\t$(TEST_READELF) -lhSWn $< >$@\n @DEFAULT_TARGET_X86_64_TRUE@@GCC_TRUE@@NATIVE_LINKER_TRUE@gnu_property_test: gcctestdir/ld gnu_property_a.o gnu_property_b.o gnu_property_c.o\n-@DEFAULT_TARGET_X86_64_TRUE@@GCC_TRUE@@NATIVE_LINKER_TRUE@\tgcctestdir/ld -o $@ gnu_property_a.o gnu_property_b.o gnu_property_c.o\n+@DEFAULT_TARGET_X86_64_TRUE@@GCC_TRUE@@NATIVE_LINKER_TRUE@\tgcctestdir/ld --build-id -o $@ gnu_property_a.o gnu_property_b.o gnu_property_c.o\n @DEFAULT_TARGET_X86_64_TRUE@@GCC_TRUE@@NATIVE_LINKER_TRUE@gnu_property_main.o: gnu_property_main.c\n @DEFAULT_TARGET_X86_64_TRUE@@GCC_TRUE@@NATIVE_LINKER_TRUE@\t$(COMPILE) -c -o $@ $<\n @DEFAULT_TARGET_X86_64_TRUE@@GCC_TRUE@@NATIVE_LINKER_TRUE@gnu_property_a.o: gnu_property_a.S"
    },
    {
      "sha": "1806d3474cca687e00c79619528c8750d038f23a",
      "filename": "gold/testsuite/gnu_property_test.sh",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6bf4a34047452f882c5cc66bd85812ee1bb5a41c/gold/testsuite/gnu_property_test.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6bf4a34047452f882c5cc66bd85812ee1bb5a41c/gold/testsuite/gnu_property_test.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/testsuite/gnu_property_test.sh?ref=6bf4a34047452f882c5cc66bd85812ee1bb5a41c",
      "patch": "@@ -53,8 +53,28 @@ check_count()\n     fi\n }\n \n+check_alignment ()\n+{\n+    if egrep -q \"Class:[ \\t]+ELF64\" \"$1\"\n+    then\n+\talign=8\n+    else\n+\talign=4\n+    fi\n+    if ! egrep -q \".note.gnu.property[ \\t]+NOTE.*$align$\" \"$1\"\n+    then\n+\techo \"Wrong .note.gnu.property alignment in $1:\"\n+\tegrep \".note.gnu.property[ \\t]+NOTE.*$align\" \"$1\"\n+\texit 1\n+    fi\n+}\n+\n+check_alignment gnu_property_test.stdout\n+\n check_count gnu_property_test.stdout \"GNU\\s*0x[0-9a-f]*\\s*NT_GNU_PROPERTY_TYPE_0\" 1\n \n+check_count gnu_property_test.stdout \"^  NOTE\" 2\n+\n check gnu_property_test.stdout \"stack size: 0x111100\"\n check gnu_property_test.stdout \"no copy on protected\"\n check gnu_property_test.stdout \"x86 ISA used: i486, SSE2, SSE4_2, AVX512CD\""
    }
  ]
}