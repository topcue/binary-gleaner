{
  "sha": "e45020422076c1014579ae8763fd253990ddf58e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTQ1MDIwNDIyMDc2YzEwMTQ1NzlhZTg3NjNmZDI1Mzk5MGRkZjU4ZQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-11-24T18:08:25Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-12-02T17:47:39Z"
    },
    "message": "gdb/riscv: place unknown csrs into the correct register groups\n\nUnknown riscv CSRs should not be in the 'general' group, but should be\nin the system and csr register groups.\n\nTo see this in action connect to QEMU, this target advertises two\nregisters dscratch and mucounteren which are unknown to GDB (these are\nlegacy CSRs).  Before this commit these registers would show up in the\noutput of:\n\n  (gdb) info registers\n  ....\n  dscratch       Could not fetch register \"dscratch\"; remote failure reply 'E14'\n  mucounteren    Could not fetch register \"mucounteren\"; remote failure reply 'E14'\n\nIgnore the errors, this is just a QEMU annoyance, it advertises these\nCSRs, but doesn't actually let GDB read them.  These registers don't\nshow up in the output of either:\n\n  (gdb) info registers csr\n  (gdb) info registers system\n\nAfter this commit this situation is reveresed, which makes more sense\nto me.\n\ngdb/ChangeLog:\n\n\t* riscv-tdep.c (riscv_is_unknown_csr): New function,\n\timplementation moved from riscv_register_reggroup_p.\n\t(riscv_register_reggroup_p): Update group handling for unknown\n\tCSRs.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.arch/riscv-tdesc-regs.exp (get_expected_result): New proc,\n\tupdate test to use this.",
    "tree": {
      "sha": "c1738488ba31f78c02c69ca5b5603e32efb82f9f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c1738488ba31f78c02c69ca5b5603e32efb82f9f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e45020422076c1014579ae8763fd253990ddf58e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e45020422076c1014579ae8763fd253990ddf58e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e45020422076c1014579ae8763fd253990ddf58e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e45020422076c1014579ae8763fd253990ddf58e/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7ddfb1a891ce2fee8708e6d5f14a6935d307875e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ddfb1a891ce2fee8708e6d5f14a6935d307875e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7ddfb1a891ce2fee8708e6d5f14a6935d307875e"
    }
  ],
  "stats": {
    "total": 85,
    "additions": 69,
    "deletions": 16
  },
  "files": [
    {
      "sha": "1d5bbcfe69617f0470b5651e9e8cb2da201fc1ee",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e45020422076c1014579ae8763fd253990ddf58e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e45020422076c1014579ae8763fd253990ddf58e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e45020422076c1014579ae8763fd253990ddf58e",
      "patch": "@@ -1,3 +1,10 @@\n+2020-12-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* riscv-tdep.c (riscv_is_unknown_csr): New function,\n+\timplementation moved from riscv_register_reggroup_p.\n+\t(riscv_register_reggroup_p): Update group handling for unknown\n+\tCSRs.\n+\n 2020-12-01  Sergio Durigan Junior  <sergiodj@sergiodj.net>\n \n \t* dwarf2/read.c (dwz_search_other_debugdirs): New function."
    },
    {
      "sha": "437e8f847ae76e796307007cb48ff3f61056dce0",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 27,
      "deletions": 7,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e45020422076c1014579ae8763fd253990ddf58e/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e45020422076c1014579ae8763fd253990ddf58e/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=e45020422076c1014579ae8763fd253990ddf58e",
      "patch": "@@ -969,6 +969,18 @@ riscv_is_regnum_a_named_csr (int regnum)\n     }\n }\n \n+/* Return true if REGNUM is an unknown CSR identified in\n+   riscv_tdesc_unknown_reg for GDBARCH.  */\n+\n+static bool\n+riscv_is_unknown_csr (struct gdbarch *gdbarch, int regnum)\n+{\n+  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  return (regnum >= tdep->unknown_csrs_first_regnum\n+\t  && regnum < (tdep->unknown_csrs_first_regnum\n+\t\t       + tdep->unknown_csrs_count));\n+}\n+\n /* Implement the register_reggroup_p gdbarch method.  Is REGNUM a member\n    of REGGROUP?  */\n \n@@ -986,13 +998,21 @@ riscv_register_reggroup_p (struct gdbarch  *gdbarch, int regnum,\n     {\n       /* Any extra registers from the CSR tdesc_feature (identified in\n \t riscv_tdesc_unknown_reg) are removed from the save/restore groups\n-\t as some targets (QEMU) report CSRs which then can't be read.  */\n-      struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n-      if ((reggroup == restore_reggroup || reggroup == save_reggroup)\n-\t  && regnum >= tdep->unknown_csrs_first_regnum\n-\t  && regnum < (tdep->unknown_csrs_first_regnum\n-\t\t       + tdep->unknown_csrs_count))\n-\treturn 0;\n+\t as some targets (QEMU) report CSRs which then can't be read and\n+\t having unreadable registers in the save/restore group breaks\n+\t things like inferior calls.\n+\n+\t The unknown CSRs are also removed from the general group, and\n+\t added into both the csr and system group.  This is inline with the\n+\t known CSRs (see below).  */\n+      if (riscv_is_unknown_csr (gdbarch, regnum))\n+\t{\n+\t  if (reggroup == restore_reggroup || reggroup == save_reggroup\n+\t       || reggroup == general_reggroup)\n+\t    return 0;\n+\t  else if (reggroup == system_reggroup || reggroup == csr_reggroup)\n+\t    return 1;\n+\t}\n \n       /* This is some other unknown register from the target description.\n \t In this case we trust whatever the target description says about"
    },
    {
      "sha": "f0938453932d1354c6fca01f34dde22c3ccf720e",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e45020422076c1014579ae8763fd253990ddf58e/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e45020422076c1014579ae8763fd253990ddf58e/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=e45020422076c1014579ae8763fd253990ddf58e",
      "patch": "@@ -1,3 +1,8 @@\n+2020-12-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.arch/riscv-tdesc-regs.exp (get_expected_result): New proc,\n+\tupdate test to use this.\n+\n 2020-12-01  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* gdb.threads/non-ldr-exc-1.exp: Fix indentation."
    },
    {
      "sha": "e35d6181b7f4e3c2b142b59490b155e6c26df55b",
      "filename": "gdb/testsuite/gdb.arch/riscv-tdesc-regs.exp",
      "status": "modified",
      "additions": 30,
      "deletions": 9,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e45020422076c1014579ae8763fd253990ddf58e/gdb/testsuite/gdb.arch/riscv-tdesc-regs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e45020422076c1014579ae8763fd253990ddf58e/gdb/testsuite/gdb.arch/riscv-tdesc-regs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/riscv-tdesc-regs.exp?ref=e45020422076c1014579ae8763fd253990ddf58e",
      "patch": "@@ -80,7 +80,32 @@ gdb_test \"info registers \\$csr0\" \"Invalid register `csr0'\"\n gdb_test \"info registers \\$dscratch0\" \"dscratch0\\[ \\t\\]+.*\"\n gdb_test \"info registers \\$dscratch\" \"dscratch\\[ \\t\\]+.*\"\n \n-foreach rgroup {x_all all save restore} {\n+# Return the number of times REGISTER should appear in GROUP, this\n+# will either be 0 or 1.\n+proc get_expected_result { register group } {\n+\n+    # Everything should appear once in the 'all' group.\n+    if { $group == \"all\" || $group == \"x_all\" } {\n+\treturn 1\n+    }\n+\n+    if { $group == \"save\" || $group == \"restore\" } {\n+\t# Everything is in the save/restore groups except these two.\n+\tif { $register == \"unknown_csr\" || $register == \"dscratch\" } {\n+\t    return 0\n+\t}\n+\treturn 1\n+    }\n+\n+    if { $group == \"system\" || $group == \"csr\" } {\n+\t# All the registers we check should be in these groups.\n+\treturn 1\n+    }\n+\n+    return 0\n+}\n+\n+foreach rgroup {x_all all save restore general system csr} {\n     # Now use 'info registers all' to see how many times the floating\n     # point status registers show up in the output.\n     array set reg_counts {}\n@@ -110,14 +135,10 @@ foreach rgroup {x_all all save restore} {\n \t} else {\n \t    set count 0\n \t}\n-\tif {($reg == \"unknown_csr\" || $reg == \"dscratch\") \\\n-\t\t&& $rgroup != \"all\" && $rgroup != \"x_all\"} {\n-\t    gdb_assert {$count == 0} \\\n-\t\t\"register $reg not seen in reggroup $rgroup\"\n-\t} else {\n-\t    gdb_assert {$count == 1} \\\n-\t\t\"register $reg seen once in reggroup $rgroup\"\n-\t}\n+\n+\tset expected_count [ get_expected_result $reg $rgroup ]\n+\tgdb_assert {$count == $expected_count} \\\n+\t    \"register $reg seen in reggroup $rgroup $expected_count times\"\n     }\n     array unset reg_counts\n }"
    }
  ]
}