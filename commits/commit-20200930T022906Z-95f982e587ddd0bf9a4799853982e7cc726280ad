{
  "sha": "95f982e587ddd0bf9a4799853982e7cc726280ad",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTVmOTgyZTU4N2RkZDBiZjlhNDc5OTg1Mzk4MmU3Y2M3MjYyODBhZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T00:49:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T02:29:06Z"
    },
    "message": "Rename struct attribute accessors\n\nThis removes the \"value_\" prefix from the struct value accessors.\nThis seemed unnecessarily wordy to me.\n\ngdb/ChangeLog\n2020-09-29  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (dwarf2_find_base_address, read_call_site_scope)\n\t(dwarf2_get_pc_bounds, dwarf2_record_block_ranges)\n\t(partial_die_info::read, dwarf2_string_attr, new_symbol): Update.\n\t* dwarf2/attribute.h (struct attribute): Rename methods.\n\t* dwarf2/attribute.c (attribute::as_address): Rename from\n\tvalue_as_address.\n\t(attribute::as_string): Rename from value_as_string.",
    "tree": {
      "sha": "24cc86de7085345edba4098eaef5440664b8fe34",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/24cc86de7085345edba4098eaef5440664b8fe34"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/95f982e587ddd0bf9a4799853982e7cc726280ad",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/95f982e587ddd0bf9a4799853982e7cc726280ad",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/95f982e587ddd0bf9a4799853982e7cc726280ad",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/95f982e587ddd0bf9a4799853982e7cc726280ad/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f800b00e51f81a3ccbc62f53eaa36e2996f33b9f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f800b00e51f81a3ccbc62f53eaa36e2996f33b9f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f800b00e51f81a3ccbc62f53eaa36e2996f33b9f"
    }
  ],
  "stats": {
    "total": 42,
    "additions": 26,
    "deletions": 16
  },
  "files": [
    {
      "sha": "b561f8a8302aa8fb225af2510292ac758793479b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/95f982e587ddd0bf9a4799853982e7cc726280ad/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/95f982e587ddd0bf9a4799853982e7cc726280ad/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=95f982e587ddd0bf9a4799853982e7cc726280ad",
      "patch": "@@ -1,3 +1,13 @@\n+2020-09-29  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (dwarf2_find_base_address, read_call_site_scope)\n+\t(dwarf2_get_pc_bounds, dwarf2_record_block_ranges)\n+\t(partial_die_info::read, dwarf2_string_attr, new_symbol): Update.\n+\t* dwarf2/attribute.h (struct attribute): Rename methods.\n+\t* dwarf2/attribute.c (attribute::as_address): Rename from\n+\tvalue_as_address.\n+\t(attribute::as_string): Rename from value_as_string.\n+\n 2020-09-29  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (partial_die_info::read) <case"
    },
    {
      "sha": "1345e0a3f867e1dd6b1d2c05b13d3112a1cecef6",
      "filename": "gdb/dwarf2/attribute.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/95f982e587ddd0bf9a4799853982e7cc726280ad/gdb/dwarf2/attribute.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/95f982e587ddd0bf9a4799853982e7cc726280ad/gdb/dwarf2/attribute.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.c?ref=95f982e587ddd0bf9a4799853982e7cc726280ad",
      "patch": "@@ -32,7 +32,7 @@\n /* See attribute.h.  */\n \n CORE_ADDR\n-attribute::value_as_address () const\n+attribute::as_address () const\n {\n   CORE_ADDR addr;\n \n@@ -62,7 +62,7 @@ attribute::value_as_address () const\n /* See attribute.h.  */\n \n const char *\n-attribute::value_as_string () const\n+attribute::as_string () const\n {\n   if (form == DW_FORM_strp || form == DW_FORM_line_strp\n       || form == DW_FORM_string"
    },
    {
      "sha": "86b9136fc13af1e1b94c2d803a8f3050615b0a01",
      "filename": "gdb/dwarf2/attribute.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/95f982e587ddd0bf9a4799853982e7cc726280ad/gdb/dwarf2/attribute.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/95f982e587ddd0bf9a4799853982e7cc726280ad/gdb/dwarf2/attribute.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.h?ref=95f982e587ddd0bf9a4799853982e7cc726280ad",
      "patch": "@@ -44,11 +44,11 @@ struct attribute\n {\n   /* Read the given attribute value as an address, taking the\n      attribute's form into account.  */\n-  CORE_ADDR value_as_address () const;\n+  CORE_ADDR as_address () const;\n \n   /* If the attribute has a string form, return the string value;\n      otherwise return NULL.  */\n-  const char *value_as_string () const;\n+  const char *as_string () const;\n \n   /* Return non-zero if ATTR's value is a section offset --- classes\n      lineptr, loclistptr, macptr or rangelistptr --- or zero, otherwise."
    },
    {
      "sha": "2e5b7e28deb7d6728ebf2b2219e4b1e78babb9d7",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/95f982e587ddd0bf9a4799853982e7cc726280ad/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/95f982e587ddd0bf9a4799853982e7cc726280ad/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=95f982e587ddd0bf9a4799853982e7cc726280ad",
      "patch": "@@ -6160,12 +6160,12 @@ dwarf2_find_base_address (struct die_info *die, struct dwarf2_cu *cu)\n \n   attr = dwarf2_attr (die, DW_AT_entry_pc, cu);\n   if (attr != nullptr)\n-    cu->base_address = attr->value_as_address ();\n+    cu->base_address = attr->as_address ();\n   else\n     {\n       attr = dwarf2_attr (die, DW_AT_low_pc, cu);\n       if (attr != nullptr)\n-\tcu->base_address = attr->value_as_address ();\n+\tcu->base_address = attr->as_address ();\n     }\n }\n \n@@ -13829,7 +13829,7 @@ read_call_site_scope (struct die_info *die, struct dwarf2_cu *cu)\n \t\t sect_offset_str (die->sect_off), objfile_name (objfile));\n       return;\n     }\n-  pc = attr->value_as_address () + baseaddr;\n+  pc = attr->as_address () + baseaddr;\n   pc = gdbarch_adjust_dwarf2_addr (gdbarch, pc);\n \n   if (cu->call_site_htab == NULL)\n@@ -14568,8 +14568,8 @@ dwarf2_get_pc_bounds (struct die_info *die, CORE_ADDR *lowpc,\n       attr = dwarf2_attr (die, DW_AT_low_pc, cu);\n       if (attr != nullptr)\n         {\n-\t  low = attr->value_as_address ();\n-\t  high = attr_high->value_as_address ();\n+\t  low = attr->as_address ();\n+\t  high = attr_high->as_address ();\n \t  if (cu->header.version >= 4 && attr_high->form_is_constant ())\n \t    high += low;\n \t}\n@@ -14748,8 +14748,8 @@ dwarf2_record_block_ranges (struct die_info *die, struct block *block,\n       attr = dwarf2_attr (die, DW_AT_low_pc, cu);\n       if (attr != nullptr)\n         {\n-          CORE_ADDR low = attr->value_as_address ();\n-\t  CORE_ADDR high = attr_high->value_as_address ();\n+\t  CORE_ADDR low = attr->as_address ();\n+\t  CORE_ADDR high = attr_high->as_address ();\n \n \t  if (cu->header.version >= 4 && attr_high->form_is_constant ())\n \t    high += low;\n@@ -19030,15 +19030,15 @@ partial_die_info::read (const struct die_reader_specs *reader,\n \t  /* Note that both forms of linkage name might appear.  We\n \t     assume they will be the same, and we only store the last\n \t     one we see.  */\n-\t  linkage_name = attr.value_as_string ();\n+\t  linkage_name = attr.as_string ();\n \t  break;\n \tcase DW_AT_low_pc:\n \t  has_low_pc_attr = 1;\n-\t  lowpc = attr.value_as_address ();\n+\t  lowpc = attr.as_address ();\n \t  break;\n \tcase DW_AT_high_pc:\n \t  has_high_pc_attr = 1;\n-\t  highpc = attr.value_as_address ();\n+\t  highpc = attr.as_address ();\n \t  if (cu->header.version >= 4 && attr.form_is_constant ())\n \t\thigh_pc_relative = 1;\n \t  break;\n@@ -20276,7 +20276,7 @@ dwarf2_string_attr (struct die_info *die, unsigned int name, struct dwarf2_cu *c\n \n   if (attr != NULL)\n     {\n-      str = attr->value_as_string ();\n+      str = attr->as_string ();\n       if (str == nullptr)\n         complaint (_(\"string type expected for attribute %s for \"\n \t\t     \"DIE at %s in module %s\"),\n@@ -21453,7 +21453,7 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n \t    {\n \t      CORE_ADDR addr;\n \n-\t      addr = attr->value_as_address ();\n+\t      addr = attr->as_address ();\n \t      addr = gdbarch_adjust_dwarf2_addr (gdbarch, addr + baseaddr);\n \t      SET_SYMBOL_VALUE_ADDRESS (sym, addr);\n \t      SYMBOL_ACLASS_INDEX (sym) = LOC_LABEL;"
    }
  ]
}