{
  "sha": "bf926894b63fef2559685909ea2e9f794648a256",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmY5MjY4OTRiNjNmZWYyNTU5Njg1OTA5ZWEyZTlmNzk0NjQ4YTI1Ng==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-06-09T06:56:39Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-06-09T06:56:39Z"
    },
    "message": "x86: correct decoding of packed-FP-only AVX encodings\n\nVarious AVX insns utilizing the X macro fail to reject F3/F2 embedded\nprefix encodings. As the PREFIX_OPCODE attribute wasn't used by any\nnon-legacy-encoded insns so far, re-use it to achieve the intended\neffect.",
    "tree": {
      "sha": "85f1ff082f3bc576874260a6efc43a79e6e79f82",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/85f1ff082f3bc576874260a6efc43a79e6e79f82"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bf926894b63fef2559685909ea2e9f794648a256",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf926894b63fef2559685909ea2e9f794648a256",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bf926894b63fef2559685909ea2e9f794648a256",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf926894b63fef2559685909ea2e9f794648a256/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a5aaedb9dba2775d855fa394246ede08e9f36652",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a5aaedb9dba2775d855fa394246ede08e9f36652",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a5aaedb9dba2775d855fa394246ede08e9f36652"
    }
  ],
  "stats": {
    "total": 150,
    "additions": 119,
    "deletions": 31
  },
  "files": [
    {
      "sha": "78ffd807ce3ad95c73a10ff91c4cf87923897674",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf926894b63fef2559685909ea2e9f794648a256/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf926894b63fef2559685909ea2e9f794648a256/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=bf926894b63fef2559685909ea2e9f794648a256",
      "patch": "@@ -1,3 +1,9 @@\n+2020-06-09  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* testsuite/gas/i386/prefix.s: Add bogus REP / EVEX.W prefix\n+\twith VEX/EVEX encoding tests.\n+\t* testsuite/gas/i386/prefix.d: Adjust expectations.\n+\n 2020-06-09  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (process_suffix): Restrict defaulting to 'q'"
    },
    {
      "sha": "9e293bce2a75c66cce4f261aa9db7046511bd120",
      "filename": "gas/testsuite/gas/i386/prefix.d",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf926894b63fef2559685909ea2e9f794648a256/gas/testsuite/gas/i386/prefix.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf926894b63fef2559685909ea2e9f794648a256/gas/testsuite/gas/i386/prefix.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/prefix.d?ref=bf926894b63fef2559685909ea2e9f794648a256",
      "patch": "@@ -72,6 +72,20 @@ Disassembly of section .text:\n [ \t]*[a-f0-9]+:\t90                   \tnop\n [ \t]*[a-f0-9]+:\tf2 0f c7             \t\\(bad\\)  \n [ \t]*[a-f0-9]+:\tf0 90                \tlock nop\n+[ \t]*[a-f0-9]+:\tf3 0f 28             \trepz \\(bad\\) *\n+[ \t]*[a-f0-9]+:\tff cc                \tdec    %esp\n+[ \t]*[a-f0-9]+:\tc5 fa 28             \t\\(bad\\) *\n+[ \t]*[a-f0-9]+:\tff cc                \tdec    %esp\n+[ \t]*[a-f0-9]+:\tc4 e1 7b 28          \t\\(bad\\) *\n+[ \t]*[a-f0-9]+:\tff cc                \tdec    %esp\n+[ \t]*[a-f0-9]+:\t62 f1 fc 08 28       \t\\(bad\\) *\n+[ \t]*[a-f0-9]+:\tff cc                \tdec    %esp\n+[ \t]*[a-f0-9]+:\t62 f1 7e 08 28       \t\\(bad\\) *\n+[ \t]*[a-f0-9]+:\tff cc                \tdec    %esp\n+[ \t]*[a-f0-9]+:\t62 f1 7d 08 28       \t\\(bad\\) *\n+[ \t]*[a-f0-9]+:\tff cc                \tdec    %esp\n+[ \t]*[a-f0-9]+:\t62 f1 ff 08 28       \t\\(bad\\) *\n+[ \t]*[a-f0-9]+:\tff cc                \tdec    %esp\n [ \t]*[a-f0-9]+:\tc5 fb e6 40 20       \tvcvtpd2dqx 0x20\\(%eax\\),%xmm0\n [ \t]*[a-f0-9]+:\t62 f1 ff 18 e6 40 04 \tvcvtpd2dq 0x20\\(%eax\\)\\{1to2\\},%xmm0\n [ \t]*[a-f0-9]+:\tc5 fb e6 40 20       \tvcvtpd2dqx 0x20\\(%eax\\),%xmm0"
    },
    {
      "sha": "78fd478c3fb27581ea26f00fd965744d498aeb48",
      "filename": "gas/testsuite/gas/i386/prefix.s",
      "status": "modified",
      "additions": 60,
      "deletions": 0,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf926894b63fef2559685909ea2e9f794648a256/gas/testsuite/gas/i386/prefix.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf926894b63fef2559685909ea2e9f794648a256/gas/testsuite/gas/i386/prefix.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/prefix.s?ref=bf926894b63fef2559685909ea2e9f794648a256",
      "patch": "@@ -391,6 +391,66 @@\n \n \tnop\n \n+\trepz; movaps %xmm7, %xmm7\n+\tint $3\n+\n+# \"repz\" vmovaps %xmm7, %xmm7\n+\t.byte 0xc5\n+\t.byte 0xfa\n+\t.byte 0x28\n+\t.byte 0xff\n+\n+\tint $3\n+\n+# \"repnz\" {vex3} vmovaps %xmm7, %xmm7\n+\t.byte 0xc4\n+\t.byte 0xe1\n+\t.byte 0x7b\n+\t.byte 0x28\n+\t.byte 0xff\n+\n+\tint $3\n+\n+# \"EVEX.W1\" vmovaps %xmm7, %xmm7\n+\t.byte 0x62\n+\t.byte 0xf1\n+\t.byte 0xfc\n+\t.byte 0x08\n+\t.byte 0x28\n+\t.byte 0xff\n+\n+\tint $3\n+\n+# \"repz\" vmovaps %xmm7, %xmm7\n+\t.byte 0x62\n+\t.byte 0xf1\n+\t.byte 0x7e\n+\t.byte 0x08\n+\t.byte 0x28\n+\t.byte 0xff\n+\n+\tint $3\n+\n+# \"EVEX.W0\" vmovapd %xmm7, %xmm7\n+\t.byte 0x62\n+\t.byte 0xf1\n+\t.byte 0x7d\n+\t.byte 0x08\n+\t.byte 0x28\n+\t.byte 0xff\n+\n+\tint $3\n+\n+# \"repnz\" vmovapd %xmm7, %xmm7\n+\t.byte 0x62\n+\t.byte 0xf1\n+\t.byte 0xff\n+\t.byte 0x08\n+\t.byte 0x28\n+\t.byte 0xff\n+\n+\tint $3\n+\n \tvcvtpd2dqx 0x20(%eax),%xmm0\n \tvcvtpd2dq 0x20(%eax){1to2},%xmm0\n \tvcvtpd2dqx 0x20(%eax),%xmm0"
    },
    {
      "sha": "feda626dfb245f9947d9c4730b68c7aa1a3fdcdd",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf926894b63fef2559685909ea2e9f794648a256/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf926894b63fef2559685909ea2e9f794648a256/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=bf926894b63fef2559685909ea2e9f794648a256",
      "patch": "@@ -1,3 +1,13 @@\n+2020-06-09  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-dis.c (vex_table): Use PREFIX_OPCODE for vunpcklpX,\n+\tvunpckhpX, vmovapX, vandpX, vandnpX, vorpX, vxorpX and vshufpX.\n+\t(vex_len_table) : Likewise for vmovlpX, vmovhpX, vmovntpX, and\n+\tvmovmskpX.\n+\t(print_insn): Drop pointless check against bad_opcode. Split\n+\tprefix validation into legacy and VEX-and-alike parts.\n+\t(putop): Re-work 'X' macro handling.\n+\n 2020-06-09  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-dis.c (MOD_0F51): Rename to ..."
    },
    {
      "sha": "799d9d4a4d8329ac6e19baef05e715be9aba06f2",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 29,
      "deletions": 31,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf926894b63fef2559685909ea2e9f794648a256/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf926894b63fef2559685909ea2e9f794648a256/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=bf926894b63fef2559685909ea2e9f794648a256",
      "patch": "@@ -8485,8 +8485,8 @@ static const struct dis386 vex_table[][256] = {\n     { PREFIX_TABLE (PREFIX_VEX_0F11) },\n     { PREFIX_TABLE (PREFIX_VEX_0F12) },\n     { MOD_TABLE (MOD_VEX_0F13) },\n-    { \"vunpcklpX\",\t{ XM, Vex, EXx }, 0 },\n-    { \"vunpckhpX\",\t{ XM, Vex, EXx }, 0 },\n+    { \"vunpcklpX\",\t{ XM, Vex, EXx }, PREFIX_OPCODE },\n+    { \"vunpckhpX\",\t{ XM, Vex, EXx }, PREFIX_OPCODE },\n     { PREFIX_TABLE (PREFIX_VEX_0F16) },\n     { MOD_TABLE (MOD_VEX_0F17) },\n     /* 18 */\n@@ -8508,8 +8508,8 @@ static const struct dis386 vex_table[][256] = {\n     { Bad_Opcode },\n     { Bad_Opcode },\n     /* 28 */\n-    { \"vmovapX\",\t{ XM, EXx }, 0 },\n-    { \"vmovapX\",\t{ EXxS, XM }, 0 },\n+    { \"vmovapX\",\t{ XM, EXx }, PREFIX_OPCODE },\n+    { \"vmovapX\",\t{ EXxS, XM }, PREFIX_OPCODE },\n     { PREFIX_TABLE (PREFIX_VEX_0F2A) },\n     { MOD_TABLE (MOD_VEX_0F2B) },\n     { PREFIX_TABLE (PREFIX_VEX_0F2C) },\n@@ -8557,10 +8557,10 @@ static const struct dis386 vex_table[][256] = {\n     { PREFIX_TABLE (PREFIX_VEX_0F51) },\n     { PREFIX_TABLE (PREFIX_VEX_0F52) },\n     { PREFIX_TABLE (PREFIX_VEX_0F53) },\n-    { \"vandpX\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vandnpX\",\t{ XM, Vex, EXx }, 0 },\n-    { \"vorpX\",\t\t{ XM, Vex, EXx }, 0 },\n-    { \"vxorpX\",\t\t{ XM, Vex, EXx }, 0 },\n+    { \"vandpX\",\t\t{ XM, Vex, EXx }, PREFIX_OPCODE },\n+    { \"vandnpX\",\t{ XM, Vex, EXx }, PREFIX_OPCODE },\n+    { \"vorpX\",\t\t{ XM, Vex, EXx }, PREFIX_OPCODE },\n+    { \"vxorpX\",\t\t{ XM, Vex, EXx }, PREFIX_OPCODE },\n     /* 58 */\n     { PREFIX_TABLE (PREFIX_VEX_0F58) },\n     { PREFIX_TABLE (PREFIX_VEX_0F59) },\n@@ -8685,7 +8685,7 @@ static const struct dis386 vex_table[][256] = {\n     { Bad_Opcode },\n     { PREFIX_TABLE (PREFIX_VEX_0FC4) },\n     { PREFIX_TABLE (PREFIX_VEX_0FC5) },\n-    { \"vshufpX\",\t{ XM, Vex, EXx, Ib }, 0 },\n+    { \"vshufpX\",\t{ XM, Vex, EXx, Ib }, PREFIX_OPCODE },\n     { Bad_Opcode },\n     /* c8 */\n     { Bad_Opcode },\n@@ -9355,7 +9355,7 @@ static const struct dis386 vex_len_table[][2] = {\n \n   /* VEX_LEN_0F13_M_0 */\n   {\n-    { \"vmovlpX\",\t{ EXq, XM }, 0 },\n+    { \"vmovlpX\",\t{ EXq, XM }, PREFIX_OPCODE },\n   },\n \n   /* VEX_LEN_0F16_P_0_M_0 */\n@@ -9375,7 +9375,7 @@ static const struct dis386 vex_len_table[][2] = {\n \n   /* VEX_LEN_0F17_M_0 */\n   {\n-    { \"vmovhpX\",\t{ EXq, XM }, 0 },\n+    { \"vmovhpX\",\t{ EXq, XM }, PREFIX_OPCODE },\n   },\n \n   /* VEX_LEN_0F41_P_0 */\n@@ -10592,7 +10592,7 @@ static const struct dis386 mod_table[][2] = {\n   },\n   {\n     /* MOD_VEX_0F2B */\n-    { \"vmovntpX\",\t{ Mx, XM }, 0 },\n+    { \"vmovntpX\",\t{ Mx, XM }, PREFIX_OPCODE },\n   },\n   {\n     /* MOD_VEX_W_0_0F41_P_0_LEN_1 */\n@@ -10752,7 +10752,7 @@ static const struct dis386 mod_table[][2] = {\n   {\n     /* MOD_VEX_0F50 */\n     { Bad_Opcode },\n-    { \"vmovmskpX\",\t{ Gdq, XS }, 0 },\n+    { \"vmovmskpX\",\t{ Gdq, XS }, PREFIX_OPCODE },\n   },\n   {\n     /* MOD_VEX_0F71_REG_2 */\n@@ -12266,14 +12266,18 @@ print_insn (bfd_vma pc, disassemble_info *info)\n      PREFIX_REPZ/PREFIX_REPNZ fix, we check the PREFIX_DATA prefix\n      separately.  */\n   if (dp->prefix_requirement == PREFIX_OPCODE\n-      && dp != &bad_opcode\n-      && (((prefixes\n-\t    & (PREFIX_REPZ | PREFIX_REPNZ)) != 0\n+      && (((need_vex\n+\t    ? vex.prefix == REPE_PREFIX_OPCODE\n+\t      || vex.prefix == REPNE_PREFIX_OPCODE\n+\t    : (prefixes\n+\t       & (PREFIX_REPZ | PREFIX_REPNZ)) != 0)\n \t   && (used_prefixes\n \t       & (PREFIX_REPZ | PREFIX_REPNZ)) == 0)\n-\t  || ((((prefixes\n-\t\t & (PREFIX_REPZ | PREFIX_REPNZ | PREFIX_DATA))\n-\t\t== PREFIX_DATA)\n+\t  || (((need_vex\n+\t\t? vex.prefix == DATA_PREFIX_OPCODE\n+\t\t: ((prefixes\n+\t\t    & (PREFIX_REPZ | PREFIX_REPNZ | PREFIX_DATA))\n+\t\t   == PREFIX_DATA))\n \t       && (used_prefixes & PREFIX_DATA) == 0))))\n     {\n       (*info->fprintf_func) (info->stream, \"(bad)\");\n@@ -13230,21 +13234,15 @@ putop (const char *in_template, int sizeflag)\n \t      SAVE_LAST (*p);\n \t      break;\n \t    }\n-\t  if (need_vex && vex.prefix)\n+\t  if (need_vex\n+\t      ? vex.prefix == DATA_PREFIX_OPCODE\n+\t      : prefixes & PREFIX_DATA)\n \t    {\n-\t      if (vex.prefix == DATA_PREFIX_OPCODE)\n-\t\t*obufp++ = 'd';\n-\t      else\n-\t\t*obufp++ = 's';\n+\t      *obufp++ = 'd';\n+\t      used_prefixes |= PREFIX_DATA;\n \t    }\n \t  else\n-\t    {\n-\t      if (prefixes & PREFIX_DATA)\n-\t\t*obufp++ = 'd';\n-\t      else\n-\t\t*obufp++ = 's';\n-\t      used_prefixes |= (prefixes & PREFIX_DATA);\n-\t    }\n+\t    *obufp++ = 's';\n \t  break;\n \tcase 'Y':\n \t  if (l == 0 && len == 1)"
    }
  ]
}