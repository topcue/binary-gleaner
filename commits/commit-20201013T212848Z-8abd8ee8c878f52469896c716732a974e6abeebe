{
  "sha": "8abd8ee8c878f52469896c716732a974e6abeebe",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGFiZDhlZThjODc4ZjUyNDY5ODk2YzcxNjczMmE5NzRlNmFiZWViZQ==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-09-02T22:20:45Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-10-13T21:28:48Z"
    },
    "message": "gdb/testsuite/: Use -qualified in runto_main / mi_runto_main\n\nIn some runtimes, there may be a \"main\" function in some class or\nnamespace.  The breakpoint created by runto_main may therefore have\nunexpected locations on some other functions than the actual main.\nThese breakpoint locations can unexpectedly get hit during tests and\nlead to failures.\n\nI saw this while playing with AMD's ROCm toolchain -- I wrote a board\nfile to run the testsuite against device kernels.  There, the runtime\ncalls a \"main\" function before the device kernel code is reached:\n\n Thread 4 \"bit_extract\" hit Breakpoint 1, 0x00007ffeea140960 in lld::elf::LinkerDriver::main(llvm::ArrayRef<char const*>) () from /opt/rocm/lib/libamd_comgr.so.1\n (gdb) bt\n #0  0x00007ffeea140960 in lld::elf::LinkerDriver::main(llvm::ArrayRef<char const*>) () from /opt/rocm/lib/libamd_comgr.so.1\n #1  0x00007ffeea2257a5 in lld::elf::link(llvm::ArrayRef<char const*>, bool, llvm::raw_ostream&, llvm::raw_ostream&) () from /opt/rocm/lib/libamd_comgr.so.1\n #2  0x00007ffeea1bc374 in COMGR::linkWithLLD(llvm::ArrayRef<char const*>, llvm::raw_ostream&, llvm::raw_ostream&) () from /opt/rocm/lib/libamd_comgr.so.1\n #3  0x00007ffeea1bfb09 in COMGR::InProcessDriver::execute(llvm::ArrayRef<char const*>) () from /opt/rocm/lib/libamd_comgr.so.1\n #4  0x00007ffeea1c4da9 in COMGR::AMDGPUCompiler::linkToExecutable() () from /opt/rocm/lib/libamd_comgr.so.1\n #5  0x00007ffeea1fde20 in dispatchCompilerAction(amd_comgr_action_kind_s, COMGR::DataAction*, COMGR::DataSet*, COMGR::DataSet*, llvm::raw_ostream&) () from /opt/rocm/lib/libamd_comgr.so.1\n #6  0x00007ffeea203a87 in amd_comgr_do_action () from /opt/rocm/lib/libamd_comgr.so.1\n ...\n\nTo avoid that, pass \"qualified\" to runto, in runto_main, so that\ngdb_breakpoint ends up creating a breakpoint with -qualified.  This\navoids creating breakpoints locations for other unrelated \"main\"\nfunctions.\n\nNote: I first tried making runto itself use \"-qualified\", but that\ncaused regressions in the gdb.ada/ tests, which use runto without\nspecifying the whole fully-qualified function name (i.e., without the\npackage).  So I end up restricting the -qualified to\nrunto_main/mi_runto_main.\n\nThe gdb.base/ui-redirect.exp change is necessary because that testcase\nis looking at what \"save breakpoint\" generates.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/ui-redirect.exp: Expect \"break -qualified main\" in\n\tsaved breakpoints file.\n\t* gdb.guile/scm-breakpoint.exp: Expect \"-qualified main\" when\n\tinspecting breakpoint list.\n\t* lib/gdb.exp (runto_main): Add \"qualified\" to options.\n\t* lib/mi-support.exp (mi_runto_helper): Add 'qualified' parameter,\n\tand handle it.\n\t(mi_runto_main): Pass 1 as qualified argument.\n\nChange-Id: I51468359ab0a518f05f7c0394c97f7e33b45fe69",
    "tree": {
      "sha": "5e1db9402352352b8cecff31397b0731a1712326",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5e1db9402352352b8cecff31397b0731a1712326"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8abd8ee8c878f52469896c716732a974e6abeebe",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8abd8ee8c878f52469896c716732a974e6abeebe",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8abd8ee8c878f52469896c716732a974e6abeebe",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8abd8ee8c878f52469896c716732a974e6abeebe/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f71e6719e1c2dde20e3286ca7c4969f1c10eb523",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f71e6719e1c2dde20e3286ca7c4969f1c10eb523",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f71e6719e1c2dde20e3286ca7c4969f1c10eb523"
    }
  ],
  "stats": {
    "total": 33,
    "additions": 27,
    "deletions": 6
  },
  "files": [
    {
      "sha": "ea6241b77c818d938c98ef9bb522196a4ef28b2b",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8abd8ee8c878f52469896c716732a974e6abeebe/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8abd8ee8c878f52469896c716732a974e6abeebe/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=8abd8ee8c878f52469896c716732a974e6abeebe",
      "patch": "@@ -1,3 +1,14 @@\n+2020-10-13  Pedro Alves  <pedro@palves.net>\n+\n+\t* gdb.base/ui-redirect.exp: Expect \"break -qualified main\" in\n+\tsaved breakpoints file.\n+\t* gdb.guile/scm-breakpoint.exp: Expect \"-qualified main\" when\n+\tinspecting breakpoint list.\n+\t* lib/gdb.exp (runto_main): Add \"qualified\" to options.\n+\t* lib/mi-support.exp (mi_runto_helper): Add 'qualified' parameter,\n+\tand handle it.\n+\t(mi_runto_main): Pass 1 as qualified argument.\n+\n 2020-10-13  Pedro Alves  <pedro@palves.net>\n \n \t* lib/mi-support.exp (mi_runto_main): New proc."
    },
    {
      "sha": "9e0a694c798de099d9b4f88a5bfd958be4e7a876",
      "filename": "gdb/testsuite/gdb.base/ui-redirect.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8abd8ee8c878f52469896c716732a974e6abeebe/gdb/testsuite/gdb.base/ui-redirect.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8abd8ee8c878f52469896c716732a974e6abeebe/gdb/testsuite/gdb.base/ui-redirect.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/ui-redirect.exp?ref=8abd8ee8c878f52469896c716732a974e6abeebe",
      "patch": "@@ -47,7 +47,7 @@ gdb_breakpoint \"foo\"\n gdb_breakpoint \"bar\"\n \n set cmds [multi_line_input \\\n-\t      \"break main\" \\\n+\t      \"break -qualified main\" \\\n \t      \"  commands\" \\\n \t      \"    print 1\" \\\n \t      \"  end\" \\"
    },
    {
      "sha": "3bcd5c81546fce5c2359ccb0a6e382df5a32b243",
      "filename": "gdb/testsuite/gdb.guile/scm-breakpoint.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8abd8ee8c878f52469896c716732a974e6abeebe/gdb/testsuite/gdb.guile/scm-breakpoint.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8abd8ee8c878f52469896c716732a974e6abeebe/gdb/testsuite/gdb.guile/scm-breakpoint.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.guile/scm-breakpoint.exp?ref=8abd8ee8c878f52469896c716732a974e6abeebe",
      "patch": "@@ -43,7 +43,7 @@ proc test_bkpt_basic { } {\n \tgdb_scm_test_silent_cmd \"guile (define blist (breakpoints))\" \\\n \t    \"get breakpoint list 1\"\n \tgdb_test \"guile (print (car blist))\" \\\n-\t    \"<gdb:breakpoint #1 BP_BREAKPOINT enabled noisy hit:1 ignore:0 @main>\" \\\n+\t    \"<gdb:breakpoint #1 BP_BREAKPOINT enabled noisy hit:1 ignore:0 @-qualified main>\" \\\n \t    \"check main breakpoint\"\n \tgdb_test \"guile (print (breakpoint-location (car blist)))\" \\\n \t    \"main\" \"check main breakpoint location\""
    },
    {
      "sha": "4c9675f255f3e46cb246e9e281527078e3fd9866",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8abd8ee8c878f52469896c716732a974e6abeebe/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8abd8ee8c878f52469896c716732a974e6abeebe/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=8abd8ee8c878f52469896c716732a974e6abeebe",
      "patch": "@@ -689,7 +689,7 @@ proc runto { function args } {\n # If you don't want that, use gdb_start_cmd.\n \n proc runto_main { } {\n-    return [runto main no-message]\n+    return [runto main no-message qualified]\n }\n \n ### Continue, and expect to hit a breakpoint."
    },
    {
      "sha": "ea59288443eaac0ec92e084014c1229d967aefaf",
      "filename": "gdb/testsuite/lib/mi-support.exp",
      "status": "modified",
      "additions": 13,
      "deletions": 3,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8abd8ee8c878f52469896c716732a974e6abeebe/gdb/testsuite/lib/mi-support.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8abd8ee8c878f52469896c716732a974e6abeebe/gdb/testsuite/lib/mi-support.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/mi-support.exp?ref=8abd8ee8c878f52469896c716732a974e6abeebe",
      "patch": "@@ -1055,8 +1055,12 @@ proc mi_run_to_main { } {\n # It returns:\n #   -1  if test suppressed, failed, timedout\n #    0  if test passed\n+#\n+# Supported options:\n+#\n+#  -qualified -- pass --qualified to -break-insert\n \n-proc mi_runto_helper {func run_or_continue} {\n+proc mi_runto_helper {func run_or_continue args} {\n   global suppress_flag\n   if { $suppress_flag } {\n     return -1\n@@ -1065,10 +1069,16 @@ proc mi_runto_helper {func run_or_continue} {\n   global mi_gdb_prompt expect_out\n   global hex decimal fullname_syntax\n \n+  parse_args {{qualified}}\n+\n   set test \"mi runto $func\"\n   set bp [mi_make_breakpoint -type breakpoint -disp del \\\n \t      -func $func\\(\\\\\\(.*\\\\\\)\\)?]\n-  mi_gdb_test \"200-break-insert -t $func\" \"200\\\\^done,$bp\" \\\n+  set extra_opts \"\"\n+  if {$qualified} {\n+      append extra_opts \"--qualified\"\n+  }\n+  mi_gdb_test \"200-break-insert $extra_opts -t $func\" \"200\\\\^done,$bp\" \\\n       \"breakpoint at $func\"\n \n   if {$run_or_continue == \"run\"} {\n@@ -1089,7 +1099,7 @@ proc mi_runto {func} {\n # Just like runto_main but works with the MI interface.\n \n proc mi_runto_main {} {\n-    return [mi_runto_helper \"main\" \"run\"]\n+    return [mi_runto_helper \"main\" \"run\" -qualified]\n }\n \n # Next to the next statement"
    }
  ]
}