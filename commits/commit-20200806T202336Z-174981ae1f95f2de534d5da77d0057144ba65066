{
  "sha": "174981ae1f95f2de534d5da77d0057144ba65066",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTc0OTgxYWUxZjk1ZjJkZTUzNGQ1ZGE3N2QwMDU3MTQ0YmE2NTA2Ng==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-08-06T20:23:36Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-08-06T20:23:36Z"
    },
    "message": "gdb: rename regcache::current_regcache to regcache::regcaches\n\nThe name `current_regcache` for the list of currently-existing regcaches\nsounds wrong.  The name is singular, but it holds multiple regcaches, so\nit could at least be `current_regcaches`.\n\nBut in other places in GDB, \"current\" usually means \"the object we are\nworking with right now\".  For example, we swap the \"current thread\" when\nwe want to operate on a given thread.  This is not the case here, this\nvariable just holds all regcaches that exist at any given time, not \"the\nregcache we are working with right now\".\n\nSo, I think calling it `regcaches` is better.  I also considered\n`regcache_list`, but a subsequent patch will make it a map and not a\nlist, so it would sound wrong again.  `regcaches` sounds right for any\ncollection of regcache, whatever the type.\n\nRename a few other things that were related to this `current_regcache`\nfield.  Note that there is a `get_current_regcache` function, which\nreturns the regcache of the current thread.  That one is fine, because\nit returns the regcache for the current thread.\n\ngdb/ChangeLog:\n\n\t* regcache.h (class regcache) <current_regcache>: Rename to...\n\t<regcaches>: ... this.  Move doc here.\n\t* regcache.c (regcache::current_regcache) Rename to...\n\t(regcache::regcaches): ... this.  Move doc to header.\n\t(get_thread_arch_aspace_regcache): Update.\n\t(regcache::regcache_thread_ptid_changed): Update.\n\t(registers_changed_ptid): Update.\n\t(class regcache_access) <current_regcache_size>: Rename to...\n\t<regcaches_size>: ... this.\n\t(current_regcache_test): Rename to...\n\t(regcaches_test): ... this.\n\t(_initialize_regcache): Update.\n\nChange-Id: I87de67154f5fe17a1f6aee7c4f2036647ee27b99",
    "tree": {
      "sha": "38c97d89ac65e8c3dcba8b335ddce68e56e7e8b7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/38c97d89ac65e8c3dcba8b335ddce68e56e7e8b7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/174981ae1f95f2de534d5da77d0057144ba65066",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/174981ae1f95f2de534d5da77d0057144ba65066",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/174981ae1f95f2de534d5da77d0057144ba65066",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/174981ae1f95f2de534d5da77d0057144ba65066/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d27aad4ec307d91a6b9056127c6c248044391d7f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d27aad4ec307d91a6b9056127c6c248044391d7f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d27aad4ec307d91a6b9056127c6c248044391d7f"
    }
  ],
  "stats": {
    "total": 77,
    "additions": 45,
    "deletions": 32
  },
  "files": [
    {
      "sha": "db8df0346f6a49b88a8aa28db84b0507ff808560",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/174981ae1f95f2de534d5da77d0057144ba65066/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/174981ae1f95f2de534d5da77d0057144ba65066/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=174981ae1f95f2de534d5da77d0057144ba65066",
      "patch": "@@ -1,3 +1,18 @@\n+2020-08-06  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* regcache.h (class regcache) <current_regcache>: Rename to...\n+\t<regcaches>: ... this.  Move doc here.\n+\t* regcache.c (regcache::current_regcache) Rename to...\n+\t(regcache::regcaches): ... this.  Move doc to header.\n+\t(get_thread_arch_aspace_regcache): Update.\n+\t(regcache::regcache_thread_ptid_changed): Update.\n+\t(registers_changed_ptid): Update.\n+\t(class regcache_access) <current_regcache_size>: Rename to...\n+\t<regcaches_size>: ... this.\n+\t(current_regcache_test): Rename to...\n+\t(regcaches_test): ... this.\n+\t(_initialize_regcache): Update.\n+\n 2020-08-06  Victor Collod  <vcollod@nvidia.com>\n \n \t* amd64-tdep.c (amd64_analyze_prologue): Fix incorrect comment."
    },
    {
      "sha": "b9b937b858157d8630b431926b58bf198682ec3b",
      "filename": "gdb/regcache.c",
      "status": "modified",
      "additions": 29,
      "deletions": 31,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/174981ae1f95f2de534d5da77d0057144ba65066/gdb/regcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/174981ae1f95f2de534d5da77d0057144ba65066/gdb/regcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/regcache.c?ref=174981ae1f95f2de534d5da77d0057144ba65066",
      "patch": "@@ -319,7 +319,7 @@ reg_buffer::assert_regnum (int regnum) const\n    recording if the register values have been changed (eg. by the\n    user).  Therefore all registers must be written back to the\n    target when appropriate.  */\n-std::forward_list<regcache *> regcache::current_regcache;\n+std::forward_list<regcache *> regcache::regcaches;\n \n struct regcache *\n get_thread_arch_aspace_regcache (process_stratum_target *target,\n@@ -328,15 +328,15 @@ get_thread_arch_aspace_regcache (process_stratum_target *target,\n {\n   gdb_assert (target != nullptr);\n \n-  for (const auto &regcache : regcache::current_regcache)\n+  for (const auto &regcache : regcache::regcaches)\n     if (regcache->target () == target\n \t&& regcache->ptid () == ptid\n \t&& regcache->arch () == gdbarch)\n       return regcache;\n \n   regcache *new_regcache = new regcache (target, gdbarch, aspace);\n \n-  regcache::current_regcache.push_front (new_regcache);\n+  regcache::regcaches.push_front (new_regcache);\n   new_regcache->set_ptid (ptid);\n \n   return new_regcache;\n@@ -417,7 +417,7 @@ regcache_observer_target_changed (struct target_ops *target)\n void\n regcache::regcache_thread_ptid_changed (ptid_t old_ptid, ptid_t new_ptid)\n {\n-  for (auto &regcache : regcache::current_regcache)\n+  for (auto &regcache : regcache::regcaches)\n     {\n       if (regcache->ptid () == old_ptid)\n \tregcache->set_ptid (new_ptid);\n@@ -438,17 +438,15 @@ regcache::regcache_thread_ptid_changed (ptid_t old_ptid, ptid_t new_ptid)\n void\n registers_changed_ptid (process_stratum_target *target, ptid_t ptid)\n {\n-  for (auto oit = regcache::current_regcache.before_begin (),\n-\t it = std::next (oit);\n-       it != regcache::current_regcache.end ();\n-       )\n+  for (auto oit = regcache::regcaches.before_begin (), it = std::next (oit);\n+       it != regcache::regcaches.end (); )\n     {\n       struct regcache *regcache = *it;\n       if ((target == nullptr || regcache->target () == target)\n \t  && regcache->ptid ().matches (ptid))\n \t{\n \t  delete regcache;\n-\t  it = regcache::current_regcache.erase_after (oit);\n+\t  it = regcache::regcaches.erase_after (oit);\n \t}\n       else\n \toit = it++;\n@@ -1437,13 +1435,13 @@ class regcache_access : public regcache\n {\n public:\n \n-  /* Return the number of elements in current_regcache.  */\n+  /* Return the number of elements in regcache::regcaches.  */\n \n   static size_t\n-  current_regcache_size ()\n+  regcaches_size ()\n   {\n-    return std::distance (regcache::current_regcache.begin (),\n-\t\t\t  regcache::current_regcache.end ());\n+    return std::distance (regcache::regcaches.begin (),\n+\t\t\t  regcache::regcaches.end ());\n   }\n };\n \n@@ -1463,68 +1461,68 @@ test_get_thread_arch_aspace_regcache (process_stratum_target *target,\n }\n \n static void\n-current_regcache_test (void)\n+regcaches_test ()\n {\n   /* It is empty at the start.  */\n-  SELF_CHECK (regcache_access::current_regcache_size () == 0);\n+  SELF_CHECK (regcache_access::regcaches_size () == 0);\n \n   ptid_t ptid1 (1), ptid2 (2), ptid3 (3);\n \n   test_target_ops test_target1;\n   test_target_ops test_target2;\n \n   /* Get regcache from (target1,ptid1), a new regcache is added to\n-     current_regcache.  */\n+     regcache::regcaches.  */\n   test_get_thread_arch_aspace_regcache (&test_target1, ptid1,\n \t\t\t\t\ttarget_gdbarch (),\n \t\t\t\t\tNULL);\n-  SELF_CHECK (regcache_access::current_regcache_size () == 1);\n+  SELF_CHECK (regcache_access::regcaches_size () == 1);\n \n   /* Get regcache from (target1,ptid2), a new regcache is added to\n-     current_regcache.  */\n+     regcache::regcaches.  */\n   test_get_thread_arch_aspace_regcache (&test_target1, ptid2,\n \t\t\t\t\ttarget_gdbarch (),\n \t\t\t\t\tNULL);\n-  SELF_CHECK (regcache_access::current_regcache_size () == 2);\n+  SELF_CHECK (regcache_access::regcaches_size () == 2);\n \n   /* Get regcache from (target1,ptid3), a new regcache is added to\n-     current_regcache.  */\n+     regcache::regcaches.  */\n   test_get_thread_arch_aspace_regcache (&test_target1, ptid3,\n \t\t\t\t\ttarget_gdbarch (),\n \t\t\t\t\tNULL);\n-  SELF_CHECK (regcache_access::current_regcache_size () == 3);\n+  SELF_CHECK (regcache_access::regcaches_size () == 3);\n \n   /* Get regcache from (target1,ptid2) again, nothing is added to\n-     current_regcache.  */\n+     regcache::regcaches.  */\n   test_get_thread_arch_aspace_regcache (&test_target1, ptid2,\n \t\t\t\t\ttarget_gdbarch (),\n \t\t\t\t\tNULL);\n-  SELF_CHECK (regcache_access::current_regcache_size () == 3);\n+  SELF_CHECK (regcache_access::regcaches_size () == 3);\n \n   /* Get regcache from (target2,ptid2), a new regcache is added to\n-     current_regcache, since this time we're using a differen\n+     regcache::regcaches, since this time we're using a differen\n      target.  */\n   test_get_thread_arch_aspace_regcache (&test_target2, ptid2,\n \t\t\t\t\ttarget_gdbarch (),\n \t\t\t\t\tNULL);\n-  SELF_CHECK (regcache_access::current_regcache_size () == 4);\n+  SELF_CHECK (regcache_access::regcaches_size () == 4);\n \n   /* Mark that (target1,ptid2) changed.  The regcache of (target1,\n-     ptid2) should be removed from current_regcache.  */\n+     ptid2) should be removed from regcache::regcaches.  */\n   registers_changed_ptid (&test_target1, ptid2);\n-  SELF_CHECK (regcache_access::current_regcache_size () == 3);\n+  SELF_CHECK (regcache_access::regcaches_size () == 3);\n \n   /* Get the regcache from (target2,ptid2) again, confirming the\n      registers_changed_ptid call above did not delete it.  */\n   test_get_thread_arch_aspace_regcache (&test_target2, ptid2,\n \t\t\t\t\ttarget_gdbarch (),\n \t\t\t\t\tNULL);\n-  SELF_CHECK (regcache_access::current_regcache_size () == 3);\n+  SELF_CHECK (regcache_access::regcaches_size () == 3);\n \n   /* Confirm that marking all regcaches of all targets as changed\n-     clears current_regcache.  */\n+     clears regcache::regcaches.  */\n   registers_changed_ptid (nullptr, minus_one_ptid);\n-  SELF_CHECK (regcache_access::current_regcache_size () == 0);\n+  SELF_CHECK (regcache_access::regcaches_size () == 0);\n }\n \n class target_ops_no_register : public test_target_ops\n@@ -1846,7 +1844,7 @@ _initialize_regcache ()\n \t   _(\"Force gdb to flush its register cache (maintainer command).\"));\n \n #if GDB_SELF_TEST\n-  selftests::register_test (\"current_regcache\", selftests::current_regcache_test);\n+  selftests::register_test (\"regcaches\", selftests::regcaches_test);\n \n   selftests::register_test_foreach_arch (\"regcache::cooked_read_test\",\n \t\t\t\t\t selftests::cooked_read_test);"
    },
    {
      "sha": "f2627958aa12eae328b0d0d6b8e09cfcd12e594c",
      "filename": "gdb/regcache.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/174981ae1f95f2de534d5da77d0057144ba65066/gdb/regcache.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/174981ae1f95f2de534d5da77d0057144ba65066/gdb/regcache.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/regcache.h?ref=174981ae1f95f2de534d5da77d0057144ba65066",
      "patch": "@@ -402,7 +402,7 @@ class regcache : public detached_regcache\n   regcache (process_stratum_target *target, gdbarch *gdbarch,\n \t    const address_space *aspace);\n \n-  static std::forward_list<regcache *> current_regcache;\n+  static std::forward_list<regcache *> regcaches;\n \n private:\n "
    }
  ]
}