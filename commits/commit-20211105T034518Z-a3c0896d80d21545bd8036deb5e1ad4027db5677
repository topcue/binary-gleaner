{
  "sha": "a3c0896d80d21545bd8036deb5e1ad4027db5677",
  "node_id": "C_kwDOANOeidoAKGEzYzA4OTZkODBkMjE1NDViZDgwMzZkZWI1ZTFhZDQwMjdkYjU2Nzc",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-11-05T00:46:28Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-11-05T03:45:18Z"
    },
    "message": "asan: alpha-vms: objdump buffer overflows\n\n\t* vms-alpha.c (evax_bfd_print_desc): Sanity check buffer access.\n\t(evax_bfd_print_valspec, evax_bfd_print_typspec): Likewise.\n\t(evax_bfd_print_dst): Likewise.",
    "tree": {
      "sha": "a31e2b32de3f0bae50dc6e47b0f0c9445c407a4a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a31e2b32de3f0bae50dc6e47b0f0c9445c407a4a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a3c0896d80d21545bd8036deb5e1ad4027db5677",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a3c0896d80d21545bd8036deb5e1ad4027db5677",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a3c0896d80d21545bd8036deb5e1ad4027db5677",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a3c0896d80d21545bd8036deb5e1ad4027db5677/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "831105b6d96ae7ab9b485fb868f86e23d34ab36f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/831105b6d96ae7ab9b485fb868f86e23d34ab36f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/831105b6d96ae7ab9b485fb868f86e23d34ab36f"
    }
  ],
  "stats": {
    "total": 519,
    "additions": 344,
    "deletions": 175
  },
  "files": [
    {
      "sha": "f4f16ef116a1cba36f7efe5bc76006e5d434c337",
      "filename": "bfd/vms-alpha.c",
      "status": "modified",
      "additions": 344,
      "deletions": 175,
      "changes": 519,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a3c0896d80d21545bd8036deb5e1ad4027db5677/bfd/vms-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a3c0896d80d21545bd8036deb5e1ad4027db5677/bfd/vms-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-alpha.c?ref=a3c0896d80d21545bd8036deb5e1ad4027db5677",
      "patch": "@@ -7040,8 +7040,12 @@ evax_bfd_get_dsc_name (unsigned int v)\n }\n \n static void\n-evax_bfd_print_desc (const unsigned char *buf, int indent, FILE *file)\n+evax_bfd_print_desc (const unsigned char *buf, unsigned int bufsize,\n+\t\t     int indent, FILE *file)\n {\n+  if (bufsize < 8)\n+    return;\n+\n   unsigned char bclass = buf[3];\n   unsigned char dtype = buf[2];\n   unsigned int len = (unsigned)bfd_getl16 (buf);\n@@ -7070,38 +7074,47 @@ evax_bfd_print_desc (const unsigned char *buf, int indent, FILE *file)\n \t    evax_bfd_print_indent (indent, file);\n \t    fprintf (file, _(\"non-contiguous array of %s\\n\"),\n \t\t     evax_bfd_get_dsc_name (dsc->dtype));\n-\t    evax_bfd_print_indent (indent + 1, file);\n-\t    fprintf (file,\n-\t\t     /* xgettext:c-format */\n-\t\t     _(\"dimct: %u, aflags: 0x%02x, digits: %u, scale: %u\\n\"),\n-\t\t     dsc->dimct, dsc->aflags, dsc->digits, dsc->scale);\n-\t    evax_bfd_print_indent (indent + 1, file);\n-\t    fprintf (file,\n-\t\t     /* xgettext:c-format */\n-\t\t     _(\"arsize: %u, a0: 0x%08x\\n\"),\n-\t\t     (unsigned)bfd_getl32 (dsc->arsize),\n-\t\t     (unsigned)bfd_getl32 (dsc->a0));\n-\t    evax_bfd_print_indent (indent + 1, file);\n-\t    fprintf (file, _(\"Strides:\\n\"));\n-\t    b = buf + sizeof (*dsc);\n-\t    for (i = 0; i < dsc->dimct; i++)\n-\t      {\n-\t\tevax_bfd_print_indent (indent + 2, file);\n-\t\tfprintf (file, \"[%u]: %u\\n\", i + 1,\n-\t\t\t (unsigned)bfd_getl32 (b));\n-\t\tb += 4;\n-\t      }\n-\t    evax_bfd_print_indent (indent + 1, file);\n-\t    fprintf (file, _(\"Bounds:\\n\"));\n-\t    b = buf + sizeof (*dsc);\n-\t    for (i = 0; i < dsc->dimct; i++)\n+\t    if (bufsize >= sizeof (*dsc))\n \t      {\n-\t\tevax_bfd_print_indent (indent + 2, file);\n-\t\t/* xgettext:c-format */\n-\t\tfprintf (file, _(\"[%u]: Lower: %u, upper: %u\\n\"), i + 1,\n-\t\t\t (unsigned)bfd_getl32 (b + 0),\n-\t\t\t (unsigned)bfd_getl32 (b + 4));\n-\t\tb += 8;\n+\t\tevax_bfd_print_indent (indent + 1, file);\n+\t\tfprintf (file,\n+\t\t\t /* xgettext:c-format */\n+\t\t\t _(\"dimct: %u, aflags: 0x%02x, digits: %u, scale: %u\\n\"),\n+\t\t\t dsc->dimct, dsc->aflags, dsc->digits, dsc->scale);\n+\t\tevax_bfd_print_indent (indent + 1, file);\n+\t\tfprintf (file,\n+\t\t\t /* xgettext:c-format */\n+\t\t\t _(\"arsize: %u, a0: 0x%08x\\n\"),\n+\t\t\t (unsigned) bfd_getl32 (dsc->arsize),\n+\t\t\t (unsigned) bfd_getl32 (dsc->a0));\n+\t\tevax_bfd_print_indent (indent + 1, file);\n+\t\tfprintf (file, _(\"Strides:\\n\"));\n+\t\tb = buf + sizeof (*dsc);\n+\t\tbufsize -= sizeof (*dsc);\n+\t\tfor (i = 0; i < dsc->dimct; i++)\n+\t\t  {\n+\t\t    if (bufsize < 4)\n+\t\t      break;\n+\t\t    evax_bfd_print_indent (indent + 2, file);\n+\t\t    fprintf (file, \"[%u]: %u\\n\", i + 1,\n+\t\t\t     (unsigned) bfd_getl32 (b));\n+\t\t    b += 4;\n+\t\t    bufsize -= 4;\n+\t\t  }\n+\t\tevax_bfd_print_indent (indent + 1, file);\n+\t\tfprintf (file, _(\"Bounds:\\n\"));\n+\t\tfor (i = 0; i < dsc->dimct; i++)\n+\t\t  {\n+\t\t    if (bufsize < 8)\n+\t\t      break;\n+\t\t    evax_bfd_print_indent (indent + 2, file);\n+\t\t    /* xgettext:c-format */\n+\t\t    fprintf (file, _(\"[%u]: Lower: %u, upper: %u\\n\"), i + 1,\n+\t\t\t     (unsigned) bfd_getl32 (b + 0),\n+\t\t\t     (unsigned) bfd_getl32 (b + 4));\n+\t\t    b += 8;\n+\t\t    bufsize -= 8;\n+\t\t  }\n \t      }\n \t  }\n \t  break;\n@@ -7112,12 +7125,15 @@ evax_bfd_print_desc (const unsigned char *buf, int indent, FILE *file)\n \t    evax_bfd_print_indent (indent, file);\n \t    fprintf (file, _(\"unaligned bit-string of %s\\n\"),\n \t\t     evax_bfd_get_dsc_name (ubs->dtype));\n-\t    evax_bfd_print_indent (indent + 1, file);\n-\t    fprintf (file,\n-\t\t     /* xgettext:c-format */\n-\t\t     _(\"base: %u, pos: %u\\n\"),\n-\t\t     (unsigned)bfd_getl32 (ubs->base),\n-\t\t     (unsigned)bfd_getl32 (ubs->pos));\n+\t    if (bufsize >= sizeof (*ubs))\n+\t      {\n+\t\tevax_bfd_print_indent (indent + 1, file);\n+\t\tfprintf (file,\n+\t\t\t /* xgettext:c-format */\n+\t\t\t _(\"base: %u, pos: %u\\n\"),\n+\t\t\t (unsigned) bfd_getl32 (ubs->base),\n+\t\t\t (unsigned) bfd_getl32 (ubs->pos));\n+\t      }\n \t  }\n \t  break;\n \tdefault:\n@@ -7128,16 +7144,21 @@ evax_bfd_print_desc (const unsigned char *buf, int indent, FILE *file)\n }\n \n static unsigned int\n-evax_bfd_print_valspec (const unsigned char *buf, int indent, FILE *file)\n+evax_bfd_print_valspec (const unsigned char *buf, unsigned int bufsize,\n+\t\t\tint indent, FILE *file)\n {\n+  if (bufsize < 5)\n+    return bufsize;\n+\n   unsigned int vflags = buf[0];\n-  unsigned int value = (unsigned)bfd_getl32 (buf + 1);\n+  unsigned int value = (unsigned) bfd_getl32 (buf + 1);\n   unsigned int len = 5;\n \n   evax_bfd_print_indent (indent, file);\n   /* xgettext:c-format */\n   fprintf (file, _(\"vflags: 0x%02x, value: 0x%08x \"), vflags, value);\n   buf += 5;\n+  bufsize -= 5;\n \n   switch (vflags)\n     {\n@@ -7152,7 +7173,8 @@ evax_bfd_print_valspec (const unsigned char *buf, int indent, FILE *file)\n       break;\n     case DST__K_VFLAGS_DSC:\n       fprintf (file, _(\"(descriptor)\\n\"));\n-      evax_bfd_print_desc (buf + value, indent + 1, file);\n+      if (value <= bufsize)\n+\tevax_bfd_print_desc (buf + value, bufsize - value, indent + 1, file);\n       break;\n     case DST__K_VFLAGS_TVS:\n       fprintf (file, _(\"(trailing value)\\n\"));\n@@ -7191,59 +7213,88 @@ evax_bfd_print_valspec (const unsigned char *buf, int indent, FILE *file)\n }\n \n static void\n-evax_bfd_print_typspec (const unsigned char *buf, int indent, FILE *file)\n+evax_bfd_print_typspec (const unsigned char *buf, unsigned int bufsize,\n+\t\t\tint indent, FILE *file)\n {\n+  if (bufsize < 3)\n+    return;\n+\n   unsigned char kind = buf[2];\n-  unsigned int len = (unsigned)bfd_getl16 (buf);\n+  unsigned int len = (unsigned) bfd_getl16 (buf);\n \n   evax_bfd_print_indent (indent, file);\n   /* xgettext:c-format */\n   fprintf (file, _(\"len: %2u, kind: %2u \"), len, kind);\n   buf += 3;\n+  bufsize -= 3;\n   switch (kind)\n     {\n     case DST__K_TS_ATOM:\n     /* xgettext:c-format */\n-      fprintf (file, _(\"atomic, type=0x%02x %s\\n\"),\n-\t       buf[0], evax_bfd_get_dsc_name (buf[0]));\n+      if (bufsize >= 1)\n+\tfprintf (file, _(\"atomic, type=0x%02x %s\\n\"),\n+\t\t buf[0], evax_bfd_get_dsc_name (buf[0]));\n       break;\n     case DST__K_TS_IND:\n-      fprintf (file, _(\"indirect, defined at 0x%08x\\n\"),\n-\t       (unsigned)bfd_getl32 (buf));\n+      if (bufsize >= 4)\n+\tfprintf (file, _(\"indirect, defined at 0x%08x\\n\"),\n+\t\t (unsigned) bfd_getl32 (buf));\n       break;\n     case DST__K_TS_TPTR:\n       fprintf (file, _(\"typed pointer\\n\"));\n-      evax_bfd_print_typspec (buf, indent + 1, file);\n+      evax_bfd_print_typspec (buf, bufsize, indent + 1, file);\n       break;\n     case DST__K_TS_PTR:\n       fprintf (file, _(\"pointer\\n\"));\n       break;\n     case DST__K_TS_ARRAY:\n       {\n \tconst unsigned char *vs;\n+\tunsigned int vs_len;\n \tunsigned int vec_len;\n \tunsigned int i;\n \n+\tif (bufsize == 0)\n+\t  return;\n \tfprintf (file, _(\"array, dim: %u, bitmap: \"), buf[0]);\n+\t--bufsize;\n \tvec_len = (buf[0] + 1 + 7) / 8;\n \tfor (i = 0; i < vec_len; i++)\n-\t  fprintf (file, \" %02x\", buf[i + 1]);\n+\t  {\n+\t    if (bufsize == 0)\n+\t      break;\n+\t    fprintf (file, \" %02x\", buf[i + 1]);\n+\t    --bufsize;\n+\t  }\n \tfputc ('\\n', file);\n+\tif (bufsize == 0)\n+\t  return;\n \tvs = buf + 1 + vec_len;\n \tevax_bfd_print_indent (indent, file);\n \tfprintf (file, _(\"array descriptor:\\n\"));\n-\tvs += evax_bfd_print_valspec (vs, indent + 1, file);\n-\tfor (i = 0; i < buf[0] + 1U; i++)\n-\t  if (buf[1 + i / 8] & (1 << (i % 8)))\n-\t    {\n-\t      evax_bfd_print_indent (indent, file);\n-\t      if (i == 0)\n-\t\tfprintf (file, _(\"type spec for element:\\n\"));\n-\t      else\n-\t\tfprintf (file, _(\"type spec for subscript %u:\\n\"), i);\n-\t      evax_bfd_print_typspec (vs, indent + 1, file);\n-\t      vs += bfd_getl16 (vs);\n-\t    }\n+\tvs_len = evax_bfd_print_valspec (vs, bufsize, indent + 1, file);\n+\tvs += vs_len;\n+\tif (bufsize > vs_len)\n+\t  {\n+\t    bufsize -= vs_len;\n+\t    for (i = 0; i < buf[0] + 1U; i++)\n+\t      if (buf[1 + i / 8] & (1 << (i % 8)))\n+\t\t{\n+\t\t  evax_bfd_print_indent (indent, file);\n+\t\t  if (i == 0)\n+\t\t    fprintf (file, _(\"type spec for element:\\n\"));\n+\t\t  else\n+\t\t    fprintf (file, _(\"type spec for subscript %u:\\n\"), i);\n+\t\t  evax_bfd_print_typspec (vs, bufsize, indent + 1, file);\n+\t\t  if (bufsize < 2)\n+\t\t    break;\n+\t\t  vs_len = bfd_getl16 (vs);\n+\t\t  if (bufsize <= vs_len)\n+\t\t    break;\n+\t\t  vs += vs_len;\n+\t\t  bufsize -= vs_len;\n+\t\t}\n+\t  }\n       }\n       break;\n     default:\n@@ -7277,20 +7328,24 @@ evax_bfd_print_dst (struct bfd *abfd, unsigned int dst_size, FILE *file)\n       /* xgettext:c-format */\n       fprintf (file, _(\" type: %3u, len: %3u (at 0x%08x): \"),\n \t       type, len, off);\n-      if (len == 0)\n+      if (len < sizeof (dsth))\n \t{\n \t  fputc ('\\n', file);\n \t  break;\n \t}\n-      len++;\n       dst_size -= len;\n       off += len;\n       len -= sizeof (dsth);\n-      buf = _bfd_malloc_and_read (abfd, len, len);\n-      if (buf == NULL)\n+      if (len == 0)\n+\tbuf = NULL;\n+      else\n \t{\n-\t  fprintf (file, _(\"cannot read DST symbol\\n\"));\n-\t  return;\n+\t  buf = _bfd_malloc_and_read (abfd, len, len);\n+\t  if (buf == NULL)\n+\t    {\n+\t      fprintf (file, _(\"cannot read DST symbol\\n\"));\n+\t      return;\n+\t    }\n \t}\n       switch (type)\n \t{\n@@ -7334,7 +7389,7 @@ evax_bfd_print_dst (struct bfd *abfd, unsigned int dst_size, FILE *file)\n \tcase DSC__K_DTYPE_VT2:\n \t  fprintf (file, _(\"standard data: %s\\n\"),\n \t\t   evax_bfd_get_dsc_name (type));\n-\t  evax_bfd_print_valspec (buf, 4, file);\n+\t  evax_bfd_print_valspec (buf, len, 4, file);\n \t  fprintf (file, _(\"    name: %.*s\\n\"), buf[5], buf + 6);\n \t  break;\n \tcase DST__K_MODBEG:\n@@ -7343,18 +7398,30 @@ evax_bfd_print_dst (struct bfd *abfd, unsigned int dst_size, FILE *file)\n \t    const char *name = (const char *)buf + sizeof (*dst);\n \n \t    fprintf (file, _(\"modbeg\\n\"));\n+\t    if (len < sizeof (*dst))\n+\t      break;\n \t    /* xgettext:c-format */\n \t    fprintf (file, _(\"   flags: %d, language: %u, \"\n \t\t\t     \"major: %u, minor: %u\\n\"),\n \t\t     dst->flags,\n \t\t     (unsigned)bfd_getl32 (dst->language),\n \t\t     (unsigned)bfd_getl16 (dst->major),\n \t\t     (unsigned)bfd_getl16 (dst->minor));\n-\t    fprintf (file, _(\"   module name: %.*s\\n\"),\n-\t\t     name[0], name + 1);\n-\t    name += name[0] + 1;\n-\t    fprintf (file, _(\"   compiler   : %.*s\\n\"),\n-\t\t     name[0], name + 1);\n+\t    len -= sizeof (*dst);\n+\t    if (len > 0)\n+\t      {\n+\t\tint nlen = len - 1;\n+\t\tfprintf (file, _(\"   module name: %.*s\\n\"),\n+\t\t\t name[0] > nlen ? nlen : name[0], name + 1);\n+\t\tif (name[0] < nlen)\n+\t\t  {\n+\t\t    len -= name[0] + 1;\n+\t\t    name += name[0] + 1;\n+\t\t    nlen = len - 1;\n+\t\t    fprintf (file, _(\"   compiler   : %.*s\\n\"),\n+\t\t\t     name[0] > nlen ? nlen: name[0], name + 1);\n+\t\t  }\n+\t      }\n \t  }\n \t  break;\n \tcase DST__K_MODEND:\n@@ -7366,122 +7433,176 @@ evax_bfd_print_dst (struct bfd *abfd, unsigned int dst_size, FILE *file)\n \t    const char *name = (const char *)buf + sizeof (*dst);\n \n \t    fputs (_(\"rtnbeg\\n\"), file);\n-\t    /* xgettext:c-format */\n-\t    fprintf (file, _(\"    flags: %u, address: 0x%08x, \"\n-\t\t\t     \"pd-address: 0x%08x\\n\"),\n-\t\t     dst->flags,\n-\t\t     (unsigned)bfd_getl32 (dst->address),\n-\t\t     (unsigned)bfd_getl32 (dst->pd_address));\n-\t    fprintf (file, _(\"    routine name: %.*s\\n\"),\n-\t\t     name[0], name + 1);\n+\t    if (len >= sizeof (*dst))\n+\t      {\n+\t\t/* xgettext:c-format */\n+\t\tfprintf (file, _(\"    flags: %u, address: 0x%08x, \"\n+\t\t\t\t \"pd-address: 0x%08x\\n\"),\n+\t\t\t dst->flags,\n+\t\t\t (unsigned) bfd_getl32 (dst->address),\n+\t\t\t (unsigned) bfd_getl32 (dst->pd_address));\n+\t\tlen -= sizeof (*dst);\n+\t\tif (len > 0)\n+\t\t  {\n+\t\t    int nlen = len - 1;\n+\t\t    fprintf (file, _(\"    routine name: %.*s\\n\"),\n+\t\t\t     name[0] > nlen ? nlen : name[0], name + 1);\n+\t\t  }\n+\t      }\n \t  }\n \t  break;\n \tcase DST__K_RTNEND:\n \t  {\n \t    struct vms_dst_rtnend *dst = (void *)buf;\n \n-\t    fprintf (file, _(\"rtnend: size 0x%08x\\n\"),\n-\t\t     (unsigned)bfd_getl32 (dst->size));\n+\t    if (len >= sizeof (*dst))\n+\t      fprintf (file, _(\"rtnend: size 0x%08x\\n\"),\n+\t\t       (unsigned) bfd_getl32 (dst->size));\n \t  }\n \t  break;\n \tcase DST__K_PROLOG:\n \t  {\n \t    struct vms_dst_prolog *dst = (void *)buf;\n \n-\t    fprintf (file, _(\"prolog: bkpt address 0x%08x\\n\"),\n-\t\t     (unsigned)bfd_getl32 (dst->bkpt_addr));\n+\t    if (len >= sizeof (*dst))\n+\t      /* xgettext:c-format */\n+\t      fprintf (file, _(\"prolog: bkpt address 0x%08x\\n\"),\n+\t\t       (unsigned) bfd_getl32 (dst->bkpt_addr));\n \t  }\n \t  break;\n \tcase DST__K_EPILOG:\n \t  {\n \t    struct vms_dst_epilog *dst = (void *)buf;\n \n-\t    /* xgettext:c-format */\n-\t    fprintf (file, _(\"epilog: flags: %u, count: %u\\n\"),\n-\t\t     dst->flags, (unsigned)bfd_getl32 (dst->count));\n+\t    if (len >= sizeof (*dst))\n+\t      /* xgettext:c-format */\n+\t      fprintf (file, _(\"epilog: flags: %u, count: %u\\n\"),\n+\t\t       dst->flags, (unsigned) bfd_getl32 (dst->count));\n \t  }\n \t  break;\n \tcase DST__K_BLKBEG:\n \t  {\n \t    struct vms_dst_blkbeg *dst = (void *)buf;\n \t    const char *name = (const char *)buf + sizeof (*dst);\n \n-\t    /* xgettext:c-format */\n-\t    fprintf (file, _(\"blkbeg: address: 0x%08x, name: %.*s\\n\"),\n-\t\t     (unsigned)bfd_getl32 (dst->address),\n-\t\t     name[0], name + 1);\n+\t    if (len > sizeof (*dst))\n+\t      {\n+\t\tint nlen;\n+\t\tlen -= sizeof (*dst);\n+\t\tnlen = len - 1;\n+\t\t/* xgettext:c-format */\n+\t\tfprintf (file, _(\"blkbeg: address: 0x%08x, name: %.*s\\n\"),\n+\t\t\t (unsigned) bfd_getl32 (dst->address),\n+\t\t\t name[0] > nlen ? nlen : name[0], name + 1);\n+\t      }\n \t  }\n \t  break;\n \tcase DST__K_BLKEND:\n \t  {\n \t    struct vms_dst_blkend *dst = (void *)buf;\n \n-\t    fprintf (file, _(\"blkend: size: 0x%08x\\n\"),\n-\t\t     (unsigned)bfd_getl32 (dst->size));\n+\t    if (len >= sizeof (*dst))\n+\t      /* xgettext:c-format */\n+\t      fprintf (file, _(\"blkend: size: 0x%08x\\n\"),\n+\t\t       (unsigned) bfd_getl32 (dst->size));\n \t  }\n \t  break;\n \tcase DST__K_TYPSPEC:\n \t  {\n \t    fprintf (file, _(\"typspec (len: %u)\\n\"), len);\n-\t    fprintf (file, _(\"    name: %.*s\\n\"), buf[0], buf + 1);\n-\t    evax_bfd_print_typspec (buf + 1 + buf[0], 5, file);\n+\t    if (len >= 1)\n+\t      {\n+\t\tint nlen = len - 1;\n+\t\tfprintf (file, _(\"    name: %.*s\\n\"),\n+\t\t\t buf[0] > nlen ? nlen : buf[0], buf + 1);\n+\t\tif (nlen > buf[0])\n+\t\t  evax_bfd_print_typspec (buf + 1 + buf[0], len - (1 + buf[0]),\n+\t\t\t\t\t  5, file);\n+\t      }\n \t  }\n \t  break;\n \tcase DST__K_SEPTYP:\n \t  {\n-\t    fprintf (file, _(\"septyp, name: %.*s\\n\"), buf[5], buf + 6);\n-\t    evax_bfd_print_valspec (buf, 4, file);\n+\t    if (len >= 6)\n+\t      {\n+\t\tfprintf (file, _(\"septyp, name: %.*s\\n\"),\n+\t\t\t buf[5] > len - 6 ? len - 6 : buf[5], buf + 6);\n+\t\tevax_bfd_print_valspec (buf, len, 4, file);\n+\t      }\n \t  }\n \t  break;\n \tcase DST__K_RECBEG:\n \t  {\n \t    struct vms_dst_recbeg *recbeg = (void *)buf;\n \t    const char *name = (const char *)buf + sizeof (*recbeg);\n \n-\t    fprintf (file, _(\"recbeg: name: %.*s\\n\"), name[0], name + 1);\n-\t    evax_bfd_print_valspec (buf, 4, file);\n-\t    fprintf (file, _(\"    len: %u bits\\n\"),\n-\t\t     (unsigned)bfd_getl32 (name + 1 + name[0]));\n+\t    if (len > sizeof (*recbeg))\n+\t      {\n+\t\tint nlen = len - sizeof (*recbeg) - 1;\n+\t\tif (name[0] < nlen)\n+\t\t  nlen = name[0];\n+\t\tfprintf (file, _(\"recbeg: name: %.*s\\n\"), nlen, name + 1);\n+\t\tevax_bfd_print_valspec (buf, len, 4, file);\n+\t\tlen -= 1 + nlen;\n+\t\tif (len >= 4)\n+\t\t  fprintf (file, _(\"    len: %u bits\\n\"),\n+\t\t\t   (unsigned) bfd_getl32 (name + 1 + nlen));\n+\t      }\n \t  }\n \t  break;\n \tcase DST__K_RECEND:\n \t  fprintf (file, _(\"recend\\n\"));\n \t  break;\n \tcase DST__K_ENUMBEG:\n-\t  /* xgettext:c-format */\n-\t  fprintf (file, _(\"enumbeg, len: %u, name: %.*s\\n\"),\n-\t\t   buf[0], buf[1], buf + 2);\n+\t  if (len >= 2)\n+\t    /* xgettext:c-format */\n+\t    fprintf (file, _(\"enumbeg, len: %u, name: %.*s\\n\"),\n+\t\t     buf[0], buf[1] > len - 2 ? len - 2 : buf[1], buf + 2);\n \t  break;\n \tcase DST__K_ENUMELT:\n-\t  fprintf (file, _(\"enumelt, name: %.*s\\n\"), buf[5], buf + 6);\n-\t  evax_bfd_print_valspec (buf, 4, file);\n+\t  if (len >= 6)\n+\t    {\n+\t      fprintf (file, _(\"enumelt, name: %.*s\\n\"),\n+\t\t       buf[5] > len - 6 ? len - 6 : buf[5], buf + 6);\n+\t      evax_bfd_print_valspec (buf, len, 4, file);\n+\t    }\n \t  break;\n \tcase DST__K_ENUMEND:\n \t  fprintf (file, _(\"enumend\\n\"));\n \t  break;\n \tcase DST__K_LABEL:\n \t  {\n \t    struct vms_dst_label *lab = (void *)buf;\n-\t    fprintf (file, _(\"label, name: %.*s\\n\"),\n-\t\t     lab->name[0], lab->name + 1);\n-\t    fprintf (file, _(\"    address: 0x%08x\\n\"),\n-\t\t     (unsigned)bfd_getl32 (lab->value));\n+\t    if (len >= sizeof (*lab))\n+\t      {\n+\t\tfprintf (file, _(\"label, name: %.*s\\n\"),\n+\t\t\t lab->name[0] > len - 1 ? len - 1 : lab->name[0],\n+\t\t\t lab->name + 1);\n+\t\tfprintf (file, _(\"    address: 0x%08x\\n\"),\n+\t\t\t (unsigned) bfd_getl32 (lab->value));\n+\t      }\n \t  }\n \t  break;\n \tcase DST__K_DIS_RANGE:\n-\t  {\n-\t    unsigned int cnt = bfd_getl32 (buf);\n-\t    unsigned char *rng = buf + 4;\n-\t    unsigned int i;\n-\n-\t    fprintf (file, _(\"discontiguous range (nbr: %u)\\n\"), cnt);\n-\t    for (i = 0; i < cnt; i++, rng += 8)\n-\t      /* xgettext:c-format */\n-\t      fprintf (file, _(\"    address: 0x%08x, size: %u\\n\"),\n-\t\t       (unsigned)bfd_getl32 (rng),\n-\t\t       (unsigned)bfd_getl32 (rng + 4));\n+\t  if (len >= 4)\n+\t    {\n+\t      unsigned int cnt = bfd_getl32 (buf);\n+\t      unsigned char *rng = buf + 4;\n+\t      unsigned int i;\n \n-\t  }\n+\t      fprintf (file, _(\"discontiguous range (nbr: %u)\\n\"), cnt);\n+\t      len -= 4;\n+\t      for (i = 0; i < cnt; i++, rng += 8)\n+\t\t{\n+\t\t  if (len < 8)\n+\t\t    break;\n+\t\t  /* xgettext:c-format */\n+\t\t  fprintf (file, _(\"    address: 0x%08x, size: %u\\n\"),\n+\t\t\t   (unsigned) bfd_getl32 (rng),\n+\t\t\t   (unsigned) bfd_getl32 (rng + 4));\n+\t\t  len -= 8;\n+\t\t}\n+\t    }\n \t  break;\n \tcase DST__K_LINE_NUM:\n \t  {\n@@ -7491,79 +7612,101 @@ evax_bfd_print_dst (struct bfd *abfd, unsigned int dst_size, FILE *file)\n \n \t    while (len > 0)\n \t      {\n-\t\tsigned char cmd;\n-\t\tunsigned char cmdlen;\n+\t\tint cmd;\n \t\tunsigned int val;\n+\t\tint cmdlen = -1;\n \n-\t\tcmd = buf[0];\n-\t\tcmdlen = 0;\n+\t\tcmd = *buf++;\n+\t\tlen--;\n \n \t\tfputs (\"    \", file);\n \n \t\tswitch (cmd)\n \t\t  {\n \t\t  case DST__K_DELTA_PC_W:\n-\t\t    val = bfd_getl16 (buf + 1);\n+\t\t    if (len < 2)\n+\t\t      break;\n+\t\t    val = bfd_getl16 (buf);\n \t\t    fprintf (file, _(\"delta_pc_w %u\\n\"), val);\n \t\t    pc += val;\n \t\t    line++;\n-\t\t    cmdlen = 3;\n+\t\t    cmdlen = 2;\n \t\t    break;\n \t\t  case DST__K_INCR_LINUM:\n-\t\t    val = buf[1];\n+\t\t    if (len < 1)\n+\t\t      break;\n+\t\t    val = *buf;\n \t\t    fprintf (file, _(\"incr_linum(b): +%u\\n\"), val);\n \t\t    line += val;\n-\t\t    cmdlen = 2;\n+\t\t    cmdlen = 1;\n \t\t    break;\n \t\t  case DST__K_INCR_LINUM_W:\n-\t\t    val = bfd_getl16 (buf + 1);\n+\t\t    if (len < 2)\n+\t\t      break;\n+\t\t    val = bfd_getl16 (buf);\n \t\t    fprintf (file, _(\"incr_linum_w: +%u\\n\"), val);\n \t\t    line += val;\n-\t\t    cmdlen = 3;\n+\t\t    cmdlen = 2;\n \t\t    break;\n \t\t  case DST__K_INCR_LINUM_L:\n-\t\t    val = bfd_getl32 (buf + 1);\n+\t\t    if (len < 4)\n+\t\t      break;\n+\t\t    val = bfd_getl32 (buf);\n \t\t    fprintf (file, _(\"incr_linum_l: +%u\\n\"), val);\n \t\t    line += val;\n-\t\t    cmdlen = 5;\n+\t\t    cmdlen = 4;\n \t\t    break;\n \t\t  case DST__K_SET_LINUM:\n-\t\t    line = bfd_getl16 (buf + 1);\n+\t\t    if (len < 2)\n+\t\t      break;\n+\t\t    line = bfd_getl16 (buf);\n \t\t    fprintf (file, _(\"set_line_num(w) %u\\n\"), line);\n-\t\t    cmdlen = 3;\n+\t\t    cmdlen = 2;\n \t\t    break;\n \t\t  case DST__K_SET_LINUM_B:\n-\t\t    line = buf[1];\n+\t\t    if (len < 1)\n+\t\t      break;\n+\t\t    line = *buf;\n \t\t    fprintf (file, _(\"set_line_num_b %u\\n\"), line);\n-\t\t    cmdlen = 2;\n+\t\t    cmdlen = 1;\n \t\t    break;\n \t\t  case DST__K_SET_LINUM_L:\n-\t\t    line = bfd_getl32 (buf + 1);\n+\t\t    if (len < 4)\n+\t\t      break;\n+\t\t    line = bfd_getl32 (buf);\n \t\t    fprintf (file, _(\"set_line_num_l %u\\n\"), line);\n-\t\t    cmdlen = 5;\n+\t\t    cmdlen = 4;\n \t\t    break;\n \t\t  case DST__K_SET_ABS_PC:\n-\t\t    pc = bfd_getl32 (buf + 1);\n+\t\t    if (len < 4)\n+\t\t      break;\n+\t\t    pc = bfd_getl32 (buf);\n \t\t    fprintf (file, _(\"set_abs_pc: 0x%08x\\n\"), pc);\n-\t\t    cmdlen = 5;\n+\t\t    cmdlen = 4;\n \t\t    break;\n \t\t  case DST__K_DELTA_PC_L:\n+\t\t    if (len < 4)\n+\t\t      break;\n \t\t    fprintf (file, _(\"delta_pc_l: +0x%08x\\n\"),\n-\t\t\t     (unsigned)bfd_getl32 (buf + 1));\n-\t\t    cmdlen = 5;\n+\t\t\t     (unsigned) bfd_getl32 (buf));\n+\t\t    cmdlen = 4;\n \t\t    break;\n \t\t  case DST__K_TERM:\n-\t\t    fprintf (file, _(\"term(b): 0x%02x\"), buf[1]);\n-\t\t    pc += buf[1];\n+\t\t    if (len < 1)\n+\t\t      break;\n+\t\t    fprintf (file, _(\"term(b): 0x%02x\"), *buf);\n+\t\t    pc += *buf;\n \t\t    fprintf (file, _(\"        pc: 0x%08x\\n\"), pc);\n-\t\t    cmdlen = 2;\n+\t\t    cmdlen = 1;\n \t\t    break;\n \t\t  case DST__K_TERM_W:\n-\t\t    val = bfd_getl16 (buf + 1);\n+\t\t    if (len < 2)\n+\t\t      break;\n+\t\t    val = bfd_getl16 (buf);\n \t\t    fprintf (file, _(\"term_w: 0x%04x\"), val);\n \t\t    pc += val;\n \t\t    fprintf (file, _(\"    pc: 0x%08x\\n\"), pc);\n-\t\t    cmdlen = 3;\n+\t\t    cmdlen = 2;\n \t\t    break;\n \t\t  default:\n \t\t    if (cmd <= 0)\n@@ -7574,13 +7717,13 @@ evax_bfd_print_dst (struct bfd *abfd, unsigned int dst_size, FILE *file)\n \t\t\t/* xgettext:c-format */\n \t\t\tfprintf (file, _(\"    pc: 0x%08x line: %5u\\n\"),\n \t\t\t\t pc, line);\n-\t\t\tcmdlen = 1;\n+\t\t\tcmdlen = 0;\n \t\t      }\n \t\t    else\n \t\t      fprintf (file, _(\"    *unhandled* cmd %u\\n\"), cmd);\n \t\t    break;\n \t\t  }\n-\t\tif (cmdlen == 0)\n+\t\tif (cmdlen < 0)\n \t\t  break;\n \t\tlen -= cmdlen;\n \t\tbuf += cmdlen;\n@@ -7596,16 +7739,20 @@ evax_bfd_print_dst (struct bfd *abfd, unsigned int dst_size, FILE *file)\n \n \t    while (len > 0)\n \t      {\n-\t\tsigned char cmd = buf[0];\n-\t\tunsigned char cmdlen = 0;\n+\t\tint cmd = *buf++;\n+\t\tint cmdlen = -1;\n \n+\t\tlen--;\n \t\tswitch (cmd)\n \t\t  {\n \t\t  case DST__K_SRC_DECLFILE:\n \t\t    {\n-\t\t      struct vms_dst_src_decl_src *src = (void *)(buf + 1);\n+\t\t      struct vms_dst_src_decl_src *src = (void *) buf;\n \t\t      const char *name;\n+\t\t      int nlen;\n \n+\t\t      if (len < sizeof (*src))\n+\t\t\tbreak;\n \t\t      /* xgettext:c-format */\n \t\t      fprintf (file, _(\"   declfile: len: %u, flags: %u, \"\n \t\t\t\t       \"fileid: %u\\n\"),\n@@ -7620,58 +7767,80 @@ evax_bfd_print_dst (struct bfd *abfd, unsigned int dst_size, FILE *file)\n \t\t\t       (unsigned)bfd_getl32 (src->rms_ebk),\n \t\t\t       (unsigned)bfd_getl16 (src->rms_ffb),\n \t\t\t       src->rms_rfo);\n-\t\t      name = (const char *)buf + 1 + sizeof (*src);\n+\t\t      if (src->length > len || src->length <= sizeof (*src))\n+\t\t\tbreak;\n+\t\t      nlen = src->length - sizeof (*src) - 1;\n+\t\t      name = (const char *) buf + sizeof (*src);\n \t\t      fprintf (file, _(\"   filename   : %.*s\\n\"),\n-\t\t\t       name[0], name + 1);\n+\t\t\t       name[0] > nlen ? nlen : name[0], name + 1);\n+\t\t      if (name[0] >= nlen)\n+\t\t\tbreak;\n+\t\t      nlen -= name[0] + 1;\n \t\t      name += name[0] + 1;\n \t\t      fprintf (file, _(\"   module name: %.*s\\n\"),\n-\t\t\t       name[0], name + 1);\n-\t\t      cmdlen = 2 + src->length;\n+\t\t\t       name[0] > nlen ? nlen : name[0], name + 1);\n+\t\t      if (name[0] > nlen)\n+\t\t\tbreak;\n+\t\t      cmdlen = src->length;\n \t\t    }\n \t\t    break;\n \t\t  case DST__K_SRC_SETFILE:\n+\t\t    if (len < 2)\n+\t\t      break;\n \t\t    fprintf (file, _(\"   setfile %u\\n\"),\n-\t\t\t     (unsigned)bfd_getl16 (buf + 1));\n-\t\t    cmdlen = 3;\n+\t\t\t     (unsigned) bfd_getl16 (buf));\n+\t\t    cmdlen = 2;\n \t\t    break;\n \t\t  case DST__K_SRC_SETREC_W:\n+\t\t    if (len < 2)\n+\t\t      break;\n \t\t    fprintf (file, _(\"   setrec %u\\n\"),\n-\t\t\t     (unsigned)bfd_getl16 (buf + 1));\n-\t\t    cmdlen = 3;\n+\t\t\t     (unsigned) bfd_getl16 (buf));\n+\t\t    cmdlen = 2;\n \t\t    break;\n \t\t  case DST__K_SRC_SETREC_L:\n+\t\t    if (len < 4)\n+\t\t      break;\n \t\t    fprintf (file, _(\"   setrec %u\\n\"),\n-\t\t\t     (unsigned)bfd_getl32 (buf + 1));\n-\t\t    cmdlen = 5;\n+\t\t\t     (unsigned) bfd_getl32 (buf));\n+\t\t    cmdlen = 4;\n \t\t    break;\n \t\t  case DST__K_SRC_SETLNUM_W:\n+\t\t    if (len < 2)\n+\t\t      break;\n \t\t    fprintf (file, _(\"   setlnum %u\\n\"),\n-\t\t\t     (unsigned)bfd_getl16 (buf + 1));\n-\t\t    cmdlen = 3;\n+\t\t\t     (unsigned) bfd_getl16 (buf));\n+\t\t    cmdlen = 2;\n \t\t    break;\n \t\t  case DST__K_SRC_SETLNUM_L:\n+\t\t    if (len < 4)\n+\t\t      break;\n \t\t    fprintf (file, _(\"   setlnum %u\\n\"),\n-\t\t\t     (unsigned)bfd_getl32 (buf + 1));\n-\t\t    cmdlen = 5;\n+\t\t\t     (unsigned) bfd_getl32 (buf));\n+\t\t    cmdlen = 4;\n \t\t    break;\n \t\t  case DST__K_SRC_DEFLINES_W:\n+\t\t    if (len < 2)\n+\t\t      break;\n \t\t    fprintf (file, _(\"   deflines %u\\n\"),\n-\t\t\t     (unsigned)bfd_getl16 (buf + 1));\n-\t\t    cmdlen = 3;\n+\t\t\t     (unsigned) bfd_getl16 (buf));\n+\t\t    cmdlen = 2;\n \t\t    break;\n \t\t  case DST__K_SRC_DEFLINES_B:\n-\t\t    fprintf (file, _(\"   deflines %u\\n\"), buf[1]);\n-\t\t    cmdlen = 2;\n+\t\t    if (len < 1)\n+\t\t      break;\n+\t\t    fprintf (file, _(\"   deflines %u\\n\"), *buf);\n+\t\t    cmdlen = 1;\n \t\t    break;\n \t\t  case DST__K_SRC_FORMFEED:\n \t\t    fprintf (file, _(\"   formfeed\\n\"));\n-\t\t    cmdlen = 1;\n+\t\t    cmdlen = 0;\n \t\t    break;\n \t\t  default:\n \t\t    fprintf (file, _(\"   *unhandled* cmd %u\\n\"), cmd);\n \t\t    break;\n \t\t  }\n-\t\tif (cmdlen == 0)\n+\t\tif (cmdlen < 0)\n \t\t  break;\n \t\tlen -= cmdlen;\n \t\tbuf += cmdlen;"
    }
  ]
}