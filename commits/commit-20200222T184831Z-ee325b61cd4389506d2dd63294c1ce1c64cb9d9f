{
  "sha": "ee325b61cd4389506d2dd63294c1ce1c64cb9d9f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWUzMjViNjFjZDQzODk1MDZkMmRkNjMyOTRjMWNlMWM2NGNiOWQ5Zg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T18:48:26Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T18:48:31Z"
    },
    "message": "Add the \"tui new-layout\" command\n\nThis adds a new command, \"tui new-layout\".  This command can be used\nto define a new TUI window layout.\n\nThe command is used like:\n\n(gdb) tui new-layout name src 1 regs 1 status 0 cmd 1\n\nThe first argument is the name of the layout.  In this example, it is\n\"name\", so the new layout could be seen by \"layout name\".\n\nSubsequent arguments come in pairs, where the first item in a pair is\nthe name of a window, and the second item in a pair is the window's\nweight.  A weight is just an integer -- a window's allocated size is\nproportional to the total of the weights given.  So, in the above\nexample, all windows will have the same size (the status windows's\nweight does not matter, because it has fixed height).\n\ngdb/ChangeLog\n2020-02-22  Tom Tromey  <tom@tromey.com>\n\n\t* NEWS: Add \"tui new-layout\" item.\n\t* tui/tui-layout.c (add_layout_command): Return cmd_list_element.\n\tAdd new-layout command to help text.\n\t(validate_window_name): New function.\n\t(tui_new_layout_command): New function.\n\t(_initialize_tui_layout): Register \"new-layout\".\n\t(tui_layout_window::specification): New method.\n\t(tui_layout_window::specification): New method.\n\t* tui/tui-layout.h (class tui_layout_base) <specification>: New\n\tmethod.\n\t(class tui_layout_window) <specification>: New method.\n\t(class tui_layout_split) <specification>: New method.\n\ngdb/doc/ChangeLog\n2020-02-22  Tom Tromey  <tom@tromey.com>\n\n\t* gdb.texinfo (TUI Overview): Mention user layouts.\n\t(TUI Commands): Document \"tui new-layout\".\n\ngdb/testsuite/ChangeLog\n2020-02-22  Tom Tromey  <tom@tromey.com>\n\n\t* gdb.tui/new-layout.exp: New file.\n\nChange-Id: Id7c3ace20ab1e8924f8f4ad788f40210f58a5c05",
    "tree": {
      "sha": "1040c49dcd59346665afe89f07cfc62d2d0317ad",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1040c49dcd59346665afe89f07cfc62d2d0317ad"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "416eb92d84ac0bc4b8aba137789f52d1f987cd54",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/416eb92d84ac0bc4b8aba137789f52d1f987cd54",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/416eb92d84ac0bc4b8aba137789f52d1f987cd54"
    }
  ],
  "stats": {
    "total": 231,
    "additions": 225,
    "deletions": 6
  },
  "files": [
    {
      "sha": "ed2f3583eba5545f1727ae861f56aa1031a15016",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ee325b61cd4389506d2dd63294c1ce1c64cb9d9f",
      "patch": "@@ -1,3 +1,18 @@\n+2020-02-22  Tom Tromey  <tom@tromey.com>\n+\n+\t* NEWS: Add \"tui new-layout\" item.\n+\t* tui/tui-layout.c (add_layout_command): Return cmd_list_element.\n+\tAdd new-layout command to help text.\n+\t(validate_window_name): New function.\n+\t(tui_new_layout_command): New function.\n+\t(_initialize_tui_layout): Register \"new-layout\".\n+\t(tui_layout_window::specification): New method.\n+\t(tui_layout_window::specification): New method.\n+\t* tui/tui-layout.h (class tui_layout_base) <specification>: New\n+\tmethod.\n+\t(class tui_layout_window) <specification>: New method.\n+\t(class tui_layout_split) <specification>: New method.\n+\n 2020-02-22  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui.c (tui_enable): Call tui_set_initial_layout."
    },
    {
      "sha": "830653f555c8f41f22953dc6b89eadb740e5f49d",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=ee325b61cd4389506d2dd63294c1ce1c64cb9d9f",
      "patch": "@@ -30,6 +30,10 @@ show exec-file-mismatch -- Show exec-file-mismatch handling (ask|warn|off).\n   whether to load the process executable file; if 'warn', just display\n   a warning; if 'off', don't attempt to detect a mismatch.\n \n+tui new-layout NAME WINDOW WEIGHT [WINDOW WEIGHT]...\n+  Define a new TUI layout, specifying its name and the windows that\n+  will be displayed.\n+\n * New targets\n \n GNU/Linux/RISC-V (gdbserver)\triscv*-*-linux*"
    },
    {
      "sha": "99f2d9397604ec9d0205180a4fa08a1a06a09a4e",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=ee325b61cd4389506d2dd63294c1ce1c64cb9d9f",
      "patch": "@@ -1,3 +1,8 @@\n+2020-02-22  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdb.texinfo (TUI Overview): Mention user layouts.\n+\t(TUI Commands): Document \"tui new-layout\".\n+\n 2020-01-26  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.texinfo (M68K Features): Document floating-point feature"
    },
    {
      "sha": "c2617386869651f92893f1ecee16808a45fbbcd9",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 34,
      "deletions": 3,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=ee325b61cd4389506d2dd63294c1ce1c64cb9d9f",
      "patch": "@@ -27755,6 +27755,8 @@ source and registers, or\n assembly and registers.\n @end itemize\n \n+These are the standard layouts, but other layouts can be defined.\n+\n A status line above the command window shows the following information:\n \n @table @emph\n@@ -27991,11 +27993,40 @@ Disable TUI mode, returning to the console interpreter.\n @kindex info win\n List and give the size of all displayed windows.\n \n+@item tui new-layout @var{name} @var{window} @var{weight} @r{[}@var{window} @var{weight}@dots{}@r{]}\n+@kindex tui new-layout\n+Create a new TUI layout.  The new layout will be named @var{name}, and\n+can be accessed using the @code{layout} command (see below).\n+\n+Each @var{window} parameter is the name of a window to display.  The\n+windows will be displayed from top to bottom in the order listed.  The\n+names of the windows are the same as the ones given to the\n+@code{focus} command (see below); additional, the @code{status}\n+window can be specified.\n+\n+Each @var{weight} is an integer.  It is the weight of this window\n+relative to all the other windows in the layout.  These numbers are\n+used to calculate how much of the screen is given to each window.\n+\n+For example:\n+\n+@example\n+(gdb) tui new-layout example src 1 regs 1 status 0 cmd 1\n+@end example\n+\n+Here, the new layout is called @samp{example}.  It shows the source\n+and register windows, followed by the status window, and then finally\n+the command window.  The non-status windows all have the same weight,\n+so the terminal will be split into three roughly equal sections.\n+\n @item layout @var{name}\n @kindex layout\n-Changes which TUI windows are displayed.  In each layout the command\n-window is always displayed, the @var{name} parameter controls which\n-additional windows are displayed, and can be any of the following:\n+Changes which TUI windows are displayed.  The @var{name} parameter\n+controls which layout is shown.  It can be either one of the built-in\n+layout names, or the name of a layout defined by the user using\n+@code{tui new-layout}.\n+\n+The built-in layouts are as follows:\n \n @table @code\n @item next"
    },
    {
      "sha": "c7270b965b6e6b026b63a516cf1aee3fd48c830d",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=ee325b61cd4389506d2dd63294c1ce1c64cb9d9f",
      "patch": "@@ -1,3 +1,7 @@\n+2020-02-22  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdb.tui/new-layout.exp: New file.\n+\n 2020-02-22  Tom Tromey  <tom@tromey.com>\n \n \t* gdb.rust/rust-style.rs: New file."
    },
    {
      "sha": "2efc1728bfad3df1c21f16082c1cd1b79caa8df1",
      "filename": "gdb/testsuite/gdb.tui/new-layout.exp",
      "status": "added",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f/gdb/testsuite/gdb.tui/new-layout.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f/gdb/testsuite/gdb.tui/new-layout.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.tui/new-layout.exp?ref=ee325b61cd4389506d2dd63294c1ce1c64cb9d9f",
      "patch": "@@ -0,0 +1,54 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test \"tui new-layout\".\n+\n+load_lib \"tuiterm.exp\"\n+\n+standard_testfile tui-layout.c\n+\n+if {[build_executable \"failed to prepare\" ${testfile} ${srcfile}] == -1} {\n+    return -1\n+}\n+\n+Term::clean_restart 24 80 $testfile\n+\n+gdb_test \"tui new-layout\" \\\n+    \"No layout name specified\"\n+gdb_test \"tui new-layout example\" \\\n+    \"New layout does not contain any windows\"\n+gdb_test \"tui new-layout example zzq\" \\\n+    \"Unknown window \\\"zzq\\\"\"\n+gdb_test \"tui new-layout example src 1 src 1\" \\\n+    \"Window \\\"src\\\" seen twice in layout\"\n+gdb_test \"tui new-layout example src 1\" \\\n+    \"New layout does not contain the \\\"cmd\\\" window\"\n+\n+gdb_test_no_output \"tui new-layout example asm 1 status 0 cmd 1\"\n+\n+gdb_test \"help layout example\" \\\n+    \"Apply the \\\"example\\\" layout.*tui new-layout example asm 1 status 0 cmd 1\"\n+\n+if {![Term::enter_tui]} {\n+    unsupported \"TUI not supported\"\n+}\n+\n+set text [Term::get_all_lines]\n+gdb_assert {![string match \"No Source Available\" $text]} \\\n+    \"initial source listing\"\n+\n+Term::command \"layout example\"\n+Term::check_contents \"example layout shows assembly\" \\\n+    \"No Assembly Available\""
    },
    {
      "sha": "8f5dd6ec516c284b21a61b436acd2608783dda29",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 100,
      "deletions": 3,
      "changes": 103,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=ee325b61cd4389506d2dd63294c1ce1c64cb9d9f",
      "patch": "@@ -27,7 +27,9 @@\n #include \"source.h\"\n #include \"cli/cli-cmds.h\"\n #include \"cli/cli-decode.h\"\n+#include \"cli/cli-utils.h\"\n #include <ctype.h>\n+#include <unordered_set>\n \n #include \"tui/tui.h\"\n #include \"tui/tui-command.h\"\n@@ -397,6 +399,14 @@ tui_layout_window::replace_window (const char *name, const char *new_window)\n \n /* See tui-layout.h.  */\n \n+void\n+tui_layout_window::specification (ui_file *output)\n+{\n+  fputs_unfiltered (get_name (), output);\n+}\n+\n+/* See tui-layout.h.  */\n+\n tui_layout_split *\n tui_layout_split::add_split (int weight)\n {\n@@ -698,6 +708,22 @@ tui_layout_split::replace_window (const char *name, const char *new_window)\n     item.layout->replace_window (name, new_window);\n }\n \n+/* See tui-layout.h.  */\n+\n+void\n+tui_layout_split::specification (ui_file *output)\n+{\n+  bool first = true;\n+  for (auto &item : m_splits)\n+    {\n+      if (!first)\n+\tfputs_unfiltered (\" \", output);\n+      first = false;\n+      item.layout->specification (output);\n+      fprintf_unfiltered (output, \" %d\", item.weight);\n+    }\n+}\n+\n /* Destroy the layout associated with SELF.  */\n \n static void\n@@ -714,13 +740,19 @@ static struct cmd_list_element *layout_list;\n \n /* Add a \"layout\" command with name NAME that switches to LAYOUT.  */\n \n-static void\n+static struct cmd_list_element *\n add_layout_command (const char *name, tui_layout_split *layout)\n {\n   struct cmd_list_element *cmd;\n \n-  gdb::unique_xmalloc_ptr<char> doc (xstrprintf (_(\"Apply the \\\"%s\\\" layout\"),\n-\t\t\t\t\t\t name));\n+  string_file spec;\n+  layout->specification (&spec);\n+\n+  gdb::unique_xmalloc_ptr<char> doc\n+    (xstrprintf (_(\"Apply the \\\"%s\\\" layout.\\n\\\n+This layout was created using:\\n\\\n+  tui new-layout %s %s\"),\n+\t\t name, name, spec.c_str ()));\n \n   cmd = add_cmd (name, class_tui, nullptr, doc.get (), &layout_list);\n   set_cmd_context (cmd, layout);\n@@ -730,6 +762,8 @@ add_layout_command (const char *name, tui_layout_split *layout)\n   cmd->doc_allocated = 1;\n   doc.release ();\n   layouts.emplace_back (layout);\n+\n+  return cmd;\n }\n \n /* Initialize the standard layouts.  */\n@@ -777,6 +811,59 @@ initialize_layouts ()\n \n \f\n \n+/* A helper function that returns true if NAME is the name of an\n+   available window.  */\n+\n+static bool\n+validate_window_name (const std::string &name)\n+{\n+  return (name == \"src\" || name == \"cmd\"\n+\t  || name == \"regs\" || name == \"asm\"\n+\t  || name == \"status\");\n+}\n+\n+/* Implementation of the \"tui new-layout\" command.  */\n+\n+static void\n+tui_new_layout_command (const char *spec, int from_tty)\n+{\n+  std::string new_name = extract_arg (&spec);\n+  if (new_name.empty ())\n+    error (_(\"No layout name specified\"));\n+  if (new_name[0] == '-')\n+    error (_(\"Layout name cannot start with '-'\"));\n+\n+  std::unique_ptr<tui_layout_split> new_layout (new tui_layout_split);\n+  std::unordered_set<std::string> seen_windows;\n+  while (true)\n+    {\n+      std::string name = extract_arg (&spec);\n+      if (name.empty ())\n+\tbreak;\n+      if (!validate_window_name (name))\n+\terror (_(\"Unknown window \\\"%s\\\"\"), name.c_str ());\n+      if (seen_windows.find (name) != seen_windows.end ())\n+\terror (_(\"Window \\\"%s\\\" seen twice in layout\"), name.c_str ());\n+      ULONGEST weight = get_ulongest (&spec);\n+      if ((int) weight != weight)\n+\terror (_(\"Weight out of range: %s\"), pulongest (weight));\n+      new_layout->add_window (name.c_str (), weight);\n+      seen_windows.insert (name);\n+    }\n+  if (seen_windows.empty ())\n+    error (_(\"New layout does not contain any windows\"));\n+  if (seen_windows.find (\"cmd\") == seen_windows.end ())\n+    error (_(\"New layout does not contain the \\\"cmd\\\" window\"));\n+\n+  gdb::unique_xmalloc_ptr<char> cmd_name\n+    = make_unique_xstrdup (new_name.c_str ());\n+  struct cmd_list_element *cmd\n+    = add_layout_command (cmd_name.get (), new_layout.get ());\n+  cmd->name_allocated = 1;\n+  cmd_name.release ();\n+  new_layout.release ();\n+}\n+\n /* Base command for \"layout\".  */\n \n static void\n@@ -807,5 +894,15 @@ Usage: layout prev | next | LAYOUT-NAME\"),\n \t   _(\"Apply the TUI register layout\"),\n \t   &layout_list);\n \n+  add_cmd (\"new-layout\", class_tui, tui_new_layout_command,\n+\t   _(\"Create a new TUI layout.\\n\\\n+Usage: tui new-layout NAME WINDOW WEIGHT [WINDOW WEIGHT]...\\n\\\n+Create a new TUI layout.  The new layout will be named NAME,\\n\\\n+and can be accessed using \\\"layout NAME\\\".\\n\\\n+The windows will be displayed in the specified order.\\n\\\n+Each WEIGHT is an integer, which holds the relative size\\n\\\n+to be allocated to the window.\"),\n+\t   tui_get_cmd_list ());\n+\n   initialize_layouts ();\n }"
    },
    {
      "sha": "c2249a783f87b5086d4fa51776c92b55d313aa5a",
      "filename": "gdb/tui/tui-layout.h",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f/gdb/tui/tui-layout.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f/gdb/tui/tui-layout.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.h?ref=ee325b61cd4389506d2dd63294c1ce1c64cb9d9f",
      "patch": "@@ -22,6 +22,8 @@\n #ifndef TUI_TUI_LAYOUT_H\n #define TUI_TUI_LAYOUT_H\n \n+#include \"ui-file.h\"\n+\n #include \"tui/tui.h\"\n #include \"tui/tui-data.h\"\n \n@@ -72,6 +74,9 @@ class tui_layout_base\n      NEW_WINDOW.  */\n   virtual void replace_window (const char *name, const char *new_window) = 0;\n \n+  /* Append the specification to this window to OUTPUT.  */\n+  virtual void specification (ui_file *output) = 0;\n+\n   /* The most recent space allocation.  */\n   int x = 0;\n   int y = 0;\n@@ -120,6 +125,8 @@ class tui_layout_window : public tui_layout_base\n \n   void replace_window (const char *name, const char *new_window) override;\n \n+  void specification (ui_file *output) override;\n+\n protected:\n \n   void get_sizes (int *min_height, int *max_height) override;\n@@ -167,6 +174,8 @@ class tui_layout_split : public tui_layout_base\n \n   void replace_window (const char *name, const char *new_window) override;\n \n+  void specification (ui_file *output) override;\n+\n protected:\n \n   void get_sizes (int *min_height, int *max_height) override;"
    }
  ]
}