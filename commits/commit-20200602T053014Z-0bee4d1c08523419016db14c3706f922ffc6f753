{
  "sha": "0bee4d1c08523419016db14c3706f922ffc6f753",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGJlZTRkMWMwODUyMzQxOTAxNmRiMTRjMzcwNmY5MjJmZmM2Zjc1Mw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-06-02T05:30:14Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-06-02T05:30:14Z"
    },
    "message": "binutils archive tests\n\nThere are a number of targets that don't support thin archives (*),\nand vms doesn't even support file name extensions other than .obj for\narchives containing object files.  This patch adjusts the testsuite\nto cater for the vms restriction, and reenables testing for non-ELF\nalpha targets.  That adds a few alpha-dec-vms fails and one\nalpha-linuxecoff fail but testsuite fails on those targets are nothing\nnew.\n\n(*) It might seem like they do if binutils is built with\n--enable-plugins but the plugin archive support is broken, causing the\nwrong type of archives to be created by ar for those targets.\n\n\t* testsuite/binutils-all/ar.exp (obj): Set up object file name\n\textension.  Use throughout.  Don't completely exclude non-ELF\n\talpha targets.  Run long_filenames test for tic30.  Exclude thin\n\tarchive tests for aix, ecoff and vms.\n\t* estsuite/binutils-all/objdump.exp (obj): Set up object file name\n\textension.  Use throughout.  Don't exclude non-ELF alpha targets\n\tfrom \"bintest.a\".",
    "tree": {
      "sha": "691a31aefbf24cf6266b9d9f230f4f96011c9bb3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/691a31aefbf24cf6266b9d9f230f4f96011c9bb3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0bee4d1c08523419016db14c3706f922ffc6f753",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0bee4d1c08523419016db14c3706f922ffc6f753",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0bee4d1c08523419016db14c3706f922ffc6f753",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0bee4d1c08523419016db14c3706f922ffc6f753/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "190eb1ddba41aad3a31edead9392473ae9d3bbe3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/190eb1ddba41aad3a31edead9392473ae9d3bbe3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/190eb1ddba41aad3a31edead9392473ae9d3bbe3"
    }
  ],
  "stats": {
    "total": 240,
    "additions": 135,
    "deletions": 105
  },
  "files": [
    {
      "sha": "7eb900935fa7df981a84315baacfa5d383c4bc0d",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0bee4d1c08523419016db14c3706f922ffc6f753/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0bee4d1c08523419016db14c3706f922ffc6f753/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=0bee4d1c08523419016db14c3706f922ffc6f753",
      "patch": "@@ -1,3 +1,13 @@\n+2020-06-02  Alan Modra  <amodra@gmail.com>\n+\n+\t* testsuite/binutils-all/ar.exp (obj): Set up object file name\n+\textension.  Use throughout.  Don't completely exclude non-ELF\n+\talpha targets.  Run long_filenames test for tic30.  Exclude thin\n+\tarchive tests for aix, ecoff and vms.\n+\t* estsuite/binutils-all/objdump.exp (obj): Set up object file name\n+\textension.  Use throughout.  Don't exclude non-ELF alpha targets\n+\tfrom \"bintest.a\".\n+\n 2020-05-28  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* MAINTAINERS (Xtensa): Add myself as maintainer."
    },
    {
      "sha": "86827814d79e9ee185356dbc11fcc0f6db069cef",
      "filename": "binutils/testsuite/binutils-all/ar.exp",
      "status": "modified",
      "additions": 71,
      "deletions": 54,
      "changes": 125,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0bee4d1c08523419016db14c3706f922ffc6f753/binutils/testsuite/binutils-all/ar.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0bee4d1c08523419016db14c3706f922ffc6f753/binutils/testsuite/binutils-all/ar.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/ar.exp?ref=0bee4d1c08523419016db14c3706f922ffc6f753",
      "patch": "@@ -26,8 +26,9 @@ if ![is_remote host] {\n     }\n }\n \n-if { [istarget \"alpha-*-*\"] && ![is_elf_format] } then {\n-    return\n+set obj o\n+if { [istarget \"*-*-vms\"] } then {\n+    set obj obj\n }\n \n # send_user \"Version [binutil_version $AR]\"\n@@ -189,21 +190,22 @@ proc symbol_table { } {\n     global NM\n     global srcdir\n     global subdir\n+    global obj\n \n     set testname \"ar symbol table\"\n \n-    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.o] {\n+    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.${obj}] {\n \tunresolved $testname\n \treturn\n     }\n \n     if [is_remote host] {\n \tset archive artest.a\n-\tset objfile [remote_download host tmpdir/bintest.o]\n+\tset objfile [remote_download host tmpdir/bintest.${obj}]\n \tremote_file host delete $archive\n     } else {\n \tset archive tmpdir/artest.a\n-\tset objfile tmpdir/bintest.o\n+\tset objfile tmpdir/bintest.${obj}\n     }\n \n     remote_file build delete tmpdir/artest.a\n@@ -215,12 +217,12 @@ proc symbol_table { } {\n     }\n \n     set got [binutils_run $NM \"--print-armap $archive\"]\n-    if { ![string match \"*text_symbol in bintest.o*\" $got] \\\n-\t || ![string match \"*data_symbol in bintest.o*\" $got] \\\n-\t || ![string match \"*common_symbol in bintest.o*\" $got] \\\n-\t || [string match \"*static_text_symbol in bintest.o*\" $got] \\\n-\t || [string match \"*static_data_symbol in bintest.o*\" $got] \\\n-\t || [string match \"*external_symbol in bintest.o*\" $got] } {\n+    if { ![string match \"*text_symbol in bintest.${obj}*\" $got] \\\n+\t || ![string match \"*data_symbol in bintest.${obj}*\" $got] \\\n+\t || ![string match \"*common_symbol in bintest.${obj}*\" $got] \\\n+\t || [string match \"*static_text_symbol in bintest.${obj}*\" $got] \\\n+\t || [string match \"*static_data_symbol in bintest.${obj}*\" $got] \\\n+\t || [string match \"*external_symbol in bintest.${obj}*\" $got] } {\n \tfail $testname\n \treturn\n     }\n@@ -237,21 +239,22 @@ proc thin_archive { bfdtests } {\n     global srcdir\n     global subdir\n     global base_dir\n+    global obj\n \n     set testname \"ar thin archive\"\n \n-    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.o] {\n+    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.${obj}] {\n \tunresolved $testname\n \treturn\n     }\n \n     if [is_remote host] {\n \tset archive artest.a\n-\tset objfile [remote_download host tmpdir/bintest.o]\n+\tset objfile [remote_download host tmpdir/bintest.${obj}]\n \tremote_file host delete $archive\n     } else {\n \tset archive tmpdir/artest.a\n-\tset objfile tmpdir/bintest.o\n+\tset objfile tmpdir/bintest.${obj}\n     }\n \n     remote_file build delete tmpdir/artest.a\n@@ -272,12 +275,12 @@ proc thin_archive { bfdtests } {\n     }\n \n     set got [binutils_run $NM \"--print-armap $archive\"]\n-    if { ![string match \"*text_symbol in *bintest.o*\" $got] \\\n-\t || ![string match \"*data_symbol in *bintest.o*\" $got] \\\n-\t || ![string match \"*common_symbol in *bintest.o*\" $got] \\\n-\t || [string match \"*static_text_symbol in *bintest.o*\" $got] \\\n-\t || [string match \"*static_data_symbol in *bintest.o*\" $got] \\\n-\t || [string match \"*external_symbol in *bintest.o*\" $got] } {\n+    if { ![string match \"*text_symbol in *bintest.${obj}*\" $got] \\\n+\t || ![string match \"*data_symbol in *bintest.${obj}*\" $got] \\\n+\t || ![string match \"*common_symbol in *bintest.${obj}*\" $got] \\\n+\t || [string match \"*static_text_symbol in *bintest.${obj}*\" $got] \\\n+\t || [string match \"*static_data_symbol in *bintest.${obj}*\" $got] \\\n+\t || [string match \"*external_symbol in *bintest.${obj}*\" $got] } {\n \tfail $testname\n \treturn\n     }\n@@ -294,23 +297,24 @@ proc thin_archive_with_nested { bfdtests } {\n     global srcdir\n     global subdir\n     global base_dir\n+    global obj\n \n     set testname \"ar thin archive with nested archive\"\n \n-    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.o] {\n+    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.${obj}] {\n \tunresolved $testname\n \treturn\n     }\n \n     if [is_remote host] {\n \tset archive artest.a\n \tset archive2 artest2.a\n-\tset objfile [remote_download host tmpdir/bintest.o]\n+\tset objfile [remote_download host tmpdir/bintest.${obj}]\n \tremote_file host delete $archive\n     } else {\n \tset archive tmpdir/artest.a\n \tset archive2 tmpdir/artest2.a\n-\tset objfile tmpdir/bintest.o\n+\tset objfile tmpdir/bintest.${obj}\n     }\n \n     remote_file build delete tmpdir/artest.a\n@@ -346,12 +350,12 @@ proc thin_archive_with_nested { bfdtests } {\n     }\n \n     set got [binutils_run $NM \"--print-armap $archive\"]\n-    if { ![string match \"*text_symbol in *bintest.o*\" $got] \\\n-\t || ![string match \"*data_symbol in *bintest.o*\" $got] \\\n-\t || ![string match \"*common_symbol in *bintest.o*\" $got] \\\n-\t || [string match \"*static_text_symbol in *bintest.o*\" $got] \\\n-\t || [string match \"*static_data_symbol in *bintest.o*\" $got] \\\n-\t || [string match \"*external_symbol in *bintest.o*\" $got] } {\n+    if { ![string match \"*text_symbol in *bintest.${obj}*\" $got] \\\n+\t || ![string match \"*data_symbol in *bintest.${obj}*\" $got] \\\n+\t || ![string match \"*common_symbol in *bintest.${obj}*\" $got] \\\n+\t || [string match \"*static_text_symbol in *bintest.${obj}*\" $got] \\\n+\t || [string match \"*static_data_symbol in *bintest.${obj}*\" $got] \\\n+\t || [string match \"*external_symbol in *bintest.${obj}*\" $got] } {\n \tfail $testname\n \treturn\n     }\n@@ -366,21 +370,22 @@ proc argument_parsing { } {\n     global AS\n     global srcdir\n     global subdir\n+    global obj\n \n     set testname \"ar argument parsing\"\n \n-    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.o] {\n+    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.${obj}] {\n \tunresolved $testname\n \treturn\n     }\n \n     if [is_remote host] {\n \tset archive artest.a\n-\tset objfile [remote_download host tmpdir/bintest.o]\n+\tset objfile [remote_download host tmpdir/bintest.${obj}]\n \tremote_file host delete $archive\n     } else {\n \tset archive tmpdir/artest.a\n-\tset objfile tmpdir/bintest.o\n+\tset objfile tmpdir/bintest.${obj}\n     }\n \n     remote_file build delete tmpdir/artest.a\n@@ -402,21 +407,22 @@ proc deterministic_archive { } {\n     global NM\n     global srcdir\n     global subdir\n+    global obj\n \n     set testname \"ar deterministic archive\"\n \n-    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.o] {\n+    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.${obj}] {\n \tunresolved $testname\n \treturn\n     }\n \n     if [is_remote host] {\n \tset archive artest.a\n-\tset objfile [remote_download host tmpdir/bintest.o]\n+\tset objfile [remote_download host tmpdir/bintest.${obj}]\n \tremote_file host delete $archive\n     } else {\n \tset archive tmpdir/artest.a\n-\tset objfile tmpdir/bintest.o\n+\tset objfile tmpdir/bintest.${obj}\n     }\n \n     remote_file build delete tmpdir/artest.a\n@@ -430,13 +436,13 @@ proc deterministic_archive { } {\n     set got [binutils_run $AR \"tv $archive\"]\n     # This only checks the file mode and uid/gid.  We can't easily match\n     # date because it's printed with the user's timezone.\n-    if ![string match \"rw-r--r-- 0/0 *bintest.o*\" $got] {\n+    if ![string match \"rw-r--r-- 0/0 *bintest.${obj}*\" $got] {\n \tfail $testname\n \treturn\n     }\n \n     set got [binutils_run $AR \"tvO $archive\"]\n-    if ![string match \"rw-r--r-- 0/0 *bintest.o 0x*\" $got] {\n+    if ![string match \"rw-r--r-- 0/0 *bintest.${obj} 0x*\" $got] {\n \tfail $testname\n \treturn\n     }\n@@ -450,21 +456,22 @@ proc unique_symbol { } {\n     global NM\n     global srcdir\n     global subdir\n+    global obj\n \n     set testname \"ar unique symbol in archive\"\n \n-    if ![binutils_assemble $srcdir/$subdir/unique.s tmpdir/unique.o] {\n+    if ![binutils_assemble $srcdir/$subdir/unique.s tmpdir/unique.${obj}] {\n \tunresolved $testname\n \treturn\n     }\n \n     if [is_remote host] {\n \tset archive artest.a\n-\tset objfile [remote_download host tmpdir/unique.o]\n+\tset objfile [remote_download host tmpdir/unique.${obj}]\n \tremote_file host delete $archive\n     } else {\n \tset archive tmpdir/artest.a\n-\tset objfile tmpdir/unique.o\n+\tset objfile tmpdir/unique.${obj}\n     }\n \n     remote_file build delete tmpdir/artest.a\n@@ -476,7 +483,7 @@ proc unique_symbol { } {\n     }\n \n     set got [binutils_run $NM \"--print-armap $archive\"]\n-    if ![string match \"*foo in *unique.o*\" $got] {\n+    if ![string match \"*foo in *unique.${obj}*\" $got] {\n \tfail $testname\n \treturn\n     }\n@@ -491,21 +498,22 @@ proc delete_an_element { } {\n     global AS\n     global srcdir\n     global subdir\n+    global obj\n \n     set testname \"ar deleting an element\"\n \n-    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.o] {\n+    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.${obj}] {\n \tunresolved $testname\n \treturn\n     }\n \n     if [is_remote host] {\n \tset archive artest.a\n-\tset objfile [remote_download host tmpdir/bintest.o]\n+\tset objfile [remote_download host tmpdir/bintest.${obj}]\n \tremote_file host delete $archive\n     } else {\n \tset archive tmpdir/artest.a\n-\tset objfile tmpdir/bintest.o\n+\tset objfile tmpdir/bintest.${obj}\n     }\n \n     remote_file build delete tmpdir/artest.a\n@@ -532,21 +540,22 @@ proc move_an_element { } {\n     global AS\n     global srcdir\n     global subdir\n+    global obj\n \n     set testname \"ar moving an element\"\n \n-    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.o] {\n+    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.${obj}] {\n \tunresolved $testname\n \treturn\n     }\n \n     if [is_remote host] {\n \tset archive artest.a\n-\tset objfile [remote_download host tmpdir/bintest.o]\n+\tset objfile [remote_download host tmpdir/bintest.${obj}]\n \tremote_file host delete $archive\n     } else {\n \tset archive tmpdir/artest.a\n-\tset objfile tmpdir/bintest.o\n+\tset objfile tmpdir/bintest.${obj}\n     }\n \n     remote_file build delete tmpdir/artest.a\n@@ -612,21 +621,22 @@ proc extract_an_element { } {\n     global AS\n     global srcdir\n     global subdir\n+    global obj\n \n     set testname \"ar extracting an element\"\n \n-    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.o] {\n+    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.${obj}] {\n \tunresolved $testname\n \treturn\n     }\n \n     set archive artest.a\n \n     if [is_remote host] {\n-\tset objfile [remote_download host tmpdir/bintest.o]\n+\tset objfile [remote_download host tmpdir/bintest.${obj}]\n \tremote_file host delete $archive\n     } else {\n-\tset objfile tmpdir/bintest.o\n+\tset objfile tmpdir/bintest.${obj}\n     }\n \n     remote_file build delete $archive\n@@ -654,6 +664,7 @@ proc many_files { } {\n     global AS\n     global srcdir\n     global subdir\n+    global obj\n \n     set testname \"ar many files\"\n \n@@ -673,7 +684,7 @@ proc many_files { } {\n \tputs $ofd \" .long $i\"\n \tclose $ofd\n \n-\tset ofile \"tmpdir/d-$i.o\"\n+\tset ofile \"tmpdir/d-$i.${obj}\"\n \tif ![binutils_assemble $sfile $ofile] {\n \t    unresolved $testname\n \t    return\n@@ -710,12 +721,18 @@ proc many_files { } {\n # programs are built but not installed, running the testsuite on an\n # installed toolchain will produce ERRORs about missing bfdtest1 and\n # bfdtest2 executables.\n-if { ![istarget \"tic30-*-*\"] && [file exists $base_dir/bfdtest1] && [file exists $base_dir/bfdtest2] } {\n+if { [file exists $base_dir/bfdtest1] && [file exists $base_dir/bfdtest2] } {\n     set bfdtests [list bfdtest1 bfdtest2]\n \n     long_filenames $bfdtests\n-    thin_archive $bfdtests\n-    thin_archive_with_nested $bfdtests\n+\n+    # xcoff, ecoff, and vms archive support doesn't handle thin archives\n+    if { ![istarget \"*-*-aix*\"]\n+\t && ![istarget \"*-*-*ecoff\"]\n+\t && ![istarget \"*-*-vms\"] } {\n+\tthin_archive $bfdtests\n+\tthin_archive_with_nested $bfdtests\n+    }\n }\n \n symbol_table"
    },
    {
      "sha": "8d3c8df171de870677b787fd3b9780958db70119",
      "filename": "binutils/testsuite/binutils-all/objdump.exp",
      "status": "modified",
      "additions": 54,
      "deletions": 51,
      "changes": 105,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0bee4d1c08523419016db14c3706f922ffc6f753/binutils/testsuite/binutils-all/objdump.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0bee4d1c08523419016db14c3706f922ffc6f753/binutils/testsuite/binutils-all/objdump.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/objdump.exp?ref=0bee4d1c08523419016db14c3706f922ffc6f753",
      "patch": "@@ -58,38 +58,40 @@ if [regexp $want $got] then {\n     fail \"objdump -i\"\n }\n \n-# The remaining tests require a test file.\n+set obj o\n+if { [istarget \"*-*-vms\"] } then {\n+    set obj obj\n+}\n \n+# The remaining tests require a test file.\n \n-if {![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.o]} then {\n+if {![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.${obj}]} then {\n     fail \"objdump (assembling bintest.s)\"\n     return\n }\n-if {![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest2.o]} then {\n+if {![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest2.${obj}]} then {\n     fail \"objdump (assembling)\"\n     return\n }\n if [is_remote host] {\n-    set testfile [remote_download host tmpdir/bintest.o]\n-    set testfile2 [remote_download host tmpdir/bintest2.o]\n+    set testfile [remote_download host tmpdir/bintest.${obj}]\n+    set testfile2 [remote_download host tmpdir/bintest2.${obj}]\n } else {\n-    set testfile tmpdir/bintest.o\n-    set testfile2 tmpdir/bintest2.o\n+    set testfile tmpdir/bintest.${obj}\n+    set testfile2 tmpdir/bintest2.${obj}\n }\n \n # $testarchive exists only if it is supported.\n set testarchive tmpdir/bintest.a\n remote_file host file delete $testarchive\n-if { ![istarget \"alpha-*-*\"] || [is_elf_format] } then {\n-    set got [binutils_run $AR \"rc tmpdir/bintest.a $testfile2\"]\n-    if ![string match \"\" $got] then {\n-\tfail \"bintest.a\"\n-\tremote_file host delete tmpdir/bintest.a\n-    } elseif [is_remote host] {\n-\tset testarchive [remote_download host tmpdir/bintest.a]\n-    }\n-    remote_file host delete tmpdir/bintest2.o\n+set got [binutils_run $AR \"rc tmpdir/bintest.a $testfile2\"]\n+if ![string match \"\" $got] then {\n+    fail \"bintest.a\"\n+    remote_file host delete tmpdir/bintest.a\n+} elseif [is_remote host] {\n+    set testarchive [remote_download host tmpdir/bintest.a]\n }\n+remote_file host delete tmpdir/bintest2.${obj}\n \n # Test objdump -f\n \n@@ -100,7 +102,7 @@ proc test_objdump_f { testfile dumpfile } {\n \n     set got [binutils_run $OBJDUMP \"$OBJDUMPFLAGS -f $testfile\"]\n \n-    set want \"$dumpfile:\\[ \t\\]*file format.*architecture:\\[ \t\\]*${cpus_regex}.*HAS_RELOC.*HAS_SYMS\"\n+    set want \"${dumpfile}.*:\\[ \t\\]*file format.*architecture:\\[ \t\\]*${cpus_regex}.*HAS_RELOC.*HAS_SYMS\"\n \n     if ![regexp $want $got] then {\n \tfail \"objdump -f ($testfile, $dumpfile)\"\n@@ -111,7 +113,7 @@ proc test_objdump_f { testfile dumpfile } {\n \n test_objdump_f $testfile $testfile\n if { [ remote_file host exists $testarchive ] } then {\n-    test_objdump_f $testarchive bintest2.o\n+    test_objdump_f $testarchive bintest2.${obj}\n }\n \n # Test objdump -h\n@@ -122,7 +124,7 @@ proc test_objdump_h { testfile dumpfile } {\n \n     set got [binutils_run $OBJDUMP \"$OBJDUMPFLAGS -h $testfile\"]\n \n-    set want \"$dumpfile:\\[ \t\\]*file format.*Sections.*\\[0-9\\]+\\[ \t\\]+\\[^ \t\\]*(text|TEXT|P|\\\\\\$CODE\\\\\\$)\\[^ \t\\]*\\[ \t\\]*(\\[0-9a-fA-F\\]+).*\\[0-9\\]+\\[ \t\\]+\\[^ \t\\]*(\\\\.data|DATA|D_1)\\[^ \t\\]*\\[ \t\\]*(\\[0-9a-fA-F\\]+)\"\n+    set want \"${dumpfile}.*:\\[ \t\\]*file format.*Sections.*\\[0-9\\]+\\[ \t\\]+\\[^ \t\\]*(text|TEXT|P|\\\\\\$CODE\\\\\\$)\\[^ \t\\]*\\[ \t\\]*(\\[0-9a-fA-F\\]+).*\\[0-9\\]+\\[ \t\\]+\\[^ \t\\]*(\\\\.data|DATA|D_1)\\[^ \t\\]*\\[ \t\\]*(\\[0-9a-fA-F\\]+)\"\n \n     if ![regexp $want $got all text_name text_size data_name data_size] then {\n \tfail \"objdump -h ($testfile, $dumpfile)\"\n@@ -152,7 +154,7 @@ proc test_objdump_h { testfile dumpfile } {\n \n test_objdump_h $testfile $testfile\n if { [ remote_file host exists $testarchive ] } then {\n-    test_objdump_h $testarchive bintest2.o\n+    test_objdump_h $testarchive bintest2.${obj}\n }\n \n # Test objdump -t\n@@ -192,7 +194,7 @@ proc test_objdump_r { testfile dumpfile } {\n \n     set got [binutils_run $OBJDUMP \"$OBJDUMPFLAGS -r $testfile\"]\n \n-    set want \"$dumpfile:\\[ \t\\]*file format.*RELOCATION RECORDS FOR \\\\\\[\\[^\\]\\]*(text|TEXT|P|\\\\\\$CODE\\\\\\$)\\[^\\]\\]*\\\\\\].*external_symbol\"\n+    set want \"${dumpfile}.*:\\[ \t\\]*file format.*RELOCATION RECORDS FOR \\\\\\[\\[^\\]\\]*(text|TEXT|P|\\\\\\$CODE\\\\\\$)\\[^\\]\\]*\\\\\\].*external_symbol\"\n \n     if [regexp $want $got] then {\n \tpass \"objdump -r ($testfile, $dumpfile)\"\n@@ -203,7 +205,7 @@ proc test_objdump_r { testfile dumpfile } {\n \n test_objdump_r $testfile $testfile\n if { [ remote_file host exists $testarchive ] } then {\n-    test_objdump_r $testarchive bintest2.o\n+    test_objdump_r $testarchive bintest2.${obj}\n }\n \n # Test objdump -d\n@@ -213,25 +215,25 @@ proc test_objdump_d { testfile dumpfile } {\n \n     set got [binutils_run $OBJDUMP \"$OBJDUMPFLAGS -d $testfile\"]\n \n-    set want \"$dumpfile:.*Disassembly of section\"\n+    set want \"${dumpfile}.*:.*Disassembly of section\"\n     if ![regexp $want $got] then {\n \tfail \"objdump -d $testfile: No disassembly title\"\n \treturn\n     }\n \n-    set want \"$dumpfile:.*00+0 <text_symbol>\"\n+    set want \"${dumpfile}.*:.*00+0 <text_symbol>\"\n     if ![regexp $want $got] then {\n \tfail \"objdump -d $testfile: Missing symbol name and address\"\n \treturn\n     }\n \n-    set want \"$dumpfile:.*00+. <text_symbol2>\"\n+    set want \"${dumpfile}.*:.*00+. <text_symbol2>\"\n     if ![regexp $want $got] then {\n \tfail \"objdump -d $testfile: Missing second symbol\"\n \treturn\n     }\n \n-    set want \"$dumpfile:.*00+. <text_symbol3>\"\n+    set want \"${dumpfile}.*:.*00+. <text_symbol3>\"\n     if ![regexp $want $got] then {\n \tfail \"objdump -d $testfile: Missing third symbol\"\n \treturn\n@@ -242,7 +244,7 @@ proc test_objdump_d { testfile dumpfile } {\n \n test_objdump_d $testfile $testfile\n if { [ remote_file host exists $testarchive ] } then {\n-    test_objdump_d $testarchive bintest2.o\n+    test_objdump_d $testarchive bintest2.${obj}\n }\n \n # Test objdump --disassemble=<symbol>\n@@ -357,13 +359,13 @@ proc test_objdump_d_non_func_sym { testfile dumpfile } {\n # all of func, and does not stop at the next symbol.\n if { [is_elf_format] } then {\n \n-    if {![binutils_assemble $srcdir/$subdir/disasm.s tmpdir/disasm.o]} then {\n+    if {![binutils_assemble $srcdir/$subdir/disasm.s tmpdir/disasm.${obj}]} then {\n \tfail \"objdump --disassemble=func (assembling disasm.s)\"\n     } else {\n \tif [is_remote host] {\n-\t    set elftestfile [remote_download host tmpdir/disasm.o]\n+\t    set elftestfile [remote_download host tmpdir/disasm.${obj}]\n \t} else {\n-\t    set elftestfile tmpdir/disasm.o\n+\t    set elftestfile tmpdir/disasm.${obj}\n \t}\n     \n \ttest_objdump_d_func_sym $elftestfile $elftestfile\n@@ -380,7 +382,7 @@ proc test_objdump_s { testfile dumpfile } {\n \n     set got [binutils_run $OBJDUMP \"$OBJDUMPFLAGS -s $testfile\"]\n \n-    set want \"$dumpfile:\\[ \t\\]*file format.*Contents.*(text|TEXT|P|\\\\\\$CODE\\\\\\$)\\[^0-9\\]*\\[ \t\\]*\\[0-9a-fA-F\\]*\\[ \t\\]*(00000001|01000000|00000100).*Contents.*(data|DATA|D_1)\\[^0-9\\]*\\[ \t\\]*\\[0-9a-fA-F\\]*\\[ \t\\]*(00000002|02000000|00000200)\"\n+    set want \"${dumpfile}.*:\\[ \t\\]*file format.*Contents.*(text|TEXT|P|\\\\\\$CODE\\\\\\$)\\[^0-9\\]*\\[ \t\\]*\\[0-9a-fA-F\\]*\\[ \t\\]*(00000001|01000000|00000100).*Contents.*(data|DATA|D_1)\\[^0-9\\]*\\[ \t\\]*\\[0-9a-fA-F\\]*\\[ \t\\]*(00000002|02000000|00000200)\"\n \n     if [regexp $want $got] then {\n \tpass \"objdump -s ($testfile, $dumpfile)\"\n@@ -391,20 +393,20 @@ proc test_objdump_s { testfile dumpfile } {\n \n test_objdump_s $testfile $testfile\n if { [ remote_file host exists $testarchive ] } then {\n-    test_objdump_s $testarchive bintest2.o\n+    test_objdump_s $testarchive bintest2.${obj}\n }\n \n # Test objdump -s on a file that contains a compressed .debug section\n \n if { ![is_elf_format] } then {\n     unsupported \"objdump compressed debug\"\n-} elseif { ![binutils_assemble $srcdir/$subdir/dw2-compressed.S tmpdir/dw2-compressed.o] } then {\n+} elseif { ![binutils_assemble $srcdir/$subdir/dw2-compressed.S tmpdir/dw2-compressed.${obj}] } then {\n     fail \"objdump compressed debug\"\n } else {\n     if [is_remote host] {\n-\tset compressed_testfile [remote_download host tmpdir/dw2-compressed.o]\n+\tset compressed_testfile [remote_download host tmpdir/dw2-compressed.${obj}]\n     } else {\n-\tset compressed_testfile tmpdir/dw2-compressed.o\n+\tset compressed_testfile tmpdir/dw2-compressed.${obj}\n     }\n \n     set got [remote_exec host \"$OBJDUMP $OBJDUMPFLAGS -s -j .zdebug_abbrev $compressed_testfile\" \"\" \"/dev/null\" \"objdump.out\"]\n@@ -455,14 +457,14 @@ if { ![is_elf_format]\n     } else {\n         set decodedline_testsrc $srcdir/$subdir/dw2-decodedline.S\n     }\n-    if { ![binutils_assemble $decodedline_testsrc tmpdir/dw2-decodedline.o] } then {\n+    if { ![binutils_assemble $decodedline_testsrc tmpdir/dw2-decodedline.${obj}] } then {\n \tfail \"objdump decoded line\"\n     }\n \n     if [is_remote host] {\n-\tset decodedline_testfile [remote_download host tmpdir/dw2-decodedline.o]\n+\tset decodedline_testfile [remote_download host tmpdir/dw2-decodedline.${obj}]\n     } else {\n-\tset decodedline_testfile tmpdir/dw2-decodedline.o\n+\tset decodedline_testfile tmpdir/dw2-decodedline.${obj}\n     }\n \n     set got [remote_exec host \"$OBJDUMP $OBJDUMPFLAGS -WL $decodedline_testfile\" \"\" \"/dev/null\" \"objdump.out\"]\n@@ -484,13 +486,13 @@ if { ![is_elf_format]\n \n if { ![is_elf_format] } then {\n     unsupported \"objdump debug_ranges test\"\n-} elseif { ![binutils_assemble $srcdir/$subdir/dw2-ranges.S tmpdir/dw2-ranges.o] } then {\n+} elseif { ![binutils_assemble $srcdir/$subdir/dw2-ranges.S tmpdir/dw2-ranges.${obj}] } then {\n     fail \"objdump debug_ranges test\"\n } else {\n     if [is_remote host] {\n-\tset ranges_testfile [remote_download host tmpdir/dw2-ranges.o]\n+\tset ranges_testfile [remote_download host tmpdir/dw2-ranges.${obj}]\n     } else {\n-\tset ranges_testfile tmpdir/dw2-ranges.o\n+\tset ranges_testfile tmpdir/dw2-ranges.${obj}\n     }\n \n     set got [remote_exec host \"$OBJDUMP $OBJDUMPFLAGS --dwarf=Ranges $ranges_testfile\" \"\" \"/dev/null\" \"objdump.out\"]\n@@ -594,14 +596,14 @@ if {[is_elf_format]} then {\n if { [is_elf_format] } then {\n     set testsrc $srcdir/$subdir/debuglink.s\n \n-    if { ![binutils_assemble $testsrc tmpdir/debuglink.o] } then {\n+    if { ![binutils_assemble $testsrc tmpdir/debuglink.${obj}] } then {\n \tfail \"objdump -Wk (reason: could not assemble source)\"\n     }\n \n     if [is_remote host] {\n-\tset testfile [remote_download host tmpdir/debuglink.o]\n+\tset testfile [remote_download host tmpdir/debuglink.${obj}]\n     } else {\n-\tset testfile tmpdir/debuglink.o\n+\tset testfile tmpdir/debuglink.${obj}\n     }\n \n     set got [remote_exec host \"$OBJDUMP $OBJDUMPFLAGS -Wk $testfile\" \"\" \"/dev/null\" \"objdump.out\"]\n@@ -627,10 +629,11 @@ proc test_follow_debuglink { options dumpfile } {\n     global srcdir\n     global subdir\n     global OBJDUMP\n+    global obj\n     \n     set test \"follow-debuglink ($options)\"\n \n-    if {![binutils_assemble $srcdir/$subdir/debuglink.s tmpdir/debuglink.o]} then {\n+    if {![binutils_assemble $srcdir/$subdir/debuglink.s tmpdir/debuglink.${obj}]} then {\n \tfail \"$test (reason: assemble first source file)\"\n \treturn\n     }\n@@ -641,10 +644,10 @@ proc test_follow_debuglink { options dumpfile } {\n     }\n \n     if ![is_remote host] {\n-\tset tempfile tmpdir/debuglink.o\n+\tset tempfile tmpdir/debuglink.${obj}\n     } else {\n \tset tempfile [remote_download host tmpdir/linkdebug.debug]\n-\tset tempfile [remote_download host tmpdir/debuglink.o]\n+\tset tempfile [remote_download host tmpdir/debuglink.${obj}]\n     }\n     \n     set got [remote_exec host \"$OBJDUMP $options $tempfile\" \"\" \"/dev/null\" \"tmpdir/objdump.out\"]\n@@ -716,15 +719,15 @@ if {[is_elf_format]} then {\n \tset text \".text\"\n     }\n     # generate a copy of the test object with .text repositioned\n-    if { [binutils_run $OBJCOPY \"--change-section-address $text=0x80000000 tmpdir/bintest.o tmpdir/bintest_signed.o\"] != \"\" } {\n-\tfail \"Failed to reposition $text to 0x80000000 (tmpdir/bintest.o -> tmpdir/bintest_signed.o)\"\n+    if { [binutils_run $OBJCOPY \"--change-section-address $text=0x80000000 tmpdir/bintest.${obj} tmpdir/bintest_signed.${obj}\"] != \"\" } {\n+\tfail \"Failed to reposition $text to 0x80000000 (tmpdir/bintest.${obj} -> tmpdir/bintest_signed.${obj})\"\n \treturn\n     }\n \n     if [is_remote host] {\n-\tset testfile3 [remote_download host tmpdir/bintest_signed.o]\n+\tset testfile3 [remote_download host tmpdir/bintest_signed.${obj}]\n     } else {\n-\tset testfile3 tmpdir/bintest_signed.o\n+\tset testfile3 tmpdir/bintest_signed.${obj}\n     }\n \n     test_objdump_content_limited $testfile3 $text \"80000004\" \"80000008\""
    }
  ]
}