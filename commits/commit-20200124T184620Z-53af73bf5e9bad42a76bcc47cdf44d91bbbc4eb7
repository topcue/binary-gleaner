{
  "sha": "53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTNhZjczYmY1ZTliYWQ0MmE3NmJjYzQ3Y2RmNDRkOTFiYmJjNGViNw==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-24T18:46:20Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-24T18:46:20Z"
    },
    "message": "Fix re-runs of a second inferior (PR gdb/25410)\n\nThis fixes a latent bug exposed by the multi-target patch (5b6d1e4fa\n\"Multi-target support), and then fixes two other latent bugs exposed\nby fixing that first latent bug.\n\nThe symptom described in the bug report is that starting a first\ninferior, then trying to run a second (multi-threaded) inferior twice,\ncauses libthread_db to fail to load, along with other erratic\nbehavior:\n\n (gdb) run\n Starting program: /tmp/foo\n warning: td_ta_new failed: generic error\n\nGoing a bit deeply, I found that if the two inferiors have different\nsymbols, we can see that just after inferior 2 exits, we are left with\ninferior 2 selected, which is correct, but the symbols in scope belong\nto inferior 1, which is obviously incorrect...\n\nThis problem is that there's a path in\nscoped_restore_current_thread::restore() that switches to no thread\nselected, and switches the current inferior, but leaves the current\nprogram space as is, resulting in leaving the program space pointing\nto the wrong program space (the one of the other inferior).  This was\nhappening after handling TARGET_WAITKIND_NO_RESUMED, which is an event\nthat triggers after TARGET_WAITKIND_EXITED for the previous inferior\nexit.  Subsequent symbol lookups find the symbols of the wrong\ninferior.\n\nThe fix is to use switch_to_inferior_no_thread in that problem spot.\nThis function was recently added along with the multi-target work\nexactly for these situations.\n\nAs for testing, this patch adds a new testcase that tests symbol\nprinting just after inferior exit, which exercises the root cause of\nthe problem more directly.  And then, to cover the use case described\nin the bug too, it also exercises the lithread_db.so mis-loading, by\nusing TLS printing as a proxy for being sure that threaded debugging\nwas activated sucessfully.  The testcase fails without the fix like\nthis, for the \"print symbol just after exit\" bits:\n\n ...\n [Inferior 1 (process 8719) exited normally]\n (gdb) PASS: gdb.multi/multi-re-run.exp: re_run_inf=1: iter=1: continue until exit\n print re_run_var_1\n No symbol \"re_run_var_1\" in current context.\n (gdb) FAIL: gdb.multi/multi-re-run.exp: re_run_inf=1: iter=1: print re_run_var_1\n ...\n\nAnd like this for the \"libthread_db.so loading\" bits:\n\n (gdb) run\n Starting program: /home/pedro/gdb/binutils-gdb/build/gdb/testsuite/outputs/gdb.multi/multi-re-run/multi-re-run\n warning: td_ta_new failed: generic error\n [New LWP 27001]\n\n Thread 1.1 \"multi-re-run\" hit Breakpoint 3, all_started () at /home/pedro/gdb/binutils-gdb/build/../src/gdb/testsuite/gdb.multi/multi-re-run.c:44\n 44      }\n (gdb) PASS: gdb.multi/multi-re-run.exp: re_run_inf=1: iter=2: running to all_started in runto\n print tls_var\n Cannot find thread-local storage for LWP 27000, executable file /home/pedro/gdb/binutils-gdb/build/gdb/testsuite/outputs/gdb.multi/multi-re-run/multi-re-run:\n Cannot find thread-local variables on this target\n (gdb) FAIL: gdb.multi/multi-re-run.exp: re_run_inf=1: iter=2: print tls_var\n\n\nAs mentioned, that fix above goes on to expose a couple other latent\nbugs.  This commit fixes those as well.\n\nThe first latent bug exposed is in\ninfrun.c:handle_vfork_child_exec_or_exit.  The current code is leaving\ninf->pspace == NULL while calling clone_program_space.  The idea was\nto make it so that the breakpoints module doesn't use this inferior's\npspace to set breakpoints.  With that, any\nscoped_restore_current_thread use from within clone_program_space\ntries to restore a NULL program space, which hits an assertion:\n\n Attaching after Thread 0x7ffff74b8700 (LWP 27276) vfork to child process 27277]\n [New inferior 2 (process 27277)]\n [Thread debugging using libthread_db enabled]\n Using host libthread_db library \"/lib64/libthread_db.so.1\".\n /home/pedro/gdb/binutils-gdb/build/../src/gdb/progspace.c:243: internal-error: void set_current_program_space(program_space*): Assertion `pspace != NULL' faile\n d.\n A problem internal to GDB has been detected,\n further debugging may prove unreliable.\n Quit this debugging session? (y or n) FAIL: gdb.threads/vfork-follow-child-exit.exp: detach-on-fork=off: continue (GDB internal error)\n\nThat NULL pspace idea was legitimate, but it's no longer necessary,\nsince commit b2e586e850db (\"Defer breakpoint reset when cloning\nprogspace for fork child\").  So the fix is to just set the inferior's\nprogram space earlier.\n\n\nThe other latent bug exposed is in exec.c.  When exec_close is called\nfrom the program_space destructor, it is purposedly called with a\ncurrent program space that is not the current inferior's program\nspace.  The problem is that the multi-target work added some code to\nremove_target_sections that loops over all inferiors, and uses\nscoped_restore_current_thread to save/restore the previous\nthread/inferior/frame state.  This makes it so that exec_close returns\nwith the current program space set to the current inferior's program\nspace, which is exactly what we did not want.  Then the program_space\ndestructor continues into free_all_objfiles, but it is now running\nthat method on the wrong program space, resulting in:\n\n Reading symbols from /home/pedro/gdb/binutils-gdb/build/gdb/testsuite/outputs/gdb.threads/fork-plus-threads/fork-plus-threads...\n Reading symbols from /usr/lib/debug/usr/lib64/libpthread-2.26.so.debug...\n Reading symbols from /usr/lib/debug/usr/lib64/libm-2.26.so.debug...\n Reading symbols from /usr/lib/debug/usr/lib64/libc-2.26.so.debug...\n Reading symbols from /usr/lib/debug/usr/lib64/ld-2.26.so.debug...\n [Inferior 3 (process 9583) exited normally]\n /home/pedro/gdb/binutils-gdb/build/../src/gdb/progspace.c:170: internal-error: void program_space::free_all_objfiles(): Assertion `so->objfile == NULL' failed.\n A problem internal to GDB has been detected,\n further debugging may prove unreliable.\n Quit this debugging session? (y or n) FAIL: gdb.threads/fork-plus-threads.exp: detach-on-fork=off: inferior 1 exited (GDB internal error)\n\nThe fix is to use scoped_restore_current_pspace_and_thread instead of\nscoped_restore_current_thread.\n\ngdb/ChangeLog:\n2020-01-24  Pedro Alves  <palves@redhat.com>\n\n\tPR gdb/25410\n\t* thread.c (scoped_restore_current_thread::restore): Use\n\tswitch_to_inferior_no_thread.\n\t* exec.c: Include \"progspace-and-thread.h\".\n\t(add_target_sections, remove_target_sections):\n\tscoped_restore_current_pspace_and_thread instead of\n\tscoped_restore_current_thread.\n\t* infrun.c (handle_vfork_child_exec_or_exit): Assign the pspace\n\tand aspace to the inferior before calling clone_program_space.\n\tRemove stale comment.\n\ngdb/testsuite/ChangeLog:\n2020-01-24  Pedro Alves  <palves@redhat.com>\n\n\tPR gdb/25410\n\t* gdb.multi/multi-re-run-1.c: New.\n\t* gdb.multi/multi-re-run-2.c: New.\n\t* gdb.multi/multi-re-run.exp: New.",
    "tree": {
      "sha": "fc819dc2834b14507fc16fb2db0e17df6bf350db",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fc819dc2834b14507fc16fb2db0e17df6bf350db"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bdaed379e9c19ff38a00c9e210e4f7d56f7c5880",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bdaed379e9c19ff38a00c9e210e4f7d56f7c5880",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bdaed379e9c19ff38a00c9e210e4f7d56f7c5880"
    }
  ],
  "stats": {
    "total": 283,
    "additions": 265,
    "deletions": 18
  },
  "files": [
    {
      "sha": "16d16ef6dcacafe0219b060e125217e31be907fe",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7",
      "patch": "@@ -1,3 +1,16 @@\n+2020-01-24  Pedro Alves  <palves@redhat.com>\n+\n+\tPR gdb/25410\n+\t* thread.c (scoped_restore_current_thread::restore): Use\n+\tswitch_to_inferior_no_thread.\n+\t* exec.c: Include \"progspace-and-thread.h\".\n+\t(add_target_sections, remove_target_sections):\n+\tscoped_restore_current_pspace_and_thread instead of\n+\tscoped_restore_current_thread.\n+\t* infrun.c (handle_vfork_child_exec_or_exit): Assign the pspace\n+\tand aspace to the inferior before calling clone_program_space.\n+\tRemove stale comment.\n+\n 2020-01-24  Christian Biesinger  <cbiesinger@google.com>\n \n \t* arm-nbsd-nat.c (arm_nbsd_nat_target::fetch_registers): Rename to..."
    },
    {
      "sha": "2506e84157aa4a7a27a7b6ad594266f6b77905a0",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7",
      "patch": "@@ -33,6 +33,7 @@\n #include \"arch-utils.h\"\n #include \"gdbthread.h\"\n #include \"progspace.h\"\n+#include \"progspace-and-thread.h\"\n #include \"gdb_bfd.h\"\n #include \"gcore.h\"\n #include \"source.h\"\n@@ -547,7 +548,7 @@ add_target_sections (void *owner,\n \t  table->sections[space + i].owner = owner;\n \t}\n \n-      scoped_restore_current_thread restore_thread;\n+      scoped_restore_current_pspace_and_thread restore_pspace_thread;\n       program_space *curr_pspace = current_program_space;\n \n       /* If these are the first file sections we can provide memory\n@@ -645,7 +646,7 @@ remove_target_sections (void *owner)\n \t inferior sharing the program space.  */\n       if (old_count + (dest - src) == 0)\n \t{\n-\t  scoped_restore_current_thread restore_thread;\n+\t  scoped_restore_current_pspace_and_thread restore_pspace_thread;\n \t  program_space *curr_pspace = current_program_space;\n \n \t  for (inferior *inf : all_inferiors ())"
    },
    {
      "sha": "22de42c2ae19fa0957d974700be5b200043a16ee",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 4,
      "deletions": 12,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7",
      "patch": "@@ -1020,8 +1020,6 @@ handle_vfork_child_exec_or_exit (int exec)\n \t}\n       else\n \t{\n-\t  struct program_space *pspace;\n-\n \t  /* If this is a vfork child exiting, then the pspace and\n \t     aspaces were shared with the parent.  Since we're\n \t     reporting the process exit, we'll be mourning all that is\n@@ -1037,18 +1035,12 @@ handle_vfork_child_exec_or_exit (int exec)\n \t  scoped_restore restore_ptid\n \t    = make_scoped_restore (&inferior_ptid, null_ptid);\n \n-\t  /* This inferior is dead, so avoid giving the breakpoints\n-\t     module the option to write through to it (cloning a\n-\t     program space resets breakpoints).  */\n-\t  inf->aspace = NULL;\n-\t  inf->pspace = NULL;\n-\t  pspace = new program_space (maybe_new_address_space ());\n-\t  set_current_program_space (pspace);\n+\t  inf->pspace = new program_space (maybe_new_address_space ());\n+\t  inf->aspace = inf->pspace->aspace;\n+\t  set_current_program_space (inf->pspace);\n \t  inf->removable = 1;\n \t  inf->symfile_flags = SYMFILE_NO_READ;\n-\t  clone_program_space (pspace, vfork_parent->pspace);\n-\t  inf->pspace = pspace;\n-\t  inf->aspace = pspace->aspace;\n+\t  clone_program_space (inf->pspace, vfork_parent->pspace);\n \n \t  resume_parent = vfork_parent->pid;\n \t}"
    },
    {
      "sha": "81500c21ae71052261f533c8a545a20ec483b870",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7",
      "patch": "@@ -1,3 +1,10 @@\n+2020-01-24  Pedro Alves  <palves@redhat.com>\n+\n+\tPR gdb/25410\n+\t* gdb.multi/multi-re-run-1.c: New.\n+\t* gdb.multi/multi-re-run-2.c: New.\n+\t* gdb.multi/multi-re-run.exp: New.\n+\n 2020-01-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \tPR gdb/23718"
    },
    {
      "sha": "91b0dbce3039dd5357c8cecc2e0a2df34d7d2af7",
      "filename": "gdb/testsuite/gdb.multi/multi-re-run-1.c",
      "status": "added",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7/gdb/testsuite/gdb.multi/multi-re-run-1.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7/gdb/testsuite/gdb.multi/multi-re-run-1.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/multi-re-run-1.c?ref=53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7",
      "patch": "@@ -0,0 +1,61 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <unistd.h>\n+#include <limits.h>\n+#include <string.h>\n+#include <pthread.h>\n+\n+int re_run_var_1 = 1;\n+\n+#define NUM_THREADS 1\n+\n+__thread int tls_var = 1;\n+\n+static pthread_barrier_t barrier;\n+\n+static void *\n+thread_start (void *arg)\n+{\n+  pthread_barrier_wait (&barrier);\n+\n+  while (1)\n+    sleep (1);\n+  return NULL;\n+}\n+\n+static void\n+all_started (void)\n+{\n+}\n+\n+int\n+main (int argc, char ** argv)\n+{\n+  pthread_t thread;\n+  int len;\n+\n+  pthread_barrier_init (&barrier, NULL, NUM_THREADS + 1);\n+  pthread_create (&thread, NULL, thread_start, NULL);\n+\n+  pthread_barrier_wait (&barrier);\n+  all_started ();\n+\n+  return 0;\n+}"
    },
    {
      "sha": "6925e0cb2dee1bc3dd76c0c8aeee0db709d2282f",
      "filename": "gdb/testsuite/gdb.multi/multi-re-run-2.c",
      "status": "added",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7/gdb/testsuite/gdb.multi/multi-re-run-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7/gdb/testsuite/gdb.multi/multi-re-run-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/multi-re-run-2.c?ref=53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7",
      "patch": "@@ -0,0 +1,61 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <unistd.h>\n+#include <limits.h>\n+#include <string.h>\n+#include <pthread.h>\n+\n+int re_run_var_2 = 2;\n+\n+#define NUM_THREADS 1\n+\n+__thread int tls_var = 1;\n+\n+static pthread_barrier_t barrier;\n+\n+static void *\n+thread_start (void *arg)\n+{\n+  pthread_barrier_wait (&barrier);\n+\n+  while (1)\n+    sleep (1);\n+  return NULL;\n+}\n+\n+static void\n+all_started (void)\n+{\n+}\n+\n+int\n+main (int argc, char ** argv)\n+{\n+  pthread_t thread;\n+  int len;\n+\n+  pthread_barrier_init (&barrier, NULL, NUM_THREADS + 1);\n+  pthread_create (&thread, NULL, thread_start, NULL);\n+\n+  pthread_barrier_wait (&barrier);\n+  all_started ();\n+\n+  return 0;\n+}"
    },
    {
      "sha": "93cd709b5c73ff8b6b471960a92ec5976d08bf94",
      "filename": "gdb/testsuite/gdb.multi/multi-re-run.exp",
      "status": "added",
      "additions": 115,
      "deletions": 0,
      "changes": 115,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7/gdb/testsuite/gdb.multi/multi-re-run.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7/gdb/testsuite/gdb.multi/multi-re-run.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/multi-re-run.exp?ref=53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7",
      "patch": "@@ -0,0 +1,115 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test loading two inferiors into GDB, and running one of them twice\n+# in a row.  GDB used to have a bug that made it so that after an\n+# inferior exit, the current program space was left pointing to the\n+# wrong inferior's pspace, causing subsequent symbol lookups to\n+# misbehave, including failing to load libthread_db.so.  See PR\n+# gdb/25410.\n+\n+# Build two executables, with different symbols.\n+\n+set exec1 \"multi-re-run-1\"\n+set srcfile1 multi-re-run-1.c\n+set binfile1 [standard_output_file ${exec1}]\n+\n+set exec2 \"multi-re-run-2\"\n+set srcfile2 multi-re-run-2.c\n+set binfile2 [standard_output_file ${exec2}]\n+\n+with_test_prefix \"exec1\" {\n+    if { [prepare_for_testing \"failed to prepare\" ${exec1} \"${srcfile1}\" \\\n+\t      [list pthreads debug]] } {\n+\treturn -1\n+    }\n+}\n+\n+with_test_prefix \"exec2\" {\n+    if { [prepare_for_testing \"failed to prepare\" ${exec2} \"${srcfile2}\" \\\n+\t      [list pthreads debug]] } {\n+\treturn -1\n+    }\n+}\n+\n+# Start two inferiors, leave one stopped, and run the other a couple\n+# times.  RE_RUN_INF is the inferior that is re-run.\n+\n+proc test_re_run {re_run_inf} {\n+    global binfile1 binfile2\n+    global inferior_exited_re\n+    global gdb_prompt\n+\n+    clean_restart ${binfile1}\n+\n+    delete_breakpoints\n+\n+    # Start another inferior.\n+    gdb_test \"add-inferior\" \"Added inferior 2.*\" \\\n+\t\"add empty inferior 2\"\n+    gdb_test \"inferior 2\" \"Switching to inferior 2.*\" \\\n+\t\"switch to inferior 2\"\n+    gdb_load ${binfile2}\n+\n+    if {$re_run_inf == 1} {\n+\tset steady_inf 2\n+    } else {\n+\tset steady_inf 1\n+    }\n+\n+    gdb_test \"inferior $steady_inf\" \"Switching to inferior $steady_inf.*\" \\\n+\t\"switch to steady inferior\"\n+\n+    # Run the steady inferior to a breakpoint, and let it stay stopped\n+    # there.\n+    if ![runto all_started message] then {\n+\tuntested \"setup failed\"\n+\treturn 0\n+    }\n+\n+    gdb_test \"inferior $re_run_inf\" \"Switching to inferior $re_run_inf.*\" \\\n+\t\"switch to re-run inferior\"\n+\n+    # Now run the RE_RUN_INF inferior a couple times.  GDB used to\n+    # have a bug that caused the second run to fail to load\n+    # libthread_db.so.\n+    foreach_with_prefix iter {1 2} {\n+\tdelete_breakpoints\n+\n+\tif ![runto all_started message] {\n+\t    return 0\n+\t}\n+\n+\t# If a thread_stratum target fails to load, then TLS debugging\n+\t# fails too.\n+\tgdb_test \"print tls_var\" \" = 1\"\n+\n+\tgdb_continue_to_end \"\" continue 1\n+\n+\t# In the original bug, after an inferior exit, GDB would leave\n+\t# the current program space pointing to the wrong inferior's\n+\t# pspace, and thus the wrong symbols were visible.\n+\tif {$re_run_inf == 1} {\n+\t    gdb_test \"print re_run_var_1\" \" = 1\"\n+\t} else {\n+\t    gdb_test \"print re_run_var_2\" \" = 2\"\n+\t}\n+    }\n+}\n+\n+# For completeness, test re-running either inferior 1 or inferior 2.\n+foreach_with_prefix re_run_inf {1 2} {\n+    test_re_run $re_run_inf\n+}"
    },
    {
      "sha": "302a49e9845eeca251240ac42dabb01abe8752e3",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=53af73bf5e9bad42a76bcc47cdf44d91bbbc4eb7",
      "patch": "@@ -1429,10 +1429,7 @@ scoped_restore_current_thread::restore ()\n       && m_inf->pid != 0)\n     switch_to_thread (m_thread);\n   else\n-    {\n-      switch_to_no_thread ();\n-      set_current_inferior (m_inf);\n-    }\n+    switch_to_inferior_no_thread (m_inf);\n \n   /* The running state of the originally selected thread may have\n      changed, so we have to recheck it here.  */"
    }
  ]
}