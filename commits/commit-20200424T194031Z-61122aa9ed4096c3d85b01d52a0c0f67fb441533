{
  "sha": "61122aa9ed4096c3d85b01d52a0c0f67fb441533",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjExMjJhYTllZDQwOTZjM2Q4NWIwMWQ1MmEwYzBmNjdmYjQ0MTUzMw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-24T19:40:31Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-24T19:40:31Z"
    },
    "message": "Allow DWARF expression to push the initial address\n\nSome DWARF expressions must be evaluated by first pushing the object\naddress onto the evaluation stack.  This patch adds this ability.\nThis functionality is not used yet, but it will be used in a later\npatch.  This is split out for easier review and also because it\nimproved the patch series ordering.\n\ngdb/ChangeLog\n2020-04-24  Tom Tromey  <tromey@adacore.com>\n\n\t* dwarf2/loc.c (dwarf2_locexpr_baton_eval): Add\n\t\"push_initial_value\" parameter.\n\t(dwarf2_evaluate_property): Likewise.\n\t* dwarf2/loc.h (dwarf2_evaluate_property): Update.",
    "tree": {
      "sha": "e34746e3c11ec6021d3031212d77aa38ef4c969d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e34746e3c11ec6021d3031212d77aa38ef4c969d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/61122aa9ed4096c3d85b01d52a0c0f67fb441533",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/61122aa9ed4096c3d85b01d52a0c0f67fb441533",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/61122aa9ed4096c3d85b01d52a0c0f67fb441533",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/61122aa9ed4096c3d85b01d52a0c0f67fb441533/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ef83a141a291474f1364d6c64ee7a207b96b8e19",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ef83a141a291474f1364d6c64ee7a207b96b8e19",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ef83a141a291474f1364d6c64ee7a207b96b8e19"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 24,
    "deletions": 6
  },
  "files": [
    {
      "sha": "5db26a609472a1d911cf4f416b7525a94a884178",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61122aa9ed4096c3d85b01d52a0c0f67fb441533/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61122aa9ed4096c3d85b01d52a0c0f67fb441533/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=61122aa9ed4096c3d85b01d52a0c0f67fb441533",
      "patch": "@@ -1,3 +1,10 @@\n+2020-04-24  Tom Tromey  <tromey@adacore.com>\n+\n+\t* dwarf2/loc.c (dwarf2_locexpr_baton_eval): Add\n+\t\"push_initial_value\" parameter.\n+\t(dwarf2_evaluate_property): Likewise.\n+\t* dwarf2/loc.h (dwarf2_evaluate_property): Update.\n+\n 2020-04-24  Tom Tromey  <tromey@adacore.com>\n \n \t* gdbtypes.c (is_dynamic_type_internal): Check for variant parts."
    },
    {
      "sha": "8df655f660ab64e2e16b8fb873619c48ee8b3731",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 11,
      "deletions": 4,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61122aa9ed4096c3d85b01d52a0c0f67fb441533/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61122aa9ed4096c3d85b01d52a0c0f67fb441533/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=61122aa9ed4096c3d85b01d52a0c0f67fb441533",
      "patch": "@@ -2388,13 +2388,16 @@ dwarf2_evaluate_loc_desc (struct type *type, struct frame_info *frame,\n    that the dwarf expression only produces a single CORE_ADDR.  FRAME is the\n    frame in which the expression is evaluated.  ADDR is a context (location of\n    a variable) and might be needed to evaluate the location expression.\n-   Returns 1 on success, 0 otherwise.   */\n+   PUSH_INITIAL_VALUE is true if ADDR should be pushed on the stack\n+   before evaluating the expression;  this is required by certain\n+   forms of DWARF expression.  Returns 1 on success, 0 otherwise.  */\n \n static int\n dwarf2_locexpr_baton_eval (const struct dwarf2_locexpr_baton *dlbaton,\n \t\t\t   struct frame_info *frame,\n \t\t\t   CORE_ADDR addr,\n-\t\t\t   CORE_ADDR *valp)\n+\t\t\t   CORE_ADDR *valp,\n+\t\t\t   bool push_initial_value)\n {\n   struct objfile *objfile;\n \n@@ -2414,6 +2417,9 @@ dwarf2_locexpr_baton_eval (const struct dwarf2_locexpr_baton *dlbaton,\n   ctx.ref_addr_size = dlbaton->per_cu->ref_addr_size ();\n   ctx.offset = dlbaton->per_cu->text_offset ();\n \n+  if (push_initial_value)\n+    ctx.push_address (addr, false);\n+\n   try\n     {\n       ctx.eval (dlbaton->data, dlbaton->size);\n@@ -2462,7 +2468,8 @@ bool\n dwarf2_evaluate_property (const struct dynamic_prop *prop,\n \t\t\t  struct frame_info *frame,\n \t\t\t  const struct property_addr_info *addr_stack,\n-\t\t\t  CORE_ADDR *value)\n+\t\t\t  CORE_ADDR *value,\n+\t\t\t  bool push_initial_value)\n {\n   if (prop == NULL)\n     return false;\n@@ -2480,7 +2487,7 @@ dwarf2_evaluate_property (const struct dynamic_prop *prop,\n \n \tif (dwarf2_locexpr_baton_eval (&baton->locexpr, frame,\n \t\t\t\t       addr_stack ? addr_stack->addr : 0,\n-\t\t\t\t       value))\n+\t\t\t\t       value, push_initial_value))\n \t  {\n \t    if (baton->locexpr.is_reference)\n \t      {"
    },
    {
      "sha": "6ff9b79dc0332437d17827148c6b7492d9dfe4af",
      "filename": "gdb/dwarf2/loc.h",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/61122aa9ed4096c3d85b01d52a0c0f67fb441533/gdb/dwarf2/loc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/61122aa9ed4096c3d85b01d52a0c0f67fb441533/gdb/dwarf2/loc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.h?ref=61122aa9ed4096c3d85b01d52a0c0f67fb441533",
      "patch": "@@ -92,12 +92,16 @@ struct property_addr_info\n    be NULL.\n \n    Returns true if PROP could be converted and the static value is passed\n-   back into VALUE, otherwise returns false.  */\n+   back into VALUE, otherwise returns false.\n+\n+   If PUSH_INITIAL_VALUE is true, then the top value of ADDR_STACK\n+   will be pushed before evaluating a location expression.  */\n \n bool dwarf2_evaluate_property (const struct dynamic_prop *prop,\n \t\t\t       struct frame_info *frame,\n \t\t\t       const struct property_addr_info *addr_stack,\n-\t\t\t       CORE_ADDR *value);\n+\t\t\t       CORE_ADDR *value,\n+\t\t\t       bool push_initial_value = false);\n \n /* A helper for the compiler interface that compiles a single dynamic\n    property to C code."
    }
  ]
}