{
  "sha": "ad172eaa4f5ff973890a6c37574946cecf0668b0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWQxNzJlYWE0ZjVmZjk3Mzg5MGE2YzM3NTc0OTQ2Y2VjZjA2NjhiMA==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-06-03T14:03:45Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-06-03T14:03:59Z"
    },
    "message": "ELF: Copy dyn_relocs in _bfd_elf_link_hash_copy_indirect\n\nCopy dyn_relocs in _bfd_elf_link_hash_copy_indirect instead of in each\ntarget backend.\n\n\tPR ld/26067\n\t* elf32-arm.c (elf32_arm_copy_indirect_symbol): Don't copy\n\tdyn_relocs.\n\t* elf32-csky.c (csky_elf_copy_indirect_symbol): Likewise.\n\t* elf32-hppa.c (elf32_hppa_copy_indirect_symbol): Likewise.\n\t* elf32-metag.c (elf_metag_copy_indirect_symbol): Likewise.\n\t* elf32-microblaze.c (microblaze_elf_copy_indirect_symbol):\n\tLikewise.\n\t* elf32-nds32.c (nds32_elf_copy_indirect_symbol): Likewise.\n\t* elf32-nios2.c (nios2_elf32_copy_indirect_symbol): Likewise.\n\t* elf32-or1k.c (or1k_elf_copy_indirect_symbol): Likewise.\n\t* elf32-s390.c (elf_s390_copy_indirect_symbol): Likewise.\n\t* elf32-sh.c (sh_elf_copy_indirect_symbol): Likewise.\n\t* elf32-tilepro.c (tilepro_elf_copy_indirect_symbol): Likewise.\n\t* elf64-s390.c (elf_s390_copy_indirect_symbol): Likewise.\n\t* elfnn-aarch64.c (elfNN_aarch64_copy_indirect_symbol): Likewise.\n\t* elfnn-riscv.c (riscv_elf_copy_indirect_symbol): Likewise.\n\t* elfxx-sparc.c (_bfd_sparc_elf_copy_indirect_symbol): Likewise.\n\t* elfxx-tilegx.c (tilegx_elf_copy_indirect_symbol): Likewise.\n\t* elfxx-x86.c (_bfd_x86_elf_copy_indirect_symbol): Likewise.\n\t* elf32-lm32.c (lm32_elf_copy_indirect_symbol): Removed.\n\t(elf_backend_copy_indirect_symbol): Likewise.\n\t* elf32-m32r.c (m32r_elf_copy_indirect_symbol): Removed.\n\t(elf_backend_copy_indirect_symbol): Likewise.\n\t* elflink.c (_bfd_elf_link_hash_copy_indirect): Copy dyn_relocs.",
    "tree": {
      "sha": "e3435bca4dd4fe1af313dae6855ca15b7ca18f47",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e3435bca4dd4fe1af313dae6855ca15b7ca18f47"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ad172eaa4f5ff973890a6c37574946cecf0668b0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ad172eaa4f5ff973890a6c37574946cecf0668b0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ad172eaa4f5ff973890a6c37574946cecf0668b0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ad172eaa4f5ff973890a6c37574946cecf0668b0/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5dbc8b372f3a15fa4dce65d460a3cce7ed081f6c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5dbc8b372f3a15fa4dce65d460a3cce7ed081f6c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5dbc8b372f3a15fa4dce65d460a3cce7ed081f6c"
    }
  ],
  "stats": {
    "total": 682,
    "additions": 59,
    "deletions": 623
  },
  "files": [
    {
      "sha": "0bafecef2fa6c50c8e65eb35806d1bffd79732b0",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -1,3 +1,31 @@\n+2020-06-03  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR ld/26067\n+\t* elf32-arm.c (elf32_arm_copy_indirect_symbol): Don't copy\n+\tdyn_relocs.\n+\t* elf32-csky.c (csky_elf_copy_indirect_symbol): Likewise.\n+\t* elf32-hppa.c (elf32_hppa_copy_indirect_symbol): Likewise.\n+\t* elf32-metag.c (elf_metag_copy_indirect_symbol): Likewise.\n+\t* elf32-microblaze.c (microblaze_elf_copy_indirect_symbol):\n+\tLikewise.\n+\t* elf32-nds32.c (nds32_elf_copy_indirect_symbol): Likewise.\n+\t* elf32-nios2.c (nios2_elf32_copy_indirect_symbol): Likewise.\n+\t* elf32-or1k.c (or1k_elf_copy_indirect_symbol): Likewise.\n+\t* elf32-s390.c (elf_s390_copy_indirect_symbol): Likewise.\n+\t* elf32-sh.c (sh_elf_copy_indirect_symbol): Likewise.\n+\t* elf32-tilepro.c (tilepro_elf_copy_indirect_symbol): Likewise.\n+\t* elf64-s390.c (elf_s390_copy_indirect_symbol): Likewise.\n+\t* elfnn-aarch64.c (elfNN_aarch64_copy_indirect_symbol): Likewise.\n+\t* elfnn-riscv.c (riscv_elf_copy_indirect_symbol): Likewise.\n+\t* elfxx-sparc.c (_bfd_sparc_elf_copy_indirect_symbol): Likewise.\n+\t* elfxx-tilegx.c (tilegx_elf_copy_indirect_symbol): Likewise.\n+\t* elfxx-x86.c (_bfd_x86_elf_copy_indirect_symbol): Likewise.\n+\t* elf32-lm32.c (lm32_elf_copy_indirect_symbol): Removed.\n+\t(elf_backend_copy_indirect_symbol): Likewise.\n+\t* elf32-m32r.c (m32r_elf_copy_indirect_symbol): Removed.\n+\t(elf_backend_copy_indirect_symbol): Likewise.\n+\t* elflink.c (_bfd_elf_link_hash_copy_indirect): Copy dyn_relocs.\n+\n 2020-06-03  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR ld/26067"
    },
    {
      "sha": "fc67ca5207772d5f9d803d92a372ec7b8cd9ad48",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 0,
      "deletions": 31,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -4028,37 +4028,6 @@ elf32_arm_copy_indirect_symbol (struct bfd_link_info *info,\n   edir = (struct elf32_arm_link_hash_entry *) dir;\n   eind = (struct elf32_arm_link_hash_entry *) ind;\n \n-  if (ind->dyn_relocs != NULL)\n-    {\n-      if (dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **pp;\n-\t  struct elf_dyn_relocs *p;\n-\n-\t  /* Add reloc counts against the indirect sym to the direct sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (pp = &ind->dyn_relocs; (p = *pp) != NULL; )\n-\t    {\n-\t      struct elf_dyn_relocs *q;\n-\n-\t      for (q = dir->dyn_relocs; q != NULL; q = q->next)\n-\t\tif (q->sec == p->sec)\n-\t\t  {\n-\t\t    q->pc_count += p->pc_count;\n-\t\t    q->count += p->count;\n-\t\t    *pp = p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (q == NULL)\n-\t\tpp = &p->next;\n-\t    }\n-\t  *pp = dir->dyn_relocs;\n-\t}\n-\n-      dir->dyn_relocs = ind->dyn_relocs;\n-      ind->dyn_relocs = NULL;\n-    }\n-\n   if (ind->root.type == bfd_link_hash_indirect)\n     {\n       /* Copy over PLT info.  */"
    },
    {
      "sha": "03e83d53a50f568ba518a1800e28aa605e30277b",
      "filename": "bfd/elf32-csky.c",
      "status": "modified",
      "additions": 0,
      "deletions": 29,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-csky.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-csky.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-csky.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -2447,35 +2447,6 @@ csky_elf_copy_indirect_symbol (struct bfd_link_info *info,\n   edir = (struct csky_elf_link_hash_entry *) dir;\n   eind = (struct csky_elf_link_hash_entry *) ind;\n \n-  if (ind->dyn_relocs != NULL)\n-    {\n-      if (dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **pp;\n-\t  struct elf_dyn_relocs *p;\n-\n-\t  /* Add reloc counts against the indirect sym to the direct sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (pp = &ind->dyn_relocs; (p = *pp) != NULL; )\n-\t    {\n-\t      struct elf_dyn_relocs *q;\n-\n-\t      for (q = dir->dyn_relocs; q != NULL; q = q->next)\n-\t\tif (q->sec == p->sec)\n-\t\t  {\n-\t\t    q->pc_count += p->pc_count;\n-\t\t    q->count += p->count;\n-\t\t    *pp = p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (q == NULL)\n-\t\tpp = &p->next;\n-\t    }\n-\t  *pp = dir->dyn_relocs;\n-\t}\n-      dir->dyn_relocs = ind->dyn_relocs;\n-      ind->dyn_relocs = NULL;\n-    }\n   if (ind->root.type == bfd_link_hash_indirect\n       && dir->got.refcount <= 0)\n     {"
    },
    {
      "sha": "106b5c83159c66ceb0613ba011ff9e89d0dbf8a4",
      "filename": "bfd/elf32-hppa.c",
      "status": "modified",
      "additions": 0,
      "deletions": 36,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-hppa.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -1040,42 +1040,6 @@ elf32_hppa_copy_indirect_symbol (struct bfd_link_info *info,\n   hh_dir = hppa_elf_hash_entry (eh_dir);\n   hh_ind = hppa_elf_hash_entry (eh_ind);\n \n-  if (eh_ind->dyn_relocs != NULL\n-      && eh_ind->root.type == bfd_link_hash_indirect)\n-    {\n-      if (eh_dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **hdh_pp;\n-\t  struct elf_dyn_relocs *hdh_p;\n-\n-\t  /* Add reloc counts against the indirect sym to the direct sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (hdh_pp = &eh_ind->dyn_relocs; (hdh_p = *hdh_pp) != NULL; )\n-\t    {\n-\t      struct elf_dyn_relocs *hdh_q;\n-\n-\t      for (hdh_q = eh_dir->dyn_relocs;\n-\t\t   hdh_q != NULL;\n-\t\t   hdh_q = hdh_q->next)\n-\t\tif (hdh_q->sec == hdh_p->sec)\n-\t\t  {\n-#if RELATIVE_DYNRELOCS\n-\t\t    hdh_q->pc_count += hdh_p->pc_count;\n-#endif\n-\t\t    hdh_q->count += hdh_p->count;\n-\t\t    *hdh_pp = hdh_p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (hdh_q == NULL)\n-\t\thdh_pp = &hdh_p->next;\n-\t    }\n-\t  *hdh_pp = eh_dir->dyn_relocs;\n-\t}\n-\n-      eh_dir->dyn_relocs = eh_ind->dyn_relocs;\n-      eh_ind->dyn_relocs = NULL;\n-    }\n-\n   if (eh_ind->root.type == bfd_link_hash_indirect)\n     {\n       hh_dir->plabel |= hh_ind->plabel;"
    },
    {
      "sha": "5d09f2d350d0a475472baa6d898c727522ab68cb",
      "filename": "bfd/elf32-lm32.c",
      "status": "modified",
      "additions": 0,
      "deletions": 42,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-lm32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-lm32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-lm32.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -2390,47 +2390,6 @@ lm32_elf_create_dynamic_sections (bfd *abfd, struct bfd_link_info *info)\n   return TRUE;\n }\n \n-/* Copy the extra info we tack onto an elf_link_hash_entry.  */\n-\n-static void\n-lm32_elf_copy_indirect_symbol (struct bfd_link_info *info,\n-\t\t\t       struct elf_link_hash_entry *dir,\n-\t\t\t       struct elf_link_hash_entry *ind)\n-{\n-  if (ind->dyn_relocs != NULL)\n-    {\n-      if (dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **pp;\n-\t  struct elf_dyn_relocs *p;\n-\n-\t  /* Add reloc counts against the indirect sym to the direct sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (pp = &ind->dyn_relocs; (p = *pp) != NULL;)\n-\t    {\n-\t      struct elf_dyn_relocs *q;\n-\n-\t      for (q = dir->dyn_relocs; q != NULL; q = q->next)\n-\t\tif (q->sec == p->sec)\n-\t\t  {\n-\t\t    q->pc_count += p->pc_count;\n-\t\t    q->count += p->count;\n-\t\t    *pp = p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (q == NULL)\n-\t\tpp = &p->next;\n-\t    }\n-\t  *pp = dir->dyn_relocs;\n-\t}\n-\n-      dir->dyn_relocs = ind->dyn_relocs;\n-      ind->dyn_relocs = NULL;\n-    }\n-\n-  _bfd_elf_link_hash_copy_indirect (info, dir, ind);\n-}\n-\n static bfd_boolean\n lm32_elf_always_size_sections (bfd *output_bfd, struct bfd_link_info *info)\n {\n@@ -2518,7 +2477,6 @@ lm32_elf_fdpic_copy_private_bfd_data (bfd *ibfd, bfd *obfd)\n #define bfd_elf32_bfd_link_hash_table_create\tlm32_elf_link_hash_table_create\n #define elf_backend_check_relocs\t\tlm32_elf_check_relocs\n #define elf_backend_reloc_type_class\t\tlm32_elf_reloc_type_class\n-#define elf_backend_copy_indirect_symbol\tlm32_elf_copy_indirect_symbol\n #define elf_backend_size_dynamic_sections\tlm32_elf_size_dynamic_sections\n #define elf_backend_omit_section_dynsym\t\t_bfd_elf_omit_section_dynsym_all\n #define elf_backend_create_dynamic_sections\tlm32_elf_create_dynamic_sections"
    },
    {
      "sha": "afe0ee899cd724262078afc4445069ec9ffa0878",
      "filename": "bfd/elf32-m32r.c",
      "status": "modified",
      "additions": 0,
      "deletions": 42,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-m32r.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-m32r.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m32r.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -1658,47 +1658,6 @@ m32r_elf_create_dynamic_sections (bfd *abfd, struct bfd_link_info *info)\n   return TRUE;\n }\n \n-/* Copy the extra info we tack onto an elf_link_hash_entry.  */\n-\n-static void\n-m32r_elf_copy_indirect_symbol (struct bfd_link_info *info,\n-\t\t\t       struct elf_link_hash_entry *dir,\n-\t\t\t       struct elf_link_hash_entry *ind)\n-{\n-  if (ind->dyn_relocs != NULL)\n-    {\n-      if (dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **pp;\n-\t  struct elf_dyn_relocs *p;\n-\n-\t  /* Add reloc counts against the indirect sym to the direct sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (pp = &ind->dyn_relocs; (p = *pp) != NULL;)\n-\t    {\n-\t      struct elf_dyn_relocs *q;\n-\n-\t      for (q = dir->dyn_relocs; q != NULL; q = q->next)\n-\t\tif (q->sec == p->sec)\n-\t\t  {\n-\t\t    q->pc_count += p->pc_count;\n-\t\t    q->count += p->count;\n-\t\t    *pp = p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (q == NULL)\n-\t\tpp = &p->next;\n-\t    }\n-\t  *pp = dir->dyn_relocs;\n-\t}\n-\n-      dir->dyn_relocs = ind->dyn_relocs;\n-      ind->dyn_relocs = NULL;\n-    }\n-\n-  _bfd_elf_link_hash_copy_indirect (info, dir, ind);\n-}\n-\n \f\n /* Adjust a symbol defined by a dynamic object and referenced by a\n    regular object.  The current definition is in some section of the\n@@ -3811,7 +3770,6 @@ m32r_elf_reloc_type_class (const struct bfd_link_info *info ATTRIBUTE_UNUSED,\n #define elf_backend_adjust_dynamic_symbol\tm32r_elf_adjust_dynamic_symbol\n #define elf_backend_finish_dynamic_symbol\tm32r_elf_finish_dynamic_symbol\n #define elf_backend_reloc_type_class\t\tm32r_elf_reloc_type_class\n-#define elf_backend_copy_indirect_symbol\tm32r_elf_copy_indirect_symbol\n \n #define elf_backend_can_gc_sections\t\t1\n /*#if !USE_REL"
    },
    {
      "sha": "d5e9a9d034e5eacdc8bda7d32dd9a0bb6e376135",
      "filename": "bfd/elf32-metag.c",
      "status": "modified",
      "additions": 0,
      "deletions": 35,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-metag.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-metag.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-metag.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -2390,41 +2390,6 @@ elf_metag_copy_indirect_symbol (struct bfd_link_info *info,\n   hh_dir = metag_elf_hash_entry (eh_dir);\n   hh_ind = metag_elf_hash_entry (eh_ind);\n \n-  if (eh_ind->dyn_relocs != NULL)\n-    {\n-      if (eh_dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **hdh_pp;\n-\t  struct elf_dyn_relocs *hdh_p;\n-\n-\t  if (eh_ind->root.type == bfd_link_hash_indirect)\n-\t    abort ();\n-\n-\t  /* Add reloc counts against the weak sym to the strong sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (hdh_pp = &eh_ind->dyn_relocs; (hdh_p = *hdh_pp) != NULL; )\n-\t    {\n-\t      struct elf_dyn_relocs *hdh_q;\n-\n-\t      for (hdh_q = eh_dir->dyn_relocs; hdh_q != NULL;\n-\t\t   hdh_q = hdh_q->next)\n-\t\tif (hdh_q->sec == hdh_p->sec)\n-\t\t  {\n-\t\t    hdh_q->pc_count += hdh_p->pc_count;\n-\t\t    hdh_q->count += hdh_p->count;\n-\t\t    *hdh_pp = hdh_p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (hdh_q == NULL)\n-\t\thdh_pp = &hdh_p->next;\n-\t    }\n-\t  *hdh_pp = eh_dir->dyn_relocs;\n-\t}\n-\n-      eh_dir->dyn_relocs = eh_ind->dyn_relocs;\n-      eh_ind->dyn_relocs = NULL;\n-    }\n-\n   if (eh_ind->root.type == bfd_link_hash_indirect\n       && eh_dir->got.refcount <= 0)\n     {"
    },
    {
      "sha": "caf0f2edcaa2a95c20c038a9b49cec51af22007d",
      "filename": "bfd/elf32-microblaze.c",
      "status": "modified",
      "additions": 0,
      "deletions": 34,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-microblaze.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-microblaze.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-microblaze.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -2575,40 +2575,6 @@ microblaze_elf_copy_indirect_symbol (struct bfd_link_info *info,\n   edir = (struct elf32_mb_link_hash_entry *) dir;\n   eind = (struct elf32_mb_link_hash_entry *) ind;\n \n-  if (ind->dyn_relocs != NULL)\n-    {\n-      if (dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **pp;\n-\t  struct elf_dyn_relocs *p;\n-\n-\t  if (ind->root.type == bfd_link_hash_indirect)\n-\t    abort ();\n-\n-\t  /* Add reloc counts against the weak sym to the strong sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (pp = &ind->dyn_relocs; (p = *pp) != NULL; )\n-\t    {\n-\t      struct elf_dyn_relocs *q;\n-\n-\t      for (q = dir->dyn_relocs; q != NULL; q = q->next)\n-\t\tif (q->sec == p->sec)\n-\t\t  {\n-\t\t    q->pc_count += p->pc_count;\n-\t\t    q->count += p->count;\n-\t\t    *pp = p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (q == NULL)\n-\t\tpp = &p->next;\n-\t    }\n-\t  *pp = dir->dyn_relocs;\n-\t}\n-\n-      dir->dyn_relocs = ind->dyn_relocs;\n-      ind->dyn_relocs = NULL;\n-    }\n-\n   edir->tls_mask |= eind->tls_mask;\n \n   _bfd_elf_link_hash_copy_indirect (info, dir, ind);"
    },
    {
      "sha": "4f7ea764691f81408cc50c78e471cf7d4c8e56dd",
      "filename": "bfd/elf32-nds32.c",
      "status": "modified",
      "additions": 0,
      "deletions": 34,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nds32.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -3874,40 +3874,6 @@ nds32_elf_copy_indirect_symbol (struct bfd_link_info *info,\n   edir = (struct elf_nds32_link_hash_entry *) dir;\n   eind = (struct elf_nds32_link_hash_entry *) ind;\n \n-  if (ind->dyn_relocs != NULL)\n-    {\n-      if (dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **pp;\n-\t  struct elf_dyn_relocs *p;\n-\n-\t  if (ind->root.type == bfd_link_hash_indirect)\n-\t    abort ();\n-\n-\t  /* Add reloc counts against the weak sym to the strong sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (pp = &ind->dyn_relocs; (p = *pp) != NULL;)\n-\t    {\n-\t      struct elf_dyn_relocs *q;\n-\n-\t      for (q = dir->dyn_relocs; q != NULL; q = q->next)\n-\t\tif (q->sec == p->sec)\n-\t\t  {\n-\t\t    q->pc_count += p->pc_count;\n-\t\t    q->count += p->count;\n-\t\t    *pp = p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (q == NULL)\n-\t\tpp = &p->next;\n-\t    }\n-\t  *pp = dir->dyn_relocs;\n-\t}\n-\n-      dir->dyn_relocs = ind->dyn_relocs;\n-      ind->dyn_relocs = NULL;\n-    }\n-\n   if (ind->root.type == bfd_link_hash_indirect)\n     {\n       if (dir->got.refcount <= 0)"
    },
    {
      "sha": "aabec1d6d67cf3d216cdf6cf5d6288f7efc7555c",
      "filename": "bfd/elf32-nios2.c",
      "status": "modified",
      "additions": 0,
      "deletions": 31,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-nios2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-nios2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nios2.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -4637,37 +4637,6 @@ nios2_elf32_copy_indirect_symbol (struct bfd_link_info *info,\n   edir = (struct elf32_nios2_link_hash_entry *) dir;\n   eind = (struct elf32_nios2_link_hash_entry *) ind;\n \n-  if (ind->dyn_relocs != NULL)\n-    {\n-      if (dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **pp;\n-\t  struct elf_dyn_relocs *p;\n-\n-\t  /* Add reloc counts against the indirect sym to the direct sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (pp = &ind->dyn_relocs; (p = *pp) != NULL; )\n-\t    {\n-\t      struct elf_dyn_relocs *q;\n-\n-\t      for (q = dir->dyn_relocs; q != NULL; q = q->next)\n-\t\tif (q->sec == p->sec)\n-\t\t  {\n-\t\t    q->pc_count += p->pc_count;\n-\t\t    q->count += p->count;\n-\t\t    *pp = p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (q == NULL)\n-\t\tpp = &p->next;\n-\t    }\n-\t  *pp = dir->dyn_relocs;\n-\t}\n-\n-      dir->dyn_relocs = ind->dyn_relocs;\n-      ind->dyn_relocs = NULL;\n-    }\n-\n   if (ind->root.type == bfd_link_hash_indirect\n       && dir->got.refcount <= 0)\n     {"
    },
    {
      "sha": "b141b45886d19d37abb301d580d3781512effdd3",
      "filename": "bfd/elf32-or1k.c",
      "status": "modified",
      "additions": 0,
      "deletions": 31,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-or1k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-or1k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-or1k.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -3177,37 +3177,6 @@ or1k_elf_copy_indirect_symbol (struct bfd_link_info *info,\n   edir = (struct elf_or1k_link_hash_entry *) dir;\n   eind = (struct elf_or1k_link_hash_entry *) ind;\n \n-  if (ind->dyn_relocs != NULL)\n-    {\n-      if (dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **pp;\n-\t  struct elf_dyn_relocs *p;\n-\n-\t  /* Add reloc counts against the indirect sym to the direct sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (pp = &ind->dyn_relocs; (p = *pp) != NULL;)\n-\t    {\n-\t      struct elf_dyn_relocs *q;\n-\n-\t      for (q = dir->dyn_relocs; q != NULL; q = q->next)\n-\t\tif (q->sec == p->sec)\n-\t\t  {\n-\t\t    q->pc_count += p->pc_count;\n-\t\t    q->count += p->count;\n-\t\t    *pp = p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (q == NULL)\n-\t\tpp = &p->next;\n-\t    }\n-\t  *pp = dir->dyn_relocs;\n-\t}\n-\n-      dir->dyn_relocs = ind->dyn_relocs;\n-      ind->dyn_relocs = NULL;\n-    }\n-\n   if (ind->root.type == bfd_link_hash_indirect)\n     {\n       if (dir->got.refcount <= 0)"
    },
    {
      "sha": "42f230d9b14c0d8029fc2d54426765d4792687a4",
      "filename": "bfd/elf32-s390.c",
      "status": "modified",
      "additions": 0,
      "deletions": 31,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-s390.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-s390.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-s390.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -828,37 +828,6 @@ elf_s390_copy_indirect_symbol (struct bfd_link_info *info,\n   edir = (struct elf_s390_link_hash_entry *) dir;\n   eind = (struct elf_s390_link_hash_entry *) ind;\n \n-  if (ind->dyn_relocs != NULL)\n-    {\n-      if (dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **pp;\n-\t  struct elf_dyn_relocs *p;\n-\n-\t  /* Add reloc counts against the indirect sym to the direct sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (pp = &ind->dyn_relocs; (p = *pp) != NULL; )\n-\t    {\n-\t      struct elf_dyn_relocs *q;\n-\n-\t      for (q = dir->dyn_relocs; q != NULL; q = q->next)\n-\t\tif (q->sec == p->sec)\n-\t\t  {\n-\t\t    q->pc_count += p->pc_count;\n-\t\t    q->count += p->count;\n-\t\t    *pp = p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (q == NULL)\n-\t\tpp = &p->next;\n-\t    }\n-\t  *pp = dir->dyn_relocs;\n-\t}\n-\n-      dir->dyn_relocs = ind->dyn_relocs;\n-      ind->dyn_relocs = NULL;\n-    }\n-\n   if (ind->root.type == bfd_link_hash_indirect\n       && dir->got.refcount <= 0)\n     {"
    },
    {
      "sha": "0428829757f9de859190e4b60b5f52a9a73ea366",
      "filename": "bfd/elf32-sh.c",
      "status": "modified",
      "additions": 0,
      "deletions": 30,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-sh.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-sh.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-sh.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -5303,36 +5303,6 @@ sh_elf_copy_indirect_symbol (struct bfd_link_info *info,\n   edir = (struct elf_sh_link_hash_entry *) dir;\n   eind = (struct elf_sh_link_hash_entry *) ind;\n \n-  if (ind->dyn_relocs != NULL)\n-    {\n-      if (dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **pp;\n-\t  struct elf_dyn_relocs *p;\n-\n-\t  /* Add reloc counts against the indirect sym to the direct sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (pp = &ind->dyn_relocs; (p = *pp) != NULL; )\n-\t    {\n-\t      struct elf_dyn_relocs *q;\n-\n-\t      for (q = dir->dyn_relocs; q != NULL; q = q->next)\n-\t\tif (q->sec == p->sec)\n-\t\t  {\n-\t\t    q->pc_count += p->pc_count;\n-\t\t    q->count += p->count;\n-\t\t    *pp = p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (q == NULL)\n-\t\tpp = &p->next;\n-\t    }\n-\t  *pp = dir->dyn_relocs;\n-\t}\n-\n-      dir->dyn_relocs = ind->dyn_relocs;\n-      ind->dyn_relocs = NULL;\n-    }\n   edir->gotplt_refcount = eind->gotplt_refcount;\n   eind->gotplt_refcount = 0;\n   edir->funcdesc.refcount += eind->funcdesc.refcount;"
    },
    {
      "sha": "9707a9e18e5b4cda77142b2e72c3bbf2e104a8b0",
      "filename": "bfd/elf32-tilepro.c",
      "status": "modified",
      "additions": 0,
      "deletions": 31,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-tilepro.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf32-tilepro.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-tilepro.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -1292,37 +1292,6 @@ tilepro_elf_copy_indirect_symbol (struct bfd_link_info *info,\n   edir = (struct tilepro_elf_link_hash_entry *) dir;\n   eind = (struct tilepro_elf_link_hash_entry *) ind;\n \n-  if (ind->dyn_relocs != NULL)\n-    {\n-      if (dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **pp;\n-\t  struct elf_dyn_relocs *p;\n-\n-\t  /* Add reloc counts against the indirect sym to the direct sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (pp = &ind->dyn_relocs; (p = *pp) != NULL; )\n-\t    {\n-\t      struct elf_dyn_relocs *q;\n-\n-\t      for (q = dir->dyn_relocs; q != NULL; q = q->next)\n-\t\tif (q->sec == p->sec)\n-\t\t  {\n-\t\t    q->pc_count += p->pc_count;\n-\t\t    q->count += p->count;\n-\t\t    *pp = p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (q == NULL)\n-\t\tpp = &p->next;\n-\t    }\n-\t  *pp = dir->dyn_relocs;\n-\t}\n-\n-      dir->dyn_relocs = ind->dyn_relocs;\n-      ind->dyn_relocs = NULL;\n-    }\n-\n   if (ind->root.type == bfd_link_hash_indirect\n       && dir->got.refcount <= 0)\n     {"
    },
    {
      "sha": "197e9bc68c7ac4e8b436a9c6304f70585020748a",
      "filename": "bfd/elf64-s390.c",
      "status": "modified",
      "additions": 0,
      "deletions": 31,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf64-s390.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elf64-s390.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-s390.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -747,37 +747,6 @@ elf_s390_copy_indirect_symbol (struct bfd_link_info *info,\n   edir = (struct elf_s390_link_hash_entry *) dir;\n   eind = (struct elf_s390_link_hash_entry *) ind;\n \n-  if (ind->dyn_relocs != NULL)\n-    {\n-      if (dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **pp;\n-\t  struct elf_dyn_relocs *p;\n-\n-\t  /* Add reloc counts against the indirect sym to the direct sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (pp = &ind->dyn_relocs; (p = *pp) != NULL; )\n-\t    {\n-\t      struct elf_dyn_relocs *q;\n-\n-\t      for (q = dir->dyn_relocs; q != NULL; q = q->next)\n-\t\tif (q->sec == p->sec)\n-\t\t  {\n-\t\t    q->pc_count += p->pc_count;\n-\t\t    q->count += p->count;\n-\t\t    *pp = p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (q == NULL)\n-\t\tpp = &p->next;\n-\t    }\n-\t  *pp = dir->dyn_relocs;\n-\t}\n-\n-      dir->dyn_relocs = ind->dyn_relocs;\n-      ind->dyn_relocs = NULL;\n-    }\n-\n   if (ind->root.type == bfd_link_hash_indirect\n       && dir->got.refcount <= 0)\n     {"
    },
    {
      "sha": "a2b40ccb046bbd32ae811395f3294026a5388f08",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -7650,6 +7650,37 @@ _bfd_elf_link_hash_copy_indirect (struct bfd_link_info *info,\n {\n   struct elf_link_hash_table *htab;\n \n+  if (ind->dyn_relocs != NULL)\n+    {\n+      if (dir->dyn_relocs != NULL)\n+\t{\n+\t  struct elf_dyn_relocs **pp;\n+\t  struct elf_dyn_relocs *p;\n+\n+\t  /* Add reloc counts against the indirect sym to the direct sym\n+\t     list.  Merge any entries against the same section.  */\n+\t  for (pp = &ind->dyn_relocs; (p = *pp) != NULL; )\n+\t    {\n+\t      struct elf_dyn_relocs *q;\n+\n+\t      for (q = dir->dyn_relocs; q != NULL; q = q->next)\n+\t\tif (q->sec == p->sec)\n+\t\t  {\n+\t\t    q->pc_count += p->pc_count;\n+\t\t    q->count += p->count;\n+\t\t    *pp = p->next;\n+\t\t    break;\n+\t\t  }\n+\t      if (q == NULL)\n+\t\tpp = &p->next;\n+\t    }\n+\t  *pp = dir->dyn_relocs;\n+\t}\n+\n+      dir->dyn_relocs = ind->dyn_relocs;\n+      ind->dyn_relocs = NULL;\n+    }\n+\n   /* Copy down any references that we may have already seen to the\n      symbol which just became indirect.  */\n "
    },
    {
      "sha": "71634ffba773b63d58dc0242b3ed1d21a3ee5e64",
      "filename": "bfd/elfnn-aarch64.c",
      "status": "modified",
      "additions": 0,
      "deletions": 31,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elfnn-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elfnn-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-aarch64.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -2851,37 +2851,6 @@ elfNN_aarch64_copy_indirect_symbol (struct bfd_link_info *info,\n   edir = (struct elf_aarch64_link_hash_entry *) dir;\n   eind = (struct elf_aarch64_link_hash_entry *) ind;\n \n-  if (ind->dyn_relocs != NULL)\n-    {\n-      if (dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **pp;\n-\t  struct elf_dyn_relocs *p;\n-\n-\t  /* Add reloc counts against the indirect sym to the direct sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (pp = &ind->dyn_relocs; (p = *pp) != NULL;)\n-\t    {\n-\t      struct elf_dyn_relocs *q;\n-\n-\t      for (q = dir->dyn_relocs; q != NULL; q = q->next)\n-\t\tif (q->sec == p->sec)\n-\t\t  {\n-\t\t    q->pc_count += p->pc_count;\n-\t\t    q->count += p->count;\n-\t\t    *pp = p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (q == NULL)\n-\t\tpp = &p->next;\n-\t    }\n-\t  *pp = dir->dyn_relocs;\n-\t}\n-\n-      dir->dyn_relocs = ind->dyn_relocs;\n-      ind->dyn_relocs = NULL;\n-    }\n-\n   if (ind->root.type == bfd_link_hash_indirect)\n     {\n       /* Copy over PLT info.  */"
    },
    {
      "sha": "3c972e20ab59aa962b7641e81f6874cca1498f97",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 0,
      "deletions": 31,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -415,37 +415,6 @@ riscv_elf_copy_indirect_symbol (struct bfd_link_info *info,\n   edir = (struct riscv_elf_link_hash_entry *) dir;\n   eind = (struct riscv_elf_link_hash_entry *) ind;\n \n-  if (ind->dyn_relocs != NULL)\n-    {\n-      if (dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **pp;\n-\t  struct elf_dyn_relocs *p;\n-\n-\t  /* Add reloc counts against the indirect sym to the direct sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (pp = &ind->dyn_relocs; (p = *pp) != NULL; )\n-\t    {\n-\t      struct elf_dyn_relocs *q;\n-\n-\t      for (q = dir->dyn_relocs; q != NULL; q = q->next)\n-\t\tif (q->sec == p->sec)\n-\t\t  {\n-\t\t    q->pc_count += p->pc_count;\n-\t\t    q->count += p->count;\n-\t\t    *pp = p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (q == NULL)\n-\t\tpp = &p->next;\n-\t    }\n-\t  *pp = dir->dyn_relocs;\n-\t}\n-\n-      dir->dyn_relocs = ind->dyn_relocs;\n-      ind->dyn_relocs = NULL;\n-    }\n-\n   if (ind->root.type == bfd_link_hash_indirect\n       && dir->got.refcount <= 0)\n     {"
    },
    {
      "sha": "e4700e31069daf489f6d0ddadfafd90a5337c183",
      "filename": "bfd/elfxx-sparc.c",
      "status": "modified",
      "additions": 0,
      "deletions": 31,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elfxx-sparc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elfxx-sparc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-sparc.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -1285,37 +1285,6 @@ _bfd_sparc_elf_copy_indirect_symbol (struct bfd_link_info *info,\n   edir = (struct _bfd_sparc_elf_link_hash_entry *) dir;\n   eind = (struct _bfd_sparc_elf_link_hash_entry *) ind;\n \n-  if (ind->dyn_relocs != NULL)\n-    {\n-      if (dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **pp;\n-\t  struct elf_dyn_relocs *p;\n-\n-\t  /* Add reloc counts against the indirect sym to the direct sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (pp = &ind->dyn_relocs; (p = *pp) != NULL; )\n-\t    {\n-\t      struct elf_dyn_relocs *q;\n-\n-\t      for (q = dir->dyn_relocs; q != NULL; q = q->next)\n-\t\tif (q->sec == p->sec)\n-\t\t  {\n-\t\t    q->pc_count += p->pc_count;\n-\t\t    q->count += p->count;\n-\t\t    *pp = p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (q == NULL)\n-\t\tpp = &p->next;\n-\t    }\n-\t  *pp = dir->dyn_relocs;\n-\t}\n-\n-      dir->dyn_relocs = ind->dyn_relocs;\n-      ind->dyn_relocs = NULL;\n-    }\n-\n   if (ind->root.type == bfd_link_hash_indirect && dir->got.refcount <= 0)\n     {\n       edir->tls_type = eind->tls_type;"
    },
    {
      "sha": "07288a13e8c9510b0fd98ec7e74dbb6bd37a15ac",
      "filename": "bfd/elfxx-tilegx.c",
      "status": "modified",
      "additions": 0,
      "deletions": 31,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elfxx-tilegx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elfxx-tilegx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-tilegx.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -1501,37 +1501,6 @@ tilegx_elf_copy_indirect_symbol (struct bfd_link_info *info,\n   edir = (struct tilegx_elf_link_hash_entry *) dir;\n   eind = (struct tilegx_elf_link_hash_entry *) ind;\n \n-  if (ind->dyn_relocs != NULL)\n-    {\n-      if (dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **pp;\n-\t  struct elf_dyn_relocs *p;\n-\n-\t  /* Add reloc counts against the indirect sym to the direct sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (pp = &ind->dyn_relocs; (p = *pp) != NULL; )\n-\t    {\n-\t      struct elf_dyn_relocs *q;\n-\n-\t      for (q = dir->dyn_relocs; q != NULL; q = q->next)\n-\t\tif (q->sec == p->sec)\n-\t\t  {\n-\t\t    q->pc_count += p->pc_count;\n-\t\t    q->count += p->count;\n-\t\t    *pp = p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (q == NULL)\n-\t\tpp = &p->next;\n-\t    }\n-\t  *pp = dir->dyn_relocs;\n-\t}\n-\n-      dir->dyn_relocs = ind->dyn_relocs;\n-      ind->dyn_relocs = NULL;\n-    }\n-\n   if (ind->root.type == bfd_link_hash_indirect\n       && dir->got.refcount <= 0)\n     {"
    },
    {
      "sha": "b8c616f4d84ec09a0e381480a130ca9a3fce857a",
      "filename": "bfd/elfxx-x86.c",
      "status": "modified",
      "additions": 0,
      "deletions": 31,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elfxx-x86.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad172eaa4f5ff973890a6c37574946cecf0668b0/bfd/elfxx-x86.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-x86.c?ref=ad172eaa4f5ff973890a6c37574946cecf0668b0",
      "patch": "@@ -1766,37 +1766,6 @@ _bfd_x86_elf_copy_indirect_symbol (struct bfd_link_info *info,\n   edir = (struct elf_x86_link_hash_entry *) dir;\n   eind = (struct elf_x86_link_hash_entry *) ind;\n \n-  if (ind->dyn_relocs != NULL)\n-    {\n-      if (dir->dyn_relocs != NULL)\n-\t{\n-\t  struct elf_dyn_relocs **pp;\n-\t  struct elf_dyn_relocs *p;\n-\n-\t  /* Add reloc counts against the indirect sym to the direct sym\n-\t     list.  Merge any entries against the same section.  */\n-\t  for (pp = &ind->dyn_relocs; (p = *pp) != NULL; )\n-\t    {\n-\t      struct elf_dyn_relocs *q;\n-\n-\t      for (q = dir->dyn_relocs; q != NULL; q = q->next)\n-\t\tif (q->sec == p->sec)\n-\t\t  {\n-\t\t    q->pc_count += p->pc_count;\n-\t\t    q->count += p->count;\n-\t\t    *pp = p->next;\n-\t\t    break;\n-\t\t  }\n-\t      if (q == NULL)\n-\t\tpp = &p->next;\n-\t    }\n-\t  *pp = dir->dyn_relocs;\n-\t}\n-\n-      dir->dyn_relocs = ind->dyn_relocs;\n-      ind->dyn_relocs = NULL;\n-    }\n-\n   if (ind->root.type == bfd_link_hash_indirect\n       && dir->got.refcount <= 0)\n     {"
    }
  ]
}