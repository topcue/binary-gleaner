{
  "sha": "d19937a74c51872e8bbff6e37d9b89b202519b07",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDE5OTM3YTc0YzUxODcyZThiYmZmNmUzN2Q5Yjg5YjIwMjUxOWIwNw==",
  "commit": {
    "author": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2020-11-24T02:48:23Z"
    },
    "committer": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2020-11-24T02:48:23Z"
    },
    "message": "Make fixed_point_type_base_type a method of struct type\n\nAs suggested by Simon, to logically connect this function to\nthe object it inspects.\n\nNote that, logically, this method should be \"const\". Unfortunately,\nthe implementation iterates on struct type objects starting with \"this\",\nand thus trying to declare the method \"const\" triggers a compilation\nerror.\n\ngdb/ChangeLog:\n\n        * gdbtypes.h (struct type) <fixed_point_type_base_type> New method,\n        replacing the fixed_point_type_base_type function. All callers\n        updated throughout this project.\n        (fixed_point_type_base_type): Remove declaration.\n        * gdbtypes.c (type::fixed_point_type_base_type): Replaces\n        fixed_point_type_base_type.  Adjust implementation accordingly.",
    "tree": {
      "sha": "a71a396d5b956b873682cf8829db491886c1fed3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a71a396d5b956b873682cf8829db491886c1fed3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d19937a74c51872e8bbff6e37d9b89b202519b07",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d19937a74c51872e8bbff6e37d9b89b202519b07",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d19937a74c51872e8bbff6e37d9b89b202519b07",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d19937a74c51872e8bbff6e37d9b89b202519b07/comments",
  "author": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2a12c336b9d55189780846324eda98c66d543de7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2a12c336b9d55189780846324eda98c66d543de7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2a12c336b9d55189780846324eda98c66d543de7"
    }
  ],
  "stats": {
    "total": 38,
    "additions": 25,
    "deletions": 13
  },
  "files": [
    {
      "sha": "3db63657919321c71b2cf92d846da44b7bfa074f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d19937a74c51872e8bbff6e37d9b89b202519b07/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d19937a74c51872e8bbff6e37d9b89b202519b07/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d19937a74c51872e8bbff6e37d9b89b202519b07",
      "patch": "@@ -1,3 +1,12 @@\n+2020-11-24  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* gdbtypes.h (struct type) <fixed_point_type_base_type> New method,\n+\treplacing the fixed_point_type_base_type function. All callers\n+\tupdated throughout this project.\n+\t(fixed_point_type_base_type): Remove declaration.\n+\t* gdbtypes.c (type::fixed_point_type_base_type): Replaces\n+\tfixed_point_type_base_type.  Adjust implementation accordingly.\n+\n 2020-11-24  Joel Brobecker  <brobecker@adacore.com>\n \n \t* gdbtypes.h (struct type) <fixed_point_info, set_fixed_point_info>:"
    },
    {
      "sha": "6ddb584d11c18f2bc5ac3929eabd22719563384c",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d19937a74c51872e8bbff6e37d9b89b202519b07/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d19937a74c51872e8bbff6e37d9b89b202519b07/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=d19937a74c51872e8bbff6e37d9b89b202519b07",
      "patch": "@@ -1028,7 +1028,7 @@ ada_value_print_1 (struct value *val, struct ui_file *stream, int recurse,\n     }\n \n   if (is_fixed_point_type (type))\n-    type = fixed_point_type_base_type (type);\n+    type = type->fixed_point_type_base_type ();\n \n   switch (type->code ())\n     {"
    },
    {
      "sha": "fa4e8f01f29e8f3ac3379644c77b8d787ff3b65b",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d19937a74c51872e8bbff6e37d9b89b202519b07/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d19937a74c51872e8bbff6e37d9b89b202519b07/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=d19937a74c51872e8bbff6e37d9b89b202519b07",
      "patch": "@@ -5866,8 +5866,10 @@ is_fixed_point_type (struct type *type)\n /* See gdbtypes.h.  */\n \n struct type *\n-fixed_point_type_base_type (struct type *type)\n+type::fixed_point_type_base_type ()\n {\n+  struct type *type = this;\n+\n   while (check_typedef (type)->code () == TYPE_CODE_RANGE)\n     type = TYPE_TARGET_TYPE (check_typedef (type));\n   type = check_typedef (type);\n@@ -5881,7 +5883,7 @@ fixed_point_type_base_type (struct type *type)\n const gdb_mpq &\n fixed_point_scaling_factor (struct type *type)\n {\n-  type = fixed_point_type_base_type (type);\n+  type = type->fixed_point_type_base_type ();\n \n   return type->fixed_point_info ().scaling_factor;\n }"
    },
    {
      "sha": "88fb0e7a3936a877758eae4604c4ef260f6ec6a5",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d19937a74c51872e8bbff6e37d9b89b202519b07/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d19937a74c51872e8bbff6e37d9b89b202519b07/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=d19937a74c51872e8bbff6e37d9b89b202519b07",
      "patch": "@@ -1215,6 +1215,15 @@ struct type\n     this->main_type->type_specific.fixed_point_info = info;\n   }\n \n+  /* * Assuming that THIS is a TYPE_CODE_FIXED_POINT, return its base type.\n+\n+     In other words, this returns the type after having peeled all\n+     intermediate type layers (such as TYPE_CODE_RANGE, for instance).\n+     The TYPE_CODE of the type returned is guaranteed to be\n+     a TYPE_CODE_FIXED_POINT.  */\n+\n+  struct type *fixed_point_type_base_type ();\n+\n   /* * Return the dynamic property of the requested KIND from this type's\n      list of dynamic properties.  */\n   dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;\n@@ -2587,14 +2596,6 @@ extern int type_not_associated (const struct type *type);\n    a range type whose base type is a TYPE_CODE_FIXED_POINT.  */\n extern bool is_fixed_point_type (struct type *type);\n \n-/* Assuming that TYPE is a fixed point type, return its base type.\n-\n-   In other words, this returns the type after having peeled all\n-   intermediate type layers (such as TYPE_CODE_RANGE, for instance).\n-   The TYPE_CODE of the type returned is guaranteed to be\n-   a TYPE_CODE_FIXED_POINT.  */\n-extern struct type *fixed_point_type_base_type (struct type *type);\n-\n /* Given TYPE, which is a fixed point type, return its scaling factor.  */\n extern const gdb_mpq &fixed_point_scaling_factor (struct type *type);\n "
    },
    {
      "sha": "6e9262e7f6398205457ded05fae100bbab46fa57",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d19937a74c51872e8bbff6e37d9b89b202519b07/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d19937a74c51872e8bbff6e37d9b89b202519b07/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=d19937a74c51872e8bbff6e37d9b89b202519b07",
      "patch": "@@ -871,7 +871,7 @@ generic_value_print (struct value *val, struct ui_file *stream, int recurse,\n   type = check_typedef (type);\n \n   if (is_fixed_point_type (type))\n-    type = fixed_point_type_base_type (type);\n+    type = type->fixed_point_type_base_type ();\n \n   switch (type->code ())\n     {"
    },
    {
      "sha": "f6c1a36ac0f84d94a2bad81f040256d6838e7a8e",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d19937a74c51872e8bbff6e37d9b89b202519b07/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d19937a74c51872e8bbff6e37d9b89b202519b07/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=d19937a74c51872e8bbff6e37d9b89b202519b07",
      "patch": "@@ -2759,7 +2759,7 @@ LONGEST\n unpack_long (struct type *type, const gdb_byte *valaddr)\n {\n   if (is_fixed_point_type (type))\n-    type = fixed_point_type_base_type (type);\n+    type = type->fixed_point_type_base_type ();\n \n   enum bfd_endian byte_order = type_byte_order (type);\n   enum type_code code = type->code ();"
    }
  ]
}