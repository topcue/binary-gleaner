{
  "sha": "72aea32839b5f4a2c8fa67e60451169b841941c0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzJhZWEzMjgzOWI1ZjRhMmM4ZmE2N2U2MDQ1MTE2OWI4NDE5NDFjMA==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-01-09T10:40:04Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-01-09T10:40:04Z"
    },
    "message": "x86: refine when to trigger optimizations\n\nChecking just the base opcode without also checking this isn't a VEX\nencoding, and without there being other insn properties avoiding a match\nonce respective VEX/XOP/EXEX-encoded insns would appear, is at least\ndangerous. Add respective checks. At the same time there's no real need\nto check the extension opcode to be None for the 0xA8 form - there's\nnothing it can be confused with, and non-VEX-and-alike forms also can't\nappear.",
    "tree": {
      "sha": "2050e9da546a94539f556d289f7ea593bb671ede",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2050e9da546a94539f556d289f7ea593bb671ede"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/72aea32839b5f4a2c8fa67e60451169b841941c0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/72aea32839b5f4a2c8fa67e60451169b841941c0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/72aea32839b5f4a2c8fa67e60451169b841941c0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/72aea32839b5f4a2c8fa67e60451169b841941c0/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3f93af61413b6f6e4381ac286cb510d897971e3f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f93af61413b6f6e4381ac286cb510d897971e3f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3f93af61413b6f6e4381ac286cb510d897971e3f"
    }
  ],
  "stats": {
    "total": 25,
    "additions": 15,
    "deletions": 10
  },
  "files": [
    {
      "sha": "660b9a205e95a3cb9a4a35266c415b906dda1b1c",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/72aea32839b5f4a2c8fa67e60451169b841941c0/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/72aea32839b5f4a2c8fa67e60451169b841941c0/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=72aea32839b5f4a2c8fa67e60451169b841941c0",
      "patch": "@@ -1,3 +1,9 @@\n+2020-01-09  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (optimize_encoding): Add\n+\tis_any_vex_encoding() invocations. Drop respective\n+\ti.tm.extension_opcode == None checks.\n+\n 2020-01-09  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (md_assemble): Check RegRex is clear during"
    },
    {
      "sha": "2c087e42e0de4486ce1b89d6c2d1b1d36ded1a9e",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 9,
      "deletions": 10,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/72aea32839b5f4a2c8fa67e60451169b841941c0/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/72aea32839b5f4a2c8fa67e60451169b841941c0/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=72aea32839b5f4a2c8fa67e60451169b841941c0",
      "patch": "@@ -3990,13 +3990,13 @@ optimize_encoding (void)\n   unsigned int j;\n \n   if (optimize_for_space\n+      && !is_any_vex_encoding (&i.tm)\n       && i.reg_operands == 1\n       && i.imm_operands == 1\n       && !i.types[1].bitfield.byte\n       && i.op[0].imms->X_op == O_constant\n       && fits_in_imm7 (i.op[0].imms->X_add_number)\n-      && ((i.tm.base_opcode == 0xa8\n-\t   && i.tm.extension_opcode == None)\n+      && (i.tm.base_opcode == 0xa8\n \t  || (i.tm.base_opcode == 0xf6\n \t      && i.tm.extension_opcode == 0x0)))\n     {\n@@ -4022,6 +4022,7 @@ optimize_encoding (void)\n \t}\n     }\n   else if (flag_code == CODE_64BIT\n+\t   && !is_any_vex_encoding (&i.tm)\n \t   && ((i.types[1].bitfield.qword\n \t\t&& i.reg_operands == 1\n \t\t&& i.imm_operands == 1\n@@ -4030,9 +4031,8 @@ optimize_encoding (void)\n \t\t     && i.tm.extension_opcode == None\n \t\t     && fits_in_unsigned_long (i.op[0].imms->X_add_number))\n \t\t    || (fits_in_imm31 (i.op[0].imms->X_add_number)\n-\t\t\t&& (((i.tm.base_opcode == 0x24\n-\t\t\t      || i.tm.base_opcode == 0xa8)\n-\t\t\t     && i.tm.extension_opcode == None)\n+\t\t\t&& ((i.tm.base_opcode == 0x24\n+\t\t\t     || i.tm.base_opcode == 0xa8)\n \t\t\t    || (i.tm.base_opcode == 0x80\n \t\t\t\t&& i.tm.extension_opcode == 0x4)\n \t\t\t    || ((i.tm.base_opcode == 0xf6\n@@ -4044,13 +4044,11 @@ optimize_encoding (void)\n \t       || (i.types[0].bitfield.qword\n \t\t   && ((i.reg_operands == 2\n \t\t\t&& i.op[0].regs == i.op[1].regs\n-\t\t\t&& ((i.tm.base_opcode == 0x30\n-\t\t\t     || i.tm.base_opcode == 0x28)\n-\t\t\t    && i.tm.extension_opcode == None))\n+\t\t\t&& (i.tm.base_opcode == 0x30\n+\t\t\t    || i.tm.base_opcode == 0x28))\n \t\t       || (i.reg_operands == 1\n \t\t\t   && i.operands == 1\n-\t\t\t   && i.tm.base_opcode == 0x30\n-\t\t\t   && i.tm.extension_opcode == None)))))\n+\t\t\t   && i.tm.base_opcode == 0x30)))))\n     {\n       /* Optimize: -O:\n \t   andq $imm31, %r64   -> andl $imm31, %r32\n@@ -4091,6 +4089,7 @@ optimize_encoding (void)\n     }\n   else if (optimize > 1\n \t   && !optimize_for_space\n+\t   && !is_any_vex_encoding (&i.tm)\n \t   && i.reg_operands == 2\n \t   && i.op[0].regs == i.op[1].regs\n \t   && ((i.tm.base_opcode & ~(Opcode_D | 1)) == 0x8"
    }
  ]
}