{
  "sha": "2b2d74f4a135e69fa2e0b68dd273212a4db88f81",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmIyZDc0ZjRhMTM1ZTY5ZmEyZTBiNjhkZDI3MzIxMmE0ZGI4OGY4MQ==",
  "commit": {
    "author": {
      "name": "Cary Coutant",
      "email": "ccoutant@gmail.com",
      "date": "2020-12-15T22:37:22Z"
    },
    "committer": {
      "name": "Cary Coutant",
      "email": "ccoutant@gmail.com",
      "date": "2020-12-15T22:37:22Z"
    },
    "message": "Cosmetic improvements for OSABI access.\n\nAdd accessor methods to elfcpp::Ehdr class for EI_OSABI and EI_ABIVERSION;\nuse those to simplify initialization of Osabi class and eliminate the need\nto template the class.\n\nelfcpp/\n\t* elfcpp.h (class Ehdr): Add get_ei_osabi and get_ei_abiversion methods.\n\ngold/\n\t* dwp.cc (class Dwo_file): Use new Ehdr::get_ei_osabi and\n\tget_ei_abiversion methods.\n\t* incremental.cc (make_sized_incremental_binary): Likewise.\n\t* object.cc (Sized_relobj_file::Sized_relobj_file): Likewise.\n\t(make_elf_sized_object): Likewise.\n\t* object.h (class Osabi): Make the class untemplated.",
    "tree": {
      "sha": "7b43bfe833c9b37411c723ee671d7d910a8e6a65",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7b43bfe833c9b37411c723ee671d7d910a8e6a65"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2b2d74f4a135e69fa2e0b68dd273212a4db88f81",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2b2d74f4a135e69fa2e0b68dd273212a4db88f81",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2b2d74f4a135e69fa2e0b68dd273212a4db88f81",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2b2d74f4a135e69fa2e0b68dd273212a4db88f81/comments",
  "author": {
    "login": "ccoutant",
    "id": 1442098,
    "node_id": "MDQ6VXNlcjE0NDIwOTg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1442098?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ccoutant",
    "html_url": "https://github.com/ccoutant",
    "followers_url": "https://api.github.com/users/ccoutant/followers",
    "following_url": "https://api.github.com/users/ccoutant/following{/other_user}",
    "gists_url": "https://api.github.com/users/ccoutant/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ccoutant/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ccoutant/subscriptions",
    "organizations_url": "https://api.github.com/users/ccoutant/orgs",
    "repos_url": "https://api.github.com/users/ccoutant/repos",
    "events_url": "https://api.github.com/users/ccoutant/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ccoutant/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "ccoutant",
    "id": 1442098,
    "node_id": "MDQ6VXNlcjE0NDIwOTg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1442098?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ccoutant",
    "html_url": "https://github.com/ccoutant",
    "followers_url": "https://api.github.com/users/ccoutant/followers",
    "following_url": "https://api.github.com/users/ccoutant/following{/other_user}",
    "gists_url": "https://api.github.com/users/ccoutant/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ccoutant/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ccoutant/subscriptions",
    "organizations_url": "https://api.github.com/users/ccoutant/orgs",
    "repos_url": "https://api.github.com/users/ccoutant/repos",
    "events_url": "https://api.github.com/users/ccoutant/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ccoutant/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8947abe6bfbf2615e1f4ea2420b3aad5cbac4d90",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8947abe6bfbf2615e1f4ea2420b3aad5cbac4d90",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8947abe6bfbf2615e1f4ea2420b3aad5cbac4d90"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 33,
    "deletions": 14
  },
  "files": [
    {
      "sha": "0ae886e1780eb49fc6b3261be574e5772fdd08b3",
      "filename": "elfcpp/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b2d74f4a135e69fa2e0b68dd273212a4db88f81/elfcpp/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b2d74f4a135e69fa2e0b68dd273212a4db88f81/elfcpp/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/elfcpp/ChangeLog?ref=2b2d74f4a135e69fa2e0b68dd273212a4db88f81",
      "patch": "@@ -1,3 +1,7 @@\n+2020-12-15  Cary Coutant  <ccoutant@gmail.com>\n+\n+\t* elfcpp.h (class Ehdr): Add get_ei_osabi and get_ei_abiversion methods.\n+\n 2020-12-15  Vivek Das Mohapatra  <vivek@collabora.com>\n \n \t* elfcpp.h (enum DT): New enum member DT_GNU_FLAGS_1."
    },
    {
      "sha": "428ecb8935009b44665f8f35bf8369f8df769c18",
      "filename": "elfcpp/elfcpp.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b2d74f4a135e69fa2e0b68dd273212a4db88f81/elfcpp/elfcpp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b2d74f4a135e69fa2e0b68dd273212a4db88f81/elfcpp/elfcpp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/elfcpp/elfcpp.h?ref=2b2d74f4a135e69fa2e0b68dd273212a4db88f81",
      "patch": "@@ -1100,6 +1100,14 @@ class Ehdr\n   get_e_ident() const\n   { return this->p_->e_ident; }\n \n+  unsigned char\n+  get_ei_osabi() const\n+  { return this->p_->e_ident[EI_OSABI]; }\n+\n+  unsigned char\n+  get_ei_abiversion() const\n+  { return this->p_->e_ident[EI_ABIVERSION]; }\n+\n   Elf_Half\n   get_e_type() const\n   { return Convert<16, big_endian>::convert_host(this->p_->e_type); }"
    },
    {
      "sha": "77b1f886c305f82cbb723b346b15434d497d03b0",
      "filename": "gold/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b2d74f4a135e69fa2e0b68dd273212a4db88f81/gold/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b2d74f4a135e69fa2e0b68dd273212a4db88f81/gold/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/ChangeLog?ref=2b2d74f4a135e69fa2e0b68dd273212a4db88f81",
      "patch": "@@ -1,3 +1,12 @@\n+2020-12-15  Cary Coutant  <ccoutant@gmail.com>\n+\n+\t* dwp.cc (class Dwo_file): Use new Ehdr::get_ei_osabi and\n+\tget_ei_abiversion methods.\n+\t* incremental.cc (make_sized_incremental_binary): Likewise.\n+\t* object.cc (Sized_relobj_file::Sized_relobj_file): Likewise.\n+\t(make_elf_sized_object): Likewise.\n+\t* object.h (class Osabi): Make the class untemplated.\n+\n 2020-12-15  Vivek Das Mohapatra  <vivek@collabora.com>\n \n \tImplement -z unique / -z nounique options."
    },
    {
      "sha": "aae1fe212a2aa9ee0ac99d0a63b667d97207d490",
      "filename": "gold/dwp.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b2d74f4a135e69fa2e0b68dd273212a4db88f81/gold/dwp.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b2d74f4a135e69fa2e0b68dd273212a4db88f81/gold/dwp.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/dwp.cc?ref=2b2d74f4a135e69fa2e0b68dd273212a4db88f81",
      "patch": "@@ -1107,8 +1107,8 @@ Dwo_file::sized_make_object(const unsigned char* p, Input_file* input_file,\n   if (output_file != NULL)\n     output_file->record_target_info(\n \tthis->name_, ehdr.get_e_machine(), size, big_endian,\n-\tehdr.get_e_ident()[elfcpp::EI_OSABI],\n-\tehdr.get_e_ident()[elfcpp::EI_ABIVERSION]);\n+\tehdr.get_ei_osabi(),\n+\tehdr.get_ei_abiversion());\n   return obj;\n }\n "
    },
    {
      "sha": "1f2ae5b87b3f2fab61e07d151e216bcdca4001f2",
      "filename": "gold/incremental.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b2d74f4a135e69fa2e0b68dd273212a4db88f81/gold/incremental.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b2d74f4a135e69fa2e0b68dd273212a4db88f81/gold/incremental.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/incremental.cc?ref=2b2d74f4a135e69fa2e0b68dd273212a4db88f81",
      "patch": "@@ -856,8 +856,8 @@ make_sized_incremental_binary(Output_file* file,\n {\n   Target* target = select_target(NULL, 0, // XXX\n \t\t\t\t ehdr.get_e_machine(), size, big_endian,\n-\t\t\t\t ehdr.get_e_ident()[elfcpp::EI_OSABI],\n-\t\t\t\t ehdr.get_e_ident()[elfcpp::EI_ABIVERSION]);\n+\t\t\t\t ehdr.get_ei_osabi(),\n+\t\t\t\t ehdr.get_ei_abiversion());\n   if (target == NULL)\n     {\n       explain_no_incremental(_(\"unsupported ELF machine number %d\"),"
    },
    {
      "sha": "0edaf477db8c52aa3ba09776c6e8f16b03bc011d",
      "filename": "gold/object.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b2d74f4a135e69fa2e0b68dd273212a4db88f81/gold/object.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b2d74f4a135e69fa2e0b68dd273212a4db88f81/gold/object.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/object.cc?ref=2b2d74f4a135e69fa2e0b68dd273212a4db88f81",
      "patch": "@@ -464,7 +464,8 @@ Sized_relobj_file<size, big_endian>::Sized_relobj_file(\n     const elfcpp::Ehdr<size, big_endian>& ehdr)\n   : Sized_relobj<size, big_endian>(name, input_file, offset),\n     elf_file_(this, ehdr),\n-    osabi_(ehdr),\n+    osabi_(ehdr.get_ei_osabi()),\n+    e_type_(ehdr.get_e_type()),\n     symtab_shndx_(-1U),\n     local_symbol_count_(0),\n     output_local_symbol_count_(0),\n@@ -482,7 +483,6 @@ Sized_relobj_file<size, big_endian>::Sized_relobj_file(\n     deferred_layout_relocs_(),\n     output_views_(NULL)\n {\n-  this->e_type_ = ehdr.get_e_type();\n }\n \n template<int size, bool big_endian>\n@@ -3387,8 +3387,8 @@ make_elf_sized_object(const std::string& name, Input_file* input_file,\n {\n   Target* target = select_target(input_file, offset,\n \t\t\t\t ehdr.get_e_machine(), size, big_endian,\n-\t\t\t\t ehdr.get_e_ident()[elfcpp::EI_OSABI],\n-\t\t\t\t ehdr.get_e_ident()[elfcpp::EI_ABIVERSION]);\n+\t\t\t\t ehdr.get_ei_osabi(),\n+\t\t\t\t ehdr.get_ei_abiversion());\n   if (target == NULL)\n     gold_fatal(_(\"%s: unsupported ELF machine number %d\"),\n \t       name.c_str(), ehdr.get_e_machine());"
    },
    {
      "sha": "1ab98ced4645e23ef8a2aba176d1ef7f40a2f9f3",
      "filename": "gold/object.h",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b2d74f4a135e69fa2e0b68dd273212a4db88f81/gold/object.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b2d74f4a135e69fa2e0b68dd273212a4db88f81/gold/object.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/object.h?ref=2b2d74f4a135e69fa2e0b68dd273212a4db88f81",
      "patch": "@@ -386,13 +386,11 @@ build_compressed_section_map(const unsigned char* pshdrs, unsigned int shnum,\n \n // Osabi represents the EI_OSABI field from the ELF header.\n \n-template <int size, bool big_endian>\n class Osabi\n {\n  public:\n-  Osabi(const elfcpp::Ehdr<size, big_endian>& ehdr)\n-    : ei_osabi_(static_cast<elfcpp::ELFOSABI>(\n-\t\t    ehdr.get_e_ident()[elfcpp::EI_OSABI]))\n+  Osabi(unsigned char ei_osabi)\n+    : ei_osabi_(static_cast<elfcpp::ELFOSABI>(ei_osabi))\n   { }\n \n   bool\n@@ -2249,7 +2247,7 @@ class Sized_relobj_file : public Sized_relobj<size, big_endian>\n   { return this->e_type_; }\n \n   // Return the EI_OSABI.\n-  const Osabi<size, big_endian>&\n+  const Osabi&\n   osabi() const\n   { return this->osabi_; }\n \n@@ -2894,7 +2892,7 @@ class Sized_relobj_file : public Sized_relobj<size, big_endian>\n   // General access to the ELF file.\n   elfcpp::Elf_file<size, big_endian, Object> elf_file_;\n   // The EI_OSABI.\n-  const Osabi<size, big_endian> osabi_;\n+  const Osabi osabi_;\n   // Type of ELF file (ET_REL or ET_EXEC).  ET_EXEC files are allowed\n   // as input files only for the --just-symbols option.\n   int e_type_;"
    }
  ]
}