{
  "sha": "b62a802857adafecc64bc1de3efd1c2e59059af9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjYyYTgwMjg1N2FkYWZlY2M2NGJjMWRlM2VmZDFjMmU1OTA1OWFmOQ==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-01-13T15:31:01Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-01-29T14:26:07Z"
    },
    "message": "Test handling of additional brk instruction patterns\n\nNew in v5:\n\n- Use gdb_test_name for gdb_test_multiple.\n- Use gdb_assert.\n- Verify count matches the expected sigtraps exactly.\n\nNew in v4:\n\n- Fix formatting nit in gdb/testsuite/gdb.arch/aarch64-brk-patterns.c.\n\nNew in v3:\n\n- Minor formatting and code cleanups.\n- Added count check to validate number of brk SIGTRAP's.\n- Moved count to SIGTRAP check conditional block.\n\nThis test exercises the previous patch's code and makes sure GDB can\nproperly get a SIGTRAP from various brk instruction patterns.\n\nGDB needs to be able to see the program exiting normally. If GDB doesn't\nsupport the additional brk instructions, we will see timeouts.\n\nWe bail out with the first timeout since we won't be able to step through\nthe program breakpoint anyway, so it is no use carrying on.\n\ngdb/testsuite/ChangeLog:\n\n2020-01-29  Luis Machado  <luis.machado@linaro.org>\n\n\t* gdb.arch/aarch64-brk-patterns.c: New source file.\n\t* gdb.arch/aarch64-brk-patterns.exp: New test.",
    "tree": {
      "sha": "2777ce98d765d2df4c2df8c91c87d5bd8b6d9098",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2777ce98d765d2df4c2df8c91c87d5bd8b6d9098"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b62a802857adafecc64bc1de3efd1c2e59059af9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b62a802857adafecc64bc1de3efd1c2e59059af9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b62a802857adafecc64bc1de3efd1c2e59059af9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b62a802857adafecc64bc1de3efd1c2e59059af9/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5133a31537c8f90f3b8b7172f385b3b2856d1566",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5133a31537c8f90f3b8b7172f385b3b2856d1566",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5133a31537c8f90f3b8b7172f385b3b2856d1566"
    }
  ],
  "stats": {
    "total": 105,
    "additions": 105,
    "deletions": 0
  },
  "files": [
    {
      "sha": "2d0a173695143e6a9069352bbee54ae21a9880c8",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b62a802857adafecc64bc1de3efd1c2e59059af9/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b62a802857adafecc64bc1de3efd1c2e59059af9/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=b62a802857adafecc64bc1de3efd1c2e59059af9",
      "patch": "@@ -1,3 +1,8 @@\n+2020-01-29  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* gdb.arch/aarch64-brk-patterns.c: New source file.\n+\t* gdb.arch/aarch64-brk-patterns.exp: New test.\n+\n 2020-01-29  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* gdb.cp/pass-by-ref-2.exp: Mark some tests as XFAIL based on the"
    },
    {
      "sha": "920ba8e2cb32b4e5e02a10a412753a350f802a71",
      "filename": "gdb/testsuite/gdb.arch/aarch64-brk-patterns.c",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b62a802857adafecc64bc1de3efd1c2e59059af9/gdb/testsuite/gdb.arch/aarch64-brk-patterns.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b62a802857adafecc64bc1de3efd1c2e59059af9/gdb/testsuite/gdb.arch/aarch64-brk-patterns.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/aarch64-brk-patterns.c?ref=b62a802857adafecc64bc1de3efd1c2e59059af9",
      "patch": "@@ -0,0 +1,31 @@\n+/* This file is part of GDB, the GNU debugger.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+int\n+main (void)\n+{\n+  /* Dummy instruction just so GDB doesn't stop at the first breakpoint\n+     instruction.  */\n+  __asm __volatile (\"nop\\n\\t\");\n+\n+  /* Multiple BRK instruction patterns.  */\n+  __asm __volatile (\"brk %0\\n\\t\" ::\"n\"(0x0));\n+  __asm __volatile (\"brk %0\\n\\t\" ::\"n\"(0x900 + 0xf));\n+  __asm __volatile (\"brk %0\\n\\t\" ::\"n\"(0xf000));\n+\n+  return 0;\n+}"
    },
    {
      "sha": "5cb55da2197c5dd4bc6581ce381230d67b353988",
      "filename": "gdb/testsuite/gdb.arch/aarch64-brk-patterns.exp",
      "status": "added",
      "additions": 69,
      "deletions": 0,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b62a802857adafecc64bc1de3efd1c2e59059af9/gdb/testsuite/gdb.arch/aarch64-brk-patterns.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b62a802857adafecc64bc1de3efd1c2e59059af9/gdb/testsuite/gdb.arch/aarch64-brk-patterns.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/aarch64-brk-patterns.exp?ref=b62a802857adafecc64bc1de3efd1c2e59059af9",
      "patch": "@@ -0,0 +1,69 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+#\n+# This file is part of the gdb testsuite.\n+\n+# Test if GDB stops at various BRK instruction patterns inserted into\n+# the code.\n+\n+if {![is_aarch64_target]} {\n+    verbose \"Skipping ${gdb_test_file_name}.\"\n+    return\n+}\n+\n+standard_testfile\n+if {[prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}]} {\n+    return -1\n+}\n+\n+if {![runto_main]} {\n+    untested \"could not run to main\"\n+    return -1\n+}\n+\n+# Number of expected SIGTRAP's to get.  This needs to be kept in sync\n+# with the source file.\n+set expected_traps 3\n+set keep_going 1\n+set count 0\n+\n+# Make sure we have a lower timeout in case GDB doesn't support a particular\n+# instruction.  Such instruction will cause GDB to loop infinitely.\n+while {$keep_going} {\n+    # Continue to next program breakpoint instruction.\n+    gdb_test_multiple \"continue\" \"brk instruction $count causes SIGTRAP\" {\n+\t-re \"Program received signal SIGTRAP, Trace/breakpoint trap.*$gdb_prompt $\" {\n+\t    pass $gdb_test_name\n+\n+\t    # Insert a breakpoint at the program breakpoint instruction so\n+\t    # GDB can step over it.\n+\t    gdb_test \"break\" \\\n+\t\t\"Breakpoint $decimal at $hex: file .*$srcfile, line $decimal.*\" \\\n+\t\t\"insert breakpoint at brk instruction $count\"\n+\t    incr count\n+\t}\n+\t# We've reached the end of the test.\n+\t-re \"exited normally.*$gdb_prompt $\" {\n+\t    set keep_going 0\n+\t}\n+\ttimeout {\n+\t    fail $gdb_test_name\n+\t    set keep_going 0\n+\t}\n+    }\n+}\n+\n+# Verify we stopped at the expected number of SIGTRAP's.\n+gdb_assert {$count == $expected_traps} \"all brk instructions triggered\""
    }
  ]
}