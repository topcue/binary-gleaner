{
  "sha": "8edca81ece5df534c1cdd1f8362e7b5b9b090cfa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGVkY2E4MWVjZTVkZjUzNGMxY2RkMWY4MzYyZTdiNWI5YjA5MGNmYQ==",
  "commit": {
    "author": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2020-11-09T11:09:12Z"
    },
    "committer": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2020-11-09T11:19:44Z"
    },
    "message": "aarch64: Limit Rt register number for LS64 load/store instructions\n\nAtomic 64-byte load/store instructions limit Rt register number to\nvalues matching below condition (register <Xt> number must be even\nand <= 22):\n\n    if Rt<4:3> == '11' || Rt<0> == '1' then UNDEFINED;\n\nThis patch adds check if Rt fulfills above requirement.\n\nFor more details regarding atomic 64-byte load/store instruction for\nArmv8.7 please refer to Arm A64 Instruction set documentation for\nArmv8-A architecture profile, see document page 157 for load\ninstruction, and pages 414-418 for store instructions of [0].\n\n    [0]: https://developer.arm.com/docs/ddi0596/i",
    "tree": {
      "sha": "7e07cdc4b08f84ca60406cc67afd31eaa71c8bf3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7e07cdc4b08f84ca60406cc67afd31eaa71c8bf3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/comments",
  "author": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a76bf0e55d84e8529a337cad278814ba2e30d3af",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a76bf0e55d84e8529a337cad278814ba2e30d3af",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a76bf0e55d84e8529a337cad278814ba2e30d3af"
    }
  ],
  "stats": {
    "total": 661,
    "additions": 459,
    "deletions": 202
  },
  "files": [
    {
      "sha": "d14bcc6d031ac639250acb1c2c68facccf4c2e4b",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=8edca81ece5df534c1cdd1f8362e7b5b9b090cfa",
      "patch": "@@ -1,3 +1,11 @@\n+2020-11-09  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* config/tc-aarch64.c (process_omitted_operand): Add AARCH64_OPND_Rt_LS64.\n+\t(parse_operands): Parse Rt range for AARCH64_OPND_Rt_LS64.\n+\t* testsuite/gas/aarch64/ls64-invalid.l: Update test.\n+\t* testsuite/gas/aarch64/ls64-invalid.s: Update test.\n+\t* testsuite/gas/aarch64/ls64.s: Update test.\n+\n 2020-11-09  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* Makefile.am (development.exp): Fix regexp."
    },
    {
      "sha": "4308ea626632185ce2bd1905daefa0a264bb2f21",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=8edca81ece5df534c1cdd1f8362e7b5b9b090cfa",
      "patch": "@@ -5276,6 +5276,7 @@ process_omitted_operand (enum aarch64_opnd type, const aarch64_opcode *opcode,\n     case AARCH64_OPND_Rm:\n     case AARCH64_OPND_Rt:\n     case AARCH64_OPND_Rt2:\n+    case AARCH64_OPND_Rt_LS64:\n     case AARCH64_OPND_Rt_SP:\n     case AARCH64_OPND_Rs:\n     case AARCH64_OPND_Ra:\n@@ -5645,10 +5646,25 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \tcase AARCH64_OPND_Rt2:\n \tcase AARCH64_OPND_Rs:\n \tcase AARCH64_OPND_Ra:\n+\tcase AARCH64_OPND_Rt_LS64:\n \tcase AARCH64_OPND_Rt_SYS:\n \tcase AARCH64_OPND_PAIRREG:\n \tcase AARCH64_OPND_SVE_Rm:\n \t  po_int_reg_or_fail (REG_TYPE_R_Z);\n+\n+\t  /* In LS64 load/store instructions Rt register number is .  */\n+\t  if (operands[i] == AARCH64_OPND_Rt_LS64)\n+\t  {\n+\t    /* We've already checked if this is valid register.\n+\t       This will check if register number (Rt) is not undefined for LS64\n+\t       instructions:\n+\t       if Rt<4:3> == '11' || Rt<0> == '1' then UNDEFINED.  */\n+\t    if ((info->reg.regno & 0x18) == 0x18 || (info->reg.regno & 0x01) == 0x01)\n+\t    {\n+\t      set_syntax_error (_(\"invalid Rt register number in 64-byte load/store\"));\n+\t      goto failure;\n+\t    }\n+\t  }\n \t  break;\n \n \tcase AARCH64_OPND_Rd_SP:"
    },
    {
      "sha": "4ccce6b234d2b7d5e4285d7d38e5451e62484650",
      "filename": "gas/testsuite/gas/aarch64/ls64-invalid.l",
      "status": "modified",
      "additions": 76,
      "deletions": 4,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/gas/testsuite/gas/aarch64/ls64-invalid.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/gas/testsuite/gas/aarch64/ls64-invalid.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/ls64-invalid.l?ref=8edca81ece5df534c1cdd1f8362e7b5b9b090cfa",
      "patch": "@@ -1,5 +1,77 @@\n .*: Assembler messages:\n-.*: Error: selected processor does not support `ld64b x0,\\[x1\\]'\n-.*: Error: selected processor does not support `st64b x0,\\[x1\\]'\n-.*: Error: selected processor does not support `st64bv x0,x1,\\[x2\\]'\n-.*: Error: selected processor does not support `st64bv0 x0,x1,\\[x2\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x1,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x3,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x5,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x7,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x9,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x11,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x13,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x15,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x17,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x19,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x21,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x23,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x24,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x25,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x26,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x27,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x28,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x29,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `ld64b x30,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x1,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x3,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x5,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x7,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x9,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x11,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x13,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x15,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x17,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x19,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x21,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x23,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x24,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x25,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x26,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x27,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x28,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x29,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 1 -- `st64b x30,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x1,\\[x2\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x3,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x5,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x7,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x9,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x11,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x13,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x15,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x17,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x19,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x21,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x23,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x24,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x25,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x26,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x27,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x28,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x29,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv x0,x30,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x1,\\[x2\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x3,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x5,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x7,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x9,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x11,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x13,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x15,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x17,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x19,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x21,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x23,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x24,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x25,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x26,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x27,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x28,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x29,\\[x1\\]'\n+.*: Error: invalid Rt register number in 64-byte load/store at operand 2 -- `st64bv0 x0,x30,\\[x1\\]'"
    },
    {
      "sha": "151fe41c149220c3b7b19cfe24831d8a6838c26c",
      "filename": "gas/testsuite/gas/aarch64/ls64-invalid.s",
      "status": "modified",
      "additions": 127,
      "deletions": 4,
      "changes": 131,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/gas/testsuite/gas/aarch64/ls64-invalid.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/gas/testsuite/gas/aarch64/ls64-invalid.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/ls64-invalid.s?ref=8edca81ece5df534c1cdd1f8362e7b5b9b090cfa",
      "patch": "@@ -1,14 +1,137 @@\n-/* Atomic 64-byte load/store instructions require Armv8.7-a extension.  */\n-.arch armv8.6-a\n+/* Atomic 64-byte load/store instructions limit register number Rt to below\n+   condition: the <Xt> register number should be even and <= 22.  */\n+.arch armv8.7-a+ls64\n \n /* Single-copy Atomic 64-byte Load.  */\n \tld64b x0, [x1]\n+\tld64b x1, [x1]\n+\tld64b x2, [x1]\n+\tld64b x3, [x1]\n+\tld64b x4, [x1]\n+\tld64b x5, [x1]\n+\tld64b x6, [x1]\n+\tld64b x7, [x1]\n+\tld64b x8, [x1]\n+\tld64b x9, [x1]\n+\tld64b x10, [x1]\n+\tld64b x11, [x1]\n+\tld64b x12, [x1]\n+\tld64b x13, [x1]\n+\tld64b x14, [x1]\n+\tld64b x15, [x1]\n+\tld64b x16, [x1]\n+\tld64b x17, [x1]\n+\tld64b x18, [x1]\n+\tld64b x19, [x1]\n+\tld64b x20, [x1]\n+\tld64b x21, [x1]\n+\tld64b x22, [x1]\n+\tld64b x23, [x1]\n+\tld64b x24, [x1]\n+\tld64b x25, [x1]\n+\tld64b x26, [x1]\n+\tld64b x27, [x1]\n+\tld64b x28, [x1]\n+\tld64b x29, [x1]\n+\tld64b x30, [x1]\n \n /* Single-copy Atomic 64-byte Store without Return.  */\n \tst64b x0, [x1]\n+\tst64b x1, [x1]\n+\tst64b x2, [x1]\n+\tst64b x3, [x1]\n+\tst64b x4, [x1]\n+\tst64b x5, [x1]\n+\tst64b x6, [x1]\n+\tst64b x7, [x1]\n+\tst64b x8, [x1]\n+\tst64b x9, [x1]\n+\tst64b x10, [x1]\n+\tst64b x11, [x1]\n+\tst64b x12, [x1]\n+\tst64b x13, [x1]\n+\tst64b x14, [x1]\n+\tst64b x15, [x1]\n+\tst64b x16, [x1]\n+\tst64b x17, [x1]\n+\tst64b x18, [x1]\n+\tst64b x19, [x1]\n+\tst64b x20, [x1]\n+\tst64b x21, [x1]\n+\tst64b x22, [x1]\n+\tst64b x23, [x1]\n+\tst64b x24, [x1]\n+\tst64b x25, [x1]\n+\tst64b x26, [x1]\n+\tst64b x27, [x1]\n+\tst64b x28, [x1]\n+\tst64b x29, [x1]\n+\tst64b x30, [x1]\n+\n \n /* Single-copy Atomic 64-byte Store with Return.  */\n-\tst64bv x0, x1, [x2]\n+\tst64bv x1, x0,  [x2]\n+\tst64bv x0, x1,  [x2]\n+\tst64bv x0, x2,  [x1]\n+\tst64bv x0, x3,  [x1]\n+\tst64bv x0, x4,  [x1]\n+\tst64bv x0, x5,  [x1]\n+\tst64bv x0, x6,  [x1]\n+\tst64bv x0, x7,  [x1]\n+\tst64bv x0, x8,  [x1]\n+\tst64bv x0, x9,  [x1]\n+\tst64bv x0, x10, [x1]\n+\tst64bv x0, x11, [x1]\n+\tst64bv x0, x12, [x1]\n+\tst64bv x0, x13, [x1]\n+\tst64bv x0, x14, [x1]\n+\tst64bv x0, x15, [x1]\n+\tst64bv x0, x16, [x1]\n+\tst64bv x0, x17, [x1]\n+\tst64bv x0, x18, [x1]\n+\tst64bv x0, x19, [x1]\n+\tst64bv x0, x20, [x1]\n+\tst64bv x0, x21, [x1]\n+\tst64bv x0, x22, [x1]\n+\tst64bv x0, x23, [x1]\n+\tst64bv x0, x24, [x1]\n+\tst64bv x0, x25, [x1]\n+\tst64bv x0, x26, [x1]\n+\tst64bv x0, x27, [x1]\n+\tst64bv x0, x28, [x1]\n+\tst64bv x0, x29, [x1]\n+\tst64bv x0, x30, [x1]\n+\n \n /* Single-copy Atomic 64-byte EL0 Store with Return.  */\n-\tst64bv0 x0, x1, [x2]\n+\tst64bv0 x1, x0,  [x2]\n+\tst64bv0 x0, x1,  [x2]\n+\tst64bv0 x0, x2,  [x1]\n+\tst64bv0 x0, x3,  [x1]\n+\tst64bv0 x0, x4,  [x1]\n+\tst64bv0 x0, x5,  [x1]\n+\tst64bv0 x0, x6,  [x1]\n+\tst64bv0 x0, x7,  [x1]\n+\tst64bv0 x0, x8,  [x1]\n+\tst64bv0 x0, x9,  [x1]\n+\tst64bv0 x0, x10, [x1]\n+\tst64bv0 x0, x11, [x1]\n+\tst64bv0 x0, x12, [x1]\n+\tst64bv0 x0, x13, [x1]\n+\tst64bv0 x0, x14, [x1]\n+\tst64bv0 x0, x15, [x1]\n+\tst64bv0 x0, x16, [x1]\n+\tst64bv0 x0, x17, [x1]\n+\tst64bv0 x0, x18, [x1]\n+\tst64bv0 x0, x19, [x1]\n+\tst64bv0 x0, x20, [x1]\n+\tst64bv0 x0, x21, [x1]\n+\tst64bv0 x0, x22, [x1]\n+\tst64bv0 x0, x23, [x1]\n+\tst64bv0 x0, x24, [x1]\n+\tst64bv0 x0, x25, [x1]\n+\tst64bv0 x0, x26, [x1]\n+\tst64bv0 x0, x27, [x1]\n+\tst64bv0 x0, x28, [x1]\n+\tst64bv0 x0, x29, [x1]\n+\tst64bv0 x0, x30, [x1]"
    },
    {
      "sha": "d9219249f672b0f42469d155e1d53d9b1efc52fd",
      "filename": "gas/testsuite/gas/aarch64/ls64.s",
      "status": "modified",
      "additions": 44,
      "deletions": 26,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/gas/testsuite/gas/aarch64/ls64.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/gas/testsuite/gas/aarch64/ls64.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/ls64.s?ref=8edca81ece5df534c1cdd1f8362e7b5b9b090cfa",
      "patch": "@@ -3,38 +3,56 @@\n \n /* Single-copy Atomic 64-byte Load.  */\n \tld64b x0, [x1]\n-\tld64b x1, [x2]\n-\tld64b x2, [x4]\n-\tld64b x4, [x8]\n-\tld64b x8, [x16]\n+\tld64b x2, [x1]\n+\tld64b x4, [x1]\n+\tld64b x6, [x1]\n+\tld64b x8, [x1]\n+\tld64b x10, [x1]\n+\tld64b x12, [x1]\n+\tld64b x14, [x1]\n \tld64b x16, [x1]\n-\tld64b x16, [sp]\n+\tld64b x18, [x1]\n+\tld64b x20, [x1]\n+\tld64b x22, [x1]\n \n /* Single-copy Atomic 64-byte Store without Return.  */\n \tst64b x0, [x1]\n-\tst64b x1, [x2]\n-\tst64b x2, [x4]\n-\tst64b x4, [x8]\n-\tst64b x8, [x16]\n+\tst64b x2, [x1]\n+\tst64b x4, [x1]\n+\tst64b x6, [x1]\n+\tst64b x8, [x1]\n+\tst64b x10, [x1]\n+\tst64b x12, [x1]\n+\tst64b x14, [x1]\n \tst64b x16, [x1]\n-\tst64b x16, [sp]\n+\tst64b x18, [x1]\n+\tst64b x20, [x1]\n+\tst64b x22, [x1]\n \n /* Single-copy Atomic 64-byte Store with Return.  */\n-\tst64bv x0, x1, [x2]\n-\tst64bv x1, x2, [x4]\n-\tst64bv x2, x4, [x8]\n-\tst64bv x4, x8, [x16]\n-\tst64bv x8, x16, [x30]\n-\tst64bv x16, x30, [x0]\n-\tst64bv x30, x1, [x2]\n-\tst64bv x30, x1, [sp]\n+\tst64bv x1, x0, [x2]\n+\tst64bv x0, x2, [x2]\n+\tst64bv x0, x4, [x2]\n+\tst64bv x0, x6, [x2]\n+\tst64bv x0, x8, [x2]\n+\tst64bv x0, x10, [x2]\n+\tst64bv x0, x12, [x2]\n+\tst64bv x0, x14, [x2]\n+\tst64bv x0, x16, [x2]\n+\tst64bv x0, x18, [x2]\n+\tst64bv x0, x20, [x2]\n+\tst64bv x0, x22, [x2]\n \n /* Single-copy Atomic 64-byte EL0 Store with Return.  */\n-\tst64bv0 x0, x1, [x2]\n-\tst64bv0 x1, x2, [x4]\n-\tst64bv0 x2, x4, [x8]\n-\tst64bv0 x4, x8, [x16]\n-\tst64bv0 x8, x16, [x30]\n-\tst64bv0 x16, x30, [x0]\n-\tst64bv0 x30, x1, [x2]\n-\tst64bv0 x30, x1, [sp]\n+\tst64bv0 x1, x0, [x2]\n+\tst64bv0 x0, x2, [x2]\n+\tst64bv0 x0, x4, [x2]\n+\tst64bv0 x0, x6, [x2]\n+\tst64bv0 x0, x8, [x2]\n+\tst64bv0 x0, x10, [x2]\n+\tst64bv0 x0, x12, [x2]\n+\tst64bv0 x0, x14, [x2]\n+\tst64bv0 x0, x16, [x2]\n+\tst64bv0 x0, x18, [x2]\n+\tst64bv0 x0, x20, [x2]\n+\tst64bv0 x0, x22, [x2]"
    },
    {
      "sha": "5a4f453d2aab511aabecd6c3c8ea403e5d05085c",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=8edca81ece5df534c1cdd1f8362e7b5b9b090cfa",
      "patch": "@@ -1,3 +1,7 @@\n+2020-11-09  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* opcode/aarch64.h (enum aarch64_opnd): Add new operand AARCH64_OPND_Rt_LS64.\n+\n 2020-11-06  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n \n \t* opcode/aarch64.h (AARCH64_FEATURE_PAC): Add new feature."
    },
    {
      "sha": "304c6cb936d0969ebef875cc06fb5f4c5e50c225",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=8edca81ece5df534c1cdd1f8362e7b5b9b090cfa",
      "patch": "@@ -201,6 +201,7 @@ enum aarch64_opnd\n   AARCH64_OPND_Rm,\t/* Integer register as source.  */\n   AARCH64_OPND_Rt,\t/* Integer register used in ld/st instructions.  */\n   AARCH64_OPND_Rt2,\t/* Integer register used in ld/st pair instructions.  */\n+  AARCH64_OPND_Rt_LS64,\t/* Integer register used in LS64 instructions.  */\n   AARCH64_OPND_Rt_SP,\t/* Integer Rt or SP used in STG instructions.  */\n   AARCH64_OPND_Rs,\t/* Integer register used in ld/st exclusive.  */\n   AARCH64_OPND_Ra,\t/* Integer register used in ddp_3src instructions.  */"
    },
    {
      "sha": "c90438c1f0d38c038383c0b50126c260001c7f74",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=8edca81ece5df534c1cdd1f8362e7b5b9b090cfa",
      "patch": "@@ -1,3 +1,13 @@\n+2020-11-09  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* aarch64-opc.c (aarch64_print_operand): Support operand AARCH64_OPND_Rt_LS64\n+\tprint.\n+\t* aarch64-tbl.h (struct aarch64_opcode): Update _LS64_INSN instructions with\n+\tRt_ls64 operands.\n+\t* aarch64-asm-2.c: Regenerated.\n+\t* aarch64-dis-2.c: Regenerated.\n+\t* aarch64-opc-2.c: Regenerated.\n+\n 2020-11-06  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n \n \t* aarch64-tbl.h (PAC): Handle for PAC feature."
    },
    {
      "sha": "b9771154542ca9c5758e6c74c69c90b0d93024f5",
      "filename": "opcodes/aarch64-asm-2.c",
      "status": "modified",
      "additions": 81,
      "deletions": 80,
      "changes": 161,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/opcodes/aarch64-asm-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/opcodes/aarch64-asm-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm-2.c?ref=8edca81ece5df534c1cdd1f8362e7b5b9b090cfa",
      "patch": "@@ -625,11 +625,11 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 10:\n     case 11:\n     case 12:\n-    case 16:\n+    case 13:\n     case 17:\n     case 18:\n     case 19:\n-    case 21:\n+    case 20:\n     case 22:\n     case 23:\n     case 24:\n@@ -639,7 +639,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 28:\n     case 29:\n     case 30:\n-    case 165:\n+    case 31:\n     case 166:\n     case 167:\n     case 168:\n@@ -649,7 +649,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 172:\n     case 173:\n     case 174:\n-    case 189:\n+    case 175:\n     case 190:\n     case 191:\n     case 192:\n@@ -658,34 +658,34 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 195:\n     case 196:\n     case 197:\n-    case 203:\n-    case 206:\n+    case 198:\n+    case 204:\n+    case 207:\n       return aarch64_ins_regno (self, info, code, inst, errors);\n-    case 14:\n-      return aarch64_ins_reg_extended (self, info, code, inst, errors);\n     case 15:\n+      return aarch64_ins_reg_extended (self, info, code, inst, errors);\n+    case 16:\n       return aarch64_ins_reg_shifted (self, info, code, inst, errors);\n-    case 20:\n+    case 21:\n       return aarch64_ins_ft (self, info, code, inst, errors);\n-    case 31:\n     case 32:\n     case 33:\n     case 34:\n-    case 209:\n-      return aarch64_ins_reglane (self, info, code, inst, errors);\n     case 35:\n-      return aarch64_ins_reglist (self, info, code, inst, errors);\n+    case 210:\n+      return aarch64_ins_reglane (self, info, code, inst, errors);\n     case 36:\n-      return aarch64_ins_ldst_reglist (self, info, code, inst, errors);\n+      return aarch64_ins_reglist (self, info, code, inst, errors);\n     case 37:\n-      return aarch64_ins_ldst_reglist_r (self, info, code, inst, errors);\n+      return aarch64_ins_ldst_reglist (self, info, code, inst, errors);\n     case 38:\n-      return aarch64_ins_ldst_elemlist (self, info, code, inst, errors);\n+      return aarch64_ins_ldst_reglist_r (self, info, code, inst, errors);\n     case 39:\n+      return aarch64_ins_ldst_elemlist (self, info, code, inst, errors);\n     case 40:\n     case 41:\n     case 42:\n-    case 52:\n+    case 43:\n     case 53:\n     case 54:\n     case 55:\n@@ -702,110 +702,110 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 66:\n     case 67:\n     case 68:\n-    case 80:\n+    case 69:\n     case 81:\n     case 82:\n     case 83:\n-    case 162:\n-    case 164:\n-    case 181:\n+    case 84:\n+    case 163:\n+    case 165:\n     case 182:\n     case 183:\n     case 184:\n     case 185:\n     case 186:\n     case 187:\n     case 188:\n-    case 208:\n+    case 189:\n+    case 209:\n       return aarch64_ins_imm (self, info, code, inst, errors);\n-    case 43:\n     case 44:\n-      return aarch64_ins_advsimd_imm_shift (self, info, code, inst, errors);\n     case 45:\n+      return aarch64_ins_advsimd_imm_shift (self, info, code, inst, errors);\n     case 46:\n     case 47:\n+    case 48:\n       return aarch64_ins_advsimd_imm_modified (self, info, code, inst, errors);\n-    case 51:\n-    case 152:\n+    case 52:\n+    case 153:\n       return aarch64_ins_fpimm (self, info, code, inst, errors);\n-    case 69:\n-    case 160:\n-      return aarch64_ins_limm (self, info, code, inst, errors);\n     case 70:\n-      return aarch64_ins_aimm (self, info, code, inst, errors);\n+    case 161:\n+      return aarch64_ins_limm (self, info, code, inst, errors);\n     case 71:\n-      return aarch64_ins_imm_half (self, info, code, inst, errors);\n+      return aarch64_ins_aimm (self, info, code, inst, errors);\n     case 72:\n+      return aarch64_ins_imm_half (self, info, code, inst, errors);\n+    case 73:\n       return aarch64_ins_fbits (self, info, code, inst, errors);\n-    case 74:\n     case 75:\n-    case 157:\n-      return aarch64_ins_imm_rotate2 (self, info, code, inst, errors);\n     case 76:\n-    case 156:\n     case 158:\n-      return aarch64_ins_imm_rotate1 (self, info, code, inst, errors);\n+      return aarch64_ins_imm_rotate2 (self, info, code, inst, errors);\n     case 77:\n+    case 157:\n+    case 159:\n+      return aarch64_ins_imm_rotate1 (self, info, code, inst, errors);\n     case 78:\n+    case 79:\n       return aarch64_ins_cond (self, info, code, inst, errors);\n-    case 84:\n-    case 93:\n-      return aarch64_ins_addr_simple (self, info, code, inst, errors);\n     case 85:\n-      return aarch64_ins_addr_regoff (self, info, code, inst, errors);\n+    case 94:\n+      return aarch64_ins_addr_simple (self, info, code, inst, errors);\n     case 86:\n+      return aarch64_ins_addr_regoff (self, info, code, inst, errors);\n     case 87:\n     case 88:\n-    case 90:\n-    case 92:\n-      return aarch64_ins_addr_simm (self, info, code, inst, errors);\n     case 89:\n-      return aarch64_ins_addr_simm10 (self, info, code, inst, errors);\n     case 91:\n+    case 93:\n+      return aarch64_ins_addr_simm (self, info, code, inst, errors);\n+    case 90:\n+      return aarch64_ins_addr_simm10 (self, info, code, inst, errors);\n+    case 92:\n       return aarch64_ins_addr_uimm12 (self, info, code, inst, errors);\n-    case 94:\n-      return aarch64_ins_addr_offset (self, info, code, inst, errors);\n     case 95:\n-      return aarch64_ins_simd_addr_post (self, info, code, inst, errors);\n+      return aarch64_ins_addr_offset (self, info, code, inst, errors);\n     case 96:\n-      return aarch64_ins_sysreg (self, info, code, inst, errors);\n+      return aarch64_ins_simd_addr_post (self, info, code, inst, errors);\n     case 97:\n-      return aarch64_ins_pstatefield (self, info, code, inst, errors);\n+      return aarch64_ins_sysreg (self, info, code, inst, errors);\n     case 98:\n+      return aarch64_ins_pstatefield (self, info, code, inst, errors);\n     case 99:\n     case 100:\n     case 101:\n     case 102:\n-      return aarch64_ins_sysins_op (self, info, code, inst, errors);\n     case 103:\n-    case 105:\n-      return aarch64_ins_barrier (self, info, code, inst, errors);\n+      return aarch64_ins_sysins_op (self, info, code, inst, errors);\n     case 104:\n-      return aarch64_ins_barrier_dsb_nxs (self, info, code, inst, errors);\n     case 106:\n-      return aarch64_ins_prfop (self, info, code, inst, errors);\n+      return aarch64_ins_barrier (self, info, code, inst, errors);\n+    case 105:\n+      return aarch64_ins_barrier_dsb_nxs (self, info, code, inst, errors);\n     case 107:\n-      return aarch64_ins_none (self, info, code, inst, errors);\n+      return aarch64_ins_prfop (self, info, code, inst, errors);\n     case 108:\n-      return aarch64_ins_hint (self, info, code, inst, errors);\n+      return aarch64_ins_none (self, info, code, inst, errors);\n     case 109:\n+      return aarch64_ins_hint (self, info, code, inst, errors);\n     case 110:\n-      return aarch64_ins_sve_addr_ri_s4 (self, info, code, inst, errors);\n     case 111:\n+      return aarch64_ins_sve_addr_ri_s4 (self, info, code, inst, errors);\n     case 112:\n     case 113:\n     case 114:\n-      return aarch64_ins_sve_addr_ri_s4xvl (self, info, code, inst, errors);\n     case 115:\n-      return aarch64_ins_sve_addr_ri_s6xvl (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_ri_s4xvl (self, info, code, inst, errors);\n     case 116:\n-      return aarch64_ins_sve_addr_ri_s9xvl (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_ri_s6xvl (self, info, code, inst, errors);\n     case 117:\n+      return aarch64_ins_sve_addr_ri_s9xvl (self, info, code, inst, errors);\n     case 118:\n     case 119:\n     case 120:\n-      return aarch64_ins_sve_addr_ri_u6 (self, info, code, inst, errors);\n     case 121:\n+      return aarch64_ins_sve_addr_ri_u6 (self, info, code, inst, errors);\n     case 122:\n     case 123:\n     case 124:\n@@ -819,61 +819,62 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 132:\n     case 133:\n     case 134:\n-      return aarch64_ins_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 135:\n+      return aarch64_ins_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 136:\n     case 137:\n     case 138:\n     case 139:\n     case 140:\n     case 141:\n     case 142:\n-      return aarch64_ins_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 143:\n+      return aarch64_ins_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 144:\n     case 145:\n     case 146:\n-      return aarch64_ins_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 147:\n-      return aarch64_ins_sve_addr_zz_lsl (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 148:\n-      return aarch64_ins_sve_addr_zz_sxtw (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zz_lsl (self, info, code, inst, errors);\n     case 149:\n-      return aarch64_ins_sve_addr_zz_uxtw (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zz_sxtw (self, info, code, inst, errors);\n     case 150:\n-      return aarch64_ins_sve_aimm (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zz_uxtw (self, info, code, inst, errors);\n     case 151:\n+      return aarch64_ins_sve_aimm (self, info, code, inst, errors);\n+    case 152:\n       return aarch64_ins_sve_asimm (self, info, code, inst, errors);\n-    case 153:\n-      return aarch64_ins_sve_float_half_one (self, info, code, inst, errors);\n     case 154:\n-      return aarch64_ins_sve_float_half_two (self, info, code, inst, errors);\n+      return aarch64_ins_sve_float_half_one (self, info, code, inst, errors);\n     case 155:\n+      return aarch64_ins_sve_float_half_two (self, info, code, inst, errors);\n+    case 156:\n       return aarch64_ins_sve_float_zero_one (self, info, code, inst, errors);\n-    case 159:\n+    case 160:\n       return aarch64_ins_inv_limm (self, info, code, inst, errors);\n-    case 161:\n+    case 162:\n       return aarch64_ins_sve_limm_mov (self, info, code, inst, errors);\n-    case 163:\n+    case 164:\n       return aarch64_ins_sve_scale (self, info, code, inst, errors);\n-    case 175:\n     case 176:\n     case 177:\n-      return aarch64_ins_sve_shlimm (self, info, code, inst, errors);\n     case 178:\n+      return aarch64_ins_sve_shlimm (self, info, code, inst, errors);\n     case 179:\n     case 180:\n+    case 181:\n       return aarch64_ins_sve_shrimm (self, info, code, inst, errors);\n-    case 198:\n     case 199:\n     case 200:\n     case 201:\n     case 202:\n+    case 203:\n       return aarch64_ins_sve_quad_index (self, info, code, inst, errors);\n-    case 204:\n-      return aarch64_ins_sve_index (self, info, code, inst, errors);\n     case 205:\n-    case 207:\n+      return aarch64_ins_sve_index (self, info, code, inst, errors);\n+    case 206:\n+    case 208:\n       return aarch64_ins_sve_reglist (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }"
    },
    {
      "sha": "f9fa3a616f2dea43e8cac09b480a77ccd36e5745",
      "filename": "opcodes/aarch64-dis-2.c",
      "status": "modified",
      "additions": 85,
      "deletions": 84,
      "changes": 169,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/opcodes/aarch64-dis-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/opcodes/aarch64-dis-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis-2.c?ref=8edca81ece5df534c1cdd1f8362e7b5b9b090cfa",
      "patch": "@@ -23816,14 +23816,14 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 6:\n     case 7:\n     case 8:\n-    case 10:\n+    case 9:\n     case 11:\n     case 12:\n-    case 16:\n+    case 13:\n     case 17:\n     case 18:\n     case 19:\n-    case 21:\n+    case 20:\n     case 22:\n     case 23:\n     case 24:\n@@ -23833,7 +23833,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 28:\n     case 29:\n     case 30:\n-    case 165:\n+    case 31:\n     case 166:\n     case 167:\n     case 168:\n@@ -23843,7 +23843,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 172:\n     case 173:\n     case 174:\n-    case 189:\n+    case 175:\n     case 190:\n     case 191:\n     case 192:\n@@ -23852,38 +23852,38 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 195:\n     case 196:\n     case 197:\n-    case 203:\n-    case 206:\n+    case 198:\n+    case 204:\n+    case 207:\n       return aarch64_ext_regno (self, info, code, inst, errors);\n-    case 9:\n+    case 10:\n       return aarch64_ext_regrt_sysins (self, info, code, inst, errors);\n-    case 13:\n-      return aarch64_ext_regno_pair (self, info, code, inst, errors);\n     case 14:\n-      return aarch64_ext_reg_extended (self, info, code, inst, errors);\n+      return aarch64_ext_regno_pair (self, info, code, inst, errors);\n     case 15:\n+      return aarch64_ext_reg_extended (self, info, code, inst, errors);\n+    case 16:\n       return aarch64_ext_reg_shifted (self, info, code, inst, errors);\n-    case 20:\n+    case 21:\n       return aarch64_ext_ft (self, info, code, inst, errors);\n-    case 31:\n     case 32:\n     case 33:\n     case 34:\n-    case 209:\n-      return aarch64_ext_reglane (self, info, code, inst, errors);\n     case 35:\n-      return aarch64_ext_reglist (self, info, code, inst, errors);\n+    case 210:\n+      return aarch64_ext_reglane (self, info, code, inst, errors);\n     case 36:\n-      return aarch64_ext_ldst_reglist (self, info, code, inst, errors);\n+      return aarch64_ext_reglist (self, info, code, inst, errors);\n     case 37:\n-      return aarch64_ext_ldst_reglist_r (self, info, code, inst, errors);\n+      return aarch64_ext_ldst_reglist (self, info, code, inst, errors);\n     case 38:\n-      return aarch64_ext_ldst_elemlist (self, info, code, inst, errors);\n+      return aarch64_ext_ldst_reglist_r (self, info, code, inst, errors);\n     case 39:\n+      return aarch64_ext_ldst_elemlist (self, info, code, inst, errors);\n     case 40:\n     case 41:\n     case 42:\n-    case 52:\n+    case 43:\n     case 53:\n     case 54:\n     case 55:\n@@ -23900,113 +23900,113 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 66:\n     case 67:\n     case 68:\n-    case 79:\n+    case 69:\n     case 80:\n     case 81:\n     case 82:\n     case 83:\n-    case 162:\n-    case 164:\n-    case 181:\n+    case 84:\n+    case 163:\n+    case 165:\n     case 182:\n     case 183:\n     case 184:\n     case 185:\n     case 186:\n     case 187:\n     case 188:\n-    case 208:\n+    case 189:\n+    case 209:\n       return aarch64_ext_imm (self, info, code, inst, errors);\n-    case 43:\n     case 44:\n-      return aarch64_ext_advsimd_imm_shift (self, info, code, inst, errors);\n     case 45:\n+      return aarch64_ext_advsimd_imm_shift (self, info, code, inst, errors);\n     case 46:\n     case 47:\n-      return aarch64_ext_advsimd_imm_modified (self, info, code, inst, errors);\n     case 48:\n+      return aarch64_ext_advsimd_imm_modified (self, info, code, inst, errors);\n+    case 49:\n       return aarch64_ext_shll_imm (self, info, code, inst, errors);\n-    case 51:\n-    case 152:\n+    case 52:\n+    case 153:\n       return aarch64_ext_fpimm (self, info, code, inst, errors);\n-    case 69:\n-    case 160:\n-      return aarch64_ext_limm (self, info, code, inst, errors);\n     case 70:\n-      return aarch64_ext_aimm (self, info, code, inst, errors);\n+    case 161:\n+      return aarch64_ext_limm (self, info, code, inst, errors);\n     case 71:\n-      return aarch64_ext_imm_half (self, info, code, inst, errors);\n+      return aarch64_ext_aimm (self, info, code, inst, errors);\n     case 72:\n+      return aarch64_ext_imm_half (self, info, code, inst, errors);\n+    case 73:\n       return aarch64_ext_fbits (self, info, code, inst, errors);\n-    case 74:\n     case 75:\n-    case 157:\n-      return aarch64_ext_imm_rotate2 (self, info, code, inst, errors);\n     case 76:\n-    case 156:\n     case 158:\n-      return aarch64_ext_imm_rotate1 (self, info, code, inst, errors);\n+      return aarch64_ext_imm_rotate2 (self, info, code, inst, errors);\n     case 77:\n+    case 157:\n+    case 159:\n+      return aarch64_ext_imm_rotate1 (self, info, code, inst, errors);\n     case 78:\n+    case 79:\n       return aarch64_ext_cond (self, info, code, inst, errors);\n-    case 84:\n-    case 93:\n-      return aarch64_ext_addr_simple (self, info, code, inst, errors);\n     case 85:\n-      return aarch64_ext_addr_regoff (self, info, code, inst, errors);\n+    case 94:\n+      return aarch64_ext_addr_simple (self, info, code, inst, errors);\n     case 86:\n+      return aarch64_ext_addr_regoff (self, info, code, inst, errors);\n     case 87:\n     case 88:\n-    case 90:\n-    case 92:\n-      return aarch64_ext_addr_simm (self, info, code, inst, errors);\n     case 89:\n-      return aarch64_ext_addr_simm10 (self, info, code, inst, errors);\n     case 91:\n+    case 93:\n+      return aarch64_ext_addr_simm (self, info, code, inst, errors);\n+    case 90:\n+      return aarch64_ext_addr_simm10 (self, info, code, inst, errors);\n+    case 92:\n       return aarch64_ext_addr_uimm12 (self, info, code, inst, errors);\n-    case 94:\n-      return aarch64_ext_addr_offset (self, info, code, inst, errors);\n     case 95:\n-      return aarch64_ext_simd_addr_post (self, info, code, inst, errors);\n+      return aarch64_ext_addr_offset (self, info, code, inst, errors);\n     case 96:\n-      return aarch64_ext_sysreg (self, info, code, inst, errors);\n+      return aarch64_ext_simd_addr_post (self, info, code, inst, errors);\n     case 97:\n-      return aarch64_ext_pstatefield (self, info, code, inst, errors);\n+      return aarch64_ext_sysreg (self, info, code, inst, errors);\n     case 98:\n+      return aarch64_ext_pstatefield (self, info, code, inst, errors);\n     case 99:\n     case 100:\n     case 101:\n     case 102:\n-      return aarch64_ext_sysins_op (self, info, code, inst, errors);\n     case 103:\n-    case 105:\n-      return aarch64_ext_barrier (self, info, code, inst, errors);\n+      return aarch64_ext_sysins_op (self, info, code, inst, errors);\n     case 104:\n-      return aarch64_ext_barrier_dsb_nxs (self, info, code, inst, errors);\n     case 106:\n-      return aarch64_ext_prfop (self, info, code, inst, errors);\n+      return aarch64_ext_barrier (self, info, code, inst, errors);\n+    case 105:\n+      return aarch64_ext_barrier_dsb_nxs (self, info, code, inst, errors);\n     case 107:\n-      return aarch64_ext_none (self, info, code, inst, errors);\n+      return aarch64_ext_prfop (self, info, code, inst, errors);\n     case 108:\n-      return aarch64_ext_hint (self, info, code, inst, errors);\n+      return aarch64_ext_none (self, info, code, inst, errors);\n     case 109:\n+      return aarch64_ext_hint (self, info, code, inst, errors);\n     case 110:\n-      return aarch64_ext_sve_addr_ri_s4 (self, info, code, inst, errors);\n     case 111:\n+      return aarch64_ext_sve_addr_ri_s4 (self, info, code, inst, errors);\n     case 112:\n     case 113:\n     case 114:\n-      return aarch64_ext_sve_addr_ri_s4xvl (self, info, code, inst, errors);\n     case 115:\n-      return aarch64_ext_sve_addr_ri_s6xvl (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_ri_s4xvl (self, info, code, inst, errors);\n     case 116:\n-      return aarch64_ext_sve_addr_ri_s9xvl (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_ri_s6xvl (self, info, code, inst, errors);\n     case 117:\n+      return aarch64_ext_sve_addr_ri_s9xvl (self, info, code, inst, errors);\n     case 118:\n     case 119:\n     case 120:\n-      return aarch64_ext_sve_addr_ri_u6 (self, info, code, inst, errors);\n     case 121:\n+      return aarch64_ext_sve_addr_ri_u6 (self, info, code, inst, errors);\n     case 122:\n     case 123:\n     case 124:\n@@ -24020,61 +24020,62 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 132:\n     case 133:\n     case 134:\n-      return aarch64_ext_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 135:\n+      return aarch64_ext_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 136:\n     case 137:\n     case 138:\n     case 139:\n     case 140:\n     case 141:\n     case 142:\n-      return aarch64_ext_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 143:\n+      return aarch64_ext_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 144:\n     case 145:\n     case 146:\n-      return aarch64_ext_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 147:\n-      return aarch64_ext_sve_addr_zz_lsl (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 148:\n-      return aarch64_ext_sve_addr_zz_sxtw (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_zz_lsl (self, info, code, inst, errors);\n     case 149:\n-      return aarch64_ext_sve_addr_zz_uxtw (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_zz_sxtw (self, info, code, inst, errors);\n     case 150:\n-      return aarch64_ext_sve_aimm (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_zz_uxtw (self, info, code, inst, errors);\n     case 151:\n+      return aarch64_ext_sve_aimm (self, info, code, inst, errors);\n+    case 152:\n       return aarch64_ext_sve_asimm (self, info, code, inst, errors);\n-    case 153:\n-      return aarch64_ext_sve_float_half_one (self, info, code, inst, errors);\n     case 154:\n-      return aarch64_ext_sve_float_half_two (self, info, code, inst, errors);\n+      return aarch64_ext_sve_float_half_one (self, info, code, inst, errors);\n     case 155:\n+      return aarch64_ext_sve_float_half_two (self, info, code, inst, errors);\n+    case 156:\n       return aarch64_ext_sve_float_zero_one (self, info, code, inst, errors);\n-    case 159:\n+    case 160:\n       return aarch64_ext_inv_limm (self, info, code, inst, errors);\n-    case 161:\n+    case 162:\n       return aarch64_ext_sve_limm_mov (self, info, code, inst, errors);\n-    case 163:\n+    case 164:\n       return aarch64_ext_sve_scale (self, info, code, inst, errors);\n-    case 175:\n     case 176:\n     case 177:\n-      return aarch64_ext_sve_shlimm (self, info, code, inst, errors);\n     case 178:\n+      return aarch64_ext_sve_shlimm (self, info, code, inst, errors);\n     case 179:\n     case 180:\n+    case 181:\n       return aarch64_ext_sve_shrimm (self, info, code, inst, errors);\n-    case 198:\n     case 199:\n     case 200:\n     case 201:\n     case 202:\n+    case 203:\n       return aarch64_ext_sve_quad_index (self, info, code, inst, errors);\n-    case 204:\n-      return aarch64_ext_sve_index (self, info, code, inst, errors);\n     case 205:\n-    case 207:\n+      return aarch64_ext_sve_index (self, info, code, inst, errors);\n+    case 206:\n+    case 208:\n       return aarch64_ext_sve_reglist (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }"
    },
    {
      "sha": "f5c67095b990626bcda99430c90e834678c7b557",
      "filename": "opcodes/aarch64-opc-2.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/opcodes/aarch64-opc-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/opcodes/aarch64-opc-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc-2.c?ref=8edca81ece5df534c1cdd1f8362e7b5b9b090cfa",
      "patch": "@@ -30,6 +30,7 @@ const struct aarch64_operand aarch64_operands[] =\n   {AARCH64_OPND_CLASS_INT_REG, \"Rm\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rm}, \"an integer register\"},\n   {AARCH64_OPND_CLASS_INT_REG, \"Rt\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rt}, \"an integer register\"},\n   {AARCH64_OPND_CLASS_INT_REG, \"Rt2\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rt2}, \"an integer register\"},\n+  {AARCH64_OPND_CLASS_INT_REG, \"Rt_LS64\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rt}, \"an integer register\"},\n   {AARCH64_OPND_CLASS_INT_REG, \"Rt_SP\", OPD_F_MAYBE_SP | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rt}, \"an integer or stack pointer register\"},\n   {AARCH64_OPND_CLASS_INT_REG, \"Rs\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rs}, \"an integer register\"},\n   {AARCH64_OPND_CLASS_INT_REG, \"Ra\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Ra}, \"an integer register\"},"
    },
    {
      "sha": "67429e9720642f003814a9dc057c7d51d728b216",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=8edca81ece5df534c1cdd1f8362e7b5b9b090cfa",
      "patch": "@@ -3174,6 +3174,7 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n     case AARCH64_OPND_Rt2:\n     case AARCH64_OPND_Rs:\n     case AARCH64_OPND_Ra:\n+    case AARCH64_OPND_Rt_LS64:\n     case AARCH64_OPND_Rt_SYS:\n     case AARCH64_OPND_PAIRREG:\n     case AARCH64_OPND_SVE_Rm:"
    },
    {
      "sha": "a54b96839196c45a15b38f111012b4c8a609f464",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8edca81ece5df534c1cdd1f8362e7b5b9b090cfa/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=8edca81ece5df534c1cdd1f8362e7b5b9b090cfa",
      "patch": "@@ -3646,10 +3646,10 @@ struct aarch64_opcode aarch64_opcode_table[] =\n   CORE_INSN (\"ldrsw\", 0x98000000, 0xff000000, loadlit, OP_LDRSW_LIT, OP2 (Rt, ADDR_PCREL19),    QL_X_PCREL, 0),\n   CORE_INSN (\"prfm\",  0xd8000000, 0xff000000, loadlit, OP_PRFM_LIT,  OP2 (PRFOP, ADDR_PCREL19), QL_PRFM_PCREL, 0),\n   /* Atomic 64-byte load/store in Armv8.7.  */\n-  _LS64_INSN (\"ld64b\",   0xf83fd000, 0xfffffc00, ldstexcl, OP2 (Rt, ADDR_SIMPLE), QL_X1NIL, 0),\n-  _LS64_INSN (\"st64b\",   0xf83f9000, 0xfffffc00, ldstexcl, OP2 (Rt, ADDR_SIMPLE), QL_X1NIL, 0),\n-  _LS64_INSN (\"st64bv\",  0xf820b000, 0xffe0fc00, ldstexcl, OP3 (Rs, Rt, ADDR_SIMPLE), QL_X2NIL, 0),\n-  _LS64_INSN (\"st64bv0\", 0xf820a000, 0xffe0fc00, ldstexcl, OP3 (Rs, Rt, ADDR_SIMPLE), QL_X2NIL, 0),\n+  _LS64_INSN (\"ld64b\",   0xf83fd000, 0xfffffc00, ldstexcl, OP2 (Rt_LS64, ADDR_SIMPLE), QL_X1NIL, 0),\n+  _LS64_INSN (\"st64b\",   0xf83f9000, 0xfffffc00, ldstexcl, OP2 (Rt_LS64, ADDR_SIMPLE), QL_X1NIL, 0),\n+  _LS64_INSN (\"st64bv\",  0xf820b000, 0xffe0fc00, ldstexcl, OP3 (Rs, Rt_LS64, ADDR_SIMPLE), QL_X2NIL, 0),\n+  _LS64_INSN (\"st64bv0\", 0xf820a000, 0xffe0fc00, ldstexcl, OP3 (Rs, Rt_LS64, ADDR_SIMPLE), QL_X2NIL, 0),\n   /* Logical (immediate).  */\n   CORE_INSN (\"and\", 0x12000000, 0x7f800000, log_imm, 0, OP3 (Rd_SP, Rn, LIMM), QL_R2NIL, F_HAS_ALIAS | F_SF),\n   CORE_INSN (\"bic\", 0x12000000, 0x7f800000, log_imm, OP_BIC, OP3 (Rd_SP, Rn, LIMM), QL_R2NIL, F_ALIAS | F_PSEUDO | F_SF),\n@@ -5181,6 +5181,7 @@ struct aarch64_opcode aarch64_opcode_table[] =\n     Y(INT_REG, regno, \"Rm\", 0, F(FLD_Rm), \"an integer register\")\t\\\n     Y(INT_REG, regno, \"Rt\", 0, F(FLD_Rt), \"an integer register\")\t\\\n     Y(INT_REG, regno, \"Rt2\", 0, F(FLD_Rt2), \"an integer register\")\t\\\n+    Y(INT_REG, regno, \"Rt_LS64\", 0, F(FLD_Rt), \"an integer register\")\t\\\n     Y(INT_REG, regno, \"Rt_SP\", OPD_F_MAYBE_SP, F(FLD_Rt),\t\t\\\n       \"an integer or stack pointer register\")\t\t\t\t\\\n     Y(INT_REG, regno, \"Rs\", 0, F(FLD_Rs), \"an integer register\")\t\\"
    }
  ]
}