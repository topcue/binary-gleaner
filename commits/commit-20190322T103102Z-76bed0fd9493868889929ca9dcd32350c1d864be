{
  "sha": "76bed0fd9493868889929ca9dcd32350c1d864be",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzZiZWQwZmQ5NDkzODY4ODg5OTI5Y2E5ZGNkMzIzNTBjMWQ4NjRiZQ==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-03-22T10:31:02Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-03-22T10:31:02Z"
    },
    "message": "AArch64: Read pauth registers\n\nInitialise the pauth registers when creating a target description, and store\nthe regnum of the first pauth register.\n\nUse ptrace to read the registers in the pauth feature.\n\nDo not allow the registers to be written.\n\ngdb/ChangeLog:\n\n\t* aarch64-linux-nat.c (fetch_pauth_masks_from_thread): New\n\tfunction.\n\t(aarch64_linux_nat_target::fetch_registers): Read pauth registers.\n\t* aarch64-tdep.c (aarch64_cannot_store_register): New function.\n\t(aarch64_gdbarch_init): Add puth registers.\n\t* aarch64-tdep.h (struct gdbarch_tdep): Add pauth features.\n\t* arch/aarch64.h (AARCH64_PAUTH_DMASK_REGNUM): New define.\n\t(AARCH64_PAUTH_CMASK_REGNUM): Likewise.",
    "tree": {
      "sha": "e799ee78fc4b6802da976a837deea5a6f44c63a2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e799ee78fc4b6802da976a837deea5a6f44c63a2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/76bed0fd9493868889929ca9dcd32350c1d864be",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/76bed0fd9493868889929ca9dcd32350c1d864be",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/76bed0fd9493868889929ca9dcd32350c1d864be",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/76bed0fd9493868889929ca9dcd32350c1d864be/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ee4fbcfa26eb4a2a3666f7c1cc31447c3cffa023",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ee4fbcfa26eb4a2a3666f7c1cc31447c3cffa023",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ee4fbcfa26eb4a2a3666f7c1cc31447c3cffa023"
    }
  ],
  "stats": {
    "total": 101,
    "additions": 101,
    "deletions": 0
  },
  "files": [
    {
      "sha": "78ec7045d338b66afe47003970d7715d3ba1e8ca",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/76bed0fd9493868889929ca9dcd32350c1d864be/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/76bed0fd9493868889929ca9dcd32350c1d864be/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=76bed0fd9493868889929ca9dcd32350c1d864be",
      "patch": "@@ -1,3 +1,15 @@\n+2019-03-22  Alan Hayward  <alan.hayward@arm.com>\n+\t    Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* aarch64-linux-nat.c (fetch_pauth_masks_from_thread): New\n+\tfunction.\n+\t(aarch64_linux_nat_target::fetch_registers): Read pauth registers.\n+\t* aarch64-tdep.c (aarch64_cannot_store_register): New function.\n+\t(aarch64_gdbarch_init): Add puth registers.\n+\t* aarch64-tdep.h (struct gdbarch_tdep): Add pauth features.\n+\t* arch/aarch64.h (AARCH64_PAUTH_DMASK_REGNUM): New define.\n+\t(AARCH64_PAUTH_CMASK_REGNUM): Likewise.\n+\n 2019-03-22  Alan Hayward  <alan.hayward@arm.com>\n \t    Jiong Wang  <jiong.wang@arm.com>\n "
    },
    {
      "sha": "86c7e87dd5e087436a557bfcf760b68b5379d4cf",
      "filename": "gdb/aarch64-linux-nat.c",
      "status": "modified",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/76bed0fd9493868889929ca9dcd32350c1d864be/gdb/aarch64-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/76bed0fd9493868889929ca9dcd32350c1d864be/gdb/aarch64-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-nat.c?ref=76bed0fd9493868889929ca9dcd32350c1d864be",
      "patch": "@@ -423,6 +423,31 @@ store_sveregs_to_thread (struct regcache *regcache)\n     perror_with_name (_(\"Unable to store sve registers\"));\n }\n \n+/* Fill GDB's register array with the pointer authentication mask values from\n+   the current thread.  */\n+\n+static void\n+fetch_pauth_masks_from_thread (struct regcache *regcache)\n+{\n+  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  int ret;\n+  struct iovec iovec;\n+  uint64_t pauth_regset[2] = {0, 0};\n+  int tid = regcache->ptid ().lwp ();\n+\n+  iovec.iov_base = &pauth_regset;\n+  iovec.iov_len = sizeof (pauth_regset);\n+\n+  ret = ptrace (PTRACE_GETREGSET, tid, NT_ARM_PAC_MASK, &iovec);\n+  if (ret != 0)\n+    perror_with_name (_(\"unable to fetch pauth registers.\"));\n+\n+  regcache->raw_supply (AARCH64_PAUTH_DMASK_REGNUM (tdep->pauth_reg_base),\n+\t\t\t&pauth_regset[0]);\n+  regcache->raw_supply (AARCH64_PAUTH_CMASK_REGNUM (tdep->pauth_reg_base),\n+\t\t\t&pauth_regset[1]);\n+}\n+\n /* Implement the \"fetch_registers\" target_ops method.  */\n \n void\n@@ -438,13 +463,23 @@ aarch64_linux_nat_target::fetch_registers (struct regcache *regcache,\n \tfetch_sveregs_from_thread (regcache);\n       else\n \tfetch_fpregs_from_thread (regcache);\n+\n+      if (tdep->has_pauth ())\n+\tfetch_pauth_masks_from_thread (regcache);\n     }\n   else if (regno < AARCH64_V0_REGNUM)\n     fetch_gregs_from_thread (regcache);\n   else if (tdep->has_sve ())\n     fetch_sveregs_from_thread (regcache);\n   else\n     fetch_fpregs_from_thread (regcache);\n+\n+  if (tdep->has_pauth ())\n+    {\n+      if (regno == AARCH64_PAUTH_DMASK_REGNUM (tdep->pauth_reg_base)\n+\t  || regno == AARCH64_PAUTH_CMASK_REGNUM (tdep->pauth_reg_base))\n+\tfetch_pauth_masks_from_thread (regcache);\n+    }\n }\n \n /* Implement the \"store_registers\" target_ops method.  */"
    },
    {
      "sha": "66fdd7bf05ac3a293a4dcd57bde8fce5fe0df6d8",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/76bed0fd9493868889929ca9dcd32350c1d864be/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/76bed0fd9493868889929ca9dcd32350c1d864be/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=76bed0fd9493868889929ca9dcd32350c1d864be",
      "patch": "@@ -175,6 +175,14 @@ static const char *const aarch64_sve_register_names[] =\n   \"ffr\", \"vg\"\n };\n \n+static const char *const aarch64_pauth_register_names[] =\n+{\n+  /* Authentication mask for data pointer.  */\n+  \"pauth_dmask\",\n+  /* Authentication mask for code pointer.  */\n+  \"pauth_cmask\"\n+};\n+\n /* AArch64 prologue cache structure.  */\n struct aarch64_prologue_cache\n {\n@@ -2936,6 +2944,21 @@ aarch64_add_reggroups (struct gdbarch *gdbarch)\n   reggroup_add (gdbarch, restore_reggroup);\n }\n \n+/* Implement the \"cannot_store_register\" gdbarch method.  */\n+\n+static int\n+aarch64_cannot_store_register (struct gdbarch *gdbarch, int regnum)\n+{\n+  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+\n+  if (!tdep->has_pauth ())\n+    return 0;\n+\n+  /* Pointer authentication registers are read-only.  */\n+  return (regnum == AARCH64_PAUTH_DMASK_REGNUM (tdep->pauth_reg_base)\n+\t  || regnum == AARCH64_PAUTH_CMASK_REGNUM (tdep->pauth_reg_base));\n+}\n+\n /* Initialize the current architecture based on INFO.  If possible,\n    re-use an architecture from ARCHES, which is a list of\n    architectures already created during this debugging session.\n@@ -2956,8 +2979,10 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   const struct tdesc_feature *feature_core;\n   const struct tdesc_feature *feature_fpu;\n   const struct tdesc_feature *feature_sve;\n+  const struct tdesc_feature *feature_pauth;\n   int num_regs = 0;\n   int num_pseudo_regs = 0;\n+  int first_pauth_regnum = -1;\n \n   /* Ensure we always have a target description.  */\n   if (!tdesc_has_registers (tdesc))\n@@ -2967,6 +2992,7 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   feature_core = tdesc_find_feature (tdesc, \"org.gnu.gdb.aarch64.core\");\n   feature_fpu = tdesc_find_feature (tdesc, \"org.gnu.gdb.aarch64.fpu\");\n   feature_sve = tdesc_find_feature (tdesc, \"org.gnu.gdb.aarch64.sve\");\n+  feature_pauth = tdesc_find_feature (tdesc, \"org.gnu.gdb.aarch64.pauth\");\n \n   if (feature_core == NULL)\n     return NULL;\n@@ -3021,6 +3047,21 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n       num_pseudo_regs += 32;\t/* add the Bn scalar register pseudos */\n     }\n \n+  /* Add the pauth registers.  */\n+  if (feature_pauth != NULL)\n+    {\n+      first_pauth_regnum = num_regs;\n+\n+      /* Validate the descriptor provides the mandatory PAUTH registers and\n+\t allocate their numbers.  */\n+      for (i = 0; i < ARRAY_SIZE (aarch64_pauth_register_names); i++)\n+\tvalid_p &= tdesc_numbered_register (feature_pauth, tdesc_data,\n+\t\t\t\t\t    first_pauth_regnum + i,\n+\t\t\t\t\t    aarch64_pauth_register_names[i]);\n+\n+      num_regs += i;\n+    }\n+\n   if (!valid_p)\n     {\n       tdesc_data_cleanup (tdesc_data);\n@@ -3054,6 +3095,7 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   tdep->jb_pc = -1;\t\t/* Longjump support not enabled by default.  */\n   tdep->jb_elt_size = 8;\n   tdep->vq = aarch64_get_tdesc_vq (tdesc);\n+  tdep->pauth_reg_base = first_pauth_regnum;\n \n   set_gdbarch_push_dummy_call (gdbarch, aarch64_push_dummy_call);\n   set_gdbarch_frame_align (gdbarch, aarch64_frame_align);\n@@ -3084,6 +3126,7 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   set_tdesc_pseudo_register_type (gdbarch, aarch64_pseudo_register_type);\n   set_tdesc_pseudo_register_reggroup_p (gdbarch,\n \t\t\t\t\taarch64_pseudo_register_reggroup_p);\n+  set_gdbarch_cannot_store_register (gdbarch, aarch64_cannot_store_register);\n \n   /* ABI */\n   set_gdbarch_short_bit (gdbarch, 16);"
    },
    {
      "sha": "f9fc8965f02db204f64e43a987102a92beb15ee3",
      "filename": "gdb/aarch64-tdep.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/76bed0fd9493868889929ca9dcd32350c1d864be/gdb/aarch64-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/76bed0fd9493868889929ca9dcd32350c1d864be/gdb/aarch64-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.h?ref=76bed0fd9493868889929ca9dcd32350c1d864be",
      "patch": "@@ -87,6 +87,14 @@ struct gdbarch_tdep\n   {\n     return vq != 0;\n   }\n+\n+  int pauth_reg_base;\n+\n+  /* Returns true if the target supports pauth.  */\n+  bool has_pauth () const\n+  {\n+    return pauth_reg_base != -1;\n+  }\n };\n \n const target_desc *aarch64_read_description (uint64_t vq, bool pauth_p);"
    },
    {
      "sha": "8c80b7be62426c1c32cbfef18d3bd98b1d354bf5",
      "filename": "gdb/arch/aarch64.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/76bed0fd9493868889929ca9dcd32350c1d864be/gdb/arch/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/76bed0fd9493868889929ca9dcd32350c1d864be/gdb/arch/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/aarch64.h?ref=76bed0fd9493868889929ca9dcd32350c1d864be",
      "patch": "@@ -66,6 +66,9 @@ enum aarch64_regnum\n #define AARCH64_B0_REGNUM (AARCH64_H0_REGNUM + 32)\n #define AARCH64_SVE_V0_REGNUM (AARCH64_B0_REGNUM + 32)\n \n+#define AARCH64_PAUTH_DMASK_REGNUM(pauth_reg_base) (pauth_reg_base)\n+#define AARCH64_PAUTH_CMASK_REGNUM(pauth_reg_base) (pauth_reg_base + 1)\n+\n #define AARCH64_X_REGS_NUM 31\n #define AARCH64_V_REGS_NUM 32\n #define AARCH64_SVE_Z_REGS_NUM AARCH64_V_REGS_NUM"
    }
  ]
}