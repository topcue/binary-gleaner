{
  "sha": "e01e1cee39777b6278ff01502742347247e8dfd7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTAxZTFjZWUzOTc3N2I2Mjc4ZmYwMTUwMjc0MjM0NzI0N2U4ZGZkNw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-20T23:47:53Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-21T08:56:35Z"
    },
    "message": "Rearrange symbol_create parameters\n\nThese functions take an offset within frag, frag within section, and\nsection parameter.  So it makes sense to order the parameters as\nsection, frag, offset.\n\n\t* symbols.h (symbol_new, symbol_create, local_symbol_make),\n\t(symbol_temp_new): Arrange params as section, frag, offset.\n\t* symbols.c: Adjust to suit.\n\t* as.c: Likewise.\n\t* cgen.c: Likewise.\n\t* dwarf2dbg.c: Likewise.\n\t* ecoff.c: Likewise.\n\t* expr.c: Likewise.\n\t* itbl-ops.c: Likewise.\n\t* read.c: Likewise.\n\t* stabs.c: Likewise.\n\t* subsegs.c: Likewise.\n\t* config/obj-coff.c: Likewise.\n\t* config/obj-elf.c: Likewise.\n\t* config/obj-macho.c: Likewise.\n\t* config/tc-aarch64.c: Likewise.\n\t* config/tc-alpha.c: Likewise.\n\t* config/tc-arc.c: Likewise.\n\t* config/tc-arm.c: Likewise.\n\t* config/tc-avr.c: Likewise.\n\t* config/tc-cr16.c: Likewise.\n\t* config/tc-cris.c: Likewise.\n\t* config/tc-csky.c: Likewise.\n\t* config/tc-dlx.c: Likewise.\n\t* config/tc-hppa.c: Likewise.\n\t* config/tc-i386.c: Likewise.\n\t* config/tc-ia64.c: Likewise.\n\t* config/tc-m32r.c: Likewise.\n\t* config/tc-m68k.c: Likewise.\n\t* config/tc-mips.c: Likewise.\n\t* config/tc-mmix.c: Likewise.\n\t* config/tc-mn10200.c: Likewise.\n\t* config/tc-mn10300.c: Likewise.\n\t* config/tc-nds32.c: Likewise.\n\t* config/tc-nios2.c: Likewise.\n\t* config/tc-ppc.c: Likewise.\n\t* config/tc-riscv.c: Likewise.\n\t* config/tc-s390.c: Likewise.\n\t* config/tc-sh.c: Likewise.\n\t* config/tc-tic4x.c: Likewise.\n\t* config/tc-tic54x.c: Likewise.\n\t* config/tc-xtensa.c: Likewise.",
    "tree": {
      "sha": "59c5d6f34e19555ac544023bd8d096d17f4fd024",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/59c5d6f34e19555ac544023bd8d096d17f4fd024"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e01e1cee39777b6278ff01502742347247e8dfd7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e01e1cee39777b6278ff01502742347247e8dfd7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e01e1cee39777b6278ff01502742347247e8dfd7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e01e1cee39777b6278ff01502742347247e8dfd7/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d285ba8d064bbcfbf518cd6cf0142b5722c8215a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d285ba8d064bbcfbf518cd6cf0142b5722c8215a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d285ba8d064bbcfbf518cd6cf0142b5722c8215a"
    }
  ],
  "stats": {
    "total": 558,
    "additions": 292,
    "deletions": 266
  },
  "files": [
    {
      "sha": "341530fdaf0de05cdf446ebbd6cae67c69457d55",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -1,3 +1,48 @@\n+2020-08-21  Alan Modra  <amodra@gmail.com>\n+\n+\t* symbols.h (symbol_new, symbol_create, local_symbol_make),\n+\t(symbol_temp_new): Arrange params as section, frag, offset.\n+\t* symbols.c: Adjust to suit.\n+\t* as.c: Likewise.\n+\t* cgen.c: Likewise.\n+\t* dwarf2dbg.c: Likewise.\n+\t* ecoff.c: Likewise.\n+\t* expr.c: Likewise.\n+\t* itbl-ops.c: Likewise.\n+\t* read.c: Likewise.\n+\t* stabs.c: Likewise.\n+\t* subsegs.c: Likewise.\n+\t* config/obj-coff.c: Likewise.\n+\t* config/obj-elf.c: Likewise.\n+\t* config/obj-macho.c: Likewise.\n+\t* config/tc-aarch64.c: Likewise.\n+\t* config/tc-alpha.c: Likewise.\n+\t* config/tc-arc.c: Likewise.\n+\t* config/tc-arm.c: Likewise.\n+\t* config/tc-avr.c: Likewise.\n+\t* config/tc-cr16.c: Likewise.\n+\t* config/tc-cris.c: Likewise.\n+\t* config/tc-csky.c: Likewise.\n+\t* config/tc-dlx.c: Likewise.\n+\t* config/tc-hppa.c: Likewise.\n+\t* config/tc-i386.c: Likewise.\n+\t* config/tc-ia64.c: Likewise.\n+\t* config/tc-m32r.c: Likewise.\n+\t* config/tc-m68k.c: Likewise.\n+\t* config/tc-mips.c: Likewise.\n+\t* config/tc-mmix.c: Likewise.\n+\t* config/tc-mn10200.c: Likewise.\n+\t* config/tc-mn10300.c: Likewise.\n+\t* config/tc-nds32.c: Likewise.\n+\t* config/tc-nios2.c: Likewise.\n+\t* config/tc-ppc.c: Likewise.\n+\t* config/tc-riscv.c: Likewise.\n+\t* config/tc-s390.c: Likewise.\n+\t* config/tc-sh.c: Likewise.\n+\t* config/tc-tic4x.c: Likewise.\n+\t* config/tc-tic54x.c: Likewise.\n+\t* config/tc-xtensa.c: Likewise.\n+\n 2020-08-21  Cooper Qu  <cooper.qu@linux.alibaba.com>\n \n \t* config/tc-csky.c (csky_insn_info): Add member last_isize."
    },
    {
      "sha": "a703d7a67273508e55a504174113902318b46c9b",
      "filename": "gas/as.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/as.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/as.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/as.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -1368,7 +1368,7 @@ main (int argc, char ** argv)\n   dwarf2_init ();\n \n   local_symbol_make (\".gasversion.\", absolute_section,\n-\t\t     BFD_VERSION / 10000UL, &predefined_address_frag);\n+\t\t     &predefined_address_frag, BFD_VERSION / 10000UL);\n \n   /* Now that we have fully initialized, and have created the output\n      file, define any symbols requested by --defsym command line\n@@ -1378,8 +1378,8 @@ main (int argc, char ** argv)\n       symbolS *sym;\n       struct defsym_list *next;\n \n-      sym = symbol_new (defsyms->name, absolute_section, defsyms->value,\n-\t\t\t&zero_address_frag);\n+      sym = symbol_new (defsyms->name, absolute_section,\n+\t\t\t&zero_address_frag, defsyms->value);\n       /* Make symbols defined on the command line volatile, so that they\n \t can be redefined inside a source file.  This makes this assembler's\n \t behaviour compatible with earlier versions, but it may not be"
    },
    {
      "sha": "0bc44f6c08c2881602772c7904170a6035ef9f73",
      "filename": "gas/cgen.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/cgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/cgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/cgen.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -61,7 +61,7 @@ cgen_asm_record_register (char *name, int number)\n   /* Use symbol_create here instead of symbol_new so we don't try to\n      output registers into the object file's symbol table.  */\n   symbol_table_insert (symbol_create (name, reg_section,\n-\t\t\t\t      number, &zero_address_frag));\n+\t\t\t\t      &zero_address_frag, number));\n }\n \n /* We need to keep a list of fixups.  We can't simply generate them as\n@@ -437,8 +437,8 @@ gas_cgen_parse_operand (CGEN_CPU_DESC cd ATTRIBUTE_UNUSED,\n \t\t prematurely dives into the symbol evaluator, and in this\n \t\t case it gets a bad answer, so we manually create the\n \t\t expression symbol we want here.  */\n-\t      stmp = symbol_create (FAKE_LABEL_NAME, expr_section, 0,\n-\t\t\t\t    & zero_address_frag);\n+\t      stmp = symbol_create (FAKE_LABEL_NAME, expr_section,\n+\t\t\t\t    &zero_address_frag, 0);\n \t      symbol_set_value_expression (stmp, & exp);\n \t    }\n \t  else"
    },
    {
      "sha": "7e26e58cb9557541ad0ddbb9ea730fd9eab0f05d",
      "filename": "gas/config/obj-coff.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/obj-coff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/obj-coff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/obj-coff.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -144,8 +144,7 @@ tag_find_or_make (char *name)\n \n   if ((symbolP = tag_find (name)) == NULL)\n     {\n-      symbolP = symbol_new (name, undefined_section,\n-\t\t\t    0, &zero_address_frag);\n+      symbolP = symbol_new (name, undefined_section, &zero_address_frag, 0);\n \n       tag_insert (S_GET_NAME (symbolP), symbolP);\n       symbol_table_insert (symbolP);\n@@ -324,7 +323,7 @@ c_dot_file_symbol (const char *filename, int appfile ATTRIBUTE_UNUSED)\n \n   /* BFD converts filename to a .file symbol with an aux entry.  It\n      also handles chaining.  */\n-  symbolP = symbol_new (filename, bfd_abs_section_ptr, 0, &zero_address_frag);\n+  symbolP = symbol_new (filename, bfd_abs_section_ptr, &zero_address_frag, 0);\n \n   S_SET_STORAGE_CLASS (symbolP, C_FILE);\n   S_SET_NUMBER_AUXILIARY (symbolP, 1);"
    },
    {
      "sha": "f1691877c42ca87cdc22514773447ac9edfee6a8",
      "filename": "gas/config/obj-elf.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/obj-elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/obj-elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/obj-elf.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -271,8 +271,7 @@ elf_file_symbol (const char *s, int appfile)\n       symbolS *sym;\n       size_t name_length;\n \n-      sym = symbol_new (s, absolute_section, 0, NULL);\n-      symbol_set_frag (sym, &zero_address_frag);\n+      sym = symbol_new (s, absolute_section, &zero_address_frag, 0);\n \n       name_length = strlen (s);\n       if (name_length > strlen (S_GET_NAME (sym)))\n@@ -2724,7 +2723,7 @@ elf_adjust_symtab (void)\n       if (!sy || !symbol_on_chain (sy, symbol_rootP, symbol_lastP))\n \t{\n \t  /* Create the symbol now.  */\n-\t  sy = symbol_new (group_name, now_seg, (valueT) 0, frag_now);\n+\t  sy = symbol_new (group_name, now_seg, frag_now, 0);\n #ifdef TE_SOLARIS\n \t  /* Before Solaris 11 build 154, Sun ld rejects local group\n \t     signature symbols, so make them weak hidden instead.  */"
    },
    {
      "sha": "4b54a667a0381cc081c288d27a2097254572acdf",
      "filename": "gas/config/obj-macho.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/obj-macho.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/obj-macho.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/obj-macho.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -1522,15 +1522,15 @@ obj_mach_o_process_stab (int what, const char *string,\n   switch (what)\n     {\n       case 'd':\n-\tsymbolP = symbol_new (\"\", now_seg, frag_now_fix (), frag_now);\n+\tsymbolP = symbol_new (\"\", now_seg, frag_now, frag_now_fix ());\n \t/* Special stabd NULL name indicator.  */\n \tS_SET_NAME (symbolP, NULL);\n \tbreak;\n \n       case 'n':\n       case 's':\n-\tsymbolP = symbol_new (string, undefined_section, (valueT) 0,\n-\t\t\t      &zero_address_frag);\n+\tsymbolP = symbol_new (string, undefined_section,\n+\t\t\t      &zero_address_frag, 0);\n \tpseudo_set (symbolP);\n \tbreak;\n "
    },
    {
      "sha": "c7cae1abfec7ca86ddc3f196721b29ffea429777",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -1535,7 +1535,7 @@ make_mapping_symbol (enum mstate state, valueT value, fragS * frag)\n       abort ();\n     }\n \n-  symbolP = symbol_new (symname, now_seg, value, frag);\n+  symbolP = symbol_new (symname, now_seg, frag, value);\n   symbol_get_bfdsym (symbolP)->flags |= type | BSF_LOCAL;\n \n   /* Save the mapping symbols for future reference.  Also check that\n@@ -1742,7 +1742,7 @@ find_or_make_literal_pool (int size)\n   if (pool->symbol == NULL)\n     {\n       pool->symbol = symbol_create (FAKE_LABEL_NAME, undefined_section,\n-\t\t\t\t    (valueT) 0, &zero_address_frag);\n+\t\t\t\t    &zero_address_frag, 0);\n       pool->id = latest_pool_num++;\n     }\n \n@@ -7562,7 +7562,7 @@ md_undefined_symbol (char *name ATTRIBUTE_UNUSED)\n \t    as_bad (_(\"GOT already in the symbol table\"));\n \n \t  GOT_symbol = symbol_new (name, undefined_section,\n-\t\t\t\t   (valueT) 0, &zero_address_frag);\n+\t\t\t\t   &zero_address_frag, 0);\n \t}\n \n       return GOT_symbol;"
    },
    {
      "sha": "481073496ae19b6757adb4e99900728b6a620e6c",
      "filename": "gas/config/tc-alpha.c",
      "status": "modified",
      "additions": 15,
      "deletions": 16,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-alpha.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -3403,8 +3403,7 @@ add_to_link_pool (symbolS *sym, offsetT addend)\n \n   /* Not found, add a new entry.  */\n   subseg_set (alpha_link_section, 0);\n-  linksym = symbol_new\n-    (FAKE_LABEL_NAME, now_seg, (valueT) frag_now_fix (), frag_now);\n+  linksym = symbol_new (FAKE_LABEL_NAME, now_seg, frag_now, frag_now_fix ());\n   p = frag_more (8);\n   memset (p, 0, 8);\n \n@@ -3903,8 +3902,8 @@ s_alpha_prologue (int ignore ATTRIBUTE_UNUSED)\n \n   arg = get_absolute_expression ();\n   demand_empty_rest_of_line ();\n-  alpha_prologue_label = symbol_new\n-    (FAKE_LABEL_NAME, now_seg, (valueT) frag_now_fix (), frag_now);\n+  alpha_prologue_label = symbol_new (FAKE_LABEL_NAME, now_seg, frag_now,\n+\t\t\t\t     frag_now_fix ());\n \n   if (ECOFF_DEBUGGING)\n     sym = ecoff_get_cur_proc_sym ();\n@@ -4055,8 +4054,8 @@ alpha_elf_md_end (void)\n \t/* Create a temporary symbol at the same location as our\n \t   function symbol.  This prevents problems with globals.  */\n \tcfi_new_fde (symbol_temp_new (S_GET_SEGMENT (p->func_sym),\n-\t\t\t\t      S_GET_VALUE (p->func_sym),\n-\t\t\t\t      symbol_get_frag (p->func_sym)));\n+\t\t\t\t      symbol_get_frag (p->func_sym),\n+\t\t\t\t      S_GET_VALUE (p->func_sym)));\n \n \tcfi_set_sections ();\n \tcfi_set_return_column (p->ra_regno);\n@@ -4469,8 +4468,8 @@ static void\n s_alpha_prologue (int ignore ATTRIBUTE_UNUSED)\n {\n   demand_empty_rest_of_line ();\n-  alpha_prologue_label = symbol_new\n-    (FAKE_LABEL_NAME, now_seg, (valueT) frag_now_fix (), frag_now);\n+  alpha_prologue_label = symbol_new (FAKE_LABEL_NAME, now_seg, frag_now,\n+\t\t\t\t     frag_now_fix ());\n }\n \n /* Parse .pdesc <entry_name>,{null|stack|reg}\n@@ -4705,8 +4704,8 @@ s_alpha_linkage (int ignore ATTRIBUTE_UNUSED)\n \t BFD_RELOC_ALPHA_LINKAGE);\n \n       if (alpha_insn_label == NULL)\n-\talpha_insn_label = symbol_new\n-\t  (FAKE_LABEL_NAME, now_seg, (valueT) frag_now_fix (), frag_now);\n+\talpha_insn_label = symbol_new (FAKE_LABEL_NAME, now_seg, frag_now,\n+\t\t\t\t       frag_now_fix ());\n \n       /* Create a linkage element.  */\n       linkage_fixup = XNEW (struct alpha_linkage_fixups);\n@@ -5470,17 +5469,17 @@ md_begin (void)\n       char name[4];\n \n       sprintf (name, \"$%d\", i);\n-      alpha_register_table[i] = symbol_create (name, reg_section, i,\n-\t\t\t\t\t       &zero_address_frag);\n+      alpha_register_table[i] = symbol_create (name, reg_section,\n+\t\t\t\t\t       &zero_address_frag, i);\n     }\n \n   for (; i < 64; ++i)\n     {\n       char name[5];\n \n       sprintf (name, \"$f%d\", i - 32);\n-      alpha_register_table[i] = symbol_create (name, reg_section, i,\n-\t\t\t\t\t       &zero_address_frag);\n+      alpha_register_table[i] = symbol_create (name, reg_section,\n+\t\t\t\t\t       &zero_address_frag, i);\n     }\n \n   /* Create the special symbols and sections we'll be using.  */\n@@ -5493,8 +5492,8 @@ md_begin (void)\n \n   /* For handling the GP, create a symbol that won't be output in the\n      symbol table.  We'll edit it out of relocs later.  */\n-  alpha_gp_symbol = symbol_create (\"<GP value>\", alpha_lita_section, 0x8000,\n-\t\t\t\t   &zero_address_frag);\n+  alpha_gp_symbol = symbol_create (\"<GP value>\", alpha_lita_section,\n+\t\t\t\t   &zero_address_frag, 0x8000);\n #endif\n \n #ifdef OBJ_EVAX"
    },
    {
      "sha": "0232b3db9538929944a9af02f8d32227d936ae6c",
      "filename": "gas/config/tc-arc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-arc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-arc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arc.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -2550,7 +2550,7 @@ static void\n declare_register (const char *name, int number)\n {\n   symbolS *regS = symbol_create (name, reg_section,\n-\t\t\t\t number, &zero_address_frag);\n+\t\t\t\t &zero_address_frag, number);\n \n   str_hash_insert (arc_reg_hash, S_GET_NAME (regS), (void *) regS);\n }\n@@ -2581,7 +2581,7 @@ static void\n declare_addrtype (const char *name, int number)\n {\n   symbolS *addrtypeS = symbol_create (name, undefined_section,\n-                                      number, &zero_address_frag);\n+\t\t\t\t      &zero_address_frag, number);\n \n   str_hash_insert (arc_addrtype_hash, S_GET_NAME (addrtypeS),\n \t\t   (void *) addrtypeS);\n@@ -3350,7 +3350,7 @@ md_undefined_symbol (char *name)\n \t    as_bad (\"GOT already in symbol table\");\n \n \t  GOT_symbol = symbol_new (GLOBAL_OFFSET_TABLE_NAME, undefined_section,\n-\t\t\t\t   (valueT) 0, &zero_address_frag);\n+\t\t\t\t   &zero_address_frag, 0);\n \t};\n       return GOT_symbol;\n     }"
    },
    {
      "sha": "ce2dd0e1c289700136d17561250278d22ba02186",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -2971,7 +2971,7 @@ make_mapping_symbol (enum mstate state, valueT value, fragS *frag)\n       abort ();\n     }\n \n-  symbolP = symbol_new (symname, now_seg, value, frag);\n+  symbolP = symbol_new (symname, now_seg, frag, value);\n   symbol_get_bfdsym (symbolP)->flags |= type | BSF_LOCAL;\n \n   switch (state)\n@@ -3310,12 +3310,12 @@ s_thumb_set (int equiv)\n \t  memset (dummy_frag, 0, sizeof (fragS));\n \t  dummy_frag->fr_type = rs_fill;\n \t  dummy_frag->line = listing_tail;\n-\t  symbolP = symbol_new (name, undefined_section, 0, dummy_frag);\n+\t  symbolP = symbol_new (name, undefined_section, dummy_frag, 0);\n \t  dummy_frag->fr_symbol = symbolP;\n \t}\n       else\n #endif\n-\tsymbolP = symbol_new (name, undefined_section, 0, &zero_address_frag);\n+\tsymbolP = symbol_new (name, undefined_section, &zero_address_frag, 0);\n \n #ifdef OBJ_COFF\n       /* \"set\" symbols are local unless otherwise specified.  */\n@@ -3543,7 +3543,7 @@ find_or_make_literal_pool (void)\n   if (pool->symbol == NULL)\n     {\n       pool->symbol = symbol_create (FAKE_LABEL_NAME, undefined_section,\n-\t\t\t\t    (valueT) 0, &zero_address_frag);\n+\t\t\t\t    &zero_address_frag, 0);\n       pool->id = latest_pool_num ++;\n     }\n \n@@ -28025,7 +28025,7 @@ md_undefined_symbol (char * name ATTRIBUTE_UNUSED)\n \t    as_bad (_(\"GOT already in the symbol table\"));\n \n \t  GOT_symbol = symbol_new (name, undefined_section,\n-\t\t\t\t   (valueT) 0, & zero_address_frag);\n+\t\t\t\t   &zero_address_frag, 0);\n \t}\n \n       return GOT_symbol;"
    },
    {
      "sha": "157eb9ba4ca93d3a6f5180e4c1d8e3516949e8fd",
      "filename": "gas/config/tc-avr.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-avr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-avr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-avr.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -780,7 +780,7 @@ avr_undefined_symbol (char *name)\n \t  char xname[30];\n \t  sprintf (xname, \"%s.%03u\", name, (++suffix) % 1000);\n \t  avr_isr.sym_n_pushed = symbol_new (xname, undefined_section,\n-\t\t\t\t\t     (valueT) 0, &zero_address_frag);\n+\t\t\t\t\t     &zero_address_frag, (valueT) 0);\n \t}\n       return avr_isr.sym_n_pushed;\n     }"
    },
    {
      "sha": "e5db874078c02c63f8be55c193f7c0adf974bbc9",
      "filename": "gas/config/tc-cr16.c",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-cr16.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-cr16.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-cr16.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -689,16 +689,16 @@ md_undefined_symbol (char *name)\n {\n   if (*name == '_' && *(name + 1) == 'G'\n       && strcmp (name, \"_GLOBAL_OFFSET_TABLE_\") == 0)\n-   {\n-     if (!GOT_symbol)\n-       {\n-         if (symbol_find (name))\n-             as_bad (_(\"GOT already in symbol table\"));\n-          GOT_symbol = symbol_new (name, undefined_section,\n-                                   (valueT) 0, &zero_address_frag);\n-       }\n-     return GOT_symbol;\n-   }\n+    {\n+      if (!GOT_symbol)\n+\t{\n+\t  if (symbol_find (name))\n+\t    as_bad (_(\"GOT already in symbol table\"));\n+\t  GOT_symbol = symbol_new (name, undefined_section,\n+\t\t\t\t   &zero_address_frag, 0);\n+\t}\n+      return GOT_symbol;\n+    }\n   return 0;\n }\n "
    },
    {
      "sha": "1231084feed75aa62216f98a626d34ec78725004",
      "filename": "gas/config/tc-cris.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-cris.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-cris.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-cris.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -1196,19 +1196,19 @@ md_begin (void)\n   /* Enable use of \".if ..asm.arch.cris.v32\"\n      and \".if ..asm.arch.cris.common_v10_v32\" and a few others.  */\n   symbol_table_insert (symbol_new (\"..asm.arch.cris.v32\", absolute_section,\n-\t\t\t\t   (cris_arch == arch_crisv32),\n-\t\t\t\t   &zero_address_frag));\n+\t\t\t\t   &zero_address_frag,\n+\t\t\t\t   cris_arch == arch_crisv32));\n   symbol_table_insert (symbol_new (\"..asm.arch.cris.v10\", absolute_section,\n-\t\t\t\t   (cris_arch == arch_crisv10),\n-\t\t\t\t   &zero_address_frag));\n+\t\t\t\t   &zero_address_frag,\n+\t\t\t\t   cris_arch == arch_crisv10));\n   symbol_table_insert (symbol_new (\"..asm.arch.cris.common_v10_v32\",\n \t\t\t\t   absolute_section,\n-\t\t\t\t   (cris_arch == arch_cris_common_v10_v32),\n-\t\t\t\t   &zero_address_frag));\n+\t\t\t\t   &zero_address_frag,\n+\t\t\t\t   cris_arch == arch_cris_common_v10_v32));\n   symbol_table_insert (symbol_new (\"..asm.arch.cris.any_v0_v10\",\n \t\t\t\t   absolute_section,\n-\t\t\t\t   (cris_arch == arch_cris_any_v0_v10),\n-\t\t\t\t   &zero_address_frag));\n+\t\t\t\t   &zero_address_frag,\n+\t\t\t\t   cris_arch == arch_cris_any_v0_v10));\n \n   while (cris_opcodes[i].name != NULL)\n     {"
    },
    {
      "sha": "ec1ea944a0fb4d0fe907b8a0c37f0475a58aa97b",
      "filename": "gas/config/tc-csky.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-csky.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-csky.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-csky.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -1399,7 +1399,7 @@ make_mapping_symbol (map_state state, valueT value, fragS *frag)\n       abort ();\n     }\n \n-  symbolP = symbol_new (symname, now_seg, value, frag);\n+  symbolP = symbol_new (symname, now_seg, frag, value);\n   symbol_get_bfdsym (symbolP)->flags |= type | BSF_LOCAL;\n }\n "
    },
    {
      "sha": "51e7065ba71f8710e5ab1f8b18edacee2360ac82",
      "filename": "gas/config/tc-dlx.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-dlx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-dlx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-dlx.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -92,14 +92,14 @@ insert_sreg (const char *regname, int regnum)\n   char buf[80];\n   int i;\n \n-  symbol_table_insert (symbol_new (regname, reg_section, (valueT) regnum,\n-\t\t\t\t   &zero_address_frag));\n+  symbol_table_insert (symbol_new (regname, reg_section,\n+\t\t\t\t   &zero_address_frag, regnum));\n   for (i = 0; regname[i]; i++)\n     buf[i] = ISLOWER (regname[i]) ? TOUPPER (regname[i]) : regname[i];\n   buf[i] = '\\0';\n \n-  symbol_table_insert (symbol_new (buf, reg_section, (valueT) regnum,\n-\t\t\t\t   &zero_address_frag));\n+  symbol_table_insert (symbol_new (buf, reg_section,\n+\t\t\t\t   &zero_address_frag, regnum));\n }\n \n /* Install symbol definitions for assorted special registers."
    },
    {
      "sha": "1feebc822c512868fc97896dfac7b6dbfd67de6d",
      "filename": "gas/config/tc-hppa.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-hppa.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -5989,8 +5989,8 @@ pa_build_unwind_subspace (struct call_info *call_info)\n   else\n     {\n       symbolP = symbol_new (name, now_seg,\n-\t\t\t    S_GET_VALUE (call_info->start_symbol),\n-\t\t\t    symbol_get_frag (call_info->start_symbol));\n+\t\t\t    symbol_get_frag (call_info->start_symbol),\n+\t\t\t    S_GET_VALUE (call_info->start_symbol));\n       gas_assert (symbolP);\n       S_CLEAR_EXTERNAL (symbolP);\n       symbol_table_insert (symbolP);\n@@ -6439,8 +6439,7 @@ hppa_elf_mark_end_of_function (void)\n     {\n       /* symbol value should be the offset of the\n \t last instruction of the function */\n-      symbolP = symbol_new (name, now_seg, (valueT) (frag_now_fix () - 4),\n-\t\t\t    frag_now);\n+      symbolP = symbol_new (name, now_seg, frag_now, frag_now_fix () - 4);\n \n       gas_assert (symbolP);\n       S_CLEAR_EXTERNAL (symbolP);"
    },
    {
      "sha": "43eb3659bad7670290b3718d3e48fad8cf27c2bf",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -13798,7 +13798,7 @@ md_undefined_symbol (char *name)\n \t  if (symbol_find (name))\n \t    as_bad (_(\"GOT already in symbol table\"));\n \t  GOT_symbol = symbol_new (name, undefined_section,\n-\t\t\t\t   (valueT) 0, &zero_address_frag);\n+\t\t\t\t   &zero_address_frag, 0);\n \t};\n       return GOT_symbol;\n     }"
    },
    {
      "sha": "ed4636bbbd3d58e3a3c31a918f5ba4971aafd5b8",
      "filename": "gas/config/tc-ia64.c",
      "status": "modified",
      "additions": 43,
      "deletions": 42,
      "changes": 85,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-ia64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-ia64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ia64.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -4435,9 +4435,10 @@ dot_endp (int dummy ATTRIBUTE_UNUSED)\n       e.X_add_number = 0;\n       if (!S_IS_LOCAL (unwind.proc_pending.sym)\n \t  && S_IS_DEFINED (unwind.proc_pending.sym))\n-\te.X_add_symbol = symbol_temp_new (S_GET_SEGMENT (unwind.proc_pending.sym),\n-\t\t\t\t\t  S_GET_VALUE (unwind.proc_pending.sym),\n-\t\t\t\t\t  symbol_get_frag (unwind.proc_pending.sym));\n+\te.X_add_symbol\n+\t  = symbol_temp_new (S_GET_SEGMENT (unwind.proc_pending.sym),\n+\t\t\t     symbol_get_frag (unwind.proc_pending.sym),\n+\t\t\t     S_GET_VALUE (unwind.proc_pending.sym));\n       else\n \te.X_add_symbol = unwind.proc_pending.sym;\n       ia64_cons_fix_new (frag_now, where, bytes_per_address, &e,\n@@ -4487,7 +4488,7 @@ dot_endp (int dummy ATTRIBUTE_UNUSED)\n \t\t      symbol_get_obj (sym)->size->X_op = O_subtract;\n \t\t      symbol_get_obj (sym)->size->X_add_symbol\n \t\t\t= symbol_new (FAKE_LABEL_NAME, now_seg,\n-\t\t\t\t      frag_now_fix (), frag_now);\n+\t\t\t\t      frag_now, frag_now_fix ());\n \t\t      symbol_get_obj (sym)->size->X_op_symbol = sym;\n \t\t      symbol_get_obj (sym)->size->X_add_number = 0;\n \t\t    }\n@@ -5371,7 +5372,7 @@ declare_register (const char *name, unsigned int regnum)\n {\n   symbolS *sym;\n \n-  sym = symbol_create (name, reg_section, regnum, &zero_address_frag);\n+  sym = symbol_create (name, reg_section, &zero_address_frag, regnum);\n \n   str_hash_insert (md.reg_hash, S_GET_NAME (sym), (void *) sym);\n \n@@ -7244,77 +7245,77 @@ md_begin (void)\n   secalias_name_hash = str_htab_create ();\n \n   pseudo_func[FUNC_DTP_MODULE].u.sym =\n-    symbol_new (\".<dtpmod>\", undefined_section, FUNC_DTP_MODULE,\n-\t\t&zero_address_frag);\n+    symbol_new (\".<dtpmod>\", undefined_section,\n+\t\t&zero_address_frag, FUNC_DTP_MODULE);\n \n   pseudo_func[FUNC_DTP_RELATIVE].u.sym =\n-    symbol_new (\".<dtprel>\", undefined_section, FUNC_DTP_RELATIVE,\n-\t\t&zero_address_frag);\n+    symbol_new (\".<dtprel>\", undefined_section,\n+\t\t&zero_address_frag, FUNC_DTP_RELATIVE);\n \n   pseudo_func[FUNC_FPTR_RELATIVE].u.sym =\n-    symbol_new (\".<fptr>\", undefined_section, FUNC_FPTR_RELATIVE,\n-\t\t&zero_address_frag);\n+    symbol_new (\".<fptr>\", undefined_section,\n+\t\t&zero_address_frag, FUNC_FPTR_RELATIVE);\n \n   pseudo_func[FUNC_GP_RELATIVE].u.sym =\n-    symbol_new (\".<gprel>\", undefined_section, FUNC_GP_RELATIVE,\n-\t\t&zero_address_frag);\n+    symbol_new (\".<gprel>\", undefined_section,\n+\t\t&zero_address_frag, FUNC_GP_RELATIVE);\n \n   pseudo_func[FUNC_LT_RELATIVE].u.sym =\n-    symbol_new (\".<ltoff>\", undefined_section, FUNC_LT_RELATIVE,\n-\t\t&zero_address_frag);\n+    symbol_new (\".<ltoff>\", undefined_section,\n+\t\t&zero_address_frag, FUNC_LT_RELATIVE);\n \n   pseudo_func[FUNC_LT_RELATIVE_X].u.sym =\n-    symbol_new (\".<ltoffx>\", undefined_section, FUNC_LT_RELATIVE_X,\n-\t\t&zero_address_frag);\n+    symbol_new (\".<ltoffx>\", undefined_section,\n+\t\t&zero_address_frag, FUNC_LT_RELATIVE_X);\n \n   pseudo_func[FUNC_PC_RELATIVE].u.sym =\n-    symbol_new (\".<pcrel>\", undefined_section, FUNC_PC_RELATIVE,\n-\t\t&zero_address_frag);\n+    symbol_new (\".<pcrel>\", undefined_section,\n+\t\t&zero_address_frag, FUNC_PC_RELATIVE);\n \n   pseudo_func[FUNC_PLT_RELATIVE].u.sym =\n-    symbol_new (\".<pltoff>\", undefined_section, FUNC_PLT_RELATIVE,\n-\t\t&zero_address_frag);\n+    symbol_new (\".<pltoff>\", undefined_section,\n+\t\t&zero_address_frag, FUNC_PLT_RELATIVE);\n \n   pseudo_func[FUNC_SEC_RELATIVE].u.sym =\n-    symbol_new (\".<secrel>\", undefined_section, FUNC_SEC_RELATIVE,\n-\t\t&zero_address_frag);\n+    symbol_new (\".<secrel>\", undefined_section,\n+\t\t&zero_address_frag, FUNC_SEC_RELATIVE);\n \n   pseudo_func[FUNC_SEG_RELATIVE].u.sym =\n-    symbol_new (\".<segrel>\", undefined_section, FUNC_SEG_RELATIVE,\n-\t\t&zero_address_frag);\n+    symbol_new (\".<segrel>\", undefined_section,\n+\t\t&zero_address_frag, FUNC_SEG_RELATIVE);\n \n   pseudo_func[FUNC_TP_RELATIVE].u.sym =\n-    symbol_new (\".<tprel>\", undefined_section, FUNC_TP_RELATIVE,\n-\t\t&zero_address_frag);\n+    symbol_new (\".<tprel>\", undefined_section,\n+\t\t&zero_address_frag, FUNC_TP_RELATIVE);\n \n   pseudo_func[FUNC_LTV_RELATIVE].u.sym =\n-    symbol_new (\".<ltv>\", undefined_section, FUNC_LTV_RELATIVE,\n-\t\t&zero_address_frag);\n+    symbol_new (\".<ltv>\", undefined_section,\n+\t\t&zero_address_frag, FUNC_LTV_RELATIVE);\n \n   pseudo_func[FUNC_LT_FPTR_RELATIVE].u.sym =\n-    symbol_new (\".<ltoff.fptr>\", undefined_section, FUNC_LT_FPTR_RELATIVE,\n-\t\t&zero_address_frag);\n+    symbol_new (\".<ltoff.fptr>\", undefined_section,\n+\t\t&zero_address_frag, FUNC_LT_FPTR_RELATIVE);\n \n   pseudo_func[FUNC_LT_DTP_MODULE].u.sym =\n-    symbol_new (\".<ltoff.dtpmod>\", undefined_section, FUNC_LT_DTP_MODULE,\n-\t\t&zero_address_frag);\n+    symbol_new (\".<ltoff.dtpmod>\", undefined_section,\n+\t\t&zero_address_frag, FUNC_LT_DTP_MODULE);\n \n   pseudo_func[FUNC_LT_DTP_RELATIVE].u.sym =\n-    symbol_new (\".<ltoff.dptrel>\", undefined_section, FUNC_LT_DTP_RELATIVE,\n-\t\t&zero_address_frag);\n+    symbol_new (\".<ltoff.dptrel>\", undefined_section,\n+\t\t&zero_address_frag, FUNC_LT_DTP_RELATIVE);\n \n   pseudo_func[FUNC_LT_TP_RELATIVE].u.sym =\n-    symbol_new (\".<ltoff.tprel>\", undefined_section, FUNC_LT_TP_RELATIVE,\n-\t\t&zero_address_frag);\n+    symbol_new (\".<ltoff.tprel>\", undefined_section,\n+\t\t&zero_address_frag, FUNC_LT_TP_RELATIVE);\n \n   pseudo_func[FUNC_IPLT_RELOC].u.sym =\n-    symbol_new (\".<iplt>\", undefined_section, FUNC_IPLT_RELOC,\n-\t\t&zero_address_frag);\n+    symbol_new (\".<iplt>\", undefined_section,\n+\t\t&zero_address_frag, FUNC_IPLT_RELOC);\n \n #ifdef TE_VMS\n   pseudo_func[FUNC_SLOTCOUNT_RELOC].u.sym =\n-    symbol_new (\".<slotcount>\", undefined_section, FUNC_SLOTCOUNT_RELOC,\n-\t\t&zero_address_frag);\n+    symbol_new (\".<slotcount>\", undefined_section,\n+\t\t&zero_address_frag, FUNC_SLOTCOUNT_RELOC);\n #endif\n \n  if (md.tune != itanium1)\n@@ -11964,7 +11965,7 @@ ia64_vms_note (void)\n   /* This symbol should be passed on the command line and be variable\n      according to language.  */\n   sym = symbol_new (\"__gnat_vms_display_name@gnat_demangler_rtl\",\n-\t\t    absolute_section, 0, &zero_address_frag);\n+\t\t    absolute_section, &zero_address_frag, 0);\n   symbol_table_insert (sym);\n   symbol_get_bfdsym (sym)->flags |= BSF_DEBUGGING | BSF_DYNAMIC;\n "
    },
    {
      "sha": "18bd667ebd6a647ce0665ed61101d077c7707495",
      "filename": "gas/config/tc-m32r.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-m32r.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-m32r.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-m32r.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -574,7 +574,7 @@ debug_sym (int ignore ATTRIBUTE_UNUSED)\n \n   if ((symbolP = symbol_find (name)) == NULL\n       && (symbolP = md_undefined_symbol (name)) == NULL)\n-    symbolP = symbol_new (name, undefined_section, 0, &zero_address_frag);\n+    symbolP = symbol_new (name, undefined_section, &zero_address_frag, 0);\n \n   symbol_table_insert (symbolP);\n   if (S_IS_DEFINED (symbolP) && (S_GET_SEGMENT (symbolP) != reg_section"
    },
    {
      "sha": "241665224b84dfc4ef72d260fffa70f0e0b74792",
      "filename": "gas/config/tc-m68k.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-m68k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-m68k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-m68k.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -3959,15 +3959,15 @@ insert_reg (const char *regname, int regnum)\n     }\n #endif\n \n-  symbol_table_insert (symbol_new (regname, reg_section, regnum,\n-\t\t\t\t   &zero_address_frag));\n+  symbol_table_insert (symbol_new (regname, reg_section,\n+\t\t\t\t   &zero_address_frag, regnum));\n \n   for (i = 0; regname[i]; i++)\n     buf[i] = TOUPPER (regname[i]);\n   buf[i] = '\\0';\n \n-  symbol_table_insert (symbol_new (buf, reg_section, regnum,\n-\t\t\t\t   &zero_address_frag));\n+  symbol_table_insert (symbol_new (buf, reg_section,\n+\t\t\t\t   &zero_address_frag, regnum));\n }\n \n struct init_entry"
    },
    {
      "sha": "ebcc633dd81aaf0cc573570c8d252718e0b0f6d5",
      "filename": "gas/config/tc-mips.c",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-mips.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -3789,18 +3789,18 @@ md_begin (void)\n      helps us detect invalid uses of them.  */\n   for (i = 0; reg_names[i].name; i++)\n     symbol_table_insert (symbol_new (reg_names[i].name, reg_section,\n-\t\t\t\t     reg_names[i].num, /* & RNUM_MASK, */\n-\t\t\t\t     &zero_address_frag));\n+\t\t\t\t     &zero_address_frag,\n+\t\t\t\t     reg_names[i].num));\n   if (HAVE_NEWABI)\n     for (i = 0; reg_names_n32n64[i].name; i++)\n       symbol_table_insert (symbol_new (reg_names_n32n64[i].name, reg_section,\n-\t\t\t\t       reg_names_n32n64[i].num, /* & RNUM_MASK, */\n-\t\t\t\t       &zero_address_frag));\n+\t\t\t\t       &zero_address_frag,\n+\t\t\t\t       reg_names_n32n64[i].num));\n   else\n     for (i = 0; reg_names_o32[i].name; i++)\n       symbol_table_insert (symbol_new (reg_names_o32[i].name, reg_section,\n-\t\t\t\t       reg_names_o32[i].num, /* & RNUM_MASK, */\n-\t\t\t\t       &zero_address_frag));\n+\t\t\t\t       &zero_address_frag,\n+\t\t\t\t       reg_names_o32[i].num));\n \n   for (i = 0; i < 32; i++)\n     {\n@@ -3809,17 +3809,17 @@ md_begin (void)\n       /* R5900 VU0 floating-point register.  */\n       sprintf (regname, \"$vf%d\", i);\n       symbol_table_insert (symbol_new (regname, reg_section,\n-\t\t\t\t       RTYPE_VF | i, &zero_address_frag));\n+\t\t\t\t       &zero_address_frag, RTYPE_VF | i));\n \n       /* R5900 VU0 integer register.  */\n       sprintf (regname, \"$vi%d\", i);\n       symbol_table_insert (symbol_new (regname, reg_section,\n-\t\t\t\t       RTYPE_VI | i, &zero_address_frag));\n+\t\t\t\t       &zero_address_frag, RTYPE_VI | i));\n \n       /* MSA register.  */\n       sprintf (regname, \"$w%d\", i);\n       symbol_table_insert (symbol_new (regname, reg_section,\n-\t\t\t\t       RTYPE_MSA | i, &zero_address_frag));\n+\t\t\t\t       &zero_address_frag, RTYPE_MSA | i));\n     }\n \n   obstack_init (&mips_operand_tokens);\n@@ -18876,7 +18876,7 @@ md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED, segT asec, fragS *fragp)\n \t    }\n \n \t  /* Make a label at the end for use with the branch.  */\n-\t  l = symbol_new (micromips_label_name (), asec, fragp->fr_fix, fragp);\n+\t  l = symbol_new (micromips_label_name (), asec, fragp, fragp->fr_fix);\n \t  micromips_label_inc ();\n \t  S_SET_OTHER (l, ELF_ST_SET_MICROMIPS (S_GET_OTHER (l)));\n "
    },
    {
      "sha": "82a69f1674699e59d617a3eb132e0da788c163a2",
      "filename": "gas/config/tc-mmix.c",
      "status": "modified",
      "additions": 22,
      "deletions": 23,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-mmix.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-mmix.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-mmix.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -785,8 +785,8 @@ mmix_md_begin (void)\n       /* Alternatively, we could diddle with '$' and the following number,\n \t but keeping the registers as symbols helps keep parsing simple.  */\n       sprintf (buf, \"$%d\", i);\n-      symbol_table_insert (symbol_new (buf, reg_section, i,\n-\t\t\t\t       &zero_address_frag));\n+      symbol_table_insert (symbol_new (buf, reg_section,\n+\t\t\t\t       &zero_address_frag, i));\n     }\n \n   /* Insert mmixal built-in names if allowed.  */\n@@ -795,21 +795,21 @@ mmix_md_begin (void)\n       for (i = 0; mmix_spec_regs[i].name != NULL; i++)\n \tsymbol_table_insert (symbol_new (mmix_spec_regs[i].name,\n \t\t\t\t\t reg_section,\n-\t\t\t\t\t mmix_spec_regs[i].number + 256,\n-\t\t\t\t\t &zero_address_frag));\n+\t\t\t\t\t &zero_address_frag,\n+\t\t\t\t\t mmix_spec_regs[i].number + 256));\n \n       /* FIXME: Perhaps these should be recognized as specials; as field\n \t names for those instructions.  */\n-      symbol_table_insert (symbol_new (\"ROUND_CURRENT\", reg_section, 512,\n-\t\t\t\t       &zero_address_frag));\n-      symbol_table_insert (symbol_new (\"ROUND_OFF\", reg_section, 512 + 1,\n-\t\t\t\t       &zero_address_frag));\n-      symbol_table_insert (symbol_new (\"ROUND_UP\", reg_section, 512 + 2,\n-\t\t\t\t       &zero_address_frag));\n-      symbol_table_insert (symbol_new (\"ROUND_DOWN\", reg_section, 512 + 3,\n-\t\t\t\t       &zero_address_frag));\n-      symbol_table_insert (symbol_new (\"ROUND_NEAR\", reg_section, 512 + 4,\n-\t\t\t\t       &zero_address_frag));\n+      symbol_table_insert (symbol_new (\"ROUND_CURRENT\", reg_section,\n+\t\t\t\t       &zero_address_frag, 512));\n+      symbol_table_insert (symbol_new (\"ROUND_OFF\", reg_section,\n+\t\t\t\t       &zero_address_frag, 512 + 1));\n+      symbol_table_insert (symbol_new (\"ROUND_UP\", reg_section,\n+\t\t\t\t       &zero_address_frag, 512 + 2));\n+      symbol_table_insert (symbol_new (\"ROUND_DOWN\", reg_section,\n+\t\t\t\t       &zero_address_frag, 512 + 3));\n+      symbol_table_insert (symbol_new (\"ROUND_NEAR\", reg_section,\n+\t\t\t\t       &zero_address_frag, 512 + 4));\n     }\n }\n \n@@ -3520,8 +3520,8 @@ mmix_md_end (void)\n       sprintf (locsymbol, \":%s%s\", MMIX_LOC_SECTION_START_SYMBOL_PREFIX,\n \t       \".text\");\n       symbolP\n-\t= symbol_new (locsymbol, absolute_section, lowest_text_loc,\n-\t\t      &zero_address_frag);\n+\t= symbol_new (locsymbol, absolute_section, &zero_address_frag,\n+\t\t      lowest_text_loc);\n       S_SET_EXTERNAL (symbolP);\n     }\n \n@@ -3536,8 +3536,8 @@ mmix_md_end (void)\n       sprintf (locsymbol, \":%s%s\", MMIX_LOC_SECTION_START_SYMBOL_PREFIX,\n \t       \".data\");\n       symbolP\n-\t= symbol_new (locsymbol, absolute_section, lowest_data_loc,\n-\t\t      &zero_address_frag);\n+\t= symbol_new (locsymbol, absolute_section, &zero_address_frag,\n+\t\t      lowest_data_loc);\n       S_SET_EXTERNAL (symbolP);\n     }\n \n@@ -3845,9 +3845,8 @@ mmix_parse_predefined_name (char *name, expressionS *expP)\n \t script.  */\n       symp = symbol_find (name);\n       if (symp == NULL)\n-\tsymp = symbol_new (name, text_section,\n-\t\t\t   0x10 * (handler_charp + 1 - handler_chars),\n-\t\t\t   &zero_address_frag);\n+\tsymp = symbol_new (name, text_section, &zero_address_frag,\n+\t\t\t   0x10 * (handler_charp + 1 - handler_chars));\n     }\n   else\n     {\n@@ -3906,8 +3905,8 @@ mmix_parse_predefined_name (char *name, expressionS *expP)\n \t  {\n \t    symbol_table_insert (symbol_new (predefined_abs_syms[i].name,\n \t\t\t\t\t     absolute_section,\n-\t\t\t\t\t     predefined_abs_syms[i].val,\n-\t\t\t\t\t     &zero_address_frag));\n+\t\t\t\t\t     &zero_address_frag,\n+\t\t\t\t\t     predefined_abs_syms[i].val));\n \n \t    /* Let gas find the symbol we just created, through its\n                ordinary lookup.  */"
    },
    {
      "sha": "19cfc398b7d2e51547cc02844552dde06fc221aa",
      "filename": "gas/config/tc-mn10200.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-mn10200.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-mn10200.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-mn10200.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -382,7 +382,7 @@ md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED,\n       /* Create a fixup for the reversed conditional branch.  */\n       sprintf (buf, \".%s_%ld\", FAKE_LABEL_NAME, label_count++);\n       fix_new (fragP, fragP->fr_fix + 1, 1,\n-\t       symbol_new (buf, sec, 0, fragP->fr_next),\n+\t       symbol_new (buf, sec, fragP->fr_next, 0),\n \t       fragP->fr_offset, 1, BFD_RELOC_8_PCREL);\n \n       /* Now create the unconditional branch + fixup to the\n@@ -439,7 +439,7 @@ md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED,\n       /* Create a fixup for the reversed conditional branch.  */\n       sprintf (buf, \".%s_%ld\", FAKE_LABEL_NAME, label_count++);\n       fix_new (fragP, fragP->fr_fix + 1, 1,\n-\t       symbol_new (buf, sec, 0, fragP->fr_next),\n+\t       symbol_new (buf, sec, fragP->fr_next, 0),\n \t       fragP->fr_offset, 1, BFD_RELOC_8_PCREL);\n \n       /* Now create the unconditional branch + fixup to the\n@@ -528,7 +528,7 @@ md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED,\n       /* Create a fixup for the reversed conditional branch.  */\n       sprintf (buf, \".%s_%ld\", FAKE_LABEL_NAME, label_count++);\n       fix_new (fragP, fragP->fr_fix + 2, 1,\n-\t       symbol_new (buf, sec, 0, fragP->fr_next),\n+\t       symbol_new (buf, sec, fragP->fr_next, 0),\n \t       fragP->fr_offset, 1, BFD_RELOC_8_PCREL);\n \n       /* Now create the unconditional branch + fixup to the\n@@ -609,7 +609,7 @@ md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED,\n       /* Create a fixup for the reversed conditional branch.  */\n       sprintf (buf, \".%s_%ld\", FAKE_LABEL_NAME, label_count++);\n       fix_new (fragP, fragP->fr_fix + 2, 1,\n-\t       symbol_new (buf, sec, 0, fragP->fr_next),\n+\t       symbol_new (buf, sec, fragP->fr_next, 0),\n \t       fragP->fr_offset, 1, BFD_RELOC_8_PCREL);\n \n       /* Now create the unconditional branch + fixup to the"
    },
    {
      "sha": "ae5ad9de4d4c159cbd81a6b1939868527360d73d",
      "filename": "gas/config/tc-mn10300.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-mn10300.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-mn10300.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-mn10300.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -520,7 +520,7 @@ md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED,\n       /* Create a fixup for the reversed conditional branch.  */\n       sprintf (buf, \".%s_%ld\", FAKE_LABEL_NAME, label_count++);\n       fix_new (fragP, fragP->fr_fix + 1, 1,\n-\t       symbol_new (buf, sec, 0, fragP->fr_next),\n+\t       symbol_new (buf, sec, fragP->fr_next, 0),\n \t       fragP->fr_offset + 1, 1, BFD_RELOC_8_PCREL);\n \n       /* Now create the unconditional branch + fixup to the\n@@ -577,7 +577,7 @@ md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED,\n       /* Create a fixup for the reversed conditional branch.  */\n       sprintf (buf, \".%s_%ld\", FAKE_LABEL_NAME, label_count++);\n       fix_new (fragP, fragP->fr_fix + 1, 1,\n-\t       symbol_new (buf, sec, 0, fragP->fr_next),\n+\t       symbol_new (buf, sec, fragP->fr_next, 0),\n \t       fragP->fr_offset + 1, 1, BFD_RELOC_8_PCREL);\n \n       /* Now create the unconditional branch + fixup to the\n@@ -623,7 +623,7 @@ md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED,\n       /* Create a fixup for the reversed conditional branch.  */\n       sprintf (buf, \".%s_%ld\", FAKE_LABEL_NAME, label_count++);\n       fix_new (fragP, fragP->fr_fix + 2, 1,\n-\t       symbol_new (buf, sec, 0, fragP->fr_next),\n+\t       symbol_new (buf, sec, fragP->fr_next, 0),\n \t       fragP->fr_offset + 2, 1, BFD_RELOC_8_PCREL);\n \n       /* Now create the unconditional branch + fixup to the\n@@ -659,7 +659,7 @@ md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED,\n       /* Create a fixup for the reversed conditional branch.  */\n       sprintf (buf, \".%s_%ld\", FAKE_LABEL_NAME, label_count++);\n       fix_new (fragP, fragP->fr_fix + 2, 1,\n-\t       symbol_new (buf, sec, 0, fragP->fr_next),\n+\t       symbol_new (buf, sec, fragP->fr_next, 0),\n \t       fragP->fr_offset + 2, 1, BFD_RELOC_8_PCREL);\n \n       /* Now create the unconditional branch + fixup to the\n@@ -813,7 +813,7 @@ md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED,\n       /* Create a fixup for the reversed conditional branch.  */\n       sprintf (buf, \".%s_%ld\", FAKE_LABEL_NAME, label_count++);\n       fix_new (fragP, fragP->fr_fix + 2, 1,\n-\t       symbol_new (buf, sec, 0, fragP->fr_next),\n+\t       symbol_new (buf, sec, fragP->fr_next, 0),\n \t       fragP->fr_offset + 2, 1, BFD_RELOC_8_PCREL);\n \n       /* Now create the unconditional branch + fixup to the\n@@ -882,7 +882,7 @@ md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED,\n       /* Create a fixup for the reversed conditional branch.  */\n       sprintf (buf, \".%s_%ld\", FAKE_LABEL_NAME, label_count++);\n       fix_new (fragP, fragP->fr_fix + 2, 1,\n-\t       symbol_new (buf, sec, 0, fragP->fr_next),\n+\t       symbol_new (buf, sec, fragP->fr_next, 0),\n \t       fragP->fr_offset + 2, 1, BFD_RELOC_8_PCREL);\n \n       /* Now create the unconditional branch + fixup to the"
    },
    {
      "sha": "900f71569e9a7d78e2a22179bcb3edfd81cbbfb0",
      "filename": "gas/config/tc-nds32.c",
      "status": "modified",
      "additions": 11,
      "deletions": 9,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-nds32.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -4002,7 +4002,7 @@ make_mapping_symbol (enum mstate state, valueT value, fragS * frag, unsigned int\n       abort ();\n     }\n \n-  symbol_p = symbol_new (symbol_name, now_seg, value, frag);\n+  symbol_p = symbol_new (symbol_name, now_seg, frag, value);\n   /* local scope attribute  */\n   symbol_get_bfdsym (symbol_p)->flags |= BSF_NO_FLAGS | BSF_LOCAL;\n }\n@@ -6088,8 +6088,9 @@ nds32_elf_append_relax_relocs (const char *key, void *value)\n \t\t    {\n \t\t      ptr_offset =\n \t\t\tpattern_temp->where - pattern_temp->frag->fr_literal;\n-\t\t      exp.X_add_symbol = symbol_temp_new (now_seg, ptr_offset,\n-\t\t\t\t\t\t\t  pattern_temp->frag);\n+\t\t      exp.X_add_symbol = symbol_temp_new (now_seg,\n+\t\t\t\t\t\t\t  pattern_temp->frag,\n+\t\t\t\t\t\t\t  ptr_offset);\n \t\t      exp.X_add_number = 0;\n \t\t      fixP =\n \t\t\tfix_new_exp (fragP, where - fragP->fr_literal,\n@@ -6186,8 +6187,9 @@ nds32_elf_append_relax_relocs (const char *key, void *value)\n \t\t    {\n \t\t      ptr_offset = next_pattern->where\n \t\t\t- next_pattern->frag->fr_literal;\n-\t\t      exp.X_add_symbol = symbol_temp_new (now_seg, ptr_offset,\n-\t\t\t\t\t\t\t  next_pattern->frag);\n+\t\t      exp.X_add_symbol = symbol_temp_new (now_seg,\n+\t\t\t\t\t\t\t  next_pattern->frag,\n+\t\t\t\t\t\t\t  ptr_offset);\n \t\t      exp.X_add_number = 0;\n \t\t      fixP = fix_new_exp (fragP, where - fragP->fr_literal,\n \t\t\t\t\t  fixup_size, &exp, 0,\n@@ -6218,8 +6220,8 @@ nds32_elf_append_relax_relocs (const char *key, void *value)\n \t\t\t      ptr_offset = next_insn->where\n \t\t\t\t- next_insn->frag->fr_literal;\n \t\t\t      exp.X_add_symbol = symbol_temp_new (now_seg,\n-\t\t\t\t\t\t\t\t  ptr_offset,\n-\t\t\t\t\t\t\t\t  next_insn->frag);\n+\t\t\t\t\t\t\t\t  next_insn->frag,\n+\t\t\t\t\t\t\t\t  ptr_offset);\n \t\t\t      exp.X_add_number = 0;\n \t\t\t      fixP = fix_new_exp (fragP,\n \t\t\t\t\t\t  where - fragP->fr_literal,\n@@ -7191,14 +7193,14 @@ md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED, segT sec, fragS *fragP)\n \t  if ((fixup_info[i].ramp & NDS32_CREATE_LABEL) != 0)\n \t    {\n \t      /* This is a reverse branch.  */\n-\t      exp.X_add_symbol = symbol_temp_new (sec, 0, fragP->fr_next);\n+\t      exp.X_add_symbol = symbol_temp_new (sec, fragP->fr_next, 0);\n \t      exp.X_add_number = 0;\n \t    }\n \t  else if ((fixup_info[i].ramp & NDS32_PTR) != 0)\n \t    {\n \t      /* This relocation has to point to another instruction.  */\n \t      branch_size = fr_where + code_size - 4;\n-\t      exp.X_add_symbol = symbol_temp_new (sec, branch_size, fragP);\n+\t      exp.X_add_symbol = symbol_temp_new (sec, fragP, branch_size);\n \t      exp.X_add_number = 0;\n \t    }\n \t  else if ((fixup_info[i].ramp & NDS32_ABS) != 0)"
    },
    {
      "sha": "a8bbe5bf1b626357d8e6c3fdc5b587e9e253495e",
      "filename": "gas/config/tc-nios2.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-nios2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-nios2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-nios2.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -3907,7 +3907,7 @@ md_undefined_symbol (char *name ATTRIBUTE_UNUSED)\n \t    as_bad (\"GOT already in the symbol table\");\n \n \t  GOT_symbol = symbol_new (name, undefined_section,\n-\t\t\t\t   (valueT) 0, &zero_address_frag);\n+\t\t\t\t   &zero_address_frag, 0);\n \t}\n \n       return GOT_symbol;"
    },
    {
      "sha": "052f64a7cb78ab94c7e5fce6e8b622046bc7706f",
      "filename": "gas/config/tc-ppc.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -4902,8 +4902,9 @@ ppc_function (int ignore ATTRIBUTE_UNUSED)\n \t    {\n \t      /* The fifth argument is the function size.  */\n \t      ++input_line_pointer;\n-\t      symbol_get_tc (ext_sym)->u.size = symbol_new\n-                (\"L0\\001\", absolute_section,(valueT) 0, &zero_address_frag);\n+\t      symbol_get_tc (ext_sym)->u.size\n+\t\t= symbol_new (\"L0\\001\", absolute_section,\n+\t\t\t      &zero_address_frag, 0);\n \t      pseudo_set (symbol_get_tc (ext_sym)->u.size);\n \t    }\n \t}\n@@ -5877,7 +5878,7 @@ ppc_adjust_symtab (void)\n \tcontinue;\n \n       csect = symbol_create (\".abs[XO]\", absolute_section,\n-\t\t\t     S_GET_VALUE (sym), &zero_address_frag);\n+\t\t\t     &zero_address_frag, S_GET_VALUE (sym));\n       symbol_get_bfdsym (csect)->value = S_GET_VALUE (sym);\n       S_SET_STORAGE_CLASS (csect, C_HIDEXT);\n       i = S_GET_NUMBER_AUXILIARY (csect);"
    },
    {
      "sha": "82b681ef58951a3edb28a1af18f5210d0ab60e42",
      "filename": "gas/config/tc-riscv.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -1266,8 +1266,8 @@ check_absolute_expr (struct riscv_cl_insn *ip, expressionS *ex,\n static symbolS *\n make_internal_label (void)\n {\n-  return (symbolS *) local_symbol_make (FAKE_LABEL_NAME, now_seg,\n-\t\t\t\t\t(valueT) frag_now_fix (), frag_now);\n+  return (symbolS *) local_symbol_make (FAKE_LABEL_NAME, now_seg, frag_now,\n+\t\t\t\t\tfrag_now_fix ());\n }\n \n /* Load an entry from the GOT.  */"
    },
    {
      "sha": "f66e90e2446c2d59e05bac4b3457fedb7ceb4df8",
      "filename": "gas/config/tc-s390.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-s390.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-s390.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-s390.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -2105,7 +2105,7 @@ md_undefined_symbol (char *name)\n \t  if (symbol_find (name))\n \t    as_bad (_(\"GOT already in symbol table\"));\n \t  GOT_symbol = symbol_new (name, undefined_section,\n-\t\t\t\t   (valueT) 0, &zero_address_frag);\n+\t\t\t\t   &zero_address_frag, 0);\n \t}\n       return GOT_symbol;\n     }"
    },
    {
      "sha": "db5a7b9e145557101aeedc0d5eeae9a0db603129",
      "filename": "gas/config/tc-sh.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-sh.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-sh.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-sh.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -1920,7 +1920,7 @@ insert_loop_bounds (char *output, sh_operand_info *operand)\n       /* A REPEAT takes 6 bytes.  The SH has a 32 bit address space.\n \t Hence a 9 digit number should be enough to count all REPEATs.  */\n       sprintf (name, \"_R%x\", count++ & 0x3fffffff);\n-      end_sym = symbol_new (name, undefined_section, 0, &zero_address_frag);\n+      end_sym = symbol_new (name, undefined_section, &zero_address_frag, 0);\n       /* Make this a local symbol.  */\n #ifdef OBJ_COFF\n       SF_SET_LOCAL (end_sym);"
    },
    {
      "sha": "a6db99091d5beb2d4a7a639c76c71adf5eb65af8",
      "filename": "gas/config/tc-tic4x.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-tic4x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-tic4x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-tic4x.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -621,14 +621,14 @@ tic4x_insert_reg (const char *regname, int regnum)\n   char buf[32];\n   int i;\n \n-  symbol_table_insert (symbol_new (regname, reg_section, (valueT) regnum,\n-\t\t\t\t   &zero_address_frag));\n+  symbol_table_insert (symbol_new (regname, reg_section,\n+\t\t\t\t   &zero_address_frag, regnum));\n   for (i = 0; regname[i]; i++)\n     buf[i] = ISLOWER (regname[i]) ? TOUPPER (regname[i]) : regname[i];\n   buf[i] = '\\0';\n \n-  symbol_table_insert (symbol_new (buf, reg_section, (valueT) regnum,\n-\t\t\t\t   &zero_address_frag));\n+  symbol_table_insert (symbol_new (buf, reg_section,\n+\t\t\t\t   &zero_address_frag, regnum));\n }\n \n static void\n@@ -637,7 +637,7 @@ tic4x_insert_sym (const char *symname, int value)\n   symbolS *symbolP;\n \n   symbolP = symbol_new (symname, absolute_section,\n-\t\t\t(valueT) value, &zero_address_frag);\n+\t\t\t&zero_address_frag, value);\n   SF_SET_LOCAL (symbolP);\n   symbol_table_insert (symbolP);\n }"
    },
    {
      "sha": "6412d389f4fbe5303c530273d561e5604985346a",
      "filename": "gas/config/tc-tic54x.c",
      "status": "modified",
      "additions": 18,
      "deletions": 23,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-tic54x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-tic54x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-tic54x.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -416,8 +416,7 @@ tic54x_eval (int x ATTRIBUTE_UNUSED)\n       ignore_rest_of_line ();\n       return;\n     }\n-  symbolP = symbol_new (name, absolute_section,\n-\t\t\t(valueT) value, &zero_address_frag);\n+  symbolP = symbol_new (name, absolute_section, &zero_address_frag, value);\n   SF_SET_LOCAL (symbolP);\n   symbol_table_insert (symbolP);\n \n@@ -556,10 +555,9 @@ stag_add_field_symbols (struct stag *stag,\n       if (rootsym == NULL)\n \t{\n \t  symbolS *sym;\n-\t  sym = symbol_new (name, absolute_section,\n-\t\t\t    (field->stag ? field->offset :\n-\t\t\t     (valueT) (base_offset + field->offset)),\n-\t\t\t    &zero_address_frag);\n+\t  sym = symbol_new (name, absolute_section, &zero_address_frag,\n+\t\t\t    (field->stag ? field->offset\n+\t\t\t     : base_offset + field->offset));\n \t  SF_SET_LOCAL (sym);\n \t  symbol_table_insert (sym);\n \t}\n@@ -611,8 +609,8 @@ stag_add_field (struct stag *parent,\n   /* Only create a symbol for this field if the parent has no name.  */\n   if (!strncmp (\".fake\", parent->name, 5))\n     {\n-      symbolS *sym = symbol_new (name, absolute_section,\n-\t\t\t\t (valueT) offset, &zero_address_frag);\n+      symbolS *sym = symbol_new (name, absolute_section, &zero_address_frag,\n+\t\t\t\t offset);\n       SF_SET_LOCAL (sym);\n       symbol_table_insert (sym);\n     }\n@@ -675,16 +673,16 @@ tic54x_struct (int arg)\n       char fake[] = \".fake_stagNNNNNNN\";\n       sprintf (fake, \".fake_stag%d\", struct_count++);\n       current_stag->sym = symbol_new (fake, absolute_section,\n-\t\t\t\t      (valueT) abs_section_offset,\n-\t\t\t\t      &zero_address_frag);\n+\t\t\t\t      &zero_address_frag,\n+\t\t\t\t      abs_section_offset);\n     }\n   else\n     {\n       char * label = xstrdup (S_GET_NAME (line_label));\n       current_stag->sym = symbol_new (label,\n \t\t\t\t      absolute_section,\n-\t\t\t\t      (valueT) abs_section_offset,\n-\t\t\t\t      &zero_address_frag);\n+\t\t\t\t      &zero_address_frag,\n+\t\t\t\t      abs_section_offset);\n       free (label);\n     }\n   current_stag->name = S_GET_NAME (current_stag->sym);\n@@ -1459,7 +1457,7 @@ set_cpu (enum cpu_version version)\n   if (version == V545LP || version == V546LP)\n     {\n       symbolS *symbolP = symbol_new (\"__allow_lp\", absolute_section,\n-\t\t\t\t     (valueT) 1, &zero_address_frag);\n+\t\t\t\t     &zero_address_frag, 1);\n       SF_SET_LOCAL (symbolP);\n       symbol_table_insert (symbolP);\n     }\n@@ -2016,7 +2014,7 @@ tic54x_mmregs (int ignored ATTRIBUTE_UNUSED)\n   for (sym = (tic54x_symbol *) mmregs; sym->name; sym++)\n     {\n       symbolS *symbolP = symbol_new (sym->name, absolute_section,\n-\t\t\t\t     (valueT) sym->value, &zero_address_frag);\n+\t\t\t\t     &zero_address_frag, sym->value);\n       SF_SET_LOCAL (symbolP);\n       symbol_table_insert (symbolP);\n     }\n@@ -2070,7 +2068,7 @@ set_address_mode (int mode)\n   if (mode == far_mode)\n     {\n       symbolS *symbolP = symbol_new (\"__allow_far\", absolute_section,\n-\t\t\t\t     (valueT) 1, &zero_address_frag);\n+\t\t\t\t     &zero_address_frag, 1);\n       SF_SET_LOCAL (symbolP);\n       symbol_table_insert (symbolP);\n     }\n@@ -2176,7 +2174,7 @@ tic54x_set (int ignore ATTRIBUTE_UNUSED)\n   if ((symbolP = symbol_find (name)) == NULL\n       && (symbolP = md_undefined_symbol (name)) == NULL)\n     {\n-      symbolP = symbol_new (name, absolute_section, 0, &zero_address_frag);\n+      symbolP = symbol_new (name, absolute_section, &zero_address_frag, 0);\n       S_SET_STORAGE_CLASS (symbolP, C_STAT);\n     }\n   free (name);\n@@ -3010,7 +3008,7 @@ md_begin (void)\n     {\n       /* Add basic registers to the symbol table.  */\n       symbolS *symbolP = symbol_new (sym->name, absolute_section,\n-\t\t\t\t     (valueT) sym->value, &zero_address_frag);\n+\t\t\t\t     &zero_address_frag, sym->value);\n       SF_SET_LOCAL (symbolP);\n       symbol_table_insert (symbolP);\n       str_hash_insert (reg_hash, sym->name, (char *) sym);\n@@ -5015,18 +5013,15 @@ tic54x_undefined_symbol (char *name)\n       (sym = (tic54x_symbol *) str_hash_find (misc_symbol_hash, name)) != NULL ||\n       (sym = (tic54x_symbol *) str_hash_find (sbit_hash, name)) != NULL)\n     {\n-      return symbol_new (name, reg_section,\n-\t\t\t (valueT) sym->value,\n-\t\t\t &zero_address_frag);\n+      return symbol_new (name, reg_section, &zero_address_frag, sym->value);\n     }\n \n   if ((sym = (tic54x_symbol *) str_hash_find (reg_hash, name)) != NULL ||\n       (sym = (tic54x_symbol *) str_hash_find (mmreg_hash, name)) != NULL ||\n       !strcasecmp (name, \"a\") || !strcasecmp (name, \"b\"))\n     {\n-      return symbol_new (name, reg_section,\n-\t\t\t (valueT) sym ? sym->value : 0,\n-\t\t\t &zero_address_frag);\n+      return symbol_new (name, reg_section, &zero_address_frag,\n+\t\t\t sym ? sym->value : 0);\n     }\n \n   return NULL;"
    },
    {
      "sha": "82ec43933220c42b4d12e1be305500782853d484",
      "filename": "gas/config/tc-xtensa.c",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-xtensa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/config/tc-xtensa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-xtensa.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -4193,12 +4193,12 @@ xtensa_create_literal_symbol (segT sec, fragS *frag)\n      symbol will be in the output file.  */\n   if (get_is_linkonce_section (stdoutput, sec))\n     {\n-      symbolP = symbol_new (name, sec, 0, frag);\n+      symbolP = symbol_new (name, sec, frag, 0);\n       S_CLEAR_EXTERNAL (symbolP);\n       /* symbolP->local = 1; */\n     }\n   else\n-    symbolP = symbol_new (name, sec, 0, frag);\n+    symbolP = symbol_new (name, sec, frag, 0);\n \n   xtensa_add_literal_sym (symbolP);\n \n@@ -10210,7 +10210,7 @@ init_trampoline_frag (fragS *fp)\n       char label[10 + 2 * sizeof(fp)];\n \n       sprintf (label, \".L0_TR_%p\", fp);\n-      lsym = (symbolS *)local_symbol_make (label, now_seg, 0, fp);\n+      lsym = (symbolS *) local_symbol_make (label, now_seg, fp, 0);\n       fp->fr_symbol = lsym;\n       if (fp->tc_frag_data.needs_jump_around)\n         {\n@@ -10832,9 +10832,9 @@ convert_frag_immed (segT segP,\n \t\t  target_offset += unreach->tc_frag_data.text_expansion[0];\n \t\t}\n \t      gas_assert (gen_label == NULL);\n-\t      gen_label = symbol_new (FAKE_LABEL_NAME, now_seg,\n+\t      gen_label = symbol_new (FAKE_LABEL_NAME, now_seg, fragP,\n \t\t\t\t      fr_opcode - fragP->fr_literal\n-\t\t\t\t      + target_offset, fragP);\n+\t\t\t\t      + target_offset);\n \t      break;\n \n \t    case ITYPE_INSN:\n@@ -11137,8 +11137,7 @@ xg_promote_candidate_litpool (struct litpool_seg *lps,\n   /* Create a local symbol pointing to the\n      end of the pool.  */\n   sprintf (label, \".L0_LT_%p\", poolbeg);\n-  lsym = (symbolS *)local_symbol_make (label, lps->seg,\n-\t\t\t\t       0, poolend);\n+  lsym = (symbolS *) local_symbol_make (label, lps->seg, poolend, 0);\n   poolbeg->fr_symbol = lsym;\n   /* Rest is done in xtensa_relax_frag.  */\n }"
    },
    {
      "sha": "e4ba56d82ba523ec026bb735cbd18fe0c12a37d0",
      "filename": "gas/dwarf2dbg.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/dwarf2dbg.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/dwarf2dbg.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/dwarf2dbg.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -546,10 +546,10 @@ dwarf2_gen_line_info (addressT ofs, struct dwarf2_line_info *loc)\n       /* Use a non-fake name for the line number location,\n \t so that it can be referred to by relocations.  */\n       sprintf (name, \".Loc.%u.%u\", line, filenum);\n-      sym = symbol_new (name, now_seg, ofs, frag_now);\n+      sym = symbol_new (name, now_seg, frag_now, ofs);\n     }\n   else\n-    sym = symbol_temp_new (now_seg, ofs, frag_now);\n+    sym = symbol_temp_new (now_seg, frag_now, ofs);\n   dwarf2_gen_line_info_1 (sym, loc);\n }\n \n@@ -1245,8 +1245,8 @@ dwarf2_directive_loc (int dummy ATTRIBUTE_UNUSED)\n \t\tsym = force_reset_view;\n \t      else\n \t\t{\n-\t\t  sym = symbol_temp_new (absolute_section, value,\n-\t\t\t\t\t &zero_address_frag);\n+\t\t  sym = symbol_temp_new (absolute_section, &zero_address_frag,\n+\t\t\t\t\t value);\n \t\t  if (force_reset)\n \t\t    force_reset_view = sym;\n \t\t}\n@@ -1962,7 +1962,7 @@ process_entries (segT seg, struct line_entry *e)\n     out_inc_line_addr (INT_MAX, frag_ofs - last_frag_ofs);\n   else\n     {\n-      lab = symbol_temp_new (seg, frag_ofs, frag);\n+      lab = symbol_temp_new (seg, frag, frag_ofs);\n       relax_inc_line_addr (INT_MAX, lab, last_lab);\n     }\n }\n@@ -2326,11 +2326,11 @@ out_debug_ranges (segT ranges_seg)\n       symbolS *beg, *end;\n \n       frag = first_frag_for_seg (s->seg);\n-      beg = symbol_temp_new (s->seg, 0, frag);\n+      beg = symbol_temp_new (s->seg, frag, 0);\n       s->text_start = beg;\n \n       frag = last_frag_for_seg (s->seg);\n-      end = symbol_temp_new (s->seg, get_frag_fix (frag, s->seg), frag);\n+      end = symbol_temp_new (s->seg, frag, get_frag_fix (frag, s->seg));\n       s->text_end = end;\n \n       exp.X_op = O_symbol;\n@@ -2395,11 +2395,11 @@ out_debug_aranges (segT aranges_seg, segT info_seg)\n       symbolS *beg, *end;\n \n       frag = first_frag_for_seg (s->seg);\n-      beg = symbol_temp_new (s->seg, 0, frag);\n+      beg = symbol_temp_new (s->seg, frag, 0);\n       s->text_start = beg;\n \n       frag = last_frag_for_seg (s->seg);\n-      end = symbol_temp_new (s->seg, get_frag_fix (frag, s->seg), frag);\n+      end = symbol_temp_new (s->seg, frag, get_frag_fix (frag, s->seg));\n       s->text_end = end;\n \n       exp.X_op = O_symbol;"
    },
    {
      "sha": "8f884bb0042b017710a01927f16fcb840ef2d885",
      "filename": "gas/ecoff.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/ecoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/ecoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ecoff.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -2219,8 +2219,7 @@ add_file (const char *file_name, int indx ATTRIBUTE_UNUSED, int fake)\n     {\n       (void) add_ecoff_symbol (file_name, st_Nil, sc_Nil,\n \t\t\t       symbol_new (FAKE_LABEL_NAME, now_seg,\n-\t\t\t\t\t   (valueT) frag_now_fix (),\n-\t\t\t\t\t   frag_now),\n+\t\t\t\t\t   frag_now, frag_now_fix ()),\n \t\t\t       (bfd_vma) 0, 0, ECOFF_MARK_STAB (N_SOL));\n       return;\n     }\n@@ -3010,8 +3009,7 @@ ecoff_directive_end (int ignore ATTRIBUTE_UNUSED)\n   else\n     (void) add_ecoff_symbol ((const char *) NULL, st_End, sc_Text,\n \t\t\t     symbol_new (FAKE_LABEL_NAME, now_seg,\n-\t\t\t\t\t (valueT) frag_now_fix (),\n-\t\t\t\t\t frag_now),\n+\t\t\t\t\t frag_now, frag_now_fix ()),\n \t\t\t     (bfd_vma) 0, (symint_t) 0, (symint_t) 0);\n \n #ifdef md_flush_pending_output\n@@ -3254,8 +3252,7 @@ ecoff_directive_loc (int ignore ATTRIBUTE_UNUSED)\n     {\n       (void) add_ecoff_symbol ((char *) NULL, st_Label, sc_Text,\n \t\t\t       symbol_new (FAKE_LABEL_NAME, now_seg,\n-\t\t\t\t\t   (valueT) frag_now_fix (),\n-\t\t\t\t\t   frag_now),\n+\t\t\t\t\t   frag_now, frag_now_fix ()),\n \t\t\t       (bfd_vma) 0, 0, lineno);\n       return;\n     }"
    },
    {
      "sha": "23a6a003b9c82ac9a3ed42682c0e2bf845564be3",
      "filename": "gas/expr.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/expr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/expr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/expr.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -102,7 +102,7 @@ make_expr_symbol (expressionS *expressionP)\n \t\t\t    : expressionP->X_op == O_register\n \t\t\t      ? reg_section\n \t\t\t      : expr_section),\n-\t\t\t   0, &zero_address_frag);\n+\t\t\t   &zero_address_frag, 0);\n   symbol_set_value_expression (symbolP, expressionP);\n \n   if (expressionP->X_op == O_constant)"
    },
    {
      "sha": "aa91007d99846f51cda006da727de69f1d60c7a2",
      "filename": "gas/itbl-ops.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/itbl-ops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/itbl-ops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/itbl-ops.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -272,7 +272,7 @@ itbl_init (void)\n \tfor (e = *es; e; e = e->next)\n \t  {\n \t    symbol_table_insert (symbol_create (e->name, reg_section,\n-\t\t\t\t\t\te->value, &zero_address_frag));\n+\t\t\t\t\t\t&zero_address_frag, e->value));\n \t  }\n       }\n   append_insns_as_macros ();"
    },
    {
      "sha": "a2ad4b6ecfe4f4b94a33e53283f0c6fe2d752e2d",
      "filename": "gas/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/read.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -1002,8 +1002,7 @@ read_a_source_file (const char *name)\n \t\t      else\n \t\t\tline_label = symbol_create (line_start,\n \t\t\t\t\t\t    absolute_section,\n-\t\t\t\t\t\t    (valueT) 0,\n-\t\t\t\t\t\t    &zero_address_frag);\n+\t\t\t\t\t\t    &zero_address_frag, 0);\n \n \t\t      next_char = restore_line_pointer (nul_char);\n \t\t      if (next_char == ':')"
    },
    {
      "sha": "1ba9926b34d21bf20540a47411e6ca06182eadb6",
      "filename": "gas/stabs.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/stabs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/stabs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/stabs.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -144,8 +144,7 @@ aout_process_stab (int what, const char *string, int type, int other, int desc)\n      symbol chain.  This is to avoid \"continuation symbols\" (where one\n      ends in \"\\\" and the debug info is continued in the next .stabs\n      directive) from being separated by other random symbols.  */\n-  symbol = symbol_create (string, undefined_section, 0,\n-\t\t\t  &zero_address_frag);\n+  symbol = symbol_create (string, undefined_section, &zero_address_frag, 0);\n   if (what == 's' || what == 'n')\n     {\n       /* Pick up the value from the input line.  */\n@@ -378,7 +377,7 @@ s_stab_generic (int what,\n \t  expressionS exp;\n \n \t  /* Arrange for a value representing the current location.  */\n-\t  symbol = symbol_temp_new (saved_seg, dot, saved_frag);\n+\t  symbol = symbol_temp_new (saved_seg, saved_frag, dot);\n \n \t  exp.X_op = O_symbol;\n \t  exp.X_add_symbol = symbol;"
    },
    {
      "sha": "e07cef0595bdd9231766fda4ddccacabd6ae5b04",
      "filename": "gas/subsegs.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/subsegs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/subsegs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/subsegs.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -222,7 +222,7 @@ section_symbol (segT sec)\n   if (! EMIT_SECTION_SYMBOLS || symbol_table_frozen)\n     {\n       /* Here we know it won't be going into the symbol table.  */\n-      s = symbol_create (sec->symbol->name, sec, 0, &zero_address_frag);\n+      s = symbol_create (sec->symbol->name, sec, &zero_address_frag, 0);\n     }\n   else\n     {\n@@ -233,7 +233,7 @@ section_symbol (segT sec)\n       if (s == NULL\n \t  || ((seg = S_GET_SEGMENT (s)) != sec\n \t      && seg != undefined_section))\n-\ts = symbol_new (sec->symbol->name, sec, 0, &zero_address_frag);\n+\ts = symbol_new (sec->symbol->name, sec, &zero_address_frag, 0);\n       else if (seg == undefined_section)\n \t{\n \t  S_SET_SEGMENT (s, sec);"
    },
    {
      "sha": "092c9450761134e2e7068547343076ed095e2451",
      "filename": "gas/symbols.c",
      "status": "modified",
      "additions": 18,
      "deletions": 22,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/symbols.c?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -268,9 +268,9 @@ static void print_binary (FILE *, const char *, expressionS *);\n    output file, you can call symbol_create.  */\n \n symbolS *\n-symbol_new (const char *name, segT segment, valueT valu, fragS *frag)\n+symbol_new (const char *name, segT segment, fragS *frag, valueT valu)\n {\n-  symbolS *symbolP = symbol_create (name, segment, valu, frag);\n+  symbolS *symbolP = symbol_create (name, segment, frag, valu);\n \n   /* Link to end of symbol chain.  */\n   {\n@@ -312,11 +312,10 @@ save_symbol_name (const char *name)\n   return ret;\n }\n \n+/* Create a symbol.  NAME is copied, the caller can destroy/modify.  */\n+\n symbolS *\n-symbol_create (const char *name, /* It is copied, the caller can destroy/modify.  */\n-\t       segT segment,\t/* Segment identifier (SEG_<something>).  */\n-\t       valueT valu,\t/* Symbol value.  */\n-\t       fragS *frag\t/* Associated fragment.  */)\n+symbol_create (const char *name, segT segment, fragS *frag, valueT valu)\n {\n   const char *preserved_copy_of_name;\n   symbolS *symbolP;\n@@ -374,7 +373,7 @@ static unsigned long local_symbol_conversion_count;\n /* Create a local symbol and insert it into the local hash table.  */\n \n struct local_symbol *\n-local_symbol_make (const char *name, segT section, valueT val, fragS *frag)\n+local_symbol_make (const char *name, segT section, fragS *frag, valueT val)\n {\n   const char *name_copy;\n   struct local_symbol *ret;\n@@ -410,8 +409,8 @@ local_symbol_convert (struct local_symbol *locsym)\n \n   ++local_symbol_conversion_count;\n \n-  ret = symbol_new (locsym->lsy_name, locsym->lsy_section, locsym->lsy_value,\n-\t\t    local_symbol_get_frag (locsym));\n+  ret = symbol_new (locsym->lsy_name, locsym->lsy_section,\n+\t\t    local_symbol_get_frag (locsym), locsym->lsy_value);\n \n   if (local_symbol_resolved_p (locsym))\n     ret->sy_flags.sy_resolved = 1;\n@@ -626,14 +625,12 @@ colon (/* Just seen \"x:\" - rattle symbols & frags.  */\n     }\n   else if (! flag_keep_locals && bfd_is_local_label_name (stdoutput, sym_name))\n     {\n-      symbolP = (symbolS *) local_symbol_make (sym_name, now_seg,\n-\t\t\t\t\t       (valueT) frag_now_fix (),\n-\t\t\t\t\t       frag_now);\n+      symbolP = (symbolS *) local_symbol_make (sym_name, now_seg, frag_now,\n+\t\t\t\t\t       frag_now_fix ());\n     }\n   else\n     {\n-      symbolP = symbol_new (sym_name, now_seg, (valueT) frag_now_fix (),\n-\t\t\t    frag_now);\n+      symbolP = symbol_new (sym_name, now_seg, frag_now, frag_now_fix ());\n \n       symbol_table_insert (symbolP);\n     }\n@@ -698,8 +695,7 @@ symbol_find_or_make (const char *name)\n \t    return symbolP;\n \n \t  symbolP = (symbolS *) local_symbol_make (name, undefined_section,\n-\t\t\t\t\t\t   (valueT) 0,\n-\t\t\t\t\t\t   &zero_address_frag);\n+\t\t\t\t\t\t   &zero_address_frag, 0);\n \t  return symbolP;\n \t}\n \n@@ -720,7 +716,7 @@ symbol_make (const char *name)\n   symbolP = md_undefined_symbol ((char *) name);\n \n   if (!symbolP)\n-    symbolP = symbol_new (name, undefined_section, (valueT) 0, &zero_address_frag);\n+    symbolP = symbol_new (name, undefined_section, &zero_address_frag, 0);\n \n   return (symbolP);\n }\n@@ -873,21 +869,21 @@ symbol_clone_if_forward_ref (symbolS *symbolP, int is_forward)\n }\n \n symbolS *\n-symbol_temp_new (segT seg, valueT ofs, fragS *frag)\n+symbol_temp_new (segT seg, fragS *frag, valueT ofs)\n {\n-  return symbol_new (FAKE_LABEL_NAME, seg, ofs, frag);\n+  return symbol_new (FAKE_LABEL_NAME, seg, frag, ofs);\n }\n \n symbolS *\n symbol_temp_new_now (void)\n {\n-  return symbol_temp_new (now_seg, frag_now_fix (), frag_now);\n+  return symbol_temp_new (now_seg, frag_now, frag_now_fix ());\n }\n \n symbolS *\n symbol_temp_new_now_octets (void)\n {\n-  return symbol_temp_new (now_seg, frag_now_fix_octets (), frag_now);\n+  return symbol_temp_new (now_seg, frag_now, frag_now_fix_octets ());\n }\n \n symbolS *\n@@ -1322,7 +1318,7 @@ resolve_symbol_value (symbolS *symp)\n \n       if (relc_symbol_name != NULL)\n \trelc_symbol = symbol_new (relc_symbol_name, undefined_section,\n-\t\t\t\t  0, & zero_address_frag);\n+\t\t\t\t  &zero_address_frag, 0);\n \n       if (relc_symbol == NULL)\n \t{"
    },
    {
      "sha": "9c9f7c6d61dee0e0e885caf0ef9d398b98c0f2d3",
      "filename": "gas/symbols.h",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e01e1cee39777b6278ff01502742347247e8dfd7/gas/symbols.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e01e1cee39777b6278ff01502742347247e8dfd7/gas/symbols.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/symbols.h?ref=e01e1cee39777b6278ff01502742347247e8dfd7",
      "patch": "@@ -45,17 +45,14 @@ symbolS *symbol_find_exact (const char *name);\n symbolS *symbol_find_exact_noref (const char *name, int noref);\n symbolS *symbol_find_or_make (const char *name);\n symbolS *symbol_make (const char *name);\n-symbolS *symbol_new (const char *name, segT segment, valueT value,\n-\t\t     fragS * frag);\n-symbolS *symbol_create (const char *name, segT segment, valueT value,\n-\t\t\tfragS * frag);\n-struct local_symbol *local_symbol_make (const char *name, segT section,\n-\t\t\t\t\tvalueT val, fragS *frag);\n+symbolS *symbol_new (const char *, segT, fragS *, valueT);\n+symbolS *symbol_create (const char *, segT, fragS *, valueT);\n+struct local_symbol *local_symbol_make (const char *, segT, fragS *, valueT);\n symbolS *symbol_clone (symbolS *, int);\n #undef symbol_clone_if_forward_ref\n symbolS *symbol_clone_if_forward_ref (symbolS *, int);\n #define symbol_clone_if_forward_ref(s) symbol_clone_if_forward_ref (s, 0)\n-symbolS *symbol_temp_new (segT, valueT, fragS *);\n+symbolS *symbol_temp_new (segT, fragS *, valueT);\n symbolS *symbol_temp_new_now (void);\n symbolS *symbol_temp_new_now_octets (void);\n symbolS *symbol_temp_make (void);"
    }
  ]
}