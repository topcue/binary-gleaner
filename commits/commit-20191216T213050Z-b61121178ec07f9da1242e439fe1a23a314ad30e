{
  "sha": "b61121178ec07f9da1242e439fe1a23a314ad30e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjYxMTIxMTc4ZWMwN2Y5ZGExMjQyZTQzOWZlMWEyM2EzMTRhZDMwZQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-12-16T21:30:50Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-12-16T21:30:50Z"
    },
    "message": "jit: c++-ify gdb_block\n\nAdd a constructor to gdb_block, change the name field to be a\ngdb::unique_xmalloc_ptr.  This is in preparation for using an\nstd::forward_list<gdb_block> in the next patch.\n\ngdb/ChangeLog:\n\n\t* jit.c (struct gdb_block): Add constructor, initialize\n\treal_block and next fields.\n\t<name>: Change type to gdb::unique_xmalloc_ptr.\n\t(struct gdb_symtab) <~gdb_symtab>: Free blocks with delete.\n\t(jit_block_open_impl): Allocate gdb_block with new.\n\t(finalize_symtab): Adjust to gdb::unique_xmalloc_ptr.",
    "tree": {
      "sha": "a8049a4df7e4ab02933f0ee393ec43ea3c53c3c0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a8049a4df7e4ab02933f0ee393ec43ea3c53c3c0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b61121178ec07f9da1242e439fe1a23a314ad30e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b61121178ec07f9da1242e439fe1a23a314ad30e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b61121178ec07f9da1242e439fe1a23a314ad30e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b61121178ec07f9da1242e439fe1a23a314ad30e/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1b61f46da5e55bf2df243215f34ffbca4bcf6d9e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b61f46da5e55bf2df243215f34ffbca4bcf6d9e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1b61f46da5e55bf2df243215f34ffbca4bcf6d9e"
    }
  ],
  "stats": {
    "total": 34,
    "additions": 23,
    "deletions": 11
  },
  "files": [
    {
      "sha": "c797e87703f43491c00128658e14f1d85a79241f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b61121178ec07f9da1242e439fe1a23a314ad30e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b61121178ec07f9da1242e439fe1a23a314ad30e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b61121178ec07f9da1242e439fe1a23a314ad30e",
      "patch": "@@ -1,3 +1,12 @@\n+2019-12-16  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* jit.c (struct gdb_block): Add constructor, initialize\n+\treal_block and next fields.\n+\t<name>: Change type to gdb::unique_xmalloc_ptr.\n+\t(struct gdb_symtab) <~gdb_symtab>: Free blocks with delete.\n+\t(jit_block_open_impl): Allocate gdb_block with new.\n+\t(finalize_symtab): Adjust to gdb::unique_xmalloc_ptr.\n+\n 2019-12-16  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* jit.c: Include forward_list."
    },
    {
      "sha": "bb6b6bacb5d17a5c3218c284e976ac310e071143",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 14,
      "deletions": 11,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b61121178ec07f9da1242e439fe1a23a314ad30e/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b61121178ec07f9da1242e439fe1a23a314ad30e/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=b61121178ec07f9da1242e439fe1a23a314ad30e",
      "patch": "@@ -429,22 +429,30 @@ jit_read_code_entry (struct gdbarch *gdbarch,\n \n struct gdb_block\n {\n+  gdb_block (gdb_block *parent, CORE_ADDR begin, CORE_ADDR end,\n+\t     const char *name)\n+    : parent (parent),\n+      begin (begin),\n+      end (end),\n+      name (name != nullptr ? xstrdup (name) : nullptr)\n+  {}\n+\n   /* gdb_blocks are linked into a tree structure.  Next points to the\n      next node at the same depth as this block and parent to the\n      parent gdb_block.  */\n-  struct gdb_block *next, *parent;\n+  struct gdb_block *next = nullptr, *parent;\n \n   /* Points to the \"real\" block that is being built out of this\n      instance.  This block will be added to a blockvector, which will\n      then be added to a symtab.  */\n-  struct block *real_block;\n+  struct block *real_block = nullptr;\n \n   /* The first and last code address corresponding to this block.  */\n   CORE_ADDR begin, end;\n \n   /* The name of this block (if any).  If this is non-NULL, the\n      FUNCTION symbol symbol is set to this value.  */\n-  const char *name;\n+  gdb::unique_xmalloc_ptr<char> name;\n };\n \n /* Proxy object for building a symtab.  */\n@@ -465,8 +473,7 @@ struct gdb_symtab\n          gdb_block_iter = gdb_block_iter_tmp)\n       {\n         gdb_block_iter_tmp = gdb_block_iter->next;\n-        xfree ((void *) gdb_block_iter->name);\n-        xfree (gdb_block_iter);\n+\tdelete gdb_block_iter;\n       }\n   }\n \n@@ -574,13 +581,9 @@ jit_block_open_impl (struct gdb_symbol_callbacks *cb,\n \t\t     struct gdb_symtab *symtab, struct gdb_block *parent,\n \t\t     GDB_CORE_ADDR begin, GDB_CORE_ADDR end, const char *name)\n {\n-  struct gdb_block *block = XCNEW (struct gdb_block);\n+  struct gdb_block *block = new gdb_block (parent, begin, end, name);\n \n   block->next = symtab->blocks;\n-  block->begin = (CORE_ADDR) begin;\n-  block->end = (CORE_ADDR) end;\n-  block->name = name ? xstrdup (name) : NULL;\n-  block->parent = parent;\n \n   /* Ensure that the blocks are inserted in the correct (reverse of\n      the order expected by blockvector).  */\n@@ -721,7 +724,7 @@ finalize_symtab (struct gdb_symtab *stab, struct objfile *objfile)\n       SYMBOL_BLOCK_VALUE (block_name) = new_block;\n \n       block_name->name = obstack_strdup (&objfile->objfile_obstack,\n-\t\t\t\t\t gdb_block_iter->name);\n+\t\t\t\t\t gdb_block_iter->name.get ());\n \n       BLOCK_FUNCTION (new_block) = block_name;\n "
    }
  ]
}