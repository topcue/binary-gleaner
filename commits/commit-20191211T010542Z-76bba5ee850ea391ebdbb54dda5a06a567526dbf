{
  "sha": "76bba5ee850ea391ebdbb54dda5a06a567526dbf",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzZiYmE1ZWU4NTBlYTM5MWViZGJiNTRkZGE1YTA2YTU2NzUyNmRiZg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-10T08:28:38Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-11T01:05:42Z"
    },
    "message": "ubsan: left shift of cannot be represented in type 'int'\n\n\t* dis-asm.h (INSN_HAS_RELOC, DISASSEMBLE_DATA),\n\t(USER_SPECIFIED_MACHINE_TYPE, WIDE_OUTPUT): Make unsigned.\n\t* opcode/tic80.h (TIC80_OPERAND_*): Likewise.",
    "tree": {
      "sha": "32a1d2cc5bb28166663b7826c69c52a99b3ac33a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/32a1d2cc5bb28166663b7826c69c52a99b3ac33a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/76bba5ee850ea391ebdbb54dda5a06a567526dbf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/76bba5ee850ea391ebdbb54dda5a06a567526dbf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/76bba5ee850ea391ebdbb54dda5a06a567526dbf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/76bba5ee850ea391ebdbb54dda5a06a567526dbf/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "567607c11fbf710513d0924192f3ed528c02d76f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/567607c11fbf710513d0924192f3ed528c02d76f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/567607c11fbf710513d0924192f3ed528c02d76f"
    }
  ],
  "stats": {
    "total": 50,
    "additions": 28,
    "deletions": 22
  },
  "files": [
    {
      "sha": "98815e88b29595d5f54bd8f8777770c30dbfde30",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/76bba5ee850ea391ebdbb54dda5a06a567526dbf/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/76bba5ee850ea391ebdbb54dda5a06a567526dbf/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=76bba5ee850ea391ebdbb54dda5a06a567526dbf",
      "patch": "@@ -1,3 +1,9 @@\n+2019-12-11  Alan Modra  <amodra@gmail.com>\n+\n+\t* dis-asm.h (INSN_HAS_RELOC, DISASSEMBLE_DATA),\n+\t(USER_SPECIFIED_MACHINE_TYPE, WIDE_OUTPUT): Make unsigned.\n+\t* opcode/tic80.h (TIC80_OPERAND_*): Likewise.\n+\n 2019-12-10  Alan Modra  <amodra@gmail.com>\n \n \tPR 24960"
    },
    {
      "sha": "b2a09f831fb21e5f09efc8cff2ed8d8a6e20c18c",
      "filename": "include/dis-asm.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/76bba5ee850ea391ebdbb54dda5a06a567526dbf/include/dis-asm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/76bba5ee850ea391ebdbb54dda5a06a567526dbf/include/dis-asm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/dis-asm.h?ref=76bba5ee850ea391ebdbb54dda5a06a567526dbf",
      "patch": "@@ -105,14 +105,14 @@ typedef struct disassemble_info\n   unsigned long flags;\n   /* Set if the disassembler has determined that there are one or more\n      relocations associated with the instruction being disassembled.  */\n-#define INSN_HAS_RELOC\t (1 << 31)\n+#define INSN_HAS_RELOC\t (1u << 31)\n   /* Set if the user has requested the disassembly of data as well as code.  */\n-#define DISASSEMBLE_DATA (1 << 30)\n+#define DISASSEMBLE_DATA (1u << 30)\n   /* Set if the user has specifically set the machine type encoded in the\n      mach field of this structure.  */\n-#define USER_SPECIFIED_MACHINE_TYPE (1 << 29)\n+#define USER_SPECIFIED_MACHINE_TYPE (1u << 29)\n   /* Set if the user has requested wide output.  */\n-#define WIDE_OUTPUT (1 << 28)\n+#define WIDE_OUTPUT (1u << 28)\n \n   /* Use internally by the target specific disassembly code.  */\n   void *private_data;"
    },
    {
      "sha": "ac1249fcc376ee243a67d7ff178fdb5d15c15f1a",
      "filename": "include/opcode/tic80.h",
      "status": "modified",
      "additions": 18,
      "deletions": 18,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/76bba5ee850ea391ebdbb54dda5a06a567526dbf/include/opcode/tic80.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/76bba5ee850ea391ebdbb54dda5a06a567526dbf/include/opcode/tic80.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/tic80.h?ref=76bba5ee850ea391ebdbb54dda5a06a567526dbf",
      "patch": "@@ -138,68 +138,68 @@ extern const struct tic80_operand tic80_operands[];\n /* This operand must be an even register number.  Floating point numbers\n    for example are stored in even/odd register pairs. */\n \n-#define TIC80_OPERAND_EVEN\t(1 << 0)\n+#define TIC80_OPERAND_EVEN\t(1u << 0)\n \n /* This operand must be an odd register number and must be one greater than\n    the register number of the previous operand.  I.E. the second register in\n    an even/odd register pair. */\n \n-#define TIC80_OPERAND_ODD\t(1 << 1)\n+#define TIC80_OPERAND_ODD\t(1u << 1)\n \n /* This operand takes signed values.  */\n \n-#define TIC80_OPERAND_SIGNED\t(1 << 2)\n+#define TIC80_OPERAND_SIGNED\t(1u << 2)\n \n /* This operand may be either a predefined constant name or a numeric value.\n    An example would be a condition code like \"eq0.b\" which has the numeric\n    value 0x2. */\n \n-#define TIC80_OPERAND_NUM\t(1 << 3)\n+#define TIC80_OPERAND_NUM\t(1u << 3)\n \n /* This operand should be wrapped in parentheses rather than separated\n    from the previous one by a comma.  This is used for various\n    instructions, like the load and store instructions, which want\n    their operands to look like \"displacement(reg)\" */\n \n-#define TIC80_OPERAND_PARENS\t(1 << 4)\n+#define TIC80_OPERAND_PARENS\t(1u << 4)\n \n /* This operand is a PC relative branch offset.  The disassembler prints\n    these symbolically if possible.  Note that the offsets are taken as word\n    offsets. */\n \n-#define TIC80_OPERAND_PCREL\t(1 << 5)\n+#define TIC80_OPERAND_PCREL\t(1u << 5)\n \n /* This flag is a hint to the disassembler for using hex as the prefered\n    printing format, even for small positive or negative immediate values.\n    Normally values in the range -999 to 999 are printed as signed decimal\n    values and other values are printed in hex. */\n \n-#define TIC80_OPERAND_BITFIELD\t(1 << 6)\n+#define TIC80_OPERAND_BITFIELD\t(1u << 6)\n \n /* This operand may have a \":m\" modifier specified by bit 17 in a short\n    immediate form instruction. */\n \n-#define TIC80_OPERAND_M_SI\t(1 << 7)\n+#define TIC80_OPERAND_M_SI\t(1u << 7)\n \n /* This operand may have a \":m\" modifier specified by bit 15 in a long\n    immediate or register form instruction. */\n \n-#define TIC80_OPERAND_M_LI\t(1 << 8)\n+#define TIC80_OPERAND_M_LI\t(1u << 8)\n \n /* This operand may have a \":s\" modifier specified in bit 11 in a long\n    immediate or register form instruction. */\n \n-#define TIC80_OPERAND_SCALED\t(1 << 9)\n+#define TIC80_OPERAND_SCALED\t(1u << 9)\n \n /* This operand is a floating point value */\n \n-#define TIC80_OPERAND_FLOAT\t(1 << 10)\n+#define TIC80_OPERAND_FLOAT\t(1u << 10)\n \n /* This operand is an byte offset from a base relocation. The lower\n  two bits of the final relocated address are ignored when the value is\n  written to the program counter. */\n \n-#define TIC80_OPERAND_BASEREL\t(1 << 11)\n+#define TIC80_OPERAND_BASEREL\t(1u << 11)\n \n /* This operand is an \"endmask\" field for a shift instruction.\n    It is treated special in that it can have values of 0-32,\n@@ -208,37 +208,37 @@ extern const struct tic80_operand tic80_operands[];\n    has no way of knowing from the instruction which value was \n    given at assembly time, so it just uses '0'. */\n \n-#define TIC80_OPERAND_ENDMASK\t(1 << 12)\n+#define TIC80_OPERAND_ENDMASK\t(1u << 12)\n \n /* This operand is one of the 32 general purpose registers.\n    The disassembler prints these with a leading 'r'. */\n \n-#define TIC80_OPERAND_GPR\t(1 << 27)\n+#define TIC80_OPERAND_GPR\t(1u << 27)\n \n /* This operand is a floating point accumulator register.\n    The disassembler prints these with a leading 'a'. */\n \n-#define TIC80_OPERAND_FPA\t( 1 << 28)\n+#define TIC80_OPERAND_FPA\t(1u << 28)\n \n /* This operand is a control register number, either numeric or\n    symbolic (like \"EIF\", \"EPC\", etc).\n    The disassembler prints these symbolically. */\n \n-#define TIC80_OPERAND_CR\t(1 << 29)\n+#define TIC80_OPERAND_CR\t(1u << 29)\n \n /* This operand is a condition code, either numeric or\n    symbolic (like \"eq0.b\", \"ne0.w\", etc).\n    The disassembler prints these symbolically. */\n \n-#define TIC80_OPERAND_CC\t(1 << 30)\n+#define TIC80_OPERAND_CC\t(1u << 30)\n \n /* This operand is a bit number, either numeric or\n    symbolic (like \"eq.b\", \"or.f\", etc).\n    The disassembler prints these symbolically.\n    Note that they appear in the instruction in 1's complement relative\n    to the values given in the manual. */\n \n-#define TIC80_OPERAND_BITNUM\t(1 << 31)\n+#define TIC80_OPERAND_BITNUM\t(1u << 31)\n \n /* This mask is used to strip operand bits from an int that contains\n    both operand bits and a numeric value in the lsbs. */"
    }
  ]
}