{
  "sha": "161e87d12167b1e36193385485c1f6ce92f74f02",
  "node_id": "C_kwDOANOeidoAKDE2MWU4N2QxMjE2N2IxZTM2MTkzMzg1NDg1YzFmNmNlOTJmNzRmMDI",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-12-15T01:18:42Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-12-15T01:21:26Z"
    },
    "message": "PR28694, Out-of-bounds write in stab_xcoff_builtin_type\n\n\tPR 28694\n\t* stabs.c (stab_xcoff_builtin_type): Make typenum unsigned.\n\tNegate typenum earlier, simplifying bounds checking.  Correct\n\toff-by-one indexing.  Adjust switch cases.",
    "tree": {
      "sha": "361204d128f1a80bb5a8ab7d7849b568e97d0807",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/361204d128f1a80bb5a8ab7d7849b568e97d0807"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/161e87d12167b1e36193385485c1f6ce92f74f02",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/161e87d12167b1e36193385485c1f6ce92f74f02",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/161e87d12167b1e36193385485c1f6ce92f74f02",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/161e87d12167b1e36193385485c1f6ce92f74f02/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d5c94731766bf4f276146fd29c1df8eebc2aaf69",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d5c94731766bf4f276146fd29c1df8eebc2aaf69",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d5c94731766bf4f276146fd29c1df8eebc2aaf69"
    }
  ],
  "stats": {
    "total": 87,
    "additions": 43,
    "deletions": 44
  },
  "files": [
    {
      "sha": "83ee3ea5fa4a3ab60fa13a465022efdaaf014973",
      "filename": "binutils/stabs.c",
      "status": "modified",
      "additions": 43,
      "deletions": 44,
      "changes": 87,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/161e87d12167b1e36193385485c1f6ce92f74f02/binutils/stabs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/161e87d12167b1e36193385485c1f6ce92f74f02/binutils/stabs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/stabs.c?ref=161e87d12167b1e36193385485c1f6ce92f74f02",
      "patch": "@@ -202,7 +202,7 @@ static debug_type stab_find_type (void *, struct stab_handle *, const int *);\n static bool stab_record_type\n   (void *, struct stab_handle *, const int *, debug_type);\n static debug_type stab_xcoff_builtin_type\n-  (void *, struct stab_handle *, int);\n+  (void *, struct stab_handle *, unsigned int);\n static debug_type stab_find_tagged_type\n   (void *, struct stab_handle *, const char *, int, enum debug_type_kind);\n static debug_type *stab_demangle_argtypes\n@@ -3496,166 +3496,167 @@ stab_record_type (void *dhandle ATTRIBUTE_UNUSED, struct stab_handle *info,\n \n static debug_type\n stab_xcoff_builtin_type (void *dhandle, struct stab_handle *info,\n-\t\t\t int typenum)\n+\t\t\t unsigned int typenum)\n {\n   debug_type rettype;\n   const char *name;\n \n-  if (typenum >= 0 || typenum < -XCOFF_TYPE_COUNT)\n+  typenum = -typenum - 1;\n+  if (typenum >= XCOFF_TYPE_COUNT)\n     {\n-      fprintf (stderr, _(\"Unrecognized XCOFF type %d\\n\"), typenum);\n+      fprintf (stderr, _(\"Unrecognized XCOFF type %d\\n\"), -typenum - 1);\n       return DEBUG_TYPE_NULL;\n     }\n-  if (info->xcoff_types[-typenum] != NULL)\n-    return info->xcoff_types[-typenum];\n+  if (info->xcoff_types[typenum] != NULL)\n+    return info->xcoff_types[typenum];\n \n-  switch (-typenum)\n+  switch (typenum)\n     {\n-    case 1:\n+    case 0:\n       /* The size of this and all the other types are fixed, defined\n \t by the debugging format.  */\n       name = \"int\";\n       rettype = debug_make_int_type (dhandle, 4, false);\n       break;\n-    case 2:\n+    case 1:\n       name = \"char\";\n       rettype = debug_make_int_type (dhandle, 1, false);\n       break;\n-    case 3:\n+    case 2:\n       name = \"short\";\n       rettype = debug_make_int_type (dhandle, 2, false);\n       break;\n-    case 4:\n+    case 3:\n       name = \"long\";\n       rettype = debug_make_int_type (dhandle, 4, false);\n       break;\n-    case 5:\n+    case 4:\n       name = \"unsigned char\";\n       rettype = debug_make_int_type (dhandle, 1, true);\n       break;\n-    case 6:\n+    case 5:\n       name = \"signed char\";\n       rettype = debug_make_int_type (dhandle, 1, false);\n       break;\n-    case 7:\n+    case 6:\n       name = \"unsigned short\";\n       rettype = debug_make_int_type (dhandle, 2, true);\n       break;\n-    case 8:\n+    case 7:\n       name = \"unsigned int\";\n       rettype = debug_make_int_type (dhandle, 4, true);\n       break;\n-    case 9:\n+    case 8:\n       name = \"unsigned\";\n       rettype = debug_make_int_type (dhandle, 4, true);\n       break;\n-    case 10:\n+    case 9:\n       name = \"unsigned long\";\n       rettype = debug_make_int_type (dhandle, 4, true);\n       break;\n-    case 11:\n+    case 10:\n       name = \"void\";\n       rettype = debug_make_void_type (dhandle);\n       break;\n-    case 12:\n+    case 11:\n       /* IEEE single precision (32 bit).  */\n       name = \"float\";\n       rettype = debug_make_float_type (dhandle, 4);\n       break;\n-    case 13:\n+    case 12:\n       /* IEEE double precision (64 bit).  */\n       name = \"double\";\n       rettype = debug_make_float_type (dhandle, 8);\n       break;\n-    case 14:\n+    case 13:\n       /* This is an IEEE double on the RS/6000, and different machines\n \t with different sizes for \"long double\" should use different\n \t negative type numbers.  See stabs.texinfo.  */\n       name = \"long double\";\n       rettype = debug_make_float_type (dhandle, 8);\n       break;\n-    case 15:\n+    case 14:\n       name = \"integer\";\n       rettype = debug_make_int_type (dhandle, 4, false);\n       break;\n-    case 16:\n+    case 15:\n       name = \"boolean\";\n       rettype = debug_make_bool_type (dhandle, 4);\n       break;\n-    case 17:\n+    case 16:\n       name = \"short real\";\n       rettype = debug_make_float_type (dhandle, 4);\n       break;\n-    case 18:\n+    case 17:\n       name = \"real\";\n       rettype = debug_make_float_type (dhandle, 8);\n       break;\n-    case 19:\n+    case 18:\n       /* FIXME */\n       name = \"stringptr\";\n       rettype = NULL;\n       break;\n-    case 20:\n+    case 19:\n       /* FIXME */\n       name = \"character\";\n       rettype = debug_make_int_type (dhandle, 1, true);\n       break;\n-    case 21:\n+    case 20:\n       name = \"logical*1\";\n       rettype = debug_make_bool_type (dhandle, 1);\n       break;\n-    case 22:\n+    case 21:\n       name = \"logical*2\";\n       rettype = debug_make_bool_type (dhandle, 2);\n       break;\n-    case 23:\n+    case 22:\n       name = \"logical*4\";\n       rettype = debug_make_bool_type (dhandle, 4);\n       break;\n-    case 24:\n+    case 23:\n       name = \"logical\";\n       rettype = debug_make_bool_type (dhandle, 4);\n       break;\n-    case 25:\n+    case 24:\n       /* Complex type consisting of two IEEE single precision values.  */\n       name = \"complex\";\n       rettype = debug_make_complex_type (dhandle, 8);\n       break;\n-    case 26:\n+    case 25:\n       /* Complex type consisting of two IEEE double precision values.  */\n       name = \"double complex\";\n       rettype = debug_make_complex_type (dhandle, 16);\n       break;\n-    case 27:\n+    case 26:\n       name = \"integer*1\";\n       rettype = debug_make_int_type (dhandle, 1, false);\n       break;\n-    case 28:\n+    case 27:\n       name = \"integer*2\";\n       rettype = debug_make_int_type (dhandle, 2, false);\n       break;\n-    case 29:\n+    case 28:\n       name = \"integer*4\";\n       rettype = debug_make_int_type (dhandle, 4, false);\n       break;\n-    case 30:\n+    case 29:\n       /* FIXME */\n       name = \"wchar\";\n       rettype = debug_make_int_type (dhandle, 2, false);\n       break;\n-    case 31:\n+    case 30:\n       name = \"long long\";\n       rettype = debug_make_int_type (dhandle, 8, false);\n       break;\n-    case 32:\n+    case 31:\n       name = \"unsigned long long\";\n       rettype = debug_make_int_type (dhandle, 8, true);\n       break;\n-    case 33:\n+    case 32:\n       name = \"logical*8\";\n       rettype = debug_make_bool_type (dhandle, 8);\n       break;\n-    case 34:\n+    case 33:\n       name = \"integer*8\";\n       rettype = debug_make_int_type (dhandle, 8, false);\n       break;\n@@ -3664,9 +3665,7 @@ stab_xcoff_builtin_type (void *dhandle, struct stab_handle *info,\n     }\n \n   rettype = debug_name_type (dhandle, name, rettype);\n-\n-  info->xcoff_types[-typenum] = rettype;\n-\n+  info->xcoff_types[typenum] = rettype;\n   return rettype;\n }\n "
    }
  ]
}