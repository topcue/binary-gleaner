{
  "sha": "4b8cb9dd9e1fa8dc471f640c592312a751e67eed",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGI4Y2I5ZGQ5ZTFmYThkYzQ3MWY2NDBjNTkyMzEyYTc1MWU2N2VlZA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-12T17:50:05Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-12T17:50:09Z"
    },
    "message": "gdb: make gdbpy_parse_command_name return a unique_xmalloc_ptr\n\nThis avoids some manual memory management.\n\ncmdpy_init correctly transfers ownership of the name to the\ncmd_list_element, as it sets the name_allocated flag.  However,\ncmdpy_init (and add_setshow_generic) doesn't, it looks like the name is\njust leaked.  This is a bit tricky, because it actually creates two\ncommands (one set and one show), it would take a bit of refactoring of\nthe command code to give each their own allocated copy.  For now, just\nkeep doing what the current code does but in a more explicit fashion,\nwith an explicit release.\n\ngdb/ChangeLog:\n\n\t* python/python-internal.h (gdbpy_parse_command_name): Return\n\tgdb::unique_xmalloc_ptr.\n\t* python/py-cmd.c (gdbpy_parse_command_name): Likewise.\n\t(cmdpy_init): Adjust.\n\t* python/py-param.c (parmpy_init): Adjust.\n\t(add_setshow_generic): Take gdb::unique_xmalloc_ptr, release it\n\twhen done.\n\nChange-Id: Iae5bc21fe2b22f12d5f954057b0aca7ca4cd3f0d",
    "tree": {
      "sha": "c1b00367e47618893c8f265e20765a0ab7151d7f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c1b00367e47618893c8f265e20765a0ab7151d7f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4b8cb9dd9e1fa8dc471f640c592312a751e67eed",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4b8cb9dd9e1fa8dc471f640c592312a751e67eed",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4b8cb9dd9e1fa8dc471f640c592312a751e67eed",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4b8cb9dd9e1fa8dc471f640c592312a751e67eed/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3db19b2d7241efde4ca9a7b0e6f33b0929f0cf03",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3db19b2d7241efde4ca9a7b0e6f33b0929f0cf03",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3db19b2d7241efde4ca9a7b0e6f33b0929f0cf03"
    }
  ],
  "stats": {
    "total": 115,
    "additions": 61,
    "deletions": 54
  },
  "files": [
    {
      "sha": "fe75cee4b5e745117fd6f7c75e0fc43c54bd210e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b8cb9dd9e1fa8dc471f640c592312a751e67eed/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b8cb9dd9e1fa8dc471f640c592312a751e67eed/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4b8cb9dd9e1fa8dc471f640c592312a751e67eed",
      "patch": "@@ -1,3 +1,13 @@\n+2021-05-12  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* python/python-internal.h (gdbpy_parse_command_name): Return\n+\tgdb::unique_xmalloc_ptr.\n+\t* python/py-cmd.c (gdbpy_parse_command_name): Likewise.\n+\t(cmdpy_init): Adjust.\n+\t* python/py-param.c (parmpy_init): Adjust.\n+\t(add_setshow_generic): Take gdb::unique_xmalloc_ptr, release it\n+\twhen done.\n+\n 2021-05-12  George Barrett  <bob@bob131.so>\n \n \t* NEWS (Guile API): Note the addition of the new procedure."
    },
    {
      "sha": "6f7794cdf53df40d212e6786109a1dddd4ea6aa9",
      "filename": "gdb/python/py-cmd.c",
      "status": "modified",
      "additions": 22,
      "deletions": 25,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b8cb9dd9e1fa8dc471f640c592312a751e67eed/gdb/python/py-cmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b8cb9dd9e1fa8dc471f640c592312a751e67eed/gdb/python/py-cmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-cmd.c?ref=4b8cb9dd9e1fa8dc471f640c592312a751e67eed",
      "patch": "@@ -342,10 +342,10 @@ cmdpy_completer (struct cmd_list_element *command,\n \n    START_LIST is the list in which the search starts.\n \n-   This function returns the xmalloc()d name of the new command.  On\n-   error sets the Python error and returns NULL.  */\n+   This function returns the name of the new command.  On error sets the Python\n+   error and returns NULL.  */\n \n-char *\n+gdb::unique_xmalloc_ptr<char>\n gdbpy_parse_command_name (const char *name,\n \t\t\t  struct cmd_list_element ***base_list,\n \t\t\t  struct cmd_list_element **start_list)\n@@ -354,7 +354,6 @@ gdbpy_parse_command_name (const char *name,\n   int len = strlen (name);\n   int i, lastchar;\n   const char *prefix_text2;\n-  char *result;\n \n   /* Skip trailing whitespace.  */\n   for (i = len - 1; i >= 0 && (name[i] == ' ' || name[i] == '\\t'); --i)\n@@ -369,9 +368,10 @@ gdbpy_parse_command_name (const char *name,\n   /* Find first character of the final word.  */\n   for (; i > 0 && valid_cmd_char_p (name[i - 1]); --i)\n     ;\n-  result = (char *) xmalloc (lastchar - i + 2);\n-  memcpy (result, &name[i], lastchar - i + 1);\n-  result[lastchar - i + 1] = '\\0';\n+\n+  gdb::unique_xmalloc_ptr<char> result ((char *) xmalloc (lastchar - i + 2));\n+  memcpy (result.get (), &name[i], lastchar - i + 1);\n+  result.get ()[lastchar - i + 1] = '\\0';\n \n   /* Skip whitespace again.  */\n   for (--i; i >= 0 && (name[i] == ' ' || name[i] == '\\t'); --i)\n@@ -390,7 +390,6 @@ gdbpy_parse_command_name (const char *name,\n     {\n       PyErr_Format (PyExc_RuntimeError, _(\"Could not find command prefix %s.\"),\n \t\t    prefix_text.c_str ());\n-      xfree (result);\n       return NULL;\n     }\n \n@@ -402,7 +401,6 @@ gdbpy_parse_command_name (const char *name,\n \n   PyErr_Format (PyExc_RuntimeError, _(\"'%s' is not a prefix command.\"),\n \t\tprefix_text.c_str ());\n-  xfree (result);\n   return NULL;\n }\n \n@@ -435,7 +433,6 @@ cmdpy_init (PyObject *self, PyObject *args, PyObject *kw)\n   int completetype = -1;\n   char *docstring = NULL;\n   struct cmd_list_element **cmd_list;\n-  char *cmd_name;\n   static const char *keywords[] = { \"name\", \"command_class\", \"completer_class\",\n \t\t\t\t    \"prefix\", NULL };\n   PyObject *is_prefix_obj = NULL;\n@@ -474,19 +471,18 @@ cmdpy_init (PyObject *self, PyObject *args, PyObject *kw)\n       return -1;\n     }\n \n-  cmd_name = gdbpy_parse_command_name (name, &cmd_list, &cmdlist);\n-  if (! cmd_name)\n+  gdb::unique_xmalloc_ptr<char> cmd_name\n+    = gdbpy_parse_command_name (name, &cmd_list, &cmdlist);\n+  if (cmd_name == nullptr)\n     return -1;\n \n   if (is_prefix_obj != NULL)\n     {\n       int cmp = PyObject_IsTrue (is_prefix_obj);\n-       if (cmp < 0)\n-\t{\n-\t  xfree (cmd_name);\n-\t  return -1;\n-\t}\n-       is_prefix = cmp > 0;\n+      if (cmp < 0)\n+\treturn -1;\n+\n+      is_prefix = cmp > 0;\n     }\n \n   if (PyObject_HasAttr (self, gdbpy_doc_cst))\n@@ -497,10 +493,7 @@ cmdpy_init (PyObject *self, PyObject *args, PyObject *kw)\n \t{\n \t  docstring = python_string_to_host_string (ds_obj.get ()).release ();\n \t  if (docstring == NULL)\n-\t    {\n-\t      xfree (cmd_name);\n-\t      return -1;\n-\t    }\n+\t    return -1;\n \t}\n     }\n   if (! docstring)\n@@ -519,14 +512,19 @@ cmdpy_init (PyObject *self, PyObject *args, PyObject *kw)\n \t  /* If we have our own \"invoke\" method, then allow unknown\n \t     sub-commands.  */\n \t  allow_unknown = PyObject_HasAttr (self, invoke_cst);\n-\t  cmd = add_prefix_cmd (cmd_name, (enum command_class) cmdtype,\n+\t  cmd = add_prefix_cmd (cmd_name.get (),\n+\t\t\t\t(enum command_class) cmdtype,\n \t\t\t\tNULL, docstring, &obj->sub_list,\n \t\t\t\tallow_unknown, cmd_list);\n \t}\n       else\n-\tcmd = add_cmd (cmd_name, (enum command_class) cmdtype,\n+\tcmd = add_cmd (cmd_name.get (), (enum command_class) cmdtype,\n \t\t       docstring, cmd_list);\n \n+      /* If successful, the above takes ownership of the name, since we set\n+         name_allocated, so release it.  */\n+      cmd_name.release ();\n+\n       /* There appears to be no API to set this.  */\n       cmd->func = cmdpy_function;\n       cmd->destroyer = cmdpy_destroyer;\n@@ -543,7 +541,6 @@ cmdpy_init (PyObject *self, PyObject *args, PyObject *kw)\n     }\n   catch (const gdb_exception &except)\n     {\n-      xfree (cmd_name);\n       xfree (docstring);\n       gdbpy_convert_exception (except);\n       return -1;"
    },
    {
      "sha": "99a57960c059cd754afe6648c055a19c3c986221",
      "filename": "gdb/python/py-param.c",
      "status": "modified",
      "additions": 26,
      "deletions": 26,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b8cb9dd9e1fa8dc471f640c592312a751e67eed/gdb/python/py-param.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b8cb9dd9e1fa8dc471f640c592312a751e67eed/gdb/python/py-param.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-param.c?ref=4b8cb9dd9e1fa8dc471f640c592312a751e67eed",
      "patch": "@@ -458,7 +458,8 @@ get_show_value (struct ui_file *file, int from_tty,\n    function.  */\n static void\n add_setshow_generic (int parmclass, enum command_class cmdclass,\n-\t\t     const char *cmd_name, parmpy_object *self,\n+\t\t     gdb::unique_xmalloc_ptr<char> cmd_name,\n+\t\t     parmpy_object *self,\n \t\t     const char *set_doc, const char *show_doc,\n \t\t     const char *help_doc,\n \t\t     struct cmd_list_element **set_list,\n@@ -471,42 +472,42 @@ add_setshow_generic (int parmclass, enum command_class cmdclass,\n     {\n     case var_boolean:\n \n-      add_setshow_boolean_cmd (cmd_name, cmdclass,\n+      add_setshow_boolean_cmd (cmd_name.get (), cmdclass,\n \t\t\t       &self->value.boolval, set_doc, show_doc,\n \t\t\t       help_doc, get_set_value, get_show_value,\n \t\t\t       set_list, show_list);\n \n       break;\n \n     case var_auto_boolean:\n-      add_setshow_auto_boolean_cmd (cmd_name, cmdclass,\n+      add_setshow_auto_boolean_cmd (cmd_name.get (), cmdclass,\n \t\t\t\t    &self->value.autoboolval,\n \t\t\t\t    set_doc, show_doc, help_doc,\n \t\t\t\t    get_set_value, get_show_value,\n \t\t\t\t    set_list, show_list);\n       break;\n \n     case var_uinteger:\n-      add_setshow_uinteger_cmd (cmd_name, cmdclass,\n+      add_setshow_uinteger_cmd (cmd_name.get (), cmdclass,\n \t\t\t\t&self->value.uintval, set_doc, show_doc,\n \t\t\t\thelp_doc, get_set_value, get_show_value,\n \t\t\t\tset_list, show_list);\n       break;\n \n     case var_integer:\n-      add_setshow_integer_cmd (cmd_name, cmdclass,\n+      add_setshow_integer_cmd (cmd_name.get (), cmdclass,\n \t\t\t       &self->value.intval, set_doc, show_doc,\n \t\t\t       help_doc, get_set_value, get_show_value,\n \t\t\t       set_list, show_list); break;\n \n     case var_string:\n-      add_setshow_string_cmd (cmd_name, cmdclass,\n+      add_setshow_string_cmd (cmd_name.get (), cmdclass,\n \t\t\t      &self->value.stringval, set_doc, show_doc,\n \t\t\t      help_doc, get_set_value, get_show_value,\n \t\t\t      set_list, show_list); break;\n \n     case var_string_noescape:\n-      add_setshow_string_noescape_cmd (cmd_name, cmdclass,\n+      add_setshow_string_noescape_cmd (cmd_name.get (), cmdclass,\n \t\t\t\t       &self->value.stringval,\n \t\t\t\t       set_doc, show_doc, help_doc,\n \t\t\t\t       get_set_value, get_show_value,\n@@ -515,43 +516,43 @@ add_setshow_generic (int parmclass, enum command_class cmdclass,\n       break;\n \n     case var_optional_filename:\n-      add_setshow_optional_filename_cmd (cmd_name, cmdclass,\n+      add_setshow_optional_filename_cmd (cmd_name.get (), cmdclass,\n \t\t\t\t\t &self->value.stringval, set_doc,\n \t\t\t\t\t show_doc, help_doc, get_set_value,\n \t\t\t\t\t get_show_value, set_list,\n \t\t\t\t\t show_list);\n       break;\n \n     case var_filename:\n-      add_setshow_filename_cmd (cmd_name, cmdclass,\n+      add_setshow_filename_cmd (cmd_name.get (), cmdclass,\n \t\t\t\t&self->value.stringval, set_doc, show_doc,\n \t\t\t\thelp_doc, get_set_value, get_show_value,\n \t\t\t\tset_list, show_list); break;\n \n     case var_zinteger:\n-      add_setshow_zinteger_cmd (cmd_name, cmdclass,\n+      add_setshow_zinteger_cmd (cmd_name.get (), cmdclass,\n \t\t\t\t&self->value.intval, set_doc, show_doc,\n \t\t\t\thelp_doc, get_set_value, get_show_value,\n \t\t\t\tset_list, show_list);\n       break;\n \n     case var_zuinteger:\n-      add_setshow_zuinteger_cmd (cmd_name, cmdclass,\n+      add_setshow_zuinteger_cmd (cmd_name.get (), cmdclass,\n \t\t\t\t&self->value.uintval, set_doc, show_doc,\n \t\t\t\thelp_doc, get_set_value, get_show_value,\n \t\t\t\tset_list, show_list);\n       break;\n \n     case var_zuinteger_unlimited:\n-      add_setshow_zuinteger_unlimited_cmd (cmd_name, cmdclass,\n+      add_setshow_zuinteger_unlimited_cmd (cmd_name.get (), cmdclass,\n \t\t\t\t\t   &self->value.intval, set_doc,\n \t\t\t\t\t   show_doc, help_doc, get_set_value,\n \t\t\t\t\t   get_show_value,\n \t\t\t\t\t   set_list, show_list);\n       break;\n \n     case var_enum:\n-      add_setshow_enum_cmd (cmd_name, cmdclass, self->enumeration,\n+      add_setshow_enum_cmd (cmd_name.get (), cmdclass, self->enumeration,\n \t\t\t    &self->value.cstringval, set_doc, show_doc,\n \t\t\t    help_doc, get_set_value, get_show_value,\n \t\t\t    set_list, show_list);\n@@ -562,15 +563,18 @@ add_setshow_generic (int parmclass, enum command_class cmdclass,\n \n   /* Lookup created parameter, and register Python object against the\n      parameter context.  Perform this task against both lists.  */\n-  tmp_name = cmd_name;\n+  tmp_name = cmd_name.get ();\n   param = lookup_cmd (&tmp_name, *show_list, \"\", NULL, 0, 1);\n   if (param)\n     set_cmd_context (param, self);\n \n-  tmp_name = cmd_name;\n+  tmp_name = cmd_name.get ();\n   param = lookup_cmd (&tmp_name, *set_list, \"\", NULL, 0, 1);\n   if (param)\n     set_cmd_context (param, self);\n+\n+  /* We (unfortunately) currently leak the command name.  */\n+  cmd_name.release ();\n }\n \n /* A helper which computes enum values.  Returns 1 on success.  Returns 0 on\n@@ -657,7 +661,6 @@ parmpy_init (PyObject *self, PyObject *args, PyObject *kwds)\n   parmpy_object *obj = (parmpy_object *) self;\n   const char *name;\n   gdb::unique_xmalloc_ptr<char> set_doc, show_doc, doc;\n-  char *cmd_name;\n   int parmclass, cmdtype;\n   PyObject *enum_values = NULL;\n   struct cmd_list_element **set_list, **show_list;\n@@ -706,15 +709,13 @@ parmpy_init (PyObject *self, PyObject *args, PyObject *kwds)\n   obj->type = (enum var_types) parmclass;\n   memset (&obj->value, 0, sizeof (obj->value));\n \n-  cmd_name = gdbpy_parse_command_name (name, &set_list,\n-\t\t\t\t       &setlist);\n-\n-  if (! cmd_name)\n+  gdb::unique_xmalloc_ptr<char> cmd_name\n+    = gdbpy_parse_command_name (name, &set_list, &setlist);\n+  if (cmd_name == nullptr)\n     return -1;\n-  xfree (cmd_name);\n-  cmd_name = gdbpy_parse_command_name (name, &show_list,\n-\t\t\t\t       &showlist);\n-  if (! cmd_name)\n+\n+  cmd_name = gdbpy_parse_command_name (name, &show_list, &showlist);\n+  if (cmd_name == nullptr)\n     return -1;\n \n   set_doc = get_doc_string (self, set_doc_cst);\n@@ -726,13 +727,12 @@ parmpy_init (PyObject *self, PyObject *args, PyObject *kwds)\n   try\n     {\n       add_setshow_generic (parmclass, (enum command_class) cmdtype,\n-\t\t\t   cmd_name, obj,\n+\t\t\t   std::move (cmd_name), obj,\n \t\t\t   set_doc.get (), show_doc.get (),\n \t\t\t   doc.get (), set_list, show_list);\n     }\n   catch (const gdb_exception &except)\n     {\n-      xfree (cmd_name);\n       Py_DECREF (self);\n       gdbpy_convert_exception (except);\n       return -1;"
    },
    {
      "sha": "690d2fb43c06c2336799dc9a3ff1816002cdba0f",
      "filename": "gdb/python/python-internal.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b8cb9dd9e1fa8dc471f640c592312a751e67eed/gdb/python/python-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b8cb9dd9e1fa8dc471f640c592312a751e67eed/gdb/python/python-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python-internal.h?ref=4b8cb9dd9e1fa8dc471f640c592312a751e67eed",
      "patch": "@@ -439,9 +439,9 @@ PyObject *gdbpy_selected_thread (PyObject *self, PyObject *args);\n PyObject *gdbpy_selected_inferior (PyObject *self, PyObject *args);\n PyObject *gdbpy_string_to_argv (PyObject *self, PyObject *args);\n PyObject *gdbpy_parameter_value (enum var_types type, void *var);\n-char *gdbpy_parse_command_name (const char *name,\n-\t\t\t\tstruct cmd_list_element ***base_list,\n-\t\t\t\tstruct cmd_list_element **start_list);\n+gdb::unique_xmalloc_ptr<char> gdbpy_parse_command_name\n+  (const char *name, struct cmd_list_element ***base_list,\n+   struct cmd_list_element **start_list);\n PyObject *gdbpy_register_tui_window (PyObject *self, PyObject *args,\n \t\t\t\t     PyObject *kw);\n "
    }
  ]
}