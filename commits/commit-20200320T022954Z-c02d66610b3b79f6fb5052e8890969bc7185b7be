{
  "sha": "c02d66610b3b79f6fb5052e8890969bc7185b7be",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzAyZDY2NjEwYjNiNzlmNmZiNTA1MmU4ODkwOTY5YmM3MTg1YjdiZQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-20T02:27:42Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-20T02:29:54Z"
    },
    "message": "Silence warnings due to plugin API change\n\n\t* testplug.c (parse_symdefstr): Use %hhi to read sym->def, and\n\tclear new fields.\n\t* testplug2.c (parse_symdefstr): Likewise.\n\t* testplug3.c (parse_symdefstr): Likewise.\n\t* testplug4.c (parse_symdefstr): Likewise.",
    "tree": {
      "sha": "1ce3fcdd46c75e8731c6466df0777f9f12ee9b75",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1ce3fcdd46c75e8731c6466df0777f9f12ee9b75"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c02d66610b3b79f6fb5052e8890969bc7185b7be",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c02d66610b3b79f6fb5052e8890969bc7185b7be",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c02d66610b3b79f6fb5052e8890969bc7185b7be",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c02d66610b3b79f6fb5052e8890969bc7185b7be/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "67338173a49204a2097ca1e2c63c6bc1fe972c3e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/67338173a49204a2097ca1e2c63c6bc1fe972c3e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/67338173a49204a2097ca1e2c63c6bc1fe972c3e"
    }
  ],
  "stats": {
    "total": 28,
    "additions": 24,
    "deletions": 4
  },
  "files": [
    {
      "sha": "16159d43f63a0b726403b6620177c47d6087ec5d",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c02d66610b3b79f6fb5052e8890969bc7185b7be/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c02d66610b3b79f6fb5052e8890969bc7185b7be/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=c02d66610b3b79f6fb5052e8890969bc7185b7be",
      "patch": "@@ -1,3 +1,11 @@\n+2020-03-20  Alan Modra  <amodra@gmail.com>\n+\n+\t* testplug.c (parse_symdefstr): Use %hhi to read sym->def, and\n+\tclear new fields.\n+\t* testplug2.c (parse_symdefstr): Likewise.\n+\t* testplug3.c (parse_symdefstr): Likewise.\n+\t* testplug4.c (parse_symdefstr): Likewise.\n+\n 2020-03-18  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* testsuite/ld-arm/non-contiguous-arm4.d: Fix expected output."
    },
    {
      "sha": "c126f0360736b8a13e12bd1c4026c42a167c3f45",
      "filename": "ld/testplug.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c02d66610b3b79f6fb5052e8890969bc7185b7be/ld/testplug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c02d66610b3b79f6fb5052e8890969bc7185b7be/ld/testplug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testplug.c?ref=c02d66610b3b79f6fb5052e8890969bc7185b7be",
      "patch": "@@ -239,12 +239,15 @@ parse_symdefstr (const char *str, struct ld_plugin_symbol *sym)\n   /* Finally we'll use sscanf to parse the numeric fields, then\n      we'll split out the strings which we need to allocate separate\n      storage for anyway so that we can add nul termination.  */\n-  n = sscanf (colon2 + 1, \"%i:%i:%lli\", &sym->def, &sym->visibility, &size);\n+  n = sscanf (colon2 + 1, \"%hhi:%i:%lli\", &sym->def, &sym->visibility, &size);\n   if (n != 3)\n     return LDPS_ERR;\n \n   /* Parsed successfully, so allocate strings and fill out fields.  */\n   sym->size = size;\n+  sym->unused = 0;\n+  sym->section_kind = 0;\n+  sym->symbol_type = 0;\n   sym->resolution = LDPR_UNKNOWN;\n   sym->name = malloc (colon1 - str + 1);\n   if (!sym->name)"
    },
    {
      "sha": "27553d07813b8e291caed595399b155c0e6ba94a",
      "filename": "ld/testplug2.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c02d66610b3b79f6fb5052e8890969bc7185b7be/ld/testplug2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c02d66610b3b79f6fb5052e8890969bc7185b7be/ld/testplug2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testplug2.c?ref=c02d66610b3b79f6fb5052e8890969bc7185b7be",
      "patch": "@@ -218,12 +218,15 @@ parse_symdefstr (const char *str, struct ld_plugin_symbol *sym)\n   /* Finally we'll use sscanf to parse the numeric fields, then\n      we'll split out the strings which we need to allocate separate\n      storage for anyway so that we can add nul termination.  */\n-  n = sscanf (colon2 + 1, \"%i:%i:%lli\", &sym->def, &sym->visibility, &size);\n+  n = sscanf (colon2 + 1, \"%hhi:%i:%lli\", &sym->def, &sym->visibility, &size);\n   if (n != 3)\n     return LDPS_ERR;\n \n   /* Parsed successfully, so allocate strings and fill out fields.  */\n   sym->size = size;\n+  sym->unused = 0;\n+  sym->section_kind = 0;\n+  sym->symbol_type = 0;\n   sym->resolution = LDPR_UNKNOWN;\n   sym->name = malloc (colon1 - str + 1);\n   if (!sym->name)"
    },
    {
      "sha": "928f4d68426a55842a81f706950827bd56d7dbe2",
      "filename": "ld/testplug3.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c02d66610b3b79f6fb5052e8890969bc7185b7be/ld/testplug3.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c02d66610b3b79f6fb5052e8890969bc7185b7be/ld/testplug3.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testplug3.c?ref=c02d66610b3b79f6fb5052e8890969bc7185b7be",
      "patch": "@@ -217,12 +217,15 @@ parse_symdefstr (const char *str, struct ld_plugin_symbol *sym)\n   /* Finally we'll use sscanf to parse the numeric fields, then\n      we'll split out the strings which we need to allocate separate\n      storage for anyway so that we can add nul termination.  */\n-  n = sscanf (colon2 + 1, \"%i:%i:%lli\", &sym->def, &sym->visibility, &size);\n+  n = sscanf (colon2 + 1, \"%hhi:%i:%lli\", &sym->def, &sym->visibility, &size);\n   if (n != 3)\n     return LDPS_ERR;\n \n   /* Parsed successfully, so allocate strings and fill out fields.  */\n   sym->size = size;\n+  sym->unused = 0;\n+  sym->section_kind = 0;\n+  sym->symbol_type = 0;\n   sym->resolution = LDPR_UNKNOWN;\n   sym->name = malloc (colon1 - str + 1);\n   if (!sym->name)"
    },
    {
      "sha": "ca899b11da1da0f8bc8e06b5a07563e04f7640ba",
      "filename": "ld/testplug4.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c02d66610b3b79f6fb5052e8890969bc7185b7be/ld/testplug4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c02d66610b3b79f6fb5052e8890969bc7185b7be/ld/testplug4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testplug4.c?ref=c02d66610b3b79f6fb5052e8890969bc7185b7be",
      "patch": "@@ -218,12 +218,15 @@ parse_symdefstr (const char *str, struct ld_plugin_symbol *sym)\n   /* Finally we'll use sscanf to parse the numeric fields, then\n      we'll split out the strings which we need to allocate separate\n      storage for anyway so that we can add nul termination.  */\n-  n = sscanf (colon2 + 1, \"%i:%i:%lli\", &sym->def, &sym->visibility, &size);\n+  n = sscanf (colon2 + 1, \"%hhi:%i:%lli\", &sym->def, &sym->visibility, &size);\n   if (n != 3)\n     return LDPS_ERR;\n \n   /* Parsed successfully, so allocate strings and fill out fields.  */\n   sym->size = size;\n+  sym->unused = 0;\n+  sym->section_kind = 0;\n+  sym->symbol_type = 0;\n   sym->resolution = LDPR_UNKNOWN;\n   sym->name = malloc (colon1 - str + 1);\n   if (!sym->name)"
    }
  ]
}