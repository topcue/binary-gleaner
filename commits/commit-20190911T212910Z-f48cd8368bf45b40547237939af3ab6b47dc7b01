{
  "sha": "f48cd8368bf45b40547237939af3ab6b47dc7b01",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjQ4Y2Q4MzY4YmY0NWI0MDU0NzIzNzkzOWFmM2FiNmI0N2RjN2IwMQ==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-08-20T19:45:51Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-09-11T21:29:10Z"
    },
    "message": "Refactor get_init_files to use std::string\n\nTo avoid manual memory management.\n\nTested on buildbot.\n\ngdb/ChangeLog:\n\n2019-09-11  Christian Biesinger  <cbiesinger@google.com>\n\n\t* main.c (get_init_files): Change to use std::string.\n\t(captured_main_1): Update.\n\t(print_gdb_help): Update.",
    "tree": {
      "sha": "bf960f81af49710629e73ea5ba591829d14eb1da",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bf960f81af49710629e73ea5ba591829d14eb1da"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f48cd8368bf45b40547237939af3ab6b47dc7b01",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f48cd8368bf45b40547237939af3ab6b47dc7b01",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f48cd8368bf45b40547237939af3ab6b47dc7b01",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f48cd8368bf45b40547237939af3ab6b47dc7b01/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9cab7ecda21c6499b0559f6e676fe222e26141be",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9cab7ecda21c6499b0559f6e676fe222e26141be",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9cab7ecda21c6499b0559f6e676fe222e26141be"
    }
  ],
  "stats": {
    "total": 110,
    "additions": 57,
    "deletions": 53
  },
  "files": [
    {
      "sha": "27eae1d400b3c3d61e8bb6a1c2fc88127131c1d6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f48cd8368bf45b40547237939af3ab6b47dc7b01/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f48cd8368bf45b40547237939af3ab6b47dc7b01/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f48cd8368bf45b40547237939af3ab6b47dc7b01",
      "patch": "@@ -1,3 +1,9 @@\n+2019-09-11  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* main.c (get_init_files): Change to use std::string.\n+\t(captured_main_1): Update.\n+\t(print_gdb_help): Update.\n+\n 2019-09-11  Ali Tamur  <tamur@google.com>\n \n \t*gdb/target-float.c (host_float_ops<T>::to_longest): Update"
    },
    {
      "sha": "e32ed6227023c108137f13435cba703766e92078",
      "filename": "gdb/main.c",
      "status": "modified",
      "additions": 51,
      "deletions": 53,
      "changes": 104,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f48cd8368bf45b40547237939af3ab6b47dc7b01/gdb/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f48cd8368bf45b40547237939af3ab6b47dc7b01/gdb/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/main.c?ref=f48cd8368bf45b40547237939af3ab6b47dc7b01",
      "patch": "@@ -195,27 +195,26 @@ relocate_gdb_directory (const char *initial, bool relocatable)\n    return them in SYSTEM_GDBINIT, HOME_GDBINIT, LOCAL_GDBINIT.  If\n    there is no system gdbinit (resp. home gdbinit and local gdbinit)\n    to be loaded, then SYSTEM_GDBINIT (resp. HOME_GDBINIT and\n-   LOCAL_GDBINIT) is set to NULL.  */\n+   LOCAL_GDBINIT) is set to the empty string.  */\n static void\n-get_init_files (const char **system_gdbinit,\n-\t\tconst char **home_gdbinit,\n-\t\tconst char **local_gdbinit)\n+get_init_files (std::string *system_gdbinit,\n+\t\tstd::string *home_gdbinit,\n+\t\tstd::string *local_gdbinit)\n {\n-  static const char *sysgdbinit = NULL;\n-  static char *homeinit = NULL;\n-  static const char *localinit = NULL;\n+  static std::string sysgdbinit;\n+  static std::string homeinit;\n+  static std::string localinit;\n   static int initialized = 0;\n \n   if (!initialized)\n     {\n       struct stat homebuf, cwdbuf, s;\n-      const char *homedir;\n \n       if (SYSTEM_GDBINIT[0])\n \t{\n-\t  int datadir_len = strlen (GDB_DATADIR);\n-\t  int sys_gdbinit_len = strlen (SYSTEM_GDBINIT);\n-\t  char *relocated_sysgdbinit;\n+\t  size_t datadir_len = strlen (GDB_DATADIR);\n+\t  size_t sys_gdbinit_len = strlen (SYSTEM_GDBINIT);\n+\t  std::string relocated_sysgdbinit;\n \n \t  /* If SYSTEM_GDBINIT lives in data-directory, and data-directory\n \t     has been provided, search for SYSTEM_GDBINIT there.  */\n@@ -226,28 +225,30 @@ get_init_files (const char **system_gdbinit,\n \t    {\n \t      /* Append the part of SYSTEM_GDBINIT that follows GDB_DATADIR\n \t\t to gdb_datadir.  */\n-\t      char *tmp_sys_gdbinit = xstrdup (&SYSTEM_GDBINIT[datadir_len]);\n-\t      char *p;\n \n-\t      for (p = tmp_sys_gdbinit; IS_DIR_SEPARATOR (*p); ++p)\n-\t\tcontinue;\n-\t      relocated_sysgdbinit = concat (gdb_datadir, SLASH_STRING, p,\n-\t\t\t\t\t     (char *) NULL);\n-\t      xfree (tmp_sys_gdbinit);\n+\t      size_t start = datadir_len;\n+\t      for (; IS_DIR_SEPARATOR (SYSTEM_GDBINIT[start]); ++start)\n+\t\t;\n+\t      relocated_sysgdbinit = (std::string (gdb_datadir) + SLASH_STRING\n+\t\t\t\t      + &SYSTEM_GDBINIT[start]);\n \t    }\n \t  else\n \t    {\n-\t      relocated_sysgdbinit = relocate_path (gdb_program_name,\n-\t\t\t\t\t\t    SYSTEM_GDBINIT,\n-\t\t\t\t\t\t    SYSTEM_GDBINIT_RELOCATABLE);\n+\t      char *relocated = relocate_path (gdb_program_name,\n+\t\t\t\t\t       SYSTEM_GDBINIT,\n+\t\t\t\t\t       SYSTEM_GDBINIT_RELOCATABLE);\n+\t      if (relocated != nullptr)\n+\t        {\n+\t\t  relocated_sysgdbinit = relocated;\n+\t\t  xfree (relocated);\n+\t\t}\n \t    }\n-\t  if (relocated_sysgdbinit && stat (relocated_sysgdbinit, &s) == 0)\n+\t  if (!relocated_sysgdbinit.empty ()\n+\t      && stat (relocated_sysgdbinit.c_str (), &s) == 0)\n \t    sysgdbinit = relocated_sysgdbinit;\n-\t  else\n-\t    xfree (relocated_sysgdbinit);\n \t}\n \n-      homedir = getenv (\"HOME\");\n+      const char *homedir = getenv (\"HOME\");\n \n       /* If the .gdbinit file in the current directory is the same as\n \t the $HOME/.gdbinit file, it should not be sourced.  homebuf\n@@ -260,17 +261,16 @@ get_init_files (const char **system_gdbinit,\n \n       if (homedir)\n \t{\n-\t  homeinit = xstrprintf (\"%s/%s\", homedir, GDBINIT);\n-\t  if (stat (homeinit, &homebuf) != 0)\n+\t  homeinit = std::string (homedir) + SLASH_STRING + GDBINIT;\n+\t  if (stat (homeinit.c_str (), &homebuf) != 0)\n \t    {\n-\t      xfree (homeinit);\n-\t      homeinit = NULL;\n+\t      homeinit = \"\";\n \t    }\n \t}\n \n       if (stat (GDBINIT, &cwdbuf) == 0)\n \t{\n-\t  if (!homeinit\n+\t  if (homeinit.empty ()\n \t      || memcmp ((char *) &homebuf, (char *) &cwdbuf,\n \t\t\t sizeof (struct stat)))\n \t    localinit = GDBINIT;\n@@ -470,11 +470,6 @@ captured_main_1 (struct captured_main_args *context)\n   /* All arguments of --directory option.  */\n   std::vector<char *> dirarg;\n \n-  /* gdb init files.  */\n-  const char *system_gdbinit;\n-  const char *home_gdbinit;\n-  const char *local_gdbinit;\n-\n   int i;\n   int save_auto_load;\n   int ret = 1;\n@@ -908,6 +903,9 @@ captured_main_1 (struct captured_main_args *context)\n   /* Lookup gdbinit files.  Note that the gdbinit file name may be\n      overriden during file initialization, so get_init_files should be\n      called after gdb_init.  */\n+  std::string system_gdbinit;\n+  std::string home_gdbinit;\n+  std::string local_gdbinit;\n   get_init_files (&system_gdbinit, &home_gdbinit, &local_gdbinit);\n \n   /* Do these (and anything which might call wrap_here or *_filtered)\n@@ -984,16 +982,16 @@ captured_main_1 (struct captured_main_args *context)\n      This is done *before* all the command line arguments are\n      processed; it sets global parameters, which are independent of\n      what file you are debugging or what directory you are in.  */\n-  if (system_gdbinit && !inhibit_gdbinit)\n-    ret = catch_command_errors (source_script, system_gdbinit, 0);\n+  if (!system_gdbinit.empty () && !inhibit_gdbinit)\n+    ret = catch_command_errors (source_script, system_gdbinit.c_str (), 0);\n \n   /* Read and execute $HOME/.gdbinit file, if it exists.  This is done\n      *before* all the command line arguments are processed; it sets\n      global parameters, which are independent of what file you are\n      debugging or what directory you are in.  */\n \n-  if (home_gdbinit && !inhibit_gdbinit && !inhibit_home_gdbinit)\n-    ret = catch_command_errors (source_script, home_gdbinit, 0);\n+  if (!home_gdbinit.empty () && !inhibit_gdbinit && !inhibit_home_gdbinit)\n+    ret = catch_command_errors (source_script, home_gdbinit.c_str (), 0);\n \n   /* Process '-ix' and '-iex' options early.  */\n   for (i = 0; i < cmdarg_vec.size (); i++)\n@@ -1096,20 +1094,20 @@ captured_main_1 (struct captured_main_args *context)\n \n   /* Read the .gdbinit file in the current directory, *if* it isn't\n      the same as the $HOME/.gdbinit file (it should exist, also).  */\n-  if (local_gdbinit)\n+  if (!local_gdbinit.empty ())\n     {\n       auto_load_local_gdbinit_pathname\n-\t= gdb_realpath (local_gdbinit).release ();\n+\t= gdb_realpath (local_gdbinit.c_str ()).release ();\n \n       if (!inhibit_gdbinit && auto_load_local_gdbinit\n-\t  && file_is_auto_load_safe (local_gdbinit,\n+\t  && file_is_auto_load_safe (local_gdbinit.c_str (),\n \t\t\t\t     _(\"auto-load: Loading .gdbinit \"\n \t\t\t\t       \"file \\\"%s\\\".\\n\"),\n-\t\t\t\t     local_gdbinit))\n+\t\t\t\t     local_gdbinit.c_str ()))\n \t{\n \t  auto_load_local_gdbinit_loaded = 1;\n \n-\t  ret = catch_command_errors (source_script, local_gdbinit, 0);\n+\t  ret = catch_command_errors (source_script, local_gdbinit.c_str (), 0);\n \t}\n     }\n \n@@ -1203,9 +1201,9 @@ gdb_main (struct captured_main_args *args)\n static void\n print_gdb_help (struct ui_file *stream)\n {\n-  const char *system_gdbinit;\n-  const char *home_gdbinit;\n-  const char *local_gdbinit;\n+  std::string system_gdbinit;\n+  std::string home_gdbinit;\n+  std::string local_gdbinit;\n \n   get_init_files (&system_gdbinit, &home_gdbinit, &local_gdbinit);\n \n@@ -1283,18 +1281,18 @@ Other options:\\n\\n\\\n   fputs_unfiltered (_(\"\\n\\\n At startup, GDB reads the following init files and executes their commands:\\n\\\n \"), stream);\n-  if (system_gdbinit)\n+  if (!system_gdbinit.empty ())\n     fprintf_unfiltered (stream, _(\"\\\n    * system-wide init file: %s\\n\\\n-\"), system_gdbinit);\n-  if (home_gdbinit)\n+\"), system_gdbinit.c_str ());\n+  if (!home_gdbinit.empty ())\n     fprintf_unfiltered (stream, _(\"\\\n    * user-specific init file: %s\\n\\\n-\"), home_gdbinit);\n-  if (local_gdbinit)\n+\"), home_gdbinit.c_str ());\n+  if (!local_gdbinit.empty ())\n     fprintf_unfiltered (stream, _(\"\\\n    * local init file (see also 'set auto-load local-gdbinit'): ./%s\\n\\\n-\"), local_gdbinit);\n+\"), local_gdbinit.c_str ());\n   fputs_unfiltered (_(\"\\n\\\n For more information, type \\\"help\\\" from within GDB, or consult the\\n\\\n GDB manual (available as on-line info or a printed manual).\\n\\"
    }
  ]
}