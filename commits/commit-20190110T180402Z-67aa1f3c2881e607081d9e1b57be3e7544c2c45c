{
  "sha": "67aa1f3c2881e607081d9e1b57be3e7544c2c45c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjdhYTFmM2MyODgxZTYwNzA4MWQ5ZTFiNTdiZTNlNzU0NGMyYzQ1Yw==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-01-10T17:52:39Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-01-10T18:04:02Z"
    },
    "message": "Fix tracepoint.c:parse_tracepoint_definition leak (and one more)\n\nCoverity points out that gdb/tracepoint.c:parse_tracepoint_definition\ncan leak 'cond' in this line:\n\n      cond = (char *) xmalloc (2 * xlen + 1);\n\nThat can leak because we're in a loop and 'cond' may have already been\nxmalloc'ed into in a previous iteration.  That won't normally happen,\nbecause we don't expect to see a tracepoint definition with multiple\nconditions listed, but, it doesn't hurt to be pedantically correct,\nin case some stub manages to send something odd back to GDB.\n\nAt first I thought I'd just replace the xmalloc call with:\n\n      cond = (char *) xrealloc (cond, 2 * xlen + 1);\n\nand be done with it.  However, my pedantic self realizes that\nwarning() can throw as well (due to pagination + Ctrl-C), so I fixed\nit using gdb::unique_xmalloc_ptr instead.\n\nWhile doing this, I noticed that these vectors in struct uploaded_tp:\n\n  std::vector<char *> actions;\n  std::vector<char *> step_actions;\n\nhold heap-allocated strings, but nothing is freeing the strings,\nAFAICS.\n\nSo I ended up switching all the heap-allocated strings in uploaded_tp\nto unique pointers.  This patch is the result of that.\n\nI also wrote an alternative, but similar patch that uses std::string\nthroughout instead of gdb::unique_xmalloc_ptr, but in the end reverted\nit because the code didn't look that much better, and I kind of\ndislike replacing pointers with fat std::string's (3 or 4 times the\nsize of a pointer) in structures.\n\ngdb/ChangeLog:\n2019-01-10  Pedro Alves  <palves@redhat.com>\n\n\t* breakpoint.c (read_uploaded_action)\n\t(create_tracepoint_from_upload): Adjust to use\n\tgdb::unique_xmalloc_ptr.\n\t* ctf.c (ctf_write_uploaded_tp):\n\t(SET_ARRAY_FIELD): Use emplace_back.\n\t(SET_STRING_FIELD): Adjust to use gdb::unique_xmalloc_ptr.\n\t* tracefile-tfile.c (tfile_write_uploaded_tp):\n\t* tracepoint.c (parse_tracepoint_definition): Adjust to use\n\tgdb::unique_xmalloc_ptr.\n\t* tracepoint.h (struct uploaded_tp) <cond, actions, step_actions,\n\tat_string, cond_string, cmd_strings>: Replace char pointers\n\twith gdb::unique_xmalloc_ptr.",
    "tree": {
      "sha": "445e67a51e5704a6560ba2665df76a37d6607705",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/445e67a51e5704a6560ba2665df76a37d6607705"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/67aa1f3c2881e607081d9e1b57be3e7544c2c45c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/67aa1f3c2881e607081d9e1b57be3e7544c2c45c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/67aa1f3c2881e607081d9e1b57be3e7544c2c45c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/67aa1f3c2881e607081d9e1b57be3e7544c2c45c/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2f667667e24357ff54701f3e046820cf08d649cf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f667667e24357ff54701f3e046820cf08d649cf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2f667667e24357ff54701f3e046820cf08d649cf"
    }
  ],
  "stats": {
    "total": 108,
    "additions": 65,
    "deletions": 43
  },
  "files": [
    {
      "sha": "b702acd65e574a4318387a365930a2d70d14fcde",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/67aa1f3c2881e607081d9e1b57be3e7544c2c45c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/67aa1f3c2881e607081d9e1b57be3e7544c2c45c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=67aa1f3c2881e607081d9e1b57be3e7544c2c45c",
      "patch": "@@ -1,3 +1,18 @@\n+2019-01-10  Pedro Alves  <palves@redhat.com>\n+\n+\t* breakpoint.c (read_uploaded_action)\n+\t(create_tracepoint_from_upload): Adjust to use\n+\tgdb::unique_xmalloc_ptr.\n+\t* ctf.c (ctf_write_uploaded_tp):\n+\t(SET_ARRAY_FIELD): Use emplace_back.\n+\t(SET_STRING_FIELD): Adjust to use gdb::unique_xmalloc_ptr.\n+\t* tracefile-tfile.c (tfile_write_uploaded_tp):\n+\t* tracepoint.c (parse_tracepoint_definition): Adjust to use\n+\tgdb::unique_xmalloc_ptr.\n+\t* tracepoint.h (struct uploaded_tp) <cond, actions, step_actions,\n+\tat_string, cond_string, cmd_strings>: Replace char pointers\n+\twith gdb::unique_xmalloc_ptr.\n+\n 2019-01-10  Pedro Alves  <palves@redhat.com>\n \n \t* solib-target.c (library_list_start_library): Don't xstrdup name."
    },
    {
      "sha": "2ab8a76326c413688afa428ef9a383af8378d2ff",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/67aa1f3c2881e607081d9e1b57be3e7544c2c45c/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/67aa1f3c2881e607081d9e1b57be3e7544c2c45c/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=67aa1f3c2881e607081d9e1b57be3e7544c2c45c",
      "patch": "@@ -14686,7 +14686,7 @@ read_uploaded_action (void)\n \n   if (next_cmd < this_utp->cmd_strings.size ())\n     {\n-      rslt = this_utp->cmd_strings[next_cmd];\n+      rslt = this_utp->cmd_strings[next_cmd].get ();\n       next_cmd++;\n     }\n \n@@ -14707,7 +14707,7 @@ create_tracepoint_from_upload (struct uploaded_tp *utp)\n   struct tracepoint *tp;\n \n   if (utp->at_string)\n-    addr_str = utp->at_string;\n+    addr_str = utp->at_string.get ();\n   else\n     {\n       /* In the absence of a source location, fall back to raw\n@@ -14731,7 +14731,7 @@ create_tracepoint_from_upload (struct uploaded_tp *utp)\n \t\t\t\t\t\t\t current_language);\n   if (!create_breakpoint (get_current_arch (),\n \t\t\t  location.get (),\n-\t\t\t  utp->cond_string, -1, addr_str,\n+\t\t\t  utp->cond_string.get (), -1, addr_str,\n \t\t\t  0 /* parse cond/thread */,\n \t\t\t  0 /* tempflag */,\n \t\t\t  utp->type /* type_wanted */,"
    },
    {
      "sha": "7a95df781524eab179888b99ab06a5ea18be5de4",
      "filename": "gdb/ctf.c",
      "status": "modified",
      "additions": 17,
      "deletions": 13,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/67aa1f3c2881e607081d9e1b57be3e7544c2c45c/gdb/ctf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/67aa1f3c2881e607081d9e1b57be3e7544c2c45c/gdb/ctf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctf.c?ref=67aa1f3c2881e607081d9e1b57be3e7544c2c45c",
      "patch": "@@ -596,38 +596,42 @@ ctf_write_uploaded_tp (struct trace_file_writer *self,\n \n   /* condition  */\n   if (tp->cond != NULL)\n-    ctf_save_write (&writer->tcs, (gdb_byte *) tp->cond, strlen (tp->cond));\n+    ctf_save_write (&writer->tcs, (gdb_byte *) tp->cond.get (),\n+\t\t    strlen (tp->cond.get ()));\n   ctf_save_write (&writer->tcs, &zero, 1);\n \n   /* actions */\n   u32 = tp->actions.size ();\n   ctf_save_align_write (&writer->tcs, (gdb_byte *) &u32, 4, 4);\n-  for (char *act : tp->actions)\n-    ctf_save_write (&writer->tcs, (gdb_byte *) act, strlen (act) + 1);\n+  for (const auto &act : tp->actions)\n+    ctf_save_write (&writer->tcs, (gdb_byte *) act.get (),\n+\t\t    strlen (act.get ()) + 1);\n \n   /* step_actions */\n   u32 = tp->step_actions.size ();\n   ctf_save_align_write (&writer->tcs, (gdb_byte *) &u32, 4, 4);\n-  for (char *act : tp->step_actions)\n-    ctf_save_write (&writer->tcs, (gdb_byte *) act, strlen (act) + 1);\n+  for (const auto &act : tp->step_actions)\n+    ctf_save_write (&writer->tcs, (gdb_byte *) act.get (),\n+\t\t    strlen (act.get ()) + 1);\n \n   /* at_string */\n   if (tp->at_string != NULL)\n-    ctf_save_write (&writer->tcs, (gdb_byte *) tp->at_string,\n-\t\t    strlen (tp->at_string));\n+    ctf_save_write (&writer->tcs, (gdb_byte *) tp->at_string.get (),\n+\t\t    strlen (tp->at_string.get ()));\n   ctf_save_write (&writer->tcs, &zero, 1);\n \n   /* cond_string */\n   if (tp->cond_string != NULL)\n-    ctf_save_write (&writer->tcs, (gdb_byte *) tp->cond_string,\n-\t\t    strlen (tp->cond_string));\n+    ctf_save_write (&writer->tcs, (gdb_byte *) tp->cond_string.get (),\n+\t\t    strlen (tp->cond_string.get ()));\n   ctf_save_write (&writer->tcs, &zero, 1);\n \n   /* cmd_strings */\n   u32 = tp->cmd_strings.size ();\n   ctf_save_align_write (&writer->tcs, (gdb_byte *) &u32, 4, 4);\n-  for (char *act : tp->cmd_strings)\n-    ctf_save_write (&writer->tcs, (gdb_byte *) act, strlen (act) + 1);\n+  for (const auto &act : tp->cmd_strings)\n+    ctf_save_write (&writer->tcs, (gdb_byte *) act.get (),\n+\t\t    strlen (act.get ()) + 1);\n \n }\n \n@@ -1023,7 +1027,7 @@ ctf_read_tsv (struct uploaded_tsv **uploaded_tsvs)\n \t  const struct bt_definition *element\t\t\t\t\\\n \t    = bt_ctf_get_index ((EVENT), def, i);\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-\t  (VAR)->ARRAY.push_back\t\t\t\t\t\\\n+\t  (VAR)->ARRAY.emplace_back\t\t\t\t\t\\\n \t    (xstrdup (bt_ctf_get_string (element)));\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n@@ -1040,7 +1044,7 @@ ctf_read_tsv (struct uploaded_tsv **uploaded_tsvs)\n \t\t\t\t\t\t\t   #FIELD));\t\\\n \t\t\t\t\t\t\t\t\t\\\n       if (strlen (p) > 0)\t\t\t\t\t\t\\\n-\t(VAR)->FIELD = xstrdup (p);\t\t\t\t\t\\\n+\t(VAR)->FIELD.reset (xstrdup (p));\t\t\t\t\\\n       else\t\t\t\t\t\t\t\t\\\n \t(VAR)->FIELD = NULL;\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\"
    },
    {
      "sha": "831f162df7e0272ac446a9be1851f41f133c04b3",
      "filename": "gdb/tracefile-tfile.c",
      "status": "modified",
      "additions": 11,
      "deletions": 10,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/67aa1f3c2881e607081d9e1b57be3e7544c2c45c/gdb/tracefile-tfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/67aa1f3c2881e607081d9e1b57be3e7544c2c45c/gdb/tracefile-tfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracefile-tfile.c?ref=67aa1f3c2881e607081d9e1b57be3e7544c2c45c",
      "patch": "@@ -262,31 +262,32 @@ tfile_write_uploaded_tp (struct trace_file_writer *self,\n     fprintf (writer->fp, \":F%x\", utp->orig_size);\n   if (utp->cond)\n     fprintf (writer->fp,\n-\t     \":X%x,%s\", (unsigned int) strlen (utp->cond) / 2,\n-\t     utp->cond);\n+\t     \":X%x,%s\", (unsigned int) strlen (utp->cond.get ()) / 2,\n+\t     utp->cond.get ());\n   fprintf (writer->fp, \"\\n\");\n-  for (char *act : utp->actions)\n+  for (const auto &act : utp->actions)\n     fprintf (writer->fp, \"tp A%x:%s:%s\\n\",\n-\t     utp->number, phex_nz (utp->addr, sizeof (utp->addr)), act);\n-  for (char *act : utp->step_actions)\n+\t     utp->number, phex_nz (utp->addr, sizeof (utp->addr)), act.get ());\n+  for (const auto &act : utp->step_actions)\n     fprintf (writer->fp, \"tp S%x:%s:%s\\n\",\n-\t     utp->number, phex_nz (utp->addr, sizeof (utp->addr)), act);\n+\t     utp->number, phex_nz (utp->addr, sizeof (utp->addr)), act.get ());\n   if (utp->at_string)\n     {\n       encode_source_string (utp->number, utp->addr,\n-\t\t\t    \"at\", utp->at_string, buf, MAX_TRACE_UPLOAD);\n+\t\t\t    \"at\", utp->at_string.get (),\n+\t\t\t    buf, MAX_TRACE_UPLOAD);\n       fprintf (writer->fp, \"tp Z%s\\n\", buf);\n     }\n   if (utp->cond_string)\n     {\n       encode_source_string (utp->number, utp->addr,\n-\t\t\t    \"cond\", utp->cond_string,\n+\t\t\t    \"cond\", utp->cond_string.get (),\n \t\t\t    buf, MAX_TRACE_UPLOAD);\n       fprintf (writer->fp, \"tp Z%s\\n\", buf);\n     }\n-  for (char *act : utp->cmd_strings)\n+  for (const auto &act : utp->cmd_strings)\n     {\n-      encode_source_string (utp->number, utp->addr, \"cmd\", act,\n+      encode_source_string (utp->number, utp->addr, \"cmd\", act.get (),\n \t\t\t    buf, MAX_TRACE_UPLOAD);\n       fprintf (writer->fp, \"tp Z%s\\n\", buf);\n     }"
    },
    {
      "sha": "bed35bdfd6e58194542cacd071ccc186207d9e95",
      "filename": "gdb/tracepoint.c",
      "status": "modified",
      "additions": 13,
      "deletions": 11,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/67aa1f3c2881e607081d9e1b57be3e7544c2c45c/gdb/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/67aa1f3c2881e607081d9e1b57be3e7544c2c45c/gdb/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.c?ref=67aa1f3c2881e607081d9e1b57be3e7544c2c45c",
      "patch": "@@ -3083,7 +3083,8 @@ find_matching_tracepoint_location (struct uploaded_tp *utp)\n       if (b->type == utp->type\n \t  && t->step_count == utp->step\n \t  && t->pass_count == utp->pass\n-\t  && cond_string_is_same (t->cond_string, utp->cond_string)\n+\t  && cond_string_is_same (t->cond_string,\n+\t\t\t\t  utp->cond_string.get ())\n \t  /* FIXME also test actions.  */\n \t  )\n \t{\n@@ -3462,7 +3463,7 @@ parse_tracepoint_definition (const char *line, struct uploaded_tp **utpp)\n   int enabled, end;\n   enum bptype type;\n   const char *srctype;\n-  char *cond, *buf;\n+  char *buf;\n   struct uploaded_tp *utp = NULL;\n \n   p = line;\n@@ -3475,13 +3476,14 @@ parse_tracepoint_definition (const char *line, struct uploaded_tp **utpp)\n   p++;  /* skip a colon */\n   if (piece == 'T')\n     {\n+      gdb::unique_xmalloc_ptr<char[]> cond;\n+\n       enabled = (*p++ == 'E');\n       p++;  /* skip a colon */\n       p = unpack_varlen_hex (p, &step);\n       p++;  /* skip a colon */\n       p = unpack_varlen_hex (p, &pass);\n       type = bp_tracepoint;\n-      cond = NULL;\n       /* Thumb through optional fields.  */\n       while (*p == ':')\n \t{\n@@ -3502,8 +3504,8 @@ parse_tracepoint_definition (const char *line, struct uploaded_tp **utpp)\n \t      p++;\n \t      p = unpack_varlen_hex (p, &xlen);\n \t      p++;  /* skip a comma */\n-\t      cond = (char *) xmalloc (2 * xlen + 1);\n-\t      strncpy (cond, p, 2 * xlen);\n+\t      cond.reset ((char *) xmalloc (2 * xlen + 1));\n+\t      strncpy (&cond[0], p, 2 * xlen);\n \t      cond[2 * xlen] = '\\0';\n \t      p += 2 * xlen;\n \t    }\n@@ -3516,17 +3518,17 @@ parse_tracepoint_definition (const char *line, struct uploaded_tp **utpp)\n       utp->enabled = enabled;\n       utp->step = step;\n       utp->pass = pass;\n-      utp->cond = cond;\n+      utp->cond = std::move (cond);\n     }\n   else if (piece == 'A')\n     {\n       utp = get_uploaded_tp (num, addr, utpp);\n-      utp->actions.push_back (xstrdup (p));\n+      utp->actions.emplace_back (xstrdup (p));\n     }\n   else if (piece == 'S')\n     {\n       utp = get_uploaded_tp (num, addr, utpp);\n-      utp->step_actions.push_back (xstrdup (p));\n+      utp->step_actions.emplace_back (xstrdup (p));\n     }\n   else if (piece == 'Z')\n     {\n@@ -3546,11 +3548,11 @@ parse_tracepoint_definition (const char *line, struct uploaded_tp **utpp)\n       buf[end] = '\\0';\n \n       if (startswith (srctype, \"at:\"))\n-\tutp->at_string = xstrdup (buf);\n+\tutp->at_string.reset (xstrdup (buf));\n       else if (startswith (srctype, \"cond:\"))\n-\tutp->cond_string = xstrdup (buf);\n+\tutp->cond_string.reset (xstrdup (buf));\n       else if (startswith (srctype, \"cmd:\"))\n-\tutp->cmd_strings.push_back (xstrdup (buf));\n+\tutp->cmd_strings.emplace_back (xstrdup (buf));\n     }\n   else if (piece == 'V')\n     {"
    },
    {
      "sha": "62abb7cdc185b2a2071f6430cc0d6d9fbda9c35e",
      "filename": "gdb/tracepoint.h",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/67aa1f3c2881e607081d9e1b57be3e7544c2c45c/gdb/tracepoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/67aa1f3c2881e607081d9e1b57be3e7544c2c45c/gdb/tracepoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.h?ref=67aa1f3c2881e607081d9e1b57be3e7544c2c45c",
      "patch": "@@ -178,21 +178,21 @@ struct uploaded_tp\n   int orig_size = 0;\n \n   /* String that is the encoded form of the tracepoint's condition.  */\n-  char *cond = nullptr;\n+  gdb::unique_xmalloc_ptr<char[]> cond;\n \n   /* Vectors of strings that are the encoded forms of a tracepoint's\n      actions.  */\n-  std::vector<char *> actions;\n-  std::vector<char *> step_actions;\n+  std::vector<gdb::unique_xmalloc_ptr<char[]>> actions;\n+  std::vector<gdb::unique_xmalloc_ptr<char[]>> step_actions;\n \n   /* The original string defining the location of the tracepoint.  */\n-  char *at_string = nullptr;\n+  gdb::unique_xmalloc_ptr<char[]> at_string;\n \n   /* The original string defining the tracepoint's condition.  */\n-  char *cond_string = nullptr;\n+  gdb::unique_xmalloc_ptr<char[]> cond_string;\n \n   /* List of original strings defining the tracepoint's actions.  */\n-  std::vector<char *> cmd_strings;\n+  std::vector<gdb::unique_xmalloc_ptr<char[]>> cmd_strings;\n \n   /* The tracepoint's current hit count.  */\n   int hit_count = 0;"
    }
  ]
}