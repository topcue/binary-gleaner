{
  "sha": "34910087ebf8fb3f1646d9177d7c961a1b3231da",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzQ5MTAwODdlYmY4ZmIzZjE2NDZkOTE3N2Q3Yzk2MWExYjMyMzFkYQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-03-08T15:15:08Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-03-09T13:09:38Z"
    },
    "message": "Split rank_one_type_parm_int from rank_one_type\n\ngdb/ChangeLog:\n\n\t* gdbtypes.c (rank_one_type_parm_int): New function extracted\n\tfrom...\n\t(rank_one_type): ... this.",
    "tree": {
      "sha": "c17d4416c87d39d076c4e1c50206347a7a046ab2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c17d4416c87d39d076c4e1c50206347a7a046ab2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/34910087ebf8fb3f1646d9177d7c961a1b3231da",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/34910087ebf8fb3f1646d9177d7c961a1b3231da",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/34910087ebf8fb3f1646d9177d7c961a1b3231da",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/34910087ebf8fb3f1646d9177d7c961a1b3231da/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f1f832d6cd39e14e9f8c0ba142d2e442792119e4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f1f832d6cd39e14e9f8c0ba142d2e442792119e4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f1f832d6cd39e14e9f8c0ba142d2e442792119e4"
    }
  ],
  "stats": {
    "total": 179,
    "additions": 96,
    "deletions": 83
  },
  "files": [
    {
      "sha": "4ed24faf8634685adb62939d85bf2f6778fe19f6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34910087ebf8fb3f1646d9177d7c961a1b3231da/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34910087ebf8fb3f1646d9177d7c961a1b3231da/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=34910087ebf8fb3f1646d9177d7c961a1b3231da",
      "patch": "@@ -1,3 +1,9 @@\n+2019-03-08  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.c (rank_one_type_parm_int): New function extracted\n+\tfrom...\n+\t(rank_one_type): ... this.\n+\n 2019-03-08  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.c (rank_one_type_parm_func): New function extracted"
    },
    {
      "sha": "efef9996c750ac9b8f7abbcbe8a92b3a017f1e1b",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 90,
      "deletions": 83,
      "changes": 173,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/34910087ebf8fb3f1646d9177d7c961a1b3231da/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/34910087ebf8fb3f1646d9177d7c961a1b3231da/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=34910087ebf8fb3f1646d9177d7c961a1b3231da",
      "patch": "@@ -3887,6 +3887,95 @@ rank_one_type_parm_func (struct type *parm, struct type *arg, struct value *valu\n     }\n }\n \n+/* rank_one_type helper for when PARM's type code is TYPE_CODE_INT.  */\n+\n+static struct rank\n+rank_one_type_parm_int (struct type *parm, struct type *arg, struct value *value)\n+{\n+  switch (TYPE_CODE (arg))\n+    {\n+    case TYPE_CODE_INT:\n+      if (TYPE_LENGTH (arg) == TYPE_LENGTH (parm))\n+\t{\n+\t  /* Deal with signed, unsigned, and plain chars and\n+\t     signed and unsigned ints.  */\n+\t  if (TYPE_NOSIGN (parm))\n+\t    {\n+\t      /* This case only for character types.  */\n+\t      if (TYPE_NOSIGN (arg))\n+\t\treturn EXACT_MATCH_BADNESS;\t/* plain char -> plain char */\n+\t      else\t\t/* signed/unsigned char -> plain char */\n+\t\treturn INTEGER_CONVERSION_BADNESS;\n+\t    }\n+\t  else if (TYPE_UNSIGNED (parm))\n+\t    {\n+\t      if (TYPE_UNSIGNED (arg))\n+\t\t{\n+\t\t  /* unsigned int -> unsigned int, or\n+\t\t     unsigned long -> unsigned long */\n+\t\t  if (integer_types_same_name_p (TYPE_NAME (parm),\n+\t\t\t\t\t\t TYPE_NAME (arg)))\n+\t\t    return EXACT_MATCH_BADNESS;\n+\t\t  else if (integer_types_same_name_p (TYPE_NAME (arg),\n+\t\t\t\t\t\t      \"int\")\n+\t\t\t   && integer_types_same_name_p (TYPE_NAME (parm),\n+\t\t\t\t\t\t\t \"long\"))\n+\t\t    /* unsigned int -> unsigned long */\n+\t\t    return INTEGER_PROMOTION_BADNESS;\n+\t\t  else\n+\t\t    /* unsigned long -> unsigned int */\n+\t\t    return INTEGER_CONVERSION_BADNESS;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  if (integer_types_same_name_p (TYPE_NAME (arg),\n+\t\t\t\t\t\t \"long\")\n+\t\t      && integer_types_same_name_p (TYPE_NAME (parm),\n+\t\t\t\t\t\t    \"int\"))\n+\t\t    /* signed long -> unsigned int */\n+\t\t    return INTEGER_CONVERSION_BADNESS;\n+\t\t  else\n+\t\t    /* signed int/long -> unsigned int/long */\n+\t\t    return INTEGER_CONVERSION_BADNESS;\n+\t\t}\n+\t    }\n+\t  else if (!TYPE_NOSIGN (arg) && !TYPE_UNSIGNED (arg))\n+\t    {\n+\t      if (integer_types_same_name_p (TYPE_NAME (parm),\n+\t\t\t\t\t     TYPE_NAME (arg)))\n+\t\treturn EXACT_MATCH_BADNESS;\n+\t      else if (integer_types_same_name_p (TYPE_NAME (arg),\n+\t\t\t\t\t\t  \"int\")\n+\t\t       && integer_types_same_name_p (TYPE_NAME (parm),\n+\t\t\t\t\t\t     \"long\"))\n+\t\treturn INTEGER_PROMOTION_BADNESS;\n+\t      else\n+\t\treturn INTEGER_CONVERSION_BADNESS;\n+\t    }\n+\t  else\n+\t    return INTEGER_CONVERSION_BADNESS;\n+\t}\n+      else if (TYPE_LENGTH (arg) < TYPE_LENGTH (parm))\n+\treturn INTEGER_PROMOTION_BADNESS;\n+      else\n+\treturn INTEGER_CONVERSION_BADNESS;\n+    case TYPE_CODE_ENUM:\n+    case TYPE_CODE_FLAGS:\n+    case TYPE_CODE_CHAR:\n+    case TYPE_CODE_RANGE:\n+    case TYPE_CODE_BOOL:\n+      if (TYPE_DECLARED_CLASS (arg))\n+\treturn INCOMPATIBLE_TYPE_BADNESS;\n+      return INTEGER_PROMOTION_BADNESS;\n+    case TYPE_CODE_FLT:\n+      return INT_FLOAT_CONVERSION_BADNESS;\n+    case TYPE_CODE_PTR:\n+      return NS_POINTER_CONVERSION_BADNESS;\n+    default:\n+      return INCOMPATIBLE_TYPE_BADNESS;\n+    }\n+}\n+\n /* Compare one type (PARM) for compatibility with another (ARG).\n  * PARM is intended to be the parameter type of a function; and\n  * ARG is the supplied argument's type.  This function tests if\n@@ -3983,89 +4072,7 @@ rank_one_type (struct type *parm, struct type *arg, struct value *value)\n     case TYPE_CODE_FUNC:\n       return rank_one_type_parm_func (parm, arg, value);\n     case TYPE_CODE_INT:\n-      switch (TYPE_CODE (arg))\n-\t{\n-\tcase TYPE_CODE_INT:\n-\t  if (TYPE_LENGTH (arg) == TYPE_LENGTH (parm))\n-\t    {\n-\t      /* Deal with signed, unsigned, and plain chars and\n-\t         signed and unsigned ints.  */\n-\t      if (TYPE_NOSIGN (parm))\n-\t\t{\n-\t\t  /* This case only for character types.  */\n-\t\t  if (TYPE_NOSIGN (arg))\n-\t\t    return EXACT_MATCH_BADNESS;\t/* plain char -> plain char */\n-\t\t  else\t\t/* signed/unsigned char -> plain char */\n-\t\t    return INTEGER_CONVERSION_BADNESS;\n-\t\t}\n-\t      else if (TYPE_UNSIGNED (parm))\n-\t\t{\n-\t\t  if (TYPE_UNSIGNED (arg))\n-\t\t    {\n-\t\t      /* unsigned int -> unsigned int, or \n-\t\t\t unsigned long -> unsigned long */\n-\t\t      if (integer_types_same_name_p (TYPE_NAME (parm), \n-\t\t\t\t\t\t     TYPE_NAME (arg)))\n-\t\t\treturn EXACT_MATCH_BADNESS;\n-\t\t      else if (integer_types_same_name_p (TYPE_NAME (arg), \n-\t\t\t\t\t\t\t  \"int\")\n-\t\t\t       && integer_types_same_name_p (TYPE_NAME (parm),\n-\t\t\t\t\t\t\t     \"long\"))\n-\t\t\t/* unsigned int -> unsigned long */\n-\t\t\treturn INTEGER_PROMOTION_BADNESS;\n-\t\t      else\n-\t\t\t/* unsigned long -> unsigned int */\n-\t\t\treturn INTEGER_CONVERSION_BADNESS;\n-\t\t    }\n-\t\t  else\n-\t\t    {\n-\t\t      if (integer_types_same_name_p (TYPE_NAME (arg), \n-\t\t\t\t\t\t     \"long\")\n-\t\t\t  && integer_types_same_name_p (TYPE_NAME (parm), \n-\t\t\t\t\t\t\t\"int\"))\n-\t\t\t/* signed long -> unsigned int */\n-\t\t\treturn INTEGER_CONVERSION_BADNESS;\n-\t\t      else\n-\t\t\t/* signed int/long -> unsigned int/long */\n-\t\t\treturn INTEGER_CONVERSION_BADNESS;\n-\t\t    }\n-\t\t}\n-\t      else if (!TYPE_NOSIGN (arg) && !TYPE_UNSIGNED (arg))\n-\t\t{\n-\t\t  if (integer_types_same_name_p (TYPE_NAME (parm), \n-\t\t\t\t\t\t TYPE_NAME (arg)))\n-\t\t    return EXACT_MATCH_BADNESS;\n-\t\t  else if (integer_types_same_name_p (TYPE_NAME (arg), \n-\t\t\t\t\t\t      \"int\")\n-\t\t\t   && integer_types_same_name_p (TYPE_NAME (parm), \n-\t\t\t\t\t\t\t \"long\"))\n-\t\t    return INTEGER_PROMOTION_BADNESS;\n-\t\t  else\n-\t\t    return INTEGER_CONVERSION_BADNESS;\n-\t\t}\n-\t      else\n-\t\treturn INTEGER_CONVERSION_BADNESS;\n-\t    }\n-\t  else if (TYPE_LENGTH (arg) < TYPE_LENGTH (parm))\n-\t    return INTEGER_PROMOTION_BADNESS;\n-\t  else\n-\t    return INTEGER_CONVERSION_BADNESS;\n-\tcase TYPE_CODE_ENUM:\n-\tcase TYPE_CODE_FLAGS:\n-\tcase TYPE_CODE_CHAR:\n-\tcase TYPE_CODE_RANGE:\n-\tcase TYPE_CODE_BOOL:\n-\t  if (TYPE_DECLARED_CLASS (arg))\n-\t    return INCOMPATIBLE_TYPE_BADNESS;\n-\t  return INTEGER_PROMOTION_BADNESS;\n-\tcase TYPE_CODE_FLT:\n-\t  return INT_FLOAT_CONVERSION_BADNESS;\n-\tcase TYPE_CODE_PTR:\n-\t  return NS_POINTER_CONVERSION_BADNESS;\n-\tdefault:\n-\t  return INCOMPATIBLE_TYPE_BADNESS;\n-\t}\n-      break;\n+      return rank_one_type_parm_int (parm, arg, value);\n     case TYPE_CODE_ENUM:\n       switch (TYPE_CODE (arg))\n \t{"
    }
  ]
}