{
  "sha": "a86c6c19643e9ac795b17846e5b0db8b3e4c54de",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTg2YzZjMTk2NDNlOWFjNzk1YjE3ODQ2ZTViMGRiOGIzZTRjNTRkZQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-12-14T09:06:47Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-12-14T13:06:19Z"
    },
    "message": "Put bfd_section_from_shdr loop detection array in elf_tdata\n\nThe static variables used by bfd_section_from_shdr to detect loops\nin ELF sections have a problem:  Comparing a BFD pointer doesn't\nguarantee that the current bfd is the same as the one previously used\nto allocate the sections_being_created array.  For example, doing\n   size bad_elf_1 bad_elf_2\nwith two corrupted ELF files containing section loops will leave the\nsection_being_created array allocated for the first file and since\nbfd_close is called for bad_elf_1 before bfd_elf_2 is opened, it is\npossible that the BFD for the second file is allocated in the same\nmemory as the first file.  If bad_elf_2 has more sections than\nbad_elf_1 then we might write beyond the end of the array.\n\nSo this patch implements the FIXME Nick put in a comment about\nattaching the array to the BFD.\n\n\t* elf-bfd.h (struct elf_obj_tdata): Add being_created.\n\t* elf.c (bfd_section_from_shdr): Delete static vars for loop\n\tdetection.  Use new tdata variable instead.\n\t* elfcode.h (elf_object_p): Allocate being_created.",
    "tree": {
      "sha": "f5386f7ef68e42eb20296f3b436e0d947fbfa136",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f5386f7ef68e42eb20296f3b436e0d947fbfa136"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a86c6c19643e9ac795b17846e5b0db8b3e4c54de",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a86c6c19643e9ac795b17846e5b0db8b3e4c54de",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a86c6c19643e9ac795b17846e5b0db8b3e4c54de",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a86c6c19643e9ac795b17846e5b0db8b3e4c54de/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8da4f428d1663541bdd49f5aa2041d06ac6a06de",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8da4f428d1663541bdd49f5aa2041d06ac6a06de",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8da4f428d1663541bdd49f5aa2041d06ac6a06de"
    }
  ],
  "stats": {
    "total": 65,
    "additions": 20,
    "deletions": 45
  },
  "files": [
    {
      "sha": "e3a5c8a6eeb40ecac69b53936d5d706b0f4359ed",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a86c6c19643e9ac795b17846e5b0db8b3e4c54de/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a86c6c19643e9ac795b17846e5b0db8b3e4c54de/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=a86c6c19643e9ac795b17846e5b0db8b3e4c54de",
      "patch": "@@ -1,3 +1,10 @@\n+2020-12-14  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf-bfd.h (struct elf_obj_tdata): Add being_created.\n+\t* elf.c (bfd_section_from_shdr): Delete static vars for loop\n+\tdetection.  Use new tdata variable instead.\n+\t* elfcode.h (elf_object_p): Allocate being_created.\n+\n 2020-12-10  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* elfxx-riscv.c (riscv_ext_dont_care_version): New function.  Return"
    },
    {
      "sha": "53b5ffc33d5092046c34c7d1c559585a3fe28c76",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a86c6c19643e9ac795b17846e5b0db8b3e4c54de/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a86c6c19643e9ac795b17846e5b0db8b3e4c54de/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=a86c6c19643e9ac795b17846e5b0db8b3e4c54de",
      "patch": "@@ -1942,6 +1942,7 @@ struct elf_obj_tdata\n   bfd_vma gp;\t\t\t\t/* The gp value */\n   unsigned int gp_size;\t\t\t/* The gp size */\n   unsigned int num_elf_sections;\t/* elf_sect_ptr size */\n+  unsigned char *being_created;\n \n   /* A mapping from external symbols to entries in the linker hash\n      table, used when linking.  This is indexed by the symbol index"
    },
    {
      "sha": "7f2237655d3e9c16fe158ad1bb2866de7dd0b7e2",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 9,
      "deletions": 45,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a86c6c19643e9ac795b17846e5b0db8b3e4c54de/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a86c6c19643e9ac795b17846e5b0db8b3e4c54de/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=a86c6c19643e9ac795b17846e5b0db8b3e4c54de",
      "patch": "@@ -2045,49 +2045,20 @@ bfd_section_from_shdr (bfd *abfd, unsigned int shindex)\n   const struct elf_backend_data *bed;\n   const char *name;\n   bfd_boolean ret = TRUE;\n-  static bfd_boolean * sections_being_created = NULL;\n-  static bfd * sections_being_created_abfd = NULL;\n-  static unsigned int nesting = 0;\n \n   if (shindex >= elf_numsections (abfd))\n     return FALSE;\n \n-  if (++ nesting > 3)\n+  /* PR17512: A corrupt ELF binary might contain a loop of sections via\n+     sh_link or sh_info.  Detect this here, by refusing to load a\n+     section that we are already in the process of loading.  */\n+  if (elf_tdata (abfd)->being_created[shindex])\n     {\n-      /* PR17512: A corrupt ELF binary might contain a recursive group of\n-\t sections, with each the string indices pointing to the next in the\n-\t loop.  Detect this here, by refusing to load a section that we are\n-\t already in the process of loading.  We only trigger this test if\n-\t we have nested at least three sections deep as normal ELF binaries\n-\t can expect to recurse at least once.\n-\n-\t FIXME: It would be better if this array was attached to the bfd,\n-\t rather than being held in a static pointer.  */\n-\n-      if (sections_being_created_abfd != abfd)\n-\t{\n-\t  free (sections_being_created);\n-\t  sections_being_created = NULL;\n-\t}\n-      if (sections_being_created == NULL)\n-\t{\n-\t  size_t amt = elf_numsections (abfd) * sizeof (bfd_boolean);\n-\n-\t  /* PR 26005: Do not use bfd_zalloc here as the memory might\n-\t     be released before the bfd has been fully scanned.  */\n-\t  sections_being_created = (bfd_boolean *) bfd_zmalloc (amt);\n-\t  if (sections_being_created == NULL)\n-\t    return FALSE;\n-\t  sections_being_created_abfd = abfd;\n-\t}\n-      if (sections_being_created [shindex])\n-\t{\n-\t  _bfd_error_handler\n-\t    (_(\"%pB: warning: loop in section dependencies detected\"), abfd);\n-\t  return FALSE;\n-\t}\n-      sections_being_created [shindex] = TRUE;\n+      _bfd_error_handler\n+\t(_(\"%pB: warning: loop in section dependencies detected\"), abfd);\n+      return FALSE;\n     }\n+  elf_tdata (abfd)->being_created[shindex] = TRUE;\n \n   hdr = elf_elfsections (abfd)[shindex];\n   ehdr = elf_elfheader (abfd);\n@@ -2611,14 +2582,7 @@ bfd_section_from_shdr (bfd *abfd, unsigned int shindex)\n  fail:\n   ret = FALSE;\n  success:\n-  if (sections_being_created && sections_being_created_abfd == abfd)\n-    sections_being_created [shindex] = FALSE;\n-  if (-- nesting == 0)\n-    {\n-      free (sections_being_created);\n-      sections_being_created = NULL;\n-      sections_being_created_abfd = NULL;\n-    }\n+  elf_tdata (abfd)->being_created[shindex] = FALSE;\n   return ret;\n }\n "
    },
    {
      "sha": "072220e220adc6fc94cc47e2be4ed6e25757207d",
      "filename": "bfd/elfcode.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a86c6c19643e9ac795b17846e5b0db8b3e4c54de/bfd/elfcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a86c6c19643e9ac795b17846e5b0db8b3e4c54de/bfd/elfcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfcode.h?ref=a86c6c19643e9ac795b17846e5b0db8b3e4c54de",
      "patch": "@@ -704,6 +704,9 @@ elf_object_p (bfd *abfd)\n       elf_elfsections (abfd) = (Elf_Internal_Shdr **) bfd_alloc (abfd, amt);\n       if (!elf_elfsections (abfd))\n \tgoto got_no_match;\n+      elf_tdata (abfd)->being_created = bfd_zalloc (abfd, num_sec);\n+      if (!elf_tdata (abfd)->being_created)\n+\tgoto got_no_match;\n \n       memcpy (i_shdrp, &i_shdr, sizeof (*i_shdrp));\n       for (shdrp = i_shdrp, shindex = 0; shindex < num_sec; shindex++)"
    }
  ]
}