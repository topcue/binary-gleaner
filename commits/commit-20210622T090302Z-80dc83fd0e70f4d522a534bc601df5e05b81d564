{
  "sha": "80dc83fd0e70f4d522a534bc601df5e05b81d564",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODBkYzgzZmQwZTcwZjRkNTIyYTUzNGJjNjAxZGY1ZTA1YjgxZDU2NA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-06-11T10:30:47Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-06-22T09:03:02Z"
    },
    "message": "gdb/remote: handle target dying just before a stepi\n\nI randomly hit a situation where gdbserver crashed immediately before\nI issued a 'stepi' to GDB, it turns out that this causes GDB itself to\ncrash.\n\nWhat happens is that as part of the stepi we try to insert some\nbreakpoints into the inferior, so from insert_breakpoints we figure\nout what we want to insert, then, eventually, try to send some packets\nto the remote to get the breakpoints inserted.\n\nIt is only at this point that GDB realises that the target has gone\naway.  This causes GDB to then enter this call stack:\n\n  unpush_and_perror\n    remote_unpush_target\n      generic_mourn_inferior\n        breakpoint_init_inferior\n          delete_breakpoint\n            update_global_location_list\n\nSo, we realise the target is gone and so delete the breakpoints\nassociated with that target.\n\nGDB then throws a TARGET_CLOSE_ERROR from unpush_and_error.\n\nThis error is caught in insert_breakpoints where we then try to print\na nice error saying something like:\n\n  Cannot insert breakpoint %d: some error text here...\n\nTo fill in the '%d' we try to read properties of the breakpoint\nobject.\n\nWhich was deleted due to the delete_breakpoint call above.\n\nAnd so GDB dies...\n\nMy proposal in this commit is that, should we catch a\nTARGET_CLOSE_ERROR in insert_breakpoints, then we just rethrow the\nerror.\n\nThis will cause the main event loop to print something like:\n\n  Remote connection closed\n\nWhich I think is fine, I don't think the user will care much which\nparticular breakpoint GDB was operating on when the connection closed,\njust knowing that the connection closed should be enough I think.\n\nI initially added a test to 'gdb.server/server-kill.exp' for this\nissue, however, my first attempt was not good enough, the test was\npassing even without my fix.\n\nTurns out that the server-kill.exp test actually kills the PID of the\ninferior, not the PID of the server.  This means that gdbserver is\nactually able to send a packet to GDB saying that the inferior has\nexited prior to gdbserver itself shutting down.  This extra\ninformation was enough to prevent the bug I was seeing manifest.\n\nSo, I have extended server-kill.exp to run all of the tests twice, the\nfirst time we still kill the inferior.  On the second run we hard kill\nthe gdbserver itself, this prevents the server from sending anything\nto GDB before it exits.\n\nMy new test is only expected to fail in this second mode of\noperation (killing gdbserver itself), and without my fix, that is what\nI see.\n\ngdb/ChangeLog:\n\n\t* breakpoint.c (insert_bp_location): If we catch a\n\tTARGET_CLOSE_ERROR just rethrow it, the breakpoints might have\n\tbeen deleted.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.server/server-kill.exp: Introduce global kill_pid_of, and\n\tmake use of this in prepare to select which pid we should kill.\n\tRun all the tests twice with a different kill_pid_of value.\n\t(prepare): Make use of kill_pid_of.\n\t(test_stepi): New proc.",
    "tree": {
      "sha": "9b7a8d2a695cfa2860762d293ecad18ac9e4614e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9b7a8d2a695cfa2860762d293ecad18ac9e4614e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/80dc83fd0e70f4d522a534bc601df5e05b81d564",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/80dc83fd0e70f4d522a534bc601df5e05b81d564",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/80dc83fd0e70f4d522a534bc601df5e05b81d564",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/80dc83fd0e70f4d522a534bc601df5e05b81d564/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "46b8b3d6f87c0c65d908e3f6c83532d7286868b9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/46b8b3d6f87c0c65d908e3f6c83532d7286868b9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/46b8b3d6f87c0c65d908e3f6c83532d7286868b9"
    }
  ],
  "stats": {
    "total": 87,
    "additions": 73,
    "deletions": 14
  },
  "files": [
    {
      "sha": "2b04c3c6d730600da0eab06cfd49dc455105f5ec",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80dc83fd0e70f4d522a534bc601df5e05b81d564/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80dc83fd0e70f4d522a534bc601df5e05b81d564/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=80dc83fd0e70f4d522a534bc601df5e05b81d564",
      "patch": "@@ -1,3 +1,9 @@\n+2021-06-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* breakpoint.c (insert_bp_location): If we catch a\n+\tTARGET_CLOSE_ERROR just rethrow it, the breakpoints might have\n+\tbeen deleted.\n+\n 2021-06-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* NEWS: Mention new target feature name."
    },
    {
      "sha": "0595c6f8cbd49aad4b34f567a950451bd0ccff28",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80dc83fd0e70f4d522a534bc601df5e05b81d564/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80dc83fd0e70f4d522a534bc601df5e05b81d564/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=80dc83fd0e70f4d522a534bc601df5e05b81d564",
      "patch": "@@ -2698,6 +2698,14 @@ insert_bp_location (struct bp_location *bl,\n \t{\n \t  /* Can't set the breakpoint.  */\n \n+\t  /* If the target has closed then it will have deleted any\n+\t     breakpoints inserted within the target inferior, as a result\n+\t     any further attempts to interact with the breakpoint objects\n+\t     is not possible.  Just rethrow the error.  */\n+\t  if (bp_excpt.error == TARGET_CLOSE_ERROR)\n+\t    throw bp_excpt;\n+\t  gdb_assert (bl->owner != nullptr);\n+\n \t  /* In some cases, we might not be able to insert a\n \t     breakpoint in a shared library that has already been\n \t     removed, but we have not yet processed the shlib unload"
    },
    {
      "sha": "88f8d96bf70dd9d68dc5e71e9f304d5692a08c92",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80dc83fd0e70f4d522a534bc601df5e05b81d564/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80dc83fd0e70f4d522a534bc601df5e05b81d564/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=80dc83fd0e70f4d522a534bc601df5e05b81d564",
      "patch": "@@ -1,3 +1,11 @@\n+2021-06-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.server/server-kill.exp: Introduce global kill_pid_of, and\n+\tmake use of this in prepare to select which pid we should kill.\n+\tRun all the tests twice with a different kill_pid_of value.\n+\t(prepare): Make use of kill_pid_of.\n+\t(test_stepi): New proc.\n+\n 2021-06-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.python/py-frame.exp: Add Frame.level tests."
    },
    {
      "sha": "655821cc6f902e39cca994535d1cd9c552e134c3",
      "filename": "gdb/testsuite/gdb.server/server-kill.exp",
      "status": "modified",
      "additions": 51,
      "deletions": 14,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80dc83fd0e70f4d522a534bc601df5e05b81d564/gdb/testsuite/gdb.server/server-kill.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80dc83fd0e70f4d522a534bc601df5e05b81d564/gdb/testsuite/gdb.server/server-kill.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/server-kill.exp?ref=80dc83fd0e70f4d522a534bc601df5e05b81d564",
      "patch": "@@ -30,6 +30,21 @@ if { [build_executable \"failed to prepare\" ${testfile}] } {\n     return -1\n }\n \n+# Global control variable used by the proc prepare.  Should be set to\n+# either 'inferior' or 'server'.\n+#\n+# In the proc prepare we start gdbserver and extract a pid, which will\n+# later be killed by calling the proc kill_server.\n+#\n+# When KILL_PID_OF is set to 'inferior' then the pid we kill is that\n+# of the inferior running under gdbserver, when this process dies\n+# gdbserver itself will exit.\n+#\n+# When KILL_PID_OF is set to 'server' then the pid we kill is that of\n+# the gdbserver itself, this is a much more aggressive strategy and\n+# exposes different bugs within GDB.\n+set kill_pid_of \"inferior\"\n+\n # Spawn GDBserver, run to main, extract GDBserver's PID and save it in\n # the SERVER_PID global.\n \n@@ -54,18 +69,22 @@ proc prepare {} {\n \n     gdbserver_run \"\"\n \n-    # Continue past server_pid assignment.\n-    gdb_breakpoint ${srcfile}:[gdb_get_line_number \"i = 0;\"]\n-    gdb_continue_to_breakpoint \"after server_pid assignment\"\n-\n-    # Get the pid of GDBServer.\n-    set test \"p server_pid\"\n-    set server_pid 0\n-    gdb_test_multiple $test $test {\n-\t-re \" = ($decimal)\\r\\n$gdb_prompt $\" {\n-\t    set server_pid $expect_out(1,string)\n-\t    pass $test\n+    if { $::kill_pid_of == \"inferior\" } {\n+\t# Continue past server_pid assignment.\n+\tgdb_breakpoint ${srcfile}:[gdb_get_line_number \"i = 0;\"]\n+\tgdb_continue_to_breakpoint \"after server_pid assignment\"\n+\n+\t# Get the pid of GDBServer.\n+\tset test \"p server_pid\"\n+\tset server_pid 0\n+\tgdb_test_multiple $test $test {\n+\t    -re \" = ($decimal)\\r\\n$gdb_prompt $\" {\n+\t\tset server_pid $expect_out(1,string)\n+\t\tpass $test\n+\t    }\n \t}\n+    } else {\n+\tset server_pid [exp_pid -i $::server_spawn_id]\n     }\n \n     if {$server_pid == 0} {\n@@ -132,6 +151,24 @@ proc_with_prefix test_unwind_syms {} {\n     gdb_test \"bt\" \"(Target disconnected|Remote connection closed|Remote communication error).*\"\n }\n \n-test_tstatus\n-test_unwind_nosyms\n-test_unwind_syms\n+# Test performing a stepi right after the connection is dropped.\n+\n+proc_with_prefix test_stepi {} {\n+    if ![prepare] {\n+\treturn\n+    }\n+\n+    kill_server\n+\n+    gdb_test \"stepi\" \"(Target disconnected|Remote connection closed|Remote communication error).*\"\n+}\n+\n+# Run each test twice, see the description of KILL_PID_OF earlier in\n+# this file for more details.\n+\n+foreach_with_prefix kill_pid_of { \"inferior\" \"server\" } {\n+    test_tstatus\n+    test_unwind_nosyms\n+    test_unwind_syms\n+    test_stepi\n+}"
    }
  ]
}