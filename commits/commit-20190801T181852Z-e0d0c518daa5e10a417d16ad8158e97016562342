{
  "sha": "e0d0c518daa5e10a417d16ad8158e97016562342",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTBkMGM1MThkYWE1ZTEwYTQxN2QxNmFkODE1OGU5NzAxNjU2MjM0Mg==",
  "commit": {
    "author": {
      "name": "Max Filippov",
      "email": "jcmvbkbc@gmail.com",
      "date": "2019-04-22T20:35:13Z"
    },
    "committer": {
      "name": "Max Filippov",
      "email": "jcmvbkbc@gmail.com",
      "date": "2019-08-01T18:18:52Z"
    },
    "message": "xtensa: bfd: add special case to loop alignment check\n\ncheck_loop_aligned is used during link time relaxation to only allow\ntransformations that don't violate loop body alignment requirements.\nAssembler can relax loops that have too long body by adding instructions\nbetween the loop instruction and the loop body. check_loop_aligned must\ncheck alignment of the first instruction of the actual loop body.\nDetect loop / rsr.lend / wsr.lbeg sequence used in assembly time\nrelaxation and adjust alignment check when it's detected.\n\nbfd/\n2019-08-01  Max Filippov  <jcmvbkbc@gmail.com>\n\n\t* elf32-xtensa.c (insn_num_slots, get_rsr_lend_opcode)\n\t(get_wsr_lbeg_opcode): New functions.\n\t(check_loop_aligned): Detect relaxed loops and adjust loop_len\n\tand insn_len for the first actual instruction of the loop.",
    "tree": {
      "sha": "5b3c2496a3daa918829aff7d920d6791f452588b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5b3c2496a3daa918829aff7d920d6791f452588b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e0d0c518daa5e10a417d16ad8158e97016562342",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e0d0c518daa5e10a417d16ad8158e97016562342",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e0d0c518daa5e10a417d16ad8158e97016562342",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e0d0c518daa5e10a417d16ad8158e97016562342/comments",
  "author": {
    "login": "jcmvbkbc",
    "id": 166731,
    "node_id": "MDQ6VXNlcjE2NjczMQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jcmvbkbc",
    "html_url": "https://github.com/jcmvbkbc",
    "followers_url": "https://api.github.com/users/jcmvbkbc/followers",
    "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}",
    "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions",
    "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs",
    "repos_url": "https://api.github.com/users/jcmvbkbc/repos",
    "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jcmvbkbc",
    "id": 166731,
    "node_id": "MDQ6VXNlcjE2NjczMQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jcmvbkbc",
    "html_url": "https://github.com/jcmvbkbc",
    "followers_url": "https://api.github.com/users/jcmvbkbc/followers",
    "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}",
    "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions",
    "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs",
    "repos_url": "https://api.github.com/users/jcmvbkbc/repos",
    "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f126416240a3ae1be69792361bca8bcbb84e62e8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f126416240a3ae1be69792361bca8bcbb84e62e8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f126416240a3ae1be69792361bca8bcbb84e62e8"
    }
  ],
  "stats": {
    "total": 72,
    "additions": 72,
    "deletions": 0
  },
  "files": [
    {
      "sha": "04427754bd378d4905455029f67b429566c029bd",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0d0c518daa5e10a417d16ad8158e97016562342/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0d0c518daa5e10a417d16ad8158e97016562342/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=e0d0c518daa5e10a417d16ad8158e97016562342",
      "patch": "@@ -1,3 +1,10 @@\n+2019-08-01  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* elf32-xtensa.c (insn_num_slots, get_rsr_lend_opcode)\n+\t(get_wsr_lbeg_opcode): New functions.\n+\t(check_loop_aligned): Detect relaxed loops and adjust loop_len\n+\tand insn_len for the first actual instruction of the loop.\n+\n 2019-07-30  Alan Modra  <amodra@gmail.com>\n \n \tPR 24768"
    },
    {
      "sha": "8a7bf7e96f8c7559ee4319d1e515095a8c068178",
      "filename": "bfd/elf32-xtensa.c",
      "status": "modified",
      "additions": 65,
      "deletions": 0,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0d0c518daa5e10a417d16ad8158e97016562342/bfd/elf32-xtensa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0d0c518daa5e10a417d16ad8158e97016562342/bfd/elf32-xtensa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-xtensa.c?ref=e0d0c518daa5e10a417d16ad8158e97016562342",
      "patch": "@@ -63,6 +63,8 @@ static bfd_boolean is_alt_relocation (int);\n static bfd_boolean is_operand_relocation (int);\n static bfd_size_type insn_decode_len\n   (bfd_byte *, bfd_size_type, bfd_size_type);\n+static int insn_num_slots\n+  (bfd_byte *, bfd_size_type, bfd_size_type);\n static xtensa_opcode insn_decode_opcode\n   (bfd_byte *, bfd_size_type, bfd_size_type, int);\n static bfd_boolean check_branch_target_aligned\n@@ -3857,6 +3859,33 @@ l32r_offset (bfd_vma addr, bfd_vma pc)\n }\n \n \n+static xtensa_opcode\n+get_rsr_lend_opcode (void)\n+{\n+  static xtensa_opcode rsr_lend_opcode = XTENSA_UNDEFINED;\n+  static bfd_boolean done_lookup = FALSE;\n+  if (!done_lookup)\n+    {\n+      rsr_lend_opcode = xtensa_opcode_lookup (xtensa_default_isa, \"rsr.lend\");\n+      done_lookup = TRUE;\n+    }\n+  return rsr_lend_opcode;\n+}\n+\n+static xtensa_opcode\n+get_wsr_lbeg_opcode (void)\n+{\n+  static xtensa_opcode wsr_lbeg_opcode = XTENSA_UNDEFINED;\n+  static bfd_boolean done_lookup = FALSE;\n+  if (!done_lookup)\n+    {\n+      wsr_lbeg_opcode = xtensa_opcode_lookup (xtensa_default_isa, \"wsr.lbeg\");\n+      done_lookup = TRUE;\n+    }\n+  return wsr_lbeg_opcode;\n+}\n+\n+\n static int\n get_relocation_opnd (xtensa_opcode opcode, int r_type)\n {\n@@ -4057,6 +4086,28 @@ insn_decode_len (bfd_byte *contents,\n   return insn_len;\n }\n \n+int\n+insn_num_slots (bfd_byte *contents,\n+\t\tbfd_size_type content_len,\n+\t\tbfd_size_type offset)\n+{\n+  xtensa_isa isa = xtensa_default_isa;\n+  xtensa_format fmt;\n+  static xtensa_insnbuf ibuff = NULL;\n+\n+  if (offset + MIN_INSN_LENGTH > content_len)\n+    return XTENSA_UNDEFINED;\n+\n+  if (ibuff == NULL)\n+    ibuff = xtensa_insnbuf_alloc (isa);\n+  xtensa_insnbuf_from_chars (isa, ibuff, &contents[offset],\n+\t\t\t     content_len - offset);\n+  fmt = xtensa_format_decode (isa, ibuff);\n+  if (fmt == XTENSA_UNDEFINED)\n+    return XTENSA_UNDEFINED;\n+  return xtensa_format_num_slots (isa, fmt);\n+}\n+\n \n /* Decode the opcode for a single slot instruction.\n    Return 0 if it fails to decode or the instruction is multi-slot.  */\n@@ -4136,6 +4187,20 @@ check_loop_aligned (bfd_byte *contents,\n       return FALSE;\n     }\n \n+  /* If this is relaxed loop, analyze first instruction of the actual loop\n+     body.  It must be at offset 27 from the loop instruction address.  */\n+  if (insn_len == 3\n+      && insn_num_slots (contents, content_length, offset + loop_len) == 1\n+      && insn_decode_opcode (contents, content_length,\n+\t\t\t     offset + loop_len, 0) == get_rsr_lend_opcode()\n+      && insn_decode_len (contents, content_length, offset + loop_len + 3) == 3\n+      && insn_num_slots (contents, content_length, offset + loop_len + 3) == 1\n+      && insn_decode_opcode (contents, content_length,\n+\t\t\t     offset + loop_len + 3, 0) == get_wsr_lbeg_opcode())\n+    {\n+      loop_len = 27;\n+      insn_len = insn_decode_len (contents, content_length, offset + loop_len);\n+    }\n   return check_branch_target_aligned_address (address + loop_len, insn_len);\n }\n "
    }
  ]
}