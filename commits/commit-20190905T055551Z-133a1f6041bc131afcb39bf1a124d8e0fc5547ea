{
  "sha": "133a1f6041bc131afcb39bf1a124d8e0fc5547ea",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTMzYTFmNjA0MWJjMTMxYWZjYjM5YmYxYTEyNGQ4ZTBmYzU1NDdlYQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-05T00:36:42Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-05T05:55:51Z"
    },
    "message": "PowerPC64 GOT_PCREL relocs\n\nPC-relative relocs typically use the addend in adjusting what they are\nrelative to.  For example:\n\tbcl 20,31,1f\n1:\tmflr 12\n\taddi 12,12,xxx-1b\ngenerates \"R_PPC64_REL16 xxx+0x4\" for the addi (when little-endian).\nThe addend reflects the fact that you want the offset relative to the\nprevious insn not the current one in this case.\n\nSo the question is, will we ever want to do something like that for an\ninstruction using R_PPC64_GOT_PCREL34?  I thought so at the time I\nfirst implemented support in ld but at the time I think the hardware\nwas possibly going to support pcrel+offset+reg addressing.  In which\ncase you might want something like:\n\tload_big_offset_into_r2\n\tpld 3,sym-big_offset@got@pcrel(2)\nwhich would be a way of supporting more than 8G offsets from code to\nthe GOT.  We could do the same with\n\tload_big_offset_into_r2\n\tpla 9,sym-big_offset@got@pcrel\n\tldx 3,9,2\nHowever, this is really a poor version of TOC-pointer relative code.\n\nSo let's go with an addend on R_PPC64_GOT_PCREL34 meaning that\nsym+addend should be put in a GOT entry, and the relocation calculate\nthe pc-relative offset to that GOT entry.\n\nNote that this is an extension to the ABI, which says (by the\nexpression given for GOT relocs) that non-zero addends on GOT and PLT\nrelocs are ignored.  This is true for all GOT/PLT relocs, not just the\npcrel ones.\n\n\t* elf64-ppc.c (ppc64_elf_check_relocs): Interpret an addend in\n\tGOT_PCREL and PLT_PCREL relocs as affecting the value stored\n\tin the GOT/PLT entry rather than affecting the offset to that\n\tGOI/PLT entry.\n\t(ppc64_elf_edit_toc, ppc64_elf_relocate_section): Likewise.",
    "tree": {
      "sha": "0a27fae679a00e5d4c12655f38c05124eaf6253f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0a27fae679a00e5d4c12655f38c05124eaf6253f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/133a1f6041bc131afcb39bf1a124d8e0fc5547ea",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/133a1f6041bc131afcb39bf1a124d8e0fc5547ea",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/133a1f6041bc131afcb39bf1a124d8e0fc5547ea",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/133a1f6041bc131afcb39bf1a124d8e0fc5547ea/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "77486630b13e9e586b0a1556cba9876a0ede99da",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/77486630b13e9e586b0a1556cba9876a0ede99da",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/77486630b13e9e586b0a1556cba9876a0ede99da"
    }
  ],
  "stats": {
    "total": 84,
    "additions": 31,
    "deletions": 53
  },
  "files": [
    {
      "sha": "8ed849d74d3143b1f46a03f9577a708ef15e326d",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/133a1f6041bc131afcb39bf1a124d8e0fc5547ea/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/133a1f6041bc131afcb39bf1a124d8e0fc5547ea/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=133a1f6041bc131afcb39bf1a124d8e0fc5547ea",
      "patch": "@@ -1,3 +1,11 @@\n+2019-09-05  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf64-ppc.c (ppc64_elf_check_relocs): Interpret an addend in\n+\tGOT_PCREL and PLT_PCREL relocs as affecting the value stored\n+\tin the GOT/PLT entry rather than affecting the offset to that\n+\tGOI/PLT entry.\n+\t(ppc64_elf_edit_toc, ppc64_elf_relocate_section): Likewise.\n+\n 2019-09-05  Alan Modra  <amodra@gmail.com>\n \n \t* elf64-ppc.c (xlate_pcrel_opt): Handle prefix loads and stores"
    },
    {
      "sha": "88ace7e6fe0f0e03fee50c5644851ef974fb3863",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 23,
      "deletions": 53,
      "changes": 76,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/133a1f6041bc131afcb39bf1a124d8e0fc5547ea/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/133a1f6041bc131afcb39bf1a124d8e0fc5547ea/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=133a1f6041bc131afcb39bf1a124d8e0fc5547ea",
      "patch": "@@ -4524,7 +4524,6 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n       int tls_type;\n       struct _ppc64_elf_section_data *ppc64_sec;\n       struct plt_entry **ifunc, **plt_list;\n-      bfd_vma sym_addend;\n \n       r_symndx = ELF64_R_SYM (rel->r_info);\n       if (r_symndx < symtab_hdr->sh_info)\n@@ -4550,18 +4549,6 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \tcase R_PPC64_D28:\n \tcase R_PPC64_TPREL34:\n \tcase R_PPC64_DTPREL34:\n-\t  htab->powerxx_stubs = 1;\n-\t  /* Fall through.  */\n-\tdefault:\n-\t  /* Somewhat foolishly, because the ABIs don't specifically\n-\t     allow it, ppc64 gas and ld support GOT and PLT relocs\n-\t     with non-zero addends where the addend results in\n-\t     sym+addend being stored in the GOT or PLT entry.  This\n-\t     can't be supported for pcrel relocs because the addend is\n-\t     used to specify the pcrel offset.  */\n-\t  sym_addend = rel->r_addend;\n-\t  break;\n-\n \tcase R_PPC64_PCREL34:\n \tcase R_PPC64_GOT_PCREL34:\n \tcase R_PPC64_GOT_TLSGD34:\n@@ -4572,7 +4559,8 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \tcase R_PPC64_PLT_PCREL34_NOTOC:\n \tcase R_PPC64_PCREL28:\n \t  htab->powerxx_stubs = 1;\n-\t  sym_addend = 0;\n+\t  break;\n+\tdefault:\n \t  break;\n \t}\n \n@@ -4621,7 +4609,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t  if (ELF_ST_TYPE (isym->st_info) == STT_GNU_IFUNC)\n \t    {\n \t      ifunc = update_local_sym_info (abfd, symtab_hdr, r_symndx,\n-\t\t\t\t\t     sym_addend,\n+\t\t\t\t\t     rel->r_addend,\n \t\t\t\t\t     NON_GOT | PLT_IFUNC);\n \t      if (ifunc == NULL)\n \t\treturn FALSE;\n@@ -4638,7 +4626,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t    ((struct ppc_link_hash_entry *) h)->tls_mask |= TLS_TLS | TLS_MARK;\n \t  else\n \t    if (!update_local_sym_info (abfd, symtab_hdr, r_symndx,\n-\t\t\t\t\tsym_addend,\n+\t\t\t\t\trel->r_addend,\n \t\t\t\t\tNON_GOT | TLS_TLS | TLS_MARK))\n \t      return FALSE;\n \t  sec->has_tls_reloc = 1;\n@@ -4712,7 +4700,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \n \t      eh = (struct ppc_link_hash_entry *) h;\n \t      for (ent = eh->elf.got.glist; ent != NULL; ent = ent->next)\n-\t\tif (ent->addend == sym_addend\n+\t\tif (ent->addend == rel->r_addend\n \t\t    && ent->owner == abfd\n \t\t    && ent->tls_type == tls_type)\n \t\t  break;\n@@ -4723,7 +4711,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t\t  if (ent == NULL)\n \t\t    return FALSE;\n \t\t  ent->next = eh->elf.got.glist;\n-\t\t  ent->addend = sym_addend;\n+\t\t  ent->addend = rel->r_addend;\n \t\t  ent->owner = abfd;\n \t\t  ent->tls_type = tls_type;\n \t\t  ent->is_indirect = FALSE;\n@@ -4736,14 +4724,14 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t  else\n \t    /* This is a global offset table entry for a local symbol.  */\n \t    if (!update_local_sym_info (abfd, symtab_hdr, r_symndx,\n-\t\t\t\t\tsym_addend, tls_type))\n+\t\t\t\t\trel->r_addend, tls_type))\n \t      return FALSE;\n \n \t  /* We may also need a plt entry if the symbol turns out to be\n \t     an ifunc.  */\n \t  if (h != NULL && !bfd_link_pic (info) && abiversion (abfd) != 1)\n \t    {\n-\t      if (!update_plt_info (abfd, &h->plt.plist, sym_addend))\n+\t      if (!update_plt_info (abfd, &h->plt.plist, rel->r_addend))\n \t\treturn FALSE;\n \t    }\n \t  break;\n@@ -4769,9 +4757,9 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t    }\n \t  if (plt_list == NULL)\n \t    plt_list = update_local_sym_info (abfd, symtab_hdr, r_symndx,\n-\t\t\t\t\t      sym_addend,\n+\t\t\t\t\t      rel->r_addend,\n \t\t\t\t\t      NON_GOT | PLT_KEEP);\n-\t  if (!update_plt_info (abfd, plt_list, sym_addend))\n+\t  if (!update_plt_info (abfd, plt_list, rel->r_addend))\n \t    return FALSE;\n \t  break;\n \n@@ -4929,7 +4917,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t  /* We may need a .plt entry if the function this reloc\n \t     refers to is in a shared lib.  */\n \t  if (plt_list\n-\t      && !update_plt_info (abfd, plt_list, sym_addend))\n+\t      && !update_plt_info (abfd, plt_list, rel->r_addend))\n \t    return FALSE;\n \t  break;\n \n@@ -4973,7 +4961,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t    }\n \t  else\n \t    if (!update_local_sym_info (abfd, symtab_hdr, r_symndx,\n-\t\t\t\t\tsym_addend, tls_type))\n+\t\t\t\t\trel->r_addend, tls_type))\n \t      return FALSE;\n \n \t  ppc64_sec = ppc64_elf_section_data (sec);\n@@ -4995,7 +4983,7 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t    }\n \t  BFD_ASSERT (rel->r_offset % 8 == 0);\n \t  ppc64_sec->u.toc.symndx[rel->r_offset / 8] = r_symndx;\n-\t  ppc64_sec->u.toc.add[rel->r_offset / 8] = sym_addend;\n+\t  ppc64_sec->u.toc.add[rel->r_offset / 8] = rel->r_addend;\n \n \t  /* Mark the second slot of a GD or LD entry.\n \t     -1 to indicate GD and -2 to indicate LD.  */\n@@ -9044,7 +9032,7 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n \t      asection *sym_sec;\n \t      struct elf_link_hash_entry *h;\n \t      struct got_entry *ent;\n-\t      bfd_vma sym_addend, val, pc;\n+\t      bfd_vma val, pc;\n \t      unsigned char buf[8];\n \t      unsigned int insn;\n \t      enum {no_check, check_lo, check_ha} insn_check;\n@@ -9119,11 +9107,7 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n \n \t\tcase R_PPC64_GOT16_HA:\n \t\tcase R_PPC64_GOT16_LO_DS:\n-\t\t  sym_addend = rel->r_addend;\n-\t\t  break;\n-\n \t\tcase R_PPC64_GOT_PCREL34:\n-\t\t  sym_addend = 0;\n \t\t  break;\n \t\t}\n \n@@ -9144,7 +9128,7 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n \t\tval = h->root.u.def.value;\n \t      else\n \t\tval = sym->st_value;\n-\t      val += sym_addend;\n+\t      val += rel->r_addend;\n \t      val += sym_sec->output_section->vma + sym_sec->output_offset;\n \n /* Fudge factor to allow for the fact that the preliminary layout\n@@ -9209,7 +9193,7 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n \t\t  ent = local_got_ents[r_symndx];\n \t\t}\n \t      for (; ent != NULL; ent = ent->next)\n-\t\tif (ent->addend == sym_addend\n+\t\tif (ent->addend == rel->r_addend\n \t\t    && ent->owner == ibfd\n \t\t    && ent->tls_type == 0)\n \t\t  break;\n@@ -15535,14 +15519,6 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    bfd_vma off;\n \t    unsigned long indx = 0;\n \t    struct got_entry *ent;\n-\t    bfd_vma sym_addend = orig_rel.r_addend;\n-\n-\t    if (r_type == R_PPC64_GOT_PCREL34\n-\t\t|| r_type == R_PPC64_GOT_TLSGD34\n-\t\t|| r_type == R_PPC64_GOT_TLSLD34\n-\t\t|| r_type == R_PPC64_GOT_TPREL34\n-\t\t|| r_type == R_PPC64_GOT_DTPREL34)\n-\t      sym_addend = 0;\n \n \t    if (tls_type == (TLS_TLS | TLS_LD)\n \t\t&& (h == NULL\n@@ -15576,7 +15552,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t  }\n \n \t\tfor (; ent != NULL; ent = ent->next)\n-\t\t  if (ent->addend == sym_addend\n+\t\t  if (ent->addend == orig_rel.r_addend\n \t\t      && ent->owner == input_bfd\n \t\t      && ent->tls_type == tls_type)\n \t\t    break;\n@@ -15633,7 +15609,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t    outrel.r_offset = (got->output_section->vma\n \t\t\t\t       + got->output_offset\n \t\t\t\t       + off);\n-\t\t    outrel.r_addend = sym_addend;\n+\t\t    outrel.r_addend = orig_rel.r_addend;\n \t\t    if (tls_type & (TLS_LD | TLS_GD))\n \t\t      {\n \t\t\toutrel.r_addend = 0;\n@@ -15646,7 +15622,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t\t    bfd_elf64_swap_reloca_out (output_bfd,\n \t\t\t\t\t\t       &outrel, loc);\n \t\t\t    outrel.r_offset += 8;\n-\t\t\t    outrel.r_addend = sym_addend;\n+\t\t\t    outrel.r_addend = orig_rel.r_addend;\n \t\t\t    outrel.r_info\n \t\t\t      = ELF64_R_INFO (indx, R_PPC64_DTPREL64);\n \t\t\t  }\n@@ -15692,7 +15668,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t   emitting a reloc.  */\n \t\telse\n \t\t  {\n-\t\t    relocation += sym_addend;\n+\t\t    relocation += orig_rel.r_addend;\n \t\t    if (tls_type != 0)\n \t\t      {\n \t\t\tif (htab->elf.tls_sec == NULL)\n@@ -15723,6 +15699,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t      abort ();\n \n \t    relocation = got->output_section->vma + got->output_offset + off;\n+\t    addend = 0;\n \t    if (!(r_type == R_PPC64_GOT_PCREL34\n \t\t  || r_type == R_PPC64_GOT_TLSGD34\n \t\t  || r_type == R_PPC64_GOT_TLSLD34\n@@ -15760,15 +15737,10 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    if (plt_list)\n \t      {\n \t\tstruct plt_entry *ent;\n-\t\tbfd_vma sym_addend = orig_rel.r_addend;\n-\n-\t\tif (r_type == R_PPC64_PLT_PCREL34\n-\t\t    || r_type == R_PPC64_PLT_PCREL34_NOTOC)\n-\t\t  sym_addend = 0;\n \n \t\tfor (ent = *plt_list; ent != NULL; ent = ent->next)\n \t\t  if (ent->plt.offset != (bfd_vma) -1\n-\t\t      && ent->addend == sym_addend)\n+\t\t      && ent->addend == orig_rel.r_addend)\n \t\t    {\n \t\t      asection *plt;\n \t\t      bfd_vma got;\n@@ -15797,9 +15769,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t\t\t + htab->sec_info[input_section->id].toc_off);\n \t\t\t  relocation -= got;\n \t\t\t}\n-\t\t      if (r_type != R_PPC64_PLT_PCREL34\n-\t\t\t  && r_type != R_PPC64_PLT_PCREL34_NOTOC)\n-\t\t\taddend = 0;\n+\t\t      addend = 0;\n \t\t      unresolved_reloc = FALSE;\n \t\t      break;\n \t\t    }"
    }
  ]
}