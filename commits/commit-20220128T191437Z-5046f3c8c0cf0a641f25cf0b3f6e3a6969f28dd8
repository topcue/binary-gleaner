{
  "sha": "5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8",
  "node_id": "C_kwDOANOeidoAKDUwNDZmM2M4YzBjZjBhNjQxZjI1Y2YwYjNmNmUzYTY5NjlmMjhkZDg",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2022-01-28T19:14:37Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2022-01-28T19:14:37Z"
    },
    "message": "FreeBSD x86: Remove fallback for detecting signal trampolines by address.\n\nA few FreeBSD releases did not include the page holding the signal\ncode in core dumps.  As a workaround, a sysctl was used to fetch the\ndefault location of the signal code instead.  The youngest affected\nFreeBSD release is 10.1 released in November 2014 and EOLed in\nDecember 2016.  The fallback only works for native processes and would\nrequire a separate unwinder once the FreeBSD arches are converted to\nuse tramp_frame for signal frames.",
    "tree": {
      "sha": "8da64e4dd784788c5e5d442caa777ef6ff646858",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8da64e4dd784788c5e5d442caa777ef6ff646858"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bf84b776bda0945300f40432580156af99c000f6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf84b776bda0945300f40432580156af99c000f6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bf84b776bda0945300f40432580156af99c000f6"
    }
  ],
  "stats": {
    "total": 72,
    "additions": 0,
    "deletions": 72
  },
  "files": [
    {
      "sha": "3c79a40687b9c7364d3d39f8e5e9a9dc7dfb365d",
      "filename": "gdb/amd64-fbsd-nat.c",
      "status": "modified",
      "additions": 0,
      "deletions": 28,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8/gdb/amd64-fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8/gdb/amd64-fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-fbsd-nat.c?ref=5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8",
      "patch": "@@ -278,32 +278,4 @@ Please report this to <bug-gdb@gnu.org>.\"),\n     }\n \n   SC_RBP_OFFSET = offset;\n-\n-#ifdef KERN_PROC_SIGTRAMP\n-  /* Normally signal frames are detected via amd64fbsd_sigtramp_p.\n-     However, FreeBSD 9.2 through 10.1 do not include the page holding\n-     the signal code in core dumps.  These releases do provide a\n-     kern.proc.sigtramp.<pid> sysctl that returns the location of the\n-     signal trampoline for a running process.  We fetch the location\n-     of the current (gdb) process and use this to identify signal\n-     frames in core dumps from these releases.  Note that this only\n-     works for core dumps of 64-bit (FreeBSD/amd64) processes and does\n-     not handle core dumps of 32-bit (FreeBSD/i386) processes.  */\n-  {\n-    int mib[4];\n-    struct kinfo_sigtramp kst;\n-    size_t len;\n-\n-    mib[0] = CTL_KERN;\n-    mib[1] = KERN_PROC;\n-    mib[2] = KERN_PROC_SIGTRAMP;\n-    mib[3] = getpid ();\n-    len = sizeof (kst);\n-    if (sysctl (mib, 4, &kst, &len, NULL, 0) == 0)\n-      {\n-\tamd64fbsd_sigtramp_start_addr = (uintptr_t) kst.ksigtramp_start;\n-\tamd64fbsd_sigtramp_end_addr = (uintptr_t) kst.ksigtramp_end;\n-      }\n-  }\n-#endif\n }"
    },
    {
      "sha": "647d9d744a1d744853a823ea1fb69a5e9e458443",
      "filename": "gdb/amd64-fbsd-tdep.c",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8/gdb/amd64-fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8/gdb/amd64-fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-fbsd-tdep.c?ref=5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8",
      "patch": "@@ -117,10 +117,6 @@ static int amd64fbsd_r_reg_offset[] =\n   -1\t\t\t\t/* %gs */\n };\n \n-/* Location of the signal trampoline.  */\n-CORE_ADDR amd64fbsd_sigtramp_start_addr;\n-CORE_ADDR amd64fbsd_sigtramp_end_addr;\n-\n /* From <machine/signal.h>.  */\n int amd64fbsd_sc_reg_offset[] =\n {\n@@ -245,8 +241,6 @@ amd64fbsd_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n \t\t  amd64_target_description (X86_XSTATE_SSE_MASK, true));\n \n   tdep->sigtramp_p = amd64fbsd_sigtramp_p;\n-  tdep->sigtramp_start = amd64fbsd_sigtramp_start_addr;\n-  tdep->sigtramp_end = amd64fbsd_sigtramp_end_addr;\n   tdep->sigcontext_addr = amd64fbsd_sigcontext_addr;\n   tdep->sc_reg_offset = amd64fbsd_sc_reg_offset;\n   tdep->sc_num_regs = ARRAY_SIZE (amd64fbsd_sc_reg_offset);"
    },
    {
      "sha": "cdc1d6f6df4e3048cd2379e089259804a15c5608",
      "filename": "gdb/amd64-tdep.h",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8/gdb/amd64-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8/gdb/amd64-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-tdep.h?ref=5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8",
      "patch": "@@ -145,8 +145,6 @@ extern int amd64nbsd_r_reg_offset[];\n extern int amd64obsd_r_reg_offset[];\n \n /* Variables exported from amd64-fbsd-tdep.c.  */\n-extern CORE_ADDR amd64fbsd_sigtramp_start_addr;\n-extern CORE_ADDR amd64fbsd_sigtramp_end_addr;\n extern int amd64fbsd_sc_reg_offset[];\n \n #endif /* amd64-tdep.h */"
    },
    {
      "sha": "75fe5e78f203ac6a25907483de6c489f35e53e0b",
      "filename": "gdb/i386-fbsd-nat.c",
      "status": "modified",
      "additions": 0,
      "deletions": 26,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8/gdb/i386-fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8/gdb/i386-fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-fbsd-nat.c?ref=5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8",
      "patch": "@@ -182,30 +182,4 @@ _initialize_i386fbsd_nat ()\n \n   /* Support debugging kernel virtual memory images.  */\n   bsd_kvm_add_target (i386fbsd_supply_pcb);\n-\n-#ifdef KERN_PROC_SIGTRAMP\n-  /* Normally signal frames are detected via i386fbsd_sigtramp_p.\n-     However, FreeBSD 9.2 through 10.1 do not include the page holding\n-     the signal code in core dumps.  These releases do provide a\n-     kern.proc.sigtramp.<pid> sysctl that returns the location of the\n-     signal trampoline for a running process.  We fetch the location\n-     of the current (gdb) process and use this to identify signal\n-     frames in core dumps from these releases.  */\n-  {\n-    int mib[4];\n-    struct kinfo_sigtramp kst;\n-    size_t len;\n-\n-    mib[0] = CTL_KERN;\n-    mib[1] = KERN_PROC;\n-    mib[2] = KERN_PROC_SIGTRAMP;\n-    mib[3] = getpid ();\n-    len = sizeof (kst);\n-    if (sysctl (mib, 4, &kst, &len, NULL, 0) == 0)\n-      {\n-\ti386fbsd_sigtramp_start_addr = (uintptr_t) kst.ksigtramp_start;\n-\ti386fbsd_sigtramp_end_addr = (uintptr_t) kst.ksigtramp_end;\n-      }\n-  }\n-#endif\n }"
    },
    {
      "sha": "c3f02d1d2271d4142e1fcd1ff20f87bfafaee31a",
      "filename": "gdb/i386-fbsd-tdep.c",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8/gdb/i386-fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8/gdb/i386-fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-fbsd-tdep.c?ref=5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8",
      "patch": "@@ -122,10 +122,6 @@ static int i386fbsd_r_reg_offset[] =\n   2 * 4, 1 * 4, 0 * 4, 18 * 4\t/* %ds, %es, %fs, %gs */\n };\n \n-/* Sigtramp routine location.  */\n-CORE_ADDR i386fbsd_sigtramp_start_addr;\n-CORE_ADDR i386fbsd_sigtramp_end_addr;\n-\n /* From <machine/signal.h>.  */\n int i386fbsd_sc_reg_offset[] =\n {\n@@ -292,10 +288,6 @@ i386fbsd_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n \n   tdep->sigtramp_p = i386fbsd_sigtramp_p;\n \n-  /* FreeBSD uses a different memory layout.  */\n-  tdep->sigtramp_start = i386fbsd_sigtramp_start_addr;\n-  tdep->sigtramp_end = i386fbsd_sigtramp_end_addr;\n-\n   /* FreeBSD has a more complete `struct sigcontext'.  */\n   tdep->sc_reg_offset = i386fbsd_sc_reg_offset;\n   tdep->sc_num_regs = ARRAY_SIZE (i386fbsd_sc_reg_offset);"
    },
    {
      "sha": "62d94da53b03a0666051a337c2dd450fcd579048",
      "filename": "gdb/i386-tdep.h",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8/gdb/i386-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8/gdb/i386-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.h?ref=5046f3c8c0cf0a641f25cf0b3f6e3a6969f28dd8",
      "patch": "@@ -472,8 +472,6 @@ extern int i386_mpx_enabled (void);\n /* Functions and variables exported from i386-bsd-tdep.c.  */\n \n extern void i386bsd_init_abi (struct gdbarch_info, struct gdbarch *);\n-extern CORE_ADDR i386fbsd_sigtramp_start_addr;\n-extern CORE_ADDR i386fbsd_sigtramp_end_addr;\n extern CORE_ADDR i386obsd_sigtramp_start_addr;\n extern CORE_ADDR i386obsd_sigtramp_end_addr;\n extern int i386fbsd_sc_reg_offset[];"
    }
  ]
}