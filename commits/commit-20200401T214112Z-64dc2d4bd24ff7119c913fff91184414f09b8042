{
  "sha": "64dc2d4bd24ff7119c913fff91184414f09b8042",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjRkYzJkNGJkMjRmZjcxMTljOTEzZmZmOTExODQ0MTRmMDliODA0Mg==",
  "commit": {
    "author": {
      "name": "Bernd Edlinger",
      "email": "bernd.edlinger@hotmail.de",
      "date": "2020-03-12T10:52:34Z"
    },
    "committer": {
      "name": "Bernd Edlinger",
      "email": "bernd.edlinger@hotmail.de",
      "date": "2020-04-01T21:41:12Z"
    },
    "message": "Fix an undefined behavior in record_line\n\nAdditionally do not completely remove symbols\nat the same PC than the end marker, instead\nmake them non-is-stmt breakpoints.\n\n2020-04-01  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n\n\t* buildsym.c (record_line): Fix undefined behavior and preserve\n\tlines at eof.",
    "tree": {
      "sha": "45b015bc0652241880bea0b7200d89aba6900f74",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/45b015bc0652241880bea0b7200d89aba6900f74"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/64dc2d4bd24ff7119c913fff91184414f09b8042",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64dc2d4bd24ff7119c913fff91184414f09b8042",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/64dc2d4bd24ff7119c913fff91184414f09b8042",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64dc2d4bd24ff7119c913fff91184414f09b8042/comments",
  "author": {
    "login": "bernd-edlinger",
    "id": 17638929,
    "node_id": "MDQ6VXNlcjE3NjM4OTI5",
    "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bernd-edlinger",
    "html_url": "https://github.com/bernd-edlinger",
    "followers_url": "https://api.github.com/users/bernd-edlinger/followers",
    "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions",
    "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs",
    "repos_url": "https://api.github.com/users/bernd-edlinger/repos",
    "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bernd-edlinger",
    "id": 17638929,
    "node_id": "MDQ6VXNlcjE3NjM4OTI5",
    "avatar_url": "https://avatars.githubusercontent.com/u/17638929?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bernd-edlinger",
    "html_url": "https://github.com/bernd-edlinger",
    "followers_url": "https://api.github.com/users/bernd-edlinger/followers",
    "following_url": "https://api.github.com/users/bernd-edlinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/bernd-edlinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bernd-edlinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bernd-edlinger/subscriptions",
    "organizations_url": "https://api.github.com/users/bernd-edlinger/orgs",
    "repos_url": "https://api.github.com/users/bernd-edlinger/repos",
    "events_url": "https://api.github.com/users/bernd-edlinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bernd-edlinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bbe3dc410bd5c29955ef3409f9fee9e7c73b2c49",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bbe3dc410bd5c29955ef3409f9fee9e7c73b2c49",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bbe3dc410bd5c29955ef3409f9fee9e7c73b2c49"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 23,
    "deletions": 16
  },
  "files": [
    {
      "sha": "d5715a8fa00567096cccfe54adbd978d3aae81b3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64dc2d4bd24ff7119c913fff91184414f09b8042/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64dc2d4bd24ff7119c913fff91184414f09b8042/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=64dc2d4bd24ff7119c913fff91184414f09b8042",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-01  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n+\n+\t* buildsym.c (record_line): Fix undefined behavior and preserve\n+\tlines at eof.\n+\n 2020-04-01  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* buildsym.c (record_line): Fix the resizing condition."
    },
    {
      "sha": "46c5bb1477b6e7a952d09b4cd611868b31a69652",
      "filename": "gdb/buildsym.c",
      "status": "modified",
      "additions": 18,
      "deletions": 16,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64dc2d4bd24ff7119c913fff91184414f09b8042/gdb/buildsym.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64dc2d4bd24ff7119c913fff91184414f09b8042/gdb/buildsym.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/buildsym.c?ref=64dc2d4bd24ff7119c913fff91184414f09b8042",
      "patch": "@@ -705,27 +705,29 @@ buildsym_compunit::record_line (struct subfile *subfile, int line,\n \t\t      * sizeof (struct linetable_entry))));\n     }\n \n-  /* Normally, we treat lines as unsorted.  But the end of sequence\n-     marker is special.  We sort line markers at the same PC by line\n-     number, so end of sequence markers (which have line == 0) appear\n-     first.  This is right if the marker ends the previous function,\n-     and there is no padding before the next function.  But it is\n-     wrong if the previous line was empty and we are now marking a\n-     switch to a different subfile.  We must leave the end of sequence\n-     marker at the end of this group of lines, not sort the empty line\n-     to after the marker.  The easiest way to accomplish this is to\n-     delete any empty lines from our table, if they are followed by\n-     end of sequence markers.  All we lose is the ability to set\n-     breakpoints at some lines which contain no instructions\n-     anyway.  */\n+  /* The end of sequence marker is special.  We need to reset the\n+     is_stmt flag on previous lines at the same PC, otherwise these\n+     lines may cause problems since they might be at the same address\n+     as the following function.  For instance suppose a function calls\n+     abort there is no reason to emit a ret after that point (no joke).\n+     So the label may be at the same address where the following\n+     function begins.  A similar problem appears if a label is at the\n+     same address where an inline function ends we cannot reliably tell\n+     if this is considered part of the inline function or the calling\n+     program or even the next inline function, so stack traces may\n+     give surprising results.  Expect gdb.cp/step-and-next-inline.exp\n+     to fail if these lines are not modified here.  */\n   if (line == 0 && subfile->line_vector->nitems > 0)\n     {\n-      e = subfile->line_vector->item + subfile->line_vector->nitems - 1;\n-      while (subfile->line_vector->nitems > 0 && e->pc == pc)\n+      e = subfile->line_vector->item + subfile->line_vector->nitems;\n+      do\n \t{\n \t  e--;\n-\t  subfile->line_vector->nitems--;\n+\t  if (e->pc != pc || e->line == 0)\n+\t    break;\n+\t  e->is_stmt = 0;\n \t}\n+      while (e > subfile->line_vector->item);\n     }\n \n   e = subfile->line_vector->item + subfile->line_vector->nitems++;"
    }
  ]
}