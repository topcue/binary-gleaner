{
  "sha": "3528c362d9471524cfe8a76c692081838b292d64",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzUyOGMzNjJkOTQ3MTUyNGNmZThhNzZjNjkyMDgxODM4YjI5MmQ2NA==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-11-08T08:05:36Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-11-08T08:05:36Z"
    },
    "message": "x86: convert RegSIMD and RegMMX from bitfield to enumerator\n\nThis is to further shrink the operand type representation.",
    "tree": {
      "sha": "b6bf9bd61e9beddc1e70c8c8f646e96940d6f957",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b6bf9bd61e9beddc1e70c8c8f646e96940d6f957"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3528c362d9471524cfe8a76c692081838b292d64",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3528c362d9471524cfe8a76c692081838b292d64",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3528c362d9471524cfe8a76c692081838b292d64",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3528c362d9471524cfe8a76c692081838b292d64/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4a5c67ed841db42c7be13cb2991ece3b3fc4bf75",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4a5c67ed841db42c7be13cb2991ece3b3fc4bf75"
    }
  ],
  "stats": {
    "total": 38457,
    "additions": 19240,
    "deletions": 19217
  },
  "files": [
    {
      "sha": "1ff0c2598b74c7e60429a3bf40177490c4bd813d",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3528c362d9471524cfe8a76c692081838b292d64/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3528c362d9471524cfe8a76c692081838b292d64/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=3528c362d9471524cfe8a76c692081838b292d64",
      "patch": "@@ -1,3 +1,11 @@\n+2019-11-08  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (match_mem_size, operand_size_match,\n+\toperand_type_register_match, pi, check_VecOperands, match_template,\n+\tcheck_byte_reg, check_long_reg, check_qword_reg, process_operands,\n+\tbuild_modrm_byte, parse_real_register): Use \"class\" instead of\n+\t\"regsimd\" / \"regmmx\" fields.\n+\n 2019-11-08  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (pi, check_byte_reg, build_modrm_byte,"
    },
    {
      "sha": "20cd1adf85ba9f4b3de24275863e65beab00d1f2",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 45,
      "deletions": 43,
      "changes": 88,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3528c362d9471524cfe8a76c692081838b292d64/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3528c362d9471524cfe8a76c692081838b292d64/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=3528c362d9471524cfe8a76c692081838b292d64",
      "patch": "@@ -2030,7 +2030,7 @@ match_mem_size (const insn_template *t, unsigned int wanted,\n \t\t  operands at the same time, some special casing is needed\n \t\t  here.  Also for v{,p}broadcast*, {,v}pmov{s,z}*, and\n \t\t  down-conversion vpmov*.  */\n-\t       || ((t->operand_types[wanted].bitfield.regsimd\n+\t       || ((t->operand_types[wanted].bitfield.class == RegSIMD\n \t\t    && !t->opcode_modifier.broadcast\n \t\t    && (t->operand_types[wanted].bitfield.byte\n \t\t\t|| t->operand_types[wanted].bitfield.word\n@@ -2065,7 +2065,8 @@ operand_size_match (const insn_template *t)\n   /* Check memory and accumulator operand size.  */\n   for (j = 0; j < i.operands; j++)\n     {\n-      if (i.types[j].bitfield.class != Reg && !i.types[j].bitfield.regsimd\n+      if (i.types[j].bitfield.class != Reg\n+\t  && i.types[j].bitfield.class != RegSIMD\n \t  && t->operand_types[j].bitfield.anysize)\n \tcontinue;\n \n@@ -2076,7 +2077,7 @@ operand_size_match (const insn_template *t)\n \t  break;\n \t}\n \n-      if (t->operand_types[j].bitfield.regsimd\n+      if (t->operand_types[j].bitfield.class == RegSIMD\n \t  && !match_simd_size (t, j, j))\n \t{\n \t  match = 0;\n@@ -2116,7 +2117,7 @@ operand_size_match (const insn_template *t)\n \t  && !match_operand_size (t, j, given))\n \tgoto mismatch;\n \n-      if (t->operand_types[j].bitfield.regsimd\n+      if (t->operand_types[j].bitfield.class == RegSIMD\n \t  && !match_simd_size (t, j, given))\n \tgoto mismatch;\n \n@@ -2173,17 +2174,17 @@ operand_type_register_match (i386_operand_type g0,\n \t\t\t     i386_operand_type t1)\n {\n   if (g0.bitfield.class != Reg\n-      && !g0.bitfield.regsimd\n+      && g0.bitfield.class != RegSIMD\n       && (!operand_type_check (g0, anymem)\n \t  || g0.bitfield.unspecified\n-\t  || !t0.bitfield.regsimd))\n+\t  || t0.bitfield.class != RegSIMD))\n     return 1;\n \n   if (g1.bitfield.class != Reg\n-      && !g1.bitfield.regsimd\n+      && g1.bitfield.class != RegSIMD\n       && (!operand_type_check (g1, anymem)\n \t  || g1.bitfield.unspecified\n-\t  || !t1.bitfield.regsimd))\n+\t  || t1.bitfield.class != RegSIMD))\n     return 1;\n \n   if (g0.bitfield.byte == g1.bitfield.byte\n@@ -3046,8 +3047,8 @@ pi (const char *line, i386_insn *x)\n       pt (x->types[j]);\n       fprintf (stdout, \"\\n\");\n       if (x->types[j].bitfield.class == Reg\n-\t  || x->types[j].bitfield.regmmx\n-\t  || x->types[j].bitfield.regsimd\n+\t  || x->types[j].bitfield.class == RegMMX\n+\t  || x->types[j].bitfield.class == RegSIMD\n \t  || x->types[j].bitfield.class == SReg\n \t  || x->types[j].bitfield.class == RegCR\n \t  || x->types[j].bitfield.class == RegDR\n@@ -5380,10 +5381,10 @@ check_VecOperands (const insn_template *t)\n       gas_assert (i.reg_operands == 2 || i.mask);\n       if (i.reg_operands == 2 && !i.mask)\n \t{\n-\t  gas_assert (i.types[0].bitfield.regsimd);\n+\t  gas_assert (i.types[0].bitfield.class == RegSIMD);\n \t  gas_assert (i.types[0].bitfield.xmmword\n \t\t      || i.types[0].bitfield.ymmword);\n-\t  gas_assert (i.types[2].bitfield.regsimd);\n+\t  gas_assert (i.types[2].bitfield.class == RegSIMD);\n \t  gas_assert (i.types[2].bitfield.xmmword\n \t\t      || i.types[2].bitfield.ymmword);\n \t  if (operand_check == check_none)\n@@ -5404,7 +5405,7 @@ check_VecOperands (const insn_template *t)\n \t}\n       else if (i.reg_operands == 1 && i.mask)\n \t{\n-\t  if (i.types[1].bitfield.regsimd\n+\t  if (i.types[1].bitfield.class == RegSIMD\n \t      && (i.types[1].bitfield.xmmword\n \t          || i.types[1].bitfield.ymmword\n \t          || i.types[1].bitfield.zmmword)\n@@ -5595,7 +5596,7 @@ check_VecOperands (const insn_template *t)\n \t\telse if (!i.types[op].bitfield.unspecified)\n \t\t  type = &i.types[op];\n \t      }\n-\t    else if (i.types[op].bitfield.regsimd\n+\t    else if (i.types[op].bitfield.class == RegSIMD\n \t\t     && t->opcode_modifier.evex != EVEXLIG)\n \t      {\n \t\tif (i.types[op].bitfield.zmmword)\n@@ -5801,10 +5802,10 @@ match_template (char mnem_suffix)\n \t         && !t->opcode_modifier.broadcast\n \t\t && !intel_float_operand (t->name))\n \t      : intel_float_operand (t->name) != 2)\n-\t  && ((!operand_types[0].bitfield.regmmx\n-\t       && !operand_types[0].bitfield.regsimd)\n-\t      || (!operand_types[t->operands > 1].bitfield.regmmx\n-\t\t  && !operand_types[t->operands > 1].bitfield.regsimd))\n+\t  && ((operand_types[0].bitfield.class != RegMMX\n+\t       && operand_types[0].bitfield.class != RegSIMD)\n+\t      || (operand_types[t->operands > 1].bitfield.class != RegMMX\n+\t\t  && operand_types[t->operands > 1].bitfield.class != RegSIMD))\n \t  && (t->base_opcode != 0x0fc7\n \t      || t->extension_opcode != 1 /* cmpxchg8b */))\n \tcontinue;\n@@ -5816,10 +5817,11 @@ match_template (char mnem_suffix)\n \t\t   ? (!t->opcode_modifier.ignoresize\n \t\t      && !intel_float_operand (t->name))\n \t\t   : intel_float_operand (t->name) != 2)\n-\t       && ((!operand_types[0].bitfield.regmmx\n-\t\t    && !operand_types[0].bitfield.regsimd)\n-\t\t   || (!operand_types[t->operands > 1].bitfield.regmmx\n-\t\t       && !operand_types[t->operands > 1].bitfield.regsimd)))\n+\t       && ((operand_types[0].bitfield.class != RegMMX\n+\t\t    && operand_types[0].bitfield.class != RegSIMD)\n+\t\t   || (operand_types[t->operands > 1].bitfield.class != RegMMX\n+\t\t       && operand_types[t->operands > 1].bitfield.class\n+\t\t\t  != RegSIMD)))\n \tcontinue;\n \n       /* Do not verify operands when there are none.  */\n@@ -5995,8 +5997,8 @@ match_template (char mnem_suffix)\n \t\tfound_reverse_match = Opcode_FloatD;\n \t      else if (operand_types[0].bitfield.xmmword\n \t\t       || operand_types[i.operands - 1].bitfield.xmmword\n-\t\t       || operand_types[0].bitfield.regmmx\n-\t\t       || operand_types[i.operands - 1].bitfield.regmmx\n+\t\t       || operand_types[0].bitfield.class == RegMMX\n+\t\t       || operand_types[i.operands - 1].bitfield.class == RegMMX\n \t\t       || is_any_vex_encoding(t))\n \t\tfound_reverse_match = (t->base_opcode & 0xee) != 0x6e\n \t\t\t\t      ? Opcode_SIMD_FloatD : Opcode_SIMD_IntD;\n@@ -6602,8 +6604,8 @@ check_byte_reg (void)\n \t}\n       /* Any other register is bad.  */\n       if (i.types[op].bitfield.class == Reg\n-\t  || i.types[op].bitfield.regmmx\n-\t  || i.types[op].bitfield.regsimd\n+\t  || i.types[op].bitfield.class == RegMMX\n+\t  || i.types[op].bitfield.class == RegSIMD\n \t  || i.types[op].bitfield.class == SReg\n \t  || i.types[op].bitfield.class == RegCR\n \t  || i.types[op].bitfield.class == RegDR\n@@ -6675,7 +6677,7 @@ check_long_reg (void)\n       {\n \tif (intel_syntax\n \t    && i.tm.opcode_modifier.toqword\n-\t    && !i.types[0].bitfield.regsimd)\n+\t    && i.types[0].bitfield.class != RegSIMD)\n \t  {\n \t    /* Convert to QWORD.  We want REX byte. */\n \t    i.suffix = QWORD_MNEM_SUFFIX;\n@@ -6726,7 +6728,7 @@ check_qword_reg (void)\n \t   lowering is more complicated.  */\n \tif (intel_syntax\n \t    && i.tm.opcode_modifier.todword\n-\t    && !i.types[0].bitfield.regsimd)\n+\t    && i.types[0].bitfield.class != RegSIMD)\n \t  {\n \t    /* Convert to DWORD.  We don't want REX byte. */\n \t    i.suffix = LONG_MNEM_SUFFIX;\n@@ -6903,7 +6905,7 @@ process_operands (void)\n \t      /* Keep xmm0 for instructions with VEX prefix and 3\n \t\t sources.  */\n \t      i.tm.operand_types[0].bitfield.acc = 0;\n-\t      i.tm.operand_types[0].bitfield.regsimd = 1;\n+\t      i.tm.operand_types[0].bitfield.class = RegSIMD;\n \t      goto duplicate;\n \t    }\n \t  else\n@@ -6993,7 +6995,7 @@ process_operands (void)\n       unsigned int regnum, first_reg_in_group, last_reg_in_group;\n \n       /* The second operand must be {x,y,z}mmN, where N is a multiple of 4. */\n-      gas_assert (i.operands >= 2 && i.types[1].bitfield.regsimd);\n+      gas_assert (i.operands >= 2 && i.types[1].bitfield.class == RegSIMD);\n       regnum = register_number (i.op[1].regs);\n       first_reg_in_group = regnum & ~3;\n       last_reg_in_group = first_reg_in_group + 3;\n@@ -7138,7 +7140,7 @@ build_modrm_byte (void)\n \t\t   || (i.reg_operands == 3 && i.mem_operands == 1))\n \t\t  && i.tm.opcode_modifier.vexvvvv == VEXXDS\n \t\t  && i.tm.opcode_modifier.vexw\n-\t\t  && i.tm.operand_types[dest].bitfield.regsimd);\n+\t\t  && i.tm.operand_types[dest].bitfield.class == RegSIMD);\n \n       /* If VexW1 is set, the first non-immediate operand is the source and\n \t the second non-immediate one is encoded in the immediate operand.  */\n@@ -7162,7 +7164,7 @@ build_modrm_byte (void)\n \t  i.types[i.operands] = imm8;\n \t  i.operands++;\n \n-\t  gas_assert (i.tm.operand_types[reg_slot].bitfield.regsimd);\n+\t  gas_assert (i.tm.operand_types[reg_slot].bitfield.class == RegSIMD);\n \t  exp->X_op = O_constant;\n \t  exp->X_add_number = register_number (i.op[reg_slot].regs) << 4;\n \t  gas_assert ((i.op[reg_slot].regs->reg_flags & RegVRex) == 0);\n@@ -7176,13 +7178,13 @@ build_modrm_byte (void)\n \t  /* Turn on Imm8 again so that output_imm will generate it.  */\n \t  i.types[0].bitfield.imm8 = 1;\n \n-\t  gas_assert (i.tm.operand_types[reg_slot].bitfield.regsimd);\n+\t  gas_assert (i.tm.operand_types[reg_slot].bitfield.class == RegSIMD);\n \t  i.op[0].imms->X_add_number\n \t      |= register_number (i.op[reg_slot].regs) << 4;\n \t  gas_assert ((i.op[reg_slot].regs->reg_flags & RegVRex) == 0);\n \t}\n \n-      gas_assert (i.tm.operand_types[nds].bitfield.regsimd);\n+      gas_assert (i.tm.operand_types[nds].bitfield.class == RegSIMD);\n       i.vex.register_specifier = i.op[nds].regs;\n     }\n   else\n@@ -7304,7 +7306,7 @@ build_modrm_byte (void)\n \t      if ((dest + 1) >= i.operands\n \t\t  || ((op.bitfield.class != Reg\n \t\t       || (!op.bitfield.dword && !op.bitfield.qword))\n-\t\t      && !op.bitfield.regsimd\n+\t\t      && op.bitfield.class != RegSIMD\n \t\t      && !operand_type_equal (&op, &regmask)))\n \t\tabort ();\n \t      i.vex.register_specifier = i.op[vvvv].regs;\n@@ -7324,11 +7326,11 @@ build_modrm_byte (void)\n \t{\n \t  i.rm.reg = i.op[dest].regs->reg_num;\n \t  i.rm.regmem = i.op[source].regs->reg_num;\n-\t  if (i.op[dest].regs->reg_type.bitfield.regmmx\n-\t       || i.op[source].regs->reg_type.bitfield.regmmx)\n+\t  if (i.op[dest].regs->reg_type.bitfield.class == RegMMX\n+\t       || i.op[source].regs->reg_type.bitfield.class == RegMMX)\n \t    i.has_regmmx = TRUE;\n-\t  else if (i.op[dest].regs->reg_type.bitfield.regsimd\n-\t\t   || i.op[source].regs->reg_type.bitfield.regsimd)\n+\t  else if (i.op[dest].regs->reg_type.bitfield.class == RegSIMD\n+\t\t   || i.op[source].regs->reg_type.bitfield.class == RegSIMD)\n \t    {\n \t      if (i.types[dest].bitfield.zmmword\n \t\t  || i.types[source].bitfield.zmmword)\n@@ -7687,7 +7689,7 @@ build_modrm_byte (void)\n \t\t  || i.types[op].bitfield.class == RegDR\n \t\t  || i.types[op].bitfield.class == RegTR)\n \t\tbreak;\n-\t      if (i.types[op].bitfield.regsimd)\n+\t      if (i.types[op].bitfield.class == RegSIMD)\n \t\t{\n \t\t  if (i.types[op].bitfield.zmmword)\n \t\t    i.has_regzmm = TRUE;\n@@ -7697,7 +7699,7 @@ build_modrm_byte (void)\n \t\t    i.has_regxmm = TRUE;\n \t\t  break;\n \t\t}\n-\t      if (i.types[op].bitfield.regmmx)\n+\t      if (i.types[op].bitfield.class == RegMMX)\n \t\t{\n \t\t  i.has_regmmx = TRUE;\n \t\t  break;\n@@ -7763,7 +7765,7 @@ build_modrm_byte (void)\n \n \t      if ((type->bitfield.class != Reg\n \t\t   || (!type->bitfield.dword && !type->bitfield.qword))\n-\t\t  && !type->bitfield.regsimd\n+\t\t  && type->bitfield.class != RegSIMD\n \t\t  && !operand_type_equal (type, &regmask))\n \t\tabort ();\n \n@@ -10928,7 +10930,7 @@ parse_real_register (char *reg_string, char **end_op)\n       && !cpu_arch_flags.bitfield.cpui386)\n     return (const reg_entry *) NULL;\n \n-  if (r->reg_type.bitfield.regmmx && !cpu_arch_flags.bitfield.cpummx)\n+  if (r->reg_type.bitfield.class == RegMMX && !cpu_arch_flags.bitfield.cpummx)\n     return (const reg_entry *) NULL;\n \n   if (!cpu_arch_flags.bitfield.cpuavx512f)"
    },
    {
      "sha": "9e771dbbf7d26c9a098a35b96ca5aa902cd4d24c",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3528c362d9471524cfe8a76c692081838b292d64/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3528c362d9471524cfe8a76c692081838b292d64/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=3528c362d9471524cfe8a76c692081838b292d64",
      "patch": "@@ -1,3 +1,19 @@\n+2019-11-08  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-gen.c (operand_type_init): Add Class= to\n+\tOPERAND_TYPE_REGMMX, OPERAND_TYPE_REGXMM, OPERAND_TYPE_REGYMM, and\n+\tOPERAND_TYPE_REGZMM entries.\n+\t(operand_classes): Add RegMMX and RegSIMD entries.\n+\t(operand_types): Drop RegMMX and RegSIMD entries.\n+\t* i386-opc.h (enum operand_class): Add RegMMX and RegSIMD.\n+\t(RegMMX, RegSIMD): Delete.\n+\t(union i386_operand_type): Remove regmmx and regsimd fields.\n+\t* i386-opc.tbl (RegMMX): Define.\n+\t(RegXMM, RegYMM, RegZMM): Add Class=.\n+\t* i386-reg.tbl: Replace RegMMX by Class=RegMMX and RegSIMD by\n+\tClass=RegSIMD.\n+\t* i386-init.h, i386-tbl.h: Re-generate.\n+\n 2019-11-08  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-gen.c (operand_type_init): Add Class= to"
    },
    {
      "sha": "9844225cd023f9b69e21fd1c237b04b0a77162c9",
      "filename": "opcodes/i386-gen.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3528c362d9471524cfe8a76c692081838b292d64/opcodes/i386-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3528c362d9471524cfe8a76c692081838b292d64/opcodes/i386-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-gen.c?ref=3528c362d9471524cfe8a76c692081838b292d64",
      "patch": "@@ -440,13 +440,13 @@ static initializer operand_type_init[] =\n   { \"OPERAND_TYPE_JUMPABSOLUTE\",\n     \"JumpAbsolute\" },\n   { \"OPERAND_TYPE_REGMMX\",\n-    \"RegMMX\" },\n+    \"Class=RegMMX\" },\n   { \"OPERAND_TYPE_REGXMM\",\n-    \"RegSIMD|Xmmword\" },\n+    \"Class=RegSIMD|Xmmword\" },\n   { \"OPERAND_TYPE_REGYMM\",\n-    \"RegSIMD|Ymmword\" },\n+    \"Class=RegSIMD|Ymmword\" },\n   { \"OPERAND_TYPE_REGZMM\",\n-    \"RegSIMD|Zmmword\" },\n+    \"Class=RegSIMD|Zmmword\" },\n   { \"OPERAND_TYPE_REGMASK\",\n     \"RegMask\" },\n   { \"OPERAND_TYPE_ESSEG\",\n@@ -687,14 +687,14 @@ static const struct {\n   CLASS (RegCR),\n   CLASS (RegDR),\n   CLASS (RegTR),\n+  CLASS (RegMMX),\n+  CLASS (RegSIMD),\n };\n \n #undef CLASS\n \n static bitfield operand_types[] =\n {\n-  BITFIELD (RegMMX),\n-  BITFIELD (RegSIMD),\n   BITFIELD (RegMask),\n   BITFIELD (Imm1),\n   BITFIELD (Imm8),"
    },
    {
      "sha": "a9cc90cce05d196b0fa986b5191b992170c0b37b",
      "filename": "opcodes/i386-init.h",
      "status": "modified",
      "additions": 87,
      "deletions": 87,
      "changes": 174,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3528c362d9471524cfe8a76c692081838b292d64/opcodes/i386-init.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3528c362d9471524cfe8a76c692081838b292d64/opcodes/i386-init.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-init.h?ref=3528c362d9471524cfe8a76c692081838b292d64",
      "patch": "@@ -1365,196 +1365,196 @@\n \n #define OPERAND_TYPE_NONE \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG8 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG16 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG32 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG64 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM1 \\\n-  { { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM8 \\\n-  { { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM8S \\\n-  { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32S \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_BASEINDEX \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP8 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP16 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP32S \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_INOUTPORTREG \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_SHIFTCOUNT \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_CONTROL \\\n   { { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_TEST \\\n   { { 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DEBUG \\\n   { { 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_FLOATREG \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_FLOATACC \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_SREG \\\n   { { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_JUMPABSOLUTE \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGMMX \\\n-  { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGXMM \\\n-  { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } }\n+  { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGYMM \\\n-  { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } }\n+  { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGZMM \\\n-  { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } }\n+  { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGMASK \\\n-  { { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ESSEG \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC8 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n-      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n+      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC16 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n-      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n+      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n-      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n+      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP16_32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ANYDISP \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32S \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32_32S \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_DISP32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM64_DISP64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_64_DISP32 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_64_DISP32_64 \\\n-  { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ANYIMM \\\n-  { { 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+  { { 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGBND \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0 } }"
    },
    {
      "sha": "197c38803dfdef3d2c5d53c4ca2d17ff17a12fca",
      "filename": "opcodes/i386-opc.h",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3528c362d9471524cfe8a76c692081838b292d64/opcodes/i386-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3528c362d9471524cfe8a76c692081838b292d64/opcodes/i386-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.h?ref=3528c362d9471524cfe8a76c692081838b292d64",
      "patch": "@@ -713,6 +713,8 @@ enum operand_class\n   RegCR, /* Control register */\n   RegDR, /* Debug register */\n   RegTR, /* Test register */\n+  RegMMX, /* MMX register */\n+  RegSIMD, /* XMM/YMM/ZMM registers, distinguished by operand size */\n };\n \n /* Position of operand_type bits.  */\n@@ -721,10 +723,6 @@ enum\n {\n   /* Class */\n   Class = CLASS_WIDTH - 1,\n-  /* MMX register */\n-  RegMMX,\n-  /* Vector registers */\n-  RegSIMD,\n   /* Vector Mask registers */\n   RegMask,\n   /* 1 bit immediate */\n@@ -814,8 +812,6 @@ typedef union i386_operand_type\n   struct\n     {\n       unsigned int class:CLASS_WIDTH;\n-      unsigned int regmmx:1;\n-      unsigned int regsimd:1;\n       unsigned int regmask:1;\n       unsigned int imm1:1;\n       unsigned int imm8:1;"
    },
    {
      "sha": "0820a2ea79d2f1ffd1509f0709267a2b91b917a7",
      "filename": "opcodes/i386-opc.tbl",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3528c362d9471524cfe8a76c692081838b292d64/opcodes/i386-opc.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3528c362d9471524cfe8a76c692081838b292d64/opcodes/i386-opc.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.tbl?ref=3528c362d9471524cfe8a76c692081838b292d64",
      "patch": "@@ -36,9 +36,10 @@\n #define Debug   Class=RegDR\n #define Test    Class=RegTR\n \n-#define RegXMM RegSIMD|Xmmword\n-#define RegYMM RegSIMD|Ymmword\n-#define RegZMM RegSIMD|Zmmword\n+#define RegMMX Class=RegMMX\n+#define RegXMM Class=RegSIMD|Xmmword\n+#define RegYMM Class=RegSIMD|Ymmword\n+#define RegZMM Class=RegSIMD|Zmmword\n \n #define Size16 Size=SIZE16\n #define Size32 Size=SIZE32"
    },
    {
      "sha": "fb2330e82c5ea09f10e74d8177bb6e77c297240b",
      "filename": "opcodes/i386-reg.tbl",
      "status": "modified",
      "additions": 104,
      "deletions": 104,
      "changes": 208,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3528c362d9471524cfe8a76c692081838b292d64/opcodes/i386-reg.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3528c362d9471524cfe8a76c692081838b292d64/opcodes/i386-reg.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-reg.tbl?ref=3528c362d9471524cfe8a76c692081838b292d64",
      "patch": "@@ -172,112 +172,112 @@ tr5, Class=RegTR, 0, 5, Dw2Inval, Dw2Inval\n tr6, Class=RegTR, 0, 6, Dw2Inval, Dw2Inval\n tr7, Class=RegTR, 0, 7, Dw2Inval, Dw2Inval\n // MMX and simd registers.\n-mm0, RegMMX, 0, 0, 29, 41\n-mm1, RegMMX, 0, 1, 30, 42\n-mm2, RegMMX, 0, 2, 31, 43\n-mm3, RegMMX, 0, 3, 32, 44\n-mm4, RegMMX, 0, 4, 33, 45\n-mm5, RegMMX, 0, 5, 34, 46\n-mm6, RegMMX, 0, 6, 35, 47\n-mm7, RegMMX, 0, 7, 36, 48\n-xmm0, RegSIMD|Acc|Xmmword, 0, 0, 21, 17\n-xmm1, RegSIMD|Xmmword, 0, 1, 22, 18\n-xmm2, RegSIMD|Xmmword, 0, 2, 23, 19\n-xmm3, RegSIMD|Xmmword, 0, 3, 24, 20\n-xmm4, RegSIMD|Xmmword, 0, 4, 25, 21\n-xmm5, RegSIMD|Xmmword, 0, 5, 26, 22\n-xmm6, RegSIMD|Xmmword, 0, 6, 27, 23\n-xmm7, RegSIMD|Xmmword, 0, 7, 28, 24\n-xmm8, RegSIMD|Xmmword, RegRex, 0, Dw2Inval, 25\n-xmm9, RegSIMD|Xmmword, RegRex, 1, Dw2Inval, 26\n-xmm10, RegSIMD|Xmmword, RegRex, 2, Dw2Inval, 27\n-xmm11, RegSIMD|Xmmword, RegRex, 3, Dw2Inval, 28\n-xmm12, RegSIMD|Xmmword, RegRex, 4, Dw2Inval, 29\n-xmm13, RegSIMD|Xmmword, RegRex, 5, Dw2Inval, 30\n-xmm14, RegSIMD|Xmmword, RegRex, 6, Dw2Inval, 31\n-xmm15, RegSIMD|Xmmword, RegRex, 7, Dw2Inval, 32\n-xmm16, RegSIMD|Xmmword, RegVRex, 0, Dw2Inval, 67\n-xmm17, RegSIMD|Xmmword, RegVRex, 1, Dw2Inval, 68\n-xmm18, RegSIMD|Xmmword, RegVRex, 2, Dw2Inval, 69\n-xmm19, RegSIMD|Xmmword, RegVRex, 3, Dw2Inval, 70\n-xmm20, RegSIMD|Xmmword, RegVRex, 4, Dw2Inval, 71\n-xmm21, RegSIMD|Xmmword, RegVRex, 5, Dw2Inval, 72\n-xmm22, RegSIMD|Xmmword, RegVRex, 6, Dw2Inval, 73\n-xmm23, RegSIMD|Xmmword, RegVRex, 7, Dw2Inval, 74\n-xmm24, RegSIMD|Xmmword, RegVRex|RegRex, 0, Dw2Inval, 75\n-xmm25, RegSIMD|Xmmword, RegVRex|RegRex, 1, Dw2Inval, 76\n-xmm26, RegSIMD|Xmmword, RegVRex|RegRex, 2, Dw2Inval, 77\n-xmm27, RegSIMD|Xmmword, RegVRex|RegRex, 3, Dw2Inval, 78\n-xmm28, RegSIMD|Xmmword, RegVRex|RegRex, 4, Dw2Inval, 79\n-xmm29, RegSIMD|Xmmword, RegVRex|RegRex, 5, Dw2Inval, 80\n-xmm30, RegSIMD|Xmmword, RegVRex|RegRex, 6, Dw2Inval, 81\n-xmm31, RegSIMD|Xmmword, RegVRex|RegRex, 7, Dw2Inval, 82\n+mm0, Class=RegMMX, 0, 0, 29, 41\n+mm1, Class=RegMMX, 0, 1, 30, 42\n+mm2, Class=RegMMX, 0, 2, 31, 43\n+mm3, Class=RegMMX, 0, 3, 32, 44\n+mm4, Class=RegMMX, 0, 4, 33, 45\n+mm5, Class=RegMMX, 0, 5, 34, 46\n+mm6, Class=RegMMX, 0, 6, 35, 47\n+mm7, Class=RegMMX, 0, 7, 36, 48\n+xmm0, Class=RegSIMD|Acc|Xmmword, 0, 0, 21, 17\n+xmm1, Class=RegSIMD|Xmmword, 0, 1, 22, 18\n+xmm2, Class=RegSIMD|Xmmword, 0, 2, 23, 19\n+xmm3, Class=RegSIMD|Xmmword, 0, 3, 24, 20\n+xmm4, Class=RegSIMD|Xmmword, 0, 4, 25, 21\n+xmm5, Class=RegSIMD|Xmmword, 0, 5, 26, 22\n+xmm6, Class=RegSIMD|Xmmword, 0, 6, 27, 23\n+xmm7, Class=RegSIMD|Xmmword, 0, 7, 28, 24\n+xmm8, Class=RegSIMD|Xmmword, RegRex, 0, Dw2Inval, 25\n+xmm9, Class=RegSIMD|Xmmword, RegRex, 1, Dw2Inval, 26\n+xmm10, Class=RegSIMD|Xmmword, RegRex, 2, Dw2Inval, 27\n+xmm11, Class=RegSIMD|Xmmword, RegRex, 3, Dw2Inval, 28\n+xmm12, Class=RegSIMD|Xmmword, RegRex, 4, Dw2Inval, 29\n+xmm13, Class=RegSIMD|Xmmword, RegRex, 5, Dw2Inval, 30\n+xmm14, Class=RegSIMD|Xmmword, RegRex, 6, Dw2Inval, 31\n+xmm15, Class=RegSIMD|Xmmword, RegRex, 7, Dw2Inval, 32\n+xmm16, Class=RegSIMD|Xmmword, RegVRex, 0, Dw2Inval, 67\n+xmm17, Class=RegSIMD|Xmmword, RegVRex, 1, Dw2Inval, 68\n+xmm18, Class=RegSIMD|Xmmword, RegVRex, 2, Dw2Inval, 69\n+xmm19, Class=RegSIMD|Xmmword, RegVRex, 3, Dw2Inval, 70\n+xmm20, Class=RegSIMD|Xmmword, RegVRex, 4, Dw2Inval, 71\n+xmm21, Class=RegSIMD|Xmmword, RegVRex, 5, Dw2Inval, 72\n+xmm22, Class=RegSIMD|Xmmword, RegVRex, 6, Dw2Inval, 73\n+xmm23, Class=RegSIMD|Xmmword, RegVRex, 7, Dw2Inval, 74\n+xmm24, Class=RegSIMD|Xmmword, RegVRex|RegRex, 0, Dw2Inval, 75\n+xmm25, Class=RegSIMD|Xmmword, RegVRex|RegRex, 1, Dw2Inval, 76\n+xmm26, Class=RegSIMD|Xmmword, RegVRex|RegRex, 2, Dw2Inval, 77\n+xmm27, Class=RegSIMD|Xmmword, RegVRex|RegRex, 3, Dw2Inval, 78\n+xmm28, Class=RegSIMD|Xmmword, RegVRex|RegRex, 4, Dw2Inval, 79\n+xmm29, Class=RegSIMD|Xmmword, RegVRex|RegRex, 5, Dw2Inval, 80\n+xmm30, Class=RegSIMD|Xmmword, RegVRex|RegRex, 6, Dw2Inval, 81\n+xmm31, Class=RegSIMD|Xmmword, RegVRex|RegRex, 7, Dw2Inval, 82\n // AVX registers.\n-ymm0, RegSIMD|Ymmword, 0, 0, Dw2Inval, Dw2Inval\n-ymm1, RegSIMD|Ymmword, 0, 1, Dw2Inval, Dw2Inval\n-ymm2, RegSIMD|Ymmword, 0, 2, Dw2Inval, Dw2Inval\n-ymm3, RegSIMD|Ymmword, 0, 3, Dw2Inval, Dw2Inval\n-ymm4, RegSIMD|Ymmword, 0, 4, Dw2Inval, Dw2Inval\n-ymm5, RegSIMD|Ymmword, 0, 5, Dw2Inval, Dw2Inval\n-ymm6, RegSIMD|Ymmword, 0, 6, Dw2Inval, Dw2Inval\n-ymm7, RegSIMD|Ymmword, 0, 7, Dw2Inval, Dw2Inval\n-ymm8, RegSIMD|Ymmword, RegRex, 0, Dw2Inval, Dw2Inval\n-ymm9, RegSIMD|Ymmword, RegRex, 1, Dw2Inval, Dw2Inval\n-ymm10, RegSIMD|Ymmword, RegRex, 2, Dw2Inval, Dw2Inval\n-ymm11, RegSIMD|Ymmword, RegRex, 3, Dw2Inval, Dw2Inval\n-ymm12, RegSIMD|Ymmword, RegRex, 4, Dw2Inval, Dw2Inval\n-ymm13, RegSIMD|Ymmword, RegRex, 5, Dw2Inval, Dw2Inval\n-ymm14, RegSIMD|Ymmword, RegRex, 6, Dw2Inval, Dw2Inval\n-ymm15, RegSIMD|Ymmword, RegRex, 7, Dw2Inval, Dw2Inval\n-ymm16, RegSIMD|Ymmword, RegVRex, 0, Dw2Inval, Dw2Inval\n-ymm17, RegSIMD|Ymmword, RegVRex, 1, Dw2Inval, Dw2Inval\n-ymm18, RegSIMD|Ymmword, RegVRex, 2, Dw2Inval, Dw2Inval\n-ymm19, RegSIMD|Ymmword, RegVRex, 3, Dw2Inval, Dw2Inval\n-ymm20, RegSIMD|Ymmword, RegVRex, 4, Dw2Inval, Dw2Inval\n-ymm21, RegSIMD|Ymmword, RegVRex, 5, Dw2Inval, Dw2Inval\n-ymm22, RegSIMD|Ymmword, RegVRex, 6, Dw2Inval, Dw2Inval\n-ymm23, RegSIMD|Ymmword, RegVRex, 7, Dw2Inval, Dw2Inval\n-ymm24, RegSIMD|Ymmword, RegVRex|RegRex, 0, Dw2Inval, Dw2Inval\n-ymm25, RegSIMD|Ymmword, RegVRex|RegRex, 1, Dw2Inval, Dw2Inval\n-ymm26, RegSIMD|Ymmword, RegVRex|RegRex, 2, Dw2Inval, Dw2Inval\n-ymm27, RegSIMD|Ymmword, RegVRex|RegRex, 3, Dw2Inval, Dw2Inval\n-ymm28, RegSIMD|Ymmword, RegVRex|RegRex, 4, Dw2Inval, Dw2Inval\n-ymm29, RegSIMD|Ymmword, RegVRex|RegRex, 5, Dw2Inval, Dw2Inval\n-ymm30, RegSIMD|Ymmword, RegVRex|RegRex, 6, Dw2Inval, Dw2Inval\n-ymm31, RegSIMD|Ymmword, RegVRex|RegRex, 7, Dw2Inval, Dw2Inval\n+ymm0, Class=RegSIMD|Ymmword, 0, 0, Dw2Inval, Dw2Inval\n+ymm1, Class=RegSIMD|Ymmword, 0, 1, Dw2Inval, Dw2Inval\n+ymm2, Class=RegSIMD|Ymmword, 0, 2, Dw2Inval, Dw2Inval\n+ymm3, Class=RegSIMD|Ymmword, 0, 3, Dw2Inval, Dw2Inval\n+ymm4, Class=RegSIMD|Ymmword, 0, 4, Dw2Inval, Dw2Inval\n+ymm5, Class=RegSIMD|Ymmword, 0, 5, Dw2Inval, Dw2Inval\n+ymm6, Class=RegSIMD|Ymmword, 0, 6, Dw2Inval, Dw2Inval\n+ymm7, Class=RegSIMD|Ymmword, 0, 7, Dw2Inval, Dw2Inval\n+ymm8, Class=RegSIMD|Ymmword, RegRex, 0, Dw2Inval, Dw2Inval\n+ymm9, Class=RegSIMD|Ymmword, RegRex, 1, Dw2Inval, Dw2Inval\n+ymm10, Class=RegSIMD|Ymmword, RegRex, 2, Dw2Inval, Dw2Inval\n+ymm11, Class=RegSIMD|Ymmword, RegRex, 3, Dw2Inval, Dw2Inval\n+ymm12, Class=RegSIMD|Ymmword, RegRex, 4, Dw2Inval, Dw2Inval\n+ymm13, Class=RegSIMD|Ymmword, RegRex, 5, Dw2Inval, Dw2Inval\n+ymm14, Class=RegSIMD|Ymmword, RegRex, 6, Dw2Inval, Dw2Inval\n+ymm15, Class=RegSIMD|Ymmword, RegRex, 7, Dw2Inval, Dw2Inval\n+ymm16, Class=RegSIMD|Ymmword, RegVRex, 0, Dw2Inval, Dw2Inval\n+ymm17, Class=RegSIMD|Ymmword, RegVRex, 1, Dw2Inval, Dw2Inval\n+ymm18, Class=RegSIMD|Ymmword, RegVRex, 2, Dw2Inval, Dw2Inval\n+ymm19, Class=RegSIMD|Ymmword, RegVRex, 3, Dw2Inval, Dw2Inval\n+ymm20, Class=RegSIMD|Ymmword, RegVRex, 4, Dw2Inval, Dw2Inval\n+ymm21, Class=RegSIMD|Ymmword, RegVRex, 5, Dw2Inval, Dw2Inval\n+ymm22, Class=RegSIMD|Ymmword, RegVRex, 6, Dw2Inval, Dw2Inval\n+ymm23, Class=RegSIMD|Ymmword, RegVRex, 7, Dw2Inval, Dw2Inval\n+ymm24, Class=RegSIMD|Ymmword, RegVRex|RegRex, 0, Dw2Inval, Dw2Inval\n+ymm25, Class=RegSIMD|Ymmword, RegVRex|RegRex, 1, Dw2Inval, Dw2Inval\n+ymm26, Class=RegSIMD|Ymmword, RegVRex|RegRex, 2, Dw2Inval, Dw2Inval\n+ymm27, Class=RegSIMD|Ymmword, RegVRex|RegRex, 3, Dw2Inval, Dw2Inval\n+ymm28, Class=RegSIMD|Ymmword, RegVRex|RegRex, 4, Dw2Inval, Dw2Inval\n+ymm29, Class=RegSIMD|Ymmword, RegVRex|RegRex, 5, Dw2Inval, Dw2Inval\n+ymm30, Class=RegSIMD|Ymmword, RegVRex|RegRex, 6, Dw2Inval, Dw2Inval\n+ymm31, Class=RegSIMD|Ymmword, RegVRex|RegRex, 7, Dw2Inval, Dw2Inval\n // AVX512 registers.\n-zmm0, RegSIMD|Zmmword, 0, 0, Dw2Inval, Dw2Inval\n-zmm1, RegSIMD|Zmmword, 0, 1, Dw2Inval, Dw2Inval\n-zmm2, RegSIMD|Zmmword, 0, 2, Dw2Inval, Dw2Inval\n-zmm3, RegSIMD|Zmmword, 0, 3, Dw2Inval, Dw2Inval\n-zmm4, RegSIMD|Zmmword, 0, 4, Dw2Inval, Dw2Inval\n-zmm5, RegSIMD|Zmmword, 0, 5, Dw2Inval, Dw2Inval\n-zmm6, RegSIMD|Zmmword, 0, 6, Dw2Inval, Dw2Inval\n-zmm7, RegSIMD|Zmmword, 0, 7, Dw2Inval, Dw2Inval\n-zmm8, RegSIMD|Zmmword, RegRex, 0, Dw2Inval, Dw2Inval\n-zmm9, RegSIMD|Zmmword, RegRex, 1, Dw2Inval, Dw2Inval\n-zmm10, RegSIMD|Zmmword, RegRex, 2, Dw2Inval, Dw2Inval\n-zmm11, RegSIMD|Zmmword, RegRex, 3, Dw2Inval, Dw2Inval\n-zmm12, RegSIMD|Zmmword, RegRex, 4, Dw2Inval, Dw2Inval\n-zmm13, RegSIMD|Zmmword, RegRex, 5, Dw2Inval, Dw2Inval\n-zmm14, RegSIMD|Zmmword, RegRex, 6, Dw2Inval, Dw2Inval\n-zmm15, RegSIMD|Zmmword, RegRex, 7, Dw2Inval, Dw2Inval\n-zmm16, RegSIMD|Zmmword, RegVRex, 0, Dw2Inval, Dw2Inval\n-zmm17, RegSIMD|Zmmword, RegVRex, 1, Dw2Inval, Dw2Inval\n-zmm18, RegSIMD|Zmmword, RegVRex, 2, Dw2Inval, Dw2Inval\n-zmm19, RegSIMD|Zmmword, RegVRex, 3, Dw2Inval, Dw2Inval\n-zmm20, RegSIMD|Zmmword, RegVRex, 4, Dw2Inval, Dw2Inval\n-zmm21, RegSIMD|Zmmword, RegVRex, 5, Dw2Inval, Dw2Inval\n-zmm22, RegSIMD|Zmmword, RegVRex, 6, Dw2Inval, Dw2Inval\n-zmm23, RegSIMD|Zmmword, RegVRex, 7, Dw2Inval, Dw2Inval\n-zmm24, RegSIMD|Zmmword, RegVRex|RegRex, 0, Dw2Inval, Dw2Inval\n-zmm25, RegSIMD|Zmmword, RegVRex|RegRex, 1, Dw2Inval, Dw2Inval\n-zmm26, RegSIMD|Zmmword, RegVRex|RegRex, 2, Dw2Inval, Dw2Inval\n-zmm27, RegSIMD|Zmmword, RegVRex|RegRex, 3, Dw2Inval, Dw2Inval\n-zmm28, RegSIMD|Zmmword, RegVRex|RegRex, 4, Dw2Inval, Dw2Inval\n-zmm29, RegSIMD|Zmmword, RegVRex|RegRex, 5, Dw2Inval, Dw2Inval\n-zmm30, RegSIMD|Zmmword, RegVRex|RegRex, 6, Dw2Inval, Dw2Inval\n-zmm31, RegSIMD|Zmmword, RegVRex|RegRex, 7, Dw2Inval, Dw2Inval\n+zmm0, Class=RegSIMD|Zmmword, 0, 0, Dw2Inval, Dw2Inval\n+zmm1, Class=RegSIMD|Zmmword, 0, 1, Dw2Inval, Dw2Inval\n+zmm2, Class=RegSIMD|Zmmword, 0, 2, Dw2Inval, Dw2Inval\n+zmm3, Class=RegSIMD|Zmmword, 0, 3, Dw2Inval, Dw2Inval\n+zmm4, Class=RegSIMD|Zmmword, 0, 4, Dw2Inval, Dw2Inval\n+zmm5, Class=RegSIMD|Zmmword, 0, 5, Dw2Inval, Dw2Inval\n+zmm6, Class=RegSIMD|Zmmword, 0, 6, Dw2Inval, Dw2Inval\n+zmm7, Class=RegSIMD|Zmmword, 0, 7, Dw2Inval, Dw2Inval\n+zmm8, Class=RegSIMD|Zmmword, RegRex, 0, Dw2Inval, Dw2Inval\n+zmm9, Class=RegSIMD|Zmmword, RegRex, 1, Dw2Inval, Dw2Inval\n+zmm10, Class=RegSIMD|Zmmword, RegRex, 2, Dw2Inval, Dw2Inval\n+zmm11, Class=RegSIMD|Zmmword, RegRex, 3, Dw2Inval, Dw2Inval\n+zmm12, Class=RegSIMD|Zmmword, RegRex, 4, Dw2Inval, Dw2Inval\n+zmm13, Class=RegSIMD|Zmmword, RegRex, 5, Dw2Inval, Dw2Inval\n+zmm14, Class=RegSIMD|Zmmword, RegRex, 6, Dw2Inval, Dw2Inval\n+zmm15, Class=RegSIMD|Zmmword, RegRex, 7, Dw2Inval, Dw2Inval\n+zmm16, Class=RegSIMD|Zmmword, RegVRex, 0, Dw2Inval, Dw2Inval\n+zmm17, Class=RegSIMD|Zmmword, RegVRex, 1, Dw2Inval, Dw2Inval\n+zmm18, Class=RegSIMD|Zmmword, RegVRex, 2, Dw2Inval, Dw2Inval\n+zmm19, Class=RegSIMD|Zmmword, RegVRex, 3, Dw2Inval, Dw2Inval\n+zmm20, Class=RegSIMD|Zmmword, RegVRex, 4, Dw2Inval, Dw2Inval\n+zmm21, Class=RegSIMD|Zmmword, RegVRex, 5, Dw2Inval, Dw2Inval\n+zmm22, Class=RegSIMD|Zmmword, RegVRex, 6, Dw2Inval, Dw2Inval\n+zmm23, Class=RegSIMD|Zmmword, RegVRex, 7, Dw2Inval, Dw2Inval\n+zmm24, Class=RegSIMD|Zmmword, RegVRex|RegRex, 0, Dw2Inval, Dw2Inval\n+zmm25, Class=RegSIMD|Zmmword, RegVRex|RegRex, 1, Dw2Inval, Dw2Inval\n+zmm26, Class=RegSIMD|Zmmword, RegVRex|RegRex, 2, Dw2Inval, Dw2Inval\n+zmm27, Class=RegSIMD|Zmmword, RegVRex|RegRex, 3, Dw2Inval, Dw2Inval\n+zmm28, Class=RegSIMD|Zmmword, RegVRex|RegRex, 4, Dw2Inval, Dw2Inval\n+zmm29, Class=RegSIMD|Zmmword, RegVRex|RegRex, 5, Dw2Inval, Dw2Inval\n+zmm30, Class=RegSIMD|Zmmword, RegVRex|RegRex, 6, Dw2Inval, Dw2Inval\n+zmm31, Class=RegSIMD|Zmmword, RegVRex|RegRex, 7, Dw2Inval, Dw2Inval\n // Bound registers for MPX\n bnd0, RegBND, 0, 0, Dw2Inval, Dw2Inval\n bnd1, RegBND, 0, 1, Dw2Inval, Dw2Inval"
    },
    {
      "sha": "e9ef28f7dd2961680f3fdd6e282d8a65585bcbd5",
      "filename": "opcodes/i386-tbl.h",
      "status": "modified",
      "additions": 18968,
      "deletions": 18968,
      "changes": 37936,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3528c362d9471524cfe8a76c692081838b292d64/opcodes/i386-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3528c362d9471524cfe8a76c692081838b292d64/opcodes/i386-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-tbl.h?ref=3528c362d9471524cfe8a76c692081838b292d64"
    }
  ]
}