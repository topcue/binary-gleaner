{
  "sha": "e5b771060e42232b6d70e9fce0e6907bc979ef21",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTViNzcxMDYwZTQyMjMyYjZkNzBlOWZjZTBlNjkwN2JjOTc5ZWYyMQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-06-22T13:58:09Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-06-22T13:58:09Z"
    },
    "message": "[gdb/testsuite] Add gdb.dwarf2/imported-unit-c.exp\n\nThis test-case is intended to excercise this code in process_imported_unit_die:\n...\n      /* We're importing a C++ compilation unit with tag DW_TAG_compile_unit\n\t into another compilation unit, at root level.  Regard this as a hint,\n\t and ignore it.  */\n      if (die->parent && die->parent->parent == NULL\n\t  && per_cu->unit_type == DW_UT_compile\n\t  && per_cu->lang == language_cplus)\n\treturn;\n...\nin the sense that the test-case should fail if the\n\"per_cu->lang == language_cplus\" clause is removed.\n\nTested on x86_64-linux.\n\ngdb/testsuite/ChangeLog:\n\n2021-06-22  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.dwarf2/imported-unit-c.exp: New file.",
    "tree": {
      "sha": "cf04e6e2dd5af04a2c498bbf5414f5a743d2ea9e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cf04e6e2dd5af04a2c498bbf5414f5a743d2ea9e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e5b771060e42232b6d70e9fce0e6907bc979ef21",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e5b771060e42232b6d70e9fce0e6907bc979ef21",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e5b771060e42232b6d70e9fce0e6907bc979ef21",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e5b771060e42232b6d70e9fce0e6907bc979ef21/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "50331d64f1080c2c9957fb608e0af236b96c1a41",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/50331d64f1080c2c9957fb608e0af236b96c1a41",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/50331d64f1080c2c9957fb608e0af236b96c1a41"
    }
  ],
  "stats": {
    "total": 114,
    "additions": 114,
    "deletions": 0
  },
  "files": [
    {
      "sha": "b0db1c8f08668f41ca415e148346b90512370e15",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5b771060e42232b6d70e9fce0e6907bc979ef21/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5b771060e42232b6d70e9fce0e6907bc979ef21/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=e5b771060e42232b6d70e9fce0e6907bc979ef21",
      "patch": "@@ -1,3 +1,7 @@\n+2021-06-22  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.dwarf2/imported-unit-c.exp: New file.\n+\n 2021-06-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.server/server-kill.exp: Introduce global kill_pid_of, and"
    },
    {
      "sha": "14047ab8eb957c1fa00139d8426cd052f978c596",
      "filename": "gdb/testsuite/gdb.dwarf2/imported-unit-c.exp",
      "status": "added",
      "additions": 110,
      "deletions": 0,
      "changes": 110,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5b771060e42232b6d70e9fce0e6907bc979ef21/gdb/testsuite/gdb.dwarf2/imported-unit-c.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5b771060e42232b6d70e9fce0e6907bc979ef21/gdb/testsuite/gdb.dwarf2/imported-unit-c.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/imported-unit-c.exp?ref=e5b771060e42232b6d70e9fce0e6907bc979ef21",
      "patch": "@@ -0,0 +1,110 @@\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+};\n+\n+standard_testfile main-foo.c .S\n+\n+set executable ${testfile}\n+set asm_file [standard_output_file ${srcfile2}]\n+\n+# We need to know the size of integer and address types in order\n+# to write some of the debugging info we'd like to generate.\n+if [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile} {debug}] {\n+    return -1\n+}\n+\n+# Create the DWARF.\n+Dwarf::assemble $asm_file {\n+    declare_labels cu_label cu2_label int_label int2_label\n+    set int_size [get_sizeof \"int\" 4]\n+\n+    # imported CU 1: inty unsigned\n+    cu {} {\n+\tcu_label: compile_unit {\n+\t    {language @DW_LANG_C}\n+\t    {name \"<artificial>\"}\n+\t} {\n+\t    int_label: base_type {\n+\t\t{byte_size $int_size sdata}\n+\t\t{encoding @DW_ATE_unsigned}\n+\t\t{name {unsigned int}}\n+\t    }\n+            DW_TAG_typedef {\n+                {DW_AT_name inty}\n+                {DW_AT_type :$int_label}\n+            }\n+\t}\n+    }\n+\n+    # imported CU 2: inty signed\n+    cu {} {\n+\tcu2_label: compile_unit {\n+\t    {language @DW_LANG_C}\n+\t    {name \"<artificial>\"}\n+\t} {\n+\t    int2_label: base_type {\n+\t\t{byte_size $int_size sdata}\n+\t\t{encoding @DW_ATE_signed}\n+\t\t{name {int}}\n+\t    }\n+            DW_TAG_typedef {\n+                {DW_AT_name inty}\n+                {DW_AT_type :$int2_label}\n+            }\n+\t}\n+    }\n+\n+    # main CU\n+    cu {} {\n+\tcompile_unit {\n+\t    {language @DW_LANG_C}\n+\t    {name \"<artificial>\"}\n+\t} {\n+\t    imported_unit {\n+\t\t{import %$cu2_label}\n+\t    }\n+\n+\t    subprogram {\n+\t\t{MACRO_AT_func {main}}\n+\t\t{external 1 flag}\n+\t    }\n+\t}\n+    }\n+\n+    # foo CU\n+    cu {} {\n+\tcompile_unit {\n+\t    {language @DW_LANG_C}\n+\t    {name \"<artificial>\"}\n+\t} {\n+\t    imported_unit {\n+\t\t{import %$cu_label}\n+\t    }\n+\n+\t    subprogram {\n+\t\t{MACRO_AT_func {foo}}\n+\t\t{external 1 flag}\n+\t    }\n+\t}\n+    }\n+\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $asm_file] {nodebug}] } {\n+    return -1\n+}\n+\n+if ![runto_main] {\n+    return -1\n+}\n+\n+gdb_test \"ptype inty\" \"type = int\" \"ptype in main\"\n+\n+gdb_breakpoint \"foo\"\n+gdb_continue_to_breakpoint \"continue to breakpoint for foo\"\n+\n+gdb_test \"ptype inty\" \"type = unsigned int\" \"ptype in foo\""
    }
  ]
}