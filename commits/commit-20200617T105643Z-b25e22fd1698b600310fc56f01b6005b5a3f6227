{
  "sha": "b25e22fd1698b600310fc56f01b6005b5a3f6227",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjI1ZTIyZmQxNjk4YjYwMDMxMGZjNTZmMDFiNjAwNWI1YTNmNjIyNw==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-06-17T10:56:43Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-06-17T10:56:43Z"
    },
    "message": "Update thread_control_state::trap_expected comments\n\nThe comments describing trap_expected are out of date.  It\npredates displaced stepping and non-stop mode (\"keep other threads\nstopped\").  It predates stepping over watchpoints with breakpoints\ninserted (keep_going_pass_signal).  Says the variable is cleared\nin normal_stop, when it isn't.  This fixes it.\n\ngdb/ChangeLog:\n2020-06-17  Pedro Alves  <palves@redhat.com>\n\n\t* gdbthread.h (thread_control_state) <trap_expected> Update\n\tcomments.",
    "tree": {
      "sha": "8b78053a001bc4dfcdaa47819f823d18260a57fb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8b78053a001bc4dfcdaa47819f823d18260a57fb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b25e22fd1698b600310fc56f01b6005b5a3f6227",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b25e22fd1698b600310fc56f01b6005b5a3f6227",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b25e22fd1698b600310fc56f01b6005b5a3f6227",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b25e22fd1698b600310fc56f01b6005b5a3f6227/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a78a19b15254de31c3d38b7e27469aaef0a30e97",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a78a19b15254de31c3d38b7e27469aaef0a30e97",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a78a19b15254de31c3d38b7e27469aaef0a30e97"
    }
  ],
  "stats": {
    "total": 31,
    "additions": 9,
    "deletions": 22
  },
  "files": [
    {
      "sha": "a231a09e21abb929ff943e59d2d5a5f51fb7058a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b25e22fd1698b600310fc56f01b6005b5a3f6227/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b25e22fd1698b600310fc56f01b6005b5a3f6227/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b25e22fd1698b600310fc56f01b6005b5a3f6227",
      "patch": "@@ -1,3 +1,8 @@\n+2020-06-17  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdbthread.h (thread_control_state) <trap_expected> Update\n+\tcomments.\n+\n 2020-06-17  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* ada-lang.c (ada_lookup_symbol_nonlocal): Rename to"
    },
    {
      "sha": "710b4c66a65f7eae064490b8d6c2d9f43391b0b4",
      "filename": "gdb/gdbthread.h",
      "status": "modified",
      "additions": 4,
      "deletions": 22,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b25e22fd1698b600310fc56f01b6005b5a3f6227/gdb/gdbthread.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b25e22fd1698b600310fc56f01b6005b5a3f6227/gdb/gdbthread.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbthread.h?ref=b25e22fd1698b600310fc56f01b6005b5a3f6227",
      "patch": "@@ -131,28 +131,10 @@ struct thread_control_state\n      any inlined frames).  */\n   struct frame_id step_stack_frame_id {};\n \n-  /* Nonzero if we are presently stepping over a breakpoint.\n-\n-     If we hit a breakpoint or watchpoint, and then continue, we need\n-     to single step the current thread with breakpoints disabled, to\n-     avoid hitting the same breakpoint or watchpoint again.  And we\n-     should step just a single thread and keep other threads stopped,\n-     so that other threads don't miss breakpoints while they are\n-     removed.\n-\n-     So, this variable simultaneously means that we need to single\n-     step the current thread, keep other threads stopped, and that\n-     breakpoints should be removed while we step.\n-\n-     This variable is set either:\n-     - in proceed, when we resume inferior on user's explicit request\n-     - in keep_going, if handle_inferior_event decides we need to\n-     step over breakpoint.\n-\n-     The variable is cleared in normal_stop.  The proceed calls\n-     wait_for_inferior, which calls handle_inferior_event in a loop,\n-     and until wait_for_inferior exits, this variable is changed only\n-     by keep_going.  */\n+  /* True if the the thread is presently stepping over a breakpoint or\n+     a watchpoint, either with an inline step over or a displaced (out\n+     of line) step, and we're now expecting it to report a trap for\n+     the finished single step.  */\n   int trap_expected = 0;\n \n   /* Nonzero if the thread is being proceeded for a \"finish\" command"
    }
  ]
}