{
  "sha": "c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzRjNDkzZGUyYmJmYzc0MTRkMGVjNTFmNDBmMTdjZDdiMWZmNzRmMg==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2021-04-22T15:22:39Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2021-04-22T15:22:39Z"
    },
    "message": "gdb/continuations: use lambdas instead of function pointers\n\nUse lambdas and std::list to track inferior continuations.  This is a\nrefactoring.\n\ngdb/ChangeLog:\n2021-04-22  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* inferior.h (class inferior) <continuations>: Change the type\n\tto be an std::list of std::function's.\n\tUpdate the references and uses below.\n\t* continuations.c (struct continuation): Delete.\n\t(make_continuation): Delete.\n\t(do_my_continuations_1): Delete.\n\t(do_my_continuations): Delete.\n\t(discard_my_continuations_1): Delete.\n\t(discard_my_continuations): Delete.\n\t(add_inferior_continuation): Update.\n\t(do_all_inferior_continuations): Update.\n\t(discard_all_inferior_continuations): Update.\n\t* continuations.h (add_inferior_continuation): Update to take\n\tan std::function as the parameter.\n\t* infcmd.c (struct attach_command_continuation_args): Delete.\n\t(attach_command_continuation): Delete.\n\t(attach_command_continuation_free_args): Delete.\n\t(attach_command): Update.\n\t(notice_new_inferior): Update.",
    "tree": {
      "sha": "a92975d7b21a379e8add3781e6b5b4a18c17b3cf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a92975d7b21a379e8add3781e6b5b4a18c17b3cf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1194676e0be8d28a2ed631fe2b8d560409240ff0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1194676e0be8d28a2ed631fe2b8d560409240ff0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1194676e0be8d28a2ed631fe2b8d560409240ff0"
    }
  ],
  "stats": {
    "total": 191,
    "additions": 48,
    "deletions": 143
  },
  "files": [
    {
      "sha": "36ea18aafac0facf17afd02fbe9302bfa39aae3e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2",
      "patch": "@@ -1,3 +1,25 @@\n+2021-04-22  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* inferior.h (class inferior) <continuations>: Change the type\n+\tto be an std::list of std::function's.\n+\tUpdate the references and uses below.\n+\t* continuations.c (struct continuation): Delete.\n+\t(make_continuation): Delete.\n+\t(do_my_continuations_1): Delete.\n+\t(do_my_continuations): Delete.\n+\t(discard_my_continuations_1): Delete.\n+\t(discard_my_continuations): Delete.\n+\t(add_inferior_continuation): Update.\n+\t(do_all_inferior_continuations): Update.\n+\t(discard_all_inferior_continuations): Update.\n+\t* continuations.h (add_inferior_continuation): Update to take\n+\tan std::function as the parameter.\n+\t* infcmd.c (struct attach_command_continuation_args): Delete.\n+\t(attach_command_continuation): Delete.\n+\t(attach_command_continuation_free_args): Delete.\n+\t(attach_command): Update.\n+\t(notice_new_inferior): Update.\n+\n 2021-04-22  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* continuations.h: Update the general comment."
    },
    {
      "sha": "2edfd98a9c84e05215b13a88fcabc75d7d244eb8",
      "filename": "gdb/continuations.c",
      "status": "modified",
      "additions": 9,
      "deletions": 87,
      "changes": 96,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2/gdb/continuations.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2/gdb/continuations.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/continuations.c?ref=c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2",
      "patch": "@@ -22,98 +22,15 @@\n #include \"inferior.h\"\n #include \"continuations.h\"\n \n-struct continuation\n-{\n-  struct continuation *next;\n-  continuation_ftype *function;\n-  continuation_free_arg_ftype *free_arg;\n-  void *arg;\n-};\n-\n-/* Add a new continuation to the continuation chain.  Args are\n-   FUNCTION to run the continuation up with, and ARG to pass to\n-   it.  */\n-\n-static void\n-make_continuation (struct continuation **pmy_chain,\n-\t\t   continuation_ftype *function,\n-\t\t   void *arg,  void (*free_arg) (void *))\n-{\n-  struct continuation *newobj = XNEW (struct continuation);\n-\n-  newobj->next = *pmy_chain;\n-  newobj->function = function;\n-  newobj->free_arg = free_arg;\n-  newobj->arg = arg;\n-  *pmy_chain = newobj;\n-}\n-\n-static void\n-do_my_continuations_1 (struct continuation **pmy_chain)\n-{\n-  struct continuation *ptr;\n-\n-  while ((ptr = *pmy_chain) != NULL)\n-    {\n-      *pmy_chain = ptr->next;\t/* Do this first in case of recursion.  */\n-      (*ptr->function) (ptr->arg);\n-      if (ptr->free_arg)\n-\t(*ptr->free_arg) (ptr->arg);\n-      xfree (ptr);\n-    }\n-}\n-\n-static void\n-do_my_continuations (struct continuation **list)\n-{\n-  struct continuation *continuations;\n-\n-  if (*list == NULL)\n-    return;\n-\n-  /* Copy the list header into another pointer, and set the global\n-     list header to null, so that the global list can change as a side\n-     effect of invoking the continuations and the processing of the\n-     preexisting continuations will not be affected.  */\n-\n-  continuations = *list;\n-  *list = NULL;\n-\n-  /* Work now on the list we have set aside.  */\n-  do_my_continuations_1 (&continuations);\n-}\n-\n-static void\n-discard_my_continuations_1 (struct continuation **pmy_chain)\n-{\n-  struct continuation *ptr;\n-\n-  while ((ptr = *pmy_chain) != NULL)\n-    {\n-      *pmy_chain = ptr->next;\n-      if (ptr->free_arg)\n-\t(*ptr->free_arg) (ptr->arg);\n-      xfree (ptr);\n-    }\n-}\n-\n-static void\n-discard_my_continuations (struct continuation **list)\n-{\n-  discard_my_continuations_1 (list);\n-  *list = NULL;\n-}\n-\n /* Add a continuation to the continuation list of INFERIOR.  The new\n    continuation will be added at the front.  */\n \n void\n-add_inferior_continuation (continuation_ftype *hook, void *args,\n-\t\t\t   continuation_free_arg_ftype *free_arg)\n+add_inferior_continuation (std::function<void ()> &&cont)\n {\n   struct inferior *inf = current_inferior ();\n \n-  make_continuation (&inf->continuations, hook, args, free_arg);\n+  inf->continuations.emplace_front (std::move (cont));\n }\n \n /* Do all continuations of the current inferior.  */\n@@ -122,13 +39,18 @@ void\n do_all_inferior_continuations ()\n {\n   struct inferior *inf = current_inferior ();\n-  do_my_continuations (&inf->continuations);\n+  while (!inf->continuations.empty ())\n+    {\n+      auto iter = inf->continuations.begin ();\n+      (*iter) ();\n+      inf->continuations.erase (iter);\n+    }\n }\n \n /* Get rid of all the inferior-wide continuations of INF.  */\n \n void\n discard_all_inferior_continuations (struct inferior *inf)\n {\n-  discard_my_continuations (&inf->continuations);\n+  inf->continuations.clear ();\n }"
    },
    {
      "sha": "0ad5fc6e96c9b907b3ae1c264f4b10a25eb6dcbb",
      "filename": "gdb/continuations.h",
      "status": "modified",
      "additions": 7,
      "deletions": 17,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2/gdb/continuations.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2/gdb/continuations.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/continuations.h?ref=c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2",
      "patch": "@@ -20,29 +20,19 @@\n #ifndef CONTINUATIONS_H\n #define CONTINUATIONS_H\n \n+#include <functional>\n+\n struct inferior;\n \n /* To continue the execution commands when running gdb asynchronously.\n-   A continuation structure contains a pointer to a function to be called\n-   to finish the command, once the target has stopped.  Such mechanism is\n-   used by the attach command and the remote target when a new inferior\n-   is detected.  */\n-\n-/* Prototype of the continuation callback functions.  ARG is the\n-   continuation argument registered in the corresponding\n-   add_*_continuation call.  */\n-typedef void (continuation_ftype) (void *arg);\n-\n-/* Prototype of the function responsible for releasing the argument\n-   passed to the continuation callback functions, either when the\n-   continuation is called, or discarded.  */\n-typedef void (continuation_free_arg_ftype) (void *);\n+   A continuation is an std::function to be called to finish the\n+   command, once the target has stopped.  Such mechanism is used by\n+   the attach command and the remote target when a new inferior is\n+   detected.  */\n \n /* Inferior specific (any thread) continuations.  */\n \n-extern void add_inferior_continuation (continuation_ftype *,\n-\t\t\t\t       void *,\n-\t\t\t\t       continuation_free_arg_ftype *);\n+extern void add_inferior_continuation (std::function<void ()> &&cont);\n extern void do_all_inferior_continuations ();\n extern void discard_all_inferior_continuations (struct inferior *inf);\n "
    },
    {
      "sha": "e06db492b07c0f8c4931c7662f91608d2cbf1955",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 8,
      "deletions": 37,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2",
      "patch": "@@ -2540,30 +2540,6 @@ attach_post_wait (int from_tty, enum attach_post_wait_mode mode)\n     }\n }\n \n-struct attach_command_continuation_args\n-{\n-  int from_tty;\n-  enum attach_post_wait_mode mode;\n-};\n-\n-static void\n-attach_command_continuation (void *args)\n-{\n-  struct attach_command_continuation_args *a\n-    = (struct attach_command_continuation_args *) args;\n-\n-  attach_post_wait (a->from_tty, a->mode);\n-}\n-\n-static void\n-attach_command_continuation_free_args (void *args)\n-{\n-  struct attach_command_continuation_args *a\n-    = (struct attach_command_continuation_args *) args;\n-\n-  xfree (a);\n-}\n-\n /* \"attach\" command entry point.  Takes a program started up outside\n    of gdb and ``attaches'' to it.  This stops it cold in its tracks\n    and allows us to start debugging it.  */\n@@ -2661,8 +2637,6 @@ attach_command (const char *args, int from_tty)\n      E.g. Mach 3 or GNU hurd.  */\n   if (!target_attach_no_wait ())\n     {\n-      struct attach_command_continuation_args *a;\n-\n       /* Careful here.  See comments in inferior.h.  Basically some\n \t OSes don't ignore SIGSTOPs on continue requests anymore.  We\n \t need a way for handle_inferior_event to reset the stop_signal\n@@ -2671,11 +2645,10 @@ attach_command (const char *args, int from_tty)\n       inferior->control.stop_soon = STOP_QUIETLY_NO_SIGSTOP;\n \n       /* Wait for stop.  */\n-      a = XNEW (struct attach_command_continuation_args);\n-      a->from_tty = from_tty;\n-      a->mode = mode;\n-      add_inferior_continuation (attach_command_continuation, a,\n-\t\t\t\t attach_command_continuation_free_args);\n+      add_inferior_continuation ([=] ()\n+\t{\n+\t  attach_post_wait (from_tty, mode);\n+\t});\n \n       /* Let infrun consider waiting for events out of this\n \t target.  */\n@@ -2719,7 +2692,6 @@ notice_new_inferior (thread_info *thr, int leave_running, int from_tty)\n \n   if (thr->executing)\n     {\n-      struct attach_command_continuation_args *a;\n       struct inferior *inferior = current_inferior ();\n \n       /* We're going to install breakpoints, and poke at memory,\n@@ -2730,11 +2702,10 @@ notice_new_inferior (thread_info *thr, int leave_running, int from_tty)\n       inferior->control.stop_soon = STOP_QUIETLY_REMOTE;\n \n       /* Wait for stop before proceeding.  */\n-      a = XNEW (struct attach_command_continuation_args);\n-      a->from_tty = from_tty;\n-      a->mode = mode;\n-      add_inferior_continuation (attach_command_continuation, a,\n-\t\t\t\t attach_command_continuation_free_args);\n+      add_inferior_continuation ([=] ()\n+\t{\n+\t  attach_post_wait (from_tty, mode);\n+\t});\n \n       return;\n     }"
    },
    {
      "sha": "9e7291aa733f3621c2001f80a08fdd596240265b",
      "filename": "gdb/inferior.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2/gdb/inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2/gdb/inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.h?ref=c4c493de2bbfc7414d0ec51f40f17cd7b1ff74f2",
      "patch": "@@ -22,6 +22,7 @@\n #define INFERIOR_H 1\n \n #include <exception>\n+#include <list>\n \n struct target_waitstatus;\n struct frame_info;\n@@ -32,7 +33,6 @@ struct regcache;\n struct ui_out;\n struct terminal_info;\n struct target_desc_info;\n-struct continuation;\n struct inferior;\n struct thread_info;\n \n@@ -510,7 +510,7 @@ class inferior : public refcounted_object\n \n   /* What is left to do for an execution command after any thread of\n      this inferior stops.  */\n-  continuation *continuations = NULL;\n+  std::list<std::function<void ()>> continuations;\n \n   /* True if setup_inferior wasn't called for this inferior yet.\n      Until that is done, we must not access inferior memory or"
    }
  ]
}