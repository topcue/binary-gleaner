{
  "sha": "05b08ac1608c8355201db21fe4c871677466f0d5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDViMDhhYzE2MDhjODM1NTIwMWRiMjFmZTRjODcxNjc3NDY2ZjBkNQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-06-28T14:32:28Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-07-10T18:24:22Z"
    },
    "message": "Reduce manual reference counting in py-inferior.c\n\nThis patch changes py-inferior.c to use gdbpy_ref<> when possible,\nreducing the amount of manual reference counting.\n\nTested on x86-64 Fedora 29.\n\ngdb/ChangeLog\n2019-07-10  Tom Tromey  <tromey@adacore.com>\n\n\t* python/python-internal.h (create_thread_object): Return\n\tgdbpy_ref.\n\t* python/py-infthread.c (create_thread_object): Return gdbpy_ref.\n\t* python/py-inferior.c (struct threadlist_entry): Add\n\tconstructor.\n\t<thread_obj>: Now a gdbpy_ref.\n\t(thread_to_thread_object): Update.\n\t(add_thread_object): Use new.\n\t(delete_thread_object): Use delete.\n\t(infpy_threads): Update.\n\t(py_free_inferior): Update.  Construct \"inf_obj\" after acquiring\n\tGIL.",
    "tree": {
      "sha": "3650b8b89370b689d1505e74a3035a61f7360b60",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3650b8b89370b689d1505e74a3035a61f7360b60"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/05b08ac1608c8355201db21fe4c871677466f0d5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/05b08ac1608c8355201db21fe4c871677466f0d5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/05b08ac1608c8355201db21fe4c871677466f0d5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/05b08ac1608c8355201db21fe4c871677466f0d5/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "32372d80caba2e223157eca6db2fb0e65369c3c7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32372d80caba2e223157eca6db2fb0e65369c3c7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/32372d80caba2e223157eca6db2fb0e65369c3c7"
    }
  ],
  "stats": {
    "total": 61,
    "additions": 39,
    "deletions": 22
  },
  "files": [
    {
      "sha": "41932c1ba27e49cd44849cfd88677a9040228360",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05b08ac1608c8355201db21fe4c871677466f0d5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05b08ac1608c8355201db21fe4c871677466f0d5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=05b08ac1608c8355201db21fe4c871677466f0d5",
      "patch": "@@ -1,3 +1,18 @@\n+2019-07-10  Tom Tromey  <tromey@adacore.com>\n+\n+\t* python/python-internal.h (create_thread_object): Return\n+\tgdbpy_ref.\n+\t* python/py-infthread.c (create_thread_object): Return gdbpy_ref.\n+\t* python/py-inferior.c (struct threadlist_entry): Add\n+\tconstructor.\n+\t<thread_obj>: Now a gdbpy_ref.\n+\t(thread_to_thread_object): Update.\n+\t(add_thread_object): Use new.\n+\t(delete_thread_object): Use delete.\n+\t(infpy_threads): Update.\n+\t(py_free_inferior): Update.  Construct \"inf_obj\" after acquiring\n+\tGIL.\n+\n 2019-07-10  Tom Tromey  <tromey@adacore.com>\n \n \t* valops.c (value_cast): Specialize error message for Ada."
    },
    {
      "sha": "bf43012352bc047359a998468752b19b51de2046",
      "filename": "gdb/python/py-inferior.c",
      "status": "modified",
      "additions": 19,
      "deletions": 17,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05b08ac1608c8355201db21fe4c871677466f0d5/gdb/python/py-inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05b08ac1608c8355201db21fe4c871677466f0d5/gdb/python/py-inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-inferior.c?ref=05b08ac1608c8355201db21fe4c871677466f0d5",
      "patch": "@@ -30,8 +30,14 @@\n #include \"py-event.h\"\n #include \"py-stopevent.h\"\n \n-struct threadlist_entry {\n-  thread_object *thread_obj;\n+struct threadlist_entry\n+{\n+  threadlist_entry (gdbpy_ref<thread_object> &&ref)\n+    : thread_obj (std::move (ref))\n+  {\n+  }\n+\n+  gdbpy_ref<thread_object> thread_obj;\n   struct threadlist_entry *next;\n };\n \n@@ -301,7 +307,7 @@ thread_to_thread_object (thread_info *thr)\n        thread != NULL;\n        thread = thread->next)\n     if (thread->thread_obj->thread == thr)\n-      return gdbpy_ref<>::new_reference ((PyObject *) thread->thread_obj);\n+      return gdbpy_ref<>::new_reference ((PyObject *) thread->thread_obj.get ());\n \n   PyErr_SetString (PyExc_SystemError,\n \t\t   _(\"could not find gdb thread object\"));\n@@ -311,7 +317,6 @@ thread_to_thread_object (thread_info *thr)\n static void\n add_thread_object (struct thread_info *tp)\n {\n-  thread_object *thread_obj;\n   inferior_object *inf_obj;\n   struct threadlist_entry *entry;\n \n@@ -320,17 +325,16 @@ add_thread_object (struct thread_info *tp)\n \n   gdbpy_enter enter_py (python_gdbarch, python_language);\n \n-  thread_obj = create_thread_object (tp);\n-  if (!thread_obj)\n+  gdbpy_ref<thread_object> thread_obj = create_thread_object (tp);\n+  if (thread_obj == NULL)\n     {\n       gdbpy_print_stack ();\n       return;\n     }\n \n   inf_obj = (inferior_object *) thread_obj->inf_obj;\n \n-  entry = XNEW (struct threadlist_entry);\n-  entry->thread_obj = thread_obj;\n+  entry = new threadlist_entry (std::move (thread_obj));\n   entry->next = inf_obj->threads;\n \n   inf_obj->threads = entry;\n@@ -340,7 +344,7 @@ add_thread_object (struct thread_info *tp)\n     return;\n \n   gdbpy_ref<> event = create_thread_event_object (&new_thread_event_object_type,\n-\t\t\t\t\t\t  (PyObject *) thread_obj);\n+\t\t\t\t\t\t  (PyObject *) thread_obj.get ());\n   if (event == NULL\n       || evpy_emit_event (event.get (), gdb_py_events.new_thread) < 0)\n     gdbpy_print_stack ();\n@@ -375,8 +379,7 @@ delete_thread_object (struct thread_info *tp, int ignore)\n   *entry = (*entry)->next;\n   inf_obj->nthreads--;\n \n-  Py_DECREF (tmp->thread_obj);\n-  xfree (tmp);\n+  delete tmp;\n }\n \n static PyObject *\n@@ -405,8 +408,9 @@ infpy_threads (PyObject *self, PyObject *args)\n   for (i = 0, entry = inf_obj->threads; i < inf_obj->nthreads;\n        i++, entry = entry->next)\n     {\n-      Py_INCREF (entry->thread_obj);\n-      PyTuple_SET_ITEM (tuple, i, (PyObject *) entry->thread_obj);\n+      PyObject *thr = (PyObject *) entry->thread_obj.get ();\n+      Py_INCREF (thr);\n+      PyTuple_SET_ITEM (tuple, i, thr);\n     }\n \n   return tuple;\n@@ -859,24 +863,22 @@ infpy_dealloc (PyObject *obj)\n static void\n py_free_inferior (struct inferior *inf, void *datum)\n {\n-  gdbpy_ref<inferior_object> inf_obj ((inferior_object *) datum);\n   struct threadlist_entry *th_entry, *th_tmp;\n \n   if (!gdb_python_initialized)\n     return;\n \n   gdbpy_enter enter_py (python_gdbarch, python_language);\n+  gdbpy_ref<inferior_object> inf_obj ((inferior_object *) datum);\n \n   inf_obj->inferior = NULL;\n \n   /* Deallocate threads list.  */\n   for (th_entry = inf_obj->threads; th_entry != NULL;)\n     {\n-      Py_DECREF (th_entry->thread_obj);\n-\n       th_tmp = th_entry;\n       th_entry = th_entry->next;\n-      xfree (th_tmp);\n+      delete th_tmp;\n     }\n \n   inf_obj->nthreads = 0;"
    },
    {
      "sha": "f1c316c1f17d8acd7da576292cbbb37572a138ea",
      "filename": "gdb/python/py-infthread.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05b08ac1608c8355201db21fe4c871677466f0d5/gdb/python/py-infthread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05b08ac1608c8355201db21fe4c871677466f0d5/gdb/python/py-infthread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-infthread.c?ref=05b08ac1608c8355201db21fe4c871677466f0d5",
      "patch": "@@ -36,17 +36,17 @@ extern PyTypeObject thread_object_type\n       }\t\t\t\t\t\t\t\t\\\n   } while (0)\n \n-thread_object *\n+gdbpy_ref<thread_object>\n create_thread_object (struct thread_info *tp)\n {\n-  thread_object *thread_obj;\n+  gdbpy_ref<thread_object> thread_obj;\n \n   gdbpy_ref<inferior_object> inf_obj = inferior_to_inferior_object (tp->inf);\n   if (inf_obj == NULL)\n     return NULL;\n \n-  thread_obj = PyObject_New (thread_object, &thread_object_type);\n-  if (!thread_obj)\n+  thread_obj.reset (PyObject_New (thread_object, &thread_object_type));\n+  if (thread_obj == NULL)\n     return NULL;\n \n   thread_obj->thread = tp;"
    },
    {
      "sha": "e6a3fe0ec1f8fec5b35f2f9a311d6bb565077af7",
      "filename": "gdb/python/python-internal.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/05b08ac1608c8355201db21fe4c871677466f0d5/gdb/python/python-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/05b08ac1608c8355201db21fe4c871677466f0d5/gdb/python/python-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python-internal.h?ref=05b08ac1608c8355201db21fe4c871677466f0d5",
      "patch": "@@ -468,7 +468,7 @@ PyObject *gdbpy_lookup_objfile (PyObject *self, PyObject *args, PyObject *kw);\n \n PyObject *gdbarch_to_arch_object (struct gdbarch *gdbarch);\n \n-thread_object *create_thread_object (struct thread_info *tp);\n+gdbpy_ref<thread_object> create_thread_object (struct thread_info *tp);\n gdbpy_ref<> thread_to_thread_object (thread_info *thr);;\n gdbpy_ref<inferior_object> inferior_to_inferior_object (inferior *inf);\n "
    }
  ]
}