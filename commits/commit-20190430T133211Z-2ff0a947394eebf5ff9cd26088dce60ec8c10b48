{
  "sha": "2ff0a947394eebf5ff9cd26088dce60ec8c10b48",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmZmMGE5NDczOTRlZWJmNWZmOWNkMjYwODhkY2U2MGVjOGMxMGI0OA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-03-27T21:00:21Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-04-30T13:32:11Z"
    },
    "message": "Fix \"catch exception\" with dynamic linking\n\nWhen an Ada program is dynamically linked against libgnat, and when\none of the standard exceptions is used, the exception object may be\nreferenced by the main executable using a copy relocation.\n\nIn this situation, a \"catch exception\" for those exceptions will not\nmanage to stop.  This happens because, under the hood, \"catch\nexception\" creates an expression object that examines the object\naddresses -- but in this case, the address will be incorrect.\n\nThis patch fixes the problem by arranging for these filter expressions\nto examine all the relevant minimal symbols.  This way, the object\nfrom libgnat will be found as well.\n\nTested on x86-64 Fedora 29.\n\ngdb/ChangeLog\n2019-04-30  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-lang.c (ada_lookup_simple_minsyms): New function.\n\t(create_excep_cond_exprs): Iterate over program spaces.\n\t(ada_exception_catchpoint_cond_string): Examine all minimal\n\tsymbols for exception types.\n\ngdb/testsuite/ChangeLog\n2019-04-30  Tom Tromey  <tromey@adacore.com>\n\n\t* lib/ada.exp (find_ada_tool): New proc.\n\t* lib/gdb.exp (gdb_compile_shlib): Allow .o files as inputs.\n\t* gdb.ada/catch_ex_std.exp: New file.\n\t* gdb.ada/catch_ex_std/foo.adb: New file.\n\t* gdb.ada/catch_ex_std/some_package.adb: New file.\n\t* gdb.ada/catch_ex_std/some_package.ads: New file.",
    "tree": {
      "sha": "9aab473acb25d94e6d595dcc1860ca53f356b553",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9aab473acb25d94e6d595dcc1860ca53f356b553"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2ff0a947394eebf5ff9cd26088dce60ec8c10b48",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2ff0a947394eebf5ff9cd26088dce60ec8c10b48",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2ff0a947394eebf5ff9cd26088dce60ec8c10b48",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a776957c8c3a9177345ee7ca91077234ed7f508e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a776957c8c3a9177345ee7ca91077234ed7f508e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a776957c8c3a9177345ee7ca91077234ed7f508e"
    }
  ],
  "stats": {
    "total": 334,
    "additions": 304,
    "deletions": 30
  },
  "files": [
    {
      "sha": "c09d4d454403dc6d4902405811a5ce355068f47e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2ff0a947394eebf5ff9cd26088dce60ec8c10b48",
      "patch": "@@ -1,3 +1,10 @@\n+2019-04-30  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-lang.c (ada_lookup_simple_minsyms): New function.\n+\t(create_excep_cond_exprs): Iterate over program spaces.\n+\t(ada_exception_catchpoint_cond_string): Examine all minimal\n+\tsymbols for exception types.\n+\n 2019-04-30  Tom Tromey  <tromey@adacore.com>\n \n \tPR c++/24470:"
    },
    {
      "sha": "676cd6d02ae3b839aab74e080aa20a5beb82024f",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 83,
      "deletions": 25,
      "changes": 108,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=2ff0a947394eebf5ff9cd26088dce60ec8c10b48",
      "patch": "@@ -63,6 +63,7 @@\n #include \"common/function-view.h\"\n #include \"common/byte-vector.h\"\n #include <algorithm>\n+#include <map>\n \n /* Define whether or not the C operator '/' truncates towards zero for\n    differently signed operands (truncation direction is undefined in C).\n@@ -4949,6 +4950,36 @@ ada_lookup_simple_minsym (const char *name)\n   return result;\n }\n \n+/* Return all the bound minimal symbols matching NAME according to Ada\n+   decoding rules.  Returns an empty vector if there is no such\n+   minimal symbol.  Names prefixed with \"standard__\" are handled\n+   specially: \"standard__\" is first stripped off, and only static and\n+   global symbols are searched.  */\n+\n+static std::vector<struct bound_minimal_symbol>\n+ada_lookup_simple_minsyms (const char *name)\n+{\n+  std::vector<struct bound_minimal_symbol> result;\n+\n+  symbol_name_match_type match_type = name_match_type_from_name (name);\n+  lookup_name_info lookup_name (name, match_type);\n+\n+  symbol_name_matcher_ftype *match_name\n+    = ada_get_symbol_name_matcher (lookup_name);\n+\n+  for (objfile *objfile : current_program_space->objfiles ())\n+    {\n+      for (minimal_symbol *msymbol : objfile->msymbols ())\n+\t{\n+\t  if (match_name (MSYMBOL_LINKAGE_NAME (msymbol), lookup_name, NULL)\n+\t      && MSYMBOL_TYPE (msymbol) != mst_solib_trampoline)\n+\t    result.push_back ({msymbol, objfile});\n+\t}\n+    }\n+\n+  return result;\n+}\n+\n /* For all subprograms that statically enclose the subprogram of the\n    selected frame, add symbols matching identifier NAME in DOMAIN\n    and their blocks to the list of data in OBSTACKP, as for\n@@ -12437,8 +12468,6 @@ static void\n create_excep_cond_exprs (struct ada_catchpoint *c,\n                          enum ada_exception_catchpoint_kind ex)\n {\n-  struct bp_location *bl;\n-\n   /* Nothing to do if there's no specific exception to catch.  */\n   if (c->excep_string.empty ())\n     return;\n@@ -12447,28 +12476,45 @@ create_excep_cond_exprs (struct ada_catchpoint *c,\n   if (c->loc == NULL)\n     return;\n \n-  /* Compute the condition expression in text form, from the specific\n-     expection we want to catch.  */\n-  std::string cond_string\n-    = ada_exception_catchpoint_cond_string (c->excep_string.c_str (), ex);\n+  /* We have to compute the expression once for each program space,\n+     because the expression may hold the addresses of multiple symbols\n+     in some cases.  */\n+  std::multimap<program_space *, struct bp_location *> loc_map;\n+  for (struct bp_location *bl = c->loc; bl != NULL; bl = bl->next)\n+    loc_map.emplace (bl->pspace, bl);\n+\n+  scoped_restore_current_program_space save_pspace;\n \n-  /* Iterate over all the catchpoint's locations, and parse an\n-     expression for each.  */\n-  for (bl = c->loc; bl != NULL; bl = bl->next)\n+  std::string cond_string;\n+  program_space *last_ps = nullptr;\n+  for (auto iter : loc_map)\n     {\n       struct ada_catchpoint_location *ada_loc\n-\t= (struct ada_catchpoint_location *) bl;\n+\t= (struct ada_catchpoint_location *) iter.second;\n+\n+      if (ada_loc->pspace != last_ps)\n+\t{\n+\t  last_ps = ada_loc->pspace;\n+\t  set_current_program_space (last_ps);\n+\n+\t  /* Compute the condition expression in text form, from the\n+\t     specific expection we want to catch.  */\n+\t  cond_string\n+\t    = ada_exception_catchpoint_cond_string (c->excep_string.c_str (),\n+\t\t\t\t\t\t    ex);\n+\t}\n+\n       expression_up exp;\n \n-      if (!bl->shlib_disabled)\n+      if (!ada_loc->shlib_disabled)\n \t{\n \t  const char *s;\n \n \t  s = cond_string.c_str ();\n \t  try\n \t    {\n-\t      exp = parse_exp_1 (&s, bl->address,\n-\t\t\t\t block_for_pc (bl->address),\n+\t      exp = parse_exp_1 (&s, ada_loc->address,\n+\t\t\t\t block_for_pc (ada_loc->address),\n \t\t\t\t 0);\n \t    }\n \t  catch (const gdb_exception_error &e)\n@@ -13130,18 +13176,18 @@ ada_exception_catchpoint_cond_string (const char *excep_string,\n                                       enum ada_exception_catchpoint_kind ex)\n {\n   int i;\n-  bool is_standard_exc = false;\n   std::string result;\n+  const char *name;\n \n   if (ex == ada_catch_handlers)\n     {\n       /* For exception handlers catchpoints, the condition string does\n          not use the same parameter as for the other exceptions.  */\n-      result = (\"long_integer (GNAT_GCC_exception_Access\"\n-\t\t\"(gcc_exception).all.occurrence.id)\");\n+      name = (\"long_integer (GNAT_GCC_exception_Access\"\n+\t      \"(gcc_exception).all.occurrence.id)\");\n     }\n   else\n-    result = \"long_integer (e)\";\n+    name = \"long_integer (e)\";\n \n   /* The standard exceptions are a special case.  They are defined in\n      runtime units that have been compiled without debugging info; if\n@@ -13160,23 +13206,35 @@ ada_exception_catchpoint_cond_string (const char *excep_string,\n      If an exception named contraint_error is defined in another package of\n      the inferior program, then the only way to specify this exception as a\n      breakpoint condition is to use its fully-qualified named:\n-     e.g. my_package.constraint_error.  */\n+     e.g. my_package.constraint_error.\n+\n+     Furthermore, in some situations a standard exception's symbol may\n+     be present in more than one objfile, because the compiler may\n+     choose to emit copy relocations for them.  So, we have to compare\n+     against all the possible addresses.  */\n \n+  /* Storage for a rewritten symbol name.  */\n+  std::string std_name;\n   for (i = 0; i < sizeof (standard_exc) / sizeof (char *); i++)\n     {\n       if (strcmp (standard_exc [i], excep_string) == 0)\n \t{\n-\t  is_standard_exc = true;\n+\t  std_name = std::string (\"standard.\") + excep_string;\n+\t  excep_string = std_name.c_str ();\n \t  break;\n \t}\n     }\n \n-  result += \" = \";\n-\n-  if (is_standard_exc)\n-    string_appendf (result, \"long_integer (&standard.%s)\", excep_string);\n-  else\n-    string_appendf (result, \"long_integer (&%s)\", excep_string);\n+  excep_string = ada_encode (excep_string);\n+  std::vector<struct bound_minimal_symbol> symbols\n+    = ada_lookup_simple_minsyms (excep_string);\n+  for (const struct bound_minimal_symbol &msym : symbols)\n+    {\n+      if (!result.empty ())\n+\tresult += \" or \";\n+      string_appendf (result, \"%s = %s\", name,\n+\t\t      pulongest (BMSYMBOL_VALUE_ADDRESS (msym)));\n+    }\n \n   return result;\n }"
    },
    {
      "sha": "8d2601b445e550637059d53ae0bdf9136a39d8e7",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=2ff0a947394eebf5ff9cd26088dce60ec8c10b48",
      "patch": "@@ -1,3 +1,12 @@\n+2019-04-30  Tom Tromey  <tromey@adacore.com>\n+\n+\t* lib/ada.exp (find_ada_tool): New proc.\n+\t* lib/gdb.exp (gdb_compile_shlib): Allow .o files as inputs.\n+\t* gdb.ada/catch_ex_std.exp: New file.\n+\t* gdb.ada/catch_ex_std/foo.adb: New file.\n+\t* gdb.ada/catch_ex_std/some_package.adb: New file.\n+\t* gdb.ada/catch_ex_std/some_package.ads: New file.\n+\n 2019-04-30  Tom Tromey  <tromey@adacore.com>\n \n \tPR c++/24470:"
    },
    {
      "sha": "63714a8aa8197305ef43942ebbb924604276bbce",
      "filename": "gdb/testsuite/gdb.ada/catch_ex_std.exp",
      "status": "added",
      "additions": 103,
      "deletions": 0,
      "changes": 103,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/gdb/testsuite/gdb.ada/catch_ex_std.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/gdb/testsuite/gdb.ada/catch_ex_std.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/catch_ex_std.exp?ref=2ff0a947394eebf5ff9cd26088dce60ec8c10b48",
      "patch": "@@ -0,0 +1,103 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+if {[skip_shlib_tests]} {\n+    return 0\n+}\n+\n+load_lib \"ada.exp\"\n+\n+standard_ada_testfile foo\n+\n+set ofile ${binfile}.o\n+\n+set srcfile2 [file join [file dirname $srcfile] some_package.adb]\n+set ofile2 [standard_output_file some_package.o]\n+set sofile [standard_output_file libsome_package.so]\n+\n+set outdir [file dirname $binfile]\n+\n+# To make an Ada shared library we have to jump through a number of\n+# hoops.\n+\n+# First compile to a .o.  We can't compile directly to a .so because\n+# GCC rejects that:\n+#    $ gcc -g -shared -fPIC -o qqz.o some_package.adb\n+#    gcc: error: -c or -S required for Ada\n+# And, we can't compile in \"ada\" mode because dejagnu will try to\n+# invoke gnatmake, which we don't want.\n+if {[target_compile_ada_from_dir $outdir $srcfile2 $ofile2 \\\n+\t object {debug additional_flags=-fPIC}] != \"\"} {\n+    return -1\n+}\n+\n+# Now turn the .o into a shared library.\n+if {[gdb_compile_shlib $ofile2 $sofile \\\n+\t {debug additional_flags=-fPIC}] != \"\"} {\n+    return -1\n+}\n+\n+# Now we can compile the main program to an object file; but again, we\n+# can't compile directly using gnatmake.\n+if {[target_compile_ada_from_dir $outdir $srcfile $ofile object debug] != \"\"} {\n+    return -1\n+}\n+\n+set gnatbind [find_ada_tool gnatbind]\n+set gnatlink [find_ada_tool gnatlink]\n+\n+with_cwd $outdir {\n+    # Bind.\n+    set status [remote_exec host \"$gnatbind -shared foo\"]\n+    if {[lindex $status 0] == 0} {\n+\tpass \"gnatbind foo\"\n+    } else {\n+\tfail \"gnatbind foo\"\n+\treturn -1\n+    }\n+\n+    # Finally, link.\n+    if {[istarget \"*-*-mingw*\"]\n+\t|| [istarget *-*-cygwin*]\n+\t|| [istarget *-*-pe*]\n+\t|| [istarget arm*-*-symbianelf*]} {\n+\t# Do not need anything.\n+\tset linkarg \"\"\n+    } elseif {[istarget *-*-freebsd*] || [istarget *-*-openbsd*]} {\n+\tset linkarg \"-Wl,-rpath,$outdir\"\n+    } else {\n+\tset linkarg \"-Wl,-rpath,\\\\\\$ORIGIN\"\n+    }\n+    set status [remote_exec host \"$gnatlink foo $linkarg -Wl,-lsome_package\"]\n+    if {[lindex $status 0] == 0} {\n+\tpass \"gnatlink foo\"\n+    } else {\n+\tfail \"gnatlink foo\"\n+\treturn -1\n+    }\n+}\n+\n+clean_restart ${testfile}\n+\n+if {![runto_main]} then {\n+   return 0\n+}\n+\n+gdb_test \"catch exception some_kind_of_error\" \\\n+    \"Catchpoint \\[0-9\\]+: `some_kind_of_error' Ada exception\"\n+\n+gdb_test \"cont\" \\\n+    \"Catchpoint \\[0-9\\]+, .* at .*foo\\.adb:\\[0-9\\]+.*\" \\\n+    \"caught the exception\""
    },
    {
      "sha": "3d17dc65ed8b2e11904880e16add74d0245efd80",
      "filename": "gdb/testsuite/gdb.ada/catch_ex_std/foo.adb",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/gdb/testsuite/gdb.ada/catch_ex_std/foo.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/gdb/testsuite/gdb.ada/catch_ex_std/foo.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/catch_ex_std/foo.adb?ref=2ff0a947394eebf5ff9cd26088dce60ec8c10b48",
      "patch": "@@ -0,0 +1,25 @@\n+--  Copyright 2019 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+with Some_Package;\n+\n+procedure Foo is\n+   Some_Val : Integer := 0;\n+begin\n+   Some_Package.Do_Something (Some_Val);\n+   if Some_Val = 1 then\n+      raise Some_Package.Some_Kind_Of_Error;\n+   end if;\n+end Foo;"
    },
    {
      "sha": "34b06d6ddfa492e2074e399c85df66c079ed6a18",
      "filename": "gdb/testsuite/gdb.ada/catch_ex_std/some_package.adb",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/gdb/testsuite/gdb.ada/catch_ex_std/some_package.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/gdb/testsuite/gdb.ada/catch_ex_std/some_package.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/catch_ex_std/some_package.adb?ref=2ff0a947394eebf5ff9cd26088dce60ec8c10b48",
      "patch": "@@ -0,0 +1,21 @@\n+--  Copyright 2019 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+package body Some_Package is\n+   procedure Do_Something (I : in out Integer) is\n+   begin\n+      I := I + 1;\n+   end Do_Something;\n+end Some_Package;"
    },
    {
      "sha": "5cef5ec6627be787f553b9772bc51d6f82256009",
      "filename": "gdb/testsuite/gdb.ada/catch_ex_std/some_package.ads",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/gdb/testsuite/gdb.ada/catch_ex_std/some_package.ads",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/gdb/testsuite/gdb.ada/catch_ex_std/some_package.ads",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/catch_ex_std/some_package.ads?ref=2ff0a947394eebf5ff9cd26088dce60ec8c10b48",
      "patch": "@@ -0,0 +1,19 @@\n+--  Copyright 2019 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+package Some_Package is\n+   Some_Kind_Of_Error : Exception;\n+   procedure Do_Something (I : in out Integer);\n+end Some_Package;"
    },
    {
      "sha": "1345c747c5eebc68e183b0251f0a61411004f300",
      "filename": "gdb/testsuite/lib/ada.exp",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/gdb/testsuite/lib/ada.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/gdb/testsuite/lib/ada.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/ada.exp?ref=2ff0a947394eebf5ff9cd26088dce60ec8c10b48",
      "patch": "@@ -78,3 +78,30 @@ proc standard_ada_testfile {base_file {dir \"\"}} {\n     set srcfile $srcdir/$subdir/$testdir/$testfile.adb\n     set binfile [standard_output_file $testfile]\n }\n+\n+# A helper function to find the appropriate version of a tool.\n+# TOOL is the tool's name, e.g., \"gnatbind\" or \"gnatlink\".\n+\n+proc find_ada_tool {tool} {\n+    set upper [string toupper $tool]\n+\n+    set targname ${upper}_FOR_TARGET\n+    global $targname\n+    if {[info exists $targname]} {\n+\treturn $targname\n+    }\n+\n+    global tool_root_dir\n+    set root \"$tool_root_dir/gcc\"\n+    set result \"\"\n+\n+    if {![is_remote host]} {\n+        set result [lookfor_file $root $tool]\n+    }\n+\n+    if {$result == \"\"} {\n+        set result [transform $tool]\n+    }\n+\n+    return $result\n+}"
    },
    {
      "sha": "57866daa11ffdd7a144dae58724b2d5b2ccb143d",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2ff0a947394eebf5ff9cd26088dce60ec8c10b48/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=2ff0a947394eebf5ff9cd26088dce60ec8c10b48",
      "patch": "@@ -3832,11 +3832,16 @@ proc gdb_compile_shlib {sources dest options} {\n     set outdir [file dirname $dest]\n     set objects \"\"\n     foreach source $sources {\n-       set sourcebase [file tail $source]\n-       if {[gdb_compile $source \"${outdir}/${sourcebase}.o\" object $obj_options] != \"\"} {\n-           return -1\n-       }\n-       lappend objects ${outdir}/${sourcebase}.o\n+\tset sourcebase [file tail $source]\n+\tif {[file extension $source] == \".o\"} {\n+\t    # Already a .o file.\n+\t    lappend objects $source\n+\t} elseif {[gdb_compile $source \"${outdir}/${sourcebase}.o\" object \\\n+\t\t       $obj_options] != \"\"} {\n+\t    return -1\n+\t} else {\n+\t    lappend objects ${outdir}/${sourcebase}.o\n+\t}\n     }\n \n     set link_options $options"
    }
  ]
}