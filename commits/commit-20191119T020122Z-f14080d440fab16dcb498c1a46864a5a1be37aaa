{
  "sha": "f14080d440fab16dcb498c1a46864a5a1be37aaa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjE0MDgwZDQ0MGZhYjE2ZGNiNDk4YzFhNDY4NjRhNWExYmUzN2FhYQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-11-19T01:08:36Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-11-19T02:01:22Z"
    },
    "message": "PR25197, assertion fail coffgen.c\n\nThe testcase in this PR triggered \"BFD_ASSERT (p2->is_sym)\" by\nsneakily generating a C_FILE sym whose value pointed into auxents.\nThe fix then is in the last changed line of this patch, to check\np->is_sym as well as p->u.syment.n_sclass.  The other changes fix\nvarious overflow checks that weren't as solid as they could be.\n\n\tPR 25197\n\t* coffgen.c (coff_find_nearest_line_with_names): Check that C_FILE\n\tu.syment.n_value does point at another C_FILE sym and not into\n\tsome auxent that happens to look like a C_FILE.  Properly check\n\tfor integer overflow and avoid possible pointer wrap-around.\n\tSimplify pr17512 checks.",
    "tree": {
      "sha": "b5013d182ac1d7722342c1ce5fa4d93c6ce3fa02",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b5013d182ac1d7722342c1ce5fa4d93c6ce3fa02"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f14080d440fab16dcb498c1a46864a5a1be37aaa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f14080d440fab16dcb498c1a46864a5a1be37aaa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f14080d440fab16dcb498c1a46864a5a1be37aaa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f14080d440fab16dcb498c1a46864a5a1be37aaa/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "df56ecde8aeed75693f49c9e290427ee5030b05c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/df56ecde8aeed75693f49c9e290427ee5030b05c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/df56ecde8aeed75693f49c9e290427ee5030b05c"
    }
  ],
  "stats": {
    "total": 34,
    "additions": 19,
    "deletions": 15
  },
  "files": [
    {
      "sha": "ffe527c52a397e44f8f7a6e2a00e12e246a54b89",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f14080d440fab16dcb498c1a46864a5a1be37aaa/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f14080d440fab16dcb498c1a46864a5a1be37aaa/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=f14080d440fab16dcb498c1a46864a5a1be37aaa",
      "patch": "@@ -1,3 +1,12 @@\n+2019-11-19  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 25197\n+\t* coffgen.c (coff_find_nearest_line_with_names): Check that C_FILE\n+\tu.syment.n_value does point at another C_FILE sym and not into\n+\tsome auxent that happens to look like a C_FILE.  Properly check\n+\tfor integer overflow and avoid possible pointer wrap-around.\n+\tSimplify pr17512 checks.\n+\n 2019-11-19  Alan Modra  <amodra@gmail.com>\n \n \tPR 25200"
    },
    {
      "sha": "7f26e18c4509167b54eac29046e47960211fdba1",
      "filename": "bfd/coffgen.c",
      "status": "modified",
      "additions": 10,
      "deletions": 15,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f14080d440fab16dcb498c1a46864a5a1be37aaa/bfd/coffgen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f14080d440fab16dcb498c1a46864a5a1be37aaa/bfd/coffgen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffgen.c?ref=f14080d440fab16dcb498c1a46864a5a1be37aaa",
      "patch": "@@ -1814,10 +1814,11 @@ coff_get_normalized_symtab (bfd *abfd)\n   if (! _bfd_coff_get_external_symbols (abfd))\n     return NULL;\n \n-  size = obj_raw_syment_count (abfd) * sizeof (combined_entry_type);\n+  size = obj_raw_syment_count (abfd);\n   /* Check for integer overflow.  */\n-  if (size < obj_raw_syment_count (abfd))\n+  if (size > (bfd_size_type) -1 / sizeof (combined_entry_type))\n     return NULL;\n+  size *= sizeof (combined_entry_type);\n   internal = (combined_entry_type *) bfd_zalloc (abfd, size);\n   if (internal == NULL && size != 0)\n     return NULL;\n@@ -1844,29 +1845,20 @@ coff_get_normalized_symtab (bfd *abfd)\n       symbol_ptr = internal_ptr;\n       internal_ptr->is_sym = TRUE;\n \n-      /* PR 17512: file: 1353-1166-0.004.  */\n-      if (symbol_ptr->u.syment.n_sclass == C_FILE\n-\t  && symbol_ptr->u.syment.n_numaux > 0\n-\t  && raw_src + symesz + symbol_ptr->u.syment.n_numaux\n-\t  * symesz > raw_end)\n-\t{\n-\t  bfd_release (abfd, internal);\n-\t  return NULL;\n-\t}\n-\n       for (i = 0;\n \t   i < symbol_ptr->u.syment.n_numaux;\n \t   i++)\n \t{\n \t  internal_ptr++;\n+\t  raw_src += symesz;\n+\n \t  /* PR 17512: Prevent buffer overrun.  */\n-\t  if (internal_ptr >= internal_end)\n+\t  if (raw_src >= raw_end || internal_ptr >= internal_end)\n \t    {\n \t      bfd_release (abfd, internal);\n \t      return NULL;\n \t    }\n \n-\t  raw_src += symesz;\n \t  bfd_coff_swap_aux_in (abfd, (void *) raw_src,\n \t\t\t\tsymbol_ptr->u.syment.n_type,\n \t\t\t\tsymbol_ptr->u.syment.n_sclass,\n@@ -2408,13 +2400,16 @@ coff_find_nearest_line_with_names (bfd *abfd,\n \t      maxdiff = offset + sec_vma - p2->u.syment.n_value;\n \t    }\n \n+\t  if (p->u.syment.n_value >= cof->raw_syment_count)\n+\t    break;\n+\n \t  /* Avoid endless loops on erroneous files by ensuring that\n \t     we always move forward in the file.  */\n \t  if (p >= cof->raw_syments + p->u.syment.n_value)\n \t    break;\n \n \t  p = cof->raw_syments + p->u.syment.n_value;\n-\t  if (p > pend || p->u.syment.n_sclass != C_FILE)\n+\t  if (!p->is_sym || p->u.syment.n_sclass != C_FILE)\n \t    break;\n \t}\n     }"
    }
  ]
}