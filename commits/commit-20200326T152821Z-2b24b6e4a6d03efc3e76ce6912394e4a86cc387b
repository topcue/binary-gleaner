{
  "sha": "2b24b6e4a6d03efc3e76ce6912394e4a86cc387b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmIyNGI2ZTRhNmQwM2VmYzNlNzZjZTY5MTIzOTRlNGE4NmNjMzg3Yg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-26T15:28:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-26T15:28:21Z"
    },
    "message": "Remove dwarf2_cu::base_known\n\nThis removes dwarf2_cu::base_known, changing base_address to be a\ngdb::optional.\n\ngdb/ChangeLog\n2020-03-26  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (struct dwarf2_cu) <base_known>: Remove.\n\t<base_address>: Now an optional.\n\t(dwarf2_find_base_address, dwarf2_rnglists_process)\n\t(dwarf2_ranges_process, fill_in_loclist_baton)\n\t(dwarf2_symbol_mark_computed): Update.",
    "tree": {
      "sha": "1e43c47fc8d544607477008f0b73547b641b0fef",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1e43c47fc8d544607477008f0b73547b641b0fef"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2b24b6e4a6d03efc3e76ce6912394e4a86cc387b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2b24b6e4a6d03efc3e76ce6912394e4a86cc387b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2b24b6e4a6d03efc3e76ce6912394e4a86cc387b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2b24b6e4a6d03efc3e76ce6912394e4a86cc387b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c2d50fd0b30f640301c3736038bec82b40a3f0dc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c2d50fd0b30f640301c3736038bec82b40a3f0dc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c2d50fd0b30f640301c3736038bec82b40a3f0dc"
    }
  ],
  "stats": {
    "total": 55,
    "additions": 25,
    "deletions": 30
  },
  "files": [
    {
      "sha": "2ebdab350a1a2231f606157cddd2af38a9442233",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b24b6e4a6d03efc3e76ce6912394e4a86cc387b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b24b6e4a6d03efc3e76ce6912394e4a86cc387b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2b24b6e4a6d03efc3e76ce6912394e4a86cc387b",
      "patch": "@@ -1,3 +1,11 @@\n+2020-03-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (struct dwarf2_cu) <base_known>: Remove.\n+\t<base_address>: Now an optional.\n+\t(dwarf2_find_base_address, dwarf2_rnglists_process)\n+\t(dwarf2_ranges_process, fill_in_loclist_baton)\n+\t(dwarf2_symbol_mark_computed): Update.\n+\n 2020-03-26  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (struct die_info): Move to die.h."
    },
    {
      "sha": "d4cfb865fe53e9d46c92dabcc869dc8dfbbd3722",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 17,
      "deletions": 30,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b24b6e4a6d03efc3e76ce6912394e4a86cc387b/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b24b6e4a6d03efc3e76ce6912394e4a86cc387b/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=2b24b6e4a6d03efc3e76ce6912394e4a86cc387b",
      "patch": "@@ -393,10 +393,7 @@ struct dwarf2_cu\n   struct comp_unit_head header {};\n \n   /* Base address of this compilation unit.  */\n-  CORE_ADDR base_address = 0;\n-\n-  /* Non-zero if base_address has been set.  */\n-  int base_known = 0;\n+  gdb::optional<CORE_ADDR> base_address;\n \n   /* The language we are debugging.  */\n   enum language language = language_unknown;\n@@ -5783,23 +5780,16 @@ dwarf2_find_base_address (struct die_info *die, struct dwarf2_cu *cu)\n {\n   struct attribute *attr;\n \n-  cu->base_known = 0;\n-  cu->base_address = 0;\n+  cu->base_address.reset ();\n \n   attr = dwarf2_attr (die, DW_AT_entry_pc, cu);\n   if (attr != nullptr)\n-    {\n-      cu->base_address = attr->value_as_address ();\n-      cu->base_known = 1;\n-    }\n+    cu->base_address = attr->value_as_address ();\n   else\n     {\n       attr = dwarf2_attr (die, DW_AT_low_pc, cu);\n       if (attr != nullptr)\n-\t{\n-\t  cu->base_address = attr->value_as_address ();\n-\t  cu->base_known = 1;\n-\t}\n+\tcu->base_address = attr->value_as_address ();\n     }\n }\n \n@@ -13441,13 +13431,11 @@ dwarf2_rnglists_process (unsigned offset, struct dwarf2_cu *cu,\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   bfd *obfd = objfile->obfd;\n   /* Base address selection entry.  */\n-  CORE_ADDR base;\n-  int found_base;\n+  gdb::optional<CORE_ADDR> base;\n   const gdb_byte *buffer;\n   CORE_ADDR baseaddr;\n   bool overflow = false;\n \n-  found_base = cu->base_known;\n   base = cu->base_address;\n \n   dwarf2_per_objfile->rnglists.read (objfile);\n@@ -13486,7 +13474,6 @@ dwarf2_rnglists_process (unsigned offset, struct dwarf2_cu *cu,\n \t      break;\n \t    }\n \t  base = cu->header.read_address (obfd, buffer, &bytes_read);\n-\t  found_base = 1;\n \t  buffer += bytes_read;\n \t  break;\n \tcase DW_RLE_start_length:\n@@ -13544,7 +13531,7 @@ dwarf2_rnglists_process (unsigned offset, struct dwarf2_cu *cu,\n       if (rlet == DW_RLE_base_address)\n \tcontinue;\n \n-      if (!found_base)\n+      if (!base.has_value ())\n \t{\n \t  /* We have no valid base address for the ranges\n \t     data.  */\n@@ -13563,8 +13550,8 @@ dwarf2_rnglists_process (unsigned offset, struct dwarf2_cu *cu,\n       if (range_beginning == range_end)\n \tcontinue;\n \n-      range_beginning += base;\n-      range_end += base;\n+      range_beginning += *base;\n+      range_end += *base;\n \n       /* A not-uncommon case of bad debug info.\n \t Don't pollute the addrmap with bad data.  */\n@@ -13608,16 +13595,14 @@ dwarf2_ranges_process (unsigned offset, struct dwarf2_cu *cu,\n   unsigned int addr_size = cu_header->addr_size;\n   CORE_ADDR mask = ~(~(CORE_ADDR)1 << (addr_size * 8 - 1));\n   /* Base address selection entry.  */\n-  CORE_ADDR base;\n-  int found_base;\n+  gdb::optional<CORE_ADDR> base;\n   unsigned int dummy;\n   const gdb_byte *buffer;\n   CORE_ADDR baseaddr;\n \n   if (cu_header->version >= 5)\n     return dwarf2_rnglists_process (offset, cu, callback);\n \n-  found_base = cu->base_known;\n   base = cu->base_address;\n \n   dwarf2_per_objfile->ranges.read (objfile);\n@@ -13654,11 +13639,10 @@ dwarf2_ranges_process (unsigned offset, struct dwarf2_cu *cu,\n \t  /* If we found the largest possible address, then we already\n \t     have the base address in range_end.  */\n \t  base = range_end;\n-\t  found_base = 1;\n \t  continue;\n \t}\n \n-      if (!found_base)\n+      if (!base.has_value ())\n \t{\n \t  /* We have no valid base address for the ranges\n \t     data.  */\n@@ -13677,8 +13661,8 @@ dwarf2_ranges_process (unsigned offset, struct dwarf2_cu *cu,\n       if (range_beginning == range_end)\n \tcontinue;\n \n-      range_beginning += base;\n-      range_end += base;\n+      range_beginning += *base;\n+      range_end += *base;\n \n       /* A not-uncommon case of bad debug info.\n \t Don't pollute the addrmap with bad data.  */\n@@ -22756,7 +22740,10 @@ fill_in_loclist_baton (struct dwarf2_cu *cu,\n      don't run off the edge of the section.  */\n   baton->size = section->size - DW_UNSND (attr);\n   baton->data = section->buffer + DW_UNSND (attr);\n-  baton->base_address = cu->base_address;\n+  if (cu->base_address.has_value ())\n+    baton->base_address = *cu->base_address;\n+  else\n+    baton->base_address = 0;\n   baton->from_dwo = cu->dwo_unit != NULL;\n }\n \n@@ -22781,7 +22768,7 @@ dwarf2_symbol_mark_computed (const struct attribute *attr, struct symbol *sym,\n \n       fill_in_loclist_baton (cu, baton, attr);\n \n-      if (cu->base_known == 0)\n+      if (!cu->base_address.has_value ())\n \tcomplaint (_(\"Location list used without \"\n \t\t     \"specifying the CU base address.\"));\n "
    }
  ]
}