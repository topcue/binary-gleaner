{
  "sha": "39e7eccae602562368438c955b31f1d0e37feaa5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzllN2VjY2FlNjAyNTYyMzY4NDM4Yzk1NWIzMWYxZDBlMzdmZWFhNQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-18T21:01:33Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-23T12:34:11Z"
    },
    "message": "gdb: Convert language la_is_string_type_p field to a method\n\nThis commit changes the language_data::la_is_string_type_p function\npointer member variable into a member function of language_defn.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* ada-lang.c (ada_language_data): Delete la_is_string_type_p\n\tinitializer.\n\t(ada_language::is_string_type_p): New member function.\n\t* c-lang.c (c_language_data): Delete la_is_string_type_p\n\tinitializer.\n\t(cplus_language_data): Likewise.\n\t(asm_language_data): Likewise.\n\t(minimal_language_data): Likewise.\n\t* d-lang.c (d_language_data): Likewise.\n\t* f-lang.c (f_is_string_type_p): Delete function, implementation\n\tmoved to f_language::is_string_type_p.\n\t(f_language_data): Delete la_is_string_type_p initializer.\n\t(f_language::is_string_type_p): New member function,\n\timplementation from f_is_string_type_p.\n\t* go-lang.c (go_is_string_type_p): Delete function, implementation\n\tmoved to go_language::is_string_type_p.\n\t(go_language_data): Delete la_is_string_type_p initializer.\n\t(go_language::is_string_type_p): New member function,\n\timplementation from go_is_string_type_p.\n\t* language.c (language_defn::is_string_type_p): Define new member\n\tfunction.\n\t(default_is_string_type_p): Make static, add comment copied from\n\theader file.\n\t(unknown_language_data): Delete la_is_string_type_p initializer.\n\t(unknown_language::is_string_type_p): New member function.\n\t(auto_language_data): Delete la_is_string_type_p initializer.\n\t(auto_language::is_string_type_p): New member function.\n\t* language.h (language_data): Delete la_is_string_type_p field.\n\t(language_defn::is_string_type_p): Declare new function.\n\t(default_is_string_type_p): Delete desclaration, move comment to\n\tdefinition.\n\t* m2-lang.c (m2_is_string_type_p): Delete function, implementation\n\tmoved to m2_language::is_string_type_p.\n\t(m2_language_data): Delete la_is_string_type_p initializer.\n\t(m2_language::is_string_type_p): New member function,\n\timplementation from m2_is_string_type_p.\n\t* objc-lang.c (objc_language_data): Delete la_is_string_type_p\n\tinitializer.\n\t* opencl-lang.c (opencl_language_data): Likewise.\n\t* p-lang.c (pascal_is_string_type_p): Delete function,\n\timplementation moved to pascal_language::is_string_type_p.\n\t(pascal_language_data): Delete la_is_string_type_p initializer.\n\t(pascal_language::is_string_type_p): New member function,\n\timplementation from pascal_is_string_type_p.\n\t* rust-lang.c (rust_is_string_type_p): Delete function,\n\timplementation moved to rust_language::is_string_type_p.\n\t(rust_language_data): Delete la_is_string_type_p initializer.\n\t(rust_language::is_string_type_p): New member function,\n\timplementation from rust_is_string_type_p.\n\t* valprint.c (val_print_scalar_or_string_type_p): Update call to\n\tis_string_type_p.",
    "tree": {
      "sha": "3236e9c2818f16148ab08612b7a4ee8e3ec84540",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3236e9c2818f16148ab08612b7a4ee8e3ec84540"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/39e7eccae602562368438c955b31f1d0e37feaa5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39e7eccae602562368438c955b31f1d0e37feaa5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/39e7eccae602562368438c955b31f1d0e37feaa5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39e7eccae602562368438c955b31f1d0e37feaa5/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4ffc13fb0e4a1c5158cdf00f2751378653101207",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4ffc13fb0e4a1c5158cdf00f2751378653101207",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4ffc13fb0e4a1c5158cdf00f2751378653101207"
    }
  ],
  "stats": {
    "total": 253,
    "additions": 156,
    "deletions": 97
  },
  "files": [
    {
      "sha": "af34af84e33f8cc079ee0a577c38abfe0341dfd1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=39e7eccae602562368438c955b31f1d0e37feaa5",
      "patch": "@@ -1,3 +1,57 @@\n+2020-06-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* ada-lang.c (ada_language_data): Delete la_is_string_type_p\n+\tinitializer.\n+\t(ada_language::is_string_type_p): New member function.\n+\t* c-lang.c (c_language_data): Delete la_is_string_type_p\n+\tinitializer.\n+\t(cplus_language_data): Likewise.\n+\t(asm_language_data): Likewise.\n+\t(minimal_language_data): Likewise.\n+\t* d-lang.c (d_language_data): Likewise.\n+\t* f-lang.c (f_is_string_type_p): Delete function, implementation\n+\tmoved to f_language::is_string_type_p.\n+\t(f_language_data): Delete la_is_string_type_p initializer.\n+\t(f_language::is_string_type_p): New member function,\n+\timplementation from f_is_string_type_p.\n+\t* go-lang.c (go_is_string_type_p): Delete function, implementation\n+\tmoved to go_language::is_string_type_p.\n+\t(go_language_data): Delete la_is_string_type_p initializer.\n+\t(go_language::is_string_type_p): New member function,\n+\timplementation from go_is_string_type_p.\n+\t* language.c (language_defn::is_string_type_p): Define new member\n+\tfunction.\n+\t(default_is_string_type_p): Make static, add comment copied from\n+\theader file.\n+\t(unknown_language_data): Delete la_is_string_type_p initializer.\n+\t(unknown_language::is_string_type_p): New member function.\n+\t(auto_language_data): Delete la_is_string_type_p initializer.\n+\t(auto_language::is_string_type_p): New member function.\n+\t* language.h (language_data): Delete la_is_string_type_p field.\n+\t(language_defn::is_string_type_p): Declare new function.\n+\t(default_is_string_type_p): Delete desclaration, move comment to\n+\tdefinition.\n+\t* m2-lang.c (m2_is_string_type_p): Delete function, implementation\n+\tmoved to m2_language::is_string_type_p.\n+\t(m2_language_data): Delete la_is_string_type_p initializer.\n+\t(m2_language::is_string_type_p): New member function,\n+\timplementation from m2_is_string_type_p.\n+\t* objc-lang.c (objc_language_data): Delete la_is_string_type_p\n+\tinitializer.\n+\t* opencl-lang.c (opencl_language_data): Likewise.\n+\t* p-lang.c (pascal_is_string_type_p): Delete function,\n+\timplementation moved to pascal_language::is_string_type_p.\n+\t(pascal_language_data): Delete la_is_string_type_p initializer.\n+\t(pascal_language::is_string_type_p): New member function,\n+\timplementation from pascal_is_string_type_p.\n+\t* rust-lang.c (rust_is_string_type_p): Delete function,\n+\timplementation moved to rust_language::is_string_type_p.\n+\t(rust_language_data): Delete la_is_string_type_p initializer.\n+\t(rust_language::is_string_type_p): New member function,\n+\timplementation from rust_is_string_type_p.\n+\t* valprint.c (val_print_scalar_or_string_type_p): Update call to\n+\tis_string_type_p.\n+\n 2020-06-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* ada-lang.c (ada_language_data): Delete la_print_typedef"
    },
    {
      "sha": "9b0c2efbfe21a9f347d380cf7e4ed48fe59c62d5",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=39e7eccae602562368438c955b31f1d0e37feaa5",
      "patch": "@@ -13687,7 +13687,6 @@ extern const struct language_data ada_language_data =\n   0,                            /* c-style arrays */\n   1,                            /* String lower bound */\n   &ada_varobj_ops,\n-  ada_is_string_type,\n   \"(...)\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n@@ -14139,6 +14138,14 @@ class ada_language : public language_defn\n     ada_print_typedef (type, new_symbol, stream);\n   }\n \n+  /* See language.h.  */\n+\n+  bool is_string_type_p (struct type *type) const override\n+  {\n+    return ada_is_string_type (type);\n+  }\n+\n+\n protected:\n   /* See language.h.  */\n "
    },
    {
      "sha": "f29f2cef610458974ccc5f83342d6efaaf8ce624",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=39e7eccae602562368438c955b31f1d0e37feaa5",
      "patch": "@@ -895,7 +895,6 @@ extern const struct language_data c_language_data =\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n   &c_varobj_ops,\n-  c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n@@ -997,7 +996,6 @@ extern const struct language_data cplus_language_data =\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n   &cplus_varobj_ops,\n-  c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n@@ -1196,7 +1194,6 @@ extern const struct language_data asm_language_data =\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n   &default_varobj_ops,\n-  c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n@@ -1253,7 +1250,6 @@ extern const struct language_data minimal_language_data =\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n   &default_varobj_ops,\n-  c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n "
    },
    {
      "sha": "4ebb011ee9b0374251209123a646939a554bc209",
      "filename": "gdb/d-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/d-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/d-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-lang.c?ref=39e7eccae602562368438c955b31f1d0e37feaa5",
      "patch": "@@ -148,7 +148,6 @@ extern const struct language_data d_language_data =\n   1,\t\t\t\t/* C-style arrays.  */\n   0,\t\t\t\t/* String lower bound.  */\n   &default_varobj_ops,\n-  c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n "
    },
    {
      "sha": "58b41d11d11a5b4d4a328af83a8c74bebe5a01f8",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 10,
      "deletions": 12,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=39e7eccae602562368438c955b31f1d0e37feaa5",
      "patch": "@@ -291,17 +291,6 @@ evaluate_subexp_f (struct type *expect_type, struct expression *exp,\n   return nullptr;\n }\n \n-/* Return true if TYPE is a string.  */\n-\n-static bool\n-f_is_string_type_p (struct type *type)\n-{\n-  type = check_typedef (type);\n-  return (type->code () == TYPE_CODE_STRING\n-\t  || (type->code () == TYPE_CODE_ARRAY\n-\t      && TYPE_TARGET_TYPE (type)->code () == TYPE_CODE_CHAR));\n-}\n-\n /* Special expression lengths for Fortran.  */\n \n static void\n@@ -519,7 +508,6 @@ extern const struct language_data f_language_data =\n   0,\t\t\t\t/* arrays are first-class (not c-style) */\n   1,\t\t\t\t/* String lower bound */\n   &default_varobj_ops,\n-  f_is_string_type_p,\n   \"(...)\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n@@ -709,6 +697,16 @@ class f_language : public language_defn\n     f_print_typedef (type, new_symbol, stream);\n   }\n \n+  /* See language.h.  */\n+\n+  bool is_string_type_p (struct type *type) const override\n+  {\n+    type = check_typedef (type);\n+    return (type->code () == TYPE_CODE_STRING\n+\t    || (type->code () == TYPE_CODE_ARRAY\n+\t\t&& TYPE_TARGET_TYPE (type)->code () == TYPE_CODE_CHAR));\n+  }\n+\n protected:\n \n   /* See language.h.  */"
    },
    {
      "sha": "cb42ef1b7cfe926d9d713a4d13283700e484668b",
      "filename": "gdb/go-lang.c",
      "status": "modified",
      "additions": 10,
      "deletions": 11,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/go-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/go-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.c?ref=39e7eccae602562368438c955b31f1d0e37feaa5",
      "patch": "@@ -131,16 +131,6 @@ go_classify_struct_type (struct type *type)\n   return GO_TYPE_NONE;\n }\n \n-/* Return true if TYPE is a string.  */\n-\n-static bool\n-go_is_string_type_p (struct type *type)\n-{\n-  type = check_typedef (type);\n-  return (type->code () == TYPE_CODE_STRUCT\n-\t  && go_classify_struct_type (type) == GO_TYPE_STRING);\n-}\n-\n /* Subroutine of unpack_mangled_go_symbol to simplify it.\n    Given \"[foo.]bar.baz\", store \"bar\" in *PACKAGEP and \"baz\" in *OBJECTP.\n    We stomp on the last '.' to nul-terminate \"bar\".\n@@ -533,7 +523,6 @@ extern const struct language_data go_language_data =\n   1,\t\t\t\t/* C-style arrays.  */\n   0,\t\t\t\t/* String lower bound.  */\n   &default_varobj_ops,\n-  go_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n@@ -638,6 +627,16 @@ class go_language : public language_defn\n   {\n     return go_parse (ps);\n   }\n+\n+  /* See language.h.  */\n+\n+  bool is_string_type_p (struct type *type) const override\n+  {\n+    type = check_typedef (type);\n+    return (type->code () == TYPE_CODE_STRUCT\n+\t    && go_classify_struct_type (type) == GO_TYPE_STRING);\n+  }\n+\n };\n \n /* Single instance of the Go language class.  */"
    },
    {
      "sha": "c993cfc57a6e1d0e96e74be555ea5d8c41111670",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 25,
      "deletions": 4,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=39e7eccae602562368438c955b31f1d0e37feaa5",
      "patch": "@@ -690,6 +690,14 @@ language_defn::print_typedef (struct type *type, struct symbol *new_symbol,\n   c_print_typedef (type, new_symbol, stream);\n }\n \n+/* See language.h.  */\n+\n+bool\n+language_defn::is_string_type_p (struct type *type) const\n+{\n+  return c_is_string_type_p (type);\n+}\n+\n /* The default implementation of the get_symbol_name_matcher_inner method\n    from the language_defn class.  Matches with strncmp_iw.  */\n \n@@ -741,9 +749,10 @@ language_defn::get_symbol_name_matcher_inner\n   return default_symbol_name_matcher;\n }\n \n-/* See language.h.  */\n+/* Return true if TYPE is a string type, otherwise return false.  This\n+   default implementation only detects TYPE_CODE_STRING.  */\n \n-bool\n+static bool\n default_is_string_type_p (struct type *type)\n {\n   type = check_typedef (type);\n@@ -789,7 +798,6 @@ extern const struct language_data unknown_language_data =\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n   &default_varobj_ops,\n-  default_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n@@ -884,6 +892,13 @@ class unknown_language : public language_defn\n   {\n     error (_(\"unimplemented unknown_language::print_typedef called\"));\n   }\n+\n+  /* See language.h.  */\n+\n+  bool is_string_type_p (struct type *type) const override\n+  {\n+    return default_is_string_type_p (type);\n+  }\n };\n \n /* Single instance of the unknown language class.  */\n@@ -909,7 +924,6 @@ extern const struct language_data auto_language_data =\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n   &default_varobj_ops,\n-  default_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n@@ -1004,6 +1018,13 @@ class auto_language : public language_defn\n   {\n     error (_(\"unimplemented auto_language::print_typedef called\"));\n   }\n+\n+  /* See language.h.  */\n+\n+  bool is_string_type_p (struct type *type) const override\n+  {\n+    return default_is_string_type_p (type);\n+  }\n };\n \n /* Single instance of the fake \"auto\" language.  */"
    },
    {
      "sha": "d2e5b733077d30c44ec915ad932c5097bb38a5ca",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 3,
      "deletions": 7,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=39e7eccae602562368438c955b31f1d0e37feaa5",
      "patch": "@@ -267,9 +267,6 @@ struct language_data\n     /* Various operations on varobj.  */\n     const struct lang_varobj_ops *la_varobj_ops;\n \n-    /* Return true if TYPE is a string type.  */\n-    bool (*la_is_string_type_p) (struct type *type);\n-\n     /* This string is used by the 'set print max-depth' setting.  When GDB\n        replaces a struct or union (during value printing) that is \"too\n        deep\" this string is displayed instead.  */\n@@ -553,6 +550,9 @@ struct language_defn : language_data\n   virtual void print_typedef (struct type *type, struct symbol *new_symbol,\n \t\t\t      struct ui_file *stream) const;\n \n+  /* Return true if TYPE is a string type.  */\n+  virtual bool is_string_type_p (struct type *type) const;\n+\n protected:\n \n   /* This is the overridable part of the GET_SYMBOL_NAME_MATCHER method.\n@@ -684,10 +684,6 @@ extern enum language set_language (enum language);\n \n extern int pointer_type (struct type *);\n \n-/* Return true if TYPE is a string type, otherwise return false.  This\n-   default implementation only detects TYPE_CODE_STRING.  */\n-extern bool default_is_string_type_p (struct type *type);\n-\n /* Error messages */\n \n extern void range_error (const char *, ...) ATTRIBUTE_PRINTF (1, 2);"
    },
    {
      "sha": "2c39359d2898e38e1c061cef142eb8c977c2f088",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 19,
      "deletions": 22,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=39e7eccae602562368438c955b31f1d0e37feaa5",
      "patch": "@@ -42,27 +42,6 @@ m2_printchar (int c, struct type *type, struct ui_file *stream)\n   fputs_filtered (\"'\", stream);\n }\n \n-/* Return true if TYPE is a string.  */\n-\n-static bool\n-m2_is_string_type_p (struct type *type)\n-{\n-  type = check_typedef (type);\n-  if (type->code () == TYPE_CODE_ARRAY\n-      && TYPE_LENGTH (type) > 0\n-      && TYPE_LENGTH (TYPE_TARGET_TYPE (type)) > 0)\n-    {\n-      struct type *elttype = check_typedef (TYPE_TARGET_TYPE (type));\n-\n-      if (TYPE_LENGTH (elttype) == 1\n-\t  && (elttype->code () == TYPE_CODE_INT\n-\t      || elttype->code () == TYPE_CODE_CHAR))\n-\treturn true;\n-    }\n-\n-  return false;\n-}\n-\n static struct value *\n evaluate_subexp_modula2 (struct type *expect_type, struct expression *exp,\n \t\t\t int *pos, enum noside noside)\n@@ -235,7 +214,6 @@ extern const struct language_data m2_language_data =\n   0,\t\t\t\t/* arrays are first-class (not c-style) */\n   0,\t\t\t\t/* String lower bound */\n   &default_varobj_ops,\n-  m2_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n@@ -435,6 +413,25 @@ class m2_language : public language_defn\n     m2_print_typedef (type, new_symbol, stream);\n   }\n \n+  /* See language.h.  */\n+\n+  bool is_string_type_p (struct type *type) const override\n+  {\n+    type = check_typedef (type);\n+    if (type->code () == TYPE_CODE_ARRAY\n+\t&& TYPE_LENGTH (type) > 0\n+\t&& TYPE_LENGTH (TYPE_TARGET_TYPE (type)) > 0)\n+      {\n+\tstruct type *elttype = check_typedef (TYPE_TARGET_TYPE (type));\n+\n+\tif (TYPE_LENGTH (elttype) == 1\n+\t    && (elttype->code () == TYPE_CODE_INT\n+\t\t|| elttype->code () == TYPE_CODE_CHAR))\n+\t  return true;\n+      }\n+\n+    return false;\n+  }\n };\n \n /* Single instance of the M2 language.  */"
    },
    {
      "sha": "63cdac1b03568653e9a2c080e58717e579eb6f68",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=39e7eccae602562368438c955b31f1d0e37feaa5",
      "patch": "@@ -343,7 +343,6 @@ extern const struct language_data objc_language_data =\n   1,\t\t\t\t/* C-style arrays */\n   0,\t\t\t\t/* String lower bound */\n   &default_varobj_ops,\n-  c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n "
    },
    {
      "sha": "eccf1df9621b76c04ec46bb9256154a216474e9f",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=39e7eccae602562368438c955b31f1d0e37feaa5",
      "patch": "@@ -1022,7 +1022,6 @@ extern const struct language_data opencl_language_data =\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n   &default_varobj_ops,\n-  c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n "
    },
    {
      "sha": "07afbdda5bb4866e4026c6632dc98b5f3691152d",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 7,
      "deletions": 11,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=39e7eccae602562368438c955b31f1d0e37feaa5",
      "patch": "@@ -152,16 +152,6 @@ is_pascal_string_type (struct type *type,int *length_pos,\n   return 0;\n }\n \n-/* This is a wrapper around IS_PASCAL_STRING_TYPE that returns true if TYPE\n-   is a string.  */\n-\n-static bool\n-pascal_is_string_type_p (struct type *type)\n-{\n-  return is_pascal_string_type (type, nullptr, nullptr, nullptr,\n-\t\t\t\tnullptr, nullptr) > 0;\n-}\n-\n static void pascal_one_char (int, struct ui_file *, int *);\n \n /* Print the character C on STREAM as part of the contents of a literal\n@@ -282,7 +272,6 @@ extern const struct language_data pascal_language_data =\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n   &default_varobj_ops,\n-  pascal_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n@@ -502,6 +491,13 @@ class pascal_language : public language_defn\n     pascal_print_typedef (type, new_symbol, stream);\n   }\n \n+  /* See language.h.  */\n+\n+  bool is_string_type_p (struct type *type) const override\n+  {\n+    return is_pascal_string_type (type, nullptr, nullptr, nullptr,\n+\t\t\t\t  nullptr, nullptr) > 0;\n+  }\n };\n \n /* Single instance of the Pascal language class.  */"
    },
    {
      "sha": "d1efea19e91823e7760e0ec25d04e99b1bedffab",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 19,
      "deletions": 21,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=39e7eccae602562368438c955b31f1d0e37feaa5",
      "patch": "@@ -226,26 +226,6 @@ rust_chartype_p (struct type *type)\n \t  && TYPE_UNSIGNED (type));\n }\n \n-/* Return true if TYPE is a string type.  */\n-\n-static bool\n-rust_is_string_type_p (struct type *type)\n-{\n-  LONGEST low_bound, high_bound;\n-\n-  type = check_typedef (type);\n-  return ((type->code () == TYPE_CODE_STRING)\n-\t  || (type->code () == TYPE_CODE_PTR\n-\t      && (TYPE_TARGET_TYPE (type)->code () == TYPE_CODE_ARRAY\n-\t\t  && rust_u8_type_p (TYPE_TARGET_TYPE (TYPE_TARGET_TYPE (type)))\n-\t\t  && get_array_bounds (TYPE_TARGET_TYPE (type), &low_bound,\n-\t\t\t\t       &high_bound)))\n-\t  || (type->code () == TYPE_CODE_STRUCT\n-\t      && !rust_enum_p (type)\n-\t      && rust_slice_type_p (type)\n-\t      && strcmp (type->name (), \"&str\") == 0));\n-}\n-\n /* If VALUE represents a trait object pointer, return the underlying\n    pointer with the correct (i.e., runtime) type.  Otherwise, return\n    NULL.  */\n@@ -1946,7 +1926,6 @@ extern const struct language_data rust_language_data =\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n   &default_varobj_ops,\n-  rust_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n };\n \n@@ -2152,6 +2131,25 @@ class rust_language : public language_defn\n     type_print (type, \"\", stream, 0);\n     fprintf_filtered (stream, \";\");\n   }\n+\n+  /* See language.h.  */\n+\n+  bool is_string_type_p (struct type *type) const override\n+  {\n+    LONGEST low_bound, high_bound;\n+\n+    type = check_typedef (type);\n+    return ((type->code () == TYPE_CODE_STRING)\n+\t    || (type->code () == TYPE_CODE_PTR\n+\t\t&& (TYPE_TARGET_TYPE (type)->code () == TYPE_CODE_ARRAY\n+\t\t    && rust_u8_type_p (TYPE_TARGET_TYPE (TYPE_TARGET_TYPE (type)))\n+\t\t    && get_array_bounds (TYPE_TARGET_TYPE (type), &low_bound,\n+\t\t\t\t\t &high_bound)))\n+\t    || (type->code () == TYPE_CODE_STRUCT\n+\t\t&& !rust_enum_p (type)\n+\t\t&& rust_slice_type_p (type)\n+\t\t&& strcmp (type->name (), \"&str\") == 0));\n+  }\n };\n \n /* Single instance of the Rust language class.  */"
    },
    {
      "sha": "db98ca2abc986a84d6bc5ac3468a9f18fbdfe5d6",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39e7eccae602562368438c955b31f1d0e37feaa5/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=39e7eccae602562368438c955b31f1d0e37feaa5",
      "patch": "@@ -298,7 +298,7 @@ val_print_scalar_or_string_type_p (struct type *type,\n \t\t\t\t   const struct language_defn *language)\n {\n   return (val_print_scalar_type_p (type)\n-\t  || language->la_is_string_type_p (type));\n+\t  || language->is_string_type_p (type));\n }\n \n /* See its definition in value.h.  */"
    }
  ]
}