{
  "sha": "2042b506c85274b4c652fbc9291be65b2550104d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjA0MmI1MDZjODUyNzRiNGM2NTJmYmM5MjkxYmU2NWIyNTUwMTA0ZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-16T20:27:28Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-25T13:48:33Z"
    },
    "message": "Introduce the refresh method\n\nThis adds tui_win_info::refresh and updates tui_source_window_base to\nimplement it as well.  This lets us simplify tui_refresh_all, removing\na check of the window type.\n\ngdb/ChangeLog\n2019-06-25  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-wingeneral.c (tui_win_info::refresh)\n\t(tui_source_window_base::refresh): New methods.\n\t(tui_refresh_all): Call the refresh method.\n\t* tui/tui-data.h (struct tui_win_info)\n\t(struct tui_source_window_base) <refresh>: New method.",
    "tree": {
      "sha": "4ce0d7619ac9c86214b93bf7a7a73d3c4fcde801",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4ce0d7619ac9c86214b93bf7a7a73d3c4fcde801"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2042b506c85274b4c652fbc9291be65b2550104d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2042b506c85274b4c652fbc9291be65b2550104d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2042b506c85274b4c652fbc9291be65b2550104d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2042b506c85274b4c652fbc9291be65b2550104d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "56122977c04496325ca9d83231e7751ab94d6b14",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/56122977c04496325ca9d83231e7751ab94d6b14",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/56122977c04496325ca9d83231e7751ab94d6b14"
    }
  ],
  "stats": {
    "total": 43,
    "additions": 32,
    "deletions": 11
  },
  "files": [
    {
      "sha": "1fea395ff8ac3d22b5c8567be3ea07fcf359bd0c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2042b506c85274b4c652fbc9291be65b2550104d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2042b506c85274b4c652fbc9291be65b2550104d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2042b506c85274b4c652fbc9291be65b2550104d",
      "patch": "@@ -1,3 +1,11 @@\n+2019-06-25  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-wingeneral.c (tui_win_info::refresh)\n+\t(tui_source_window_base::refresh): New methods.\n+\t(tui_refresh_all): Call the refresh method.\n+\t* tui/tui-data.h (struct tui_win_info)\n+\t(struct tui_source_window_base) <refresh>: New method.\n+\n 2019-06-25  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui.h (tui_is_window_visible): Return bool."
    },
    {
      "sha": "e4a9b04f77b5a897befb5d0a15f5fc1614c10a07",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2042b506c85274b4c652fbc9291be65b2550104d/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2042b506c85274b4c652fbc9291be65b2550104d/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=2042b506c85274b4c652fbc9291be65b2550104d",
      "patch": "@@ -258,6 +258,9 @@ struct tui_win_info\n   /* Make this window visible or invisible.  */\n   virtual void make_visible (bool visible);\n \n+  /* Refresh this window and any associated windows.  */\n+  virtual void refresh ();\n+\n   /* Methods to scroll the contents of this window.  Note that they\n      are named with \"_scroll\" coming at the end because the more\n      obvious \"scroll_forward\" is defined as a macro in term.h.  */\n@@ -299,6 +302,7 @@ struct tui_source_window_base : public tui_win_info\n   }\n \n   void make_visible (bool visible) override;\n+  void refresh () override;\n \n   /* Does the locator belong to this window?  */\n   bool m_has_locator = false;"
    },
    {
      "sha": "4d168af0c0952d026cc848abcc3bc2d67e90789c",
      "filename": "gdb/tui/tui-wingeneral.c",
      "status": "modified",
      "additions": 20,
      "deletions": 11,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2042b506c85274b4c652fbc9291be65b2550104d/gdb/tui/tui-wingeneral.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2042b506c85274b4c652fbc9291be65b2550104d/gdb/tui/tui-wingeneral.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-wingeneral.c?ref=2042b506c85274b4c652fbc9291be65b2550104d",
      "patch": "@@ -256,6 +256,25 @@ tui_make_all_invisible (void)\n   make_all_visible (false);\n }\n \n+/* See tui-data.h.  */\n+\n+void\n+tui_win_info::refresh ()\n+{\n+  touchwin (generic.handle);\n+  tui_refresh_win (&generic);\n+}\n+\n+/* See tui-data.h.  */\n+\n+void\n+tui_source_window_base::refresh ()\n+{\n+  touchwin (execution_info->handle);\n+  tui_refresh_win (execution_info);\n+  tui_win_info::refresh ();\n+}\n+\n /* Function to refresh all the windows currently displayed.  */\n \n void\n@@ -267,17 +286,7 @@ tui_refresh_all (struct tui_win_info **list)\n   for (type = SRC_WIN; (type < MAX_MAJOR_WINDOWS); type++)\n     {\n       if (list[type] && list[type]->generic.is_visible)\n-\t{\n-\t  if (type == SRC_WIN || type == DISASSEM_WIN)\n-\t    {\n-\t      tui_source_window_base *base\n-\t\t= (tui_source_window_base *) list[type];\n-\t      touchwin (base->execution_info->handle);\n-\t      tui_refresh_win (base->execution_info);\n-\t    }\n-\t  touchwin (list[type]->generic.handle);\n-\t  tui_refresh_win (&list[type]->generic);\n-\t}\n+\tlist[type]->refresh ();\n     }\n   if (locator->is_visible)\n     {"
    }
  ]
}