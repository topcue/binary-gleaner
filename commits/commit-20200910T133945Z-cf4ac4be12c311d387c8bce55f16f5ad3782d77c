{
  "sha": "cf4ac4be12c311d387c8bce55f16f5ad3782d77c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2Y0YWM0YmUxMmMzMTFkMzg3YzhiY2U1NWYxNmY1YWQzNzgyZDc3Yw==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-09-02T17:32:54Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-09-10T13:39:45Z"
    },
    "message": "Switch local native code to gdb/nat shared functions\n\nNo functional change as the same functionality inlined in nbsd-nat.c\nis offered in gdb/nat/netbsd-nat.c.\n\ngdb/ChangeLog:\n\n\t* nbsd-nat.c: Include \"nat/netbsd-nat.h\".\n\t* (nbsd_nat_target::pid_to_exec_file)\n\t(nbsd_nat_target::thread_alive, nbsd_nat_target::thread_name)\n\t(nbsd_nat_target::post_startup_inferior)\n\t(nbsd_nat_target::post_attach, nbsd_nat_target::xfer_partial)\n\t(nbsd_add_threads): Switch local code to common gdb/nat functions.\n\t* (nbsd_pid_to_cmdline): Call sysctl from the global namespace.\n\t* (nbsd_thread_lister): Remove.",
    "tree": {
      "sha": "6f97740c8d0c4add4387ea7acded81bf5243e83b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6f97740c8d0c4add4387ea7acded81bf5243e83b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cf4ac4be12c311d387c8bce55f16f5ad3782d77c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cf4ac4be12c311d387c8bce55f16f5ad3782d77c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cf4ac4be12c311d387c8bce55f16f5ad3782d77c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cf4ac4be12c311d387c8bce55f16f5ad3782d77c/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f404573e4f8d22f0f1f87eee4f08fa132b15a9aa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f404573e4f8d22f0f1f87eee4f08fa132b15a9aa",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f404573e4f8d22f0f1f87eee4f08fa132b15a9aa"
    }
  ],
  "stats": {
    "total": 158,
    "additions": 24,
    "deletions": 134
  },
  "files": [
    {
      "sha": "b0a6c8fb640f93fd0138484556f703ea304f2232",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cf4ac4be12c311d387c8bce55f16f5ad3782d77c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cf4ac4be12c311d387c8bce55f16f5ad3782d77c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=cf4ac4be12c311d387c8bce55f16f5ad3782d77c",
      "patch": "@@ -1,3 +1,14 @@\n+2020-09-10  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* nbsd-nat.c: Include \"nat/netbsd-nat.h\".\n+\t* (nbsd_nat_target::pid_to_exec_file)\n+\t(nbsd_nat_target::thread_alive, nbsd_nat_target::thread_name)\n+\t(nbsd_nat_target::post_startup_inferior)\n+\t(nbsd_nat_target::post_attach, nbsd_nat_target::xfer_partial)\n+\t(nbsd_add_threads): Switch local code to common gdb/nat functions.\n+\t* (nbsd_pid_to_cmdline): Call sysctl from the global namespace.\n+\t* (nbsd_thread_lister): Remove.\n+\n 2020-09-10  Kamil Rytarowski  <n54@gmx.com>\n \n \t* fork-inferior.c (startup_inferior): Avoid double free."
    },
    {
      "sha": "b12d86e82564c1a27ccfab1dc860a116610c84bf",
      "filename": "gdb/nbsd-nat.c",
      "status": "modified",
      "additions": 13,
      "deletions": 134,
      "changes": 147,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cf4ac4be12c311d387c8bce55f16f5ad3782d77c/gdb/nbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cf4ac4be12c311d387c8bce55f16f5ad3782d77c/gdb/nbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nbsd-nat.c?ref=cf4ac4be12c311d387c8bce55f16f5ad3782d77c",
      "patch": "@@ -20,6 +20,7 @@\n #include \"defs.h\"\n \n #include \"nbsd-nat.h\"\n+#include \"nat/netbsd-nat.h\"\n #include \"gdbthread.h\"\n #include \"nbsd-tdep.h\"\n #include \"inferior.h\"\n@@ -36,13 +37,7 @@\n char *\n nbsd_nat_target::pid_to_exec_file (int pid)\n {\n-  static char buf[PATH_MAX];\n-  size_t buflen;\n-  int mib[4] = {CTL_KERN, KERN_PROC_ARGS, pid, KERN_PROC_PATHNAME};\n-  buflen = sizeof (buf);\n-  if (sysctl (mib, ARRAY_SIZE (mib), buf, &buflen, NULL, 0))\n-    return NULL;\n-  return buf;\n+  return const_cast<char *> (netbsd_nat::pid_to_exec_file (pid));\n }\n \n /* Return the current directory for the process identified by PID.  */\n@@ -80,12 +75,12 @@ nbsd_pid_to_cmdline (int pid)\n   int mib[4] = {CTL_KERN, KERN_PROC_ARGS, pid, KERN_PROC_ARGV};\n \n   size_t size = 0;\n-  if (sysctl (mib, ARRAY_SIZE (mib), NULL, &size, NULL, 0) == -1 || size == 0)\n+  if (::sysctl (mib, ARRAY_SIZE (mib), NULL, &size, NULL, 0) == -1 || size == 0)\n     return nullptr;\n \n   gdb::unique_xmalloc_ptr<char[]> args (XNEWVAR (char, size));\n \n-  if (sysctl (mib, ARRAY_SIZE (mib), args.get (), &size, NULL, 0) == -1\n+  if (::sysctl (mib, ARRAY_SIZE (mib), args.get (), &size, NULL, 0) == -1\n       || size == 0)\n     return nullptr;\n \n@@ -99,76 +94,12 @@ nbsd_pid_to_cmdline (int pid)\n   return args;\n }\n \n-/* Generic thread (LWP) lister within a specified process.  The callback\n-   parameters is a C++ function that is called for each detected thread.  */\n-\n-static bool\n-nbsd_thread_lister (const pid_t pid,\n-\t\t    gdb::function_view<bool (const struct kinfo_lwp *)>\n-\t\t    callback)\n-{\n-  int mib[5] = {CTL_KERN, KERN_LWP, pid, sizeof (struct kinfo_lwp), 0};\n-  size_t size;\n-\n-  if (sysctl (mib, ARRAY_SIZE (mib), NULL, &size, NULL, 0) == -1 || size == 0)\n-    perror_with_name ((\"sysctl\"));\n-\n-  mib[4] = size / sizeof (size_t);\n-\n-  gdb::unique_xmalloc_ptr<struct kinfo_lwp[]> kl\n-    ((struct kinfo_lwp *) xcalloc (size, 1));\n-\n-  if (sysctl (mib, ARRAY_SIZE (mib), kl.get (), &size, NULL, 0) == -1\n-      || size == 0)\n-    perror_with_name ((\"sysctl\"));\n-\n-  for (size_t i = 0; i < size / sizeof (struct kinfo_lwp); i++)\n-    {\n-      struct kinfo_lwp *l = &kl[i];\n-\n-      /* Return true if the specified thread is alive.  */\n-      auto lwp_alive\n-\t= [] (struct kinfo_lwp *lwp)\n-\t  {\n-\t    switch (lwp->l_stat)\n-\t      {\n-\t      case LSSLEEP:\n-\t      case LSRUN:\n-\t      case LSONPROC:\n-\t      case LSSTOP:\n-\t      case LSSUSPENDED:\n-\t\treturn true;\n-\t      default:\n-\t\treturn false;\n-\t      }\n-\t  };\n-\n-      /* Ignore embryonic or demised threads.  */\n-      if (!lwp_alive (l))\n-\tcontinue;\n-\n-      if (callback (l))\n-\treturn true;\n-    }\n-\n-  return false;\n-}\n-\n /* Return true if PTID is still active in the inferior.  */\n \n bool\n nbsd_nat_target::thread_alive (ptid_t ptid)\n {\n-  pid_t pid = ptid.pid ();\n-  int lwp = ptid.lwp ();\n-\n-  auto fn\n-    = [&lwp] (const struct kinfo_lwp *kl)\n-      {\n-        return kl->l_lid == lwp;\n-      };\n-\n-  return nbsd_thread_lister (pid, fn);\n+  return netbsd_nat::thread_alive (ptid);\n }\n \n /* Return the name assigned to a thread by an application.  Returns\n@@ -178,26 +109,7 @@ const char *\n nbsd_nat_target::thread_name (struct thread_info *thr)\n {\n   ptid_t ptid = thr->ptid;\n-  pid_t pid = ptid.pid ();\n-  int lwp = ptid.lwp ();\n-\n-  static char buf[KI_LNAMELEN] = {};\n-\n-  auto fn\n-    = [&lwp] (const struct kinfo_lwp *kl)\n-      {\n-\tif (kl->l_lid == lwp)\n-\t  {\n-\t    xsnprintf (buf, sizeof buf, \"%s\", kl->l_name);\n-\t    return true;\n-\t  }\n-\treturn false;\n-      };\n-\n-  if (nbsd_thread_lister (pid, fn))\n-    return buf;\n-  else\n-    return NULL;\n+  return netbsd_nat::thread_name (ptid);\n }\n \n /* Implement the \"post_attach\" target_ops method.  */\n@@ -206,53 +118,34 @@ static void\n nbsd_add_threads (nbsd_nat_target *target, pid_t pid)\n {\n   auto fn\n-    = [&target, &pid] (const struct kinfo_lwp *kl)\n+    = [&target] (ptid_t ptid)\n       {\n-\tptid_t ptid = ptid_t (pid, kl->l_lid, 0);\n \tif (!in_thread_list (target, ptid))\n \t  {\n \t    if (inferior_ptid.lwp () == 0)\n \t      thread_change_ptid (target, inferior_ptid, ptid);\n \t    else\n \t      add_thread (target, ptid);\n \t  }\n-\treturn false;\n       };\n \n-  nbsd_thread_lister (pid, fn);\n-}\n-\n-/* Enable additional event reporting on new processes.  */\n-\n-static void\n-nbsd_enable_proc_events (pid_t pid)\n-{\n-  int events;\n-\n-  if (ptrace (PT_GET_EVENT_MASK, pid, &events, sizeof (events)) == -1)\n-    perror_with_name ((\"ptrace\"));\n-\n-  events |= PTRACE_LWP_CREATE;\n-  events |= PTRACE_LWP_EXIT;\n-\n-  if (ptrace (PT_SET_EVENT_MASK, pid, &events, sizeof (events)) == -1)\n-    perror_with_name ((\"ptrace\"));\n+  netbsd_nat::for_each_thread (pid, fn);\n }\n \n /* Implement the \"post_startup_inferior\" target_ops method.  */\n \n void\n nbsd_nat_target::post_startup_inferior (ptid_t ptid)\n {\n-  nbsd_enable_proc_events (ptid.pid ());\n+  netbsd_nat::enable_proc_events (ptid.pid ());\n }\n \n /* Implement the \"post_attach\" target_ops method.  */\n \n void\n nbsd_nat_target::post_attach (int pid)\n {\n-  nbsd_enable_proc_events (pid);\n+  netbsd_nat::enable_proc_events (pid);\n   nbsd_add_threads (this, pid);\n }\n \n@@ -861,26 +754,12 @@ nbsd_nat_target::xfer_partial (enum target_object object,\n     {\n     case TARGET_OBJECT_SIGNAL_INFO:\n       {\n-\tptrace_siginfo_t psi;\n+\tlen = netbsd_nat::qxfer_siginfo(pid, annex, readbuf, writebuf, offset,\n+\t\t\t\t\tlen);\n \n-\tif (offset > sizeof (siginfo_t))\n+\tif (len == -1)\n \t  return TARGET_XFER_E_IO;\n \n-\tif (ptrace (PT_GET_SIGINFO, pid, &psi, sizeof (psi)) == -1)\n-\t  return TARGET_XFER_E_IO;\n-\n-\tif (offset + len > sizeof (siginfo_t))\n-\t  len = sizeof (siginfo_t) - offset;\n-\n-\tif (readbuf != NULL)\n-\t  memcpy (readbuf, ((gdb_byte *) &psi.psi_siginfo) + offset, len);\n-\telse\n-\t  {\n-\t    memcpy (((gdb_byte *) &psi.psi_siginfo) + offset, writebuf, len);\n-\n-\t    if (ptrace (PT_SET_SIGINFO, pid, &psi, sizeof (psi)) == -1)\n-\t      return TARGET_XFER_E_IO;\n-\t  }\n \t*xfered_len = len;\n \treturn TARGET_XFER_OK;\n       }"
    }
  ]
}