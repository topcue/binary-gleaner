{
  "sha": "42b16635dd63ab3e71c76af130423e0ef16d5995",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDJiMTY2MzVkZDYzYWIzZTcxYzc2YWYxMzA0MjNlMGVmMTZkNTk5NQ==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T11:00:54Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:36:43Z"
    },
    "message": "[PATCH 28/57][Arm][GAS] Add support for MVE instructions: vqdmlah, vqrdmlah, vqdmlash, vqrdmlash, vqdmulh and vqrdmulh\n\ngas/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/tc-arm.c (enum operand_parse_code): Add new operand.\n\t(parse_operands): Handle new operand.\n\t(mve_encode_qqr): Handle new instructions.\n\t(do_neon_qdmulh): Add support for MVE variants.\n\t(do_neon_qrdmlah): Likewise.\n\t(do_mve_vqdmlah): New encoding function.\n\t(insns): Change entries and add new entries for MVE mnemonics.\n\t* testsuite/gas/arm/mve-vqdmulh-bad.d: New test.\n\t* testsuite/gas/arm/mve-vqdmulh-bad.l: New test.\n\t* testsuite/gas/arm/mve-vqdmulh-bad.s: New test.",
    "tree": {
      "sha": "5a94879a46592c50b7a3f7fd6fd9e12ed5ae5dcb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5a94879a46592c50b7a3f7fd6fd9e12ed5ae5dcb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/42b16635dd63ab3e71c76af130423e0ef16d5995",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/42b16635dd63ab3e71c76af130423e0ef16d5995",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/42b16635dd63ab3e71c76af130423e0ef16d5995",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/42b16635dd63ab3e71c76af130423e0ef16d5995/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8b8b22a426d6b2473731176c83b47042bd8184b8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8b8b22a426d6b2473731176c83b47042bd8184b8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8b8b22a426d6b2473731176c83b47042bd8184b8"
    }
  ],
  "stats": {
    "total": 258,
    "additions": 229,
    "deletions": 29
  },
  "files": [
    {
      "sha": "2a73403ab6432654fc3e85a97ac04a0b834a42e9",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42b16635dd63ab3e71c76af130423e0ef16d5995/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42b16635dd63ab3e71c76af130423e0ef16d5995/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=42b16635dd63ab3e71c76af130423e0ef16d5995",
      "patch": "@@ -1,3 +1,16 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/tc-arm.c (enum operand_parse_code): Add new operand.\n+\t(parse_operands): Handle new operand.\n+\t(mve_encode_qqr): Handle new instructions.\n+\t(do_neon_qdmulh): Add support for MVE variants.\n+\t(do_neon_qrdmlah): Likewise.\n+\t(do_mve_vqdmlah): New encoding function.\n+\t(insns): Change entries and add new entries for MVE mnemonics.\n+\t* testsuite/gas/arm/mve-vqdmulh-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vqdmulh-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vqdmulh-bad.s: New test.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/tc-arm.c (do_mve_vqdmladh): New encoding function."
    },
    {
      "sha": "d95ff65370b65a84460dbe7905b0505f244e8775",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 97,
      "deletions": 29,
      "changes": 126,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42b16635dd63ab3e71c76af130423e0ef16d5995/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42b16635dd63ab3e71c76af130423e0ef16d5995/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=42b16635dd63ab3e71c76af130423e0ef16d5995",
      "patch": "@@ -6954,6 +6954,9 @@ enum operand_parse_code\n   OP_RNSDQ_RNSC_MQ_RR, /* Vector S, D or Q reg, or MVE vector reg , or Neon\n \t\t\t  scalar, or ARM register.  */\n   OP_RNDQ_RNSC, /* Neon D or Q reg, or Neon scalar.  */\n+  OP_RNDQ_RNSC_RR, /* Neon D or Q reg, Neon scalar, or ARM register.  */\n+  OP_RNDQMQ_RNSC_RR, /* Neon D or Q reg, Neon scalar, MVE vector or ARM\n+\t\t\tregister.  */\n   OP_RNDQMQ_RNSC, /* Neon D, Q or MVE vector reg, or Neon scalar.  */\n   OP_RND_RNSC,  /* Neon D reg, or Neon scalar.  */\n   OP_VMOV,      /* Neon VMOV operands.  */\n@@ -7358,6 +7361,13 @@ parse_operands (char *str, const unsigned int *pattern, bfd_boolean thumb)\n \t  }\n \t  break;\n \n+\tcase OP_RNDQMQ_RNSC_RR:\n+\t  po_reg_or_goto (REG_TYPE_MQ, try_rndq_rnsc_rr);\n+\t  break;\n+\ttry_rndq_rnsc_rr:\n+\tcase OP_RNDQ_RNSC_RR:\n+\t  po_reg_or_goto (REG_TYPE_RN, try_rndq_rnsc);\n+\t  break;\n \tcase OP_RNDQMQ_RNSC:\n \t  po_reg_or_goto (REG_TYPE_MQ, try_rndq_rnsc);\n \t  break;\n@@ -15993,6 +16003,15 @@ mve_encode_qqr (int size, int U, int fp)\n       /* vqsub.  */\n       else if (((unsigned)inst.instruction) == 0x210)\n \tinst.instruction = 0xee001f60;\n+      /* vqrdmlah.  */\n+      else if (((unsigned)inst.instruction) == 0x3000b10)\n+\tinst.instruction = 0xee000e40;\n+      /* vqdmulh.  */\n+      else if (((unsigned)inst.instruction) == 0x0000b00)\n+\tinst.instruction = 0xee010e60;\n+      /* vqrdmulh.  */\n+      else if (((unsigned)inst.instruction) == 0x1000b00)\n+\tinst.instruction = 0xfe010e60;\n \n       /* Set U-bit.  */\n       inst.instruction |= U << 28;\n@@ -17181,8 +17200,12 @@ do_neon_mul (void)\n static void\n do_neon_qdmulh (void)\n {\n+  if (check_simd_pred_availability (0, NEON_CHECK_ARCH | NEON_CHECK_CC))\n+   return;\n+\n   if (inst.operands[2].isscalar)\n     {\n+      constraint (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext), BAD_FPU);\n       enum neon_shape rs = neon_select_shape (NS_DDS, NS_QQS, NS_NULL);\n       struct neon_type_el et = neon_check_type (3, rs,\n \tN_EQK, N_EQK, N_S16 | N_S32 | N_KEY);\n@@ -17191,12 +17214,27 @@ do_neon_qdmulh (void)\n     }\n   else\n     {\n-      enum neon_shape rs = neon_select_shape (NS_DDD, NS_QQQ, NS_NULL);\n-      struct neon_type_el et = neon_check_type (3, rs,\n-\tN_EQK, N_EQK, N_S16 | N_S32 | N_KEY);\n+      enum neon_shape rs;\n+      struct neon_type_el et;\n+      if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+\t{\n+\t  rs = neon_select_shape (NS_QQR, NS_QQQ, NS_NULL);\n+\t  et = neon_check_type (3, rs,\n+\t    N_EQK, N_EQK, N_S8 | N_S16 | N_S32 | N_KEY);\n+\t}\n+      else\n+\t{\n+\t  rs = neon_select_shape (NS_DDD, NS_QQQ, NS_NULL);\n+\t  et = neon_check_type (3, rs,\n+\t    N_EQK, N_EQK, N_S16 | N_S32 | N_KEY);\n+\t}\n+\n       NEON_ENCODE (INTEGER, inst);\n-      /* The U bit (rounding) comes from bit mask.  */\n-      neon_three_same (neon_quad (rs), 0, et.size);\n+      if (rs == NS_QQR)\n+\tmve_encode_qqr (et.size, 0, 0);\n+      else\n+\t/* The U bit (rounding) comes from bit mask.  */\n+\tneon_three_same (neon_quad (rs), 0, et.size);\n     }\n }\n \n@@ -17305,6 +17343,20 @@ do_mve_vmulh (void)\n   mve_encode_qqq (et.type == NT_unsigned, et.size);\n }\n \n+static void\n+do_mve_vqdmlah (void)\n+{\n+  enum neon_shape rs = neon_select_shape (NS_QQR, NS_NULL);\n+  struct neon_type_el et\n+    = neon_check_type (3, rs, N_EQK, N_EQK, N_SU_MVE | N_KEY);\n+\n+  if (inst.cond > COND_ALWAYS)\n+    inst.pred_insn_type = INSIDE_VPT_INSN;\n+  else\n+    inst.pred_insn_type = MVE_OUTSIDE_PRED_INSN;\n+\n+  mve_encode_qqr (et.size, et.type == NT_unsigned, 0);\n+}\n \n static void\n do_mve_vqdmladh (void)\n@@ -17556,32 +17608,45 @@ do_mve_vmaxv (void)\n static void\n do_neon_qrdmlah (void)\n {\n-  /* Check we're on the correct architecture.  */\n-  if (!mark_feature_used (&fpu_neon_ext_armv8))\n-    inst.error =\n-      _(\"instruction form not available on this architecture.\");\n-  else if (!mark_feature_used (&fpu_neon_ext_v8_1))\n-    {\n-      as_warn (_(\"this instruction implies use of ARMv8.1 AdvSIMD.\"));\n-      record_feature_use (&fpu_neon_ext_v8_1);\n-    }\n-\n-  if (inst.operands[2].isscalar)\n+  if (check_simd_pred_availability (0, NEON_CHECK_ARCH | NEON_CHECK_CC))\n+   return;\n+  if (!ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n     {\n-      enum neon_shape rs = neon_select_shape (NS_DDS, NS_QQS, NS_NULL);\n-      struct neon_type_el et = neon_check_type (3, rs,\n-\tN_EQK, N_EQK, N_S16 | N_S32 | N_KEY);\n-      NEON_ENCODE (SCALAR, inst);\n-      neon_mul_mac (et, neon_quad (rs));\n+      /* Check we're on the correct architecture.  */\n+      if (!mark_feature_used (&fpu_neon_ext_armv8))\n+\tinst.error\n+\t  = _(\"instruction form not available on this architecture.\");\n+      else if (!mark_feature_used (&fpu_neon_ext_v8_1))\n+\t{\n+\t  as_warn (_(\"this instruction implies use of ARMv8.1 AdvSIMD.\"));\n+\t  record_feature_use (&fpu_neon_ext_v8_1);\n+\t}\n+\tif (inst.operands[2].isscalar)\n+\t  {\n+\t    enum neon_shape rs = neon_select_shape (NS_DDS, NS_QQS, NS_NULL);\n+\t    struct neon_type_el et = neon_check_type (3, rs,\n+\t      N_EQK, N_EQK, N_S16 | N_S32 | N_KEY);\n+\t    NEON_ENCODE (SCALAR, inst);\n+\t    neon_mul_mac (et, neon_quad (rs));\n+\t  }\n+\telse\n+\t  {\n+\t    enum neon_shape rs = neon_select_shape (NS_DDD, NS_QQQ, NS_NULL);\n+\t    struct neon_type_el et = neon_check_type (3, rs,\n+\t      N_EQK, N_EQK, N_S16 | N_S32 | N_KEY);\n+\t    NEON_ENCODE (INTEGER, inst);\n+\t    /* The U bit (rounding) comes from bit mask.  */\n+\t    neon_three_same (neon_quad (rs), 0, et.size);\n+\t  }\n     }\n   else\n     {\n-      enum neon_shape rs = neon_select_shape (NS_DDD, NS_QQQ, NS_NULL);\n-      struct neon_type_el et = neon_check_type (3, rs,\n-\tN_EQK, N_EQK, N_S16 | N_S32 | N_KEY);\n+      enum neon_shape rs = neon_select_shape (NS_QQR, NS_NULL);\n+      struct neon_type_el et\n+\t= neon_check_type (3, rs, N_EQK, N_EQK, N_SU_MVE | N_KEY);\n+\n       NEON_ENCODE (INTEGER, inst);\n-      /* The U bit (rounding) comes from bit mask.  */\n-      neon_three_same (neon_quad (rs), 0, et.size);\n+      mve_encode_qqr (et.size, et.type == NT_unsigned, 0);\n     }\n }\n \n@@ -24068,9 +24133,7 @@ static const struct asm_opcode insns[] =\n   /* VMUL takes I8 I16 I32 F32 P8.  */\n  nUF(vmulq,     _vmul,     3, (RNQ,  oRNQ,  RNDQ_RNSC), neon_mul),\n   /* VQD{R}MULH takes S16 S32.  */\n- nUF(vqdmulh,   _vqdmulh,  3, (RNDQ, oRNDQ, RNDQ_RNSC), neon_qdmulh),\n  nUF(vqdmulhq,  _vqdmulh,  3, (RNQ,  oRNQ,  RNDQ_RNSC), neon_qdmulh),\n- nUF(vqrdmulh,  _vqrdmulh, 3, (RNDQ, oRNDQ, RNDQ_RNSC), neon_qdmulh),\n  nUF(vqrdmulhq, _vqrdmulh, 3, (RNQ,  oRNQ,  RNDQ_RNSC), neon_qdmulh),\n  NUF(vacge,     0000e10,  3, (RNDQ, oRNDQ, RNDQ), neon_fcmp_absolute),\n  NUF(vacgeq,    0000e10,  3, (RNQ,  oRNQ,  RNQ),  neon_fcmp_absolute),\n@@ -24085,7 +24148,6 @@ static const struct asm_opcode insns[] =\n  NUF(vrsqrts,   0200f10,  3, (RNDQ, oRNDQ, RNDQ), neon_step),\n  NUF(vrsqrtsq,  0200f10,  3, (RNQ,  oRNQ,  RNQ),  neon_step),\n  /* ARM v8.1 extension.  */\n- nUF (vqrdmlah,  _vqrdmlah, 3, (RNDQ, oRNDQ, RNDQ_RNSC), neon_qrdmlah),\n  nUF (vqrdmlahq, _vqrdmlah, 3, (RNQ,  oRNQ,  RNDQ_RNSC), neon_qrdmlah),\n  nUF (vqrdmlsh,  _vqrdmlsh, 3, (RNDQ, oRNDQ, RNDQ_RNSC), neon_qrdmlah),\n  nUF (vqrdmlshq, _vqrdmlsh, 3, (RNQ,  oRNQ,  RNDQ_RNSC), neon_qrdmlah),\n@@ -24773,6 +24835,9 @@ static const struct asm_opcode insns[] =\n  mToC(\"vqdmlsdhx\", fe001e00,\t3, (RMQ, RMQ, RMQ),\t\tmve_vqdmladh),\n  mToC(\"vqrdmlsdh\", fe000e01,\t3, (RMQ, RMQ, RMQ),\t\tmve_vqdmladh),\n  mToC(\"vqrdmlsdhx\",fe001e01,\t3, (RMQ, RMQ, RMQ),\t\tmve_vqdmladh),\n+ mToC(\"vqdmlah\",   ee000e60,\t3, (RMQ, RMQ, RR),\t\tmve_vqdmlah),\n+ mToC(\"vqdmlash\",  ee001e60,\t3, (RMQ, RMQ, RR),\t\tmve_vqdmlah),\n+ mToC(\"vqrdmlash\", ee001e40,\t3, (RMQ, RMQ, RR),\t\tmve_vqdmlah),\n \n #undef THUMB_VARIANT\n #define THUMB_VARIANT & mve_fp_ext\n@@ -24856,6 +24921,9 @@ static const struct asm_opcode insns[] =\n  mnUF(vmvn,      _vmvn,    2, (RNDQMQ, RNDQMQ_Ibig), neon_mvn),\n  MNUF(vqabs,     1b00700,  2, (RNDQMQ, RNDQMQ),     neon_sat_abs_neg),\n  MNUF(vqneg,     1b00780,  2, (RNDQMQ, RNDQMQ),     neon_sat_abs_neg),\n+ mnUF(vqrdmlah,  _vqrdmlah,3, (RNDQMQ, oRNDQMQ, RNDQ_RNSC_RR), neon_qrdmlah),\n+ mnUF(vqdmulh,   _vqdmulh, 3, (RNDQMQ, oRNDQMQ, RNDQMQ_RNSC_RR), neon_qdmulh),\n+ mnUF(vqrdmulh,  _vqrdmulh,3, (RNDQMQ, oRNDQMQ, RNDQMQ_RNSC_RR), neon_qdmulh),\n \n #undef\tARM_VARIANT\n #define ARM_VARIANT & arm_ext_v8_3"
    },
    {
      "sha": "cdf63ba933e9d0d65ff8287b060f7fc358dc5f4b",
      "filename": "gas/testsuite/gas/arm/mve-vqdmulh-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42b16635dd63ab3e71c76af130423e0ef16d5995/gas/testsuite/gas/arm/mve-vqdmulh-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42b16635dd63ab3e71c76af130423e0ef16d5995/gas/testsuite/gas/arm/mve-vqdmulh-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vqdmulh-bad.d?ref=42b16635dd63ab3e71c76af130423e0ef16d5995",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VQDMULH and VQRDMULH instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vqdmulh-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "01e824efbf0a759c20ea32502f2856fdb6d2d4eb",
      "filename": "gas/testsuite/gas/arm/mve-vqdmulh-bad.l",
      "status": "added",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42b16635dd63ab3e71c76af130423e0ef16d5995/gas/testsuite/gas/arm/mve-vqdmulh-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42b16635dd63ab3e71c76af130423e0ef16d5995/gas/testsuite/gas/arm/mve-vqdmulh-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vqdmulh-bad.l?ref=42b16635dd63ab3e71c76af130423e0ef16d5995",
      "patch": "@@ -0,0 +1,57 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: bad type in SIMD instruction -- `vqdmulh.s64 q0,q1,q2'\n+[^:]*:11: Error: bad type in SIMD instruction -- `vqdmulh.u8 q0,q1,q2'\n+[^:]*:12: Error: bad type in SIMD instruction -- `vqrdmulh.s64 q0,q1,q2'\n+[^:]*:13: Error: bad type in SIMD instruction -- `vqrdmulh.u8 q0,q1,q2'\n+[^:]*:14: Error: bad type in SIMD instruction -- `vqdmulh.s64 q0,q1,r2'\n+[^:]*:15: Error: bad type in SIMD instruction -- `vqdmulh.u8 q0,q1,r2'\n+[^:]*:16: Error: bad type in SIMD instruction -- `vqrdmulh.s64 q0,q1,r2'\n+[^:]*:17: Error: bad type in SIMD instruction -- `vqrdmulh.u8 q0,q1,r2'\n+[^:]*:18: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:19: Warning: instruction is UNPREDICTABLE with PC operand\n+[^:]*:20: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:21: Warning: instruction is UNPREDICTABLE with PC operand\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:24: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Error: syntax error -- `vqdmulheq.s8 q0,q1,q2'\n+[^:]*:28: Error: syntax error -- `vqdmulheq.s8 q0,q1,q2'\n+[^:]*:30: Error: syntax error -- `vqdmulheq.s8 q0,q1,q2'\n+[^:]*:31: Error: vector predicated instruction should be in VPT/VPST block -- `vqdmulht.s8 q0,q1,q2'\n+[^:]*:33: Error: instruction missing MVE vector predication code -- `vqdmulh.s8 q0,q1,q2'\n+[^:]*:35: Error: syntax error -- `vqrdmulheq.s8 q0,q1,q2'\n+[^:]*:36: Error: syntax error -- `vqrdmulheq.s8 q0,q1,q2'\n+[^:]*:38: Error: syntax error -- `vqrdmulheq.s8 q0,q1,q2'\n+[^:]*:39: Error: vector predicated instruction should be in VPT/VPST block -- `vqrdmulht.s8 q0,q1,q2'\n+[^:]*:41: Error: instruction missing MVE vector predication code -- `vqrdmulh.s8 q0,q1,q2'\n+[^:]*:43: Error: syntax error -- `vqdmulheq.s8 q0,q1,r2'\n+[^:]*:44: Error: syntax error -- `vqdmulheq.s8 q0,q1,r2'\n+[^:]*:46: Error: syntax error -- `vqdmulheq.s8 q0,q1,r2'\n+[^:]*:47: Error: vector predicated instruction should be in VPT/VPST block -- `vqdmulht.s8 q0,q1,r2'\n+[^:]*:49: Error: instruction missing MVE vector predication code -- `vqdmulh.s8 q0,q1,r2'\n+[^:]*:51: Error: syntax error -- `vqrdmulheq.s8 q0,q1,r2'\n+[^:]*:52: Error: syntax error -- `vqrdmulheq.s8 q0,q1,r2'\n+[^:]*:54: Error: syntax error -- `vqrdmulheq.s8 q0,q1,r2'\n+[^:]*:55: Error: vector predicated instruction should be in VPT/VPST block -- `vqrdmulht.s8 q0,q1,r2'\n+[^:]*:57: Error: instruction missing MVE vector predication code -- `vqrdmulh.s8 q0,q1,r2'"
    },
    {
      "sha": "db44de6d4d25288b18067a7fdeac1f904d5b4ade",
      "filename": "gas/testsuite/gas/arm/mve-vqdmulh-bad.s",
      "status": "added",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/42b16635dd63ab3e71c76af130423e0ef16d5995/gas/testsuite/gas/arm/mve-vqdmulh-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/42b16635dd63ab3e71c76af130423e0ef16d5995/gas/testsuite/gas/arm/mve-vqdmulh-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vqdmulh-bad.s?ref=42b16635dd63ab3e71c76af130423e0ef16d5995",
      "patch": "@@ -0,0 +1,57 @@\n+.macro cond op, lastreg\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+\\op\\().s16 q0, q1, \\lastreg\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vqdmulh.s64 q0, q1, q2\n+vqdmulh.u8 q0, q1, q2\n+vqrdmulh.s64 q0, q1, q2\n+vqrdmulh.u8 q0, q1, q2\n+vqdmulh.s64 q0, q1, r2\n+vqdmulh.u8 q0, q1, r2\n+vqrdmulh.s64 q0, q1, r2\n+vqrdmulh.u8 q0, q1, r2\n+vqdmulh.s8 q0, q1, sp\n+vqdmulh.s8 q0, q1, pc\n+vqrdmulh.s8 q0, q1, sp\n+vqrdmulh.s8 q0, q1, pc\n+cond vqdmulh, q2\n+cond vqrdmulh, q2\n+cond vqdmulh, r2\n+cond vqrdmulh, r2\n+it eq\n+vqdmulheq.s8 q0, q1, q2\n+vqdmulheq.s8 q0, q1, q2\n+vpst\n+vqdmulheq.s8 q0, q1, q2\n+vqdmulht.s8 q0, q1, q2\n+vpst\n+vqdmulh.s8 q0, q1, q2\n+it eq\n+vqrdmulheq.s8 q0, q1, q2\n+vqrdmulheq.s8 q0, q1, q2\n+vpst\n+vqrdmulheq.s8 q0, q1, q2\n+vqrdmulht.s8 q0, q1, q2\n+vpst\n+vqrdmulh.s8 q0, q1, q2\n+it eq\n+vqdmulheq.s8 q0, q1, r2\n+vqdmulheq.s8 q0, q1, r2\n+vpst\n+vqdmulheq.s8 q0, q1, r2\n+vqdmulht.s8 q0, q1, r2\n+vpst\n+vqdmulh.s8 q0, q1, r2\n+it eq\n+vqrdmulheq.s8 q0, q1, r2\n+vqrdmulheq.s8 q0, q1, r2\n+vpst\n+vqrdmulheq.s8 q0, q1, r2\n+vqrdmulht.s8 q0, q1, r2\n+vpst\n+vqrdmulh.s8 q0, q1, r2"
    }
  ]
}