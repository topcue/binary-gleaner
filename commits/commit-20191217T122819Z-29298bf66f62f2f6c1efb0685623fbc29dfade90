{
  "sha": "29298bf66f62f2f6c1efb0685623fbc29dfade90",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjkyOThiZjY2ZjYyZjJmNmMxZWZiMDY4NTYyM2ZiYzI5ZGZhZGU5MA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-17T12:18:48Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-17T12:28:19Z"
    },
    "message": "ubsan: aarch64: left shift cannot be represented in type 'int64_t'\n\n\t* aarch64-opc.c (value_fit_signed_field_p): Avoid signed overflow.\n\t(value_fit_unsigned_field_p): Likewise.\n\t(aarch64_wide_constant_p): Likewise.\n\t(operand_general_constraint_met_p): Likewise.\n\t* aarch64-opc.h (aarch64_wide_constant_p): Update prototype.",
    "tree": {
      "sha": "d30bbc387cd9f20882f5111afc901ec64d9ab5ad",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d30bbc387cd9f20882f5111afc901ec64d9ab5ad"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/29298bf66f62f2f6c1efb0685623fbc29dfade90",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/29298bf66f62f2f6c1efb0685623fbc29dfade90",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/29298bf66f62f2f6c1efb0685623fbc29dfade90",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/29298bf66f62f2f6c1efb0685623fbc29dfade90/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e46d79a76ea748165a3ecd1102dd10498d089a49",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e46d79a76ea748165a3ecd1102dd10498d089a49",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e46d79a76ea748165a3ecd1102dd10498d089a49"
    }
  ],
  "stats": {
    "total": 33,
    "additions": 20,
    "deletions": 13
  },
  "files": [
    {
      "sha": "e2aa20b5e80bdc76b069b3309fc1e54d3dbca9d4",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29298bf66f62f2f6c1efb0685623fbc29dfade90/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29298bf66f62f2f6c1efb0685623fbc29dfade90/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=29298bf66f62f2f6c1efb0685623fbc29dfade90",
      "patch": "@@ -1,3 +1,11 @@\n+2019-12-17  Alan Modra  <amodra@gmail.com>\n+\n+\t* aarch64-opc.c (value_fit_signed_field_p): Avoid signed overflow.\n+\t(value_fit_unsigned_field_p): Likewise.\n+\t(aarch64_wide_constant_p): Likewise.\n+\t(operand_general_constraint_met_p): Likewise.\n+\t* aarch64-opc.h (aarch64_wide_constant_p): Update prototype.\n+\n 2019-12-17  Alan Modra  <amodra@gmail.com>\n \n \t* nds32-dis.c (nds32_mask_opcode): Avoid signed overflow."
    },
    {
      "sha": "25665137761e7d114d87a8d8ab871b3608004327",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 11,
      "deletions": 12,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29298bf66f62f2f6c1efb0685623fbc29dfade90/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29298bf66f62f2f6c1efb0685623fbc29dfade90/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=29298bf66f62f2f6c1efb0685623fbc29dfade90",
      "patch": "@@ -546,7 +546,7 @@ value_fit_signed_field_p (int64_t value, unsigned width)\n   assert (width < 32);\n   if (width < sizeof (value) * 8)\n     {\n-      int64_t lim = (int64_t)1 << (width - 1);\n+      int64_t lim = (uint64_t) 1 << (width - 1);\n       if (value >= -lim && value < lim)\n \treturn 1;\n     }\n@@ -560,7 +560,7 @@ value_fit_unsigned_field_p (int64_t value, unsigned width)\n   assert (width < 32);\n   if (width < sizeof (value) * 8)\n     {\n-      int64_t lim = (int64_t)1 << width;\n+      int64_t lim = (uint64_t) 1 << width;\n       if (value >= 0 && value < lim)\n \treturn 1;\n     }\n@@ -1063,7 +1063,7 @@ match_operands_qualifier (aarch64_inst *inst, bfd_boolean update_p)\n    amount will be returned in *SHIFT_AMOUNT.  */\n \n bfd_boolean\n-aarch64_wide_constant_p (int64_t value, int is32, unsigned int *shift_amount)\n+aarch64_wide_constant_p (uint64_t value, int is32, unsigned int *shift_amount)\n {\n   int amount;\n \n@@ -1074,22 +1074,21 @@ aarch64_wide_constant_p (int64_t value, int is32, unsigned int *shift_amount)\n       /* Allow all zeros or all ones in top 32-bits, so that\n \t 32-bit constant expressions like ~0x80000000 are\n \t permitted.  */\n-      uint64_t ext = value;\n-      if (ext >> 32 != 0 && ext >> 32 != (uint64_t) 0xffffffff)\n+      if (value >> 32 != 0 && value >> 32 != 0xffffffff)\n \t/* Immediate out of range.  */\n \treturn FALSE;\n-      value &= (int64_t) 0xffffffff;\n+      value &= 0xffffffff;\n     }\n \n   /* first, try movz then movn */\n   amount = -1;\n-  if ((value & ((int64_t) 0xffff << 0)) == value)\n+  if ((value & ((uint64_t) 0xffff << 0)) == value)\n     amount = 0;\n-  else if ((value & ((int64_t) 0xffff << 16)) == value)\n+  else if ((value & ((uint64_t) 0xffff << 16)) == value)\n     amount = 16;\n-  else if (!is32 && (value & ((int64_t) 0xffff << 32)) == value)\n+  else if (!is32 && (value & ((uint64_t) 0xffff << 32)) == value)\n     amount = 32;\n-  else if (!is32 && (value & ((int64_t) 0xffff << 48)) == value)\n+  else if (!is32 && (value & ((uint64_t) 0xffff << 48)) == value)\n     amount = 48;\n \n   if (amount == -1)\n@@ -1535,7 +1534,7 @@ operand_general_constraint_met_p (const aarch64_opnd_info *opnds, int idx,\n \t\t\t       : _(\"z0-z7 expected\"));\n \t      return 0;\n \t    }\n-\t  mask = (1 << (size - shift)) - 1;\n+\t  mask = (1u << (size - shift)) - 1;\n \t  if (!value_in_range_p (opnd->reglane.index, 0, mask))\n \t    {\n \t      set_elem_idx_out_of_range_error (mismatch_detail, idx, 0, mask);\n@@ -2161,7 +2160,7 @@ operand_general_constraint_met_p (const aarch64_opnd_info *opnds, int idx,\n \t  if (!value_fit_unsigned_field_p (opnd->imm.value, size))\n \t    {\n \t      set_imm_out_of_range_error (mismatch_detail, idx, 0,\n-\t\t\t\t\t  (1 << size) - 1);\n+\t\t\t\t\t  (1u << size) - 1);\n \t      return 0;\n \t    }\n \t  break;"
    },
    {
      "sha": "e0d4f5bae259c1495a995c0d62dfaec18f31db8c",
      "filename": "opcodes/aarch64-opc.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29298bf66f62f2f6c1efb0685623fbc29dfade90/opcodes/aarch64-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29298bf66f62f2f6c1efb0685623fbc29dfade90/opcodes/aarch64-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.h?ref=29298bf66f62f2f6c1efb0685623fbc29dfade90",
      "patch": "@@ -485,7 +485,7 @@ enum aarch64_modifier_kind\n aarch64_get_operand_modifier_from_value (aarch64_insn, bfd_boolean);\n \n \n-bfd_boolean aarch64_wide_constant_p (int64_t, int, unsigned int *);\n+bfd_boolean aarch64_wide_constant_p (uint64_t, int, unsigned int *);\n bfd_boolean aarch64_logical_immediate_p (uint64_t, int, aarch64_insn *);\n int aarch64_shrink_expanded_imm8 (uint64_t);\n "
    }
  ]
}