{
  "sha": "9eedd27d42ceeb6f3765c24972a5c97ce20727cd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWVlZGQyN2Q0MmNlZWI2ZjM3NjVjMjQ5NzJhNWM5N2NlMjA3MjdjZA==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:31Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:31Z"
    },
    "message": "gdbserver/linux-low: turn 'get_syscall_trapinfo' into a method\n\ngdbserver/ChangeLog:\n2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn the 'get_syscall_trapinfo' linux target op into a method\n\tof process_stratum_target.\n\n\t* linux-low.h (struct linux_target_ops): Remove the op.\n\t(class linux_process_target) <get_syscall_trapinfo>\n\t<gdb_catch_this_syscall>\n\t<low_supports_catch_syscall>\n\t<low_get_syscall_trapinfo>: Declare.\n\t* linux-low.cc (get_syscall_trapinfo): Turn into...\n\t(linux_process_target::get_syscall_trapinfo): ...this.\n\t(linux_process_target::low_get_syscall_trapinfo): Define.\n\t(gdb_catch_this_syscall_p): Turn into...\n\t(linux_process_target::gdb_catch_this_syscall): ...this.\n\t(linux_process_target::low_supports_catch_syscall): Define.\n\n\tUpdate the callers below.\n\n\t(linux_process_target::wait_1)\n\t(linux_process_target::supports_catch_syscall)\n\n\t* linux-x86-low.cc (class x86_target) <low_supports_catch_syscall>\n\t<low_get_syscall_trapinfo>: Declare.\n\t(x86_target::low_supports_catch_syscall): Define.\n\t(x86_get_syscall_trapinfo): Turn into...\n\t(x86_target::low_get_syscall_trapinfo): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-aarch64-low.cc (class aarch64_target)\n\t<low_supports_catch_syscall>\n\t<low_get_syscall_trapinfo>: Declare.\n\t(aarch64_target::low_supports_catch_syscall): Define.\n\t(aarch64_get_syscall_trapinfo): Turn into...\n\t(aarch64_target::low_get_syscall_trapinfo): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-arm-low.cc (class arm_target) <low_supports_catch_syscall>\n\t<low_get_syscall_trapinfo>: Declare.\n\t(arm_target::low_supports_catch_syscall): Define.\n\t(arm_get_syscall_trapinfo): Turn into...\n\t(arm_target::low_get_syscall_trapinfo): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-ppc-low.cc (the_low_target): Remove the op field.\n\t* linux-s390-low.cc (the_low_target): Remove the op field.",
    "tree": {
      "sha": "5a404f9e0dc938bd6a5cf6563bd385606afa48f6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5a404f9e0dc938bd6a5cf6563bd385606afa48f6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9eedd27d42ceeb6f3765c24972a5c97ce20727cd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9eedd27d42ceeb6f3765c24972a5c97ce20727cd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9eedd27d42ceeb6f3765c24972a5c97ce20727cd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9eedd27d42ceeb6f3765c24972a5c97ce20727cd/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b31cdfa69f4adfc4760da1480c900f5c27421d43",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b31cdfa69f4adfc4760da1480c900f5c27421d43",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b31cdfa69f4adfc4760da1480c900f5c27421d43"
    }
  ],
  "stats": {
    "total": 166,
    "additions": 123,
    "deletions": 43
  },
  "files": [
    {
      "sha": "4649ec2fb10da5afd480a9771f5ec7c8177f3351",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9eedd27d42ceeb6f3765c24972a5c97ce20727cd/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9eedd27d42ceeb6f3765c24972a5c97ce20727cd/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=9eedd27d42ceeb6f3765c24972a5c97ce20727cd",
      "patch": "@@ -1,3 +1,47 @@\n+2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn the 'get_syscall_trapinfo' linux target op into a method\n+\tof process_stratum_target.\n+\n+\t* linux-low.h (struct linux_target_ops): Remove the op.\n+\t(class linux_process_target) <get_syscall_trapinfo>\n+\t<gdb_catch_this_syscall>\n+\t<low_supports_catch_syscall>\n+\t<low_get_syscall_trapinfo>: Declare.\n+\t* linux-low.cc (get_syscall_trapinfo): Turn into...\n+\t(linux_process_target::get_syscall_trapinfo): ...this.\n+\t(linux_process_target::low_get_syscall_trapinfo): Define.\n+\t(gdb_catch_this_syscall_p): Turn into...\n+\t(linux_process_target::gdb_catch_this_syscall): ...this.\n+\t(linux_process_target::low_supports_catch_syscall): Define.\n+\n+\tUpdate the callers below.\n+\n+\t(linux_process_target::wait_1)\n+\t(linux_process_target::supports_catch_syscall)\n+\n+\t* linux-x86-low.cc (class x86_target) <low_supports_catch_syscall>\n+\t<low_get_syscall_trapinfo>: Declare.\n+\t(x86_target::low_supports_catch_syscall): Define.\n+\t(x86_get_syscall_trapinfo): Turn into...\n+\t(x86_target::low_get_syscall_trapinfo): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-aarch64-low.cc (class aarch64_target)\n+\t<low_supports_catch_syscall>\n+\t<low_get_syscall_trapinfo>: Declare.\n+\t(aarch64_target::low_supports_catch_syscall): Define.\n+\t(aarch64_get_syscall_trapinfo): Turn into...\n+\t(aarch64_target::low_get_syscall_trapinfo): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-arm-low.cc (class arm_target) <low_supports_catch_syscall>\n+\t<low_get_syscall_trapinfo>: Declare.\n+\t(arm_target::low_supports_catch_syscall): Define.\n+\t(arm_get_syscall_trapinfo): Turn into...\n+\t(arm_target::low_get_syscall_trapinfo): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-ppc-low.cc (the_low_target): Remove the op field.\n+\t* linux-s390-low.cc (the_low_target): Remove the op field.\n+\n 2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tRemove the 'supports_hardware_single_step' linux target op and"
    },
    {
      "sha": "f1eae958d0188271858f03c7d1b2078c10f7f912",
      "filename": "gdbserver/linux-aarch64-low.cc",
      "status": "modified",
      "additions": 13,
      "deletions": 4,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9eedd27d42ceeb6f3765c24972a5c97ce20727cd/gdbserver/linux-aarch64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9eedd27d42ceeb6f3765c24972a5c97ce20727cd/gdbserver/linux-aarch64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-aarch64-low.cc?ref=9eedd27d42ceeb6f3765c24972a5c97ce20727cd",
      "patch": "@@ -125,6 +125,10 @@ class aarch64_target : public linux_process_target\n   int low_get_thread_area (int lwpid, CORE_ADDR *addrp) override;\n \n   bool low_supports_range_stepping () override;\n+\n+  bool low_supports_catch_syscall () override;\n+\n+  void low_get_syscall_trapinfo (regcache *regcache, int *sysno) override;\n };\n \n /* The singleton target ops object.  */\n@@ -768,10 +772,16 @@ aarch64_target::low_get_thread_area (int lwpid, CORE_ADDR *addrp)\n   return 0;\n }\n \n-/* Implementation of linux_target_ops method \"get_syscall_trapinfo\".  */\n+bool\n+aarch64_target::low_supports_catch_syscall ()\n+{\n+  return true;\n+}\n \n-static void\n-aarch64_get_syscall_trapinfo (struct regcache *regcache, int *sysno)\n+/* Implementation of linux target ops method \"low_get_syscall_trapinfo\".  */\n+\n+void\n+aarch64_target::low_get_syscall_trapinfo (regcache *regcache, int *sysno)\n {\n   int use_64bit = register_size (regcache->tdesc, 0) == 8;\n \n@@ -3159,7 +3169,6 @@ aarch64_target::breakpoint_kind_from_current_state (CORE_ADDR *pcptr)\n \n struct linux_target_ops the_low_target =\n {\n-  aarch64_get_syscall_trapinfo,\n };\n \n /* The linux target ops object.  */"
    },
    {
      "sha": "4577c83bfb03b9f397eb555a50466b231015a29c",
      "filename": "gdbserver/linux-arm-low.cc",
      "status": "modified",
      "additions": 14,
      "deletions": 5,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9eedd27d42ceeb6f3765c24972a5c97ce20727cd/gdbserver/linux-arm-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9eedd27d42ceeb6f3765c24972a5c97ce20727cd/gdbserver/linux-arm-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-arm-low.cc?ref=9eedd27d42ceeb6f3765c24972a5c97ce20727cd",
      "patch": "@@ -113,6 +113,10 @@ class arm_target : public linux_process_target\n   void low_new_fork (process_info *parent, process_info *child) override;\n \n   void low_prepare_to_resume (lwp_info *lwp) override;\n+\n+  bool low_supports_catch_syscall () override;\n+\n+  void low_get_syscall_trapinfo (regcache *regcache, int *sysno) override;\n };\n \n /* The singleton target ops object.  */\n@@ -1038,10 +1042,16 @@ arm_target::supports_hardware_single_step ()\n   return false;\n }\n \n-/* Implementation of linux_target_ops method \"get_syscall_trapinfo\".  */\n+bool\n+arm_target::low_supports_catch_syscall ()\n+{\n+  return true;\n+}\n \n-static void\n-arm_get_syscall_trapinfo (struct regcache *regcache, int *sysno)\n+/* Implementation of linux target ops method \"low_get_syscall_trapinfo\".  */\n+\n+void\n+arm_target::low_get_syscall_trapinfo (regcache *regcache, int *sysno)\n {\n   if (arm_is_thumb_mode ())\n     collect_register_by_name (regcache, \"r7\", sysno);\n@@ -1052,7 +1062,7 @@ arm_get_syscall_trapinfo (struct regcache *regcache, int *sysno)\n \n       collect_register_by_name (regcache, \"pc\", &pc);\n \n-      if (the_target->read_memory (pc - 4, (unsigned char *) &insn, 4))\n+      if (read_memory (pc - 4, (unsigned char *) &insn, 4))\n \t*sysno = UNKNOWN_SYSCALL;\n       else\n \t{\n@@ -1119,7 +1129,6 @@ arm_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  arm_get_syscall_trapinfo,\n };\n \n /* The linux target ops object.  */"
    },
    {
      "sha": "cd04160978de1f9e59b96897b85253c0c12705e5",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 24,
      "deletions": 25,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9eedd27d42ceeb6f3765c24972a5c97ce20727cd/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9eedd27d42ceeb6f3765c24972a5c97ce20727cd/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=9eedd27d42ceeb6f3765c24972a5c97ce20727cd",
      "patch": "@@ -754,35 +754,31 @@ linux_process_target::get_pc (lwp_info *lwp)\n   return pc;\n }\n \n-/* This function should only be called if LWP got a SYSCALL_SIGTRAP.\n-   Fill *SYSNO with the syscall nr trapped.  */\n-\n-static void\n-get_syscall_trapinfo (struct lwp_info *lwp, int *sysno)\n+void\n+linux_process_target::get_syscall_trapinfo (lwp_info *lwp, int *sysno)\n {\n   struct thread_info *saved_thread;\n   struct regcache *regcache;\n \n-  if (the_low_target.get_syscall_trapinfo == NULL)\n-    {\n-      /* If we cannot get the syscall trapinfo, report an unknown\n-\t system call number.  */\n-      *sysno = UNKNOWN_SYSCALL;\n-      return;\n-    }\n-\n   saved_thread = current_thread;\n   current_thread = get_lwp_thread (lwp);\n \n   regcache = get_thread_regcache (current_thread, 1);\n-  (*the_low_target.get_syscall_trapinfo) (regcache, sysno);\n+  low_get_syscall_trapinfo (regcache, sysno);\n \n   if (debug_threads)\n     debug_printf (\"get_syscall_trapinfo sysno %d\\n\", *sysno);\n \n   current_thread = saved_thread;\n }\n \n+void\n+linux_process_target::low_get_syscall_trapinfo (regcache *regcache, int *sysno)\n+{\n+  /* By default, report an unknown system call number.  */\n+  *sysno = UNKNOWN_SYSCALL;\n+}\n+\n bool\n linux_process_target::save_stop_reason (lwp_info *lwp)\n {\n@@ -2961,29 +2957,26 @@ gdb_catching_syscalls_p (struct lwp_info *event_child)\n   return !proc->syscalls_to_catch.empty ();\n }\n \n-/* Returns 1 if GDB is interested in the event_child syscall.\n-   Only to be called when stopped reason is SYSCALL_SIGTRAP.  */\n-\n-static int\n-gdb_catch_this_syscall_p (struct lwp_info *event_child)\n+bool\n+linux_process_target::gdb_catch_this_syscall (lwp_info *event_child)\n {\n   int sysno;\n   struct thread_info *thread = get_lwp_thread (event_child);\n   struct process_info *proc = get_thread_process (thread);\n \n   if (proc->syscalls_to_catch.empty ())\n-    return 0;\n+    return false;\n \n   if (proc->syscalls_to_catch[0] == ANY_SYSCALL)\n-    return 1;\n+    return true;\n \n   get_syscall_trapinfo (event_child, &sysno);\n \n   for (int iter : proc->syscalls_to_catch)\n     if (iter == sysno)\n-      return 1;\n+      return true;\n \n-  return 0;\n+  return false;\n }\n \n ptid_t\n@@ -3326,7 +3319,7 @@ linux_process_target::wait_1 (ptid_t ptid, target_waitstatus *ourstatus,\n   /* Check if GDB is interested in this syscall.  */\n   if (WIFSTOPPED (w)\n       && WSTOPSIG (w) == SYSCALL_SIGTRAP\n-      && !gdb_catch_this_syscall_p (event_child))\n+      && !gdb_catch_this_syscall (event_child))\n     {\n       if (debug_threads)\n \t{\n@@ -6404,10 +6397,16 @@ linux_process_target::read_loadmap (const char *annex, CORE_ADDR offset,\n bool\n linux_process_target::supports_catch_syscall ()\n {\n-  return (the_low_target.get_syscall_trapinfo != NULL\n+  return (low_supports_catch_syscall ()\n \t  && linux_supports_tracesysgood ());\n }\n \n+bool\n+linux_process_target::low_supports_catch_syscall ()\n+{\n+  return false;\n+}\n+\n int\n linux_process_target::get_ipa_tdesc_idx ()\n {"
    },
    {
      "sha": "1f1c3820edbd71f90e2cc129e6916df40e3879de",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 16,
      "deletions": 4,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9eedd27d42ceeb6f3765c24972a5c97ce20727cd/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9eedd27d42ceeb6f3765c24972a5c97ce20727cd/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=9eedd27d42ceeb6f3765c24972a5c97ce20727cd",
      "patch": "@@ -131,10 +131,6 @@ struct lwp_info;\n \n struct linux_target_ops\n {\n-  /* Fill *SYSNO with the syscall nr trapped.  Only to be called when\n-     inferior is stopped due to SYSCALL_SIGTRAP.  */\n-  void (*get_syscall_trapinfo) (struct regcache *regcache, int *sysno);\n-\n   /* See target.h.  */\n   int (*get_ipa_tdesc_idx) (void);\n };\n@@ -591,6 +587,14 @@ class linux_process_target : public process_stratum_target\n   fast_tpoint_collect_result linux_fast_tracepoint_collecting\n     (lwp_info *lwp, fast_tpoint_collect_status *status);\n \n+  /* This function should only be called if LWP got a SYSCALL_SIGTRAP.\n+     Fill *SYSNO with the syscall nr trapped.  */\n+  void get_syscall_trapinfo (lwp_info *lwp, int *sysno);\n+\n+  /* Returns true if GDB is interested in the event_child syscall.\n+     Only to be called when stopped reason is SYSCALL_SIGTRAP.  */\n+  bool gdb_catch_this_syscall (lwp_info *event_child);\n+\n protected:\n   /* The architecture-specific \"low\" methods are listed below.  */\n \n@@ -684,6 +688,14 @@ class linux_process_target : public process_stratum_target\n   /* Returns true if the low target supports range stepping.  */\n   virtual bool low_supports_range_stepping ();\n \n+  /* Return true if the target supports catch syscall.  Such targets\n+     override the low_get_syscall_trapinfo method below.  */\n+  virtual bool low_supports_catch_syscall ();\n+\n+  /* Fill *SYSNO with the syscall nr trapped.  Only to be called when\n+     inferior is stopped due to SYSCALL_SIGTRAP.  */\n+  virtual void low_get_syscall_trapinfo (regcache *regcache, int *sysno);\n+\n   /* How many bytes the PC should be decremented after a break.  */\n   virtual int low_decr_pc_after_break ();\n };"
    },
    {
      "sha": "71ad842243cc698c33db9731925bcb15d3a8991c",
      "filename": "gdbserver/linux-ppc-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9eedd27d42ceeb6f3765c24972a5c97ce20727cd/gdbserver/linux-ppc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9eedd27d42ceeb6f3765c24972a5c97ce20727cd/gdbserver/linux-ppc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-ppc-low.cc?ref=9eedd27d42ceeb6f3765c24972a5c97ce20727cd",
      "patch": "@@ -3446,7 +3446,6 @@ ppc_get_ipa_tdesc_idx (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* get_syscall_trapinfo */\n   ppc_get_ipa_tdesc_idx,\n };\n "
    },
    {
      "sha": "d09860f36db7aaad0ccf28f503d962b87614d1b7",
      "filename": "gdbserver/linux-s390-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9eedd27d42ceeb6f3765c24972a5c97ce20727cd/gdbserver/linux-s390-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9eedd27d42ceeb6f3765c24972a5c97ce20727cd/gdbserver/linux-s390-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-s390-low.cc?ref=9eedd27d42ceeb6f3765c24972a5c97ce20727cd",
      "patch": "@@ -2855,7 +2855,6 @@ s390_target::emit_ops ()\n }\n \n struct linux_target_ops the_low_target = {\n-  NULL, /* get_syscall_trapinfo */\n   s390_get_ipa_tdesc_idx,\n };\n "
    },
    {
      "sha": "2837994653de7de51e6007a0057ecd4a002d4b30",
      "filename": "gdbserver/linux-x86-low.cc",
      "status": "modified",
      "additions": 12,
      "deletions": 3,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9eedd27d42ceeb6f3765c24972a5c97ce20727cd/gdbserver/linux-x86-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9eedd27d42ceeb6f3765c24972a5c97ce20727cd/gdbserver/linux-x86-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-x86-low.cc?ref=9eedd27d42ceeb6f3765c24972a5c97ce20727cd",
      "patch": "@@ -176,6 +176,10 @@ class x86_target : public linux_process_target\n \n   bool low_supports_range_stepping () override;\n \n+  bool low_supports_catch_syscall () override;\n+\n+  void low_get_syscall_trapinfo (regcache *regcache, int *sysno) override;\n+\n private:\n \n   /* Update all the target description of all processes; a new GDB\n@@ -1110,11 +1114,17 @@ x86_target::low_arch_setup ()\n   current_process ()->tdesc = x86_linux_read_description ();\n }\n \n+bool\n+x86_target::low_supports_catch_syscall ()\n+{\n+  return true;\n+}\n+\n /* Fill *SYSNO and *SYSRET with the syscall nr trapped and the syscall return\n    code.  This should only be called if LWP got a SYSCALL_SIGTRAP.  */\n \n-static void\n-x86_get_syscall_trapinfo (struct regcache *regcache, int *sysno)\n+void\n+x86_target::low_get_syscall_trapinfo (regcache *regcache, int *sysno)\n {\n   int use_64bit = register_size (regcache->tdesc, 0) == 8;\n \n@@ -2985,7 +2995,6 @@ x86_get_ipa_tdesc_idx (void)\n \n struct linux_target_ops the_low_target =\n {\n-  x86_get_syscall_trapinfo,\n   x86_get_ipa_tdesc_idx,\n };\n "
    }
  ]
}