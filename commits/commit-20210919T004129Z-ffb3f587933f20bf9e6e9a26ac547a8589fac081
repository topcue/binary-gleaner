{
  "sha": "ffb3f587933f20bf9e6e9a26ac547a8589fac081",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmZiM2Y1ODc5MzNmMjBiZjllNmU5YTI2YWM1NDdhODU4OWZhYzA4MQ==",
  "commit": {
    "author": {
      "name": "Weimin Pan",
      "email": "weimin.pan@oracle.com",
      "date": "2021-09-19T00:41:29Z"
    },
    "committer": {
      "name": "Weimin Pan",
      "email": "weimin.pan@oracle.com",
      "date": "2021-09-19T00:41:29Z"
    },
    "message": "CTF: multi-CU and archive support\n\nNow gdb is capable of debugging executable, which consists of multiple\ncompilation units (CUs) with the CTF debug info. An executable could\npotentially have one or more archives, which, in CTF context, contain\nconflicting types.\n\nall changes were made in ctfread.c in which elfctf_build_psymtabs was\nmodified to handle archives, via the ctf archive iterator and its callback\nbuild_ctf_archive_member and scan_partial_symbols was modified to scan\narchives, which are treated as subfiles, to build the psymtabs.\n\nAlso changes were made to handle CTF's data object section and function\ninfo section which now share the same format of their contents - an array\nof type IDs. New functions ctf_psymtab_add_stt_entries, which is called by\nctf_psymtab_add_stt_obj and ctf_psymtab_add_stt_func, and add_stt_entries,\nwhich is called by add_stt_obj and add_stt_func when setting up psymtabs\nand full symtab, respectively.",
    "tree": {
      "sha": "fd933456aeadd7e7608c4bc93d233724d5a50675",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fd933456aeadd7e7608c4bc93d233724d5a50675"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ffb3f587933f20bf9e6e9a26ac547a8589fac081",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ffb3f587933f20bf9e6e9a26ac547a8589fac081",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ffb3f587933f20bf9e6e9a26ac547a8589fac081",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ffb3f587933f20bf9e6e9a26ac547a8589fac081/comments",
  "author": {
    "login": "wmwpan",
    "id": 50341885,
    "node_id": "MDQ6VXNlcjUwMzQxODg1",
    "avatar_url": "https://avatars.githubusercontent.com/u/50341885?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wmwpan",
    "html_url": "https://github.com/wmwpan",
    "followers_url": "https://api.github.com/users/wmwpan/followers",
    "following_url": "https://api.github.com/users/wmwpan/following{/other_user}",
    "gists_url": "https://api.github.com/users/wmwpan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wmwpan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wmwpan/subscriptions",
    "organizations_url": "https://api.github.com/users/wmwpan/orgs",
    "repos_url": "https://api.github.com/users/wmwpan/repos",
    "events_url": "https://api.github.com/users/wmwpan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wmwpan/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "wmwpan",
    "id": 50341885,
    "node_id": "MDQ6VXNlcjUwMzQxODg1",
    "avatar_url": "https://avatars.githubusercontent.com/u/50341885?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/wmwpan",
    "html_url": "https://github.com/wmwpan",
    "followers_url": "https://api.github.com/users/wmwpan/followers",
    "following_url": "https://api.github.com/users/wmwpan/following{/other_user}",
    "gists_url": "https://api.github.com/users/wmwpan/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/wmwpan/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/wmwpan/subscriptions",
    "organizations_url": "https://api.github.com/users/wmwpan/orgs",
    "repos_url": "https://api.github.com/users/wmwpan/repos",
    "events_url": "https://api.github.com/users/wmwpan/events{/privacy}",
    "received_events_url": "https://api.github.com/users/wmwpan/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3733650765bf40c8be16fe0a7b8adc0831cbfe22",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3733650765bf40c8be16fe0a7b8adc0831cbfe22",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3733650765bf40c8be16fe0a7b8adc0831cbfe22"
    }
  ],
  "stats": {
    "total": 625,
    "additions": 471,
    "deletions": 154
  },
  "files": [
    {
      "sha": "01334e4d302813fbcbe789f8dcb3fa1501c92368",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 190,
      "deletions": 146,
      "changes": 336,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=ffb3f587933f20bf9e6e9a26ac547a8589fac081",
      "patch": "@@ -117,6 +117,7 @@ struct ctf_context\n   struct objfile *of;\n   psymtab_storage *partial_symtabs;\n   partial_symtab *pst;\n+  ctf_archive_t *arc;\n   struct buildsym_compunit *builder;\n };\n \n@@ -134,7 +135,7 @@ struct ctf_psymtab : public standard_psymtab\n   void read_symtab (struct objfile *) override;\n   void expand_psymtab (struct objfile *) override;\n \n-  struct ctf_context *context;\n+  struct ctf_context context;\n };\n \n /* The routines that read and process fields/members of a C struct, union,\n@@ -166,6 +167,16 @@ struct ctf_field_info\n   std::vector<struct decl_field> nested_types_list;\n };\n \n+/* Data held for a translation unit.  */\n+\n+struct ctf_per_tu_data\n+{\n+  ctf_dict_t *fp;\n+  struct objfile *of;\n+  ctf_archive_t *arc;\n+  psymtab_storage *pss;\n+  psymbol_functions *psf;\n+};\n \n /* Local function prototypes */\n \n@@ -245,10 +256,8 @@ set_tid_type (struct objfile *of, ctf_id_t tid, struct type *typ)\n   ids.tid = tid;\n   ids.type = typ;\n   slot = (struct ctf_tid_and_type **) htab_find_slot (htab, &ids, INSERT);\n-  if (*slot)\n-    complaint (_(\"An internal GDB problem: ctf_ id_t %ld type already set\"),\n-\t       (tid));\n-  *slot = XOBNEW (&of->objfile_obstack, struct ctf_tid_and_type);\n+  if (*slot == nullptr)\n+    *slot = XOBNEW (&of->objfile_obstack, struct ctf_tid_and_type);\n   **slot = ids;\n   return typ;\n }\n@@ -510,7 +519,7 @@ new_symbol (struct ctf_context *ccp, struct type *type, ctf_id_t tid)\n \t    break;\n \t}\n \n-      add_symbol_to_list (sym, ccp->builder->get_global_symbols ());\n+      add_symbol_to_list (sym, ccp->builder->get_file_symbols ());\n     }\n \n   return sym;\n@@ -705,7 +714,7 @@ read_func_kind_type (struct ctf_context *ccp, ctf_id_t tid)\n       /* If failed to find the argument type, fill it with void_type.  */\n       for (int iparam = 0; iparam < argc; iparam++)\n \t{\n-\t  atype = get_tid_type (of, argv[iparam]);\n+\t  atype = fetch_tid_type (ccp, argv[iparam]);\n \t  if (atype != nullptr)\n \t    type->field (iparam).set_type (atype);\n \t  else\n@@ -1140,10 +1149,11 @@ ctf_add_var_cb (const char *name, ctf_id_t id, void *arg)\n       case CTF_K_CONST:\n       case CTF_K_POINTER:\n       case CTF_K_ARRAY:\n-\tif (type)\n+\tif (type != nullptr)\n \t  {\n \t    sym = new_symbol (ccp, type, id);\n-\t    sym->compute_and_set_names (name, false, ccp->of->per_bfd);\n+\t    if (sym != nullptr)\n+\t      sym->compute_and_set_names (name, false, ccp->of->per_bfd);\n \t  }\n \tbreak;\n       case CTF_K_STRUCT:\n@@ -1160,7 +1170,7 @@ ctf_add_var_cb (const char *name, ctf_id_t id, void *arg)\n \tSYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n \tSYMBOL_ACLASS_INDEX (sym) = LOC_OPTIMIZED_OUT;\n \tsym->compute_and_set_names (name, false, ccp->of->per_bfd);\n-\tadd_symbol_to_list (sym, ccp->builder->get_global_symbols ());\n+\tadd_symbol_to_list (sym, ccp->builder->get_file_symbols ());\n \tbreak;\n       default:\n \tcomplaint (_(\"ctf_add_var_cb: kind unsupported (%d)\"), kind);\n@@ -1173,81 +1183,48 @@ ctf_add_var_cb (const char *name, ctf_id_t id, void *arg)\n   return 0;\n }\n \n-/* Add an ELF STT_OBJ symbol with index IDX to the symbol table.  */\n+/* Add entries in either data objects or function info section, controlled\n+   by FUNCTIONS.  */\n \n-static struct symbol *\n-add_stt_obj (struct ctf_context *ccp, unsigned long idx)\n+static void\n+add_stt_entries (struct ctf_context *ccp, int functions)\n {\n-  struct symbol *sym;\n-  struct type *type;\n+  ctf_next_t *i = nullptr;\n+  const char *tname;\n   ctf_id_t tid;\n+  struct symbol *sym = nullptr;\n+  struct type *type;\n \n-  if ((tid = ctf_lookup_by_symbol (ccp->fp, idx)) == CTF_ERR)\n-    return nullptr;\n-\n-  type = fetch_tid_type (ccp, tid);\n-  if (type == nullptr)\n-    return nullptr;\n-\n-  sym = new_symbol (ccp, type, tid);\n-\n-  return sym;\n+  while ((tid = ctf_symbol_next (ccp->fp, &i, &tname, functions)) != CTF_ERR)\n+    {\n+      type = get_tid_type (ccp->of, tid);\n+      if (type == nullptr)\n+\tcontinue;\n+      sym = new (&ccp->of->objfile_obstack) symbol;\n+      OBJSTAT (ccp->of, n_syms++);\n+      SYMBOL_TYPE (sym) = type;\n+      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      SYMBOL_ACLASS_INDEX (sym) = LOC_STATIC;\n+      sym->compute_and_set_names (tname, false, ccp->of->per_bfd);\n+      add_symbol_to_list (sym, ccp->builder->get_global_symbols ());\n+      set_symbol_address (ccp->of, sym, tname);\n+    }\n }\n \n-/* Add an ELF STT_FUNC symbol with index IDX to the symbol table.  */\n+/* Add entries in data objects section.  */\n \n-static struct symbol *\n-add_stt_func (struct ctf_context *ccp, unsigned long idx)\n+static void\n+add_stt_obj (struct ctf_context *ccp)\n {\n-  struct type *ftype, *atyp, *rettyp;\n-  struct symbol *sym;\n-  ctf_funcinfo_t finfo;\n-  ctf_id_t argv[32];\n-  uint32_t argc;\n-  ctf_id_t tid;\n-  struct type *void_type = objfile_type (ccp->of)->builtin_void;\n-\n-  if (ctf_func_info (ccp->fp, idx, &finfo) == CTF_ERR)\n-    return nullptr;\n-\n-  argc = finfo.ctc_argc;\n-  if (ctf_func_args (ccp->fp, idx, argc, argv) == CTF_ERR)\n-    return nullptr;\n-\n-  gdb::unique_xmalloc_ptr<char> name (ctf_type_aname_raw (ccp->fp, idx));\n-  if (name == nullptr)\n-    return nullptr;\n-\n-  tid = ctf_lookup_by_symbol (ccp->fp, idx);\n-  ftype = fetch_tid_type (ccp, tid);\n-  if ((finfo.ctc_flags & CTF_FUNC_VARARG) != 0)\n-    ftype->set_has_varargs (true);\n-  ftype->set_num_fields (argc);\n-\n-  /* If argc is 0, it has a \"void\" type.  */\n-  if (argc != 0)\n-    ftype->set_fields\n-      ((struct field *) TYPE_ZALLOC (ftype, argc * sizeof (struct field)));\n-\n-  /* TYPE_FIELD_TYPE must never be NULL.  Fill it with void_type, if failed\n-     to find the argument type.  */\n-  for (int iparam = 0; iparam < argc; iparam++)\n-    {\n-      atyp = fetch_tid_type (ccp, argv[iparam]);\n-      if (atyp)\n-\tftype->field (iparam).set_type (atyp);\n-      else\n-\tftype->field (iparam).set_type (void_type);\n-    }\n+  add_stt_entries (ccp, 0);\n+}\n \n-  sym = new_symbol (ccp, ftype, tid);\n-  rettyp = fetch_tid_type (ccp, finfo.ctc_return);\n-  if (rettyp != nullptr)\n-    SYMBOL_TYPE (sym) = rettyp;\n-  else\n-    SYMBOL_TYPE (sym) = void_type;\n+/* Add entries in function info section.  */\n \n-  return sym;\n+static void\n+add_stt_func (struct ctf_context *ccp)\n+{\n+  add_stt_entries (ccp, 1);\n }\n \n /* Get text segment base for OBJFILE, TSIZE contains the segment size.  */\n@@ -1271,7 +1248,7 @@ ctf_start_symtab (ctf_psymtab *pst,\n {\n   struct ctf_context *ccp;\n \n-  ccp = pst->context;\n+  ccp = &pst->context;\n   ccp->builder = new buildsym_compunit\n \t\t       (of, of->original_name, nullptr,\n \t\t       language_c, text_offset);\n@@ -1288,7 +1265,7 @@ ctf_end_symtab (ctf_psymtab *pst,\n {\n   struct ctf_context *ccp;\n \n-  ccp = pst->context;\n+  ccp = &pst->context;\n   struct compunit_symtab *result\n     = ccp->builder->end_symtab (end_addr, section);\n   delete ccp->builder;\n@@ -1317,17 +1294,76 @@ ctf_psymtab_add_enums (struct ctf_context *ccp, ctf_id_t tid)\n \t       ctf_errmsg (ctf_errno (ccp->fp)));\n }\n \n+/* Add entries in either data objects or function info section, controlled\n+   by FUNCTIONS, to psymtab.  */\n+\n+static void\n+ctf_psymtab_add_stt_entries (ctf_dict_t *cfp, ctf_psymtab *pst,\n+\t\t\t     struct objfile *of, int functions)\n+{\n+  ctf_next_t *i = nullptr;\n+  ctf_id_t tid;\n+  const char *tname;\n+\n+  while ((tid = ctf_symbol_next (cfp, &i, &tname, functions)) != CTF_ERR)\n+    {\n+      uint32_t kind = ctf_type_kind (cfp, tid);\n+      address_class aclass;\n+      domain_enum tdomain;\n+      switch (kind)\n+\t{\n+\t  case CTF_K_STRUCT:\n+\t  case CTF_K_UNION:\n+\t  case CTF_K_ENUM:\n+\t    tdomain = STRUCT_DOMAIN;\n+\t    break;\n+\t  default:\n+\t    tdomain = VAR_DOMAIN;\n+\t    break;\n+\t}\n+\n+      if (kind == CTF_K_FUNCTION)\n+\taclass = LOC_STATIC;\n+      else if (kind == CTF_K_CONST)\n+\taclass = LOC_CONST;\n+      else\n+\taclass = LOC_TYPEDEF;\n+\n+      pst->add_psymbol (tname, true,\n+\t\t\ttdomain, aclass, -1,\n+\t\t\tpsymbol_placement::GLOBAL,\n+\t\t\t0, language_c, pst->context.partial_symtabs, of);\n+    }\n+}\n+\n+/* Add entries in data objects section to psymtab.  */\n+\n+static void\n+ctf_psymtab_add_stt_obj (ctf_dict_t *cfp, ctf_psymtab *pst,\n+\t\t\t struct objfile *of)\n+{\n+  ctf_psymtab_add_stt_entries (cfp, pst, of, 0);\n+}\n+\n+/* Add entries in function info section to psymtab.  */\n+\n+static void\n+ctf_psymtab_add_stt_func (ctf_dict_t *cfp, ctf_psymtab *pst,\n+\t\t\t  struct objfile *of)\n+{\n+  ctf_psymtab_add_stt_entries (cfp, pst, of, 1);\n+}\n+\n /* Read in full symbols for PST, and anything it depends on.  */\n \n void\n ctf_psymtab::expand_psymtab (struct objfile *objfile)\n {\n-  struct symbol *sym;\n   struct ctf_context *ccp;\n \n   gdb_assert (!readin);\n \n-  ccp = context;\n+  ccp = &context;\n \n   /* Iterate over entries in data types section.  */\n   if (ctf_type_iter (ccp->fp, ctf_add_type_cb, ccp) == CTF_ERR)\n@@ -1341,21 +1377,8 @@ ctf_psymtab::expand_psymtab (struct objfile *objfile)\n \t       ctf_errmsg (ctf_errno (ccp->fp)));\n \n   /* Add entries in data objects and function info sections.  */\n-  for (unsigned long i = 0; ; i++)\n-    {\n-      sym = add_stt_obj (ccp, i);\n-      if (sym == nullptr)\n-\t{\n-\t  if (ctf_errno (ccp->fp) == EINVAL\n-\t      || ctf_errno (ccp->fp) == ECTF_NOSYMTAB)\n-\t    break;\n-\t  sym = add_stt_func (ccp, i);\n-\t}\n-      if (sym == nullptr)\n-\tcontinue;\n-\n-      set_symbol_address (ccp->of, sym, sym->linkage_name ());\n-    }\n+  add_stt_obj (ccp);\n+  add_stt_func (ccp);\n \n   readin = true;\n }\n@@ -1409,22 +1432,20 @@ ctf_psymtab::read_symtab (struct objfile *objfile)\n \n static ctf_psymtab *\n create_partial_symtab (const char *name,\n+\t\t       ctf_archive_t *arc,\n \t\t       ctf_dict_t *cfp,\n \t\t       psymtab_storage *partial_symtabs,\n \t\t       struct objfile *objfile)\n {\n   ctf_psymtab *pst;\n-  struct ctf_context *ccx;\n \n   pst = new ctf_psymtab (name, partial_symtabs, objfile->per_bfd, 0);\n \n-  ccx = XOBNEW (&objfile->objfile_obstack, struct ctf_context);\n-  ccx->fp = cfp;\n-  ccx->of = objfile;\n-  ccx->partial_symtabs = partial_symtabs;\n-  ccx->pst = pst;\n-  ccx->builder = nullptr;\n-  pst->context = ccx;\n+  pst->context.arc = arc;\n+  pst->context.fp = cfp;\n+  pst->context.of = objfile;\n+  pst->context.partial_symtabs = partial_symtabs;\n+  pst->context.pst = pst;\n \n   return pst;\n }\n@@ -1486,7 +1507,7 @@ ctf_psymtab_type_cb (ctf_id_t tid, void *arg)\n \n   ccp->pst->add_psymbol (name, false,\n \t\t\t domain, aclass, section,\n-\t\t\t psymbol_placement::GLOBAL,\n+\t\t\t psymbol_placement::STATIC,\n \t\t\t 0, language_c, ccp->partial_symtabs, ccp->of);\n \n   return 0;\n@@ -1506,18 +1527,46 @@ ctf_psymtab_var_cb (const char *name, ctf_id_t id, void *arg)\n   return 0;\n }\n \n+/* Start a subfile for CTF. FNAME is the name of the archive.  */\n+\n+static void\n+ctf_start_archive (struct ctf_context *ccx, struct objfile *of,\n+\t\t   const char *fname)\n+{\n+  if (ccx->builder == nullptr)\n+    {\n+      ccx->builder = new buildsym_compunit (of,\n+\t\t      of->original_name, nullptr, language_c, 0);\n+      ccx->builder->record_debugformat (\"ctf\");\n+    }\n+  ccx->builder->start_subfile (fname);\n+}\n+\n /* Setup partial_symtab's describing each source file for which\n    debugging information is available.  */\n \n static void\n scan_partial_symbols (ctf_dict_t *cfp, psymtab_storage *partial_symtabs,\n-\t\t      struct objfile *of)\n+\t\t      struct ctf_per_tu_data *tup, const char *fname)\n {\n-  bfd *abfd = of->obfd;\n-  const char *name = bfd_get_filename (abfd);\n-  ctf_psymtab *pst = create_partial_symtab (name, cfp, partial_symtabs, of);\n+  struct objfile *of = tup->of;\n+  bool isparent = false;\n+\n+  if (strcmp (fname, \".ctf\") == 0)\n+    {\n+      fname = bfd_get_filename (of->obfd);\n+      isparent = true;\n+    }\n \n-  struct ctf_context *ccx = pst->context;\n+  ctf_psymtab *pst = create_partial_symtab (fname, tup->arc, cfp,\n+\t\t\t\t\t    partial_symtabs, of);\n+\n+  struct ctf_context *ccx = &pst->context;\n+  if (isparent == false)\n+    {\n+      ctf_start_archive (ccx, of, fname);\n+      ccx->pst = pst;\n+    }\n \n   if (ctf_type_iter (cfp, ctf_psymtab_type_cb, ccx) == CTF_ERR)\n     complaint (_(\"ctf_type_iter scan_partial_symbols failed - %s\"),\n@@ -1530,46 +1579,33 @@ scan_partial_symbols (ctf_dict_t *cfp, psymtab_storage *partial_symtabs,\n   /* Scan CTF object and function sections which correspond to each\n      STT_FUNC or STT_OBJECT entry in the symbol table,\n      pick up what init_symtab has done.  */\n-  for (unsigned long idx = 0; ; idx++)\n-    {\n-      ctf_id_t tid;\n-      if ((tid = ctf_lookup_by_symbol (cfp, idx)) == CTF_ERR)\n-\t{\n-\tif (ctf_errno (cfp) == EINVAL || ctf_errno (cfp) == ECTF_NOSYMTAB)\n-\t  break;\t// Done, reach end of the section.\n-\telse\n-\t  continue;\n-\t}\n-      const char *tname = ctf_type_name_raw (cfp, tid);\n-      uint32_t kind = ctf_type_kind (cfp, tid);\n-      address_class aclass;\n-      domain_enum tdomain;\n-      switch (kind)\n-\t{\n-\t  case CTF_K_STRUCT:\n-\t  case CTF_K_UNION:\n-\t  case CTF_K_ENUM:\n-\t    tdomain = STRUCT_DOMAIN;\n-\t    break;\n-\t  default:\n-\t    tdomain = VAR_DOMAIN;\n-\t    break;\n-\t}\n+  ctf_psymtab_add_stt_obj (cfp, pst, of);\n+  ctf_psymtab_add_stt_func (cfp, pst, of);\n \n-      if (kind == CTF_K_FUNCTION)\n-\taclass = LOC_STATIC;\n-      else if (kind == CTF_K_CONST)\n-\taclass = LOC_CONST;\n-      else\n-\taclass = LOC_TYPEDEF;\n+  pst->end ();\n+}\n \n-      pst->add_psymbol (tname, false,\n-\t\t\ttdomain, aclass, -1,\n-\t\t\tpsymbol_placement::STATIC,\n-\t\t\t0, language_c, partial_symtabs, of);\n+/* Callback to build the psymtab for archive member NAME.  */\n+\n+static int\n+build_ctf_archive_member (ctf_dict_t *ctf, const char *name, void *arg)\n+{\n+  struct ctf_per_tu_data *tup = (struct ctf_per_tu_data *) arg;\n+  ctf_dict_t *parent = tup->fp;\n+\n+  if (strcmp (name, \".ctf\") != 0)\n+    ctf_import (ctf, parent);\n+\n+  if (info_verbose)\n+    {\n+      printf_filtered (_(\"Scanning archive member %s...\"), name);\n+      gdb_flush (gdb_stdout);\n     }\n \n-  pst->end ();\n+  psymtab_storage *pss = tup->psf->get_partial_symtabs ().get ();\n+  scan_partial_symbols (ctf, pss, tup, name);\n+\n+  return 0;\n }\n \n /* Read CTF debugging information from a BFD section.  This is\n@@ -1579,6 +1615,7 @@ scan_partial_symbols (ctf_dict_t *cfp, psymtab_storage *partial_symtabs,\n void\n elfctf_build_psymtabs (struct objfile *of)\n {\n+  struct ctf_per_tu_data pcu;\n   bfd *abfd = of->obfd;\n   int err;\n \n@@ -1593,10 +1630,17 @@ elfctf_build_psymtabs (struct objfile *of)\n \t   bfd_get_filename (abfd), ctf_errmsg (err));\n   ctf_dict_key.emplace (of, fp);\n \n+  pcu.fp = fp;\n+  pcu.of = of;\n+  pcu.arc = arc;\n+\n   psymbol_functions *psf = new psymbol_functions ();\n-  psymtab_storage *partial_symtabs = psf->get_partial_symtabs ().get ();\n   of->qf.emplace_front (psf);\n-  scan_partial_symbols (fp, partial_symtabs, of);\n+  pcu.psf = psf;\n+\n+  if (ctf_archive_iter (arc, build_ctf_archive_member, &pcu) < 0)\n+    error (_(\"ctf_archive_iter failed in input file %s: - %s\"),\n+\t   bfd_get_filename (abfd), ctf_errmsg (err));\n }\n \n #else"
    },
    {
      "sha": "2e57ea0126ecfe8dc365fab9e9d0dec24f8e6d54",
      "filename": "gdb/testsuite/gdb.base/ctf-constvars.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.base/ctf-constvars.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.base/ctf-constvars.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/ctf-constvars.exp?ref=ffb3f587933f20bf9e6e9a26ac547a8589fac081",
      "patch": "@@ -31,8 +31,8 @@ if [skip_ctf_tests] {\n \n standard_testfile .c\n \n-# Using `-gt` generates full-fledged CTF debug information.\n-set opts \"additional_flags=-gt\"\n+# Using `-gctf` generates full-fledged CTF debug information.\n+set opts \"additional_flags=-gctf\"\n if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n \t  [list $srcfile] [list $opts nowarnings]] } {\n     return 0"
    },
    {
      "sha": "a756edc5a2030cdfceef4e3d9e8c7e04908c14a6",
      "filename": "gdb/testsuite/gdb.base/ctf-ptype.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.base/ctf-ptype.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.base/ctf-ptype.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/ctf-ptype.exp?ref=ffb3f587933f20bf9e6e9a26ac547a8589fac081",
      "patch": "@@ -22,8 +22,8 @@ if [skip_ctf_tests] {\n \n standard_testfile .c\n \n-# Using `-gt` generates full-fledged CTF debug information.\n-set opts \"additional_flags=-gt\"\n+# Using `-gctf` generates full-fledged CTF debug information.\n+set opts \"additional_flags=-gctf\"\n \n if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n \t  [list $srcfile] [list $opts nowarnings]] } {"
    },
    {
      "sha": "fe52b9ef22042c29a387c9296a30417f0c1d6185",
      "filename": "gdb/testsuite/gdb.ctf/cross-tu-cyclic-1.c",
      "status": "added",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/cross-tu-cyclic-1.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/cross-tu-cyclic-1.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ctf/cross-tu-cyclic-1.c?ref=ffb3f587933f20bf9e6e9a26ac547a8589fac081",
      "patch": "@@ -0,0 +1,18 @@\n+struct A;\n+struct B\n+{\n+  int foo;\n+  struct A *bar;\n+};\n+\n+struct A\n+{\n+  long a;\n+  struct B *foo;\n+};\n+\n+static struct A *foo __attribute__((used));\n+\n+int main()\n+{\n+}"
    },
    {
      "sha": "aa2d177cf9c5d925b4722bcf734b5b128746eb63",
      "filename": "gdb/testsuite/gdb.ctf/cross-tu-cyclic-2.c",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/cross-tu-cyclic-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/cross-tu-cyclic-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ctf/cross-tu-cyclic-2.c?ref=ffb3f587933f20bf9e6e9a26ac547a8589fac081",
      "patch": "@@ -0,0 +1,16 @@\n+struct B;\n+struct A\n+{\n+  long a;\n+  struct B *foo;\n+  struct C *bar;\n+};\n+\n+struct C\n+{\n+  struct B *foo;\n+  int b;\n+};\n+\n+static struct C *foo __attribute__((used));\n+static struct A *bar __attribute__((used));"
    },
    {
      "sha": "19947e8510469428f2490046f2b9a88b3d242a81",
      "filename": "gdb/testsuite/gdb.ctf/cross-tu-cyclic-3.c",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/cross-tu-cyclic-3.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/cross-tu-cyclic-3.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ctf/cross-tu-cyclic-3.c?ref=ffb3f587933f20bf9e6e9a26ac547a8589fac081",
      "patch": "@@ -0,0 +1,3 @@\n+struct A { struct B *foo; };\n+static struct A *a __attribute__((__used__));\n+static struct A *conflicty __attribute__((__used__));"
    },
    {
      "sha": "6e0c957e8fed94f170822162e37cbac07919fb8b",
      "filename": "gdb/testsuite/gdb.ctf/cross-tu-cyclic-4.c",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/cross-tu-cyclic-4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/cross-tu-cyclic-4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ctf/cross-tu-cyclic-4.c?ref=ffb3f587933f20bf9e6e9a26ac547a8589fac081",
      "patch": "@@ -0,0 +1,4 @@\n+struct A { struct B *foo; };\n+struct B { struct B *next; };\n+static struct A *a __attribute__((__used__));\n+static struct B *conflicty __attribute__((__used__));"
    },
    {
      "sha": "f617f1b4cf27c02a905b8b78bf2d16002fbb848b",
      "filename": "gdb/testsuite/gdb.ctf/cross-tu-cyclic.exp",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/cross-tu-cyclic.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/cross-tu-cyclic.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ctf/cross-tu-cyclic.exp?ref=ffb3f587933f20bf9e6e9a26ac547a8589fac081",
      "patch": "@@ -0,0 +1,43 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This file is a subset of ptype.exp written by Rob Savoye. (rob@cygnus.com)\n+\n+if [skip_ctf_tests] {\n+    unsupported \"no CTF debug format support, or CTF disabled in GDB\"\n+    return 0\n+}\n+\n+standard_testfile cross-tu-cyclic-1.c  cross-tu-cyclic-2.c \\\n+\tcross-tu-cyclic-3.c  cross-tu-cyclic-4.c\n+\n+# Using `-gctf` generates full-fledged CTF debug information.\n+set opts \"additional_flags=-gctf -Wl,--export-dynamic\"\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $srcfile2 $srcfile3 $srcfile4] \\\n+\t  [list $opts nowarnings]] } {\n+    return 0\n+}\n+\n+# Create and source the file that provides information about the compiler\n+# used to compile the test case.\n+if [get_compiler_info] {\n+    return -1\n+}\n+\n+# Same thing with struct and union.\n+gdb_test \"ptype struct A\" \"type = struct A \\{\\[\\r\\n\\]+\\[ \\t\\]+struct B \\\\*foo;\\[\\r\\n\\]+\\}.*\" \"ptype structure A\"\n+gdb_test \"ptype struct B\" \"type = struct B \\{\\[\\r\\n\\]+\\[ \\t\\]+struct B \\\\*next;\\[\\r\\n\\]+\\}.*\" \"ptype structure B\"\n+gdb_test \"ptype struct C\" \"type = struct C \\{\\[\\r\\n\\]+\\[ \\t\\]+struct B \\\\*foo;\\[\\r\\n\\]+\\[ \\t\\]+int b;\\[\\r\\n\\]+\\}.*\" \"ptype structure C\""
    },
    {
      "sha": "9aa2a8ff08347e1bcdb461e3a1fea5f2d676f3eb",
      "filename": "gdb/testsuite/gdb.ctf/ctf-a.c",
      "status": "added",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/ctf-a.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/ctf-a.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ctf/ctf-a.c?ref=ffb3f587933f20bf9e6e9a26ac547a8589fac081",
      "patch": "@@ -0,0 +1,32 @@\n+/* This test program is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"ctf-a.h\"\n+\n+static struct A a __attribute__((used));\n+\n+extern struct C *foo ();\n+extern int bar ();\n+\n+int main ()\n+{\n+  struct C *cp;\n+  cp = foo ();\n+  if (cp)\n+    return bar ();\n+  return 0;\n+}"
    },
    {
      "sha": "297d740146cd0398a06f4ab9dc4759089f872d01",
      "filename": "gdb/testsuite/gdb.ctf/ctf-a.h",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/ctf-a.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/ctf-a.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ctf/ctf-a.h?ref=ffb3f587933f20bf9e6e9a26ac547a8589fac081",
      "patch": "@@ -0,0 +1,22 @@\n+/* This test program is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+struct A {\n+  struct B *b;\n+  struct A *next;\n+};\n+"
    },
    {
      "sha": "c3a8ce500583be9912cda10c6db5b48b99f43e0f",
      "filename": "gdb/testsuite/gdb.ctf/ctf-b.c",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/ctf-b.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/ctf-b.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ctf/ctf-b.c?ref=ffb3f587933f20bf9e6e9a26ac547a8589fac081",
      "patch": "@@ -0,0 +1,25 @@\n+/* This test program is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"ctf-b.h\"\n+\n+static struct B b __attribute__((used));\n+\n+int bar ()\n+{\n+  return b.wombat;\n+}"
    },
    {
      "sha": "9dbdd7d038e44c7b873db25f425e4fe25512b5dc",
      "filename": "gdb/testsuite/gdb.ctf/ctf-b.h",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/ctf-b.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/ctf-b.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ctf/ctf-b.h?ref=ffb3f587933f20bf9e6e9a26ac547a8589fac081",
      "patch": "@@ -0,0 +1,22 @@\n+/* This test program is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+struct B {\n+  struct C *c;\n+  int wombat;\n+};\n+"
    },
    {
      "sha": "b4051b3bd9163c9dd4e259a01b2b8dcbc2cb15d3",
      "filename": "gdb/testsuite/gdb.ctf/ctf-c.c",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/ctf-c.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/ctf-c.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ctf/ctf-c.c?ref=ffb3f587933f20bf9e6e9a26ac547a8589fac081",
      "patch": "@@ -0,0 +1,25 @@\n+/* This test program is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"ctf-c.h\"\n+\n+static struct C c __attribute__((used));\n+\n+struct C * foo ()\n+{\n+  return &c;\n+}"
    },
    {
      "sha": "fb18157aaf4f9aad8461b76d1e7223c6e32719af",
      "filename": "gdb/testsuite/gdb.ctf/ctf-c.h",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/ctf-c.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/ctf-c.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ctf/ctf-c.h?ref=ffb3f587933f20bf9e6e9a26ac547a8589fac081",
      "patch": "@@ -0,0 +1,21 @@\n+/* This test program is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+struct C {\n+  struct A *a;\n+  int b;\n+};"
    },
    {
      "sha": "4443c2d86c11e40a53f5d8dabc8cb01f4f71bde3",
      "filename": "gdb/testsuite/gdb.ctf/funcreturn.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/funcreturn.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/funcreturn.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ctf/funcreturn.exp?ref=ffb3f587933f20bf9e6e9a26ac547a8589fac081",
      "patch": "@@ -26,8 +26,8 @@ if [target_info exists no_long_long] {\n \n standard_testfile whatis.c\n \n-# Using `-gt` generates full-fledged CTF debug information.\n-set opts \"additional_flags=-gt -Wl,--export-dynamic\"\n+# Using `-gctf` generates full-fledged CTF debug information.\n+set opts \"additional_flags=-gctf -Wl,--export-dynamic\"\n \n if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n \t  [list $srcfile] [list $opts nowarnings]] } {"
    },
    {
      "sha": "fbed20e782e66e1e153c6a0f94d2073fd7671a4e",
      "filename": "gdb/testsuite/gdb.ctf/multi.exp",
      "status": "added",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/multi.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/gdb.ctf/multi.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ctf/multi.exp?ref=ffb3f587933f20bf9e6e9a26ac547a8589fac081",
      "patch": "@@ -0,0 +1,42 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This file is a subset of ptype.exp written by Rob Savoye. (rob@cygnus.com)\n+\n+if [skip_ctf_tests] {\n+    unsupported \"no CTF debug format support, or CTF disabled in GDB\"\n+    return 0\n+}\n+\n+standard_testfile ctf-a.c ctf-b.c ctf-c.c\n+\n+# Using `-gctf` generates full-fledged CTF debug information.\n+set opts \"additional_flags=-gctf -Wl,--export-dynamic\"\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $srcfile2 $srcfile3] \\\n+\t  [list $opts nowarnings]] } {\n+    return 0\n+}\n+\n+# Create and source the file that provides information about the compiler\n+# used to compile the test case.\n+if [get_compiler_info] {\n+    return -1\n+}\n+\n+# Same thing with struct and union.\n+gdb_test \"ptype struct A\" \"type = struct A \\{\\[\\r\\n\\]+\\[ \\t\\]+struct B \\\\*b;\\[\\r\\n\\]+\\[ \\t\\]+struct A \\\\*next;\\[\\r\\n\\]+\\}.*\" \"ptype structure A\"\n+gdb_test \"ptype struct B\" \"type = struct B \\{\\[\\r\\n\\]+\\[ \\t\\]+struct C \\\\*c;\\[\\r\\n\\]+\\[ \\t\\]+int \\\\wombat;\\[\\r\\n\\]+\\}.*\" \"ptype structure B\"\n+gdb_test \"ptype struct C\" \"type = struct C \\{\\[\\r\\n\\]+\\[ \\t\\]+struct A \\\\*a;\\[\\r\\n\\]+\\[ \\t\\]+int b;\\[\\r\\n\\]+\\}.*\" \"ptype structure C\""
    },
    {
      "sha": "b7f3a57c4d935738a99c143d68a83d95f6757800",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffb3f587933f20bf9e6e9a26ac547a8589fac081/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=ffb3f587933f20bf9e6e9a26ac547a8589fac081",
      "patch": "@@ -7737,7 +7737,7 @@ proc cmp_file_string { file str msg } {\n     }\n }\n \n-# Does the compiler support CTF debug output using '-gt' compiler\n+# Does the compiler support CTF debug output using '-gctf' compiler\n # flag?  If not then we should skip these tests.  We should also\n # skip them if libctf was explicitly disabled.\n \n@@ -7752,7 +7752,7 @@ gdb_caching_proc skip_ctf_tests {\n \tint main () {\n \t    return 0;\n \t}\n-    } executable \"additional_flags=-gt\"]\n+    } executable \"additional_flags=-gctf\"]\n \n     return [expr {!$can_ctf}]\n }"
    }
  ]
}