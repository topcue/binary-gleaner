{
  "sha": "5b930b4538f70a9f09280e36164840e48fb1c042",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWI5MzBiNDUzOGY3MGE5ZjA5MjgwZTM2MTY0ODQwZTQ4ZmIxYzA0Mg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-04-01T20:09:52Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-01T20:09:52Z"
    },
    "message": "Change how complex types are created\n\nThis patch changes how complex types are created.  init_complex_type\nand arch_complex_type are unified, and complex types are reused, by\nattaching them to the underlying scalar type.\n\ngdb/ChangeLog\n2020-04-01  Tom Tromey  <tom@tromey.com>\n\n\t* stabsread.c (rs6000_builtin_type, read_sun_floating_type)\n\t(read_range_type): Update.\n\t* mdebugread.c (basic_type): Update.\n\t* go-lang.c (build_go_types): Use init_complex_type.\n\t* gdbtypes.h (struct main_type) <complex_type>: New member.\n\t(init_complex_type): Update.\n\t(arch_complex_type): Don't declare.\n\t* gdbtypes.c (init_complex_type): Remove \"objfile\" parameter.\n\tMake name if none given.  Use alloc_type_copy.  Look for cached\n\tcomplex type.\n\t(arch_complex_type): Remove.\n\t(gdbtypes_post_init): Use init_complex_type.\n\t* f-lang.c (build_fortran_types): Use init_complex_type.\n\t* dwarf2/read.c (read_base_type): Update.\n\t* d-lang.c (build_d_types): Use init_complex_type.\n\t* ctfread.c (read_base_type): Update.",
    "tree": {
      "sha": "d120a1d21ae82f101767de5a68445d265ca22761",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d120a1d21ae82f101767de5a68445d265ca22761"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5b930b4538f70a9f09280e36164840e48fb1c042",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b930b4538f70a9f09280e36164840e48fb1c042",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5b930b4538f70a9f09280e36164840e48fb1c042",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b930b4538f70a9f09280e36164840e48fb1c042/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3d1cfd43bec7c22928d12ab235151b8eeeaf4e96",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d1cfd43bec7c22928d12ab235151b8eeeaf4e96",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3d1cfd43bec7c22928d12ab235151b8eeeaf4e96"
    }
  ],
  "stats": {
    "total": 128,
    "additions": 71,
    "deletions": 57
  },
  "files": [
    {
      "sha": "7a883e81c2fcf58d1c6dfb045565e3d39cb43dc3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5b930b4538f70a9f09280e36164840e48fb1c042",
      "patch": "@@ -1,3 +1,22 @@\n+2020-04-01  Tom Tromey  <tom@tromey.com>\n+\n+\t* stabsread.c (rs6000_builtin_type, read_sun_floating_type)\n+\t(read_range_type): Update.\n+\t* mdebugread.c (basic_type): Update.\n+\t* go-lang.c (build_go_types): Use init_complex_type.\n+\t* gdbtypes.h (struct main_type) <complex_type>: New member.\n+\t(init_complex_type): Update.\n+\t(arch_complex_type): Don't declare.\n+\t* gdbtypes.c (init_complex_type): Remove \"objfile\" parameter.\n+\tMake name if none given.  Use alloc_type_copy.  Look for cached\n+\tcomplex type.\n+\t(arch_complex_type): Remove.\n+\t(gdbtypes_post_init): Use init_complex_type.\n+\t* f-lang.c (build_fortran_types): Use init_complex_type.\n+\t* dwarf2/read.c (read_base_type): Update.\n+\t* d-lang.c (build_d_types): Use init_complex_type.\n+\t* ctfread.c (read_base_type): Update.\n+\n 2020-04-01  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* infrun.c (stop_all_threads): Update assertion, plus when"
    },
    {
      "sha": "7784e9d35d60575d25c12275a88973b0048940dc",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=5b930b4538f70a9f09280e36164840e48fb1c042",
      "patch": "@@ -553,7 +553,7 @@ read_base_type (struct ctf_context *ccp, ctf_id_t tid)\n \t{\n \t  struct type *t\n \t    = ctf_init_float_type (of, cet.cte_bits / 2, NULL, name);\n-\t  type = init_complex_type (of, name, t);\n+\t  type = init_complex_type (name, t);\n \t}\n     }\n   else"
    },
    {
      "sha": "951e664ceda107110246b8433212e9957f096a9c",
      "filename": "gdb/d-lang.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/d-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/d-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-lang.c?ref=5b930b4538f70a9f09280e36164840e48fb1c042",
      "patch": "@@ -314,14 +314,11 @@ build_d_types (struct gdbarch *gdbarch)\n     = arch_float_type (gdbarch, gdbarch_long_double_bit (gdbarch),\n \t\t       \"ireal\", gdbarch_long_double_format (gdbarch));\n   builtin_d_type->builtin_cfloat\n-    = arch_complex_type (gdbarch, \"cfloat\",\n-\t\t\t builtin_d_type->builtin_float);\n+    = init_complex_type (\"cfloat\", builtin_d_type->builtin_float);\n   builtin_d_type->builtin_cdouble\n-    = arch_complex_type (gdbarch, \"cdouble\",\n-\t\t\t builtin_d_type->builtin_double);\n+    = init_complex_type (\"cdouble\", builtin_d_type->builtin_double);\n   builtin_d_type->builtin_creal\n-    = arch_complex_type (gdbarch, \"creal\",\n-\t\t\t builtin_d_type->builtin_real);\n+    = init_complex_type (\"creal\", builtin_d_type->builtin_real);\n \n   /* Character types.  */\n   builtin_d_type->builtin_char"
    },
    {
      "sha": "2db527ecb825c1b010993f63c87182b5c9ba4063",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=5b930b4538f70a9f09280e36164840e48fb1c042",
      "patch": "@@ -16880,7 +16880,7 @@ read_base_type (struct die_info *die, struct dwarf2_cu *cu)\n       case DW_ATE_complex_float:\n \ttype = dwarf2_init_complex_target_type (cu, objfile, bits / 2, name,\n \t\t\t\t\t\tbyte_order);\n-\ttype = init_complex_type (objfile, name, type);\n+\ttype = init_complex_type (name, type);\n \tbreak;\n       case DW_ATE_decimal_float:\n \ttype = init_decfloat_type (objfile, bits, name);"
    },
    {
      "sha": "2ce4ad43610e87141e99b14153c3a71a6019f18b",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=5b930b4538f70a9f09280e36164840e48fb1c042",
      "patch": "@@ -741,14 +741,11 @@ build_fortran_types (struct gdbarch *gdbarch)\n       = arch_type (gdbarch, TYPE_CODE_ERROR, 128, \"real*16\");\n \n   builtin_f_type->builtin_complex_s8\n-    = arch_complex_type (gdbarch, \"complex*8\",\n-\t\t\t builtin_f_type->builtin_real);\n+    = init_complex_type (\"complex*8\", builtin_f_type->builtin_real);\n   builtin_f_type->builtin_complex_s16\n-    = arch_complex_type (gdbarch, \"complex*16\",\n-\t\t\t builtin_f_type->builtin_real_s8);\n+    = init_complex_type (\"complex*16\", builtin_f_type->builtin_real_s8);\n   builtin_f_type->builtin_complex_s32\n-    = arch_complex_type (gdbarch, \"complex*32\",\n-\t\t\t builtin_f_type->builtin_real_s16);\n+    = init_complex_type (\"complex*32\", builtin_f_type->builtin_real_s16);\n \n   return builtin_f_type;\n }"
    },
    {
      "sha": "f23def1ff71cca58e41326de7fa7e10c408c90e5",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 31,
      "deletions": 27,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=5b930b4538f70a9f09280e36164840e48fb1c042",
      "patch": "@@ -3025,19 +3025,40 @@ init_decfloat_type (struct objfile *objfile, int bit, const char *name)\n   return t;\n }\n \n-/* Allocate a TYPE_CODE_COMPLEX type structure associated with OBJFILE.\n-   NAME is the type name.  TARGET_TYPE is the component float type.  */\n+/* Allocate a TYPE_CODE_COMPLEX type structure.  NAME is the type\n+   name.  TARGET_TYPE is the component type.  */\n \n struct type *\n-init_complex_type (struct objfile *objfile,\n-\t\t   const char *name, struct type *target_type)\n+init_complex_type (const char *name, struct type *target_type)\n {\n   struct type *t;\n \n-  t = init_type (objfile, TYPE_CODE_COMPLEX,\n-\t\t 2 * TYPE_LENGTH (target_type) * TARGET_CHAR_BIT, name);\n-  TYPE_TARGET_TYPE (t) = target_type;\n-  return t;\n+  gdb_assert (TYPE_CODE (target_type) == TYPE_CODE_INT\n+\t      || TYPE_CODE (target_type) == TYPE_CODE_FLT);\n+\n+  if (TYPE_MAIN_TYPE (target_type)->flds_bnds.complex_type == nullptr)\n+    {\n+      if (name == nullptr)\n+\t{\n+\t  char *new_name\n+\t    = (char *) TYPE_ALLOC (target_type,\n+\t\t\t\t   strlen (TYPE_NAME (target_type))\n+\t\t\t\t   + strlen (\"_Complex \") + 1);\n+\t  strcpy (new_name, \"_Complex \");\n+\t  strcat (new_name, TYPE_NAME (target_type));\n+\t  name = new_name;\n+\t}\n+\n+      t = alloc_type_copy (target_type);\n+      set_type_code (t, TYPE_CODE_COMPLEX);\n+      TYPE_LENGTH (t) = 2 * TYPE_LENGTH (target_type);\n+      TYPE_NAME (t) = name;\n+\n+      TYPE_TARGET_TYPE (t) = target_type;\n+      TYPE_MAIN_TYPE (target_type)->flds_bnds.complex_type = t;\n+    }\n+\n+  return TYPE_MAIN_TYPE (target_type)->flds_bnds.complex_type;\n }\n \n /* Allocate a TYPE_CODE_PTR type structure associated with OBJFILE.\n@@ -5259,21 +5280,6 @@ arch_decfloat_type (struct gdbarch *gdbarch, int bit, const char *name)\n   return t;\n }\n \n-/* Allocate a TYPE_CODE_COMPLEX type structure associated with GDBARCH.\n-   NAME is the type name.  TARGET_TYPE is the component float type.  */\n-\n-struct type *\n-arch_complex_type (struct gdbarch *gdbarch,\n-\t\t   const char *name, struct type *target_type)\n-{\n-  struct type *t;\n-\n-  t = arch_type (gdbarch, TYPE_CODE_COMPLEX,\n-\t\t 2 * TYPE_LENGTH (target_type) * TARGET_CHAR_BIT, name);\n-  TYPE_TARGET_TYPE (t) = target_type;\n-  return t;\n-}\n-\n /* Allocate a TYPE_CODE_PTR type structure associated with GDBARCH.\n    BIT is the pointer type size in bits.  NAME is the type name.\n    TARGET_TYPE is the pointer target type.  Always sets the pointer type's\n@@ -5497,11 +5503,9 @@ gdbtypes_post_init (struct gdbarch *gdbarch)\n     = arch_float_type (gdbarch, gdbarch_long_double_bit (gdbarch),\n \t\t       \"long double\", gdbarch_long_double_format (gdbarch));\n   builtin_type->builtin_complex\n-    = arch_complex_type (gdbarch, \"complex\",\n-\t\t\t builtin_type->builtin_float);\n+    = init_complex_type (\"complex\", builtin_type->builtin_float);\n   builtin_type->builtin_double_complex\n-    = arch_complex_type (gdbarch, \"double complex\",\n-\t\t\t builtin_type->builtin_double);\n+    = init_complex_type (\"double complex\", builtin_type->builtin_double);\n   builtin_type->builtin_string\n     = arch_type (gdbarch, TYPE_CODE_STRING, TARGET_CHAR_BIT, \"string\");\n   builtin_type->builtin_bool"
    },
    {
      "sha": "77cc92e419d3dd1607a3af9f95814f3900a2ff48",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=5b930b4538f70a9f09280e36164840e48fb1c042",
      "patch": "@@ -803,6 +803,10 @@ struct main_type\n \n     struct range_bounds *bounds;\n \n+    /* If this is a scalar type, then this is its corresponding\n+       complex type.  */\n+    struct type *complex_type;\n+\n   } flds_bnds;\n \n   /* * Slot to point to additional language-specific fields of this\n@@ -1841,8 +1845,7 @@ extern struct type *init_float_type (struct objfile *, int, const char *,\n \t\t\t\t     const struct floatformat **,\n \t\t\t\t     enum bfd_endian = BFD_ENDIAN_UNKNOWN);\n extern struct type *init_decfloat_type (struct objfile *, int, const char *);\n-extern struct type *init_complex_type (struct objfile *, const char *,\n-\t\t\t\t       struct type *);\n+extern struct type *init_complex_type (const char *, struct type *);\n extern struct type *init_pointer_type (struct objfile *, int, const char *,\n \t\t\t\t       struct type *);\n \n@@ -1858,8 +1861,6 @@ extern struct type *arch_boolean_type (struct gdbarch *, int, int,\n extern struct type *arch_float_type (struct gdbarch *, int, const char *,\n \t\t\t\t     const struct floatformat **);\n extern struct type *arch_decfloat_type (struct gdbarch *, int, const char *);\n-extern struct type *arch_complex_type (struct gdbarch *, const char *,\n-\t\t\t\t       struct type *);\n extern struct type *arch_pointer_type (struct gdbarch *, int, const char *,\n \t\t\t\t       struct type *);\n "
    },
    {
      "sha": "03dc986ab6a1dcd580c41eba468ce12540e6c7f9",
      "filename": "gdb/go-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/go-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/go-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.c?ref=5b930b4538f70a9f09280e36164840e48fb1c042",
      "patch": "@@ -665,11 +665,9 @@ build_go_types (struct gdbarch *gdbarch)\n   builtin_go_type->builtin_float64\n     = arch_float_type (gdbarch, 64, \"float64\", floatformats_ieee_double);\n   builtin_go_type->builtin_complex64\n-    = arch_complex_type (gdbarch, \"complex64\",\n-\t\t\t builtin_go_type->builtin_float32);\n+    = init_complex_type (\"complex64\", builtin_go_type->builtin_float32);\n   builtin_go_type->builtin_complex128\n-    = arch_complex_type (gdbarch, \"complex128\",\n-\t\t\t builtin_go_type->builtin_float64);\n+    = init_complex_type (\"complex128\", builtin_go_type->builtin_float64);\n \n   return builtin_go_type;\n }"
    },
    {
      "sha": "bac6fd6c46562831f7e4acbf3a503dafcd654f87",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=5b930b4538f70a9f09280e36164840e48fb1c042",
      "patch": "@@ -1429,13 +1429,11 @@ basic_type (int bt, struct objfile *objfile)\n       break;\n \n     case btComplex:\n-      tp = init_complex_type (objfile, \"complex\",\n-\t\t\t      basic_type (btFloat, objfile));\n+      tp = init_complex_type (\"complex\", basic_type (btFloat, objfile));\n       break;\n \n     case btDComplex:\n-      tp = init_complex_type (objfile, \"double complex\",\n-\t\t\t      basic_type (btFloat, objfile));\n+      tp = init_complex_type (\"double complex\", basic_type (btFloat, objfile));\n       break;\n \n     case btFixedDec:"
    },
    {
      "sha": "068ece2ff5345e473a2ad7e3e1f561d4b2e7abc9",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b930b4538f70a9f09280e36164840e48fb1c042/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=5b930b4538f70a9f09280e36164840e48fb1c042",
      "patch": "@@ -2186,12 +2186,12 @@ rs6000_builtin_type (int typenum, struct objfile *objfile)\n       break;\n     case 25:\n       /* Complex type consisting of two IEEE single precision values.  */\n-      rettype = init_complex_type (objfile, \"complex\",\n+      rettype = init_complex_type (\"complex\",\n \t\t\t\t   rs6000_builtin_type (12, objfile));\n       break;\n     case 26:\n       /* Complex type consisting of two IEEE double precision values.  */\n-      rettype = init_complex_type (objfile, \"double complex\",\n+      rettype = init_complex_type (\"double complex\",\n \t\t\t\t   rs6000_builtin_type (13, objfile));\n       break;\n     case 27:\n@@ -3805,7 +3805,7 @@ read_sun_floating_type (const char **pp, int typenums[2],\n       || details == NF_COMPLEX32)\n     {\n       rettype = dbx_init_float_type (objfile, nbits / 2);\n-      return init_complex_type (objfile, NULL, rettype);\n+      return init_complex_type (NULL, rettype);\n     }\n \n   return dbx_init_float_type (objfile, nbits);\n@@ -4099,7 +4099,7 @@ read_range_type (const char **pp, int typenums[2], int type_size,\n \t= dbx_init_float_type (objfile, n2 * TARGET_CHAR_BIT);\n \n       if (self_subrange)\n-\treturn init_complex_type (objfile, NULL, float_type);\n+\treturn init_complex_type (NULL, float_type);\n       else\n \treturn float_type;\n     }"
    }
  ]
}