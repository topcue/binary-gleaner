{
  "sha": "8d06918ff58452cb17d1bdfbde7187f45933f42e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGQwNjkxOGZmNTg0NTJjYjE3ZDFiZGZiZGU3MTg3ZjQ1OTMzZjQyZQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-09T01:06:41Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-09T01:07:20Z"
    },
    "message": "gdb, gdbserver: make status_to_str return std::string\n\nInstead of using a static buffer.  This is safer, and we don't really\nmind about any extra dynamic allocation here, since it's only used for\ndebug purposes.\n\ngdb/ChangeLog:\n\n\t* nat/linux-waitpid.c (status_to_str): Return std::string.\n\t* nat/linux-waitpid.h (status_to_str): Likewise.\n\t* linux-nat.c (linux_nat_post_attach_wait): Adjust.\n\t(linux_nat_target::attach): Adjust.\n\t(linux_handle_extended_wait): Adjust.\n\t(wait_lwp): Adjust.\n\t(stop_wait_callback): Adjust.\n\t(linux_nat_filter_event): Adjust.\n\t(linux_nat_wait_1): Adjust.\n\t* nat/linux-waitpid.c (status_to_str): Adjust.\n\t* nat/linux-waitpid.h (status_to_str): Adjust.\n\ngdbserver/ChangeLog:\n\n\t* linux-low.cc (linux_process_target::wait_for_event_filtered):\n\tAdjust to status_to_str returning std::string.\n\nChange-Id: Ia8aead70270438a5690f243e6faafff6c38ff757",
    "tree": {
      "sha": "b265047ba289878cb96ae446b8451a87b16a1c1f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b265047ba289878cb96ae446b8451a87b16a1c1f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8d06918ff58452cb17d1bdfbde7187f45933f42e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8d06918ff58452cb17d1bdfbde7187f45933f42e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8d06918ff58452cb17d1bdfbde7187f45933f42e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8d06918ff58452cb17d1bdfbde7187f45933f42e/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "550e9289ab4f7ec1092a9c0ee202bbe0ba7fb9f5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/550e9289ab4f7ec1092a9c0ee202bbe0ba7fb9f5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/550e9289ab4f7ec1092a9c0ee202bbe0ba7fb9f5"
    }
  ],
  "stats": {
    "total": 66,
    "additions": 41,
    "deletions": 25
  },
  "files": [
    {
      "sha": "75e344ff7073d3f843beeee0ff72587b9bdb459a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d06918ff58452cb17d1bdfbde7187f45933f42e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d06918ff58452cb17d1bdfbde7187f45933f42e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8d06918ff58452cb17d1bdfbde7187f45933f42e",
      "patch": "@@ -1,3 +1,17 @@\n+2021-05-08  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* nat/linux-waitpid.c (status_to_str): Return std::string.\n+\t* nat/linux-waitpid.h (status_to_str): Likewise.\n+\t* linux-nat.c (linux_nat_post_attach_wait): Adjust.\n+\t(linux_nat_target::attach): Adjust.\n+\t(linux_handle_extended_wait): Adjust.\n+\t(wait_lwp): Adjust.\n+\t(stop_wait_callback): Adjust.\n+\t(linux_nat_filter_event): Adjust.\n+\t(linux_nat_wait_1): Adjust.\n+\t* nat/linux-waitpid.c (status_to_str): Adjust.\n+\t* nat/linux-waitpid.h (status_to_str): Adjust.\n+\n 2021-05-08  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* infrun.h (infrun_debug_printf): Add missing space."
    },
    {
      "sha": "34a2aee41d781ca7f1b448768c0491ac2a13f56e",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 11,
      "deletions": 9,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d06918ff58452cb17d1bdfbde7187f45933f42e/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d06918ff58452cb17d1bdfbde7187f45933f42e/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=8d06918ff58452cb17d1bdfbde7187f45933f42e",
      "patch": "@@ -1061,15 +1061,15 @@ linux_nat_post_attach_wait (ptid_t ptid, int *signalled)\n     {\n       /* The pid we tried to attach has apparently just exited.  */\n       linux_nat_debug_printf (\"Failed to stop %d: %s\", pid,\n-\t\t\t      status_to_str (status));\n+\t\t\t      status_to_str (status).c_str ());\n       return status;\n     }\n \n   if (WSTOPSIG (status) != SIGSTOP)\n     {\n       *signalled = 1;\n       linux_nat_debug_printf (\"Received %s after attaching\",\n-\t\t\t      status_to_str (status));\n+\t\t\t      status_to_str (status).c_str ());\n     }\n \n   return status;\n@@ -1239,7 +1239,8 @@ linux_nat_target::attach (const char *args, int from_tty)\n   /* Save the wait status to report later.  */\n   lp->resumed = 1;\n   linux_nat_debug_printf (\"waitpid %ld, saving status %s\",\n-\t\t\t  (long) lp->ptid.pid (), status_to_str (status));\n+\t\t\t  (long) lp->ptid.pid (),\n+\t\t\t  status_to_str (status).c_str ());\n \n   lp->status = status;\n \n@@ -2005,7 +2006,7 @@ linux_handle_extended_wait (struct lwp_info *lp, int status)\n \t      /* Save the wait status to report later.  */\n \t      linux_nat_debug_printf\n \t\t(\"waitpid of new LWP %ld, saving status %s\",\n-\t\t (long) new_lp->ptid.lwp (), status_to_str (status));\n+\t\t (long) new_lp->ptid.lwp (), status_to_str (status).c_str ());\n \t      new_lp->status = status;\n \t    }\n \t  else if (report_thread_events)\n@@ -2153,7 +2154,7 @@ wait_lwp (struct lwp_info *lp)\n \n       linux_nat_debug_printf (\"waitpid %s received %s\",\n \t\t\t      target_pid_to_str (lp->ptid).c_str (),\n-\t\t\t      status_to_str (status));\n+\t\t\t      status_to_str (status).c_str ());\n \n       /* Check if the thread has exited.  */\n       if (WIFEXITED (status) || WIFSIGNALED (status))\n@@ -2440,7 +2441,7 @@ stop_wait_callback (struct lwp_info *lp)\n \t  /* The thread was stopped with a signal other than SIGSTOP.  */\n \n \t  linux_nat_debug_printf (\"Pending event %s in %s\",\n-\t\t\t\t  status_to_str ((int) status),\n+\t\t\t\t  status_to_str ((int) status).c_str (),\n \t\t\t\t  target_pid_to_str (lp->ptid).c_str ());\n \n \t  /* Save the sigtrap event.  */\n@@ -2859,7 +2860,7 @@ linux_nat_filter_event (int lwpid, int status)\n   if (WIFSTOPPED (status) && !lp)\n     {\n       linux_nat_debug_printf (\"saving LWP %ld status %s in stopped_pids list\",\n-\t\t\t      (long) lwpid, status_to_str (status));\n+\t\t\t      (long) lwpid, status_to_str (status).c_str ());\n       add_to_pid_list (&stopped_pids, lwpid, status);\n       return;\n     }\n@@ -3152,7 +3153,7 @@ linux_nat_wait_1 (ptid_t ptid, struct target_waitstatus *ourstatus,\n   if (lp != NULL)\n     {\n       linux_nat_debug_printf (\"Using pending wait status %s for %s.\",\n-\t\t\t      status_to_str (lp->status),\n+\t\t\t      status_to_str (lp->status).c_str (),\n \t\t\t      target_pid_to_str (lp->ptid).c_str ());\n     }\n \n@@ -3187,7 +3188,8 @@ linux_nat_wait_1 (ptid_t ptid, struct target_waitstatus *ourstatus,\n       if (lwpid > 0)\n \t{\n \t  linux_nat_debug_printf (\"waitpid %ld received %s\",\n-\t\t\t\t  (long) lwpid, status_to_str (status));\n+\t\t\t\t  (long) lwpid,\n+\t\t\t\t  status_to_str (status).c_str ());\n \n \t  linux_nat_filter_event (lwpid, status);\n \t  /* Retry until nothing comes out of waitpid.  A single"
    },
    {
      "sha": "f205df7a2464e0552d082449a8b2a3b6dc9f5194",
      "filename": "gdb/nat/linux-waitpid.c",
      "status": "modified",
      "additions": 9,
      "deletions": 14,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d06918ff58452cb17d1bdfbde7187f45933f42e/gdb/nat/linux-waitpid.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d06918ff58452cb17d1bdfbde7187f45933f42e/gdb/nat/linux-waitpid.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/linux-waitpid.c?ref=8d06918ff58452cb17d1bdfbde7187f45933f42e",
      "patch": "@@ -24,30 +24,25 @@\n #include \"gdbsupport/gdb_wait.h\"\n #include \"gdbsupport/eintr.h\"\n \n-/* Convert wait status STATUS to a string.  Used for printing debug\n-   messages only.  */\n+/* See linux-waitpid.h.  */\n \n-char *\n+std::string\n status_to_str (int status)\n {\n-  static char buf[64];\n-\n   if (WIFSTOPPED (status))\n     {\n       if (WSTOPSIG (status) == SYSCALL_SIGTRAP)\n-\tsnprintf (buf, sizeof (buf), \"%s (stopped at syscall)\",\n-\t\t  strsignal (SIGTRAP));\n+\treturn string_printf (\"%s (stopped at syscall)\",\n+\t\t\t      strsignal (SIGTRAP));\n       else\n-\tsnprintf (buf, sizeof (buf), \"%s (stopped)\",\n-\t\t  strsignal (WSTOPSIG (status)));\n+\treturn string_printf (\"%s (stopped)\",\n+\t\t\t      strsignal (WSTOPSIG (status)));\n     }\n   else if (WIFSIGNALED (status))\n-    snprintf (buf, sizeof (buf), \"%s (terminated)\",\n-\t      strsignal (WTERMSIG (status)));\n+    return string_printf (\"%s (terminated)\",\n+\t\t\t  strsignal (WTERMSIG (status)));\n   else\n-    snprintf (buf, sizeof (buf), \"%d (exited)\", WEXITSTATUS (status));\n-\n-  return buf;\n+    return string_printf (\"%d (exited)\", WEXITSTATUS (status));\n }\n \n /* See linux-waitpid.h.  */"
    },
    {
      "sha": "fe2383f1386c97c643fce1491b770bccffca6228",
      "filename": "gdb/nat/linux-waitpid.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d06918ff58452cb17d1bdfbde7187f45933f42e/gdb/nat/linux-waitpid.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d06918ff58452cb17d1bdfbde7187f45933f42e/gdb/nat/linux-waitpid.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/linux-waitpid.h?ref=8d06918ff58452cb17d1bdfbde7187f45933f42e",
      "patch": "@@ -25,6 +25,6 @@ extern int my_waitpid (int pid, int *status, int flags);\n \n /* Convert wait status STATUS to a string.  Used for printing debug\n    messages only.  */\n-extern char *status_to_str (int status);\n+extern std::string status_to_str (int status);\n \n #endif /* NAT_LINUX_WAITPID_H */"
    },
    {
      "sha": "7e7e3f2998043a7b2e21c4c74003511becd15b89",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d06918ff58452cb17d1bdfbde7187f45933f42e/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d06918ff58452cb17d1bdfbde7187f45933f42e/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=8d06918ff58452cb17d1bdfbde7187f45933f42e",
      "patch": "@@ -1,3 +1,8 @@\n+2021-05-08  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* linux-low.cc (linux_process_target::wait_for_event_filtered):\n+\tAdjust to status_to_str returning std::string.\n+\n 2021-05-08  Pedro Alves  <pedro@palves.net>\n \n \t* linux-low.cc:"
    },
    {
      "sha": "5c6191d941c3261d829198fc1ac451b050e7bc75",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8d06918ff58452cb17d1bdfbde7187f45933f42e/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8d06918ff58452cb17d1bdfbde7187f45933f42e/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=8d06918ff58452cb17d1bdfbde7187f45933f42e",
      "patch": "@@ -2601,7 +2601,7 @@ linux_process_target::wait_for_event_filtered (ptid_t wait_ptid,\n \t  if (debug_threads)\n \t    {\n \t      debug_printf (\"LLW: waitpid %ld received %s\\n\",\n-\t\t\t    (long) ret, status_to_str (*wstatp));\n+\t\t\t    (long) ret, status_to_str (*wstatp).c_str ());\n \t    }\n \n \t  /* Filter all events.  IOW, leave all events pending.  We'll"
    }
  ]
}