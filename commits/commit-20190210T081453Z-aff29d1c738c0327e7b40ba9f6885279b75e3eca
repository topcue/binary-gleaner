{
  "sha": "aff29d1c738c0327e7b40ba9f6885279b75e3eca",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWZmMjlkMWM3MzhjMDMyN2U3YjQwYmE5ZjY4ODUyNzliNzVlM2VjYQ==",
  "commit": {
    "author": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2019-02-10T08:14:53Z"
    },
    "committer": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2019-02-10T08:14:53Z"
    },
    "message": "(Ada) -var-update crash for variable whose type is a reference to changeable\n\nConsider the following variable, which is a string whose value\nis not known at compile time, because it is the return value\nfrom a function call (Get_Name):\n\n   A : String := Get_Name;\n\nIf one tries to create a varobj for that variable, everything works\nas expected:\n\n    | (gdb) -var-create a * a\n    | ^done,name=\"a\",numchild=\"19\",value=\"[19] \\\"Some kind of string\\\"\",type=\"<ref> array (1 .. 19) of character\",thread-id=\"1\",has_more=\"0\"\n\nHowever, try then to request an update, regardless of whether the string\nhas changed or not, and we get a crash:\n\n    | -var-update a\n    | ~\"/[...]/gdb/varobj.c:1379: internal-error: bool install_new_value(varobj*, value*, bool): Assertion `!value_lazy (var->value.get ())' failed.\\nA problem internal to GDB has been detected,\\nfurther debugging may prove unreliable.\\nQuit this debugging session? (y or n) \"\n\nWhen the varobj gets created (-var-create), the expression is evaluated\nand transformed into a value. The debugging information describes our\nvariables as a reference to an array of characters, so our value has\nthe corresponding type. We then call varobj.c::install_new_value\nto store that value inside our varobj, and we see that this function\npretty starts by determining weither our varobj is changeable, via:\n\n    | changeable = varobj_value_is_changeable_p (var);\n\n(where 'var' is the varobj we are building, and where the function\nvarobj_value_is_changeable_p simply dispatches to the Ada version\nof this routine: ada_value_is_changeable_p).\n\nAt this point, the varobj doesn't have a value, yet, but it does\nhave a type which was provided by varobj_create a little bit before\ninstall_new_value was called. So ada_value_is_changeable_p uses that\nto determine whether or not our type is changeable.\n\nSince our type is a reference to an array, and that the value of\nsuch objects is displayed as if there weren't a reference, it means\nthat our object is changeable -- in other words, if an element of\nthe string changes, then the \"value\" field of the varobj will change\naccordingly. But unfortunately, ada_value_is_changeable_p mistakenly\nreturns false, because it is missing the handling of reference types.\n\nAs a consequence of this, install_new_value doesn't feel it is\nnecessary to fetch the value's contents, as explained by the following\ncomment inside that function:\n\n  /* The new value might be lazy.  If the type is changeable,\n     that is we'll be comparing values of this type, fetch the\n     value now.  Otherwise, on the next update the old value\n     will be lazy, which means we've lost that old value.  */\n\nThis means that a lazy value gets installed inside our varobj\nas a result of the mistake in ada_value_is_changeable_p.\n\nAnother important detail is that, after determining whether\nour varobj is changeable or not, it then purposefully removes\nthe reference layer from our value:\n\n  /* We are not interested in the address of references, and given\n     that in C++ a reference is not rebindable, it cannot\n     meaningfully change.  So, get hold of the real value.  */\n  if (value)\n    value = coerce_ref (value);\n\nThe consequence of those two facts on shows up only later, when\nthe user requests an update (-var-update). When doing so, GDB\nevaluates the expression again into a value which is once more\na reference to a string, and then calls install_new_value again\nto install the new value and report any changes. This time around,\nthe call to...\n\n    | changeable = varobj_value_is_changeable_p (var);\n\n... now gets a varobj which has a value, and one which had the reference\nlayer removed! So, this time, we classify the varobj correctly, and\nsay it is changeable. And because it is changeable, we then go into\nthe section of code in install_new_value which checks for changes,\nwhere we need the varobj's value to not be lazy, as explained by\nthe comment we quoted above. That's what the assertion was about.\n\nThis patch fixes the issues by teaching ada_value_is_changeable_p\nto ignore reference layers when evaluating a given varobj's type.\n\ngdb/ChangeLog:\n\n\t* ada-varobj.c (ada_value_is_changeable_p): Add handling of\n        TYPE_CODE_REF types.\n\ngdb/testsuite/ChangeLog:\n\n        * gdb.ada/mi_ref_changeable: New testcase.\n\nPrior to this patch, this testcase reports 2 unresolved tests\n(due to GDB hitting the internal error). With this patch, all\ntests in this testcase pass.\n\nTested on x86_64-linux, no regression.",
    "tree": {
      "sha": "5c223d838520a452a6f3afe76cb73972e9264c4e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5c223d838520a452a6f3afe76cb73972e9264c4e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/aff29d1c738c0327e7b40ba9f6885279b75e3eca",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aff29d1c738c0327e7b40ba9f6885279b75e3eca",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/aff29d1c738c0327e7b40ba9f6885279b75e3eca",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aff29d1c738c0327e7b40ba9f6885279b75e3eca/comments",
  "author": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "10a54ace4aad32c78e1be99201d0a9c6efc63450",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/10a54ace4aad32c78e1be99201d0a9c6efc63450",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/10a54ace4aad32c78e1be99201d0a9c6efc63450"
    }
  ],
  "stats": {
    "total": 157,
    "additions": 157,
    "deletions": 0
  },
  "files": [
    {
      "sha": "3deb474bf55cbe1293bfdbea0c57b74e5c70d067",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aff29d1c738c0327e7b40ba9f6885279b75e3eca/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aff29d1c738c0327e7b40ba9f6885279b75e3eca/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=aff29d1c738c0327e7b40ba9f6885279b75e3eca",
      "patch": "@@ -1,3 +1,8 @@\n+2019-02-10  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* ada-varobj.c (ada_value_is_changeable_p): Add handling of\n+\tTYPE_CODE_REF types.\n+\n 2019-02-08  Jim Wilson  <jimw@sifive.com>\n \n \t* riscv-linux-tdep.c (riscv_linux_fregmap): New."
    },
    {
      "sha": "a4d553d378625a707041a597d9a13ec022218cee",
      "filename": "gdb/ada-varobj.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aff29d1c738c0327e7b40ba9f6885279b75e3eca/gdb/ada-varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aff29d1c738c0327e7b40ba9f6885279b75e3eca/gdb/ada-varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-varobj.c?ref=aff29d1c738c0327e7b40ba9f6885279b75e3eca",
      "patch": "@@ -935,6 +935,9 @@ ada_value_is_changeable_p (const struct varobj *var)\n   struct type *type = (var->value != nullptr\n \t\t       ? value_type (var->value.get ()) : var->type);\n \n+  if (TYPE_CODE (type) == TYPE_CODE_REF)\n+    type = TYPE_TARGET_TYPE (type);\n+\n   if (ada_is_access_to_unconstrained_array (type))\n     {\n       /* This is in reality a pointer to an unconstrained array."
    },
    {
      "sha": "d963997d8bfac635f4592695ccb7823f0019870d",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aff29d1c738c0327e7b40ba9f6885279b75e3eca/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aff29d1c738c0327e7b40ba9f6885279b75e3eca/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=aff29d1c738c0327e7b40ba9f6885279b75e3eca",
      "patch": "@@ -1,3 +1,7 @@\n+2019-02-10  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* gdb.ada/mi_ref_changeable: New testcase.\n+\n 2019-02-07  Alan Hayward  <alan.hayward@arm.com>\n \n \t* gdb.base/attach.exp: Add double attach test."
    },
    {
      "sha": "933ad3ebdbd1adfd665bf4e5ea234109bec55ecf",
      "filename": "gdb/testsuite/gdb.ada/mi_ref_changeable.exp",
      "status": "added",
      "additions": 71,
      "deletions": 0,
      "changes": 71,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aff29d1c738c0327e7b40ba9f6885279b75e3eca/gdb/testsuite/gdb.ada/mi_ref_changeable.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aff29d1c738c0327e7b40ba9f6885279b75e3eca/gdb/testsuite/gdb.ada/mi_ref_changeable.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/mi_ref_changeable.exp?ref=aff29d1c738c0327e7b40ba9f6885279b75e3eca",
      "patch": "@@ -0,0 +1,71 @@\n+# Copyright 2018 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+load_lib \"ada.exp\"\n+\n+standard_ada_testfile foo_rb20_056\n+\n+if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable [list debug]] != \"\" } {\n+  return -1\n+}\n+\n+load_lib mi-support.exp\n+set MIFLAGS \"-i=mi\"\n+\n+gdb_exit\n+if [mi_gdb_start] {\n+    continue\n+}\n+\n+mi_delete_breakpoints\n+mi_gdb_reinitialize_dir $srcdir/$subdir\n+mi_gdb_load ${binfile}\n+\n+if ![mi_run_to_main] then {\n+   fail \"cannot run to main, testcase aborted\"\n+   return 0\n+}\n+\n+# Continue until STOP_1, and create a varobj for variables \"A\" and \"B\".\n+\n+set bp_location [gdb_get_line_number \"STOP_1\" ${testdir}/foo_rb20_056.adb]\n+mi_continue_to_line \\\n+    \"foo_rb20_056.adb:$bp_location\" \\\n+    \"stop at STOP_1\"\n+\n+mi_gdb_test \"-var-create a * a\" \\\n+    \"\\\\^done,name=\\\"a\\\",numchild=\\\"19\\\",.*\" \\\n+    \"create varobj for a\"\n+\n+mi_gdb_test \"-var-create b * b\" \\\n+    \"\\\\^done,name=\\\"b\\\",numchild=\\\"19\\\",.*\" \\\n+    \"create varobj for b\"\n+\n+# Continue until STOP_2, and request an update of varobjs a and b.\n+# One should reported as changed (b), and the other should report\n+# no change.\n+\n+set bp_location [gdb_get_line_number \"STOP_2\" ${testdir}/foo_rb20_056.adb]\n+mi_continue_to_line \\\n+    \"foo_rb20_056.adb:$bp_location\" \\\n+    \"stop at STOP_2\"\n+\n+mi_gdb_test \"-var-update a\" \\\n+    \"\\\\^done,changelist=\\\\\\[\\\\\\]\" \\\n+    \"-var-update a at STOP_2\"\n+\n+mi_gdb_test \"-var-update b\" \\\n+    \"\\\\^done,changelist=\\\\\\[{name=\\\"b\\\".*}\\\\\\]\" \\\n+    \"-var-update b at STOP_2\""
    },
    {
      "sha": "52975befdca98476bffd2151a296acdce7e4cd74",
      "filename": "gdb/testsuite/gdb.ada/mi_ref_changeable/foo_rb20_056.adb",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aff29d1c738c0327e7b40ba9f6885279b75e3eca/gdb/testsuite/gdb.ada/mi_ref_changeable/foo_rb20_056.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aff29d1c738c0327e7b40ba9f6885279b75e3eca/gdb/testsuite/gdb.ada/mi_ref_changeable/foo_rb20_056.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/mi_ref_changeable/foo_rb20_056.adb?ref=aff29d1c738c0327e7b40ba9f6885279b75e3eca",
      "patch": "@@ -0,0 +1,28 @@\n+--  Copyright 2018 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+with System;\n+with Pck; use Pck;\n+\n+procedure Foo_RB20_056 is\n+   A : String := Get_Name;\n+   B : String := Get_Name;\n+begin\n+   Do_Nothing (A'Address);\n+   Do_Nothing (B'Address);\n+   B (B'First) := 's'; -- STOP_1\n+   Do_Nothing (A'Address); -- STOP_2\n+   Do_Nothing (B'Address);\n+end Foo_RB20_056;"
    },
    {
      "sha": "120052e0749e59811f446c9886541c6235b2cca4",
      "filename": "gdb/testsuite/gdb.ada/mi_ref_changeable/pck.adb",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aff29d1c738c0327e7b40ba9f6885279b75e3eca/gdb/testsuite/gdb.ada/mi_ref_changeable/pck.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aff29d1c738c0327e7b40ba9f6885279b75e3eca/gdb/testsuite/gdb.ada/mi_ref_changeable/pck.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/mi_ref_changeable/pck.adb?ref=aff29d1c738c0327e7b40ba9f6885279b75e3eca",
      "patch": "@@ -0,0 +1,26 @@\n+--  Copyright 2018 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+package body Pck is\n+   procedure Do_Nothing (A : System.Address) is\n+   begin\n+      null;\n+   end Do_Nothing;\n+\n+   function Get_Name return String is\n+   begin\n+      return \"Some kind of string\";\n+   end Get_Name;\n+end Pck;"
    },
    {
      "sha": "0a96dfbe83ddca3f6b9d96407471248993b5128b",
      "filename": "gdb/testsuite/gdb.ada/mi_ref_changeable/pck.ads",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aff29d1c738c0327e7b40ba9f6885279b75e3eca/gdb/testsuite/gdb.ada/mi_ref_changeable/pck.ads",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aff29d1c738c0327e7b40ba9f6885279b75e3eca/gdb/testsuite/gdb.ada/mi_ref_changeable/pck.ads",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/mi_ref_changeable/pck.ads?ref=aff29d1c738c0327e7b40ba9f6885279b75e3eca",
      "patch": "@@ -0,0 +1,20 @@\n+--  Copyright 2018 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+with System;\n+package Pck is\n+   procedure Do_Nothing (A : System.Address);\n+   function Get_Name return String;\n+end Pck;"
    }
  ]
}