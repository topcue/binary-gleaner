{
  "sha": "675800364bfdbc29ee034681339e4b4a137bb2f5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Njc1ODAwMzY0YmZkYmMyOWVlMDM0NjgxMzM5ZTRiNGExMzdiYjJmNQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-06-03T07:28:55Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-06-03T08:29:44Z"
    },
    "message": "PR26069, strip/objcopy misaligned address accesses\n\n\tPR 26069\n\tPR 18758\n\t* peicode.h (pe_ILF_make_a_section): Align data for compilers\n\tother than gcc.\n\t(pe_ILF_build_a_bfd): Likewise.",
    "tree": {
      "sha": "5c460212b16a599839610066656c22a9a7c08230",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5c460212b16a599839610066656c22a9a7c08230"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/675800364bfdbc29ee034681339e4b4a137bb2f5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/675800364bfdbc29ee034681339e4b4a137bb2f5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/675800364bfdbc29ee034681339e4b4a137bb2f5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/675800364bfdbc29ee034681339e4b4a137bb2f5/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4a32244804f942a54960039c7968b1df2a177b4d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a32244804f942a54960039c7968b1df2a177b4d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4a32244804f942a54960039c7968b1df2a177b4d"
    }
  ],
  "stats": {
    "total": 56,
    "additions": 29,
    "deletions": 27
  },
  "files": [
    {
      "sha": "e60cfac5be2105bfe0a2b4412c6af84d72e56655",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/675800364bfdbc29ee034681339e4b4a137bb2f5/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/675800364bfdbc29ee034681339e4b4a137bb2f5/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=675800364bfdbc29ee034681339e4b4a137bb2f5",
      "patch": "@@ -1,3 +1,11 @@\n+2020-06-03  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 26069\n+\tPR 18758\n+\t* peicode.h (pe_ILF_make_a_section): Align data for compilers\n+\tother than gcc.\n+\t(pe_ILF_build_a_bfd): Likewise.\n+\n 2020-06-03  Alan Modra  <amodra@gmail.com>\n \n \tPR 26029"
    },
    {
      "sha": "f7d2b5f5f526762b7e61435193d13395f988175a",
      "filename": "bfd/peicode.h",
      "status": "modified",
      "additions": 21,
      "deletions": 27,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/675800364bfdbc29ee034681339e4b4a137bb2f5/bfd/peicode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/675800364bfdbc29ee034681339e4b4a137bb2f5/bfd/peicode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/peicode.h?ref=675800364bfdbc29ee034681339e4b4a137bb2f5",
      "patch": "@@ -622,6 +622,7 @@ pe_ILF_make_a_section (pe_ILF_vars * vars,\n {\n   asection_ptr sec;\n   flagword     flags;\n+  intptr_t alignment;\n \n   sec = bfd_make_section_old_way (vars->abfd, name);\n   if (sec == NULL)\n@@ -652,20 +653,18 @@ pe_ILF_make_a_section (pe_ILF_vars * vars,\n   if (size & 1)\n     vars->data --;\n \n-# if (GCC_VERSION >= 3000)\n   /* PR 18758: See note in pe_ILF_buid_a_bfd.  We must make sure that we\n-     preserve host alignment requirements.  We test 'size' rather than\n-     vars.data as we cannot perform binary arithmetic on pointers.  We assume\n-     that vars.data was sufficiently aligned upon entry to this function.\n-     The BFD_ASSERTs in this functions will warn us if we run out of room,\n-     but we should already have enough padding built in to ILF_DATA_SIZE.  */\n-  {\n-    unsigned int alignment = __alignof__ (struct coff_section_tdata);\n-\n-    if (size & (alignment - 1))\n-      vars->data += alignment - (size & (alignment - 1));\n-  }\n+     preserve host alignment requirements.  The BFD_ASSERTs in this\n+     functions will warn us if we run out of room, but we should\n+     already have enough padding built in to ILF_DATA_SIZE.  */\n+#if GCC_VERSION >= 3000\n+  alignment = __alignof__ (struct coff_section_tdata);\n+#else\n+  alignment = 8;\n #endif\n+  vars->data\n+    = (bfd_byte *) (((intptr_t) vars->data + alignment - 1) & -alignment);\n+\n   /* Create a coff_section_tdata structure for our use.  */\n   sec->used_by_bfd = (struct coff_section_tdata *) vars->data;\n   vars->data += sizeof (struct coff_section_tdata);\n@@ -779,6 +778,7 @@ pe_ILF_build_a_bfd (bfd *\t    abfd,\n   asection_ptr\t\t   id4, id5, id6 = NULL, text = NULL;\n   coff_symbol_type **\t   imp_sym;\n   unsigned int\t\t   imp_index;\n+  intptr_t alignment;\n \n   /* Decode and verify the types field of the ILF structure.  */\n   import_type = types & 0x3;\n@@ -874,23 +874,17 @@ pe_ILF_build_a_bfd (bfd *\t    abfd,\n \n   /* The remaining space in bim->buffer is used\n      by the pe_ILF_make_a_section() function.  */\n-# if (GCC_VERSION >= 3000)\n+\n   /* PR 18758: Make sure that the data area is sufficiently aligned for\n-     pointers on the host.  __alignof__ is a gcc extension, hence the test\n-     above.  For other compilers we will have to assume that the alignment is\n-     unimportant, or else extra code can be added here and in\n-     pe_ILF_make_a_section.\n-\n-     Note - we cannot test 'ptr' directly as it is illegal to perform binary\n-     arithmetic on pointers, but we know that the strings section is the only\n-     one that might end on an unaligned boundary.  */\n-  {\n-    unsigned int alignment = __alignof__ (char *);\n-\n-    if (SIZEOF_ILF_STRINGS & (alignment - 1))\n-      ptr += alignment - (SIZEOF_ILF_STRINGS & (alignment - 1));\n-  }\n+     struct coff_section_tdata.  __alignof__ is a gcc extension, hence\n+     the test of GCC_VERSION.  For other compilers we assume 8 byte\n+     alignment.  */\n+#if GCC_VERSION >= 3000\n+  alignment = __alignof__ (struct coff_section_tdata);\n+#else\n+  alignment = 8;\n #endif\n+  ptr = (bfd_byte *) (((intptr_t) ptr + alignment - 1) & -alignment);\n \n   vars.data = ptr;\n   vars.abfd = abfd;"
    }
  ]
}