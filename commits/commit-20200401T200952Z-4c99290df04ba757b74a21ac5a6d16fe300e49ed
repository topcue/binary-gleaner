{
  "sha": "4c99290df04ba757b74a21ac5a6d16fe300e49ed",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGM5OTI5MGRmMDRiYTc1N2I3NGEyMWFjNWE2ZDE2ZmUzMDBlNDllZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-04-01T20:09:52Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-01T20:09:52Z"
    },
    "message": "Add accessors for members of complex numbers\n\nThis introduces two new functions that make it simpler to access the\ncomponents of a complex number.\n\ngdb/ChangeLog\n2020-04-01  Tom Tromey  <tom@tromey.com>\n\n\t* valprint.c (generic_value_print_complex): Use accessors.\n\t* value.h (value_real_part, value_imaginary_part): Declare.\n\t* valops.c (value_real_part, value_imaginary_part): New\n\tfunctions.\n\t* value.c (creal_internal_fn, cimag_internal_fn): Use accessors.",
    "tree": {
      "sha": "ccb4fc81ef873b8bb729af596360c54817a3e824",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ccb4fc81ef873b8bb729af596360c54817a3e824"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4c99290df04ba757b74a21ac5a6d16fe300e49ed",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c99290df04ba757b74a21ac5a6d16fe300e49ed",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4c99290df04ba757b74a21ac5a6d16fe300e49ed",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c99290df04ba757b74a21ac5a6d16fe300e49ed/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5b930b4538f70a9f09280e36164840e48fb1c042",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b930b4538f70a9f09280e36164840e48fb1c042",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5b930b4538f70a9f09280e36164840e48fb1c042"
    }
  ],
  "stats": {
    "total": 55,
    "additions": 45,
    "deletions": 10
  },
  "files": [
    {
      "sha": "d1f408f1a47971d0fdaa13c62d5b8e1e55d21921",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c99290df04ba757b74a21ac5a6d16fe300e49ed/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c99290df04ba757b74a21ac5a6d16fe300e49ed/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4c99290df04ba757b74a21ac5a6d16fe300e49ed",
      "patch": "@@ -1,3 +1,11 @@\n+2020-04-01  Tom Tromey  <tom@tromey.com>\n+\n+\t* valprint.c (generic_value_print_complex): Use accessors.\n+\t* value.h (value_real_part, value_imaginary_part): Declare.\n+\t* valops.c (value_real_part, value_imaginary_part): New\n+\tfunctions.\n+\t* value.c (creal_internal_fn, cimag_internal_fn): Use accessors.\n+\n 2020-04-01  Tom Tromey  <tom@tromey.com>\n \n \t* stabsread.c (rs6000_builtin_type, read_sun_floating_type)"
    },
    {
      "sha": "83fd2584b597475bc8a24646cbc6656f3c7d8d8b",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c99290df04ba757b74a21ac5a6d16fe300e49ed/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c99290df04ba757b74a21ac5a6d16fe300e49ed/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=4c99290df04ba757b74a21ac5a6d16fe300e49ed",
      "patch": "@@ -3877,6 +3877,31 @@ value_literal_complex (struct value *arg1,\n   return val;\n }\n \n+/* See value.h.  */\n+\n+struct value *\n+value_real_part (struct value *value)\n+{\n+  struct type *type = check_typedef (value_type (value));\n+  struct type *ttype = TYPE_TARGET_TYPE (type);\n+\n+  gdb_assert (TYPE_CODE (type) == TYPE_CODE_COMPLEX);\n+  return value_from_component (value, ttype, 0);\n+}\n+\n+/* See value.h.  */\n+\n+struct value *\n+value_imaginary_part (struct value *value)\n+{\n+  struct type *type = check_typedef (value_type (value));\n+  struct type *ttype = TYPE_TARGET_TYPE (type);\n+\n+  gdb_assert (TYPE_CODE (type) == TYPE_CODE_COMPLEX);\n+  return value_from_component (value, ttype,\n+\t\t\t       TYPE_LENGTH (check_typedef (ttype)));\n+}\n+\n /* Cast a value into the appropriate complex data type.  */\n \n static struct value *"
    },
    {
      "sha": "80b7514b7e3b8fdef98f1acc91a381a0bbb92a37",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 7,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c99290df04ba757b74a21ac5a6d16fe300e49ed/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c99290df04ba757b74a21ac5a6d16fe300e49ed/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=4c99290df04ba757b74a21ac5a6d16fe300e49ed",
      "patch": "@@ -811,16 +811,11 @@ generic_value_print_complex (struct value *val, struct ui_file *stream,\n {\n   fprintf_filtered (stream, \"%s\", decorations->complex_prefix);\n \n-  struct type *type = check_typedef (value_type (val));\n-  struct value *real_part\n-    = value_from_component (val, TYPE_TARGET_TYPE (type), 0);\n+  struct value *real_part = value_real_part (val);\n   value_print_scalar_formatted (real_part, options, 0, stream);\n   fprintf_filtered (stream, \"%s\", decorations->complex_infix);\n \n-  struct value *imag_part\n-    = value_from_component (val, TYPE_TARGET_TYPE (type),\n-\t\t\t    TYPE_LENGTH (TYPE_TARGET_TYPE (type)));\n-\n+  struct value *imag_part = value_imaginary_part (val);\n   value_print_scalar_formatted (imag_part, options, 0, stream);\n   fprintf_filtered (stream, \"%s\", decorations->complex_suffix);\n }"
    },
    {
      "sha": "f722c272d8b0a8dc6ea27d6ead7e5bf12dc999a2",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c99290df04ba757b74a21ac5a6d16fe300e49ed/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c99290df04ba757b74a21ac5a6d16fe300e49ed/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=4c99290df04ba757b74a21ac5a6d16fe300e49ed",
      "patch": "@@ -3962,7 +3962,7 @@ creal_internal_fn (struct gdbarch *gdbarch,\n   type *ctype = check_typedef (value_type (cval));\n   if (TYPE_CODE (ctype) != TYPE_CODE_COMPLEX)\n     error (_(\"expected a complex number\"));\n-  return value_from_component (cval, TYPE_TARGET_TYPE (ctype), 0);\n+  return value_real_part (cval);\n }\n \n /* Implementation of the convenience function $_cimag.  Extracts the\n@@ -3981,8 +3981,7 @@ cimag_internal_fn (struct gdbarch *gdbarch,\n   type *ctype = check_typedef (value_type (cval));\n   if (TYPE_CODE (ctype) != TYPE_CODE_COMPLEX)\n     error (_(\"expected a complex number\"));\n-  return value_from_component (cval, TYPE_TARGET_TYPE (ctype),\n-\t\t\t       TYPE_LENGTH (TYPE_TARGET_TYPE (ctype)));\n+  return value_imaginary_part (cval);\n }\n \n #if GDB_SELF_TEST"
    },
    {
      "sha": "85fe6c297f50d3f39b43cd92be99d900d3604c71",
      "filename": "gdb/value.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4c99290df04ba757b74a21ac5a6d16fe300e49ed/gdb/value.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4c99290df04ba757b74a21ac5a6d16fe300e49ed/gdb/value.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.h?ref=4c99290df04ba757b74a21ac5a6d16fe300e49ed",
      "patch": "@@ -1141,6 +1141,14 @@ extern struct value *value_slice (struct value *, int, int);\n extern struct value *value_literal_complex (struct value *, struct value *,\n \t\t\t\t\t    struct type *);\n \n+/* Return the real part of a complex value.  */\n+\n+extern struct value *value_real_part (struct value *value);\n+\n+/* Return the imaginary part of a complex value.  */\n+\n+extern struct value *value_imaginary_part (struct value *value);\n+\n extern struct value *find_function_in_inferior (const char *,\n \t\t\t\t\t\tstruct objfile **);\n "
    }
  ]
}