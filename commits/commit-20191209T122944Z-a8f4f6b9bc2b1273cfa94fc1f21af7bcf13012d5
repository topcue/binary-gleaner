{
  "sha": "a8f4f6b9bc2b1273cfa94fc1f21af7bcf13012d5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YThmNGY2YjliYzJiMTI3M2NmYTk0ZmMxZjIxYWY3YmNmMTMwMTJkNQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-12-09T12:29:44Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2019-12-09T12:29:44Z"
    },
    "message": "x86/Intel: drop pointless suffix setting for \"tbyte ptr\"\n\nThere are extremely few insns accepting \"tbyte ptr\" operand, so the\n\"tbyte\" operand flag checking done by match_operand_size() is already\nsufficient; the setting of the suffix has become meaningless anyway\nwith dc2be329b950 (\"i386: Only check suffix in instruction mnemonic\").\nFold the code with that setting the \"byte\" operand flag to force an\nerror (no insn at all accepts both \"byte ptr\" and tbyte ptr\" operands,\nexcept for AnySize ones where the two (conflicting) recorded types\ndon't matter (operand_size_match() doesn't call match_operand_size() in\nthis case).",
    "tree": {
      "sha": "4a4ed5ef02ef18d39fd24acdef17b60e8cc316da",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4a4ed5ef02ef18d39fd24acdef17b60e8cc316da"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a8f4f6b9bc2b1273cfa94fc1f21af7bcf13012d5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8f4f6b9bc2b1273cfa94fc1f21af7bcf13012d5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a8f4f6b9bc2b1273cfa94fc1f21af7bcf13012d5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8f4f6b9bc2b1273cfa94fc1f21af7bcf13012d5/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4cbda994e6c589b18c88227bf5a2fef089a18cfd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4cbda994e6c589b18c88227bf5a2fef089a18cfd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4cbda994e6c589b18c88227bf5a2fef089a18cfd"
    }
  ],
  "stats": {
    "total": 21,
    "additions": 11,
    "deletions": 10
  },
  "files": [
    {
      "sha": "54ede43421b36fb2dcbc0c77b800dd9b060fb1a4",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8f4f6b9bc2b1273cfa94fc1f21af7bcf13012d5/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8f4f6b9bc2b1273cfa94fc1f21af7bcf13012d5/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=a8f4f6b9bc2b1273cfa94fc1f21af7bcf13012d5",
      "patch": "@@ -1,3 +1,9 @@\n+2019-12-09  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386-intel.c (i386_intel_operand): Set \"byte\"\n+\tattribute suffix instead of suffix uniformly for insns not\n+\tpossibly accepting \"tbyte ptr\" explicitly.\n+\n 2019-12-09  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386-intel.c (i386_intel_operand): Don't set suffix"
    },
    {
      "sha": "7d0a5b8d851e5b535db3fe269b46d35d87247209",
      "filename": "gas/config/tc-i386-intel.c",
      "status": "modified",
      "additions": 5,
      "deletions": 10,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8f4f6b9bc2b1273cfa94fc1f21af7bcf13012d5/gas/config/tc-i386-intel.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8f4f6b9bc2b1273cfa94fc1f21af7bcf13012d5/gas/config/tc-i386-intel.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386-intel.c?ref=a8f4f6b9bc2b1273cfa94fc1f21af7bcf13012d5",
      "patch": "@@ -691,17 +691,12 @@ i386_intel_operand (char *operand_string, int got_a_float)\n \t  i.types[this_operand].bitfield.tbyte = 1;\n \t  if (got_a_float == 1)\n \t    suffix = LONG_DOUBLE_MNEM_SUFFIX;\n-\t  else if (current_templates->start->operand_types[0].bitfield.fword\n-\t\t   || current_templates->start->operand_types[0].bitfield.tbyte)\n-\t    {\n-\t      /* l[defgs]s, [ls][gi]dt */\n-\t      if (flag_code == CODE_64BIT)\n-\t\tsuffix = QWORD_MNEM_SUFFIX;\n-\t      else\n-\t\ti.types[this_operand].bitfield.byte = 1; /* cause an error */\n-\t    }\n+\t  else if ((current_templates->start->operand_types[0].bitfield.fword\n+\t\t    || current_templates->start->operand_types[0].bitfield.tbyte)\n+\t\t   && flag_code == CODE_64BIT)\n+\t    suffix = QWORD_MNEM_SUFFIX; /* l[fgs]s, [ls][gi]dt */\n \t  else\n-\t    suffix = BYTE_MNEM_SUFFIX; /* so it will cause an error */\n+\t    i.types[this_operand].bitfield.byte = 1; /* cause an error */\n \t  break;\n \n \tcase O_oword_ptr:"
    }
  ]
}