{
  "sha": "c2fd8824c8ff4a7b48ef9f058be0038d1f6faa1f",
  "node_id": "C_kwDOANOeidoAKGMyZmQ4ODI0YzhmZjRhN2I0OGVmOWYwNThiZTAwMzhkMWY2ZmFhMWY",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-30T17:07:48Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-30T17:07:48Z"
    },
    "message": "[gdb/testsuite] Check compilation result in gdb.base/structs.exp\n\nWhen running test-case gdb.base/structs.exp with target board unix/-bad, I\nget:\n...\ngdb compile failed, gcc: error: unrecognized command line option '-bad'\nUNTESTED: gdb.base/structs.exp: failed to prepare\nERROR: tcl error sourcing src/gdb/testsuite/gdb.base/structs.exp.\nERROR: can't read \"use_gdb_stub\": no such variable\n...\n\nFix this by checking the compilation result.\n\nFix the resulting DUPLICATEs using with_test_prefix.\n\nTested on x86_64-linux.",
    "tree": {
      "sha": "f382fa29a3e16afa9d10857e2cda4b018a206022",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f382fa29a3e16afa9d10857e2cda4b018a206022"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c2fd8824c8ff4a7b48ef9f058be0038d1f6faa1f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c2fd8824c8ff4a7b48ef9f058be0038d1f6faa1f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c2fd8824c8ff4a7b48ef9f058be0038d1f6faa1f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c2fd8824c8ff4a7b48ef9f058be0038d1f6faa1f/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "dc412de5e954d81dc932be7fa7c2edda992de096",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dc412de5e954d81dc932be7fa7c2edda992de096",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/dc412de5e954d81dc932be7fa7c2edda992de096"
    }
  ],
  "stats": {
    "total": 204,
    "additions": 63,
    "deletions": 141
  },
  "files": [
    {
      "sha": "ae847f85a5012dfe8baa1c4c0b66b0863fd9c14b",
      "filename": "gdb/testsuite/gdb.base/structs.exp",
      "status": "modified",
      "additions": 63,
      "deletions": 141,
      "changes": 204,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2fd8824c8ff4a7b48ef9f058be0038d1f6faa1f/gdb/testsuite/gdb.base/structs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2fd8824c8ff4a7b48ef9f058be0038d1f6faa1f/gdb/testsuite/gdb.base/structs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/structs.exp?ref=c2fd8824c8ff4a7b48ef9f058be0038d1f6faa1f",
      "patch": "@@ -71,12 +71,10 @@ proc start_structs_test { types } {\n     }\n \n     # Make certain that the output is consistent\n-    with_test_prefix \"types=$types\" {\n-\tgdb_test_no_output \"set print sevenbit-strings\"\n-\tgdb_test_no_output \"set print address off\"\n-\tgdb_test_no_output \"set width 0\"\n-\tgdb_test_no_output \"set print elements 300\"\n-    }\n+    gdb_test_no_output \"set print sevenbit-strings\"\n+    gdb_test_no_output \"set print address off\"\n+    gdb_test_no_output \"set width 0\"\n+    gdb_test_no_output \"set print elements 300\"\n \n     # Advance to main\n     if { ![runto_main] } then {\n@@ -484,33 +482,43 @@ proc test_struct_returns { n } {\n # Test every single char struct from 1..17 in size.  This is what the\n # original \"structs\" test was doing.\n \n-start_structs_test { tc }\n-test_struct_calls 1\n-test_struct_calls 2\n-test_struct_calls 3\n-test_struct_calls 4\n-test_struct_calls 5\n-test_struct_calls 6\n-test_struct_calls 7\n-test_struct_calls 8\n-test_struct_calls 9\n-test_struct_calls 10\n-test_struct_calls 11\n-test_struct_calls 12\n-test_struct_calls 13\n-test_struct_calls 14\n-test_struct_calls 15\n-test_struct_calls 16\n-test_struct_calls 17\n-test_struct_returns 1\n-test_struct_returns 2\n-test_struct_returns 3\n-test_struct_returns 4\n-test_struct_returns 5\n-test_struct_returns 6\n-test_struct_returns 7\n-test_struct_returns 8\n+proc test { types c r } {\n+    with_test_prefix types=[join $types \"-\"] {\n+\tif { [start_structs_test $types] } {\n+\t    return\n+\t}\n+\n+\tif { [llength $c] == 0 } {\n+\t    # Done.\n+\t} elseif { [llength $c] == 1 } {\n+\t    test_struct_calls [lindex $c 0]\n+\t} elseif { [llength $c] == 2 } {\n+\t    set low_c [lindex $c 0]\n+\t    set high_c [lindex $c 1]\n+\t    for {set i $low_c} {$i <= $high_c} {incr i} {\n+\t\ttest_struct_calls $i\n+\t    }\n+\t} else {\n+\t    error \"invalid list length\"\n+\t}\n+\n+\tif { [llength $r] == 0 } {\n+\t    # Done.\n+\t} elseif { [llength $r] == 1 } {\n+\t    test_struct_returns [lindex $r 0]\n+\t} elseif { [llength $r] == 2 } {\n+\t    set low_r [lindex $r 0]\n+\t    set high_r [lindex $r 1]\n+\t    for {set i $low_r} {$i <= $high_r} {incr i} {\n+\t\ttest_struct_returns $i\n+\t    }\n+\t} else {\n+\t    error \"invalid list length\"\n+\t}\n+    }\n+}\n \n+test { tc } {1 17} {1 8}\n \n # Let the fun begin.\n \n@@ -527,165 +535,79 @@ test_struct_returns 8\n # naturally aligned.  Padding being added where needed.\n \n # Approx size: 2, 4, ...\n-start_structs_test { ts }\n-test_struct_calls 1\n-test_struct_calls 2\n-test_struct_calls 3\n-test_struct_calls 4\n-test_struct_calls 5\n-test_struct_returns 1\n-test_struct_returns 2\n-test_struct_returns 3\n-test_struct_returns 4\n+test { ts } {1 5} {1 4}\n \n # Approx size: 4, 8, ...\n-start_structs_test { ti }\n-test_struct_calls 1\n-test_struct_calls 2\n-test_struct_calls 3\n-test_struct_returns 1\n-test_struct_returns 2\n+test { ti } {1 3} {1 2}\n \n # Approx size: 4, 8, ...\n-start_structs_test { tl }\n-test_struct_calls 1\n-test_struct_calls 2\n-test_struct_calls 3\n-test_struct_returns 1\n-test_struct_returns 2\n+test { tl } {1 3} {1 2}\n \n # Approx size: 8, 16, ...\n-start_structs_test { tll }\n-test_struct_calls 1\n-test_struct_calls 2\n-test_struct_returns 1\n+test { tll } {1 2} {1}\n \n if { !$skip_float_test } {\n     # Approx size: 4, 8, ...\n-    start_structs_test { tf }\n-    test_struct_calls 1\n-    test_struct_calls 2\n-    test_struct_calls 3\n-    test_struct_returns 1\n-    test_struct_returns 2\n+    test { tf } {1 3} {1 2}\n \n     # Approx size: 8, 16, ...\n-    start_structs_test { td }\n-    test_struct_calls 1\n-    test_struct_calls 2\n-    test_struct_returns 1\n+    test { td } {1 2} {1}\n \n     # Approx size: 16, 32, ...\n-    start_structs_test { tld }\n-    test_struct_calls 1\n-    test_struct_calls 2\n-    test_struct_returns 1\n+    test { tld } {1 2} {1}\n }\n \n # Approx size: 2+1=3, 4, ...\n-start_structs_test { ts tc }\n-test_struct_calls 2\n-test_struct_calls 3\n-test_struct_calls 4\n-test_struct_calls 5\n-test_struct_calls 6\n-test_struct_calls 7\n-test_struct_calls 8\n-test_struct_returns 2\n+test { ts tc } {2 8} {2}\n \n # Approx size: 4+1=5, 6, ...\n-start_structs_test { ti tc }\n-test_struct_calls 2\n-test_struct_calls 3\n-test_struct_calls 4\n-test_struct_calls 5\n-test_struct_calls 6\n-test_struct_returns 2\n+test { ti tc } {2 6} {2}\n \n # Approx size: 4+1=5, 6, ...\n-start_structs_test { tl tc }\n-test_struct_calls 2\n-test_struct_calls 3\n-test_struct_calls 4\n-test_struct_calls 5\n-test_struct_calls 6\n-test_struct_returns 2\n+test { tl tc } {2 6} {2}\n \n # Approx size: 8+1=9, 10, ...\n-start_structs_test { tll tc }\n-test_struct_calls 2\n+test { tll tc } {2} {}\n \n if { !$skip_float_test } {\n     # Approx size: 4+1=5, 6, ...\n-    start_structs_test { tf tc }\n-    test_struct_calls 2\n-    test_struct_calls 3\n-    test_struct_calls 4\n-    test_struct_calls 5\n-    test_struct_calls 6\n-    test_struct_returns 2\n+    test { tf tc } {2 6} {2}\n \n     # Approx size: 8+1=9, 10, ...\n-    start_structs_test { td tc }\n-    test_struct_calls 2\n+    test { td tc } {2} {}\n \n     # Approx size: 16+1=17, 18, ...\n-    start_structs_test { tld tc }\n-    test_struct_calls 2\n+    test { tld tc } {2} {}\n }\n \n # Approx size: (1+1)+2=4, 6, ...\n-start_structs_test { tc ts }\n-test_struct_calls 2\n-test_struct_calls 3\n-test_struct_calls 4\n-test_struct_calls 5\n-test_struct_calls 6\n-test_struct_returns 2\n+test { tc ts } {2 6} {2}\n \n # Approx size: (1+3)+4=8, 12, ...\n-start_structs_test { tc ti }\n-test_struct_calls 2\n-test_struct_calls 3\n-test_struct_calls 4\n-test_struct_returns 2\n+test { tc ti } {2 4} {2}\n \n # Approx size: (1+3)+4=8, 12, ...\n-start_structs_test { tc tl }\n-test_struct_calls 2\n-test_struct_calls 3\n-test_struct_calls 4\n-test_struct_returns 2\n+test { tc tl } {2 4} {2}\n \n # Approx size: (1+7)+8=16, 24, ...\n-start_structs_test { tc tll }\n-test_struct_calls 2\n+test { tc tll } {2} {}\n \n if { !$skip_float_test } {\n     # Approx size: (1+3)+4=8, 12, ...\n-    start_structs_test { tc tf }\n-    test_struct_calls 2\n-    test_struct_calls 3\n-    test_struct_calls 4\n+    test { tc tf } {2 4} {}\n \n     # Approx size: (1+7)+8=16, 24, ...\n-    start_structs_test { tc td }\n-    test_struct_calls 2\n+    test { tc td } {2} {}\n \n     # Approx size: (1+15)+16=32, 48, ...\n-    start_structs_test { tc tld }\n-    test_struct_calls 2\n+    test { tc tld } {2} {}\n \n     # Some float combinations\n \n     # Approx size: 8+4=12, 16, ...\n-    start_structs_test { td tf }\n-    test_struct_calls 2\n-    test_struct_returns 2\n+    test { td tf } {2} {2}\n \n     # Approx size: (4+4)+8=16, 32, ...\n-    start_structs_test { tf td }\n-    test_struct_calls 2\n-    test_struct_returns 2\n+    test { tf td } {2} {2}\n }\n return 0"
    }
  ]
}