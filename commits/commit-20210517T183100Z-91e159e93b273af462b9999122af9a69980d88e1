{
  "sha": "91e159e93b273af462b9999122af9a69980d88e1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTFlMTU5ZTkzYjI3M2FmNDYyYjk5OTkxMjJhZjlhNjk5ODBkODhlMQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-17T18:31:00Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-17T18:31:00Z"
    },
    "message": "gdb: add pyproject.toml\n\nWhen running black to format Python files, files with extension .py.in\nare ignored, because they don't end in .py.  Add a pyproject.toml file\nto instruct black to pick up these files too.\n\ngdb/ChangeLog:\n\n\t* py-project.toml: New.\n\t* gdb-gdb.py.in: Re-format.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/py-framefilter-gdb.py.in: Re-format.\n\t* gdb.python/py-framefilter-invalidarg-gdb.py.in: Re-format.\n\nChange-Id: I9b88faec3360ea24788f44c8b89fe0b2a5f4eb97",
    "tree": {
      "sha": "82bd6d19512c0acb249b717f30db93226e160bff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/82bd6d19512c0acb249b717f30db93226e160bff"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/91e159e93b273af462b9999122af9a69980d88e1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/91e159e93b273af462b9999122af9a69980d88e1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/91e159e93b273af462b9999122af9a69980d88e1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/91e159e93b273af462b9999122af9a69980d88e1/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "034dce7a47652cf0a5f8fbcc403ca995171cc417",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/034dce7a47652cf0a5f8fbcc403ca995171cc417",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/034dce7a47652cf0a5f8fbcc403ca995171cc417"
    }
  ],
  "stats": {
    "total": 216,
    "additions": 117,
    "deletions": 99
  },
  "files": [
    {
      "sha": "0014d75fbb83138c69461cd5d9d192a0cbe2ec7a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e159e93b273af462b9999122af9a69980d88e1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e159e93b273af462b9999122af9a69980d88e1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=91e159e93b273af462b9999122af9a69980d88e1",
      "patch": "@@ -1,3 +1,8 @@\n+2021-05-17  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* py-project.toml: New.\n+\t* gdb-gdb.py.in: Re-format.\n+\n 2021-05-17  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* cli/cli-decode.h (cmd_list_element) <is_command_class_help>:"
    },
    {
      "sha": "af9fcfedc2f350d5bf35efdca889d5dbc6d35b5d",
      "filename": "gdb/gdb-gdb.py.in",
      "status": "modified",
      "additions": 83,
      "deletions": 77,
      "changes": 160,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e159e93b273af462b9999122af9a69980d88e1/gdb/gdb-gdb.py.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e159e93b273af462b9999122af9a69980d88e1/gdb/gdb-gdb.py.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdb-gdb.py.in?ref=91e159e93b273af462b9999122af9a69980d88e1",
      "patch": "@@ -39,7 +39,7 @@ class TypeFlag:\n     def __init__(self, name, value):\n         self.name = name\n         self.value = value\n-        self.short_name = name.replace(\"TYPE_INSTANCE_FLAG_\", '')\n+        self.short_name = name.replace(\"TYPE_INSTANCE_FLAG_\", \"\")\n \n     def __lt__(self, other):\n         \"\"\"Sort by value order.\"\"\"\n@@ -73,8 +73,9 @@ class TypeFlagsPrinter:\n         if not self.val:\n             return \"0\"\n         if TYPE_FLAGS:\n-            flag_list = [flag.short_name for flag in TYPE_FLAGS\n-                         if self.val & flag.value]\n+            flag_list = [\n+                flag.short_name for flag in TYPE_FLAGS if self.val & flag.value\n+            ]\n         else:\n             flag_list = [\"???\"]\n         return \"0x%x [%s]\" % (self.val, \"|\".join(flag_list))\n@@ -96,8 +97,7 @@ class TypeFlagsPrinter:\n             print(\"Warning: Cannot find enum type_instance_flag_value type.\")\n             print(\"         `struct type' pretty-printer will be degraded\")\n             return\n-        TYPE_FLAGS = [TypeFlag(field.name, field.enumval)\n-                      for field in iflags.fields()]\n+        TYPE_FLAGS = [TypeFlag(field.name, field.enumval) for field in iflags.fields()]\n         TYPE_FLAGS.sort()\n \n \n@@ -109,13 +109,14 @@ class StructTypePrettyPrinter:\n \n     def to_string(self):\n         fields = []\n-        fields.append(\"pointer_type = %s\" % self.val['pointer_type'])\n-        fields.append(\"reference_type = %s\" % self.val['reference_type'])\n-        fields.append(\"chain = %s\" % self.val['reference_type'])\n-        fields.append(\"instance_flags = %s\"\n-                      % TypeFlagsPrinter(self.val['m_instance_flags']))\n-        fields.append(\"length = %d\" % self.val['length'])\n-        fields.append(\"main_type = %s\" % self.val['main_type'])\n+        fields.append(\"pointer_type = %s\" % self.val[\"pointer_type\"])\n+        fields.append(\"reference_type = %s\" % self.val[\"reference_type\"])\n+        fields.append(\"chain = %s\" % self.val[\"reference_type\"])\n+        fields.append(\n+            \"instance_flags = %s\" % TypeFlagsPrinter(self.val[\"m_instance_flags\"])\n+        )\n+        fields.append(\"length = %d\" % self.val[\"length\"])\n+        fields.append(\"main_type = %s\" % self.val[\"main_type\"])\n         return \"\\n{\" + \",\\n \".join(fields) + \"}\"\n \n \n@@ -134,125 +135,131 @@ class StructMainTypePrettyPrinter:\n         flag_unsigned and flag_static are the only components set to 1,\n         this function will return \"unsigned|static\".\n         \"\"\"\n-        fields = [field.name.replace(\"flag_\", \"\")\n-                  for field in self.val.type.fields()\n-                  if field.name.startswith(\"flag_\") and self.val[field.name]]\n+        fields = [\n+            field.name.replace(\"flag_\", \"\")\n+            for field in self.val.type.fields()\n+            if field.name.startswith(\"flag_\") and self.val[field.name]\n+        ]\n         return \"|\".join(fields)\n \n     def owner_to_string(self):\n-        \"\"\"Return an image of component \"owner\".\n-        \"\"\"\n-        if self.val['m_flag_objfile_owned'] != 0:\n-            return \"%s (objfile)\" % self.val['m_owner']['objfile']\n+        \"\"\"Return an image of component \"owner\".\"\"\"\n+        if self.val[\"m_flag_objfile_owned\"] != 0:\n+            return \"%s (objfile)\" % self.val[\"m_owner\"][\"objfile\"]\n         else:\n-            return \"%s (gdbarch)\" % self.val['m_owner']['gdbarch']\n+            return \"%s (gdbarch)\" % self.val[\"m_owner\"][\"gdbarch\"]\n \n     def struct_field_location_img(self, field_val):\n         \"\"\"Return an image of the loc component inside the given field\n         gdb.Value.\n         \"\"\"\n-        loc_val = field_val['loc']\n-        loc_kind = str(field_val['loc_kind'])\n+        loc_val = field_val[\"loc\"]\n+        loc_kind = str(field_val[\"loc_kind\"])\n         if loc_kind == \"FIELD_LOC_KIND_BITPOS\":\n-            return 'bitpos = %d' % loc_val['bitpos']\n+            return \"bitpos = %d\" % loc_val[\"bitpos\"]\n         elif loc_kind == \"FIELD_LOC_KIND_ENUMVAL\":\n-            return 'enumval = %d' % loc_val['enumval']\n+            return \"enumval = %d\" % loc_val[\"enumval\"]\n         elif loc_kind == \"FIELD_LOC_KIND_PHYSADDR\":\n-            return 'physaddr = 0x%x' % loc_val['physaddr']\n+            return \"physaddr = 0x%x\" % loc_val[\"physaddr\"]\n         elif loc_kind == \"FIELD_LOC_KIND_PHYSNAME\":\n-            return 'physname = %s' % loc_val['physname']\n+            return \"physname = %s\" % loc_val[\"physname\"]\n         elif loc_kind == \"FIELD_LOC_KIND_DWARF_BLOCK\":\n-            return 'dwarf_block = %s' % loc_val['dwarf_block']\n+            return \"dwarf_block = %s\" % loc_val[\"dwarf_block\"]\n         else:\n-            return 'loc = ??? (unsupported loc_kind value)'\n+            return \"loc = ??? (unsupported loc_kind value)\"\n \n     def struct_field_img(self, fieldno):\n-        \"\"\"Return an image of the main_type field number FIELDNO.\n-        \"\"\"\n-        f = self.val['flds_bnds']['fields'][fieldno]\n+        \"\"\"Return an image of the main_type field number FIELDNO.\"\"\"\n+        f = self.val[\"flds_bnds\"][\"fields\"][fieldno]\n         label = \"flds_bnds.fields[%d]:\" % fieldno\n-        if f['artificial']:\n+        if f[\"artificial\"]:\n             label += \" (artificial)\"\n         fields = []\n-        fields.append(\"name = %s\" % f['name'])\n-        fields.append(\"type = %s\" % f['m_type'])\n-        fields.append(\"loc_kind = %s\" % f['loc_kind'])\n-        fields.append(\"bitsize = %d\" % f['bitsize'])\n+        fields.append(\"name = %s\" % f[\"name\"])\n+        fields.append(\"type = %s\" % f[\"m_type\"])\n+        fields.append(\"loc_kind = %s\" % f[\"loc_kind\"])\n+        fields.append(\"bitsize = %d\" % f[\"bitsize\"])\n         fields.append(self.struct_field_location_img(f))\n         return label + \"\\n\" + \"  {\" + \",\\n   \".join(fields) + \"}\"\n \n     def bound_img(self, bound_name):\n         \"\"\"Return an image of the given main_type's bound.\"\"\"\n-        bounds = self.val['flds_bnds']['bounds'].dereference()\n+        bounds = self.val[\"flds_bnds\"][\"bounds\"].dereference()\n         b = bounds[bound_name]\n-        bnd_kind = str(b['m_kind'])\n-        if bnd_kind == 'PROP_CONST':\n-            return str(b['m_data']['const_val'])\n-        elif bnd_kind == 'PROP_UNDEFINED':\n-            return '(undefined)'\n+        bnd_kind = str(b[\"m_kind\"])\n+        if bnd_kind == \"PROP_CONST\":\n+            return str(b[\"m_data\"][\"const_val\"])\n+        elif bnd_kind == \"PROP_UNDEFINED\":\n+            return \"(undefined)\"\n         else:\n             info = [bnd_kind]\n-            if bound_name == 'high' and bounds['flag_upper_bound_is_count']:\n-                info.append('upper_bound_is_count')\n-            return '{} ({})'.format(str(b['m_data']['baton']), ','.join(info))\n+            if bound_name == \"high\" and bounds[\"flag_upper_bound_is_count\"]:\n+                info.append(\"upper_bound_is_count\")\n+            return \"{} ({})\".format(str(b[\"m_data\"][\"baton\"]), \",\".join(info))\n \n     def bounds_img(self):\n-        \"\"\"Return an image of the main_type bounds.\n-        \"\"\"\n-        b = self.val['flds_bnds']['bounds'].dereference()\n-        low = self.bound_img('low')\n-        high = self.bound_img('high')\n+        \"\"\"Return an image of the main_type bounds.\"\"\"\n+        b = self.val[\"flds_bnds\"][\"bounds\"].dereference()\n+        low = self.bound_img(\"low\")\n+        high = self.bound_img(\"high\")\n \n         img = \"flds_bnds.bounds = {%s, %s}\" % (low, high)\n-        if b['flag_bound_evaluated']:\n-            img += ' [evaluated]'\n+        if b[\"flag_bound_evaluated\"]:\n+            img += \" [evaluated]\"\n         return img\n \n     def type_specific_img(self):\n         \"\"\"Return a string image of the main_type type_specific union.\n         Only the relevant component of that union is printed (based on\n         the value of the type_specific_kind field.\n         \"\"\"\n-        type_specific_kind = str(self.val['type_specific_field'])\n-        type_specific = self.val['type_specific']\n+        type_specific_kind = str(self.val[\"type_specific_field\"])\n+        type_specific = self.val[\"type_specific\"]\n         if type_specific_kind == \"TYPE_SPECIFIC_NONE\":\n-            img = 'type_specific_field = %s' % type_specific_kind\n+            img = \"type_specific_field = %s\" % type_specific_kind\n         elif type_specific_kind == \"TYPE_SPECIFIC_CPLUS_STUFF\":\n-            img = \"cplus_stuff = %s\" % type_specific['cplus_stuff']\n+            img = \"cplus_stuff = %s\" % type_specific[\"cplus_stuff\"]\n         elif type_specific_kind == \"TYPE_SPECIFIC_GNAT_STUFF\":\n-            img = (\"gnat_stuff = {descriptive_type = %s}\"\n-                   % type_specific['gnat_stuff']['descriptive_type'])\n+            img = (\n+                \"gnat_stuff = {descriptive_type = %s}\"\n+                % type_specific[\"gnat_stuff\"][\"descriptive_type\"]\n+            )\n         elif type_specific_kind == \"TYPE_SPECIFIC_FLOATFORMAT\":\n-            img = \"floatformat[0..1] = %s\" % type_specific['floatformat']\n+            img = \"floatformat[0..1] = %s\" % type_specific[\"floatformat\"]\n         elif type_specific_kind == \"TYPE_SPECIFIC_FUNC\":\n-            img = (\"calling_convention = %d\"\n-                   % type_specific['func_stuff']['calling_convention'])\n+            img = (\n+                \"calling_convention = %d\"\n+                % type_specific[\"func_stuff\"][\"calling_convention\"]\n+            )\n             # tail_call_list is not printed.\n         elif type_specific_kind == \"TYPE_SPECIFIC_SELF_TYPE\":\n-            img = \"self_type = %s\" % type_specific['self_type']\n+            img = \"self_type = %s\" % type_specific[\"self_type\"]\n         elif type_specific_kind == \"TYPE_SPECIFIC_FIXED_POINT\":\n             # The scaling factor is an opaque structure, so we cannot\n             # decode its value from Python (not without insider knowledge).\n-            img = ('scaling_factor: <opaque> (call __gmpz_dump with '\n-                   ' _mp_num and _mp_den fields if needed)')\n+            img = (\n+                \"scaling_factor: <opaque> (call __gmpz_dump with \"\n+                \" _mp_num and _mp_den fields if needed)\"\n+            )\n         else:\n-            img = (\"type_specific = ??? (unknown type_secific_kind: %s)\"\n-                   % type_specific_kind)\n+            img = (\n+                \"type_specific = ??? (unknown type_secific_kind: %s)\"\n+                % type_specific_kind\n+            )\n         return img\n \n     def to_string(self):\n-        \"\"\"Return a pretty-printed image of our main_type.\n-        \"\"\"\n+        \"\"\"Return a pretty-printed image of our main_type.\"\"\"\n         fields = []\n-        fields.append(\"name = %s\" % self.val['name'])\n-        fields.append(\"code = %s\" % self.val['code'])\n+        fields.append(\"name = %s\" % self.val[\"name\"])\n+        fields.append(\"code = %s\" % self.val[\"code\"])\n         fields.append(\"flags = [%s]\" % self.flags_to_string())\n         fields.append(\"owner = %s\" % self.owner_to_string())\n-        fields.append(\"target_type = %s\" % self.val['target_type'])\n-        if self.val['nfields'] > 0:\n-            for fieldno in range(self.val['nfields']):\n+        fields.append(\"target_type = %s\" % self.val[\"target_type\"])\n+        if self.val[\"nfields\"] > 0:\n+            for fieldno in range(self.val[\"nfields\"]):\n                 fields.append(self.struct_field_img(fieldno))\n-        if self.val['code'] == gdb.TYPE_CODE_RANGE:\n+        if self.val[\"code\"] == gdb.TYPE_CODE_RANGE:\n             fields.append(self.bounds_img())\n         fields.append(self.type_specific_img())\n \n@@ -277,14 +284,13 @@ def type_lookup_function(val):\n         return StructTypePrettyPrinter(val)\n     elif val.type.tag == \"main_type\":\n         return StructMainTypePrettyPrinter(val)\n-    elif val.type.name == 'CORE_ADDR':\n+    elif val.type.name == \"CORE_ADDR\":\n         return CoreAddrPrettyPrinter(val)\n     return None\n \n \n def register_pretty_printer(objfile):\n-    \"\"\"A routine to register a pretty-printer against the given OBJFILE.\n-    \"\"\"\n+    \"\"\"A routine to register a pretty-printer against the given OBJFILE.\"\"\"\n     objfile.pretty_printers.append(type_lookup_function)\n \n "
    },
    {
      "sha": "58ed2f9d55644f50e26ddb7f0e52bad3de6c4656",
      "filename": "gdb/pyproject.toml",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e159e93b273af462b9999122af9a69980d88e1/gdb/pyproject.toml",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e159e93b273af462b9999122af9a69980d88e1/gdb/pyproject.toml",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/pyproject.toml?ref=91e159e93b273af462b9999122af9a69980d88e1",
      "patch": "@@ -0,0 +1,2 @@\n+[tool.black]\n+include = \"\\\\.py(\\\\.in)?$\""
    },
    {
      "sha": "69d00ff8cea692ce430347d0645f34856a8a1478",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e159e93b273af462b9999122af9a69980d88e1/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e159e93b273af462b9999122af9a69980d88e1/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=91e159e93b273af462b9999122af9a69980d88e1",
      "patch": "@@ -1,3 +1,8 @@\n+2021-05-17  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* gdb.python/py-framefilter-gdb.py.in: Re-format.\n+\t* gdb.python/py-framefilter-invalidarg-gdb.py.in: Re-format.\n+\n 2021-05-17  Bhuvanendra Kumar N  <Bhuvanendra.KumarN@amd.com>\n \n \t* gdb.base/class-allocatable-array.exp: Modified test for clang."
    },
    {
      "sha": "d2205f41e20a04882716fd904df1887eb2c32080",
      "filename": "gdb/testsuite/gdb.python/py-framefilter-gdb.py.in",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e159e93b273af462b9999122af9a69980d88e1/gdb/testsuite/gdb.python/py-framefilter-gdb.py.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e159e93b273af462b9999122af9a69980d88e1/gdb/testsuite/gdb.python/py-framefilter-gdb.py.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-framefilter-gdb.py.in?ref=91e159e93b273af462b9999122af9a69980d88e1",
      "patch": "@@ -20,29 +20,29 @@ import itertools\n from gdb.FrameDecorator import FrameDecorator\n \n \n-class FrameObjFile ():\n-\n-    def __init__ (self):\n+class FrameObjFile:\n+    def __init__(self):\n         self.name = \"Filter1\"\n         self.priority = 1\n         self.enabled = False\n-        gdb.current_progspace().frame_filters [\"Progspace\" + self.name] = self\n-        gdb.current_objfile().frame_filters [\"ObjectFile\" + self.name] = self\n+        gdb.current_progspace().frame_filters[\"Progspace\" + self.name] = self\n+        gdb.current_objfile().frame_filters[\"ObjectFile\" + self.name] = self\n \n-    def filter (self, frame_iter):\n+    def filter(self, frame_iter):\n         return frame_iter\n \n-class FrameObjFile2 ():\n \n-    def __init__ (self):\n+class FrameObjFile2:\n+    def __init__(self):\n         self.name = \"Filter2\"\n         self.priority = 100\n         self.enabled = True\n-        gdb.current_progspace().frame_filters [\"Progspace\" + self.name] = self\n-        gdb.current_objfile().frame_filters [\"ObjectFile\" + self.name] = self\n+        gdb.current_progspace().frame_filters[\"Progspace\" + self.name] = self\n+        gdb.current_objfile().frame_filters[\"ObjectFile\" + self.name] = self\n \n-    def filter (self, frame_iter):\n+    def filter(self, frame_iter):\n         return frame_iter\n \n+\n FrameObjFile()\n FrameObjFile2()"
    },
    {
      "sha": "e27b89859442e873803772316b22eecabb10495a",
      "filename": "gdb/testsuite/gdb.python/py-framefilter-invalidarg-gdb.py.in",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/91e159e93b273af462b9999122af9a69980d88e1/gdb/testsuite/gdb.python/py-framefilter-invalidarg-gdb.py.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/91e159e93b273af462b9999122af9a69980d88e1/gdb/testsuite/gdb.python/py-framefilter-invalidarg-gdb.py.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-framefilter-invalidarg-gdb.py.in?ref=91e159e93b273af462b9999122af9a69980d88e1",
      "patch": "@@ -20,29 +20,29 @@ import itertools\n from gdb.FrameDecorator import FrameDecorator\n \n \n-class FrameObjFile ():\n-\n-    def __init__ (self):\n+class FrameObjFile:\n+    def __init__(self):\n         self.name = \"Filter1\"\n         self.priority = 1\n         self.enabled = False\n-        gdb.current_progspace().frame_filters [\"Progspace\" + self.name] = self\n-        gdb.current_objfile().frame_filters [\"ObjectFile\" + self.name] = self\n+        gdb.current_progspace().frame_filters[\"Progspace\" + self.name] = self\n+        gdb.current_objfile().frame_filters[\"ObjectFile\" + self.name] = self\n \n-    def filter (self, frame_iter):\n+    def filter(self, frame_iter):\n         return frame_iter\n \n-class FrameObjFile2 ():\n \n-    def __init__ (self):\n+class FrameObjFile2:\n+    def __init__(self):\n         self.name = \"Filter2\"\n         self.priority = 100\n         self.enabled = True\n-        gdb.current_progspace().frame_filters [\"Progspace\" + self.name] = self\n-        gdb.current_objfile().frame_filters [\"ObjectFile\" + self.name] = self\n+        gdb.current_progspace().frame_filters[\"Progspace\" + self.name] = self\n+        gdb.current_objfile().frame_filters[\"ObjectFile\" + self.name] = self\n \n-    def filter (self, frame_iter):\n+    def filter(self, frame_iter):\n         return frame_iter\n \n+\n FrameObjFile()\n FrameObjFile2()"
    }
  ]
}