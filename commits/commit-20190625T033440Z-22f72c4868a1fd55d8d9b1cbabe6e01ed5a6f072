{
  "sha": "22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjJmNzJjNDg2OGExZmQ1NWQ4ZDliMWNiYWJlNmUwMWVkNWE2ZjA3Mg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-06-25T00:42:58Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-06-25T03:34:40Z"
    },
    "message": "PowerPC nops\n\nThis patch corrects ppc rs_align_code handling to choose the alignment\nnops based on the machine in force at the alignment directive rather\nthan the machine at the end of file.\n\n\t* config/tc-ppc.h (ppc_nop_select): Declare.\n\t(NOP_OPCODE): Define.\n\t* config/tc-ppc.c (ppc_elf_end, ppc_xcoff_end): Zero ppc_cpu.\n\t(ppc_nop_encoding_for_rs_align_code): New enum.\n\t(ppc_nop_select): New function.\n\t(ppc_handle_align): Don't use ppc_cpu here.  Get nop type from frag.\n\t* testsuite/gas/ppc/groupnop.d,\n\t* testsuite/gas/ppc/groupnop.s: New test.\n\t* testsuite/gas/ppc/ppc.exp: Run it.",
    "tree": {
      "sha": "223bd6f1f60e5fc1ecada40c17aa4c1084d39d54",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/223bd6f1f60e5fc1ecada40c17aa4c1084d39d54"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2e7c439dec066ac8a597d0b85193b8d3ec8e09eb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2e7c439dec066ac8a597d0b85193b8d3ec8e09eb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2e7c439dec066ac8a597d0b85193b8d3ec8e09eb"
    }
  ],
  "stats": {
    "total": 125,
    "additions": 106,
    "deletions": 19
  },
  "files": [
    {
      "sha": "1e2962763fa501e162967b5ebf044ca16d6c5b9c",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072",
      "patch": "@@ -1,3 +1,15 @@\n+2019-06-25  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/tc-ppc.h (ppc_nop_select): Declare.\n+\t(NOP_OPCODE): Define.\n+\t* config/tc-ppc.c (ppc_elf_end, ppc_xcoff_end): Zero ppc_cpu.\n+\t(ppc_nop_encoding_for_rs_align_code): New enum.\n+\t(ppc_nop_select): New function.\n+\t(ppc_handle_align): Don't use ppc_cpu here.  Get nop type from frag.\n+\t* testsuite/gas/ppc/groupnop.d,\n+\t* testsuite/gas/ppc/groupnop.s: New test.\n+\t* testsuite/gas/ppc/ppc.exp: Run it.\n+\n 2019-06-19  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR binutils/24700"
    },
    {
      "sha": "de0f8da94845dfcf188c1724ffb9528a1832e390",
      "filename": "gas/config/tc-ppc.c",
      "status": "modified",
      "additions": 51,
      "deletions": 19,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072/gas/config/tc-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072/gas/config/tc-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.c?ref=22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072",
      "patch": "@@ -2608,6 +2608,12 @@ ppc_elf_end (void)\n       elf_elfheader (stdoutput)->e_flags &= ~EF_PPC64_ABI;\n       elf_elfheader (stdoutput)->e_flags |= ppc_abiversion & EF_PPC64_ABI;\n     }\n+  /* Any selection of opcodes based on ppc_cpu after gas has finished\n+     parsing the file is invalid.  md_apply_fix and ppc_handle_align\n+     must select opcodes based on the machine in force at the point\n+     where the fixup or alignment frag was created, not the machine in\n+     force at the end of file.  */\n+  ppc_cpu = 0;\n }\n \n /* Validate any relocations emitted for -mrelocatable, possibly adding\n@@ -5562,6 +5568,7 @@ ppc_xcoff_end (void)\n             symbol_set_value_now (dwss->end_exp.X_add_symbol);\n           }\n     }\n+  ppc_cpu = 0;\n }\n \n #endif /* OBJ_XCOFF */\n@@ -7077,26 +7084,58 @@ ppc_frag_check (struct frag *fragP)\n \t\t  fragP->insn_addr + 1);\n }\n \n-/* Implement HANDLE_ALIGN.  This writes the NOP pattern into an\n-   rs_align_code frag.  */\n+/* rs_align_code frag handling.  */\n+\n+enum ppc_nop_encoding_for_rs_align_code\n+{\n+  PPC_NOP_VANILLA,\n+  PPC_NOP_VLE,\n+  PPC_NOP_GROUP_P6,\n+  PPC_NOP_GROUP_P7\n+};\n+\n+unsigned int\n+ppc_nop_select (void)\n+{\n+  if ((ppc_cpu & PPC_OPCODE_VLE) != 0)\n+    return PPC_NOP_VLE;\n+  if ((ppc_cpu & (PPC_OPCODE_POWER9 | PPC_OPCODE_E500MC)) == 0)\n+    {\n+      if ((ppc_cpu & PPC_OPCODE_POWER7) != 0)\n+\treturn PPC_NOP_GROUP_P7;\n+      if ((ppc_cpu & PPC_OPCODE_POWER6) != 0)\n+\treturn PPC_NOP_GROUP_P6;\n+    }\n+  return PPC_NOP_VANILLA;\n+}\n \n void\n ppc_handle_align (struct frag *fragP)\n {\n   valueT count = (fragP->fr_next->fr_address\n \t\t  - (fragP->fr_address + fragP->fr_fix));\n+  char *dest = fragP->fr_literal + fragP->fr_fix;\n+  enum ppc_nop_encoding_for_rs_align_code nop_select = *dest & 0xff;\n+\n+  /* Pad with zeros if not inserting a whole number of instructions.\n+     We could pad with zeros up to an instruction boundary then follow\n+     with nops but odd counts indicate data in an executable section\n+     so padding with zeros is most appropriate.  */\n+  if (count == 0\n+      || nop_select == PPC_NOP_VLE ? (count & 1) != 0 : (count & 3) != 0)\n+    {\n+      *dest = 0;\n+      return;\n+    }\n \n-  if ((ppc_cpu & PPC_OPCODE_VLE) != 0 && count != 0 && (count & 1) == 0)\n+  if (nop_select == PPC_NOP_VLE)\n     {\n-      char *dest = fragP->fr_literal + fragP->fr_fix;\n \n       fragP->fr_var = 2;\n       md_number_to_chars (dest, 0x4400, 2);\n     }\n-  else if (count != 0 && (count & 3) == 0)\n+  else\n     {\n-      char *dest = fragP->fr_literal + fragP->fr_fix;\n-\n       fragP->fr_var = 4;\n \n       if (count > 4 * nop_limit && count < 0x2000000)\n@@ -7125,8 +7164,7 @@ ppc_handle_align (struct frag *fragP)\n \n       md_number_to_chars (dest, 0x60000000, 4);\n \n-      if ((ppc_cpu & PPC_OPCODE_POWER6) != 0\n-\t  && (ppc_cpu & PPC_OPCODE_POWER9) == 0)\n+      if (nop_select >= PPC_NOP_GROUP_P6)\n \t{\n \t  /* For power6, power7, and power8, we want the last nop to\n \t     be a group terminating one.  Do this by inserting an\n@@ -7146,18 +7184,12 @@ ppc_handle_align (struct frag *fragP)\n \t      dest = group_nop->fr_literal;\n \t    }\n \n-\t  if ((ppc_cpu & PPC_OPCODE_POWER7) != 0)\n-\t    {\n-\t      if (ppc_cpu & PPC_OPCODE_E500MC)\n-\t\t/* e500mc group terminating nop: \"ori 0,0,0\".  */\n-\t\tmd_number_to_chars (dest, 0x60000000, 4);\n-\t      else\n-\t\t/* power7/power8 group terminating nop: \"ori 2,2,0\".  */\n-\t\tmd_number_to_chars (dest, 0x60420000, 4);\n-\t    }\n-\t  else\n+\t  if (nop_select == PPC_NOP_GROUP_P6)\n \t    /* power6 group terminating nop: \"ori 1,1,0\".  */\n \t    md_number_to_chars (dest, 0x60210000, 4);\n+\t  else\n+\t    /* power7/power8 group terminating nop: \"ori 2,2,0\".  */\n+\t    md_number_to_chars (dest, 0x60420000, 4);\n \t}\n     }\n }"
    },
    {
      "sha": "2b18ecda2fd15e140efe050ace4db2e7b9bbb464",
      "filename": "gas/config/tc-ppc.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072/gas/config/tc-ppc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072/gas/config/tc-ppc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.h?ref=22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072",
      "patch": "@@ -82,6 +82,9 @@ extern const char *ppc_target_format (void);\n   if ((FRAGP)->fr_type == rs_align_code)\t\t\t\t\\\n     ppc_handle_align (FRAGP);\n \n+extern unsigned int ppc_nop_select (void);\n+#define NOP_OPCODE ppc_nop_select ()\n+\n extern void ppc_handle_align (struct frag *);\n extern void ppc_frag_check (struct frag *);\n "
    },
    {
      "sha": "6568cccc1f981c02650e28eaf7b774a7a45e9e96",
      "filename": "gas/testsuite/gas/ppc/groupnop.d",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072/gas/testsuite/gas/ppc/groupnop.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072/gas/testsuite/gas/ppc/groupnop.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/groupnop.d?ref=22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072",
      "patch": "@@ -0,0 +1,19 @@\n+#as:\n+#objdump: -dr\n+\n+.*\n+\n+Disassembly of section \\.text:\n+\n+0+ <\\.text>:\n+   0:\t(60 00 00 00|00 00 00 60) .*\n+   4:\t(60 00 00 00|00 00 00 60) .*\n+   8:\t(60 00 00 00|00 00 00 60) .*\n+   c:\t(60 42 00 00|00 00 42 60) .*\n+  10:\t(60 00 00 00|00 00 00 60) .*\n+  14:\t(60 42 00 00|00 00 42 60) .*\n+  18:\t(60 00 00 00|00 00 00 60) .*\n+  1c:\t(60 21 00 00|00 00 21 60) .*\n+  20:\t(60 00 00 00|00 00 00 60) .*\n+  24:\t(60 00 00 00|00 00 00 60) .*\n+#pass"
    },
    {
      "sha": "ca6a9b4076797093aeaa718780da89d78beb34a0",
      "filename": "gas/testsuite/gas/ppc/groupnop.s",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072/gas/testsuite/gas/ppc/groupnop.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072/gas/testsuite/gas/ppc/groupnop.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/groupnop.s?ref=22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072",
      "patch": "@@ -0,0 +1,19 @@\n+ .machine power9\n+ nop\n+ .p2align 3\n+\n+ .machine power8\n+ nop\n+ .p2align 3\n+\n+ .machine power7\n+ nop\n+ .p2align 3\n+\n+ .machine power6\n+ nop\n+ .p2align 3\n+\n+ .machine power5\n+ nop\n+ .p2align 3"
    },
    {
      "sha": "d87559e3c9e1f1b8647fe27a212d885c3b791983",
      "filename": "gas/testsuite/gas/ppc/ppc.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072/gas/testsuite/gas/ppc/ppc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072/gas/testsuite/gas/ppc/ppc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/ppc.exp?ref=22f72c4868a1fd55d8d9b1cbabe6e01ed5a6f072",
      "patch": "@@ -51,6 +51,7 @@ if { [istarget \"*-*-aix*\"]\n     run_dump_test \"test2xcoff32\"\n     run_dump_test \"altivec_xcoff\"\n     run_dump_test \"altivec_xcoff64\"\n+    run_dump_test \"groupnop\"\n }\n \n # These tests are currently ELF specific, only because nobody has\n@@ -105,6 +106,7 @@ run_dump_test \"altivec2\"\n run_dump_test \"altivec3\"\n run_dump_test \"broadway\"\n run_dump_test \"booke\"\n+run_dump_test \"groupnop\"\n run_dump_test \"e500\"\n run_list_test \"e500-ill\" \"-me500\"\n run_dump_test \"ppc750ps\""
    }
  ]
}