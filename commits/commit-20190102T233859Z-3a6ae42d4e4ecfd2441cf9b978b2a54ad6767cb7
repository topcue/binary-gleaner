{
  "sha": "3a6ae42d4e4ecfd2441cf9b978b2a54ad6767cb7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2E2YWU0MmQ0ZTRlY2ZkMjQ0MWNmOWI5NzhiMmE1NGFkNjc2N2NiNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-02T16:17:43Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-02T23:38:59Z"
    },
    "message": "Remove cleanups from linespec.c\n\nThis removes the remaining cleanups from linespec.c.  This adds a\nconstructor and destructor to linespec_parser, but in a minimal way --\nthe parser could still benefit from a bit more C++-ification.\n\ngdb/ChangeLog\n2019-01-02  Tom Tromey  <tom@tromey.com>\n\n\t* linespec.c (struct linespec_parser): Rename from ls_parser.  Add\n\tconstructor, destructor.\n\t(linespec_parser): Remove typedef.\n\t(~linespec_parser): Rename from linespec_parser_delete.\n\t(linespec_lex_to_end, linespec_complete_label)\n\t(linespec_complete): Update.\n\t(decode_line_full): Remove cleanups.\n\t(decode_line_1): Update.",
    "tree": {
      "sha": "f968c2438e78b84aac247c74925a66a85ecbaf77",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f968c2438e78b84aac247c74925a66a85ecbaf77"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3a6ae42d4e4ecfd2441cf9b978b2a54ad6767cb7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3a6ae42d4e4ecfd2441cf9b978b2a54ad6767cb7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3a6ae42d4e4ecfd2441cf9b978b2a54ad6767cb7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3a6ae42d4e4ecfd2441cf9b978b2a54ad6767cb7/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "61fd3e738919700c8d0fbb942519d72a767d90b1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/61fd3e738919700c8d0fbb942519d72a767d90b1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/61fd3e738919700c8d0fbb942519d72a767d90b1"
    }
  ],
  "stats": {
    "total": 152,
    "additions": 66,
    "deletions": 86
  },
  "files": [
    {
      "sha": "04030ec1d5e0f97459bd94c2c3409e1ca6681dbf",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a6ae42d4e4ecfd2441cf9b978b2a54ad6767cb7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a6ae42d4e4ecfd2441cf9b978b2a54ad6767cb7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3a6ae42d4e4ecfd2441cf9b978b2a54ad6767cb7",
      "patch": "@@ -1,3 +1,14 @@\n+2019-01-02  Tom Tromey  <tom@tromey.com>\n+\n+\t* linespec.c (struct linespec_parser): Rename from ls_parser.  Add\n+\tconstructor, destructor.\n+\t(linespec_parser): Remove typedef.\n+\t(~linespec_parser): Rename from linespec_parser_delete.\n+\t(linespec_lex_to_end, linespec_complete_label)\n+\t(linespec_complete): Update.\n+\t(decode_line_full): Remove cleanups.\n+\t(decode_line_1): Update.\n+\n 2019-01-02  Tom Tromey  <tom@tromey.com>\n \n \t* python/python-internal.h (inferior_to_inferior_object): Change"
    },
    {
      "sha": "b1ab462e663770d3389e030174a350e1ae49af71",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 55,
      "deletions": 86,
      "changes": 141,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a6ae42d4e4ecfd2441cf9b978b2a54ad6767cb7/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a6ae42d4e4ecfd2441cf9b978b2a54ad6767cb7/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=3a6ae42d4e4ecfd2441cf9b978b2a54ad6767cb7",
      "patch": "@@ -281,8 +281,18 @@ typedef struct ls_token linespec_token;\n \n /* An instance of the linespec parser.  */\n \n-struct ls_parser\n+struct linespec_parser\n {\n+  linespec_parser (int flags, const struct language_defn *language,\n+\t\t   struct program_space *search_pspace,\n+\t\t   struct symtab *default_symtab,\n+\t\t   int default_line,\n+\t\t   struct linespec_result *canonical);\n+\n+  ~linespec_parser ();\n+\n+  DISABLE_COPY_AND_ASSIGN (linespec_parser);\n+\n   /* Lexer internal data  */\n   struct\n   {\n@@ -295,43 +305,42 @@ struct ls_parser\n \n     /* The current token.  */\n     linespec_token current;\n-  } lexer;\n+  } lexer {};\n \n   /* Is the entire linespec quote-enclosed?  */\n-  int is_quote_enclosed;\n+  int is_quote_enclosed = 0;\n \n   /* The state of the parse.  */\n-  struct linespec_state state;\n+  struct linespec_state state {};\n #define PARSER_STATE(PPTR) (&(PPTR)->state)\n \n   /* The result of the parse.  */\n-  struct linespec result;\n+  struct linespec result {};\n #define PARSER_RESULT(PPTR) (&(PPTR)->result)\n \n   /* What the parser believes the current word point should complete\n      to.  */\n-  linespec_complete_what complete_what;\n+  linespec_complete_what complete_what = linespec_complete_what::NOTHING;\n \n   /* The completion word point.  The parser advances this as it skips\n      tokens.  At some point the input string will end or parsing will\n      fail, and then we attempt completion at the captured completion\n      word point, interpreting the string at completion_word as\n      COMPLETE_WHAT.  */\n-  const char *completion_word;\n+  const char *completion_word = nullptr;\n \n   /* If the current token was a quoted string, then this is the\n      quoting character (either \" or ').  */\n-  int completion_quote_char;\n+  int completion_quote_char = 0;\n \n   /* If the current token was a quoted string, then this points at the\n      end of the quoted string.  */\n-  const char *completion_quote_end;\n+  const char *completion_quote_end = nullptr;\n \n   /* If parsing for completion, then this points at the completion\n      tracker.  Otherwise, this is NULL.  */\n-  struct completion_tracker *completion_tracker;\n+  struct completion_tracker *completion_tracker = nullptr;\n };\n-typedef struct ls_parser linespec_parser;\n \n /* A convenience macro for accessing the explicit location result of\n    the parser.  */\n@@ -2735,22 +2744,19 @@ linespec_state_constructor (struct linespec_state *self,\n \n /* Initialize a new linespec parser.  */\n \n-static void\n-linespec_parser_new (linespec_parser *parser,\n-\t\t     int flags, const struct language_defn *language,\n-\t\t     struct program_space *search_pspace,\n-\t\t     struct symtab *default_symtab,\n-\t\t     int default_line,\n-\t\t     struct linespec_result *canonical)\n+linespec_parser::linespec_parser (int flags,\n+\t\t\t\t  const struct language_defn *language,\n+\t\t\t\t  struct program_space *search_pspace,\n+\t\t\t\t  struct symtab *default_symtab,\n+\t\t\t\t  int default_line,\n+\t\t\t\t  struct linespec_result *canonical)\n {\n-  memset (parser, 0, sizeof (linespec_parser));\n-  parser->lexer.current.type = LSTOKEN_CONSUMED;\n-  memset (PARSER_RESULT (parser), 0, sizeof (struct linespec));\n-  PARSER_RESULT (parser)->file_symtabs = new std::vector<symtab *> ();\n-  PARSER_EXPLICIT (parser)->func_name_match_type\n+  lexer.current.type = LSTOKEN_CONSUMED;\n+  PARSER_RESULT (this)->file_symtabs = new std::vector<symtab *> ();\n+  PARSER_EXPLICIT (this)->func_name_match_type\n     = symbol_name_match_type::WILD;\n-  PARSER_EXPLICIT (parser)->line_offset.sign = LINE_OFFSET_UNKNOWN;\n-  linespec_state_constructor (PARSER_STATE (parser), flags, language,\n+  PARSER_EXPLICIT (this)->line_offset.sign = LINE_OFFSET_UNKNOWN;\n+  linespec_state_constructor (PARSER_STATE (this), flags, language,\n \t\t\t      search_pspace,\n \t\t\t      default_symtab, default_line, canonical);\n }\n@@ -2765,39 +2771,33 @@ linespec_state_destructor (struct linespec_state *self)\n \n /* Delete a linespec parser.  */\n \n-static void\n-linespec_parser_delete (void *arg)\n+linespec_parser::~linespec_parser ()\n {\n-  linespec_parser *parser = (linespec_parser *) arg;\n-\n-  xfree (PARSER_EXPLICIT (parser)->source_filename);\n-  xfree (PARSER_EXPLICIT (parser)->label_name);\n-  xfree (PARSER_EXPLICIT (parser)->function_name);\n+  xfree (PARSER_EXPLICIT (this)->source_filename);\n+  xfree (PARSER_EXPLICIT (this)->label_name);\n+  xfree (PARSER_EXPLICIT (this)->function_name);\n \n-  delete PARSER_RESULT (parser)->file_symtabs;\n-  delete PARSER_RESULT (parser)->function_symbols;\n-  delete PARSER_RESULT (parser)->minimal_symbols;\n-  delete PARSER_RESULT (parser)->labels.label_symbols;\n-  delete PARSER_RESULT (parser)->labels.function_symbols;\n+  delete PARSER_RESULT (this)->file_symtabs;\n+  delete PARSER_RESULT (this)->function_symbols;\n+  delete PARSER_RESULT (this)->minimal_symbols;\n+  delete PARSER_RESULT (this)->labels.label_symbols;\n+  delete PARSER_RESULT (this)->labels.function_symbols;\n \n-  linespec_state_destructor (PARSER_STATE (parser));\n+  linespec_state_destructor (PARSER_STATE (this));\n }\n \n /* See description in linespec.h.  */\n \n void\n linespec_lex_to_end (const char **stringp)\n {\n-  linespec_parser parser;\n-  struct cleanup *cleanup;\n   linespec_token token;\n   const char *orig;\n \n   if (stringp == NULL || *stringp == NULL)\n     return;\n \n-  linespec_parser_new (&parser, 0, current_language, NULL, NULL, 0, NULL);\n-  cleanup = make_cleanup (linespec_parser_delete, &parser);\n+  linespec_parser parser (0, current_language, NULL, NULL, 0, NULL);\n   parser.lexer.saved_arg = *stringp;\n   PARSER_STREAM (&parser) = orig = *stringp;\n \n@@ -2813,7 +2813,6 @@ linespec_lex_to_end (const char **stringp)\n   while (token.type != LSTOKEN_EOI && token.type != LSTOKEN_KEYWORD);\n \n   *stringp += PARSER_STREAM (&parser) - orig;\n-  do_cleanups (cleanup);\n }\n \n /* See linespec.h.  */\n@@ -2939,11 +2938,7 @@ linespec_complete_label (completion_tracker &tracker,\n \t\t\t symbol_name_match_type func_name_match_type,\n \t\t\t const char *label_name)\n {\n-  linespec_parser parser;\n-  struct cleanup *cleanup;\n-\n-  linespec_parser_new (&parser, 0, language, NULL, NULL, 0, NULL);\n-  cleanup = make_cleanup (linespec_parser_delete, &parser);\n+  linespec_parser parser (0, language, NULL, NULL, 0, NULL);\n \n   line_offset unknown_offset = { 0, LINE_OFFSET_UNKNOWN };\n \n@@ -2958,14 +2953,11 @@ linespec_complete_label (completion_tracker &tracker,\n     }\n   CATCH (ex, RETURN_MASK_ERROR)\n     {\n-      do_cleanups (cleanup);\n       return;\n     }\n   END_CATCH\n \n   complete_label (tracker, &parser, label_name);\n-\n-  do_cleanups (cleanup);\n }\n \n /* See description in linespec.h.  */\n@@ -2974,12 +2966,9 @@ void\n linespec_complete (completion_tracker &tracker, const char *text,\n \t\t   symbol_name_match_type match_type)\n {\n-  linespec_parser parser;\n-  struct cleanup *cleanup;\n   const char *orig = text;\n \n-  linespec_parser_new (&parser, 0, current_language, NULL, NULL, 0, NULL);\n-  cleanup = make_cleanup (linespec_parser_delete, &parser);\n+  linespec_parser parser (0, current_language, NULL, NULL, 0, NULL);\n   parser.lexer.saved_arg = text;\n   PARSER_EXPLICIT (&parser)->func_name_match_type = match_type;\n   PARSER_STREAM (&parser) = text;\n@@ -3162,8 +3151,6 @@ linespec_complete (completion_tracker &tracker, const char *text,\n \t\t\t\t       NULL);\n \t}\n     }\n-\n-  do_cleanups (cleanup);\n }\n \n /* A helper function for decode_line_full and decode_line_1 to\n@@ -3245,9 +3232,7 @@ decode_line_full (const struct event_location *location, int flags,\n \t\t  const char *select_mode,\n \t\t  const char *filter)\n {\n-  struct cleanup *cleanups;\n   std::vector<const char *> filters;\n-  linespec_parser parser;\n   struct linespec_state *state;\n \n   gdb_assert (canonical != NULL);\n@@ -3259,10 +3244,9 @@ decode_line_full (const struct event_location *location, int flags,\n \t      || select_mode == multiple_symbols_cancel);\n   gdb_assert ((flags & DECODE_LINE_LIST_MODE) == 0);\n \n-  linespec_parser_new (&parser, flags, current_language,\n-\t\t       search_pspace, default_symtab,\n-\t\t       default_line, canonical);\n-  cleanups = make_cleanup (linespec_parser_delete, &parser);\n+  linespec_parser parser (flags, current_language,\n+\t\t\t  search_pspace, default_symtab,\n+\t\t\t  default_line, canonical);\n \n   scoped_restore_current_program_space restore_pspace;\n \n@@ -3274,16 +3258,11 @@ decode_line_full (const struct event_location *location, int flags,\n   canonical->pre_expanded = 1;\n \n   /* Arrange for allocated canonical names to be freed.  */\n-  if (!result.empty ())\n+  std::vector<gdb::unique_xmalloc_ptr<char>> hold_names;\n+  for (int i = 0; i < result.size (); ++i)\n     {\n-      int i;\n-\n-      make_cleanup (xfree, state->canonical_names);\n-      for (i = 0; i < result.size (); ++i)\n-\t{\n-\t  gdb_assert (state->canonical_names[i].suffix != NULL);\n-\t  make_cleanup (xfree, state->canonical_names[i].suffix);\n-\t}\n+      gdb_assert (state->canonical_names[i].suffix != NULL);\n+      hold_names.emplace_back (state->canonical_names[i].suffix);\n     }\n \n   if (select_mode == NULL)\n@@ -3306,8 +3285,6 @@ decode_line_full (const struct event_location *location, int flags,\n     }\n   else\n     decode_line_2 (state, &result, select_mode);\n-\n-  do_cleanups (cleanups);\n }\n \n /* See linespec.h.  */\n@@ -3318,21 +3295,13 @@ decode_line_1 (const struct event_location *location, int flags,\n \t       struct symtab *default_symtab,\n \t       int default_line)\n {\n-  linespec_parser parser;\n-  struct cleanup *cleanups;\n-\n-  linespec_parser_new (&parser, flags, current_language,\n-\t\t       search_pspace, default_symtab,\n-\t\t       default_line, NULL);\n-  cleanups = make_cleanup (linespec_parser_delete, &parser);\n+  linespec_parser parser (flags, current_language,\n+\t\t\t  search_pspace, default_symtab,\n+\t\t\t  default_line, NULL);\n \n   scoped_restore_current_program_space restore_pspace;\n \n-  std::vector<symtab_and_line> result = event_location_to_sals (&parser,\n-\t\t\t\t\t\t\t\tlocation);\n-\n-  do_cleanups (cleanups);\n-  return result;\n+  return event_location_to_sals (&parser, location);\n }\n \n /* See linespec.h.  */"
    }
  ]
}