{
  "sha": "7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2YwYWU4NGM4MGFhZTZmZThmNzU3MzM0M2ZlMWFiNDU1ZDE4YjVkOA==",
  "commit": {
    "author": {
      "name": "George Barrett",
      "email": "bob@bob131.so",
      "date": "2020-01-10T19:30:28Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-01-10T19:58:37Z"
    },
    "message": "Fix handling of null stap semaphores\n\nAccording to the SystemTap documentation on user-space probes[0], stap\nprobe points without semaphores are denoted by setting the semaphore\naddress in the probe's note to zero. At present the code does do a\ncomparison of the semaphore address against zero, but only after it's\nbeen relocated; as such it will (almost?) always fail, commonly\nresulting in GDB trying to overwrite the ELF magic located at the\nimage's base address.\n\nThis commit tests the address as specified in the SDT note rather than\nthe relocated value in order to correctly detect absent probe\nsemaphores.\n\n[0]: https://sourceware.org/systemtap/wiki/UserSpaceProbeImplementation\n\ngdb/Changelog:\n2020-01-11  George Barrett  <bob@bob131.so>\n\n\t* stap-probe.c (stap_modify_semaphore): Don't check for null\n\tsemaphores.\n\t(stap_probe::set_semaphore, stap_probe::clear_semaphore): Check\n\tfor null semaphores.\n\ngdb/testsuite/ChangeLog:\n2020-01-11  George Barrett  <bob@bob131.so>\n\n\t* gdb.base/stap-probe.c (relocation_marker): Add dummy variable\n\tto help in finding the image relocation offset.\n\t* gdb.base/stap-probe.exp (stap_test): Accept arbitrary compile\n\toptions in arguments.\n\t(stap_test_no_debuginfo): Likewise.\n\t(stap-probe-nosem-noopt-pie, stap-probe-nosem-noopt-nopie): Add\n\ttest variants.\n\t(stap_test): Add null semaphore relocation test.",
    "tree": {
      "sha": "16de1a790fb014f27a7c09d634df9f5215961da3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/16de1a790fb014f27a7c09d634df9f5215961da3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8/comments",
  "author": {
    "login": "Bob131",
    "id": 4337852,
    "node_id": "MDQ6VXNlcjQzMzc4NTI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4337852?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Bob131",
    "html_url": "https://github.com/Bob131",
    "followers_url": "https://api.github.com/users/Bob131/followers",
    "following_url": "https://api.github.com/users/Bob131/following{/other_user}",
    "gists_url": "https://api.github.com/users/Bob131/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Bob131/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Bob131/subscriptions",
    "organizations_url": "https://api.github.com/users/Bob131/orgs",
    "repos_url": "https://api.github.com/users/Bob131/repos",
    "events_url": "https://api.github.com/users/Bob131/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Bob131/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "47e9d49d2d795224f4b3f04c89c268627b850be4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/47e9d49d2d795224f4b3f04c89c268627b850be4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/47e9d49d2d795224f4b3f04c89c268627b850be4"
    }
  ],
  "stats": {
    "total": 65,
    "additions": 55,
    "deletions": 10
  },
  "files": [
    {
      "sha": "0e5c8a952757e517e8689e42e07f5a501c9779f5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8",
      "patch": "@@ -1,3 +1,10 @@\n+2020-01-10  George Barrett  <bob@bob131.so>\n+\n+\t* stap-probe.c (stap_modify_semaphore): Don't check for null\n+\tsemaphores.\n+\t(stap_probe::set_semaphore, stap_probe::clear_semaphore): Check\n+\tfor null semaphores.\n+\n 2020-01-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* tui/tui-source.c (tui_source_window::do_scroll_vertical): Update"
    },
    {
      "sha": "50f6d518133a3f7e47ee46f7b2df20d287e52fbe",
      "filename": "gdb/stap-probe.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8/gdb/stap-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8/gdb/stap-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stap-probe.c?ref=7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8",
      "patch": "@@ -1430,9 +1430,6 @@ stap_modify_semaphore (CORE_ADDR address, int set, struct gdbarch *gdbarch)\n   struct type *type = builtin_type (gdbarch)->builtin_unsigned_short;\n   ULONGEST value;\n \n-  if (address == 0)\n-    return;\n-\n   /* Swallow errors.  */\n   if (target_read_memory (address, bytes, TYPE_LENGTH (type)) != 0)\n     {\n@@ -1466,6 +1463,8 @@ stap_modify_semaphore (CORE_ADDR address, int set, struct gdbarch *gdbarch)\n void\n stap_probe::set_semaphore (struct objfile *objfile, struct gdbarch *gdbarch)\n {\n+  if (m_sem_addr == 0)\n+    return;\n   stap_modify_semaphore (relocate_address (m_sem_addr, objfile), 1, gdbarch);\n }\n \n@@ -1474,6 +1473,8 @@ stap_probe::set_semaphore (struct objfile *objfile, struct gdbarch *gdbarch)\n void\n stap_probe::clear_semaphore (struct objfile *objfile, struct gdbarch *gdbarch)\n {\n+  if (m_sem_addr == 0)\n+    return;\n   stap_modify_semaphore (relocate_address (m_sem_addr, objfile), 0, gdbarch);\n }\n "
    },
    {
      "sha": "29d6af2008d2f2d77d4073239b5cbb7a7228e324",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8",
      "patch": "@@ -1,3 +1,14 @@\n+2020-01-10  George Barrett  <bob@bob131.so>\n+\n+\t* gdb.base/stap-probe.c (relocation_marker): Add dummy variable\n+\tto help in finding the image relocation offset.\n+\t* gdb.base/stap-probe.exp (stap_test): Accept arbitrary compile\n+\toptions in arguments.\n+\t(stap_test_no_debuginfo): Likewise.\n+\t(stap-probe-nosem-noopt-pie, stap-probe-nosem-noopt-nopie): Add\n+\ttest variants.\n+\t(stap_test): Add null semaphore relocation test.\n+\n 2020-01-10  George Barrett  <bob@bob131.so>\n \n \t* gdb.base/stap-probe.c: Rename USE_PROBES to USE_SEMAPHORES."
    },
    {
      "sha": "5cb549498a5abc9a949e573bef600db9dcf451c1",
      "filename": "gdb/testsuite/gdb.base/stap-probe.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8/gdb/testsuite/gdb.base/stap-probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8/gdb/testsuite/gdb.base/stap-probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/stap-probe.c?ref=7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8",
      "patch": "@@ -31,6 +31,8 @@ __extension__ unsigned short test_pstr_semaphore __attribute__ ((unused)) __attr\n __extension__ unsigned short test_ps_semaphore __attribute__ ((unused)) __attribute__ ((section (\".probes\")));\n #else\n \n+int relocation_marker __attribute__ ((unused));\n+\n #define TEST 1\n #define TEST2 1\n "
    },
    {
      "sha": "398bc8936cc8bdabae7763e21100595c266b6770",
      "filename": "gdb/testsuite/gdb.base/stap-probe.exp",
      "status": "modified",
      "additions": 31,
      "deletions": 7,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8/gdb/testsuite/gdb.base/stap-probe.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8/gdb/testsuite/gdb.base/stap-probe.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/stap-probe.exp?ref=7f0ae84c80aae6fe8f7573343fe1ab455d18b5d8",
      "patch": "@@ -18,22 +18,28 @@ standard_testfile\n # Run the tests.  We run the tests two different ways: once with a\n # plain probe, and once with a probe that has an associated semaphore.\n # This returns -1 on failure to compile or start, 0 otherwise.\n-proc stap_test {exec_name {arg \"\"}} {\n+proc stap_test {exec_name {args \"\"}} {\n     global testfile hex srcfile\n \n     if {[prepare_for_testing \"failed to prepare\" ${exec_name} $srcfile \\\n-\t   [concat additional_flags=$arg debug]]} {\n+\t   [concat $args debug]]} {\n \treturn -1\n     }\n \n+    set semaphore_addr_var \"\"\n+    if {[string first \"-DUSE_SEMAPHORES\" $args] == -1} {\n+\tgdb_test_no_output \"set breakpoint always-inserted on\"\n+\tset semaphore_addr_var [get_hexadecimal_valueof \"&relocation_marker\" \"0\"]\n+    }\n+\n     if ![runto_main] {\n \treturn -1\n     }\n \n     gdb_test \"print \\$_probe_argc\" \"No probe at PC $hex\" \\\n \t\"check argument not at probe point\"\n \n-    if {[string first \"-DUSE_SEMAPHORES\" $arg] != -1} {\n+    if {[string first \"-DUSE_SEMAPHORES\" $args] != -1} {\n \tgdb_test \"info probes stap\" \\\n \t    \"test *user *$hex *$hex .*\"\n     } else {\n@@ -47,6 +53,20 @@ proc stap_test {exec_name {arg \"\"}} {\n \tfail \"run to -pstap test:user\"\n     }\n \n+    if {[string first \"-DUSE_SEMAPHORES\" $args] == -1} {\n+\tset relocation_base \\\n+\t   [expr [get_hexadecimal_valueof \"&relocation_marker\" \"0\"] - $semaphore_addr_var]\n+\tif {$relocation_base != 0} {\n+\t   # Checks that GDB doesn't mistakenly relocate and write to null\n+\t   # semaphore addresses.  If it were to relocate a zero-valued\n+\t   # semaphore address and increment the value at that address, we\n+\t   # would expect to see \"\\200ELF\" here instead.\n+\t   gdb_test \"p (*(char*) $relocation_base)@4\" \\\n+\t\t\" = \\\"\\\\\\\\177ELF\\\"\" \\\n+\t\t\"null semaphore relocation\"\n+\t}\n+    }\n+\n     # Test probe arguments.\n     gdb_test \"print \\$_probe_argc\" \" = 1\" \\\n     \"print \\$_probe_argc for probe user\"\n@@ -97,11 +117,11 @@ proc stap_test {exec_name {arg \"\"}} {\n     return 0\n }\n \n-proc stap_test_no_debuginfo {exec_name {arg \"\"}} {\n+proc stap_test_no_debuginfo {exec_name {args \"\"}} {\n     global testfile hex\n \n     if {[prepare_for_testing \"failed to prepare\" ${exec_name} ${testfile}.c \\\n-\t   [concat additional_flags=$arg nodebug optimize=-O2]]} {\n+\t   [concat $args nodebug optimize=-O2]]} {\n \treturn -1\n     }\n \n@@ -168,16 +188,20 @@ with_test_prefix \"without semaphore, not optimized\" {\n \tuntested \"stap probe test failed\"\n \t  return -1\n     }\n+\n+    foreach_with_prefix pie { \"nopie\" \"pie\" } {\n+\tstap_test \"stap-probe-nosem-noopt-$pie\" $pie\n+    }\n }\n \n with_test_prefix \"with semaphore, not optimized\" {\n-    stap_test \"stap-probe-sem-noopt\" \"-DUSE_SEMAPHORES\"\n+    stap_test \"stap-probe-sem-noopt\" additional_flags=-DUSE_SEMAPHORES\n }\n \n with_test_prefix \"without semaphore, optimized\" {\n     stap_test_no_debuginfo \"stap-probe-nosem-opt\"\n }\n \n with_test_prefix \"with semaphore, optimized\" {\n-    stap_test_no_debuginfo \"stap-probe-sem-opt\" \"-DUSE_SEMAPHORES\"\n+    stap_test_no_debuginfo \"stap-probe-sem-opt\" additional_flags=-DUSE_SEMAPHORES\n }"
    }
  ]
}