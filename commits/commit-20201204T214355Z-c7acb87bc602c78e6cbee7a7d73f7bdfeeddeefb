{
  "sha": "c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzdhY2I4N2JjNjAyYzc4ZTZjYmVlN2E3ZDczZjdiZGZlZWRkZWVmYg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-12-04T21:43:55Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-12-04T21:43:55Z"
    },
    "message": "gdb: move displaced stepping types to displaced-stepping.{h,c}\n\nMove displaced-stepping related stuff unchanged to displaced-stepping.h\nand displaced-stepping.c.  This helps make the following patch a bit\nsmaller and easier to read.\n\ngdb/ChangeLog:\n\n\t* Makefile.in (COMMON_SFILES): Add displaced-stepping.c.\n\t* aarch64-tdep.h: Include displaced-stepping.h.\n\t* displaced-stepping.h (struct displaced_step_copy_insn_closure):\n\tMove here.\n\t(displaced_step_copy_insn_closure_up): Move here.\n\t(struct buf_displaced_step_copy_insn_closure): Move here.\n\t(struct displaced_step_inferior_state): Move here.\n\t(debug_displaced): Move here.\n\t(displaced_debug_printf_1): Move here.\n\t(displaced_debug_printf): Move here.\n\t* displaced-stepping.c: New file.\n\t* gdbarch.sh: Include displaced-stepping.h in gdbarch.h.\n\t* gdbarch.h: Re-generate.\n\t* inferior.h: Include displaced-stepping.h.\n\t* infrun.h (debug_displaced): Move to displaced-stepping.h.\n\t(displaced_debug_printf_1): Likewise.\n\t(displaced_debug_printf): Likewise.\n\t(struct displaced_step_copy_insn_closure): Likewise.\n\t(displaced_step_copy_insn_closure_up): Likewise.\n\t(struct buf_displaced_step_copy_insn_closure): Likewise.\n\t(struct displaced_step_inferior_state): Likewise.\n\t* infrun.c (show_debug_displaced): Move to displaced-stepping.c.\n\t(displaced_debug_printf_1): Likewise.\n\t(displaced_step_copy_insn_closure::~displaced_step_copy_insn_closure):\n\tLikewise.\n\t(_initialize_infrun): Don't register \"set/show debug displaced\".\n\nChange-Id: I29935f5959b80425370630a45148fc06cd4227ca",
    "tree": {
      "sha": "7b91a551664c353e4ecb8c0fb048c8bd2d5e977c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7b91a551664c353e4ecb8c0fb048c8bd2d5e977c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "94b24c74e8658826ae8a688c0eb59685a7db03b8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/94b24c74e8658826ae8a688c0eb59685a7db03b8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/94b24c74e8658826ae8a688c0eb59685a7db03b8"
    }
  ],
  "stats": {
    "total": 270,
    "additions": 170,
    "deletions": 100
  },
  "files": [
    {
      "sha": "8512cb449e99efe23ba070241e13b5fd875dfff5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb",
      "patch": "@@ -1,3 +1,32 @@\n+2020-12-04  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* Makefile.in (COMMON_SFILES): Add displaced-stepping.c.\n+\t* aarch64-tdep.h: Include displaced-stepping.h.\n+\t* displaced-stepping.h (struct displaced_step_copy_insn_closure):\n+\tMove here.\n+\t(displaced_step_copy_insn_closure_up): Move here.\n+\t(struct buf_displaced_step_copy_insn_closure): Move here.\n+\t(struct displaced_step_inferior_state): Move here.\n+\t(debug_displaced): Move here.\n+\t(displaced_debug_printf_1): Move here.\n+\t(displaced_debug_printf): Move here.\n+\t* displaced-stepping.c: New file.\n+\t* gdbarch.sh: Include displaced-stepping.h in gdbarch.h.\n+\t* gdbarch.h: Re-generate.\n+\t* inferior.h: Include displaced-stepping.h.\n+\t* infrun.h (debug_displaced): Move to displaced-stepping.h.\n+\t(displaced_debug_printf_1): Likewise.\n+\t(displaced_debug_printf): Likewise.\n+\t(struct displaced_step_copy_insn_closure): Likewise.\n+\t(displaced_step_copy_insn_closure_up): Likewise.\n+\t(struct buf_displaced_step_copy_insn_closure): Likewise.\n+\t(struct displaced_step_inferior_state): Likewise.\n+\t* infrun.c (show_debug_displaced): Move to displaced-stepping.c.\n+\t(displaced_debug_printf_1): Likewise.\n+\t(displaced_step_copy_insn_closure::~displaced_step_copy_insn_closure):\n+\tLikewise.\n+\t(_initialize_infrun): Don't register \"set/show debug displaced\".\n+\n 2020-12-04  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* linux-tdep.c (get_linux_inferior_data): Add inferior"
    },
    {
      "sha": "997c99c30f278546fddb340682e38c9a11f5a767",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb",
      "patch": "@@ -1019,6 +1019,7 @@ COMMON_SFILES = \\\n \tdebuginfod-support.c \\\n \tdictionary.c \\\n \tdisasm.c \\\n+\tdisplaced-stepping.c \\\n \tdummy-frame.c \\\n \tdwarf2/abbrev.c \\\n \tdwarf2/attribute.c \\"
    },
    {
      "sha": "76ff812abc6404c0b576a7ebd50320f56bbb07c2",
      "filename": "gdb/aarch64-tdep.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/aarch64-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/aarch64-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.h?ref=c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb",
      "patch": "@@ -23,6 +23,7 @@\n #define AARCH64_TDEP_H\n \n #include \"arch/aarch64.h\"\n+#include \"displaced-stepping.h\"\n #include \"infrun.h\"\n \n /* Forward declarations.  */"
    },
    {
      "sha": "5ae280fac398206df5f0ad5b3da7650a2ffbe092",
      "filename": "gdb/displaced-stepping.c",
      "status": "added",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/displaced-stepping.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/displaced-stepping.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/displaced-stepping.c?ref=c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb",
      "patch": "@@ -0,0 +1,52 @@\n+/* Displaced stepping related things.\n+\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"displaced-stepping.h\"\n+#include \"cli/cli-cmds.h\"\n+\n+#include \"command.h\"\n+\n+/* Default destructor for displaced_step_copy_insn_closure.  */\n+\n+displaced_step_copy_insn_closure::~displaced_step_copy_insn_closure ()\n+  = default;\n+\n+bool debug_displaced = false;\n+\n+static void\n+show_debug_displaced (struct ui_file *file, int from_tty,\n+\t\t      struct cmd_list_element *c, const char *value)\n+{\n+  fprintf_filtered (file, _(\"Displace stepping debugging is %s.\\n\"), value);\n+}\n+\n+void _initialize_displaced_stepping ();\n+void\n+_initialize_displaced_stepping ()\n+{\n+  add_setshow_boolean_cmd (\"displaced\", class_maintenance,\n+\t\t\t   &debug_displaced, _(\"\\\n+Set displaced stepping debugging.\"), _(\"\\\n+Show displaced stepping debugging.\"), _(\"\\\n+When non-zero, displaced stepping specific debugging is enabled.\"),\n+\t\t\t    NULL,\n+\t\t\t    show_debug_displaced,\n+\t\t\t    &setdebuglist, &showdebuglist);\n+}"
    },
    {
      "sha": "928bfc0ccc97a58a4ca530388d86a68a0d244fa4",
      "filename": "gdb/displaced-stepping.h",
      "status": "modified",
      "additions": 84,
      "deletions": 0,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/displaced-stepping.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/displaced-stepping.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/displaced-stepping.h?ref=c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb",
      "patch": "@@ -20,6 +20,24 @@\n #ifndef DISPLACED_STEPPING_H\n #define DISPLACED_STEPPING_H\n \n+#include \"gdbsupport/byte-vector.h\"\n+\n+struct thread_info;\n+\n+/* True if we are debugging displaced stepping.  */\n+\n+extern bool debug_displaced;\n+\n+/* Print a \"displaced\" debug statement.  */\n+\n+#define displaced_debug_printf(fmt, ...) \\\n+  do \\\n+    { \\\n+      if (debug_displaced) \\\n+\tdebug_prefixed_printf (\"displaced\", __func__, fmt, ##__VA_ARGS__); \\\n+    } \\\n+  while (0)\n+\n enum displaced_step_prepare_status\n {\n   /* A displaced stepping buffer was successfully allocated and prepared.  */\n@@ -44,4 +62,70 @@ enum displaced_step_finish_status\n   DISPLACED_STEP_FINISH_STATUS_NOT_EXECUTED,\n };\n \n+/* Base class for displaced stepping closures (the arch-specific data).  */\n+\n+struct displaced_step_copy_insn_closure\n+{\n+  virtual ~displaced_step_copy_insn_closure () = 0;\n+};\n+\n+using displaced_step_copy_insn_closure_up\n+  = std::unique_ptr<displaced_step_copy_insn_closure>;\n+\n+/* A simple displaced step closure that contains only a byte buffer.  */\n+\n+struct buf_displaced_step_copy_insn_closure : displaced_step_copy_insn_closure\n+{\n+  buf_displaced_step_copy_insn_closure (int buf_size)\n+  : buf (buf_size)\n+  {}\n+\n+  gdb::byte_vector buf;\n+};\n+\n+/* Per-inferior displaced stepping state.  */\n+\n+struct displaced_step_inferior_state\n+{\n+  displaced_step_inferior_state ()\n+  {\n+    reset ();\n+  }\n+\n+  /* Put this object back in its original state.  */\n+  void reset ()\n+  {\n+    failed_before = 0;\n+    step_thread = nullptr;\n+    step_gdbarch = nullptr;\n+    step_closure.reset ();\n+    step_original = 0;\n+    step_copy = 0;\n+    step_saved_copy.clear ();\n+  }\n+\n+  /* True if preparing a displaced step ever failed.  If so, we won't\n+     try displaced stepping for this inferior again.  */\n+  int failed_before;\n+\n+  /* If this is not nullptr, this is the thread carrying out a\n+     displaced single-step in process PID.  This thread's state will\n+     require fixing up once it has completed its step.  */\n+  thread_info *step_thread;\n+\n+  /* The architecture the thread had when we stepped it.  */\n+  gdbarch *step_gdbarch;\n+\n+  /* The closure provided gdbarch_displaced_step_copy_insn, to be used\n+     for post-step cleanup.  */\n+  displaced_step_copy_insn_closure_up step_closure;\n+\n+  /* The address of the original instruction, and the copy we\n+     made.  */\n+  CORE_ADDR step_original, step_copy;\n+\n+  /* Saved contents of copy area.  */\n+  gdb::byte_vector step_saved_copy;\n+};\n+\n #endif /* DISPLACED_STEPPING_H */"
    },
    {
      "sha": "2b6876a1916c5d81bab3b32ef99efb5f9e3d7415",
      "filename": "gdb/gdbarch.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/gdbarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/gdbarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.h?ref=c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb",
      "patch": "@@ -31,6 +31,7 @@\n #include \"gdb_obstack.h\"\n #include \"infrun.h\"\n #include \"osabi.h\"\n+#include \"displaced-stepping.h\"\n \n struct floatformat;\n struct ui_file;"
    },
    {
      "sha": "76ce2ff5efb4f22280a67644f971fb5eda5e9cc1",
      "filename": "gdb/gdbarch.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/gdbarch.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/gdbarch.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.sh?ref=c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb",
      "patch": "@@ -1270,6 +1270,7 @@ cat <<EOF\n #include \"gdb_obstack.h\"\n #include \"infrun.h\"\n #include \"osabi.h\"\n+#include \"displaced-stepping.h\"\n \n struct floatformat;\n struct ui_file;"
    },
    {
      "sha": "c5257ac1e64044acdefdd8f1b2916d4eecee094c",
      "filename": "gdb/inferior.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.h?ref=c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb",
      "patch": "@@ -60,6 +60,7 @@ struct thread_info;\n #include \"gdbthread.h\"\n \n #include \"process-stratum-target.h\"\n+#include \"displaced-stepping.h\"\n \n struct infcall_suspend_state;\n struct infcall_control_state;"
    },
    {
      "sha": "9ac75eff4d302bdcd0913da8fba2b3898d9da848",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 0,
      "deletions": 22,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb",
      "patch": "@@ -153,14 +153,6 @@ static ptid_t previous_inferior_ptid;\n \n static bool detach_fork = true;\n \n-bool debug_displaced = false;\n-static void\n-show_debug_displaced (struct ui_file *file, int from_tty,\n-\t\t      struct cmd_list_element *c, const char *value)\n-{\n-  fprintf_filtered (file, _(\"Displace stepping debugging is %s.\\n\"), value);\n-}\n-\n unsigned int debug_infrun = 0;\n static void\n show_debug_infrun (struct ui_file *file, int from_tty,\n@@ -1460,11 +1452,6 @@ step_over_info_valid_p (void)\n    displaced step operation on it.  See displaced_step_prepare and\n    displaced_step_finish for details.  */\n \n-/* Default destructor for displaced_step_copy_insn_closure.  */\n-\n-displaced_step_copy_insn_closure::~displaced_step_copy_insn_closure ()\n-  = default;\n-\n /* Returns true if any inferior has a thread doing a displaced\n    step.  */\n \n@@ -9297,15 +9284,6 @@ When non-zero, inferior specific debugging is enabled.\"),\n \t\t\t     show_debug_infrun,\n \t\t\t     &setdebuglist, &showdebuglist);\n \n-  add_setshow_boolean_cmd (\"displaced\", class_maintenance,\n-\t\t\t   &debug_displaced, _(\"\\\n-Set displaced stepping debugging.\"), _(\"\\\n-Show displaced stepping debugging.\"), _(\"\\\n-When non-zero, displaced stepping specific debugging is enabled.\"),\n-\t\t\t    NULL,\n-\t\t\t    show_debug_displaced,\n-\t\t\t    &setdebuglist, &showdebuglist);\n-\n   add_setshow_boolean_cmd (\"non-stop\", no_class,\n \t\t\t   &non_stop_1, _(\"\\\n Set whether gdb controls the inferior in non-stop mode.\"), _(\"\\"
    },
    {
      "sha": "c83cb33308335d8576bbbec685e7594d7b9f6f73",
      "filename": "gdb/infrun.h",
      "status": "modified",
      "additions": 0,
      "deletions": 78,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/infrun.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb/gdb/infrun.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.h?ref=c7acb87bc602c78e6cbee7a7d73f7bdfeeddeefb",
      "patch": "@@ -41,19 +41,6 @@ extern unsigned int debug_infrun;\n     } \\\n   while (0)\n \n-/* True if we are debugging displaced stepping.  */\n-extern bool debug_displaced;\n-\n-/* Print a \"displaced\" debug statement.  */\n-\n-#define displaced_debug_printf(fmt, ...) \\\n-  do \\\n-    { \\\n-      if (debug_displaced) \\\n-\tdebug_prefixed_printf (\"displaced\", __func__, fmt, ##__VA_ARGS__); \\\n-    } \\\n-  while (0)\n-\n /* Nonzero if we want to give control to the user when we're notified\n    of shared library events by the dynamic linker.  */\n extern int stop_on_solib_events;\n@@ -280,69 +267,4 @@ extern void all_uis_check_sync_execution_done (void);\n    started or re-started).  */\n extern void all_uis_on_sync_execution_starting (void);\n \n-/* Base class for displaced stepping closures (the arch-specific data).  */\n-\n-struct displaced_step_copy_insn_closure\n-{\n-  virtual ~displaced_step_copy_insn_closure () = 0;\n-};\n-\n-using displaced_step_copy_insn_closure_up\n-  = std::unique_ptr<displaced_step_copy_insn_closure>;\n-\n-/* A simple displaced step closure that contains only a byte buffer.  */\n-\n-struct buf_displaced_step_copy_insn_closure : displaced_step_copy_insn_closure\n-{\n-  buf_displaced_step_copy_insn_closure (int buf_size)\n-  : buf (buf_size)\n-  {}\n-\n-  gdb::byte_vector buf;\n-};\n-\n-/* Per-inferior displaced stepping state.  */\n-struct displaced_step_inferior_state\n-{\n-  displaced_step_inferior_state ()\n-  {\n-    reset ();\n-  }\n-\n-  /* Put this object back in its original state.  */\n-  void reset ()\n-  {\n-    failed_before = 0;\n-    step_thread = nullptr;\n-    step_gdbarch = nullptr;\n-    step_closure.reset ();\n-    step_original = 0;\n-    step_copy = 0;\n-    step_saved_copy.clear ();\n-  }\n-\n-  /* True if preparing a displaced step ever failed.  If so, we won't\n-     try displaced stepping for this inferior again.  */\n-  int failed_before;\n-\n-  /* If this is not nullptr, this is the thread carrying out a\n-     displaced single-step in process PID.  This thread's state will\n-     require fixing up once it has completed its step.  */\n-  thread_info *step_thread;\n-\n-  /* The architecture the thread had when we stepped it.  */\n-  gdbarch *step_gdbarch;\n-\n-  /* The closure provided gdbarch_displaced_step_copy_insn, to be used\n-     for post-step cleanup.  */\n-  displaced_step_copy_insn_closure_up step_closure;\n-\n-  /* The address of the original instruction, and the copy we\n-     made.  */\n-  CORE_ADDR step_original, step_copy;\n-\n-  /* Saved contents of copy area.  */\n-  gdb::byte_vector step_saved_copy;\n-};\n-\n #endif /* INFRUN_H */"
    }
  ]
}