{
  "sha": "9902b327931538037f59f9acbb80fd6097f2777a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTkwMmIzMjc5MzE1MzgwMzdmNTlmOWFjYmI4MGZkNjA5N2YyNzc3YQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-04-02T01:10:09Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-04-02T01:10:09Z"
    },
    "message": "gdb: add type::is_flag_enum / type::set_is_flag_enum\n\nAdd the `is_flag_enum` and `set_is_flag_enum` methods on `struct type`,\nin order to remove the `TYPE_FLAG_ENUM` macro.  In this patch, the macro\nis changed to use the getter, so all the call sites of the macro that\nare used as a setter are changed to use the setter method directly.  The\nnext patch will remove the macro completely.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <is_flag_enum,\n\tset_is_flag_enum>: New methods.\n\t(TYPE_FLAG_ENUM): Use type::is_flag_enum, change all\n\twrite call sites to use type::set_is_flag_enum.\n\nChange-Id: I9c56c91626c8d784947ba94fcb97818526b81d1c",
    "tree": {
      "sha": "98628d3536894ae94ed9ea118c1addb6f770e463",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/98628d3536894ae94ed9ea118c1addb6f770e463"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9902b327931538037f59f9acbb80fd6097f2777a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9902b327931538037f59f9acbb80fd6097f2777a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9902b327931538037f59f9acbb80fd6097f2777a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9902b327931538037f59f9acbb80fd6097f2777a/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3bc440a2c4fcbb3b46b2b07155b1fa401d8ceb22"
    }
  ],
  "stats": {
    "total": 31,
    "additions": 24,
    "deletions": 7
  },
  "files": [
    {
      "sha": "1bd2f138ada4fb9a5ea25cde565359dcf4ebed56",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9902b327931538037f59f9acbb80fd6097f2777a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9902b327931538037f59f9acbb80fd6097f2777a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9902b327931538037f59f9acbb80fd6097f2777a",
      "patch": "@@ -1,3 +1,10 @@\n+2021-04-01  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct type) <is_flag_enum,\n+\tset_is_flag_enum>: New methods.\n+\t(TYPE_FLAG_ENUM): Use type::is_flag_enum, change all\n+\twrite call sites to use type::set_is_flag_enum.\n+\n 2021-04-01  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (TYPE_DECLARED_CLASS): Remove, replace all uses"
    },
    {
      "sha": "49b07d579b554f0705ffe432d9c6f94aa674d591",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9902b327931538037f59f9acbb80fd6097f2777a/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9902b327931538037f59f9acbb80fd6097f2777a/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=9902b327931538037f59f9acbb80fd6097f2777a",
      "patch": "@@ -16677,7 +16677,7 @@ update_enumeration_type_from_children (struct die_info *die,\n     type->set_is_unsigned (true);\n \n   if (flag_enum)\n-    TYPE_FLAG_ENUM (type) = 1;\n+    type->set_is_flag_enum (true);\n }\n \n /* Given a DW_AT_enumeration_type die, set its type.  We do not"
    },
    {
      "sha": "52c175326924489480da8c23208688a4168eb965",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 16,
      "deletions": 6,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9902b327931538037f59f9acbb80fd6097f2777a/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9902b327931538037f59f9acbb80fd6097f2777a/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=9902b327931538037f59f9acbb80fd6097f2777a",
      "patch": "@@ -220,11 +220,7 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n \n #define TYPE_NOTTEXT(t)\t(((t)->instance_flags ()) & TYPE_INSTANCE_FLAG_NOTTEXT)\n \n-/* * True if this type is a \"flag\" enum.  A flag enum is one where all\n-   the values are pairwise disjoint when \"and\"ed together.  This\n-   affects how enum values are printed.  */\n-\n-#define TYPE_FLAG_ENUM(t) (TYPE_MAIN_TYPE (t)->flag_flag_enum)\n+#define TYPE_FLAG_ENUM(t) ((t)->is_flag_enum ())\n \n /* * Constant type.  If this is set, the corresponding type has a\n    const modifier.  */\n@@ -812,7 +808,7 @@ struct main_type\n   /* * True if this is an enum type with disjoint values.  This\n      affects how the enum is printed.  */\n \n-  unsigned int flag_flag_enum : 1;\n+  unsigned int m_flag_flag_enum : 1;\n \n   /* * A discriminant telling us which field of the type_specific\n      union is being used for this type, if any.  */\n@@ -1196,6 +1192,20 @@ struct type\n     this->main_type->m_flag_declared_class = is_declared_class;\n   }\n \n+  /* True if this type is a \"flag\" enum.  A flag enum is one where all\n+     the values are pairwise disjoint when \"and\"ed together.  This\n+     affects how enum values are printed.  */\n+\n+  bool is_flag_enum () const\n+  {\n+    return this->main_type->m_flag_flag_enum;\n+  }\n+\n+  void set_is_flag_enum (bool is_flag_enum)\n+  {\n+    this->main_type->m_flag_flag_enum = is_flag_enum;\n+  }\n+\n   /* * Assuming that THIS is a TYPE_CODE_FIXED_POINT, return a reference\n      to this type's fixed_point_info.  */\n "
    }
  ]
}