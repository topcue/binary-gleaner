{
  "sha": "ecac8d1c14acba1fd20b99c2481d0cab5887e3b7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWNhYzhkMWMxNGFjYmExZmQyMGI5OWMyNDgxZDBjYWI1ODg3ZTNiNw==",
  "commit": {
    "author": {
      "name": "Carl Love",
      "email": "cel@us.ibm.com",
      "date": "2021-04-29T22:19:13Z"
    },
    "committer": {
      "name": "Carl Love",
      "email": "cel@us.ibm.com",
      "date": "2021-06-07T15:41:22Z"
    },
    "message": "Add Power 10 PLT instruction patterns\n\ngdb/ChangeLog:\n\n2021-06-07  Carl Love  <cel@us.ibm.com>\n\n\t* ppc-tdep.h (ppc_insn_prefix_dform): Declare.\n\t* ppc64-tdep.c(insn_md, insn_x, insn_xo): New macros.\n\t(ppc64_plt_pcrel_entry_point, ppc64_pcrel_linkage1_target,\n\tppc64_pcrel_linkage2_target): New functions.\n\t(ppc64_standard_linkage9, ppc64_standard_linkage10,\n\tppc64_standard_linkage11, ppc64_standard_linkage12): New ppc\n\tinstruction patterns.\n\t(ppc64_standard_linkage9, ppc64_standard_linkage10,\n\tppc64_standard_linkage11, ppc64_standard_linkage12): New variables\n\tin define MAX expression.\n\t(ppc64_skip_trampoline_code_1): Handle ppc64_standard_linkage9,\n\tppc64_standard_linkage10, ppc64_standard_linkage11,\n\tppc64_standard_linkage12.\n\t* (ppc_insn_prefix_dform): New function.",
    "tree": {
      "sha": "6ac1ab466300a266982162dc7aa54f33fcc413b9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6ac1ab466300a266982162dc7aa54f33fcc413b9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ecac8d1c14acba1fd20b99c2481d0cab5887e3b7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ecac8d1c14acba1fd20b99c2481d0cab5887e3b7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ecac8d1c14acba1fd20b99c2481d0cab5887e3b7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ecac8d1c14acba1fd20b99c2481d0cab5887e3b7/comments",
  "author": {
    "login": "carlelove",
    "id": 86435705,
    "node_id": "MDQ6VXNlcjg2NDM1NzA1",
    "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/carlelove",
    "html_url": "https://github.com/carlelove",
    "followers_url": "https://api.github.com/users/carlelove/followers",
    "following_url": "https://api.github.com/users/carlelove/following{/other_user}",
    "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions",
    "organizations_url": "https://api.github.com/users/carlelove/orgs",
    "repos_url": "https://api.github.com/users/carlelove/repos",
    "events_url": "https://api.github.com/users/carlelove/events{/privacy}",
    "received_events_url": "https://api.github.com/users/carlelove/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "carlelove",
    "id": 86435705,
    "node_id": "MDQ6VXNlcjg2NDM1NzA1",
    "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/carlelove",
    "html_url": "https://github.com/carlelove",
    "followers_url": "https://api.github.com/users/carlelove/followers",
    "following_url": "https://api.github.com/users/carlelove/following{/other_user}",
    "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions",
    "organizations_url": "https://api.github.com/users/carlelove/orgs",
    "repos_url": "https://api.github.com/users/carlelove/repos",
    "events_url": "https://api.github.com/users/carlelove/events{/privacy}",
    "received_events_url": "https://api.github.com/users/carlelove/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f1854e35d87ac3237e0d7a10224a1eff42e65297",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f1854e35d87ac3237e0d7a10224a1eff42e65297",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f1854e35d87ac3237e0d7a10224a1eff42e65297"
    }
  ],
  "stats": {
    "total": 221,
    "additions": 218,
    "deletions": 3
  },
  "files": [
    {
      "sha": "c1ad3233431afb6c7b26dd3122f52f8f9bbd6d2b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ecac8d1c14acba1fd20b99c2481d0cab5887e3b7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ecac8d1c14acba1fd20b99c2481d0cab5887e3b7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ecac8d1c14acba1fd20b99c2481d0cab5887e3b7",
      "patch": "@@ -1,3 +1,20 @@\n+2021-06-07  Carl Love  <cel@us.ibm.com>\n+\n+\t* ppc-tdep.h (ppc_insn_prefix_dform): Declare.\n+\t* ppc64-tdep.c(insn_md, insn_x, insn_xo): New macros.\n+\t(ppc64_plt_pcrel_entry_point, ppc64_pcrel_linkage1_target,\n+\tppc64_pcrel_linkage2_target): New functions.\n+\t(ppc64_standard_linkage9, ppc64_standard_linkage10,\n+\tppc64_standard_linkage11, ppc64_standard_linkage12): New ppc\n+\tinstruction patterns.\n+\t(ppc64_standard_linkage9, ppc64_standard_linkage10,\n+\tppc64_standard_linkage11, ppc64_standard_linkage12): New variables\n+\tin define MAX expression.\n+\t(ppc64_skip_trampoline_code_1): Handle ppc64_standard_linkage9,\n+\tppc64_standard_linkage10, ppc64_standard_linkage11,\n+\tppc64_standard_linkage12.\n+\t* (ppc_insn_prefix_dform): New function.\n+\n 2021-06-07  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \tPR gdb/27899"
    },
    {
      "sha": "1e0754f769258fa5ba198853c1d14d8fd2df7276",
      "filename": "gdb/ppc-tdep.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ecac8d1c14acba1fd20b99c2481d0cab5887e3b7/gdb/ppc-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ecac8d1c14acba1fd20b99c2481d0cab5887e3b7/gdb/ppc-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-tdep.h?ref=ecac8d1c14acba1fd20b99c2481d0cab5887e3b7",
      "patch": "@@ -426,6 +426,8 @@ extern int ppc_insns_match_pattern (struct frame_info *frame, CORE_ADDR pc,\n extern CORE_ADDR ppc_insn_d_field (unsigned int insn);\n \n extern CORE_ADDR ppc_insn_ds_field (unsigned int insn);\n+extern CORE_ADDR ppc_insn_prefix_dform (unsigned int insn1,\n+\t\t\t\t\tunsigned int insn2);\n \n extern int ppc_process_record (struct gdbarch *gdbarch,\n \t\t\t       struct regcache *regcache, CORE_ADDR addr);"
    },
    {
      "sha": "1dd94f20ab66e5f173c6fe7dcb3ff026ff5bf5c9",
      "filename": "gdb/ppc64-tdep.c",
      "status": "modified",
      "additions": 191,
      "deletions": 3,
      "changes": 194,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ecac8d1c14acba1fd20b99c2481d0cab5887e3b7/gdb/ppc64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ecac8d1c14acba1fd20b99c2481d0cab5887e3b7/gdb/ppc64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc64-tdep.c?ref=ecac8d1c14acba1fd20b99c2481d0cab5887e3b7",
      "patch": "@@ -49,6 +49,38 @@\n    | (((unsigned (spr)) & 0x3e0) << 6)                     \\\n    | (((unsigned (xo)) & 0x3ff) << 1))\n \n+#define prefix(a, b, R, do)\t\t\t\t   \\\n+  (((0x1) << 26)\t\t\t\t\t   \\\n+   | (((unsigned (a)) & 0x3) << 24)\t\t\t   \\\n+   | (((unsigned (b)) & 0x1) << 23)\t\t\t   \\\n+   | (((unsigned (R)) & 0x1) << 20)\t\t\t   \\\n+   | ((unsigned (do)) & 0x3ffff))\n+\n+#define insn_md(opcd, ra, rs, sh, me, rc)\t       \t   \\\n+  ((((unsigned (opcd)) & 0x3f) << 26)\t\t\t   \\\n+   | (((unsigned (rs)) & 0x1f) << 21)\t\t\t   \\\n+   | (((unsigned (ra)) & 0x1f) << 16)\t\t\t   \\\n+   | (((unsigned (sh)) & 0x3e) << 11)\t\t\t   \\\n+   | (((unsigned (me)) & 0x3f) << 25)\t\t\t   \\\n+   | (((unsigned (sh)) & 0x1)  << 1)\t\t\t   \\\n+   | ((unsigned (rc)) & 0x1))\n+\n+#define insn_x(opcd, rt, ra, rb, opc2)\t\t\t   \\\n+  ((((unsigned (opcd)) & 0x3f) << 26)\t\t\t   \\\n+   | (((unsigned (rt)) & 0x1f) << 21)\t\t\t   \\\n+   | (((unsigned (ra)) & 0x1f) << 16)\t\t\t   \\\n+   | (((unsigned (rb)) & 0x3e) << 11)\t\t\t   \\\n+   | (((unsigned (opc2)) & 0x3FF) << 1))\n+\n+#define insn_xo(opcd, rt, ra, rb, oe, rc, opc2)\t\t   \\\n+  ((((unsigned (opcd)) & 0x3f) << 26)\t\t\t   \\\n+   | (((unsigned (rt)) & 0x1f) << 21)\t\t\t   \\\n+   | (((unsigned (ra)) & 0x1f) << 16)\t\t\t   \\\n+   | (((unsigned (rb)) & 0x3e) << 11)\t\t\t   \\\n+   | (((unsigned (oe)) & 0x1) << 10)\t\t\t   \\\n+   | (((unsigned (opc2)) & 0x1FF) << 1)\t\t\t   \\\n+   | (((unsigned (rc)))))\n+\n /* PLT_OFF is the TOC-relative offset of a 64-bit PowerPC PLT entry.\n    Return the function's entry point.  */\n \n@@ -75,6 +107,18 @@ ppc64_plt_entry_point (struct frame_info *frame, CORE_ADDR plt_off)\n   return read_memory_unsigned_integer (tocp + plt_off, 8, byte_order);\n }\n \n+static CORE_ADDR\n+ppc64_plt_pcrel_entry_point (struct frame_info *frame, CORE_ADDR plt_off,\n+\t\t\t     CORE_ADDR pc)\n+{\n+  struct gdbarch *gdbarch = get_frame_arch (frame);\n+  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n+\n+  /* Execution direction doesn't matter, entry is pc + plt_off either way.\n+     The first word of the PLT entry is the function entry point.  */\n+  return read_memory_unsigned_integer (pc + plt_off, 8, byte_order);\n+}\n+\n /* Patterns for the standard linkage functions.  These are built by\n    build_plt_stub in bfd/elf64-ppc.c.  */\n \n@@ -342,6 +386,110 @@ static const struct ppc_insn_pattern ppc64_standard_linkage8[] =\n     { 0, 0, 0 }\n   };\n \n+/* Power 10 ELFv2 PLT call stubs */\n+static const struct ppc_insn_pattern ppc64_standard_linkage9[] =\n+  {\n+    /* std   %r2,0+40(%r1)   <optional> */\n+    { insn_ds (-1, -1, -1, 0, 1), insn_ds (62, 2, 1, 40, 0), 1 },\n+\n+    /* pld r12, <any> */\n+    { prefix (-1, -1, 1, 0), prefix (0, 0, 1, 0), 0 },\n+    { insn_d (-1, -1, -1, 0), insn_d (57, 12, 0, 0), 0 },\n+\n+    /* mtctr r12  */\n+    { insn_xfx (-1, -1, -1, -1), insn_xfx (31, 12, 9, 467), 0 },\n+\n+    /* bctr   */\n+    { (unsigned) -1, 0x4e800420, 0 },\n+\n+    { 0, 0, 0 }\n+  };\n+\n+static const struct ppc_insn_pattern ppc64_standard_linkage10[] =\n+  {\n+    /* std   %r2,0+40(%r1)    <optional> */\n+    { insn_ds (-1, -1, -1, 0, 1), insn_ds (62, 2, 1, 40, 0), 1 },\n+\n+    /* paddi r12,<any> */\n+    { prefix (-1, -1, 1, 0), prefix (2, 0, 1, 0), 0 },\n+    { insn_d (-1, -1, -1, 0), insn_d (14, 12, 0, 0), 0 },\n+\n+    /* mtctr r12  <optional> */\n+    { insn_xfx (-1, -1, -1, -1), insn_xfx (31, 12, 9, 467), 0 },\n+\n+    /* bctr   */\n+    { (unsigned) -1, 0x4e800420, 0 },\n+\n+    { 0, 0, 0 }\n+  };\n+\n+static const struct ppc_insn_pattern ppc64_standard_linkage11[] =\n+  {\n+    /* std   %r2,0+40(%r1)   <optional> */\n+    { insn_ds (-1, -1, -1, 0, 1), insn_ds (62, 2, 1, 40, 0), 1 },\n+\n+    /* li %r11,0     <optional> */\n+    { insn_d (-1, -1, -1, 0), insn_d (14, 11, 0, 0), 1 },\n+\n+    /* sldi  %r11,%r11,34   <eq to rldicr rx,ry,n, 63-n> <optional>  */\n+    { insn_md (-1, -1, -1, 0, 0, 1), insn_md (30, 11, 11, 34, 63-34, 0), 1 },\n+\n+    /* paddi r12, <any> */\n+    { prefix (-1, -1, 1, 0), prefix (2, 0, 1, 0), 0 },\n+    { insn_d (-1, -1, -1, 0), insn_d (14, 12, 0, 0), 0 },\n+\n+    /* ldx   %r12,%r11,%r12  <optional> */\n+    { (unsigned) -1, insn_x (31, 12, 11, 12, 21), 1 },\n+\n+    /* add   %r12,%r11,%r12  <optional> */\n+    { (unsigned) -1, insn_xo (31, 12, 11, 12, 0, 0, 40), 1 },\n+\n+    /* mtctr r12   */\n+    { insn_xfx (-1, -1, -1, -1), insn_xfx (31, 12, 9, 467), 0 },\n+\n+    /* bctr   */ // 13, 14, 15, 16\n+    { (unsigned) -1, 0x4e800420, 0 },\n+\n+    { 0, 0, 0 }\n+  };\n+\n+static const struct ppc_insn_pattern ppc64_standard_linkage12[] =\n+  {\n+    /* std   %r2,0+40(%r1)    <optional>  */\n+    { insn_ds (-1, -1, -1, 0, 1), insn_ds (62, 2, 1, 40, 0), 1 },\n+\n+    /* lis %r11,xxx@ha <equivalent addis rx, 0, val> */\n+    /* addis r12, r2, <any> */\n+    { insn_d (-1, -1, -1, 0), insn_d (15, 12, 2, 0), 0 },\n+\n+    /* ori   %r11,%r11,xxx@l */\n+    { insn_d (-1, -1, -1, 0), insn_d (24, 11, 11, 0), 0 },\n+\n+    /* sldi  %r11,%r11,34 <optional> */\n+    { (unsigned) -1, insn_md (30, 11, 11, 34, 63-34, 0), 1 },\n+\n+    /*paddi r12,<any> */\n+    { prefix (-1, -1, 1, 0), prefix (2, 0, 1, 0), 0 },\n+    { insn_d (-1, -1, -1, 0), insn_d (14, 12, 0, 0), 0 },\n+\n+    /* sldi  %r11,%r11,34 <optional> */\n+    { (unsigned) -1, insn_md (30, 11, 11, 34, 63-34, 0), 1 },\n+\n+    /* ldx   %r12,%r11,%r12 <optional> */\n+    { (unsigned) -1, insn_x (31, 12, 11, 12, 21), 1 },\n+\n+    /* add   %r12,%r11,%r12 <optional> */\n+    { (unsigned) -1, insn_xo (31, 12, 11, 12, 0, 0, 40), 1 },\n+\n+    /* mtctr r12  */\n+    { insn_xfx (-1, -1, -1, -1), insn_xfx (31, 12, 9, 467), 0 },\n+\n+    /* bctr  */ // 17, 18, 19, 20\n+    { (unsigned) -1, 0x4e800420, 0 },\n+\n+    { 0, 0, 0 }\n+  };\n+\n /* When the dynamic linker is doing lazy symbol resolution, the first\n    call to a function in another object will go like this:\n \n@@ -432,6 +580,29 @@ ppc64_standard_linkage4_target (struct frame_info *frame, unsigned int *insn)\n   return ppc64_plt_entry_point (frame, plt_off);\n }\n \n+static CORE_ADDR\n+ppc64_pcrel_linkage1_target (struct frame_info *frame, unsigned int *insn,\n+\t\t\t     CORE_ADDR pc)\n+{\n+  /* insn[0] is for the std instruction.  */\n+  CORE_ADDR plt_off = ppc_insn_prefix_dform (insn[1], insn[2]);\n+\n+  return ppc64_plt_pcrel_entry_point (frame, plt_off, pc);\n+}\n+\n+static CORE_ADDR\n+ppc64_pcrel_linkage2_target (struct frame_info *frame, unsigned int *insn,\n+\t\t\t     CORE_ADDR pc)\n+{\n+  CORE_ADDR plt_off;\n+\n+  /* insn[0] is for the std instruction.\n+     insn[1] is for the  li r11 instruction  */\n+  plt_off = ppc_insn_prefix_dform (insn[2], insn[3]);\n+\n+  return ppc64_plt_pcrel_entry_point (frame, plt_off, pc);\n+}\n+\n \n /* Given that we've begun executing a call trampoline at PC, return\n    the entry point of the function the trampoline will go to.\n@@ -447,10 +618,15 @@ ppc64_skip_trampoline_code_1 (struct frame_info *frame, CORE_ADDR pc)\n \t\t\t\t    ARRAY_SIZE (ppc64_standard_linkage2)),\n \t\t\t       MAX (ARRAY_SIZE (ppc64_standard_linkage3),\n \t\t\t\t    ARRAY_SIZE (ppc64_standard_linkage4))),\n-\t\t\t  MAX (MAX (ARRAY_SIZE (ppc64_standard_linkage5),\n+\t\t      MAX(MAX (MAX (ARRAY_SIZE (ppc64_standard_linkage5),\n \t\t\t\t    ARRAY_SIZE (ppc64_standard_linkage6)),\n \t\t\t       MAX (ARRAY_SIZE (ppc64_standard_linkage7),\n-\t\t\t\t    ARRAY_SIZE (ppc64_standard_linkage8))))\n+\t\t\t\t    ARRAY_SIZE (ppc64_standard_linkage8))),\n+\t\t          MAX (MAX (ARRAY_SIZE (ppc64_standard_linkage9),\n+\t\t\t\t    ARRAY_SIZE (ppc64_standard_linkage10)),\n+\t\t               MAX (ARRAY_SIZE (ppc64_standard_linkage11),\n+\t\t\t\t    ARRAY_SIZE (ppc64_standard_linkage12)))))\n+\n \t\t     - 1];\n   CORE_ADDR target;\n   int scan_limit, i;\n@@ -463,7 +639,19 @@ ppc64_skip_trampoline_code_1 (struct frame_info *frame, CORE_ADDR pc)\n \n   for (i = 0; i < scan_limit; i++)\n     {\n-      if (i < ARRAY_SIZE (ppc64_standard_linkage8) - 1\n+      if (i < ARRAY_SIZE (ppc64_standard_linkage12) - 1\n+\t  && ppc_insns_match_pattern (frame, pc, ppc64_standard_linkage12, insns))\n+\tpc = ppc64_pcrel_linkage1_target (frame, insns, pc);\n+      else if (i < ARRAY_SIZE (ppc64_standard_linkage11) - 1\n+\t  && ppc_insns_match_pattern (frame, pc, ppc64_standard_linkage11, insns))\n+\tpc = ppc64_pcrel_linkage2_target (frame, insns, pc);\n+      else if (i < ARRAY_SIZE (ppc64_standard_linkage10) - 1\n+\t  && ppc_insns_match_pattern (frame, pc, ppc64_standard_linkage10, insns))\n+\tpc = ppc64_pcrel_linkage1_target (frame, insns, pc);\n+      else if (i < ARRAY_SIZE (ppc64_standard_linkage9) - 1\n+\t  && ppc_insns_match_pattern (frame, pc, ppc64_standard_linkage9, insns))\n+\tpc = ppc64_pcrel_linkage1_target (frame, insns, pc);\n+      else if (i < ARRAY_SIZE (ppc64_standard_linkage8) - 1\n \t  && ppc_insns_match_pattern (frame, pc, ppc64_standard_linkage8, insns))\n \tpc = ppc64_standard_linkage4_target (frame, insns);\n       else if (i < ARRAY_SIZE (ppc64_standard_linkage7) - 1"
    },
    {
      "sha": "5bcf5fca2c3bb402d3a5b8e35c4c17679815518f",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ecac8d1c14acba1fd20b99c2481d0cab5887e3b7/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ecac8d1c14acba1fd20b99c2481d0cab5887e3b7/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=ecac8d1c14acba1fd20b99c2481d0cab5887e3b7",
      "patch": "@@ -7371,6 +7371,14 @@ ppc_insn_ds_field (unsigned int insn)\n   return ((((CORE_ADDR) insn & 0xfffc) ^ 0x8000) - 0x8000);\n }\n \n+CORE_ADDR\n+ppc_insn_prefix_dform (unsigned int insn1, unsigned int insn2)\n+{\n+  /* result is 34-bits  */\n+  return (CORE_ADDR) ((((insn1 & 0x3ffff) ^ 0x20000) - 0x20000) << 16)\n+    | (CORE_ADDR)(insn2 & 0xffff);\n+}\n+\n /* Initialization code.  */\n \n void _initialize_rs6000_tdep ();"
    }
  ]
}