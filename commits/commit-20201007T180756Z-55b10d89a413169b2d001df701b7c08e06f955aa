{
  "sha": "55b10d89a413169b2d001df701b7c08e06f955aa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTViMTBkODlhNDEzMTY5YjJkMDAxZGY3MDFiN2MwOGUwNmY5NTVhYQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-10-07T18:07:55Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-10-07T18:07:56Z"
    },
    "message": "Use simple_search_memory in gdbserver\n\nThis replaces gdbserver's memory-searching function with\nsimple_search_memory.\n\ngdbserver/ChangeLog\n2020-10-07  Tom Tromey  <tromey@adacore.com>\n\n\t* server.cc (handle_search_memory_1): Remove.\n\t(handle_search_memory): Use simple_search_memory.",
    "tree": {
      "sha": "9c4b9aea97598580cf51a011768de57c829e92c6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9c4b9aea97598580cf51a011768de57c829e92c6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/55b10d89a413169b2d001df701b7c08e06f955aa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/55b10d89a413169b2d001df701b7c08e06f955aa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/55b10d89a413169b2d001df701b7c08e06f955aa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/55b10d89a413169b2d001df701b7c08e06f955aa/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4a72de73660810536e9bb416d41dc8a6128f91da",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a72de73660810536e9bb416d41dc8a6128f91da",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4a72de73660810536e9bb416d41dc8a6128f91da"
    }
  ],
  "stats": {
    "total": 118,
    "additions": 11,
    "deletions": 107
  },
  "files": [
    {
      "sha": "a341693776cd641723af5194140371a7536e3997",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55b10d89a413169b2d001df701b7c08e06f955aa/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55b10d89a413169b2d001df701b7c08e06f955aa/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=55b10d89a413169b2d001df701b7c08e06f955aa",
      "patch": "@@ -1,3 +1,8 @@\n+2020-10-07  Tom Tromey  <tromey@adacore.com>\n+\n+\t* server.cc (handle_search_memory_1): Remove.\n+\t(handle_search_memory): Use simple_search_memory.\n+\n 2020-10-07  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* Makefile.in (COMPILE): Add CXXFLAGS."
    },
    {
      "sha": "86c9a6f22b811cb268516ccc230289da931574ab",
      "filename": "gdbserver/server.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 107,
      "changes": 113,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55b10d89a413169b2d001df701b7c08e06f955aa/gdbserver/server.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55b10d89a413169b2d001df701b7c08e06f955aa/gdbserver/server.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/server.cc?ref=55b10d89a413169b2d001df701b7c08e06f955aa",
      "patch": "@@ -49,6 +49,7 @@\n #include \"gdbsupport/scope-exit.h\"\n #include \"gdbsupport/gdb_select.h\"\n #include \"gdbsupport/scoped_restore.h\"\n+#include \"gdbsupport/search.h\"\n \n #define require_running_or_return(BUF)\t\t\\\n   if (!target_running ())\t\t\t\\\n@@ -1040,89 +1041,6 @@ gdb_write_memory (CORE_ADDR memaddr, const unsigned char *myaddr, int len)\n     }\n }\n \n-/* Subroutine of handle_search_memory to simplify it.  */\n-\n-static int\n-handle_search_memory_1 (CORE_ADDR start_addr, CORE_ADDR search_space_len,\n-\t\t\tgdb_byte *pattern, unsigned pattern_len,\n-\t\t\tgdb_byte *search_buf,\n-\t\t\tunsigned chunk_size, unsigned search_buf_size,\n-\t\t\tCORE_ADDR *found_addrp)\n-{\n-  /* Prime the search buffer.  */\n-\n-  if (gdb_read_memory (start_addr, search_buf, search_buf_size)\n-      != search_buf_size)\n-    {\n-      warning (\"Unable to access %ld bytes of target \"\n-\t       \"memory at 0x%lx, halting search.\",\n-\t       (long) search_buf_size, (long) start_addr);\n-      return -1;\n-    }\n-\n-  /* Perform the search.\n-\n-     The loop is kept simple by allocating [N + pattern-length - 1] bytes.\n-     When we've scanned N bytes we copy the trailing bytes to the start and\n-     read in another N bytes.  */\n-\n-  while (search_space_len >= pattern_len)\n-    {\n-      gdb_byte *found_ptr;\n-      unsigned nr_search_bytes = (search_space_len < search_buf_size\n-\t\t\t\t  ? search_space_len\n-\t\t\t\t  : search_buf_size);\n-\n-      found_ptr = (gdb_byte *) memmem (search_buf, nr_search_bytes, pattern,\n-\t\t\t\t       pattern_len);\n-\n-      if (found_ptr != NULL)\n-\t{\n-\t  CORE_ADDR found_addr = start_addr + (found_ptr - search_buf);\n-\t  *found_addrp = found_addr;\n-\t  return 1;\n-\t}\n-\n-      /* Not found in this chunk, skip to next chunk.  */\n-\n-      /* Don't let search_space_len wrap here, it's unsigned.  */\n-      if (search_space_len >= chunk_size)\n-\tsearch_space_len -= chunk_size;\n-      else\n-\tsearch_space_len = 0;\n-\n-      if (search_space_len >= pattern_len)\n-\t{\n-\t  unsigned keep_len = search_buf_size - chunk_size;\n-\t  CORE_ADDR read_addr = start_addr + chunk_size + keep_len;\n-\t  int nr_to_read;\n-\n-\t  /* Copy the trailing part of the previous iteration to the front\n-\t     of the buffer for the next iteration.  */\n-\t  memcpy (search_buf, search_buf + chunk_size, keep_len);\n-\n-\t  nr_to_read = (search_space_len - keep_len < chunk_size\n-\t\t\t? search_space_len - keep_len\n-\t\t\t: chunk_size);\n-\n-\t  if (gdb_read_memory (read_addr, search_buf + keep_len,\n-\t\t\t       nr_to_read) != nr_to_read)\n-\t    {\n-\t      warning (\"Unable to access %ld bytes of target memory \"\n-\t\t       \"at 0x%lx, halting search.\",\n-\t\t       (long) nr_to_read, (long) read_addr);\n-\t      return -1;\n-\t    }\n-\n-\t  start_addr += chunk_size;\n-\t}\n-    }\n-\n-  /* Not found.  */\n-\n-  return 0;\n-}\n-\n /* Handle qSearch:memory packets.  */\n \n static void\n@@ -1132,12 +1050,6 @@ handle_search_memory (char *own_buf, int packet_len)\n   CORE_ADDR search_space_len;\n   gdb_byte *pattern;\n   unsigned int pattern_len;\n-  /* NOTE: also defined in find.c testcase.  */\n-#define SEARCH_CHUNK_SIZE 16000\n-  const unsigned chunk_size = SEARCH_CHUNK_SIZE;\n-  /* Buffer to hold memory contents for searching.  */\n-  gdb_byte *search_buf;\n-  unsigned search_buf_size;\n   int found;\n   CORE_ADDR found_addr;\n   int cmd_name_len = sizeof (\"qSearch:memory:\") - 1;\n@@ -1160,25 +1072,13 @@ handle_search_memory (char *own_buf, int packet_len)\n       return;\n     }\n \n-  search_buf_size = chunk_size + pattern_len - 1;\n-\n-  /* No point in trying to allocate a buffer larger than the search space.  */\n-  if (search_space_len < search_buf_size)\n-    search_buf_size = search_space_len;\n-\n-  search_buf = (gdb_byte *) malloc (search_buf_size);\n-  if (search_buf == NULL)\n+  auto read_memory = [] (CORE_ADDR addr, gdb_byte *result, size_t len)\n     {\n-      free (pattern);\n-      error (\"Unable to allocate memory to perform the search\");\n-      strcpy (own_buf, \"E00\");\n-      return;\n-    }\n+      return gdb_read_memory (addr, result, len) == len;\n+    };\n \n-  found = handle_search_memory_1 (start_addr, search_space_len,\n-\t\t\t\t  pattern, pattern_len,\n-\t\t\t\t  search_buf, chunk_size, search_buf_size,\n-\t\t\t\t  &found_addr);\n+  found = simple_search_memory (read_memory, start_addr, search_space_len,\n+\t\t\t\tpattern, pattern_len, &found_addr);\n \n   if (found > 0)\n     sprintf (own_buf, \"1,%lx\", (long) found_addr);\n@@ -1187,7 +1087,6 @@ handle_search_memory (char *own_buf, int packet_len)\n   else\n     strcpy (own_buf, \"E00\");\n \n-  free (search_buf);\n   free (pattern);\n }\n "
    }
  ]
}