{
  "sha": "7e30b1ebbf2fcf5e6bcfc3a7791d9a52614dcc43",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2UzMGIxZWJiZjJmY2Y1ZTZiY2ZjM2E3NzkxZDlhNTI2MTRkY2M0Mw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-09-15T11:25:02Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-09-15T11:33:47Z"
    },
    "message": "PR26610, ARM's \"VFPv3 vldr to vmov\" gas testcase fail\n\nI removed a few too many parentheses in git commit 7af677524e2.  This\npatch fixes that problem, rewriting the expression so it won't happen\nagain.  The patch also avoids more UB with shifts of signed values.\n\n\tPR 26610\n\t* config/tc-arm.c (move_or_literal_pool): Correct extraction of\n\tbignum.  Use unsigned \"v\"\n\t(is_double_a_single): Make \"v\" and \"mantissa\" unsigned.  Formatting.\n\t(double_to_single): Likewise.",
    "tree": {
      "sha": "1d3a612bc1bf257438e7629fe6e5c925efa8befc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1d3a612bc1bf257438e7629fe6e5c925efa8befc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7e30b1ebbf2fcf5e6bcfc3a7791d9a52614dcc43",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7e30b1ebbf2fcf5e6bcfc3a7791d9a52614dcc43",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7e30b1ebbf2fcf5e6bcfc3a7791d9a52614dcc43",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7e30b1ebbf2fcf5e6bcfc3a7791d9a52614dcc43/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5b3eb5eda8ce658611c923dc69704b6f0cddbd2e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b3eb5eda8ce658611c923dc69704b6f0cddbd2e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5b3eb5eda8ce658611c923dc69704b6f0cddbd2e"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 28,
    "deletions": 19
  },
  "files": [
    {
      "sha": "4082e8a0a095ab4562f782fb12ccf3d8eb0aa877",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e30b1ebbf2fcf5e6bcfc3a7791d9a52614dcc43/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e30b1ebbf2fcf5e6bcfc3a7791d9a52614dcc43/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=7e30b1ebbf2fcf5e6bcfc3a7791d9a52614dcc43",
      "patch": "@@ -1,3 +1,11 @@\n+2020-09-15  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 26610\n+\t* config/tc-arm.c (move_or_literal_pool): Correct extraction of\n+\tbignum.  Use unsigned \"v\"\n+\t(is_double_a_single): Make \"v\" and \"mantissa\" unsigned.  Formatting.\n+\t(double_to_single): Likewise.\n+\n 2020-09-15  Nick Clifton  <nickc@redhat.com>\n \n \t* read.c (s_nop): Preserve the input_line_pointer around the call"
    },
    {
      "sha": "32feaa1ca094d4bf92dc710840b3996d9a43ceda",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 20,
      "deletions": 19,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e30b1ebbf2fcf5e6bcfc3a7791d9a52614dcc43/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e30b1ebbf2fcf5e6bcfc3a7791d9a52614dcc43/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=7e30b1ebbf2fcf5e6bcfc3a7791d9a52614dcc43",
      "patch": "@@ -8757,25 +8757,25 @@ neon_cmode_for_move_imm (unsigned immlo, unsigned immhi, int float_p,\n    to single precision without loss of accuracy.  */\n \n static bfd_boolean\n-is_double_a_single (bfd_int64_t v)\n+is_double_a_single (bfd_uint64_t v)\n {\n-  int exp = (int)((v >> 52) & 0x7FF);\n-  bfd_int64_t mantissa = (v & (bfd_int64_t)0xFFFFFFFFFFFFFULL);\n+  int exp = (v >> 52) & 0x7FF;\n+  bfd_uint64_t mantissa = v & 0xFFFFFFFFFFFFFULL;\n \n-  return (exp == 0 || exp == 0x7FF\n-\t  || (exp >= 1023 - 126 && exp <= 1023 + 127))\n-    && (mantissa & 0x1FFFFFFFl) == 0;\n+  return ((exp == 0 || exp == 0x7FF\n+\t   || (exp >= 1023 - 126 && exp <= 1023 + 127))\n+\t  && (mantissa & 0x1FFFFFFFL) == 0);\n }\n \n /* Returns a double precision value casted to single precision\n    (ignoring the least significant bits in exponent and mantissa).  */\n \n static int\n-double_to_single (bfd_int64_t v)\n+double_to_single (bfd_uint64_t v)\n {\n   unsigned int sign = (v >> 63) & 1;\n   int exp = (v >> 52) & 0x7FF;\n-  bfd_int64_t mantissa = (v & (bfd_int64_t) 0xFFFFFFFFFFFFFULL);\n+  bfd_uint64_t mantissa = v & 0xFFFFFFFFFFFFFULL;\n \n   if (exp == 0x7FF)\n     exp = 0xFF;\n@@ -8848,9 +8848,9 @@ move_or_literal_pool (int i, enum lit_type t, bfd_boolean mode_3)\n       || inst.relocs[0].exp.X_op == O_big)\n     {\n #if defined BFD_HOST_64_BIT\n-      bfd_int64_t v;\n+      bfd_uint64_t v;\n #else\n-      offsetT v;\n+      valueT v;\n #endif\n       if (inst.relocs[0].exp.X_op == O_big)\n \t{\n@@ -8867,16 +8867,17 @@ move_or_literal_pool (int i, enum lit_type t, bfd_boolean mode_3)\n \t    l = generic_bignum;\n \n #if defined BFD_HOST_64_BIT\n-\t  v = ((((bfd_uint64_t) l[3] & LITTLENUM_MASK)\n-\t\t<< LITTLENUM_NUMBER_OF_BITS)\n-\t       | (((bfd_int64_t) l[2] & LITTLENUM_MASK)\n-\t\t  << LITTLENUM_NUMBER_OF_BITS)\n-\t       | (((bfd_uint64_t) l[1] & LITTLENUM_MASK)\n-\t\t  << LITTLENUM_NUMBER_OF_BITS)\n-\t       | (l[0] & LITTLENUM_MASK));\n+\t  v = l[3] & LITTLENUM_MASK;\n+\t  v <<= LITTLENUM_NUMBER_OF_BITS;\n+\t  v |= l[2] & LITTLENUM_MASK;\n+\t  v <<= LITTLENUM_NUMBER_OF_BITS;\n+\t  v |= l[1] & LITTLENUM_MASK;\n+\t  v <<= LITTLENUM_NUMBER_OF_BITS;\n+\t  v |= l[0] & LITTLENUM_MASK;\n #else\n-\t  v = ((((valueT) l[1] & LITTLENUM_MASK) << LITTLENUM_NUMBER_OF_BITS)\n-\t       | (l[0] & LITTLENUM_MASK));\n+\t  v = l[1] & LITTLENUM_MASK;\n+\t  v <<= LITTLENUM_NUMBER_OF_BITS;\n+\t  v |= l[0] & LITTLENUM_MASK;\n #endif\n \t}\n       else"
    }
  ]
}