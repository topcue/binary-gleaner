{
  "sha": "01a4d0822025084609380fb989d43bda0667db72",
  "node_id": "C_kwDOANOeidoAKDAxYTRkMDgyMjAyNTA4NDYwOTM4MGZiOTg5ZDQzYmRhMDY2N2RiNzI",
  "commit": {
    "author": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2021-11-17T20:02:06Z"
    },
    "committer": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2021-11-17T20:02:24Z"
    },
    "message": "aarch64: [SME] Add LD1x, ST1x, LDR and STR instructions\n\nThis patch is adding new loads and stores defined by SME instructions.\n\ngas/ChangeLog:\n\n\t* config/tc-aarch64.c (parse_sme_address): New parser.\n\t(parse_sme_za_hv_tiles_operand_with_braces): New parser.\n\t(parse_sme_za_array): New parser.\n\t(output_operand_error_record): Print error details if\n\tpresent.\n\t(parse_operands): Support new operands.\n\t* testsuite/gas/aarch64/sme-5-illegal.d: New test.\n\t* testsuite/gas/aarch64/sme-5-illegal.l: New test.\n\t* testsuite/gas/aarch64/sme-5-illegal.s: New test.\n\t* testsuite/gas/aarch64/sme-5.d: New test.\n\t* testsuite/gas/aarch64/sme-5.s: New test.\n\t* testsuite/gas/aarch64/sme-6-illegal.d: New test.\n\t* testsuite/gas/aarch64/sme-6-illegal.l: New test.\n\t* testsuite/gas/aarch64/sme-6-illegal.s: New test.\n\t* testsuite/gas/aarch64/sme-6.d: New test.\n\t* testsuite/gas/aarch64/sme-6.s: New test.\n\t* testsuite/gas/aarch64/sme-7-illegal.d: New test.\n\t* testsuite/gas/aarch64/sme-7-illegal.l: New test.\n\t* testsuite/gas/aarch64/sme-7-illegal.s: New test.\n\t* testsuite/gas/aarch64/sme-7.d: New test.\n\t* testsuite/gas/aarch64/sme-7.s: New test.\n\ninclude/ChangeLog:\n\n\t* opcode/aarch64.h (enum aarch64_opnd): New operands.\n\t(enum aarch64_insn_class): Added sme_ldr and sme_str.\n\t(AARCH64_OPDE_UNTIED_IMMS): New operand error kind.\n\nopcodes/ChangeLog:\n\n\t* aarch64-asm.c (aarch64_ins_sme_za_hv_tiles): New inserter.\n\t(aarch64_ins_sme_za_list): New inserter.\n\t(aarch64_ins_sme_za_array): New inserter.\n\t(aarch64_ins_sme_addr_ri_u4xvl): New inserter.\n\t* aarch64-asm.h (AARCH64_DECL_OPD_INSERTER): Added\n\tins_sme_za_list, ins_sme_za_array and ins_sme_addr_ri_u4xvl.\n\t* aarch64-dis.c (aarch64_ext_sme_za_hv_tiles): New extractor.\n\t(aarch64_ext_sme_za_list): New extractor.\n\t(aarch64_ext_sme_za_array): New extractor.\n\t(aarch64_ext_sme_addr_ri_u4xvl): New extractor.\n\t* aarch64-dis.h (AARCH64_DECL_OPD_EXTRACTOR): Added\n\text_sme_za_list, ext_sme_za_array and ext_sme_addr_ri_u4xvl.\n\t* aarch64-opc.c (operand_general_constraint_met_p):\n\t(aarch64_match_operands_constraint): Handle sme_ldr, sme_str\n\tand sme_misc.\n\t(aarch64_print_operand): New operands supported.\n\t* aarch64-tbl.h (OP_SVE_QUU): New qualifier.\n\t(OP_SVE_QZU): New qualifier.\n\taarch64-asm-2.c: Regenerate.\n\taarch64-dis-2.c: Regenerate.\n\taarch64-opc-2.c: Regenerate.",
    "tree": {
      "sha": "5c1888e350164f67afae5b11ab70b82fa4a353bf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5c1888e350164f67afae5b11ab70b82fa4a353bf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/01a4d0822025084609380fb989d43bda0667db72",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/01a4d0822025084609380fb989d43bda0667db72",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/01a4d0822025084609380fb989d43bda0667db72",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/01a4d0822025084609380fb989d43bda0667db72/comments",
  "author": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1cad938de57a1577e5fe4b4afcabe889a8b9b9d7"
    }
  ],
  "stats": {
    "total": 1662,
    "additions": 1417,
    "deletions": 245
  },
  "files": [
    {
      "sha": "d45b90394cfc79dbdeb5d2caece2fe57a9e23635",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 107,
      "deletions": 8,
      "changes": 115,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -4460,6 +4460,38 @@ parse_sme_za_hv_tiles_operand (char **str,\n   return regno;\n }\n \n+\n+static int\n+parse_sme_za_hv_tiles_operand_with_braces (char **str,\n+                                           enum sme_hv_slice *slice_indicator,\n+                                           int *vector_select_register,\n+                                           int *imm,\n+                                           aarch64_opnd_qualifier_t *qualifier)\n+{\n+  int regno;\n+\n+  if (!skip_past_char (str, '{'))\n+    {\n+      set_syntax_error (_(\"expected '{'\"));\n+      return PARSE_FAIL;\n+    }\n+\n+  regno = parse_sme_za_hv_tiles_operand (str, slice_indicator,\n+                                         vector_select_register, imm,\n+                                         qualifier);\n+\n+  if (regno == PARSE_FAIL)\n+    return PARSE_FAIL;\n+\n+  if (!skip_past_char (str, '}'))\n+    {\n+      set_syntax_error (_(\"expected '}'\"));\n+      return PARSE_FAIL;\n+    }\n+\n+  return regno;\n+}\n+\n /* Parse list of up to eight 64-bit element tile names separated by commas in\n    SME's ZERO instruction:\n \n@@ -4558,6 +4590,45 @@ parse_sme_list_of_64bit_tiles (char **str)\n   return regno;\n }\n \n+/* Parse ZA array operand used in e.g. STR and LDR instruction.\n+   Operand format:\n+\n+   ZA[<Wv>, <imm>]\n+   ZA[<Wv>, #<imm>]\n+\n+   Function returns <Wv> or PARSE_FAIL.\n+*/\n+static int\n+parse_sme_za_array (char **str, int *imm)\n+{\n+  char *p, *q;\n+  int regno;\n+  int64_t imm_value;\n+\n+  p = q = *str;\n+  while (ISALPHA (*q))\n+    q++;\n+\n+  if ((q - p != 2) || strncasecmp (\"za\", p, q - p) != 0)\n+    {\n+      set_syntax_error (_(\"expected ZA array\"));\n+      return PARSE_FAIL;\n+    }\n+\n+  if (! parse_sme_za_hv_tiles_operand_index (&q, &regno, &imm_value))\n+    return PARSE_FAIL;\n+\n+  if (imm_value < 0 || imm_value > 15)\n+    {\n+      set_syntax_error (_(\"offset out of range\"));\n+      return PARSE_FAIL;\n+    }\n+\n+  *imm = imm_value;\n+  *str = q;\n+  return regno;\n+}\n+\n /* Parse a system register or a PSTATE field name for an MSR/MRS instruction.\n    Returns the encoding for the option, or PARSE_FAIL.\n \n@@ -5364,9 +5435,15 @@ output_operand_error_record (const operand_error_record *record, char *str)\n \t}\n       break;\n \n+    case AARCH64_OPDE_UNTIED_IMMS:\n+      handler (_(\"operand %d must have the same immediate value \"\n+                 \"as operand 1 -- `%s'\"),\n+               detail->index + 1, str);\n+      break;\n+\n     case AARCH64_OPDE_UNTIED_OPERAND:\n       handler (_(\"operand %d must be the same register as operand 1 -- `%s'\"),\n-\t       detail->index + 1, str);\n+               detail->index + 1, str);\n       break;\n \n     case AARCH64_OPDE_OUT_OF_RANGE:\n@@ -6958,6 +7035,7 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \tcase AARCH64_OPND_SVE_ADDR_RI_S4x16:\n \tcase AARCH64_OPND_SVE_ADDR_RI_S4x32:\n \tcase AARCH64_OPND_SVE_ADDR_RI_S4xVL:\n+\tcase AARCH64_OPND_SME_ADDR_RI_U4xVL:\n \tcase AARCH64_OPND_SVE_ADDR_RI_S4x2xVL:\n \tcase AARCH64_OPND_SVE_ADDR_RI_S4x3xVL:\n \tcase AARCH64_OPND_SVE_ADDR_RI_S4x4xVL:\n@@ -7013,11 +7091,12 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \t      goto failure;\n \t    }\n \t  goto regoff_addr;\n-\t  \n+\n \tcase AARCH64_OPND_SVE_ADDR_RR:\n \tcase AARCH64_OPND_SVE_ADDR_RR_LSL1:\n \tcase AARCH64_OPND_SVE_ADDR_RR_LSL2:\n \tcase AARCH64_OPND_SVE_ADDR_RR_LSL3:\n+\tcase AARCH64_OPND_SVE_ADDR_RR_LSL4:\n \tcase AARCH64_OPND_SVE_ADDR_RX:\n \tcase AARCH64_OPND_SVE_ADDR_RX_LSL1:\n \tcase AARCH64_OPND_SVE_ADDR_RX_LSL2:\n@@ -7273,20 +7352,29 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \n \tcase AARCH64_OPND_SME_ZA_HV_idx_src:\n \tcase AARCH64_OPND_SME_ZA_HV_idx_dest:\n+\tcase AARCH64_OPND_SME_ZA_HV_idx_ldstr:\n \t  {\n-\t    enum sme_hv_slice vector_indicator;\n+\t    enum sme_hv_slice slice_indicator;\n \t    int vector_select_register;\n \t    int imm;\n-\t    val = parse_sme_za_hv_tiles_operand (&str, &vector_indicator,\n-\t                                         &vector_select_register,\n-\t                                         &imm,\n-\t                                         &qualifier);\n+\n+\t    if (operands[i] == AARCH64_OPND_SME_ZA_HV_idx_ldstr)\n+\t      val = parse_sme_za_hv_tiles_operand_with_braces (&str,\n+\t                                                       &slice_indicator,\n+\t                                                       &vector_select_register,\n+\t                                                       &imm,\n+\t                                                       &qualifier);\n+\t    else\n+\t      val = parse_sme_za_hv_tiles_operand (&str, &slice_indicator,\n+\t                                           &vector_select_register,\n+\t                                           &imm,\n+\t                                           &qualifier);\n \t    if (val == PARSE_FAIL)\n \t      goto failure;\n \t    info->za_tile_vector.regno = val;\n \t    info->za_tile_vector.index.regno = vector_select_register;\n \t    info->za_tile_vector.index.imm = imm;\n-\t    info->za_tile_vector.v = vector_indicator;\n+\t    info->za_tile_vector.v = slice_indicator;\n \t    info->qualifier = qualifier;\n \t    break;\n \t  }\n@@ -7298,6 +7386,17 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \t    info->imm.value = val;\n \t    break;\n \n+\t  case AARCH64_OPND_SME_ZA_array:\n+\t    {\n+\t      int imm;\n+\t      val = parse_sme_za_array (&str, &imm);\n+\t      if (val == PARSE_FAIL)\n+\t        goto failure;\n+\t      info->za_tile_vector.index.regno = val;\n+\t      info->za_tile_vector.index.imm = imm;\n+\t      break;\n+\t    }\n+\n \tdefault:\n \t  as_fatal (_(\"unhandled operand code %d\"), operands[i]);\n \t}"
    },
    {
      "sha": "0513dc0a3fbff1d02aaf55d624c0a3b75b8eac0f",
      "filename": "gas/testsuite/gas/aarch64/sme-5-illegal.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-5-illegal.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-5-illegal.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-5-illegal.d?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -0,0 +1,3 @@\n+#as: -march=armv8-a+sme\n+#source: sme-5-illegal.s\n+#error_output: sme-5-illegal.l"
    },
    {
      "sha": "c2f8bc92dd86169f53aac54ca5d100be96e8d716",
      "filename": "gas/testsuite/gas/aarch64/sme-5-illegal.l",
      "status": "added",
      "additions": 51,
      "deletions": 0,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-5-illegal.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-5-illegal.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-5-illegal.l?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -0,0 +1,51 @@\n+[^:]*: Assembler messages:\n+[^:]*:[0-9]+: Error: expected vector select register W12-W15 at operand 1 -- `ld1b {za0h.b\\[w11,0\\]},p0/z,\\[x0\\]'\n+[^:]*:[0-9]+: Error: expected vector select register W12-W15 at operand 1 -- `ld1h {za0h.h\\[w16,0\\]},p0/z,\\[x0\\]'\n+[^:]*:[0-9]+: Error: invalid addressing mode at operand 3 -- `ld1h {za0v.h\\[w12,0\\]},p0/z,\\[x0,x0,lsl#3\\]'\n+[^:]*:[0-9]+: Error: '\\]' expected at operand 3 -- `ld1w {za3v.s\\[w15,3\\]},p7/z,\\[sp,lsl#2\\]'\n+[^:]*:[0-9]+: Error: invalid addressing mode at operand 3 -- `ld1d {za0h.d\\[w12,0\\]},p0/z,\\[sp,x0,lsl#12\\]'\n+[^:]*:[0-9]+: Error: expected ',' at operand 1 -- `ld1q {za0v.q\\[w12\\]},p0/z,\\[x0,x0,lsl#2\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `ld1b {za1h.b\\[w12,0\\]},p0/z,\\[x0\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `ld1b {za1v.b\\[w12,0\\]},p0/z,\\[sp\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `ld1b {za1h.b\\[w12,0\\]},p0/z,\\[sp,x0\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1b {za0v.b\\[w15,16\\]},p7/z,\\[x17\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1b {za0h.b\\[w15,16\\]},p7/z,\\[sp\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1b {za0v.b\\[w15,16\\]},p7/z,\\[sp,x17\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `ld1h {za2v.h\\[w12,0\\]},p0/z,\\[x0\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `ld1h {za2h.h\\[w12,0\\]},p0/z,\\[sp\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `ld1h {za2v.h\\[w12,0\\]},p0/z,\\[x0,x0,lsl#1\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `ld1h {za2h.h\\[w12,0\\]},p0/z,\\[sp,x0,lsl#1\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1h {za1v.h\\[w15,8\\]},p7/z,\\[x17\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1h {za1h.h\\[w15,8\\]},p7/z,\\[sp\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1h {za1v.h\\[w15,8\\]},p7/z,\\[x0,x17,lsl#1\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1h {za1h.h\\[w15,8\\]},p7/z,\\[sp,x17,lsl#1\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `ld1w {za4h.s\\[w12,0\\]},p0/z,\\[x0\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `ld1w {za4v.s\\[w12,0\\]},p0/z,\\[sp\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `ld1w {za4h.s\\[w12,0\\]},p0/z,\\[x0,x0,lsl#2\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `ld1w {za4v.s\\[w12,0\\]},p0/z,\\[sp,x0,lsl#2\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1w {za3h.s\\[w15,4\\]},p7/z,\\[x17\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1w {za3v.s\\[w15,4\\]},p7/z,\\[sp\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1w {za3h.s\\[w15,4\\]},p7/z,\\[x0,x17,lsl#2\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1w {za3v.s\\[w15,4\\]},p7/z,\\[sp,x17,lsl#2\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `ld1d {za8v.d\\[w12,0\\]},p0/z,\\[x0\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `ld1d {za8h.d\\[w12,0\\]},p0/z,\\[sp\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `ld1d {za8v.d\\[w12,0\\]},p0/z,\\[x0,x0,lsl#3\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `ld1d {za8h.d\\[w12,0\\]},p0/z,\\[sp,x0,lsl#3\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1d {za7v.d\\[w15,2\\]},p7/z,\\[x17\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1d {za7h.d\\[w15,2\\]},p7/z,\\[sp\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1d {za7v.d\\[w15,2\\]},p7/z,\\[x0,x17,lsl#3\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1d {za7h.d\\[w15,2\\]},p7/z,\\[sp,x17,lsl#3\\]'\n+[^:]*:[0-9]+: Error: operand 1 must be an SME horizontal or vertical vector access register -- `ld1q {za16v.q\\[w12\\]},p0/z,\\[x0\\]'\n+[^:]*:[0-9]+: Error: operand 1 must be an SME horizontal or vertical vector access register -- `ld1q {za16h.q\\[w12\\]},p0/z,\\[sp\\]'\n+[^:]*:[0-9]+: Error: operand 1 must be an SME horizontal or vertical vector access register -- `ld1q {za16v.q\\[w12\\]},p0/z,\\[x0,x0,lsl#4\\]'\n+[^:]*:[0-9]+: Error: operand 1 must be an SME horizontal or vertical vector access register -- `ld1q {za16h.q\\[w12\\]},p0/z,\\[sp,x0,lsl#4\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1q {za15v.q\\[w15,1\\]},p7/z,\\[x17\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1q {za15h.q\\[w15,1\\]},p7/z,\\[sp\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1q {za15v.q\\[w15,1\\]},p7/z,\\[x0,x17,lsl#4\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `ld1q {za15h.q\\[w15,1\\]},p7/z,\\[sp,x17,lsl#4\\]'\n+[^:]*:[0-9]+: Error: invalid addressing mode at operand 3 -- `ld1b {za0h.b\\[w12,0\\]},p0/z,\\[x0,x1,lsl#1\\]'\n+[^:]*:[0-9]+: Error: invalid addressing mode at operand 3 -- `ld1h {za0h.h\\[w12,0\\]},p0/z,\\[x0,x1,lsl#2\\]'\n+[^:]*:[0-9]+: Error: invalid addressing mode at operand 3 -- `ld1w {za3v.s\\[w12,3\\]},p7/z,\\[x0,x1,lsl#3\\]'\n+[^:]*:[0-9]+: Error: invalid addressing mode at operand 3 -- `ld1d {za0h.d\\[w12,0\\]},p0/z,\\[x0,x1,lsl#4\\]'\n+[^:]*:[0-9]+: Error: invalid addressing mode at operand 3 -- `ld1q {za0v.q\\[w12,0\\]},p0/z,\\[x0,x1,lsl#1\\]'\n+[^:]*:[0-9]+: Error: expected ',' at operand 1 -- `ld1q {za0v.q\\[w12\\]},p0/z,\\[x0,x1,lsl#1\\]'"
    },
    {
      "sha": "bf65f6af5cec1fa1e51cb9f55aa1b95b3461a951",
      "filename": "gas/testsuite/gas/aarch64/sme-5-illegal.s",
      "status": "added",
      "additions": 52,
      "deletions": 0,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-5-illegal.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-5-illegal.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-5-illegal.s?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -0,0 +1,52 @@\n+/* Scalable Matrix Extension (SME).  */\n+ld1b {za0h.b[w11, 0]}, p0/z, [x0]\n+ld1h {za0h.h[w16, 0]}, p0/z, [x0]\n+ld1h {za0v.h[w12, 0]}, p0/z, [x0, x0, lsl #3]\n+ld1w {za3v.s[w15, 3]}, p7/z, [sp, lsl #2]\n+ld1d {za0h.d[w12, 0]}, p0/z, [sp, x0, lsl #12]\n+ld1q {za0v.q[w12]}, p0/z, [x0, x0, lsl #2]\n+ld1b {za1h.b[w12, 0]}, p0/z, [x0]\n+ld1b {za1v.b[w12, 0]}, p0/z, [sp]\n+ld1b {za1h.b[w12, 0]}, p0/z, [sp, x0]\n+ld1b {za0v.b[w15, 16]}, p7/z, [x17]\n+ld1b {za0h.b[w15, 16]}, p7/z, [sp]\n+ld1b {za0v.b[w15, 16]}, p7/z, [sp, x17]\n+ld1h {za2v.h[w12, 0]}, p0/z, [x0]\n+ld1h {za2h.h[w12, 0]}, p0/z, [sp]\n+ld1h {za2v.h[w12, 0]}, p0/z, [x0, x0, lsl #1]\n+ld1h {za2h.h[w12, 0]}, p0/z, [sp, x0, lsl #1]\n+ld1h {za1v.h[w15, 8]}, p7/z, [x17]\n+ld1h {za1h.h[w15, 8]}, p7/z, [sp]\n+ld1h {za1v.h[w15, 8]}, p7/z, [x0, x17, lsl #1]\n+ld1h {za1h.h[w15, 8]}, p7/z, [sp, x17, lsl #1]\n+ld1w {za4h.s[w12, 0]}, p0/z, [x0]\n+ld1w {za4v.s[w12, 0]}, p0/z, [sp]\n+ld1w {za4h.s[w12, 0]}, p0/z, [x0, x0, lsl #2]\n+ld1w {za4v.s[w12, 0]}, p0/z, [sp, x0, lsl #2]\n+ld1w {za3h.s[w15, 4]}, p7/z, [x17]\n+ld1w {za3v.s[w15, 4]}, p7/z, [sp]\n+ld1w {za3h.s[w15, 4]}, p7/z, [x0, x17, lsl #2]\n+ld1w {za3v.s[w15, 4]}, p7/z, [sp, x17, lsl #2]\n+ld1d {za8v.d[w12, 0]}, p0/z, [x0]\n+ld1d {za8h.d[w12, 0]}, p0/z, [sp]\n+ld1d {za8v.d[w12, 0]}, p0/z, [x0, x0, lsl #3]\n+ld1d {za8h.d[w12, 0]}, p0/z, [sp, x0, lsl #3]\n+ld1d {za7v.d[w15, 2]}, p7/z, [x17]\n+ld1d {za7h.d[w15, 2]}, p7/z, [sp]\n+ld1d {za7v.d[w15, 2]}, p7/z, [x0, x17, lsl #3]\n+ld1d {za7h.d[w15, 2]}, p7/z, [sp, x17, lsl #3]\n+ld1q {za16v.q[w12]}, p0/z, [x0]\n+ld1q {za16h.q[w12]}, p0/z, [sp]\n+ld1q {za16v.q[w12]}, p0/z, [x0, x0, lsl #4]\n+ld1q {za16h.q[w12]}, p0/z, [sp, x0, lsl #4]\n+ld1q {za15v.q[w15, 1]}, p7/z, [x17]\n+ld1q {za15h.q[w15, 1]}, p7/z, [sp]\n+ld1q {za15v.q[w15, 1]}, p7/z, [x0, x17, lsl #4]\n+ld1q {za15h.q[w15, 1]}, p7/z, [sp, x17, lsl #4]\n+/* Illegal operand 3 addressing modes.  */\n+ld1b {za0h.b[w12, 0]}, p0/z, [x0, x1, lsl #1]\n+ld1h {za0h.h[w12, 0]}, p0/z, [x0, x1, lsl #2]\n+ld1w {za3v.s[w12, 3]}, p7/z, [x0, x1, lsl #3]\n+ld1d {za0h.d[w12, 0]}, p0/z, [x0, x1, lsl #4]\n+ld1q {za0v.q[w12, 0]}, p0/z, [x0, x1, lsl #1]\n+ld1q {za0v.q[w12]}, p0/z, [x0, x1, lsl #1]"
    },
    {
      "sha": "66675349227453007d3d1d50a7cdd8aff28d35e1",
      "filename": "gas/testsuite/gas/aarch64/sme-5.d",
      "status": "added",
      "additions": 93,
      "deletions": 0,
      "changes": 93,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-5.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-5.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-5.d?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -0,0 +1,93 @@\n+#name: SME extension (LD1x instructions)\n+#as: -march=armv8-a+sme\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+ <.*>:\n+   0:\te01f0000 \tld1b\t{za0h.b\\[w12, 0\\]}, p0/z, \\[x0, xzr\\]\n+   4:\te01f03e0 \tld1b\t{za0h.b\\[w12, 0\\]}, p0/z, \\[sp, xzr\\]\n+   8:\te00003e0 \tld1b\t{za0h.b\\[w12, 0\\]}, p0/z, \\[sp, x0\\]\n+   c:\te01f7e2f \tld1b\t{za0h.b\\[w15, 15\\]}, p7/z, \\[x17, xzr\\]\n+  10:\te01f7fef \tld1b\t{za0h.b\\[w15, 15\\]}, p7/z, \\[sp, xzr\\]\n+  14:\te0117fef \tld1b\t{za0h.b\\[w15, 15\\]}, p7/z, \\[sp, x17\\]\n+  18:\te05f0000 \tld1h\t{za0h.h\\[w12, 0\\]}, p0/z, \\[x0, xzr, lsl #1\\]\n+  1c:\te05f03e0 \tld1h\t{za0h.h\\[w12, 0\\]}, p0/z, \\[sp, xzr, lsl #1\\]\n+  20:\te0400000 \tld1h\t{za0h.h\\[w12, 0\\]}, p0/z, \\[x0, x0, lsl #1\\]\n+  24:\te04003e0 \tld1h\t{za0h.h\\[w12, 0\\]}, p0/z, \\[sp, x0, lsl #1\\]\n+  28:\te05f7e2f \tld1h\t{za1h.h\\[w15, 7\\]}, p7/z, \\[x17, xzr, lsl #1\\]\n+  2c:\te05f7fef \tld1h\t{za1h.h\\[w15, 7\\]}, p7/z, \\[sp, xzr, lsl #1\\]\n+  30:\te0517c0f \tld1h\t{za1h.h\\[w15, 7\\]}, p7/z, \\[x0, x17, lsl #1\\]\n+  34:\te0517fef \tld1h\t{za1h.h\\[w15, 7\\]}, p7/z, \\[sp, x17, lsl #1\\]\n+  38:\te09f0000 \tld1w\t{za0h.s\\[w12, 0\\]}, p0/z, \\[x0, xzr, lsl #2\\]\n+  3c:\te09f03e0 \tld1w\t{za0h.s\\[w12, 0\\]}, p0/z, \\[sp, xzr, lsl #2\\]\n+  40:\te0800000 \tld1w\t{za0h.s\\[w12, 0\\]}, p0/z, \\[x0, x0, lsl #2\\]\n+  44:\te08003e0 \tld1w\t{za0h.s\\[w12, 0\\]}, p0/z, \\[sp, x0, lsl #2\\]\n+  48:\te09f7e2f \tld1w\t{za3h.s\\[w15, 3\\]}, p7/z, \\[x17, xzr, lsl #2\\]\n+  4c:\te09f7fef \tld1w\t{za3h.s\\[w15, 3\\]}, p7/z, \\[sp, xzr, lsl #2\\]\n+  50:\te0917c0f \tld1w\t{za3h.s\\[w15, 3\\]}, p7/z, \\[x0, x17, lsl #2\\]\n+  54:\te0917fef \tld1w\t{za3h.s\\[w15, 3\\]}, p7/z, \\[sp, x17, lsl #2\\]\n+  58:\te0df0000 \tld1d\t{za0h.d\\[w12, 0\\]}, p0/z, \\[x0, xzr, lsl #3\\]\n+  5c:\te0df03e0 \tld1d\t{za0h.d\\[w12, 0\\]}, p0/z, \\[sp, xzr, lsl #3\\]\n+  60:\te0c00000 \tld1d\t{za0h.d\\[w12, 0\\]}, p0/z, \\[x0, x0, lsl #3\\]\n+  64:\te0c003e0 \tld1d\t{za0h.d\\[w12, 0\\]}, p0/z, \\[sp, x0, lsl #3\\]\n+  68:\te0df7e2f \tld1d\t{za7h.d\\[w15, 1\\]}, p7/z, \\[x17, xzr, lsl #3\\]\n+  6c:\te0df7fef \tld1d\t{za7h.d\\[w15, 1\\]}, p7/z, \\[sp, xzr, lsl #3\\]\n+  70:\te0d17c0f \tld1d\t{za7h.d\\[w15, 1\\]}, p7/z, \\[x0, x17, lsl #3\\]\n+  74:\te0d17fef \tld1d\t{za7h.d\\[w15, 1\\]}, p7/z, \\[sp, x17, lsl #3\\]\n+  78:\te1df0000 \tld1q\t{za0h.q\\[w12, 0\\]}, p0/z, \\[x0, xzr, lsl #4\\]\n+  7c:\te1df03e0 \tld1q\t{za0h.q\\[w12, 0\\]}, p0/z, \\[sp, xzr, lsl #4\\]\n+  80:\te1c00000 \tld1q\t{za0h.q\\[w12, 0\\]}, p0/z, \\[x0, x0, lsl #4\\]\n+  84:\te1c003e0 \tld1q\t{za0h.q\\[w12, 0\\]}, p0/z, \\[sp, x0, lsl #4\\]\n+  88:\te1df7e2f \tld1q\t{za15h.q\\[w15, 0\\]}, p7/z, \\[x17, xzr, lsl #4\\]\n+  8c:\te1df7fef \tld1q\t{za15h.q\\[w15, 0\\]}, p7/z, \\[sp, xzr, lsl #4\\]\n+  90:\te1d17c0f \tld1q\t{za15h.q\\[w15, 0\\]}, p7/z, \\[x0, x17, lsl #4\\]\n+  94:\te1d17fef \tld1q\t{za15h.q\\[w15, 0\\]}, p7/z, \\[sp, x17, lsl #4\\]\n+  98:\te01f8000 \tld1b\t{za0v.b\\[w12, 0\\]}, p0/z, \\[x0, xzr\\]\n+  9c:\te01f83e0 \tld1b\t{za0v.b\\[w12, 0\\]}, p0/z, \\[sp, xzr\\]\n+  a0:\te00083e0 \tld1b\t{za0v.b\\[w12, 0\\]}, p0/z, \\[sp, x0\\]\n+  a4:\te01ffe2f \tld1b\t{za0v.b\\[w15, 15\\]}, p7/z, \\[x17, xzr\\]\n+  a8:\te01fffef \tld1b\t{za0v.b\\[w15, 15\\]}, p7/z, \\[sp, xzr\\]\n+  ac:\te011ffef \tld1b\t{za0v.b\\[w15, 15\\]}, p7/z, \\[sp, x17\\]\n+  b0:\te05f8000 \tld1h\t{za0v.h\\[w12, 0\\]}, p0/z, \\[x0, xzr, lsl #1\\]\n+  b4:\te05f83e0 \tld1h\t{za0v.h\\[w12, 0\\]}, p0/z, \\[sp, xzr, lsl #1\\]\n+  b8:\te0408000 \tld1h\t{za0v.h\\[w12, 0\\]}, p0/z, \\[x0, x0, lsl #1\\]\n+  bc:\te04083e0 \tld1h\t{za0v.h\\[w12, 0\\]}, p0/z, \\[sp, x0, lsl #1\\]\n+  c0:\te05ffe2f \tld1h\t{za1v.h\\[w15, 7\\]}, p7/z, \\[x17, xzr, lsl #1\\]\n+  c4:\te05fffef \tld1h\t{za1v.h\\[w15, 7\\]}, p7/z, \\[sp, xzr, lsl #1\\]\n+  c8:\te051fc0f \tld1h\t{za1v.h\\[w15, 7\\]}, p7/z, \\[x0, x17, lsl #1\\]\n+  cc:\te051ffef \tld1h\t{za1v.h\\[w15, 7\\]}, p7/z, \\[sp, x17, lsl #1\\]\n+  d0:\te09f8000 \tld1w\t{za0v.s\\[w12, 0\\]}, p0/z, \\[x0, xzr, lsl #2\\]\n+  d4:\te09f83e0 \tld1w\t{za0v.s\\[w12, 0\\]}, p0/z, \\[sp, xzr, lsl #2\\]\n+  d8:\te0808000 \tld1w\t{za0v.s\\[w12, 0\\]}, p0/z, \\[x0, x0, lsl #2\\]\n+  dc:\te08083e0 \tld1w\t{za0v.s\\[w12, 0\\]}, p0/z, \\[sp, x0, lsl #2\\]\n+  e0:\te09ffe2f \tld1w\t{za3v.s\\[w15, 3\\]}, p7/z, \\[x17, xzr, lsl #2\\]\n+  e4:\te09fffef \tld1w\t{za3v.s\\[w15, 3\\]}, p7/z, \\[sp, xzr, lsl #2\\]\n+  e8:\te091fc0f \tld1w\t{za3v.s\\[w15, 3\\]}, p7/z, \\[x0, x17, lsl #2\\]\n+  ec:\te091ffef \tld1w\t{za3v.s\\[w15, 3\\]}, p7/z, \\[sp, x17, lsl #2\\]\n+  f0:\te0df8000 \tld1d\t{za0v.d\\[w12, 0\\]}, p0/z, \\[x0, xzr, lsl #3\\]\n+  f4:\te0df83e0 \tld1d\t{za0v.d\\[w12, 0\\]}, p0/z, \\[sp, xzr, lsl #3\\]\n+  f8:\te0c08000 \tld1d\t{za0v.d\\[w12, 0\\]}, p0/z, \\[x0, x0, lsl #3\\]\n+  fc:\te0c083e0 \tld1d\t{za0v.d\\[w12, 0\\]}, p0/z, \\[sp, x0, lsl #3\\]\n+ 100:\te0dffe2f \tld1d\t{za7v.d\\[w15, 1\\]}, p7/z, \\[x17, xzr, lsl #3\\]\n+ 104:\te0dfffef \tld1d\t{za7v.d\\[w15, 1\\]}, p7/z, \\[sp, xzr, lsl #3\\]\n+ 108:\te0d1fc0f \tld1d\t{za7v.d\\[w15, 1\\]}, p7/z, \\[x0, x17, lsl #3\\]\n+ 10c:\te0d1ffef \tld1d\t{za7v.d\\[w15, 1\\]}, p7/z, \\[sp, x17, lsl #3\\]\n+ 110:\te1df8000 \tld1q\t{za0v.q\\[w12, 0\\]}, p0/z, \\[x0, xzr, lsl #4\\]\n+ 114:\te1df83e0 \tld1q\t{za0v.q\\[w12, 0\\]}, p0/z, \\[sp, xzr, lsl #4\\]\n+ 118:\te1c08000 \tld1q\t{za0v.q\\[w12, 0\\]}, p0/z, \\[x0, x0, lsl #4\\]\n+ 11c:\te1c083e0 \tld1q\t{za0v.q\\[w12, 0\\]}, p0/z, \\[sp, x0, lsl #4\\]\n+ 120:\te1dffe2f \tld1q\t{za15v.q\\[w15, 0\\]}, p7/z, \\[x17, xzr, lsl #4\\]\n+ 124:\te1dfffef \tld1q\t{za15v.q\\[w15, 0\\]}, p7/z, \\[sp, xzr, lsl #4\\]\n+ 128:\te1d1fc0f \tld1q\t{za15v.q\\[w15, 0\\]}, p7/z, \\[x0, x17, lsl #4\\]\n+ 12c:\te1d1ffef \tld1q\t{za15v.q\\[w15, 0\\]}, p7/z, \\[sp, x17, lsl #4\\]\n+ 130:\te1c083e0 \tld1q\t{za0v.q\\[w12, 0\\]}, p0/z, \\[sp, x0, lsl #4\\]\n+ 134:\te1dffe2f \tld1q\t{za15v.q\\[w15, 0\\]}, p7/z, \\[x17, xzr, lsl #4\\]\n+ 138:\te000ffef \tld1b\t{za0v.b\\[w15, 15\\]}, p7/z, \\[sp, x0\\]\n+ 13c:\te0010000 \tld1b\t{za0h.b\\[w12, 0\\]}, p0/z, \\[x0, x1\\]\n+ 140:\te0410000 \tld1h\t{za0h.h\\[w12, 0\\]}, p0/z, \\[x0, x1, lsl #1\\]\n+ 144:\te0819c0f \tld1w\t{za3v.s\\[w12, 3\\]}, p7/z, \\[x0, x1, lsl #2\\]\n+ 148:\te0c10000 \tld1d\t{za0h.d\\[w12, 0\\]}, p0/z, \\[x0, x1, lsl #3\\]\n+ 14c:\te1c18000 \tld1q\t{za0v.q\\[w12, 0\\]}, p0/z, \\[x0, x1, lsl #4\\]"
    },
    {
      "sha": "e0d79f6d5b24c86a954bf9c3452a918ddd63178a",
      "filename": "gas/testsuite/gas/aarch64/sme-5.s",
      "status": "added",
      "additions": 101,
      "deletions": 0,
      "changes": 101,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-5.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-5.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-5.s?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -0,0 +1,101 @@\n+/* SME Extension (LD1x instructions).  */\n+ld1b {za0h.b[w12, 0]}, p0/z, [x0]\n+ld1b {za0h.b[w12, 0]}, p0/z, [sp]\n+ld1b {za0h.b[w12, 0]}, p0/z, [sp, x0]\n+ld1b {za0h.b[w15, 15]}, p7/z, [x17]\n+ld1b {za0h.b[w15, 15]}, p7/z, [sp]\n+ld1b {za0h.b[w15, 15]}, p7/z, [sp, x17]\n+\n+ld1h {za0h.h[w12, 0]}, p0/z, [x0]\n+ld1h {za0h.h[w12, 0]}, p0/z, [sp]\n+ld1h {za0h.h[w12, 0]}, p0/z, [x0, x0, lsl #1]\n+ld1h {za0h.h[w12, 0]}, p0/z, [sp, x0, lsl #1]\n+ld1h {za1h.h[w15, 7]}, p7/z, [x17]\n+ld1h {za1h.h[w15, 7]}, p7/z, [sp]\n+ld1h {za1h.h[w15, 7]}, p7/z, [x0, x17, lsl #1]\n+ld1h {za1h.h[w15, 7]}, p7/z, [sp, x17, lsl #1]\n+\n+ld1w {za0h.s[w12, 0]}, p0/z, [x0]\n+ld1w {za0h.s[w12, 0]}, p0/z, [sp]\n+ld1w {za0h.s[w12, 0]}, p0/z, [x0, x0, lsl #2]\n+ld1w {za0h.s[w12, 0]}, p0/z, [sp, x0, lsl #2]\n+ld1w {za3h.s[w15, 3]}, p7/z, [x17]\n+ld1w {za3h.s[w15, 3]}, p7/z, [sp]\n+ld1w {za3h.s[w15, 3]}, p7/z, [x0, x17, lsl #2]\n+ld1w {za3h.s[w15, 3]}, p7/z, [sp, x17, lsl #2]\n+\n+ld1d {za0h.d[w12, 0]}, p0/z, [x0]\n+ld1d {za0h.d[w12, 0]}, p0/z, [sp]\n+ld1d {za0h.d[w12, 0]}, p0/z, [x0, x0, lsl #3]\n+ld1d {za0h.d[w12, 0]}, p0/z, [sp, x0, lsl #3]\n+ld1d {za7h.d[w15, 1]}, p7/z, [x17]\n+ld1d {za7h.d[w15, 1]}, p7/z, [sp]\n+ld1d {za7h.d[w15, 1]}, p7/z, [x0, x17, lsl #3]\n+ld1d {za7h.d[w15, 1]}, p7/z, [sp, x17, lsl #3]\n+\n+ld1q {za0h.q[w12, 0]}, p0/z, [x0]\n+ld1q {za0h.q[w12, 0]}, p0/z, [sp]\n+ld1q {za0h.q[w12, 0]}, p0/z, [x0, x0, lsl #4]\n+ld1q {za0h.q[w12, 0]}, p0/z, [sp, x0, lsl #4]\n+ld1q {za15h.q[w15, 0]}, p7/z, [x17]\n+ld1q {za15h.q[w15, 0]}, p7/z, [sp]\n+ld1q {za15h.q[w15, 0]}, p7/z, [x0, x17, lsl #4]\n+ld1q {za15h.q[w15, 0]}, p7/z, [sp, x17, lsl #4]\n+\n+ld1b {za0v.b[w12, 0]}, p0/z, [x0]\n+ld1b {za0v.b[w12, 0]}, p0/z, [sp]\n+ld1b {za0v.b[w12, 0]}, p0/z, [sp, x0]\n+ld1b {za0v.b[w15, 15]}, p7/z, [x17]\n+ld1b {za0v.b[w15, 15]}, p7/z, [sp]\n+ld1b {za0v.b[w15, 15]}, p7/z, [sp, x17]\n+\n+ld1h {za0v.h[w12, 0]}, p0/z, [x0]\n+ld1h {za0v.h[w12, 0]}, p0/z, [sp]\n+ld1h {za0v.h[w12, 0]}, p0/z, [x0, x0, lsl #1]\n+ld1h {za0v.h[w12, 0]}, p0/z, [sp, x0, lsl #1]\n+ld1h {za1v.h[w15, 7]}, p7/z, [x17]\n+ld1h {za1v.h[w15, 7]}, p7/z, [sp]\n+ld1h {za1v.h[w15, 7]}, p7/z, [x0, x17, lsl #1]\n+ld1h {za1v.h[w15, 7]}, p7/z, [sp, x17, lsl #1]\n+\n+ld1w {za0v.s[w12, 0]}, p0/z, [x0]\n+ld1w {za0v.s[w12, 0]}, p0/z, [sp]\n+ld1w {za0v.s[w12, 0]}, p0/z, [x0, x0, lsl #2]\n+ld1w {za0v.s[w12, 0]}, p0/z, [sp, x0, lsl #2]\n+ld1w {za3v.s[w15, 3]}, p7/z, [x17]\n+ld1w {za3v.s[w15, 3]}, p7/z, [sp]\n+ld1w {za3v.s[w15, 3]}, p7/z, [x0, x17, lsl #2]\n+ld1w {za3v.s[w15, 3]}, p7/z, [sp, x17, lsl #2]\n+\n+ld1d {za0v.d[w12, 0]}, p0/z, [x0]\n+ld1d {za0v.d[w12, 0]}, p0/z, [sp]\n+ld1d {za0v.d[w12, 0]}, p0/z, [x0, x0, lsl #3]\n+ld1d {za0v.d[w12, 0]}, p0/z, [sp, x0, lsl #3]\n+ld1d {za7v.d[w15, 1]}, p7/z, [x17]\n+ld1d {za7v.d[w15, 1]}, p7/z, [sp]\n+ld1d {za7v.d[w15, 1]}, p7/z, [x0, x17, lsl #3]\n+ld1d {za7v.d[w15, 1]}, p7/z, [sp, x17, lsl #3]\n+\n+ld1q {za0v.q[w12, 0]}, p0/z, [x0]\n+ld1q {za0v.q[w12, 0]}, p0/z, [sp]\n+ld1q {za0v.q[w12, 0]}, p0/z, [x0, x0, lsl #4]\n+ld1q {za0v.q[w12, 0]}, p0/z, [sp, x0, lsl #4]\n+ld1q {za15v.q[w15, 0]}, p7/z, [x17]\n+ld1q {za15v.q[w15, 0]}, p7/z, [sp]\n+ld1q {za15v.q[w15, 0]}, p7/z, [x0, x17, lsl #4]\n+ld1q {za15v.q[w15, 0]}, p7/z, [sp, x17, lsl #4]\n+\n+/* Register aliases.  */\n+foo .req za0v\n+bar .req w15\n+\n+ld1q {foo.q[w12, #0]}, p0/z, [sp, x0, lsl #4]\n+ld1q {za15v.q[bar, #0]}, p7/z, [x17]\n+\n+/* Optional LSL operator.  */\n+ld1b {za0v.b[w15, 15]}, p7/z, [sp, x0, lsl #0]\n+ld1b {za0h.b[w12, 0]}, p0/z, [x0, x1]\n+ld1h {za0h.h[w12, 0]}, p0/z, [x0, x1]\n+ld1w {za3v.s[w12, 3]}, p7/z, [x0, x1]\n+ld1d {za0h.d[w12, 0]}, p0/z, [x0, x1]\n+ld1q {za0v.q[w12, 0]}, p0/z, [x0, x1]"
    },
    {
      "sha": "fd3f7f3e9fe2be7bfcfcd40a5e305339ebf46066",
      "filename": "gas/testsuite/gas/aarch64/sme-6-illegal.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-6-illegal.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-6-illegal.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-6-illegal.d?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -0,0 +1,3 @@\n+#as: -march=armv8-a+sme\n+#source: sme-6-illegal.s\n+#error_output: sme-6-illegal.l"
    },
    {
      "sha": "233c12af15ab137445e91287a508131099ddfae2",
      "filename": "gas/testsuite/gas/aarch64/sme-6-illegal.l",
      "status": "added",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-6-illegal.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-6-illegal.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-6-illegal.l?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -0,0 +1,45 @@\n+[^:]*: Assembler messages:\n+[^:]*:[0-9]+: Error: expected vector select register W12-W15 at operand 1 -- `st1b {za0h.b\\[w11,0\\]},p0,\\[x0\\]'\n+[^:]*:[0-9]+: Error: expected vector select register W12-W15 at operand 1 -- `st1h {za0h.h\\[w16,0\\]},p0,\\[x0\\]'\n+[^:]*:[0-9]+: Error: invalid addressing mode at operand 3 -- `st1h {za0v.h\\[w12,0\\]},p0,\\[x0,x0,lsl#3\\]'\n+[^:]*:[0-9]+: Error: '\\]' expected at operand 3 -- `st1w {za3v.s\\[w15,3\\]},p7,\\[sp,lsl#2\\]'\n+[^:]*:[0-9]+: Error: invalid addressing mode at operand 3 -- `st1d {za0h.d\\[w12,0\\]},p0,\\[sp,x0,lsl#12\\]'\n+[^:]*:[0-9]+: Error: expected ',' at operand 1 -- `st1q {za0v.q\\[w12\\]},p0,\\[x0,x0,lsl#2\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `st1b {za1h.b\\[w12,0\\]},p0,\\[x0\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `st1b {za1v.b\\[w12,0\\]},p0,\\[sp\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `st1b {za1h.b\\[w12,0\\]},p0,\\[sp,x0\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1b {za0v.b\\[w15,16\\]},p7,\\[x17\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1b {za0h.b\\[w15,16\\]},p7,\\[sp\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1b {za0v.b\\[w15,16\\]},p7,\\[sp,x17\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `st1h {za2v.h\\[w12,0\\]},p0,\\[x0\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `st1h {za2h.h\\[w12,0\\]},p0,\\[sp\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `st1h {za2v.h\\[w12,0\\]},p0,\\[x0,x0,lsl#1\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `st1h {za2h.h\\[w12,0\\]},p0,\\[sp,x0,lsl#1\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1h {za1v.h\\[w15,8\\]},p7,\\[x17\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1h {za1h.h\\[w15,8\\]},p7,\\[sp\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1h {za1v.h\\[w15,8\\]},p7,\\[x0,x17,lsl#1\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1h {za1h.h\\[w15,8\\]},p7,\\[sp,x17,lsl#1\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `st1w {za4h.s\\[w12,0\\]},p0,\\[x0\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `st1w {za4v.s\\[w12,0\\]},p0,\\[sp\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `st1w {za4h.s\\[w12,0\\]},p0,\\[x0,x0,lsl#2\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `st1w {za4v.s\\[w12,0\\]},p0,\\[sp,x0,lsl#2\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1w {za3h.s\\[w15,4\\]},p7,\\[x17\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1w {za3v.s\\[w15,4\\]},p7,\\[sp\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1w {za3h.s\\[w15,4\\]},p7,\\[x0,x17,lsl#2\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1w {za3v.s\\[w15,4\\]},p7,\\[sp,x17,lsl#2\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `st1d {za8v.d\\[w12,0\\]},p0,\\[x0\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `st1d {za8h.d\\[w12,0\\]},p0,\\[sp\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `st1d {za8v.d\\[w12,0\\]},p0,\\[x0,x0,lsl#3\\]'\n+[^:]*:[0-9]+: Error: ZA tile vector out of range at operand 1 -- `st1d {za8h.d\\[w12,0\\]},p0,\\[sp,x0,lsl#3\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1d {za7v.d\\[w15,2\\]},p7,\\[x17\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1d {za7h.d\\[w15,2\\]},p7,\\[sp\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1d {za7v.d\\[w15,2\\]},p7,\\[x0,x17,lsl#3\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1d {za7h.d\\[w15,2\\]},p7,\\[sp,x17,lsl#3\\]'\n+[^:]*:[0-9]+: Error: operand 1 must be an SME horizontal or vertical vector access register -- `st1q {za16v.q\\[w12\\]},p0,\\[x0\\]'\n+[^:]*:[0-9]+: Error: operand 1 must be an SME horizontal or vertical vector access register -- `st1q {za16h.q\\[w12\\]},p0,\\[sp\\]'\n+[^:]*:[0-9]+: Error: operand 1 must be an SME horizontal or vertical vector access register -- `st1q {za16v.q\\[w12\\]},p0,\\[x0,x0,lsl#4\\]'\n+[^:]*:[0-9]+: Error: operand 1 must be an SME horizontal or vertical vector access register -- `st1q {za16h.q\\[w12\\]},p0,\\[sp,x0,lsl#4\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1q {za15v.q\\[w15,1\\]},p7,\\[x17\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1q {za15h.q\\[w15,1\\]},p7,\\[sp\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1q {za15v.q\\[w15,1\\]},p7,\\[x0,x17,lsl#4\\]'\n+[^:]*:[0-9]+: Error: index offset out of range at operand 1 -- `st1q {za15h.q\\[w15,1\\]},p7,\\[sp,x17,lsl#4\\]'"
    },
    {
      "sha": "d0de01d5a6c35fce188efd4658b3dbb8d755ac1a",
      "filename": "gas/testsuite/gas/aarch64/sme-6-illegal.s",
      "status": "added",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-6-illegal.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-6-illegal.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-6-illegal.s?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -0,0 +1,46 @@\n+/* Scalable Matrix Extension (SME).  */\n+\n+st1b {za0h.b[w11, 0]}, p0, [x0]\n+st1h {za0h.h[w16, 0]}, p0, [x0]\n+st1h {za0v.h[w12, 0]}, p0, [x0, x0, lsl #3]\n+st1w {za3v.s[w15, 3]}, p7, [sp, lsl #2]\n+st1d {za0h.d[w12, 0]}, p0, [sp, x0, lsl #12]\n+st1q {za0v.q[w12]}, p0, [x0, x0, lsl #2]\n+st1b {za1h.b[w12, 0]}, p0, [x0]\n+st1b {za1v.b[w12, 0]}, p0, [sp]\n+st1b {za1h.b[w12, 0]}, p0, [sp, x0]\n+st1b {za0v.b[w15, 16]}, p7, [x17]\n+st1b {za0h.b[w15, 16]}, p7, [sp]\n+st1b {za0v.b[w15, 16]}, p7, [sp, x17]\n+st1h {za2v.h[w12, 0]}, p0, [x0]\n+st1h {za2h.h[w12, 0]}, p0, [sp]\n+st1h {za2v.h[w12, 0]}, p0, [x0, x0, lsl #1]\n+st1h {za2h.h[w12, 0]}, p0, [sp, x0, lsl #1]\n+st1h {za1v.h[w15, 8]}, p7, [x17]\n+st1h {za1h.h[w15, 8]}, p7, [sp]\n+st1h {za1v.h[w15, 8]}, p7, [x0, x17, lsl #1]\n+st1h {za1h.h[w15, 8]}, p7, [sp, x17, lsl #1]\n+st1w {za4h.s[w12, 0]}, p0, [x0]\n+st1w {za4v.s[w12, 0]}, p0, [sp]\n+st1w {za4h.s[w12, 0]}, p0, [x0, x0, lsl #2]\n+st1w {za4v.s[w12, 0]}, p0, [sp, x0, lsl #2]\n+st1w {za3h.s[w15, 4]}, p7, [x17]\n+st1w {za3v.s[w15, 4]}, p7, [sp]\n+st1w {za3h.s[w15, 4]}, p7, [x0, x17, lsl #2]\n+st1w {za3v.s[w15, 4]}, p7, [sp, x17, lsl #2]\n+st1d {za8v.d[w12, 0]}, p0, [x0]\n+st1d {za8h.d[w12, 0]}, p0, [sp]\n+st1d {za8v.d[w12, 0]}, p0, [x0, x0, lsl #3]\n+st1d {za8h.d[w12, 0]}, p0, [sp, x0, lsl #3]\n+st1d {za7v.d[w15, 2]}, p7, [x17]\n+st1d {za7h.d[w15, 2]}, p7, [sp]\n+st1d {za7v.d[w15, 2]}, p7, [x0, x17, lsl #3]\n+st1d {za7h.d[w15, 2]}, p7, [sp, x17, lsl #3]\n+st1q {za16v.q[w12]}, p0, [x0]\n+st1q {za16h.q[w12]}, p0, [sp]\n+st1q {za16v.q[w12]}, p0, [x0, x0, lsl #4]\n+st1q {za16h.q[w12]}, p0, [sp, x0, lsl #4]\n+st1q {za15v.q[w15, 1]}, p7, [x17]\n+st1q {za15h.q[w15, 1]}, p7, [sp]\n+st1q {za15v.q[w15, 1]}, p7, [x0, x17, lsl #4]\n+st1q {za15h.q[w15, 1]}, p7, [sp, x17, lsl #4]"
    },
    {
      "sha": "1b1d32a1b52333bd84f67aa910aa4758c914d2f5",
      "filename": "gas/testsuite/gas/aarch64/sme-6.d",
      "status": "added",
      "additions": 85,
      "deletions": 0,
      "changes": 85,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-6.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-6.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-6.d?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -0,0 +1,85 @@\n+#name: SME extension (ST1x instructions)\n+#as: -march=armv8-a+sme\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+ <.*>:\n+   0:\te03f0000 \tst1b\t{za0h.b\\[w12, 0\\]}, p0, \\[x0, xzr\\]\n+   4:\te03f03e0 \tst1b\t{za0h.b\\[w12, 0\\]}, p0, \\[sp, xzr\\]\n+   8:\te02003e0 \tst1b\t{za0h.b\\[w12, 0\\]}, p0, \\[sp, x0\\]\n+   c:\te03f7e2f \tst1b\t{za0h.b\\[w15, 15\\]}, p7, \\[x17, xzr\\]\n+  10:\te03f7fef \tst1b\t{za0h.b\\[w15, 15\\]}, p7, \\[sp, xzr\\]\n+  14:\te0317fef \tst1b\t{za0h.b\\[w15, 15\\]}, p7, \\[sp, x17\\]\n+  18:\te07f0000 \tst1h\t{za0h.h\\[w12, 0\\]}, p0, \\[x0, xzr, lsl #1\\]\n+  1c:\te07f03e0 \tst1h\t{za0h.h\\[w12, 0\\]}, p0, \\[sp, xzr, lsl #1\\]\n+  20:\te0600000 \tst1h\t{za0h.h\\[w12, 0\\]}, p0, \\[x0, x0, lsl #1\\]\n+  24:\te06003e0 \tst1h\t{za0h.h\\[w12, 0\\]}, p0, \\[sp, x0, lsl #1\\]\n+  28:\te07f7e2f \tst1h\t{za1h.h\\[w15, 7\\]}, p7, \\[x17, xzr, lsl #1\\]\n+  2c:\te07f7fef \tst1h\t{za1h.h\\[w15, 7\\]}, p7, \\[sp, xzr, lsl #1\\]\n+  30:\te0717c0f \tst1h\t{za1h.h\\[w15, 7\\]}, p7, \\[x0, x17, lsl #1\\]\n+  34:\te0717fef \tst1h\t{za1h.h\\[w15, 7\\]}, p7, \\[sp, x17, lsl #1\\]\n+  38:\te0bf0000 \tst1w\t{za0h.s\\[w12, 0\\]}, p0, \\[x0, xzr, lsl #2\\]\n+  3c:\te0bf03e0 \tst1w\t{za0h.s\\[w12, 0\\]}, p0, \\[sp, xzr, lsl #2\\]\n+  40:\te0a00000 \tst1w\t{za0h.s\\[w12, 0\\]}, p0, \\[x0, x0, lsl #2\\]\n+  44:\te0a003e0 \tst1w\t{za0h.s\\[w12, 0\\]}, p0, \\[sp, x0, lsl #2\\]\n+  48:\te0bf7e2f \tst1w\t{za3h.s\\[w15, 3\\]}, p7, \\[x17, xzr, lsl #2\\]\n+  4c:\te0bf7fef \tst1w\t{za3h.s\\[w15, 3\\]}, p7, \\[sp, xzr, lsl #2\\]\n+  50:\te0b17c0f \tst1w\t{za3h.s\\[w15, 3\\]}, p7, \\[x0, x17, lsl #2\\]\n+  54:\te0b17fef \tst1w\t{za3h.s\\[w15, 3\\]}, p7, \\[sp, x17, lsl #2\\]\n+  58:\te0ff0000 \tst1d\t{za0h.d\\[w12, 0\\]}, p0, \\[x0, xzr, lsl #3\\]\n+  5c:\te0ff03e0 \tst1d\t{za0h.d\\[w12, 0\\]}, p0, \\[sp, xzr, lsl #3\\]\n+  60:\te0e00000 \tst1d\t{za0h.d\\[w12, 0\\]}, p0, \\[x0, x0, lsl #3\\]\n+  64:\te0e003e0 \tst1d\t{za0h.d\\[w12, 0\\]}, p0, \\[sp, x0, lsl #3\\]\n+  68:\te0ff7e2f \tst1d\t{za7h.d\\[w15, 1\\]}, p7, \\[x17, xzr, lsl #3\\]\n+  6c:\te0ff7fef \tst1d\t{za7h.d\\[w15, 1\\]}, p7, \\[sp, xzr, lsl #3\\]\n+  70:\te0f17c0f \tst1d\t{za7h.d\\[w15, 1\\]}, p7, \\[x0, x17, lsl #3\\]\n+  74:\te0f17fef \tst1d\t{za7h.d\\[w15, 1\\]}, p7, \\[sp, x17, lsl #3\\]\n+  78:\te1ff0000 \tst1q\t{za0h.q\\[w12, 0\\]}, p0, \\[x0, xzr, lsl #4\\]\n+  7c:\te1ff03e0 \tst1q\t{za0h.q\\[w12, 0\\]}, p0, \\[sp, xzr, lsl #4\\]\n+  80:\te1e00000 \tst1q\t{za0h.q\\[w12, 0\\]}, p0, \\[x0, x0, lsl #4\\]\n+  84:\te1e003e0 \tst1q\t{za0h.q\\[w12, 0\\]}, p0, \\[sp, x0, lsl #4\\]\n+  88:\te1ff7e2f \tst1q\t{za15h.q\\[w15, 0\\]}, p7, \\[x17, xzr, lsl #4\\]\n+  8c:\te1ff7fef \tst1q\t{za15h.q\\[w15, 0\\]}, p7, \\[sp, xzr, lsl #4\\]\n+  90:\te1f17c0f \tst1q\t{za15h.q\\[w15, 0\\]}, p7, \\[x0, x17, lsl #4\\]\n+  94:\te1f17fef \tst1q\t{za15h.q\\[w15, 0\\]}, p7, \\[sp, x17, lsl #4\\]\n+  98:\te03f8000 \tst1b\t{za0v.b\\[w12, 0\\]}, p0, \\[x0, xzr\\]\n+  9c:\te03f83e0 \tst1b\t{za0v.b\\[w12, 0\\]}, p0, \\[sp, xzr\\]\n+  a0:\te02083e0 \tst1b\t{za0v.b\\[w12, 0\\]}, p0, \\[sp, x0\\]\n+  a4:\te03ffe2f \tst1b\t{za0v.b\\[w15, 15\\]}, p7, \\[x17, xzr\\]\n+  a8:\te03fffef \tst1b\t{za0v.b\\[w15, 15\\]}, p7, \\[sp, xzr\\]\n+  ac:\te031ffef \tst1b\t{za0v.b\\[w15, 15\\]}, p7, \\[sp, x17\\]\n+  b0:\te07f8000 \tst1h\t{za0v.h\\[w12, 0\\]}, p0, \\[x0, xzr, lsl #1\\]\n+  b4:\te07f83e0 \tst1h\t{za0v.h\\[w12, 0\\]}, p0, \\[sp, xzr, lsl #1\\]\n+  b8:\te0608000 \tst1h\t{za0v.h\\[w12, 0\\]}, p0, \\[x0, x0, lsl #1\\]\n+  bc:\te06083e0 \tst1h\t{za0v.h\\[w12, 0\\]}, p0, \\[sp, x0, lsl #1\\]\n+  c0:\te07ffe2f \tst1h\t{za1v.h\\[w15, 7\\]}, p7, \\[x17, xzr, lsl #1\\]\n+  c4:\te07fffef \tst1h\t{za1v.h\\[w15, 7\\]}, p7, \\[sp, xzr, lsl #1\\]\n+  c8:\te071fc0f \tst1h\t{za1v.h\\[w15, 7\\]}, p7, \\[x0, x17, lsl #1\\]\n+  cc:\te071ffef \tst1h\t{za1v.h\\[w15, 7\\]}, p7, \\[sp, x17, lsl #1\\]\n+  d0:\te0bf8000 \tst1w\t{za0v.s\\[w12, 0\\]}, p0, \\[x0, xzr, lsl #2\\]\n+  d4:\te0bf83e0 \tst1w\t{za0v.s\\[w12, 0\\]}, p0, \\[sp, xzr, lsl #2\\]\n+  d8:\te0a08000 \tst1w\t{za0v.s\\[w12, 0\\]}, p0, \\[x0, x0, lsl #2\\]\n+  dc:\te0a083e0 \tst1w\t{za0v.s\\[w12, 0\\]}, p0, \\[sp, x0, lsl #2\\]\n+  e0:\te0bffe2f \tst1w\t{za3v.s\\[w15, 3\\]}, p7, \\[x17, xzr, lsl #2\\]\n+  e4:\te0bfffef \tst1w\t{za3v.s\\[w15, 3\\]}, p7, \\[sp, xzr, lsl #2\\]\n+  e8:\te0b1fc0f \tst1w\t{za3v.s\\[w15, 3\\]}, p7, \\[x0, x17, lsl #2\\]\n+  ec:\te0b1ffef \tst1w\t{za3v.s\\[w15, 3\\]}, p7, \\[sp, x17, lsl #2\\]\n+  f0:\te0ff8000 \tst1d\t{za0v.d\\[w12, 0\\]}, p0, \\[x0, xzr, lsl #3\\]\n+  f4:\te0ff83e0 \tst1d\t{za0v.d\\[w12, 0\\]}, p0, \\[sp, xzr, lsl #3\\]\n+  f8:\te0e08000 \tst1d\t{za0v.d\\[w12, 0\\]}, p0, \\[x0, x0, lsl #3\\]\n+  fc:\te0e083e0 \tst1d\t{za0v.d\\[w12, 0\\]}, p0, \\[sp, x0, lsl #3\\]\n+ 100:\te0fffe2f \tst1d\t{za7v.d\\[w15, 1\\]}, p7, \\[x17, xzr, lsl #3\\]\n+ 104:\te0ffffef \tst1d\t{za7v.d\\[w15, 1\\]}, p7, \\[sp, xzr, lsl #3\\]\n+ 108:\te0f1fc0f \tst1d\t{za7v.d\\[w15, 1\\]}, p7, \\[x0, x17, lsl #3\\]\n+ 10c:\te0f1ffef \tst1d\t{za7v.d\\[w15, 1\\]}, p7, \\[sp, x17, lsl #3\\]\n+ 110:\te1ff8000 \tst1q\t{za0v.q\\[w12, 0\\]}, p0, \\[x0, xzr, lsl #4\\]\n+ 114:\te1ff83e0 \tst1q\t{za0v.q\\[w12, 0\\]}, p0, \\[sp, xzr, lsl #4\\]\n+ 118:\te1e08000 \tst1q\t{za0v.q\\[w12, 0\\]}, p0, \\[x0, x0, lsl #4\\]\n+ 11c:\te1e083e0 \tst1q\t{za0v.q\\[w12, 0\\]}, p0, \\[sp, x0, lsl #4\\]\n+ 120:\te1fffe2f \tst1q\t{za15v.q\\[w15, 0\\]}, p7, \\[x17, xzr, lsl #4\\]\n+ 124:\te1ffffef \tst1q\t{za15v.q\\[w15, 0\\]}, p7, \\[sp, xzr, lsl #4\\]\n+ 128:\te1f1fc0f \tst1q\t{za15v.q\\[w15, 0\\]}, p7, \\[x0, x17, lsl #4\\]\n+ 12c:\te1f1ffef \tst1q\t{za15v.q\\[w15, 0\\]}, p7, \\[sp, x17, lsl #4\\]"
    },
    {
      "sha": "143f02a2c835080acdc604714fa5d2606d916258",
      "filename": "gas/testsuite/gas/aarch64/sme-6.s",
      "status": "added",
      "additions": 86,
      "deletions": 0,
      "changes": 86,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-6.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-6.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-6.s?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -0,0 +1,86 @@\n+/* SME Extension (ST1x instructions).  */\n+st1b {za0h.b[w12, 0]}, p0, [x0]\n+st1b {za0h.b[w12, 0]}, p0, [sp]\n+st1b {za0h.b[w12, 0]}, p0, [sp, x0]\n+st1b {za0h.b[w15, 15]}, p7, [x17]\n+st1b {za0h.b[w15, 15]}, p7, [sp]\n+st1b {za0h.b[w15, 15]}, p7, [sp, x17]\n+\n+st1h {za0h.h[w12, 0]}, p0, [x0]\n+st1h {za0h.h[w12, 0]}, p0, [sp]\n+st1h {za0h.h[w12, 0]}, p0, [x0, x0, lsl #1]\n+st1h {za0h.h[w12, 0]}, p0, [sp, x0, lsl #1]\n+st1h {za1h.h[w15, 7]}, p7, [x17]\n+st1h {za1h.h[w15, 7]}, p7, [sp]\n+st1h {za1h.h[w15, 7]}, p7, [x0, x17, lsl #1]\n+st1h {za1h.h[w15, 7]}, p7, [sp, x17, lsl #1]\n+\n+st1w {za0h.s[w12, 0]}, p0, [x0]\n+st1w {za0h.s[w12, 0]}, p0, [sp]\n+st1w {za0h.s[w12, 0]}, p0, [x0, x0, lsl #2]\n+st1w {za0h.s[w12, 0]}, p0, [sp, x0, lsl #2]\n+st1w {za3h.s[w15, 3]}, p7, [x17]\n+st1w {za3h.s[w15, 3]}, p7, [sp]\n+st1w {za3h.s[w15, 3]}, p7, [x0, x17, lsl #2]\n+st1w {za3h.s[w15, 3]}, p7, [sp, x17, lsl #2]\n+\n+st1d {za0h.d[w12, 0]}, p0, [x0]\n+st1d {za0h.d[w12, 0]}, p0, [sp]\n+st1d {za0h.d[w12, 0]}, p0, [x0, x0, lsl #3]\n+st1d {za0h.d[w12, 0]}, p0, [sp, x0, lsl #3]\n+st1d {za7h.d[w15, 1]}, p7, [x17]\n+st1d {za7h.d[w15, 1]}, p7, [sp]\n+st1d {za7h.d[w15, 1]}, p7, [x0, x17, lsl #3]\n+st1d {za7h.d[w15, 1]}, p7, [sp, x17, lsl #3]\n+\n+st1q {za0h.q[w12, 0]}, p0, [x0]\n+st1q {za0h.q[w12, 0]}, p0, [sp]\n+st1q {za0h.q[w12, 0]}, p0, [x0, x0, lsl #4]\n+st1q {za0h.q[w12, 0]}, p0, [sp, x0, lsl #4]\n+st1q {za15h.q[w15, 0]}, p7, [x17]\n+st1q {za15h.q[w15, 0]}, p7, [sp]\n+st1q {za15h.q[w15, 0]}, p7, [x0, x17, lsl #4]\n+st1q {za15h.q[w15, 0]}, p7, [sp, x17, lsl #4]\n+\n+st1b {za0v.b[w12, 0]}, p0, [x0]\n+st1b {za0v.b[w12, 0]}, p0, [sp]\n+st1b {za0v.b[w12, 0]}, p0, [sp, x0]\n+st1b {za0v.b[w15, 15]}, p7, [x17]\n+st1b {za0v.b[w15, 15]}, p7, [sp]\n+st1b {za0v.b[w15, 15]}, p7, [sp, x17]\n+\n+st1h {za0v.h[w12, 0]}, p0, [x0]\n+st1h {za0v.h[w12, 0]}, p0, [sp]\n+st1h {za0v.h[w12, 0]}, p0, [x0, x0, lsl #1]\n+st1h {za0v.h[w12, 0]}, p0, [sp, x0, lsl #1]\n+st1h {za1v.h[w15, 7]}, p7, [x17]\n+st1h {za1v.h[w15, 7]}, p7, [sp]\n+st1h {za1v.h[w15, 7]}, p7, [x0, x17, lsl #1]\n+st1h {za1v.h[w15, 7]}, p7, [sp, x17, lsl #1]\n+\n+st1w {za0v.s[w12, 0]}, p0, [x0]\n+st1w {za0v.s[w12, 0]}, p0, [sp]\n+st1w {za0v.s[w12, 0]}, p0, [x0, x0, lsl #2]\n+st1w {za0v.s[w12, 0]}, p0, [sp, x0, lsl #2]\n+st1w {za3v.s[w15, 3]}, p7, [x17]\n+st1w {za3v.s[w15, 3]}, p7, [sp]\n+st1w {za3v.s[w15, 3]}, p7, [x0, x17, lsl #2]\n+st1w {za3v.s[w15, 3]}, p7, [sp, x17, lsl #2]\n+\n+st1d {za0v.d[w12, 0]}, p0, [x0]\n+st1d {za0v.d[w12, 0]}, p0, [sp]\n+st1d {za0v.d[w12, 0]}, p0, [x0, x0, lsl #3]\n+st1d {za0v.d[w12, 0]}, p0, [sp, x0, lsl #3]\n+st1d {za7v.d[w15, 1]}, p7, [x17]\n+st1d {za7v.d[w15, 1]}, p7, [sp]\n+st1d {za7v.d[w15, 1]}, p7, [x0, x17, lsl #3]\n+st1d {za7v.d[w15, 1]}, p7, [sp, x17, lsl #3]\n+\n+st1q {za0v.q[w12, 0]}, p0, [x0]\n+st1q {za0v.q[w12, 0]}, p0, [sp]\n+st1q {za0v.q[w12, 0]}, p0, [x0, x0, lsl #4]\n+st1q {za0v.q[w12, 0]}, p0, [sp, x0, lsl #4]\n+st1q {za15v.q[w15, 0]}, p7, [x17]\n+st1q {za15v.q[w15, 0]}, p7, [sp]\n+st1q {za15v.q[w15, 0]}, p7, [x0, x17, lsl #4]\n+st1q {za15v.q[w15, 0]}, p7, [sp, x17, lsl #4]"
    },
    {
      "sha": "d9ca5867f12ecc19fce8f6e1f9c047093f865456",
      "filename": "gas/testsuite/gas/aarch64/sme-7-illegal.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-7-illegal.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-7-illegal.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-7-illegal.d?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -0,0 +1,3 @@\n+#as: -march=armv8-a+sme\n+#source: sme-7-illegal.s\n+#error_output: sme-7-illegal.l"
    },
    {
      "sha": "913bd0ee8d162786d9408152a81a76a35a8a0aad",
      "filename": "gas/testsuite/gas/aarch64/sme-7-illegal.l",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-7-illegal.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-7-illegal.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-7-illegal.l?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -0,0 +1,33 @@\n+[^:]*: Assembler messages:\n+[^:]*:[0-9]+: Error: expected vector select register W12-W15 at operand 1 -- `ldr za\\[w11,0\\],\\[x0\\]'\n+[^:]*:[0-9]+: Error: invalid addressing mode at operand 2 -- `ldr za\\[w12,1\\],\\[sp,x0\\]'\n+[^:]*:[0-9]+: Error: operand 2 must have the same immediate value as operand 1 -- `ldr za\\[w12,0\\],\\[sp,#1,mul vl\\]'\n+[^:]*:[0-9]+: Error: operand 2 must have the same immediate value as operand 1 -- `ldr za\\[w13,9\\],\\[x17,#19,mul vl\\]'\n+[^:]*:[0-9]+: Error: offset out of range at operand 1 -- `ldr za\\[w13,21\\],\\[x17,#21,mul vl\\]'\n+[^:]*:[0-9]+: Error: offset out of range at operand 1 -- `ldr za\\[w15,32\\],\\[x17,#15,mul vl\\]'\n+[^:]*:[0-9]+: Error: expected vector select register W12-W15 at operand 1 -- `ldr za\\[w16,15\\],\\[sp,#15,mul vl\\]'\n+[^:]*:[0-9]+: Error: only 'MUL VL' is permitted at operand 2 -- `ldr za\\[w12,0\\],\\[x0,#0,mul#1\\]'\n+[^:]*:[0-9]+: Error: only 'MUL VL' is permitted at operand 2 -- `ldr za\\[w13,0\\],\\[sp,#0,mul#2\\]'\n+[^:]*:[0-9]+: Error: only 'MUL VL' is permitted at operand 2 -- `ldr za\\[w14,9\\],\\[x17,#9,mul#3\\]'\n+[^:]*:[0-9]+: Error: only 'MUL VL' is permitted at operand 2 -- `ldr za\\[w15,15\\],\\[sp,#15,mul#4\\]'\n+[^:]*:[0-9]+: Error: expected vector select register W12-W15 at operand 1 -- `str za\\[w11,0\\],\\[x0\\]'\n+[^:]*:[0-9]+: Error: invalid addressing mode at operand 2 -- `str za\\[w12,1\\],\\[sp,x0\\]'\n+[^:]*:[0-9]+: Error: operand 2 must have the same immediate value as operand 1 -- `str za\\[w12,0\\],\\[sp,#1,mul vl\\]'\n+[^:]*:[0-9]+: Error: operand 2 must have the same immediate value as operand 1 -- `str za\\[w13,9\\],\\[x17,#19,mul vl\\]'\n+[^:]*:[0-9]+: Error: offset out of range at operand 1 -- `str za\\[w13,21\\],\\[x17,#21,mul vl\\]'\n+[^:]*:[0-9]+: Error: offset out of range at operand 1 -- `str za\\[w15,32\\],\\[x17,#15,mul vl\\]'\n+[^:]*:[0-9]+: Error: expected vector select register W12-W15 at operand 1 -- `str za\\[w16,15\\],\\[sp,#15,mul vl\\]'\n+[^:]*:[0-9]+: Error: only 'MUL VL' is permitted at operand 2 -- `str za\\[w12,0\\],\\[x0,#0,mul#1\\]'\n+[^:]*:[0-9]+: Error: only 'MUL VL' is permitted at operand 2 -- `str za\\[w13,0\\],\\[sp,#0,mul#2\\]'\n+[^:]*:[0-9]+: Error: only 'MUL VL' is permitted at operand 2 -- `str za\\[w14,9\\],\\[x17,#9,mul#3\\]'\n+[^:]*:[0-9]+: Error: only 'MUL VL' is permitted at operand 2 -- `str za\\[w15,15\\],\\[sp,#15,mul#4\\]'\n+[^:]*:[0-9]+: Error: operand 2 must have the same immediate value as operand 1 -- `ldr za\\[w13,13\\],\\[x17,#23,mul vl\\]'\n+[^:]*:[0-9]+: Error: operand 2 must have the same immediate value as operand 1 -- `str za\\[w13,13\\],\\[x17,#23,mul vl\\]'\n+[^:]*:[0-9]+: Error: offset out of range at operand 1 -- `ldr za\\[w13,23\\],\\[x17,#13,mul vl\\]'\n+[^:]*:[0-9]+: Error: offset out of range at operand 1 -- `str za\\[w13,23\\],\\[x17,#13,mul vl\\]'\n+[^:]*:[0-9]+: Error: offset out of range at operand 1 -- `ldr za\\[w13,16\\],\\[x17,#16,mul vl\\]'\n+[^:]*:[0-9]+: Error: offset out of range at operand 1 -- `str za\\[w13,16\\],\\[x17,#16,mul vl\\]'\n+[^:]*:[0-9]+: Error: offset out of range at operand 1 -- `ldr za\\[w13,-1\\],\\[x17,#1,mul vl\\]'\n+[^:]*:[0-9]+: Error: offset out of range at operand 1 -- `str za\\[w13,-1\\],\\[x17,#1,mul vl\\]'\n+[^:]*:[0-9]+: Error: operand 2 must have the same immediate value as operand 1 -- `ldr za\\[w13,1\\],\\[x17,#-1,mul vl\\]'\n+[^:]*:[0-9]+: Error: operand 2 must have the same immediate value as operand 1 -- `str za\\[w13,1\\],\\[x17,#-1,mul vl\\]'"
    },
    {
      "sha": "0d92d843a4fbe9f27b05aadc71009301c7dd4209",
      "filename": "gas/testsuite/gas/aarch64/sme-7-illegal.s",
      "status": "added",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-7-illegal.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-7-illegal.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-7-illegal.s?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -0,0 +1,39 @@\n+/* Scalable Matrix Extension (SME).  */\n+\n+/* Load vector to ZA array.  */\n+ldr za[w11, 0], [x0]\n+ldr za[w12, 1], [sp, x0]\n+ldr za[w12, 0], [sp, #1, mul vl]\n+ldr za[w13, 9], [x17, #19, mul vl]\n+ldr za[w13, 21], [x17, #21, mul vl]\n+ldr za[w15, 32], [x17, #15, mul vl]\n+ldr za[w16, 15], [sp, #15, mul vl]\n+ldr za[w12, 0], [x0, #0, mul #1]\n+ldr za[w13, 0], [sp, #0, mul #2]\n+ldr za[w14, 9], [x17, #9, mul #3]\n+ldr za[w15, 15], [sp, #15, mul #4]\n+\n+/* Store vector from ZA array.  */\n+str za[w11, 0], [x0]\n+str za[w12, 1], [sp, x0]\n+str za[w12, 0], [sp, #1, mul vl]\n+str za[w13, 9], [x17, #19, mul vl]\n+str za[w13, 21], [x17, #21, mul vl]\n+str za[w15, 32], [x17, #15, mul vl]\n+str za[w16, 15], [sp, #15, mul vl]\n+str za[w12, 0], [x0, #0, mul #1]\n+str za[w13, 0], [sp, #0, mul #2]\n+str za[w14, 9], [x17, #9, mul #3]\n+str za[w15, 15], [sp, #15, mul #4]\n+\n+/* Operands indexes are tied.  */\n+ldr za[w13, 13], [x17, #23, mul vl]\n+str za[w13, 13], [x17, #23, mul vl]\n+ldr za[w13, 23], [x17, #13, mul vl]\n+str za[w13, 23], [x17, #13, mul vl]\n+ldr za[w13, 16], [x17, #16, mul vl]\n+str za[w13, 16], [x17, #16, mul vl]\n+ldr za[w13, -1], [x17, #1, mul vl]\n+str za[w13, -1], [x17, #1, mul vl]\n+ldr za[w13, 1], [x17, #-1, mul vl]\n+str za[w13, 1], [x17, #-1, mul vl]"
    },
    {
      "sha": "19a3e6179e7d92fbea4fe9a6b6257faaf2ed8cde",
      "filename": "gas/testsuite/gas/aarch64/sme-7.d",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-7.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-7.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-7.d?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -0,0 +1,27 @@\n+#name: SME extension (LDR and STR instructions)\n+#as: -march=armv8-a+sme\n+#objdump: -dr\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+ <.*>:\n+   0:\te1000000 \tldr\tza\\[w12, 0\\], \\[x0\\]\n+   4:\te10003e0 \tldr\tza\\[w12, 0\\], \\[sp\\]\n+   8:\te1000000 \tldr\tza\\[w12, 0\\], \\[x0\\]\n+   c:\te10003e0 \tldr\tza\\[w12, 0\\], \\[sp\\]\n+  10:\te1006220 \tldr\tza\\[w15, 0\\], \\[x17\\]\n+  14:\te1002229 \tldr\tza\\[w13, 9\\], \\[x17, #9, mul vl\\]\n+  18:\te100622f \tldr\tza\\[w15, 15\\], \\[x17, #15, mul vl\\]\n+  1c:\te10063ef \tldr\tza\\[w15, 15\\], \\[sp, #15, mul vl\\]\n+  20:\te1200000 \tstr\tza\\[w12, 0\\], \\[x0\\]\n+  24:\te12003e0 \tstr\tza\\[w12, 0\\], \\[sp\\]\n+  28:\te1200000 \tstr\tza\\[w12, 0\\], \\[x0\\]\n+  2c:\te12003e0 \tstr\tza\\[w12, 0\\], \\[sp\\]\n+  30:\te1206220 \tstr\tza\\[w15, 0\\], \\[x17\\]\n+  34:\te1202229 \tstr\tza\\[w13, 9\\], \\[x17, #9, mul vl\\]\n+  38:\te120622f \tstr\tza\\[w15, 15\\], \\[x17, #15, mul vl\\]\n+  3c:\te12063ef \tstr\tza\\[w15, 15\\], \\[sp, #15, mul vl\\]\n+  40:\te10003e0 \tldr\tza\\[w12, 0\\], \\[sp\\]\n+  44:\te1206220 \tstr\tza\\[w15, 0\\], \\[x17\\]"
    },
    {
      "sha": "7582d6cc8217bd38645711868c7520974d470679",
      "filename": "gas/testsuite/gas/aarch64/sme-7.s",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-7.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/gas/testsuite/gas/aarch64/sme-7.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sme-7.s?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -0,0 +1,27 @@\n+/* SME Extension (LDR and STR instructions).  */\n+/* Load vector to ZA array.  */\n+ldr za[w12, 0], [x0]\n+ldr za[w12, 0], [sp]\n+ldr za[w12, 0], [x0, #0, mul vl]\n+ldr za[w12, 0], [sp, #0, mul vl]\n+ldr za[w15, 0], [x17]\n+ldr za[w13, 9], [x17, #9, mul vl]\n+ldr za[w15, 15], [x17, #15, mul vl]\n+ldr za[w15, 15], [sp, #15, mul vl]\n+\n+/* Store vector from ZA array.  */\n+str za[w12, 0], [x0]\n+str za[w12, 0], [sp]\n+str za[w12, 0], [x0, #0, mul vl]\n+str za[w12, 0], [sp, #0, mul vl]\n+str za[w15, 0], [x17]\n+str za[w13, 9], [x17, #9, mul vl]\n+str za[w15, 15], [x17, #15, mul vl]\n+str za[w15, 15], [sp, #15, mul vl]\n+\n+/* Register aliases.  */\n+foo .req w12\n+bar .req w15\n+\n+ldr za[foo, 0], [sp, #0, mul vl]\n+str za[bar, 0], [x17]"
    },
    {
      "sha": "ea1b495c1bf773bb770717113eb791bb85f13a13",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -337,7 +337,6 @@ enum aarch64_opnd\n   AARCH64_OPND_PRFOP,\t\t/* Prefetch operation.  */\n   AARCH64_OPND_BARRIER_PSB,\t/* Barrier operand for PSB.  */\n   AARCH64_OPND_BTI_TARGET,\t/* BTI {<target>}.  */\n-\n   AARCH64_OPND_SVE_ADDR_RI_S4x16,   /* SVE [<Xn|SP>, #<simm4>*16].  */\n   AARCH64_OPND_SVE_ADDR_RI_S4x32,   /* SVE [<Xn|SP>, #<simm4>*32].  */\n   AARCH64_OPND_SVE_ADDR_RI_S4xVL,   /* SVE [<Xn|SP>, #<simm4>, MUL VL].  */\n@@ -355,6 +354,7 @@ enum aarch64_opnd\n   AARCH64_OPND_SVE_ADDR_RR_LSL1,    /* SVE [<Xn|SP>, <Xm|XZR>, LSL #1].  */\n   AARCH64_OPND_SVE_ADDR_RR_LSL2,    /* SVE [<Xn|SP>, <Xm|XZR>, LSL #2].  */\n   AARCH64_OPND_SVE_ADDR_RR_LSL3,    /* SVE [<Xn|SP>, <Xm|XZR>, LSL #3].  */\n+  AARCH64_OPND_SVE_ADDR_RR_LSL4,    /* SVE [<Xn|SP>, <Xm|XZR>, LSL #4].  */\n   AARCH64_OPND_SVE_ADDR_RX,\t    /* SVE [<Xn|SP>, <Xm>].  */\n   AARCH64_OPND_SVE_ADDR_RX_LSL1,    /* SVE [<Xn|SP>, <Xm>, LSL #1].  */\n   AARCH64_OPND_SVE_ADDR_RX_LSL2,    /* SVE [<Xn|SP>, <Xm>, LSL #2].  */\n@@ -451,6 +451,9 @@ enum aarch64_opnd\n   AARCH64_OPND_SME_ZA_HV_idx_dest,\t/* SME destination ZA tile vector.  */\n   AARCH64_OPND_SME_Pm,\t\t/* SME scalable predicate register, bits [15:13].  */\n   AARCH64_OPND_SME_list_of_64bit_tiles, /* SME list of ZA tiles.  */\n+  AARCH64_OPND_SME_ZA_HV_idx_ldstr,\t/* SME destination ZA tile vector.  */\n+  AARCH64_OPND_SME_ZA_array,        /* SME ZA[<Wv>{, #<imm>}].  */\n+  AARCH64_OPND_SME_ADDR_RI_U4xVL,   /* SME [<Xn|SP>{, #<imm>, MUL VL}].  */\n   AARCH64_OPND_TME_UIMM16,\t/* TME unsigned 16-bit immediate.  */\n   AARCH64_OPND_SM3_IMM2,\t/* SM3 encodes lane in bits [13, 14].  */\n };\n@@ -616,6 +619,8 @@ enum aarch64_insn_class\n   pcreladdr,\n   ic_system,\n   sme_misc,\n+  sme_ldr,\n+  sme_str,\n   sve_cpy,\n   sve_index,\n   sve_limm,\n@@ -1215,6 +1220,10 @@ struct aarch64_inst\n      No syntax error, but the operands are not a valid combination, e.g.\n      FMOV D0,S0\n \n+   AARCH64_OPDE_UNTIED_IMMS\n+     The asm failed to use the same immediate for a destination operand\n+     and a tied source operand.\n+\n    AARCH64_OPDE_UNTIED_OPERAND\n      The asm failed to use the same register for a destination operand\n      and a tied source operand.\n@@ -1255,6 +1264,7 @@ enum aarch64_operand_error_kind\n   AARCH64_OPDE_SYNTAX_ERROR,\n   AARCH64_OPDE_FATAL_SYNTAX_ERROR,\n   AARCH64_OPDE_INVALID_VARIANT,\n+  AARCH64_OPDE_UNTIED_IMMS,\n   AARCH64_OPDE_UNTIED_OPERAND,\n   AARCH64_OPDE_OUT_OF_RANGE,\n   AARCH64_OPDE_UNALIGNED,"
    },
    {
      "sha": "54ec35aac1667424f4d8c945df15bd097b3efb8f",
      "filename": "opcodes/aarch64-asm-2.c",
      "status": "modified",
      "additions": 42,
      "deletions": 36,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/opcodes/aarch64-asm-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/opcodes/aarch64-asm-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm-2.c?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -640,7 +640,6 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 29:\n     case 30:\n     case 31:\n-    case 166:\n     case 167:\n     case 168:\n     case 169:\n@@ -650,7 +649,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 173:\n     case 174:\n     case 175:\n-    case 190:\n+    case 176:\n     case 191:\n     case 192:\n     case 193:\n@@ -659,11 +658,12 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 196:\n     case 197:\n     case 198:\n-    case 204:\n-    case 207:\n-    case 209:\n+    case 199:\n+    case 205:\n+    case 208:\n     case 210:\n-    case 213:\n+    case 211:\n+    case 214:\n       return aarch64_ins_regno (self, info, code, inst, errors);\n     case 15:\n       return aarch64_ins_reg_extended (self, info, code, inst, errors);\n@@ -675,7 +675,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 33:\n     case 34:\n     case 35:\n-    case 216:\n+    case 220:\n       return aarch64_ins_reglane (self, info, code, inst, errors);\n     case 36:\n       return aarch64_ins_reglist (self, info, code, inst, errors);\n@@ -710,18 +710,18 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 82:\n     case 83:\n     case 84:\n-    case 163:\n-    case 165:\n-    case 182:\n+    case 164:\n+    case 166:\n     case 183:\n     case 184:\n     case 185:\n     case 186:\n     case 187:\n     case 188:\n     case 189:\n-    case 214:\n+    case 190:\n     case 215:\n+    case 219:\n       return aarch64_ins_imm (self, info, code, inst, errors);\n     case 44:\n     case 45:\n@@ -731,10 +731,10 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 48:\n       return aarch64_ins_advsimd_imm_modified (self, info, code, inst, errors);\n     case 52:\n-    case 153:\n+    case 154:\n       return aarch64_ins_fpimm (self, info, code, inst, errors);\n     case 70:\n-    case 161:\n+    case 162:\n       return aarch64_ins_limm (self, info, code, inst, errors);\n     case 71:\n       return aarch64_ins_aimm (self, info, code, inst, errors);\n@@ -744,11 +744,11 @@ aarch64_insert_operand (const aarch64_operand *self,\n       return aarch64_ins_fbits (self, info, code, inst, errors);\n     case 75:\n     case 76:\n-    case 158:\n+    case 159:\n       return aarch64_ins_imm_rotate2 (self, info, code, inst, errors);\n     case 77:\n-    case 157:\n-    case 159:\n+    case 158:\n+    case 160:\n       return aarch64_ins_imm_rotate1 (self, info, code, inst, errors);\n     case 78:\n     case 79:\n@@ -824,65 +824,71 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 133:\n     case 134:\n     case 135:\n-      return aarch64_ins_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 136:\n+      return aarch64_ins_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 137:\n     case 138:\n     case 139:\n     case 140:\n     case 141:\n     case 142:\n     case 143:\n-      return aarch64_ins_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 144:\n+      return aarch64_ins_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 145:\n     case 146:\n     case 147:\n-      return aarch64_ins_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 148:\n-      return aarch64_ins_sve_addr_zz_lsl (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 149:\n-      return aarch64_ins_sve_addr_zz_sxtw (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zz_lsl (self, info, code, inst, errors);\n     case 150:\n-      return aarch64_ins_sve_addr_zz_uxtw (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zz_sxtw (self, info, code, inst, errors);\n     case 151:\n-      return aarch64_ins_sve_aimm (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zz_uxtw (self, info, code, inst, errors);\n     case 152:\n+      return aarch64_ins_sve_aimm (self, info, code, inst, errors);\n+    case 153:\n       return aarch64_ins_sve_asimm (self, info, code, inst, errors);\n-    case 154:\n-      return aarch64_ins_sve_float_half_one (self, info, code, inst, errors);\n     case 155:\n-      return aarch64_ins_sve_float_half_two (self, info, code, inst, errors);\n+      return aarch64_ins_sve_float_half_one (self, info, code, inst, errors);\n     case 156:\n+      return aarch64_ins_sve_float_half_two (self, info, code, inst, errors);\n+    case 157:\n       return aarch64_ins_sve_float_zero_one (self, info, code, inst, errors);\n-    case 160:\n+    case 161:\n       return aarch64_ins_inv_limm (self, info, code, inst, errors);\n-    case 162:\n+    case 163:\n       return aarch64_ins_sve_limm_mov (self, info, code, inst, errors);\n-    case 164:\n+    case 165:\n       return aarch64_ins_sve_scale (self, info, code, inst, errors);\n-    case 176:\n     case 177:\n     case 178:\n-      return aarch64_ins_sve_shlimm (self, info, code, inst, errors);\n     case 179:\n+      return aarch64_ins_sve_shlimm (self, info, code, inst, errors);\n     case 180:\n     case 181:\n+    case 182:\n       return aarch64_ins_sve_shrimm (self, info, code, inst, errors);\n-    case 199:\n     case 200:\n     case 201:\n     case 202:\n     case 203:\n+    case 204:\n       return aarch64_ins_sve_quad_index (self, info, code, inst, errors);\n-    case 205:\n-      return aarch64_ins_sve_index (self, info, code, inst, errors);\n     case 206:\n-    case 208:\n+      return aarch64_ins_sve_index (self, info, code, inst, errors);\n+    case 207:\n+    case 209:\n       return aarch64_ins_sve_reglist (self, info, code, inst, errors);\n-    case 211:\n     case 212:\n+    case 213:\n+    case 216:\n       return aarch64_ins_sme_za_hv_tiles (self, info, code, inst, errors);\n+    case 217:\n+      return aarch64_ins_sme_za_array (self, info, code, inst, errors);\n+    case 218:\n+      return aarch64_ins_sme_addr_ri_u4xvl (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }\n }"
    },
    {
      "sha": "a2b0e864cb8310d8a351e0141cd979bb53fd92ac",
      "filename": "opcodes/aarch64-asm.c",
      "status": "modified",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/opcodes/aarch64-asm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/opcodes/aarch64-asm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm.c?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -1380,6 +1380,53 @@ aarch64_ins_sme_za_hv_tiles (const aarch64_operand *self,\n   return true;\n }\n \n+/* Encode in SME instruction ZERO list of up to eight 64-bit element tile names\n+   separated by commas, encoded in the \"imm8\" field.\n+\n+   For programmer convenience an assembler must also accept the names of\n+   32-bit, 16-bit and 8-bit element tiles which are converted into the\n+   corresponding set of 64-bit element tiles.\n+*/\n+bool\n+aarch64_ins_sme_za_list (const aarch64_operand *self,\n+                         const aarch64_opnd_info *info,\n+                         aarch64_insn *code,\n+                         const aarch64_inst *inst ATTRIBUTE_UNUSED,\n+                         aarch64_operand_error *errors ATTRIBUTE_UNUSED)\n+{\n+  int fld_mask = info->imm.value;\n+  insert_field (self->fields[0], code, fld_mask, 0);\n+  return true;\n+}\n+\n+bool\n+aarch64_ins_sme_za_array (const aarch64_operand *self,\n+                          const aarch64_opnd_info *info,\n+                          aarch64_insn *code,\n+                          const aarch64_inst *inst ATTRIBUTE_UNUSED,\n+                          aarch64_operand_error *errors ATTRIBUTE_UNUSED)\n+{\n+  int regno = info->za_tile_vector.index.regno - 12;\n+  int imm = info->za_tile_vector.index.imm;\n+  insert_field (self->fields[0], code, regno, 0);\n+  insert_field (self->fields[1], code, imm, 0);\n+  return true;\n+}\n+\n+bool\n+aarch64_ins_sme_addr_ri_u4xvl (const aarch64_operand *self,\n+                               const aarch64_opnd_info *info,\n+                               aarch64_insn *code,\n+                               const aarch64_inst *inst ATTRIBUTE_UNUSED,\n+                               aarch64_operand_error *errors ATTRIBUTE_UNUSED)\n+{\n+  int regno = info->addr.base_regno;\n+  int imm = info->addr.offset.imm;\n+  insert_field (self->fields[0], code, regno, 0);\n+  insert_field (self->fields[1], code, imm, 0);\n+  return true;\n+}\n+\n /* Miscellaneous encoding functions.  */\n \n /* Encode size[0], i.e. bit 22, for"
    },
    {
      "sha": "1f9e85c28fd2a44107b004f726dcf3057fc3d3d7",
      "filename": "opcodes/aarch64-asm.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/opcodes/aarch64-asm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/opcodes/aarch64-asm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm.h?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -99,6 +99,9 @@ AARCH64_DECL_OPD_INSERTER (ins_sve_scale);\n AARCH64_DECL_OPD_INSERTER (ins_sve_shlimm);\n AARCH64_DECL_OPD_INSERTER (ins_sve_shrimm);\n AARCH64_DECL_OPD_INSERTER (ins_sme_za_hv_tiles);\n+AARCH64_DECL_OPD_INSERTER (ins_sme_za_list);\n+AARCH64_DECL_OPD_INSERTER (ins_sme_za_array);\n+AARCH64_DECL_OPD_INSERTER (ins_sme_addr_ri_u4xvl);\n AARCH64_DECL_OPD_INSERTER (ins_imm_rotate1);\n AARCH64_DECL_OPD_INSERTER (ins_imm_rotate2);\n "
    },
    {
      "sha": "5ce26ddc1825732e3f40d8e63d49a74e3c0cab60",
      "filename": "opcodes/aarch64-dis-2.c",
      "status": "modified",
      "additions": 343,
      "deletions": 185,
      "changes": 528,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/opcodes/aarch64-dis-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/opcodes/aarch64-dis-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis-2.c?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -173,19 +173,63 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                 {\n                                   if (((word >> 22) & 0x1) == 0)\n                                     {\n-                                      /* 33222222222211111111110000000000\n-                                         10987654321098765432109876543210\n-                                         xx100000x00xxxxxxxxxxxxxxxx0xxxx\n-                                         smopa.  */\n-                                      return 2360;\n+                                      if (((word >> 23) & 0x1) == 0)\n+                                        {\n+                                          /* 33222222222211111111110000000000\n+                                             10987654321098765432109876543210\n+                                             xx100000000xxxxxxxxxxxxxxxx0xxxx\n+                                             ld1b.  */\n+                                          return 2381;\n+                                        }\n+                                      else\n+                                        {\n+                                          if (((word >> 30) & 0x1) == 0)\n+                                            {\n+                                              /* 33222222222211111111110000000000\n+                                                 10987654321098765432109876543210\n+                                                 x0100000100xxxxxxxxxxxxxxxx0xxxx\n+                                                 smopa.  */\n+                                              return 2360;\n+                                            }\n+                                          else\n+                                            {\n+                                              /* 33222222222211111111110000000000\n+                                                 10987654321098765432109876543210\n+                                                 x1100000100xxxxxxxxxxxxxxxx0xxxx\n+                                                 ld1w.  */\n+                                              return 2383;\n+                                            }\n+                                        }\n                                     }\n                                   else\n                                     {\n-                                      /* 33222222222211111111110000000000\n-                                         10987654321098765432109876543210\n-                                         xx100000x10xxxxxxxxxxxxxxxx0xxxx\n-                                         smopa.  */\n-                                      return 2361;\n+                                      if (((word >> 23) & 0x1) == 0)\n+                                        {\n+                                          /* 33222222222211111111110000000000\n+                                             10987654321098765432109876543210\n+                                             xx100000010xxxxxxxxxxxxxxxx0xxxx\n+                                             ld1h.  */\n+                                          return 2382;\n+                                        }\n+                                      else\n+                                        {\n+                                          if (((word >> 30) & 0x1) == 0)\n+                                            {\n+                                              /* 33222222222211111111110000000000\n+                                                 10987654321098765432109876543210\n+                                                 x0100000110xxxxxxxxxxxxxxxx0xxxx\n+                                                 smopa.  */\n+                                              return 2361;\n+                                            }\n+                                          else\n+                                            {\n+                                              /* 33222222222211111111110000000000\n+                                                 10987654321098765432109876543210\n+                                                 x1100000110xxxxxxxxxxxxxxxx0xxxx\n+                                                 ld1d.  */\n+                                              return 2384;\n+                                            }\n+                                        }\n                                     }\n                                 }\n                               else\n@@ -215,19 +259,63 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                             {\n                               if (((word >> 22) & 0x1) == 0)\n                                 {\n-                                  /* 33222222222211111111110000000000\n-                                     10987654321098765432109876543210\n-                                     xxx00000x01xxxxxxxxxxxxxxxx0xxxx\n-                                     sumopa.  */\n-                                  return 2364;\n+                                  if (((word >> 23) & 0x1) == 0)\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         xxx00000001xxxxxxxxxxxxxxxx0xxxx\n+                                         st1b.  */\n+                                      return 2391;\n+                                    }\n+                                  else\n+                                    {\n+                                      if (((word >> 30) & 0x1) == 0)\n+                                        {\n+                                          /* 33222222222211111111110000000000\n+                                             10987654321098765432109876543210\n+                                             x0x00000101xxxxxxxxxxxxxxxx0xxxx\n+                                             sumopa.  */\n+                                          return 2364;\n+                                        }\n+                                      else\n+                                        {\n+                                          /* 33222222222211111111110000000000\n+                                             10987654321098765432109876543210\n+                                             x1x00000101xxxxxxxxxxxxxxxx0xxxx\n+                                             st1w.  */\n+                                          return 2393;\n+                                        }\n+                                    }\n                                 }\n                               else\n                                 {\n-                                  /* 33222222222211111111110000000000\n-                                     10987654321098765432109876543210\n-                                     xxx00000x11xxxxxxxxxxxxxxxx0xxxx\n-                                     sumopa.  */\n-                                  return 2365;\n+                                  if (((word >> 23) & 0x1) == 0)\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         xxx00000011xxxxxxxxxxxxxxxx0xxxx\n+                                         st1h.  */\n+                                      return 2392;\n+                                    }\n+                                  else\n+                                    {\n+                                      if (((word >> 30) & 0x1) == 0)\n+                                        {\n+                                          /* 33222222222211111111110000000000\n+                                             10987654321098765432109876543210\n+                                             x0x00000111xxxxxxxxxxxxxxxx0xxxx\n+                                             sumopa.  */\n+                                          return 2365;\n+                                        }\n+                                      else\n+                                        {\n+                                          /* 33222222222211111111110000000000\n+                                             10987654321098765432109876543210\n+                                             x1x00000111xxxxxxxxxxxxxxxx0xxxx\n+                                             st1d.  */\n+                                          return 2394;\n+                                        }\n+                                    }\n                                 }\n                             }\n                           else\n@@ -281,60 +369,104 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                             {\n                               if (((word >> 22) & 0x1) == 0)\n                                 {\n-                                  if (((word >> 29) & 0x1) == 0)\n+                                  if (((word >> 23) & 0x1) == 0)\n                                     {\n                                       /* 33222222222211111111110000000000\n                                          10987654321098765432109876543210\n-                                         xx000001x00xxxxxxxxxxxxxxxx0xxxx\n-                                         bfmopa.  */\n-                                      return 2352;\n+                                         xxx00001000xxxxxxxxxxxxxxxx0xxxx\n+                                         ldr.  */\n+                                      return 2401;\n                                     }\n                                   else\n                                     {\n-                                      /* 33222222222211111111110000000000\n-                                         10987654321098765432109876543210\n-                                         xx100001x00xxxxxxxxxxxxxxxx0xxxx\n-                                         usmopa.  */\n-                                      return 2372;\n+                                      if (((word >> 29) & 0x1) == 0)\n+                                        {\n+                                          /* 33222222222211111111110000000000\n+                                             10987654321098765432109876543210\n+                                             xx000001100xxxxxxxxxxxxxxxx0xxxx\n+                                             bfmopa.  */\n+                                          return 2352;\n+                                        }\n+                                      else\n+                                        {\n+                                          /* 33222222222211111111110000000000\n+                                             10987654321098765432109876543210\n+                                             xx100001100xxxxxxxxxxxxxxxx0xxxx\n+                                             usmopa.  */\n+                                          return 2372;\n+                                        }\n                                     }\n                                 }\n                               else\n                                 {\n-                                  /* 33222222222211111111110000000000\n-                                     10987654321098765432109876543210\n-                                     xxx00001x10xxxxxxxxxxxxxxxx0xxxx\n-                                     usmopa.  */\n-                                  return 2373;\n+                                  if (((word >> 30) & 0x1) == 0)\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         x0x00001x10xxxxxxxxxxxxxxxx0xxxx\n+                                         usmopa.  */\n+                                      return 2373;\n+                                    }\n+                                  else\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         x1x00001x10xxxxxxxxxxxxxxxx0xxxx\n+                                         ld1q.  */\n+                                      return 2385;\n+                                    }\n                                 }\n                             }\n                           else\n                             {\n                               if (((word >> 22) & 0x1) == 0)\n                                 {\n-                                  if (((word >> 29) & 0x1) == 0)\n+                                  if (((word >> 23) & 0x1) == 0)\n                                     {\n                                       /* 33222222222211111111110000000000\n                                          10987654321098765432109876543210\n-                                         xx000001x01xxxxxxxxxxxxxxxx0xxxx\n-                                         fmopa.  */\n-                                      return 2356;\n+                                         xxx00001001xxxxxxxxxxxxxxxx0xxxx\n+                                         str.  */\n+                                      return 2402;\n                                     }\n                                   else\n                                     {\n-                                      /* 33222222222211111111110000000000\n-                                         10987654321098765432109876543210\n-                                         xx100001x01xxxxxxxxxxxxxxxx0xxxx\n-                                         umopa.  */\n-                                      return 2368;\n+                                      if (((word >> 29) & 0x1) == 0)\n+                                        {\n+                                          /* 33222222222211111111110000000000\n+                                             10987654321098765432109876543210\n+                                             xx000001101xxxxxxxxxxxxxxxx0xxxx\n+                                             fmopa.  */\n+                                          return 2356;\n+                                        }\n+                                      else\n+                                        {\n+                                          /* 33222222222211111111110000000000\n+                                             10987654321098765432109876543210\n+                                             xx100001101xxxxxxxxxxxxxxxx0xxxx\n+                                             umopa.  */\n+                                          return 2368;\n+                                        }\n                                     }\n                                 }\n                               else\n                                 {\n-                                  /* 33222222222211111111110000000000\n-                                     10987654321098765432109876543210\n-                                     xxx00001x11xxxxxxxxxxxxxxxx0xxxx\n-                                     umopa.  */\n-                                  return 2369;\n+                                  if (((word >> 30) & 0x1) == 0)\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         x0x00001x11xxxxxxxxxxxxxxxx0xxxx\n+                                         umopa.  */\n+                                      return 2369;\n+                                    }\n+                                  else\n+                                    {\n+                                      /* 33222222222211111111110000000000\n+                                         10987654321098765432109876543210\n+                                         x1x00001x11xxxxxxxxxxxxxxxx0xxxx\n+                                         st1q.  */\n+                                      return 2395;\n+                                    }\n                                 }\n                             }\n                         }\n@@ -2764,15 +2896,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          00011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlurb.  */\n-                                                      return 2421;\n+                                                      return 2443;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          10011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlur.  */\n-                                                      return 2429;\n+                                                      return 2451;\n                                                     }\n                                                 }\n                                               else\n@@ -2783,15 +2915,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          01011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlurh.  */\n-                                                      return 2425;\n+                                                      return 2447;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          11011001000xxxxxxxxx00xxxxxxxxxx\n                                                          stlur.  */\n-                                                      return 2432;\n+                                                      return 2454;\n                                                     }\n                                                 }\n                                             }\n@@ -2871,15 +3003,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          00011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapurb.  */\n-                                                      return 2422;\n+                                                      return 2444;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          10011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapur.  */\n-                                                      return 2430;\n+                                                      return 2452;\n                                                     }\n                                                 }\n                                               else\n@@ -2890,15 +3022,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          01011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapurh.  */\n-                                                      return 2426;\n+                                                      return 2448;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          11011001010xxxxxxxxx00xxxxxxxxxx\n                                                          ldapur.  */\n-                                                      return 2433;\n+                                                      return 2455;\n                                                     }\n                                                 }\n                                             }\n@@ -2981,15 +3113,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          00011001100xxxxxxxxx00xxxxxxxxxx\n                                                          ldapursb.  */\n-                                                      return 2424;\n+                                                      return 2446;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          10011001100xxxxxxxxx00xxxxxxxxxx\n                                                          ldapursw.  */\n-                                                      return 2431;\n+                                                      return 2453;\n                                                     }\n                                                 }\n                                               else\n@@ -2998,7 +3130,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x1011001100xxxxxxxxx00xxxxxxxxxx\n                                                      ldapursh.  */\n-                                                  return 2428;\n+                                                  return 2450;\n                                                 }\n                                             }\n                                           else\n@@ -3009,15 +3141,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0011001110xxxxxxxxx00xxxxxxxxxx\n                                                      ldapursb.  */\n-                                                  return 2423;\n+                                                  return 2445;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1011001110xxxxxxxxx00xxxxxxxxxx\n                                                      ldapursh.  */\n-                                                  return 2427;\n+                                                  return 2449;\n                                                 }\n                                             }\n                                         }\n@@ -3503,15 +3635,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              xxx11010x00xxxxxx0xx10xxxxxxxxxx\n                                              setf8.  */\n-                                          return 2419;\n+                                          return 2441;\n                                         }\n                                       else\n                                         {\n                                           /* 33222222222211111111110000000000\n                                              10987654321098765432109876543210\n                                              xxx11010x00xxxxxx1xx10xxxxxxxxxx\n                                              setf16.  */\n-                                          return 2420;\n+                                          return 2442;\n                                         }\n                                     }\n                                   else\n@@ -3657,7 +3789,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              xxx11010000xxxxxxxxx01xxxxxxxxxx\n                                              rmif.  */\n-                                          return 2418;\n+                                          return 2440;\n                                         }\n                                       else\n                                         {\n@@ -4706,7 +4838,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  010001x01x1xxxxx000110xxxxxxxxxx\n                                                                  usdot.  */\n-                                                              return 2438;\n+                                                              return 2460;\n                                                             }\n                                                         }\n                                                     }\n@@ -4780,7 +4912,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  010001x01x1xxxxx000111xxxxxxxxxx\n                                                                  sudot.  */\n-                                                              return 2439;\n+                                                              return 2461;\n                                                             }\n                                                         }\n                                                     }\n@@ -7399,7 +7531,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              010001x0xx0xxxxx011110xxxxxxxxxx\n                                                              usdot.  */\n-                                                          return 2437;\n+                                                          return 2459;\n                                                         }\n                                                     }\n                                                 }\n@@ -9103,7 +9235,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  011001x0100xxx10101xxxxxxxxxxxxx\n                                                                  bfcvtnt.  */\n-                                                              return 2466;\n+                                                              return 2488;\n                                                             }\n                                                         }\n                                                       else\n@@ -9346,15 +9478,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                  10987654321098765432109876543210\n                                                  101001x00x1xxxxxx00xxxxxxxxxxxxx\n                                                  ld1rob.  */\n-                                              return 2442;\n+                                              return 2464;\n                                             }\n                                           else\n                                             {\n                                               /* 33222222222211111111110000000000\n                                                  10987654321098765432109876543210\n                                                  101001x01x1xxxxxx00xxxxxxxxxxxxx\n                                                  ld1roh.  */\n-                                              return 2443;\n+                                              return 2465;\n                                             }\n                                         }\n                                       else\n@@ -9586,7 +9718,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0011xxxxx010xxxxxxxxxxxxx\n                                                          bfdot.  */\n-                                                      return 2463;\n+                                                      return 2485;\n                                                     }\n                                                   else\n                                                     {\n@@ -9607,15 +9739,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              011001x0111xxxxx010xx0xxxxxxxxxx\n                                                              bfmlalb.  */\n-                                                          return 2470;\n+                                                          return 2492;\n                                                         }\n                                                       else\n                                                         {\n                                                           /* 33222222222211111111110000000000\n                                                              10987654321098765432109876543210\n                                                              011001x0111xxxxx010xx1xxxxxxxxxx\n                                                              bfmlalt.  */\n-                                                          return 2469;\n+                                                          return 2491;\n                                                         }\n                                                     }\n                                                   else\n@@ -9670,7 +9802,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                  10987654321098765432109876543210\n                                                  x11001x0011xxxxx1x0xxxxxxxxxxxxx\n                                                  bfdot.  */\n-                                              return 2462;\n+                                              return 2484;\n                                             }\n                                           else\n                                             {\n@@ -9682,15 +9814,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0111xxxxx1x0xx0xxxxxxxxxx\n                                                          bfmlalb.  */\n-                                                      return 2468;\n+                                                      return 2490;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          011001x0111xxxxx1x0xx1xxxxxxxxxx\n                                                          bfmlalt.  */\n-                                                      return 2467;\n+                                                      return 2489;\n                                                     }\n                                                 }\n                                               else\n@@ -9741,15 +9873,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      101001x00x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1rob.  */\n-                                                  return 2446;\n+                                                  return 2468;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      101001x01x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1roh.  */\n-                                                  return 2447;\n+                                                  return 2469;\n                                                 }\n                                             }\n                                           else\n@@ -10108,7 +10240,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0101xxxxx111xxxxxxxxxxxxx\n                                                          fmmla.  */\n-                                                      return 2440;\n+                                                      return 2462;\n                                                     }\n                                                   else\n                                                     {\n@@ -10141,7 +10273,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0011xxxxx111xxxxxxxxxxxxx\n                                                          bfmmla.  */\n-                                                      return 2464;\n+                                                      return 2486;\n                                                     }\n                                                   else\n                                                     {\n@@ -10171,7 +10303,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          011001x0111xxxxx111xxxxxxxxxxxxx\n                                                          fmmla.  */\n-                                                      return 2441;\n+                                                      return 2463;\n                                                     }\n                                                   else\n                                                     {\n@@ -10300,7 +10432,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  000001x1101xxxxx000x00xxxxxxxxxx\n                                                                  zip1.  */\n-                                                              return 2450;\n+                                                              return 2472;\n                                                             }\n                                                           else\n                                                             {\n@@ -10310,15 +10442,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000010xxxxxxxxxx\n                                                                      uzp1.  */\n-                                                                  return 2452;\n+                                                                  return 2474;\n                                                                 }\n                                                               else\n                                                                 {\n                                                                   /* 33222222222211111111110000000000\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000110xxxxxxxxxx\n                                                                      trn1.  */\n-                                                                  return 2454;\n+                                                                  return 2476;\n                                                                 }\n                                                             }\n                                                         }\n@@ -10330,7 +10462,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  000001x1101xxxxx000x01xxxxxxxxxx\n                                                                  zip2.  */\n-                                                              return 2451;\n+                                                              return 2473;\n                                                             }\n                                                           else\n                                                             {\n@@ -10340,15 +10472,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000011xxxxxxxxxx\n                                                                      uzp2.  */\n-                                                                  return 2453;\n+                                                                  return 2475;\n                                                                 }\n                                                               else\n                                                                 {\n                                                                   /* 33222222222211111111110000000000\n                                                                      10987654321098765432109876543210\n                                                                      000001x1101xxxxx000111xxxxxxxxxx\n                                                                      trn2.  */\n-                                                                  return 2455;\n+                                                                  return 2477;\n                                                                 }\n                                                             }\n                                                         }\n@@ -11396,15 +11528,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                      10987654321098765432109876543210\n                                                                      010001x1000xxxxx100110xxxxxxxxxx\n                                                                      smmla.  */\n-                                                                  return 2434;\n+                                                                  return 2456;\n                                                                 }\n                                                               else\n                                                                 {\n                                                                   /* 33222222222211111111110000000000\n                                                                      10987654321098765432109876543210\n                                                                      010001x1100xxxxx100110xxxxxxxxxx\n                                                                      usmmla.  */\n-                                                                  return 2436;\n+                                                                  return 2458;\n                                                                 }\n                                                             }\n                                                           else\n@@ -11413,7 +11545,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  010001x1x10xxxxx100110xxxxxxxxxx\n                                                                  ummla.  */\n-                                                              return 2435;\n+                                                              return 2457;\n                                                             }\n                                                         }\n                                                     }\n@@ -12909,15 +13041,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      101001x10x1xxxxx000xxxxxxxxxxxxx\n                                                      ld1row.  */\n-                                                  return 2444;\n+                                                  return 2466;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      101001x11x1xxxxx000xxxxxxxxxxxxx\n                                                      ld1rod.  */\n-                                                  return 2445;\n+                                                  return 2467;\n                                                 }\n                                             }\n                                         }\n@@ -13291,15 +13423,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      101001x10x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1row.  */\n-                                                  return 2448;\n+                                                  return 2470;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      101001x11x1xxxxx001xxxxxxxxxxxxx\n                                                      ld1rod.  */\n-                                                  return 2449;\n+                                                  return 2471;\n                                                 }\n                                             }\n                                         }\n@@ -14733,7 +14865,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                          10987654321098765432109876543210\n                                                                          011001x110001x10101xxxxxxxxxxxxx\n                                                                          bfcvt.  */\n-                                                                      return 2465;\n+                                                                      return 2487;\n                                                                     }\n                                                                 }\n                                                               else\n@@ -16802,7 +16934,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x1001xxxxxxxxxx\n                                                          smmla.  */\n-                                                      return 2456;\n+                                                      return 2478;\n                                                     }\n                                                 }\n                                             }\n@@ -16835,7 +16967,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x0101xxxxxxxxxx\n                                                          sdot.  */\n-                                                      return 2382;\n+                                                      return 2404;\n                                                     }\n                                                 }\n                                               else\n@@ -16909,7 +17041,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x1011xxxxxxxxxx\n                                                          usmmla.  */\n-                                                      return 2458;\n+                                                      return 2480;\n                                                     }\n                                                 }\n                                             }\n@@ -16942,7 +17074,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          0x001110xx0xxxxx1x0111xxxxxxxxxx\n                                                          usdot.  */\n-                                                      return 2459;\n+                                                      return 2481;\n                                                     }\n                                                 }\n                                               else\n@@ -16989,15 +17121,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              1x001110000xxxxxxxxxxxxxxxxxxxxx\n                                              eor3.  */\n-                                          return 2389;\n+                                          return 2411;\n                                         }\n                                       else\n                                         {\n                                           /* 33222222222211111111110000000000\n                                              10987654321098765432109876543210\n                                              1x001110100xxxxxxxxxxxxxxxxxxxxx\n                                              xar.  */\n-                                          return 2391;\n+                                          return 2413;\n                                         }\n                                     }\n                                   else\n@@ -17008,7 +17140,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                              10987654321098765432109876543210\n                                              1x001110x10xxxxx0xxxxxxxxxxxxxxx\n                                              sm3ss1.  */\n-                                          return 2393;\n+                                          return 2415;\n                                         }\n                                       else\n                                         {\n@@ -17022,15 +17154,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          1x001110010xxxxx1xxx00xxxxxxxxxx\n                                                          sm3tt1a.  */\n-                                                      return 2394;\n+                                                      return 2416;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          1x001110110xxxxx1xxx00xxxxxxxxxx\n                                                          sha512su0.  */\n-                                                      return 2387;\n+                                                      return 2409;\n                                                     }\n                                                 }\n                                               else\n@@ -17039,7 +17171,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      1x001110x10xxxxx1xxx10xxxxxxxxxx\n                                                      sm3tt2a.  */\n-                                                  return 2396;\n+                                                  return 2418;\n                                                 }\n                                             }\n                                           else\n@@ -17052,15 +17184,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          1x001110010xxxxx1xxx01xxxxxxxxxx\n                                                          sm3tt1b.  */\n-                                                      return 2395;\n+                                                      return 2417;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          1x001110110xxxxx1xxx01xxxxxxxxxx\n                                                          sm4e.  */\n-                                                      return 2400;\n+                                                      return 2422;\n                                                     }\n                                                 }\n                                               else\n@@ -17069,7 +17201,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      1x001110x10xxxxx1xxx11xxxxxxxxxx\n                                                      sm3tt2b.  */\n-                                                  return 2397;\n+                                                  return 2419;\n                                                 }\n                                             }\n                                         }\n@@ -17250,7 +17382,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx101110xx0xxxxx100101xxxxxxxxxx\n                                                          udot.  */\n-                                                      return 2381;\n+                                                      return 2403;\n                                                     }\n                                                 }\n                                               else\n@@ -17281,7 +17413,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      xx101110xx0xxxxx101x01xxxxxxxxxx\n                                                      ummla.  */\n-                                                  return 2457;\n+                                                  return 2479;\n                                                 }\n                                               else\n                                                 {\n@@ -17300,7 +17432,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      xx101110xx0xxxxx1x1011xxxxxxxxxx\n                                                      bfmmla.  */\n-                                                  return 2473;\n+                                                  return 2495;\n                                                 }\n                                               else\n                                                 {\n@@ -17310,7 +17442,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx1011100x0xxxxx1x1111xxxxxxxxxx\n                                                          bfdot.  */\n-                                                      return 2471;\n+                                                      return 2493;\n                                                     }\n                                                   else\n                                                     {\n@@ -17320,15 +17452,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              x01011101x0xxxxx1x1111xxxxxxxxxx\n                                                              bfmlalb.  */\n-                                                          return 2478;\n+                                                          return 2500;\n                                                         }\n                                                       else\n                                                         {\n                                                           /* 33222222222211111111110000000000\n                                                              10987654321098765432109876543210\n                                                              x11011101x0xxxxx1x1111xxxxxxxxxx\n                                                              bfmlalt.  */\n-                                                          return 2477;\n+                                                          return 2499;\n                                                         }\n                                                     }\n                                                 }\n@@ -17912,15 +18044,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                          10987654321098765432109876543210\n                                                                          000011101x1xxxx1011010xxxxxxxxxx\n                                                                          bfcvtn.  */\n-                                                                      return 2474;\n+                                                                      return 2496;\n                                                                     }\n                                                                   else\n                                                                     {\n                                                                       /* 33222222222211111111110000000000\n                                                                          10987654321098765432109876543210\n                                                                          010011101x1xxxx1011010xxxxxxxxxx\n                                                                          bfcvtn2.  */\n-                                                                      return 2475;\n+                                                                      return 2497;\n                                                                     }\n                                                                 }\n                                                             }\n@@ -18238,7 +18370,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                          10987654321098765432109876543210\n                                          1x001110xx1xxxxx0xxxxxxxxxxxxxxx\n                                          bcax.  */\n-                                      return 2392;\n+                                      return 2414;\n                                     }\n                                 }\n                               else\n@@ -18849,7 +18981,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  11001110xx1xxxxx100000xxxxxxxxxx\n                                                                  sha512h.  */\n-                                                              return 2385;\n+                                                              return 2407;\n                                                             }\n                                                         }\n                                                     }\n@@ -18901,7 +19033,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  11001110xx1xxxxx110000xxxxxxxxxx\n                                                                  sm3partw1.  */\n-                                                              return 2398;\n+                                                              return 2420;\n                                                             }\n                                                         }\n                                                     }\n@@ -19144,7 +19276,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              1x001110xx1xxxxx100010xxxxxxxxxx\n                                                              sha512su1.  */\n-                                                          return 2388;\n+                                                          return 2410;\n                                                         }\n                                                     }\n                                                   else\n@@ -19220,7 +19352,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  1x0011100x1xxxxx110010xxxxxxxxxx\n                                                                  sm4ekey.  */\n-                                                              return 2401;\n+                                                              return 2423;\n                                                             }\n                                                         }\n                                                       else\n@@ -20046,7 +20178,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              1x001110xx1xxxxx100001xxxxxxxxxx\n                                                              sha512h2.  */\n-                                                          return 2386;\n+                                                          return 2408;\n                                                         }\n                                                     }\n                                                   else\n@@ -20078,7 +20210,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  1x0011100x1xxxxx110001xxxxxxxxxx\n                                                                  sm3partw2.  */\n-                                                              return 2399;\n+                                                              return 2421;\n                                                             }\n                                                         }\n                                                       else\n@@ -20318,7 +20450,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              1x001110xx1xxxxx100011xxxxxxxxxx\n                                                              rax1.  */\n-                                                          return 2390;\n+                                                          return 2412;\n                                                         }\n                                                     }\n                                                   else\n@@ -20350,15 +20482,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x01011100x1xxxxx110011xxxxxxxxxx\n                                                                  fmlal2.  */\n-                                                              return 2404;\n+                                                              return 2426;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x11011100x1xxxxx110011xxxxxxxxxx\n                                                                  fmlal2.  */\n-                                                              return 2408;\n+                                                              return 2430;\n                                                             }\n                                                         }\n                                                     }\n@@ -20380,15 +20512,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x01011101x1xxxxx110011xxxxxxxxxx\n                                                                  fmlsl2.  */\n-                                                              return 2405;\n+                                                              return 2427;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x11011101x1xxxxx110011xxxxxxxxxx\n                                                                  fmlsl2.  */\n-                                                              return 2409;\n+                                                              return 2431;\n                                                             }\n                                                         }\n                                                     }\n@@ -20427,15 +20559,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x00011100x1xxxxx111011xxxxxxxxxx\n                                                                  fmlal.  */\n-                                                              return 2402;\n+                                                              return 2424;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x10011100x1xxxxx111011xxxxxxxxxx\n                                                                  fmlal.  */\n-                                                              return 2406;\n+                                                              return 2428;\n                                                             }\n                                                         }\n                                                       else\n@@ -20457,15 +20589,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                                  10987654321098765432109876543210\n                                                                  x00011101x1xxxxx111011xxxxxxxxxx\n                                                                  fmlsl.  */\n-                                                              return 2403;\n+                                                              return 2425;\n                                                             }\n                                                           else\n                                                             {\n                                                               /* 33222222222211111111110000000000\n                                                                  10987654321098765432109876543210\n                                                                  x10011101x1xxxxx111011xxxxxxxxxx\n                                                                  fmlsl.  */\n-                                                              return 2407;\n+                                                              return 2429;\n                                                             }\n                                                         }\n                                                       else\n@@ -22273,15 +22405,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0001111xxxxxxxx0000x0xxxxxxxxxx\n                                                      fmlal.  */\n-                                                  return 2410;\n+                                                  return 2432;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1001111xxxxxxxx0000x0xxxxxxxxxx\n                                                      fmlal.  */\n-                                                  return 2414;\n+                                                  return 2436;\n                                                 }\n                                             }\n                                           else\n@@ -22303,15 +22435,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0001111xxxxxxxx0100x0xxxxxxxxxx\n                                                      fmlsl.  */\n-                                                  return 2411;\n+                                                  return 2433;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1001111xxxxxxxx0100x0xxxxxxxxxx\n                                                      fmlsl.  */\n-                                                  return 2415;\n+                                                  return 2437;\n                                                 }\n                                             }\n                                           else\n@@ -22817,15 +22949,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0101111xxxxxxxx1000x0xxxxxxxxxx\n                                                      fmlal2.  */\n-                                                  return 2412;\n+                                                  return 2434;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1101111xxxxxxxx1000x0xxxxxxxxxx\n                                                      fmlal2.  */\n-                                                  return 2416;\n+                                                  return 2438;\n                                                 }\n                                             }\n                                         }\n@@ -22847,15 +22979,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                      10987654321098765432109876543210\n                                                      x0101111xxxxxxxx1100x0xxxxxxxxxx\n                                                      fmlsl2.  */\n-                                                  return 2413;\n+                                                  return 2435;\n                                                 }\n                                               else\n                                                 {\n                                                   /* 33222222222211111111110000000000\n                                                      10987654321098765432109876543210\n                                                      x1101111xxxxxxxx1100x0xxxxxxxxxx\n                                                      fmlsl2.  */\n-                                                  return 2417;\n+                                                  return 2439;\n                                                 }\n                                             }\n                                         }\n@@ -22911,15 +23043,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                  10987654321098765432109876543210\n                                                  xx001111xxxxxxxx1110x0xxxxxxxxxx\n                                                  sdot.  */\n-                                              return 2384;\n+                                              return 2406;\n                                             }\n                                           else\n                                             {\n                                               /* 33222222222211111111110000000000\n                                                  10987654321098765432109876543210\n                                                  xx101111xxxxxxxx1110x0xxxxxxxxxx\n                                                  udot.  */\n-                                              return 2383;\n+                                              return 2405;\n                                             }\n                                         }\n                                     }\n@@ -23022,15 +23154,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx00111100xxxxxx1111x0xxxxxxxxxx\n                                                          sudot.  */\n-                                                      return 2461;\n+                                                      return 2483;\n                                                     }\n                                                   else\n                                                     {\n                                                       /* 33222222222211111111110000000000\n                                                          10987654321098765432109876543210\n                                                          xx00111110xxxxxx1111x0xxxxxxxxxx\n                                                          usdot.  */\n-                                                      return 2460;\n+                                                      return 2482;\n                                                     }\n                                                 }\n                                               else\n@@ -23041,7 +23173,7 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                          10987654321098765432109876543210\n                                                          xx00111101xxxxxx1111x0xxxxxxxxxx\n                                                          bfdot.  */\n-                                                      return 2472;\n+                                                      return 2494;\n                                                     }\n                                                   else\n                                                     {\n@@ -23051,15 +23183,15 @@ aarch64_opcode_lookup_1 (uint32_t word)\n                                                              10987654321098765432109876543210\n                                                              x000111111xxxxxx1111x0xxxxxxxxxx\n                                                              bfmlalb.  */\n-                                                          return 2480;\n+                                                          return 2502;\n                                                         }\n                                                       else\n                                                         {\n                                                           /* 33222222222211111111110000000000\n                                                              10987654321098765432109876543210\n                                                              x100111111xxxxxx1111x0xxxxxxxxxx\n                                                              bfmlalt.  */\n-                                                          return 2479;\n+                                                          return 2501;\n                                                         }\n                                                     }\n                                                 }\n@@ -23550,6 +23682,26 @@ aarch64_find_next_opcode (const aarch64_opcode *opcode)\n     case 2379: return NULL;\t\t/* mova --> NULL.  */\n     case 2376: value = 2378; break;\t/* mov --> mova.  */\n     case 2378: return NULL;\t\t/* mova --> NULL.  */\n+    case 2381: value = 2386; break;\t/* ld1b --> ld1b.  */\n+    case 2386: return NULL;\t\t/* ld1b --> NULL.  */\n+    case 2383: value = 2388; break;\t/* ld1w --> ld1w.  */\n+    case 2388: return NULL;\t\t/* ld1w --> NULL.  */\n+    case 2382: value = 2387; break;\t/* ld1h --> ld1h.  */\n+    case 2387: return NULL;\t\t/* ld1h --> NULL.  */\n+    case 2384: value = 2389; break;\t/* ld1d --> ld1d.  */\n+    case 2389: return NULL;\t\t/* ld1d --> NULL.  */\n+    case 2391: value = 2396; break;\t/* st1b --> st1b.  */\n+    case 2396: return NULL;\t\t/* st1b --> NULL.  */\n+    case 2393: value = 2398; break;\t/* st1w --> st1w.  */\n+    case 2398: return NULL;\t\t/* st1w --> NULL.  */\n+    case 2392: value = 2397; break;\t/* st1h --> st1h.  */\n+    case 2397: return NULL;\t\t/* st1h --> NULL.  */\n+    case 2394: value = 2399; break;\t/* st1d --> st1d.  */\n+    case 2399: return NULL;\t\t/* st1d --> NULL.  */\n+    case 2385: value = 2390; break;\t/* ld1q --> ld1q.  */\n+    case 2390: return NULL;\t\t/* ld1q --> NULL.  */\n+    case 2395: value = 2400; break;\t/* st1q --> st1q.  */\n+    case 2400: return NULL;\t\t/* st1q --> NULL.  */\n     case 12: value = 19; break;\t/* add --> addg.  */\n     case 19: return NULL;\t\t/* addg --> NULL.  */\n     case 16: value = 20; break;\t/* sub --> subg.  */\n@@ -23697,8 +23849,8 @@ aarch64_find_next_opcode (const aarch64_opcode *opcode)\n     case 824: return NULL;\t\t/* fsqrt --> NULL.  */\n     case 832: value = 833; break;\t/* frintz --> frintz.  */\n     case 833: return NULL;\t\t/* frintz --> NULL.  */\n-    case 825: value = 2476; break;\t/* fcvt --> bfcvt.  */\n-    case 2476: return NULL;\t\t/* bfcvt --> NULL.  */\n+    case 825: value = 2498; break;\t/* fcvt --> bfcvt.  */\n+    case 2498: return NULL;\t\t/* bfcvt --> NULL.  */\n     case 834: value = 835; break;\t/* frinta --> frinta.  */\n     case 835: return NULL;\t\t/* frinta --> NULL.  */\n     case 836: value = 837; break;\t/* frintx --> frintx.  */\n@@ -24178,7 +24330,6 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 29:\n     case 30:\n     case 31:\n-    case 166:\n     case 167:\n     case 168:\n     case 169:\n@@ -24188,7 +24339,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 173:\n     case 174:\n     case 175:\n-    case 190:\n+    case 176:\n     case 191:\n     case 192:\n     case 193:\n@@ -24197,11 +24348,12 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 196:\n     case 197:\n     case 198:\n-    case 204:\n-    case 207:\n-    case 209:\n+    case 199:\n+    case 205:\n+    case 208:\n     case 210:\n-    case 213:\n+    case 211:\n+    case 214:\n       return aarch64_ext_regno (self, info, code, inst, errors);\n     case 10:\n       return aarch64_ext_regrt_sysins (self, info, code, inst, errors);\n@@ -24217,7 +24369,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 33:\n     case 34:\n     case 35:\n-    case 216:\n+    case 220:\n       return aarch64_ext_reglane (self, info, code, inst, errors);\n     case 36:\n       return aarch64_ext_reglist (self, info, code, inst, errors);\n@@ -24253,18 +24405,18 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 82:\n     case 83:\n     case 84:\n-    case 163:\n-    case 165:\n-    case 182:\n+    case 164:\n+    case 166:\n     case 183:\n     case 184:\n     case 185:\n     case 186:\n     case 187:\n     case 188:\n     case 189:\n-    case 214:\n+    case 190:\n     case 215:\n+    case 219:\n       return aarch64_ext_imm (self, info, code, inst, errors);\n     case 44:\n     case 45:\n@@ -24276,10 +24428,10 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 49:\n       return aarch64_ext_shll_imm (self, info, code, inst, errors);\n     case 52:\n-    case 153:\n+    case 154:\n       return aarch64_ext_fpimm (self, info, code, inst, errors);\n     case 70:\n-    case 161:\n+    case 162:\n       return aarch64_ext_limm (self, info, code, inst, errors);\n     case 71:\n       return aarch64_ext_aimm (self, info, code, inst, errors);\n@@ -24289,11 +24441,11 @@ aarch64_extract_operand (const aarch64_operand *self,\n       return aarch64_ext_fbits (self, info, code, inst, errors);\n     case 75:\n     case 76:\n-    case 158:\n+    case 159:\n       return aarch64_ext_imm_rotate2 (self, info, code, inst, errors);\n     case 77:\n-    case 157:\n-    case 159:\n+    case 158:\n+    case 160:\n       return aarch64_ext_imm_rotate1 (self, info, code, inst, errors);\n     case 78:\n     case 79:\n@@ -24369,65 +24521,71 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 133:\n     case 134:\n     case 135:\n-      return aarch64_ext_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 136:\n+      return aarch64_ext_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 137:\n     case 138:\n     case 139:\n     case 140:\n     case 141:\n     case 142:\n     case 143:\n-      return aarch64_ext_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 144:\n+      return aarch64_ext_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 145:\n     case 146:\n     case 147:\n-      return aarch64_ext_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 148:\n-      return aarch64_ext_sve_addr_zz_lsl (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 149:\n-      return aarch64_ext_sve_addr_zz_sxtw (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_zz_lsl (self, info, code, inst, errors);\n     case 150:\n-      return aarch64_ext_sve_addr_zz_uxtw (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_zz_sxtw (self, info, code, inst, errors);\n     case 151:\n-      return aarch64_ext_sve_aimm (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_zz_uxtw (self, info, code, inst, errors);\n     case 152:\n+      return aarch64_ext_sve_aimm (self, info, code, inst, errors);\n+    case 153:\n       return aarch64_ext_sve_asimm (self, info, code, inst, errors);\n-    case 154:\n-      return aarch64_ext_sve_float_half_one (self, info, code, inst, errors);\n     case 155:\n-      return aarch64_ext_sve_float_half_two (self, info, code, inst, errors);\n+      return aarch64_ext_sve_float_half_one (self, info, code, inst, errors);\n     case 156:\n+      return aarch64_ext_sve_float_half_two (self, info, code, inst, errors);\n+    case 157:\n       return aarch64_ext_sve_float_zero_one (self, info, code, inst, errors);\n-    case 160:\n+    case 161:\n       return aarch64_ext_inv_limm (self, info, code, inst, errors);\n-    case 162:\n+    case 163:\n       return aarch64_ext_sve_limm_mov (self, info, code, inst, errors);\n-    case 164:\n+    case 165:\n       return aarch64_ext_sve_scale (self, info, code, inst, errors);\n-    case 176:\n     case 177:\n     case 178:\n-      return aarch64_ext_sve_shlimm (self, info, code, inst, errors);\n     case 179:\n+      return aarch64_ext_sve_shlimm (self, info, code, inst, errors);\n     case 180:\n     case 181:\n+    case 182:\n       return aarch64_ext_sve_shrimm (self, info, code, inst, errors);\n-    case 199:\n     case 200:\n     case 201:\n     case 202:\n     case 203:\n+    case 204:\n       return aarch64_ext_sve_quad_index (self, info, code, inst, errors);\n-    case 205:\n-      return aarch64_ext_sve_index (self, info, code, inst, errors);\n     case 206:\n-    case 208:\n+      return aarch64_ext_sve_index (self, info, code, inst, errors);\n+    case 207:\n+    case 209:\n       return aarch64_ext_sve_reglist (self, info, code, inst, errors);\n-    case 211:\n     case 212:\n+    case 213:\n+    case 216:\n       return aarch64_ext_sme_za_hv_tiles (self, info, code, inst, errors);\n+    case 217:\n+      return aarch64_ext_sme_za_array (self, info, code, inst, errors);\n+    case 218:\n+      return aarch64_ext_sme_addr_ri_u4xvl (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }\n }"
    },
    {
      "sha": "d21c6b0d80c385a5c18e08a3c2cbc506914389b0",
      "filename": "opcodes/aarch64-dis.c",
      "status": "modified",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/opcodes/aarch64-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/opcodes/aarch64-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.c?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -1806,6 +1806,56 @@ aarch64_ext_sme_za_hv_tiles (const aarch64_operand *self,\n   return true;\n }\n \n+/* Decode in SME instruction ZERO list of up to eight 64-bit element tile names\n+   separated by commas, encoded in the \"imm8\" field.\n+\n+   For programmer convenience an assembler must also accept the names of\n+   32-bit, 16-bit and 8-bit element tiles which are converted into the\n+   corresponding set of 64-bit element tiles.\n+*/\n+bool\n+aarch64_ext_sme_za_list (const aarch64_operand *self,\n+                         aarch64_opnd_info *info, aarch64_insn code,\n+                         const aarch64_inst *inst ATTRIBUTE_UNUSED,\n+                         aarch64_operand_error *errors ATTRIBUTE_UNUSED)\n+{\n+  int mask = extract_field (self->fields[0], code, 0);\n+  info->imm.value = mask;\n+  return true;\n+}\n+\n+/* Decode ZA array vector select register (Rv field), optional vector and\n+   memory offset (imm4 field).\n+*/\n+bool\n+aarch64_ext_sme_za_array (const aarch64_operand *self,\n+                          aarch64_opnd_info *info, aarch64_insn code,\n+                          const aarch64_inst *inst ATTRIBUTE_UNUSED,\n+                          aarch64_operand_error *errors ATTRIBUTE_UNUSED)\n+{\n+  int regno = extract_field (self->fields[0], code, 0) + 12;\n+  int imm = extract_field (self->fields[1], code, 0);\n+  info->za_tile_vector.index.regno = regno;\n+  info->za_tile_vector.index.imm = imm;\n+  return true;\n+}\n+\n+bool\n+aarch64_ext_sme_addr_ri_u4xvl (const aarch64_operand *self,\n+                               aarch64_opnd_info *info, aarch64_insn code,\n+                               const aarch64_inst *inst ATTRIBUTE_UNUSED,\n+                               aarch64_operand_error *errors ATTRIBUTE_UNUSED)\n+{\n+  int regno = extract_field (self->fields[0], code, 0);\n+  int imm = extract_field (self->fields[1], code, 0);\n+  info->addr.base_regno = regno;\n+  info->addr.offset.imm = imm;\n+  /* MUL VL operator is always present for this operand.  */\n+  info->shifter.kind = AARCH64_MOD_MUL_VL;\n+  info->shifter.operator_present = (imm != 0);\n+  return true;\n+}\n+\n /* Decode Zn[MM], where MM has a 7-bit triangular encoding.  The fields\n    array specifies which field to use for Zn.  MM is encoded in the\n    concatenation of imm5 and SVE_tszh, with imm5 being the less"
    },
    {
      "sha": "893800b249123c722230febcc61d26a09519706d",
      "filename": "opcodes/aarch64-dis.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/opcodes/aarch64-dis.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/opcodes/aarch64-dis.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.h?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -123,6 +123,9 @@ AARCH64_DECL_OPD_EXTRACTOR (ext_sve_scale);\n AARCH64_DECL_OPD_EXTRACTOR (ext_sve_shlimm);\n AARCH64_DECL_OPD_EXTRACTOR (ext_sve_shrimm);\n AARCH64_DECL_OPD_EXTRACTOR (ext_sme_za_hv_tiles);\n+AARCH64_DECL_OPD_EXTRACTOR (ext_sme_za_list);\n+AARCH64_DECL_OPD_EXTRACTOR (ext_sme_za_array);\n+AARCH64_DECL_OPD_EXTRACTOR (ext_sme_addr_ri_u4xvl);\n AARCH64_DECL_OPD_EXTRACTOR (ext_imm_rotate1);\n AARCH64_DECL_OPD_EXTRACTOR (ext_imm_rotate2);\n "
    },
    {
      "sha": "5dedf2113a3cf60987a1388a87a7376222829f82",
      "filename": "opcodes/aarch64-opc-2.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/opcodes/aarch64-opc-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/opcodes/aarch64-opc-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc-2.c?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -151,6 +151,7 @@ const struct aarch64_operand aarch64_operands[] =\n   {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_RR_LSL1\", 1 << OPD_F_OD_LSB | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_Rm}, \"an address with a scalar register offset\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_RR_LSL2\", 2 << OPD_F_OD_LSB | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_Rm}, \"an address with a scalar register offset\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_RR_LSL3\", 3 << OPD_F_OD_LSB | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_Rm}, \"an address with a scalar register offset\"},\n+  {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_RR_LSL4\", 4 << OPD_F_OD_LSB | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_Rm}, \"an address with a scalar register offset\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_RX\", (0 << OPD_F_OD_LSB) | OPD_F_NO_ZR | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_Rm}, \"an address with a scalar register offset\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_RX_LSL1\", (1 << OPD_F_OD_LSB) | OPD_F_NO_ZR | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_Rm}, \"an address with a scalar register offset\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_RX_LSL2\", (2 << OPD_F_OD_LSB) | OPD_F_NO_ZR | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_Rm}, \"an address with a scalar register offset\"},\n@@ -239,6 +240,9 @@ const struct aarch64_operand aarch64_operands[] =\n   {AARCH64_OPND_CLASS_SVE_REG, \"SME_ZA_HV_idx_dest\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_size_10,FLD_SME_Q,FLD_SME_V,FLD_SME_Rv,FLD_imm4_2}, \"an SME horizontal or vertical vector access register\"},\n   {AARCH64_OPND_CLASS_PRED_REG, \"SME_Pm\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_Pm}, \"an SVE predicate register\"},\n   {AARCH64_OPND_CLASS_SVE_REG, \"SME_list_of_64bit_tiles\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_zero_mask}, \"list of 64-bit ZA element tiles\"},\n+  {AARCH64_OPND_CLASS_SVE_REG, \"SME_ZA_HV_idx_ldstr\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_size_10,FLD_index2,FLD_SME_V,FLD_SME_Rv,FLD_imm4_2}, \"an SME horizontal or vertical vector access register\"},\n+  {AARCH64_OPND_CLASS_SVE_REG, \"SME_ZA_array\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SME_Rv,FLD_imm4_2}, \"ZA array\"},\n+  {AARCH64_OPND_CLASS_ADDRESS, \"SME_ADDR_RI_U4xVL\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_imm4_2}, \"memory offset\"},\n   {AARCH64_OPND_CLASS_IMMEDIATE, \"TME_UIMM16\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_imm16}, \"a 16-bit unsigned immediate for TME tcancel\"},\n   {AARCH64_OPND_CLASS_SIMD_ELEMENT, \"SM3_IMM2\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SM3_imm2}, \"an indexed SM3 vector immediate\"},\n   {AARCH64_OPND_CLASS_NIL, \"\", 0, {0}, \"DUMMY\"},"
    },
    {
      "sha": "e46763d7a9a4e261289ae2b4ab165ee21e675a7f",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 67,
      "deletions": 15,
      "changes": 82,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -197,6 +197,8 @@ aarch64_select_operand_for_sizeq_field_coding (const aarch64_opcode *opcode)\n     significant_operand_index [get_data_pattern (opcode->qualifiers_list[0])];\n }\n \f\n+/* Instruction bit-fields.\n++   Keep synced with 'enum aarch64_field_kind'.  */\n const aarch64_field fields[] =\n {\n     {  0,  0 },\t/* NIL.  */\n@@ -1835,6 +1837,14 @@ operand_general_constraint_met_p (const aarch64_opnd_info *opnds, int idx,\n \t    }\n \t  break;\n \n+\tcase AARCH64_OPND_SME_ADDR_RI_U4xVL:\n+\t  if (!value_in_range_p (opnd->addr.offset.imm, 0, 15))\n+\t    {\n+\t      set_offset_out_of_range_error (mismatch_detail, idx, 0, 15);\n+\t      return 0;\n+\t    }\n+\t  break;\n+\n \tcase AARCH64_OPND_SVE_ADDR_RI_S4xVL:\n \tcase AARCH64_OPND_SVE_ADDR_RI_S4x2xVL:\n \tcase AARCH64_OPND_SVE_ADDR_RI_S4x3xVL:\n@@ -1932,6 +1942,7 @@ operand_general_constraint_met_p (const aarch64_opnd_info *opnds, int idx,\n \tcase AARCH64_OPND_SVE_ADDR_RR_LSL1:\n \tcase AARCH64_OPND_SVE_ADDR_RR_LSL2:\n \tcase AARCH64_OPND_SVE_ADDR_RR_LSL3:\n+\tcase AARCH64_OPND_SVE_ADDR_RR_LSL4:\n \tcase AARCH64_OPND_SVE_ADDR_RX:\n \tcase AARCH64_OPND_SVE_ADDR_RX_LSL1:\n \tcase AARCH64_OPND_SVE_ADDR_RX_LSL2:\n@@ -2750,21 +2761,51 @@ aarch64_match_operands_constraint (aarch64_inst *inst,\n \n   DEBUG_TRACE (\"enter\");\n \n-  /* Check for cases where a source register needs to be the same as the\n-     destination register.  Do this before matching qualifiers since if\n-     an instruction has both invalid tying and invalid qualifiers,\n-     the error about qualifiers would suggest several alternative\n-     instructions that also have invalid tying.  */\n   i = inst->opcode->tied_operand;\n-  if (i > 0 && (inst->operands[0].reg.regno != inst->operands[i].reg.regno))\n+\n+  if (i > 0)\n     {\n-      if (mismatch_detail)\n-\t{\n-\t  mismatch_detail->kind = AARCH64_OPDE_UNTIED_OPERAND;\n-\t  mismatch_detail->index = i;\n-\t  mismatch_detail->error = NULL;\n-\t}\n-      return 0;\n+      /* Check for tied_operands with specific opcode iclass.  */\n+      switch (inst->opcode->iclass)\n+        {\n+        /* For SME LDR and STR instructions #imm must have the same numerical\n+           value for both operands.\n+        */\n+        case sme_ldr:\n+        case sme_str:\n+          assert (inst->operands[0].type == AARCH64_OPND_SME_ZA_array);\n+          assert (inst->operands[1].type == AARCH64_OPND_SME_ADDR_RI_U4xVL);\n+          if (inst->operands[0].za_tile_vector.index.imm\n+              != inst->operands[1].addr.offset.imm)\n+            {\n+              if (mismatch_detail)\n+                {\n+                  mismatch_detail->kind = AARCH64_OPDE_UNTIED_IMMS;\n+                  mismatch_detail->index = i;\n+                }\n+              return 0;\n+            }\n+          break;\n+\n+        default:\n+          /* Check for cases where a source register needs to be the same as the\n+             destination register.  Do this before matching qualifiers since if\n+             an instruction has both invalid tying and invalid qualifiers,\n+             the error about qualifiers would suggest several alternative\n+             instructions that also have invalid tying.  */\n+          if (inst->operands[0].reg.regno\n+              != inst->operands[i].reg.regno)\n+            {\n+              if (mismatch_detail)\n+                {\n+                  mismatch_detail->kind = AARCH64_OPDE_UNTIED_OPERAND;\n+                  mismatch_detail->index = i;\n+                  mismatch_detail->error = NULL;\n+                }\n+              return 0;\n+            }\n+          break;\n+        }\n     }\n \n   /* Match operands' qualifier.\n@@ -3403,18 +3444,27 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n \n     case AARCH64_OPND_SME_ZA_HV_idx_src:\n     case AARCH64_OPND_SME_ZA_HV_idx_dest:\n-      snprintf (buf, size, \"za%d%c.%s[w%d, %d]\",\n+    case AARCH64_OPND_SME_ZA_HV_idx_ldstr:\n+      snprintf (buf, size, \"%sza%d%c.%s[w%d, %d]%s\",\n+                opnd->type == AARCH64_OPND_SME_ZA_HV_idx_ldstr ? \"{\" : \"\",\n                 opnd->za_tile_vector.regno,\n                 opnd->za_tile_vector.v == 1 ? 'v' : 'h',\n                 aarch64_get_qualifier_name (opnd->qualifier),\n                 opnd->za_tile_vector.index.regno,\n-                opnd->za_tile_vector.index.imm);\n+                opnd->za_tile_vector.index.imm,\n+                opnd->type == AARCH64_OPND_SME_ZA_HV_idx_ldstr ? \"}\" : \"\");\n       break;\n \n     case AARCH64_OPND_SME_list_of_64bit_tiles:\n       print_sme_za_list (buf, size, opnd->reg.regno);\n       break;\n \n+    case AARCH64_OPND_SME_ZA_array:\n+      snprintf (buf, size, \"za[w%d, %d]\",\n+                opnd->za_tile_vector.index.regno,\n+                opnd->za_tile_vector.index.imm);\n+      break;\n+\n     case AARCH64_OPND_CRn:\n     case AARCH64_OPND_CRm:\n       snprintf (buf, size, \"C%\" PRIi64, opnd->imm.value);\n@@ -3678,6 +3728,7 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n     case AARCH64_OPND_SVE_ADDR_RR_LSL1:\n     case AARCH64_OPND_SVE_ADDR_RR_LSL2:\n     case AARCH64_OPND_SVE_ADDR_RR_LSL3:\n+    case AARCH64_OPND_SVE_ADDR_RR_LSL4:\n     case AARCH64_OPND_SVE_ADDR_RX:\n     case AARCH64_OPND_SVE_ADDR_RX_LSL1:\n     case AARCH64_OPND_SVE_ADDR_RX_LSL2:\n@@ -3718,6 +3769,7 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n     case AARCH64_OPND_ADDR_SIMM11:\n     case AARCH64_OPND_ADDR_SIMM13:\n     case AARCH64_OPND_ADDR_OFFSET:\n+    case AARCH64_OPND_SME_ADDR_RI_U4xVL:\n     case AARCH64_OPND_SVE_ADDR_RI_S4x16:\n     case AARCH64_OPND_SVE_ADDR_RI_S4x32:\n     case AARCH64_OPND_SVE_ADDR_RI_S4xVL:"
    },
    {
      "sha": "d74009be3cb27786f22103e4fd8b65fe8d9990f4",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01a4d0822025084609380fb989d43bda0667db72/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01a4d0822025084609380fb989d43bda0667db72/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=01a4d0822025084609380fb989d43bda0667db72",
      "patch": "@@ -1557,6 +1557,10 @@\n {                                                       \\\n   QLF3(S_D,NIL,NIL),                                    \\\n }\n+#define OP_SVE_QUU                                      \\\n+{                                                       \\\n+  QLF3(S_Q,NIL,NIL),                                    \\\n+}\n #define OP_SVE_DUV_BHS                                  \\\n {                                                       \\\n   QLF3(S_D,NIL,S_B),                                    \\\n@@ -1578,6 +1582,10 @@\n {                                                       \\\n   QLF3(S_D,P_Z,NIL),                                    \\\n }\n+#define OP_SVE_QZU                                      \\\n+{                                                       \\\n+  QLF3(S_Q,P_Z,NIL),                                    \\\n+}\n #define OP_SVE_HB                                       \\\n {                                                       \\\n   QLF2(S_H,S_B),                                        \\\n@@ -5138,6 +5146,33 @@ const struct aarch64_opcode aarch64_opcode_table[] =\n \n   SME_INSN (\"zero\", 0xc0080000, 0xffffff00, sme_misc, 0, OP1 (SME_list_of_64bit_tiles), {}, 0, 0),\n \n+  SME_INSN (\"ld1b\", 0xe0000000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_RR), OP_SVE_BZU, 0, 0),\n+  SME_INSN (\"ld1h\", 0xe0400000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_RR_LSL1), OP_SVE_HZU, 0, 0),\n+  SME_INSN (\"ld1w\", 0xe0800000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_RR_LSL2), OP_SVE_SZU, 0, 0),\n+  SME_INSN (\"ld1d\", 0xe0c00000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_RR_LSL3), OP_SVE_DZU, 0, 0),\n+  SME_INSN (\"ld1q\", 0xe1c00000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_RR_LSL4), OP_SVE_QZU, 0, 0),\n+\n+  SME_INSN (\"ld1b\", 0xe0000000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_R), OP_SVE_BZU, 0, 0),\n+  SME_INSN (\"ld1h\", 0xe0400000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_R), OP_SVE_HZU, 0, 0),\n+  SME_INSN (\"ld1w\", 0xe0800000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_R), OP_SVE_SZU, 0, 0),\n+  SME_INSN (\"ld1d\", 0xe0c00000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_R), OP_SVE_DZU, 0, 0),\n+  SME_INSN (\"ld1q\", 0xe1c00000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_R), OP_SVE_QZU, 0, 0),\n+\n+  SME_INSN (\"st1b\", 0xe0200000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_RR), OP_SVE_BUU, 0, 0),\n+  SME_INSN (\"st1h\", 0xe0600000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_RR_LSL1), OP_SVE_HUU, 0, 0),\n+  SME_INSN (\"st1w\", 0xe0a00000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_RR_LSL2), OP_SVE_SUU, 0, 0),\n+  SME_INSN (\"st1d\", 0xe0e00000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_RR_LSL3), OP_SVE_DUU, 0, 0),\n+  SME_INSN (\"st1q\", 0xe1e00000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_RR_LSL4), OP_SVE_QUU, 0, 0),\n+\n+  SME_INSN (\"st1b\", 0xe0200000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_R), OP_SVE_BUU, 0, 0),\n+  SME_INSN (\"st1h\", 0xe0600000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_R), OP_SVE_HUU, 0, 0),\n+  SME_INSN (\"st1w\", 0xe0a00000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_R), OP_SVE_SUU, 0, 0),\n+  SME_INSN (\"st1d\", 0xe0e00000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_R), OP_SVE_DUU, 0, 0),\n+  SME_INSN (\"st1q\", 0xe1e00000, 0xffe00010, sve_misc, 0, OP3 (SME_ZA_HV_idx_ldstr, SVE_Pg3, SVE_ADDR_R), OP_SVE_QUU, 0, 0),\n+\n+  SME_INSN (\"ldr\", 0xe1000000, 0xffff9c10, sme_ldr, 0, OP2 (SME_ZA_array, SME_ADDR_RI_U4xVL), {}, 0, 1),\n+  SME_INSN (\"str\", 0xe1200000, 0xffff9c10, sme_str, 0, OP2 (SME_ZA_array, SME_ADDR_RI_U4xVL), {}, 0, 1),\n+\n   /* SIMD Dot Product (optional in v8.2-A).  */\n   DOT_INSN (\"udot\", 0x2e009400, 0xbf20fc00, dotproduct, OP3 (Vd, Vn, Vm), QL_V3DOT, F_SIZEQ),\n   DOT_INSN (\"sdot\", 0xe009400,  0xbf20fc00, dotproduct, OP3 (Vd, Vn, Vm), QL_V3DOT, F_SIZEQ),\n@@ -5512,6 +5547,8 @@ const struct aarch64_opcode aarch64_opcode_table[] =\n       F(FLD_Rn,FLD_Rm), \"an address with a scalar register offset\")\t\\\n     Y(ADDRESS, sve_addr_rr_lsl, \"SVE_ADDR_RR_LSL3\", 3 << OPD_F_OD_LSB,\t\\\n       F(FLD_Rn,FLD_Rm), \"an address with a scalar register offset\")\t\\\n+    Y(ADDRESS, sve_addr_rr_lsl, \"SVE_ADDR_RR_LSL4\", 4 << OPD_F_OD_LSB,\t\\\n+      F(FLD_Rn,FLD_Rm), \"an address with a scalar register offset\")\t\\\n     Y(ADDRESS, sve_addr_rr_lsl, \"SVE_ADDR_RX\",\t\t\t\t\\\n       (0 << OPD_F_OD_LSB) | OPD_F_NO_ZR, F(FLD_Rn,FLD_Rm),\t\t\\\n       \"an address with a scalar register offset\")\t\t\t\\\n@@ -5719,6 +5756,15 @@ const struct aarch64_opcode aarch64_opcode_table[] =\n       \"an SVE predicate register\")\t\t\t\t\t\\\n     Y(SVE_REG, imm, \"SME_list_of_64bit_tiles\", 0,\t\\\n       F(FLD_SME_zero_mask), \"list of 64-bit ZA element tiles\")\t\t\t\t\t\\\n+    Y(SVE_REG, sme_za_hv_tiles, \"SME_ZA_HV_idx_ldstr\", 0,\t\t\t\t\\\n+      F(FLD_SME_size_10,FLD_index2,FLD_SME_V,FLD_SME_Rv,FLD_imm4_2),\t\\\n+      \"an SME horizontal or vertical vector access register\")\t\\\n+    Y(SVE_REG, sme_za_array, \"SME_ZA_array\", 0,\t\t\t\t\\\n+      F(FLD_SME_Rv,FLD_imm4_2),\t\\\n+      \"ZA array\")\t\\\n+    Y(ADDRESS, sme_addr_ri_u4xvl, \"SME_ADDR_RI_U4xVL\", 0 << OPD_F_OD_LSB, \\\n+      F(FLD_Rn,FLD_imm4_2),\t\t\t\t\t\\\n+      \"memory offset\")\t\\\n     Y(IMMEDIATE, imm, \"TME_UIMM16\", 0, F(FLD_imm16),\t\t\t\\\n       \"a 16-bit unsigned immediate for TME tcancel\")\t\t\t\\\n     Y(SIMD_ELEMENT, reglane, \"SM3_IMM2\", 0, F(FLD_SM3_imm2),\t\t\\"
    }
  ]
}