{
  "sha": "6828a30253e55983b887dcd8f947a4d771aff82b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjgyOGEzMDI1M2U1NTk4M2I4ODdkY2Q4Zjk0N2E0ZDc3MWFmZjgyYg==",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-06-15T04:41:22Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-06-16T05:55:31Z"
    },
    "message": "sim: mips: rework dynamic printf logic to avoid compiler warnings\n\nThe compiler doesn't like passing non-constant strings to printf\nfunctions, so tweak the code to always pass one in.  This code is\na little more verbose, but it's probably the same performance.\n\nThe macro usage is a bit ugly, but maybe less than copying &\npasting the extended conditional format logic.",
    "tree": {
      "sha": "0babfc0996ef0012f3fa30da3afe71add3580146",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0babfc0996ef0012f3fa30da3afe71add3580146"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6828a30253e55983b887dcd8f947a4d771aff82b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6828a30253e55983b887dcd8f947a4d771aff82b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6828a30253e55983b887dcd8f947a4d771aff82b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6828a30253e55983b887dcd8f947a4d771aff82b/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "df32b446c3f54ed1cc9d4435740bffb42993090c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/df32b446c3f54ed1cc9d4435740bffb42993090c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/df32b446c3f54ed1cc9d4435740bffb42993090c"
    }
  ],
  "stats": {
    "total": 46,
    "additions": 38,
    "deletions": 8
  },
  "files": [
    {
      "sha": "c36e01fa19eb47286dad2ecea3ffea4977030f62",
      "filename": "sim/mips/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6828a30253e55983b887dcd8f947a4d771aff82b/sim/mips/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6828a30253e55983b887dcd8f947a4d771aff82b/sim/mips/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/mips/ChangeLog?ref=6828a30253e55983b887dcd8f947a4d771aff82b",
      "patch": "@@ -1,3 +1,8 @@\n+2021-06-16  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* interp.c (sim_monitor): Change ap type to address_word*.\n+\t(_P, P): New macros.  Rewrite dynamic printf logic to use these.\n+\n 2021-06-16  Mike Frysinger  <vapier@gentoo.org>\n \n \t* dv-tx3904sio.c (tx3904sio_fifo_push): Change next_buf to"
    },
    {
      "sha": "5645f01ed2251c54e8dee4bc56ff1841f5448d10",
      "filename": "sim/mips/interp.c",
      "status": "modified",
      "additions": 33,
      "deletions": 8,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6828a30253e55983b887dcd8f947a4d771aff82b/sim/mips/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6828a30253e55983b887dcd8f947a4d771aff82b/sim/mips/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/mips/interp.c?ref=6828a30253e55983b887dcd8f947a4d771aff82b",
      "patch": "@@ -1388,7 +1388,7 @@ sim_monitor (SIM_DESC sd,\n       {\n \taddress_word s = A0;\n \tunsigned char c;\n-\tsigned_word *ap = &A1; /* 1st argument */\n+\taddress_word *ap = &A1; /* 1st argument */\n         /* This isn't the quickest way, since we call the host print\n            routine for every character almost. But it does avoid\n            having to allocate and manage a temporary string buffer. */\n@@ -1471,18 +1471,43 @@ sim_monitor (SIM_DESC sd,\n \t\t\t  sim_io_printf(sd,\"<binary not supported>\");\n \t\t\telse\n \t\t\t  {\n-\t\t\t    sprintf (tmp, \"%%%s%c\", longlong ? \"ll\" : \"\", c);\n-\t\t\t    if (longlong)\n-\t\t\t      sim_io_printf(sd, tmp, lv);\n-\t\t\t    else\n-\t\t\t      sim_io_printf(sd, tmp, (int)lv);\n+#define _P(c, fmt64, fmt32) \\\n+  case c: \\\n+    if (longlong) \\\n+      sim_io_printf (sd, \"%\" fmt64, lv); \\\n+    else \\\n+      sim_io_printf (sd, \"%\" fmt32, (int)lv); \\\n+    break;\n+#define P(c, fmtc) _P(c, PRI##fmtc##64, PRI##fmtc##32)\n+\t\t\t    switch (c)\n+\t\t\t      {\n+\t\t\t      P('d', d)\n+\t\t\t      P('o', o)\n+\t\t\t      P('x', x)\n+\t\t\t      P('X', X)\n+\t\t\t      P('u', u)\n+\t\t\t      }\n \t\t\t  }\n+#undef P\n+#undef _P\n \t\t      }\n \t\t    else if (strchr (\"eEfgG\", c))\n \t\t      {\n \t\t\tdouble dbl = *(double*)(ap++);\n-\t\t\tsprintf (tmp, \"%%%d.%d%c\", width, trunc, c);\n-\t\t\tsim_io_printf (sd, tmp, dbl);\n+\n+#define P(c, fmtc) \\\n+  case c: \\\n+    sim_io_printf (sd, \"%*.*\" #fmtc, width, trunc, dbl); \\\n+    break;\n+\t\t\tswitch (c)\n+\t\t\t  {\n+\t\t\t  P('e', e)\n+\t\t\t  P('E', E)\n+\t\t\t  P('f', f)\n+\t\t\t  P('g', g)\n+\t\t\t  P('G', G)\n+\t\t\t  }\n+#undef P\n \t\t\ttrunc = 0;\n \t\t      }\n \t\t  }"
    }
  ]
}