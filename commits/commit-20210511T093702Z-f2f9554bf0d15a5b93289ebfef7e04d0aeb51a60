{
  "sha": "f2f9554bf0d15a5b93289ebfef7e04d0aeb51a60",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjJmOTU1NGJmMGQxNWE1YjkzMjg5ZWJmZWY3ZTA0ZDBhZWI1MWE2MA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-11T08:27:59Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-11T09:37:02Z"
    },
    "message": "PR27845, readelf heap-buffer-overflow\n\n\tPR 27845\n\t* dwarf.c (process_abbrev_set): Replace start and end parameters\n\twith section, abbrev_base, abbrev_size, abbrev_offset.  Update\n\tall callers.  Sanity check parameters correctly and emit warnings\n\there rather than..\n\t(process_debug_info): ..here.",
    "tree": {
      "sha": "9b5c2f55a9402ff12ebbde7f3da756918ae4ed4f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9b5c2f55a9402ff12ebbde7f3da756918ae4ed4f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f2f9554bf0d15a5b93289ebfef7e04d0aeb51a60",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f2f9554bf0d15a5b93289ebfef7e04d0aeb51a60",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f2f9554bf0d15a5b93289ebfef7e04d0aeb51a60",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f2f9554bf0d15a5b93289ebfef7e04d0aeb51a60/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2005aa0281fccd53ad867ead783aa417516cf39c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2005aa0281fccd53ad867ead783aa417516cf39c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2005aa0281fccd53ad867ead783aa417516cf39c"
    }
  ],
  "stats": {
    "total": 89,
    "additions": 51,
    "deletions": 38
  },
  "files": [
    {
      "sha": "6703b16b2b0c1e322f3233e6f011d6169fdfac4c",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2f9554bf0d15a5b93289ebfef7e04d0aeb51a60/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2f9554bf0d15a5b93289ebfef7e04d0aeb51a60/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=f2f9554bf0d15a5b93289ebfef7e04d0aeb51a60",
      "patch": "@@ -1,3 +1,12 @@\n+2021-05-11  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 27845\n+\t* dwarf.c (process_abbrev_set): Replace start and end parameters\n+\twith section, abbrev_base, abbrev_size, abbrev_offset.  Update\n+\tall callers.  Sanity check parameters correctly and emit warnings\n+\there rather than..\n+\t(process_debug_info): ..here.\n+\n 2021-05-10  Thomas Wolff  <towo@towo.net>\n \n \tPR 4356"
    },
    {
      "sha": "aa48f69bbd45e891678bd30bd2726eb02c3e3171",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 42,
      "deletions": 38,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f2f9554bf0d15a5b93289ebfef7e04d0aeb51a60/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f2f9554bf0d15a5b93289ebfef7e04d0aeb51a60/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=f2f9554bf0d15a5b93289ebfef7e04d0aeb51a60",
      "patch": "@@ -1059,10 +1059,34 @@ add_abbrev_attr (unsigned long   attribute,\n    an abbreviation set was found.  */\n \n static unsigned char *\n-process_abbrev_set (unsigned char *        start,\n-\t\t    const unsigned char *  end,\n-\t\t    abbrev_list *          list)\n+process_abbrev_set (struct dwarf_section *section,\n+\t\t    dwarf_vma abbrev_base,\n+\t\t    dwarf_vma abbrev_size,\n+\t\t    dwarf_vma abbrev_offset,\n+\t\t    abbrev_list *list)\n {\n+  if (abbrev_base >= section->size\n+      || abbrev_size > section->size - abbrev_base)\n+    {\n+      /* PR 17531: file:4bcd9ce9.  */\n+      warn (_(\"Debug info is corrupted, abbrev size (%lx) is larger than \"\n+\t      \"abbrev section size (%lx)\\n\"),\n+\t      (unsigned long) abbrev_base + abbrev_size,\n+\t      (unsigned long) section->size);\n+      return NULL;\n+    }\n+  if (abbrev_offset >= abbrev_size)\n+    {\n+      warn (_(\"Debug info is corrupted, abbrev offset (%lx) is larger than \"\n+\t      \"abbrev section size (%lx)\\n\"),\n+\t    (unsigned long) abbrev_offset,\n+\t    (unsigned long) abbrev_size);\n+      return NULL;\n+    }\n+\n+  unsigned char *start = section->start + abbrev_base;\n+  unsigned char *end = start + abbrev_size;\n+  start += abbrev_offset;\n   while (start < end)\n     {\n       unsigned long entry;\n@@ -3679,12 +3703,9 @@ process_debug_info (struct dwarf_section * section,\n \n \t  list = new_abbrev_list (abbrev_base,\n \t\t\t\t  compunit.cu_abbrev_offset);\n-\t  next = process_abbrev_set\n-\t    (((unsigned char *) debug_displays [abbrev_sec].section.start\n-\t      + abbrev_base + compunit.cu_abbrev_offset),\n-\t     ((unsigned char *) debug_displays [abbrev_sec].section.start\n-\t      + abbrev_base + abbrev_size),\n-\t     list);\n+\t  next = process_abbrev_set (&debug_displays[abbrev_sec].section,\n+\t\t\t\t     abbrev_base, abbrev_size,\n+\t\t\t\t     compunit.cu_abbrev_offset, list);\n \t  list->start_of_next_abbrevs = next;\n \t}\n \n@@ -3905,34 +3926,18 @@ process_debug_info (struct dwarf_section * section,\n \t}\n \n       /* Process the abbrevs used by this compilation unit.  */\n-      if (compunit.cu_abbrev_offset >= abbrev_size)\n-\twarn (_(\"Debug info is corrupted, abbrev offset (%lx) is larger than abbrev section size (%lx)\\n\"),\n-\t      (unsigned long) compunit.cu_abbrev_offset,\n-\t      (unsigned long) abbrev_size);\n-      /* PR 17531: file:4bcd9ce9.  */\n-      else if ((abbrev_base + abbrev_size)\n-\t       > debug_displays [abbrev_sec].section.size)\n-\twarn (_(\"Debug info is corrupted, abbrev size (%lx) is larger than abbrev section size (%lx)\\n\"),\n-\t      (unsigned long) abbrev_base + abbrev_size,\n-\t      (unsigned long) debug_displays [abbrev_sec].section.size);\n-      else\n+      list = find_abbrev_list_by_abbrev_offset (abbrev_base,\n+\t\t\t\t\t\tcompunit.cu_abbrev_offset);\n+      if (list == NULL)\n \t{\n-\t  list = find_abbrev_list_by_abbrev_offset (abbrev_base,\n-\t\t\t\t\t\t    compunit.cu_abbrev_offset);\n-\t  if (list == NULL)\n-\t    {\n-\t      unsigned char * next;\n-\n-\t      list = new_abbrev_list (abbrev_base,\n-\t\t\t\t      compunit.cu_abbrev_offset);\n-\t      next = process_abbrev_set\n-\t\t(((unsigned char *) debug_displays [abbrev_sec].section.start\n-\t\t  + abbrev_base + compunit.cu_abbrev_offset),\n-\t\t ((unsigned char *) debug_displays [abbrev_sec].section.start\n-\t\t  + abbrev_base + abbrev_size),\n-\t\t list);\n-\t      list->start_of_next_abbrevs = next;\n-\t    }\n+\t  unsigned char *next;\n+\n+\t  list = new_abbrev_list (abbrev_base,\n+\t\t\t\t  compunit.cu_abbrev_offset);\n+\t  next = process_abbrev_set (&debug_displays[abbrev_sec].section,\n+\t\t\t\t     abbrev_base, abbrev_size,\n+\t\t\t\t     compunit.cu_abbrev_offset, list);\n+\t  list->start_of_next_abbrevs = next;\n \t}\n \n       level = 0;\n@@ -6326,7 +6331,6 @@ display_debug_abbrev (struct dwarf_section *section,\n {\n   abbrev_entry *entry;\n   unsigned char *start = section->start;\n-  const unsigned char *end = start + section->size;\n \n   introduce (section, false);\n \n@@ -6340,7 +6344,7 @@ display_debug_abbrev (struct dwarf_section *section,\n       if (list == NULL)\n \t{\n \t  list = new_abbrev_list (0, offset);\n-\t  start = process_abbrev_set (start, end, list);\n+\t  start = process_abbrev_set (section, 0, section->size, offset, list);\n \t  list->start_of_next_abbrevs = start;\n \t}\n       else"
    }
  ]
}