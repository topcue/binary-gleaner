{
  "sha": "79b4408780b27eeb60de7f3fe10bc654dddcf067",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzliNDQwODc4MGIyN2VlYjYwZGU3ZjNmZTEwYmM2NTRkZGRjZjA2Nw==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-17T15:11:53Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-20T16:35:05Z"
    },
    "message": "gdbserver: turn prepare_to_access_memory & done_accessing_memory into methods\n\ngdbserver/ChangeLog:\n2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn process_stratum_target's prepare_to_access_memory and\n\tdone_accessing_memory ops into methods of process_target.\n\n\t* target.h (struct process_stratum_target): Remove the target ops.\n\t(class process_target): Add the target ops.\n\t* target.cc (process_target::prepare_to_access_memory): Define.\n\t(process_target::done_accessing_memory): Define.\n\t(prepare_to_access_memory): Update.\n\t(done_accessing_memory): Update.\n\n\tUpdate the derived classes and callers below.\n\n\t* linux-low.cc (linux_target_ops): Update.\n\t(linux_prepare_to_access_memory): Turn into ...\n\t(linux_process_target::prepare_to_access_memory): ... this.\n\t(linux_done_accessing_memory): Turn into ...\n\t(linux_process_target::done_accessing_memory): ... this.\n\t* linux-low.h (class linux_process_target): Update.\n\t* lynx-low.cc (lynx_target_ops): Update.\n\t* nto-low.cc (nto_target_ops): Update.\n\t* win32-low.cc (win32_target_ops): Update.",
    "tree": {
      "sha": "a5e3f35e999c60cd768f29be023cdb523a2b8995",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a5e3f35e999c60cd768f29be023cdb523a2b8995"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/79b4408780b27eeb60de7f3fe10bc654dddcf067",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/79b4408780b27eeb60de7f3fe10bc654dddcf067",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/79b4408780b27eeb60de7f3fe10bc654dddcf067",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/79b4408780b27eeb60de7f3fe10bc654dddcf067/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263"
    }
  ],
  "stats": {
    "total": 102,
    "additions": 63,
    "deletions": 39
  },
  "files": [
    {
      "sha": "d41539bc81866771f141c531a7783ad3e2703dcf",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79b4408780b27eeb60de7f3fe10bc654dddcf067/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79b4408780b27eeb60de7f3fe10bc654dddcf067/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=79b4408780b27eeb60de7f3fe10bc654dddcf067",
      "patch": "@@ -1,3 +1,27 @@\n+2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn process_stratum_target's prepare_to_access_memory and\n+\tdone_accessing_memory ops into methods of process_target.\n+\n+\t* target.h (struct process_stratum_target): Remove the target ops.\n+\t(class process_target): Add the target ops.\n+\t* target.cc (process_target::prepare_to_access_memory): Define.\n+\t(process_target::done_accessing_memory): Define.\n+\t(prepare_to_access_memory): Update.\n+\t(done_accessing_memory): Update.\n+\n+\tUpdate the derived classes and callers below.\n+\n+\t* linux-low.cc (linux_target_ops): Update.\n+\t(linux_prepare_to_access_memory): Turn into ...\n+\t(linux_process_target::prepare_to_access_memory): ... this.\n+\t(linux_done_accessing_memory): Turn into ...\n+\t(linux_process_target::done_accessing_memory): ... this.\n+\t* linux-low.h (class linux_process_target): Update.\n+\t* lynx-low.cc (lynx_target_ops): Update.\n+\t* nto-low.cc (nto_target_ops): Update.\n+\t* win32-low.cc (win32_target_ops): Update.\n+\n 2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn process_stratum_target's fetch_registers and store_registers"
    },
    {
      "sha": "6f408ad9333657d4ad9f52d82ba15098d5556a47",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79b4408780b27eeb60de7f3fe10bc654dddcf067/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79b4408780b27eeb60de7f3fe10bc654dddcf067/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=79b4408780b27eeb60de7f3fe10bc654dddcf067",
      "patch": "@@ -6505,8 +6505,8 @@ linux_unpause_all (int unfreeze)\n   unstop_all_lwps (unfreeze, NULL);\n }\n \n-static int\n-linux_prepare_to_access_memory (void)\n+int\n+linux_process_target::prepare_to_access_memory ()\n {\n   /* Neither ptrace nor /proc/PID/mem allow accessing memory through a\n      running LWP.  */\n@@ -6515,8 +6515,8 @@ linux_prepare_to_access_memory (void)\n   return 0;\n }\n \n-static void\n-linux_done_accessing_memory (void)\n+void\n+linux_process_target::done_accessing_memory ()\n {\n   /* Neither ptrace nor /proc/PID/mem allow accessing memory through a\n      running LWP.  */\n@@ -7359,8 +7359,6 @@ linux_get_hwcap2 (int wordsize)\n static linux_process_target the_linux_target;\n \n static process_stratum_target linux_target_ops = {\n-  linux_prepare_to_access_memory,\n-  linux_done_accessing_memory,\n   linux_read_memory,\n   linux_write_memory,\n   linux_look_up_symbols,"
    },
    {
      "sha": "2b7b357ba674fa542313ef7a5ffc1db4b143d749",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79b4408780b27eeb60de7f3fe10bc654dddcf067/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79b4408780b27eeb60de7f3fe10bc654dddcf067/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=79b4408780b27eeb60de7f3fe10bc654dddcf067",
      "patch": "@@ -295,6 +295,10 @@ class linux_process_target : public process_target\n   void fetch_registers (regcache *regcache, int regno) override;\n \n   void store_registers (regcache *regcache, int regno) override;\n+\n+  int prepare_to_access_memory () override;\n+\n+  void done_accessing_memory () override;\n };\n \n #define get_thread_lwp(thr) ((struct lwp_info *) (thread_target_data (thr)))"
    },
    {
      "sha": "e243764a863330013370eb2f43670c0f6f14121e",
      "filename": "gdbserver/lynx-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79b4408780b27eeb60de7f3fe10bc654dddcf067/gdbserver/lynx-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79b4408780b27eeb60de7f3fe10bc654dddcf067/gdbserver/lynx-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.cc?ref=79b4408780b27eeb60de7f3fe10bc654dddcf067",
      "patch": "@@ -727,8 +727,6 @@ static lynx_process_target the_lynx_target;\n /* The LynxOS target_ops vector.  */\n \n static process_stratum_target lynx_target_ops = {\n-  NULL,  /* prepare_to_access_memory */\n-  NULL,  /* done_accessing_memory */\n   lynx_read_memory,\n   lynx_write_memory,\n   NULL,  /* look_up_symbols */"
    },
    {
      "sha": "36bd40c20d8571571923564faca8cf6ee35c430e",
      "filename": "gdbserver/nto-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79b4408780b27eeb60de7f3fe10bc654dddcf067/gdbserver/nto-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79b4408780b27eeb60de7f3fe10bc654dddcf067/gdbserver/nto-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.cc?ref=79b4408780b27eeb60de7f3fe10bc654dddcf067",
      "patch": "@@ -941,8 +941,6 @@ nto_sw_breakpoint_from_kind (int kind, int *size)\n static nto_process_target the_nto_target;\n \n static process_stratum_target nto_target_ops = {\n-  NULL, /* prepare_to_access_memory */\n-  NULL, /* done_accessing_memory */\n   nto_read_memory,\n   nto_write_memory,\n   NULL, /* nto_look_up_symbols */"
    },
    {
      "sha": "f88e9faf19163ce95194e986d67a5904e3901dc6",
      "filename": "gdbserver/target.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 10,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79b4408780b27eeb60de7f3fe10bc654dddcf067/gdbserver/target.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79b4408780b27eeb60de7f3fe10bc654dddcf067/gdbserver/target.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.cc?ref=79b4408780b27eeb60de7f3fe10bc654dddcf067",
      "patch": "@@ -57,14 +57,9 @@ prepare_to_access_memory (void)\n      it.  */\n   prev_general_thread = cs.general_thread;\n \n-  if (the_target->prepare_to_access_memory != NULL)\n-    {\n-      int res;\n-\n-      res = the_target->prepare_to_access_memory ();\n-      if (res != 0)\n-\treturn res;\n-    }\n+  int res = the_target->pt->prepare_to_access_memory ();\n+  if (res != 0)\n+    return res;\n \n   for_each_thread (prev_general_thread.pid (), [&] (thread_info *thread)\n     {\n@@ -114,8 +109,7 @@ done_accessing_memory (void)\n {\n   client_state &cs = get_client_state ();\n \n-  if (the_target->done_accessing_memory != NULL)\n-    the_target->done_accessing_memory ();\n+  the_target->pt->done_accessing_memory ();\n \n   /* Restore the previous selected thread.  */\n   cs.general_thread = prev_general_thread;\n@@ -402,3 +396,15 @@ process_target::post_create_inferior ()\n {\n   /* Nop.  */\n }\n+\n+int\n+process_target::prepare_to_access_memory ()\n+{\n+  return 0;\n+}\n+\n+void\n+process_target::done_accessing_memory ()\n+{\n+  /* Nop.  */\n+}"
    },
    {
      "sha": "e89ddbb0048fa63c699677cdbcc6f1745ad655c5",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 15,
      "deletions": 17,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79b4408780b27eeb60de7f3fe10bc654dddcf067/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79b4408780b27eeb60de7f3fe10bc654dddcf067/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=79b4408780b27eeb60de7f3fe10bc654dddcf067",
      "patch": "@@ -70,23 +70,6 @@ class process_target;\n    shared code.  */\n struct process_stratum_target\n {\n-  /* Prepare to read or write memory from the inferior process.\n-     Targets use this to do what is necessary to get the state of the\n-     inferior such that it is possible to access memory.\n-\n-     This should generally only be called from client facing routines,\n-     such as gdb_read_memory/gdb_write_memory, or the GDB breakpoint\n-     insertion routine.\n-\n-     Like `read_memory' and `write_memory' below, returns 0 on success\n-     and errno on failure.  */\n-\n-  int (*prepare_to_access_memory) (void);\n-\n-  /* Undo the effects of prepare_to_access_memory.  */\n-\n-  void (*done_accessing_memory) (void);\n-\n   /* Read memory from the inferior process.  This should generally be\n      called through read_inferior_memory, which handles breakpoint shadowing.\n \n@@ -480,6 +463,21 @@ class process_target\n \n      If REGNO is -1, store all registers; otherwise, store at least REGNO.  */\n   virtual void store_registers (regcache *regcache, int regno) = 0;\n+\n+  /* Prepare to read or write memory from the inferior process.\n+     Targets use this to do what is necessary to get the state of the\n+     inferior such that it is possible to access memory.\n+\n+     This should generally only be called from client facing routines,\n+     such as gdb_read_memory/gdb_write_memory, or the GDB breakpoint\n+     insertion routine.\n+\n+     Like `read_memory' and `write_memory' below, returns 0 on success\n+     and errno on failure.  */\n+  virtual int prepare_to_access_memory ();\n+\n+  /* Undo the effects of prepare_to_access_memory.  */\n+  virtual void done_accessing_memory ();\n };\n \n extern process_stratum_target *the_target;"
    },
    {
      "sha": "4a8e64d11aeb11308cd595ea2356f6f29d032479",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/79b4408780b27eeb60de7f3fe10bc654dddcf067/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/79b4408780b27eeb60de7f3fe10bc654dddcf067/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=79b4408780b27eeb60de7f3fe10bc654dddcf067",
      "patch": "@@ -1837,8 +1837,6 @@ win32_sw_breakpoint_from_kind (int kind, int *size)\n static win32_process_target the_win32_target;\n \n static process_stratum_target win32_target_ops = {\n-  NULL, /* prepare_to_access_memory */\n-  NULL, /* done_accessing_memory */\n   win32_read_inferior_memory,\n   win32_write_inferior_memory,\n   NULL, /* lookup_symbols */"
    }
  ]
}