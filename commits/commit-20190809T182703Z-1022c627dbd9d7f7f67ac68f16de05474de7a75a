{
  "sha": "1022c627dbd9d7f7f67ac68f16de05474de7a75a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTAyMmM2MjdkYmQ5ZDdmN2Y2N2FjNjhmMTZkZTA1NDc0ZGU3YTc1YQ==",
  "commit": {
    "author": {
      "name": "Andreas Arnez",
      "email": "arnez@linux.ibm.com",
      "date": "2019-08-09T18:27:03Z"
    },
    "committer": {
      "name": "Andreas Arnez",
      "email": "arnez@linux.ibm.com",
      "date": "2019-08-09T18:27:03Z"
    },
    "message": "s390: Implement 'type_align' gdbarch method\n\nThe align.exp test case yields many FAILs on s390x, since GDB's _Alignoff\ndoesn't always agree with the compiler's.  On s390x, the maximum alignment\nis 8, but GDB returns an alignment of 16 for 16-byte data types such as\n\"long double\".\n\nThis is fixed by implementing the type_align gdbarch method.  The new\nmethod returns an alignment of 8 for all integer, floating-point, and\nvector types larger than 8 bytes.  With this change, all align.exp tests\npass.\n\ngdb/ChangeLog:\n\n\t* s390-tdep.c (s390_type_align): New function.\n\t(s390_gdbarch_init): Set it as type_align gdbarch method.",
    "tree": {
      "sha": "54bac81fe8d3f44c008f16429c295bab8b2e844b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/54bac81fe8d3f44c008f16429c295bab8b2e844b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1022c627dbd9d7f7f67ac68f16de05474de7a75a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1022c627dbd9d7f7f67ac68f16de05474de7a75a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1022c627dbd9d7f7f67ac68f16de05474de7a75a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1022c627dbd9d7f7f67ac68f16de05474de7a75a/comments",
  "author": {
    "login": "aarnez",
    "id": 32961398,
    "node_id": "MDQ6VXNlcjMyOTYxMzk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/32961398?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aarnez",
    "html_url": "https://github.com/aarnez",
    "followers_url": "https://api.github.com/users/aarnez/followers",
    "following_url": "https://api.github.com/users/aarnez/following{/other_user}",
    "gists_url": "https://api.github.com/users/aarnez/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aarnez/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aarnez/subscriptions",
    "organizations_url": "https://api.github.com/users/aarnez/orgs",
    "repos_url": "https://api.github.com/users/aarnez/repos",
    "events_url": "https://api.github.com/users/aarnez/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aarnez/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "aarnez",
    "id": 32961398,
    "node_id": "MDQ6VXNlcjMyOTYxMzk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/32961398?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aarnez",
    "html_url": "https://github.com/aarnez",
    "followers_url": "https://api.github.com/users/aarnez/followers",
    "following_url": "https://api.github.com/users/aarnez/following{/other_user}",
    "gists_url": "https://api.github.com/users/aarnez/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aarnez/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aarnez/subscriptions",
    "organizations_url": "https://api.github.com/users/aarnez/orgs",
    "repos_url": "https://api.github.com/users/aarnez/repos",
    "events_url": "https://api.github.com/users/aarnez/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aarnez/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f211b8c0b91fc7b1657079a495f05a9a4d957821",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f211b8c0b91fc7b1657079a495f05a9a4d957821",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f211b8c0b91fc7b1657079a495f05a9a4d957821"
    }
  ],
  "stats": {
    "total": 38,
    "additions": 38,
    "deletions": 0
  },
  "files": [
    {
      "sha": "00e4bacc2b13f521c1e6608c1db3c905b170f481",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1022c627dbd9d7f7f67ac68f16de05474de7a75a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1022c627dbd9d7f7f67ac68f16de05474de7a75a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1022c627dbd9d7f7f67ac68f16de05474de7a75a",
      "patch": "@@ -1,3 +1,8 @@\n+2019-08-09  Andreas Arnez  <arnez@linux.ibm.com>\n+\n+\t* s390-tdep.c (s390_type_align): New function.\n+\t(s390_gdbarch_init): Set it as type_align gdbarch method.\n+\n 2019-08-09  Tom de Vries  <tdevries@suse.de>\n \n \tPR gdb/24591"
    },
    {
      "sha": "871efc59bca0720d77ea9cf620eb5c8b3d4f9773",
      "filename": "gdb/s390-tdep.c",
      "status": "modified",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1022c627dbd9d7f7f67ac68f16de05474de7a75a/gdb/s390-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1022c627dbd9d7f7f67ac68f16de05474de7a75a/gdb/s390-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s390-tdep.c?ref=1022c627dbd9d7f7f67ac68f16de05474de7a75a",
      "patch": "@@ -52,6 +52,37 @@ constexpr gdb_byte s390_break_insn[] = { 0x0, 0x1 };\n \n typedef BP_MANIPULATION (s390_break_insn) s390_breakpoint;\n \n+/* Types.  */\n+\n+/* Implement the gdbarch type alignment method.  */\n+\n+static ULONGEST\n+s390_type_align (gdbarch *gdbarch, struct type *t)\n+{\n+  t = check_typedef (t);\n+\n+  if (TYPE_LENGTH (t) > 8)\n+    {\n+      switch (TYPE_CODE (t))\n+\t{\n+\tcase TYPE_CODE_INT:\n+\tcase TYPE_CODE_RANGE:\n+\tcase TYPE_CODE_FLT:\n+\tcase TYPE_CODE_ENUM:\n+\tcase TYPE_CODE_CHAR:\n+\tcase TYPE_CODE_BOOL:\n+\tcase TYPE_CODE_DECFLOAT:\n+\t  return 8;\n+\n+\tcase TYPE_CODE_ARRAY:\n+\t  if (TYPE_VECTOR (t))\n+\t    return 8;\n+\t  break;\n+\t}\n+    }\n+  return 0;\n+}\n+\n /* Decoding S/390 instructions.  */\n \n /* Read a single instruction from address AT.  */\n@@ -6944,6 +6975,8 @@ s390_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   set_gdbarch_long_double_bit (gdbarch, 128);\n   set_gdbarch_long_double_format (gdbarch, floatformats_ia64_quad);\n \n+  set_gdbarch_type_align (gdbarch, s390_type_align);\n+\n   /* Breakpoints.  */\n   /* Amount PC must be decremented by after a breakpoint.  This is\n      often the number of bytes returned by gdbarch_breakpoint_from_pc but not"
    }
  ]
}