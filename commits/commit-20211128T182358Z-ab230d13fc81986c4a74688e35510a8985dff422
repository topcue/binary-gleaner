{
  "sha": "ab230d13fc81986c4a74688e35510a8985dff422",
  "node_id": "C_kwDOANOeidoAKGFiMjMwZDEzZmM4MTk4NmM0YTc0Njg4ZTM1NTEwYTg5ODVkZmY0MjI",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-28T05:21:09Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-28T18:23:58Z"
    },
    "message": "sim: cr16: switch to new target-newlib-syscall\n\nUse the new target-newlib-syscall module.  This is needed to merge all\nthe architectures into a single build, and cr16 has a custom syscall\ntable for its newlib/libgloss port.\n\nThis allows cleaning up the syscall ifdef logic.  We know these will\nalways exist now.",
    "tree": {
      "sha": "41ccd740372bf64581db9de40d41922c39b9fecc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/41ccd740372bf64581db9de40d41922c39b9fecc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ab230d13fc81986c4a74688e35510a8985dff422",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ab230d13fc81986c4a74688e35510a8985dff422",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ab230d13fc81986c4a74688e35510a8985dff422",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ab230d13fc81986c4a74688e35510a8985dff422/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0bf1633f0184327316422c476490f2d91ddf1c35",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0bf1633f0184327316422c476490f2d91ddf1c35",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0bf1633f0184327316422c476490f2d91ddf1c35"
    }
  ],
  "stats": {
    "total": 79,
    "additions": 28,
    "deletions": 51
  },
  "files": [
    {
      "sha": "26f65a0384f736cfe089ff6682cfbe629b1f4989",
      "filename": "sim/cr16/Makefile.in",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ab230d13fc81986c4a74688e35510a8985dff422/sim/cr16/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ab230d13fc81986c4a74688e35510a8985dff422/sim/cr16/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/cr16/Makefile.in?ref=ab230d13fc81986c4a74688e35510a8985dff422",
      "patch": "@@ -26,7 +26,4 @@ SIM_OBJS = \\\n \n SIM_EXTRA_DEPS = simops.h\n \n-# This selects the cr16 newlib/libgloss syscall definitions.\n-NL_TARGET = -DNL_TARGET_cr16\n-\n ## COMMON_POST_CONFIG_FRAG"
    },
    {
      "sha": "d63dca50c49bd8d311169b202e858e0ee591eeb8",
      "filename": "sim/cr16/interp.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ab230d13fc81986c4a74688e35510a8985dff422/sim/cr16/interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ab230d13fc81986c4a74688e35510a8985dff422/sim/cr16/interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/cr16/interp.c?ref=ab230d13fc81986c4a74688e35510a8985dff422",
      "patch": "@@ -36,6 +36,8 @@\n #include \"gdb/signals.h\"\n #include \"opcode/cr16.h\"\n \n+#include \"target-newlib-syscall.h\"\n+\n struct _state State;\n \n int cr16_debug;\n@@ -400,6 +402,7 @@ sim_open (SIM_OPEN_KIND kind, struct host_callback_struct *cb,\n \n   /* Set default options before parsing user options.  */\n   current_target_byte_order = BFD_ENDIAN_LITTLE;\n+  cb->syscall_map = cb_cr16_syscall_map;\n \n   /* The cpu data is kept in a separately allocated chunk of memory.  */\n   if (sim_cpu_alloc_all (sd, 1) != SIM_RC_OK)"
    },
    {
      "sha": "75962bfe37ca188d46939d503a272b99bc00a673",
      "filename": "sim/cr16/simops.c",
      "status": "modified",
      "additions": 25,
      "deletions": 48,
      "changes": 73,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ab230d13fc81986c4a74688e35510a8985dff422/sim/cr16/simops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ab230d13fc81986c4a74688e35510a8985dff422/sim/cr16/simops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/cr16/simops.c?ref=ab230d13fc81986c4a74688e35510a8985dff422",
      "patch": "@@ -34,14 +34,12 @@\n #include \"sim-main.h\"\n #include \"sim-signal.h\"\n #include \"simops.h\"\n-#include \"targ-vals.h\"\n+#include \"target-newlib-syscall.h\"\n \n-#ifdef TARGET_SYS_utime\n+#ifdef HAVE_UTIME_H\n #include <utime.h>\n #endif\n-#ifdef TARGET_SYS_wait\n #include <sys/wait.h>\n-#endif\n \n #define EXCEPTION(sig) sim_engine_halt (sd, cpu, NULL, PC, sim_stopped, sig)\n \n@@ -5123,22 +5121,20 @@ OP_C_C (SIM_DESC sd, SIM_CPU *cpu)\n \tswitch (FUNC)\n \t  {\n #if !defined(__GO32__) && !defined(_WIN32)\n-#ifdef TARGET_SYS_fork\n-\t  case TARGET_SYS_fork:\n+\t  case TARGET_NEWLIB_CR16_SYS_fork:\n \t    trace_input (\"<fork>\", OP_VOID, OP_VOID, OP_VOID);\n \t    RETVAL (fork ());\n \t    trace_output_16 (sd, result);\n \t    break;\n-#endif\n \n #define getpid() 47\n-\t  case TARGET_SYS_getpid:\n+\t  case TARGET_NEWLIB_CR16_SYS_getpid:\n \t    trace_input (\"<getpid>\", OP_VOID, OP_VOID, OP_VOID);\n \t    RETVAL (getpid ());\n \t    trace_output_16 (sd, result);\n \t    break;\n \n-\t  case TARGET_SYS_kill:\n+\t  case TARGET_NEWLIB_CR16_SYS_kill:\n \t    trace_input (\"<kill>\", OP_REG, OP_REG, OP_VOID);\n \t    if (PARM1 == getpid ())\n \t      {\n@@ -5266,25 +5262,20 @@ OP_C_C (SIM_DESC sd, SIM_CPU *cpu)\n \t      }\n \t    break;\n \n-#ifdef TARGET_SYS_execve\n-\t  case TARGET_SYS_execve:\n+\t  case TARGET_NEWLIB_CR16_SYS_execve:\n \t    trace_input (\"<execve>\", OP_VOID, OP_VOID, OP_VOID);\n \t    RETVAL (execve (MEMPTR (PARM1), (char **) MEMPTR (PARM2<<16|PARM3),\n \t\t\t     (char **)MEMPTR (PARM4)));\n \t    trace_output_16 (sd, result);\n \t    break;\n-#endif\n \n-#ifdef TARGET_SYS_execv\n-\t  case TARGET_SYS_execv:\n+\t  case TARGET_NEWLIB_CR16_SYS_execv:\n \t    trace_input (\"<execv>\", OP_VOID, OP_VOID, OP_VOID);\n \t    RETVAL (execve (MEMPTR (PARM1), (char **) MEMPTR (PARM2), NULL));\n \t    trace_output_16 (sd, result);\n \t    break;\n-#endif\n \n-#ifdef TARGET_SYS_pipe\n-\t  case TARGET_SYS_pipe:\n+\t  case TARGET_NEWLIB_CR16_SYS_pipe:\n \t    {\n \t      reg_t buf;\n \t      int host_fd[2];\n@@ -5298,10 +5289,8 @@ OP_C_C (SIM_DESC sd, SIM_CPU *cpu)\n \t      trace_output_16 (sd, result);\n \t    }\n \t  break;\n-#endif\n \n-#ifdef TARGET_SYS_wait\n-\t  case TARGET_SYS_wait:\n+\t  case TARGET_NEWLIB_CR16_SYS_wait:\n \t    {\n \t      int status;\n \t      trace_input (\"<wait>\", OP_REG, OP_VOID, OP_VOID);\n@@ -5311,87 +5300,82 @@ OP_C_C (SIM_DESC sd, SIM_CPU *cpu)\n \t      trace_output_16 (sd, result);\n \t    }\n \t  break;\n-#endif\n #else\n-\t  case TARGET_SYS_getpid:\n+\t  case TARGET_NEWLIB_CR16_SYS_getpid:\n \t    trace_input (\"<getpid>\", OP_VOID, OP_VOID, OP_VOID);\n \t    RETVAL (1);\n \t    trace_output_16 (sd, result);\n \t    break;\n \n-\t  case TARGET_SYS_kill:\n+\t  case TARGET_NEWLIB_CR16_SYS_kill:\n \t    trace_input (\"<kill>\", OP_REG, OP_REG, OP_VOID);\n \t    trace_output_void (sd);\n \t    EXCEPTION (PARM2);\n \t    break;\n #endif\n \n-\t  case TARGET_SYS_read:\n+\t  case TARGET_NEWLIB_CR16_SYS_read:\n \t    trace_input (\"<read>\", OP_REG, OP_MEMREF, OP_REG);\n \t    RETVAL (cb->read (cb, PARM1,\n \t\t\t      MEMPTR (((unsigned long)PARM3 << 16)\n \t\t\t\t      | ((unsigned long)PARM2)), PARM4));\n \t    trace_output_16 (sd, result);\n \t    break;\n \n-\t  case TARGET_SYS_write:\n+\t  case TARGET_NEWLIB_CR16_SYS_write:\n \t    trace_input (\"<write>\", OP_REG, OP_MEMREF, OP_REG);\n \t    RETVAL ((int)cb->write (cb, PARM1,\n \t\t\t\t    MEMPTR (((unsigned long)PARM3 << 16)\n \t\t\t\t\t    | PARM2), PARM4));\n \t    trace_output_16 (sd, result);\n \t    break;\n \n-\t  case TARGET_SYS_lseek:\n+\t  case TARGET_NEWLIB_CR16_SYS_lseek:\n \t    trace_input (\"<lseek>\", OP_REG, OP_REGP, OP_REG);\n \t    RETVAL32 (cb->lseek (cb, PARM1, ((((long) PARM3) << 16) | PARM2),\n \t\t\t\t PARM4));\n \t    trace_output_32 (sd, result);\n \t    break;\n \n-\t  case TARGET_SYS_close:\n+\t  case TARGET_NEWLIB_CR16_SYS_close:\n \t    trace_input (\"<close>\", OP_REG, OP_VOID, OP_VOID);\n \t    RETVAL (cb->close (cb, PARM1));\n \t    trace_output_16 (sd, result);\n \t    break;\n \n-\t  case TARGET_SYS_open:\n+\t  case TARGET_NEWLIB_CR16_SYS_open:\n \t    trace_input (\"<open>\", OP_MEMREF, OP_REG, OP_VOID);\n \t    RETVAL32 (cb->open (cb, MEMPTR ((((unsigned long)PARM2) << 16)\n \t\t\t\t\t    | PARM1), PARM3));\n \t    trace_output_32 (sd, result);\n \t    break;\n \n-#ifdef TARGET_SYS_rename\n-\t  case TARGET_SYS_rename:\n+\t  case TARGET_NEWLIB_CR16_SYS_rename:\n \t    trace_input (\"<rename>\", OP_MEMREF, OP_MEMREF, OP_VOID);\n \t    RETVAL (cb->rename (cb, MEMPTR ((((unsigned long)PARM2) << 16) | PARM1),\n \t\t\t\t    MEMPTR ((((unsigned long)PARM4) << 16) | PARM3)));\n \t    trace_output_16 (sd, result);\n \t    break;\n-#endif\n \n \t  case 0x408: /* REVISIT: Added a dummy getenv call. */\n \t    trace_input (\"<getenv>\", OP_MEMREF, OP_MEMREF, OP_VOID);\n \t    RETVAL32 (0);\n \t    trace_output_32 (sd, result);\n \t    break;\n \n-\t  case TARGET_SYS_exit:\n+\t  case TARGET_NEWLIB_CR16_SYS_exit:\n \t    trace_input (\"<exit>\", OP_VOID, OP_VOID, OP_VOID);\n \t    trace_output_void (sd);\n \t    sim_engine_halt (sd, cpu, NULL, PC, sim_exited, GPR (2));\n \t    break;\n \n-\t  case TARGET_SYS_unlink:\n+\t  case TARGET_NEWLIB_CR16_SYS_unlink:\n \t    trace_input (\"<unlink>\", OP_MEMREF, OP_VOID, OP_VOID);\n \t    RETVAL (cb->unlink (cb, MEMPTR (((unsigned long)PARM2 << 16) | PARM1)));\n \t    trace_output_16 (sd, result);\n \t    break;\n \n-\n-#ifdef TARGET_SYS_stat\n-\t  case TARGET_SYS_stat:\n+\t  case TARGET_NEWLIB_CR16_SYS_stat:\n \t    trace_input (\"<stat>\", OP_VOID, OP_VOID, OP_VOID);\n \t    /* stat system call.  */\n \t    {\n@@ -5419,40 +5403,33 @@ OP_C_C (SIM_DESC sd, SIM_CPU *cpu)\n \t    }\n \t    trace_output_16 (sd, result);\n \t    break;\n-#endif\n \n-#ifdef TARGET_SYS_chown\n-\t  case TARGET_SYS_chown:\n+\t  case TARGET_NEWLIB_CR16_SYS_chown:\n \t    trace_input (\"<chown>\", OP_VOID, OP_VOID, OP_VOID);\n \t    RETVAL (chown (MEMPTR (PARM1), PARM2, PARM3));\n \t    trace_output_16 (sd, result);\n \t    break;\n-#endif\n \n-\t  case TARGET_SYS_chmod:\n+\t  case TARGET_NEWLIB_CR16_SYS_chmod:\n \t    trace_input (\"<chmod>\", OP_VOID, OP_VOID, OP_VOID);\n \t    RETVAL (chmod (MEMPTR (PARM1), PARM2));\n \t    trace_output_16 (sd, result);\n \t    break;\n \n-#ifdef TARGET_SYS_utime\n-\t  case TARGET_SYS_utime:\n+\t  case TARGET_NEWLIB_CR16_SYS_utime:\n \t    trace_input (\"<utime>\", OP_REG, OP_REG, OP_REG);\n \t    /* Cast the second argument to void *, to avoid type mismatch\n \t       if a prototype is present.  */\n \t    RETVAL (utime (MEMPTR (PARM1), (void *) MEMPTR (PARM2)));\n \t    trace_output_16 (sd, result);\n \t    break;\n-#endif\n \n-#ifdef TARGET_SYS_time\n-\t  case TARGET_SYS_time:\n+\t  case TARGET_NEWLIB_CR16_SYS_time:\n \t    trace_input (\"<time>\", OP_VOID, OP_VOID, OP_REG);\n \t    RETVAL32 (time (NULL));\n \t    trace_output_32 (sd, result);\n \t    break;\n-#endif\n-\t    \n+\n \t  default:\n \t    a = OP[0];\n \t    switch (a)"
    }
  ]
}