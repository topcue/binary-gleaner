{
  "sha": "b0319eaaf9d1f4e730c532058f2fff0b4e5ce682",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjAzMTllYWFmOWQxZjRlNzMwYzUzMjA1OGYyZmZmMGI0ZTVjZTY4Mg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-04-04T22:57:11Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-04-09T18:03:25Z"
    },
    "message": "Use find_thread_in_random in select_event_lwp\n\nI noticed that find_thread_in_random duplicates the code in\nfind_thread_in_random, so this patch changes the latter to use the\nformer.\n\nThere are two other spots in gdb that do this, but to unify all of\nthem would require switching some code from using the \"iterate over\"\nidiom to using iterators.\n\nAnother possible improvement is that find_thread_in_random could be\nmade single-pass using reservoir sampling.\n\nTested by the buildbot.\n\ngdb/gdbserver/ChangeLog\n2019-04-09  Tom Tromey  <tromey@adacore.com>\n\n\t* linux-low.c (select_event_lwp): Use find_thread_in_random.",
    "tree": {
      "sha": "5232bf0ddc163b3a58e536e74f514c1c7f574f92",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5232bf0ddc163b3a58e536e74f514c1c7f574f92"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b0319eaaf9d1f4e730c532058f2fff0b4e5ce682",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b0319eaaf9d1f4e730c532058f2fff0b4e5ce682",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b0319eaaf9d1f4e730c532058f2fff0b4e5ce682",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b0319eaaf9d1f4e730c532058f2fff0b4e5ce682/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9ab8741a48294e19d514721c710c81bba46db7f2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9ab8741a48294e19d514721c710c81bba46db7f2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9ab8741a48294e19d514721c710c81bba46db7f2"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 8,
    "deletions": 31
  },
  "files": [
    {
      "sha": "1618e2c4b0f0c7c32d8a4e8d1cdc817d89fab336",
      "filename": "gdb/gdbserver/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b0319eaaf9d1f4e730c532058f2fff0b4e5ce682/gdb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b0319eaaf9d1f4e730c532058f2fff0b4e5ce682/gdb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/ChangeLog?ref=b0319eaaf9d1f4e730c532058f2fff0b4e5ce682",
      "patch": "@@ -1,3 +1,7 @@\n+2019-04-09  Tom Tromey  <tromey@adacore.com>\n+\n+\t* linux-low.c (select_event_lwp): Use find_thread_in_random.\n+\n 2019-04-08  Tom Tromey  <tom@tromey.com>\n \n \t* linux-low.c (linux_detach_one_lwp): Replace throw_exception with"
    },
    {
      "sha": "168f4b2abc2db0f33ac65eb574f141f9052b18e6",
      "filename": "gdb/gdbserver/linux-low.c",
      "status": "modified",
      "additions": 4,
      "deletions": 31,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b0319eaaf9d1f4e730c532058f2fff0b4e5ce682/gdb/gdbserver/linux-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b0319eaaf9d1f4e730c532058f2fff0b4e5ce682/gdb/gdbserver/linux-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-low.c?ref=b0319eaaf9d1f4e730c532058f2fff0b4e5ce682",
      "patch": "@@ -2828,7 +2828,6 @@ linux_wait_for_event (ptid_t ptid, int *wstatp, int options)\n static void\n select_event_lwp (struct lwp_info **orig_lp)\n {\n-  int random_selector;\n   struct thread_info *event_thread = NULL;\n \n   /* In all-stop, give preference to the LWP that is being\n@@ -2862,39 +2861,13 @@ select_event_lwp (struct lwp_info **orig_lp)\n       /* No single-stepping LWP.  Select one at random, out of those\n          which have had events.  */\n \n-      /* First see how many events we have.  */\n-      int num_events = 0;\n-      for_each_thread ([&] (thread_info *thread)\n-\t{\n-\t  lwp_info *lp = get_thread_lwp (thread);\n-\n-\t  /* Count only resumed LWPs that have an event pending. */\n-\t  if (thread->last_status.kind == TARGET_WAITKIND_IGNORE\n-\t      && lp->status_pending_p)\n-\t    num_events++;\n-\t});\n-      gdb_assert (num_events > 0);\n-\n-      /* Now randomly pick a LWP out of those that have had\n-\t events.  */\n-      random_selector = (int)\n-\t((num_events * (double) rand ()) / (RAND_MAX + 1.0));\n-\n-      if (debug_threads && num_events > 1)\n-\tdebug_printf (\"SEL: Found %d SIGTRAP events, selecting #%d\\n\",\n-\t\t      num_events, random_selector);\n-\n-      event_thread = find_thread ([&] (thread_info *thread)\n+      event_thread = find_thread_in_random ([&] (thread_info *thread)\n \t{\n \t  lwp_info *lp = get_thread_lwp (thread);\n \n-\t  /* Select only resumed LWPs that have an event pending.  */\n-\t  if (thread->last_status.kind == TARGET_WAITKIND_IGNORE\n-\t      && lp->status_pending_p)\n-\t    if (random_selector-- == 0)\n-\t      return true;\n-\n-\t  return false;\n+\t  /* Only resumed LWPs that have an event pending. */\n+\t  return (thread->last_status.kind == TARGET_WAITKIND_IGNORE\n+\t\t  && lp->status_pending_p);\n \t});\n     }\n "
    }
  ]
}