{
  "sha": "efdf6a733d2a59a1a07ec61e848fa9e128259fe3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWZkZjZhNzMzZDJhNTlhMWEwN2VjNjFlODQ4ZmE5ZTEyODI1OWZlMw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-12T09:15:32Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-09-16T10:01:24Z"
    },
    "message": "gdb: Convert language_data::la_range_check to a method\n\nConvert language_data::la_range_check member variable to a virtual\nmethod language_defn::range_checking_on_by_default.\n\nWhere the previous member variable was of type 'enum range_check', the\nnew member function returns a boolean that selects between range\nchecking being on or off.  This removes the possibility of a language\nhaving its default be the third enum state, range_check_warn, which\nno language currently used.\n\nThis all makes sense I think, the language's true/false provides the\ndefault when the global 'set check range' is set to 'auto'.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* ada-lang.c (ada_language_data): Remove la_range_check\n\tinitializer.\n\t* c-lang.c (c_language_data): Likewise.\n\t(cplus_language_data): Likewise.\n\t(asm_language_data): Likewise.\n\t(minimal_language_data): Likewise.\n\t* d-lang.c (d_language_data): Likewise.\n\t* f-lang.c (f_language_data): Likewise.\n\t(f_language::range_checking_on_by_default): New member function.\n\t* go-lang.c (go_language_data): Remove la_range_check initializer.\n\t* language.c (enum range_mode): Moved here from language.h.\n\t(range_mode): Made static.\n\t(show_range_command): Update to use\n\trange_checking_on_by_default.\n\t(set_range_command): Likewise.\n\t(set_range_case): Likewise.\n\t(unknown_language_data): Remove la_range_check initializer.\n\t(auto_language_data): Likewise.\n\t* language.h (range_mode): Delete.  Enum definition moved to\n\tlanguage.c.\n\t(language_data): Remove la_range_check field.\n\t(language_defn::range_checking_on_by_default): New member\n\tfunction.\n\t* m2-lang.c (m2_language_data): Remove la_range_check initializer.\n\t(m2_language::range_checking_on_by_default): New member function.\n\t* objc-lang.c (objc_language_data): Remove la_range_check\n\tinitializer.\n\t* opencl-lang.c (opencl_language_data): Likewise.\n\t* p-lang.c (pascal_language_data): Likewise.\n\t(pascal_language::range_checking_on_by_default): New member\n\tfunction.\n\t* rust-lang.c (rust_language_data): Remove la_range_check\n\tinitializer.\n\t(rust_language::range_checking_on_by_default): New member\n\tfunction.",
    "tree": {
      "sha": "896cf4b18a264b7128c28eaf84d4a694fc5eea01",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/896cf4b18a264b7128c28eaf84d4a694fc5eea01"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/efdf6a733d2a59a1a07ec61e848fa9e128259fe3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efdf6a733d2a59a1a07ec61e848fa9e128259fe3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/efdf6a733d2a59a1a07ec61e848fa9e128259fe3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bf92aec5884b64a73a334aea875c68e8d1f959fc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf92aec5884b64a73a334aea875c68e8d1f959fc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bf92aec5884b64a73a334aea875c68e8d1f959fc"
    }
  ],
  "stats": {
    "total": 116,
    "additions": 83,
    "deletions": 33
  },
  "files": [
    {
      "sha": "b46e89c412804c1f8da7905ef45003c2c68c53a1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=efdf6a733d2a59a1a07ec61e848fa9e128259fe3",
      "patch": "@@ -1,3 +1,41 @@\n+2020-09-16  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* ada-lang.c (ada_language_data): Remove la_range_check\n+\tinitializer.\n+\t* c-lang.c (c_language_data): Likewise.\n+\t(cplus_language_data): Likewise.\n+\t(asm_language_data): Likewise.\n+\t(minimal_language_data): Likewise.\n+\t* d-lang.c (d_language_data): Likewise.\n+\t* f-lang.c (f_language_data): Likewise.\n+\t(f_language::range_checking_on_by_default): New member function.\n+\t* go-lang.c (go_language_data): Remove la_range_check initializer.\n+\t* language.c (enum range_mode): Moved here from language.h.\n+\t(range_mode): Made static.\n+\t(show_range_command): Update to use\n+\trange_checking_on_by_default.\n+\t(set_range_command): Likewise.\n+\t(set_range_case): Likewise.\n+\t(unknown_language_data): Remove la_range_check initializer.\n+\t(auto_language_data): Likewise.\n+\t* language.h (range_mode): Delete.  Enum definition moved to\n+\tlanguage.c.\n+\t(language_data): Remove la_range_check field.\n+\t(language_defn::range_checking_on_by_default): New member\n+\tfunction.\n+\t* m2-lang.c (m2_language_data): Remove la_range_check initializer.\n+\t(m2_language::range_checking_on_by_default): New member function.\n+\t* objc-lang.c (objc_language_data): Remove la_range_check\n+\tinitializer.\n+\t* opencl-lang.c (opencl_language_data): Likewise.\n+\t* p-lang.c (pascal_language_data): Likewise.\n+\t(pascal_language::range_checking_on_by_default): New member\n+\tfunction.\n+\t* rust-lang.c (rust_language_data): Remove la_range_check\n+\tinitializer.\n+\t(rust_language::range_checking_on_by_default): New member\n+\tfunction.\n+\n 2020-09-16  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* dwarf2/read.c (dwarf2_physname): Remove special case for"
    },
    {
      "sha": "0a0dc21d59903e2e5e75cef2057166dcaa3c4272",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=efdf6a733d2a59a1a07ec61e848fa9e128259fe3",
      "patch": "@@ -13708,7 +13708,6 @@ ada_get_symbol_name_matcher (const lookup_name_info &lookup_name)\n \n extern const struct language_data ada_language_data =\n {\n-  range_check_off,\n   case_sensitive_on,            /* Yes, Ada is case-insensitive, but\n                                    that's not quite what this means.  */\n   array_row_major,"
    },
    {
      "sha": "88af4585b21c6635a2a0eaf48a7b34b24e8e0cca",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=efdf6a733d2a59a1a07ec61e848fa9e128259fe3",
      "patch": "@@ -875,7 +875,6 @@ const struct exp_descriptor exp_descriptor_c =\n \n extern const struct language_data c_language_data =\n {\n-  range_check_off,\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_c,\n@@ -985,7 +984,6 @@ enum cplus_primitive_types {\n \n extern const struct language_data cplus_language_data =\n {\n-  range_check_off,\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_c,\n@@ -1193,7 +1191,6 @@ static cplus_language cplus_language_defn;\n \n extern const struct language_data asm_language_data =\n {\n-  range_check_off,\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_c,\n@@ -1264,7 +1261,6 @@ static asm_language asm_language_defn;\n \n extern const struct language_data minimal_language_data =\n {\n-  range_check_off,\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_c,"
    },
    {
      "sha": "4cbe9d8fa6a778b3f01c31dc406348621cafe41c",
      "filename": "gdb/d-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/d-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/d-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-lang.c?ref=efdf6a733d2a59a1a07ec61e848fa9e128259fe3",
      "patch": "@@ -128,7 +128,6 @@ enum d_primitive_types {\n \n extern const struct language_data d_language_data =\n {\n-  range_check_off,\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_no,"
    },
    {
      "sha": "dc5c0859a14943ef982014c225a0158c930267f2",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=efdf6a733d2a59a1a07ec61e848fa9e128259fe3",
      "patch": "@@ -486,7 +486,6 @@ static const struct exp_descriptor exp_descriptor_f =\n \n extern const struct language_data f_language_data =\n {\n-  range_check_on,\n   case_sensitive_off,\n   array_column_major,\n   macro_expansion_no,\n@@ -722,6 +721,11 @@ class f_language : public language_defn\n   bool c_style_arrays_p () const override\n   { return false; }\n \n+  /* See language.h.  */\n+\n+  bool range_checking_on_by_default () const override\n+  { return true; }\n+\n protected:\n \n   /* See language.h.  */"
    },
    {
      "sha": "f5abd518e2249c42efae4238910ec098390a584c",
      "filename": "gdb/go-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/go-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/go-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.c?ref=efdf6a733d2a59a1a07ec61e848fa9e128259fe3",
      "patch": "@@ -508,7 +508,6 @@ enum go_primitive_types {\n \n extern const struct language_data go_language_data =\n {\n-  range_check_off,\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_no,"
    },
    {
      "sha": "56b3b2eb306047dad908d52778a63a88f0db1986",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 18,
      "deletions": 6,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=efdf6a733d2a59a1a07ec61e848fa9e128259fe3",
      "patch": "@@ -49,12 +49,21 @@\n \n static void set_range_case (void);\n \n+/* range_mode ==\n+   range_mode_auto:   range_check set automatically to default of language.\n+   range_mode_manual: range_check set manually by user.  */\n+\n+enum range_mode\n+  {\n+    range_mode_auto, range_mode_manual\n+  };\n+\n /* The current (default at startup) state of type and range checking.\n    (If the modes are set to \"auto\", though, these are changed based\n    on the default language at startup, and then again based on the\n    language of the first source file.  */\n \n-enum range_mode range_mode = range_mode_auto;\n+static enum range_mode range_mode = range_mode_auto;\n enum range_check range_check = range_check_off;\n enum case_mode case_mode = case_mode_auto;\n enum case_sensitivity case_sensitivity = case_sensitive_on;\n@@ -209,7 +218,9 @@ show_range_command (struct ui_file *file, int from_tty,\n     fprintf_filtered (gdb_stdout, _(\"Range checking is \\\"%s\\\".\\n\"),\n \t\t      value);\n \n-  if (range_check != current_language->la_range_check)\n+  if (range_check == range_check_warn\n+      || ((range_check == range_check_on)\n+\t  != current_language->range_checking_on_by_default ()))\n     warning (_(\"the current range check setting \"\n \t       \"does not match the language.\\n\"));\n }\n@@ -245,7 +256,9 @@ set_range_command (const char *ignore,\n       internal_error (__FILE__, __LINE__,\n \t\t      _(\"Unrecognized range check setting: \\\"%s\\\"\"), range);\n     }\n-  if (range_check != current_language->la_range_check)\n+  if (range_check == range_check_warn\n+      || ((range_check == range_check_on)\n+\t  != current_language->range_checking_on_by_default ()))\n     warning (_(\"the current range check setting \"\n \t       \"does not match the language.\\n\"));\n }\n@@ -329,7 +342,8 @@ static void\n set_range_case (void)\n {\n   if (range_mode == range_mode_auto)\n-    range_check = current_language->la_range_check;\n+    range_check = (current_language->range_checking_on_by_default ()\n+\t\t   ? range_check_on : range_check_off);\n \n   if (case_mode == case_mode_auto)\n     case_sensitivity = current_language->la_case_sensitivity;\n@@ -775,7 +789,6 @@ unknown_language_arch_info (struct gdbarch *gdbarch,\n \n extern const struct language_data unknown_language_data =\n {\n-  range_check_off,\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_no,\n@@ -912,7 +925,6 @@ static unknown_language unknown_language_defn;\n \n extern const struct language_data auto_language_data =\n {\n-  range_check_off,\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_no,"
    },
    {
      "sha": "ffdcdbc21f8adb55c626e412665f209326c189d0",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 7,
      "deletions": 14,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=efdf6a733d2a59a1a07ec61e848fa9e128259fe3",
      "patch": "@@ -42,16 +42,6 @@ class innermost_block_tracker;\n \n #define MAX_FORTRAN_DIMS  7\t/* Maximum number of F77 array dims.  */\n \n-/* range_mode ==\n-   range_mode_auto:   range_check set automatically to default of language.\n-   range_mode_manual: range_check set manually by user.  */\n-\n-extern enum range_mode\n-  {\n-    range_mode_auto, range_mode_manual\n-  }\n-range_mode;\n-\n /* range_check ==\n    range_check_on:    Ranges are checked in GDB expressions, producing errors.\n    range_check_warn:  Ranges are checked, producing warnings.\n@@ -188,10 +178,6 @@ extern const char *default_word_break_characters (void);\n \n struct language_data\n   {\n-    /* Default range checking.  */\n-\n-    enum range_check la_range_check;\n-\n     /* Default case sensitivity.  */\n     enum case_sensitivity la_case_sensitivity;\n \n@@ -572,6 +558,13 @@ struct language_defn : language_data\n   virtual bool store_sym_names_in_linkage_form_p () const\n   { return false; }\n \n+  /* Default range checking preference.  The return value from this\n+     function provides the automatic setting for 'set check range'.  As a\n+     consequence a user is free to override this setting if they want.  */\n+\n+  virtual bool range_checking_on_by_default () const\n+  { return false; }\n+\n protected:\n \n   /* This is the overridable part of the GET_SYMBOL_NAME_MATCHER method."
    },
    {
      "sha": "785436c4f22bafa4d210fcf6f02e8d3633e2c37f",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=efdf6a733d2a59a1a07ec61e848fa9e128259fe3",
      "patch": "@@ -199,7 +199,6 @@ const struct exp_descriptor exp_descriptor_modula2 =\n \n extern const struct language_data m2_language_data =\n {\n-  range_check_on,\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_no,\n@@ -444,6 +443,11 @@ class m2_language : public language_defn\n \n   char string_lower_bound () const override\n   { return 0; }\n+\n+  /* See language.h.  */\n+\n+  bool range_checking_on_by_default () const override\n+  { return true; }\n };\n \n /* Single instance of the M2 language.  */"
    },
    {
      "sha": "1788910c8d5d02cba9714756a0d47b23ab6cf411",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=efdf6a733d2a59a1a07ec61e848fa9e128259fe3",
      "patch": "@@ -323,7 +323,6 @@ static const struct op_print objc_op_print_tab[] =\n \n extern const struct language_data objc_language_data =\n {\n-  range_check_off,\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_c,"
    },
    {
      "sha": "2ad93213a27d95391e03436b5d779c49c8b236b0",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=efdf6a733d2a59a1a07ec61e848fa9e128259fe3",
      "patch": "@@ -1006,7 +1006,6 @@ const struct exp_descriptor exp_descriptor_opencl =\n /* Constant data representing the OpenCL language.  */\n extern const struct language_data opencl_language_data =\n {\n-  range_check_off,\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_c,"
    },
    {
      "sha": "2325aca96b53362866ac6a5515e3fd528da9c34c",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=efdf6a733d2a59a1a07ec61e848fa9e128259fe3",
      "patch": "@@ -252,7 +252,6 @@ enum pascal_primitive_types {\n \n extern const struct language_data pascal_language_data =\n {\n-  range_check_on,\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_no,\n@@ -508,6 +507,11 @@ class pascal_language : public language_defn\n \n   const char *name_of_this () const override\n   { return \"this\"; }\n+\n+  /* See language.h.  */\n+\n+  bool range_checking_on_by_default () const override\n+  { return true; }\n };\n \n /* Single instance of the Pascal language class.  */"
    },
    {
      "sha": "4489cabc6490b6fb72700aaacfb64f4b99181208",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efdf6a733d2a59a1a07ec61e848fa9e128259fe3/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=efdf6a733d2a59a1a07ec61e848fa9e128259fe3",
      "patch": "@@ -1901,7 +1901,6 @@ static const struct exp_descriptor exp_descriptor_rust =\n \n extern const struct language_data rust_language_data =\n {\n-  range_check_on,\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_no,\n@@ -2149,6 +2148,11 @@ class rust_language : public language_defn\n \t\t&& rust_slice_type_p (type)\n \t\t&& strcmp (type->name (), \"&str\") == 0));\n   }\n+\n+  /* See language.h.  */\n+\n+  bool range_checking_on_by_default () const override\n+  { return true; }\n };\n \n /* Single instance of the Rust language class.  */"
    }
  ]
}