{
  "sha": "a2fedca99c622e1b523046d09f573b06de0207a6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTJmZWRjYTk5YzYyMmUxYjUyMzA0NmQwOWY1NzNiMDZkZTAyMDdhNg==",
  "commit": {
    "author": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-12-21T09:55:11Z"
    },
    "committer": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2020-01-25T10:05:59Z"
    },
    "message": "Implement 'set/show exec-file-mismatch'.\n\nThis option allows to tell GDB to detect and possibly handle mismatched exec-files.\n\nA recurrent problem with GDB is that GDB uses the wrong exec-file\nwhen using the attach/detach commands successively.\nAlso, in case the user specifies a file on the command line but attaches\nto the wrong PID, this error is not made visible and gives a not user\nunderstandable behaviour.\n\nFor example:\n  $ gdb\n  ...\n  (gdb) atta 2682  ############################################  PID running 'sleepers' executable\n  Attaching to process 2682\n  [New LWP 2683]\n  [New LWP 2684]\n  [New LWP 2685]\n  [Thread debugging using libthread_db enabled]\n  Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n  0x00007f5ff829f603 in select () at ../sysdeps/unix/syscall-template.S:84\n  84    ../sysdeps/unix/syscall-template.S: No such file or directory.\n  (gdb) det\n  Detaching from program: /home/philippe/valgrind/git/trunk_untouched/gdbserver_tests/sleepers, process 2682\n  [Inferior 1 (process 2682) detached]\n  (gdb) atta 31069 ############################################  PID running 'gdb' executable\n  Attaching to program: /home/philippe/valgrind/git/trunk_untouched/gdbserver_tests/sleepers, process 31069\n  Reading symbols from /lib64/ld-linux-x86-64.so.2...\n  Reading symbols from /usr/lib/debug/.build-id/60/6df9c355103e82140d513bc7a25a635591c153.debug...\n  0x00007f43c23478a0 in ?? ()\n  (gdb) bt\n  #0  0x00007f43c23478a0 in ?? ()\n  #1  0x0000558909e3ad91 in ?? ()\n  #2  0x0000202962646700 in ?? ()\n  #3  0x00007ffc69c74e70 in ?? ()\n  #4  0x000055890c1d2350 in ?? ()\n  #5  0x0000000000000000 in ?? ()\n  (gdb)\n\nThe second attach has kept the executable of the first attach.\n(in this case, 31069 is the PID of a GDB, that has nothing to do\nwith the first determined 'sleepers' executable).\n\nSimilarly, if specifying an executable, but attaching to a wrong pid,\nwe get:\n\n  gdb /home/philippe/valgrind/git/trunk_untouched/gdbserver_tests/sleepers\n  ...\n  Reading symbols from /home/philippe/valgrind/git/trunk_untouched/gdbserver_tests/sleepers...\n  (gdb) atta 31069 ############################################  PID running 'gdb' executable\n  Attaching to program: /home/philippe/valgrind/git/trunk_untouched/gdbserver_tests/sleepers, process 31069\n  Reading symbols from /lib64/ld-linux-x86-64.so.2...\n  Reading symbols from /usr/lib/debug/.build-id/60/6df9c355103e82140d513bc7a25a635591c153.debug...\n  0x00007f43c23478a0 in ?? ()\n  (gdb) bt\n  #0  0x00007f43c23478a0 in ?? ()\n  #1  0x0000558909e3ad91 in ?? ()\n  #2  0x0000202962646700 in ?? ()\n  #3  0x00007ffc69c74e70 in ?? ()\n  #4  0x000055890c1d2350 in ?? ()\n  #5  0x0000000000000000 in ?? ()\n  (gdb)\n\nAnd it is unclear to the user what has happened/what is going wrong.\n\nThis patch series implements a new option:\n    (gdb) apropos exec-file-mismatch\n    set exec-file-mismatch -- Set exec-file-mismatch handling (ask|warn|off).\n    show exec-file-mismatch -- Show exec-file-mismatch handling (ask|warn|off).\n    (gdb) help set exec-file-mismatch\n    Set exec-file-mismatch handling (ask|warn|off).\n    Specifies how to handle a mismatch between the current exec-file name\n    loaded by GDB and the exec-file name automatically determined when attaching\n    to a process:\n\n     ask  - warn the user and ask whether to load the determined exec-file.\n     warn - warn the user, but do not change the exec-file.\n     off  - do not check for mismatch.\n\n\"ask\" means: in case of mismatch between the current exec-file name\nand the automatically determined exec-file name of the PID we are attaching to,\ngive a warning to the user and ask whether to load the automatically determined\nexec-file.\n\n\"warn\" means: in case of mismatch, just give a warning to the user.\n\n\"off\" means: do not check for mismatch.\n\nThis fixes PR gdb/17626.\nThere was a previous trial to fix this PR.\nSee https://sourceware.org/ml/gdb-patches/2015-07/msg00118.html\nThis trial was however only fixing the problem for the automatically\ndetermined executable files when doing attach.\nIt was differentiating the 'user specified executable files' (\"sticky\")\nfrom the executable files automatically found by GDB.\nBut such user specified sticky executables are in most cases due\nto a wrong manipulation by the user, giving unexpected results\nsuch as backtrace showing no function like in the above example.\n\nThis patch ensures that whenever a process executable can be\ndetermined, that the user is warned if there is a mismatch.\n\nThe same tests as above then give:\n\n  (gdb) atta 2682\n  Attaching to process 2682\n  [New LWP 2683]\n  [New LWP 2684]\n  [New LWP 2685]\n  [Thread debugging using libthread_db enabled]\n  Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\n  0x00007f5ff829f603 in select () at ../sysdeps/unix/syscall-template.S:84\n  84    ../sysdeps/unix/syscall-template.S: No such file or directory.\n  (gdb) det\n  Detaching from program: /home/philippe/valgrind/git/trunk_untouched/gdbserver_tests/sleepers, process 2682\n  [Inferior 1 (process 2682) detached]\n  (gdb) atta 31069\n  Attaching to program: /home/philippe/valgrind/git/trunk_untouched/gdbserver_tests/sleepers, process 31069\n  warning: Mismatch between current exec-file /home/philippe/valgrind/git/trunk_untouched/gdbserver_tests/sleepers\n  and automatically determined exec-file /bd/home/philippe/gdb/git/build_fixes/gdb/gdb\n  exec-file-mismatch handling is currently \"ask\"\n  Load new symbol table from \"/bd/home/philippe/gdb/git/build_fixes/gdb/gdb\"? (y or n) y\n  Reading symbols from /bd/home/philippe/gdb/git/build_fixes/gdb/gdb...\n  Setting up the environment for debugging gdb.\n  ...\n  Reading symbols from /usr/lib/debug/.build-id/60/6df9c355103e82140d513bc7a25a635591c153.debug...\n  0x00007f43c23478a0 in __poll_nocancel () at ../sysdeps/unix/syscall-template.S:84\n  84    ../sysdeps/unix/syscall-template.S: No such file or directory.\n  (top-gdb) bt\n  During symbol reading: incomplete CFI data; unspecified registers (e.g., rax) at 0x7f43c23478ad\n  During symbol reading: unsupported tag: 'DW_TAG_unspecified_type'\n  During symbol reading: cannot get low and high bounds for subprogram DIE at 0x12282a7\n  During symbol reading: Child DIE 0x12288ba and its abstract origin 0x1228b26 have different parents\n  During symbol reading: DW_AT_call_target target DIE has invalid low pc, for referencing DIE 0x1229540 [in module /bd/home/philippe/gdb/git/build_fixes/gdb/gdb]\n  #0  0x00007f43c23478a0 in __poll_nocancel () at ../sysdeps/unix/syscall-template.S:84\n  #1  0x0000558909e3ad91 in poll (__timeout=-1, __nfds=<optimized out>, __fds=<optimized out>) at /usr/include/x86_64-linux-gnu/bits/poll2.h:46\n  #2  gdb_wait_for_event (block=block@entry=1) at ../../fixes/gdb/event-loop.c:772\n  #3  0x0000558909e3aef4 in gdb_do_one_event () at ../../fixes/gdb/event-loop.c:347\n  #4  0x0000558909e3b085 in gdb_do_one_event () at ../../fixes/gdb/common/common-exceptions.h:219\n  #5  start_event_loop () at ../../fixes/gdb/event-loop.c:371\n  During symbol reading: Member function \"~_Sp_counted_base\" (offset 0x1c69bf7) is virtual but the vtable offset is not specified\n  During symbol reading: Multiple children of DIE 0x1c8f5a0 refer to DIE 0x1c8f0ee as their abstract origin\n  #6  0x0000558909ed3b78 in captured_command_loop () at ../../fixes/gdb/main.c:331\n  #7  0x0000558909ed4b6d in captured_main (data=<optimized out>) at ../../fixes/gdb/main.c:1174\n  #8  gdb_main (args=<optimized out>) at ../../fixes/gdb/main.c:1190\n  #9  0x0000558909c1e9a8 in main (argc=<optimized out>, argv=<optimized out>) at ../../fixes/gdb/gdb.c:32\n  (top-gdb)\n\n  gdb /home/philippe/valgrind/git/trunk_untouched/gdbserver_tests/sleepers\n  ...\n  Reading symbols from /home/philippe/valgrind/git/trunk_untouched/gdbserver_tests/sleepers...\n  (gdb) atta 31069\n  Attaching to program: /home/philippe/valgrind/git/trunk_untouched/gdbserver_tests/sleepers, process 31069\n  warning: Mismatch between current exec-file /home/philippe/valgrind/git/trunk_untouched/gdbserver_tests/sleepers\n  and automatically determined exec-file /bd/home/philippe/gdb/git/build_fixes/gdb/gdb\n  exec-file-mismatch handling is currently \"ask\"\n  Load new symbol table from \"/bd/home/philippe/gdb/git/build_fixes/gdb/gdb\"? (y or n) y\n  Reading symbols from /bd/home/philippe/gdb/git/build_fixes/gdb/gdb...\n  Setting up the environment for debugging gdb.\n  ....\n\nIn other words, it now works as intuitively expected by the user.\nIf ever the user gave the correct executable on the command line,\nthen attached to the wrong pid, then confirmed loading the wrong executable,\nthe user can simply fix this by detaching, and attaching to the correct pid,\nGDB will then tell again to the user that the exec-file might better\nbe loaded.\n\nThe default value of \"ask\" is chosen instead of e.g. \"warn\" as in most\ncases, switching of executable will be the correct action,\nand in any case, the user can decide to not load the executable,\nas GDB asks a confirmation to the user to load the new executable.\n\nFor settings \"ask\" and \"warn\", the new function validate_exec_file ()\ntries to get the inferior pid exec file and compares it with the current\nexec file.  In case of mismatch, it warns the user and optionally load\nthe executable.\nThis function is called in the attach_command implementation to cover\nmost cases of attaching to a running process.\nIt must also be called in remote.c, as the attach command is not supported\nfor all types of remote gdbserver.\n\ngdb/ChangeLog\n2020-01-25  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\n\t* exec.c (exec_file_mismatch_names, exec_file_mismatch_mode)\n\t(show_exec_file_mismatch_command, set_exec_file_mismatch_command)\n\t(validate_exec_file): New variables, enums, functions.\n\t(exec_file_locate_attach, print_section_info): Style the filenames.\n\t(_initialize_exec): Install show_exec_file_mismatch_command and\n\t set_exec_file_mismatch_command.\n\t* gdbcore.h (validate_exec_file): Declare.\n\t* infcmd.c (attach_command): Call validate_exec_file.\n\t* remote.c ( remote_target::remote_add_inferior): Likewise.",
    "tree": {
      "sha": "f2e7c097edad75a3c6c6d1b750ca5d7e9e23fcb5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f2e7c097edad75a3c6c6d1b750ca5d7e9e23fcb5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a2fedca99c622e1b523046d09f573b06de0207a6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a2fedca99c622e1b523046d09f573b06de0207a6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a2fedca99c622e1b523046d09f573b06de0207a6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a2fedca99c622e1b523046d09f573b06de0207a6/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "e53c0f75bd1ea917c27aed2048e5bfceab4006c9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e53c0f75bd1ea917c27aed2048e5bfceab4006c9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e53c0f75bd1ea917c27aed2048e5bfceab4006c9"
    }
  ],
  "stats": {
    "total": 168,
    "additions": 158,
    "deletions": 10
  },
  "files": [
    {
      "sha": "fdd66225ea34c08e566e7f14b7d851e6d9802769",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a2fedca99c622e1b523046d09f573b06de0207a6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a2fedca99c622e1b523046d09f573b06de0207a6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a2fedca99c622e1b523046d09f573b06de0207a6",
      "patch": "@@ -1,3 +1,15 @@\n+2020-01-25  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\n+\t* exec.c (exec_file_mismatch_names, exec_file_mismatch_mode)\n+\t(show_exec_file_mismatch_command, set_exec_file_mismatch_command)\n+\t(validate_exec_file): New variables, enums, functions.\n+\t(exec_file_locate_attach, print_section_info): Style the filenames.\n+\t(_initialize_exec): Install show_exec_file_mismatch_command and\n+\t set_exec_file_mismatch_command.\n+\t* gdbcore.h (validate_exec_file): Declare.\n+\t* infcmd.c (attach_command): Call validate_exec_file.\n+\t* remote.c ( remote_target::remote_add_inferior): Likewise.\n+\n 2020-01-24  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* frame.c (find_frame_sal): Move call to get_next_frame into more"
    },
    {
      "sha": "68bca1be1773f0fc652aec0556b1fdb0668c827e",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 135,
      "deletions": 10,
      "changes": 145,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a2fedca99c622e1b523046d09f573b06de0207a6/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a2fedca99c622e1b523046d09f573b06de0207a6/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=a2fedca99c622e1b523046d09f573b06de0207a6",
      "patch": "@@ -47,6 +47,7 @@\n #include \"solist.h\"\n #include <algorithm>\n #include \"gdbsupport/pathstuff.h\"\n+#include \"cli/cli-style.h\"\n \n void (*deprecated_file_changed_hook) (const char *);\n \n@@ -83,6 +84,50 @@ struct exec_target final : public target_ops\n \n static exec_target exec_ops;\n \n+/* How to handle a mismatch between the current exec file and the exec\n+   file determined from target.  */\n+\n+static const char *const exec_file_mismatch_names[]\n+  = {\"ask\", \"warn\", \"off\", NULL };\n+enum exec_file_mismatch_mode\n+  {\n+    exec_file_mismatch_ask, exec_file_mismatch_warn, exec_file_mismatch_off\n+  };\n+static const char *exec_file_mismatch = exec_file_mismatch_names[0];\n+static enum exec_file_mismatch_mode exec_file_mismatch_mode\n+  = exec_file_mismatch_ask;\n+\n+/* Show command.  */\n+static void\n+show_exec_file_mismatch_command (struct ui_file *file, int from_tty,\n+\t\t\t\t struct cmd_list_element *c, const char *value)\n+{\n+  fprintf_filtered (gdb_stdout,\n+\t\t    _(\"exec-file-mismatch handling is currently \\\"%s\\\".\\n\"),\n+\t\t    exec_file_mismatch_names[exec_file_mismatch_mode]);\n+}\n+\n+/* Set command.  Change the setting for range checking.  */\n+static void\n+set_exec_file_mismatch_command (const char *ignore,\n+\t\t\t\tint from_tty, struct cmd_list_element *c)\n+{\n+  for (enum exec_file_mismatch_mode mode = exec_file_mismatch_ask;\n+       ;\n+       mode = static_cast<enum exec_file_mismatch_mode>(1 + (int) mode))\n+    {\n+      if (strcmp (exec_file_mismatch, exec_file_mismatch_names[mode]) == 0)\n+\t{\n+\t  exec_file_mismatch_mode = mode;\n+\t  return;\n+\t}\n+      if (mode == exec_file_mismatch_off)\n+\tinternal_error (__FILE__, __LINE__,\n+\t\t\t_(\"Unrecognized exec-file-mismatch setting: \\\"%s\\\"\"),\n+\t\t\texec_file_mismatch);\n+    }\n+}\n+\n /* Whether to open exec and core files read-only or read-write.  */\n \n bool write_files = false;\n@@ -192,6 +237,61 @@ try_open_exec_file (const char *exec_file_host, struct inferior *inf,\n \n /* See gdbcore.h.  */\n \n+void\n+validate_exec_file (int from_tty)\n+{\n+  /* If user asked to ignore the mismatch, do nothing.  */\n+  if (exec_file_mismatch_mode == exec_file_mismatch_off)\n+    return;\n+\n+  const char *current_exec_file = get_exec_file (0);\n+  struct inferior *inf = current_inferior ();\n+  /* Try to determine a filename from the process itself.  */\n+  const char *pid_exec_file = target_pid_to_exec_file (inf->pid);\n+\n+  /* If wee cannot validate the exec file, return.  */\n+  if (current_exec_file == NULL || pid_exec_file == NULL)\n+    return;\n+\n+  std::string exec_file_target (pid_exec_file);\n+\n+  /* In case the exec file is not local, exec_file_target has to point at\n+     the target file system.  */\n+  if (is_target_filename (current_exec_file) && !target_filesystem_is_local ())\n+    exec_file_target = TARGET_SYSROOT_PREFIX + exec_file_target;\n+\n+  if (exec_file_target != current_exec_file)\n+    {\n+      warning\n+\t(_(\"Mismatch between current exec-file %ps\\n\"\n+\t   \"and automatically determined exec-file %ps\\n\"\n+\t   \"exec-file-mismatch handling is currently \\\"%s\\\"\"),\n+\t styled_string (file_name_style.style (), current_exec_file),\n+\t styled_string (file_name_style.style (), exec_file_target.c_str ()),\n+\t exec_file_mismatch_names[exec_file_mismatch_mode]);\n+      if (exec_file_mismatch_mode == exec_file_mismatch_ask)\n+\t{\n+\t  symfile_add_flags add_flags = SYMFILE_MAINLINE;\n+\t  if (from_tty)\n+\t    add_flags |= SYMFILE_VERBOSE;\n+\t  try\n+\t    {\n+\t      symbol_file_add_main (exec_file_target.c_str (), add_flags);\n+\t      exec_file_attach (exec_file_target.c_str (), from_tty);\n+\t    }\n+\t  catch (gdb_exception_error &err)\n+\t    {\n+\t      warning (_(\"loading %ps %s\"),\n+\t\t       styled_string (file_name_style.style (),\n+\t\t\t\t      exec_file_target.c_str ()),\n+\t\t       err.message != NULL ? err.what () : \"error\");\n+\t    }\n+\t}\n+    }\n+}\n+\n+/* See gdbcore.h.  */\n+\n void\n exec_file_locate_attach (int pid, int defer_bp_reset, int from_tty)\n {\n@@ -332,8 +432,9 @@ exec_file_attach (const char *filename, int from_tty)\n \n       if (!exec_bfd)\n \t{\n-\t  error (_(\"\\\"%s\\\": could not open as an executable file: %s.\"),\n-\t\t scratch_pathname, bfd_errmsg (bfd_get_error ()));\n+\t  error (_(\"\\\"%ps\\\": could not open as an executable file: %s.\"),\n+\t\t styled_string (file_name_style.style (), scratch_pathname),\n+\t\t bfd_errmsg (bfd_get_error ()));\n \t}\n \n       /* gdb_realpath_keepfile resolves symlinks on the local\n@@ -349,8 +450,8 @@ exec_file_attach (const char *filename, int from_tty)\n \t  /* Make sure to close exec_bfd, or else \"run\" might try to use\n \t     it.  */\n \t  exec_close ();\n-\t  error (_(\"\\\"%s\\\": not in executable format: %s\"),\n-\t\t scratch_pathname,\n+\t  error (_(\"\\\"%ps\\\": not in executable format: %s\"),\n+\t\t styled_string (file_name_style.style (), scratch_pathname),\n \t\t gdb_bfd_errmsg (bfd_get_error (), matching).c_str ());\n \t}\n \n@@ -359,8 +460,9 @@ exec_file_attach (const char *filename, int from_tty)\n \t  /* Make sure to close exec_bfd, or else \"run\" might try to use\n \t     it.  */\n \t  exec_close ();\n-\t  error (_(\"\\\"%s\\\": can't find the file sections: %s\"),\n-\t\t scratch_pathname, bfd_errmsg (bfd_get_error ()));\n+\t  error (_(\"\\\"%ps\\\": can't find the file sections: %s\"),\n+\t\t styled_string (file_name_style.style (), scratch_pathname),\n+\t\t bfd_errmsg (bfd_get_error ()));\n \t}\n \n       exec_bfd_mtime = bfd_get_mtime (exec_bfd);\n@@ -911,7 +1013,9 @@ print_section_info (struct target_section_table *t, bfd *abfd)\n   /* FIXME: 16 is not wide enough when gdbarch_addr_bit > 64.  */\n   int wid = gdbarch_addr_bit (gdbarch) <= 32 ? 8 : 16;\n \n-  printf_filtered (\"\\t`%s', \", bfd_get_filename (abfd));\n+  printf_filtered (\"\\t`%ps', \",\n+\t\t   styled_string (file_name_style.style (),\n+\t\t\t\t  bfd_get_filename (abfd)));\n   wrap_here (\"        \");\n   printf_filtered (_(\"file type %s.\\n\"), bfd_get_target (abfd));\n   if (abfd == exec_bfd)\n@@ -938,8 +1042,9 @@ print_section_info (struct target_section_table *t, bfd *abfd)\n \t    }\n \t}\n       if (p == t->sections_end)\n-\twarning (_(\"Cannot find section for the entry point of %s.\"),\n-\t\t bfd_get_filename (abfd));\n+\twarning (_(\"Cannot find section for the entry point of %ps.\"),\n+\t\t styled_string (file_name_style.style (),\n+\t\t\t\tbfd_get_filename (abfd)));\n \n       entry_point = gdbarch_addr_bits_remove (gdbarch, \n \t\t\t\t\t      bfd_get_start_address (abfd) \n@@ -966,7 +1071,9 @@ print_section_info (struct target_section_table *t, bfd *abfd)\n \t\t\t hex_string_custom (psect->filepos, 8));\n       printf_filtered (\" is %s\", bfd_section_name (psect));\n       if (pbfd != abfd)\n-\tprintf_filtered (\" in %s\", bfd_get_filename (pbfd));\n+\tprintf_filtered (\" in %ps\",\n+\t\t\t styled_string (file_name_style.style (),\n+\t\t\t\t\tbfd_get_filename (pbfd)));\n       printf_filtered (\"\\n\");\n     }\n }\n@@ -1103,5 +1210,23 @@ Show writing into executable and core files.\"), NULL,\n \t\t\t   show_write_files,\n \t\t\t   &setlist, &showlist);\n \n+  add_setshow_enum_cmd (\"exec-file-mismatch\", class_support,\n+\t\t\texec_file_mismatch_names,\n+\t\t\t&exec_file_mismatch,\n+\t\t\t_(\"\\\n+Set exec-file-mismatch handling (ask|warn|off).\"),\n+\t\t\t_(\"\\\n+Show exec-file-mismatch handling (ask|warn|off).\"),\n+\t\t\t_(\"\\\n+Specifies how to handle a mismatch between the current exec-file name\\n\\\n+loaded by GDB and the exec-file name automatically determined when attaching\\n\\\n+to a process:\\n\\n\\\n+ ask  - warn the user and ask whether to load the determined exec-file.\\n\\\n+ warn - warn the user, but do not change the exec-file.\\n\\\n+ off  - do not check for mismatch.\"),\n+\t\t\tset_exec_file_mismatch_command,\n+\t\t\tshow_exec_file_mismatch_command,\n+\t\t\t&setlist, &showlist);\n+\n   add_target (exec_target_info, exec_target_open, filename_completer);\n }"
    },
    {
      "sha": "9d0f62bc980689b9eaaf11e91586467d7e99f836",
      "filename": "gdb/gdbcore.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a2fedca99c622e1b523046d09f573b06de0207a6/gdb/gdbcore.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a2fedca99c622e1b523046d09f573b06de0207a6/gdb/gdbcore.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbcore.h?ref=a2fedca99c622e1b523046d09f573b06de0207a6",
      "patch": "@@ -157,6 +157,11 @@ extern void exec_file_locate_attach (int pid, int defer_bp_reset, int from_tty);\n \n extern void validate_files (void);\n \n+/* Give the user a message if the current exec file does not match the exec\n+   file determined from the target.  In case of mismatch, ask the user\n+   if the exec file determined from target must be loaded.  */\n+extern void validate_exec_file (int from_tty);\n+\n /* The current default bfd target.  */\n \n extern char *gnutarget;"
    },
    {
      "sha": "b44adca88df047959467c564877f0bbfd4f15a9e",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a2fedca99c622e1b523046d09f573b06de0207a6/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a2fedca99c622e1b523046d09f573b06de0207a6/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=a2fedca99c622e1b523046d09f573b06de0207a6",
      "patch": "@@ -2785,6 +2785,9 @@ attach_command (const char *args, int from_tty)\n \ttarget_stop (ptid_t (inferior_ptid.pid ()));\n     }\n \n+  /* Check for exec file mismatch, and let the user solve it.  */\n+  validate_exec_file (from_tty);\n+\n   mode = async_exec ? ATTACH_POST_WAIT_RESUME : ATTACH_POST_WAIT_STOP;\n \n   /* Some system don't generate traps when attaching to inferior."
    },
    {
      "sha": "be2987707ff7ea36c901d0b49ed4fcb230c2ea45",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a2fedca99c622e1b523046d09f573b06de0207a6/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a2fedca99c622e1b523046d09f573b06de0207a6/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=a2fedca99c622e1b523046d09f573b06de0207a6",
      "patch": "@@ -2411,6 +2411,9 @@ remote_target::remote_add_inferior (bool fake_pid_p, int pid, int attached,\n   if (try_open_exec && get_exec_file (0) == NULL)\n     exec_file_locate_attach (pid, 0, 1);\n \n+  /* Check for exec file mismatch, and let the user solve it.  */\n+  validate_exec_file (1);\n+\n   return inf;\n }\n "
    }
  ]
}