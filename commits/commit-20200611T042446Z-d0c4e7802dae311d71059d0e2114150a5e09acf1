{
  "sha": "d0c4e7802dae311d71059d0e2114150a5e09acf1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDBjNGU3ODAyZGFlMzExZDcxMDU5ZDBlMjExNDE1MGE1ZTA5YWNmMQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-06-11T03:57:50Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-06-11T04:24:46Z"
    },
    "message": "asan: readelf: process_mips_specific buffer overflow\n\nDT_MIPS_OPTIONS is not a regular array as assumed by readelf.  This\npatch corrects that assumption, and to do so easily, makes various\ninternal (host byte order) structs the same size as external (target\nbyte order) structs.\n\ninclude/\n\t* elf/mips.h (Elf32_RegInfo): Use fixed width integer types.\n\t(Elf64_Internal_RegInfo, Elf_Internal_Options): Likewise.\nbinutils/\n\t* readelf.c (process_mips_specific): Assert size of internal\n\ttypes match size of external types, and simplify allocation of\n\tinternal buffer.  Catch possible integer overflow when sanity\n\tchecking option size.  Don't assume options are a regular array.\n\tSanity check reginfo option against option size.  Use PRI macros\n\twhen printing.",
    "tree": {
      "sha": "9824b956af903fa6348c339ab5163d0d22db6af9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9824b956af903fa6348c339ab5163d0d22db6af9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d0c4e7802dae311d71059d0e2114150a5e09acf1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d0c4e7802dae311d71059d0e2114150a5e09acf1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d0c4e7802dae311d71059d0e2114150a5e09acf1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d0c4e7802dae311d71059d0e2114150a5e09acf1/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ec16513e310c2bfe4ff6d7e01b371858c6756c9e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ec16513e310c2bfe4ff6d7e01b371858c6756c9e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ec16513e310c2bfe4ff6d7e01b371858c6756c9e"
    }
  ],
  "stats": {
    "total": 83,
    "additions": 49,
    "deletions": 34
  },
  "files": [
    {
      "sha": "25e21ff6dca168c18fc7a9eadbba8b1eefed066b",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0c4e7802dae311d71059d0e2114150a5e09acf1/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0c4e7802dae311d71059d0e2114150a5e09acf1/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=d0c4e7802dae311d71059d0e2114150a5e09acf1",
      "patch": "@@ -1,3 +1,12 @@\n+2020-06-11  Alan Modra  <amodra@gmail.com>\n+\n+\t* readelf.c (process_mips_specific): Assert size of internal\n+\ttypes match size of external types, and simplify allocation of\n+\tinternal buffer.  Catch possible integer overflow when sanity\n+\tchecking option size.  Don't assume options are a regular array.\n+\tSanity check reginfo option against option size.  Use PRI macros\n+\twhen printing.\n+\n 2020-06-10  Ralf Habacker  <ralf.habacker@freenet.de>\n \n \tPR 26082"
    },
    {
      "sha": "0705a49c0d8b9573834bb793ed3b812a46c52577",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 26,
      "deletions": 25,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0c4e7802dae311d71059d0e2114150a5e09acf1/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0c4e7802dae311d71059d0e2114150a5e09acf1/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=d0c4e7802dae311d71059d0e2114150a5e09acf1",
      "patch": "@@ -16896,10 +16896,11 @@ process_mips_specific (Filedata * filedata)\n \t{\n \t  Elf_Internal_Options * iopt;\n \t  Elf_Internal_Options * option;\n-\t  Elf_Internal_Options * iopt_end;\n \n-\t  iopt = (Elf_Internal_Options *)\n-              cmalloc ((sect->sh_size / sizeof (eopt)), sizeof (* iopt));\n+\t  assert (sizeof (Elf_Internal_Options) == sizeof (Elf_External_Options));\n+\t  assert (sizeof (Elf32_RegInfo) == sizeof (Elf32_External_RegInfo));\n+\t  assert (sizeof (Elf64_Internal_RegInfo) == sizeof (Elf64_External_RegInfo));\n+\t  iopt = (Elf_Internal_Options *) cmalloc (sect->sh_size, 1);\n \t  if (iopt == NULL)\n \t    {\n \t      error (_(\"Out of memory allocating space for MIPS options\\n\"));\n@@ -16909,7 +16910,6 @@ process_mips_specific (Filedata * filedata)\n \n \t  offset = cnt = 0;\n \t  option = iopt;\n-\t  iopt_end = iopt + (sect->sh_size / sizeof (eopt));\n \t  \n \t  while (offset <= sect->sh_size - sizeof (* eopt))\n \t    {\n@@ -16924,7 +16924,7 @@ process_mips_specific (Filedata * filedata)\n \n \t      /* PR 17531: file: ffa0fa3b.  */\n \t      if (option->size < sizeof (* eopt)\n-\t\t  || offset + option->size > sect->sh_size)\n+\t\t  || option->size > sect->sh_size - offset)\n \t\t{\n \t\t  error (_(\"Invalid size (%u) for MIPS option\\n\"),\n \t\t\t option->size);\n@@ -16943,18 +16943,18 @@ process_mips_specific (Filedata * filedata)\n \t\t\t    cnt),\n \t\t  printable_section_name (filedata, sect), cnt);\n \n-\t  option = iopt;\n \t  offset = 0;\n-\n \t  while (cnt-- > 0)\n \t    {\n \t      size_t len;\n \n+\t      option = (Elf_Internal_Options *) ((char *) iopt + offset);\n \t      switch (option->kind)\n \t\t{\n \t\tcase ODK_NULL:\n \t\t  /* This shouldn't happen.  */\n-\t\t  printf (\" NULL       %d %lx\", option->section, option->info);\n+\t\t  printf (\" NULL       %\" PRId16 \" %\" PRIx32,\n+\t\t\t  option->section, option->info);\n \t\t  break;\n \n \t\tcase ODK_REGINFO:\n@@ -16965,7 +16965,8 @@ process_mips_specific (Filedata * filedata)\n \t\t      Elf32_RegInfo reginfo;\n \n \t\t      /* 32bit form.  */\n-\t\t      if (option + 2 > iopt_end)\n+\t\t      if (option->size < (sizeof (Elf_External_Options)\n+\t\t\t\t\t  + sizeof (Elf32_External_RegInfo)))\n \t\t\t{\n \t\t\t  printf (_(\"<corrupt>\\n\"));\n \t\t\t  error (_(\"Truncated MIPS REGINFO option\\n\"));\n@@ -16982,10 +16983,11 @@ process_mips_specific (Filedata * filedata)\n \t\t      reginfo.ri_cprmask[3] = BYTE_GET (ereg->ri_cprmask[3]);\n \t\t      reginfo.ri_gp_value = BYTE_GET (ereg->ri_gp_value);\n \n-\t\t      printf (\"GPR %08lx  GP 0x%lx\\n\",\n-\t\t\t      reginfo.ri_gprmask,\n-\t\t\t      (unsigned long) reginfo.ri_gp_value);\n-\t\t      printf (\"            CPR0 %08lx  CPR1 %08lx  CPR2 %08lx  CPR3 %08lx\\n\",\n+\t\t      printf (\"GPR %08\" PRIx32 \"  GP 0x%\" PRIx32 \"\\n\",\n+\t\t\t      reginfo.ri_gprmask, reginfo.ri_gp_value);\n+\t\t      printf (\"          \"\n+\t\t\t      \"  CPR0 %08\" PRIx32 \"  CPR1 %08\" PRIx32\n+\t\t\t      \"  CPR2 %08\" PRIx32 \"  CPR3 %08\" PRIx32 \"\\n\",\n \t\t\t      reginfo.ri_cprmask[0], reginfo.ri_cprmask[1],\n \t\t\t      reginfo.ri_cprmask[2], reginfo.ri_cprmask[3]);\n \t\t    }\n@@ -16995,7 +16997,8 @@ process_mips_specific (Filedata * filedata)\n \t\t      Elf64_External_RegInfo * ereg;\n \t\t      Elf64_Internal_RegInfo reginfo;\n \n-\t\t      if (option + 2 > iopt_end)\n+\t\t      if (option->size < (sizeof (Elf_External_Options)\n+\t\t\t\t\t  + sizeof (Elf64_External_RegInfo)))\n \t\t\t{\n \t\t\t  printf (_(\"<corrupt>\\n\"));\n \t\t\t  error (_(\"Truncated MIPS REGINFO option\\n\"));\n@@ -17011,16 +17014,15 @@ process_mips_specific (Filedata * filedata)\n \t\t      reginfo.ri_cprmask[3] = BYTE_GET (ereg->ri_cprmask[3]);\n \t\t      reginfo.ri_gp_value   = BYTE_GET (ereg->ri_gp_value);\n \n-\t\t      printf (\"GPR %08lx  GP 0x\",\n-\t\t\t      reginfo.ri_gprmask);\n-\t\t      printf_vma (reginfo.ri_gp_value);\n-\t\t      printf (\"\\n\");\n-\n-\t\t      printf (\"            CPR0 %08lx  CPR1 %08lx  CPR2 %08lx  CPR3 %08lx\\n\",\n+\t\t      printf (\"GPR %08\" PRIx32 \"  GP 0x%\" PRIx64 \"\\n\",\n+\t\t\t      reginfo.ri_gprmask, reginfo.ri_gp_value);\n+\t\t      printf (\"          \"\n+\t\t\t      \"  CPR0 %08\" PRIx32 \"  CPR1 %08\" PRIx32\n+\t\t\t      \"  CPR2 %08\" PRIx32 \"  CPR3 %08\" PRIx32 \"\\n\",\n \t\t\t      reginfo.ri_cprmask[0], reginfo.ri_cprmask[1],\n \t\t\t      reginfo.ri_cprmask[2], reginfo.ri_cprmask[3]);\n \t\t    }\n-\t\t  ++option;\n+\t\t  offset += option->size;\n \t\t  continue;\n \n \t\tcase ODK_EXCEPTIONS:\n@@ -17089,20 +17091,20 @@ process_mips_specific (Filedata * filedata)\n \t\t  break;\n \n \t\tcase ODK_GP_GROUP:\n-\t\t  printf (\" GP_GROUP  %#06lx  self-contained %#06lx\",\n+\t\t  printf (\" GP_GROUP  %#06x  self-contained %#06x\",\n \t\t\t  option->info & OGP_GROUP,\n \t\t\t  (option->info & OGP_SELF) >> 16);\n \t\t  break;\n \n \t\tcase ODK_IDENT:\n-\t\t  printf (\" IDENT     %#06lx  self-contained %#06lx\",\n+\t\t  printf (\" IDENT     %#06x  self-contained %#06x\",\n \t\t\t  option->info & OGP_GROUP,\n \t\t\t  (option->info & OGP_SELF) >> 16);\n \t\t  break;\n \n \t\tdefault:\n \t\t  /* This shouldn't happen.  */\n-\t\t  printf (\" %3d ???     %d %lx\",\n+\t\t  printf (\" %3d ???     %\" PRId16 \" %\" PRIx32,\n \t\t\t  option->kind, option->section, option->info);\n \t\t  break;\n \t\t}\n@@ -17121,7 +17123,6 @@ process_mips_specific (Filedata * filedata)\n \t      fputs (\"\\n\", stdout);\n \n \t      offset += option->size;\n-\t      ++option;\n \t    }\n \t  free (iopt);\n \t  free (eopt);"
    },
    {
      "sha": "3c2765274d413b600cfbd879437b4d8923cca7ed",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0c4e7802dae311d71059d0e2114150a5e09acf1/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0c4e7802dae311d71059d0e2114150a5e09acf1/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=d0c4e7802dae311d71059d0e2114150a5e09acf1",
      "patch": "@@ -1,3 +1,8 @@\n+2020-06-11  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf/mips.h (Elf32_RegInfo): Use fixed width integer types.\n+\t(Elf64_Internal_RegInfo, Elf_Internal_Options): Likewise.\n+\n 2020-06-06  Alan Modra  <amodra@gmail.com>\n \n \t* elf/ppc64.h (elf_ppc64_reloc_type): Rename"
    },
    {
      "sha": "cc08ebd4318106d9a8692be4a42538c9b4e85f87",
      "filename": "include/elf/mips.h",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0c4e7802dae311d71059d0e2114150a5e09acf1/include/elf/mips.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0c4e7802dae311d71059d0e2114150a5e09acf1/include/elf/mips.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/elf/mips.h?ref=d0c4e7802dae311d71059d0e2114150a5e09acf1",
      "patch": "@@ -560,11 +560,11 @@ typedef union\n typedef struct\n {\n   /* Mask of general purpose registers used.  */\n-  unsigned long ri_gprmask;\n+  uint32_t ri_gprmask;\n   /* Mask of co-processor registers used.  */\n-  unsigned long ri_cprmask[4];\n+  uint32_t ri_cprmask[4];\n   /* GP register value for this object file.  */\n-  long ri_gp_value;\n+  uint32_t ri_gp_value;\n } Elf32_RegInfo;\n \n /* The external version of the Elf_RegInfo structure.  */\n@@ -1008,9 +1008,9 @@ typedef struct\n   /* Size of option descriptor, including header.  */\n   unsigned char size;\n   /* Section index of affected section, or 0 for global option.  */\n-  unsigned short section;\n+  uint16_t section;\n   /* Information specific to this kind of option.  */\n-  unsigned long info;\n+  uint32_t info;\n } Elf_Internal_Options;\n \n /* MIPS ELF option header swapping routines.  */\n@@ -1074,13 +1074,13 @@ typedef struct\n typedef struct\n {\n   /* Mask of general purpose registers used.  */\n-  unsigned long ri_gprmask;\n+  uint32_t ri_gprmask;\n   /* Padding.  */\n-  unsigned long ri_pad;\n+  uint32_t ri_pad;\n   /* Mask of co-processor registers used.  */\n-  unsigned long ri_cprmask[4];\n+  uint32_t ri_cprmask[4];\n   /* GP register value for this object file.  */\n-  bfd_vma ri_gp_value;\n+  uint64_t ri_gp_value;\n } Elf64_Internal_RegInfo;\n \n /* ABI Flags structure version 0.  */"
    }
  ]
}