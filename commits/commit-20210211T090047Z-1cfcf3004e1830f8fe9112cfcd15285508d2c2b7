{
  "sha": "1cfcf3004e1830f8fe9112cfcd15285508d2c2b7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWNmY2YzMDA0ZTE4MzBmOGZlOTExMmNmY2QxNTI4NTUwOGQyYzJiNw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-02-11T06:26:42Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-02-11T09:00:47Z"
    },
    "message": "PR27290, PR27293, PR27295, various avr objdump fixes\n\nAdds missing sanity checks for avr device info note, to avoid\npotential buffer overflows.  Uses bfd_malloc_and_get_section for\nsanity checking section size.\n\n\tPR 27290\n\tPR 27293\n\tPR 27295\n\t* od-elf32_avr.c (elf32_avr_get_note_section_contents): Formatting.\n\tUse bfd_malloc_and_get_section.\n\t(elf32_avr_get_note_desc): Formatting.  Return descsz.  Sanity\n\tcheck namesz.  Return NULL if descsz is too small.  Ensure\n\tstring table is terminated.\n\t(elf32_avr_get_device_info): Formatting.  Add note_size param.\n\tSanity check note.\n\t(elf32_avr_dump_mem_usage): Adjust to suit.",
    "tree": {
      "sha": "cf35ec5d24a21747c7e5dab5d9e472f5aed0bde6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cf35ec5d24a21747c7e5dab5d9e472f5aed0bde6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1cfcf3004e1830f8fe9112cfcd15285508d2c2b7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1cfcf3004e1830f8fe9112cfcd15285508d2c2b7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1cfcf3004e1830f8fe9112cfcd15285508d2c2b7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1cfcf3004e1830f8fe9112cfcd15285508d2c2b7/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6db658c517bdfbf8e5b8c5a34caf3ff1eea332f1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6db658c517bdfbf8e5b8c5a34caf3ff1eea332f1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6db658c517bdfbf8e5b8c5a34caf3ff1eea332f1"
    }
  ],
  "stats": {
    "total": 80,
    "additions": 56,
    "deletions": 24
  },
  "files": [
    {
      "sha": "9628390507495555b30e66d832506ecb7eed3ad2",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cfcf3004e1830f8fe9112cfcd15285508d2c2b7/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cfcf3004e1830f8fe9112cfcd15285508d2c2b7/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=1cfcf3004e1830f8fe9112cfcd15285508d2c2b7",
      "patch": "@@ -1,3 +1,17 @@\n+2021-02-11  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 27290\n+\tPR 27293\n+\tPR 27295\n+\t* od-elf32_avr.c (elf32_avr_get_note_section_contents): Formatting.\n+\tUse bfd_malloc_and_get_section.\n+\t(elf32_avr_get_note_desc): Formatting.  Return descsz.  Sanity\n+\tcheck namesz.  Return NULL if descsz is too small.  Ensure\n+\tstring table is terminated.\n+\t(elf32_avr_get_device_info): Formatting.  Add note_size param.\n+\tSanity check note.\n+\t(elf32_avr_dump_mem_usage): Adjust to suit.\n+\n 2021-02-10  Tom de Vries  <tdevries@suse.de>\n \n \tPR binutils/27391"
    },
    {
      "sha": "4377a7c652a0704470acb9e4485dd9bf2e1e78b0",
      "filename": "binutils/od-elf32_avr.c",
      "status": "modified",
      "additions": 42,
      "deletions": 24,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cfcf3004e1830f8fe9112cfcd15285508d2c2b7/binutils/od-elf32_avr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cfcf3004e1830f8fe9112cfcd15285508d2c2b7/binutils/od-elf32_avr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/od-elf32_avr.c?ref=1cfcf3004e1830f8fe9112cfcd15285508d2c2b7",
      "patch": "@@ -77,23 +77,29 @@ elf32_avr_filter (bfd *abfd)\n   return bfd_get_flavour (abfd) == bfd_target_elf_flavour;\n }\n \n-static char*\n+static char *\n elf32_avr_get_note_section_contents (bfd *abfd, bfd_size_type *size)\n {\n   asection *section;\n+  bfd_byte *contents;\n \n-  if ((section = bfd_get_section_by_name (abfd, \".note.gnu.avr.deviceinfo\")) == NULL)\n+  section = bfd_get_section_by_name (abfd, \".note.gnu.avr.deviceinfo\");\n+  if (section == NULL)\n     return NULL;\n \n-  *size = bfd_section_size (section);\n-  char *contents = (char *) xmalloc (*size);\n-  bfd_get_section_contents (abfd, section, contents, 0, *size);\n+  if (!bfd_malloc_and_get_section (abfd, section, &contents))\n+    {\n+      free (contents);\n+      contents = NULL;\n+    }\n \n-  return contents;\n+  *size = bfd_section_size (section);\n+  return (char *) contents;\n }\n \n-static char* elf32_avr_get_note_desc (bfd *abfd, char *contents,\n-        bfd_size_type size)\n+static char *\n+elf32_avr_get_note_desc (bfd *abfd, char *contents, bfd_size_type size,\n+\t\t\t bfd_size_type *descsz)\n {\n   Elf_External_Note *xnp = (Elf_External_Note *) contents;\n   Elf_Internal_Note in;\n@@ -107,42 +113,54 @@ static char* elf32_avr_get_note_desc (bfd *abfd, char *contents,\n   if (in.namesz > contents - in.namedata + size)\n     return NULL;\n \n+  if (in.namesz != 4 || strcmp (in.namedata, \"AVR\") != 0)\n+    return NULL;\n+\n   in.descsz = bfd_get_32 (abfd, xnp->descsz);\n   in.descdata = in.namedata + align_power (in.namesz, 2);\n-  if (in.descsz != 0\n-        && (in.descdata >= contents + size\n-            || in.descsz > contents - in.descdata + size))\n+  if (in.descsz < 6 * sizeof (uint32_t)\n+      || in.descdata >= contents + size\n+      || in.descsz > contents - in.descdata + size)\n     return NULL;\n \n-  if (strcmp (in.namedata, \"AVR\") != 0)\n-    return NULL;\n+  /* If the note has a string table, ensure it is 0 terminated.  */\n+  if (in.descsz > 8 * sizeof (uint32_t))\n+    in.descdata[in.descsz - 1] = 0;\n \n+  *descsz = in.descsz;\n   return in.descdata;\n }\n \n static void\n elf32_avr_get_device_info (bfd *abfd, char *description,\n-        deviceinfo *device)\n+\t\t\t   bfd_size_type desc_size, deviceinfo *device)\n {\n   if (description == NULL)\n     return;\n \n   const bfd_size_type memory_sizes = 6;\n \n-  memcpy (device, description, memory_sizes * sizeof(uint32_t));\n-  device->name = NULL;\n+  memcpy (device, description, memory_sizes * sizeof (uint32_t));\n+  desc_size -= memory_sizes * sizeof (uint32_t);\n+  if (desc_size < 8)\n+    return;\n \n-  uint32_t *stroffset_table = ((uint32_t *) description) + memory_sizes;\n+  uint32_t *stroffset_table = (uint32_t *) description + memory_sizes;\n   bfd_size_type stroffset_table_size = bfd_get_32 (abfd, stroffset_table);\n-  char *str_table = ((char *) stroffset_table) + stroffset_table_size;\n \n   /* If the only content is the size itself, there's nothing in the table */\n-  if (stroffset_table_size == 4)\n+  if (stroffset_table_size < 8)\n     return;\n+  if (desc_size <= stroffset_table_size)\n+    return;\n+  desc_size -= stroffset_table_size;\n \n   /* First entry is the device name index. */\n   uint32_t device_name_index = bfd_get_32 (abfd, stroffset_table + 1);\n+  if (device_name_index >= desc_size)\n+    return;\n \n+  char *str_table = (char *) stroffset_table + stroffset_table_size;\n   device->name = str_table + device_name_index;\n }\n \n@@ -183,7 +201,7 @@ static void\n elf32_avr_dump_mem_usage (bfd *abfd)\n {\n   char *description = NULL;\n-  bfd_size_type note_section_size = 0;\n+  bfd_size_type sec_size, desc_size;\n \n   deviceinfo device = { 0, 0, 0, 0, 0, 0, NULL };\n   device.name = \"Unknown\";\n@@ -192,13 +210,13 @@ elf32_avr_dump_mem_usage (bfd *abfd)\n   bfd_size_type text_usage = 0;\n   bfd_size_type eeprom_usage = 0;\n \n-  char *contents = elf32_avr_get_note_section_contents (abfd,\n-    &note_section_size);\n+  char *contents = elf32_avr_get_note_section_contents (abfd, &sec_size);\n \n   if (contents != NULL)\n     {\n-      description = elf32_avr_get_note_desc (abfd, contents, note_section_size);\n-      elf32_avr_get_device_info (abfd, description, &device);\n+      description = elf32_avr_get_note_desc (abfd, contents, sec_size,\n+\t\t\t\t\t     &desc_size);\n+      elf32_avr_get_device_info (abfd, description, desc_size, &device);\n     }\n \n   elf32_avr_get_memory_usage (abfd, &text_usage, &data_usage,"
    }
  ]
}