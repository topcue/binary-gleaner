{
  "sha": "a52d653e9170d361e354ddaf2876aaa09aece207",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTUyZDY1M2U5MTcwZDM2MWUzNTRkZGFmMjg3NmFhYTA5YWVjZTIwNw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-07T21:15:12Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-10T14:38:08Z"
    },
    "message": "gdb: delete SYMBOL_SECTION and MSYMBOL_SECTION macros\n\nDelete two more symbol/section related macros.  This time it's\nSYMBOL_SECTION and MSYMBOL_SECTION.\n\nAs with general_symbol_info::m_name it is not currently possible to\nmake general_symbol_info::m_section private as general_symbol_info\nmust remain a POD type.\n\nBut other than failing to make the new m_section private, this change\ndoes what you'd expect, adds a get and set member function and updates\nall users to use the new functions instead of the previous wrapper\nmacros.\n\nThere should be no user visible change after this commit.\n\ngdb/ChangeLog:\n\n\t* coff-pe-read.c (add_pe_forwarded_sym): Make use of section_index\n\tand set_section_index member functions where appropriate.\n\t* coffread.c (coff_symtab_read): Likewise.\n\t(process_coff_symbol): Likewise.\n\t* ctfread.c (set_symbol_address): Likewise.\n\t* dwarf2/read.c (add_partial_symbol): Likewise.\n\t(var_decode_location): Likewise.\n\t* language.c: Likewise.\n\t* minsyms.c (minimal_symbol_reader::record_full): Likewise.\n\t(compact_minimal_symbols): Likewise.\n\t(minimal_symbol_upper_bound): Likewise.\n\t* objfiles.c (relocate_one_symbol): Likewise.\n\t* psympriv.h (partial_symbol::obj_section): Likewise.\n\t(partial_symbol::address): Likewise.\n\t* psymtab.c (partial_symtab::add_psymbol): Likewise.\n\t* stabsread.c (scan_file_globals): Likewise.\n\t* symmisc.c (dump_msymbols): Likewise.\n\t* symtab.c (general_symbol_info::obj_section): Likewise.\n\t(fixup_section): Likewise.\n\t(get_msymbol_address): Likewise.\n\t* symtab.h (general_symbol_info::section): Rename to...\n\t(general_symbol_info::m_section): ...this.\n\t(general_symbol_info::set_section_index): New member function.\n\t(general_symbol_info::section_index): Likewise.\n\t(SYMBOL_SECTION): Delete.\n\t(MSYMBOL_VALUE_ADDRESS): Make use of section_index and\n\tset_section_index member functions where appropriate.\n\t(MSYMBOL_SECTION): Delete.\n\t(symbol::symbol): Update to initialize 'm_section'.\n\t* xcoffread.c (read_xcoff_symtab): Make use of set_section_index.\n\t(process_xcoff_symbol): Likewise.",
    "tree": {
      "sha": "3f9112c2ab5ced4c5fef37b25d711d96fe53329d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3f9112c2ab5ced4c5fef37b25d711d96fe53329d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a52d653e9170d361e354ddaf2876aaa09aece207",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a52d653e9170d361e354ddaf2876aaa09aece207",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a52d653e9170d361e354ddaf2876aaa09aece207",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a52d653e9170d361e354ddaf2876aaa09aece207/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ebbc3a7d56f82f68bbeece3d7daf1823c9d98170",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ebbc3a7d56f82f68bbeece3d7daf1823c9d98170"
    }
  ],
  "stats": {
    "total": 125,
    "additions": 86,
    "deletions": 39
  },
  "files": [
    {
      "sha": "6de7954fe031f062f9ef32f2240c909e7ffd9fdf",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a52d653e9170d361e354ddaf2876aaa09aece207",
      "patch": "@@ -1,3 +1,37 @@\n+2021-02-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* coff-pe-read.c (add_pe_forwarded_sym): Make use of section_index\n+\tand set_section_index member functions where appropriate.\n+\t* coffread.c (coff_symtab_read): Likewise.\n+\t(process_coff_symbol): Likewise.\n+\t* ctfread.c (set_symbol_address): Likewise.\n+\t* dwarf2/read.c (add_partial_symbol): Likewise.\n+\t(var_decode_location): Likewise.\n+\t* language.c: Likewise.\n+\t* minsyms.c (minimal_symbol_reader::record_full): Likewise.\n+\t(compact_minimal_symbols): Likewise.\n+\t(minimal_symbol_upper_bound): Likewise.\n+\t* objfiles.c (relocate_one_symbol): Likewise.\n+\t* psympriv.h (partial_symbol::obj_section): Likewise.\n+\t(partial_symbol::address): Likewise.\n+\t* psymtab.c (partial_symtab::add_psymbol): Likewise.\n+\t* stabsread.c (scan_file_globals): Likewise.\n+\t* symmisc.c (dump_msymbols): Likewise.\n+\t* symtab.c (general_symbol_info::obj_section): Likewise.\n+\t(fixup_section): Likewise.\n+\t(get_msymbol_address): Likewise.\n+\t* symtab.h (general_symbol_info::section): Rename to...\n+\t(general_symbol_info::m_section): ...this.\n+\t(general_symbol_info::set_section_index): New member function.\n+\t(general_symbol_info::section_index): Likewise.\n+\t(SYMBOL_SECTION): Delete.\n+\t(MSYMBOL_VALUE_ADDRESS): Make use of section_index and\n+\tset_section_index member functions where appropriate.\n+\t(MSYMBOL_SECTION): Delete.\n+\t(symbol::symbol): Update to initialize 'm_section'.\n+\t* xcoffread.c (read_xcoff_symtab): Make use of set_section_index.\n+\t(process_xcoff_symbol): Likewise.\n+\n 2021-02-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* breakpoint.c (resolve_sal_pc): Replace SYMBOL_OBJ_SECTION and"
    },
    {
      "sha": "90b406f140e6634a975105c65007e130899bc322",
      "filename": "gdb/coff-pe-read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/coff-pe-read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/coff-pe-read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coff-pe-read.c?ref=a52d653e9170d361e354ddaf2876aaa09aece207",
      "patch": "@@ -246,7 +246,7 @@ add_pe_forwarded_sym (minimal_symbol_reader &reader,\n \n   vma = BMSYMBOL_VALUE_ADDRESS (msymbol);\n   msymtype = MSYMBOL_TYPE (msymbol.minsym);\n-  section = MSYMBOL_SECTION (msymbol.minsym);\n+  section = msymbol.minsym->section_index ();\n \n   /* Generate a (hopefully unique) qualified name using the first part\n      of the dll name, e.g. KERNEL32!AddAtomA.  This matches the style"
    },
    {
      "sha": "49a2485d38c228124788f32f0fe05cf26ff78a79",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=a52d653e9170d361e354ddaf2876aaa09aece207",
      "patch": "@@ -1026,7 +1026,7 @@ coff_symtab_read (minimal_symbol_reader &reader,\n \t\tsym = process_coff_symbol\n \t\t  (cs, &main_aux, objfile);\n \t\tSYMBOL_VALUE (sym) = tmpaddr + offset;\n-\t\tSYMBOL_SECTION (sym) = sec;\n+\t\tsym->set_section_index (sec);\n \t      }\n \t  }\n \t  break;\n@@ -1565,7 +1565,7 @@ process_coff_symbol (struct coff_symbol *cs,\n   /* default assumptions */\n   SYMBOL_VALUE (sym) = cs->c_value;\n   SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n-  SYMBOL_SECTION (sym) = cs_to_section (cs, objfile);\n+  sym->set_section_index (cs_to_section (cs, objfile));\n \n   if (ISFCN (cs->c_type))\n     {"
    },
    {
      "sha": "928cb3025c38222f260aabd4bd04dc677f1c02db",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=a52d653e9170d361e354ddaf2876aaa09aece207",
      "patch": "@@ -297,7 +297,7 @@ set_symbol_address (struct objfile *of, struct symbol *sym, const char *name)\n     {\n       SET_SYMBOL_VALUE_ADDRESS (sym, BMSYMBOL_VALUE_ADDRESS (msym));\n       SYMBOL_ACLASS_INDEX (sym) = LOC_STATIC;\n-      SYMBOL_SECTION (sym) = MSYMBOL_SECTION (msym.minsym);\n+      sym->set_section_index (msym.minsym->section_index ());\n     }\n }\n "
    },
    {
      "sha": "51bf0fbeea5a793b371d1de72862e4e61a26fed9",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=a52d653e9170d361e354ddaf2876aaa09aece207",
      "patch": "@@ -8612,7 +8612,7 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n   partial_symbol psymbol;\n   memset (&psymbol, 0, sizeof (psymbol));\n   psymbol.ginfo.set_language (cu->language, &objfile->objfile_obstack);\n-  psymbol.ginfo.section = -1;\n+  psymbol.ginfo.set_section_index (-1);\n \n   /* The code below indicates that the psymbol should be installed by\n      setting this.  */\n@@ -8641,7 +8641,7 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n \n       psymbol.domain = VAR_DOMAIN;\n       psymbol.aclass = LOC_BLOCK;\n-      psymbol.ginfo.section = SECT_OFF_TEXT (objfile);\n+      psymbol.ginfo.set_section_index (SECT_OFF_TEXT (objfile));\n       psymbol.ginfo.value.address = addr;\n \n       if (pdi->main_subprogram && actual_name != NULL)\n@@ -8686,7 +8686,7 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n \t    {\n \t      psymbol.domain = VAR_DOMAIN;\n \t      psymbol.aclass = LOC_STATIC;\n-\t      psymbol.ginfo.section = SECT_OFF_TEXT (objfile);\n+\t      psymbol.ginfo.set_section_index (SECT_OFF_TEXT (objfile));\n \t      psymbol.ginfo.value.address = addr;\n \t      where = psymbol_placement::GLOBAL;\n \t    }\n@@ -8702,7 +8702,7 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n \n \t  psymbol.domain = VAR_DOMAIN;\n \t  psymbol.aclass = LOC_STATIC;\n-\t  psymbol.ginfo.section = SECT_OFF_TEXT (objfile);\n+\t  psymbol.ginfo.set_section_index (SECT_OFF_TEXT (objfile));\n \t  if (has_loc)\n \t    psymbol.ginfo.value.address = addr;\n \t  where = psymbol_placement::STATIC;\n@@ -22100,7 +22100,7 @@ var_decode_location (struct attribute *attr, struct symbol *sym,\n \t  SET_SYMBOL_VALUE_ADDRESS\n \t    (sym,\n \t     SYMBOL_VALUE_ADDRESS (sym)\n-\t     + objfile->section_offsets[SYMBOL_SECTION (sym)]);\n+\t     + objfile->section_offsets[sym->section_index ()]);\n \t  return;\n \t}\n     }"
    },
    {
      "sha": "0eff76e12f4668e2a711ef5360e6e63828b680f2",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=a52d653e9170d361e354ddaf2876aaa09aece207",
      "patch": "@@ -1052,7 +1052,7 @@ language_arch_info::type_and_symbol::alloc_type_symbol\n   symbol->set_language (lang, nullptr);\n   symbol->owner.arch = gdbarch;\n   SYMBOL_OBJFILE_OWNED (symbol) = 0;\n-  SYMBOL_SECTION (symbol) = 0;\n+  symbol->set_section_index (0);\n   SYMBOL_TYPE (symbol) = type;\n   SYMBOL_DOMAIN (symbol) = VAR_DOMAIN;\n   SYMBOL_ACLASS_INDEX (symbol) = LOC_TYPEDEF;"
    },
    {
      "sha": "8b8e11a83d0476196315dfbd2fb8df4ddf26c22b",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=a52d653e9170d361e354ddaf2876aaa09aece207",
      "patch": "@@ -1157,7 +1157,7 @@ minimal_symbol_reader::record_full (gdb::string_view name,\n     msymbol->m_name = name.data ();\n \n   SET_MSYMBOL_VALUE_ADDRESS (msymbol, address);\n-  MSYMBOL_SECTION (msymbol) = section;\n+  msymbol->set_section_index (section);\n \n   MSYMBOL_TYPE (msymbol) = ms_type;\n \n@@ -1246,7 +1246,8 @@ compact_minimal_symbols (struct minimal_symbol *msymbol, int mcount,\n \t{\n \t  if (MSYMBOL_VALUE_RAW_ADDRESS (copyfrom)\n \t      == MSYMBOL_VALUE_RAW_ADDRESS ((copyfrom + 1))\n-\t      && MSYMBOL_SECTION (copyfrom) == MSYMBOL_SECTION (copyfrom + 1)\n+\t      && (copyfrom->section_index ()\n+\t\t  == (copyfrom + 1)->section_index ())\n \t      && strcmp (copyfrom->linkage_name (),\n \t\t\t (copyfrom + 1)->linkage_name ()) == 0)\n \t    {\n@@ -1551,12 +1552,12 @@ minimal_symbol_upper_bound (struct bound_minimal_symbol minsym)\n     = (minsym.objfile->per_bfd->msymbols.get ()\n        + minsym.objfile->per_bfd->minimal_symbol_count);\n   msymbol = minsym.minsym;\n-  section = MSYMBOL_SECTION (msymbol);\n+  section = msymbol->section_index ();\n   for (iter = msymbol + 1; iter != past_the_end; ++iter)\n     {\n       if ((MSYMBOL_VALUE_RAW_ADDRESS (iter)\n \t   != MSYMBOL_VALUE_RAW_ADDRESS (msymbol))\n-\t  && MSYMBOL_SECTION (iter) == section)\n+\t  && iter->section_index () == section)\n \tbreak;\n     }\n "
    },
    {
      "sha": "2a513d82f1a034cce6a150a4f7ba846c3ce3a89a",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=a52d653e9170d361e354ddaf2876aaa09aece207",
      "patch": "@@ -621,11 +621,11 @@ relocate_one_symbol (struct symbol *sym, struct objfile *objfile,\n      they can't possibly pass the tests below.  */\n   if ((SYMBOL_CLASS (sym) == LOC_LABEL\n        || SYMBOL_CLASS (sym) == LOC_STATIC)\n-      && SYMBOL_SECTION (sym) >= 0)\n+      && sym->section_index () >= 0)\n     {\n       SET_SYMBOL_VALUE_ADDRESS (sym,\n \t\t\t\tSYMBOL_VALUE_ADDRESS (sym)\n-\t\t\t\t+ delta[SYMBOL_SECTION (sym)]);\n+\t\t\t\t+ delta[sym->section_index ()]);\n     }\n }\n "
    },
    {
      "sha": "1f35ef2a44b9b1bcef30511665fe5c15c2f0d48a",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=a52d653e9170d361e354ddaf2876aaa09aece207",
      "patch": "@@ -40,9 +40,7 @@ struct partial_symbol\n      section has been set.  */\n   struct obj_section *obj_section (struct objfile *objfile) const\n   {\n-    if (ginfo.section >= 0)\n-      return &objfile->sections[ginfo.section];\n-    return nullptr;\n+    return ginfo.obj_section (objfile);\n   }\n \n   /* Return the unrelocated address of this partial symbol.  */\n@@ -55,7 +53,8 @@ struct partial_symbol\n      the offsets provided in OBJFILE.  */\n   CORE_ADDR address (const struct objfile *objfile) const\n   {\n-    return ginfo.value.address + objfile->section_offsets[ginfo.section];\n+    return (ginfo.value.address\n+\t    + objfile->section_offsets[ginfo.section_index ()]);\n   }\n \n   /* Set the address of this partial symbol.  The address must be"
    },
    {
      "sha": "7f41c010e391b8726e77c37dc358d22516496912",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=a52d653e9170d361e354ddaf2876aaa09aece207",
      "patch": "@@ -1556,7 +1556,7 @@ partial_symtab::add_psymbol (gdb::string_view name, bool copy_name,\n   memset (&psymbol, 0, sizeof (psymbol));\n \n   psymbol.set_unrelocated_address (coreaddr);\n-  psymbol.ginfo.section = section;\n+  psymbol.ginfo.set_section_index (section);\n   psymbol.domain = domain;\n   psymbol.aclass = theclass;\n   psymbol.ginfo.set_language (language, objfile->partial_symtabs->obstack ());"
    },
    {
      "sha": "d83f4b40a6a2bbf75f950ef1aa1388821b5de416",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=a52d653e9170d361e354ddaf2876aaa09aece207",
      "patch": "@@ -4590,7 +4590,7 @@ scan_file_globals (struct objfile *objfile)\n \t\t\t    (sym, MSYMBOL_VALUE_ADDRESS (resolve_objfile,\n \t\t\t\t\t\t\t msymbol));\n \t\t\t}\n-\t\t      SYMBOL_SECTION (sym) = MSYMBOL_SECTION (msymbol);\n+\t\t      sym->set_section_index (msymbol->section_index ());\n \t\t    }\n \n \t\t  if (prev)"
    },
    {
      "sha": "3703e50c6debdc53c6db2779d7362b0719d63bdc",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=a52d653e9170d361e354ddaf2876aaa09aece207",
      "patch": "@@ -240,7 +240,7 @@ dump_msymbols (struct objfile *objfile, struct ui_file *outfile)\n       /* Use the relocated address as shown in the symbol here -- do\n \t not try to respect copy relocations.  */\n       CORE_ADDR addr = (msymbol->value.address\n-\t\t\t+ objfile->section_offsets[msymbol->section]);\n+\t\t\t+ objfile->section_offsets[msymbol->section_index ()]);\n       fputs_filtered (paddress (gdbarch, addr), outfile);\n       fprintf_filtered (outfile, \" %s\", msymbol->linkage_name ());\n       if (section)"
    },
    {
      "sha": "3650b49832eb9457fb293fd6cdc6b9cadaaee667",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=a52d653e9170d361e354ddaf2876aaa09aece207",
      "patch": "@@ -1015,8 +1015,8 @@ general_symbol_info::search_name () const\n struct obj_section *\n general_symbol_info::obj_section (const struct objfile *objfile) const\n {\n-  if (section >= 0)\n-    return &objfile->sections[section];\n+  if (section_index () >= 0)\n+    return &objfile->sections[section_index ()];\n   return nullptr;\n }\n \n@@ -1655,7 +1655,7 @@ fixup_section (struct general_symbol_info *ginfo,\n   msym = lookup_minimal_symbol_by_pc_name (addr, ginfo->linkage_name (),\n \t\t\t\t\t   objfile);\n   if (msym)\n-    ginfo->section = MSYMBOL_SECTION (msym);\n+    ginfo->set_section_index (msym->section_index ());\n   else\n     {\n       /* Static, function-local variables do appear in the linker\n@@ -1707,7 +1707,7 @@ fixup_section (struct general_symbol_info *ginfo,\n \t  if (obj_section_addr (s) - offset <= addr\n \t      && addr < obj_section_endaddr (s) - offset)\n \t    {\n-\t      ginfo->section = idx;\n+\t      ginfo->set_section_index (idx);\n \t      return;\n \t    }\n \t}\n@@ -1716,9 +1716,9 @@ fixup_section (struct general_symbol_info *ginfo,\n \t section.  If there is no allocated section, then it hardly\n \t matters what we pick, so just pick zero.  */\n       if (fallback == -1)\n-\tginfo->section = 0;\n+\tginfo->set_section_index (0);\n       else\n-\tginfo->section = fallback;\n+\tginfo->set_section_index (fallback);\n     }\n }\n \n@@ -6472,7 +6472,8 @@ get_msymbol_address (struct objfile *objf, const struct minimal_symbol *minsym)\n \t    return BMSYMBOL_VALUE_ADDRESS (found);\n \t}\n     }\n-  return minsym->value.address + objf->section_offsets[minsym->section];\n+  return (minsym->value.address\n+\t  + objf->section_offsets[minsym->section_index ()]);\n }\n \n \f"
    },
    {
      "sha": "efdbada976183944befe725525378111de8c6e87",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 17,
      "deletions": 5,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=a52d653e9170d361e354ddaf2876aaa09aece207",
      "patch": "@@ -539,7 +539,21 @@ struct general_symbol_info\n      section_offsets for this objfile.  Negative means that the symbol\n      does not get relocated relative to a section.  */\n \n-  short section;\n+  short m_section;\n+\n+  /* Set the index into the obj_section list (within the containing\n+     objfile) for the section that contains this symbol.  See M_SECTION\n+     for more details.  */\n+\n+  void set_section_index (short idx)\n+  { m_section = idx; }\n+\n+  /* Return the index into the obj_section list (within the containing\n+     objfile) for the section that contains this symbol.  See M_SECTION\n+     for more details.  */\n+\n+  short section_index () const\n+  { return m_section; }\n \n   /* Return the obj_section from OBJFILE for this symbol.  The symbol\n      returned is based on the SECTION member variable, and can be nullptr\n@@ -570,7 +584,6 @@ extern CORE_ADDR get_symbol_address (const struct symbol *sym);\n #define SYMBOL_VALUE_COMMON_BLOCK(symbol) (symbol)->value.common_block\n #define SYMBOL_BLOCK_VALUE(symbol)\t(symbol)->value.block\n #define SYMBOL_VALUE_CHAIN(symbol)\t(symbol)->value.chain\n-#define SYMBOL_SECTION(symbol)\t\t(symbol)->section\n \n /* Try to determine the demangled name for a symbol, based on the\n    language of that symbol.  If the language is set to language_auto,\n@@ -755,7 +768,7 @@ extern CORE_ADDR get_msymbol_address (struct objfile *objf,\n #define MSYMBOL_VALUE_ADDRESS(objfile, symbol)\t\t\t\t\\\n   (((symbol)->maybe_copied) ? get_msymbol_address (objfile, symbol)\t\\\n    : ((symbol)->value.address\t\t\t\t\t\t\\\n-      + (objfile)->section_offsets[(symbol)->section]))\n+      + (objfile)->section_offsets[(symbol)->section_index ()]))\n /* For a bound minsym, we can easily compute the address directly.  */\n #define BMSYMBOL_VALUE_ADDRESS(symbol) \\\n   MSYMBOL_VALUE_ADDRESS ((symbol).objfile, (symbol).minsym)\n@@ -764,7 +777,6 @@ extern CORE_ADDR get_msymbol_address (struct objfile *objf,\n #define MSYMBOL_VALUE_BYTES(symbol)\t(symbol)->value.bytes\n #define MSYMBOL_BLOCK_VALUE(symbol)\t(symbol)->value.block\n #define MSYMBOL_VALUE_CHAIN(symbol)\t(symbol)->value.chain\n-#define MSYMBOL_SECTION(symbol)\t\t(symbol)->section\n \n #include \"minsyms.h\"\n \n@@ -1118,7 +1130,7 @@ struct symbol : public general_symbol_info, public allocate_on_obstack\n       language_specific.obstack = nullptr;\n       m_language = language_unknown;\n       ada_mangled = 0;\n-      section = -1;\n+      m_section = -1;\n       /* GCC 4.8.5 (on CentOS 7) does not correctly compile class-\n \t initialization of unions, so we initialize it manually here.  */\n       owner.symtab = nullptr;"
    },
    {
      "sha": "cd93943a81262a9f326660298b31957aeaf1d02b",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a52d653e9170d361e354ddaf2876aaa09aece207/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=a52d653e9170d361e354ddaf2876aaa09aece207",
      "patch": "@@ -1372,7 +1372,7 @@ read_xcoff_symtab (struct objfile *objfile, legacy_psymtab *pst)\n \t\t(fcn_cs_saved.c_value + off,\n \t\t fcn_stab_saved.c_name, 0, 0, objfile);\n \t      if (newobj->name != NULL)\n-\t\tSYMBOL_SECTION (newobj->name) = SECT_OFF_TEXT (objfile);\n+\t\tnewobj->name->set_section_index (SECT_OFF_TEXT (objfile));\n \t    }\n \t  else if (strcmp (cs->c_name, \".ef\") == 0)\n \t    {\n@@ -1559,7 +1559,7 @@ process_xcoff_symbol (struct coff_symbol *cs, struct objfile *objfile)\n   /* default assumptions */\n   SET_SYMBOL_VALUE_ADDRESS (sym, cs->c_value + off);\n   SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n-  SYMBOL_SECTION (sym) = secnum_to_section (cs->c_secnum, objfile);\n+  sym->set_section_index (secnum_to_section (cs->c_secnum, objfile));\n \n   if (ISFCN (cs->c_type))\n     {\n@@ -1625,7 +1625,7 @@ process_xcoff_symbol (struct coff_symbol *cs, struct objfile *objfile)\n \t    sym = define_symbol (cs->c_value + off, cs->c_name, 0, 0, objfile);\n \t    if (sym != NULL)\n \t      {\n-\t\tSYMBOL_SECTION (sym) = sec;\n+\t\tsym->set_section_index (sec);\n \t      }\n \t    return sym;\n \t  }\n@@ -1657,7 +1657,7 @@ process_xcoff_symbol (struct coff_symbol *cs, struct objfile *objfile)\n \t      SET_SYMBOL_VALUE_ADDRESS (sym,\n \t\t\t\t\tSYMBOL_VALUE_ADDRESS (sym)\n \t\t\t\t\t+ static_block_base);\n-\t      SYMBOL_SECTION (sym) = static_block_section;\n+\t      sym->set_section_index (static_block_section);\n \t    }\n \t  return sym;\n "
    }
  ]
}