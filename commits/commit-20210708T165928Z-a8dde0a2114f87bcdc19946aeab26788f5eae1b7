{
  "sha": "a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YThkZGUwYTIxMTRmODdiY2RjMTk5NDZhZWFiMjY3ODhmNWVhZTFiNw==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2018-02-27T20:22:58Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-07-08T16:59:28Z"
    },
    "message": "ld: Limit cache size and add --max-cache-size=SIZE\n\nWhen link_info.keep_memory is true, linker caches the relocation\ninformation and symbol tables of input files in memory.  When there\nare many input files with many relocations, we may run out of memory.\nAdd --max-cache-size=SIZE to set the maximum cache size.\n\nbfd/\n\n\tPR ld/18028\n\t* bfd.c (bfd): Add alloc_size.\n\t* elf-bfd.h (_bfd_elf_link_info_read_relocs): New.\n\t* elf32-i386.c (elf_i386_check_relocs): Use _bfd_link_keep_memory.\n\tUpdate cache_size.\n\t* elf64-x86-64.c (elf_x86_64_check_relocs): Likewise.\n\t* elflink.c (_bfd_elf_link_read_relocs): Renamed to ...\n\t(_bfd_elf_link_info_read_relocs): This.  Update cache_size.\n\t(_bfd_elf_link_read_relocs): New.\n\t(_bfd_elf_link_check_relocs): Call _bfd_elf_link_info_read_relocs\n\tinstead of _bfd_elf_link_read_relocs.\n\t(elf_link_add_object_symbols): Likewise.\n\t(elf_link_input_bfd): Likewise.\n\t(init_reloc_cookie_rels): Likewise.\n\t(init_reloc_cookie): Update cache_size.  Call\n\t_bfd_elf_link_info_read_relocs instead of\n\t_bfd_elf_link_read_relocs.\n\t(link_info_ok): New.\n\t(elf_gc_smash_unused_vtentry_relocs): Updated.  Call\n\t_bfd_elf_link_info_read_relocs instead of\n\t_bfd_elf_link_read_relocs.\n\t(bfd_elf_gc_sections): Use link_info_ok.  Pass &link_info_ok\n\tto elf_gc_smash_unused_vtentry_relocs.\n\t* libbfd-in.h (_bfd_link_keep_memory): New.\n\t* linker.c (_bfd_link_keep_memory): New.\n\t* opncls.c (bfd_alloc): Update alloc_size.\n\t* bfd-in2.h: Regenerated.\n\t* libbfd.h: Likewise.\n\ninclude/\n\n\tPR ld/18028\n\t* bfdlink.h (bfd_link_info): Add cache_size and max_cache_size.\n\nld/\n\n\tPR ld/18028\n\t* NEWS: Mention --max-cache-size=SIZE.\n\t* ld.texi: Document --max-cache-size=SIZE.\n\t* ldlex.h (option_values): Add OPTION_MAX_CACHE_SIZE.\n\t* ldmain.c: (main): Set link_info.max_cache_size to -1.\n\t* lexsup.c (ld_options): Add --max-cache-size=SIZE.\n\t(parse_args): Support OPTION_MAX_CACHE_SIZE.\n\t* testsuite/ld-bootstrap/bootstrap.exp: Add test for\n\t--max-cache-size=-1.",
    "tree": {
      "sha": "52c8cd4ecd4d2e1a296652841e4e9d63d61ed5a4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/52c8cd4ecd4d2e1a296652841e4e9d63d61ed5a4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "74b10a3219e44ba2585e3f7226a6455d41e92c1b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/74b10a3219e44ba2585e3f7226a6455d41e92c1b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/74b10a3219e44ba2585e3f7226a6455d41e92c1b"
    }
  ],
  "stats": {
    "total": 184,
    "additions": 158,
    "deletions": 26
  },
  "files": [
    {
      "sha": "43d4ff0b9255523efda888bfaa47b6fdb140cdcc",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
      "patch": "@@ -6717,6 +6717,9 @@ struct bfd\n      be used only for archive elements.  */\n   int archive_pass;\n \n+  /* The total size of memory from bfd_alloc.  */\n+  bfd_size_type alloc_size;\n+\n   /* Stuff only useful for object files:\n      The start address.  */\n   bfd_vma start_address;"
    },
    {
      "sha": "eb555ad5df22ae5847f8fb616a8293c4fab6d3d2",
      "filename": "bfd/bfd.c",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd.c?ref=a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
      "patch": "@@ -286,6 +286,9 @@ CODE_FRAGMENT\n .     be used only for archive elements.  *}\n .  int archive_pass;\n .\n+.  {* The total size of memory from bfd_alloc.  *}\n+.  bfd_size_type alloc_size;\n+.\n .  {* Stuff only useful for object files:\n .     The start address.  *}\n .  bfd_vma start_address;"
    },
    {
      "sha": "65c08ca9d4a6689cf628c5bbfe78f08b2571455f",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
      "patch": "@@ -2482,6 +2482,9 @@ extern char *_bfd_elfcore_strndup\n \n extern Elf_Internal_Rela *_bfd_elf_link_read_relocs\n   (bfd *, asection *, void *, Elf_Internal_Rela *, bool);\n+extern Elf_Internal_Rela *_bfd_elf_link_info_read_relocs\n+  (bfd *, struct bfd_link_info *, asection *, void *, Elf_Internal_Rela *,\n+   bool);\n \n extern bool _bfd_elf_link_output_relocs\n   (bfd *, asection *, Elf_Internal_Shdr *, Elf_Internal_Rela *,"
    },
    {
      "sha": "1898ba3e33af3be96817749762b37d385cdd3cf2",
      "filename": "bfd/elf32-i386.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/elf32-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/elf32-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-i386.c?ref=a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
      "patch": "@@ -1915,13 +1915,14 @@ elf_i386_check_relocs (bfd *abfd,\n \n   if (elf_section_data (sec)->this_hdr.contents != contents)\n     {\n-      if (!converted && !info->keep_memory)\n+      if (!converted && !_bfd_link_keep_memory (info))\n \tfree (contents);\n       else\n \t{\n \t  /* Cache the section contents for elf_link_input_bfd if any\n \t     load is converted or --no-keep-memory isn't used.  */\n \t  elf_section_data (sec)->this_hdr.contents = contents;\n+\t  info->cache_size += sec->size;\n \t}\n     }\n "
    },
    {
      "sha": "4c55c5999c395da919cdfcd0dc9659d48b4d8ce4",
      "filename": "bfd/elf64-x86-64.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/elf64-x86-64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/elf64-x86-64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-x86-64.c?ref=a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
      "patch": "@@ -2365,13 +2365,14 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \n   if (elf_section_data (sec)->this_hdr.contents != contents)\n     {\n-      if (!converted && !info->keep_memory)\n+      if (!converted && !_bfd_link_keep_memory (info))\n \tfree (contents);\n       else\n \t{\n \t  /* Cache the section contents for elf_link_input_bfd if any\n \t     load is converted or --no-keep-memory isn't used.  */\n \t  elf_section_data (sec)->this_hdr.contents = contents;\n+\t  info->cache_size += sec->size;\n \t}\n     }\n "
    },
    {
      "sha": "003c9546b034379b46be59364a9d086b2ae8720e",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 67,
      "deletions": 23,
      "changes": 90,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
      "patch": "@@ -2619,14 +2619,16 @@ elf_link_read_relocs_from_section (bfd *abfd,\n    according to the KEEP_MEMORY argument.  If O has two relocation\n    sections (both REL and RELA relocations), then the REL_HDR\n    relocations will appear first in INTERNAL_RELOCS, followed by the\n-   RELA_HDR relocations.  */\n+   RELA_HDR relocations.  If INFO isn't NULL and KEEP_MEMORY is true,\n+   update cache_size.  */\n \n Elf_Internal_Rela *\n-_bfd_elf_link_read_relocs (bfd *abfd,\n-\t\t\t   asection *o,\n-\t\t\t   void *external_relocs,\n-\t\t\t   Elf_Internal_Rela *internal_relocs,\n-\t\t\t   bool keep_memory)\n+_bfd_elf_link_info_read_relocs (bfd *abfd,\n+\t\t\t\tstruct bfd_link_info *info,\n+\t\t\t\tasection *o,\n+\t\t\t\tvoid *external_relocs,\n+\t\t\t\tElf_Internal_Rela *internal_relocs,\n+\t\t\t\tbool keep_memory)\n {\n   void *alloc1 = NULL;\n   Elf_Internal_Rela *alloc2 = NULL;\n@@ -2646,7 +2648,11 @@ _bfd_elf_link_read_relocs (bfd *abfd,\n \n       size = (bfd_size_type) o->reloc_count * sizeof (Elf_Internal_Rela);\n       if (keep_memory)\n-\tinternal_relocs = alloc2 = (Elf_Internal_Rela *) bfd_alloc (abfd, size);\n+\t{\n+\t  internal_relocs = alloc2 = (Elf_Internal_Rela *) bfd_alloc (abfd, size);\n+\t  if (info)\n+\t    info->cache_size += size;\n+\t}\n       else\n \tinternal_relocs = alloc2 = (Elf_Internal_Rela *) bfd_malloc (size);\n       if (internal_relocs == NULL)\n@@ -2710,6 +2716,22 @@ _bfd_elf_link_read_relocs (bfd *abfd,\n   return NULL;\n }\n \n+/* This is similar to _bfd_elf_link_info_read_relocs, except for that\n+   NULL is passed to _bfd_elf_link_info_read_relocs for pointer to\n+   struct bfd_link_info.  */\n+\n+Elf_Internal_Rela *\n+_bfd_elf_link_read_relocs (bfd *abfd,\n+\t\t\t   asection *o,\n+\t\t\t   void *external_relocs,\n+\t\t\t   Elf_Internal_Rela *internal_relocs,\n+\t\t\t   bool keep_memory)\n+{\n+  return _bfd_elf_link_info_read_relocs (abfd, NULL, o, external_relocs,\n+\t\t\t\t\t internal_relocs, keep_memory);\n+\n+}\n+\n /* Compute the size of, and allocate space for, REL_HDR which is the\n    section header for a section containing relocations for O.  */\n \n@@ -4026,8 +4048,10 @@ _bfd_elf_link_check_relocs (bfd *abfd, struct bfd_link_info *info)\n \t      || bfd_is_abs_section (o->output_section))\n \t    continue;\n \n-\t  internal_relocs = _bfd_elf_link_read_relocs (abfd, o, NULL, NULL,\n-\t\t\t\t\t\t       info->keep_memory);\n+\t  internal_relocs = _bfd_elf_link_info_read_relocs (abfd, info,\n+\t\t\t\t\t\t\t    o, NULL,\n+\t\t\t\t\t\t\t    NULL,\n+\t\t\t\t\t\t\t    _bfd_link_keep_memory (info));\n \t  if (internal_relocs == NULL)\n \t    return false;\n \n@@ -5356,9 +5380,10 @@ elf_link_add_object_symbols (bfd *abfd, struct bfd_link_info *info)\n \t\t  && (s->flags & SEC_DEBUGGING) != 0))\n \t    continue;\n \n-\t  internal_relocs = _bfd_elf_link_read_relocs (abfd, s, NULL,\n-\t\t\t\t\t\t       NULL,\n-\t\t\t\t\t\t       info->keep_memory);\n+\t  internal_relocs = _bfd_elf_link_info_read_relocs (abfd, info,\n+\t\t\t\t\t\t\t    s, NULL,\n+\t\t\t\t\t\t\t    NULL,\n+\t\t\t\t\t\t\t    _bfd_link_keep_memory (info));\n \t  if (internal_relocs == NULL)\n \t    goto error_free_vers;\n \n@@ -11186,8 +11211,10 @@ elf_link_input_bfd (struct elf_final_link_info *flinfo, bfd *input_bfd)\n \n \t  /* Get the swapped relocs.  */\n \t  internal_relocs\n-\t    = _bfd_elf_link_read_relocs (input_bfd, o, flinfo->external_relocs,\n-\t\t\t\t\t flinfo->internal_relocs, false);\n+\t    = _bfd_elf_link_info_read_relocs (input_bfd, flinfo->info, o,\n+\t\t\t\t\t      flinfo->external_relocs,\n+\t\t\t\t\t      flinfo->internal_relocs,\n+\t\t\t\t\t      false);\n \t  if (internal_relocs == NULL\n \t      && o->reloc_count > 0)\n \t    return false;\n@@ -13279,8 +13306,12 @@ init_reloc_cookie (struct elf_reloc_cookie *cookie,\n \t  info->callbacks->einfo (_(\"%P%X: can not read symbols: %E\\n\"));\n \t  return false;\n \t}\n-      if (info->keep_memory)\n-\tsymtab_hdr->contents = (bfd_byte *) cookie->locsyms;\n+      if (_bfd_link_keep_memory (info) )\n+\t{\n+\t  symtab_hdr->contents = (bfd_byte *) cookie->locsyms;\n+\t  info->cache_size += (cookie->locsymcount\n+\t\t\t       * sizeof (Elf_External_Sym_Shndx));\n+\t}\n     }\n   return true;\n }\n@@ -13312,8 +13343,9 @@ init_reloc_cookie_rels (struct elf_reloc_cookie *cookie,\n     }\n   else\n     {\n-      cookie->rels = _bfd_elf_link_read_relocs (abfd, sec, NULL, NULL,\n-\t\t\t\t\t\tinfo->keep_memory);\n+      cookie->rels = _bfd_elf_link_info_read_relocs (abfd, info, sec,\n+\t\t\t\t\t\t     NULL, NULL,\n+\t\t\t\t\t\t     _bfd_link_keep_memory (info));\n       if (cookie->rels == NULL)\n \treturn false;\n       cookie->rel = cookie->rels;\n@@ -13881,14 +13913,22 @@ elf_gc_propagate_vtable_entries_used (struct elf_link_hash_entry *h, void *okp)\n   return true;\n }\n \n+struct link_info_ok\n+{\n+  struct bfd_link_info *info;\n+  bool ok;\n+};\n+\n static bool\n-elf_gc_smash_unused_vtentry_relocs (struct elf_link_hash_entry *h, void *okp)\n+elf_gc_smash_unused_vtentry_relocs (struct elf_link_hash_entry *h,\n+\t\t\t\t    void *ptr)\n {\n   asection *sec;\n   bfd_vma hstart, hend;\n   Elf_Internal_Rela *relstart, *relend, *rel;\n   const struct elf_backend_data *bed;\n   unsigned int log_file_align;\n+  struct link_info_ok *info = (struct link_info_ok *) ptr;\n \n   /* Take care of both those symbols that do not describe vtables as\n      well as those that are not loaded.  */\n@@ -13904,9 +13944,10 @@ elf_gc_smash_unused_vtentry_relocs (struct elf_link_hash_entry *h, void *okp)\n   hstart = h->root.u.def.value;\n   hend = hstart + h->size;\n \n-  relstart = _bfd_elf_link_read_relocs (sec->owner, sec, NULL, NULL, true);\n+  relstart = _bfd_elf_link_info_read_relocs (sec->owner, info->info,\n+\t\t\t\t\t     sec, NULL, NULL, true);\n   if (!relstart)\n-    return *(bool *) okp = false;\n+    return info->ok = false;\n   bed = get_elf_backend_data (sec->owner);\n   log_file_align = bed->s->log_file_align;\n \n@@ -14029,6 +14070,7 @@ bfd_elf_gc_sections (bfd *abfd, struct bfd_link_info *info)\n   elf_gc_mark_hook_fn gc_mark_hook;\n   const struct elf_backend_data *bed = get_elf_backend_data (abfd);\n   struct elf_link_hash_table *htab;\n+  struct link_info_ok info_ok;\n \n   if (!bed->can_gc_sections\n       || !is_elf_hash_table (info->hash))\n@@ -14070,8 +14112,10 @@ bfd_elf_gc_sections (bfd *abfd, struct bfd_link_info *info)\n     return false;\n \n   /* Kill the vtable relocations that were not used.  */\n-  elf_link_hash_traverse (htab, elf_gc_smash_unused_vtentry_relocs, &ok);\n-  if (!ok)\n+  info_ok.info = info;\n+  info_ok.ok = true;\n+  elf_link_hash_traverse (htab, elf_gc_smash_unused_vtentry_relocs, &info_ok);\n+  if (!info_ok.ok)\n     return false;\n \n   /* Mark dynamically referenced symbols.  */"
    },
    {
      "sha": "89d2997aedf85d4ac2c07f5d0e73875f399000cc",
      "filename": "bfd/libbfd-in.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/libbfd-in.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/libbfd-in.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd-in.h?ref=a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
      "patch": "@@ -894,6 +894,9 @@ extern bfd_byte * _bfd_write_unsigned_leb128\n \n extern struct bfd_link_info *_bfd_get_link_info (bfd *);\n \n+extern bool _bfd_link_keep_memory (struct bfd_link_info *)\n+  ATTRIBUTE_HIDDEN;\n+\n #if GCC_VERSION >= 7000\n #define _bfd_mul_overflow(a, b, res) __builtin_mul_overflow (a, b, res)\n #else"
    },
    {
      "sha": "69496411622c245413c866723ac0c0b37a388096",
      "filename": "bfd/libbfd.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/libbfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/libbfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.h?ref=a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
      "patch": "@@ -899,6 +899,9 @@ extern bfd_byte * _bfd_write_unsigned_leb128\n \n extern struct bfd_link_info *_bfd_get_link_info (bfd *);\n \n+extern bool _bfd_link_keep_memory (struct bfd_link_info *)\n+  ATTRIBUTE_HIDDEN;\n+\n #if GCC_VERSION >= 7000\n #define _bfd_mul_overflow(a, b, res) __builtin_mul_overflow (a, b, res)\n #else"
    },
    {
      "sha": "755ff19923bca9a2e6353363d65f6fe7fb895e6b",
      "filename": "bfd/linker.c",
      "status": "modified",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/linker.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/linker.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/linker.c?ref=a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
      "patch": "@@ -3535,3 +3535,38 @@ _bfd_nolink_bfd_define_start_stop (struct bfd_link_info *info ATTRIBUTE_UNUSED,\n {\n   return (struct bfd_link_hash_entry *) _bfd_ptr_bfd_null_error (sec->owner);\n }\n+\n+/* Return false if linker should avoid caching relocation infomation\n+   and symbol tables of input files in memory.  */\n+\n+bool\n+_bfd_link_keep_memory (struct bfd_link_info * info)\n+{\n+  bfd *abfd;\n+  bfd_size_type size;\n+\n+  if (!info->keep_memory)\n+    return false;\n+\n+  if (info->max_cache_size == (bfd_size_type) -1)\n+    return true;\n+\n+  abfd = info->input_bfds;\n+  size = info->cache_size;\n+  do\n+    {\n+      if (size >= info->max_cache_size)\n+\t{\n+\t  /* Over the limit.  Reduce the memory usage.  */\n+\t  info->keep_memory = false;\n+\t  return false;\n+\t}\n+      if (!abfd)\n+\tbreak;\n+      size += abfd->alloc_size;\n+      abfd = abfd->link.next;\n+    }\n+  while (1);\n+\n+  return true;\n+}"
    },
    {
      "sha": "96ff1e9f6a902a20dde9e452da31ca729ad799bc",
      "filename": "bfd/opncls.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/opncls.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/bfd/opncls.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/opncls.c?ref=a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
      "patch": "@@ -1032,6 +1032,8 @@ bfd_alloc (bfd *abfd, bfd_size_type size)\n   ret = objalloc_alloc ((struct objalloc *) abfd->memory, ul_size);\n   if (ret == NULL)\n     bfd_set_error (bfd_error_no_memory);\n+  else\n+    abfd->alloc_size += size;\n   return ret;\n }\n "
    },
    {
      "sha": "549685854107707e7a9b2d36b6e677eaa7244108",
      "filename": "include/bfdlink.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/include/bfdlink.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/include/bfdlink.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/bfdlink.h?ref=a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
      "patch": "@@ -682,6 +682,13 @@ struct bfd_link_info\n \n   /* The version information.  */\n   struct bfd_elf_version_tree *version_info;\n+\n+  /* Size of cache.  Backend can use it to keep strace cache size.   */\n+  bfd_size_type cache_size;\n+\n+  /* The maximum cache size.  Backend can use cache_size and and\n+     max_cache_size to decide if keep_memory should be honored.  */\n+  bfd_size_type max_cache_size;\n };\n \n /* Some forward-definitions used by some callbacks.  */"
    },
    {
      "sha": "92dd4fd97cdb3532f14be6b9cdb76d6dba61877e",
      "filename": "ld/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/ld/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/ld/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/NEWS?ref=a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
      "patch": "@@ -1,5 +1,8 @@\n -*- text -*-\n \n+* Add --max-cache-size=SIZE to set the the maximum cache size to SIZE\n+  bytes.\n+\n Changes in 2.37:\n \n * arm-symbianelf support removed."
    },
    {
      "sha": "67c50839b37b075d139dbb3d1d03331e4291eba9",
      "filename": "ld/ld.texi",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/ld/ld.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/ld/ld.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ld.texi?ref=a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
      "patch": "@@ -2839,6 +2839,12 @@ has been used.\n The @option{--reduce-memory-overheads} switch may be also be used to\n enable other tradeoffs in future versions of the linker.\n \n+@kindex --max-cache-size=@var{size}\n+@item --max-cache-size=@var{size}\n+@command{ld} normally caches the relocation information and symbol tables\n+of input files in memory with the unlimited size.  This option sets the\n+maximum cache size to @var{size}.\n+\n @kindex --build-id\n @kindex --build-id=@var{style}\n @item --build-id"
    },
    {
      "sha": "9707d57caf8cf8c2abc84c2547334065049ac577",
      "filename": "ld/ldlex.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/ld/ldlex.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/ld/ldlex.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlex.h?ref=a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
      "patch": "@@ -140,6 +140,7 @@ enum option_values\n   OPTION_WARN_TEXTREL,\n   OPTION_WARN_ALTERNATE_EM,\n   OPTION_REDUCE_MEMORY_OVERHEADS,\n+  OPTION_MAX_CACHE_SIZE,\n #if BFD_SUPPORTS_PLUGINS\n   OPTION_PLUGIN,\n   OPTION_PLUGIN_OPT,"
    },
    {
      "sha": "e4c67740e376ee228d90eea3423b07afedaeaedb",
      "filename": "ld/ldmain.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/ld/ldmain.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/ld/ldmain.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldmain.c?ref=a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
      "patch": "@@ -331,6 +331,7 @@ main (int argc, char **argv)\n \n   link_info.allow_undefined_version = true;\n   link_info.keep_memory = true;\n+  link_info.max_cache_size = (bfd_size_type) -1;\n   link_info.combreloc = true;\n   link_info.strip_discarded = true;\n   link_info.prohibit_multiple_definition_absolute = false;"
    },
    {
      "sha": "c128fe3a96be67ee8587d0a92449d9f93f2d94d7",
      "filename": "ld/lexsup.c",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/ld/lexsup.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/ld/lexsup.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/lexsup.c?ref=a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
      "patch": "@@ -433,6 +433,10 @@ static const struct ld_option ld_options[] =\n      OPTION_REDUCE_MEMORY_OVERHEADS},\n     '\\0', NULL, N_(\"Reduce memory overheads, possibly taking much longer\"),\n     TWO_DASHES },\n+  { {\"max-cache-size=SIZE\", required_argument, NULL,\n+    OPTION_MAX_CACHE_SIZE},\n+    '\\0', NULL, N_(\"Set the maximum cache size to SIZE bytes\"),\n+    TWO_DASHES },\n   { {\"relax\", no_argument, NULL, OPTION_RELAX},\n     '\\0', NULL, N_(\"Reduce code size by using target specific optimizations\"), TWO_DASHES },\n   { {\"no-relax\", no_argument, NULL, OPTION_NO_RELAX},\n@@ -1631,6 +1635,17 @@ parse_args (unsigned argc, char **argv)\n \t    config.hash_table_size = 1021;\n \t  break;\n \n+\tcase OPTION_MAX_CACHE_SIZE:\n+\t  {\n+\t    char *end;\n+\t    bfd_size_type cache_size = strtoul (optarg, &end, 0);\n+\t    if (*end != '\\0')\n+\t      einfo (_(\"%F%P: invalid cache memory size: %s\\n\"),\n+\t\t     optarg);\n+\t    link_info.max_cache_size = cache_size;\n+\t  }\n+\t  break;\n+\n \tcase OPTION_HASH_SIZE:\n \t  {\n \t    bfd_size_type new_size;"
    },
    {
      "sha": "9c27c5ff5d977c8a33ad68a54131bcad23db5019",
      "filename": "ld/testsuite/ld-bootstrap/bootstrap.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/ld/testsuite/ld-bootstrap/bootstrap.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8dde0a2114f87bcdc19946aeab26788f5eae1b7/ld/testsuite/ld-bootstrap/bootstrap.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-bootstrap/bootstrap.exp?ref=a8dde0a2114f87bcdc19946aeab26788f5eae1b7",
      "patch": "@@ -55,7 +55,8 @@ if [check_plugin_api_available] {\n # really test -r.  Use ld1 to link a fresh ld, ld2.  Use ld2 to link a\n # new ld, ld3.  ld2 and ld3 should be identical.\n set test_flags {\"\" \"strip\" \"--static\" \"-Wl,--traditional-format\"\n-\t\t\"-Wl,--no-keep-memory\" \"-Wl,--relax\"}\n+\t\t\"-Wl,--no-keep-memory\" \"-Wl,--relax\"\n+\t\t\"-Wl,--max-cache-size=-1\"}\n if { [istarget \"powerpc-*-*\"] } {\n     lappend test_flags \"-Wl,--ppc476-workaround\"\n }"
    }
  ]
}