{
  "sha": "5382f97180f5be551868449e411a4daaebf232fb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTM4MmY5NzE4MGY1YmU1NTE4Njg0NDllNDExYTRkYWFlYmYyMzJmYg==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-12-02T14:29:30Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-12-04T14:17:00Z"
    },
    "message": "Fix shifting of negative value\n\nWhen UBSan is enabled, I noticed runtime errors complaining of shifting\nof negative numbers.\n\nThis patch fixes this by reusing existing macros from the ARM port.\n\nIt also removes unused macros from AArch64's port.\n\ngdb/ChangeLog:\n\n2020-12-04  Luis Machado  <luis.machado@linaro.org>\n\n\t* aarch64-tdep.c (submask, bit, bits): Remove.\n\t* arch/aarch64-insn.c (extract_signed_bitfield): Remove.\n\t(aarch64_decode_adr, aarch64_decode_b aarch64_decode_bcond)\n\t(aarch64_decode_cb, aarch64_decode_tb)\n\t(aarch64_decode_ldr_literal): Use sbits to extract a signed\n\timmediate.\n\t* arch/aarch64-insn.h (submask, bits, bit, sbits): New macros.",
    "tree": {
      "sha": "8cc4c6f8a8d23877ce212441c8946122c829c630",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8cc4c6f8a8d23877ce212441c8946122c829c630"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5382f97180f5be551868449e411a4daaebf232fb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5382f97180f5be551868449e411a4daaebf232fb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5382f97180f5be551868449e411a4daaebf232fb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5382f97180f5be551868449e411a4daaebf232fb/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "67748e0f666f0645d7f182e1365f4d9859e55f1d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/67748e0f666f0645d7f182e1365f4d9859e55f1d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/67748e0f666f0645d7f182e1365f4d9859e55f1d"
    }
  ],
  "stats": {
    "total": 61,
    "additions": 32,
    "deletions": 29
  },
  "files": [
    {
      "sha": "ea51985c99ac83ee4a27a39d2a27163a2d724233",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5382f97180f5be551868449e411a4daaebf232fb/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5382f97180f5be551868449e411a4daaebf232fb/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5382f97180f5be551868449e411a4daaebf232fb",
      "patch": "@@ -1,3 +1,13 @@\n+2020-12-04  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* aarch64-tdep.c (submask, bit, bits): Remove.\n+\t* arch/aarch64-insn.c (extract_signed_bitfield): Remove.\n+\t(aarch64_decode_adr, aarch64_decode_b aarch64_decode_bcond)\n+\t(aarch64_decode_cb, aarch64_decode_tb)\n+\t(aarch64_decode_ldr_literal): Use sbits to extract a signed\n+\timmediate.\n+\t* arch/aarch64-insn.h (submask, bits, bit, sbits): New macros.\n+\n 2020-12-04  Tom de Vries  <tdevries@suse.de>\n \n \tPR tdep/27007"
    },
    {
      "sha": "680b53ffa6c808cfb619d53f6289fa7833915b93",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5382f97180f5be551868449e411a4daaebf232fb/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5382f97180f5be551868449e411a4daaebf232fb/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=5382f97180f5be551868449e411a4daaebf232fb",
      "patch": "@@ -53,10 +53,6 @@\n #include \"opcode/aarch64.h\"\n #include <algorithm>\n \n-#define submask(x) ((1L << ((x) + 1)) - 1)\n-#define bit(obj,st) (((obj) >> (st)) & 1)\n-#define bits(obj,st,fn) (((obj) >> (st)) & submask ((fn) - (st)))\n-\n /* A Homogeneous Floating-Point or Short-Vector Aggregate may have at most\n    four members.  */\n #define HA_MAX_NUM_FLDS\t\t4"
    },
    {
      "sha": "b7c5a601a168bfd8febea2aab1569d0a77751948",
      "filename": "gdb/arch/aarch64-insn.c",
      "status": "modified",
      "additions": 6,
      "deletions": 25,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5382f97180f5be551868449e411a4daaebf232fb/gdb/arch/aarch64-insn.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5382f97180f5be551868449e411a4daaebf232fb/gdb/arch/aarch64-insn.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/aarch64-insn.c?ref=5382f97180f5be551868449e411a4daaebf232fb",
      "patch": "@@ -22,25 +22,6 @@\n /* Toggle this file's internal debugging dump.  */\n bool aarch64_debug = false;\n \n-/* Extract a signed value from a bit field within an instruction\n-   encoding.\n-\n-   INSN is the instruction opcode.\n-\n-   WIDTH specifies the width of the bit field to extract (in bits).\n-\n-   OFFSET specifies the least significant bit of the field where bits\n-   are numbered zero counting from least to most significant.  */\n-\n-static int32_t\n-extract_signed_bitfield (uint32_t insn, unsigned width, unsigned offset)\n-{\n-  unsigned shift_l = sizeof (int32_t) * 8 - (offset + width);\n-  unsigned shift_r = sizeof (int32_t) * 8 - width;\n-\n-  return ((int32_t) insn << shift_l) >> shift_r;\n-}\n-\n /* Determine if specified bits within an instruction opcode matches a\n    specific pattern.\n \n@@ -74,7 +55,7 @@ aarch64_decode_adr (CORE_ADDR addr, uint32_t insn, int *is_adrp,\n   if (decode_masked_match (insn, 0x1f000000, 0x10000000))\n     {\n       uint32_t immlo = (insn >> 29) & 0x3;\n-      int32_t immhi = extract_signed_bitfield (insn, 19, 5) << 2;\n+      int32_t immhi = sbits (insn, 5, 23) * 4;\n \n       *is_adrp = (insn >> 31) & 0x1;\n       *rd = (insn >> 0) & 0x1f;\n@@ -118,7 +99,7 @@ aarch64_decode_b (CORE_ADDR addr, uint32_t insn, int *is_bl,\n   if (decode_masked_match (insn, 0x7c000000, 0x14000000))\n     {\n       *is_bl = (insn >> 31) & 0x1;\n-      *offset = extract_signed_bitfield (insn, 26, 0) << 2;\n+      *offset = sbits (insn, 0, 25) * 4;\n \n       if (aarch64_debug)\n \t{\n@@ -151,7 +132,7 @@ aarch64_decode_bcond (CORE_ADDR addr, uint32_t insn, unsigned *cond,\n   if (decode_masked_match (insn, 0xff000010, 0x54000000))\n     {\n       *cond = (insn >> 0) & 0xf;\n-      *offset = extract_signed_bitfield (insn, 19, 5) << 2;\n+      *offset = sbits (insn, 5, 23) * 4;\n \n       if (aarch64_debug)\n \t{\n@@ -186,7 +167,7 @@ aarch64_decode_cb (CORE_ADDR addr, uint32_t insn, int *is64, int *is_cbnz,\n       *rn = (insn >> 0) & 0x1f;\n       *is64 = (insn >> 31) & 0x1;\n       *is_cbnz = (insn >> 24) & 0x1;\n-      *offset = extract_signed_bitfield (insn, 19, 5) << 2;\n+      *offset = sbits (insn, 5, 23) * 4;\n \n       if (aarch64_debug)\n \t{\n@@ -222,7 +203,7 @@ aarch64_decode_tb (CORE_ADDR addr, uint32_t insn, int *is_tbnz,\n       *rt = (insn >> 0) & 0x1f;\n       *is_tbnz = (insn >> 24) & 0x1;\n       *bit = ((insn >> (31 - 4)) & 0x20) | ((insn >> 19) & 0x1f);\n-      *imm = extract_signed_bitfield (insn, 14, 5) << 2;\n+      *imm = sbits (insn, 5, 18) * 4;\n \n       if (aarch64_debug)\n \t{\n@@ -267,7 +248,7 @@ aarch64_decode_ldr_literal (CORE_ADDR addr, uint32_t insn, int *is_w,\n \t*is64 = (insn >> 30) & 0x1;\n \n       *rt = (insn >> 0) & 0x1f;\n-      *offset = extract_signed_bitfield (insn, 19, 5) << 2;\n+      *offset = sbits (insn, 5, 23) * 4;\n \n       if (aarch64_debug)\n \tdebug_printf (\"decode: %s 0x%x %s %s%u, #?\\n\","
    },
    {
      "sha": "5ce46c1e9da855f95256400c12591d9be37cc13a",
      "filename": "gdb/arch/aarch64-insn.h",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5382f97180f5be551868449e411a4daaebf232fb/gdb/arch/aarch64-insn.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5382f97180f5be551868449e411a4daaebf232fb/gdb/arch/aarch64-insn.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/aarch64-insn.h?ref=5382f97180f5be551868449e411a4daaebf232fb",
      "patch": "@@ -21,6 +21,22 @@\n \n extern bool aarch64_debug;\n \n+/* Support routines for instruction parsing.  */\n+\n+/* Create a mask of X bits.  */\n+#define submask(x) ((1L << ((x) + 1)) - 1)\n+\n+/* Extract the bitfield from OBJ starting at bit ST and ending at bit FN.  */\n+#define bits(obj,st,fn) (((obj) >> (st)) & submask ((fn) - (st)))\n+\n+/* Extract bit ST from OBJ.  */\n+#define bit(obj,st) (((obj) >> (st)) & 1)\n+\n+/* Extract the signed bitfield from OBJ starting at bit ST and ending at\n+   bit FN.  The result is sign-extended.  */\n+#define sbits(obj,st,fn) \\\n+  ((long) (bits(obj,st,fn) | ((long) bit(obj,fn) * ~ submask (fn - st))))\n+\n /* List of opcodes that we need for building the jump pad and relocating\n    an instruction.  */\n "
    }
  ]
}