{
  "sha": "9e439f0098d1dd21d79dff3f030ddcd0b1cb244b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWU0MzlmMDA5OGQxZGQyMWQ3OWRmZjNmMDMwZGRjZDBiMWNiMjQ0Yg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-04-30T16:22:23Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-04-30T16:22:24Z"
    },
    "message": "Move function indirection code to nat/windows-nat\n\ngdb and gdbserver both look for functions in some Windows DLLs at\nruntime.  This patch moves this code out of gdb and into\nnat/windows-nat, so it can be shared by both programs.\n\ngdb/ChangeLog\n2021-04-30  Tom Tromey  <tromey@adacore.com>\n\n\t* windows-nat.c: Move code to nat/windows-nat.[ch].\n\t(_initialize_windows_nat): Call initialize_loadable.\n\t* nat/windows-nat.h (AdjustTokenPrivileges)\n\t(DebugActiveProcessStop, DebugBreakProcess)\n\t(DebugSetProcessKillOnExit, EnumProcessModules)\n\t(EnumProcessModulesEx, GetModuleInformation)\n\t(GetModuleFileNameExA, GetModuleFileNameExW)\n\t(LookupPrivilegeValueA, OpenProcessToken, GetConsoleFontSize)\n\t(GetCurrentConsoleFont, Wow64SuspendThread)\n\t(Wow64GetThreadContext, Wow64SetThreadContext)\n\t(Wow64GetThreadSelectorEntry): Move from windows-nat.c.\n\t(AdjustTokenPrivileges_ftype)\n\t(DebugActiveProcessStop_ftype, DebugBreakProcess_ftype)\n\t(DebugSetProcessKillOnExit_ftype, EnumProcessModules_ftype)\n\t(EnumProcessModulesEx_ftype, GetModuleInformation_ftype)\n\t(GetModuleFileNameExA_ftype, GetModuleFileNameExW_ftype)\n\t(LookupPrivilegeValueA_ftype, OpenProcessToken_ftype)\n\t(GetConsoleFontSize_ftype)\n\t(GetCurrentConsoleFont_ftype, Wow64SuspendThread_ftype)\n\t(Wow64GetThreadContext_ftype, Wow64SetThreadContext_ftype)\n\t(Wow64GetThreadSelectorEntry_ftype): Likewise.\n\t(initialize_loadable): Declare.\n\t* nat/windows-nat.c (AdjustTokenPrivileges)\n\t(DebugActiveProcessStop, DebugBreakProcess)\n\t(DebugSetProcessKillOnExit, EnumProcessModules)\n\t(EnumProcessModulesEx, GetModuleInformation, GetModuleFileNameExA)\n\t(GetModuleFileNameExW, LookupPrivilegeValueA, OpenProcessToken)\n\t(GetCurrentConsoleFont, GetConsoleFontSize, Wow64SuspendThread)\n\t(Wow64GetThreadContext, Wow64SetThreadContext)\n\t(Wow64GetThreadSelectorEntry): Define.\n\t(bad, bad_GetCurrentConsoleFont, bad_GetConsoleFontSize): Move\n\tfrom windows-nat.c.\n\t(initialize_loadable): Likewise, and rename.",
    "tree": {
      "sha": "1b9c55df7a9a563014b832c88512445ed70c070f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1b9c55df7a9a563014b832c88512445ed70c070f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9e439f0098d1dd21d79dff3f030ddcd0b1cb244b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9e439f0098d1dd21d79dff3f030ddcd0b1cb244b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9e439f0098d1dd21d79dff3f030ddcd0b1cb244b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9e439f0098d1dd21d79dff3f030ddcd0b1cb244b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1053c6389a699550f2c7c1f118ce4d2c1889a73a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1053c6389a699550f2c7c1f118ce4d2c1889a73a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1053c6389a699550f2c7c1f118ce4d2c1889a73a"
    }
  ],
  "stats": {
    "total": 480,
    "additions": 279,
    "deletions": 201
  },
  "files": [
    {
      "sha": "621a5db1cf50d4f5818c9b2e49a5f2d21ad3a038",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e439f0098d1dd21d79dff3f030ddcd0b1cb244b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e439f0098d1dd21d79dff3f030ddcd0b1cb244b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9e439f0098d1dd21d79dff3f030ddcd0b1cb244b",
      "patch": "@@ -1,3 +1,39 @@\n+2021-04-30  Tom Tromey  <tromey@adacore.com>\n+\n+\t* windows-nat.c: Move code to nat/windows-nat.[ch].\n+\t(_initialize_windows_nat): Call initialize_loadable.\n+\t* nat/windows-nat.h (AdjustTokenPrivileges)\n+\t(DebugActiveProcessStop, DebugBreakProcess)\n+\t(DebugSetProcessKillOnExit, EnumProcessModules)\n+\t(EnumProcessModulesEx, GetModuleInformation)\n+\t(GetModuleFileNameExA, GetModuleFileNameExW)\n+\t(LookupPrivilegeValueA, OpenProcessToken, GetConsoleFontSize)\n+\t(GetCurrentConsoleFont, Wow64SuspendThread)\n+\t(Wow64GetThreadContext, Wow64SetThreadContext)\n+\t(Wow64GetThreadSelectorEntry): Move from windows-nat.c.\n+\t(AdjustTokenPrivileges_ftype)\n+\t(DebugActiveProcessStop_ftype, DebugBreakProcess_ftype)\n+\t(DebugSetProcessKillOnExit_ftype, EnumProcessModules_ftype)\n+\t(EnumProcessModulesEx_ftype, GetModuleInformation_ftype)\n+\t(GetModuleFileNameExA_ftype, GetModuleFileNameExW_ftype)\n+\t(LookupPrivilegeValueA_ftype, OpenProcessToken_ftype)\n+\t(GetConsoleFontSize_ftype)\n+\t(GetCurrentConsoleFont_ftype, Wow64SuspendThread_ftype)\n+\t(Wow64GetThreadContext_ftype, Wow64SetThreadContext_ftype)\n+\t(Wow64GetThreadSelectorEntry_ftype): Likewise.\n+\t(initialize_loadable): Declare.\n+\t* nat/windows-nat.c (AdjustTokenPrivileges)\n+\t(DebugActiveProcessStop, DebugBreakProcess)\n+\t(DebugSetProcessKillOnExit, EnumProcessModules)\n+\t(EnumProcessModulesEx, GetModuleInformation, GetModuleFileNameExA)\n+\t(GetModuleFileNameExW, LookupPrivilegeValueA, OpenProcessToken)\n+\t(GetCurrentConsoleFont, GetConsoleFontSize, Wow64SuspendThread)\n+\t(Wow64GetThreadContext, Wow64SetThreadContext)\n+\t(Wow64GetThreadSelectorEntry): Define.\n+\t(bad, bad_GetCurrentConsoleFont, bad_GetConsoleFontSize): Move\n+\tfrom windows-nat.c.\n+\t(initialize_loadable): Likewise, and rename.\n+\n 2021-04-30  Tom Tromey  <tromey@adacore.com>\n \n \t* windows-nat.c (bad_GetModuleFileNameEx): Remove define."
    },
    {
      "sha": "fa1ae9597e13bcadb54d11a38ef72e04a04f6707",
      "filename": "gdb/nat/windows-nat.c",
      "status": "modified",
      "additions": 142,
      "deletions": 0,
      "changes": 142,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e439f0098d1dd21d79dff3f030ddcd0b1cb244b/gdb/nat/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e439f0098d1dd21d79dff3f030ddcd0b1cb244b/gdb/nat/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.c?ref=9e439f0098d1dd21d79dff3f030ddcd0b1cb244b",
      "patch": "@@ -45,6 +45,29 @@ bool wow64_process = false;\n bool ignore_first_breakpoint = false;\n #endif\n \n+AdjustTokenPrivileges_ftype *AdjustTokenPrivileges;\n+DebugActiveProcessStop_ftype *DebugActiveProcessStop;\n+DebugBreakProcess_ftype *DebugBreakProcess;\n+DebugSetProcessKillOnExit_ftype *DebugSetProcessKillOnExit;\n+EnumProcessModules_ftype *EnumProcessModules;\n+#ifdef __x86_64__\n+EnumProcessModulesEx_ftype *EnumProcessModulesEx;\n+#endif\n+GetModuleInformation_ftype *GetModuleInformation;\n+GetModuleFileNameExA_ftype *GetModuleFileNameExA;\n+GetModuleFileNameExW_ftype *GetModuleFileNameExW;\n+LookupPrivilegeValueA_ftype *LookupPrivilegeValueA;\n+OpenProcessToken_ftype *OpenProcessToken;\n+GetCurrentConsoleFont_ftype *GetCurrentConsoleFont;\n+GetConsoleFontSize_ftype *GetConsoleFontSize;\n+#ifdef __x86_64__\n+Wow64SuspendThread_ftype *Wow64SuspendThread;\n+Wow64GetThreadContext_ftype *Wow64GetThreadContext;\n+Wow64SetThreadContext_ftype *Wow64SetThreadContext;\n+Wow64GetThreadSelectorEntry_ftype *Wow64GetThreadSelectorEntry;\n+#endif\n+\n+\n /* Note that 'debug_events' must be locally defined in the relevant\n    functions.  */\n #define DEBUG_EVENTS(fmt, ...) \\\n@@ -388,4 +411,123 @@ wait_for_debug_event (DEBUG_EVENT *event, DWORD timeout)\n   return result;\n }\n \n+/* Define dummy functions which always return error for the rare cases where\n+   these functions could not be found.  */\n+template<typename... T>\n+BOOL WINAPI\n+bad (T... args)\n+{\n+  return FALSE;\n+}\n+\n+template<typename... T>\n+DWORD WINAPI\n+bad (T... args)\n+{\n+  return 0;\n+}\n+\n+static BOOL WINAPI\n+bad_GetCurrentConsoleFont (HANDLE w, BOOL bMaxWindow, CONSOLE_FONT_INFO *f)\n+{\n+  f->nFont = 0;\n+  return 1;\n+}\n+\n+static COORD WINAPI\n+bad_GetConsoleFontSize (HANDLE w, DWORD nFont)\n+{\n+  COORD size;\n+  size.X = 8;\n+  size.Y = 12;\n+  return size;\n+}\n+ \n+/* See windows-nat.h.  */\n+\n+bool\n+initialize_loadable ()\n+{\n+  bool result = true;\n+  HMODULE hm = NULL;\n+\n+#define GPA(m, func)\t\t\t\t\t\\\n+  func = (func ## _ftype *) GetProcAddress (m, #func)\n+\n+  hm = LoadLibrary (TEXT (\"kernel32.dll\"));\n+  if (hm)\n+    {\n+      GPA (hm, DebugActiveProcessStop);\n+      GPA (hm, DebugBreakProcess);\n+      GPA (hm, DebugSetProcessKillOnExit);\n+      GPA (hm, GetConsoleFontSize);\n+      GPA (hm, DebugActiveProcessStop);\n+      GPA (hm, GetCurrentConsoleFont);\n+#ifdef __x86_64__\n+      GPA (hm, Wow64SuspendThread);\n+      GPA (hm, Wow64GetThreadContext);\n+      GPA (hm, Wow64SetThreadContext);\n+      GPA (hm, Wow64GetThreadSelectorEntry);\n+#endif\n+    }\n+\n+  /* Set variables to dummy versions of these processes if the function\n+     wasn't found in kernel32.dll.  */\n+  if (!DebugBreakProcess)\n+    DebugBreakProcess = bad;\n+  if (!DebugActiveProcessStop || !DebugSetProcessKillOnExit)\n+    {\n+      DebugActiveProcessStop = bad;\n+      DebugSetProcessKillOnExit = bad;\n+    }\n+  if (!GetConsoleFontSize)\n+    GetConsoleFontSize = bad_GetConsoleFontSize;\n+  if (!GetCurrentConsoleFont)\n+    GetCurrentConsoleFont = bad_GetCurrentConsoleFont;\n+\n+  /* Load optional functions used for retrieving filename information\n+     associated with the currently debugged process or its dlls.  */\n+  hm = LoadLibrary (TEXT (\"psapi.dll\"));\n+  if (hm)\n+    {\n+      GPA (hm, EnumProcessModules);\n+#ifdef __x86_64__\n+      GPA (hm, EnumProcessModulesEx);\n+#endif\n+      GPA (hm, GetModuleInformation);\n+      GPA (hm, GetModuleFileNameExA);\n+      GPA (hm, GetModuleFileNameExW);\n+    }\n+\n+  if (!EnumProcessModules || !GetModuleInformation\n+      || !GetModuleFileNameExA || !GetModuleFileNameExW)\n+    {\n+      /* Set variables to dummy versions of these processes if the function\n+\t wasn't found in psapi.dll.  */\n+      EnumProcessModules = bad;\n+      GetModuleInformation = bad;\n+      GetModuleFileNameExA = bad;\n+      GetModuleFileNameExW = bad;\n+\n+      result = false;\n+    }\n+\n+  hm = LoadLibrary (TEXT (\"advapi32.dll\"));\n+  if (hm)\n+    {\n+      GPA (hm, OpenProcessToken);\n+      GPA (hm, LookupPrivilegeValueA);\n+      GPA (hm, AdjustTokenPrivileges);\n+      /* Only need to set one of these since if OpenProcessToken fails nothing\n+\t else is needed.  */\n+      if (!OpenProcessToken || !LookupPrivilegeValueA\n+\t  || !AdjustTokenPrivileges)\n+\tOpenProcessToken = bad;\n+    }\n+\n+#undef GPA\n+\n+  return result;\n+}\n+\n }"
    },
    {
      "sha": "fafa65dda30657645d02e983fb616404a2aa3c06",
      "filename": "gdb/nat/windows-nat.h",
      "status": "modified",
      "additions": 90,
      "deletions": 0,
      "changes": 90,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e439f0098d1dd21d79dff3f030ddcd0b1cb244b/gdb/nat/windows-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e439f0098d1dd21d79dff3f030ddcd0b1cb244b/gdb/nat/windows-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.h?ref=9e439f0098d1dd21d79dff3f030ddcd0b1cb244b",
      "patch": "@@ -20,6 +20,7 @@\n #define NAT_WINDOWS_NAT_H\n \n #include <windows.h>\n+#include <psapi.h>\n #include <vector>\n \n #include \"gdbsupport/gdb_optional.h\"\n@@ -257,6 +258,95 @@ extern BOOL continue_last_debug_event (DWORD continue_status,\n \n extern BOOL wait_for_debug_event (DEBUG_EVENT *event, DWORD timeout);\n \n+#define AdjustTokenPrivileges\t\tdyn_AdjustTokenPrivileges\n+#define DebugActiveProcessStop\t\tdyn_DebugActiveProcessStop\n+#define DebugBreakProcess\t\tdyn_DebugBreakProcess\n+#define DebugSetProcessKillOnExit\tdyn_DebugSetProcessKillOnExit\n+#define EnumProcessModules\t\tdyn_EnumProcessModules\n+#define EnumProcessModulesEx\t\tdyn_EnumProcessModulesEx\n+#define GetModuleInformation\t\tdyn_GetModuleInformation\n+#define GetModuleFileNameExA\t\tdyn_GetModuleFileNameExA\n+#define GetModuleFileNameExW\t\tdyn_GetModuleFileNameExW\n+#define LookupPrivilegeValueA\t\tdyn_LookupPrivilegeValueA\n+#define OpenProcessToken\t\tdyn_OpenProcessToken\n+#define GetConsoleFontSize\t\tdyn_GetConsoleFontSize\n+#define GetCurrentConsoleFont\t\tdyn_GetCurrentConsoleFont\n+#define Wow64SuspendThread\t\tdyn_Wow64SuspendThread\n+#define Wow64GetThreadContext\t\tdyn_Wow64GetThreadContext\n+#define Wow64SetThreadContext\t\tdyn_Wow64SetThreadContext\n+#define Wow64GetThreadSelectorEntry\tdyn_Wow64GetThreadSelectorEntry\n+\n+typedef BOOL WINAPI (AdjustTokenPrivileges_ftype) (HANDLE, BOOL,\n+\t\t\t\t\t\t   PTOKEN_PRIVILEGES,\n+\t\t\t\t\t\t   DWORD, PTOKEN_PRIVILEGES,\n+\t\t\t\t\t\t   PDWORD);\n+extern AdjustTokenPrivileges_ftype *AdjustTokenPrivileges;\n+\n+typedef BOOL WINAPI (DebugActiveProcessStop_ftype) (DWORD);\n+extern DebugActiveProcessStop_ftype *DebugActiveProcessStop;\n+\n+typedef BOOL WINAPI (DebugBreakProcess_ftype) (HANDLE);\n+extern DebugBreakProcess_ftype *DebugBreakProcess;\n+\n+typedef BOOL WINAPI (DebugSetProcessKillOnExit_ftype) (BOOL);\n+extern DebugSetProcessKillOnExit_ftype *DebugSetProcessKillOnExit;\n+\n+typedef BOOL WINAPI (EnumProcessModules_ftype) (HANDLE, HMODULE *, DWORD,\n+\t\t\t\t\t\tLPDWORD);\n+extern EnumProcessModules_ftype *EnumProcessModules;\n+\n+#ifdef __x86_64__\n+typedef BOOL WINAPI (EnumProcessModulesEx_ftype) (HANDLE, HMODULE *, DWORD,\n+\t\t\t\t\t\t  LPDWORD, DWORD);\n+extern EnumProcessModulesEx_ftype *EnumProcessModulesEx;\n+#endif\n+\n+typedef BOOL WINAPI (GetModuleInformation_ftype) (HANDLE, HMODULE,\n+\t\t\t\t\t\t  LPMODULEINFO, DWORD);\n+extern GetModuleInformation_ftype *GetModuleInformation;\n+\n+typedef DWORD WINAPI (GetModuleFileNameExA_ftype) (HANDLE, HMODULE, LPSTR,\n+\t\t\t\t\t\t  DWORD);\n+extern GetModuleFileNameExA_ftype *GetModuleFileNameExA;\n+\n+typedef DWORD WINAPI (GetModuleFileNameExW_ftype) (HANDLE, HMODULE,\n+\t\t\t\t\t\t   LPWSTR, DWORD);\n+extern GetModuleFileNameExW_ftype *GetModuleFileNameExW;\n+\n+typedef BOOL WINAPI (LookupPrivilegeValueA_ftype) (LPCSTR, LPCSTR, PLUID);\n+extern LookupPrivilegeValueA_ftype *LookupPrivilegeValueA;\n+\n+typedef BOOL WINAPI (OpenProcessToken_ftype) (HANDLE, DWORD, PHANDLE);\n+extern OpenProcessToken_ftype *OpenProcessToken;\n+\n+typedef BOOL WINAPI (GetCurrentConsoleFont_ftype) (HANDLE, BOOL,\n+\t\t\t\t\t\t   CONSOLE_FONT_INFO *);\n+extern GetCurrentConsoleFont_ftype *GetCurrentConsoleFont;\n+\n+typedef COORD WINAPI (GetConsoleFontSize_ftype) (HANDLE, DWORD);\n+extern GetConsoleFontSize_ftype *GetConsoleFontSize;\n+\n+#ifdef __x86_64__\n+typedef DWORD WINAPI (Wow64SuspendThread_ftype) (HANDLE);\n+extern Wow64SuspendThread_ftype *Wow64SuspendThread;\n+\n+typedef BOOL WINAPI (Wow64GetThreadContext_ftype) (HANDLE, PWOW64_CONTEXT);\n+extern Wow64GetThreadContext_ftype *Wow64GetThreadContext;\n+\n+typedef BOOL WINAPI (Wow64SetThreadContext_ftype) (HANDLE,\n+\t\t\t\t\t\t   const WOW64_CONTEXT *);\n+extern Wow64SetThreadContext_ftype *Wow64SetThreadContext;\n+\n+typedef BOOL WINAPI (Wow64GetThreadSelectorEntry_ftype) (HANDLE, DWORD,\n+\t\t\t\t\t\t\t PLDT_ENTRY);\n+extern Wow64GetThreadSelectorEntry_ftype *Wow64GetThreadSelectorEntry;\n+#endif\n+\n+/* Load any functions which may not be available in ancient versions\n+   of Windows.  */\n+\n+extern bool initialize_loadable ();\n+\n }\n \n #endif"
    },
    {
      "sha": "471d8fca99ae344396bfffc6fb012f493d22becb",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 11,
      "deletions": 201,
      "changes": 212,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e439f0098d1dd21d79dff3f030ddcd0b1cb244b/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e439f0098d1dd21d79dff3f030ddcd0b1cb244b/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=9e439f0098d1dd21d79dff3f030ddcd0b1cb244b",
      "patch": "@@ -36,7 +36,6 @@\n #include <fcntl.h>\n #include <windows.h>\n #include <imagehlp.h>\n-#include <psapi.h>\n #ifdef __CYGWIN__\n #include <wchar.h>\n #include <sys/cygwin.h>\n@@ -75,104 +74,25 @@\n \n using namespace windows_nat;\n \n-#define AdjustTokenPrivileges\t\tdyn_AdjustTokenPrivileges\n-#define DebugActiveProcessStop\t\tdyn_DebugActiveProcessStop\n-#define DebugBreakProcess\t\tdyn_DebugBreakProcess\n-#define DebugSetProcessKillOnExit\tdyn_DebugSetProcessKillOnExit\n-#define EnumProcessModules\t\tdyn_EnumProcessModules\n-#define EnumProcessModulesEx\t\tdyn_EnumProcessModulesEx\n-#define GetModuleInformation\t\tdyn_GetModuleInformation\n-#define LookupPrivilegeValueA\t\tdyn_LookupPrivilegeValueA\n-#define OpenProcessToken\t\tdyn_OpenProcessToken\n-#define GetConsoleFontSize\t\tdyn_GetConsoleFontSize\n-#define GetCurrentConsoleFont\t\tdyn_GetCurrentConsoleFont\n-#define Wow64SuspendThread\t\tdyn_Wow64SuspendThread\n-#define Wow64GetThreadContext\t\tdyn_Wow64GetThreadContext\n-#define Wow64SetThreadContext\t\tdyn_Wow64SetThreadContext\n-#define Wow64GetThreadSelectorEntry\tdyn_Wow64GetThreadSelectorEntry\n-\n-typedef BOOL WINAPI (AdjustTokenPrivileges_ftype) (HANDLE, BOOL,\n-\t\t\t\t\t\t   PTOKEN_PRIVILEGES,\n-\t\t\t\t\t\t   DWORD, PTOKEN_PRIVILEGES,\n-\t\t\t\t\t\t   PDWORD);\n-static AdjustTokenPrivileges_ftype *AdjustTokenPrivileges;\n-\n-typedef BOOL WINAPI (DebugActiveProcessStop_ftype) (DWORD);\n-static DebugActiveProcessStop_ftype *DebugActiveProcessStop;\n-\n-typedef BOOL WINAPI (DebugBreakProcess_ftype) (HANDLE);\n-static DebugBreakProcess_ftype *DebugBreakProcess;\n-\n-typedef BOOL WINAPI (DebugSetProcessKillOnExit_ftype) (BOOL);\n-static DebugSetProcessKillOnExit_ftype *DebugSetProcessKillOnExit;\n-\n-typedef BOOL WINAPI (EnumProcessModules_ftype) (HANDLE, HMODULE *, DWORD,\n-\t\t\t\t\t\tLPDWORD);\n-static EnumProcessModules_ftype *EnumProcessModules;\n-\n-#ifdef __x86_64__\n-typedef BOOL WINAPI (EnumProcessModulesEx_ftype) (HANDLE, HMODULE *, DWORD,\n-\t\t\t\t\t\t  LPDWORD, DWORD);\n-static EnumProcessModulesEx_ftype *EnumProcessModulesEx;\n-#endif\n-\n-typedef BOOL WINAPI (GetModuleInformation_ftype) (HANDLE, HMODULE,\n-\t\t\t\t\t\t  LPMODULEINFO, DWORD);\n-static GetModuleInformation_ftype *GetModuleInformation;\n-\n-typedef BOOL WINAPI (LookupPrivilegeValueA_ftype) (LPCSTR, LPCSTR, PLUID);\n-static LookupPrivilegeValueA_ftype *LookupPrivilegeValueA;\n-\n-typedef BOOL WINAPI (OpenProcessToken_ftype) (HANDLE, DWORD, PHANDLE);\n-static OpenProcessToken_ftype *OpenProcessToken;\n-\n-typedef BOOL WINAPI (GetCurrentConsoleFont_ftype) (HANDLE, BOOL,\n-\t\t\t\t\t\t   CONSOLE_FONT_INFO *);\n-static GetCurrentConsoleFont_ftype *GetCurrentConsoleFont;\n-\n-typedef COORD WINAPI (GetConsoleFontSize_ftype) (HANDLE, DWORD);\n-static GetConsoleFontSize_ftype *GetConsoleFontSize;\n-\n-#ifdef __x86_64__\n-typedef DWORD WINAPI (Wow64SuspendThread_ftype) (HANDLE);\n-static Wow64SuspendThread_ftype *Wow64SuspendThread;\n-\n-typedef BOOL WINAPI (Wow64GetThreadContext_ftype) (HANDLE, PWOW64_CONTEXT);\n-static Wow64GetThreadContext_ftype *Wow64GetThreadContext;\n-\n-typedef BOOL WINAPI (Wow64SetThreadContext_ftype) (HANDLE,\n-\t\t\t\t\t\t   const WOW64_CONTEXT *);\n-static Wow64SetThreadContext_ftype *Wow64SetThreadContext;\n-\n-typedef BOOL WINAPI (Wow64GetThreadSelectorEntry_ftype) (HANDLE, DWORD,\n-\t\t\t\t\t\t\t PLDT_ENTRY);\n-static Wow64GetThreadSelectorEntry_ftype *Wow64GetThreadSelectorEntry;\n-#endif\n-\n #undef STARTUPINFO\n #undef CreateProcess\n #undef GetModuleFileNameEx\n \n #ifndef __CYGWIN__\n # define __PMAX\t(MAX_PATH + 1)\n-  typedef DWORD WINAPI (GetModuleFileNameEx_ftype) (HANDLE, HMODULE, LPSTR, DWORD);\n-  static GetModuleFileNameEx_ftype *GetModuleFileNameEx;\n+# define GetModuleFileNameEx GetModuleFileNameExA\n # define STARTUPINFO STARTUPINFOA\n # define CreateProcess CreateProcessA\n-# define GetModuleFileNameEx_name \"GetModuleFileNameExA\"\n #else\n # define __PMAX\tPATH_MAX\n /* The starting and ending address of the cygwin1.dll text segment.  */\n   static CORE_ADDR cygwin_load_start;\n   static CORE_ADDR cygwin_load_end;\n #   define __USEWIDE\n     typedef wchar_t cygwin_buf_t;\n-    typedef DWORD WINAPI (GetModuleFileNameEx_ftype) (HANDLE, HMODULE,\n-\t\t\t\t\t\t      LPWSTR, DWORD);\n-    static GetModuleFileNameEx_ftype *GetModuleFileNameEx;\n+#   define GetModuleFileNameEx GetModuleFileNameExW\n #   define STARTUPINFO STARTUPINFOW\n #   define CreateProcess CreateProcessW\n-#   define GetModuleFileNameEx_name \"GetModuleFileNameExW\"\n #endif\n \n static int have_saved_context;\t/* True if we've saved context from a\n@@ -3430,6 +3350,15 @@ Show whether to display kernel exceptions in child process.\"), NULL,\n   add_cmd (\"selector\", class_info, display_selectors,\n \t   _(\"Display selectors infos.\"),\n \t   &info_w32_cmdlist);\n+\n+  if (!initialize_loadable ())\n+    {\n+      /* This will probably fail on Windows 9x/Me.  Let the user know\n+\t that we're missing some functionality.  */\n+      warning(_(\"\\\n+cannot automatically find executable file or library to read symbols.\\n\\\n+Use \\\"file\\\" or \\\"dll\\\" command to load executable/libraries directly.\"));\n+    }\n }\n \n /* Hardware watchpoint support, adapted from go32-nat.c code.  */\n@@ -3529,122 +3458,3 @@ _initialize_check_for_gdb_ini ()\n \t}\n     }\n }\n-\n-/* Define dummy functions which always return error for the rare cases where\n-   these functions could not be found.  */\n-template<typename... T>\n-BOOL WINAPI\n-bad (T... args)\n-{\n-  return FALSE;\n-}\n-\n-template<typename... T>\n-DWORD WINAPI\n-bad (T... args)\n-{\n-  return 0;\n-}\n-\n-static BOOL WINAPI\n-bad_GetCurrentConsoleFont (HANDLE w, BOOL bMaxWindow, CONSOLE_FONT_INFO *f)\n-{\n-  f->nFont = 0;\n-  return 1;\n-}\n-\n-static COORD WINAPI\n-bad_GetConsoleFontSize (HANDLE w, DWORD nFont)\n-{\n-  COORD size;\n-  size.X = 8;\n-  size.Y = 12;\n-  return size;\n-}\n- \n-/* Load any functions which may not be available in ancient versions\n-   of Windows.  */\n-\n-void _initialize_loadable ();\n-void\n-_initialize_loadable ()\n-{\n-  HMODULE hm = NULL;\n-\n-#define GPA(m, func)\t\t\t\t\t\\\n-  func = (func ## _ftype *) GetProcAddress (m, #func)\n-\n-  hm = LoadLibrary (\"kernel32.dll\");\n-  if (hm)\n-    {\n-      GPA (hm, DebugActiveProcessStop);\n-      GPA (hm, DebugBreakProcess);\n-      GPA (hm, DebugSetProcessKillOnExit);\n-      GPA (hm, GetConsoleFontSize);\n-      GPA (hm, DebugActiveProcessStop);\n-      GPA (hm, GetCurrentConsoleFont);\n-#ifdef __x86_64__\n-      GPA (hm, Wow64SuspendThread);\n-      GPA (hm, Wow64GetThreadContext);\n-      GPA (hm, Wow64SetThreadContext);\n-      GPA (hm, Wow64GetThreadSelectorEntry);\n-#endif\n-    }\n-\n-  /* Set variables to dummy versions of these processes if the function\n-     wasn't found in kernel32.dll.  */\n-  if (!DebugBreakProcess)\n-    DebugBreakProcess = bad;\n-  if (!DebugActiveProcessStop || !DebugSetProcessKillOnExit)\n-    {\n-      DebugActiveProcessStop = bad;\n-      DebugSetProcessKillOnExit = bad;\n-    }\n-  if (!GetConsoleFontSize)\n-    GetConsoleFontSize = bad_GetConsoleFontSize;\n-  if (!GetCurrentConsoleFont)\n-    GetCurrentConsoleFont = bad_GetCurrentConsoleFont;\n-\n-  /* Load optional functions used for retrieving filename information\n-     associated with the currently debugged process or its dlls.  */\n-  hm = LoadLibrary (\"psapi.dll\");\n-  if (hm)\n-    {\n-      GPA (hm, EnumProcessModules);\n-#ifdef __x86_64__\n-      GPA (hm, EnumProcessModulesEx);\n-#endif\n-      GPA (hm, GetModuleInformation);\n-      GetModuleFileNameEx = (GetModuleFileNameEx_ftype *)\n-\tGetProcAddress (hm, GetModuleFileNameEx_name);\n-    }\n-\n-  if (!EnumProcessModules || !GetModuleInformation || !GetModuleFileNameEx)\n-    {\n-      /* Set variables to dummy versions of these processes if the function\n-\t wasn't found in psapi.dll.  */\n-      EnumProcessModules = bad;\n-      GetModuleInformation = bad;\n-      GetModuleFileNameEx = bad;\n-      /* This will probably fail on Windows 9x/Me.  Let the user know\n-\t that we're missing some functionality.  */\n-      warning(_(\"\\\n-cannot automatically find executable file or library to read symbols.\\n\\\n-Use \\\"file\\\" or \\\"dll\\\" command to load executable/libraries directly.\"));\n-    }\n-\n-  hm = LoadLibrary (\"advapi32.dll\");\n-  if (hm)\n-    {\n-      GPA (hm, OpenProcessToken);\n-      GPA (hm, LookupPrivilegeValueA);\n-      GPA (hm, AdjustTokenPrivileges);\n-      /* Only need to set one of these since if OpenProcessToken fails nothing\n-\t else is needed.  */\n-      if (!OpenProcessToken || !LookupPrivilegeValueA\n-\t  || !AdjustTokenPrivileges)\n-\tOpenProcessToken = bad;\n-    }\n-\n-#undef GPA\n-}"
    }
  ]
}