{
  "sha": "a8baf0a32b8f8fe151762c6c0136fef4bae2facd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YThiYWYwYTMyYjhmOGZlMTUxNzYyYzZjMDEzNmZlZjRiYWUyZmFjZA==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-06-11T12:10:05Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-06-11T12:10:05Z"
    },
    "message": "[gdb/testsuite] Make gdb.base/dbx.exp more robust\n\nTest-case gdb.base/dbx.exp overrides:\n- the GDBFLAGS variable\n- the gdb_file_cmd proc\n\nThere's code at the end of the test-case to restore both, but that's not\nguaranteed to be executed.\n\nFix this by:\n- using save_vars to restore GDBFLAGS\n- using a new proc with_override to restore gdb_file_cmd\n\nTested on x86_64-linux.\n\ngdb/testsuite/ChangeLog:\n\n2020-06-11  Tom de Vries  <tdevries@suse.de>\n\n\t* lib/gdb.exp (with_override): New proc, factored out of ...\n\t* gdb.base/dbx.exp: ... here.  Use with_override and save_vars.",
    "tree": {
      "sha": "b47647ab8cf287aec9c59115234a340e121d22bd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b47647ab8cf287aec9c59115234a340e121d22bd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a8baf0a32b8f8fe151762c6c0136fef4bae2facd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8baf0a32b8f8fe151762c6c0136fef4bae2facd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a8baf0a32b8f8fe151762c6c0136fef4bae2facd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a8baf0a32b8f8fe151762c6c0136fef4bae2facd/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "14962256b310efddf677ff4f5c9fa41047f48c39",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14962256b310efddf677ff4f5c9fa41047f48c39",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/14962256b310efddf677ff4f5c9fa41047f48c39"
    }
  ],
  "stats": {
    "total": 83,
    "additions": 64,
    "deletions": 19
  },
  "files": [
    {
      "sha": "e0fece65a00b7cc8a6617d3023d1b4aef225a30a",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8baf0a32b8f8fe151762c6c0136fef4bae2facd/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8baf0a32b8f8fe151762c6c0136fef4bae2facd/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=a8baf0a32b8f8fe151762c6c0136fef4bae2facd",
      "patch": "@@ -1,3 +1,8 @@\n+2020-06-11  Tom de Vries  <tdevries@suse.de>\n+\n+\t* lib/gdb.exp (with_override): New proc, factored out of ...\n+\t* gdb.base/dbx.exp: ... here.  Use with_override and save_vars.\n+\n 2020-06-10  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.ada/ptype_union.exp: Remove PR24713 workaround."
    },
    {
      "sha": "2a53f99a28daff98f616306ad5844229b289adbd",
      "filename": "gdb/testsuite/gdb.base/dbx.exp",
      "status": "modified",
      "additions": 16,
      "deletions": 19,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8baf0a32b8f8fe151762c6c0136fef4bae2facd/gdb/testsuite/gdb.base/dbx.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8baf0a32b8f8fe151762c6c0136fef4bae2facd/gdb/testsuite/gdb.base/dbx.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/dbx.exp?ref=a8baf0a32b8f8fe151762c6c0136fef4bae2facd",
      "patch": "@@ -147,11 +147,8 @@ proc dbx_reinitialize_dir { subdir } {\n # right sequence of events, allowing gdb_load to do its normal thing? This way\n # remotes and simulators will work, too.\n #\n-# [drow 2002-03-30]: We can restore the old gdb_file_cmd afterwards, though.\n-set old_gdb_file_cmd_args [info args gdb_file_cmd]\n-set old_gdb_file_cmd_body [info body gdb_file_cmd]\n \n-proc gdb_file_cmd {arg} {\n+proc local_gdb_file_cmd {arg} {\n     global loadpath\n     global loadfile\n     global GDB\n@@ -286,24 +283,24 @@ proc test_func { } {\n # Start with a fresh gdb.\n \n gdb_exit\n-global GDBFLAGS\n-set saved_gdbflags $GDBFLAGS\n \n-set GDBFLAGS \"$GDBFLAGS --dbx\"\n-gdb_start\n-dbx_reinitialize_dir $srcdir/$subdir\n-gdb_load ${binfile}\n+with_override gdb_file_cmd local_gdb_file_cmd {\n+    save_vars GDBFLAGS {\n+\tset GDBFLAGS \"$GDBFLAGS --dbx\"\n \n-test_breakpoints\n-test_assign\n-test_whereis\n-gdb_test \"file average.c:1\" \"1\\[ \\t\\]+/. This is a sample program.*\"\n-test_func\n+\tgdb_start\n+\tdbx_reinitialize_dir $srcdir/$subdir\n+\tgdb_load ${binfile}\n \n-#exit and cleanup\n-gdb_exit\n+\ttest_breakpoints\n+\ttest_assign\n+\ttest_whereis\n+\tgdb_test \"file average.c:1\" \"1\\[ \\t\\]+/. This is a sample program.*\"\n+\ttest_func\n \n-set GDBFLAGS $saved_gdbflags\n-eval proc gdb_file_cmd {$old_gdb_file_cmd_args} {$old_gdb_file_cmd_body}\n+\t#exit and cleanup\n+\tgdb_exit\n+    }\n+}\n \n return 0"
    },
    {
      "sha": "51f8a05464566387239f6fc64d772c7d957f968e",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a8baf0a32b8f8fe151762c6c0136fef4bae2facd/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a8baf0a32b8f8fe151762c6c0136fef4bae2facd/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=a8baf0a32b8f8fe151762c6c0136fef4bae2facd",
      "patch": "@@ -7200,5 +7200,48 @@ proc hex_in_list { val hexlist } {\n     return [expr $index != -1]\n }\n \n+# Override proc NAME to proc OVERRIDE for the duration of the execution of\n+# BODY.\n+\n+proc with_override { name override body } {\n+    # Implementation note: It's possible to implement the override using\n+    # rename, like this:\n+    #   rename $name save_$name\n+    #   rename $override $name\n+    #   set code [catch {uplevel 1 $body} result]\n+    #   rename $name $override\n+    #   rename save_$name $name\n+    # but there are two issues here:\n+    # - the save_$name might clash with an existing proc\n+    # - the override is no longer available under its original name during\n+    #   the override\n+    # So, we use this more elaborate but cleaner mechanism.\n+\n+    # Save the old proc.\n+    set old_args [info args $name]\n+    set old_body [info body $name]\n+\n+    # Install the override.\n+    set new_args [info args $override]\n+    set new_body [info body $override]\n+    eval proc $name {$new_args} {$new_body}\n+\n+    # Execute body.\n+    set code [catch {uplevel 1 $body} result]\n+\n+    # Restore old proc.\n+    eval proc $name {$old_args} {$old_body}\n+\n+    # Return as appropriate.\n+    if { $code == 1 } {\n+        global errorInfo errorCode\n+        return -code error -errorinfo $errorInfo -errorcode $errorCode $result\n+    } elseif { $code > 1 } {\n+        return -code $code $result\n+    }\n+\n+    return $result\n+}\n+\n # Always load compatibility stuff.\n load_lib future.exp"
    }
  ]
}