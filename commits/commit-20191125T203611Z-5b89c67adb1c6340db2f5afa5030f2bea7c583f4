{
  "sha": "5b89c67adb1c6340db2f5afa5030f2bea7c583f4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWI4OWM2N2FkYjFjNjM0MGRiMmY1YWZhNTAzMGYyYmVhN2M1ODNmNA==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-11-15T22:04:33Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-11-25T20:36:11Z"
    },
    "message": "Replace int with bool in solib.c\n\nThis does not touch \"int from_tty\" and a couple of other instances\nthat require a bigger change.\n\ngdb/ChangeLog:\n\n2019-11-25  Christian Biesinger  <cbiesinger@google.com>\n\n\t* solib.c (solib_find_1): Change int to bool.\n\t(exec_file_find): Change int to bool.\n\t(solib_find): Change int to bool.\n\t(solib_read_symbols): Change int to bool.\n\t(solib_used): Change int to bool.\n\t(solib_add): Change int to bool.\n\t(info_sharedlibrary_command): Change int to bool.\n\t(solib_contains_address_p): Change int to bool.\n\t(solib_keep_data_in_core): Change int to bool.\n\t(in_solib_dynsym_resolve_code): Change int to bool.\n\t(reload_shared_libraries_1): Change int to bool.\n\t(gdb_sysroot_changed): Change int to bool.\n\t* solib.h (solib_read_symbols): Change int to bool.\n\t(solib_contains_address_p): Change int to bool.\n\t(solib_keep_data_in_core): Change int to bool.\n\t(in_solib_dynsym_resolve_code): Change int to bool.\n\t(libpthread_name_p): Change int to bool.\n\nChange-Id: Id695ed4ed0c3526af477d4d2bf585a7193c36cab",
    "tree": {
      "sha": "c5d4b27a67d7203896a41bdc15ba407180ef65b8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c5d4b27a67d7203896a41bdc15ba407180ef65b8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5b89c67adb1c6340db2f5afa5030f2bea7c583f4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b89c67adb1c6340db2f5afa5030f2bea7c583f4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5b89c67adb1c6340db2f5afa5030f2bea7c583f4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b89c67adb1c6340db2f5afa5030f2bea7c583f4/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0a821c4f6de9b902fd663fb23ee187b9adf4f7c4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0a821c4f6de9b902fd663fb23ee187b9adf4f7c4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0a821c4f6de9b902fd663fb23ee187b9adf4f7c4"
    }
  ],
  "stats": {
    "total": 120,
    "additions": 67,
    "deletions": 53
  },
  "files": [
    {
      "sha": "440edfff2f828bb51a4fdce18bd55638ed15dc90",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b89c67adb1c6340db2f5afa5030f2bea7c583f4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b89c67adb1c6340db2f5afa5030f2bea7c583f4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5b89c67adb1c6340db2f5afa5030f2bea7c583f4",
      "patch": "@@ -1,3 +1,23 @@\n+2019-11-25  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* solib.c (solib_find_1): Change int to bool.\n+\t(exec_file_find): Change int to bool.\n+\t(solib_find): Change int to bool.\n+\t(solib_read_symbols): Change int to bool.\n+\t(solib_used): Change int to bool.\n+\t(solib_add): Change int to bool.\n+\t(info_sharedlibrary_command): Change int to bool.\n+\t(solib_contains_address_p): Change int to bool.\n+\t(solib_keep_data_in_core): Change int to bool.\n+\t(in_solib_dynsym_resolve_code): Change int to bool.\n+\t(reload_shared_libraries_1): Change int to bool.\n+\t(gdb_sysroot_changed): Change int to bool.\n+\t* solib.h (solib_read_symbols): Change int to bool.\n+\t(solib_contains_address_p): Change int to bool.\n+\t(solib_keep_data_in_core): Change int to bool.\n+\t(in_solib_dynsym_resolve_code): Change int to bool.\n+\t(libpthread_name_p): Change int to bool.\n+\n 2019-11-25  Luis Machado  <luis.machado@linaro.org>\n \n \t* NEWS (New Commands): Mention \"set debug remote-packet-max-chars\"."
    },
    {
      "sha": "548367060a8a3f049adf836c3f59947a1ae06376",
      "filename": "gdb/solib.c",
      "status": "modified",
      "additions": 39,
      "deletions": 45,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b89c67adb1c6340db2f5afa5030f2bea7c583f4/gdb/solib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b89c67adb1c6340db2f5afa5030f2bea7c583f4/gdb/solib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.c?ref=5b89c67adb1c6340db2f5afa5030f2bea7c583f4",
      "patch": "@@ -149,7 +149,7 @@ show_solib_search_path (struct ui_file *file, int from_tty,\n */\n \n static gdb::unique_xmalloc_ptr<char>\n-solib_find_1 (const char *in_pathname, int *fd, int is_solib)\n+solib_find_1 (const char *in_pathname, int *fd, bool is_solib)\n {\n   const struct target_so_ops *ops = solib_ops (target_gdbarch ());\n   int found_file = -1;\n@@ -218,7 +218,7 @@ solib_find_1 (const char *in_pathname, int *fd, int is_solib)\n     temp_pathname.reset (xstrdup (in_pathname));\n   else\n     {\n-      int need_dir_separator;\n+      bool need_dir_separator;\n \n       /* Concatenate the sysroot and the target reported filename.  We\n \t may need to glue them with a directory separator.  Cases to\n@@ -266,7 +266,7 @@ solib_find_1 (const char *in_pathname, int *fd, int is_solib)\n       && sysroot != NULL\n       && HAS_TARGET_DRIVE_SPEC (fskind, in_pathname))\n     {\n-      int need_dir_separator = !IS_DIR_SEPARATOR (in_pathname[2]);\n+      bool need_dir_separator = !IS_DIR_SEPARATOR (in_pathname[2]);\n       char drive[2] = { in_pathname[0], '\\0' };\n \n       temp_pathname.reset (concat (sysroot,\n@@ -380,7 +380,7 @@ exec_file_find (const char *in_pathname, int *fd)\n \n   if (*gdb_sysroot != '\\0' && IS_TARGET_ABSOLUTE_PATH (fskind, in_pathname))\n     {\n-      result = solib_find_1 (in_pathname, fd, 0);\n+      result = solib_find_1 (in_pathname, fd, false);\n \n       if (result == NULL && fskind == file_system_kind_dos_based)\n \t{\n@@ -390,7 +390,7 @@ exec_file_find (const char *in_pathname, int *fd)\n \t  strcpy (new_pathname, in_pathname);\n \t  strcat (new_pathname, \".exe\");\n \n-\t  result = solib_find_1 (new_pathname, fd, 0);\n+\t  result = solib_find_1 (new_pathname, fd, false);\n \t}\n     }\n   else\n@@ -449,7 +449,7 @@ solib_find (const char *in_pathname, int *fd)\n \t}\n     }\n \n-  return solib_find_1 (in_pathname, fd, 1);\n+  return solib_find_1 (in_pathname, fd, true);\n }\n \n /* Open and return a BFD for the shared library PATHNAME.  If FD is not -1,\n@@ -655,10 +655,9 @@ master_so_list (void)\n }\n \n /* Read in symbols for shared object SO.  If SYMFILE_VERBOSE is set in FLAGS,\n-   be chatty about it.  Return non-zero if any symbols were actually\n-   loaded.  */\n+   be chatty about it.  Return true if any symbols were actually loaded.  */\n \n-int\n+bool\n solib_read_symbols (struct so_list *so, symfile_add_flags flags)\n {\n   if (so->symbols_loaded)\n@@ -708,24 +707,24 @@ solib_read_symbols (struct so_list *so, symfile_add_flags flags)\n \t\t\t     so->so_name);\n \t}\n \n-      return 1;\n+      return true;\n     }\n \n-  return 0;\n+  return false;\n }\n \n-/* Return 1 if KNOWN->objfile is used by any other so_list object in the\n-   SO_LIST_HEAD list.  Return 0 otherwise.  */\n+/* Return true if KNOWN->objfile is used by any other so_list object in the\n+   SO_LIST_HEAD list.  Return false otherwise.  */\n \n-static int\n+static bool\n solib_used (const struct so_list *const known)\n {\n   const struct so_list *pivot;\n \n   for (pivot = so_list_head; pivot != NULL; pivot = pivot->next)\n     if (pivot != known && pivot->objfile == known->objfile)\n-      return 1;\n-  return 0;\n+      return true;\n+  return false;\n }\n \n /* See solib.h.  */\n@@ -918,15 +917,15 @@ Do you need \\\"set solib-search-path\\\" or \\\"set sysroot\\\"?\"),\n    the file name against \"/libpthread\".  This can lead to false\n    positives, but this should be good enough in practice.  */\n \n-int\n+bool\n libpthread_name_p (const char *name)\n {\n   return (strstr (name, \"/libpthread\") != NULL);\n }\n \n /* Return non-zero if SO is the libpthread shared library.  */\n \n-static int\n+static bool\n libpthread_solib_p (struct so_list *so)\n {\n   return libpthread_name_p (so->so_name);\n@@ -973,8 +972,8 @@ solib_add (const char *pattern, int from_tty, int readsyms)\n      symbols for any that match the pattern --- or any whose symbols\n      aren't already loaded, if no pattern was given.  */\n   {\n-    int any_matches = 0;\n-    int loaded_any_symbols = 0;\n+    bool any_matches = false;\n+    bool loaded_any_symbols = false;\n     symfile_add_flags add_flags = SYMFILE_DEFER_BP_RESET;\n \n     if (from_tty)\n@@ -991,7 +990,7 @@ solib_add (const char *pattern, int from_tty, int readsyms)\n           const int add_this_solib =\n             (readsyms || libpthread_solib_p (gdb));\n \n-\t  any_matches = 1;\n+\t  any_matches = true;\n \t  if (add_this_solib)\n \t    {\n \t      if (gdb->symbols_loaded)\n@@ -1003,7 +1002,7 @@ solib_add (const char *pattern, int from_tty, int readsyms)\n \t\t\t\t       gdb->so_name);\n \t\t}\n \t      else if (solib_read_symbols (gdb, add_flags))\n-\t\tloaded_any_symbols = 1;\n+\t\tloaded_any_symbols = true;\n \t    }\n \t}\n \n@@ -1032,7 +1031,7 @@ static void\n info_sharedlibrary_command (const char *pattern, int from_tty)\n {\n   struct so_list *so = NULL;\t/* link map state variable */\n-  int so_missing_debug_info = 0;\n+  bool so_missing_debug_info = false;\n   int addr_width;\n   int nr_libs;\n   struct gdbarch *gdbarch = target_gdbarch ();\n@@ -1099,7 +1098,7 @@ info_sharedlibrary_command (const char *pattern, int from_tty)\n \t    && so->symbols_loaded\n \t    && !objfile_has_symbols (so->objfile))\n \t  {\n-\t    so_missing_debug_info = 1;\n+\t    so_missing_debug_info = true;\n \t    uiout->field_string (\"syms-read\", \"Yes (*)\");\n \t  }\n \telse\n@@ -1126,19 +1125,19 @@ info_sharedlibrary_command (const char *pattern, int from_tty)\n     }\n }\n \n-/* Return 1 if ADDRESS lies within SOLIB.  */\n+/* See solib.h.  */\n \n-int\n+bool\n solib_contains_address_p (const struct so_list *const solib,\n \t\t\t  CORE_ADDR address)\n {\n   struct target_section *p;\n \n   for (p = solib->sections; p < solib->sections_end; p++)\n     if (p->addr <= address && address < p->endaddr)\n-      return 1;\n+      return true;\n \n-  return 0;\n+  return false;\n }\n \n /* If ADDRESS is in a shared lib in program space PSPACE, return its\n@@ -1164,21 +1163,17 @@ solib_name_from_address (struct program_space *pspace, CORE_ADDR address)\n   return (0);\n }\n \n-/* Return whether the data starting at VADDR, size SIZE, must be kept\n-   in a core file for shared libraries loaded before \"gcore\" is used\n-   to be handled correctly when the core file is loaded.  This only\n-   applies when the section would otherwise not be kept in the core\n-   file (in particular, for readonly sections).  */\n+/* See solib.h.  */\n \n-int\n+bool\n solib_keep_data_in_core (CORE_ADDR vaddr, unsigned long size)\n {\n   const struct target_so_ops *ops = solib_ops (target_gdbarch ());\n \n   if (ops->keep_data_in_core)\n-    return ops->keep_data_in_core (vaddr, size);\n+    return ops->keep_data_in_core (vaddr, size) != 0;\n   else\n-    return 0;\n+    return false;\n }\n \n /* Called by free_all_symtabs */\n@@ -1216,15 +1211,14 @@ solib_create_inferior_hook (int from_tty)\n   ops->solib_create_inferior_hook (from_tty);\n }\n \n-/* Check to see if an address is in the dynamic loader's dynamic\n-   symbol resolution code.  Return 1 if so, 0 otherwise.  */\n+/* See solib.h.  */\n \n-int\n+bool\n in_solib_dynsym_resolve_code (CORE_ADDR pc)\n {\n   const struct target_so_ops *ops = solib_ops (target_gdbarch ());\n \n-  return ops->in_dynsym_resolve_code (pc);\n+  return ops->in_dynsym_resolve_code (pc) != 0;\n }\n \n /* Implements the \"sharedlibrary\" command.  */\n@@ -1298,7 +1292,7 @@ reload_shared_libraries_1 (int from_tty)\n   for (so = so_list_head; so != NULL; so = so->next)\n     {\n       const char *found_pathname = NULL;\n-      int was_loaded = so->symbols_loaded;\n+      bool was_loaded = so->symbols_loaded != 0;\n       symfile_add_flags add_flags = SYMFILE_DEFER_BP_RESET;\n \n       if (from_tty)\n@@ -1329,7 +1323,7 @@ reload_shared_libraries_1 (int from_tty)\n \t  && (!was_loaded\n \t      || filename_cmp (found_pathname, so->so_name) != 0))\n \t{\n-\t  int got_error = 0;\n+\t  bool got_error = false;\n \n \t  try\n \t    {\n@@ -1341,7 +1335,7 @@ reload_shared_libraries_1 (int from_tty)\n \t      exception_fprintf (gdb_stderr, e,\n \t\t\t\t _(\"Error while mapping \"\n \t\t\t\t   \"shared library sections:\\n\"));\n-\t      got_error = 1;\n+\t      got_error = true;\n \t    }\n \n \t    if (!got_error\n@@ -1415,7 +1409,7 @@ gdb_sysroot_changed (const char *ignored, int from_tty,\n \n   if (startswith (gdb_sysroot, old_prefix))\n     {\n-      static int warning_issued = 0;\n+      static bool warning_issued = false;\n \n       gdb_assert (strlen (old_prefix) == strlen (new_prefix));\n       memcpy (gdb_sysroot, new_prefix, strlen (new_prefix));\n@@ -1426,7 +1420,7 @@ gdb_sysroot_changed (const char *ignored, int from_tty,\n \t\t   old_prefix, new_prefix);\n \t  warning (_(\"sysroot set to \\\"%s\\\".\"), gdb_sysroot);\n \n-\t  warning_issued = 1;\n+\t  warning_issued = true;\n \t}\n     }\n "
    },
    {
      "sha": "fd5684c6cc81c11819225d7f1f42c5e1f333fbe6",
      "filename": "gdb/solib.h",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b89c67adb1c6340db2f5afa5030f2bea7c583f4/gdb/solib.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b89c67adb1c6340db2f5afa5030f2bea7c583f4/gdb/solib.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.h?ref=5b89c67adb1c6340db2f5afa5030f2bea7c583f4",
      "patch": "@@ -39,7 +39,7 @@ extern void clear_solib (void);\n /* Called to add symbols from a shared library to gdb's symbol table.  */\n \n extern void solib_add (const char *, int, int);\n-extern int solib_read_symbols (struct so_list *, symfile_add_flags);\n+extern bool solib_read_symbols (struct so_list *, symfile_add_flags);\n \n /* Function to be called when the inferior starts up, to discover the\n    names of shared libraries that are dynamically linked, the base\n@@ -52,22 +52,22 @@ extern void solib_create_inferior_hook (int from_tty);\n \n extern char *solib_name_from_address (struct program_space *, CORE_ADDR);\n \n-/* Return 1 if ADDR lies within SOLIB.  */\n+/* Return true if ADDR lies within SOLIB.  */\n \n-extern int solib_contains_address_p (const struct so_list *, CORE_ADDR);\n+extern bool solib_contains_address_p (const struct so_list *, CORE_ADDR);\n \n /* Return whether the data starting at VADDR, size SIZE, must be kept\n    in a core file for shared libraries loaded before \"gcore\" is used\n    to be handled correctly when the core file is loaded.  This only\n    applies when the section would otherwise not be kept in the core\n    file (in particular, for readonly sections).  */\n \n-extern int solib_keep_data_in_core (CORE_ADDR vaddr, unsigned long size);\n+extern bool solib_keep_data_in_core (CORE_ADDR vaddr, unsigned long size);\n \n-/* Return 1 if PC lies in the dynamic symbol resolution code of the\n+/* Return true if PC lies in the dynamic symbol resolution code of the\n    run time loader.  */\n \n-extern int in_solib_dynsym_resolve_code (CORE_ADDR);\n+extern bool in_solib_dynsym_resolve_code (CORE_ADDR);\n \n /* Discard symbols that were auto-loaded from shared libraries.  */\n \n@@ -96,9 +96,9 @@ extern void set_solib_ops (struct gdbarch *gdbarch,\n \n extern void update_solib_list (int from_tty);\n \n-/* Return non-zero if NAME is the libpthread shared library.  */\n+/* Return true if NAME is the libpthread shared library.  */\n \n-extern int libpthread_name_p (const char *name);\n+extern bool libpthread_name_p (const char *name);\n \n /* Look up symbol from both symbol table and dynamic string table.  */\n "
    }
  ]
}