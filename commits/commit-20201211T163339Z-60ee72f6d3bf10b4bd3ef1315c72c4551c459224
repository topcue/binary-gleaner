{
  "sha": "60ee72f6d3bf10b4bd3ef1315c72c4551c459224",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjBlZTcyZjZkM2JmMTBiNGJkM2VmMTMxNWM3MmM0NTUxYzQ1OTIyNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-11T16:33:36Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-11T16:33:39Z"
    },
    "message": "Change varobj_iter::next to return unique_ptr\n\nThis changes varobj_iter::next to return a unique_ptr.  This fits in\nwith the ongoing theme of trying to express these ownership transfers\nvia the type system.\n\ngdb/ChangeLog\n2020-12-11  Tom Tromey  <tom@tromey.com>\n\n\t* varobj.c (update_dynamic_varobj_children): Update.\n\t* varobj-iter.h (struct varobj_iter) <next>: Change return type.\n\t* python/py-varobj.c (struct py_varobj_iter) <next>: Change return\n\ttype.\n\t(py_varobj_iter::next): Likewise.",
    "tree": {
      "sha": "ecabe94538b876c29844cd4bd542030b6bcefb96",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ecabe94538b876c29844cd4bd542030b6bcefb96"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/60ee72f6d3bf10b4bd3ef1315c72c4551c459224",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/60ee72f6d3bf10b4bd3ef1315c72c4551c459224",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/60ee72f6d3bf10b4bd3ef1315c72c4551c459224",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/60ee72f6d3bf10b4bd3ef1315c72c4551c459224/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "54746ce37a483e235ac128b6f545be9888bf3521",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/54746ce37a483e235ac128b6f545be9888bf3521",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/54746ce37a483e235ac128b6f545be9888bf3521"
    }
  ],
  "stats": {
    "total": 26,
    "additions": 16,
    "deletions": 10
  },
  "files": [
    {
      "sha": "d2c902cd4deca08f73bca81360f698706442aa30",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60ee72f6d3bf10b4bd3ef1315c72c4551c459224/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60ee72f6d3bf10b4bd3ef1315c72c4551c459224/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=60ee72f6d3bf10b4bd3ef1315c72c4551c459224",
      "patch": "@@ -1,3 +1,11 @@\n+2020-12-11  Tom Tromey  <tom@tromey.com>\n+\n+\t* varobj.c (update_dynamic_varobj_children): Update.\n+\t* varobj-iter.h (struct varobj_iter) <next>: Change return type.\n+\t* python/py-varobj.c (struct py_varobj_iter) <next>: Change return\n+\ttype.\n+\t(py_varobj_iter::next): Likewise.\n+\n 2020-12-11  Tom Tromey  <tom@tromey.com>\n \n \t* varobj.c (update_dynamic_varobj_children, install_visualizer)"
    },
    {
      "sha": "c3fb2e96a9c11e5161f013762d9afbecf9c8c129",
      "filename": "gdb/python/py-varobj.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60ee72f6d3bf10b4bd3ef1315c72c4551c459224/gdb/python/py-varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60ee72f6d3bf10b4bd3ef1315c72c4551c459224/gdb/python/py-varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-varobj.c?ref=60ee72f6d3bf10b4bd3ef1315c72c4551c459224",
      "patch": "@@ -26,7 +26,7 @@ struct py_varobj_iter : public varobj_iter\n   py_varobj_iter (struct varobj *var, gdbpy_ref<> &&pyiter);\n   ~py_varobj_iter () override;\n \n-  varobj_item *next () override;\n+  std::unique_ptr<varobj_item> next () override;\n \n private:\n \n@@ -55,7 +55,7 @@ py_varobj_iter::~py_varobj_iter ()\n /* Implementation of the 'next' method of pretty-printed varobj\n    iterators.  */\n \n-varobj_item *\n+std::unique_ptr<varobj_item>\n py_varobj_iter::next ()\n {\n   PyObject *py_v;\n@@ -117,7 +117,7 @@ py_varobj_iter::next ()\n   vitem->name = name;\n \n   m_next_raw_index++;\n-  return vitem;\n+  return std::unique_ptr<varobj_item> (vitem);\n }\n \n /* Constructor of pretty-printed varobj iterators.  VAR is the varobj"
    },
    {
      "sha": "a05f1cbf8f3f750894a30270ba95b582848861e5",
      "filename": "gdb/varobj-iter.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60ee72f6d3bf10b4bd3ef1315c72c4551c459224/gdb/varobj-iter.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60ee72f6d3bf10b4bd3ef1315c72c4551c459224/gdb/varobj-iter.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/varobj-iter.h?ref=60ee72f6d3bf10b4bd3ef1315c72c4551c459224",
      "patch": "@@ -36,7 +36,7 @@ struct varobj_iter\n \n   virtual ~varobj_iter () = default;\n \n-  virtual varobj_item *next () = 0;\n+  virtual std::unique_ptr<varobj_item> next () = 0;\n };\n \n #endif /* VAROBJ_ITER_H */"
    },
    {
      "sha": "e9856ea4eb39212c80339765f54bc4df89711de1",
      "filename": "gdb/varobj.c",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60ee72f6d3bf10b4bd3ef1315c72c4551c459224/gdb/varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60ee72f6d3bf10b4bd3ef1315c72c4551c459224/gdb/varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/varobj.c?ref=60ee72f6d3bf10b4bd3ef1315c72c4551c459224",
      "patch": "@@ -719,12 +719,12 @@ update_dynamic_varobj_children (struct varobj *var,\n      are more children.  */\n   for (; to < 0 || i < to + 1; ++i)\n     {\n-      varobj_item *item;\n+      std::unique_ptr<varobj_item> item;\n \n       /* See if there was a leftover from last time.  */\n       if (var->dynamic->saved_item != NULL)\n \t{\n-\t  item = var->dynamic->saved_item;\n+\t  item = std::unique_ptr<varobj_item> (var->dynamic->saved_item);\n \t  var->dynamic->saved_item = NULL;\n \t}\n       else\n@@ -753,13 +753,11 @@ update_dynamic_varobj_children (struct varobj *var,\n \t\t\t\t can_mention ? newobj : NULL,\n \t\t\t\t can_mention ? unchanged : NULL,\n \t\t\t\t can_mention ? cchanged : NULL, i,\n-\t\t\t\t item);\n-\n-\t  delete item;\n+\t\t\t\t item.get ());\n \t}\n       else\n \t{\n-\t  var->dynamic->saved_item = item;\n+\t  var->dynamic->saved_item = item.release ();\n \n \t  /* We want to truncate the child list just before this\n \t     element.  */"
    }
  ]
}