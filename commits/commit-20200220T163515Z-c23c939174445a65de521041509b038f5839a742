{
  "sha": "c23c939174445a65de521041509b038f5839a742",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzIzYzkzOTE3NDQ0NWE2NWRlNTIxMDQxNTA5YjAzOGY1ODM5YTc0Mg==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-17T15:12:00Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-20T16:35:15Z"
    },
    "message": "gdbserver: turn fast tracepoint target ops into methods\n\ngdbserver/ChangeLog:\n2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn process_stratum_target's install_fast_tracepoint_jump_pad\n\tand get_min_fast_tracepoint_insn_len ops into methods of\n\tprocess_target.\n\n\t* target.h (struct process_stratum_target): Remove the target ops.\n\t(class process_target): Add the target ops.  Also add\n\t'supports_fast_tracepoints'.\n\t(target_supports_fast_tracepoints): Update the macro.\n\t(target_get_min_fast_tracepoint_insn_len): Update the macro.\n\t(install_fast_tracepoint_jump_pad): Update and rename the macro\n\tto ...\n\t(target_install_fast_tracepoint_jump_pad): ... this.\n\t* target.cc (process_target::supports_fast_tracepoints): Define.\n\t(process_target::install_fast_tracepoint_jump_pad): Define.\n\t(process_target::get_min_fast_tracepoint_insn_len): Define.\n\n\tUpdate the derived classes and callers below.\n\n\t* tracepoint.cc (install_fast_tracepoint): Update.\n\t* linux-low.cc (linux_target_ops): Update.\n\t(linux_process_target::supports_fast_tracepoints): Define.\n\t(linux_install_fast_tracepoint_jump_pad): Turn into ...\n\t(linux_process_target::install_fast_tracepoint_jump_pad): ... this.\n\t(linux_get_min_fast_tracepoint_insn_len): Turn into ...\n\t(linux_process_target::get_min_fast_tracepoint_insn_len): ... this.\n\t* linux-low.h (class linux_process_target): Update.\n\t* lynx-low.cc (lynx_target_ops): Update.\n\t* nto-low.cc (nto_target_ops): Update.\n\t* win32-low.cc (win32_target_ops): Update.",
    "tree": {
      "sha": "31efc024833d53523b0769d36ceff7fb35982658",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/31efc024833d53523b0769d36ceff7fb35982658"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c23c939174445a65de521041509b038f5839a742",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c23c939174445a65de521041509b038f5839a742",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c23c939174445a65de521041509b038f5839a742",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c23c939174445a65de521041509b038f5839a742/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5c9eb2f2b53cb095dc6dbdd0654cec4ff9a53650",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c9eb2f2b53cb095dc6dbdd0654cec4ff9a53650",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5c9eb2f2b53cb095dc6dbdd0654cec4ff9a53650"
    }
  ],
  "stats": {
    "total": 238,
    "additions": 149,
    "deletions": 89
  },
  "files": [
    {
      "sha": "3aaf02a8112c132b7465f753f638b7b46c4da13d",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c23c939174445a65de521041509b038f5839a742/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c23c939174445a65de521041509b038f5839a742/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=c23c939174445a65de521041509b038f5839a742",
      "patch": "@@ -1,3 +1,35 @@\n+2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn process_stratum_target's install_fast_tracepoint_jump_pad\n+\tand get_min_fast_tracepoint_insn_len ops into methods of\n+\tprocess_target.\n+\n+\t* target.h (struct process_stratum_target): Remove the target ops.\n+\t(class process_target): Add the target ops.  Also add\n+\t'supports_fast_tracepoints'.\n+\t(target_supports_fast_tracepoints): Update the macro.\n+\t(target_get_min_fast_tracepoint_insn_len): Update the macro.\n+\t(install_fast_tracepoint_jump_pad): Update and rename the macro\n+\tto ...\n+\t(target_install_fast_tracepoint_jump_pad): ... this.\n+\t* target.cc (process_target::supports_fast_tracepoints): Define.\n+\t(process_target::install_fast_tracepoint_jump_pad): Define.\n+\t(process_target::get_min_fast_tracepoint_insn_len): Define.\n+\n+\tUpdate the derived classes and callers below.\n+\n+\t* tracepoint.cc (install_fast_tracepoint): Update.\n+\t* linux-low.cc (linux_target_ops): Update.\n+\t(linux_process_target::supports_fast_tracepoints): Define.\n+\t(linux_install_fast_tracepoint_jump_pad): Turn into ...\n+\t(linux_process_target::install_fast_tracepoint_jump_pad): ... this.\n+\t(linux_get_min_fast_tracepoint_insn_len): Turn into ...\n+\t(linux_process_target::get_min_fast_tracepoint_insn_len): ... this.\n+\t* linux-low.h (class linux_process_target): Update.\n+\t* lynx-low.cc (lynx_target_ops): Update.\n+\t* nto-low.cc (nto_target_ops): Update.\n+\t* win32-low.cc (win32_target_ops): Update.\n+\n 2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn process_stratum_target's stabilize_threads op into a"
    },
    {
      "sha": "ecd892b01ea2c76ccabbb33c823d0b089a281747",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 17,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c23c939174445a65de521041509b038f5839a742/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c23c939174445a65de521041509b038f5839a742/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=c23c939174445a65de521041509b038f5839a742",
      "patch": "@@ -6620,19 +6620,20 @@ linux_process_target::done_accessing_memory ()\n     target_unpause_all (true);\n }\n \n-static int\n-linux_install_fast_tracepoint_jump_pad (CORE_ADDR tpoint, CORE_ADDR tpaddr,\n-\t\t\t\t\tCORE_ADDR collector,\n-\t\t\t\t\tCORE_ADDR lockaddr,\n-\t\t\t\t\tULONGEST orig_size,\n-\t\t\t\t\tCORE_ADDR *jump_entry,\n-\t\t\t\t\tCORE_ADDR *trampoline,\n-\t\t\t\t\tULONGEST *trampoline_size,\n-\t\t\t\t\tunsigned char *jjump_pad_insn,\n-\t\t\t\t\tULONGEST *jjump_pad_insn_size,\n-\t\t\t\t\tCORE_ADDR *adjusted_insn_addr,\n-\t\t\t\t\tCORE_ADDR *adjusted_insn_addr_end,\n-\t\t\t\t\tchar *err)\n+bool\n+linux_process_target::supports_fast_tracepoints ()\n+{\n+  return the_low_target.install_fast_tracepoint_jump_pad != nullptr;\n+}\n+\n+int\n+linux_process_target::install_fast_tracepoint_jump_pad\n+  (CORE_ADDR tpoint, CORE_ADDR tpaddr, CORE_ADDR collector,\n+   CORE_ADDR lockaddr, ULONGEST orig_size, CORE_ADDR *jump_entry,\n+   CORE_ADDR *trampoline, ULONGEST *trampoline_size,\n+   unsigned char *jjump_pad_insn, ULONGEST *jjump_pad_insn_size,\n+   CORE_ADDR *adjusted_insn_addr, CORE_ADDR *adjusted_insn_addr_end,\n+   char *err)\n {\n   return (*the_low_target.install_fast_tracepoint_jump_pad)\n     (tpoint, tpaddr, collector, lockaddr, orig_size,\n@@ -6651,8 +6652,8 @@ linux_emit_ops (void)\n     return NULL;\n }\n \n-static int\n-linux_get_min_fast_tracepoint_insn_len (void)\n+int\n+linux_process_target::get_min_fast_tracepoint_insn_len ()\n {\n   return (*the_low_target.get_min_fast_tracepoint_insn_len) ();\n }\n@@ -7455,10 +7456,8 @@ linux_get_hwcap2 (int wordsize)\n static linux_process_target the_linux_target;\n \n static process_stratum_target linux_target_ops = {\n-  linux_install_fast_tracepoint_jump_pad,\n   linux_emit_ops,\n   linux_supports_disable_randomization,\n-  linux_get_min_fast_tracepoint_insn_len,\n   linux_qxfer_libraries_svr4,\n   linux_supports_agent,\n #ifdef HAVE_LINUX_BTRACE"
    },
    {
      "sha": "35e30ed590d0c161826294b578df6aeaf2792faa",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c23c939174445a65de521041509b038f5839a742/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c23c939174445a65de521041509b038f5839a742/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=c23c939174445a65de521041509b038f5839a742",
      "patch": "@@ -402,6 +402,24 @@ class linux_process_target : public process_target\n   void unpause_all (bool unfreeze) override;\n \n   void stabilize_threads () override;\n+\n+  bool supports_fast_tracepoints () override;\n+\n+  int install_fast_tracepoint_jump_pad (CORE_ADDR tpoint,\n+\t\t\t\t\tCORE_ADDR tpaddr,\n+\t\t\t\t\tCORE_ADDR collector,\n+\t\t\t\t\tCORE_ADDR lockaddr,\n+\t\t\t\t\tULONGEST orig_size,\n+\t\t\t\t\tCORE_ADDR *jump_entry,\n+\t\t\t\t\tCORE_ADDR *trampoline,\n+\t\t\t\t\tULONGEST *trampoline_size,\n+\t\t\t\t\tunsigned char *jjump_pad_insn,\n+\t\t\t\t\tULONGEST *jjump_pad_insn_size,\n+\t\t\t\t\tCORE_ADDR *adjusted_insn_addr,\n+\t\t\t\t\tCORE_ADDR *adjusted_insn_addr_end,\n+\t\t\t\t\tchar *err) override;\n+\n+  int get_min_fast_tracepoint_insn_len () override;\n };\n \n #define get_thread_lwp(thr) ((struct lwp_info *) (thread_target_data (thr)))"
    },
    {
      "sha": "4089b261bfdfe01f0f1b2b1ffeec544cfb1814e1",
      "filename": "gdbserver/lynx-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c23c939174445a65de521041509b038f5839a742/gdbserver/lynx-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c23c939174445a65de521041509b038f5839a742/gdbserver/lynx-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.cc?ref=c23c939174445a65de521041509b038f5839a742",
      "patch": "@@ -735,10 +735,8 @@ static lynx_process_target the_lynx_target;\n /* The LynxOS target_ops vector.  */\n \n static process_stratum_target lynx_target_ops = {\n-  NULL,  /* install_fast_tracepoint_jump_pad */\n   NULL,  /* emit_ops */\n   NULL,  /* supports_disable_randomization */\n-  NULL,  /* get_min_fast_tracepoint_insn_len */\n   NULL,  /* qxfer_libraries_svr4 */\n   NULL,  /* support_agent */\n   NULL,  /* enable_btrace */"
    },
    {
      "sha": "e0d3d49bb667fa4f4cb6c246b2146929767706e2",
      "filename": "gdbserver/nto-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c23c939174445a65de521041509b038f5839a742/gdbserver/nto-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c23c939174445a65de521041509b038f5839a742/gdbserver/nto-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.cc?ref=c23c939174445a65de521041509b038f5839a742",
      "patch": "@@ -947,10 +947,8 @@ nto_sw_breakpoint_from_kind (int kind, int *size)\n static nto_process_target the_nto_target;\n \n static process_stratum_target nto_target_ops = {\n-  NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n   NULL, /* supports_disable_randomization */\n-  NULL, /* get_min_fast_tracepoint_insn_len */\n   NULL, /* qxfer_libraries_svr4 */\n   NULL, /* support_agent */\n   NULL, /* enable_btrace */"
    },
    {
      "sha": "29b5bbcd9b14871ce10eae673db7df789d8c0b31",
      "filename": "gdbserver/target.cc",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c23c939174445a65de521041509b038f5839a742/gdbserver/target.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c23c939174445a65de521041509b038f5839a742/gdbserver/target.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.cc?ref=c23c939174445a65de521041509b038f5839a742",
      "patch": "@@ -668,3 +668,28 @@ process_target::stabilize_threads ()\n {\n   /* Nop.  */\n }\n+\n+bool\n+process_target::supports_fast_tracepoints ()\n+{\n+  return false;\n+}\n+\n+int\n+process_target::install_fast_tracepoint_jump_pad\n+  (CORE_ADDR tpoint, CORE_ADDR tpaddr, CORE_ADDR collector,\n+   CORE_ADDR lockaddr, ULONGEST orig_size, CORE_ADDR *jump_entry,\n+   CORE_ADDR *trampoline, ULONGEST *trampoline_size,\n+   unsigned char *jjump_pad_insn, ULONGEST *jjump_pad_insn_size,\n+   CORE_ADDR *adjusted_insn_addr, CORE_ADDR *adjusted_insn_addr_end,\n+   char *err)\n+{\n+  gdb_assert_not_reached (\"target op install_fast_tracepoint_jump_pad \"\n+\t\t\t  \"not supported\");\n+}\n+\n+int\n+process_target::get_min_fast_tracepoint_insn_len ()\n+{\n+  return 0;\n+}"
    },
    {
      "sha": "21f22a4d0dbeb683eaf4726d88c0dd732297e9fc",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 53,
      "deletions": 55,
      "changes": 108,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c23c939174445a65de521041509b038f5839a742/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c23c939174445a65de521041509b038f5839a742/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=c23c939174445a65de521041509b038f5839a742",
      "patch": "@@ -70,45 +70,13 @@ class process_target;\n    shared code.  */\n struct process_stratum_target\n {\n-  /* Install a fast tracepoint jump pad.  TPOINT is the address of the\n-     tracepoint internal object as used by the IPA agent.  TPADDR is\n-     the address of tracepoint.  COLLECTOR is address of the function\n-     the jump pad redirects to.  LOCKADDR is the address of the jump\n-     pad lock object.  ORIG_SIZE is the size in bytes of the\n-     instruction at TPADDR.  JUMP_ENTRY points to the address of the\n-     jump pad entry, and on return holds the address past the end of\n-     the created jump pad.  If a trampoline is created by the function,\n-     then TRAMPOLINE and TRAMPOLINE_SIZE return the address and size of\n-     the trampoline, else they remain unchanged.  JJUMP_PAD_INSN is a\n-     buffer containing a copy of the instruction at TPADDR.\n-     ADJUST_INSN_ADDR and ADJUST_INSN_ADDR_END are output parameters that\n-     return the address range where the instruction at TPADDR was relocated\n-     to.  If an error occurs, the ERR may be used to pass on an error\n-     message.  */\n-  int (*install_fast_tracepoint_jump_pad) (CORE_ADDR tpoint, CORE_ADDR tpaddr,\n-\t\t\t\t\t   CORE_ADDR collector,\n-\t\t\t\t\t   CORE_ADDR lockaddr,\n-\t\t\t\t\t   ULONGEST orig_size,\n-\t\t\t\t\t   CORE_ADDR *jump_entry,\n-\t\t\t\t\t   CORE_ADDR *trampoline,\n-\t\t\t\t\t   ULONGEST *trampoline_size,\n-\t\t\t\t\t   unsigned char *jjump_pad_insn,\n-\t\t\t\t\t   ULONGEST *jjump_pad_insn_size,\n-\t\t\t\t\t   CORE_ADDR *adjusted_insn_addr,\n-\t\t\t\t\t   CORE_ADDR *adjusted_insn_addr_end,\n-\t\t\t\t\t   char *err);\n-\n   /* Return the bytecode operations vector for the current inferior.\n      Returns NULL if bytecode compilation is not supported.  */\n   struct emit_ops *(*emit_ops) (void);\n \n   /* Returns true if the target supports disabling randomization.  */\n   int (*supports_disable_randomization) (void);\n \n-  /* Return the minimum length of an instruction that can be safely overwritten\n-     for use as a fast tracepoint.  */\n-  int (*get_min_fast_tracepoint_insn_len) (void);\n-\n   /* Read solib info on SVR4 platforms.  */\n   int (*qxfer_libraries_svr4) (const char *annex, unsigned char *readbuf,\n \t\t\t       unsigned const char *writebuf,\n@@ -494,6 +462,37 @@ class process_target\n \n   /* Stabilize all threads.  That is, force them out of jump pads.  */\n   virtual void stabilize_threads ();\n+\n+  /* Return true if the install_fast_tracepoint_jump_pad op is\n+     supported.  */\n+  virtual bool supports_fast_tracepoints ();\n+\n+  /* Install a fast tracepoint jump pad.  TPOINT is the address of the\n+     tracepoint internal object as used by the IPA agent.  TPADDR is\n+     the address of tracepoint.  COLLECTOR is address of the function\n+     the jump pad redirects to.  LOCKADDR is the address of the jump\n+     pad lock object.  ORIG_SIZE is the size in bytes of the\n+     instruction at TPADDR.  JUMP_ENTRY points to the address of the\n+     jump pad entry, and on return holds the address past the end of\n+     the created jump pad.  If a trampoline is created by the function,\n+     then TRAMPOLINE and TRAMPOLINE_SIZE return the address and size of\n+     the trampoline, else they remain unchanged.  JJUMP_PAD_INSN is a\n+     buffer containing a copy of the instruction at TPADDR.\n+     ADJUST_INSN_ADDR and ADJUST_INSN_ADDR_END are output parameters that\n+     return the address range where the instruction at TPADDR was relocated\n+     to.  If an error occurs, the ERR may be used to pass on an error\n+     message.  */\n+  virtual int install_fast_tracepoint_jump_pad\n+    (CORE_ADDR tpoint, CORE_ADDR tpaddr, CORE_ADDR collector,\n+     CORE_ADDR lockaddr, ULONGEST orig_size, CORE_ADDR *jump_entry,\n+     CORE_ADDR *trampoline, ULONGEST *trampoline_size,\n+     unsigned char *jjump_pad_insn, ULONGEST *jjump_pad_insn_size,\n+     CORE_ADDR *adjusted_insn_addr, CORE_ADDR *adjusted_insn_addr_end,\n+     char *err);\n+\n+  /* Return the minimum length of an instruction that can be safely\n+     overwritten for use as a fast tracepoint.  */\n+  virtual int get_min_fast_tracepoint_insn_len ();\n };\n \n extern process_stratum_target *the_target;\n@@ -559,11 +558,10 @@ int kill_inferior (process_info *proc);\n   the_target->pt->supports_tracepoints ()\n \n #define target_supports_fast_tracepoints()\t\t\\\n-  (the_target->install_fast_tracepoint_jump_pad != NULL)\n+  the_target->pt->supports_fast_tracepoints ()\n \n #define target_get_min_fast_tracepoint_insn_len()\t\\\n-  (the_target->get_min_fast_tracepoint_insn_len\t\t\\\n-   ? (*the_target->get_min_fast_tracepoint_insn_len) () : 0)\n+  the_target->pt->get_min_fast_tracepoint_insn_len ()\n \n #define target_thread_stopped(thread) \\\n   the_target->pt->thread_stopped (thread)\n@@ -577,26 +575,26 @@ int kill_inferior (process_info *proc);\n #define target_stabilize_threads()\t\t\\\n   the_target->pt->stabilize_threads ()\n \n-#define install_fast_tracepoint_jump_pad(tpoint, tpaddr,\t\t\\\n-\t\t\t\t\t collector, lockaddr,\t\t\\\n-\t\t\t\t\t orig_size,\t\t\t\\\n-\t\t\t\t\t jump_entry,\t\t\t\\\n-\t\t\t\t\t trampoline, trampoline_size,\t\\\n-\t\t\t\t\t jjump_pad_insn,\t\t\\\n-\t\t\t\t\t jjump_pad_insn_size,\t\t\\\n-\t\t\t\t\t adjusted_insn_addr,\t\t\\\n-\t\t\t\t\t adjusted_insn_addr_end,\t\\\n-\t\t\t\t\t err)\t\t\t\t\\\n-  (*the_target->install_fast_tracepoint_jump_pad) (tpoint, tpaddr,\t\\\n-\t\t\t\t\t\t   collector,lockaddr,\t\\\n-\t\t\t\t\t\t   orig_size, jump_entry, \\\n-\t\t\t\t\t\t   trampoline,\t\t\\\n-\t\t\t\t\t\t   trampoline_size,\t\\\n-\t\t\t\t\t\t   jjump_pad_insn,\t\\\n-\t\t\t\t\t\t   jjump_pad_insn_size, \\\n-\t\t\t\t\t\t   adjusted_insn_addr,\t\\\n-\t\t\t\t\t\t   adjusted_insn_addr_end, \\\n-\t\t\t\t\t\t   err)\n+#define target_install_fast_tracepoint_jump_pad(tpoint, tpaddr,\t\t\\\n+\t\t\t\t\t\tcollector, lockaddr,\t\\\n+\t\t\t\t\t\torig_size,\t\t\\\n+\t\t\t\t\t\tjump_entry,\t\t\\\n+\t\t\t\t\t\ttrampoline, trampoline_size, \\\n+\t\t\t\t\t\tjjump_pad_insn,\t\t\\\n+\t\t\t\t\t\tjjump_pad_insn_size,\t\\\n+\t\t\t\t\t\tadjusted_insn_addr,\t\\\n+\t\t\t\t\t\tadjusted_insn_addr_end,\t\\\n+\t\t\t\t\t\terr)\t\t\t\\\n+  the_target->pt->install_fast_tracepoint_jump_pad (tpoint, tpaddr,\t\\\n+\t\t\t\t\t\t    collector,lockaddr,\t\\\n+\t\t\t\t\t\t    orig_size, jump_entry, \\\n+\t\t\t\t\t\t    trampoline,\t\t\\\n+\t\t\t\t\t\t    trampoline_size,\t\\\n+\t\t\t\t\t\t    jjump_pad_insn,\t\\\n+\t\t\t\t\t\t    jjump_pad_insn_size, \\\n+\t\t\t\t\t\t    adjusted_insn_addr,\t\\\n+\t\t\t\t\t\t    adjusted_insn_addr_end, \\\n+\t\t\t\t\t\t    err)\n \n #define target_emit_ops() \\\n   (the_target->emit_ops ? (*the_target->emit_ops) () : NULL)"
    },
    {
      "sha": "e587d6561dccd124f490fbdf1cc8e8ae6e710261",
      "filename": "gdbserver/tracepoint.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 11,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c23c939174445a65de521041509b038f5839a742/gdbserver/tracepoint.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c23c939174445a65de521041509b038f5839a742/gdbserver/tracepoint.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/tracepoint.cc?ref=c23c939174445a65de521041509b038f5839a742",
      "patch": "@@ -3117,17 +3117,11 @@ install_fast_tracepoint (struct tracepoint *tpoint, char *errbuf)\n   trampoline_size = 0;\n \n   /* Install the jump pad.  */\n-  err = install_fast_tracepoint_jump_pad (tpoint->obj_addr_on_target,\n-\t\t\t\t\t  tpoint->address,\n-\t\t\t\t\t  collect,\n-\t\t\t\t\t  ipa_sym_addrs.addr_collecting,\n-\t\t\t\t\t  tpoint->orig_size,\n-\t\t\t\t\t  &jentry,\n-\t\t\t\t\t  &trampoline, &trampoline_size,\n-\t\t\t\t\t  fjump, &fjump_size,\n-\t\t\t\t\t  &tpoint->adjusted_insn_addr,\n-\t\t\t\t\t  &tpoint->adjusted_insn_addr_end,\n-\t\t\t\t\t  errbuf);\n+  err = target_install_fast_tracepoint_jump_pad\n+    (tpoint->obj_addr_on_target, tpoint->address, collect,\n+     ipa_sym_addrs.addr_collecting, tpoint->orig_size, &jentry,\n+     &trampoline, &trampoline_size, fjump, &fjump_size,\n+     &tpoint->adjusted_insn_addr, &tpoint->adjusted_insn_addr_end, errbuf);\n \n   if (err)\n     return 1;"
    },
    {
      "sha": "9c715fea3622741292fb7b29703f3756e3a56107",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c23c939174445a65de521041509b038f5839a742/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c23c939174445a65de521041509b038f5839a742/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=c23c939174445a65de521041509b038f5839a742",
      "patch": "@@ -1858,10 +1858,8 @@ win32_sw_breakpoint_from_kind (int kind, int *size)\n static win32_process_target the_win32_target;\n \n static process_stratum_target win32_target_ops = {\n-  NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */\n   NULL, /* supports_disable_randomization */\n-  NULL, /* get_min_fast_tracepoint_insn_len */\n   NULL, /* qxfer_libraries_svr4 */\n   NULL, /* support_agent */\n   NULL, /* enable_btrace */"
    }
  ]
}