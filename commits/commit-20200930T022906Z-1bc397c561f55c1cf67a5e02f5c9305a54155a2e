{
  "sha": "1bc397c561f55c1cf67a5e02f5c9305a54155a2e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWJjMzk3YzU2MWY1NWMxY2Y2N2E1ZTAyZjVjOTMwNWE1NDE1NWEyZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T00:49:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T02:29:06Z"
    },
    "message": "Remove DW_SND\n\nThis removes DW_SND in favor of accessors on struct attribute.\nThese accessors check that the form is appropriate.\n\ngdb/ChangeLog\n2020-09-29  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (get_alignment, read_array_order)\n\t(read_attribute_value, dwarf2_const_value_attr)\n\t(dump_die_shallow, dwarf2_fetch_constant_bytes): Update.\n\t* dwarf2/attribute.h (struct attribute) <as_signed, set_signed>:\n\tNew methods.\n\t(DW_SND): Remove.",
    "tree": {
      "sha": "ac62792e3d25ef7c9429aebd4168d1dcc3aa72e0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ac62792e3d25ef7c9429aebd4168d1dcc3aa72e0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1bc397c561f55c1cf67a5e02f5c9305a54155a2e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1bc397c561f55c1cf67a5e02f5c9305a54155a2e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1bc397c561f55c1cf67a5e02f5c9305a54155a2e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1bc397c561f55c1cf67a5e02f5c9305a54155a2e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "630ed6b975d2d2f950523dd2ad9ac77614f5222c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/630ed6b975d2d2f950523dd2ad9ac77614f5222c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/630ed6b975d2d2f950523dd2ad9ac77614f5222c"
    }
  ],
  "stats": {
    "total": 45,
    "additions": 36,
    "deletions": 9
  },
  "files": [
    {
      "sha": "9aa1266053d804b8c6d187dc207b997cc141cfb0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1bc397c561f55c1cf67a5e02f5c9305a54155a2e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1bc397c561f55c1cf67a5e02f5c9305a54155a2e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1bc397c561f55c1cf67a5e02f5c9305a54155a2e",
      "patch": "@@ -1,3 +1,12 @@\n+2020-09-29  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (get_alignment, read_array_order)\n+\t(read_attribute_value, dwarf2_const_value_attr)\n+\t(dump_die_shallow, dwarf2_fetch_constant_bytes): Update.\n+\t* dwarf2/attribute.h (struct attribute) <as_signed, set_signed>:\n+\tNew methods.\n+\t(DW_SND): Remove.\n+\n 2020-09-29  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (read_attribute_value, lookup_die_type)"
    },
    {
      "sha": "91782769689b2accfdb9632b2c91f697109c5c72",
      "filename": "gdb/dwarf2/attribute.h",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1bc397c561f55c1cf67a5e02f5c9305a54155a2e/gdb/dwarf2/attribute.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1bc397c561f55c1cf67a5e02f5c9305a54155a2e/gdb/dwarf2/attribute.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.h?ref=1bc397c561f55c1cf67a5e02f5c9305a54155a2e",
      "patch": "@@ -65,6 +65,14 @@ struct attribute\n     return u.signature;\n   }\n \n+  /* Return the signed value.  The attribute must have the appropriate\n+     form.  */\n+  LONGEST as_signed () const\n+  {\n+    gdb_assert (form == DW_FORM_sdata || form == DW_FORM_implicit_const);\n+    return u.snd;\n+  }\n+\n   /* Return non-zero if ATTR's value is a section offset --- classes\n      lineptr, loclistptr, macptr or rangelistptr --- or zero, otherwise.\n      You may use DW_UNSND (attr) to retrieve such offsets.\n@@ -175,6 +183,13 @@ struct attribute\n     u.signature = signature;\n   }\n \n+  /* Set this attribute to a signed integer.  */\n+  void set_signed (LONGEST snd)\n+  {\n+    gdb_assert (form == DW_FORM_sdata || form == DW_FORM_implicit_const);\n+    u.snd = snd;\n+  }\n+\n \n   ENUM_BITFIELD(dwarf_attribute) name : 16;\n   ENUM_BITFIELD(dwarf_form) form : 15;\n@@ -205,7 +220,6 @@ struct attribute\n /* Get at parts of an attribute structure.  */\n \n #define DW_UNSND(attr)     ((attr)->u.unsnd)\n-#define DW_SND(attr)       ((attr)->u.snd)\n #define DW_ADDR(attr)\t   ((attr)->u.addr)\n \n #endif /* GDB_DWARF2_ATTRIBUTE_H */"
    },
    {
      "sha": "190d38e4f990a3c354e6f0007c0d52c1833273c4",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 12,
      "deletions": 8,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1bc397c561f55c1cf67a5e02f5c9305a54155a2e/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1bc397c561f55c1cf67a5e02f5c9305a54155a2e/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=1bc397c561f55c1cf67a5e02f5c9305a54155a2e",
      "patch": "@@ -15872,7 +15872,7 @@ get_alignment (struct dwarf2_cu *cu, struct die_info *die)\n   ULONGEST align;\n   if (attr->form == DW_FORM_sdata)\n     {\n-      LONGEST val = DW_SND (attr);\n+      LONGEST val = attr->as_signed ();\n       if (val < 0)\n \t{\n \t  complaint (_(\"DW_AT_alignment value must not be negative\"\n@@ -16871,7 +16871,11 @@ read_array_order (struct die_info *die, struct dwarf2_cu *cu)\n   attr = dwarf2_attr (die, DW_AT_ordering, cu);\n \n   if (attr != nullptr)\n-    return (enum dwarf_array_dim_ordering) DW_SND (attr);\n+    {\n+      LONGEST val = attr->constant_value (-1);\n+      if (val == DW_ORD_row_major || val == DW_ORD_col_major)\n+\treturn (enum dwarf_array_dim_ordering) val;\n+    }\n \n   /* GNU F77 is a special case, as at 08/2004 array type info is the\n      opposite order to the dwarf2 specification, but data is still\n@@ -19819,7 +19823,7 @@ read_attribute_value (const struct die_reader_specs *reader,\n       DW_UNSND (attr) = 1;\n       break;\n     case DW_FORM_sdata:\n-      DW_SND (attr) = read_signed_leb128 (abfd, info_ptr, &bytes_read);\n+      attr->set_signed (read_signed_leb128 (abfd, info_ptr, &bytes_read));\n       info_ptr += bytes_read;\n       break;\n     case DW_FORM_rnglistx:\n@@ -19870,7 +19874,7 @@ read_attribute_value (const struct die_reader_specs *reader,\n \t\t\t\t       info_ptr, need_reprocess);\n       break;\n     case DW_FORM_implicit_const:\n-      DW_SND (attr) = implicit_const;\n+      attr->set_signed (implicit_const);\n       break;\n     case DW_FORM_addrx:\n     case DW_FORM_GNU_addr_index:\n@@ -21911,7 +21915,7 @@ dwarf2_const_value_attr (const struct attribute *attr, struct type *type,\n \n     case DW_FORM_sdata:\n     case DW_FORM_implicit_const:\n-      *value = DW_SND (attr);\n+      *value = attr->as_signed ();\n       break;\n \n     case DW_FORM_udata:\n@@ -22772,7 +22776,6 @@ dump_die_shallow (struct ui_file *f, int indent, struct die_info *die)\n \tcase DW_FORM_data4:\n \tcase DW_FORM_data8:\n \tcase DW_FORM_udata:\n-\tcase DW_FORM_sdata:\n \t  fprintf_unfiltered (f, \"constant: %s\",\n \t\t\t      pulongest (DW_UNSND (&die->attrs[i])));\n \t  break;\n@@ -22810,9 +22813,10 @@ dump_die_shallow (struct ui_file *f, int indent, struct die_info *die)\n \t  fprintf_unfiltered (f,\n \t\t\t      \"unexpected attribute form: DW_FORM_indirect\");\n \t  break;\n+\tcase DW_FORM_sdata:\n \tcase DW_FORM_implicit_const:\n \t  fprintf_unfiltered (f, \"constant: %s\",\n-\t\t\t      plongest (DW_SND (&die->attrs[i])));\n+\t\t\t      plongest (die->attrs[i].as_signed ()));\n \t  break;\n \tdefault:\n \t  fprintf_unfiltered (f, \"unsupported attribute form: %d.\",\n@@ -23247,7 +23251,7 @@ dwarf2_fetch_constant_bytes (sect_offset sect_off,\n     case DW_FORM_implicit_const:\n       type = die_type (die, cu);\n       result = write_constant_as_bytes (obstack, byte_order,\n-\t\t\t\t\ttype, DW_SND (attr), len);\n+\t\t\t\t\ttype, attr->as_signed (), len);\n       break;\n \n     case DW_FORM_udata:"
    }
  ]
}