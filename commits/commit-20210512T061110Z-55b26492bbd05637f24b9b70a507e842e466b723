{
  "sha": "55b26492bbd05637f24b9b70a507e842e466b723",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTViMjY0OTJiYmQwNTYzN2YyNGI5YjcwYTUwN2U4NDJlNDY2YjcyMw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-12T05:41:43Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-12T06:11:10Z"
    },
    "message": "PR27853, Infinite loop in dwarf.c\n\nNot quite infinite but much longer than it need be.  The problem is\ntriggered by read_and_display_attr_value incrementing \"data\" past\n\"end\".  read_and_display_attr_value shouldn't do that, but be\ndefensive.\n\n\tPR 27853\n\t* dwarf.c (display_formatted_table): Test for data >= end rather\n\tthan data == end.\n\t(process_extended_line_op): Likewise.\n\t(display_debug_lines_raw): Likewise.\n\t(display_debug_lines_decoded): Likewise.",
    "tree": {
      "sha": "2941b78c943f601f7b0b23b22fb9d572bfe886f6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2941b78c943f601f7b0b23b22fb9d572bfe886f6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/55b26492bbd05637f24b9b70a507e842e466b723",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/55b26492bbd05637f24b9b70a507e842e466b723",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/55b26492bbd05637f24b9b70a507e842e466b723",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/55b26492bbd05637f24b9b70a507e842e466b723/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5ab3907543816d62a8dfd0f7f342ae66814bb0eb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5ab3907543816d62a8dfd0f7f342ae66814bb0eb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5ab3907543816d62a8dfd0f7f342ae66814bb0eb"
    }
  ],
  "stats": {
    "total": 33,
    "additions": 21,
    "deletions": 12
  },
  "files": [
    {
      "sha": "be50b3142abda1272769bfbe6c9d69855450b4b1",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55b26492bbd05637f24b9b70a507e842e466b723/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55b26492bbd05637f24b9b70a507e842e466b723/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=55b26492bbd05637f24b9b70a507e842e466b723",
      "patch": "@@ -1,3 +1,12 @@\n+2021-05-12  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 27853\n+\t* dwarf.c (display_formatted_table): Test for data >= end rather\n+\tthan data == end.\n+\t(process_extended_line_op): Likewise.\n+\t(display_debug_lines_raw): Likewise.\n+\t(display_debug_lines_decoded): Likewise.\n+\n 2021-05-12  Alan Modra  <amodra@gmail.com>\n \n \tPR 27849"
    },
    {
      "sha": "896035ccde2aeee46530dbefaf829310ad82f2a8",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55b26492bbd05637f24b9b70a507e842e466b723/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55b26492bbd05637f24b9b70a507e842e466b723/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=55b26492bbd05637f24b9b70a507e842e466b723",
      "patch": "@@ -521,7 +521,7 @@ process_extended_line_op (unsigned char * data,\n   READ_ULEB (len, data, end);\n   header_len = data - orig_data;\n \n-  if (len == 0 || data == end || len > (size_t) (end - data))\n+  if (len == 0 || data >= end || len > (size_t) (end - data))\n     {\n       warn (_(\"Badly formed extended line op encountered!\\n\"));\n       return header_len;\n@@ -574,7 +574,7 @@ process_extended_line_op (unsigned char * data,\n \tprintf (\"%.*s\\n\\n\", (int) l, name);\n       }\n \n-      if (((size_t) (data - orig_data) != len + header_len) || data == end)\n+      if (((size_t) (data - orig_data) != len + header_len) || data >= end)\n \twarn (_(\"DW_LNE_define_file: Bad opcode length\\n\"));\n       break;\n \n@@ -4327,7 +4327,7 @@ display_formatted_table (unsigned char *data,\n     {\n       SKIP_ULEB (data, end);\n       SKIP_ULEB (data, end);\n-      if (data == end)\n+      if (data >= end)\n \t{\n \t  warn (_(\"%s: Corrupt format description entry\\n\"), table_name);\n \t  return data;\n@@ -4340,7 +4340,7 @@ display_formatted_table (unsigned char *data,\n       printf (_(\"\\n The %s is empty.\\n\"), table_name);\n       return data;\n     }\n-  else if (data == end)\n+  else if (data >= end)\n     {\n       warn (_(\"%s: Corrupt entry count - expected %s but none found\\n\"),\n \t    table_name, dwarf_vmatoa (\"x\", data_count));\n@@ -4419,7 +4419,7 @@ display_formatted_table (unsigned char *data,\n \t    }\n \t}\n \n-      if (data == end && (datai < data_count - 1))\n+      if (data >= end && (datai < data_count - 1))\n \t{\n \t  warn (_(\"\\n%s: Corrupt entries list\\n\"), table_name);\n \t  return data;\n@@ -4665,7 +4665,7 @@ display_debug_lines_raw (struct dwarf_section *  section,\n \t\t      printf (\"%s\\t\", dwarf_vmatoa (\"u\", val));\n \t\t      printf (\"%.*s\\n\", (int)(end - name), name);\n \n-\t\t      if (data == end)\n+\t\t      if (data >= end)\n \t\t\t{\n \t\t\t  warn (_(\"Corrupt file name table entry\\n\"));\n \t\t\t  break;\n@@ -5013,7 +5013,7 @@ display_debug_lines_decoded (struct dwarf_section *  section,\n \t\t}\n \n \t      READ_ULEB (n_directories, data, end);\n-\t      if (data == end)\n+\t      if (data >= end)\n \t\t{\n \t\t  warn (_(\"Corrupt directories list\\n\"));\n \t\t  break;\n@@ -5037,7 +5037,7 @@ display_debug_lines_decoded (struct dwarf_section *  section,\n \n \t\t      READ_ULEB (content_type, format, end);\n \t\t      READ_ULEB (form, format, end);\n-\t\t      if (data == end)\n+\t\t      if (data >= end)\n \t\t\t{\n \t\t\t  warn (_(\"Corrupt directories list\\n\"));\n \t\t\t  break;\n@@ -5067,7 +5067,7 @@ display_debug_lines_decoded (struct dwarf_section *  section,\n \t\t\t\t\t\t\t  NULL, 1, section,\n \t\t\t\t\t\t\t  NULL, '\\t', -1);\n \t\t    }\n-\t\t  if (data == end)\n+\t\t  if (data >= end)\n \t\t    {\n \t\t      warn (_(\"Corrupt directories list\\n\"));\n \t\t      break;\n@@ -5087,7 +5087,7 @@ display_debug_lines_decoded (struct dwarf_section *  section,\n \t\t}\n \n \t      READ_ULEB (n_files, data, end);\n-\t      if (data == end && n_files > 0)\n+\t      if (data >= end && n_files > 0)\n \t\t{\n \t\t  warn (_(\"Corrupt file name list\\n\"));\n \t\t  break;\n@@ -5112,7 +5112,7 @@ display_debug_lines_decoded (struct dwarf_section *  section,\n \n \t\t      READ_ULEB (content_type, format, end);\n \t\t      READ_ULEB (form, format, end);\n-\t\t      if (data == end)\n+\t\t      if (data >= end)\n \t\t\t{\n \t\t\t  warn (_(\"Corrupt file name list\\n\"));\n \t\t\t  break;\n@@ -5159,7 +5159,7 @@ display_debug_lines_decoded (struct dwarf_section *  section,\n \t\t\t\t\t\t\t  NULL, 1, section,\n \t\t\t\t\t\t\t  NULL, '\\t', -1);\n \t\t    }\n-\t\t  if (data == end)\n+\t\t  if (data >= end)\n \t\t    {\n \t\t      warn (_(\"Corrupt file name list\\n\"));\n \t\t      break;"
    }
  ]
}