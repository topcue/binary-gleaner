{
  "sha": "73239888b37b95101d55d1d58b0acb663496b8d7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzMyMzk4ODhiMzdiOTUxMDFkNTVkMWQ1OGIwYWNiNjYzNDk2YjhkNw==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-06-09T06:59:04Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-06-09T06:59:04Z"
    },
    "message": "x86: consistently print prefixes explicitly which are invalid with VEX etc\n\nAll of data size, rep, lock, and rex prefixes are invalid with VEX- and\nalike encoded insns. Make sure they get printed explicitly in all cases,\nto signal the anomaly. With this, do away with \"rex_ignored\" - if there\nis a rex prefix, we want to print it anyway for VEX etc (and there's\nnothing \"ignored\" about it in the first place - such an instruction will\nraise #UD).",
    "tree": {
      "sha": "626fc87c465db6a977b955fb1bebf1ce513eaa48",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/626fc87c465db6a977b955fb1bebf1ce513eaa48"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/73239888b37b95101d55d1d58b0acb663496b8d7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/73239888b37b95101d55d1d58b0acb663496b8d7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/73239888b37b95101d55d1d58b0acb663496b8d7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/73239888b37b95101d55d1d58b0acb663496b8d7/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "18897deb534373660e12511aeabbc1885d942dae",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/18897deb534373660e12511aeabbc1885d942dae",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/18897deb534373660e12511aeabbc1885d942dae"
    }
  ],
  "stats": {
    "total": 40,
    "additions": 26,
    "deletions": 14
  },
  "files": [
    {
      "sha": "8b78964f8155155f0c0c07513e5cb6decbc8be1e",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73239888b37b95101d55d1d58b0acb663496b8d7/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73239888b37b95101d55d1d58b0acb663496b8d7/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=73239888b37b95101d55d1d58b0acb663496b8d7",
      "patch": "@@ -1,3 +1,9 @@\n+2020-06-09  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* testsuite/gas/i386/prefix.s: Add bogus prefix-with-VEX/EVEX\n+\tencoding tests.\n+\t* testsuite/gas/i386/prefix.d: Adjust expectations.\n+\n 2020-06-09  Jan Beulich  <jbeulich@suse.com>\n \n \t* testsuite/gas/i386/prefix.s: Add bogus REP / EVEX.W prefix"
    },
    {
      "sha": "02e1813ea7bb48be96db04e2abca60df87baa197",
      "filename": "gas/testsuite/gas/i386/prefix.d",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73239888b37b95101d55d1d58b0acb663496b8d7/gas/testsuite/gas/i386/prefix.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73239888b37b95101d55d1d58b0acb663496b8d7/gas/testsuite/gas/i386/prefix.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/prefix.d?ref=73239888b37b95101d55d1d58b0acb663496b8d7",
      "patch": "@@ -86,8 +86,11 @@ Disassembly of section .text:\n [ \t]*[a-f0-9]+:\tff cc                \tdec    %esp\n [ \t]*[a-f0-9]+:\t62 f1 ff 08 28       \t\\(bad\\) *\n [ \t]*[a-f0-9]+:\tff cc                \tdec    %esp\n+[ \t]*[a-f0-9]+:\t66 c5 f8 28 c0       \tdata16 vmovaps %xmm0,%xmm0\n+[ \t]*[a-f0-9]+:\tf3 c4 e1 78 28 c0    \trepz vmovaps %xmm0,%xmm0\n+[ \t]*[a-f0-9]+:\tf2 c5 f8 28 c0       \trepnz vmovaps %xmm0,%xmm0\n+[ \t]*[a-f0-9]+:\tf0 62 f1 7c 08 28 c0 \tlock vmovaps %xmm0,%xmm0\n [ \t]*[a-f0-9]+:\tc5 fb e6 40 20       \tvcvtpd2dqx 0x20\\(%eax\\),%xmm0\n [ \t]*[a-f0-9]+:\t62 f1 ff 18 e6 40 04 \tvcvtpd2dq 0x20\\(%eax\\)\\{1to2\\},%xmm0\n [ \t]*[a-f0-9]+:\tc5 fb e6 40 20       \tvcvtpd2dqx 0x20\\(%eax\\),%xmm0\n-\t...\n #pass"
    },
    {
      "sha": "8d563e1626749ab60300d89352c06a3c724b3823",
      "filename": "gas/testsuite/gas/i386/prefix.s",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73239888b37b95101d55d1d58b0acb663496b8d7/gas/testsuite/gas/i386/prefix.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73239888b37b95101d55d1d58b0acb663496b8d7/gas/testsuite/gas/i386/prefix.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/prefix.s?ref=73239888b37b95101d55d1d58b0acb663496b8d7",
      "patch": "@@ -451,6 +451,11 @@\n \n \tint $3\n \n+\t.byte 0x66; vmovaps %xmm0, %xmm0\n+\trepz; {vex3} vmovaps %xmm0, %xmm0\n+\trepnz; vmovaps %xmm0, %xmm0\n+\tlock; {evex} vmovaps %xmm0, %xmm0\n+\n \tvcvtpd2dqx 0x20(%eax),%xmm0\n \tvcvtpd2dq 0x20(%eax){1to2},%xmm0\n \tvcvtpd2dqx 0x20(%eax),%xmm0"
    },
    {
      "sha": "6b3869f0f01569a310745619d9c8143ed8a9b9ca",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73239888b37b95101d55d1d58b0acb663496b8d7/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73239888b37b95101d55d1d58b0acb663496b8d7/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=73239888b37b95101d55d1d58b0acb663496b8d7",
      "patch": "@@ -1,3 +1,11 @@\n+2020-06-09  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-dis.c (rex_ignored): Delete.\n+\t(ckprefix): Drop rex_ignored initialization.\n+\t(get_valid_dis386): Drop setting of rex_ignored.\n+\t(print_insn): Drop checking of rex_ignored. Don't record data\n+\tsize prefix as used with VEX-and-alike encodings.\n+\n 2020-06-09  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-dis.c (MOD_0F12_PREFIX_2, MOD_0F16_PREFIX_2,"
    },
    {
      "sha": "be6958a236cda93c9d43ac7d7dd0d2b4287aea0e",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 3,
      "deletions": 13,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73239888b37b95101d55d1d58b0acb663496b8d7/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73239888b37b95101d55d1d58b0acb663496b8d7/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=73239888b37b95101d55d1d58b0acb663496b8d7",
      "patch": "@@ -153,8 +153,6 @@ static int prefixes;\n static int rex;\n /* Bits of REX we've already used.  */\n static int rex_used;\n-/* REX bits in original REX prefix ignored.  */\n-static int rex_ignored;\n /* Mark parts used in the REX prefix.  When we are testing for\n    empty prefix (for 8bit register REX extension), just mask it\n    out.  Otherwise test for REX bit is excuse for existence of REX\n@@ -11057,7 +11055,6 @@ ckprefix (void)\n {\n   int newrex, i, length;\n   rex = 0;\n-  rex_ignored = 0;\n   prefixes = 0;\n   used_prefixes = 0;\n   rex_used = 0;\n@@ -11517,8 +11514,6 @@ get_valid_dis386 (const struct dis386 *dp, disassemble_info *info)\n \n     case USE_XOP_8F_TABLE:\n       FETCH_DATA (info, codep + 3);\n-      /* All bits in the REX prefix are ignored.  */\n-      rex_ignored = rex;\n       rex = ~(*codep >> 5) & 0x7;\n \n       /* VEX_TABLE_INDEX is the mmmmm part of the XOP byte 1 \"RCB.mmmmm\".  */\n@@ -11580,8 +11575,6 @@ get_valid_dis386 (const struct dis386 *dp, disassemble_info *info)\n     case USE_VEX_C4_TABLE:\n       /* VEX prefix.  */\n       FETCH_DATA (info, codep + 3);\n-      /* All bits in the REX prefix are ignored.  */\n-      rex_ignored = rex;\n       rex = ~(*codep >> 5) & 0x7;\n       switch ((*codep & 0x1f))\n \t{\n@@ -11647,8 +11640,6 @@ get_valid_dis386 (const struct dis386 *dp, disassemble_info *info)\n     case USE_VEX_C5_TABLE:\n       /* VEX prefix.  */\n       FETCH_DATA (info, codep + 2);\n-      /* All bits in the REX prefix are ignored.  */\n-      rex_ignored = rex;\n       rex = (*codep & 0x80) ? 0 : REX_R;\n \n       /* For the 2-byte VEX prefix in 32-bit mode, the highest bit in\n@@ -11697,8 +11688,6 @@ get_valid_dis386 (const struct dis386 *dp, disassemble_info *info)\n       /* EVEX prefix.  */\n       vex.evex = 1;\n       FETCH_DATA (info, codep + 4);\n-      /* All bits in the REX prefix are ignored.  */\n-      rex_ignored = rex;\n       /* The first byte after 0x62.  */\n       rex = ~(*codep >> 5) & 0x7;\n       vex.r = *codep & 0x10;\n@@ -12179,7 +12168,7 @@ print_insn (bfd_vma pc, disassemble_info *info)\n     }\n \n   /* Check if the REX prefix is used.  */\n-  if (rex_ignored == 0 && (rex ^ rex_used) == 0 && last_rex_prefix >= 0)\n+  if ((rex ^ rex_used) == 0 && !need_vex && last_rex_prefix >= 0)\n     all_prefixes[last_rex_prefix] = 0;\n \n   /* Check if the SEG prefix is used.  */\n@@ -12195,7 +12184,8 @@ print_insn (bfd_vma pc, disassemble_info *info)\n \n   /* Check if the DATA prefix is used.  */\n   if ((prefixes & PREFIX_DATA) != 0\n-      && (used_prefixes & PREFIX_DATA) != 0)\n+      && (used_prefixes & PREFIX_DATA) != 0\n+      && !need_vex)\n     all_prefixes[last_data_prefix] = 0;\n \n   /* Print the extra prefixes.  */"
    }
  ]
}