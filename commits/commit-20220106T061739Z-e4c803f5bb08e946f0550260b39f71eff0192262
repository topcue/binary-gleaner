{
  "sha": "e4c803f5bb08e946f0550260b39f71eff0192262",
  "node_id": "C_kwDOANOeidoAKGU0YzgwM2Y1YmIwOGU5NDZmMDU1MDI2MGIzOWY3MWVmZjAxOTIyNjI",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-12-06T07:29:47Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2022-01-06T06:17:39Z"
    },
    "message": "sim: common: migrate to standard uintXX_t types\n\nDrop the sim-specific unsignedXX types and move to the standard uintXX_t\ntypes that C11 provides.",
    "tree": {
      "sha": "b63f746ac5cc0496d802a5c2c27f27598333dcc2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b63f746ac5cc0496d802a5c2c27f27598333dcc2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e4c803f5bb08e946f0550260b39f71eff0192262",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4c803f5bb08e946f0550260b39f71eff0192262",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e4c803f5bb08e946f0550260b39f71eff0192262",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4c803f5bb08e946f0550260b39f71eff0192262/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9850d2d83eb919dc9e333e8ad9d7f308d2d1967b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9850d2d83eb919dc9e333e8ad9d7f308d2d1967b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9850d2d83eb919dc9e333e8ad9d7f308d2d1967b"
    }
  ],
  "stats": {
    "total": 857,
    "additions": 425,
    "deletions": 432
  },
  "files": [
    {
      "sha": "e19b09ba7f0a50fbc7cd1403f1374c6fdf851db1",
      "filename": "sim/common/cgen-accfp.c",
      "status": "modified",
      "additions": 32,
      "deletions": 32,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/cgen-accfp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/cgen-accfp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/cgen-accfp.c?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -25,7 +25,7 @@ addsf (CGEN_FPU* fpu, SF x, SF y)\n   sim_fpu op1;\n   sim_fpu op2;\n   sim_fpu ans;\n-  unsigned32 res;\n+  uint32_t res;\n   sim_fpu_status status;\n \n   sim_fpu_32to (&op1, x);\n@@ -44,7 +44,7 @@ subsf (CGEN_FPU* fpu, SF x, SF y)\n   sim_fpu op1;\n   sim_fpu op2;\n   sim_fpu ans;\n-  unsigned32 res;\n+  uint32_t res;\n   sim_fpu_status status;\n \n   sim_fpu_32to (&op1, x);\n@@ -63,7 +63,7 @@ mulsf (CGEN_FPU* fpu, SF x, SF y)\n   sim_fpu op1;\n   sim_fpu op2;\n   sim_fpu ans;\n-  unsigned32 res;\n+  uint32_t res;\n   sim_fpu_status status;\n \n   sim_fpu_32to (&op1, x);\n@@ -82,7 +82,7 @@ divsf (CGEN_FPU* fpu, SF x, SF y)\n   sim_fpu op1;\n   sim_fpu op2;\n   sim_fpu ans;\n-  unsigned32 res;\n+  uint32_t res;\n   sim_fpu_status status;\n \n   sim_fpu_32to (&op1, x);\n@@ -101,7 +101,7 @@ remsf (CGEN_FPU* fpu, SF x, SF y)\n   sim_fpu op1;\n   sim_fpu op2;\n   sim_fpu ans;\n-  unsigned32 res;\n+  uint32_t res;\n   sim_fpu_status status;\n \n   sim_fpu_32to (&op1, x);\n@@ -119,7 +119,7 @@ negsf (CGEN_FPU* fpu, SF x)\n {\n   sim_fpu op1;\n   sim_fpu ans;\n-  unsigned32 res;\n+  uint32_t res;\n   sim_fpu_status status;\n \n   sim_fpu_32to (&op1, x);\n@@ -136,7 +136,7 @@ abssf (CGEN_FPU* fpu, SF x)\n {\n   sim_fpu op1;\n   sim_fpu ans;\n-  unsigned32 res;\n+  uint32_t res;\n   sim_fpu_status status;\n \n   sim_fpu_32to (&op1, x);\n@@ -153,7 +153,7 @@ sqrtsf (CGEN_FPU* fpu, SF x)\n {\n   sim_fpu op1;\n   sim_fpu ans;\n-  unsigned32 res;\n+  uint32_t res;\n   sim_fpu_status status;\n \n   sim_fpu_32to (&op1, x);\n@@ -170,7 +170,7 @@ invsf (CGEN_FPU* fpu, SF x)\n {\n   sim_fpu op1;\n   sim_fpu ans;\n-  unsigned32 res;\n+  uint32_t res;\n   sim_fpu_status status;\n \n   sim_fpu_32to (&op1, x);\n@@ -188,7 +188,7 @@ minsf (CGEN_FPU* fpu, SF x, SF y)\n   sim_fpu op1;\n   sim_fpu op2;\n   sim_fpu ans;\n-  unsigned32 res;\n+  uint32_t res;\n   sim_fpu_status status;\n \n   sim_fpu_32to (&op1, x);\n@@ -207,7 +207,7 @@ maxsf (CGEN_FPU* fpu, SF x, SF y)\n   sim_fpu op1;\n   sim_fpu op2;\n   sim_fpu ans;\n-  unsigned32 res;\n+  uint32_t res;\n   sim_fpu_status status;\n \n   sim_fpu_32to (&op1, x);\n@@ -322,7 +322,7 @@ static DF\n fextsfdf (CGEN_FPU* fpu, int how UNUSED, SF x)\n {\n   sim_fpu op1;\n-  unsigned64 res;\n+  uint64_t res;\n \n   sim_fpu_32to (&op1, x);\n   sim_fpu_to64 (&res, &op1);\n@@ -334,7 +334,7 @@ static SF\n ftruncdfsf (CGEN_FPU* fpu, int how UNUSED, DF x)\n {\n   sim_fpu op1;\n-  unsigned32 res;\n+  uint32_t res;\n \n   sim_fpu_64to (&op1, x);\n   sim_fpu_to32 (&res, &op1);\n@@ -346,7 +346,7 @@ static SF\n floatsisf (CGEN_FPU* fpu, int how UNUSED, SI x)\n {\n   sim_fpu ans;\n-  unsigned32 res;\n+  uint32_t res;\n \n   sim_fpu_i32to (&ans, x, sim_fpu_round_near);\n   sim_fpu_to32 (&res, &ans);\n@@ -357,7 +357,7 @@ static DF\n floatsidf (CGEN_FPU* fpu, int how UNUSED, SI x)\n {\n   sim_fpu ans;\n-  unsigned64 res;\n+  uint64_t res;\n \n   sim_fpu_i32to (&ans, x, sim_fpu_round_near);\n   sim_fpu_to64 (&res, &ans);\n@@ -368,7 +368,7 @@ static DF\n floatdidf (CGEN_FPU* fpu, int how UNUSED, DI x)\n {\n   sim_fpu ans;\n-  unsigned64 res;\n+  uint64_t res;\n \n   sim_fpu_i64to (&ans, x, sim_fpu_round_near);\n   sim_fpu_to64 (&res, &ans);\n@@ -379,7 +379,7 @@ static SF\n ufloatsisf (CGEN_FPU* fpu, int how UNUSED, USI x)\n {\n   sim_fpu ans;\n-  unsigned32 res;\n+  uint32_t res;\n \n   sim_fpu_u32to (&ans, x, sim_fpu_round_near);\n   sim_fpu_to32 (&res, &ans);\n@@ -390,7 +390,7 @@ static SI\n fixsfsi (CGEN_FPU* fpu, int how UNUSED, SF x)\n {\n   sim_fpu op1;\n-  signed32 res;\n+  int32_t res;\n \n   sim_fpu_32to (&op1, x);\n   sim_fpu_to32i (&res, &op1, sim_fpu_round_near);\n@@ -401,7 +401,7 @@ static SI\n fixdfsi (CGEN_FPU* fpu, int how UNUSED, DF x)\n {\n   sim_fpu op1;\n-  signed32 res;\n+  int32_t res;\n \n   sim_fpu_64to (&op1, x);\n   sim_fpu_to32i (&res, &op1, sim_fpu_round_near);\n@@ -412,7 +412,7 @@ static DI\n fixdfdi (CGEN_FPU* fpu, int how UNUSED, DF x)\n {\n   sim_fpu op1;\n-  signed64 res;\n+  int64_t res;\n \n   sim_fpu_64to (&op1, x);\n   sim_fpu_to64i (&res, &op1, sim_fpu_round_near);\n@@ -423,7 +423,7 @@ static USI\n ufixsfsi (CGEN_FPU* fpu, int how UNUSED, SF x)\n {\n   sim_fpu op1;\n-  unsigned32 res;\n+  uint32_t res;\n \n   sim_fpu_32to (&op1, x);\n   sim_fpu_to32u (&res, &op1, sim_fpu_round_near);\n@@ -438,7 +438,7 @@ adddf (CGEN_FPU* fpu, DF x, DF y)\n   sim_fpu op1;\n   sim_fpu op2;\n   sim_fpu ans;\n-  unsigned64 res;\n+  uint64_t res;\n   sim_fpu_status status;\n \n   sim_fpu_64to (&op1, x);\n@@ -457,7 +457,7 @@ subdf (CGEN_FPU* fpu, DF x, DF y)\n   sim_fpu op1;\n   sim_fpu op2;\n   sim_fpu ans;\n-  unsigned64 res;\n+  uint64_t res;\n   sim_fpu_status status;\n \n   sim_fpu_64to (&op1, x);\n@@ -476,7 +476,7 @@ muldf (CGEN_FPU* fpu, DF x, DF y)\n   sim_fpu op1;\n   sim_fpu op2;\n   sim_fpu ans;\n-  unsigned64 res;\n+  uint64_t res;\n   sim_fpu_status status;\n \n   sim_fpu_64to (&op1, x);\n@@ -495,7 +495,7 @@ divdf (CGEN_FPU* fpu, DF x, DF y)\n   sim_fpu op1;\n   sim_fpu op2;\n   sim_fpu ans;\n-  unsigned64 res;\n+  uint64_t res;\n   sim_fpu_status status;\n \n   sim_fpu_64to (&op1, x);\n@@ -514,7 +514,7 @@ remdf (CGEN_FPU* fpu, DF x, DF y)\n   sim_fpu op1;\n   sim_fpu op2;\n   sim_fpu ans;\n-  unsigned64 res;\n+  uint64_t res;\n   sim_fpu_status status;\n \n   sim_fpu_64to (&op1, x);\n@@ -532,7 +532,7 @@ negdf (CGEN_FPU* fpu, DF x)\n {\n   sim_fpu op1;\n   sim_fpu ans;\n-  unsigned64 res;\n+  uint64_t res;\n   sim_fpu_status status;\n \n   sim_fpu_64to (&op1, x);\n@@ -549,7 +549,7 @@ absdf (CGEN_FPU* fpu, DF x)\n {\n   sim_fpu op1;\n   sim_fpu ans;\n-  unsigned64 res;\n+  uint64_t res;\n   sim_fpu_status status;\n \n   sim_fpu_64to (&op1, x);\n@@ -566,7 +566,7 @@ sqrtdf (CGEN_FPU* fpu, DF x)\n {\n   sim_fpu op1;\n   sim_fpu ans;\n-  unsigned64 res;\n+  uint64_t res;\n   sim_fpu_status status;\n \n   sim_fpu_64to (&op1, x);\n@@ -583,7 +583,7 @@ invdf (CGEN_FPU* fpu, DF x)\n {\n   sim_fpu op1;\n   sim_fpu ans;\n-  unsigned64 res;\n+  uint64_t res;\n   sim_fpu_status status;\n \n   sim_fpu_64to (&op1, x);\n@@ -601,7 +601,7 @@ mindf (CGEN_FPU* fpu, DF x, DF y)\n   sim_fpu op1;\n   sim_fpu op2;\n   sim_fpu ans;\n-  unsigned64 res;\n+  uint64_t res;\n   sim_fpu_status status;\n \n   sim_fpu_64to (&op1, x);\n@@ -620,7 +620,7 @@ maxdf (CGEN_FPU* fpu, DF x, DF y)\n   sim_fpu op1;\n   sim_fpu op2;\n   sim_fpu ans;\n-  unsigned64 res;\n+  uint64_t res;\n   sim_fpu_status status;\n \n   sim_fpu_64to (&op1, x);"
    },
    {
      "sha": "46364b68a295824a91fcca5e4abb6de5df6c4e93",
      "filename": "sim/common/cgen-par.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/cgen-par.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/cgen-par.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/cgen-par.h?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -38,7 +38,7 @@ enum cgen_write_queue_kind {\n typedef struct {\n   enum cgen_write_queue_kind kind; /* Used to select union member below.  */\n   IADDR insn_address;       /* Address of the insn performing the write.  */\n-  unsigned32 flags;         /* Target specific flags.  */\n+  uint32_t flags;         /* Target specific flags.  */\n   long       word1;         /* Target specific field.  */\n   union {\n     struct {"
    },
    {
      "sha": "149ea8a127cda6d10c031de3b1431ba5d6ffe766",
      "filename": "sim/common/cgen-trace.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/cgen-trace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/cgen-trace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/cgen-trace.c?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -370,9 +370,9 @@ sim_cgen_disassemble_insn (SIM_CPU *cpu, const CGEN_INSN *insn,\n   struct disassemble_info disasm_info;\n   SFILE sfile;\n   union {\n-    unsigned8 bytes[CGEN_MAX_INSN_SIZE];\n-    unsigned16 shorts[8];\n-    unsigned32 words[4];\n+    uint8_t bytes[CGEN_MAX_INSN_SIZE];\n+    uint16_t shorts[8];\n+    uint32_t words[4];\n   } insn_buf;\n   SIM_DESC sd = CPU_STATE (cpu);\n   CGEN_CPU_DESC cd = CPU_CPU_DESC (cpu);"
    },
    {
      "sha": "e767c68b472b2b148c9b031bf92e01fbf258c2e5",
      "filename": "sim/common/cgen-types.h",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/cgen-types.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/cgen-types.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/cgen-types.h?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -61,15 +61,15 @@ extern const char * const cgen_mode_names[];\n #undef VOID\n typedef void VOID;\n typedef unsigned char BI;\n-typedef signed8 QI;\n-typedef signed16 HI;\n-typedef signed32 SI;\n-typedef unsigned8 UQI;\n-typedef unsigned16 UHI;\n-typedef unsigned32 USI;\n-\n-typedef signed64 DI;\n-typedef unsigned64 UDI;\n+typedef int8_t QI;\n+typedef int16_t HI;\n+typedef int32_t SI;\n+typedef uint8_t UQI;\n+typedef uint16_t UHI;\n+typedef uint32_t USI;\n+\n+typedef int64_t DI;\n+typedef uint64_t UDI;\n #define GETLODI(di) ((SI) (di))\n #define GETHIDI(di) ((SI) ((UDI) (di) >> 32))\n #define SETLODI(di, val) ((di) = (((di) & 0xffffffff00000000LL) | (val)))"
    },
    {
      "sha": "5f42fdab75b0ce2023f7921e79dcfdb8dda56619",
      "filename": "sim/common/dv-pal.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/dv-pal.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/dv-pal.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/dv-pal.c?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -181,8 +181,8 @@ typedef struct _hw_pal_console_buffer {\n \n typedef struct _hw_pal_counter {\n   struct hw_event *handler;\n-  signed64 start;\n-  unsigned32 delta;\n+  int64_t start;\n+  uint32_t delta;\n   int periodic_p;\n } hw_pal_counter;\n \n@@ -237,10 +237,10 @@ do_counter_read (struct hw *me,\n \t\t hw_pal_device *pal,\n \t\t const char *reg,\n \t\t hw_pal_counter *counter,\n-\t\t unsigned32 *word,\n+\t\t uint32_t *word,\n \t\t unsigned nr_bytes)\n {\n-  unsigned32 val;\n+  uint32_t val;\n   if (nr_bytes != 4)\n     hw_abort (me, \"%s - bad read size must be 4 bytes\", reg);\n   val = counter->delta;\n@@ -253,10 +253,10 @@ do_counter_value (struct hw *me,\n \t\t  hw_pal_device *pal,\n \t\t  const char *reg,\n \t\t  hw_pal_counter *counter,\n-\t\t  unsigned32 *word,\n+\t\t  uint32_t *word,\n \t\t  unsigned nr_bytes)\n {\n-  unsigned32 val;\n+  uint32_t val;\n   if (nr_bytes != 4)\n     hw_abort (me, \"%s - bad read size must be 4 bytes\", reg);\n   if (counter->delta != 0)\n@@ -273,7 +273,7 @@ do_counter_write (struct hw *me,\n \t\t  hw_pal_device *pal,\n \t\t  const char *reg,\n \t\t  hw_pal_counter *counter,\n-\t\t  const unsigned32 *word,\n+\t\t  const uint32_t *word,\n \t\t  unsigned nr_bytes)\n {\n   if (nr_bytes != 4)"
    },
    {
      "sha": "9bde016502441b5eb70db2e832e47d5c3dbdcc00",
      "filename": "sim/common/hw-events.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/hw-events.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/hw-events.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/hw-events.c?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -87,7 +87,7 @@ bounce_hw_event (SIM_DESC sd,\n \n struct hw_event *\n hw_event_queue_schedule (struct hw *me,\n-\t\t\t signed64 delta_time,\n+\t\t\t int64_t delta_time,\n \t\t\t hw_event_callback *callback,\n \t\t\t void *data)\n {\n@@ -96,7 +96,7 @@ hw_event_queue_schedule (struct hw *me,\n \n struct hw_event *\n hw_event_queue_schedule_tracef (struct hw *me,\n-\t\t\t\tsigned64 delta_time,\n+\t\t\t\tint64_t delta_time,\n \t\t\t\thw_event_callback *callback,\n \t\t\t\tvoid *data,\n \t\t\t\tconst char *fmt,\n@@ -112,7 +112,7 @@ hw_event_queue_schedule_tracef (struct hw *me,\n \n struct hw_event *\n hw_event_queue_schedule_vtracef (struct hw *me,\n-\t\t\t\t signed64 delta_time,\n+\t\t\t\t int64_t delta_time,\n \t\t\t\t hw_event_callback *callback,\n \t\t\t\t void *data,\n \t\t\t\t const char *fmt,\n@@ -160,17 +160,17 @@ hw_event_queue_deschedule (struct hw *me,\n }\n \n \n-signed64\n+int64_t\n hw_event_queue_time (struct hw *me)\n {\n   return sim_events_time (hw_system (me));\n }\n \n /* Returns the time that remains before the event is raised. */\n-signed64\n+int64_t\n hw_event_remain_time (struct hw *me, struct hw_event *event)\n {\n-  signed64 t;\n+  int64_t t;\n \n   t = sim_events_remain_time (hw_system (me), event->real);\n   return t;"
    },
    {
      "sha": "adb285f229ef2245a6c9199b2c6b6ba5f2705648",
      "filename": "sim/common/hw-events.h",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/hw-events.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/hw-events.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/hw-events.h?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -33,21 +33,21 @@ typedef void (hw_event_callback) (struct hw *me, void *data);\n \n struct hw_event *hw_event_queue_schedule\n (struct hw *me,\n- signed64 delta_time,\n+ int64_t delta_time,\n  hw_event_callback *handler,\n  void *data);\n \n struct hw_event *hw_event_queue_schedule_tracef\n (struct hw *me,\n- signed64 delta_time,\n+ int64_t delta_time,\n  hw_event_callback *handler,\n  void *data,\n  const char *fmt,\n  ...) ATTRIBUTE_NULL_PRINTF (5, 6);\n \n struct hw_event *hw_event_queue_schedule_vtracef\n (struct hw *me,\n- signed64 delta_time,\n+ int64_t delta_time,\n  hw_event_callback *handler,\n  void *data,\n  const char *fmt,\n@@ -58,11 +58,11 @@ void hw_event_queue_deschedule\n (struct hw *me,\n  struct hw_event *event_to_remove);\n \n-signed64 hw_event_queue_time\n+int64_t hw_event_queue_time\n (struct hw *me);\n \n /* Returns the time that remains before the event is raised. */\n-signed64 hw_event_remain_time\n+int64_t hw_event_remain_time\n (struct hw *me, struct hw_event *event);\n \n #endif"
    },
    {
      "sha": "3d2b5cdda7aa68c59d4a28e6902358a705ae3996",
      "filename": "sim/common/hw-properties.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/hw-properties.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/hw-properties.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/hw-properties.c?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -368,7 +368,7 @@ hw_add_boolean_property (struct hw *me,\n \t\t\t const char *property,\n \t\t\t int boolean)\n {\n-  signed32 new_boolean = (boolean ? -1 : 0);\n+  int32_t new_boolean = (boolean ? -1 : 0);\n   hw_add_property (me, property, boolean_property,\n \t\t   &new_boolean, sizeof (new_boolean),\n \t\t   &new_boolean, sizeof (new_boolean),"
    },
    {
      "sha": "56319333d76f9975d888b490826a395e23959885",
      "filename": "sim/common/hw-tree.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/hw-tree.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/hw-tree.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/hw-tree.c?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -881,7 +881,7 @@ hw_tree_vparse (struct hw *current,\n #endif\n \t    case '[':\n \t      {\n-\t\tunsigned8 words[1024];\n+\t\tuint8_t words[1024];\n \t\tchar *curr = spec.value + 1;\n \t\tint nr_words = 0;\n \t\twhile (1)\n@@ -1127,7 +1127,7 @@ print_properties (struct hw *me,\n \t\t  }\n \t\telse\n \t\t  {\n-\t\t    unsigned8 *w = (unsigned8*)property->array;\n+\t\t    uint8_t *w = (uint8_t*)property->array;\n \t\t    p->print (p->file, \" [\");\n \t\t    while ((char*)w - (char*)property->array < property->sizeof_array)\n \t\t      {"
    },
    {
      "sha": "a55f64845dcd2af30f6e9382287815906bf80267",
      "filename": "sim/common/sim-alu.h",
      "status": "modified",
      "additions": 96,
      "deletions": 96,
      "changes": 192,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-alu.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-alu.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-alu.h?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -431,12 +431,12 @@\n    overflow method 2 are used. */\n \n #define ALU8_BEGIN(VAL) \\\n-unsigned alu8_cr = (unsigned8) (VAL); \\\n-signed alu8_vr = (signed8) (alu8_cr)\n+unsigned alu8_cr = (uint8_t) (VAL); \\\n+signed alu8_vr = (int8_t) (alu8_cr)\n \n #define ALU8_SET(VAL) \\\n-alu8_cr = (unsigned8) (VAL); \\\n-alu8_vr = (signed8) (alu8_cr)\n+alu8_cr = (uint8_t) (VAL); \\\n+alu8_vr = (int8_t) (alu8_cr)\n \n #define ALU8_SET_CARRY_BORROW(CARRY)\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n@@ -449,9 +449,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ALU8_HAD_CARRY_BORROW (alu8_cr & LSBIT32(8))\n #define ALU8_HAD_OVERFLOW (((alu8_vr >> 8) ^ alu8_vr) & LSBIT32 (8-1))\n \n-#define ALU8_RESULT ((unsigned8) alu8_cr)\n-#define ALU8_CARRY_BORROW_RESULT ((unsigned8) alu8_cr)\n-#define ALU8_OVERFLOW_RESULT ((unsigned8) alu8_vr)\n+#define ALU8_RESULT ((uint8_t) alu8_cr)\n+#define ALU8_CARRY_BORROW_RESULT ((uint8_t) alu8_cr)\n+#define ALU8_OVERFLOW_RESULT ((uint8_t) alu8_vr)\n \n /* #define ALU8_END ????? - target dependant */\n \n@@ -463,12 +463,12 @@ do {\t\t\t\t\t\t\t\t\t\\\n    overflow method 2 are used. */\n \n #define ALU16_BEGIN(VAL) \\\n-signed alu16_cr = (unsigned16) (VAL); \\\n-unsigned alu16_vr = (signed16) (alu16_cr)\n+signed alu16_cr = (uint16_t) (VAL); \\\n+unsigned alu16_vr = (int16_t) (alu16_cr)\n \n #define ALU16_SET(VAL) \\\n-alu16_cr = (unsigned16) (VAL); \\\n-alu16_vr = (signed16) (alu16_cr)\n+alu16_cr = (uint16_t) (VAL); \\\n+alu16_vr = (int16_t) (alu16_cr)\n \n #define ALU16_SET_CARRY_BORROW(CARRY)\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n@@ -481,9 +481,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define ALU16_HAD_CARRY_BORROW (alu16_cr & LSBIT32(16))\n #define ALU16_HAD_OVERFLOW (((alu16_vr >> 16) ^ alu16_vr) & LSBIT32 (16-1))\n \n-#define ALU16_RESULT ((unsigned16) alu16_cr)\n-#define ALU16_CARRY_BORROW_RESULT ((unsigned16) alu16_cr)\n-#define ALU16_OVERFLOW_RESULT ((unsigned16) alu16_vr)\n+#define ALU16_RESULT ((uint16_t) alu16_cr)\n+#define ALU16_CARRY_BORROW_RESULT ((uint16_t) alu16_cr)\n+#define ALU16_OVERFLOW_RESULT ((uint16_t) alu16_vr)\n \n /* #define ALU16_END ????? - target dependant */\n \n@@ -495,7 +495,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n    method 4 and overflow method 4 are used. */\n \n #define ALU32_BEGIN(VAL) \\\n-unsigned32 alu32_r = (VAL); \\\n+uint32_t alu32_r = (VAL); \\\n int alu32_c = 0; \\\n int alu32_v = 0\n \n@@ -521,7 +521,7 @@ alu32_v = 0\n    arithmetic, it is still used. */\n \n #define ALU64_BEGIN(VAL) \\\n-unsigned64 alu64_r = (VAL); \\\n+uint64_t alu64_r = (VAL); \\\n int alu64_c = 0; \\\n int alu64_v = 0\n \n@@ -560,25 +560,25 @@ alu64_v = 0\n \n #define ALU8_ADD(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned8 alu8add_val = (VAL);\t\t\t\t\t\\\n+  uint8_t alu8add_val = (VAL);\t\t\t\t\t\\\n   ALU8_ADDC (alu8add_val);\t\t\t\t\t\t\\\n } while (0)\n \n #define ALU16_ADD(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned16 alu16add_val = (VAL);\t\t\t\t\t\\\n+  uint16_t alu16add_val = (VAL);\t\t\t\t\t\\\n   ALU16_ADDC (alu8add_val);\t\t\t\t\t\t\\\n } while (0)\n \n #define ALU32_ADD(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned32 alu32add_val = (VAL);\t\t\t\t\t\\\n+  uint32_t alu32add_val = (VAL);\t\t\t\t\t\\\n   ALU32_ADDC (alu32add_val);\t\t\t\t\t\t\\\n } while (0)\n \n #define ALU64_ADD(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned64 alu64add_val = (unsigned64) (VAL);\t\t\t\t\\\n+  uint64_t alu64add_val = (uint64_t) (VAL);\t\t\t\t\\\n   ALU64_ADDC (alu64add_val);\t\t\t\t\t\t\\\n } while (0)\n \n@@ -590,34 +590,34 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define ALU8_ADDC(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned8 alu8addc_val = (VAL);\t\t\t\t\t\\\n-  alu8_cr += (unsigned8)(alu8addc_val);\t\t\t\t\t\\\n-  alu8_vr += (signed8)(alu8addc_val);\t\t\t\t\t\\\n+  uint8_t alu8addc_val = (VAL);\t\t\t\t\t\\\n+  alu8_cr += (uint8_t)(alu8addc_val);\t\t\t\t\t\\\n+  alu8_vr += (int8_t)(alu8addc_val);\t\t\t\t\t\\\n } while (0)\n \n #define ALU16_ADDC(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned16 alu16addc_val = (VAL);\t\t\t\t\t\\\n-  alu16_cr += (unsigned16)(alu16addc_val);\t\t\t\t\\\n-  alu16_vr += (signed16)(alu16addc_val);\t\t\t\t\\\n+  uint16_t alu16addc_val = (VAL);\t\t\t\t\t\\\n+  alu16_cr += (uint16_t)(alu16addc_val);\t\t\t\t\\\n+  alu16_vr += (int16_t)(alu16addc_val);\t\t\t\t\\\n } while (0)\n \n #define ALU32_ADDC(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned32 alu32addc_val = (VAL);\t\t\t\t\t\\\n-  unsigned32 alu32addc_sign = alu32addc_val ^ alu32_r;\t\t\t\\\n+  uint32_t alu32addc_val = (VAL);\t\t\t\t\t\\\n+  uint32_t alu32addc_sign = alu32addc_val ^ alu32_r;\t\t\t\\\n   alu32_r += (alu32addc_val);\t\t\t\t\t\t\\\n   alu32_c = (alu32_r < alu32addc_val);\t\t\t\t\t\\\n-  alu32_v = ((alu32addc_sign ^ - (unsigned32)alu32_c) ^ alu32_r) >> 31;\t\\\n+  alu32_v = ((alu32addc_sign ^ - (uint32_t)alu32_c) ^ alu32_r) >> 31;\t\\\n } while (0)\n \n #define ALU64_ADDC(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned64 alu64addc_val = (unsigned64) (VAL);\t\t\t\\\n-  unsigned64 alu64addc_sign = alu64addc_val ^ alu64_r;\t\t\t\\\n+  uint64_t alu64addc_val = (uint64_t) (VAL);\t\t\t\\\n+  uint64_t alu64addc_sign = alu64addc_val ^ alu64_r;\t\t\t\\\n   alu64_r += (alu64addc_val);\t\t\t\t\t\t\\\n   alu64_c = (alu64_r < alu64addc_val);\t\t\t\t\t\\\n-  alu64_v = ((alu64addc_sign ^ - (unsigned64)alu64_c) ^ alu64_r) >> 63;\t\\\n+  alu64_v = ((alu64addc_sign ^ - (uint64_t)alu64_c) ^ alu64_r) >> 63;\t\\\n } while (0)\n \n #define ALU_ADDC XCONCAT3(ALU,WITH_TARGET_WORD_BITSIZE,_ADDC)\n@@ -628,40 +628,40 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define ALU8_ADDC_C(VAL,C)\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned8 alu8addcc_val = (VAL);\t\t\t\t\t\\\n-  unsigned8 alu8addcc_c = (C);\t\t\t\t\t\t\\\n-  alu8_cr += (unsigned)(unsigned8)alu8addcc_val + alu8addcc_c;\t\t\\\n-  alu8_vr += (signed)(signed8)(alu8addcc_val) + alu8addcc_c;\t\t\\\n+  uint8_t alu8addcc_val = (VAL);\t\t\t\t\t\\\n+  uint8_t alu8addcc_c = (C);\t\t\t\t\t\t\\\n+  alu8_cr += (unsigned)(uint8_t)alu8addcc_val + alu8addcc_c;\t\t\\\n+  alu8_vr += (signed)(int8_t)(alu8addcc_val) + alu8addcc_c;\t\t\\\n } while (0)\n \n #define ALU16_ADDC_C(VAL,C)\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned16 alu16addcc_val = (VAL);\t\t\t\t\t\\\n-  unsigned16 alu16addcc_c = (C);\t\t\t\t\t\\\n-  alu16_cr += (unsigned)(unsigned16)alu16addcc_val + alu16addcc_c;\t\\\n-  alu16_vr += (signed)(signed16)(alu16addcc_val) + alu16addcc_c;\t\\\n+  uint16_t alu16addcc_val = (VAL);\t\t\t\t\t\\\n+  uint16_t alu16addcc_c = (C);\t\t\t\t\t\\\n+  alu16_cr += (unsigned)(uint16_t)alu16addcc_val + alu16addcc_c;\t\\\n+  alu16_vr += (signed)(int16_t)(alu16addcc_val) + alu16addcc_c;\t\\\n } while (0)\n \n #define ALU32_ADDC_C(VAL,C)\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned32 alu32addcc_val = (VAL);\t\t\t\t\t\\\n-  unsigned32 alu32addcc_c = (C);\t\t\t\t\t\\\n-  unsigned32 alu32addcc_sign = (alu32addcc_val ^ alu32_r);\t\t\\\n+  uint32_t alu32addcc_val = (VAL);\t\t\t\t\t\\\n+  uint32_t alu32addcc_c = (C);\t\t\t\t\t\\\n+  uint32_t alu32addcc_sign = (alu32addcc_val ^ alu32_r);\t\t\\\n   alu32_r += (alu32addcc_val + alu32addcc_c);\t\t\t\t\\\n   alu32_c = ((alu32_r < alu32addcc_val)\t\t\t\t\t\\\n              || (alu32addcc_c && alu32_r == alu32addcc_val));\t\t\\\n-  alu32_v = ((alu32addcc_sign ^ - (unsigned32)alu32_c) ^ alu32_r) >> 31;\\\n+  alu32_v = ((alu32addcc_sign ^ - (uint32_t)alu32_c) ^ alu32_r) >> 31;\\\n } while (0)\n \n #define ALU64_ADDC_C(VAL,C)\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned64 alu64addcc_val = (VAL);\t\t\t\t\t\\\n-  unsigned64 alu64addcc_c = (C);\t\t\t\t\t\\\n-  unsigned64 alu64addcc_sign = (alu64addcc_val ^ alu64_r);\t\t\\\n+  uint64_t alu64addcc_val = (VAL);\t\t\t\t\t\\\n+  uint64_t alu64addcc_c = (C);\t\t\t\t\t\\\n+  uint64_t alu64addcc_sign = (alu64addcc_val ^ alu64_r);\t\t\\\n   alu64_r += (alu64addcc_val + alu64addcc_c);\t\t\t\t\\\n   alu64_c = ((alu64_r < alu64addcc_val)\t\t\t\t\t\\\n              || (alu64addcc_c && alu64_r == alu64addcc_val));\t\t\\\n-  alu64_v = ((alu64addcc_sign ^ - (unsigned64)alu64_c) ^ alu64_r) >> 63;\\\n+  alu64_v = ((alu64addcc_sign ^ - (uint64_t)alu64_c) ^ alu64_r) >> 63;\\\n } while (0)\n \n #define ALU_ADDC_C XCONCAT3(ALU,WITH_TARGET_WORD_BITSIZE,_ADDC_C)\n@@ -672,25 +672,25 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define ALU8_SUB(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned8 alu8sub_val = (VAL);\t\t\t\t\t\\\n+  uint8_t alu8sub_val = (VAL);\t\t\t\t\t\\\n   ALU8_ADDC_C (~alu8sub_val, 1);\t\t\t\t\t\\\n } while (0)\n \n #define ALU16_SUB(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned16 alu16sub_val = (VAL);\t\t\t\t\t\\\n+  uint16_t alu16sub_val = (VAL);\t\t\t\t\t\\\n   ALU16_ADDC_C (~alu16sub_val, 1);\t\t\t\t\t\\\n } while (0)\n \n #define ALU32_SUB(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned32 alu32sub_val = (VAL);\t\t\t\t\t\\\n+  uint32_t alu32sub_val = (VAL);\t\t\t\t\t\\\n   ALU32_ADDC_C (~alu32sub_val, 1);\t\t\t\t\t\\\n } while (0)\n \n #define ALU64_SUB(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned64 alu64sub_val = (VAL);\t\t\t\t\t\\\n+  uint64_t alu64sub_val = (VAL);\t\t\t\t\t\\\n   ALU64_ADDC_C (~alu64sub_val, 1);\t\t\t\t\t\\\n } while (0)\n \n@@ -702,25 +702,25 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define ALU8_SUBC(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned8 alu8subc_val = (VAL);\t\t\t\t\t\\\n+  uint8_t alu8subc_val = (VAL);\t\t\t\t\t\\\n   ALU8_ADDC_C (~alu8subc_val, 1);\t\t\t\t\t\\\n } while (0)\n \n #define ALU16_SUBC(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned16 alu16subc_val = (VAL);\t\t\t\t\t\\\n+  uint16_t alu16subc_val = (VAL);\t\t\t\t\t\\\n   ALU16_ADDC_C (~alu16subc_val, 1);\t\t\t\t\t\\\n } while (0)\n \n #define ALU32_SUBC(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned32 alu32subc_val = (VAL);\t\t\t\t\t\\\n+  uint32_t alu32subc_val = (VAL);\t\t\t\t\t\\\n   ALU32_ADDC_C (~alu32subc_val, 1);\t\t\t\t\t\\\n } while (0)\n \n #define ALU64_SUBC(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned64 alu64subc_val = (VAL);\t\t\t\t\t\\\n+  uint64_t alu64subc_val = (VAL);\t\t\t\t\t\\\n   ALU64_ADDC_C (~alu64subc_val, 1);\t\t\t\t\t\\\n } while (0)\n \n@@ -732,29 +732,29 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define ALU8_SUBC_X(VAL,C)\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned8 alu8subcx_val = (VAL);\t\t\t\t\t\\\n-  unsigned8 alu8subcx_c = (C);\t\t\t\t\t\t\\\n+  uint8_t alu8subcx_val = (VAL);\t\t\t\t\t\\\n+  uint8_t alu8subcx_c = (C);\t\t\t\t\t\t\\\n   ALU8_ADDC_C (~alu8subcx_val, alu8subcx_c);\t\t\t\t\\\n } while (0)\n \n #define ALU16_SUBC_X(VAL,C)\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned16 alu16subcx_val = (VAL);\t\t\t\t\t\\\n-  unsigned16 alu16subcx_c = (C);\t\t\t\t\t\\\n+  uint16_t alu16subcx_val = (VAL);\t\t\t\t\t\\\n+  uint16_t alu16subcx_c = (C);\t\t\t\t\t\\\n   ALU16_ADDC_C (~alu16subcx_val, alu16subcx_c);\t\t\t\t\\\n } while (0)\n \n #define ALU32_SUBC_X(VAL,C)\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned32 alu32subcx_val = (VAL);\t\t\t\t\t\\\n-  unsigned32 alu32subcx_c = (C);\t\t\t\t\t\\\n+  uint32_t alu32subcx_val = (VAL);\t\t\t\t\t\\\n+  uint32_t alu32subcx_c = (C);\t\t\t\t\t\\\n   ALU32_ADDC_C (~alu32subcx_val, alu32subcx_c);\t\t\t\t\\\n } while (0)\n \n #define ALU64_SUBC_X(VAL,C)\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned64 alu64subcx_val = (VAL);\t\t\t\t\t\\\n-  unsigned64 alu64subcx_c = (C);\t\t\t\t\t\\\n+  uint64_t alu64subcx_val = (VAL);\t\t\t\t\t\\\n+  uint64_t alu64subcx_c = (C);\t\t\t\t\t\\\n   ALU64_ADDC_C (~alu64subcx_val, alu64subcx_c);\t\t\t\t\\\n } while (0)\n \n@@ -766,34 +766,34 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define ALU8_SUBB(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned8 alu8subb_val = (VAL);\t\t\t\t\t\\\n-  alu8_cr -= (unsigned)(unsigned8)alu8subb_val;\t\t\t\t\\\n-  alu8_vr -= (signed)(signed8)alu8subb_val;\t\t\t\t\\\n+  uint8_t alu8subb_val = (VAL);\t\t\t\t\t\\\n+  alu8_cr -= (unsigned)(uint8_t)alu8subb_val;\t\t\t\t\\\n+  alu8_vr -= (signed)(int8_t)alu8subb_val;\t\t\t\t\\\n } while (0)\n \n #define ALU16_SUBB(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned16 alu16subb_val = (VAL);\t\t\t\t\t\\\n-  alu16_cr -= (unsigned)(unsigned16)alu16subb_val;\t\t\t\\\n-  alu16_vr -= (signed)(signed16)alu16subb_val;\t\t\t\t\\\n+  uint16_t alu16subb_val = (VAL);\t\t\t\t\t\\\n+  alu16_cr -= (unsigned)(uint16_t)alu16subb_val;\t\t\t\\\n+  alu16_vr -= (signed)(int16_t)alu16subb_val;\t\t\t\t\\\n } while (0)\n \n #define ALU32_SUBB(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned32 alu32subb_val = (VAL);\t\t\t\t\t\\\n-  unsigned32 alu32subb_sign = alu32subb_val ^ alu32_r;\t\t\t\\\n+  uint32_t alu32subb_val = (VAL);\t\t\t\t\t\\\n+  uint32_t alu32subb_sign = alu32subb_val ^ alu32_r;\t\t\t\\\n   alu32_c = (alu32_r < alu32subb_val);\t\t\t\t\t\\\n   alu32_r -= (alu32subb_val);\t\t\t\t\t\t\\\n-  alu32_v = ((alu32subb_sign ^ - (unsigned32)alu32_c) ^ alu32_r) >> 31;\t\\\n+  alu32_v = ((alu32subb_sign ^ - (uint32_t)alu32_c) ^ alu32_r) >> 31;\t\\\n } while (0)\n \n #define ALU64_SUBB(VAL)\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned64 alu64subb_val = (VAL);\t\t\t\t\t\\\n-  unsigned64 alu64subb_sign = alu64subb_val ^ alu64_r;\t\t\t\\\n+  uint64_t alu64subb_val = (VAL);\t\t\t\t\t\\\n+  uint64_t alu64subb_sign = alu64subb_val ^ alu64_r;\t\t\t\\\n   alu64_c = (alu64_r < alu64subb_val);\t\t\t\t\t\\\n   alu64_r -= (alu64subb_val);\t\t\t\t\t\t\\\n-  alu64_v = ((alu64subb_sign ^ - (unsigned64)alu64_c) ^ alu64_r) >> 31;\t\\\n+  alu64_v = ((alu64subb_sign ^ - (uint64_t)alu64_c) ^ alu64_r) >> 31;\t\\\n } while (0)\n \n #define ALU_SUBB XCONCAT3(ALU,WITH_TARGET_WORD_BITSIZE,_SUBB)\n@@ -804,34 +804,34 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define ALU8_SUBB_B(VAL,B)\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned8 alu8subbb_val = (VAL);\t\t\t\t\t\\\n-  unsigned8 alu8subbb_b = (B);\t\t\t\t\t\t\\\n-  alu8_cr -= (unsigned)(unsigned8)alu8subbb_val;\t\t\t\\\n-  alu8_cr -= (unsigned)(unsigned8)alu8subbb_b;\t\t\t\t\\\n-  alu8_vr -= (signed)(signed8)alu8subbb_val + alu8subbb_b;\t\t\\\n+  uint8_t alu8subbb_val = (VAL);\t\t\t\t\t\\\n+  uint8_t alu8subbb_b = (B);\t\t\t\t\t\t\\\n+  alu8_cr -= (unsigned)(uint8_t)alu8subbb_val;\t\t\t\\\n+  alu8_cr -= (unsigned)(uint8_t)alu8subbb_b;\t\t\t\t\\\n+  alu8_vr -= (signed)(int8_t)alu8subbb_val + alu8subbb_b;\t\t\\\n } while (0)\n \n #define ALU16_SUBB_B(VAL,B)\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned16 alu16subbb_val = (VAL);\t\t\t\t\t\\\n-  unsigned16 alu16subbb_b = (B);\t\t\t\t\t\\\n-  alu16_cr -= (unsigned)(unsigned16)alu16subbb_val;\t\t\t\\\n-  alu16_cr -= (unsigned)(unsigned16)alu16subbb_b;\t\t\t\\\n-  alu16_vr -= (signed)(signed16)alu16subbb_val + alu16subbb_b;\t\t\\\n+  uint16_t alu16subbb_val = (VAL);\t\t\t\t\t\\\n+  uint16_t alu16subbb_b = (B);\t\t\t\t\t\\\n+  alu16_cr -= (unsigned)(uint16_t)alu16subbb_val;\t\t\t\\\n+  alu16_cr -= (unsigned)(uint16_t)alu16subbb_b;\t\t\t\\\n+  alu16_vr -= (signed)(int16_t)alu16subbb_val + alu16subbb_b;\t\t\\\n } while (0)\n \n #define ALU32_SUBB_B(VAL,B)\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned32 alu32subbb_val = (VAL);\t\t\t\t\t\\\n-  unsigned32 alu32subbb_b = (B);\t\t\t\t\t\\\n+  uint32_t alu32subbb_val = (VAL);\t\t\t\t\t\\\n+  uint32_t alu32subbb_b = (B);\t\t\t\t\t\\\n   ALU32_ADDC_C (~alu32subbb_val, !alu32subbb_b);\t\t\t\\\n   alu32_c = !alu32_c;\t\t\t\t\t\t\t\\\n } while (0)\n \n #define ALU64_SUBB_B(VAL,B)\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned64 alu64subbb_val = (VAL);\t\t\t\t\t\\\n-  unsigned64 alu64subbb_b = (B);\t\t\t\t\t\\\n+  uint64_t alu64subbb_val = (VAL);\t\t\t\t\t\\\n+  uint64_t alu64subbb_b = (B);\t\t\t\t\t\\\n   ALU64_ADDC_C (~alu64subbb_val, !alu64subbb_b);\t\t\t\\\n   alu64_c = !alu64_c;\t\t\t\t\t\t\t\\\n } while (0)\n@@ -858,14 +858,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define ALU32_NEG()\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned32 alu32neg_val = (ALU32_RESULT);\t\t\t\t\\\n+  uint32_t alu32neg_val = (ALU32_RESULT);\t\t\t\t\\\n   ALU32_SET (1);\t\t\t\t\t\t\t\\\n   ALU32_ADDC (~alu32neg_val);\t\t\t\t\t\t\\\n } while(0)\n \n #define ALU64_NEG()\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned64 alu64neg_val = (ALU64_RESULT);\t\t\t\t\\\n+  uint64_t alu64neg_val = (ALU64_RESULT);\t\t\t\t\\\n   ALU64_SET (1);\t\t\t\t\t\t\t\\\n   ALU64_ADDC (~alu64neg_val);\t\t\t\t\t\t\\\n } while (0)\n@@ -893,14 +893,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define ALU32_NEGC()\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned32 alu32negc_val = (ALU32_RESULT);\t\t\t\t\\\n+  uint32_t alu32negc_val = (ALU32_RESULT);\t\t\t\t\\\n   ALU32_SET (1);\t\t\t\t\t\t\t\\\n   ALU32_ADDC (~alu32negc_val);\t\t\t\t\t\t\\\n } while(0)\n \n #define ALU64_NEGC()\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned64 alu64negc_val = (ALU64_RESULT);\t\t\t\t\\\n+  uint64_t alu64negc_val = (ALU64_RESULT);\t\t\t\t\\\n   ALU64_SET (1);\t\t\t\t\t\t\t\\\n   ALU64_ADDC (~alu64negc_val);\t\t\t\t\t\t\\\n } while (0)\n@@ -928,14 +928,14 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define ALU32_NEGB()\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned32 alu32negb_val = (ALU32_RESULT);\t\t\t\t\\\n+  uint32_t alu32negb_val = (ALU32_RESULT);\t\t\t\t\\\n   ALU32_SET (0);\t\t\t\t\t\t\t\\\n   ALU32_SUBB (alu32negb_val);\t\t\t\t\t\t\\\n } while(0)\n \n #define ALU64_NEGB()\t\t\t\t\t\t\t\\\n do {\t\t\t\t\t\t\t\t\t\\\n-  unsigned64 alu64negb_val = (ALU64_RESULT);\t\t\t\t\\\n+  uint64_t alu64negb_val = (ALU64_RESULT);\t\t\t\t\\\n   ALU64_SET (0);\t\t\t\t\t\t\t\\\n   ALU64_SUBB (alu64negb_val);\t\t\t\t\t\t\\\n } while (0)"
    },
    {
      "sha": "b1352d5a3053e3aedb689d3a806a5cd291b15e15",
      "filename": "sim/common/sim-bits.h",
      "status": "modified",
      "additions": 64,
      "deletions": 64,
      "changes": 128,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-bits.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-bits.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-bits.h?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -206,41 +206,41 @@\n \n /* LS/MS Bit operations */\n \n-#define LSBIT8(POS)  ((unsigned8) 1 << (POS))\n-#define LSBIT16(POS) ((unsigned16)1 << (POS))\n-#define LSBIT32(POS) ((unsigned32)1 << (POS))\n-#define LSBIT64(POS) ((unsigned64)1 << (POS))\n+#define LSBIT8(POS)  ((uint8_t) 1 << (POS))\n+#define LSBIT16(POS) ((uint16_t)1 << (POS))\n+#define LSBIT32(POS) ((uint32_t)1 << (POS))\n+#define LSBIT64(POS) ((uint64_t)1 << (POS))\n \n #if (WITH_TARGET_WORD_BITSIZE == 64)\n #define LSBIT(POS) LSBIT64 (POS)\n #endif\n #if (WITH_TARGET_WORD_BITSIZE == 32)\n-#define LSBIT(POS) ((unsigned32)((POS) >= 32 \\\n+#define LSBIT(POS) ((uint32_t)((POS) >= 32 \\\n \t\t                 ? 0 \\\n \t\t\t         : (1 << ((POS) >= 32 ? 0 : (POS)))))\n #endif\n #if (WITH_TARGET_WORD_BITSIZE == 16)\n-#define LSBIT(POS) ((unsigned16)((POS) >= 16 \\\n+#define LSBIT(POS) ((uint16_t)((POS) >= 16 \\\n \t\t                 ? 0 \\\n \t\t\t         : (1 << ((POS) >= 16 ? 0 : (POS)))))\n #endif\n \n \n-#define MSBIT8(POS)  ((unsigned8) 1 << ( 8 - 1 - (POS)))\n-#define MSBIT16(POS) ((unsigned16)1 << (16 - 1 - (POS)))\n-#define MSBIT32(POS) ((unsigned32)1 << (32 - 1 - (POS)))\n-#define MSBIT64(POS) ((unsigned64)1 << (64 - 1 - (POS)))\n+#define MSBIT8(POS)  ((uint8_t) 1 << ( 8 - 1 - (POS)))\n+#define MSBIT16(POS) ((uint16_t)1 << (16 - 1 - (POS)))\n+#define MSBIT32(POS) ((uint32_t)1 << (32 - 1 - (POS)))\n+#define MSBIT64(POS) ((uint64_t)1 << (64 - 1 - (POS)))\n \n #if (WITH_TARGET_WORD_BITSIZE == 64)\n #define MSBIT(POS) MSBIT64 (POS)\n #endif\n #if (WITH_TARGET_WORD_BITSIZE == 32)\n-#define MSBIT(POS) ((unsigned32)((POS) < 32 \\\n+#define MSBIT(POS) ((uint32_t)((POS) < 32 \\\n \t\t                 ? 0 \\\n \t\t                 : (1 << ((POS) < 32 ? 0 : (64 - 1) - (POS)))))\n #endif\n #if (WITH_TARGET_WORD_BITSIZE == 16)\n-#define MSBIT(POS) ((unsigned16)((POS) < 48 \\\n+#define MSBIT(POS) ((uint16_t)((POS) < 48 \\\n \t\t                 ? 0 \\\n \t\t                 : (1 << ((POS) < 48 ? 0 : (64 - 1) - (POS)))))\n #endif\n@@ -271,7 +271,7 @@\n /* multi bit mask */\n \n /* 111111 -> mmll11 -> mm11ll */\n-#define _MASKn(WIDTH, START, STOP) (((unsigned##WIDTH)(-1) \\\n+#define _MASKn(WIDTH, START, STOP) (((uint##WIDTH##_t)(-1) \\\n \t\t\t\t     >> (_MSB_SHIFT (WIDTH, START) \\\n \t\t\t\t\t + _LSB_SHIFT (WIDTH, STOP))) \\\n \t\t\t\t    << _LSB_SHIFT (WIDTH, STOP))\n@@ -375,17 +375,17 @@\n \n /* mask the required bits, leaving them in place */\n \n-INLINE_SIM_BITS(unsigned8)  LSMASKED8  (unsigned8  word, int first, int last);\n-INLINE_SIM_BITS(unsigned16) LSMASKED16 (unsigned16 word, int first, int last);\n-INLINE_SIM_BITS(unsigned32) LSMASKED32 (unsigned32 word, int first, int last);\n-INLINE_SIM_BITS(unsigned64) LSMASKED64 (unsigned64 word, int first, int last);\n+INLINE_SIM_BITS(uint8_t)  LSMASKED8  (uint8_t  word, int first, int last);\n+INLINE_SIM_BITS(uint16_t) LSMASKED16 (uint16_t word, int first, int last);\n+INLINE_SIM_BITS(uint32_t) LSMASKED32 (uint32_t word, int first, int last);\n+INLINE_SIM_BITS(uint64_t) LSMASKED64 (uint64_t word, int first, int last);\n \n INLINE_SIM_BITS(unsigned_word) LSMASKED (unsigned_word word, int first, int last);\n \n-INLINE_SIM_BITS(unsigned8)  MSMASKED8  (unsigned8  word, int first, int last);\n-INLINE_SIM_BITS(unsigned16) MSMASKED16 (unsigned16 word, int first, int last);\n-INLINE_SIM_BITS(unsigned32) MSMASKED32 (unsigned32 word, int first, int last);\n-INLINE_SIM_BITS(unsigned64) MSMASKED64 (unsigned64 word, int first, int last);\n+INLINE_SIM_BITS(uint8_t)  MSMASKED8  (uint8_t  word, int first, int last);\n+INLINE_SIM_BITS(uint16_t) MSMASKED16 (uint16_t word, int first, int last);\n+INLINE_SIM_BITS(uint32_t) MSMASKED32 (uint32_t word, int first, int last);\n+INLINE_SIM_BITS(uint64_t) MSMASKED64 (uint64_t word, int first, int last);\n \n INLINE_SIM_BITS(unsigned_word) MSMASKED (unsigned_word word, int first, int last);\n \n@@ -407,17 +407,17 @@ INLINE_SIM_BITS(unsigned_word) MSMASKED (unsigned_word word, int first, int last\n \n /* extract the required bits aligning them with the lsb */\n \n-INLINE_SIM_BITS(unsigned8)  LSEXTRACTED8  (unsigned8  val, int start, int stop);\n-INLINE_SIM_BITS(unsigned16) LSEXTRACTED16 (unsigned16 val, int start, int stop);\n-INLINE_SIM_BITS(unsigned32) LSEXTRACTED32 (unsigned32 val, int start, int stop);\n-INLINE_SIM_BITS(unsigned64) LSEXTRACTED64 (unsigned64 val, int start, int stop);\n+INLINE_SIM_BITS(uint8_t)  LSEXTRACTED8  (uint8_t  val, int start, int stop);\n+INLINE_SIM_BITS(uint16_t) LSEXTRACTED16 (uint16_t val, int start, int stop);\n+INLINE_SIM_BITS(uint32_t) LSEXTRACTED32 (uint32_t val, int start, int stop);\n+INLINE_SIM_BITS(uint64_t) LSEXTRACTED64 (uint64_t val, int start, int stop);\n \n INLINE_SIM_BITS(unsigned_word) LSEXTRACTED (unsigned_word val, int start, int stop);\n \n-INLINE_SIM_BITS(unsigned8)  MSEXTRACTED8  (unsigned8  val, int start, int stop);\n-INLINE_SIM_BITS(unsigned16) MSEXTRACTED16 (unsigned16 val, int start, int stop);\n-INLINE_SIM_BITS(unsigned32) MSEXTRACTED32 (unsigned32 val, int start, int stop);\n-INLINE_SIM_BITS(unsigned64) MSEXTRACTED64 (unsigned64 val, int start, int stop);\n+INLINE_SIM_BITS(uint8_t)  MSEXTRACTED8  (uint8_t  val, int start, int stop);\n+INLINE_SIM_BITS(uint16_t) MSEXTRACTED16 (uint16_t val, int start, int stop);\n+INLINE_SIM_BITS(uint32_t) MSEXTRACTED32 (uint32_t val, int start, int stop);\n+INLINE_SIM_BITS(uint64_t) MSEXTRACTED64 (uint64_t val, int start, int stop);\n \n INLINE_SIM_BITS(unsigned_word) MSEXTRACTED (unsigned_word val, int start, int stop);\n \n@@ -441,10 +441,10 @@ INLINE_SIM_BITS(unsigned_word) MSEXTRACTED (unsigned_word val, int start, int st\n /* NB: the wierdness (N>O?N-O:0) is to stop a warning from GCC */\n #define _SHUFFLEDn(N, WORD, OLD, NEW) \\\n ((OLD) < (NEW) \\\n- ? (((unsigned##N)(WORD) \\\n+ ? (((uint##N##_t)(WORD) \\\n      >> (((NEW) > (OLD)) ? ((NEW) - (OLD)) : 0)) \\\n     & MASK32((NEW), (NEW))) \\\n- : (((unsigned##N)(WORD) \\\n+ : (((uint##N##_t)(WORD) \\\n      << (((OLD) > (NEW)) ? ((OLD) - (NEW)) : 0)) \\\n     & MASK32((NEW), (NEW))))\n \n@@ -456,16 +456,16 @@ INLINE_SIM_BITS(unsigned_word) MSEXTRACTED (unsigned_word val, int start, int st\n \n /* Insert a group of bits into a bit position */\n \n-INLINE_SIM_BITS(unsigned8)  LSINSERTED8  (unsigned8  val, int start, int stop);\n-INLINE_SIM_BITS(unsigned16) LSINSERTED16 (unsigned16 val, int start, int stop);\n-INLINE_SIM_BITS(unsigned32) LSINSERTED32 (unsigned32 val, int start, int stop);\n-INLINE_SIM_BITS(unsigned64) LSINSERTED64 (unsigned64 val, int start, int stop);\n+INLINE_SIM_BITS(uint8_t)  LSINSERTED8  (uint8_t  val, int start, int stop);\n+INLINE_SIM_BITS(uint16_t) LSINSERTED16 (uint16_t val, int start, int stop);\n+INLINE_SIM_BITS(uint32_t) LSINSERTED32 (uint32_t val, int start, int stop);\n+INLINE_SIM_BITS(uint64_t) LSINSERTED64 (uint64_t val, int start, int stop);\n INLINE_SIM_BITS(unsigned_word) LSINSERTED (unsigned_word val, int start, int stop);\n \n-INLINE_SIM_BITS(unsigned8)  MSINSERTED8  (unsigned8  val, int start, int stop);\n-INLINE_SIM_BITS(unsigned16) MSINSERTED16 (unsigned16 val, int start, int stop);\n-INLINE_SIM_BITS(unsigned32) MSINSERTED32 (unsigned32 val, int start, int stop);\n-INLINE_SIM_BITS(unsigned64) MSINSERTED64 (unsigned64 val, int start, int stop);\n+INLINE_SIM_BITS(uint8_t)  MSINSERTED8  (uint8_t  val, int start, int stop);\n+INLINE_SIM_BITS(uint16_t) MSINSERTED16 (uint16_t val, int start, int stop);\n+INLINE_SIM_BITS(uint32_t) MSINSERTED32 (uint32_t val, int start, int stop);\n+INLINE_SIM_BITS(uint64_t) MSINSERTED64 (uint64_t val, int start, int stop);\n INLINE_SIM_BITS(unsigned_word) MSINSERTED (unsigned_word val, int start, int stop);\n \n #if (WITH_TARGET_WORD_MSB == 0)\n@@ -499,19 +499,19 @@ INLINE_SIM_BITS(unsigned_word) MSINSERTED (unsigned_word val, int start, int sto\n #define EXTEND4(X)  (LSSEXT ((X), 3))\n #define EXTEND5(X)  (LSSEXT ((X), 4))\n #define EXTEND6(X)  (LSSEXT ((X), 5))\n-#define EXTEND8(X)  ((signed_word)(signed8)(X))\n+#define EXTEND8(X)  ((signed_word)(int8_t)(X))\n #define EXTEND11(X)  (LSSEXT ((X), 10))\n #define EXTEND12(X)  (LSSEXT ((X), 11))\n #define EXTEND15(X)  (LSSEXT ((X), 14))\n-#define EXTEND16(X) ((signed_word)(signed16)(X))\n+#define EXTEND16(X) ((signed_word)(int16_t)(X))\n #define EXTEND24(X)  (LSSEXT ((X), 23))\n #define EXTEND25(X)  (LSSEXT ((X), 24))\n-#define EXTEND32(X) ((signed_word)(signed32)(X))\n-#define EXTEND64(X) ((signed_word)(signed64)(X))\n+#define EXTEND32(X) ((signed_word)(int32_t)(X))\n+#define EXTEND64(X) ((signed_word)(int64_t)(X))\n \n /* depending on MODE return a 64bit or 32bit (sign extended) value */\n #if (WITH_TARGET_WORD_BITSIZE == 64)\n-#define EXTENDED(X)     ((signed64)(signed32)(X))\n+#define EXTENDED(X)     ((int64_t)(int32_t)(X))\n #endif\n #if (WITH_TARGET_WORD_BITSIZE == 32)\n #define EXTENDED(X)     (X)\n@@ -546,37 +546,37 @@ do { \\\n    intentionally omited. */\n \n \n-INLINE_SIM_BITS(unsigned8)  ROT8  (unsigned8  val, int shift);\n-INLINE_SIM_BITS(unsigned16) ROT16 (unsigned16 val, int shift);\n-INLINE_SIM_BITS(unsigned32) ROT32 (unsigned32 val, int shift);\n-INLINE_SIM_BITS(unsigned64) ROT64 (unsigned64 val, int shift);\n+INLINE_SIM_BITS(uint8_t)  ROT8  (uint8_t  val, int shift);\n+INLINE_SIM_BITS(uint16_t) ROT16 (uint16_t val, int shift);\n+INLINE_SIM_BITS(uint32_t) ROT32 (uint32_t val, int shift);\n+INLINE_SIM_BITS(uint64_t) ROT64 (uint64_t val, int shift);\n \n \n-INLINE_SIM_BITS(unsigned8)  ROTL8  (unsigned8  val, int shift);\n-INLINE_SIM_BITS(unsigned16) ROTL16 (unsigned16 val, int shift);\n-INLINE_SIM_BITS(unsigned32) ROTL32 (unsigned32 val, int shift);\n-INLINE_SIM_BITS(unsigned64) ROTL64 (unsigned64 val, int shift);\n+INLINE_SIM_BITS(uint8_t)  ROTL8  (uint8_t  val, int shift);\n+INLINE_SIM_BITS(uint16_t) ROTL16 (uint16_t val, int shift);\n+INLINE_SIM_BITS(uint32_t) ROTL32 (uint32_t val, int shift);\n+INLINE_SIM_BITS(uint64_t) ROTL64 (uint64_t val, int shift);\n \n \n-INLINE_SIM_BITS(unsigned8)  ROTR8  (unsigned8  val, int shift);\n-INLINE_SIM_BITS(unsigned16) ROTR16 (unsigned16 val, int shift);\n-INLINE_SIM_BITS(unsigned32) ROTR32 (unsigned32 val, int shift);\n-INLINE_SIM_BITS(unsigned64) ROTR64 (unsigned64 val, int shift);\n+INLINE_SIM_BITS(uint8_t)  ROTR8  (uint8_t  val, int shift);\n+INLINE_SIM_BITS(uint16_t) ROTR16 (uint16_t val, int shift);\n+INLINE_SIM_BITS(uint32_t) ROTR32 (uint32_t val, int shift);\n+INLINE_SIM_BITS(uint64_t) ROTR64 (uint64_t val, int shift);\n \n \n \n /* Sign extension operations */\n \n-INLINE_SIM_BITS(unsigned8)  LSSEXT8  (signed8  val, int sign_bit);\n-INLINE_SIM_BITS(unsigned16) LSSEXT16 (signed16 val, int sign_bit);\n-INLINE_SIM_BITS(unsigned32) LSSEXT32 (signed32 val, int sign_bit);\n-INLINE_SIM_BITS(unsigned64) LSSEXT64 (signed64 val, int sign_bit);\n+INLINE_SIM_BITS(uint8_t)  LSSEXT8  (int8_t  val, int sign_bit);\n+INLINE_SIM_BITS(uint16_t) LSSEXT16 (int16_t val, int sign_bit);\n+INLINE_SIM_BITS(uint32_t) LSSEXT32 (int32_t val, int sign_bit);\n+INLINE_SIM_BITS(uint64_t) LSSEXT64 (int64_t val, int sign_bit);\n INLINE_SIM_BITS(unsigned_word) LSSEXT (signed_word val, int sign_bit);\n \n-INLINE_SIM_BITS(unsigned8)  MSSEXT8  (signed8  val, int sign_bit);\n-INLINE_SIM_BITS(unsigned16) MSSEXT16 (signed16 val, int sign_bit);\n-INLINE_SIM_BITS(unsigned32) MSSEXT32 (signed32 val, int sign_bit);\n-INLINE_SIM_BITS(unsigned64) MSSEXT64 (signed64 val, int sign_bit);\n+INLINE_SIM_BITS(uint8_t)  MSSEXT8  (int8_t  val, int sign_bit);\n+INLINE_SIM_BITS(uint16_t) MSSEXT16 (int16_t val, int sign_bit);\n+INLINE_SIM_BITS(uint32_t) MSSEXT32 (int32_t val, int sign_bit);\n+INLINE_SIM_BITS(uint64_t) MSSEXT64 (int64_t val, int sign_bit);\n INLINE_SIM_BITS(unsigned_word) MSSEXT (signed_word val, int sign_bit);\n \n #if (WITH_TARGET_WORD_MSB == 0)"
    },
    {
      "sha": "fab8f1015958e742227bde7cf125dc253cf3446f",
      "filename": "sim/common/sim-core.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-core.c?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -285,14 +285,14 @@ sim_core_attach (SIM_DESC sd,\n     {\n       unsigned mask = modulo - 1;\n       /* any zero bits */\n-      while (mask >= sizeof (unsigned64)) /* minimum modulo */\n+      while (mask >= sizeof (uint64_t)) /* minimum modulo */\n \t{\n \t  if ((mask & 1) == 0)\n \t    mask = 0;\n \t  else\n \t    mask >>= 1;\n \t}\n-      if (mask != sizeof (unsigned64) - 1)\n+      if (mask != sizeof (uint64_t) - 1)\n \t{\n #if (WITH_HW)\n \t  sim_hw_abort (sd, client, \"sim_core_attach - internal error - modulo %lx not power of two\", (long) modulo);\n@@ -313,7 +313,7 @@ sim_core_attach (SIM_DESC sd,\n     {\n       if (optional_buffer == NULL)\n \t{\n-\t  int padding = (addr % sizeof (unsigned64));\n+\t  int padding = (addr % sizeof (uint64_t));\n \t  unsigned long bytes = (modulo == 0 ? nr_bytes : modulo) + padding;\n \t  free_buffer = zalloc (bytes);\n \t  buffer = (char*) free_buffer + padding;\n@@ -453,7 +453,7 @@ STATIC_INLINE_SIM_CORE\\\n sim_core_translate (sim_core_mapping *mapping,\n \t\t    address_word addr)\n {\n-  return (void *)((unsigned8 *) mapping->buffer\n+  return (void *)((uint8_t *) mapping->buffer\n \t\t  + ((addr - mapping->base) & mapping->mask));\n }\n "
    },
    {
      "sha": "78668e63a408e9d3250c8b18041b1f2213775a01",
      "filename": "sim/common/sim-events.c",
      "status": "modified",
      "additions": 19,
      "deletions": 19,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-events.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-events.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-events.c?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -88,7 +88,7 @@ struct _sim_event {\n   void *data;\n   sim_event_handler *handler;\n   /* timer event */\n-  signed64 time_of_event;\n+  int64_t time_of_event;\n   /* watch wallclock event */\n   unsigned wallclock;\n   /* watch core address */\n@@ -100,8 +100,8 @@ struct _sim_event {\n   int is_within; /* 0/1 */\n   unsigned ub;\n   unsigned lb;\n-  unsigned64 ub64;\n-  unsigned64 lb64;\n+  uint64_t ub64;\n+  uint64_t lb64;\n   /* trace info (if any) */\n   char *trace;\n   /* list */\n@@ -350,7 +350,7 @@ sim_events_init (SIM_DESC sd)\n \n \n INLINE_SIM_EVENTS\\\n-(signed64)\n+(int64_t)\n sim_events_time (SIM_DESC sd)\n {\n   sim_events *events = STATE_EVENTS (sd);\n@@ -375,7 +375,7 @@ sim_events_elapsed_time (SIM_DESC sd)\n \n /* Returns the time that remains before the event is raised. */\n INLINE_SIM_EVENTS\\\n-(signed64)\n+(int64_t)\n sim_events_remain_time (SIM_DESC sd, sim_event *event)\n {\n   if (event == 0)\n@@ -391,7 +391,7 @@ STATIC_INLINE_SIM_EVENTS\\\n update_time_from_event (SIM_DESC sd)\n {\n   sim_events *events = STATE_EVENTS (sd);\n-  signed64 current_time = sim_events_time (sd);\n+  int64_t current_time = sim_events_time (sd);\n   if (events->queue != NULL)\n     {\n       events->time_of_event = events->queue->time_of_event;\n@@ -434,12 +434,12 @@ update_time_from_event (SIM_DESC sd)\n static void\n insert_sim_event (SIM_DESC sd,\n \t\t  sim_event *new_event,\n-\t\t  signed64 delta)\n+\t\t  int64_t delta)\n {\n   sim_events *events = STATE_EVENTS (sd);\n   sim_event *curr;\n   sim_event **prev;\n-  signed64 time_of_event;\n+  int64_t time_of_event;\n \n   if (delta < 0)\n     sim_io_error (sd, \"what is past is past!\\n\");\n@@ -473,7 +473,7 @@ insert_sim_event (SIM_DESC sd,\n #if EXTERN_SIM_EVENTS_P\n sim_event *\n sim_events_schedule (SIM_DESC sd,\n-\t\t     signed64 delta_time,\n+\t\t     int64_t delta_time,\n \t\t     sim_event_handler *handler,\n \t\t     void *data)\n {\n@@ -485,7 +485,7 @@ sim_events_schedule (SIM_DESC sd,\n #if EXTERN_SIM_EVENTS_P\n sim_event *\n sim_events_schedule_tracef (SIM_DESC sd,\n-\t\t\t    signed64 delta_time,\n+\t\t\t    int64_t delta_time,\n \t\t\t    sim_event_handler *handler,\n \t\t\t    void *data,\n \t\t\t    const char *fmt,\n@@ -504,7 +504,7 @@ sim_events_schedule_tracef (SIM_DESC sd,\n #if EXTERN_SIM_EVENTS_P\n sim_event *\n sim_events_schedule_vtracef (SIM_DESC sd,\n-\t\t\t     signed64 delta_time,\n+\t\t\t     int64_t delta_time,\n \t\t\t     sim_event_handler *handler,\n \t\t\t     void *data,\n \t\t\t     const char *fmt,\n@@ -535,7 +535,7 @@ sim_events_schedule_vtracef (SIM_DESC sd,\n #if EXTERN_SIM_EVENTS_P\n void\n sim_events_schedule_after_signal (SIM_DESC sd,\n-\t\t\t\t  signed64 delta_time,\n+\t\t\t\t  int64_t delta_time,\n \t\t\t\t  sim_event_handler *handler,\n \t\t\t\t  void *data)\n {\n@@ -624,8 +624,8 @@ sim_events_watch_clock (SIM_DESC sd,\n sim_event *\n sim_events_watch_pc (SIM_DESC sd,\n \t\t     int is_within,\n-\t\t     unsigned64 lb,\n-\t\t     unsigned64 ub,\n+\t\t     uint64_t lb,\n+\t\t     uint64_t ub,\n \t\t     sim_event_handler *handler,\n \t\t     void *data)\n {\n@@ -667,8 +667,8 @@ sim_events_watch_sim (SIM_DESC sd,\n \t\t      int nr_bytes,\n \t\t      enum bfd_endian byte_order,\n \t\t      int is_within,\n-\t\t      unsigned64 lb,\n-\t\t      unsigned64 ub,\n+\t\t      uint64_t lb,\n+\t\t      uint64_t ub,\n \t\t      sim_event_handler *handler,\n \t\t      void *data)\n {\n@@ -747,8 +747,8 @@ sim_events_watch_core (SIM_DESC sd,\n \t\t       int nr_bytes,\n \t\t       enum bfd_endian byte_order,\n \t\t       int is_within,\n-\t\t       unsigned64 lb,\n-\t\t       unsigned64 ub,\n+\t\t       uint64_t lb,\n+\t\t       uint64_t ub,\n \t\t       sim_event_handler *handler,\n \t\t       void *data)\n {\n@@ -1147,7 +1147,7 @@ INLINE_SIM_EVENTS\\\n sim_events_process (SIM_DESC sd)\n {\n   sim_events *events = STATE_EVENTS (sd);\n-  signed64 event_time = sim_events_time (sd);\n+  int64_t event_time = sim_events_time (sd);\n \n   /* Clear work_pending before checking nr_held.  Clearing\n      work_pending after nr_held (with out a lock could loose an"
    },
    {
      "sha": "b50a427f3af29269a7f37d104dddfe2b41bbb055",
      "filename": "sim/common/sim-events.h",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-events.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-events.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-events.h?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -95,8 +95,8 @@ struct _sim_events {\n   /* timekeeping */\n   unsigned long elapsed_wallclock;\n   SIM_ELAPSED_TIME resume_wallclock;\n-  signed64 time_of_event;\n-  signed64 time_from_event;\n+  int64_t time_of_event;\n+  int64_t time_from_event;\n };\n \n \n@@ -110,21 +110,21 @@ extern SIM_RC sim_events_install (SIM_DESC sd);\n \n extern sim_event *sim_events_schedule\n (SIM_DESC sd,\n- signed64 delta_time,\n+ int64_t delta_time,\n  sim_event_handler *handler,\n  void *data);\n \n extern sim_event *sim_events_schedule_tracef\n (SIM_DESC sd,\n- signed64 delta_time,\n+ int64_t delta_time,\n  sim_event_handler *handler,\n  void *data,\n  const char *fmt,\n  ...) ATTRIBUTE_NULL_PRINTF (5, 6);\n \n extern sim_event *sim_events_schedule_vtracef\n (SIM_DESC sd,\n- signed64 delta_time,\n+ int64_t delta_time,\n  sim_event_handler *handler,\n  void *data,\n  const char *fmt,\n@@ -133,7 +133,7 @@ extern sim_event *sim_events_schedule_vtracef\n \n extern void sim_events_schedule_after_signal\n (SIM_DESC sd,\n- signed64 delta_time,\n+ int64_t delta_time,\n  sim_event_handler *handler,\n  void *data);\n \n@@ -157,8 +157,8 @@ extern sim_event *sim_events_watch_clock\n extern sim_event *sim_events_watch_pc\n (SIM_DESC sd,\n  int is_within,\n- unsigned64 lb,\n- unsigned64 ub,\n+ uint64_t lb,\n+ uint64_t ub,\n  sim_event_handler *handler,\n  void *data);\n \n@@ -177,8 +177,8 @@ extern sim_event *sim_events_watch_sim\n  int nr_bytes,\n  enum bfd_endian byte_order,\n  int is_within,\n- unsigned64 lb,\n- unsigned64 ub,\n+ uint64_t lb,\n+ uint64_t ub,\n  sim_event_handler *handler,\n  void *data);\n \n@@ -198,8 +198,8 @@ extern sim_event *sim_events_watch_core\n  int nr_bytes,\n  enum bfd_endian byte_order,\n  int is_within,\n- unsigned64 lb,\n- unsigned64 ub,\n+ uint64_t lb,\n+ uint64_t ub,\n  sim_event_handler *handler,\n  void *data);\n \n@@ -274,7 +274,7 @@ INLINE_SIM_EVENTS\\\n /* local concept of elapsed target time */\n \n INLINE_SIM_EVENTS\\\n-(signed64) sim_events_time\n+(int64_t) sim_events_time\n (SIM_DESC sd);\n \n \n@@ -286,7 +286,7 @@ INLINE_SIM_EVENTS\\\n \n /* Returns the time that remains before the event is raised. */\n INLINE_SIM_EVENTS\\\n-(signed64) sim_events_remain_time\n+(int64_t) sim_events_remain_time\n (SIM_DESC sd, sim_event *event);\n \n "
    },
    {
      "sha": "a05c57897ffa37ea12d29e727f2efafac643f7e3",
      "filename": "sim/common/sim-fpu.c",
      "status": "modified",
      "additions": 78,
      "deletions": 78,
      "changes": 156,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-fpu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-fpu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-fpu.c?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -50,13 +50,13 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n    If digits is -1, then print all digits.  */\n \n static void\n-print_bits (unsigned64 x,\n+print_bits (uint64_t x,\n \t    int msbit,\n \t    int digits,\n \t    sim_fpu_print_func print,\n \t    void *arg)\n {\n-  unsigned64 bit = LSBIT64 (msbit);\n+  uint64_t bit = LSBIT64 (msbit);\n   int i = 4;\n   while (bit && digits)\n     {\n@@ -82,7 +82,7 @@ print_bits (unsigned64 x,\n typedef union\n {\n   double d;\n-  unsigned64 i;\n+  uint64_t i;\n } sim_fpu_map;\n \n \n@@ -166,28 +166,28 @@ typedef union\n \n /* Integer constants */\n \n-#define MAX_INT32  ((signed64) LSMASK64 (30, 0))\n+#define MAX_INT32  ((int64_t) LSMASK64 (30, 0))\n #define MAX_UINT32 LSMASK64 (31, 0)\n-#define MIN_INT32  ((signed64) LSMASK64 (63, 31))\n+#define MIN_INT32  ((int64_t) LSMASK64 (63, 31))\n \n-#define MAX_INT64  ((signed64) LSMASK64 (62, 0))\n+#define MAX_INT64  ((int64_t) LSMASK64 (62, 0))\n #define MAX_UINT64 LSMASK64 (63, 0)\n-#define MIN_INT64  ((signed64) LSMASK64 (63, 63))\n+#define MIN_INT64  ((int64_t) LSMASK64 (63, 63))\n \n #define MAX_INT   (is_64bit ? MAX_INT64  : MAX_INT32)\n #define MIN_INT   (is_64bit ? MIN_INT64  : MIN_INT32)\n #define MAX_UINT  (is_64bit ? MAX_UINT64 : MAX_UINT32)\n #define NR_INTBITS (is_64bit ? 64 : 32)\n \n /* Squeeze an unpacked sim_fpu struct into a 32/64 bit integer.  */\n-STATIC_INLINE_SIM_FPU (unsigned64)\n+STATIC_INLINE_SIM_FPU (uint64_t)\n pack_fpu (const sim_fpu *src,\n \t  int is_double)\n {\n   int sign;\n-  unsigned64 exp;\n-  unsigned64 fraction;\n-  unsigned64 packed;\n+  uint64_t exp;\n+  uint64_t fraction;\n+  uint64_t packed;\n \n   switch (src->class)\n     {\n@@ -321,9 +321,9 @@ pack_fpu (const sim_fpu *src,\n \n /* Unpack a 32/64 bit integer into a sim_fpu structure.  */\n STATIC_INLINE_SIM_FPU (void)\n-unpack_fpu (sim_fpu *dst, unsigned64 packed, int is_double)\n+unpack_fpu (sim_fpu *dst, uint64_t packed, int is_double)\n {\n-  unsigned64 fraction = LSMASKED64 (packed, NR_FRACBITS - 1, 0);\n+  uint64_t fraction = LSMASKED64 (packed, NR_FRACBITS - 1, 0);\n   unsigned exp = LSEXTRACTED64 (packed, NR_EXPBITS + NR_FRACBITS - 1, NR_FRACBITS);\n   int sign = (packed & SIGNBIT) != 0;\n \n@@ -416,8 +416,8 @@ unpack_fpu (sim_fpu *dst, unsigned64 packed, int is_double)\n       }\n     else\n       {\n-\tunsigned32 val = pack_fpu (dst, 0);\n-\tunsigned32 org = packed;\n+\tuint32_t val = pack_fpu (dst, 0);\n+\tuint32_t org = packed;\n \tASSERT (val == org);\n       }\n   }\n@@ -426,12 +426,12 @@ unpack_fpu (sim_fpu *dst, unsigned64 packed, int is_double)\n \n /* Convert a floating point into an integer.  */\n STATIC_INLINE_SIM_FPU (int)\n-fpu2i (signed64 *i,\n+fpu2i (int64_t *i,\n        const sim_fpu *s,\n        int is_64bit,\n        sim_fpu_round round)\n {\n-  unsigned64 tmp;\n+  uint64_t tmp;\n   int shift;\n   int status = 0;\n   if (sim_fpu_is_zero (s))\n@@ -526,7 +526,7 @@ fpu2i (signed64 *i,\n \n /* Convert an integer into a floating point.  */\n STATIC_INLINE_SIM_FPU (int)\n-i2fpu (sim_fpu *f, signed64 i, int is_64bit)\n+i2fpu (sim_fpu *f, int64_t i, int is_64bit)\n {\n   int status = 0;\n   if (i == 0)\n@@ -585,7 +585,7 @@ i2fpu (sim_fpu *f, signed64 i, int is_64bit)\n \n   /* sanity check */\n   {\n-    signed64 val;\n+    int64_t val;\n     fpu2i (&val, f, is_64bit, sim_fpu_round_zero);\n     if (i >= MIN_INT32 && i <= MAX_INT32)\n       {\n@@ -599,10 +599,10 @@ i2fpu (sim_fpu *f, signed64 i, int is_64bit)\n \n /* Convert a floating point into an integer.  */\n STATIC_INLINE_SIM_FPU (int)\n-fpu2u (unsigned64 *u, const sim_fpu *s, int is_64bit)\n+fpu2u (uint64_t *u, const sim_fpu *s, int is_64bit)\n {\n   const int is_double = 1;\n-  unsigned64 tmp;\n+  uint64_t tmp;\n   int shift;\n   if (sim_fpu_is_zero (s))\n     {\n@@ -656,7 +656,7 @@ fpu2u (unsigned64 *u, const sim_fpu *s, int is_64bit)\n \n /* Convert an unsigned integer into a floating point.  */\n STATIC_INLINE_SIM_FPU (int)\n-u2fpu (sim_fpu *f, unsigned64 u, int is_64bit)\n+u2fpu (sim_fpu *f, uint64_t u, int is_64bit)\n {\n   if (u == 0)\n     {\n@@ -684,48 +684,48 @@ u2fpu (sim_fpu *f, unsigned64 u, int is_64bit)\n /* register <-> sim_fpu */\n \n INLINE_SIM_FPU (void)\n-sim_fpu_32to (sim_fpu *f, unsigned32 s)\n+sim_fpu_32to (sim_fpu *f, uint32_t s)\n {\n   unpack_fpu (f, s, 0);\n }\n \n \n INLINE_SIM_FPU (void)\n-sim_fpu_232to (sim_fpu *f, unsigned32 h, unsigned32 l)\n+sim_fpu_232to (sim_fpu *f, uint32_t h, uint32_t l)\n {\n-  unsigned64 s = h;\n+  uint64_t s = h;\n   s = (s << 32) | l;\n   unpack_fpu (f, s, 1);\n }\n \n \n INLINE_SIM_FPU (void)\n-sim_fpu_64to (sim_fpu *f, unsigned64 s)\n+sim_fpu_64to (sim_fpu *f, uint64_t s)\n {\n   unpack_fpu (f, s, 1);\n }\n \n \n INLINE_SIM_FPU (void)\n-sim_fpu_to32 (unsigned32 *s,\n+sim_fpu_to32 (uint32_t *s,\n \t      const sim_fpu *f)\n {\n   *s = pack_fpu (f, 0);\n }\n \n \n INLINE_SIM_FPU (void)\n-sim_fpu_to232 (unsigned32 *h, unsigned32 *l,\n+sim_fpu_to232 (uint32_t *h, uint32_t *l,\n \t       const sim_fpu *f)\n {\n-  unsigned64 s = pack_fpu (f, 1);\n+  uint64_t s = pack_fpu (f, 1);\n   *l = s;\n   *h = (s >> 32);\n }\n \n \n INLINE_SIM_FPU (void)\n-sim_fpu_to64 (unsigned64 *u,\n+sim_fpu_to64 (uint64_t *u,\n \t      const sim_fpu *f)\n {\n   *u = pack_fpu (f, 1);\n@@ -736,7 +736,7 @@ INLINE_SIM_FPU (void)\n sim_fpu_fractionto (sim_fpu *f,\n \t\t    int sign,\n \t\t    int normal_exp,\n-\t\t    unsigned64 fraction,\n+\t\t    uint64_t fraction,\n \t\t    int precision)\n {\n   int shift = (NR_FRAC_GUARD - precision);\n@@ -752,13 +752,13 @@ sim_fpu_fractionto (sim_fpu *f,\n }\n \n \n-INLINE_SIM_FPU (unsigned64)\n+INLINE_SIM_FPU (uint64_t)\n sim_fpu_tofraction (const sim_fpu *d,\n \t\t    int precision)\n {\n   /* We have NR_FRAC_GUARD bits, we want only PRECISION bits.  */\n   int shift = (NR_FRAC_GUARD - precision);\n-  unsigned64 fraction = (d->fraction & ~IMPLICIT_1);\n+  uint64_t fraction = (d->fraction & ~IMPLICIT_1);\n   if (shift >= 0)\n     return fraction >> shift;\n   else\n@@ -835,9 +835,9 @@ do_normal_round (sim_fpu *f,\n \t\t int nr_guards,\n \t\t sim_fpu_round round)\n {\n-  unsigned64 guardmask = LSMASK64 (nr_guards - 1, 0);\n-  unsigned64 guardmsb = LSBIT64 (nr_guards - 1);\n-  unsigned64 fraclsb = guardmsb << 1;\n+  uint64_t guardmask = LSMASK64 (nr_guards - 1, 0);\n+  uint64_t guardmsb = LSBIT64 (nr_guards - 1);\n+  uint64_t fraclsb = guardmsb << 1;\n   if ((f->fraction & guardmask))\n     {\n       int status = sim_fpu_status_inexact;\n@@ -1055,8 +1055,8 @@ sim_fpu_add (sim_fpu *f,\n   {\n     int status = 0;\n     int shift = l->normal_exp - r->normal_exp;\n-    unsigned64 lfraction;\n-    unsigned64 rfraction;\n+    uint64_t lfraction;\n+    uint64_t rfraction;\n     /* use exp of larger */\n     if (shift >= NR_FRAC_GUARD)\n       {\n@@ -1113,7 +1113,7 @@ sim_fpu_add (sim_fpu *f,\n \n     /* sign? */\n     f->class = sim_fpu_class_number;\n-    if (((signed64) f->fraction) >= 0)\n+    if (((int64_t) f->fraction) >= 0)\n       f->sign = 0;\n     else\n       {\n@@ -1208,8 +1208,8 @@ sim_fpu_sub (sim_fpu *f,\n   {\n     int status = 0;\n     int shift = l->normal_exp - r->normal_exp;\n-    unsigned64 lfraction;\n-    unsigned64 rfraction;\n+    uint64_t lfraction;\n+    uint64_t rfraction;\n     /* use exp of larger */\n     if (shift >= NR_FRAC_GUARD)\n       {\n@@ -1267,7 +1267,7 @@ sim_fpu_sub (sim_fpu *f,\n \n     /* sign? */\n     f->class = sim_fpu_class_number;\n-    if (((signed64) f->fraction) >= 0)\n+    if (((int64_t) f->fraction) >= 0)\n       f->sign = 0;\n     else\n       {\n@@ -1354,19 +1354,19 @@ sim_fpu_mul (sim_fpu *f,\n   /* Calculate the mantissa by multiplying both 64bit numbers to get a\n      128 bit number.  */\n   {\n-    unsigned64 low;\n-    unsigned64 high;\n-    unsigned64 nl = l->fraction & 0xffffffff;\n-    unsigned64 nh = l->fraction >> 32;\n-    unsigned64 ml = r->fraction & 0xffffffff;\n-    unsigned64 mh = r->fraction >>32;\n-    unsigned64 pp_ll = ml * nl;\n-    unsigned64 pp_hl = mh * nl;\n-    unsigned64 pp_lh = ml * nh;\n-    unsigned64 pp_hh = mh * nh;\n-    unsigned64 res2 = 0;\n-    unsigned64 res0 = 0;\n-    unsigned64 ps_hh__ = pp_hl + pp_lh;\n+    uint64_t low;\n+    uint64_t high;\n+    uint64_t nl = l->fraction & 0xffffffff;\n+    uint64_t nh = l->fraction >> 32;\n+    uint64_t ml = r->fraction & 0xffffffff;\n+    uint64_t mh = r->fraction >>32;\n+    uint64_t pp_ll = ml * nl;\n+    uint64_t pp_hl = mh * nl;\n+    uint64_t pp_lh = ml * nh;\n+    uint64_t pp_hh = mh * nh;\n+    uint64_t res2 = 0;\n+    uint64_t res0 = 0;\n+    uint64_t ps_hh__ = pp_hl + pp_lh;\n     if (ps_hh__ < pp_hl)\n       res2 += UNSIGNED64 (0x100000000);\n     pp_hl = (ps_hh__ << 32) & UNSIGNED64 (0xffffffff00000000);\n@@ -1497,10 +1497,10 @@ sim_fpu_div (sim_fpu *f,\n     /* quotient =  ( ( numerator / denominator)\n                       x 2^(numerator exponent -  denominator exponent)\n      */\n-    unsigned64 numerator;\n-    unsigned64 denominator;\n-    unsigned64 quotient;\n-    unsigned64 bit;\n+    uint64_t numerator;\n+    uint64_t denominator;\n+    uint64_t quotient;\n+    uint64_t bit;\n \n     f->class = sim_fpu_class_number;\n     f->sign = l->sign ^ r->sign;\n@@ -1993,10 +1993,10 @@ sim_fpu_sqrt (sim_fpu *f,\n \n   {\n     /* Generate sqrt(x) bit by bit.  */\n-    unsigned64 y;\n-    unsigned64 q;\n-    unsigned64 s;\n-    unsigned64 b;\n+    uint64_t y;\n+    uint64_t q;\n+    uint64_t s;\n+    uint64_t b;\n \n     f->class = sim_fpu_class_number;\n     f->sign = 0;\n@@ -2018,7 +2018,7 @@ sim_fpu_sqrt (sim_fpu *f,\n \n     while (b)\n       {\n-\tunsigned64 t = s + b;\n+\tuint64_t t = s + b;\n \tif (t <= y)\n \t  {\n \t    s |= (b << 1);\n@@ -2046,7 +2046,7 @@ sim_fpu_sqrt (sim_fpu *f,\n \n INLINE_SIM_FPU (int)\n sim_fpu_i32to (sim_fpu *f,\n-\t       signed32 i,\n+\t       int32_t i,\n \t       sim_fpu_round round)\n {\n   i2fpu (f, i, 0);\n@@ -2055,7 +2055,7 @@ sim_fpu_i32to (sim_fpu *f,\n \n INLINE_SIM_FPU (int)\n sim_fpu_u32to (sim_fpu *f,\n-\t       unsigned32 u,\n+\t       uint32_t u,\n \t       sim_fpu_round round)\n {\n   u2fpu (f, u, 0);\n@@ -2064,7 +2064,7 @@ sim_fpu_u32to (sim_fpu *f,\n \n INLINE_SIM_FPU (int)\n sim_fpu_i64to (sim_fpu *f,\n-\t       signed64 i,\n+\t       int64_t i,\n \t       sim_fpu_round round)\n {\n   i2fpu (f, i, 1);\n@@ -2073,7 +2073,7 @@ sim_fpu_i64to (sim_fpu *f,\n \n INLINE_SIM_FPU (int)\n sim_fpu_u64to (sim_fpu *f,\n-\t       unsigned64 u,\n+\t       uint64_t u,\n \t       sim_fpu_round round)\n {\n   u2fpu (f, u, 1);\n@@ -2082,29 +2082,29 @@ sim_fpu_u64to (sim_fpu *f,\n \n \n INLINE_SIM_FPU (int)\n-sim_fpu_to32i (signed32 *i,\n+sim_fpu_to32i (int32_t *i,\n \t       const sim_fpu *f,\n \t       sim_fpu_round round)\n {\n-  signed64 i64;\n+  int64_t i64;\n   int status = fpu2i (&i64, f, 0, round);\n   *i = i64;\n   return status;\n }\n \n INLINE_SIM_FPU (int)\n-sim_fpu_to32u (unsigned32 *u,\n+sim_fpu_to32u (uint32_t *u,\n \t       const sim_fpu *f,\n \t       sim_fpu_round round)\n {\n-  unsigned64 u64;\n+  uint64_t u64;\n   int status = fpu2u (&u64, f, 0);\n   *u = u64;\n   return status;\n }\n \n INLINE_SIM_FPU (int)\n-sim_fpu_to64i (signed64 *i,\n+sim_fpu_to64i (int64_t *i,\n \t       const sim_fpu *f,\n \t       sim_fpu_round round)\n {\n@@ -2113,7 +2113,7 @@ sim_fpu_to64i (signed64 *i,\n \n \n INLINE_SIM_FPU (int)\n-sim_fpu_to64u (unsigned64 *u,\n+sim_fpu_to64u (uint64_t *u,\n \t       const sim_fpu *f,\n \t       sim_fpu_round round)\n {\n@@ -2277,18 +2277,18 @@ sim_fpu_exp (const sim_fpu *d)\n }\n \n \n-INLINE_SIM_FPU (unsigned64)\n+INLINE_SIM_FPU (uint64_t)\n sim_fpu_fraction (const sim_fpu *d)\n {\n   return d->fraction;\n }\n \n \n-INLINE_SIM_FPU (unsigned64)\n+INLINE_SIM_FPU (uint64_t)\n sim_fpu_guard (const sim_fpu *d, int is_double)\n {\n-  unsigned64 rv;\n-  unsigned64 guardmask = LSMASK64 (NR_GUARDS - 1, 0);\n+  uint64_t rv;\n+  uint64_t guardmask = LSMASK64 (NR_GUARDS - 1, 0);\n   rv = (d->fraction & guardmask) >> NR_PAD;\n   return rv;\n }"
    },
    {
      "sha": "447621b5d7314e1b3b0d6bd9de89916358cbc921",
      "filename": "sim/common/sim-fpu.h",
      "status": "modified",
      "additions": 23,
      "deletions": 23,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-fpu.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-fpu.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-fpu.h?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -91,7 +91,7 @@ typedef enum\n typedef struct _sim_fpu {\n   sim_fpu_class class;\n   int sign;\n-  unsigned64 fraction;\n+  uint64_t fraction;\n   int normal_exp;\n } sim_fpu;\n \n@@ -171,13 +171,13 @@ typedef enum\n    emulating exact FPU behavior, sim_fpu_round_{32,64} should be\n    called before packing the sim_fpu value.  */\n \n-INLINE_SIM_FPU (void) sim_fpu_32to (sim_fpu *f, unsigned32 s);\n-INLINE_SIM_FPU (void) sim_fpu_232to (sim_fpu *f, unsigned32 h, unsigned32 l);\n-INLINE_SIM_FPU (void) sim_fpu_64to (sim_fpu *f, unsigned64 d);\n+INLINE_SIM_FPU (void) sim_fpu_32to (sim_fpu *f, uint32_t s);\n+INLINE_SIM_FPU (void) sim_fpu_232to (sim_fpu *f, uint32_t h, uint32_t l);\n+INLINE_SIM_FPU (void) sim_fpu_64to (sim_fpu *f, uint64_t d);\n \n-INLINE_SIM_FPU (void) sim_fpu_to32 (unsigned32 *s, const sim_fpu *f);\n-INLINE_SIM_FPU (void) sim_fpu_to232 (unsigned32 *h, unsigned32 *l, const sim_fpu *f);\n-INLINE_SIM_FPU (void) sim_fpu_to64 (unsigned64 *d, const sim_fpu *f);\n+INLINE_SIM_FPU (void) sim_fpu_to32 (uint32_t *s, const sim_fpu *f);\n+INLINE_SIM_FPU (void) sim_fpu_to232 (uint32_t *h, uint32_t *l, const sim_fpu *f);\n+INLINE_SIM_FPU (void) sim_fpu_to64 (uint64_t *d, const sim_fpu *f);\n \n \n /* Create a sim_fpu struct using raw information.  (FRACTION & LSMASK\n@@ -189,12 +189,12 @@ INLINE_SIM_FPU (void) sim_fpu_to64 (unsigned64 *d, const sim_fpu *f);\n \n    You can not specify zero using this function. */\n \n-INLINE_SIM_FPU (void) sim_fpu_fractionto (sim_fpu *f, int sign, int normal_exp, unsigned64 fraction, int precision);\n+INLINE_SIM_FPU (void) sim_fpu_fractionto (sim_fpu *f, int sign, int normal_exp, uint64_t fraction, int precision);\n \n /* Reverse operation.  If S is a non-zero number, discards the implied\n    leading one and returns PRECISION fraction bits.  No rounding is\n    performed. */\n-INLINE_SIM_FPU (unsigned64) sim_fpu_tofraction (const sim_fpu *s, int precision);\n+INLINE_SIM_FPU (uint64_t) sim_fpu_tofraction (const sim_fpu *s, int precision);\n \n \n \n@@ -250,37 +250,37 @@ INLINE_SIM_FPU (int) sim_fpu_sqrt (sim_fpu *f,\n \n /* Conversion of integer <-> floating point. */\n \n-INLINE_SIM_FPU (int) sim_fpu_i32to (sim_fpu *f, signed32 i,\n+INLINE_SIM_FPU (int) sim_fpu_i32to (sim_fpu *f, int32_t i,\n \t\t\t\t    sim_fpu_round round);\n-INLINE_SIM_FPU (int) sim_fpu_u32to (sim_fpu *f, unsigned32 u,\n+INLINE_SIM_FPU (int) sim_fpu_u32to (sim_fpu *f, uint32_t u,\n \t\t\t\t    sim_fpu_round round);\n-INLINE_SIM_FPU (int) sim_fpu_i64to (sim_fpu *f, signed64 i,\n+INLINE_SIM_FPU (int) sim_fpu_i64to (sim_fpu *f, int64_t i,\n \t\t\t\t    sim_fpu_round round);\n-INLINE_SIM_FPU (int) sim_fpu_u64to (sim_fpu *f, unsigned64 u,\n+INLINE_SIM_FPU (int) sim_fpu_u64to (sim_fpu *f, uint64_t u,\n \t\t\t\t    sim_fpu_round round);\n #if 0\n-INLINE_SIM_FPU (int) sim_fpu_i232to (sim_fpu *f, signed32 h, signed32 l,\n+INLINE_SIM_FPU (int) sim_fpu_i232to (sim_fpu *f, int32_t h, int32_t l,\n \t\t\t\t     sim_fpu_round round);\n #endif\n #if 0\n-INLINE_SIM_FPU (int) sim_fpu_u232to (sim_fpu *f, unsigned32 h, unsigned32 l,\n+INLINE_SIM_FPU (int) sim_fpu_u232to (sim_fpu *f, uint32_t h, uint32_t l,\n \t\t\t\t     sim_fpu_round round);\n #endif\n \n-INLINE_SIM_FPU (int) sim_fpu_to32i (signed32 *i, const sim_fpu *f,\n+INLINE_SIM_FPU (int) sim_fpu_to32i (int32_t *i, const sim_fpu *f,\n \t\t\t\t    sim_fpu_round round);\n-INLINE_SIM_FPU (int) sim_fpu_to32u (unsigned32 *u, const sim_fpu *f,\n+INLINE_SIM_FPU (int) sim_fpu_to32u (uint32_t *u, const sim_fpu *f,\n \t\t\t\t    sim_fpu_round round);\n-INLINE_SIM_FPU (int) sim_fpu_to64i (signed64 *i, const sim_fpu *f,\n+INLINE_SIM_FPU (int) sim_fpu_to64i (int64_t *i, const sim_fpu *f,\n \t\t\t\t    sim_fpu_round round);\n-INLINE_SIM_FPU (int) sim_fpu_to64u (unsigned64 *u, const sim_fpu *f,\n+INLINE_SIM_FPU (int) sim_fpu_to64u (uint64_t *u, const sim_fpu *f,\n \t\t\t\t    sim_fpu_round round);\n #if 0\n-INLINE_SIM_FPU (int) sim_fpu_to232i (signed64 *h, signed64 *l, const sim_fpu *f,\n+INLINE_SIM_FPU (int) sim_fpu_to232i (int64_t *h, int64_t *l, const sim_fpu *f,\n \t\t\t\t     sim_fpu_round round);\n #endif\n #if 0\n-INLINE_SIM_FPU (int) sim_fpu_to232u (unsigned64 *h, unsigned64 *l, const sim_fpu *f,\n+INLINE_SIM_FPU (int) sim_fpu_to232u (uint64_t *h, uint64_t *l, const sim_fpu *f,\n \t\t\t\t     sim_fpu_round round);\n #endif\n \n@@ -320,8 +320,8 @@ INLINE_SIM_FPU (int) sim_fpu_is_denorm (const sim_fpu *s); /* !zero */\n \n INLINE_SIM_FPU (int) sim_fpu_sign (const sim_fpu *s);\n INLINE_SIM_FPU (int) sim_fpu_exp (const sim_fpu *s);\n-INLINE_SIM_FPU (unsigned64) sim_fpu_fraction (const sim_fpu *s);\n-INLINE_SIM_FPU (unsigned64) sim_fpu_guard (const sim_fpu *s, int is_double);\n+INLINE_SIM_FPU (uint64_t) sim_fpu_fraction (const sim_fpu *s);\n+INLINE_SIM_FPU (uint64_t) sim_fpu_guard (const sim_fpu *s, int is_double);\n \n \n "
    },
    {
      "sha": "342188391d73f1c2d7208908ecbb2ad2f3f1e89d",
      "filename": "sim/common/sim-memopt.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-memopt.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-memopt.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-memopt.c?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -41,7 +41,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n #include \"sim-options.h\"\n \n /* Memory fill byte. */\n-static unsigned8 fill_byte_value;\n+static uint8_t fill_byte_value;\n static int fill_byte_flag = 0;\n \n /* Memory mapping; see OPTION_MEMORY_MAPFILE. */\n@@ -143,7 +143,7 @@ do_memopt_add (SIM_DESC sd,\n     {\n       /* Allocate new well-aligned buffer, just as sim_core_attach(). */\n       void *aligned_buffer;\n-      int padding = (addr % sizeof (unsigned64));\n+      int padding = (addr % sizeof (uint64_t));\n       unsigned long bytes;\n \n #ifdef HAVE_MMAP\n@@ -457,7 +457,7 @@ memory_option_handler (SIM_DESC sd, sim_cpu *cpu, int opt,\n \n     case OPTION_MEMORY_CLEAR:\n       {\n-\tfill_byte_value = (unsigned8) 0;\n+\tfill_byte_value = (uint8_t) 0;\n \tfill_byte_flag = 1;\n \treturn SIM_RC_OK;\n \tbreak;\n@@ -472,7 +472,7 @@ memory_option_handler (SIM_DESC sd, sim_cpu *cpu, int opt,\n \t    sim_io_eprintf (sd, \"Missing fill value between 0 and 255\\n\");\n \t    return SIM_RC_FAIL;\n \t  }\n-\tfill_byte_value = (unsigned8) fill_value;\n+\tfill_byte_value = (uint8_t) fill_value;\n \tfill_byte_flag = 1;\n \treturn SIM_RC_OK;\n \tbreak;"
    },
    {
      "sha": "bcb00436ce0e73e550244462b13d3b8b28def5e8",
      "filename": "sim/common/sim-n-bits.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-n-bits.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-n-bits.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-n-bits.h?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -34,8 +34,8 @@\n #endif\n \n /* NOTE: See end of file for #undef */\n-#define unsignedN XCONCAT2(unsigned,N)\n-#define signedN XCONCAT2(signed,N)\n+#define unsignedN XCONCAT3(uint,N,_t)\n+#define signedN XCONCAT3(int,N,_t)\n #define LSMASKn XCONCAT2(LSMASK,N)\n #define MSMASKn XCONCAT2(MSMASK,N)\n #define LSMASKEDn XCONCAT2(LSMASKED,N)"
    },
    {
      "sha": "7d229822b1baaae92c993810ded760b1c295d34b",
      "filename": "sim/common/sim-profile.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-profile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-profile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-profile.c?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -693,7 +693,7 @@ profile_print_pc (sim_cpu *cpu, int verbose)\n       {\n \tint ok;\n \t/* FIXME: what if the target has a 64 bit PC? */\n-\tunsigned32 header[3];\n+\tuint32_t header[3];\n \tunsigned loop;\n \tif (PROFILE_PC_END (profile) != 0)\n \t  {\n@@ -718,7 +718,7 @@ profile_print_pc (sim_cpu *cpu, int verbose)\n \t     ok && (loop < PROFILE_PC_NR_BUCKETS (profile));\n \t     loop++)\n \t  {\n-\t    signed16 sample;\n+\t    int16_t sample;\n \t    if (PROFILE_PC_COUNT (profile) [loop] >= 0xffff)\n \t      sample = 0xffff;\n \t    else"
    },
    {
      "sha": "0b63bdb07b656cc76e5324ed6aa8c6a5cef5d30d",
      "filename": "sim/common/sim-trace.c",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-trace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-trace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-trace.c?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -558,13 +558,13 @@ print_data (SIM_DESC sd,\n       {\n \tswitch (size)\n \t  {\n-\t  case sizeof (unsigned32):\n-\t    trace_printf (sd, cpu, \" 0x%08lx\", (long) * (unsigned32*) data);\n+\t  case sizeof (uint32_t):\n+\t    trace_printf (sd, cpu, \" 0x%08lx\", (long) * (uint32_t*) data);\n \t    break;\n-\t  case sizeof (unsigned64):\n+\t  case sizeof (uint64_t):\n \t    trace_printf (sd, cpu, \" 0x%08lx%08lx\",\n-\t\t\t  (long) ((* (unsigned64*) data) >> 32),\n-\t\t\t  (long) * (unsigned64*) data);\n+\t\t\t  (long) ((* (uint64_t*) data) >> 32),\n+\t\t\t  (long) * (uint64_t*) data);\n \t    break;\n \t  default:\n \t    abort ();\n@@ -585,10 +585,10 @@ print_data (SIM_DESC sd,\n \t  {\n \t    /* FIXME: Assumes sizeof float == 4; sizeof double == 8 */\n \t  case 4:\n-\t    sim_fpu_32to (&fp, *(unsigned32*)data);\n+\t    sim_fpu_32to (&fp, *(uint32_t*)data);\n \t    break;\n \t  case 8:\n-\t    sim_fpu_64to (&fp, *(unsigned64*)data);\n+\t    sim_fpu_64to (&fp, *(uint64_t*)data);\n \t    break;\n \t  default:\n \t    abort ();\n@@ -598,12 +598,12 @@ print_data (SIM_DESC sd,\n \t  {\n \t  case 4:\n \t    trace_printf (sd, cpu, \" (0x%08lx)\",\n-\t\t\t  (long) *(unsigned32*)data);\n+\t\t\t  (long) *(uint32_t*)data);\n \t    break;\n \t  case 8:\n \t    trace_printf (sd, cpu, \" (0x%08lx%08lx)\",\n-\t\t\t  (long) (*(unsigned64*)data >> 32),\n-\t\t\t  (long) (*(unsigned64*)data));\n+\t\t\t  (long) (*(uint64_t*)data >> 32),\n+\t\t\t  (long) (*(uint64_t*)data));\n \t    break;\n \t  default:\n \t    abort ();"
    },
    {
      "sha": "d08810d9fccde34ef579dd7f35b7bcbe28c67b0c",
      "filename": "sim/common/sim-trace.h",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-trace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-trace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-trace.h?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -179,13 +179,13 @@ typedef struct _trace_data {\n   /* Buffer to save the inputs for the current instruction.  Use a\n      union to force the buffer into correct alignment */\n   union {\n-    unsigned8 i8;\n-    unsigned16 i16;\n-    unsigned32 i32;\n-    unsigned64 i64;\n+    uint8_t i8;\n+    uint16_t i16;\n+    uint32_t i32;\n+    uint64_t i64;\n   } trace_input_data[16];\n-  unsigned8 trace_input_fmt[16];\n-  unsigned8 trace_input_size[16];\n+  uint8_t trace_input_fmt[16];\n+  uint8_t trace_input_size[16];\n   int trace_input_idx;\n #define TRACE_INPUT_DATA(t) ((t)->trace_input_data)\n #define TRACE_INPUT_FMT(t) ((t)->trace_input_fmt)"
    },
    {
      "sha": "b4dad0d957a5de4cd0f268a3e4eb8f072dcd81eb",
      "filename": "sim/common/sim-types.h",
      "status": "modified",
      "additions": 37,
      "deletions": 44,
      "changes": 81,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-types.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4c803f5bb08e946f0550260b39f71eff0192262/sim/common/sim-types.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-types.h?ref=e4c803f5bb08e946f0550260b39f71eff0192262",
      "patch": "@@ -33,8 +33,11 @@\n \n    TYPES:\n \n-     signed*    signed type of the given size\n-     unsigned*  The corresponding insigned type\n+     intNN_t    Signed type of the given bit size\n+     uintNN_t   The corresponding unsigned type\n+\n+     signed128     Non-standard type for 128-bit integers.\n+     unsigned128   Likewise, but unsigned.\n \n    SIZES\n \n@@ -56,38 +59,28 @@\n # define SIGNED32(X)\t(X##i32)\n # define SIGNED64(X)\t(X##i64)\n #else\n-# define UNSIGNED32(X)\t((unsigned32) X##UL)\n-# define UNSIGNED64(X)\t((unsigned64) X##ULL)\n-# define SIGNED32(X)\t((signed32) X##L)\n-# define SIGNED64(X)\t((signed64) X##LL)\n+# define UNSIGNED32(X)\t((uint32_t) X##UL)\n+# define UNSIGNED64(X)\t((uint64_t) X##ULL)\n+# define SIGNED32(X)\t((int32_t) X##L)\n+# define SIGNED64(X)\t((int64_t) X##LL)\n #endif\n \n-typedef int8_t signed8;\n-typedef int16_t signed16;\n-typedef int32_t signed32;\n-typedef int64_t signed64;\n-\n-typedef uint8_t unsigned8;\n-typedef uint16_t unsigned16;\n-typedef uint32_t unsigned32;\n-typedef uint64_t unsigned64;\n-\n-typedef struct { unsigned64 a[2]; } unsigned128;\n-typedef struct { signed64 a[2]; } signed128;\n+typedef struct { uint64_t a[2]; } unsigned128;\n+typedef struct { int64_t a[2]; } signed128;\n \n \n /* byte based */\n \n-typedef signed8 signed_1;\n-typedef signed16 signed_2;\n-typedef signed32 signed_4;\n-typedef signed64 signed_8;\n+typedef int8_t signed_1;\n+typedef int16_t signed_2;\n+typedef int32_t signed_4;\n+typedef int64_t signed_8;\n typedef signed128 signed_16;\n \n-typedef unsigned8 unsigned_1;\n-typedef unsigned16 unsigned_2;\n-typedef unsigned32 unsigned_4;\n-typedef unsigned64 unsigned_8;\n+typedef uint8_t unsigned_1;\n+typedef uint16_t unsigned_2;\n+typedef uint32_t unsigned_4;\n+typedef uint64_t unsigned_8;\n typedef unsigned128 unsigned_16;\n \n \n@@ -103,16 +96,16 @@ typedef unsigned128 unsigned_16;\n \n /* target architecture based */\n #if (WITH_TARGET_WORD_BITSIZE == 64)\n-typedef unsigned64 unsigned_word;\n-typedef signed64 signed_word;\n+typedef uint64_t unsigned_word;\n+typedef int64_t signed_word;\n #endif\n #if (WITH_TARGET_WORD_BITSIZE == 32)\n-typedef unsigned32 unsigned_word;\n-typedef signed32 signed_word;\n+typedef uint32_t unsigned_word;\n+typedef int32_t signed_word;\n #endif\n #if (WITH_TARGET_WORD_BITSIZE == 16)\n-typedef unsigned16 unsigned_word;\n-typedef signed16 signed_word;\n+typedef uint16_t unsigned_word;\n+typedef int16_t signed_word;\n #endif\n \n #define PRI_TW(t)\tSIM_PRI_TB (t, WITH_TARGET_WORD_BITSIZE)\n@@ -122,16 +115,16 @@ typedef signed16 signed_word;\n \n /* Other instructions */\n #if (WITH_TARGET_ADDRESS_BITSIZE == 64)\n-typedef unsigned64 unsigned_address;\n-typedef signed64 signed_address;\n+typedef uint64_t unsigned_address;\n+typedef int64_t signed_address;\n #endif\n #if (WITH_TARGET_ADDRESS_BITSIZE == 32)\n-typedef unsigned32 unsigned_address;\n-typedef signed32 signed_address;\n+typedef uint32_t unsigned_address;\n+typedef int32_t signed_address;\n #endif\n #if (WITH_TARGET_ADDRESS_BITSIZE == 16)\n-typedef unsigned16 unsigned_address;\n-typedef signed16 signed_address;\n+typedef uint16_t unsigned_address;\n+typedef int16_t signed_address;\n #endif\n typedef unsigned_address address_word;\n \n@@ -142,12 +135,12 @@ typedef unsigned_address address_word;\n \n /* IEEE 1275 cell size */\n #if (WITH_TARGET_CELL_BITSIZE == 64)\n-typedef unsigned64 unsigned_cell;\n-typedef signed64 signed_cell;\n+typedef uint64_t unsigned_cell;\n+typedef int64_t signed_cell;\n #endif\n #if (WITH_TARGET_CELL_BITSIZE == 32)\n-typedef unsigned32 unsigned_cell;\n-typedef signed32 signed_cell;\n+typedef uint32_t unsigned_cell;\n+typedef int32_t signed_cell;\n #endif\n typedef signed_cell cell_word; /* cells are normally signed */\n \n@@ -158,10 +151,10 @@ typedef signed_cell cell_word; /* cells are normally signed */\n \n /* Floating point registers */\n #if (WITH_TARGET_FLOATING_POINT_BITSIZE == 64)\n-typedef unsigned64 fp_word;\n+typedef uint64_t fp_word;\n #endif\n #if (WITH_TARGET_FLOATING_POINT_BITSIZE == 32)\n-typedef unsigned32 fp_word;\n+typedef uint32_t fp_word;\n #endif\n \n #define PRI_TF(t)\tSIM_PRI_TB (t, WITH_TARGET_FLOATING_POINT_BITSIZE)"
    }
  ]
}