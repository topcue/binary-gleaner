{
  "sha": "638fd74a616e095159e88ed4e596a71153bef88e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjM4ZmQ3NGE2MTZlMDk1MTU5ZTg4ZWQ0ZTU5NmE3MTE1M2JlZjg4ZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:29Z"
    },
    "message": "Implement Rust funcall operation\n\nThis adds the special code needed to handle the Rust function call\noperation.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* rust-lang.c (rust_structop::evaluate_funcall): New method.\n\t* rust-exp.h (class rust_structop) <evaluate_funcall>: Declare\n\tmethod.",
    "tree": {
      "sha": "5f078989f6be6d92436bf48743a39472e7dada07",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5f078989f6be6d92436bf48743a39472e7dada07"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/638fd74a616e095159e88ed4e596a71153bef88e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/638fd74a616e095159e88ed4e596a71153bef88e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/638fd74a616e095159e88ed4e596a71153bef88e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/638fd74a616e095159e88ed4e596a71153bef88e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a00b7254fb614af557de7ae7cc0eb39a0ce0e408",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a00b7254fb614af557de7ae7cc0eb39a0ce0e408",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a00b7254fb614af557de7ae7cc0eb39a0ce0e408"
    }
  ],
  "stats": {
    "total": 61,
    "additions": 61,
    "deletions": 0
  },
  "files": [
    {
      "sha": "e2ff8f416418e22868d364a4a33f507bec6faafe",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/638fd74a616e095159e88ed4e596a71153bef88e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/638fd74a616e095159e88ed4e596a71153bef88e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=638fd74a616e095159e88ed4e596a71153bef88e",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* rust-lang.c (rust_structop::evaluate_funcall): New method.\n+\t* rust-exp.h (class rust_structop) <evaluate_funcall>: Declare\n+\tmethod.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expression.h (class operation) <evaluate_funcall>: New methods."
    },
    {
      "sha": "1019922fe8a1693052b1465253a78b87db6ca9e2",
      "filename": "gdb/rust-exp.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/638fd74a616e095159e88ed4e596a71153bef88e/gdb/rust-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/638fd74a616e095159e88ed4e596a71153bef88e/gdb/rust-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-exp.h?ref=638fd74a616e095159e88ed4e596a71153bef88e",
      "patch": "@@ -203,6 +203,11 @@ class rust_structop\n \t\t\t\t  std::get<1> (m_storage).c_str ());\n   }\n \n+  value *evaluate_funcall (struct type *expect_type,\n+\t\t\t   struct expression *exp,\n+\t\t\t   enum noside noside,\n+\t\t\t   const std::vector<operation_up> &args) override;\n+\n   enum exp_opcode opcode () const override\n   { return STRUCTOP_STRUCT; }\n };"
    },
    {
      "sha": "e0b949b056abcaa12db85ce1026b9ff7dbd58b4b",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/638fd74a616e095159e88ed4e596a71153bef88e/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/638fd74a616e095159e88ed4e596a71153bef88e/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=638fd74a616e095159e88ed4e596a71153bef88e",
      "patch": "@@ -1756,6 +1756,56 @@ rust_aggregate_operation::evaluate (struct type *expect_type,\n   return result;\n }\n \n+value *\n+rust_structop::evaluate_funcall (struct type *expect_type,\n+\t\t\t\t struct expression *exp,\n+\t\t\t\t enum noside noside,\n+\t\t\t\t const std::vector<operation_up> &ops)\n+{\n+  std::vector<struct value *> args (ops.size () + 1);\n+\n+  /* Evaluate the argument to STRUCTOP_STRUCT, then find its\n+     type in order to look up the method.  */\n+  args[0] = std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n+  /* We don't yet implement real Deref semantics.  */\n+  while (value_type (args[0])->code () == TYPE_CODE_PTR)\n+    args[0] = value_ind (args[0]);\n+\n+  struct type *type = value_type (args[0]);\n+  if ((type->code () != TYPE_CODE_STRUCT\n+       && type->code () != TYPE_CODE_UNION\n+       && type->code () != TYPE_CODE_ENUM)\n+      || rust_tuple_type_p (type))\n+    error (_(\"Method calls only supported on struct or enum types\"));\n+  if (type->name () == NULL)\n+    error (_(\"Method call on nameless type\"));\n+\n+  std::string name = (std::string (type->name ()) + \"::\"\n+\t\t      + std::get<1> (m_storage));\n+\n+  const struct block *block = get_selected_block (0);\n+  struct block_symbol sym = lookup_symbol (name.c_str (), block,\n+\t\t\t\t\t   VAR_DOMAIN, NULL);\n+  if (sym.symbol == NULL)\n+    error (_(\"Could not find function named '%s'\"), name.c_str ());\n+\n+  struct type *fn_type = SYMBOL_TYPE (sym.symbol);\n+  if (fn_type->num_fields () == 0)\n+    error (_(\"Function '%s' takes no arguments\"), name.c_str ());\n+\n+  if (fn_type->field (0).type ()->code () == TYPE_CODE_PTR)\n+    args[0] = value_addr (args[0]);\n+\n+  value *function = address_of_variable (sym.symbol, block);\n+\n+  for (int i = 0; i < ops.size (); ++i)\n+    args[i + 1] = ops[i]->evaluate (nullptr, exp, noside);\n+\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n+    return value_zero (TYPE_TARGET_TYPE (fn_type), not_lval);\n+  return call_function_by_hand (function, NULL, args);\n+}\n+\n }\n \n /* operator_length implementation for Rust.  */"
    }
  ]
}