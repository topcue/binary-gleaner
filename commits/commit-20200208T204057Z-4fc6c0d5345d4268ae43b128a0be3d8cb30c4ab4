{
  "sha": "4fc6c0d5345d4268ae43b128a0be3d8cb30c4ab4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGZjNmMwZDUzNDVkNDI2OGFlNDNiMTI4YTBiZTNkOGNiMzBjNGFiNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:40:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:40:57Z"
    },
    "message": "Change attr_form_is_block to be a method\n\nThis changes attr_form_is_block to be a method.  This is done\nseparately because, unlike the other attribute functions,\nattr_form_is_block had special handling for the case where the\nargument was NULL.  This required auditing each call site; in most\ncases, NULL was already ruled out, but in a few spots, an additional\ncheck was needed.\n\ngdb/ChangeLog\n2020-02-08  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2read.c (read_call_site_scope)\n\t(handle_data_member_location, dwarf2_add_member_fn)\n\t(mark_common_block_symbol_computed, read_common_block)\n\t(attr_to_dynamic_prop, partial_die_info::read)\n\t(var_decode_location, dwarf2_fetch_die_loc_sect_off)\n\t(dwarf2_symbol_mark_computed, set_die_type): Update.\n\t* dwarf2/attribute.h (struct attribute) <form_is_block>: Declare\n\tmethod.\n\t(attr_form_is_block): Don't declare.\n\t* dwarf2/attribute.c (attribute::form_is_block): Now a method.\n\nChange-Id: Idfb290c61d738301ab991666f43e0b9cf577b2ae",
    "tree": {
      "sha": "d1b01e37a7ad5942d518e0393c764becca4785cf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d1b01e37a7ad5942d518e0393c764becca4785cf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4fc6c0d5345d4268ae43b128a0be3d8cb30c4ab4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4fc6c0d5345d4268ae43b128a0be3d8cb30c4ab4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4fc6c0d5345d4268ae43b128a0be3d8cb30c4ab4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4fc6c0d5345d4268ae43b128a0be3d8cb30c4ab4/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cd6c91b4f8c429d49a103c3ad45ee741e41bd835",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cd6c91b4f8c429d49a103c3ad45ee741e41bd835",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cd6c91b4f8c429d49a103c3ad45ee741e41bd835"
    }
  ],
  "stats": {
    "total": 78,
    "additions": 45,
    "deletions": 33
  },
  "files": [
    {
      "sha": "fc15d0d5e5b9b17774806fad3b8d0061aa3833a1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4fc6c0d5345d4268ae43b128a0be3d8cb30c4ab4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4fc6c0d5345d4268ae43b128a0be3d8cb30c4ab4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4fc6c0d5345d4268ae43b128a0be3d8cb30c4ab4",
      "patch": "@@ -1,3 +1,16 @@\n+2020-02-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2read.c (read_call_site_scope)\n+\t(handle_data_member_location, dwarf2_add_member_fn)\n+\t(mark_common_block_symbol_computed, read_common_block)\n+\t(attr_to_dynamic_prop, partial_die_info::read)\n+\t(var_decode_location, dwarf2_fetch_die_loc_sect_off)\n+\t(dwarf2_symbol_mark_computed, set_die_type): Update.\n+\t* dwarf2/attribute.h (struct attribute) <form_is_block>: Declare\n+\tmethod.\n+\t(attr_form_is_block): Don't declare.\n+\t* dwarf2/attribute.c (attribute::form_is_block): Now a method.\n+\n 2020-02-08  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2read.c (dwarf2_find_base_address, )"
    },
    {
      "sha": "6efff3e2c0abd2f7a2dcf4da8b4b7b6fc3465229",
      "filename": "gdb/dwarf2/attribute.c",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4fc6c0d5345d4268ae43b128a0be3d8cb30c4ab4/gdb/dwarf2/attribute.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4fc6c0d5345d4268ae43b128a0be3d8cb30c4ab4/gdb/dwarf2/attribute.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.c?ref=4fc6c0d5345d4268ae43b128a0be3d8cb30c4ab4",
      "patch": "@@ -59,15 +59,14 @@ attribute::value_as_address () const\n \n /* See attribute.h.  */\n \n-int\n-attr_form_is_block (const struct attribute *attr)\n+bool\n+attribute::form_is_block () const\n {\n-  return (attr == NULL ? 0 :\n-      attr->form == DW_FORM_block1\n-      || attr->form == DW_FORM_block2\n-      || attr->form == DW_FORM_block4\n-      || attr->form == DW_FORM_block\n-      || attr->form == DW_FORM_exprloc);\n+  return (form == DW_FORM_block1\n+\t  || form == DW_FORM_block2\n+\t  || form == DW_FORM_block4\n+\t  || form == DW_FORM_block\n+\t  || form == DW_FORM_exprloc);\n }\n \n /* See attribute.h.  */"
    },
    {
      "sha": "c2602310715c26ccd72aae36070436ffcadce1d5",
      "filename": "gdb/dwarf2/attribute.h",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4fc6c0d5345d4268ae43b128a0be3d8cb30c4ab4/gdb/dwarf2/attribute.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4fc6c0d5345d4268ae43b128a0be3d8cb30c4ab4/gdb/dwarf2/attribute.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.h?ref=4fc6c0d5345d4268ae43b128a0be3d8cb30c4ab4",
      "patch": "@@ -79,6 +79,11 @@ struct attribute\n \n   bool form_is_ref () const;\n \n+  /* Check if the attribute's form is a DW_FORM_block*\n+     if so return true else false.  */\n+\n+  bool form_is_block () const;\n+\n \n   ENUM_BITFIELD(dwarf_attribute) name : 16;\n   ENUM_BITFIELD(dwarf_form) form : 15;\n@@ -110,9 +115,4 @@ struct attribute\n #define DW_ADDR(attr)\t   ((attr)->u.addr)\n #define DW_SIGNATURE(attr) ((attr)->u.signature)\n \n-/* Check if the attribute's form is a DW_FORM_block*\n-   if so return true else false.  */\n-\n-extern int attr_form_is_block (const struct attribute *attr);\n-\n #endif /* GDB_DWARF2_ATTRIBUTE_H */"
    },
    {
      "sha": "7a9de41e7d8357a185f52efdd5c258bf7e888fdf",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 20,
      "deletions": 20,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4fc6c0d5345d4268ae43b128a0be3d8cb30c4ab4/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4fc6c0d5345d4268ae43b128a0be3d8cb30c4ab4/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=4fc6c0d5345d4268ae43b128a0be3d8cb30c4ab4",
      "patch": "@@ -13693,9 +13693,9 @@ read_call_site_scope (struct die_info *die, struct dwarf2_cu *cu)\n       attr = dwarf2_attr (die, DW_AT_abstract_origin, cu);\n     }\n   SET_FIELD_DWARF_BLOCK (call_site->target, NULL);\n-  if (!attr || (attr_form_is_block (attr) && DW_BLOCK (attr)->size == 0))\n+  if (!attr || (attr->form_is_block () && DW_BLOCK (attr)->size == 0))\n     /* Keep NULL DWARF_BLOCK.  */;\n-  else if (attr_form_is_block (attr))\n+  else if (attr->form_is_block ())\n     {\n       struct dwarf2_locexpr_baton *dlbaton;\n \n@@ -13801,7 +13801,7 @@ read_call_site_scope (struct die_info *die, struct dwarf2_cu *cu)\n \t  parameter->u.param_cu_off\n \t    = (cu_offset) (sect_off - cu->header.sect_off);\n \t}\n-      else if (loc == NULL || origin != NULL || !attr_form_is_block (loc))\n+      else if (loc == NULL || origin != NULL || !loc->form_is_block ())\n \t{\n \t  complaint (_(\"No DW_FORM_block* DW_AT_location for \"\n \t\t       \"DW_TAG_call_site child DIE %s [in module %s]\"),\n@@ -13833,7 +13833,7 @@ read_call_site_scope (struct die_info *die, struct dwarf2_cu *cu)\n       attr = dwarf2_attr (child_die, DW_AT_call_value, cu);\n       if (attr == NULL)\n \tattr = dwarf2_attr (child_die, DW_AT_GNU_call_site_value, cu);\n-      if (!attr_form_is_block (attr))\n+      if (attr == NULL || !attr->form_is_block ())\n \t{\n \t  complaint (_(\"No DW_FORM_block* DW_AT_call_value for \"\n \t\t       \"DW_TAG_call_site child DIE %s [in module %s]\"),\n@@ -13854,7 +13854,7 @@ read_call_site_scope (struct die_info *die, struct dwarf2_cu *cu)\n \tattr = dwarf2_attr (child_die, DW_AT_GNU_call_site_data_value, cu);\n       if (attr != nullptr)\n \t{\n-\t  if (!attr_form_is_block (attr))\n+\t  if (!attr->form_is_block ())\n \t    complaint (_(\"No DW_FORM_block* DW_AT_call_data_value for \"\n \t\t\t \"DW_TAG_call_site child DIE %s [in module %s]\"),\n \t\t       sect_offset_str (child_die->sect_off),\n@@ -14627,7 +14627,7 @@ handle_data_member_location (struct die_info *die, struct dwarf2_cu *cu,\n \t*offset = dwarf2_get_attr_constant_value (attr, 0);\n       else if (attr->form_is_section_offset ())\n \tdwarf2_complex_location_expr_complaint ();\n-      else if (attr_form_is_block (attr))\n+      else if (attr->form_is_block ())\n \t*offset = decode_locdesc (DW_BLOCK (attr), cu);\n       else\n \tdwarf2_complex_location_expr_complaint ();\n@@ -15205,7 +15205,7 @@ dwarf2_add_member_fn (struct field_info *fip, struct die_info *die,\n   attr = dwarf2_attr (die, DW_AT_vtable_elem_location, cu);\n   if (attr != nullptr)\n     {\n-      if (attr_form_is_block (attr) && DW_BLOCK (attr)->size > 0)\n+      if (attr->form_is_block () && DW_BLOCK (attr)->size > 0)\n         {\n \t  if (DW_BLOCK (attr)->data[0] == DW_OP_constu)\n \t    {\n@@ -16416,8 +16416,8 @@ mark_common_block_symbol_computed (struct symbol *sym,\n   LONGEST offset = 0;\n \n   gdb_assert (common_loc && member_loc);\n-  gdb_assert (attr_form_is_block (common_loc));\n-  gdb_assert (attr_form_is_block (member_loc)\n+  gdb_assert (common_loc->form_is_block ());\n+  gdb_assert (member_loc->form_is_block ()\n \t      || member_loc->form_is_constant ());\n \n   baton = XOBNEW (&objfile->objfile_obstack, struct dwarf2_locexpr_baton);\n@@ -16478,7 +16478,7 @@ read_common_block (struct die_info *die, struct dwarf2_cu *cu)\n   if (attr != nullptr)\n     {\n       /* Support the .debug_loc offsets.  */\n-      if (attr_form_is_block (attr))\n+      if (attr->form_is_block ())\n         {\n \t  /* Ok.  */\n         }\n@@ -16546,7 +16546,7 @@ read_common_block (struct die_info *die, struct dwarf2_cu *cu)\n \t\t  if (member_loc->form_is_section_offset ())\n \t\t    dwarf2_complex_location_expr_complaint ();\n \t\t  else if (member_loc->form_is_constant ()\n-\t\t\t   || attr_form_is_block (member_loc))\n+\t\t\t   || member_loc->form_is_block ())\n \t\t    {\n \t\t      if (attr != nullptr)\n \t\t\tmark_common_block_symbol_computed (sym, die, attr,\n@@ -17530,7 +17530,7 @@ attr_to_dynamic_prop (const struct attribute *attr, struct die_info *die,\n   if (attr == NULL || prop == NULL)\n     return 0;\n \n-  if (attr_form_is_block (attr))\n+  if (attr->form_is_block ())\n     {\n       baton = XOBNEW (obstack, struct dwarf2_property_baton);\n       baton->property_type = default_type;\n@@ -17576,7 +17576,7 @@ attr_to_dynamic_prop (const struct attribute *attr, struct die_info *die,\n \t\tprop->kind = PROP_LOCLIST;\n \t\tgdb_assert (prop->data.baton != NULL);\n \t      }\n-\t    else if (attr_form_is_block (target_attr))\n+\t    else if (target_attr->form_is_block ())\n \t      {\n \t\tbaton = XOBNEW (obstack, struct dwarf2_property_baton);\n \t\tbaton->property_type = die_type (target_die, target_cu);\n@@ -18486,7 +18486,7 @@ partial_die_info::read (const struct die_reader_specs *reader,\n \t  break;\n \tcase DW_AT_location:\n           /* Support the .debug_loc offsets.  */\n-          if (attr_form_is_block (&attr))\n+          if (attr.form_is_block ())\n             {\n \t       d.locdesc = DW_BLOCK (&attr);\n             }\n@@ -21131,7 +21131,7 @@ var_decode_location (struct attribute *attr, struct symbol *sym,\n \n   /* A DW_AT_location attribute with no contents indicates that a\n      variable has been optimized away.  */\n-  if (attr_form_is_block (attr) && DW_BLOCK (attr)->size == 0)\n+  if (attr->form_is_block () && DW_BLOCK (attr)->size == 0)\n     {\n       SYMBOL_ACLASS_INDEX (sym) = LOC_OPTIMIZED_OUT;\n       return;\n@@ -21142,7 +21142,7 @@ var_decode_location (struct attribute *attr, struct symbol *sym,\n      specified.  If this is just a DW_OP_addr, DW_OP_addrx, or\n      DW_OP_GNU_addr_index then mark this symbol as LOC_STATIC.  */\n \n-  if (attr_form_is_block (attr)\n+  if (attr->form_is_block ()\n       && ((DW_BLOCK (attr)->data[0] == DW_OP_addr\n \t   && DW_BLOCK (attr)->size == 1 + cu_header->addr_size)\n \t  || ((DW_BLOCK (attr)->data[0] == DW_OP_GNU_addr_index\n@@ -23057,7 +23057,7 @@ dwarf2_fetch_die_loc_sect_off (sect_offset sect_off,\n     }\n   else\n     {\n-      if (!attr_form_is_block (attr))\n+      if (!attr->form_is_block ())\n \terror (_(\"Dwarf Error: DIE at %s referenced in module %s \"\n \t\t \"is neither DW_FORM_block* nor DW_FORM_exprloc\"),\n \t       sect_offset_str (sect_off), objfile_name (objfile));\n@@ -24814,7 +24814,7 @@ dwarf2_symbol_mark_computed (const struct attribute *attr, struct symbol *sym,\n       baton->per_cu = cu->per_cu;\n       gdb_assert (baton->per_cu);\n \n-      if (attr_form_is_block (attr))\n+      if (attr->form_is_block ())\n \t{\n \t  /* Note that we're just copying the block's data pointer\n \t     here, not the actual data.  We're still pointing into the\n@@ -25212,7 +25212,7 @@ set_die_type (struct die_info *die, struct type *type, struct dwarf2_cu *cu)\n \n   /* Read DW_AT_allocated and set in type.  */\n   attr = dwarf2_attr (die, DW_AT_allocated, cu);\n-  if (attr_form_is_block (attr))\n+  if (attr != NULL && attr->form_is_block ())\n     {\n       struct type *prop_type\n \t= dwarf2_per_cu_addr_sized_int_type (cu->per_cu, false);\n@@ -25228,7 +25228,7 @@ set_die_type (struct die_info *die, struct type *type, struct dwarf2_cu *cu)\n \n   /* Read DW_AT_associated and set in type.  */\n   attr = dwarf2_attr (die, DW_AT_associated, cu);\n-  if (attr_form_is_block (attr))\n+  if (attr != NULL && attr->form_is_block ())\n     {\n       struct type *prop_type\n \t= dwarf2_per_cu_addr_sized_int_type (cu->per_cu, false);"
    }
  ]
}