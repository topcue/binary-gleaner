{
  "sha": "fbf3c4b97907cb198168f58e7a22d497868e5926",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmJmM2M0Yjk3OTA3Y2IxOTgxNjhmNThlN2EyMmQ0OTc4NjhlNTkyNg==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-05-23T08:08:45Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-05-23T08:08:45Z"
    },
    "message": "[gdb/tdep] Use pid to choose process 64/32-bitness\n\nIn a linux kernel mailing list discussion, it was mentioned that \"gdb has\nthis odd thing where it takes the 64-bit vs 32-bit data for the whole process\nfrom one thread, and picks the worst possible thread to do it (ie explicitly\nnot even the main thread, ...)\" [1].\n\nThe picking of the thread is done here in\nx86_linux_nat_target::read_description:\n...\n  /* GNU/Linux LWP ID's are process ID's.  */\n  tid = inferior_ptid.lwp ();\n  if (tid == 0)\n    tid = inferior_ptid.pid (); /* Not a threaded program.  */\n...\n\nTo understand what this code does, let's investigate a scenario in which\ninferior_ptid.lwp () != inferior_ptid.pid ().\n\nSay we start exec jit-attach-pie, identified with pid x.  The main thread\nstarts another thread that sleeps, and then the main thread waits for the\nsleeping thread.  So we have two threads, identified with LWP IDs x and x+1:\n...\nPID  LWP  CMD\nx    x    ./jit-attach-pie\nx    x+1  ./jit-attach-pie\n...\n[ The thread with LWP x is known as the thread group leader. ]\n\nWhen attaching to this exec using the pid, gdb does a stop_all_threads which\niterates over all the threads, first LWP x, and then LWP x+1.\n\nSo the state we arrive with at x86_linux_nat_target::read_description is:\n...\n(gdb) p inferior_ptid\n$1 = {m_pid = x, m_lwp = x+1, m_tid = 0}\n...\nand consequently we probe 64/32-bitness from thread LWP x+1.\n\n[ Note that this is different from when gdb doesn't attach but instead\nlaunches the exec itself, in which case there's just one thread to begin with,\nand consequently the probed thread is LWP x. ]\n\nAccording to aforementioned remark, a better choice would have been the main\nthread, that is, LWP x.\n\nThis patch implement that choice, by simply doing:\n...\n  tid = inferior_ptid.pid ();\n...\n\nThe fact that gdb makes a per-process permanent choice for 64/32-bitness is a\nproblem in itself: each thread can be in either 64 or 32 bit mode, and change\nforth and back.  That is a problem that this patch doesn't fix.\n\nNow finally: why does this matter in the context of the linux kernel\ndiscussion?  The discussion was related to a patch that exposed io_uring\nthreads to user-space.  This made it possible that one of those threads would\nbe picked out to select 64/32-bitness.  Given that such threads are atypical\nuser-space threads in the sense that they don't return to user-space and don't\nhave a userspace register state, reading their registers returns garbage, and\nso it could f.i. occur that in a 64-bit process with all normal user-space\nthreads in 64-bit mode, the probing would return 32-bit.\n\nIt may be that this is worked-around on the kernel side by providing userspace\nregister state in those threads such that current gdb is happy.  Nevertheless,\nit seems prudent to fix this on the gdb size as well.\n\nTested on x86_64-linux.\n\n[1] https://lore.kernel.org/io-uring/CAHk-=wh0KoEZXPYMGkfkeVEerSCEF1AiCZSvz9TRrx=Kj74D+Q@mail.gmail.com/\n\ngdb/ChangeLog:\n\n2021-05-23  Tom de Vries  <tdevries@suse.de>\n\n\tPR tdep/27822\n\t* target.h (struct target_ops): Mention target_thread_architecture in\n\tread_description comment.\n\t* x86-linux-nat.c (x86_linux_nat_target::read_description): Use\n\tpid to determine if process is 64-bit or 32-bit.\n\t* aarch64-linux-nat.c (aarch64_linux_nat_target::read_description):\n\tSame.\n\t* ppc-linux-nat.c (ppc_linux_nat_target::read_description): Same.\n        * riscv-linux-nat.c (riscv_linux_nat_target::read_description): Same.\n\t* s390-linux-nat.c (s390_linux_nat_target::read_description): Same.\n\t* arm-linux-nat.c (arm_linux_nat_target::read_description): Same.\n\tLikewise, use pid to determine if kernel supports reading VFP\n\tregisters.",
    "tree": {
      "sha": "297c16a6c1465feb4764f3a83d8d65dd6660038b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/297c16a6c1465feb4764f3a83d8d65dd6660038b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fbf3c4b97907cb198168f58e7a22d497868e5926",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbf3c4b97907cb198168f58e7a22d497868e5926",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fbf3c4b97907cb198168f58e7a22d497868e5926",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbf3c4b97907cb198168f58e7a22d497868e5926/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "01a8c731aacbdbed0eb5682d13cc074dc7e25fb3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/01a8c731aacbdbed0eb5682d13cc074dc7e25fb3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/01a8c731aacbdbed0eb5682d13cc074dc7e25fb3"
    }
  ],
  "stats": {
    "total": 50,
    "additions": 34,
    "deletions": 16
  },
  "files": [
    {
      "sha": "480d204232a6d054bd16361cc05fd8a744712c03",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbf3c4b97907cb198168f58e7a22d497868e5926/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbf3c4b97907cb198168f58e7a22d497868e5926/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fbf3c4b97907cb198168f58e7a22d497868e5926",
      "patch": "@@ -1,3 +1,19 @@\n+2021-05-23  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR tdep/27822\n+\t* target.h (struct target_ops): Mention target_thread_architecture in\n+\tread_description comment.\n+\t* x86-linux-nat.c (x86_linux_nat_target::read_description): Use\n+\tpid to determine if process is 64-bit or 32-bit.\n+\t* aarch64-linux-nat.c (aarch64_linux_nat_target::read_description):\n+\tSame.\n+\t* ppc-linux-nat.c (ppc_linux_nat_target::read_description): Same.\n+        * riscv-linux-nat.c (riscv_linux_nat_target::read_description): Same.\n+\t* s390-linux-nat.c (s390_linux_nat_target::read_description): Same.\n+\t* arm-linux-nat.c (arm_linux_nat_target::read_description): Same.\n+\tLikewise, use pid to determine if kernel supports reading VFP\n+\tregisters.\n+\n 2021-05-22  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* main.c (enum cmdarg_kind): Fix option type comments for"
    },
    {
      "sha": "61224022f6aab16e74daa6115e69f613e934f2cb",
      "filename": "gdb/aarch64-linux-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbf3c4b97907cb198168f58e7a22d497868e5926/gdb/aarch64-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbf3c4b97907cb198168f58e7a22d497868e5926/gdb/aarch64-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-nat.c?ref=fbf3c4b97907cb198168f58e7a22d497868e5926",
      "patch": "@@ -723,7 +723,7 @@ aarch64_linux_nat_target::read_description ()\n   gdb_byte regbuf[ARM_VFP3_REGS_SIZE];\n   struct iovec iovec;\n \n-  tid = inferior_ptid.lwp ();\n+  tid = inferior_ptid.pid ();\n \n   iovec.iov_base = regbuf;\n   iovec.iov_len = ARM_VFP3_REGS_SIZE;"
    },
    {
      "sha": "880ac0da0440e8ed34939ff6be5e9c88ea472e71",
      "filename": "gdb/arm-linux-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbf3c4b97907cb198168f58e7a22d497868e5926/gdb/arm-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbf3c4b97907cb198168f58e7a22d497868e5926/gdb/arm-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-linux-nat.c?ref=fbf3c4b97907cb198168f58e7a22d497868e5926",
      "patch": "@@ -537,7 +537,7 @@ arm_linux_nat_target::read_description ()\n     {\n       elf_gregset_t gpregs;\n       struct iovec iov;\n-      int tid = inferior_ptid.lwp ();\n+      int tid = inferior_ptid.pid ();\n \n       iov.iov_base = &gpregs;\n       iov.iov_len = sizeof (gpregs);\n@@ -556,7 +556,7 @@ arm_linux_nat_target::read_description ()\n     {\n       /* Make sure that the kernel supports reading VFP registers.  Support was\n \t added in 2.6.30.  */\n-      int pid = inferior_ptid.lwp ();\n+      int pid = inferior_ptid.pid ();\n       errno = 0;\n       char *buf = (char *) alloca (ARM_VFP3_REGS_SIZE);\n       if (ptrace (PTRACE_GETVFPREGS, pid, 0, buf) < 0 && errno == EIO)"
    },
    {
      "sha": "06a30efeaef4908c863269f57844e1ff832575aa",
      "filename": "gdb/ppc-linux-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbf3c4b97907cb198168f58e7a22d497868e5926/gdb/ppc-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbf3c4b97907cb198168f58e7a22d497868e5926/gdb/ppc-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-linux-nat.c?ref=fbf3c4b97907cb198168f58e7a22d497868e5926",
      "patch": "@@ -1946,9 +1946,7 @@ ppc_linux_nat_target::auxv_parse (gdb_byte **readptr,\n const struct target_desc *\n ppc_linux_nat_target::read_description ()\n {\n-  int tid = inferior_ptid.lwp ();\n-  if (tid == 0)\n-    tid = inferior_ptid.pid ();\n+  int tid = inferior_ptid.pid ();\n \n   if (have_ptrace_getsetevrregs)\n     {"
    },
    {
      "sha": "c0f5a27a37eb24e2dba305166a82f319cd4ae8e7",
      "filename": "gdb/riscv-linux-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbf3c4b97907cb198168f58e7a22d497868e5926/gdb/riscv-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbf3c4b97907cb198168f58e7a22d497868e5926/gdb/riscv-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-linux-nat.c?ref=fbf3c4b97907cb198168f58e7a22d497868e5926",
      "patch": "@@ -202,7 +202,7 @@ const struct target_desc *\n riscv_linux_nat_target::read_description ()\n {\n   const struct riscv_gdbarch_features features\n-    = riscv_linux_read_features (inferior_ptid.lwp ());\n+    = riscv_linux_read_features (inferior_ptid.pid ());\n   return riscv_lookup_target_description (features);\n }\n "
    },
    {
      "sha": "8f6eb61505bd1ec5345f585284edc9e2bddc564b",
      "filename": "gdb/s390-linux-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbf3c4b97907cb198168f58e7a22d497868e5926/gdb/s390-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbf3c4b97907cb198168f58e7a22d497868e5926/gdb/s390-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s390-linux-nat.c?ref=fbf3c4b97907cb198168f58e7a22d497868e5926",
      "patch": "@@ -988,7 +988,7 @@ s390_linux_nat_target::auxv_parse (gdb_byte **readptr,\n const struct target_desc *\n s390_linux_nat_target::read_description ()\n {\n-  int tid = s390_inferior_tid ();\n+  int tid = inferior_ptid.pid ();\n \n   have_regset_last_break\n     = check_regset (tid, NT_S390_LAST_BREAK, 8);"
    },
    {
      "sha": "e22f9038197c55d93dc1b10db3926aa30c613a07",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 11,
      "deletions": 4,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbf3c4b97907cb198168f58e7a22d497868e5926/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbf3c4b97907cb198168f58e7a22d497868e5926/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=fbf3c4b97907cb198168f58e7a22d497868e5926",
      "patch": "@@ -838,10 +838,17 @@ struct target_ops\n     virtual void flash_done ()\n       TARGET_DEFAULT_NORETURN (tcomplain ());\n \n-    /* Describe the architecture-specific features of this target.  If\n-       OPS doesn't have a description, this should delegate to the\n-       \"beneath\" target.  Returns the description found, or NULL if no\n-       description was available.  */\n+    /* Describe the architecture-specific features of the current\n+       inferior.\n+\n+       Returns the description found, or nullptr if no description was\n+       available.\n+\n+       If some target features differ between threads, the description\n+       returned by read_description (and the resulting gdbarch) won't\n+       accurately describe all threads.  In this case, the\n+       thread_architecture method can be used to obtain gdbarches that\n+       accurately describe each thread.  */\n     virtual const struct target_desc *read_description ()\n \t TARGET_DEFAULT_RETURN (NULL);\n "
    },
    {
      "sha": "adea1ad00922668f72527e45a3c8838e93076efb",
      "filename": "gdb/x86-linux-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fbf3c4b97907cb198168f58e7a22d497868e5926/gdb/x86-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fbf3c4b97907cb198168f58e7a22d497868e5926/gdb/x86-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/x86-linux-nat.c?ref=fbf3c4b97907cb198168f58e7a22d497868e5926",
      "patch": "@@ -113,10 +113,7 @@ x86_linux_nat_target::read_description ()\n   static uint64_t xcr0;\n   uint64_t xcr0_features_bits;\n \n-  /* GNU/Linux LWP ID's are process ID's.  */\n-  tid = inferior_ptid.lwp ();\n-  if (tid == 0)\n-    tid = inferior_ptid.pid (); /* Not a threaded program.  */\n+  tid = inferior_ptid.pid ();\n \n #ifdef __x86_64__\n   {"
    }
  ]
}