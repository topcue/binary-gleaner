{
  "sha": "c2b750436a9db8cf491ddeb316bc71e4b65110b6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzJiNzUwNDM2YTlkYjhjZjQ5MWRkZWIzMTZiYzcxZTRiNjUxMTBiNg==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-05-25T16:25:50Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-05-27T12:24:09Z"
    },
    "message": "Fix some duplicate test names\n\nWhile doing a testsuite run on aarch64-linux, I noticed a bunch of duplicated\ntest name results. It annoyed me a little, so I decided to go ahead and fix the\nworst offenders.\n\nThe following patch brings the duplicate test names down from 461 to 137.\n\nThe remaining ones are mostly scattered across the testsuite, with 1 to 3\nduplicates per testcase. We can fix those as we go.\n\ngdb/testsuite/ChangeLog:\n\n2020-05-27  Luis Machado  <luis.machado@linaro.org>\n\n\t* gdb.arch/aarch64-sighandler-regs.exp: Fix duplicated test names.\n\t* gdb.arch/aarch64-tagged-pointer.exp: Likewise.\n\t* gdb.arch/arm-disassembler-options.exp: Likewise.\n\t* gdb.arch/arm-disp-step.exp: Likewise.\n\t* gdb.arch/thumb-prologue.exp: Likewise.\n\t* gdb.base/async.exp: Likewise.\n\t* gdb.base/auxv.exp: Likewise.\n\t* gdb.base/complex-parts.exp: Likewise.\n\t* gdb.base/ena-dis-br.exp: Likewise.\n\t* gdb.base/foll-exec.exp: Likewise.\n\t* gdb.base/permissions.exp: Likewise.\n\t* gdb.base/relocate.exp: Likewise.\n\t* gdb.base/return2.exp: Likewise.\n\t* gdb.base/sigbpt.exp: Likewise.\n\t* gdb.base/siginfo-obj.exp: Likewise.\n\t* gdb.cp/converts.exp: Likewise.\n\t* gdb.cp/exceptprint.exp: Likewise.\n\t* gdb.cp/inherit.exp: Likewise.\n\t* gdb.cp/nsnoimports.exp: Likewise.\n\t* gdb.cp/virtbase2.exp: Likewise.\n\t* gdb.mi/mi-var-cmd.exp: Likewise.\n\t* gdb.mi/var-cmd.c: Likewise.",
    "tree": {
      "sha": "165e1ef0ce74433f818a2e26aa2b0aafe340c664",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/165e1ef0ce74433f818a2e26aa2b0aafe340c664"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c2b750436a9db8cf491ddeb316bc71e4b65110b6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c2b750436a9db8cf491ddeb316bc71e4b65110b6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c2b750436a9db8cf491ddeb316bc71e4b65110b6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c2b750436a9db8cf491ddeb316bc71e4b65110b6/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a6dbf402de65fe66f4ec99b56527dfd00d077cb6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a6dbf402de65fe66f4ec99b56527dfd00d077cb6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a6dbf402de65fe66f4ec99b56527dfd00d077cb6"
    }
  ],
  "stats": {
    "total": 781,
    "additions": 475,
    "deletions": 306
  },
  "files": [
    {
      "sha": "eb0c7994035f81c7277d740b95a561da5af5e79c",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -1,3 +1,28 @@\n+2020-05-27  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* gdb.arch/aarch64-sighandler-regs.exp: Fix duplicated test names.\n+\t* gdb.arch/aarch64-tagged-pointer.exp: Likewise.\n+\t* gdb.arch/arm-disassembler-options.exp: Likewise.\n+\t* gdb.arch/arm-disp-step.exp: Likewise.\n+\t* gdb.arch/thumb-prologue.exp: Likewise.\n+\t* gdb.base/async.exp: Likewise.\n+\t* gdb.base/auxv.exp: Likewise.\n+\t* gdb.base/complex-parts.exp: Likewise.\n+\t* gdb.base/ena-dis-br.exp: Likewise.\n+\t* gdb.base/foll-exec.exp: Likewise.\n+\t* gdb.base/permissions.exp: Likewise.\n+\t* gdb.base/relocate.exp: Likewise.\n+\t* gdb.base/return2.exp: Likewise.\n+\t* gdb.base/sigbpt.exp: Likewise.\n+\t* gdb.base/siginfo-obj.exp: Likewise.\n+\t* gdb.cp/converts.exp: Likewise.\n+\t* gdb.cp/exceptprint.exp: Likewise.\n+\t* gdb.cp/inherit.exp: Likewise.\n+\t* gdb.cp/nsnoimports.exp: Likewise.\n+\t* gdb.cp/virtbase2.exp: Likewise.\n+\t* gdb.mi/mi-var-cmd.exp: Likewise.\n+\t* gdb.mi/var-cmd.c: Likewise.\n+\n 2020-05-26  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.ada/arr_acc_idx_w_gap.exp: Add tests."
    },
    {
      "sha": "1dedd336b58bd795e4b89b20e2eb24967f8cad62",
      "filename": "gdb/testsuite/gdb.arch/aarch64-sighandler-regs.exp",
      "status": "modified",
      "additions": 37,
      "deletions": 30,
      "changes": 67,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.arch/aarch64-sighandler-regs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.arch/aarch64-sighandler-regs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/aarch64-sighandler-regs.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -100,16 +100,18 @@ set mainframe [expr $handlerframe + 2]\n \n # Check register values\n \n-check_regs x $xreg_nums $reg_handler_value_64 \"\"\n-check_regs v $vreg_nums $reg_handler_value_128 \".q.u\"\n-check_regs q $vreg_nums $reg_handler_value_128 \".u\"\n-check_regs d $vreg_nums $reg_handler_value_64 \".u\"\n-check_regs s $vreg_nums $reg_handler_value_32 \".u\"\n-check_regs h $vreg_nums $reg_handler_value_16 \".u\"\n-check_regs b $vreg_nums $reg_handler_value_8 \".u\"\n-if { $sve_hw } {\n-  check_regs z $vreg_nums $zreg_handler_value \".d.u\"\n-  check_regs p $preg_nums $preg_handler_value \"\"\n+with_test_prefix \"handler frame 1st\" {\n+  check_regs x $xreg_nums $reg_handler_value_64 \"\"\n+  check_regs v $vreg_nums $reg_handler_value_128 \".q.u\"\n+  check_regs q $vreg_nums $reg_handler_value_128 \".u\"\n+  check_regs d $vreg_nums $reg_handler_value_64 \".u\"\n+  check_regs s $vreg_nums $reg_handler_value_32 \".u\"\n+  check_regs h $vreg_nums $reg_handler_value_16 \".u\"\n+  check_regs b $vreg_nums $reg_handler_value_8 \".u\"\n+  if { $sve_hw } {\n+    check_regs z $vreg_nums $zreg_handler_value \".d.u\"\n+    check_regs p $preg_nums $preg_handler_value \"\"\n+  }\n }\n \n # Switch to the frame for main(), and check register values\n@@ -118,16 +120,19 @@ gdb_test \"frame $mainframe\" \\\n       \"#$mainframe.*in main ().*\" \\\n       \"set to main frame\"\n \n-check_regs x $xreg_nums $reg_main_value_64 \"\"\n-check_regs v $vreg_nums $reg_main_value_128 \".q.u\"\n-check_regs q $vreg_nums $reg_main_value_128 \".u\"\n-check_regs d $vreg_nums $reg_main_value_64 \".u\"\n-check_regs s $vreg_nums $reg_main_value_32 \".u\"\n-check_regs h $vreg_nums $reg_main_value_16 \".u\"\n-check_regs b $vreg_nums $reg_main_value_8 \".u\"\n-if { $sve_hw } {\n-  check_regs z $vreg_nums $zreg_main_value \".d.u\"\n-  check_regs p $preg_nums $preg_main_value \"\"\n+\n+with_test_prefix \"main frame\" {\n+  check_regs x $xreg_nums $reg_main_value_64 \"\"\n+  check_regs v $vreg_nums $reg_main_value_128 \".q.u\"\n+  check_regs q $vreg_nums $reg_main_value_128 \".u\"\n+  check_regs d $vreg_nums $reg_main_value_64 \".u\"\n+  check_regs s $vreg_nums $reg_main_value_32 \".u\"\n+  check_regs h $vreg_nums $reg_main_value_16 \".u\"\n+  check_regs b $vreg_nums $reg_main_value_8 \".u\"\n+  if { $sve_hw } {\n+    check_regs z $vreg_nums $zreg_main_value \".d.u\"\n+    check_regs p $preg_nums $preg_main_value \"\"\n+  }\n }\n \n # Switch back to the signal handler frame, and check register values\n@@ -136,14 +141,16 @@ gdb_test \"frame $handlerframe\" \\\n       \"#$handlerframe.*handler \\\\\\(sig=4\\\\\\).*\" \\\n       \"set to signal handler frame\"\n \n-check_regs x $xreg_nums $reg_handler_value_64 \"\"\n-check_regs v $vreg_nums $reg_handler_value_128 \".q.u\"\n-check_regs q $vreg_nums $reg_handler_value_128 \".u\"\n-check_regs d $vreg_nums $reg_handler_value_64 \".u\"\n-check_regs s $vreg_nums $reg_handler_value_32 \".u\"\n-check_regs h $vreg_nums $reg_handler_value_16 \".u\"\n-check_regs b $vreg_nums $reg_handler_value_8 \".u\"\n-if { $sve_hw } {\n-  check_regs z $vreg_nums $zreg_handler_value \".d.u\"\n-  check_regs p $preg_nums $preg_handler_value \"\"\n+with_test_prefix \"handler frame 2nd\" {\n+  check_regs x $xreg_nums $reg_handler_value_64 \"\"\n+  check_regs v $vreg_nums $reg_handler_value_128 \".q.u\"\n+  check_regs q $vreg_nums $reg_handler_value_128 \".u\"\n+  check_regs d $vreg_nums $reg_handler_value_64 \".u\"\n+  check_regs s $vreg_nums $reg_handler_value_32 \".u\"\n+  check_regs h $vreg_nums $reg_handler_value_16 \".u\"\n+  check_regs b $vreg_nums $reg_handler_value_8 \".u\"\n+  if { $sve_hw } {\n+    check_regs z $vreg_nums $zreg_handler_value \".d.u\"\n+    check_regs p $preg_nums $preg_handler_value \"\"\n+}\n }"
    },
    {
      "sha": "957571fdf99f1748efd38ab47ff28e8dcc585a95",
      "filename": "gdb/testsuite/gdb.arch/aarch64-tagged-pointer.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.arch/aarch64-tagged-pointer.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.arch/aarch64-tagged-pointer.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/aarch64-tagged-pointer.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -35,17 +35,17 @@ gdb_continue_to_breakpoint \"breakpoint here\"\n \n # Test that GDB manages caches correctly for tagged address.\n # Read from P2,\n-gdb_test \"x p2\" \"$hex:\\[\\t \\]+0x000004d2\"\n+gdb_test \"x p2\" \"$hex:\\[\\t \\]+0x000004d2\" \"x p2\"\n gdb_test_no_output \"set variable i = 5678\"\n # Test that *P2 is updated.\n-gdb_test \"x p2\" \"$hex:\\[\\t \\]+0x0000162e\"\n+gdb_test \"x p2\" \"$hex:\\[\\t \\]+0x0000162e\" \"x p2, updated\"\n \n # Read from SP1->i,\n-gdb_test \"print sp1->i\" \" = 1234\"\n+gdb_test \"print sp1->i\" \" = 1234\" \"print SP1->i\"\n # Write to SP2->i,\n gdb_test_no_output \"set variable sp2->i = 5678\"\n # Test that SP1->i is updated.\n-gdb_test \"print sp1->i\" \" = 5678\"\n+gdb_test \"print sp1->i\" \" = 5678\" \"print SP1->i, updated\"\n \n gdb_test \"x/d &sp2->i\" \"$hex:\\[\\t \\]+5678\"\n gdb_test \"x/d &sp1->i\" \"$hex:\\[\\t \\]+5678\""
    },
    {
      "sha": "b347cc5270dd48cf7df0866b373f1c734e8d4242",
      "filename": "gdb/testsuite/gdb.arch/arm-disassembler-options.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.arch/arm-disassembler-options.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.arch/arm-disassembler-options.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/arm-disassembler-options.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -52,5 +52,5 @@ gdb_test \"set architecture $arch2\" \\\n \n gdb_test \"show disassembler-options\" \\\n \t\"The current disassembler options are '$option'.*\" \\\n-\t\"show disassembler-options $option\"\n+\t\"show disassembler-options $option, modified architecture\"\n "
    },
    {
      "sha": "29189d0f60e2186b6e26417d5fde75e08b783ac7",
      "filename": "gdb/testsuite/gdb.arch/arm-disp-step.exp",
      "status": "modified",
      "additions": 19,
      "deletions": 20,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.arch/arm-disp-step.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.arch/arm-disp-step.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/arm-disp-step.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -37,12 +37,12 @@ proc test_ldm_stm_pc {} {\n \n     # Try to set breakpoint on test_ldm_stm_pc.  If symbol 'test_ldm_stm_pc'\n     # can't be resolved, test case is compiled in Thumb mode, skip it.\n-    gdb_test_multiple \"break *test_ldm_stm_pc\" \"break test_ldm_stm_pc\" {\n+    gdb_test_multiple \"break *test_ldm_stm_pc\" \"\" {\n \t-re \"Breakpoint.*at.* file .*$srcfile, line.*\\r\\n$gdb_prompt $\" {\n-\t    pass \"break test_ldm_stm_pc\"\n+\t    pass $gdb_test_name\n \t}\n \t-re \"No symbol.*\\r\\n$gdb_prompt $\" {\n-\t    pass \"break test_ldm_stm_pc\"\n+\t    pass $gdb_test_name\n \t    return 0\n \t}\n     }\n@@ -68,9 +68,9 @@ proc test_ldr_literal {} {\n     global srcfile\n     global gdb_prompt\n \n-    gdb_test_multiple \"break *test_ldr_literal\" \"break test_ldr_literal\" {\n+    gdb_test_multiple \"break *test_ldr_literal\" \"\" {\n        -re \"Breakpoint.*at.* file .*$srcfile, line.*\\r\\n$gdb_prompt $\" {\n-           pass \"break test_ldr_literal\"\n+           pass $gdb_test_name\n        }\n        -re \"No symbol.*\\r\\n$gdb_prompt $\" {\n            return 0\n@@ -101,9 +101,9 @@ proc test_ldr_literal_16 {} {\n     global srcfile\n     global gdb_prompt\n \n-    gdb_test_multiple \"break *test_ldr_literal_16\" \"break test_ldr_literal_16\" {\n+    gdb_test_multiple \"break *test_ldr_literal_16\" \"\" {\n \t-re \"Breakpoint.*at.* file .*$srcfile, line.*\\r\\n$gdb_prompt $\" {\n-\t    pass \"break test_ldr_literal\"\n+\t    pass $gdb_test_name\n \t}\n \t-re \"No symbol.*\\r\\n$gdb_prompt $\" {\n \t    return 0\n@@ -191,9 +191,9 @@ proc test_cbz_cbnz {} {\n     global srcfile\n     global gdb_prompt\n \n-    gdb_test_multiple \"break *test_zero_cbnz\" \"break test_zero_cbnz\" {\n+    gdb_test_multiple \"break *test_zero_cbnz\" \"\" {\n \t-re \"Breakpoint.*at.* file .*$srcfile, line.*\\r\\n$gdb_prompt $\" {\n-\t    pass \"break test_ldr_literal\"\n+\t    pass $gdb_test_name\n \t}\n \t-re \"No symbol.*\\r\\n$gdb_prompt $\" {\n \t    return 0\n@@ -226,9 +226,9 @@ proc test_adr {} {\n     global srcfile\n     global gdb_prompt\n \n-    gdb_test_multiple \"break *test_adr\" \"break test_adr\" {\n+    gdb_test_multiple \"break *test_adr\" \"\" {\n \t-re \"Breakpoint.*at.* file .*$srcfile, line.*\\r\\n$gdb_prompt $\" {\n-\t    pass \"break test_adr\"\n+\t    pass $gdb_test_name\n \t}\n \t-re \"No symbol.*\\r\\n$gdb_prompt $\" {\n \t    return 0\n@@ -249,9 +249,9 @@ proc test_adr_32bit {} {\n     global srcfile\n     global gdb_prompt\n \n-    gdb_test_multiple \"break *test_adr_32bit\" \"break test_adr_32bit\" {\n+    gdb_test_multiple \"break *test_adr_32bit\" \"\" {\n \t-re \"Breakpoint.*at.* file .*$srcfile, line.*\\r\\n$gdb_prompt $\" {\n-\t    pass \"break test_adr\"\n+\t    pass $gdb_test_name\n \t}\n \t-re \"No symbol.*\\r\\n$gdb_prompt $\" {\n \t    return 0\n@@ -309,7 +309,7 @@ proc test_pop_pc {} {\n \t\"break test_pop_pc_3_right\"\n     gdb_test \"break *test_pop_pc_3_wrong\" \\\n \t\"Breakpoint.*at.* file .*$srcfile, line.*\" \\\n-\t\"break test_pop_pc_1_wrong\"\n+\t\"break test_pop_pc_3_wrong\"\n \n     gdb_continue_to_breakpoint \"continue to test_pop_pc_1\" \\\n \t\".*b.*\\{r1\\, pc\\}.*\"\n@@ -334,12 +334,12 @@ proc test_str_pc {} {\n     global srcfile\n     global gdb_prompt\n \n-    gdb_test_multiple \"break *test_str_pc\" \"break test_str_pc\" {\n+    gdb_test_multiple \"break *test_str_pc\" \"\" {\n \t-re \"Breakpoint.*at.* file .*$srcfile, line.*\\r\\n$gdb_prompt $\" {\n-\t    pass \"break test_str_pc\"\n+\t    pass $gdb_test_name\n \t}\n \t-re \"No symbol.*\\r\\n$gdb_prompt $\" {\n-\t    pass \"break test_str_pc\"\n+\t    pass $gdb_test_name\n \t    return\n \t}\n     }\n@@ -371,10 +371,9 @@ proc test_str_pc {} {\n proc test_add_rn_pc {} {\n     global srcfile gdb_prompt\n \n-    set test \"break test_add_rn_pc\"\n-    gdb_test_multiple \"break *test_add_rn_pc\" $test {\n+    gdb_test_multiple \"break *test_add_rn_pc\" \"\" {\n \t-re \"Breakpoint.*at.* file .*$srcfile, line.*\\r\\n$gdb_prompt $\" {\n-\t    pass $test\n+\t    pass $gdb_test_name\n \t}\n \t-re \"No symbol.*\\r\\n$gdb_prompt $\" {\n \t    return"
    },
    {
      "sha": "0c6de8a7ce9c8a3a626ac1e4baccd8f87eacb1cf",
      "filename": "gdb/testsuite/gdb.arch/thumb-prologue.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.arch/thumb-prologue.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.arch/thumb-prologue.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/thumb-prologue.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -83,4 +83,4 @@ gdb_test \"stepi 2\" \"in write_sp \\\\(\\\\)\" \"stepi over mov sp, 128\"\n \n gdb_test \"backtrace 10\" \\\n \t\"#0\\[ \\t\\]*$hex in write_sp .*\\r\\n#1\\[ \\t\\]*$hex in switch_stack_to_other .*\\r\\n#2\\[ \\t\\]*$hex in main.*\" \\\n-\t\"backtrace in write_sp\"\n+\t\"backtrace in write_sp, 2nd stop\""
    },
    {
      "sha": "32711d04bab64954e8bd1e0d867ea5f7df2b18bb",
      "filename": "gdb/testsuite/gdb.base/async.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/async.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/async.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/async.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -87,7 +87,7 @@ set test \"get next insn\"\n gdb_test_multiple {x/2i $pc} \"$test\" {\n     -re \"=> $hex .* 0x(\\[0-9a-f\\]*) .*$gdb_prompt $\" {\n \tset next_insn_addr $expect_out(1,string)\n-\tpass \"$test\"\n+\tpass $gdb_test_name\n     }\n }\n set next_insn_is_stmt [hex_in_list $next_insn_addr $is_stmt]\n@@ -102,11 +102,11 @@ test_background \"stepi&\" \"\" \".*$prefix x = 5; .*\"\n \n # Get the next instruction address.\n set next_insn_addr \"\"\n-set test \"get next insn\"\n+set test \"get next insn, 2nd\"\n gdb_test_multiple {x/2i $pc} \"$test\" {\n     -re \"=> $hex .* 0x(\\[0-9a-f\\]*) .*$gdb_prompt $\" {\n \tset next_insn_addr $expect_out(1,string)\n-\tpass \"$test\"\n+\tpass $gdb_test_name\n     }\n }\n set next_insn_is_stmt \\"
    },
    {
      "sha": "07c07c451e823afa4d303f8d9b7ebe4a25022971",
      "filename": "gdb/testsuite/gdb.base/auxv.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/auxv.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/auxv.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/auxv.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -126,8 +126,8 @@ set live_data [fetch_auxv \"info auxv on live process\"]\n set gcore_works [gdb_gcore_cmd \"$gcorefile\" \"gcore\"]\n \n # Let the program continue and die.\n-gdb_test continue \".*Program received signal.*\"\n-gdb_test continue \".*Program terminated with signal.*\"\n+gdb_test continue \".*Program received signal.*\" \"continue until signal\"\n+gdb_test continue \".*Program terminated with signal.*\" \"continue and terminate\"\n \n # Now collect the core dump it left.\n set test \"generate native core dump\""
    },
    {
      "sha": "7719ff14df37c69e9df7120baa5effa9a0bb4089",
      "filename": "gdb/testsuite/gdb.base/complex-parts.exp",
      "status": "modified",
      "additions": 24,
      "deletions": 12,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/complex-parts.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/complex-parts.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/complex-parts.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -35,23 +35,35 @@ gdb_test \"ptype z1\" \" = complex double\"\n gdb_test \"ptype z2\" \" = complex float\"\n gdb_test \"ptype z3\" \" = complex long double\"\n \n-gdb_test \"p \\$_cimag (z1)\" \" = 4.5\"\n-gdb_test \"ptype \\$\" \" = double\"\n+with_test_prefix \"double imaginary\" {\n+    gdb_test \"p \\$_cimag (z1)\" \" = 4.5\"\n+    gdb_test \"ptype \\$\" \" = double\"\n+}\n \n-gdb_test \"p \\$_cimag (z2)\" \" = -5.5\"\n-gdb_test \"ptype \\$\" \" = float\"\n+with_test_prefix \"float imaginary\" {\n+    gdb_test \"p \\$_cimag (z2)\" \" = -5.5\"\n+    gdb_test \"ptype \\$\" \" = float\"\n+}\n \n-gdb_test \"p \\$_cimag (z3)\" \" = 6.5\"\n-gdb_test \"ptype \\$\" \" = long double\"\n+with_test_prefix \"long double imaginary\" {\n+    gdb_test \"p \\$_cimag (z3)\" \" = 6.5\"\n+    gdb_test \"ptype \\$\" \" = long double\"\n+}\n \n-gdb_test \"p \\$_creal (z1)\" \" = 1.5\"\n-gdb_test \"ptype \\$\" \" = double\"\n+with_test_prefix \"double real\" {\n+    gdb_test \"p \\$_creal (z1)\" \" = 1.5\"\n+    gdb_test \"ptype \\$\" \" = double\"\n+}\n \n-gdb_test \"p \\$_creal (z2)\" \" = 2.5\"\n-gdb_test \"ptype \\$\" \" = float\"\n+with_test_prefix \"float real\" {\n+    gdb_test \"p \\$_creal (z2)\" \" = 2.5\"\n+    gdb_test \"ptype \\$\" \" = float\"\n+}\n \n-gdb_test \"p \\$_creal (z3)\" \" = 3.5\"\n-gdb_test \"ptype \\$\" \" = long double\"\n+with_test_prefix \"long double real\" {\n+    gdb_test \"p \\$_creal (z3)\" \" = 3.5\"\n+    gdb_test \"ptype \\$\" \" = long double\"\n+}\n \n gdb_test \"p \\$_cimag (d1)\" \"expected a complex number\"\n gdb_test \"p \\$_cimag (f1)\" \"expected a complex number\""
    },
    {
      "sha": "d43e47efa08b54701757d9ec89c4f2c049021f34",
      "filename": "gdb/testsuite/gdb.base/ena-dis-br.exp",
      "status": "modified",
      "additions": 45,
      "deletions": 12,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/ena-dis-br.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/ena-dis-br.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/ena-dis-br.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -48,7 +48,7 @@ proc break_at { breakpoint where } {\n     gdb_test_multiple \"$test\" \"$test\" {\n \t-re \"Breakpoint (\\[0-9\\]*) at .*$where.*$gdb_prompt $\" {\n \t    set bp $expect_out(1,string)\n-\t    pass \"$test\"\n+\t    pass $gdb_test_name\n \t}\n     }\n     return $bp\n@@ -104,7 +104,12 @@ gdb_test \"info break $bp\" \\\n \n # Verify that we don't stop at a disabled breakpoint.\n gdb_continue_to_end \"no stop\"\n-rerun_to_main\n+\n+set count 1\n+with_test_prefix \"run $count\" {\n+    rerun_to_main\n+    incr count\n+}\n gdb_continue_to_end \"no stop at auto-disabled break marker2\"\n \n # Verify that we can set a breakpoint to be self-deleting after the\n@@ -149,7 +154,9 @@ if ![runto_main] then {\n \n set bp [break_at $bp_location7 \"line $bp_location7\"]\n \n-set bp2 [break_at marker1 \" line $bp_location15\"]\n+with_test_prefix \"enable count\" {\n+  set bp2 [break_at marker1 \" line $bp_location15\"]\n+}\n \n gdb_test \"enable count\" \\\n     \"Argument required \\\\(hit count\\\\)\\\\.\" \\\n@@ -181,7 +188,9 @@ if ![runto_main] then {\n     fail \"enable/disable break tests suppressed\"\n }\n \n-set bp [break_at \"marker1\" \" line $bp_location15.*\"]\n+with_test_prefix \"ignore count\" {\n+    set bp [break_at \"marker1\" \" line $bp_location15.*\"]\n+}\n \n # Verify that an ignore of a non-existent breakpoint is gracefully\n # handled.\n@@ -216,7 +225,11 @@ gdb_test \"info break $bp\" \\\n     \"info ignored break marker1\"\n \n gdb_continue_to_end \"no stop at ignored break marker1\"\n-rerun_to_main\n+\n+with_test_prefix \"run $count\" {\n+    rerun_to_main\n+    incr count\n+}\n \n # See the comments in condbreak.exp for \"run until breakpoint at marker1\" \n # for an explanation of the xfail below.\n@@ -236,7 +249,9 @@ if ![runto_main] then {\n     fail \"enable/disable break tests suppressed\"\n }\n \n-set bp [break_at marker1 \" line $bp_location15.*\"]\n+with_test_prefix \"ignore count and auto-delete\" {\n+    set bp [break_at marker1 \" line $bp_location15.*\"]\n+}\n \n gdb_test \"ignore $bp 1\" \\\n     \"Will ignore next crossing of breakpoint \\[0-9\\]*.*\" \\\n@@ -249,7 +264,11 @@ gdb_test \"info break $bp\" \\\n     \"info break marker1 after hitting breakpoint\"\n \n gdb_continue_to_end \"no stop at ignored & auto-deleted break marker1\"\n-rerun_to_main\n+\n+with_test_prefix \"run $count\" {\n+    rerun_to_main\n+    incr count\n+}\n \n gdb_test \"continue\" \\\n     \".*marker1 .*:$bp_location15.*\" \\\n@@ -262,7 +281,9 @@ if ![runto_main] then {\n     fail \"enable/disable break tests suppressed\"\n }\n \n-set bp [break_at marker1 \" line $bp_location15\"]\n+with_test_prefix \"disabled breakpoint ignore count\" {\n+    set bp [break_at marker1 \" line $bp_location15\"]\n+}\n \n gdb_test \"ignore $bp 10\" \\\n     \"Will ignore next 10 crossings of breakpoint \\[0-9\\]*.*\" \\\n@@ -271,7 +292,10 @@ gdb_test \"ignore $bp 10\" \\\n gdb_test_no_output \"disable $bp\" \"disable break marker1\"\n \n gdb_continue_to_end \"no stop at ignored & disabled break marker1\"\n-rerun_to_main\n+\n+with_test_prefix \"run $count\" {\n+    rerun_to_main\n+}\n \n gdb_test \"info break $bp\" \\\n     \"\\[0-9\\]*\\[ \\t\\]+breakpoint\\[ \\t\\]+keep\\[ \\t\\]+n.*ignore next 10 hits.*\" \\\n@@ -315,9 +339,18 @@ set b2 0\n set b3 0\n set b4 0\n set b1 [break_at main \"\"]\n-set b2 [break_at main \"\"]\n-set b3 [break_at main \"\"]\n-set b4 [break_at main \"\"]\n+\n+with_test_prefix \"2nd breakpoint\" {\n+    set b2 [break_at main \"\"]\n+}\n+\n+with_test_prefix \"3rd breakpoint\" {\n+    set b3 [break_at main \"\"]\n+}\n+\n+with_test_prefix \"4th breakpoint\" {\n+    set b4 [break_at main \"\"]\n+}\n \n # Perform tests for disable/enable commands on multiple\n # locations and breakpoints."
    },
    {
      "sha": "b0e155dd379e01f9dd2b8237beadf7323586a4ab",
      "filename": "gdb/testsuite/gdb.base/foll-exec.exp",
      "status": "modified",
      "additions": 21,
      "deletions": 12,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/foll-exec.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/foll-exec.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/foll-exec.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -78,10 +78,13 @@ proc do_exec_tests {} {\n      fail \"couldn't run ${testfile}\"\n      return\n    }\n-   # Execute the code setting up variable PROG.\n-   set tbreak_line [gdb_get_line_number \" tbreak-execlp \" $srcfile]\n-   gdb_test \"tbreak ${tbreak_line}\"\n-   gdb_continue_to_breakpoint \"line tbreak-execlp\" \".*execlp \\\\(.*\"\n+\n+   with_test_prefix \"1st run\" {\n+       # Execute the code setting up variable PROG.\n+       set tbreak_line [gdb_get_line_number \" tbreak-execlp \" $srcfile]\n+       gdb_test \"tbreak ${tbreak_line}\" \"\" \"insert breakpoint\"\n+       gdb_continue_to_breakpoint \"line tbreak-execlp\" \".*execlp \\\\(.*\"\n+   }\n \n    # Verify that we can see various global and local variables\n    # in this program, and that they have expected values.  Some\n@@ -234,10 +237,13 @@ proc do_exec_tests {} {\n      fail \"couldn't run ${testfile} (3rd try)\"\n      return\n    }\n-   # Execute the code setting up variable PROG.\n-   set tbreak_line [gdb_get_line_number \" tbreak-execlp \" $srcfile]\n-   gdb_test \"tbreak ${tbreak_line}\"\n-   gdb_continue_to_breakpoint \"line tbreak-execlp\" \".*execlp \\\\(.*\"\n+\n+   with_test_prefix \"2nd run\" {\n+       # Execute the code setting up variable PROG.\n+       set tbreak_line [gdb_get_line_number \" tbreak-execlp \" $srcfile]\n+       gdb_test \"tbreak ${tbreak_line}\" \"\" \"insert breakpoint\"\n+       gdb_continue_to_breakpoint \"line tbreak-execlp\" \".*execlp \\\\(.*\"\n+   }\n \n    # Verify that we can follow through follow an execl()\n    # call.  (We must jump around earlier exec* calls.)\n@@ -299,10 +305,13 @@ proc do_exec_tests {} {\n      fail \"couldn't run ${testfile} (4th try)\"\n      return\n    }\n-   # Execute the code setting up variable PROG.\n-   set tbreak_line [gdb_get_line_number \" tbreak-execlp \" $srcfile]\n-   gdb_test \"tbreak ${tbreak_line}\"\n-   gdb_continue_to_breakpoint \"line tbreak-execlp\" \".*execlp \\\\(.*\"\n+\n+   with_test_prefix \"3rd run\" {\n+       # Execute the code setting up variable PROG.\n+       set tbreak_line [gdb_get_line_number \" tbreak-execlp \" $srcfile]\n+       gdb_test \"tbreak ${tbreak_line}\" \"\" \"insert breakpoint\"\n+       gdb_continue_to_breakpoint \"line tbreak-execlp\" \".*execlp \\\\(.*\"\n+   }\n \n    # Verify that we can follow through follow an execv()\n    # call.  (We must jump around earlier exec* calls.)"
    },
    {
      "sha": "6cc6f70eb96af071b93baa18cadae659007b4009",
      "filename": "gdb/testsuite/gdb.base/permissions.exp",
      "status": "modified",
      "additions": 32,
      "deletions": 27,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/permissions.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/permissions.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/permissions.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -34,43 +34,48 @@ gdb_exit\n gdb_start\n gdb_reinitialize_dir $srcdir/$subdir\n \n-gdb_test \"show may-write-registers\" \\\n-    \"Permission to write into registers is on.\"\n+with_test_prefix \"observer mode off\" {\n \n-gdb_test \"show may-write-memory\" \\\n-    \"Permission to write into target memory is on.\"\n+    gdb_test \"show may-write-registers\" \\\n+\t\"Permission to write into registers is on.\"\n \n-gdb_test \"show may-insert-breakpoints\" \\\n-    \"Permission to insert breakpoints in the target is on.\"\n+    gdb_test \"show may-write-memory\" \\\n+\t\"Permission to write into target memory is on.\"\n \n-gdb_test \"show may-insert-tracepoints\" \\\n-    \"Permission to insert tracepoints in the target is on.\"\n+    gdb_test \"show may-insert-breakpoints\" \\\n+\t\"Permission to insert breakpoints in the target is on.\"\n \n-gdb_test \"show may-insert-fast-tracepoints\" \\\n-    \"Permission to insert fast tracepoints in the target is on.\"\n+    gdb_test \"show may-insert-tracepoints\" \\\n+\t\"Permission to insert tracepoints in the target is on.\"\n \n-gdb_test \"show may-interrupt\" \\\n-    \"Permission to interrupt or signal the target is on.\"\n+    gdb_test \"show may-insert-fast-tracepoints\" \\\n+\t\"Permission to insert fast tracepoints in the target is on.\"\n+\n+    gdb_test \"show may-interrupt\" \\\n+\t\"Permission to interrupt or signal the target is on.\"\n+}\n \n gdb_test \"set observer on\" \"Observer mode is now on.\" \"enable observer mode\"\n \n-gdb_test \"show may-write-memory\" \\\n-    \"Permission to write into target memory is off.\"\n+with_test_prefix \"observer mode on\" {\n+    gdb_test \"show may-write-memory\" \\\n+\t\"Permission to write into target memory is off.\"\n \n-gdb_test \"show may-write-registers\" \\\n-    \"Permission to write into registers is off.\"\n+    gdb_test \"show may-write-registers\" \\\n+\t\"Permission to write into registers is off.\"\n \n-gdb_test \"show may-insert-breakpoints\" \\\n-    \"Permission to insert breakpoints in the target is off.\"\n+    gdb_test \"show may-insert-breakpoints\" \\\n+\t\"Permission to insert breakpoints in the target is off.\"\n \n-gdb_test \"show may-insert-tracepoints\" \\\n-    \"Permission to insert tracepoints in the target is off.\"\n+    gdb_test \"show may-insert-tracepoints\" \\\n+\t\"Permission to insert tracepoints in the target is off.\"\n \n-gdb_test \"show may-insert-fast-tracepoints\" \\\n-    \"Permission to insert fast tracepoints in the target is on.\"\n+    gdb_test \"show may-insert-fast-tracepoints\" \\\n+\t\"Permission to insert fast tracepoints in the target is on.\"\n \n-gdb_test \"show may-interrupt\" \\\n-    \"Permission to interrupt or signal the target is off.\"\n+    gdb_test \"show may-interrupt\" \\\n+\t\"Permission to interrupt or signal the target is off.\"\n+}\n \n gdb_test \"set observer off\" \"Observer mode is now off.\" \"disable observer mode\"\n \n@@ -87,14 +92,14 @@ if ![runto_main] then {\n \n gdb_test \"print x = 45\" \"$decimal = 45\" \"set a global\"\n \n-gdb_test \"print x\" \"$decimal = 45\"\n+gdb_test \"print x\" \"$decimal = 45\" \"validate setting a global\"\n \n gdb_test \"set may-write-memory off\"\n \n gdb_test \"print x = 92\" \"Writing to memory is not allowed.*\" \\\n-    \"try to set a global\"\n+    \"set a global, 2nd time\"\n \n-gdb_test \"print x\" \"$decimal = 45\"\n+gdb_test \"print x\" \"$decimal = 45\" \"validate setting a global, 2nd time\"\n \n # FIXME Add tests for other flags when a testsuite-able target becomes\n # available."
    },
    {
      "sha": "906d16b4a4fcede42470c2e58aa03a5922bc9b34",
      "filename": "gdb/testsuite/gdb.base/relocate.exp",
      "status": "modified",
      "additions": 63,
      "deletions": 41,
      "changes": 104,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/relocate.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/relocate.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/relocate.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -152,9 +152,11 @@ gdb_test \"add-symbol-file ${binfile} 0\" \\\n \t\"add symbol table from file \\\".*${testfile}\\\\.o\\\" at\\[ \\t\\r\\n\\]+\\.text_addr = 0x0\\[\\r\\n\\]+\\\\(y or n\\\\) \" \\\n \t\"y\"\n \n-# Print the addresses of static variables.\n-set static_foo_addr [get_var_address static_foo]\n-set static_bar_addr [get_var_address static_bar]\n+with_test_prefix \"print addresses, static vars\" {\n+    # Print the addresses of static variables.\n+    set static_foo_addr [get_var_address static_foo]\n+    set static_bar_addr [get_var_address static_bar]\n+}\n \n # Make sure they have different addresses.\n if { \"${static_foo_addr}\" == \"${static_bar_addr}\" } {\n@@ -163,9 +165,11 @@ if { \"${static_foo_addr}\" == \"${static_bar_addr}\" } {\n   pass \"static variables have different addresses\"\n }\n \n-# Print the addresses of global variables.\n-set global_foo_addr [get_var_address global_foo]\n-set global_bar_addr [get_var_address global_bar]\n+with_test_prefix \"print addresses, global vars\" {\n+    # Print the addresses of global variables.\n+    set global_foo_addr [get_var_address global_foo]\n+    set global_bar_addr [get_var_address global_bar]\n+}\n \n # Make sure they have different addresses.\n if { \"${global_foo_addr}\" == \"${global_bar_addr}\" } {\n@@ -174,9 +178,11 @@ if { \"${global_foo_addr}\" == \"${global_bar_addr}\" } {\n   pass \"global variables have different addresses\"\n }\n \n-# Print the addresses of functions.\n-set function_foo_addr [get_var_address function_foo]\n-set function_bar_addr [get_var_address function_bar]\n+with_test_prefix \"print addresses, functions\" {\n+    # Print the addresses of functions.\n+    set function_foo_addr [get_var_address function_foo]\n+    set function_bar_addr [get_var_address function_bar]\n+}\n \n # Make sure they have different addresses.\n if { \"${function_foo_addr}\" == \"${function_bar_addr}\" } {\n@@ -220,20 +226,26 @@ gdb_test \"symbol-file -o $offset $binfile\" \\\n     \"Reading symbols from ${binfile}\\.\\.\\.\" \\\n     \"symbol-file with offset\"\n \n-# Make sure the address of a static variable is moved by offset.\n-set new_static_foo_addr [get_var_address static_foo]\n-gdb_assert {${new_static_foo_addr} == ${static_foo_addr} + $offset} \\\n-    \"static variable foo is moved by offset\"\n+with_test_prefix \"static vars\" {\n+    # Make sure the address of a static variable is moved by offset.\n+    set new_static_foo_addr [get_var_address static_foo]\n+    gdb_assert {${new_static_foo_addr} == ${static_foo_addr} + $offset} \\\n+\t\"static variable foo is moved by offset\"\n+}\n \n-# Make sure the address of a global variable is moved by offset.\n-set new_global_foo_addr [get_var_address global_foo]\n-gdb_assert {${new_global_foo_addr} == ${global_foo_addr} + $offset} \\\n-    \"global variable foo is moved by offset\"\n+with_test_prefix \"global vars\" {\n+    # Make sure the address of a global variable is moved by offset.\n+    set new_global_foo_addr [get_var_address global_foo]\n+    gdb_assert {${new_global_foo_addr} == ${global_foo_addr} + $offset} \\\n+\t\"global variable foo is moved by offset\"\n+}\n \n-# Make sure the address of a function is moved by offset.\n-set new_function_foo_addr [get_var_address function_foo]\n-gdb_assert {${new_function_foo_addr} == ${function_foo_addr} + $offset} \\\n-    \"function foo is moved by offset\"\n+with_test_prefix \"functions\" {\n+    # Make sure the address of a function is moved by offset.\n+    set new_function_foo_addr [get_var_address function_foo]\n+    gdb_assert {${new_function_foo_addr} == ${function_foo_addr} + $offset} \\\n+\t\"function foo is moved by offset\"\n+}\n \n # Load the object using add-symbol-file with an offset and check that\n # all addresses are moved by that offset.\n@@ -246,20 +258,26 @@ gdb_test \"add-symbol-file -o $offset $binfile\" \\\n     \"add symbol table from file \\\".*${testfile}\\\\.o\\\" with all sections offset by $offset\\[\\r\\n\\]+\\\\(y or n\\\\) \" \\\n     \"y\"\n \n-# Make sure the address of a static variable is moved by offset.\n-set new_static_foo_addr [get_var_address static_foo]\n-gdb_assert { ${new_static_foo_addr} == ${static_foo_addr} + $offset } \\\n-    \"static variable foo is moved by offset\"\n+with_test_prefix \"static scope, 2nd\" {\n+    # Make sure the address of a static variable is moved by offset.\n+    set new_static_foo_addr [get_var_address static_foo]\n+    gdb_assert { ${new_static_foo_addr} == ${static_foo_addr} + $offset } \\\n+\t\"static variable foo is moved by offset\"\n+}\n \n-# Make sure the address of a global variable is moved by offset.\n-set new_global_foo_addr [get_var_address global_foo]\n-gdb_assert { ${new_global_foo_addr} == ${global_foo_addr} + $offset } \\\n-    \"global variable foo is moved by offset\"\n+with_test_prefix \"global vars, 2nd\" {\n+    # Make sure the address of a global variable is moved by offset.\n+    set new_global_foo_addr [get_var_address global_foo]\n+    gdb_assert { ${new_global_foo_addr} == ${global_foo_addr} + $offset } \\\n+\t\"global variable foo is moved by offset\"\n+}\n \n-# Make sure the address of a function is moved by offset.\n-set new_function_foo_addr [get_var_address function_foo]\n-gdb_assert { ${new_function_foo_addr} == ${function_foo_addr} + $offset } \\\n-    \"function foo is moved by offset\"\n+with_test_prefix \"functions, 2nd\" {\n+    # Make sure the address of a function is moved by offset.\n+    set new_function_foo_addr [get_var_address function_foo]\n+    gdb_assert { ${new_function_foo_addr} == ${function_foo_addr} + $offset } \\\n+\t\"function foo is moved by offset\"\n+}\n \n # Re-load the object giving an explicit address for .text\n \n@@ -271,10 +289,12 @@ gdb_test \"add-symbol-file $binfile -o $offset $text\" \\\n     \"add symbol table from file \\\".*${testfile}\\\\.o\\\" at\\[ \\t\\r\\n\\]+\\.text_addr = ${text}\\[\\r\\n\\]+with other sections offset by ${offset}\\[\\r\\n\\]+\\\\(y or n\\\\) \" \\\n     \"y\"\n \n-# Make sure function has a different addresses now.\n-set function_foo_addr [get_var_address function_foo]\n-gdb_assert { ${function_foo_addr} != ${new_function_foo_addr} } \\\n-    \"function foo has a different address\"\n+with_test_prefix \"functions, 3rd\" {\n+    # Make sure function has a different addresses now.\n+    set function_foo_addr [get_var_address function_foo]\n+    gdb_assert { ${function_foo_addr} != ${new_function_foo_addr} } \\\n+\t\"function foo has a different address\"\n+}\n \n # Re-load the object giving an explicit address for .data\n \n@@ -286,10 +306,12 @@ gdb_test \"add-symbol-file $binfile -o $offset -s .data $data\" \\\n     \"add symbol table from file \\\".*${testfile}\\\\.o\\\" at\\[ \\t\\r\\n\\]+\\.data_addr = ${data}\\[\\r\\n\\]+with other sections offset by ${offset}\\[\\r\\n\\]+\\\\(y or n\\\\) \" \\\n     \"y\"\n \n-# Make sure variable has a different addresses now.\n-set global_foo_addr [get_var_address global_foo]\n-gdb_assert { ${global_foo_addr} != ${new_global_foo_addr} } \\\n-    \"global variable foo has a different address\"\n+with_test_prefix \"global vars, 3rd\" {\n+    # Make sure variable has a different addresses now.\n+    set global_foo_addr [get_var_address global_foo]\n+    gdb_assert { ${global_foo_addr} != ${new_global_foo_addr} } \\\n+\t\"global variable foo has a different address\"\n+}\n \n # Now try loading the object as an exec-file; we should be able to print\n # the values of variables after we do this."
    },
    {
      "sha": "e93f4d8530b25dde0b90f82ad961495d0d741478",
      "filename": "gdb/testsuite/gdb.base/return2.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/return2.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/return2.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/return2.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -50,7 +50,7 @@ proc return_1 { type } {\n     gdb_test \"print ${type}_resultval == testval.${type}_testval\" \".* = 1\" \\\n \t    \"${type} value returned successfully\"\n     gdb_test \"print ${type}_resultval != ${type}_returnval\" \".* = 1\" \\\n-\t    \"validate result value not equal to program return value\"\n+\t    \"validate result value not equal to program return value, ${type}\"\n }\n \n proc return_void { } {"
    },
    {
      "sha": "bd7e1d8db94a1fcb8d9ce3466225710f652b8b6b",
      "filename": "gdb/testsuite/gdb.base/sigbpt.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/sigbpt.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/sigbpt.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/sigbpt.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -138,7 +138,9 @@ proc stepi_out { name args } {\n     # disable SIGSEGV, ensuring that further signals stop the\n     # inferior.  Stops a SIGSEGV infinite loop when a broke system\n     # keeps re-executing the faulting instruction.\n-    rerun_to_main\n+    with_test_prefix $name {\n+\trerun_to_main\n+    }\n     gdb_test \"handle ${signame} nostop print pass\" \".*\" \"${name}; pass ${signame}\"\n     gdb_test \"continue\" \"keeper.*\" \"${name}; continue to keeper\"\n     gdb_test \"handle ${signame} stop print nopass\" \".*\" \"${name}; nopass ${signame}\"\n@@ -212,7 +214,9 @@ proc cont_out { name args } {\n     # disable SIGSEGV, ensuring that further signals stop the\n     # inferior.  Stops a SIGSEGV infinite loop when a broke system\n     # keeps re-executing the faulting instruction.\n-    rerun_to_main\n+    with_test_prefix $name {\n+\trerun_to_main\n+    }\n     gdb_test \"handle ${signame} nostop print pass\" \".*\" \"${name}; pass ${signame}\"\n     gdb_test \"continue\" \"keeper.*\" \"${name}; continue to keeper\"\n     gdb_test \"handle ${signame} stop print nopass\" \".*\" \"${name}; nopass ${signame}\""
    },
    {
      "sha": "0ea3c2350e478bbbf12a9c9fce4286adf619aa8d",
      "filename": "gdb/testsuite/gdb.base/siginfo-obj.exp",
      "status": "modified",
      "additions": 20,
      "deletions": 16,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/siginfo-obj.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.base/siginfo-obj.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/siginfo-obj.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -45,7 +45,8 @@ if ![runto_main] then {\n }\n \n # Run to the signal.\n-gdb_test \"continue\" \".*Program received signal SIGSEGV.*\" \"continue to signal\"\n+gdb_test \"continue\" \".*Program received signal SIGSEGV.*\" \\\n+\t \"continue to signal, 1st\"\n \n # Try to generate a core file, for a later test.\n set gcorefile [standard_output_file $testfile.gcore]\n@@ -86,13 +87,14 @@ gdb_test_multiple \"p \\$_siginfo\" \"$test\" {\n \n set bp_location [gdb_get_line_number \"set breakpoint here\"]\n \n-gdb_test \"break $bp_location\"\n-gdb_test \"continue\" \".* handler .*\" \"continue to handler\"\n-\n-gdb_test \"p ssi_addr\" \" = \\\\(void \\\\*\\\\) $ssi_addr\"\n-gdb_test \"p ssi_errno\" \" = $ssi_errno\"\n-gdb_test \"p ssi_code\" \" = $ssi_code\"\n-gdb_test \"p ssi_signo\" \" = $ssi_signo\"\n+with_test_prefix \"validate siginfo fields\" {\n+    gdb_test \"break $bp_location\"\n+    gdb_test \"continue\" \".* handler .*\" \"continue to handler\"\n+    gdb_test \"p ssi_addr\" \" = \\\\(void \\\\*\\\\) $ssi_addr\"\n+    gdb_test \"p ssi_errno\" \" = $ssi_errno\"\n+    gdb_test \"p ssi_code\" \" = $ssi_code\"\n+    gdb_test \"p ssi_signo\" \" = $ssi_signo\"\n+}\n \n # Again, but this time, patch si_addr and check that the inferior sees\n # the changed value.\n@@ -104,21 +106,23 @@ if ![runto_main] then {\n }\n \n # Run to the signal.\n-gdb_test \"continue\" \".*Program received signal SIGSEGV.*\" \"continue to signal\"\n+gdb_test \"continue\" \".*Program received signal SIGSEGV.*\" \\\n+\t \"continue to signal, 2nd\"\n \n set test \"set si_addr\"\n gdb_test \"p \\$_siginfo._sifields._sigfault.si_addr = 0x666\" \" = \\\\(void \\\\*\\\\) 0x666\"\n gdb_test \"p \\$_siginfo.si_errno = 666\" \" = 666\"\n gdb_test \"p \\$_siginfo.si_code = 999\" \" = 999\"\n gdb_test \"p \\$_siginfo.si_signo = 11\" \" = 11\"\n \n-gdb_test \"break $bp_location\"\n-gdb_test \"continue\" \".* handler .*\" \"continue to handler\"\n-\n-gdb_test \"p ssi_addr\" \" = \\\\(void \\\\*\\\\) 0x666\"\n-gdb_test \"p ssi_errno\" \" = 666\"\n-gdb_test \"p ssi_code\" \" = 999\"\n-gdb_test \"p ssi_signo\" \" = 11\"\n+with_test_prefix \"validate modified siginfo fields\" {\n+    gdb_test \"break $bp_location\"\n+    gdb_test \"continue\" \".* handler .*\" \"continue to handler\"\n+    gdb_test \"p ssi_addr\" \" = \\\\(void \\\\*\\\\) 0x666\"\n+    gdb_test \"p ssi_errno\" \" = 666\"\n+    gdb_test \"p ssi_code\" \" = 999\"\n+    gdb_test \"p ssi_signo\" \" = 11\"\n+}\n \n # Test siginfo preservation in core files.\n if {$gcore_created} {"
    },
    {
      "sha": "5ef57feb5668b3f24b5f4bf8bd03a15ab10a176f",
      "filename": "gdb/testsuite/gdb.cp/converts.exp",
      "status": "modified",
      "additions": 35,
      "deletions": 25,
      "changes": 60,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.cp/converts.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.cp/converts.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/converts.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -36,8 +36,10 @@ gdb_test \"p foo0_3 (bppp)\" \"Cannot resolve.*\" \\\n \n gdb_test \"p foo1_1 (a)\"  \"= 11\"             \"pointer to pointer\"\n gdb_test \"p foo1_2 (a)\"  \"= 12\"             \"pointer to array\"\n-gdb_test \"p foo1_3 (a)\"  \"Cannot resolve.*\" \"pointer to pointer of wrong type\"\n-gdb_test \"p foo1_3 (bp)\" \"Cannot resolve.*\" \"pointer to pointer of wrong type\"\n+gdb_test \"p foo1_3 (a)\"  \"Cannot resolve.*\" \\\n+\t \"pointer to pointer of wrong type, a\"\n+gdb_test \"p foo1_3 (bp)\" \"Cannot resolve.*\" \\\n+\t \"pointer to pointer of wrong type, bp\"\n gdb_test \"p foo1_4 (bp)\" \"= 14\"             \"pointer to ancestor pointer\"\n gdb_test \"p foo1_5 (bp)\" \"= 15\"             \"pointer to void pointer\"\n gdb_test \"p foo1_6 (bp)\" \"Cannot resolve.*\"     \"pointer to void pointer pointer\"\n@@ -94,28 +96,36 @@ gdb_test \"p foo1_7(ta)\" \\\n \n # Test for strict type checking\n set error_str \"Cannot resolve function %s to any overloaded instance\"\n-gdb_test \"show check type\" \"Strict type checking is on\\.\"\n-gdb_test \"p foo1_type_check (123)\" [format $error_str \"foo1_type_check\"]\n-gdb_test \"p foo2_type_check (0, 1)\" [format $error_str \"foo2_type_check\"]\n-gdb_test \"p foo2_type_check (1, 0)\" [format $error_str \"foo2_type_check\"]\n-gdb_test \"p foo2_type_check (1, 1)\" [format $error_str \"foo2_type_check\"]\n-gdb_test \"p foo3_type_check (0, 0, 1)\" [format $error_str \"foo3_type_check\"]\n-gdb_test \"p foo3_type_check (0, 1, 0)\" [format $error_str \"foo3_type_check\"]\n-gdb_test \"p foo3_type_check (1, 0, 0)\" [format $error_str \"foo3_type_check\"]\n-gdb_test \"p foo3_type_check (0, 1, 1)\" [format $error_str \"foo3_type_check\"]\n-gdb_test \"p foo3_type_check (1, 1, 0)\" [format $error_str \"foo3_type_check\"]\n-gdb_test \"p foo3_type_check (1, 1, 1)\" [format $error_str \"foo3_type_check\"]\n+gdb_test \"show check type\" \"Strict type checking is on\\.\" \\\n+\t \"confirm check type on\"\n+\n+with_test_prefix \"strict type checking on\" {\n+    gdb_test \"p foo1_type_check (123)\" [format $error_str \"foo1_type_check\"]\n+    gdb_test \"p foo2_type_check (0, 1)\" [format $error_str \"foo2_type_check\"]\n+    gdb_test \"p foo2_type_check (1, 0)\" [format $error_str \"foo2_type_check\"]\n+    gdb_test \"p foo2_type_check (1, 1)\" [format $error_str \"foo2_type_check\"]\n+    gdb_test \"p foo3_type_check (0, 0, 1)\" [format $error_str \"foo3_type_check\"]\n+    gdb_test \"p foo3_type_check (0, 1, 0)\" [format $error_str \"foo3_type_check\"]\n+    gdb_test \"p foo3_type_check (1, 0, 0)\" [format $error_str \"foo3_type_check\"]\n+    gdb_test \"p foo3_type_check (0, 1, 1)\" [format $error_str \"foo3_type_check\"]\n+    gdb_test \"p foo3_type_check (1, 1, 0)\" [format $error_str \"foo3_type_check\"]\n+    gdb_test \"p foo3_type_check (1, 1, 1)\" [format $error_str \"foo3_type_check\"]\n+}\n \n gdb_test_no_output \"set check type off\"\n-gdb_test \"show check type\" \"Strict type checking is off\\.\"\n-gdb_test \"p foo1_type_check (123)\" \" = 1000\"\n-gdb_test \"p foo2_type_check (0, 1)\" \" = 1001\"\n-gdb_test \"p foo2_type_check (1, 0)\" \" = 1001\"\n-gdb_test \"p foo2_type_check (1, 1)\" \" = 1001\"\n-gdb_test \"p foo3_type_check (0, 0, 1)\" \" = 1002\"\n-gdb_test \"p foo3_type_check (0, 1, 0)\" \" = 1002\"\n-gdb_test \"p foo3_type_check (1, 0, 0)\" \" = 1002\"\n-gdb_test \"p foo3_type_check (0, 1, 1)\" \" = 1002\"\n-gdb_test \"p foo3_type_check (1, 1, 0)\" \" = 1002\"\n-gdb_test \"p foo3_type_check (1, 1, 1)\" \" = 1002\"\n-gdb_test \"p foo3_2 (1,1)\" \" = 32\"\n+gdb_test \"show check type\" \"Strict type checking is off\\.\" \\\n+\t \"confirm check type off\"\n+\n+with_test_prefix \"strict type checking off\" {\n+    gdb_test \"p foo1_type_check (123)\" \" = 1000\"\n+    gdb_test \"p foo2_type_check (0, 1)\" \" = 1001\"\n+    gdb_test \"p foo2_type_check (1, 0)\" \" = 1001\"\n+    gdb_test \"p foo2_type_check (1, 1)\" \" = 1001\"\n+    gdb_test \"p foo3_type_check (0, 0, 1)\" \" = 1002\"\n+    gdb_test \"p foo3_type_check (0, 1, 0)\" \" = 1002\"\n+    gdb_test \"p foo3_type_check (1, 0, 0)\" \" = 1002\"\n+    gdb_test \"p foo3_type_check (0, 1, 1)\" \" = 1002\"\n+    gdb_test \"p foo3_type_check (1, 1, 0)\" \" = 1002\"\n+    gdb_test \"p foo3_type_check (1, 1, 1)\" \" = 1002\"\n+    gdb_test \"p foo3_2 (1,1)\" \" = 32\"\n+}"
    },
    {
      "sha": "ad5f0c44bb19be6dcef717df456f00a668ed6d5c",
      "filename": "gdb/testsuite/gdb.cp/exceptprint.exp",
      "status": "modified",
      "additions": 14,
      "deletions": 10,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.cp/exceptprint.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.cp/exceptprint.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/exceptprint.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -76,16 +76,20 @@ if {![runto_main]} {\n     return -1\n }\n \n-gdb_test \"catch catch int if \\$_exception == 23\" \\\n-    \"Catchpoint \\[0-9\\]+ \\\\(catch\\\\)\" \\\n-    \"catch catch\"\n-gdb_test \"catch throw int if \\$_exception == 23\" \\\n-    \"Catchpoint \\[0-9\\]+ \\\\(throw\\\\)\" \\\n-    \"catch throw\"\n-gdb_test \"catch rethrow int if \\$_exception == 23\" \\\n-    \"Catchpoint \\[0-9\\]+ \\\\(rethrow\\\\)\" \\\n-    \"catch rethrow\"\n+with_test_prefix \"2nd run\" {\n+    gdb_test \"catch catch int if \\$_exception == 23\" \\\n+\t\"Catchpoint \\[0-9\\]+ \\\\(catch\\\\)\" \\\n+\t\"catch catch\"\n+    gdb_test \"catch throw int if \\$_exception == 23\" \\\n+\t\"Catchpoint \\[0-9\\]+ \\\\(throw\\\\)\" \\\n+\t\"catch throw\"\n+    gdb_test \"catch rethrow int if \\$_exception == 23\" \\\n+\t\"Catchpoint \\[0-9\\]+ \\\\(rethrow\\\\)\" \\\n+\t\"catch rethrow\"\n+}\n \n # This tests both the case where the regular expression does not\n # match, and the case where it does.\n-do_exceptprint_tests int 23\n+with_test_prefix \"2nd run\" {\n+    do_exceptprint_tests int 23\n+}"
    },
    {
      "sha": "59c72da6ae8645a4b50afd23b2f9e52d7491be6d",
      "filename": "gdb/testsuite/gdb.cp/inherit.exp",
      "status": "modified",
      "additions": 9,
      "deletions": 2,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.cp/inherit.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.cp/inherit.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/inherit.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -693,9 +693,16 @@ proc do_tests { } {\n \treturn\n     }\n \n-    test_print_si_members\n+    with_test_prefix \"single inheritance\" {\n+\ttest_print_si_members\n+    }\n+\n     test_print_si_classes\n-    test_print_mi_members\n+\n+    with_test_prefix \"multiple inheritance\" {\n+\ttest_print_mi_members\n+    }\n+\n     test_print_mi_member_types\n     test_print_mi_classes\n     test_print_anon_union"
    },
    {
      "sha": "bbf255c3f44b00c37f01d5959b0efc86d647a871",
      "filename": "gdb/testsuite/gdb.cp/nsnoimports.exp",
      "status": "modified",
      "additions": 25,
      "deletions": 19,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.cp/nsnoimports.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.cp/nsnoimports.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/nsnoimports.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -25,37 +25,43 @@ if ![runto_main] then {\n     continue\n }\n \n-gdb_test \"print A::_a\" \"= 11\"\n-gdb_test \"print A::B::ab\" \"= 22\"\n-gdb_test \"print A::B::C::abc\" \"= 33\"\n+with_test_prefix \"main scope\" {\n+    gdb_test \"print A::_a\" \"= 11\"\n+    gdb_test \"print A::B::ab\" \"= 22\"\n+    gdb_test \"print A::B::C::abc\" \"= 33\"\n \n-gdb_test \"print _a\" \"No symbol .* in current context.\"\n-gdb_test \"print ab\" \"No symbol .* in current context.\"\n-gdb_test \"print abc\" \"No symbol .* in current context.\"\n+    gdb_test \"print _a\" \"No symbol .* in current context.\"\n+    gdb_test \"print ab\" \"No symbol .* in current context.\"\n+    gdb_test \"print abc\" \"No symbol .* in current context.\"\n+}\n \n ############################################\n gdb_breakpoint A::B::first\n gdb_continue_to_breakpoint \"A::B::first\"\n \n-gdb_test \"print A::_a\" \"= 11\"\n-gdb_test \"print A::B::ab\" \"= 22\"\n-gdb_test \"print A::B::C::abc\" \"= 33\"\n+with_test_prefix \"A::B::first scope\" {\n+    gdb_test \"print A::_a\" \"= 11\"\n+    gdb_test \"print A::B::ab\" \"= 22\"\n+    gdb_test \"print A::B::C::abc\" \"= 33\"\n \n-gdb_test \"print _a\" \"= 11\"\n-gdb_test \"print ab\" \"= 22\"\n-gdb_test \"print C::abc\" \"= 33\"\n+    gdb_test \"print _a\" \"= 11\"\n+    gdb_test \"print ab\" \"= 22\"\n+    gdb_test \"print C::abc\" \"= 33\"\n \n-gdb_test \"print abc\" \"No symbol .* in current context.\"\n+    gdb_test \"print abc\" \"No symbol .* in current context.\"\n+}\n \n ############################################\n gdb_breakpoint A::B::C::second\n gdb_continue_to_breakpoint \"A::B::C::second\"\n \n-gdb_test \"print A::_a\" \"= 11\"\n-gdb_test \"print A::B::ab\" \"= 22\"\n-gdb_test \"print A::B::C::abc\" \"= 33\"\n+with_test_prefix \"A::B::C::second scope\" {\n+    gdb_test \"print A::_a\" \"= 11\"\n+    gdb_test \"print A::B::ab\" \"= 22\"\n+    gdb_test \"print A::B::C::abc\" \"= 33\"\n \n-gdb_test \"print _a\" \"= 11\"\n-gdb_test \"print ab\" \"= 22\"\n-gdb_test \"print abc\" \"= 33\"\n+    gdb_test \"print _a\" \"= 11\"\n+    gdb_test \"print ab\" \"= 22\"\n+    gdb_test \"print abc\" \"= 33\"\n+}\n "
    },
    {
      "sha": "7b5392909e8c16cf7489a7252755b88a262dc220",
      "filename": "gdb/testsuite/gdb.cp/virtbase2.exp",
      "status": "modified",
      "additions": 17,
      "deletions": 11,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.cp/virtbase2.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.cp/virtbase2.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/virtbase2.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -63,23 +63,29 @@ proc make_scope_list { scopes } {\n }\n \n proc test_variables_in_base { scopes } {\n-    foreach scope [make_scope_list $scopes] {\n-        gdb_test \"print ${scope}i\" \" = 55\"\n-        gdb_test \"print ${scope}d\" \" = 6.25\"\n-        gdb_test \"print ${scope}x\" \" = 22\"\n-    }\n+  with_test_prefix \"$scopes\" {\n+      foreach scope [make_scope_list $scopes] {\n+\t  gdb_test \"print ${scope}i\" \" = 55\"\n+\t  gdb_test \"print ${scope}d\" \" = 6.25\"\n+\t  gdb_test \"print ${scope}x\" \" = 22\"\n+      }\n+  }\n }\n \n proc test_variables_in_superbase { scopes } {\n-    foreach scope [make_scope_list $scopes] {\n-        gdb_test \"print ${scope}x\" \" = 22\"\n-    }\n+  with_test_prefix \"$scopes\" {\n+      foreach scope [make_scope_list $scopes] {\n+\t  gdb_test \"print ${scope}x\" \" = 22\"\n+      }\n+  }\n }\n \n proc test_variables_in_super { scopes } {\n-    foreach scope [make_scope_list $scopes] {\n-        gdb_test \"print ${scope}w\" \" = 17\"\n-    }\n+  with_test_prefix \"$scopes\" {\n+      foreach scope [make_scope_list $scopes] {\n+\t  gdb_test \"print ${scope}w\" \" = 17\"\n+      }\n+  }\n }\n \n with_test_prefix \"derived::func_d\" {"
    },
    {
      "sha": "260917a906bf682e1a84abc592fc9ffaebd9bce4",
      "filename": "gdb/testsuite/gdb.mi/mi-var-cmd.exp",
      "status": "modified",
      "additions": 16,
      "deletions": 12,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.mi/mi-var-cmd.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.mi/mi-var-cmd.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/mi-var-cmd.exp?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -70,7 +70,9 @@ mi_gdb_test \"113-var-create argc * argc\" \\\n \t\"113\\\\^error,msg=\\\"-var-create: unable to create variable object\\\"\" \\\n \t\"create out of scope variable\"\n \n-mi_runto do_locals_tests\n+with_test_prefix \"first run\" {\n+  mi_runto do_locals_tests\n+}\n \n set line_dlt_first_real [gdb_get_line_number \"linteger = 1234;\"]\n \n@@ -253,7 +255,7 @@ mi_gdb_test \"-var-assign global_simple 0\" \\\n \n mi_gdb_test \"-var-assign linteger 3333\" \\\n \t\"\\\\^done,value=\\\"3333\\\"\" \\\n-\t\"assign to linteger\"\n+\t\"assign to linteger, 1st\"\n \n # Allow lpcharacter to update, optionally.  Because it points to a\n # char variable instead of a zero-terminated string, if linteger is\n@@ -278,7 +280,7 @@ mi_gdb_test \"-var-evaluate-expression linteger\" \\\n \n mi_gdb_test \"-var-assign lpinteger \\\"&linteger + 3\\\"\" \\\n \t\"\\\\^done,value=\\\"$hex\\\"\" \\\n-\t\"assign to lpinteger\"\n+\t\"assign to lpinteger, 1st\"\n \n mi_gdb_test \"-var-update *\" \\\n \t\"\\\\^done,changelist=\\\\\\[\\{name=\\\"lpinteger\\\",in_scope=\\\"true\\\",type_changed=\\\"false\\\",has_more=\\\"0\\\"\\}\\\\\\]\" \\\n@@ -296,11 +298,11 @@ mi_gdb_test \"-var-evaluate-expression lpinteger\" \\\n \n mi_gdb_test \"-var-assign linteger 4321\" \\\n \t\"\\\\^done,value=\\\"4321\\\"\" \\\n-\t\"assign to linteger\"\n+\t\"assign to linteger, 2nd\"\n \n mi_gdb_test \"-var-assign lpinteger &linteger\" \\\n \t\"\\\\^done,value=\\\"$hex\\\"\" \\\n-\t\"assign to lpinteger\"\n+\t\"assign to lpinteger, 2nd\"\n \n mi_gdb_test \"-var-assign lcharacter 'z'\" \\\n \t\"\\\\^done,value=\\\"122 'z'\\\"\" \\\n@@ -312,33 +314,33 @@ mi_gdb_test \"-var-evaluate-expression lcharacter\" \\\n \n mi_gdb_test \"-var-assign llong 1313L\" \\\n \t\"\\\\^done,value=\\\"1313\\\"\" \\\n-\t\"assign to llong\"\n+\t\"assign to llong, 1st\"\n mi_gdb_test \"-var-evaluate-expression llong\" \\\n \t\"\\\\^done,value=\\\"1313\\\"\" \\\n \t\"eval llong\"\n mi_gdb_test \"-var-assign llong 1212L\" \\\n \t\"\\\\^done,value=\\\"1212\\\"\" \\\n-\t\"assign to llong\"\n+\t\"assign to llong, 2nd\"\n \n mi_gdb_test \"-var-assign lplong &llong+4\" \\\n \t\"\\\\^done,value=\\\"$hex\\\"\" \\\n-\t\"assign to lplong\"\n+\t\"assign to lplong, 1st\"\n mi_gdb_test \"-var-evaluate-expression lplong\" \\\n \t\"\\\\^done,value=\\\"$hex\\\"\" \\\n \t\"eval lplong\"\n mi_gdb_test \"-var-assign lplong &llong\" \\\n \t\"\\\\^done,value=\\\"$hex\\\"\" \\\n-\t\"assign to lplong\"\n+\t\"assign to lplong, 2nd\"\n \n mi_gdb_test \"-var-assign lfloat 3.4567\" \\\n \t\"\\\\^done,value=\\\"3.45.*\\\"\" \\\n-\t\"assign to lfloat\"\n+\t\"assign to lfloat, 1st\"\n mi_gdb_test \"-var-evaluate-expression lfloat\" \\\n \t\"\\\\^done,value=\\\"3.45.*\\\"\" \\\n \t\"eval lfloat\"\n mi_gdb_test \"-var-assign lfloat 1.2345\" \\\n \t\"\\\\^done,value=\\\"1.23.*\\\"\" \\\n-\t\"assign to lfloat\"\n+\t\"assign to lfloat, 2nd\"\n \n mi_gdb_test \"-var-assign lpfloat &lfloat+4\" \\\n \t\"\\\\^done,value=\\\"$hex\\\"\" \\\n@@ -648,7 +650,9 @@ mi_gdb_test \"-var-delete endvar\" \\\n \n mi_delete_breakpoints\n \n-mi_runto do_locals_tests\n+with_test_prefix \"second run\" {\n+  mi_runto do_locals_tests\n+}\n \n mi_create_varobj \"L\" \"lsimple\" \"in-and-out-of-scope: create varobj\"\n mi_check_varobj_value \"L\" \"{...}\" \"in-and-out-of-scope: check initial value\""
    },
    {
      "sha": "0529b67c7f160ca935185f610e233b33c2d1d694",
      "filename": "gdb/testsuite/gdb.mi/var-cmd.c",
      "status": "modified",
      "additions": 55,
      "deletions": 43,
      "changes": 98,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.mi/var-cmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2b750436a9db8cf491ddeb316bc71e4b65110b6/gdb/testsuite/gdb.mi/var-cmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/var-cmd.c?ref=c2b750436a9db8cf491ddeb316bc71e4b65110b6",
      "patch": "@@ -366,23 +366,25 @@ void do_frozen_tests ()\n \n   int v2 = 4;\n   /*: \n-    mi_create_varobj V1 v1 \"create varobj for v1\" \n-    mi_create_varobj V2 v2 \"create varobj for v2\"\n-\n-    mi_list_varobj_children \"V1\" {\n-        {\"V1.i\" \"i\" \"0\" \"int\"}\n-\t{\"V1.nested\" \"nested\" \"2\" \"struct {...}\"}\n-    } \"list children of v1\"\n-\n-    mi_list_varobj_children \"V1.nested\" {\n-        {\"V1.nested.j\" \"j\" \"0\" \"int\"}\n-        {\"V1.nested.k\" \"k\" \"0\" \"int\"}\n-    } \"list children of v1.nested\"\n-\n-    mi_check_varobj_value V1.i 1 \"check V1.i: 1\"\n-    mi_check_varobj_value V1.nested.j 2 \"check V1.nested.j: 2\"\n-    mi_check_varobj_value V1.nested.k 3 \"check V1.nested.k: 3\"\n-    mi_check_varobj_value V2 4 \"check V2: 4\"\n+    with_test_prefix \"create varobj V1 and V2\" {\n+\tmi_create_varobj V1 v1 \"create varobj for v1\"\n+\tmi_create_varobj V2 v2 \"create varobj for v2\"\n+\n+\tmi_list_varobj_children \"V1\" {\n+\t    {\"V1.i\" \"i\" \"0\" \"int\"}\n+\t    {\"V1.nested\" \"nested\" \"2\" \"struct {...}\"}\n+\t} \"list children of v1\"\n+\n+\tmi_list_varobj_children \"V1.nested\" {\n+\t    {\"V1.nested.j\" \"j\" \"0\" \"int\"}\n+\t    {\"V1.nested.k\" \"k\" \"0\" \"int\"}\n+\t} \"list children of v1.nested\"\n+\n+\tmi_check_varobj_value V1.i 1 \"check V1.i: 1\"\n+\tmi_check_varobj_value V1.nested.j 2 \"check V1.nested.j: 2\"\n+\tmi_check_varobj_value V1.nested.k 3 \"check V1.nested.k: 3\"\n+\tmi_check_varobj_value V2 4 \"check V2: 4\"\n+    }\n   :*/\n   v2 = 5;\n   /*: \n@@ -400,40 +402,50 @@ void do_frozen_tests ()\n   v1.nested.j = 8;\n   v1.nested.k = 9;\n   /*:\n-    set_frozen V1 1\n-    mi_varobj_update * {} \"update varobjs: nothing changed\"\n-    mi_check_varobj_value V1.i 1 \"check V1.i: 1\"\n-    mi_check_varobj_value V1.nested.j 2 \"check V1.nested.j: 2\"\n-    mi_check_varobj_value V1.nested.k 3 \"check V1.nested.k: 3\"    \n+    with_test_prefix \"frozen V1\" {\n+\tset_frozen V1 1\n+\tmi_varobj_update * {} \"update varobjs: nothing changed\"\n+\tmi_check_varobj_value V1.i 1 \"check V1.i: 1\"\n+\tmi_check_varobj_value V1.nested.j 2 \"check V1.nested.j: 2\"\n+\tmi_check_varobj_value V1.nested.k 3 \"check V1.nested.k: 3\"\n+    }\n     # Check that explicit update for elements of structures\n     # works.\n-    # Update v1.j\n-    mi_varobj_update V1.nested.j {V1.nested.j} \"update V1.nested.j\"\n-    mi_check_varobj_value V1.i 1 \"check V1.i: 1\"\n-    mi_check_varobj_value V1.nested.j 8 \"check V1.nested.j: 8\"\n-    mi_check_varobj_value V1.nested.k 3 \"check V1.nested.k: 3\"    \n-    # Update v1.nested, check that children is updated.\n-    mi_varobj_update V1.nested {V1.nested.k} \"update V1.nested\"\n-    mi_check_varobj_value V1.i 1 \"check V1.i: 1\"\n-    mi_check_varobj_value V1.nested.j 8 \"check V1.nested.j: 8\"\n-    mi_check_varobj_value V1.nested.k 9 \"check V1.nested.k: 9\"    \n-    # Update v1.i\n-    mi_varobj_update V1.i {V1.i} \"update V1.i\"\n-    mi_check_varobj_value V1.i 7 \"check V1.i: 7\"\n+    with_test_prefix \"update v1.j\" {\n+\t# Update v1.j\n+\tmi_varobj_update V1.nested.j {V1.nested.j} \"update V1.nested.j\"\n+\tmi_check_varobj_value V1.i 1 \"check V1.i: 1\"\n+\tmi_check_varobj_value V1.nested.j 8 \"check V1.nested.j: 8\"\n+\tmi_check_varobj_value V1.nested.k 3 \"check V1.nested.k: 3\"\n+    }\n+    with_test_prefix \"update v1.nested\" {\n+\t# Update v1.nested, check that children is updated.\n+\tmi_varobj_update V1.nested {V1.nested.k} \"update V1.nested\"\n+\tmi_check_varobj_value V1.i 1 \"check V1.i: 1\"\n+\tmi_check_varobj_value V1.nested.j 8 \"check V1.nested.j: 8\"\n+\tmi_check_varobj_value V1.nested.k 9 \"check V1.nested.k: 9\"\n+    }\n+    with_test_prefix \"update v1.i\" {\n+\t# Update v1.i\n+\tmi_varobj_update V1.i {V1.i} \"update V1.i\"\n+\tmi_check_varobj_value V1.i 7 \"check V1.i: 7\"\n+    }\n   :*/\n   v1.i = 10;\n   v1.nested.j = 11;\n   v1.nested.k = 12;\n   /*:\n     # Check that unfreeze itself does not updates the values.\n-    set_frozen V1 0\n-    mi_check_varobj_value V1.i 7 \"check V1.i: 7\"\n-    mi_check_varobj_value V1.nested.j 8 \"check V1.nested.j: 8\"\n-    mi_check_varobj_value V1.nested.k 9 \"check V1.nested.k: 9\"    \n-    mi_varobj_update V1 {V1.i V1.nested.j V1.nested.k} \"update V1\"\n-    mi_check_varobj_value V1.i 10 \"check V1.i: 10\"\n-    mi_check_varobj_value V1.nested.j 11 \"check V1.nested.j: 11\"\n-    mi_check_varobj_value V1.nested.k 12 \"check V1.nested.k: 12\"    \n+    with_test_prefix \"unfrozen V1\" {\n+\tset_frozen V1 0\n+\tmi_check_varobj_value V1.i 7 \"check V1.i: 7\"\n+\tmi_check_varobj_value V1.nested.j 8 \"check V1.nested.j: 8\"\n+\tmi_check_varobj_value V1.nested.k 9 \"check V1.nested.k: 9\"\n+\tmi_varobj_update V1 {V1.i V1.nested.j V1.nested.k} \"update V1\"\n+\tmi_check_varobj_value V1.i 10 \"check V1.i: 10\"\n+\tmi_check_varobj_value V1.nested.j 11 \"check V1.nested.j: 11\"\n+\tmi_check_varobj_value V1.nested.k 12 \"check V1.nested.k: 12\"\n+    }\n   :*/    \n   \n   /*: END: frozen :*/"
    }
  ]
}