{
  "sha": "cc06b668978e542ecbc2aff1beca40e5baff86b0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2MwNmI2Njg5NzhlNTQyZWNiYzJhZmYxYmVjYTQwZTViYWZmODZiMA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-04-23T21:31:07Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-04-25T18:59:35Z"
    },
    "message": "Remove exception_none\n\nNow that gdb_exception has a constructor, there's no need for\nexception_none.  This patch removes it.\n\ngdb/ChangeLog\n2019-04-25  Tom Tromey  <tromey@adacore.com>\n\n\t* xml-support.c (gdb_xml_parser::gdb_xml_parser): Update.\n\t* python/py-value.c (valpy_getitem, valpy_nonzero): Update.\n\t* python/py-inferior.c (infpy_write_memory, infpy_search_memory):\n\tUpdate.\n\t* python/py-breakpoint.c (bppy_set_condition, bppy_set_commands):\n\tUpdate.\n\t* mi/mi-interp.c (mi_interp::exec): Update.\n\t* linespec.c (parse_linespec): Update.\n\t* infcall.c (run_inferior_call): Update.\n\t* guile/scm-value.c (gdbscm_value_to_lazy_string): Update.\n\t* guile/scm-symbol.c (gdbscm_lookup_symbol)\n\t(gdbscm_lookup_global_symbol): Update.\n\t* guile/scm-param.c (gdbscm_parameter_value): Update.\n\t* guile/scm-frame.c (gdbscm_frame_read_register)\n\t(gdbscm_frame_read_var): Update.\n\t* guile/scm-breakpoint.c (gdbscm_register_breakpoint_x): Update.\n\t* exec.c (try_open_exec_file): Update.\n\t* event-top.c (gdb_rl_callback_read_char_wrapper_noexcept)\n\t(gdb_rl_callback_handler): Update.\n\t* common/common-exceptions.h (exception_none): Don't declare.\n\t* common/common-exceptions.c (exception_none): Don't define.\n\t(struct catcher) <exception>: Update.\n\t* cli/cli-interp.c (safe_execute_command): Update.\n\t* breakpoint.c (insert_bp_location, location_to_sals): Update.",
    "tree": {
      "sha": "d292cc52cc196b2be785c8f2436b0c7ad6c7c2e7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d292cc52cc196b2be785c8f2436b0c7ad6c7c2e7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cc06b668978e542ecbc2aff1beca40e5baff86b0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cc06b668978e542ecbc2aff1beca40e5baff86b0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cc06b668978e542ecbc2aff1beca40e5baff86b0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cc06b668978e542ecbc2aff1beca40e5baff86b0/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cf532bd13616fbabe487d98107cde3202ad58ab7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cf532bd13616fbabe487d98107cde3202ad58ab7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cf532bd13616fbabe487d98107cde3202ad58ab7"
    }
  ],
  "stats": {
    "total": 79,
    "additions": 50,
    "deletions": 29
  },
  "files": [
    {
      "sha": "106f0e65bbecfe50e3e03369c38195f1e57cafa9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -1,3 +1,30 @@\n+2019-04-25  Tom Tromey  <tromey@adacore.com>\n+\n+\t* xml-support.c (gdb_xml_parser::gdb_xml_parser): Update.\n+\t* python/py-value.c (valpy_getitem, valpy_nonzero): Update.\n+\t* python/py-inferior.c (infpy_write_memory, infpy_search_memory):\n+\tUpdate.\n+\t* python/py-breakpoint.c (bppy_set_condition, bppy_set_commands):\n+\tUpdate.\n+\t* mi/mi-interp.c (mi_interp::exec): Update.\n+\t* linespec.c (parse_linespec): Update.\n+\t* infcall.c (run_inferior_call): Update.\n+\t* guile/scm-value.c (gdbscm_value_to_lazy_string): Update.\n+\t* guile/scm-symbol.c (gdbscm_lookup_symbol)\n+\t(gdbscm_lookup_global_symbol): Update.\n+\t* guile/scm-param.c (gdbscm_parameter_value): Update.\n+\t* guile/scm-frame.c (gdbscm_frame_read_register)\n+\t(gdbscm_frame_read_var): Update.\n+\t* guile/scm-breakpoint.c (gdbscm_register_breakpoint_x): Update.\n+\t* exec.c (try_open_exec_file): Update.\n+\t* event-top.c (gdb_rl_callback_read_char_wrapper_noexcept)\n+\t(gdb_rl_callback_handler): Update.\n+\t* common/common-exceptions.h (exception_none): Don't declare.\n+\t* common/common-exceptions.c (exception_none): Don't define.\n+\t(struct catcher) <exception>: Update.\n+\t* cli/cli-interp.c (safe_execute_command): Update.\n+\t* breakpoint.c (insert_bp_location, location_to_sals): Update.\n+\n 2019-04-25  Ali Tamur  <tamur@google.com>\n \n \t* dwarf2read.c (skip_one_die): Add DW_FORM_strx."
    },
    {
      "sha": "c74fc61ea42245112d1f8f40b3432dd976e45f63",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -2434,7 +2434,7 @@ insert_bp_location (struct bp_location *bl,\n \t\t    int *hw_breakpoint_error,\n \t\t    int *hw_bp_error_explained_already)\n {\n-  gdb_exception bp_excpt = exception_none;\n+  gdb_exception bp_excpt;\n \n   if (!should_be_inserted (bl) || (bl->inserted && !bl->needs_update))\n     return 0;\n@@ -13593,7 +13593,7 @@ static std::vector<symtab_and_line>\n location_to_sals (struct breakpoint *b, struct event_location *location,\n \t\t  struct program_space *search_pspace, int *found)\n {\n-  struct gdb_exception exception = exception_none;\n+  struct gdb_exception exception;\n \n   gdb_assert (b->ops != NULL);\n "
    },
    {
      "sha": "17639d0c3f3f12d9ac04d37cea76df5e46a38f90",
      "filename": "gdb/cli/cli-interp.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/cli/cli-interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/cli/cli-interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-interp.c?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -357,7 +357,7 @@ static struct gdb_exception\n safe_execute_command (struct ui_out *command_uiout, const char *command,\n \t\t      int from_tty)\n {\n-  struct gdb_exception e = exception_none;\n+  struct gdb_exception e;\n \n   /* Save and override the global ``struct ui_out'' builder.  */\n   scoped_restore saved_uiout = make_scoped_restore (&current_uiout,"
    },
    {
      "sha": "59c27ab52d44acfc9a6d4758fcd57756854e8afe",
      "filename": "gdb/common/common-exceptions.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/common/common-exceptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/common/common-exceptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.c?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -21,8 +21,6 @@\n #include \"common-exceptions.h\"\n #include <forward_list>\n \n-const struct gdb_exception exception_none;\n-\n /* Possible catcher states.  */\n enum catcher_state {\n   /* Initial state, a new catcher has just been created.  */\n@@ -47,7 +45,7 @@ struct catcher\n   /* Jump buffer pointing back at the exception handler.  */\n   jmp_buf buf;\n   /* Status buffer belonging to the exception handler.  */\n-  struct gdb_exception exception = exception_none;\n+  struct gdb_exception exception;\n };\n \n /* Where to go for throw_exception().  */"
    },
    {
      "sha": "33fa8a92ec26693b69d94ffa55fbc144b578afbb",
      "filename": "gdb/common/common-exceptions.h",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/common/common-exceptions.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/common/common-exceptions.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.h?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -295,7 +295,4 @@ extern void throw_error (enum errors error, const char *fmt, ...)\n extern void throw_quit (const char *fmt, ...)\n      ATTRIBUTE_NORETURN ATTRIBUTE_PRINTF (1, 2);\n \n-/* A pre-defined non-exception.  */\n-extern const struct gdb_exception exception_none;\n-\n #endif /* COMMON_COMMON_EXCEPTIONS_H */"
    },
    {
      "sha": "959792d9e7a9edb2a1aade231bb6fb445bdedb8b",
      "filename": "gdb/event-top.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/event-top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/event-top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/event-top.c?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -164,7 +164,7 @@ void (*after_char_processing_hook) (void);\n static struct gdb_exception\n gdb_rl_callback_read_char_wrapper_noexcept () noexcept\n {\n-  struct gdb_exception gdb_expt = exception_none;\n+  struct gdb_exception gdb_expt;\n \n   /* C++ exceptions can't normally be thrown across readline (unless\n      it is built with -fexceptions, but it won't by default on many\n@@ -205,7 +205,7 @@ gdb_rl_callback_read_char_wrapper (gdb_client_data client_data)\n static void\n gdb_rl_callback_handler (char *rl) noexcept\n {\n-  struct gdb_exception gdb_rl_expt = exception_none;\n+  struct gdb_exception gdb_rl_expt;\n   struct ui *ui = current_ui;\n \n   try"
    },
    {
      "sha": "7ff77f99160ddb43682cb06651b99c39c0d35df8",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -148,7 +148,7 @@ void\n try_open_exec_file (const char *exec_file_host, struct inferior *inf,\n \t\t    symfile_add_flags add_flags)\n {\n-  struct gdb_exception prev_err = exception_none;\n+  struct gdb_exception prev_err;\n \n   /* exec_file_attach and symbol_file_add_main may throw an error if the file\n      cannot be opened either locally or remotely."
    },
    {
      "sha": "f86c26390c4fa84f46d5ebd9111f92c3f7305f2f",
      "filename": "gdb/guile/scm-breakpoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/guile/scm-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/guile/scm-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-breakpoint.c?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -411,7 +411,7 @@ gdbscm_register_breakpoint_x (SCM self)\n {\n   breakpoint_smob *bp_smob\n     = bpscm_get_breakpoint_smob_arg_unsafe (self, SCM_ARG1, FUNC_NAME);\n-  struct gdb_exception except = exception_none;\n+  struct gdb_exception except;\n   const char *location, *copy;\n \n   /* We only support registering breakpoints created with make-breakpoint.  */"
    },
    {
      "sha": "f3795f83f72ccfe2b481206eed7c69ecbef70336",
      "filename": "gdb/guile/scm-frame.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/guile/scm-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/guile/scm-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-frame.c?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -777,7 +777,7 @@ gdbscm_frame_read_register (SCM self, SCM register_scm)\n   gdbscm_parse_function_args (FUNC_NAME, SCM_ARG2, NULL, \"s\",\n \t\t\t      register_scm, &register_str);\n \n-  struct gdb_exception except = exception_none;\n+  struct gdb_exception except;\n \n   try\n     {\n@@ -864,7 +864,7 @@ gdbscm_frame_read_var (SCM self, SCM symbol_scm, SCM rest)\n     }\n   else if (scm_is_string (symbol_scm))\n     {\n-      struct gdb_exception except = exception_none;\n+      struct gdb_exception except;\n \n       if (! SCM_UNBNDP (block_scm))\n \t{"
    },
    {
      "sha": "cc10806d97e1001bc02e14ba5348f3ab2b314023",
      "filename": "gdb/guile/scm-param.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/guile/scm-param.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/guile/scm-param.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-param.c?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -1056,7 +1056,7 @@ gdbscm_parameter_value (SCM self)\n       struct cmd_list_element *alias, *prefix, *cmd;\n       char *newarg;\n       int found = -1;\n-      struct gdb_exception except = exception_none;\n+      struct gdb_exception except;\n \n       gdb::unique_xmalloc_ptr<char> name\n \t= gdbscm_scm_to_host_string (self, NULL, &except_scm);"
    },
    {
      "sha": "ab39123dff05a797af2ca8cba347225f9fd8efe0",
      "filename": "gdb/guile/scm-symbol.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/guile/scm-symbol.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/guile/scm-symbol.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-symbol.c?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -614,7 +614,7 @@ gdbscm_lookup_symbol (SCM name_scm, SCM rest)\n \t}\n     }\n \n-  struct gdb_exception except = exception_none;\n+  struct gdb_exception except;\n   try\n     {\n       symbol = lookup_symbol (name, block, (domain_enum) domain,\n@@ -646,7 +646,7 @@ gdbscm_lookup_global_symbol (SCM name_scm, SCM rest)\n   int domain_arg_pos = -1;\n   int domain = VAR_DOMAIN;\n   struct symbol *symbol = NULL;\n-  struct gdb_exception except = exception_none;\n+  struct gdb_exception except;\n \n   gdbscm_parse_function_args (FUNC_NAME, SCM_ARG1, keywords, \"s#i\",\n \t\t\t      name_scm, &name, rest,"
    },
    {
      "sha": "00d1c182e72b4f72567420909fb307fd6c9f4d76",
      "filename": "gdb/guile/scm-value.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/guile/scm-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/guile/scm-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-value.c?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -1048,7 +1048,7 @@ gdbscm_value_to_lazy_string (SCM self, SCM rest)\n   char *encoding = NULL;\n   int length = -1;\n   SCM result = SCM_BOOL_F; /* -Wall */\n-  struct gdb_exception except = exception_none;\n+  struct gdb_exception except;\n \n   /* The sequencing here, as everywhere else, is important.\n      We can't have existing cleanups when a Scheme exception is thrown.  */"
    },
    {
      "sha": "52f9bc907e28cdacecfd5b167a6cb49fb1313429",
      "filename": "gdb/infcall.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/infcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/infcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcall.c?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -568,7 +568,7 @@ static struct gdb_exception\n run_inferior_call (struct call_thread_fsm *sm,\n \t\t   struct thread_info *call_thread, CORE_ADDR real_pc)\n {\n-  struct gdb_exception caught_error = exception_none;\n+  struct gdb_exception caught_error;\n   int saved_in_infcall = call_thread->control.in_infcall;\n   ptid_t call_thread_ptid = call_thread->ptid;\n   enum prompt_state saved_prompt_state = current_ui->prompt_state;"
    },
    {
      "sha": "6d26638296ea331ef3f06ba6ad9d2e5ba7902f43",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -2508,7 +2508,7 @@ parse_linespec (linespec_parser *parser, const char *arg,\n \t\tsymbol_name_match_type match_type)\n {\n   linespec_token token;\n-  struct gdb_exception file_exception = exception_none;\n+  struct gdb_exception file_exception;\n \n   /* A special case to start.  It has become quite popular for\n      IDEs to work around bugs in the previous parser by quoting"
    },
    {
      "sha": "4568d398d949d3dd244b77854d04212e08330310",
      "filename": "gdb/mi/mi-interp.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/mi/mi-interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/mi/mi-interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-interp.c?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -181,7 +181,7 @@ gdb_exception\n mi_interp::exec (const char *command)\n {\n   mi_execute_command_wrapper (command);\n-  return exception_none;\n+  return gdb_exception ();\n }\n \n void"
    },
    {
      "sha": "dfc30f70bb28552ff7304eabf2afeeb5528e66f6",
      "filename": "gdb/python/py-breakpoint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/python/py-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/python/py-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-breakpoint.c?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -445,7 +445,7 @@ bppy_set_condition (PyObject *self, PyObject *newvalue, void *closure)\n   gdb::unique_xmalloc_ptr<char> exp_holder;\n   const char *exp = NULL;\n   gdbpy_breakpoint_object *self_bp = (gdbpy_breakpoint_object *) self;\n-  struct gdb_exception except = exception_none;\n+  struct gdb_exception except;\n \n   BPPY_SET_REQUIRE_VALID (self_bp);\n \n@@ -515,7 +515,7 @@ static int\n bppy_set_commands (PyObject *self, PyObject *newvalue, void *closure)\n {\n   gdbpy_breakpoint_object *self_bp = (gdbpy_breakpoint_object *) self;\n-  struct gdb_exception except = exception_none;\n+  struct gdb_exception except;\n \n   BPPY_SET_REQUIRE_VALID (self_bp);\n "
    },
    {
      "sha": "1b7e3c2491717e31e7340890895bc48feae3fc18",
      "filename": "gdb/python/py-inferior.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/python/py-inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/python/py-inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-inferior.c?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -546,7 +546,7 @@ infpy_read_memory (PyObject *self, PyObject *args, PyObject *kw)\n static PyObject *\n infpy_write_memory (PyObject *self, PyObject *args, PyObject *kw)\n {\n-  struct gdb_exception except = exception_none;\n+  struct gdb_exception except;\n   Py_ssize_t buf_len;\n   const gdb_byte *buffer;\n   CORE_ADDR addr, length;\n@@ -682,7 +682,7 @@ get_char_buffer (PyObject *self, Py_ssize_t segment, char **ptrptr)\n static PyObject *\n infpy_search_memory (PyObject *self, PyObject *args, PyObject *kw)\n {\n-  struct gdb_exception except = exception_none;\n+  struct gdb_exception except;\n   CORE_ADDR start_addr, length;\n   static const char *keywords[] = { \"address\", \"length\", \"pattern\", NULL };\n   PyObject *start_addr_obj, *length_obj;"
    },
    {
      "sha": "3349802f7fa1cffa9d8c6056ce564748971c08fd",
      "filename": "gdb/python/py-value.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/python/py-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/python/py-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-value.c?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -903,7 +903,7 @@ get_field_type (PyObject *field)\n static PyObject *\n valpy_getitem (PyObject *self, PyObject *key)\n {\n-  struct gdb_exception except = exception_none;\n+  struct gdb_exception except;\n   value_object *self_value = (value_object *) self;\n   gdb::unique_xmalloc_ptr<char> field;\n   struct type *base_class_type = NULL, *field_type = NULL;\n@@ -1480,7 +1480,7 @@ valpy_absolute (PyObject *self)\n static int\n valpy_nonzero (PyObject *self)\n {\n-  struct gdb_exception except = exception_none;\n+  struct gdb_exception except;\n   value_object *self_value = (value_object *) self;\n   struct type *type;\n   int nonzero = 0; /* Appease GCC warning.  */"
    },
    {
      "sha": "d4cd89c03398208a3ca97538b0744586dc0ff6e0",
      "filename": "gdb/xml-support.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/xml-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cc06b668978e542ecbc2aff1beca40e5baff86b0/gdb/xml-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xml-support.c?ref=cc06b668978e542ecbc2aff1beca40e5baff86b0",
      "patch": "@@ -479,7 +479,6 @@ gdb_xml_parser::gdb_xml_parser (const char *name,\n \t\t\t\tvoid *user_data)\n   : m_name (name),\n     m_user_data (user_data),\n-    m_error (exception_none),\n     m_last_line (0),\n     m_dtd_name (NULL),\n     m_is_xinclude (false)"
    }
  ]
}