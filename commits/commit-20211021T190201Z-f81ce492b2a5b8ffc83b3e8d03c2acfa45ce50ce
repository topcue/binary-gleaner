{
  "sha": "f81ce492b2a5b8ffc83b3e8d03c2acfa45ce50ce",
  "node_id": "C_kwDOANOeidoAKGY4MWNlNDkyYjJhNWI4ZmZjODNiM2U4ZDAzYzJhY2ZhNDVjZTUwY2U",
  "commit": {
    "author": {
      "name": "Andrew Pinski",
      "email": "apinski@marvell.com",
      "date": "2021-10-21T16:57:36Z"
    },
    "committer": {
      "name": "Andrew Pinski",
      "email": "apinski@marvell.com",
      "date": "2021-10-21T19:02:01Z"
    },
    "message": "Refactor code slightly in nat/aarch64-linux-hw-point.c (aarch64_linux_get_debug_reg_capacity)\n\nSince the two locations which check the debug arch are the same code currently, it is\na good idea to factor it out to a new function and just use that function from\naarch64_linux_get_debug_reg_capacity. This is also the first step to support\nARMv8.4 debug arch.",
    "tree": {
      "sha": "1f014933ff73455788dd0420837d0b414fa6fa7b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1f014933ff73455788dd0420837d0b414fa6fa7b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f81ce492b2a5b8ffc83b3e8d03c2acfa45ce50ce",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f81ce492b2a5b8ffc83b3e8d03c2acfa45ce50ce",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f81ce492b2a5b8ffc83b3e8d03c2acfa45ce50ce",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f81ce492b2a5b8ffc83b3e8d03c2acfa45ce50ce/comments",
  "author": {
    "login": "apinski-cavium",
    "id": 6335315,
    "node_id": "MDQ6VXNlcjYzMzUzMTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/apinski-cavium",
    "html_url": "https://github.com/apinski-cavium",
    "followers_url": "https://api.github.com/users/apinski-cavium/followers",
    "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}",
    "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions",
    "organizations_url": "https://api.github.com/users/apinski-cavium/orgs",
    "repos_url": "https://api.github.com/users/apinski-cavium/repos",
    "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}",
    "received_events_url": "https://api.github.com/users/apinski-cavium/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "apinski-cavium",
    "id": 6335315,
    "node_id": "MDQ6VXNlcjYzMzUzMTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/apinski-cavium",
    "html_url": "https://github.com/apinski-cavium",
    "followers_url": "https://api.github.com/users/apinski-cavium/followers",
    "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}",
    "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions",
    "organizations_url": "https://api.github.com/users/apinski-cavium/orgs",
    "repos_url": "https://api.github.com/users/apinski-cavium/repos",
    "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}",
    "received_events_url": "https://api.github.com/users/apinski-cavium/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "21a27fb021ad935b25da9f8f97ed4f7d70499c41",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/21a27fb021ad935b25da9f8f97ed4f7d70499c41",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/21a27fb021ad935b25da9f8f97ed4f7d70499c41"
    }
  ],
  "stats": {
    "total": 24,
    "additions": 18,
    "deletions": 6
  },
  "files": [
    {
      "sha": "5540a01f424f996a33c30d4f1b70c0d1481d9961",
      "filename": "gdb/nat/aarch64-linux-hw-point.c",
      "status": "modified",
      "additions": 18,
      "deletions": 6,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f81ce492b2a5b8ffc83b3e8d03c2acfa45ce50ce/gdb/nat/aarch64-linux-hw-point.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f81ce492b2a5b8ffc83b3e8d03c2acfa45ce50ce/gdb/nat/aarch64-linux-hw-point.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/aarch64-linux-hw-point.c?ref=f81ce492b2a5b8ffc83b3e8d03c2acfa45ce50ce",
      "patch": "@@ -769,6 +769,22 @@ aarch64_show_debug_reg_state (struct aarch64_debug_reg_state *state,\n \t\t  state->dr_ctrl_wp[i], state->dr_ref_count_wp[i]);\n }\n \n+/* Return true if debug arch level is compatible for hw watchpoints\n+   and breakpoints.  */\n+\n+static bool\n+compatible_debug_arch (unsigned int debug_arch)\n+{\n+  if (debug_arch == AARCH64_DEBUG_ARCH_V8)\n+    return true;\n+  if (debug_arch == AARCH64_DEBUG_ARCH_V8_1)\n+    return true;\n+  if (debug_arch == AARCH64_DEBUG_ARCH_V8_2)\n+    return true;\n+\n+  return false;\n+}\n+\n /* Get the hardware debug register capacity information from the\n    process represented by TID.  */\n \n@@ -783,9 +799,7 @@ aarch64_linux_get_debug_reg_capacity (int tid)\n \n   /* Get hardware watchpoint register info.  */\n   if (ptrace (PTRACE_GETREGSET, tid, NT_ARM_HW_WATCH, &iov) == 0\n-      && (AARCH64_DEBUG_ARCH (dreg_state.dbg_info) == AARCH64_DEBUG_ARCH_V8\n-\t  || AARCH64_DEBUG_ARCH (dreg_state.dbg_info) == AARCH64_DEBUG_ARCH_V8_1\n-\t  || AARCH64_DEBUG_ARCH (dreg_state.dbg_info) == AARCH64_DEBUG_ARCH_V8_2))\n+      && compatible_debug_arch (AARCH64_DEBUG_ARCH (dreg_state.dbg_info)))\n     {\n       aarch64_num_wp_regs = AARCH64_DEBUG_NUM_SLOTS (dreg_state.dbg_info);\n       if (aarch64_num_wp_regs > AARCH64_HWP_MAX_NUM)\n@@ -805,9 +819,7 @@ aarch64_linux_get_debug_reg_capacity (int tid)\n \n   /* Get hardware breakpoint register info.  */\n   if (ptrace (PTRACE_GETREGSET, tid, NT_ARM_HW_BREAK, &iov) == 0\n-      && (AARCH64_DEBUG_ARCH (dreg_state.dbg_info) == AARCH64_DEBUG_ARCH_V8\n-\t  || AARCH64_DEBUG_ARCH (dreg_state.dbg_info) == AARCH64_DEBUG_ARCH_V8_1\n-\t  || AARCH64_DEBUG_ARCH (dreg_state.dbg_info) == AARCH64_DEBUG_ARCH_V8_2))\n+      && compatible_debug_arch (AARCH64_DEBUG_ARCH (dreg_state.dbg_info)))\n     {\n       aarch64_num_bp_regs = AARCH64_DEBUG_NUM_SLOTS (dreg_state.dbg_info);\n       if (aarch64_num_bp_regs > AARCH64_HBP_MAX_NUM)"
    }
  ]
}