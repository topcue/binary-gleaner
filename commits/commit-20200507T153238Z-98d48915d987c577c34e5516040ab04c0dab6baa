{
  "sha": "98d48915d987c577c34e5516040ab04c0dab6baa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OThkNDg5MTVkOTg3YzU3N2MzNGU1NTE2MDQwYWIwNGMwZGFiNmJhYQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-07T15:18:42Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-07T15:32:38Z"
    },
    "message": "gdb: remove TYPE_DYN_PROP_LIST macro\n\nRemove this macro, which abstracts how to obtain the dyn_prop_list of a\ngiven type.  We could replace it with a method on `struct type`, but I\ndon't think it's needed, as the only code that accesses the dynamic prop\nlist directly is internal gdbtypes.c code (that can be seen as code\ninternal to `struct type`).  So it can just refer to the field directly.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (TYPE_DYN_PROP_LIST): Remove.  Update all users\n\taccess thistype->main_type->dyn_prop_list directly.",
    "tree": {
      "sha": "863422f141ab39492303a7dac33aa1236e4fefbe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/863422f141ab39492303a7dac33aa1236e4fefbe"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/98d48915d987c577c34e5516040ab04c0dab6baa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/98d48915d987c577c34e5516040ab04c0dab6baa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/98d48915d987c577c34e5516040ab04c0dab6baa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/98d48915d987c577c34e5516040ab04c0dab6baa/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7aa913136675f4b81cd3a548e44bbdab6185abed",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7aa913136675f4b81cd3a548e44bbdab6185abed",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7aa913136675f4b81cd3a548e44bbdab6185abed"
    }
  ],
  "stats": {
    "total": 29,
    "additions": 16,
    "deletions": 13
  },
  "files": [
    {
      "sha": "b7c2c4b08493a0f4ef5e18aa519ce452f32e74bb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/98d48915d987c577c34e5516040ab04c0dab6baa/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/98d48915d987c577c34e5516040ab04c0dab6baa/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=98d48915d987c577c34e5516040ab04c0dab6baa",
      "patch": "@@ -1,3 +1,8 @@\n+2020-05-07  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (TYPE_DYN_PROP_LIST): Remove.  Update all users\n+\taccess thistype->main_type->dyn_prop_list directly.\n+\n 2020-05-07  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (struct type) <remove_dyn_prop>: New method."
    },
    {
      "sha": "3f829241f0530cda6d6b0e17fac4190f5a04c175",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/98d48915d987c577c34e5516040ab04c0dab6baa/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/98d48915d987c577c34e5516040ab04c0dab6baa/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=98d48915d987c577c34e5516040ab04c0dab6baa",
      "patch": "@@ -2654,7 +2654,7 @@ resolve_dynamic_type (struct type *type,\n dynamic_prop *\n type::dyn_prop (dynamic_prop_node_kind prop_kind) const\n {\n-  dynamic_prop_list *node = TYPE_DYN_PROP_LIST (this);\n+  dynamic_prop_list *node = this->main_type->dyn_prop_list;\n \n   while (node != NULL)\n     {\n@@ -2678,9 +2678,9 @@ type::add_dyn_prop (dynamic_prop_node_kind prop_kind, dynamic_prop prop)\n \t\t struct dynamic_prop_list);\n   temp->prop_kind = prop_kind;\n   temp->prop = prop;\n-  temp->next = TYPE_DYN_PROP_LIST (this);\n+  temp->next = this->main_type->dyn_prop_list;\n \n-  TYPE_DYN_PROP_LIST (this) = temp;\n+  this->main_type->dyn_prop_list = temp;\n }\n \n /* See gdbtypes.h.  */\n@@ -2690,7 +2690,7 @@ type::remove_dyn_prop (dynamic_prop_node_kind kind)\n {\n   struct dynamic_prop_list *prev_node, *curr_node;\n \n-  curr_node = TYPE_DYN_PROP_LIST (this);\n+  curr_node = this->main_type->dyn_prop_list;\n   prev_node = NULL;\n \n   while (NULL != curr_node)\n@@ -2702,7 +2702,7 @@ type::remove_dyn_prop (dynamic_prop_node_kind kind)\n \t     if we are on top of it.  Nevertheless, everything is released\n \t     when the complete objstack is freed.  */\n \t  if (NULL == prev_node)\n-\t    TYPE_DYN_PROP_LIST (this) = curr_node->next;\n+\t    this->main_type->dyn_prop_list = curr_node->next;\n \t  else\n \t    prev_node->next = curr_node->next;\n \n@@ -5350,10 +5350,10 @@ copy_type_recursive (struct objfile *objfile,\n       *TYPE_RANGE_DATA (new_type) = *TYPE_RANGE_DATA (type);\n     }\n \n-  if (TYPE_DYN_PROP_LIST (type) != NULL)\n-    TYPE_DYN_PROP_LIST (new_type)\n+  if (type->main_type->dyn_prop_list != NULL)\n+    new_type->main_type->dyn_prop_list\n       = copy_dynamic_prop_list (&objfile->objfile_obstack,\n-\t\t\t\tTYPE_DYN_PROP_LIST (type));\n+\t\t\t\ttype->main_type->dyn_prop_list);\n \n \n   /* Copy pointers to other types.  */\n@@ -5418,10 +5418,10 @@ copy_type (const struct type *type)\n   TYPE_LENGTH (new_type) = TYPE_LENGTH (type);\n   memcpy (TYPE_MAIN_TYPE (new_type), TYPE_MAIN_TYPE (type),\n \t  sizeof (struct main_type));\n-  if (TYPE_DYN_PROP_LIST (type) != NULL)\n-    TYPE_DYN_PROP_LIST (new_type)\n+  if (type->main_type->dyn_prop_list != NULL)\n+    new_type->main_type->dyn_prop_list\n       = copy_dynamic_prop_list (&TYPE_OBJFILE (type) -> objfile_obstack,\n-\t\t\t\tTYPE_DYN_PROP_LIST (type));\n+\t\t\t\ttype->main_type->dyn_prop_list);\n \n   return new_type;\n }"
    },
    {
      "sha": "7514bd27f7c002c008243c534fcf3ecaac2e4c05",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/98d48915d987c577c34e5516040ab04c0dab6baa/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/98d48915d987c577c34e5516040ab04c0dab6baa/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=98d48915d987c577c34e5516040ab04c0dab6baa",
      "patch": "@@ -1463,8 +1463,6 @@ extern bool set_type_align (struct type *, ULONGEST);\n   ((thistype)->dyn_prop (DYN_PROP_ASSOCIATED))\n \n /* Attribute accessors for dynamic properties.  */\n-#define TYPE_DYN_PROP_LIST(thistype) \\\n-  TYPE_MAIN_TYPE(thistype)->dyn_prop_list\n #define TYPE_DYN_PROP_BATON(dynprop) \\\n   dynprop->data.baton\n #define TYPE_DYN_PROP_ADDR(dynprop) \\"
    }
  ]
}