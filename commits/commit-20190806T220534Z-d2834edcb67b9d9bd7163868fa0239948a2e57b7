{
  "sha": "d2834edcb67b9d9bd7163868fa0239948a2e57b7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDI4MzRlZGNiNjdiOWQ5YmQ3MTYzODY4ZmEwMjM5OTQ4YTJlNTdiNw==",
  "commit": {
    "author": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-07-31T20:44:13Z"
    },
    "committer": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2019-08-06T22:05:34Z"
    },
    "message": "Add a selftest that checks documentation invariants.\n\nSeveral approaches were discussed (mail or irc) to verify the invariants of\nthe GDB help documentation : checking with apropos ., modifying add_cmd\nto do the check and output a warning, implement maintenance check-doc.\n\nA selftest was finally chosen as:\n  * this can be run on demand, including by users if they want\n    to check user defined commands.\n  * it does not interact with the normal behaviour of apropos, define,\n    python, ...\n    (such as output warnings when a user defines a command help that\n     does not respect the doc).\n  * when the selftest runs, it checks the user defined and python\n    defined commands currently defined.\n\ngdb/ChangeLog\n\t* unittests/help-doc-selftests.c: New file.\n\t* Makefile.in: Add the new file.",
    "tree": {
      "sha": "1117bcdfcb60eeb897f5a9711b27c207b29536a6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1117bcdfcb60eeb897f5a9711b27c207b29536a6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d2834edcb67b9d9bd7163868fa0239948a2e57b7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d2834edcb67b9d9bd7163868fa0239948a2e57b7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d2834edcb67b9d9bd7163868fa0239948a2e57b7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d2834edcb67b9d9bd7163868fa0239948a2e57b7/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "590042fc45f857c981bee4e0c76f6b3b528a224e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/590042fc45f857c981bee4e0c76f6b3b528a224e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/590042fc45f857c981bee4e0c76f6b3b528a224e"
    }
  ],
  "stats": {
    "total": 113,
    "additions": 113,
    "deletions": 0
  },
  "files": [
    {
      "sha": "9724858474dedc787262cd972de3703e129422e6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d2834edcb67b9d9bd7163868fa0239948a2e57b7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d2834edcb67b9d9bd7163868fa0239948a2e57b7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d2834edcb67b9d9bd7163868fa0239948a2e57b7",
      "patch": "@@ -1,3 +1,8 @@\n+2019-08-07  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\n+\t* unittests/help-doc-selftests.c: New file.\n+\t* Makefile.in: Add the new file.\n+\n 2019-08-07  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* cli/cli-decode.h (print_doc_line): Add for_value_prefix argument."
    },
    {
      "sha": "d5d095aae4dc8ee6b552c6ec9013d6febec63de9",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d2834edcb67b9d9bd7163868fa0239948a2e57b7/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d2834edcb67b9d9bd7163868fa0239948a2e57b7/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=d2834edcb67b9d9bd7163868fa0239948a2e57b7",
      "patch": "@@ -414,6 +414,7 @@ SUBDIR_UNITTESTS_SRCS = \\\n \tunittests/environ-selftests.c \\\n \tunittests/format_pieces-selftests.c \\\n \tunittests/function-view-selftests.c \\\n+\tunittests/help-doc-selftests.c \\\n \tunittests/lookup_name_info-selftests.c \\\n \tunittests/memory-map-selftests.c \\\n \tunittests/memrange-selftests.c \\"
    },
    {
      "sha": "89bc2e1f4e8c65207ac976840e8599e604e18397",
      "filename": "gdb/unittests/help-doc-selftests.c",
      "status": "added",
      "additions": 107,
      "deletions": 0,
      "changes": 107,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d2834edcb67b9d9bd7163868fa0239948a2e57b7/gdb/unittests/help-doc-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d2834edcb67b9d9bd7163868fa0239948a2e57b7/gdb/unittests/help-doc-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/help-doc-selftests.c?ref=d2834edcb67b9d9bd7163868fa0239948a2e57b7",
      "patch": "@@ -0,0 +1,107 @@\n+/* Self tests for help doc for GDB, the GNU debugger.\n+\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"cli/cli-cmds.h\"\n+#include \"cli/cli-decode.h\"\n+#include \"gdbsupport/selftest.h\"\n+\n+namespace selftests {\n+namespace help_doc_tests {\n+\n+static unsigned int nr_failed_invariants;\n+\n+/* Report a broken invariant and increments nr_failed_invariants.  */\n+\n+static void\n+broken_doc_invariant (const char *prefix, const char *name, const char *msg)\n+{\n+  fprintf_filtered (gdb_stdout,\n+\t\t    \"help doc broken invariant: command '%s%s' help doc %s\\n\",\n+\t\t    prefix, name, msg);\n+  nr_failed_invariants++;\n+}\n+\n+/* Recursively walk the commandlist structures, and check doc invariants:\n+   - The first line of the doc must end with a '.'.\n+   - the doc must not end with a new line.\n+  If an invariant is not respected, produce a message and increment\n+  nr_failed_invariants.\n+  Note that we do not call SELF_CHECK in this function, as we want\n+  all commands to be checked before making the test fail.  */\n+\n+static void\n+check_doc (struct cmd_list_element *commandlist, const char *prefix)\n+{\n+  struct cmd_list_element *c;\n+\n+  /* Walk through the commands.  */\n+  for (c = commandlist; c; c = c->next)\n+    {\n+      /* Checks the doc has a first line terminated with a '.'.  */\n+      const char *p = c->doc;\n+\n+      /* Position p on the first LF, or on terminating null byte.  */\n+      while (*p && *p != '\\n')\n+\tp++;\n+      if (p == c->doc)\n+\tbroken_doc_invariant\n+\t  (prefix, c->name,\n+\t   \"is missing the first line terminated with a '.' character\");\n+      else if (*(p-1) != '.')\n+\tbroken_doc_invariant\n+\t  (prefix, c->name,\n+\t   \"first line is not terminated with a '.' character\");\n+\n+      /* Checks the doc is not terminated with a new line.  */\n+      if (c->doc[strlen (c->doc) - 1] == '\\n')\n+\tbroken_doc_invariant\n+\t  (prefix, c->name,\n+\t   \"has a superfluous trailing end of line\");\n+\n+      /* Check if this command has subcommands and is not an\n+\t abbreviation.  We skip checking subcommands of abbreviations\n+\t in order to avoid duplicates in the output.  */\n+      if (c->prefixlist != NULL && !c->abbrev_flag)\n+\t{\n+\t  /* Recursively call ourselves on the subcommand list,\n+\t     passing the right prefix in.  */\n+\t  check_doc (*c->prefixlist, c->prefixname);\n+\t}\n+    }\n+}\n+\n+static void\n+help_doc_invariants_tests ()\n+{\n+  nr_failed_invariants = 0;\n+  check_doc (cmdlist, \"\");\n+  SELF_CHECK (nr_failed_invariants == 0);\n+}\n+\n+} /* namespace help_doc_tests */\n+} /* namespace selftests */\n+\n+void\n+_initialize_help_doc_selftests ()\n+{\n+  selftests::register_test\n+    (\"help_doc_invariants\",\n+     selftests::help_doc_tests::help_doc_invariants_tests);\n+}"
    }
  ]
}