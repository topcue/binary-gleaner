{
  "sha": "90dee485e5a5cf5eb51491feb8ebea1fcbf5d4cc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTBkZWU0ODVlNWE1Y2Y1ZWI1MTQ5MWZlYjhlYmVhMWZjYmY1ZDRjYw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-01-13T07:28:02Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-01-13T08:13:34Z"
    },
    "message": "asan: ns32k: wild memory write\n\nindex_offset isn't set up for \"sfsr\", resulting in a random offset\nbeing used when trying to disassemble the following.\n\n .byte 0x3e, 0xf7, 0x07, 0x00\n\n\t* ns32k-dis.c (Is_gen): Use strchr, add 'f'.\n\t(print_insn_ns32k): Adjust ioffset for 'f' index_offset.",
    "tree": {
      "sha": "552006ee4e73a489fd5647151b5956c1f5fca8e1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/552006ee4e73a489fd5647151b5956c1f5fca8e1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/90dee485e5a5cf5eb51491feb8ebea1fcbf5d4cc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/90dee485e5a5cf5eb51491feb8ebea1fcbf5d4cc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/90dee485e5a5cf5eb51491feb8ebea1fcbf5d4cc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/90dee485e5a5cf5eb51491feb8ebea1fcbf5d4cc/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "febda64f152972d8edf0147fb29f89b02f6a4cf9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/febda64f152972d8edf0147fb29f89b02f6a4cf9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/febda64f152972d8edf0147fb29f89b02f6a4cf9"
    }
  ],
  "stats": {
    "total": 16,
    "additions": 10,
    "deletions": 6
  },
  "files": [
    {
      "sha": "e74ff054618d4c1d9ce61113e95b3c4d9fac7034",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90dee485e5a5cf5eb51491feb8ebea1fcbf5d4cc/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90dee485e5a5cf5eb51491feb8ebea1fcbf5d4cc/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=90dee485e5a5cf5eb51491feb8ebea1fcbf5d4cc",
      "patch": "@@ -1,3 +1,8 @@\n+2020-01-13  Alan Modra  <amodra@gmail.com>\n+\n+\t* ns32k-dis.c (Is_gen): Use strchr, add 'f'.\n+\t(print_insn_ns32k): Adjust ioffset for 'f' index_offset.\n+\n 2020-01-13  Alan Modra  <amodra@gmail.com>\n \n \t* wasm32-dis.c (print_insn_wasm32): Localise variables.  Store"
    },
    {
      "sha": "d505edd774267d4c3f93200917a9296792bd4b31",
      "filename": "opcodes/ns32k-dis.c",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/90dee485e5a5cf5eb51491feb8ebea1fcbf5d4cc/opcodes/ns32k-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/90dee485e5a5cf5eb51491feb8ebea1fcbf5d4cc/opcodes/ns32k-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ns32k-dis.c?ref=90dee485e5a5cf5eb51491feb8ebea1fcbf5d4cc",
      "patch": "@@ -347,9 +347,7 @@ flip_bytes (char *ptr, int count)\n }\n \f\n /* Given a character C, does it represent a general addressing mode?  */\n-#define Is_gen(c) \\\n-  ((c) == 'F' || (c) == 'L' || (c) == 'B' \\\n-   || (c) == 'W' || (c) == 'D' || (c) == 'A' || (c) == 'I' || (c) == 'Z')\n+#define Is_gen(c) (strchr (\"FLBWDAIZf\", (c)) != NULL)\n \n /* Adressing modes.  */\n #define Adrmod_index_byte        0x1c\n@@ -808,9 +806,10 @@ print_insn_ns32k (bfd_vma memaddr, disassemble_info *info)\n \t if we are using scaled indexed addressing mode, since the index\n \t bytes occur right after the basic instruction, not as part\n \t of the addressing extension.  */\n-      if (Is_gen(d[1]))\n+      if (Is_gen (d[1]))\n \t{\n-\t  int addr_mode = bit_extract (buffer, ioffset - 5, 5);\n+\t  int bitoff = d[1] == 'f' ? 10 : 5;\n+\t  int addr_mode = bit_extract (buffer, ioffset - bitoff, 5);\n \n \t  if (Adrmod_is_index (addr_mode))\n \t    {\n@@ -819,7 +818,7 @@ print_insn_ns32k (bfd_vma memaddr, disassemble_info *info)\n \t    }\n \t}\n \n-      if (d[2] && Is_gen(d[3]))\n+      if (d[2] && Is_gen (d[3]))\n \t{\n \t  int addr_mode = bit_extract (buffer, ioffset - 10, 5);\n "
    }
  ]
}