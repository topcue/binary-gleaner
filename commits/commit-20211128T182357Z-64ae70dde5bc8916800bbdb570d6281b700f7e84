{
  "sha": "64ae70dde5bc8916800bbdb570d6281b700f7e84",
  "node_id": "C_kwDOANOeidoAKDY0YWU3MGRkZTViYzg5MTY4MDBiYmRiNTcwZDYyODFiNzAwZjdlODQ",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-01T05:31:44Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-28T18:23:57Z"
    },
    "message": "sim: nltvals: pull target syscalls out into a dedicated source file\n\nLike we just did for pulling out the errno map, pull out the syscall\nmaps into a dedicated common file.  Most newlib ports are using the\nsame syscall map, but not all, which means we have to do a bit more\nwork to migrate.\n\nThis commit adds the maps and switches the ports using the common\ndefault syscall table over to it.  Ports using unique syscall tables\nare still using the old targ-map.c logic.\n\nSwitching common ports over is easy by checking NL_TARGET, but the\nppc code needs a bit more cleanup here hence its larger diff.",
    "tree": {
      "sha": "d42650d14607f4ec69b314017afe529077ced46f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d42650d14607f4ec69b314017afe529077ced46f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/64ae70dde5bc8916800bbdb570d6281b700f7e84",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64ae70dde5bc8916800bbdb570d6281b700f7e84",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/64ae70dde5bc8916800bbdb570d6281b700f7e84",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64ae70dde5bc8916800bbdb570d6281b700f7e84/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "96537189c92734cad48c95de00d3cd167ad7092d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96537189c92734cad48c95de00d3cd167ad7092d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/96537189c92734cad48c95de00d3cd167ad7092d"
    }
  ],
  "stats": {
    "total": 1052,
    "additions": 987,
    "deletions": 65
  },
  "files": [
    {
      "sha": "c3e7e767c47befc6a8aeb1d9d05f2bfe7bef3c73",
      "filename": "sim/Makefile.am",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64ae70dde5bc8916800bbdb570d6281b700f7e84/sim/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64ae70dde5bc8916800bbdb570d6281b700f7e84/sim/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/Makefile.am?ref=64ae70dde5bc8916800bbdb570d6281b700f7e84",
      "patch": "@@ -49,12 +49,9 @@ LINK_FOR_BUILD = $(CC_FOR_BUILD) $(CFLAGS_FOR_BUILD) $(LDFLAGS_FOR_BUILD) -o $@\n # into any subdirs.\n SIM_ALL_RECURSIVE_DEPS =\n \n-# Generate nltvals.def for newlib/libgloss using devo and build tree.\n+# Generate target constants for newlib/libgloss from its source tree.\n # This file is shipped with distributions so we build in the source dir.\n # Use `make nltvals' to rebuild.\n-# Note: If gdb releases begin to contain target header files (not a good idea,\n-# but if they did ...), nltvals.def coud be generated at build time.\n-# An alternative is to slurp in the tables at runtime.\n .PHONY: nltvals\n nltvals:\n \t$(srccom)/gennltvals.py --cpp \"$(CPP)\""
    },
    {
      "sha": "250fb491627ebaf16451d4fa3f1387c78e0cf801",
      "filename": "sim/Makefile.in",
      "status": "modified",
      "additions": 20,
      "deletions": 4,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64ae70dde5bc8916800bbdb570d6281b700f7e84/sim/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64ae70dde5bc8916800bbdb570d6281b700f7e84/sim/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/Makefile.in?ref=64ae70dde5bc8916800bbdb570d6281b700f7e84",
      "patch": "@@ -647,6 +647,7 @@ am_common_libcommon_a_OBJECTS =  \\\n \tcommon/common_libcommon_a-target-newlib-errno.$(OBJEXT) \\\n \tcommon/common_libcommon_a-target-newlib-open.$(OBJEXT) \\\n \tcommon/common_libcommon_a-target-newlib-signal.$(OBJEXT) \\\n+\tcommon/common_libcommon_a-target-newlib-syscall.$(OBJEXT) \\\n \tcommon/common_libcommon_a-version.$(OBJEXT)\n common_libcommon_a_OBJECTS = $(am_common_libcommon_a_OBJECTS)\n igen_libigen_a_AR = $(AR) $(ARFLAGS)\n@@ -1286,6 +1287,7 @@ common_libcommon_a_SOURCES = \\\n \tcommon/target-newlib-errno.c \\\n \tcommon/target-newlib-open.c \\\n \tcommon/target-newlib-signal.c \\\n+\tcommon/target-newlib-syscall.c \\\n \tcommon/version.c\n \n \n@@ -1622,6 +1624,8 @@ common/common_libcommon_a-target-newlib-open.$(OBJEXT):  \\\n \tcommon/$(am__dirstamp) common/$(DEPDIR)/$(am__dirstamp)\n common/common_libcommon_a-target-newlib-signal.$(OBJEXT):  \\\n \tcommon/$(am__dirstamp) common/$(DEPDIR)/$(am__dirstamp)\n+common/common_libcommon_a-target-newlib-syscall.$(OBJEXT):  \\\n+\tcommon/$(am__dirstamp) common/$(DEPDIR)/$(am__dirstamp)\n common/common_libcommon_a-version.$(OBJEXT): common/$(am__dirstamp) \\\n \tcommon/$(DEPDIR)/$(am__dirstamp)\n \n@@ -1812,6 +1816,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@common/$(DEPDIR)/common_libcommon_a-target-newlib-errno.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@common/$(DEPDIR)/common_libcommon_a-target-newlib-open.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@common/$(DEPDIR)/common_libcommon_a-target-newlib-signal.Po@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@common/$(DEPDIR)/common_libcommon_a-target-newlib-syscall.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@common/$(DEPDIR)/common_libcommon_a-version.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@cr16/$(DEPDIR)/gencode.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@d10v/$(DEPDIR)/gencode.Po@am__quote@\n@@ -1951,6 +1956,20 @@ common/common_libcommon_a-target-newlib-signal.obj: common/target-newlib-signal.\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(common_libcommon_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o common/common_libcommon_a-target-newlib-signal.obj `if test -f 'common/target-newlib-signal.c'; then $(CYGPATH_W) 'common/target-newlib-signal.c'; else $(CYGPATH_W) '$(srcdir)/common/target-newlib-signal.c'; fi`\n \n+common/common_libcommon_a-target-newlib-syscall.o: common/target-newlib-syscall.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(common_libcommon_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT common/common_libcommon_a-target-newlib-syscall.o -MD -MP -MF common/$(DEPDIR)/common_libcommon_a-target-newlib-syscall.Tpo -c -o common/common_libcommon_a-target-newlib-syscall.o `test -f 'common/target-newlib-syscall.c' || echo '$(srcdir)/'`common/target-newlib-syscall.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) common/$(DEPDIR)/common_libcommon_a-target-newlib-syscall.Tpo common/$(DEPDIR)/common_libcommon_a-target-newlib-syscall.Po\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='common/target-newlib-syscall.c' object='common/common_libcommon_a-target-newlib-syscall.o' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(common_libcommon_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o common/common_libcommon_a-target-newlib-syscall.o `test -f 'common/target-newlib-syscall.c' || echo '$(srcdir)/'`common/target-newlib-syscall.c\n+\n+common/common_libcommon_a-target-newlib-syscall.obj: common/target-newlib-syscall.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(common_libcommon_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT common/common_libcommon_a-target-newlib-syscall.obj -MD -MP -MF common/$(DEPDIR)/common_libcommon_a-target-newlib-syscall.Tpo -c -o common/common_libcommon_a-target-newlib-syscall.obj `if test -f 'common/target-newlib-syscall.c'; then $(CYGPATH_W) 'common/target-newlib-syscall.c'; else $(CYGPATH_W) '$(srcdir)/common/target-newlib-syscall.c'; fi`\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) common/$(DEPDIR)/common_libcommon_a-target-newlib-syscall.Tpo common/$(DEPDIR)/common_libcommon_a-target-newlib-syscall.Po\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='common/target-newlib-syscall.c' object='common/common_libcommon_a-target-newlib-syscall.obj' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(common_libcommon_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o common/common_libcommon_a-target-newlib-syscall.obj `if test -f 'common/target-newlib-syscall.c'; then $(CYGPATH_W) 'common/target-newlib-syscall.c'; else $(CYGPATH_W) '$(srcdir)/common/target-newlib-syscall.c'; fi`\n+\n common/common_libcommon_a-version.o: common/version.c\n @am__fastdepCC_TRUE@\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(common_libcommon_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT common/common_libcommon_a-version.o -MD -MP -MF common/$(DEPDIR)/common_libcommon_a-version.Tpo -c -o common/common_libcommon_a-version.o `test -f 'common/version.c' || echo '$(srcdir)/'`common/version.c\n @am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) common/$(DEPDIR)/common_libcommon_a-version.Tpo common/$(DEPDIR)/common_libcommon_a-version.Po\n@@ -2626,12 +2645,9 @@ uninstall-am: uninstall-armdocDATA uninstall-erc32docDATA \\\n .PRECIOUS: Makefile\n \n \n-# Generate nltvals.def for newlib/libgloss using devo and build tree.\n+# Generate target constants for newlib/libgloss from its source tree.\n # This file is shipped with distributions so we build in the source dir.\n # Use `make nltvals' to rebuild.\n-# Note: If gdb releases begin to contain target header files (not a good idea,\n-# but if they did ...), nltvals.def coud be generated at build time.\n-# An alternative is to slurp in the tables at runtime.\n .PHONY: nltvals\n nltvals:\n \t$(srccom)/gennltvals.py --cpp \"$(CPP)\""
    },
    {
      "sha": "38915bf3bb9446f09f183685babe0dc64ea9e817",
      "filename": "sim/README-HACKING",
      "status": "modified",
      "additions": 6,
      "deletions": 17,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64ae70dde5bc8916800bbdb570d6281b700f7e84/sim/README-HACKING",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64ae70dde5bc8916800bbdb570d6281b700f7e84/sim/README-HACKING",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/README-HACKING?ref=64ae70dde5bc8916800bbdb570d6281b700f7e84",
      "patch": "@@ -20,10 +20,7 @@ The common directory contains:\n - common Makefile fragment and configury (e.g. Make-common.in, aclocal.m4).\n \n In addition \"common\" contains portions of the system call support\n-(e.g. callback.c, nltvals.def).\n-\n-Even though no files are built in this directory, it is still configured\n-so support for regenerating nltvals.def is present.\n+(e.g. callback.c, target-newlib-*.c).\n \f\n Common Makefile Support\n =======================\n@@ -161,8 +158,8 @@ internal state pretty printed from gdb.\n \n FIXME: This can obviously be made more elaborate.  As needed it will be.\n \f\n-Rebuilding nltvals.def\n-======================\n+Rebuilding target-newlib-* files\n+================================\n \n Checkout a copy of the SIM and LIBGLOSS modules (Unless you've already\n got one to hand):\n@@ -191,17 +188,9 @@ all set!  If the target has a custom syscall table, you need to declare it:\n \t\tAdd your new processor target (you'll need to grub\n \t\taround to find where your syscall.h lives).\n \n-\tdevo/sim/<processor>/Makefile.in\n-\n-\t\tAdd the definition:\n-\n-\t\t\t``NL_TARGET = -DNL_TARGET_d10v''\n-\n-\t\tjust before the line COMMON_POST_CONFIG_FRAG.\n-\n \tdevo/sim/<processor>/*.[ch]\n \n-\t\tInclude targ-vals.h instead of syscall.h.\n+\t\tInclude target-newlib-syscall.h instead of syscall.h.\n \f\n Tracing\n =======\n@@ -335,8 +324,8 @@ only store the error code when the result is an error.\n \n Keep in mind that the CB_SYS_xxx defines are normalized values with no real\n meaning with respect to the target.  They provide a unique map on the host so\n-that it can parse things sanely.  For libgloss, the common/nltvals.def file\n-creates the target's system call numbers to the CB_SYS_xxx values.\n+that it can parse things sanely.  For libgloss, the common/target-newlib-syscall\n+file contains the target's system call numbers to the CB_SYS_xxx values.\n \n To simulate other userspace targets, you really only need to update the maps\n pointers that are part of the callback interface.  So create CB_TARGET_DEFS_MAP"
    },
    {
      "sha": "f834edbec8a8c76153a0c798d061d4fabaf14e72",
      "filename": "sim/common/Make-common.in",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64ae70dde5bc8916800bbdb570d6281b700f7e84/sim/common/Make-common.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64ae70dde5bc8916800bbdb570d6281b700f7e84/sim/common/Make-common.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/Make-common.in?ref=64ae70dde5bc8916800bbdb570d6281b700f7e84",
      "patch": "@@ -238,7 +238,14 @@ COMMON_OBJS_NAMES = \\\n \tversion.o\n COMMON_OBJS = $(COMMON_OBJS_NAMES:%=../common/common_libcommon_a-%)\n \n-LIB_OBJS = modules.o syscall.o targ-map.o $(COMMON_OBJS) $(SIM_OBJS)\n+LIB_OBJS = modules.o syscall.o $(COMMON_OBJS) $(SIM_OBJS)\n+\n+# TODO: Migrate everyone to target-newlib-syscall.o.\n+ifeq ($(NL_TARGET),)\n+COMMON_OBJS_NAMES += target-newlib-syscall.o\n+else\n+LIB_OBJS += targ-map.o\n+endif\n \n COMPILE_FOR_BUILD = $(CC_FOR_BUILD) $(BUILD_CFLAGS)\n LINK_FOR_BUILD = $(CC_FOR_BUILD) $(BUILD_CFLAGS) $(LDFLAGS_FOR_BUILD) -o $@\n@@ -275,9 +282,11 @@ stamp-tvals: gentmap\n \t$(ECHO_STAMP) targ-vals.h\n \t$(SILENCE) ./gentmap -h >tmp-tvals.h\n \t$(SILENCE) $(SHELL) $(srcroot)/move-if-change tmp-tvals.h targ-vals.h\n+ifneq ($(NL_TARGET),)\n \t$(ECHO_STAMP) targ-tmap.c\n \t$(SILENCE) ./gentmap -c >tmp-tmap.c\n \t$(SILENCE) $(SHELL) $(srcroot)/move-if-change tmp-tmap.c targ-map.c\n+endif\n \t$(SILENCE) touch $@\n \n #\n@@ -405,8 +414,10 @@ generated_files = \\\n \t$(SIM_EXTRA_DEPS) \\\n \thw-config.h \\\n \tmodules.c \\\n-\ttarg-map.c \\\n \ttarg-vals.h\n+ifneq ($(NL_TARGET),)\n+generated_files += targ-map.c\n+endif\n \n # Ensure that generated files are created early.  Use order-only\n # dependencies if available.  They require GNU make 3.80 or newer,"
    },
    {
      "sha": "1e98691cb3d512ef7a88bbb73088b5bd55220452",
      "filename": "sim/common/gennltvals.py",
      "status": "modified",
      "additions": 71,
      "deletions": 6,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64ae70dde5bc8916800bbdb570d6281b700f7e84/sim/common/gennltvals.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64ae70dde5bc8916800bbdb570d6281b700f7e84/sim/common/gennltvals.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/gennltvals.py?ref=64ae70dde5bc8916800bbdb570d6281b700f7e84",
      "patch": "@@ -177,15 +177,80 @@ def gen_common(output_dir: Path, output: TextIO, newlib: Path, cpp: str):\n              ('fcntl.h', 'sys/fcntl.h', 'sys/_default_fcntl.h'), r'O_[A-Z0-9]*')\n \n \n-def gen_targets(output_dir: Path, output: TextIO, newlib: Path, cpp: str):\n-    \"\"\"Generate the target-specific lists.\"\"\"\n+def gen_target_syscall(output_dir: Path, newlib: Path, cpp: str):\n+    \"\"\"Generate the target-specific syscall lists.\"\"\"\n+    target_map_c = output_dir / 'target-newlib-syscall.c'\n+    old_lines_c = target_map_c.read_text().splitlines()\n+    start_i = end_i = None\n+    for i, line in enumerate(old_lines_c):\n+        if START_MARKER in line:\n+            start_i = i\n+        if END_MARKER in line:\n+            end_i = i\n+    assert start_i and end_i, f'{target_map_c}: Unable to find markers'\n+    new_lines_c = old_lines_c[0:start_i + 1]\n+    new_lines_c_end = old_lines_c[end_i:]\n+\n+    target_map_h = output_dir / 'target-newlib-syscall.h'\n+    old_lines_h = target_map_h.read_text().splitlines()\n+    start_i = end_i = None\n+    for i, line in enumerate(old_lines_h):\n+        if START_MARKER in line:\n+            start_i = i\n+        if END_MARKER in line:\n+            end_i = i\n+    assert start_i and end_i, f'{target_map_h}: Unable to find markers'\n+    new_lines_h = old_lines_h[0:start_i + 1]\n+    new_lines_h_end = old_lines_h[end_i:]\n+\n+    headers = ('syscall.h',)\n+    pattern = r'SYS_[_a-zA-Z0-9]*'\n+\n+    # Output the target-specific syscalls.\n     for target, subdir in sorted(TARGET_DIRS.items()):\n-        gentvals(output_dir, output, cpp, 'sys', newlib / subdir,\n-                 ('syscall.h',), r'SYS_[_a-zA-Z0-9]*', target=target)\n+        syms = extract_syms(cpp, newlib / subdir, headers, pattern)\n+        new_lines_c.append(f'CB_TARGET_DEFS_MAP cb_{target}_syscall_map[] = {{')\n+        new_lines_c.extend(\n+            f'#ifdef CB_{sym}\\n'\n+            '  { '\n+            f'\"{sym[4:]}\", CB_{sym}, TARGET_NEWLIB_{target.upper()}_{sym}'\n+            ' },\\n'\n+            '#endif' for sym in sorted(syms))\n+        new_lines_c.append('  {NULL, -1, -1},')\n+        new_lines_c.append('};\\n')\n+\n+        new_lines_h.append(\n+            f'extern CB_TARGET_DEFS_MAP cb_{target}_syscall_map[];')\n+        new_lines_h.extend(\n+            f'#define TARGET_NEWLIB_{target.upper()}_{sym} {val}'\n+            for sym, val in sorted(syms.items()))\n+        new_lines_h.append('')\n \n     # Then output the common syscall targets.\n-    gentvals(output_dir, output, cpp, 'sys', newlib / 'libgloss',\n-             ('syscall.h',), r'SYS_[_a-zA-Z0-9]*')\n+    syms = extract_syms(cpp, newlib / 'libgloss', headers, pattern)\n+    new_lines_c.append(f'CB_TARGET_DEFS_MAP cb_init_syscall_map[] = {{')\n+    new_lines_c.extend(\n+        f'#ifdef CB_{sym}\\n'\n+        f'  {{ \"{sym[4:]}\", CB_{sym}, TARGET_NEWLIB_{sym} }},\\n'\n+        f'#endif' for sym in sorted(syms))\n+    new_lines_c.append('  {NULL, -1, -1},')\n+    new_lines_c.append('};')\n+\n+    new_lines_h.append('extern CB_TARGET_DEFS_MAP cb_init_syscall_map[];')\n+    new_lines_h.extend(\n+        f'#define TARGET_NEWLIB_{sym} {val}'\n+        for sym, val in sorted(syms.items()))\n+\n+    new_lines_c.extend(new_lines_c_end)\n+    target_map_c.write_text('\\n'.join(new_lines_c) + '\\n')\n+\n+    new_lines_h.extend(new_lines_h_end)\n+    target_map_h.write_text('\\n'.join(new_lines_h) + '\\n')\n+\n+\n+def gen_targets(output_dir: Path, output: TextIO, newlib: Path, cpp: str):\n+    \"\"\"Generate the target-specific lists.\"\"\"\n+    gen_target_syscall(output_dir, newlib, cpp)\n \n \n def gen(output_dir: Path, output: TextIO, newlib: Path, cpp: str):"
    },
    {
      "sha": "a83b487f32d8c23fd7c801810694bce6466ae4c4",
      "filename": "sim/common/local.mk",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64ae70dde5bc8916800bbdb570d6281b700f7e84/sim/common/local.mk",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64ae70dde5bc8916800bbdb570d6281b700f7e84/sim/common/local.mk",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/local.mk?ref=64ae70dde5bc8916800bbdb570d6281b700f7e84",
      "patch": "@@ -40,6 +40,7 @@ noinst_LIBRARIES += %D%/libcommon.a\n \t%D%/target-newlib-errno.c \\\n \t%D%/target-newlib-open.c \\\n \t%D%/target-newlib-signal.c \\\n+\t%D%/target-newlib-syscall.c \\\n \t%D%/version.c\n \n %D%/version.c: %D%/version.c-stamp ; @true"
    },
    {
      "sha": "1617ee21b1f53d52d19ba944a5eff23eb679d12c",
      "filename": "sim/common/target-newlib-syscall.c",
      "status": "added",
      "additions": 634,
      "deletions": 0,
      "changes": 634,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64ae70dde5bc8916800bbdb570d6281b700f7e84/sim/common/target-newlib-syscall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64ae70dde5bc8916800bbdb570d6281b700f7e84/sim/common/target-newlib-syscall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/target-newlib-syscall.c?ref=64ae70dde5bc8916800bbdb570d6281b700f7e84",
      "patch": "@@ -0,0 +1,634 @@\n+/* Target syscall mappings for newlib/libgloss environment.\n+   Copyright 1995-2021 Free Software Foundation, Inc.\n+   Contributed by Mike Frysinger.\n+\n+   This file is part of simulators.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This must come before any other includes.  */\n+#include \"defs.h\"\n+\n+#include \"sim/callback.h\"\n+\n+#include \"target-newlib-syscall.h\"\n+\n+/* This file is kept up-to-date via the gennltvals.py script.  Do not edit\n+   anything between the START & END comment blocks below.  */\n+\n+  /* gennltvals: START */\n+CB_TARGET_DEFS_MAP cb_cr16_syscall_map[] = {\n+#ifdef CB_SYS_ARG\n+  { \"ARG\", CB_SYS_ARG, TARGET_NEWLIB_CR16_SYS_ARG },\n+#endif\n+#ifdef CB_SYS_chdir\n+  { \"chdir\", CB_SYS_chdir, TARGET_NEWLIB_CR16_SYS_chdir },\n+#endif\n+#ifdef CB_SYS_chmod\n+  { \"chmod\", CB_SYS_chmod, TARGET_NEWLIB_CR16_SYS_chmod },\n+#endif\n+#ifdef CB_SYS_chown\n+  { \"chown\", CB_SYS_chown, TARGET_NEWLIB_CR16_SYS_chown },\n+#endif\n+#ifdef CB_SYS_close\n+  { \"close\", CB_SYS_close, TARGET_NEWLIB_CR16_SYS_close },\n+#endif\n+#ifdef CB_SYS_create\n+  { \"create\", CB_SYS_create, TARGET_NEWLIB_CR16_SYS_create },\n+#endif\n+#ifdef CB_SYS_execv\n+  { \"execv\", CB_SYS_execv, TARGET_NEWLIB_CR16_SYS_execv },\n+#endif\n+#ifdef CB_SYS_execve\n+  { \"execve\", CB_SYS_execve, TARGET_NEWLIB_CR16_SYS_execve },\n+#endif\n+#ifdef CB_SYS_exit\n+  { \"exit\", CB_SYS_exit, TARGET_NEWLIB_CR16_SYS_exit },\n+#endif\n+#ifdef CB_SYS_fork\n+  { \"fork\", CB_SYS_fork, TARGET_NEWLIB_CR16_SYS_fork },\n+#endif\n+#ifdef CB_SYS_fstat\n+  { \"fstat\", CB_SYS_fstat, TARGET_NEWLIB_CR16_SYS_fstat },\n+#endif\n+#ifdef CB_SYS_getpid\n+  { \"getpid\", CB_SYS_getpid, TARGET_NEWLIB_CR16_SYS_getpid },\n+#endif\n+#ifdef CB_SYS_isatty\n+  { \"isatty\", CB_SYS_isatty, TARGET_NEWLIB_CR16_SYS_isatty },\n+#endif\n+#ifdef CB_SYS_kill\n+  { \"kill\", CB_SYS_kill, TARGET_NEWLIB_CR16_SYS_kill },\n+#endif\n+#ifdef CB_SYS_link\n+  { \"link\", CB_SYS_link, TARGET_NEWLIB_CR16_SYS_link },\n+#endif\n+#ifdef CB_SYS_lseek\n+  { \"lseek\", CB_SYS_lseek, TARGET_NEWLIB_CR16_SYS_lseek },\n+#endif\n+#ifdef CB_SYS_mknod\n+  { \"mknod\", CB_SYS_mknod, TARGET_NEWLIB_CR16_SYS_mknod },\n+#endif\n+#ifdef CB_SYS_open\n+  { \"open\", CB_SYS_open, TARGET_NEWLIB_CR16_SYS_open },\n+#endif\n+#ifdef CB_SYS_pipe\n+  { \"pipe\", CB_SYS_pipe, TARGET_NEWLIB_CR16_SYS_pipe },\n+#endif\n+#ifdef CB_SYS_read\n+  { \"read\", CB_SYS_read, TARGET_NEWLIB_CR16_SYS_read },\n+#endif\n+#ifdef CB_SYS_rename\n+  { \"rename\", CB_SYS_rename, TARGET_NEWLIB_CR16_SYS_rename },\n+#endif\n+#ifdef CB_SYS_stat\n+  { \"stat\", CB_SYS_stat, TARGET_NEWLIB_CR16_SYS_stat },\n+#endif\n+#ifdef CB_SYS_time\n+  { \"time\", CB_SYS_time, TARGET_NEWLIB_CR16_SYS_time },\n+#endif\n+#ifdef CB_SYS_unlink\n+  { \"unlink\", CB_SYS_unlink, TARGET_NEWLIB_CR16_SYS_unlink },\n+#endif\n+#ifdef CB_SYS_utime\n+  { \"utime\", CB_SYS_utime, TARGET_NEWLIB_CR16_SYS_utime },\n+#endif\n+#ifdef CB_SYS_wait\n+  { \"wait\", CB_SYS_wait, TARGET_NEWLIB_CR16_SYS_wait },\n+#endif\n+#ifdef CB_SYS_wait4\n+  { \"wait4\", CB_SYS_wait4, TARGET_NEWLIB_CR16_SYS_wait4 },\n+#endif\n+#ifdef CB_SYS_write\n+  { \"write\", CB_SYS_write, TARGET_NEWLIB_CR16_SYS_write },\n+#endif\n+  {NULL, -1, -1},\n+};\n+\n+CB_TARGET_DEFS_MAP cb_d10v_syscall_map[] = {\n+#ifdef CB_SYS_ARG\n+  { \"ARG\", CB_SYS_ARG, TARGET_NEWLIB_D10V_SYS_ARG },\n+#endif\n+#ifdef CB_SYS_chdir\n+  { \"chdir\", CB_SYS_chdir, TARGET_NEWLIB_D10V_SYS_chdir },\n+#endif\n+#ifdef CB_SYS_chmod\n+  { \"chmod\", CB_SYS_chmod, TARGET_NEWLIB_D10V_SYS_chmod },\n+#endif\n+#ifdef CB_SYS_chown\n+  { \"chown\", CB_SYS_chown, TARGET_NEWLIB_D10V_SYS_chown },\n+#endif\n+#ifdef CB_SYS_close\n+  { \"close\", CB_SYS_close, TARGET_NEWLIB_D10V_SYS_close },\n+#endif\n+#ifdef CB_SYS_creat\n+  { \"creat\", CB_SYS_creat, TARGET_NEWLIB_D10V_SYS_creat },\n+#endif\n+#ifdef CB_SYS_execv\n+  { \"execv\", CB_SYS_execv, TARGET_NEWLIB_D10V_SYS_execv },\n+#endif\n+#ifdef CB_SYS_execve\n+  { \"execve\", CB_SYS_execve, TARGET_NEWLIB_D10V_SYS_execve },\n+#endif\n+#ifdef CB_SYS_exit\n+  { \"exit\", CB_SYS_exit, TARGET_NEWLIB_D10V_SYS_exit },\n+#endif\n+#ifdef CB_SYS_fork\n+  { \"fork\", CB_SYS_fork, TARGET_NEWLIB_D10V_SYS_fork },\n+#endif\n+#ifdef CB_SYS_fstat\n+  { \"fstat\", CB_SYS_fstat, TARGET_NEWLIB_D10V_SYS_fstat },\n+#endif\n+#ifdef CB_SYS_getpid\n+  { \"getpid\", CB_SYS_getpid, TARGET_NEWLIB_D10V_SYS_getpid },\n+#endif\n+#ifdef CB_SYS_isatty\n+  { \"isatty\", CB_SYS_isatty, TARGET_NEWLIB_D10V_SYS_isatty },\n+#endif\n+#ifdef CB_SYS_kill\n+  { \"kill\", CB_SYS_kill, TARGET_NEWLIB_D10V_SYS_kill },\n+#endif\n+#ifdef CB_SYS_link\n+  { \"link\", CB_SYS_link, TARGET_NEWLIB_D10V_SYS_link },\n+#endif\n+#ifdef CB_SYS_lseek\n+  { \"lseek\", CB_SYS_lseek, TARGET_NEWLIB_D10V_SYS_lseek },\n+#endif\n+#ifdef CB_SYS_mknod\n+  { \"mknod\", CB_SYS_mknod, TARGET_NEWLIB_D10V_SYS_mknod },\n+#endif\n+#ifdef CB_SYS_open\n+  { \"open\", CB_SYS_open, TARGET_NEWLIB_D10V_SYS_open },\n+#endif\n+#ifdef CB_SYS_pipe\n+  { \"pipe\", CB_SYS_pipe, TARGET_NEWLIB_D10V_SYS_pipe },\n+#endif\n+#ifdef CB_SYS_read\n+  { \"read\", CB_SYS_read, TARGET_NEWLIB_D10V_SYS_read },\n+#endif\n+#ifdef CB_SYS_stat\n+  { \"stat\", CB_SYS_stat, TARGET_NEWLIB_D10V_SYS_stat },\n+#endif\n+#ifdef CB_SYS_time\n+  { \"time\", CB_SYS_time, TARGET_NEWLIB_D10V_SYS_time },\n+#endif\n+#ifdef CB_SYS_unlink\n+  { \"unlink\", CB_SYS_unlink, TARGET_NEWLIB_D10V_SYS_unlink },\n+#endif\n+#ifdef CB_SYS_utime\n+  { \"utime\", CB_SYS_utime, TARGET_NEWLIB_D10V_SYS_utime },\n+#endif\n+#ifdef CB_SYS_wait\n+  { \"wait\", CB_SYS_wait, TARGET_NEWLIB_D10V_SYS_wait },\n+#endif\n+#ifdef CB_SYS_wait4\n+  { \"wait4\", CB_SYS_wait4, TARGET_NEWLIB_D10V_SYS_wait4 },\n+#endif\n+#ifdef CB_SYS_write\n+  { \"write\", CB_SYS_write, TARGET_NEWLIB_D10V_SYS_write },\n+#endif\n+  {NULL, -1, -1},\n+};\n+\n+CB_TARGET_DEFS_MAP cb_mcore_syscall_map[] = {\n+#ifdef CB_SYS_access\n+  { \"access\", CB_SYS_access, TARGET_NEWLIB_MCORE_SYS_access },\n+#endif\n+#ifdef CB_SYS_close\n+  { \"close\", CB_SYS_close, TARGET_NEWLIB_MCORE_SYS_close },\n+#endif\n+#ifdef CB_SYS_creat\n+  { \"creat\", CB_SYS_creat, TARGET_NEWLIB_MCORE_SYS_creat },\n+#endif\n+#ifdef CB_SYS_link\n+  { \"link\", CB_SYS_link, TARGET_NEWLIB_MCORE_SYS_link },\n+#endif\n+#ifdef CB_SYS_lseek\n+  { \"lseek\", CB_SYS_lseek, TARGET_NEWLIB_MCORE_SYS_lseek },\n+#endif\n+#ifdef CB_SYS_open\n+  { \"open\", CB_SYS_open, TARGET_NEWLIB_MCORE_SYS_open },\n+#endif\n+#ifdef CB_SYS_read\n+  { \"read\", CB_SYS_read, TARGET_NEWLIB_MCORE_SYS_read },\n+#endif\n+#ifdef CB_SYS_time\n+  { \"time\", CB_SYS_time, TARGET_NEWLIB_MCORE_SYS_time },\n+#endif\n+#ifdef CB_SYS_times\n+  { \"times\", CB_SYS_times, TARGET_NEWLIB_MCORE_SYS_times },\n+#endif\n+#ifdef CB_SYS_unlink\n+  { \"unlink\", CB_SYS_unlink, TARGET_NEWLIB_MCORE_SYS_unlink },\n+#endif\n+#ifdef CB_SYS_write\n+  { \"write\", CB_SYS_write, TARGET_NEWLIB_MCORE_SYS_write },\n+#endif\n+  {NULL, -1, -1},\n+};\n+\n+CB_TARGET_DEFS_MAP cb_riscv_syscall_map[] = {\n+#ifdef CB_SYS_access\n+  { \"access\", CB_SYS_access, TARGET_NEWLIB_RISCV_SYS_access },\n+#endif\n+#ifdef CB_SYS_brk\n+  { \"brk\", CB_SYS_brk, TARGET_NEWLIB_RISCV_SYS_brk },\n+#endif\n+#ifdef CB_SYS_chdir\n+  { \"chdir\", CB_SYS_chdir, TARGET_NEWLIB_RISCV_SYS_chdir },\n+#endif\n+#ifdef CB_SYS_clock_gettime64\n+  { \"clock_gettime64\", CB_SYS_clock_gettime64, TARGET_NEWLIB_RISCV_SYS_clock_gettime64 },\n+#endif\n+#ifdef CB_SYS_close\n+  { \"close\", CB_SYS_close, TARGET_NEWLIB_RISCV_SYS_close },\n+#endif\n+#ifdef CB_SYS_dup\n+  { \"dup\", CB_SYS_dup, TARGET_NEWLIB_RISCV_SYS_dup },\n+#endif\n+#ifdef CB_SYS_exit\n+  { \"exit\", CB_SYS_exit, TARGET_NEWLIB_RISCV_SYS_exit },\n+#endif\n+#ifdef CB_SYS_exit_group\n+  { \"exit_group\", CB_SYS_exit_group, TARGET_NEWLIB_RISCV_SYS_exit_group },\n+#endif\n+#ifdef CB_SYS_faccessat\n+  { \"faccessat\", CB_SYS_faccessat, TARGET_NEWLIB_RISCV_SYS_faccessat },\n+#endif\n+#ifdef CB_SYS_fcntl\n+  { \"fcntl\", CB_SYS_fcntl, TARGET_NEWLIB_RISCV_SYS_fcntl },\n+#endif\n+#ifdef CB_SYS_fstat\n+  { \"fstat\", CB_SYS_fstat, TARGET_NEWLIB_RISCV_SYS_fstat },\n+#endif\n+#ifdef CB_SYS_fstatat\n+  { \"fstatat\", CB_SYS_fstatat, TARGET_NEWLIB_RISCV_SYS_fstatat },\n+#endif\n+#ifdef CB_SYS_getcwd\n+  { \"getcwd\", CB_SYS_getcwd, TARGET_NEWLIB_RISCV_SYS_getcwd },\n+#endif\n+#ifdef CB_SYS_getdents\n+  { \"getdents\", CB_SYS_getdents, TARGET_NEWLIB_RISCV_SYS_getdents },\n+#endif\n+#ifdef CB_SYS_getegid\n+  { \"getegid\", CB_SYS_getegid, TARGET_NEWLIB_RISCV_SYS_getegid },\n+#endif\n+#ifdef CB_SYS_geteuid\n+  { \"geteuid\", CB_SYS_geteuid, TARGET_NEWLIB_RISCV_SYS_geteuid },\n+#endif\n+#ifdef CB_SYS_getgid\n+  { \"getgid\", CB_SYS_getgid, TARGET_NEWLIB_RISCV_SYS_getgid },\n+#endif\n+#ifdef CB_SYS_getmainvars\n+  { \"getmainvars\", CB_SYS_getmainvars, TARGET_NEWLIB_RISCV_SYS_getmainvars },\n+#endif\n+#ifdef CB_SYS_getpid\n+  { \"getpid\", CB_SYS_getpid, TARGET_NEWLIB_RISCV_SYS_getpid },\n+#endif\n+#ifdef CB_SYS_gettimeofday\n+  { \"gettimeofday\", CB_SYS_gettimeofday, TARGET_NEWLIB_RISCV_SYS_gettimeofday },\n+#endif\n+#ifdef CB_SYS_getuid\n+  { \"getuid\", CB_SYS_getuid, TARGET_NEWLIB_RISCV_SYS_getuid },\n+#endif\n+#ifdef CB_SYS_kill\n+  { \"kill\", CB_SYS_kill, TARGET_NEWLIB_RISCV_SYS_kill },\n+#endif\n+#ifdef CB_SYS_link\n+  { \"link\", CB_SYS_link, TARGET_NEWLIB_RISCV_SYS_link },\n+#endif\n+#ifdef CB_SYS_lseek\n+  { \"lseek\", CB_SYS_lseek, TARGET_NEWLIB_RISCV_SYS_lseek },\n+#endif\n+#ifdef CB_SYS_lstat\n+  { \"lstat\", CB_SYS_lstat, TARGET_NEWLIB_RISCV_SYS_lstat },\n+#endif\n+#ifdef CB_SYS_mkdir\n+  { \"mkdir\", CB_SYS_mkdir, TARGET_NEWLIB_RISCV_SYS_mkdir },\n+#endif\n+#ifdef CB_SYS_mmap\n+  { \"mmap\", CB_SYS_mmap, TARGET_NEWLIB_RISCV_SYS_mmap },\n+#endif\n+#ifdef CB_SYS_mremap\n+  { \"mremap\", CB_SYS_mremap, TARGET_NEWLIB_RISCV_SYS_mremap },\n+#endif\n+#ifdef CB_SYS_munmap\n+  { \"munmap\", CB_SYS_munmap, TARGET_NEWLIB_RISCV_SYS_munmap },\n+#endif\n+#ifdef CB_SYS_open\n+  { \"open\", CB_SYS_open, TARGET_NEWLIB_RISCV_SYS_open },\n+#endif\n+#ifdef CB_SYS_openat\n+  { \"openat\", CB_SYS_openat, TARGET_NEWLIB_RISCV_SYS_openat },\n+#endif\n+#ifdef CB_SYS_pread\n+  { \"pread\", CB_SYS_pread, TARGET_NEWLIB_RISCV_SYS_pread },\n+#endif\n+#ifdef CB_SYS_pwrite\n+  { \"pwrite\", CB_SYS_pwrite, TARGET_NEWLIB_RISCV_SYS_pwrite },\n+#endif\n+#ifdef CB_SYS_read\n+  { \"read\", CB_SYS_read, TARGET_NEWLIB_RISCV_SYS_read },\n+#endif\n+#ifdef CB_SYS_rt_sigaction\n+  { \"rt_sigaction\", CB_SYS_rt_sigaction, TARGET_NEWLIB_RISCV_SYS_rt_sigaction },\n+#endif\n+#ifdef CB_SYS_stat\n+  { \"stat\", CB_SYS_stat, TARGET_NEWLIB_RISCV_SYS_stat },\n+#endif\n+#ifdef CB_SYS_time\n+  { \"time\", CB_SYS_time, TARGET_NEWLIB_RISCV_SYS_time },\n+#endif\n+#ifdef CB_SYS_times\n+  { \"times\", CB_SYS_times, TARGET_NEWLIB_RISCV_SYS_times },\n+#endif\n+#ifdef CB_SYS_uname\n+  { \"uname\", CB_SYS_uname, TARGET_NEWLIB_RISCV_SYS_uname },\n+#endif\n+#ifdef CB_SYS_unlink\n+  { \"unlink\", CB_SYS_unlink, TARGET_NEWLIB_RISCV_SYS_unlink },\n+#endif\n+#ifdef CB_SYS_write\n+  { \"write\", CB_SYS_write, TARGET_NEWLIB_RISCV_SYS_write },\n+#endif\n+#ifdef CB_SYS_writev\n+  { \"writev\", CB_SYS_writev, TARGET_NEWLIB_RISCV_SYS_writev },\n+#endif\n+  {NULL, -1, -1},\n+};\n+\n+CB_TARGET_DEFS_MAP cb_sh_syscall_map[] = {\n+#ifdef CB_SYS_ARG\n+  { \"ARG\", CB_SYS_ARG, TARGET_NEWLIB_SH_SYS_ARG },\n+#endif\n+#ifdef CB_SYS_argc\n+  { \"argc\", CB_SYS_argc, TARGET_NEWLIB_SH_SYS_argc },\n+#endif\n+#ifdef CB_SYS_argn\n+  { \"argn\", CB_SYS_argn, TARGET_NEWLIB_SH_SYS_argn },\n+#endif\n+#ifdef CB_SYS_argnlen\n+  { \"argnlen\", CB_SYS_argnlen, TARGET_NEWLIB_SH_SYS_argnlen },\n+#endif\n+#ifdef CB_SYS_chdir\n+  { \"chdir\", CB_SYS_chdir, TARGET_NEWLIB_SH_SYS_chdir },\n+#endif\n+#ifdef CB_SYS_chmod\n+  { \"chmod\", CB_SYS_chmod, TARGET_NEWLIB_SH_SYS_chmod },\n+#endif\n+#ifdef CB_SYS_chown\n+  { \"chown\", CB_SYS_chown, TARGET_NEWLIB_SH_SYS_chown },\n+#endif\n+#ifdef CB_SYS_close\n+  { \"close\", CB_SYS_close, TARGET_NEWLIB_SH_SYS_close },\n+#endif\n+#ifdef CB_SYS_creat\n+  { \"creat\", CB_SYS_creat, TARGET_NEWLIB_SH_SYS_creat },\n+#endif\n+#ifdef CB_SYS_execv\n+  { \"execv\", CB_SYS_execv, TARGET_NEWLIB_SH_SYS_execv },\n+#endif\n+#ifdef CB_SYS_execve\n+  { \"execve\", CB_SYS_execve, TARGET_NEWLIB_SH_SYS_execve },\n+#endif\n+#ifdef CB_SYS_exit\n+  { \"exit\", CB_SYS_exit, TARGET_NEWLIB_SH_SYS_exit },\n+#endif\n+#ifdef CB_SYS_fork\n+  { \"fork\", CB_SYS_fork, TARGET_NEWLIB_SH_SYS_fork },\n+#endif\n+#ifdef CB_SYS_fstat\n+  { \"fstat\", CB_SYS_fstat, TARGET_NEWLIB_SH_SYS_fstat },\n+#endif\n+#ifdef CB_SYS_ftruncate\n+  { \"ftruncate\", CB_SYS_ftruncate, TARGET_NEWLIB_SH_SYS_ftruncate },\n+#endif\n+#ifdef CB_SYS_getpid\n+  { \"getpid\", CB_SYS_getpid, TARGET_NEWLIB_SH_SYS_getpid },\n+#endif\n+#ifdef CB_SYS_isatty\n+  { \"isatty\", CB_SYS_isatty, TARGET_NEWLIB_SH_SYS_isatty },\n+#endif\n+#ifdef CB_SYS_link\n+  { \"link\", CB_SYS_link, TARGET_NEWLIB_SH_SYS_link },\n+#endif\n+#ifdef CB_SYS_lseek\n+  { \"lseek\", CB_SYS_lseek, TARGET_NEWLIB_SH_SYS_lseek },\n+#endif\n+#ifdef CB_SYS_mknod\n+  { \"mknod\", CB_SYS_mknod, TARGET_NEWLIB_SH_SYS_mknod },\n+#endif\n+#ifdef CB_SYS_open\n+  { \"open\", CB_SYS_open, TARGET_NEWLIB_SH_SYS_open },\n+#endif\n+#ifdef CB_SYS_pipe\n+  { \"pipe\", CB_SYS_pipe, TARGET_NEWLIB_SH_SYS_pipe },\n+#endif\n+#ifdef CB_SYS_read\n+  { \"read\", CB_SYS_read, TARGET_NEWLIB_SH_SYS_read },\n+#endif\n+#ifdef CB_SYS_stat\n+  { \"stat\", CB_SYS_stat, TARGET_NEWLIB_SH_SYS_stat },\n+#endif\n+#ifdef CB_SYS_time\n+  { \"time\", CB_SYS_time, TARGET_NEWLIB_SH_SYS_time },\n+#endif\n+#ifdef CB_SYS_truncate\n+  { \"truncate\", CB_SYS_truncate, TARGET_NEWLIB_SH_SYS_truncate },\n+#endif\n+#ifdef CB_SYS_unlink\n+  { \"unlink\", CB_SYS_unlink, TARGET_NEWLIB_SH_SYS_unlink },\n+#endif\n+#ifdef CB_SYS_utime\n+  { \"utime\", CB_SYS_utime, TARGET_NEWLIB_SH_SYS_utime },\n+#endif\n+#ifdef CB_SYS_wait\n+  { \"wait\", CB_SYS_wait, TARGET_NEWLIB_SH_SYS_wait },\n+#endif\n+#ifdef CB_SYS_wait4\n+  { \"wait4\", CB_SYS_wait4, TARGET_NEWLIB_SH_SYS_wait4 },\n+#endif\n+#ifdef CB_SYS_write\n+  { \"write\", CB_SYS_write, TARGET_NEWLIB_SH_SYS_write },\n+#endif\n+  {NULL, -1, -1},\n+};\n+\n+CB_TARGET_DEFS_MAP cb_v850_syscall_map[] = {\n+#ifdef CB_SYS_ARG\n+  { \"ARG\", CB_SYS_ARG, TARGET_NEWLIB_V850_SYS_ARG },\n+#endif\n+#ifdef CB_SYS_chdir\n+  { \"chdir\", CB_SYS_chdir, TARGET_NEWLIB_V850_SYS_chdir },\n+#endif\n+#ifdef CB_SYS_chmod\n+  { \"chmod\", CB_SYS_chmod, TARGET_NEWLIB_V850_SYS_chmod },\n+#endif\n+#ifdef CB_SYS_chown\n+  { \"chown\", CB_SYS_chown, TARGET_NEWLIB_V850_SYS_chown },\n+#endif\n+#ifdef CB_SYS_close\n+  { \"close\", CB_SYS_close, TARGET_NEWLIB_V850_SYS_close },\n+#endif\n+#ifdef CB_SYS_creat\n+  { \"creat\", CB_SYS_creat, TARGET_NEWLIB_V850_SYS_creat },\n+#endif\n+#ifdef CB_SYS_execv\n+  { \"execv\", CB_SYS_execv, TARGET_NEWLIB_V850_SYS_execv },\n+#endif\n+#ifdef CB_SYS_execve\n+  { \"execve\", CB_SYS_execve, TARGET_NEWLIB_V850_SYS_execve },\n+#endif\n+#ifdef CB_SYS_exit\n+  { \"exit\", CB_SYS_exit, TARGET_NEWLIB_V850_SYS_exit },\n+#endif\n+#ifdef CB_SYS_fork\n+  { \"fork\", CB_SYS_fork, TARGET_NEWLIB_V850_SYS_fork },\n+#endif\n+#ifdef CB_SYS_fstat\n+  { \"fstat\", CB_SYS_fstat, TARGET_NEWLIB_V850_SYS_fstat },\n+#endif\n+#ifdef CB_SYS_getpid\n+  { \"getpid\", CB_SYS_getpid, TARGET_NEWLIB_V850_SYS_getpid },\n+#endif\n+#ifdef CB_SYS_gettimeofday\n+  { \"gettimeofday\", CB_SYS_gettimeofday, TARGET_NEWLIB_V850_SYS_gettimeofday },\n+#endif\n+#ifdef CB_SYS_isatty\n+  { \"isatty\", CB_SYS_isatty, TARGET_NEWLIB_V850_SYS_isatty },\n+#endif\n+#ifdef CB_SYS_link\n+  { \"link\", CB_SYS_link, TARGET_NEWLIB_V850_SYS_link },\n+#endif\n+#ifdef CB_SYS_lseek\n+  { \"lseek\", CB_SYS_lseek, TARGET_NEWLIB_V850_SYS_lseek },\n+#endif\n+#ifdef CB_SYS_mknod\n+  { \"mknod\", CB_SYS_mknod, TARGET_NEWLIB_V850_SYS_mknod },\n+#endif\n+#ifdef CB_SYS_open\n+  { \"open\", CB_SYS_open, TARGET_NEWLIB_V850_SYS_open },\n+#endif\n+#ifdef CB_SYS_pipe\n+  { \"pipe\", CB_SYS_pipe, TARGET_NEWLIB_V850_SYS_pipe },\n+#endif\n+#ifdef CB_SYS_read\n+  { \"read\", CB_SYS_read, TARGET_NEWLIB_V850_SYS_read },\n+#endif\n+#ifdef CB_SYS_rename\n+  { \"rename\", CB_SYS_rename, TARGET_NEWLIB_V850_SYS_rename },\n+#endif\n+#ifdef CB_SYS_stat\n+  { \"stat\", CB_SYS_stat, TARGET_NEWLIB_V850_SYS_stat },\n+#endif\n+#ifdef CB_SYS_time\n+  { \"time\", CB_SYS_time, TARGET_NEWLIB_V850_SYS_time },\n+#endif\n+#ifdef CB_SYS_times\n+  { \"times\", CB_SYS_times, TARGET_NEWLIB_V850_SYS_times },\n+#endif\n+#ifdef CB_SYS_unlink\n+  { \"unlink\", CB_SYS_unlink, TARGET_NEWLIB_V850_SYS_unlink },\n+#endif\n+#ifdef CB_SYS_utime\n+  { \"utime\", CB_SYS_utime, TARGET_NEWLIB_V850_SYS_utime },\n+#endif\n+#ifdef CB_SYS_wait\n+  { \"wait\", CB_SYS_wait, TARGET_NEWLIB_V850_SYS_wait },\n+#endif\n+#ifdef CB_SYS_wait4\n+  { \"wait4\", CB_SYS_wait4, TARGET_NEWLIB_V850_SYS_wait4 },\n+#endif\n+#ifdef CB_SYS_write\n+  { \"write\", CB_SYS_write, TARGET_NEWLIB_V850_SYS_write },\n+#endif\n+  {NULL, -1, -1},\n+};\n+\n+CB_TARGET_DEFS_MAP cb_init_syscall_map[] = {\n+#ifdef CB_SYS_argc\n+  { \"argc\", CB_SYS_argc, TARGET_NEWLIB_SYS_argc },\n+#endif\n+#ifdef CB_SYS_argn\n+  { \"argn\", CB_SYS_argn, TARGET_NEWLIB_SYS_argn },\n+#endif\n+#ifdef CB_SYS_argnlen\n+  { \"argnlen\", CB_SYS_argnlen, TARGET_NEWLIB_SYS_argnlen },\n+#endif\n+#ifdef CB_SYS_argv\n+  { \"argv\", CB_SYS_argv, TARGET_NEWLIB_SYS_argv },\n+#endif\n+#ifdef CB_SYS_argvlen\n+  { \"argvlen\", CB_SYS_argvlen, TARGET_NEWLIB_SYS_argvlen },\n+#endif\n+#ifdef CB_SYS_chdir\n+  { \"chdir\", CB_SYS_chdir, TARGET_NEWLIB_SYS_chdir },\n+#endif\n+#ifdef CB_SYS_chmod\n+  { \"chmod\", CB_SYS_chmod, TARGET_NEWLIB_SYS_chmod },\n+#endif\n+#ifdef CB_SYS_close\n+  { \"close\", CB_SYS_close, TARGET_NEWLIB_SYS_close },\n+#endif\n+#ifdef CB_SYS_exit\n+  { \"exit\", CB_SYS_exit, TARGET_NEWLIB_SYS_exit },\n+#endif\n+#ifdef CB_SYS_fstat\n+  { \"fstat\", CB_SYS_fstat, TARGET_NEWLIB_SYS_fstat },\n+#endif\n+#ifdef CB_SYS_getpid\n+  { \"getpid\", CB_SYS_getpid, TARGET_NEWLIB_SYS_getpid },\n+#endif\n+#ifdef CB_SYS_gettimeofday\n+  { \"gettimeofday\", CB_SYS_gettimeofday, TARGET_NEWLIB_SYS_gettimeofday },\n+#endif\n+#ifdef CB_SYS_kill\n+  { \"kill\", CB_SYS_kill, TARGET_NEWLIB_SYS_kill },\n+#endif\n+#ifdef CB_SYS_link\n+  { \"link\", CB_SYS_link, TARGET_NEWLIB_SYS_link },\n+#endif\n+#ifdef CB_SYS_lseek\n+  { \"lseek\", CB_SYS_lseek, TARGET_NEWLIB_SYS_lseek },\n+#endif\n+#ifdef CB_SYS_open\n+  { \"open\", CB_SYS_open, TARGET_NEWLIB_SYS_open },\n+#endif\n+#ifdef CB_SYS_read\n+  { \"read\", CB_SYS_read, TARGET_NEWLIB_SYS_read },\n+#endif\n+#ifdef CB_SYS_reconfig\n+  { \"reconfig\", CB_SYS_reconfig, TARGET_NEWLIB_SYS_reconfig },\n+#endif\n+#ifdef CB_SYS_stat\n+  { \"stat\", CB_SYS_stat, TARGET_NEWLIB_SYS_stat },\n+#endif\n+#ifdef CB_SYS_time\n+  { \"time\", CB_SYS_time, TARGET_NEWLIB_SYS_time },\n+#endif\n+#ifdef CB_SYS_times\n+  { \"times\", CB_SYS_times, TARGET_NEWLIB_SYS_times },\n+#endif\n+#ifdef CB_SYS_unlink\n+  { \"unlink\", CB_SYS_unlink, TARGET_NEWLIB_SYS_unlink },\n+#endif\n+#ifdef CB_SYS_utime\n+  { \"utime\", CB_SYS_utime, TARGET_NEWLIB_SYS_utime },\n+#endif\n+#ifdef CB_SYS_write\n+  { \"write\", CB_SYS_write, TARGET_NEWLIB_SYS_write },\n+#endif\n+  {NULL, -1, -1},\n+};\n+  /* gennltvals: END */"
    },
    {
      "sha": "fed9da5985b8f4dec2829f3745e1e3652c9ffdc9",
      "filename": "sim/common/target-newlib-syscall.h",
      "status": "added",
      "additions": 237,
      "deletions": 0,
      "changes": 237,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64ae70dde5bc8916800bbdb570d6281b700f7e84/sim/common/target-newlib-syscall.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64ae70dde5bc8916800bbdb570d6281b700f7e84/sim/common/target-newlib-syscall.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/target-newlib-syscall.h?ref=64ae70dde5bc8916800bbdb570d6281b700f7e84",
      "patch": "@@ -0,0 +1,237 @@\n+/* Target syscall mappings for newlib/libgloss environment.\n+   Copyright 1995-2021 Free Software Foundation, Inc.\n+   Contributed by Mike Frysinger.\n+\n+   This file is part of simulators.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef TARGET_NEWLIB_SYSCALL_H\n+#define TARGET_NEWLIB_SYSCALL_H\n+\n+/* For CB_TARGET_DEFS_MAP.  */\n+#include \"sim/callback.h\"\n+\n+/* This file is kept up-to-date via the gennltvals.py script.  Do not edit\n+   anything between the START & END comment blocks below.  */\n+\n+  /* gennltvals: START */\n+extern CB_TARGET_DEFS_MAP cb_cr16_syscall_map[];\n+#define TARGET_NEWLIB_CR16_SYS_ARG 24\n+#define TARGET_NEWLIB_CR16_SYS_chdir 12\n+#define TARGET_NEWLIB_CR16_SYS_chmod 15\n+#define TARGET_NEWLIB_CR16_SYS_chown 16\n+#define TARGET_NEWLIB_CR16_SYS_close 0x402\n+#define TARGET_NEWLIB_CR16_SYS_create 8\n+#define TARGET_NEWLIB_CR16_SYS_execv 11\n+#define TARGET_NEWLIB_CR16_SYS_execve 59\n+#define TARGET_NEWLIB_CR16_SYS_exit 0x410\n+#define TARGET_NEWLIB_CR16_SYS_fork 2\n+#define TARGET_NEWLIB_CR16_SYS_fstat 22\n+#define TARGET_NEWLIB_CR16_SYS_getpid 20\n+#define TARGET_NEWLIB_CR16_SYS_isatty 21\n+#define TARGET_NEWLIB_CR16_SYS_kill 60\n+#define TARGET_NEWLIB_CR16_SYS_link 9\n+#define TARGET_NEWLIB_CR16_SYS_lseek 0x405\n+#define TARGET_NEWLIB_CR16_SYS_mknod 14\n+#define TARGET_NEWLIB_CR16_SYS_open 0x401\n+#define TARGET_NEWLIB_CR16_SYS_pipe 42\n+#define TARGET_NEWLIB_CR16_SYS_read 0x403\n+#define TARGET_NEWLIB_CR16_SYS_rename 0x406\n+#define TARGET_NEWLIB_CR16_SYS_stat 38\n+#define TARGET_NEWLIB_CR16_SYS_time 0x300\n+#define TARGET_NEWLIB_CR16_SYS_unlink 0x407\n+#define TARGET_NEWLIB_CR16_SYS_utime 201\n+#define TARGET_NEWLIB_CR16_SYS_wait 202\n+#define TARGET_NEWLIB_CR16_SYS_wait4 7\n+#define TARGET_NEWLIB_CR16_SYS_write 0x404\n+\n+extern CB_TARGET_DEFS_MAP cb_d10v_syscall_map[];\n+#define TARGET_NEWLIB_D10V_SYS_ARG 24\n+#define TARGET_NEWLIB_D10V_SYS_chdir 12\n+#define TARGET_NEWLIB_D10V_SYS_chmod 15\n+#define TARGET_NEWLIB_D10V_SYS_chown 16\n+#define TARGET_NEWLIB_D10V_SYS_close 6\n+#define TARGET_NEWLIB_D10V_SYS_creat 8\n+#define TARGET_NEWLIB_D10V_SYS_execv 11\n+#define TARGET_NEWLIB_D10V_SYS_execve 59\n+#define TARGET_NEWLIB_D10V_SYS_exit 1\n+#define TARGET_NEWLIB_D10V_SYS_fork 2\n+#define TARGET_NEWLIB_D10V_SYS_fstat 22\n+#define TARGET_NEWLIB_D10V_SYS_getpid 20\n+#define TARGET_NEWLIB_D10V_SYS_isatty 21\n+#define TARGET_NEWLIB_D10V_SYS_kill 60\n+#define TARGET_NEWLIB_D10V_SYS_link 9\n+#define TARGET_NEWLIB_D10V_SYS_lseek 19\n+#define TARGET_NEWLIB_D10V_SYS_mknod 14\n+#define TARGET_NEWLIB_D10V_SYS_open 5\n+#define TARGET_NEWLIB_D10V_SYS_pipe 42\n+#define TARGET_NEWLIB_D10V_SYS_read 3\n+#define TARGET_NEWLIB_D10V_SYS_stat 38\n+#define TARGET_NEWLIB_D10V_SYS_time 23\n+#define TARGET_NEWLIB_D10V_SYS_unlink 10\n+#define TARGET_NEWLIB_D10V_SYS_utime 201\n+#define TARGET_NEWLIB_D10V_SYS_wait 202\n+#define TARGET_NEWLIB_D10V_SYS_wait4 7\n+#define TARGET_NEWLIB_D10V_SYS_write 4\n+\n+extern CB_TARGET_DEFS_MAP cb_mcore_syscall_map[];\n+#define TARGET_NEWLIB_MCORE_SYS_access 33\n+#define TARGET_NEWLIB_MCORE_SYS_close 6\n+#define TARGET_NEWLIB_MCORE_SYS_creat 8\n+#define TARGET_NEWLIB_MCORE_SYS_link 9\n+#define TARGET_NEWLIB_MCORE_SYS_lseek 19\n+#define TARGET_NEWLIB_MCORE_SYS_open 5\n+#define TARGET_NEWLIB_MCORE_SYS_read 3\n+#define TARGET_NEWLIB_MCORE_SYS_time 13\n+#define TARGET_NEWLIB_MCORE_SYS_times 43\n+#define TARGET_NEWLIB_MCORE_SYS_unlink 10\n+#define TARGET_NEWLIB_MCORE_SYS_write 4\n+\n+extern CB_TARGET_DEFS_MAP cb_riscv_syscall_map[];\n+#define TARGET_NEWLIB_RISCV_SYS_access 1033\n+#define TARGET_NEWLIB_RISCV_SYS_brk 214\n+#define TARGET_NEWLIB_RISCV_SYS_chdir 49\n+#define TARGET_NEWLIB_RISCV_SYS_clock_gettime64 403\n+#define TARGET_NEWLIB_RISCV_SYS_close 57\n+#define TARGET_NEWLIB_RISCV_SYS_dup 23\n+#define TARGET_NEWLIB_RISCV_SYS_exit 93\n+#define TARGET_NEWLIB_RISCV_SYS_exit_group 94\n+#define TARGET_NEWLIB_RISCV_SYS_faccessat 48\n+#define TARGET_NEWLIB_RISCV_SYS_fcntl 25\n+#define TARGET_NEWLIB_RISCV_SYS_fstat 80\n+#define TARGET_NEWLIB_RISCV_SYS_fstatat 79\n+#define TARGET_NEWLIB_RISCV_SYS_getcwd 17\n+#define TARGET_NEWLIB_RISCV_SYS_getdents 61\n+#define TARGET_NEWLIB_RISCV_SYS_getegid 177\n+#define TARGET_NEWLIB_RISCV_SYS_geteuid 175\n+#define TARGET_NEWLIB_RISCV_SYS_getgid 176\n+#define TARGET_NEWLIB_RISCV_SYS_getmainvars 2011\n+#define TARGET_NEWLIB_RISCV_SYS_getpid 172\n+#define TARGET_NEWLIB_RISCV_SYS_gettimeofday 169\n+#define TARGET_NEWLIB_RISCV_SYS_getuid 174\n+#define TARGET_NEWLIB_RISCV_SYS_kill 129\n+#define TARGET_NEWLIB_RISCV_SYS_link 1025\n+#define TARGET_NEWLIB_RISCV_SYS_lseek 62\n+#define TARGET_NEWLIB_RISCV_SYS_lstat 1039\n+#define TARGET_NEWLIB_RISCV_SYS_mkdir 1030\n+#define TARGET_NEWLIB_RISCV_SYS_mmap 222\n+#define TARGET_NEWLIB_RISCV_SYS_mremap 216\n+#define TARGET_NEWLIB_RISCV_SYS_munmap 215\n+#define TARGET_NEWLIB_RISCV_SYS_open 1024\n+#define TARGET_NEWLIB_RISCV_SYS_openat 56\n+#define TARGET_NEWLIB_RISCV_SYS_pread 67\n+#define TARGET_NEWLIB_RISCV_SYS_pwrite 68\n+#define TARGET_NEWLIB_RISCV_SYS_read 63\n+#define TARGET_NEWLIB_RISCV_SYS_rt_sigaction 134\n+#define TARGET_NEWLIB_RISCV_SYS_stat 1038\n+#define TARGET_NEWLIB_RISCV_SYS_time 1062\n+#define TARGET_NEWLIB_RISCV_SYS_times 153\n+#define TARGET_NEWLIB_RISCV_SYS_uname 160\n+#define TARGET_NEWLIB_RISCV_SYS_unlink 1026\n+#define TARGET_NEWLIB_RISCV_SYS_write 64\n+#define TARGET_NEWLIB_RISCV_SYS_writev 66\n+\n+extern CB_TARGET_DEFS_MAP cb_sh_syscall_map[];\n+#define TARGET_NEWLIB_SH_SYS_ARG 24\n+#define TARGET_NEWLIB_SH_SYS_argc 172\n+#define TARGET_NEWLIB_SH_SYS_argn 174\n+#define TARGET_NEWLIB_SH_SYS_argnlen 173\n+#define TARGET_NEWLIB_SH_SYS_chdir 12\n+#define TARGET_NEWLIB_SH_SYS_chmod 15\n+#define TARGET_NEWLIB_SH_SYS_chown 16\n+#define TARGET_NEWLIB_SH_SYS_close 6\n+#define TARGET_NEWLIB_SH_SYS_creat 8\n+#define TARGET_NEWLIB_SH_SYS_execv 11\n+#define TARGET_NEWLIB_SH_SYS_execve 59\n+#define TARGET_NEWLIB_SH_SYS_exit 1\n+#define TARGET_NEWLIB_SH_SYS_fork 2\n+#define TARGET_NEWLIB_SH_SYS_fstat 22\n+#define TARGET_NEWLIB_SH_SYS_ftruncate 130\n+#define TARGET_NEWLIB_SH_SYS_getpid 20\n+#define TARGET_NEWLIB_SH_SYS_isatty 21\n+#define TARGET_NEWLIB_SH_SYS_link 9\n+#define TARGET_NEWLIB_SH_SYS_lseek 19\n+#define TARGET_NEWLIB_SH_SYS_mknod 14\n+#define TARGET_NEWLIB_SH_SYS_open 5\n+#define TARGET_NEWLIB_SH_SYS_pipe 42\n+#define TARGET_NEWLIB_SH_SYS_read 3\n+#define TARGET_NEWLIB_SH_SYS_stat 38\n+#define TARGET_NEWLIB_SH_SYS_time 23\n+#define TARGET_NEWLIB_SH_SYS_truncate 129\n+#define TARGET_NEWLIB_SH_SYS_unlink 10\n+#define TARGET_NEWLIB_SH_SYS_utime 201\n+#define TARGET_NEWLIB_SH_SYS_wait 202\n+#define TARGET_NEWLIB_SH_SYS_wait4 7\n+#define TARGET_NEWLIB_SH_SYS_write 4\n+\n+extern CB_TARGET_DEFS_MAP cb_v850_syscall_map[];\n+#define TARGET_NEWLIB_V850_SYS_ARG 24\n+#define TARGET_NEWLIB_V850_SYS_chdir 12\n+#define TARGET_NEWLIB_V850_SYS_chmod 15\n+#define TARGET_NEWLIB_V850_SYS_chown 16\n+#define TARGET_NEWLIB_V850_SYS_close 6\n+#define TARGET_NEWLIB_V850_SYS_creat 8\n+#define TARGET_NEWLIB_V850_SYS_execv 11\n+#define TARGET_NEWLIB_V850_SYS_execve 59\n+#define TARGET_NEWLIB_V850_SYS_exit 1\n+#define TARGET_NEWLIB_V850_SYS_fork 2\n+#define TARGET_NEWLIB_V850_SYS_fstat 22\n+#define TARGET_NEWLIB_V850_SYS_getpid 20\n+#define TARGET_NEWLIB_V850_SYS_gettimeofday 116\n+#define TARGET_NEWLIB_V850_SYS_isatty 21\n+#define TARGET_NEWLIB_V850_SYS_link 9\n+#define TARGET_NEWLIB_V850_SYS_lseek 19\n+#define TARGET_NEWLIB_V850_SYS_mknod 14\n+#define TARGET_NEWLIB_V850_SYS_open 5\n+#define TARGET_NEWLIB_V850_SYS_pipe 42\n+#define TARGET_NEWLIB_V850_SYS_read 3\n+#define TARGET_NEWLIB_V850_SYS_rename 134\n+#define TARGET_NEWLIB_V850_SYS_stat 38\n+#define TARGET_NEWLIB_V850_SYS_time 23\n+#define TARGET_NEWLIB_V850_SYS_times 43\n+#define TARGET_NEWLIB_V850_SYS_unlink 10\n+#define TARGET_NEWLIB_V850_SYS_utime 201\n+#define TARGET_NEWLIB_V850_SYS_wait 202\n+#define TARGET_NEWLIB_V850_SYS_wait4 7\n+#define TARGET_NEWLIB_V850_SYS_write 4\n+\n+extern CB_TARGET_DEFS_MAP cb_init_syscall_map[];\n+#define TARGET_NEWLIB_SYS_argc 22\n+#define TARGET_NEWLIB_SYS_argn 24\n+#define TARGET_NEWLIB_SYS_argnlen 23\n+#define TARGET_NEWLIB_SYS_argv 13\n+#define TARGET_NEWLIB_SYS_argvlen 12\n+#define TARGET_NEWLIB_SYS_chdir 14\n+#define TARGET_NEWLIB_SYS_chmod 16\n+#define TARGET_NEWLIB_SYS_close 3\n+#define TARGET_NEWLIB_SYS_exit 1\n+#define TARGET_NEWLIB_SYS_fstat 10\n+#define TARGET_NEWLIB_SYS_getpid 8\n+#define TARGET_NEWLIB_SYS_gettimeofday 19\n+#define TARGET_NEWLIB_SYS_kill 9\n+#define TARGET_NEWLIB_SYS_link 21\n+#define TARGET_NEWLIB_SYS_lseek 6\n+#define TARGET_NEWLIB_SYS_open 2\n+#define TARGET_NEWLIB_SYS_read 4\n+#define TARGET_NEWLIB_SYS_reconfig 25\n+#define TARGET_NEWLIB_SYS_stat 15\n+#define TARGET_NEWLIB_SYS_time 18\n+#define TARGET_NEWLIB_SYS_times 20\n+#define TARGET_NEWLIB_SYS_unlink 7\n+#define TARGET_NEWLIB_SYS_utime 17\n+#define TARGET_NEWLIB_SYS_write 5\n+  /* gennltvals: END */\n+\n+#endif"
    },
    {
      "sha": "33d7df953b598b8f43c7c2050bcf478b619aba6d",
      "filename": "sim/ppc/Makefile.in",
      "status": "modified",
      "additions": 4,
      "deletions": 32,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64ae70dde5bc8916800bbdb570d6281b700f7e84/sim/ppc/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64ae70dde5bc8916800bbdb570d6281b700f7e84/sim/ppc/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/Makefile.in?ref=64ae70dde5bc8916800bbdb570d6281b700f7e84",
      "patch": "@@ -411,9 +411,6 @@ SUPPORT_H = \\\n         support.h \\\n         support.c\n \n-TARG_VALS_H = \\\n-        targ-vals.h\n-\n INLINE = \\\n \tinline.h \\\n \tinline.c\n@@ -429,8 +426,7 @@ BUILT_SRC_WO_CONFIG = \\\n \tsupport.h support.c \\\n \tpk.h \\\n \thw.h hw.c \\\n-\tfilter_host.c \\\n-\ttarg-vals.h targ-map.c targ-vals.def\n+\tfilter_host.c\n \n BUILT_SRC = \\\n \t$(BUILT_SRC_WO_CONFIG) \\\n@@ -473,6 +469,7 @@ COMMON_OBJS_NAMES = \\\n \ttarget-newlib-errno.o \\\n \ttarget-newlib-open.o \\\n \ttarget-newlib-signal.o \\\n+\ttarget-newlib-syscall.o \\\n \tversion.o\n COMMON_OBJS = $(COMMON_OBJS_NAMES:%=../common/common_libcommon_a-%)\n \n@@ -515,7 +512,7 @@ LIB_OBJ = \\\n \toptions.o\n \n \n-GDB_OBJ = gdb-sim.o sim_calls.o targ-map.o\n+GDB_OBJ = gdb-sim.o sim_calls.o\n \n HW_SRC = @sim_hw_src@\n HW_OBJ = @sim_hw_obj@\n@@ -598,30 +595,6 @@ itable.o: itable.c $(ITABLE_H)\n \n mon.o: mon.c $(BASICS_H) $(CPU_H) $(MON_H)\n \n-# GDB after 4.16 expects the default_callback structure to be setup.\n-# As a kludge, build the common stuff here for now.\n-gentmap: $(srcdir)/../common/gentmap.c Makefile targ-vals.def\n-\t$(ECHO_CCLD) $(LINK_FOR_BUILD) -I. -I../common -I$(srcdir)/../common \\\n-\t\t$(srcdir)/../common/gentmap.c -DUSE_CONFIG_H\n-\n-targ-vals.def: $(srcdir)/../common/nltvals.def\n-\t$(ECHO_GEN) cat $(srcdir)/../common/nltvals.def > tmp-vals.def\n-\t$(SILENCE) $(SHELL) $(srcroot)/move-if-change tmp-vals.def targ-vals.def\n-\n-targ-vals.h: stamp-vals ; @true\n-stamp-vals: Makefile gentmap $(srcroot)/move-if-change\n-\t$(ECHO_GEN) ./gentmap -h > tmp-vals.h\n-\t$(SILENCE) $(SHELL) $(srcroot)/move-if-change tmp-vals.h targ-vals.h\n-\t$(SILENCE) touch $@\n-\n-targ-map.c: stamp-map; @true\n-stamp-map: Makefile gentmap $(srcroot)/move-if-change\n-\t$(ECHO_GEN) ./gentmap -c > tmp-map.c\n-\t$(SILENCE) $(SHELL) $(srcroot)/move-if-change tmp-map.c targ-map.c\n-\t$(SILENCE) touch $@\n-\n-targ-map.o: targ-map.c $(ANSIDECL_H) $(GDB_CALLBACK_H) $(TARG_VALS_H)\n-\n sim-fpu.o: $(srcdir)/../common/sim-fpu.c $(CONFIG_H)\n \t$(ECHO_CC) $(CC) -c $(STD_CFLAGS) -DHAVE_CONFIG_H $(srcdir)/../common/sim-fpu.c \n \n@@ -838,8 +811,7 @@ TAGS: $(BUILT_SRC)\n \tetags $(srcdir)/*.h $(srcdir)/*.c $(BUILT_SRC)\n \n clean mostlyclean:\n-\trm -f tmp-* *.[oasi] core psim$(EXEEXT) run$(EXEEXT) igen dgen $(BUILT_SRC_WO_CONFIG) gentmap\n-\trm -f stamp-vals targ-vals.h stamp-map targ-map.c\n+\trm -f tmp-* *.[oasi] core psim$(EXEEXT) run$(EXEEXT) igen dgen $(BUILT_SRC_WO_CONFIG)\n \n distclean realclean: clean\n \trm -f TAGS Makefile config.cache config.status config.h defines.h stamp-h config.log"
    }
  ]
}