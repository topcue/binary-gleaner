{
  "sha": "7def77a1cf6bfd9d3640701dc3414feb0034a858",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2RlZjc3YTFjZjZiZmQ5ZDM2NDA3MDFkYzM0MTRmZWIwMDM0YTg1OA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-12-04T21:43:54Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-12-04T21:43:54Z"
    },
    "message": "gdb: rename displaced_step_fixup to displaced_step_finish\n\nThis is a preparatory patch to reduce a little bit the diff size of the\nmain patch later in this series.  It renames the displaced_step_fixup\nfunction in infrun.c to displaced_step_finish.\n\nThe rationale is to better differentiate the low and high level\noperations.\n\nWe first have the low level operation of writing an instruction to a\ndisplaced buffer, called \"copy_insn\".  The mirror low level operation to\nfix up the state after having executed the instruction is \"fixup\".  The\nhigh level operation of preparing a thread for a displaced step (which\nincludes doing the \"copy_insn\" and some more bookkeeping) is called\n\"prepare\" (as in displaced_step_prepare).  The mirror high level\noperation to cleaning up after a displaced step (which includes doing\nthe \"fixup\" and some more bookkeeping) is currently also called \"fixup\"\n(as in displaced_step_fixup), just like the low level operation.\n\nI think that choosing a different name for the low and high level\ncleanup operation makes it clearer, hence \"finish\".\n\ngdb/ChangeLog:\n\n\t* infrun.c (displaced_step_fixup): Rename to...\n\t(displaced_step_finish): ... this, update all callers.\n\nChange-Id: Id32f48c1e2091d09854c77fcedcc14d2519957a2",
    "tree": {
      "sha": "bcb17dfeb71b7623e1f83a968f943ac93fbb6320",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bcb17dfeb71b7623e1f83a968f943ac93fbb6320"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7def77a1cf6bfd9d3640701dc3414feb0034a858",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7def77a1cf6bfd9d3640701dc3414feb0034a858",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7def77a1cf6bfd9d3640701dc3414feb0034a858",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7def77a1cf6bfd9d3640701dc3414feb0034a858/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1152d984bb1b66a9ff7d11f46583b6e0188b885b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1152d984bb1b66a9ff7d11f46583b6e0188b885b"
    }
  ],
  "stats": {
    "total": 21,
    "additions": 13,
    "deletions": 8
  },
  "files": [
    {
      "sha": "a83fa439f4f42c44d1ce52823988a342fc1c4d27",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7def77a1cf6bfd9d3640701dc3414feb0034a858/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7def77a1cf6bfd9d3640701dc3414feb0034a858/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7def77a1cf6bfd9d3640701dc3414feb0034a858",
      "patch": "@@ -1,3 +1,8 @@\n+2020-12-04  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* infrun.c (displaced_step_fixup): Rename to...\n+\t(displaced_step_finish): ... this, update all callers.\n+\n 2020-12-04  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* infrun.h (get_displaced_step_closure_by_addr): Rename to..."
    },
    {
      "sha": "1b747fedbbc582ea3bc79808010a8c7904b2b880",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7def77a1cf6bfd9d3640701dc3414feb0034a858/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7def77a1cf6bfd9d3640701dc3414feb0034a858/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=7def77a1cf6bfd9d3640701dc3414feb0034a858",
      "patch": "@@ -1457,7 +1457,7 @@ step_over_info_valid_p (void)\n    place it in the displaced_step_request_queue.  Whenever a displaced\n    step finishes, we pick the next thread in the queue and start a new\n    displaced step operation on it.  See displaced_step_prepare and\n-   displaced_step_fixup for details.  */\n+   displaced_step_finish for details.  */\n \n /* Default destructor for displaced_step_copy_insn_closure.  */\n \n@@ -1840,7 +1840,7 @@ displaced_step_restore (struct displaced_step_inferior_state *displaced,\n    -1.  If the thread wasn't displaced stepping, return 0.  */\n \n static int\n-displaced_step_fixup (thread_info *event_thread, enum gdb_signal signal)\n+displaced_step_finish (thread_info *event_thread, enum gdb_signal signal)\n {\n   displaced_step_inferior_state *displaced\n     = &event_thread->inf->displaced_step_state;\n@@ -2201,7 +2201,7 @@ do_target_resume (ptid_t resume_ptid, bool step, enum gdb_signal sig)\n \n      Likewise if we're displaced stepping, otherwise a trap for a\n      breakpoint in a signal handler might be confused with the\n-     displaced step finishing.  We don't make the displaced_step_fixup\n+     displaced step finishing.  We don't make the displaced_step_finish\n      step distinguish the cases instead, because:\n \n      - a backtrace while stopped in the signal handler would show the\n@@ -4815,7 +4815,7 @@ stop_all_threads (void)\n \t\t      t->suspend.waitstatus.kind = TARGET_WAITKIND_IGNORE;\n \t\t      t->suspend.waitstatus_pending_p = 0;\n \n-\t\t      if (displaced_step_fixup (t, GDB_SIGNAL_0) < 0)\n+\t\t      if (displaced_step_finish (t, GDB_SIGNAL_0) < 0)\n \t\t\t{\n \t\t\t  /* Add it back to the step-over queue.  */\n \t\t\t  infrun_debug_printf\n@@ -4843,7 +4843,7 @@ stop_all_threads (void)\n \t\t      sig = (event.ws.kind == TARGET_WAITKIND_STOPPED\n \t\t\t     ? event.ws.value.sig : GDB_SIGNAL_0);\n \n-\t\t      if (displaced_step_fixup (t, sig) < 0)\n+\t\t      if (displaced_step_finish (t, sig) < 0)\n \t\t\t{\n \t\t\t  /* Add it back to the step-over queue.  */\n \t\t\t  t->control.trap_expected = 0;\n@@ -5313,7 +5313,7 @@ handle_inferior_event (struct execution_control_state *ecs)\n \t       has been done.  Perform cleanup for parent process here.  Note\n \t       that this operation also cleans up the child process for vfork,\n \t       because their pages are shared.  */\n-\t    displaced_step_fixup (ecs->event_thread, GDB_SIGNAL_TRAP);\n+\t    displaced_step_finish (ecs->event_thread, GDB_SIGNAL_TRAP);\n \t    /* Start a new step-over in another thread if there's one\n \t       that needs it.  */\n \t    start_step_over ();\n@@ -5656,8 +5656,8 @@ resumed_thread_with_pending_status (struct thread_info *tp,\n static int\n finish_step_over (struct execution_control_state *ecs)\n {\n-  displaced_step_fixup (ecs->event_thread,\n-\t\t\tecs->event_thread->suspend.stop_signal);\n+  displaced_step_finish (ecs->event_thread,\n+\t\t\t ecs->event_thread->suspend.stop_signal);\n \n   bool had_step_over_info = step_over_info_valid_p ();\n "
    }
  ]
}