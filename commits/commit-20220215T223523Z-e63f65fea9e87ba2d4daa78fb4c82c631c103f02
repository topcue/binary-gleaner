{
  "sha": "e63f65fea9e87ba2d4daa78fb4c82c631c103f02",
  "node_id": "C_kwDOANOeidoAKGU2M2Y2NWZlYTllODdiYTJkNGRhYTc4ZmI0YzgyYzYzMWMxMDNmMDI",
  "commit": {
    "author": {
      "name": "Hans-Peter Nilsson",
      "email": "hp@axis.com",
      "date": "2022-02-15T22:29:07Z"
    },
    "committer": {
      "name": "Hans-Peter Nilsson",
      "email": "hp@bitrange.com",
      "date": "2022-02-15T22:35:23Z"
    },
    "message": "sim/testsuite: Default global_cc_os and global_cc_works properly\n\nThere was an omission on 3e6dc39ed7a8 \"sim/testsuite: Set\nglobal_cc_os also when no compiler is found\"; global_cc_os\nwasn't set for other than the primary target, which means\nthat the \"unguarded\" use of global_cc_os in\ntestsuite/cris/c/c.exp caused the dreaded \"ERROR: can't read\n\"global_cc_os\": no such variable\" when e.g. configuring for\npru-elf and doing \"make check-sim\".  Better initializing\nboth variables at the top to default values, rather than\nadding another single 'set global_cc_os \"\"', to reduce the\nrisk of not setting them properly if or when that\nif-statement-chain is made longer.\n\nsim/testsuite:\n\t* lib/sim-defs.exp (sim_init_toolchain): Default\n\tglobal_cc_os and global_cc_works properly, before if-chain.",
    "tree": {
      "sha": "91d002f6059c30f95412dc072f6f1f359594979c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/91d002f6059c30f95412dc072f6f1f359594979c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e63f65fea9e87ba2d4daa78fb4c82c631c103f02",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e63f65fea9e87ba2d4daa78fb4c82c631c103f02",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e63f65fea9e87ba2d4daa78fb4c82c631c103f02",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e63f65fea9e87ba2d4daa78fb4c82c631c103f02/comments",
  "author": {
    "login": "hpataxisdotcom",
    "id": 80339731,
    "node_id": "MDQ6VXNlcjgwMzM5NzMx",
    "avatar_url": "https://avatars.githubusercontent.com/u/80339731?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hpataxisdotcom",
    "html_url": "https://github.com/hpataxisdotcom",
    "followers_url": "https://api.github.com/users/hpataxisdotcom/followers",
    "following_url": "https://api.github.com/users/hpataxisdotcom/following{/other_user}",
    "gists_url": "https://api.github.com/users/hpataxisdotcom/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hpataxisdotcom/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hpataxisdotcom/subscriptions",
    "organizations_url": "https://api.github.com/users/hpataxisdotcom/orgs",
    "repos_url": "https://api.github.com/users/hpataxisdotcom/repos",
    "events_url": "https://api.github.com/users/hpataxisdotcom/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hpataxisdotcom/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": null,
  "parents": [
    {
      "sha": "ce20459e162175710d8ef56118fc34edabfdce5e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ce20459e162175710d8ef56118fc34edabfdce5e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ce20459e162175710d8ef56118fc34edabfdce5e"
    }
  ],
  "stats": {
    "total": 6,
    "additions": 2,
    "deletions": 4
  },
  "files": [
    {
      "sha": "5528d64684b3cdc0573572b2b69bb16c57c3a9e4",
      "filename": "sim/testsuite/lib/sim-defs.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e63f65fea9e87ba2d4daa78fb4c82c631c103f02/sim/testsuite/lib/sim-defs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e63f65fea9e87ba2d4daa78fb4c82c631c103f02/sim/testsuite/lib/sim-defs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/lib/sim-defs.exp?ref=e63f65fea9e87ba2d4daa78fb4c82c631c103f02",
      "patch": "@@ -121,9 +121,10 @@ proc sim_init_toolchain {} {\n     set global_cpp_works [string equal \"\" \"$result\"]\n \n     # See if we have a compiler available, and which environment it's targeting.\n+    set global_cc_os \"\"\n+    set global_cc_works 0\n     if { $arch != $SIM_PRIMARY_TARGET && $CC_FOR_TARGET == \"false\" } {\n \tverbose -log \"Can't find a compatible C compiler\"\n-\tset global_cc_works 0\n     } elseif { [target_compile $srcdir/lib/newlibcheck.c \\\n \t\t$objdir/compilercheck.x \"executable\" $cc_options] == \"\" } {\n \tverbose -log \"Found newlib C compiler\"\n@@ -138,11 +139,8 @@ proc sim_init_toolchain {} {\n \t\t$objdir/compilercheck.x \"executable\" $cc_options] == \"\" } {\n \tverbose -log \"Found C compiler, but unknown OS\"\n \tset global_cc_works 1\n-\tset global_cc_os \"\"\n     } {\n \tverbose -log \"Can't execute C compiler\"\n-\tset global_cc_works 0\n-\tset global_cc_os \"\"\n     }\n \n     file delete $objdir/compilercheck.x"
    }
  ]
}