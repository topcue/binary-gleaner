{
  "sha": "d367006fb7cf837210e2aa1944a11169a60039b4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDM2NzAwNmZiN2NmODM3MjEwZTJhYTE5NDRhMTExNjlhNjAwMzliNA==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-17T15:12:02Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-20T16:35:18Z"
    },
    "message": "gdbserver: turn breakpoint kind-related target ops into methods\n\ngdbserver/ChangeLog:\n2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn process_stratum_target's breakpoint_kind_from_pc,\n\tsw_breakpoint_from_kind, and breakpoint_kind_from_current_state\n\tops into methods of process_target.\n\n\t* target.h (struct process_stratum_target): Remove the target op.\n\t(class process_target): Add the target op.\n\t(target_breakpoint_kind_from_pc): Update the macro.\n\t(target_breakpoint_kind_from_current_state): Update the macro.\n\t(default_breakpoint_kind_from_pc): Remove declaration.\n\t* target.cc (default_breakpoint_kind_from_pc): Turn into ...\n\t(process_target::breakpoint_kind_from_pc): ... this.\n\t(process_target::breakpoint_kind_from_current_state): Define.\n\n\tUpdate the derived classes and callers below.\n\n\t* mem-break.cc (bp_size): Update.\n\t(bp_opcode): Update.\n\t* linux-low.cc (linux_target_ops): Update.\n\t(linux_wait_1): Update.\n\t(linux_breakpoint_kind_from_pc): Turn into ...\n\t(linux_process_target::breakpoint_kind_from_pc): ... this.\n\t(linux_sw_breakpoint_from_kind): Turn into ...\n\t(linux_process_target::sw_breakpoint_from_kind): ... this.\n\t(linux_breakpoint_kind_from_current_state): Turn into ...\n\t(linux_process_target::breakpoint_kind_from_current_state): ... this.\n\t* linux-low.h (class linux_process_target): Update.\n\t* lynx-low.cc (lynx_target_ops): Update.\n\t(lynx_process_target::sw_breakpoint_from_kind): Define.\n\t* lynx-low.h (class lynx_process_target): Update.\n\t* nto-low.cc (nto_target_ops): Update.\n\t(nto_sw_breakpoint_from_kind): Turn into ...\n\t(nto_process_target::sw_breakpoint_from_kind): ... this.\n\t* nto-low.h (class nto_process_target): Update.\n\t* win32-low.cc (win32_target_ops): Update.\n\t(win32_sw_breakpoint_from_kind): Turn into ...\n\t(win32_process_target::sw_breakpoint_from_kind): ... this.\n\t* win32-low.h (class win32_process_target): Update.",
    "tree": {
      "sha": "587bc13bb5fe00df9ea0d1e2eb88a5c594de3fe6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/587bc13bb5fe00df9ea0d1e2eb88a5c594de3fe6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d367006fb7cf837210e2aa1944a11169a60039b4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d367006fb7cf837210e2aa1944a11169a60039b4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d367006fb7cf837210e2aa1944a11169a60039b4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d367006fb7cf837210e2aa1944a11169a60039b4/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c9b7b80460e47ea4554960af6814de71b3e427cb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c9b7b80460e47ea4554960af6814de71b3e427cb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c9b7b80460e47ea4554960af6814de71b3e427cb"
    }
  ],
  "stats": {
    "total": 176,
    "additions": 108,
    "deletions": 68
  },
  "files": [
    {
      "sha": "694792265db7bb8439c60bf1d1c3b035d68e63c0",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=d367006fb7cf837210e2aa1944a11169a60039b4",
      "patch": "@@ -1,3 +1,43 @@\n+2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn process_stratum_target's breakpoint_kind_from_pc,\n+\tsw_breakpoint_from_kind, and breakpoint_kind_from_current_state\n+\tops into methods of process_target.\n+\n+\t* target.h (struct process_stratum_target): Remove the target op.\n+\t(class process_target): Add the target op.\n+\t(target_breakpoint_kind_from_pc): Update the macro.\n+\t(target_breakpoint_kind_from_current_state): Update the macro.\n+\t(default_breakpoint_kind_from_pc): Remove declaration.\n+\t* target.cc (default_breakpoint_kind_from_pc): Turn into ...\n+\t(process_target::breakpoint_kind_from_pc): ... this.\n+\t(process_target::breakpoint_kind_from_current_state): Define.\n+\n+\tUpdate the derived classes and callers below.\n+\n+\t* mem-break.cc (bp_size): Update.\n+\t(bp_opcode): Update.\n+\t* linux-low.cc (linux_target_ops): Update.\n+\t(linux_wait_1): Update.\n+\t(linux_breakpoint_kind_from_pc): Turn into ...\n+\t(linux_process_target::breakpoint_kind_from_pc): ... this.\n+\t(linux_sw_breakpoint_from_kind): Turn into ...\n+\t(linux_process_target::sw_breakpoint_from_kind): ... this.\n+\t(linux_breakpoint_kind_from_current_state): Turn into ...\n+\t(linux_process_target::breakpoint_kind_from_current_state): ... this.\n+\t* linux-low.h (class linux_process_target): Update.\n+\t* lynx-low.cc (lynx_target_ops): Update.\n+\t(lynx_process_target::sw_breakpoint_from_kind): Define.\n+\t* lynx-low.h (class lynx_process_target): Update.\n+\t* nto-low.cc (nto_target_ops): Update.\n+\t(nto_sw_breakpoint_from_kind): Turn into ...\n+\t(nto_process_target::sw_breakpoint_from_kind): ... this.\n+\t* nto-low.h (class nto_process_target): Update.\n+\t* win32-low.cc (win32_target_ops): Update.\n+\t(win32_sw_breakpoint_from_kind): Turn into ...\n+\t(win32_process_target::sw_breakpoint_from_kind): ... this.\n+\t* win32-low.h (class win32_process_target): Update.\n+\n 2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn process_stratum_target's multifs_open, multifs_readlink,"
    },
    {
      "sha": "20a936bb8700d12953af4c2bfa84a3d83b6cc6f2",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 10,
      "deletions": 13,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=d367006fb7cf837210e2aa1944a11169a60039b4",
      "patch": "@@ -3226,8 +3226,8 @@ linux_wait_1 (ptid_t ptid,\n       CORE_ADDR stop_pc = event_child->stop_pc;\n \n       breakpoint_kind =\n-\tthe_target->breakpoint_kind_from_current_state (&stop_pc);\n-      the_target->sw_breakpoint_from_kind (breakpoint_kind, &increment_pc);\n+\tthe_target->pt->breakpoint_kind_from_current_state (&stop_pc);\n+      the_target->pt->sw_breakpoint_from_kind (breakpoint_kind, &increment_pc);\n \n       if (debug_threads)\n \t{\n@@ -7366,19 +7366,19 @@ current_lwp_ptid (void)\n \n /* Implementation of the target_ops method \"breakpoint_kind_from_pc\".  */\n \n-static int\n-linux_breakpoint_kind_from_pc (CORE_ADDR *pcptr)\n+int\n+linux_process_target::breakpoint_kind_from_pc (CORE_ADDR *pcptr)\n {\n   if (the_low_target.breakpoint_kind_from_pc != NULL)\n     return (*the_low_target.breakpoint_kind_from_pc) (pcptr);\n   else\n-    return default_breakpoint_kind_from_pc (pcptr);\n+    return process_target::breakpoint_kind_from_pc (pcptr);\n }\n \n /* Implementation of the target_ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-linux_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+linux_process_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   gdb_assert (the_low_target.sw_breakpoint_from_kind != NULL);\n \n@@ -7388,13 +7388,13 @@ linux_sw_breakpoint_from_kind (int kind, int *size)\n /* Implementation of the target_ops method\n    \"breakpoint_kind_from_current_state\".  */\n \n-static int\n-linux_breakpoint_kind_from_current_state (CORE_ADDR *pcptr)\n+int\n+linux_process_target::breakpoint_kind_from_current_state (CORE_ADDR *pcptr)\n {\n   if (the_low_target.breakpoint_kind_from_current_state != NULL)\n     return (*the_low_target.breakpoint_kind_from_current_state) (pcptr);\n   else\n-    return linux_breakpoint_kind_from_pc (pcptr);\n+    return breakpoint_kind_from_pc (pcptr);\n }\n \n /* Default implementation of linux_target_ops method \"set_pc\" for\n@@ -7509,10 +7509,7 @@ linux_get_hwcap2 (int wordsize)\n static linux_process_target the_linux_target;\n \n static process_stratum_target linux_target_ops = {\n-  linux_breakpoint_kind_from_pc,\n-  linux_sw_breakpoint_from_kind,\n   linux_proc_tid_get_name,\n-  linux_breakpoint_kind_from_current_state,\n   linux_supports_software_single_step,\n   linux_supports_catch_syscall,\n   linux_get_ipa_tdesc_idx,"
    },
    {
      "sha": "ae422b8387969ad07b3acb3fdad035999be83650",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=d367006fb7cf837210e2aa1944a11169a60039b4",
      "patch": "@@ -462,6 +462,12 @@ class linux_process_target : public process_target\n \n   ssize_t multifs_readlink (int pid, const char *filename, char *buf,\n \t\t\t    size_t bufsiz) override;\n+\n+  int breakpoint_kind_from_pc (CORE_ADDR *pcptr) override;\n+\n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n+  int breakpoint_kind_from_current_state (CORE_ADDR *pcptr) override;\n };\n \n #define get_thread_lwp(thr) ((struct lwp_info *) (thread_target_data (thr)))"
    },
    {
      "sha": "b07412f0dcd645aa0a2581c283f3008786fa71c5",
      "filename": "gdbserver/lynx-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/lynx-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/lynx-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.cc?ref=d367006fb7cf837210e2aa1944a11169a60039b4",
      "patch": "@@ -728,17 +728,20 @@ lynx_process_target::supports_hardware_single_step ()\n   return true;\n }\n \n+const gdb_byte *\n+lynx_process_target::sw_breakpoint_from_kind (int kind, int *size)\n+{\n+  error (_(\"Target does not implement the sw_breakpoint_from_kind op\"));\n+}\n+\n /* The LynxOS target ops object.  */\n \n static lynx_process_target the_lynx_target;\n \n /* The LynxOS target_ops vector.  */\n \n static process_stratum_target lynx_target_ops = {\n-  NULL,  /* breakpoint_kind_from_pc */\n-  NULL,  /* sw_breakpoint_from_kind */\n   NULL,  /* thread_name */\n-  NULL,  /* breakpoint_kind_from_current_state */\n   NULL,  /* supports_software_single_step */\n   NULL,  /* supports_catch_syscall */\n   NULL,  /* get_ipa_tdesc_idx */"
    },
    {
      "sha": "7da97b3b073c509a1b43134cefed9a0a7f727018",
      "filename": "gdbserver/lynx-low.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/lynx-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/lynx-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.h?ref=d367006fb7cf837210e2aa1944a11169a60039b4",
      "patch": "@@ -91,6 +91,8 @@ class lynx_process_target : public process_target\n   void request_interrupt () override;\n \n   bool supports_hardware_single_step () override;\n+\n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n };\n \n /* The inferior's target description.  This is a global because the"
    },
    {
      "sha": "3802d72a57361d7317d49ad8354b3908ddf881c5",
      "filename": "gdbserver/mem-break.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/mem-break.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/mem-break.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/mem-break.cc?ref=d367006fb7cf837210e2aa1944a11169a60039b4",
      "patch": "@@ -223,7 +223,7 @@ bp_size (struct raw_breakpoint *bp)\n {\n   int size = 0;\n \n-  the_target->sw_breakpoint_from_kind (bp->kind, &size);\n+  the_target->pt->sw_breakpoint_from_kind (bp->kind, &size);\n   return size;\n }\n \n@@ -234,7 +234,7 @@ bp_opcode (struct raw_breakpoint *bp)\n {\n   int size = 0;\n \n-  return the_target->sw_breakpoint_from_kind (bp->kind, &size);\n+  return the_target->pt->sw_breakpoint_from_kind (bp->kind, &size);\n }\n \n /* See mem-break.h.  */"
    },
    {
      "sha": "b0ac86f8790b47e701b0520feccb2beb43035c1d",
      "filename": "gdbserver/nto-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/nto-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/nto-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.cc?ref=d367006fb7cf837210e2aa1944a11169a60039b4",
      "patch": "@@ -935,8 +935,8 @@ nto_process_target::stopped_data_address ()\n \n /* Implementation of the target_ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-nto_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+nto_process_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   *size = the_low_target.breakpoint_len;\n   return the_low_target.breakpoint;\n@@ -947,10 +947,7 @@ nto_sw_breakpoint_from_kind (int kind, int *size)\n static nto_process_target the_nto_target;\n \n static process_stratum_target nto_target_ops = {\n-  NULL, /* breakpoint_kind_from_pc */\n-  nto_sw_breakpoint_from_kind,\n   NULL, /* thread_name */\n-  NULL, /* breakpoint_kind_from_current_state */\n   NULL, /* supports_software_single_step */\n   NULL, /* supports_catch_syscall */\n   NULL, /* get_ipa_tdesc_idx */"
    },
    {
      "sha": "ff2003b60b0433d37ad56419c2b365973b45015d",
      "filename": "gdbserver/nto-low.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/nto-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/nto-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.h?ref=d367006fb7cf837210e2aa1944a11169a60039b4",
      "patch": "@@ -98,6 +98,8 @@ class nto_process_target : public process_target\n   bool stopped_by_watchpoint () override;\n \n   CORE_ADDR stopped_data_address () override;\n+\n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n };\n \n /* The inferior's target description.  This is a global because the"
    },
    {
      "sha": "76eef626ce88a42d7c94695156e2448b309dcf53",
      "filename": "gdbserver/target.cc",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/target.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/target.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.cc?ref=d367006fb7cf837210e2aa1944a11169a60039b4",
      "patch": "@@ -306,22 +306,6 @@ kill_inferior (process_info *proc)\n   return the_target->pt->kill (proc);\n }\n \n-/* Default implementation for breakpoint_kind_for_pc.\n-\n-   The default behavior for targets that don't implement breakpoint_kind_for_pc\n-   is to use the size of a breakpoint as the kind.  */\n-\n-int\n-default_breakpoint_kind_from_pc (CORE_ADDR *pcptr)\n-{\n-  int size = 0;\n-\n-  gdb_assert (the_target->sw_breakpoint_from_kind != NULL);\n-\n-  (*the_target->sw_breakpoint_from_kind) (0, &size);\n-  return size;\n-}\n-\n /* Define it.  */\n \n target_terminal_state target_terminal::m_terminal_state\n@@ -801,3 +785,19 @@ process_target::multifs_readlink (int pid, const char *filename,\n {\n   return readlink (filename, buf, bufsiz);\n }\n+\n+int\n+process_target::breakpoint_kind_from_pc (CORE_ADDR *pcptr)\n+{\n+  /* The default behavior is to use the size of a breakpoint as the\n+     kind.  */\n+  int size = 0;\n+  sw_breakpoint_from_kind (0, &size);\n+  return size;\n+}\n+\n+int\n+process_target::breakpoint_kind_from_current_state (CORE_ADDR *pcptr)\n+{\n+  return breakpoint_kind_from_pc (pcptr);\n+}"
    },
    {
      "sha": "4651e449a805d65238b6581845097962f932288f",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 18,
      "deletions": 24,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=d367006fb7cf837210e2aa1944a11169a60039b4",
      "patch": "@@ -70,26 +70,10 @@ class process_target;\n    shared code.  */\n struct process_stratum_target\n {\n-  /* Return the breakpoint kind for this target based on PC.  The PCPTR is\n-     adjusted to the real memory location in case a flag (e.g., the Thumb bit on\n-     ARM) was present in the PC.  */\n-  int (*breakpoint_kind_from_pc) (CORE_ADDR *pcptr);\n-\n-  /* Return the software breakpoint from KIND.  KIND can have target\n-     specific meaning like the Z0 kind parameter.\n-     SIZE is set to the software breakpoint's length in memory.  */\n-  const gdb_byte *(*sw_breakpoint_from_kind) (int kind, int *size);\n-\n   /* Return the thread's name, or NULL if the target is unable to determine it.\n      The returned value must not be freed by the caller.  */\n   const char *(*thread_name) (ptid_t thread);\n \n-  /* Return the breakpoint kind for this target based on the current\n-     processor state (e.g. the current instruction mode on ARM) and the\n-     PC.  The PCPTR is adjusted to the real memory location in case a flag\n-     (e.g., the Thumb bit on ARM) is present in the PC.  */\n-  int (*breakpoint_kind_from_current_state) (CORE_ADDR *pcptr);\n-\n   /* Returns true if the target can software single step.  */\n   int (*supports_software_single_step) (void);\n \n@@ -503,6 +487,22 @@ class process_target\n      not override this.  The default behavior is to use readlink(2).  */\n   virtual ssize_t multifs_readlink (int pid, const char *filename,\n \t\t\t\t    char *buf, size_t bufsiz);\n+\n+  /* Return the breakpoint kind for this target based on PC.  The\n+     PCPTR is adjusted to the real memory location in case a flag\n+     (e.g., the Thumb bit on ARM) was present in the PC.  */\n+  virtual int breakpoint_kind_from_pc (CORE_ADDR *pcptr);\n+\n+  /* Return the software breakpoint from KIND.  KIND can have target\n+     specific meaning like the Z0 kind parameter.\n+     SIZE is set to the software breakpoint's length in memory.  */\n+  virtual const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) = 0;\n+\n+  /* Return the breakpoint kind for this target based on the current\n+     processor state (e.g. the current instruction mode on ARM) and the\n+     PC.  The PCPTR is adjusted to the real memory location in case a\n+     flag (e.g., the Thumb bit on ARM) is present in the  PC.  */\n+  virtual int breakpoint_kind_from_current_state (CORE_ADDR *pcptr);\n };\n \n extern process_stratum_target *the_target;\n@@ -661,14 +661,10 @@ target_read_btrace_conf (struct btrace_target_info *tinfo,\n   the_target->pt->stopped_by_hw_breakpoint ()\n \n #define target_breakpoint_kind_from_pc(pcptr) \\\n-  (the_target->breakpoint_kind_from_pc \\\n-   ? (*the_target->breakpoint_kind_from_pc) (pcptr) \\\n-   : default_breakpoint_kind_from_pc (pcptr))\n+  the_target->pt->breakpoint_kind_from_pc (pcptr)\n \n #define target_breakpoint_kind_from_current_state(pcptr) \\\n-  (the_target->breakpoint_kind_from_current_state \\\n-   ? (*the_target->breakpoint_kind_from_current_state) (pcptr) \\\n-   : target_breakpoint_kind_from_pc (pcptr))\n+  the_target->pt->breakpoint_kind_from_current_state (pcptr)\n \n #define target_supports_software_single_step() \\\n   (the_target->supports_software_single_step ? \\\n@@ -701,6 +697,4 @@ int set_desired_thread ();\n \n const char *target_pid_to_str (ptid_t);\n \n-int default_breakpoint_kind_from_pc (CORE_ADDR *pcptr);\n-\n #endif /* GDBSERVER_TARGET_H */"
    },
    {
      "sha": "71adf18ebb5edbb3c978a9df7ea7516552ad0f20",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=d367006fb7cf837210e2aa1944a11169a60039b4",
      "patch": "@@ -1846,8 +1846,8 @@ win32_process_target::get_tib_address (ptid_t ptid, CORE_ADDR *addr)\n \n /* Implementation of the target_ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-win32_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+win32_process_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   *size = the_low_target.breakpoint_len;\n   return the_low_target.breakpoint;\n@@ -1858,10 +1858,7 @@ win32_sw_breakpoint_from_kind (int kind, int *size)\n static win32_process_target the_win32_target;\n \n static process_stratum_target win32_target_ops = {\n-  NULL, /* breakpoint_kind_from_pc */\n-  win32_sw_breakpoint_from_kind,\n   NULL, /* thread_name */\n-  NULL, /* breakpoint_kind_from_current_state */\n   NULL, /* supports_software_single_step */\n   NULL, /* supports_catch_syscall */\n   NULL, /* get_ipa_tdesc_idx */"
    },
    {
      "sha": "d4c7cae30137433b9e0ddf615a5a2fa74fe664f1",
      "filename": "gdbserver/win32-low.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/win32-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d367006fb7cf837210e2aa1944a11169a60039b4/gdbserver/win32-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.h?ref=d367006fb7cf837210e2aa1944a11169a60039b4",
      "patch": "@@ -166,6 +166,8 @@ class win32_process_target : public process_target\n   bool supports_get_tib_address () override;\n \n   int get_tib_address (ptid_t ptid, CORE_ADDR *addr) override;\n+\n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n };\n \n /* Retrieve the context for this thread, if not already retrieved.  */"
    }
  ]
}