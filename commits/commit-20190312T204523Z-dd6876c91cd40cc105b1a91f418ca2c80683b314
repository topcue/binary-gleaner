{
  "sha": "dd6876c91cd40cc105b1a91f418ca2c80683b314",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGQ2ODc2YzkxY2Q0MGNjMTA1YjFhOTFmNDE4Y2EyYzgwNjgzYjMxNA==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2019-03-12T20:39:02Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2019-03-12T20:45:23Z"
    },
    "message": "Support fs_base and gs_base on FreeBSD/i386.\n\nThe i386 BSD native target uses the same ptrace operations\n(PT_[GS]ET[FG]SBASE) as the amd64 BSD native target to fetch and store\nthe registers.\n\nThe amd64 BSD native now uses 'tdep->fsbase_regnum' instead of\nhardcoding AMD64_FSBASE_REGNUM and AMD64_GSBASE_REGNUM to support\n32-bit targets.  In addition, the store operations explicitly zero the\nnew register value before fetching it from the register cache to\nensure 32-bit values are zero-extended.\n\ngdb/ChangeLog:\n\n\t* amd64-bsd-nat.c (amd64bsd_fetch_inferior_registers): Use\n\ttdep->fsbase_regnum instead of constants for fs_base and gs_base.\n\t(amd64bsd_store_inferior_registers): Likewise.\n\t* amd64-fbsd-nat.c (amd64_fbsd_nat_target::read_description):\n\tEnable segment base registers.\n\t* i386-bsd-nat.c (i386bsd_fetch_inferior_registers): Use\n\tPT_GETFSBASE and PT_GETGSBASE.\n\t(i386bsd_store_inferior_registers): Use PT_SETFSBASE and\n\tPT_SETGSBASE.\n\t* i386-fbsd-nat.c (i386_fbsd_nat_target::read_description): Enable\n\tsegment base registers.\n\t* i386-fbsd-tdep.c (i386fbsd_core_read_description): Likewise.",
    "tree": {
      "sha": "394033e0658212a6461dd32784d158ff1d16f6e6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/394033e0658212a6461dd32784d158ff1d16f6e6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dd6876c91cd40cc105b1a91f418ca2c80683b314",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd6876c91cd40cc105b1a91f418ca2c80683b314",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dd6876c91cd40cc105b1a91f418ca2c80683b314",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd6876c91cd40cc105b1a91f418ca2c80683b314/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1163a4b7a38a79ebd153dc5ee76ce93877d21dbd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1163a4b7a38a79ebd153dc5ee76ce93877d21dbd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1163a4b7a38a79ebd153dc5ee76ce93877d21dbd"
    }
  ],
  "stats": {
    "total": 103,
    "additions": 91,
    "deletions": 12
  },
  "files": [
    {
      "sha": "c91e975309160ebf5f8f42bb59be3caeaa308751",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd6876c91cd40cc105b1a91f418ca2c80683b314/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd6876c91cd40cc105b1a91f418ca2c80683b314/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=dd6876c91cd40cc105b1a91f418ca2c80683b314",
      "patch": "@@ -1,3 +1,18 @@\n+2019-03-12  John Baldwin  <jhb@FreeBSD.org>\n+\n+\t* amd64-bsd-nat.c (amd64bsd_fetch_inferior_registers): Use\n+\ttdep->fsbase_regnum instead of constants for fs_base and gs_base.\n+\t(amd64bsd_store_inferior_registers): Likewise.\n+\t* amd64-fbsd-nat.c (amd64_fbsd_nat_target::read_description):\n+\tEnable segment base registers.\n+\t* i386-bsd-nat.c (i386bsd_fetch_inferior_registers): Use\n+\tPT_GETFSBASE and PT_GETGSBASE.\n+\t(i386bsd_store_inferior_registers): Use PT_SETFSBASE and\n+\tPT_SETGSBASE.\n+\t* i386-fbsd-nat.c (i386_fbsd_nat_target::read_description): Enable\n+\tsegment base registers.\n+\t* i386-fbsd-tdep.c (i386fbsd_core_read_description): Likewise.\n+\n 2019-03-12  John Baldwin  <jhb@FreeBSD.org>\n \n \t* amd64-fbsd-nat.c (amd64_fbsd_nat_target::read_description):"
    },
    {
      "sha": "35763a5b955f376cccef2ad41ad384263b897b0d",
      "filename": "gdb/amd64-bsd-nat.c",
      "status": "modified",
      "additions": 18,
      "deletions": 8,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd6876c91cd40cc105b1a91f418ca2c80683b314/gdb/amd64-bsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd6876c91cd40cc105b1a91f418ca2c80683b314/gdb/amd64-bsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-bsd-nat.c?ref=dd6876c91cd40cc105b1a91f418ca2c80683b314",
      "patch": "@@ -43,6 +43,9 @@ amd64bsd_fetch_inferior_registers (struct regcache *regcache, int regnum)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n   pid_t pid = get_ptrace_pid (regcache->ptid ());\n+#if defined(PT_GETFSBASE) || defined(PT_GETGSBASE)\n+  const struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+#endif\n \n   if (regnum == -1 || amd64_native_gregset_supplies_p (gdbarch, regnum))\n     {\n@@ -57,27 +60,27 @@ amd64bsd_fetch_inferior_registers (struct regcache *regcache, int regnum)\n     }\n \n #ifdef PT_GETFSBASE\n-  if (regnum == -1 || regnum == AMD64_FSBASE_REGNUM)\n+  if (regnum == -1 || regnum == tdep->fsbase_regnum)\n     {\n       register_t base;\n \n       if (ptrace (PT_GETFSBASE, pid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n \tperror_with_name (_(\"Couldn't get segment register fs_base\"));\n \n-      regcache->raw_supply (AMD64_FSBASE_REGNUM, &base);\n+      regcache->raw_supply (tdep->fsbase_regnum, &base);\n       if (regnum != -1)\n \treturn;\n     }\n #endif\n #ifdef PT_GETGSBASE\n-  if (regnum == -1 || regnum == AMD64_GSBASE_REGNUM)\n+  if (regnum == -1 || regnum == tdep->fsbase_regnum + 1)\n     {\n       register_t base;\n \n       if (ptrace (PT_GETGSBASE, pid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n \tperror_with_name (_(\"Couldn't get segment register gs_base\"));\n \n-      regcache->raw_supply (AMD64_GSBASE_REGNUM, &base);\n+      regcache->raw_supply (tdep->fsbase_regnum + 1, &base);\n       if (regnum != -1)\n \treturn;\n     }\n@@ -116,6 +119,9 @@ amd64bsd_store_inferior_registers (struct regcache *regcache, int regnum)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n   pid_t pid = get_ptrace_pid (regcache->ptid ());\n+#if defined(PT_SETFSBASE) || defined(PT_SETGSBASE)\n+  const struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+#endif\n \n   if (regnum == -1 || amd64_native_gregset_supplies_p (gdbarch, regnum))\n     {\n@@ -134,11 +140,13 @@ amd64bsd_store_inferior_registers (struct regcache *regcache, int regnum)\n     }\n \n #ifdef PT_SETFSBASE\n-  if (regnum == -1 || regnum == AMD64_FSBASE_REGNUM)\n+  if (regnum == -1 || regnum == tdep->fsbase_regnum)\n     {\n       register_t base;\n \n-      regcache->raw_collect (AMD64_FSBASE_REGNUM, &base);\n+      /* Clear the full base value to support 32-bit targets.  */\n+      base = 0;\n+      regcache->raw_collect (tdep->fsbase_regnum, &base);\n \n       if (ptrace (PT_SETFSBASE, pid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n \tperror_with_name (_(\"Couldn't write segment register fs_base\"));\n@@ -147,11 +155,13 @@ amd64bsd_store_inferior_registers (struct regcache *regcache, int regnum)\n     }\n #endif\n #ifdef PT_SETGSBASE\n-  if (regnum == -1 || regnum == AMD64_GSBASE_REGNUM)\n+  if (regnum == -1 || regnum == tdep->fsbase_regnum + 1)\n     {\n       register_t base;\n \n-      regcache->raw_collect (AMD64_GSBASE_REGNUM, &base);\n+      /* Clear the full base value to support 32-bit targets.  */\n+      base = 0;\n+      regcache->raw_collect (tdep->fsbase_regnum + 1, &base);\n \n       if (ptrace (PT_SETGSBASE, pid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n \tperror_with_name (_(\"Couldn't write segment register gs_base\"));"
    },
    {
      "sha": "cc676d3214f49c9c20af054e50a177bf2df4ca0e",
      "filename": "gdb/amd64-fbsd-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd6876c91cd40cc105b1a91f418ca2c80683b314/gdb/amd64-fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd6876c91cd40cc105b1a91f418ca2c80683b314/gdb/amd64-fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-fbsd-nat.c?ref=dd6876c91cd40cc105b1a91f418ca2c80683b314",
      "patch": "@@ -190,13 +190,13 @@ amd64_fbsd_nat_target::read_description ()\n       if (is64)\n \treturn amd64_target_description (xcr0, true);\n       else\n-\treturn i386_target_description (xcr0, false);\n+\treturn i386_target_description (xcr0, true);\n     }\n #endif\n   if (is64)\n     return amd64_target_description (X86_XSTATE_SSE_MASK, true);\n   else\n-    return i386_target_description (X86_XSTATE_SSE_MASK, false);\n+    return i386_target_description (X86_XSTATE_SSE_MASK, true);\n }\n \n #if defined(HAVE_PT_GETDBREGS) && defined(USE_SIGTRAP_SIGINFO)"
    },
    {
      "sha": "a10b496096e654d0e7ec293f87b55cab90d0979f",
      "filename": "gdb/i386-bsd-nat.c",
      "status": "modified",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd6876c91cd40cc105b1a91f418ca2c80683b314/gdb/i386-bsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd6876c91cd40cc105b1a91f418ca2c80683b314/gdb/i386-bsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-bsd-nat.c?ref=dd6876c91cd40cc105b1a91f418ca2c80683b314",
      "patch": "@@ -144,6 +144,33 @@ i386bsd_fetch_inferior_registers (struct regcache *regcache, int regnum)\n \treturn;\n     }\n \n+#ifdef PT_GETFSBASE\n+  if (regnum == -1 || regnum == I386_FSBASE_REGNUM)\n+    {\n+      register_t base;\n+\n+      if (ptrace (PT_GETFSBASE, pid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n+\tperror_with_name (_(\"Couldn't get segment register fs_base\"));\n+\n+      regcache->raw_supply (I386_FSBASE_REGNUM, &base);\n+      if (regnum != -1)\n+\treturn;\n+    }\n+#endif\n+#ifdef PT_GETGSBASE\n+  if (regnum == -1 || regnum == I386_GSBASE_REGNUM)\n+    {\n+      register_t base;\n+\n+      if (ptrace (PT_GETGSBASE, pid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n+\tperror_with_name (_(\"Couldn't get segment register gs_base\"));\n+\n+      regcache->raw_supply (I386_GSBASE_REGNUM, &base);\n+      if (regnum != -1)\n+\treturn;\n+    }\n+#endif\n+\n   if (regnum == -1 || regnum >= I386_ST0_REGNUM)\n     {\n       struct fpreg fpregs;\n@@ -211,6 +238,33 @@ i386bsd_store_inferior_registers (struct regcache *regcache, int regnum)\n \treturn;\n     }\n \n+#ifdef PT_SETFSBASE\n+  if (regnum == -1 || regnum == I386_FSBASE_REGNUM)\n+    {\n+      register_t base;\n+\n+      regcache->raw_collect (I386_FSBASE_REGNUM, &base);\n+\n+      if (ptrace (PT_SETFSBASE, pid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n+\tperror_with_name (_(\"Couldn't write segment register fs_base\"));\n+      if (regnum != -1)\n+\treturn;\n+    }\n+#endif\n+#ifdef PT_SETGSBASE\n+  if (regnum == -1 || regnum == I386_GSBASE_REGNUM)\n+    {\n+      register_t base;\n+\n+      regcache->raw_collect (I386_GSBASE_REGNUM, &base);\n+\n+      if (ptrace (PT_SETGSBASE, pid, (PTRACE_TYPE_ARG3) &base, 0) == -1)\n+\tperror_with_name (_(\"Couldn't write segment register gs_base\"));\n+      if (regnum != -1)\n+\treturn;\n+    }\n+#endif\n+\n   if (regnum == -1 || regnum >= I386_ST0_REGNUM)\n     {\n       struct fpreg fpregs;"
    },
    {
      "sha": "be5d4c67be7462ee348c2143067b5c822d0a1fb4",
      "filename": "gdb/i386-fbsd-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd6876c91cd40cc105b1a91f418ca2c80683b314/gdb/i386-fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd6876c91cd40cc105b1a91f418ca2c80683b314/gdb/i386-fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-fbsd-nat.c?ref=dd6876c91cd40cc105b1a91f418ca2c80683b314",
      "patch": "@@ -160,7 +160,7 @@ i386_fbsd_nat_target::read_description ()\n   if (x86bsd_xsave_len == 0)\n     xcr0 = X86_XSTATE_SSE_MASK;\n \n-  return i386_target_description (xcr0, false);\n+  return i386_target_description (xcr0, true);\n }\n #endif\n "
    },
    {
      "sha": "ac57e7383d7260027b3c1bac3cf7d6e8b4e3c5f7",
      "filename": "gdb/i386-fbsd-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd6876c91cd40cc105b1a91f418ca2c80683b314/gdb/i386-fbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd6876c91cd40cc105b1a91f418ca2c80683b314/gdb/i386-fbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-fbsd-tdep.c?ref=dd6876c91cd40cc105b1a91f418ca2c80683b314",
      "patch": "@@ -267,7 +267,7 @@ i386fbsd_core_read_description (struct gdbarch *gdbarch,\n \t\t\t\tstruct target_ops *target,\n \t\t\t\tbfd *abfd)\n {\n-  return i386_target_description (i386fbsd_core_read_xcr0 (abfd), false);\n+  return i386_target_description (i386fbsd_core_read_xcr0 (abfd), true);\n }\n \n /* Similar to i386_supply_fpregset, but use XSAVE extended state.  */"
    }
  ]
}