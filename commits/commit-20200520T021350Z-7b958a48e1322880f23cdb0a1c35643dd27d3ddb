{
  "sha": "7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2I5NThhNDhlMTMyMjg4MGYyM2NkYjBhMWMzNTY0M2RkMjdkM2RkYg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-05-19T03:28:59Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-05-20T02:13:50Z"
    },
    "message": "PR25993, read of freed memory\n\nldmain.c:add_archive_element copies file name pointers from the bfd to\na lang_input_statement_type.\n  input->filename = abfd->filename;\n  input->local_sym_name = abfd->filename;\nThis results in stale pointers when twiddling the bfd filename in\nplaces like the pe ld after_open.  So don't free the bfd filename,\nand make copies using bfd_alloc memory that won't result in small\nmemory leaks that annoy memory checkers.\n\n\tPR 25993\nbfd/\n\t* archive.c (_bfd_get_elt_at_filepos): Don't strdup filename,\n\tuse bfd_set_filename.\n\t* elfcode.h (_bfd_elf_bfd_from_remote_memory): Likewise.\n\t* mach-o.c (bfd_mach_o_fat_member_init): Likewise.\n\t* opncls.c (bfd_fopen, bfd_openstreamr, bfd_openr_iovec, bfd_openw),\n\t(bfd_create): Likewise.\n\t(_bfd_delete_bfd): Don't free filename.\n\t(bfd_set_filename): Copy filename param to bfd_alloc'd memory,\n\treturn pointer to the copy or NULL on alloc fail.\n\t* vms-lib.c (_bfd_vms_lib_get_module): Free newname and test\n\tresult of bfd_set_filename.\n\t* bfd-in2.h: Regenerate.\ngdb/\n\t* solib-darwin.c (darwin_bfd_open): Don't strdup pathname for\n\tbfd_set_filename.\n\t* solib-aix.c (solib_aix_bfd_open): Use std::string for name\n\tpassed to bfd_set_filename.\n\t* symfile-mem.c (add_vsyscall_page): Likewise for string\n\tpassed to symbol_file_add_from_memory.\n\t(symbol_file_add_from_memory): Make name param a const char* and\n\tdon't strdup.\nld/\n\t* emultempl/pe.em (gld_${EMULATION_NAME}_after_open): Don't copy\n\tother_bfd_filename for bfd_set_filename, and test result of\n\tbfd_set_filename call.  Don't create a new is->filename, simply\n\tcopy from bfd filename.  Free new_name after bfd_set_filename.\n\t* emultempl/pep.em (gld_${EMULATION_NAME}_after_open): Likewise.",
    "tree": {
      "sha": "f22ca3f8b85ab4a5d371c465a899700a4989209f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f22ca3f8b85ab4a5d371c465a899700a4989209f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "84f800117f075b78932d3abdc0a09421bb9d2657",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84f800117f075b78932d3abdc0a09421bb9d2657",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/84f800117f075b78932d3abdc0a09421bb9d2657"
    }
  ],
  "stats": {
    "total": 214,
    "additions": 107,
    "deletions": 107
  },
  "files": [
    {
      "sha": "eb6191c534a7806f95b228787882e06d68f2a452",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
      "patch": "@@ -1,3 +1,19 @@\n+2020-05-20  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 25993\n+\t* archive.c (_bfd_get_elt_at_filepos): Don't strdup filename,\n+\tuse bfd_set_filename.\n+\t* elfcode.h (_bfd_elf_bfd_from_remote_memory): Likewise.\n+\t* mach-o.c (bfd_mach_o_fat_member_init): Likewise.\n+\t* opncls.c (bfd_fopen, bfd_openstreamr, bfd_openr_iovec, bfd_openw),\n+\t(bfd_create): Likewise.\n+\t(_bfd_delete_bfd): Don't free filename.\n+\t(bfd_set_filename): Copy filename param to bfd_alloc'd memory,\n+\treturn pointer to the copy or NULL on alloc fail.\n+\t* vms-lib.c (_bfd_vms_lib_get_module): Free newname and test\n+\tresult of bfd_set_filename.\n+\t* bfd-in2.h: Regenerate.\n+\n 2020-05-20  Alan Modra  <amodra@gmail.com>\n \n \tPR 26011"
    },
    {
      "sha": "13229777448fe8ee9238eb01c08913e9aeb77c11",
      "filename": "bfd/archive.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/bfd/archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/bfd/archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive.c?ref=7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
      "patch": "@@ -737,8 +737,7 @@ _bfd_get_elt_at_filepos (bfd *archive, file_ptr filepos)\n   else\n     {\n       n_bfd->origin = n_bfd->proxy_origin;\n-      n_bfd->filename = bfd_strdup (filename);\n-      if (n_bfd->filename == NULL)\n+      if (!bfd_set_filename (n_bfd, filename))\n \tgoto out;\n     }\n "
    },
    {
      "sha": "d5c28a5ee25b9549fec8bcc029e2ab0871dbaf21",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
      "patch": "@@ -643,7 +643,7 @@ bfd_boolean bfd_fill_in_gnu_debuglink_section\n \n char *bfd_follow_build_id_debuglink (bfd *abfd, const char *dir);\n \n-void bfd_set_filename (bfd *abfd, char *filename);\n+const char *bfd_set_filename (bfd *abfd, const char *filename);\n \n /* Extracted from libbfd.c.  */\n "
    },
    {
      "sha": "5e6b2a430f8fe110d152a457b402f8073eb0fb28",
      "filename": "bfd/elfcode.h",
      "status": "modified",
      "additions": 2,
      "deletions": 11,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/bfd/elfcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/bfd/elfcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfcode.h?ref=7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
      "patch": "@@ -1680,7 +1680,6 @@ NAME(_bfd_elf,bfd_from_remote_memory)\n   bfd_vma high_offset;\n   bfd_vma shdr_end;\n   bfd_vma loadbase;  /* Bytes.  */\n-  char *filename;\n   size_t amt;\n   unsigned int opb = bfd_octets_per_byte (templ, NULL);\n \n@@ -1894,22 +1893,14 @@ NAME(_bfd_elf,bfd_from_remote_memory)\n       free (contents);\n       return NULL;\n     }\n-  filename = bfd_strdup (\"<in-memory>\");\n-  if (filename == NULL)\n-    {\n-      free (bim);\n-      free (contents);\n-      return NULL;\n-    }\n   nbfd = _bfd_new_bfd ();\n-  if (nbfd == NULL)\n+  if (nbfd == NULL\n+      || !bfd_set_filename (nbfd, \"<in-memory>\"))\n     {\n-      free (filename);\n       free (bim);\n       free (contents);\n       return NULL;\n     }\n-  nbfd->filename = filename;\n   nbfd->xvec = templ->xvec;\n   bim->size = high_offset;\n   bim->buffer = contents;"
    },
    {
      "sha": "43fa56cb5860504788ec6ad60a59f40d3ba932ac",
      "filename": "bfd/mach-o.c",
      "status": "modified",
      "additions": 7,
      "deletions": 10,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/bfd/mach-o.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/bfd/mach-o.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mach-o.c?ref=7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
      "patch": "@@ -5573,26 +5573,23 @@ bfd_mach_o_fat_member_init (bfd *abfd,\n   struct areltdata *areltdata;\n   /* Create the member filename. Use ARCH_NAME.  */\n   const bfd_arch_info_type *ap = bfd_lookup_arch (arch_type, arch_subtype);\n-  char *filename;\n+  const char *filename;\n \n   if (ap)\n     {\n       /* Use the architecture name if known.  */\n-      filename = bfd_strdup (ap->printable_name);\n-      if (filename == NULL)\n-\treturn FALSE;\n+      filename = bfd_set_filename (abfd, ap->printable_name);\n     }\n   else\n     {\n       /* Forge a uniq id.  */\n-      const size_t namelen = 2 + 8 + 1 + 2 + 8 + 1;\n-      filename = bfd_malloc (namelen);\n-      if (filename == NULL)\n-\treturn FALSE;\n-      snprintf (filename, namelen, \"0x%lx-0x%lx\",\n+      char buf[2 + 8 + 1 + 2 + 8 + 1];\n+      snprintf (buf, sizeof (buf), \"0x%lx-0x%lx\",\n \t\tentry->cputype, entry->cpusubtype);\n+      filename = bfd_set_filename (abfd, buf);\n     }\n-  bfd_set_filename (abfd, filename);\n+  if (!filename)\n+    return FALSE;\n \n   areltdata = bfd_zmalloc (sizeof (struct areltdata));\n   if (areltdata == NULL)"
    },
    {
      "sha": "78b2ad7dd759abc72776fa3375c0d8e9462a4925",
      "filename": "bfd/opncls.c",
      "status": "modified",
      "additions": 19,
      "deletions": 19,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/bfd/opncls.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/bfd/opncls.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/opncls.c?ref=7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
      "patch": "@@ -126,7 +126,6 @@ _bfd_delete_bfd (bfd *abfd)\n       objalloc_free ((struct objalloc *) abfd->memory);\n     }\n \n-  free ((char *) bfd_get_filename (abfd));\n   free (abfd->arelt_data);\n   free (abfd);\n }\n@@ -232,8 +231,7 @@ bfd_fopen (const char *filename, const char *target, const char *mode, int fd)\n \n   /* PR 11983: Do not cache the original filename, but\n      rather make a copy - the original might go away.  */\n-  nbfd->filename = bfd_strdup (filename);\n-  if (nbfd->filename == NULL)\n+  if (!bfd_set_filename (nbfd, filename))\n     {\n       fclose (nbfd->iostream);\n       _bfd_delete_bfd (nbfd);\n@@ -406,8 +404,7 @@ bfd_openstreamr (const char *filename, const char *target, void *streamarg)\n   nbfd->iostream = stream;\n   /* PR 11983: Do not cache the original filename, but\n      rather make a copy - the original might go away.  */\n-  nbfd->filename = bfd_strdup (filename);\n-  if (nbfd->filename == NULL)\n+  if (!bfd_set_filename (nbfd, filename))\n     {\n       _bfd_delete_bfd (nbfd);\n       return NULL;\n@@ -607,8 +604,7 @@ bfd_openr_iovec (const char *filename, const char *target,\n \n   /* PR 11983: Do not cache the original filename, but\n      rather make a copy - the original might go away.  */\n-  nbfd->filename = bfd_strdup (filename);\n-  if (nbfd->filename == NULL)\n+  if (!bfd_set_filename (nbfd, filename))\n     {\n       _bfd_delete_bfd (nbfd);\n       return NULL;\n@@ -679,8 +675,7 @@ bfd_openw (const char *filename, const char *target)\n \n   /* PR 11983: Do not cache the original filename, but\n      rather make a copy - the original might go away.  */\n-  nbfd->filename = bfd_strdup (filename);\n-  if (nbfd->filename == NULL)\n+  if (!bfd_set_filename (nbfd, filename))\n     {\n       _bfd_delete_bfd (nbfd);\n       return NULL;\n@@ -824,8 +819,7 @@ bfd_create (const char *filename, bfd *templ)\n     return NULL;\n   /* PR 11983: Do not cache the original filename, but\n      rather make a copy - the original might go away.  */\n-  nbfd->filename = bfd_strdup (filename);\n-  if (nbfd->filename == NULL)\n+  if (!bfd_set_filename (nbfd, filename))\n     {\n       _bfd_delete_bfd (nbfd);\n       return NULL;\n@@ -2040,17 +2034,23 @@ FUNCTION\n \tbfd_set_filename\n \n SYNOPSIS\n-\tvoid bfd_set_filename (bfd *abfd, char *filename);\n+\tconst char *bfd_set_filename (bfd *abfd, const char *filename);\n \n DESCRIPTION\n-\tSet the filename of @var{abfd}.  The old filename, if any, is freed.\n-\t@var{filename} must be allocated using @code{xmalloc}.  After\n-\tthis call, it is owned @var{abfd}.\n+\tSet the filename of @var{abfd}, copying the FILENAME parameter to\n+\tbfd_alloc'd memory owned by @var{abfd}.  Returns a pointer the\n+\tnewly allocated name, or NULL if the allocation failed.\n */\n \n-void\n-bfd_set_filename (bfd *abfd, char *filename)\n+const char *\n+bfd_set_filename (bfd *abfd, const char *filename)\n {\n-  free ((char *) abfd->filename);\n-  abfd->filename = filename;\n+  size_t len = strlen (filename) + 1;\n+  char *n = bfd_alloc (abfd, len);\n+  if (n)\n+    {\n+      memcpy (n, filename, len);\n+      abfd->filename = n;\n+    }\n+  return n;\n }"
    },
    {
      "sha": "6a8a76ecb034bb9b155dee595d07ca658e2c0ba6",
      "filename": "bfd/vms-lib.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/bfd/vms-lib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/bfd/vms-lib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-lib.c?ref=7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
      "patch": "@@ -1452,6 +1452,12 @@ _bfd_vms_lib_get_module (bfd *abfd, unsigned int modidx)\n       break;\n     }\n   bfd_set_filename (res, newname);\n+  free (newname);\n+  if (bfd_get_filename (res) == NULL)\n+    {\n+      bfd_close (res);\n+      return NULL;\n+    }\n \n   tdata->cache[modidx] = res;\n "
    },
    {
      "sha": "85a016bd6b7acff477083feac12110fbd65b1df1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
      "patch": "@@ -1,3 +1,15 @@\n+2020-05-20  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 25993\n+\t* solib-darwin.c (darwin_bfd_open): Don't strdup pathname for\n+\tbfd_set_filename.\n+\t* solib-aix.c (solib_aix_bfd_open): Use std::string for name\n+\tpassed to bfd_set_filename.\n+\t* symfile-mem.c (add_vsyscall_page): Likewise for string\n+\tpassed to symbol_file_add_from_memory.\n+\t(symbol_file_add_from_memory): Make name param a const char* and\n+\tdon't strdup.\n+\n 2020-05-20  Alan Modra  <amodra@gmail.com>\n \n \t* coff-pe-read.c (read_pe_exported_syms): Use bfd_get_filename"
    },
    {
      "sha": "344c1f57600310675200a4023b9f84707c073dcd",
      "filename": "gdb/solib-aix.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/gdb/solib-aix.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/gdb/solib-aix.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-aix.c?ref=7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
      "patch": "@@ -637,10 +637,10 @@ solib_aix_bfd_open (const char *pathname)\n      along with appended parenthesized member name in order to allow commands\n      listing all shared libraries to display.  Otherwise, we would only be\n      displaying the name of the archive member object.  */\n-  bfd_set_filename (object_bfd.get (),\n-\t\t    xstrprintf (\"%s%s\",\n-\t\t\t\tbfd_get_filename (archive_bfd.get ()),\n-\t\t\t\tsep));\n+  std::string fname = string_printf (\"%s%s\",\n+\t\t\t\t     bfd_get_filename (archive_bfd.get ()),\n+\t\t\t\t     sep);\n+  bfd_set_filename (object_bfd.get (), fname.c_str ());\n \n   return object_bfd;\n }"
    },
    {
      "sha": "ee0483d2c87a2702beb91c343a5bbf5e3ba23dde",
      "filename": "gdb/solib-darwin.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/gdb/solib-darwin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/gdb/solib-darwin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-darwin.c?ref=7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
      "patch": "@@ -662,7 +662,7 @@ darwin_bfd_open (const char *pathname)\n   /* The current filename for fat-binary BFDs is a name generated\n      by BFD, usually a string containing the name of the architecture.\n      Reset its value to the actual filename.  */\n-  bfd_set_filename (res.get (), xstrdup (pathname));\n+  bfd_set_filename (res.get (), pathname);\n \n   return res;\n }"
    },
    {
      "sha": "78096fcbae19e9691da3e5aa6c6726dfebd7db83",
      "filename": "gdb/symfile-mem.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/gdb/symfile-mem.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/gdb/symfile-mem.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-mem.c?ref=7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
      "patch": "@@ -78,11 +78,10 @@ target_read_memory_bfd (bfd_vma memaddr, bfd_byte *myaddr, bfd_size_type len)\n    and read its in-core symbols out of inferior memory.  SIZE, if\n    non-zero, is the known size of the object.  TEMPL is a bfd\n    representing the target's format.  NAME is the name to use for this\n-   symbol file in messages; it can be NULL or a malloc-allocated string\n-   which will be attached to the BFD.  */\n+   symbol file in messages; it can be NULL.  */\n static struct objfile *\n symbol_file_add_from_memory (struct bfd *templ, CORE_ADDR addr,\n-\t\t\t     size_t size, char *name, int from_tty)\n+\t\t\t     size_t size, const char *name, int from_tty)\n {\n   struct objfile *objf;\n   struct bfd *nbfd;\n@@ -102,7 +101,7 @@ symbol_file_add_from_memory (struct bfd *templ, CORE_ADDR addr,\n   gdb_bfd_ref_ptr nbfd_holder = gdb_bfd_ref_ptr::new_reference (nbfd);\n \n   if (name == NULL)\n-    name = xstrdup (\"shared object read from target memory\");\n+    name = \"shared object read from target memory\";\n   bfd_set_filename (nbfd, name);\n \n   if (!bfd_check_format (nbfd, bfd_object))\n@@ -183,8 +182,9 @@ add_vsyscall_page (struct target_ops *target, int from_tty)\n \t  return;\n \t}\n \n-      char *name = xstrprintf (\"system-supplied DSO at %s\",\n-\t\t\t       paddress (target_gdbarch (), vsyscall_range.start));\n+      std::string name = string_printf (\"system-supplied DSO at %s\",\n+\t\t\t\t\tpaddress (target_gdbarch (),\n+\t\t\t\t\t\t  vsyscall_range.start));\n       try\n \t{\n \t  /* Pass zero for FROM_TTY, because the action of loading the\n@@ -193,7 +193,7 @@ add_vsyscall_page (struct target_ops *target, int from_tty)\n \t  symbol_file_add_from_memory (bfd,\n \t\t\t\t       vsyscall_range.start,\n \t\t\t\t       vsyscall_range.length,\n-\t\t\t\t       name,\n+\t\t\t\t       name.c_str (),\n \t\t\t\t       0 /* from_tty */);\n \t}\n       catch (const gdb_exception &ex)"
    },
    {
      "sha": "b4ee76c2606d490d2f68a119f0045e33ceb25adb",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
      "patch": "@@ -1,3 +1,12 @@\n+2020-05-20  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 25993\n+\t* emultempl/pe.em (gld_${EMULATION_NAME}_after_open): Don't copy\n+\tother_bfd_filename for bfd_set_filename, and test result of\n+\tbfd_set_filename call.  Don't create a new is->filename, simply\n+\tcopy from bfd filename.  Free new_name after bfd_set_filename.\n+\t* emultempl/pep.em (gld_${EMULATION_NAME}_after_open): Likewise.\n+\n 2020-05-19  Siddhesh Poyarekar  <siddesh.poyarekar@arm.com>\n \n \t* testsuite/ld-aarch64/aarch64-elf.exp: New test"
    },
    {
      "sha": "8c5ee762334b387ef9e35a5a9aaea43267c1453f",
      "filename": "ld/emultempl/pe.em",
      "status": "modified",
      "additions": 11,
      "deletions": 26,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/ld/emultempl/pe.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/ld/emultempl/pe.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pe.em?ref=7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
      "patch": "@@ -1523,7 +1523,6 @@ gld_${EMULATION_NAME}_after_open (void)\n \t\t\tstruct bfd_symbol *s;\n \t\t\tstruct bfd_link_hash_entry * blhe;\n \t\t\tconst char *other_bfd_filename;\n-\t\t\tchar *n;\n \n \t\t\ts = (relocs[i]->sym_ptr_ptr)[0];\n \n@@ -1550,9 +1549,9 @@ gld_${EMULATION_NAME}_after_open (void)\n \t\t\t  continue;\n \n \t\t\t/* Rename this implib to match the other one.  */\n-\t\t\tn = xmalloc (strlen (other_bfd_filename) + 1);\n-\t\t\tstrcpy (n, other_bfd_filename);\n-\t\t\tbfd_set_filename (is->the_bfd->my_archive, n);\n+\t\t\tif (!bfd_set_filename (is->the_bfd->my_archive,\n+\t\t\t\t\t       other_bfd_filename))\n+\t\t\t  einfo (\"%F%P: %pB: %E\\n\", is->the_bfd);\n \t\t      }\n \n \t\t    free (relocs);\n@@ -1655,28 +1654,14 @@ gld_${EMULATION_NAME}_after_open (void)\n \t\telse /* sentinel */\n \t\t  seq = 'c';\n \n-\t\t/* PR 25993: It is possible that is->the_bfd-filename == is->filename.\n-\t\t   In which case calling bfd_set_filename on one will free the memory\n-\t\t   pointed to by the other.  */\n-\t\tif (is->filename == bfd_get_filename (is->the_bfd))\n-\t\t  {\n-\t\t    new_name = xmalloc (strlen (is->filename) + 3);\n-\t\t    sprintf (new_name, \"%s.%c\", is->filename, seq);\n-\t\t    bfd_set_filename (is->the_bfd, new_name);\n-\t\t    is->filename = new_name;\n-\t\t  }\n-\t\telse\n-\t\t  {\n-\t\t    new_name\n-\t\t      = xmalloc (strlen (bfd_get_filename (is->the_bfd)) + 3);\n-\t\t    sprintf (new_name, \"%s.%c\",\n-\t\t\t     bfd_get_filename (is->the_bfd), seq);\n-\t\t    bfd_set_filename (is->the_bfd, new_name);\n-\n-\t\t    new_name = xmalloc (strlen (is->filename) + 3);\n-\t\t    sprintf (new_name, \"%s.%c\", is->filename, seq);\n-\t\t    is->filename = new_name;\n-\t\t  }\n+\t\tnew_name\n+\t\t  = xmalloc (strlen (bfd_get_filename (is->the_bfd)) + 3);\n+\t\tsprintf (new_name, \"%s.%c\",\n+\t\t\t bfd_get_filename (is->the_bfd), seq);\n+\t\tis->filename = bfd_set_filename (is->the_bfd, new_name);\n+\t\tfree (new_name);\n+\t\tif (!is->filename)\n+\t\t  einfo (\"%F%P: %pB: %E\\n\", is->the_bfd);\n \t      }\n \t  }\n       }"
    },
    {
      "sha": "ea8e768ea93f7825e9546d08ff029286ec26ddf5",
      "filename": "ld/emultempl/pep.em",
      "status": "modified",
      "additions": 11,
      "deletions": 26,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/ld/emultempl/pep.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b958a48e1322880f23cdb0a1c35643dd27d3ddb/ld/emultempl/pep.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pep.em?ref=7b958a48e1322880f23cdb0a1c35643dd27d3ddb",
      "patch": "@@ -1491,7 +1491,6 @@ gld_${EMULATION_NAME}_after_open (void)\n \t\t\tstruct bfd_symbol *s;\n \t\t\tstruct bfd_link_hash_entry * blhe;\n \t\t\tconst char *other_bfd_filename;\n-\t\t\tchar *n;\n \n \t\t\ts = (relocs[i]->sym_ptr_ptr)[0];\n \n@@ -1518,9 +1517,9 @@ gld_${EMULATION_NAME}_after_open (void)\n \t\t\t  continue;\n \n \t\t\t/* Rename this implib to match the other one.  */\n-\t\t\tn = xmalloc (strlen (other_bfd_filename) + 1);\n-\t\t\tstrcpy (n, other_bfd_filename);\n-\t\t\tbfd_set_filename (is->the_bfd->my_archive, n);\n+\t\t\tif (!bfd_set_filename (is->the_bfd->my_archive,\n+\t\t\t\t\t       other_bfd_filename))\n+\t\t\t  einfo (\"%F%P: %pB: %E\\n\", is->the_bfd);\n \t\t      }\n \n \t\t    free (relocs);\n@@ -1623,28 +1622,14 @@ gld_${EMULATION_NAME}_after_open (void)\n \t\telse /* sentinel */\n \t\t  seq = 'c';\n \n-\t\t/* PR 25993: It is possible that is->the_bfd-filename == is->filename.\n-\t\t   In which case calling bfd_set_filename on one will free the memory\n-\t\t   pointed to by the other.  */\n-\t\tif (is->filename == bfd_get_filename (is->the_bfd))\n-\t\t  {\n-\t\t    new_name = xmalloc (strlen (is->filename) + 3);\n-\t\t    sprintf (new_name, \"%s.%c\", is->filename, seq);\n-\t\t    bfd_set_filename (is->the_bfd, new_name);\n-\t\t    is->filename = new_name;\n-\t\t  }\n-\t\telse\n-\t\t  {\n-\t\t    new_name\n-\t\t      = xmalloc (strlen (bfd_get_filename (is->the_bfd)) + 3);\n-\t\t    sprintf (new_name, \"%s.%c\",\n-\t\t\t     bfd_get_filename (is->the_bfd), seq);\n-\t\t    bfd_set_filename (is->the_bfd, new_name);\n-\n-\t\t    new_name = xmalloc (strlen (is->filename) + 3);\n-\t\t    sprintf (new_name, \"%s.%c\", is->filename, seq);\n-\t\t    is->filename = new_name;\n-\t\t  }\n+\t\tnew_name\n+\t\t  = xmalloc (strlen (bfd_get_filename (is->the_bfd)) + 3);\n+\t\tsprintf (new_name, \"%s.%c\",\n+\t\t\t bfd_get_filename (is->the_bfd), seq);\n+\t\tis->filename = bfd_set_filename (is->the_bfd, new_name);\n+\t\tfree (new_name);\n+\t\tif (!is->filename)\n+\t\t  einfo (\"%F%P: %pB: %E\\n\", is->the_bfd);\n \t      }\n \t  }\n       }"
    }
  ]
}