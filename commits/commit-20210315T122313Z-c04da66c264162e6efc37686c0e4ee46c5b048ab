{
  "sha": "c04da66c264162e6efc37686c0e4ee46c5b048ab",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzA0ZGE2NmMyNjQxNjJlNmVmYzM3Njg2YzBlNGVlNDZjNWIwNDhhYg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-03-15T12:23:12Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-03-15T12:23:13Z"
    },
    "message": "Implement Ada operator overloading\n\nIn the expression rewrite, I neglected to carry over support for Ada\noperator overloading.  It turns out that there were no tests for this\nin-tree.\n\nThis patch adds support for operator overloading, and adds the missing\ntest.\n\ngdb/ChangeLog\n2021-03-15  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-lang.c (numeric_type_p, integer_type_p): Return true for\n\tfixed-point.\n\t* ada-exp.y (maybe_overload): New function.\n\t(ada_wrap_overload): New function.\n\t(ada_un_wrap2, ada_wrap2, ada_wrap_op): Use maybe_overload.\n\t(exp1, simple_exp, relation, and_exp, and_then_exp, or_exp)\n\t(or_else_exp, xor_exp, primary): Update.\n\ngdb/testsuite/ChangeLog\n2021-03-15  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/operator_call/twovecs.ads: New file.\n\t* gdb.ada/operator_call/twovecs.adb: New file.\n\t* gdb.ada/operator_call/opcall.adb: New file.\n\t* gdb.ada/operator_call.exp: New file.",
    "tree": {
      "sha": "f87389e0dfdedf5f5a918742261d11ae29babcf3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f87389e0dfdedf5f5a918742261d11ae29babcf3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c04da66c264162e6efc37686c0e4ee46c5b048ab",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c04da66c264162e6efc37686c0e4ee46c5b048ab",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c04da66c264162e6efc37686c0e4ee46c5b048ab",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c04da66c264162e6efc37686c0e4ee46c5b048ab/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9863c3b5fc64eec400ed55792a49c678927a6145",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9863c3b5fc64eec400ed55792a49c678927a6145",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9863c3b5fc64eec400ed55792a49c678927a6145"
    }
  ],
  "stats": {
    "total": 502,
    "additions": 467,
    "deletions": 35
  },
  "files": [
    {
      "sha": "a5580fde4d6e63d5067a7fd799b4a05ec639ac15",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c04da66c264162e6efc37686c0e4ee46c5b048ab/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c04da66c264162e6efc37686c0e4ee46c5b048ab/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c04da66c264162e6efc37686c0e4ee46c5b048ab",
      "patch": "@@ -1,3 +1,13 @@\n+2021-03-15  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-lang.c (numeric_type_p, integer_type_p): Return true for\n+\tfixed-point.\n+\t* ada-exp.y (maybe_overload): New function.\n+\t(ada_wrap_overload): New function.\n+\t(ada_un_wrap2, ada_wrap2, ada_wrap_op): Use maybe_overload.\n+\t(exp1, simple_exp, relation, and_exp, and_then_exp, or_exp)\n+\t(or_else_exp, xor_exp, primary): Update.\n+\n 2021-03-15  Tom Tromey  <tromey@adacore.com>\n \n \tPR ada/27545:"
    },
    {
      "sha": "e8ffb8e1040b430ff6c6acb3d29a264437ccf493",
      "filename": "gdb/ada-exp.y",
      "status": "modified",
      "additions": 120,
      "deletions": 35,
      "changes": 155,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c04da66c264162e6efc37686c0e4ee46c5b048ab/gdb/ada-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c04da66c264162e6efc37686c0e4ee46c5b048ab/gdb/ada-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.y?ref=c04da66c264162e6efc37686c0e4ee46c5b048ab",
      "patch": "@@ -166,29 +166,92 @@ ada_addrof (struct type *type = nullptr)\n   pstate->push (std::move (wrapped));\n }\n \n+/* Handle operator overloading.  Either returns a function all\n+   operation wrapping the arguments, or it returns null, leaving the\n+   caller to construct the appropriate operation.  If RHS is null, a\n+   unary operator is assumed.  */\n+static operation_up\n+maybe_overload (enum exp_opcode op, operation_up &lhs, operation_up &rhs)\n+{\n+  struct value *args[2];\n+\n+  int nargs = 1;\n+  args[0] = lhs->evaluate (nullptr, pstate->expout.get (),\n+\t\t\t   EVAL_AVOID_SIDE_EFFECTS);\n+  if (rhs == nullptr)\n+    args[1] = nullptr;\n+  else\n+    {\n+      args[1] = rhs->evaluate (nullptr, pstate->expout.get (),\n+\t\t\t       EVAL_AVOID_SIDE_EFFECTS);\n+      ++nargs;\n+    }\n+\n+  block_symbol fn = ada_find_operator_symbol (op, pstate->parse_completion,\n+\t\t\t\t\t      nargs, args);\n+  if (fn.symbol == nullptr)\n+    return {};\n+\n+  if (symbol_read_needs_frame (fn.symbol))\n+    pstate->block_tracker->update (fn.block, INNERMOST_BLOCK_FOR_SYMBOLS);\n+  operation_up callee\n+    = make_operation<ada_var_value_operation> (fn.symbol, fn.block);\n+\n+  std::vector<operation_up> argvec;\n+  argvec.push_back (std::move (lhs));\n+  if (rhs != nullptr)\n+    argvec.push_back (std::move (rhs));\n+  return make_operation<ada_funcall_operation> (std::move (callee),\n+\t\t\t\t\t\tstd::move (argvec));\n+}\n+\n+/* Like parser_state::wrap, but use ada_pop to pop the value, and\n+   handle unary overloading.  */\n+template<typename T>\n+void\n+ada_wrap_overload (enum exp_opcode op)\n+{\n+  operation_up arg = ada_pop ();\n+  operation_up empty;\n+\n+  operation_up call = maybe_overload (op, arg, empty);\n+  if (call == nullptr)\n+    call = make_operation<T> (std::move (arg));\n+  pstate->push (std::move (call));\n+}\n+\n /* A variant of parser_state::wrap2 that uses ada_pop to pop both\n    operands, and then pushes a new Ada-wrapped operation of the\n    template type T.  */\n template<typename T>\n void\n-ada_un_wrap2 ()\n+ada_un_wrap2 (enum exp_opcode op)\n {\n   operation_up rhs = ada_pop ();\n   operation_up lhs = ada_pop ();\n-  operation_up wrapped = make_operation<T> (std::move (lhs), std::move (rhs));\n-  pstate->push_new<ada_wrapped_operation> (std::move (wrapped));\n+\n+  operation_up wrapped = maybe_overload (op, lhs, rhs);\n+  if (wrapped == nullptr)\n+    {\n+      wrapped = make_operation<T> (std::move (lhs), std::move (rhs));\n+      wrapped = make_operation<ada_wrapped_operation> (std::move (wrapped));\n+    }\n+  pstate->push (std::move (wrapped));\n }\n \n /* A variant of parser_state::wrap2 that uses ada_pop to pop both\n    operands.  Unlike ada_un_wrap2, ada_wrapped_operation is not\n    used.  */\n template<typename T>\n void\n-ada_wrap2 ()\n+ada_wrap2 (enum exp_opcode op)\n {\n   operation_up rhs = ada_pop ();\n   operation_up lhs = ada_pop ();\n-  pstate->push_new<T> (std::move (lhs), std::move (rhs));\n+  operation_up call = maybe_overload (op, lhs, rhs);\n+  if (call == nullptr)\n+    call = make_operation<T> (std::move (lhs), std::move (rhs));\n+  pstate->push (std::move (call));\n }\n \n /* A variant of parser_state::wrap2 that uses ada_pop to pop both\n@@ -200,7 +263,10 @@ ada_wrap_op (enum exp_opcode op)\n {\n   operation_up rhs = ada_pop ();\n   operation_up lhs = ada_pop ();\n-  pstate->push_new<T> (op, std::move (lhs), std::move (rhs));\n+  operation_up call = maybe_overload (op, lhs, rhs);\n+  if (call == nullptr)\n+    call = make_operation<T> (op, std::move (lhs), std::move (rhs));\n+  pstate->push (std::move (call));\n }\n \n /* Pop three operands using ada_pop, then construct a new ternary\n@@ -411,7 +477,7 @@ start   :\texp1\n /* Expressions, including the sequencing operator.  */\n exp1\t:\texp\n \t|\texp1 ';' exp\n-\t\t\t{ ada_wrap2<comma_operation> (); }\n+\t\t\t{ ada_wrap2<comma_operation> (BINOP_COMMA); }\n \t| \tprimary ASSIGN exp   /* Extension for convenience */\n \t\t\t{\n \t\t\t  operation_up rhs = pstate->pop ();\n@@ -515,21 +581,32 @@ simple_exp : \tprimary\n \t;\n \n simple_exp :\t'-' simple_exp    %prec UNARY\n-\t\t\t{ ada_wrap<ada_neg_operation> (); }\n+\t\t\t{ ada_wrap_overload<ada_neg_operation> (UNOP_NEG); }\n \t;\n \n simple_exp :\t'+' simple_exp    %prec UNARY\n \t\t\t{\n-\t\t\t  /* No need to do anything.  */\n+\t\t\t  operation_up arg = ada_pop ();\n+\t\t\t  operation_up empty;\n+\n+\t\t\t  /* We only need to handle the overloading\n+\t\t\t     case here, not anything else.  */\n+\t\t\t  operation_up call = maybe_overload (UNOP_PLUS, arg,\n+\t\t\t\t\t\t\t      empty);\n+\t\t\t  if (call != nullptr)\n+\t\t\t    pstate->push (std::move (call));\n \t\t\t}\n \t;\n \n simple_exp :\tNOT simple_exp    %prec UNARY\n-\t\t\t{ ada_wrap<unary_logical_not_operation> (); }\n+\t\t\t{\n+\t\t\t  ada_wrap_overload<unary_logical_not_operation>\n+\t\t\t    (UNOP_LOGICAL_NOT);\n+\t\t\t}\n \t;\n \n simple_exp :    ABS simple_exp\t   %prec UNARY\n-\t\t\t{ ada_wrap<ada_abs_operation> (); }\n+\t\t\t{ ada_wrap_overload<ada_abs_operation> (UNOP_ABS); }\n \t;\n \n arglist\t:\t\t{ $$ = 0; }\n@@ -559,35 +636,35 @@ primary :\t'{' var_or_type '}' primary  %prec '.'\n /* Binary operators in order of decreasing precedence.  */\n \n simple_exp \t: \tsimple_exp STARSTAR simple_exp\n-\t\t\t{ ada_wrap2<ada_binop_exp_operation> (); }\n+\t\t\t{ ada_wrap2<ada_binop_exp_operation> (BINOP_EXP); }\n \t;\n \n simple_exp\t:\tsimple_exp '*' simple_exp\n-\t\t\t{ ada_wrap2<ada_binop_mul_operation> (); }\n+\t\t\t{ ada_wrap2<ada_binop_mul_operation> (BINOP_MUL); }\n \t;\n \n simple_exp\t:\tsimple_exp '/' simple_exp\n-\t\t\t{ ada_wrap2<ada_binop_div_operation> (); }\n+\t\t\t{ ada_wrap2<ada_binop_div_operation> (BINOP_DIV); }\n \t;\n \n simple_exp\t:\tsimple_exp REM simple_exp /* May need to be fixed to give correct Ada REM */\n-\t\t\t{ ada_wrap2<ada_binop_rem_operation> (); }\n+\t\t\t{ ada_wrap2<ada_binop_rem_operation> (BINOP_REM); }\n \t;\n \n simple_exp\t:\tsimple_exp MOD simple_exp\n-\t\t\t{ ada_wrap2<ada_binop_mod_operation> (); }\n+\t\t\t{ ada_wrap2<ada_binop_mod_operation> (BINOP_MOD); }\n \t;\n \n simple_exp\t:\tsimple_exp '@' simple_exp\t/* GDB extension */\n-\t\t\t{ ada_wrap2<repeat_operation> (); }\n+\t\t\t{ ada_wrap2<repeat_operation> (BINOP_REPEAT); }\n \t;\n \n simple_exp\t:\tsimple_exp '+' simple_exp\n \t\t\t{ ada_wrap_op<ada_binop_addsub_operation> (BINOP_ADD); }\n \t;\n \n simple_exp\t:\tsimple_exp '&' simple_exp\n-\t\t\t{ ada_wrap2<concat_operation> (); }\n+\t\t\t{ ada_wrap2<concat_operation> (BINOP_CONCAT); }\n \t;\n \n simple_exp\t:\tsimple_exp '-' simple_exp\n@@ -606,7 +683,7 @@ relation :\tsimple_exp NOTEQUAL simple_exp\n \t;\n \n relation :\tsimple_exp LEQ simple_exp\n-\t\t\t{ ada_un_wrap2<leq_operation> (); }\n+\t\t\t{ ada_un_wrap2<leq_operation> (BINOP_LEQ); }\n \t;\n \n relation :\tsimple_exp IN simple_exp DOTDOT simple_exp\n@@ -649,15 +726,15 @@ relation :\tsimple_exp IN simple_exp DOTDOT simple_exp\n \t;\n \n relation :\tsimple_exp GEQ simple_exp\n-\t\t\t{ ada_un_wrap2<geq_operation> (); }\n+\t\t\t{ ada_un_wrap2<geq_operation> (BINOP_GEQ); }\n \t;\n \n relation :\tsimple_exp '<' simple_exp\n-\t\t\t{ ada_un_wrap2<less_operation> (); }\n+\t\t\t{ ada_un_wrap2<less_operation> (BINOP_LESS); }\n \t;\n \n relation :\tsimple_exp '>' simple_exp\n-\t\t\t{ ada_un_wrap2<gtr_operation> (); }\n+\t\t\t{ ada_un_wrap2<gtr_operation> (BINOP_GTR); }\n \t;\n \n exp\t:\trelation\n@@ -670,36 +747,44 @@ exp\t:\trelation\n \n and_exp :\n \t\trelation _AND_ relation \n-\t\t\t{ ada_wrap2<ada_bitwise_and_operation> (); }\n+\t\t\t{ ada_wrap2<ada_bitwise_and_operation>\n+\t\t\t    (BINOP_BITWISE_AND); }\n \t|\tand_exp _AND_ relation\n-\t\t\t{ ada_wrap2<ada_bitwise_and_operation> (); }\n+\t\t\t{ ada_wrap2<ada_bitwise_and_operation>\n+\t\t\t    (BINOP_BITWISE_AND); }\n \t;\n \n and_then_exp :\n \t       relation _AND_ THEN relation\n-\t\t\t{ ada_wrap2<logical_and_operation> (); }\n+\t\t\t{ ada_wrap2<logical_and_operation>\n+\t\t\t    (BINOP_LOGICAL_AND); }\n \t|\tand_then_exp _AND_ THEN relation\n-\t\t\t{ ada_wrap2<logical_and_operation> (); }\n+\t\t\t{ ada_wrap2<logical_and_operation>\n+\t\t\t    (BINOP_LOGICAL_AND); }\n \t;\n \n or_exp :\n \t\trelation OR relation \n-\t\t\t{ ada_wrap2<ada_bitwise_ior_operation> (); }\n+\t\t\t{ ada_wrap2<ada_bitwise_ior_operation>\n+\t\t\t    (BINOP_BITWISE_IOR); }\n \t|\tor_exp OR relation\n-\t\t\t{ ada_wrap2<ada_bitwise_ior_operation> (); }\n+\t\t\t{ ada_wrap2<ada_bitwise_ior_operation>\n+\t\t\t    (BINOP_BITWISE_IOR); }\n \t;\n \n or_else_exp :\n \t       relation OR ELSE relation\n-\t\t\t{ ada_wrap2<logical_or_operation> (); }\n+\t\t\t{ ada_wrap2<logical_or_operation> (BINOP_LOGICAL_OR); }\n \t|      or_else_exp OR ELSE relation\n-\t\t\t{ ada_wrap2<logical_or_operation> (); }\n+\t\t\t{ ada_wrap2<logical_or_operation> (BINOP_LOGICAL_OR); }\n \t;\n \n xor_exp :       relation XOR relation\n-\t\t\t{ ada_wrap2<ada_bitwise_xor_operation> (); }\n+\t\t\t{ ada_wrap2<ada_bitwise_xor_operation>\n+\t\t\t    (BINOP_BITWISE_XOR); }\n \t|\txor_exp XOR relation\n-\t\t\t{ ada_wrap2<ada_bitwise_xor_operation> (); }\n+\t\t\t{ ada_wrap2<ada_bitwise_xor_operation>\n+\t\t\t    (BINOP_BITWISE_XOR); }\n \t;\n \n /* Primaries can denote types (OP_TYPE).  In cases such as \n@@ -737,9 +822,9 @@ primary :\tprimary TICK_ACCESS\n \t|\tprimary TICK_TAG\n \t\t\t{ ada_wrap<ada_atr_tag_operation> (); }\n \t|       opt_type_prefix TICK_MIN '(' exp ',' exp ')'\n-\t\t\t{ ada_wrap2<ada_binop_min_operation> (); }\n+\t\t\t{ ada_wrap2<ada_binop_min_operation> (BINOP_MIN); }\n \t|       opt_type_prefix TICK_MAX '(' exp ',' exp ')'\n-\t\t\t{ ada_wrap2<ada_binop_max_operation> (); }\n+\t\t\t{ ada_wrap2<ada_binop_max_operation> (BINOP_MAX); }\n \t| \topt_type_prefix TICK_POS '(' exp ')'\n \t\t\t{ ada_wrap<ada_pos_operation> (); }\n \t|\ttype_prefix TICK_VAL '(' exp ')'\n@@ -970,7 +1055,7 @@ primary\t:\t'*' primary\t\t%prec '.'\n \t\t\t{ ada_addrof (); }\n \t|\tprimary '[' exp ']'\n \t\t\t{\n-\t\t\t  ada_wrap2<subscript_operation> ();\n+\t\t\t  ada_wrap2<subscript_operation> (BINOP_SUBSCRIPT);\n \t\t\t  ada_wrap<ada_wrapped_operation> ();\n \t\t\t}\n \t;"
    },
    {
      "sha": "a74f5408484677d00c0ff7b645483aa58e75f1ed",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c04da66c264162e6efc37686c0e4ee46c5b048ab/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c04da66c264162e6efc37686c0e4ee46c5b048ab/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=c04da66c264162e6efc37686c0e4ee46c5b048ab",
      "patch": "@@ -3690,6 +3690,7 @@ numeric_type_p (struct type *type)\n \t{\n \tcase TYPE_CODE_INT:\n \tcase TYPE_CODE_FLT:\n+\tcase TYPE_CODE_FIXED_POINT:\n \t  return 1;\n \tcase TYPE_CODE_RANGE:\n \t  return (type == TYPE_TARGET_TYPE (type)\n@@ -3737,6 +3738,7 @@ scalar_type_p (struct type *type)\n \tcase TYPE_CODE_RANGE:\n \tcase TYPE_CODE_ENUM:\n \tcase TYPE_CODE_FLT:\n+\tcase TYPE_CODE_FIXED_POINT:\n \t  return 1;\n \tdefault:\n \t  return 0;"
    },
    {
      "sha": "728405e960687cf56d74f0c04932c973411b3c90",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c04da66c264162e6efc37686c0e4ee46c5b048ab/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c04da66c264162e6efc37686c0e4ee46c5b048ab/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=c04da66c264162e6efc37686c0e4ee46c5b048ab",
      "patch": "@@ -1,3 +1,10 @@\n+2021-03-15  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/operator_call/twovecs.ads: New file.\n+\t* gdb.ada/operator_call/twovecs.adb: New file.\n+\t* gdb.ada/operator_call/opcall.adb: New file.\n+\t* gdb.ada/operator_call.exp: New file.\n+\n 2021-03-15  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.ada/enums_overload/enums_overload_main.adb: New file."
    },
    {
      "sha": "4a35c5c60009b6d074db65d4c4dadd854c871bb3",
      "filename": "gdb/testsuite/gdb.ada/operator_call.exp",
      "status": "added",
      "additions": 115,
      "deletions": 0,
      "changes": 115,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c04da66c264162e6efc37686c0e4ee46c5b048ab/gdb/testsuite/gdb.ada/operator_call.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c04da66c264162e6efc37686c0e4ee46c5b048ab/gdb/testsuite/gdb.ada/operator_call.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/operator_call.exp?ref=c04da66c264162e6efc37686c0e4ee46c5b048ab",
      "patch": "@@ -0,0 +1,115 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+load_lib \"ada.exp\"\n+\n+if { [skip_ada_tests] } { return -1 }\n+\n+standard_ada_testfile opcall\n+\n+if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable {debug}] != \"\"} {\n+    return -1\n+}\n+\n+clean_restart ${testfile}\n+\n+set bp_location [gdb_get_line_number \"STOP\" ${testdir}/opcall.adb]\n+runto \"opcall.adb:$bp_location\"\n+\n+gdb_test \"print p\" \" = \\\\(x => 4, y => 5\\\\)\"\n+\n+proc test_with_menu {command result} {\n+    global expect_out\n+\n+    set rxcmd [string_to_regexp $command]\n+\n+    set num {}\n+    send_gdb \"$command\\n\"\n+    gdb_expect 30 {\n+\t-re \"^$rxcmd\\r\\n\" {\n+\t    exp_continue\n+\t}\n+\t-re \"Multiple matches for \\[^\\r\\n\\]*\\r\\n\" {\n+\t    exp_continue\n+\t}\n+\t-re \"^\\\\\\[(\\[0-9\\]+)\\\\\\] twovecs\\\\.*\\[^\\r\\n\\]*\\r\\n\" {\n+\t    set num $expect_out(1,string)\n+\t    exp_continue\n+\t}\n+\t-re \"^\\\\\\[\\[0-9\\]+\\\\\\] \\[^\\r\\n\\]*\\r\\n\" {\n+\t    # Any other match, we don't want.\n+\t    exp_continue\n+\t}\n+\t-re \"^> \" {\n+\t    if {$num == \"\"} {\n+\t\tfail $command\n+\t\tset num 0\n+\t    }\n+\t    send_gdb \"$num\\n\"\n+\t    exp_continue\n+\t}\n+\t-re \"^\\[0-9\\]+\\r\\n\" {\n+\t    # The number we just sent, ignore.\n+\t    exp_continue\n+\t}\n+\t-re \"\\\\\\$\\[0-9\\]+ = (\\[^\\r\\n\\]+)\\r\\n\" {\n+\t    if {[regexp $result $expect_out(1,string)]} {\n+\t\tpass $command\n+\t    } else {\n+\t\tfail $command\n+\t    }\n+\t}\n+\ttimeout {\n+\t    fail \"$command (timeout)\"\n+\t}\n+    }\n+}\n+\n+test_with_menu \"print p + p\" \"\\\\(x => 8, y => 10\\\\)\"\n+test_with_menu \"print p - p\" \"\\\\(x => 0, y => 0\\\\)\"\n+test_with_menu \"print p * p\" \"\\\\(x => 16, y => 25\\\\)\"\n+test_with_menu \"print p / p\" \"\\\\(x => 1, y => 1\\\\)\"\n+\n+# See the code to understand the weird numbers here.\n+test_with_menu \"print p mod p\" \"\\\\(x => 17, y => 18\\\\)\"\n+test_with_menu \"print p rem p\" \"\\\\(x => 38, y => 39\\\\)\"\n+test_with_menu \"print p ** p\" \"\\\\(x => 84, y => 105\\\\)\"\n+\n+test_with_menu \"print p < p\" \"false\"\n+test_with_menu \"print p < p2\" \"true\"\n+test_with_menu \"print p <= p\" \"true\"\n+test_with_menu \"print p <= p2\" \"true\"\n+test_with_menu \"print p > p\" \"false\"\n+test_with_menu \"print p2 > p\" \"true\"\n+test_with_menu \"print p >= p\" \"true\"\n+test_with_menu \"print p2 >= p\" \"true\"\n+test_with_menu \"print p = p\" \"true\"\n+test_with_menu \"print p = p2\" \"false\"\n+test_with_menu \"print p /= p\" \"false\"\n+test_with_menu \"print p /= p2\" \"true\"\n+\n+test_with_menu \"print p and p2\" \"\\\\(x => 4, y => 4\\\\)\"\n+test_with_menu \"print p or p2\" \"\\\\(x => 12, y => 13\\\\)\"\n+test_with_menu \"print p xor p2\" \"\\\\(x => 8, y => 9\\\\)\"\n+\n+# See the code to understand the weird numbers here.\n+test_with_menu \"print p & p\" \"\\\\(x => 44, y => 55\\\\)\"\n+\n+test_with_menu \"print -p\" \"\\\\(x => 65532, y => 65531\\\\)\"\n+test_with_menu \"print abs(-p)\" \"\\\\(x => 65532, y => 65531\\\\)\"\n+test_with_menu \"print not(p)\" \"\\\\(x => 65531, y => 65530\\\\)\"\n+\n+# See the code to understand the weird numbers here.\n+test_with_menu \"print +(p)\" \"\\\\(x => 5, y => 4\\\\)\""
    },
    {
      "sha": "3b0de905fc7cebedc3c4aefbb7d13cc5c127fdf9",
      "filename": "gdb/testsuite/gdb.ada/operator_call/opcall.adb",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c04da66c264162e6efc37686c0e4ee46c5b048ab/gdb/testsuite/gdb.ada/operator_call/opcall.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c04da66c264162e6efc37686c0e4ee46c5b048ab/gdb/testsuite/gdb.ada/operator_call/opcall.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/operator_call/opcall.adb?ref=c04da66c264162e6efc37686c0e4ee46c5b048ab",
      "patch": "@@ -0,0 +1,25 @@\n+--  Copyright 2021 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+with Twovecs; use Twovecs;\n+\n+procedure Opcall is\n+   P : Twovec;\n+   P2 : Twovec;\n+begin\n+   P := Pt (4, 5);\n+   P2 := Pt (12, 12);\n+   Do_Nothing (P); -- STOP\n+end Opcall;"
    },
    {
      "sha": "477e1934dc5a01def7bb3b6eb524c9903397a530",
      "filename": "gdb/testsuite/gdb.ada/operator_call/twovecs.adb",
      "status": "added",
      "additions": 133,
      "deletions": 0,
      "changes": 133,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c04da66c264162e6efc37686c0e4ee46c5b048ab/gdb/testsuite/gdb.ada/operator_call/twovecs.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c04da66c264162e6efc37686c0e4ee46c5b048ab/gdb/testsuite/gdb.ada/operator_call/twovecs.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/operator_call/twovecs.adb?ref=c04da66c264162e6efc37686c0e4ee46c5b048ab",
      "patch": "@@ -0,0 +1,133 @@\n+--  Copyright 2021 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+package body Twovecs is\n+\n+   function Pt (X, Y : My_Integer) return Twovec is\n+   begin\n+      return Twovec'(X, Y);\n+   end Pt;\n+\n+   function \"+\" (P0, P1 : Twovec) return Twovec is\n+   begin\n+      return Twovec' (P0.X + P1.X, P0.Y + P1.Y);\n+   end \"+\";\n+\n+   function \"-\" (P0, P1 : Twovec) return Twovec is\n+   begin\n+      return Twovec' (P0.X - P1.X, P0.Y - P1.Y);\n+   end \"-\";\n+\n+   function \"*\" (P0, P1 : Twovec) return Twovec is\n+   begin\n+      return Twovec' (P0.X * P1.X, P0.Y * P1.Y);\n+   end \"*\";\n+\n+   function \"/\" (P0, P1 : Twovec) return Twovec is\n+   begin\n+      return Twovec' (P0.X / P1.X, P0.Y / P1.Y);\n+   end \"/\";\n+\n+   function \"mod\" (P0, P1 : Twovec) return Twovec is\n+   begin\n+      -- Make sure we get a different answer than \"-\".\n+      return Twovec' (17, 18);\n+   end \"mod\";\n+\n+   function \"rem\" (P0, P1 : Twovec) return Twovec is\n+   begin\n+      -- Make sure we get a different answer than \"-\".\n+      return Twovec' (38, 39);\n+   end \"rem\";\n+\n+   function \"**\" (P0, P1 : Twovec) return Twovec is\n+   begin\n+      -- It just has to do something recognizable.\n+      return Twovec' (20 * P0.X + P1.X, 20 * P0.Y + P1.Y);\n+   end \"**\";\n+\n+   function \"<\" (P0, P1 : Twovec) return Boolean is\n+   begin\n+      return P0.X < P1.X and then P0.Y < P1.Y;\n+   end \"<\";\n+\n+   function \"<=\" (P0, P1 : Twovec) return Boolean is\n+   begin\n+      return P0.X <= P1.X and then P0.Y <= P1.Y;\n+   end \"<=\";\n+\n+   function \">\" (P0, P1 : Twovec) return Boolean is\n+   begin\n+      return P0.X > P1.X and then P0.Y > P1.Y;\n+   end \">\";\n+\n+   function \">=\" (P0, P1 : Twovec) return Boolean is\n+   begin\n+      return P0.X >= P1.X and then P0.Y >= P1.Y;\n+   end \">=\";\n+\n+   function \"=\" (P0, P1 : Twovec) return Boolean is\n+   begin\n+      return P0.X = P1.X and then P0.Y = P1.Y;\n+   end \"=\";\n+\n+   function \"and\" (P0, P1 : Twovec) return Twovec is\n+   begin\n+      return Twovec' (P0.X and P1.X, P0.Y and P1.Y);\n+   end \"and\";\n+\n+   function \"or\" (P0, P1 : Twovec) return Twovec is\n+   begin\n+      return Twovec' (P0.X or P1.X, P0.Y or P1.Y);\n+   end \"or\";\n+\n+   function \"xor\" (P0, P1 : Twovec) return Twovec is\n+   begin\n+      return Twovec' (P0.X xor P1.X, P0.Y xor P1.Y);\n+   end \"xor\";\n+\n+   function \"&\" (P0, P1 : Twovec) return Twovec is\n+   begin\n+      -- It just has to do something recognizable.\n+      return Twovec' (10 * P0.X + P1.X, 10 * P0.Y + P1.Y);\n+   end \"&\";\n+\n+   function \"abs\" (P0 : Twovec) return Twovec is\n+   begin\n+      return Twovec' (abs (P0.X), abs (P0.Y));\n+   end \"abs\";\n+\n+   function \"not\" (P0 : Twovec) return Twovec is\n+   begin\n+      return Twovec' (not (P0.X), not (P0.Y));\n+   end \"not\";\n+\n+   function \"+\" (P0 : Twovec) return Twovec is\n+   begin\n+      -- It just has to do something recognizable.\n+      return Twovec' (+ (P0.Y), + (P0.X));\n+   end \"+\";\n+\n+   function \"-\" (P0 : Twovec) return Twovec is\n+   begin\n+      return Twovec' (- (P0.X), - (P0.Y));\n+   end \"-\";\n+\n+   procedure Do_Nothing (P : Twovec) is\n+   begin\n+      null;\n+   end Do_Nothing;\n+\n+end Twovecs;"
    },
    {
      "sha": "098261c012c6ce06a29acaba7e1072f3cba771e1",
      "filename": "gdb/testsuite/gdb.ada/operator_call/twovecs.ads",
      "status": "added",
      "additions": 55,
      "deletions": 0,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c04da66c264162e6efc37686c0e4ee46c5b048ab/gdb/testsuite/gdb.ada/operator_call/twovecs.ads",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c04da66c264162e6efc37686c0e4ee46c5b048ab/gdb/testsuite/gdb.ada/operator_call/twovecs.ads",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/operator_call/twovecs.ads?ref=c04da66c264162e6efc37686c0e4ee46c5b048ab",
      "patch": "@@ -0,0 +1,55 @@\n+--  Copyright 2021 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+package Twovecs is\n+   type My_Integer is mod 2**16\t;\n+\n+   type Twovec is private;\n+\n+   function Pt (X, Y : My_Integer) return Twovec;\n+\n+   function \"+\" (P0, P1 : Twovec) return Twovec;\n+   function \"-\" (P0, P1 : Twovec) return Twovec;\n+   function \"*\" (P0, P1 : Twovec) return Twovec;\n+   function \"/\" (P0, P1 : Twovec) return Twovec;\n+   function \"mod\" (P0, P1 : Twovec) return Twovec;\n+   function \"rem\" (P0, P1 : Twovec) return Twovec;\n+   function \"**\" (P0, P1 : Twovec) return Twovec;\n+\n+   function \"<\" (P0, P1 : Twovec) return Boolean;\n+   function \"<=\" (P0, P1 : Twovec) return Boolean;\n+   function \">\" (P0, P1 : Twovec) return Boolean;\n+   function \">=\" (P0, P1 : Twovec) return Boolean;\n+   function \"=\" (P0, P1 : Twovec) return Boolean;\n+\n+   function \"and\" (P0, P1 : Twovec) return Twovec;\n+   function \"or\" (P0, P1 : Twovec) return Twovec;\n+   function \"xor\" (P0, P1 : Twovec) return Twovec;\n+   function \"&\" (P0, P1 : Twovec) return Twovec;\n+\n+   function \"abs\" (P0 : Twovec) return Twovec;\n+   function \"not\" (P0 : Twovec) return Twovec;\n+   function \"+\" (P0 : Twovec) return Twovec;\n+   function \"-\" (P0 : Twovec) return Twovec;\n+\n+   procedure Do_Nothing (P : Twovec);\n+\n+private\n+\n+   type Twovec is record\n+      X, Y : My_Integer;\n+   end record;\n+\n+end Twovecs;"
    }
  ]
}