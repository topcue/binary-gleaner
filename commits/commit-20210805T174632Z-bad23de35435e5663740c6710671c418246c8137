{
  "sha": "bad23de35435e5663740c6710671c418246c8137",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmFkMjNkZTM1NDM1ZTU2NjM3NDBjNjcxMDY3MWM0MTgyNDZjODEzNw==",
  "commit": {
    "author": {
      "name": "Will Schmidt",
      "email": "will_schmidt@vnet.ibm.com",
      "date": "2021-08-05T17:46:32Z"
    },
    "committer": {
      "name": "Will Schmidt",
      "email": "will_schmidt@vnet.ibm.com",
      "date": "2021-08-05T17:46:32Z"
    },
    "message": "[gdb] Handle .TOC. sections during gdb-compile for rs6000 target.\n\n[gdb] Handle .TOC. sections during gdb-compile for rs6000 target.\n\n  When we encounter a .TOC. symbol in the object we are loading,\nwe need to associate this with the .toc section in order to\nproperly resolve other symbols in the object.  IF a .toc section\nis not found, iterate the sections until we find one with the\nSEC_ALLOC flag.  If that also fails, fall back to using\nthe *ABS* section, pointed to by bfd_abs_section_ptr.",
    "tree": {
      "sha": "759b93f8e170cc60aa38fb80ce1cda9a3daa55cb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/759b93f8e170cc60aa38fb80ce1cda9a3daa55cb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bad23de35435e5663740c6710671c418246c8137",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bad23de35435e5663740c6710671c418246c8137",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bad23de35435e5663740c6710671c418246c8137",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bad23de35435e5663740c6710671c418246c8137/comments",
  "author": {
    "login": "willschm",
    "id": 44359,
    "node_id": "MDQ6VXNlcjQ0MzU5",
    "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/willschm",
    "html_url": "https://github.com/willschm",
    "followers_url": "https://api.github.com/users/willschm/followers",
    "following_url": "https://api.github.com/users/willschm/following{/other_user}",
    "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/willschm/subscriptions",
    "organizations_url": "https://api.github.com/users/willschm/orgs",
    "repos_url": "https://api.github.com/users/willschm/repos",
    "events_url": "https://api.github.com/users/willschm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/willschm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "willschm",
    "id": 44359,
    "node_id": "MDQ6VXNlcjQ0MzU5",
    "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/willschm",
    "html_url": "https://github.com/willschm",
    "followers_url": "https://api.github.com/users/willschm/followers",
    "following_url": "https://api.github.com/users/willschm/following{/other_user}",
    "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/willschm/subscriptions",
    "organizations_url": "https://api.github.com/users/willschm/orgs",
    "repos_url": "https://api.github.com/users/willschm/repos",
    "events_url": "https://api.github.com/users/willschm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/willschm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4b0cf3d6d0ff4a737f8aee2ed388fbc72ba941be",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4b0cf3d6d0ff4a737f8aee2ed388fbc72ba941be",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4b0cf3d6d0ff4a737f8aee2ed388fbc72ba941be"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 41,
    "deletions": 0
  },
  "files": [
    {
      "sha": "a25eb6142c7e2fae4b01b27c6225d034e31754d9",
      "filename": "gdb/compile/compile-object-load.c",
      "status": "modified",
      "additions": 41,
      "deletions": 0,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bad23de35435e5663740c6710671c418246c8137/gdb/compile/compile-object-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bad23de35435e5663740c6710671c418246c8137/gdb/compile/compile-object-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-object-load.c?ref=bad23de35435e5663740c6710671c418246c8137",
      "patch": "@@ -722,6 +722,47 @@ compile_object_load (const compile_file_names &file_names,\n \t  sym->value = 0;\n \t  continue;\n \t}\n+      if (strcmp (sym->name, \".TOC.\") == 0)\n+\t{\n+\t  /* Handle the .TOC. symbol as the linker would do.  Set the .TOC.\n+\t     sections value to 0x8000 (see bfd/elf64-ppc.c TOC_BASE_OFF);\n+\t     point the symbol section at the \".toc\" section;\n+\t     and pass the toc->vma value into bfd_set_gp_value().\n+\t     If the .toc section is not found, use the first section\n+\t     with the SEC_ALLOC flag set.  In the unlikely case that\n+\t     we still do not have a section identified, fall back to using\n+\t     the \"*ABS*\" section.  */\n+\t  asection *toc_fallback = bfd_get_section_by_name(abfd.get(), \".toc\");\n+\t  if (toc_fallback == NULL)\n+\t    {\n+\t      for (asection *tsect = abfd->sections; tsect != nullptr;\n+\t\t   tsect = tsect->next)\n+\t\t {\n+\t\t    if (bfd_section_flags (tsect) & SEC_ALLOC)\n+\t\t       {\n+\t\t\t  toc_fallback = tsect;\n+\t\t\t  break;\n+\t\t       }\n+\t\t }\n+\t    }\n+\n+\t  if (toc_fallback == NULL)\n+\t    /*  If we've gotten here, we have not found a section usable\n+\t\tas a backup for the .toc section.  In this case, use the\n+\t\tabsolute (*ABS*) section.  */\n+\t     toc_fallback = bfd_abs_section_ptr;\n+\n+\t  sym->section = toc_fallback;\n+\t  sym->value = 0x8000;\n+\t  bfd_set_gp_value(abfd.get(), toc_fallback->vma);\n+\t  if (compile_debug)\n+\t    fprintf_unfiltered (gdb_stdlog,\n+\t\t\t\t\"Connectiong ELF symbol \\\"%s\\\" to the .toc section (%s)\\n\",\n+\t\t\t\tsym->name,\n+\t\t\t\tpaddress (target_gdbarch (), sym->value));\n+\t  continue;\n+\t}\n+\n       bmsym = lookup_minimal_symbol (sym->name, NULL, NULL);\n       switch (bmsym.minsym == NULL\n \t      ? mst_unknown : MSYMBOL_TYPE (bmsym.minsym))"
    }
  ]
}