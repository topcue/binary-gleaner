{
  "sha": "efba19b06a6f2baacb3920599f970d1333ffc358",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWZiYTE5YjA2YTZmMmJhYWNiMzkyMDU5OWY5NzBkMTMzM2ZmYzM1OA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-07-13T18:09:51Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-08-07T02:08:48Z"
    },
    "message": "Add obstack_strdup overload taking a std::string\n\nThis adds an obstack_strdup overload that takes a std::string, and\nchanges a few spots in gdb to use it.\n\ngdb/ChangeLog\n2019-08-06  Tom Tromey  <tom@tromey.com>\n\n\t* symfile.c (reread_symbols): Use obstack_strdup.\n\t* stabsread.c (read_type): Use obstack_strdup.\n\t* gdb_obstack.h (obstack_strdup): New overload.\n\t* dwarf2read.c (dwarf2_compute_name, create_dwo_unit_in_dwp_v1)\n\t(create_dwo_unit_in_dwp_v2, build_error_marker_type)\n\t(dwarf2_canonicalize_name): Use obstack_strdup.\n\t* dbxread.c (read_dbx_symtab): Use obstack_strdup.\n\t* cp-support.c (inspect_type, replace_typedefs_qualified_name):\n\tUse obstack_strdup.",
    "tree": {
      "sha": "f8ab8d8f5a212c00950b8fc67a180e4373017f01",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f8ab8d8f5a212c00950b8fc67a180e4373017f01"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/efba19b06a6f2baacb3920599f970d1333ffc358",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efba19b06a6f2baacb3920599f970d1333ffc358",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/efba19b06a6f2baacb3920599f970d1333ffc358",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efba19b06a6f2baacb3920599f970d1333ffc358/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f25102f7b100337923d2c81ecc12a64d428e98fe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f25102f7b100337923d2c81ecc12a64d428e98fe",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f25102f7b100337923d2c81ecc12a64d428e98fe"
    }
  ],
  "stats": {
    "total": 74,
    "additions": 38,
    "deletions": 36
  },
  "files": [
    {
      "sha": "31cd69dc85da5483dc76e25b97499c278bd3582d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efba19b06a6f2baacb3920599f970d1333ffc358/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efba19b06a6f2baacb3920599f970d1333ffc358/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=efba19b06a6f2baacb3920599f970d1333ffc358",
      "patch": "@@ -1,3 +1,15 @@\n+2019-08-06  Tom Tromey  <tom@tromey.com>\n+\n+\t* symfile.c (reread_symbols): Use obstack_strdup.\n+\t* stabsread.c (read_type): Use obstack_strdup.\n+\t* gdb_obstack.h (obstack_strdup): New overload.\n+\t* dwarf2read.c (dwarf2_compute_name, create_dwo_unit_in_dwp_v1)\n+\t(create_dwo_unit_in_dwp_v2, build_error_marker_type)\n+\t(dwarf2_canonicalize_name): Use obstack_strdup.\n+\t* dbxread.c (read_dbx_symtab): Use obstack_strdup.\n+\t* cp-support.c (inspect_type, replace_typedefs_qualified_name):\n+\tUse obstack_strdup.\n+\n 2019-08-06  Tom Tromey  <tom@tromey.com>\n \n \t* gdb_obstack.h (obstack_strdup): Define."
    },
    {
      "sha": "b8b0fcc0ae264f16e7b07e2ac5c7fe6d961d56b9",
      "filename": "gdb/cp-support.c",
      "status": "modified",
      "additions": 3,
      "deletions": 7,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efba19b06a6f2baacb3920599f970d1333ffc358/gdb/cp-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efba19b06a6f2baacb3920599f970d1333ffc358/gdb/cp-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.c?ref=efba19b06a6f2baacb3920599f970d1333ffc358",
      "patch": "@@ -244,7 +244,7 @@ inspect_type (struct demangle_parse_info *info,\n \t    }\n \n \t  len = buf.size ();\n-\t  name = (char *) obstack_copy0 (&info->obstack, buf.c_str (), len);\n+\t  name = obstack_strdup (&info->obstack, buf.string ());\n \n \t  /* Turn the result into a new tree.  Note that this\n \t     tree will contain pointers into NAME, so NAME cannot\n@@ -315,9 +315,7 @@ replace_typedefs_qualified_name (struct demangle_parse_info *info,\n \n \t  buf.write (d_left (comp)->u.s_name.s, d_left (comp)->u.s_name.len);\n \t  newobj.type = DEMANGLE_COMPONENT_NAME;\n-\t  newobj.u.s_name.s\n-\t    = (char *) obstack_copy0 (&info->obstack,\n-\t\t\t\t      buf.c_str (), buf.size ());\n+\t  newobj.u.s_name.s = obstack_strdup (&info->obstack, buf.string ());\n \t  newobj.u.s_name.len = buf.size ();\n \t  if (inspect_type (info, &newobj, finder, data))\n \t    {\n@@ -379,9 +377,7 @@ replace_typedefs_qualified_name (struct demangle_parse_info *info,\n \t with a DEMANGLE_COMPONENT_NAME node containing the whole\n \t name.  */\n       ret_comp->type = DEMANGLE_COMPONENT_NAME;\n-      ret_comp->u.s_name.s\n-\t= (char *) obstack_copy0 (&info->obstack,\n-\t\t\t\t  buf.c_str (), buf.size ());\n+      ret_comp->u.s_name.s = obstack_strdup (&info->obstack, buf.string ());\n       ret_comp->u.s_name.len = buf.size ();\n       inspect_type (info, ret_comp, finder, data);\n     }"
    },
    {
      "sha": "0b370cd2e3324fb61403ea879bdc1f40def01fc1",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efba19b06a6f2baacb3920599f970d1333ffc358/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efba19b06a6f2baacb3920599f970d1333ffc358/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=efba19b06a6f2baacb3920599f970d1333ffc358",
      "patch": "@@ -1440,9 +1440,8 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \t      if (!new_name.empty ())\n \t\t{\n \t\t  sym_len = new_name.length ();\n-\t\t  sym_name = (char *) obstack_copy0 (&objfile->objfile_obstack,\n-\t\t\t\t\t\t     new_name.c_str (),\n-\t\t\t\t\t\t     sym_len);\n+\t\t  sym_name = obstack_strdup (&objfile->objfile_obstack,\n+\t\t\t\t\t     new_name);\n \t\t}\n \t    }\n "
    },
    {
      "sha": "6d28924e79bddfe76276b3658b70ffd49a0febc6",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 8,
      "deletions": 17,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efba19b06a6f2baacb3920599f970d1333ffc358/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efba19b06a6f2baacb3920599f970d1333ffc358/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=efba19b06a6f2baacb3920599f970d1333ffc358",
      "patch": "@@ -10945,10 +10945,8 @@ dwarf2_compute_name (const char *name,\n \t     INTERMEDIATE_NAME is already canonical, then we need to\n \t     copy it to the appropriate obstack.  */\n \t  if (canonical_name == NULL || canonical_name == intermediate_name.c_str ())\n-\t    name = ((const char *)\n-\t\t    obstack_copy0 (&objfile->per_bfd->storage_obstack,\n-\t\t\t\t   intermediate_name.c_str (),\n-\t\t\t\t   intermediate_name.length ()));\n+\t    name = obstack_strdup (&objfile->per_bfd->storage_obstack,\n+\t\t\t\t   intermediate_name);\n \t  else\n \t    name = canonical_name;\n \t}\n@@ -12416,10 +12414,8 @@ create_dwo_unit_in_dwp_v1 (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t\t      virtual_dwo_name.c_str ());\n \t}\n       dwo_file = new struct dwo_file;\n-      dwo_file->dwo_name\n-\t= (const char *) obstack_copy0 (&objfile->objfile_obstack,\n-\t\t\t\t\tvirtual_dwo_name.c_str (),\n-\t\t\t\t\tvirtual_dwo_name.size ());\n+      dwo_file->dwo_name = obstack_strdup (&objfile->objfile_obstack,\n+\t\t\t\t\t   virtual_dwo_name);\n       dwo_file->comp_dir = comp_dir;\n       dwo_file->sections.abbrev = sections.abbrev;\n       dwo_file->sections.line = sections.line;\n@@ -12614,10 +12610,8 @@ create_dwo_unit_in_dwp_v2 (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t\t      virtual_dwo_name.c_str ());\n \t}\n       dwo_file = new struct dwo_file;\n-      dwo_file->dwo_name\n-\t= (const char *) obstack_copy0 (&objfile->objfile_obstack,\n-\t\t\t\t\tvirtual_dwo_name.c_str (),\n-\t\t\t\t\tvirtual_dwo_name.size ());\n+      dwo_file->dwo_name = obstack_strdup (&objfile->objfile_obstack,\n+\t\t\t\t\t   virtual_dwo_name);\n       dwo_file->comp_dir = comp_dir;\n       dwo_file->sections.abbrev =\n \tcreate_dwp_v2_section (dwarf2_per_objfile, &dwp_file->sections.abbrev,\n@@ -22101,8 +22095,7 @@ build_error_marker_type (struct dwarf2_cu *cu, struct die_info *die)\n \t\t     objfile_name (objfile),\n \t\t     sect_offset_str (cu->header.sect_off),\n \t\t     sect_offset_str (die->sect_off));\n-  saved = (char *) obstack_copy0 (&objfile->objfile_obstack,\n-\t\t\t\t  message.c_str (), message.length ());\n+  saved = obstack_strdup (&objfile->objfile_obstack, message);\n \n   return init_type (objfile, TYPE_CODE_ERROR, 0, saved);\n }\n@@ -22638,9 +22631,7 @@ dwarf2_canonicalize_name (const char *name, struct dwarf2_cu *cu,\n       if (!canon_name.empty ())\n \t{\n \t  if (canon_name != name)\n-\t    name = (const char *) obstack_copy0 (obstack,\n-\t\t\t\t\t\t canon_name.c_str (),\n-\t\t\t\t\t\t canon_name.length ());\n+\t    name = obstack_strdup (obstack, canon_name);\n \t}\n     }\n "
    },
    {
      "sha": "db849a06444c2c22138a39dc42157b1fc8149dfd",
      "filename": "gdb/gdb_obstack.h",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efba19b06a6f2baacb3920599f970d1333ffc358/gdb/gdb_obstack.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efba19b06a6f2baacb3920599f970d1333ffc358/gdb/gdb_obstack.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdb_obstack.h?ref=efba19b06a6f2baacb3920599f970d1333ffc358",
      "patch": "@@ -95,6 +95,16 @@ obstack_strdup (struct obstack *obstackp, const char *string)\n   return (char *) obstack_copy0 (obstackp, string, strlen (string));\n }\n \n+/* Duplicate STRING, returning an equivalent string that's allocated on the\n+   obstack OBSTACKP.  */\n+\n+static inline char *\n+obstack_strdup (struct obstack *obstackp, const std::string &string)\n+{\n+  return (char *) obstack_copy0 (obstackp, string.c_str (),\n+\t\t\t\t string.size ());\n+}\n+\n /* An obstack that frees itself on scope exit.  */\n struct auto_obstack : obstack\n {"
    },
    {
      "sha": "23da5f94ebbbdb52477714a8c8786effe3c21107",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efba19b06a6f2baacb3920599f970d1333ffc358/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efba19b06a6f2baacb3920599f970d1333ffc358/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=efba19b06a6f2baacb3920599f970d1333ffc358",
      "patch": "@@ -1654,12 +1654,8 @@ read_type (const char **pp, struct objfile *objfile)\n \n \t      std::string new_name = cp_canonicalize_string (name);\n \t      if (!new_name.empty ())\n-\t\t{\n-\t\t  type_name\n-\t\t    = (char *) obstack_copy0 (&objfile->objfile_obstack,\n-\t\t\t\t\t      new_name.c_str (),\n-\t\t\t\t\t      new_name.length ());\n-\t\t}\n+\t\ttype_name = obstack_strdup (&objfile->objfile_obstack,\n+\t\t\t\t\t    new_name);\n \t    }\n \t  if (type_name == NULL)\n \t    {"
    },
    {
      "sha": "8843781e13ae0cac58fde58ede2b2e3676aec55c",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efba19b06a6f2baacb3920599f970d1333ffc358/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efba19b06a6f2baacb3920599f970d1333ffc358/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=efba19b06a6f2baacb3920599f970d1333ffc358",
      "patch": "@@ -2596,9 +2596,7 @@ reread_symbols (void)\n \t  set_objfile_per_bfd (objfile);\n \n \t  objfile->original_name\n-\t    = (char *) obstack_copy0 (&objfile->objfile_obstack,\n-\t\t\t\t      original_name.c_str (),\n-\t\t\t\t      original_name.size ());\n+\t    = obstack_strdup (&objfile->objfile_obstack, original_name);\n \n \t  /* Reset the sym_fns pointer.  The ELF reader can change it\n \t     based on whether .gdb_index is present, and we need it to"
    }
  ]
}