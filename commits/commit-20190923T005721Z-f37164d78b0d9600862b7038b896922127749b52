{
  "sha": "f37164d78b0d9600862b7038b896922127749b52",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjM3MTY0ZDc4YjBkOTYwMDg2MmI3MDM4Yjg5NjkyMjEyNzc0OWI1Mg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-23T00:36:45Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-09-23T00:57:21Z"
    },
    "message": "arm bfd.h tidy\n\nbfd/\n\t* bfd-in.h: Move arm declaraions..\n\t* cpu-arm.h: ..to here, new file..\n\t* coff-arm.h: ..and here, new file..\n\t* elf32-arm.h: ..and here, new file.\n\t* cpu-arm.c: Include cpu-arm.h.\n\t* coff-arm.c: Include cpu-arm.h and coff-arm.h.\n\t* elf32-arm.c: Include cpu-arm.h and elf32-arm.h.\n\t* pe-arm.c: Move function rename defines later.\n\t* pe-arm-wince.c: Likewise and include sysdep.h and bfd.h early.\n\t* bfd-in2.h: Regenerate.\ngas/\n\t* config/tc-arm.c: Include cpu-arm.h.\nld/\n\t* emultempl/armelf.em: Include elf32-arm.h.\n\t* emultempl/pe.em: Move func defines later and include coff-arm.h.",
    "tree": {
      "sha": "8cba4ad4f4736f03cbb53e2c90284443492ebd0f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8cba4ad4f4736f03cbb53e2c90284443492ebd0f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f37164d78b0d9600862b7038b896922127749b52",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f37164d78b0d9600862b7038b896922127749b52",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f37164d78b0d9600862b7038b896922127749b52",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f37164d78b0d9600862b7038b896922127749b52/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "79c2ce54e1e52e5d63d96af56c544de778036a12",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/79c2ce54e1e52e5d63d96af56c544de778036a12",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/79c2ce54e1e52e5d63d96af56c544de778036a12"
    }
  ],
  "stats": {
    "total": 559,
    "additions": 246,
    "deletions": 313
  },
  "files": [
    {
      "sha": "c1f82cda92c08eac4fc2d86414480f102cc3594c",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37164d78b0d9600862b7038b896922127749b52/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37164d78b0d9600862b7038b896922127749b52/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=f37164d78b0d9600862b7038b896922127749b52",
      "patch": "@@ -1,3 +1,16 @@\n+2019-09-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* bfd-in.h: Move arm declaraions..\n+\t* cpu-arm.h: ..to here, new file..\n+\t* coff-arm.h: ..and here, new file..\n+\t* elf32-arm.h: ..and here, new file.\n+\t* cpu-arm.c: Include cpu-arm.h.\n+\t* coff-arm.c: Include cpu-arm.h and coff-arm.h.\n+\t* elf32-arm.c: Include cpu-arm.h and elf32-arm.h.\n+\t* pe-arm.c: Move function rename defines later.\n+\t* pe-arm-wince.c: Likewise and include sysdep.h and bfd.h early.\n+\t* bfd-in2.h: Regenerate.\n+\n 2019-09-23  Alan Modra  <amodra@gmail.com>\n \n \t* bfd-in.h: Move tic6x function declaration.."
    },
    {
      "sha": "124a0c2b817e32623fedca1637a547dd4fc78814",
      "filename": "bfd/bfd-in.h",
      "status": "modified",
      "additions": 0,
      "deletions": 140,
      "changes": 140,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37164d78b0d9600862b7038b896922127749b52/bfd/bfd-in.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37164d78b0d9600862b7038b896922127749b52/bfd/bfd-in.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in.h?ref=f37164d78b0d9600862b7038b896922127749b52",
      "patch": "@@ -763,143 +763,3 @@ union internal_auxent;\n \n extern bfd_boolean bfd_coff_set_symbol_class\n   (bfd *, struct bfd_symbol *, unsigned int);\n-\n-/* ARM VFP11 erratum workaround support.  */\n-typedef enum\n-{\n-  BFD_ARM_VFP11_FIX_DEFAULT,\n-  BFD_ARM_VFP11_FIX_NONE,\n-  BFD_ARM_VFP11_FIX_SCALAR,\n-  BFD_ARM_VFP11_FIX_VECTOR\n-} bfd_arm_vfp11_fix;\n-\n-extern void bfd_elf32_arm_init_maps\n-  (bfd *);\n-\n-extern void bfd_elf32_arm_set_vfp11_fix\n-  (bfd *, struct bfd_link_info *);\n-\n-extern void bfd_elf32_arm_set_cortex_a8_fix\n-  (bfd *, struct bfd_link_info *);\n-\n-extern bfd_boolean bfd_elf32_arm_vfp11_erratum_scan\n-  (bfd *, struct bfd_link_info *);\n-\n-extern void bfd_elf32_arm_vfp11_fix_veneer_locations\n-  (bfd *, struct bfd_link_info *);\n-\n-/* ARM STM STM32L4XX erratum workaround support.  */\n-typedef enum\n-{\n-  BFD_ARM_STM32L4XX_FIX_NONE,\n-  BFD_ARM_STM32L4XX_FIX_DEFAULT,\n-  BFD_ARM_STM32L4XX_FIX_ALL\n-} bfd_arm_stm32l4xx_fix;\n-\n-extern void bfd_elf32_arm_set_stm32l4xx_fix\n-  (bfd *, struct bfd_link_info *);\n-\n-extern bfd_boolean bfd_elf32_arm_stm32l4xx_erratum_scan\n-  (bfd *, struct bfd_link_info *);\n-\n-extern void bfd_elf32_arm_stm32l4xx_fix_veneer_locations\n-  (bfd *, struct bfd_link_info *);\n-\n-/* ARM Interworking support.  Called from linker.  */\n-extern bfd_boolean bfd_arm_allocate_interworking_sections\n-  (struct bfd_link_info *);\n-\n-extern bfd_boolean bfd_arm_process_before_allocation\n-  (bfd *, struct bfd_link_info *, int);\n-\n-extern bfd_boolean bfd_arm_get_bfd_for_interworking\n-  (bfd *, struct bfd_link_info *);\n-\n-/* PE ARM Interworking support.  Called from linker.  */\n-extern bfd_boolean bfd_arm_pe_allocate_interworking_sections\n-  (struct bfd_link_info *);\n-\n-extern bfd_boolean bfd_arm_pe_process_before_allocation\n-  (bfd *, struct bfd_link_info *, int);\n-\n-extern bfd_boolean bfd_arm_pe_get_bfd_for_interworking\n-  (bfd *, struct bfd_link_info *);\n-\n-/* ELF ARM Interworking support.  Called from linker.  */\n-extern bfd_boolean bfd_elf32_arm_allocate_interworking_sections\n-  (struct bfd_link_info *);\n-\n-extern bfd_boolean bfd_elf32_arm_process_before_allocation\n-  (bfd *, struct bfd_link_info *);\n-\n-struct elf32_arm_params {\n-  char *thumb_entry_symbol;\n-  int byteswap_code;\n-  int target1_is_rel;\n-  char * target2_type;\n-  int fix_v4bx;\n-  int use_blx;\n-  bfd_arm_vfp11_fix vfp11_denorm_fix;\n-  bfd_arm_stm32l4xx_fix stm32l4xx_fix;\n-  int no_enum_size_warning;\n-  int no_wchar_size_warning;\n-  int pic_veneer;\n-  int fix_cortex_a8;\n-  int fix_arm1176;\n-  int merge_exidx_entries;\n-  int cmse_implib;\n-  bfd *in_implib_bfd;\n-};\n-\n-void bfd_elf32_arm_set_target_params\n-  (bfd *, struct bfd_link_info *, struct elf32_arm_params *);\n-\n-extern bfd_boolean bfd_elf32_arm_get_bfd_for_interworking\n-  (bfd *, struct bfd_link_info *);\n-\n-extern bfd_boolean bfd_elf32_arm_add_glue_sections_to_bfd\n-  (bfd *, struct bfd_link_info *);\n-\n-extern void bfd_elf32_arm_keep_private_stub_output_sections\n-  (struct bfd_link_info *);\n-\n-/* ELF ARM mapping symbol support.  */\n-#define BFD_ARM_SPECIAL_SYM_TYPE_MAP\t(1 << 0)\n-#define BFD_ARM_SPECIAL_SYM_TYPE_TAG\t(1 << 1)\n-#define BFD_ARM_SPECIAL_SYM_TYPE_OTHER\t(1 << 2)\n-#define BFD_ARM_SPECIAL_SYM_TYPE_ANY\t(~0)\n-\n-extern bfd_boolean bfd_is_arm_special_symbol_name\n-  (const char *, int);\n-\n-extern void bfd_elf32_arm_set_byteswap_code\n-  (struct bfd_link_info *, int);\n-\n-extern void bfd_elf32_arm_use_long_plt (void);\n-\n-/* ARM Note section processing.  */\n-extern bfd_boolean bfd_arm_merge_machines\n-  (bfd *, bfd *);\n-\n-extern bfd_boolean bfd_arm_update_notes\n-  (bfd *, const char *);\n-\n-extern unsigned int bfd_arm_get_mach_from_notes\n-  (bfd *, const char *);\n-\n-/* ARM stub generation support.  Called from the linker.  */\n-extern int elf32_arm_setup_section_lists\n-  (bfd *, struct bfd_link_info *);\n-extern void elf32_arm_next_input_section\n-  (struct bfd_link_info *, struct bfd_section *);\n-extern bfd_boolean elf32_arm_size_stubs\n-  (bfd *, bfd *, struct bfd_link_info *, bfd_signed_vma,\n-   struct bfd_section * (*) (const char *, struct bfd_section *,\n-\t\t\t     struct bfd_section *, unsigned int),\n-   void (*) (void));\n-extern bfd_boolean elf32_arm_build_stubs\n-  (struct bfd_link_info *);\n-\n-/* ARM unwind section editing support.  */\n-extern bfd_boolean elf32_arm_fix_exidx_coverage\n-(struct bfd_section **, unsigned int, struct bfd_link_info *, bfd_boolean);"
    },
    {
      "sha": "052a826176e6e0a3b5cfc6becb41ca62a7430ea3",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 0,
      "deletions": 140,
      "changes": 140,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37164d78b0d9600862b7038b896922127749b52/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37164d78b0d9600862b7038b896922127749b52/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=f37164d78b0d9600862b7038b896922127749b52",
      "patch": "@@ -770,146 +770,6 @@ union internal_auxent;\n \n extern bfd_boolean bfd_coff_set_symbol_class\n   (bfd *, struct bfd_symbol *, unsigned int);\n-\n-/* ARM VFP11 erratum workaround support.  */\n-typedef enum\n-{\n-  BFD_ARM_VFP11_FIX_DEFAULT,\n-  BFD_ARM_VFP11_FIX_NONE,\n-  BFD_ARM_VFP11_FIX_SCALAR,\n-  BFD_ARM_VFP11_FIX_VECTOR\n-} bfd_arm_vfp11_fix;\n-\n-extern void bfd_elf32_arm_init_maps\n-  (bfd *);\n-\n-extern void bfd_elf32_arm_set_vfp11_fix\n-  (bfd *, struct bfd_link_info *);\n-\n-extern void bfd_elf32_arm_set_cortex_a8_fix\n-  (bfd *, struct bfd_link_info *);\n-\n-extern bfd_boolean bfd_elf32_arm_vfp11_erratum_scan\n-  (bfd *, struct bfd_link_info *);\n-\n-extern void bfd_elf32_arm_vfp11_fix_veneer_locations\n-  (bfd *, struct bfd_link_info *);\n-\n-/* ARM STM STM32L4XX erratum workaround support.  */\n-typedef enum\n-{\n-  BFD_ARM_STM32L4XX_FIX_NONE,\n-  BFD_ARM_STM32L4XX_FIX_DEFAULT,\n-  BFD_ARM_STM32L4XX_FIX_ALL\n-} bfd_arm_stm32l4xx_fix;\n-\n-extern void bfd_elf32_arm_set_stm32l4xx_fix\n-  (bfd *, struct bfd_link_info *);\n-\n-extern bfd_boolean bfd_elf32_arm_stm32l4xx_erratum_scan\n-  (bfd *, struct bfd_link_info *);\n-\n-extern void bfd_elf32_arm_stm32l4xx_fix_veneer_locations\n-  (bfd *, struct bfd_link_info *);\n-\n-/* ARM Interworking support.  Called from linker.  */\n-extern bfd_boolean bfd_arm_allocate_interworking_sections\n-  (struct bfd_link_info *);\n-\n-extern bfd_boolean bfd_arm_process_before_allocation\n-  (bfd *, struct bfd_link_info *, int);\n-\n-extern bfd_boolean bfd_arm_get_bfd_for_interworking\n-  (bfd *, struct bfd_link_info *);\n-\n-/* PE ARM Interworking support.  Called from linker.  */\n-extern bfd_boolean bfd_arm_pe_allocate_interworking_sections\n-  (struct bfd_link_info *);\n-\n-extern bfd_boolean bfd_arm_pe_process_before_allocation\n-  (bfd *, struct bfd_link_info *, int);\n-\n-extern bfd_boolean bfd_arm_pe_get_bfd_for_interworking\n-  (bfd *, struct bfd_link_info *);\n-\n-/* ELF ARM Interworking support.  Called from linker.  */\n-extern bfd_boolean bfd_elf32_arm_allocate_interworking_sections\n-  (struct bfd_link_info *);\n-\n-extern bfd_boolean bfd_elf32_arm_process_before_allocation\n-  (bfd *, struct bfd_link_info *);\n-\n-struct elf32_arm_params {\n-  char *thumb_entry_symbol;\n-  int byteswap_code;\n-  int target1_is_rel;\n-  char * target2_type;\n-  int fix_v4bx;\n-  int use_blx;\n-  bfd_arm_vfp11_fix vfp11_denorm_fix;\n-  bfd_arm_stm32l4xx_fix stm32l4xx_fix;\n-  int no_enum_size_warning;\n-  int no_wchar_size_warning;\n-  int pic_veneer;\n-  int fix_cortex_a8;\n-  int fix_arm1176;\n-  int merge_exidx_entries;\n-  int cmse_implib;\n-  bfd *in_implib_bfd;\n-};\n-\n-void bfd_elf32_arm_set_target_params\n-  (bfd *, struct bfd_link_info *, struct elf32_arm_params *);\n-\n-extern bfd_boolean bfd_elf32_arm_get_bfd_for_interworking\n-  (bfd *, struct bfd_link_info *);\n-\n-extern bfd_boolean bfd_elf32_arm_add_glue_sections_to_bfd\n-  (bfd *, struct bfd_link_info *);\n-\n-extern void bfd_elf32_arm_keep_private_stub_output_sections\n-  (struct bfd_link_info *);\n-\n-/* ELF ARM mapping symbol support.  */\n-#define BFD_ARM_SPECIAL_SYM_TYPE_MAP\t(1 << 0)\n-#define BFD_ARM_SPECIAL_SYM_TYPE_TAG\t(1 << 1)\n-#define BFD_ARM_SPECIAL_SYM_TYPE_OTHER\t(1 << 2)\n-#define BFD_ARM_SPECIAL_SYM_TYPE_ANY\t(~0)\n-\n-extern bfd_boolean bfd_is_arm_special_symbol_name\n-  (const char *, int);\n-\n-extern void bfd_elf32_arm_set_byteswap_code\n-  (struct bfd_link_info *, int);\n-\n-extern void bfd_elf32_arm_use_long_plt (void);\n-\n-/* ARM Note section processing.  */\n-extern bfd_boolean bfd_arm_merge_machines\n-  (bfd *, bfd *);\n-\n-extern bfd_boolean bfd_arm_update_notes\n-  (bfd *, const char *);\n-\n-extern unsigned int bfd_arm_get_mach_from_notes\n-  (bfd *, const char *);\n-\n-/* ARM stub generation support.  Called from the linker.  */\n-extern int elf32_arm_setup_section_lists\n-  (bfd *, struct bfd_link_info *);\n-extern void elf32_arm_next_input_section\n-  (struct bfd_link_info *, struct bfd_section *);\n-extern bfd_boolean elf32_arm_size_stubs\n-  (bfd *, bfd *, struct bfd_link_info *, bfd_signed_vma,\n-   struct bfd_section * (*) (const char *, struct bfd_section *,\n-\t\t\t     struct bfd_section *, unsigned int),\n-   void (*) (void));\n-extern bfd_boolean elf32_arm_build_stubs\n-  (struct bfd_link_info *);\n-\n-/* ARM unwind section editing support.  */\n-extern bfd_boolean elf32_arm_fix_exidx_coverage\n-(struct bfd_section **, unsigned int, struct bfd_link_info *, bfd_boolean);\n /* Extracted from init.c.  */\n unsigned int bfd_init (void);\n "
    },
    {
      "sha": "c9a7c098f541a9014ea0e11cb34e057e5dc617e9",
      "filename": "bfd/coff-arm.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37164d78b0d9600862b7038b896922127749b52/bfd/coff-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37164d78b0d9600862b7038b896922127749b52/bfd/coff-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-arm.c?ref=f37164d78b0d9600862b7038b896922127749b52",
      "patch": "@@ -24,6 +24,8 @@\n #include \"libbfd.h\"\n #include \"coff/arm.h\"\n #include \"coff/internal.h\"\n+#include \"cpu-arm.h\"\n+#include \"coff-arm.h\"\n \n #ifdef COFF_WITH_PE\n #include \"coff/pe.h\""
    },
    {
      "sha": "e0a93d6182617173b5a8f268c20d4ac85efbae05",
      "filename": "bfd/coff-arm.h",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37164d78b0d9600862b7038b896922127749b52/bfd/coff-arm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37164d78b0d9600862b7038b896922127749b52/bfd/coff-arm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-arm.h?ref=f37164d78b0d9600862b7038b896922127749b52",
      "patch": "@@ -0,0 +1,29 @@\n+/* BFD back-end for ARM COFF files.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of BFD, the Binary File Descriptor library.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+/* ARM Interworking support.  Called from linker.  */\n+extern bfd_boolean bfd_arm_allocate_interworking_sections\n+  (struct bfd_link_info *);\n+\n+extern bfd_boolean bfd_arm_process_before_allocation\n+  (bfd *, struct bfd_link_info *, int);\n+\n+extern bfd_boolean bfd_arm_get_bfd_for_interworking\n+  (bfd *, struct bfd_link_info *);"
    },
    {
      "sha": "4a8c340f70e8b8e378895e47b7258ffc14b58fc8",
      "filename": "bfd/cpu-arm.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37164d78b0d9600862b7038b896922127749b52/bfd/cpu-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37164d78b0d9600862b7038b896922127749b52/bfd/cpu-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-arm.c?ref=f37164d78b0d9600862b7038b896922127749b52",
      "patch": "@@ -23,6 +23,7 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n #include \"libiberty.h\"\n+#include \"cpu-arm.h\"\n \n /* This routine is provided two arch_infos and works out which ARM\n    machine which would be compatible with both and returns a pointer"
    },
    {
      "sha": "116b040e123a6661754a80343bce0f1a60a74917",
      "filename": "bfd/cpu-arm.h",
      "status": "added",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37164d78b0d9600862b7038b896922127749b52/bfd/cpu-arm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37164d78b0d9600862b7038b896922127749b52/bfd/cpu-arm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-arm.h?ref=f37164d78b0d9600862b7038b896922127749b52",
      "patch": "@@ -0,0 +1,39 @@\n+/* BFD support for the ARM processor\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of BFD, the Binary File Descriptor library.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+/* ARM Note section processing.  */\n+extern bfd_boolean bfd_arm_merge_machines\n+  (bfd *, bfd *);\n+\n+extern bfd_boolean bfd_arm_update_notes\n+  (bfd *, const char *);\n+\n+extern unsigned int bfd_arm_get_mach_from_notes\n+  (bfd *, const char *);\n+\n+/* ELF ARM mapping symbol support.  */\n+#define BFD_ARM_SPECIAL_SYM_TYPE_MAP\t(1 << 0)\n+#define BFD_ARM_SPECIAL_SYM_TYPE_TAG\t(1 << 1)\n+#define BFD_ARM_SPECIAL_SYM_TYPE_OTHER\t(1 << 2)\n+#define BFD_ARM_SPECIAL_SYM_TYPE_ANY\t(~0)\n+\n+extern bfd_boolean bfd_is_arm_special_symbol_name\n+  (const char *, int);\n+"
    },
    {
      "sha": "bb53e039e307c4a3705371bb72126d74e0852200",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37164d78b0d9600862b7038b896922127749b52/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37164d78b0d9600862b7038b896922127749b52/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=f37164d78b0d9600862b7038b896922127749b52",
      "patch": "@@ -28,6 +28,8 @@\n #include \"elf-nacl.h\"\n #include \"elf-vxworks.h\"\n #include \"elf/arm.h\"\n+#include \"elf32-arm.h\"\n+#include \"cpu-arm.h\"\n \n /* Return the relocation section associated with NAME.  HTAB is the\n    bfd's elf32_arm_link_hash_entry.  */"
    },
    {
      "sha": "ba6c2367c4a087a27296a4a84cc2974e62016ad8",
      "filename": "bfd/elf32-arm.h",
      "status": "added",
      "additions": 121,
      "deletions": 0,
      "changes": 121,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37164d78b0d9600862b7038b896922127749b52/bfd/elf32-arm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37164d78b0d9600862b7038b896922127749b52/bfd/elf32-arm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.h?ref=f37164d78b0d9600862b7038b896922127749b52",
      "patch": "@@ -0,0 +1,121 @@\n+/* 32-bit ELF support for ARM\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of BFD, the Binary File Descriptor library.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; if not, write to the Free Software\n+   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n+   MA 02110-1301, USA.  */\n+\n+\n+/* ARM VFP11 erratum workaround support.  */\n+typedef enum\n+{\n+  BFD_ARM_VFP11_FIX_DEFAULT,\n+  BFD_ARM_VFP11_FIX_NONE,\n+  BFD_ARM_VFP11_FIX_SCALAR,\n+  BFD_ARM_VFP11_FIX_VECTOR\n+} bfd_arm_vfp11_fix;\n+\n+extern void bfd_elf32_arm_init_maps\n+  (bfd *);\n+\n+extern void bfd_elf32_arm_set_vfp11_fix\n+  (bfd *, struct bfd_link_info *);\n+\n+extern void bfd_elf32_arm_set_cortex_a8_fix\n+  (bfd *, struct bfd_link_info *);\n+\n+extern bfd_boolean bfd_elf32_arm_vfp11_erratum_scan\n+  (bfd *, struct bfd_link_info *);\n+\n+extern void bfd_elf32_arm_vfp11_fix_veneer_locations\n+  (bfd *, struct bfd_link_info *);\n+\n+/* ARM STM STM32L4XX erratum workaround support.  */\n+typedef enum\n+{\n+  BFD_ARM_STM32L4XX_FIX_NONE,\n+  BFD_ARM_STM32L4XX_FIX_DEFAULT,\n+  BFD_ARM_STM32L4XX_FIX_ALL\n+} bfd_arm_stm32l4xx_fix;\n+\n+extern void bfd_elf32_arm_set_stm32l4xx_fix\n+  (bfd *, struct bfd_link_info *);\n+\n+extern bfd_boolean bfd_elf32_arm_stm32l4xx_erratum_scan\n+  (bfd *, struct bfd_link_info *);\n+\n+extern void bfd_elf32_arm_stm32l4xx_fix_veneer_locations\n+  (bfd *, struct bfd_link_info *);\n+\n+/* ELF ARM Interworking support.  Called from linker.  */\n+extern bfd_boolean bfd_elf32_arm_allocate_interworking_sections\n+  (struct bfd_link_info *);\n+\n+extern bfd_boolean bfd_elf32_arm_process_before_allocation\n+  (bfd *, struct bfd_link_info *);\n+\n+struct elf32_arm_params {\n+  char *thumb_entry_symbol;\n+  int byteswap_code;\n+  int target1_is_rel;\n+  char * target2_type;\n+  int fix_v4bx;\n+  int use_blx;\n+  bfd_arm_vfp11_fix vfp11_denorm_fix;\n+  bfd_arm_stm32l4xx_fix stm32l4xx_fix;\n+  int no_enum_size_warning;\n+  int no_wchar_size_warning;\n+  int pic_veneer;\n+  int fix_cortex_a8;\n+  int fix_arm1176;\n+  int merge_exidx_entries;\n+  int cmse_implib;\n+  bfd *in_implib_bfd;\n+};\n+\n+void bfd_elf32_arm_set_target_params\n+  (bfd *, struct bfd_link_info *, struct elf32_arm_params *);\n+\n+extern bfd_boolean bfd_elf32_arm_get_bfd_for_interworking\n+  (bfd *, struct bfd_link_info *);\n+\n+extern bfd_boolean bfd_elf32_arm_add_glue_sections_to_bfd\n+  (bfd *, struct bfd_link_info *);\n+\n+extern void bfd_elf32_arm_keep_private_stub_output_sections\n+  (struct bfd_link_info *);\n+\n+extern void bfd_elf32_arm_set_byteswap_code\n+  (struct bfd_link_info *, int);\n+\n+extern void bfd_elf32_arm_use_long_plt (void);\n+\n+/* ARM stub generation support.  Called from the linker.  */\n+extern int elf32_arm_setup_section_lists\n+  (bfd *, struct bfd_link_info *);\n+extern void elf32_arm_next_input_section\n+  (struct bfd_link_info *, struct bfd_section *);\n+extern bfd_boolean elf32_arm_size_stubs\n+  (bfd *, bfd *, struct bfd_link_info *, bfd_signed_vma,\n+   struct bfd_section * (*) (const char *, struct bfd_section *,\n+\t\t\t     struct bfd_section *, unsigned int),\n+   void (*) (void));\n+extern bfd_boolean elf32_arm_build_stubs\n+  (struct bfd_link_info *);\n+\n+/* ARM unwind section editing support.  */\n+extern bfd_boolean elf32_arm_fix_exidx_coverage\n+(struct bfd_section **, unsigned int, struct bfd_link_info *, bfd_boolean);"
    },
    {
      "sha": "733b8380f5691772c3581d3b3d973321bdae9367",
      "filename": "bfd/pe-arm-wince.c",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37164d78b0d9600862b7038b896922127749b52/bfd/pe-arm-wince.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37164d78b0d9600862b7038b896922127749b52/bfd/pe-arm-wince.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pe-arm-wince.c?ref=f37164d78b0d9600862b7038b896922127749b52",
      "patch": "@@ -18,6 +18,9 @@\n    Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n    MA 02110-1301, USA.  */\n \n+#include \"sysdep.h\"\n+#include \"bfd.h\"\n+\n #define TARGET_UNDERSCORE    0\n #define USER_LABEL_PREFIX    \"\"\n \n@@ -26,20 +29,16 @@\n #define TARGET_BIG_SYM       arm_pe_wince_be_vec\n #define TARGET_BIG_NAME      \"pe-arm-wince-big\"\n \n+#define LOCAL_LABEL_PREFIX \".\"\n+\n+#undef  bfd_pe_print_pdata\n+#define\tbfd_pe_print_pdata   _bfd_pe_print_ce_compressed_pdata\n+\n #define bfd_arm_allocate_interworking_sections \\\n   bfd_arm_wince_pe_allocate_interworking_sections\n #define bfd_arm_get_bfd_for_interworking \\\n   bfd_arm_wince_pe_get_bfd_for_interworking\n #define bfd_arm_process_before_allocation \\\n   bfd_arm_wince_pe_process_before_allocation\n \n-#define LOCAL_LABEL_PREFIX \".\"\n-\n-#include \"sysdep.h\"\n-#include \"bfd.h\"\n-\n-#undef  bfd_pe_print_pdata\n-#define\tbfd_pe_print_pdata   _bfd_pe_print_ce_compressed_pdata\n-\n #include \"pe-arm.c\"\n-"
    },
    {
      "sha": "4667046108fff7d9abdd215454a1b26aeae7a4c7",
      "filename": "bfd/pe-arm.c",
      "status": "modified",
      "additions": 9,
      "deletions": 12,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37164d78b0d9600862b7038b896922127749b52/bfd/pe-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37164d78b0d9600862b7038b896922127749b52/bfd/pe-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/pe-arm.c?ref=f37164d78b0d9600862b7038b896922127749b52",
      "patch": "@@ -18,18 +18,6 @@\n    Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n    MA 02110-1301, USA.  */\n \n-\n-/* Do this before including bfd.h, so we prototype the right functions.  */\n-\n-#ifndef bfd_arm_allocate_interworking_sections\n-#define bfd_arm_allocate_interworking_sections \\\n-  bfd_armpe_allocate_interworking_sections\n-#define bfd_arm_get_bfd_for_interworking \\\n-  bfd_armpe_get_bfd_for_interworking\n-#define bfd_arm_process_before_allocation \\\n-  bfd_armpe_process_before_allocation\n-#endif\n-\n #include \"sysdep.h\"\n #include \"bfd.h\"\n \n@@ -64,4 +52,13 @@\n { COFF_SECTION_NAME_PARTIAL_MATCH (\".gnu.linkonce.wi.\"), \\\n   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 0 }\n \n+#ifndef bfd_arm_allocate_interworking_sections\n+#define bfd_arm_allocate_interworking_sections \\\n+  bfd_armpe_allocate_interworking_sections\n+#define bfd_arm_get_bfd_for_interworking \\\n+  bfd_armpe_get_bfd_for_interworking\n+#define bfd_arm_process_before_allocation \\\n+  bfd_armpe_process_before_allocation\n+#endif\n+\n #include \"coff-arm.c\""
    },
    {
      "sha": "cab918a49c3580e34f88372d6da497980cfb3616",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37164d78b0d9600862b7038b896922127749b52/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37164d78b0d9600862b7038b896922127749b52/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=f37164d78b0d9600862b7038b896922127749b52",
      "patch": "@@ -1,3 +1,7 @@\n+2019-09-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/tc-arm.c: Include cpu-arm.h.\n+\n 2019-09-21  Alan Modra  <amodra@gmail.com>\n \n \t* config/tc-i386.c (md_parse_option): Fix warning on vexwig assignment."
    },
    {
      "sha": "7760d1807d3599690d1ee8cdfcdc90f547699605",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37164d78b0d9600862b7038b896922127749b52/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37164d78b0d9600862b7038b896922127749b52/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=f37164d78b0d9600862b7038b896922127749b52",
      "patch": "@@ -32,6 +32,7 @@\n #include \"obstack.h\"\n #include \"libiberty.h\"\n #include \"opcode/arm.h\"\n+#include \"cpu-arm.h\"\n \n #ifdef OBJ_ELF\n #include \"elf/arm.h\""
    },
    {
      "sha": "f0fcd202e9d5384dab673bd932e16e72bc004402",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37164d78b0d9600862b7038b896922127749b52/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37164d78b0d9600862b7038b896922127749b52/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=f37164d78b0d9600862b7038b896922127749b52",
      "patch": "@@ -1,3 +1,8 @@\n+2019-09-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* emultempl/armelf.em: Include elf32-arm.h.\n+\t* emultempl/pe.em: Move func defines later and include coff-arm.h.\n+\n 2019-09-23  Alan Modra  <amodra@gmail.com>\n \n \t* emultempl/aarch64elf.em: Include elfxx-aarch64.h."
    },
    {
      "sha": "9a1bc9a04b40b4ab93dbf563ed59b008f301770f",
      "filename": "ld/emultempl/armelf.em",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37164d78b0d9600862b7038b896922127749b52/ld/emultempl/armelf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37164d78b0d9600862b7038b896922127749b52/ld/emultempl/armelf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/armelf.em?ref=f37164d78b0d9600862b7038b896922127749b52",
      "patch": "@@ -27,6 +27,7 @@ fragment <<EOF\n \n #include \"ldctor.h\"\n #include \"elf/arm.h\"\n+#include \"elf32-arm.h\"\n \n static struct elf32_arm_params params =\n {"
    },
    {
      "sha": "c1932d79adeb8ebf2f8b31f1f03cc3985793af7c",
      "filename": "ld/emultempl/pe.em",
      "status": "modified",
      "additions": 11,
      "deletions": 12,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37164d78b0d9600862b7038b896922127749b52/ld/emultempl/pe.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37164d78b0d9600862b7038b896922127749b52/ld/emultempl/pe.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pe.em?ref=f37164d78b0d9600862b7038b896922127749b52",
      "patch": "@@ -37,18 +37,6 @@ fragment <<EOF\n \n #define TARGET_IS_${EMULATION_NAME}\n \n-/* Do this before including bfd.h, so we prototype the right functions.  */\n-\n-#if defined(TARGET_IS_armpe) \\\n-    || defined(TARGET_IS_arm_wince_pe)\n-#define bfd_arm_allocate_interworking_sections \\\n-\tbfd_${EMULATION_NAME}_allocate_interworking_sections\n-#define bfd_arm_get_bfd_for_interworking \\\n-\tbfd_${EMULATION_NAME}_get_bfd_for_interworking\n-#define bfd_arm_process_before_allocation \\\n-\tbfd_${EMULATION_NAME}_process_before_allocation\n-#endif\n-\n #include \"sysdep.h\"\n #include \"bfd.h\"\n #include \"bfdlink.h\"\n@@ -78,6 +66,17 @@ fragment <<EOF\n #include \"../bfd/libcoff.h\"\n #include \"../bfd/libpei.h\"\n \n+#if defined(TARGET_IS_armpe) \\\n+    || defined(TARGET_IS_arm_wince_pe)\n+#define bfd_arm_allocate_interworking_sections \\\n+\tbfd_${EMULATION_NAME}_allocate_interworking_sections\n+#define bfd_arm_get_bfd_for_interworking \\\n+\tbfd_${EMULATION_NAME}_get_bfd_for_interworking\n+#define bfd_arm_process_before_allocation \\\n+\tbfd_${EMULATION_NAME}_process_before_allocation\n+#include \"coff-arm.h\"\n+#endif\n+\n #include \"deffile.h\"\n #include \"pe-dll.h\"\n #include \"safe-ctype.h\""
    }
  ]
}