{
  "sha": "3b3aaacba15292f185b6e8ba5faba1ed89c9f908",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2IzYWFhY2JhMTUyOTJmMTg1YjZlOGJhNWZhYmExZWQ4OWM5ZjkwOA==",
  "commit": {
    "author": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2020-05-10T16:31:03Z"
    },
    "committer": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2020-05-15T20:17:45Z"
    },
    "message": "Fix/improve 'help CLASS' output\n\nCurrently, help CLASS possibly shows several times the same help,\nas it shows it once for the command, and once for each alias.\n\nThe final objective of this patch series is to have class_alias used only\nfor user defined aliases, not anymore for aliases predefined by GDB.\nThe command 'help aliases' will then only show the user defined aliases.\nSo, the idea is that GDB predefined aliases will be shown together\nwith their aliased command.\n\nThis commit changes 'help CLASS' so that a command is shown once in the output,\nwith all its aliases.\nThis ensures:\n  * that the user has only to read once the same help text\n  * and sees the command and all its aliases in a glance, a.o. allowing\n    the user to choose the preferred way (e.g. the shortest one,\n    or the most mnemonic one) to type the command.\n\nFor example, the old output:\n   (gdb) help stack\n   ...\n   List of commands:\n\n   backtrace -- Print backtrace of all stack frames, or innermost COUNT frames.\n   bt -- Print backtrace of all stack frames, or innermost COUNT frames.\n   ...\n(note that 'where' is not shown in this output)\n\nbecomes\n   (gdb) help stack\n   ...\n   List of commands:\n\n   backtrace, where, bt -- Print backtrace of all stack frames, or innermost COUNT frames.\n   ...\n\nThe output layout chosen is to have the command first, followed by all its\naliases separated by a comma.  Note that the command and alias names are\ntitle-styled.  For sure, other layouts could be discussed, but this one is IMO\nreadable and compact.\n\nThe function 'help_cmd_list' can be simplified by removing the prefix argument,\nas the prefixname of a command can now be retrieved in the GDB command tree\nstructure.\n\nThis also fixes the fact that 'help aliases' wrongly shows a long\nlist of (non-alias) when defining an alias for a prefix command.\nFor example, after:\n    (gdb) alias montre = show\n  then\n    (gdb) help aliases\n  shows hundreds of sub-commands starting with the non aliased command,\n  such as:\n    montre -- Generic command for showing things about the debugger.\n    show ada -- Generic command for showing Ada-specific settings.\n    show ada print-signatures -- Show whether the output of formal ...\n    ....\n\n'help_cmd_list' is also made static, as it is only used inside cli-decode.c.\n\nNote that the 'help CLASS' is somewhat broken, in the sense that it\nsometimes shows too many commands (commands not belonging to CLASS)\nand sometimes shows not enough commands (not showing some commands\nbelonging to CLASS).\nFor example, 'help breakpoints' shows the command\n'disable pretty-printer' and 'disable unwinder', not related to breakpoints.\nOn the other end, 'help stack' does not show 'disable unwinder'\nwhile 'disable unwinder' is defined in unwinders.py as belonging to class_stack.\nFixing the missing commands is easy to do,\nbut fixing the excess commands is not straightforward, as many\nsubcommands have a class 'no_class' or 'all_class'.\nPossibly, some of this might be improved/fixed in another patch series.\n\nWith this patch series, the 'abbrev flag' has as only remaining purpose\nto avoid having the abbreviation alias appearing in the completion list,\nso change 'help alias' accordingly.\n\ngdb/ChangeLog\n\n2020-05-15  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\n\t* cli/cli-decode.h (help_cmd_list): Remove declaration.\n\t* cli/cli-decode.c (help_cmd_list): Declare as static,\n\tremove prefix argument, use bool for recurse arg, rework to show the aliases of\n\ta command together with the command.\n\t(fput_command_name_styled, fput_command_names_styled): New functions.\n\t(print_help_for_command): Remove prefix arg, use bool for recurse arg, use\n\tfput_command_name_styled.\n\t(help_list, help_all): Update callers to remove prefix arg and use bool recurse.\n\t* cli/cli-cmds.c (_initialize_cli_cmds): Update alias_command doc.\n\ngdb/testsuite/ChangeLog\n\n2020-05-15  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\n\t* gdb.base/alias.exp: Update help output check.",
    "tree": {
      "sha": "3ec3b1d2428a008bfa70aea3f6dacdd30b269943",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3ec3b1d2428a008bfa70aea3f6dacdd30b269943"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3b3aaacba15292f185b6e8ba5faba1ed89c9f908",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3b3aaacba15292f185b6e8ba5faba1ed89c9f908",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3b3aaacba15292f185b6e8ba5faba1ed89c9f908",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3b3aaacba15292f185b6e8ba5faba1ed89c9f908/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "7aa1b46f4321eb2c2054c4d8985f2d8e3c18aa36",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7aa1b46f4321eb2c2054c4d8985f2d8e3c18aa36",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7aa1b46f4321eb2c2054c4d8985f2d8e3c18aa36"
    }
  ],
  "stats": {
    "total": 151,
    "additions": 118,
    "deletions": 33
  },
  "files": [
    {
      "sha": "2298843350b78b20467c5545b366c5dda070675e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b3aaacba15292f185b6e8ba5faba1ed89c9f908/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b3aaacba15292f185b6e8ba5faba1ed89c9f908/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3b3aaacba15292f185b6e8ba5faba1ed89c9f908",
      "patch": "@@ -1,3 +1,15 @@\n+2020-05-15  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\n+\t* cli/cli-decode.h (help_cmd_list): Remove declaration.\n+\t* cli/cli-decode.c (help_cmd_list): Declare as static,\n+\tremove prefix argument, use bool for recurse arg, rework to show the aliases of\n+\ta command together with the command.\n+\t(fput_command_name_styled, fput_command_names_styled): New functions.\n+\t(print_help_for_command): Remove prefix arg, use bool for recurse arg, use\n+\tfput_command_name_styled.\n+\t(help_list, help_all): Update callers to remove prefix arg and use bool recurse.\n+\t* cli/cli-cmds.c (_initialize_cli_cmds): Update alias_command doc.\n+\n 2020-05-15  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* cli/cli-setshow.h (cmd_show_list): Remove prefix argument."
    },
    {
      "sha": "eb6e32b04693cb4ec65e5b97af4a4539bfd92e12",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b3aaacba15292f185b6e8ba5faba1ed89c9f908/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b3aaacba15292f185b6e8ba5faba1ed89c9f908/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=3b3aaacba15292f185b6e8ba5faba1ed89c9f908",
      "patch": "@@ -2454,7 +2454,7 @@ Usage: alias [-a] [--] ALIAS = COMMAND\\n\\\n ALIAS is the name of the alias command to create.\\n\\\n COMMAND is the command being aliased to.\\n\\\n If \\\"-a\\\" is specified, the command is an abbreviation,\\n\\\n-and will not appear in help command list output.\\n\\\n+and will not be used in command completion.\\n\\\n \\n\\\n Examples:\\n\\\n Make \\\"spe\\\" an alias of \\\"set print elements\\\":\\n\\"
    },
    {
      "sha": "093692e7ac0d27dd95c55053c8637575ad5dd246",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 100,
      "deletions": 28,
      "changes": 128,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b3aaacba15292f185b6e8ba5faba1ed89c9f908/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b3aaacba15292f185b6e8ba5faba1ed89c9f908/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=3b3aaacba15292f185b6e8ba5faba1ed89c9f908",
      "patch": "@@ -43,6 +43,11 @@ static struct cmd_list_element *find_cmd (const char *command,\n \t\t\t\t\t  int ignore_help_classes,\n \t\t\t\t\t  int *nfound);\n \n+static void help_cmd_list (struct cmd_list_element *list,\n+\t\t\t   enum command_class theclass,\n+\t\t\t   bool recurse,\n+\t\t\t   struct ui_file *stream);\n+\n static void help_all (struct ui_file *stream);\n \n /* Look up a command whose 'prefixlist' is KEY.  Return the command if found,\n@@ -76,8 +81,8 @@ lookup_cmd_for_prefixlist (struct cmd_list_element **key,\n }\n \n static void\n-print_help_for_command (struct cmd_list_element *c, const char *prefix,\n-\t\t\tint recurse, struct ui_file *stream);\n+print_help_for_command (struct cmd_list_element *c,\n+\t\t\tbool recurse, struct ui_file *stream);\n \n \f\n /* Set the callback function for the specified command.  For each both\n@@ -1021,6 +1026,43 @@ add_com_suppress_notification (const char *name, enum command_class theclass,\n \t\t\t\t\t&cmdlist, suppress_notification);\n }\n \n+/* Print the prefix of C followed by name of C in title style.  */\n+\n+static void\n+fput_command_name_styled (struct cmd_list_element *c, struct ui_file *stream)\n+{\n+  const char *prefixname\n+    = c->prefix == nullptr ? \"\" : c->prefix->prefixname;\n+\n+  fprintf_styled (stream, title_style.style (), \"%s%s\", prefixname, c->name);\n+}\n+\n+/* If C has one or more aliases, style print the name of C and\n+   the name of its aliases, separated by commas.\n+   If ALWAYS_FPUT_C_NAME, print the name of C even if it has no aliases.\n+   If one or more names are printed, POSTFIX is printed after the last name.\n+*/\n+\n+static void\n+fput_command_names_styled (struct cmd_list_element *c,\n+\t\t\t   bool always_fput_c_name, const char *postfix,\n+\t\t\t   struct ui_file *stream)\n+{\n+  if (always_fput_c_name ||  c->aliases != nullptr)\n+    fput_command_name_styled (c, stream);\n+  if (c->aliases != nullptr)\n+    {\n+      for (cmd_list_element *iter = c->aliases; iter; iter = iter->alias_chain)\n+\t{\n+\t  fputs_filtered (\", \", stream);\n+\t  wrap_here (\"   \");\n+\t  fput_command_name_styled (iter, stream);\n+\t}\n+    }\n+  if (always_fput_c_name ||  c->aliases != nullptr)\n+    fputs_filtered (postfix, stream);\n+}\n+\n /* If VERBOSE, print the full help for command C and highlight the\n    documentation parts matching HIGHLIGHT,\n    otherwise print only one-line help for command C.  */\n@@ -1208,7 +1250,7 @@ help_list (struct cmd_list_element *list, const char *cmdtype,\n   else\n     fprintf_filtered (stream, \"List of %scommands:\\n\\n\", cmdtype2);\n \n-  help_cmd_list (list, theclass, cmdtype, (int) theclass >= 0, stream);\n+  help_cmd_list (list, theclass, theclass >= 0, stream);\n \n   if (theclass == all_classes)\n     {\n@@ -1255,7 +1297,7 @@ help_all (struct ui_file *stream)\n       if (c->func == NULL)\n \t{\n \t  fprintf_filtered (stream, \"\\nCommand class: %s\\n\\n\", c->name);\n-\t  help_cmd_list (cmdlist, c->theclass, \"\", 1, stream);\n+\t  help_cmd_list (cmdlist, c->theclass, true, stream);\n \t}\n     }\n \n@@ -1275,7 +1317,7 @@ help_all (struct ui_file *stream)\n \t      fprintf_filtered (stream, \"\\nUnclassified commands\\n\\n\");\n \t      seen_unclassified = 1;\n \t    }\n-\t  print_help_for_command (c, \"\", 1, stream);\n+\t  print_help_for_command (c, 1, stream);\n \t}\n     }\n \n@@ -1327,12 +1369,10 @@ print_doc_line (struct ui_file *stream, const char *str,\n    If RECURSE is non-zero, also print one-line descriptions\n    of all prefixed subcommands.  */\n static void\n-print_help_for_command (struct cmd_list_element *c, const char *prefix,\n-\t\t\tint recurse, struct ui_file *stream)\n+print_help_for_command (struct cmd_list_element *c,\n+\t\t\tbool recurse, struct ui_file *stream)\n {\n-  fprintf_styled (stream, title_style.style (),\n-\t\t  \"%s%s\", prefix, c->name);\n-  fputs_filtered (\" -- \", stream);\n+  fput_command_names_styled (c, true, \" -- \", stream);\n   print_doc_line (stream, c->doc, false);\n   fputs_filtered (\"\\n\", stream);\n \n@@ -1342,48 +1382,80 @@ print_help_for_command (struct cmd_list_element *c, const char *prefix,\n     /* Subcommands of a prefix command typically have 'all_commands'\n        as class.  If we pass CLASS to recursive invocation,\n        most often we won't see anything.  */\n-    help_cmd_list (*c->prefixlist, all_commands, c->prefixname, 1, stream);\n+    help_cmd_list (*c->prefixlist, all_commands, true, stream);\n }\n \n /*\n  * Implement a help command on command list LIST.\n  * RECURSE should be non-zero if this should be done recursively on\n  * all sublists of LIST.\n- * PREFIX is the prefix to print before each command name.\n  * STREAM is the stream upon which the output should be written.\n  * THECLASS should be:\n  *      A non-negative class number to list only commands in that\n- * class.\n  *      ALL_COMMANDS to list all commands in list.\n  *      ALL_CLASSES  to list all classes in list.\n  *\n+ *   Note that aliases are only shown when THECLASS is class_alias.\n+ *   In the other cases, the aliases will be shown together with their\n+ *   aliased command.\n+ *\n  *   Note that RECURSE will be active on *all* sublists, not just the\n  * ones selected by the criteria above (ie. the selection mechanism\n  * is at the low level, not the high-level).\n  */\n-void\n+\n+static void\n help_cmd_list (struct cmd_list_element *list, enum command_class theclass,\n-\t       const char *prefix, int recurse, struct ui_file *stream)\n+\t       bool recurse, struct ui_file *stream)\n {\n   struct cmd_list_element *c;\n \n   for (c = list; c; c = c->next)\n     {\n-      if (c->abbrev_flag == 0\n-\t  && !c->cmd_deprecated\n-\t  && (theclass == all_commands\n-\t      || (theclass == all_classes && c->func == NULL)\n-\t      || (theclass == c->theclass && c->func != NULL)))\n+      if (c->abbrev_flag == 1 || c->cmd_deprecated)\n \t{\n-\t  print_help_for_command (c, prefix, recurse, stream);\n+\t  /* Do not show abbreviations or deprecated commands.  */\n+\t  continue;\n \t}\n-      else if (c->abbrev_flag == 0\n-\t       && recurse\n-\t       && !c->cmd_deprecated\n-\t       && theclass == class_user && c->prefixlist != NULL)\n-\t/* User-defined commands may be subcommands.  */\n-\thelp_cmd_list (*c->prefixlist, theclass, c->prefixname,\n-\t\t       recurse, stream);\n+\n+      if (c->cmd_pointer != nullptr && theclass != class_alias)\n+\t{\n+\t  /* Do not show an alias, unless specifically showing the\n+\t     list of aliases:  for all other classes, an alias is\n+\t     shown (if needed) together with its aliased command.  */\n+\t  continue;\n+\t}\n+\n+      if (theclass == all_commands\n+\t  || (theclass == all_classes && c->func == NULL)\n+\t  || (theclass == c->theclass && c->func != NULL))\n+\t{\n+\t  /* show C when\n+             - showing all commands\n+\t     - showing all classes and C is a help class\n+\t     - showing commands of THECLASS and C is not the help class  */\n+\n+\t  /* If we show the class_alias and C is an alias, do not recurse,\n+\t     as this would show the (possibly very long) not very useful\n+\t     list of sub-commands of the aliased command.  */\n+\t  print_help_for_command\n+\t    (c,\n+\t     recurse && (theclass != class_alias || c->cmd_pointer == nullptr),\n+\t     stream);\n+\t  continue;\n+\t}\n+\n+      if (recurse\n+\t  && (theclass == class_user || theclass == class_alias)\n+\t  && c->prefixlist != NULL)\n+\t{\n+\t  /* User-defined commands or aliases may be subcommands.  */\n+\t  help_cmd_list (*c->prefixlist, theclass, recurse, stream);\n+\t  continue;\n+\t}\n+\n+      /* Do not show C or recurse on C, e.g. because C does not belong to\n+\t THECLASS or because C is a help class.  */\n     }\n }\n \f"
    },
    {
      "sha": "f4719bfac47ab855cf1c11c3e1ddc67e8482ada4",
      "filename": "gdb/cli/cli-decode.h",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b3aaacba15292f185b6e8ba5faba1ed89c9f908/gdb/cli/cli-decode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b3aaacba15292f185b6e8ba5faba1ed89c9f908/gdb/cli/cli-decode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.h?ref=3b3aaacba15292f185b6e8ba5faba1ed89c9f908",
      "patch": "@@ -249,9 +249,6 @@ struct cmd_list_element\n     int *suppress_notification = nullptr;\n   };\n \n-extern void help_cmd_list (struct cmd_list_element *, enum command_class,\n-\t\t\t   const char *, int, struct ui_file *);\n-\n /* Functions that implement commands about CLI commands.  */\n \n extern void help_cmd (const char *, struct ui_file *);"
    },
    {
      "sha": "36afa3dbd3d928c397bb46bdc50a4dd286f45dc5",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b3aaacba15292f185b6e8ba5faba1ed89c9f908/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b3aaacba15292f185b6e8ba5faba1ed89c9f908/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=3b3aaacba15292f185b6e8ba5faba1ed89c9f908",
      "patch": "@@ -1,5 +1,9 @@\n 2020-05-15  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n+\t* gdb.base/alias.exp: Update help output check.\n+\n+c2020-05-15  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\n \t* gdb.base/default.exp: Update output following fixes.\n \n 2020-05-15  Philippe Waroquiers  <philippe.waroquiers@skynet.be>"
    },
    {
      "sha": "69cfde67c14ad57f19ecd3a9f1daee42d0ec4883",
      "filename": "gdb/testsuite/gdb.base/alias.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b3aaacba15292f185b6e8ba5faba1ed89c9f908/gdb/testsuite/gdb.base/alias.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b3aaacba15292f185b6e8ba5faba1ed89c9f908/gdb/testsuite/gdb.base/alias.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/alias.exp?ref=3b3aaacba15292f185b6e8ba5faba1ed89c9f908",
      "patch": "@@ -65,7 +65,7 @@ gdb_test \"show print elements\" \"Limit .* is 50\\[.\\]\" \"verify spe\"\n gdb_test_no_output \"alias set pr elms = set p elem\"\n gdb_test_no_output \"set pr elms 51\"\n gdb_test \"show print elements\" \"Limit .* is 51\\[.\\]\" \"verify set pr elms\"\n-gdb_test \"help set print\" \"set print elms .*\"\n+gdb_test \"help set print\" \"set print elements, set print elms, spe .*\"\n \n # Verify alias command detects a non existing prefix.\n gdb_test \"alias assigne imprime limite-elements = set print elements\" \\"
    }
  ]
}