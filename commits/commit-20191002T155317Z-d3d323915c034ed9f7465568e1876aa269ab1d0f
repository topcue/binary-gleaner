{
  "sha": "d3d323915c034ed9f7465568e1876aa269ab1d0f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDNkMzIzOTE1YzAzNGVkOWY3NDY1NTY4ZTE4NzZhYTI2OWFiMWQwZg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-07-31T19:05:37Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-10-02T15:53:17Z"
    },
    "message": "Search global block from basic_lookup_symbol_nonlocal\n\nThis changes lookup_global_symbol to look in the global block\nof the passed-in block.  If no block was passed in, it reverts to the\nprevious behavior.\n\nThis change is needed to ensure that 'FILENAME'::NAME lookups work\nproperly.  As debugging Pedro's test case showed, this was not working\nproperly in the case where multiple identical names could be found\n(the one situation where this feature is truly needed :-).\n\nThis also removes some old comments from basic_lookup_symbol_nonlocal\nthat no longer apply.\n\nNote that the new test cases for this change will appear in a later\npatch.  They are in gdb.base/print-file-var.exp.\n\ngdb/ChangeLog\n2019-10-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n\n\t* symtab.c (lookup_global_symbol): Search global block.",
    "tree": {
      "sha": "1bf6138447b040297b3289490ca9025e19b64894",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1bf6138447b040297b3289490ca9025e19b64894"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d3d323915c034ed9f7465568e1876aa269ab1d0f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3d323915c034ed9f7465568e1876aa269ab1d0f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d3d323915c034ed9f7465568e1876aa269ab1d0f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3d323915c034ed9f7465568e1876aa269ab1d0f/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "38583298e0ab81ab78689d89abcb5122e0251c74",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/38583298e0ab81ab78689d89abcb5122e0251c74",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/38583298e0ab81ab78689d89abcb5122e0251c74"
    }
  ],
  "stats": {
    "total": 45,
    "additions": 17,
    "deletions": 28
  },
  "files": [
    {
      "sha": "c2417cfd3715bc2142a25241a3d63d29edd8a87b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3d323915c034ed9f7465568e1876aa269ab1d0f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3d323915c034ed9f7465568e1876aa269ab1d0f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d3d323915c034ed9f7465568e1876aa269ab1d0f",
      "patch": "@@ -1,3 +1,7 @@\n+2019-10-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* symtab.c (lookup_global_symbol): Search global block.\n+\n 2019-10-02  Tom Tromey  <tromey@adacore.com>\n \n \t* coffread.c (process_coff_symbol): Update."
    },
    {
      "sha": "7b4444c7d38cadfc9950adac586dad4c094c14ce",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 13,
      "deletions": 28,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3d323915c034ed9f7465568e1876aa269ab1d0f/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3d323915c034ed9f7465568e1876aa269ab1d0f/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=d3d323915c034ed9f7465568e1876aa269ab1d0f",
      "patch": "@@ -2414,34 +2414,6 @@ basic_lookup_symbol_nonlocal (const struct language_defn *langdef,\n {\n   struct block_symbol result;\n \n-  /* NOTE: carlton/2003-05-19: The comments below were written when\n-     this (or what turned into this) was part of lookup_symbol_aux;\n-     I'm much less worried about these questions now, since these\n-     decisions have turned out well, but I leave these comments here\n-     for posterity.  */\n-\n-  /* NOTE: carlton/2002-12-05: There is a question as to whether or\n-     not it would be appropriate to search the current global block\n-     here as well.  (That's what this code used to do before the\n-     is_a_field_of_this check was moved up.)  On the one hand, it's\n-     redundant with the lookup in all objfiles search that happens\n-     next.  On the other hand, if decode_line_1 is passed an argument\n-     like filename:var, then the user presumably wants 'var' to be\n-     searched for in filename.  On the third hand, there shouldn't be\n-     multiple global variables all of which are named 'var', and it's\n-     not like decode_line_1 has ever restricted its search to only\n-     global variables in a single filename.  All in all, only\n-     searching the static block here seems best: it's correct and it's\n-     cleanest.  */\n-\n-  /* NOTE: carlton/2002-12-05: There's also a possible performance\n-     issue here: if you usually search for global symbols in the\n-     current file, then it would be slightly better to search the\n-     current global block before searching all the symtabs.  But there\n-     are other factors that have a much greater effect on performance\n-     than that one, so I don't think we should worry about that for\n-     now.  */\n-\n   /* NOTE: dje/2014-10-26: The lookup in all objfiles search could skip\n      the current objfile.  Searching the current objfile first is useful\n      for both matching user expectations as well as performance.  */\n@@ -2670,6 +2642,19 @@ lookup_global_symbol (const char *name,\n \t\t      const struct block *block,\n \t\t      const domain_enum domain)\n {\n+  /* If a block was passed in, we want to search the corresponding\n+     global block first.  This yields \"more expected\" behavior, and is\n+     needed to support 'FILENAME'::VARIABLE lookups.  */\n+  const struct block *global_block = block_global_block (block);\n+  if (global_block != nullptr)\n+    {\n+      symbol *sym = lookup_symbol_in_block (name,\n+\t\t\t\t\t    symbol_name_match_type::FULL,\n+\t\t\t\t\t    global_block, domain);\n+      if (sym != nullptr)\n+\treturn { sym, global_block };\n+    }\n+\n   struct objfile *objfile = lookup_objfile_from_block (block);\n   return lookup_global_or_static_symbol (name, GLOBAL_BLOCK, objfile, domain);\n }"
    }
  ]
}