{
  "sha": "4d1795ac4dda0f824eae9fd3f810aeb80a993245",
  "node_id": "C_kwDOANOeidoAKDRkMTc5NWFjNGRkYTBmODI0ZWFlOWZkM2Y4MTBhZWI4MGE5OTMyNDU",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-10-19T19:10:27Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-10-21T14:24:40Z"
    },
    "message": "Fix latent Ada bug when accessing field offsets\n\nThe \"add accessors for field (and call site) location\" patch caused a\ngdb crash when running the internal AdaCore testsuite.  This turned\nout to be a latent bug in ada-lang.c.\n\nThe immediate cause of the bug is that find_struct_field\nunconditionally uses TYPE_FIELD_BITPOS.  This causes an assert for a\ndynamic type.\n\nThis patch fixes the problem by doing two things.  First, it changes\nfind_struct_field to use a dummy value for the field offset in the\nsituation where the offset is not actually needed by the caller.  This\nworks because the offset isn't used in any other way -- only as a\nresult.\n\nSecond, this patch assures that calls to find_struct_field use a\nresolved type when the offset is needed.  For\nvalue_tag_from_contents_and_address, this is done by resolving the\ntype explicitly.  In ada_value_struct_elt, this is done by passing\nnullptr for the out parameters when they are not needed (the second\ncall in this function already uses a resolved type).\n\nNote that, while we believe the parent field probably can't occur at a\nvariable offset, the patch still updates this code path, just in case.\n\nI've updated an existing test case to reproduce the crash.\nI'm checking this in.",
    "tree": {
      "sha": "62368bcb0292aa6fea105513a1d0bb60765f4713",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/62368bcb0292aa6fea105513a1d0bb60765f4713"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4d1795ac4dda0f824eae9fd3f810aeb80a993245",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4d1795ac4dda0f824eae9fd3f810aeb80a993245",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4d1795ac4dda0f824eae9fd3f810aeb80a993245",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4d1795ac4dda0f824eae9fd3f810aeb80a993245/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ced10cb78d01652f9e1bb1d1e465327dfe1debaa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ced10cb78d01652f9e1bb1d1e465327dfe1debaa",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ced10cb78d01652f9e1bb1d1e465327dfe1debaa"
    }
  ],
  "stats": {
    "total": 118,
    "additions": 75,
    "deletions": 43
  },
  "files": [
    {
      "sha": "8b9e94e25d847d42e7b40fb250577d57ede11b29",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 24,
      "deletions": 7,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d1795ac4dda0f824eae9fd3f810aeb80a993245/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d1795ac4dda0f824eae9fd3f810aeb80a993245/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=4d1795ac4dda0f824eae9fd3f810aeb80a993245",
      "patch": "@@ -4095,8 +4095,8 @@ ada_value_struct_elt (struct value *arg, const char *name, int no_err)\n \t     If not found then let's look in the fixed type.  */\n \n \t  if (!find_struct_field (name, t1, 0,\n-\t\t\t\t  &field_type, &byte_offset, &bit_offset,\n-\t\t\t\t  &bit_size, NULL))\n+\t\t\t\t  nullptr, nullptr, nullptr,\n+\t\t\t\t  nullptr, nullptr))\n \t    check_tag = 1;\n \t  else\n \t    check_tag = 0;\n@@ -6041,7 +6041,11 @@ value_tag_from_contents_and_address (struct type *type,\n   int tag_byte_offset;\n   struct type *tag_type;\n \n-  if (find_struct_field (\"_tag\", type, 0, &tag_type, &tag_byte_offset,\n+  gdb::array_view<const gdb_byte> contents;\n+  if (valaddr != nullptr)\n+    contents = gdb::make_array_view (valaddr, TYPE_LENGTH (type));\n+  struct type *resolved_type = resolve_dynamic_type (type, contents, address);\n+  if (find_struct_field (\"_tag\", resolved_type, 0, &tag_type, &tag_byte_offset,\n \t\t\t NULL, NULL, NULL))\n     {\n       const gdb_byte *valaddr1 = ((valaddr == NULL)\n@@ -6644,8 +6648,16 @@ find_struct_field (const char *name, struct type *type, int offset,\n \n   for (i = 0; i < type->num_fields (); i += 1)\n     {\n-      int bit_pos = TYPE_FIELD_BITPOS (type, i);\n-      int fld_offset = offset + bit_pos / 8;\n+      /* These can't be computed using TYPE_FIELD_BITPOS for a dynamic\n+\t type.  However, we only need the values to be correct when\n+\t the caller asks for them.  */\n+      int bit_pos = 0, fld_offset = 0;\n+      if (byte_offset_p != nullptr || bit_offset_p != nullptr)\n+\t{\n+\t  bit_pos = TYPE_FIELD_BITPOS (type, i);\n+\t  fld_offset = offset + bit_pos / 8;\n+\t}\n+\n       const char *t_field_name = type->field (i).name ();\n \n       if (t_field_name == NULL)\n@@ -6713,8 +6725,13 @@ find_struct_field (const char *name, struct type *type, int offset,\n \n   if (parent_offset != -1)\n     {\n-      int bit_pos = TYPE_FIELD_BITPOS (type, parent_offset);\n-      int fld_offset = offset + bit_pos / 8;\n+      /* As above, only compute the offset when truly needed.  */\n+      int fld_offset = offset;\n+      if (byte_offset_p != nullptr || bit_offset_p != nullptr)\n+\t{\n+\t  int bit_pos = TYPE_FIELD_BITPOS (type, parent_offset);\n+\t  fld_offset += bit_pos / 8;\n+\t}\n \n       if (find_struct_field (name, type->field (parent_offset).type (),\n \t\t\t     fld_offset, field_type_p, byte_offset_p,"
    },
    {
      "sha": "f4e1801802b2b23e4248c9817876a05ccb9e85ad",
      "filename": "gdb/testsuite/gdb.ada/same_component_name.exp",
      "status": "modified",
      "additions": 48,
      "deletions": 36,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d1795ac4dda0f824eae9fd3f810aeb80a993245/gdb/testsuite/gdb.ada/same_component_name.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d1795ac4dda0f824eae9fd3f810aeb80a993245/gdb/testsuite/gdb.ada/same_component_name.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/same_component_name.exp?ref=4d1795ac4dda0f824eae9fd3f810aeb80a993245",
      "patch": "@@ -19,54 +19,66 @@ if { [skip_ada_tests] } { return -1 }\n \n standard_ada_testfile foo\n \n-if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable [list debug ]] != \"\" } {\n-  return -1\n-}\n+foreach_with_prefix scenario {all minimal} {\n+    set flags [list debug additional_flags=-fgnat-encodings=$scenario]\n+\n+    if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable $flags] != \"\" } {\n+\treturn -1\n+    }\n \n-clean_restart ${testfile}\n+    clean_restart ${testfile}\n \n-set bp_top_location [gdb_get_line_number \"BREAK_TOP\" ${testdir}/pck.adb]\n-set bp_middle_location [gdb_get_line_number \"BREAK_MIDDLE\" ${testdir}/pck.adb]\n-set bp_bottom_location [gdb_get_line_number \"BREAK_BOTTOM\" ${testdir}/pck.adb]\n-set bp_dyn_middle_location [gdb_get_line_number \"BREAK_DYN_MIDDLE\" ${testdir}/pck.adb]\n+    set bp_top_location [gdb_get_line_number \"BREAK_TOP\" ${testdir}/pck.adb]\n+    set bp_middle_location [gdb_get_line_number \"BREAK_MIDDLE\" ${testdir}/pck.adb]\n+    set bp_bottom_location [gdb_get_line_number \"BREAK_BOTTOM\" ${testdir}/pck.adb]\n+    set bp_dyn_middle_location [gdb_get_line_number \"BREAK_DYN_MIDDLE\" ${testdir}/pck.adb]\n+    set bp_foo [gdb_get_line_number \"STOP\" ${testdir}/foo.adb]\n \n-gdb_breakpoint \"pck.adb:$bp_top_location\"\n-gdb_breakpoint \"pck.adb:$bp_middle_location\"\n-gdb_breakpoint \"pck.adb:$bp_bottom_location\"\n-gdb_breakpoint \"pck.adb:$bp_dyn_middle_location\"\n+    gdb_breakpoint \"pck.adb:$bp_top_location\"\n+    gdb_breakpoint \"pck.adb:$bp_middle_location\"\n+    gdb_breakpoint \"pck.adb:$bp_bottom_location\"\n+    gdb_breakpoint \"pck.adb:$bp_dyn_middle_location\"\n+    gdb_breakpoint \"foo.adb:$bp_foo\"\n \n-gdb_run_cmd\n+    gdb_run_cmd\n \n-gdb_test \"\" \\\n-         \".*Breakpoint $decimal, pck.top.assign \\\\(.*\\\\).*\" \\\n-         \"run to top assign breakpoint\"\n+    gdb_test \"\" \\\n+\t\".*Breakpoint $decimal, pck.top.assign \\\\(.*\\\\).*\" \\\n+\t\"run to top assign breakpoint\"\n \n-gdb_test \"print obj.n\" \" = 1\" \"Print top component field\"\n+    gdb_test \"print obj.n\" \" = 1\" \"Print top component field\"\n \n-gdb_test \"continue\" \\\n-         \".*Breakpoint $decimal, pck.assign \\\\(.*\\\\).*\" \\\n-         \"continue to bottom assign breakpoint\"\n+    gdb_test \"continue\" \\\n+\t\".*Breakpoint $decimal, pck.assign \\\\(.*\\\\).*\" \\\n+\t\"continue to bottom assign breakpoint\"\n \n-gdb_test \"print obj.n\" \" = 4\\\\.0\" \"Print bottom component field\"\n+    gdb_test \"print obj.n\" \" = 4\\\\.0\" \"Print bottom component field\"\n \n-gdb_test \"continue\" \\\n-         \".*Breakpoint $decimal, pck.middle.assign \\\\(.*\\\\).*\" \\\n-         \"continue to middle assign breakpoint\"\n+    gdb_test \"continue\" \\\n+\t\".*Breakpoint $decimal, pck.middle.assign \\\\(.*\\\\).*\" \\\n+\t\"continue to middle assign breakpoint\"\n \n-gdb_test \"print obj.a\" \" = 48\" \\\n-         \"Print top component field in middle assign function\"\n+    gdb_test \"print obj.a\" \" = 48\" \\\n+\t\"Print top component field in middle assign function\"\n \n-gdb_test \"continue\" \\\n-         \".*Breakpoint $decimal, pck.assign \\\\(.*\\\\).*\" \\\n-         \"continue to bottom assign breakpoint, 2nd time\"\n+    gdb_test \"continue\" \\\n+\t\".*Breakpoint $decimal, pck.assign \\\\(.*\\\\).*\" \\\n+\t\"continue to bottom assign breakpoint, 2nd time\"\n \n-gdb_test \"print obj.x\" \" = 6\" \\\n-         \"Print field existing only in bottom component\"\n+    gdb_test \"print obj.x\" \" = 6\" \\\n+\t\"Print field existing only in bottom component\"\n \n-gdb_test \"continue\" \\\n-         \".*Breakpoint $decimal, pck.dyn_middle.assign \\\\(.*\\\\).*\" \\\n-         \"continue to dyn_middle assign breakpoint\"\n+    gdb_test \"continue\" \\\n+\t\".*Breakpoint $decimal, pck.dyn_middle.assign \\\\(.*\\\\).*\" \\\n+\t\"continue to dyn_middle assign breakpoint\"\n \n-gdb_test \"print obj.u\" \" = 42\" \\\n-         \"Print field existing only in dyn_middle component\"\n+    gdb_test \"print obj.u\" \" = 42\" \\\n+\t\"Print field existing only in dyn_middle component\"\n \n+    gdb_test \"continue\" \\\n+\t\".*Breakpoint $decimal, foo \\\\(.*\\\\).*\" \\\n+\t\"continue to foo breakpoint\"\n+\n+    gdb_test \"print dma.a\" \" = 48\" \\\n+\t\"print field in dynamic tagged type via access\"\n+}"
    },
    {
      "sha": "5fd4d5d01f1e711c817b8db7eb1c338fec5c2305",
      "filename": "gdb/testsuite/gdb.ada/same_component_name/foo.adb",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d1795ac4dda0f824eae9fd3f810aeb80a993245/gdb/testsuite/gdb.ada/same_component_name/foo.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d1795ac4dda0f824eae9fd3f810aeb80a993245/gdb/testsuite/gdb.ada/same_component_name/foo.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/same_component_name/foo.adb?ref=4d1795ac4dda0f824eae9fd3f810aeb80a993245",
      "patch": "@@ -24,6 +24,7 @@ procedure Foo is\n    B  : Bottom_T;\n    M  : Middle_T;\n    DM : Dyn_Middle_T (24);\n+   DMA : Dyn_Middle_A := new Dyn_Middle_T (24);\n begin\n    Assign (Top_T (B), 12);\n    Assign (B, 10.0);\n@@ -33,4 +34,6 @@ begin\n \n    Assign (Dyn_Top_T (DM), 12);\n    Assign (DM, 'V');\n+\n+   Do_Nothing(DMA'Address); -- STOP\n end Foo;"
    }
  ]
}