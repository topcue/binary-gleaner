{
  "sha": "b907456c3eb8a08f6b211f66abb448df962749e1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjkwNzQ1NmMzZWI4YTA4ZjZiMjExZjY2YWJiNDQ4ZGY5NjI3NDllMQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-07T21:48:00Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-23T21:02:59Z"
    },
    "message": "gdb/aarch64: Use type_align instead of aarch64_type_align\n\nReplaces use of aarch64_type_align with common type_align function.\n\nDoing this fixes a bug in aarch64_type_align where static fields are\nconsidered as part of the alignment calculation of a struct, which\nresults in arguments passed on the stack being misaligned.  This bug\nis exposed in the new test gdb.cp/many-args.exp.\n\nPart of the old aarch64_type_align is retained and used as the gdbarch\ntype align callback in order to correctly align vectors.\n\ngdb/ChangeLog:\n\n\t* aarch64-tdep.c (aarch64_type_align): Only handle vector override\n\tcase.\n\t(pass_on_stack): Use type_align.\n\t(aarch64_gdbarch_init): Register aarch64_type_align gdbarch\n\tfunction.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.cp/many-args.cc: New file.\n\t* gdb.cp/many-args.exp: New file.",
    "tree": {
      "sha": "3f0051221a92673b3a9b8e99299884923dfcf136",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3f0051221a92673b3a9b8e99299884923dfcf136"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b907456c3eb8a08f6b211f66abb448df962749e1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b907456c3eb8a08f6b211f66abb448df962749e1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b907456c3eb8a08f6b211f66abb448df962749e1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b907456c3eb8a08f6b211f66abb448df962749e1/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9e97ba436a8e59ac4574001d618240eac0328934",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9e97ba436a8e59ac4574001d618240eac0328934",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9e97ba436a8e59ac4574001d618240eac0328934"
    }
  ],
  "stats": {
    "total": 195,
    "additions": 144,
    "deletions": 51
  },
  "files": [
    {
      "sha": "6918644f14e89a14f13198a16001553f02649c34",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b907456c3eb8a08f6b211f66abb448df962749e1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b907456c3eb8a08f6b211f66abb448df962749e1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b907456c3eb8a08f6b211f66abb448df962749e1",
      "patch": "@@ -1,3 +1,11 @@\n+2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* aarch64-tdep.c (aarch64_type_align): Only handle vector override\n+\tcase.\n+\t(pass_on_stack): Use type_align.\n+\t(aarch64_gdbarch_init): Register aarch64_type_align gdbarch\n+\tfunction.\n+\n 2019-04-23  Tom Tromey  <tromey@adacore.com>\n \n \t* dwarf2read.c (line_header::file_name_at): Remove unused"
    },
    {
      "sha": "d53c57357fc05b09c8710ff948d7b70d63bd6bed",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 15,
      "deletions": 51,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b907456c3eb8a08f6b211f66abb448df962749e1/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b907456c3eb8a08f6b211f66abb448df962749e1/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=b907456c3eb8a08f6b211f66abb448df962749e1",
      "patch": "@@ -1218,62 +1218,25 @@ typedef struct\n \n DEF_VEC_O (stack_item_t);\n \n-/* Return the alignment (in bytes) of the given type.  */\n+/* Implement the gdbarch type alignment method, overrides the generic\n+   alignment algorithm for anything that is aarch64 specific.  */\n \n-static int\n-aarch64_type_align (struct type *t)\n+static ULONGEST\n+aarch64_type_align (gdbarch *gdbarch, struct type *t)\n {\n-  int n;\n-  int align;\n-  int falign;\n-\n   t = check_typedef (t);\n-  switch (TYPE_CODE (t))\n+  if (TYPE_CODE (t) == TYPE_CODE_ARRAY && TYPE_VECTOR (t))\n     {\n-    default:\n-      /* Should never happen.  */\n-      internal_error (__FILE__, __LINE__, _(\"unknown type alignment\"));\n-      return 4;\n-\n-    case TYPE_CODE_PTR:\n-    case TYPE_CODE_ENUM:\n-    case TYPE_CODE_INT:\n-    case TYPE_CODE_FLT:\n-    case TYPE_CODE_SET:\n-    case TYPE_CODE_RANGE:\n-    case TYPE_CODE_BITSTRING:\n-    case TYPE_CODE_REF:\n-    case TYPE_CODE_RVALUE_REF:\n-    case TYPE_CODE_CHAR:\n-    case TYPE_CODE_BOOL:\n-      return TYPE_LENGTH (t);\n-\n-    case TYPE_CODE_ARRAY:\n-      if (TYPE_VECTOR (t))\n-\t{\n-\t  /* Use the natural alignment for vector types (the same for\n-\t     scalar type), but the maximum alignment is 128-bit.  */\n-\t  if (TYPE_LENGTH (t) > 16)\n-\t    return 16;\n-\t  else\n-\t    return TYPE_LENGTH (t);\n-\t}\n+      /* Use the natural alignment for vector types (the same for\n+\t scalar type), but the maximum alignment is 128-bit.  */\n+      if (TYPE_LENGTH (t) > 16)\n+\treturn 16;\n       else\n-\treturn aarch64_type_align (TYPE_TARGET_TYPE (t));\n-    case TYPE_CODE_COMPLEX:\n-      return aarch64_type_align (TYPE_TARGET_TYPE (t));\n-\n-    case TYPE_CODE_STRUCT:\n-    case TYPE_CODE_UNION:\n-      align = 1;\n-      for (n = 0; n < TYPE_NFIELDS (t); n++)\n-\t{\n-\t  falign = aarch64_type_align (TYPE_FIELD_TYPE (t, n));\n-\t  if (falign > align)\n-\t    align = falign;\n-\t}\n-      return align;\n+\treturn TYPE_LENGTH (t);\n     }\n+\n+  /* Allow the common code to calculate the alignment.  */\n+  return 0;\n }\n \n /* Worker function for aapcs_is_vfp_call_or_return_candidate.\n@@ -1540,7 +1503,7 @@ pass_on_stack (struct aarch64_call_info *info, struct type *type,\n \n   info->argnum++;\n \n-  align = aarch64_type_align (type);\n+  align = type_align (type);\n \n   /* PCS C.17 Stack should be aligned to the larger of 8 bytes or the\n      Natural alignment of the argument's type.  */\n@@ -3370,6 +3333,7 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   set_gdbarch_float_format (gdbarch, floatformats_ieee_single);\n   set_gdbarch_double_format (gdbarch, floatformats_ieee_double);\n   set_gdbarch_long_double_format (gdbarch, floatformats_ia64_quad);\n+  set_gdbarch_type_align (gdbarch, aarch64_type_align);\n \n   /* Internal <-> external register number maps.  */\n   set_gdbarch_dwarf2_reg_to_regnum (gdbarch, aarch64_dwarf_reg_to_regnum);"
    },
    {
      "sha": "04fecfa10a0502b8fd754c3368ecd6eba594725c",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b907456c3eb8a08f6b211f66abb448df962749e1/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b907456c3eb8a08f6b211f66abb448df962749e1/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=b907456c3eb8a08f6b211f66abb448df962749e1",
      "patch": "@@ -1,3 +1,8 @@\n+2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.cp/many-args.cc: New file.\n+\t* gdb.cp/many-args.exp: New file.\n+\n 2019-04-23  Tom de Vries  <tdevries@suse.de>\n \n \tPR gdb/24433"
    },
    {
      "sha": "389a69ae32b5e845048aa0bbb6c179fdbea8a861",
      "filename": "gdb/testsuite/gdb.cp/many-args.cc",
      "status": "added",
      "additions": 76,
      "deletions": 0,
      "changes": 76,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b907456c3eb8a08f6b211f66abb448df962749e1/gdb/testsuite/gdb.cp/many-args.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b907456c3eb8a08f6b211f66abb448df962749e1/gdb/testsuite/gdb.cp/many-args.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/many-args.cc?ref=b907456c3eb8a08f6b211f66abb448df962749e1",
      "patch": "@@ -0,0 +1,76 @@\n+/* Copyright 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <string.h>\n+\n+/* Vector type will align on a 16-byte boundary.  */\n+typedef int v4si __attribute__ ((vector_size (16)));\n+\n+struct ss\n+{\n+  static v4si static_field;\n+\n+  unsigned char aa;\n+\n+  bool operator== (const ss &rhs)\n+  {\n+    return (memcmp (&this->static_field, &rhs.static_field,\n+\t\t    sizeof (this->static_field)) == 0\n+            && this->aa == rhs.aa);\n+  }\n+};\n+\n+v4si ss::static_field = { 1, 2, 3, 4 };\n+\n+ss ref_val = { 'a' };\n+\n+bool\n+check_val (ss v1, ss v2, ss v3, ss v4, ss v5, ss v6, ss v7, ss v8,\n+           ss v9, ss v10, ss v11, ss v12, ss v13, ss v14, ss v15,\n+           ss v16, ss v17, ss v18, ss v19, ss v20, ss v21, ss v22,\n+           ss v23, ss v24, ss v25, ss v26, ss v27, ss v28, ss v29,\n+           ss v30, ss v31, ss v32, ss v33, ss v34, ss v35, ss v36,\n+           ss v37, ss v38, ss v39, ss v40)\n+{\n+  return (v1 == ref_val && v2 == ref_val && v3 == ref_val && v4 == ref_val\n+          && v5 == ref_val && v6 == ref_val && v7 == ref_val\n+          && v8 == ref_val && v9 == ref_val && v10 == ref_val\n+          && v11 == ref_val && v12 == ref_val && v13 == ref_val\n+          && v14 == ref_val && v15 == ref_val && v16 == ref_val\n+          && v17 == ref_val && v18 == ref_val && v19 == ref_val\n+          && v20 == ref_val && v21 == ref_val && v22 == ref_val\n+          && v23 == ref_val && v24 == ref_val && v25 == ref_val\n+          && v26 == ref_val && v27 == ref_val && v28 == ref_val\n+          && v29 == ref_val && v30 == ref_val && v31 == ref_val\n+          && v32 == ref_val && v33 == ref_val && v34 == ref_val\n+          && v35 == ref_val && v36 == ref_val && v37 == ref_val\n+          && v38 == ref_val && v39 == ref_val && v40 == ref_val);\n+}\n+\n+int\n+main ()\n+{\n+  bool flag = check_val (ref_val, ref_val, ref_val, ref_val, ref_val,\n+\t\t\t ref_val, ref_val, ref_val, ref_val, ref_val,\n+\t\t\t ref_val, ref_val, ref_val, ref_val, ref_val,\n+\t\t\t ref_val, ref_val, ref_val, ref_val, ref_val,\n+\t\t\t ref_val, ref_val, ref_val, ref_val, ref_val,\n+\t\t\t ref_val, ref_val, ref_val, ref_val, ref_val,\n+\t\t\t ref_val, ref_val, ref_val, ref_val, ref_val,\n+\t\t\t ref_val, ref_val, ref_val, ref_val, ref_val);\n+  return (flag ? 0 : 1);\t/* break-here */\n+}"
    },
    {
      "sha": "6903b967ef1be1676f5efe0de9d7a508afe4fd5d",
      "filename": "gdb/testsuite/gdb.cp/many-args.exp",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b907456c3eb8a08f6b211f66abb448df962749e1/gdb/testsuite/gdb.cp/many-args.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b907456c3eb8a08f6b211f66abb448df962749e1/gdb/testsuite/gdb.cp/many-args.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/many-args.exp?ref=b907456c3eb8a08f6b211f66abb448df962749e1",
      "patch": "@@ -0,0 +1,40 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This tests GDB's ability to call an inferior function passing many\n+# structures by value.  Other tests that call inferior functions with\n+# structures only pass one or two structures, and these are often\n+# passed in registers.  This test passes so many structures it is\n+# hoped that some will need to be placed onto the stack.\n+\n+if { [skip_cplus_tests] } { continue }\n+\n+standard_testfile .cc\n+\n+if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile {debug c++}]} {\n+    return -1\n+}\n+\n+if ![runto_main] {\n+    perror \"couldn't run to breakpoint\"\n+    continue\n+}\n+\n+gdb_breakpoint [gdb_get_line_number \"break-here\"]\n+gdb_continue_to_breakpoint \"break-here\"\n+\n+gdb_test \"p check_val (ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val, ref_val)\" \\\n+    \"= true\" \\\n+    \"check passing many structures\""
    }
  ]
}