{
  "sha": "d272eb370a4c086a1d0f86a7a94e89328ec8d97e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDI3MmViMzcwYTRjMDg2YTFkMGY4NmE3YTk0ZTg5MzI4ZWM4ZDk3ZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-28T17:29:42Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-08T15:05:40Z"
    },
    "message": "Remove some now-dead exception code\n\nAfter the rewriting to use try/catch, some of the exception code is\nnow unused.  This patch removes that code.\n\ngdb/ChangeLog\n2019-04-08  Tom Tromey  <tom@tromey.com>\n\n\t* common/common-exceptions.h (exception_rethrow): Don't declare.\n\t(TRY_SJLJ): Update comment.\n\t(TRY, CATCH, END_CATCH): Remove.\n\t* common/common-exceptions.c (exception_rethrow): Remove.",
    "tree": {
      "sha": "26ceefd803edcc13c453f517ba00557c61cd41b9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/26ceefd803edcc13c453f517ba00557c61cd41b9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d272eb370a4c086a1d0f86a7a94e89328ec8d97e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d272eb370a4c086a1d0f86a7a94e89328ec8d97e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d272eb370a4c086a1d0f86a7a94e89328ec8d97e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d272eb370a4c086a1d0f86a7a94e89328ec8d97e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "230d2906b9d1d009b22fd526181bf43e1084ed59",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/230d2906b9d1d009b22fd526181bf43e1084ed59",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/230d2906b9d1d009b22fd526181bf43e1084ed59"
    }
  ],
  "stats": {
    "total": 70,
    "additions": 13,
    "deletions": 57
  },
  "files": [
    {
      "sha": "36b6b619fe7f9a30a8c3d53162e2680e35b8095c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d272eb370a4c086a1d0f86a7a94e89328ec8d97e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d272eb370a4c086a1d0f86a7a94e89328ec8d97e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d272eb370a4c086a1d0f86a7a94e89328ec8d97e",
      "patch": "@@ -1,3 +1,10 @@\n+2019-04-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* common/common-exceptions.h (exception_rethrow): Don't declare.\n+\t(TRY_SJLJ): Update comment.\n+\t(TRY, CATCH, END_CATCH): Remove.\n+\t* common/common-exceptions.c (exception_rethrow): Remove.\n+\n 2019-04-08  Tom Tromey  <tom@tromey.com>\n \n \t* common/common-exceptions.h (gdb_exception_RETURN_MASK_ALL):"
    },
    {
      "sha": "d3c01e53387fb21284608a141cd33261339f7316",
      "filename": "gdb/common/common-exceptions.c",
      "status": "modified",
      "additions": 0,
      "deletions": 10,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d272eb370a4c086a1d0f86a7a94e89328ec8d97e/gdb/common/common-exceptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d272eb370a4c086a1d0f86a7a94e89328ec8d97e/gdb/common/common-exceptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.c?ref=d272eb370a4c086a1d0f86a7a94e89328ec8d97e",
      "patch": "@@ -165,16 +165,6 @@ exceptions_state_mc_action_iter_1 (void)\n   return exceptions_state_mc (CATCH_ITER_1);\n }\n \n-/* Called by the default catch block.  IOW, we'll get here before\n-   jumping out to the next outermost scope an exception if a GDB\n-   exception is not caught.  */\n-\n-void\n-exception_rethrow (void)\n-{\n-  throw;\n-}\n-\n /* Return EXCEPTION to the nearest containing CATCH_SJLJ block.  */\n \n void"
    },
    {
      "sha": "b09a34b0a3517ab4ccaf22fa101b2bba3c7f41a1",
      "filename": "gdb/common/common-exceptions.h",
      "status": "modified",
      "additions": 6,
      "deletions": 47,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d272eb370a4c086a1d0f86a7a94e89328ec8d97e/gdb/common/common-exceptions.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d272eb370a4c086a1d0f86a7a94e89328ec8d97e/gdb/common/common-exceptions.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.h?ref=d272eb370a4c086a1d0f86a7a94e89328ec8d97e",
      "patch": "@@ -164,10 +164,6 @@ extern int exceptions_state_mc_action_iter (void);\n extern int exceptions_state_mc_action_iter_1 (void);\n extern int exceptions_state_mc_catch (struct gdb_exception *, int);\n \n-/* For the C++ try/catch-based TRY/CATCH mechanism.  */\n-\n-extern void exception_rethrow (void) ATTRIBUTE_NORETURN;\n-\n /* Macro to wrap up standard try/catch behavior.\n \n    The double loop lets us correctly handle code \"break\"ing out of the\n@@ -179,24 +175,21 @@ extern void exception_rethrow (void) ATTRIBUTE_NORETURN;\n \n    *INDENT-OFF*\n \n-   TRY\n+   TRY_SJLJ\n      {\n      }\n-   CATCH (e, RETURN_MASK_ERROR)\n+   CATCH_SJLJ (e, RETURN_MASK_ERROR)\n      {\n        switch (e.reason)\n          {\n            case RETURN_ERROR: ...\n          }\n      }\n-   END_CATCH\n+   END_CATCH_SJLJ\n \n-  Note that the SJLJ version of the macros are actually named\n-  TRY_SJLJ/CATCH_SJLJ in order to make it possible to call them even\n-  when TRY/CATCH are mapped to C++ try/catch.  The SJLJ variants are\n-  needed in some cases where gdb exceptions need to cross third-party\n-  library code compiled without exceptions support (e.g.,\n-  readline).  */\n+   The SJLJ variants are needed in some cases where gdb exceptions\n+   need to cross third-party library code compiled without exceptions\n+   support (e.g., readline).  */\n \n #define TRY_SJLJ \\\n      { \\\n@@ -215,40 +208,6 @@ extern void exception_rethrow (void) ATTRIBUTE_NORETURN;\n #define END_CATCH_SJLJ\t\t\t\t\\\n   }\n \n-/* We still need to wrap TRY/CATCH in C++ so that cleanups and C++\n-   exceptions can coexist.\n-\n-   The TRY blocked is wrapped in a do/while(0) so that break/continue\n-   within the block works the same as in C.\n-\n-   END_CATCH makes sure that even if the CATCH block doesn't want to\n-   catch the exception, we stop at every frame in the unwind chain to\n-   run its cleanups, which may e.g., have pointers to stack variables\n-   that are going to be destroyed.\n-\n-   There's an outer scope around the whole TRY/END_CATCH in order to\n-   cause a compilation error if you forget to add the END_CATCH at the\n-   end a TRY/CATCH construct.  */\n-\n-#define TRY\t\t\t\t\t\t\t\t\\\n-  {\t\t\t\t\t\t\t\t\t\\\n-    try\t\t\t\t\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\t\t\t\\\n-\tdo\t\t\t\t\t\t\t\t\\\n-\t  {\n-\n-#define CATCH(EXCEPTION, MASK)\t\t\t\t\t\t\\\n-\t  } while (0);\t\t\t\t\t\t\t\\\n-\t}\t\t\t\t\t\t\t\t\\\n-    catch (struct gdb_exception ## _ ## MASK &EXCEPTION)\n-\n-#define END_CATCH\t\t\t\t\\\n-    catch (...)\t\t\t\t\t\\\n-      {\t\t\t\t\t\t\\\n-\texception_rethrow ();\t\t\t\\\n-      }\t\t\t\t\t\t\\\n-  }\n-\n /* The exception types client code may catch.  They're just shims\n    around gdb_exception that add nothing but type info.  Which is used\n    is selected depending on the MASK argument passed to CATCH.  */"
    }
  ]
}