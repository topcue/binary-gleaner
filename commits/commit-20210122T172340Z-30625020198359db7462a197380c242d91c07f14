{
  "sha": "30625020198359db7462a197380c242d91c07f14",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzA2MjUwMjAxOTgzNTlkYjc0NjJhMTk3MzgwYzI0MmQ5MWMwN2YxNA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-22T17:23:40Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-22T17:23:40Z"
    },
    "message": "gdb: remove TYPE_OBJFILE_OWNED macro\n\nUpdate all users to use the type::is_objfile_owned method.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (TYPE_OBJFILE_OWNED): Remove, update all users to\n\tuse the type::is_objfile_owned method.\n\nChange-Id: Icae84d136393ab9f756f50a33ac3cedda13c5ba2",
    "tree": {
      "sha": "263dabd36214130ee5fe053ac9e8690c9f0392b2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/263dabd36214130ee5fe053ac9e8690c9f0392b2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/30625020198359db7462a197380c242d91c07f14",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/30625020198359db7462a197380c242d91c07f14",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/30625020198359db7462a197380c242d91c07f14",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/30625020198359db7462a197380c242d91c07f14/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5b7d941b90d1a232dc144dc14850dd2fb63c35da",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b7d941b90d1a232dc144dc14850dd2fb63c35da",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5b7d941b90d1a232dc144dc14850dd2fb63c35da"
    }
  ],
  "stats": {
    "total": 34,
    "additions": 19,
    "deletions": 15
  },
  "files": [
    {
      "sha": "400a42f7cf80f217f5f6c40b973ecaf602df4517",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30625020198359db7462a197380c242d91c07f14/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30625020198359db7462a197380c242d91c07f14/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=30625020198359db7462a197380c242d91c07f14",
      "patch": "@@ -1,3 +1,8 @@\n+2021-01-22  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* gdbtypes.h (TYPE_OBJFILE_OWNED): Remove, update all users to\n+\tuse the type::is_objfile_owned method.\n+\n 2021-01-22  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (TYPE_OBJFILE_OWNED): Adjust."
    },
    {
      "sha": "104e619f16d3d97996c9adfecab44e2b1f15143e",
      "filename": "gdb/compile/compile-c-types.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30625020198359db7462a197380c242d91c07f14/gdb/compile/compile-c-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30625020198359db7462a197380c242d91c07f14/gdb/compile/compile-c-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-types.c?ref=30625020198359db7462a197380c242d91c07f14",
      "patch": "@@ -164,7 +164,7 @@ convert_func (compile_c_instance *context, struct type *type)\n      GDB's parser used to do.  */\n   if (target_type == NULL)\n     {\n-      if (TYPE_OBJFILE_OWNED (type))\n+      if (type->is_objfile_owned ())\n \ttarget_type = objfile_type (type->objfile ())->builtin_int;\n       else\n \ttarget_type = builtin_type (type->arch ())->builtin_int;\n@@ -323,7 +323,7 @@ convert_type_basic (compile_c_instance *context, struct type *type)\n \t   built-in parser does.  For now, assume \"int\" like GDB's\n \t   built-in parser used to do, but at least warn.  */\n \tstruct type *fallback;\n-\tif (TYPE_OBJFILE_OWNED (type))\n+\tif (type->is_objfile_owned ())\n \t  fallback = objfile_type (type->objfile ())->builtin_int;\n \telse\n \t  fallback = builtin_type (type->arch ())->builtin_int;"
    },
    {
      "sha": "0f32b0e1adea0e22fac43098a7186fc304e67a09",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30625020198359db7462a197380c242d91c07f14/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30625020198359db7462a197380c242d91c07f14/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=30625020198359db7462a197380c242d91c07f14",
      "patch": "@@ -970,7 +970,7 @@ compile_cplus_convert_func (compile_cplus_instance *instance,\n      GDB's parser used to do.  */\n   if (target_type == nullptr)\n     {\n-      if (TYPE_OBJFILE_OWNED (type))\n+      if (type->is_objfile_owned ())\n \ttarget_type = objfile_type (type->objfile ())->builtin_int;\n       else\n \ttarget_type = builtin_type (type->arch ())->builtin_int;"
    },
    {
      "sha": "a4ae0d7a1a61911fb311beb633d742659b88d0dc",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30625020198359db7462a197380c242d91c07f14/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30625020198359db7462a197380c242d91c07f14/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=30625020198359db7462a197380c242d91c07f14",
      "patch": "@@ -226,7 +226,7 @@ alloc_type_arch (struct gdbarch *gdbarch)\n struct type *\n alloc_type_copy (const struct type *type)\n {\n-  if (TYPE_OBJFILE_OWNED (type))\n+  if (type->is_objfile_owned ())\n     return alloc_type (type->objfile ());\n   else\n     return alloc_type_arch (type->arch ());\n@@ -240,7 +240,7 @@ get_type_arch (const struct type *type)\n {\n   struct gdbarch *arch;\n \n-  if (TYPE_OBJFILE_OWNED (type))\n+  if (type->is_objfile_owned ())\n     arch = type->objfile ()->arch ();\n   else\n     arch = type->arch ();\n@@ -290,7 +290,7 @@ alloc_type_instance (struct type *oldtype)\n \n   /* Allocate the structure.  */\n \n-  if (! TYPE_OBJFILE_OWNED (oldtype))\n+  if (!oldtype->is_objfile_owned ())\n     type = GDBARCH_OBSTACK_ZALLOC (get_type_arch (oldtype), struct type);\n   else\n     type = OBSTACK_ZALLOC (&TYPE_OBJFILE (oldtype)->objfile_obstack,\n@@ -1429,7 +1429,7 @@ lookup_array_range_type (struct type *element_type,\n   struct type *index_type;\n   struct type *range_type;\n \n-  if (TYPE_OBJFILE_OWNED (element_type))\n+  if (element_type->is_objfile_owned ())\n     index_type = objfile_type (element_type->objfile ())->builtin_int;\n   else\n     index_type = builtin_type (element_type->arch ())->builtin_int;\n@@ -2798,7 +2798,7 @@ type::add_dyn_prop (dynamic_prop_node_kind prop_kind, dynamic_prop prop)\n {\n   struct dynamic_prop_list *temp;\n \n-  gdb_assert (TYPE_OBJFILE_OWNED (this));\n+  gdb_assert (this->is_objfile_owned ());\n \n   temp = XOBNEW (&TYPE_OBJFILE (this)->objfile_obstack,\n \t\t struct dynamic_prop_list);\n@@ -5189,7 +5189,7 @@ recursive_dump_type (struct type *type, int spaces)\n   puts_filtered (\"\\n\");\n   printf_filtered (\"%*slength %s\\n\", spaces, \"\",\n \t\t   pulongest (TYPE_LENGTH (type)));\n-  if (TYPE_OBJFILE_OWNED (type))\n+  if (type->is_objfile_owned ())\n     {\n       printf_filtered (\"%*sobjfile \", spaces, \"\");\n       gdb_print_host_address (type->objfile (), gdb_stdout);\n@@ -5492,7 +5492,7 @@ copy_type_recursive (struct objfile *objfile,\n   void **slot;\n   struct type *new_type;\n \n-  if (! TYPE_OBJFILE_OWNED (type))\n+  if (!type->is_objfile_owned ())\n     return type;\n \n   /* This type shouldn't be pointing to any types in other objfiles;\n@@ -5658,7 +5658,7 @@ copy_type (const struct type *type)\n {\n   struct type *new_type;\n \n-  gdb_assert (TYPE_OBJFILE_OWNED (type));\n+  gdb_assert (type->is_objfile_owned ());\n \n   new_type = alloc_type_copy (type);\n   new_type->set_instance_flags (type->instance_flags ());\n@@ -5960,7 +5960,7 @@ allocate_fixed_point_type_info (struct type *type)\n   std::unique_ptr<fixed_point_type_info> up (new fixed_point_type_info);\n   fixed_point_type_info *info;\n \n-  if (TYPE_OBJFILE_OWNED (type))\n+  if (type->is_objfile_owned ())\n     {\n       fixed_point_type_storage *storage\n \t= fixed_point_objfile_key.get (TYPE_OBJFILE (type));"
    },
    {
      "sha": "9037f41b6dbaf2a805a3d37300c88743d0492e46",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30625020198359db7462a197380c242d91c07f14/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30625020198359db7462a197380c242d91c07f14/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=30625020198359db7462a197380c242d91c07f14",
      "patch": "@@ -224,7 +224,6 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n    the objfile retrieved as TYPE_OBJFILE.  Otherwise, the type is\n    owned by an architecture; TYPE_OBJFILE is NULL in this case.  */\n \n-#define TYPE_OBJFILE_OWNED(t) ((t)->is_objfile_owned ())\n #define TYPE_OBJFILE(t) ((t)->objfile ())\n \n /* * True if this type was declared using the \"class\" keyword.  This is\n@@ -2242,7 +2241,7 @@ extern const struct floatformat *floatformats_bfloat16[BFD_ENDIAN_UNKNOWN];\n    when it is no longer needed.  */\n \n #define TYPE_ALLOC(t,size)                                              \\\n-  (obstack_alloc ((TYPE_OBJFILE_OWNED (t)                               \\\n+  (obstack_alloc (((t)->is_objfile_owned ()                             \\\n \t\t   ? &((t)->objfile ()->objfile_obstack)                \\\n \t\t   : gdbarch_obstack ((t)->arch ())),                   \\\n \t\t  size))"
    },
    {
      "sha": "6b4be71c3f254a6a02762e377c99ea4b4d036f2b",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/30625020198359db7462a197380c242d91c07f14/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/30625020198359db7462a197380c242d91c07f14/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=30625020198359db7462a197380c242d91c07f14",
      "patch": "@@ -1036,7 +1036,7 @@ language_arch_info::type_and_symbol::alloc_type_symbol\n {\n   struct symbol *symbol;\n   struct gdbarch *gdbarch;\n-  gdb_assert (!TYPE_OBJFILE_OWNED (type));\n+  gdb_assert (!type->is_objfile_owned ());\n   gdbarch = type->arch ();\n   symbol = new (gdbarch_obstack (gdbarch)) struct symbol ();\n   symbol->m_name = type->name ();"
    }
  ]
}