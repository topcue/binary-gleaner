{
  "sha": "aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
  "node_id": "C_kwDOANOeidoAKGFhNzBhOTllYjAzNDQ0ZjQxZjUwZTEwMGM5YjFlMDBlOWEzMmNkZTk",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-11-15T20:22:34Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-11-16T02:39:16Z"
    },
    "message": "gdb: adjust gdbarch_tdep calls in nat files\n\nCommit 345bd07cce33 (\"gdb: fix gdbarch_tdep ODR violation\") forgot to\nupdate the gdbarch_tdep calls in the native files other than x86-64\nLinux.  This patch updates them all (to the best of my knowledge).\nThese are the files I was able to build-test:\n\n  aarch64-linux-nat.c\n  amd64-bsd-nat.c\n  arm-linux-nat.c\n  ppc-linux-nat.c\n  windows-nat.c\n  xtensa-linux-nat.c\n\nAnd these are the ones I could not build-test:\n\n  aix-thread.c\n  arm-netbsd-nat.c\n  ppc-fbsd-nat.c\n  ppc-netbsd-nat.c\n  ia64-tdep.c (the part that needs libunwind)\n  ppc-obsd-nat.c\n  rs6000-nat.c\n\nIf there are still some build problems related to gdbarch_tdep in them,\nthey should be pretty obvious to fix.\n\nChange-Id: Iaa3d791a850e4432973757598e634e3da6061428",
    "tree": {
      "sha": "ec0747ecf73c9e88e8ee3e5de86f129bf88dab64",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ec0747ecf73c9e88e8ee3e5de86f129bf88dab64"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "39cdfdb2614ae5654f5aa77792085b37cb342929",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39cdfdb2614ae5654f5aa77792085b37cb342929",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/39cdfdb2614ae5654f5aa77792085b37cb342929"
    }
  ],
  "stats": {
    "total": 223,
    "additions": 118,
    "deletions": 105
  },
  "files": [
    {
      "sha": "aa42365d25d0b60c8e540a0d968937d1855312ba",
      "filename": "gdb/aarch64-linux-nat.c",
      "status": "modified",
      "additions": 13,
      "deletions": 6,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/aarch64-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/aarch64-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-nat.c?ref=aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
      "patch": "@@ -454,7 +454,8 @@ store_sveregs_to_thread (struct regcache *regcache)\n static void\n fetch_pauth_masks_from_thread (struct regcache *regcache)\n {\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  aarch64_gdbarch_tdep *tdep\n+    = (aarch64_gdbarch_tdep *) gdbarch_tdep (regcache->arch ());\n   int ret;\n   struct iovec iovec;\n   uint64_t pauth_regset[2] = {0, 0};\n@@ -479,7 +480,8 @@ fetch_pauth_masks_from_thread (struct regcache *regcache)\n static void\n fetch_mteregs_from_thread (struct regcache *regcache)\n {\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  aarch64_gdbarch_tdep *tdep\n+    = (aarch64_gdbarch_tdep *) gdbarch_tdep (regcache->arch ());\n   int regno = tdep->mte_reg_base;\n \n   gdb_assert (regno != -1);\n@@ -503,7 +505,8 @@ fetch_mteregs_from_thread (struct regcache *regcache)\n static void\n store_mteregs_to_thread (struct regcache *regcache)\n {\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  aarch64_gdbarch_tdep *tdep\n+    = (aarch64_gdbarch_tdep *) gdbarch_tdep (regcache->arch ());\n   int regno = tdep->mte_reg_base;\n \n   gdb_assert (regno != -1);\n@@ -531,7 +534,8 @@ void\n aarch64_linux_nat_target::fetch_registers (struct regcache *regcache,\n \t\t\t\t\t   int regno)\n {\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  aarch64_gdbarch_tdep *tdep\n+    = (aarch64_gdbarch_tdep *) gdbarch_tdep (regcache->arch ());\n \n   if (regno == -1)\n     {\n@@ -573,7 +577,8 @@ void\n aarch64_linux_nat_target::store_registers (struct regcache *regcache,\n \t\t\t\t\t   int regno)\n {\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  aarch64_gdbarch_tdep *tdep\n+    = (aarch64_gdbarch_tdep *) gdbarch_tdep (regcache->arch ());\n \n   if (regno == -1)\n     {\n@@ -1052,7 +1057,9 @@ aarch64_linux_nat_target::thread_architecture (ptid_t ptid)\n      return it if the current vector length matches the one in the tdep.  */\n   inferior *inf = find_inferior_ptid (this, ptid);\n   gdb_assert (inf != NULL);\n-  if (vq == gdbarch_tdep (inf->gdbarch)->vq)\n+  aarch64_gdbarch_tdep *tdep\n+    = (aarch64_gdbarch_tdep *) gdbarch_tdep (inf->gdbarch);\n+  if (vq == tdep->vq)\n     return inf->gdbarch;\n \n   /* We reach here if the vector length for the thread is different from its"
    },
    {
      "sha": "77691293bb0402549809fc85267b2fe6fbd514dc",
      "filename": "gdb/aix-thread.c",
      "status": "modified",
      "additions": 17,
      "deletions": 14,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/aix-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/aix-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aix-thread.c?ref=aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
      "patch": "@@ -1113,7 +1113,8 @@ aix_thread_target::wait (ptid_t ptid, struct target_waitstatus *status,\n static void\n supply_gprs64 (struct regcache *regcache, uint64_t *vals)\n {\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  ppc_gdbarch_tdep *tdep\n+    = (ppc_gdbarch_tdep *) gdbarch_tdep (regcache->arch ());\n   int regno;\n \n   for (regno = 0; regno < ppc_num_gprs; regno++)\n@@ -1135,7 +1136,7 @@ static void\n supply_fprs (struct regcache *regcache, double *vals)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   int regno;\n \n   /* This function should never be called on architectures without\n@@ -1153,7 +1154,7 @@ supply_fprs (struct regcache *regcache, double *vals)\n static int\n special_register_p (struct gdbarch *gdbarch, int regno)\n {\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n   return regno == gdbarch_pc_regnum (gdbarch)\n       || regno == tdep->ppc_ps_regnum\n@@ -1176,7 +1177,7 @@ supply_sprs64 (struct regcache *regcache,\n \t       uint32_t fpscr)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n   regcache->raw_supply (gdbarch_pc_regnum (gdbarch), (char *) &iar);\n   regcache->raw_supply (tdep->ppc_ps_regnum, (char *) &msr);\n@@ -1198,7 +1199,7 @@ supply_sprs32 (struct regcache *regcache,\n \t       uint32_t fpscr)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n   regcache->raw_supply (gdbarch_pc_regnum (gdbarch), (char *) &iar);\n   regcache->raw_supply (tdep->ppc_ps_regnum, (char *) &msr);\n@@ -1221,7 +1222,7 @@ static void\n fetch_regs_user_thread (struct regcache *regcache, pthdb_pthread_t pdtid)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   int status, i;\n   pthdb_context_t ctx;\n \n@@ -1276,7 +1277,7 @@ fetch_regs_kernel_thread (struct regcache *regcache, int regno,\n \t\t\t  pthdb_tid_t tid)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   uint64_t gprs64[ppc_num_gprs];\n   uint32_t gprs32[ppc_num_gprs];\n   double fprs[ppc_num_fprs];\n@@ -1378,7 +1379,8 @@ aix_thread_target::fetch_registers (struct regcache *regcache, int regno)\n static void\n fill_gprs64 (const struct regcache *regcache, uint64_t *vals)\n {\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  ppc_gdbarch_tdep *tdep\n+    = (ppc_gdbarch_tdep *) gdbarch_tdep (regcache->arch ());\n   int regno;\n \n   for (regno = 0; regno < ppc_num_gprs; regno++)\n@@ -1390,7 +1392,8 @@ fill_gprs64 (const struct regcache *regcache, uint64_t *vals)\n static void \n fill_gprs32 (const struct regcache *regcache, uint32_t *vals)\n {\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  ppc_gdbarch_tdep *tdep\n+    = (ppc_gdbarch_tdep *) gdbarch_tdep (regcache->arch ());\n   int regno;\n \n   for (regno = 0; regno < ppc_num_gprs; regno++)\n@@ -1404,7 +1407,7 @@ static void\n fill_fprs (const struct regcache *regcache, double *vals)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   int regno;\n \n   /* This function should never be called on architectures without\n@@ -1428,7 +1431,7 @@ fill_sprs64 (const struct regcache *regcache,\n \t     uint32_t *fpscr)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n   /* Verify that the size of the size of the IAR buffer is the\n      same as the raw size of the PC (in the register cache).  If\n@@ -1462,7 +1465,7 @@ fill_sprs32 (const struct regcache *regcache,\n \t     uint32_t *fpscr)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n   /* Verify that the size of the size of the IAR buffer is the\n      same as the raw size of the PC (in the register cache).  If\n@@ -1499,7 +1502,7 @@ static void\n store_regs_user_thread (const struct regcache *regcache, pthdb_pthread_t pdtid)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   int status, i;\n   pthdb_context_t ctx;\n   uint32_t int32;\n@@ -1589,7 +1592,7 @@ store_regs_kernel_thread (const struct regcache *regcache, int regno,\n \t\t\t  pthdb_tid_t tid)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   uint64_t gprs64[ppc_num_gprs];\n   uint32_t gprs32[ppc_num_gprs];\n   double fprs[ppc_num_fprs];"
    },
    {
      "sha": "1720c84ea068ca480824640b95e05e86066bd8b1",
      "filename": "gdb/amd64-bsd-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/amd64-bsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/amd64-bsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-bsd-nat.c?ref=aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
      "patch": "@@ -60,7 +60,7 @@ amd64bsd_fetch_inferior_registers (struct regcache *regcache, int regnum)\n   struct gdbarch *gdbarch = regcache->arch ();\n   ptid_t ptid = regcache->ptid ();\n #if defined(PT_GETFSBASE) || defined(PT_GETGSBASE)\n-  const struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  i386_gdbarch_tdep *tdep = (i386_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n #endif\n \n   if (regnum == -1 || amd64_native_gregset_supplies_p (gdbarch, regnum))\n@@ -136,7 +136,7 @@ amd64bsd_store_inferior_registers (struct regcache *regcache, int regnum)\n   struct gdbarch *gdbarch = regcache->arch ();\n   ptid_t ptid = regcache->ptid ();\n #if defined(PT_SETFSBASE) || defined(PT_SETGSBASE)\n-  const struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  i386_gdbarch_tdep *tdep = (i386_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n #endif\n \n   if (regnum == -1 || amd64_native_gregset_supplies_p (gdbarch, regnum))"
    },
    {
      "sha": "5ae16e19943e6481b38fb55cb80a011255b30adc",
      "filename": "gdb/arm-linux-nat.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/arm-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/arm-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-linux-nat.c?ref=aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
      "patch": "@@ -339,7 +339,7 @@ fetch_vfp_regs (struct regcache *regcache)\n   gdb_byte regbuf[ARM_VFP3_REGS_SIZE];\n   int ret, tid;\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  arm_gdbarch_tdep *tdep = (arm_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n   /* Get the thread id for the ptrace call.  */\n   tid = regcache->ptid ().lwp ();\n@@ -368,7 +368,7 @@ store_vfp_regs (const struct regcache *regcache)\n   gdb_byte regbuf[ARM_VFP3_REGS_SIZE];\n   int ret, tid;\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  arm_gdbarch_tdep *tdep = (arm_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n   /* Get the thread id for the ptrace call.  */\n   tid = regcache->ptid ().lwp ();\n@@ -413,7 +413,7 @@ void\n arm_linux_nat_target::fetch_registers (struct regcache *regcache, int regno)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  arm_gdbarch_tdep *tdep = (arm_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n   if (-1 == regno)\n     {\n@@ -450,7 +450,7 @@ void\n arm_linux_nat_target::store_registers (struct regcache *regcache, int regno)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  arm_gdbarch_tdep *tdep = (arm_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n   if (-1 == regno)\n     {"
    },
    {
      "sha": "0d1884648acdc9f5b6c9ca1a49df8aacf665d188",
      "filename": "gdb/arm-netbsd-nat.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/arm-netbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/arm-netbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-netbsd-nat.c?ref=aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
      "patch": "@@ -50,7 +50,7 @@ static arm_netbsd_nat_target the_arm_netbsd_nat_target;\n static void\n arm_supply_vfpregset (struct regcache *regcache, struct fpreg *fpregset)\n {\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  arm_gdbarch_tdep *tdep = (arm_gdbarch_tdep *) gdbarch_tdep (regcache->arch ());\n   if (tdep->vfp_register_count == 0)\n     return;\n \n@@ -97,7 +97,7 @@ fetch_fp_register (struct regcache *regcache, int regno)\n       return;\n     }\n \n-  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  arm_gdbarch_tdep *tdep = (arm_gdbarch_tdep *) gdbarch_tdep (regcache->arch ());\n   if (regno == ARM_FPSCR_REGNUM && tdep->vfp_register_count != 0)\n     regcache->raw_supply (ARM_FPSCR_REGNUM, (char *) &vfp.vfp_fpscr);\n   else if (regno >= ARM_D0_REGNUM\n@@ -279,7 +279,7 @@ store_fp_register (const struct regcache *regcache, int regno)\n       return;\n     }\n \n-  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  arm_gdbarch_tdep *tdep = (arm_gdbarch_tdep *) gdbarch_tdep (regcache->arch ());\n   if (regno == ARM_FPSCR_REGNUM && tdep->vfp_register_count != 0)\n     regcache->raw_collect (ARM_FPSCR_REGNUM, (char *) &vfp.vfp_fpscr);\n   else if (regno >= ARM_D0_REGNUM\n@@ -301,7 +301,7 @@ store_fp_register (const struct regcache *regcache, int regno)\n static void\n store_fp_regs (const struct regcache *regcache)\n {\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  arm_gdbarch_tdep *tdep = (arm_gdbarch_tdep *) gdbarch_tdep (regcache->arch ());\n   int lwp = regcache->ptid ().lwp ();\n   if (tdep->vfp_register_count == 0)\n     return;"
    },
    {
      "sha": "829909dab186cbd694b4fe32bb1f21b29ee9f512",
      "filename": "gdb/ia64-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/ia64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/ia64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ia64-tdep.c?ref=aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
      "patch": "@@ -2485,6 +2485,7 @@ ia64_access_reg (unw_addr_space_t as, unw_regnum_t uw_regnum, unw_word_t *val,\n   unw_word_t bsp, sof, cfm, psr, ip;\n   struct frame_info *this_frame = (struct frame_info *) arg;\n   struct gdbarch *gdbarch = get_frame_arch (this_frame);\n+  ia64_gdbarch_tdep *tdep = (ia64_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   \n   /* We never call any libunwind routines that need to write registers.  */\n   gdb_assert (!write);\n@@ -2506,7 +2507,7 @@ ia64_access_reg (unw_addr_space_t as, unw_regnum_t uw_regnum, unw_word_t *val,\n \t   the current register frame.  */\n \tbsp = get_frame_register_unsigned (this_frame, IA64_BSP_REGNUM);\n \tcfm = get_frame_register_unsigned (this_frame, IA64_CFM_REGNUM);\n-\tsof = gdbarch_tdep (gdbarch)->size_of_register_frame (this_frame, cfm);\n+\tsof = tdep->size_of_register_frame (this_frame, cfm);\n \t*val = ia64_rse_skip_regs (bsp, -sof);\n \tbreak;\n "
    },
    {
      "sha": "a6320a6829a8195591cdce354dd85a04e5c9c385",
      "filename": "gdb/ppc-fbsd-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/ppc-fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/ppc-fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-fbsd-nat.c?ref=aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
      "patch": "@@ -100,7 +100,7 @@ fill_fpregset (const struct regcache *regcache,\n static int\n getfpregs_supplies (struct gdbarch *gdbarch, int regno)\n {\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n   /* FIXME: jimb/2004-05-05: Some PPC variants don't have floating\n \t point registers.  Traditionally, GDB's register set has still\n@@ -185,7 +185,7 @@ static int\n ppcfbsd_supply_pcb (struct regcache *regcache, struct pcb *pcb)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   int i, regnum;\n \n   /* The stack pointer shouldn't be zero.  */"
    },
    {
      "sha": "9bd940c85a020d011b38a8c86ddea11f56541a68",
      "filename": "gdb/ppc-linux-nat.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/ppc-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/ppc-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-linux-nat.c?ref=aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
      "patch": "@@ -649,7 +649,7 @@ static int\n ppc_register_u_addr (struct gdbarch *gdbarch, int regno)\n {\n   int u_addr = -1;\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   /* NOTE: cagney/2003-11-25: This is the word size used by the ptrace\n      interface, and not the wordsize of the program's ABI.  */\n   int wordsize = sizeof (long);\n@@ -802,7 +802,7 @@ static void\n fetch_spe_register (struct regcache *regcache, int tid, int regno)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   struct gdb_evrregset_t evrregs;\n \n   gdb_assert (sizeof (evrregs.evr[0])\n@@ -911,7 +911,7 @@ static void\n fetch_register (struct regcache *regcache, int tid, int regno)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   /* This isn't really an address.  But ptrace thinks of it as one.  */\n   CORE_ADDR regaddr = ppc_register_u_addr (gdbarch, regno);\n   int bytes_transferred;\n@@ -1156,7 +1156,7 @@ static void\n fetch_gp_regs (struct regcache *regcache, int tid)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   int i;\n \n   if (have_ptrace_getsetregs)\n@@ -1208,7 +1208,7 @@ static void\n fetch_fp_regs (struct regcache *regcache, int tid)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   int i;\n \n   if (have_ptrace_getsetfpregs)\n@@ -1226,7 +1226,7 @@ static void\n fetch_ppc_registers (struct regcache *regcache, int tid)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n   fetch_gp_regs (regcache, tid);\n   if (tdep->ppc_fp0_regnum >= 0)\n@@ -1425,7 +1425,7 @@ static void\n store_spe_register (const struct regcache *regcache, int tid, int regno)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   struct gdb_evrregset_t evrregs;\n \n   gdb_assert (sizeof (evrregs.evr[0])\n@@ -1477,7 +1477,7 @@ static void\n store_register (const struct regcache *regcache, int tid, int regno)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   /* This isn't really an address.  But ptrace thinks of it as one.  */\n   CORE_ADDR regaddr = ppc_register_u_addr (gdbarch, regno);\n   int i;\n@@ -1718,7 +1718,7 @@ static void\n store_gp_regs (const struct regcache *regcache, int tid, int regno)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   int i;\n \n   if (have_ptrace_getsetregs)\n@@ -1780,7 +1780,7 @@ static void\n store_fp_regs (const struct regcache *regcache, int tid, int regno)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   int i;\n \n   if (have_ptrace_getsetfpregs)\n@@ -1798,7 +1798,7 @@ static void\n store_ppc_registers (const struct regcache *regcache, int tid)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n  \n   store_gp_regs (regcache, tid, -1);\n   if (tdep->ppc_fp0_regnum >= 0)"
    },
    {
      "sha": "fa58fd76693f345c6c9c78a478159c85ee525441",
      "filename": "gdb/ppc-netbsd-nat.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/ppc-netbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/ppc-netbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-netbsd-nat.c?ref=aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
      "patch": "@@ -52,7 +52,7 @@ static ppc_nbsd_nat_target the_ppc_nbsd_nat_target;\n static int\n getregs_supplies (struct gdbarch *gdbarch, int regnum)\n {\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n   return ((regnum >= tdep->ppc_gp0_regnum\n \t   && regnum < tdep->ppc_gp0_regnum + ppc_num_gprs)\n@@ -68,7 +68,7 @@ getregs_supplies (struct gdbarch *gdbarch, int regnum)\n static int\n getfpregs_supplies (struct gdbarch *gdbarch, int regnum)\n {\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n   /* FIXME: jimb/2004-05-05: Some PPC variants don't have floating\n      point registers.  Traditionally, GDB's register set has still\n@@ -159,7 +159,7 @@ ppcnbsd_supply_pcb (struct regcache *regcache, struct pcb *pcb)\n   struct switchframe sf;\n   struct callframe cf;\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   int i;\n \n   /* The stack pointer shouldn't be zero.  */"
    },
    {
      "sha": "ff337009b172a301c4d44672dcfc6dfeb7d99f15",
      "filename": "gdb/ppc-obsd-nat.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/ppc-obsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/ppc-obsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-obsd-nat.c?ref=aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
      "patch": "@@ -54,7 +54,7 @@ static ppc_obsd_nat_target the_ppc_obsd_nat_target;\n static int\n getfpregs_supplies (struct gdbarch *gdbarch, int regnum)\n {\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n   /* FIXME: jimb/2004-05-05: Some PPC variants don't have floating\n      point registers.  Traditionally, GDB's register set has still\n@@ -154,7 +154,7 @@ static int\n ppcobsd_supply_pcb (struct regcache *regcache, struct pcb *pcb)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n   struct switchframe sf;\n   struct callframe cf;\n   int i, regnum;"
    },
    {
      "sha": "c266c50777f2242d73991a0547d8265200166e2c",
      "filename": "gdb/rs6000-nat.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/rs6000-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/rs6000-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-nat.c?ref=aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
      "patch": "@@ -111,7 +111,7 @@ static rs6000_nat_target the_rs6000_nat_target;\n static int\n regmap (struct gdbarch *gdbarch, int regno, int *isfloat)\n {\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n   *isfloat = 0;\n   if (tdep->ppc_gp0_regnum <= regno\n@@ -313,7 +313,7 @@ rs6000_nat_target::fetch_registers (struct regcache *regcache, int regno)\n \n   else\n     {\n-      struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+      ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n       /* Read 32 general purpose registers.  */\n       for (regno = tdep->ppc_gp0_regnum;\n@@ -355,7 +355,7 @@ rs6000_nat_target::store_registers (struct regcache *regcache, int regno)\n \n   else\n     {\n-      struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+      ppc_gdbarch_tdep *tdep = (ppc_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n       /* Write general purpose registers first.  */\n       for (regno = tdep->ppc_gp0_regnum;"
    },
    {
      "sha": "32b030fdb51a76fe7605c9a9cbc1ba5edf3d0a18",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
      "patch": "@@ -475,7 +475,7 @@ windows_fetch_one_register (struct regcache *regcache,\n \n   char *context_offset = context_ptr + mappings[r];\n   struct gdbarch *gdbarch = regcache->arch ();\n-  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+  i386_gdbarch_tdep *tdep = (i386_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n   gdb_assert (!gdbarch_read_pc_p (gdbarch));\n   gdb_assert (gdbarch_pc_regnum (gdbarch) >= 0);"
    },
    {
      "sha": "abecb7aec74678f2c58f161ec3f681734f64370c",
      "filename": "gdb/xtensa-linux-nat.c",
      "status": "modified",
      "additions": 54,
      "deletions": 52,
      "changes": 106,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/xtensa-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa70a99eb03444f41f50e100c9b1e00e9a32cde9/gdb/xtensa-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xtensa-linux-nat.c?ref=aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
      "patch": "@@ -62,56 +62,57 @@ fill_gregset (const struct regcache *regcache,\n   int i;\n   xtensa_elf_gregset_t *regs = (xtensa_elf_gregset_t *) gregsetp;\n   struct gdbarch *gdbarch = regcache->arch ();\n+  xtensa_gdbarch_tdep *tdep = (xtensa_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n   if (regnum == gdbarch_pc_regnum (gdbarch) || regnum == -1)\n     regcache->raw_collect (gdbarch_pc_regnum (gdbarch), &regs->pc);\n   if (regnum == gdbarch_ps_regnum (gdbarch) || regnum == -1)\n     regcache->raw_collect (gdbarch_ps_regnum (gdbarch), &regs->ps);\n \n-  if (regnum == gdbarch_tdep (gdbarch)->wb_regnum || regnum == -1)\n-    regcache->raw_collect (gdbarch_tdep (gdbarch)->wb_regnum,\n+  if (regnum == tdep->wb_regnum || regnum == -1)\n+    regcache->raw_collect (tdep->wb_regnum,\n \t\t\t   &regs->windowbase);\n-  if (regnum == gdbarch_tdep (gdbarch)->ws_regnum || regnum == -1)\n-    regcache->raw_collect (gdbarch_tdep (gdbarch)->ws_regnum,\n+  if (regnum == tdep->ws_regnum || regnum == -1)\n+    regcache->raw_collect (tdep->ws_regnum,\n \t\t\t   &regs->windowstart);\n-  if (regnum == gdbarch_tdep (gdbarch)->lbeg_regnum || regnum == -1)\n-    regcache->raw_collect (gdbarch_tdep (gdbarch)->lbeg_regnum,\n+  if (regnum == tdep->lbeg_regnum || regnum == -1)\n+    regcache->raw_collect (tdep->lbeg_regnum,\n \t\t\t   &regs->lbeg);\n-  if (regnum == gdbarch_tdep (gdbarch)->lend_regnum || regnum == -1)\n-    regcache->raw_collect (gdbarch_tdep (gdbarch)->lend_regnum,\n+  if (regnum == tdep->lend_regnum || regnum == -1)\n+    regcache->raw_collect (tdep->lend_regnum,\n \t\t\t   &regs->lend);\n-  if (regnum == gdbarch_tdep (gdbarch)->lcount_regnum || regnum == -1)\n-    regcache->raw_collect (gdbarch_tdep (gdbarch)->lcount_regnum,\n+  if (regnum == tdep->lcount_regnum || regnum == -1)\n+    regcache->raw_collect (tdep->lcount_regnum,\n \t\t\t   &regs->lcount);\n-  if (regnum == gdbarch_tdep (gdbarch)->sar_regnum || regnum == -1)\n-    regcache->raw_collect (gdbarch_tdep (gdbarch)->sar_regnum,\n+  if (regnum == tdep->sar_regnum || regnum == -1)\n+    regcache->raw_collect (tdep->sar_regnum,\n \t\t\t   &regs->sar);\n-  if (regnum == gdbarch_tdep (gdbarch)->threadptr_regnum || regnum == -1)\n-    regcache->raw_collect (gdbarch_tdep (gdbarch)->threadptr_regnum,\n+  if (regnum == tdep->threadptr_regnum || regnum == -1)\n+    regcache->raw_collect (tdep->threadptr_regnum,\n \t\t\t   &regs->threadptr);\n-  if (regnum >=gdbarch_tdep (gdbarch)->ar_base\n-      && regnum < gdbarch_tdep (gdbarch)->ar_base\n-\t\t    + gdbarch_tdep (gdbarch)->num_aregs)\n+  if (regnum >=tdep->ar_base\n+      && regnum < tdep->ar_base\n+\t\t    + tdep->num_aregs)\n     regcache->raw_collect (regnum,\n-\t\t\t   &regs->ar[regnum - gdbarch_tdep (gdbarch)->ar_base]);\n+\t\t\t   &regs->ar[regnum - tdep->ar_base]);\n   else if (regnum == -1)\n     {\n-      for (i = 0; i < gdbarch_tdep (gdbarch)->num_aregs; ++i)\n-\tregcache->raw_collect (gdbarch_tdep (gdbarch)->ar_base + i,\n+      for (i = 0; i < tdep->num_aregs; ++i)\n+\tregcache->raw_collect (tdep->ar_base + i,\n \t\t\t       &regs->ar[i]);\n     }\n-  if (regnum >= gdbarch_tdep (gdbarch)->a0_base\n-      && regnum < gdbarch_tdep (gdbarch)->a0_base + C0_NREGS)\n+  if (regnum >= tdep->a0_base\n+      && regnum < tdep->a0_base + C0_NREGS)\n     regcache->raw_collect (regnum,\n \t\t\t   &regs->ar[(4 * regs->windowbase + regnum\n-\t\t\t\t      - gdbarch_tdep (gdbarch)->a0_base)\n-\t\t\t  % gdbarch_tdep (gdbarch)->num_aregs]);\n+\t\t\t\t      - tdep->a0_base)\n+\t\t\t  % tdep->num_aregs]);\n   else if (regnum == -1)\n     {\n       for (i = 0; i < C0_NREGS; ++i)\n-\tregcache->raw_collect (gdbarch_tdep (gdbarch)->a0_base + i,\n+\tregcache->raw_collect (tdep->a0_base + i,\n \t\t\t       (&regs->ar[(4 * regs->windowbase + i)\n-\t\t\t\t% gdbarch_tdep (gdbarch)->num_aregs]));\n+\t\t\t\t% tdep->num_aregs]));\n     }\n }\n \n@@ -123,56 +124,57 @@ supply_gregset_reg (struct regcache *regcache,\n   xtensa_elf_gregset_t *regs = (xtensa_elf_gregset_t *) gregsetp;\n \n   struct gdbarch *gdbarch = regcache->arch ();\n+  xtensa_gdbarch_tdep *tdep = (xtensa_gdbarch_tdep *) gdbarch_tdep (gdbarch);\n \n   if (regnum == gdbarch_pc_regnum (gdbarch) || regnum == -1)\n     regcache->raw_supply (gdbarch_pc_regnum (gdbarch), &regs->pc);\n   if (regnum == gdbarch_ps_regnum (gdbarch) || regnum == -1)\n     regcache->raw_supply (gdbarch_ps_regnum (gdbarch), &regs->ps);\n \n-  if (regnum == gdbarch_tdep (gdbarch)->wb_regnum || regnum == -1)\n-    regcache->raw_supply (gdbarch_tdep (gdbarch)->wb_regnum,\n+  if (regnum == tdep->wb_regnum || regnum == -1)\n+    regcache->raw_supply (tdep->wb_regnum,\n \t\t\t  &regs->windowbase);\n-  if (regnum == gdbarch_tdep (gdbarch)->ws_regnum || regnum == -1)\n-    regcache->raw_supply (gdbarch_tdep (gdbarch)->ws_regnum,\n+  if (regnum == tdep->ws_regnum || regnum == -1)\n+    regcache->raw_supply (tdep->ws_regnum,\n \t\t\t  &regs->windowstart);\n-  if (regnum == gdbarch_tdep (gdbarch)->lbeg_regnum || regnum == -1)\n-    regcache->raw_supply (gdbarch_tdep (gdbarch)->lbeg_regnum,\n+  if (regnum == tdep->lbeg_regnum || regnum == -1)\n+    regcache->raw_supply (tdep->lbeg_regnum,\n \t\t\t  &regs->lbeg);\n-  if (regnum == gdbarch_tdep (gdbarch)->lend_regnum || regnum == -1)\n-    regcache->raw_supply (gdbarch_tdep (gdbarch)->lend_regnum,\n+  if (regnum == tdep->lend_regnum || regnum == -1)\n+    regcache->raw_supply (tdep->lend_regnum,\n \t\t\t  &regs->lend);\n-  if (regnum == gdbarch_tdep (gdbarch)->lcount_regnum || regnum == -1)\n-    regcache->raw_supply (gdbarch_tdep (gdbarch)->lcount_regnum,\n+  if (regnum == tdep->lcount_regnum || regnum == -1)\n+    regcache->raw_supply (tdep->lcount_regnum,\n \t\t\t  &regs->lcount);\n-  if (regnum == gdbarch_tdep (gdbarch)->sar_regnum || regnum == -1)\n-    regcache->raw_supply (gdbarch_tdep (gdbarch)->sar_regnum,\n+  if (regnum == tdep->sar_regnum || regnum == -1)\n+    regcache->raw_supply (tdep->sar_regnum,\n \t\t\t  &regs->sar);\n-  if (regnum == gdbarch_tdep (gdbarch)->threadptr_regnum || regnum == -1)\n-    regcache->raw_supply (gdbarch_tdep (gdbarch)->threadptr_regnum,\n+  if (regnum == tdep->threadptr_regnum || regnum == -1)\n+    regcache->raw_supply (tdep->threadptr_regnum,\n \t\t\t  &regs->threadptr);\n-  if (regnum >=gdbarch_tdep (gdbarch)->ar_base\n-      && regnum < gdbarch_tdep (gdbarch)->ar_base\n-\t\t    + gdbarch_tdep (gdbarch)->num_aregs)\n+  if (regnum >=tdep->ar_base\n+      && regnum < tdep->ar_base\n+\t\t    + tdep->num_aregs)\n     regcache->raw_supply (regnum,\n-\t\t\t  &regs->ar[regnum - gdbarch_tdep (gdbarch)->ar_base]);\n+\t\t\t  &regs->ar[regnum - tdep->ar_base]);\n   else if (regnum == -1)\n     {\n-      for (i = 0; i < gdbarch_tdep (gdbarch)->num_aregs; ++i)\n-\tregcache->raw_supply (gdbarch_tdep (gdbarch)->ar_base + i,\n+      for (i = 0; i < tdep->num_aregs; ++i)\n+\tregcache->raw_supply (tdep->ar_base + i,\n \t\t\t      &regs->ar[i]);\n     }\n-  if (regnum >= gdbarch_tdep (gdbarch)->a0_base\n-      && regnum < gdbarch_tdep (gdbarch)->a0_base + C0_NREGS)\n+  if (regnum >= tdep->a0_base\n+      && regnum < tdep->a0_base + C0_NREGS)\n     regcache->raw_supply (regnum,\n \t\t\t  &regs->ar[(4 * regs->windowbase + regnum\n-\t\t\t\t     - gdbarch_tdep (gdbarch)->a0_base)\n-\t\t\t % gdbarch_tdep (gdbarch)->num_aregs]);\n+\t\t\t\t     - tdep->a0_base)\n+\t\t\t % tdep->num_aregs]);\n   else if (regnum == -1)\n     {\n       for (i = 0; i < C0_NREGS; ++i)\n-\tregcache->raw_supply (gdbarch_tdep (gdbarch)->a0_base + i,\n+\tregcache->raw_supply (tdep->a0_base + i,\n \t\t\t      &regs->ar[(4 * regs->windowbase + i)\n-\t\t\t\t\t% gdbarch_tdep (gdbarch)->num_aregs]);\n+\t\t\t\t\t% tdep->num_aregs]);\n     }\n }\n "
    }
  ]
}