{
  "sha": "95da600f404ca159242f49441d9b4ea78183852b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTVkYTYwMGY0MDRjYTE1OTI0MmY0OTQ0MWQ5YjRlYTc4MTgzODUyYg==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-10-09T18:50:20Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-10-15T13:29:55Z"
    },
    "message": "Change iterate_over_breakpoints to take a function_view\n\nThis allows callers to pass in capturing lambdas.  Also changes the return\ntype to bool.\n\ngdb/ChangeLog:\n\n2019-10-15  Christian Biesinger  <cbiesinger@google.com>\n\n\t* breakpoint.c (iterate_over_breakpoints): Change function pointer\n\tto a gdb::function_view and return value to bool.\n\t* breakpoint.h (iterate_over_breakpoints): Likewise.\n\t* dummy-frame.c (pop_dummy_frame_bpt): Update.\n\t(pop_dummy_frame): Update.\n\t* guile/scm-breakpoint.c (bpscm_build_bp_list): Update.\n\t(gdbscm_breakpoints): Update.\n\t* python/py-breakpoint.c (build_bp_list): Update.\n\t(gdbpy_breakpoints): Update.\n\t* python/py-finishbreakpoint.c (bpfinishpy_detect_out_scope_cb):\n\tUpdate.\n\t(bpfinishpy_handle_stop): Update.\n\t(bpfinishpy_handle_exit): Update.\n\t* solib-svr4.c (svr4_update_solib_event_breakpoint): Update.\n\t(svr4_update_solib_event_breakpoints): Update.\n\nChange-Id: Ia9de4deecae562a70a40f5cd49f5a74d64570251",
    "tree": {
      "sha": "e72c73cbdad57163586abb1c6ead09661d0fbb96",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e72c73cbdad57163586abb1c6ead09661d0fbb96"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/95da600f404ca159242f49441d9b4ea78183852b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/95da600f404ca159242f49441d9b4ea78183852b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/95da600f404ca159242f49441d9b4ea78183852b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/95da600f404ca159242f49441d9b4ea78183852b/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9b142ddb4a115b6e58fabb05920bdd94811fda98",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9b142ddb4a115b6e58fabb05920bdd94811fda98",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9b142ddb4a115b6e58fabb05920bdd94811fda98"
    }
  ],
  "stats": {
    "total": 102,
    "additions": 64,
    "deletions": 38
  },
  "files": [
    {
      "sha": "39a83741f7f95087e0de1977cbc4ef78e008f053",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/95da600f404ca159242f49441d9b4ea78183852b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/95da600f404ca159242f49441d9b4ea78183852b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=95da600f404ca159242f49441d9b4ea78183852b",
      "patch": "@@ -1,3 +1,21 @@\n+2019-10-15  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* breakpoint.c (iterate_over_breakpoints): Change function pointer\n+\tto a gdb::function_view and return value to bool.\n+\t* breakpoint.h (iterate_over_breakpoints): Likewise.\n+\t* dummy-frame.c (pop_dummy_frame_bpt): Update.\n+\t(pop_dummy_frame): Update.\n+\t* guile/scm-breakpoint.c (bpscm_build_bp_list): Update.\n+\t(gdbscm_breakpoints): Update.\n+\t* python/py-breakpoint.c (build_bp_list): Update.\n+\t(gdbpy_breakpoints): Update.\n+\t* python/py-finishbreakpoint.c (bpfinishpy_detect_out_scope_cb):\n+\tUpdate.\n+\t(bpfinishpy_handle_stop): Update.\n+\t(bpfinishpy_handle_exit): Update.\n+\t* solib-svr4.c (svr4_update_solib_event_breakpoint): Update.\n+\t(svr4_update_solib_event_breakpoints): Update.\n+\n 2019-10-15  Andreas Arnez  <arnez@linux.ibm.com>\n \n \t* s390-tdep.c (s390_effective_inner_type): Ignore static fields"
    },
    {
      "sha": "9bbb28f5277c30a17b1058e9ee6de6242834fcac",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/95da600f404ca159242f49441d9b4ea78183852b/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/95da600f404ca159242f49441d9b4ea78183852b/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=95da600f404ca159242f49441d9b4ea78183852b",
      "patch": "@@ -15128,14 +15128,13 @@ save_command (const char *arg, int from_tty)\n }\n \n struct breakpoint *\n-iterate_over_breakpoints (int (*callback) (struct breakpoint *, void *),\n-\t\t\t  void *data)\n+iterate_over_breakpoints (gdb::function_view<bool (breakpoint *)> callback)\n {\n   struct breakpoint *b, *b_tmp;\n \n   ALL_BREAKPOINTS_SAFE (b, b_tmp)\n     {\n-      if ((*callback) (b, data))\n+      if (callback (b))\n \treturn b;\n     }\n "
    },
    {
      "sha": "7472c0ecc45c7819e9880a585ee9ef3a3dc34425",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/95da600f404ca159242f49441d9b4ea78183852b/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/95da600f404ca159242f49441d9b4ea78183852b/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=95da600f404ca159242f49441d9b4ea78183852b",
      "patch": "@@ -29,6 +29,7 @@\n #include \"location.h\"\n #include <vector>\n #include \"gdbsupport/array-view.h\"\n+#include \"gdbsupport/function-view.h\"\n #include \"cli/cli-script.h\"\n \n struct block;\n@@ -1664,8 +1665,8 @@ class scoped_rbreak_breakpoints\n    returned.  This can be useful for implementing a search for a\n    breakpoint with arbitrary attributes, or for applying an operation\n    to every breakpoint.  */\n-extern struct breakpoint *iterate_over_breakpoints (int (*) (struct breakpoint *,\n-\t\t\t\t\t\t\t     void *), void *);\n+extern struct breakpoint *iterate_over_breakpoints\n+  (gdb::function_view<bool (breakpoint *)>);\n \n /* Nonzero if the specified PC cannot be a location where functions\n    have been inlined.  */"
    },
    {
      "sha": "3b76d456b7b134b5d524263898278ca98ff0b380",
      "filename": "gdb/dummy-frame.c",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/95da600f404ca159242f49441d9b4ea78183852b/gdb/dummy-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/95da600f404ca159242f49441d9b4ea78183852b/gdb/dummy-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dummy-frame.c?ref=95da600f404ca159242f49441d9b4ea78183852b",
      "patch": "@@ -126,11 +126,9 @@ remove_dummy_frame (struct dummy_frame **dummy_ptr)\n /* Delete any breakpoint B which is a momentary breakpoint for return from\n    inferior call matching DUMMY_VOIDP.  */\n \n-static int\n-pop_dummy_frame_bpt (struct breakpoint *b, void *dummy_voidp)\n+static bool\n+pop_dummy_frame_bpt (struct breakpoint *b, struct dummy_frame *dummy)\n {\n-  struct dummy_frame *dummy = (struct dummy_frame *) dummy_voidp;\n-\n   if (b->thread == dummy->id.thread->global_num\n       && b->disposition == disp_del && frame_id_eq (b->frame_id, dummy->id.id))\n     {\n@@ -140,11 +138,11 @@ pop_dummy_frame_bpt (struct breakpoint *b, void *dummy_voidp)\n       delete_breakpoint (b);\n \n       /* Stop the traversal.  */\n-      return 1;\n+      return true;\n     }\n \n   /* Continue the traversal.  */\n-  return 0;\n+  return false;\n }\n \n /* Pop *DUMMY_PTR, restoring program state to that before the\n@@ -168,7 +166,10 @@ pop_dummy_frame (struct dummy_frame **dummy_ptr)\n \n   restore_infcall_suspend_state (dummy->caller_state);\n \n-  iterate_over_breakpoints (pop_dummy_frame_bpt, dummy);\n+  iterate_over_breakpoints ([dummy] (breakpoint* bp)\n+    {\n+      return pop_dummy_frame_bpt (bp, dummy);\n+    });\n \n   /* restore_infcall_control_state frees inf_state,\n      all that remains is to pop *dummy_ptr.  */"
    },
    {
      "sha": "a75daa000196dcb48ca01c1b5901fc2ee3f549ae",
      "filename": "gdb/guile/scm-breakpoint.c",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/95da600f404ca159242f49441d9b4ea78183852b/gdb/guile/scm-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/95da600f404ca159242f49441d9b4ea78183852b/gdb/guile/scm-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-breakpoint.c?ref=95da600f404ca159242f49441d9b4ea78183852b",
      "patch": "@@ -505,10 +505,9 @@ gdbscm_delete_breakpoint_x (SCM self)\n \n /* iterate_over_breakpoints function for gdbscm_breakpoints.  */\n \n-static int\n-bpscm_build_bp_list (struct breakpoint *bp, void *arg)\n+static bool\n+bpscm_build_bp_list (struct breakpoint *bp, SCM *list)\n {\n-  SCM *list = (SCM *) arg;\n   breakpoint_smob *bp_smob = bp->scm_bp_object;\n \n   /* Lazily create wrappers for breakpoints created outside Scheme.  */\n@@ -534,7 +533,7 @@ bpscm_build_bp_list (struct breakpoint *bp, void *arg)\n   if (bp_smob != NULL)\n     *list = scm_cons (bp_smob->containing_scm, *list);\n \n-  return 0;\n+  return false;\n }\n \n /* (breakpoints) -> list\n@@ -545,11 +544,10 @@ gdbscm_breakpoints (void)\n {\n   SCM list = SCM_EOL;\n \n-  /* If iterate_over_breakpoints returns non-NULL it means the iteration\n-     terminated early.\n-     In that case abandon building the list and return #f.  */\n-  if (iterate_over_breakpoints (bpscm_build_bp_list, &list) != NULL)\n-    return SCM_BOOL_F;\n+  iterate_over_breakpoints ([&] (breakpoint *bp)\n+    {\n+      return bpscm_build_bp_list(bp, &list);\n+    });\n \n   return scm_reverse_x (list, SCM_EOL);\n }"
    },
    {
      "sha": "65cb29fdca63417d6f4610ba17c6b98121aeed17",
      "filename": "gdb/python/py-breakpoint.c",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/95da600f404ca159242f49441d9b4ea78183852b/gdb/python/py-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/95da600f404ca159242f49441d9b4ea78183852b/gdb/python/py-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-breakpoint.c?ref=95da600f404ca159242f49441d9b4ea78183852b",
      "patch": "@@ -871,10 +871,9 @@ bppy_init (PyObject *self, PyObject *args, PyObject *kwargs)\n \n \f\n \n-static int\n-build_bp_list (struct breakpoint *b, void *arg)\n+static bool\n+build_bp_list (struct breakpoint *b, PyObject *list)\n {\n-  PyObject *list = (PyObject *) arg;\n   PyObject *bp = (PyObject *) b->py_bp_object;\n   int iserr = 0;\n \n@@ -886,9 +885,9 @@ build_bp_list (struct breakpoint *b, void *arg)\n     iserr = PyList_Append (list, bp);\n \n   if (iserr == -1)\n-    return 1;\n+    return true;\n \n-  return 0;\n+  return false;\n }\n \n /* Static function to return a tuple holding all breakpoints.  */\n@@ -906,7 +905,11 @@ gdbpy_breakpoints (PyObject *self, PyObject *args)\n   /* If iterate_over_breakpoints returns non NULL it signals an error\n      condition.  In that case abandon building the list and return\n      NULL.  */\n-  if (iterate_over_breakpoints (build_bp_list, list.get ()) != NULL)\n+  auto callback = [&] (breakpoint *bp)\n+    {\n+      return build_bp_list(bp, list.get ());\n+    };\n+  if (iterate_over_breakpoints (callback) != NULL)\n     return NULL;\n \n   return PyList_AsTuple (list.get ());"
    },
    {
      "sha": "7f818213bd20376fd52a46d4a3df1543d0888b43",
      "filename": "gdb/python/py-finishbreakpoint.c",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/95da600f404ca159242f49441d9b4ea78183852b/gdb/python/py-finishbreakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/95da600f404ca159242f49441d9b4ea78183852b/gdb/python/py-finishbreakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-finishbreakpoint.c?ref=95da600f404ca159242f49441d9b4ea78183852b",
      "patch": "@@ -341,10 +341,10 @@ bpfinishpy_out_of_scope (struct finish_breakpoint_object *bpfinish_obj)\n /* Callback for `bpfinishpy_detect_out_scope'.  Triggers Python's\n    `B->out_of_scope' function if B is a FinishBreakpoint out of its scope.  */\n \n-static int\n-bpfinishpy_detect_out_scope_cb (struct breakpoint *b, void *args)\n+static bool\n+bpfinishpy_detect_out_scope_cb (struct breakpoint *b,\n+\t\t\t\tstruct breakpoint *bp_stopped)\n {\n-  struct breakpoint *bp_stopped = (struct breakpoint *) args;\n   PyObject *py_bp = (PyObject *) b->py_bp_object;\n \n   /* Trigger out_of_scope if this is a FinishBreakpoint and its frame is\n@@ -383,8 +383,11 @@ bpfinishpy_handle_stop (struct bpstats *bs, int print_frame)\n {\n   gdbpy_enter enter_py (get_current_arch (), current_language);\n \n-  iterate_over_breakpoints (bpfinishpy_detect_out_scope_cb,\n-                            bs == NULL ? NULL : bs->breakpoint_at);\n+  iterate_over_breakpoints ([&] (breakpoint *bp)\n+    {\n+      return bpfinishpy_detect_out_scope_cb\n+\t(bp, bs == NULL ? NULL : bs->breakpoint_at);\n+    });\n }\n \n /* Attached to `exit' notifications, triggers all the necessary out of\n@@ -395,7 +398,10 @@ bpfinishpy_handle_exit (struct inferior *inf)\n {\n   gdbpy_enter enter_py (target_gdbarch (), current_language);\n \n-  iterate_over_breakpoints (bpfinishpy_detect_out_scope_cb, NULL);\n+  iterate_over_breakpoints ([&] (breakpoint *bp)\n+    {\n+      return bpfinishpy_detect_out_scope_cb (bp, nullptr);\n+    });\n }\n \n /* Initialize the Python finish breakpoint code.  */"
    },
    {
      "sha": "486ae1215b0b3181017daf3b8fb3ac3da7c63136",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/95da600f404ca159242f49441d9b4ea78183852b/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/95da600f404ca159242f49441d9b4ea78183852b/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=95da600f404ca159242f49441d9b4ea78183852b",
      "patch": "@@ -1991,15 +1991,15 @@ svr4_handle_solib_event (void)\n \n /* Helper function for svr4_update_solib_event_breakpoints.  */\n \n-static int\n-svr4_update_solib_event_breakpoint (struct breakpoint *b, void *arg)\n+static bool\n+svr4_update_solib_event_breakpoint (struct breakpoint *b)\n {\n   struct bp_location *loc;\n \n   if (b->type != bp_shlib_event)\n     {\n       /* Continue iterating.  */\n-      return 0;\n+      return false;\n     }\n \n   for (loc = b->loc; loc != NULL; loc = loc->next)\n@@ -2027,7 +2027,7 @@ svr4_update_solib_event_breakpoint (struct breakpoint *b, void *arg)\n     }\n \n   /* Continue iterating.  */\n-  return 0;\n+  return false;\n }\n \n /* Enable or disable optional solib event breakpoints as appropriate.\n@@ -2036,7 +2036,7 @@ svr4_update_solib_event_breakpoint (struct breakpoint *b, void *arg)\n static void\n svr4_update_solib_event_breakpoints (void)\n {\n-  iterate_over_breakpoints (svr4_update_solib_event_breakpoint, NULL);\n+  iterate_over_breakpoints (svr4_update_solib_event_breakpoint);\n }\n \n /* Create and register solib event breakpoints.  PROBES is an array"
    }
  ]
}