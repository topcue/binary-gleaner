{
  "sha": "1f1fb219fdc4f96fd967e6173e9090c4c4917e96",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWYxZmIyMTlmZGM0Zjk2ZmQ5NjdlNjE3M2U5MDkwYzRjNDkxN2U5Ng==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-19T22:49:00Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-22T07:53:06Z"
    },
    "message": "[GOLD] PR27815, gold fails to build with latest GCC\n\n...gold/gc.h:250:37: error: ISO C++ says that these are ambiguous, even though the worst conversion for the first is better than the worst conversion for the second: [-Werror]\n  250 |                 (*secvec).push_back(Section_id(NULL, 0));\n      |                                     ^~~~~~~~~~~~~~~~~~~\n\n\tPR gold/27815\n\t* gc.h (gc_process_relocs): Use nullptr in Section_id constructor.",
    "tree": {
      "sha": "609630b8c3e12699e6b08e449cd5e32794226933",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/609630b8c3e12699e6b08e449cd5e32794226933"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1f1fb219fdc4f96fd967e6173e9090c4c4917e96",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1f1fb219fdc4f96fd967e6173e9090c4c4917e96",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1f1fb219fdc4f96fd967e6173e9090c4c4917e96",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1f1fb219fdc4f96fd967e6173e9090c4c4917e96/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "168671c14cc88e0c47a2b7d56fdede7d6604f14d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/168671c14cc88e0c47a2b7d56fdede7d6604f14d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/168671c14cc88e0c47a2b7d56fdede7d6604f14d"
    }
  ],
  "stats": {
    "total": 9,
    "additions": 7,
    "deletions": 2
  },
  "files": [
    {
      "sha": "37fe2012a29c270d2d84fded9d55edffc54a503b",
      "filename": "gold/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1f1fb219fdc4f96fd967e6173e9090c4c4917e96/gold/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1f1fb219fdc4f96fd967e6173e9090c4c4917e96/gold/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/ChangeLog?ref=1f1fb219fdc4f96fd967e6173e9090c4c4917e96",
      "patch": "@@ -1,3 +1,8 @@\n+2021-05-22  Alan Modra  <amodra@gmail.com>\n+\n+\tPR gold/27815\n+\t* gc.h (gc_process_relocs): Use nullptr in Section_id constructor.\n+\n 2021-05-15  Alan Modra  <amodra@gmail.com>\n \n \tPR 27834"
    },
    {
      "sha": "dc5c100295e2f701cd891369b9d30b5c93515a9d",
      "filename": "gold/gc.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1f1fb219fdc4f96fd967e6173e9090c4c4917e96/gold/gc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1f1fb219fdc4f96fd967e6173e9090c4c4917e96/gold/gc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/gc.h?ref=1f1fb219fdc4f96fd967e6173e9090c4c4917e96",
      "patch": "@@ -247,7 +247,7 @@ gc_process_relocs(\n \t      if (is_ordinary) \n \t\t(*secvec).push_back(Section_id(src_obj, dst_indx));\n \t      else\n-                (*secvec).push_back(Section_id(NULL, 0));\n+\t\t(*secvec).push_back(Section_id(nullptr, 0));\n               // If the target of the relocation is an STT_SECTION symbol,\n               // make a note of that by storing -1 in the symbol vector.\n               if (lsym.get_st_type() == elfcpp::STT_SECTION)\n@@ -329,7 +329,7 @@ gc_process_relocs(\n               if (is_ordinary && dst_obj != NULL)\n \t\t(*secvec).push_back(Section_id(dst_obj, dst_indx));\n \t      else\n-                (*secvec).push_back(Section_id(NULL, 0));\n+\t\t(*secvec).push_back(Section_id(nullptr, 0));\n               (*symvec).push_back(gsym);\n \t      (*addendvec).push_back(std::make_pair(\n \t\t\t\t\tstatic_cast<long long>(symvalue),"
    }
  ]
}