{
  "sha": "b4eb24524b5838141bd3c3998afc81f65302eca1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjRlYjI0NTI0YjU4MzgxNDFiZDNjMzk5OGFmYzgxZjY1MzAyZWNhMQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-16T16:49:45Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-25T13:48:27Z"
    },
    "message": "Remove tui_list\n\nThis removes the tui_list type in favor of a std::vector.\n\ngdb/ChangeLog\n2019-06-25  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-winsource.c (tui_display_main)\n\t(tui_update_source_windows_with_addr)\n\t(tui_update_all_breakpoint_info): Update.\n\t* tui/tui-win.c (tui_resize_all, tui_adjust_win_heights)\n\t(new_height_ok, parse_scrolling_args): Update.\n\t* tui/tui-stack.c (tui_show_frame_info): Update.\n\t* tui/tui-data.h (struct tui_list): Remove.\n\t(tui_source_windows): Return a reference to a std::vector.\n\t* tui/tui-data.c (source_windows): Now a std::vector.\n\t(tui_source_windows): Change return type.\n\t(tui_clear_source_windows): Rewrite.\n\t(tui_clear_source_windows_detail, tui_add_to_source_windows)\n\t(tui_free_all_source_wins_content): Rewrite.",
    "tree": {
      "sha": "84e51fcd92583a8f1f751ee7d0a49f47544967f5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/84e51fcd92583a8f1f751ee7d0a49f47544967f5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b4eb24524b5838141bd3c3998afc81f65302eca1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4eb24524b5838141bd3c3998afc81f65302eca1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b4eb24524b5838141bd3c3998afc81f65302eca1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4eb24524b5838141bd3c3998afc81f65302eca1/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8761a91b2614304963bfe211ff8c682c7eba3b51",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8761a91b2614304963bfe211ff8c682c7eba3b51",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8761a91b2614304963bfe211ff8c682c7eba3b51"
    }
  ],
  "stats": {
    "total": 111,
    "additions": 47,
    "deletions": 64
  },
  "files": [
    {
      "sha": "412c442603578f2c0a70a496f225470b3e82a3ca",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4eb24524b5838141bd3c3998afc81f65302eca1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4eb24524b5838141bd3c3998afc81f65302eca1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b4eb24524b5838141bd3c3998afc81f65302eca1",
      "patch": "@@ -1,3 +1,19 @@\n+2019-06-25  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-winsource.c (tui_display_main)\n+\t(tui_update_source_windows_with_addr)\n+\t(tui_update_all_breakpoint_info): Update.\n+\t* tui/tui-win.c (tui_resize_all, tui_adjust_win_heights)\n+\t(new_height_ok, parse_scrolling_args): Update.\n+\t* tui/tui-stack.c (tui_show_frame_info): Update.\n+\t* tui/tui-data.h (struct tui_list): Remove.\n+\t(tui_source_windows): Return a reference to a std::vector.\n+\t* tui/tui-data.c (source_windows): Now a std::vector.\n+\t(tui_source_windows): Change return type.\n+\t(tui_clear_source_windows): Rewrite.\n+\t(tui_clear_source_windows_detail, tui_add_to_source_windows)\n+\t(tui_free_all_source_wins_content): Rewrite.\n+\n 2019-06-25  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-data.h (struct tui_win_info, struct tui_source_window)"
    },
    {
      "sha": "d9b8bd6aae39b585c1eaf732be27d847b1fe8b99",
      "filename": "gdb/tui/tui-data.c",
      "status": "modified",
      "additions": 15,
      "deletions": 27,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4eb24524b5838141bd3c3998afc81f65302eca1/gdb/tui/tui-data.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4eb24524b5838141bd3c3998afc81f65302eca1/gdb/tui/tui-data.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.c?ref=b4eb24524b5838141bd3c3998afc81f65302eca1",
      "patch": "@@ -38,8 +38,7 @@ static enum tui_layout_type current_layout = UNDEFINED_LAYOUT;\n static int term_height, term_width;\n static struct tui_gen_win_info _locator;\n static struct tui_gen_win_info exec_info[2];\n-static struct tui_win_info *src_win_list[2];\n-static struct tui_list source_windows = {src_win_list, 0};\n+static std::vector<tui_win_info *> source_windows;\n static struct tui_win_info *win_with_focus = NULL;\n static struct tui_layout_def layout_def = {\n   SRC_WIN,\t\t\t/* DISPLAY_MODE */\n@@ -138,33 +137,29 @@ tui_set_win_with_focus (struct tui_win_info *win_info)\n /* Accessor for the current source window.  Usually there is only one\n    source window (either source or disassembly), but both can be\n    displayed at the same time.  */\n-struct tui_list *\n-tui_source_windows (void)\n+std::vector<tui_win_info *> &\n+tui_source_windows ()\n {\n-  return &source_windows;\n+  return source_windows;\n }\n \n \n /* Clear the list of source windows.  Usually there is only one source\n    window (either source or disassembly), but both can be displayed at\n    the same time.  */\n void\n-tui_clear_source_windows (void)\n+tui_clear_source_windows ()\n {\n-  source_windows.list[0] = NULL;\n-  source_windows.list[1] = NULL;\n-  source_windows.count = 0;\n+  source_windows.clear ();\n }\n \n \n /* Clear the pertinant detail in the source windows.  */\n void\n-tui_clear_source_windows_detail (void)\n+tui_clear_source_windows_detail ()\n {\n-  int i;\n-\n-  for (i = 0; i < (tui_source_windows ())->count; i++)\n-    tui_clear_win_detail ((tui_source_windows ())->list[i]);\n+  for (tui_win_info *win : tui_source_windows ())\n+    tui_clear_win_detail (win);\n }\n \n \n@@ -174,8 +169,8 @@ tui_clear_source_windows_detail (void)\n void\n tui_add_to_source_windows (struct tui_win_info *win_info)\n {\n-  if (source_windows.count < 2)\n-    source_windows.list[source_windows.count++] = win_info;\n+  if (source_windows.size () < 2)\n+    source_windows.push_back (win_info);\n }\n \n /* See tui-data.h.  */\n@@ -675,19 +670,12 @@ tui_win_info::~tui_win_info ()\n \n \n void\n-tui_free_all_source_wins_content (void)\n+tui_free_all_source_wins_content ()\n {\n-  int i;\n-\n-  for (i = 0; i < (tui_source_windows ())->count; i++)\n+  for (tui_win_info *win_info : tui_source_windows ())\n     {\n-      struct tui_win_info *win_info = (tui_source_windows ())->list[i];\n-\n-      if (win_info != NULL)\n-\t{\n-\t  tui_free_win_content (&(win_info->generic));\n-\t  tui_free_win_content (win_info->detail.source_info.execution_info);\n-\t}\n+      tui_free_win_content (&(win_info->generic));\n+      tui_free_win_content (win_info->detail.source_info.execution_info);\n     }\n }\n "
    },
    {
      "sha": "8008893854368c39e3210dc48793360e261ae071",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 1,
      "deletions": 9,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4eb24524b5838141bd3c3998afc81f65302eca1/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4eb24524b5838141bd3c3998afc81f65302eca1/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=b4eb24524b5838141bd3c3998afc81f65302eca1",
      "patch": "@@ -102,14 +102,6 @@ enum tui_scroll_direction\n };\n \n \n-/* General list struct.  */\n-struct tui_list\n-{\n-  struct tui_win_info **list;\n-  int count;\n-};\n-\n-\n /* The kinds of layouts available.  */\n enum tui_layout_type\n {\n@@ -360,7 +352,7 @@ extern void tui_set_term_width_to (int);\n extern struct tui_gen_win_info *tui_locator_win_info_ptr (void);\n extern struct tui_gen_win_info *tui_source_exec_info_win_ptr (void);\n extern struct tui_gen_win_info *tui_disassem_exec_info_win_ptr (void);\n-extern struct tui_list *tui_source_windows (void);\n+extern std::vector<tui_win_info *> &tui_source_windows ();\n extern void tui_clear_source_windows (void);\n extern void tui_clear_source_windows_detail (void);\n extern void tui_clear_win_detail (struct tui_win_info *);"
    },
    {
      "sha": "d09acd28585a97439acac7ee976e6f1e3c6f5608",
      "filename": "gdb/tui/tui-stack.c",
      "status": "modified",
      "additions": 3,
      "deletions": 7,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4eb24524b5838141bd3c3998afc81f65302eca1/gdb/tui/tui-stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4eb24524b5838141bd3c3998afc81f65302eca1/gdb/tui/tui-stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-stack.c?ref=b4eb24524b5838141bd3c3998afc81f65302eca1",
      "patch": "@@ -360,12 +360,11 @@ tui_update_locator_fullname (const char *fullname)\n int\n tui_show_frame_info (struct frame_info *fi)\n {\n-  struct tui_win_info *win_info;\n   int locator_changed_p;\n \n   if (fi)\n     {\n-      int start_line, i;\n+      int start_line;\n       CORE_ADDR low;\n       struct tui_gen_win_info *locator = tui_locator_win_info_ptr ();\n       int source_already_displayed;\n@@ -397,12 +396,10 @@ tui_show_frame_info (struct frame_info *fi)\n \n       tui_show_locator_content ();\n       start_line = 0;\n-      for (i = 0; i < (tui_source_windows ())->count; i++)\n+      for (struct tui_win_info *win_info : tui_source_windows ())\n \t{\n \t  union tui_which_element *item;\n \n-\t  win_info = (tui_source_windows ())->list[i];\n-\n \t  item = &locator->content[0]->which_element;\n \t  if (win_info == TUI_SRC_WIN)\n \t    {\n@@ -475,9 +472,8 @@ tui_show_frame_info (struct frame_info *fi)\n \treturn 0;\n \n       tui_show_locator_content ();\n-      for (int i = 0; i < (tui_source_windows ())->count; i++)\n+      for (struct tui_win_info *win_info : tui_source_windows ())\n \t{\n-\t  win_info = (tui_source_windows ())->list[i];\n \t  tui_clear_source_content (win_info, EMPTY_SOURCE_PROMPT);\n \t  tui_update_exec_info (win_info);\n \t}"
    },
    {
      "sha": "21a9946792edf67c611247de6521b0b936d161a5",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4eb24524b5838141bd3c3998afc81f65302eca1/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4eb24524b5838141bd3c3998afc81f65302eca1/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=b4eb24524b5838141bd3c3998afc81f65302eca1",
      "patch": "@@ -686,7 +686,7 @@ tui_resize_all (void)\n        {\n \tcase SRC_COMMAND:\n \tcase DISASSEM_COMMAND:\n-\t  first_win = tui_source_windows ()->list[0];\n+\t  first_win = tui_source_windows ()[0];\n \t  first_win->generic.width += width_diff;\n \t  locator->width += width_diff;\n \t  /* Check for invalid heights.  */\n@@ -723,7 +723,7 @@ tui_resize_all (void)\n \t    {\n \t      first_win = TUI_DATA_WIN;\n \t      first_win->generic.width += width_diff;\n-\t      second_win = tui_source_windows ()->list[0];\n+\t      second_win = tui_source_windows ()[0];\n \t      second_win->generic.width += width_diff;\n \t    }\n \t  /* Change the first window's height/width.  */\n@@ -1204,7 +1204,7 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n \t      make_invisible_and_set_new_height (primary_win_info, new_height);\n \t      if (primary_win_info->generic.type == CMD_WIN)\n \t\t{\n-\t\t  win_info = (tui_source_windows ())->list[0];\n+\t\t  win_info = tui_source_windows ()[0];\n \t\t  src_win_info = win_info;\n \t\t}\n \t      else\n@@ -1233,7 +1233,7 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n \t      else\n \t\t{\n \t\t  first_win = TUI_DATA_WIN;\n-\t\t  second_win = (tui_source_windows ())->list[0];\n+\t\t  second_win = tui_source_windows ()[0];\n \t\t}\n \t      if (primary_win_info == TUI_CMD_WIN)\n \t\t{ /* Split the change in height accross the 1st & 2nd\n@@ -1490,7 +1490,7 @@ new_height_ok (struct tui_win_info *primary_win_info,\n \t      struct tui_win_info *win_info;\n \n \t      if (primary_win_info == TUI_CMD_WIN)\n-\t\twin_info = (tui_source_windows ())->list[0];\n+\t\twin_info = tui_source_windows ()[0];\n \t      else\n \t\twin_info = TUI_CMD_WIN;\n \t      ok = ((new_height +\n@@ -1511,7 +1511,7 @@ new_height_ok (struct tui_win_info *primary_win_info,\n \t  else\n \t    {\n \t      first_win = TUI_DATA_WIN;\n-\t      second_win = (tui_source_windows ())->list[0];\n+\t      second_win = tui_source_windows ()[0];\n \t    }\n \t  /* We could simply add all the heights to obtain the same\n \t     result but below is more explicit since we subtract 1 for\n@@ -1637,7 +1637,7 @@ parse_scrolling_args (const char *arg,\n \t    error (_(\"Invalid window specified. \\n\\\n The window name specified must be valid and visible.\\n\"));\n \t  else if (*win_to_scroll == TUI_CMD_WIN)\n-\t    *win_to_scroll = (tui_source_windows ())->list[0];\n+\t    *win_to_scroll = tui_source_windows ()[0];\n \t}\n     }\n }"
    },
    {
      "sha": "20f39c4fb6e5a465e18f710e8779df4d575ed2da",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 5,
      "deletions": 14,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b4eb24524b5838141bd3c3998afc81f65302eca1/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b4eb24524b5838141bd3c3998afc81f65302eca1/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=b4eb24524b5838141bd3c3998afc81f65302eca1",
      "patch": "@@ -42,9 +42,9 @@\n \n /* Function to display the \"main\" routine.  */\n void\n-tui_display_main (void)\n+tui_display_main ()\n {\n-  if ((tui_source_windows ())->count > 0)\n+  if (!tui_source_windows ().empty ())\n     {\n       struct gdbarch *gdbarch;\n       CORE_ADDR addr;\n@@ -159,12 +159,8 @@ tui_update_source_windows_with_addr (struct gdbarch *gdbarch, CORE_ADDR addr)\n     }\n   else\n     {\n-      int i;\n-\n-      for (i = 0; i < (tui_source_windows ())->count; i++)\n+      for (struct tui_win_info *win_info : tui_source_windows ())\n \t{\n-\t  struct tui_win_info *win_info = (tui_source_windows ())->list[i];\n-\n \t  tui_clear_source_content (win_info, EMPTY_SOURCE_PROMPT);\n \t  tui_clear_exec_info_content (win_info);\n \t}\n@@ -406,15 +402,10 @@ tui_set_is_exec_point_at (struct tui_line_or_address l,\n    This is called whenever a breakpoint is inserted, removed or\n    has its state changed.  */\n void\n-tui_update_all_breakpoint_info (void)\n+tui_update_all_breakpoint_info ()\n {\n-  struct tui_list *list = tui_source_windows ();\n-  int i;\n-\n-  for (i = 0; i < list->count; i++)\n+  for (tui_win_info *win : tui_source_windows ())\n     {\n-      struct tui_win_info *win = list->list[i];\n-\n       if (tui_update_breakpoint_info (win, FALSE))\n         {\n           tui_update_exec_info (win);"
    }
  ]
}