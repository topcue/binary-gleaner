{
  "sha": "9411c49ecc09df989ecddb05e1756e0a9da0d1c8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTQxMWM0OWVjYzA5ZGY5ODllY2RkYjA1ZTE3NTZlMGE5ZGEwZDFjOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-08T22:51:06Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-11-26T21:02:57Z"
    },
    "message": "Introduce run_on_main_thread\n\nThis introduces a way for a callback to be run on the main thread.\n\ngdb/ChangeLog\n2019-11-26  Tom Tromey  <tom@tromey.com>\n\n\t* run-on-main-thread.c: New file.\n\t* run-on-main-thread.h: New file.\n\t* unittests/main-thread-selftests.c: New file.\n\t* Makefile.in (SUBDIR_UNITTESTS_SRCS): Add\n\tmain-thread-selftests.c.\n\t(HFILES_NO_SRCDIR): Add run-on-main-thread.h.\n\t(COMMON_SFILES): Add run-on-main-thread.c.\n\nChange-Id: I16ef82f0564e9f8a524bdc64cb31df79a988ad9f",
    "tree": {
      "sha": "4dd8b5100ccc851fddfcdf95062dd5a6b4578aa6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4dd8b5100ccc851fddfcdf95062dd5a6b4578aa6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9411c49ecc09df989ecddb05e1756e0a9da0d1c8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9411c49ecc09df989ecddb05e1756e0a9da0d1c8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9411c49ecc09df989ecddb05e1756e0a9da0d1c8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9411c49ecc09df989ecddb05e1756e0a9da0d1c8/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c3efb9654847822620010922cb7ea61e8901479c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3efb9654847822620010922cb7ea61e8901479c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c3efb9654847822620010922cb7ea61e8901479c"
    }
  ],
  "stats": {
    "total": 218,
    "additions": 218,
    "deletions": 0
  },
  "files": [
    {
      "sha": "80a3ea0a2ad5fee4ea4bcf5aaf6ba4cd4f7f58b4",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9411c49ecc09df989ecddb05e1756e0a9da0d1c8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9411c49ecc09df989ecddb05e1756e0a9da0d1c8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9411c49ecc09df989ecddb05e1756e0a9da0d1c8",
      "patch": "@@ -1,3 +1,13 @@\n+2019-11-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* run-on-main-thread.c: New file.\n+\t* run-on-main-thread.h: New file.\n+\t* unittests/main-thread-selftests.c: New file.\n+\t* Makefile.in (SUBDIR_UNITTESTS_SRCS): Add\n+\tmain-thread-selftests.c.\n+\t(HFILES_NO_SRCDIR): Add run-on-main-thread.h.\n+\t(COMMON_SFILES): Add run-on-main-thread.c.\n+\n 2019-11-26  Tom Tromey  <tom@tromey.com>\n \n \t* main.c (setup_alternate_signal_stack): Remove."
    },
    {
      "sha": "c487b10af89324afbabc9d56e828cc537426a8a0",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9411c49ecc09df989ecddb05e1756e0a9da0d1c8/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9411c49ecc09df989ecddb05e1756e0a9da0d1c8/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=9411c49ecc09df989ecddb05e1756e0a9da0d1c8",
      "patch": "@@ -433,6 +433,7 @@ SUBDIR_UNITTESTS_SRCS = \\\n \tunittests/optional-selftests.c \\\n \tunittests/parse-connection-spec-selftests.c \\\n \tunittests/ptid-selftests.c \\\n+\tunittests/main-thread-selftests.c \\\n \tunittests/mkdir-recursive-selftests.c \\\n \tunittests/rsp-low-selftests.c \\\n \tunittests/scoped_fd-selftests.c \\\n@@ -1116,6 +1117,7 @@ COMMON_SFILES = \\\n \tremote-fileio.c \\\n \tremote-notif.c \\\n \treverse.c \\\n+\trun-on-main-thread.c \\\n \trust-lang.c \\\n \tsentinel-frame.c \\\n \tser-event.c \\\n@@ -1378,6 +1380,7 @@ HFILES_NO_SRCDIR = \\\n \triscv-tdep.h \\\n \trs6000-aix-tdep.h \\\n \trs6000-tdep.h \\\n+\trun-on-main-thread.h \\\n \ts390-linux-tdep.h \\\n \ts390-tdep.h \\\n \tscore-tdep.h \\"
    },
    {
      "sha": "86824b5af4a4e38dbfce3cb32cf37e4b7249dbdb",
      "filename": "gdb/run-on-main-thread.c",
      "status": "added",
      "additions": 97,
      "deletions": 0,
      "changes": 97,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9411c49ecc09df989ecddb05e1756e0a9da0d1c8/gdb/run-on-main-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9411c49ecc09df989ecddb05e1756e0a9da0d1c8/gdb/run-on-main-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/run-on-main-thread.c?ref=9411c49ecc09df989ecddb05e1756e0a9da0d1c8",
      "patch": "@@ -0,0 +1,97 @@\n+/* Run a function on the main thread\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"run-on-main-thread.h\"\n+#include \"ser-event.h\"\n+#if CXX_STD_THREAD\n+#include <mutex>\n+#endif\n+#include \"event-loop.h\"\n+\n+/* The serial event used when posting runnables.  */\n+\n+static struct serial_event *runnable_event;\n+\n+/* Runnables that have been posted.  */\n+\n+static std::vector<std::function<void ()>> runnables;\n+\n+#if CXX_STD_THREAD\n+\n+/* Mutex to hold when handling RUNNABLE_EVENT or RUNNABLES.  */\n+\n+static std::mutex runnable_mutex;\n+\n+#endif\n+\n+/* Run all the queued runnables.  */\n+\n+static void\n+run_events (int error, gdb_client_data client_data)\n+{\n+  std::vector<std::function<void ()>> local;\n+\n+  /* Hold the lock while changing the globals, but not while running\n+     the runnables.  */\n+  {\n+#if CXX_STD_THREAD\n+    std::lock_guard<std::mutex> lock (runnable_mutex);\n+#endif\n+\n+    /* Clear the event fd.  Do this before flushing the events list,\n+       so that any new event post afterwards is sure to re-awaken the\n+       event loop.  */\n+    serial_event_clear (runnable_event);\n+\n+    /* Move the vector in case running a runnable pushes a new\n+       runnable.  */\n+    local = std::move (runnables);\n+  }\n+\n+  for (auto &item : local)\n+    {\n+      try\n+\t{\n+\t  item ();\n+\t}\n+      catch (...)\n+\t{\n+\t  /* Ignore exceptions in the callback.  */\n+\t}\n+    }\n+}\n+\n+/* See run-on-main-thread.h.  */\n+\n+void\n+run_on_main_thread (std::function<void ()> &&func)\n+{\n+#if CXX_STD_THREAD\n+  std::lock_guard<std::mutex> lock (runnable_mutex);\n+#endif\n+  runnables.emplace_back (std::move (func));\n+  serial_event_set (runnable_event);\n+}\n+\n+void\n+_initialize_run_on_main_thread ()\n+{\n+  runnable_event = make_serial_event ();\n+  add_file_handler (serial_event_fd (runnable_event), run_events, nullptr);\n+}"
    },
    {
      "sha": "fd1a2c425321787b3702c9faa269b8092a47fa82",
      "filename": "gdb/run-on-main-thread.h",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9411c49ecc09df989ecddb05e1756e0a9da0d1c8/gdb/run-on-main-thread.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9411c49ecc09df989ecddb05e1756e0a9da0d1c8/gdb/run-on-main-thread.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/run-on-main-thread.h?ref=9411c49ecc09df989ecddb05e1756e0a9da0d1c8",
      "patch": "@@ -0,0 +1,28 @@\n+/* Run a function on the main thread\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GDB_RUN_ON_MAIN_THREAD_H\n+#define GDB_RUN_ON_MAIN_THREAD_H\n+\n+#include <functional>\n+\n+/* Send a runnable to the main thread.  */\n+\n+extern void run_on_main_thread (std::function<void ()> &&);\n+\n+#endif /* GDB_RUN_ON_MAIN_THREAD_H */"
    },
    {
      "sha": "2324e9844287f37ef94dca760bcb6c8d150221c4",
      "filename": "gdb/unittests/main-thread-selftests.c",
      "status": "added",
      "additions": 80,
      "deletions": 0,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9411c49ecc09df989ecddb05e1756e0a9da0d1c8/gdb/unittests/main-thread-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9411c49ecc09df989ecddb05e1756e0a9da0d1c8/gdb/unittests/main-thread-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/main-thread-selftests.c?ref=9411c49ecc09df989ecddb05e1756e0a9da0d1c8",
      "patch": "@@ -0,0 +1,80 @@\n+/* Self tests for run_on_main_thread\n+\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"gdbsupport/selftest.h\"\n+#include \"gdbsupport/block-signals.h\"\n+#include \"run-on-main-thread.h\"\n+#include \"event-loop.h\"\n+#if CXX_STD_THREAD\n+#include <thread>\n+#endif\n+\n+namespace selftests {\n+namespace main_thread_tests {\n+\n+#if CXX_STD_THREAD\n+\n+static bool done;\n+\n+static void\n+set_done ()\n+{\n+  run_on_main_thread ([] ()\n+    {\n+      done = true;\n+    });\n+}\n+\n+static void\n+run_tests ()\n+{\n+  std::thread thread;\n+\n+  done = false;\n+\n+  {\n+    gdb::block_signals blocker;\n+\n+    thread = std::thread (set_done);\n+  }\n+\n+  while (!done && gdb_do_one_event () >= 0)\n+    ;\n+\n+  /* Actually the test will just hang, but we want to test\n+     something.  */\n+  SELF_CHECK (done);\n+\n+  thread.join ();\n+}\n+\n+#endif\n+\n+}\n+}\n+\n+void\n+_initialize_main_thread_selftests ()\n+{\n+#if CXX_STD_THREAD\n+  selftests::register_test (\"run_on_main_thread\",\n+\t\t\t    selftests::main_thread_tests::run_tests);\n+#endif\n+}"
    }
  ]
}