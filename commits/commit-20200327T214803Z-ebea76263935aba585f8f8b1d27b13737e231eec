{
  "sha": "ebea76263935aba585f8f8b1d27b13737e231eec",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWJlYTc2MjYzOTM1YWJhNTg1ZjhmOGIxZDI3YjEzNzM3ZTIzMWVlYw==",
  "commit": {
    "author": {
      "name": "Hannes Domani",
      "email": "ssbssa@yahoo.de",
      "date": "2020-03-27T11:34:02Z"
    },
    "committer": {
      "name": "Hannes Domani",
      "email": "ssbssa@yahoo.de",
      "date": "2020-03-27T21:48:03Z"
    },
    "message": "Always fix system DLL paths for 32bit programs\n\nGetModuleFileNameEx might also return the 64bit system directory for 32bit\nprograms even for a 32bit gdb:\n\n(gdb) info sharedlibrary\nFrom        To          Syms Read   Shared Object Library\n0x779d0000  0x77b34d20  Yes (*)     C:\\Windows\\SysWOW64\\ntdll.dll\n0x76850000  0x7694ad9c  Yes (*)     C:\\Windows\\syswow64\\kernel32.dll\n0x75421000  0x75466a18  Yes (*)     C:\\Windows\\syswow64\\KernelBase.dll\n0x6fbe1000  0x6fcca1c0  Yes (*)     C:\\Windows\\system32\\dbghelp.dll\n0x76d31000  0x76ddb2c4  Yes (*)     C:\\Windows\\syswow64\\msvcrt.dll\n\nSo this makes the path conversion for all 32bit programs.\n\ngdb/ChangeLog:\n\n2020-03-27  Hannes Domani  <ssbssa@yahoo.de>\n\n\t* windows-nat.c (windows_add_all_dlls): Fix system dll paths.",
    "tree": {
      "sha": "1f2bf51a196c77f3b0e7920e8813bcb4051e5c94",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1f2bf51a196c77f3b0e7920e8813bcb4051e5c94"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ebea76263935aba585f8f8b1d27b13737e231eec",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ebea76263935aba585f8f8b1d27b13737e231eec",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ebea76263935aba585f8f8b1d27b13737e231eec",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ebea76263935aba585f8f8b1d27b13737e231eec/comments",
  "author": {
    "login": "ssbssa",
    "id": 40947,
    "node_id": "MDQ6VXNlcjQwOTQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40947?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ssbssa",
    "html_url": "https://github.com/ssbssa",
    "followers_url": "https://api.github.com/users/ssbssa/followers",
    "following_url": "https://api.github.com/users/ssbssa/following{/other_user}",
    "gists_url": "https://api.github.com/users/ssbssa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ssbssa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ssbssa/subscriptions",
    "organizations_url": "https://api.github.com/users/ssbssa/orgs",
    "repos_url": "https://api.github.com/users/ssbssa/repos",
    "events_url": "https://api.github.com/users/ssbssa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ssbssa/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "ssbssa",
    "id": 40947,
    "node_id": "MDQ6VXNlcjQwOTQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40947?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ssbssa",
    "html_url": "https://github.com/ssbssa",
    "followers_url": "https://api.github.com/users/ssbssa/followers",
    "following_url": "https://api.github.com/users/ssbssa/following{/other_user}",
    "gists_url": "https://api.github.com/users/ssbssa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ssbssa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ssbssa/subscriptions",
    "organizations_url": "https://api.github.com/users/ssbssa/orgs",
    "repos_url": "https://api.github.com/users/ssbssa/repos",
    "events_url": "https://api.github.com/users/ssbssa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ssbssa/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "258e884429c87ed5ebee2b7767e3955218ec064b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/258e884429c87ed5ebee2b7767e3955218ec064b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/258e884429c87ed5ebee2b7767e3955218ec064b"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 28,
    "deletions": 19
  },
  "files": [
    {
      "sha": "50c7cb4fe3b808f1ae61dc1bdfa19003d16ce03f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebea76263935aba585f8f8b1d27b13737e231eec/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebea76263935aba585f8f8b1d27b13737e231eec/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ebea76263935aba585f8f8b1d27b13737e231eec",
      "patch": "@@ -1,3 +1,7 @@\n+2020-03-27  Hannes Domani  <ssbssa@yahoo.de>\n+\n+\t* windows-nat.c (windows_add_all_dlls): Fix system dll paths.\n+\n 2020-03-26  John Baldwin  <jhb@FreeBSD.org>\n \n \t* fbsd-tdep.c (fbsd_print_auxv_entry): Handle AT_FREEBSD_BSDFLAGS."
    },
    {
      "sha": "0d1bb7758045cecf39ab5c546910d59a3d232386",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 24,
      "deletions": 19,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebea76263935aba585f8f8b1d27b13737e231eec/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebea76263935aba585f8f8b1d27b13737e231eec/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=ebea76263935aba585f8f8b1d27b13737e231eec",
      "patch": "@@ -2058,29 +2058,36 @@ windows_add_all_dlls (void)\n \treturn;\n     }\n \n-#ifdef __x86_64__\n   char system_dir[__PMAX];\n   char syswow_dir[__PMAX];\n   size_t system_dir_len = 0;\n+  bool convert_syswow_dir = false;\n+#ifdef __x86_64__\n   if (wow64_process)\n+#endif\n     {\n-      UINT len = GetSystemDirectoryA (system_dir, sizeof (system_dir));\n-      /* Error check.  */\n-      gdb_assert (len != 0);\n-      /* Check that we have passed a large enough buffer.  */\n-      gdb_assert (len < sizeof (system_dir));\n+      /* This fails on 32bit Windows because it has no SysWOW64 directory,\n+\t and in this case a path conversion isn't necessary.  */\n+      UINT len = GetSystemWow64DirectoryA (syswow_dir, sizeof (syswow_dir));\n+      if (len > 0)\n+\t{\n+\t  /* Check that we have passed a large enough buffer.  */\n+\t  gdb_assert (len < sizeof (syswow_dir));\n+\n+\t  len = GetSystemDirectoryA (system_dir, sizeof (system_dir));\n+\t  /* Error check.  */\n+\t  gdb_assert (len != 0);\n+\t  /* Check that we have passed a large enough buffer.  */\n+\t  gdb_assert (len < sizeof (system_dir));\n \n-      len = GetSystemWow64DirectoryA (syswow_dir, sizeof (syswow_dir));\n-      /* Error check.  */\n-      gdb_assert (len != 0);\n-      /* Check that we have passed a large enough buffer.  */\n-      gdb_assert (len < sizeof (syswow_dir));\n+\t  strcat (system_dir, \"\\\\\");\n+\t  strcat (syswow_dir, \"\\\\\");\n+\t  system_dir_len = strlen (system_dir);\n+\n+\t  convert_syswow_dir = true;\n+\t}\n \n-      strcat (system_dir, \"\\\\\");\n-      strcat (syswow_dir, \"\\\\\");\n-      system_dir_len = strlen (system_dir);\n     }\n-#endif\n   for (i = 1; i < (int) (cb_needed / sizeof (HMODULE)); i++)\n     {\n       MODULEINFO mi;\n@@ -2103,20 +2110,18 @@ windows_add_all_dlls (void)\n #else\n       name = dll_name;\n #endif\n-#ifdef __x86_64__\n-      /* Convert the DLL path of WOW64 processes returned by\n+      /* Convert the DLL path of 32bit processes returned by\n \t GetModuleFileNameEx from the 64bit system directory to the\n \t 32bit syswow64 directory if necessary.  */\n       std::string syswow_dll_path;\n-      if (wow64_process\n+      if (convert_syswow_dir\n \t  && strncasecmp (name, system_dir, system_dir_len) == 0\n \t  && strchr (name + system_dir_len, '\\\\') == nullptr)\n \t{\n \t  syswow_dll_path = syswow_dir;\n \t  syswow_dll_path += name + system_dir_len;\n \t  name = syswow_dll_path.c_str();\n \t}\n-#endif\n \n       solib_end->next = windows_make_so (name, mi.lpBaseOfDll);\n       solib_end = solib_end->next;"
    }
  ]
}