{
  "sha": "01b1af321f804ef6dfd40d3054c8757f31096ea8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDFiMWFmMzIxZjgwNGVmNmRmZDQwZDMwNTRjODc1N2YzMTA5NmVhOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T18:48:26Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T19:57:25Z"
    },
    "message": "Allow TUI windows in Python\n\nThis patch adds support for writing new TUI windows in Python.\n\n2020-02-22  Tom Tromey  <tom@tromey.com>\n\n\t* NEWS: Add entry for gdb.register_window_type.\n\t* tui/tui-layout.h (window_factory): New typedef.\n\t(tui_register_window): Declare.\n\t* tui/tui-layout.c (saved_tui_windows): New global.\n\t(tui_apply_current_layout): Use it.\n\t(tui_register_window): New function.\n\t* python/python.c (do_start_initialization): Call\n\tgdbpy_initialize_tui.\n\t(python_GdbMethods): Add \"register_window_type\" function.\n\t* python/python-internal.h (gdbpy_register_tui_window)\n\t(gdbpy_initialize_tui): Declare.\n\t* python/py-tui.c: New file.\n\t* Makefile.in (SUBDIR_PYTHON_SRCS): Add py-tui.c.\n\ngdb/doc/ChangeLog\n2020-02-22  Tom Tromey  <tom@tromey.com>\n\n\t* python.texi (Python API): Add menu item.\n\t(TUI Windows In Python): New node.\n\ngdb/testsuite/ChangeLog\n2020-02-22  Tom Tromey  <tom@tromey.com>\n\n\t* gdb.python/tui-window.exp: New file.\n\t* gdb.python/tui-window.py: New file.\n\nChange-Id: I85fbfb923a1840450a00a7dce113a05d7f048baa",
    "tree": {
      "sha": "03c14bda00b71bb7322ff5d2bfc3e2355b37e932",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/03c14bda00b71bb7322ff5d2bfc3e2355b37e932"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/01b1af321f804ef6dfd40d3054c8757f31096ea8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/01b1af321f804ef6dfd40d3054c8757f31096ea8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/01b1af321f804ef6dfd40d3054c8757f31096ea8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/01b1af321f804ef6dfd40d3054c8757f31096ea8/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fc96d20b2c6d7ff24349ad015119438077d3f1e9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc96d20b2c6d7ff24349ad015119438077d3f1e9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fc96d20b2c6d7ff24349ad015119438077d3f1e9"
    }
  ],
  "stats": {
    "total": 787,
    "additions": 783,
    "deletions": 4
  },
  "files": [
    {
      "sha": "a83d3e76af385e7974821a47fc7b4c0d17faf930",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=01b1af321f804ef6dfd40d3054c8757f31096ea8",
      "patch": "@@ -1,3 +1,19 @@\n+2020-02-22  Tom Tromey  <tom@tromey.com>\n+\n+\t* NEWS: Add entry for gdb.register_window_type.\n+\t* tui/tui-layout.h (window_factory): New typedef.\n+\t(tui_register_window): Declare.\n+\t* tui/tui-layout.c (saved_tui_windows): New global.\n+\t(tui_apply_current_layout): Use it.\n+\t(tui_register_window): New function.\n+\t* python/python.c (do_start_initialization): Call\n+\tgdbpy_initialize_tui.\n+\t(python_GdbMethods): Add \"register_window_type\" function.\n+\t* python/python-internal.h (gdbpy_register_tui_window)\n+\t(gdbpy_initialize_tui): Declare.\n+\t* python/py-tui.c: New file.\n+\t* Makefile.in (SUBDIR_PYTHON_SRCS): Add py-tui.c.\n+\n 2020-02-22  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-io.c (do_tui_putc): Don't omit annotations."
    },
    {
      "sha": "f9606b8fc766c77c6006fd024783d7d7ca1fcb6c",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=01b1af321f804ef6dfd40d3054c8757f31096ea8",
      "patch": "@@ -405,6 +405,7 @@ SUBDIR_PYTHON_SRCS = \\\n \tpython/py-symbol.c \\\n \tpython/py-symtab.c \\\n \tpython/py-threadevent.c \\\n+\tpython/py-tui.c \\\n \tpython/py-type.c \\\n \tpython/py-unwind.c \\\n \tpython/py-utils.c \\"
    },
    {
      "sha": "e33d838dd186a6d7624ef580dd02b96fa1fd8f41",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=01b1af321f804ef6dfd40d3054c8757f31096ea8",
      "patch": "@@ -40,6 +40,11 @@ tui new-layout NAME WINDOW WEIGHT [WINDOW WEIGHT]...\n \n GNU/Linux/RISC-V (gdbserver)\triscv*-*-linux*\n \n+* Python API\n+\n+  ** gdb.register_window_type can be used to implement new TUI windows\n+     in Python.\n+\n *** Changes in GDB 9\n \n * 'thread-exited' event is now available in the annotations interface."
    },
    {
      "sha": "572ec3204c205ec1287bd306f749ab9b90b21e69",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=01b1af321f804ef6dfd40d3054c8757f31096ea8",
      "patch": "@@ -1,3 +1,8 @@\n+2020-02-22  Tom Tromey  <tom@tromey.com>\n+\n+\t* python.texi (Python API): Add menu item.\n+\t(TUI Windows In Python): New node.\n+\n 2020-02-22  Tom Tromey  <tom@tromey.com>\n \n \tPR tui/17850:"
    },
    {
      "sha": "0b8e8808fff052bf8ec3211698abb576f5fdce06",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 105,
      "deletions": 0,
      "changes": 105,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=01b1af321f804ef6dfd40d3054c8757f31096ea8",
      "patch": "@@ -163,6 +163,7 @@ optional arguments while skipping others.  Example:\n                                 using Python.\n * Lazy Strings In Python::      Python representation of lazy strings.\n * Architectures In Python::     Python representation of architectures.\n+* TUI Windows In Python::       Implementing new TUI windows.\n @end menu\n \n @node Basic Python\n@@ -5673,6 +5674,110 @@ instruction in bytes.\n @end table\n @end defun\n \n+@node TUI Windows In Python\n+@subsubsection Implementing new TUI windows\n+@cindex Python TUI Windows\n+\n+New TUI (@pxref{TUI}) windows can be implemented in Python.\n+\n+@findex gdb.register_window_type\n+@defun gdb.register_window_type (@var{name}, @var{factory})\n+Because TUI windows are created and destroyed depending on the layout\n+the user chooses, new window types are implemented by registering a\n+factory function with @value{GDBN}.\n+\n+@var{name} is the name of the new window.  It's an error to try to\n+replace one of the built-in windows, but other window types can be\n+replaced.\n+\n+@var{function} is a factory function that is called to create the TUI\n+window.  This is called with a single argument of type\n+@code{gdb.TuiWindow}, described below.  It should return an object\n+that implements the TUI window protocol, also described below.\n+@end defun\n+\n+As mentioned above, when a factory function is called, it is passed a\n+an object of type @code{gdb.TuiWindow}.  This object has these\n+methods and attributes:\n+\n+@defun TuiWindow.is_valid ()\n+This method returns @code{True} when this window is valid.  When the\n+user changes the TUI layout, windows no longer visible in the new\n+layout will be destroyed.  At this point, the @code{gdb.TuiWindow}\n+will no longer be valid, and methods (and attributes) other than\n+@code{is_valid} will throw an exception.\n+@end defun\n+\n+@defvar TuiWindow.width\n+This attribute holds the width of the window.  It is not writable.\n+@end defvar\n+\n+@defvar TuiWindow.height\n+This attribute holds the height of the window.  It is not writable.\n+@end defvar\n+\n+@defvar TuiWindow.title\n+This attribute holds the window's title, a string.  This is normally\n+displayed above the window.  This attribute can be modified.\n+@end defvar\n+\n+@defun TuiWindow.erase ()\n+Remove all the contents of the window.\n+@end defun\n+\n+@defun TuiWindow.write (@var{string})\n+Write @var{string} to the window.  @var{string} can contain ANSI\n+terminal escape styling sequences; @value{GDBN} will translate these\n+as appropriate for the terminal.\n+@end defun\n+\n+The factory function that you supply should return an object\n+conforming to the TUI window protocol.  These are the method that can\n+be called on this object, which is referred to below as the ``window\n+object''.  The methods documented below are optional; if the object\n+does not implement one of these methods, @value{GDBN} will not attempt\n+to call it.  Additional new methods may be added to the window\n+protocol in the future.  @value{GDBN} guarantees that they will begin\n+with a lower-case letter, so you can start implementation methods with\n+upper-case letters or underscore to avoid any future conflicts.\n+\n+@defun Window.close ()\n+When the TUI window is closed, the @code{gdb.TuiWindow} object will be\n+put into an invalid state.  At this time, @value{GDBN} will call\n+@code{close} method on the window object.\n+\n+After this method is called, @value{GDBN} will discard any references\n+it holds on this window object, and will no longer call methods on\n+this object.\n+@end defun\n+\n+@defun Window.render ()\n+In some situations, a TUI window can change size.  For example, this\n+can happen if the user resizes the terminal, or changes the layout.\n+When this happens, @value{GDBN} will call the @code{render} method on\n+the window object.\n+\n+If your window is intended to update in response to changes in the\n+inferior, you will probably also want to register event listeners and\n+send output to the @code{gdb.TuiWindow}.\n+@end defun\n+\n+@defun Window.hscroll (@var{num})\n+This is a request to scroll the window horizontally.  @var{num} is the\n+amount by which to scroll, with negative numbers meaning to scroll\n+right.  In the TUI model, it is the viewport that moves, not the\n+contents.  A positive argument should cause the viewport to move\n+right, and so the content should appear to move to the left.\n+@end defun\n+\n+@defun Window.vscroll (@var{num})\n+This is a request to scroll the window vertically.  @var{num} is the\n+amount by which to scroll, with negative numbers meaning to scroll\n+backward.  In the TUI model, it is the viewport that moves, not the\n+contents.  A positive argument should cause the viewport to move down,\n+and so the content should appear to move up.\n+@end defun\n+\n @node Python Auto-loading\n @subsection Python Auto-loading\n @cindex Python auto-loading"
    },
    {
      "sha": "4cb86ae75da4e309285dc4c4eeaa7de067e71d78",
      "filename": "gdb/python/py-tui.c",
      "status": "added",
      "additions": 510,
      "deletions": 0,
      "changes": 510,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/python/py-tui.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/python/py-tui.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-tui.c?ref=01b1af321f804ef6dfd40d3054c8757f31096ea8",
      "patch": "@@ -0,0 +1,510 @@\n+/* TUI windows implemented in Python\n+\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+\n+#include \"defs.h\"\n+#include \"arch-utils.h\"\n+#include \"python-internal.h\"\n+#include \"gdb_curses.h\"\n+\n+#ifdef TUI\n+\n+#include \"tui/tui-data.h\"\n+#include \"tui/tui-io.h\"\n+#include \"tui/tui-layout.h\"\n+#include \"tui/tui-wingeneral.h\"\n+#include \"tui/tui-winsource.h\"\n+\n+class tui_py_window;\n+\n+/* A PyObject representing a TUI window.  */\n+\n+struct gdbpy_tui_window\n+{\n+  PyObject_HEAD\n+\n+  /* The TUI window, or nullptr if the window has been deleted.  */\n+  tui_py_window *window;\n+};\n+\n+extern PyTypeObject gdbpy_tui_window_object_type\n+    CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"gdbpy_tui_window\");\n+\n+/* A TUI window written in Python.  */\n+\n+class tui_py_window : public tui_win_info\n+{\n+public:\n+\n+  tui_py_window (const char *name, gdbpy_ref<gdbpy_tui_window> wrapper)\n+    : m_name (name),\n+      m_wrapper (std::move (wrapper))\n+  {\n+    m_wrapper->window = this;\n+  }\n+\n+  ~tui_py_window ();\n+\n+  DISABLE_COPY_AND_ASSIGN (tui_py_window);\n+\n+  /* Set the \"user window\" to the indicated reference.  The user\n+     window is the object returned the by user-defined window\n+     constructor.  */\n+  void set_user_window (gdbpy_ref<> &&user_window)\n+  {\n+    m_window = std::move (user_window);\n+  }\n+\n+  const char *name () const override\n+  {\n+    return m_name.c_str ();\n+  }\n+\n+  void rerender () override;\n+  void do_scroll_vertical (int num_to_scroll) override;\n+  void do_scroll_horizontal (int num_to_scroll) override;\n+\n+  /* Erase and re-box the window.  */\n+  void erase ()\n+  {\n+    if (is_visible ())\n+      {\n+\twerase (handle.get ());\n+\tcheck_and_display_highlight_if_needed ();\n+\tcursor_x = 0;\n+\tcursor_y = 0;\n+      }\n+  }\n+\n+  /* Write STR to the window.  */\n+  void output (const char *str);\n+\n+  /* A helper function to compute the viewport width.  */\n+  int viewport_width () const\n+  {\n+    return std::max (0, width - 2);\n+  }\n+\n+  /* A helper function to compute the viewport height.  */\n+  int viewport_height () const\n+  {\n+    return std::max (0, height - 2);\n+  }\n+\n+private:\n+\n+  /* Location of the cursor.  */\n+  int cursor_x = 0;\n+  int cursor_y = 0;\n+\n+  /* The name of this window.  */\n+  std::string m_name;\n+\n+  /* The underlying Python window object.  */\n+  gdbpy_ref<> m_window;\n+\n+  /* The Python wrapper for this object.  */\n+  gdbpy_ref<gdbpy_tui_window> m_wrapper;\n+};\n+\n+tui_py_window::~tui_py_window ()\n+{\n+  gdbpy_enter enter_py (get_current_arch (), current_language);\n+\n+  if (PyObject_HasAttrString (m_window.get (), \"close\"))\n+    {\n+      gdbpy_ref<> result (PyObject_CallMethod (m_window.get (), \"close\",\n+\t\t\t\t\t       nullptr));\n+      if (result == nullptr)\n+\tgdbpy_print_stack ();\n+    }\n+\n+  /* Unlink.  */\n+  m_wrapper->window = nullptr;\n+  /* Explicitly free the Python references.  We have to do this\n+     manually because we need to hold the GIL while doing so.  */\n+  m_wrapper.reset (nullptr);\n+  m_window.reset (nullptr);\n+}\n+\n+void\n+tui_py_window::rerender ()\n+{\n+  gdbpy_enter enter_py (get_current_arch (), current_language);\n+\n+  if (PyObject_HasAttrString (m_window.get (), \"render\"))\n+    {\n+      gdbpy_ref<> result (PyObject_CallMethod (m_window.get (), \"render\",\n+\t\t\t\t\t       nullptr));\n+      if (result == nullptr)\n+\tgdbpy_print_stack ();\n+    }\n+}\n+\n+void\n+tui_py_window::do_scroll_horizontal (int num_to_scroll)\n+{\n+  gdbpy_enter enter_py (get_current_arch (), current_language);\n+\n+  if (PyObject_HasAttrString (m_window.get (), \"hscroll\"))\n+    {\n+      gdbpy_ref<> result (PyObject_CallMethod (m_window.get(), \"hscroll\",\n+\t\t\t\t\t       \"i\", num_to_scroll, nullptr));\n+      if (result == nullptr)\n+\tgdbpy_print_stack ();\n+    }\n+}\n+\n+void\n+tui_py_window::do_scroll_vertical (int num_to_scroll)\n+{\n+  gdbpy_enter enter_py (get_current_arch (), current_language);\n+\n+  if (PyObject_HasAttrString (m_window.get (), \"vscroll\"))\n+    {\n+      gdbpy_ref<> result (PyObject_CallMethod (m_window.get (), \"vscroll\",\n+\t\t\t\t\t       \"i\", num_to_scroll, nullptr));\n+      if (result == nullptr)\n+\tgdbpy_print_stack ();\n+    }\n+}\n+\n+void\n+tui_py_window::output (const char *text)\n+{\n+  int vwidth = viewport_width ();\n+\n+  while (cursor_y < viewport_height () && *text != '\\0')\n+    {\n+      wmove (handle.get (), cursor_y + 1, cursor_x + 1);\n+\n+      std::string line = tui_copy_source_line (&text, 0, 0,\n+\t\t\t\t\t       vwidth - cursor_x, 0);\n+      tui_puts (line.c_str (), handle.get ());\n+\n+      if (*text == '\\n')\n+\t{\n+\t  ++text;\n+\t  ++cursor_y;\n+\t  cursor_x = 0;\n+\t}\n+      else\n+\tcursor_x = getcurx (handle.get ()) - 1;\n+    }\n+\n+  wrefresh (handle.get ());\n+}\n+\n+\f\n+\n+/* A callable that is used to create a TUI window.  It wraps the\n+   user-supplied window constructor.  */\n+\n+class gdbpy_tui_window_maker\n+{\n+public:\n+\n+  explicit gdbpy_tui_window_maker (gdbpy_ref<> &&constr)\n+    : m_constr (std::move (constr))\n+  {\n+  }\n+\n+  ~gdbpy_tui_window_maker ();\n+\n+  gdbpy_tui_window_maker (gdbpy_tui_window_maker &&other)\n+    : m_constr (std::move (other.m_constr))\n+  {\n+  }\n+\n+  gdbpy_tui_window_maker (const gdbpy_tui_window_maker &other)\n+  {\n+    gdbpy_enter enter_py (get_current_arch (), current_language);\n+    m_constr = other.m_constr;\n+  }\n+\n+  gdbpy_tui_window_maker &operator= (gdbpy_tui_window_maker &&other)\n+  {\n+    m_constr = std::move (other.m_constr);\n+    return *this;\n+  }\n+\n+  gdbpy_tui_window_maker &operator= (const gdbpy_tui_window_maker &other)\n+  {\n+    gdbpy_enter enter_py (get_current_arch (), current_language);\n+    m_constr = other.m_constr;\n+    return *this;\n+  }\n+\n+  tui_win_info *operator() (const char *name);\n+\n+private:\n+\n+  /* A constructor that is called to make a TUI window.  */\n+  gdbpy_ref<> m_constr;\n+};\n+\n+gdbpy_tui_window_maker::~gdbpy_tui_window_maker ()\n+{\n+  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  m_constr.reset (nullptr);\n+}\n+\n+tui_win_info *\n+gdbpy_tui_window_maker::operator() (const char *win_name)\n+{\n+  gdbpy_enter enter_py (get_current_arch (), current_language);\n+\n+  gdbpy_ref<gdbpy_tui_window> wrapper\n+    (PyObject_New (gdbpy_tui_window, &gdbpy_tui_window_object_type));\n+  if (wrapper == nullptr)\n+    {\n+      gdbpy_print_stack ();\n+      return nullptr;\n+    }\n+\n+  std::unique_ptr<tui_py_window> window\n+    (new tui_py_window (win_name, wrapper));\n+\n+  gdbpy_ref<> user_window\n+    (PyObject_CallFunctionObjArgs (m_constr.get (),\n+\t\t\t\t   (PyObject *) wrapper.get (),\n+\t\t\t\t   nullptr));\n+  if (user_window == nullptr)\n+    {\n+      gdbpy_print_stack ();\n+      return nullptr;\n+    }\n+\n+  window->set_user_window (std::move (user_window));\n+  /* Window is now owned by the TUI.  */\n+  return window.release ();\n+}\n+\n+/* Implement \"gdb.register_window_type\".  */\n+\n+PyObject *\n+gdbpy_register_tui_window (PyObject *self, PyObject *args, PyObject *kw)\n+{\n+  static const char *keywords[] = { \"name\", \"constructor\", nullptr };\n+\n+  const char *name;\n+  PyObject *cons_obj;\n+\n+  if (!gdb_PyArg_ParseTupleAndKeywords (args, kw, \"sO\", keywords,\n+\t\t\t\t\t&name, &cons_obj))\n+    return nullptr;\n+\n+  try\n+    {\n+      gdbpy_tui_window_maker constr (gdbpy_ref<>::new_reference (cons_obj));\n+      tui_register_window (name, constr);\n+    }\n+  catch (const gdb_exception &except)\n+    {\n+      gdbpy_convert_exception (except);\n+      return nullptr;\n+    }\n+\n+  Py_RETURN_NONE;\n+}\n+\n+\f\n+\n+/* Require that \"Window\" be a valid window.  */\n+\n+#define REQUIRE_WINDOW(Window)\t\t\t\t\t\\\n+    do {\t\t\t\t\t\t\t\\\n+      if ((Window)->window == nullptr)\t\t\t\t\\\n+        return PyErr_Format (PyExc_RuntimeError,\t\t\\\n+                             _(\"TUI window is invalid.\"));\t\\\n+    } while (0)\n+\n+/* Python function which checks the validity of a TUI window\n+   object.  */\n+static PyObject *\n+gdbpy_tui_is_valid (PyObject *self, PyObject *args)\n+{\n+  gdbpy_tui_window *win = (gdbpy_tui_window *) self;\n+\n+  if (win->window != nullptr)\n+    Py_RETURN_TRUE;\n+  Py_RETURN_FALSE;\n+}\n+\n+/* Python function that erases the TUI window.  */\n+static PyObject *\n+gdbpy_tui_erase (PyObject *self, PyObject *args)\n+{\n+  gdbpy_tui_window *win = (gdbpy_tui_window *) self;\n+\n+  REQUIRE_WINDOW (win);\n+\n+  win->window->erase ();\n+\n+  Py_RETURN_NONE;\n+}\n+\n+/* Python function that writes some text to a TUI window.  */\n+static PyObject *\n+gdbpy_tui_write (PyObject *self, PyObject *args)\n+{\n+  gdbpy_tui_window *win = (gdbpy_tui_window *) self;\n+  const char *text;\n+\n+  if (!PyArg_ParseTuple (args, \"s\", &text))\n+    return nullptr;\n+\n+  REQUIRE_WINDOW (win);\n+\n+  win->window->output (text);\n+\n+  Py_RETURN_NONE;\n+}\n+\n+/* Return the width of the TUI window.  */\n+static PyObject *\n+gdbpy_tui_width (PyObject *self, void *closure)\n+{\n+  gdbpy_tui_window *win = (gdbpy_tui_window *) self;\n+  REQUIRE_WINDOW (win);\n+  return PyLong_FromLong (win->window->viewport_width ());\n+}\n+\n+/* Return the height of the TUI window.  */\n+static PyObject *\n+gdbpy_tui_height (PyObject *self, void *closure)\n+{\n+  gdbpy_tui_window *win = (gdbpy_tui_window *) self;\n+  REQUIRE_WINDOW (win);\n+  return PyLong_FromLong (win->window->viewport_height ());\n+}\n+\n+/* Return the title of the TUI window.  */\n+static PyObject *\n+gdbpy_tui_title (PyObject *self, void *closure)\n+{\n+  gdbpy_tui_window *win = (gdbpy_tui_window *) self;\n+  REQUIRE_WINDOW (win);\n+  return host_string_to_python_string (win->window->title.c_str ()).release ();\n+}\n+\n+/* Set the title of the TUI window.  */\n+static int\n+gdbpy_tui_set_title (PyObject *self, PyObject *newvalue, void *closure)\n+{\n+  gdbpy_tui_window *win = (gdbpy_tui_window *) self;\n+\n+  if (win->window == nullptr)\n+    {\n+      PyErr_Format (PyExc_RuntimeError, _(\"TUI window is invalid.\"));\n+      return -1;\n+    }\n+\n+  if (win->window == nullptr)\n+    {\n+      PyErr_Format (PyExc_TypeError, _(\"Cannot delete \\\"title\\\" attribute.\"));\n+      return -1;\n+    }\n+\n+  gdb::unique_xmalloc_ptr<char> value\n+    = python_string_to_host_string (newvalue);\n+  if (value == nullptr)\n+    return -1;\n+\n+  win->window->title = value.get ();\n+  return 0;\n+}\n+\n+static gdb_PyGetSetDef tui_object_getset[] =\n+{\n+  { \"width\", gdbpy_tui_width, NULL, \"Width of the window.\", NULL },\n+  { \"height\", gdbpy_tui_height, NULL, \"Height of the window.\", NULL },\n+  { \"title\", gdbpy_tui_title, gdbpy_tui_set_title, \"Title of the window.\",\n+    NULL },\n+  { NULL }  /* Sentinel */\n+};\n+\n+static PyMethodDef tui_object_methods[] =\n+{\n+  { \"is_valid\", gdbpy_tui_is_valid, METH_NOARGS,\n+    \"is_valid () -> Boolean\\n\\\n+Return true if this TUI window is valid, false if not.\" },\n+  { \"erase\", gdbpy_tui_erase, METH_NOARGS,\n+    \"Erase the TUI window.\" },\n+  { \"write\", (PyCFunction) gdbpy_tui_write, METH_VARARGS,\n+    \"Append a string to the TUI window.\" },\n+  { NULL } /* Sentinel.  */\n+};\n+\n+PyTypeObject gdbpy_tui_window_object_type =\n+{\n+  PyVarObject_HEAD_INIT (NULL, 0)\n+  \"gdb.TuiWindow\",\t\t  /*tp_name*/\n+  sizeof (gdbpy_tui_window),\t  /*tp_basicsize*/\n+  0,\t\t\t\t  /*tp_itemsize*/\n+  0,\t\t\t\t  /*tp_dealloc*/\n+  0,\t\t\t\t  /*tp_print*/\n+  0,\t\t\t\t  /*tp_getattr*/\n+  0,\t\t\t\t  /*tp_setattr*/\n+  0,\t\t\t\t  /*tp_compare*/\n+  0,\t\t\t\t  /*tp_repr*/\n+  0,\t\t\t\t  /*tp_as_number*/\n+  0,\t\t\t\t  /*tp_as_sequence*/\n+  0,\t\t\t\t  /*tp_as_mapping*/\n+  0,\t\t\t\t  /*tp_hash */\n+  0,\t\t\t\t  /*tp_call*/\n+  0,\t\t\t\t  /*tp_str*/\n+  0,\t\t\t\t  /*tp_getattro*/\n+  0,\t\t\t\t  /*tp_setattro */\n+  0,\t\t\t\t  /*tp_as_buffer*/\n+  Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,  /*tp_flags*/\n+  \"GDB TUI window object\",\t  /* tp_doc */\n+  0,\t\t\t\t  /* tp_traverse */\n+  0,\t\t\t\t  /* tp_clear */\n+  0,\t\t\t\t  /* tp_richcompare */\n+  0,\t\t\t\t  /* tp_weaklistoffset */\n+  0,\t\t\t\t  /* tp_iter */\n+  0,\t\t\t\t  /* tp_iternext */\n+  tui_object_methods,\t\t  /* tp_methods */\n+  0,\t\t\t\t  /* tp_members */\n+  tui_object_getset,\t\t  /* tp_getset */\n+  0,\t\t\t\t  /* tp_base */\n+  0,\t\t\t\t  /* tp_dict */\n+  0,\t\t\t\t  /* tp_descr_get */\n+  0,\t\t\t\t  /* tp_descr_set */\n+  0,\t\t\t\t  /* tp_dictoffset */\n+  0,\t\t\t\t  /* tp_init */\n+  0,\t\t\t\t  /* tp_alloc */\n+};\n+\n+#endif /* TUI */\n+\n+/* Initialize this module.  */\n+\n+int\n+gdbpy_initialize_tui ()\n+{\n+#ifdef TUI\n+  gdbpy_tui_window_object_type.tp_new = PyType_GenericNew;\n+  if (PyType_Ready (&gdbpy_tui_window_object_type) < 0)\n+    return -1;\n+#endif\t/* TUI */\n+\n+  return 0;\n+}"
    },
    {
      "sha": "bbb66bd0f5c145452bdbcba00aa0f28d540fe9db",
      "filename": "gdb/python/python-internal.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/python/python-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/python/python-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python-internal.h?ref=01b1af321f804ef6dfd40d3054c8757f31096ea8",
      "patch": "@@ -447,6 +447,8 @@ PyObject *gdbpy_parameter_value (enum var_types type, void *var);\n char *gdbpy_parse_command_name (const char *name,\n \t\t\t\tstruct cmd_list_element ***base_list,\n \t\t\t\tstruct cmd_list_element **start_list);\n+PyObject *gdbpy_register_tui_window (PyObject *self, PyObject *args,\n+\t\t\t\t     PyObject *kw);\n \n PyObject *symtab_and_line_to_sal_object (struct symtab_and_line sal);\n PyObject *symtab_to_symtab_object (struct symtab *symtab);\n@@ -543,6 +545,8 @@ int gdbpy_initialize_xmethods (void)\n   CPYCHECKER_NEGATIVE_RESULT_SETS_EXCEPTION;\n int gdbpy_initialize_unwind (void)\n   CPYCHECKER_NEGATIVE_RESULT_SETS_EXCEPTION;\n+int gdbpy_initialize_tui ()\n+  CPYCHECKER_NEGATIVE_RESULT_SETS_EXCEPTION;\n \n /* A wrapper for PyErr_Fetch that handles reference counting for the\n    caller.  */"
    },
    {
      "sha": "6e243c1a07bcebf9b058c0daca671e472912a989",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=01b1af321f804ef6dfd40d3054c8757f31096ea8",
      "patch": "@@ -1769,7 +1769,8 @@ do_start_initialization ()\n       || gdbpy_initialize_event () < 0\n       || gdbpy_initialize_arch () < 0\n       || gdbpy_initialize_xmethods () < 0\n-      || gdbpy_initialize_unwind () < 0)\n+      || gdbpy_initialize_unwind () < 0\n+      || gdbpy_initialize_tui () < 0)\n     return false;\n \n #define GDB_PY_DEFINE_EVENT_TYPE(name, py_name, doc, base)\t\\\n@@ -2122,6 +2123,13 @@ or None if not set.\" },\n     \"convenience_variable (NAME, VALUE) -> None.\\n\\\n Set the value of the convenience variable $NAME.\" },\n \n+#ifdef TUI\n+  { \"register_window_type\", (PyCFunction) gdbpy_register_tui_window,\n+    METH_VARARGS | METH_KEYWORDS,\n+    \"register_window_type (NAME, CONSTRUCSTOR) -> None\\n\\\n+Register a TUI window constructor.\" },\n+#endif\t/* TUI */\n+\n   {NULL, NULL, 0, NULL}\n };\n "
    },
    {
      "sha": "6bc24e29e48b1434bb829fde3f7630184b68fd90",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=01b1af321f804ef6dfd40d3054c8757f31096ea8",
      "patch": "@@ -1,3 +1,8 @@\n+2020-02-22  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdb.python/tui-window.exp: New file.\n+\t* gdb.python/tui-window.py: New file.\n+\n 2020-02-22  Tom Tromey  <tom@tromey.com>\n \n \tPR tui/17850:"
    },
    {
      "sha": "1a4feebe22bf9ce672bbab41311ef28324f44cee",
      "filename": "gdb/testsuite/gdb.python/tui-window.exp",
      "status": "added",
      "additions": 51,
      "deletions": 0,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/testsuite/gdb.python/tui-window.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/testsuite/gdb.python/tui-window.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/tui-window.exp?ref=01b1af321f804ef6dfd40d3054c8757f31096ea8",
      "patch": "@@ -0,0 +1,51 @@\n+# Copyright (C) 2020 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test a TUI window implemented in Python.\n+\n+load_lib gdb-python.exp\n+load_lib tuiterm.exp\n+\n+# This test doesn't care about the inferior.\n+standard_testfile py-arch.c\n+\n+if {[build_executable \"failed to prepare\" ${testfile} ${srcfile}] == -1} {\n+    return -1\n+}\n+\n+Term::clean_restart 24 80 $testfile\n+\n+# Skip all tests if Python scripting is not enabled.\n+if { [skip_python_tests] } { continue }\n+\n+set remote_python_file [gdb_remote_download host \\\n+\t\t\t    ${srcdir}/${subdir}/${testfile}.py]\n+gdb_test_no_output \"source ${remote_python_file}\" \\\n+    \"source ${testfile}.py\"\n+\n+gdb_test_no_output \"tui new-layout test test 1 status 0 cmd 1\"\n+\n+if {![Term::enter_tui]} {\n+    unsupported \"TUI not supported\"\n+}\n+\n+Term::command \"layout test\"\n+Term::check_contents \"test title\" \\\n+    \"This Is The Title\"\n+Term::check_contents \"Window display\" \"Test: 0\"\n+\n+Term::resize 51 51\n+# Remember that a resize request actually does two resizes...\n+Term::check_contents \"Window was updated\" \"Test: 2\""
    },
    {
      "sha": "4deb585f13855eff23400d76bd41f828f1125dd9",
      "filename": "gdb/testsuite/gdb.python/tui-window.py",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/testsuite/gdb.python/tui-window.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/testsuite/gdb.python/tui-window.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/tui-window.py?ref=01b1af321f804ef6dfd40d3054c8757f31096ea8",
      "patch": "@@ -0,0 +1,37 @@\n+# Copyright (C) 2020 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# A TUI window implemented in Python.\n+\n+import gdb\n+\n+the_window = None\n+\n+class TestWindow:\n+    def __init__(self, win):\n+        global the_window\n+        the_window = win\n+        self.count = 0\n+        self.win = win\n+        win.title = \"This Is The Title\"\n+\n+    def render(self):\n+        self.win.erase()\n+        w = self.win.width\n+        h = self.win.height\n+        self.win.write(\"Test: \" + str(self.count) + \" \" + str(w) + \"x\" + str(h))\n+        self.count = self.count + 1\n+\n+gdb.register_window_type(\"test\", TestWindow)"
    },
    {
      "sha": "66c74494d1716d2bed16fec18c839bc9fd685809",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 25,
      "deletions": 3,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=01b1af321f804ef6dfd40d3054c8757f31096ea8",
      "patch": "@@ -65,6 +65,11 @@ static tui_layout_split *asm_regs_layout;\n /* See tui-data.h.  */\n std::vector<tui_win_info *> tui_windows;\n \n+/* When applying a layout, this is the list of all windows that were\n+   in the previous layout.  This is used to re-use windows when\n+   changing a layout.  */\n+static std::vector<tui_win_info *> saved_tui_windows;\n+\n /* See tui-layout.h.  */\n \n void\n@@ -75,10 +80,10 @@ tui_apply_current_layout ()\n \n   extract_display_start_addr (&gdbarch, &addr);\n \n-  std::vector<tui_win_info *> saved_windows = std::move (tui_windows);\n+  saved_tui_windows = std::move (tui_windows);\n   tui_windows.clear ();\n \n-  for (tui_win_info *win_info : saved_windows)\n+  for (tui_win_info *win_info : saved_tui_windows)\n     win_info->make_visible (false);\n \n   applied_layout->apply (0, 0, tui_term_width (), tui_term_height ());\n@@ -94,7 +99,7 @@ tui_apply_current_layout ()\n \n   /* Now delete any window that was not re-applied.  */\n   tui_win_info *focus = tui_win_with_focus ();\n-  for (tui_win_info *win_info : saved_windows)\n+  for (tui_win_info *win_info : saved_tui_windows)\n     {\n       if (!win_info->is_visible ())\n \t{\n@@ -107,6 +112,8 @@ tui_apply_current_layout ()\n   if (gdbarch == nullptr && TUI_DISASM_WIN != nullptr)\n     tui_get_begin_asm_address (&gdbarch, &addr);\n   tui_update_source_windows_with_addr (gdbarch, addr);\n+\n+  saved_tui_windows.clear ();\n }\n \n /* See tui-layout.  */\n@@ -395,6 +402,21 @@ initialize_known_windows ()\n \n /* See tui-layout.h.  */\n \n+void\n+tui_register_window (const char *name, window_factory &&factory)\n+{\n+  std::string name_copy = name;\n+\n+  if (name_copy == \"src\" || name_copy == \"cmd\" || name_copy == \"regs\"\n+      || name_copy == \"asm\" || name_copy == \"status\")\n+    error (_(\"Window type \\\"%s\\\" is built-in\"), name);\n+\n+  known_window_types->emplace (std::move (name_copy),\n+\t\t\t       std::move (factory));\n+}\n+\n+/* See tui-layout.h.  */\n+\n std::unique_ptr<tui_layout_base>\n tui_layout_window::clone () const\n {"
    },
    {
      "sha": "90618377e177b731125abe26ec541f7e16af0b96",
      "filename": "gdb/tui/tui-layout.h",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/tui/tui-layout.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/01b1af321f804ef6dfd40d3054c8757f31096ea8/gdb/tui/tui-layout.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.h?ref=01b1af321f804ef6dfd40d3054c8757f31096ea8",
      "patch": "@@ -249,4 +249,14 @@ extern void tui_apply_current_layout ();\n extern void tui_adjust_window_height (struct tui_win_info *win,\n \t\t\t\t      int new_height);\n \n+/* The type of a function that is used to create a TUI window.  */\n+\n+typedef std::function<tui_gen_win_info * (const char *name)> window_factory;\n+\n+/* Register a new TUI window type.  NAME is the name of the window\n+   type.  FACTORY is a function that can be called to instantiate the\n+   window.  */\n+\n+extern void tui_register_window (const char *name, window_factory &&factory);\n+\n #endif /* TUI_TUI_LAYOUT_H */"
    }
  ]
}