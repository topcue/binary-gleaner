{
  "sha": "55c10aca2e93cc7a4301aa1635ef9d6d73a804b1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTVjMTBhY2EyZTkzY2M3YTQzMDFhYTE2MzVlZjlkNmQ3M2E4MDRiMQ==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-03-18T14:26:00Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-03-18T14:26:00Z"
    },
    "message": "Improve/fix the TUI's current source line highlight\n\nWith styling enabled, I think the way we display the TUI's\nhighlighted/current line is very ugly and distracting.  The problem in\nmy view is that we reverse foreground/background in colored text as\nwell, leading to rainbow of background colors.\n\nThis patch changes that to something that I find much more sensible --\nonly reverse the default foreground/background colors, leave styled\ntext colors alone.  If the foreground color is not the default\n(because the text was styled), leave the foreground color as is.  If\ne.g., the terminal is fg=BLACK, and bg=WHITE, and the style wants to\nprint text in RED, reverse the background color (print in BLACK), but\nstill print the text in RED.\n\nNote: The new ui_file_style::set_fg method isn't called set_foreground\ninstead, because set_foreground is a macro in /usr/lib/term.h (ncurses).\n\ngdb/ChangeLog:\n2019-03-18  Pedro Alves  <palves@redhat.com>\n\n\t* tui/tui-io.c (reverse_mode_p, reverse_save_bg, reverse_save_fg):\n\tNew globals.\n\t(apply_style): New, factored out from ...\n\t(apply_ansi_escape): ... this.  Handle reverse video mode.\n\t(tui_set_reverse_mode): New function.\n\t* tui/tui-io.h (tui_set_reverse_mode): New declaration.\n\t* tui/tui-winsource.c (tui_show_source_line): Use\n\ttui_set_reverse_mode instead of setting A_STANDOUT.\n\t* ui-style.h (struct ui_file_style) <set_reverse, set_fg, set_bg>:\n\tNew setter methods.",
    "tree": {
      "sha": "f688304ed81cfb3aa05ef6735c7d89cf046b1177",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f688304ed81cfb3aa05ef6735c7d89cf046b1177"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/55c10aca2e93cc7a4301aa1635ef9d6d73a804b1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/55c10aca2e93cc7a4301aa1635ef9d6d73a804b1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/55c10aca2e93cc7a4301aa1635ef9d6d73a804b1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/55c10aca2e93cc7a4301aa1635ef9d6d73a804b1/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "647bb750c298bbee618aa4448a30dcf9adf23602",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/647bb750c298bbee618aa4448a30dcf9adf23602",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/647bb750c298bbee618aa4448a30dcf9adf23602"
    }
  ],
  "stats": {
    "total": 137,
    "additions": 122,
    "deletions": 15
  },
  "files": [
    {
      "sha": "d23819dd2091b3c3d25211114dddbc03ee2b73ad",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55c10aca2e93cc7a4301aa1635ef9d6d73a804b1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55c10aca2e93cc7a4301aa1635ef9d6d73a804b1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=55c10aca2e93cc7a4301aa1635ef9d6d73a804b1",
      "patch": "@@ -1,3 +1,16 @@\n+2019-03-18  Pedro Alves  <palves@redhat.com>\n+\n+\t* tui/tui-io.c (reverse_mode_p, reverse_save_bg, reverse_save_fg):\n+\tNew globals.\n+\t(apply_style): New, factored out from ...\n+\t(apply_ansi_escape): ... this.  Handle reverse video mode.\n+\t(tui_set_reverse_mode): New function.\n+\t* tui/tui-io.h (tui_set_reverse_mode): New declaration.\n+\t* tui/tui-winsource.c (tui_show_source_line): Use\n+\ttui_set_reverse_mode instead of setting A_STANDOUT.\n+\t* ui-style.h (struct ui_file_style) <set_reverse, set_fg, set_bg>:\n+\tNew setter methods.\n+\n 2019-03-18  Hannes Domani  <ssbssa@yahoo.de>\n \n \t* tui/tui-source.c (copy_source_line): Fix handling of 'column'."
    },
    {
      "sha": "b9087737fe23464df5c439cd95c4713448507e65",
      "filename": "gdb/tui/tui-io.c",
      "status": "modified",
      "additions": 86,
      "deletions": 13,
      "changes": 99,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55c10aca2e93cc7a4301aa1635ef9d6d73a804b1/gdb/tui/tui-io.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55c10aca2e93cc7a4301aa1635ef9d6d73a804b1/gdb/tui/tui-io.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-io.c?ref=55c10aca2e93cc7a4301aa1635ef9d6d73a804b1",
      "patch": "@@ -274,6 +274,15 @@ static int last_color_pair = -1;\n \n static ui_file_style last_style;\n \n+/* If true, we're highlighting the current source line in reverse\n+   video mode.  */\n+static bool reverse_mode_p = false;\n+\n+/* The background/foreground colors before we entered reverse\n+   mode.  */\n+static ui_file_style::color reverse_save_bg (ui_file_style::NONE);\n+static ui_file_style::color reverse_save_fg (ui_file_style::NONE);\n+\n /* Given two colors, return their color pair index; making a new one\n    if necessary.  */\n \n@@ -298,21 +307,11 @@ get_color_pair (int fg, int bg)\n   return it->second;\n }\n \n-/* Apply an ANSI escape sequence from BUF to W.  BUF must start with\n-   the ESC character.  If BUF does not start with an ANSI escape,\n-   return 0.  Otherwise, apply the sequence if it is recognized, or\n-   simply ignore it if not.  In this case, the number of bytes read\n-   from BUF is returned.  */\n+/* Apply STYLE to W.  */\n \n-static size_t\n-apply_ansi_escape (WINDOW *w, const char *buf)\n+static void\n+apply_style (WINDOW *w, ui_file_style style)\n {\n-  ui_file_style style = last_style;\n-  size_t n_read;\n-\n-  if (!style.parse (buf, &n_read))\n-    return n_read;\n-\n   /* Reset.  */\n   wattron (w, A_NORMAL);\n   wattroff (w, A_BOLD);\n@@ -368,9 +367,83 @@ apply_ansi_escape (WINDOW *w, const char *buf)\n     wattron (w, A_REVERSE);\n \n   last_style = style;\n+}\n+\n+/* Apply an ANSI escape sequence from BUF to W.  BUF must start with\n+   the ESC character.  If BUF does not start with an ANSI escape,\n+   return 0.  Otherwise, apply the sequence if it is recognized, or\n+   simply ignore it if not.  In this case, the number of bytes read\n+   from BUF is returned.  */\n+\n+static size_t\n+apply_ansi_escape (WINDOW *w, const char *buf)\n+{\n+  ui_file_style style = last_style;\n+  size_t n_read;\n+\n+  if (!style.parse (buf, &n_read))\n+    return n_read;\n+\n+  if (reverse_mode_p)\n+    {\n+      /* We want to reverse _only_ the default foreground/background\n+\t colors.  If the foreground color is not the default (because\n+\t the text was styled), we want to leave it as is.  If e.g.,\n+\t the terminal is fg=BLACK, and bg=WHITE, and the style wants\n+\t to print text in RED, we want to reverse the background color\n+\t (print in BLACK), but still print the text in RED.  To do\n+\t that, we enable the A_REVERSE attribute, and re-reverse the\n+\t parsed-style's fb/bg colors.\n+\n+\t Notes on the approach:\n+\n+\t  - there's no portable way to know which colors the default\n+\t    fb/bg colors map to.\n+\n+\t  - this approach does the right thing even if you change the\n+\t    terminal colors while GDB is running -- the reversed\n+\t    colors automatically adapt.\n+      */\n+      if (!style.is_default ())\n+\t{\n+\t  ui_file_style::color bg = style.get_background ();\n+\t  ui_file_style::color fg = style.get_foreground ();\n+\t  style.set_fg (bg);\n+\t  style.set_bg (fg);\n+\t}\n+\n+      /* Enable A_REVERSE.  */\n+      style.set_reverse (true);\n+    }\n+\n+  apply_style (w, style);\n   return n_read;\n }\n \n+/* See tui.io.h.  */\n+\n+void\n+tui_set_reverse_mode (WINDOW *w, bool reverse)\n+{\n+  ui_file_style style = last_style;\n+\n+  reverse_mode_p = reverse;\n+  style.set_reverse (reverse);\n+\n+  if (reverse)\n+    {\n+      reverse_save_bg = style.get_background ();\n+      reverse_save_fg = style.get_foreground ();\n+    }\n+  else\n+    {\n+      style.set_bg (reverse_save_bg);\n+      style.set_fg (reverse_save_fg);\n+    }\n+\n+  apply_style (w, style);\n+}\n+\n /* Print LENGTH characters from the buffer pointed to by BUF to the\n    curses command window.  The output is buffered.  It is up to the\n    caller to refresh the screen if necessary.  */"
    },
    {
      "sha": "34a24da292377d7df087d923527f0d46ae34cb3f",
      "filename": "gdb/tui/tui-io.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55c10aca2e93cc7a4301aa1635ef9d6d73a804b1/gdb/tui/tui-io.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55c10aca2e93cc7a4301aa1635ef9d6d73a804b1/gdb/tui/tui-io.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-io.h?ref=55c10aca2e93cc7a4301aa1635ef9d6d73a804b1",
      "patch": "@@ -48,6 +48,9 @@ extern void tui_redisplay_readline (void);\n /* Expand TABs into spaces.  */\n extern char *tui_expand_tabs (const char *, int);\n \n+/* Enter/leave reverse video mode.  */\n+extern void tui_set_reverse_mode (WINDOW *w, bool reverse);\n+\n extern struct ui_out *tui_out;\n extern cli_ui_out *tui_old_uiout;\n "
    },
    {
      "sha": "e31a0164cf267729a23434289f7acc49b0940206",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55c10aca2e93cc7a4301aa1635ef9d6d73a804b1/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55c10aca2e93cc7a4301aa1635ef9d6d73a804b1/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=55c10aca2e93cc7a4301aa1635ef9d6d73a804b1",
      "patch": "@@ -277,13 +277,13 @@ tui_show_source_line (struct tui_win_info *win_info, int lineno)\n \n   line = win_info->generic.content[lineno - 1];\n   if (line->which_element.source.is_exec_point)\n-    wattron (win_info->generic.handle, A_STANDOUT);\n+    tui_set_reverse_mode (win_info->generic.handle, true);\n \n   wmove (win_info->generic.handle, lineno, 1);\n   tui_puts (line->which_element.source.line,\n \t    win_info->generic.handle);\n   if (line->which_element.source.is_exec_point)\n-    wattroff (win_info->generic.handle, A_STANDOUT);\n+    tui_set_reverse_mode (win_info->generic.handle, false);\n \n   /* Clear to end of line but stop before the border.  */\n   x = getcurx (win_info->generic.handle);"
    },
    {
      "sha": "2a87fbe8012d62393a420dc8a90f79ea3f6a1043",
      "filename": "gdb/ui-style.h",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/55c10aca2e93cc7a4301aa1635ef9d6d73a804b1/gdb/ui-style.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/55c10aca2e93cc7a4301aa1635ef9d6d73a804b1/gdb/ui-style.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ui-style.h?ref=55c10aca2e93cc7a4301aa1635ef9d6d73a804b1",
      "patch": "@@ -180,18 +180,36 @@ struct ui_file_style\n     return m_reverse;\n   }\n \n+  /* Set/clear the reverse display flag.  */\n+  void set_reverse (bool reverse)\n+  {\n+    m_reverse = reverse;\n+  }\n+\n   /* Return the foreground color of this style.  */\n   const color &get_foreground () const\n   {\n     return m_foreground;\n   }\n \n+  /* Set the foreground color of this style.  */\n+  void set_fg (color c)\n+  {\n+    m_foreground = c;\n+  }\n+\n   /* Return the background color of this style.  */\n   const color &get_background () const\n   {\n     return m_background;\n   }\n \n+  /* Set the background color of this style.  */\n+  void set_bg (color c)\n+  {\n+    m_background = c;\n+  }\n+\n   /* Return the intensity of this style.  */\n   intensity get_intensity () const\n   {"
    }
  ]
}