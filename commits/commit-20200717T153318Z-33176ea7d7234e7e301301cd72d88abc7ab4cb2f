{
  "sha": "33176ea7d7234e7e301301cd72d88abc7ab4cb2f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzMxNzZlYTdkNzIzNGU3ZTMwMTMwMWNkNzJkODhhYmM3YWI0Y2IyZg==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-07-17T15:33:18Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-07-17T15:33:18Z"
    },
    "message": "[gdb/testsuite] Add gdb.base/valgrind-infcall-2.exp\n\nIn commit ee3c5f8968 \"Fix GDB crash when registers cannot be modified\", we\nfix a GDB crash:\n...\n$ valgrind /usr/bin/sleep 10000\n==31595== Memcheck, a memory error detector\n==31595== Command: /usr/bin/sleep 10000\n==31595==\n$ gdb /usr/bin/sleep\n(gdb) target remote | vgdb --pid=31595\nRemote debugging using | vgdb --pid=31595\n  ...\n$hex in __GI___nanosleep () at nanosleep.c:27\n27\t  return SYSCALL_CANCEL (nanosleep, requested_time, remaining);\n(gdb) p printf (\"bla\")\nterminate called after throwing an instance of 'gdb_exception_error'\nAborted (core dumped)\n...\n\nThis patch adds a test-case for it.\n\nUnfortunately, I was not able to trigger the error condition using a regular\nvgdb_start, so I've added a parameter active_at_startup, and when set to 0\nthis causes valgrind to be started without --vgdb-error=0.\n\nTested on x86_64-linux.\n\nTested with the commit mentioned above reverted, resulting in:\n...\n(gdb) p printf (\"bla\")^M\nterminate called after throwing an instance of 'gdb_exception_error'^M\nERROR: GDB process no longer exists\nGDB process exited with wait status 6152 exp10 0 0 CHILDKILLED SIGABRT SIGABRT\nUNRESOLVED: gdb.base/valgrind-infcall-2.exp: do printf\n...\n\ngdb/testsuite/ChangeLog:\n\n2020-07-17  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.base/valgrind-infcall-2.c: New test.\n\t* gdb.base/valgrind-infcall-2.exp: New file.\n\t* lib/valgrind.exp (vgdb_start): Add and handle active_at_startup.",
    "tree": {
      "sha": "9547e25a4c170d3d3b128c7e57ed5dc9f72ca0da",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9547e25a4c170d3d3b128c7e57ed5dc9f72ca0da"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/33176ea7d7234e7e301301cd72d88abc7ab4cb2f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/33176ea7d7234e7e301301cd72d88abc7ab4cb2f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/33176ea7d7234e7e301301cd72d88abc7ab4cb2f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/33176ea7d7234e7e301301cd72d88abc7ab4cb2f/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f80c8ec423f006eff316d3df633f95439d7dbc7a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f80c8ec423f006eff316d3df633f95439d7dbc7a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f80c8ec423f006eff316d3df633f95439d7dbc7a"
    }
  ],
  "stats": {
    "total": 144,
    "additions": 131,
    "deletions": 13
  },
  "files": [
    {
      "sha": "010be9697948ae33125ca10c098dffac55d1e48c",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/33176ea7d7234e7e301301cd72d88abc7ab4cb2f/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/33176ea7d7234e7e301301cd72d88abc7ab4cb2f/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=33176ea7d7234e7e301301cd72d88abc7ab4cb2f",
      "patch": "@@ -1,3 +1,9 @@\n+2020-07-17  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.base/valgrind-infcall-2.c: New test.\n+\t* gdb.base/valgrind-infcall-2.exp: New file.\n+\t* lib/valgrind.exp (vgdb_start): Add and handle active_at_startup.\n+\n 2020-07-17  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.dlang/circular.c (found): Use found_label as label name."
    },
    {
      "sha": "bf2f8cd1c42a623600ff8dd025218d7d2c8b0ef4",
      "filename": "gdb/testsuite/gdb.base/valgrind-infcall-2.c",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/33176ea7d7234e7e301301cd72d88abc7ab4cb2f/gdb/testsuite/gdb.base/valgrind-infcall-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/33176ea7d7234e7e301301cd72d88abc7ab4cb2f/gdb/testsuite/gdb.base/valgrind-infcall-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/valgrind-infcall-2.c?ref=33176ea7d7234e7e301301cd72d88abc7ab4cb2f",
      "patch": "@@ -0,0 +1,25 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <unistd.h>\n+\n+int\n+main (void)\n+{\n+  sleep (60);\n+  return 0;\n+}"
    },
    {
      "sha": "a3983f7564beb25d58255cc627ca17b55a14f035",
      "filename": "gdb/testsuite/gdb.base/valgrind-infcall-2.exp",
      "status": "added",
      "additions": 75,
      "deletions": 0,
      "changes": 75,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/33176ea7d7234e7e301301cd72d88abc7ab4cb2f/gdb/testsuite/gdb.base/valgrind-infcall-2.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/33176ea7d7234e7e301301cd72d88abc7ab4cb2f/gdb/testsuite/gdb.base/valgrind-infcall-2.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/valgrind-infcall-2.exp?ref=33176ea7d7234e7e301301cd72d88abc7ab4cb2f",
      "patch": "@@ -0,0 +1,75 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This test-case tests the scenario for the crash fixed by commit ee3c5f8968\n+# \"Fix GDB crash when registers cannot be modified\":\n+# $ valgrind /usr/bin/sleep 10000\n+# ==31595== Memcheck, a memory error detector\n+# ==31595== Command: /usr/bin/sleep 10000\n+# ==31595==\n+# $ gdb /usr/bin/sleep\n+# (gdb) target remote | vgdb --pid=31595\n+# Remote debugging using | vgdb --pid=31595\n+#   ...\n+# $hex in __GI___nanosleep () at nanosleep.c:27\n+# 27\t  return SYSCALL_CANCEL (nanosleep, requested_time, remaining);\n+# (gdb) p printf (\"bla\")\n+# terminate called after throwing an instance of 'gdb_exception_error'\n+# Aborted (core dumped)\n+\n+load_lib valgrind.exp\n+\n+if [is_remote target] {\n+    # The test always runs locally.\n+    return 0\n+}\n+\n+standard_testfile .c\n+if {[build_executable $testfile.exp $testfile $srcfile {debug}] == -1} {\n+    return -1\n+}\n+\n+set active_at_startup 0\n+if { [vgdb_start $active_at_startup] == -1 } {\n+    return -1\n+}\n+\n+# Determine whether we're at nanosleep.\n+gdb_test_multiple \"bt 1\" \"do printf\" {\n+    -re -wrap \"nanosleep.*\" {\n+\t# If gdb doesn't crash, we get something like:\n+\t# (gdb) p printf (\"bla\")\n+\t# Could not write register \"rdi\"; remote failure reply 'E.\n+\t# ERROR changing register rdi regno 5\n+\t# gdb commands changing registers (pc, sp, ...) (e.g. 'jump',\n+\t# set pc, calling from gdb a function in the debugged process, ...)\n+\t# can only be accepted if the thread is VgTs_Runnable or VgTs_Yielding\n+\t# state\n+\t# Thread status is VgTs_WaitSys\n+\t# '\n+\t# (gdb)\n+\tgdb_test \"p printf (\\\"bla\\\")\" \\\n+\t    \"can only be accepted if the thread is .*\" \\\n+\t    $gdb_test_name\n+    }\n+    -re -wrap \"\" {\n+\t# For some reason the error condition does not trigger if we're not\n+\t# at nanosleep at the point that we're connecting to vgdb.  See also\n+\t# comment at \"exec sleep 1\" in vgdb_start.\n+\tunsupported $gdb_test_name\n+    }\n+}\n+\n+vgdb_stop"
    },
    {
      "sha": "7bbcb210536bfed5abfefe145c5095a0d9198cd9",
      "filename": "gdb/testsuite/lib/valgrind.exp",
      "status": "modified",
      "additions": 25,
      "deletions": 13,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/33176ea7d7234e7e301301cd72d88abc7ab4cb2f/gdb/testsuite/lib/valgrind.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/33176ea7d7234e7e301301cd72d88abc7ab4cb2f/gdb/testsuite/lib/valgrind.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/valgrind.exp?ref=33176ea7d7234e7e301301cd72d88abc7ab4cb2f",
      "patch": "@@ -19,12 +19,19 @@\n # Start a vgdb server, and connect gdb to it.  Return 0 on success, and -1 on\n # error.\n #\n-proc vgdb_start { } {\n+proc vgdb_start { {active_at_startup 1} } {\n     global binfile use_gdb_stub board testfile\n     global valgrind_spawn_id gdb_spawn_id\n+    global decimal\n \n     set test \"spawn valgrind\"\n-    set cmd \"valgrind --vgdb-error=0 $binfile\"\n+    set cmd_list [list]\n+    lappend cmd_list \"valgrind\"\n+    if { $active_at_startup } {\n+\tlappend cmd_list \"--vgdb-error=0\"\n+    }\n+    lappend cmd_list $binfile\n+    set cmd [join $cmd_list]\n     set res [remote_spawn host $cmd]\n     if { $res < 0 || $res == \"\" } {\n \tverbose -log \"Spawning $cmd failed.\"\n@@ -42,7 +49,8 @@ proc vgdb_start { } {\n     set test \"valgrind started\"\n     # The trailing '.' differs for different memcheck versions.\n     gdb_test_multiple \"\" $test {\n-\t-re \"Memcheck, a memory error detector\\\\.?\\r\\n\" {\n+\t-re \"==($decimal)== Memcheck, a memory error detector\\\\.?\\r\\n\" {\n+\t    set vgdbpid $expect_out(1,string)\n \t    pass $test\n \t}\n \t-re \"valgrind: failed to start tool 'memcheck' for platform '.*': No such file or directory\" {\n@@ -66,14 +74,6 @@ proc vgdb_start { } {\n \t}\n     }\n \n-    set test \"vgdb prompt\"\n-    gdb_test_multiple \"\" $test {\n-\t-re \"  (target remote | \\[^\\r\\n\\]*/vgdb \\[^\\r\\n\\]*)\\r\\n\" {\n-\t    set vgdbcmd $expect_out(1,string)\n-\t    pass $test\n-\t}\n-    }\n-\n     # Do not kill valgrind.\n     set valgrind_spawn_id [board_info host fileid]\n     unset gdb_spawn_id\n@@ -87,10 +87,22 @@ proc vgdb_start { } {\n     # gdbserver and connect to it.\n     gdb_test \"disconnect\" \".*\"\n \n-    gdb_test \"$vgdbcmd\" \" in \\\\.?_start .*\" \"target remote for vgdb\"\n+    set vgdbcmd \"target remote | vgdb --pid=$vgdbpid\"\n+    if { $active_at_startup } {\n+\tgdb_test \"$vgdbcmd\" \" in \\\\.?_start .*\" \"target remote for vgdb\"\n+    } else {\n+\t# Let $binfile run a bit before attaching.  This is a bit of a hack,\n+\t# in that it lets test-case valgrind-infcall-2.exp run to the point of\n+\t# nanosleep, which seems to be required to trigger the error condition.\n+\t# So, without this, we hit\n+\t# \"UNSUPPORTED: gdb.base/valgrind-infcall-2.exp: do printf\".\n+\texec sleep 1\n \n-    gdb_test \"monitor v.set gdb_output\" \"valgrind output will go to gdb.*\"\n+\t# Connect to vgdb.  Don't expect to be anywhere in particular.\n+\tgdb_test \"$vgdbcmd\" \"\" \"target remote for vgdb\"\n+    }\n \n+    gdb_test \"monitor v.set gdb_output\" \"valgrind output will go to gdb.*\"\n     return 0\n }\n "
    }
  ]
}