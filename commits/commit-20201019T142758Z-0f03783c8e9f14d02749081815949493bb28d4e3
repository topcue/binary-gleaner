{
  "sha": "0f03783c8e9f14d02749081815949493bb28d4e3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGYwMzc4M2M4ZTlmMTRkMDI3NDkwODE4MTU5NDk0OTNiYjI4ZDRlMw==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-10-19T14:27:58Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-10-19T14:27:58Z"
    },
    "message": "Readelf: Add --lto-syms option to display LTO symbol tables.\n\n\t* readelf.c (do_lto_syms): New local.\n\t(long_option_values): Add OPTION_LTO_SYMS.\n\t(options): Add --lto-syms.\n\t(usage): Mention the new option.\n\t(parse_args): Parse the new option.\n\t(get_lto_kind): New function.\n\t(get_lto_visibility): New function.\n\t(get_lto_sym_type): New function.\n\t(display_lto_symtab): New function - displays the contents of an\n\tLTo symbol table section.\n\t(process_lto_symbol_tables): New functions.  Calls\n\tdipslay_lto_symtab on any LTO symbol table section.\n\t(process_object_file): Call process_lto_symbol_tables.\n\t* doc/binutils.texi: Document the new option.\n\t* NEWS: Mention the new feature.",
    "tree": {
      "sha": "013d8f81c9a7a9daf9802858b06b1f6b791c0124",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/013d8f81c9a7a9daf9802858b06b1f6b791c0124"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0f03783c8e9f14d02749081815949493bb28d4e3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0f03783c8e9f14d02749081815949493bb28d4e3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0f03783c8e9f14d02749081815949493bb28d4e3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0f03783c8e9f14d02749081815949493bb28d4e3/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "740341b9be657772538f9cf0b563c49798f47b3c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/740341b9be657772538f9cf0b563c49798f47b3c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/740341b9be657772538f9cf0b563c49798f47b3c"
    }
  ],
  "stats": {
    "total": 293,
    "additions": 289,
    "deletions": 4
  },
  "files": [
    {
      "sha": "786d3f429ebe65982880c765e3b813a47c3375f3",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f03783c8e9f14d02749081815949493bb28d4e3/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f03783c8e9f14d02749081815949493bb28d4e3/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=0f03783c8e9f14d02749081815949493bb28d4e3",
      "patch": "@@ -1,3 +1,21 @@\n+2020-10-19  Nick Clifton  <nickc@redhat.com>\n+\n+\t* readelf.c (do_lto_syms): New local.\n+\t(long_option_values): Add OPTION_LTO_SYMS.\n+\t(options): Add --lto-syms.\n+\t(usage): Mention the new option.\n+\t(parse_args): Parse the new option.\n+\t(get_lto_kind): New function.\n+\t(get_lto_visibility): New function.\n+\t(get_lto_sym_type): New function.\n+\t(display_lto_symtab): New function - displays the contents of an\n+\tLTo symbol table section.\n+\t(process_lto_symbol_tables): New functions.  Calls\n+\tdipslay_lto_symtab on any LTO symbol table section.\n+\t(process_object_file): Call process_lto_symbol_tables.\n+\t* doc/binutils.texi: Document the new option.\n+\t* NEWS: Mention the new feature.\n+\n 2020-10-09  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR gas/26703"
    },
    {
      "sha": "35e4e303e15e172ade188993a2b6d875d2d0336c",
      "filename": "binutils/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f03783c8e9f14d02749081815949493bb28d4e3/binutils/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f03783c8e9f14d02749081815949493bb28d4e3/binutils/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/NEWS?ref=0f03783c8e9f14d02749081815949493bb28d4e3",
      "patch": "@@ -1,5 +1,8 @@\n -*- text -*-\n \n+* Readelf can now display the contents of LTO symbol table sections when asked\n+  to do so via the --lto-syms command line option.\n+\n * Readelf now accepts the -C command line option to enable the demangling of\n   symbol names.  In addition the --demangle=<style>, --no-demangle,\n   --recurse-limit and --no-recurse-limit options are also now availale."
    },
    {
      "sha": "6203fde8877b8e7c5ffd38d80c94133c076a1960",
      "filename": "binutils/doc/binutils.texi",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f03783c8e9f14d02749081815949493bb28d4e3/binutils/doc/binutils.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f03783c8e9f14d02749081815949493bb28d4e3/binutils/doc/binutils.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/doc/binutils.texi?ref=0f03783c8e9f14d02749081815949493bb28d4e3",
      "patch": "@@ -4707,7 +4707,7 @@ readelf [@option{-a}|@option{--all}]\n         [@option{-t}|@option{--section-details}]\n         [@option{-e}|@option{--headers}]\n         [@option{-s}|@option{--syms}|@option{--symbols}]\n-        [@option{--dyn-syms}]\n+        [@option{--dyn-syms}|@option{--lto-syms}]\n         [@option{--demangle@var{=style}}|@option{--no-demangle}]\n         [@option{--recurse-limit}|@option{--no-recurse-limit}]\n         [@option{-n}|@option{--notes}]\n@@ -4825,6 +4825,10 @@ Displays the entries in dynamic symbol table section of the file, if it\n has one.  The output format is the same as the format used by the\n @option{--syms} option.\n \n+@item --lto-syms\n+@cindex LTO symbol table\n+Displays the contents of any LTO symbol tables in the file.\n+\n @item -C\n @itemx --demangle[=@var{style}]\n @cindex demangling in nm"
    },
    {
      "sha": "d2fd249a71f487ff7aede1c533b072756bfdcacf",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 263,
      "deletions": 3,
      "changes": 266,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f03783c8e9f14d02749081815949493bb28d4e3/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f03783c8e9f14d02749081815949493bb28d4e3/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=0f03783c8e9f14d02749081815949493bb28d4e3",
      "patch": "@@ -216,6 +216,7 @@ static bfd_boolean show_name = FALSE;\n static bfd_boolean do_dynamic = FALSE;\n static bfd_boolean do_syms = FALSE;\n static bfd_boolean do_dyn_syms = FALSE;\n+static bfd_boolean do_lto_syms = FALSE;\n static bfd_boolean do_reloc = FALSE;\n static bfd_boolean do_sections = FALSE;\n static bfd_boolean do_section_groups = FALSE;\n@@ -4483,6 +4484,7 @@ enum long_option_values\n {\n   OPTION_DEBUG_DUMP = 512,\n   OPTION_DYN_SYMS,\n+  OPTION_LTO_SYMS,\n   OPTION_DWARF_DEPTH,\n   OPTION_DWARF_START,\n   OPTION_DWARF_CHECK,\n@@ -4538,6 +4540,7 @@ static struct option options[] =\n   {\"no-recurse-limit\", no_argument, NULL, OPTION_NO_RECURSE_LIMIT},\n   {\"no-recursion-limit\", no_argument, NULL, OPTION_NO_RECURSE_LIMIT},\n   {\"dyn-syms\",\t       no_argument, 0, OPTION_DYN_SYMS},\n+  {\"lto-syms\",         no_argument, 0, OPTION_LTO_SYMS},\n   {\"debug-dump\",       optional_argument, 0, OPTION_DEBUG_DUMP},\n   {\"dwarf-depth\",      required_argument, 0, OPTION_DWARF_DEPTH},\n   {\"dwarf-start\",      required_argument, 0, OPTION_DWARF_START},\n@@ -4570,6 +4573,7 @@ usage (FILE * stream)\n   -s --syms              Display the symbol table\\n\\\n      --symbols           An alias for --syms\\n\\\n      --dyn-syms          Display the dynamic symbol table\\n\\\n+     --lto-syms          Display LTO symbol tables\\n\\\n   -C --demangle[=STYLE]  Decode low-level symbol names into user-level names\\n\\\n                           The STYLE, if specified, can be `auto' (the default),\\n\\\n                           `gnu', `lucid', `arm', `hp', `edg', `gnu-v3', `java'\\n\\\n@@ -4809,7 +4813,7 @@ parse_args (struct dump_data *dumpdata, int argc, char ** argv)\n \t  break;\n \tcase 'w':\n \t  do_dump = TRUE;\n-\t  if (optarg == 0)\n+\t  if (optarg == NULL)\n \t    {\n \t      do_debugging = TRUE;\n \t      dwarf_select_sections_all ();\n@@ -4822,7 +4826,7 @@ parse_args (struct dump_data *dumpdata, int argc, char ** argv)\n \t  break;\n \tcase OPTION_DEBUG_DUMP:\n \t  do_dump = TRUE;\n-\t  if (optarg == 0)\n+\t  if (optarg == NULL)\n \t    do_debugging = TRUE;\n \t  else\n \t    {\n@@ -4866,6 +4870,9 @@ parse_args (struct dump_data *dumpdata, int argc, char ** argv)\n \tcase OPTION_DYN_SYMS:\n \t  do_dyn_syms = TRUE;\n \t  break;\n+\tcase OPTION_LTO_SYMS:\n+\t  do_lto_syms = TRUE;\n+\t  break;\n #ifdef SUPPORT_DISASSEMBLY\n \tcase 'i':\n \t  request_dump (dumpdata, DISASS_DUMP);\n@@ -4922,7 +4929,7 @@ parse_args (struct dump_data *dumpdata, int argc, char ** argv)\n       && !do_segments && !do_header && !do_dump && !do_version\n       && !do_histogram && !do_debugging && !do_arch && !do_notes\n       && !do_section_groups && !do_archive_index\n-      && !do_dyn_syms)\n+      && !do_dyn_syms && !do_lto_syms)\n     {\n       if (do_checks)\n \t{\n@@ -4931,6 +4938,7 @@ parse_args (struct dump_data *dumpdata, int argc, char ** argv)\n \t  do_segments = do_header = do_dump = do_version = TRUE;\n \t  do_histogram = do_debugging = do_arch = do_notes = TRUE;\n \t  do_section_groups = do_archive_index = do_dyn_syms = TRUE;\n+\t  do_lto_syms = TRUE;\n \t}\n       else\n \tusage (stderr);\n@@ -12179,7 +12187,256 @@ print_dynamic_symbol (Filedata *filedata, unsigned long si,\n \t  si, printable_section_name (filedata, section), section->sh_info);\n }\n \n+static const char *\n+get_lto_kind (unsigned int kind)\n+{\n+  switch (kind)\n+    {\n+    case 0: return \"DEF\";\n+    case 1: return \"WEAKDEF\";\n+    case 2: return \"UNDEF\";\n+    case 3: return \"WEAKUNDEF\";\n+    case 4: return \"COMMON\";\n+    default:\n+      break;\n+    }\n+\n+  static char buffer[30];\n+  error (_(\"Unknown LTO symbol definition encountered: %u\\n\"), kind);\n+  sprintf (buffer, \"<unknown: %u>\", kind);\n+  return buffer;\n+}\n+\n+static const char *\n+get_lto_visibility (unsigned int visibility)\n+{\n+  switch (visibility)\n+    {\n+    case 0: return \"DEFAULT\";\n+    case 1: return \"PROTECTED\";\n+    case 2: return \"INTERNAL\";\n+    case 3: return \"HIDDEN\";\n+    default:\n+      break;\n+    }\n+\n+  static char buffer[30];\n+  error (_(\"Unknown LTO symbol visibility encountered: %u\\n\"), visibility);\n+  sprintf (buffer, \"<unknown: %u>\", visibility);\n+  return buffer;\n+}\n+\n+static const char *\n+get_lto_sym_type (unsigned int sym_type)\n+{\n+  switch (sym_type)\n+    {\n+    case 0: return \"UNKNOWN\";\n+    case 1: return \"FUNCTION\";\n+    case 2: return \"VARIABLE\";\n+    default:\n+      break;\n+    }\n+\n+  static char buffer[30];\n+  error (_(\"Unknown LTO symbol type encountered: %u\\n\"), sym_type);\n+  sprintf (buffer, \"<unknown: %u>\", sym_type);\n+  return buffer;\n+}\n+\n+/* Display an LTO format symbol table.\n+   FIXME: The format of LTO symbol tables is not formalized.\n+   So this code could need changing in the future.  */\n+\n+static bfd_boolean\n+display_lto_symtab (Filedata *           filedata,\n+\t\t    Elf_Internal_Shdr *  section)\n+{\n+  if (section->sh_size == 0)\n+    {\n+      printf (_(\"\\nLTO Symbol table '%s' is empty!\\n\"),\n+\t      printable_section_name (filedata, section));\n+      return TRUE;\n+    }\n+\n+  if (section->sh_size > filedata->file_size)\n+    {\n+      error (_(\"Section %s has an invalid sh_size of 0x%lx\\n\"),\n+\t     printable_section_name (filedata, section),\n+\t     (unsigned long) section->sh_size);\n+      return FALSE;\n+    }\n+\n+  void * alloced_data = get_data (NULL, filedata, section->sh_offset,\n+\t\t\t\t  section->sh_size, 1, _(\"LTO symbols\"));\n+  if (alloced_data == NULL)\n+    return FALSE;\n+\n+  /* Look for extended data for the symbol table.  */\n+  Elf_Internal_Shdr * ext;\n+  void * ext_data_orig = NULL;\n+  char * ext_data = NULL;\n+  char * ext_data_end = NULL;\n+  char * ext_name = NULL;\n+\n+  if (asprintf (& ext_name, \".gnu.lto_.ext_symtab.%s\",\n+\t\tSECTION_NAME (section) + strlen (\".gnu.lto_.symtab.\")) > 0\n+      && ext_name != NULL /* Paranoia.  */\n+      && (ext = find_section (filedata, ext_name)) != NULL)\n+    {\n+      if (ext->sh_size < 3)\n+\terror (_(\"LTO Symbol extension table '%s' is empty!\\n\"),\n+\t       printable_section_name (filedata, ext));\n+      else\n+\t{\n+\t  ext_data_orig = ext_data = get_data (NULL, filedata, ext->sh_offset,\n+\t\t\t\t\t       ext->sh_size, 1,\n+\t\t\t\t\t       _(\"LTO ext symbol data\"));\n+\t  if (ext_data != NULL)\n+\t    {\n+\t      ext_data_end = ext_data + ext->sh_size;\n+\t      if (* ext_data++ != 1)\n+\t\terror (_(\"Unexpected version number in symbol extension table\\n\"));\n+\t    }\n+\t}\n+    }\n+  \n+  const unsigned char * data = (const unsigned char *) alloced_data;\n+  const unsigned char * end = data + section->sh_size;\n+\n+  if (ext_data_orig != NULL)\n+    {\n+      if (do_wide)\n+\tprintf (_(\"\\nLTO Symbol table '%s' and extension table '%s' contain:\\n\"),\n+\t\tprintable_section_name (filedata, section),\n+\t\tprintable_section_name (filedata, ext));\n+      else\n+\t{\n+\t  printf (_(\"\\nLTO Symbol table '%s'\\n\"),\n+\t\t  printable_section_name (filedata, section));\n+\t  printf (_(\" and extension table '%s' contain:\\n\"),\n+\t\t  printable_section_name (filedata, ext));\n+\t}\n+    }\n+  else\n+    printf (_(\"\\nLTO Symbol table '%s' contains:\\n\"),\n+\t    printable_section_name (filedata, section));\n+    \n+\n+  /* FIXME: Add a wide version.  */\n+  if (ext_data_orig != NULL) \n+    printf (_(\"  Comdat_Key       Kind  Visibility     Size      Slot      Type  Section Name\\n\"));\n+  else\n+    printf (_(\"  Comdat_Key       Kind  Visibility     Size      Slot Name\\n\"));\n+\n+  /* FIXME: We do not handle style prefixes.  */\n+\n+  while (data < end)\n+    {\n+      const unsigned char * sym_name = data;\n+      data += strnlen ((const char *) sym_name, end - data) + 1;\n+      if (data >= end)\n+\tgoto fail;\n+\n+      const unsigned char * comdat_key = data;\n+      data += strnlen ((const char *) comdat_key, end - data) + 1;\n+      if (data >= end)\n+\tgoto fail;\n+\n+      if (data + 2 + 8 + 4 > end)\n+\tgoto fail;\n+\n+      unsigned int kind = *data++;\n+      unsigned int visibility = *data++;\n+\n+      elf_vma size = byte_get (data, 8);\n+      data += 8;\n+\n+      elf_vma slot = byte_get (data, 4);\n+      data += 4;\n+\n+      if (ext_data != NULL)\n+\t{\n+\t  if (ext_data < (ext_data_end - 1))\n+\t    {\n+\t      unsigned int sym_type = * ext_data ++;\n+\t      unsigned int sec_kind = * ext_data ++;\n+\n+\t      printf (\"  %10s %10s %11s %08lx  %08lx %9s %08lx _\",\n+\t\t      * comdat_key == 0 ? \"-\" : (char *) comdat_key,\n+\t\t      get_lto_kind (kind),\n+\t\t      get_lto_visibility (visibility),\n+\t\t      (long) size,\n+\t\t      (long) slot,\n+\t\t      get_lto_sym_type (sym_type),\n+\t\t      (long) sec_kind);\n+\t      print_symbol (6, (const char *) sym_name);\n+\t    }\n+\t  else\n+\t    {\n+\t      error (_(\"Ran out of LTO symbol extension data\\n\"));\n+\t      ext_data = NULL;\n+\t      /* FIXME: return FAIL result ?  */\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  printf (\"  %10s %10s %11s %08lx  %08lx _\",\n+\t\t  * comdat_key == 0 ? \"-\" : (char *) comdat_key,\n+\t\t  get_lto_kind (kind),\n+\t\t  get_lto_visibility (visibility),\n+\t\t  (long) size,\n+\t\t  (long) slot);\n+\t  print_symbol (21, (const char *) sym_name);\n+\t}\n+      putchar ('\\n');\n+    }\n+\n+  if (ext_data != NULL && ext_data < ext_data_end)\n+    {\n+      error (_(\"Data remains in the LTO symbol extension table\\n\"));\n+      goto fail;\n+    }\n+\n+  free (alloced_data);\n+  free (ext_data_orig);\n+  free (ext_name);\n+  return TRUE;\n+  \n+ fail:\n+  error (_(\"Buffer overrun encountered whilst decoding LTO symbol table\\n\"));\n+  free (alloced_data);\n+  free (ext_data_orig);\n+  free (ext_name);\n+  return FALSE;\n+}\n+\n+/* Display LTO symbol tables.  */\n+\n+static bfd_boolean\n+process_lto_symbol_tables (Filedata * filedata)\n+{\n+  Elf_Internal_Shdr * section;\n+  unsigned int i;\n+  bfd_boolean res = TRUE;\n+\n+  if (!do_lto_syms)\n+    return TRUE;\n+\n+  if (filedata->section_headers == NULL)\n+    return TRUE;\n+\n+  for (i = 0, section = filedata->section_headers;\n+       i < filedata->file_header.e_shnum;\n+       i++, section++)\n+    if (CONST_STRNEQ (SECTION_NAME (section), \".gnu.lto_.symtab\"))\n+      res &= display_lto_symtab (filedata, section);\n+\n+  return res; \n+}\n+\n /* Dump the symbol table.  */\n+\n static bfd_boolean\n process_symbol_table (Filedata * filedata)\n {\n@@ -20604,6 +20861,9 @@ process_object (Filedata * filedata)\n   if (! process_symbol_table (filedata))\n     res = FALSE;\n \n+  if (! process_lto_symbol_tables (filedata))\n+    res = FALSE;\n+  \n   if (! process_syminfo (filedata))\n     res = FALSE;\n "
    }
  ]
}