{
  "sha": "0df0cce7c63c064e086deda7384a7dd82fefe228",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGRmMGNjZTdjNjNjMDY0ZTA4NmRlZGE3Mzg0YTdkZDgyZmVmZTIyOA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-04-24T23:26:04Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-04-24T23:26:41Z"
    },
    "message": "gdbsupport: allow passing format string to scoped_debug_start_end\n\nA little thing that bothers me with scoped_debug_start_end is that it's\nnot possible to pass a format string to add context to the messages: the\nstart and end messages are fixed.\n\nIt was done like this at the time because there's the risk that debug\noutput is not enabled on entry (when the constructor runs) but is\nenabled on exit (when the destructor runs).  For example, a user\ndebugging from a top-gdb may manually enable a debug_foo variable.  If\ndebug output is disabled while the constructor runs, we won't render the\nformat string (to minimize overhead) so it won't be available in the\ndestructor.\n\nI think it would be nice to be able to use a format string along with\nscoped_debug_start_end, and I think it's unfortunate that such a narrow\nuse case prevents it.  So with this patch, I propose that we allow\npassing a format string to scoped_debug_start_end, and if the rare\nsituation described above happens, then we just show a \"sorry, message\nnot available\" kind of message.\n\nThe following patch makes use of this.\n\ngdbsupport/ChangeLog:\n\n\t* common-debug.h (struct scoped_debug_start_end)\n\t<scoped_debug_start_end>: Change start_msg/end_msg for\n\tstart_prefix/end_prefix.  Add format string parameter and make\n\tvariadic.\n\t<~scoped_debug_start_end>: Adjust.\n\t<m_end_msg>: Rename to...\n\t<m_end_prefix>: ... this.\n\t<m_with_format>: New.\n\t<m_msg>: New.\n\t(scoped_debug_start_end): Make variadic.\n\t(scoped_debug_enter_exit): Adjust.\n\nChange-Id: I9427ce8877a246a46694b3a1fec3837dc6954d6e",
    "tree": {
      "sha": "563ba174111f240d34c8e8978fdb5e2e458ce888",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/563ba174111f240d34c8e8978fdb5e2e458ce888"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0df0cce7c63c064e086deda7384a7dd82fefe228",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0df0cce7c63c064e086deda7384a7dd82fefe228",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0df0cce7c63c064e086deda7384a7dd82fefe228",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0df0cce7c63c064e086deda7384a7dd82fefe228/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c90e7d6352b2e16ac007d08b2e03ae10081147b5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c90e7d6352b2e16ac007d08b2e03ae10081147b5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c90e7d6352b2e16ac007d08b2e03ae10081147b5"
    }
  ],
  "stats": {
    "total": 80,
    "additions": 68,
    "deletions": 12
  },
  "files": [
    {
      "sha": "83416cff070f7b933a51423569a42515a5bb8e8c",
      "filename": "gdbsupport/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0df0cce7c63c064e086deda7384a7dd82fefe228/gdbsupport/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0df0cce7c63c064e086deda7384a7dd82fefe228/gdbsupport/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ChangeLog?ref=0df0cce7c63c064e086deda7384a7dd82fefe228",
      "patch": "@@ -1,3 +1,17 @@\n+2021-04-24  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* common-debug.h (struct scoped_debug_start_end)\n+\t<scoped_debug_start_end>: Change start_msg/end_msg for\n+\tstart_prefix/end_prefix.  Add format string parameter and make\n+\tvariadic.\n+\t<~scoped_debug_start_end>: Adjust.\n+\t<m_end_msg>: Rename to...\n+\t<m_end_prefix>: ... this.\n+\t<m_with_format>: New.\n+\t<m_msg>: New.\n+\t(scoped_debug_start_end): Make variadic.\n+\t(scoped_debug_enter_exit): Adjust.\n+\n 2021-04-24  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* observable.h (class observable) <struct observer> <observer>:"
    },
    {
      "sha": "8b9b0040719dd490285096fe447daf4986e84b5a",
      "filename": "gdbsupport/common-debug.h",
      "status": "modified",
      "additions": 54,
      "deletions": 12,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0df0cce7c63c064e086deda7384a7dd82fefe228/gdbsupport/common-debug.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0df0cce7c63c064e086deda7384a7dd82fefe228/gdbsupport/common-debug.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/common-debug.h?ref=0df0cce7c63c064e086deda7384a7dd82fefe228",
      "patch": "@@ -20,8 +20,11 @@\n #ifndef COMMON_COMMON_DEBUG_H\n #define COMMON_COMMON_DEBUG_H\n \n+#include \"gdbsupport/gdb_optional.h\"\n #include \"gdbsupport/preprocessor.h\"\n \n+#include <stdarg.h>\n+\n /* Set to true to enable debugging of hardware breakpoint/\n    watchpoint support code.  */\n \n@@ -94,20 +97,39 @@ struct scoped_debug_start_end\n \n      MODULE and FUNC are forwarded to debug_prefixed_printf.\n \n-     START_MSG and END_MSG are the statements to print on construction and\n-     destruction, respectively.  */\n+     START_PREFIX and END_PREFIX are the statements to print on construction and\n+     destruction, respectively.\n+\n+     If the FMT format string is non-nullptr, then a `: ` is appended to the\n+     messages, followed by the rendering of that format string.  The format\n+     string is rendered during construction and is re-used as is for the\n+     message on exit.  */\n \n   scoped_debug_start_end (bool &debug_enabled, const char *module,\n-\t\t\t  const char *func, const char *start_msg,\n-\t\t\t  const char *end_msg)\n+\t\t\t  const char *func, const char *start_prefix,\n+\t\t\t  const char *end_prefix, const char *fmt, ...)\n+    ATTRIBUTE_NULL_PRINTF (7, 8)\n     : m_debug_enabled (debug_enabled),\n       m_module (module),\n       m_func (func),\n-      m_end_msg (end_msg)\n+      m_end_prefix (end_prefix),\n+      m_with_format (fmt != nullptr)\n   {\n     if (m_debug_enabled)\n       {\n-\tdebug_prefixed_printf (m_module, m_func, \"%s\", start_msg);\n+\tif (fmt != nullptr)\n+\t  {\n+\t    va_list args;\n+\t    va_start (args, fmt);\n+\t    m_msg = string_vprintf (fmt, args);\n+\t    va_end (args);\n+\n+\t    debug_prefixed_printf (m_module, m_func, \"%s: %s\",\n+\t\t\t\t   start_prefix, m_msg->c_str ());\n+\t  }\n+\telse\n+\t  debug_prefixed_printf (m_module, m_func, \"%s\", start_prefix);\n+\n \t++debug_print_depth;\n \tm_must_decrement_print_depth = true;\n       }\n@@ -125,35 +147,55 @@ struct scoped_debug_start_end\n \n     if (m_debug_enabled)\n       {\n-\tdebug_prefixed_printf (m_module, m_func, \"%s\", m_end_msg);\n+\tif (m_with_format)\n+\t  {\n+\t    if (m_msg.has_value ())\n+\t      debug_prefixed_printf (m_module, m_func, \"%s: %s\",\n+\t\t\t\t     m_end_prefix, m_msg->c_str ());\n+\t    else\n+\t      {\n+\t\t/* A format string was passed to the constructor, but debug\n+\t\t   control variable wasn't set at the time, so we don't have the\n+\t\t   rendering of the format string.  */\n+\t\tdebug_prefixed_printf (m_module, m_func, \"%s: <%s debugging was not enabled on entry>\",\n+\t\t\t\t       m_end_prefix, m_module);\n+\t      }\n+\t  }\n+\telse\n+\t  debug_prefixed_printf (m_module, m_func, \"%s\", m_end_prefix);\n       }\n   }\n \n private:\n   bool &m_debug_enabled;\n   const char *m_module;\n   const char *m_func;\n-  const char *m_end_msg;\n+  const char *m_end_prefix;\n+\n+  /* The result of formatting the format string in the constructor.  */\n+  gdb::optional<std::string> m_msg;\n+\n+  /* True is a non-nullptr format was passed to the constructor.  */\n+  bool m_with_format;\n \n   /* This is used to handle the case where debugging is enabled during\n      construction but not during destruction, or vice-versa.  We want to make\n      sure there are as many increments are there are decrements.  */\n-\n   bool m_must_decrement_print_depth = false;\n };\n \n /* Helper to define a module-specific start/end debug macro.  */\n \n-#define scoped_debug_start_end(debug_enabled, module, msg) \\\n+#define scoped_debug_start_end(debug_enabled, module, fmt, ...) \\\n   scoped_debug_start_end CONCAT(scoped_debug_start_end, __LINE__) \\\n-    (debug_enabled, module, __func__, \"start: \" msg, \"end: \" msg)\n+    (debug_enabled, module, __func__, \"start\", \"end\", fmt, ##__VA_ARGS__)\n \n /* Helper to define a module-specific enter/exit debug macro.  This is a special\n    case of `scoped_debug_start_end` where the start and end messages are \"enter\"\n    and \"exit\", to denote entry and exit of a function.  */\n \n #define scoped_debug_enter_exit(debug_enabled, module) \\\n   scoped_debug_start_end CONCAT(scoped_debug_start_end, __LINE__) \\\n-    (debug_enabled, module, __func__, \"enter\", \"exit\")\n+    (debug_enabled, module, __func__, \"enter\", \"exit\", nullptr)\n \n #endif /* COMMON_COMMON_DEBUG_H */"
    }
  ]
}