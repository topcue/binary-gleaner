{
  "sha": "cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2QwOTZlYzg1ZmIzYWVkZjVjZjljM2MxMTZhN2RlYWIyZWUwZDM4OA==",
  "commit": {
    "author": {
      "name": "Hannes Domani",
      "email": "ssbssa@yahoo.de",
      "date": "2020-05-05T12:31:26Z"
    },
    "committer": {
      "name": "Hannes Domani",
      "email": "ssbssa@yahoo.de",
      "date": "2020-10-05T12:30:29Z"
    },
    "message": "Fix function argument and return value locations\n\nFixes these testsuite fails on Windows:\nFAIL: gdb.base/callfuncs.exp: p t_float_complex_values(fc1, fc2)\nFAIL: gdb.base/callfuncs.exp: p t_float_complex_many_args(fc1, fc2, fc3, fc4, fc1, fc2, fc3, fc4, fc1, fc2, fc3, fc4, fc1, fc2, fc3, fc4)\nFAIL: gdb.base/callfuncs.exp: noproto: p t_float_complex_values(fc1, fc2)\nFAIL: gdb.base/callfuncs.exp: noproto: p t_float_complex_many_args(fc1, fc2, fc3, fc4, fc1, fc2, fc3, fc4, fc1, fc2, fc3, fc4, fc1, fc2, fc3, fc4)\nFAIL: gdb.base/call-sc.exp: p/c fun(); call call-sc-tld\nFAIL: gdb.base/call-sc.exp: advance to fun for return; return call-sc-tld\nFAIL: gdb.base/call-sc.exp: zed L for return; return call-sc-tld\nFAIL: gdb.base/call-sc.exp: return foo; return call-sc-tld\nFAIL: gdb.base/call-sc.exp: return foo; synchronize pc to main() for 'call-sc-tld'\nFAIL: gdb.base/call-sc.exp: return foo; synchronize pc to main() for 'call-sc-tld'\nFAIL: gdb.base/call-sc.exp: advance to fun for finish; return call-sc-tld\nFAIL: gdb.base/call-sc.exp: zed L for finish; return call-sc-tld\nFAIL: gdb.base/call-sc.exp: finish foo; return call-sc-tld (the program is no longer running)\nFAIL: gdb.base/call-sc.exp: value foo finished; return call-sc-tld\n\nFor function arguments (callfuncs.exp), only TYPE_CODE_COMPLEX was\nmissing in the types passed via integer registers.\n\nFor return values, there were a lot more issues:\n- TYPE_CODE_DECFLOAT is NOT returned via XMM0.\n- long double is NOT returned via XMM0.\n- but __int128 IS returned via XMM0.\n- the comments for TYPE_CODE_FLT state that __m128, __m128i and __m128d are\n  returned by XMM0, and this is correct, but it doesn't actually check for\n  them, because they are TYPE_CODE_ARRAY with TYPE_VECTOR\n\nSo I had to add TYPE_CODE_DECFLOAT to the arguments passed via XMM register,\nbut I had to remove it from the values returned via XMM0 register.\n\ngdb/ChangeLog:\n\n2020-10-05  Hannes Domani  <ssbssa@yahoo.de>\n\n\t* amd64-windows-tdep.c (amd64_windows_passed_by_integer_register):\n\tAdd TYPE_CODE_COMPLEX.\n\t(amd64_windows_return_value): Fix types returned via XMM0.\n\ngdb/testsuite/ChangeLog:\n\n2020-10-05  Hannes Domani  <ssbssa@yahoo.de>\n\n\t* gdb.base/call-sc.c: Fix return struct on stack test case.\n\t* gdb.base/call-sc.exp: Likewise.",
    "tree": {
      "sha": "304be0048ed54af1d077f2ac313039c8ed3ab39f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/304be0048ed54af1d077f2ac313039c8ed3ab39f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388/comments",
  "author": {
    "login": "ssbssa",
    "id": 40947,
    "node_id": "MDQ6VXNlcjQwOTQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40947?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ssbssa",
    "html_url": "https://github.com/ssbssa",
    "followers_url": "https://api.github.com/users/ssbssa/followers",
    "following_url": "https://api.github.com/users/ssbssa/following{/other_user}",
    "gists_url": "https://api.github.com/users/ssbssa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ssbssa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ssbssa/subscriptions",
    "organizations_url": "https://api.github.com/users/ssbssa/orgs",
    "repos_url": "https://api.github.com/users/ssbssa/repos",
    "events_url": "https://api.github.com/users/ssbssa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ssbssa/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "ssbssa",
    "id": 40947,
    "node_id": "MDQ6VXNlcjQwOTQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40947?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ssbssa",
    "html_url": "https://github.com/ssbssa",
    "followers_url": "https://api.github.com/users/ssbssa/followers",
    "following_url": "https://api.github.com/users/ssbssa/following{/other_user}",
    "gists_url": "https://api.github.com/users/ssbssa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ssbssa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ssbssa/subscriptions",
    "organizations_url": "https://api.github.com/users/ssbssa/orgs",
    "repos_url": "https://api.github.com/users/ssbssa/repos",
    "events_url": "https://api.github.com/users/ssbssa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ssbssa/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5b316d90e4ec9845a890fd21ad86cf1043fb2ca3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b316d90e4ec9845a890fd21ad86cf1043fb2ca3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5b316d90e4ec9845a890fd21ad86cf1043fb2ca3"
    }
  ],
  "stats": {
    "total": 51,
    "additions": 46,
    "deletions": 5
  },
  "files": [
    {
      "sha": "57e8cc7b2d4f30b03bf08cd5389cdd87aff107f6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388",
      "patch": "@@ -1,3 +1,9 @@\n+2020-10-05  Hannes Domani  <ssbssa@yahoo.de>\n+\n+\t* amd64-windows-tdep.c (amd64_windows_passed_by_integer_register):\n+\tAdd TYPE_CODE_COMPLEX.\n+\t(amd64_windows_return_value): Fix types returned via XMM0.\n+\n 2020-10-05  Alan Hayward  <alan.hayward@arm.com>\n \n \t* MAINTAINERS (Responsible Maintainers): Add Luis Machado to"
    },
    {
      "sha": "320388b5a8794e505aeccd3cc9c5b769acfcf894",
      "filename": "gdb/amd64-windows-tdep.c",
      "status": "modified",
      "additions": 17,
      "deletions": 4,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388/gdb/amd64-windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388/gdb/amd64-windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-windows-tdep.c?ref=cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388",
      "patch": "@@ -125,6 +125,7 @@ amd64_windows_passed_by_integer_register (struct type *type)\n       case TYPE_CODE_RVALUE_REF:\n       case TYPE_CODE_STRUCT:\n       case TYPE_CODE_UNION:\n+      case TYPE_CODE_COMPLEX:\n \treturn (TYPE_LENGTH (type) == 1\n \t\t|| TYPE_LENGTH (type) == 2\n \t\t|| TYPE_LENGTH (type) == 4\n@@ -364,17 +365,29 @@ amd64_windows_return_value (struct gdbarch *gdbarch, struct value *function,\n   switch (type->code ())\n     {\n       case TYPE_CODE_FLT:\n-      case TYPE_CODE_DECFLOAT:\n-        /* __m128, __m128i, __m128d, floats, and doubles are returned\n-           via XMM0.  */\n-        if (len == 4 || len == 8 || len == 16)\n+\t/* floats, and doubles are returned via XMM0.  */\n+\tif (len == 4 || len == 8)\n           regnum = AMD64_XMM0_REGNUM;\n         break;\n+      case TYPE_CODE_ARRAY:\n+\t/* __m128, __m128i and __m128d are returned via XMM0.  */\n+\tif (TYPE_VECTOR (type) && len == 16)\n+\t  {\n+\t    enum type_code code = TYPE_TARGET_TYPE (type)->code ();\n+\t    if (code == TYPE_CODE_INT || code == TYPE_CODE_FLT)\n+\t      {\n+\t\tregnum = AMD64_XMM0_REGNUM;\n+\t\tbreak;\n+\t      }\n+\t  }\n+\t/* fall through */\n       default:\n         /* All other values that are 1, 2, 4 or 8 bytes long are returned\n            via RAX.  */\n         if (len == 1 || len == 2 || len == 4 || len == 8)\n           regnum = AMD64_RAX_REGNUM;\n+\telse if (len == 16 && type->code () == TYPE_CODE_INT)\n+\t  regnum = AMD64_XMM0_REGNUM;\n         break;\n     }\n "
    },
    {
      "sha": "e8fe944391800dea61a7b67dafb5818b519c7103",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388",
      "patch": "@@ -1,3 +1,8 @@\n+2020-10-05  Hannes Domani  <ssbssa@yahoo.de>\n+\n+\t* gdb.base/call-sc.c: Fix return struct on stack test case.\n+\t* gdb.base/call-sc.exp: Likewise.\n+\n 2020-10-02  Gary Benson <gbenson@redhat.com>\n \n \t* README: Fix \"paralell\"."
    },
    {
      "sha": "eb140cd9cfb04d50a39948447cb90f5a4654ad07",
      "filename": "gdb/testsuite/gdb.base/call-sc.c",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388/gdb/testsuite/gdb.base/call-sc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388/gdb/testsuite/gdb.base/call-sc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/call-sc.c?ref=cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388",
      "patch": "@@ -35,6 +35,7 @@ typedef t T;\n #endif\n \n T foo = '1', L;\n+T init = '9';\n \n T fun()\n {\n@@ -55,7 +56,10 @@ int main()\n {\n   int i;\n \n-  Fun(foo);\t\n+  /* Use a different initial value then is later used in the\n+     \"value foo returned\" test, so in case the struct is then returned\n+     on the stack, it doesn't have the correct value by accident.  */\n+  Fun(init);\n \n   /* An infinite loop that first clears all the variables and then\n      calls the function.  This \"hack\" is to make re-testing easier -"
    },
    {
      "sha": "685c6f24bab67dc23c42e18d890a7178f65a1e95",
      "filename": "gdb/testsuite/gdb.base/call-sc.exp",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388/gdb/testsuite/gdb.base/call-sc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388/gdb/testsuite/gdb.base/call-sc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/call-sc.exp?ref=cd096ec85fb3aedf5cf9c3c116a7deab2ee0d388",
      "patch": "@@ -280,6 +280,19 @@ proc test_scalar_returns { } {\n \t\tfail \"${test}\"\n \t    }\n \t}\n+\t-re \" = 57 .*${gdb_prompt} $\" {\n+\t    if $return_value_unknown {\n+\t\t# The struct return case.\n+\t\t# The return value is stored on the stack, and since GDB\n+\t\t# didn't override it, it still has value that was stored\n+\t\t# there in the earlier Foo(init) call.\n+\t\tpass \"${test}\"\n+\t    } else {\n+\t\t# This contradicts the above claim that GDB knew\n+\t\t# the location of the return-value.\n+\t\tfail \"${test}\"\n+\t    }\n+\t}\n \t-re \".*${gdb_prompt} $\" {\n \t    if $return_value_unimplemented {\n \t\t# What a suprize.  The architecture hasn't implemented"
    }
  ]
}