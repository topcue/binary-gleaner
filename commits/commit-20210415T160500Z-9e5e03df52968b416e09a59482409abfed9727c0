{
  "sha": "9e5e03df52968b416e09a59482409abfed9727c0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWU1ZTAzZGY1Mjk2OGI0MTZlMDlhNTk0ODI0MDlhYmZlZDk3MjdjMA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-04-15T16:05:00Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-04-15T16:05:00Z"
    },
    "message": "Use block_symbol in var_value_operation\n\nI noticed that var_value_operation takes a block and a symbol, and\nmost callers destructure a block_symbol to pass in.  It seems better\nfor this class to simply hold a block_symbol instead.\n\nTested on x86-64 Fedora 32.\n\ngdb/ChangeLog\n2021-04-15  Tom Tromey  <tromey@adacore.com>\n\n\t* rust-exp.y (rust_parser::convert_ast_to_expression): Update.\n\t* parse.c (parser_state::push_symbol, parser_state::push_dollar):\n\tUpdate.\n\t* p-exp.y (variable): Update.\n\t* m2-exp.y (variable): Update.\n\t* go-exp.y (variable): Update.\n\t* expprint.c (dump_for_expression): New overload.\n\t* expop.h (check_objfile): New overload.\n\t(check_constant): New overload.\n\t(class var_value_operation): Use block_symbol.\n\t<get_symbol>: Rewrite.\n\t* eval.c (var_value_operation::evaluate)\n\t(var_value_operation::evaluate_funcall)\n\t(var_value_operation::evaluate_for_address)\n\t(var_value_operation::evaluate_for_address)\n\t(var_value_operation::evaluate_with_coercion)\n\t(var_value_operation::evaluate_for_sizeof)\n\t(var_value_operation::evaluate_for_cast): Update.\n\t* d-exp.y (PrimaryExpression): Update.\n\t* c-exp.y (variable): Update.\n\t* ax-gdb.c (var_value_operation::do_generate_ax): Update.\n\t* ada-lang.c (ada_var_value_operation::evaluate_for_cast)\n\t(ada_var_value_operation::evaluate)\n\t(ada_var_value_operation::resolve)\n\t(ada_funcall_operation::resolve): Update.\n\t* ada-exp.y (write_var_from_sym, write_object_renaming)\n\t(write_ambiguous_var, write_var_or_type, write_name_assoc)\n\t(maybe_overload): Update.\n\t* ada-exp.h (class ada_var_value_operation) <get_block>: Rewrite.",
    "tree": {
      "sha": "f7b84a83f5c0aa2f636927ef25efed33604c3f13",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f7b84a83f5c0aa2f636927ef25efed33604c3f13"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9e5e03df52968b416e09a59482409abfed9727c0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9e5e03df52968b416e09a59482409abfed9727c0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9e5e03df52968b416e09a59482409abfed9727c0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9e5e03df52968b416e09a59482409abfed9727c0/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4c79248a46100016e902f1489ce1c38a42608460",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4c79248a46100016e902f1489ce1c38a42608460",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4c79248a46100016e902f1489ce1c38a42608460"
    }
  ],
  "stats": {
    "total": 192,
    "additions": 122,
    "deletions": 70
  },
  "files": [
    {
      "sha": "22a79c2f88c98a6cc3fe374b244ba37fe0acd6c1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 33,
      "deletions": 1,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e5e03df52968b416e09a59482409abfed9727c0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e5e03df52968b416e09a59482409abfed9727c0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9e5e03df52968b416e09a59482409abfed9727c0",
      "patch": "@@ -1,3 +1,35 @@\n+2021-04-15  Tom Tromey  <tromey@adacore.com>\n+\n+\t* rust-exp.y (rust_parser::convert_ast_to_expression): Update.\n+\t* parse.c (parser_state::push_symbol, parser_state::push_dollar):\n+\tUpdate.\n+\t* p-exp.y (variable): Update.\n+\t* m2-exp.y (variable): Update.\n+\t* go-exp.y (variable): Update.\n+\t* expprint.c (dump_for_expression): New overload.\n+\t* expop.h (check_objfile): New overload.\n+\t(check_constant): New overload.\n+\t(class var_value_operation): Use block_symbol.\n+\t<get_symbol>: Rewrite.\n+\t* eval.c (var_value_operation::evaluate)\n+\t(var_value_operation::evaluate_funcall)\n+\t(var_value_operation::evaluate_for_address)\n+\t(var_value_operation::evaluate_for_address)\n+\t(var_value_operation::evaluate_with_coercion)\n+\t(var_value_operation::evaluate_for_sizeof)\n+\t(var_value_operation::evaluate_for_cast): Update.\n+\t* d-exp.y (PrimaryExpression): Update.\n+\t* c-exp.y (variable): Update.\n+\t* ax-gdb.c (var_value_operation::do_generate_ax): Update.\n+\t* ada-lang.c (ada_var_value_operation::evaluate_for_cast)\n+\t(ada_var_value_operation::evaluate)\n+\t(ada_var_value_operation::resolve)\n+\t(ada_funcall_operation::resolve): Update.\n+\t* ada-exp.y (write_var_from_sym, write_object_renaming)\n+\t(write_ambiguous_var, write_var_or_type, write_name_assoc)\n+\t(maybe_overload): Update.\n+\t* ada-exp.h (class ada_var_value_operation) <get_block>: Rewrite.\n+\n 2021-04-15  Tom Tromey  <tom@tromey.com>\n \t    Andrew Burgess  <andrew.burgess@embecosm.com>\n \n@@ -5051,7 +5083,7 @@\n \n \t* top.c (print_gdb_version): Update copyright year.\n \n-2021-01-01  Joel Brobecker  <brobecker@adacore.com>\n+2021-01-01, 21  Joel Brobecker  <brobecker@adacore.com>\n \n \t* config/djgpp/fnchange.lst: Add entry for gdb/ChangeLog-2020.\n "
    },
    {
      "sha": "598dc7072ad788915439af914dcee09e09f47569",
      "filename": "gdb/ada-exp.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e5e03df52968b416e09a59482409abfed9727c0/gdb/ada-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e5e03df52968b416e09a59482409abfed9727c0/gdb/ada-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.h?ref=9e5e03df52968b416e09a59482409abfed9727c0",
      "patch": "@@ -1,6 +1,6 @@\n /* Definitions for Ada expressions\n \n-   Copyright (C) 2020 Free Software Foundation, Inc.\n+   Copyright (C) 2020, 2021 Free Software Foundation, Inc.\n \n    This file is part of GDB.\n \n@@ -352,7 +352,7 @@ class ada_var_value_operation\n \t\t\t    enum noside noside) override;\n \n   const block *get_block () const\n-  { return std::get<1> (m_storage); }\n+  { return std::get<0> (m_storage).block; }\n \n   bool resolve (struct expression *exp,\n \t\tbool deprocedure_p,"
    },
    {
      "sha": "7b1b60fd46b3f03febc61bf50729a61e03dd9510",
      "filename": "gdb/ada-exp.y",
      "status": "modified",
      "additions": 11,
      "deletions": 14,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e5e03df52968b416e09a59482409abfed9727c0/gdb/ada-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e5e03df52968b416e09a59482409abfed9727c0/gdb/ada-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.y?ref=9e5e03df52968b416e09a59482409abfed9727c0",
      "patch": "@@ -194,8 +194,7 @@ maybe_overload (enum exp_opcode op, operation_up &lhs, operation_up &rhs)\n \n   if (symbol_read_needs_frame (fn.symbol))\n     pstate->block_tracker->update (fn.block, INNERMOST_BLOCK_FOR_SYMBOLS);\n-  operation_up callee\n-    = make_operation<ada_var_value_operation> (fn.symbol, fn.block);\n+  operation_up callee = make_operation<ada_var_value_operation> (fn);\n \n   std::vector<operation_up> argvec;\n   argvec.push_back (std::move (lhs));\n@@ -1124,14 +1123,12 @@ yyerror (const char *msg)\n    non-NULL).  */\n \n static void\n-write_var_from_sym (struct parser_state *par_state,\n-\t\t    const struct block *block,\n-\t\t    struct symbol *sym)\n+write_var_from_sym (struct parser_state *par_state, block_symbol sym)\n {\n-  if (symbol_read_needs_frame (sym))\n-    par_state->block_tracker->update (block, INNERMOST_BLOCK_FOR_SYMBOLS);\n+  if (symbol_read_needs_frame (sym.symbol))\n+    par_state->block_tracker->update (sym.block, INNERMOST_BLOCK_FOR_SYMBOLS);\n \n-  par_state->push_new<ada_var_value_operation> (sym, block);\n+  par_state->push_new<ada_var_value_operation> (sym);\n }\n \n /* Write integer or boolean constant ARG of type TYPE.  */\n@@ -1190,7 +1187,7 @@ write_object_renaming (struct parser_state *par_state,\n \t\t\t\t&inner_renaming_expr))\n       {\n       case ADA_NOT_RENAMING:\n-\twrite_var_from_sym (par_state, sym_info.block, sym_info.symbol);\n+\twrite_var_from_sym (par_state, sym_info);\n \tbreak;\n       case ADA_OBJECT_RENAMING:\n \twrite_object_renaming (par_state, sym_info.block,\n@@ -1247,8 +1244,7 @@ write_object_renaming (struct parser_state *par_state,\n \t    else if (SYMBOL_CLASS (index_sym_info.symbol) == LOC_TYPEDEF)\n \t      /* Index is an old-style renaming symbol.  */\n \t      index_sym_info.block = orig_left_context;\n-\t    write_var_from_sym (par_state, index_sym_info.block,\n-\t\t\t\tindex_sym_info.symbol);\n+\t    write_var_from_sym (par_state, index_sym_info);\n \t  }\n \tif (slice_state == SIMPLE_INDEX)\n \t  ada_funcall (1);\n@@ -1458,7 +1454,8 @@ write_ambiguous_var (struct parser_state *par_state,\n   sym->set_linkage_name (obstack_strndup (&temp_parse_space, name, len));\n   sym->set_language (language_ada, nullptr);\n \n-  par_state->push_new<ada_var_value_operation> (sym, block);\n+  block_symbol bsym { sym, block };\n+  par_state->push_new<ada_var_value_operation> (bsym);\n }\n \n /* A convenient wrapper around ada_get_field_index that takes\n@@ -1637,7 +1634,7 @@ write_var_or_type (struct parser_state *par_state,\n \n \t  if (syms.size () == 1)\n \t    {\n-\t      write_var_from_sym (par_state, syms[0].block, syms[0].symbol);\n+\t      write_var_from_sym (par_state, syms[0]);\n \t      write_selectors (par_state, encoded_name + tail_index);\n \t      return NULL;\n \t    }\n@@ -1711,7 +1708,7 @@ write_name_assoc (struct parser_state *par_state, struct stoken name)\n       if (syms.size () != 1 || SYMBOL_CLASS (syms[0].symbol) == LOC_TYPEDEF)\n \tpstate->push_new<ada_string_operation> (copy_name (name));\n       else\n-\twrite_var_from_sym (par_state, syms[0].block, syms[0].symbol);\n+\twrite_var_from_sym (par_state, syms[0]);\n     }\n   else\n     if (write_var_or_type (par_state, NULL, name) != NULL)"
    },
    {
      "sha": "f7860f27bfc019b5eb384088669a0f8943b2b743",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 9,
      "deletions": 10,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e5e03df52968b416e09a59482409abfed9727c0/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e5e03df52968b416e09a59482409abfed9727c0/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=9e5e03df52968b416e09a59482409abfed9727c0",
      "patch": "@@ -10248,8 +10248,8 @@ ada_var_value_operation::evaluate_for_cast (struct type *expect_type,\n \t\t\t\t\t    enum noside noside)\n {\n   value *val = evaluate_var_value (noside,\n-\t\t\t\t   std::get<1> (m_storage),\n-\t\t\t\t   std::get<0> (m_storage));\n+\t\t\t\t   std::get<0> (m_storage).block,\n+\t\t\t\t   std::get<0> (m_storage).symbol);\n \n   val = ada_value_cast (expect_type, val);\n \n@@ -10269,7 +10269,7 @@ ada_var_value_operation::evaluate (struct type *expect_type,\n \t\t\t\t   struct expression *exp,\n \t\t\t\t   enum noside noside)\n {\n-  symbol *sym = std::get<0> (m_storage);\n+  symbol *sym = std::get<0> (m_storage).symbol;\n \n   if (SYMBOL_DOMAIN (sym) == UNDEF_DOMAIN)\n     /* Only encountered when an unresolved symbol occurs in a\n@@ -10360,19 +10360,19 @@ ada_var_value_operation::resolve (struct expression *exp,\n \t\t\t\t  innermost_block_tracker *tracker,\n \t\t\t\t  struct type *context_type)\n {\n-  symbol *sym = std::get<0> (m_storage);\n+  symbol *sym = std::get<0> (m_storage).symbol;\n   if (SYMBOL_DOMAIN (sym) == UNDEF_DOMAIN)\n     {\n       block_symbol resolved\n-\t= ada_resolve_variable (sym, std::get<1> (m_storage),\n+\t= ada_resolve_variable (sym, std::get<0> (m_storage).block,\n \t\t\t\tcontext_type, parse_completion,\n \t\t\t\tdeprocedure_p, tracker);\n-      std::get<0> (m_storage) = resolved.symbol;\n-      std::get<1> (m_storage) = resolved.block;\n+      std::get<0> (m_storage) = resolved;\n     }\n \n   if (deprocedure_p\n-      && SYMBOL_TYPE (std::get<0> (m_storage))->code () == TYPE_CODE_FUNC)\n+      && (SYMBOL_TYPE (std::get<0> (m_storage).symbol)->code ()\n+\t  == TYPE_CODE_FUNC))\n     return true;\n \n   return false;\n@@ -10694,8 +10694,7 @@ ada_funcall_operation::resolve (struct expression *exp,\n \t\t\t   tracker);\n \n   std::get<0> (m_storage)\n-    = make_operation<ada_var_value_operation> (resolved.symbol,\n-\t\t\t\t\t       resolved.block);\n+    = make_operation<ada_var_value_operation> (resolved);\n   return false;\n }\n "
    },
    {
      "sha": "009c128c83c11e83405eb3c7137e58d8f2b46efe",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e5e03df52968b416e09a59482409abfed9727c0/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e5e03df52968b416e09a59482409abfed9727c0/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=9e5e03df52968b416e09a59482409abfed9727c0",
      "patch": "@@ -1980,16 +1980,16 @@ var_value_operation::do_generate_ax (struct expression *exp,\n \t\t\t\t     struct axs_value *value,\n \t\t\t\t     struct type *cast_type)\n {\n-  gen_var_ref (ax, value, std::get<0> (m_storage));\n+  gen_var_ref (ax, value, std::get<0> (m_storage).symbol);\n \n   if (value->optimized_out)\n     error (_(\"`%s' has been optimized out, cannot use\"),\n-\t   std::get<0> (m_storage)->print_name ());\n+\t   std::get<0> (m_storage).symbol->print_name ());\n \n   if (value->type->code () == TYPE_CODE_ERROR)\n     {\n       if (cast_type == nullptr)\n-\terror_unknown_type (std::get<0> (m_storage)->print_name ());\n+\terror_unknown_type (std::get<0> (m_storage).symbol->print_name ());\n       value->type = cast_type;\n     }\n }"
    },
    {
      "sha": "865b1554de1856b9948c22ab2349feb8200f8c6c",
      "filename": "gdb/c-exp.y",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e5e03df52968b416e09a59482409abfed9727c0/gdb/c-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e5e03df52968b416e09a59482409abfed9727c0/gdb/c-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.y?ref=9e5e03df52968b416e09a59482409abfed9727c0",
      "patch": "@@ -1125,8 +1125,7 @@ variable:\tblock COLONCOLON name\n \t\t\t  if (symbol_read_needs_frame (sym.symbol))\n \t\t\t    pstate->block_tracker->update (sym);\n \n-\t\t\t  pstate->push_new<var_value_operation> (sym.symbol,\n-\t\t\t\t\t\t\t\t sym.block);\n+\t\t\t  pstate->push_new<var_value_operation> (sym);\n \t\t\t}\n \t;\n \n@@ -1197,8 +1196,7 @@ variable:\tname_not_typename\n \t\t\t\tpstate->push_new<var_msym_value_operation>\n \t\t\t\t  (resolver);\n \t\t\t      else\n-\t\t\t\tpstate->push_new<var_value_operation>\n-\t\t\t\t  (sym.symbol, sym.block);\n+\t\t\t\tpstate->push_new<var_value_operation> (sym);\n \t\t\t    }\n \t\t\t  else if ($1.is_a_field_of_this)\n \t\t\t    {\n@@ -1239,8 +1237,11 @@ variable:\tname_not_typename\n \t\t\t\t   ? find_function_alias_target (msymbol)\n \t\t\t\t   : NULL);\n \t\t\t      if (alias_target != NULL)\n-\t\t\t\tpstate->push_new<var_value_operation>\n-\t\t\t\t  (alias_target, SYMBOL_BLOCK_VALUE (alias_target));\n+\t\t\t\t{\n+\t\t\t\t  block_symbol bsym { alias_target,\n+\t\t\t\t    SYMBOL_BLOCK_VALUE (alias_target) };\n+\t\t\t\t  pstate->push_new<var_value_operation> (bsym);\n+\t\t\t\t}\n \t\t\t      else\n \t\t\t\tpstate->push_new<var_msym_value_operation>\n \t\t\t\t  (msymbol);"
    },
    {
      "sha": "1d11d9f3569085d924597c7259e278bf05b233a4",
      "filename": "gdb/d-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e5e03df52968b416e09a59482409abfed9727c0/gdb/d-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e5e03df52968b416e09a59482409abfed9727c0/gdb/d-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-exp.y?ref=9e5e03df52968b416e09a59482409abfed9727c0",
      "patch": "@@ -452,8 +452,7 @@ PrimaryExpression:\n \t\t    {\n \t\t      if (symbol_read_needs_frame (sym.symbol))\n \t\t\tpstate->block_tracker->update (sym);\n-\t\t      pstate->push_new<var_value_operation> (sym.symbol,\n-\t\t\t\t\t\t\t     sym.block);\n+\t\t      pstate->push_new<var_value_operation> (sym);\n \t\t    }\n \t\t  else if (is_a_field_of_this.type != NULL)\n \t\t     {"
    },
    {
      "sha": "1b3c974009acdcbd671420af995365e6c7817126",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 13,
      "deletions": 11,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e5e03df52968b416e09a59482409abfed9727c0/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e5e03df52968b416e09a59482409abfed9727c0/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=9e5e03df52968b416e09a59482409abfed9727c0",
      "patch": "@@ -579,10 +579,10 @@ var_value_operation::evaluate (struct type *expect_type,\n \t\t\t       struct expression *exp,\n \t\t\t       enum noside noside)\n {\n-  symbol *var = std::get<0> (m_storage);\n+  symbol *var = std::get<0> (m_storage).symbol;\n   if (SYMBOL_TYPE (var)->code () == TYPE_CODE_ERROR)\n     error_unknown_type (var->print_name ());\n-  return evaluate_var_value (noside, std::get<1> (m_storage), var);\n+  return evaluate_var_value (noside, std::get<0> (m_storage).block, var);\n }\n \n } /* namespace expr */\n@@ -719,12 +719,13 @@ var_value_operation::evaluate_funcall (struct type *expect_type,\n \n   struct symbol *symp;\n   find_overload_match (argvec, NULL, NON_METHOD,\n-\t\t       NULL, std::get<0> (m_storage),\n+\t\t       NULL, std::get<0> (m_storage).symbol,\n \t\t       NULL, &symp, NULL, 0, noside);\n \n   if (SYMBOL_TYPE (symp)->code () == TYPE_CODE_ERROR)\n     error_unknown_type (symp->print_name ());\n-  value *callee = evaluate_var_value (noside, std::get<1> (m_storage), symp);\n+  value *callee = evaluate_var_value (noside, std::get<0> (m_storage).block,\n+\t\t\t\t      symp);\n \n   return evaluate_subexp_do_call (exp, noside, callee, argvec,\n \t\t\t\t  nullptr, expect_type);\n@@ -2573,7 +2574,7 @@ value *\n var_value_operation::evaluate_for_address (struct expression *exp,\n \t\t\t\t\t   enum noside noside)\n {\n-  symbol *var = std::get<0> (m_storage);\n+  symbol *var = std::get<0> (m_storage).symbol;\n \n   /* C++: The \"address\" of a reference should yield the address\n    * of the object pointed to.  Let value_addr() deal with it.  */\n@@ -2593,20 +2594,21 @@ var_value_operation::evaluate_for_address (struct expression *exp,\n       return value_zero (type, not_lval);\n     }\n   else\n-    return address_of_variable (var, std::get<1> (m_storage));\n+    return address_of_variable (var, std::get<0> (m_storage).block);\n }\n \n value *\n var_value_operation::evaluate_with_coercion (struct expression *exp,\n \t\t\t\t\t     enum noside noside)\n {\n-  struct symbol *var = std::get<0> (m_storage);\n+  struct symbol *var = std::get<0> (m_storage).symbol;\n   struct type *type = check_typedef (SYMBOL_TYPE (var));\n   if (type->code () == TYPE_CODE_ARRAY\n       && !type->is_vector ()\n       && CAST_IS_CONVERSION (exp->language_defn))\n     {\n-      struct value *val = address_of_variable (var, std::get<1> (m_storage));\n+      struct value *val = address_of_variable (var,\n+\t\t\t\t\t       std::get<0> (m_storage).block);\n       return value_cast (lookup_pointer_type (TYPE_TARGET_TYPE (type)), val);\n     }\n   return evaluate (nullptr, exp, noside);\n@@ -2730,7 +2732,7 @@ value *\n var_value_operation::evaluate_for_sizeof (struct expression *exp,\n \t\t\t\t\t  enum noside noside)\n {\n-  struct type *type = SYMBOL_TYPE (std::get<0> (m_storage));\n+  struct type *type = SYMBOL_TYPE (std::get<0> (m_storage).symbol);\n   if (is_dynamic_type (type))\n     {\n       value *val = evaluate (nullptr, exp, EVAL_NORMAL);\n@@ -2778,8 +2780,8 @@ var_value_operation::evaluate_for_cast (struct type *to_type,\n \t\t\t\t\tenum noside noside)\n {\n   value *val = evaluate_var_value (noside,\n-\t\t\t\t   std::get<1> (m_storage),\n-\t\t\t\t   std::get<0> (m_storage));\n+\t\t\t\t   std::get<0> (m_storage).block,\n+\t\t\t\t   std::get<0> (m_storage).symbol);\n \n   val = value_cast (to_type, val);\n "
    },
    {
      "sha": "b8e28b5a59025cf3c87d6bbf6c8da587230a8ca7",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 25,
      "deletions": 8,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e5e03df52968b416e09a59482409abfed9727c0/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e5e03df52968b416e09a59482409abfed9727c0/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=9e5e03df52968b416e09a59482409abfed9727c0",
      "patch": "@@ -221,7 +221,7 @@ check_objfile (struct objfile *exp_objfile, struct objfile *objfile)\n   return exp_objfile == objfile;\n }\n \n-static inline bool \n+static inline bool\n check_objfile (struct type *type, struct objfile *objfile)\n {\n   struct objfile *ty_objfile = type->objfile_owner ();\n@@ -230,18 +230,25 @@ check_objfile (struct type *type, struct objfile *objfile)\n   return false;\n }\n \n-static inline bool \n+static inline bool\n check_objfile (struct symbol *sym, struct objfile *objfile)\n {\n   return check_objfile (symbol_objfile (sym), objfile);\n }\n \n-static inline bool \n+static inline bool\n check_objfile (const struct block *block, struct objfile *objfile)\n {\n   return check_objfile (block_objfile (block), objfile);\n }\n \n+static inline bool\n+check_objfile (const block_symbol &sym, struct objfile *objfile)\n+{\n+  return (check_objfile (sym.symbol, objfile)\n+\t  || check_objfile (sym.block, objfile));\n+}\n+\n static inline bool\n check_objfile (bound_minimal_symbol minsym, struct objfile *objfile)\n {\n@@ -260,7 +267,7 @@ check_objfile (const std::string &str, struct objfile *objfile)\n   return false;\n }\n \n-static inline bool \n+static inline bool\n check_objfile (const operation_up &op, struct objfile *objfile)\n {\n   return op->uses_objfile (objfile);\n@@ -286,7 +293,7 @@ check_objfile (enum_flags<T> val, struct objfile *objfile)\n }\n \n template<typename T>\n-static inline bool \n+static inline bool\n check_objfile (const std::vector<T> &collection, struct objfile *objfile)\n {\n   for (const auto &item : collection)\n@@ -298,7 +305,7 @@ check_objfile (const std::vector<T> &collection, struct objfile *objfile)\n }\n \n template<typename S, typename T>\n-static inline bool \n+static inline bool\n check_objfile (const std::pair<S, T> &item, struct objfile *objfile)\n {\n   return (check_objfile (item.first, objfile)\n@@ -327,6 +334,8 @@ extern void dump_for_expression (struct ui_file *stream, int depth,\n \t\t\t\t internalvar *ivar);\n extern void dump_for_expression (struct ui_file *stream, int depth,\n \t\t\t\t symbol *sym);\n+extern void dump_for_expression (struct ui_file *stream, int depth,\n+\t\t\t\t const block_symbol &sym);\n extern void dump_for_expression (struct ui_file *stream, int depth,\n \t\t\t\t bound_minimal_symbol msym);\n extern void dump_for_expression (struct ui_file *stream, int depth,\n@@ -480,6 +489,14 @@ check_constant (struct symbol *sym)\n \t  || sc == LOC_LABEL);\n }\n \n+static inline bool\n+check_constant (const block_symbol &sym)\n+{\n+  /* We know the block is constant, so we only need to check the\n+     symbol.  */\n+  return check_constant (sym.symbol);\n+}\n+\n template<typename T>\n static inline bool\n check_constant (const std::vector<T> &collection)\n@@ -612,7 +629,7 @@ class scope_operation\n \n /* Compute the value of a variable.  */\n class var_value_operation\n-  : public maybe_constant_operation<symbol *, const block *>\n+  : public maybe_constant_operation<block_symbol>\n {\n public:\n \n@@ -646,7 +663,7 @@ class var_value_operation\n   /* Return the symbol referenced by this object.  */\n   symbol *get_symbol () const\n   {\n-    return std::get<0> (m_storage);\n+    return std::get<0> (m_storage).symbol;\n   }\n \n protected:"
    },
    {
      "sha": "0c21ce9eaae53a65eca756998dad14aabce55e8c",
      "filename": "gdb/expprint.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e5e03df52968b416e09a59482409abfed9727c0/gdb/expprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e5e03df52968b416e09a59482409abfed9727c0/gdb/expprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expprint.c?ref=9e5e03df52968b416e09a59482409abfed9727c0",
      "patch": "@@ -123,6 +123,15 @@ dump_for_expression (struct ui_file *stream, int depth, const block *bl)\n   fprintf_filtered (stream, _(\"%*sBlock: %p\\n\"), depth, \"\", bl);\n }\n \n+void\n+dump_for_expression (struct ui_file *stream, int depth,\n+\t\t     const block_symbol &sym)\n+{\n+  fprintf_filtered (stream, _(\"%*sBlock symbol:\\n\"), depth, \"\");\n+  dump_for_expression (stream, depth + 1, sym.symbol);\n+  dump_for_expression (stream, depth + 1, sym.block);\n+}\n+\n void\n dump_for_expression (struct ui_file *stream, int depth,\n \t\t     type_instance_flags flags)"
    },
    {
      "sha": "aaa65170a0347e279288f8dfd6f0f0116f92c117",
      "filename": "gdb/go-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e5e03df52968b416e09a59482409abfed9727c0/gdb/go-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e5e03df52968b416e09a59482409abfed9727c0/gdb/go-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-exp.y?ref=9e5e03df52968b416e09a59482409abfed9727c0",
      "patch": "@@ -563,8 +563,7 @@ variable:\tname_not_typename\n \t\t\t      if (symbol_read_needs_frame (sym.symbol))\n \t\t\t\tpstate->block_tracker->update (sym);\n \n-\t\t\t      pstate->push_new<var_value_operation>\n-\t\t\t\t(sym.symbol, sym.block);\n+\t\t\t      pstate->push_new<var_value_operation> (sym);\n \t\t\t    }\n \t\t\t  else if ($1.is_a_field_of_this)\n \t\t\t    {"
    },
    {
      "sha": "f4d4eecda104cdd85cfcbd5ebf930834fc5862df",
      "filename": "gdb/m2-exp.y",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e5e03df52968b416e09a59482409abfed9727c0/gdb/m2-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e5e03df52968b416e09a59482409abfed9727c0/gdb/m2-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-exp.y?ref=9e5e03df52968b416e09a59482409abfed9727c0",
      "patch": "@@ -517,8 +517,8 @@ fblock\t:\tblock COLONCOLON BLOCKNAME\n /* Useful for assigning to PROCEDURE variables */\n variable:\tfblock\n \t\t\t{\n-\t\t\t  pstate->push_new<var_value_operation>\n-\t\t\t    ($1, nullptr);\n+\t\t\t  block_symbol sym { $1, nullptr };\n+\t\t\t  pstate->push_new<var_value_operation> (sym);\n \t\t\t}\n \t;\n \n@@ -539,8 +539,7 @@ variable:\tblock COLONCOLON NAME\n \t\t\t  if (symbol_read_needs_frame (sym.symbol))\n \t\t\t    pstate->block_tracker->update (sym);\n \n-\t\t\t  pstate->push_new<var_value_operation>\n-\t\t\t    (sym.symbol, sym.block);\n+\t\t\t  pstate->push_new<var_value_operation> (sym);\n \t\t\t}\n \t;\n "
    },
    {
      "sha": "f496ce2016e5ac78b5264c2d603dc2e707ca760a",
      "filename": "gdb/p-exp.y",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e5e03df52968b416e09a59482409abfed9727c0/gdb/p-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e5e03df52968b416e09a59482409abfed9727c0/gdb/p-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-exp.y?ref=9e5e03df52968b416e09a59482409abfed9727c0",
      "patch": "@@ -651,8 +651,7 @@ variable:\tblock COLONCOLON name\n \t\t\t    error (_(\"No symbol \\\"%s\\\" in specified context.\"),\n \t\t\t\t   copy.c_str ());\n \n-\t\t\t  pstate->push_new<var_value_operation>\n-\t\t\t    (sym.symbol, sym.block);\n+\t\t\t  pstate->push_new<var_value_operation> (sym);\n \t\t\t}\n \t;\n \n@@ -690,8 +689,7 @@ variable:\tname_not_typename\n \t\t\t      if (symbol_read_needs_frame (sym.symbol))\n \t\t\t\tpstate->block_tracker->update (sym);\n \n-\t\t\t      pstate->push_new<var_value_operation>\n-\t\t\t\t(sym.symbol, sym.block);\n+\t\t\t      pstate->push_new<var_value_operation> (sym);\n \t\t\t      current_type = sym.symbol->type; }\n \t\t\t  else if ($1.is_a_field_of_this)\n \t\t\t    {"
    },
    {
      "sha": "b2f23eb67bb18fb3ca52765cb6462407b707ecf3",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e5e03df52968b416e09a59482409abfed9727c0/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e5e03df52968b416e09a59482409abfed9727c0/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=9e5e03df52968b416e09a59482409abfed9727c0",
      "patch": "@@ -224,7 +224,7 @@ parser_state::push_symbol (const char *name, block_symbol sym)\n     {\n       if (symbol_read_needs_frame (sym.symbol))\n \tblock_tracker->update (sym);\n-      push_new<expr::var_value_operation> (sym.symbol, sym.block);\n+      push_new<expr::var_value_operation> (sym);\n     }\n   else\n     {\n@@ -301,7 +301,7 @@ parser_state::push_dollar (struct stoken str)\n   sym = lookup_symbol (copy.c_str (), NULL, VAR_DOMAIN, NULL);\n   if (sym.symbol)\n     {\n-      push_new<expr::var_value_operation> (sym.symbol, sym.block);\n+      push_new<expr::var_value_operation> (sym);\n       return;\n     }\n   msym = lookup_bound_minimal_symbol (copy.c_str ());"
    },
    {
      "sha": "a0ceb6a42c7ead543c18964a7e85262415246d91",
      "filename": "gdb/rust-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9e5e03df52968b416e09a59482409abfed9727c0/gdb/rust-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9e5e03df52968b416e09a59482409abfed9727c0/gdb/rust-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-exp.y?ref=9e5e03df52968b416e09a59482409abfed9727c0",
      "patch": "@@ -2429,7 +2429,7 @@ rust_parser::convert_ast_to_expression (const struct rust_op *operation,\n \t\t\t     VAR_DOMAIN);\n \toperation_up result;\n \tif (sym.symbol != NULL && SYMBOL_CLASS (sym.symbol) != LOC_TYPEDEF)\n-\t  result.reset (new var_value_operation (sym.symbol, sym.block));\n+\t  result.reset (new var_value_operation (sym));\n \telse\n \t  {\n \t    struct type *type = NULL;"
    }
  ]
}