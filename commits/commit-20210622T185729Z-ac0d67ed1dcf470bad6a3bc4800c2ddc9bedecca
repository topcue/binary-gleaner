{
  "sha": "ac0d67ed1dcf470bad6a3bc4800c2ddc9bedecca",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWMwZDY3ZWQxZGNmNDcwYmFkNmEzYmM0ODAwYzJkZGM5YmVkZWNjYQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-22T18:57:29Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-22T18:57:29Z"
    },
    "message": "gdb: remove unnecessary parameter wait_ptid from do_target_wait\n\ndo_target_wait has a wait_ptid parameter, to filter what ptid we wait\non.  The sole caller of do_target_wait passes minus_one_ptid, meaning\n\"all ptids\".  So in practice, this parameter is not needed, remove it.\n\ngdb/ChangeLog:\n\n\t* infrun.c (do_target_wait): Remove wait_ptid parameter.\n\t(fetch_inferior_event): Adjust.\n\nChange-Id: I54119beb43db678e4b2081dc490f89e7ff878e74",
    "tree": {
      "sha": "c5ae7224e2c4ed65a258e1acce6889e0e80bf9f2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c5ae7224e2c4ed65a258e1acce6889e0e80bf9f2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ac0d67ed1dcf470bad6a3bc4800c2ddc9bedecca",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ac0d67ed1dcf470bad6a3bc4800c2ddc9bedecca",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ac0d67ed1dcf470bad6a3bc4800c2ddc9bedecca",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ac0d67ed1dcf470bad6a3bc4800c2ddc9bedecca/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4e317a765bbe1c47fb9d461b7effa40f34220c85",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4e317a765bbe1c47fb9d461b7effa40f34220c85",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4e317a765bbe1c47fb9d461b7effa40f34220c85"
    }
  ],
  "stats": {
    "total": 17,
    "additions": 10,
    "deletions": 7
  },
  "files": [
    {
      "sha": "2bef3a89592fc3d8ed3a169431a872c08e1a0677",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac0d67ed1dcf470bad6a3bc4800c2ddc9bedecca/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac0d67ed1dcf470bad6a3bc4800c2ddc9bedecca/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ac0d67ed1dcf470bad6a3bc4800c2ddc9bedecca",
      "patch": "@@ -1,3 +1,8 @@\n+2021-06-22  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* infrun.c (do_target_wait): Remove wait_ptid parameter.\n+\t(fetch_inferior_event): Adjust.\n+\n 2021-06-22  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* python/lib/gdb/__init__.py (_execute_unwinders): Return tuple"
    },
    {
      "sha": "9469b74af397dac9a3d47e362a49107e4e25cd67",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac0d67ed1dcf470bad6a3bc4800c2ddc9bedecca/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac0d67ed1dcf470bad6a3bc4800c2ddc9bedecca/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=ac0d67ed1dcf470bad6a3bc4800c2ddc9bedecca",
      "patch": "@@ -3670,8 +3670,7 @@ do_target_wait_1 (inferior *inf, ptid_t ptid,\n    more events.  Polls for events from all inferiors/targets.  */\n \n static bool\n-do_target_wait (ptid_t wait_ptid, execution_control_state *ecs,\n-\t\ttarget_wait_flags options)\n+do_target_wait (execution_control_state *ecs, target_wait_flags options)\n {\n   int num_inferiors = 0;\n   int random_selector;\n@@ -3681,10 +3680,9 @@ do_target_wait (ptid_t wait_ptid, execution_control_state *ecs,\n      polling the rest of the inferior list starting from that one in a\n      circular fashion until the whole list is polled once.  */\n \n-  auto inferior_matches = [&wait_ptid] (inferior *inf)\n+  auto inferior_matches = [] (inferior *inf)\n     {\n-      return (inf->process_target () != NULL\n-\t      && ptid_t (inf->pid).matches (wait_ptid));\n+      return inf->process_target () != nullptr;\n     };\n \n   /* First see how many matching inferiors we have.  */\n@@ -3723,7 +3721,7 @@ do_target_wait (ptid_t wait_ptid, execution_control_state *ecs,\n \n   auto do_wait = [&] (inferior *inf)\n   {\n-    ecs->ptid = do_target_wait_1 (inf, wait_ptid, &ecs->ws, options);\n+    ecs->ptid = do_target_wait_1 (inf, minus_one_ptid, &ecs->ws, options);\n     ecs->target = inf->process_target ();\n     return (ecs->ws.kind != TARGET_WAITKIND_IGNORE);\n   };\n@@ -4080,7 +4078,7 @@ fetch_inferior_event ()\n        the event.  */\n     scoped_disable_commit_resumed disable_commit_resumed (\"handling event\");\n \n-    if (!do_target_wait (minus_one_ptid, ecs, TARGET_WNOHANG))\n+    if (!do_target_wait (ecs, TARGET_WNOHANG))\n       {\n \tinfrun_debug_printf (\"do_target_wait returned no event\");\n \tdisable_commit_resumed.reset_and_commit ();"
    }
  ]
}