{
  "sha": "9b32cba44ddeb32251092a05f1238d2462eb2345",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWIzMmNiYTQ0ZGRlYjMyMjUxMDkyYTA1ZjEyMzhkMjQ2MmViMjM0NQ==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-07-08T12:59:15Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-10-03T16:04:55Z"
    },
    "message": "libctf, binutils: dump the CTF header\n\nThe CTF header has before now been thrown away too soon to be dumped\nusing the ctf_dump() machinery used by objdump and readelf: instead, a\nkludge involving debugging-priority dumps of the header offsets on every\nopen was used.\n\nReplace this with proper first-class dumping machinery just like\neverything else in the CTF file, and have objdump and readelf use it.\n(The dumper already had an enum value in ctf_sect_names_t for this\npurpose, waiting to be used.)\n\nv5: fix tabdamage.\n\nlibctf/\n\t* ctf-impl.h (ctf_file_t): New field ctf_openflags.\n\t* ctf-open.c (ctf_bufopen): Set it.  No longer dump header offsets.\n\t* ctf-dump.c (dump_header): New function, dump the CTF header.\n\t(ctf_dump): Call it.\n\t(ctf_dump_header_strfield): New function.\n\t(ctf_dump_header_sectfield): Likewise.\n\nbinutils/\n\t* objdump.c (dump_ctf_archive_member): Dump the CTF header.\n\t* readelf.c (dump_section_as_ctf): Likewise.",
    "tree": {
      "sha": "e313eb919ec3ae3c75c66829e290736843c8c745",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e313eb919ec3ae3c75c66829e290736843c8c745"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9b32cba44ddeb32251092a05f1238d2462eb2345",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9b32cba44ddeb32251092a05f1238d2462eb2345",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9b32cba44ddeb32251092a05f1238d2462eb2345",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9b32cba44ddeb32251092a05f1238d2462eb2345/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fd55eae84d8b94b497c6043e5aa6e111e7f5a225",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fd55eae84d8b94b497c6043e5aa6e111e7f5a225",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fd55eae84d8b94b497c6043e5aa6e111e7f5a225"
    }
  ],
  "stats": {
    "total": 165,
    "additions": 151,
    "deletions": 14
  },
  "files": [
    {
      "sha": "356eb0592be507ee46abd1580f415aac82cf6b59",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b32cba44ddeb32251092a05f1238d2462eb2345/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b32cba44ddeb32251092a05f1238d2462eb2345/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=9b32cba44ddeb32251092a05f1238d2462eb2345",
      "patch": "@@ -1,3 +1,8 @@\n+2019-07-08  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* objdump.c (dump_ctf_archive_member): Dump the CTF header.\n+\t* readelf.c (dump_section_as_ctf): Likewise.\n+\n 2019-10-02  Niklas G\u00fcrtler  <profclonk@gmail.com>\n \n \tPR 24942"
    },
    {
      "sha": "d5a45ae5cb9b8d9f38a341785a7e7d1e0a98fa68",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b32cba44ddeb32251092a05f1238d2462eb2345/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b32cba44ddeb32251092a05f1238d2462eb2345/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=9b32cba44ddeb32251092a05f1238d2462eb2345",
      "patch": "@@ -3282,8 +3282,9 @@ static int\n dump_ctf_archive_member (ctf_file_t *ctf, const char *name, void *arg)\n {\n   ctf_file_t *parent = (ctf_file_t *) arg;\n-  const char *things[] = {\"Labels\", \"Data objects\", \"Function objects\",\n-\t\t\t  \"Variables\", \"Types\", \"Strings\", \"\"};\n+  const char *things[] = {\"Header\", \"Labels\", \"Data objects\",\n+\t\t\t  \"Function objects\", \"Variables\", \"Types\", \"Strings\",\n+\t\t\t  \"\"};\n   const char **thing;\n   size_t i;\n \n@@ -3294,7 +3295,7 @@ dump_ctf_archive_member (ctf_file_t *ctf, const char *name, void *arg)\n     printf (_(\"\\nCTF archive member: %s:\\n\"), sanitize_string (name));\n \n   ctf_import (ctf, parent);\n-  for (i = 1, thing = things; *thing[0]; thing++, i++)\n+  for (i = 0, thing = things; *thing[0]; thing++, i++)\n     {\n       ctf_dump_state_t *s = NULL;\n       char *item;"
    },
    {
      "sha": "7e2b3adcf7b9cfb3b21ccab31dc3b36e31dbdd89",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b32cba44ddeb32251092a05f1238d2462eb2345/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b32cba44ddeb32251092a05f1238d2462eb2345/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=9b32cba44ddeb32251092a05f1238d2462eb2345",
      "patch": "@@ -13932,8 +13932,9 @@ dump_section_as_ctf (Elf_Internal_Shdr * section, Filedata * filedata)\n   ctf_file_t *         ctf = NULL;\n   ctf_file_t *         parent = NULL;\n \n-  const char *things[] = {\"Labels\", \"Data objects\", \"Function objects\",\n-\t\t\t  \"Variables\", \"Types\", \"Strings\", \"\"};\n+  const char *things[] = {\"Header\", \"Labels\", \"Data objects\",\n+\t\t\t  \"Function objects\", \"Variables\", \"Types\", \"Strings\",\n+\t\t\t  \"\"};\n   const char **thing;\n   int err;\n   bfd_boolean ret = FALSE;\n@@ -14014,7 +14015,7 @@ dump_section_as_ctf (Elf_Internal_Shdr * section, Filedata * filedata)\n   printf (_(\"\\nDump of CTF section '%s':\\n\"),\n \t  printable_section_name (filedata, section));\n \n-  for (i = 1, thing = things; *thing[0]; thing++, i++)\n+  for (i = 0, thing = things; *thing[0]; thing++, i++)\n     {\n       ctf_dump_state_t *s = NULL;\n       char *item;"
    },
    {
      "sha": "d0d0d6785c155f0e5c9fb6f3c7ca18c3863f2c6c",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b32cba44ddeb32251092a05f1238d2462eb2345/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b32cba44ddeb32251092a05f1238d2462eb2345/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=9b32cba44ddeb32251092a05f1238d2462eb2345",
      "patch": "@@ -1,3 +1,12 @@\n+2019-07-08  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-impl.h (ctf_file_t): New field ctf_openflags.\n+\t* ctf-open.c (ctf_bufopen): Set it.  No longer dump header offsets.\n+\t* ctf-dump.c (dump_header): New function, dump the CTF header.\n+\t(ctf_dump): Call it.\n+\t(ctf_dump_header_strfield): New function.\n+\t(ctf_dump_header_sectfield): Likewise.\n+\n 2019-07-06  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-impl.h (ctf_file_t): New fields ctf_header, ctf_dynbase,"
    },
    {
      "sha": "acb882ba53a3231a3275dd545b160d009cc6c388",
      "filename": "libctf/ctf-dump.c",
      "status": "modified",
      "additions": 127,
      "deletions": 2,
      "changes": 129,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b32cba44ddeb32251092a05f1238d2462eb2345/libctf/ctf-dump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b32cba44ddeb32251092a05f1238d2462eb2345/libctf/ctf-dump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-dump.c?ref=9b32cba44ddeb32251092a05f1238d2462eb2345",
      "patch": "@@ -153,6 +153,132 @@ ctf_dump_format_type (ctf_file_t *fp, ctf_id_t id)\n   return NULL;\n }\n \n+/* Dump one string field from the file header into the cds_items.  */\n+static int\n+ctf_dump_header_strfield (ctf_file_t *fp, ctf_dump_state_t *state,\n+\t\t\t  const char *name, uint32_t value)\n+{\n+  char *str;\n+  if (value)\n+    {\n+      if (asprintf (&str, \"%s: %s\\n\", name, ctf_strptr (fp, value)) < 0)\n+\tgoto err;\n+      ctf_dump_append (state, str);\n+    }\n+  return 0;\n+\n+ err:\n+  return (ctf_set_errno (fp, -ENOMEM));\n+}\n+\n+/* Dump one section-offset field from the file header into the cds_items.  */\n+static int\n+ctf_dump_header_sectfield (ctf_file_t *fp, ctf_dump_state_t *state,\n+\t\t\t   const char *sect, uint32_t off, uint32_t nextoff)\n+{\n+  char *str;\n+  if (nextoff - off)\n+    {\n+      if (asprintf (&str, \"%s:\\t0x%lx -- 0x%lx (0x%lx bytes)\\n\", sect,\n+\t\t    (unsigned long) off, (unsigned long) (nextoff - 1),\n+\t\t    (unsigned long) (nextoff - off)) < 0)\n+\tgoto err;\n+      ctf_dump_append (state, str);\n+    }\n+  return 0;\n+\n+ err:\n+  return (ctf_set_errno (fp, -ENOMEM));\n+}\n+\n+/* Dump the file header into the cds_items.  */\n+static int\n+ctf_dump_header (ctf_file_t *fp, ctf_dump_state_t *state)\n+{\n+  char *str;\n+  const ctf_header_t *hp = fp->ctf_header;\n+  const char *vertab[] =\n+    {\n+     NULL, \"CTF_VERSION_1\",\n+     \"CTF_VERSION_1_UPGRADED_3 (latest format, version 1 type \"\n+     \"boundaries)\",\n+     \"CTF_VERSION_2\",\n+     \"CTF_VERSION_3\", NULL\n+    };\n+  const char *verstr = NULL;\n+\n+  if (asprintf (&str, \"Magic number: %x\\n\", hp->cth_magic) < 0)\n+      goto err;\n+  ctf_dump_append (state, str);\n+\n+  if (hp->cth_version <= CTF_VERSION)\n+    verstr = vertab[hp->cth_version];\n+\n+  if (verstr == NULL)\n+    verstr = \"(not a valid version)\";\n+\n+  if (asprintf (&str, \"Version: %i (%s)\\n\", hp->cth_version,\n+\t\tverstr) < 0)\n+    goto err;\n+  ctf_dump_append (state, str);\n+\n+  /* Everything else is only printed if present.  */\n+\n+  /* The flags are unusual in that they represent the ctf_file_t *in memory*:\n+     flags representing compression, etc, are turned off as the file is\n+     decompressed.  So we store a copy of the flags before they are changed, for\n+     the dumper.  */\n+\n+  if (fp->ctf_openflags > 0)\n+    {\n+      if (fp->ctf_openflags)\n+\tif (asprintf (&str, \"Flags: 0x%x (%s)\", fp->ctf_openflags,\n+\t\t      fp->ctf_openflags & CTF_F_COMPRESS ? \"CTF_F_COMPRESS\"\n+\t\t\t\t\t\t\t : \"\") < 0)\n+\tgoto err;\n+      ctf_dump_append (state, str);\n+    }\n+\n+  if (ctf_dump_header_strfield (fp, state, \"Parent label\",\n+\t\t\t\thp->cth_parlabel) < 0)\n+    goto err;\n+\n+  if (ctf_dump_header_strfield (fp, state, \"Parent name\", hp->cth_parname) < 0)\n+    goto err;\n+\n+  if (ctf_dump_header_strfield (fp, state, \"Compilation unit name\",\n+\t\t\t\thp->cth_cuname) < 0)\n+    goto err;\n+\n+  if (ctf_dump_header_sectfield (fp, state, \"Label section\", hp->cth_lbloff,\n+\t\t\t\t hp->cth_objtoff) < 0)\n+    goto err;\n+\n+  if (ctf_dump_header_sectfield (fp, state, \"Data object section\",\n+\t\t\t\t hp->cth_objtoff, hp->cth_funcoff) < 0)\n+    goto err;\n+\n+  if (ctf_dump_header_sectfield (fp, state, \"Function info section\",\n+\t\t\t\t hp->cth_funcoff, hp->cth_varoff) < 0)\n+    goto err;\n+\n+  if (ctf_dump_header_sectfield (fp, state, \"Variable section\",\n+\t\t\t\t hp->cth_varoff, hp->cth_typeoff) < 0)\n+    goto err;\n+\n+  if (ctf_dump_header_sectfield (fp, state, \"Type section\",\n+\t\t\t\t hp->cth_typeoff, hp->cth_stroff) < 0)\n+    goto err;\n+\n+  if (ctf_dump_header_sectfield (fp, state, \"String section\", hp->cth_stroff,\n+\t\t\t\t hp->cth_stroff + hp->cth_strlen + 1) < 0)\n+    goto err;\n+\n+  return 0;\n+ err:\n+  return (ctf_set_errno (fp, -ENOMEM));\n+}\n+\n /* Dump a single label into the cds_items.  */\n \n static int\n@@ -492,8 +618,7 @@ ctf_dump (ctf_file_t *fp, ctf_dump_state_t **statep, ctf_sect_names_t sect,\n       switch (sect)\n \t{\n \tcase CTF_SECT_HEADER:\n-\t  /* Nothing doable (yet): entire header is discarded after read-phase.  */\n-\t  str = strdup (\"\");\n+\t  ctf_dump_header (fp, state);\n \t  break;\n \tcase CTF_SECT_LABEL:\n \t  if (ctf_label_iter (fp, ctf_dump_label, state) < 0)"
    },
    {
      "sha": "5b331cbc6d2db156c57bfb59825a6ce49cafdd55",
      "filename": "libctf/ctf-impl.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b32cba44ddeb32251092a05f1238d2462eb2345/libctf/ctf-impl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b32cba44ddeb32251092a05f1238d2462eb2345/libctf/ctf-impl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-impl.h?ref=9b32cba44ddeb32251092a05f1238d2462eb2345",
      "patch": "@@ -218,6 +218,7 @@ struct ctf_file\n {\n   const ctf_fileops_t *ctf_fileops; /* Version-specific file operations.  */\n   struct ctf_header *ctf_header;    /* The header from this CTF file.  */\n+  unsigned char ctf_openflags;\t    /* Flags the file had when opened.  */\n   ctf_sect_t ctf_data;\t\t    /* CTF data from object file.  */\n   ctf_sect_t ctf_symtab;\t    /* Symbol table from object file.  */\n   ctf_sect_t ctf_strtab;\t    /* String table from object file.  */"
    },
    {
      "sha": "2979ef8d287b747e58bf5841c96cb3f748aa30d5",
      "filename": "libctf/ctf-open.c",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b32cba44ddeb32251092a05f1238d2462eb2345/libctf/ctf-open.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b32cba44ddeb32251092a05f1238d2462eb2345/libctf/ctf-open.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-open.c?ref=9b32cba44ddeb32251092a05f1238d2462eb2345",
      "patch": "@@ -1323,12 +1323,7 @@ ctf_bufopen (const ctf_sect_t *ctfsect, const ctf_sect_t *symsect,\n \n   if (foreign_endian)\n     flip_header (hp);\n-\n-  ctf_dprintf (\"header offsets: %x/%x/%x/%x/%x/%x/%x\\n\",\n-\t       hp->cth_lbloff, hp->cth_objtoff, hp->cth_funcoff,\n-\t       hp->cth_varoff, hp->cth_typeoff, hp->cth_stroff,\n-\t       hp->cth_strlen);\n-\n+  fp->ctf_openflags = hp->cth_flags;\n   fp->ctf_size = hp->cth_stroff + hp->cth_strlen;\n \n   ctf_dprintf (\"ctf_bufopen: uncompressed size=%lu\\n\","
    }
  ]
}