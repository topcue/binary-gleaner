{
  "sha": "f211b8c0b91fc7b1657079a495f05a9a4d957821",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjIxMWI4YzBiOTFmYzdiMTY1NzA3OWE0OTVmMDVhOWE0ZDk1NzgyMQ==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-08-09T15:16:18Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-08-09T15:16:18Z"
    },
    "message": "Synchronize libiberty sources with gcc mainline.\n\n\t* libiberty: Sync with gcc.  Bring in:\n\t2019-08-08  Martin Liska  <mliska@suse.cz>\n\n\tPR bootstrap/91352\n\t* lrealpath.c (is_valid_fd): New function.\n\n\t2019-07-24  Martin Liska  <mliska@suse.cz>\n\n\tPR lto/91228\n\t* simple-object-elf.c (simple_object_elf_copy_lto_debug_sections):\n\tFind first '\\0' starting from gnu_lto + 1.\n\n\t2019-07-12  Ren Kimura  <rkx1209dev@gmail.com>\n\n\t* simple-object-elf.c (simple_object_elf_match): Check zero value shstrndx.\n\tThis fixes a Bug 90924.\n\n\t2019-07-22  Martin Liska  <mliska@suse.cz>\n\n\t* simple-object-elf.c (simple_object_elf_copy_lto_debug_sections):\n\tDo not search for gnu_lto_v1, but search for first '\\0'.\n\n\t2019-07-18  Eduard-Mihai Burtescu  <eddyb@lyken.rs>\n\n\t* cplus-dem.c: Include rust-demangle.h.\n\t* rust-demangle.c: Include rust-demangle.h.\n\t* rust-demangle.h: New file.\n\n\t2019-05-31  Michael Forney  <mforney@mforney.org>\n\n\t* cp-demangle.c: Don't define CP_DYNAMIC_ARRAYS if __STDC_NO_VLA__\n\tis non-zero.\n\n\t2019-04-30  Ben L  <bobsayshilol@live.co.uk>\n\n\t* d-demangle.c (dlang_parse_assocarray): Correctly handle error result.\n\t* testsuite/d-demangle-expected: Add testcase.\n\n\t* d-demangle.c (dlang_parse_tuple): Correctly handle error result.\n\t* testsuite/d-demangle-expected: Add testcase.\n\n\t* d-demangle.c (dlang_parse_structlit): Correctly handle error result.\n\t* testsuite/d-demangle-expected: Add testcase.\n\n\t* d-demangle.c (dlang_parse_arrayliteral): Correctly handle error result.\n\t* testsuite/d-demangle-expected: Add testcase.\n\n\t* d-demangle.c (dlang_parse_integer): Fix stack underflow.\n\t* testsuite/d-demangle-expected: Add testcase.\n\n\t* cp-demangle (d_print_comp_inner): Guard against a NULL 'typed_name'.\n\t* testsuite/demangle-expected: Add testcase.\n\n\t* cp-demangle.c (d_encoding): Guard against NULL return values from\n\td_right (dc).\n\t* testsuite/demangle-expected: Add testcase.\n\n\t2019-04-29  Ben L  <bobsayshilol@live.co.uk>\n\n\t* cp-demangle.c (d_expression_1): Don't peek ahead unless the current\n\tchar is valid.\n\t* testsuite/demangle-expected: Add testcase.\n\n\t2019-04-10  Nick Clifton  <nickc@redhat.com>\n\n\tPR 89394\n\t* cp-demangle.c (cplus_demangle_fill_name): Reject negative\n\tlengths.\n\t(d_count_templates_scopes): Replace num_templates and num_scopes\n\tparameters with a struct d_print_info pointer parameter.  Adjust\n\tbody of the function accordingly.  Add recursion counter and check\n\tthat the recursion limit is not reached.\n\t(d_print_init): Pass dpi parameter to d_count_templates_scopes.\n\tReset recursion counter afterwards, unless the recursion limit was\n\treached.",
    "tree": {
      "sha": "5f7d086cc3f1615bcf43c5d6f9054a4f104fca6d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5f7d086cc3f1615bcf43c5d6f9054a4f104fca6d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f211b8c0b91fc7b1657079a495f05a9a4d957821",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f211b8c0b91fc7b1657079a495f05a9a4d957821",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f211b8c0b91fc7b1657079a495f05a9a4d957821",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f211b8c0b91fc7b1657079a495f05a9a4d957821/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f16a9783c5f085443d806646074e9c06fdee9a88",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f16a9783c5f085443d806646074e9c06fdee9a88",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f16a9783c5f085443d806646074e9c06fdee9a88"
    }
  ],
  "stats": {
    "total": 331,
    "additions": 301,
    "deletions": 30
  },
  "files": [
    {
      "sha": "15615559bf978312373c1c798837782bd288b028",
      "filename": "ChangeLog",
      "status": "modified",
      "additions": 78,
      "deletions": 0,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f211b8c0b91fc7b1657079a495f05a9a4d957821/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f211b8c0b91fc7b1657079a495f05a9a4d957821/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ChangeLog?ref=f211b8c0b91fc7b1657079a495f05a9a4d957821",
      "patch": "@@ -1,3 +1,81 @@\n+2019-08-09  Nick Clifton  <nickc@redhat.com>\n+\n+\t* libiberty: Sync with gcc.  Bring in:\n+\t2019-08-08  Martin Liska  <mliska@suse.cz>\n+\n+\tPR bootstrap/91352\n+\t* lrealpath.c (is_valid_fd): New function.\n+\n+\t2019-07-24  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/91228\n+\t* simple-object-elf.c (simple_object_elf_copy_lto_debug_sections):\n+\tFind first '\\0' starting from gnu_lto + 1.\n+\n+\t2019-07-12  Ren Kimura  <rkx1209dev@gmail.com>\n+\n+\t* simple-object-elf.c (simple_object_elf_match): Check zero value shstrndx.\n+\tThis fixes a Bug 90924.\n+\n+\t2019-07-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* simple-object-elf.c (simple_object_elf_copy_lto_debug_sections):\n+\tDo not search for gnu_lto_v1, but search for first '\\0'.\n+\n+\t2019-07-18  Eduard-Mihai Burtescu  <eddyb@lyken.rs>\n+\n+\t* cplus-dem.c: Include rust-demangle.h.\n+\t* rust-demangle.c: Include rust-demangle.h.\n+\t* rust-demangle.h: New file.\n+\n+\t2019-05-31  Michael Forney  <mforney@mforney.org>\n+\n+\t* cp-demangle.c: Don't define CP_DYNAMIC_ARRAYS if __STDC_NO_VLA__\n+\tis non-zero.\n+\n+\t2019-04-30  Ben L  <bobsayshilol@live.co.uk>\n+\n+\t* d-demangle.c (dlang_parse_assocarray): Correctly handle error result.\n+\t* testsuite/d-demangle-expected: Add testcase.\n+\n+\t* d-demangle.c (dlang_parse_tuple): Correctly handle error result.\n+\t* testsuite/d-demangle-expected: Add testcase.\n+\n+\t* d-demangle.c (dlang_parse_structlit): Correctly handle error result.\n+\t* testsuite/d-demangle-expected: Add testcase.\n+\n+\t* d-demangle.c (dlang_parse_arrayliteral): Correctly handle error result.\n+\t* testsuite/d-demangle-expected: Add testcase.\n+\n+\t* d-demangle.c (dlang_parse_integer): Fix stack underflow.\n+\t* testsuite/d-demangle-expected: Add testcase.\n+\n+\t* cp-demangle (d_print_comp_inner): Guard against a NULL 'typed_name'.\n+\t* testsuite/demangle-expected: Add testcase.\n+\n+\t* cp-demangle.c (d_encoding): Guard against NULL return values from\n+\td_right (dc).\n+\t* testsuite/demangle-expected: Add testcase.\n+\n+\t2019-04-29  Ben L  <bobsayshilol@live.co.uk>\n+\n+\t* cp-demangle.c (d_expression_1): Don't peek ahead unless the current\n+\tchar is valid.\n+\t* testsuite/demangle-expected: Add testcase.\n+\n+\t2019-04-10  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 89394\n+\t* cp-demangle.c (cplus_demangle_fill_name): Reject negative\n+\tlengths.\n+\t(d_count_templates_scopes): Replace num_templates and num_scopes\n+\tparameters with a struct d_print_info pointer parameter.  Adjust\n+\tbody of the function accordingly.  Add recursion counter and check\n+\tthat the recursion limit is not reached.\n+\t(d_print_init): Pass dpi parameter to d_count_templates_scopes.\n+\tReset recursion counter afterwards, unless the recursion limit was\n+\treached.\n+\n 2019-07-13  Joel Brobecker  <brobecker@adacore.com>\n \n \t* src-release (getver): If $tool/gdbsupport/create-version.sh"
    },
    {
      "sha": "95cb1525f2c4c1e7a3ddb73e4c90a96ce753f3e1",
      "filename": "libiberty/ChangeLog",
      "status": "modified",
      "additions": 75,
      "deletions": 0,
      "changes": 75,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/ChangeLog?ref=f211b8c0b91fc7b1657079a495f05a9a4d957821",
      "patch": "@@ -1,3 +1,78 @@\n+2019-08-08  Martin Liska  <mliska@suse.cz>\n+\n+\tPR bootstrap/91352\n+\t* lrealpath.c (is_valid_fd): New function.\n+\n+2019-07-24  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/91228\n+\t* simple-object-elf.c (simple_object_elf_copy_lto_debug_sections):\n+\tFind first '\\0' starting from gnu_lto + 1.\n+\n+2019-07-12  Ren Kimura  <rkx1209dev@gmail.com>\n+\n+\t* simple-object-elf.c (simple_object_elf_match): Check zero value shstrndx.\n+\tThis fixes a Bug 90924.\n+\n+2019-07-22  Martin Liska  <mliska@suse.cz>\n+\n+\t* simple-object-elf.c (simple_object_elf_copy_lto_debug_sections):\n+\tDo not search for gnu_lto_v1, but search for first '\\0'.\n+\n+2019-07-18  Eduard-Mihai Burtescu  <eddyb@lyken.rs>\n+\n+\t* cplus-dem.c: Include rust-demangle.h.\n+\t* rust-demangle.c: Include rust-demangle.h.\n+\t* rust-demangle.h: New file.\n+\n+2019-05-31  Michael Forney  <mforney@mforney.org>\n+\n+\t* cp-demangle.c: Don't define CP_DYNAMIC_ARRAYS if __STDC_NO_VLA__\n+\tis non-zero.\n+\n+2019-04-30  Ben L  <bobsayshilol@live.co.uk>\n+\n+\t* d-demangle.c (dlang_parse_assocarray): Correctly handle error result.\n+\t* testsuite/d-demangle-expected: Add testcase.\n+\n+\t* d-demangle.c (dlang_parse_tuple): Correctly handle error result.\n+\t* testsuite/d-demangle-expected: Add testcase.\n+\n+\t* d-demangle.c (dlang_parse_structlit): Correctly handle error result.\n+\t* testsuite/d-demangle-expected: Add testcase.\n+\n+\t* d-demangle.c (dlang_parse_arrayliteral): Correctly handle error result.\n+\t* testsuite/d-demangle-expected: Add testcase.\n+\n+\t* d-demangle.c (dlang_parse_integer): Fix stack underflow.\n+\t* testsuite/d-demangle-expected: Add testcase.\n+\n+\t* cp-demangle (d_print_comp_inner): Guard against a NULL 'typed_name'.\n+\t* testsuite/demangle-expected: Add testcase.\n+\n+\t* cp-demangle.c (d_encoding): Guard against NULL return values from\n+\td_right (dc).\n+\t* testsuite/demangle-expected: Add testcase.\n+\n+2019-04-29  Ben L  <bobsayshilol@live.co.uk>\n+\n+\t* cp-demangle.c (d_expression_1): Don't peek ahead unless the current\n+\tchar is valid.\n+\t* testsuite/demangle-expected: Add testcase.\n+\n+2019-04-10  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 89394\n+\t* cp-demangle.c (cplus_demangle_fill_name): Reject negative\n+\tlengths.\n+\t(d_count_templates_scopes): Replace num_templates and num_scopes\n+\tparameters with a struct d_print_info pointer parameter.  Adjust\n+\tbody of the function accordingly.  Add recursion counter and check\n+\tthat the recursion limit is not reached.\n+\t(d_print_init): Pass dpi parameter to d_count_templates_scopes.\n+\tReset recursion counter afterwards, unless the recursion limit was\n+\treached.\n+\n 2019-04-07  Alan Modra  <amodra@gmail.com>\n \n \t* functions.texi: Regenerate."
    },
    {
      "sha": "aa78c86dd443c5078c5f440ebeaafd01ae3cd8ec",
      "filename": "libiberty/cp-demangle.c",
      "status": "modified",
      "additions": 18,
      "deletions": 11,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/cp-demangle.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/cp-demangle.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/cp-demangle.c?ref=f211b8c0b91fc7b1657079a495f05a9a4d957821",
      "patch": "@@ -192,9 +192,9 @@ static void d_init_info (const char *, int, size_t, struct d_info *);\n #else\n #ifdef __STDC__\n #ifdef __STDC_VERSION__\n-#if __STDC_VERSION__ >= 199901L\n+#if __STDC_VERSION__ >= 199901L && !__STDC_NO_VLA__\n #define CP_DYNAMIC_ARRAYS\n-#endif /* __STDC__VERSION >= 199901L */\n+#endif /* __STDC_VERSION__ >= 199901L && !__STDC_NO_VLA__ */\n #endif /* defined (__STDC_VERSION__) */\n #endif /* defined (__STDC__) */\n #endif /* ! defined (__GNUC__) */\n@@ -1330,8 +1330,14 @@ d_encoding (struct d_info *di, int top_level)\n \t     really apply here; this happens when parsing a class\n \t     which is local to a function.  */\n \t  if (dc->type == DEMANGLE_COMPONENT_LOCAL_NAME)\n-\t    while (is_fnqual_component_type (d_right (dc)->type))\n-\t      d_right (dc) = d_left (d_right (dc));\n+\t    {\n+\t      while (d_right (dc) != NULL\n+\t\t     && is_fnqual_component_type (d_right (dc)->type))\n+\t\td_right (dc) = d_left (d_right (dc));\n+\n+\t      if (d_right (dc) == NULL)\n+\t\tdc = NULL;\n+\t    }\n \t}\n       else\n \t{\n@@ -3359,7 +3365,7 @@ d_expression_1 (struct d_info *di)\n       d_advance (di, 2);\n       if (peek == 't')\n \ttype = cplus_demangle_type (di);\n-      if (!d_peek_next_char (di))\n+      if (!d_peek_char (di) || !d_peek_next_char (di))\n \treturn NULL;\n       return d_make_comp (di, DEMANGLE_COMPONENT_INITIALIZER_LIST,\n \t\t\t  type, d_exprlist (di, 'E'));\n@@ -4761,12 +4767,8 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n \t    typed_name = d_right (typed_name);\n \t    if (typed_name->type == DEMANGLE_COMPONENT_DEFAULT_ARG)\n \t      typed_name = typed_name->u.s_unary_num.sub;\n-\t    if (typed_name == NULL)\n-\t      {\n-\t\td_print_error (dpi);\n-\t\treturn;\n-\t      }\n-\t    while (is_fnqual_component_type (typed_name->type))\n+\t    while (typed_name != NULL\n+\t\t   && is_fnqual_component_type (typed_name->type))\n \t      {\n \t\tif (i >= sizeof adpm / sizeof adpm[0])\n \t\t  {\n@@ -4785,6 +4787,11 @@ d_print_comp_inner (struct d_print_info *dpi, int options,\n \n \t\ttyped_name = d_left (typed_name);\n \t      }\n+\t    if (typed_name == NULL)\n+\t      {\n+\t\td_print_error (dpi);\n+\t\treturn;\n+\t      }\n \t  }\n \n \t/* If typed_name is a template, then it applies to the"
    },
    {
      "sha": "a39e2bf2ed46eaaee01a95b363b46a70be31fc9f",
      "filename": "libiberty/cplus-dem.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/cplus-dem.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/cplus-dem.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/cplus-dem.c?ref=f211b8c0b91fc7b1657079a495f05a9a4d957821",
      "patch": "@@ -52,6 +52,7 @@ void * realloc ();\n #define CURRENT_DEMANGLING_STYLE options\n \n #include \"libiberty.h\"\n+#include \"rust-demangle.h\"\n \n enum demangling_styles current_demangling_style = auto_demangling;\n "
    },
    {
      "sha": "becc402c1f82e68445b134ed4910ff9b664f11ec",
      "filename": "libiberty/d-demangle.c",
      "status": "modified",
      "additions": 17,
      "deletions": 3,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/d-demangle.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/d-demangle.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/d-demangle.c?ref=f211b8c0b91fc7b1657079a495f05a9a4d957821",
      "patch": "@@ -939,8 +939,8 @@ dlang_parse_integer (string *decl, const char *mangled, char type)\n   if (type == 'a' || type == 'u' || type == 'w')\n     {\n       /* Parse character value.  */\n-      char value[10];\n-      int pos = 10;\n+      char value[20];\n+      int pos = sizeof(value);\n       int width = 0;\n       long val;\n \n@@ -991,7 +991,7 @@ dlang_parse_integer (string *decl, const char *mangled, char type)\n \t  for (; width > 0; width--)\n \t    value[--pos] = '0';\n \n-\t  string_appendn (decl, &(value[pos]), 10 - pos);\n+\t  string_appendn (decl, &(value[pos]), sizeof(value) - pos);\n \t}\n       string_append (decl, \"'\");\n     }\n@@ -1191,6 +1191,9 @@ dlang_parse_arrayliteral (string *decl, const char *mangled)\n   while (elements--)\n     {\n       mangled = dlang_value (decl, mangled, NULL, '\\0');\n+      if (mangled == NULL)\n+\treturn NULL;\n+\n       if (elements != 0)\n \tstring_append (decl, \", \");\n     }\n@@ -1214,8 +1217,13 @@ dlang_parse_assocarray (string *decl, const char *mangled)\n   while (elements--)\n     {\n       mangled = dlang_value (decl, mangled, NULL, '\\0');\n+      if (mangled == NULL)\n+\treturn NULL;\n+\n       string_append (decl, \":\");\n       mangled = dlang_value (decl, mangled, NULL, '\\0');\n+      if (mangled == NULL)\n+\treturn NULL;\n \n       if (elements != 0)\n \tstring_append (decl, \", \");\n@@ -1243,6 +1251,9 @@ dlang_parse_structlit (string *decl, const char *mangled, const char *name)\n   while (args--)\n     {\n       mangled = dlang_value (decl, mangled, NULL, '\\0');\n+      if (mangled == NULL)\n+\treturn NULL;\n+\n       if (args != 0)\n \tstring_append (decl, \", \");\n     }\n@@ -1497,6 +1508,9 @@ dlang_parse_tuple (string *decl, const char *mangled)\n   while (elements--)\n     {\n       mangled = dlang_type (decl, mangled);\n+      if (mangled == NULL)\n+\treturn NULL;\n+\n       if (elements != 0)\n \tstring_append (decl, \", \");\n     }"
    },
    {
      "sha": "ac914a7a4f403b09c90416c8e1fa3c6b52c1b48a",
      "filename": "libiberty/lrealpath.c",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/lrealpath.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/lrealpath.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/lrealpath.c?ref=f211b8c0b91fc7b1657079a495f05a9a4d957821",
      "patch": "@@ -49,6 +49,9 @@ components will be simplified.  The returned value will be allocated using\n #ifdef HAVE_STRING_H\n #include <string.h>\n #endif\n+#ifdef HAVE_FCNTL_H\n+#include <fcntl.h>\n+#endif\n \n /* On GNU libc systems the declaration is only visible with _GNU_SOURCE.  */\n #if defined(HAVE_CANONICALIZE_FILE_NAME) \\\n@@ -155,3 +158,16 @@ lrealpath (const char *filename)\n   /* This system is a lost cause, just duplicate the filename.  */\n   return strdup (filename);\n }\n+\n+/* Return true when FD file descriptor exists.  */\n+\n+int\n+is_valid_fd (int fd)\n+{\n+#if defined(_WIN32)\n+  HANDLE h = (HANDLE) _get_osfhandle (fd);\n+  return h != (HANDLE) -1;\n+#else\n+  return fcntl (fd, F_GETFD) >= 0;\n+#endif\n+}"
    },
    {
      "sha": "2302db45b6fbce2798721298f64149a3d3cb68ef",
      "filename": "libiberty/rust-demangle.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/rust-demangle.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/rust-demangle.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/rust-demangle.c?ref=f211b8c0b91fc7b1657079a495f05a9a4d957821",
      "patch": "@@ -47,6 +47,7 @@ extern void *memset(void *s, int c, size_t n);\n \n #include <demangle.h>\n #include \"libiberty.h\"\n+#include \"rust-demangle.h\"\n \n \n /* Mangled Rust symbols look like this:"
    },
    {
      "sha": "abf4c6cde559bc45e3020d86e5c811b46e8f6e05",
      "filename": "libiberty/rust-demangle.h",
      "status": "added",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/rust-demangle.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/rust-demangle.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/rust-demangle.h?ref=f211b8c0b91fc7b1657079a495f05a9a4d957821",
      "patch": "@@ -0,0 +1,45 @@\n+/* Internal demangler interface for the Rust programming language.\n+   Copyright (C) 2016-2019 Free Software Foundation, Inc.\n+   Written by David Tolnay (dtolnay@gmail.com).\n+\n+This file is part of the libiberty library.\n+Libiberty is free software; you can redistribute it and/or\n+modify it under the terms of the GNU Library General Public\n+License as published by the Free Software Foundation; either\n+version 2 of the License, or (at your option) any later version.\n+\n+In addition to the permissions in the GNU Library General Public\n+License, the Free Software Foundation gives you unlimited permission\n+to link the compiled version of this file into combinations with other\n+programs, and to distribute those combinations without any restriction\n+coming from the use of this file.  (The Library Public License\n+restrictions do apply in other respects; for example, they cover\n+modification of the file, and distribution when not linked into a\n+combined executable.)\n+\n+Libiberty is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+Library General Public License for more details.\n+\n+You should have received a copy of the GNU Library General Public\n+License along with libiberty; see the file COPYING.LIB.\n+If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This file provides some definitions shared by cplus-dem.c and\n+   rust-demangle.c.  It should not be included by any other files.  */\n+\n+/* Returns non-zero iff MANGLED is a rust mangled symbol.  MANGLED must\n+   already have been demangled through cplus_demangle_v3.  If this function\n+   returns non-zero then MANGLED can be demangled (in-place) using\n+   RUST_DEMANGLE_SYM.  */\n+extern int\n+rust_is_mangled (const char *mangled);\n+\n+/* Demangles SYM (in-place) if RUST_IS_MANGLED returned non-zero for SYM.\n+   If RUST_IS_MANGLED returned zero for SYM then RUST_DEMANGLE_SYM might\n+   replace characters that cannot be demangled with '?' and might truncate\n+   SYM.  After calling RUST_DEMANGLE_SYM SYM might be shorter, but never\n+   larger.  */\n+extern void\n+rust_demangle_sym (char *sym);"
    },
    {
      "sha": "7515926659694ba930aa0a7d1a22e84b05c117c8",
      "filename": "libiberty/simple-object-elf.c",
      "status": "modified",
      "additions": 17,
      "deletions": 16,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/simple-object-elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/simple-object-elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/simple-object-elf.c?ref=f211b8c0b91fc7b1657079a495f05a9a4d957821",
      "patch": "@@ -548,7 +548,15 @@ simple_object_elf_match (unsigned char header[SIMPLE_OBJECT_MATCH_HEADER_LEN],\n       XDELETE (eor);\n       return NULL;\n     }\n-\n+  \n+  if (eor->shstrndx == 0)\n+    {\n+      *errmsg = \"invalid ELF shstrndx == 0\";\n+      *err = 0;\n+      XDELETE (eor);\n+      return NULL;\n+    }\n+  \n   return (void *) eor;\n }\n \n@@ -1358,9 +1366,8 @@ simple_object_elf_copy_lto_debug_sections (simple_object_read *sobj,\n \t  return errmsg;\n \t}\n \n-      /* If we are processing .symtab purge __gnu_lto_v1 and\n-\t __gnu_lto_slim symbols from it and any symbols in discarded\n-\t sections.  */\n+      /* If we are processing .symtab purge __gnu_lto_slim symbol\n+\t from it and any symbols in discarded sections.  */\n       if (sh_type == SHT_SYMTAB)\n \t{\n \t  unsigned entsize = ELF_FETCH_FIELD (type_functions, ei_class, Shdr,\n@@ -1380,14 +1387,9 @@ simple_object_elf_copy_lto_debug_sections (simple_object_read *sobj,\n \t\t\t\t       sobj->offset + stroff,\n \t\t\t\t       (unsigned char *)strings,\n \t\t\t\t       strsz, &errmsg, err);\n-\t  /* Find gnu_lto_ in strings.  */\n-\t  while ((gnu_lto = (char *) memchr (gnu_lto, 'g',\n-\t\t\t\t\t     strings + strsz - gnu_lto)))\n-\t    if (strncmp (gnu_lto, \"gnu_lto_v1\",\n-\t\t\t strings + strsz - gnu_lto) == 0)\n-\t      break;\n-\t    else\n-\t      gnu_lto++;\n+\t  /* Find first '\\0' in strings.  */\n+\t  gnu_lto = (char *) memchr (gnu_lto + 1, '\\0',\n+\t\t\t\t     strings + strsz - gnu_lto);\n \t  /* Read the section index table if present.  */\n \t  if (symtab_indices_shndx[i - 1] != 0)\n \t    {\n@@ -1461,10 +1463,9 @@ simple_object_elf_copy_lto_debug_sections (simple_object_read *sobj,\n \t\t\t undefined and sharing the gnu_lto_ name.  */\n \t\t      bind = STB_WEAK;\n \t\t      other = STV_HIDDEN;\n-\t\t      if (gnu_lto)\n-\t\t\tELF_SET_FIELD (type_functions, ei_class, Sym,\n-\t\t\t\t       ent, st_name, Elf_Word,\n-\t\t\t\t       gnu_lto - strings);\n+\t\t      ELF_SET_FIELD (type_functions, ei_class, Sym,\n+\t\t\t\t     ent, st_name, Elf_Word,\n+\t\t\t\t     gnu_lto - strings);\n \t\t      ELF_SET_FIELD (type_functions, ei_class, Sym,\n \t\t\t\t     ent, st_shndx, Elf_Half, SHN_UNDEF);\n \t\t    }"
    },
    {
      "sha": "490d4e1493144280d6377ed77ed32a63ae00a147",
      "filename": "libiberty/testsuite/d-demangle-expected",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/testsuite/d-demangle-expected",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/testsuite/d-demangle-expected",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/testsuite/d-demangle-expected?ref=f211b8c0b91fc7b1657079a495f05a9a4d957821",
      "patch": "@@ -1306,3 +1306,23 @@ rt.lifetime._d_newarrayOpT!(_d_newarrayiT)._d_newarrayOpT(const(TypeInfo), ulong\n --format=dlang\n _D4core8demangle16__T6mangleTFZPvZ6mangleFNaNbNfAxaAaZ11DotSplitter5emptyMxFNaNbNdNiNfZb\n core.demangle.mangle!(void*() function).mangle(const(char)[], char[]).DotSplitter.empty() const\n+# Could crash\n+--format=dlang\n+_D8__T2fnVa8888888888888_\n+_D8__T2fnVa8888888888888_\n+# Could crash\n+--format=dlang\n+_D5__T2fnVmA1A1A911111111D\n+_D5__T2fnVmA1A1A911111111D\n+# Could crash\n+--format=dlang\n+_D7__T2fnVlS8S588888888888S6S5\n+_D7__T2fnVlS8S588888888888S6S5\n+# Could crash\n+--format=dlang\n+_D1_B699999999961*\n+_D1_B699999999961*\n+# Could crash\n+--format=dlang\n+_D5__T1fVHacA6666666666_\n+_D5__T1fVHacA6666666666_"
    },
    {
      "sha": "f21ed00e559a235d5d6183ac7bc44f7495e2f3ce",
      "filename": "libiberty/testsuite/demangle-expected",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/testsuite/demangle-expected",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f211b8c0b91fc7b1657079a495f05a9a4d957821/libiberty/testsuite/demangle-expected",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libiberty/testsuite/demangle-expected?ref=f211b8c0b91fc7b1657079a495f05a9a4d957821",
      "patch": "@@ -68,6 +68,19 @@ _$_H1R\n \n _Q8ccQ4M2e.\n _Q8ccQ4M2e.\n+# Could crash\n+\n+_ZmmAtl\n+_ZmmAtl\n+# Could crash\n+--no-params\n+_ZZaSFvOEES_\n+_ZZaSFvOEES_\n+_ZZaSFvOEES_\n+# Could crash\n+\n+_ZZeqFvOEES_z\n+_ZZeqFvOEES_z\n #\n # demangler/80513 Test for bogus characters after __thunk_\n "
    }
  ]
}