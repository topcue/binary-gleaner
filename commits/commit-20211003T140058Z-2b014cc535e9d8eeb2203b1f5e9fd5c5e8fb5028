{
  "sha": "2b014cc535e9d8eeb2203b1f5e9fd5c5e8fb5028",
  "node_id": "C_kwDOANOeidoAKDJiMDE0Y2M1MzVlOWQ4ZWViMjIwM2IxZjVlOWZkNWM1ZThmYjUwMjg",
  "commit": {
    "author": {
      "name": "Lancelot SIX",
      "email": "lsix@lancelotsix.com",
      "date": "2021-09-27T21:56:58Z"
    },
    "committer": {
      "name": "Lancelot SIX",
      "email": "lsix@lancelotsix.com",
      "date": "2021-10-03T14:00:58Z"
    },
    "message": "gdb: Support the c.mv insn in the riscv prologue scanner.\n\nWhile working on other problems, I encountered situations where GDB\nfails to properly unwind the stack because some functions use the C.MV\ninstruction in the prologue.  The prologue scanner stops when it hits\nthis instruction assuming its job is done at this point.  Unfortunately\nthe prologue is not necessarily finished yet, preventing GDB to properly\nunwind.\n\nThis commit adds support for handling such instruction in\nriscv_scan_prologue.\n\nNote that C.MV is part of the compressed instruction set.  The MV\ncounterpart from the base ISA is a pseudo instruction that expands to\n'ADDI RD,RS1,0' which is already supported.\n\nTested on riscv64-linux-gnu.\n\nAll feedback are welcome.",
    "tree": {
      "sha": "deac1d41f717e0b6c198964e868fee9e70bb7d23",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/deac1d41f717e0b6c198964e868fee9e70bb7d23"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2b014cc535e9d8eeb2203b1f5e9fd5c5e8fb5028",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2b014cc535e9d8eeb2203b1f5e9fd5c5e8fb5028",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2b014cc535e9d8eeb2203b1f5e9fd5c5e8fb5028",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2b014cc535e9d8eeb2203b1f5e9fd5c5e8fb5028/comments",
  "author": {
    "login": "lsix",
    "id": 724339,
    "node_id": "MDQ6VXNlcjcyNDMzOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/724339?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsix",
    "html_url": "https://github.com/lsix",
    "followers_url": "https://api.github.com/users/lsix/followers",
    "following_url": "https://api.github.com/users/lsix/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsix/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsix/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsix/subscriptions",
    "organizations_url": "https://api.github.com/users/lsix/orgs",
    "repos_url": "https://api.github.com/users/lsix/repos",
    "events_url": "https://api.github.com/users/lsix/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsix/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "lsix",
    "id": 724339,
    "node_id": "MDQ6VXNlcjcyNDMzOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/724339?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsix",
    "html_url": "https://github.com/lsix",
    "followers_url": "https://api.github.com/users/lsix/followers",
    "following_url": "https://api.github.com/users/lsix/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsix/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsix/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsix/subscriptions",
    "organizations_url": "https://api.github.com/users/lsix/orgs",
    "repos_url": "https://api.github.com/users/lsix/repos",
    "events_url": "https://api.github.com/users/lsix/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsix/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d4e8e096a57a6384a5e0e97ade6f77bf1d418a90",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4e8e096a57a6384a5e0e97ade6f77bf1d418a90",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d4e8e096a57a6384a5e0e97ade6f77bf1d418a90"
    }
  ],
  "stats": {
    "total": 133,
    "additions": 132,
    "deletions": 1
  },
  "files": [
    {
      "sha": "b8844b61aae1eb8a0f6193260f6d975aa6743370",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b014cc535e9d8eeb2203b1f5e9fd5c5e8fb5028/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b014cc535e9d8eeb2203b1f5e9fd5c5e8fb5028/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=2b014cc535e9d8eeb2203b1f5e9fd5c5e8fb5028",
      "patch": "@@ -1411,6 +1411,7 @@ class riscv_insn\n       SW,\n       LD,\n       LW,\n+      MV,\n       /* These are needed for software breakpoint support.  */\n       JAL,\n       JALR,\n@@ -1789,9 +1790,11 @@ riscv_insn::decode (struct gdbarch *gdbarch, CORE_ADDR pc)\n       else if (xlen != 4 && is_c_sdsp_insn (ival))\n \tdecode_css_type_insn (SD, ival, EXTRACT_CSSTYPE_SDSP_IMM (ival));\n       /* C_JR and C_MV have the same opcode.  If RS2 is 0, then this is a C_JR.\n-\t So must try to match C_JR first as it ahs more bits in mask.  */\n+\t So must try to match C_JR first as it has more bits in mask.  */\n       else if (is_c_jr_insn (ival))\n \tdecode_cr_type_insn (JALR, ival);\n+      else if (is_c_mv_insn (ival))\n+\tdecode_cr_type_insn (MV, ival);\n       else if (is_c_j_insn (ival))\n \tdecode_cj_type_insn (JAL, ival);\n       else if (is_c_beqz_insn (ival))\n@@ -1964,6 +1967,14 @@ riscv_scan_prologue (struct gdbarch *gdbarch,\n \t\t\t\t\t    insn.imm_signed ()),\n \t\t\t   (insn.opcode () == riscv_insn::LW ? 4 : 8));\n \t}\n+      else if (insn.opcode () == riscv_insn::MV)\n+\t{\n+\t  /* Handle: c.mv RD, RS2  */\n+\t  gdb_assert (insn.rd () < RISCV_NUM_INTEGER_REGS);\n+\t  gdb_assert (insn.rs2 () < RISCV_NUM_INTEGER_REGS);\n+\t  gdb_assert (insn.rs2 () > 0);\n+\t  regs[insn.rd ()] = regs[insn.rs2 ()];\n+\t}\n       else\n \t{\n \t  end_prologue_addr = cur_pc;"
    },
    {
      "sha": "bb8a8ee521e53d7c8e20a2c66730e00330f99a25",
      "filename": "gdb/testsuite/gdb.arch/riscv64-unwind-prologue-with-mv.c",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b014cc535e9d8eeb2203b1f5e9fd5c5e8fb5028/gdb/testsuite/gdb.arch/riscv64-unwind-prologue-with-mv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b014cc535e9d8eeb2203b1f5e9fd5c5e8fb5028/gdb/testsuite/gdb.arch/riscv64-unwind-prologue-with-mv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/riscv64-unwind-prologue-with-mv.c?ref=2b014cc535e9d8eeb2203b1f5e9fd5c5e8fb5028",
      "patch": "@@ -0,0 +1,29 @@\n+/* Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* See riscv64-unwind-prologue-with-mv.s for implementation.  */\n+\n+extern int bar ();\n+\n+/* See riscv64-unwind-prologue-with-mv.s for implementation.  */\n+\n+extern int foo ();\n+\n+int\n+main ()\n+{\n+  return foo ();\n+}\n+"
    },
    {
      "sha": "47429ba10558b2fe596596651fae4f17155e966c",
      "filename": "gdb/testsuite/gdb.arch/riscv64-unwind-prologue-with-mv.exp",
      "status": "added",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b014cc535e9d8eeb2203b1f5e9fd5c5e8fb5028/gdb/testsuite/gdb.arch/riscv64-unwind-prologue-with-mv.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b014cc535e9d8eeb2203b1f5e9fd5c5e8fb5028/gdb/testsuite/gdb.arch/riscv64-unwind-prologue-with-mv.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/riscv64-unwind-prologue-with-mv.exp?ref=2b014cc535e9d8eeb2203b1f5e9fd5c5e8fb5028",
      "patch": "@@ -0,0 +1,44 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This tests GDB's ability to use the RISC-V prologue scanner in order to\n+# unwind through a function that uses the 'c.mv' instruction in its prologue.\n+\n+if {![istarget \"riscv64-*-*\"]} {\n+    verbose \"Skipping ${gdb_test_file_name}.\"\n+    return\n+}\n+\n+standard_testfile .c .s\n+if {[prepare_for_testing \"failed to prepare\" $testfile \\\n+\t\t\t \"$srcfile $srcfile2\"  nodebug]} {\n+    return -1\n+}\n+\n+if ![runto_main] then {\n+    fail \"can't run to main\"\n+    return 0\n+}\n+\n+gdb_breakpoint \"bar\"\n+gdb_continue_to_breakpoint \"bar\"\n+gdb_test \"bt\" \\\n+    [multi_line \\\n+         \"#0\\[ \\t\\]*$hex in bar \\\\\\(\\\\\\)\" \\\n+         \"#1\\[ \\t\\]*$hex in foo \\\\\\(\\\\\\)\" \\\n+         \"#2\\[ \\t\\]*$hex in main \\\\\\(\\\\\\)\"] \\\n+    \"Backtrace to the main frame\"\n+gdb_test \"finish\" \"foo \\\\\\(\\\\\\)\" \"finish bar\"\n+gdb_test \"finish\" \"main \\\\\\(\\\\\\)\" \"finish foo\""
    },
    {
      "sha": "a1ec538ae2a49aba3b8344e42b674b5accdd8bf7",
      "filename": "gdb/testsuite/gdb.arch/riscv64-unwind-prologue-with-mv.s",
      "status": "added",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b014cc535e9d8eeb2203b1f5e9fd5c5e8fb5028/gdb/testsuite/gdb.arch/riscv64-unwind-prologue-with-mv.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b014cc535e9d8eeb2203b1f5e9fd5c5e8fb5028/gdb/testsuite/gdb.arch/riscv64-unwind-prologue-with-mv.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/riscv64-unwind-prologue-with-mv.s?ref=2b014cc535e9d8eeb2203b1f5e9fd5c5e8fb5028",
      "patch": "@@ -0,0 +1,47 @@\n+/* Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This testcase contains a function where the 'c.mv' instruction is used in\n+   the prologue.\n+\n+   The following functions are roughly equivalent to the following C code (with\n+   prologue crafted to contain the c.mv instruction):\n+\n+     int bar () { return 0; }\n+     int foo () { return bar (); } */\n+\n+\t.option pic\n+\t.text\n+\t.align\t1\n+\t.globl\tbar\n+\t.type\tbar, @function\n+bar:\n+\tli\ta0,0\n+\tjr\tra\n+\t.size\tbar, .-bar\n+\n+\t.align\t1\n+\t.globl\tfoo\n+\t.type\tfoo, @function\n+foo:\n+\taddi\tsp,sp,-32\n+\tc.mv\tt3,ra\n+\tsd\tt3,8(sp)\n+\tcall\tbar\n+\tld\tt3,8(sp)\n+\tmv\tra,t3\n+\taddi\tsp,sp,32\n+\tjr\tra\n+\t.size\tfoo, .-foo"
    }
  ]
}