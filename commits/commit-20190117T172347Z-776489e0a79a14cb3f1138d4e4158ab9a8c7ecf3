{
  "sha": "776489e0a79a14cb3f1138d4e4158ab9a8c7ecf3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Nzc2NDg5ZTBhNzlhMTRjYjNmMTEzOGQ0ZTQxNThhYjlhOGM3ZWNmMw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-17T04:46:00Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-17T17:23:47Z"
    },
    "message": "Remove cleanups from solib-target.c\n\nThis removes the remaining cleanups from solib-target.c, plus a VEC,\nby using std::vector and std::unique_ptr.\n\nTested by the buildbot.\n\ngdb/ChangeLog\n2019-01-17  Tom Tromey  <tom@tromey.com>\n\n\t* solib-target.c (lm_info_target_p): Remove typedef.  Don't\n\tdeclare VEC.\n\t(solib_target_parse_libraries): Change return type.\n\t(library_list_start_segment, library_list_start_section)\n\t(library_list_end_library, library_list_start_library); Update.\n\t(solib_target_free_library_list): Remove.\n\t(solib_target_parse_libraries): Remove cleanup.  Change return\n\ttype.\n\t(solib_target_current_sos): Update.",
    "tree": {
      "sha": "5cda9f425fa02ab6e7f980ca81d8d7c139ca1497",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5cda9f425fa02ab6e7f980ca81d8d7c139ca1497"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/776489e0a79a14cb3f1138d4e4158ab9a8c7ecf3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/776489e0a79a14cb3f1138d4e4158ab9a8c7ecf3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/776489e0a79a14cb3f1138d4e4158ab9a8c7ecf3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/776489e0a79a14cb3f1138d4e4158ab9a8c7ecf3/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6471e7d23de333a63a119220d59b920c6aaef562",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6471e7d23de333a63a119220d59b920c6aaef562",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6471e7d23de333a63a119220d59b920c6aaef562"
    }
  ],
  "stats": {
    "total": 80,
    "additions": 34,
    "deletions": 46
  },
  "files": [
    {
      "sha": "d05ff7f591097b6d7351f304476427881b841181",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/776489e0a79a14cb3f1138d4e4158ab9a8c7ecf3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/776489e0a79a14cb3f1138d4e4158ab9a8c7ecf3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=776489e0a79a14cb3f1138d4e4158ab9a8c7ecf3",
      "patch": "@@ -1,3 +1,15 @@\n+2019-01-17  Tom Tromey  <tom@tromey.com>\n+\n+\t* solib-target.c (lm_info_target_p): Remove typedef.  Don't\n+\tdeclare VEC.\n+\t(solib_target_parse_libraries): Change return type.\n+\t(library_list_start_segment, library_list_start_section)\n+\t(library_list_end_library, library_list_start_library); Update.\n+\t(solib_target_free_library_list): Remove.\n+\t(solib_target_parse_libraries): Remove cleanup.  Change return\n+\ttype.\n+\t(solib_target_current_sos): Update.\n+\n 2019-01-17  Tom Tromey  <tromey@bapiya>\n \n \t* valprint.c: Replace \"the the\" with \"the\"."
    },
    {
      "sha": "51cb6ca1552905804e8fbd9a5043262ed5b2ab90",
      "filename": "gdb/solib-target.c",
      "status": "modified",
      "additions": 22,
      "deletions": 46,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/776489e0a79a14cb3f1138d4e4158ab9a8c7ecf3/gdb/solib-target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/776489e0a79a14cb3f1138d4e4158ab9a8c7ecf3/gdb/solib-target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-target.c?ref=776489e0a79a14cb3f1138d4e4158ab9a8c7ecf3",
      "patch": "@@ -50,12 +50,11 @@ struct lm_info_target : public lm_info_base\n   section_offsets *offsets = NULL;\n };\n \n-typedef lm_info_target *lm_info_target_p;\n-DEF_VEC_P(lm_info_target_p);\n+typedef std::vector<std::unique_ptr<lm_info_target>> lm_info_vector;\n \n #if !defined(HAVE_LIBEXPAT)\n \n-static VEC(lm_info_target_p) *\n+static lm_info_vector\n solib_target_parse_libraries (const char *library)\n {\n   static int have_warned;\n@@ -67,7 +66,7 @@ solib_target_parse_libraries (const char *library)\n \t\t \"at compile time\"));\n     }\n \n-  return NULL;\n+  return lm_info_vector ();\n }\n \n #else /* HAVE_LIBEXPAT */\n@@ -82,8 +81,8 @@ library_list_start_segment (struct gdb_xml_parser *parser,\n \t\t\t    void *user_data,\n \t\t\t    std::vector<gdb_xml_value> &attributes)\n {\n-  VEC(lm_info_target_p) **list = (VEC(lm_info_target_p) **) user_data;\n-  lm_info_target *last = VEC_last (lm_info_target_p, *list);\n+  lm_info_vector *list = (lm_info_vector *) user_data;\n+  lm_info_target *last = list->back ().get ();\n   ULONGEST *address_p\n     = (ULONGEST *) xml_find_attribute (attributes, \"address\")->value.get ();\n   CORE_ADDR address = (CORE_ADDR) *address_p;\n@@ -101,8 +100,8 @@ library_list_start_section (struct gdb_xml_parser *parser,\n \t\t\t    void *user_data,\n \t\t\t    std::vector<gdb_xml_value> &attributes)\n {\n-  VEC(lm_info_target_p) **list = (VEC(lm_info_target_p) **) user_data;\n-  lm_info_target *last = VEC_last (lm_info_target_p, *list);\n+  lm_info_vector *list = (lm_info_vector *) user_data;\n+  lm_info_target *last = list->back ().get ();\n   ULONGEST *address_p\n     = (ULONGEST *) xml_find_attribute (attributes, \"address\")->value.get ();\n   CORE_ADDR address = (CORE_ADDR) *address_p;\n@@ -122,21 +121,21 @@ library_list_start_library (struct gdb_xml_parser *parser,\n \t\t\t    void *user_data,\n \t\t\t    std::vector<gdb_xml_value> &attributes)\n {\n-  VEC(lm_info_target_p) **list = (VEC(lm_info_target_p) **) user_data;\n+  lm_info_vector *list = (lm_info_vector *) user_data;\n   lm_info_target *item = new lm_info_target;\n   item->name\n     = (const char *) xml_find_attribute (attributes, \"name\")->value.get ();\n \n-  VEC_safe_push (lm_info_target_p, *list, item);\n+  list->emplace_back (item);\n }\n \n static void\n library_list_end_library (struct gdb_xml_parser *parser,\n \t\t\t  const struct gdb_xml_element *element,\n \t\t\t  void *user_data, const char *body_text)\n {\n-  VEC(lm_info_target_p) **list = (VEC(lm_info_target_p) **) user_data;\n-  lm_info_target *lm_info = VEC_last (lm_info_target_p, *list);\n+  lm_info_vector *list = (lm_info_vector *) user_data;\n+  lm_info_target *lm_info = list->back ().get ();\n \n   if (lm_info->segment_bases.empty () && lm_info->section_bases.empty ())\n     gdb_xml_error (parser, _(\"No segment or section bases defined\"));\n@@ -165,22 +164,6 @@ library_list_start_list (struct gdb_xml_parser *parser,\n     }\n }\n \n-/* Discard the constructed library list.  */\n-\n-static void\n-solib_target_free_library_list (void *p)\n-{\n-  VEC(lm_info_target_p) **result = (VEC(lm_info_target_p) **) p;\n-  lm_info_target *info;\n-  int ix;\n-\n-  for (ix = 0; VEC_iterate (lm_info_target_p, *result, ix, info); ix++)\n-    delete info;\n-\n-  VEC_free (lm_info_target_p, *result);\n-  *result = NULL;\n-}\n-\n /* The allowed elements and attributes for an XML library list.\n    The root element is a <library-list>.  */\n \n@@ -227,33 +210,27 @@ static const struct gdb_xml_element library_list_elements[] = {\n   { NULL, NULL, NULL, GDB_XML_EF_NONE, NULL, NULL }\n };\n \n-static VEC(lm_info_target_p) *\n+static lm_info_vector\n solib_target_parse_libraries (const char *library)\n {\n-  VEC(lm_info_target_p) *result = NULL;\n-  struct cleanup *back_to = make_cleanup (solib_target_free_library_list,\n-\t\t\t\t\t  &result);\n+  lm_info_vector result;\n \n   if (gdb_xml_parse_quick (_(\"target library list\"), \"library-list.dtd\",\n \t\t\t   library_list_elements, library, &result) == 0)\n     {\n-      /* Parsed successfully, keep the result.  */\n-      discard_cleanups (back_to);\n+      /* Parsed successfully.  */\n       return result;\n     }\n \n-  do_cleanups (back_to);\n-  return NULL;\n+  result.clear ();\n+  return result;\n }\n #endif\n \n static struct so_list *\n solib_target_current_sos (void)\n {\n   struct so_list *new_solib, *start = NULL, *last = NULL;\n-  VEC(lm_info_target_p) *library_list;\n-  lm_info_target *info;\n-  int ix;\n \n   /* Fetch the list of shared libraries.  */\n   gdb::optional<gdb::char_vector> library_document\n@@ -263,13 +240,14 @@ solib_target_current_sos (void)\n     return NULL;\n \n   /* Parse the list.  */\n-  library_list = solib_target_parse_libraries (library_document->data ());\n+  lm_info_vector library_list\n+    = solib_target_parse_libraries (library_document->data ());\n \n-  if (library_list == NULL)\n+  if (library_list.empty ())\n     return NULL;\n \n   /* Build a struct so_list for each entry on the list.  */\n-  for (ix = 0; VEC_iterate (lm_info_target_p, library_list, ix, info); ix++)\n+  for (auto &&info : library_list)\n     {\n       new_solib = XCNEW (struct so_list);\n       strncpy (new_solib->so_name, info->name.c_str (),\n@@ -278,11 +256,12 @@ solib_target_current_sos (void)\n       strncpy (new_solib->so_original_name, info->name.c_str (),\n \t       SO_NAME_MAX_PATH_SIZE - 1);\n       new_solib->so_original_name[SO_NAME_MAX_PATH_SIZE - 1] = '\\0';\n-      new_solib->lm_info = info;\n \n       /* We no longer need this copy of the name.  */\n       info->name.clear ();\n \n+      new_solib->lm_info = info.release ();\n+\n       /* Add it to the list.  */\n       if (!start)\n \tlast = start = new_solib;\n@@ -293,9 +272,6 @@ solib_target_current_sos (void)\n \t}\n     }\n \n-  /* Free the library list, but not its members.  */\n-  VEC_free (lm_info_target_p, library_list);\n-\n   return start;\n }\n "
    }
  ]
}