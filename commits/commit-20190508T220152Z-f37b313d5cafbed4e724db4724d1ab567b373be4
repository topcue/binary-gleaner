{
  "sha": "f37b313d5cafbed4e724db4724d1ab567b373be4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjM3YjMxM2Q1Y2FmYmVkNGU3MjRkYjQ3MjRkMWFiNTY3YjM3M2JlNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-05-01T21:18:31Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-05-08T22:01:52Z"
    },
    "message": "Convert ada-lang.c to type-safe registry API\n\nThis changes ada-lang.c to use the type-safe registry API.\n\ngdb/ChangeLog\n2019-05-08  Tom Tromey  <tom@tromey.com>\n\n\t* ada-lang.c (struct ada_inferior_data): Add initializers.\n\t(ada_inferior_data): Change type.\n\t(ada_inferior_data_cleanup): Remove.\n\t(get_ada_inferior_data, ada_inferior_exit)\n\t(struct ada_pspace_data): Add initializers, destructor.\n\t(ada_pspace_data_handle): Change type.\n\t(get_ada_pspace_data): Update.\n\t(ada_pspace_data_cleanup): Remove.",
    "tree": {
      "sha": "a2e223f5e83ec9568e306541408b3529df32ae8d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a2e223f5e83ec9568e306541408b3529df32ae8d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f37b313d5cafbed4e724db4724d1ab567b373be4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f37b313d5cafbed4e724db4724d1ab567b373be4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f37b313d5cafbed4e724db4724d1ab567b373be4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f37b313d5cafbed4e724db4724d1ab567b373be4/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "246994051b6659bf9f4c89b5d5ede86717c5bbef",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/246994051b6659bf9f4c89b5d5ede86717c5bbef",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/246994051b6659bf9f4c89b5d5ede86717c5bbef"
    }
  ],
  "stats": {
    "total": 74,
    "additions": 27,
    "deletions": 47
  },
  "files": [
    {
      "sha": "4e6762afbcfda55016c85643ef48bae1f2640098",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37b313d5cafbed4e724db4724d1ab567b373be4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37b313d5cafbed4e724db4724d1ab567b373be4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f37b313d5cafbed4e724db4724d1ab567b373be4",
      "patch": "@@ -1,3 +1,14 @@\n+2019-05-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* ada-lang.c (struct ada_inferior_data): Add initializers.\n+\t(ada_inferior_data): Change type.\n+\t(ada_inferior_data_cleanup): Remove.\n+\t(get_ada_inferior_data, ada_inferior_exit)\n+\t(struct ada_pspace_data): Add initializers, destructor.\n+\t(ada_pspace_data_handle): Change type.\n+\t(get_ada_pspace_data): Update.\n+\t(ada_pspace_data_cleanup): Remove.\n+\n 2019-05-08  Tom Tromey  <tom@tromey.com>\n \n \t* coffread.c (struct coff_symfile_info): Add initializers."
    },
    {
      "sha": "e513280a415d5368a9a8ddd3d416637f88016847",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 16,
      "deletions": 47,
      "changes": 63,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f37b313d5cafbed4e724db4724d1ab567b373be4/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f37b313d5cafbed4e724db4724d1ab567b373be4/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=f37b313d5cafbed4e724db4724d1ab567b373be4",
      "patch": "@@ -378,27 +378,16 @@ struct ada_inferior_data\n      tagged types.  With older versions of GNAT, this type was directly\n      accessible through a component (\"tsd\") in the object tag.  But this\n      is no longer the case, so we cache it for each inferior.  */\n-  struct type *tsd_type;\n+  struct type *tsd_type = nullptr;\n \n   /* The exception_support_info data.  This data is used to determine\n      how to implement support for Ada exception catchpoints in a given\n      inferior.  */\n-  const struct exception_support_info *exception_info;\n+  const struct exception_support_info *exception_info = nullptr;\n };\n \n /* Our key to this module's inferior data.  */\n-static const struct inferior_data *ada_inferior_data;\n-\n-/* A cleanup routine for our inferior data.  */\n-static void\n-ada_inferior_data_cleanup (struct inferior *inf, void *arg)\n-{\n-  struct ada_inferior_data *data;\n-\n-  data = (struct ada_inferior_data *) inferior_data (inf, ada_inferior_data);\n-  if (data != NULL)\n-    xfree (data);\n-}\n+static const struct inferior_key<ada_inferior_data> ada_inferior_data;\n \n /* Return our inferior data for the given inferior (INF).\n \n@@ -413,12 +402,9 @@ get_ada_inferior_data (struct inferior *inf)\n {\n   struct ada_inferior_data *data;\n \n-  data = (struct ada_inferior_data *) inferior_data (inf, ada_inferior_data);\n+  data = ada_inferior_data.get (inf);\n   if (data == NULL)\n-    {\n-      data = XCNEW (struct ada_inferior_data);\n-      set_inferior_data (inf, ada_inferior_data, data);\n-    }\n+    data = ada_inferior_data.emplace (inf);\n \n   return data;\n }\n@@ -429,8 +415,7 @@ get_ada_inferior_data (struct inferior *inf)\n static void\n ada_inferior_exit (struct inferior *inf)\n {\n-  ada_inferior_data_cleanup (inf, NULL);\n-  set_inferior_data (inf, ada_inferior_data, NULL);\n+  ada_inferior_data.clear (inf);\n }\n \n \n@@ -439,12 +424,18 @@ ada_inferior_exit (struct inferior *inf)\n /* This module's per-program-space data.  */\n struct ada_pspace_data\n {\n+  ~ada_pspace_data ()\n+  {\n+    if (sym_cache != NULL)\n+      ada_free_symbol_cache (sym_cache);\n+  }\n+\n   /* The Ada symbol cache.  */\n-  struct ada_symbol_cache *sym_cache;\n+  struct ada_symbol_cache *sym_cache = nullptr;\n };\n \n /* Key to our per-program-space data.  */\n-static const struct program_space_data *ada_pspace_data_handle;\n+static const struct program_space_key<ada_pspace_data> ada_pspace_data_handle;\n \n /* Return this module's data for the given program space (PSPACE).\n    If not is found, add a zero'ed one now.\n@@ -456,29 +447,13 @@ get_ada_pspace_data (struct program_space *pspace)\n {\n   struct ada_pspace_data *data;\n \n-  data = ((struct ada_pspace_data *)\n-\t  program_space_data (pspace, ada_pspace_data_handle));\n+  data = ada_pspace_data_handle.get (pspace);\n   if (data == NULL)\n-    {\n-      data = XCNEW (struct ada_pspace_data);\n-      set_program_space_data (pspace, ada_pspace_data_handle, data);\n-    }\n+    data = ada_pspace_data_handle.emplace (pspace);\n \n   return data;\n }\n \n-/* The cleanup callback for this module's per-program-space data.  */\n-\n-static void\n-ada_pspace_data_cleanup (struct program_space *pspace, void *data)\n-{\n-  struct ada_pspace_data *pspace_data = (struct ada_pspace_data *) data;\n-\n-  if (pspace_data->sym_cache != NULL)\n-    ada_free_symbol_cache (pspace_data->sym_cache);\n-  xfree (pspace_data);\n-}\n-\n                         /* Utilities */\n \n /* If TYPE is a TYPE_CODE_TYPEDEF type, return the target type after\n@@ -14648,10 +14623,4 @@ DWARF attribute.\"),\n   gdb::observers::new_objfile.attach (ada_new_objfile_observer);\n   gdb::observers::free_objfile.attach (ada_free_objfile_observer);\n   gdb::observers::inferior_exit.attach (ada_inferior_exit);\n-\n-  /* Setup various context-specific data.  */\n-  ada_inferior_data\n-    = register_inferior_data_with_cleanup (NULL, ada_inferior_data_cleanup);\n-  ada_pspace_data_handle\n-    = register_program_space_data_with_cleanup (NULL, ada_pspace_data_cleanup);\n }"
    }
  ]
}