{
  "sha": "22f80c0f77be6304b9632827d8161e28cb4a195a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjJmODBjMGY3N2JlNjMwNGI5NjMyODI3ZDgxNjFlMjhjYjRhMTk1YQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-04-22T13:16:36Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-04-22T13:16:36Z"
    },
    "message": "Improve code coverage of Rust testing\n\nI enabled code coverage and ran the gdb test suite, and noticed that\nthe new Rust parser was missing testing on a few lines that were easy\nto cover.  This patch mostly adds tests for certain syntax errors; but\nthis process also uncovered a couple of real bugs: I must have\ncut-and-pasted the 'sizeof' parsing code from some other code, because\nit is checking for KW_MUT (the old bison parser did not do this), and\nthe array length check is actually impossible because a negative\nnumber like '-1' is parsed as two tokens.\n\ngdb/ChangeLog\n2021-04-22  Tom Tromey  <tom@tromey.com>\n\n\t* rust-parse.c (rust_parser::parse_sizeof): Remove KW_MUT code.\n\t(struct typed_val_int) <val>: Now ULONGEST.\n\t(rust_parser::parse_array_type): Remove negative check.\n\t(rust_lex_int_test): Change 'value' to ULONGEST.\n\ngdb/testsuite/ChangeLog\n2021-04-22  Tom Tromey  <tom@tromey.com>\n\n\t* gdb.rust/modules.exp: Add checks for syntax errors.\n\t* gdb.rust/expr.exp: Add checks for syntax errors.\n\t* gdb.rust/simple.exp: Add checks for syntax errors.",
    "tree": {
      "sha": "15a04368f45009943a10d976eb442c761c257dc6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/15a04368f45009943a10d976eb442c761c257dc6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/22f80c0f77be6304b9632827d8161e28cb4a195a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22f80c0f77be6304b9632827d8161e28cb4a195a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/22f80c0f77be6304b9632827d8161e28cb4a195a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22f80c0f77be6304b9632827d8161e28cb4a195a/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b11b2969a9a507d9e42c8029cfeb06b9bc41fceb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b11b2969a9a507d9e42c8029cfeb06b9bc41fceb"
    }
  ],
  "stats": {
    "total": 49,
    "additions": 41,
    "deletions": 8
  },
  "files": [
    {
      "sha": "09928110954a1095bb174784a66736cb69a52260",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22f80c0f77be6304b9632827d8161e28cb4a195a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22f80c0f77be6304b9632827d8161e28cb4a195a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=22f80c0f77be6304b9632827d8161e28cb4a195a",
      "patch": "@@ -1,3 +1,10 @@\n+2021-04-22  Tom Tromey  <tom@tromey.com>\n+\n+\t* rust-parse.c (rust_parser::parse_sizeof): Remove KW_MUT code.\n+\t(struct typed_val_int) <val>: Now ULONGEST.\n+\t(rust_parser::parse_array_type): Remove negative check.\n+\t(rust_lex_int_test): Change 'value' to ULONGEST.\n+\n 2021-04-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* arch-utils.c (default_addressable_memory_unit_size): Return a"
    },
    {
      "sha": "2f2afcf7e9fed5acba745ddf51002bd8dc4846a6",
      "filename": "gdb/rust-parse.c",
      "status": "modified",
      "additions": 3,
      "deletions": 8,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22f80c0f77be6304b9632827d8161e28cb4a195a/gdb/rust-parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22f80c0f77be6304b9632827d8161e28cb4a195a/gdb/rust-parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-parse.c?ref=22f80c0f77be6304b9632827d8161e28cb4a195a",
      "patch": "@@ -126,7 +126,7 @@ enum token_type : int\n \n struct typed_val_int\n {\n-  LONGEST val;\n+  ULONGEST val;\n   struct type *type;\n };\n \n@@ -1447,9 +1447,6 @@ rust_parser::parse_sizeof ()\n {\n   assume (KW_SIZEOF);\n \n-  if (current_token == KW_MUT)\n-    lex ();\n-\n   require ('(');\n   operation_up result = make_operation<unop_sizeof_operation> (parse_expr ());\n   require (')');\n@@ -1600,9 +1597,7 @@ rust_parser::parse_array_type ()\n \n   if (current_token != INTEGER && current_token != DECIMAL_INTEGER)\n     error (_(\"integer expected\"));\n-  LONGEST val = current_int_val.val;\n-  if (val < 0)\n-    error (_(\"Negative array length\"));\n+  ULONGEST val = current_int_val.val;\n   lex ();\n   require (']');\n \n@@ -2117,7 +2112,7 @@ rust_lex_test_one (rust_parser *parser, const char *input, int expected)\n \n static void\n rust_lex_int_test (rust_parser *parser, const char *input,\n-\t\t   LONGEST value, int kind)\n+\t\t   ULONGEST value, int kind)\n {\n   rust_lex_test_one (parser, input, kind);\n   SELF_CHECK (parser->current_int_val.val == value);"
    },
    {
      "sha": "3099cbacac33b2053307b64669f03a519053d1f4",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22f80c0f77be6304b9632827d8161e28cb4a195a/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22f80c0f77be6304b9632827d8161e28cb4a195a/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=22f80c0f77be6304b9632827d8161e28cb4a195a",
      "patch": "@@ -1,3 +1,9 @@\n+2021-04-22  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdb.rust/modules.exp: Add checks for syntax errors.\n+\t* gdb.rust/expr.exp: Add checks for syntax errors.\n+\t* gdb.rust/simple.exp: Add checks for syntax errors.\n+\n 2021-04-21  Carl Love  <cel@us.ibm.com>\n \n \t* gdb.base/valgrind-bt.exp: Add gdb_test \"break main\"."
    },
    {
      "sha": "603e5388c3f797ed105028af27cfa554c308a5a4",
      "filename": "gdb/testsuite/gdb.rust/expr.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22f80c0f77be6304b9632827d8161e28cb4a195a/gdb/testsuite/gdb.rust/expr.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22f80c0f77be6304b9632827d8161e28cb4a195a/gdb/testsuite/gdb.rust/expr.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.rust/expr.exp?ref=22f80c0f77be6304b9632827d8161e28cb4a195a",
      "patch": "@@ -111,6 +111,8 @@ gdb_test \"print ()\" \" = \\\\(\\\\)\"\n gdb_test \"print \\[1,2,3,4\\]\" \" = \\\\\\[1, 2, 3, 4\\\\\\]\"\n gdb_test \"ptype \\[1,2,3,4\\]\" \"type = \\\\\\[i32; 4\\\\\\]\"\n gdb_test \"print \\[mut 1,2,3,4\\]\" \" = \\\\\\[1, 2, 3, 4\\\\\\]\"\n+gdb_test \"print \\[1,2 3\" \"',' or ']' expected\"\n+gdb_test \"print \\[1 2\" \"',', ';', or ']' expected\"\n \n gdb_test \"print b\\\"hi rust\\\"\" \" = b\\\"hi rust\\\"\"\n # This isn't rusty syntax yet, but that's another bug -- this is just"
    },
    {
      "sha": "4c9f4549cb7ef4db457df985b0c712c9b605f210",
      "filename": "gdb/testsuite/gdb.rust/modules.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22f80c0f77be6304b9632827d8161e28cb4a195a/gdb/testsuite/gdb.rust/modules.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22f80c0f77be6304b9632827d8161e28cb4a195a/gdb/testsuite/gdb.rust/modules.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.rust/modules.exp?ref=22f80c0f77be6304b9632827d8161e28cb4a195a",
      "patch": "@@ -91,3 +91,7 @@ foreach mod {mod1::inner::innest mod1::inner mod1 {}} {\n }\n \n gdb_test \"print ::TWENTY_THREE\" \" = 23\"\n+\n+gdb_test \"print super TWENTY_THREE\" \"'::' expected\"\n+gdb_test \"print super::23\" \"identifier expected\"\n+gdb_test \"ptype ::Generic::<::Generic<self::Type\" \"'>' expected\""
    },
    {
      "sha": "1588e1551658794f36b75750e361715b08b45c75",
      "filename": "gdb/testsuite/gdb.rust/simple.exp",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22f80c0f77be6304b9632827d8161e28cb4a195a/gdb/testsuite/gdb.rust/simple.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22f80c0f77be6304b9632827d8161e28cb4a195a/gdb/testsuite/gdb.rust/simple.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.rust/simple.exp?ref=22f80c0f77be6304b9632827d8161e28cb4a195a",
      "patch": "@@ -64,6 +64,7 @@ gdb_test \"print j2\" \" = simple::Unit\"\n gdb_test \"ptype j2\" \" = struct simple::Unit\"\n gdb_test \"print simple::Unit\" \" = simple::Unit\"\n gdb_test \"print simple::Unit{}\" \" = simple::Unit\"\n+gdb_test \"print simple::Unit{23}\" \"'}', '\\.\\.', or identifier expected\"\n \n gdb_test \"print f\" \" = \\\"hi bob\\\"\"\n gdb_test \"print fslice\" \" = \\\"bob\\\"\"\n@@ -90,6 +91,8 @@ gdb_test \"print fromslice\" \" = 3\"\n gdb_test \"print slice\\[0\\]\" \" = 3\"\n gdb_test \"print (slice as &\\[i32\\])\\[0\\]\" \" = 3\"\n \n+gdb_test \"print slice as \\[i32; 73.9\\]\" \"integer expected\"\n+\n gdb_test_sequence \"ptype slice\" \"\" {\n     \" = struct &\\\\\\[i32\\\\\\] \\\\{\"\n     \"  data_ptr: \\\\*mut i32,\"\n@@ -131,6 +134,11 @@ gdb_test_sequence \"ptype z\" \"\" {\n }\n gdb_test \"print z.1\" \" = 8\"\n \n+# Some error checks.\n+gdb_test \"print z.1_0\" \\\n+    \"'_' not allowed in integers in anonymous field references\"\n+gdb_test \"print z.mut\" \"field name expected\"\n+\n gdb_test \"print univariant\" \" = simple::Univariant::Foo{a: 1}\"\n gdb_test \"print univariant.a\" \" = 1\"\n gdb_test \"print univariant_anon\" \" = simple::UnivariantAnon::Foo\\\\(1\\\\)\"\n@@ -188,6 +196,9 @@ gdb_test_sequence \"ptype e\" \"\" {\n     \"\\\\}\"\n }\n \n+# Test a parser error.\n+gdb_test \"print sizeof e\" \"'\\\\(' expected\"\n+\n gdb_test \"print e.0\" \" = 73\"\n gdb_test \"print e.1\" \\\n     \"Cannot access field 1 of variant simple::MoreComplicated::Two, there are only 1 fields\"\n@@ -222,6 +233,10 @@ gdb_test \"ptype empty\" \"fn \\\\(\\\\)\"\n \n gdb_test \"print (diff2 as fn(i32, i32) -> i32)(19, -2)\" \" = 21\"\n \n+gdb_test \"print diff2(73, 74 75\" \"',' or '\\\\\\)' expected\"\n+gdb_test \"print (diff2 as fn i32, i32) -> i32)(19, -2)\" \"'\\\\\\(' expected\"\n+gdb_test \"print (diff2 as fn (i32, i32) i32)(19, -2)\" \"'->' expected\"\n+\n gdb_test \"print \\\"hello rust\\\"\" \" = \\\"hello rust.*\\\"\"\n gdb_test \"print \\\"hello\" \"Unexpected EOF in string\"\n gdb_test \"print r##\\\"hello \\\" rust\\\"##\" \" = \\\"hello \\\\\\\\\\\" rust.*\\\"\"\n@@ -335,6 +350,10 @@ gdb_test \"print (1,2,3)\" \"Tuple expressions not supported yet\"\n gdb_test \"print (1,)\" \"Tuple expressions not supported yet\"\n gdb_test \"print (1)\" \" = 1\"\n \n+# Test a syntax error in tuple expressions.\n+gdb_test \"print (1,2,,\" \"unexpected token\"\n+gdb_test \"print (1,2 8\" \"',' or '\\\\\\)' expected\"\n+\n gdb_test \"print 23..97.0\" \"Range expression with different types\"\n \n gdb_test \"print (*parametrized.next.val)\" \\"
    }
  ]
}