{
  "sha": "d3ee35dbf754b72461f67a29892fff0d10961065",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDNlZTM1ZGJmNzU0YjcyNDYxZjY3YTI5ODkyZmZmMGQxMDk2MTA2NQ==",
  "commit": {
    "author": {
      "name": "Lancelot SIX",
      "email": "lsix@lancelotsix.com",
      "date": "2021-01-11T22:40:59Z"
    },
    "committer": {
      "name": "Lancelot SIX",
      "email": "lsix@lancelotsix.com",
      "date": "2021-01-23T17:17:38Z"
    },
    "message": "Improve gdb_tilde_expand logic.\n\nBefore this patch, gdb_tilde_expand would use glob(3) in order to expand\ntilde at the begining of a path. This implementation has limitation when\nexpanding a tilde leading path to a non existing file since glob fails to\nexpand.\n\nThis patch proposes to use glob only to expand the tilde component of the\npath and leaves the rest of the path unchanged.\n\nThis patch is a followup to the following discution:\nhttps://sourceware.org/pipermail/gdb-patches/2021-January/174776.html\n\nBefore the patch:\n\n\tgdb_tilde_expand(\"~\") -> \"/home/lsix\"\n\tgdb_tilde_expand(\"~/a/c/b\") -> error() is called\n\nAfter the patch:\n\n\tgdb_tilde_expand(\"~\") -> \"/home/lsix\"\n\tgdb_tilde_expand(\"~/a/c/b\") -> \"/home/lsix/a/c/b\"\n\nTested on x84_64 linux.\n\ngdb/ChangeLog:\n\n\t* Makefile.in (SELFTESTS_SRCS): Add\n\tunittests/gdb_tilde_expand-selftests.c.\n\t* unittests/gdb_tilde_expand-selftests.c: New file.\n\ngdbsupport/ChangeLog:\n\n\t* gdb_tilde_expand.cc (gdb_tilde_expand): Improve\n\timplementation.\n\t(gdb_tilde_expand_up): Delegate logic to gdb_tilde_expand.\n\t* gdb_tilde_expand.h (gdb_tilde_expand): Update description.",
    "tree": {
      "sha": "5c7fe4009561e03320af100268f1afad55d467dd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5c7fe4009561e03320af100268f1afad55d467dd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d3ee35dbf754b72461f67a29892fff0d10961065",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3ee35dbf754b72461f67a29892fff0d10961065",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d3ee35dbf754b72461f67a29892fff0d10961065",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3ee35dbf754b72461f67a29892fff0d10961065/comments",
  "author": {
    "login": "lsix",
    "id": 724339,
    "node_id": "MDQ6VXNlcjcyNDMzOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/724339?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsix",
    "html_url": "https://github.com/lsix",
    "followers_url": "https://api.github.com/users/lsix/followers",
    "following_url": "https://api.github.com/users/lsix/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsix/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsix/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsix/subscriptions",
    "organizations_url": "https://api.github.com/users/lsix/orgs",
    "repos_url": "https://api.github.com/users/lsix/repos",
    "events_url": "https://api.github.com/users/lsix/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsix/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "lsix",
    "id": 724339,
    "node_id": "MDQ6VXNlcjcyNDMzOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/724339?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsix",
    "html_url": "https://github.com/lsix",
    "followers_url": "https://api.github.com/users/lsix/followers",
    "following_url": "https://api.github.com/users/lsix/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsix/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsix/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsix/subscriptions",
    "organizations_url": "https://api.github.com/users/lsix/orgs",
    "repos_url": "https://api.github.com/users/lsix/repos",
    "events_url": "https://api.github.com/users/lsix/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsix/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ef45cb65a7be9f80686233d0e5586ced81613db0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ef45cb65a7be9f80686233d0e5586ced81613db0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ef45cb65a7be9f80686233d0e5586ced81613db0"
    }
  ],
  "stats": {
    "total": 157,
    "additions": 141,
    "deletions": 16
  },
  "files": [
    {
      "sha": "bb186766e3f9f488a7095b135e468cb4d0b329a2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3ee35dbf754b72461f67a29892fff0d10961065/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3ee35dbf754b72461f67a29892fff0d10961065/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d3ee35dbf754b72461f67a29892fff0d10961065",
      "patch": "@@ -1,3 +1,9 @@\n+2021-01-23  Lancelot SIX  <lsix@lancelotsix.com>\n+\n+\t* Makefile.in (SELFTESTS_SRCS): Add\n+\tunittests/gdb_tilde_expand-selftests.c.\n+\t* unittests/gdb_tilde_expand-selftests.c: New file.\n+\n 2021-01-22  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \tPR cli/25956"
    },
    {
      "sha": "c8979fe2760b7ee43be7ce2018c246cc8c56f4e6",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3ee35dbf754b72461f67a29892fff0d10961065/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3ee35dbf754b72461f67a29892fff0d10961065/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=d3ee35dbf754b72461f67a29892fff0d10961065",
      "patch": "@@ -446,6 +446,7 @@ SELFTESTS_SRCS = \\\n \tunittests/filtered_iterator-selftests.c \\\n \tunittests/format_pieces-selftests.c \\\n \tunittests/function-view-selftests.c \\\n+\tunittests/gdb_tilde_expand-selftests.c \\\n \tunittests/gmp-utils-selftests.c \\\n \tunittests/lookup_name_info-selftests.c \\\n \tunittests/memory-map-selftests.c \\"
    },
    {
      "sha": "b57f7bed36b80d75751d95cee07a32ca1c320dc3",
      "filename": "gdb/unittests/gdb_tilde_expand-selftests.c",
      "status": "added",
      "additions": 94,
      "deletions": 0,
      "changes": 94,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3ee35dbf754b72461f67a29892fff0d10961065/gdb/unittests/gdb_tilde_expand-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3ee35dbf754b72461f67a29892fff0d10961065/gdb/unittests/gdb_tilde_expand-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/gdb_tilde_expand-selftests.c?ref=d3ee35dbf754b72461f67a29892fff0d10961065",
      "patch": "@@ -0,0 +1,94 @@\n+/* Self tests for gdb_tilde_expand\n+\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"gdbsupport/common-defs.h\"\n+#include \"gdbsupport/selftest.h\"\n+#include <cstdlib>\n+\n+#include \"gdbsupport/gdb_tilde_expand.h\"\n+\n+namespace selftests {\n+namespace gdb_tilde_expand_tests {\n+\n+static void\n+do_test ()\n+{\n+  /* Home directory of the user running the test.  */\n+  const char *c_home = std::getenv (\"HOME\");\n+\n+  /* Skip the test if $HOME is not available in the environment.  */\n+  if (c_home == nullptr)\n+    return;\n+\n+  const std::string home (c_home);\n+\n+  /* Basic situation.  */\n+  SELF_CHECK (home == gdb_tilde_expand (\"~\"));\n+\n+  /* When given a path that begins by a tilde and refers to a file that\n+     does not exist, gdb_tilde expand must still be able to do the tilde\n+     expansion.  */\n+  SELF_CHECK (gdb_tilde_expand (\"~/non/existent/directory\")\n+              == home + \"/non/existent/directory\");\n+\n+  /* gdb_tilde_expand only expands tilde and does not try to do any other\n+     substitution.  */\n+  SELF_CHECK (gdb_tilde_expand (\"~/*/a.out\") == home + \"/*/a.out\");\n+\n+  /* gdb_tilde_expand does no modification to a non tilde leading path.  */\n+  SELF_CHECK (gdb_tilde_expand (\"/some/abs/path\") == \"/some/abs/path\");\n+  SELF_CHECK (gdb_tilde_expand (\"relative/path\") == \"relative/path\");\n+\n+  /* If $USER is available in the env variables, check the '~user'\n+     expansion.  */\n+  const char *c_user = std::getenv (\"USER\");\n+  if (c_user != nullptr)\n+    {\n+      const std::string user (c_user);\n+      SELF_CHECK (gdb_tilde_expand ((\"~\" + user).c_str ()) == home);\n+      SELF_CHECK (gdb_tilde_expand ((\"~\" + user + \"/a/b\").c_str ())\n+                  == home + \"/a/b\");\n+    }\n+\n+  /* Check that an error is thrown when trying to expand home of a unknown\n+     user.  */\n+  try\n+    {\n+      gdb_tilde_expand (\"~no_one_should_have_that_login/a\");\n+      SELF_CHECK (false);\n+    }\n+  catch (const gdb_exception_error &e)\n+    {\n+      SELF_CHECK (e.error == GENERIC_ERROR);\n+      SELF_CHECK\n+        (*e.message\n+         == \"Could not find a match for '~no_one_should_have_that_login'.\");\n+    }\n+}\n+\n+} /* namespace gdb_tilde_expand_tests */\n+} /* namespace selftests */\n+\n+void _initialize_gdb_tilde_expand_selftests ();\n+void\n+_initialize_gdb_tilde_expand_selftests ()\n+{\n+  selftests::register_test\n+    (\"gdb_tilde_expand\", selftests::gdb_tilde_expand_tests::do_test);\n+}"
    },
    {
      "sha": "fe6138ca2ded84c309b6451ec69fc8388aeeefca",
      "filename": "gdbsupport/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3ee35dbf754b72461f67a29892fff0d10961065/gdbsupport/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3ee35dbf754b72461f67a29892fff0d10961065/gdbsupport/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ChangeLog?ref=d3ee35dbf754b72461f67a29892fff0d10961065",
      "patch": "@@ -1,3 +1,10 @@\n+2021-01-23  Lancelot SIX  <lsix@lancelotsix.com>\n+\n+\t* gdb_tilde_expand.cc (gdb_tilde_expand): Improve\n+\timplementation.\n+\t(gdb_tilde_expand_up): Delegate logic to gdb_tilde_expand.\n+\t* gdb_tilde_expand.h (gdb_tilde_expand): Update description.\n+\n 2021-01-22  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* common-debug.h (debug_prefixed_printf_cond_nofunc): New."
    },
    {
      "sha": "d9fb115f47c30f54faca5c2bf599224d4ab79608",
      "filename": "gdbsupport/gdb_tilde_expand.cc",
      "status": "modified",
      "additions": 32,
      "deletions": 14,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3ee35dbf754b72461f67a29892fff0d10961065/gdbsupport/gdb_tilde_expand.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3ee35dbf754b72461f67a29892fff0d10961065/gdbsupport/gdb_tilde_expand.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/gdb_tilde_expand.cc?ref=d3ee35dbf754b72461f67a29892fff0d10961065",
      "patch": "@@ -18,6 +18,8 @@\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n #include \"common-defs.h\"\n+#include <algorithm>\n+#include \"filenames.h\"\n #include \"gdb_tilde_expand.h\"\n #include <glob.h>\n \n@@ -71,25 +73,41 @@ class gdb_glob\n std::string\n gdb_tilde_expand (const char *dir)\n {\n-  gdb_glob glob (dir, GLOB_TILDE_CHECK, NULL);\n-\n-  gdb_assert (glob.pathc () > 0);\n-  /* \"glob\" may return more than one match to the path provided by the\n-     user, but we are only interested in the first match.  */\n-  std::string expanded_dir = glob.pathv ()[0];\n-\n-  return expanded_dir;\n+  if (dir[0] != '~')\n+    return std::string (dir);\n+\n+  /* This function uses glob in order to expand the ~.  However, this function\n+     will fail to expand if the actual dir we are looking for does not exist.\n+     Given \"~/does/not/exist\", glob will fail.\n+\n+     In order to avoid such limitation, we only use glob to expand \"~\" and keep\n+     \"/does/not/exist\" unchanged.\n+\n+     Similarly, to expand ~gdb/might/not/exist, we only expand \"~gdb\" using\n+     glob and leave \"/might/not/exist\" unchanged.  */\n+  const std::string d (dir);\n+\n+  /* Look for the first dir separator (if any) and split d around it.  */\n+  const auto first_sep\n+    = std::find_if (d.cbegin (), d.cend(),\n+                    [] (const char c) -> bool\n+                    {\n+                      return IS_DIR_SEPARATOR (c);\n+                    });\n+  const std::string to_expand (d.cbegin (), first_sep);\n+  const std::string remainder (first_sep, d.cend ());\n+\n+  const gdb_glob glob (to_expand.c_str (), GLOB_TILDE_CHECK, nullptr);\n+\n+  gdb_assert (glob.pathc () == 1);\n+  return std::string (glob.pathv ()[0]) + remainder;\n }\n \n /* See gdbsupport/gdb_tilde_expand.h.  */\n \n gdb::unique_xmalloc_ptr<char>\n gdb_tilde_expand_up (const char *dir)\n {\n-  gdb_glob glob (dir, GLOB_TILDE_CHECK, NULL);\n-\n-  gdb_assert (glob.pathc () > 0);\n-  /* \"glob\" may return more than one match to the path provided by the\n-     user, but we are only interested in the first match.  */\n-  return make_unique_xstrdup (glob.pathv ()[0]);\n+  const std::string expanded = gdb_tilde_expand (dir);\n+  return make_unique_xstrdup (expanded.c_str ());\n }"
    },
    {
      "sha": "a61f24632915656bf8751253699bc1a447639536",
      "filename": "gdbsupport/gdb_tilde_expand.h",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d3ee35dbf754b72461f67a29892fff0d10961065/gdbsupport/gdb_tilde_expand.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d3ee35dbf754b72461f67a29892fff0d10961065/gdbsupport/gdb_tilde_expand.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/gdb_tilde_expand.h?ref=d3ee35dbf754b72461f67a29892fff0d10961065",
      "patch": "@@ -20,8 +20,7 @@\n #ifndef COMMON_GDB_TILDE_EXPAND_H\n #define COMMON_GDB_TILDE_EXPAND_H\n \n-/* Perform path expansion (i.e., tilde expansion) on DIR, and return\n-   the full path.  */\n+/* Perform tilde expansion on DIR, and return the full path.  */\n extern std::string gdb_tilde_expand (const char *dir);\n \n /* Same as GDB_TILDE_EXPAND, but return the full path as a"
    }
  ]
}