{
  "sha": "70447401740235d828c4b7b87e398eeae4801094",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzA0NDc0MDE3NDAyMzVkODI4YzRiN2I4N2UzOThlZWFlNDgwMTA5NA==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-05-11T17:18:50Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-07-22T17:02:18Z"
    },
    "message": "libctf, dump: fix slice dumping\n\nNow that we can have slices of anything terminating in an int, we must\ndump things accordingly, or slices of typedefs appear as\n\n  c5b: __u8 -> 16c: __u8 -> 78: short unsigned int (size 0x2)\n\nwhich is unhelpful.  If things *are* printed as slices, the name is\nmissing:\n\n  a15: [slice 0x8:0x4]-> 16c: __u8 -> 78: short unsigned int (size 0x2)\n\nAnd struct members give no clue they're a slice at all, which is a shame\nsince bitfields are the major use of this type kind:\n\n       [0x8] (ID 0xa15) (kind 10) __u8  dst_reg\n\nFix things so that everything slicelike or integral gets its encoding\nprinted, and everything with a name gets the name printed:\n\n  a15: __u8  [slice 0x8:0x4] (size 0x1) -> 1ff: __u8 (size 0x1) -> 37: unsigned char [0x0:0x8] (size 0x1)\n     [0x0] (ID 0xa15) (kind 10) __u8:4 (aligned at 0x1, format 0x2, offset:bits 0x8:0x4)\n\nBitfield struct members get a technically redundant but much\neasier-to-understand dumping now:\n\n    [0x0] (ID 0x80000005) (kind 6) struct bpf_insn (aligned at 0x1)\n        [0x0] (ID 0x222) (kind 10) __u8 code (aligned at 0x1)\n        [0x8] (ID 0x1e9e) (kind 10) __u8  dst_reg:4 (aligned at 0x1, format 0x2, offset:bits 0x8:0x4)\n        [0xc] (ID 0x1e46) (kind 10) __u8  src_reg:4 (aligned at 0x1, format 0x2, offset:bits 0xc:0x4)\n        [0x10] (ID 0xf35) (kind 10) __s16 off (aligned at 0x2)\n        [0x20] (ID 0x1718) (kind 10) __s32 imm (aligned at 0x4)\n\nThis also fixes one place where a failure to format a type would be\nerroneously considered an out-of-memory condition.\n\nlibctf/\n\t* ctf-dump.c (ctf_is_slice): Delete, unnecessary.\n\t(ctf_dump_format_type): improve slice formatting.  Always print\n\tthe type size, even of slices.\n\t(ctf_dump_member): Print slices (-> bitfields) differently from\n\tnon-slices.  Failure to format a type is not an OOM.",
    "tree": {
      "sha": "2c1b446b9a7c9a71691171e60bdf851a5a077142",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2c1b446b9a7c9a71691171e60bdf851a5a077142"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/70447401740235d828c4b7b87e398eeae4801094",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/70447401740235d828c4b7b87e398eeae4801094",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/70447401740235d828c4b7b87e398eeae4801094",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/70447401740235d828c4b7b87e398eeae4801094/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8e795b46f58d9cd80b8831ea24f56f1433b8f50b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8e795b46f58d9cd80b8831ea24f56f1433b8f50b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8e795b46f58d9cd80b8831ea24f56f1433b8f50b"
    }
  ],
  "stats": {
    "total": 100,
    "additions": 65,
    "deletions": 35
  },
  "files": [
    {
      "sha": "841f1462f29cd091dd2ff9fe35b357fcbea7ad67",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/70447401740235d828c4b7b87e398eeae4801094/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/70447401740235d828c4b7b87e398eeae4801094/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=70447401740235d828c4b7b87e398eeae4801094",
      "patch": "@@ -1,3 +1,11 @@\n+2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-dump.c (ctf_is_slice): Delete, unnecessary.\n+\t(ctf_dump_format_type): improve slice formatting.  Always print\n+\tthe type size, even of slices.\n+\t(ctf_dump_member): Print slices (-> bitfields) differently from\n+\tnon-slices.  Failure to format a type is not an OOM.\n+\n 2020-07-22  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-dump.c (ctf_dump_format_type): Emit a warning."
    },
    {
      "sha": "94d6bc6f0181df95cfd3ab70bd61afc6163aad90",
      "filename": "libctf/ctf-dump.c",
      "status": "modified",
      "additions": 57,
      "deletions": 35,
      "changes": 92,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/70447401740235d828c4b7b87e398eeae4801094/libctf/ctf-dump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/70447401740235d828c4b7b87e398eeae4801094/libctf/ctf-dump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-dump.c?ref=70447401740235d828c4b7b87e398eeae4801094",
      "patch": "@@ -79,20 +79,6 @@ ctf_dump_free (ctf_dump_state_t *state)\n     }\n }\n \n-/* Slices need special handling to distinguish them from their referenced\n-   type.  */\n-\n-static int\n-ctf_is_slice (ctf_file_t *fp, ctf_id_t id, ctf_encoding_t *enc)\n-{\n-  int kind = ctf_type_kind (fp, id);\n-\n-  return (((kind == CTF_K_INTEGER) || (kind == CTF_K_ENUM)\n-\t   || (kind == CTF_K_FLOAT))\n-\t  && ctf_type_reference (fp, id) != CTF_ERR\n-\t  && ctf_type_encoding (fp, id, enc) == 0);\n-}\n-\n /* Return a dump for a single type, without member info: but do show the\n    type's references.  */\n \n@@ -129,26 +115,45 @@ ctf_dump_format_type (ctf_file_t *fp, ctf_id_t id, int flag)\n \t  goto err;\n \t}\n \n-      /* Slices get a different print representation.  */\n+      if (asprintf (&bit, \" %s%lx: \", nonroot_leader, id) < 0)\n+\tgoto oom;\n+      str = str_append (str, bit);\n+      free (bit);\n+      bit = NULL;\n+\n+      if (buf[0] != '\\0')\n+\t{\n+\t  str = str_append (str, buf);\n+\t  str = str_append (str, \" \");\n+\t}\n+\n+      free (buf);\n+      buf = NULL;\n \n-      if (ctf_is_slice (fp, id, &enc))\n+      /* Slices get a different print representation.  */\n+      if (ctf_type_kind_unsliced (fp, id) == CTF_K_SLICE)\n \t{\n \t  ctf_type_encoding (fp, id, &enc);\n-\t  if (asprintf (&bit, \" %s%lx: [slice 0x%x:0x%x]%s\",\n-\t\t\tnonroot_leader, id, enc.cte_offset, enc.cte_bits,\n-\t\t\tnonroot_trailer) < 0)\n+\t  if (asprintf (&bit, \"[slice 0x%x:0x%x] \",\n+\t\t\tenc.cte_offset, enc.cte_bits) < 0)\n \t    goto oom;\n \t}\n-      else\n+      else if (ctf_type_kind (fp, id) == CTF_K_INTEGER)\n \t{\n-\t  if (asprintf (&bit, \" %s%lx: %s (size 0x%lx)%s\", nonroot_leader,\n-\t\t\tid, buf[0] == '\\0' ? \"(nameless)\" : buf,\n-\t\t\t(unsigned long) ctf_type_size (fp, id),\n-\t\t\tnonroot_trailer) < 0)\n+\t  ctf_type_encoding (fp, id, &enc);\n+\t  if (asprintf (&bit, \"[0x%x:0x%x] \",\n+\t\t\tenc.cte_offset, enc.cte_bits) < 0)\n \t    goto oom;\n \t}\n-      free (buf);\n-      buf = NULL;\n+      str = str_append (str, bit);\n+      free (bit);\n+      bit = NULL;\n+\n+      if (asprintf (&bit, \"(size 0x%lx)%s\",\n+\t\t    (unsigned long) ctf_type_size (fp, id),\n+\t\t    nonroot_trailer) < 0)\n+\tgoto oom;\n+\n       str = str_append (str, bit);\n       free (bit);\n       bit = NULL;\n@@ -516,6 +521,7 @@ ctf_dump_member (const char *name, ctf_id_t id, unsigned long offset,\n   char *typestr = NULL;\n   char *bit = NULL;\n   ctf_encoding_t ep;\n+  int has_encoding = 0;\n   ssize_t i;\n \n   for (i = 0; i < depth; i++)\n@@ -535,24 +541,40 @@ ctf_dump_member (const char *name, ctf_id_t id, unsigned long offset,\n \t  return 0;\n \t}\n \n-      goto oom;\n+      return -1;\t\t\t\t/* errno is set for us.  */\n+    }\n+\n+  if (ctf_type_encoding (state->cdm_fp, id, &ep) == 0)\n+    {\n+      has_encoding = 1;\n+      ctf_type_encoding (state->cdm_fp, id, &ep);\n+\n+      if (asprintf (&bit, \"    [0x%lx] (ID 0x%lx) (kind %i) %s%s%s:%i \"\n+\t\t    \"(aligned at 0x%lx\", offset, id,\n+\t\t    ctf_type_kind (state->cdm_fp, id), typestr,\n+\t\t    (name[0] != 0 && typestr[0] != 0) ? \" \" : \"\", name,\n+\t\t    ep.cte_bits, (unsigned long) ctf_type_align (state->cdm_fp,\n+\t\t\t\t\t\t\t\t id)) < 0)\n+\tgoto oom;\n+    }\n+  else\n+    {\n+      if (asprintf (&bit, \"    [0x%lx] (ID 0x%lx) (kind %i) %s%s%s \"\n+\t\t    \"(aligned at 0x%lx\", offset, id,\n+\t\t    ctf_type_kind (state->cdm_fp, id), typestr,\n+\t\t    (name[0] != 0 && typestr[0] != 0) ? \" \" : \"\", name,\n+\t\t    (unsigned long) ctf_type_align (state->cdm_fp, id)) < 0)\n+\tgoto oom;\n     }\n \n-  if (asprintf (&bit, \"    [0x%lx] (ID 0x%lx) (kind %i) %s %s (aligned at 0x%lx\",\n-\t\toffset, id, ctf_type_kind (state->cdm_fp, id), typestr, name,\n-\t\t(unsigned long) ctf_type_align (state->cdm_fp, id)) < 0)\n-    goto oom;\n   *state->cdm_str = str_append (*state->cdm_str, bit);\n   free (typestr);\n   free (bit);\n   typestr = NULL;\n   bit = NULL;\n \n-  if ((ctf_type_kind (state->cdm_fp, id) == CTF_K_INTEGER)\n-      || (ctf_type_kind (state->cdm_fp, id) == CTF_K_FLOAT)\n-      || (ctf_is_slice (state->cdm_fp, id, &ep) == CTF_K_ENUM))\n+  if (has_encoding)\n     {\n-      ctf_type_encoding (state->cdm_fp, id, &ep);\n       if (asprintf (&bit, \", format 0x%x, offset:bits 0x%x:0x%x\", ep.cte_format,\n \t\t    ep.cte_offset, ep.cte_bits) < 0)\n \tgoto oom;"
    }
  ]
}