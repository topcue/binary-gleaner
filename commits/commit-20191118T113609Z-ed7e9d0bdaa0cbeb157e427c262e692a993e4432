{
  "sha": "ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWQ3ZTlkMGJkYWEwY2JlYjE1N2U0MjdjMjYyZTY5MmE5OTNlNDQzMg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-11-18T06:39:40Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-11-18T11:36:09Z"
    },
    "message": "elf_backend_init_file_header\n\nThis patch renames elf_backend_post_process_headers and moves the\nprep_headers code into the new function.  Naming the backend functions\nelf_backend_init_file_header and elf_backend_modify_headers makes it\nclear which function is called first.\n\n\t* elf-bfd.h (struct elf_backend_data <elf_backend_init_file_header>):\n\tRename from elf_backend_post_process_headers.\n\t(_bfd_elf_post_process_headers): Delete.\n\t(_bfd_elf_init_file_header): Declare.\n\t* elf.c (_bfd_elf_compute_section_file_positions): Call new function\n\tin place of prep_headers and elf_backend_post_process_headers.\n\t(_bfd_elf_init_file_header): Renamed from prep_headers with\n\tupdated args and made global.  Delete dead code.\n\t(_bfd_elf_post_process_headers): Delete.\n\t* elf32-arm.c (elf32_arm_init_file_header): Rename from\n\telf32_arm_post_process_headers and call _bfd_elf_init_file_header.\n\tReturn status.\n\t(elf_backend_init_file_header): Define.\n\t(elf_backend_post_process_headers): Don't define.\n\t* elf32-i386.c (elf_i386_fbsd_init_file_header): Similarly.\n\t* elf32-m68hc1x.c (elf32_m68hc11_init_file_header): Similarly.\n\t* elf32-metag.c (elf_metag_init_file_header): Similarly.\n\t* elf32-spu.c (spu_elf_init_file_header\n\t* elf32-visium.c (visium_elf_init_file_header\n\t* elf64-alpha.c (elf64_alpha_fbsd_init_file_header\n\t* elf64-hppa.c (elf64_hppa_init_file_header\n\t* elf64-ia64-vms.c (elf64_vms_init_file_header\n\t* elfnn-aarch64.c (elfNN_aarch64_init_file_header\n\t* elfnn-ia64.c (elfNN_hpux_init_file_header\n\t* elfxx-mips.c (_bfd_mips_init_file_header\n\t* elfxx-mips.h (_bfd_mips_post_process_headers): Delete.\n\t(_bfd_mips_init_file_header): Declare.\n\t(elf_backend_post_process_headers): Delete.\n\t(elf_backend_init_file_header): Define.\n\t* elfxx-target.h (elf_backend_post_process_headers): Delete.\n\t(elf_backend_init_file_header): Define and use.\n\t* elf32-m68hc12.c (elf_backend_init_file_header): Define.\n\t(elf_backend_post_process_headers): Don't define.\n\t* elf32-m68hc1x.h (elf32_m68hc11_post_process_headers): Delete.\n\t(elf32_m68hc11_init_file_header): Declare.\n\t* elf32-ppc.c (elf_backend_post_process_headers): Remove\n\tunnecessary undef.",
    "tree": {
      "sha": "9029ace1cff9aeb0602301c28f6b3e8e11ce7394",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9029ace1cff9aeb0602301c28f6b3e8e11ce7394"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6d6c25c8eaaf42755a759beeb2996502322b960c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6d6c25c8eaaf42755a759beeb2996502322b960c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6d6c25c8eaaf42755a759beeb2996502322b960c"
    }
  ],
  "stats": {
    "total": 261,
    "additions": 154,
    "deletions": 107
  },
  "files": [
    {
      "sha": "1a9e64f3f359fb70533433641da0fd5ab7905116",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -1,3 +1,43 @@\n+2019-11-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf-bfd.h (struct elf_backend_data <elf_backend_init_file_header>):\n+\tRename from elf_backend_post_process_headers.\n+\t(_bfd_elf_post_process_headers): Delete.\n+\t(_bfd_elf_init_file_header): Declare.\n+\t* elf.c (_bfd_elf_compute_section_file_positions): Call new function\n+\tin place of prep_headers and elf_backend_post_process_headers.\n+\t(_bfd_elf_init_file_header): Renamed from prep_headers with\n+\tupdated args and made global.  Delete dead code.\n+\t(_bfd_elf_post_process_headers): Delete.\n+\t* elf32-arm.c (elf32_arm_init_file_header): Rename from\n+\telf32_arm_post_process_headers and call _bfd_elf_init_file_header.\n+\tReturn status.\n+\t(elf_backend_init_file_header): Define.\n+\t(elf_backend_post_process_headers): Don't define.\n+\t* elf32-i386.c (elf_i386_fbsd_init_file_header): Similarly.\n+\t* elf32-m68hc1x.c (elf32_m68hc11_init_file_header): Similarly.\n+\t* elf32-metag.c (elf_metag_init_file_header): Similarly.\n+\t* elf32-spu.c (spu_elf_init_file_header\n+\t* elf32-visium.c (visium_elf_init_file_header\n+\t* elf64-alpha.c (elf64_alpha_fbsd_init_file_header\n+\t* elf64-hppa.c (elf64_hppa_init_file_header\n+\t* elf64-ia64-vms.c (elf64_vms_init_file_header\n+\t* elfnn-aarch64.c (elfNN_aarch64_init_file_header\n+\t* elfnn-ia64.c (elfNN_hpux_init_file_header\n+\t* elfxx-mips.c (_bfd_mips_init_file_header\n+\t* elfxx-mips.h (_bfd_mips_post_process_headers): Delete.\n+\t(_bfd_mips_init_file_header): Declare.\n+\t(elf_backend_post_process_headers): Delete.\n+\t(elf_backend_init_file_header): Define.\n+\t* elfxx-target.h (elf_backend_post_process_headers): Delete.\n+\t(elf_backend_init_file_header): Define and use.\n+\t* elf32-m68hc12.c (elf_backend_init_file_header): Define.\n+\t(elf_backend_post_process_headers): Don't define.\n+\t* elf32-m68hc1x.h (elf32_m68hc11_post_process_headers): Delete.\n+\t(elf32_m68hc11_init_file_header): Declare.\n+\t* elf32-ppc.c (elf_backend_post_process_headers): Remove\n+\tunnecessary undef.\n+\n 2019-11-18  Alan Modra  <amodra@gmail.com>\n \n \t* elf-bfd.h (struct elf_backend_data <elf_backend_modify_headers>):"
    },
    {
      "sha": "6cfd1ac27f6035112ed4b137677afed82bfedf8a",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -1192,10 +1192,9 @@ struct elf_backend_data\n   bfd_boolean (*gc_mark_extra_sections)\n     (struct bfd_link_info *, elf_gc_mark_hook_fn);\n \n-  /* This function, if defined, is called after the ELF headers have\n-     been created.  This allows for things like the OS and ABI versions\n-     to be changed.  */\n-  void (*elf_backend_post_process_headers)\n+  /* This function is called to initialise ELF file header info.\n+     Customised versions can modify things like the OS and ABI version.  */\n+  bfd_boolean (*elf_backend_init_file_header)\n     (bfd *, struct bfd_link_info *);\n \n   /* This function, if defined, prints a symbol to file and returns the\n@@ -2391,7 +2390,7 @@ extern bfd_boolean _bfd_elf_setup_sections\n extern struct bfd_link_hash_entry *bfd_elf_define_start_stop\n   (struct bfd_link_info *, const char *, asection *);\n \n-extern void _bfd_elf_post_process_headers (bfd *, struct bfd_link_info *);\n+extern bfd_boolean _bfd_elf_init_file_header (bfd *, struct bfd_link_info *);\n \n extern bfd_boolean _bfd_elf_final_write_processing (bfd *);\n "
    },
    {
      "sha": "88e51c4f7d39c99a6cd9f84199f1bd53e0f2101f",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 5,
      "deletions": 24,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -51,7 +51,6 @@ SECTION\n \n static int elf_sort_sections (const void *, const void *);\n static bfd_boolean assign_file_positions_except_relocs (bfd *, struct bfd_link_info *);\n-static bfd_boolean prep_headers (bfd *);\n static bfd_boolean swap_out_syms (bfd *, struct elf_strtab_hash **, int) ;\n static bfd_boolean elf_parse_notes (bfd *abfd, char *buf, size_t size,\n \t\t\t\t    file_ptr offset, size_t align);\n@@ -4312,12 +4311,9 @@ _bfd_elf_compute_section_file_positions (bfd *abfd,\n   if (bed->elf_backend_begin_write_processing)\n     (*bed->elf_backend_begin_write_processing) (abfd, link_info);\n \n-  if (! prep_headers (abfd))\n+  if (!(*bed->elf_backend_init_file_header) (abfd, link_info))\n     return FALSE;\n \n-  /* Post process the headers if necessary.  */\n-  (*bed->elf_backend_post_process_headers) (abfd, link_info);\n-\n   fsargs.failed = FALSE;\n   fsargs.link_info = link_info;\n   bfd_map_over_sections (abfd, elf_fake_sections, &fsargs);\n@@ -4350,7 +4346,7 @@ _bfd_elf_compute_section_file_positions (bfd *abfd,\n     }\n \n   shstrtab_hdr = &elf_tdata (abfd)->shstrtab_hdr;\n-  /* sh_name was set in prep_headers.  */\n+  /* sh_name was set in init_file_header.  */\n   shstrtab_hdr->sh_type = SHT_STRTAB;\n   shstrtab_hdr->sh_flags = bed->elf_strtab_flags;\n   shstrtab_hdr->sh_addr = 0;\n@@ -6385,8 +6381,9 @@ assign_file_positions_except_relocs (bfd *abfd,\n   return TRUE;\n }\n \n-static bfd_boolean\n-prep_headers (bfd *abfd)\n+bfd_boolean\n+_bfd_elf_init_file_header (bfd *abfd,\n+\t\t\t   struct bfd_link_info *info ATTRIBUTE_UNUSED)\n {\n   Elf_Internal_Ehdr *i_ehdrp;\t/* Elf file header, internal form.  */\n   struct elf_strtab_hash *shstrtab;\n@@ -6449,16 +6446,6 @@ prep_headers (bfd *abfd)\n   i_ehdrp->e_entry = bfd_get_start_address (abfd);\n   i_ehdrp->e_shentsize = bed->s->sizeof_shdr;\n \n-  /* If we're building an executable, we'll need a program header table.  */\n-  if (abfd->flags & EXEC_P)\n-    /* It all happens later.  */\n-    ;\n-  else\n-    {\n-      i_ehdrp->e_phentsize = 0;\n-      i_ehdrp->e_phoff = 0;\n-    }\n-\n   elf_tdata (abfd)->symtab_hdr.sh_name =\n     (unsigned int) _bfd_elf_strtab_add (shstrtab, \".symtab\", FALSE);\n   elf_tdata (abfd)->strtab_hdr.sh_name =\n@@ -12224,12 +12211,6 @@ asection _bfd_elf_large_com_section\n   = BFD_FAKE_SECTION (_bfd_elf_large_com_section, &lcomm_sym,\n \t\t      \"LARGE_COMMON\", 0, SEC_IS_COMMON);\n \n-void\n-_bfd_elf_post_process_headers (bfd *abfd ATTRIBUTE_UNUSED,\n-\t\t\t       struct bfd_link_info *info ATTRIBUTE_UNUSED)\n-{\n-}\n-\n bfd_boolean\n _bfd_elf_final_write_processing (bfd *abfd)\n {"
    },
    {
      "sha": "f27ee421833f37fb25ae81b8ed476c78bff28663",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -17850,19 +17850,20 @@ elf32_arm_finish_dynamic_sections (bfd * output_bfd, struct bfd_link_info * info\n   return TRUE;\n }\n \n-static void\n-elf32_arm_post_process_headers (bfd * abfd, struct bfd_link_info * link_info ATTRIBUTE_UNUSED)\n+static bfd_boolean\n+elf32_arm_init_file_header (bfd *abfd, struct bfd_link_info *link_info)\n {\n   Elf_Internal_Ehdr * i_ehdrp;\t/* ELF file header, internal form.  */\n   struct elf32_arm_link_hash_table *globals;\n   struct elf_segment_map *m;\n \n+  if (!_bfd_elf_init_file_header (abfd, link_info))\n+    return FALSE;\n+\n   i_ehdrp = elf_elfheader (abfd);\n \n   if (EF_ARM_EABI_VERSION (i_ehdrp->e_flags) == EF_ARM_EABI_UNKNOWN)\n     i_ehdrp->e_ident[EI_OSABI] = ELFOSABI_ARM;\n-  else\n-    _bfd_elf_post_process_headers (abfd, link_info);\n   i_ehdrp->e_ident[EI_ABIVERSION] = ARM_ELF_ABI_VERSION;\n \n   if (link_info)\n@@ -17904,6 +17905,7 @@ elf32_arm_post_process_headers (bfd * abfd, struct bfd_link_info * link_info ATT\n \t  m->p_flags_valid = 1;\n \t}\n     }\n+  return TRUE;\n }\n \n static enum elf_reloc_type_class\n@@ -20504,7 +20506,7 @@ elf32_arm_backend_symbol_processing (bfd *abfd, asymbol *sym)\n #define elf_backend_size_dynamic_sections\telf32_arm_size_dynamic_sections\n #define elf_backend_always_size_sections\telf32_arm_always_size_sections\n #define elf_backend_init_index_section\t\t_bfd_elf_init_2_index_sections\n-#define elf_backend_post_process_headers\telf32_arm_post_process_headers\n+#define elf_backend_init_file_header\t\telf32_arm_init_file_header\n #define elf_backend_reloc_type_class\t\telf32_arm_reloc_type_class\n #define elf_backend_object_p\t\t\telf32_arm_object_p\n #define elf_backend_fake_sections\t\telf32_arm_fake_sections"
    },
    {
      "sha": "41fc403e07b8e5581bd6f9f128833f629bb129a4",
      "filename": "bfd/elf32-i386.c",
      "status": "modified",
      "additions": 9,
      "deletions": 8,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf32-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf32-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-i386.c?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -4400,10 +4400,11 @@ elf_i386_link_setup_gnu_properties (struct bfd_link_info *info)\n    \"FreeBSD\" label in the ELF header.  So we put this label on all\n    executables and (for simplicity) also all other object files.  */\n \n-static void\n-elf_i386_fbsd_post_process_headers (bfd *abfd, struct bfd_link_info *info)\n+static bfd_boolean\n+elf_i386_fbsd_init_file_header (bfd *abfd, struct bfd_link_info *info)\n {\n-  _bfd_elf_post_process_headers (abfd, info);\n+  if (!_bfd_elf_init_file_header (abfd, info))\n+    return FALSE;\n \n #ifdef OLD_FREEBSD_ABI_LABEL\n   {\n@@ -4412,17 +4413,20 @@ elf_i386_fbsd_post_process_headers (bfd *abfd, struct bfd_link_info *info)\n     memcpy (&i_ehdrp->e_ident[EI_ABIVERSION], \"FreeBSD\", 8);\n   }\n #endif\n+  return TRUE;\n }\n \n-#undef\telf_backend_post_process_headers\n-#define\telf_backend_post_process_headers\telf_i386_fbsd_post_process_headers\n+#undef\telf_backend_init_file_header\n+#define\telf_backend_init_file_header\telf_i386_fbsd_init_file_header\n #undef\telf32_bed\n #define\telf32_bed\t\t\t\telf32_i386_fbsd_bed\n \n #undef elf_backend_add_symbol_hook\n \n #include \"elf32-target.h\"\n \n+#undef elf_backend_init_file_header\n+\n /* Solaris 2.  */\n \n #undef\tTARGET_LITTLE_SYM\n@@ -4438,8 +4442,6 @@ static const struct elf_x86_backend_data elf_i386_solaris_arch_bed =\n #undef\telf_backend_arch_data\n #define\telf_backend_arch_data\t\t&elf_i386_solaris_arch_bed\n \n-#undef elf_backend_post_process_headers\n-\n /* Restore default: we cannot use ELFOSABI_SOLARIS, otherwise ELFOSABI_NONE\n    objects won't be recognized.  */\n #undef ELF_OSABI\n@@ -4607,7 +4609,6 @@ elf32_iamcu_elf_object_p (bfd *abfd)\n #undef\tELF_OSABI\n #undef\telf_backend_want_plt_sym\n #define elf_backend_want_plt_sym\t0\n-#undef\telf_backend_post_process_headers\n #undef\telf_backend_static_tls_alignment\n \n /* NaCl uses substantially different PLT entries for the same effects.  */"
    },
    {
      "sha": "87eeab4e5bee7048a8d54c0847ddfcd2e32406be",
      "filename": "bfd/elf32-m68hc12.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf32-m68hc12.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf32-m68hc12.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m68hc12.c?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -656,7 +656,7 @@ static const struct bfd_elf_special_section elf32_m68hc12_special_sections[] =\n #define elf_backend_object_p\t\tm68hc12_elf_set_mach_from_flags\n #define elf_backend_can_gc_sections\t\t1\n #define elf_backend_special_sections elf32_m68hc12_special_sections\n-#define elf_backend_post_process_headers     elf32_m68hc11_post_process_headers\n+#define elf_backend_init_file_header     elf32_m68hc11_init_file_header\n #define elf_backend_add_symbol_hook  elf32_m68hc11_add_symbol_hook\n #define elf_backend_merge_symbol_attribute elf32_m68hc11_merge_symbol_attribute\n "
    },
    {
      "sha": "68ace451eaa899e5d234db19f46da53722fdcf8c",
      "filename": "bfd/elf32-m68hc1x.c",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf32-m68hc1x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf32-m68hc1x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m68hc1x.c?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -1456,20 +1456,21 @@ static void scan_sections_for_abi (bfd *abfd ATTRIBUTE_UNUSED,\n \n /* Tweak the OSABI field of the elf header.  */\n \n-void\n-elf32_m68hc11_post_process_headers (bfd *abfd, struct bfd_link_info *link_info)\n+bfd_boolean\n+elf32_m68hc11_init_file_header (bfd *abfd, struct bfd_link_info *link_info)\n {\n   struct m68hc11_scan_param param;\n   struct m68hc11_elf_link_hash_table *htab;\n \n-  _bfd_elf_post_process_headers (abfd, link_info);\n+  if (!_bfd_elf_init_file_header (abfd, link_info))\n+    return FALSE;\n \n   if (link_info == NULL)\n-    return;\n+    return TRUE;\n \n   htab = m68hc11_elf_hash_table (link_info);\n   if (htab == NULL)\n-    return;\n+    return TRUE;\n \n   m68hc11_elf_get_bank_parameters (link_info);\n \n@@ -1485,4 +1486,5 @@ elf32_m68hc11_post_process_headers (bfd *abfd, struct bfd_link_info *link_info)\n       i_ehdrp = elf_elfheader (abfd);\n       i_ehdrp->e_flags |= E_M68HC12_BANKS;\n     }\n+  return TRUE;\n }"
    },
    {
      "sha": "7143821b8870744013968a23803385a0bbac683c",
      "filename": "bfd/elf32-m68hc1x.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf32-m68hc1x.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf32-m68hc1x.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m68hc1x.h?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -181,7 +181,7 @@ void elf32_m68hc11_merge_symbol_attribute\n \n /* Tweak the OSABI field of the elf header.  */\n \n-extern void elf32_m68hc11_post_process_headers (bfd*, struct bfd_link_info*);\n+extern bfd_boolean elf32_m68hc11_init_file_header (bfd*, struct bfd_link_info*);\n \n int elf32_m68hc11_setup_section_lists (bfd *, struct bfd_link_info *);\n "
    },
    {
      "sha": "5f09239b59f3ec6267e852ec1bc7d7d824e1b0b8",
      "filename": "bfd/elf32-metag.c",
      "status": "modified",
      "additions": 7,
      "deletions": 4,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf32-metag.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf32-metag.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-metag.c?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -3237,14 +3237,17 @@ elf_metag_finish_dynamic_symbol (bfd *output_bfd,\n \n /* Set the Meta ELF ABI version.  */\n \n-static void\n-elf_metag_post_process_headers (bfd * abfd, struct bfd_link_info * link_info)\n+static bfd_boolean\n+elf_metag_init_file_header (bfd *abfd, struct bfd_link_info *link_info)\n {\n   Elf_Internal_Ehdr * i_ehdrp;\t/* ELF file header, internal form.  */\n \n-  _bfd_elf_post_process_headers (abfd, link_info);\n+  if (!_bfd_elf_init_file_header (abfd, link_info))\n+    return FALSE;\n+\n   i_ehdrp = elf_elfheader (abfd);\n   i_ehdrp->e_ident[EI_ABIVERSION] = METAG_ELF_ABI_VERSION;\n+  return TRUE;\n }\n \n /* Used to decide how to sort relocs in an optimal manner for the\n@@ -4145,7 +4148,7 @@ elf_metag_plt_sym_val (bfd_vma i, const asection *plt,\n #define elf_backend_size_dynamic_sections\telf_metag_size_dynamic_sections\n #define elf_backend_omit_section_dynsym \\\n \t_bfd_elf_omit_section_dynsym_all\n-#define elf_backend_post_process_headers\telf_metag_post_process_headers\n+#define elf_backend_init_file_header\t\telf_metag_init_file_header\n #define elf_backend_reloc_type_class\t\telf_metag_reloc_type_class\n #define elf_backend_copy_indirect_symbol\telf_metag_copy_indirect_symbol\n #define elf_backend_plt_sym_val\t\telf_metag_plt_sym_val"
    },
    {
      "sha": "b9bcc506ae7e67c7976350f4dae04d42fd3b9028",
      "filename": "bfd/elf32-ppc.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf32-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf32-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ppc.c?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -10509,6 +10509,5 @@ ppc_elf_vxworks_final_write_processing (bfd *abfd)\n \n #undef elf32_bed\n #define elf32_bed\t\t\t\tppc_elf_vxworks_bed\n-#undef elf_backend_post_process_headers\n \n #include \"elf32-target.h\""
    },
    {
      "sha": "9a1648f850fb64c789b6d3a554a774567ea7672b",
      "filename": "bfd/elf32-spu.c",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf32-spu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf32-spu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-spu.c?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -5185,17 +5185,19 @@ spu_elf_plugin (int val)\n \n /* Set ELF header e_type for plugins.  */\n \n-static void\n-spu_elf_post_process_headers (bfd *abfd, struct bfd_link_info *info)\n+static bfd_boolean\n+spu_elf_init_file_header (bfd *abfd, struct bfd_link_info *info)\n {\n+  if (!_bfd_elf_init_file_header (abfd, info))\n+    return FALSE;\n+\n   if (spu_plugin)\n     {\n       Elf_Internal_Ehdr *i_ehdrp = elf_elfheader (abfd);\n \n       i_ehdrp->e_type = ET_DYN;\n     }\n-\n-  _bfd_elf_post_process_headers (abfd, info);\n+  return TRUE;\n }\n \n /* We may add an extra PT_LOAD segment for .toe.  We also need extra\n@@ -5531,7 +5533,7 @@ spu_elf_size_sections (bfd *obfd ATTRIBUTE_UNUSED, struct bfd_link_info *info)\n #define elf_backend_additional_program_headers\tspu_elf_additional_program_headers\n #define elf_backend_modify_segment_map\t\tspu_elf_modify_segment_map\n #define elf_backend_modify_headers\t\tspu_elf_modify_headers\n-#define elf_backend_post_process_headers\tspu_elf_post_process_headers\n+#define elf_backend_init_file_header\t\tspu_elf_init_file_header\n #define elf_backend_fake_sections\t\tspu_elf_fake_sections\n #define elf_backend_special_sections\t\tspu_elf_special_sections\n #define bfd_elf32_bfd_final_link\t\tspu_elf_final_link"
    },
    {
      "sha": "8721b77666a6419a4c794b39b3b8f222e29a498a",
      "filename": "bfd/elf32-visium.c",
      "status": "modified",
      "additions": 10,
      "deletions": 5,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf32-visium.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf32-visium.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-visium.c?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -722,12 +722,17 @@ visium_elf_gc_mark_hook (asection *sec, struct bfd_link_info *info,\n   return _bfd_elf_gc_mark_hook (sec, info, rel, h, sym);\n }\n \n-static void\n-visium_elf_post_process_headers (bfd *abfd,\n-\t\t\t\t struct bfd_link_info *info ATTRIBUTE_UNUSED)\n+static bfd_boolean\n+visium_elf_init_file_header (bfd *abfd, struct bfd_link_info *info)\n {\n-  Elf_Internal_Ehdr *i_ehdrp = elf_elfheader (abfd);\n+  Elf_Internal_Ehdr *i_ehdrp;\n+\n+  if (!_bfd_elf_init_file_header (abfd, info))\n+    return FALSE;\n+\n+  i_ehdrp = elf_elfheader (abfd);\n   i_ehdrp->e_ident[EI_ABIVERSION] = 1;\n+  return TRUE;\n }\n \n /* Function to set the ELF flag bits.  */\n@@ -873,6 +878,6 @@ visium_elf_print_private_bfd_data (bfd *abfd, void *ptr)\n #define bfd_elf32_bfd_copy_private_bfd_data\tvisium_elf_copy_private_bfd_data\n #define bfd_elf32_bfd_merge_private_bfd_data\tvisium_elf_merge_private_bfd_data\n #define bfd_elf32_bfd_print_private_bfd_data\tvisium_elf_print_private_bfd_data\n-#define elf_backend_post_process_headers\tvisium_elf_post_process_headers\n+#define elf_backend_init_file_header\t\tvisium_elf_init_file_header\n \n #include \"elf32-target.h\""
    },
    {
      "sha": "d4ac0c1469319eeb763d63f650f8b75c2f5a0ae4",
      "filename": "bfd/elf64-alpha.c",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf64-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf64-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-alpha.c?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -5544,12 +5544,14 @@ static const struct elf_size_info alpha_elf_size_info =\n    \"FreeBSD\" label in the ELF header.  So we put this label on all\n    executables and (for simplicity) also all other object files.  */\n \n-static void\n-elf64_alpha_fbsd_post_process_headers (bfd * abfd,\n-\tstruct bfd_link_info * link_info ATTRIBUTE_UNUSED)\n+static bfd_boolean\n+elf64_alpha_fbsd_init_file_header (bfd *abfd, struct bfd_link_info *info)\n {\n   Elf_Internal_Ehdr * i_ehdrp;\t/* ELF file header, internal form.  */\n \n+  if (!_bfd_elf_init_file_header (abfd, info))\n+    return FALSE;\n+\n   i_ehdrp = elf_elfheader (abfd);\n \n   /* Put an ABI label supported by FreeBSD >= 4.1.  */\n@@ -5558,11 +5560,12 @@ elf64_alpha_fbsd_post_process_headers (bfd * abfd,\n   /* The ABI label supported by FreeBSD <= 4.0 is quite nonstandard.  */\n   memcpy (&i_ehdrp->e_ident[EI_ABIVERSION], \"FreeBSD\", 8);\n #endif\n+  return TRUE;\n }\n \n-#undef elf_backend_post_process_headers\n-#define elf_backend_post_process_headers \\\n-  elf64_alpha_fbsd_post_process_headers\n+#undef elf_backend_init_file_header\n+#define elf_backend_init_file_header \\\n+  elf64_alpha_fbsd_init_file_header\n \n #undef  elf64_bed\n #define elf64_bed elf64_alpha_fbsd_bed"
    },
    {
      "sha": "6ec592d74039734c05837d9c946a640e94aab733",
      "filename": "bfd/elf64-hppa.c",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf64-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf64-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-hppa.c?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -169,9 +169,6 @@ static struct bfd_link_hash_table *elf64_hppa_hash_table_create\n static bfd_boolean elf64_hppa_object_p\n   (bfd *);\n \n-static void elf64_hppa_post_process_headers\n-  (bfd *, struct bfd_link_info *);\n-\n static bfd_boolean elf64_hppa_create_dynamic_sections\n   (bfd *, struct bfd_link_info *);\n \n@@ -1120,16 +1117,18 @@ allocate_global_data_opd (struct elf_link_hash_entry *eh, void *data)\n /* HP requires the EI_OSABI field to be filled in.  The assignment to\n    EI_ABIVERSION may not be strictly necessary.  */\n \n-static void\n-elf64_hppa_post_process_headers (bfd *abfd,\n-\t\t\t struct bfd_link_info *link_info ATTRIBUTE_UNUSED)\n+static bfd_boolean\n+elf64_hppa_init_file_header (bfd *abfd, struct bfd_link_info *info)\n {\n-  Elf_Internal_Ehdr * i_ehdrp;\n+  Elf_Internal_Ehdr *i_ehdrp;\n \n-  i_ehdrp = elf_elfheader (abfd);\n+  if (!_bfd_elf_init_file_header (abfd, info))\n+    return FALSE;\n \n+  i_ehdrp = elf_elfheader (abfd);\n   i_ehdrp->e_ident[EI_OSABI] = get_elf_backend_data (abfd)->elf_osabi;\n   i_ehdrp->e_ident[EI_ABIVERSION] = 1;\n+  return TRUE;\n }\n \n /* Create function descriptor section (.opd).  This section is called .opd\n@@ -4024,7 +4023,7 @@ const struct elf_size_info hppa64_elf_size_info =\n \n #define elf_backend_create_dynamic_sections \\\n \t\t\t\t\telf64_hppa_create_dynamic_sections\n-#define elf_backend_post_process_headers\telf64_hppa_post_process_headers\n+#define elf_backend_init_file_header\telf64_hppa_init_file_header\n \n #define elf_backend_omit_section_dynsym _bfd_elf_omit_section_dynsym_all\n "
    },
    {
      "sha": "d0cb7e08e108dcd10c44daba7b279a52357b5436",
      "filename": "bfd/elf64-ia64-vms.c",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf64-ia64-vms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elf64-ia64-vms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ia64-vms.c?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -4611,14 +4611,18 @@ elf64_vms_object_p (bfd *abfd)\n   return TRUE;\n }\n \n-static void\n-elf64_vms_post_process_headers (bfd *abfd,\n-\t\t\t\tstruct bfd_link_info *info ATTRIBUTE_UNUSED)\n+static bfd_boolean\n+elf64_vms_init_file_header (bfd *abfd, struct bfd_link_info *info)\n {\n-  Elf_Internal_Ehdr *i_ehdrp = elf_elfheader (abfd);\n+  Elf_Internal_Ehdr *i_ehdrp;\n \n+  if (!_bfd_elf_init_file_header (abfd, info))\n+    return FALSE;\n+\n+  i_ehdrp = elf_elfheader (abfd);\n   i_ehdrp->e_ident[EI_OSABI] = ELFOSABI_OPENVMS;\n   i_ehdrp->e_ident[EI_ABIVERSION] = 2;\n+  return TRUE;\n }\n \n static bfd_boolean\n@@ -5553,8 +5557,8 @@ static const struct elf_size_info elf64_ia64_vms_size_info = {\n #undef  elf_backend_section_from_shdr\n #define elf_backend_section_from_shdr elf64_vms_section_from_shdr\n \n-#undef  elf_backend_post_process_headers\n-#define elf_backend_post_process_headers elf64_vms_post_process_headers\n+#undef  elf_backend_init_file_header\n+#define elf_backend_init_file_header elf64_vms_init_file_header\n \n #undef  elf_backend_section_processing\n #define elf_backend_section_processing elf64_vms_section_processing"
    },
    {
      "sha": "a71071161c71a998a1eb11cb9bc137f2b7fe5995",
      "filename": "bfd/elfnn-aarch64.c",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elfnn-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elfnn-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-aarch64.c?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -8131,16 +8131,17 @@ elfNN_aarch64_find_inliner_info (bfd *abfd,\n }\n \n \n-static void\n-elfNN_aarch64_post_process_headers (bfd *abfd,\n-\t\t\t\t    struct bfd_link_info *link_info)\n+static bfd_boolean\n+elfNN_aarch64_init_file_header (bfd *abfd, struct bfd_link_info *link_info)\n {\n   Elf_Internal_Ehdr *i_ehdrp;\t/* ELF file header, internal form.  */\n \n+  if (!_bfd_elf_init_file_header (abfd, link_info))\n+    return FALSE;\n+\n   i_ehdrp = elf_elfheader (abfd);\n   i_ehdrp->e_ident[EI_ABIVERSION] = AARCH64_ELF_ABI_VERSION;\n-\n-  _bfd_elf_post_process_headers (abfd, link_info);\n+  return TRUE;\n }\n \n static enum elf_reloc_type_class\n@@ -10172,8 +10173,8 @@ const struct elf_size_info elfNN_aarch64_size_info =\n #define elf_backend_plt_sym_val\t\t\t\\\n   elfNN_aarch64_plt_sym_val\n \n-#define elf_backend_post_process_headers\t\\\n-  elfNN_aarch64_post_process_headers\n+#define elf_backend_init_file_header\t\t\\\n+  elfNN_aarch64_init_file_header\n \n #define elf_backend_relocate_section\t\t\\\n   elfNN_aarch64_relocate_section"
    },
    {
      "sha": "459d986c0350f5e5982c7738ea69273f2ae97f7a",
      "filename": "bfd/elfnn-ia64.c",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elfnn-ia64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elfnn-ia64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-ia64.c?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -4972,14 +4972,18 @@ elfNN_ia64_hpux_vec (const bfd_target *vec)\n   return (vec == &ia64_elfNN_hpux_be_vec);\n }\n \n-static void\n-elfNN_hpux_post_process_headers (bfd *abfd,\n-\t\t\t\t struct bfd_link_info *info ATTRIBUTE_UNUSED)\n+static bfd_boolean\n+elfNN_hpux_init_file_header (bfd *abfd, struct bfd_link_info *info)\n {\n-  Elf_Internal_Ehdr *i_ehdrp = elf_elfheader (abfd);\n+  Elf_Internal_Ehdr *i_ehdrp;\n \n+  if (!_bfd_elf_init_file_header (abfd, info))\n+    return FALSE;\n+\n+  i_ehdrp = elf_elfheader (abfd);\n   i_ehdrp->e_ident[EI_OSABI] = get_elf_backend_data (abfd)->elf_osabi;\n   i_ehdrp->e_ident[EI_ABIVERSION] = 1;\n+  return TRUE;\n }\n \n static bfd_boolean\n@@ -5121,8 +5125,8 @@ elfNN_hpux_backend_symbol_processing (bfd *abfd ATTRIBUTE_UNUSED,\n \n /* These are HP-UX specific functions.  */\n \n-#undef  elf_backend_post_process_headers\n-#define elf_backend_post_process_headers elfNN_hpux_post_process_headers\n+#undef  elf_backend_init_file_header\n+#define elf_backend_init_file_header elfNN_hpux_init_file_header\n \n #undef  elf_backend_section_from_bfd_section\n #define elf_backend_section_from_bfd_section elfNN_hpux_backend_section_from_bfd_section"
    },
    {
      "sha": "3982ed25e914a2e0085c6f3925a9edd04e05c041",
      "filename": "bfd/elfxx-mips.c",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elfxx-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elfxx-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.c?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -16645,12 +16645,15 @@ enum\n   MIPS_LIBC_ABI_MAX\n };\n \n-void\n-_bfd_mips_post_process_headers (bfd *abfd, struct bfd_link_info *link_info)\n+bfd_boolean\n+_bfd_mips_init_file_header (bfd *abfd, struct bfd_link_info *link_info)\n {\n   struct mips_elf_link_hash_table *htab = NULL;\n   Elf_Internal_Ehdr *i_ehdrp;\n \n+  if (!_bfd_elf_init_file_header (abfd, link_info))\n+    return FALSE;\n+\n   i_ehdrp = elf_elfheader (abfd);\n   if (link_info)\n     {\n@@ -16673,8 +16676,7 @@ _bfd_mips_post_process_headers (bfd *abfd, struct bfd_link_info *link_info)\n      if it is the only hash section that will be created.  */\n   if (link_info && link_info->emit_gnu_hash && !link_info->emit_hash)\n     i_ehdrp->e_ident[EI_ABIVERSION] = MIPS_LIBC_ABI_XHASH;\n-\n-  _bfd_elf_post_process_headers (abfd, link_info);\n+  return TRUE;\n }\n \n int"
    },
    {
      "sha": "fc4e54bc8fd6501917d8f093a25adb8b78abee46",
      "filename": "bfd/elfxx-mips.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elfxx-mips.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elfxx-mips.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.h?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -163,7 +163,7 @@ extern long _bfd_mips_elf_get_synthetic_symtab\n   (bfd *, long, asymbol **, long, asymbol **, asymbol **);\n extern bfd_boolean _bfd_mips_elf_gc_mark_extra_sections\n   (struct bfd_link_info *, elf_gc_mark_hook_fn);\n-extern void _bfd_mips_post_process_headers\n+extern bfd_boolean _bfd_mips_init_file_header\n   (bfd *abfd, struct bfd_link_info *link_info);\n \n extern const struct bfd_elf_special_section _bfd_mips_elf_special_sections [];\n@@ -201,7 +201,7 @@ literal_reloc_p (int r_type)\n #define elf_backend_eh_frame_address_size _bfd_mips_elf_eh_frame_address_size\n #define elf_backend_merge_symbol_attribute  _bfd_mips_elf_merge_symbol_attribute\n #define elf_backend_ignore_undef_symbol _bfd_mips_elf_ignore_undef_symbol\n-#define elf_backend_post_process_headers _bfd_mips_post_process_headers\n+#define elf_backend_init_file_header _bfd_mips_init_file_header\n #define elf_backend_compact_eh_encoding _bfd_mips_elf_compact_eh_encoding\n #define elf_backend_cant_unwind_opcode _bfd_mips_elf_cant_unwind_opcode\n #define elf_backend_record_xhash_symbol _bfd_mips_elf_record_xhash_symbol"
    },
    {
      "sha": "80c47769306f1a448228985a02b95fb56fc12dcb",
      "filename": "bfd/elfxx-target.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elfxx-target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed7e9d0bdaa0cbeb157e427c262e692a993e4432/bfd/elfxx-target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-target.h?ref=ed7e9d0bdaa0cbeb157e427c262e692a993e4432",
      "patch": "@@ -563,8 +563,8 @@\n #ifndef elf_backend_static_tls_alignment\n #define elf_backend_static_tls_alignment\t1\n #endif\n-#ifndef elf_backend_post_process_headers\n-#define elf_backend_post_process_headers\t_bfd_elf_post_process_headers\n+#ifndef elf_backend_init_file_header\n+#define elf_backend_init_file_header\t\t_bfd_elf_init_file_header\n #endif\n #ifndef elf_backend_print_symbol_all\n #define elf_backend_print_symbol_all\t\tNULL\n@@ -829,7 +829,7 @@ static struct elf_backend_data elfNN_bed =\n   elf_backend_gc_mark_dynamic_ref,\n   elf_backend_gc_mark_hook,\n   elf_backend_gc_mark_extra_sections,\n-  elf_backend_post_process_headers,\n+  elf_backend_init_file_header,\n   elf_backend_print_symbol_all,\n   elf_backend_output_arch_local_syms,\n   elf_backend_output_arch_syms,"
    }
  ]
}