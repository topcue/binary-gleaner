{
  "sha": "7056f312d00682bfd44a1b2b8149e8faf3e7b9dd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzA1NmYzMTJkMDA2ODJiZmQ0NGExYjJiODE0OWU4ZmFmM2U3YjlkZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-03-10T18:50:09Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-03-10T18:50:09Z"
    },
    "message": "Use bool for \"parse_completion\"\n\nSome spots in GDB already use bool for \"parse_completion\", but a few\nwere still using int.  This patch updates these to bool.\n\nI'm checking this in.\n\ngdb/ChangeLog\n2021-03-10  Tom Tromey  <tromey@adacore.com>\n\n\t* parser-defs.h (parser_state): Change completion to bool.\n\t<parse_completion>: Likewise.\n\t* ada-lang.h (ada_find_operator_symbol, ada_resolve_funcall)\n\t(ada_resolve_variable, ada_resolve_function): Update.\n\t* ada-lang.c (ada_find_operator_symbol): Change\n\tparse_completion to bool.\n\t(ada_resolve_funcall, ada_resolve_variable)\n\t(ada_resolve_function): Likewise.",
    "tree": {
      "sha": "2b0151816275e5d0f5637102903b65560dccca51",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2b0151816275e5d0f5637102903b65560dccca51"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7056f312d00682bfd44a1b2b8149e8faf3e7b9dd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7056f312d00682bfd44a1b2b8149e8faf3e7b9dd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7056f312d00682bfd44a1b2b8149e8faf3e7b9dd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7056f312d00682bfd44a1b2b8149e8faf3e7b9dd/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b763d508db481ae3721a80392a1b02e681662d23",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b763d508db481ae3721a80392a1b02e681662d23",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b763d508db481ae3721a80392a1b02e681662d23"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 24,
    "deletions": 13
  },
  "files": [
    {
      "sha": "f6732b853be0f2c4d433c3520e70ce0f3177f4a5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7056f312d00682bfd44a1b2b8149e8faf3e7b9dd/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7056f312d00682bfd44a1b2b8149e8faf3e7b9dd/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7056f312d00682bfd44a1b2b8149e8faf3e7b9dd",
      "patch": "@@ -1,3 +1,14 @@\n+2021-03-10  Tom Tromey  <tromey@adacore.com>\n+\n+\t* parser-defs.h (parser_state): Change completion to bool.\n+\t<parse_completion>: Likewise.\n+\t* ada-lang.h (ada_find_operator_symbol, ada_resolve_funcall)\n+\t(ada_resolve_variable, ada_resolve_function): Update.\n+\t* ada-lang.c (ada_find_operator_symbol): Change\n+\tparse_completion to bool.\n+\t(ada_resolve_funcall, ada_resolve_variable)\n+\t(ada_resolve_function): Likewise.\n+\n 2021-03-09  Tom Tromey  <tromey@adacore.com>\n \n \t* eval.c (operation::evaluate_funcall): Use function formal"
    },
    {
      "sha": "b2eff9d3411426ff04425090471bd950741229d9",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7056f312d00682bfd44a1b2b8149e8faf3e7b9dd/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7056f312d00682bfd44a1b2b8149e8faf3e7b9dd/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=7056f312d00682bfd44a1b2b8149e8faf3e7b9dd",
      "patch": "@@ -193,7 +193,7 @@ static int find_struct_field (const char *, struct type *, int,\n \n static int ada_resolve_function (std::vector<struct block_symbol> &,\n \t\t\t\t struct value **, int, const char *,\n-\t\t\t\t struct type *, int);\n+\t\t\t\t struct type *, bool);\n \n static int ada_is_direct_array_type (struct type *);\n \n@@ -3375,7 +3375,7 @@ See set/show multiple-symbol.\"));\n /* See ada-lang.h.  */\n \n block_symbol\n-ada_find_operator_symbol (enum exp_opcode op, int parse_completion,\n+ada_find_operator_symbol (enum exp_opcode op, bool parse_completion,\n \t\t\t  int nargs, value *argvec[])\n {\n   if (possible_user_operator_p (op, argvec))\n@@ -3398,7 +3398,7 @@ ada_find_operator_symbol (enum exp_opcode op, int parse_completion,\n block_symbol\n ada_resolve_funcall (struct symbol *sym, const struct block *block,\n \t\t     struct type *context_type,\n-\t\t     int parse_completion,\n+\t\t     bool parse_completion,\n \t\t     int nargs, value *argvec[],\n \t\t     innermost_block_tracker *tracker)\n {\n@@ -3428,7 +3428,7 @@ ada_resolve_funcall (struct symbol *sym, const struct block *block,\n block_symbol\n ada_resolve_variable (struct symbol *sym, const struct block *block,\n \t\t      struct type *context_type,\n-\t\t      int parse_completion,\n+\t\t      bool parse_completion,\n \t\t      int deprocedure_p,\n \t\t      innermost_block_tracker *tracker)\n {\n@@ -3634,7 +3634,7 @@ static int\n ada_resolve_function (std::vector<struct block_symbol> &syms,\n \t\t      struct value **args, int nargs,\n \t\t      const char *name, struct type *context_type,\n-\t\t      int parse_completion)\n+\t\t      bool parse_completion)\n {\n   int fallback;\n   int k;"
    },
    {
      "sha": "156c9b0cec781518c59aa67fc853e63a16f25526",
      "filename": "gdb/ada-lang.h",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7056f312d00682bfd44a1b2b8149e8faf3e7b9dd/gdb/ada-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7056f312d00682bfd44a1b2b8149e8faf3e7b9dd/gdb/ada-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.h?ref=7056f312d00682bfd44a1b2b8149e8faf3e7b9dd",
      "patch": "@@ -380,31 +380,31 @@ extern void print_ada_task_info (struct ui_out *uiout,\n \t\t\t\t struct inferior *inf);\n \n /* Look for a symbol for an overloaded operator for the operation OP.\n-   PARSE_COMPLETION is nonzero if currently parsing for completion.\n+   PARSE_COMPLETION is true if currently parsing for completion.\n    NARGS and ARGVEC describe the arguments to the call.  Returns a\n    \"null\" block_symbol if no such operator is found.  */\n \n extern block_symbol ada_find_operator_symbol (enum exp_opcode op,\n-\t\t\t\t\t      int parse_completion,\n+\t\t\t\t\t      bool parse_completion,\n \t\t\t\t\t      int nargs, value *argvec[]);\n \n /* Resolve a function call, selecting among possible function symbols.\n    SYM and BLOCK are passed to ada_lookup_symbol_list.  CONTEXT_TYPE\n-   describes the calling context.  PARSE_COMPLETION is nonzero if\n+   describes the calling context.  PARSE_COMPLETION is true if\n    currently parsing for completion.  NARGS and ARGVEC describe the\n    arguments to the call.  This returns the chosen symbol and will\n    update TRACKER accordingly.  */\n \n extern block_symbol ada_resolve_funcall (struct symbol *sym,\n \t\t\t\t\t const struct block *block,\n \t\t\t\t\t struct type *context_type,\n-\t\t\t\t\t int parse_completion,\n+\t\t\t\t\t bool parse_completion,\n \t\t\t\t\t int nargs, value *argvec[],\n \t\t\t\t\t innermost_block_tracker *tracker);\n \n /* Resolve a symbol reference, selecting among possible values.  SYM\n    and BLOCK are passed to ada_lookup_symbol_list.  CONTEXT_TYPE\n-   describes the calling context.  PARSE_COMPLETION is nonzero if\n+   describes the calling context.  PARSE_COMPLETION is true if\n    currently parsing for completion.  If DEPROCEDURE_P is nonzero,\n    then a symbol that names a zero-argument function will be passed\n    through ada_resolve_function.  This returns the chosen symbol and\n@@ -413,7 +413,7 @@ extern block_symbol ada_resolve_funcall (struct symbol *sym,\n extern block_symbol ada_resolve_variable (struct symbol *sym,\n \t\t\t\t\t  const struct block *block,\n \t\t\t\t\t  struct type *context_type,\n-\t\t\t\t\t  int parse_completion,\n+\t\t\t\t\t  bool parse_completion,\n \t\t\t\t\t  int deprocedure_p,\n \t\t\t\t\t  innermost_block_tracker *tracker);\n "
    },
    {
      "sha": "e58dc12303f57539155c41920ded20802b23e4bb",
      "filename": "gdb/parser-defs.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7056f312d00682bfd44a1b2b8149e8faf3e7b9dd/gdb/parser-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7056f312d00682bfd44a1b2b8149e8faf3e7b9dd/gdb/parser-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parser-defs.h?ref=7056f312d00682bfd44a1b2b8149e8faf3e7b9dd",
      "patch": "@@ -113,7 +113,7 @@ struct parser_state : public expr_builder\n \t\tCORE_ADDR context_pc,\n \t\tint comma,\n \t\tconst char *input,\n-\t\tint completion,\n+\t\tbool completion,\n \t\tinnermost_block_tracker *tracker,\n \t\tbool void_p)\n     : expr_builder (lang, gdbarch),\n@@ -251,7 +251,7 @@ struct parser_state : public expr_builder\n   int arglist_len = 0;\n \n   /* True if parsing an expression to attempt completion.  */\n-  int parse_completion;\n+  bool parse_completion;\n \n   /* Completion state is updated here.  */\n   expr_completion_state m_completion_state;"
    }
  ]
}