{
  "sha": "e5a557ac01a775df64ae8149c5fe7d503f46a92f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTVhNTU3YWMwMWE3NzVkZjY0YWU4MTQ5YzVmZTdkNTAzZjQ2YTkyZg==",
  "commit": {
    "author": {
      "name": "John Darrington",
      "email": "john@darrington.wattle.id.au",
      "date": "2019-04-12T16:39:01Z"
    },
    "committer": {
      "name": "John Darrington",
      "email": "john@darrington.wattle.id.au",
      "date": "2019-04-12T16:39:01Z"
    },
    "message": "S12Z: opcodes: Replace \"operator\" with \"optr\".\n\nopcodes/\n\t* s12z-dis.c, s12z-opc.c, s12z-opc.h: Replace operator with optr.",
    "tree": {
      "sha": "4cd52589d63c0e79e2b1ec9ba49fe70095041f89",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4cd52589d63c0e79e2b1ec9ba49fe70095041f89"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e5a557ac01a775df64ae8149c5fe7d503f46a92f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e5a557ac01a775df64ae8149c5fe7d503f46a92f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e5a557ac01a775df64ae8149c5fe7d503f46a92f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e5a557ac01a775df64ae8149c5fe7d503f46a92f/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "d04ebfb8178e56bdcbf925ec0ed55cf14488e3fb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d04ebfb8178e56bdcbf925ec0ed55cf14488e3fb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d04ebfb8178e56bdcbf925ec0ed55cf14488e3fb"
    }
  ],
  "stats": {
    "total": 63,
    "additions": 34,
    "deletions": 29
  },
  "files": [
    {
      "sha": "043e9fe1e6608e23cef937d6e07a72ee27797986",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5a557ac01a775df64ae8149c5fe7d503f46a92f/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5a557ac01a775df64ae8149c5fe7d503f46a92f/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=e5a557ac01a775df64ae8149c5fe7d503f46a92f",
      "patch": "@@ -1,3 +1,8 @@\n+2019-04-12  John Darrington <john@darrington.wattle.id.au>\n+\n+\ts12z-dis.c, s12z-opc.c, s12z-opc.h: Replace \"operator\" with\n+\t\"optr\". (\"operator\" is a reserved word in c++).\n+\n 2019-04-11  Sudakshina Das  <sudi.das@arm.com>\n \n \t* aarch64-opc.c (aarch64_print_operand): Add case for"
    },
    {
      "sha": "6086f1635da2dd61969f40d64f5ddb65c8acc354",
      "filename": "opcodes/s12z-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5a557ac01a775df64ae8149c5fe7d503f46a92f/opcodes/s12z-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5a557ac01a775df64ae8149c5fe7d503f46a92f/opcodes/s12z-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/s12z-dis.c?ref=e5a557ac01a775df64ae8149c5fe7d503f46a92f",
      "patch": "@@ -331,7 +331,7 @@ int\n print_insn_s12z (bfd_vma memaddr, struct disassemble_info* info)\n {\n   int o;\n-  enum operator operator = OP_INVALID;\n+  enum optr operator = OP_INVALID;\n   int n_operands = 0;\n \n   /* The longest instruction in S12Z can have 6 operands."
    },
    {
      "sha": "1f02f5dc6a452a45fcd579f10d968832d586e43a",
      "filename": "opcodes/s12z-opc.c",
      "status": "modified",
      "additions": 26,
      "deletions": 26,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5a557ac01a775df64ae8149c5fe7d503f46a92f/opcodes/s12z-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5a557ac01a775df64ae8149c5fe7d503f46a92f/opcodes/s12z-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/s12z-opc.c?ref=e5a557ac01a775df64ae8149c5fe7d503f46a92f",
      "patch": "@@ -36,8 +36,8 @@ typedef int (* insn_bytes_f) (struct mem_read_abstraction_base *);\n typedef void (*operands_f) (struct mem_read_abstraction_base *,\n \t\t\t    int *n_operands, struct operand **operand);\n \n-typedef enum operator (*discriminator_f) (struct mem_read_abstraction_base *,\n-\t\t\t\t\t  enum operator hint);\n+typedef enum optr (*discriminator_f) (struct mem_read_abstraction_base *,\n+\t\t\t\t\t  enum optr hint);\n \n enum OPR_MODE\n   {\n@@ -969,12 +969,12 @@ static void bit_field_decode (struct mem_read_abstraction_base *mra, int *n_oper\n static void exg_sex_decode (struct mem_read_abstraction_base *mra, int *n_operands, struct operand **operands);\n \n \n-static enum operator shift_discrim (struct mem_read_abstraction_base *mra, enum operator hint);\n-static enum operator psh_pul_discrim (struct mem_read_abstraction_base *mra, enum operator hint);\n-static enum operator mul_discrim (struct mem_read_abstraction_base *mra, enum operator hint);\n-static enum operator loop_primitive_discrim (struct mem_read_abstraction_base *mra, enum operator hint);\n-static enum operator bit_field_discrim (struct mem_read_abstraction_base *mra, enum operator hint);\n-static enum operator exg_sex_discrim (struct mem_read_abstraction_base *mra, enum operator hint);\n+static enum optr shift_discrim (struct mem_read_abstraction_base *mra, enum optr hint);\n+static enum optr psh_pul_discrim (struct mem_read_abstraction_base *mra, enum optr hint);\n+static enum optr mul_discrim (struct mem_read_abstraction_base *mra, enum optr hint);\n+static enum optr loop_primitive_discrim (struct mem_read_abstraction_base *mra, enum optr hint);\n+static enum optr bit_field_discrim (struct mem_read_abstraction_base *mra, enum optr hint);\n+static enum optr exg_sex_discrim (struct mem_read_abstraction_base *mra, enum optr hint);\n \n \n static void\n@@ -1005,8 +1005,8 @@ sub_d6_y_x (struct mem_read_abstraction_base *mra ATTRIBUTE_UNUSED,\n \n static void ld_18bit_decode (struct mem_read_abstraction_base *mra, int *n_operands, struct operand **operand);\n \n-static enum operator\n-mul_discrim (struct mem_read_abstraction_base *mra, enum operator hint)\n+static enum optr\n+mul_discrim (struct mem_read_abstraction_base *mra, enum optr hint)\n {\n   uint8_t mb;\n   int status = mra->read (mra, 0, 1, &mb);\n@@ -1042,7 +1042,7 @@ mul_discrim (struct mem_read_abstraction_base *mra, enum operator hint)\n struct opcode\n {\n   /* The operation that this opcode performs.  */\n-  enum operator operator;\n+  enum optr operator;\n \n   /* The size of this operation.  May be -1 if it is implied\n      in the operands or if size is not applicable.  */\n@@ -2196,8 +2196,8 @@ loop_prim_n_bytes (struct mem_read_abstraction_base *mra)\n \n \f\n \n-static enum operator\n-exg_sex_discrim (struct mem_read_abstraction_base *mra, enum operator hint ATTRIBUTE_UNUSED)\n+static enum optr\n+exg_sex_discrim (struct mem_read_abstraction_base *mra, enum optr hint ATTRIBUTE_UNUSED)\n {\n   uint8_t eb;\n   int status = mra->read (mra, 0, 1, &eb);\n@@ -2210,7 +2210,7 @@ exg_sex_discrim (struct mem_read_abstraction_base *mra, enum operator hint ATTRI\n   const struct reg *r0 = registers + ((struct register_operand *) op0)->reg;\n   const struct reg *r1 = registers + ((struct register_operand *) op1)->reg;\n \n-  enum operator operator = (r0->bytes < r1->bytes) ? OP_sex : OP_exg;\n+  enum optr operator = (r0->bytes < r1->bytes) ? OP_sex : OP_exg;\n \n   free (op0);\n   free (op1);\n@@ -2233,16 +2233,16 @@ exg_sex_decode (struct mem_read_abstraction_base *mra,\n   operands[(*n_operands)++] =  create_register_operand (eb & 0xf);\n }\n \n-static enum operator\n+static enum optr\n loop_primitive_discrim (struct mem_read_abstraction_base *mra,\n-\t\t\tenum operator hint ATTRIBUTE_UNUSED)\n+\t\t\tenum optr hint ATTRIBUTE_UNUSED)\n {\n   uint8_t lb;\n   int status = mra->read (mra, 0, 1, &lb);\n   if (status < 0)\n     return OP_INVALID;\n \n-  enum operator opbase = (lb & 0x80) ? OP_dbNE : OP_tbNE;\n+  enum optr opbase = (lb & 0x80) ? OP_dbNE : OP_tbNE;\n   return opbase + ((lb & 0x70) >> 4);\n }\n \n@@ -2287,8 +2287,8 @@ loop_primitive_decode (struct mem_read_abstraction_base *mra,\n }\n \n \n-static enum operator\n-shift_discrim (struct mem_read_abstraction_base *mra,  enum operator hint ATTRIBUTE_UNUSED)\n+static enum optr\n+shift_discrim (struct mem_read_abstraction_base *mra,  enum optr hint ATTRIBUTE_UNUSED)\n {\n   size_t i;\n   uint8_t sb;\n@@ -2474,9 +2474,9 @@ shift_decode (struct mem_read_abstraction_base *mra,  int *n_operands, struct op\n     }\n }\n \n-static enum operator\n+static enum optr\n psh_pul_discrim (struct mem_read_abstraction_base *mra,\n-\t\t enum operator hint ATTRIBUTE_UNUSED)\n+\t\t enum optr hint ATTRIBUTE_UNUSED)\n {\n   uint8_t byte;\n   int status = mra->read (mra, 0, 1, &byte);\n@@ -2528,8 +2528,8 @@ psh_pul_decode (struct mem_read_abstraction_base *mra,\n     }\n }\n \n-static enum operator\n-bit_field_discrim (struct mem_read_abstraction_base *mra, enum operator hint ATTRIBUTE_UNUSED)\n+static enum optr\n+bit_field_discrim (struct mem_read_abstraction_base *mra, enum optr hint ATTRIBUTE_UNUSED)\n {\n   int status;\n   bfd_byte bb;\n@@ -2647,12 +2647,12 @@ bit_field_decode (struct mem_read_abstraction_base *mra,\n    The operation to be performed is returned.\n    The number of operands, will be placed in N_OPERANDS.\n    The operands themselved into OPERANDS.  */\n-static enum operator\n+static enum optr\n decode_operation (const struct opcode *opc,\n \t\t  struct mem_read_abstraction_base *mra,\n \t\t  int *n_operands, struct operand **operands)\n {\n-  enum operator op = opc->operator;\n+  enum optr op = opc->operator;\n   if (opc->discriminator)\n     op = opc->discriminator (mra, opc->operator);\n \n@@ -2666,7 +2666,7 @@ decode_operation (const struct opcode *opc,\n }\n \n int\n-decode_s12z (enum operator *myoperator, short *osize,\n+decode_s12z (enum optr *myoperator, short *osize,\n \t     int *n_operands, struct operand **operands,\n \t     struct mem_read_abstraction_base *mra)\n {"
    },
    {
      "sha": "04e15595b3876279877b43a69d86ae1d12ae8b5e",
      "filename": "opcodes/s12z-opc.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e5a557ac01a775df64ae8149c5fe7d503f46a92f/opcodes/s12z-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e5a557ac01a775df64ae8149c5fe7d503f46a92f/opcodes/s12z-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/s12z-opc.h?ref=e5a557ac01a775df64ae8149c5fe7d503f46a92f",
      "patch": "@@ -34,7 +34,7 @@ struct mem_read_abstraction_base\n /* Machine code operators.\n    These *roughly* correspond to opcodes.\n    But describe their purpose rather than their form.  */\n-enum operator\n+enum optr\n   {\n     OP_INVALID = 0,\n \n@@ -259,7 +259,7 @@ struct memory_operand\n    It is the responsibility of the caller to free all operands\n    when they are no longer needed.\n    Returns the number of bytes read.  */\n-int decode_s12z (enum operator *myoperator, short *osize,\n+int decode_s12z (enum optr *myoperator, short *osize,\n \t\t int *n_operands, struct operand **operands,\n \t\t struct mem_read_abstraction_base *);\n "
    }
  ]
}