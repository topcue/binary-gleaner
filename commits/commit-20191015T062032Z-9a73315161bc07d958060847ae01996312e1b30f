{
  "sha": "9a73315161bc07d958060847ae01996312e1b30f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWE3MzMxNTE2MWJjMDdkOTU4MDYwODQ3YWUwMTk5NjMxMmUxYjMwZg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-10-15T05:27:35Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-10-15T06:20:32Z"
    },
    "message": "remove more xmalloc in bfd\n\nAlso fixes m68hc1x printf arguments which would have bombed when\ncompiling on a 32-bit host with --enable-64-bit-bfd.\n\nbfd/\n\tPR 24955\n\t* elf32-arm.c (set_cmse_veneer_addr_from_implib): Use bfd_malloc\n\trather than xmalloc.\n\t* elf32-m68hc1x.c (reloc_warning): New function.\n\t(elf32_m68hc11_relocate_section): Use it here.  Cast bfd_vma values\n\tcorresponding to %lx in format strings.\n\t* elf32-nds32.c (nds32_insertion_sort): Use a stack temporary.\ngas/\n\t* config/tc-nds32.c (nds32_set_section_relocs): Use relocs and n\n\tparameters rather than equivalent sec->orelocation and\n\tsec->reloc_count.  Don't sort for n <= 1.  Tidy.",
    "tree": {
      "sha": "afafb3efbfd72cbc23cef4aa72d2b39e19edaace",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/afafb3efbfd72cbc23cef4aa72d2b39e19edaace"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9a73315161bc07d958060847ae01996312e1b30f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a73315161bc07d958060847ae01996312e1b30f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9a73315161bc07d958060847ae01996312e1b30f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a73315161bc07d958060847ae01996312e1b30f/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "779f2ae733cc4b4da666a2405eb77ec70df2c772",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/779f2ae733cc4b4da666a2405eb77ec70df2c772",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/779f2ae733cc4b4da666a2405eb77ec70df2c772"
    }
  ],
  "stats": {
    "total": 129,
    "additions": 79,
    "deletions": 50
  },
  "files": [
    {
      "sha": "72fb5eea975f2d659aea85329cb607bbb7fb26e9",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a73315161bc07d958060847ae01996312e1b30f/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a73315161bc07d958060847ae01996312e1b30f/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=9a73315161bc07d958060847ae01996312e1b30f",
      "patch": "@@ -1,3 +1,13 @@\n+2019-10-15  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 24955\n+\t* elf32-arm.c (set_cmse_veneer_addr_from_implib): Use bfd_malloc\n+\trather than xmalloc.\n+\t* elf32-m68hc1x.c (reloc_warning): New function.\n+\t(elf32_m68hc11_relocate_section): Use it here.  Cast bfd_vma values\n+\tcorresponding to %lx in format strings.\n+\t* elf32-nds32.c (nds32_insertion_sort): Use a stack temporary.\n+\n 2019-10-15  Alan Modra  <amodra@gmail.com>\n \n \tPR 25100"
    },
    {
      "sha": "3aa7de8fee1867bf4378fae5ae6c0d37bfe4f282",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a73315161bc07d958060847ae01996312e1b30f/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a73315161bc07d958060847ae01996312e1b30f/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=9a73315161bc07d958060847ae01996312e1b30f",
      "patch": "@@ -6255,7 +6255,10 @@ set_cmse_veneer_addr_from_implib (struct bfd_link_info *info,\n     return FALSE;\n \n   /* Read in the input secure gateway import library's symbol table.  */\n-  sympp = (asymbol **) xmalloc (symsize);\n+  sympp = (asymbol **) bfd_malloc (symsize);\n+  if (sympp == NULL)\n+    return FALSE;\n+\n   symcount = bfd_canonicalize_symtab (in_implib_bfd, sympp);\n   if (symcount < 0)\n     {"
    },
    {
      "sha": "915f3b7a9a286b3fbf9779206bcd9551533fc50d",
      "filename": "bfd/elf32-m68hc1x.c",
      "status": "modified",
      "additions": 50,
      "deletions": 41,
      "changes": 91,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a73315161bc07d958060847ae01996312e1b30f/bfd/elf32-m68hc1x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a73315161bc07d958060847ae01996312e1b30f/bfd/elf32-m68hc1x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m68hc1x.c?ref=9a73315161bc07d958060847ae01996312e1b30f",
      "patch": "@@ -899,6 +899,29 @@ elf32_m68hc11_check_relocs (bfd *abfd, struct bfd_link_info *info,\n   return TRUE;\n }\n \n+static bfd_boolean\n+reloc_warning (struct bfd_link_info *info, const char *name, bfd *input_bfd,\n+\t       asection *input_section, const Elf_Internal_Rela *rel,\n+\t       const char *fmt, ...)\n+{\n+  va_list ap;\n+  char *buf;\n+  int ret;\n+\n+  va_start (ap, fmt);\n+  ret = vasprintf (&buf, fmt, ap);\n+  va_end (ap);\n+  if (ret < 0)\n+    {\n+      bfd_set_error (bfd_error_no_memory);\n+      return FALSE;\n+    }\n+  info->callbacks->warning (info, buf, name, input_bfd, input_section,\n+\t\t\t    rel->r_offset);\n+  free (buf);\n+  return TRUE;\n+}\n+\n /* Relocate a 68hc11/68hc12 ELF section.  */\n bfd_boolean\n elf32_m68hc11_relocate_section (bfd *output_bfd ATTRIBUTE_UNUSED,\n@@ -951,8 +974,7 @@ elf32_m68hc11_relocate_section (bfd *output_bfd ATTRIBUTE_UNUSED,\n       bfd_boolean is_section_symbol = FALSE;\n       struct elf_link_hash_entry *h;\n       bfd_vma val;\n-      const char * msg;\n-      char * buf;\n+      const char *msg;\n \n       r_symndx = ELF32_R_SYM (rel->r_info);\n       r_type = ELF32_R_TYPE (rel->r_info);\n@@ -1108,17 +1130,13 @@ elf32_m68hc11_relocate_section (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t  break;\n \n \tcase R_M68HC11_16:\n-\t  /* Get virtual address of instruction having the relocation.  */\n \t  if (is_far)\n \t    {\n \t      msg = _(\"reference to the far symbol `%s' using a wrong \"\n \t\t      \"relocation may result in incorrect execution\");\n-\t      buf = xmalloc (strlen (msg) + strlen (name) + 10);\n-\t      sprintf (buf, msg, name);\n-\n-\t      (*info->callbacks->warning)\n-\t\t(info, buf, name, input_bfd, NULL, rel->r_offset);\n-\t      free (buf);\n+\t      if (!reloc_warning (info, name, input_bfd, input_section, rel,\n+\t\t\t\t  msg, name))\n+\t\treturn FALSE;\n \t    }\n \n \t  /* Get virtual address of instruction having the relocation.  */\n@@ -1149,30 +1167,28 @@ elf32_m68hc11_relocate_section (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t\t\t  \"(0xE000-0xFFFF), therefore you must manually offset \"\n \t\t\t  \"the address, and possibly manage the page, in your \"\n \t\t\t  \"code.\");\n-\t\t  buf = xmalloc (strlen (msg) + 128);\n-\t\t  sprintf (buf, msg, phys_addr);\n-\t\t  (*info->callbacks->warning) (info, buf, name, input_bfd,\n-\t\t\t\t\t       input_section, insn_addr);\n-\t\t  free (buf);\n+\t\t  if (!reloc_warning (info, name, input_bfd, input_section, rel,\n+\t\t\t\t      msg, (long) phys_addr))\n+\t\t    return FALSE;\n \t\t  break;\n \t\t}\n \t    }\n \n \t  if (m68hc11_addr_is_banked (pinfo, relocation + rel->r_addend)\n \t      && m68hc11_addr_is_banked (pinfo, insn_addr)\n-\t      && phys_page != insn_page && !(e_flags & E_M68HC11_NO_BANK_WARNING))\n+\t      && phys_page != insn_page\n+\t      && !(e_flags & E_M68HC11_NO_BANK_WARNING))\n \t    {\n \t      /* xgettext:c-format */\n-\t      msg = _(\"banked address [%lx:%04lx] (%lx) is not in the same bank \"\n-\t\t      \"as current banked address [%lx:%04lx] (%lx)\");\n-\t      buf = xmalloc (strlen (msg) + 128);\n-\t      sprintf (buf, msg, phys_page, phys_addr,\n-\t\t       (long) (relocation + rel->r_addend),\n-\t\t       insn_page, m68hc11_phys_addr (pinfo, insn_addr),\n-\t\t       (long) (insn_addr));\n-\t      (*info->callbacks->warning) (info, buf, name, input_bfd,\n-\t\t\t\t\t   input_section, rel->r_offset);\n-\t      free (buf);\n+\t      msg = _(\"banked address [%lx:%04lx] (%lx) is not in the same \"\n+\t\t      \"bank as current banked address [%lx:%04lx] (%lx)\");\n+\t      if (!reloc_warning (info, name, input_bfd, input_section, rel,\n+\t\t\t\t  msg, (long) phys_page, (long) phys_addr,\n+\t\t\t\t  (long) (relocation + rel->r_addend),\n+\t\t\t\t  (long) insn_page,\n+\t\t\t\t  (long) m68hc11_phys_addr (pinfo, insn_addr),\n+\t\t\t\t  (long) insn_addr))\n+\t\treturn FALSE;\n \t      break;\n \t    }\n \n@@ -1181,11 +1197,10 @@ elf32_m68hc11_relocate_section (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t      /* xgettext:c-format */\n \t      msg = _(\"reference to a banked address [%lx:%04lx] in the \"\n \t\t      \"normal address space at %04lx\");\n-\t      buf = xmalloc (strlen (msg) + 128);\n-\t      sprintf (buf, msg, phys_page, phys_addr, insn_addr);\n-\t      (*info->callbacks->warning) (info, buf, name, input_bfd,\n-\t\t\t\t\t   input_section, insn_addr);\n-\t      free (buf);\n+\t      if (!reloc_warning (info, name, input_bfd, input_section, rel,\n+\t\t\t\t  msg, (long) phys_page, (long) phys_addr,\n+\t\t\t\t  (long) insn_addr))\n+\t\treturn FALSE;\n \t      relocation = phys_addr;\n \t      break;\n \t    }\n@@ -1216,18 +1231,12 @@ elf32_m68hc11_relocate_section (bfd *output_bfd ATTRIBUTE_UNUSED,\n \t\trelocation += 0xC000;\n \t      else\n \t\t{\n-\t\t  /* Get virtual address of instruction having the relocation.  */\n-\t\t  insn_addr = input_section->output_section->vma\n-\t\t      + input_section->output_offset + rel->r_offset;\n-\n \t\t  msg = _(\"S12 address (%lx) is not within shared RAM\"\n-\t\t      \"(0x2000-0x4000), therefore you must manually \"\n-\t\t      \"offset the address in your code\");\n-\t\t  buf = xmalloc (strlen (msg) + 128);\n-\t\t  sprintf (buf, msg, phys_addr);\n-\t\t  (*info->callbacks->warning) (info, buf, name, input_bfd,\n-\t\t\t\t\t       input_section, insn_addr);\n-\t\t  free (buf);\n+\t\t\t  \"(0x2000-0x4000), therefore you must manually \"\n+\t\t\t  \"offset the address in your code\");\n+\t\t  if (!reloc_warning (info, name, input_bfd, input_section, rel,\n+\t\t\t\t      msg, (long) phys_addr))\n+\t\t    return FALSE;\n \t\t  break;\n \t\t}\n \t    }"
    },
    {
      "sha": "482fb290d14b5d154f5c311393f9d2ea4d7c11ee",
      "filename": "bfd/elf32-nds32.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a73315161bc07d958060847ae01996312e1b30f/bfd/elf32-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a73315161bc07d958060847ae01996312e1b30f/bfd/elf32-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nds32.c?ref=9a73315161bc07d958060847ae01996312e1b30f",
      "patch": "@@ -2526,7 +2526,9 @@ nds32_insertion_sort (void *base, size_t nmemb, size_t size,\n {\n   char *ptr = (char *) base;\n   int i, j;\n-  char *tmp = xmalloc (size);\n+  char tmp[sizeof (Elf_Internal_Rela)];\n+\n+  BFD_ASSERT (size <= sizeof (tmp));\n \n   /* If i is less than j, i is inserted before j.\n \n@@ -2550,7 +2552,6 @@ nds32_insertion_sort (void *base, size_t nmemb, size_t size,\n       memmove (ptr + (j + 1) * size, ptr + j * size, (i - j) * size);\n       memcpy (ptr + j * size, tmp, size);\n     }\n-  free (tmp);\n }\n \n /* Sort relocation by r_offset."
    },
    {
      "sha": "33cc6ffc9aff1cb289277cc7b1367558746e258f",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a73315161bc07d958060847ae01996312e1b30f/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a73315161bc07d958060847ae01996312e1b30f/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=9a73315161bc07d958060847ae01996312e1b30f",
      "patch": "@@ -1,3 +1,9 @@\n+2019-10-15  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/tc-nds32.c (nds32_set_section_relocs): Use relocs and n\n+\tparameters rather than equivalent sec->orelocation and\n+\tsec->reloc_count.  Don't sort for n <= 1.  Tidy.\n+\n 2019-10-09  Nick Clifton  <nickc@redhat.com>\n \n \tPR 25041"
    },
    {
      "sha": "a75dd9ada9c89c3bc9ab89a5356db2d125f2a56c",
      "filename": "gas/config/tc-nds32.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a73315161bc07d958060847ae01996312e1b30f/gas/config/tc-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a73315161bc07d958060847ae01996312e1b30f/gas/config/tc-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-nds32.c?ref=9a73315161bc07d958060847ae01996312e1b30f",
      "patch": "@@ -7565,13 +7565,13 @@ compar_relent (const void *lhs, const void *rhs)\n    relocation.  */\n \n void\n-nds32_set_section_relocs (asection *sec, arelent ** relocs ATTRIBUTE_UNUSED,\n-\t\t\t  unsigned int n ATTRIBUTE_UNUSED)\n+nds32_set_section_relocs (asection *sec ATTRIBUTE_UNUSED,\n+\t\t\t  arelent **relocs, unsigned int n)\n {\n-  bfd *abfd ATTRIBUTE_UNUSED = sec->owner;\n-  if (bfd_section_flags (sec) & (flagword) SEC_RELOC)\n-    nds32_insertion_sort (sec->orelocation, sec->reloc_count,\n-\t\t\t  sizeof (arelent**), compar_relent);\n+  if (n <= 1)\n+    return;\n+\n+  nds32_insertion_sort (relocs, n, sizeof (*relocs), compar_relent);\n }\n \n long"
    }
  ]
}