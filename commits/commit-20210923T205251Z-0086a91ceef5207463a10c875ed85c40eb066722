{
  "sha": "0086a91ceef5207463a10c875ed85c40eb066722",
  "node_id": "C_kwDOANOeidoAKDAwODZhOTFjZWVmNTIwNzQ2M2ExMGM4NzVlZDg1YzQwZWIwNjY3MjI",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-23T20:52:51Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-23T20:52:51Z"
    },
    "message": "[gdb/testsuite] Support -fPIE/-fno-PIE/-pie/-no-pie in gdb_compile_rust\n\nWhen running gdb.rust/*.exp test-cases with target board unix/-fPIE/-pie, I\nrun into:\n...\nbuiltin_spawn -ignore SIGHUP rustc --color never gdb.rust/watch.rs \\\n  -g -lm -fPIE -pie -o outputs/gdb.rust/watch/watch^M\nerror: Unrecognized option: 'f'^M\n^M\ncompiler exited with status 1\n...\n\nThe problem is that -fPIE and -fpie are gcc options, but for rust we use\nrustc, which has different compilation options.\n\nFix this by translating the gcc options to rustc options in gdb_compile_rust,\nsimilar to how that is done for ada in target_compile_ada_from_dir.\n\nLikewise for unix/-fno-PIE/-no-pie.\n\nTested on x86_64-linux, with:\n- native\n- unix/-fPIE/-pie\n- unix/-fno-PIE/-no-pie\nspecifically, on openSUSE Leap 15.2 both with package gcc-PIE:\n- installed (making gcc default to PIE)\n- uninstalled (making gcc default to non-PIE).\nand rustc 1.52.1.",
    "tree": {
      "sha": "144753b7444caa0e299bfd825f9accc64fac5973",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/144753b7444caa0e299bfd825f9accc64fac5973"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0086a91ceef5207463a10c875ed85c40eb066722",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0086a91ceef5207463a10c875ed85c40eb066722",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0086a91ceef5207463a10c875ed85c40eb066722",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0086a91ceef5207463a10c875ed85c40eb066722/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6ef69a3ff3f5b2483893c6ce611977a1418de2f6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6ef69a3ff3f5b2483893c6ce611977a1418de2f6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6ef69a3ff3f5b2483893c6ce611977a1418de2f6"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 44,
    "deletions": 3
  },
  "files": [
    {
      "sha": "2f78d6dde0ec1c02349c6920322369e2d67621e6",
      "filename": "gdb/testsuite/lib/rust-support.exp",
      "status": "modified",
      "additions": 44,
      "deletions": 3,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0086a91ceef5207463a10c875ed85c40eb066722/gdb/testsuite/lib/rust-support.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0086a91ceef5207463a10c875ed85c40eb066722/gdb/testsuite/lib/rust-support.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/rust-support.exp?ref=0086a91ceef5207463a10c875ed85c40eb066722",
      "patch": "@@ -27,13 +27,54 @@ proc set_lang_rust {} {\n }\n \n proc gdb_compile_rust {sources dest options} {\n+    set res -1\n+\n     if {[llength $sources] > 1} {\n \terror \"gdb rust setup can only compile one source file at a time\"\n     }\n-    if {[gdb_compile [lindex $sources 0] $dest executable $options] != \"\"} {\n-\treturn -1\n+\n+    global board\n+    set board [target_info name]\n+    set multilib_flags_orig [board_info $board multilib_flags]\n+    set multilib_flags {}\n+    foreach op $multilib_flags_orig {\n+\t# Pretend rustc supports -pie/-no-pie/-fPIE/-fno-PIE.\n+\tswitch $op {\n+\t    \"-pie\" - \"-no-pie\" {\n+\t\t# Pass it to linker.\n+\t\tlappend multilib_flags -C link-arg=$op\n+\t    }\n+\t    \"-fno-PIE\" {\n+\t\t# Translate to rustc codegen equivalent.\n+\n+\t\t# The rustc documentation insists that we should use static\n+\t\t# here, but that causes segfaults leading to:\n+\t\t# UNTESTED: gdb.rust/rawids.exp: could not run to breakpoint\n+\t\t# UNTESTED: gdb.rust/pp.exp: could not run to breakpoint\n+\t\t# Instead, we use dynamic-no-pic which does seem to work.\n+\t\tlappend multilib_flags -C relocation-model=dynamic-no-pic\n+\t    }\n+\t    \"-fPIE\" {\n+\t\t# Translate to rustc codegen equivalent.\n+\t\tlappend multilib_flags -C relocation-model=pic\n+\t    }\n+\t    default {\n+\t\t# Pass unmodified.\n+\t\tlappend multilib_flags $op\n+\t    }\n+\t}\n+    }\n+\n+    save_target_board_info { multilib_flags } {\n+\tunset_board_info multilib_flags\n+\tset_board_info multilib_flags \"$multilib_flags\"\n+\tif {[gdb_compile [lindex $sources 0] $dest executable \\\n+\t\t $options] == \"\"} {\n+\t    set res \"\"\n+\t}\n     }\n-    return \"\"\n+\n+    return $res\n }\n \n # Return the version of LLVM used by the Rust compiler.  Note that"
    }
  ]
}