{
  "sha": "09ff83af3c8558594bd31bfaf4ed7daadf4f707d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDlmZjgzYWYzYzg1NTg1OTRiZDMxYmZhZjRlZDdkYWFkZjRmNzA3ZA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-09-23T15:59:08Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-11-10T21:35:28Z"
    },
    "message": "gdb/python: smarter symbol lookup for gdb.lookup_static_symbol\n\nWhen using gdb.lookup_static_symbol I think that GDB should find\nstatic symbols (global symbol with static linkage) from the current\nobject file ahead of static symbols from other object files.\n\nThis means that if we have two source files f1.c and f2.c, and both\nfiles contains 'static int foo;', then when we are stopped in f1.c a\ncall to 'gdb.lookup_static_symbol (\"foo\")' will find f1.c::foo, and if\nwe are stopped in f2.c we would find 'f2.c::foo'.\n\nGiven that gdb.lookup_static_symbol always returns a single symbol,\nbut there can be multiple static symbols with the same name GDB is\nalways making a choice about which symbols to return.  I think that it\nmakes sense for the choice GDB makes in this case to match what a user\nwould get on the command line if they asked to 'print foo'.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/py-symbol.c: Declare and call function from new\n\tpy-symbol-2.c file.\n\t* gdb.python/py-symbol.exp: Compile both source files, and add new\n\ttests for gdb.lookup_static_symbol.\n\t* gdb.python/py-symbol-2.c: New file.\n\ngdb/doc/ChangeLog:\n\n\t* python.texi (Symbols In Python): Extend documentation for\n\tgdb.lookup_static_symbol.\n\ngdb/ChangeLog:\n\n\t* python/py-symbol.c (gdbpy_lookup_static_symbol): Lookup in\n\tstatic block of current object file first.  Also fix typo in\n\theader comment.\n\nChange-Id: Ie55dbeb8806f35577b46015deecde27a0ca2ab64",
    "tree": {
      "sha": "eebca5a0d285af21ced0622302c626e35373ffff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/eebca5a0d285af21ced0622302c626e35373ffff"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/09ff83af3c8558594bd31bfaf4ed7daadf4f707d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/09ff83af3c8558594bd31bfaf4ed7daadf4f707d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/09ff83af3c8558594bd31bfaf4ed7daadf4f707d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/09ff83af3c8558594bd31bfaf4ed7daadf4f707d/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "eb2dd8df7662c3827656e44d2a463d918d473c41",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb2dd8df7662c3827656e44d2a463d918d473c41",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/eb2dd8df7662c3827656e44d2a463d918d473c41"
    }
  ],
  "stats": {
    "total": 123,
    "additions": 109,
    "deletions": 14
  },
  "files": [
    {
      "sha": "ca0c0c366dcb1ec78dc2f2e1ea69d1bd3720d28c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/09ff83af3c8558594bd31bfaf4ed7daadf4f707d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/09ff83af3c8558594bd31bfaf4ed7daadf4f707d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=09ff83af3c8558594bd31bfaf4ed7daadf4f707d",
      "patch": "@@ -1,3 +1,9 @@\n+2019-11-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python/py-symbol.c (gdbpy_lookup_static_symbol): Lookup in\n+\tstatic block of current object file first.  Also fix typo in\n+\theader comment.\n+\n 2019-11-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* stack.c (set_last_displayed_sal): Delete."
    },
    {
      "sha": "6db17b9c8ebb6bc0e16fe0a8073c6fbcca95c93c",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/09ff83af3c8558594bd31bfaf4ed7daadf4f707d/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/09ff83af3c8558594bd31bfaf4ed7daadf4f707d/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=09ff83af3c8558594bd31bfaf4ed7daadf4f707d",
      "patch": "@@ -1,3 +1,8 @@\n+2019-11-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python.texi (Symbols In Python): Extend documentation for\n+\tgdb.lookup_static_symbol.\n+\n 2019-10-31  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.texinfo (Symbols): Document new 'info module variables' and"
    },
    {
      "sha": "9e227deba905566be1bafe479c84ff4b43d5a1f3",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/09ff83af3c8558594bd31bfaf4ed7daadf4f707d/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/09ff83af3c8558594bd31bfaf4ed7daadf4f707d/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=09ff83af3c8558594bd31bfaf4ed7daadf4f707d",
      "patch": "@@ -4872,6 +4872,15 @@ Note that this function will not find function-scoped static variables. To look\n up such variables, iterate over the variables of the function's\n @code{gdb.Block} and check that @code{block.addr_class} is\n @code{gdb.SYMBOL_LOC_STATIC}.\n+\n+There can be multiple global symbols with static linkage with the same\n+name.  This function will only return the first matching symbol that\n+it finds.  Which symbol is found depends on where @value{GDBN} is\n+currently stopped, as @value{GDBN} will first search for matching\n+symbols in the current object file, and then search all other object\n+files.  If the application is not yet running then @value{GDBN} will\n+search all object files in the order they appear in the debug\n+information.\n @end defun\n \n A @code{gdb.Symbol} object has the following attributes:"
    },
    {
      "sha": "4c88877bcbed5306f4d735b39cec579e20e742c4",
      "filename": "gdb/python/py-symbol.c",
      "status": "modified",
      "additions": 25,
      "deletions": 2,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/09ff83af3c8558594bd31bfaf4ed7daadf4f707d/gdb/python/py-symbol.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/09ff83af3c8558594bd31bfaf4ed7daadf4f707d/gdb/python/py-symbol.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-symbol.c?ref=09ff83af3c8558594bd31bfaf4ed7daadf4f707d",
      "patch": "@@ -472,7 +472,7 @@ gdbpy_lookup_global_symbol (PyObject *self, PyObject *args, PyObject *kw)\n }\n \n /* Implementation of\n-   gdb.lookup_static_symbol (name [, domain) -> symbol or None.  */\n+   gdb.lookup_static_symbol (name [, domain]) -> symbol or None.  */\n \n PyObject *\n gdbpy_lookup_static_symbol (PyObject *self, PyObject *args, PyObject *kw)\n@@ -487,9 +487,32 @@ gdbpy_lookup_static_symbol (PyObject *self, PyObject *args, PyObject *kw)\n \t\t\t\t\t&domain))\n     return NULL;\n \n+  /* In order to find static symbols associated with the \"current\" object\n+     file ahead of those from other object files, we first need to see if\n+     we can acquire a current block.  If this fails however, then we still\n+     want to search all static symbols, so don't throw an exception just\n+     yet.  */\n+  const struct block *block = NULL;\n   try\n     {\n-      symbol = lookup_static_symbol (name, (domain_enum) domain).symbol;\n+      struct frame_info *selected_frame\n+\t= get_selected_frame (_(\"No frame selected.\"));\n+      block = get_frame_block (selected_frame, NULL);\n+    }\n+  catch (const gdb_exception &except)\n+    {\n+      /* Nothing.  */\n+    }\n+\n+  try\n+    {\n+      if (block != nullptr)\n+\tsymbol\n+\t  = lookup_symbol_in_static_block (name, block,\n+\t\t\t\t\t   (domain_enum) domain).symbol;\n+\n+      if (symbol == nullptr)\n+\tsymbol = lookup_static_symbol (name, (domain_enum) domain).symbol;\n     }\n   catch (const gdb_exception &except)\n     {"
    },
    {
      "sha": "e170b7e7badb04513cf9cf84023e5bf7d2c7114a",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/09ff83af3c8558594bd31bfaf4ed7daadf4f707d/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/09ff83af3c8558594bd31bfaf4ed7daadf4f707d/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=09ff83af3c8558594bd31bfaf4ed7daadf4f707d",
      "patch": "@@ -1,3 +1,11 @@\n+2019-11-10  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.python/py-symbol.c: Declare and call function from new\n+\tpy-symbol-2.c file.\n+\t* gdb.python/py-symbol.exp: Compile both source files, and add new\n+\ttests for gdb.lookup_static_symbol.\n+\t* gdb.python/py-symbol-2.c: New file.\n+\n 2019-11-02  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.base/advance.exp: Drop superfluous 3rd argument to gdb_test."
    },
    {
      "sha": "73ac986972c3b0dcb0cb644f6c1bb82c3f989c50",
      "filename": "gdb/testsuite/gdb.python/py-symbol-2.c",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/09ff83af3c8558594bd31bfaf4ed7daadf4f707d/gdb/testsuite/gdb.python/py-symbol-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/09ff83af3c8558594bd31bfaf4ed7daadf4f707d/gdb/testsuite/gdb.python/py-symbol-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-symbol-2.c?ref=09ff83af3c8558594bd31bfaf4ed7daadf4f707d",
      "patch": "@@ -0,0 +1,24 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see  <http://www.gnu.org/licenses/>.  */\n+\n+static int rr = 99;\t\t/* line of other rr */\n+\n+void\n+function_in_other_file (void)\n+{\n+  /* Nothing.  */\n+}"
    },
    {
      "sha": "51325dcd450cc458a995a41d8fb0f3ab9beb7b8a",
      "filename": "gdb/testsuite/gdb.python/py-symbol.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/09ff83af3c8558594bd31bfaf4ed7daadf4f707d/gdb/testsuite/gdb.python/py-symbol.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/09ff83af3c8558594bd31bfaf4ed7daadf4f707d/gdb/testsuite/gdb.python/py-symbol.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-symbol.c?ref=09ff83af3c8558594bd31bfaf4ed7daadf4f707d",
      "patch": "@@ -38,6 +38,10 @@ namespace {\n };\n #endif\n \n+#ifdef USE_TWO_FILES\n+extern void function_in_other_file (void);\n+#endif\n+\n int qq = 72;\t\t\t/* line of qq */\n static int rr = 42;\t\t/* line of rr */\n \n@@ -70,5 +74,10 @@ int main (int argc, char *argv[])\n   sclass.seti (42);\n   sclass.valueofi ();\n #endif\n+\n+#ifdef USE_TWO_FILES\n+  function_in_other_file ();\n+#endif\n+\n   return 0; /* Break at end.  */\n }"
    },
    {
      "sha": "61960075565b6de37422b2e9bb9ee17bd2fc0dec",
      "filename": "gdb/testsuite/gdb.python/py-symbol.exp",
      "status": "modified",
      "additions": 23,
      "deletions": 12,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/09ff83af3c8558594bd31bfaf4ed7daadf4f707d/gdb/testsuite/gdb.python/py-symbol.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/09ff83af3c8558594bd31bfaf4ed7daadf4f707d/gdb/testsuite/gdb.python/py-symbol.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-symbol.exp?ref=09ff83af3c8558594bd31bfaf4ed7daadf4f707d",
      "patch": "@@ -18,9 +18,11 @@\n \n load_lib gdb-python.exp\n \n-standard_testfile\n+standard_testfile py-symbol.c py-symbol-2.c\n \n-if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile debug]} {\n+set opts { debug additional_flags=-DUSE_TWO_FILES }\n+if {[prepare_for_testing \"failed to prepare\" $testfile \\\n+\t [list $srcfile $srcfile2] $opts]} {\n     return -1\n }\n \n@@ -48,6 +50,7 @@ gdb_test \"python print (gdb.lookup_global_symbol('qq').needs_frame)\" \\\n     \"False\" \\\n     \"print whether qq needs a frame\"\n \n+# Similarly, test looking up a static symbol before we runto_main.\n set rr_line [gdb_get_line_number \"line of rr\"]\n gdb_test \"python print (gdb.lookup_global_symbol ('rr') is None)\" \"True\" \\\n     \"lookup_global_symbol for static var\"\n@@ -100,10 +103,23 @@ gdb_test \"python print (func.print_name)\" \"func\" \"test func.print_name\"\n gdb_test \"python print (func.linkage_name)\" \"func\" \"test func.linkage_name\"\n gdb_test \"python print (func.addr_class == gdb.SYMBOL_LOC_BLOCK)\" \"True\" \"test func.addr_class\"\n \n-gdb_breakpoint [gdb_get_line_number \"Break at end.\"]\n+# Stop in a second file and ensure we find its local static symbol.\n+gdb_breakpoint \"function_in_other_file\"\n+gdb_continue_to_breakpoint \"function_in_other_file\"\n+gdb_test \"python print (gdb.lookup_static_symbol ('rr').value ())\" \"99\" \\\n+    \"print value of rr from other file\"\n+\n+# Now continue back to the first source file.\n+set linenum [gdb_get_line_number \"Break at end.\"]\n+gdb_breakpoint \"$srcfile:$linenum\"\n gdb_continue_to_breakpoint \"Break at end for variable a\" \".*Break at end.*\"\n gdb_py_test_silent_cmd \"python frame = gdb.selected_frame()\" \"Get Frame\" 0\n \n+# Check that we find the static sybol local to this file over the\n+# static symbol from the second source file.\n+gdb_test \"python print (gdb.lookup_static_symbol ('rr').value ())\" \"42\" \\\n+    \"print value of rr from main file\"\n+\n # Test is_variable attribute.\n gdb_py_test_silent_cmd \"python a = gdb.lookup_symbol(\\'a\\')\" \"Get variable a\" 0\n gdb_test \"python print (a\\[0\\].is_variable)\" \"True\" \"test a.is_variable\"\n@@ -145,17 +161,12 @@ gdb_test \"python print (t\\[0\\].symtab)\" \"${py_symbol_c}\" \"get symtab\"\n \n # C++ tests\n # Recompile binary.\n-if { [gdb_compile \"${srcdir}/${subdir}/${srcfile}\" \"${binfile}-cxx\" executable \"debug c++\"] != \"\" } {\n-    untested \"failed to compile in C++ mode\"\n+lappend opts c++\n+if {[prepare_for_testing \"failed to prepare\" \"${binfile}-cxx\" \\\n+\t [list $srcfile $srcfile2] $opts]} {\n     return -1\n }\n \n-# Start with a fresh gdb.\n-gdb_exit\n-gdb_start\n-gdb_reinitialize_dir $srcdir/$subdir\n-gdb_load ${binfile}-cxx\n-\n gdb_test \"python print (gdb.lookup_global_symbol ('(anonymous namespace)::anon') is None)\" \\\n     \"True\" \"anon is None\"\n gdb_test \"python print (gdb.lookup_static_symbol ('(anonymous namespace)::anon').value ())\" \\\n@@ -189,7 +200,7 @@ gdb_test \"python print (cplusfunc.addr_class == gdb.SYMBOL_LOC_BLOCK)\" \"True\" \"t\n # Test is_valid when the objfile is unloaded.  This must be the last\n # test as it unloads the object file in GDB.\n # Start with a fresh gdb.\n-clean_restart ${testfile}\n+clean_restart ${binfile}\n if ![runto_main] then {\n     fail \"cannot run to main.\"\n     return 0"
    }
  ]
}