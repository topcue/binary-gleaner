{
  "sha": "841de12014d03189a7e0d8195bb77eba26648966",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODQxZGUxMjAxNGQwMzE4OWE3ZTBkODE5NWJiNzdlYmEyNjY0ODk2Ng==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-29T01:38:25Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-29T01:52:21Z"
    },
    "message": "Remove target_has_stack macro\n\nThis removes the target_has_stack object-like macro, replacing it with\nthe underlying function.\n\ngdb/ChangeLog\n2020-09-28  Tom Tromey  <tom@tromey.com>\n\n\t* windows-tdep.c (tlb_make_value): Update.\n\t* tui/tui-regs.c (tui_data_window::show_registers): Update.\n\t* thread.c (scoped_restore_current_thread::restore)\n\t(scoped_restore_current_thread::scoped_restore_current_thread)\n\t(thread_command): Update.\n\t* stack.c (backtrace_command_1, frame_apply_level_command)\n\t(frame_apply_all_command, frame_apply_command): Update.\n\t* infrun.c (siginfo_make_value, restore_infcall_control_state):\n\tUpdate.\n\t* gcore.c (derive_stack_segment): Update.\n\t* frame.c (get_current_frame, has_stack_frames): Update.\n\t* auxv.c (info_auxv_command): Update.\n\t* ada-tasks.c (ada_build_task_list): Update.\n\t* target.c (target_has_stack): Rename from target_has_stack_1.\n\t* target.h (target_has_stack): Remove macro.\n\t(target_has_stack): Rename from target_has_stack_1.",
    "tree": {
      "sha": "568242053f508126c76e2b318071692fe3915cd3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/568242053f508126c76e2b318071692fe3915cd3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/841de12014d03189a7e0d8195bb77eba26648966",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/841de12014d03189a7e0d8195bb77eba26648966",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/841de12014d03189a7e0d8195bb77eba26648966",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/841de12014d03189a7e0d8195bb77eba26648966/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a739972c7c9818241fac0da589edb29adafc78c9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a739972c7c9818241fac0da589edb29adafc78c9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a739972c7c9818241fac0da589edb29adafc78c9"
    }
  ],
  "stats": {
    "total": 56,
    "additions": 37,
    "deletions": 19
  },
  "files": [
    {
      "sha": "bc9768bb4a70b90579109845582c11643d3f98cb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/841de12014d03189a7e0d8195bb77eba26648966/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/841de12014d03189a7e0d8195bb77eba26648966/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=841de12014d03189a7e0d8195bb77eba26648966",
      "patch": "@@ -1,3 +1,22 @@\n+2020-09-28  Tom Tromey  <tom@tromey.com>\n+\n+\t* windows-tdep.c (tlb_make_value): Update.\n+\t* tui/tui-regs.c (tui_data_window::show_registers): Update.\n+\t* thread.c (scoped_restore_current_thread::restore)\n+\t(scoped_restore_current_thread::scoped_restore_current_thread)\n+\t(thread_command): Update.\n+\t* stack.c (backtrace_command_1, frame_apply_level_command)\n+\t(frame_apply_all_command, frame_apply_command): Update.\n+\t* infrun.c (siginfo_make_value, restore_infcall_control_state):\n+\tUpdate.\n+\t* gcore.c (derive_stack_segment): Update.\n+\t* frame.c (get_current_frame, has_stack_frames): Update.\n+\t* auxv.c (info_auxv_command): Update.\n+\t* ada-tasks.c (ada_build_task_list): Update.\n+\t* target.c (target_has_stack): Rename from target_has_stack_1.\n+\t* target.h (target_has_stack): Remove macro.\n+\t(target_has_stack): Rename from target_has_stack_1.\n+\n 2020-09-28  Tom Tromey  <tom@tromey.com>\n \n \t* target.c (target_has_memory): Rename from target_has_memory_1."
    },
    {
      "sha": "a434563c604375f08d378521ec149ab56b0c7d3c",
      "filename": "gdb/ada-tasks.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/841de12014d03189a7e0d8195bb77eba26648966/gdb/ada-tasks.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/841de12014d03189a7e0d8195bb77eba26648966/gdb/ada-tasks.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-tasks.c?ref=841de12014d03189a7e0d8195bb77eba26648966",
      "patch": "@@ -999,7 +999,7 @@ ada_build_task_list ()\n {\n   struct ada_tasks_inferior_data *data;\n \n-  if (!target_has_stack)\n+  if (!target_has_stack ())\n     error (_(\"Cannot inspect Ada tasks when program is not running\"));\n \n   data = get_ada_tasks_inferior_data (current_inferior ());"
    },
    {
      "sha": "87fc01db25c535dd2fa522aff2189d16c41a0ced",
      "filename": "gdb/auxv.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/841de12014d03189a7e0d8195bb77eba26648966/gdb/auxv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/841de12014d03189a7e0d8195bb77eba26648966/gdb/auxv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auxv.c?ref=841de12014d03189a7e0d8195bb77eba26648966",
      "patch": "@@ -576,7 +576,7 @@ fprint_target_auxv (struct ui_file *file, struct target_ops *ops)\n static void\n info_auxv_command (const char *cmd, int from_tty)\n {\n-  if (! target_has_stack)\n+  if (! target_has_stack ())\n     error (_(\"The program has no auxiliary information now.\"));\n   else\n     {"
    },
    {
      "sha": "cc44a04787a4038f9989a61a25886968bb674625",
      "filename": "gdb/frame.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/841de12014d03189a7e0d8195bb77eba26648966/gdb/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/841de12014d03189a7e0d8195bb77eba26648966/gdb/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.c?ref=841de12014d03189a7e0d8195bb77eba26648966",
      "patch": "@@ -1655,7 +1655,7 @@ get_current_frame (void)\n      registers\".  */\n   if (!target_has_registers)\n     error (_(\"No registers.\"));\n-  if (!target_has_stack)\n+  if (!target_has_stack ())\n     error (_(\"No stack.\"));\n   if (!target_has_memory ())\n     error (_(\"No memory.\"));\n@@ -1692,7 +1692,7 @@ static struct frame_info *selected_frame;\n bool\n has_stack_frames ()\n {\n-  if (!target_has_registers || !target_has_stack || !target_has_memory ())\n+  if (!target_has_registers || !target_has_stack () || !target_has_memory ())\n     return false;\n \n   /* Traceframes are effectively a substitute for the live inferior.  */"
    },
    {
      "sha": "f7a6bcb588fb84bed2287b058e8e95e0f47e8745",
      "filename": "gdb/gcore.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/841de12014d03189a7e0d8195bb77eba26648966/gdb/gcore.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/841de12014d03189a7e0d8195bb77eba26648966/gdb/gcore.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gcore.c?ref=841de12014d03189a7e0d8195bb77eba26648966",
      "patch": "@@ -224,7 +224,7 @@ derive_stack_segment (bfd_vma *bottom, bfd_vma *top)\n   gdb_assert (top);\n \n   /* Can't succeed without stack and registers.  */\n-  if (!target_has_stack || !target_has_registers)\n+  if (!target_has_stack () || !target_has_registers)\n     return 0;\n \n   /* Can't succeed without current frame.  */"
    },
    {
      "sha": "118538dfbc01582eaea8831fe2c931c45b67bb76",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/841de12014d03189a7e0d8195bb77eba26648966/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/841de12014d03189a7e0d8195bb77eba26648966/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=841de12014d03189a7e0d8195bb77eba26648966",
      "patch": "@@ -8843,7 +8843,7 @@ static struct value *\n siginfo_make_value (struct gdbarch *gdbarch, struct internalvar *var,\n \t\t    void *ignore)\n {\n-  if (target_has_stack\n+  if (target_has_stack ()\n       && inferior_ptid != null_ptid\n       && gdbarch_get_siginfo_type_p (gdbarch))\n     {\n@@ -9078,7 +9078,7 @@ restore_infcall_control_state (struct infcall_control_state *inf_status)\n   stop_stack_dummy = inf_status->stop_stack_dummy;\n   stopped_by_random_signal = inf_status->stopped_by_random_signal;\n \n-  if (target_has_stack)\n+  if (target_has_stack ())\n     {\n       /* The point of the try/catch is that if the stack is clobbered,\n          walking the stack might encounter a garbage pointer and"
    },
    {
      "sha": "4ba5500b31c9e0735e57611816536c9cc76e6f74",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/841de12014d03189a7e0d8195bb77eba26648966/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/841de12014d03189a7e0d8195bb77eba26648966/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=841de12014d03189a7e0d8195bb77eba26648966",
      "patch": "@@ -2001,7 +2001,7 @@ backtrace_command_1 (const frame_print_options &fp_opts,\n   int py_start = 0, py_end = 0;\n   enum ext_lang_bt_status result = EXT_LANG_BT_ERROR;\n \n-  if (!target_has_stack)\n+  if (!target_has_stack ())\n     error (_(\"No stack.\"));\n \n   if (count_exp)\n@@ -3164,7 +3164,7 @@ frame_apply_cmd_completer (struct cmd_list_element *ignore,\n static void\n frame_apply_level_command (const char *cmd, int from_tty)\n {\n-  if (!target_has_stack)\n+  if (!target_has_stack ())\n     error (_(\"No stack.\"));\n \n   bool level_found = false;\n@@ -3212,7 +3212,7 @@ frame_apply_level_command (const char *cmd, int from_tty)\n static void\n frame_apply_all_command (const char *cmd, int from_tty)\n {\n-  if (!target_has_stack)\n+  if (!target_has_stack ())\n     error (_(\"No stack.\"));\n \n   frame_apply_command_count (\"frame apply all\", cmd, from_tty,\n@@ -3227,7 +3227,7 @@ frame_apply_command (const char* cmd, int from_tty)\n   int count;\n   struct frame_info *trailing;\n \n-  if (!target_has_stack)\n+  if (!target_has_stack ())\n     error (_(\"No stack.\"));\n \n   if (cmd == NULL)"
    },
    {
      "sha": "ce8d4177fac975069842f3a7119a575a4667eb1a",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/841de12014d03189a7e0d8195bb77eba26648966/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/841de12014d03189a7e0d8195bb77eba26648966/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=841de12014d03189a7e0d8195bb77eba26648966",
      "patch": "@@ -180,7 +180,7 @@ target_has_memory ()\n }\n \n int\n-target_has_stack_1 (void)\n+target_has_stack ()\n {\n   for (target_ops *t = current_top_target (); t != NULL; t = t->beneath ())\n     if (t->has_stack ())"
    },
    {
      "sha": "0c5da0af5f58b865b0ddb23553fa4afdb7d8c07f",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/841de12014d03189a7e0d8195bb77eba26648966/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/841de12014d03189a7e0d8195bb77eba26648966/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=841de12014d03189a7e0d8195bb77eba26648966",
      "patch": "@@ -1817,8 +1817,7 @@ extern int target_has_memory ();\n /* Does the target have a stack?  (Exec files don't, VxWorks doesn't, until\n    we start a process.)  */\n \n-extern int target_has_stack_1 (void);\n-#define target_has_stack target_has_stack_1 ()\n+extern int target_has_stack ();\n \n /* Does the target have registers?  (Exec files don't.)  */\n "
    },
    {
      "sha": "defd51a80983fabd723df084eca91ba797d154f6",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/841de12014d03189a7e0d8195bb77eba26648966/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/841de12014d03189a7e0d8195bb77eba26648966/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=841de12014d03189a7e0d8195bb77eba26648966",
      "patch": "@@ -1406,7 +1406,7 @@ scoped_restore_current_thread::restore ()\n       && m_was_stopped\n       && m_thread->state == THREAD_STOPPED\n       && target_has_registers\n-      && target_has_stack\n+      && target_has_stack ()\n       && target_has_memory ())\n     restore_selected_frame (m_selected_frame_id, m_selected_frame_level);\n }\n@@ -1440,7 +1440,7 @@ scoped_restore_current_thread::scoped_restore_current_thread ()\n       m_was_stopped = m_thread->state == THREAD_STOPPED;\n       if (m_was_stopped\n \t  && target_has_registers\n-\t  && target_has_stack\n+\t  && target_has_stack ()\n \t  && target_has_memory ())\n \t{\n \t  /* When processing internal events, there might not be a\n@@ -1876,7 +1876,7 @@ thread_command (const char *tidstr, int from_tty)\n       if (inferior_ptid == null_ptid)\n \terror (_(\"No thread selected\"));\n \n-      if (target_has_stack)\n+      if (target_has_stack ())\n \t{\n \t  struct thread_info *tp = inferior_thread ();\n "
    },
    {
      "sha": "6ff0d001854aa3b1ff4d2dbf8366da09e7340ff9",
      "filename": "gdb/tui/tui-regs.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/841de12014d03189a7e0d8195bb77eba26648966/gdb/tui/tui-regs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/841de12014d03189a7e0d8195bb77eba26648966/gdb/tui/tui-regs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-regs.c?ref=841de12014d03189a7e0d8195bb77eba26648966",
      "patch": "@@ -182,7 +182,7 @@ tui_data_window::show_registers (struct reggroup *group)\n   if (group == 0)\n     group = general_reggroup;\n \n-  if (target_has_registers && target_has_stack && target_has_memory ())\n+  if (target_has_registers && target_has_stack () && target_has_memory ())\n     {\n       show_register_group (group, get_selected_frame (NULL),\n \t\t\t   group == m_current_group);"
    },
    {
      "sha": "2a5524ed1286fdc92a02780dbc546e4f8b53710b",
      "filename": "gdb/windows-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/841de12014d03189a7e0d8195bb77eba26648966/gdb/windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/841de12014d03189a7e0d8195bb77eba26648966/gdb/windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-tdep.c?ref=841de12014d03189a7e0d8195bb77eba26648966",
      "patch": "@@ -435,7 +435,7 @@ static const struct lval_funcs tlb_value_funcs =\n static struct value *\n tlb_make_value (struct gdbarch *gdbarch, struct internalvar *var, void *ignore)\n {\n-  if (target_has_stack && inferior_ptid != null_ptid)\n+  if (target_has_stack () && inferior_ptid != null_ptid)\n     {\n       struct type *type = windows_get_tlb_type (gdbarch);\n       return allocate_computed_value (type, &tlb_value_funcs, NULL);"
    }
  ]
}