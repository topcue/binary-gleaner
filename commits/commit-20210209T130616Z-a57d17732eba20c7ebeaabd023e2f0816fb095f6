{
  "sha": "a57d17732eba20c7ebeaabd023e2f0816fb095f6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTU3ZDE3NzMyZWJhMjBjN2ViZWFhYmQwMjNlMmYwODE2ZmIwOTVmNg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-02-08T10:36:17Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-02-09T13:06:16Z"
    },
    "message": "Remove arm-symbianelf\n\n\t* configure.ac: Delete arm*-*-symbianelf* entry.\n\t* configure: Regenerate.\nbfd/\n\t* config.bfd (arm*-*-symbianelf*): Move from obsolete to removed.\n\t* configure.ac: Delete symbian entries.\n\t* elf-bfd.h (enum elf_target_os): Delete is_symbian.\n\t* elf32-arm.c: Remove symbian support.  Formatting.\n\t* targets.c: Delete symbian entries.\n\t* configure: Regenerate.\nbinutils/\n\t* testsuite/lib/binutils-common.exp (supports_gnu_osabi): Remove\n\tsymbianelf.\ngas/\n\t* Makefile.am (TARG_ENV_HFILES): Remove config/te-symbian.h.\n\t* config/tc-arm.c (elf32_arm_target_format): Remove TE_SYMBIAN\n\tsupport.\n\t* config/te-symbian.h: Delete.\n\t* configure.tgt: Remove arm-*-symbianelf*.\n\t* testsuite/gas/arm/arch4t-eabi.d: Don't mention symbianelf in\n\ttarget selection.\n\t* testsuite/gas/arm/arch4t.d: Likewise.\n\t* testsuite/gas/arm/got_prel.d: Likewise.\n\t* testsuite/gas/arm/mapdir.d: Likewise.\n\t* testsuite/gas/arm/mapmisc.d: Likewise.\n\t* testsuite/gas/arm/mapsecs.d: Likewise.\n\t* testsuite/gas/arm/mapshort-eabi.d: Likewise.\n\t* testsuite/gas/arm/thumb-eabi.d: Likewise.\n\t* testsuite/gas/arm/thumb.d: Likewise.\n\t* testsuite/gas/arm/thumbrel.d: Likewise.\n\t* Makefile.in: Regenerate.\n\t* po/POTFILES.in: Regenerate.\nld/\n\t* Makefile.am (ALL_EMULATION_SOURCES): Remove earmsymbian.c.\n\tDon't include symbian dep file.\n\t* configure.tgt: Remove arm*-*-symbianelf* entry.\n\t* emulparams/armsymbian.sh: Delete.\n\t* ld.texi: Don't mention symbian.\n\t* scripttempl/armbpabi.sc: Delete.\n\t* testsuite/ld-arm/symbian-seg1.d: Delete.\n\t* testsuite/ld-arm/symbian-seg1.s: Delete.\n\t* testsuite/ld-arm/arm-elf.exp: Don't run symbian-seg1.\n\t* Makefile.in: Regenerate.\n\t* po/BLD-POTFILES.in: Regenerate.",
    "tree": {
      "sha": "c53674c36b18d0e451321cdc1e0962507e4f0c08",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c53674c36b18d0e451321cdc1e0962507e4f0c08"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a57d17732eba20c7ebeaabd023e2f0816fb095f6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a57d17732eba20c7ebeaabd023e2f0816fb095f6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a57d17732eba20c7ebeaabd023e2f0816fb095f6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a57d17732eba20c7ebeaabd023e2f0816fb095f6/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4a68fcd7f7da92d47f0f41df15fea30f790ed06c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a68fcd7f7da92d47f0f41df15fea30f790ed06c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4a68fcd7f7da92d47f0f41df15fea30f790ed06c"
    }
  ],
  "stats": {
    "total": 1698,
    "additions": 456,
    "deletions": 1242
  },
  "files": [
    {
      "sha": "e9a5611c5e71bb498816c36f5630c52a2abd0d08",
      "filename": "ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ChangeLog?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -1,3 +1,8 @@\n+2021-02-09  Alan Modra  <amodra@gmail.com>\n+\n+\t* configure.ac: Delete arm*-*-symbianelf* entry.\n+\t* configure: Regenerate.\n+\n 2021-01-26  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* Makefile.def: Add install-libctf dependency to install-ld."
    },
    {
      "sha": "08e6790870b1657e52e664293863a9140266d2c7",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -1,3 +1,12 @@\n+2021-02-09  Alan Modra  <amodra@gmail.com>\n+\n+\t* config.bfd (arm*-*-symbianelf*): Move from obsolete to removed.\n+\t* configure.ac: Delete symbian entries.\n+\t* elf-bfd.h (enum elf_target_os): Delete is_symbian.\n+\t* elf32-arm.c: Remove symbian support.  Formatting.\n+\t* targets.c: Delete symbian entries.\n+\t* configure: Regenerate.\n+\n 2021-02-04  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR ld/19609"
    },
    {
      "sha": "7783dca311a92ca00442d9c6da269b01251ea7b8",
      "filename": "bfd/config.bfd",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/bfd/config.bfd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/bfd/config.bfd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/config.bfd?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -53,7 +53,6 @@ case $targ in\n     echo \"*** Use or1k-*-elf or or1k-*-linux as the target instead\" >&2\n     exit 1\n     ;;\n- arm*-*-symbianelf* | \\\n  ia64*-*-* | \\\n  null)\n     if test \"x$enable_obsolete\" != xyes; then\n@@ -85,6 +84,7 @@ case $targ in\n  arm-*-openbsd* | \\\n  arm-*-oabi | \\\n  arm-*-riscix* | \\\n+ arm*-*-symbianelf* | \\\n  arm-epoc-pe* | \\\n  c30-*-*aout* | tic30-*-*aout* | \\\n  cr16c-*-* | \\\n@@ -394,10 +394,6 @@ case \"${targ}\" in\n     targ_defvec=arm_elf32_vxworks_le_vec\n     targ_selvecs=arm_elf32_vxworks_be_vec\n     ;;\n-  arm*-*-symbianelf*)\n-    targ_defvec=arm_elf32_symbian_le_vec\n-    targ_selvecs=arm_elf32_symbian_be_vec\n-    ;;\n   arm9e-*-elf)\n     targ_defvec=arm_elf32_le_vec\n     targ_selvecs=arm_elf32_be_vec"
    },
    {
      "sha": "5a7e88eccef1600fc5292b3aef0caa8ea3c2325a",
      "filename": "bfd/configure",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/bfd/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/bfd/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -14781,8 +14781,6 @@ do\n     arm_elf32_fdpic_le_vec)\t tb=\"$tb elf32-arm.lo elf32.lo elf-nacl.lo elf-vxworks.lo $elf\" ;;\n     arm_elf32_nacl_be_vec)\t tb=\"$tb elf32-arm.lo elf32.lo elf-nacl.lo elf-vxworks.lo $elf\" ;;\n     arm_elf32_nacl_le_vec)\t tb=\"$tb elf32-arm.lo elf32.lo elf-nacl.lo elf-vxworks.lo $elf\" ;;\n-    arm_elf32_symbian_be_vec)\t tb=\"$tb elf32-arm.lo elf32.lo elf-nacl.lo elf-vxworks.lo $elf\" ;;\n-    arm_elf32_symbian_le_vec)\t tb=\"$tb elf32-arm.lo elf32.lo elf-nacl.lo elf-vxworks.lo $elf\" ;;\n     arm_elf32_vxworks_be_vec)\t tb=\"$tb elf32-arm.lo elf32.lo elf-nacl.lo elf-vxworks.lo $elf\" ;;\n     arm_elf32_vxworks_le_vec)\t tb=\"$tb elf32-arm.lo elf32.lo elf-nacl.lo elf-vxworks.lo $elf\" ;;\n     arm_pe_be_vec)\t\t tb=\"$tb pe-arm.lo peigen.lo $coff\" ;;"
    },
    {
      "sha": "fae4ea217546c53af3c8f61e75f4bdd4db86dfab",
      "filename": "bfd/configure.ac",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/bfd/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/bfd/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure.ac?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -466,8 +466,6 @@ do\n     arm_elf32_fdpic_le_vec)\t tb=\"$tb elf32-arm.lo elf32.lo elf-nacl.lo elf-vxworks.lo $elf\" ;;\n     arm_elf32_nacl_be_vec)\t tb=\"$tb elf32-arm.lo elf32.lo elf-nacl.lo elf-vxworks.lo $elf\" ;;\n     arm_elf32_nacl_le_vec)\t tb=\"$tb elf32-arm.lo elf32.lo elf-nacl.lo elf-vxworks.lo $elf\" ;;\n-    arm_elf32_symbian_be_vec)\t tb=\"$tb elf32-arm.lo elf32.lo elf-nacl.lo elf-vxworks.lo $elf\" ;;\n-    arm_elf32_symbian_le_vec)\t tb=\"$tb elf32-arm.lo elf32.lo elf-nacl.lo elf-vxworks.lo $elf\" ;;\n     arm_elf32_vxworks_be_vec)\t tb=\"$tb elf32-arm.lo elf32.lo elf-nacl.lo elf-vxworks.lo $elf\" ;;\n     arm_elf32_vxworks_le_vec)\t tb=\"$tb elf32-arm.lo elf32.lo elf-nacl.lo elf-vxworks.lo $elf\" ;;\n     arm_pe_be_vec)\t\t tb=\"$tb pe-arm.lo peigen.lo $coff\" ;;"
    },
    {
      "sha": "4b79ee8eb62a5f4ad4a4bc3f671160f44a29f673",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -543,7 +543,6 @@ struct bfd_link_needed_list\n enum elf_target_os\n {\n   is_normal,\n-  is_symbian,\t/* Symbian OS.  */\n   is_solaris,\t/* Solaris.  */\n   is_vxworks,\t/* VxWorks.  */\n   is_nacl\t/* Native Client.  */"
    },
    {
      "sha": "d3b412c710af71fd7b77fd9cc5665b5a681e085b",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 389,
      "deletions": 702,
      "changes": 1091,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -2497,14 +2497,6 @@ static const bfd_vma elf32_arm_plt_thumb_stub [] =\n   0xe7fd\t\t/* b .-2 */\n };\n \n-/* The entries in a PLT when using a DLL-based target with multiple\n-   address spaces.  */\n-static const bfd_vma elf32_arm_symbian_plt_entry [] =\n-{\n-  0xe51ff004,\t      /* ldr   pc, [pc, #-4] */\n-  0x00000000,\t      /* dcd   R_ARM_GLOB_DAT(X) */\n-};\n-\n /* The first entry in a procedure linkage table looks like\n    this.  It is set up so that any shared library function that is\n    called before the relocation has been set up calls the dynamic\n@@ -3794,10 +3786,6 @@ create_got_section (bfd *dynobj, struct bfd_link_info *info)\n   if (htab == NULL)\n     return FALSE;\n \n-  /* BPABI objects never have a GOT, or associated sections.  */\n-  if (htab->root.target_os == is_symbian)\n-    return TRUE;\n-\n   if (! _bfd_elf_create_got_section (dynobj, info))\n     return FALSE;\n \n@@ -9558,20 +9546,17 @@ elf32_arm_allocate_plt_entry (struct bfd_link_info *info,\n   root_plt->offset = splt->size;\n   splt->size += htab->plt_entry_size;\n \n-  if (htab->root.target_os != is_symbian)\n-    {\n-      /* We also need to make an entry in the .got.plt section, which\n-\t will be placed in the .got section by the linker script.  */\n-      if (is_iplt_entry)\n-\tarm_plt->got_offset = sgotplt->size;\n-      else\n-\tarm_plt->got_offset = sgotplt->size - 8 * htab->num_tls_desc;\n-      if (htab->fdpic_p)\n-\t/* Function descriptor takes 64 bits in GOT.  */\n-\tsgotplt->size += 8;\n-      else\n-\tsgotplt->size += 4;\n-    }\n+  /* We also need to make an entry in the .got.plt section, which\n+     will be placed in the .got section by the linker script.  */\n+  if (is_iplt_entry)\n+    arm_plt->got_offset = sgotplt->size;\n+  else\n+    arm_plt->got_offset = sgotplt->size - 8 * htab->num_tls_desc;\n+  if (htab->fdpic_p)\n+    /* Function descriptor takes 64 bits in GOT.  */\n+    sgotplt->size += 8;\n+  else\n+    sgotplt->size += 4;\n }\n \n static bfd_vma\n@@ -9610,7 +9595,6 @@ elf32_arm_populate_plt_entry (bfd *output_bfd, struct bfd_link_info *info,\n   bfd_byte *loc;\n   bfd_vma plt_index;\n   Elf_Internal_Rela rel;\n-  bfd_vma plt_header_size;\n   bfd_vma got_header_size;\n \n   htab = elf32_arm_hash_table (info);\n@@ -9625,7 +9609,6 @@ elf32_arm_populate_plt_entry (bfd *output_bfd, struct bfd_link_info *info,\n       /* There are no reserved entries in .igot.plt, and no special\n \t first entry in .iplt.  */\n       got_header_size = 0;\n-      plt_header_size = 0;\n     }\n   else\n     {\n@@ -9634,348 +9617,320 @@ elf32_arm_populate_plt_entry (bfd *output_bfd, struct bfd_link_info *info,\n       srel = htab->root.srelplt;\n \n       got_header_size = get_elf_backend_data (output_bfd)->got_header_size;\n-      plt_header_size = htab->plt_header_size;\n     }\n   BFD_ASSERT (splt != NULL && srel != NULL);\n \n-  /* Fill in the entry in the procedure linkage table.  */\n-  if (htab->root.target_os == is_symbian)\n+  bfd_vma got_offset, got_address, plt_address;\n+  bfd_vma got_displacement, initial_got_entry;\n+  bfd_byte * ptr;\n+\n+  BFD_ASSERT (sgot != NULL);\n+\n+  /* Get the offset into the .(i)got.plt table of the entry that\n+     corresponds to this function.  */\n+  got_offset = (arm_plt->got_offset & -2);\n+\n+  /* Get the index in the procedure linkage table which\n+     corresponds to this symbol.  This is the index of this symbol\n+     in all the symbols for which we are making plt entries.\n+     After the reserved .got.plt entries, all symbols appear in\n+     the same order as in .plt.  */\n+  if (htab->fdpic_p)\n+    /* Function descriptor takes 8 bytes.  */\n+    plt_index = (got_offset - got_header_size) / 8;\n+  else\n+    plt_index = (got_offset - got_header_size) / 4;\n+\n+  /* Calculate the address of the GOT entry.  */\n+  got_address = (sgot->output_section->vma\n+\t\t + sgot->output_offset\n+\t\t + got_offset);\n+\n+  /* ...and the address of the PLT entry.  */\n+  plt_address = (splt->output_section->vma\n+\t\t + splt->output_offset\n+\t\t + root_plt->offset);\n+\n+  ptr = splt->contents + root_plt->offset;\n+  if (htab->root.target_os == is_vxworks && bfd_link_pic (info))\n     {\n-      BFD_ASSERT (dynindx >= 0);\n-      put_arm_insn (htab, output_bfd,\n-\t\t    elf32_arm_symbian_plt_entry[0],\n-\t\t    splt->contents + root_plt->offset);\n-      bfd_put_32 (output_bfd,\n-\t\t  elf32_arm_symbian_plt_entry[1],\n-\t\t  splt->contents + root_plt->offset + 4);\n-\n-      /* Fill in the entry in the .rel.plt section.  */\n-      rel.r_offset = (splt->output_section->vma\n-\t\t      + splt->output_offset\n-\t\t      + root_plt->offset + 4);\n-      rel.r_info = ELF32_R_INFO (dynindx, R_ARM_GLOB_DAT);\n-\n-      /* Get the index in the procedure linkage table which\n-\t corresponds to this symbol.  This is the index of this symbol\n-\t in all the symbols for which we are making plt entries.  The\n-\t first entry in the procedure linkage table is reserved.  */\n-      plt_index = ((root_plt->offset - plt_header_size)\n-\t\t   / htab->plt_entry_size);\n+      unsigned int i;\n+      bfd_vma val;\n+\n+      for (i = 0; i != htab->plt_entry_size / 4; i++, ptr += 4)\n+\t{\n+\t  val = elf32_arm_vxworks_shared_plt_entry[i];\n+\t  if (i == 2)\n+\t    val |= got_address - sgot->output_section->vma;\n+\t  if (i == 5)\n+\t    val |= plt_index * RELOC_SIZE (htab);\n+\t  if (i == 2 || i == 5)\n+\t    bfd_put_32 (output_bfd, val, ptr);\n+\t  else\n+\t    put_arm_insn (htab, output_bfd, val, ptr);\n+\t}\n     }\n-  else\n+  else if (htab->root.target_os == is_vxworks)\n     {\n-      bfd_vma got_offset, got_address, plt_address;\n-      bfd_vma got_displacement, initial_got_entry;\n-      bfd_byte * ptr;\n+      unsigned int i;\n+      bfd_vma val;\n \n-      BFD_ASSERT (sgot != NULL);\n+      for (i = 0; i != htab->plt_entry_size / 4; i++, ptr += 4)\n+\t{\n+\t  val = elf32_arm_vxworks_exec_plt_entry[i];\n+\t  if (i == 2)\n+\t    val |= got_address;\n+\t  if (i == 4)\n+\t    val |= 0xffffff & -((root_plt->offset + i * 4 + 8) >> 2);\n+\t  if (i == 5)\n+\t    val |= plt_index * RELOC_SIZE (htab);\n+\t  if (i == 2 || i == 5)\n+\t    bfd_put_32 (output_bfd, val, ptr);\n+\t  else\n+\t    put_arm_insn (htab, output_bfd, val, ptr);\n+\t}\n \n-      /* Get the offset into the .(i)got.plt table of the entry that\n-\t corresponds to this function.  */\n-      got_offset = (arm_plt->got_offset & -2);\n+      loc = (htab->srelplt2->contents\n+\t     + (plt_index * 2 + 1) * RELOC_SIZE (htab));\n \n-      /* Get the index in the procedure linkage table which\n-\t corresponds to this symbol.  This is the index of this symbol\n-\t in all the symbols for which we are making plt entries.\n-\t After the reserved .got.plt entries, all symbols appear in\n-\t the same order as in .plt.  */\n-      if (htab->fdpic_p)\n-\t/* Function descriptor takes 8 bytes.  */\n-\tplt_index = (got_offset - got_header_size) / 8;\n-      else\n-\tplt_index = (got_offset - got_header_size) / 4;\n+      /* Create the .rela.plt.unloaded R_ARM_ABS32 relocation\n+\t referencing the GOT for this PLT entry.  */\n+      rel.r_offset = plt_address + 8;\n+      rel.r_info = ELF32_R_INFO (htab->root.hgot->indx, R_ARM_ABS32);\n+      rel.r_addend = got_offset;\n+      SWAP_RELOC_OUT (htab) (output_bfd, &rel, loc);\n+      loc += RELOC_SIZE (htab);\n \n-      /* Calculate the address of the GOT entry.  */\n-      got_address = (sgot->output_section->vma\n-\t\t     + sgot->output_offset\n-\t\t     + got_offset);\n+      /* Create the R_ARM_ABS32 relocation referencing the\n+\t beginning of the PLT for this GOT entry.  */\n+      rel.r_offset = got_address;\n+      rel.r_info = ELF32_R_INFO (htab->root.hplt->indx, R_ARM_ABS32);\n+      rel.r_addend = 0;\n+      SWAP_RELOC_OUT (htab) (output_bfd, &rel, loc);\n+    }\n+  else if (htab->root.target_os == is_nacl)\n+    {\n+      /* Calculate the displacement between the PLT slot and the\n+\t common tail that's part of the special initial PLT slot.  */\n+      int32_t tail_displacement\n+\t= ((splt->output_section->vma + splt->output_offset\n+\t    + ARM_NACL_PLT_TAIL_OFFSET)\n+\t   - (plt_address + htab->plt_entry_size + 4));\n+      BFD_ASSERT ((tail_displacement & 3) == 0);\n+      tail_displacement >>= 2;\n \n-      /* ...and the address of the PLT entry.  */\n-      plt_address = (splt->output_section->vma\n-\t\t     + splt->output_offset\n-\t\t     + root_plt->offset);\n+      BFD_ASSERT ((tail_displacement & 0xff000000) == 0\n+\t\t  || (-tail_displacement & 0xff000000) == 0);\n \n-      ptr = splt->contents + root_plt->offset;\n-      if (htab->root.target_os == is_vxworks && bfd_link_pic (info))\n-\t{\n-\t  unsigned int i;\n-\t  bfd_vma val;\n+      /* Calculate the displacement between the PLT slot and the entry\n+\t in the GOT.  The offset accounts for the value produced by\n+\t adding to pc in the penultimate instruction of the PLT stub.  */\n+      got_displacement = (got_address\n+\t\t\t  - (plt_address + htab->plt_entry_size));\n \n-\t  for (i = 0; i != htab->plt_entry_size / 4; i++, ptr += 4)\n-\t    {\n-\t      val = elf32_arm_vxworks_shared_plt_entry[i];\n-\t      if (i == 2)\n-\t\tval |= got_address - sgot->output_section->vma;\n-\t      if (i == 5)\n-\t\tval |= plt_index * RELOC_SIZE (htab);\n-\t      if (i == 2 || i == 5)\n-\t\tbfd_put_32 (output_bfd, val, ptr);\n-\t      else\n-\t\tput_arm_insn (htab, output_bfd, val, ptr);\n-\t    }\n+      /* NaCl does not support interworking at all.  */\n+      BFD_ASSERT (!elf32_arm_plt_needs_thumb_stub_p (info, arm_plt));\n+\n+      put_arm_insn (htab, output_bfd,\n+\t\t    elf32_arm_nacl_plt_entry[0]\n+\t\t    | arm_movw_immediate (got_displacement),\n+\t\t    ptr + 0);\n+      put_arm_insn (htab, output_bfd,\n+\t\t    elf32_arm_nacl_plt_entry[1]\n+\t\t    | arm_movt_immediate (got_displacement),\n+\t\t    ptr + 4);\n+      put_arm_insn (htab, output_bfd,\n+\t\t    elf32_arm_nacl_plt_entry[2],\n+\t\t    ptr + 8);\n+      put_arm_insn (htab, output_bfd,\n+\t\t    elf32_arm_nacl_plt_entry[3]\n+\t\t    | (tail_displacement & 0x00ffffff),\n+\t\t    ptr + 12);\n+    }\n+  else if (htab->fdpic_p)\n+    {\n+      const bfd_vma *plt_entry = using_thumb_only(htab)\n+\t? elf32_arm_fdpic_thumb_plt_entry\n+\t: elf32_arm_fdpic_plt_entry;\n+\n+      /* Fill-up Thumb stub if needed.  */\n+      if (elf32_arm_plt_needs_thumb_stub_p (info, arm_plt))\n+\t{\n+\t  put_thumb_insn (htab, output_bfd,\n+\t\t\t  elf32_arm_plt_thumb_stub[0], ptr - 4);\n+\t  put_thumb_insn (htab, output_bfd,\n+\t\t\t  elf32_arm_plt_thumb_stub[1], ptr - 2);\n \t}\n-      else if (htab->root.target_os == is_vxworks)\n+      /* As we are using 32 bit instructions even for the Thumb\n+\t version, we have to use 'put_arm_insn' instead of\n+\t 'put_thumb_insn'.  */\n+      put_arm_insn(htab, output_bfd, plt_entry[0], ptr + 0);\n+      put_arm_insn(htab, output_bfd, plt_entry[1], ptr + 4);\n+      put_arm_insn(htab, output_bfd, plt_entry[2], ptr + 8);\n+      put_arm_insn(htab, output_bfd, plt_entry[3], ptr + 12);\n+      bfd_put_32 (output_bfd, got_offset, ptr + 16);\n+\n+      if (!(info->flags & DF_BIND_NOW))\n \t{\n-\t  unsigned int i;\n-\t  bfd_vma val;\n-\n-\t  for (i = 0; i != htab->plt_entry_size / 4; i++, ptr += 4)\n-\t    {\n-\t      val = elf32_arm_vxworks_exec_plt_entry[i];\n-\t      if (i == 2)\n-\t\tval |= got_address;\n-\t      if (i == 4)\n-\t\tval |= 0xffffff & -((root_plt->offset + i * 4 + 8) >> 2);\n-\t      if (i == 5)\n-\t\tval |= plt_index * RELOC_SIZE (htab);\n-\t      if (i == 2 || i == 5)\n-\t\tbfd_put_32 (output_bfd, val, ptr);\n-\t      else\n-\t\tput_arm_insn (htab, output_bfd, val, ptr);\n-\t    }\n+\t  /* funcdesc_value_reloc_offset.  */\n+\t  bfd_put_32 (output_bfd,\n+\t\t      htab->root.srelplt->reloc_count * RELOC_SIZE (htab),\n+\t\t      ptr + 20);\n+\t  put_arm_insn(htab, output_bfd, plt_entry[6], ptr + 24);\n+\t  put_arm_insn(htab, output_bfd, plt_entry[7], ptr + 28);\n+\t  put_arm_insn(htab, output_bfd, plt_entry[8], ptr + 32);\n+\t  put_arm_insn(htab, output_bfd, plt_entry[9], ptr + 36);\n+\t}\n+    }\n+  else if (using_thumb_only (htab))\n+    {\n+      /* PR ld/16017: Generate thumb only PLT entries.  */\n+      if (!using_thumb2 (htab))\n+\t{\n+\t  /* FIXME: We ought to be able to generate thumb-1 PLT\n+\t     instructions...  */\n+\t  _bfd_error_handler (_(\"%pB: warning: thumb-1 mode PLT generation not currently supported\"),\n+\t\t\t      output_bfd);\n+\t  return FALSE;\n+\t}\n \n-\t  loc = (htab->srelplt2->contents\n-\t\t + (plt_index * 2 + 1) * RELOC_SIZE (htab));\n+      /* Calculate the displacement between the PLT slot and the entry in\n+\t the GOT.  The 12-byte offset accounts for the value produced by\n+\t adding to pc in the 3rd instruction of the PLT stub.  */\n+      got_displacement = got_address - (plt_address + 12);\n \n-\t  /* Create the .rela.plt.unloaded R_ARM_ABS32 relocation\n-\t     referencing the GOT for this PLT entry.  */\n-\t  rel.r_offset = plt_address + 8;\n-\t  rel.r_info = ELF32_R_INFO (htab->root.hgot->indx, R_ARM_ABS32);\n-\t  rel.r_addend = got_offset;\n-\t  SWAP_RELOC_OUT (htab) (output_bfd, &rel, loc);\n-\t  loc += RELOC_SIZE (htab);\n+      /* As we are using 32 bit instructions we have to use 'put_arm_insn'\n+\t instead of 'put_thumb_insn'.  */\n+      put_arm_insn (htab, output_bfd,\n+\t\t    elf32_thumb2_plt_entry[0]\n+\t\t    | ((got_displacement & 0x000000ff) << 16)\n+\t\t    | ((got_displacement & 0x00000700) << 20)\n+\t\t    | ((got_displacement & 0x00000800) >>  1)\n+\t\t    | ((got_displacement & 0x0000f000) >> 12),\n+\t\t    ptr + 0);\n+      put_arm_insn (htab, output_bfd,\n+\t\t    elf32_thumb2_plt_entry[1]\n+\t\t    | ((got_displacement & 0x00ff0000)      )\n+\t\t    | ((got_displacement & 0x07000000) <<  4)\n+\t\t    | ((got_displacement & 0x08000000) >> 17)\n+\t\t    | ((got_displacement & 0xf0000000) >> 28),\n+\t\t    ptr + 4);\n+      put_arm_insn (htab, output_bfd,\n+\t\t    elf32_thumb2_plt_entry[2],\n+\t\t    ptr + 8);\n+      put_arm_insn (htab, output_bfd,\n+\t\t    elf32_thumb2_plt_entry[3],\n+\t\t    ptr + 12);\n+    }\n+  else\n+    {\n+      /* Calculate the displacement between the PLT slot and the\n+\t entry in the GOT.  The eight-byte offset accounts for the\n+\t value produced by adding to pc in the first instruction\n+\t of the PLT stub.  */\n+      got_displacement = got_address - (plt_address + 8);\n \n-\t  /* Create the R_ARM_ABS32 relocation referencing the\n-\t     beginning of the PLT for this GOT entry.  */\n-\t  rel.r_offset = got_address;\n-\t  rel.r_info = ELF32_R_INFO (htab->root.hplt->indx, R_ARM_ABS32);\n-\t  rel.r_addend = 0;\n-\t  SWAP_RELOC_OUT (htab) (output_bfd, &rel, loc);\n+      if (elf32_arm_plt_needs_thumb_stub_p (info, arm_plt))\n+\t{\n+\t  put_thumb_insn (htab, output_bfd,\n+\t\t\t  elf32_arm_plt_thumb_stub[0], ptr - 4);\n+\t  put_thumb_insn (htab, output_bfd,\n+\t\t\t  elf32_arm_plt_thumb_stub[1], ptr - 2);\n \t}\n-      else if (htab->root.target_os == is_nacl)\n+\n+      if (!elf32_arm_use_long_plt_entry)\n \t{\n-\t  /* Calculate the displacement between the PLT slot and the\n-\t     common tail that's part of the special initial PLT slot.  */\n-\t  int32_t tail_displacement\n-\t    = ((splt->output_section->vma + splt->output_offset\n-\t\t+ ARM_NACL_PLT_TAIL_OFFSET)\n-\t       - (plt_address + htab->plt_entry_size + 4));\n-\t  BFD_ASSERT ((tail_displacement & 3) == 0);\n-\t  tail_displacement >>= 2;\n-\n-\t  BFD_ASSERT ((tail_displacement & 0xff000000) == 0\n-\t\t      || (-tail_displacement & 0xff000000) == 0);\n-\n-\t  /* Calculate the displacement between the PLT slot and the entry\n-\t     in the GOT.  The offset accounts for the value produced by\n-\t     adding to pc in the penultimate instruction of the PLT stub.  */\n-\t  got_displacement = (got_address\n-\t\t\t      - (plt_address + htab->plt_entry_size));\n-\n-\t  /* NaCl does not support interworking at all.  */\n-\t  BFD_ASSERT (!elf32_arm_plt_needs_thumb_stub_p (info, arm_plt));\n+\t  BFD_ASSERT ((got_displacement & 0xf0000000) == 0);\n \n \t  put_arm_insn (htab, output_bfd,\n-\t\t\telf32_arm_nacl_plt_entry[0]\n-\t\t\t| arm_movw_immediate (got_displacement),\n+\t\t\telf32_arm_plt_entry_short[0]\n+\t\t\t| ((got_displacement & 0x0ff00000) >> 20),\n \t\t\tptr + 0);\n \t  put_arm_insn (htab, output_bfd,\n-\t\t\telf32_arm_nacl_plt_entry[1]\n-\t\t\t| arm_movt_immediate (got_displacement),\n-\t\t\tptr + 4);\n+\t\t\telf32_arm_plt_entry_short[1]\n+\t\t\t| ((got_displacement & 0x000ff000) >> 12),\n+\t\t\tptr+ 4);\n \t  put_arm_insn (htab, output_bfd,\n-\t\t\telf32_arm_nacl_plt_entry[2],\n+\t\t\telf32_arm_plt_entry_short[2]\n+\t\t\t| (got_displacement & 0x00000fff),\n \t\t\tptr + 8);\n-\t  put_arm_insn (htab, output_bfd,\n-\t\t\telf32_arm_nacl_plt_entry[3]\n-\t\t\t| (tail_displacement & 0x00ffffff),\n-\t\t\tptr + 12);\n-\t}\n-      else if (htab->fdpic_p)\n-\t{\n-\t  const bfd_vma *plt_entry = using_thumb_only(htab)\n-\t    ? elf32_arm_fdpic_thumb_plt_entry\n-\t    : elf32_arm_fdpic_plt_entry;\n-\n-\t  /* Fill-up Thumb stub if needed.  */\n-\t  if (elf32_arm_plt_needs_thumb_stub_p (info, arm_plt))\n-\t    {\n-\t      put_thumb_insn (htab, output_bfd,\n-\t\t\t      elf32_arm_plt_thumb_stub[0], ptr - 4);\n-\t      put_thumb_insn (htab, output_bfd,\n-\t\t\t      elf32_arm_plt_thumb_stub[1], ptr - 2);\n-\t    }\n-\t  /* As we are using 32 bit instructions even for the Thumb\n-\t     version, we have to use 'put_arm_insn' instead of\n-\t     'put_thumb_insn'.  */\n-\t  put_arm_insn(htab, output_bfd, plt_entry[0], ptr + 0);\n-\t  put_arm_insn(htab, output_bfd, plt_entry[1], ptr + 4);\n-\t  put_arm_insn(htab, output_bfd, plt_entry[2], ptr + 8);\n-\t  put_arm_insn(htab, output_bfd, plt_entry[3], ptr + 12);\n-\t  bfd_put_32 (output_bfd, got_offset, ptr + 16);\n-\n-\t  if (!(info->flags & DF_BIND_NOW))\n-\t    {\n-\t      /* funcdesc_value_reloc_offset.  */\n-\t      bfd_put_32 (output_bfd,\n-\t\t\t  htab->root.srelplt->reloc_count * RELOC_SIZE (htab),\n-\t\t\t  ptr + 20);\n-\t      put_arm_insn(htab, output_bfd, plt_entry[6], ptr + 24);\n-\t      put_arm_insn(htab, output_bfd, plt_entry[7], ptr + 28);\n-\t      put_arm_insn(htab, output_bfd, plt_entry[8], ptr + 32);\n-\t      put_arm_insn(htab, output_bfd, plt_entry[9], ptr + 36);\n-\t    }\n+#ifdef FOUR_WORD_PLT\n+\t  bfd_put_32 (output_bfd, elf32_arm_plt_entry_short[3], ptr + 12);\n+#endif\n \t}\n-      else if (using_thumb_only (htab))\n+      else\n \t{\n-\t  /* PR ld/16017: Generate thumb only PLT entries.  */\n-\t  if (!using_thumb2 (htab))\n-\t    {\n-\t      /* FIXME: We ought to be able to generate thumb-1 PLT\n-\t\t instructions...  */\n-\t      _bfd_error_handler (_(\"%pB: warning: thumb-1 mode PLT generation not currently supported\"),\n-\t\t\t\t  output_bfd);\n-\t      return FALSE;\n-\t    }\n-\n-\t  /* Calculate the displacement between the PLT slot and the entry in\n-\t     the GOT.  The 12-byte offset accounts for the value produced by\n-\t     adding to pc in the 3rd instruction of the PLT stub.  */\n-\t  got_displacement = got_address - (plt_address + 12);\n-\n-\t  /* As we are using 32 bit instructions we have to use 'put_arm_insn'\n-\t     instead of 'put_thumb_insn'.  */\n \t  put_arm_insn (htab, output_bfd,\n-\t\t\telf32_thumb2_plt_entry[0]\n-\t\t\t| ((got_displacement & 0x000000ff) << 16)\n-\t\t\t| ((got_displacement & 0x00000700) << 20)\n-\t\t\t| ((got_displacement & 0x00000800) >>  1)\n-\t\t\t| ((got_displacement & 0x0000f000) >> 12),\n+\t\t\telf32_arm_plt_entry_long[0]\n+\t\t\t| ((got_displacement & 0xf0000000) >> 28),\n \t\t\tptr + 0);\n \t  put_arm_insn (htab, output_bfd,\n-\t\t\telf32_thumb2_plt_entry[1]\n-\t\t\t| ((got_displacement & 0x00ff0000)      )\n-\t\t\t| ((got_displacement & 0x07000000) <<  4)\n-\t\t\t| ((got_displacement & 0x08000000) >> 17)\n-\t\t\t| ((got_displacement & 0xf0000000) >> 28),\n+\t\t\telf32_arm_plt_entry_long[1]\n+\t\t\t| ((got_displacement & 0x0ff00000) >> 20),\n \t\t\tptr + 4);\n \t  put_arm_insn (htab, output_bfd,\n-\t\t\telf32_thumb2_plt_entry[2],\n-\t\t\tptr + 8);\n+\t\t\telf32_arm_plt_entry_long[2]\n+\t\t\t| ((got_displacement & 0x000ff000) >> 12),\n+\t\t\tptr+ 8);\n \t  put_arm_insn (htab, output_bfd,\n-\t\t\telf32_thumb2_plt_entry[3],\n+\t\t\telf32_arm_plt_entry_long[3]\n+\t\t\t| (got_displacement & 0x00000fff),\n \t\t\tptr + 12);\n \t}\n-      else\n-\t{\n-\t  /* Calculate the displacement between the PLT slot and the\n-\t     entry in the GOT.  The eight-byte offset accounts for the\n-\t     value produced by adding to pc in the first instruction\n-\t     of the PLT stub.  */\n-\t  got_displacement = got_address - (plt_address + 8);\n-\n-\t  if (elf32_arm_plt_needs_thumb_stub_p (info, arm_plt))\n-\t    {\n-\t      put_thumb_insn (htab, output_bfd,\n-\t\t\t      elf32_arm_plt_thumb_stub[0], ptr - 4);\n-\t      put_thumb_insn (htab, output_bfd,\n-\t\t\t      elf32_arm_plt_thumb_stub[1], ptr - 2);\n-\t    }\n-\n-\t  if (!elf32_arm_use_long_plt_entry)\n-\t    {\n-\t      BFD_ASSERT ((got_displacement & 0xf0000000) == 0);\n-\n-\t      put_arm_insn (htab, output_bfd,\n-\t\t\t    elf32_arm_plt_entry_short[0]\n-\t\t\t    | ((got_displacement & 0x0ff00000) >> 20),\n-\t\t\t    ptr + 0);\n-\t      put_arm_insn (htab, output_bfd,\n-\t\t\t    elf32_arm_plt_entry_short[1]\n-\t\t\t    | ((got_displacement & 0x000ff000) >> 12),\n-\t\t\t    ptr+ 4);\n-\t      put_arm_insn (htab, output_bfd,\n-\t\t\t    elf32_arm_plt_entry_short[2]\n-\t\t\t    | (got_displacement & 0x00000fff),\n-\t\t\t    ptr + 8);\n-#ifdef FOUR_WORD_PLT\n-\t      bfd_put_32 (output_bfd, elf32_arm_plt_entry_short[3], ptr + 12);\n-#endif\n-\t    }\n-\t  else\n-\t    {\n-\t      put_arm_insn (htab, output_bfd,\n-\t\t\t    elf32_arm_plt_entry_long[0]\n-\t\t\t    | ((got_displacement & 0xf0000000) >> 28),\n-\t\t\t    ptr + 0);\n-\t      put_arm_insn (htab, output_bfd,\n-\t\t\t    elf32_arm_plt_entry_long[1]\n-\t\t\t    | ((got_displacement & 0x0ff00000) >> 20),\n-\t\t\t    ptr + 4);\n-\t      put_arm_insn (htab, output_bfd,\n-\t\t\t    elf32_arm_plt_entry_long[2]\n-\t\t\t    | ((got_displacement & 0x000ff000) >> 12),\n-\t\t\t    ptr+ 8);\n-\t      put_arm_insn (htab, output_bfd,\n-\t\t\t    elf32_arm_plt_entry_long[3]\n-\t\t\t    | (got_displacement & 0x00000fff),\n-\t\t\t    ptr + 12);\n-\t    }\n-\t}\n+    }\n \n-      /* Fill in the entry in the .rel(a).(i)plt section.  */\n-      rel.r_offset = got_address;\n-      rel.r_addend = 0;\n-      if (dynindx == -1)\n+  /* Fill in the entry in the .rel(a).(i)plt section.  */\n+  rel.r_offset = got_address;\n+  rel.r_addend = 0;\n+  if (dynindx == -1)\n+    {\n+      /* .igot.plt entries use IRELATIVE relocations against SYM_VALUE.\n+\t The dynamic linker or static executable then calls SYM_VALUE\n+\t to determine the correct run-time value of the .igot.plt entry.  */\n+      rel.r_info = ELF32_R_INFO (0, R_ARM_IRELATIVE);\n+      initial_got_entry = sym_value;\n+    }\n+  else\n+    {\n+      /* For FDPIC we will have to resolve a R_ARM_FUNCDESC_VALUE\n+\t used by PLT entry.  */\n+      if (htab->fdpic_p)\n \t{\n-\t  /* .igot.plt entries use IRELATIVE relocations against SYM_VALUE.\n-\t     The dynamic linker or static executable then calls SYM_VALUE\n-\t     to determine the correct run-time value of the .igot.plt entry.  */\n-\t  rel.r_info = ELF32_R_INFO (0, R_ARM_IRELATIVE);\n-\t  initial_got_entry = sym_value;\n+\t  rel.r_info = ELF32_R_INFO (dynindx, R_ARM_FUNCDESC_VALUE);\n+\t  initial_got_entry = 0;\n \t}\n       else\n \t{\n-\t  /* For FDPIC we will have to resolve a R_ARM_FUNCDESC_VALUE\n-\t     used by PLT entry.  */\n-\t  if (htab->fdpic_p)\n-\t    {\n-\t      rel.r_info = ELF32_R_INFO (dynindx, R_ARM_FUNCDESC_VALUE);\n-\t      initial_got_entry = 0;\n-\t    }\n-\t  else\n-\t    {\n-\t      rel.r_info = ELF32_R_INFO (dynindx, R_ARM_JUMP_SLOT);\n-\t      initial_got_entry = (splt->output_section->vma\n-\t\t\t\t   + splt->output_offset);\n-\n-\t      /* PR ld/16017\n-\t\t When thumb only we need to set the LSB for any address that\n-\t\t will be used with an interworking branch instruction.  */\n-\t      if (using_thumb_only (htab))\n-\t\tinitial_got_entry |= 1;\n-\t    }\n+\t  rel.r_info = ELF32_R_INFO (dynindx, R_ARM_JUMP_SLOT);\n+\t  initial_got_entry = (splt->output_section->vma\n+\t\t\t       + splt->output_offset);\n+\n+\t  /* PR ld/16017\n+\t     When thumb only we need to set the LSB for any address that\n+\t     will be used with an interworking branch instruction.  */\n+\t  if (using_thumb_only (htab))\n+\t    initial_got_entry |= 1;\n \t}\n+    }\n \n-      /* Fill in the entry in the global offset table.  */\n-      bfd_put_32 (output_bfd, initial_got_entry,\n-\t\t  sgot->contents + got_offset);\n-\n-      if (htab->fdpic_p && !(info->flags & DF_BIND_NOW))\n-\t{\n-\t  /* Setup initial funcdesc value.  */\n-\t  /* FIXME: we don't support lazy binding because there is a\n-\t     race condition between both words getting written and\n-\t     some other thread attempting to read them. The ARM\n-\t     architecture does not have an atomic 64 bit load/store\n-\t     instruction that could be used to prevent it; it is\n-\t     recommended that threaded FDPIC applications run with the\n-\t     LD_BIND_NOW environment variable set.  */\n-\t  bfd_put_32(output_bfd, plt_address + 0x18,\n-\t\t     sgot->contents + got_offset);\n-\t  bfd_put_32(output_bfd, -1 /*TODO*/,\n-\t\t     sgot->contents + got_offset + 4);\n-\t}\n+  /* Fill in the entry in the global offset table.  */\n+  bfd_put_32 (output_bfd, initial_got_entry,\n+\t      sgot->contents + got_offset);\n+\n+  if (htab->fdpic_p && !(info->flags & DF_BIND_NOW))\n+    {\n+      /* Setup initial funcdesc value.  */\n+      /* FIXME: we don't support lazy binding because there is a\n+\t race condition between both words getting written and\n+\t some other thread attempting to read them. The ARM\n+\t architecture does not have an atomic 64 bit load/store\n+\t instruction that could be used to prevent it; it is\n+\t recommended that threaded FDPIC applications run with the\n+\t LD_BIND_NOW environment variable set.  */\n+      bfd_put_32(output_bfd, plt_address + 0x18,\n+\t\t sgot->contents + got_offset);\n+      bfd_put_32(output_bfd, -1 /*TODO*/,\n+\t\t sgot->contents + got_offset + 4);\n     }\n \n   if (dynindx == -1)\n@@ -10588,47 +10543,10 @@ elf32_arm_final_link_relocate (reloc_howto_type *\t    howto,\n \t      /* This symbol is local, or marked to become local.  */\n \t      BFD_ASSERT (r_type == R_ARM_ABS32 || r_type == R_ARM_ABS32_NOI\n \t\t\t  || (globals->fdpic_p && !bfd_link_pic(info)));\n-\t      if (globals->root.target_os == is_symbian)\n-\t\t{\n-\t\t  asection *osec;\n-\n-\t\t  /* On Symbian OS, the data segment and text segement\n-\t\t     can be relocated independently.  Therefore, we\n-\t\t     must indicate the segment to which this\n-\t\t     relocation is relative.  The BPABI allows us to\n-\t\t     use any symbol in the right segment; we just use\n-\t\t     the section symbol as it is convenient.  (We\n-\t\t     cannot use the symbol given by \"h\" directly as it\n-\t\t     will not appear in the dynamic symbol table.)\n-\n-\t\t     Note that the dynamic linker ignores the section\n-\t\t     symbol value, so we don't subtract osec->vma\n-\t\t     from the emitted reloc addend.  */\n-\t\t  if (sym_sec)\n-\t\t    osec = sym_sec->output_section;\n-\t\t  else\n-\t\t    osec = input_section->output_section;\n-\t\t  symbol = 0;\n-\t\t  if (osec && elf_section_data (osec))\n-\t\t    symbol = elf_section_data (osec)->dynindx;\n-\t\t  if (symbol == 0)\n-\t\t    {\n-\t\t      struct elf_link_hash_table *htab = elf_hash_table (info);\n-\n-\t\t      if ((osec->flags & SEC_READONLY) == 0\n-\t\t\t  && htab->data_index_section != NULL)\n-\t\t\tosec = htab->data_index_section;\n-\t\t      else\n-\t\t\tosec = htab->text_index_section;\n-\t\t      symbol = elf_section_data (osec)->dynindx;\n-\t\t    }\n-\t\t  BFD_ASSERT (symbol != 0);\n-\t\t}\n-\t      else\n-\t\t/* On SVR4-ish systems, the dynamic loader cannot\n-\t\t   relocate the text and data segments independently,\n-\t\t   so the symbol does not matter.  */\n-\t\tsymbol = 0;\n+\t      /* On SVR4-ish systems, the dynamic loader cannot\n+\t\t relocate the text and data segments independently,\n+\t\t so the symbol does not matter.  */\n+\t      symbol = 0;\n \t      if (dynreloc_st_type == STT_GNU_IFUNC)\n \t\t/* We have an STT_GNU_IFUNC symbol that doesn't resolve\n \t\t   to the .iplt entry.  Instead, every non-call reference\n@@ -15641,16 +15559,6 @@ elf32_arm_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \n \t      if (sreloc == NULL)\n \t\treturn FALSE;\n-\n-\t      /* BPABI objects never have dynamic relocations mapped.  */\n-\t      if (htab->root.target_os == is_symbian)\n-\t\t{\n-\t\t  flagword flags;\n-\n-\t\t  flags = bfd_section_flags (sreloc);\n-\t\t  flags &= ~(SEC_LOAD | SEC_ALLOC);\n-\t\t  bfd_set_section_flags (sreloc, flags);\n-\t\t}\n \t    }\n \n \t  /* If this is a global symbol, count the number of\n@@ -16284,111 +16192,108 @@ allocate_dynrelocs_for_symbol (struct elf_link_hash_entry *h, void * inf)\n \n       /* Make sure this symbol is output as a dynamic symbol.\n \t Undefined weak syms won't yet be marked as dynamic.  */\n-      if (htab->root.dynamic_sections_created && h->dynindx == -1 && !h->forced_local\n+      if (htab->root.dynamic_sections_created\n+\t  && h->dynindx == -1\n+\t  && !h->forced_local\n \t  && h->root.type == bfd_link_hash_undefweak)\n \t{\n \t  if (! bfd_elf_link_record_dynamic_symbol (info, h))\n \t    return FALSE;\n \t}\n \n-      if (htab->root.target_os != is_symbian)\n-\t{\n-\t  s = htab->root.sgot;\n-\t  h->got.offset = s->size;\n+      s = htab->root.sgot;\n+      h->got.offset = s->size;\n \n-\t  if (tls_type == GOT_UNKNOWN)\n-\t    abort ();\n+      if (tls_type == GOT_UNKNOWN)\n+\tabort ();\n \n-\t  if (tls_type == GOT_NORMAL)\n-\t    /* Non-TLS symbols need one GOT slot.  */\n-\t    s->size += 4;\n-\t  else\n+      if (tls_type == GOT_NORMAL)\n+\t/* Non-TLS symbols need one GOT slot.  */\n+\ts->size += 4;\n+      else\n+\t{\n+\t  if (tls_type & GOT_TLS_GDESC)\n \t    {\n-\t      if (tls_type & GOT_TLS_GDESC)\n-\t\t{\n-\t\t  /* R_ARM_TLS_DESC needs 2 GOT slots.  */\n-\t\t  eh->tlsdesc_got\n-\t\t    = (htab->root.sgotplt->size\n-\t\t       - elf32_arm_compute_jump_table_size (htab));\n-\t\t  htab->root.sgotplt->size += 8;\n-\t\t  h->got.offset = (bfd_vma) -2;\n-\t\t  /* plt.got_offset needs to know there's a TLS_DESC\n-\t\t     reloc in the middle of .got.plt.  */\n-\t\t  htab->num_tls_desc++;\n-\t\t}\n-\n-\t      if (tls_type & GOT_TLS_GD)\n-\t\t{\n-\t\t  /* R_ARM_TLS_GD32 and R_ARM_TLS_GD32_FDPIC need two\n-\t\t     consecutive GOT slots.  If the symbol is both GD\n-\t\t     and GDESC, got.offset may have been\n-\t\t     overwritten.  */\n-\t\t  h->got.offset = s->size;\n-\t\t  s->size += 8;\n-\t\t}\n+\t      /* R_ARM_TLS_DESC needs 2 GOT slots.  */\n+\t      eh->tlsdesc_got\n+\t\t= (htab->root.sgotplt->size\n+\t\t   - elf32_arm_compute_jump_table_size (htab));\n+\t      htab->root.sgotplt->size += 8;\n+\t      h->got.offset = (bfd_vma) -2;\n+\t      /* plt.got_offset needs to know there's a TLS_DESC\n+\t\t reloc in the middle of .got.plt.  */\n+\t      htab->num_tls_desc++;\n+\t    }\n \n-\t      if (tls_type & GOT_TLS_IE)\n-\t\t/* R_ARM_TLS_IE32/R_ARM_TLS_IE32_FDPIC need one GOT\n-\t\t   slot.  */\n-\t\ts->size += 4;\n+\t  if (tls_type & GOT_TLS_GD)\n+\t    {\n+\t      /* R_ARM_TLS_GD32 and R_ARM_TLS_GD32_FDPIC need two\n+\t\t consecutive GOT slots.  If the symbol is both GD\n+\t\t and GDESC, got.offset may have been\n+\t\t overwritten.  */\n+\t      h->got.offset = s->size;\n+\t      s->size += 8;\n \t    }\n \n-\t  dyn = htab->root.dynamic_sections_created;\n+\t  if (tls_type & GOT_TLS_IE)\n+\t    /* R_ARM_TLS_IE32/R_ARM_TLS_IE32_FDPIC need one GOT\n+\t       slot.  */\n+\t    s->size += 4;\n+\t}\n \n-\t  indx = 0;\n-\t  if (WILL_CALL_FINISH_DYNAMIC_SYMBOL (dyn,\n-\t\t\t\t\t       bfd_link_pic (info),\n-\t\t\t\t\t       h)\n-\t      && (!bfd_link_pic (info)\n-\t\t  || !SYMBOL_REFERENCES_LOCAL (info, h)))\n-\t    indx = h->dynindx;\n+      dyn = htab->root.dynamic_sections_created;\n \n-\t  if (tls_type != GOT_NORMAL\n-\t      && (bfd_link_dll (info) || indx != 0)\n-\t      && (ELF_ST_VISIBILITY (h->other) == STV_DEFAULT\n-\t\t  || h->root.type != bfd_link_hash_undefweak))\n-\t    {\n-\t      if (tls_type & GOT_TLS_IE)\n-\t\telf32_arm_allocate_dynrelocs (info, htab->root.srelgot, 1);\n+      indx = 0;\n+      if (WILL_CALL_FINISH_DYNAMIC_SYMBOL (dyn, bfd_link_pic (info), h)\n+\t  && (!bfd_link_pic (info)\n+\t      || !SYMBOL_REFERENCES_LOCAL (info, h)))\n+\tindx = h->dynindx;\n \n-\t      if (tls_type & GOT_TLS_GD)\n-\t\telf32_arm_allocate_dynrelocs (info, htab->root.srelgot, 1);\n+      if (tls_type != GOT_NORMAL\n+\t  && (bfd_link_dll (info) || indx != 0)\n+\t  && (ELF_ST_VISIBILITY (h->other) == STV_DEFAULT\n+\t      || h->root.type != bfd_link_hash_undefweak))\n+\t{\n+\t  if (tls_type & GOT_TLS_IE)\n+\t    elf32_arm_allocate_dynrelocs (info, htab->root.srelgot, 1);\n \n-\t      if (tls_type & GOT_TLS_GDESC)\n-\t\t{\n-\t\t  elf32_arm_allocate_dynrelocs (info, htab->root.srelplt, 1);\n-\t\t  /* GDESC needs a trampoline to jump to.  */\n-\t\t  htab->tls_trampoline = -1;\n-\t\t}\n+\t  if (tls_type & GOT_TLS_GD)\n+\t    elf32_arm_allocate_dynrelocs (info, htab->root.srelgot, 1);\n \n-\t      /* Only GD needs it.  GDESC just emits one relocation per\n-\t\t 2 entries.  */\n-\t      if ((tls_type & GOT_TLS_GD) && indx != 0)\n-\t\telf32_arm_allocate_dynrelocs (info, htab->root.srelgot, 1);\n-\t    }\n-\t  else if (((indx != -1) || htab->fdpic_p)\n-\t\t   && !SYMBOL_REFERENCES_LOCAL (info, h))\n+\t  if (tls_type & GOT_TLS_GDESC)\n \t    {\n-\t      if (htab->root.dynamic_sections_created)\n-\t\t/* Reserve room for the GOT entry's R_ARM_GLOB_DAT relocation.  */\n-\t\telf32_arm_allocate_dynrelocs (info, htab->root.srelgot, 1);\n+\t      elf32_arm_allocate_dynrelocs (info, htab->root.srelplt, 1);\n+\t      /* GDESC needs a trampoline to jump to.  */\n+\t      htab->tls_trampoline = -1;\n \t    }\n-\t  else if (h->type == STT_GNU_IFUNC\n-\t\t   && eh->plt.noncall_refcount == 0)\n-\t    /* No non-call references resolve the STT_GNU_IFUNC's PLT entry;\n-\t       they all resolve dynamically instead.  Reserve room for the\n-\t       GOT entry's R_ARM_IRELATIVE relocation.  */\n-\t    elf32_arm_allocate_irelocs (info, htab->root.srelgot, 1);\n-\t  else if (bfd_link_pic (info)\n-\t\t   && !UNDEFWEAK_NO_DYNAMIC_RELOC (info, h))\n-\t    /* Reserve room for the GOT entry's R_ARM_RELATIVE relocation.  */\n+\n+\t  /* Only GD needs it.  GDESC just emits one relocation per\n+\t     2 entries.  */\n+\t  if ((tls_type & GOT_TLS_GD) && indx != 0)\n \t    elf32_arm_allocate_dynrelocs (info, htab->root.srelgot, 1);\n-\t  else if (htab->fdpic_p && tls_type == GOT_NORMAL)\n-\t    /* Reserve room for rofixup for FDPIC executable.  */\n-\t    /* TLS relocs do not need space since they are completely\n-\t       resolved.  */\n-\t    htab->srofixup->size += 4;\n \t}\n+      else if (((indx != -1) || htab->fdpic_p)\n+\t       && !SYMBOL_REFERENCES_LOCAL (info, h))\n+\t{\n+\t  if (htab->root.dynamic_sections_created)\n+\t    /* Reserve room for the GOT entry's R_ARM_GLOB_DAT relocation.  */\n+\t    elf32_arm_allocate_dynrelocs (info, htab->root.srelgot, 1);\n+\t}\n+      else if (h->type == STT_GNU_IFUNC\n+\t       && eh->plt.noncall_refcount == 0)\n+\t/* No non-call references resolve the STT_GNU_IFUNC's PLT entry;\n+\t   they all resolve dynamically instead.  Reserve room for the\n+\t   GOT entry's R_ARM_IRELATIVE relocation.  */\n+\telf32_arm_allocate_irelocs (info, htab->root.srelgot, 1);\n+      else if (bfd_link_pic (info)\n+\t       && !UNDEFWEAK_NO_DYNAMIC_RELOC (info, h))\n+\t/* Reserve room for the GOT entry's R_ARM_RELATIVE relocation.  */\n+\telf32_arm_allocate_dynrelocs (info, htab->root.srelgot, 1);\n+      else if (htab->fdpic_p && tls_type == GOT_NORMAL)\n+\t/* Reserve room for rofixup for FDPIC executable.  */\n+\t/* TLS relocs do not need space since they are completely\n+\t   resolved.  */\n+\thtab->srofixup->size += 4;\n     }\n   else\n     h->got.offset = (bfd_vma) -1;\n@@ -16400,7 +16305,8 @@ allocate_dynrelocs_for_symbol (struct elf_link_hash_entry *h, void * inf)\n       if (h->dynindx != -1)\n \tabort();\n \n-      /* We only allocate one function descriptor with its associated relocation.  */\n+      /* We only allocate one function descriptor with its associated\n+\t relocation.  */\n       if (eh->fdpic_cnts.funcdesc_offset == -1)\n \t{\n \t  asection *s = htab->root.sgot;\n@@ -16426,13 +16332,15 @@ allocate_dynrelocs_for_symbol (struct elf_link_hash_entry *h, void * inf)\n \n       if (h->dynindx == -1)\n \t{\n-\t  /* We only allocate one function descriptor with its associated relocation. q */\n+\t  /* We only allocate one function descriptor with its\n+\t     associated relocation.  */\n \t  if (eh->fdpic_cnts.funcdesc_offset == -1)\n \t    {\n \n \t      eh->fdpic_cnts.funcdesc_offset = s->size;\n \t      s->size += 8;\n-\t      /* We will add an R_ARM_FUNCDESC_VALUE relocation or two rofixups.  */\n+\t      /* We will add an R_ARM_FUNCDESC_VALUE relocation or two\n+\t\t rofixups.  */\n \t      if (bfd_link_pic(info))\n \t\telf32_arm_allocate_dynrelocs (info, htab->root.srelgot, 1);\n \t      else\n@@ -16459,14 +16367,16 @@ allocate_dynrelocs_for_symbol (struct elf_link_hash_entry *h, void * inf)\n \n       if (h->dynindx == -1)\n \t{\n-\t  /* We only allocate one function descriptor with its associated relocation.  */\n+\t  /* We only allocate one function descriptor with its\n+\t     associated relocation.  */\n \t  if (eh->fdpic_cnts.funcdesc_offset == -1)\n \t    {\n \t      asection *s = htab->root.sgot;\n \n \t      eh->fdpic_cnts.funcdesc_offset = s->size;\n \t      s->size += 8;\n-\t      /* We will add an R_ARM_FUNCDESC_VALUE relocation or two rofixups.  */\n+\t      /* We will add an R_ARM_FUNCDESC_VALUE relocation or two\n+\t\t rofixups.  */\n \t      if (bfd_link_pic(info))\n \t\telf32_arm_allocate_dynrelocs (info, htab->root.srelgot, 1);\n \t      else\n@@ -16529,7 +16439,9 @@ allocate_dynrelocs_for_symbol (struct elf_link_hash_entry *h, void * inf)\n      space for pc-relative relocs that have become local due to symbol\n      visibility changes.  */\n \n-  if (bfd_link_pic (info) || htab->root.is_relocatable_executable || htab->fdpic_p)\n+  if (bfd_link_pic (info)\n+      || htab->root.is_relocatable_executable\n+      || htab->fdpic_p)\n     {\n       /* Relocs that use pc_count are PC-relative forms, which will appear\n \t on something like \".long foo - .\" or \"movw REG, foo - .\".  We want\n@@ -16637,7 +16549,8 @@ allocate_dynrelocs_for_symbol (struct elf_link_hash_entry *h, void * inf)\n \t  && eh->plt.noncall_refcount == 0\n \t  && SYMBOL_REFERENCES_LOCAL (info, h))\n \telf32_arm_allocate_irelocs (info, sreloc, p->count);\n-      else if (h->dynindx != -1 && (!bfd_link_pic(info) || !info->symbolic || !h->def_regular))\n+      else if (h->dynindx != -1\n+\t       && (!bfd_link_pic(info) || !info->symbolic || !h->def_regular))\n \telf32_arm_allocate_dynrelocs (info, sreloc, p->count);\n       else if (htab->fdpic_p && !bfd_link_pic(info))\n \thtab->srofixup->size += 4 * p->count;\n@@ -17267,7 +17180,7 @@ elf32_arm_finish_dynamic_sections (bfd * output_bfd, struct bfd_link_info * info\n \n       splt = htab->root.splt;\n       BFD_ASSERT (splt != NULL && sdyn != NULL);\n-      BFD_ASSERT (htab->root.target_os == is_symbian || sgot != NULL);\n+      BFD_ASSERT (sgot != NULL);\n \n       dyncon = (Elf32_External_Dyn *) sdyn->contents;\n       dynconend = (Elf32_External_Dyn *) (sdyn->contents + sdyn->size);\n@@ -17282,36 +17195,22 @@ elf32_arm_finish_dynamic_sections (bfd * output_bfd, struct bfd_link_info * info\n \n \t  switch (dyn.d_tag)\n \t    {\n-\t      unsigned int type;\n-\n \t    default:\n \t      if (htab->root.target_os == is_vxworks\n \t\t  && elf_vxworks_finish_dynamic_entry (output_bfd, &dyn))\n \t\tbfd_elf32_swap_dyn_out (output_bfd, &dyn, dyncon);\n \t      break;\n \n \t    case DT_HASH:\n-\t      name = \".hash\";\n-\t      goto get_vma_if_bpabi;\n \t    case DT_STRTAB:\n-\t      name = \".dynstr\";\n-\t      goto get_vma_if_bpabi;\n \t    case DT_SYMTAB:\n-\t      name = \".dynsym\";\n-\t      goto get_vma_if_bpabi;\n \t    case DT_VERSYM:\n-\t      name = \".gnu.version\";\n-\t      goto get_vma_if_bpabi;\n \t    case DT_VERDEF:\n-\t      name = \".gnu.version_d\";\n-\t      goto get_vma_if_bpabi;\n \t    case DT_VERNEED:\n-\t      name = \".gnu.version_r\";\n-\t      goto get_vma_if_bpabi;\n+\t      break;\n \n \t    case DT_PLTGOT:\n-\t      name = (htab->root.target_os == is_symbian\n-\t\t      ? \".got\" : \".got.plt\");\n+\t      name = \".got.plt\";\n \t      goto get_vma;\n \t    case DT_JMPREL:\n \t      name = RELOC_SECTION (htab, \".plt\");\n@@ -17324,21 +17223,10 @@ elf32_arm_finish_dynamic_sections (bfd * output_bfd, struct bfd_link_info * info\n \t\t  bfd_set_error (bfd_error_invalid_operation);\n \t\t  return FALSE;\n \t\t}\n-\t      if (htab->root.target_os != is_symbian)\n-\t\tdyn.d_un.d_ptr = s->output_section->vma + s->output_offset;\n-\t      else\n-\t\t/* In the BPABI, tags in the PT_DYNAMIC section point\n-\t\t   at the file offset, not the memory address, for the\n-\t\t   convenience of the post linker.  */\n-\t\tdyn.d_un.d_ptr = s->output_section->filepos + s->output_offset;\n+\t      dyn.d_un.d_ptr = s->output_section->vma + s->output_offset;\n \t      bfd_elf32_swap_dyn_out (output_bfd, &dyn, dyncon);\n \t      break;\n \n-\t    get_vma_if_bpabi:\n-\t      if (htab->root.target_os == is_symbian)\n-\t\tgoto get_vma;\n-\t      break;\n-\n \t    case DT_PLTRELSZ:\n \t      s = htab->root.srelplt;\n \t      BFD_ASSERT (s != NULL);\n@@ -17350,35 +17238,6 @@ elf32_arm_finish_dynamic_sections (bfd * output_bfd, struct bfd_link_info * info\n \t    case DT_RELASZ:\n \t    case DT_REL:\n \t    case DT_RELA:\n-\t      /* In the BPABI, the DT_REL tag must point at the file\n-\t\t offset, not the VMA, of the first relocation\n-\t\t section.  So, we use code similar to that in\n-\t\t elflink.c, but do not check for SHF_ALLOC on the\n-\t\t relocation section, since relocation sections are\n-\t\t never allocated under the BPABI.  PLT relocs are also\n-\t\t included.  */\n-\t      if (htab->root.target_os == is_symbian)\n-\t\t{\n-\t\t  unsigned int i;\n-\t\t  type = ((dyn.d_tag == DT_REL || dyn.d_tag == DT_RELSZ)\n-\t\t\t  ? SHT_REL : SHT_RELA);\n-\t\t  dyn.d_un.d_val = 0;\n-\t\t  for (i = 1; i < elf_numsections (output_bfd); i++)\n-\t\t    {\n-\t\t      Elf_Internal_Shdr *hdr\n-\t\t\t= elf_elfsections (output_bfd)[i];\n-\t\t      if (hdr->sh_type == type)\n-\t\t\t{\n-\t\t\t  if (dyn.d_tag == DT_RELSZ\n-\t\t\t      || dyn.d_tag == DT_RELASZ)\n-\t\t\t    dyn.d_un.d_val += hdr->sh_size;\n-\t\t\t  else if ((ufile_ptr) hdr->sh_offset\n-\t\t\t\t   <= dyn.d_un.d_val - 1)\n-\t\t\t    dyn.d_un.d_val = hdr->sh_offset;\n-\t\t\t}\n-\t\t    }\n-\t\t  bfd_elf32_swap_dyn_out (output_bfd, &dyn, dyncon);\n-\t\t}\n \t      break;\n \n \t    case DT_TLSDESC_PLT:\n@@ -17846,14 +17705,7 @@ elf32_arm_output_plt_map_1 (output_arch_syminfo *osi,\n \t\t    (osi->info->output_bfd, osi->sec->output_section));\n \n   addr = root_plt->offset & -2;\n-  if (htab->root.target_os == is_symbian)\n-    {\n-      if (!elf32_arm_output_map_sym (osi, ARM_MAP_ARM, addr))\n-\treturn FALSE;\n-      if (!elf32_arm_output_map_sym (osi, ARM_MAP_DATA, addr + 4))\n-\treturn FALSE;\n-    }\n-  else if (htab->root.target_os == is_vxworks)\n+  if (htab->root.target_os == is_vxworks)\n     {\n       if (!elf32_arm_output_map_sym (osi, ARM_MAP_ARM, addr))\n \treturn FALSE;\n@@ -18224,8 +18076,7 @@ elf32_arm_output_arch_local_syms (bfd *output_bfd,\n       osi.sec_shndx = (_bfd_elf_section_from_bfd_section\n \t\t       (output_bfd, osi.sec->output_section));\n \n-      /* Output mapping symbols for the plt header.  SymbianOS does not have a\n-\t plt header.  */\n+      /* Output mapping symbols for the plt header.  */\n       if (htab->root.target_os == is_vxworks)\n \t{\n \t  /* VxWorks shared libraries have no PLT header.  */\n@@ -18251,7 +18102,7 @@ elf32_arm_output_arch_local_syms (bfd *output_bfd,\n \t  if (!elf32_arm_output_map_sym (&osi, ARM_MAP_THUMB, 16))\n \t    return FALSE;\n \t}\n-      else if (htab->root.target_os != is_symbian && !htab->fdpic_p)\n+      else if (!htab->fdpic_p)\n \t{\n \t  if (!elf32_arm_output_map_sym (&osi, ARM_MAP_ARM, 0))\n \t    return FALSE;\n@@ -20778,167 +20629,3 @@ elf32_arm_merge_private_bfd_data (bfd *ibfd, struct bfd_link_info *info)\n \n   return flags_compatible;\n }\n-\n-\n-/* Symbian OS Targets.  */\n-\n-#undef\tTARGET_LITTLE_SYM\n-#define TARGET_LITTLE_SYM\t\tarm_elf32_symbian_le_vec\n-#undef\tTARGET_LITTLE_NAME\n-#define TARGET_LITTLE_NAME\t\t\"elf32-littlearm-symbian\"\n-#undef\tTARGET_BIG_SYM\n-#define TARGET_BIG_SYM\t\t\tarm_elf32_symbian_be_vec\n-#undef\tTARGET_BIG_NAME\n-#define TARGET_BIG_NAME\t\t\t\"elf32-bigarm-symbian\"\n-\n-/* Like elf32_arm_link_hash_table_create -- but overrides\n-   appropriately for Symbian OS.  */\n-\n-static struct bfd_link_hash_table *\n-elf32_arm_symbian_link_hash_table_create (bfd *abfd)\n-{\n-  struct bfd_link_hash_table *ret;\n-\n-  ret = elf32_arm_link_hash_table_create (abfd);\n-  if (ret)\n-    {\n-      struct elf32_arm_link_hash_table *htab\n-\t= (struct elf32_arm_link_hash_table *)ret;\n-      /* There is no PLT header for Symbian OS.  */\n-      htab->plt_header_size = 0;\n-      /* The PLT entries are each one instruction and one word.  */\n-      htab->plt_entry_size = 4 * ARRAY_SIZE (elf32_arm_symbian_plt_entry);\n-      /* Symbian uses armv5t or above, so use_blx is always true.  */\n-      htab->use_blx = 1;\n-      htab->root.is_relocatable_executable = 1;\n-    }\n-  return ret;\n-}\n-\n-static const struct bfd_elf_special_section\n-elf32_arm_symbian_special_sections[] =\n-{\n-  /* In a BPABI executable, the dynamic linking sections do not go in\n-     the loadable read-only segment.  The post-linker may wish to\n-     refer to these sections, but they are not part of the final\n-     program image.  */\n-  { STRING_COMMA_LEN (\".dynamic\"),\t 0, SHT_DYNAMIC,  0 },\n-  { STRING_COMMA_LEN (\".dynstr\"),\t 0, SHT_STRTAB,\t  0 },\n-  { STRING_COMMA_LEN (\".dynsym\"),\t 0, SHT_DYNSYM,\t  0 },\n-  { STRING_COMMA_LEN (\".got\"),\t\t 0, SHT_PROGBITS, 0 },\n-  { STRING_COMMA_LEN (\".hash\"),\t\t 0, SHT_HASH,\t  0 },\n-  /* These sections do not need to be writable as the SymbianOS\n-     postlinker will arrange things so that no dynamic relocation is\n-     required.  */\n-  { STRING_COMMA_LEN (\".init_array\"),\t 0, SHT_INIT_ARRAY,    SHF_ALLOC },\n-  { STRING_COMMA_LEN (\".fini_array\"),\t 0, SHT_FINI_ARRAY,    SHF_ALLOC },\n-  { STRING_COMMA_LEN (\".preinit_array\"), 0, SHT_PREINIT_ARRAY, SHF_ALLOC },\n-  { NULL,\t\t\t      0, 0, 0,\t\t       0 }\n-};\n-\n-static void\n-elf32_arm_symbian_begin_write_processing (bfd *abfd,\n-\t\t\t\t\t  struct bfd_link_info *link_info)\n-{\n-  /* BPABI objects are never loaded directly by an OS kernel; they are\n-     processed by a postlinker first, into an OS-specific format.  If\n-     the D_PAGED bit is set on the file, BFD will align segments on\n-     page boundaries, so that an OS can directly map the file.  With\n-     BPABI objects, that just results in wasted space.  In addition,\n-     because we clear the D_PAGED bit, map_sections_to_segments will\n-     recognize that the program headers should not be mapped into any\n-     loadable segment.  */\n-  abfd->flags &= ~D_PAGED;\n-  elf32_arm_begin_write_processing (abfd, link_info);\n-}\n-\n-static bfd_boolean\n-elf32_arm_symbian_modify_segment_map (bfd *abfd,\n-\t\t\t\t      struct bfd_link_info *info)\n-{\n-  struct elf_segment_map *m;\n-  asection *dynsec;\n-\n-  /* BPABI shared libraries and executables should have a PT_DYNAMIC\n-     segment.  However, because the .dynamic section is not marked\n-     with SEC_LOAD, the generic ELF code will not create such a\n-     segment.  */\n-  dynsec = bfd_get_section_by_name (abfd, \".dynamic\");\n-  if (dynsec)\n-    {\n-      for (m = elf_seg_map (abfd); m != NULL; m = m->next)\n-\tif (m->p_type == PT_DYNAMIC)\n-\t  break;\n-\n-      if (m == NULL)\n-\t{\n-\t  m = _bfd_elf_make_dynamic_segment (abfd, dynsec);\n-\t  m->next = elf_seg_map (abfd);\n-\t  elf_seg_map (abfd) = m;\n-\t}\n-    }\n-\n-  /* Also call the generic arm routine.  */\n-  return elf32_arm_modify_segment_map (abfd, info);\n-}\n-\n-/* Return address for Ith PLT stub in section PLT, for relocation REL\n-   or (bfd_vma) -1 if it should not be included.  */\n-\n-static bfd_vma\n-elf32_arm_symbian_plt_sym_val (bfd_vma i, const asection *plt,\n-\t\t\t       const arelent *rel ATTRIBUTE_UNUSED)\n-{\n-  return plt->vma + 4 * ARRAY_SIZE (elf32_arm_symbian_plt_entry) * i;\n-}\n-\n-#undef  elf32_bed\n-#define elf32_bed elf32_arm_symbian_bed\n-\n-/* The dynamic sections are not allocated on SymbianOS; the postlinker\n-   will process them and then discard them.  */\n-#undef  ELF_DYNAMIC_SEC_FLAGS\n-#define ELF_DYNAMIC_SEC_FLAGS \\\n-  (SEC_HAS_CONTENTS | SEC_IN_MEMORY | SEC_LINKER_CREATED)\n-\n-#undef elf_backend_emit_relocs\n-\n-#undef  bfd_elf32_bfd_link_hash_table_create\n-#define bfd_elf32_bfd_link_hash_table_create\telf32_arm_symbian_link_hash_table_create\n-#undef  elf_backend_special_sections\n-#define elf_backend_special_sections\t\telf32_arm_symbian_special_sections\n-#undef  elf_backend_begin_write_processing\n-#define elf_backend_begin_write_processing\telf32_arm_symbian_begin_write_processing\n-#undef  elf_backend_final_write_processing\n-#define elf_backend_final_write_processing\telf32_arm_final_write_processing\n-\n-#undef  elf_backend_modify_segment_map\n-#define elf_backend_modify_segment_map elf32_arm_symbian_modify_segment_map\n-\n-/* There is no .got section for BPABI objects, and hence no header.  */\n-#undef  elf_backend_got_header_size\n-#define elf_backend_got_header_size 0\n-\n-/* Similarly, there is no .got.plt section.  */\n-#undef  elf_backend_want_got_plt\n-#define elf_backend_want_got_plt 0\n-\n-#undef  elf_backend_plt_sym_val\n-#define elf_backend_plt_sym_val\t\telf32_arm_symbian_plt_sym_val\n-\n-#undef  elf_backend_may_use_rel_p\n-#define elf_backend_may_use_rel_p\t1\n-#undef  elf_backend_may_use_rela_p\n-#define elf_backend_may_use_rela_p\t0\n-#undef  elf_backend_default_use_rela_p\n-#define elf_backend_default_use_rela_p\t0\n-#undef  elf_backend_want_plt_sym\n-#define elf_backend_want_plt_sym\t0\n-#undef  elf_backend_dtrel_excludes_plt\n-#define elf_backend_dtrel_excludes_plt\t0\n-#undef  ELF_MAXPAGESIZE\n-#define ELF_MAXPAGESIZE\t\t\t0x8000\n-#undef ELF_TARGET_OS\n-#define ELF_TARGET_OS\t\t\tis_symbian\n-\n-#include \"elf32-target.h\""
    },
    {
      "sha": "dcd42636df0432135a9501ced33d4ee22cca56f6",
      "filename": "bfd/targets.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/bfd/targets.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/bfd/targets.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/targets.c?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -697,8 +697,6 @@ extern const bfd_target arm_elf32_fdpic_be_vec;\n extern const bfd_target arm_elf32_fdpic_le_vec;\n extern const bfd_target arm_elf32_nacl_be_vec;\n extern const bfd_target arm_elf32_nacl_le_vec;\n-extern const bfd_target arm_elf32_symbian_be_vec;\n-extern const bfd_target arm_elf32_symbian_le_vec;\n extern const bfd_target arm_elf32_vxworks_be_vec;\n extern const bfd_target arm_elf32_vxworks_le_vec;\n extern const bfd_target arm_mach_o_vec;\n@@ -1021,8 +1019,6 @@ static const bfd_target * const _bfd_target_vector[] =\n \t&arm_elf32_le_vec,\n \t&arm_elf32_fdpic_be_vec,\n \t&arm_elf32_fdpic_le_vec,\n-\t&arm_elf32_symbian_be_vec,\n-\t&arm_elf32_symbian_le_vec,\n \t&arm_elf32_vxworks_be_vec,\n \t&arm_elf32_vxworks_le_vec,\n \t&arm_mach_o_vec,"
    },
    {
      "sha": "4da4636e9618c17443aef790535c13088c842a3c",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -1,3 +1,8 @@\n+2021-02-09  Alan Modra  <amodra@gmail.com>\n+\n+\t* testsuite/lib/binutils-common.exp (supports_gnu_osabi): Remove\n+\tsymbianelf.\n+\n 2021-02-07  Alan Modra  <amodra@gmail.com>\n \n \t* unwind-ia64.c (unw_print_xyreg): Don't leave output buffer"
    },
    {
      "sha": "029284167a833f68186433e641f15ea3660deb19",
      "filename": "binutils/testsuite/lib/binutils-common.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/binutils/testsuite/lib/binutils-common.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/binutils/testsuite/lib/binutils-common.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/lib/binutils-common.exp?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -213,7 +213,6 @@ proc supports_gnu_osabi {} {\n \t || [istarget *-*-linux*]\n \t || [istarget *-*-nacl*]\n \t || ( [istarget *-*-*bsd*] && ![istarget arm*-*-netbsd*] )\n-\t || [istarget *-*-symbianelf]\n \t || [istarget *-*-lynxos]\n \t || ( [istarget *-*-nto*] && ![istarget arm*-*-*] )\n \t || [istarget *-*-irix*]"
    },
    {
      "sha": "9eebe3a17daafaa1982c1a631e57b78dbf859a46",
      "filename": "configure",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/configure?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -3442,9 +3442,6 @@ case \"${target}\" in\n   arm-wince-pe)\n     noconfigdirs=\"$noconfigdirs target-libffi\"\n     ;;\n-  arm*-*-symbianelf*)\n-    noconfigdirs=\"$noconfigdirs target-libffi\"\n-    ;;\n   cris-*-* | crisv32-*-*)\n     case \"${target}\" in\n       *-*-linux*)"
    },
    {
      "sha": "a721316d07b7df4770114c1a4acaa213bb953d8a",
      "filename": "configure.ac",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/configure.ac?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -728,9 +728,6 @@ case \"${target}\" in\n   arm-wince-pe)\n     noconfigdirs=\"$noconfigdirs target-libffi\"\n     ;;\n-  arm*-*-symbianelf*)\n-    noconfigdirs=\"$noconfigdirs target-libffi\"\n-    ;;\n   cris-*-* | crisv32-*-*)\n     case \"${target}\" in\n       *-*-linux*)"
    },
    {
      "sha": "031bb54d7d2fa02c4d5e1c8558b71e8bd6ce7188",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -1,3 +1,24 @@\n+2021-02-09  Alan Modra  <amodra@gmail.com>\n+\n+\t* Makefile.am (TARG_ENV_HFILES): Remove config/te-symbian.h.\n+\t* config/tc-arm.c (elf32_arm_target_format): Remove TE_SYMBIAN\n+\tsupport.\n+\t* config/te-symbian.h: Delete.\n+\t* configure.tgt: Remove arm-*-symbianelf*.\n+\t* testsuite/gas/arm/arch4t-eabi.d: Don't mention symbianelf in\n+\ttarget selection.\n+\t* testsuite/gas/arm/arch4t.d: Likewise.\n+\t* testsuite/gas/arm/got_prel.d: Likewise.\n+\t* testsuite/gas/arm/mapdir.d: Likewise.\n+\t* testsuite/gas/arm/mapmisc.d: Likewise.\n+\t* testsuite/gas/arm/mapsecs.d: Likewise.\n+\t* testsuite/gas/arm/mapshort-eabi.d: Likewise.\n+\t* testsuite/gas/arm/thumb-eabi.d: Likewise.\n+\t* testsuite/gas/arm/thumb.d: Likewise.\n+\t* testsuite/gas/arm/thumbrel.d: Likewise.\n+\t* Makefile.in: Regenerate.\n+\t* po/POTFILES.in: Regenerate.\n+\n 2021-02-09  Nick Clifton  <nickc@redhat.com>\n \n \tPR 27384"
    },
    {
      "sha": "513e6289cbfe444d88a4fc10282f823cbc029561",
      "filename": "gas/Makefile.am",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/Makefile.am?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -332,7 +332,6 @@ TARG_ENV_HFILES = \\\n \tconfig/te-pe.h \\\n \tconfig/te-solaris.h \\\n \tconfig/te-svr4.h \\\n-\tconfig/te-symbian.h \\\n \tconfig/te-tmips.h \\\n \tconfig/te-vxworks.h \\\n \tconfig/te-wince-pe.h"
    },
    {
      "sha": "0a6f33df2516e46077d4c5be7793d922277d01ed",
      "filename": "gas/Makefile.in",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/Makefile.in?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -723,7 +723,6 @@ TARG_ENV_HFILES = \\\n \tconfig/te-pe.h \\\n \tconfig/te-solaris.h \\\n \tconfig/te-svr4.h \\\n-\tconfig/te-symbian.h \\\n \tconfig/te-tmips.h \\\n \tconfig/te-vxworks.h \\\n \tconfig/te-wince-pe.h"
    },
    {
      "sha": "d3bb56d7ba6d1841f45aa45e3d37cb64fd425a55",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 1,
      "deletions": 5,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -30495,11 +30495,7 @@ arm_fix_adjustable (fixS * fixP)\n const char *\n elf32_arm_target_format (void)\n {\n-#ifdef TE_SYMBIAN\n-  return (target_big_endian\n-\t  ? \"elf32-bigarm-symbian\"\n-\t  : \"elf32-littlearm-symbian\");\n-#elif defined (TE_VXWORKS)\n+#if defined (TE_VXWORKS)\n   return (target_big_endian\n \t  ? \"elf32-bigarm-vxworks\"\n \t  : \"elf32-littlearm-vxworks\");"
    },
    {
      "sha": "0bcdce1316c6b0752110921c11bb6c78ecf7819c",
      "filename": "gas/config/te-symbian.h",
      "status": "removed",
      "additions": 0,
      "deletions": 22,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a68fcd7f7da92d47f0f41df15fea30f790ed06c/gas/config/te-symbian.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a68fcd7f7da92d47f0f41df15fea30f790ed06c/gas/config/te-symbian.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/te-symbian.h?ref=4a68fcd7f7da92d47f0f41df15fea30f790ed06c",
      "patch": "@@ -1,22 +0,0 @@\n-/* Copyright (C) 2004-2021 Free Software Foundation, Inc.\n-\n-   This file is part of GAS, the GNU Assembler.\n-\n-   GAS is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as\n-   published by the Free Software Foundation; either version 3,\n-   or (at your option) any later version.\n-\n-   GAS is distributed in the hope that it will be useful, but\n-   WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See\n-   the GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with GAS; see the file COPYING.  If not, write to the Free\n-   Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA\n-   02110-1301, USA.  */\n-\n-#define TE_SYMBIAN 1\n-\n-#include \"te-armeabi.h\""
    },
    {
      "sha": "338892add2ab6e8e7eb464edd37262b48d5bc699",
      "filename": "gas/configure.tgt",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/configure.tgt",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/configure.tgt",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/configure.tgt?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -144,7 +144,6 @@ case ${generic_target} in\n   arm-*-phoenix*)\t\t\tfmt=elf ;;\n   arm-*-elf)\t\t\t\tfmt=elf ;;\n   arm-*-eabi* | arm-*-rtems* | arm-*-genode*)\tfmt=elf em=armeabi ;;\n-  arm-*-symbianelf*)\t\t\tfmt=elf em=symbian ;;\n   arm-*-kaos*)\t\t\t\tfmt=elf ;;\n   arm-*-conix*)\t\t\t\tfmt=elf ;;\n   arm-*-freebsd[89].* | armeb-*-freebsd[89].*)"
    },
    {
      "sha": "fa43f57717eb50fc5fd3fbaac32deb2b4b85129a",
      "filename": "gas/po/POTFILES.in",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/po/POTFILES.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/po/POTFILES.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/po/POTFILES.in?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -208,7 +208,6 @@ config/te-pc532mach.h\n config/te-pe.h\n config/te-solaris.h\n config/te-svr4.h\n-config/te-symbian.h\n config/te-tmips.h\n config/te-vms.c\n config/te-vxworks.h"
    },
    {
      "sha": "66c0a4deb5c42a78646213311cc66f298d23b8f0",
      "filename": "gas/testsuite/gas/arm/arch4t-eabi.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/arch4t-eabi.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/arch4t-eabi.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/arch4t-eabi.d?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -2,7 +2,7 @@\n # as: -march=armv4t\n # objdump: -dr --prefix-addresses --show-raw-insn\n # source: arch4t.s\n-# target: *-*-*eabi* *-*-symbianelf *-*-nacl*\n+# target: *-*-*eabi* *-*-nacl*\n \n .*: +file format .*arm.*\n "
    },
    {
      "sha": "f00f2b8209ec731f87aacf0abdb026fdd795d8bb",
      "filename": "gas/testsuite/gas/arm/arch4t.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/arch4t.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/arch4t.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/arch4t.d?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -2,7 +2,7 @@\n # as: -march=armv4t\n # objdump: -dr --prefix-addresses --show-raw-insn\n # EABI targets have their own variant.\n-# notarget: *-*-*eabi* *-*-symbianelf *-*-nacl*\n+# notarget: *-*-*eabi* *-*-nacl*\n \n .*: +file format .*arm.*\n "
    },
    {
      "sha": "ad415f3afda365fa4aabbcf1fe7c0b6ed5b5ed94",
      "filename": "gas/testsuite/gas/arm/got_prel.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/got_prel.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/got_prel.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/got_prel.d?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -2,7 +2,7 @@\n # source: got_prel.s\n # as: -march=armv5te -meabi=5 --generate-missing-build-notes=no\n # readelf: -x 4 -r\n-# target: *-*-*eabi* *-*-symbianelf *-*-linux-* *-*-elf *-*-nacl*\n+# target: *-*-*eabi* *-*-linux-* *-*-elf *-*-nacl*\n \n Relocation section '.rel.text.foo' at offset .* contains 1 entry:\n  Offset     Info    Type            Sym.Value  Sym. Name"
    },
    {
      "sha": "b7f2a5cc324befe8b1fbecb3a49d9b1a360b48ba",
      "filename": "gas/testsuite/gas/arm/mapdir.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/mapdir.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/mapdir.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mapdir.d?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -2,7 +2,7 @@\n #objdump: --syms --special-syms -d\n #name: ARM Mapping Symbols for .arm/.thumb\n # This test is only valid on EABI based ports.\n-#target: *-*-*eabi* *-*-symbianelf *-*-linux-* *-*-elf *-*-nacl*\n+#target: *-*-*eabi* *-*-linux-* *-*-elf *-*-nacl*\n #source: mapdir.s\n \n "
    },
    {
      "sha": "22d58bbdba63bdda0bd65ffbe53a5127bd1b104d",
      "filename": "gas/testsuite/gas/arm/mapmisc.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/mapmisc.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/mapmisc.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mapmisc.d?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -2,7 +2,7 @@\n #objdump: --syms --special-syms -d\n #name: ARM Mapping Symbols for miscellaneous directives\n # This test is only valid on EABI based ports.\n-#target: *-*-*eabi* *-*-symbianelf *-*-linux-* *-*-elf *-*-nacl*\n+#target: *-*-*eabi* *-*-linux-* *-*-elf *-*-nacl*\n #source: mapmisc.s\n \n "
    },
    {
      "sha": "ffcfd6d01345348764ff0c636d7dae46c7d37309",
      "filename": "gas/testsuite/gas/arm/mapsecs.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/mapsecs.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/mapsecs.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mapsecs.d?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -2,7 +2,7 @@\n #objdump: --syms --special-syms -d\n #name: ARM Mapping Symbols with multiple sections\n # This test is only valid on EABI based ports.\n-#target: *-*-*eabi* *-*-symbianelf *-*-linux-* *-*-elf *-*-nacl*\n+#target: *-*-*eabi* *-*-linux-* *-*-elf *-*-nacl*\n #source: mapsecs.s\n \n "
    },
    {
      "sha": "7144ace4b41e10928ed4e79372c5dbb729b0e18a",
      "filename": "gas/testsuite/gas/arm/mapshort-eabi.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/mapshort-eabi.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/mapshort-eabi.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mapshort-eabi.d?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -2,7 +2,7 @@\n #as:  --generate-missing-build-notes=no\n #name: ARM Mapping Symbols for .short (EABI version)\n # This test is only valid on EABI based ports.\n-#target: *-*-*eabi* *-*-symbianelf *-*-linux-* *-*-elf *-*-nacl*\n+#target: *-*-*eabi* *-*-linux-* *-*-elf *-*-nacl*\n #source: mapshort.s\n \n # Test the generation and use of ARM ELF Mapping Symbols"
    },
    {
      "sha": "c7c8e322273d20ddb3e550a480a3a8355fe3513d",
      "filename": "gas/testsuite/gas/arm/thumb-eabi.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/thumb-eabi.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/thumb-eabi.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/thumb-eabi.d?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -2,7 +2,7 @@\n # as: -mcpu=arm7t\n # objdump: -dr --prefix-addresses --show-raw-insn\n # source: thumb.s\n-# target: *-*-*eabi* *-*-symbianelf *-*-nacl*\n+# target: *-*-*eabi* *-*-nacl*\n \n .*: +file format .*arm.*\n "
    },
    {
      "sha": "1ac12736bd4660147b86cd76b288aa48384ed2f4",
      "filename": "gas/testsuite/gas/arm/thumb.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/thumb.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/thumb.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/thumb.d?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -3,7 +3,7 @@\n # objdump: -dr --prefix-addresses --show-raw-insn\n # The arm-aout and arm-pe ports do not support Thumb branch relocations.\n # EABI targets have their own variant.\n-# notarget: *-*-pe *-*-*eabi* *-*-symbianelf *-*-nacl*\n+# notarget: *-*-pe *-*-*eabi* *-*-nacl*\n \n .*: +file format .*arm.*\n "
    },
    {
      "sha": "bc8644be20c3d44303352383235064f1bff31008",
      "filename": "gas/testsuite/gas/arm/thumbrel.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/thumbrel.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/gas/testsuite/gas/arm/thumbrel.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/thumbrel.d?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -1,7 +1,7 @@\n #objdump: -sr\n #as:  --generate-missing-build-notes=no\n # This test is only valid on EABI based ports.\n-#target: *-*-*eabi* *-*-symbianelf *-*-nacl*\n+#target: *-*-*eabi* *-*-nacl*\n \n .*:     file format.*\n "
    },
    {
      "sha": "863f39ed6e8b8cc548b1d593e46c9ea821fc9851",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -1,3 +1,17 @@\n+2021-02-09  Alan Modra  <amodra@gmail.com>\n+\n+\t* Makefile.am (ALL_EMULATION_SOURCES): Remove earmsymbian.c.\n+\tDon't include symbian dep file.\n+\t* configure.tgt: Remove arm*-*-symbianelf* entry.\n+\t* emulparams/armsymbian.sh: Delete.\n+\t* ld.texi: Don't mention symbian.\n+\t* scripttempl/armbpabi.sc: Delete.\n+\t* testsuite/ld-arm/symbian-seg1.d: Delete.\n+\t* testsuite/ld-arm/symbian-seg1.s: Delete.\n+\t* testsuite/ld-arm/arm-elf.exp: Don't run symbian-seg1.\n+\t* Makefile.in: Regenerate.\n+\t* po/BLD-POTFILES.in: Regenerate.\n+\n 2021-02-07  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR ld/27358"
    },
    {
      "sha": "3fcaab71dcd7983cce4b6050d40d3f3c62f74066",
      "filename": "ld/Makefile.am",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/ld/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/ld/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/Makefile.am?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -184,7 +184,6 @@ ALL_EMULATION_SOURCES = \\\n \tearmelfb_nbsd.c \\\n \tearmnto.c \\\n \tearmpe.c \\\n-\tearmsymbian.c \\\n \teavr1.c \\\n \teavr2.c \\\n \teavr25.c \\\n@@ -675,7 +674,6 @@ $(ALL_EMULATION_SOURCES) $(ALL_64_EMULATION_SOURCES): $(GEN_DEPENDS)\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/earmelfb_nbsd.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/earmnto.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/earmpe.Pc@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/earmsymbian.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eavr1.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eavr2.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eavr25.Pc@am__quote@"
    },
    {
      "sha": "27b18c1185ebb10b5279558aefeec69d8bef6e6d",
      "filename": "ld/Makefile.in",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/ld/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/ld/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/Makefile.in?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -674,7 +674,6 @@ ALL_EMULATION_SOURCES = \\\n \tearmelfb_nbsd.c \\\n \tearmnto.c \\\n \tearmpe.c \\\n-\tearmsymbian.c \\\n \teavr1.c \\\n \teavr2.c \\\n \teavr25.c \\\n@@ -1279,7 +1278,6 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/earmelfb_nbsd.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/earmnto.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/earmpe.Po@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/earmsymbian.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eavr1.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eavr2.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eavr25.Po@am__quote@\n@@ -2334,7 +2332,6 @@ $(ALL_EMULATION_SOURCES) $(ALL_64_EMULATION_SOURCES): $(GEN_DEPENDS)\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/earmelfb_nbsd.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/earmnto.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/earmpe.Pc@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/earmsymbian.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eavr1.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eavr2.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/eavr25.Pc@am__quote@"
    },
    {
      "sha": "6205d7c98728f7228275589cf4c584e9e8e95e77",
      "filename": "ld/configure.tgt",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/ld/configure.tgt",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/ld/configure.tgt",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/configure.tgt?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -151,7 +151,6 @@ armeb-*-elf | armeb-*-eabi*)\n arm-*-elf | arm*-*-eabi* | arm-*-rtems* | arm-*-genode*)\n \t\t\ttarg_emul=armelf\n \t\t\t;;\n-arm*-*-symbianelf*)\ttarg_emul=armsymbian;;\n arm-*-kaos*)\t\ttarg_emul=armelf\n \t\t\t;;\n arm9e-*-elf)\t\ttarg_emul=armelf"
    },
    {
      "sha": "f64316581996da1f0a9db9b5430e21ee48324d34",
      "filename": "ld/emulparams/armsymbian.sh",
      "status": "removed",
      "additions": 0,
      "deletions": 25,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a68fcd7f7da92d47f0f41df15fea30f790ed06c/ld/emulparams/armsymbian.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a68fcd7f7da92d47f0f41df15fea30f790ed06c/ld/emulparams/armsymbian.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emulparams/armsymbian.sh?ref=4a68fcd7f7da92d47f0f41df15fea30f790ed06c",
      "patch": "@@ -1,25 +0,0 @@\n-source_sh ${srcdir}/emulparams/armelf.sh\n-SCRIPT_NAME=\"armbpabi\"\n-GENERATE_COMBRELOC_SCRIPT=1\n-OUTPUT_FORMAT=\"elf32-littlearm-symbian\"\n-BIG_OUTPUT_FORMAT=\"elf32-bigarm-symbian\"\n-LITTLE_OUTPUT_FORMAT=\"$OUTPUT_FORMAT\"\n-TARGET1_IS_REL=1\n-TARGET2_TYPE=abs\n-# On BPABI systems, program headers should not be mapped.\n-EMBEDDED=yes\n-\n-# As for armelf.sh, but add the SymbianOS-specific\n-# .ARM.exidx$${Base,Limit} symbols.\n-OTHER_READONLY_SECTIONS=\"\n-  .ARM.extab ${RELOCATING-0} : { *(.ARM.extab${RELOCATING+* .gnu.linkonce.armextab.*}) }\n-  .ARM.exidx ${RELOCATING-0} :\n-    {\n-      ${RELOCATING+PROVIDE_HIDDEN (.ARM.exidx\\$\\$Base = .);}\n-      ${RELOCATING+PROVIDE_HIDDEN (__exidx_start = .);}\n-      *(.ARM.exidx${RELOCATING+* .gnu.linkonce.armexidx.*})\n-      ${RELOCATING+PROVIDE_HIDDEN (__exidx_end = .);}\n-      ${RELOCATING+PROVIDE_HIDDEN (.ARM.exidx\\$\\$Limit = .);}\n-    }\"\n-\n-MAXPAGESIZE=\"CONSTANT (MAXPAGESIZE)\""
    },
    {
      "sha": "bfe6c5994a1b238af79a425c5487567a97956543",
      "filename": "ld/ld.texi",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/ld/ld.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/ld/ld.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ld.texi?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -7316,7 +7316,7 @@ meanings, and target defaults are as follows:\n @item rel\n @samp{R_ARM_REL32} (arm*-*-elf, arm*-*-eabi)\n @item abs\n-@samp{R_ARM_ABS32} (arm*-*-symbianelf)\n+@samp{R_ARM_ABS32}\n @item got-rel\n @samp{R_ARM_GOT_PREL} (arm*-*-linux, arm*-*-*bsd)\n @end table\n@@ -7358,9 +7358,6 @@ situations. Currently it is used to perform calls via the PLT from Thumb\n code using BLX rather than using BX and a mode-switching stub before\n each PLT entry. This should lead to such calls executing slightly faster.\n \n-This option is enabled implicitly for SymbianOS, so there is no need to\n-specify it if you are using that target.\n-\n @cindex VFP11_DENORM_FIX\n @kindex --vfp11-denorm-fix\n The @samp{--vfp11-denorm-fix} switch enables a link-time workaround for a"
    },
    {
      "sha": "ba9f4279c4c4163854150745f14f736e05832696",
      "filename": "ld/po/BLD-POTFILES.in",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/ld/po/BLD-POTFILES.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/ld/po/BLD-POTFILES.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/po/BLD-POTFILES.in?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -42,7 +42,6 @@ earmelfb_nacl.c\n earmelfb_nbsd.c\n earmnto.c\n earmpe.c\n-earmsymbian.c\n eavr1.c\n eavr2.c\n eavr25.c"
    },
    {
      "sha": "57ce8d3fc158d30be6ab6f67af908cf3343f8f79",
      "filename": "ld/scripttempl/armbpabi.sc",
      "status": "removed",
      "additions": 0,
      "deletions": 417,
      "changes": 417,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a68fcd7f7da92d47f0f41df15fea30f790ed06c/ld/scripttempl/armbpabi.sc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a68fcd7f7da92d47f0f41df15fea30f790ed06c/ld/scripttempl/armbpabi.sc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/scripttempl/armbpabi.sc?ref=4a68fcd7f7da92d47f0f41df15fea30f790ed06c",
      "patch": "@@ -1,417 +0,0 @@\n-# This variant of elf.sc is used for ARM BPABI platforms, like Symbian\n-# OS, where a separate postlinker will operated on the generated\n-# executable or shared object.  See elf.sc for configuration variables\n-# that apply; only BPABI-specific variables will be noted here.\n-#\n-# Copyright (C) 2014-2021 Free Software Foundation, Inc.\n-#\n-# Copying and distribution of this file, with or without modification,\n-# are permitted in any medium without royalty provided the copyright\n-# notice and this notice are preserved.\n-\n-test -z \"$ENTRY\" && ENTRY=_start\n-test -z \"${BIG_OUTPUT_FORMAT}\" && BIG_OUTPUT_FORMAT=${OUTPUT_FORMAT}\n-test -z \"${LITTLE_OUTPUT_FORMAT}\" && LITTLE_OUTPUT_FORMAT=${OUTPUT_FORMAT}\n-if [ -z \"$MACHINE\" ]; then OUTPUT_ARCH=${ARCH}; else OUTPUT_ARCH=${ARCH}:${MACHINE}; fi\n-test -z \"${ELFSIZE}\" && ELFSIZE=32\n-test -z \"${ALIGNMENT}\" && ALIGNMENT=\"${ELFSIZE} / 8\"\n-test \"$LD_FLAG\" = \"N\" && DATA_ADDR=.\n-test -n \"$CREATE_SHLIB$CREATE_PIE\" && test -n \"$SHLIB_DATA_ADDR\" && COMMONPAGESIZE=\"\"\n-test -z \"$CREATE_SHLIB$CREATE_PIE\" && test -n \"$DATA_ADDR\" && COMMONPAGESIZE=\"\"\n-test -n \"$RELRO_NOW\" && unset SEPARATE_GOTPLT\n-DATA_SEGMENT_ALIGN=\"ALIGN(${SEGMENT_SIZE}) + (. & (${MAXPAGESIZE} - 1))\"\n-DATA_SEGMENT_RELRO_END=\"\"\n-DATA_SEGMENT_RELRO_GOTPLT_END=\"\"\n-DATA_SEGMENT_END=\"\"\n-if test -n \"${COMMONPAGESIZE}\"; then\n-  DATA_SEGMENT_ALIGN=\"ALIGN (${SEGMENT_SIZE}) - ((${MAXPAGESIZE} - .) & (${MAXPAGESIZE} - 1)); . = DATA_SEGMENT_ALIGN (${MAXPAGESIZE}, ${COMMONPAGESIZE})\"\n-  DATA_SEGMENT_END=\". = DATA_SEGMENT_END (.);\"\n-  if test -n \"${SEPARATE_GOTPLT}\"; then\n-    DATA_SEGMENT_RELRO_GOTPLT_END=\". = DATA_SEGMENT_RELRO_END (. + ${SEPARATE_GOTPLT});\"\n-  else\n-    DATA_SEGMENT_RELRO_END=\". = DATA_SEGMENT_RELRO_END (.);\"\n-  fi\n-fi\n-INTERP=\".interp       0 : { *(.interp) }\"\n-PLT=\".plt          ${RELOCATING-0} : { *(.plt) }\"\n-RODATA=\".rodata       ${RELOCATING-0} : { *(.rodata${RELOCATING+ .rodata.* .gnu.linkonce.r.*}) }\"\n-DATARELRO=\".data.rel.ro : { *(.data.rel.ro.local) *(.data.rel.ro .data.rel.ro.*) }\"\n-DISCARDED=\"/DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink)  *(.gnu.lto_*) }\"\n-if test -z \"${NO_SMALL_DATA}\"; then\n-  SBSS=\".sbss         ${RELOCATING-0} :\n-  {\n-    ${RELOCATING+PROVIDE (__sbss_start = .);}\n-    ${RELOCATING+PROVIDE (___sbss_start = .);}\n-    ${RELOCATING+*(.dynsbss)}\n-    *(.sbss${RELOCATING+ .sbss.* .gnu.linkonce.sb.*})\n-    ${RELOCATING+*(.scommon)}\n-    ${RELOCATING+PROVIDE (__sbss_end = .);}\n-    ${RELOCATING+PROVIDE (___sbss_end = .);}\n-  }\"\n-  SBSS2=\".sbss2        ${RELOCATING-0} : { *(.sbss2${RELOCATING+ .sbss2.* .gnu.linkonce.sb2.*}) }\"\n-  SDATA=\"/* We want the small data sections together, so single-instruction offsets\n-     can access them all, and initialized data all before uninitialized, so\n-     we can shorten the on-disk segment size.  */\n-  .sdata        ${RELOCATING-0} :\n-  {\n-    ${RELOCATING+${SDATA_START_SYMBOLS}}\n-    *(.sdata${RELOCATING+ .sdata.* .gnu.linkonce.s.*})\n-  }\"\n-  SDATA2=\".sdata2       ${RELOCATING-0} : { *(.sdata2${RELOCATING+ .sdata2.* .gnu.linkonce.s2.*}) }\"\n-  REL_SDATA=\".rel.sdata    ${RELOCATING-0} : { *(.rel.sdata${RELOCATING+ .rel.sdata.* .rel.gnu.linkonce.s.*}) }\n-  .rela.sdata   ${RELOCATING-0} : { *(.rela.sdata${RELOCATING+ .rela.sdata.* .rela.gnu.linkonce.s.*}) }\"\n-  REL_SBSS=\".rel.sbss     ${RELOCATING-0} : { *(.rel.sbss${RELOCATING+ .rel.sbss.* .rel.gnu.linkonce.sb.*}) }\n-  .rela.sbss    ${RELOCATING-0} : { *(.rela.sbss${RELOCATING+ .rela.sbss.* .rela.gnu.linkonce.sb.*}) }\"\n-  REL_SDATA2=\".rel.sdata2   ${RELOCATING-0} : { *(.rel.sdata2${RELOCATING+ .rel.sdata2.* .rel.gnu.linkonce.s2.*}) }\n-  .rela.sdata2  ${RELOCATING-0} : { *(.rela.sdata2${RELOCATING+ .rela.sdata2.* .rela.gnu.linkonce.s2.*}) }\"\n-  REL_SBSS2=\".rel.sbss2    ${RELOCATING-0} : { *(.rel.sbss2${RELOCATING+ .rel.sbss2.* .rel.gnu.linkonce.sb2.*}) }\n-  .rela.sbss2   ${RELOCATING-0} : { *(.rela.sbss2${RELOCATING+ .rela.sbss2.* .rela.gnu.linkonce.sb2.*}) }\"\n-else\n-  NO_SMALL_DATA=\" \"\n-fi\n-test -n \"$SEPARATE_GOTPLT\" && SEPARATE_GOTPLT=\" \"\n-INIT_ARRAY=\".init_array   ${RELOCATING-0} :\n-  {\n-    /* SymbianOS uses this symbol.  */\n-    ${RELOCATING+PROVIDE (SHT\\$\\$INIT_ARRAY\\$\\$Base = .);}\n-    ${RELOCATING+${CREATE_SHLIB-PROVIDE_HIDDEN (__init_array_start = .);}}\n-    KEEP (*(SORT(.init_array.*)))\n-    KEEP (*(.init_array))\n-    ${RELOCATING+${CREATE_SHLIB-PROVIDE_HIDDEN (__init_array_end = .);}}\n-    /* SymbianOS uses this symbol.  */\n-    ${RELOCATING+PROVIDE (SHT\\$\\$INIT_ARRAY\\$\\$Limit = .);}\n-  }\"\n-FINI_ARRAY=\".fini_array   ${RELOCATING-0} :\n-  {\n-    ${RELOCATING+${CREATE_SHLIB-PROVIDE_HIDDEN (__fini_array_start = .);}}\n-    KEEP (*(SORT(.fini_array.*)))\n-    KEEP (*(.fini_array))\n-    ${RELOCATING+${CREATE_SHLIB-PROVIDE_HIDDEN (__fini_array_end = .);}}\n-  }\"\n-CTOR=\".ctors        ${CONSTRUCTING-0} :\n-  {\n-    ${CONSTRUCTING+${CTOR_START}}\n-    /* gcc uses crtbegin.o to find the start of\n-       the constructors, so we make sure it is\n-       first.  Because this is a wildcard, it\n-       doesn't matter if the user does not\n-       actually link against crtbegin.o; the\n-       linker won't look for a file to match a\n-       wildcard.  The wildcard also means that it\n-       doesn't matter which directory crtbegin.o\n-       is in.  */\n-\n-    KEEP (*crtbegin.o(.ctors))\n-    KEEP (*crtbegin?.o(.ctors))\n-\n-    /* We don't want to include the .ctor section from\n-       the crtend.o file until after the sorted ctors.\n-       The .ctor section from the crtend file contains the\n-       end of ctors marker and it must be last */\n-\n-    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o $OTHER_EXCLUDE_FILES) .ctors))\n-    KEEP (*(SORT(.ctors.*)))\n-    KEEP (*(.ctors))\n-    ${CONSTRUCTING+${CTOR_END}}\n-  }\"\n-DTOR=\".dtors        ${CONSTRUCTING-0} :\n-  {\n-    ${CONSTRUCTING+${DTOR_START}}\n-    KEEP (*crtbegin.o(.dtors))\n-    KEEP (*crtbegin?.o(.dtors))\n-    KEEP (*(EXCLUDE_FILE (*crtend.o *crtend?.o $OTHER_EXCLUDE_FILES) .dtors))\n-    KEEP (*(SORT(.dtors.*)))\n-    KEEP (*(.dtors))\n-    ${CONSTRUCTING+${DTOR_END}}\n-  }\"\n-STACK=\"  .stack        ${RELOCATING-0}${RELOCATING+${STACK_ADDR}} :\n-  {\n-    ${RELOCATING+_stack = .;}\n-    *(.stack)\n-  }\"\n-\n-TEXT_START_ADDR=\"SEGMENT_START(\\\"text\\\", ${TEXT_START_ADDR})\"\n-SHLIB_TEXT_START_ADDR=\"SEGMENT_START(\\\"text\\\", ${SHLIB_TEXT_START_ADDR:-0})\"\n-DATA_ADDR=\"SEGMENT_START(\\\"data\\\", ${DATA_ADDR-${DATA_SEGMENT_ALIGN}})\"\n-SHLIB_DATA_ADDR=\"SEGMENT_START(\\\"data\\\", ${SHLIB_DATA_ADDR-${DATA_SEGMENT_ALIGN}})\"\n-\n-# If this is for an embedded system, don't add SIZEOF_HEADERS.\n-if [ -z \"$EMBEDDED\" ]; then\n-   test -z \"${TEXT_BASE_ADDRESS}\" && TEXT_BASE_ADDRESS=\"${TEXT_START_ADDR} + SIZEOF_HEADERS\"\n-   SHLIB_BASE_ADDRESS=\"${SHLIB_TEXT_START_ADDR} + SIZEOF_HEADERS\"\n-else\n-   test -z \"${TEXT_BASE_ADDRESS}\" && TEXT_BASE_ADDRESS=\"${TEXT_START_ADDR}\"\n-   SHLIB_BASE_ADDRESS=\"${SHLIB_TEXT_START_ADDR}\"\n-fi\n-\n-cat <<EOF\n-/* Copyright (C) 2014-2021 Free Software Foundation, Inc.\n-\n-   Copying and distribution of this script, with or without modification,\n-   are permitted in any medium without royalty provided the copyright\n-   notice and this notice are preserved.  */\n-\n-OUTPUT_FORMAT(\"${OUTPUT_FORMAT}\", \"${BIG_OUTPUT_FORMAT}\",\n-\t      \"${LITTLE_OUTPUT_FORMAT}\")\n-OUTPUT_ARCH(${OUTPUT_ARCH})\n-EOF\n-\n-test -n \"${RELOCATING}\" && cat <<EOF\n-ENTRY(${ENTRY})\n-\n-${LIB_SEARCH_DIRS}\n-/* Do we need any of these for elf?\n-   __DYNAMIC = 0; ${STACKZERO+${STACKZERO}} ${SHLIB_PATH+${SHLIB_PATH}}  */\n-${EXECUTABLE_SYMBOLS}\n-${INPUT_FILES}\n-\n-/* ARM's proprietary toolchain generate these symbols to match the start\n-   and end of particular sections of the image.  SymbianOS uses these\n-   symbols.  We provide them for compatibility with ARM's toolchains.\n-   These symbols should be bound locally; each shared object may define\n-   its own version of these symbols.  */\n-\n-VERSION\n-{\n-  /* Give these a dummy version to work around linker lameness.\n-     The name used shouldn't matter as these are all local symbols.  */\n-  __GNU {\n-    local:\n-      Image\\$\\$ER_RO\\$\\$Base;\n-      Image\\$\\$ER_RO\\$\\$Limit;\n-      SHT\\$\\$INIT_ARRAY\\$\\$Base;\n-      SHT\\$\\$INIT_ARRAY\\$\\$Limit;\n-      .ARM.exidx\\$\\$Base;\n-      .ARM.exidx\\$\\$Limit;\n-  };\n-}\n-\n-EOF\n-\n-cat <<EOF\n-SECTIONS\n-{\n-  /* Read-only sections, merged into text segment: */\n-  ${CREATE_SHLIB-${CREATE_PIE-${RELOCATING+PROVIDE (__executable_start = ${TEXT_START_ADDR});}}}\n-\n-  ${CREATE_SHLIB-${CREATE_PIE-${RELOCATING+ . = ${TEXT_BASE_ADDRESS};}}}\n-  ${CREATE_SHLIB+${RELOCATING+. = ${SHLIB_BASE_ADDRESS};}}\n-  ${CREATE_PIE+${RELOCATING+. = ${SHLIB_BASE_ADDRESS};}}\n-\n-  /* Define Image\\$\\$ER_RO\\$\\$Base.  */\n-  ${RELOCATING+PROVIDE (Image\\$\\$ER_RO\\$\\$Base = .);}\n-\n-  ${INITIAL_READONLY_SECTIONS}\n-\n-EOF\n-cat <<EOF\n-  .init         ${RELOCATING-0} :\n-  {\n-    ${RELOCATING+${INIT_START}}\n-    KEEP (*(SORT_NONE(.init)))\n-    ${RELOCATING+${INIT_END}}\n-  } =${NOP-0}\n-  .text         ${RELOCATING-0} :\n-  {\n-    ${RELOCATING+${TEXT_START_SYMBOLS}}\n-    *(.text .stub${RELOCATING+ .text.* .gnu.linkonce.t.*})\n-    /* .gnu.warning sections are handled specially by elf.em.  */\n-    *(.gnu.warning)\n-    ${RELOCATING+${OTHER_TEXT_SECTIONS}}\n-  } =${NOP-0}\n-  .fini         ${RELOCATING-0} :\n-  {\n-    ${RELOCATING+${FINI_START}}\n-    KEEP (*(SORT_NONE(.fini)))\n-    ${RELOCATING+${FINI_END}}\n-  } =${NOP-0}\n-  /* The SymbianOS kernel requires that the PLT go at the end of the\n-     text section.  */\n-  ${DATA_PLT-${BSS_PLT-${PLT}}}\n-  ${RELOCATING+PROVIDE (__etext = .);}\n-  ${RELOCATING+PROVIDE (_etext = .);}\n-  ${RELOCATING+PROVIDE (etext = .);}\n-\n-  /* Define Image\\$\\$ER_RO\\$\\$Limit.  */\n-  ${RELOCATING+PROVIDE (Image\\$\\$ER_RO\\$\\$Limit = .);}\n-\n-  ${WRITABLE_RODATA-${RODATA}}\n-  .rodata1      ${RELOCATING-0} : { *(.rodata1) }\n-  ${CREATE_SHLIB-${SDATA2}}\n-  ${CREATE_SHLIB-${SBSS2}}\n-\n-  /* On SymbianOS, put  .init_array and friends in the read-only\n-     segment; there is no runtime relocation applied to these\n-     arrays.  */\n-\n-  .preinit_array   ${RELOCATING-0} :\n-  {\n-    ${RELOCATING+${CREATE_SHLIB-PROVIDE_HIDDEN (__preinit_array_start = .);}}\n-    KEEP (*(.preinit_array))\n-    ${RELOCATING+${CREATE_SHLIB-PROVIDE_HIDDEN (__preinit_array_end = .);}}\n-  }\n-  ${RELOCATING+${INIT_ARRAY}}\n-  ${RELOCATING+${FINI_ARRAY}}\n-\n-  ${OTHER_READONLY_SECTIONS}\n-  .eh_frame_hdr ${RELOCATING-0} : { *(.eh_frame_hdr) }\n-  .eh_frame     ${RELOCATING-0} : ONLY_IF_RO { KEEP (*(.eh_frame)) }\n-  .gcc_except_table ${RELOCATING-0} : ONLY_IF_RO { KEEP (*(.gcc_except_table${RELOCATING+ .gcc_except_table.*})) }\n-\n-  /* Adjust the address for the data segment.  We want to adjust up to\n-     the same address within the page on the next page up.  */\n-  ${CREATE_SHLIB-${CREATE_PIE-${RELOCATING+. = ${DATA_ADDR};}}}\n-  ${CREATE_SHLIB+${RELOCATING+. = ${SHLIB_DATA_ADDR};}}\n-  ${CREATE_PIE+${RELOCATING+. = ${SHLIB_DATA_ADDR};}}\n-\n-  /* Exception handling  */\n-  .eh_frame     ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.eh_frame)) }\n-  .gcc_except_table ${RELOCATING-0} : ONLY_IF_RW { KEEP (*(.gcc_except_table${RELOCATING+ .gcc_except_table.*})) }\n-\n-  /* Thread Local Storage sections  */\n-  .tdata\t${RELOCATING-0} : { *(.tdata${RELOCATING+ .tdata.* .gnu.linkonce.td.*}) }\n-  .tbss\t\t${RELOCATING-0} : { *(.tbss${RELOCATING+ .tbss.* .gnu.linkonce.tb.*})${RELOCATING+ *(.tcommon)} }\n-\n-  ${RELOCATING+${CTOR}}\n-  ${RELOCATING+${DTOR}}\n-  .jcr          ${RELOCATING-0} : { KEEP (*(.jcr)) }\n-\n-  ${RELOCATING+${DATARELRO}}\n-  ${OTHER_RELRO_SECTIONS}\n-  ${RELOCATING+${DATA_SEGMENT_RELRO_END}}\n-\n-  ${DATA_PLT+${PLT_BEFORE_GOT-${PLT}}}\n-\n-  .data         ${RELOCATING-0} :\n-  {\n-    ${RELOCATING+${DATA_START_SYMBOLS}}\n-    *(.data${RELOCATING+ .data.* .gnu.linkonce.d.*})\n-    ${CONSTRUCTING+SORT(CONSTRUCTORS)}\n-  }\n-  .data1        ${RELOCATING-0} : { *(.data1) }\n-  ${WRITABLE_RODATA+${RODATA}}\n-  ${OTHER_READWRITE_SECTIONS}\n-  ${DATA_PLT+${PLT_BEFORE_GOT+${PLT}}}\n-  ${CREATE_SHLIB+${SDATA2}}\n-  ${CREATE_SHLIB+${SBSS2}}\n-  ${SDATA}\n-  ${OTHER_SDATA_SECTIONS}\n-  ${RELOCATING+_edata = .;}\n-  ${RELOCATING+PROVIDE (edata = .);}\n-  ${RELOCATING+. = DEFINED(__bss_segment_start) ? __bss_segment_start : .;}\n-  ${RELOCATING+__bss_start = .;}\n-  ${RELOCATING+${OTHER_BSS_SYMBOLS}}\n-  ${SBSS}\n-  ${BSS_PLT+${PLT}}\n-  .bss          ${RELOCATING-0} :\n-  {\n-   ${RELOCATING+*(.dynbss)}\n-   *(.bss${RELOCATING+ .bss.* .gnu.linkonce.b.*})\n-   ${RELOCATING+*(COMMON)\n-   /* Align here to ensure that the .bss section occupies space up to\n-      _end.  Align after .bss to ensure correct alignment even if the\n-      .bss section disappears because there are no input sections.  */\n-   . = ALIGN(${ALIGNMENT});}\n-  }\n-  ${RELOCATING+${OTHER_BSS_END_SYMBOLS}}\n-  ${RELOCATING+. = ALIGN(${ALIGNMENT});}\n-  ${RELOCATING+${OTHER_END_SYMBOLS}}\n-  ${RELOCATING+_end = .;}\n-  ${RELOCATING+PROVIDE (end = .);}\n-  ${RELOCATING+${DATA_SEGMENT_END}}\n-  ${STACK_ADDR+${STACK}}\n-\n-  /* These sections are not mapped under the BPABI.  */\n-  .dynamic      0 : { *(.dynamic) }\n-  .hash         0 : { *(.hash) }\n-  .dynsym       0 : { *(.dynsym) }\n-  .dynstr       0 : { *(.dynstr) }\n-  .gnu.version  0 : { *(.gnu.version) }\n-  .gnu.version_d 0: { *(.gnu.version_d) }\n-  .gnu.version_r 0: { *(.gnu.version_r) }\n-  ${CREATE_SHLIB-${INTERP}}\n-\n-  /* Stabs debugging sections.  */\n-  .stab          0 : { *(.stab) }\n-  .stabstr       0 : { *(.stabstr) }\n-  .stab.excl     0 : { *(.stab.excl) }\n-  .stab.exclstr  0 : { *(.stab.exclstr) }\n-  .stab.index    0 : { *(.stab.index) }\n-  .stab.indexstr 0 : { *(.stab.indexstr) }\n-\n-  .comment       0 : { *(.comment) }\n-EOF\n-\n-. $srcdir/scripttempl/DWARF.sc\n-\n-cat <<EOF\n-  ${OTHER_SECTIONS}\n-  ${RELOCATING+${OTHER_SYMBOLS}}\n-  ${RELOCATING+${DISCARDED}}\n-EOF\n-\n-# These relocations sections are part of the read-only segment in SVR4\n-# executables, but are not mapped in BPABI executables.\n-if [ \"x$COMBRELOC\" = x ]; then\n-  COMBRELOCCAT=cat\n-else\n-  COMBRELOCCAT=\"cat > $COMBRELOC\"\n-fi\n-eval $COMBRELOCCAT <<EOF\n-  .rel.init     0 : { *(.rel.init) }\n-  .rela.init    0 : { *(.rela.init) }\n-  .rel.text     0 : { *(.rel.text${RELOCATING+ .rel.text.* .rel.gnu.linkonce.t.*}) }\n-  .rela.text    0 : { *(.rela.text${RELOCATING+ .rela.text.* .rela.gnu.linkonce.t.*}) }\n-  .rel.fini     0 : { *(.rel.fini) }\n-  .rela.fini    0 : { *(.rela.fini) }\n-  .rel.rodata   0 : { *(.rel.rodata${RELOCATING+ .rel.rodata.* .rel.gnu.linkonce.r.*}) }\n-  .rela.rodata  0 : { *(.rela.rodata${RELOCATING+ .rela.rodata.* .rela.gnu.linkonce.r.*}) }\n-  ${OTHER_READONLY_RELOC_SECTIONS}\n-  .rel.data.rel.ro 0 : { *(.rel.data.rel.ro${RELOCATING+ .rel.data.rel.ro.*}) }\n-  .rela.data.rel.ro 0 : { *(.rela.data.rel.ro${RELOCATING+ .rela.data.rel.ro.*}) }\n-  .rel.data     0 : { *(.rel.data${RELOCATING+ .rel.data.* .rel.gnu.linkonce.d.*}) }\n-  .rela.data    0 : { *(.rela.data${RELOCATING+ .rela.data.* .rela.gnu.linkonce.d.*}) }\n-  .rel.tdata\t0 : { *(.rel.tdata${RELOCATING+ .rel.tdata.* .rel.gnu.linkonce.td.*}) }\n-  .rela.tdata\t0 : { *(.rela.tdata${RELOCATING+ .rela.tdata.* .rela.gnu.linkonce.td.*}) }\n-  .rel.tbss\t0 : { *(.rel.tbss${RELOCATING+ .rel.tbss.* .rel.gnu.linkonce.tb.*}) }\n-  .rela.tbss\t0 : { *(.rela.tbss${RELOCATING+ .rela.tbss.* .rela.gnu.linkonce.tb.*}) }\n-  .rel.ctors    0 : { *(.rel.ctors) }\n-  .rela.ctors   0 : { *(.rela.ctors) }\n-  .rel.dtors    0 : { *(.rel.dtors) }\n-  .rela.dtors   0 : { *(.rela.dtors) }\n-  ${REL_SDATA}\n-  ${REL_SBSS}\n-  ${REL_SDATA2}\n-  ${REL_SBSS2}\n-  .rel.bss      0 : { *(.rel.bss${RELOCATING+ .rel.bss.* .rel.gnu.linkonce.b.*}) }\n-  .rela.bss     0 : { *(.rela.bss${RELOCATING+ .rela.bss.* .rela.gnu.linkonce.b.*}) }\n-  .rel.init_array  0 : { *(.rel.init_array) }\n-  .rela.init_array 0 : { *(.rela.init_array) }\n-  .rel.fini_array  0 : { *(.rel.fini_array) }\n-  .rela.fini_array 0 : { *(.rela.fini_array) }\n-EOF\n-if [ -n \"$COMBRELOC\" ]; then\n-cat <<EOF\n-  .rel.dyn      0 :\n-    {\n-EOF\n-sed -e '/^[\t ]*[{}][\t ]*$/d;/:[\t ]*$/d;/\\.rela\\./d;s/^.*: { *\\(.*\\)}$/      \\1/' $COMBRELOC\n-cat <<EOF\n-    }\n-  .rela.dyn     0 :\n-    {\n-EOF\n-sed -e '/^[\t ]*[{}][\t ]*$/d;/:[\t ]*$/d;/\\.rel\\./d;s/^.*: { *\\(.*\\)}/      \\1/' $COMBRELOC\n-cat <<EOF\n-    }\n-EOF\n-fi\n-cat <<EOF\n-  .rel.plt      0 : { *(.rel.plt) }\n-  .rela.plt     0 : { *(.rela.plt) }\n-  ${OTHER_PLT_RELOC_SECTIONS}\n-  .rel.other    0 : { *(.rel.*) }\n-  .rela.other   0 : { *(.rela.*) }\n-  .reli.other   0 : { *(.reli.*) }\n-}\n-EOF"
    },
    {
      "sha": "ea1d1e1345a849bfb0cfc13d5930aa6dda1f13f1",
      "filename": "ld/testsuite/ld-arm/arm-elf.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a57d17732eba20c7ebeaabd023e2f0816fb095f6/ld/testsuite/ld-arm/arm-elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a57d17732eba20c7ebeaabd023e2f0816fb095f6/ld/testsuite/ld-arm/arm-elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/arm-elf.exp?ref=a57d17732eba20c7ebeaabd023e2f0816fb095f6",
      "patch": "@@ -53,10 +53,6 @@ if {[istarget \"arm-*-vxworks\"]} {\n     run_dump_test \"emit-relocs1-vxworks\"\n }\n \n-if { [istarget \"arm*-*-symbianelf*\"] } {\n-    run_dump_test \"symbian-seg1\"\n-}\n-\n # Exclude non-ARM-ELF targets.\n \n if { ![is_elf_format] || ![istarget \"arm*-*-*\"] } {"
    },
    {
      "sha": "21d8a009156ba84954c68845684238ebae2f71e4",
      "filename": "ld/testsuite/ld-arm/symbian-seg1.d",
      "status": "removed",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a68fcd7f7da92d47f0f41df15fea30f790ed06c/ld/testsuite/ld-arm/symbian-seg1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a68fcd7f7da92d47f0f41df15fea30f790ed06c/ld/testsuite/ld-arm/symbian-seg1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/symbian-seg1.d?ref=4a68fcd7f7da92d47f0f41df15fea30f790ed06c",
      "patch": "@@ -1,8 +0,0 @@\n-#source: symbian-seg1.s\n-#ld: -Ttext 0x10000 -Tdata 0x400000\n-#objdump: -dR\n-#...\n- +10000:\t00400000 \t.word\t0x00400000\n-\t+10000: R_ARM_RELATIVE\t.data\n- +10004:\t00010008 \t.word\t0x00010008\n-\t+10004: R_ARM_RELATIVE\t.text"
    },
    {
      "sha": "8f893a251b0977daefddd7afdd6f74bba8030de2",
      "filename": "ld/testsuite/ld-arm/symbian-seg1.s",
      "status": "removed",
      "additions": 0,
      "deletions": 13,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a68fcd7f7da92d47f0f41df15fea30f790ed06c/ld/testsuite/ld-arm/symbian-seg1.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a68fcd7f7da92d47f0f41df15fea30f790ed06c/ld/testsuite/ld-arm/symbian-seg1.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/symbian-seg1.s?ref=4a68fcd7f7da92d47f0f41df15fea30f790ed06c",
      "patch": "@@ -1,13 +0,0 @@\n-        .text\n-\t.globl\t_start\n-_start:\n-        .word   datavar\n-        .word   rodatavar\n-\n-        .section \".rodata\", \"a\"\n-rodatavar:\n-        .word 0\n-\n-        .section \".data\", \"aw\"\n-datavar:\n-        .word 0"
    }
  ]
}