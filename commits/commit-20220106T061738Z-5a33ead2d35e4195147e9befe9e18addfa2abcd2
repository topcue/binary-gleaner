{
  "sha": "5a33ead2d35e4195147e9befe9e18addfa2abcd2",
  "node_id": "C_kwDOANOeidoAKDVhMzNlYWQyZDM1ZTQxOTUxNDdlOWJlZmU5ZTE4YWRkZmEyYWJjZDI",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-12-06T07:10:27Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2022-01-06T06:17:38Z"
    },
    "message": "sim: riscv: migrate to standard uintXX_t types\n\nMove off the sim-specific unsignedXX types and to the standard uintXX_t\ntypes that C11 provides.",
    "tree": {
      "sha": "64a11bcae5f7f5033c4fc4329d37edee40bbdb0b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/64a11bcae5f7f5033c4fc4329d37edee40bbdb0b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5a33ead2d35e4195147e9befe9e18addfa2abcd2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5a33ead2d35e4195147e9befe9e18addfa2abcd2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5a33ead2d35e4195147e9befe9e18addfa2abcd2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5a33ead2d35e4195147e9befe9e18addfa2abcd2/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4650ee9378306c288e7f2b72070961e5eff4b639",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4650ee9378306c288e7f2b72070961e5eff4b639",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4650ee9378306c288e7f2b72070961e5eff4b639"
    }
  ],
  "stats": {
    "total": 56,
    "additions": 28,
    "deletions": 28
  },
  "files": [
    {
      "sha": "62f475671c9d3b286367a358b82ed14d44ca6522",
      "filename": "sim/riscv/sim-main.c",
      "status": "modified",
      "additions": 28,
      "deletions": 28,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a33ead2d35e4195147e9befe9e18addfa2abcd2/sim/riscv/sim-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a33ead2d35e4195147e9befe9e18addfa2abcd2/sim/riscv/sim-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/riscv/sim-main.c?ref=5a33ead2d35e4195147e9befe9e18addfa2abcd2",
      "patch": "@@ -131,14 +131,14 @@ store_csr (SIM_CPU *cpu, const char *name, int csr, unsigned_word *reg,\n static inline unsigned_word\n ashiftrt (unsigned_word val, unsigned_word shift)\n {\n-  unsigned32 sign = (val & 0x80000000) ? ~(0xfffffffful >> shift) : 0;\n+  uint32_t sign = (val & 0x80000000) ? ~(0xfffffffful >> shift) : 0;\n   return (val >> shift) | sign;\n }\n \n static inline unsigned_word\n ashiftrt64 (unsigned_word val, unsigned_word shift)\n {\n-  unsigned64 sign =\n+  uint64_t sign =\n     (val & 0x8000000000000000ull) ? ~(0xffffffffffffffffull >> shift) : 0;\n   return (val >> shift) | sign;\n }\n@@ -155,7 +155,7 @@ execute_i (SIM_CPU *cpu, unsigned_word iw, const struct riscv_opcode *op)\n   const char *rs2_name = riscv_gpr_names_abi[rs2];\n   unsigned int csr = (iw >> OP_SH_CSR) & OP_MASK_CSR;\n   unsigned_word i_imm = EXTRACT_ITYPE_IMM (iw);\n-  unsigned_word u_imm = EXTRACT_UTYPE_IMM ((unsigned64) iw);\n+  unsigned_word u_imm = EXTRACT_UTYPE_IMM ((uint64_t) iw);\n   unsigned_word s_imm = EXTRACT_STYPE_IMM (iw);\n   unsigned_word sb_imm = EXTRACT_BTYPE_IMM (iw);\n   unsigned_word shamt_imm = ((iw >> OP_SH_SHAMT) & OP_MASK_SHAMT);\n@@ -252,7 +252,7 @@ execute_i (SIM_CPU *cpu, unsigned_word iw, const struct riscv_opcode *op)\n \t\t  rd_name, rs1_name, rs2_name, rd_name, rs1_name, rs2_name);\n       RISCV_ASSERT_RV64 (cpu, \"insn: %s\", op->name);\n       store_rd (cpu, rd, EXTEND32 (\n-\t(unsigned32) cpu->regs[rs1] << (cpu->regs[rs2] & 0x1f)));\n+\t(uint32_t) cpu->regs[rs1] << (cpu->regs[rs2] & 0x1f)));\n       break;\n     case MATCH_SLLI:\n       TRACE_INSN (cpu, \"slli %s, %s, %\" PRIiTW \";  // %s = %s << %#\" PRIxTW,\n@@ -265,7 +265,7 @@ execute_i (SIM_CPU *cpu, unsigned_word iw, const struct riscv_opcode *op)\n       TRACE_INSN (cpu, \"slliw %s, %s, %\" PRIiTW \";  // %s = %s << %#\" PRIxTW,\n \t\t  rd_name, rs1_name, shamt_imm, rd_name, rs1_name, shamt_imm);\n       RISCV_ASSERT_RV64 (cpu, \"insn: %s\", op->name);\n-      store_rd (cpu, rd, EXTEND32 ((unsigned32) cpu->regs[rs1] << shamt_imm));\n+      store_rd (cpu, rd, EXTEND32 ((uint32_t) cpu->regs[rs1] << shamt_imm));\n       break;\n     case MATCH_SRL:\n       TRACE_INSN (cpu, \"srl %s, %s, %s;  // %s = %s >> %s\",\n@@ -278,7 +278,7 @@ execute_i (SIM_CPU *cpu, unsigned_word iw, const struct riscv_opcode *op)\n \t\t  rd_name, rs1_name, rs2_name, rd_name, rs1_name, rs2_name);\n       RISCV_ASSERT_RV64 (cpu, \"insn: %s\", op->name);\n       store_rd (cpu, rd, EXTEND32 (\n-\t(unsigned32) cpu->regs[rs1] >> (cpu->regs[rs2] & 0x1f)));\n+\t(uint32_t) cpu->regs[rs1] >> (cpu->regs[rs2] & 0x1f)));\n       break;\n     case MATCH_SRLI:\n       TRACE_INSN (cpu, \"srli %s, %s, %\" PRIiTW \";  // %s = %s >> %#\" PRIxTW,\n@@ -291,7 +291,7 @@ execute_i (SIM_CPU *cpu, unsigned_word iw, const struct riscv_opcode *op)\n       TRACE_INSN (cpu, \"srliw %s, %s, %\" PRIiTW \";  // %s = %s >> %#\" PRIxTW,\n \t\t  rd_name, rs1_name, shamt_imm, rd_name, rs1_name, shamt_imm);\n       RISCV_ASSERT_RV64 (cpu, \"insn: %s\", op->name);\n-      store_rd (cpu, rd, EXTEND32 ((unsigned32) cpu->regs[rs1] >> shamt_imm));\n+      store_rd (cpu, rd, EXTEND32 ((uint32_t) cpu->regs[rs1] >> shamt_imm));\n       break;\n     case MATCH_SRA:\n       TRACE_INSN (cpu, \"sra %s, %s, %s;  // %s = %s >>> %s\",\n@@ -307,7 +307,7 @@ execute_i (SIM_CPU *cpu, unsigned_word iw, const struct riscv_opcode *op)\n \t\t  rd_name, rs1_name, rs2_name, rd_name, rs1_name, rs2_name);\n       RISCV_ASSERT_RV64 (cpu, \"insn: %s\", op->name);\n       store_rd (cpu, rd, EXTEND32 (\n-\tashiftrt ((signed32) cpu->regs[rs1], cpu->regs[rs2] & 0x1f)));\n+\tashiftrt ((int32_t) cpu->regs[rs1], cpu->regs[rs2] & 0x1f)));\n       break;\n     case MATCH_SRAI:\n       TRACE_INSN (cpu, \"srai %s, %s, %\" PRIiTW \";  // %s = %s >>> %#\" PRIxTW,\n@@ -327,7 +327,7 @@ execute_i (SIM_CPU *cpu, unsigned_word iw, const struct riscv_opcode *op)\n \t\t  rd_name, rs1_name, shamt_imm, rd_name, rs1_name, shamt_imm);\n       RISCV_ASSERT_RV64 (cpu, \"insn: %s\", op->name);\n       store_rd (cpu, rd, EXTEND32 (\n-\tashiftrt ((signed32) cpu->regs[rs1], shamt_imm)));\n+\tashiftrt ((int32_t) cpu->regs[rs1], shamt_imm)));\n       break;\n     case MATCH_SLT:\n       TRACE_INSN (cpu, \"slt\");\n@@ -600,8 +600,8 @@ execute_i (SIM_CPU *cpu, unsigned_word iw, const struct riscv_opcode *op)\n   return pc;\n }\n \n-static unsigned64\n-mulhu (unsigned64 a, unsigned64 b)\n+static uint64_t\n+mulhu (uint64_t a, uint64_t b)\n {\n #ifdef HAVE___INT128\n   return ((__int128)a * b) >> 64;\n@@ -626,16 +626,16 @@ mulhu (unsigned64 a, unsigned64 b)\n #endif\n }\n \n-static unsigned64\n-mulh (signed64 a, signed64 b)\n+static uint64_t\n+mulh (int64_t a, int64_t b)\n {\n   int negate = (a < 0) != (b < 0);\n   uint64_t res = mulhu (a < 0 ? -a : a, b < 0 ? -b : b);\n   return negate ? ~res + (a * b == 0) : res;\n }\n \n-static unsigned64\n-mulhsu (signed64 a, unsigned64 b)\n+static uint64_t\n+mulhsu (int64_t a, uint64_t b)\n {\n   int negate = a < 0;\n   uint64_t res = mulhu (a < 0 ? -a : a, b);\n@@ -695,8 +695,8 @@ execute_m (SIM_CPU *cpu, unsigned_word iw, const struct riscv_opcode *op)\n       TRACE_INSN (cpu, \"divuw %s, %s, %s;  // %s = %s / %s\",\n \t\t  rd_name, rs1_name, rs2_name, rd_name, rs1_name, rs2_name);\n       RISCV_ASSERT_RV64 (cpu, \"insn: %s\", op->name);\n-      if ((unsigned32) cpu->regs[rs2])\n-\ttmp = (unsigned32) cpu->regs[rs1] / (unsigned32) cpu->regs[rs2];\n+      if ((uint32_t) cpu->regs[rs2])\n+\ttmp = (uint32_t) cpu->regs[rs1] / (uint32_t) cpu->regs[rs2];\n       else\n \ttmp = -1;\n       store_rd (cpu, rd, EXTEND32 (tmp));\n@@ -710,33 +710,33 @@ execute_m (SIM_CPU *cpu, unsigned_word iw, const struct riscv_opcode *op)\n       TRACE_INSN (cpu, \"mulw %s, %s, %s;  // %s = %s * %s\",\n \t\t  rd_name, rs1_name, rs2_name, rd_name, rs1_name, rs2_name);\n       RISCV_ASSERT_RV64 (cpu, \"insn: %s\", op->name);\n-      store_rd (cpu, rd, EXTEND32 ((signed32) cpu->regs[rs1]\n-\t\t\t\t   * (signed32) cpu->regs[rs2]));\n+      store_rd (cpu, rd, EXTEND32 ((int32_t) cpu->regs[rs1]\n+\t\t\t\t   * (int32_t) cpu->regs[rs2]));\n       break;\n     case MATCH_MULH:\n       TRACE_INSN (cpu, \"mulh %s, %s, %s;  // %s = %s * %s\",\n \t\t  rd_name, rs1_name, rs2_name, rd_name, rs1_name, rs2_name);\n       if (RISCV_XLEN (cpu) == 32)\n-\tstore_rd (cpu, rd, ((signed64)(signed_word) cpu->regs[rs1]\n-\t\t\t    * (signed64)(signed_word) cpu->regs[rs2]) >> 32);\n+\tstore_rd (cpu, rd, ((int64_t)(signed_word) cpu->regs[rs1]\n+\t\t\t    * (int64_t)(signed_word) cpu->regs[rs2]) >> 32);\n       else\n \tstore_rd (cpu, rd, mulh (cpu->regs[rs1], cpu->regs[rs2]));\n       break;\n     case MATCH_MULHU:\n       TRACE_INSN (cpu, \"mulhu %s, %s, %s;  // %s = %s * %s\",\n \t\t  rd_name, rs1_name, rs2_name, rd_name, rs1_name, rs2_name);\n       if (RISCV_XLEN (cpu) == 32)\n-\tstore_rd (cpu, rd, ((unsigned64)cpu->regs[rs1]\n-\t\t\t    * (unsigned64)cpu->regs[rs2]) >> 32);\n+\tstore_rd (cpu, rd, ((uint64_t)cpu->regs[rs1]\n+\t\t\t    * (uint64_t)cpu->regs[rs2]) >> 32);\n       else\n \tstore_rd (cpu, rd, mulhu (cpu->regs[rs1], cpu->regs[rs2]));\n       break;\n     case MATCH_MULHSU:\n       TRACE_INSN (cpu, \"mulhsu %s, %s, %s;  // %s = %s * %s\",\n \t\t  rd_name, rs1_name, rs2_name, rd_name, rs1_name, rs2_name);\n       if (RISCV_XLEN (cpu) == 32)\n-\tstore_rd (cpu, rd, ((signed64)(signed_word) cpu->regs[rs1]\n-\t\t\t    * (unsigned64)cpu->regs[rs2]) >> 32);\n+\tstore_rd (cpu, rd, ((int64_t)(signed_word) cpu->regs[rs1]\n+\t\t\t    * (uint64_t)cpu->regs[rs2]) >> 32);\n       else\n \tstore_rd (cpu, rd, mulhsu (cpu->regs[rs1], cpu->regs[rs2]));\n       break;\n@@ -775,8 +775,8 @@ execute_m (SIM_CPU *cpu, unsigned_word iw, const struct riscv_opcode *op)\n       TRACE_INSN (cpu, \"remuw %s, %s, %s;  // %s = %s %% %s\",\n \t\t  rd_name, rs1_name, rs2_name, rd_name, rs1_name, rs2_name);\n       RISCV_ASSERT_RV64 (cpu, \"insn: %s\", op->name);\n-      if ((unsigned32) cpu->regs[rs2])\n-\ttmp = (unsigned32) cpu->regs[rs1] % (unsigned32) cpu->regs[rs2];\n+      if ((uint32_t) cpu->regs[rs2])\n+\ttmp = (uint32_t) cpu->regs[rs1] % (uint32_t) cpu->regs[rs2];\n       else\n \ttmp = cpu->regs[rs1];\n       store_rd (cpu, rd, EXTEND32 (tmp));\n@@ -1113,7 +1113,7 @@ initialize_cpu (SIM_DESC sd, SIM_CPU *cpu, int mhartid)\n   cpu->csr.misa = 0;\n   /* RV32 sets this field to 0, and we don't really support RV128 yet.  */\n   if (RISCV_XLEN (cpu) == 64)\n-    cpu->csr.misa |= (unsigned64)2 << 62;\n+    cpu->csr.misa |= (uint64_t)2 << 62;\n \n   /* Skip the leading \"rv\" prefix and the two numbers.  */\n   extensions = MODEL_NAME (CPU_MODEL (cpu)) + 4;"
    }
  ]
}