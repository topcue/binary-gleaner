{
  "sha": "96e2dbda089775359b130e16a337c169d67abc6b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTZlMmRiZGEwODk3NzUzNTliMTMwZTE2YTMzN2MxNjlkNjdhYmM2Yg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-11-27T00:21:27Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-11-27T01:28:17Z"
    },
    "message": "Correct R_SH_IND12W handling\n\nUsing bfd_vma for insn is to avoid having to worry about sign\npropagation in expressions involving insn and sym_value when bfd_vma\nis not the same as unsigned long.\n\n\t* elf32-sh.c (sh_reloc): Use a bfd_vma insn.\n\t(sh_reloc <R_SH_IND12W>): Divide calculated relocation value\n\tby two before applying to insn.  Correct overflow test.\n\t* coff-sh.c (sh_reloc): Likewise.",
    "tree": {
      "sha": "bf6bd5d7b9411b4a1e58d7f232ec0ebc866348c0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bf6bd5d7b9411b4a1e58d7f232ec0ebc866348c0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/96e2dbda089775359b130e16a337c169d67abc6b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96e2dbda089775359b130e16a337c169d67abc6b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/96e2dbda089775359b130e16a337c169d67abc6b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96e2dbda089775359b130e16a337c169d67abc6b/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "855bae2c96421af06af9c77ed9b94b3dea5ae016",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/855bae2c96421af06af9c77ed9b94b3dea5ae016",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/855bae2c96421af06af9c77ed9b94b3dea5ae016"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 20,
    "deletions": 17
  },
  "files": [
    {
      "sha": "3ef8515e2220c7be584b11d29ace9ba27ac12421",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96e2dbda089775359b130e16a337c169d67abc6b/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96e2dbda089775359b130e16a337c169d67abc6b/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=96e2dbda089775359b130e16a337c169d67abc6b",
      "patch": "@@ -1,3 +1,10 @@\n+2019-11-27  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf32-sh.c (sh_reloc): Use a bfd_vma insn.\n+\t(sh_reloc <R_SH_IND12W>): Divide calculated relocation value\n+\tby two before applying to insn.  Correct overflow test.\n+\t* coff-sh.c (sh_reloc): Likewise.\n+\n 2019-11-26  Nick Clifton  <nickc@redhat.com>\n \n \t* elf32-sh.c (sh_elf_reloc): Use a signed_vma when checking for a"
    },
    {
      "sha": "e1bfaf0a043defcda59e8682c51499b485e7d4de",
      "filename": "bfd/coff-sh.c",
      "status": "modified",
      "additions": 7,
      "deletions": 9,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96e2dbda089775359b130e16a337c169d67abc6b/bfd/coff-sh.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96e2dbda089775359b130e16a337c169d67abc6b/bfd/coff-sh.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-sh.c?ref=96e2dbda089775359b130e16a337c169d67abc6b",
      "patch": "@@ -567,7 +567,7 @@ sh_reloc (bfd *      abfd,\n \t  bfd *      output_bfd,\n \t  char **    error_message ATTRIBUTE_UNUSED)\n {\n-  unsigned long insn;\n+  bfd_vma insn;\n   bfd_vma sym_value;\n   unsigned short r_type;\n   bfd_vma addr = reloc_entry->address;\n@@ -610,14 +610,14 @@ sh_reloc (bfd *      abfd,\n #endif\n       insn = bfd_get_32 (abfd, hit_data);\n       insn += sym_value + reloc_entry->addend;\n-      bfd_put_32 (abfd, (bfd_vma) insn, hit_data);\n+      bfd_put_32 (abfd, insn, hit_data);\n       break;\n #ifdef COFF_WITH_PE\n     case R_SH_IMAGEBASE:\n       insn = bfd_get_32 (abfd, hit_data);\n       insn += sym_value + reloc_entry->addend;\n       insn -= pe_data (input_section->output_section->owner)->pe_opthdr.ImageBase;\n-      bfd_put_32 (abfd, (bfd_vma) insn, hit_data);\n+      bfd_put_32 (abfd, insn, hit_data);\n       break;\n #endif\n     case R_SH_PCDISP:\n@@ -627,12 +627,10 @@ sh_reloc (bfd *      abfd,\n \t\t    + input_section->output_offset\n \t\t    + addr\n \t\t    + 4);\n-      sym_value += (insn & 0xfff) << 1;\n-      if (insn & 0x800)\n-\tsym_value -= 0x1000;\n-      insn = (insn & 0xf000) | (sym_value & 0xfff);\n-      bfd_put_16 (abfd, (bfd_vma) insn, hit_data);\n-      if ((bfd_signed_vma) sym_value < -0x1000 || sym_value >= 0x1000)\n+      sym_value += (((insn & 0xfff) ^ 0x800) - 0x800) << 1;\n+      insn = (insn & 0xf000) | ((sym_value >> 1) & 0xfff);\n+      bfd_put_16 (abfd, insn, hit_data);\n+      if (sym_value + 0x1000 >= 0x2000 || (sym_value & 1) != 0)\n \treturn bfd_reloc_overflow;\n       break;\n     default:"
    },
    {
      "sha": "be4256c585c1ffa2d9911d34b0ca93dc72441ff6",
      "filename": "bfd/elf32-sh.c",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96e2dbda089775359b130e16a337c169d67abc6b/bfd/elf32-sh.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96e2dbda089775359b130e16a337c169d67abc6b/bfd/elf32-sh.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-sh.c?ref=96e2dbda089775359b130e16a337c169d67abc6b",
      "patch": "@@ -232,7 +232,7 @@ sh_elf_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol_in,\n \t      void *data, asection *input_section, bfd *output_bfd,\n \t      char **error_message ATTRIBUTE_UNUSED)\n {\n-  unsigned long insn;\n+  bfd_vma insn;\n   bfd_vma sym_value;\n   enum elf_sh_reloc_type r_type;\n   bfd_vma addr = reloc_entry->address;\n@@ -274,7 +274,7 @@ sh_elf_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol_in,\n     case R_SH_DIR32:\n       insn = bfd_get_32 (abfd, hit_data);\n       insn += sym_value + reloc_entry->addend;\n-      bfd_put_32 (abfd, (bfd_vma) insn, hit_data);\n+      bfd_put_32 (abfd, insn, hit_data);\n       break;\n     case R_SH_IND12W:\n       insn = bfd_get_16 (abfd, hit_data);\n@@ -283,12 +283,10 @@ sh_elf_reloc (bfd *abfd, arelent *reloc_entry, asymbol *symbol_in,\n \t\t    + input_section->output_offset\n \t\t    + addr\n \t\t    + 4);\n-      sym_value += (insn & 0xfff) << 1;\n-      if (insn & 0x800)\n-\tsym_value -= 0x1000;\n-      insn = (insn & 0xf000) | (sym_value & 0xfff);\n-      bfd_put_16 (abfd, (bfd_vma) insn, hit_data);\n-      if ((bfd_signed_vma) sym_value < -0x1000 || sym_value >= 0x1000)\n+      sym_value += (((insn & 0xfff) ^ 0x800) - 0x800) << 1;\n+      insn = (insn & 0xf000) | ((sym_value >> 1) & 0xfff);\n+      bfd_put_16 (abfd, insn, hit_data);\n+      if (sym_value + 0x1000 >= 0x2000 || (sym_value & 1) != 0)\n \treturn bfd_reloc_overflow;\n       break;\n     default:"
    }
  ]
}