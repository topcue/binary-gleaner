{
  "sha": "bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmQxNDY3YWVlOGRmZjhmMWVhMTk2YjFhZTEwYjE0YjZkMTcwOWRmYg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-06-12T20:06:44Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-06-12T20:06:44Z"
    },
    "message": "gdbserver: remove support for M32R\n\nThis port has been unmaintained for years and the upstream Linux kernel\ndoes not support this architecture anymore, remove it.\n\ngdbserver/ChangeLog:\n\n\t* Makefile.in (SFILES): Remove linux-m32r-low.cc.\n\t* configure.srv: Remove m32r case.\n\t* linux-m32r-low.cc: Remove.\n\nChange-Id: I5617b2b1fd92aeec19b38e0e3c0b78adaafdb35b",
    "tree": {
      "sha": "b5f2de88ebecacbe2160344858130dfb88a170b0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b5f2de88ebecacbe2160344858130dfb88a170b0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7b46bf6f83c444ac84b3b88ebd89a8dae0de2f37",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7b46bf6f83c444ac84b3b88ebd89a8dae0de2f37",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7b46bf6f83c444ac84b3b88ebd89a8dae0de2f37"
    }
  ],
  "stats": {
    "total": 175,
    "additions": 6,
    "deletions": 169
  },
  "files": [
    {
      "sha": "bbfbf83c89bdb8c3c38c4f45125d1c2c8281239c",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb",
      "patch": "@@ -1,3 +1,9 @@\n+2020-06-12  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* Makefile.in (SFILES): Remove linux-m32r-low.cc.\n+\t* configure.srv: Remove m32r case.\n+\t* linux-m32r-low.cc: Remove.\n+\n 2020-06-12  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* Makefile.in (SFILES): Remove linux-cris-low.c."
    },
    {
      "sha": "80cc12e58603c02d2e5410d1d17c458aa8ec333c",
      "filename": "gdbserver/Makefile.in",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb/gdbserver/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb/gdbserver/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/Makefile.in?ref=bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb",
      "patch": "@@ -182,7 +182,6 @@ SFILES = \\\n \t$(srcdir)/linux-arm-low.cc \\\n \t$(srcdir)/linux-ia64-low.cc \\\n \t$(srcdir)/linux-low.cc \\\n-\t$(srcdir)/linux-m32r-low.cc \\\n \t$(srcdir)/linux-m68k-low.cc \\\n \t$(srcdir)/linux-mips-low.cc \\\n \t$(srcdir)/linux-nios2-low.cc \\"
    },
    {
      "sha": "76d2b8e7e0253044579a5b9f4b4dc8c50649171b",
      "filename": "gdbserver/configure.srv",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb/gdbserver/configure.srv",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb/gdbserver/configure.srv",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/configure.srv?ref=bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb",
      "patch": "@@ -125,11 +125,6 @@ case \"${gdbserver_host}\" in\n \t\t\tsrv_tgtobj=\"$srv_linux_obj linux-ia64-low.o\"\n \t\t\tsrv_linux_usrregs=yes\n \t\t\t;;\n-  m32r*-*-linux*)\tsrv_regobj=reg-m32r.o\n-\t\t\tsrv_tgtobj=\"$srv_linux_obj linux-m32r-low.o\"\n-\t\t\tsrv_linux_usrregs=yes\n- \t\t\tsrv_linux_thread_db=yes\n-\t\t\t;;\n   m68*-*-linux*)\tif test \"$gdb_cv_m68k_is_coldfire\" = yes; then\n                           srv_regobj=reg-cf.o\n                         else"
    },
    {
      "sha": "3f84b17302a1eac572e4efde41e1151cf04352ed",
      "filename": "gdbserver/linux-m32r-low.cc",
      "status": "removed",
      "additions": 0,
      "deletions": 163,
      "changes": 163,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7b46bf6f83c444ac84b3b88ebd89a8dae0de2f37/gdbserver/linux-m32r-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7b46bf6f83c444ac84b3b88ebd89a8dae0de2f37/gdbserver/linux-m32r-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m32r-low.cc?ref=7b46bf6f83c444ac84b3b88ebd89a8dae0de2f37",
      "patch": "@@ -1,163 +0,0 @@\n-/* GNU/Linux/m32r specific low level interface, for the remote server for GDB.\n-   Copyright (C) 2005-2020 Free Software Foundation, Inc.\n-\n-   This file is part of GDB.\n-\n-   This program is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3 of the License, or\n-   (at your option) any later version.\n-\n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n-\n-#include \"server.h\"\n-#include \"linux-low.h\"\n-\n-#ifdef HAVE_SYS_REG_H\n-#include <sys/reg.h>\n-#endif\n-\n-/* Linux target op definitions for the m32r architecture.  */\n-\n-class m32r_target : public linux_process_target\n-{\n-public:\n-\n-  const regs_info *get_regs_info () override;\n-\n-  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n-\n-protected:\n-\n-  void low_arch_setup () override;\n-\n-  bool low_cannot_fetch_register (int regno) override;\n-\n-  bool low_cannot_store_register (int regno) override;\n-\n-  bool low_supports_breakpoints () override;\n-\n-  CORE_ADDR low_get_pc (regcache *regcache) override;\n-\n-  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n-\n-  bool low_breakpoint_at (CORE_ADDR pc) override;\n-};\n-\n-/* The singleton target ops object.  */\n-\n-static m32r_target the_m32r_target;\n-\n-bool\n-m32r_target::low_supports_breakpoints ()\n-{\n-  return true;\n-}\n-\n-CORE_ADDR\n-m32r_target::low_get_pc (regcache *regcache)\n-{\n-  return linux_get_pc_32bit (regcache);\n-}\n-\n-void\n-m32r_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n-{\n-  linux_set_pc_32bit (regcache, pc);\n-}\n-\n-/* Defined in auto-generated file reg-m32r.c.  */\n-void init_registers_m32r (void);\n-extern const struct target_desc *tdesc_m32r;\n-\n-#define m32r_num_regs 25\n-\n-static int m32r_regmap[] = {\n-#ifdef PT_R0\n-  PT_R0, PT_R1, PT_R2, PT_R3, PT_R4, PT_R5, PT_R6, PT_R7,\n-  PT_R8, PT_R9, PT_R10, PT_R11, PT_R12, PT_FP, PT_LR, PT_SPU,\n-  PT_PSW, PT_CBR, PT_SPI, PT_SPU, PT_BPC, PT_PC, PT_ACCL, PT_ACCH, PT_EVB\n-#else\n-  4 * 4, 4 * 5, 4 * 6, 4 * 7, 4 * 0, 4 * 1, 4 * 2, 4 * 8,\n-  4 * 9, 4 * 10, 4 * 11, 4 * 12, 4 * 13, 4 * 24, 4 * 25, 4 * 23,\n-  4 * 19, 4 * 31, 4 * 26, 4 * 23, 4 * 20, 4 * 30, 4 * 16, 4 * 15, 4 * 32\n-#endif\n-};\n-\n-bool\n-m32r_target::low_cannot_store_register (int regno)\n-{\n-  return (regno >= m32r_num_regs);\n-}\n-\n-bool\n-m32r_target::low_cannot_fetch_register (int regno)\n-{\n-  return (regno >= m32r_num_regs);\n-}\n-\n-static const unsigned short m32r_breakpoint = 0x10f1;\n-#define m32r_breakpoint_len 2\n-\n-/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n-\n-const gdb_byte *\n-m32r_target::sw_breakpoint_from_kind (int kind, int *size)\n-{\n-  *size = m32r_breakpoint_len;\n-  return (const gdb_byte *) &m32r_breakpoint;\n-}\n-\n-bool\n-m32r_target::low_breakpoint_at (CORE_ADDR where)\n-{\n-  unsigned short insn;\n-\n-  read_memory (where, (unsigned char *) &insn, m32r_breakpoint_len);\n-  if (insn == m32r_breakpoint)\n-    return true;\n-\n-  /* If necessary, recognize more trap instructions here.  GDB only uses the\n-     one.  */\n-  return false;\n-}\n-\n-void\n-m32r_target::low_arch_setup ()\n-{\n-  current_process ()->tdesc = tdesc_m32r;\n-}\n-\n-static struct usrregs_info m32r_usrregs_info =\n-  {\n-    m32r_num_regs,\n-    m32r_regmap,\n-  };\n-\n-static struct regs_info myregs_info =\n-  {\n-    NULL, /* regset_bitmap */\n-    &m32r_usrregs_info,\n-  };\n-\n-const regs_info *\n-m32r_target::get_regs_info ()\n-{\n-  return &myregs_info;\n-}\n-\n-/* The linux target ops object.  */\n-\n-linux_process_target *the_linux_target = &the_m32r_target;\n-\n-void\n-initialize_low_arch (void)\n-{\n-  init_registers_m32r ();\n-}"
    }
  ]
}