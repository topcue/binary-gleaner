{
  "sha": "70304be939301a91dade0dc7d4234c081372bd24",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzAzMDRiZTkzOTMwMWE5MWRhZGUwZGM3ZDQyMzRjMDgxMzcyYmQyNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-03-20T14:24:16Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-03-20T14:28:11Z"
    },
    "message": "Fix Ada val_print removal regression\n\nThe removal of val_print caused a regression in the Ada code.  In one\nscenario, a variant type would not be properly printed, because the\naddress of a component was lost.  This patch fixes the bug by changing\nthis API to be value-based.  This is cleaner and fixes the bug as a\nside effect.\n\ngdb/ChangeLog\n2020-03-20  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-valprint.c (print_variant_part): Remove parameters; switch\n\tto value-based API.\n\t(print_field_values): Likewise.\n\t(ada_val_print_struct_union): Likewise.\n\t(ada_value_print_1): Update.\n\ngdb/testsuite/ChangeLog\n2020-03-20  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/sub_variant/subv.adb: New file.\n\t* gdb.ada/sub_variant.exp: New file.",
    "tree": {
      "sha": "cb9db6c1bc3941bd3fb31ff6f41f9c47258b5a05",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cb9db6c1bc3941bd3fb31ff6f41f9c47258b5a05"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/70304be939301a91dade0dc7d4234c081372bd24",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/70304be939301a91dade0dc7d4234c081372bd24",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/70304be939301a91dade0dc7d4234c081372bd24",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/70304be939301a91dade0dc7d4234c081372bd24/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9faa006d11a5e08264a007463435f84b77864c9c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9faa006d11a5e08264a007463435f84b77864c9c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9faa006d11a5e08264a007463435f84b77864c9c"
    }
  ],
  "stats": {
    "total": 191,
    "additions": 131,
    "deletions": 60
  },
  "files": [
    {
      "sha": "3a16003d9d652e87cc16040a856e43bdc37dc18f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/70304be939301a91dade0dc7d4234c081372bd24/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/70304be939301a91dade0dc7d4234c081372bd24/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=70304be939301a91dade0dc7d4234c081372bd24",
      "patch": "@@ -1,3 +1,11 @@\n+2020-03-20  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-valprint.c (print_variant_part): Remove parameters; switch\n+\tto value-based API.\n+\t(print_field_values): Likewise.\n+\t(ada_val_print_struct_union): Likewise.\n+\t(ada_value_print_1): Update.\n+\n 2020-03-20  Kamil Rytarowski  <n54@gmx.com>\n \n \t* ppc-nbsd-nat.c (ppc_nbsd_nat_target): Inherit from"
    },
    {
      "sha": "59ada24b947461f17ca37c58cd4a4957dce3b3f1",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 39,
      "deletions": 60,
      "changes": 99,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/70304be939301a91dade0dc7d4234c081372bd24/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/70304be939301a91dade0dc7d4234c081372bd24/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=70304be939301a91dade0dc7d4234c081372bd24",
      "patch": "@@ -30,13 +30,11 @@\n #include \"cli/cli-style.h\"\n #include \"gdbarch.h\"\n \n-static int print_field_values (struct type *, const gdb_byte *,\n-\t\t\t       int,\n+static int print_field_values (struct value *, struct value *,\n \t\t\t       struct ui_file *, int,\n-\t\t\t       struct value *,\n \t\t\t       const struct value_print_options *,\n-\t\t\t       int, struct type *, int,\n-\t\t\t       const struct language_defn *);\n+\t\t\t       int, const struct language_defn *);\n+\n \f\n \n /* Make TYPE unsigned if its range of values includes no negatives.  */\n@@ -553,39 +551,34 @@ ada_printstr (struct ui_file *stream, struct type *type,\n }\n \n static int\n-print_variant_part (struct type *type, int field_num,\n-\t\t    const gdb_byte *valaddr, int offset,\n+print_variant_part (struct value *value, int field_num,\n+\t\t    struct value *outer_value,\n \t\t    struct ui_file *stream, int recurse,\n-\t\t    struct value *val,\n \t\t    const struct value_print_options *options,\n \t\t    int comma_needed,\n-\t\t    struct type *outer_type, int outer_offset,\n \t\t    const struct language_defn *language)\n {\n+  struct type *type = value_type (value);\n   struct type *var_type = TYPE_FIELD_TYPE (type, field_num);\n-  int which = ada_which_variant_applies (var_type, outer_type,\n-\t\t\t\t\t valaddr + outer_offset);\n+  int which = ada_which_variant_applies (var_type,\n+\t\t\t\t\t value_type (outer_value),\n+\t\t\t\t\t value_contents (outer_value));\n \n   if (which < 0)\n     return 0;\n-  else\n-    return print_field_values\n-      (TYPE_FIELD_TYPE (var_type, which),\n-       valaddr,\n-       offset + TYPE_FIELD_BITPOS (type, field_num) / HOST_CHAR_BIT\n-       + TYPE_FIELD_BITPOS (var_type, which) / HOST_CHAR_BIT,\n-       stream, recurse, val, options,\n-       comma_needed, outer_type, outer_offset, language);\n+\n+  struct value *active_component = value_field (value, which);\n+  return print_field_values (active_component, outer_value, stream, recurse,\n+\t\t\t     options, comma_needed, language);\n }\n \n-/* Print out fields of value at VALADDR + OFFSET having structure type TYPE.\n+/* Print out fields of VALUE.\n \n-   TYPE, VALADDR, OFFSET, STREAM, RECURSE, and OPTIONS have the same\n-   meanings as in ada_print_value and ada_val_print.\n+   STREAM, RECURSE, and OPTIONS have the same meanings as in\n+   ada_print_value and ada_value_print.\n \n-   OUTER_TYPE and OUTER_OFFSET give type and address of enclosing\n-   record (used to get discriminant values when printing variant\n-   parts).\n+   OUTER_VALUE gives the enclosing record (used to get discriminant\n+   values when printing variant parts).\n \n    COMMA_NEEDED is 1 if fields have been printed at the current recursion\n    level, so that a comma is needed before any field printed by this\n@@ -594,16 +587,15 @@ print_variant_part (struct type *type, int field_num,\n    Returns 1 if COMMA_NEEDED or any fields were printed.  */\n \n static int\n-print_field_values (struct type *type, const gdb_byte *valaddr,\n-\t\t    int offset, struct ui_file *stream, int recurse,\n-\t\t    struct value *val,\n+print_field_values (struct value *value, struct value *outer_value,\n+\t\t    struct ui_file *stream, int recurse,\n \t\t    const struct value_print_options *options,\n \t\t    int comma_needed,\n-\t\t    struct type *outer_type, int outer_offset,\n \t\t    const struct language_defn *language)\n {\n   int i, len;\n \n+  struct type *type = value_type (value);\n   len = TYPE_NFIELDS (type);\n \n   for (i = 0; i < len; i += 1)\n@@ -614,21 +606,16 @@ print_field_values (struct type *type, const gdb_byte *valaddr,\n       if (ada_is_wrapper_field (type, i))\n \t{\n \t  comma_needed =\n-\t    print_field_values (TYPE_FIELD_TYPE (type, i),\n-\t\t\t\tvaladdr,\n-\t\t\t\t(offset\n-\t\t\t\t + TYPE_FIELD_BITPOS (type, i) / HOST_CHAR_BIT),\n-\t\t\t\tstream, recurse, val, options,\n-\t\t\t\tcomma_needed, type, offset, language);\n+\t    print_field_values (value_field (value, i), outer_value,\n+\t\t\t\tstream, recurse, options,\n+\t\t\t\tcomma_needed, language);\n \t  continue;\n \t}\n       else if (ada_is_variant_part (type, i))\n \t{\n \t  comma_needed =\n-\t    print_variant_part (type, i, valaddr,\n-\t\t\t\toffset, stream, recurse, val,\n-\t\t\t\toptions, comma_needed,\n-\t\t\t\touter_type, outer_offset, language);\n+\t    print_variant_part (value, i, outer_value, stream, recurse,\n+\t\t\t\toptions, comma_needed, language);\n \t  continue;\n \t}\n \n@@ -672,8 +659,8 @@ print_field_values (struct type *type, const gdb_byte *valaddr,\n \n \t      adjust_type_signedness (TYPE_FIELD_TYPE (type, i));\n \t      v = ada_value_primitive_packed_val\n-\t\t    (NULL, valaddr,\n-\t\t     offset + bit_pos / HOST_CHAR_BIT,\n+\t\t    (value, nullptr,\n+\t\t     bit_pos / HOST_CHAR_BIT,\n \t\t     bit_pos % HOST_CHAR_BIT,\n \t\t     bit_size, TYPE_FIELD_TYPE (type, i));\n \t      opts = *options;\n@@ -687,10 +674,7 @@ print_field_values (struct type *type, const gdb_byte *valaddr,\n \n \t  opts.deref_ref = 0;\n \n-\t  LONGEST local_off = (offset + TYPE_FIELD_BITPOS (type, i)\n-\t\t\t       / HOST_CHAR_BIT);\n-\t  struct value *v = value_from_contents (TYPE_FIELD_TYPE (type, i),\n-\t\t\t\t\t\t valaddr + local_off);\n+\t  struct value *v = value_field (value, i);\n \t  common_val_print (v, stream, recurse + 1, &opts, language);\n \t}\n       annotate_field_end ();\n@@ -923,28 +907,25 @@ ada_val_print_enum (struct value *value, struct ui_file *stream, int recurse,\n     print_longest (stream, 'd', 0, val);\n }\n \n-/* Implement Ada val_print'ing for the case where TYPE is\n-   a TYPE_CODE_STRUCT or TYPE_CODE_UNION.  */\n+/* Implement Ada val_print'ing for the case where the type is\n+   TYPE_CODE_STRUCT or TYPE_CODE_UNION.  */\n \n static void\n-ada_val_print_struct_union\n-  (struct type *type, const gdb_byte *valaddr, int offset,\n-   int offset_aligned, CORE_ADDR address, struct ui_file *stream,\n-   int recurse, struct value *original_value,\n-   const struct value_print_options *options)\n+ada_val_print_struct_union (struct value *value,\n+\t\t\t    struct ui_file *stream,\n+\t\t\t    int recurse,\n+\t\t\t    const struct value_print_options *options)\n {\n-  if (ada_is_bogus_array_descriptor (type))\n+  if (ada_is_bogus_array_descriptor (value_type (value)))\n     {\n       fprintf_filtered (stream, \"(...?)\");\n       return;\n     }\n \n   fprintf_filtered (stream, \"(\");\n \n-  if (print_field_values (type, valaddr, offset_aligned,\n-\t\t\t  stream, recurse, original_value, options,\n-\t\t\t  0, type, offset_aligned,\n-\t\t\t  language_def (language_ada)) != 0\n+  if (print_field_values (value, value, stream, recurse, options,\n+\t\t\t  0, language_def (language_ada)) != 0\n       && options->prettyformat)\n     {\n       fprintf_filtered (stream, \"\\n\");\n@@ -1116,9 +1097,7 @@ ada_value_print_1 (struct value *val, struct ui_file *stream, int recurse,\n \n     case TYPE_CODE_UNION:\n     case TYPE_CODE_STRUCT:\n-      ada_val_print_struct_union (type, valaddr, 0, 0,\n-\t\t\t\t  address, stream, recurse,\n-\t\t\t\t  val, options);\n+      ada_val_print_struct_union (val, stream, recurse, options);\n       break;\n \n     case TYPE_CODE_ARRAY:"
    },
    {
      "sha": "40adbfbf996cf23315e8ea86dc2013448e1ac7b6",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/70304be939301a91dade0dc7d4234c081372bd24/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/70304be939301a91dade0dc7d4234c081372bd24/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=70304be939301a91dade0dc7d4234c081372bd24",
      "patch": "@@ -1,3 +1,8 @@\n+2020-03-20  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/sub_variant/subv.adb: New file.\n+\t* gdb.ada/sub_variant.exp: New file.\n+\n 2020-03-20  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.threads/step-over-lands-on-breakpoint.exp (do_test): Bail out if"
    },
    {
      "sha": "381d138234de47ae80cd39a56f67f8ddea8e3a09",
      "filename": "gdb/testsuite/gdb.ada/sub_variant.exp",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/70304be939301a91dade0dc7d4234c081372bd24/gdb/testsuite/gdb.ada/sub_variant.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/70304be939301a91dade0dc7d4234c081372bd24/gdb/testsuite/gdb.ada/sub_variant.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/sub_variant.exp?ref=70304be939301a91dade0dc7d4234c081372bd24",
      "patch": "@@ -0,0 +1,34 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+load_lib \"ada.exp\"\n+\n+standard_ada_testfile subv\n+\n+if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable [list debug ]] != \"\" } {\n+  return -1\n+}\n+\n+clean_restart ${testfile}\n+\n+set bp_location [gdb_get_line_number \"STOP\" ${testdir}/subv.adb]\n+runto \"subv.adb:$bp_location\"\n+\n+gdb_test \"print q\" \\\n+    \"\\\\(indicator => first, associated => \\\\(indicator => first, value => 42\\\\), value => 51\\\\)\"\n+gdb_test \"print r\" \\\n+    \"\\\\(indicator => first, associated => \\\\(indicator => last\\\\), value => 51\\\\)\"\n+gdb_test \"print s\" \\\n+    \"\\\\(indicator => last, associated => \\\\(indicator => first, value => 42\\\\)\\\\)\""
    },
    {
      "sha": "632ec32087db0823f22d0cb957a00cc06f1ab96f",
      "filename": "gdb/testsuite/gdb.ada/sub_variant/subv.adb",
      "status": "added",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/70304be939301a91dade0dc7d4234c081372bd24/gdb/testsuite/gdb.ada/sub_variant/subv.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/70304be939301a91dade0dc7d4234c081372bd24/gdb/testsuite/gdb.ada/sub_variant/subv.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/sub_variant/subv.adb?ref=70304be939301a91dade0dc7d4234c081372bd24",
      "patch": "@@ -0,0 +1,45 @@\n+--  Copyright 2020 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+procedure Subv is\n+  type Indicator_T is (First, Last);\n+\n+  type T1 (Indicator : Indicator_T := First) is\n+    record\n+      case Indicator is\n+        when First =>\n+          Value : Natural;\n+        when Last =>\n+          null;\n+      end case;\n+    end record;\n+\n+  type T2 (Indicator : Indicator_T := First) is\n+    record\n+      Associated : T1;\n+      case Indicator is\n+        when First =>\n+          Value : Natural;\n+        when Last =>\n+          null;\n+      end case;\n+    end record;\n+\n+  Q : T2  := ( First, (First, 42), 51 );\n+  R : T2  := ( First, (Indicator => Last), 51 );\n+  S : T2  := ( Last, (First, 42));\n+begin\n+  null;  -- STOP\n+end;"
    }
  ]
}