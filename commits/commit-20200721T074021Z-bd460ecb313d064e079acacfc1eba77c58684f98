{
  "sha": "bd460ecb313d064e079acacfc1eba77c58684f98",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmQ0NjBlY2IzMTNkMDY0ZTA3OWFjYWNmYzFlYmE3N2M1ODY4NGY5OA==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-07-21T07:40:21Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-07-21T07:40:21Z"
    },
    "message": "[gdb/testsuite] Don't leak env vars in gdb.debuginfod/fetch_src_and_symbols.exp\n\nTest-case gdb.debuginfod/fetch_src_and_symbols.exp leaks env vars\nDEBUGINFOD_URLS, DEBUGINFOD_TIMEOUT and DEBUGINFOD_CACHE_PATH, causing\ntimeouts in subsequent tests.\n\nFix this by using save_vars.  Also, fix PATH and DUPLICATE errors.  Finally,\ncleanup whitespace.\n\ngdb/testsuite/ChangeLog:\n\n2020-07-21  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.debuginfod/fetch_src_and_symbols.exp: Use save_vars for env\n\tvars.  Fix PATH and DUPLICATE errors.  Cleanup whitespace.",
    "tree": {
      "sha": "464bcd9fc501766f7e0822bf48830150442da6c4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/464bcd9fc501766f7e0822bf48830150442da6c4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bd460ecb313d064e079acacfc1eba77c58684f98",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd460ecb313d064e079acacfc1eba77c58684f98",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bd460ecb313d064e079acacfc1eba77c58684f98",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd460ecb313d064e079acacfc1eba77c58684f98/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ec4fcab0ee2877e2dd33528b2be34fa90c00e0b7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ec4fcab0ee2877e2dd33528b2be34fa90c00e0b7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ec4fcab0ee2877e2dd33528b2be34fa90c00e0b7"
    }
  ],
  "stats": {
    "total": 214,
    "additions": 125,
    "deletions": 89
  },
  "files": [
    {
      "sha": "a68c272188c2b2d42afc4e4afe0c22e7b2358c64",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd460ecb313d064e079acacfc1eba77c58684f98/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd460ecb313d064e079acacfc1eba77c58684f98/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=bd460ecb313d064e079acacfc1eba77c58684f98",
      "patch": "@@ -1,3 +1,8 @@\n+2020-07-21  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.debuginfod/fetch_src_and_symbols.exp: Use save_vars for env\n+\tvars.  Fix PATH and DUPLICATE errors.  Cleanup whitespace.\n+\n 2020-07-20  Ludovic Court\u00e8s  <ludo@gnu.org>\n \n \t* gdb.guile/source2.scm: Add #f first argument to 'format'."
    },
    {
      "sha": "c26893ddf437897cfccc70e0554f9e92352f509e",
      "filename": "gdb/testsuite/gdb.debuginfod/fetch_src_and_symbols.exp",
      "status": "modified",
      "additions": 120,
      "deletions": 89,
      "changes": 209,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd460ecb313d064e079acacfc1eba77c58684f98/gdb/testsuite/gdb.debuginfod/fetch_src_and_symbols.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd460ecb313d064e079acacfc1eba77c58684f98/gdb/testsuite/gdb.debuginfod/fetch_src_and_symbols.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.debuginfod/fetch_src_and_symbols.exp?ref=bd460ecb313d064e079acacfc1eba77c58684f98",
      "patch": "@@ -31,7 +31,7 @@ if { [which curl] == 0 } {\n \n # Skip testing if gdb was not configured with debuginfod\n if { [string first \"with-debuginfod\" \\\n-         [eval exec $GDB $INTERNAL_GDBFLAGS --configuration]] == -1 } {\n+\t [eval exec $GDB $INTERNAL_GDBFLAGS --configuration]] == -1 } {\n     untested \"gdb not configured with debuginfod\"\n     return -1\n }\n@@ -58,31 +58,6 @@ if { [gdb_compile \"$sourcetmp\" \"$binfile\" executable {debug}] != \"\" } {\n     return -1\n }\n \n-setenv DEBUGINFOD_URLS \"\"\n-setenv DEBUGINFOD_TIMEOUT 30\n-setenv DEBUGINFOD_CACHE_PATH $cache\n-\n-# Test that gdb cannot find source without debuginfod\n-clean_restart $binfile\n-gdb_test_no_output \"set substitute-path $outputdir /dev/null\"\n-gdb_test \"list\" \".*No such file or directory.*\"\n-\n-# Strip symbols into separate file and move it so gdb cannot find it without debuginfod\n-if { [gdb_gnu_strip_debug $binfile \"\"] != 0 } {\n-    fail \"strip debuginfo\"\n-    return -1\n-}\n-\n-set debugdir [standard_output_file \"debug\"]\n-set debuginfo [standard_output_file \"fetch_src_and_symbols.debug\"]\n-\n-file mkdir $debugdir\n-file rename -force $debuginfo $debugdir\n-\n-# Test that gdb cannot find symbols without debuginfod\n-clean_restart $binfile\n-gdb_test \"file\" \".*No symbol file.*\"\n-\n # Write some assembly that just has a .gnu_debugaltlink section.\n # Copied from testsuite/gdb.dwarf2/dwzbuildid.exp.\n proc write_just_debugaltlink {filename dwzname buildid} {\n@@ -118,7 +93,7 @@ proc write_dwarf_file {filename buildid {value 99}} {\n \n \tcu {} {\n \t    compile_unit {{language @DW_LANG_C}} {\n-\t        int_label2: base_type {\n+\t\tint_label2: base_type {\n \t\t    {name int}\n \t\t    {byte_size 4 sdata}\n \t\t    {encoding @DW_ATE_signed}\n@@ -134,82 +109,138 @@ proc write_dwarf_file {filename buildid {value 99}} {\n     }\n }\n \n-set buildid \"01234567890abcdef0123456\"\n+proc no_url { } {\n+    global binfile outputdir debugdir\n \n-write_just_debugaltlink ${binfile}_has_altlink.S ${binfile}_dwz.o $buildid\n-write_dwarf_file ${binfile}_dwz.S $buildid\n+    setenv DEBUGINFOD_URLS \"\"\n \n-if {[gdb_compile ${binfile}_has_altlink.S ${binfile}_alt.o object nodebug] != \"\"} {\n-    fail \"compile main with altlink\"\n-    return -1\n-}\n+    # Test that gdb cannot find source without debuginfod\n+    clean_restart $binfile\n+    gdb_test_no_output \"set substitute-path $outputdir /dev/null\" \\\n+\t\"set substitute-path\"\n+    gdb_test \"list\" \".*No such file or directory.*\"\n \n-if {[gdb_compile ${binfile}_dwz.S ${binfile}_dwz.o object nodebug] != \"\"} {\n-    fail \"compile altlink\"\n-    return -1\n-}\n+    # Strip symbols into separate file and move it so gdb cannot find it \\\n+\twithout debuginfod\n+    if { [gdb_gnu_strip_debug $binfile \"\"] != 0 } {\n+\tfail \"strip debuginfo\"\n+\treturn -1\n+    }\n \n-file rename -force ${binfile}_dwz.o $debugdir\n+    set debugdir [standard_output_file \"debug\"]\n+    set debuginfo [standard_output_file \"fetch_src_and_symbols.debug\"]\n \n-# Test that gdb cannot find dwz without debuginfod.\n-clean_restart\n-gdb_test \"file ${binfile}_alt.o\" \".*could not find '.gnu_debugaltlink'.*\"\n+    file mkdir $debugdir\n+    file rename -force $debuginfo $debugdir\n \n-# Find an unused port\n-set port 7999\n-set found 0\n-while { ! $found } {\n-  incr port\n-  if { $port == 65536 } {\n-    fail \"no available ports\"\n-    return -1\n-  }\n-\n-  spawn debuginfod -vvvv -d $db -p $port -F $debugdir\n-  expect {\n-    \"started http server on IPv4 IPv6 port=$port\" { set found 1 }\n-    \"failed to bind to port\" { kill_wait_spawned_process $spawn_id }\n-    timeout {\n-      fail \"find port timeout\"\n-      return -1\n+    # Test that gdb cannot find symbols without debuginfod\n+    clean_restart $binfile\n+    gdb_test \"file\" \".*No symbol file.*\"\n+\n+    set buildid \"01234567890abcdef0123456\"\n+\n+    write_just_debugaltlink ${binfile}_has_altlink.S ${binfile}_dwz.o \\\n+\t$buildid\n+    write_dwarf_file ${binfile}_dwz.S $buildid\n+\n+    if {[gdb_compile ${binfile}_has_altlink.S ${binfile}_alt.o object \\\n+\t     nodebug] != \"\"} {\n+\tfail \"compile main with altlink\"\n+\treturn -1\n     }\n-  }\n-}\n \n-set metrics [list \"ready 1\" \\\n-\t     \"thread_work_total{role=\\\"traverse\\\"} 1\" \\\n-\t     \"thread_work_pending{role=\\\"scan\\\"} 0\" \\\n-\t     \"thread_busy{role=\\\"scan\\\"} 0\"]\n+    if {[gdb_compile ${binfile}_dwz.S ${binfile}_dwz.o object \\\n+\t     nodebug] != \"\"} {\n+\tfail \"compile altlink\"\n+\treturn -1\n+    }\n+\n+    file rename -force ${binfile}_dwz.o $debugdir\n \n-# Check server metrics to confirm init has completed.\n-foreach m $metrics {\n-  set timelim 20\n-  while { $timelim != 0 } {\n-    sleep 0.5\n-    catch {exec curl -s http://127.0.0.1:$port/metrics} got\n+    # Test that gdb cannot find dwz without debuginfod.\n+    clean_restart\n+    gdb_test \"file ${binfile}_alt.o\" \\\n+\t\".*could not find '.gnu_debugaltlink'.*\" \\\n+\t\"file [file tail ${binfile}_alt.o]\"\n+}\n+\n+proc local_url { } {\n+    global binfile outputdir db debugdir\n+\n+    # Find an unused port\n+    set port 7999\n+    set found 0\n+    while { ! $found } {\n+\tincr port\n+\tif { $port == 65536 } {\n+\t    fail \"no available ports\"\n+\t    return -1\n+\t}\n \n-    if { [regexp $m $got] } {\n-      break\n+\tspawn debuginfod -vvvv -d $db -p $port -F $debugdir\n+\texpect {\n+\t    \"started http server on IPv4 IPv6 port=$port\" { set found 1 }\n+\t    \"failed to bind to port\" { kill_wait_spawned_process $spawn_id }\n+\t    timeout {\n+\t\tfail \"find port timeout\"\n+\t\treturn -1\n+\t    }\n+\t}\n     }\n \n-    incr timelim -1\n-  }\n+    set metrics [list \"ready 1\" \\\n+\t\t     \"thread_work_total{role=\\\"traverse\\\"} 1\" \\\n+\t\t     \"thread_work_pending{role=\\\"scan\\\"} 0\" \\\n+\t\t     \"thread_busy{role=\\\"scan\\\"} 0\"]\n \n-  if { $timelim == 0 } {\n-    fail \"server init timeout\"\n-    return -1\n-  }\n+    # Check server metrics to confirm init has completed.\n+    foreach m $metrics {\n+\tset timelim 20\n+\twhile { $timelim != 0 } {\n+\t    sleep 0.5\n+\t    catch {exec curl -s http://127.0.0.1:$port/metrics} got\n+\n+\t    if { [regexp $m $got] } {\n+\t\tbreak\n+\t    }\n+\n+\t    incr timelim -1\n+\t}\n+\n+\tif { $timelim == 0 } {\n+\t    fail \"server init timeout\"\n+\t    return -1\n+\t}\n+    }\n+\n+    # Point the client to the server\n+    setenv DEBUGINFOD_URLS http://127.0.0.1:$port\n+\n+    # gdb should now find the symbol and source files\n+    clean_restart $binfile\n+    gdb_test_no_output \"set substitute-path $outputdir /dev/null\" \\\n+\t\"set substitute-path\"\n+    gdb_test \"br main\" \"Breakpoint 1 at.*file.*\"\n+    gdb_test \"l\" \".*This program is distributed in the hope.*\"\n+\n+    # gdb should now find the debugaltlink file\n+    clean_restart\n+    gdb_test \"file ${binfile}_alt.o\" \\\n+\t\".*Reading symbols from ${binfile}_alt.o\\.\\.\\.*\" \\\n+\t\"file [file tail ${binfile}_alt.o]\"\n }\n \n-# Point the client to the server\n-setenv DEBUGINFOD_URLS http://127.0.0.1:$port\n+set envlist \\\n+    [list \\\n+\t env(DEBUGINFOD_URLS) \\\n+\t env(DEBUGINFOD_TIMEOUT) \\\n+\t env(DEBUGINFOD_CACHE_PATH)]\n \n-# gdb should now find the symbol and source files\n-clean_restart $binfile\n-gdb_test_no_output \"set substitute-path $outputdir /dev/null\"\n-gdb_test \"br main\" \"Breakpoint 1 at.*file.*\"\n-gdb_test \"l\" \".*This program is distributed in the hope.*\"\n+save_vars $envlist {\n+    setenv DEBUGINFOD_TIMEOUT 30\n+    setenv DEBUGINFOD_CACHE_PATH $cache\n \n-# gdb should now find the debugaltlink file\n-clean_restart\n-gdb_test \"file ${binfile}_alt.o\" \".*Reading symbols from ${binfile}_alt.o\\.\\.\\.*\"\n+    with_test_prefix no_url no_url\n+\n+    with_test_prefix local_url local_url\n+}"
    }
  ]
}