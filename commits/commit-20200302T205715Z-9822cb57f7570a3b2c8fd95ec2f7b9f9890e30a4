{
  "sha": "9822cb57f7570a3b2c8fd95ec2f7b9f9890e30a4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTgyMmNiNTdmNzU3MGEzYjJjOGZkOTVlYzJmN2I5Zjk4OTBlMzBhNA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-03-02T20:47:04Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-03-02T20:57:15Z"
    },
    "message": "Small clean up of use_displaced_stepping\n\nThis function returns the result of a quite big condition.  I think it\nwould be more readeable if it was broken up in smaller pieces and\ncommented.  This is what this patch does.\n\nI also introduced gdbarch_supports_displaced_stepping, since it shows\nthe intent better than checking for gdbarch_displaced_step_copy_insn_p.\nI also used that new function in displaced_step_prepare_throw.\n\nI also updated the comment on top of can_use_displaced_stepping, which\nseemed a bit outdated with respect to non-stop.  The comment likely\ndates from before it was possible to have targets that always operate\nnon-stop under the hood, even when the user-visible mode is all-stop.\n\nNo functional changes intended.\n\ngdb/ChangeLog:\n\n\t* infrun.c (gdbarch_supports_displaced_stepping): New.\n\t(use_displaced_stepping): Break up conditions in smaller pieces.\n\tUse gdbarch_supports_displaced_stepping.\n\t(displaced_step_prepare_throw): Use\n\tgdbarch_supports_displaced_stepping.",
    "tree": {
      "sha": "8e0ab81a4563552dee890eadbed32154de94ee0b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8e0ab81a4563552dee890eadbed32154de94ee0b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9822cb57f7570a3b2c8fd95ec2f7b9f9890e30a4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9822cb57f7570a3b2c8fd95ec2f7b9f9890e30a4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9822cb57f7570a3b2c8fd95ec2f7b9f9890e30a4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9822cb57f7570a3b2c8fd95ec2f7b9f9890e30a4/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "63e163f24fe80fe1509527e6ccfcfb9622f5e99e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/63e163f24fe80fe1509527e6ccfcfb9622f5e99e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/63e163f24fe80fe1509527e6ccfcfb9622f5e99e"
    }
  ],
  "stats": {
    "total": 63,
    "additions": 50,
    "deletions": 13
  },
  "files": [
    {
      "sha": "89eff2931e55a09c1cfe59cbbd2b54b78adc0a83",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9822cb57f7570a3b2c8fd95ec2f7b9f9890e30a4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9822cb57f7570a3b2c8fd95ec2f7b9f9890e30a4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9822cb57f7570a3b2c8fd95ec2f7b9f9890e30a4",
      "patch": "@@ -1,3 +1,11 @@\n+2020-03-02  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* infrun.c (gdbarch_supports_displaced_stepping): New.\n+\t(use_displaced_stepping): Break up conditions in smaller pieces.\n+\tUse gdbarch_supports_displaced_stepping.\n+\t(displaced_step_prepare_throw): Use\n+\tgdbarch_supports_displaced_stepping.\n+\n 2020-03-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* NEWS: Mention new behaviour of the history filename."
    },
    {
      "sha": "b8c1bbc32978cdf1cc1dec480d0055b0ed6de5ed",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 42,
      "deletions": 13,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9822cb57f7570a3b2c8fd95ec2f7b9f9890e30a4/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9822cb57f7570a3b2c8fd95ec2f7b9f9890e30a4/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=9822cb57f7570a3b2c8fd95ec2f7b9f9890e30a4",
      "patch": "@@ -1556,8 +1556,7 @@ infrun_inferior_exit (struct inferior *inf)\n    doesn't support it, GDB will instead use the traditional\n    hold-and-step approach.  If AUTO (which is the default), GDB will\n    decide which technique to use to step over breakpoints depending on\n-   which of all-stop or non-stop mode is active --- displaced stepping\n-   in non-stop mode; hold-and-step in all-stop mode.  */\n+   whether the target works in a non-stop way (see use_displaced_stepping).  */\n \n static enum auto_boolean can_use_displaced_stepping = AUTO_BOOLEAN_AUTO;\n \n@@ -1577,23 +1576,53 @@ show_can_use_displaced_stepping (struct ui_file *file, int from_tty,\n \t\t\t\"to step over breakpoints is %s.\\n\"), value);\n }\n \n+/* Return true if the gdbarch implements the required methods to use\n+   displaced stepping.  */\n+\n+static bool\n+gdbarch_supports_displaced_stepping (gdbarch *arch)\n+{\n+  /* Only check for the presence of step_copy_insn.  Other required methods\n+     are checked by the gdbarch validation.  */\n+  return gdbarch_displaced_step_copy_insn_p (arch);\n+}\n+\n /* Return non-zero if displaced stepping can/should be used to step\n    over breakpoints of thread TP.  */\n \n-static int\n-use_displaced_stepping (struct thread_info *tp)\n+static bool\n+use_displaced_stepping (thread_info *tp)\n {\n-  struct regcache *regcache = get_thread_regcache (tp);\n-  struct gdbarch *gdbarch = regcache->arch ();\n+  /* If the user disabled it explicitly, don't use displaced stepping.  */\n+  if (can_use_displaced_stepping == AUTO_BOOLEAN_FALSE)\n+    return false;\n+\n+  /* If \"auto\", only use displaced stepping if the target operates in a non-stop\n+     way.  */\n+  if (can_use_displaced_stepping == AUTO_BOOLEAN_AUTO\n+      && !target_is_non_stop_p ())\n+    return false;\n+\n+  gdbarch *gdbarch = get_thread_regcache (tp)->arch ();\n+\n+  /* If the architecture doesn't implement displaced stepping, don't use\n+     it.  */\n+  if (!gdbarch_supports_displaced_stepping (gdbarch))\n+    return false;\n+\n+  /* If recording, don't use displaced stepping.  */\n+  if (find_record_target () != nullptr)\n+    return false;\n+\n   displaced_step_inferior_state *displaced_state\n     = get_displaced_stepping_state (tp->inf);\n \n-  return (((can_use_displaced_stepping == AUTO_BOOLEAN_AUTO\n-\t    && target_is_non_stop_p ())\n-\t   || can_use_displaced_stepping == AUTO_BOOLEAN_TRUE)\n-\t  && gdbarch_displaced_step_copy_insn_p (gdbarch)\n-\t  && find_record_target () == NULL\n-\t  && !displaced_state->failed_before);\n+  /* If displaced stepping failed before for this inferior, don't bother trying\n+     again.  */\n+  if (displaced_state->failed_before)\n+    return false;\n+\n+  return true;\n }\n \n /* Simple function wrapper around displaced_step_inferior_state::reset.  */\n@@ -1650,7 +1679,7 @@ displaced_step_prepare_throw (thread_info *tp)\n \n   /* We should never reach this function if the architecture does not\n      support displaced stepping.  */\n-  gdb_assert (gdbarch_displaced_step_copy_insn_p (gdbarch));\n+  gdb_assert (gdbarch_supports_displaced_stepping (gdbarch));\n \n   /* Nor if the thread isn't meant to step over a breakpoint.  */\n   gdb_assert (tp->control.trap_expected);"
    }
  ]
}