{
  "sha": "9edb1e0191e582d28848684f259fd97a24c24701",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWVkYjFlMDE5MWU1ODJkMjg4NDg2ODRmMjU5ZmQ5N2EyNGMyNDcwMQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-10T18:30:33Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-10T18:30:35Z"
    },
    "message": "gdb/testsuite: capture GDB tty name in default_gdb_spawn\n\nThe TUI test gdb.tui/empty.exp fails with the native-extended-gdbserver\nboard, and takes a very long time to run due to numerous timeouts.  The\nsymptom, when looking at the logs, is that the TUI windows that we\nexpect to be resized are not resized.  Digging down, I found that GDB\ndidn't receive any SIGWINCH that should have resulted from\nTerm::resize's stty calls.\n\nThe reason for this is:\n\n- The native-extended-gdbserver overrides gdb_start to first start GDB,\n  then start GDBserver with --multi, then connect GDB to GDBserver.\n  This means that two TCL \"spawn\"s are done, one for GDB and one for\n  GDBserver.\n\n- The TUI test framework  wants to know GDB's TTY name, so it can pass\n  it to stty, to fake terminal resizes.  To do so, it overrides the\n  spawn built-in proc to capture the tty name from the internals of the\n  built-in proc.  It saves the TTY name to the gdb_spawn_name global\n  variable.\n\n- Because the native-extended-gdbserver boards starts both GDB and\n  GDBserver, the final value of gdb_spawn_name is the name of\n  GDBserver's TTY.\n\n- When the TUI test framework attempts to resize GDB's terminal, it in\n  fact resizes GDBserver's terminal.  So obviously, GDB doesn't get the\n  SIGWINCH, and we don't get the expected TUI redraw.\n\nFix that by moving the hack to lib/gdb.exp, overriding the builtin spawn\nall the time.  The override saves the TTY name in the\nlast_spawn_tty_name global.  The default_gdb_spawn proc then saves it in\nthe gdb_tty_name global.  This way, we specifically capture GDB's TTY\nname in gdb_tty_name, not the TTY name of other spawned processes.\n\nRemove tuiterm_env_init and tuiterm_env_finish, since they are now\nempty.  In turn, the gdb_finish_hooks mechanism is now unused, remove it\nas well.  It would be easy to add them back if needed.\n\ngdb/ChangeLog:\n\n\t* lib/gdb.exp (default_gdb_exit): Unset gdb_tty_name.\n\t(spawn_capture_tty_name): New, override builtin spawn.\n\t(default_gdb_spawn): Capture GDB's TTY name.\n\t* lib/tuiterm.exp (tuiterm_spawn): Remove.\n\t(tuiterm_env_init, tuiterm_env_finish): Remove spawn override.\n\t(Term) <resize>: Use new variable name.\n\t(tuiterm_env_init, tuiterm_env_finish): Remove.\n\t(tuiterm_env): Don't call tuiterm_env_init and register\n\ttuiterm_env_finish in gdb_finish_hooks.\n\t(gdb_finish_hooks): Remove.\n\t(gdb_finish): Don't call finish hooks.\n\nChange-Id: Ia5ab74184a52a996416022308f8d0cc523355a78",
    "tree": {
      "sha": "7b01066bcf1362df92ca3a561e7ac1a997c89d20",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7b01066bcf1362df92ca3a561e7ac1a997c89d20"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9edb1e0191e582d28848684f259fd97a24c24701",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9edb1e0191e582d28848684f259fd97a24c24701",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9edb1e0191e582d28848684f259fd97a24c24701",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9edb1e0191e582d28848684f259fd97a24c24701/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6179e5f1d8d54e10a128e4de9c96ecda79e788bf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6179e5f1d8d54e10a128e4de9c96ecda79e788bf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6179e5f1d8d54e10a128e4de9c96ecda79e788bf"
    }
  ],
  "stats": {
    "total": 80,
    "additions": 40,
    "deletions": 40
  },
  "files": [
    {
      "sha": "549ea69e7dac10a67c0fb3f5cf53c3f0bed99938",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9edb1e0191e582d28848684f259fd97a24c24701/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9edb1e0191e582d28848684f259fd97a24c24701/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9edb1e0191e582d28848684f259fd97a24c24701",
      "patch": "@@ -1,3 +1,17 @@\n+2021-06-10  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* lib/gdb.exp (default_gdb_exit): Unset gdb_tty_name.\n+\t(spawn_capture_tty_name): New, override builtin spawn.\n+\t(default_gdb_spawn): Capture GDB's TTY name.\n+\t* lib/tuiterm.exp (tuiterm_spawn): Remove.\n+\t(tuiterm_env_init, tuiterm_env_finish): Remove spawn override.\n+\t(Term) <resize>: Use new variable name.\n+\t(tuiterm_env_init, tuiterm_env_finish): Remove.\n+\t(tuiterm_env): Don't call tuiterm_env_init and register\n+\ttuiterm_env_finish in gdb_finish_hooks.\n+\t(gdb_finish_hooks): Remove.\n+\t(gdb_finish): Don't call finish hooks.\n+\n 2021-06-08  Lancelot Six  <lsix@lancelotsix.com>\n \n \t* python/lib/gdb/FrameDecorator.py (FrameDecorator): Use 'is None'"
    },
    {
      "sha": "d8c684c72389ca63e0adc198426c607acdff3e42",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 24,
      "deletions": 7,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9edb1e0191e582d28848684f259fd97a24c24701/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9edb1e0191e582d28848684f259fd97a24c24701/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=9edb1e0191e582d28848684f259fd97a24c24701",
      "patch": "@@ -1909,6 +1909,7 @@ proc default_gdb_exit {} {\n \tremote_close host\n     }\n     unset gdb_spawn_id\n+    unset ::gdb_tty_name\n     unset inferior_spawn_id\n }\n \n@@ -2037,6 +2038,28 @@ proc gdb_file_cmd { arg } {\n     }\n }\n \n+# The expect \"spawn\" function puts the tty name into the spawn_out\n+# array; but dejagnu doesn't export this globally.  So, we have to\n+# wrap spawn with our own function and poke in the built-in spawn\n+# so that we can capture this value.\n+#\n+# If available, the TTY name is saved to the LAST_SPAWN_TTY_NAME global.\n+# Otherwise, LAST_SPAWN_TTY_NAME is unset.\n+\n+proc spawn_capture_tty_name { args } {\n+    set result [uplevel builtin_spawn $args]\n+    upvar spawn_out spawn_out\n+    if { [info exists spawn_out] } {\n+\tset ::last_spawn_tty_name $spawn_out(slave,name)\n+    } else {\n+\tunset ::last_spawn_tty_name\n+    }\n+    return $result\n+}\n+\n+rename spawn builtin_spawn\n+rename spawn_capture_tty_name spawn\n+\n # Default gdb_spawn procedure.\n \n proc default_gdb_spawn { } {\n@@ -2074,6 +2097,7 @@ proc default_gdb_spawn { } {\n     }\n \n     set gdb_spawn_id $res\n+    set ::gdb_tty_name $::last_spawn_tty_name\n     return 0\n }\n \n@@ -7800,13 +7824,6 @@ proc with_override { name override body } {\n # finalization function.\n proc tuiterm_env { } {\n     load_lib tuiterm.exp\n-\n-    # Do initialization.\n-    tuiterm_env_init\n-\n-    # Schedule finalization.\n-    global gdb_finish_hooks\n-    lappend gdb_finish_hooks tuiterm_env_finish\n }\n \n # Dejagnu has a version of note, but usage is not allowed outside of dejagnu."
    },
    {
      "sha": "222583f291fb53b3a566111c3a42df89efb68c3f",
      "filename": "gdb/testsuite/lib/tuiterm.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 33,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9edb1e0191e582d28848684f259fd97a24c24701/gdb/testsuite/lib/tuiterm.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9edb1e0191e582d28848684f259fd97a24c24701/gdb/testsuite/lib/tuiterm.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/tuiterm.exp?ref=9edb1e0191e582d28848684f259fd97a24c24701",
      "patch": "@@ -15,36 +15,6 @@\n \n # An ANSI terminal emulator for expect.\n \n-# The expect \"spawn\" function puts the tty name into the spawn_out\n-# array; but dejagnu doesn't export this globally.  So, we have to\n-# wrap spawn with our own function, so that we can capture this value.\n-# The value is later used in calls to stty.\n-proc tuiterm_spawn { args } {\n-    set result [uplevel builtin_spawn $args]\n-    global gdb_spawn_name\n-    upvar spawn_out spawn_out\n-    if { [info exists spawn_out] } {\n-\tset gdb_spawn_name $spawn_out(slave,name)\n-    } else {\n-\tunset gdb_spawn_name\n-    }\n-    return $result\n-}\n-\n-# Initialize tuiterm.exp environment.\n-proc tuiterm_env_init { } {\n-    # Override spawn with tui_spawn.\n-    rename spawn builtin_spawn\n-    rename tuiterm_spawn spawn\n-}\n-\n-# Finalize tuiterm.exp environment.\n-proc tuiterm_env_finish { } {\n-    # Restore spawn.\n-    rename spawn tuiterm_spawn\n-    rename builtin_spawn spawn\n-}\n-\n namespace eval Term {\n     # Size of the terminal.\n     variable _rows\n@@ -890,13 +860,12 @@ namespace eval Term {\n \tvariable _cols\n \tvariable _resize_count\n \n-\tglobal gdb_spawn_name\n \t# expect handles each argument to stty separately.  This means\n \t# that gdb will see SIGWINCH twice.  Rather than rely on this\n \t# behavior (which, after all, could be changed), we make it\n \t# explicit here.  This also simplifies waiting for the redraw.\n \t_do_resize $rows $_cols\n-\tstty rows $_rows < $gdb_spawn_name\n+\tstty rows $_rows < $::gdb_tty_name\n \t# Due to the strange column resizing behavior, and because we\n \t# don't care about this intermediate resize, we don't check\n \t# the size here.\n@@ -906,7 +875,7 @@ namespace eval Term {\n \t# than what we request from expect.  We hide this weird\n \t# details from the caller.\n \t_do_resize $_rows $cols\n-\tstty columns [expr {$_cols + 1}] < $gdb_spawn_name\n+\tstty columns [expr {$_cols + 1}] < $::gdb_tty_name\n \twait_for \"@@ resize done $_resize_count, size = ${_cols}x${rows}\"\n \tincr _resize_count\n     }"
    }
  ]
}