{
  "sha": "8e1d09292902cff8325b08a64fa5a918c7f9aa4f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGUxZDA5MjkyOTAyY2ZmODMyNWIwOGE2NGZhNWE5MThjN2Y5YWE0Zg==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-10-06T16:10:26Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-10-07T12:39:59Z"
    },
    "message": "Add NetBSD/aarch64 gdbserver support\n\nThe support is on par with NetBSD/amd64, thus GPR works,\nsingle step and software breakpoint are operational, and the\nSVR4 r_debug integration is functional.\n\ngdbserver/ChangeLog:\n\n         * netbsd-aarch64-low.cc: Add.\n         * Makefile.in (SFILES): Register \"netbsd-aarch64-low.c\".\n         * configure.srv: Add aarch64*-*-netbsd*.",
    "tree": {
      "sha": "7b8fbc5a7dcd9609b729aeef5d60207192052c83",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7b8fbc5a7dcd9609b729aeef5d60207192052c83"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8e1d09292902cff8325b08a64fa5a918c7f9aa4f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8e1d09292902cff8325b08a64fa5a918c7f9aa4f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8e1d09292902cff8325b08a64fa5a918c7f9aa4f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8e1d09292902cff8325b08a64fa5a918c7f9aa4f/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "64c03bdb6ed0b1b44ebe6f9f151fde3af83bdf38",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64c03bdb6ed0b1b44ebe6f9f151fde3af83bdf38",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/64c03bdb6ed0b1b44ebe6f9f151fde3af83bdf38"
    }
  ],
  "stats": {
    "total": 119,
    "additions": 119,
    "deletions": 0
  },
  "files": [
    {
      "sha": "cd25b1574e096d670bbd826808b1e96f24573cca",
      "filename": "gdbserver/configure.srv",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e1d09292902cff8325b08a64fa5a918c7f9aa4f/gdbserver/configure.srv",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e1d09292902cff8325b08a64fa5a918c7f9aa4f/gdbserver/configure.srv",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/configure.srv?ref=8e1d09292902cff8325b08a64fa5a918c7f9aa4f",
      "patch": "@@ -61,6 +61,12 @@ case \"${gdbserver_host}\" in\n \t\t\tipa_obj=\"${ipa_obj} linux-aarch64-tdesc-ipa.o\"\n \t\t\tipa_obj=\"${ipa_obj} arch/aarch64-ipa.o\"\n \t\t\t;;\n+  aarch64*-*-netbsd*)\tsrv_regobj=\"\"\n+\t\t\tsrv_tgtobj=\"netbsd-low.o netbsd-aarch64-low.o fork-child.o\"\n+\t\t\tsrv_tgtobj=\"${srv_tgtobj} nat/fork-inferior.o\"\n+\t\t\tsrv_tgtobj=\"${srv_tgtobj} nat/netbsd-nat.o\"\n+\t\t\tsrv_tgtobj=\"${srv_tgtobj} arch/aarch64-insn.o arch/aarch64.o\"\n+\t\t\t;;\n   arm*-*-linux*)\tsrv_tgtobj=\"$srv_linux_obj linux-arm-low.o\"\n \t\t\tsrv_tgtobj=\"$srv_tgtobj linux-arm-tdesc.o\"\n \t\t\tsrv_tgtobj=\"$srv_tgtobj linux-aarch32-low.o\""
    },
    {
      "sha": "ca76119a0e902bc9cbe745034e9f1b9141bdffc9",
      "filename": "gdbserver/netbsd-aarch64-low.cc",
      "status": "added",
      "additions": 113,
      "deletions": 0,
      "changes": 113,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e1d09292902cff8325b08a64fa5a918c7f9aa4f/gdbserver/netbsd-aarch64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e1d09292902cff8325b08a64fa5a918c7f9aa4f/gdbserver/netbsd-aarch64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/netbsd-aarch64-low.cc?ref=8e1d09292902cff8325b08a64fa5a918c7f9aa4f",
      "patch": "@@ -0,0 +1,113 @@\n+/* Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <sys/types.h>\n+#include <sys/ptrace.h>\n+#include <limits.h>\n+\n+#include \"server.h\"\n+#include \"netbsd-low.h\"\n+#include \"arch/aarch64.h\"\n+#include \"arch/aarch64-insn.h\"\n+#include \"tdesc.h\"\n+\n+/* The fill_function for the general-purpose register set.  */\n+\n+static void\n+netbsd_aarch64_fill_gregset (struct regcache *regcache, char *buf)\n+{\n+  struct reg *r = (struct reg *) buf;\n+\n+#define netbsd_aarch64_collect_gp(regnum, fld) do {\t\t\\\n+    collect_register (regcache, regnum, &r->fld);\t\t\\\n+  } while (0)\n+\n+  for (size_t i = 0; i < ARRAY_SIZE (r->r_reg); i++)\n+    netbsd_aarch64_collect_gp (AARCH64_X0_REGNUM + i, r_reg[i]);\n+\n+  netbsd_aarch64_collect_gp (AARCH64_SP_REGNUM, r_sp);\n+  netbsd_aarch64_collect_gp (AARCH64_PC_REGNUM, r_pc);\n+}\n+\n+/* The store_function for the general-purpose register set.  */\n+\n+static void\n+netbsd_aarch64_store_gregset (struct regcache *regcache, const char *buf)\n+{\n+  struct reg *r = (struct reg *) buf;\n+\n+#define netbsd_aarch64_supply_gp(regnum, fld) do {\t\t\\\n+    supply_register (regcache, regnum, &r->fld);\t\t\\\n+  } while(0)\n+\n+  for (size_t i = 0; i < ARRAY_SIZE (r->r_reg); i++)\n+    netbsd_aarch64_supply_gp (AARCH64_X0_REGNUM + i, r_reg[i]);\n+\n+  netbsd_aarch64_supply_gp (AARCH64_SP_REGNUM, r_sp);\n+  netbsd_aarch64_supply_gp (AARCH64_PC_REGNUM, r_pc);\n+}\n+\n+/* Description of all the aarch64-netbsd register sets.  */\n+\n+static const struct netbsd_regset_info netbsd_target_regsets[] =\n+{\n+  /* General Purpose Registers.  */\n+  {PT_GETREGS, PT_SETREGS, sizeof (struct reg),\n+  netbsd_aarch64_fill_gregset, netbsd_aarch64_store_gregset},\n+  /* End of list marker.  */\n+  {0, 0, -1, NULL, NULL }\n+};\n+\n+/* NetBSD target op definitions for the aarch64 architecture.  */\n+\n+class netbsd_aarch64_target : public netbsd_process_target\n+{\n+protected:\n+  const netbsd_regset_info *get_regs_info () override;\n+\n+  void low_arch_setup () override;\n+};\n+\n+/* Return the information to access registers.  */\n+\n+const netbsd_regset_info *\n+netbsd_aarch64_target::get_regs_info ()\n+{\n+  return netbsd_target_regsets;\n+}\n+\n+/* Architecture-specific setup for the current process.  */\n+\n+void\n+netbsd_aarch64_target::low_arch_setup ()\n+{\n+  target_desc *tdesc\n+    = aarch64_create_target_description (0, false);\n+\n+  static const char *expedite_regs_aarch64[] = { \"x29\", \"sp\", \"pc\", NULL };\n+  init_target_desc (tdesc, expedite_regs_aarch64);\n+\n+  current_process ()->tdesc = tdesc;\n+}\n+\n+/* The singleton target ops object.  */\n+\n+static netbsd_aarch64_target the_netbsd_aarch64_target;\n+\n+/* The NetBSD target ops object.  */\n+\n+netbsd_process_target *the_netbsd_target = &the_netbsd_aarch64_target;"
    }
  ]
}