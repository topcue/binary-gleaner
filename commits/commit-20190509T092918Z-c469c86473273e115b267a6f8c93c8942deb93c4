{
  "sha": "c469c86473273e115b267a6f8c93c8942deb93c4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzQ2OWM4NjQ3MzI3M2UxMTViMjY3YTZmOGM5M2M4OTQyZGViOTNjNA==",
  "commit": {
    "author": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2019-05-09T09:29:18Z"
    },
    "committer": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2019-05-09T09:29:18Z"
    },
    "message": "[binutils][aarch64] New SVE_ADDR_ZX operand.\n\nAdd AARCH64_OPND_SVE_ADDR_ZX operand that allows a vector of addresses\nin a Zn register, offset by an Xm register.\nThis is used with scatter/gather SVE2 instructions.\n\ngas/ChangeLog:\n\n2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* config/tc-aarch64.c (REG_ZR): Macro specifying zero register.\n\t(parse_address_main): Account for new addressing mode [Zn.S, Xm].\n\t(parse_operands): Handle new SVE_ADDR_ZX operand.\n\ninclude/ChangeLog:\n\n2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* opcode/aarch64.h (enum aarch64_opnd): New SVE_ADDR_ZX operand.\n\nopcodes/ChangeLog:\n\n2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* aarch64-asm-2.c: Regenerated.\n\t* aarch64-dis-2.c: Regenerated.\n\t* aarch64-opc-2.c: Regenerated.\n\t* aarch64-opc.c (operand_general_constraint_met_p): Constraint checking\n\tfor SVE_ADDR_ZX.\n\t(aarch64_print_operand): Add printing for SVE_ADDR_ZX.\n\t* aarch64-tbl.h (AARCH64_OPERANDS): Use new SVE_ADDR_ZX operand.",
    "tree": {
      "sha": "287fc69d0de95ceb865fef1bb99c4e1bd85b7ef8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/287fc69d0de95ceb865fef1bb99c4e1bd85b7ef8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c469c86473273e115b267a6f8c93c8942deb93c4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c469c86473273e115b267a6f8c93c8942deb93c4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c469c86473273e115b267a6f8c93c8942deb93c4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c469c86473273e115b267a6f8c93c8942deb93c4/comments",
  "author": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "116adc27470ed3682b6236e44e3b18838673036c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/116adc27470ed3682b6236e44e3b18838673036c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/116adc27470ed3682b6236e44e3b18838673036c"
    }
  ],
  "stats": {
    "total": 229,
    "additions": 159,
    "deletions": 70
  },
  "files": [
    {
      "sha": "65cc8d1d9b3fd2ce94aa62462d8abb30c52c1619",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c469c86473273e115b267a6f8c93c8942deb93c4/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c469c86473273e115b267a6f8c93c8942deb93c4/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=c469c86473273e115b267a6f8c93c8942deb93c4",
      "patch": "@@ -1,3 +1,9 @@\n+2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* config/tc-aarch64.c (REG_ZR): Macro specifying zero register.\n+\t(parse_address_main): Account for new addressing mode [Zn.S, Xm].\n+\t(parse_operands): Handle new SVE_ADDR_ZX operand.\n+\n 2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* config/tc-aarch64.c (parse_operands): Handle new SVE_Zm3_11_INDEX"
    },
    {
      "sha": "054935ef6cf4a3a08941c75e7ed1e4e349f810b7",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 48,
      "deletions": 4,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c469c86473273e115b267a6f8c93c8942deb93c4/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c469c86473273e115b267a6f8c93c8942deb93c4/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=c469c86473273e115b267a6f8c93c8942deb93c4",
      "patch": "@@ -449,6 +449,7 @@ get_reg_expected_msg (aarch64_reg_type reg_type)\n \n /* Some well known registers that we refer to directly elsewhere.  */\n #define REG_SP\t31\n+#define REG_ZR\t31\n \n /* Instructions take 4 bytes in the object file.  */\n #define INSN_SIZE\t4\n@@ -3393,6 +3394,7 @@ parse_shifter_operand_reloc (char **str, aarch64_opnd_info *operand,\n      [base,Zm.D,(S|U)XTW {#imm}] // ignores top 32 bits of Zm.D elements\n      [Zn.S,#imm]\n      [Zn.D,#imm]\n+     [Zn.S{, Xm}]\n      [Zn.S,Zm.S{,LSL #imm}]      // in ADR\n      [Zn.D,Zm.D{,LSL #imm}]      // in ADR\n      [Zn.D,Zm.D,(S|U)XTW {#imm}] // in ADR\n@@ -3558,6 +3560,7 @@ parse_address_main (char **str, aarch64_opnd_info *operand,\n \t\treturn FALSE;\n \t    }\n \t  /* We only accept:\n+\t     [base,Xm]  # For vector plus scalar SVE2 indexing.\n \t     [base,Xm{,LSL #imm}]\n \t     [base,Xm,SXTX {#imm}]\n \t     [base,Wm,(S|U)XTW {#imm}]  */\n@@ -3571,7 +3574,10 @@ parse_address_main (char **str, aarch64_opnd_info *operand,\n \t\t  return FALSE;\n \t\t}\n \t      if (aarch64_get_qualifier_esize (*base_qualifier)\n-\t\t  != aarch64_get_qualifier_esize (*offset_qualifier))\n+\t\t  != aarch64_get_qualifier_esize (*offset_qualifier)\n+\t\t  && (operand->type != AARCH64_OPND_SVE_ADDR_ZX\n+\t\t      || *base_qualifier != AARCH64_OPND_QLF_S_S\n+\t\t      || *offset_qualifier != AARCH64_OPND_QLF_X))\n \t\t{\n \t\t  set_syntax_error (_(\"offset has different size from base\"));\n \t\t  return FALSE;\n@@ -3689,7 +3695,9 @@ parse_address_main (char **str, aarch64_opnd_info *operand,\n     }\n \n   /* If at this point neither .preind nor .postind is set, we have a\n-     bare [Rn]{!}; reject [Rn]! accept [Rn] as a shorthand for [Rn,#0].  */\n+     bare [Rn]{!}; reject [Rn]! accept [Rn] as a shorthand for [Rn,#0].\n+     For SVE2 vector plus scalar offsets, allow [Zn.<T>] as shorthand for\n+     [Zn.<T>, xzr].  */\n   if (operand->addr.preind == 0 && operand->addr.postind == 0)\n     {\n       if (operand->addr.writeback)\n@@ -3700,8 +3708,17 @@ parse_address_main (char **str, aarch64_opnd_info *operand,\n \t}\n \n       operand->addr.preind = 1;\n-      inst.reloc.exp.X_op = O_constant;\n-      inst.reloc.exp.X_add_number = 0;\n+      if (operand->type == AARCH64_OPND_SVE_ADDR_ZX)\n+\t{\n+\t  operand->addr.offset.is_reg = 1;\n+\t  operand->addr.offset.regno = REG_ZR;\n+\t  *offset_qualifier = AARCH64_OPND_QLF_X;\n+\t}\n+      else\n+\t{\n+\t  inst.reloc.exp.X_op = O_constant;\n+\t  inst.reloc.exp.X_add_number = 0;\n+\t}\n     }\n \n   *str = p;\n@@ -6419,6 +6436,33 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \t  info->qualifier = offset_qualifier;\n \t  goto regoff_addr;\n \n+\tcase AARCH64_OPND_SVE_ADDR_ZX:\n+\t  /* [Zn.<T>{, <Xm>}].  */\n+\t  po_misc_or_fail (parse_sve_address (&str, info, &base_qualifier,\n+\t\t\t\t\t      &offset_qualifier));\n+\t  /* Things to check:\n+\t      base_qualifier either S_S or S_D\n+\t      offset_qualifier must be X\n+\t      */\n+\t  if ((base_qualifier != AARCH64_OPND_QLF_S_S\n+\t       && base_qualifier != AARCH64_OPND_QLF_S_D)\n+\t      || offset_qualifier != AARCH64_OPND_QLF_X)\n+\t    {\n+\t      set_syntax_error (_(\"invalid addressing mode\"));\n+\t      goto failure;\n+\t    }\n+\t  info->qualifier = base_qualifier;\n+\t  if (!info->addr.offset.is_reg || info->addr.pcrel\n+\t      || !info->addr.preind || info->addr.writeback\n+\t      || info->shifter.operator_present != 0)\n+\t    {\n+\t      set_syntax_error (_(\"invalid addressing mode\"));\n+\t      goto failure;\n+\t    }\n+\t  info->shifter.kind = AARCH64_MOD_LSL;\n+\t  break;\n+\n+\n \tcase AARCH64_OPND_SVE_ADDR_ZI_U5:\n \tcase AARCH64_OPND_SVE_ADDR_ZI_U5x2:\n \tcase AARCH64_OPND_SVE_ADDR_ZI_U5x4:"
    },
    {
      "sha": "ca6ffd1eeab1cb33581315b9707be2f950640b1d",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c469c86473273e115b267a6f8c93c8942deb93c4/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c469c86473273e115b267a6f8c93c8942deb93c4/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=c469c86473273e115b267a6f8c93c8942deb93c4",
      "patch": "@@ -1,3 +1,7 @@\n+2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* opcode/aarch64.h (enum aarch64_opnd): New SVE_ADDR_ZX operand.\n+\n 2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* opcode/aarch64.h (enum aarch64_opnd): New SVE_Zm3_11_INDEX operand."
    },
    {
      "sha": "ac440bc8124114cbb2bf0c3ae0dcf771e565789f",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c469c86473273e115b267a6f8c93c8942deb93c4/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c469c86473273e115b267a6f8c93c8942deb93c4/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=c469c86473273e115b267a6f8c93c8942deb93c4",
      "patch": "@@ -337,6 +337,7 @@ enum aarch64_opnd\n   AARCH64_OPND_SVE_ADDR_RX_LSL1,    /* SVE [<Xn|SP>, <Xm>, LSL #1].  */\n   AARCH64_OPND_SVE_ADDR_RX_LSL2,    /* SVE [<Xn|SP>, <Xm>, LSL #2].  */\n   AARCH64_OPND_SVE_ADDR_RX_LSL3,    /* SVE [<Xn|SP>, <Xm>, LSL #3].  */\n+  AARCH64_OPND_SVE_ADDR_ZX,\t    /* SVE [Zn.<T>{, <Xm>}].  */\n   AARCH64_OPND_SVE_ADDR_RZ,\t    /* SVE [<Xn|SP>, Zm.D].  */\n   AARCH64_OPND_SVE_ADDR_RZ_LSL1,    /* SVE [<Xn|SP>, Zm.D, LSL #1].  */\n   AARCH64_OPND_SVE_ADDR_RZ_LSL2,    /* SVE [<Xn|SP>, Zm.D, LSL #2].  */"
    },
    {
      "sha": "279b4c837857826874fc171a69d20f8d85ca5a1d",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c469c86473273e115b267a6f8c93c8942deb93c4/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c469c86473273e115b267a6f8c93c8942deb93c4/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=c469c86473273e115b267a6f8c93c8942deb93c4",
      "patch": "@@ -1,3 +1,13 @@\n+2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* aarch64-asm-2.c: Regenerated.\n+\t* aarch64-dis-2.c: Regenerated.\n+\t* aarch64-opc-2.c: Regenerated.\n+\t* aarch64-opc.c (operand_general_constraint_met_p): Constraint checking\n+\tfor SVE_ADDR_ZX.\n+\t(aarch64_print_operand): Add printing for SVE_ADDR_ZX.\n+\t* aarch64-tbl.h (AARCH64_OPERANDS): Use new SVE_ADDR_ZX operand.\n+\n 2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* aarch64-asm-2.c: Regenerated."
    },
    {
      "sha": "ac5bda40f32f836c776a173e1ae52c663a55140f",
      "filename": "opcodes/aarch64-asm-2.c",
      "status": "modified",
      "additions": 34,
      "deletions": 33,
      "changes": 67,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c469c86473273e115b267a6f8c93c8942deb93c4/opcodes/aarch64-asm-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c469c86473273e115b267a6f8c93c8942deb93c4/opcodes/aarch64-asm-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm-2.c?ref=c469c86473273e115b267a6f8c93c8942deb93c4",
      "patch": "@@ -628,7 +628,6 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 28:\n     case 29:\n     case 30:\n-    case 161:\n     case 162:\n     case 163:\n     case 164:\n@@ -638,7 +637,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 168:\n     case 169:\n     case 170:\n-    case 183:\n+    case 171:\n     case 184:\n     case 185:\n     case 186:\n@@ -647,8 +646,9 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 189:\n     case 190:\n     case 191:\n-    case 196:\n-    case 199:\n+    case 192:\n+    case 197:\n+    case 200:\n       return aarch64_ins_regno (self, info, code, inst, errors);\n     case 14:\n       return aarch64_ins_reg_extended (self, info, code, inst, errors);\n@@ -660,7 +660,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 32:\n     case 33:\n     case 34:\n-    case 202:\n+    case 203:\n       return aarch64_ins_reglane (self, info, code, inst, errors);\n     case 35:\n       return aarch64_ins_reglist (self, info, code, inst, errors);\n@@ -694,17 +694,17 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 80:\n     case 81:\n     case 82:\n-    case 158:\n-    case 160:\n-    case 175:\n+    case 159:\n+    case 161:\n     case 176:\n     case 177:\n     case 178:\n     case 179:\n     case 180:\n     case 181:\n     case 182:\n-    case 201:\n+    case 183:\n+    case 202:\n       return aarch64_ins_imm (self, info, code, inst, errors);\n     case 43:\n     case 44:\n@@ -714,10 +714,10 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 47:\n       return aarch64_ins_advsimd_imm_modified (self, info, code, inst, errors);\n     case 51:\n-    case 148:\n+    case 149:\n       return aarch64_ins_fpimm (self, info, code, inst, errors);\n     case 68:\n-    case 156:\n+    case 157:\n       return aarch64_ins_limm (self, info, code, inst, errors);\n     case 69:\n       return aarch64_ins_aimm (self, info, code, inst, errors);\n@@ -727,11 +727,11 @@ aarch64_insert_operand (const aarch64_operand *self,\n       return aarch64_ins_fbits (self, info, code, inst, errors);\n     case 73:\n     case 74:\n-    case 153:\n+    case 154:\n       return aarch64_ins_imm_rotate2 (self, info, code, inst, errors);\n     case 75:\n-    case 152:\n-    case 154:\n+    case 153:\n+    case 155:\n       return aarch64_ins_imm_rotate1 (self, info, code, inst, errors);\n     case 76:\n     case 77:\n@@ -802,58 +802,59 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 128:\n     case 129:\n     case 130:\n-      return aarch64_ins_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 131:\n+      return aarch64_ins_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 132:\n     case 133:\n     case 134:\n     case 135:\n     case 136:\n     case 137:\n     case 138:\n-      return aarch64_ins_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 139:\n+      return aarch64_ins_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 140:\n     case 141:\n     case 142:\n-      return aarch64_ins_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 143:\n-      return aarch64_ins_sve_addr_zz_lsl (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 144:\n-      return aarch64_ins_sve_addr_zz_sxtw (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zz_lsl (self, info, code, inst, errors);\n     case 145:\n-      return aarch64_ins_sve_addr_zz_uxtw (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zz_sxtw (self, info, code, inst, errors);\n     case 146:\n-      return aarch64_ins_sve_aimm (self, info, code, inst, errors);\n+      return aarch64_ins_sve_addr_zz_uxtw (self, info, code, inst, errors);\n     case 147:\n+      return aarch64_ins_sve_aimm (self, info, code, inst, errors);\n+    case 148:\n       return aarch64_ins_sve_asimm (self, info, code, inst, errors);\n-    case 149:\n-      return aarch64_ins_sve_float_half_one (self, info, code, inst, errors);\n     case 150:\n-      return aarch64_ins_sve_float_half_two (self, info, code, inst, errors);\n+      return aarch64_ins_sve_float_half_one (self, info, code, inst, errors);\n     case 151:\n+      return aarch64_ins_sve_float_half_two (self, info, code, inst, errors);\n+    case 152:\n       return aarch64_ins_sve_float_zero_one (self, info, code, inst, errors);\n-    case 155:\n+    case 156:\n       return aarch64_ins_inv_limm (self, info, code, inst, errors);\n-    case 157:\n+    case 158:\n       return aarch64_ins_sve_limm_mov (self, info, code, inst, errors);\n-    case 159:\n+    case 160:\n       return aarch64_ins_sve_scale (self, info, code, inst, errors);\n-    case 171:\n     case 172:\n-      return aarch64_ins_sve_shlimm (self, info, code, inst, errors);\n     case 173:\n+      return aarch64_ins_sve_shlimm (self, info, code, inst, errors);\n     case 174:\n+    case 175:\n       return aarch64_ins_sve_shrimm (self, info, code, inst, errors);\n-    case 192:\n     case 193:\n     case 194:\n     case 195:\n+    case 196:\n       return aarch64_ins_sve_quad_index (self, info, code, inst, errors);\n-    case 197:\n-      return aarch64_ins_sve_index (self, info, code, inst, errors);\n     case 198:\n-    case 200:\n+      return aarch64_ins_sve_index (self, info, code, inst, errors);\n+    case 199:\n+    case 201:\n       return aarch64_ins_sve_reglist (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }"
    },
    {
      "sha": "e6952bd7a29fb8c0f0f881de1523e45f84e9765e",
      "filename": "opcodes/aarch64-dis-2.c",
      "status": "modified",
      "additions": 34,
      "deletions": 33,
      "changes": 67,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c469c86473273e115b267a6f8c93c8942deb93c4/opcodes/aarch64-dis-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c469c86473273e115b267a6f8c93c8942deb93c4/opcodes/aarch64-dis-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis-2.c?ref=c469c86473273e115b267a6f8c93c8942deb93c4",
      "patch": "@@ -20059,7 +20059,6 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 28:\n     case 29:\n     case 30:\n-    case 161:\n     case 162:\n     case 163:\n     case 164:\n@@ -20069,7 +20068,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 168:\n     case 169:\n     case 170:\n-    case 183:\n+    case 171:\n     case 184:\n     case 185:\n     case 186:\n@@ -20078,8 +20077,9 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 189:\n     case 190:\n     case 191:\n-    case 196:\n-    case 199:\n+    case 192:\n+    case 197:\n+    case 200:\n       return aarch64_ext_regno (self, info, code, inst, errors);\n     case 9:\n       return aarch64_ext_regrt_sysins (self, info, code, inst, errors);\n@@ -20095,7 +20095,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 32:\n     case 33:\n     case 34:\n-    case 202:\n+    case 203:\n       return aarch64_ext_reglane (self, info, code, inst, errors);\n     case 35:\n       return aarch64_ext_reglist (self, info, code, inst, errors);\n@@ -20130,17 +20130,17 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 80:\n     case 81:\n     case 82:\n-    case 158:\n-    case 160:\n-    case 175:\n+    case 159:\n+    case 161:\n     case 176:\n     case 177:\n     case 178:\n     case 179:\n     case 180:\n     case 181:\n     case 182:\n-    case 201:\n+    case 183:\n+    case 202:\n       return aarch64_ext_imm (self, info, code, inst, errors);\n     case 43:\n     case 44:\n@@ -20152,10 +20152,10 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 48:\n       return aarch64_ext_shll_imm (self, info, code, inst, errors);\n     case 51:\n-    case 148:\n+    case 149:\n       return aarch64_ext_fpimm (self, info, code, inst, errors);\n     case 68:\n-    case 156:\n+    case 157:\n       return aarch64_ext_limm (self, info, code, inst, errors);\n     case 69:\n       return aarch64_ext_aimm (self, info, code, inst, errors);\n@@ -20165,11 +20165,11 @@ aarch64_extract_operand (const aarch64_operand *self,\n       return aarch64_ext_fbits (self, info, code, inst, errors);\n     case 73:\n     case 74:\n-    case 153:\n+    case 154:\n       return aarch64_ext_imm_rotate2 (self, info, code, inst, errors);\n     case 75:\n-    case 152:\n-    case 154:\n+    case 153:\n+    case 155:\n       return aarch64_ext_imm_rotate1 (self, info, code, inst, errors);\n     case 76:\n     case 77:\n@@ -20240,58 +20240,59 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 128:\n     case 129:\n     case 130:\n-      return aarch64_ext_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 131:\n+      return aarch64_ext_sve_addr_rr_lsl (self, info, code, inst, errors);\n     case 132:\n     case 133:\n     case 134:\n     case 135:\n     case 136:\n     case 137:\n     case 138:\n-      return aarch64_ext_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 139:\n+      return aarch64_ext_sve_addr_rz_xtw (self, info, code, inst, errors);\n     case 140:\n     case 141:\n     case 142:\n-      return aarch64_ext_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 143:\n-      return aarch64_ext_sve_addr_zz_lsl (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_zi_u5 (self, info, code, inst, errors);\n     case 144:\n-      return aarch64_ext_sve_addr_zz_sxtw (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_zz_lsl (self, info, code, inst, errors);\n     case 145:\n-      return aarch64_ext_sve_addr_zz_uxtw (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_zz_sxtw (self, info, code, inst, errors);\n     case 146:\n-      return aarch64_ext_sve_aimm (self, info, code, inst, errors);\n+      return aarch64_ext_sve_addr_zz_uxtw (self, info, code, inst, errors);\n     case 147:\n+      return aarch64_ext_sve_aimm (self, info, code, inst, errors);\n+    case 148:\n       return aarch64_ext_sve_asimm (self, info, code, inst, errors);\n-    case 149:\n-      return aarch64_ext_sve_float_half_one (self, info, code, inst, errors);\n     case 150:\n-      return aarch64_ext_sve_float_half_two (self, info, code, inst, errors);\n+      return aarch64_ext_sve_float_half_one (self, info, code, inst, errors);\n     case 151:\n+      return aarch64_ext_sve_float_half_two (self, info, code, inst, errors);\n+    case 152:\n       return aarch64_ext_sve_float_zero_one (self, info, code, inst, errors);\n-    case 155:\n+    case 156:\n       return aarch64_ext_inv_limm (self, info, code, inst, errors);\n-    case 157:\n+    case 158:\n       return aarch64_ext_sve_limm_mov (self, info, code, inst, errors);\n-    case 159:\n+    case 160:\n       return aarch64_ext_sve_scale (self, info, code, inst, errors);\n-    case 171:\n     case 172:\n-      return aarch64_ext_sve_shlimm (self, info, code, inst, errors);\n     case 173:\n+      return aarch64_ext_sve_shlimm (self, info, code, inst, errors);\n     case 174:\n+    case 175:\n       return aarch64_ext_sve_shrimm (self, info, code, inst, errors);\n-    case 192:\n     case 193:\n     case 194:\n     case 195:\n+    case 196:\n       return aarch64_ext_sve_quad_index (self, info, code, inst, errors);\n-    case 197:\n-      return aarch64_ext_sve_index (self, info, code, inst, errors);\n     case 198:\n-    case 200:\n+      return aarch64_ext_sve_index (self, info, code, inst, errors);\n+    case 199:\n+    case 201:\n       return aarch64_ext_sve_reglist (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }"
    },
    {
      "sha": "eef857eff1ef8f66e47502822cfa08e1995360b8",
      "filename": "opcodes/aarch64-opc-2.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c469c86473273e115b267a6f8c93c8942deb93c4/opcodes/aarch64-opc-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c469c86473273e115b267a6f8c93c8942deb93c4/opcodes/aarch64-opc-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc-2.c?ref=c469c86473273e115b267a6f8c93c8942deb93c4",
      "patch": "@@ -151,6 +151,7 @@ const struct aarch64_operand aarch64_operands[] =\n   {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_RX_LSL1\", (1 << OPD_F_OD_LSB) | OPD_F_NO_ZR | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_Rm}, \"an address with a scalar register offset\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_RX_LSL2\", (2 << OPD_F_OD_LSB) | OPD_F_NO_ZR | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_Rm}, \"an address with a scalar register offset\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_RX_LSL3\", (3 << OPD_F_OD_LSB) | OPD_F_NO_ZR | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_Rm}, \"an address with a scalar register offset\"},\n+  {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_ZX\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_Zn,FLD_Rm}, \"vector of address with a scalar register offset\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_RZ\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_SVE_Zm_16}, \"an address with a vector register offset\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_RZ_LSL1\", 1 << OPD_F_OD_LSB | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_SVE_Zm_16}, \"an address with a vector register offset\"},\n   {AARCH64_OPND_CLASS_ADDRESS, \"SVE_ADDR_RZ_LSL2\", 2 << OPD_F_OD_LSB | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_Rn,FLD_SVE_Zm_16}, \"an address with a vector register offset\"},"
    },
    {
      "sha": "23b1503eeb10933ee1cf9645b77f27e42acda755",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c469c86473273e115b267a6f8c93c8942deb93c4/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c469c86473273e115b267a6f8c93c8942deb93c4/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=c469c86473273e115b267a6f8c93c8942deb93c4",
      "patch": "@@ -1899,6 +1899,17 @@ operand_general_constraint_met_p (const aarch64_opnd_info *opnds, int idx,\n \t  max_value = 7;\n \t  goto sve_imm_offset;\n \n+\tcase AARCH64_OPND_SVE_ADDR_ZX:\n+\t  /* Everything is already ensured by parse_operands or\n+\t     aarch64_ext_sve_addr_rr_lsl (because this is a very specific\n+\t     argument type).  */\n+\t  assert (opnd->addr.offset.is_reg);\n+\t  assert (opnd->addr.preind);\n+\t  assert ((aarch64_operands[type].flags & OPD_F_NO_ZR) == 0);\n+\t  assert (opnd->shifter.kind == AARCH64_MOD_LSL);\n+\t  assert (opnd->shifter.operator_present == 0);\n+\t  break;\n+\n \tcase AARCH64_OPND_SVE_ADDR_R:\n \tcase AARCH64_OPND_SVE_ADDR_RR:\n \tcase AARCH64_OPND_SVE_ADDR_RR_LSL1:\n@@ -3583,6 +3594,13 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n \t get_offset_int_reg_name (opnd));\n       break;\n \n+    case AARCH64_OPND_SVE_ADDR_ZX:\n+      print_register_offset_address\n+\t(buf, size, opnd,\n+\t get_addr_sve_reg_name (opnd->addr.base_regno, opnd->qualifier),\n+\t get_64bit_int_reg_name (opnd->addr.offset.regno, 0));\n+      break;\n+\n     case AARCH64_OPND_SVE_ADDR_RZ:\n     case AARCH64_OPND_SVE_ADDR_RZ_LSL1:\n     case AARCH64_OPND_SVE_ADDR_RZ_LSL2:"
    },
    {
      "sha": "ba5d6b579fc62aa01c70860146598f99c67aa158",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c469c86473273e115b267a6f8c93c8942deb93c4/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c469c86473273e115b267a6f8c93c8942deb93c4/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=c469c86473273e115b267a6f8c93c8942deb93c4",
      "patch": "@@ -4807,6 +4807,9 @@ struct aarch64_opcode aarch64_opcode_table[] =\n     Y(ADDRESS, sve_addr_rr_lsl, \"SVE_ADDR_RX_LSL3\",\t\t\t\\\n       (3 << OPD_F_OD_LSB) | OPD_F_NO_ZR, F(FLD_Rn,FLD_Rm),\t\t\\\n       \"an address with a scalar register offset\")\t\t\t\\\n+    Y(ADDRESS, sve_addr_rr_lsl, \"SVE_ADDR_ZX\",\t\t\t\t\\\n+      0 << OPD_F_OD_LSB , F(FLD_SVE_Zn,FLD_Rm),\t\t\t\t\\\n+      \"vector of address with a scalar register offset\")\t\t\\\n     Y(ADDRESS, sve_addr_rr_lsl, \"SVE_ADDR_RZ\", 0 << OPD_F_OD_LSB,\t\\\n       F(FLD_Rn,FLD_SVE_Zm_16),\t\t\t\t\t\t\\\n       \"an address with a vector register offset\")\t\t\t\\"
    }
  ]
}