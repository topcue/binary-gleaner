{
  "sha": "a084a2a6a181c2206be4ba29b21dc0ae441ab4e9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTA4NGEyYTZhMTgxYzIyMDZiZTRiYTI5YjIxZGMwYWU0NDFhYjRlOQ==",
  "commit": {
    "author": {
      "name": "Ali Tamur",
      "email": "tamur@google.com",
      "date": "2019-08-27T00:53:24Z"
    },
    "committer": {
      "name": "Ali Tamur",
      "email": "tamur@google.com",
      "date": "2019-09-10T01:35:43Z"
    },
    "message": "DWARF 5 support: Handle dwo_id\n\n* DW_UT_skeleton and DW_UT_split_compile compilation units have dwo ids\nto match the compilation unit in the skeleton and .dwo files. The dwo_id is\nin the header.\n\nTested with CC=/usr/bin/gcc (version 8.3.0) against master branch (also with\n-gsplit-dwarf and -gdwarf-4 flags) and there was no increase in the set of\ntests that fails.\n\nThis is part of an effort to support DWARF 5 in gdb.\n\ngdb/ChangeLog:\n\n        * dwarf2read.c (comp_unit_head): Update comment.\n        (dwarf2_dwo_name): New function declaration.\n        (dwarf_unit_type_name): New function declaration.\n        (read_comp_unit_head): Add support for new compilation units,\n        DW_UT_partial, DW_UT_skeleton, DW_UT_split_compile, DW_UT_split_type.\n        Particularly, DW_UT_skeleton and DW_UT_split_compile have dwo_id\n        (currently named as \"signature\") in their header. Also clarify error\n        messages.\n        (lookup_dwo_id): New function. Returns the dwo id of the given\n        compile unit.\n        (lookup_dwo_unit): Use the new lookup_dwo_id function.\n        (init_cutu_and_read_dies): Use the new dwarf2_dwo_name and lookup_dwo_id\n        functions.\n        (create_dwo_cu_reader): Use the added lookup_dwo_id function.\n        (dwarf2_dwo_name): Get the dwo name if present.\n        (dwarf_unit_type_name): Convert DW_UT_* types to string for diagnostic\n        purposes.",
    "tree": {
      "sha": "26c98104519f4566444b83757fecb2aae3431ac4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/26c98104519f4566444b83757fecb2aae3431ac4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a084a2a6a181c2206be4ba29b21dc0ae441ab4e9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a084a2a6a181c2206be4ba29b21dc0ae441ab4e9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a084a2a6a181c2206be4ba29b21dc0ae441ab4e9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a084a2a6a181c2206be4ba29b21dc0ae441ab4e9/comments",
  "author": {
    "login": "alitamur",
    "id": 59383390,
    "node_id": "MDQ6VXNlcjU5MzgzMzkw",
    "avatar_url": "https://avatars.githubusercontent.com/u/59383390?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alitamur",
    "html_url": "https://github.com/alitamur",
    "followers_url": "https://api.github.com/users/alitamur/followers",
    "following_url": "https://api.github.com/users/alitamur/following{/other_user}",
    "gists_url": "https://api.github.com/users/alitamur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alitamur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alitamur/subscriptions",
    "organizations_url": "https://api.github.com/users/alitamur/orgs",
    "repos_url": "https://api.github.com/users/alitamur/repos",
    "events_url": "https://api.github.com/users/alitamur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alitamur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "alitamur",
    "id": 59383390,
    "node_id": "MDQ6VXNlcjU5MzgzMzkw",
    "avatar_url": "https://avatars.githubusercontent.com/u/59383390?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alitamur",
    "html_url": "https://github.com/alitamur",
    "followers_url": "https://api.github.com/users/alitamur/followers",
    "following_url": "https://api.github.com/users/alitamur/following{/other_user}",
    "gists_url": "https://api.github.com/users/alitamur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alitamur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alitamur/subscriptions",
    "organizations_url": "https://api.github.com/users/alitamur/orgs",
    "repos_url": "https://api.github.com/users/alitamur/repos",
    "events_url": "https://api.github.com/users/alitamur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alitamur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b76c1a8361f78302d760b0f79f780193c801a724",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b76c1a8361f78302d760b0f79f780193c801a724",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b76c1a8361f78302d760b0f79f780193c801a724"
    }
  ],
  "stats": {
    "total": 140,
    "additions": 115,
    "deletions": 25
  },
  "files": [
    {
      "sha": "9ad7227e0baa7de9a7fd867c79fa33ac18f8bfae",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a084a2a6a181c2206be4ba29b21dc0ae441ab4e9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a084a2a6a181c2206be4ba29b21dc0ae441ab4e9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a084a2a6a181c2206be4ba29b21dc0ae441ab4e9",
      "patch": "@@ -1,3 +1,24 @@\n+\n+2019-09-09  Ali Tamur  <tamur@google.com>\n+\n+\t* dwarf2read.c (comp_unit_head): Update comment.                     \n+\t(dwarf2_dwo_name): New function declaration.                             \n+\t(dwarf_unit_type_name): New function declaration.                        \n+\t(read_comp_unit_head): Add support for new compilation units,            \n+\tDW_UT_partial, DW_UT_skeleton, DW_UT_split_compile, DW_UT_split_type.    \n+\tParticularly, DW_UT_skeleton and DW_UT_split_compile have dwo_id         \n+\t(currently named as \"signature\") in their header. Also clarify error     \n+\tmessages.                                                                \n+\t(lookup_dwo_id): New function. Returns the dwo id of the given           \n+\tcompile unit.                                                            \n+\t(lookup_dwo_unit): Use the new lookup_dwo_id function.                   \n+\t(init_cutu_and_read_dies): Use the new dwarf2_dwo_name and lookup_dwo_id \n+\tfunctions.                                                               \n+\t(create_dwo_cu_reader): Use the added lookup_dwo_id function.            \n+\t(dwarf2_dwo_name): Get the dwo name if present.                          \n+\t(dwarf_unit_type_name): Convert DW_UT_* types to string for diagnostic   \n+\tpurposes.\n+\n 2019-09-09  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-win.c (tui_all_windows_info): Use ui_out."
    },
    {
      "sha": "a75941867a312b3a5ee76bce2863e01c50c9a428",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 94,
      "deletions": 25,
      "changes": 119,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a084a2a6a181c2206be4ba29b21dc0ae441ab4e9/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a084a2a6a181c2206be4ba29b21dc0ae441ab4e9/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=a084a2a6a181c2206be4ba29b21dc0ae441ab4e9",
      "patch": "@@ -373,8 +373,11 @@ struct comp_unit_head\n      This will be the first byte following the compilation unit header.  */\n   cu_offset first_die_cu_offset;\n \n-  /* 64-bit signature of this type unit - it is valid only for\n-     UNIT_TYPE DW_UT_type.  */\n+\n+  /* 64-bit signature of this unit. For type units, it denotes the signature of\n+     the type (DW_UT_type in DWARF 4, additionally DW_UT_split_type in DWARF 5).\n+     Also used in DWARF 5, to denote the dwo id when the unit type is\n+     DW_UT_skeleton or DW_UT_split_compile.  */\n   ULONGEST signature;\n \n   /* For types, offset in the type's DIE of the type defined by this TU.  */\n@@ -1579,6 +1582,8 @@ static struct attribute *dwarf2_attr_no_follow (struct die_info *,\n static const char *dwarf2_string_attr (struct die_info *die, unsigned int name,\n                                        struct dwarf2_cu *cu);\n \n+static const char *dwarf2_dwo_name (struct die_info *die, struct dwarf2_cu *cu);\n+\n static int dwarf2_flag_true_p (struct die_info *die, unsigned name,\n                                struct dwarf2_cu *cu);\n \n@@ -1761,6 +1766,8 @@ static const char *dwarf_tag_name (unsigned int);\n \n static const char *dwarf_attr_name (unsigned int);\n \n+static const char *dwarf_unit_type_name (int unit_type);\n+\n static const char *dwarf_form_name (unsigned int);\n \n static const char *dwarf_bool_name (unsigned int);\n@@ -6389,18 +6396,28 @@ read_comp_unit_head (struct comp_unit_head *cu_header,\n       switch (cu_header->unit_type)\n \t{\n \tcase DW_UT_compile:\n+\tcase DW_UT_partial:\n+\tcase DW_UT_skeleton:\n+\tcase DW_UT_split_compile:\n \t  if (section_kind != rcuh_kind::COMPILE)\n \t    error (_(\"Dwarf Error: wrong unit_type in compilation unit header \"\n-\t\t   \"(is DW_UT_compile, should be DW_UT_type) [in module %s]\"),\n-\t\t   filename);\n+\t\t   \"(is %s, should be %s) [in module %s]\"),\n+\t\t   dwarf_unit_type_name (cu_header->unit_type),\n+\t\t   dwarf_unit_type_name (DW_UT_type), filename);\n \t  break;\n \tcase DW_UT_type:\n+\tcase DW_UT_split_type:\n \t  section_kind = rcuh_kind::TYPE;\n \t  break;\n \tdefault:\n \t  error (_(\"Dwarf Error: wrong unit_type in compilation unit header \"\n-\t\t \"(is %d, should be %d or %d) [in module %s]\"),\n-\t\t cu_header->unit_type, DW_UT_compile, DW_UT_type, filename);\n+\t\t \"(is %#04x, should be one of: %s, %s, %s, %s or %s) \"\n+\t\t \"[in module %s]\"), cu_header->unit_type,\n+\t\t dwarf_unit_type_name (DW_UT_compile),\n+\t\t dwarf_unit_type_name (DW_UT_skeleton),\n+\t\t dwarf_unit_type_name (DW_UT_split_compile),\n+\t\t dwarf_unit_type_name (DW_UT_type),\n+\t\t dwarf_unit_type_name (DW_UT_split_type), filename);\n \t}\n \n       cu_header->addr_size = read_1_byte (abfd, info_ptr);\n@@ -6421,13 +6438,19 @@ read_comp_unit_head (struct comp_unit_head *cu_header,\n \t\t    _(\"read_comp_unit_head: dwarf from non elf file\"));\n   cu_header->signed_addr_p = signed_addr;\n \n-  if (section_kind == rcuh_kind::TYPE)\n-    {\n-      LONGEST type_offset;\n+  bool header_has_signature = section_kind == rcuh_kind::TYPE\n+    || cu_header->unit_type == DW_UT_skeleton\n+    || cu_header->unit_type == DW_UT_split_compile;\n \n+  if (header_has_signature)\n+    {\n       cu_header->signature = read_8_bytes (abfd, info_ptr);\n       info_ptr += 8;\n+    }\n \n+  if (section_kind == rcuh_kind::TYPE)\n+    {\n+      LONGEST type_offset;\n       type_offset = read_offset (abfd, info_ptr, cu_header, &bytes_read);\n       info_ptr += bytes_read;\n       cu_header->type_cu_offset_in_tu = (cu_offset) type_offset;\n@@ -7296,6 +7319,21 @@ read_cutu_die_from_dwo (struct dwarf2_per_cu_data *this_cu,\n   return 1;\n }\n \n+/* Return the signature of the compile unit, if found. In DWARF 4 and before,\n+   the signature is in the DW_AT_GNU_dwo_id attribute. In DWARF 5 and later, the\n+   signature is part of the header.  */\n+static gdb::optional<ULONGEST>\n+lookup_dwo_id (struct dwarf2_cu *cu, struct die_info* comp_unit_die)\n+{\n+  if (cu->header.version >= 5)\n+    return cu->header.signature;\n+  struct attribute *attr;\n+  attr = dwarf2_attr (comp_unit_die, DW_AT_GNU_dwo_id, cu);\n+  if (attr == nullptr)\n+    return gdb::optional<ULONGEST> ();\n+  return DW_UNSND (attr);\n+}\n+\n /* Subroutine of init_cutu_and_read_dies to simplify it.\n    Look up the DWO unit specified by COMP_UNIT_DIE of THIS_CU.\n    Returns NULL if the specified DWO unit cannot be found.  */\n@@ -7305,14 +7343,13 @@ lookup_dwo_unit (struct dwarf2_per_cu_data *this_cu,\n \t\t struct die_info *comp_unit_die)\n {\n   struct dwarf2_cu *cu = this_cu->cu;\n-  ULONGEST signature;\n   struct dwo_unit *dwo_unit;\n   const char *comp_dir, *dwo_name;\n \n   gdb_assert (cu != NULL);\n \n   /* Yeah, we look dwo_name up again, but it simplifies the code.  */\n-  dwo_name = dwarf2_string_attr (comp_unit_die, DW_AT_GNU_dwo_name, cu);\n+  dwo_name = dwarf2_dwo_name (comp_unit_die, cu);\n   comp_dir = dwarf2_string_attr (comp_unit_die, DW_AT_comp_dir, cu);\n \n   if (this_cu->is_debug_types)\n@@ -7322,21 +7359,17 @@ lookup_dwo_unit (struct dwarf2_per_cu_data *this_cu,\n       /* Since this_cu is the first member of struct signatured_type,\n \t we can go from a pointer to one to a pointer to the other.  */\n       sig_type = (struct signatured_type *) this_cu;\n-      signature = sig_type->signature;\n       dwo_unit = lookup_dwo_type_unit (sig_type, dwo_name, comp_dir);\n     }\n   else\n     {\n-      struct attribute *attr;\n-\n-      attr = dwarf2_attr (comp_unit_die, DW_AT_GNU_dwo_id, cu);\n-      if (! attr)\n+      gdb::optional<ULONGEST> signature = lookup_dwo_id (cu, comp_unit_die);\n+      if (!signature.has_value ())\n \terror (_(\"Dwarf Error: missing dwo_id for dwo_name %s\"\n \t\t \" [in module %s]\"),\n \t       dwo_name, objfile_name (this_cu->dwarf2_per_objfile->objfile));\n-      signature = DW_UNSND (attr);\n       dwo_unit = lookup_dwo_comp_unit (this_cu, dwo_name, comp_dir,\n-\t\t\t\t       signature);\n+\t\t\t\t       *signature);\n     }\n \n   return dwo_unit;\n@@ -7448,7 +7481,6 @@ init_cutu_and_read_dies (struct dwarf2_per_cu_data *this_cu,\n   struct die_reader_specs reader;\n   struct die_info *comp_unit_die;\n   int has_children;\n-  struct attribute *attr;\n   struct signatured_type *sig_type = NULL;\n   struct dwarf2_section_info *abbrev_section;\n   /* Non-zero if CU currently points to a DWO file and we need to\n@@ -7585,9 +7617,9 @@ init_cutu_and_read_dies (struct dwarf2_per_cu_data *this_cu,\n \n      Note that if USE_EXISTING_OK != 0, and THIS_CU->cu already contains a\n      DWO CU, that this test will fail (the attribute will not be present).  */\n-  attr = dwarf2_attr (comp_unit_die, DW_AT_GNU_dwo_name, cu);\n+  const char *dwo_name = dwarf2_dwo_name (comp_unit_die, cu);\n   abbrev_table_up dwo_abbrev_table;\n-  if (attr)\n+  if (dwo_name != nullptr)\n     {\n       struct dwo_unit *dwo_unit;\n       struct die_info *dwo_comp_unit_die;\n@@ -11838,10 +11870,9 @@ create_dwo_cu_reader (const struct die_reader_specs *reader,\n   struct create_dwo_cu_data *data = (struct create_dwo_cu_data *) datap;\n   struct dwo_file *dwo_file = data->dwo_file;\n   struct dwo_unit *dwo_unit = &data->dwo_unit;\n-  struct attribute *attr;\n \n-  attr = dwarf2_attr (comp_unit_die, DW_AT_GNU_dwo_id, cu);\n-  if (attr == NULL)\n+  gdb::optional<ULONGEST> signature = lookup_dwo_id (cu, comp_unit_die);\n+  if (!signature.has_value ())\n     {\n       complaint (_(\"Dwarf Error: debug entry at offset %s is missing\"\n \t\t   \" its dwo_id [in module %s]\"),\n@@ -11850,7 +11881,7 @@ create_dwo_cu_reader (const struct die_reader_specs *reader,\n     }\n \n   dwo_unit->dwo_file = dwo_file;\n-  dwo_unit->signature = DW_UNSND (attr);\n+  dwo_unit->signature = *signature;\n   dwo_unit->section = section;\n   dwo_unit->sect_off = sect_off;\n   dwo_unit->length = cu->per_cu->length;\n@@ -20112,6 +20143,17 @@ dwarf2_string_attr (struct die_info *die, unsigned int name, struct dwarf2_cu *c\n   return str;\n }\n \n+/* Return the dwo name or NULL if not present. If present, it is in either\n+   DW_AT_GNU_dwo_name or DW_AT_dwo_name atrribute.  */\n+static const char *\n+dwarf2_dwo_name (struct die_info *die, struct dwarf2_cu *cu)\n+{\n+  const char *dwo_name = dwarf2_string_attr (die, DW_AT_GNU_dwo_name, cu);\n+  if (dwo_name == nullptr)\n+    dwo_name = dwarf2_string_attr (die, DW_AT_dwo_name, cu);\n+  return dwo_name;\n+}\n+\n /* Return non-zero iff the attribute NAME is defined for the given DIE,\n    and holds a non-zero value.  This function should only be used for\n    DW_FORM_flag or DW_FORM_flag_present attributes.  */\n@@ -22811,6 +22853,33 @@ dwarf_attr_name (unsigned attr)\n   return name;\n }\n \n+/* Convert a unit type to corresponding DW_UT name.  */\n+\n+static const char *\n+dwarf_unit_type_name (int unit_type) {\n+  switch (unit_type)\n+    {\n+      case 0x01:\n+\treturn \"DW_UT_compile (0x01)\";\n+      case 0x02:\n+\treturn \"DW_UT_type (0x02)\";\n+      case 0x03:\n+\treturn \"DW_UT_partial (0x03)\";\n+      case 0x04:\n+\treturn \"DW_UT_skeleton (0x04)\";\n+      case 0x05:\n+\treturn \"DW_UT_split_compile (0x05)\";\n+      case 0x06:\n+\treturn \"DW_UT_split_type (0x06)\";\n+      case 0x80:\n+\treturn \"DW_UT_lo_user (0x80)\";\n+      case 0xff:\n+\treturn \"DW_UT_hi_user (0xff)\";\n+      default:\n+\treturn nullptr;\n+    }\n+}\n+\n /* Convert a DWARF value form code into its string name.  */\n \n static const char *"
    }
  ]
}