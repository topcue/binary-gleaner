{
  "sha": "3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2Q5NjcwMDFlY2QzYjMyNWZjMzlkN2Y1M2ViZjcwNTRkMWVjZDUwMw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-06-08T19:25:53Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-06-08T19:26:01Z"
    },
    "message": "gdb: remove TYPE_INDEX_TYPE macro\n\nRemove `TYPE_INDEX_TYPE` macro, changing all the call sites to use\n`type::index_type` directly.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (TYPE_INDEX_TYPE): Remove.  Change all call sites\n\tto use type::index_type instead.\n\nChange-Id: I56715df0bdec89463cda6bd341dac0e01b2faf84",
    "tree": {
      "sha": "49d06d14ea849b5a58b207dc5e7e4303b3ae0b67",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/49d06d14ea849b5a58b207dc5e7e4303b3ae0b67"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "262abc0d67af006a709d0935940f9c9f5f7c5ee5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/262abc0d67af006a709d0935940f9c9f5f7c5ee5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/262abc0d67af006a709d0935940f9c9f5f7c5ee5"
    }
  ],
  "stats": {
    "total": 159,
    "additions": 81,
    "deletions": 78
  },
  "files": [
    {
      "sha": "38f9fadf5f9546937ed223d623e9adc37d2d98c1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -1,3 +1,8 @@\n+2020-06-08  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (TYPE_INDEX_TYPE): Remove.  Change all call sites\n+\tto use type::index_type instead.\n+\n 2020-06-08  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (struct type) <index_type, set_index_type>: New"
    },
    {
      "sha": "4f6c6b465aea3d69a6136966384b4fbd5df0a1bc",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -2081,7 +2081,7 @@ constrained_packed_array_type (struct type *type, long *elt_bits)\n     index_type = to_fixed_range_type (TYPE_FIELD_TYPE (index_type_desc, 0),\n \t\t\t\t      NULL);\n   else\n-    index_type = TYPE_INDEX_TYPE (type);\n+    index_type = type->index_type ();\n \n   new_type = alloc_type_copy (type);\n   new_elt_type =\n@@ -2235,7 +2235,7 @@ value_subscript_packed (struct value *arr, int arity, struct value **ind)\n \t     \"something other than a packed array\"));\n       else\n         {\n-          struct type *range_type = TYPE_INDEX_TYPE (elt_type);\n+          struct type *range_type = elt_type->index_type ();\n           LONGEST lowerbound, upperbound;\n           LONGEST idx;\n \n@@ -2730,7 +2730,7 @@ ada_value_ptr_subscript (struct value *arr, int arity, struct value **ind)\n         error (_(\"too many subscripts (%d expected)\"), k);\n       arr = value_cast (lookup_pointer_type (TYPE_TARGET_TYPE (type)),\n                         value_copy (arr));\n-      get_discrete_bounds (TYPE_INDEX_TYPE (type), &lwb, &upb);\n+      get_discrete_bounds (type->index_type (), &lwb, &upb);\n       arr = value_ptradd (arr, pos_atr (ind[k]) - lwb);\n       type = TYPE_TARGET_TYPE (type);\n     }\n@@ -2747,14 +2747,14 @@ ada_value_slice_from_ptr (struct value *array_ptr, struct type *type,\n                           int low, int high)\n {\n   struct type *type0 = ada_check_typedef (type);\n-  struct type *base_index_type = TYPE_TARGET_TYPE (TYPE_INDEX_TYPE (type0));\n+  struct type *base_index_type = TYPE_TARGET_TYPE (type0->index_type ());\n   struct type *index_type\n     = create_static_range_type (NULL, base_index_type, low, high);\n   struct type *slice_type = create_array_type_with_stride\n \t\t\t      (NULL, TYPE_TARGET_TYPE (type0), index_type,\n \t\t\t       type0->dyn_prop (DYN_PROP_BYTE_STRIDE),\n \t\t\t       TYPE_FIELD_BITSIZE (type0, 0));\n-  int base_low =  ada_discrete_type_low_bound (TYPE_INDEX_TYPE (type0));\n+  int base_low =  ada_discrete_type_low_bound (type0->index_type ());\n   LONGEST base_low_pos, low_pos;\n   CORE_ADDR base;\n \n@@ -2777,9 +2777,9 @@ static struct value *\n ada_value_slice (struct value *array, int low, int high)\n {\n   struct type *type = ada_check_typedef (value_type (array));\n-  struct type *base_index_type = TYPE_TARGET_TYPE (TYPE_INDEX_TYPE (type));\n+  struct type *base_index_type = TYPE_TARGET_TYPE (type->index_type ());\n   struct type *index_type\n-    = create_static_range_type (NULL, TYPE_INDEX_TYPE (type), low, high);\n+    = create_static_range_type (NULL, type->index_type (), low, high);\n   struct type *slice_type = create_array_type_with_stride\n \t\t\t      (NULL, TYPE_TARGET_TYPE (type), index_type,\n \t\t\t       type->dyn_prop (DYN_PROP_BYTE_STRIDE),\n@@ -2892,7 +2892,7 @@ ada_index_type (struct type *type, int n, const char *name)\n \n       for (i = 1; i < n; i += 1)\n         type = TYPE_TARGET_TYPE (type);\n-      result_type = TYPE_TARGET_TYPE (TYPE_INDEX_TYPE (type));\n+      result_type = TYPE_TARGET_TYPE (type->index_type ());\n       /* FIXME: The stabs type r(0,0);bound;bound in an array type\n          has a target type of TYPE_CODE_UNDEF.  We compensate here, but\n          perhaps stabsread.c would make more sense.  */\n@@ -2957,7 +2957,7 @@ ada_array_bound_from_type (struct type *arr_type, int n, int which)\n       for (i = 1; i < n; i++)\n \telt_type = check_typedef (TYPE_TARGET_TYPE (elt_type));\n \n-      index_type = TYPE_INDEX_TYPE (elt_type);\n+      index_type = elt_type->index_type ();\n     }\n \n   return\n@@ -3044,7 +3044,7 @@ empty_array (struct type *arr_type, int low, int high)\n   struct type *arr_type0 = ada_check_typedef (arr_type);\n   struct type *index_type\n     = create_static_range_type\n-        (NULL, TYPE_TARGET_TYPE (TYPE_INDEX_TYPE (arr_type0)), low,\n+        (NULL, TYPE_TARGET_TYPE (arr_type0->index_type ()), low,\n \t high < low ? low - 1 : high);\n   struct type *elt_type = ada_array_element_type (arr_type0, 1);\n \n@@ -8522,7 +8522,7 @@ ada_is_redundant_index_type_desc (struct type *array_type,\n \n   for (i = 0; i < desc_type->num_fields (); i++)\n     {\n-      if (!ada_is_redundant_range_encoding (TYPE_INDEX_TYPE (this_layer),\n+      if (!ada_is_redundant_range_encoding (this_layer->index_type (),\n \t\t\t\t\t    TYPE_FIELD_TYPE (desc_type, i)))\n \treturn 0;\n       this_layer = check_typedef (TYPE_TARGET_TYPE (this_layer));\n@@ -8616,7 +8616,7 @@ to_fixed_array_type (struct type *type0, struct value *dval,\n         result = type0;\n       else\n         result = create_array_type (alloc_type_copy (type0),\n-                                    elt_type, TYPE_INDEX_TYPE (type0));\n+                                    elt_type, type0->index_type ());\n     }\n   else\n     {"
    },
    {
      "sha": "dfabac3767427d737a8869c773781396eca7d526",
      "filename": "gdb/ada-tasks.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/ada-tasks.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/ada-tasks.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-tasks.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -894,7 +894,7 @@ ada_tasks_inferior_data_sniffer (struct ada_tasks_inferior_data *data)\n \t    eltype = check_typedef (TYPE_TARGET_TYPE (type));\n \t  if (eltype != NULL\n \t      && eltype->code () == TYPE_CODE_PTR)\n-\t    idxtype = check_typedef (TYPE_INDEX_TYPE (type));\n+\t    idxtype = check_typedef (type->index_type ());\n \t  if (idxtype != NULL\n \t      && !TYPE_LOW_BOUND_UNDEFINED (idxtype)\n \t      && !TYPE_HIGH_BOUND_UNDEFINED (idxtype))"
    },
    {
      "sha": "c6056a32106553eff03d3a4fba87db455e260da9",
      "filename": "gdb/ada-typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/ada-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/ada-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-typeprint.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -407,7 +407,7 @@ print_array_type (struct type *type, struct ui_file *stream, int show,\n \t    {\n \t      if (arr_type != type)\n \t\tfprintf_filtered (stream, \", \");\n-\t      print_range (TYPE_INDEX_TYPE (arr_type), stream,\n+\t      print_range (arr_type->index_type (), stream,\n \t\t\t   0 /* bounds_prefered_p */);\n \t      if (TYPE_FIELD_BITSIZE (arr_type, 0) > 0)\n \t\tbitsize = TYPE_FIELD_BITSIZE (arr_type, 0);"
    },
    {
      "sha": "d295e55aec646f0c62d2fd1c4ceb91fbd00dee37",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -71,7 +71,7 @@ print_optional_low_bound (struct ui_file *stream, struct type *type,\n   if (low_bound > high_bound)\n     return 0;\n \n-  index_type = TYPE_INDEX_TYPE (type);\n+  index_type = type->index_type ();\n \n   while (index_type->code () == TYPE_CODE_RANGE)\n     {\n@@ -131,7 +131,7 @@ val_print_packed_array_elements (struct type *type, const gdb_byte *valaddr,\n   LONGEST low = 0;\n \n   elttype = TYPE_TARGET_TYPE (type);\n-  index_type = TYPE_INDEX_TYPE (type);\n+  index_type = type->index_type ();\n \n   {\n     LONGEST high;"
    },
    {
      "sha": "d28beffc9619ad0c4a089a838d891725f3a607f0",
      "filename": "gdb/ada-varobj.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/ada-varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/ada-varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-varobj.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -178,7 +178,7 @@ ada_varobj_simple_array_elt (struct value *parent_value,\n   if (parent_value)\n     {\n       struct value *index_value =\n-\tvalue_from_longest (TYPE_INDEX_TYPE (parent_type), elt_index);\n+\tvalue_from_longest (parent_type->index_type (), elt_index);\n \n       value = ada_value_subscript (parent_value, 1, &index_value);\n       type = value_type (value);\n@@ -234,7 +234,7 @@ ada_varobj_get_array_number_of_children (struct value *parent_value,\n   LONGEST lo, hi;\n \n   if (parent_value == NULL\n-      && is_dynamic_type (TYPE_INDEX_TYPE (parent_type)))\n+      && is_dynamic_type (parent_type->index_type ()))\n     {\n       /* This happens when listing the children of an object\n \t which does not exist in memory (Eg: when requesting\n@@ -589,7 +589,7 @@ ada_varobj_describe_simple_array_child (struct value *parent_value,\n \n   gdb_assert (parent_type->code () == TYPE_CODE_ARRAY);\n \n-  index_type = TYPE_INDEX_TYPE (parent_type);\n+  index_type = parent_type->index_type ();\n   real_index = child_index + ada_discrete_type_low_bound (index_type);\n \n   if (child_name)"
    },
    {
      "sha": "8eb0d944a75f81ed2886f1290f1b28e430366469",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -698,7 +698,7 @@ evaluate_subexp_c (struct type *expect_type, struct expression *exp,\n \t\tLONGEST low_bound, high_bound;\n \t\tint element_size = TYPE_LENGTH (type);\n \n-\t\tif (get_discrete_bounds (TYPE_INDEX_TYPE (expect_type),\n+\t\tif (get_discrete_bounds (expect_type->index_type (),\n \t\t\t\t\t &low_bound, &high_bound) < 0)\n \t\t  {\n \t\t    low_bound = 0;"
    },
    {
      "sha": "35cfd219edcae6f723d2aa8f01af9a6bcf6568aa",
      "filename": "gdb/c-typeprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/c-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/c-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-typeprint.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -780,8 +780,8 @@ c_type_print_varspec_suffix (struct type *type,\n \tfprintf_filtered (stream, (is_vector ?\n \t\t\t\t   \" __attribute__ ((vector_size(\" : \"[\"));\n \t/* Bounds are not yet resolved, print a bounds placeholder instead.  */\n-\tif (TYPE_HIGH_BOUND_KIND (TYPE_INDEX_TYPE (type)) == PROP_LOCEXPR\n-\t    || TYPE_HIGH_BOUND_KIND (TYPE_INDEX_TYPE (type)) == PROP_LOCLIST)\n+\tif (TYPE_HIGH_BOUND_KIND (type->index_type ()) == PROP_LOCEXPR\n+\t    || TYPE_HIGH_BOUND_KIND (type->index_type ()) == PROP_LOCLIST)\n \t  fprintf_filtered (stream, \"variable length\");\n \telse if (get_array_bounds (type, &low_bound, &high_bound))\n \t  fprintf_filtered (stream, \"%s\", "
    },
    {
      "sha": "362fd79c89b4fa0a4064f8ed53b97a6eae798cae",
      "filename": "gdb/c-varobj.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/c-varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/c-varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-varobj.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -307,12 +307,12 @@ c_describe_child (const struct varobj *parent, int index,\n     case TYPE_CODE_ARRAY:\n       if (cname)\n \t*cname = int_string (index\n-\t\t\t     + TYPE_LOW_BOUND (TYPE_INDEX_TYPE (type)),\n+\t\t\t     + TYPE_LOW_BOUND (type->index_type ()),\n \t\t\t     10, 1, 0, 0);\n \n       if (cvalue && value)\n \t{\n-\t  int real_index = index + TYPE_LOW_BOUND (TYPE_INDEX_TYPE (type));\n+\t  int real_index = index + TYPE_LOW_BOUND (type->index_type ());\n \n \t  try\n \t    {\n@@ -330,7 +330,7 @@ c_describe_child (const struct varobj *parent, int index,\n \t*cfull_expression = \n \t  string_printf (\"(%s)[%s]\", parent_expression.c_str (),\n \t\t\t int_string (index\n-\t\t\t\t     + TYPE_LOW_BOUND (TYPE_INDEX_TYPE (type)),\n+\t\t\t\t     + TYPE_LOW_BOUND (type->index_type ()),\n \t\t\t\t     10, 1, 0, 0));\n \n "
    },
    {
      "sha": "84148fad895ef6e270210956669cc7a782631304",
      "filename": "gdb/compile/compile-c-symbols.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/compile/compile-c-symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/compile/compile-c-symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-symbols.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -516,7 +516,7 @@ generate_vla_size (compile_instance *compiler,\n \n     case TYPE_CODE_ARRAY:\n       generate_vla_size (compiler, stream, gdbarch, registers_used, pc,\n-\t\t\t TYPE_INDEX_TYPE (type), sym);\n+\t\t\t type->index_type (), sym);\n       generate_vla_size (compiler, stream, gdbarch, registers_used, pc,\n \t\t\t TYPE_TARGET_TYPE (type), sym);\n       break;"
    },
    {
      "sha": "3cf89fddffcc200d978d8e4238bc2dd845cd1831",
      "filename": "gdb/compile/compile-c-types.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/compile/compile-c-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/compile/compile-c-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-types.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -40,7 +40,7 @@ static gcc_type\n convert_array (compile_c_instance *context, struct type *type)\n {\n   gcc_type element_type;\n-  struct type *range = TYPE_INDEX_TYPE (type);\n+  struct type *range = type->index_type ();\n \n   element_type = context->convert_type (TYPE_TARGET_TYPE (type));\n "
    },
    {
      "sha": "20d84a549653d33e6ee743481646ecc1238b3e6e",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -453,7 +453,7 @@ static gcc_type\n compile_cplus_convert_array (compile_cplus_instance *instance,\n \t\t\t     struct type *type)\n {\n-  struct type *range = TYPE_INDEX_TYPE (type);\n+  struct type *range = type->index_type ();\n   gcc_type element_type = instance->convert_type (TYPE_TARGET_TYPE (type));\n \n   if (TYPE_LOW_BOUND_KIND (range) != PROP_CONST)"
    },
    {
      "sha": "6759d228fc89daf7c4303ae6a11eb955bc2a0e50",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -377,7 +377,7 @@ value_f90_subarray (struct value *array,\n {\n   int pc = (*pos) + 1;\n   LONGEST low_bound, high_bound;\n-  struct type *range = check_typedef (TYPE_INDEX_TYPE (value_type (array)));\n+  struct type *range = check_typedef (value_type (array)->index_type ());\n   enum range_type range_type\n     = (enum range_type) longest_to_int (exp->elts[pc].longconst);\n  \n@@ -1459,7 +1459,7 @@ evaluate_subexp_standard (struct type *expect_type,\n       if (expect_type != NULL_TYPE && noside != EVAL_SKIP\n \t  && type->code () == TYPE_CODE_ARRAY)\n \t{\n-\t  struct type *range_type = TYPE_INDEX_TYPE (type);\n+\t  struct type *range_type = type->index_type ();\n \t  struct type *element_type = TYPE_TARGET_TYPE (type);\n \t  struct value *array = allocate_value (expect_type);\n \t  int element_size = TYPE_LENGTH (check_typedef (element_type));\n@@ -1509,7 +1509,7 @@ evaluate_subexp_standard (struct type *expect_type,\n \t{\n \t  struct value *set = allocate_value (expect_type);\n \t  gdb_byte *valaddr = value_contents_raw (set);\n-\t  struct type *element_type = TYPE_INDEX_TYPE (type);\n+\t  struct type *element_type = type->index_type ();\n \t  struct type *check_type = element_type;\n \t  LONGEST low_bound, high_bound;\n \n@@ -3212,8 +3212,8 @@ evaluate_subexp_for_sizeof (struct expression *exp, int *pos,\n \t  val = evaluate_subexp (NULL_TYPE, exp, pos, EVAL_NORMAL);\n \t  type = value_type (val);\n \t  if (type->code () == TYPE_CODE_ARRAY\n-              && is_dynamic_type (TYPE_INDEX_TYPE (type))\n-              && TYPE_HIGH_BOUND_UNDEFINED (TYPE_INDEX_TYPE (type)))\n+              && is_dynamic_type (type->index_type ())\n+              && TYPE_HIGH_BOUND_UNDEFINED (type->index_type ()))\n \t    return allocate_optimized_out_value (size_type);\n \t}\n       else\n@@ -3253,7 +3253,7 @@ evaluate_subexp_for_sizeof (struct expression *exp, int *pos,\n \t      type = check_typedef (TYPE_TARGET_TYPE (type));\n \t      if (type->code () == TYPE_CODE_ARRAY)\n \t\t{\n-\t\t  type = TYPE_INDEX_TYPE (type);\n+\t\t  type = type->index_type ();\n \t\t  /* Only re-evaluate the right hand side if the resulting type\n \t\t     is a variable length type.  */\n \t\t  if (TYPE_RANGE_DATA (type)->flag_bound_evaluated)"
    },
    {
      "sha": "26646b32ac8553b1501d0b1aee918b13a99e53de",
      "filename": "gdb/f-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/f-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/f-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-valprint.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -112,7 +112,7 @@ f77_print_array_1 (int nss, int ndimensions, struct type *type,\n \t\t   const struct value_print_options *options,\n \t\t   int *elts)\n {\n-  struct type *range_type = TYPE_INDEX_TYPE (check_typedef (type));\n+  struct type *range_type = check_typedef (type)->index_type ();\n   CORE_ADDR addr = address + embedded_offset;\n   LONGEST lowerbound, upperbound;\n   LONGEST i;"
    },
    {
      "sha": "b2afb186beb42ab9f03ba52e488fbbc1b1b0ef9d",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -1117,7 +1117,7 @@ get_discrete_bounds (struct type *type, LONGEST *lowp, LONGEST *highp)\n int\n get_array_bounds (struct type *type, LONGEST *low_bound, LONGEST *high_bound)\n {\n-  struct type *index = TYPE_INDEX_TYPE (type);\n+  struct type *index = type->index_type ();\n   LONGEST low = 0;\n   LONGEST high = 0;\n   int res;\n@@ -1195,7 +1195,7 @@ update_static_array_size (struct type *type)\n {\n   gdb_assert (type->code () == TYPE_CODE_ARRAY);\n \n-  struct type *range_type = TYPE_INDEX_TYPE (type);\n+  struct type *range_type = type->index_type ();\n \n   if (type->dyn_prop (DYN_PROP_BYTE_STRIDE) == nullptr\n       && has_static_range (TYPE_RANGE_DATA (range_type))\n@@ -2027,7 +2027,7 @@ is_dynamic_type_internal (struct type *type, int top_level)\n \tgdb_assert (type->num_fields () == 1);\n \n \t/* The array is dynamic if either the bounds are dynamic...  */\n-\tif (is_dynamic_type_internal (TYPE_INDEX_TYPE (type), 0))\n+\tif (is_dynamic_type_internal (type->index_type (), 0))\n \t  return 1;\n \t/* ... or the elements it contains have a dynamic contents...  */\n \tif (is_dynamic_type_internal (TYPE_TARGET_TYPE (type), 0))\n@@ -2183,7 +2183,7 @@ resolve_dynamic_array_or_string (struct type *type,\n   type = copy_type (type);\n \n   elt_type = type;\n-  range_type = check_typedef (TYPE_INDEX_TYPE (elt_type));\n+  range_type = check_typedef (elt_type->index_type ());\n   range_type = resolve_dynamic_range (range_type, addr_stack);\n \n   /* Resolve allocated/associated here before creating a new array type, which\n@@ -3541,12 +3541,12 @@ is_scalar_type_recursive (struct type *t)\n   /* Are we dealing with an array or string of known dimensions?  */\n   else if ((t->code () == TYPE_CODE_ARRAY\n \t    || t->code () == TYPE_CODE_STRING) && t->num_fields () == 1\n-\t   && TYPE_INDEX_TYPE(t)->code () == TYPE_CODE_RANGE)\n+\t   && t->index_type ()->code () == TYPE_CODE_RANGE)\n     {\n       LONGEST low_bound, high_bound;\n       struct type *elt_type = check_typedef (TYPE_TARGET_TYPE (t));\n \n-      get_discrete_bounds (TYPE_INDEX_TYPE (t), &low_bound, &high_bound);\n+      get_discrete_bounds (t->index_type (), &low_bound, &high_bound);\n \n       return high_bound == low_bound && is_scalar_type_recursive (elt_type);\n     }"
    },
    {
      "sha": "ffb8a616cfbb1eee14751020ceaffad8da10c58b",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -1492,7 +1492,6 @@ extern unsigned type_align (struct type *);\n    space in struct type.  */\n extern bool set_type_align (struct type *, ULONGEST);\n \n-#define TYPE_INDEX_TYPE(type) ((type)->index_type ())\n #define TYPE_RANGE_DATA(thistype) TYPE_MAIN_TYPE(thistype)->flds_bnds.bounds\n #define TYPE_LOW_BOUND(range_type) \\\n   TYPE_RANGE_DATA(range_type)->low.data.const_val\n@@ -1541,18 +1540,18 @@ extern bool set_type_align (struct type *, ULONGEST);\n    index type.  */\n \n #define TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED(arraytype) \\\n-   TYPE_HIGH_BOUND_UNDEFINED(TYPE_INDEX_TYPE(arraytype))\n+   TYPE_HIGH_BOUND_UNDEFINED((arraytype)->index_type ())\n #define TYPE_ARRAY_LOWER_BOUND_IS_UNDEFINED(arraytype) \\\n-   TYPE_LOW_BOUND_UNDEFINED(TYPE_INDEX_TYPE(arraytype))\n+   TYPE_LOW_BOUND_UNDEFINED((arraytype)->index_type ())\n \n #define TYPE_ARRAY_UPPER_BOUND_VALUE(arraytype) \\\n-   (TYPE_HIGH_BOUND(TYPE_INDEX_TYPE((arraytype))))\n+   (TYPE_HIGH_BOUND((arraytype)->index_type ()))\n \n #define TYPE_ARRAY_LOWER_BOUND_VALUE(arraytype) \\\n-   (TYPE_LOW_BOUND(TYPE_INDEX_TYPE((arraytype))))\n+   (TYPE_LOW_BOUND((arraytype)->index_type ()))\n \n #define TYPE_ARRAY_BIT_STRIDE(arraytype) \\\n-  (TYPE_BIT_STRIDE(TYPE_INDEX_TYPE((arraytype))))\n+  (TYPE_BIT_STRIDE(((arraytype)->index_type ())))\n \n /* C++ */\n "
    },
    {
      "sha": "a6a6b77f868ab0ddc29b2773cfa75db8356f53f2",
      "filename": "gdb/guile/scm-type.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/guile/scm-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/guile/scm-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-type.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -826,8 +826,8 @@ gdbscm_type_range (SCM self)\n     {\n     case TYPE_CODE_ARRAY:\n     case TYPE_CODE_STRING:\n-      low = TYPE_LOW_BOUND (TYPE_INDEX_TYPE (type));\n-      high = TYPE_HIGH_BOUND (TYPE_INDEX_TYPE (type));\n+      low = TYPE_LOW_BOUND (type->index_type ());\n+      high = TYPE_HIGH_BOUND (type->index_type ());\n       break;\n     case TYPE_CODE_RANGE:\n       low = TYPE_LOW_BOUND (type);"
    },
    {
      "sha": "6b878ab13cf003779c8408f2699e20e2a8dac459",
      "filename": "gdb/m2-typeprint.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/m2-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/m2-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-typeprint.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -228,11 +228,11 @@ static void m2_array (struct type *type, struct ui_file *stream,\n   if (TYPE_LENGTH (TYPE_TARGET_TYPE (type)) > 0\n       && !TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED (type))\n     {\n-      if (TYPE_INDEX_TYPE (type) != 0)\n+      if (type->index_type () != 0)\n \t{\n-\t  m2_print_bounds (TYPE_INDEX_TYPE (type), stream, show, -1, 0);\n+\t  m2_print_bounds (type->index_type (), stream, show, -1, 0);\n \t  fprintf_filtered (stream, \"..\");\n-\t  m2_print_bounds (TYPE_INDEX_TYPE (type), stream, show, -1, 1);\n+\t  m2_print_bounds (type->index_type (), stream, show, -1, 1);\n \t}\n       else\n \tfputs_filtered (pulongest ((TYPE_LENGTH (type)\n@@ -324,11 +324,11 @@ static void\n m2_short_set (struct type *type, struct ui_file *stream, int show, int level)\n {\n   fprintf_filtered(stream, \"SET [\");\n-  m2_print_bounds (TYPE_INDEX_TYPE (type), stream,\n+  m2_print_bounds (type->index_type (), stream,\n \t\t   show - 1, level, 0);\n \n   fprintf_filtered(stream, \"..\");\n-  m2_print_bounds (TYPE_INDEX_TYPE (type), stream,\n+  m2_print_bounds (type->index_type (), stream,\n \t\t   show - 1, level, 1);\n   fprintf_filtered(stream, \"]\");\n }\n@@ -356,7 +356,7 @@ m2_is_long_set (struct type *type)\n \t  if (TYPE_FIELD_NAME (type, i) != NULL\n \t      && (strcmp (TYPE_FIELD_NAME (type, i), \"\") != 0))\n \t    return 0;\n-\t  range = TYPE_INDEX_TYPE (TYPE_FIELD_TYPE (type, i));\n+\t  range = TYPE_FIELD_TYPE (type, i)->index_type ();\n \t  if ((i > TYPE_N_BASECLASSES (type))\n \t      && previous_high + 1 != TYPE_LOW_BOUND (range))\n \t    return 0;\n@@ -413,11 +413,11 @@ m2_is_long_set_of_type (struct type *type, struct type **of_type)\n       i = TYPE_N_BASECLASSES (type);\n       if (len == 0)\n \treturn 0;\n-      range = TYPE_INDEX_TYPE (TYPE_FIELD_TYPE (type, i));\n+      range = TYPE_FIELD_TYPE (type, i)->index_type ();\n       target = TYPE_TARGET_TYPE (range);\n \n-      l1 = TYPE_LOW_BOUND (TYPE_INDEX_TYPE (TYPE_FIELD_TYPE (type, i)));\n-      h1 = TYPE_HIGH_BOUND (TYPE_INDEX_TYPE (TYPE_FIELD_TYPE (type, len-1)));\n+      l1 = TYPE_LOW_BOUND (TYPE_FIELD_TYPE (type, i)->index_type ());\n+      h1 = TYPE_HIGH_BOUND (TYPE_FIELD_TYPE (type, len - 1)->index_type ());\n       *of_type = target;\n       if (m2_get_discrete_bounds (target, &l2, &h2) >= 0)\n \treturn (l1 == l2 && h1 == h2);\n@@ -457,12 +457,12 @@ m2_long_set (struct type *type, struct ui_file *stream, int show, int level,\n \t  else\n \t    {\n \t      fprintf_filtered(stream, \"[\");\n-\t      m2_print_bounds (TYPE_INDEX_TYPE (TYPE_FIELD_TYPE (type, i)),\n+\t      m2_print_bounds (TYPE_FIELD_TYPE (type, i)->index_type (),\n \t\t\t       stream, show - 1, level, 0);\n \n \t      fprintf_filtered(stream, \"..\");\n \n-\t      m2_print_bounds (TYPE_INDEX_TYPE (TYPE_FIELD_TYPE (type, len-1)),\n+\t      m2_print_bounds (TYPE_FIELD_TYPE (type, len - 1)->index_type (),\n \t\t\t       stream, show - 1, level, 1);\n \t      fprintf_filtered(stream, \"]\");\n \t    }"
    },
    {
      "sha": "214466b447daff1c7fdece337078b40655627b14",
      "filename": "gdb/m2-valprint.c",
      "status": "modified",
      "additions": 5,
      "deletions": 6,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/m2-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/m2-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-valprint.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -55,9 +55,8 @@ get_long_set_bounds (struct type *type, LONGEST *low, LONGEST *high)\n       i = TYPE_N_BASECLASSES (type);\n       if (len == 0)\n \treturn 0;\n-      *low = TYPE_LOW_BOUND (TYPE_INDEX_TYPE (TYPE_FIELD_TYPE (type, i)));\n-      *high = TYPE_HIGH_BOUND (TYPE_INDEX_TYPE (TYPE_FIELD_TYPE (type,\n-\t\t\t\t\t\t\t\t len-1)));\n+      *low = TYPE_LOW_BOUND (TYPE_FIELD_TYPE (type, i)->index_type ());\n+      *high = TYPE_HIGH_BOUND (TYPE_FIELD_TYPE (type, len - 1)->index_type ());\n       return 1;\n     }\n   error (_(\"expecting long_set\"));\n@@ -87,7 +86,7 @@ m2_print_long_set (struct type *type, const gdb_byte *valaddr,\n   if (get_long_set_bounds (type, &low_bound, &high_bound))\n     {\n       field = TYPE_N_BASECLASSES (type);\n-      range = TYPE_INDEX_TYPE (TYPE_FIELD_TYPE (type, field));\n+      range = TYPE_FIELD_TYPE (type, field)->index_type ();\n     }\n   else\n     {\n@@ -137,7 +136,7 @@ m2_print_long_set (struct type *type, const gdb_byte *valaddr,\n \t      field++;\n \t      if (field == len)\n \t\tbreak;\n-\t      range = TYPE_INDEX_TYPE (TYPE_FIELD_TYPE (type, field));\n+\t      range = TYPE_FIELD_TYPE (type, field)->index_type ();\n \t      if (get_discrete_bounds (range, &field_low, &field_high) < 0)\n \t\tbreak;\n \t      target = TYPE_TARGET_TYPE (range);\n@@ -382,7 +381,7 @@ m2_value_print_inner (struct value *val, struct ui_file *stream, int recurse,\n       break;\n \n     case TYPE_CODE_SET:\n-      elttype = TYPE_INDEX_TYPE (type);\n+      elttype = type->index_type ();\n       elttype = check_typedef (elttype);\n       if (TYPE_STUB (elttype))\n \t{"
    },
    {
      "sha": "edde01b2f37a197eaa8c9976c5825d84bab68b41",
      "filename": "gdb/p-typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/p-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/p-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-typeprint.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -805,7 +805,7 @@ pascal_type_print_base (struct type *type, struct ui_file *stream, int show,\n \n     case TYPE_CODE_SET:\n       fputs_filtered (\"set of \", stream);\n-      pascal_print_type (TYPE_INDEX_TYPE (type), \"\", stream,\n+      pascal_print_type (type->index_type (), \"\", stream,\n \t\t\t show - 1, level, flags);\n       break;\n "
    },
    {
      "sha": "064e81905d0ddc035a03d2875902be145e9c3255",
      "filename": "gdb/p-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/p-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/p-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-valprint.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -330,7 +330,7 @@ pascal_value_print_inner (struct value *val, struct ui_file *stream,\n       break;\n \n     case TYPE_CODE_SET:\n-      elttype = TYPE_INDEX_TYPE (type);\n+      elttype = type->index_type ();\n       elttype = check_typedef (elttype);\n       if (TYPE_STUB (elttype))\n \t{"
    },
    {
      "sha": "b871a6d167bb0e006b23ad8993838dcc9d8d0c33",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -592,8 +592,8 @@ typy_range (PyObject *self, PyObject *args)\n     {\n     case TYPE_CODE_ARRAY:\n     case TYPE_CODE_STRING:\n-      low = TYPE_LOW_BOUND (TYPE_INDEX_TYPE (type));\n-      high = TYPE_HIGH_BOUND (TYPE_INDEX_TYPE (type));\n+      low = TYPE_LOW_BOUND (type->index_type ());\n+      high = TYPE_HIGH_BOUND (type->index_type ());\n       break;\n     case TYPE_CODE_RANGE:\n       low = TYPE_LOW_BOUND (type);"
    },
    {
      "sha": "7fe6d3d1eb6472acc12f65018f238fa43e9042e8",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -882,8 +882,8 @@ rust_internal_print_type (struct type *type, const char *varstring,\n \t\t\t\t  stream, show - 1, level, flags, false,\n \t\t\t\t  podata);\n \n-\tif (TYPE_HIGH_BOUND_KIND (TYPE_INDEX_TYPE (type)) == PROP_LOCEXPR\n-\t    || TYPE_HIGH_BOUND_KIND (TYPE_INDEX_TYPE (type)) == PROP_LOCLIST)\n+\tif (TYPE_HIGH_BOUND_KIND (type->index_type ()) == PROP_LOCEXPR\n+\t    || TYPE_HIGH_BOUND_KIND (type->index_type ()) == PROP_LOCLIST)\n \t  fprintf_filtered (stream, \"; variable length\");\n \telse if (get_array_bounds (type, &low_bound, &high_bound))\n \t  fprintf_filtered (stream, \"; %s\","
    },
    {
      "sha": "2d5c88f8d4d65d7e27aa248ff47a20c32e1b5b8b",
      "filename": "gdb/type-stack.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/type-stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/type-stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/type-stack.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -172,7 +172,7 @@ type_stack::follow_types (struct type *follow_type)\n \t  lookup_array_range_type (follow_type,\n \t\t\t\t   0, array_size >= 0 ? array_size - 1 : 0);\n \tif (array_size < 0)\n-\t  TYPE_HIGH_BOUND_KIND (TYPE_INDEX_TYPE (follow_type))\n+\t  TYPE_HIGH_BOUND_KIND (follow_type->index_type ())\n \t    = PROP_UNDEFINED;\n \tbreak;\n       case tp_function:"
    },
    {
      "sha": "a5779a3aff978be2653d0667739d343454f0de5b",
      "filename": "gdb/valarith.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/valarith.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/valarith.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valarith.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -149,7 +149,7 @@ value_subscript (struct value *array, LONGEST index)\n   if (tarray->code () == TYPE_CODE_ARRAY\n       || tarray->code () == TYPE_CODE_STRING)\n     {\n-      struct type *range_type = TYPE_INDEX_TYPE (tarray);\n+      struct type *range_type = tarray->index_type ();\n       LONGEST lowerbound, upperbound;\n \n       get_discrete_bounds (range_type, &lowerbound, &upperbound);\n@@ -1870,7 +1870,7 @@ value_bit_index (struct type *type, const gdb_byte *valaddr, int index)\n   LONGEST low_bound, high_bound;\n   LONGEST word;\n   unsigned rel_index;\n-  struct type *range = TYPE_INDEX_TYPE (type);\n+  struct type *range = type->index_type ();\n \n   if (get_discrete_bounds (range, &low_bound, &high_bound) < 0)\n     return -2;"
    },
    {
      "sha": "2bc58ca4652a2d1af8ca4ae99b7251043b81fa23",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -390,7 +390,7 @@ value_cast (struct type *type, struct value *arg2)\n \n       if (element_length > 0 && TYPE_ARRAY_UPPER_BOUND_IS_UNDEFINED (type))\n \t{\n-\t  struct type *range_type = TYPE_INDEX_TYPE (type);\n+\t  struct type *range_type = type->index_type ();\n \t  int val_length = TYPE_LENGTH (type2);\n \t  LONGEST low_bound, high_bound, new_length;\n \n@@ -3769,7 +3769,7 @@ value_slice (struct value *array, int lowbound, int length)\n   if (type_not_associated (array_type))\n     error (_(\"array not associated\"));\n \n-  range_type = TYPE_INDEX_TYPE (array_type);\n+  range_type = array_type->index_type ();\n   if (get_discrete_bounds (range_type, &lowerbound, &upperbound) < 0)\n     error (_(\"slice from bad array or bitstring\"));\n "
    },
    {
      "sha": "7051fcef13f68e131d3faa922ec9a4b4605eeb22",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d967001ecd3b325fc39d7f53ebf7054d1ecd503/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=3d967001ecd3b325fc39d7f53ebf7054d1ecd503",
      "patch": "@@ -1875,7 +1875,7 @@ value_print_array_elements (struct value *val, struct ui_file *stream,\n \n   elttype = TYPE_TARGET_TYPE (type);\n   eltlen = type_length_units (check_typedef (elttype));\n-  index_type = TYPE_INDEX_TYPE (type);\n+  index_type = type->index_type ();\n   if (index_type->code () == TYPE_CODE_RANGE)\n     index_type = TYPE_TARGET_TYPE (index_type);\n "
    }
  ]
}