{
  "sha": "2315bb2d5764527617aef124cbcd52a13395e245",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjMxNWJiMmQ1NzY0NTI3NjE3YWVmMTI0Y2JjZDUyYTEzMzk1ZTI0NQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-26T19:44:24Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-26T19:44:24Z"
    },
    "message": "Simplify use of map_matching_symbols in ada-lang.c\n\nI noticed that ada-lang.c creates a lambda to call\naux_add_nonlocal_symbols.  However, this code can be simplified a bit\nby changing match_data to implement operator(), and then simply\npassing the object as the callback.  That is what this patch\nimplements.\n\ngdb/ChangeLog\n2021-03-26  Tom Tromey  <tom@tromey.com>\n\n\t* ada-lang.c (struct match_data): Add operator().\n\t(match_data::operator()): Rename from aux_add_nonlocal_symbols.\n\t(callback): Remove 'callback'.",
    "tree": {
      "sha": "3edccb0a2a94e2f1988b8d5f2b119d71420b0d34",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3edccb0a2a94e2f1988b8d5f2b119d71420b0d34"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2315bb2d5764527617aef124cbcd52a13395e245",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2315bb2d5764527617aef124cbcd52a13395e245",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2315bb2d5764527617aef124cbcd52a13395e245",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2315bb2d5764527617aef124cbcd52a13395e245/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e2cd5ca40c03271aa0bf324cac1f7a66ad3904d8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2cd5ca40c03271aa0bf324cac1f7a66ad3904d8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e2cd5ca40c03271aa0bf324cac1f7a66ad3904d8"
    }
  ],
  "stats": {
    "total": 52,
    "additions": 24,
    "deletions": 28
  },
  "files": [
    {
      "sha": "89b3cf00bccbf6b670ce5786c95b93865d655822",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2315bb2d5764527617aef124cbcd52a13395e245/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2315bb2d5764527617aef124cbcd52a13395e245/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2315bb2d5764527617aef124cbcd52a13395e245",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* ada-lang.c (struct match_data): Add operator().\n+\t(match_data::operator()): Rename from aux_add_nonlocal_symbols.\n+\t(callback): Remove 'callback'.\n+\n 2021-03-26  Tom Tromey  <tom@tromey.com>\n \n \t* psymtab.c (psymbol_functions::expand_symtabs_matching): Only"
    },
    {
      "sha": "e5fbf74ef2721d43e5fc53b130eaef27af0009c9",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 18,
      "deletions": 28,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2315bb2d5764527617aef124cbcd52a13395e245/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2315bb2d5764527617aef124cbcd52a13395e245/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=2315bb2d5764527617aef124cbcd52a13395e245",
      "patch": "@@ -4970,7 +4970,7 @@ ada_add_local_symbols (std::vector<struct block_symbol> &result,\n     add_symbols_from_enclosing_procs (result, lookup_name, domain);\n }\n \n-/* An object of this type is used as the user_data argument when\n+/* An object of this type is used as the callback argument when\n    calling the map_matching_symbols method.  */\n \n struct match_data\n@@ -4981,48 +4981,43 @@ struct match_data\n   }\n   DISABLE_COPY_AND_ASSIGN (match_data);\n \n+  bool operator() (struct block_symbol *bsym);\n+\n   struct objfile *objfile = nullptr;\n   std::vector<struct block_symbol> *resultp;\n   struct symbol *arg_sym = nullptr;\n   bool found_sym = false;\n };\n \n-/* A callback for add_nonlocal_symbols that adds symbol, found in BSYM,\n-   to a list of symbols.  DATA is a pointer to a struct match_data *\n-   containing the vector that collects the symbol list, the file that SYM\n-   must come from, a flag indicating whether a non-argument symbol has\n-   been found in the current block, and the last argument symbol\n-   passed in SYM within the current block (if any).  When SYM is null,\n-   marking the end of a block, the argument symbol is added if no\n-   other has been found.  */\n+/* A callback for add_nonlocal_symbols that adds symbol, found in\n+   BSYM, to a list of symbols.  */\n \n-static bool\n-aux_add_nonlocal_symbols (struct block_symbol *bsym,\n-\t\t\t  struct match_data *data)\n+bool\n+match_data::operator() (struct block_symbol *bsym)\n {\n   const struct block *block = bsym->block;\n   struct symbol *sym = bsym->symbol;\n \n   if (sym == NULL)\n     {\n-      if (!data->found_sym && data->arg_sym != NULL) \n-\tadd_defn_to_vec (*data->resultp,\n-\t\t\t fixup_symbol_section (data->arg_sym, data->objfile),\n+      if (!found_sym && arg_sym != NULL)\n+\tadd_defn_to_vec (*resultp,\n+\t\t\t fixup_symbol_section (arg_sym, objfile),\n \t\t\t block);\n-      data->found_sym = false;\n-      data->arg_sym = NULL;\n+      found_sym = false;\n+      arg_sym = NULL;\n     }\n   else \n     {\n       if (SYMBOL_CLASS (sym) == LOC_UNRESOLVED)\n \treturn true;\n       else if (SYMBOL_IS_ARGUMENT (sym))\n-\tdata->arg_sym = sym;\n+\targ_sym = sym;\n       else\n \t{\n-\t  data->found_sym = true;\n-\t  add_defn_to_vec (*data->resultp,\n-\t\t\t   fixup_symbol_section (sym, data->objfile),\n+\t  found_sym = true;\n+\t  add_defn_to_vec (*resultp,\n+\t\t\t   fixup_symbol_section (sym, objfile),\n \t\t\t   block);\n \t}\n     }\n@@ -5194,16 +5189,11 @@ add_nonlocal_symbols (std::vector<struct block_symbol> &result,\n \n   bool is_wild_match = lookup_name.ada ().wild_match_p ();\n \n-  auto callback = [&] (struct block_symbol *bsym)\n-    {\n-      return aux_add_nonlocal_symbols (bsym, &data);\n-    };\n-\n   for (objfile *objfile : current_program_space->objfiles ())\n     {\n       data.objfile = objfile;\n \n-      objfile->map_matching_symbols (lookup_name, domain, global, callback,\n+      objfile->map_matching_symbols (lookup_name, domain, global, data,\n \t\t\t\t     is_wild_match ? NULL : compare_names);\n \n       for (compunit_symtab *cu : objfile->compunits ())\n@@ -5226,7 +5216,7 @@ add_nonlocal_symbols (std::vector<struct block_symbol> &result,\n       for (objfile *objfile : current_program_space->objfiles ())\n \t{\n \t  data.objfile = objfile;\n-\t  objfile->map_matching_symbols (name1, domain, global, callback,\n+\t  objfile->map_matching_symbols (name1, domain, global, data,\n \t\t\t\t\t compare_names);\n \t}\n     }      \t"
    }
  ]
}