{
  "sha": "8df52eeeb06efcccd6b840689ad8e11ebb264e7f",
  "node_id": "C_kwDOANOeidoAKDhkZjUyZWVlYjA2ZWZjY2NkNmI4NDA2ODlhZDhlMTFlYmIyNjRlN2Y",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-02-04T09:00:47Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-02-05T06:15:38Z"
    },
    "message": "Detect .eh_frame_hdr earlier for SIZEOF_HEADERS\n\nCurrent code detects the need for PT_GNU_EH_FRAME using a field set by\n_bfd_elf_discard_section_eh_frame_hdr, which is called fairly late in\nthe linking process.  Use the elf hash table eh_info instead, which is\nset up earlier by size_dynamic_sections.\n\n\t* elf-bfd.h (struct output_elf_obj_tdata): Delete eh_frame_hdr.\n\t(elf_eh_frame_hdr): Don't define.\n\t(_bfd_elf_discard_section_eh_frame_hdr): Update prototype.\n\t* elf-eh-frame.c (_bfd_elf_discard_section_eh_frame_hdr): Delete\n\tabfd parameter.  Don't set elf_eh_frame_hdr.\n\t* elf.c (elf_eh_frame_hdr): New function.\n\t(get_program_header_size): Adjust elf_eh_frame_hdr call.\n\t(_bfd_elf_map_sections_to_segments): Likewise.",
    "tree": {
      "sha": "d44d46440c42aa85341f01f73302b853ae0fb19e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d44d46440c42aa85341f01f73302b853ae0fb19e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8df52eeeb06efcccd6b840689ad8e11ebb264e7f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8df52eeeb06efcccd6b840689ad8e11ebb264e7f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8df52eeeb06efcccd6b840689ad8e11ebb264e7f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8df52eeeb06efcccd6b840689ad8e11ebb264e7f/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/06c441cceffb1437a3af51bfad43dce5fd200d9e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/06c441cceffb1437a3af51bfad43dce5fd200d9e"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 19,
    "deletions": 11
  },
  "files": [
    {
      "sha": "1d3ae76339aa90dfcb300fe5eb3a1f26b52ec252",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 1,
      "deletions": 6,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8df52eeeb06efcccd6b840689ad8e11ebb264e7f/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8df52eeeb06efcccd6b840689ad8e11ebb264e7f/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=8df52eeeb06efcccd6b840689ad8e11ebb264e7f",
      "patch": "@@ -1909,10 +1909,6 @@ struct output_elf_obj_tdata\n   /* STT_SECTION symbols for each section */\n   asymbol **section_syms;\n \n-  /* Used to determine if PT_GNU_EH_FRAME segment header should be\n-     created.  */\n-  asection *eh_frame_hdr;\n-\n   /* NT_GNU_BUILD_ID note type info.  */\n   struct\n   {\n@@ -2116,7 +2112,6 @@ struct elf_obj_tdata\n #define elf_seg_map(bfd)\t(elf_tdata(bfd) -> o->seg_map)\n #define elf_link_info(bfd)\t(elf_tdata(bfd) -> o->link_info)\n #define elf_next_file_pos(bfd)\t(elf_tdata(bfd) -> o->next_file_pos)\n-#define elf_eh_frame_hdr(bfd)\t(elf_tdata(bfd) -> o->eh_frame_hdr)\n #define elf_stack_flags(bfd)\t(elf_tdata(bfd) -> o->stack_flags)\n #define elf_shstrtab(bfd)\t(elf_tdata(bfd) -> o->strtab_ptr)\n #define elf_onesymtab(bfd)\t(elf_tdata(bfd) -> symtab_section)\n@@ -2412,7 +2407,7 @@ extern bool _bfd_elf_discard_section_eh_frame\n extern bool _bfd_elf_adjust_eh_frame_global_symbol\n   (struct elf_link_hash_entry *, void *);\n extern bool _bfd_elf_discard_section_eh_frame_hdr\n-  (bfd *, struct bfd_link_info *);\n+  (struct bfd_link_info *);\n extern bfd_vma _bfd_elf_eh_frame_section_offset\n   (bfd *, struct bfd_link_info *, asection *, bfd_vma);\n extern bool _bfd_elf_write_section_eh_frame"
    },
    {
      "sha": "2e22d0c92158da5a53fb9e6ef60954ab92272f99",
      "filename": "bfd/elf-eh-frame.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8df52eeeb06efcccd6b840689ad8e11ebb264e7f/bfd/elf-eh-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8df52eeeb06efcccd6b840689ad8e11ebb264e7f/bfd/elf-eh-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-eh-frame.c?ref=8df52eeeb06efcccd6b840689ad8e11ebb264e7f",
      "patch": "@@ -1612,7 +1612,7 @@ _bfd_elf_discard_section_eh_frame\n    input sections.  It finalizes the size of .eh_frame_hdr section.  */\n \n bool\n-_bfd_elf_discard_section_eh_frame_hdr (bfd *abfd, struct bfd_link_info *info)\n+_bfd_elf_discard_section_eh_frame_hdr (struct bfd_link_info *info)\n {\n   struct elf_link_hash_table *htab;\n   struct eh_frame_hdr_info *hdr_info;\n@@ -1644,7 +1644,6 @@ _bfd_elf_discard_section_eh_frame_hdr (bfd *abfd, struct bfd_link_info *info)\n \tsec->size += 4 + hdr_info->u.dwarf.fde_count * 8;\n     }\n \n-  elf_eh_frame_hdr (abfd) = sec;\n   return true;\n }\n "
    },
    {
      "sha": "79f71aa81e2c74ad6fe79fa3c679c07958cf319f",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 16,
      "deletions": 2,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8df52eeeb06efcccd6b840689ad8e11ebb264e7f/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8df52eeeb06efcccd6b840689ad8e11ebb264e7f/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=8df52eeeb06efcccd6b840689ad8e11ebb264e7f",
      "patch": "@@ -4343,6 +4343,20 @@ _bfd_elf_compute_section_file_positions (bfd *abfd,\n   return true;\n }\n \n+/* Retrieve .eh_frame_hdr.  Prior to size_dynamic_sections the\n+   function effectively returns whether --eh-frame-hdr is given on the\n+   command line.  After size_dynamic_sections the result reflects\n+   whether .eh_frame_hdr will actually be output (sizing isn't done\n+   until ldemul_after_allocation).  */\n+\n+static asection *\n+elf_eh_frame_hdr (const struct bfd_link_info *info)\n+{\n+  if (info != NULL && is_elf_hash_table (info->hash))\n+    return elf_hash_table (info)->eh_info.hdr_sec;\n+  return NULL;\n+}\n+\n /* Make an initial estimate of the size of the program header.  If we\n    get the number wrong here, we'll redo section placement.  */\n \n@@ -4379,7 +4393,7 @@ get_program_header_size (bfd *abfd, struct bfd_link_info *info)\n       ++segs;\n     }\n \n-  if (elf_eh_frame_hdr (abfd))\n+  if (elf_eh_frame_hdr (info))\n     {\n       /* We need a PT_GNU_EH_FRAME segment.  */\n       ++segs;\n@@ -5134,7 +5148,7 @@ _bfd_elf_map_sections_to_segments (bfd *abfd,\n \n       /* If there is a .eh_frame_hdr section, throw in a PT_GNU_EH_FRAME\n \t segment.  */\n-      eh_frame_hdr = elf_eh_frame_hdr (abfd);\n+      eh_frame_hdr = elf_eh_frame_hdr (info);\n       if (eh_frame_hdr != NULL\n \t  && (eh_frame_hdr->output_section->flags & SEC_LOAD) != 0)\n \t{"
    },
    {
      "sha": "6fa18d9200798338ecc51e652909009ac5bcac40",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8df52eeeb06efcccd6b840689ad8e11ebb264e7f/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8df52eeeb06efcccd6b840689ad8e11ebb264e7f/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=8df52eeeb06efcccd6b840689ad8e11ebb264e7f",
      "patch": "@@ -14888,7 +14888,7 @@ bfd_elf_discard_info (bfd *output_bfd, struct bfd_link_info *info)\n \n   if (info->eh_frame_hdr_type\n       && !bfd_link_relocatable (info)\n-      && _bfd_elf_discard_section_eh_frame_hdr (output_bfd, info))\n+      && _bfd_elf_discard_section_eh_frame_hdr (info))\n     changed = 1;\n \n   return changed;"
    }
  ]
}