{
  "sha": "5da01df5b5601cae695cee588547fb9ef0967081",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWRhMDFkZjViNTYwMWNhZTY5NWNlZTU4ODU0N2ZiOWVmMDk2NzA4MQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2018-07-22T16:28:23Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-05-04T20:40:55Z"
    },
    "message": "Remove a VEC from ppc-linux-nat.c\n\nThis replaces a VEC in ppc-linux-nat.c with a std::vector.\n\ngdb/ChangeLog\n2019-05-04  Simon Marchi  <simon.marchi@efficios.com>\n\t    Tom Tromey  <tom@tromey.com>\n\n\t* ppc-linux-nat.c (thread_points_p): Remove typedef and DEF_VEC.\n\t(ppc_threads): Now a std::vector.  Now static.\n\t(hwdebug_find_thread_points_by_tid)\n\t(ppc_linux_nat_target::low_new_thread, ppc_linux_thread_exit):\n\tUpdate.",
    "tree": {
      "sha": "9c0fd4038774186707ec10f2f40a56449f4b2d45",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9c0fd4038774186707ec10f2f40a56449f4b2d45"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5da01df5b5601cae695cee588547fb9ef0967081",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5da01df5b5601cae695cee588547fb9ef0967081",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5da01df5b5601cae695cee588547fb9ef0967081",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5da01df5b5601cae695cee588547fb9ef0967081/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fbdf05a16ec647358e65582721c4ca7dae15e58d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbdf05a16ec647358e65582721c4ca7dae15e58d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fbdf05a16ec647358e65582721c4ca7dae15e58d"
    }
  ],
  "stats": {
    "total": 67,
    "additions": 39,
    "deletions": 28
  },
  "files": [
    {
      "sha": "5c6740a878ac1c22c1600a9019bbbd5fbfdad6ae",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5da01df5b5601cae695cee588547fb9ef0967081/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5da01df5b5601cae695cee588547fb9ef0967081/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5da01df5b5601cae695cee588547fb9ef0967081",
      "patch": "@@ -1,3 +1,12 @@\n+2019-05-04  Simon Marchi  <simon.marchi@efficios.com>\n+\t    Tom Tromey  <tom@tromey.com>\n+\n+\t* ppc-linux-nat.c (thread_points_p): Remove typedef and DEF_VEC.\n+\t(ppc_threads): Now a std::vector.  Now static.\n+\t(hwdebug_find_thread_points_by_tid)\n+\t(ppc_linux_nat_target::low_new_thread, ppc_linux_thread_exit):\n+\tUpdate.\n+\n 2019-05-04  Tom Tromey  <tom@tromey.com>\n \n \t* arc-tdep.c (arc_tdesc_init): Return bool."
    },
    {
      "sha": "70e2962c99e409373e9fdae9f51a45311e653bb2",
      "filename": "gdb/ppc-linux-nat.c",
      "status": "modified",
      "additions": 30,
      "deletions": 28,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5da01df5b5601cae695cee588547fb9ef0967081/gdb/ppc-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5da01df5b5601cae695cee588547fb9ef0967081/gdb/ppc-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-linux-nat.c?ref=5da01df5b5601cae695cee588547fb9ef0967081",
      "patch": "@@ -1578,7 +1578,7 @@ struct hw_break_tuple\n /* This is an internal VEC created to store information about *points inserted\n    for each thread.  This is used when PowerPC HWDEBUG ptrace interface is\n    available.  */\n-typedef struct thread_points\n+struct thread_points\n   {\n     /* The TID to which this *point relates.  */\n     int tid;\n@@ -1589,10 +1589,9 @@ typedef struct thread_points\n        size of these vector is MAX_SLOTS_NUMBER.  If the hw_break element of\n        the tuple is NULL, then the position in the vector is free.  */\n     struct hw_break_tuple *hw_breaks;\n-  } *thread_points_p;\n-DEF_VEC_P (thread_points_p);\n+  };\n \n-VEC(thread_points_p) *ppc_threads = NULL;\n+static std::vector<thread_points *> ppc_threads;\n \n /* The version of the PowerPC HWDEBUG kernel interface that we will use, if\n    available.  */\n@@ -1758,14 +1757,13 @@ hwdebug_point_cmp (struct ppc_hw_breakpoint *a, struct ppc_hw_breakpoint *b)\n static struct thread_points *\n hwdebug_find_thread_points_by_tid (int tid, int alloc_new)\n {\n-  int i;\n-  struct thread_points *t;\n-\n-  for (i = 0; VEC_iterate (thread_points_p, ppc_threads, i, t); i++)\n-    if (t->tid == tid)\n-      return t;\n+  for (thread_points *t : ppc_threads)\n+    {\n+      if (t->tid == tid)\n+\treturn t;\n+    }\n \n-  t = NULL;\n+  struct thread_points *t = NULL;\n \n   /* Do we need to allocate a new point_item\n      if the wanted one does not exist?  */\n@@ -1774,7 +1772,7 @@ hwdebug_find_thread_points_by_tid (int tid, int alloc_new)\n       t = XNEW (struct thread_points);\n       t->hw_breaks = XCNEWVEC (struct hw_break_tuple, max_slots_number);\n       t->tid = tid;\n-      VEC_safe_push (thread_points_p, ppc_threads, t);\n+      ppc_threads.push_back (t);\n     }\n \n   return t;\n@@ -1804,12 +1802,14 @@ hwdebug_insert_point (struct ppc_hw_breakpoint *b, int tid)\n \n   /* Find a free element in the hw_breaks vector.  */\n   for (i = 0; i < max_slots_number; i++)\n-    if (hw_breaks[i].hw_break == NULL)\n-      {\n-\thw_breaks[i].slot = slot;\n-\thw_breaks[i].hw_break = p.release ();\n-\tbreak;\n-      }\n+    {\n+      if (hw_breaks[i].hw_break == NULL)\n+\t{\n+\t  hw_breaks[i].slot = slot;\n+\t  hw_breaks[i].hw_break = p.release ();\n+\t  break;\n+\t}\n+    }\n \n   gdb_assert (i != max_slots_number);\n }\n@@ -2359,11 +2359,11 @@ ppc_linux_nat_target::low_new_thread (struct lwp_info *lp)\n       struct thread_points *p;\n       struct hw_break_tuple *hw_breaks;\n \n-      if (VEC_empty (thread_points_p, ppc_threads))\n+      if (ppc_threads.empty ())\n \treturn;\n \n       /* Get a list of breakpoints from any thread.  */\n-      p = VEC_last (thread_points_p, ppc_threads);\n+      p = ppc_threads.back ();\n       hw_breaks = p->hw_breaks;\n \n       /* Copy that thread's breakpoints and watchpoints to the new thread.  */\n@@ -2392,22 +2392,24 @@ ppc_linux_thread_exit (struct thread_info *tp, int silent)\n   int i;\n   int tid = tp->ptid.lwp ();\n   struct hw_break_tuple *hw_breaks;\n-  struct thread_points *t = NULL, *p;\n+  struct thread_points *t = NULL;\n \n   if (!have_ptrace_hwdebug_interface ())\n     return;\n \n-  for (i = 0; VEC_iterate (thread_points_p, ppc_threads, i, p); i++)\n-    if (p->tid == tid)\n-      {\n-\tt = p;\n-\tbreak;\n-      }\n+  for (i = 0; i < ppc_threads.size (); i++)\n+    {\n+      if (ppc_threads[i]->tid == tid)\n+\t{\n+\t  t = ppc_threads[i];\n+\t  break;\n+\t}\n+    }\n \n   if (t == NULL)\n     return;\n \n-  VEC_unordered_remove (thread_points_p, ppc_threads, i);\n+  unordered_remove (ppc_threads, i);\n \n   hw_breaks = t->hw_breaks;\n "
    }
  ]
}