{
  "sha": "911438f9f4516f2c5c3fc4eaecc47571aef98d1d",
  "node_id": "C_kwDOANOeidoAKDkxMTQzOGY5ZjQ1MTZmMmM1YzNmYzRlYWVjYzQ3NTcxYWVmOThkMWQ",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-11-18T20:41:45Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-11-20T12:36:47Z"
    },
    "message": "gdbsupport: fix array-view compilation with c++11 && _GLIBCXX_DEBUG\n\nWhen building with -std=c++11 and -D_GLIBCXX_DEBUG=1, we get some errors\nlike:\n\n      CXX    unittests/array-view-selftests.o\n    In file included from /home/smarchi/src/binutils-gdb/gdb/utils.h:25,\n                     from /home/smarchi/src/binutils-gdb/gdb/defs.h:630,\n                     from /home/smarchi/src/binutils-gdb/gdb/unittests/array-view-selftests.c:20:\n    /home/smarchi/src/binutils-gdb/gdb/../gdbsupport/array-view.h: In instantiation of constexpr gdb::array_view<T> gdb::array_view<T>::slice(gdb::array_view<T>::size_type, gdb::array_view<T>::size_type) const [with T = unsigned char; gdb::array_view<T>::size_type = long unsigned int:\n    /home/smarchi/src/binutils-gdb/gdb/unittests/array-view-selftests.c:532:29:   required from here\n    /home/smarchi/src/binutils-gdb/gdb/../gdbsupport/array-view.h:192:3: error: body of constexpr function constexpr gdb::array_view<T> gdb::array_view<T>::slice(gdb::array_view<T>::size_type, gdb::array_view<T>::size_type) const [with T = unsigned char; gdb::array_view<T>::size_type = long unsigned int not a return-statement\n      192 |   }\n          |   ^\n\nThis is because constexpr functions in c++11 can only consist of a\nsingle return statement, so we can't have the gdb_assert in there.  Make\nthe gdb_assert presence conditional to the __cplusplus version, to\nenable it only for c++14 and later.\n\nChange-Id: I2ac33f7b4bd1765ddc3ac8d07445b16ac1f340f0",
    "tree": {
      "sha": "c9411f5939e9ea7ab24baaa576c8ab597c578b91",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c9411f5939e9ea7ab24baaa576c8ab597c578b91"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/911438f9f4516f2c5c3fc4eaecc47571aef98d1d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/911438f9f4516f2c5c3fc4eaecc47571aef98d1d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/911438f9f4516f2c5c3fc4eaecc47571aef98d1d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/911438f9f4516f2c5c3fc4eaecc47571aef98d1d/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0f8f2de1836941fe0c64ebac47e9a17a9063be86",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0f8f2de1836941fe0c64ebac47e9a17a9063be86",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0f8f2de1836941fe0c64ebac47e9a17a9063be86"
    }
  ],
  "stats": {
    "total": 6,
    "additions": 3,
    "deletions": 3
  },
  "files": [
    {
      "sha": "edf66559e2d91800dcc31fd3cbecf15ca349b69e",
      "filename": "gdbsupport/array-view.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/911438f9f4516f2c5c3fc4eaecc47571aef98d1d/gdbsupport/array-view.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/911438f9f4516f2c5c3fc4eaecc47571aef98d1d/gdbsupport/array-view.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/array-view.h?ref=911438f9f4516f2c5c3fc4eaecc47571aef98d1d",
      "patch": "@@ -171,7 +171,7 @@ class array_view\n   }\n   constexpr const_reference operator[] (size_t index) const noexcept\n   {\n-#if defined(_GLIBCXX_DEBUG)\n+#if defined(_GLIBCXX_DEBUG) && __cplusplus >= 201402L\n     gdb_assert (index < m_size);\n #endif\n     return m_array[index];\n@@ -185,7 +185,7 @@ class array_view\n   /* Return a new array view over SIZE elements starting at START.  */\n   constexpr array_view<T> slice (size_type start, size_type size) const noexcept\n   {\n-#if defined(_GLIBCXX_DEBUG)\n+#if defined(_GLIBCXX_DEBUG) && __cplusplus >= 201402L\n     gdb_assert (start + size <= m_size);\n #endif\n     return {m_array + start, size};\n@@ -195,7 +195,7 @@ class array_view\n      inclusive.  */\n   constexpr array_view<T> slice (size_type start) const noexcept\n   {\n-#if defined(_GLIBCXX_DEBUG)\n+#if defined(_GLIBCXX_DEBUG) && __cplusplus >= 201402L\n     gdb_assert (start <= m_size);\n #endif\n     return {m_array + start, size () - start};"
    }
  ]
}