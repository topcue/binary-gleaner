{
  "sha": "1fb314aaa3142711e452e66c2dced781a4d1ef87",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWZiMzE0YWFhMzE0MjcxMWU0NTJlNjZjMmRjZWQ3ODFhNGQxZWY4Nw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-05-01T20:51:15Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-02T12:53:10Z"
    },
    "message": "gdb: Convert language la_language_arch_info field to a method\n\nThis commit changes the language_data::la_language_arch_info function\npointer member variable into a member function of language_defn.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* ada-lang.c (ada_language_arch_info): Delete function, move\n\timplementation to...\n\t(ada_language::language_arch_info): ...here, a new member\n\tfunction.\n\t(ada_language_data): Delete la_language_arch_info.\n\t* c-lang.c (c_language_data): Likewise.\n\t(c_language::language_arch_info): New member function.\n\t(cplus_language_arch_info): Delete function, move\n\timplementation to...\n\t(cplus_language::language_arch_info): ...here, a new member\n\tfunction.\n\t(cplus_language_data): Delete la_language_arch_info.\n\t(asm_language_data): Likewise.\n\t(asm_language::language_arch_info): New member function.\n\t(minimal_language_data): Delete la_language_arch_info.\n\t(minimal_language::language_arch_info): New member function.\n\t* d-lang.c (d_language_arch_info): Delete function, move\n\timplementation to...\n\t(d_language::language_arch_info): ...here, a new member\n\tfunction.\n\t(d_language_data): Delete la_language_arch_info.\n\t* f-lang.c (f_language_arch_info): Delete function, move\n\timplementation to...\n\t(f_language::language_arch_info): ...here, a new member\n\tfunction.\n\t(f_language_data): Delete la_language_arch_info.\n\t* go-lang.c (go_language_arch_info): Delete function, move\n\timplementation to...\n\t(go_language::language_arch_info): ...here, a new member\n\tfunction.\n\t(go_language_data): Delete la_language_arch_info.\n\t* language.c (unknown_language_data): Likewise.\n\t(unknown_language::language_arch_info): New member function.\n\t(auto_language_data): Delete la_language_arch_info.\n\t(auto_language::language_arch_info): New member function.\n\t(language_gdbarch_post_init): Update call to\n\tla_language_arch_info.\n\t* language.h (language_data): Delete la_language_arch_info\n\tfunction pointer.\n\t(language_defn::language_arch_info): New function.\n\t* m2-lang.c (m2_language_arch_info): Delete function, move\n\timplementation to...\n\t(m2_language::language_arch_info): ...here, a new member\n\tfunction.\n\t(m2_language_data): Delete la_language_arch_info.\n\t* objc-lang.c (objc_language_arch_info): Delete function, move\n\timplementation to...\n\t(objc_language::language_arch_info): ...here, a new member\n\tfunction.\n\t(objc_language_data): Delete la_language_arch_info.\n\t* opencl-lang.c (opencl_language_arch_info): Delete function, move\n\timplementation to...\n\t(opencl_language::language_arch_info): ...here, a new member\n\tfunction.\n\t(opencl_language_data): Delete la_language_arch_info.\n\t* p-lang.c (pascal_language_arch_info): Delete function, move\n\timplementation to...\n\t(pascal_language::language_arch_info): ...here, a new member\n\tfunction.\n\t(pascal_language_data): Delete la_language_arch_info.\n\t* rust-lang.c (rust_language_arch_info): Delete function, move\n\timplementation to...\n\t(rust_language::language_arch_info): ...here, a new member\n\tfunction.\n\t(rust_language_data): Delete la_language_arch_info.",
    "tree": {
      "sha": "ce4f8ed92b2c79139a274e51c53d782a3682fb05",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ce4f8ed92b2c79139a274e51c53d782a3682fb05"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1fb314aaa3142711e452e66c2dced781a4d1ef87",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1fb314aaa3142711e452e66c2dced781a4d1ef87",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1fb314aaa3142711e452e66c2dced781a4d1ef87",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1fb314aaa3142711e452e66c2dced781a4d1ef87/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "48448202d7e607d7423c6186438099f442732a95",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/48448202d7e607d7423c6186438099f442732a95",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/48448202d7e607d7423c6186438099f442732a95"
    }
  ],
  "stats": {
    "total": 987,
    "additions": 538,
    "deletions": 449
  },
  "files": [
    {
      "sha": "4a0dbd1c3d32ca0bf0241711c2b7cd590ad53ff3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 68,
      "deletions": 0,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1fb314aaa3142711e452e66c2dced781a4d1ef87",
      "patch": "@@ -1,3 +1,71 @@\n+2020-06-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* ada-lang.c (ada_language_arch_info): Delete function, move\n+\timplementation to...\n+\t(ada_language::language_arch_info): ...here, a new member\n+\tfunction.\n+\t(ada_language_data): Delete la_language_arch_info.\n+\t* c-lang.c (c_language_data): Likewise.\n+\t(c_language::language_arch_info): New member function.\n+\t(cplus_language_arch_info): Delete function, move\n+\timplementation to...\n+\t(cplus_language::language_arch_info): ...here, a new member\n+\tfunction.\n+\t(cplus_language_data): Delete la_language_arch_info.\n+\t(asm_language_data): Likewise.\n+\t(asm_language::language_arch_info): New member function.\n+\t(minimal_language_data): Delete la_language_arch_info.\n+\t(minimal_language::language_arch_info): New member function.\n+\t* d-lang.c (d_language_arch_info): Delete function, move\n+\timplementation to...\n+\t(d_language::language_arch_info): ...here, a new member\n+\tfunction.\n+\t(d_language_data): Delete la_language_arch_info.\n+\t* f-lang.c (f_language_arch_info): Delete function, move\n+\timplementation to...\n+\t(f_language::language_arch_info): ...here, a new member\n+\tfunction.\n+\t(f_language_data): Delete la_language_arch_info.\n+\t* go-lang.c (go_language_arch_info): Delete function, move\n+\timplementation to...\n+\t(go_language::language_arch_info): ...here, a new member\n+\tfunction.\n+\t(go_language_data): Delete la_language_arch_info.\n+\t* language.c (unknown_language_data): Likewise.\n+\t(unknown_language::language_arch_info): New member function.\n+\t(auto_language_data): Delete la_language_arch_info.\n+\t(auto_language::language_arch_info): New member function.\n+\t(language_gdbarch_post_init): Update call to\n+\tla_language_arch_info.\n+\t* language.h (language_data): Delete la_language_arch_info\n+\tfunction pointer.\n+\t(language_defn::language_arch_info): New function.\n+\t* m2-lang.c (m2_language_arch_info): Delete function, move\n+\timplementation to...\n+\t(m2_language::language_arch_info): ...here, a new member\n+\tfunction.\n+\t(m2_language_data): Delete la_language_arch_info.\n+\t* objc-lang.c (objc_language_arch_info): Delete function, move\n+\timplementation to...\n+\t(objc_language::language_arch_info): ...here, a new member\n+\tfunction.\n+\t(objc_language_data): Delete la_language_arch_info.\n+\t* opencl-lang.c (opencl_language_arch_info): Delete function, move\n+\timplementation to...\n+\t(opencl_language::language_arch_info): ...here, a new member\n+\tfunction.\n+\t(opencl_language_data): Delete la_language_arch_info.\n+\t* p-lang.c (pascal_language_arch_info): Delete function, move\n+\timplementation to...\n+\t(pascal_language::language_arch_info): ...here, a new member\n+\tfunction.\n+\t(pascal_language_data): Delete la_language_arch_info.\n+\t* rust-lang.c (rust_language_arch_info): Delete function, move\n+\timplementation to...\n+\t(rust_language::language_arch_info): ...here, a new member\n+\tfunction.\n+\t(rust_language_data): Delete la_language_arch_info.\n+\n 2020-06-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* ada-lang.c (ada_language_data): Delete la_pass_by_reference"
    },
    {
      "sha": "a1cd04b015c4e4a6d6f008e55feb5495d973f1b4",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 65,
      "deletions": 68,
      "changes": 133,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=1fb314aaa3142711e452e66c2dced781a4d1ef87",
      "patch": "@@ -215,9 +215,6 @@ static int ada_resolve_function (struct block_symbol *, int,\n \n static int ada_is_direct_array_type (struct type *);\n \n-static void ada_language_arch_info (struct gdbarch *,\n-\t\t\t\t    struct language_arch_info *);\n-\n static struct value *ada_index_struct_field (int, struct value *, int,\n \t\t\t\t\t     struct type *);\n \n@@ -13783,70 +13780,6 @@ enum ada_primitive_types {\n   nr_ada_primitive_types\n };\n \n-static void\n-ada_language_arch_info (struct gdbarch *gdbarch,\n-\t\t\tstruct language_arch_info *lai)\n-{\n-  const struct builtin_type *builtin = builtin_type (gdbarch);\n-\n-  lai->primitive_type_vector\n-    = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_ada_primitive_types + 1,\n-\t\t\t      struct type *);\n-\n-  lai->primitive_type_vector [ada_primitive_type_int]\n-    = arch_integer_type (gdbarch, gdbarch_int_bit (gdbarch),\n-\t\t\t 0, \"integer\");\n-  lai->primitive_type_vector [ada_primitive_type_long]\n-    = arch_integer_type (gdbarch, gdbarch_long_bit (gdbarch),\n-\t\t\t 0, \"long_integer\");\n-  lai->primitive_type_vector [ada_primitive_type_short]\n-    = arch_integer_type (gdbarch, gdbarch_short_bit (gdbarch),\n-\t\t\t 0, \"short_integer\");\n-  lai->string_char_type\n-    = lai->primitive_type_vector [ada_primitive_type_char]\n-    = arch_character_type (gdbarch, TARGET_CHAR_BIT, 0, \"character\");\n-  lai->primitive_type_vector [ada_primitive_type_float]\n-    = arch_float_type (gdbarch, gdbarch_float_bit (gdbarch),\n-\t\t       \"float\", gdbarch_float_format (gdbarch));\n-  lai->primitive_type_vector [ada_primitive_type_double]\n-    = arch_float_type (gdbarch, gdbarch_double_bit (gdbarch),\n-\t\t       \"long_float\", gdbarch_double_format (gdbarch));\n-  lai->primitive_type_vector [ada_primitive_type_long_long]\n-    = arch_integer_type (gdbarch, gdbarch_long_long_bit (gdbarch),\n-\t\t\t 0, \"long_long_integer\");\n-  lai->primitive_type_vector [ada_primitive_type_long_double]\n-    = arch_float_type (gdbarch, gdbarch_long_double_bit (gdbarch),\n-\t\t       \"long_long_float\", gdbarch_long_double_format (gdbarch));\n-  lai->primitive_type_vector [ada_primitive_type_natural]\n-    = arch_integer_type (gdbarch, gdbarch_int_bit (gdbarch),\n-\t\t\t 0, \"natural\");\n-  lai->primitive_type_vector [ada_primitive_type_positive]\n-    = arch_integer_type (gdbarch, gdbarch_int_bit (gdbarch),\n-\t\t\t 0, \"positive\");\n-  lai->primitive_type_vector [ada_primitive_type_void]\n-    = builtin->builtin_void;\n-\n-  lai->primitive_type_vector [ada_primitive_type_system_address]\n-    = lookup_pointer_type (arch_type (gdbarch, TYPE_CODE_VOID, TARGET_CHAR_BIT,\n-\t\t\t\t      \"void\"));\n-  lai->primitive_type_vector [ada_primitive_type_system_address]\n-    ->set_name (\"system__address\");\n-\n-  /* Create the equivalent of the System.Storage_Elements.Storage_Offset\n-     type.  This is a signed integral type whose size is the same as\n-     the size of addresses.  */\n-  {\n-    unsigned int addr_length = TYPE_LENGTH\n-      (lai->primitive_type_vector [ada_primitive_type_system_address]);\n-\n-    lai->primitive_type_vector [ada_primitive_type_storage_offset]\n-      = arch_integer_type (gdbarch, addr_length * HOST_CHAR_BIT, 0,\n-\t\t\t   \"storage_offset\");\n-  }\n-\n-  lai->bool_type_symbol = NULL;\n-  lai->bool_type_default = builtin->builtin_bool;\n-}\n \f\n \t\t\t\t/* Language vector */\n \n@@ -14065,7 +13998,6 @@ extern const struct language_data ada_language_data =\n   1,                            /* String lower bound */\n   ada_get_gdb_completer_word_break_characters,\n   ada_collect_symbol_completion_matches,\n-  ada_language_arch_info,\n   ada_watch_location_expression,\n   ada_get_symbol_name_matcher,\t/* la_get_symbol_name_matcher */\n   ada_iterate_over_symbols,\n@@ -14118,6 +14050,71 @@ class ada_language : public language_defn\n        function to work.  */\n     return language_defn::read_var_value (var, var_block, frame);\n   }\n+\n+  /* See language.h.  */\n+  void language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t   struct language_arch_info *lai) const override\n+  {\n+    const struct builtin_type *builtin = builtin_type (gdbarch);\n+\n+    lai->primitive_type_vector\n+      = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_ada_primitive_types + 1,\n+\t\t\t\tstruct type *);\n+\n+    lai->primitive_type_vector [ada_primitive_type_int]\n+      = arch_integer_type (gdbarch, gdbarch_int_bit (gdbarch),\n+\t\t\t   0, \"integer\");\n+    lai->primitive_type_vector [ada_primitive_type_long]\n+      = arch_integer_type (gdbarch, gdbarch_long_bit (gdbarch),\n+\t\t\t   0, \"long_integer\");\n+    lai->primitive_type_vector [ada_primitive_type_short]\n+      = arch_integer_type (gdbarch, gdbarch_short_bit (gdbarch),\n+\t\t\t   0, \"short_integer\");\n+    lai->string_char_type\n+      = lai->primitive_type_vector [ada_primitive_type_char]\n+      = arch_character_type (gdbarch, TARGET_CHAR_BIT, 0, \"character\");\n+    lai->primitive_type_vector [ada_primitive_type_float]\n+      = arch_float_type (gdbarch, gdbarch_float_bit (gdbarch),\n+\t\t\t \"float\", gdbarch_float_format (gdbarch));\n+    lai->primitive_type_vector [ada_primitive_type_double]\n+      = arch_float_type (gdbarch, gdbarch_double_bit (gdbarch),\n+\t\t\t \"long_float\", gdbarch_double_format (gdbarch));\n+    lai->primitive_type_vector [ada_primitive_type_long_long]\n+      = arch_integer_type (gdbarch, gdbarch_long_long_bit (gdbarch),\n+\t\t\t   0, \"long_long_integer\");\n+    lai->primitive_type_vector [ada_primitive_type_long_double]\n+      = arch_float_type (gdbarch, gdbarch_long_double_bit (gdbarch),\n+\t\t\t \"long_long_float\", gdbarch_long_double_format (gdbarch));\n+    lai->primitive_type_vector [ada_primitive_type_natural]\n+      = arch_integer_type (gdbarch, gdbarch_int_bit (gdbarch),\n+\t\t\t   0, \"natural\");\n+    lai->primitive_type_vector [ada_primitive_type_positive]\n+      = arch_integer_type (gdbarch, gdbarch_int_bit (gdbarch),\n+\t\t\t   0, \"positive\");\n+    lai->primitive_type_vector [ada_primitive_type_void]\n+      = builtin->builtin_void;\n+\n+    lai->primitive_type_vector [ada_primitive_type_system_address]\n+      = lookup_pointer_type (arch_type (gdbarch, TYPE_CODE_VOID, TARGET_CHAR_BIT,\n+\t\t\t\t\t\"void\"));\n+    lai->primitive_type_vector [ada_primitive_type_system_address]\n+      ->set_name (\"system__address\");\n+\n+    /* Create the equivalent of the System.Storage_Elements.Storage_Offset\n+       type.  This is a signed integral type whose size is the same as\n+       the size of addresses.  */\n+    {\n+      unsigned int addr_length = TYPE_LENGTH\n+\t(lai->primitive_type_vector [ada_primitive_type_system_address]);\n+\n+      lai->primitive_type_vector [ada_primitive_type_storage_offset]\n+\t= arch_integer_type (gdbarch, addr_length * HOST_CHAR_BIT, 0,\n+\t\t\t     \"storage_offset\");\n+    }\n+\n+    lai->bool_type_symbol = NULL;\n+    lai->bool_type_default = builtin->builtin_bool;\n+  }\n };\n \n /* Single instance of the Ada language class.  */"
    },
    {
      "sha": "e82d058777ed9ff2a15f1ff167feb278c7a96bd0",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 86,
      "deletions": 67,
      "changes": 153,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=1fb314aaa3142711e452e66c2dced781a4d1ef87",
      "patch": "@@ -921,7 +921,6 @@ extern const struct language_data c_language_data =\n   0,\t\t\t\t/* String lower bound */\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n-  c_language_arch_info,\n   c_watch_location_expression,\n   NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   iterate_over_symbols,\n@@ -941,6 +940,13 @@ class c_language : public language_defn\n   c_language ()\n     : language_defn (language_c, c_language_data)\n   { /* Nothing.  */ }\n+\n+  /* See language.h.  */\n+  void language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t   struct language_arch_info *lai) const override\n+  {\n+    c_language_arch_info (gdbarch, lai);\n+  }\n };\n \n /* Single instance of the C language class.  */\n@@ -975,69 +981,6 @@ enum cplus_primitive_types {\n   nr_cplus_primitive_types\n };\n \n-static void\n-cplus_language_arch_info (struct gdbarch *gdbarch,\n-\t\t\t  struct language_arch_info *lai)\n-{\n-  const struct builtin_type *builtin = builtin_type (gdbarch);\n-\n-  lai->string_char_type = builtin->builtin_char;\n-  lai->primitive_type_vector\n-    = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_cplus_primitive_types + 1,\n-\t\t\t      struct type *);\n-  lai->primitive_type_vector [cplus_primitive_type_int]\n-    = builtin->builtin_int;\n-  lai->primitive_type_vector [cplus_primitive_type_long]\n-    = builtin->builtin_long;\n-  lai->primitive_type_vector [cplus_primitive_type_short]\n-    = builtin->builtin_short;\n-  lai->primitive_type_vector [cplus_primitive_type_char]\n-    = builtin->builtin_char;\n-  lai->primitive_type_vector [cplus_primitive_type_float]\n-    = builtin->builtin_float;\n-  lai->primitive_type_vector [cplus_primitive_type_double]\n-    = builtin->builtin_double;\n-  lai->primitive_type_vector [cplus_primitive_type_void]\n-    = builtin->builtin_void;\n-  lai->primitive_type_vector [cplus_primitive_type_long_long]\n-    = builtin->builtin_long_long;\n-  lai->primitive_type_vector [cplus_primitive_type_signed_char]\n-    = builtin->builtin_signed_char;\n-  lai->primitive_type_vector [cplus_primitive_type_unsigned_char]\n-    = builtin->builtin_unsigned_char;\n-  lai->primitive_type_vector [cplus_primitive_type_unsigned_short]\n-    = builtin->builtin_unsigned_short;\n-  lai->primitive_type_vector [cplus_primitive_type_unsigned_int]\n-    = builtin->builtin_unsigned_int;\n-  lai->primitive_type_vector [cplus_primitive_type_unsigned_long]\n-    = builtin->builtin_unsigned_long;\n-  lai->primitive_type_vector [cplus_primitive_type_unsigned_long_long]\n-    = builtin->builtin_unsigned_long_long;\n-  lai->primitive_type_vector [cplus_primitive_type_long_double]\n-    = builtin->builtin_long_double;\n-  lai->primitive_type_vector [cplus_primitive_type_complex]\n-    = builtin->builtin_complex;\n-  lai->primitive_type_vector [cplus_primitive_type_double_complex]\n-    = builtin->builtin_double_complex;\n-  lai->primitive_type_vector [cplus_primitive_type_bool]\n-    = builtin->builtin_bool;\n-  lai->primitive_type_vector [cplus_primitive_type_decfloat]\n-    = builtin->builtin_decfloat;\n-  lai->primitive_type_vector [cplus_primitive_type_decdouble]\n-    = builtin->builtin_decdouble;\n-  lai->primitive_type_vector [cplus_primitive_type_declong]\n-    = builtin->builtin_declong;\n-  lai->primitive_type_vector [cplus_primitive_type_char16_t]\n-    = builtin->builtin_char16;\n-  lai->primitive_type_vector [cplus_primitive_type_char32_t]\n-    = builtin->builtin_char32;\n-  lai->primitive_type_vector [cplus_primitive_type_wchar_t]\n-    = builtin->builtin_wchar;\n-\n-  lai->bool_type_symbol = \"bool\";\n-  lai->bool_type_default = builtin->builtin_bool;\n-}\n-\n static const char *cplus_extensions[] =\n {\n   \".C\", \".cc\", \".cp\", \".cpp\", \".cxx\", \".c++\", NULL\n@@ -1079,7 +1022,6 @@ extern const struct language_data cplus_language_data =\n   0,\t\t\t\t/* String lower bound */\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n-  cplus_language_arch_info,\n   c_watch_location_expression,\n   cp_get_symbol_name_matcher,\n   iterate_over_symbols,\n@@ -1107,6 +1049,69 @@ class cplus_language : public language_defn\n   {\n     return cp_pass_by_reference (type);\n   }\n+\n+  /* See language.h.  */\n+  void language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t   struct language_arch_info *lai) const override\n+  {\n+    const struct builtin_type *builtin = builtin_type (gdbarch);\n+\n+    lai->string_char_type = builtin->builtin_char;\n+    lai->primitive_type_vector\n+      = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_cplus_primitive_types + 1,\n+\t\t\t\tstruct type *);\n+    lai->primitive_type_vector [cplus_primitive_type_int]\n+      = builtin->builtin_int;\n+    lai->primitive_type_vector [cplus_primitive_type_long]\n+      = builtin->builtin_long;\n+    lai->primitive_type_vector [cplus_primitive_type_short]\n+      = builtin->builtin_short;\n+    lai->primitive_type_vector [cplus_primitive_type_char]\n+      = builtin->builtin_char;\n+    lai->primitive_type_vector [cplus_primitive_type_float]\n+      = builtin->builtin_float;\n+    lai->primitive_type_vector [cplus_primitive_type_double]\n+      = builtin->builtin_double;\n+    lai->primitive_type_vector [cplus_primitive_type_void]\n+      = builtin->builtin_void;\n+    lai->primitive_type_vector [cplus_primitive_type_long_long]\n+      = builtin->builtin_long_long;\n+    lai->primitive_type_vector [cplus_primitive_type_signed_char]\n+      = builtin->builtin_signed_char;\n+    lai->primitive_type_vector [cplus_primitive_type_unsigned_char]\n+      = builtin->builtin_unsigned_char;\n+    lai->primitive_type_vector [cplus_primitive_type_unsigned_short]\n+      = builtin->builtin_unsigned_short;\n+    lai->primitive_type_vector [cplus_primitive_type_unsigned_int]\n+      = builtin->builtin_unsigned_int;\n+    lai->primitive_type_vector [cplus_primitive_type_unsigned_long]\n+      = builtin->builtin_unsigned_long;\n+    lai->primitive_type_vector [cplus_primitive_type_unsigned_long_long]\n+      = builtin->builtin_unsigned_long_long;\n+    lai->primitive_type_vector [cplus_primitive_type_long_double]\n+      = builtin->builtin_long_double;\n+    lai->primitive_type_vector [cplus_primitive_type_complex]\n+      = builtin->builtin_complex;\n+    lai->primitive_type_vector [cplus_primitive_type_double_complex]\n+      = builtin->builtin_double_complex;\n+    lai->primitive_type_vector [cplus_primitive_type_bool]\n+      = builtin->builtin_bool;\n+    lai->primitive_type_vector [cplus_primitive_type_decfloat]\n+      = builtin->builtin_decfloat;\n+    lai->primitive_type_vector [cplus_primitive_type_decdouble]\n+      = builtin->builtin_decdouble;\n+    lai->primitive_type_vector [cplus_primitive_type_declong]\n+      = builtin->builtin_declong;\n+    lai->primitive_type_vector [cplus_primitive_type_char16_t]\n+      = builtin->builtin_char16;\n+    lai->primitive_type_vector [cplus_primitive_type_char32_t]\n+      = builtin->builtin_char32;\n+    lai->primitive_type_vector [cplus_primitive_type_wchar_t]\n+      = builtin->builtin_wchar;\n+\n+    lai->bool_type_symbol = \"bool\";\n+    lai->bool_type_default = builtin->builtin_bool;\n+  }\n };\n \n /* The single instance of the C++ language class.  */\n@@ -1154,7 +1159,6 @@ extern const struct language_data asm_language_data =\n   0,\t\t\t\t/* String lower bound */\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n-  c_language_arch_info,\t\t/* FIXME: la_language_arch_info.  */\n   c_watch_location_expression,\n   NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   iterate_over_symbols,\n@@ -1174,6 +1178,15 @@ class asm_language : public language_defn\n   asm_language ()\n     : language_defn (language_asm, asm_language_data)\n   { /* Nothing.  */ }\n+\n+  /* See language.h.\n+\n+     FIXME: Should this have its own arch info method?  */\n+  void language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t   struct language_arch_info *lai) const override\n+  {\n+    c_language_arch_info (gdbarch, lai);\n+  }\n };\n \n /* The single instance of the ASM language class.  */\n@@ -1218,7 +1231,6 @@ extern const struct language_data minimal_language_data =\n   0,\t\t\t\t/* String lower bound */\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n-  c_language_arch_info,\n   c_watch_location_expression,\n   NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   iterate_over_symbols,\n@@ -1238,6 +1250,13 @@ class minimal_language : public language_defn\n   minimal_language ()\n     : language_defn (language_minimal, minimal_language_data)\n   { /* Nothing.  */ }\n+\n+  /* See language.h.  */\n+  void language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t   struct language_arch_info *lai) const override\n+  {\n+    c_language_arch_info (gdbarch, lai);\n+  }\n };\n \n /* The single instance of the minimal language class.  */"
    },
    {
      "sha": "778d77313c9d30263af5ae453dc163acb6b8f19e",
      "filename": "gdb/d-lang.c",
      "status": "modified",
      "additions": 64,
      "deletions": 68,
      "changes": 132,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/d-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/d-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-lang.c?ref=1fb314aaa3142711e452e66c2dced781a4d1ef87",
      "patch": "@@ -133,73 +133,6 @@ enum d_primitive_types {\n   nr_d_primitive_types\n };\n \n-/* Implements the la_language_arch_info language_defn routine\n-   for language D.  */\n-\n-static void\n-d_language_arch_info (struct gdbarch *gdbarch,\n-\t\t      struct language_arch_info *lai)\n-{\n-  const struct builtin_d_type *builtin = builtin_d_type (gdbarch);\n-\n-  lai->string_char_type = builtin->builtin_char;\n-  lai->primitive_type_vector\n-    = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_d_primitive_types + 1,\n-\t\t\t      struct type *);\n-\n-  lai->primitive_type_vector [d_primitive_type_void]\n-    = builtin->builtin_void;\n-  lai->primitive_type_vector [d_primitive_type_bool]\n-    = builtin->builtin_bool;\n-  lai->primitive_type_vector [d_primitive_type_byte]\n-    = builtin->builtin_byte;\n-  lai->primitive_type_vector [d_primitive_type_ubyte]\n-    = builtin->builtin_ubyte;\n-  lai->primitive_type_vector [d_primitive_type_short]\n-    = builtin->builtin_short;\n-  lai->primitive_type_vector [d_primitive_type_ushort]\n-    = builtin->builtin_ushort;\n-  lai->primitive_type_vector [d_primitive_type_int]\n-    = builtin->builtin_int;\n-  lai->primitive_type_vector [d_primitive_type_uint]\n-    = builtin->builtin_uint;\n-  lai->primitive_type_vector [d_primitive_type_long]\n-    = builtin->builtin_long;\n-  lai->primitive_type_vector [d_primitive_type_ulong]\n-    = builtin->builtin_ulong;\n-  lai->primitive_type_vector [d_primitive_type_cent]\n-    = builtin->builtin_cent;\n-  lai->primitive_type_vector [d_primitive_type_ucent]\n-    = builtin->builtin_ucent;\n-  lai->primitive_type_vector [d_primitive_type_float]\n-    = builtin->builtin_float;\n-  lai->primitive_type_vector [d_primitive_type_double]\n-    = builtin->builtin_double;\n-  lai->primitive_type_vector [d_primitive_type_real]\n-    = builtin->builtin_real;\n-  lai->primitive_type_vector [d_primitive_type_ifloat]\n-    = builtin->builtin_ifloat;\n-  lai->primitive_type_vector [d_primitive_type_idouble]\n-    = builtin->builtin_idouble;\n-  lai->primitive_type_vector [d_primitive_type_ireal]\n-    = builtin->builtin_ireal;\n-  lai->primitive_type_vector [d_primitive_type_cfloat]\n-    = builtin->builtin_cfloat;\n-  lai->primitive_type_vector [d_primitive_type_cdouble]\n-    = builtin->builtin_cdouble;\n-  lai->primitive_type_vector [d_primitive_type_creal]\n-    = builtin->builtin_creal;\n-  lai->primitive_type_vector [d_primitive_type_char]\n-    = builtin->builtin_char;\n-  lai->primitive_type_vector [d_primitive_type_wchar]\n-    = builtin->builtin_wchar;\n-  lai->primitive_type_vector [d_primitive_type_dchar]\n-    = builtin->builtin_dchar;\n-\n-  lai->bool_type_symbol = \"bool\";\n-  lai->bool_type_default = builtin->builtin_bool;\n-}\n-\n static const char *d_extensions[] =\n {\n   \".d\", NULL\n@@ -242,7 +175,6 @@ extern const struct language_data d_language_data =\n   0,\t\t\t\t/* String lower bound.  */\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n-  d_language_arch_info,\n   c_watch_location_expression,\n   NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   iterate_over_symbols,\n@@ -262,6 +194,70 @@ class d_language : public language_defn\n   d_language ()\n     : language_defn (language_d, d_language_data)\n   { /* Nothing.  */ }\n+\n+  /* See language.h.  */\n+  void language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t   struct language_arch_info *lai) const override\n+  {\n+    const struct builtin_d_type *builtin = builtin_d_type (gdbarch);\n+\n+    lai->string_char_type = builtin->builtin_char;\n+    lai->primitive_type_vector\n+      = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_d_primitive_types + 1,\n+\t\t\t\tstruct type *);\n+\n+    lai->primitive_type_vector [d_primitive_type_void]\n+      = builtin->builtin_void;\n+    lai->primitive_type_vector [d_primitive_type_bool]\n+      = builtin->builtin_bool;\n+    lai->primitive_type_vector [d_primitive_type_byte]\n+      = builtin->builtin_byte;\n+    lai->primitive_type_vector [d_primitive_type_ubyte]\n+      = builtin->builtin_ubyte;\n+    lai->primitive_type_vector [d_primitive_type_short]\n+      = builtin->builtin_short;\n+    lai->primitive_type_vector [d_primitive_type_ushort]\n+      = builtin->builtin_ushort;\n+    lai->primitive_type_vector [d_primitive_type_int]\n+      = builtin->builtin_int;\n+    lai->primitive_type_vector [d_primitive_type_uint]\n+      = builtin->builtin_uint;\n+    lai->primitive_type_vector [d_primitive_type_long]\n+      = builtin->builtin_long;\n+    lai->primitive_type_vector [d_primitive_type_ulong]\n+      = builtin->builtin_ulong;\n+    lai->primitive_type_vector [d_primitive_type_cent]\n+      = builtin->builtin_cent;\n+    lai->primitive_type_vector [d_primitive_type_ucent]\n+      = builtin->builtin_ucent;\n+    lai->primitive_type_vector [d_primitive_type_float]\n+      = builtin->builtin_float;\n+    lai->primitive_type_vector [d_primitive_type_double]\n+      = builtin->builtin_double;\n+    lai->primitive_type_vector [d_primitive_type_real]\n+      = builtin->builtin_real;\n+    lai->primitive_type_vector [d_primitive_type_ifloat]\n+      = builtin->builtin_ifloat;\n+    lai->primitive_type_vector [d_primitive_type_idouble]\n+      = builtin->builtin_idouble;\n+    lai->primitive_type_vector [d_primitive_type_ireal]\n+      = builtin->builtin_ireal;\n+    lai->primitive_type_vector [d_primitive_type_cfloat]\n+      = builtin->builtin_cfloat;\n+    lai->primitive_type_vector [d_primitive_type_cdouble]\n+      = builtin->builtin_cdouble;\n+    lai->primitive_type_vector [d_primitive_type_creal]\n+      = builtin->builtin_creal;\n+    lai->primitive_type_vector [d_primitive_type_char]\n+      = builtin->builtin_char;\n+    lai->primitive_type_vector [d_primitive_type_wchar]\n+      = builtin->builtin_wchar;\n+    lai->primitive_type_vector [d_primitive_type_dchar]\n+      = builtin->builtin_dchar;\n+\n+    lai->bool_type_symbol = \"bool\";\n+    lai->bool_type_default = builtin->builtin_bool;\n+  }\n };\n \n /* Single instance of the D language class.  */"
    },
    {
      "sha": "1eeb5070deec1e2bf586f1b389d9657b1e8d016e",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 38,
      "deletions": 39,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=1fb314aaa3142711e452e66c2dced781a4d1ef87",
      "patch": "@@ -165,44 +165,6 @@ enum f_primitive_types {\n   nr_f_primitive_types\n };\n \n-static void\n-f_language_arch_info (struct gdbarch *gdbarch,\n-\t\t      struct language_arch_info *lai)\n-{\n-  const struct builtin_f_type *builtin = builtin_f_type (gdbarch);\n-\n-  lai->string_char_type = builtin->builtin_character;\n-  lai->primitive_type_vector\n-    = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_f_primitive_types + 1,\n-                              struct type *);\n-\n-  lai->primitive_type_vector [f_primitive_type_character]\n-    = builtin->builtin_character;\n-  lai->primitive_type_vector [f_primitive_type_logical]\n-    = builtin->builtin_logical;\n-  lai->primitive_type_vector [f_primitive_type_logical_s1]\n-    = builtin->builtin_logical_s1;\n-  lai->primitive_type_vector [f_primitive_type_logical_s2]\n-    = builtin->builtin_logical_s2;\n-  lai->primitive_type_vector [f_primitive_type_logical_s8]\n-    = builtin->builtin_logical_s8;\n-  lai->primitive_type_vector [f_primitive_type_real]\n-    = builtin->builtin_real;\n-  lai->primitive_type_vector [f_primitive_type_real_s8]\n-    = builtin->builtin_real_s8;\n-  lai->primitive_type_vector [f_primitive_type_real_s16]\n-    = builtin->builtin_real_s16;\n-  lai->primitive_type_vector [f_primitive_type_complex_s8]\n-    = builtin->builtin_complex_s8;\n-  lai->primitive_type_vector [f_primitive_type_complex_s16]\n-    = builtin->builtin_complex_s16;\n-  lai->primitive_type_vector [f_primitive_type_void]\n-    = builtin->builtin_void;\n-\n-  lai->bool_type_symbol = \"logical\";\n-  lai->bool_type_default = builtin->builtin_logical_s2;\n-}\n-\n /* Remove the modules separator :: from the default break list.  */\n \n static const char *\n@@ -670,7 +632,6 @@ extern const struct language_data f_language_data =\n   1,\t\t\t\t/* String lower bound */\n   f_word_break_characters,\n   f_collect_symbol_completion_matches,\n-  f_language_arch_info,\n   c_watch_location_expression,\n   cp_get_symbol_name_matcher,\t/* la_get_symbol_name_matcher */\n   iterate_over_symbols,\n@@ -690,6 +651,44 @@ class f_language : public language_defn\n   f_language ()\n     : language_defn (language_fortran, f_language_data)\n   { /* Nothing.  */ }\n+\n+  /* See language.h.  */\n+  void language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t   struct language_arch_info *lai) const override\n+  {\n+    const struct builtin_f_type *builtin = builtin_f_type (gdbarch);\n+\n+    lai->string_char_type = builtin->builtin_character;\n+    lai->primitive_type_vector\n+      = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_f_primitive_types + 1,\n+\t\t\t\tstruct type *);\n+\n+    lai->primitive_type_vector [f_primitive_type_character]\n+      = builtin->builtin_character;\n+    lai->primitive_type_vector [f_primitive_type_logical]\n+      = builtin->builtin_logical;\n+    lai->primitive_type_vector [f_primitive_type_logical_s1]\n+      = builtin->builtin_logical_s1;\n+    lai->primitive_type_vector [f_primitive_type_logical_s2]\n+      = builtin->builtin_logical_s2;\n+    lai->primitive_type_vector [f_primitive_type_logical_s8]\n+      = builtin->builtin_logical_s8;\n+    lai->primitive_type_vector [f_primitive_type_real]\n+      = builtin->builtin_real;\n+    lai->primitive_type_vector [f_primitive_type_real_s8]\n+      = builtin->builtin_real_s8;\n+    lai->primitive_type_vector [f_primitive_type_real_s16]\n+      = builtin->builtin_real_s16;\n+    lai->primitive_type_vector [f_primitive_type_complex_s8]\n+      = builtin->builtin_complex_s8;\n+    lai->primitive_type_vector [f_primitive_type_complex_s16]\n+      = builtin->builtin_complex_s16;\n+    lai->primitive_type_vector [f_primitive_type_void]\n+      = builtin->builtin_void;\n+\n+    lai->bool_type_symbol = \"logical\";\n+    lai->bool_type_default = builtin->builtin_logical_s2;\n+  }\n };\n \n /* Single instance of the Fortran language class.  */"
    },
    {
      "sha": "7340a334e66dc387d54c05ac77f3ba5fef107eee",
      "filename": "gdb/go-lang.c",
      "status": "modified",
      "additions": 53,
      "deletions": 54,
      "changes": 107,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/go-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/go-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.c?ref=1fb314aaa3142711e452e66c2dced781a4d1ef87",
      "patch": "@@ -523,59 +523,6 @@ enum go_primitive_types {\n   nr_go_primitive_types\n };\n \n-static void\n-go_language_arch_info (struct gdbarch *gdbarch,\n-\t\t       struct language_arch_info *lai)\n-{\n-  const struct builtin_go_type *builtin = builtin_go_type (gdbarch);\n-\n-  lai->string_char_type = builtin->builtin_char;\n-\n-  lai->primitive_type_vector\n-    = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_go_primitive_types + 1,\n-\t\t\t      struct type *);\n-\n-  lai->primitive_type_vector [go_primitive_type_void]\n-    = builtin->builtin_void;\n-  lai->primitive_type_vector [go_primitive_type_char]\n-    = builtin->builtin_char;\n-  lai->primitive_type_vector [go_primitive_type_bool]\n-    = builtin->builtin_bool;\n-  lai->primitive_type_vector [go_primitive_type_int]\n-    = builtin->builtin_int;\n-  lai->primitive_type_vector [go_primitive_type_uint]\n-    = builtin->builtin_uint;\n-  lai->primitive_type_vector [go_primitive_type_uintptr]\n-    = builtin->builtin_uintptr;\n-  lai->primitive_type_vector [go_primitive_type_int8]\n-    = builtin->builtin_int8;\n-  lai->primitive_type_vector [go_primitive_type_int16]\n-    = builtin->builtin_int16;\n-  lai->primitive_type_vector [go_primitive_type_int32]\n-    = builtin->builtin_int32;\n-  lai->primitive_type_vector [go_primitive_type_int64]\n-    = builtin->builtin_int64;\n-  lai->primitive_type_vector [go_primitive_type_uint8]\n-    = builtin->builtin_uint8;\n-  lai->primitive_type_vector [go_primitive_type_uint16]\n-    = builtin->builtin_uint16;\n-  lai->primitive_type_vector [go_primitive_type_uint32]\n-    = builtin->builtin_uint32;\n-  lai->primitive_type_vector [go_primitive_type_uint64]\n-    = builtin->builtin_uint64;\n-  lai->primitive_type_vector [go_primitive_type_float32]\n-    = builtin->builtin_float32;\n-  lai->primitive_type_vector [go_primitive_type_float64]\n-    = builtin->builtin_float64;\n-  lai->primitive_type_vector [go_primitive_type_complex64]\n-    = builtin->builtin_complex64;\n-  lai->primitive_type_vector [go_primitive_type_complex128]\n-    = builtin->builtin_complex128;\n-\n-  lai->bool_type_symbol = \"bool\";\n-  lai->bool_type_default = builtin->builtin_bool;\n-}\n-\n /* Constant data that describes the Go language.  */\n \n extern const struct language_data go_language_data =\n@@ -613,7 +560,6 @@ extern const struct language_data go_language_data =\n   0,\t\t\t\t/* String lower bound.  */\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n-  go_language_arch_info,\n   c_watch_location_expression,\n   NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   iterate_over_symbols,\n@@ -633,6 +579,59 @@ class go_language : public language_defn\n   go_language ()\n     : language_defn (language_go, go_language_data)\n   { /* Nothing.  */ }\n+\n+  /* See language.h.  */\n+  void language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t   struct language_arch_info *lai) const override\n+  {\n+    const struct builtin_go_type *builtin = builtin_go_type (gdbarch);\n+\n+    lai->string_char_type = builtin->builtin_char;\n+\n+    lai->primitive_type_vector\n+      = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_go_primitive_types + 1,\n+\t\t\t\tstruct type *);\n+\n+    lai->primitive_type_vector [go_primitive_type_void]\n+      = builtin->builtin_void;\n+    lai->primitive_type_vector [go_primitive_type_char]\n+      = builtin->builtin_char;\n+    lai->primitive_type_vector [go_primitive_type_bool]\n+      = builtin->builtin_bool;\n+    lai->primitive_type_vector [go_primitive_type_int]\n+      = builtin->builtin_int;\n+    lai->primitive_type_vector [go_primitive_type_uint]\n+      = builtin->builtin_uint;\n+    lai->primitive_type_vector [go_primitive_type_uintptr]\n+      = builtin->builtin_uintptr;\n+    lai->primitive_type_vector [go_primitive_type_int8]\n+      = builtin->builtin_int8;\n+    lai->primitive_type_vector [go_primitive_type_int16]\n+      = builtin->builtin_int16;\n+    lai->primitive_type_vector [go_primitive_type_int32]\n+      = builtin->builtin_int32;\n+    lai->primitive_type_vector [go_primitive_type_int64]\n+      = builtin->builtin_int64;\n+    lai->primitive_type_vector [go_primitive_type_uint8]\n+      = builtin->builtin_uint8;\n+    lai->primitive_type_vector [go_primitive_type_uint16]\n+      = builtin->builtin_uint16;\n+    lai->primitive_type_vector [go_primitive_type_uint32]\n+      = builtin->builtin_uint32;\n+    lai->primitive_type_vector [go_primitive_type_uint64]\n+      = builtin->builtin_uint64;\n+    lai->primitive_type_vector [go_primitive_type_float32]\n+      = builtin->builtin_float32;\n+    lai->primitive_type_vector [go_primitive_type_float64]\n+      = builtin->builtin_float64;\n+    lai->primitive_type_vector [go_primitive_type_complex64]\n+      = builtin->builtin_complex64;\n+    lai->primitive_type_vector [go_primitive_type_complex128]\n+      = builtin->builtin_complex128;\n+\n+    lai->bool_type_symbol = \"bool\";\n+    lai->bool_type_default = builtin->builtin_bool;\n+  }\n };\n \n /* Single instance of the Go language class.  */"
    },
    {
      "sha": "bc714ba85bd32cfa73a918f54d42cdfb2f467b9c",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 19,
      "deletions": 7,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=1fb314aaa3142711e452e66c2dced781a4d1ef87",
      "patch": "@@ -837,7 +837,6 @@ extern const struct language_data unknown_language_data =\n   0,\t\t\t\t/* String lower bound */\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n-  unknown_language_arch_info,\t/* la_language_arch_info.  */\n   c_watch_location_expression,\n   NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   iterate_over_symbols,\n@@ -857,6 +856,13 @@ class unknown_language : public language_defn\n   unknown_language ()\n     : language_defn (language_unknown, unknown_language_data)\n   { /* Nothing.  */ }\n+\n+  /* See language.h.  */\n+  void language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t   struct language_arch_info *lai) const override\n+  {\n+    unknown_language_arch_info (gdbarch, lai);\n+  }\n };\n \n /* Single instance of the unknown language class.  */\n@@ -899,7 +905,6 @@ extern const struct language_data auto_language_data =\n   0,\t\t\t\t/* String lower bound */\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n-  unknown_language_arch_info,\t/* la_language_arch_info.  */\n   c_watch_location_expression,\n   NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   iterate_over_symbols,\n@@ -919,6 +924,13 @@ class auto_language : public language_defn\n   auto_language ()\n     : language_defn (language_auto, auto_language_data)\n   { /* Nothing.  */ }\n+\n+  /* See language.h.  */\n+  void language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t   struct language_arch_info *lai) const override\n+  {\n+    unknown_language_arch_info (gdbarch, lai);\n+  }\n };\n \n /* Single instance of the fake \"auto\" language.  */\n@@ -944,11 +956,11 @@ language_gdbarch_post_init (struct gdbarch *gdbarch)\n \n   l = GDBARCH_OBSTACK_ZALLOC (gdbarch, struct language_gdbarch);\n   for (const auto &lang : language_defn::languages)\n-    if (lang != NULL && lang->la_language_arch_info != NULL)\n-      {\n-\tlang->la_language_arch_info (gdbarch,\n-\t\t\t\t     l->arch_info + lang->la_language);\n-      }\n+    {\n+      gdb_assert (lang != nullptr);\n+      lang->language_arch_info (gdbarch,\n+\t\t\t\tl->arch_info + lang->la_language);\n+    }\n \n   return l;\n }"
    },
    {
      "sha": "4cf16c11540f88b9abba11f64703b2849399ea9f",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=1fb314aaa3142711e452e66c2dced781a4d1ef87",
      "patch": "@@ -368,10 +368,6 @@ struct language_data\n        const char *word,\n        enum type_code code);\n \n-    /* The per-architecture (OS/ABI) language information.  */\n-    void (*la_language_arch_info) (struct gdbarch *,\n-\t\t\t\t   struct language_arch_info *);\n-\n     /* Return an expression that can be used for a location\n        watchpoint.  TYPE is a pointer type that points to the memory\n        to watch, and ADDR is the address of the watched memory.  */\n@@ -503,6 +499,11 @@ struct language_defn : language_data\n     return {};\n   }\n \n+  /* The per-architecture (OS/ABI) language information.  */\n+\n+  virtual void language_arch_info (struct gdbarch *,\n+\t\t\t\t   struct language_arch_info *) const = 0;\n+\n   /* List of all known languages.  */\n   static const struct language_defn *languages[nr_languages];\n };"
    },
    {
      "sha": "16738e1b7e96d884efcb8fa8d02a1dbc5fd2aba5",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 26,
      "deletions": 27,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=1fb314aaa3142711e452e66c2dced781a4d1ef87",
      "patch": "@@ -339,32 +339,6 @@ enum m2_primitive_types {\n   nr_m2_primitive_types\n };\n \n-static void\n-m2_language_arch_info (struct gdbarch *gdbarch,\n-\t\t       struct language_arch_info *lai)\n-{\n-  const struct builtin_m2_type *builtin = builtin_m2_type (gdbarch);\n-\n-  lai->string_char_type = builtin->builtin_char;\n-  lai->primitive_type_vector\n-    = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_m2_primitive_types + 1,\n-                              struct type *);\n-\n-  lai->primitive_type_vector [m2_primitive_type_char]\n-    = builtin->builtin_char;\n-  lai->primitive_type_vector [m2_primitive_type_int]\n-    = builtin->builtin_int;\n-  lai->primitive_type_vector [m2_primitive_type_card]\n-    = builtin->builtin_card;\n-  lai->primitive_type_vector [m2_primitive_type_real]\n-    = builtin->builtin_real;\n-  lai->primitive_type_vector [m2_primitive_type_bool]\n-    = builtin->builtin_bool;\n-\n-  lai->bool_type_symbol = \"BOOLEAN\";\n-  lai->bool_type_default = builtin->builtin_bool;\n-}\n-\n const struct exp_descriptor exp_descriptor_modula2 = \n {\n   print_subexp_standard,\n@@ -411,7 +385,6 @@ extern const struct language_data m2_language_data =\n   0,\t\t\t\t/* String lower bound */\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n-  m2_language_arch_info,\n   c_watch_location_expression,\n   NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   iterate_over_symbols,\n@@ -431,6 +404,32 @@ class m2_language : public language_defn\n   m2_language ()\n     : language_defn (language_m2, m2_language_data)\n   { /* Nothing.  */ }\n+\n+  /* See language.h.  */\n+  void language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t   struct language_arch_info *lai) const override\n+  {\n+    const struct builtin_m2_type *builtin = builtin_m2_type (gdbarch);\n+\n+    lai->string_char_type = builtin->builtin_char;\n+    lai->primitive_type_vector\n+      = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_m2_primitive_types + 1,\n+\t\t\t\tstruct type *);\n+\n+    lai->primitive_type_vector [m2_primitive_type_char]\n+      = builtin->builtin_char;\n+    lai->primitive_type_vector [m2_primitive_type_int]\n+      = builtin->builtin_int;\n+    lai->primitive_type_vector [m2_primitive_type_card]\n+      = builtin->builtin_card;\n+    lai->primitive_type_vector [m2_primitive_type_real]\n+      = builtin->builtin_real;\n+    lai->primitive_type_vector [m2_primitive_type_bool]\n+      = builtin->builtin_bool;\n+\n+    lai->bool_type_symbol = \"BOOLEAN\";\n+    lai->bool_type_default = builtin->builtin_bool;\n+  }\n };\n \n /* Single instance of the M2 language.  */"
    },
    {
      "sha": "87e5e681ec432ffb6797c6561f654f706defc10f",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=1fb314aaa3142711e452e66c2dced781a4d1ef87",
      "patch": "@@ -400,7 +400,6 @@ extern const struct language_data objc_language_data =\n   0,\t\t\t\t/* String lower bound */\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n-  c_language_arch_info,\n   c_watch_location_expression,\n   NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   iterate_over_symbols,\n@@ -420,6 +419,13 @@ class objc_language : public language_defn\n   objc_language ()\n     : language_defn (language_objc, objc_language_data)\n   { /* Nothing.  */ }\n+\n+  /* See language.h.  */\n+  void language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t   struct language_arch_info *lai) const override\n+  {\n+    c_language_arch_info (gdbarch, lai);\n+  }\n };\n \n /* Single instance of the class representing the Objective-C language.  */"
    },
    {
      "sha": "e8e5e8e04e33c75e183da7a4eabb7933f0b0edb3",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 17,
      "deletions": 18,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=1fb314aaa3142711e452e66c2dced781a4d1ef87",
      "patch": "@@ -1015,23 +1015,6 @@ opencl_print_type (struct type *type, const char *varstring,\n   c_print_type (type, varstring, stream, show, level, flags); \n }\n \n-static void\n-opencl_language_arch_info (struct gdbarch *gdbarch,\n-\t\t\t   struct language_arch_info *lai)\n-{\n-  struct type **types = builtin_opencl_type (gdbarch);\n-\n-  /* Copy primitive types vector from gdbarch.  */\n-  lai->primitive_type_vector = types;\n-\n-  /* Type of elements of strings.  */\n-  lai->string_char_type = types [opencl_primitive_type_char];\n-\n-  /* Specifies the return type of logical and relational operations.  */\n-  lai->bool_type_symbol = \"int\";\n-  lai->bool_type_default = types [opencl_primitive_type_int];\n-}\n-\n const struct exp_descriptor exp_descriptor_opencl =\n {\n   print_subexp_standard,\n@@ -1077,7 +1060,6 @@ extern const struct language_data opencl_language_data =\n   0,\t\t\t\t/* String lower bound */\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n-  opencl_language_arch_info,\n   c_watch_location_expression,\n   NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   iterate_over_symbols,\n@@ -1097,6 +1079,23 @@ class opencl_language : public language_defn\n   opencl_language ()\n     : language_defn (language_opencl, opencl_language_data)\n   { /* Nothing.  */ }\n+\n+  /* See language.h.  */\n+  void language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t   struct language_arch_info *lai) const override\n+  {\n+    struct type **types = builtin_opencl_type (gdbarch);\n+\n+    /* Copy primitive types vector from gdbarch.  */\n+    lai->primitive_type_vector = types;\n+\n+    /* Type of elements of strings.  */\n+    lai->string_char_type = types [opencl_primitive_type_char];\n+\n+    /* Specifies the return type of logical and relational operations.  */\n+    lai->bool_type_symbol = \"int\";\n+    lai->bool_type_default = types [opencl_primitive_type_int];\n+  }\n };\n \n /* Single instance of the OpenCL language class.  */"
    },
    {
      "sha": "4c13867446b3a05e139e6f881ac36768523ee4ca",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 49,
      "deletions": 50,
      "changes": 99,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=1fb314aaa3142711e452e66c2dced781a4d1ef87",
      "patch": "@@ -375,55 +375,6 @@ enum pascal_primitive_types {\n   nr_pascal_primitive_types\n };\n \n-static void\n-pascal_language_arch_info (struct gdbarch *gdbarch,\n-\t\t\t   struct language_arch_info *lai)\n-{\n-  const struct builtin_type *builtin = builtin_type (gdbarch);\n-\n-  lai->string_char_type = builtin->builtin_char;\n-  lai->primitive_type_vector\n-    = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_pascal_primitive_types + 1,\n-                              struct type *);\n-  lai->primitive_type_vector [pascal_primitive_type_int]\n-    = builtin->builtin_int;\n-  lai->primitive_type_vector [pascal_primitive_type_long]\n-    = builtin->builtin_long;\n-  lai->primitive_type_vector [pascal_primitive_type_short]\n-    = builtin->builtin_short;\n-  lai->primitive_type_vector [pascal_primitive_type_char]\n-    = builtin->builtin_char;\n-  lai->primitive_type_vector [pascal_primitive_type_float]\n-    = builtin->builtin_float;\n-  lai->primitive_type_vector [pascal_primitive_type_double]\n-    = builtin->builtin_double;\n-  lai->primitive_type_vector [pascal_primitive_type_void]\n-    = builtin->builtin_void;\n-  lai->primitive_type_vector [pascal_primitive_type_long_long]\n-    = builtin->builtin_long_long;\n-  lai->primitive_type_vector [pascal_primitive_type_signed_char]\n-    = builtin->builtin_signed_char;\n-  lai->primitive_type_vector [pascal_primitive_type_unsigned_char]\n-    = builtin->builtin_unsigned_char;\n-  lai->primitive_type_vector [pascal_primitive_type_unsigned_short]\n-    = builtin->builtin_unsigned_short;\n-  lai->primitive_type_vector [pascal_primitive_type_unsigned_int]\n-    = builtin->builtin_unsigned_int;\n-  lai->primitive_type_vector [pascal_primitive_type_unsigned_long]\n-    = builtin->builtin_unsigned_long;\n-  lai->primitive_type_vector [pascal_primitive_type_unsigned_long_long]\n-    = builtin->builtin_unsigned_long_long;\n-  lai->primitive_type_vector [pascal_primitive_type_long_double]\n-    = builtin->builtin_long_double;\n-  lai->primitive_type_vector [pascal_primitive_type_complex]\n-    = builtin->builtin_complex;\n-  lai->primitive_type_vector [pascal_primitive_type_double_complex]\n-    = builtin->builtin_double_complex;\n-\n-  lai->bool_type_symbol = \"boolean\";\n-  lai->bool_type_default = builtin->builtin_bool;\n-}\n-\n static const char *p_extensions[] =\n {\n   \".pas\", \".p\", \".pp\", NULL\n@@ -464,7 +415,6 @@ extern const struct language_data pascal_language_data =\n   0,\t\t\t\t/* String lower bound */\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n-  pascal_language_arch_info,\n   c_watch_location_expression,\n   NULL,\t\t\t\t/* la_compare_symbol_for_completion */\n   iterate_over_symbols,\n@@ -484,6 +434,55 @@ class pascal_language : public language_defn\n   pascal_language ()\n     : language_defn (language_pascal, pascal_language_data)\n   { /* Nothing.  */ }\n+\n+  /* See language.h.  */\n+  void language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t   struct language_arch_info *lai) const override\n+  {\n+    const struct builtin_type *builtin = builtin_type (gdbarch);\n+\n+    lai->string_char_type = builtin->builtin_char;\n+    lai->primitive_type_vector\n+      = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_pascal_primitive_types + 1,\n+                              struct type *);\n+    lai->primitive_type_vector [pascal_primitive_type_int]\n+      = builtin->builtin_int;\n+    lai->primitive_type_vector [pascal_primitive_type_long]\n+      = builtin->builtin_long;\n+    lai->primitive_type_vector [pascal_primitive_type_short]\n+      = builtin->builtin_short;\n+    lai->primitive_type_vector [pascal_primitive_type_char]\n+      = builtin->builtin_char;\n+    lai->primitive_type_vector [pascal_primitive_type_float]\n+      = builtin->builtin_float;\n+    lai->primitive_type_vector [pascal_primitive_type_double]\n+      = builtin->builtin_double;\n+    lai->primitive_type_vector [pascal_primitive_type_void]\n+      = builtin->builtin_void;\n+    lai->primitive_type_vector [pascal_primitive_type_long_long]\n+      = builtin->builtin_long_long;\n+    lai->primitive_type_vector [pascal_primitive_type_signed_char]\n+      = builtin->builtin_signed_char;\n+    lai->primitive_type_vector [pascal_primitive_type_unsigned_char]\n+      = builtin->builtin_unsigned_char;\n+    lai->primitive_type_vector [pascal_primitive_type_unsigned_short]\n+      = builtin->builtin_unsigned_short;\n+    lai->primitive_type_vector [pascal_primitive_type_unsigned_int]\n+      = builtin->builtin_unsigned_int;\n+    lai->primitive_type_vector [pascal_primitive_type_unsigned_long]\n+      = builtin->builtin_unsigned_long;\n+    lai->primitive_type_vector [pascal_primitive_type_unsigned_long_long]\n+      = builtin->builtin_unsigned_long_long;\n+    lai->primitive_type_vector [pascal_primitive_type_long_double]\n+      = builtin->builtin_long_double;\n+    lai->primitive_type_vector [pascal_primitive_type_complex]\n+      = builtin->builtin_complex;\n+    lai->primitive_type_vector [pascal_primitive_type_double_complex]\n+      = builtin->builtin_double_complex;\n+\n+    lai->bool_type_symbol = \"boolean\";\n+    lai->bool_type_default = builtin->builtin_bool;\n+  }\n };\n \n /* Single instance of the Pascal language class.  */"
    },
    {
      "sha": "dd8558a3fc8a883f4d2c5892c1ed0da59370a30a",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 41,
      "deletions": 46,
      "changes": 87,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1fb314aaa3142711e452e66c2dced781a4d1ef87/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=1fb314aaa3142711e452e66c2dced781a4d1ef87",
      "patch": "@@ -1066,51 +1066,6 @@ enum rust_primitive_types\n   nr_rust_primitive_types\n };\n \n-/* la_language_arch_info implementation for Rust.  */\n-\n-static void\n-rust_language_arch_info (struct gdbarch *gdbarch,\n-\t\t\t struct language_arch_info *lai)\n-{\n-  const struct builtin_type *builtin = builtin_type (gdbarch);\n-  struct type *tem;\n-  struct type **types;\n-  unsigned int length;\n-\n-  types = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_rust_primitive_types + 1,\n-\t\t\t\t  struct type *);\n-\n-  types[rust_primitive_bool] = arch_boolean_type (gdbarch, 8, 1, \"bool\");\n-  types[rust_primitive_char] = arch_character_type (gdbarch, 32, 1, \"char\");\n-  types[rust_primitive_i8] = arch_integer_type (gdbarch, 8, 0, \"i8\");\n-  types[rust_primitive_u8] = arch_integer_type (gdbarch, 8, 1, \"u8\");\n-  types[rust_primitive_i16] = arch_integer_type (gdbarch, 16, 0, \"i16\");\n-  types[rust_primitive_u16] = arch_integer_type (gdbarch, 16, 1, \"u16\");\n-  types[rust_primitive_i32] = arch_integer_type (gdbarch, 32, 0, \"i32\");\n-  types[rust_primitive_u32] = arch_integer_type (gdbarch, 32, 1, \"u32\");\n-  types[rust_primitive_i64] = arch_integer_type (gdbarch, 64, 0, \"i64\");\n-  types[rust_primitive_u64] = arch_integer_type (gdbarch, 64, 1, \"u64\");\n-\n-  length = 8 * TYPE_LENGTH (builtin->builtin_data_ptr);\n-  types[rust_primitive_isize] = arch_integer_type (gdbarch, length, 0, \"isize\");\n-  types[rust_primitive_usize] = arch_integer_type (gdbarch, length, 1, \"usize\");\n-\n-  types[rust_primitive_f32] = arch_float_type (gdbarch, 32, \"f32\",\n-\t\t\t\t\t       floatformats_ieee_single);\n-  types[rust_primitive_f64] = arch_float_type (gdbarch, 64, \"f64\",\n-\t\t\t\t\t       floatformats_ieee_double);\n-\n-  types[rust_primitive_unit] = arch_integer_type (gdbarch, 0, 1, \"()\");\n-\n-  tem = make_cv_type (1, 0, types[rust_primitive_u8], NULL);\n-  types[rust_primitive_str] = rust_slice_type (\"&str\", tem,\n-\t\t\t\t\t       types[rust_primitive_usize]);\n-\n-  lai->primitive_type_vector = types;\n-  lai->bool_type_default = types[rust_primitive_bool];\n-  lai->string_char_type = types[rust_primitive_u8];\n-}\n-\n \f\n \n /* A helper for rust_evaluate_subexp that handles OP_FUNCALL.  */\n@@ -2137,7 +2092,6 @@ extern const struct language_data rust_language_data =\n   0,\t\t\t\t/* String lower bound */\n   default_word_break_characters,\n   default_collect_symbol_completion_matches,\n-  rust_language_arch_info,\n   rust_watch_location_expression,\n   NULL,\t\t\t\t/* la_get_symbol_name_matcher */\n   iterate_over_symbols,\n@@ -2157,6 +2111,47 @@ class rust_language : public language_defn\n   rust_language ()\n     : language_defn (language_rust, rust_language_data)\n   { /* Nothing.  */ }\n+\n+  /* See language.h.  */\n+  void language_arch_info (struct gdbarch *gdbarch,\n+\t\t\t   struct language_arch_info *lai) const override\n+  {\n+    const struct builtin_type *builtin = builtin_type (gdbarch);\n+\n+    struct type **types\n+      = GDBARCH_OBSTACK_CALLOC (gdbarch, nr_rust_primitive_types + 1,\n+\t\t\t\tstruct type *);\n+\n+    types[rust_primitive_bool] = arch_boolean_type (gdbarch, 8, 1, \"bool\");\n+    types[rust_primitive_char] = arch_character_type (gdbarch, 32, 1, \"char\");\n+    types[rust_primitive_i8] = arch_integer_type (gdbarch, 8, 0, \"i8\");\n+    types[rust_primitive_u8] = arch_integer_type (gdbarch, 8, 1, \"u8\");\n+    types[rust_primitive_i16] = arch_integer_type (gdbarch, 16, 0, \"i16\");\n+    types[rust_primitive_u16] = arch_integer_type (gdbarch, 16, 1, \"u16\");\n+    types[rust_primitive_i32] = arch_integer_type (gdbarch, 32, 0, \"i32\");\n+    types[rust_primitive_u32] = arch_integer_type (gdbarch, 32, 1, \"u32\");\n+    types[rust_primitive_i64] = arch_integer_type (gdbarch, 64, 0, \"i64\");\n+    types[rust_primitive_u64] = arch_integer_type (gdbarch, 64, 1, \"u64\");\n+\n+    unsigned int length = 8 * TYPE_LENGTH (builtin->builtin_data_ptr);\n+    types[rust_primitive_isize] = arch_integer_type (gdbarch, length, 0, \"isize\");\n+    types[rust_primitive_usize] = arch_integer_type (gdbarch, length, 1, \"usize\");\n+\n+    types[rust_primitive_f32] = arch_float_type (gdbarch, 32, \"f32\",\n+\t\t\t\t\t\t floatformats_ieee_single);\n+    types[rust_primitive_f64] = arch_float_type (gdbarch, 64, \"f64\",\n+\t\t\t\t\t\t floatformats_ieee_double);\n+\n+    types[rust_primitive_unit] = arch_integer_type (gdbarch, 0, 1, \"()\");\n+\n+    struct type *tem = make_cv_type (1, 0, types[rust_primitive_u8], NULL);\n+    types[rust_primitive_str] = rust_slice_type (\"&str\", tem,\n+\t\t\t\t\t\t types[rust_primitive_usize]);\n+\n+    lai->primitive_type_vector = types;\n+    lai->bool_type_default = types[rust_primitive_bool];\n+    lai->string_char_type = types[rust_primitive_u8];\n+  }\n };\n \n /* Single instance of the Rust language class.  */"
    }
  ]
}