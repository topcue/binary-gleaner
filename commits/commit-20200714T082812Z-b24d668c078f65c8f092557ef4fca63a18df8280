{
  "sha": "b24d668c078f65c8f092557ef4fca63a18df8280",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjI0ZDY2OGMwNzhmNjVjOGYwOTI1NTdlZjRmY2E2M2ExOGRmODI4MA==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-14T08:28:12Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-14T08:28:12Z"
    },
    "message": "x86-64: fix {,V}PCMPESTR{I,M} disassembly in Intel mode\n\nThe operands don't allow disambiguating the insn in 64-bit mode, and\nhence suffixes need to be emitted not just in AT&T mode. Achieve this\nby re-using %LQ while dropping PCMPESTR_Fixup().",
    "tree": {
      "sha": "5885d23e44c59309d173eba737324ec3ae3ee75d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5885d23e44c59309d173eba737324ec3ae3ee75d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b24d668c078f65c8f092557ef4fca63a18df8280",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b24d668c078f65c8f092557ef4fca63a18df8280",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b24d668c078f65c8f092557ef4fca63a18df8280",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b24d668c078f65c8f092557ef4fca63a18df8280/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c4de76066e9c6fa42d6f02c6519d2c6bbe0cc983"
    }
  ],
  "stats": {
    "total": 91,
    "additions": 44,
    "deletions": 47
  },
  "files": [
    {
      "sha": "aead7cd63659bee878cae23a0e73dd01af324377",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b24d668c078f65c8f092557ef4fca63a18df8280/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b24d668c078f65c8f092557ef4fca63a18df8280/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=b24d668c078f65c8f092557ef4fca63a18df8280",
      "patch": "@@ -1,3 +1,8 @@\n+2020-07-14  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* testsuite/gas/i386/x86-64-avx-intel.d,\n+\ttestsuite/gas/i386/x86-64-sse4_2-intel.d: Adjust expectations.\n+\n 2020-07-14  Jan Beulich  <jbeulich@suse.com>\n \n \t* testsuite/gas/i386/movbe-suffix.d,"
    },
    {
      "sha": "7eb281e291451bce807a87a5437264a47f75992e",
      "filename": "gas/testsuite/gas/i386/x86-64-avx-intel.d",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b24d668c078f65c8f092557ef4fca63a18df8280/gas/testsuite/gas/i386/x86-64-avx-intel.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b24d668c078f65c8f092557ef4fca63a18df8280/gas/testsuite/gas/i386/x86-64-avx-intel.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-avx-intel.d?ref=b24d668c078f65c8f092557ef4fca63a18df8280",
      "patch": "@@ -781,11 +781,11 @@ Disassembly of section .text:\n [ \t]*[a-f0-9]+:\tc4 e3 79 df 31 07    \tvaeskeygenassist xmm6,XMMWORD PTR \\[rcx\\],0x7\n [ \t]*[a-f0-9]+:\tc4 e3 79 61 f4 07    \tvpcmpestri xmm6,xmm4,0x7\n [ \t]*[a-f0-9]+:\tc4 e3 79 61 31 07    \tvpcmpestri xmm6,XMMWORD PTR \\[rcx\\],0x7\n-[ \t]*[a-f0-9]+:\tc4 e3 f9 61 f4 07    \tvpcmpestri xmm6,xmm4,0x7\n+[ \t]*[a-f0-9]+:\tc4 e3 f9 61 f4 07    \tvpcmpestriq xmm6,xmm4,0x7\n [ \t]*[a-f0-9]+:\tc4 e3 79 61 31 07    \tvpcmpestri xmm6,XMMWORD PTR \\[rcx\\],0x7\n [ \t]*[a-f0-9]+:\tc4 e3 79 60 f4 07    \tvpcmpestrm xmm6,xmm4,0x7\n [ \t]*[a-f0-9]+:\tc4 e3 79 60 31 07    \tvpcmpestrm xmm6,XMMWORD PTR \\[rcx\\],0x7\n-[ \t]*[a-f0-9]+:\tc4 e3 f9 60 f4 07    \tvpcmpestrm xmm6,xmm4,0x7\n+[ \t]*[a-f0-9]+:\tc4 e3 f9 60 f4 07    \tvpcmpestrmq xmm6,xmm4,0x7\n [ \t]*[a-f0-9]+:\tc4 e3 79 60 31 07    \tvpcmpestrm xmm6,XMMWORD PTR \\[rcx\\],0x7\n [ \t]*[a-f0-9]+:\tc4 e3 79 63 f4 07    \tvpcmpistri xmm6,xmm4,0x7\n [ \t]*[a-f0-9]+:\tc4 e3 79 63 31 07    \tvpcmpistri xmm6,XMMWORD PTR \\[rcx\\],0x7"
    },
    {
      "sha": "4804a784985b5023f218455bca8b434bd40cbd86",
      "filename": "gas/testsuite/gas/i386/x86-64-sse4_2-intel.d",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b24d668c078f65c8f092557ef4fca63a18df8280/gas/testsuite/gas/i386/x86-64-sse4_2-intel.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b24d668c078f65c8f092557ef4fca63a18df8280/gas/testsuite/gas/i386/x86-64-sse4_2-intel.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-sse4_2-intel.d?ref=b24d668c078f65c8f092557ef4fca63a18df8280",
      "patch": "@@ -25,11 +25,11 @@ Disassembly of section .text:\n [ \t]*[a-f0-9]+:\t66 0f 38 37 c1       \tpcmpgtq xmm0,xmm1\n [ \t]*[a-f0-9]+:\t66 0f 3a 61 01 00    \tpcmpestri xmm0,XMMWORD PTR \\[rcx\\],0x0\n [ \t]*[a-f0-9]+:\t66 0f 3a 61 c1 00    \tpcmpestri xmm0,xmm1,0x0\n-[ \t]*[a-f0-9]+:\t66 48 0f 3a 61 01 00 \trex\\.W pcmpestri xmm0,XMMWORD PTR \\[rcx\\],0x0\n+[ \t]*[a-f0-9]+:\t66 48 0f 3a 61 01 00 \tpcmpestriq xmm0,XMMWORD PTR \\[rcx\\],0x0\n [ \t]*[a-f0-9]+:\t66 0f 3a 61 c1 00    \tpcmpestri xmm0,xmm1,0x0\n [ \t]*[a-f0-9]+:\t66 0f 3a 60 01 01    \tpcmpestrm xmm0,XMMWORD PTR \\[rcx\\],0x1\n [ \t]*[a-f0-9]+:\t66 0f 3a 60 c1 01    \tpcmpestrm xmm0,xmm1,0x1\n-[ \t]*[a-f0-9]+:\t66 48 0f 3a 60 01 01 \trex\\.W pcmpestrm xmm0,XMMWORD PTR \\[rcx\\],0x1\n+[ \t]*[a-f0-9]+:\t66 48 0f 3a 60 01 01 \tpcmpestrmq xmm0,XMMWORD PTR \\[rcx\\],0x1\n [ \t]*[a-f0-9]+:\t66 0f 3a 60 c1 01    \tpcmpestrm xmm0,xmm1,0x1\n [ \t]*[a-f0-9]+:\t66 0f 3a 63 01 02    \tpcmpistri xmm0,XMMWORD PTR \\[rcx\\],0x2\n [ \t]*[a-f0-9]+:\t66 0f 3a 63 c1 02    \tpcmpistri xmm0,xmm1,0x2"
    },
    {
      "sha": "cfce6b7050598b4a6c5a9d1c3661a03f9a16d150",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b24d668c078f65c8f092557ef4fca63a18df8280/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b24d668c078f65c8f092557ef4fca63a18df8280/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=b24d668c078f65c8f092557ef4fca63a18df8280",
      "patch": "@@ -1,3 +1,17 @@\n+2020-07-14  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-dis.c (PCMPESTR_Fixup): Delete.\n+\t(dis386): Adjust \"LQ\" description.\n+\t(prefix_table): Make %LQ apply to AT&T case only for cvtsi2ss,\n+\tcvtsi2sd, ptwrite, vcvtsi2ss, and vcvtsi2sd. Replace use of\n+\tPCMPESTR_Fixup by !%LQ and EXx for pcmpestrm, pcmpestri,\n+\tvpcmpestrm, and vpcmpestri.\n+\t(putop): Honor \"cond\" when handling LQ.\n+\t* i386-dis-evex-prefix.h: Make %LQ apply to AT&T case only for\n+\tvcvtsi2ss and vcvtusi2ss.\n+\t* i386-dis-evex-w.h: Make %LQ apply to AT&T case only for\n+\tvcvtsi2sd and vcvtusi2sd.\n+\n 2020-07-14  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-dis.c (VCMP_Fixup, VCMP): Delete."
    },
    {
      "sha": "1929f2485dad24204dcf3a28460f2956e2c14eaa",
      "filename": "opcodes/i386-dis-evex-prefix.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b24d668c078f65c8f092557ef4fca63a18df8280/opcodes/i386-dis-evex-prefix.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b24d668c078f65c8f092557ef4fca63a18df8280/opcodes/i386-dis-evex-prefix.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis-evex-prefix.h?ref=b24d668c078f65c8f092557ef4fca63a18df8280",
      "patch": "@@ -28,7 +28,7 @@\n   /* PREFIX_EVEX_0F2A */\n   {\n     { Bad_Opcode },\n-    { \"vcvtsi2ss%LQ\",\t{ XMScalar, VexScalar, EXxEVexR, Edq }, 0 },\n+    { \"vcvtsi2ss{%LQ|}\",\t{ XMScalar, VexScalar, EXxEVexR, Edq }, 0 },\n     { Bad_Opcode },\n     { VEX_W_TABLE (EVEX_W_0F2A_P_3) },\n   },\n@@ -272,7 +272,7 @@\n   /* PREFIX_EVEX_0F7B */\n   {\n     { Bad_Opcode },\n-    { \"vcvtusi2ss%LQ\",\t{ XMScalar, VexScalar, EXxEVexR, Edq }, 0 },\n+    { \"vcvtusi2ss{%LQ|}\",\t{ XMScalar, VexScalar, EXxEVexR, Edq }, 0 },\n     { VEX_W_TABLE (EVEX_W_0F7B_P_2) },\n     { VEX_W_TABLE (EVEX_W_0F7B_P_3) },\n   },"
    },
    {
      "sha": "2d92290b885bc71f62669a20e4d3bb350447ba92",
      "filename": "opcodes/i386-dis-evex-w.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b24d668c078f65c8f092557ef4fca63a18df8280/opcodes/i386-dis-evex-w.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b24d668c078f65c8f092557ef4fca63a18df8280/opcodes/i386-dis-evex-w.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis-evex-w.h?ref=b24d668c078f65c8f092557ef4fca63a18df8280",
      "patch": "@@ -39,8 +39,8 @@\n   },\n   /* EVEX_W_0F2A_P_3 */\n   {\n-    { \"vcvtsi2sd%LQ\",\t{ XMScalar, VexScalar, Ed }, 0 },\n-    { \"vcvtsi2sd%LQ\",\t{ XMScalar, VexScalar, EXxEVexR64, Edq }, 0 },\n+    { \"vcvtsi2sd{%LQ|}\",\t{ XMScalar, VexScalar, Ed }, 0 },\n+    { \"vcvtsi2sd{%LQ|}\",\t{ XMScalar, VexScalar, EXxEVexR64, Edq }, 0 },\n   },\n   /* EVEX_W_0F51_P_1 */\n   {\n@@ -245,8 +245,8 @@\n   },\n   /* EVEX_W_0F7B_P_3 */\n   {\n-    { \"vcvtusi2sd%LQ\",\t{ XMScalar, VexScalar, Ed }, 0 },\n-    { \"vcvtusi2sd%LQ\",\t{ XMScalar, VexScalar, EXxEVexR64, Edq }, 0 },\n+    { \"vcvtusi2sd{%LQ|}\",\t{ XMScalar, VexScalar, Ed }, 0 },\n+    { \"vcvtusi2sd{%LQ|}\",\t{ XMScalar, VexScalar, EXxEVexR64, Edq }, 0 },\n   },\n   /* EVEX_W_0F7E_P_1 */\n   {"
    },
    {
      "sha": "5a0282b2698d492f123b4db6c4674828cca0a163",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 15,
      "deletions": 37,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b24d668c078f65c8f092557ef4fca63a18df8280/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b24d668c078f65c8f092557ef4fca63a18df8280/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=b24d668c078f65c8f092557ef4fca63a18df8280",
      "patch": "@@ -115,7 +115,6 @@ static void HLE_Fixup3 (int, int);\n static void CMPXCHG8B_Fixup (int, int);\n static void XMM_Fixup (int, int);\n static void FXSAVE_Fixup (int, int);\n-static void PCMPESTR_Fixup (int, int);\n \n static void MOVSXD_Fixup (int, int);\n \n@@ -2287,8 +2286,8 @@ struct dis386 {\n    \"XZ\" => print 'x', 'y', or 'z' if suffix_always is true or no\n \t   register operands and no broadcast.\n    \"XW\" => print 's', 'd' depending on the VEX.W bit (for FMA)\n-   \"LQ\" => print 'l' ('d' in Intel mode) or 'q' for memory\n-\t   operand or no operand at all in 64bit mode, or if suffix_always\n+   \"LQ\" => print 'l' ('d' in Intel mode) or 'q' for memory operand, cond\n+\t   being false, or no operand at all in 64bit mode, or if suffix_always\n \t   is true.\n    \"LB\" => print \"abs\" in 64bit mode and behave as 'B' otherwise\n    \"LS\" => print \"abs\" in 64bit mode and behave as 'S' otherwise\n@@ -3703,9 +3702,9 @@ static const struct dis386 prefix_table[][4] = {\n   /* PREFIX_0F2A */\n   {\n     { \"cvtpi2ps\", { XM, EMCq }, PREFIX_OPCODE },\n-    { \"cvtsi2ss%LQ\", { XM, Edq }, PREFIX_OPCODE },\n+    { \"cvtsi2ss{%LQ|}\", { XM, Edq }, PREFIX_OPCODE },\n     { \"cvtpi2pd\", { XM, EMCq }, PREFIX_OPCODE },\n-    { \"cvtsi2sd%LQ\", { XM, Edq }, 0 },\n+    { \"cvtsi2sd{%LQ|}\", { XM, Edq }, 0 },\n   },\n \n   /* PREFIX_0F2B */\n@@ -3966,13 +3965,13 @@ static const struct dis386 prefix_table[][4] = {\n   /* PREFIX_0FAE_REG_4_MOD_0 */\n   {\n     { \"xsave\",\t{ FXSAVE }, 0 },\n-    { \"ptwrite%LQ\", { Edq }, 0 },\n+    { \"ptwrite{%LQ|}\", { Edq }, 0 },\n   },\n \n   /* PREFIX_0FAE_REG_4_MOD_3 */\n   {\n     { Bad_Opcode },\n-    { \"ptwrite%LQ\", { Edq }, 0 },\n+    { \"ptwrite{%LQ|}\", { Edq }, 0 },\n   },\n \n   /* PREFIX_0FAE_REG_5_MOD_0 */\n@@ -4592,14 +4591,14 @@ static const struct dis386 prefix_table[][4] = {\n   {\n     { Bad_Opcode },\n     { Bad_Opcode },\n-    { \"pcmpestrm\", { XM, { PCMPESTR_Fixup, x_mode }, Ib }, PREFIX_OPCODE },\n+    { \"pcmpestrm!%LQ\", { XM, EXx, Ib }, PREFIX_OPCODE },\n   },\n \n   /* PREFIX_0F3A61 */\n   {\n     { Bad_Opcode },\n     { Bad_Opcode },\n-    { \"pcmpestri\", { XM, { PCMPESTR_Fixup, x_mode }, Ib }, PREFIX_OPCODE },\n+    { \"pcmpestri!%LQ\", { XM, EXx, Ib }, PREFIX_OPCODE },\n   },\n \n   /* PREFIX_0F3A62 */\n@@ -4676,9 +4675,9 @@ static const struct dis386 prefix_table[][4] = {\n   /* PREFIX_VEX_0F2A */\n   {\n     { Bad_Opcode },\n-    { \"vcvtsi2ss%LQ\",\t{ XMScalar, VexScalar, Edq }, 0 },\n+    { \"vcvtsi2ss{%LQ|}\",\t{ XMScalar, VexScalar, Edq }, 0 },\n     { Bad_Opcode },\n-    { \"vcvtsi2sd%LQ\",\t{ XMScalar, VexScalar, Edq }, 0 },\n+    { \"vcvtsi2sd{%LQ|}\",\t{ XMScalar, VexScalar, Edq }, 0 },\n   },\n \n   /* PREFIX_VEX_0F2C */\n@@ -9847,12 +9846,12 @@ static const struct dis386 vex_len_table[][2] = {\n \n   /* VEX_LEN_0F3A60_P_2 */\n   {\n-    { \"vpcmpestrm\",\t{ XM, { PCMPESTR_Fixup, x_mode }, Ib }, 0 },\n+    { \"vpcmpestrm!%LQ\",\t{ XM, EXx, Ib }, 0 },\n   },\n \n   /* VEX_LEN_0F3A61_P_2 */\n   {\n-    { \"vpcmpestri\",\t{ XM, { PCMPESTR_Fixup, x_mode }, Ib }, 0 },\n+    { \"vpcmpestri!%LQ\",\t{ XM, EXx, Ib }, 0 },\n   },\n \n   /* VEX_LEN_0F3A62_P_2 */\n@@ -13644,15 +13643,15 @@ putop (const char *in_template, int sizeflag)\n \t    }\n \t  else if (l == 1 && last[0] == 'L')\n \t    {\n-\t      if ((intel_syntax && need_modrm)\n-\t\t  || (modrm.mod == 3 && !(sizeflag & SUFFIX_ALWAYS)))\n+\t      if (cond ? modrm.mod == 3 && !(sizeflag & SUFFIX_ALWAYS)\n+\t\t       : address_mode != mode_64bit)\n \t\tbreak;\n \t      if ((rex & REX_W))\n \t\t{\n \t\t  USED_REX (REX_W);\n \t\t  *obufp++ = 'q';\n \t\t}\n-\t      else if((address_mode == mode_64bit && need_modrm)\n+\t      else if((address_mode == mode_64bit && need_modrm && cond)\n \t\t      || (sizeflag & SUFFIX_ALWAYS))\n \t\t*obufp++ = intel_syntax? 'd' : 'l';\n \t    }\n@@ -16422,27 +16421,6 @@ FXSAVE_Fixup (int bytemode, int sizeflag)\n   OP_M (bytemode, sizeflag);\n }\n \n-static void\n-PCMPESTR_Fixup (int bytemode, int sizeflag)\n-{\n-  /* Add proper suffix to \"{,v}pcmpestr{i,m}\".  */\n-  if (!intel_syntax)\n-    {\n-      char *p = mnemonicendp;\n-\n-      USED_REX (REX_W);\n-      if (rex & REX_W)\n-\t*p++ = 'q';\n-      else if (sizeflag & SUFFIX_ALWAYS)\n-\t*p++ = 'l';\n-\n-      *p = '\\0';\n-      mnemonicendp = p;\n-    }\n-\n-  OP_EX (bytemode, sizeflag);\n-}\n-\n /* Display the destination register operand for instructions with\n    VEX. */\n "
    }
  ]
}