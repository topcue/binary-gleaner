{
  "sha": "e46d3488de137cd5a01377513ff49e32595456af",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTQ2ZDM0ODhkZTEzN2NkNWEwMTM3NzUxM2ZmNDllMzI1OTU0NTZhZg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:07:59Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:07:59Z"
    },
    "message": "gdb: remove TYPE_STUB\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (TYPE_STUB): Remove, replace all\n\tuses with type::is_stub.\n\nChange-Id: Iec25b50449a0d10a38f815209e478c343e98632c",
    "tree": {
      "sha": "9800a3cc751efc32a82627170fc2864d7f1ce355",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9800a3cc751efc32a82627170fc2864d7f1ce355"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e46d3488de137cd5a01377513ff49e32595456af",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e46d3488de137cd5a01377513ff49e32595456af",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e46d3488de137cd5a01377513ff49e32595456af",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e46d3488de137cd5a01377513ff49e32595456af/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b4b73759537ae830d8b48834b419b095561d4d4a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4b73759537ae830d8b48834b419b095561d4d4a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b4b73759537ae830d8b48834b419b095561d4d4a"
    }
  ],
  "stats": {
    "total": 59,
    "additions": 31,
    "deletions": 28
  },
  "files": [
    {
      "sha": "aac62fceb0fd79dff6bc5d02235c6409f2b39305",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e46d3488de137cd5a01377513ff49e32595456af/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e46d3488de137cd5a01377513ff49e32595456af/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e46d3488de137cd5a01377513ff49e32595456af",
      "patch": "@@ -1,3 +1,8 @@\n+2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (TYPE_STUB): Remove, replace all\n+\tuses with type::is_stub.\n+\n 2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (struct type) <is_stub, set_is_stub>: New methods."
    },
    {
      "sha": "4aaf862fd8f60cbcc905498bac2233f6d22d88af",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e46d3488de137cd5a01377513ff49e32595456af/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e46d3488de137cd5a01377513ff49e32595456af/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=e46d3488de137cd5a01377513ff49e32595456af",
      "patch": "@@ -1592,7 +1592,7 @@ desc_bounds (struct value *arr)\n \t{\n \t  struct type *target_type = TYPE_TARGET_TYPE (p_bounds_type);\n \n-\t  if (TYPE_STUB (target_type))\n+\t  if (target_type->is_stub ())\n \t    p_bounds = value_cast (lookup_pointer_type\n \t\t\t\t   (ada_check_typedef (target_type)),\n \t\t\t\t   p_bounds);\n@@ -5010,13 +5010,13 @@ remove_extra_symbols (std::vector<struct block_symbol> *syms)\n       /* If two symbols have the same name and one of them is a stub type,\n          the get rid of the stub.  */\n \n-      if (TYPE_STUB (SYMBOL_TYPE ((*syms)[i].symbol))\n+      if (SYMBOL_TYPE ((*syms)[i].symbol)->is_stub ()\n           && (*syms)[i].symbol->linkage_name () != NULL)\n         {\n           for (j = 0; j < syms->size (); j++)\n             {\n               if (j != i\n-                  && !TYPE_STUB (SYMBOL_TYPE ((*syms)[j].symbol))\n+                  && !SYMBOL_TYPE ((*syms)[j].symbol)->is_stub ()\n                   && (*syms)[j].symbol->linkage_name () != NULL\n                   && strcmp ((*syms)[i].symbol->linkage_name (),\n                              (*syms)[j].symbol->linkage_name ()) == 0)\n@@ -8762,7 +8762,7 @@ ada_check_typedef (struct type *type)\n \n   type = check_typedef (type);\n   if (type == NULL || type->code () != TYPE_CODE_ENUM\n-      || !TYPE_STUB (type)\n+      || !type->is_stub ()\n       || type->name () == NULL)\n     return type;\n   else"
    },
    {
      "sha": "8ee620c36ad7cc0e0eee9f198469e23b6cf0d738",
      "filename": "gdb/ada-typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e46d3488de137cd5a01377513ff49e32595456af/gdb/ada-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e46d3488de137cd5a01377513ff49e32595456af/gdb/ada-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-typeprint.c?ref=e46d3488de137cd5a01377513ff49e32595456af",
      "patch": "@@ -623,7 +623,7 @@ print_selected_record_field_types (struct type *type, struct type *outer_type,\n \n   flds = 0;\n \n-  if (fld0 > fld1 && TYPE_STUB (type))\n+  if (fld0 > fld1 && type->is_stub ())\n     return -1;\n \n   for (i = fld0; i <= fld1; i += 1)"
    },
    {
      "sha": "ef16f2b83e1a4732bb953104a8a0766059d510df",
      "filename": "gdb/c-typeprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e46d3488de137cd5a01377513ff49e32595456af/gdb/c-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e46d3488de137cd5a01377513ff49e32595456af/gdb/c-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-typeprint.c?ref=e46d3488de137cd5a01377513ff49e32595456af",
      "patch": "@@ -1118,7 +1118,7 @@ c_type_print_base_struct_union (struct type *type, struct ui_file *stream,\n       if (type->num_fields () == 0 && TYPE_NFN_FIELDS (type) == 0\n \t  && TYPE_TYPEDEF_FIELD_COUNT (type) == 0)\n \t{\n-\t  if (TYPE_STUB (type))\n+\t  if (type->is_stub ())\n \t    fprintfi_filtered (level + 4, stream,\n \t\t\t       _(\"%p[<incomplete type>%p]\\n\"),\n \t\t\t       metadata_style.style ().ptr (), nullptr);\n@@ -1629,7 +1629,7 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n \t    fprintf_filtered (stream, \"{\\n\");\n \t    if (type->num_fields () == 0)\n \t      {\n-\t\tif (TYPE_STUB (type))\n+\t\tif (type->is_stub ())\n \t\t  fprintfi_filtered (level + 4, stream,\n \t\t\t\t     _(\"%p[<incomplete type>%p]\\n\"),\n \t\t\t\t     metadata_style.style ().ptr (), nullptr);"
    },
    {
      "sha": "b93583313866dfd59ffb98041fb99d2f9091f9b5",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e46d3488de137cd5a01377513ff49e32595456af/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e46d3488de137cd5a01377513ff49e32595456af/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=e46d3488de137cd5a01377513ff49e32595456af",
      "patch": "@@ -16640,7 +16640,7 @@ read_enumeration_type (struct die_info *die, struct dwarf2_cu *cu)\n      can tell us the reality.  However, we defer to a local size\n      attribute if one exists, because this lets the compiler override\n      the underlying type if needed.  */\n-  if (TYPE_TARGET_TYPE (type) != NULL && !TYPE_STUB (TYPE_TARGET_TYPE (type)))\n+  if (TYPE_TARGET_TYPE (type) != NULL && !TYPE_TARGET_TYPE (type)->is_stub ())\n     {\n       struct type *underlying_type = TYPE_TARGET_TYPE (type);\n       underlying_type = check_typedef (underlying_type);"
    },
    {
      "sha": "492061fa0a4f96f43df9bc2d220ab95bb6000a98",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e46d3488de137cd5a01377513ff49e32595456af/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e46d3488de137cd5a01377513ff49e32595456af/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=e46d3488de137cd5a01377513ff49e32595456af",
      "patch": "@@ -934,7 +934,7 @@ create_range_type (struct type *result_type, struct type *index_type,\n     result_type = alloc_type_copy (index_type);\n   result_type->set_code (TYPE_CODE_RANGE);\n   TYPE_TARGET_TYPE (result_type) = index_type;\n-  if (TYPE_STUB (index_type))\n+  if (index_type->is_stub ())\n     TYPE_TARGET_STUB (result_type) = 1;\n   else\n     TYPE_LENGTH (result_type) = TYPE_LENGTH (check_typedef (index_type));\n@@ -1388,7 +1388,7 @@ create_set_type (struct type *result_type, struct type *domain_type)\n   result_type->set_fields\n     ((struct field *) TYPE_ZALLOC (result_type, sizeof (struct field)));\n \n-  if (!TYPE_STUB (domain_type))\n+  if (!domain_type->is_stub ())\n     {\n       LONGEST low_bound, high_bound, bit_length;\n \n@@ -2837,7 +2837,7 @@ check_typedef (struct type *type)\n     }\n   /* Otherwise, rely on the stub flag being set for opaque/stubbed\n      types.  */\n-  else if (TYPE_STUB (type) && !currently_reading_symtab)\n+  else if (type->is_stub () && !currently_reading_symtab)\n     {\n       const char *name = type->name ();\n       /* FIXME: shouldn't we look in STRUCT_DOMAIN and/or VAR_DOMAIN\n@@ -2868,7 +2868,7 @@ check_typedef (struct type *type)\n     {\n       struct type *target_type = check_typedef (TYPE_TARGET_TYPE (type));\n \n-      if (TYPE_STUB (target_type) || TYPE_TARGET_STUB (target_type))\n+      if (target_type->is_stub () || TYPE_TARGET_STUB (target_type))\n \t{\n \t  /* Nothing we can do.  */\n \t}\n@@ -5076,7 +5076,7 @@ recursive_dump_type (struct type *type, int spaces)\n     {\n       puts_filtered (\" TYPE_ENDIANITY_NOT_DEFAULT\");\n     }\n-  if (TYPE_STUB (type))\n+  if (type->is_stub ())\n     {\n       puts_filtered (\" TYPE_STUB\");\n     }"
    },
    {
      "sha": "bceb1b876058b3a4302b0a8bdcfd14eb988aa972",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e46d3488de137cd5a01377513ff49e32595456af/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e46d3488de137cd5a01377513ff49e32595456af/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=e46d3488de137cd5a01377513ff49e32595456af",
      "patch": "@@ -216,12 +216,6 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n \n #define TYPE_ENDIANITY_NOT_DEFAULT(t) (TYPE_MAIN_TYPE (t)->flag_endianity_not_default)\n \n-/* * This appears in a type's flags word if it is a stub type (e.g.,\n-   if someone referenced a type that wasn't defined in a source file\n-   via (struct sir_not_appearing_in_this_film *)).  */\n-\n-#define TYPE_STUB(t)\t\t((t)->is_stub ())\n-\n /* * The target type of this type is a stub type, and this type needs\n    to be updated if it gets un-stubbed in check_typedef.  Used for\n    arrays and ranges, in which TYPE_LENGTH of the array/range gets set\n@@ -1084,6 +1078,10 @@ struct type\n     this->main_type->m_flag_nosign = has_no_signedness;\n   }\n \n+  /* This appears in a type's flags word if it is a stub type (e.g.,\n+     if someone referenced a type that wasn't defined in a source file\n+     via (struct sir_not_appearing_in_this_film *)).  */\n+\n   bool is_stub () const\n   {\n     return this->main_type->m_flag_stub;\n@@ -1841,7 +1839,7 @@ extern void set_type_vptr_basetype (struct type *, struct type *);\n    && ((thistype)->num_fields () == 0) \\\n    && (!HAVE_CPLUS_STRUCT (thistype) \\\n        || TYPE_NFN_FIELDS (thistype) == 0) \\\n-   && (TYPE_STUB (thistype) || !TYPE_STUB_SUPPORTED (thistype)))\n+   && ((thistype)->is_stub () || !TYPE_STUB_SUPPORTED (thistype)))\n \n /* * A helper macro that returns the name of a type or \"unnamed type\"\n    if the type has no name.  */"
    },
    {
      "sha": "9f5ce7e9a271839e792c04355e8a0df4382339a2",
      "filename": "gdb/m2-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e46d3488de137cd5a01377513ff49e32595456af/gdb/m2-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e46d3488de137cd5a01377513ff49e32595456af/gdb/m2-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-valprint.c?ref=e46d3488de137cd5a01377513ff49e32595456af",
      "patch": "@@ -383,7 +383,7 @@ m2_value_print_inner (struct value *val, struct ui_file *stream, int recurse,\n     case TYPE_CODE_SET:\n       elttype = type->index_type ();\n       elttype = check_typedef (elttype);\n-      if (TYPE_STUB (elttype))\n+      if (elttype->is_stub ())\n \t{\n \t  fprintf_styled (stream, metadata_style.style (),\n \t\t\t  _(\"<incomplete type>\"));"
    },
    {
      "sha": "6a6f3ddacc949f852b4b6bbdf9606f4aee77db2e",
      "filename": "gdb/p-typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e46d3488de137cd5a01377513ff49e32595456af/gdb/p-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e46d3488de137cd5a01377513ff49e32595456af/gdb/p-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-typeprint.c?ref=e46d3488de137cd5a01377513ff49e32595456af",
      "patch": "@@ -561,7 +561,7 @@ pascal_type_print_base (struct type *type, struct ui_file *stream, int show,\n \t  fprintf_filtered (stream, \"\\n\");\n \t  if ((type->num_fields () == 0) && (TYPE_NFN_FIELDS (type) == 0))\n \t    {\n-\t      if (TYPE_STUB (type))\n+\t      if (type->is_stub ())\n \t\tfprintfi_filtered (level + 4, stream, \"<incomplete type>\\n\");\n \t      else\n \t\tfprintfi_filtered (level + 4, stream, \"<no data fields>\\n\");"
    },
    {
      "sha": "096a75eaea45de2228577e83c09eab12548066c8",
      "filename": "gdb/p-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e46d3488de137cd5a01377513ff49e32595456af/gdb/p-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e46d3488de137cd5a01377513ff49e32595456af/gdb/p-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-valprint.c?ref=e46d3488de137cd5a01377513ff49e32595456af",
      "patch": "@@ -330,7 +330,7 @@ pascal_value_print_inner (struct value *val, struct ui_file *stream,\n     case TYPE_CODE_SET:\n       elttype = type->index_type ();\n       elttype = check_typedef (elttype);\n-      if (TYPE_STUB (elttype))\n+      if (elttype->is_stub ())\n \t{\n \t  fprintf_styled (stream, metadata_style.style (), \"<incomplete type>\");\n \t  break;"
    },
    {
      "sha": "2e175b641d85528de6587255753e514cf6f3b811",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e46d3488de137cd5a01377513ff49e32595456af/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e46d3488de137cd5a01377513ff49e32595456af/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=e46d3488de137cd5a01377513ff49e32595456af",
      "patch": "@@ -1363,7 +1363,7 @@ type_to_type_object (struct type *type)\n   try\n     {\n       /* Try not to let stub types leak out to Python.  */\n-      if (TYPE_STUB (type))\n+      if (type->is_stub ())\n \ttype = check_typedef (type);\n     }\n   catch (...)"
    },
    {
      "sha": "33a23cb61eec5635efc22183eea1418da2648ecf",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e46d3488de137cd5a01377513ff49e32595456af/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e46d3488de137cd5a01377513ff49e32595456af/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=e46d3488de137cd5a01377513ff49e32595456af",
      "patch": "@@ -2336,7 +2336,7 @@ read_member_functions (struct stab_field_info *fip, const char **pp,\n \t\t\t== TYPE_CODE_METHOD);\n \n \t  /* If this is just a stub, then we don't have the real name here.  */\n-\t  if (TYPE_STUB (new_sublist->fn_field.type))\n+\t  if (new_sublist->fn_field.type->is_stub ())\n \t    {\n \t      if (!TYPE_SELF_TYPE (new_sublist->fn_field.type))\n \t\tset_type_self_type (new_sublist->fn_field.type, type);\n@@ -3429,7 +3429,7 @@ read_struct_type (const char **pp, struct type *type, enum type_code type_code,\n      scribbling on existing structure type objects when new definitions\n      appear.  */\n   if (! (type->code () == TYPE_CODE_UNDEF\n-         || TYPE_STUB (type)))\n+         || type->is_stub ()))\n     {\n       complain_about_struct_wipeout (type);\n \n@@ -4453,7 +4453,7 @@ cleanup_undefined_types_1 (void)\n \t       as well as in check_typedef to deal with the (legitimate in\n \t       C though not C++) case of several types with the same name\n \t       in different source files.  */\n-\t    if (TYPE_STUB (*type))\n+\t    if ((*type)->is_stub ())\n \t      {\n \t\tstruct pending *ppt;\n \t\tint i;"
    },
    {
      "sha": "d16e9b8bd7cad1d8db16914310a9164490c8bbe8",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e46d3488de137cd5a01377513ff49e32595456af/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e46d3488de137cd5a01377513ff49e32595456af/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=e46d3488de137cd5a01377513ff49e32595456af",
      "patch": "@@ -947,7 +947,7 @@ do_val_print (struct value *value, struct ui_file *stream, int recurse,\n      only a stub and we can't find and substitute its complete type, then\n      print appropriate string and return.  */\n \n-  if (TYPE_STUB (real_type))\n+  if (real_type->is_stub ())\n     {\n       fprintf_styled (stream, metadata_style.style (), _(\"<incomplete type>\"));\n       return;"
    }
  ]
}