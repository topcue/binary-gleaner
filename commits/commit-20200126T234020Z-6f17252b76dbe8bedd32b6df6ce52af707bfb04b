{
  "sha": "6f17252b76dbe8bedd32b6df6ce52af707bfb04b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmYxNzI1MmI3NmRiZThiZWRkMzJiNmRmNmNlNTJhZjcwN2JmYjA0Yg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-10-16T20:06:43Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-01-26T23:40:20Z"
    },
    "message": "Use new and delete for psymtabs\n\nThis changes psymtabs to be allocated with new and destroyed with\ndelete.  As a consequence, the psymtab free-list is also removed.\n\nThe motivation for this is to let symbol readers subclass\npartial_symtab.\n\ngdb/ChangeLog\n2020-01-26  Tom Tromey  <tom@tromey.com>\n\n\t* mdebugread.c (parse_partial_symbols): Use discard_psymtab.\n\t* psymtab.h (class psymtab_storage) <free_psymtabs>: Remove.\n\t* psymtab.c (psymtab_storage): Delete psymtabs.\n\t(psymtab_storage::allocate_psymtab): Use new.\n\t(psymtab_storage::discard_psymtab): Use delete.\n\t* psympriv.h (struct partial_symtab): Add constructor and\n\tinitializers.\n\nChange-Id: I4e78ac538fc0ea52b57489c1afb8f935a30941ef",
    "tree": {
      "sha": "57515b3759448d0f1ab318cb89233e3e82ca553b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/57515b3759448d0f1ab318cb89233e3e82ca553b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6f17252b76dbe8bedd32b6df6ce52af707bfb04b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f17252b76dbe8bedd32b6df6ce52af707bfb04b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6f17252b76dbe8bedd32b6df6ce52af707bfb04b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f17252b76dbe8bedd32b6df6ce52af707bfb04b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f6f1cebcbe4dd33cdd65094267cc33395d55ece7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f6f1cebcbe4dd33cdd65094267cc33395d55ece7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f6f1cebcbe4dd33cdd65094267cc33395d55ece7"
    }
  ],
  "stats": {
    "total": 86,
    "additions": 46,
    "deletions": 40
  },
  "files": [
    {
      "sha": "7be36c11b5ff56808e3cf5ec994ff07dcec62cd9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f17252b76dbe8bedd32b6df6ce52af707bfb04b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f17252b76dbe8bedd32b6df6ce52af707bfb04b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6f17252b76dbe8bedd32b6df6ce52af707bfb04b",
      "patch": "@@ -1,3 +1,13 @@\n+2020-01-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* mdebugread.c (parse_partial_symbols): Use discard_psymtab.\n+\t* psymtab.h (class psymtab_storage) <free_psymtabs>: Remove.\n+\t* psymtab.c (psymtab_storage): Delete psymtabs.\n+\t(psymtab_storage::allocate_psymtab): Use new.\n+\t(psymtab_storage::discard_psymtab): Use delete.\n+\t* psympriv.h (struct partial_symtab): Add constructor and\n+\tinitializers.\n+\n 2020-01-26  Tom Tromey  <tom@tromey.com>\n \n \t* machoread.c: Do not include psympriv.h."
    },
    {
      "sha": "393a433792e06c027bcbdfbcdd036c25cae35faa",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f17252b76dbe8bedd32b6df6ce52af707bfb04b/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f17252b76dbe8bedd32b6df6ce52af707bfb04b/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=6f17252b76dbe8bedd32b6df6ce52af707bfb04b",
      "patch": "@@ -3747,7 +3747,7 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n       && pst->number_of_dependencies == 0\n       && pst->n_global_syms == 0\n       && pst->n_static_syms == 0)\n-    objfile->partial_symtabs->psymtabs = NULL;\n+    objfile->partial_symtabs->discard_psymtab (pst);\n }\n \n /* If the current psymbol has an enumerated type, we need to add"
    },
    {
      "sha": "dc89db2ff6492014348bf7eafb1c9e89a1495078",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 26,
      "deletions": 19,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f17252b76dbe8bedd32b6df6ce52af707bfb04b/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f17252b76dbe8bedd32b6df6ce52af707bfb04b/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=6f17252b76dbe8bedd32b6df6ce52af707bfb04b",
      "patch": "@@ -104,6 +104,13 @@ enum psymtab_search_status\n \n struct partial_symtab\n {\n+  partial_symtab ()\n+    : searched_flag (PST_NOT_SEARCHED),\n+      text_low_valid (0),\n+      text_high_valid (0)\n+  {\n+  }\n+\n   /* Return the raw low text address of this partial_symtab.  */\n   CORE_ADDR raw_text_low () const\n   {\n@@ -145,21 +152,21 @@ struct partial_symtab\n \n   /* Chain of all existing partial symtabs.  */\n \n-  struct partial_symtab *next;\n+  struct partial_symtab *next = nullptr;\n \n   /* Name of the source file which this partial_symtab defines,\n      or if the psymtab is anonymous then a descriptive name for\n      debugging purposes, or \"\".  It must not be NULL.  */\n \n-  const char *filename;\n+  const char *filename = nullptr;\n \n   /* Full path of the source file.  NULL if not known.  */\n \n-  char *fullname;\n+  char *fullname = nullptr;\n \n   /* Directory in which it was compiled, or NULL if we don't know.  */\n \n-  const char *dirname;\n+  const char *dirname = nullptr;\n \n   /* Range of text addresses covered by this file; texthigh is the\n      beginning of the next section.  Do not use if PSYMTABS_ADDRMAP_SUPPORTED\n@@ -168,8 +175,8 @@ struct partial_symtab\n      text_low_valid and text_high_valid fields; these are located later\n      in this structure for better packing.  */\n \n-  CORE_ADDR m_text_low;\n-  CORE_ADDR m_text_high;\n+  CORE_ADDR m_text_low = 0;\n+  CORE_ADDR m_text_high = 0;\n \n   /* If NULL, this is an ordinary partial symbol table.\n \n@@ -198,7 +205,7 @@ struct partial_symtab\n      The choice of which one should be canonical is left to the\n      debuginfo reader; it can be arbitrary.  */\n \n-  struct partial_symtab *user;\n+  struct partial_symtab *user = nullptr;\n \n   /* Array of pointers to all of the partial_symtab's which this one\n      depends on.  Since this array can only be set to previous or\n@@ -209,17 +216,17 @@ struct partial_symtab\n      in foo.h may use type numbers defined in foo.c.  For other debugging\n      formats there may be no need to use dependencies.  */\n \n-  struct partial_symtab **dependencies;\n+  struct partial_symtab **dependencies = nullptr;\n \n-  int number_of_dependencies;\n+  int number_of_dependencies = 0;\n \n   /* Global symbol list.  This list will be sorted after readin to\n      improve access.  Binary search will be the usual method of\n      finding a symbol within it.  globals_offset is an integer offset\n      within global_psymbols[].  */\n \n-  int globals_offset;\n-  int n_global_syms;\n+  int globals_offset = 0;\n+  int n_global_syms = 0;\n \n   /* Static symbol list.  This list will *not* be sorted after readin;\n      to find a symbol in it, exhaustive search must be used.  This is\n@@ -229,24 +236,24 @@ struct partial_symtab\n      how long errors take).  This is an offset and size within\n      static_psymbols[].  */\n \n-  int statics_offset;\n-  int n_static_syms;\n+  int statics_offset = 0;\n+  int n_static_syms = 0;\n \n   /* Non-zero if the symtab corresponding to this psymtab has been\n      readin.  This is located here so that this structure packs better\n      on 64-bit systems.  */\n \n-  unsigned char readin;\n+  unsigned char readin = 0;\n \n   /* True iff objfile->psymtabs_addrmap is properly populated for this\n      partial_symtab.  For discontiguous overlapping psymtabs is the only usable\n      info in PSYMTABS_ADDRMAP.  */\n \n-  unsigned char psymtabs_addrmap_supported;\n+  unsigned char psymtabs_addrmap_supported = 0;\n \n   /* True if the name of this partial symtab is not a source file name.  */\n \n-  unsigned char anonymous;\n+  unsigned char anonymous = 0;\n \n   /* A flag that is temporarily used when searching psymtabs.  */\n \n@@ -260,19 +267,19 @@ struct partial_symtab\n   /* Pointer to compunit eventually allocated for this source file, 0 if\n      !readin or if we haven't looked for the symtab after it was readin.  */\n \n-  struct compunit_symtab *compunit_symtab;\n+  struct compunit_symtab *compunit_symtab = nullptr;\n \n   /* Pointer to function which will read in the symtab corresponding to\n      this psymtab.  */\n \n-  void (*read_symtab) (struct partial_symtab *, struct objfile *);\n+  void (*read_symtab) (struct partial_symtab *, struct objfile *) = nullptr;\n \n   /* Information that lets read_symtab() locate the part of the symbol table\n      that this psymtab corresponds to.  This information is private to the\n      format-dependent symbol reading routines.  For further detail examine\n      the various symbol reading modules.  */\n \n-  void *read_symtab_private;\n+  void *read_symtab_private = nullptr;\n };\n \n /* Specify whether a partial psymbol should be allocated on the global"
    },
    {
      "sha": "5f428679fb20cfb55eb5986678555449f15a998d",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 9,
      "deletions": 16,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f17252b76dbe8bedd32b6df6ce52af707bfb04b/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f17252b76dbe8bedd32b6df6ce52af707bfb04b/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=6f17252b76dbe8bedd32b6df6ce52af707bfb04b",
      "patch": "@@ -64,24 +64,21 @@ psymtab_storage::psymtab_storage ()\n \n psymtab_storage::~psymtab_storage ()\n {\n+  partial_symtab *iter = psymtabs;\n+  while (iter != nullptr)\n+    {\n+      partial_symtab *next = iter->next;\n+      delete iter;\n+      iter = next;\n+    }\n }\n \n /* See psymtab.h.  */\n \n struct partial_symtab *\n psymtab_storage::allocate_psymtab ()\n {\n-  struct partial_symtab *psymtab;\n-\n-  if (free_psymtabs != nullptr)\n-    {\n-      psymtab = free_psymtabs;\n-      free_psymtabs = psymtab->next;\n-    }\n-  else\n-    psymtab = XOBNEW (obstack (), struct partial_symtab);\n-\n-  memset (psymtab, 0, sizeof (struct partial_symtab));\n+  struct partial_symtab *psymtab = new struct partial_symtab;\n \n   psymtab->next = psymtabs;\n   psymtabs = psymtab;\n@@ -1705,11 +1702,7 @@ psymtab_storage::discard_psymtab (struct partial_symtab *pst)\n   while ((*prev_pst) != pst)\n     prev_pst = &((*prev_pst)->next);\n   (*prev_pst) = pst->next;\n-\n-  /* Next, put it on a free list for recycling.  */\n-\n-  pst->next = free_psymtabs;\n-  free_psymtabs = pst;\n+  delete pst;\n }\n \n \f"
    },
    {
      "sha": "c0f0a97eb23837968a1af74782cefe2238615577",
      "filename": "gdb/psymtab.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6f17252b76dbe8bedd32b6df6ce52af707bfb04b/gdb/psymtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6f17252b76dbe8bedd32b6df6ce52af707bfb04b/gdb/psymtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.h?ref=6f17252b76dbe8bedd32b6df6ce52af707bfb04b",
      "patch": "@@ -130,10 +130,6 @@ class psymtab_storage\n \n private:\n \n-  /* List of freed partial symtabs, available for re-use.  */\n-\n-  struct partial_symtab *free_psymtabs = nullptr;\n-\n   /* The obstack where allocations are made.  This is lazily allocated\n      so that we don't waste memory when there are no psymtabs.  */\n "
    }
  ]
}