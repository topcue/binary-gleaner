{
  "sha": "a07c88800e88e26fc3a746739f0d2cc8abd30c5d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTA3Yzg4ODAwZTg4ZTI2ZmMzYTc0NjczOWYwZDJjYzhhYmQzMGM1ZA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2018-12-31T21:23:14Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-03T21:24:01Z"
    },
    "message": "gdb: Remove cleanup from linux-fork.c:inferior_call_waitpid\n\nReplace cleanup in linux-fork.c:inferior_call_waitpid with a RAII\nobject.\n\ngdb/ChangeLog:\n\n\t* linux-fork.c (class scoped_switch_fork_info): New class.\n\t(inferior_call_waitpid): Update to use scoped_switch_fork_info.",
    "tree": {
      "sha": "e9793fa6cd39259cb8a5e691052881c8a48b69ff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e9793fa6cd39259cb8a5e691052881c8a48b69ff"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a07c88800e88e26fc3a746739f0d2cc8abd30c5d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a07c88800e88e26fc3a746739f0d2cc8abd30c5d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a07c88800e88e26fc3a746739f0d2cc8abd30c5d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a07c88800e88e26fc3a746739f0d2cc8abd30c5d/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "26089c494f0d6fa8d4afeab2e2e53b25d299bb9f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/26089c494f0d6fa8d4afeab2e2e53b25d299bb9f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/26089c494f0d6fa8d4afeab2e2e53b25d299bb9f"
    }
  ],
  "stats": {
    "total": 106,
    "additions": 65,
    "deletions": 41
  },
  "files": [
    {
      "sha": "e1bd3496a679a17572a136483fb0bf2aac58f671",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a07c88800e88e26fc3a746739f0d2cc8abd30c5d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a07c88800e88e26fc3a746739f0d2cc8abd30c5d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a07c88800e88e26fc3a746739f0d2cc8abd30c5d",
      "patch": "@@ -1,3 +1,8 @@\n+2019-01-03  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* linux-fork.c (class scoped_switch_fork_info): New class.\n+\t(inferior_call_waitpid): Update to use scoped_switch_fork_info.\n+\n 2019-01-03  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* valops.c (find_overload_match): Remove use of null_cleanup, and"
    },
    {
      "sha": "f3231bae048eca8a57d5ba0790eade3dc75399b9",
      "filename": "gdb/linux-fork.c",
      "status": "modified",
      "additions": 60,
      "deletions": 41,
      "changes": 101,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a07c88800e88e26fc3a746739f0d2cc8abd30c5d/gdb/linux-fork.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a07c88800e88e26fc3a746739f0d2cc8abd30c5d/gdb/linux-fork.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-fork.c?ref=a07c88800e88e26fc3a746739f0d2cc8abd30c5d",
      "patch": "@@ -437,68 +437,87 @@ linux_fork_detach (int from_tty)\n     delete_fork (inferior_ptid);\n }\n \n-static void\n-inferior_call_waitpid_cleanup (void *fp)\n+/* Temporarily switch to the infrun state stored on the fork_info\n+   identified by a given ptid_t.  When this object goes out of scope,\n+   restore the currently selected infrun state.   */\n+\n+class scoped_switch_fork_info\n {\n-  struct fork_info *oldfp = (struct fork_info *) fp;\n+public:\n+  /* Switch to the infrun state held on the fork_info identified by\n+     PPTID.  If PPTID is the current inferior then no switch is done.  */\n+  scoped_switch_fork_info (ptid_t pptid)\n+    : m_oldfp (nullptr)\n+  {\n+    if (pptid != inferior_ptid)\n+      {\n+\tstruct fork_info *newfp = nullptr;\n+\n+\t/* Switch to pptid.  */\n+\tm_oldfp = find_fork_ptid (inferior_ptid);\n+\tgdb_assert (m_oldfp != nullptr);\n+\tnewfp = find_fork_ptid (pptid);\n+\tgdb_assert (newfp != nullptr);\n+\tfork_save_infrun_state (m_oldfp, 1);\n+\tremove_breakpoints ();\n+\tfork_load_infrun_state (newfp);\n+\tinsert_breakpoints ();\n+      }\n+  }\n \n-  if (oldfp)\n-    {\n-      /* Switch back to inferior_ptid.  */\n-      remove_breakpoints ();\n-      fork_load_infrun_state (oldfp);\n-      insert_breakpoints ();\n-    }\n-}\n+  /* Restore the previously selected infrun state.  If the constructor\n+     didn't need to switch states, then nothing is done here either.  */\n+  ~scoped_switch_fork_info ()\n+  {\n+    if (m_oldfp != nullptr)\n+      {\n+\t/* Switch back to inferior_ptid.  */\n+\tremove_breakpoints ();\n+\tfork_load_infrun_state (m_oldfp);\n+\tinsert_breakpoints ();\n+      }\n+  }\n+\n+  DISABLE_COPY_AND_ASSIGN (scoped_switch_fork_info);\n+\n+private:\n+  /* The fork_info for the previously selected infrun state, or nullptr if\n+     we were already in the desired state, and nothing needs to be\n+     restored.  */\n+  struct fork_info *m_oldfp;\n+};\n \n static int\n inferior_call_waitpid (ptid_t pptid, int pid)\n {\n   struct objfile *waitpid_objf;\n   struct value *waitpid_fn = NULL;\n-  struct value *argv[3], *retv;\n-  struct gdbarch *gdbarch = get_current_arch ();\n-  struct fork_info *oldfp = NULL, *newfp = NULL;\n-  struct cleanup *old_cleanup;\n   int ret = -1;\n \n-  if (pptid != inferior_ptid)\n-    {\n-      /* Switch to pptid.  */\n-      oldfp = find_fork_ptid (inferior_ptid);\n-      gdb_assert (oldfp != NULL);\n-      newfp = find_fork_ptid (pptid);\n-      gdb_assert (newfp != NULL);\n-      fork_save_infrun_state (oldfp, 1);\n-      remove_breakpoints ();\n-      fork_load_infrun_state (newfp);\n-      insert_breakpoints ();\n-    }\n-\n-  old_cleanup = make_cleanup (inferior_call_waitpid_cleanup, oldfp);\n+  scoped_switch_fork_info switch_fork_info (pptid);\n \n   /* Get the waitpid_fn.  */\n   if (lookup_minimal_symbol (\"waitpid\", NULL, NULL).minsym != NULL)\n     waitpid_fn = find_function_in_inferior (\"waitpid\", &waitpid_objf);\n   if (!waitpid_fn\n       && lookup_minimal_symbol (\"_waitpid\", NULL, NULL).minsym != NULL)\n     waitpid_fn = find_function_in_inferior (\"_waitpid\", &waitpid_objf);\n-  if (!waitpid_fn)\n-    goto out;\n+  if (waitpid_fn != nullptr)\n+    {\n+      struct gdbarch *gdbarch = get_current_arch ();\n+      struct value *argv[3], *retv;\n \n-  /* Get the argv.  */\n-  argv[0] = value_from_longest (builtin_type (gdbarch)->builtin_int, pid);\n-  argv[1] = value_from_pointer (builtin_type (gdbarch)->builtin_data_ptr, 0);\n-  argv[2] = value_from_longest (builtin_type (gdbarch)->builtin_int, 0);\n+      /* Get the argv.  */\n+      argv[0] = value_from_longest (builtin_type (gdbarch)->builtin_int, pid);\n+      argv[1] = value_from_pointer (builtin_type (gdbarch)->builtin_data_ptr, 0);\n+      argv[2] = value_from_longest (builtin_type (gdbarch)->builtin_int, 0);\n \n-  retv = call_function_by_hand (waitpid_fn, NULL, argv);\n-  if (value_as_long (retv) < 0)\n-    goto out;\n+      retv = call_function_by_hand (waitpid_fn, NULL, argv);\n \n-  ret = 0;\n+      if (value_as_long (retv) >= 0)\n+\tret = 0;\n+    }\n \n-out:\n-  do_cleanups (old_cleanup);\n   return ret;\n }\n "
    }
  ]
}