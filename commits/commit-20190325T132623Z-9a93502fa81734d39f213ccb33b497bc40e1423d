{
  "sha": "9a93502fa81734d39f213ccb33b497bc40e1423d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWE5MzUwMmZhODE3MzRkMzlmMjEzY2NiMzNiNDk3YmM0MGUxNDIzZA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-03-25T13:26:23Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-03-25T13:26:23Z"
    },
    "message": "Fix testsuite hangs when gdb_test_multiple body errors out\n\nThis commit fixes a regression in the testsuite itself, triggered by\nerrors being raised from within gdb_test_multiple, originally reported\nby Pedro Franco de Carvalho's at\n<https://sourceware.org/ml/gdb-patches/2019-03/msg00160.html>.  Parts\nof the commit message are based on his report.\n\nThis started happening due to a commit that was introduced recently,\nand it can cause the testsuite to hang.\n\nThe commit that triggers this is:\n\n fe1a5cad302b5535030cdf62895e79512713d738\n [gdb/testsuite] Log wait status on process no longer exists error\n\nThat commit introduces a new \"eof\" block in gdb_test_multiple.  That\nis not incorrect itself, but dejagnu's remote_expect is picking that\nblock as the \"default\" action when an error is raised from within the\ncommands inside a call to gdb_test_multiple:\n\n  # remote_expect works basically the same as standard expect, but it\n  # also takes care of getting the file descriptor from the specified\n  # host and also calling the timeout/eof/default section if there is an\n  # error on the expect call.\n  #\n  proc remote_expect { board timeout args } {\n\nI find that \"feature\" surprising, and I don't really know why it\nexists, but this means that the eof section that remote_expect picks\nas the error block can be executed even when there was no actual eof\nand the GDB process is still running, so the wait introduced in the\ncommit that tries to get the exit status of GDB hangs forever, while\nGDB itself waits for input.\n\nThis only happens when there are internal testsuite errors (not\ntestcase failures).  This can be reproduced easily with a testcase\nsuch as:\n\n  gdb_start\n  gdb_test_multiple \"show version\" \"show version\" {\n    -re \".*\" {\n       error \"forced error\"\n    }\n  }\n\nI think that working around this in GDB is useful so that the\ntestsuite doesn't hang in these cases.\n\nAdding an empty \"default\" block at the end of the expect body in\ngdb_test_multiple doesn't work, because dejagnu gives preference to\n\"eof\" blocks:\n\n\t    if { $x eq \"eof\" } {\n\t\tset save_next 1\n\t    } elseif { $x eq \"default\" || $x eq \"timeout\" } {\n\t\tif { $error_sect eq \"\" } {\n\t\t    set save_next 1\n\t\t}\n\t    }\n\nAnd we do have \"eof\" blocks.  So we need to make sure that the last\n\"eof\" block is safe to use as the default error block.  It's also\npedantically incorrect to print\n\n \"ERROR: Process no longer exists\"\n\nwhich is what we'd get if the last eof block we have was selected\n(more below on this).\n\nSo this commit solves this by appending an \"eof\" with an empty\nspawn_id list, so that it won't ever match.\n\nNow, why is the first \"eof\" block selected today as the error block,\ninstead of the last one?\n\nThe reason is that remote_expect, while parsing the body to select the\ndefault block to execute after an error, is affected by the comments\nin the body (since they are also parsed).\n\nIf this comment in gdb_test_multiple\n\n # patterns below apply to any spawn id specified.\n\nis changed to\n\n # The patterns below apply to any spawn id specified.\n\nthen the second eof block is selected and there is no hang.\n\nAny comment at that same place with an even number of tokens also\nworks.\n\nThis is IMO a coincidence caused by how comments work in TCL.\nComments should only appear in places where a command can appear.  And\nhere, remote_expect is parsing a list of options, not commands, so\nit's not unreasonable to not parse comments, similarly to how this:\n\n  set a_list {\n     an_element\n     # another_element\n  }\n\nresults in a list with three elements, not one element.\n\nThe fact that comments with an even number of tokens work is just a\ncoincidence of how remote_expect's little state machine is\nimplemented.\n\nI thought we could solve this by stripping out comment lines in\ngdb_expect, but I didn't find an easy way to do that.  Particularly, a\ncouple naive approaches I tried run into complications.  For example,\nwe have gdb_test calls with regular expressions that include sequences\nlike \"\\r\\n#\", and by the time we get to gdb_expect, the \\r\\n have\nalready been expanded to a real newline, so just splitting the whole\nbody at newline boundaries, looking for lines that start with #\nresults in incorrectly stripping out half of the gdb_text regexp.  I\nthink it's better (at least in this commit), to move the comments out\nof the list, because it's much simpler and risk free.\n\ngdb/testsuite/ChangeLog:\n2019-03-25  Pedro Alves  <palves@redhat.com>\n\n\t* lib/gdb.exp (gdb_test_multiple): Split appends to $code and\n\tmove comments outside list.  Append '-i \"\" eof' section.",
    "tree": {
      "sha": "88d46e5df1c53ca29a29c2b013c316b68278735b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/88d46e5df1c53ca29a29c2b013c316b68278735b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9a93502fa81734d39f213ccb33b497bc40e1423d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a93502fa81734d39f213ccb33b497bc40e1423d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9a93502fa81734d39f213ccb33b497bc40e1423d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a93502fa81734d39f213ccb33b497bc40e1423d/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6640a367bf5427779856e7c80ae4b4bd88c19d3c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6640a367bf5427779856e7c80ae4b4bd88c19d3c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6640a367bf5427779856e7c80ae4b4bd88c19d3c"
    }
  ],
  "stats": {
    "total": 28,
    "additions": 26,
    "deletions": 2
  },
  "files": [
    {
      "sha": "9e0c49a9cdf2020a155e3e67aaf23125c03d317c",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a93502fa81734d39f213ccb33b497bc40e1423d/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a93502fa81734d39f213ccb33b497bc40e1423d/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=9a93502fa81734d39f213ccb33b497bc40e1423d",
      "patch": "@@ -1,3 +1,8 @@\n+2019-03-25  Pedro Alves  <palves@redhat.com>\n+\n+\t* lib/gdb.exp (gdb_test_multiple): Split appends to $code and\n+\tmove comments outside list.  Append '-i \"\" eof' section.\n+\n 2019-03-22  Alan Hayward  <alan.hayward@arm.com>\n \n \t* README: Add pie options."
    },
    {
      "sha": "e3c6b2d6f5e5f6fe0e22ecd0d54b4dc22b22bacf",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 21,
      "deletions": 2,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a93502fa81734d39f213ccb33b497bc40e1423d/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a93502fa81734d39f213ccb33b497bc40e1423d/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=9a93502fa81734d39f213ccb33b497bc40e1423d",
      "patch": "@@ -906,10 +906,13 @@ proc gdb_test_multiple { command message user_code } {\n \t}\n     }\n     append code $processed_code\n+\n+    # Reset the spawn id, in case the processed code used -i.\n     append code {\n-\t# Reset the spawn id, in case the processed code used -i.\n \t-i \"$gdb_spawn_id\"\n+    }\n \n+    append code {\n \t-re \"Ending remote debugging.*$gdb_prompt $\" {\n \t    if ![isnative] then {\n \t\twarning \"Can`t communicate to remote target.\"\n@@ -990,8 +993,10 @@ proc gdb_test_multiple { command message user_code } {\n \t    }\n \t    return -1\n \t}\n+    }\n \n-\t# Patterns below apply to any spawn id specified.\n+    # Now patterns that apply to any spawn id specified.\n+    append code {\n \t-i $any_spawn_id\n \teof {\n \t    perror \"Process no longer exists\"\n@@ -1013,6 +1018,20 @@ proc gdb_test_multiple { command message user_code } {\n \t}\n     }\n \n+    # remote_expect calls the eof section if there is an error on the\n+    # expect call.  We already have eof sections above, and we don't\n+    # want them to get called in that situation.  Since the last eof\n+    # section becomes the error section, here we define another eof\n+    # section, but with an empty spawn_id list, so that it won't ever\n+    # match.\n+    append code {\n+\t-i \"\" eof {\n+\t    # This comment is here because the eof section must not be\n+\t    # the empty string, otherwise remote_expect won't realize\n+\t    # it exists.\n+\t}\n+    }\n+\n     set result 0\n     set code [catch {gdb_expect $code} string]\n     if {$code == 1} {"
    }
  ]
}