{
  "sha": "3d205eb4481c3add674166f716fc052b6fdcbf2e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2QyMDVlYjQ0ODFjM2FkZDY3NDE2NmY3MTZmYzA1MmI2ZmRjYmYyZQ==",
  "commit": {
    "author": {
      "name": "Peter Bergner",
      "email": "bergner@linux.ibm.com",
      "date": "2020-05-19T23:09:51Z"
    },
    "committer": {
      "name": "Peter Bergner",
      "email": "bergner@linux.ibm.com",
      "date": "2020-05-19T23:09:51Z"
    },
    "message": "Power10 dcbf, sync, and wait extensions.\n\nopcodes/\n\t* ppc-opc.c (insert_ls, extract_ls): Handle 3-bit L fields and new\n\tWC values on POWER10 sync, dcbf  and wait instructions.\n\t(insert_pl, extract_pl): New functions.\n\t(L2OPT, LS, WC): Use insert_ls and extract_ls.\n\t(LS3): New , 3-bit L for sync.\n\t(LS3, L3OPT): New, 3-bit L for sync and dcbf.\n\t(SC2, PL): New, 2-bit SC and PL for sync and wait.\n\t(XWCPL_MASK, XL3RT_MASK, XSYNCLS_MASK): New instruction masks.\n\t(XOPL3, XWCPL, XSYNCLS): New opcode macros.\n\t(powerpc_opcodes) <dcbflp, dcbfps, dcbstps pause_short, phwsync,\n\tplwsync, stcisync, stncisync, stsync, waitrsv>: New extended mnemonics.\n\t<wait>: Enable PL operand on POWER10.\n\t<dcbf>: Enable L3OPT operand on POWER10.\n\t<sync>: Enable SC2 operand on POWER10.\n\ngas/\n\t* testsuite/gas/ppc/power9.s <dcbf, dcbfl, dcbflp>: Add tests.\n\t* testsuite/gas/ppc/power9.d: Likewise.\n\t* testsuite/gas/ppc/power10.s <dcbf, dcbfps, dcbstps, hwsync, lwsync,\n\tpause_short, phwsync, plwsync, ptesync, stcisync, stncisync, stsync,\n\tsync, wait, waitrsv>: Add tests.\n\t* testsuite/gas/ppc/power10.d: Likewise.",
    "tree": {
      "sha": "e85bb606b4255824ac1f000c016e50efdac6c49b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e85bb606b4255824ac1f000c016e50efdac6c49b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3d205eb4481c3add674166f716fc052b6fdcbf2e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d205eb4481c3add674166f716fc052b6fdcbf2e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3d205eb4481c3add674166f716fc052b6fdcbf2e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d205eb4481c3add674166f716fc052b6fdcbf2e/comments",
  "author": {
    "login": "peter-bergner",
    "id": 17504345,
    "node_id": "MDQ6VXNlcjE3NTA0MzQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/peter-bergner",
    "html_url": "https://github.com/peter-bergner",
    "followers_url": "https://api.github.com/users/peter-bergner/followers",
    "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}",
    "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions",
    "organizations_url": "https://api.github.com/users/peter-bergner/orgs",
    "repos_url": "https://api.github.com/users/peter-bergner/repos",
    "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/peter-bergner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "peter-bergner",
    "id": 17504345,
    "node_id": "MDQ6VXNlcjE3NTA0MzQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/peter-bergner",
    "html_url": "https://github.com/peter-bergner",
    "followers_url": "https://api.github.com/users/peter-bergner/followers",
    "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}",
    "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions",
    "organizations_url": "https://api.github.com/users/peter-bergner/orgs",
    "repos_url": "https://api.github.com/users/peter-bergner/repos",
    "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/peter-bergner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3c568b8afab512d12eb5adcf304e505b1bce644d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3c568b8afab512d12eb5adcf304e505b1bce644d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3c568b8afab512d12eb5adcf304e505b1bce644d"
    }
  ],
  "stats": {
    "total": 360,
    "additions": 334,
    "deletions": 26
  },
  "files": [
    {
      "sha": "6b159fe357186207d5dae18446b647167a97af12",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d205eb4481c3add674166f716fc052b6fdcbf2e/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d205eb4481c3add674166f716fc052b6fdcbf2e/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=3d205eb4481c3add674166f716fc052b6fdcbf2e",
      "patch": "@@ -1,3 +1,12 @@\n+2020-05-19  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* testsuite/gas/ppc/power9.s <dcbf, dcbfl, dcbflp>: Add tests.\n+\t* testsuite/gas/ppc/power9.d: Likewise.\n+\t* testsuite/gas/ppc/power10.s <dcbf, dcbfps, dcbstps, hwsync, lwsync,\n+\tpause_short, phwsync, plwsync, ptesync, stcisync, stncisync, stsync,\n+\tsync, wait, waitrsv>: Add tests.\n+\t* testsuite/gas/ppc/power10.d: Likewise.\n+\n 2020-05-19  Alexander Fedotov  <alfedotov@gmail.com>\n \n \tPR 25992"
    },
    {
      "sha": "efa5be47ec54cdae3917b0cb4724b4eb14b1a938",
      "filename": "gas/testsuite/gas/ppc/power10.d",
      "status": "modified",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d205eb4481c3add674166f716fc052b6fdcbf2e/gas/testsuite/gas/ppc/power10.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d205eb4481c3add674166f716fc052b6fdcbf2e/gas/testsuite/gas/ppc/power10.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/power10.d?ref=3d205eb4481c3add674166f716fc052b6fdcbf2e",
      "patch": "@@ -13,4 +13,39 @@ Disassembly of section \\.text:\n .*:\t(7c 2a 5f 0d|0d 5f 2a 7c) \tpaste\\.  r10,r11\n .*:\t(7c 2a 5f 0d|0d 5f 2a 7c) \tpaste\\.  r10,r11\n .*:\t(7c 0a 5f 0d|0d 5f 0a 7c) \tpaste\\.  r10,r11,0\n+.*:\t(7c 80 18 ac|ac 18 80 7c) \tdcbfps  0,r3\n+.*:\t(7c 80 18 ac|ac 18 80 7c) \tdcbfps  0,r3\n+.*:\t(7c c0 18 ac|ac 18 c0 7c) \tdcbstps 0,r3\n+.*:\t(7c c0 18 ac|ac 18 c0 7c) \tdcbstps 0,r3\n+.*:\t(7c 00 04 ac|ac 04 00 7c) \thwsync\n+.*:\t(7c 00 04 ac|ac 04 00 7c) \thwsync\n+.*:\t(7c 00 04 ac|ac 04 00 7c) \thwsync\n+.*:\t(7c 00 04 ac|ac 04 00 7c) \thwsync\n+.*:\t(7c 20 04 ac|ac 04 20 7c) \tlwsync\n+.*:\t(7c 20 04 ac|ac 04 20 7c) \tlwsync\n+.*:\t(7c 20 04 ac|ac 04 20 7c) \tlwsync\n+.*:\t(7c 40 04 ac|ac 04 40 7c) \tptesync\n+.*:\t(7c 40 04 ac|ac 04 40 7c) \tptesync\n+.*:\t(7c 40 04 ac|ac 04 40 7c) \tptesync\n+.*:\t(7c 80 04 ac|ac 04 80 7c) \tphwsync\n+.*:\t(7c 80 04 ac|ac 04 80 7c) \tphwsync\n+.*:\t(7c 80 04 ac|ac 04 80 7c) \tphwsync\n+.*:\t(7c a0 04 ac|ac 04 a0 7c) \tplwsync\n+.*:\t(7c a0 04 ac|ac 04 a0 7c) \tplwsync\n+.*:\t(7c a0 04 ac|ac 04 a0 7c) \tplwsync\n+.*:\t(7c 21 04 ac|ac 04 21 7c) \tstncisync\n+.*:\t(7c 21 04 ac|ac 04 21 7c) \tstncisync\n+.*:\t(7c 02 04 ac|ac 04 02 7c) \tstcisync\n+.*:\t(7c 02 04 ac|ac 04 02 7c) \tstcisync\n+.*:\t(7c 03 04 ac|ac 04 03 7c) \tstsync\n+.*:\t(7c 03 04 ac|ac 04 03 7c) \tstsync\n+.*:\t(7c 00 00 3c|3c 00 00 7c) \twait\n+.*:\t(7c 00 00 3c|3c 00 00 7c) \twait\n+.*:\t(7c 00 00 3c|3c 00 00 7c) \twait\n+.*:\t(7c 20 00 3c|3c 00 20 7c) \twaitrsv\n+.*:\t(7c 20 00 3c|3c 00 20 7c) \twaitrsv\n+.*:\t(7c 20 00 3c|3c 00 20 7c) \twaitrsv\n+.*:\t(7c 40 00 3c|3c 00 40 7c) \tpause_short\n+.*:\t(7c 40 00 3c|3c 00 40 7c) \tpause_short\n+.*:\t(7c 40 00 3c|3c 00 40 7c) \tpause_short\n #pass"
    },
    {
      "sha": "79893b966b9c9fab569d695dc4a77a1cd01f41c5",
      "filename": "gas/testsuite/gas/ppc/power10.s",
      "status": "modified",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d205eb4481c3add674166f716fc052b6fdcbf2e/gas/testsuite/gas/ppc/power10.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d205eb4481c3add674166f716fc052b6fdcbf2e/gas/testsuite/gas/ppc/power10.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/power10.s?ref=3d205eb4481c3add674166f716fc052b6fdcbf2e",
      "patch": "@@ -6,3 +6,38 @@ _start:\n \tpaste.  10,11\n \tpaste.  10,11,1\n \tpaste.  10,11,0\n+\tdcbfps\t0,3\n+\tdcbf\t0,3,4\n+\tdcbstps\t0,3\n+\tdcbf\t0,3,6\n+\thwsync\n+\tsync\n+\tsync 0\n+\tsync 0,0\n+\tlwsync\n+\tsync 1\n+\tsync 1,0\n+\tptesync\n+\tsync 2\n+\tsync 2,0\n+\tphwsync\n+\tsync 4\n+\tsync 4,0\n+\tplwsync\n+\tsync 5\n+\tsync 5,0\n+\tstncisync\n+\tsync 1,1\n+\tstcisync\n+\tsync 0,2\n+\tstsync\n+\tsync 0,3\n+\twait\n+\twait 0\n+\twait 0,0\n+\twaitrsv\n+\twait 1\n+\twait 1,0\n+\tpause_short\n+\twait 2\n+\twait 2,0"
    },
    {
      "sha": "4e7156d46d9971ab3d293989430bd7b5c724de94",
      "filename": "gas/testsuite/gas/ppc/power9.d",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d205eb4481c3add674166f716fc052b6fdcbf2e/gas/testsuite/gas/ppc/power9.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d205eb4481c3add674166f716fc052b6fdcbf2e/gas/testsuite/gas/ppc/power9.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/power9.d?ref=3d205eb4481c3add674166f716fc052b6fdcbf2e",
      "patch": "@@ -393,4 +393,10 @@ Disassembly of section \\.text:\n .*:\t(01 00 00 44|44 00 00 01) \tscv     0\n .*:\t(e1 0f 00 44|44 00 0f e1) \tscv     127\n .*:\t(a4 00 00 4c|4c 00 00 a4) \trfscv\n+.*:\t(7c 00 18 ac|ac 18 00 7c) \tdcbf    0,r3\n+.*:\t(7c 00 18 ac|ac 18 00 7c) \tdcbf    0,r3\n+.*:\t(7c 20 20 ac|ac 20 20 7c) \tdcbfl   0,r4\n+.*:\t(7c 20 20 ac|ac 20 20 7c) \tdcbfl   0,r4\n+.*:\t(7c 60 28 ac|ac 28 60 7c) \tdcbflp  0,r5\n+.*:\t(7c 60 28 ac|ac 28 60 7c) \tdcbflp  0,r5\n #pass"
    },
    {
      "sha": "69053819ffe4a293d0982182971a86039c434840",
      "filename": "gas/testsuite/gas/ppc/power9.s",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d205eb4481c3add674166f716fc052b6fdcbf2e/gas/testsuite/gas/ppc/power9.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d205eb4481c3add674166f716fc052b6fdcbf2e/gas/testsuite/gas/ppc/power9.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/power9.s?ref=3d205eb4481c3add674166f716fc052b6fdcbf2e",
      "patch": "@@ -384,3 +384,9 @@ power9:\n \tscv         0\n \tscv         127\n \trfscv\n+\tdcbf\t    0,3\n+\tdcbf\t    0,3,0\n+\tdcbfl\t    0,4\n+\tdcbf\t    0,4,1\n+\tdcbflp\t    0,5\n+\tdcbf\t    0,5,3"
    },
    {
      "sha": "4d4c77dbd4a072ca35c59f9974f22450ecab1c17",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d205eb4481c3add674166f716fc052b6fdcbf2e/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d205eb4481c3add674166f716fc052b6fdcbf2e/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=3d205eb4481c3add674166f716fc052b6fdcbf2e",
      "patch": "@@ -1,3 +1,20 @@\n+2020-05-19  Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* ppc-opc.c (insert_ls, extract_ls): Handle 3-bit L fields and new\n+\tWC values on POWER10 sync, dcbf  and wait instructions.\n+\t(insert_pl, extract_pl): New functions.\n+\t(L2OPT, LS, WC): Use insert_ls and extract_ls.\n+\t(LS3): New , 3-bit L for sync.\n+\t(LS3, L3OPT): New, 3-bit L for sync and dcbf.\n+\t(SC2, PL): New, 2-bit SC and PL for sync and wait.\n+\t(XWCPL_MASK, XL3RT_MASK, XSYNCLS_MASK): New instruction masks.\n+\t(XOPL3, XWCPL, XSYNCLS): New opcode macros.\n+\t(powerpc_opcodes) <dcbflp, dcbfps, dcbstps pause_short, phwsync,\n+\tplwsync, stcisync, stncisync, stsync, waitrsv>: New extended mnemonics.\n+\t<wait>: Enable PL operand on POWER10.\n+\t<dcbf>: Enable L3OPT operand on POWER10.\n+\t<sync>: Enable SC2 operand on POWER10.\n+\n 2020-05-19  Stafford Horne  <shorne@gmail.com>\n \n \tPR 25184"
    },
    {
      "sha": "5e20d617664f4f1cdf423678a1108d29dc4caaa2",
      "filename": "opcodes/ppc-opc.c",
      "status": "modified",
      "additions": 226,
      "deletions": 26,
      "changes": 252,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d205eb4481c3add674166f716fc052b6fdcbf2e/opcodes/ppc-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d205eb4481c3add674166f716fc052b6fdcbf2e/opcodes/ppc-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ppc-opc.c?ref=3d205eb4481c3add674166f716fc052b6fdcbf2e",
      "patch": "@@ -835,45 +835,163 @@ extract_li20 (uint64_t insn,\n \t   | (insn & 0x7ff)) ^ 0x80000) - 0x80000;\n }\n \n-/* The 2-bit L field in a SYNC or WC field in a WAIT instruction.\n+/* The 2-bit/3-bit L or 2-bit WC field in a SYNC, DCBF or WAIT instruction.\n    For SYNC, some L values are reserved:\n-     * Value 3 is reserved on newer server cpus.\n-     * Values 2 and 3 are reserved on all other cpus.  */\n+     * Values 6 and 7 are reserved on newer server cpus.\n+     * Value 3 is reserved on all server cpus.\n+     * Value 2 is reserved on all other cpus.\n+   For DCBF, some L values are reserved:\n+     * Values 2, 5 and 7 are reserved on all cpus.\n+   For WAIT, some WC values are reserved:\n+     * Value 3 is reserved on all server cpus.\n+     * Values 1 and 2 are reserved on older server cpus.  */\n \n static uint64_t\n insert_ls (uint64_t insn,\n \t   int64_t value,\n \t   ppc_cpu_t dialect,\n \t   const char **errmsg)\n {\n-  /* For SYNC, some L values are illegal.  */\n+  int64_t mask;\n+\n   if (((insn >> 1) & 0x3ff) == 598)\n     {\n-      int64_t max_lvalue = (dialect & PPC_OPCODE_POWER4) ? 2 : 1;\n-      if (value > max_lvalue)\n-\t*errmsg = _(\"illegal L operand value\");\n+      /* For SYNC, some L values are illegal.  */\n+      mask = (dialect & PPC_OPCODE_POWER10) ?  0x7 : 0x3;\n+\n+      /* If the value is within range, check for other illegal values.  */\n+      if ((value & mask) == value)\n+\tswitch (value)\n+\t  {\n+\t  case 2:\n+\t    if (dialect & PPC_OPCODE_POWER4)\n+\t      break;\n+\t    /* Fall through.  */\n+\t  case 3:\n+\t  case 6:\n+\t  case 7:\n+\t    *errmsg = _(\"illegal L operand value\");\n+\t    break;\n+\t  default:\n+\t    break;\n+\t  }\n+    }\n+  else if (((insn >> 1) & 0x3ff) == 86)\n+    {\n+      /* For DCBF, some L values are illegal.  */\n+      mask = (dialect & PPC_OPCODE_POWER10) ?  0x7 : 0x3;\n+\n+      /* If the value is within range, check for other illegal values.  */\n+      if ((value & mask) == value)\n+\tswitch (value)\n+\t  {\n+\t  case 2:\n+\t  case 5:\n+\t  case 7:\n+\t    *errmsg = _(\"illegal L operand value\");\n+\t    break;\n+\t  default:\n+\t    break;\n+\t  }\n+    }\n+  else\n+    {\n+      /* For WAIT, some WC values are illegal.  */\n+      mask = 0x3;\n+\n+      /* If the value is within range, check for other illegal values.  */\n+      if ((dialect & PPC_OPCODE_A2) == 0\n+\t  && (dialect & PPC_OPCODE_E500MC) == 0\n+\t  && (value & mask) == value)\n+\tswitch (value)\n+\t  {\n+\t  case 1:\n+\t  case 2:\n+\t    if (dialect & PPC_OPCODE_POWER10)\n+\t      break;\n+\t    /* Fall through.  */\n+\t  case 3:\n+\t    *errmsg = _(\"illegal WC operand value\");\n+\t    break;\n+\t  default:\n+\t    break;\n+\t  }\n     }\n \n-  return insn | ((value & 0x3) << 21);\n+  return insn | ((value & mask) << 21);\n }\n \n static int64_t\n extract_ls (uint64_t insn,\n \t    ppc_cpu_t dialect,\n \t    int *invalid)\n {\n+  uint64_t value;\n+\n   /* Missing optional operands have a value of zero.  */\n   if (*invalid < 0)\n     return 0;\n \n-  uint64_t lvalue = (insn >> 21) & 3;\n   if (((insn >> 1) & 0x3ff) == 598)\n     {\n-      uint64_t max_lvalue = (dialect & PPC_OPCODE_POWER4) ? 2 : 1;\n-      if (lvalue > max_lvalue)\n-\t*invalid = 1;\n+      /* For SYNC, some L values are illegal.  */\n+      int64_t mask = (dialect & PPC_OPCODE_POWER10) ?  0x7 : 0x3;\n+\n+      value = (insn >> 21) & mask;\n+      switch (value)\n+\t{\n+\tcase 2:\n+\t  if (dialect & PPC_OPCODE_POWER4)\n+\t    break;\n+\t  /* Fall through.  */\n+\tcase 3:\n+\tcase 6:\n+\tcase 7:\n+\t  *invalid = 1;\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n+    }\n+  else if (((insn >> 1) & 0x3ff) == 86)\n+    {\n+      /* For DCBF, some L values are illegal.  */\n+      int64_t mask = (dialect & PPC_OPCODE_POWER10) ?  0x7 : 0x3;\n+\n+      value = (insn >> 21) & mask;\n+      switch (value)\n+\t{\n+\tcase 2:\n+\tcase 5:\n+\tcase 7:\n+\t  *invalid = 1;\n+\t  break;\n+\tdefault:\n+\t  break;\n+\t}\n     }\n-  return lvalue;\n+  else\n+    {\n+      /* For WAIT, some WC values are illegal.  */\n+      value = (insn >> 21) & 0x3;\n+      if ((dialect & PPC_OPCODE_A2) == 0\n+\t  && (dialect & PPC_OPCODE_E500MC) == 0)\n+\tswitch (value)\n+\t  {\n+\t  case 1:\n+\t  case 2:\n+\t    if (dialect & PPC_OPCODE_POWER10)\n+\t      break;\n+\t    /* Fall through.  */\n+\t  case 3:\n+\t    *invalid = 1;\n+\t    break;\n+\t  default:\n+\t    break;\n+\t  }\n+    }\n+\n+  return value;\n }\n \n /* The 4-bit E field in a sync instruction that accepts 2 operands.\n@@ -1079,6 +1197,41 @@ extract_nsi (uint64_t insn,\n   return -(((insn & 0xffff) ^ 0x8000) - 0x8000);\n }\n \n+/* The 2-bit SC field in a SYNC or PL field in a WAIT instruction.\n+   For WAIT, some PL values are reserved:\n+     * Values 1, 2 and 3 are reserved.  */\n+\n+static uint64_t\n+insert_pl (uint64_t insn,\n+\t   int64_t value,\n+\t   ppc_cpu_t dialect ATTRIBUTE_UNUSED,\n+\t   const char **errmsg)\n+{\n+  /* For WAIT, some PL values are illegal.  */\n+  if (((insn >> 1) & 0x3ff) == 30\n+      && value != 0)\n+    *errmsg = _(\"illegal PL operand value\");\n+  return insn | ((value & 0x3) << 16);\n+}\n+\n+static int64_t\n+extract_pl (uint64_t insn,\n+\t    ppc_cpu_t dialect ATTRIBUTE_UNUSED,\n+\t    int *invalid)\n+{\n+  /* Missing optional operands have a value of zero.  */\n+  if (*invalid < 0)\n+    return 0;\n+\n+  uint64_t value = (insn >> 16) & 0x3;\n+\n+  /* For WAIT, some PL values are illegal.  */\n+  if (((insn >> 1) & 0x3ff) == 30\n+      && value != 0)\n+    *invalid = 1;\n+  return value;\n+}\n+\n /* The RA field in a D or X form instruction which is an updating\n    load, which means that the RA field may not be zero and may not\n    equal the RT field.  */\n@@ -2443,9 +2596,11 @@ const struct powerpc_operand powerpc_operands[] =\n #define L32OPT L1OPT + 1\n   { 0x1, 21, NULL, NULL, PPC_OPERAND_OPTIONAL | PPC_OPERAND_OPTIONAL32 },\n \n-  /* The L field in dcbf instruction.  */\n+  /* The 2-bit L or WC field in an X (sync, dcbf or wait) form instruction.  */\n #define L2OPT L32OPT + 1\n-  { 0x3, 21, NULL, NULL, PPC_OPERAND_OPTIONAL },\n+#define LS L2OPT\n+#define WC L2OPT\n+  { 0x3, 21, insert_ls, extract_ls, PPC_OPERAND_OPTIONAL },\n \n   /* The LEV field in a POWER SVC / POWER9 SCV form instruction.  */\n #define SVC_LEV L2OPT + 1\n@@ -2465,13 +2620,13 @@ const struct powerpc_operand powerpc_operands[] =\n #define LIA LI + 1\n   { 0x3fffffc, 0, NULL, NULL, PPC_OPERAND_ABSOLUTE | PPC_OPERAND_SIGNED },\n \n-  /* The LS or WC field in an X (sync or wait) form instruction.  */\n-#define LS LIA + 1\n-#define WC LS\n-  { 0x3, 21, insert_ls, extract_ls, PPC_OPERAND_OPTIONAL },\n+  /* The 3-bit L field in a sync or dcbf instruction.  */\n+#define LS3 LIA + 1\n+#define L3OPT LS3\n+  { 0x7, 21, insert_ls, extract_ls, PPC_OPERAND_OPTIONAL },\n \n   /* The ME field in an M form instruction.  */\n-#define ME LS + 1\n+#define ME LS3 + 1\n #define ME_MASK (0x1f << 1)\n   { 0x1f, 1, NULL, NULL, 0 },\n \n@@ -3044,8 +3199,13 @@ const struct powerpc_operand powerpc_operands[] =\n #define IH ERAT_T + 1\n   { 0x7, 21, NULL, NULL, PPC_OPERAND_OPTIONAL },\n \n+  /* The 2-bit SC or PL field in an X form instruction.  */\n+#define SC2 IH + 1\n+#define PL SC2\n+  { 0x3, 16, insert_pl, extract_pl, PPC_OPERAND_OPTIONAL },\n+\n   /* The 8-bit IMM8 field in a XX1 form instruction.  */\n-#define IMM8 IH + 1\n+#define IMM8 SC2 + 1\n   { 0xff, 11, NULL, NULL, PPC_OPERAND_SIGNOPT },\n \n #define VX_OFF IMM8 + 1\n@@ -3594,6 +3754,10 @@ const unsigned int num_powerpc_operands = (sizeof (powerpc_operands)\n    field.  */\n #define XWC_MASK (XRC (0x3f, 0x3ff, 1) | (7 << 23) | RA_MASK | RB_MASK)\n \n+/* An X form wait instruction with everything filled in except the WC\n+   and PL fields.  */\n+#define XWCPL_MASK (XRC (0x3f, 0x3ff, 1) | (7 << 23) | (3 << 18) | RB_MASK)\n+\n /* The mask for an XX1 form instruction.  */\n #define XX1_MASK X (0x3f, 0x3ff)\n \n@@ -3659,9 +3823,12 @@ const unsigned int num_powerpc_operands = (sizeof (powerpc_operands)\n /* An X_MASK with the RT field fixed.  */\n #define XRT_MASK (X_MASK | RT_MASK)\n \n-/* An XRT_MASK mask with the L bits clear.  */\n+/* An XRT_MASK mask with the 2 L bits clear.  */\n #define XLRT_MASK (XRT_MASK & ~((uint64_t) 0x3 << 21))\n \n+/* An XRT_MASK mask with the 3 L bits clear.  */\n+#define XL3RT_MASK (XRT_MASK & ~((uint64_t) 0x7 << 21))\n+\n /* An X_MASK with the RA and RB fields fixed.  */\n #define XRARB_MASK (X_MASK | RA_MASK | RB_MASK)\n \n@@ -3700,11 +3867,21 @@ const unsigned int num_powerpc_operands = (sizeof (powerpc_operands)\n   (X ((op), (xop))\t\t\t\t\\\n    | ((((uint64_t)(l)) & 1) << 21))\n \n-/* An X form instruction with the L bits specified.  */\n+/* An X form instruction with the 2 L bits specified.  */\n #define XOPL2(op, xop, l)\t\t\t\\\n   (X ((op), (xop))\t\t\t\t\\\n    | ((((uint64_t)(l)) & 3) << 21))\n \n+/* An X form instruction with the 3 L bits specified.  */\n+#define XOPL3(op, xop, l)\t\t\t\\\n+  (X ((op), (xop))\t\t\t\t\\\n+   | ((((uint64_t)(l)) & 7) << 21))\n+\n+/* An X form instruction with the WC and PL bits specified.  */\n+#define XWCPL(op, xop, wc, pl)\t\t\t\\\n+  (XOPL3 ((op), (xop), (wc))\t\t\t\\\n+   | ((((uint64_t)(pl)) & 3) << 16))\n+\n /* An X form instruction with the L bit and RC bit specified.  */\n #define XRCL(op, xop, l, rc)\t\t\t\\\n   (XRC ((op), (xop), (rc))\t\t\t\\\n@@ -3753,6 +3930,16 @@ const unsigned int num_powerpc_operands = (sizeof (powerpc_operands)\n    and E fields.  */\n #define XSYNCLE_MASK (0xff90ffff)\n \n+/* An X form sync instruction.  */\n+#define XSYNCLS(op, xop, l, s)\t\t\t\\\n+  (X ((op), (xop))\t\t\t\t\\\n+   | ((((uint64_t)(l)) & 7) << 21)\t\t\\\n+   | ((((uint64_t)(s)) & 3) << 16))\n+\n+/* An X form sync instruction with everything filled in except the\n+   L and SC fields.  */\n+#define XSYNCLS_MASK (0xff1cffff)\n+\n /* An X_MASK, but with the EH bit clear.  */\n #define XEH_MASK (X_MASK & ~((uint64_t )1))\n \n@@ -6076,7 +6263,10 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"ldepx\",\tX(31,29),\tX_MASK,\t  E500MC|PPCA2, 0,\t\t{RT, RA0, RB}},\n \n {\"waitasec\",\tX(31,30),      XRTRARB_MASK, POWER8,\tPOWER9,\t\t{0}},\n-{\"wait\",\tX(31,30),\tXWC_MASK,    POWER9,\t0,\t\t{WC}},\n+{\"waitrsv\",\tXWCPL(31,30,1,0),0xffffffff, POWER10,\t0,\t\t{0}},\n+{\"pause_short\",\tXWCPL(31,30,2,0),0xffffffff, POWER10,\t0,\t\t{0}},\n+{\"wait\",\tX(31,30),\tXWCPL_MASK,  POWER10,\t0,\t\t{WC, PL}},\n+{\"wait\",\tX(31,30),\tXWC_MASK,    POWER9,\tPOWER10,\t{WC}},\n \n {\"lwepx\",\tX(31,31),\tX_MASK,\t  E500MC|PPCA2, 0,\t\t{RT, RA0, RB}},\n \n@@ -6174,7 +6364,11 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"ldarx\",\tX(31,84),\tXEH_MASK,    PPC64,\t0,\t\t{RT, RA0, RB, EH}},\n \n {\"dcbfl\",\tXOPL(31,86,1),\tXRT_MASK,    POWER5,\tPPC476,\t\t{RA0, RB}},\n-{\"dcbf\",\tX(31,86),\tXLRT_MASK,   PPC,\t0,\t\t{RA0, RB, L2OPT}},\n+{\"dcbflp\",\tXOPL2(31,86,3), XRT_MASK,    POWER9,\tPPC476,\t\t{RA0, RB}},\n+{\"dcbfps\",\tXOPL3(31,86,4), XRT_MASK,    POWER10,   PPC476,\t\t{RA0, RB}},\n+{\"dcbstps\",\tXOPL3(31,86,6), XRT_MASK,    POWER10,   PPC476,\t\t{RA0, RB}},\n+{\"dcbf\",\tX(31,86),\tXL3RT_MASK,  POWER10,\tPPC476,\t\t{RA0, RB, L3OPT}},\n+{\"dcbf\",\tX(31,86),\tXLRT_MASK,   PPC,\tPOWER10,\t{RA0, RB, L2OPT}},\n \n {\"lbzx\",\tX(31,87),\tX_MASK,\t     COM,\t0,\t\t{RT, RA0, RB}},\n \n@@ -7243,8 +7437,14 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"hwsync\",\tXSYNC(31,598,0), 0xffffffff, POWER4,\tBOOKE|PPC476,\t{0}},\n {\"lwsync\",\tXSYNC(31,598,1), 0xffffffff, PPC,\tE500,\t\t{0}},\n {\"ptesync\",\tXSYNC(31,598,2), 0xffffffff, PPC64,\t0,\t\t{0}},\n+{\"phwsync\",\tXSYNCLS(31,598,4,0), 0xffffffff, POWER10, 0,\t\t{0}},\n+{\"plwsync\",\tXSYNCLS(31,598,5,0), 0xffffffff, POWER10, 0,\t\t{0}},\n+{\"stncisync\",\tXSYNCLS(31,598,1,1), 0xffffffff, POWER10, 0,\t\t{0}},\n+{\"stcisync\",\tXSYNCLS(31,598,0,2), 0xffffffff, POWER10, 0,\t\t{0}},\n+{\"stsync\",\tXSYNCLS(31,598,0,3), 0xffffffff, POWER10, 0,\t\t{0}},\n+{\"sync\",\tX(31,598),     XSYNCLS_MASK, POWER10,\tBOOKE|PPC476,\t{LS3, SC2}},\n {\"sync\",\tX(31,598),     XSYNCLE_MASK, E6500,\t0,\t\t{LS, ESYNC}},\n-{\"sync\",\tX(31,598),     XSYNC_MASK,   PPCCOM,\tBOOKE|PPC476,\t{LS}},\n+{\"sync\",\tX(31,598),     XSYNC_MASK,   PPCCOM,\tPOWER10|BOOKE|PPC476, {LS}},\n {\"msync\",\tX(31,598),     0xffffffff, BOOKE|PPCA2|PPC476, 0,\t{0}},\n {\"sync\",\tX(31,598),     0xffffffff,   BOOKE|PPC476, E6500,\t{0}},\n {\"lwsync\",\tX(31,598),     0xffffffff,   E500,\t0,\t\t{0}},"
    }
  ]
}