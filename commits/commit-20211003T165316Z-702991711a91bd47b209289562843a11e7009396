{
  "sha": "702991711a91bd47b209289562843a11e7009396",
  "node_id": "C_kwDOANOeidoAKDcwMjk5MTcxMWE5MWJkNDdiMjA5Mjg5NTYyODQzYTExZTcwMDkzOTY",
  "commit": {
    "author": {
      "name": "Lancelot SIX",
      "email": "lsix@lancelotsix.com",
      "date": "2021-09-14T22:36:53Z"
    },
    "committer": {
      "name": "Lancelot SIX",
      "email": "lsix@lancelotsix.com",
      "date": "2021-10-03T16:53:16Z"
    },
    "message": "gdb: Have setter and getter callbacks for settings\n\nThe main motivation behind this improvement is to help the\nimplementation of a patch Simon Marchi is preparing to fix a bug when\nMI or Python try to access parameters that are inferior dependent (see\nPR/28085).\n\nThis commit extends the previous ones, which introduces the setting\nobject to represent a static variable whose value can be set or shown\nwith the appropriate commands.  This patch proposes that a setting can\neither contain a pointer to a static variable holding a setting, or\npointers to a pair of setter and getter callback functions.\n\nThe callbacks functions can be used to retrieve or change the value with\ncustom logic.  This is useful when the source of truth for a given\nsetting is not contained in the variable pointed to by the setting\ninstance.\n\nGiven that the callback function call is hidden within the setting\nabstraction introduced earlier, none of the sites accessing the setting\nneeds to be updated.  The registered getter or setter is used whatever\nthe way to access it is (through MI, Python, Guile, the \"with\" command\nand the $_gdb_setting / $_gdb_setting_str convenience functions).\n\nAll the add_setshow_*_cmd are given a new overload that will accept the\npair of function pointers (set / get functions) instead of the pointer\nto a global variable.\n\nTested on GNU/Linux x86_64 with no regression observed.\n\nChange-Id: Ieb81fef57550632ff66e6aa85f637372a226be8c\nCo-authored-by: Simon Marchi <simon.marchi@polymtl.ca>",
    "tree": {
      "sha": "b7b71ddfc72ce5ebddc1118cba7f97f3fb2700d8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b7b71ddfc72ce5ebddc1118cba7f97f3fb2700d8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/702991711a91bd47b209289562843a11e7009396",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/702991711a91bd47b209289562843a11e7009396",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/702991711a91bd47b209289562843a11e7009396",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/702991711a91bd47b209289562843a11e7009396/comments",
  "author": {
    "login": "lsix",
    "id": 724339,
    "node_id": "MDQ6VXNlcjcyNDMzOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/724339?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsix",
    "html_url": "https://github.com/lsix",
    "followers_url": "https://api.github.com/users/lsix/followers",
    "following_url": "https://api.github.com/users/lsix/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsix/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsix/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsix/subscriptions",
    "organizations_url": "https://api.github.com/users/lsix/orgs",
    "repos_url": "https://api.github.com/users/lsix/repos",
    "events_url": "https://api.github.com/users/lsix/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsix/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "lsix",
    "id": 724339,
    "node_id": "MDQ6VXNlcjcyNDMzOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/724339?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsix",
    "html_url": "https://github.com/lsix",
    "followers_url": "https://api.github.com/users/lsix/followers",
    "following_url": "https://api.github.com/users/lsix/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsix/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsix/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsix/subscriptions",
    "organizations_url": "https://api.github.com/users/lsix/orgs",
    "repos_url": "https://api.github.com/users/lsix/repos",
    "events_url": "https://api.github.com/users/lsix/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsix/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e0700ba44c5695d07f4cc9841315adc91ca18bf5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e0700ba44c5695d07f4cc9841315adc91ca18bf5"
    }
  ],
  "stats": {
    "total": 548,
    "additions": 502,
    "deletions": 46
  },
  "files": [
    {
      "sha": "3b0830e4c17f9c005b339de2a8dea12a5b5d9955",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 323,
      "deletions": 31,
      "changes": 354,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/702991711a91bd47b209289562843a11e7009396/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/702991711a91bd47b209289562843a11e7009396/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=702991711a91bd47b209289562843a11e7009396",
      "patch": "@@ -460,6 +460,10 @@ empty_func (const char *args, int from_tty, cmd_list_element *c)\n    CLASS is as in add_cmd.\n    VAR_TYPE is the kind of thing we are setting.\n    VAR is address of the variable being controlled by this command.\n+   SET_SETTING_FUNC is a pointer to an optional function callback used to set\n+   the setting value.\n+   GET_SETTING_FUNC is a pointer to an optional function callback used to get\n+   the setting value.\n    DOC is the documentation string.  */\n \n static struct cmd_list_element *\n@@ -486,9 +490,11 @@ add_set_or_show_cmd (const char *name,\n /* Add element named NAME to both the command SET_LIST and SHOW_LIST.\n    CLASS is as in add_cmd.  VAR_TYPE is the kind of thing we are\n    setting.  VAR is address of the variable being controlled by this\n-   command.  SET_FUNC and SHOW_FUNC are the callback functions (if\n-   non-NULL).  SET_DOC, SHOW_DOC and HELP_DOC are the documentation\n-   strings.\n+   command.  If nullptr is given as VAR, then both SET_SETTING_FUNC and\n+   GET_SETTING_FUNC must be provided. SET_SETTING_FUNC and GET_SETTING_FUNC are\n+   callbacks used to access and modify the underlying property, whatever its\n+   storage is.  SET_FUNC and SHOW_FUNC are the callback functions (if non-NULL).\n+   SET_DOC, SHOW_DOC and HELP_DOC are the documentation strings.\n \n    Return the newly created set and show commands.  */\n \n@@ -544,13 +550,16 @@ add_setshow_cmd_full (const char *name,\n \t\t      var_types var_type, T *var,\n \t\t      const char *set_doc, const char *show_doc,\n \t\t      const char *help_doc,\n+\t\t      setting_setter_ftype<T> set_setting_func,\n+\t\t      setting_getter_ftype<T> get_setting_func,\n \t\t      cmd_func_ftype *set_func,\n \t\t      show_value_ftype *show_func,\n \t\t      struct cmd_list_element **set_list,\n \t\t      struct cmd_list_element **show_list)\n {\n   auto erased_args\n-    = setting::erase_args (var_type, var);\n+    = setting::erase_args (var_type, var,\n+\t\t\t   set_setting_func, get_setting_func);\n \n   return add_setshow_cmd_full_erased (name,\n \t\t\t\t      theclass,\n@@ -584,12 +593,36 @@ add_setshow_enum_cmd (const char *name,\n   set_show_commands commands\n     =  add_setshow_cmd_full<const char *> (name, theclass, var_enum, var,\n \t\t\t\t\t   set_doc, show_doc, help_doc,\n-\t\t\t\t\t   set_func, show_func,\n-\t\t\t\t\t   set_list, show_list);\n+\t\t\t\t\t   nullptr, nullptr, set_func,\n+\t\t\t\t\t   show_func, set_list, show_list);\n   commands.set->enums = enumlist;\n   return commands;\n }\n \n+/* Same as above but using a getter and a setter function instead of a pointer\n+   to a global storage buffer.  */\n+\n+set_show_commands\n+add_setshow_enum_cmd (const char *name, command_class theclass,\n+\t\t      const char *const *enumlist, const char *set_doc,\n+\t\t      const char *show_doc, const char *help_doc,\n+\t\t      setting_setter_ftype<const char *> set_func,\n+\t\t      setting_getter_ftype<const char *> get_func,\n+\t\t      show_value_ftype *show_func,\n+\t\t      cmd_list_element **set_list,\n+\t\t      cmd_list_element **show_list)\n+{\n+  auto cmds = add_setshow_cmd_full<const char *> (name, theclass, var_enum,\n+\t\t\t\t\t\t  nullptr, set_doc, show_doc,\n+\t\t\t\t\t\t  help_doc, set_func, get_func,\n+\t\t\t\t\t\t  nullptr, show_func, set_list,\n+\t\t\t\t\t\t  show_list);\n+\n+  cmds.set->enums = enumlist;\n+\n+  return cmds;\n+}\n+\n /* See cli-decode.h.  */\n const char * const auto_boolean_enums[] = { \"on\", \"off\", \"auto\", NULL };\n \n@@ -610,17 +643,42 @@ add_setshow_auto_boolean_cmd (const char *name,\n \t\t\t      struct cmd_list_element **show_list)\n {\n   set_show_commands commands\n-    = add_setshow_cmd_full<enum auto_boolean> (name, theclass,\n-\t\t\t\t\t       var_auto_boolean,var,\n-\t\t\t\t\t       set_doc, show_doc, help_doc,\n-\t\t\t\t\t       set_func, show_func,\n-\t\t\t\t\t       set_list, show_list);\n+    = add_setshow_cmd_full<enum auto_boolean> (name, theclass, var_auto_boolean,\n+\t\t\t\t\t       var, set_doc, show_doc, help_doc,\n+\t\t\t\t\t       nullptr, nullptr, set_func,\n+\t\t\t\t\t       show_func, set_list, show_list);\n \n   commands.set->enums = auto_boolean_enums;\n \n   return commands;\n }\n \n+/* Same as above but using a getter and a setter function instead of a pointer\n+   to a global storage buffer.  */\n+\n+set_show_commands\n+add_setshow_auto_boolean_cmd (const char *name, command_class theclass,\n+\t\t\t      const char *set_doc, const char *show_doc,\n+\t\t\t      const char *help_doc,\n+\t\t\t      setting_setter_ftype<enum auto_boolean> set_func,\n+\t\t\t      setting_getter_ftype<enum auto_boolean> get_func,\n+\t\t\t      show_value_ftype *show_func,\n+\t\t\t      cmd_list_element **set_list,\n+\t\t\t      cmd_list_element **show_list)\n+{\n+  auto cmds = add_setshow_cmd_full<enum auto_boolean> (name, theclass,\n+\t\t\t\t\t\t       var_auto_boolean,\n+\t\t\t\t\t\t       nullptr, set_doc,\n+\t\t\t\t\t\t       show_doc, help_doc,\n+\t\t\t\t\t\t       set_func, get_func,\n+\t\t\t\t\t\t       nullptr, show_func,\n+\t\t\t\t\t\t       set_list, show_list);\n+\n+  cmds.set->enums = auto_boolean_enums;\n+\n+  return cmds;\n+}\n+\n /* See cli-decode.h.  */\n const char * const boolean_enums[] = { \"on\", \"off\", NULL };\n \n@@ -642,14 +700,37 @@ add_setshow_boolean_cmd (const char *name, enum command_class theclass, bool *va\n   set_show_commands commands\n     = add_setshow_cmd_full<bool> (name, theclass, var_boolean, var,\n \t\t\t\t  set_doc, show_doc, help_doc,\n-\t\t\t\t  set_func, show_func,\n+\t\t\t\t  nullptr, nullptr, set_func, show_func,\n \t\t\t\t  set_list, show_list);\n \n   commands.set->enums = boolean_enums;\n \n   return commands;\n }\n \n+/* Same as above but using a getter and a setter function instead of a pointer\n+   to a global storage buffer.  */\n+\n+set_show_commands\n+add_setshow_boolean_cmd (const char *name, command_class theclass,\n+\t\t\t const char *set_doc, const char *show_doc,\n+\t\t\t const char *help_doc,\n+\t\t\t setting_setter_ftype<bool> set_func,\n+\t\t\t setting_getter_ftype<bool> get_func,\n+\t\t\t show_value_ftype *show_func,\n+\t\t\t cmd_list_element **set_list,\n+\t\t\t cmd_list_element **show_list)\n+{\n+  auto cmds = add_setshow_cmd_full<bool> (name, theclass, var_boolean, nullptr,\n+\t\t\t\t\t  set_doc, show_doc, help_doc,\n+\t\t\t\t\t  set_func, get_func, nullptr,\n+\t\t\t\t\t  show_func, set_list, show_list);\n+\n+  cmds.set->enums = boolean_enums;\n+\n+  return cmds;\n+}\n+\n /* Add element named NAME to both the set and show command LISTs (the\n    list for set/show or some sublist thereof).  */\n \n@@ -666,14 +747,38 @@ add_setshow_filename_cmd (const char *name, enum command_class theclass,\n   set_show_commands commands\n     = add_setshow_cmd_full<std::string> (name, theclass, var_filename, var,\n \t\t\t\t\t set_doc, show_doc, help_doc,\n-\t\t\t\t\t set_func, show_func,\n-\t\t\t\t\t set_list, show_list);\n+\t\t\t\t\t nullptr, nullptr, set_func,\n+\t\t\t\t\t show_func, set_list, show_list);\n \n   set_cmd_completer (commands.set, filename_completer);\n \n   return commands;\n }\n \n+/* Same as above but using a getter and a setter function instead of a pointer\n+   to a global storage buffer.  */\n+\n+set_show_commands\n+add_setshow_filename_cmd (const char *name, command_class theclass,\n+\t\t\t  const char *set_doc, const char *show_doc,\n+\t\t\t  const char *help_doc,\n+\t\t\t  setting_setter_ftype<std::string> set_func,\n+\t\t\t  setting_getter_ftype<std::string> get_func,\n+\t\t\t  show_value_ftype *show_func,\n+\t\t\t  cmd_list_element **set_list,\n+\t\t\t  cmd_list_element **show_list)\n+{\n+  auto cmds = add_setshow_cmd_full<std::string> (name, theclass, var_filename,\n+\t\t\t\t\t\t nullptr, set_doc, show_doc,\n+\t\t\t\t\t\t help_doc, set_func, get_func,\n+\t\t\t\t\t\t nullptr, show_func, set_list,\n+\t\t\t\t\t\t show_list);\n+\n+  set_cmd_completer (cmds.set, filename_completer);\n+\n+  return cmds;\n+}\n+\n /* Add element named NAME to both the set and show command LISTs (the\n    list for set/show or some sublist thereof).  */\n \n@@ -689,16 +794,41 @@ add_setshow_string_cmd (const char *name, enum command_class theclass,\n {\n   set_show_commands commands\n     = add_setshow_cmd_full<std::string> (name, theclass, var_string, var,\n-\t\t\t\t\t set_doc, show_doc, help_doc,\n-\t\t\t\t\t set_func, show_func,\n-\t\t\t\t\t set_list, show_list);\n+\t\t\t\t\tset_doc, show_doc, help_doc,\n+\t\t\t\t\tnullptr, nullptr, set_func,\n+\t\t\t\t\tshow_func, set_list, show_list);\n \n   /* Disable the default symbol completer.  */\n   set_cmd_completer (commands.set, nullptr);\n \n   return commands;\n }\n \n+/* Same as above but using a getter and a setter function instead of a pointer\n+   to a global storage buffer.  */\n+\n+set_show_commands\n+add_setshow_string_cmd (const char *name, command_class theclass,\n+\t\t\tconst char *set_doc, const char *show_doc,\n+\t\t\tconst char *help_doc,\n+\t\t\tsetting_setter_ftype<std::string> set_func,\n+\t\t\tsetting_getter_ftype<std::string> get_func,\n+\t\t\tshow_value_ftype *show_func,\n+\t\t\tcmd_list_element **set_list,\n+\t\t\tcmd_list_element **show_list)\n+{\n+  auto cmds = add_setshow_cmd_full<std::string> (name, theclass, var_string,\n+\t\t\t\t\t\t nullptr, set_doc, show_doc,\n+\t\t\t\t\t\t help_doc, set_func, get_func,\n+\t\t\t\t\t\t nullptr, show_func, set_list,\n+\t\t\t\t\t\t show_list);\n+\n+  /* Disable the default symbol completer.  */\n+  set_cmd_completer (cmds.set, nullptr);\n+\n+  return cmds;\n+}\n+\n /* Add element named NAME to both the set and show command LISTs (the\n    list for set/show or some sublist thereof).  */\n \n@@ -715,15 +845,41 @@ add_setshow_string_noescape_cmd (const char *name, enum command_class theclass,\n   set_show_commands commands\n     = add_setshow_cmd_full<std::string> (name, theclass, var_string_noescape,\n \t\t\t\t\t var, set_doc, show_doc, help_doc,\n-\t\t\t\t\t set_func, show_func, set_list,\n-\t\t\t\t\t show_list);\n+\t\t\t\t\t nullptr, nullptr, set_func, show_func,\n+\t\t\t\t\t set_list, show_list);\n \n   /* Disable the default symbol completer.  */\n   set_cmd_completer (commands.set, nullptr);\n \n   return commands;\n }\n \n+/* Same as above but using a getter and a setter function instead of a pointer\n+   to a global storage buffer.  */\n+\n+set_show_commands\n+add_setshow_string_noescape_cmd (const char *name, command_class theclass,\n+\t\t\t\t const char *set_doc, const char *show_doc,\n+\t\t\t\t const char *help_doc,\n+\t\t\t\t setting_setter_ftype<std::string> set_func,\n+\t\t\t\t setting_getter_ftype<std::string> get_func,\n+\t\t\t\t show_value_ftype *show_func,\n+\t\t\t\t cmd_list_element **set_list,\n+\t\t\t\t cmd_list_element **show_list)\n+{\n+  auto cmds = add_setshow_cmd_full<std::string> (name, theclass,\n+\t\t\t\t\t\t var_string_noescape, nullptr,\n+\t\t\t\t\t\t set_doc, show_doc, help_doc,\n+\t\t\t\t\t\t set_func, get_func,\n+\t\t\t\t\t\t nullptr, show_func, set_list,\n+\t\t\t\t\t\t show_list);\n+\n+  /* Disable the default symbol completer.  */\n+  set_cmd_completer (cmds.set, nullptr);\n+\n+  return cmds;\n+}\n+\n /* Add element named NAME to both the set and show command LISTs (the\n    list for set/show or some sublist thereof).  */\n \n@@ -740,14 +896,38 @@ add_setshow_optional_filename_cmd (const char *name, enum command_class theclass\n   set_show_commands commands\n     = add_setshow_cmd_full<std::string> (name, theclass, var_optional_filename,\n \t\t\t\t\t var, set_doc, show_doc, help_doc,\n-\t\t\t\t\t set_func, show_func, set_list,\n-\t\t\t\t\t show_list);\n+\t\t\t\t\t nullptr, nullptr, set_func, show_func,\n+\t\t\t\t\t set_list, show_list);\n \n   set_cmd_completer (commands.set, filename_completer);\n \n   return commands;\n }\n \n+/* Same as above but using a getter and a setter function instead of a pointer\n+   to a global storage buffer.  */\n+\n+set_show_commands\n+add_setshow_optional_filename_cmd (const char *name, command_class theclass,\n+\t\t\t\t   const char *set_doc, const char *show_doc,\n+\t\t\t\t   const char *help_doc,\n+\t\t\t\t   setting_setter_ftype<std::string> set_func,\n+\t\t\t\t   setting_getter_ftype<std::string> get_func,\n+\t\t\t\t   show_value_ftype *show_func,\n+\t\t\t\t   cmd_list_element **set_list,\n+\t\t\t\t   cmd_list_element **show_list)\n+{\n+  auto cmds =\n+    add_setshow_cmd_full<std::string> (name, theclass, var_optional_filename,\n+\t\t\t\t       nullptr, set_doc, show_doc, help_doc,\n+\t\t\t\t       set_func, get_func, nullptr, show_func,\n+\t\t\t\t       set_list,show_list);\n+\n+  set_cmd_completer (cmds.set, filename_completer);\n+\n+  return cmds;\n+}\n+\n /* Completes on literal \"unlimited\".  Used by integer commands that\n    support a special \"unlimited\" value.  */\n \n@@ -782,15 +962,39 @@ add_setshow_integer_cmd (const char *name, enum command_class theclass,\n \t\t\t struct cmd_list_element **show_list)\n {\n   set_show_commands commands\n-    = add_setshow_cmd_full<int> (name, theclass, var_integer, var, set_doc,\n-\t\t\t\t show_doc, help_doc, set_func, show_func,\n-\t\t\t\t set_list, show_list);\n+    = add_setshow_cmd_full<int> (name, theclass, var_integer, var,\n+\t\t\t\t set_doc, show_doc, help_doc,\n+\t\t\t\t nullptr, nullptr, set_func,\n+\t\t\t\t show_func, set_list, show_list);\n \n   set_cmd_completer (commands.set, integer_unlimited_completer);\n \n   return commands;\n }\n \n+/* Same as above but using a getter and a setter function instead of a pointer\n+   to a global storage buffer.  */\n+\n+set_show_commands\n+add_setshow_integer_cmd (const char *name, command_class theclass,\n+\t\t\t const char *set_doc, const char *show_doc,\n+\t\t\t const char *help_doc,\n+\t\t\t setting_setter_ftype<int> set_func,\n+\t\t\t setting_getter_ftype<int> get_func,\n+\t\t\t show_value_ftype *show_func,\n+\t\t\t cmd_list_element **set_list,\n+\t\t\t cmd_list_element **show_list)\n+{\n+  auto cmds = add_setshow_cmd_full<int> (name, theclass, var_integer, nullptr,\n+\t\t\t\t\t set_doc, show_doc, help_doc, set_func,\n+\t\t\t\t\t get_func, nullptr, show_func, set_list,\n+\t\t\t\t\t show_list);\n+\n+  set_cmd_completer (cmds.set, integer_unlimited_completer);\n+\n+  return cmds;\n+}\n+\n /* Add element named NAME to both the set and show command LISTs (the\n    list for set/show or some sublist thereof).  CLASS is as in\n    add_cmd.  VAR is address of the variable which will contain the\n@@ -809,14 +1013,38 @@ add_setshow_uinteger_cmd (const char *name, enum command_class theclass,\n   set_show_commands commands\n     = add_setshow_cmd_full<unsigned int> (name, theclass, var_uinteger, var,\n \t\t\t\t\t  set_doc, show_doc, help_doc,\n-\t\t\t\t\t  set_func, show_func,\n-\t\t\t\t\t  set_list, show_list);\n+\t\t\t\t\t  nullptr, nullptr, set_func,\n+\t\t\t\t\t  show_func, set_list, show_list);\n \n   set_cmd_completer (commands.set, integer_unlimited_completer);\n \n   return commands;\n }\n \n+/* Same as above but using a getter and a setter function instead of a pointer\n+   to a global storage buffer.  */\n+\n+set_show_commands\n+add_setshow_uinteger_cmd (const char *name, command_class theclass,\n+\t\t\t  const char *set_doc, const char *show_doc,\n+\t\t\t  const char *help_doc,\n+\t\t\t  setting_setter_ftype<unsigned int> set_func,\n+\t\t\t  setting_getter_ftype<unsigned int> get_func,\n+\t\t\t  show_value_ftype *show_func,\n+\t\t\t  cmd_list_element **set_list,\n+\t\t\t  cmd_list_element **show_list)\n+{\n+  auto cmds = add_setshow_cmd_full<unsigned int> (name, theclass, var_uinteger,\n+\t\t\t\t\t\t  nullptr, set_doc, show_doc,\n+\t\t\t\t\t\t  help_doc, set_func, get_func,\n+\t\t\t\t\t\t  nullptr, show_func, set_list,\n+\t\t\t\t\t\t  show_list);\n+\n+  set_cmd_completer (cmds.set, integer_unlimited_completer);\n+\n+  return cmds;\n+}\n+\n /* Add element named NAME to both the set and show command LISTs (the\n    list for set/show or some sublist thereof).  CLASS is as in\n    add_cmd.  VAR is address of the variable which will contain the\n@@ -834,8 +1062,27 @@ add_setshow_zinteger_cmd (const char *name, enum command_class theclass,\n {\n   return add_setshow_cmd_full<int> (name, theclass, var_zinteger, var,\n \t\t\t\t    set_doc, show_doc, help_doc,\n-\t\t\t\t    set_func, show_func,\n-\t\t\t\t    set_list, show_list);\n+\t\t\t\t    nullptr, nullptr, set_func,\n+\t\t\t\t    show_func, set_list, show_list);\n+}\n+\n+/* Same as above but using a getter and a setter function instead of a pointer\n+   to a global storage buffer.  */\n+\n+set_show_commands\n+add_setshow_zinteger_cmd (const char *name, command_class theclass,\n+\t\t\t  const char *set_doc, const char *show_doc,\n+\t\t\t  const char *help_doc,\n+\t\t\t  setting_setter_ftype<int> set_func,\n+\t\t\t  setting_getter_ftype<int> get_func,\n+\t\t\t  show_value_ftype *show_func,\n+\t\t\t  cmd_list_element **set_list,\n+\t\t\t  cmd_list_element **show_list)\n+{\n+  return add_setshow_cmd_full<int> (name, theclass, var_zinteger, nullptr,\n+\t\t\t\t    set_doc, show_doc, help_doc, set_func,\n+\t\t\t\t    get_func, nullptr, show_func, set_list,\n+\t\t\t\t    show_list);\n }\n \n set_show_commands\n@@ -852,14 +1099,39 @@ add_setshow_zuinteger_unlimited_cmd (const char *name,\n {\n   set_show_commands commands\n     = add_setshow_cmd_full<int> (name, theclass, var_zuinteger_unlimited, var,\n-\t\t\t\t set_doc, show_doc, help_doc, set_func,\n-\t\t\t\t show_func, set_list, show_list);\n+\t\t\t\t set_doc, show_doc, help_doc, nullptr,\n+\t\t\t\t nullptr, set_func, show_func, set_list,\n+\t\t\t\t show_list);\n \n   set_cmd_completer (commands.set, integer_unlimited_completer);\n \n   return commands;\n }\n \n+/* Same as above but using a getter and a setter function instead of a pointer\n+   to a global storage buffer.  */\n+\n+set_show_commands\n+add_setshow_zuinteger_unlimited_cmd (const char *name, command_class theclass,\n+\t\t\t\t     const char *set_doc, const char *show_doc,\n+\t\t\t\t     const char *help_doc,\n+\t\t\t\t     setting_setter_ftype<int> set_func,\n+\t\t\t\t     setting_getter_ftype<int> get_func,\n+\t\t\t\t     show_value_ftype *show_func,\n+\t\t\t\t     cmd_list_element **set_list,\n+\t\t\t\t     cmd_list_element **show_list)\n+{\n+  auto cmds\n+    = add_setshow_cmd_full<int> (name, theclass, var_zuinteger_unlimited,\n+\t\t\t\t nullptr, set_doc, show_doc, help_doc, set_func,\n+\t\t\t\t get_func, nullptr, show_func, set_list,\n+\t\t\t\t show_list);\n+\n+  set_cmd_completer (cmds.set, integer_unlimited_completer);\n+\n+  return cmds;\n+}\n+\n /* Add element named NAME to both the set and show command LISTs (the\n    list for set/show or some sublist thereof).  CLASS is as in\n    add_cmd.  VAR is address of the variable which will contain the\n@@ -877,7 +1149,27 @@ add_setshow_zuinteger_cmd (const char *name, enum command_class theclass,\n {\n   return add_setshow_cmd_full<unsigned int> (name, theclass, var_zuinteger,\n \t\t\t\t\t     var, set_doc, show_doc, help_doc,\n-\t\t\t\t\t     set_func, show_func, set_list,\n+\t\t\t\t\t     nullptr, nullptr, set_func,\n+\t\t\t\t\t     show_func, set_list, show_list);\n+}\n+\n+/* Same as above but using a getter and a setter function instead of a pointer\n+   to a global storage buffer.  */\n+\n+set_show_commands\n+add_setshow_zuinteger_cmd (const char *name, command_class theclass,\n+\t\t\t   const char *set_doc, const char *show_doc,\n+\t\t\t   const char *help_doc,\n+\t\t\t   setting_setter_ftype<unsigned int> set_func,\n+\t\t\t   setting_getter_ftype<unsigned int> get_func,\n+\t\t\t   show_value_ftype *show_func,\n+\t\t\t   cmd_list_element **set_list,\n+\t\t\t   cmd_list_element **show_list)\n+{\n+  return add_setshow_cmd_full<unsigned int> (name, theclass, var_zuinteger,\n+\t\t\t\t\t     nullptr, set_doc, show_doc,\n+\t\t\t\t\t     help_doc, set_func, get_func,\n+\t\t\t\t\t     nullptr, show_func, set_list,\n \t\t\t\t\t     show_list);\n }\n "
    },
    {
      "sha": "2abfbc497b9885093dd10d634b49b8ae121242ed",
      "filename": "gdb/command.h",
      "status": "modified",
      "additions": 179,
      "deletions": 15,
      "changes": 194,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/702991711a91bd47b209289562843a11e7009396/gdb/command.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/702991711a91bd47b209289562843a11e7009396/gdb/command.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/command.h?ref=702991711a91bd47b209289562843a11e7009396",
      "patch": "@@ -181,6 +181,20 @@ inline bool var_type_uses<const char *> (var_types t)\n   return t == var_enum;\n }\n \n+/* Function signature for a callback used to get a value from a setting.  */\n+\n+template<typename T>\n+using setting_getter_ftype = const T &(*) ();\n+\n+/* Function signature for a callback used to set a value to a setting.  */\n+\n+template<typename T>\n+using setting_setter_ftype = void (*) (const T &);\n+\n+/* Generic/type-erased function pointer.  */\n+\n+using erased_func = void (*) ();\n+\n /* Interface for getting and setting a setting's value.\n \n    The underlying data can be of any VAR_TYPES type.  */\n@@ -204,31 +218,68 @@ struct setting\n   struct erased_args\n   {\n     void *var;\n+    erased_func setter;\n+    erased_func getter;\n   };\n \n   template<typename T>\n-  static erased_args erase_args (var_types var_type, T *var)\n+  static erased_args erase_args (var_types var_type,\n+\t\t\t\t T *var,\n+\t\t\t\t setting_setter_ftype<T> set_setting_func,\n+\t\t\t\t setting_getter_ftype<T> get_setting_func)\n   {\n     gdb_assert (var_type_uses<T> (var_type));\n-\n-    return {var};\n+  /* The getter and the setter must be both provided or both omitted.  */\n+    gdb_assert\n+      ((set_setting_func == nullptr) == (get_setting_func == nullptr));\n+\n+  /* The caller must provide a pointer to a variable or get/set functions, but\n+     not both.  */\n+    gdb_assert ((set_setting_func == nullptr) != (var == nullptr));\n+\n+    return {\n+\tvar,\n+\treinterpret_cast<erased_func> (set_setting_func),\n+\treinterpret_cast<erased_func> (get_setting_func)\n+    };\n   }\n \n   /* Create a setting backed by pre-validated type-erased args.\n      ERASED_VAR's fields' real types must match the var type VAR_TYPE\n      (see VAR_TYPE_USES).  */\n   setting (var_types var_type, const erased_args &args)\n     : m_var_type (var_type),\n-      m_var (args.var)\n+      m_var (args.var),\n+      m_getter (args.getter),\n+      m_setter (args.setter)\n   {\n   }\n \n-  /* Access the type of the current setting.  */\n-  var_types type () const\n+  /* Create a setting backed by setter and getter functions.\n+\n+     Type T must match the var type VAR_TYPE (see VAR_TYPE_USES).  */\n+  template<typename T>\n+  setting (var_types var_type,\n+\t   setting_setter_ftype<T> setter,\n+\t   setting_getter_ftype<T> getter)\n+    : m_var_type (var_type)\n   {\n-    return m_var_type;\n+    gdb_assert (var_type_uses<T> (var_type));\n+\n+    /* Getters and setters are cast to and from the arbitrary `void (*) ()`\n+       function pointer type.  Make sure that the two types are really of the\n+       same size.  */\n+    gdb_static_assert (sizeof (m_getter) == sizeof (getter));\n+    gdb_static_assert (sizeof (m_setter) == sizeof (setter));\n+\n+    m_getter = reinterpret_cast<erased_func> (getter);\n+    m_setter = reinterpret_cast<erased_func> (setter);\n   }\n \n+  /* Access the type of the current setting.  */\n+  var_types type () const\n+  { return m_var_type; }\n+\n   /* Return the current value.\n \n      The template parameter T is the type of the variable used to store the\n@@ -239,13 +290,23 @@ struct setting\n     gdb_assert (var_type_uses<T> (m_var_type));\n     gdb_assert (m_var != nullptr);\n \n-    return *static_cast<const T *> (m_var);\n+    if (m_var == nullptr)\n+      {\n+\tgdb_assert (m_getter != nullptr);\n+\tauto getter = reinterpret_cast<setting_getter_ftype<T>> (m_getter);\n+\treturn getter ();\n+      }\n+    else\n+      return *static_cast<const T *> (m_var);\n   }\n \n   /* Sets the value of the setting to V.\n \n-     The template parameter T indicates the type of the variable used to\n-     store the setting.\n+     If we have a user-provided setter, use it to set the setting.  Otherwise\n+     copy the value V to the internally referenced buffer.\n+\n+     The template parameter T indicates the type of the variable used to store\n+     the setting.\n \n      The var_type of the setting must match T.  */\n   template<typename T>\n@@ -255,16 +316,32 @@ struct setting\n        this instantiation.  */\n     gdb_assert (var_type_uses<T> (m_var_type));\n \n-    *static_cast<T *> (m_var) = v;\n+    if (m_var == nullptr)\n+      {\n+\tgdb_assert (m_setter != nullptr);\n+\tauto setter = reinterpret_cast<setting_setter_ftype<T>> (m_setter);\n+\tsetter (v);\n+      }\n+    else\n+      *static_cast<T *> (m_var) = v;\n   }\n \n private:\n-  /* The type of the variable M_VAR is pointing to.  */\n+  /* The type of the variable M_VAR is pointing to, or that M_GETTER / M_SETTER\n+     get or set.  */\n   var_types m_var_type;\n \n-  /* Pointer to the enclosed variable.  The type of the variable is encoded\n-     in M_VAR_TYPE.  */\n-  void *m_var;\n+  /* Pointer to the enclosed variable\n+\n+     Either M_VAR is non-nullptr, or both M_GETTER and M_SETTER are\n+     non-nullptr.  */\n+  void *m_var = nullptr;\n+\n+  /* Pointer to a user provided getter.  */\n+  erased_func m_getter = nullptr;\n+\n+  /* Pointer to a user provided setter.  */\n+  erased_func m_setter = nullptr;\n };\n \n /* This structure records one command'd definition.  */\n@@ -548,72 +625,159 @@ extern set_show_commands add_setshow_enum_cmd\n    show_value_ftype *show_func, cmd_list_element **set_list,\n    cmd_list_element **show_list);\n \n+extern set_show_commands add_setshow_enum_cmd\n+  (const char *name, command_class theclass, const char *const *enumlist,\n+   const char *set_doc, const char *show_doc,\n+   const char *help_doc, setting_setter_ftype<const char *> set_func,\n+   setting_getter_ftype<const char *> get_func, show_value_ftype *show_func,\n+   cmd_list_element **set_list, cmd_list_element **show_list);\n+\n extern set_show_commands add_setshow_auto_boolean_cmd\n   (const char *name, command_class theclass, auto_boolean *var,\n    const char *set_doc, const char *show_doc, const char *help_doc,\n    cmd_func_ftype *set_func, show_value_ftype *show_func,\n    cmd_list_element **set_list, cmd_list_element **show_list);\n \n+extern set_show_commands add_setshow_auto_boolean_cmd\n+  (const char *name, command_class theclass, const char *set_doc,\n+   const char *show_doc, const char *help_doc,\n+   setting_setter_ftype<enum auto_boolean> set_func,\n+   setting_getter_ftype<enum auto_boolean> get_func,\n+   show_value_ftype *show_func, cmd_list_element **set_list,\n+   cmd_list_element **show_list);\n+\n extern set_show_commands add_setshow_boolean_cmd\n   (const char *name, command_class theclass, bool *var, const char *set_doc,\n    const char *show_doc, const char *help_doc, cmd_func_ftype *set_func,\n    show_value_ftype *show_func, cmd_list_element **set_list,\n    cmd_list_element **show_list);\n \n+extern set_show_commands add_setshow_boolean_cmd\n+  (const char *name, command_class theclass, const char *set_doc,\n+   const char *show_doc, const char *help_doc,\n+   setting_setter_ftype<bool> set_func,\n+   setting_getter_ftype<bool> get_func, show_value_ftype *show_func,\n+   cmd_list_element **set_list, cmd_list_element **show_list);\n+\n extern set_show_commands add_setshow_filename_cmd\n   (const char *name, command_class theclass, std::string *var, const char *set_doc,\n    const char *show_doc, const char *help_doc, cmd_func_ftype *set_func,\n    show_value_ftype *show_func, cmd_list_element **set_list,\n    cmd_list_element **show_list);\n \n+extern set_show_commands add_setshow_filename_cmd\n+  (const char *name, command_class theclass, const char *set_doc,\n+   const char *show_doc, const char *help_doc,\n+   setting_setter_ftype<std::string> set_func,\n+   setting_getter_ftype<std::string> get_func, show_value_ftype *show_func,\n+   cmd_list_element **set_list, cmd_list_element **show_list);\n+\n extern set_show_commands add_setshow_string_cmd\n   (const char *name, command_class theclass, std::string *var, const char *set_doc,\n    const char *show_doc, const char *help_doc, cmd_func_ftype *set_func,\n    show_value_ftype *show_func, cmd_list_element **set_list,\n    cmd_list_element **show_list);\n \n+extern set_show_commands add_setshow_string_cmd\n+  (const char *name, command_class theclass, const char *set_doc,\n+   const char *show_doc, const char *help_doc,\n+   setting_setter_ftype<std::string> set_func,\n+   setting_getter_ftype<std::string> get_func,\n+   show_value_ftype *show_func, cmd_list_element **set_list,\n+   cmd_list_element **show_list);\n+\n extern set_show_commands add_setshow_string_noescape_cmd\n   (const char *name, command_class theclass, std::string *var, const char *set_doc,\n    const char *show_doc, const char *help_doc, cmd_func_ftype *set_func,\n    show_value_ftype *show_func, cmd_list_element **set_list,\n    cmd_list_element **show_list);\n \n+extern set_show_commands add_setshow_string_noescape_cmd\n+  (const char *name, command_class theclass, const char *set_doc,\n+   const char *show_doc, const char *help_doc,\n+   setting_setter_ftype<std::string> set_func,\n+   setting_getter_ftype<std::string> get_func, show_value_ftype *show_func,\n+   cmd_list_element **set_list, cmd_list_element **show_list);\n+\n extern set_show_commands add_setshow_optional_filename_cmd\n   (const char *name, command_class theclass, std::string *var, const char *set_doc,\n    const char *show_doc, const char *help_doc, cmd_func_ftype *set_func,\n    show_value_ftype *show_func, cmd_list_element **set_list,\n    cmd_list_element **show_list);\n \n+extern set_show_commands add_setshow_optional_filename_cmd\n+  (const char *name, command_class theclass, const char *set_doc,\n+   const char *show_doc, const char *help_doc,\n+   setting_setter_ftype<std::string> set_func,\n+   setting_getter_ftype<std::string> get_func,\n+   show_value_ftype *show_func, cmd_list_element **set_list,\n+   cmd_list_element **show_list);\n+\n extern set_show_commands add_setshow_integer_cmd\n   (const char *name, command_class theclass, int *var, const char *set_doc,\n    const char *show_doc, const char *help_doc, cmd_func_ftype *set_func,\n    show_value_ftype *show_func, cmd_list_element **set_list,\n    cmd_list_element **show_list);\n \n+extern set_show_commands add_setshow_integer_cmd\n+  (const char *name, command_class theclass, const char *set_doc,\n+   const char *show_doc, const char *help_doc,\n+   setting_setter_ftype<int> set_func,\n+   setting_getter_ftype<int> get_func, show_value_ftype *show_func,\n+   cmd_list_element **set_list, cmd_list_element **show_list);\n+\n extern set_show_commands add_setshow_uinteger_cmd\n   (const char *name, command_class theclass, unsigned int *var,\n    const char *set_doc, const char *show_doc, const char *help_doc,\n    cmd_func_ftype *set_func, show_value_ftype *show_func,\n    cmd_list_element **set_list, cmd_list_element **show_list);\n \n+extern set_show_commands add_setshow_uinteger_cmd\n+  (const char *name, command_class theclass, const char *set_doc,\n+   const char *show_doc, const char *help_doc,\n+   setting_setter_ftype<unsigned int> set_func,\n+   setting_getter_ftype<unsigned int> get_func, show_value_ftype *show_func,\n+   cmd_list_element **set_list, cmd_list_element **show_list);\n+\n extern set_show_commands add_setshow_zinteger_cmd\n   (const char *name, command_class theclass, int *var, const char *set_doc,\n    const char *show_doc, const char *help_doc, cmd_func_ftype *set_func,\n    show_value_ftype *show_func, cmd_list_element **set_list,\n    cmd_list_element **show_list);\n \n+extern set_show_commands add_setshow_zinteger_cmd\n+  (const char *name, command_class theclass, const char *set_doc,\n+   const char *show_doc, const char *help_doc,\n+   setting_setter_ftype<int> set_func,\n+   setting_getter_ftype<int> get_func, show_value_ftype *show_func,\n+   cmd_list_element **set_list, cmd_list_element **show_list);\n+\n extern set_show_commands add_setshow_zuinteger_cmd\n   (const char *name, command_class theclass, unsigned int *var,\n    const char *set_doc, const char *show_doc, const char *help_doc,\n    cmd_func_ftype *set_func, show_value_ftype *show_func,\n    cmd_list_element **set_list, cmd_list_element **show_list);\n \n+extern set_show_commands add_setshow_zuinteger_cmd\n+  (const char *name, command_class theclass, const char *set_doc,\n+   const char *show_doc, const char *help_doc,\n+   setting_setter_ftype<unsigned int> set_func,\n+   setting_getter_ftype<unsigned int> get_func, show_value_ftype *show_func,\n+   cmd_list_element **set_list, cmd_list_element **show_list);\n+\n extern set_show_commands add_setshow_zuinteger_unlimited_cmd\n   (const char *name, command_class theclass, int *var, const char *set_doc,\n    const char *show_doc, const char *help_doc, cmd_func_ftype *set_func,\n    show_value_ftype *show_func, cmd_list_element **set_list,\n    cmd_list_element **show_list);\n \n+extern set_show_commands add_setshow_zuinteger_unlimited_cmd\n+  (const char *name, command_class theclass, const char *set_doc,\n+   const char *show_doc, const char *help_doc,\n+   setting_setter_ftype<int> set_func, setting_getter_ftype<int> get_func,\n+   show_value_ftype *show_func, cmd_list_element **set_list,\n+   cmd_list_element **show_list);\n+\n /* Do a \"show\" command for each thing on a command list.  */\n \n extern void cmd_show_list (struct cmd_list_element *, int);"
    }
  ]
}