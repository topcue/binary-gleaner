{
  "sha": "de83e5142d054218f476f7364f795bcaa30efd3f",
  "node_id": "C_kwDOANOeidoAKGRlODNlNTE0MmQwNTQyMThmNDc2ZjczNjRmNzk1YmNhYTMwZWZkM2Y",
  "commit": {
    "author": {
      "name": "jiawei",
      "email": "jiawei@iscas.ac.cn",
      "date": "2021-11-17T12:10:07Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-11-18T06:43:23Z"
    },
    "message": "RISC-V: Add instructions and operand set for z[fdq]inx\n\nReuse float instructions in INSN_CLASS_F/D/Q, use riscv_subset_supports to\nverify if z*inx enabled and use gpr instead of fpr when z*inx is enable.\n\nbfd/ChangeLog:\n\n* elfxx-riscv.c (riscv_multi_subset_supports): Added support for\n  z*inx extension.\n\ngas/ChangeLog:\n\n* config/tc-riscv.c (riscv_ip): Added register choice for z*inx.\n\ninclude/ChangeLog:\n\n* opcode/riscv.h (enum riscv_insn_class): Reused INSN_CLASS_* for z*inx.\n\nopcodes/ChangeLog:\n\n* riscv-dis.c (riscv_disassemble_insn): Added disassemble check for\n  z*inx.\n* riscv-opc.c: Reused INSN_CLASS_* for z*inx.\n\nReviewed-by: Palmer Dabbelt <palmer@rivosinc.com>",
    "tree": {
      "sha": "ca33a98af3306f2a3373a7dc238d0247f6e2d703",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ca33a98af3306f2a3373a7dc238d0247f6e2d703"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/de83e5142d054218f476f7364f795bcaa30efd3f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/de83e5142d054218f476f7364f795bcaa30efd3f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/de83e5142d054218f476f7364f795bcaa30efd3f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/de83e5142d054218f476f7364f795bcaa30efd3f/comments",
  "author": {
    "login": "pz9115",
    "id": 43362020,
    "node_id": "MDQ6VXNlcjQzMzYyMDIw",
    "avatar_url": "https://avatars.githubusercontent.com/u/43362020?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/pz9115",
    "html_url": "https://github.com/pz9115",
    "followers_url": "https://api.github.com/users/pz9115/followers",
    "following_url": "https://api.github.com/users/pz9115/following{/other_user}",
    "gists_url": "https://api.github.com/users/pz9115/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/pz9115/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/pz9115/subscriptions",
    "organizations_url": "https://api.github.com/users/pz9115/orgs",
    "repos_url": "https://api.github.com/users/pz9115/repos",
    "events_url": "https://api.github.com/users/pz9115/events{/privacy}",
    "received_events_url": "https://api.github.com/users/pz9115/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": null,
  "parents": [
    {
      "sha": "da05b70e56866fd39288f4ff531ddfa6cb988514",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/da05b70e56866fd39288f4ff531ddfa6cb988514",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/da05b70e56866fd39288f4ff531ddfa6cb988514"
    }
  ],
  "stats": {
    "total": 316,
    "additions": 167,
    "deletions": 149
  },
  "files": [
    {
      "sha": "91afd4c715f420351a585aac7ce85f0a5b914f8d",
      "filename": "bfd/elfxx-riscv.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/de83e5142d054218f476f7364f795bcaa30efd3f/bfd/elfxx-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/de83e5142d054218f476f7364f795bcaa30efd3f/bfd/elfxx-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.c?ref=de83e5142d054218f476f7364f795bcaa30efd3f",
      "patch": "@@ -2249,6 +2249,15 @@ riscv_multi_subset_supports (riscv_parse_subset_t *rps,\n     case INSN_CLASS_D_AND_C:\n       return (riscv_subset_supports (rps, \"d\")\n \t      && riscv_subset_supports (rps, \"c\"));\n+    case INSN_CLASS_F_OR_ZFINX:\n+      return (riscv_subset_supports (rps, \"f\")\n+\t      || riscv_subset_supports (rps, \"zfinx\"));\n+    case INSN_CLASS_D_OR_ZDINX:\n+      return (riscv_subset_supports (rps, \"d\")\n+\t      || riscv_subset_supports (rps, \"zdinx\"));\n+    case INSN_CLASS_Q_OR_ZQINX:\n+      return (riscv_subset_supports (rps, \"q\")\n+\t      || riscv_subset_supports (rps, \"zqinx\"));\n     case INSN_CLASS_ZBA:\n       return riscv_subset_supports (rps, \"zba\");\n     case INSN_CLASS_ZBB:"
    },
    {
      "sha": "7cc2063b198db5d696fa63b3a40d0a14e36ae29e",
      "filename": "gas/config/tc-riscv.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/de83e5142d054218f476f7364f795bcaa30efd3f/gas/config/tc-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/de83e5142d054218f476f7364f795bcaa30efd3f/gas/config/tc-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.c?ref=de83e5142d054218f476f7364f795bcaa30efd3f",
      "patch": "@@ -2879,7 +2879,9 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n \t    case 'T': /* Floating point RS2.  */\n \t    case 'U': /* Floating point RS1 and RS2.  */\n \t    case 'R': /* Floating point RS3.  */\n-\t      if (reg_lookup (&asarg, RCLASS_FPR, &regno))\n+\t      if (reg_lookup (&asarg,\n+\t\t\t      (riscv_subset_supports (&riscv_rps_as, \"zfinx\")\n+\t\t\t      ? RCLASS_GPR : RCLASS_FPR), &regno))\n \t\t{\n \t\t  char c = *oparg;\n \t\t  if (*asarg == ' ')"
    },
    {
      "sha": "8cb4fd237566f072f8bb7b47f6db071da6fd113e",
      "filename": "include/opcode/riscv.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/de83e5142d054218f476f7364f795bcaa30efd3f/include/opcode/riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/de83e5142d054218f476f7364f795bcaa30efd3f/include/opcode/riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/riscv.h?ref=de83e5142d054218f476f7364f795bcaa30efd3f",
      "patch": "@@ -369,6 +369,9 @@ enum riscv_insn_class\n   INSN_CLASS_ZICSR,\n   INSN_CLASS_ZIFENCEI,\n   INSN_CLASS_ZIHINTPAUSE,\n+  INSN_CLASS_F_OR_ZFINX,\n+  INSN_CLASS_D_OR_ZDINX,\n+  INSN_CLASS_Q_OR_ZQINX,\n   INSN_CLASS_ZBA,\n   INSN_CLASS_ZBB,\n   INSN_CLASS_ZBC,"
    },
    {
      "sha": "acb84712a7ec82e9c623afd288e920963d6037c6",
      "filename": "opcodes/riscv-dis.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/de83e5142d054218f476f7364f795bcaa30efd3f/opcodes/riscv-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/de83e5142d054218f476f7364f795bcaa30efd3f/opcodes/riscv-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/riscv-dis.c?ref=de83e5142d054218f476f7364f795bcaa30efd3f",
      "patch": "@@ -601,6 +601,10 @@ riscv_disassemble_insn (bfd_vma memaddr, insn_t word, disassemble_info *info)\n \t  xlen = ehdr->e_ident[EI_CLASS] == ELFCLASS64 ? 64 : 32;\n \t}\n \n+      /* If arch has ZFINX flags, use gpr for disassemble.  */\n+      if(riscv_subset_supports (&riscv_rps_dis, \"zfinx\"))\n+\triscv_fpr_names = riscv_gpr_names_abi;\n+\n       for (; op->name; op++)\n \t{\n \t  /* Does the opcode match?  */"
    },
    {
      "sha": "bad77fb8104ad87cb56a6dbe7d22905e9837c035",
      "filename": "opcodes/riscv-opc.c",
      "status": "modified",
      "additions": 148,
      "deletions": 148,
      "changes": 296,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/de83e5142d054218f476f7364f795bcaa30efd3f/opcodes/riscv-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/de83e5142d054218f476f7364f795bcaa30efd3f/opcodes/riscv-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/riscv-opc.c?ref=de83e5142d054218f476f7364f795bcaa30efd3f",
      "patch": "@@ -581,8 +581,8 @@ const struct riscv_opcode riscv_opcodes[] =\n {\"fsrm\",       0, INSN_CLASS_F,   \"d,s\",       MATCH_FSRM, MASK_FSRM, match_opcode, INSN_ALIAS },\n {\"fsrmi\",      0, INSN_CLASS_F,   \"d,Z\",       MATCH_FSRMI, MASK_FSRMI, match_opcode, INSN_ALIAS },\n {\"fsrmi\",      0, INSN_CLASS_F,   \"Z\",         MATCH_FSRMI, MASK_FSRMI|MASK_RD, match_opcode, INSN_ALIAS },\n-{\"frflags\",    0, INSN_CLASS_F,   \"d\",         MATCH_FRFLAGS, MASK_FRFLAGS, match_opcode, INSN_ALIAS },\n-{\"fsflags\",    0, INSN_CLASS_F,   \"s\",         MATCH_FSFLAGS, MASK_FSFLAGS|MASK_RD, match_opcode, INSN_ALIAS },\n+{\"frflags\",    0, INSN_CLASS_F_OR_ZFINX,   \"d\",         MATCH_FRFLAGS, MASK_FRFLAGS, match_opcode, INSN_ALIAS },\n+{\"fsflags\",    0, INSN_CLASS_F_OR_ZFINX,   \"s\",         MATCH_FSFLAGS, MASK_FSFLAGS|MASK_RD, match_opcode, INSN_ALIAS },\n {\"fsflags\",    0, INSN_CLASS_F,   \"d,s\",       MATCH_FSFLAGS, MASK_FSFLAGS, match_opcode, INSN_ALIAS },\n {\"fsflagsi\",   0, INSN_CLASS_F,   \"d,Z\",       MATCH_FSFLAGSI, MASK_FSFLAGSI, match_opcode, INSN_ALIAS },\n {\"fsflagsi\",   0, INSN_CLASS_F,   \"Z\",         MATCH_FSFLAGSI, MASK_FSFLAGSI|MASK_RD, match_opcode, INSN_ALIAS },\n@@ -599,53 +599,53 @@ const struct riscv_opcode riscv_opcodes[] =\n {\"fmv.x.s\",    0, INSN_CLASS_F,   \"d,S\",       MATCH_FMV_X_S, MASK_FMV_X_S, match_opcode, 0 },\n {\"fmv.s.x\",    0, INSN_CLASS_F,   \"D,s\",       MATCH_FMV_S_X, MASK_FMV_S_X, match_opcode, 0 },\n {\"fmv.s\",      0, INSN_CLASS_F,   \"D,U\",       MATCH_FSGNJ_S, MASK_FSGNJ_S, match_rs1_eq_rs2, INSN_ALIAS },\n-{\"fneg.s\",     0, INSN_CLASS_F,   \"D,U\",       MATCH_FSGNJN_S, MASK_FSGNJN_S, match_rs1_eq_rs2, INSN_ALIAS },\n-{\"fabs.s\",     0, INSN_CLASS_F,   \"D,U\",       MATCH_FSGNJX_S, MASK_FSGNJX_S, match_rs1_eq_rs2, INSN_ALIAS },\n-{\"fsgnj.s\",    0, INSN_CLASS_F,   \"D,S,T\",     MATCH_FSGNJ_S, MASK_FSGNJ_S, match_opcode, 0 },\n-{\"fsgnjn.s\",   0, INSN_CLASS_F,   \"D,S,T\",     MATCH_FSGNJN_S, MASK_FSGNJN_S, match_opcode, 0 },\n-{\"fsgnjx.s\",   0, INSN_CLASS_F,   \"D,S,T\",     MATCH_FSGNJX_S, MASK_FSGNJX_S, match_opcode, 0 },\n-{\"fadd.s\",     0, INSN_CLASS_F,   \"D,S,T\",     MATCH_FADD_S|MASK_RM, MASK_FADD_S|MASK_RM, match_opcode, 0 },\n-{\"fadd.s\",     0, INSN_CLASS_F,   \"D,S,T,m\",   MATCH_FADD_S, MASK_FADD_S, match_opcode, 0 },\n-{\"fsub.s\",     0, INSN_CLASS_F,   \"D,S,T\",     MATCH_FSUB_S|MASK_RM, MASK_FSUB_S|MASK_RM, match_opcode, 0 },\n-{\"fsub.s\",     0, INSN_CLASS_F,   \"D,S,T,m\",   MATCH_FSUB_S, MASK_FSUB_S, match_opcode, 0 },\n-{\"fmul.s\",     0, INSN_CLASS_F,   \"D,S,T\",     MATCH_FMUL_S|MASK_RM, MASK_FMUL_S|MASK_RM, match_opcode, 0 },\n-{\"fmul.s\",     0, INSN_CLASS_F,   \"D,S,T,m\",   MATCH_FMUL_S, MASK_FMUL_S, match_opcode, 0 },\n-{\"fdiv.s\",     0, INSN_CLASS_F,   \"D,S,T\",     MATCH_FDIV_S|MASK_RM, MASK_FDIV_S|MASK_RM, match_opcode, 0 },\n-{\"fdiv.s\",     0, INSN_CLASS_F,   \"D,S,T,m\",   MATCH_FDIV_S, MASK_FDIV_S, match_opcode, 0 },\n-{\"fsqrt.s\",    0, INSN_CLASS_F,   \"D,S\",       MATCH_FSQRT_S|MASK_RM, MASK_FSQRT_S|MASK_RM, match_opcode, 0 },\n-{\"fsqrt.s\",    0, INSN_CLASS_F,   \"D,S,m\",     MATCH_FSQRT_S, MASK_FSQRT_S, match_opcode, 0 },\n-{\"fmin.s\",     0, INSN_CLASS_F,   \"D,S,T\",     MATCH_FMIN_S, MASK_FMIN_S, match_opcode, 0 },\n-{\"fmax.s\",     0, INSN_CLASS_F,   \"D,S,T\",     MATCH_FMAX_S, MASK_FMAX_S, match_opcode, 0 },\n-{\"fmadd.s\",    0, INSN_CLASS_F,   \"D,S,T,R\",   MATCH_FMADD_S|MASK_RM, MASK_FMADD_S|MASK_RM, match_opcode, 0 },\n-{\"fmadd.s\",    0, INSN_CLASS_F,   \"D,S,T,R,m\", MATCH_FMADD_S, MASK_FMADD_S, match_opcode, 0 },\n-{\"fnmadd.s\",   0, INSN_CLASS_F,   \"D,S,T,R\",   MATCH_FNMADD_S|MASK_RM, MASK_FNMADD_S|MASK_RM, match_opcode, 0 },\n-{\"fnmadd.s\",   0, INSN_CLASS_F,   \"D,S,T,R,m\", MATCH_FNMADD_S, MASK_FNMADD_S, match_opcode, 0 },\n-{\"fmsub.s\",    0, INSN_CLASS_F,   \"D,S,T,R\",   MATCH_FMSUB_S|MASK_RM, MASK_FMSUB_S|MASK_RM, match_opcode, 0 },\n-{\"fmsub.s\",    0, INSN_CLASS_F,   \"D,S,T,R,m\", MATCH_FMSUB_S, MASK_FMSUB_S, match_opcode, 0 },\n-{\"fnmsub.s\",   0, INSN_CLASS_F,   \"D,S,T,R\",   MATCH_FNMSUB_S|MASK_RM, MASK_FNMSUB_S|MASK_RM, match_opcode, 0 },\n-{\"fnmsub.s\",   0, INSN_CLASS_F,   \"D,S,T,R,m\", MATCH_FNMSUB_S, MASK_FNMSUB_S, match_opcode, 0 },\n-{\"fcvt.w.s\",   0, INSN_CLASS_F,   \"d,S\",       MATCH_FCVT_W_S|MASK_RM, MASK_FCVT_W_S|MASK_RM, match_opcode, 0 },\n-{\"fcvt.w.s\",   0, INSN_CLASS_F,   \"d,S,m\",     MATCH_FCVT_W_S, MASK_FCVT_W_S, match_opcode, 0 },\n-{\"fcvt.wu.s\",  0, INSN_CLASS_F,   \"d,S\",       MATCH_FCVT_WU_S|MASK_RM, MASK_FCVT_WU_S|MASK_RM, match_opcode, 0 },\n-{\"fcvt.wu.s\",  0, INSN_CLASS_F,   \"d,S,m\",     MATCH_FCVT_WU_S, MASK_FCVT_WU_S, match_opcode, 0 },\n-{\"fcvt.s.w\",   0, INSN_CLASS_F,   \"D,s\",       MATCH_FCVT_S_W|MASK_RM, MASK_FCVT_S_W|MASK_RM, match_opcode, 0 },\n-{\"fcvt.s.w\",   0, INSN_CLASS_F,   \"D,s,m\",     MATCH_FCVT_S_W, MASK_FCVT_S_W, match_opcode, 0 },\n-{\"fcvt.s.wu\",  0, INSN_CLASS_F,   \"D,s\",       MATCH_FCVT_S_WU|MASK_RM, MASK_FCVT_S_W|MASK_RM, match_opcode, 0 },\n-{\"fcvt.s.wu\",  0, INSN_CLASS_F,   \"D,s,m\",     MATCH_FCVT_S_WU, MASK_FCVT_S_WU, match_opcode, 0 },\n-{\"fclass.s\",   0, INSN_CLASS_F,   \"d,S\",       MATCH_FCLASS_S, MASK_FCLASS_S, match_opcode, 0 },\n-{\"feq.s\",      0, INSN_CLASS_F,   \"d,S,T\",     MATCH_FEQ_S, MASK_FEQ_S, match_opcode, 0 },\n-{\"flt.s\",      0, INSN_CLASS_F,   \"d,S,T\",     MATCH_FLT_S, MASK_FLT_S, match_opcode, 0 },\n-{\"fle.s\",      0, INSN_CLASS_F,   \"d,S,T\",     MATCH_FLE_S, MASK_FLE_S, match_opcode, 0 },\n-{\"fgt.s\",      0, INSN_CLASS_F,   \"d,T,S\",     MATCH_FLT_S, MASK_FLT_S, match_opcode, 0 },\n-{\"fge.s\",      0, INSN_CLASS_F,   \"d,T,S\",     MATCH_FLE_S, MASK_FLE_S, match_opcode, 0 },\n-{\"fcvt.l.s\",  64, INSN_CLASS_F,   \"d,S\",       MATCH_FCVT_L_S|MASK_RM, MASK_FCVT_L_S|MASK_RM, match_opcode, 0 },\n-{\"fcvt.l.s\",  64, INSN_CLASS_F,   \"d,S,m\",     MATCH_FCVT_L_S, MASK_FCVT_L_S, match_opcode, 0 },\n-{\"fcvt.lu.s\", 64, INSN_CLASS_F,   \"d,S\",       MATCH_FCVT_LU_S|MASK_RM, MASK_FCVT_LU_S|MASK_RM, match_opcode, 0 },\n-{\"fcvt.lu.s\", 64, INSN_CLASS_F,   \"d,S,m\",     MATCH_FCVT_LU_S, MASK_FCVT_LU_S, match_opcode, 0 },\n-{\"fcvt.s.l\",  64, INSN_CLASS_F,   \"D,s\",       MATCH_FCVT_S_L|MASK_RM, MASK_FCVT_S_L|MASK_RM, match_opcode, 0 },\n-{\"fcvt.s.l\",  64, INSN_CLASS_F,   \"D,s,m\",     MATCH_FCVT_S_L, MASK_FCVT_S_L, match_opcode, 0 },\n-{\"fcvt.s.lu\", 64, INSN_CLASS_F,   \"D,s\",       MATCH_FCVT_S_LU|MASK_RM, MASK_FCVT_S_L|MASK_RM, match_opcode, 0 },\n-{\"fcvt.s.lu\", 64, INSN_CLASS_F,   \"D,s,m\",     MATCH_FCVT_S_LU, MASK_FCVT_S_LU, match_opcode, 0 },\n+{\"fneg.s\",     0, INSN_CLASS_F_OR_ZFINX,   \"D,U\",       MATCH_FSGNJN_S, MASK_FSGNJN_S, match_rs1_eq_rs2, INSN_ALIAS },\n+{\"fabs.s\",     0, INSN_CLASS_F_OR_ZFINX,   \"D,U\",       MATCH_FSGNJX_S, MASK_FSGNJX_S, match_rs1_eq_rs2, INSN_ALIAS },\n+{\"fsgnj.s\",    0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T\",     MATCH_FSGNJ_S, MASK_FSGNJ_S, match_opcode, 0 },\n+{\"fsgnjn.s\",   0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T\",     MATCH_FSGNJN_S, MASK_FSGNJN_S, match_opcode, 0 },\n+{\"fsgnjx.s\",   0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T\",     MATCH_FSGNJX_S, MASK_FSGNJX_S, match_opcode, 0 },\n+{\"fadd.s\",     0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T\",     MATCH_FADD_S|MASK_RM, MASK_FADD_S|MASK_RM, match_opcode, 0 },\n+{\"fadd.s\",     0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T,m\",   MATCH_FADD_S, MASK_FADD_S, match_opcode, 0 },\n+{\"fsub.s\",     0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T\",     MATCH_FSUB_S|MASK_RM, MASK_FSUB_S|MASK_RM, match_opcode, 0 },\n+{\"fsub.s\",     0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T,m\",   MATCH_FSUB_S, MASK_FSUB_S, match_opcode, 0 },\n+{\"fmul.s\",     0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T\",     MATCH_FMUL_S|MASK_RM, MASK_FMUL_S|MASK_RM, match_opcode, 0 },\n+{\"fmul.s\",     0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T,m\",   MATCH_FMUL_S, MASK_FMUL_S, match_opcode, 0 },\n+{\"fdiv.s\",     0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T\",     MATCH_FDIV_S|MASK_RM, MASK_FDIV_S|MASK_RM, match_opcode, 0 },\n+{\"fdiv.s\",     0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T,m\",   MATCH_FDIV_S, MASK_FDIV_S, match_opcode, 0 },\n+{\"fsqrt.s\",    0, INSN_CLASS_F_OR_ZFINX,   \"D,S\",       MATCH_FSQRT_S|MASK_RM, MASK_FSQRT_S|MASK_RM, match_opcode, 0 },\n+{\"fsqrt.s\",    0, INSN_CLASS_F_OR_ZFINX,   \"D,S,m\",     MATCH_FSQRT_S, MASK_FSQRT_S, match_opcode, 0 },\n+{\"fmin.s\",     0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T\",     MATCH_FMIN_S, MASK_FMIN_S, match_opcode, 0 },\n+{\"fmax.s\",     0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T\",     MATCH_FMAX_S, MASK_FMAX_S, match_opcode, 0 },\n+{\"fmadd.s\",    0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T,R\",   MATCH_FMADD_S|MASK_RM, MASK_FMADD_S|MASK_RM, match_opcode, 0 },\n+{\"fmadd.s\",    0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T,R,m\", MATCH_FMADD_S, MASK_FMADD_S, match_opcode, 0 },\n+{\"fnmadd.s\",   0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T,R\",   MATCH_FNMADD_S|MASK_RM, MASK_FNMADD_S|MASK_RM, match_opcode, 0 },\n+{\"fnmadd.s\",   0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T,R,m\", MATCH_FNMADD_S, MASK_FNMADD_S, match_opcode, 0 },\n+{\"fmsub.s\",    0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T,R\",   MATCH_FMSUB_S|MASK_RM, MASK_FMSUB_S|MASK_RM, match_opcode, 0 },\n+{\"fmsub.s\",    0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T,R,m\", MATCH_FMSUB_S, MASK_FMSUB_S, match_opcode, 0 },\n+{\"fnmsub.s\",   0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T,R\",   MATCH_FNMSUB_S|MASK_RM, MASK_FNMSUB_S|MASK_RM, match_opcode, 0 },\n+{\"fnmsub.s\",   0, INSN_CLASS_F_OR_ZFINX,   \"D,S,T,R,m\", MATCH_FNMSUB_S, MASK_FNMSUB_S, match_opcode, 0 },\n+{\"fcvt.w.s\",   0, INSN_CLASS_F_OR_ZFINX,   \"d,S\",       MATCH_FCVT_W_S|MASK_RM, MASK_FCVT_W_S|MASK_RM, match_opcode, 0 },\n+{\"fcvt.w.s\",   0, INSN_CLASS_F_OR_ZFINX,   \"d,S,m\",     MATCH_FCVT_W_S, MASK_FCVT_W_S, match_opcode, 0 },\n+{\"fcvt.wu.s\",  0, INSN_CLASS_F_OR_ZFINX,   \"d,S\",       MATCH_FCVT_WU_S|MASK_RM, MASK_FCVT_WU_S|MASK_RM, match_opcode, 0 },\n+{\"fcvt.wu.s\",  0, INSN_CLASS_F_OR_ZFINX,   \"d,S,m\",     MATCH_FCVT_WU_S, MASK_FCVT_WU_S, match_opcode, 0 },\n+{\"fcvt.s.w\",   0, INSN_CLASS_F_OR_ZFINX,   \"D,s\",       MATCH_FCVT_S_W|MASK_RM, MASK_FCVT_S_W|MASK_RM, match_opcode, 0 },\n+{\"fcvt.s.w\",   0, INSN_CLASS_F_OR_ZFINX,   \"D,s,m\",     MATCH_FCVT_S_W, MASK_FCVT_S_W, match_opcode, 0 },\n+{\"fcvt.s.wu\",  0, INSN_CLASS_F_OR_ZFINX,   \"D,s\",       MATCH_FCVT_S_WU|MASK_RM, MASK_FCVT_S_W|MASK_RM, match_opcode, 0 },\n+{\"fcvt.s.wu\",  0, INSN_CLASS_F_OR_ZFINX,   \"D,s,m\",     MATCH_FCVT_S_WU, MASK_FCVT_S_WU, match_opcode, 0 },\n+{\"fclass.s\",   0, INSN_CLASS_F_OR_ZFINX,   \"d,S\",       MATCH_FCLASS_S, MASK_FCLASS_S, match_opcode, 0 },\n+{\"feq.s\",      0, INSN_CLASS_F_OR_ZFINX,   \"d,S,T\",     MATCH_FEQ_S, MASK_FEQ_S, match_opcode, 0 },\n+{\"flt.s\",      0, INSN_CLASS_F_OR_ZFINX,   \"d,S,T\",     MATCH_FLT_S, MASK_FLT_S, match_opcode, 0 },\n+{\"fle.s\",      0, INSN_CLASS_F_OR_ZFINX,   \"d,S,T\",     MATCH_FLE_S, MASK_FLE_S, match_opcode, 0 },\n+{\"fgt.s\",      0, INSN_CLASS_F_OR_ZFINX,   \"d,T,S\",     MATCH_FLT_S, MASK_FLT_S, match_opcode, 0 },\n+{\"fge.s\",      0, INSN_CLASS_F_OR_ZFINX,   \"d,T,S\",     MATCH_FLE_S, MASK_FLE_S, match_opcode, 0 },\n+{\"fcvt.l.s\",  64, INSN_CLASS_F_OR_ZFINX,   \"d,S\",       MATCH_FCVT_L_S|MASK_RM, MASK_FCVT_L_S|MASK_RM, match_opcode, 0 },\n+{\"fcvt.l.s\",  64, INSN_CLASS_F_OR_ZFINX,   \"d,S,m\",     MATCH_FCVT_L_S, MASK_FCVT_L_S, match_opcode, 0 },\n+{\"fcvt.lu.s\", 64, INSN_CLASS_F_OR_ZFINX,   \"d,S\",       MATCH_FCVT_LU_S|MASK_RM, MASK_FCVT_LU_S|MASK_RM, match_opcode, 0 },\n+{\"fcvt.lu.s\", 64, INSN_CLASS_F_OR_ZFINX,   \"d,S,m\",     MATCH_FCVT_LU_S, MASK_FCVT_LU_S, match_opcode, 0 },\n+{\"fcvt.s.l\",  64, INSN_CLASS_F_OR_ZFINX,   \"D,s\",       MATCH_FCVT_S_L|MASK_RM, MASK_FCVT_S_L|MASK_RM, match_opcode, 0 },\n+{\"fcvt.s.l\",  64, INSN_CLASS_F_OR_ZFINX,   \"D,s,m\",     MATCH_FCVT_S_L, MASK_FCVT_S_L, match_opcode, 0 },\n+{\"fcvt.s.lu\", 64, INSN_CLASS_F_OR_ZFINX,   \"D,s\",       MATCH_FCVT_S_LU|MASK_RM, MASK_FCVT_S_L|MASK_RM, match_opcode, 0 },\n+{\"fcvt.s.lu\", 64, INSN_CLASS_F_OR_ZFINX,   \"D,s,m\",     MATCH_FCVT_S_LU, MASK_FCVT_S_LU, match_opcode, 0 },\n \n /* Double-precision floating-point instruction subset.  */\n {\"fld\",        0, INSN_CLASS_D_AND_C, \"D,Cn(Cc)\",  MATCH_C_FLDSP, MASK_C_FLDSP, match_opcode, INSN_ALIAS|INSN_DREF|INSN_8_BYTE },\n@@ -657,116 +657,116 @@ const struct riscv_opcode riscv_opcodes[] =\n {\"fsd\",        0, INSN_CLASS_D,   \"T,q(s)\",    MATCH_FSD, MASK_FSD, match_opcode, INSN_DREF|INSN_8_BYTE },\n {\"fsd\",        0, INSN_CLASS_D,   \"T,A,s\",     0, (int) M_FSD, match_never, INSN_MACRO },\n {\"fmv.d\",      0, INSN_CLASS_D,   \"D,U\",       MATCH_FSGNJ_D, MASK_FSGNJ_D, match_rs1_eq_rs2, INSN_ALIAS },\n-{\"fneg.d\",     0, INSN_CLASS_D,   \"D,U\",       MATCH_FSGNJN_D, MASK_FSGNJN_D, match_rs1_eq_rs2, INSN_ALIAS },\n-{\"fabs.d\",     0, INSN_CLASS_D,   \"D,U\",       MATCH_FSGNJX_D, MASK_FSGNJX_D, match_rs1_eq_rs2, INSN_ALIAS },\n-{\"fsgnj.d\",    0, INSN_CLASS_D,   \"D,S,T\",     MATCH_FSGNJ_D, MASK_FSGNJ_D, match_opcode, 0 },\n-{\"fsgnjn.d\",   0, INSN_CLASS_D,   \"D,S,T\",     MATCH_FSGNJN_D, MASK_FSGNJN_D, match_opcode, 0 },\n-{\"fsgnjx.d\",   0, INSN_CLASS_D,   \"D,S,T\",     MATCH_FSGNJX_D, MASK_FSGNJX_D, match_opcode, 0 },\n-{\"fadd.d\",     0, INSN_CLASS_D,   \"D,S,T\",     MATCH_FADD_D|MASK_RM, MASK_FADD_D|MASK_RM, match_opcode, 0 },\n-{\"fadd.d\",     0, INSN_CLASS_D,   \"D,S,T,m\",   MATCH_FADD_D, MASK_FADD_D, match_opcode, 0 },\n-{\"fsub.d\",     0, INSN_CLASS_D,   \"D,S,T\",     MATCH_FSUB_D|MASK_RM, MASK_FSUB_D|MASK_RM, match_opcode, 0 },\n-{\"fsub.d\",     0, INSN_CLASS_D,   \"D,S,T,m\",   MATCH_FSUB_D, MASK_FSUB_D, match_opcode, 0 },\n-{\"fmul.d\",     0, INSN_CLASS_D,   \"D,S,T\",     MATCH_FMUL_D|MASK_RM, MASK_FMUL_D|MASK_RM, match_opcode, 0 },\n-{\"fmul.d\",     0, INSN_CLASS_D,   \"D,S,T,m\",   MATCH_FMUL_D, MASK_FMUL_D, match_opcode, 0 },\n-{\"fdiv.d\",     0, INSN_CLASS_D,   \"D,S,T\",     MATCH_FDIV_D|MASK_RM, MASK_FDIV_D|MASK_RM, match_opcode, 0 },\n-{\"fdiv.d\",     0, INSN_CLASS_D,   \"D,S,T,m\",   MATCH_FDIV_D, MASK_FDIV_D, match_opcode, 0 },\n-{\"fsqrt.d\",    0, INSN_CLASS_D,   \"D,S\",       MATCH_FSQRT_D|MASK_RM, MASK_FSQRT_D|MASK_RM, match_opcode, 0 },\n-{\"fsqrt.d\",    0, INSN_CLASS_D,   \"D,S,m\",     MATCH_FSQRT_D, MASK_FSQRT_D, match_opcode, 0 },\n-{\"fmin.d\",     0, INSN_CLASS_D,   \"D,S,T\",     MATCH_FMIN_D, MASK_FMIN_D, match_opcode, 0 },\n-{\"fmax.d\",     0, INSN_CLASS_D,   \"D,S,T\",     MATCH_FMAX_D, MASK_FMAX_D, match_opcode, 0 },\n-{\"fmadd.d\",    0, INSN_CLASS_D,   \"D,S,T,R\",   MATCH_FMADD_D|MASK_RM, MASK_FMADD_D|MASK_RM, match_opcode, 0 },\n-{\"fmadd.d\",    0, INSN_CLASS_D,   \"D,S,T,R,m\", MATCH_FMADD_D, MASK_FMADD_D, match_opcode, 0 },\n-{\"fnmadd.d\",   0, INSN_CLASS_D,   \"D,S,T,R\",   MATCH_FNMADD_D|MASK_RM, MASK_FNMADD_D|MASK_RM, match_opcode, 0 },\n-{\"fnmadd.d\",   0, INSN_CLASS_D,   \"D,S,T,R,m\", MATCH_FNMADD_D, MASK_FNMADD_D, match_opcode, 0 },\n-{\"fmsub.d\",    0, INSN_CLASS_D,   \"D,S,T,R\",   MATCH_FMSUB_D|MASK_RM, MASK_FMSUB_D|MASK_RM, match_opcode, 0 },\n-{\"fmsub.d\",    0, INSN_CLASS_D,   \"D,S,T,R,m\", MATCH_FMSUB_D, MASK_FMSUB_D, match_opcode, 0 },\n-{\"fnmsub.d\",   0, INSN_CLASS_D,   \"D,S,T,R\",   MATCH_FNMSUB_D|MASK_RM, MASK_FNMSUB_D|MASK_RM, match_opcode, 0 },\n-{\"fnmsub.d\",   0, INSN_CLASS_D,   \"D,S,T,R,m\", MATCH_FNMSUB_D, MASK_FNMSUB_D, match_opcode, 0 },\n-{\"fcvt.w.d\",   0, INSN_CLASS_D,   \"d,S\",       MATCH_FCVT_W_D|MASK_RM, MASK_FCVT_W_D|MASK_RM, match_opcode, 0 },\n-{\"fcvt.w.d\",   0, INSN_CLASS_D,   \"d,S,m\",     MATCH_FCVT_W_D, MASK_FCVT_W_D, match_opcode, 0 },\n-{\"fcvt.wu.d\",  0, INSN_CLASS_D,   \"d,S\",       MATCH_FCVT_WU_D|MASK_RM, MASK_FCVT_WU_D|MASK_RM, match_opcode, 0 },\n-{\"fcvt.wu.d\",  0, INSN_CLASS_D,   \"d,S,m\",     MATCH_FCVT_WU_D, MASK_FCVT_WU_D, match_opcode, 0 },\n-{\"fcvt.d.w\",   0, INSN_CLASS_D,   \"D,s\",       MATCH_FCVT_D_W, MASK_FCVT_D_W|MASK_RM, match_opcode, 0 },\n-{\"fcvt.d.wu\",  0, INSN_CLASS_D,   \"D,s\",       MATCH_FCVT_D_WU, MASK_FCVT_D_WU|MASK_RM, match_opcode, 0 },\n-{\"fcvt.d.s\",   0, INSN_CLASS_D,   \"D,S\",       MATCH_FCVT_D_S, MASK_FCVT_D_S|MASK_RM, match_opcode, 0 },\n-{\"fcvt.s.d\",   0, INSN_CLASS_D,   \"D,S\",       MATCH_FCVT_S_D|MASK_RM, MASK_FCVT_S_D|MASK_RM, match_opcode, 0 },\n-{\"fcvt.s.d\",   0, INSN_CLASS_D,   \"D,S,m\",     MATCH_FCVT_S_D, MASK_FCVT_S_D, match_opcode, 0 },\n-{\"fclass.d\",   0, INSN_CLASS_D,   \"d,S\",       MATCH_FCLASS_D, MASK_FCLASS_D, match_opcode, 0 },\n-{\"feq.d\",      0, INSN_CLASS_D,   \"d,S,T\",     MATCH_FEQ_D, MASK_FEQ_D, match_opcode, 0 },\n-{\"flt.d\",      0, INSN_CLASS_D,   \"d,S,T\",     MATCH_FLT_D, MASK_FLT_D, match_opcode, 0 },\n-{\"fle.d\",      0, INSN_CLASS_D,   \"d,S,T\",     MATCH_FLE_D, MASK_FLE_D, match_opcode, 0 },\n-{\"fgt.d\",      0, INSN_CLASS_D,   \"d,T,S\",     MATCH_FLT_D, MASK_FLT_D, match_opcode, 0 },\n-{\"fge.d\",      0, INSN_CLASS_D,   \"d,T,S\",     MATCH_FLE_D, MASK_FLE_D, match_opcode, 0 },\n+{\"fneg.d\",     0, INSN_CLASS_D_OR_ZDINX,   \"D,U\",       MATCH_FSGNJN_D, MASK_FSGNJN_D, match_rs1_eq_rs2, INSN_ALIAS },\n+{\"fabs.d\",     0, INSN_CLASS_D_OR_ZDINX,   \"D,U\",       MATCH_FSGNJX_D, MASK_FSGNJX_D, match_rs1_eq_rs2, INSN_ALIAS },\n+{\"fsgnj.d\",    0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T\",     MATCH_FSGNJ_D, MASK_FSGNJ_D, match_opcode, 0 },\n+{\"fsgnjn.d\",   0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T\",     MATCH_FSGNJN_D, MASK_FSGNJN_D, match_opcode, 0 },\n+{\"fsgnjx.d\",   0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T\",     MATCH_FSGNJX_D, MASK_FSGNJX_D, match_opcode, 0 },\n+{\"fadd.d\",     0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T\",     MATCH_FADD_D|MASK_RM, MASK_FADD_D|MASK_RM, match_opcode, 0 },\n+{\"fadd.d\",     0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T,m\",   MATCH_FADD_D, MASK_FADD_D, match_opcode, 0 },\n+{\"fsub.d\",     0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T\",     MATCH_FSUB_D|MASK_RM, MASK_FSUB_D|MASK_RM, match_opcode, 0 },\n+{\"fsub.d\",     0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T,m\",   MATCH_FSUB_D, MASK_FSUB_D, match_opcode, 0 },\n+{\"fmul.d\",     0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T\",     MATCH_FMUL_D|MASK_RM, MASK_FMUL_D|MASK_RM, match_opcode, 0 },\n+{\"fmul.d\",     0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T,m\",   MATCH_FMUL_D, MASK_FMUL_D, match_opcode, 0 },\n+{\"fdiv.d\",     0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T\",     MATCH_FDIV_D|MASK_RM, MASK_FDIV_D|MASK_RM, match_opcode, 0 },\n+{\"fdiv.d\",     0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T,m\",   MATCH_FDIV_D, MASK_FDIV_D, match_opcode, 0 },\n+{\"fsqrt.d\",    0, INSN_CLASS_D_OR_ZDINX,   \"D,S\",       MATCH_FSQRT_D|MASK_RM, MASK_FSQRT_D|MASK_RM, match_opcode, 0 },\n+{\"fsqrt.d\",    0, INSN_CLASS_D_OR_ZDINX,   \"D,S,m\",     MATCH_FSQRT_D, MASK_FSQRT_D, match_opcode, 0 },\n+{\"fmin.d\",     0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T\",     MATCH_FMIN_D, MASK_FMIN_D, match_opcode, 0 },\n+{\"fmax.d\",     0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T\",     MATCH_FMAX_D, MASK_FMAX_D, match_opcode, 0 },\n+{\"fmadd.d\",    0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T,R\",   MATCH_FMADD_D|MASK_RM, MASK_FMADD_D|MASK_RM, match_opcode, 0 },\n+{\"fmadd.d\",    0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T,R,m\", MATCH_FMADD_D, MASK_FMADD_D, match_opcode, 0 },\n+{\"fnmadd.d\",   0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T,R\",   MATCH_FNMADD_D|MASK_RM, MASK_FNMADD_D|MASK_RM, match_opcode, 0 },\n+{\"fnmadd.d\",   0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T,R,m\", MATCH_FNMADD_D, MASK_FNMADD_D, match_opcode, 0 },\n+{\"fmsub.d\",    0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T,R\",   MATCH_FMSUB_D|MASK_RM, MASK_FMSUB_D|MASK_RM, match_opcode, 0 },\n+{\"fmsub.d\",    0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T,R,m\", MATCH_FMSUB_D, MASK_FMSUB_D, match_opcode, 0 },\n+{\"fnmsub.d\",   0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T,R\",   MATCH_FNMSUB_D|MASK_RM, MASK_FNMSUB_D|MASK_RM, match_opcode, 0 },\n+{\"fnmsub.d\",   0, INSN_CLASS_D_OR_ZDINX,   \"D,S,T,R,m\", MATCH_FNMSUB_D, MASK_FNMSUB_D, match_opcode, 0 },\n+{\"fcvt.w.d\",   0, INSN_CLASS_D_OR_ZDINX,   \"d,S\",       MATCH_FCVT_W_D|MASK_RM, MASK_FCVT_W_D|MASK_RM, match_opcode, 0 },\n+{\"fcvt.w.d\",   0, INSN_CLASS_D_OR_ZDINX,   \"d,S,m\",     MATCH_FCVT_W_D, MASK_FCVT_W_D, match_opcode, 0 },\n+{\"fcvt.wu.d\",  0, INSN_CLASS_D_OR_ZDINX,   \"d,S\",       MATCH_FCVT_WU_D|MASK_RM, MASK_FCVT_WU_D|MASK_RM, match_opcode, 0 },\n+{\"fcvt.wu.d\",  0, INSN_CLASS_D_OR_ZDINX,   \"d,S,m\",     MATCH_FCVT_WU_D, MASK_FCVT_WU_D, match_opcode, 0 },\n+{\"fcvt.d.w\",   0, INSN_CLASS_D_OR_ZDINX,   \"D,s\",       MATCH_FCVT_D_W, MASK_FCVT_D_W|MASK_RM, match_opcode, 0 },\n+{\"fcvt.d.wu\",  0, INSN_CLASS_D_OR_ZDINX,   \"D,s\",       MATCH_FCVT_D_WU, MASK_FCVT_D_WU|MASK_RM, match_opcode, 0 },\n+{\"fcvt.d.s\",   0, INSN_CLASS_D_OR_ZDINX,   \"D,S\",       MATCH_FCVT_D_S, MASK_FCVT_D_S|MASK_RM, match_opcode, 0 },\n+{\"fcvt.s.d\",   0, INSN_CLASS_D_OR_ZDINX,   \"D,S\",       MATCH_FCVT_S_D|MASK_RM, MASK_FCVT_S_D|MASK_RM, match_opcode, 0 },\n+{\"fcvt.s.d\",   0, INSN_CLASS_D_OR_ZDINX,   \"D,S,m\",     MATCH_FCVT_S_D, MASK_FCVT_S_D, match_opcode, 0 },\n+{\"fclass.d\",   0, INSN_CLASS_D_OR_ZDINX,   \"d,S\",       MATCH_FCLASS_D, MASK_FCLASS_D, match_opcode, 0 },\n+{\"feq.d\",      0, INSN_CLASS_D_OR_ZDINX,   \"d,S,T\",     MATCH_FEQ_D, MASK_FEQ_D, match_opcode, 0 },\n+{\"flt.d\",      0, INSN_CLASS_D_OR_ZDINX,   \"d,S,T\",     MATCH_FLT_D, MASK_FLT_D, match_opcode, 0 },\n+{\"fle.d\",      0, INSN_CLASS_D_OR_ZDINX,   \"d,S,T\",     MATCH_FLE_D, MASK_FLE_D, match_opcode, 0 },\n+{\"fgt.d\",      0, INSN_CLASS_D_OR_ZDINX,   \"d,T,S\",     MATCH_FLT_D, MASK_FLT_D, match_opcode, 0 },\n+{\"fge.d\",      0, INSN_CLASS_D_OR_ZDINX,   \"d,T,S\",     MATCH_FLE_D, MASK_FLE_D, match_opcode, 0 },\n {\"fmv.x.d\",   64, INSN_CLASS_D,   \"d,S\",       MATCH_FMV_X_D, MASK_FMV_X_D, match_opcode, 0 },\n {\"fmv.d.x\",   64, INSN_CLASS_D,   \"D,s\",       MATCH_FMV_D_X, MASK_FMV_D_X, match_opcode, 0 },\n-{\"fcvt.l.d\",  64, INSN_CLASS_D,   \"d,S\",       MATCH_FCVT_L_D|MASK_RM, MASK_FCVT_L_D|MASK_RM, match_opcode, 0 },\n-{\"fcvt.l.d\",  64, INSN_CLASS_D,   \"d,S,m\",     MATCH_FCVT_L_D, MASK_FCVT_L_D, match_opcode, 0 },\n-{\"fcvt.lu.d\", 64, INSN_CLASS_D,   \"d,S\",       MATCH_FCVT_LU_D|MASK_RM, MASK_FCVT_LU_D|MASK_RM, match_opcode, 0 },\n-{\"fcvt.lu.d\", 64, INSN_CLASS_D,   \"d,S,m\",     MATCH_FCVT_LU_D, MASK_FCVT_LU_D, match_opcode, 0 },\n-{\"fcvt.d.l\",  64, INSN_CLASS_D,   \"D,s\",       MATCH_FCVT_D_L|MASK_RM, MASK_FCVT_D_L|MASK_RM, match_opcode, 0 },\n-{\"fcvt.d.l\",  64, INSN_CLASS_D,   \"D,s,m\",     MATCH_FCVT_D_L, MASK_FCVT_D_L, match_opcode, 0 },\n-{\"fcvt.d.lu\", 64, INSN_CLASS_D,   \"D,s\",       MATCH_FCVT_D_LU|MASK_RM, MASK_FCVT_D_L|MASK_RM, match_opcode, 0 },\n-{\"fcvt.d.lu\", 64, INSN_CLASS_D,   \"D,s,m\",     MATCH_FCVT_D_LU, MASK_FCVT_D_LU, match_opcode, 0 },\n+{\"fcvt.l.d\",  64, INSN_CLASS_D_OR_ZDINX,   \"d,S\",       MATCH_FCVT_L_D|MASK_RM, MASK_FCVT_L_D|MASK_RM, match_opcode, 0 },\n+{\"fcvt.l.d\",  64, INSN_CLASS_D_OR_ZDINX,   \"d,S,m\",     MATCH_FCVT_L_D, MASK_FCVT_L_D, match_opcode, 0 },\n+{\"fcvt.lu.d\", 64, INSN_CLASS_D_OR_ZDINX,   \"d,S\",       MATCH_FCVT_LU_D|MASK_RM, MASK_FCVT_LU_D|MASK_RM, match_opcode, 0 },\n+{\"fcvt.lu.d\", 64, INSN_CLASS_D_OR_ZDINX,   \"d,S,m\",     MATCH_FCVT_LU_D, MASK_FCVT_LU_D, match_opcode, 0 },\n+{\"fcvt.d.l\",  64, INSN_CLASS_D_OR_ZDINX,   \"D,s\",       MATCH_FCVT_D_L|MASK_RM, MASK_FCVT_D_L|MASK_RM, match_opcode, 0 },\n+{\"fcvt.d.l\",  64, INSN_CLASS_D_OR_ZDINX,   \"D,s,m\",     MATCH_FCVT_D_L, MASK_FCVT_D_L, match_opcode, 0 },\n+{\"fcvt.d.lu\", 64, INSN_CLASS_D_OR_ZDINX,   \"D,s\",       MATCH_FCVT_D_LU|MASK_RM, MASK_FCVT_D_L|MASK_RM, match_opcode, 0 },\n+{\"fcvt.d.lu\", 64, INSN_CLASS_D_OR_ZDINX,   \"D,s,m\",     MATCH_FCVT_D_LU, MASK_FCVT_D_LU, match_opcode, 0 },\n \n /* Quad-precision floating-point instruction subset.  */\n {\"flq\",        0, INSN_CLASS_Q,   \"D,o(s)\",    MATCH_FLQ, MASK_FLQ, match_opcode, INSN_DREF|INSN_16_BYTE },\n {\"flq\",        0, INSN_CLASS_Q,   \"D,A,s\",     0, (int) M_FLQ, match_never, INSN_MACRO },\n {\"fsq\",        0, INSN_CLASS_Q,   \"T,q(s)\",    MATCH_FSQ, MASK_FSQ, match_opcode, INSN_DREF|INSN_16_BYTE },\n {\"fsq\",        0, INSN_CLASS_Q,   \"T,A,s\",     0, (int) M_FSQ, match_never, INSN_MACRO },\n {\"fmv.q\",      0, INSN_CLASS_Q,   \"D,U\",       MATCH_FSGNJ_Q, MASK_FSGNJ_Q, match_rs1_eq_rs2, INSN_ALIAS },\n-{\"fneg.q\",     0, INSN_CLASS_Q,   \"D,U\",       MATCH_FSGNJN_Q, MASK_FSGNJN_Q, match_rs1_eq_rs2, INSN_ALIAS },\n-{\"fabs.q\",     0, INSN_CLASS_Q,   \"D,U\",       MATCH_FSGNJX_Q, MASK_FSGNJX_Q, match_rs1_eq_rs2, INSN_ALIAS },\n-{\"fsgnj.q\",    0, INSN_CLASS_Q,   \"D,S,T\",     MATCH_FSGNJ_Q, MASK_FSGNJ_Q, match_opcode, 0 },\n-{\"fsgnjn.q\",   0, INSN_CLASS_Q,   \"D,S,T\",     MATCH_FSGNJN_Q, MASK_FSGNJN_Q, match_opcode, 0 },\n-{\"fsgnjx.q\",   0, INSN_CLASS_Q,   \"D,S,T\",     MATCH_FSGNJX_Q, MASK_FSGNJX_Q, match_opcode, 0 },\n-{\"fadd.q\",     0, INSN_CLASS_Q,   \"D,S,T\",     MATCH_FADD_Q|MASK_RM, MASK_FADD_Q|MASK_RM, match_opcode, 0 },\n-{\"fadd.q\",     0, INSN_CLASS_Q,   \"D,S,T,m\",   MATCH_FADD_Q, MASK_FADD_Q, match_opcode, 0 },\n-{\"fsub.q\",     0, INSN_CLASS_Q,   \"D,S,T\",     MATCH_FSUB_Q|MASK_RM, MASK_FSUB_Q|MASK_RM, match_opcode, 0 },\n-{\"fsub.q\",     0, INSN_CLASS_Q,   \"D,S,T,m\",   MATCH_FSUB_Q, MASK_FSUB_Q, match_opcode, 0 },\n-{\"fmul.q\",     0, INSN_CLASS_Q,   \"D,S,T\",     MATCH_FMUL_Q|MASK_RM, MASK_FMUL_Q|MASK_RM, match_opcode, 0 },\n-{\"fmul.q\",     0, INSN_CLASS_Q,   \"D,S,T,m\",   MATCH_FMUL_Q, MASK_FMUL_Q, match_opcode, 0 },\n-{\"fdiv.q\",     0, INSN_CLASS_Q,   \"D,S,T\",     MATCH_FDIV_Q|MASK_RM, MASK_FDIV_Q|MASK_RM, match_opcode, 0 },\n-{\"fdiv.q\",     0, INSN_CLASS_Q,   \"D,S,T,m\",   MATCH_FDIV_Q, MASK_FDIV_Q, match_opcode, 0 },\n-{\"fsqrt.q\",    0, INSN_CLASS_Q,   \"D,S\",       MATCH_FSQRT_Q|MASK_RM, MASK_FSQRT_Q|MASK_RM, match_opcode, 0 },\n-{\"fsqrt.q\",    0, INSN_CLASS_Q,   \"D,S,m\",     MATCH_FSQRT_Q, MASK_FSQRT_Q, match_opcode, 0 },\n-{\"fmin.q\",     0, INSN_CLASS_Q,   \"D,S,T\",     MATCH_FMIN_Q, MASK_FMIN_Q, match_opcode, 0 },\n-{\"fmax.q\",     0, INSN_CLASS_Q,   \"D,S,T\",     MATCH_FMAX_Q, MASK_FMAX_Q, match_opcode, 0 },\n-{\"fmadd.q\",    0, INSN_CLASS_Q,   \"D,S,T,R\",   MATCH_FMADD_Q|MASK_RM, MASK_FMADD_Q|MASK_RM, match_opcode, 0 },\n-{\"fmadd.q\",    0, INSN_CLASS_Q,   \"D,S,T,R,m\", MATCH_FMADD_Q, MASK_FMADD_Q, match_opcode, 0 },\n-{\"fnmadd.q\",   0, INSN_CLASS_Q,   \"D,S,T,R\",   MATCH_FNMADD_Q|MASK_RM, MASK_FNMADD_Q|MASK_RM, match_opcode, 0 },\n-{\"fnmadd.q\",   0, INSN_CLASS_Q,   \"D,S,T,R,m\", MATCH_FNMADD_Q, MASK_FNMADD_Q, match_opcode, 0 },\n-{\"fmsub.q\",    0, INSN_CLASS_Q,   \"D,S,T,R\",   MATCH_FMSUB_Q|MASK_RM, MASK_FMSUB_Q|MASK_RM, match_opcode, 0 },\n-{\"fmsub.q\",    0, INSN_CLASS_Q,   \"D,S,T,R,m\", MATCH_FMSUB_Q, MASK_FMSUB_Q, match_opcode, 0 },\n-{\"fnmsub.q\",   0, INSN_CLASS_Q,   \"D,S,T,R\",   MATCH_FNMSUB_Q|MASK_RM, MASK_FNMSUB_Q|MASK_RM, match_opcode, 0 },\n-{\"fnmsub.q\",   0, INSN_CLASS_Q,   \"D,S,T,R,m\", MATCH_FNMSUB_Q, MASK_FNMSUB_Q, match_opcode, 0 },\n-{\"fcvt.w.q\",   0, INSN_CLASS_Q,   \"d,S\",       MATCH_FCVT_W_Q|MASK_RM, MASK_FCVT_W_Q|MASK_RM, match_opcode, 0 },\n-{\"fcvt.w.q\",   0, INSN_CLASS_Q,   \"d,S,m\",     MATCH_FCVT_W_Q, MASK_FCVT_W_Q, match_opcode, 0 },\n-{\"fcvt.wu.q\",  0, INSN_CLASS_Q,   \"d,S\",       MATCH_FCVT_WU_Q|MASK_RM, MASK_FCVT_WU_Q|MASK_RM, match_opcode, 0 },\n-{\"fcvt.wu.q\",  0, INSN_CLASS_Q,   \"d,S,m\",     MATCH_FCVT_WU_Q, MASK_FCVT_WU_Q, match_opcode, 0 },\n-{\"fcvt.q.w\",   0, INSN_CLASS_Q,   \"D,s\",       MATCH_FCVT_Q_W, MASK_FCVT_Q_W|MASK_RM, match_opcode, 0 },\n-{\"fcvt.q.wu\",  0, INSN_CLASS_Q,   \"D,s\",       MATCH_FCVT_Q_WU, MASK_FCVT_Q_WU|MASK_RM, match_opcode, 0 },\n-{\"fcvt.q.s\",   0, INSN_CLASS_Q,   \"D,S\",       MATCH_FCVT_Q_S, MASK_FCVT_Q_S|MASK_RM, match_opcode, 0 },\n-{\"fcvt.q.d\",   0, INSN_CLASS_Q,   \"D,S\",       MATCH_FCVT_Q_D, MASK_FCVT_Q_D|MASK_RM, match_opcode, 0 },\n-{\"fcvt.s.q\",   0, INSN_CLASS_Q,   \"D,S\",       MATCH_FCVT_S_Q|MASK_RM, MASK_FCVT_S_Q|MASK_RM, match_opcode, 0 },\n-{\"fcvt.s.q\",   0, INSN_CLASS_Q,   \"D,S,m\",     MATCH_FCVT_S_Q, MASK_FCVT_S_Q, match_opcode, 0 },\n-{\"fcvt.d.q\",   0, INSN_CLASS_Q,   \"D,S\",       MATCH_FCVT_D_Q|MASK_RM, MASK_FCVT_D_Q|MASK_RM, match_opcode, 0 },\n-{\"fcvt.d.q\",   0, INSN_CLASS_Q,   \"D,S,m\",     MATCH_FCVT_D_Q, MASK_FCVT_D_Q, match_opcode, 0 },\n-{\"fclass.q\",   0, INSN_CLASS_Q,   \"d,S\",       MATCH_FCLASS_Q, MASK_FCLASS_Q, match_opcode, 0 },\n-{\"feq.q\",      0, INSN_CLASS_Q,   \"d,S,T\",     MATCH_FEQ_Q, MASK_FEQ_Q, match_opcode, 0 },\n-{\"flt.q\",      0, INSN_CLASS_Q,   \"d,S,T\",     MATCH_FLT_Q, MASK_FLT_Q, match_opcode, 0 },\n-{\"fle.q\",      0, INSN_CLASS_Q,   \"d,S,T\",     MATCH_FLE_Q, MASK_FLE_Q, match_opcode, 0 },\n-{\"fgt.q\",      0, INSN_CLASS_Q,   \"d,T,S\",     MATCH_FLT_Q, MASK_FLT_Q, match_opcode, 0 },\n-{\"fge.q\",      0, INSN_CLASS_Q,   \"d,T,S\",     MATCH_FLE_Q, MASK_FLE_Q, match_opcode, 0 },\n+{\"fneg.q\",     0, INSN_CLASS_Q_OR_ZQINX,   \"D,U\",       MATCH_FSGNJN_Q, MASK_FSGNJN_Q, match_rs1_eq_rs2, INSN_ALIAS },\n+{\"fabs.q\",     0, INSN_CLASS_Q_OR_ZQINX,   \"D,U\",       MATCH_FSGNJX_Q, MASK_FSGNJX_Q, match_rs1_eq_rs2, INSN_ALIAS },\n+{\"fsgnj.q\",    0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T\",     MATCH_FSGNJ_Q, MASK_FSGNJ_Q, match_opcode, 0 },\n+{\"fsgnjn.q\",   0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T\",     MATCH_FSGNJN_Q, MASK_FSGNJN_Q, match_opcode, 0 },\n+{\"fsgnjx.q\",   0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T\",     MATCH_FSGNJX_Q, MASK_FSGNJX_Q, match_opcode, 0 },\n+{\"fadd.q\",     0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T\",     MATCH_FADD_Q|MASK_RM, MASK_FADD_Q|MASK_RM, match_opcode, 0 },\n+{\"fadd.q\",     0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T,m\",   MATCH_FADD_Q, MASK_FADD_Q, match_opcode, 0 },\n+{\"fsub.q\",     0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T\",     MATCH_FSUB_Q|MASK_RM, MASK_FSUB_Q|MASK_RM, match_opcode, 0 },\n+{\"fsub.q\",     0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T,m\",   MATCH_FSUB_Q, MASK_FSUB_Q, match_opcode, 0 },\n+{\"fmul.q\",     0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T\",     MATCH_FMUL_Q|MASK_RM, MASK_FMUL_Q|MASK_RM, match_opcode, 0 },\n+{\"fmul.q\",     0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T,m\",   MATCH_FMUL_Q, MASK_FMUL_Q, match_opcode, 0 },\n+{\"fdiv.q\",     0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T\",     MATCH_FDIV_Q|MASK_RM, MASK_FDIV_Q|MASK_RM, match_opcode, 0 },\n+{\"fdiv.q\",     0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T,m\",   MATCH_FDIV_Q, MASK_FDIV_Q, match_opcode, 0 },\n+{\"fsqrt.q\",    0, INSN_CLASS_Q_OR_ZQINX,   \"D,S\",       MATCH_FSQRT_Q|MASK_RM, MASK_FSQRT_Q|MASK_RM, match_opcode, 0 },\n+{\"fsqrt.q\",    0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,m\",     MATCH_FSQRT_Q, MASK_FSQRT_Q, match_opcode, 0 },\n+{\"fmin.q\",     0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T\",     MATCH_FMIN_Q, MASK_FMIN_Q, match_opcode, 0 },\n+{\"fmax.q\",     0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T\",     MATCH_FMAX_Q, MASK_FMAX_Q, match_opcode, 0 },\n+{\"fmadd.q\",    0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T,R\",   MATCH_FMADD_Q|MASK_RM, MASK_FMADD_Q|MASK_RM, match_opcode, 0 },\n+{\"fmadd.q\",    0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T,R,m\", MATCH_FMADD_Q, MASK_FMADD_Q, match_opcode, 0 },\n+{\"fnmadd.q\",   0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T,R\",   MATCH_FNMADD_Q|MASK_RM, MASK_FNMADD_Q|MASK_RM, match_opcode, 0 },\n+{\"fnmadd.q\",   0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T,R,m\", MATCH_FNMADD_Q, MASK_FNMADD_Q, match_opcode, 0 },\n+{\"fmsub.q\",    0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T,R\",   MATCH_FMSUB_Q|MASK_RM, MASK_FMSUB_Q|MASK_RM, match_opcode, 0 },\n+{\"fmsub.q\",    0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T,R,m\", MATCH_FMSUB_Q, MASK_FMSUB_Q, match_opcode, 0 },\n+{\"fnmsub.q\",   0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T,R\",   MATCH_FNMSUB_Q|MASK_RM, MASK_FNMSUB_Q|MASK_RM, match_opcode, 0 },\n+{\"fnmsub.q\",   0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,T,R,m\", MATCH_FNMSUB_Q, MASK_FNMSUB_Q, match_opcode, 0 },\n+{\"fcvt.w.q\",   0, INSN_CLASS_Q_OR_ZQINX,   \"d,S\",       MATCH_FCVT_W_Q|MASK_RM, MASK_FCVT_W_Q|MASK_RM, match_opcode, 0 },\n+{\"fcvt.w.q\",   0, INSN_CLASS_Q_OR_ZQINX,   \"d,S,m\",     MATCH_FCVT_W_Q, MASK_FCVT_W_Q, match_opcode, 0 },\n+{\"fcvt.wu.q\",  0, INSN_CLASS_Q_OR_ZQINX,   \"d,S\",       MATCH_FCVT_WU_Q|MASK_RM, MASK_FCVT_WU_Q|MASK_RM, match_opcode, 0 },\n+{\"fcvt.wu.q\",  0, INSN_CLASS_Q_OR_ZQINX,   \"d,S,m\",     MATCH_FCVT_WU_Q, MASK_FCVT_WU_Q, match_opcode, 0 },\n+{\"fcvt.q.w\",   0, INSN_CLASS_Q_OR_ZQINX,   \"D,s\",       MATCH_FCVT_Q_W, MASK_FCVT_Q_W|MASK_RM, match_opcode, 0 },\n+{\"fcvt.q.wu\",  0, INSN_CLASS_Q_OR_ZQINX,   \"D,s\",       MATCH_FCVT_Q_WU, MASK_FCVT_Q_WU|MASK_RM, match_opcode, 0 },\n+{\"fcvt.q.s\",   0, INSN_CLASS_Q_OR_ZQINX,   \"D,S\",       MATCH_FCVT_Q_S, MASK_FCVT_Q_S|MASK_RM, match_opcode, 0 },\n+{\"fcvt.q.d\",   0, INSN_CLASS_Q_OR_ZQINX,   \"D,S\",       MATCH_FCVT_Q_D, MASK_FCVT_Q_D|MASK_RM, match_opcode, 0 },\n+{\"fcvt.s.q\",   0, INSN_CLASS_Q_OR_ZQINX,   \"D,S\",       MATCH_FCVT_S_Q|MASK_RM, MASK_FCVT_S_Q|MASK_RM, match_opcode, 0 },\n+{\"fcvt.s.q\",   0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,m\",     MATCH_FCVT_S_Q, MASK_FCVT_S_Q, match_opcode, 0 },\n+{\"fcvt.d.q\",   0, INSN_CLASS_Q_OR_ZQINX,   \"D,S\",       MATCH_FCVT_D_Q|MASK_RM, MASK_FCVT_D_Q|MASK_RM, match_opcode, 0 },\n+{\"fcvt.d.q\",   0, INSN_CLASS_Q_OR_ZQINX,   \"D,S,m\",     MATCH_FCVT_D_Q, MASK_FCVT_D_Q, match_opcode, 0 },\n+{\"fclass.q\",   0, INSN_CLASS_Q_OR_ZQINX,   \"d,S\",       MATCH_FCLASS_Q, MASK_FCLASS_Q, match_opcode, 0 },\n+{\"feq.q\",      0, INSN_CLASS_Q_OR_ZQINX,   \"d,S,T\",     MATCH_FEQ_Q, MASK_FEQ_Q, match_opcode, 0 },\n+{\"flt.q\",      0, INSN_CLASS_Q_OR_ZQINX,   \"d,S,T\",     MATCH_FLT_Q, MASK_FLT_Q, match_opcode, 0 },\n+{\"fle.q\",      0, INSN_CLASS_Q_OR_ZQINX,   \"d,S,T\",     MATCH_FLE_Q, MASK_FLE_Q, match_opcode, 0 },\n+{\"fgt.q\",      0, INSN_CLASS_Q_OR_ZQINX,   \"d,T,S\",     MATCH_FLT_Q, MASK_FLT_Q, match_opcode, 0 },\n+{\"fge.q\",      0, INSN_CLASS_Q_OR_ZQINX,   \"d,T,S\",     MATCH_FLE_Q, MASK_FLE_Q, match_opcode, 0 },\n {\"fmv.x.q\",   64, INSN_CLASS_Q,   \"d,S\",       MATCH_FMV_X_Q, MASK_FMV_X_Q, match_opcode, 0 },\n {\"fmv.q.x\",   64, INSN_CLASS_Q,   \"D,s\",       MATCH_FMV_Q_X, MASK_FMV_Q_X, match_opcode, 0 },\n-{\"fcvt.l.q\",  64, INSN_CLASS_Q,   \"d,S\",       MATCH_FCVT_L_Q|MASK_RM, MASK_FCVT_L_Q|MASK_RM, match_opcode, 0 },\n-{\"fcvt.l.q\",  64, INSN_CLASS_Q,   \"d,S,m\",     MATCH_FCVT_L_Q, MASK_FCVT_L_Q, match_opcode, 0 },\n-{\"fcvt.lu.q\", 64, INSN_CLASS_Q,   \"d,S\",       MATCH_FCVT_LU_Q|MASK_RM, MASK_FCVT_LU_Q|MASK_RM, match_opcode, 0 },\n-{\"fcvt.lu.q\", 64, INSN_CLASS_Q,   \"d,S,m\",     MATCH_FCVT_LU_Q, MASK_FCVT_LU_Q, match_opcode, 0 },\n-{\"fcvt.q.l\",  64, INSN_CLASS_Q,   \"D,s\",       MATCH_FCVT_Q_L|MASK_RM, MASK_FCVT_Q_L|MASK_RM, match_opcode, 0 },\n-{\"fcvt.q.l\",  64, INSN_CLASS_Q,   \"D,s,m\",     MATCH_FCVT_Q_L, MASK_FCVT_Q_L, match_opcode, 0 },\n-{\"fcvt.q.lu\", 64, INSN_CLASS_Q,   \"D,s\",       MATCH_FCVT_Q_LU|MASK_RM, MASK_FCVT_Q_L|MASK_RM, match_opcode, 0 },\n-{\"fcvt.q.lu\", 64, INSN_CLASS_Q,   \"D,s,m\",     MATCH_FCVT_Q_LU, MASK_FCVT_Q_LU, match_opcode, 0 },\n+{\"fcvt.l.q\",  64, INSN_CLASS_Q_OR_ZQINX,   \"d,S\",       MATCH_FCVT_L_Q|MASK_RM, MASK_FCVT_L_Q|MASK_RM, match_opcode, 0 },\n+{\"fcvt.l.q\",  64, INSN_CLASS_Q_OR_ZQINX,   \"d,S,m\",     MATCH_FCVT_L_Q, MASK_FCVT_L_Q, match_opcode, 0 },\n+{\"fcvt.lu.q\", 64, INSN_CLASS_Q_OR_ZQINX,   \"d,S\",       MATCH_FCVT_LU_Q|MASK_RM, MASK_FCVT_LU_Q|MASK_RM, match_opcode, 0 },\n+{\"fcvt.lu.q\", 64, INSN_CLASS_Q_OR_ZQINX,   \"d,S,m\",     MATCH_FCVT_LU_Q, MASK_FCVT_LU_Q, match_opcode, 0 },\n+{\"fcvt.q.l\",  64, INSN_CLASS_Q_OR_ZQINX,   \"D,s\",       MATCH_FCVT_Q_L|MASK_RM, MASK_FCVT_Q_L|MASK_RM, match_opcode, 0 },\n+{\"fcvt.q.l\",  64, INSN_CLASS_Q_OR_ZQINX,   \"D,s,m\",     MATCH_FCVT_Q_L, MASK_FCVT_Q_L, match_opcode, 0 },\n+{\"fcvt.q.lu\", 64, INSN_CLASS_Q_OR_ZQINX,   \"D,s\",       MATCH_FCVT_Q_LU|MASK_RM, MASK_FCVT_Q_L|MASK_RM, match_opcode, 0 },\n+{\"fcvt.q.lu\", 64, INSN_CLASS_Q_OR_ZQINX,   \"D,s,m\",     MATCH_FCVT_Q_LU, MASK_FCVT_Q_LU, match_opcode, 0 },\n \n /* Compressed instructions.  */\n {\"c.unimp\",    0, INSN_CLASS_C,   \"\",          0, 0xffffU,  match_opcode, 0 },"
    }
  ]
}