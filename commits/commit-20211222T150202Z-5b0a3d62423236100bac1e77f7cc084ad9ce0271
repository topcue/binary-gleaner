{
  "sha": "5b0a3d62423236100bac1e77f7cc084ad9ce0271",
  "node_id": "C_kwDOANOeidoAKDViMGEzZDYyNDIzMjM2MTAwYmFjMWU3N2Y3Y2MwODRhZDljZTAyNzE",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2021-11-12T10:30:27Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "aburgess@redhat.com",
      "date": "2021-12-22T15:02:02Z"
    },
    "message": "gdb: add threads debugging switch\n\nAdd new commands:\n\n  set debug threads on|off\n  show debug threads\n\nPrints additional debug information relating to thread creation and\ndeletion.\n\nGDB already announces when threads are created of course.... most of\nthe time, but sometimes threads are added silently, in which case this\ndebug message is the only mechanism to see the thread being added.\nAlso, though GDB does announce when a thread exits, it doesn't\nannounce when the thread object is deleted, I've added a debug message\nfor that.\n\nAdditionally, having message printed through the debug system will\ncause the messages to be nested to an appropriate depth when other\ndebug sub-systems are turned on (especially things like `infrun` and\n`lin-lwp`).",
    "tree": {
      "sha": "20b00bb936aa1c35f8281ddceba9d47e6d9543c3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/20b00bb936aa1c35f8281ddceba9d47e6d9543c3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5b0a3d62423236100bac1e77f7cc084ad9ce0271",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b0a3d62423236100bac1e77f7cc084ad9ce0271",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5b0a3d62423236100bac1e77f7cc084ad9ce0271",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b0a3d62423236100bac1e77f7cc084ad9ce0271/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "85adb21d04edea0c7b0408a9660d5a9a5aca9ae2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85adb21d04edea0c7b0408a9660d5a9a5aca9ae2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/85adb21d04edea0c7b0408a9660d5a9a5aca9ae2"
    }
  ],
  "stats": {
    "total": 63,
    "additions": 63,
    "deletions": 0
  },
  "files": [
    {
      "sha": "1e4afa91bc5931446e7d4bc45c45b485b0884749",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b0a3d62423236100bac1e77f7cc084ad9ce0271/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b0a3d62423236100bac1e77f7cc084ad9ce0271/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=5b0a3d62423236100bac1e77f7cc084ad9ce0271",
      "patch": "@@ -60,6 +60,10 @@ exit\n   You can now exit GDB by using the new command \"exit\", in addition to\n   the existing \"quit\" command.\n \n+set debug threads on|off\n+show debug threads\n+  Print additional debug messages about thread creation and deletion.\n+\n * Changed commands\n \n maint packet"
    },
    {
      "sha": "2d3414175c1a3183a55544e8078cb88a115c42c2",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b0a3d62423236100bac1e77f7cc084ad9ce0271/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b0a3d62423236100bac1e77f7cc084ad9ce0271/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=5b0a3d62423236100bac1e77f7cc084ad9ce0271",
      "patch": "@@ -3899,6 +3899,14 @@ Display current libthread_db search path.\n @itemx show debug libthread-db\n Turns on or off display of @code{libthread_db}-related events.\n Use @code{1} to enable, @code{0} to disable.\n+\n+@kindex set debug threads\n+@kindex show debug threads\n+@cindex debugging @code{threads}\n+@item set debug threads @r{[}on@r{|}off@r{]}\n+@itemx show debug threads\n+When @samp{on} @value{GDBN} will print additional messages when\n+threads are created and deleted.\n @end table\n \n @node Forks"
    },
    {
      "sha": "66c525b42a7d07693659a541ab968df1a5fcf44f",
      "filename": "gdb/gdbthread.h",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b0a3d62423236100bac1e77f7cc084ad9ce0271/gdb/gdbthread.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b0a3d62423236100bac1e77f7cc084ad9ce0271/gdb/gdbthread.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbthread.h?ref=5b0a3d62423236100bac1e77f7cc084ad9ce0271",
      "patch": "@@ -38,6 +38,16 @@ struct symtab;\n struct inferior;\n struct process_stratum_target;\n \n+/* When true, print debug messages related to GDB thread creation and\n+   deletion.  */\n+\n+extern bool debug_threads;\n+\n+/* Print a \"threads\" debug statement.  */\n+\n+#define threads_debug_printf(fmt, ...) \\\n+  debug_prefixed_printf_cond (debug_threads, \"threads\", fmt, ##__VA_ARGS__)\n+\n /* Frontend view of the thread state.  Possible extensions: stepping,\n    finishing, until(ling),...\n \n@@ -235,6 +245,7 @@ class thread_info : public refcounted_object,\n {\n public:\n   explicit thread_info (inferior *inf, ptid_t ptid);\n+  ~thread_info ();\n \n   bool deletable () const;\n "
    },
    {
      "sha": "72b7c6181ad14fdbb2a35b4026cb4b84164a454f",
      "filename": "gdb/inferior.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b0a3d62423236100bac1e77f7cc084ad9ce0271/gdb/inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b0a3d62423236100bac1e77f7cc084ad9ce0271/gdb/inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.c?ref=5b0a3d62423236100bac1e77f7cc084ad9ce0271",
      "patch": "@@ -179,6 +179,8 @@ inferior::clear_thread_list (bool silent)\n {\n   thread_list.clear_and_dispose ([=] (thread_info *thr)\n     {\n+      threads_debug_printf (\"deleting thread %s, silent = %d\",\n+\t\t\t    thr->ptid.to_string ().c_str (), silent);\n       set_thread_exited (thr, silent);\n       if (thr->deletable ())\n \tdelete thr;"
    },
    {
      "sha": "ebaed1c6ca429ea878ece84a79d369bdfa27b590",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b0a3d62423236100bac1e77f7cc084ad9ce0271/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b0a3d62423236100bac1e77f7cc084ad9ce0271/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=5b0a3d62423236100bac1e77f7cc084ad9ce0271",
      "patch": "@@ -49,6 +49,19 @@\n #include \"inline-frame.h\"\n #include \"stack.h\"\n \n+/* See gdbthread.h.  */\n+\n+bool debug_threads = false;\n+\n+/* Implement 'show debug threads'.  */\n+\n+static void\n+show_debug_threads (struct ui_file *file, int from_tty,\n+\t\t    struct cmd_list_element *c, const char *value)\n+{\n+  fprintf_filtered (file, _(\"Thread debugging is \\\"%s\\\".\\n\"), value);\n+}\n+\n /* Definition of struct thread_info exported to gdbthread.h.  */\n \n /* Prototypes for local functions.  */\n@@ -234,6 +247,9 @@ new_thread (struct inferior *inf, ptid_t ptid)\n {\n   thread_info *tp = new thread_info (inf, ptid);\n \n+  threads_debug_printf (\"creating a new thread object, inferior %d, ptid %s\",\n+\t\t\tinf->num, ptid.to_string ().c_str ());\n+\n   inf->thread_list.push_back (*tp);\n \n   /* A thread with this ptid should not exist in the map yet.  */\n@@ -251,6 +267,10 @@ add_thread_silent (process_stratum_target *targ, ptid_t ptid)\n \n   inferior *inf = find_inferior_ptid (targ, ptid);\n \n+  threads_debug_printf (\"add thread to inferior %d, ptid %s, target %s\",\n+\t\t\tinf->num, ptid.to_string ().c_str (),\n+\t\t\ttarg->shortname ());\n+\n   /* We may have an old thread with the same id in the thread list.\n      If we do, it must be dead, otherwise we wouldn't be adding a new\n      thread with the same id.  The OS is reusing this id --- delete\n@@ -302,6 +322,13 @@ thread_info::thread_info (struct inferior *inf_, ptid_t ptid_)\n \n /* See gdbthread.h.  */\n \n+thread_info::~thread_info ()\n+{\n+  threads_debug_printf (\"thread %s\", this->ptid.to_string ().c_str ());\n+}\n+\n+/* See gdbthread.h.  */\n+\n bool\n thread_info::deletable () const\n {\n@@ -434,6 +461,9 @@ delete_thread_1 (thread_info *thr, bool silent)\n {\n   gdb_assert (thr != nullptr);\n \n+  threads_debug_printf (\"deleting thread %s, silent = %d\",\n+\t\t\tthr->ptid.to_string ().c_str (), silent);\n+\n   set_thread_exited (thr, silent);\n \n   if (!thr->deletable ())\n@@ -2192,6 +2222,14 @@ Show printing of thread events (such as thread start and exit).\"), NULL,\n \t\t\t   show_print_thread_events,\n \t\t\t   &setprintlist, &showprintlist);\n \n+  add_setshow_boolean_cmd (\"threads\", class_maintenance, &debug_threads, _(\"\\\n+Set thread debugging.\"), _(\"\\\n+Show thread debugging.\"), _(\"\\\n+When on messages about thread creation and deletion are printed.\"),\n+\t\t\t   nullptr,\n+\t\t\t   show_debug_threads,\n+\t\t\t   &setdebuglist, &showdebuglist);\n+\n   create_internalvar_type_lazy (\"_thread\", &thread_funcs, NULL);\n   create_internalvar_type_lazy (\"_gthread\", &gthread_funcs, NULL);\n }"
    }
  ]
}