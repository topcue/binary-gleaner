{
  "sha": "edd45eb06bfc4683922c6877589004632e6e6d29",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWRkNDVlYjA2YmZjNDY4MzkyMmM2ODc3NTg5MDA0NjMyZTZlNmQyOQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-02-18T22:28:23Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-02-18T22:28:23Z"
    },
    "message": "gdb: fix printing of flag enums with multi-bit enumerators\n\nGDB has this feature where if an enum looks like it is meant to\nrepresent binary flags, it will present the values of that type as a\nbitwise OR of the flags that are set in the value.\n\nThe original motivation for this patch is to fix this behavior:\n\n  enum hello { AAA = 0x1, BBB = 0xf0 };\n\n  (gdb) p (enum hello) 0x11\n  $1 = (AAA | BBB)\n\nThis is wrong because the bits set in BBB (0xf0) are not all set in the\nvalue 0x11, but GDB presents it as if they all were.\n\nI think that enumerations with enumerators that have more than one bit\nset should simply not qualify as \"flag enum\", as far as this\nheuristic is concerned.  I'm not sure what it means to have flags of\nmore than one bit.  So this is what this patch implements.\n\nI have added an assert in generic_val_print_enum_1 to make sure the flag\nenum types respect that, in case they are used by other debug info\nreaders, in the future.\n\nI've enhanced the gdb.base/printcmds.exp test to cover this case.  I've\nalso added tests for printing flag enums with value 0, both when the\nenumeration has and doesn't have an enumerator for value 0.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.c: Include \"count-one-bits.h\".\n\t(update_enumeration_type_from_children): If an enumerator has\n\tmultiple bits set, don't treat the enumeration as a \"flag enum\".\n\t* valprint.c (generic_val_print_enum_1): Assert that enumerators\n\tof flag enums have 0 or 1 bit set.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.base/printcmds.c (enum flag_enum): Prefix enumerators with\n\tFE_, add FE_NONE.\n\t(three): Update.\n\t(enum flag_enum_without_zero): New enum.\n\t(flag_enum_without_zero): New variable.\n\t(enum not_flag_enum): New enum.\n\t(three_not_flag): New variable.\n\t* gdb.base/printcmds.exp (test_artificial_arrays): Update.\n\t(test_print_enums): Add more tests for printing flag enums.",
    "tree": {
      "sha": "a254a7497e1d06b3165e5d03ba3b3d183535f588",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a254a7497e1d06b3165e5d03ba3b3d183535f588"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/edd45eb06bfc4683922c6877589004632e6e6d29",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/edd45eb06bfc4683922c6877589004632e6e6d29",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/edd45eb06bfc4683922c6877589004632e6e6d29",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/edd45eb06bfc4683922c6877589004632e6e6d29/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6d0cf4464e0477db8c15b00a99df09d84d55cda4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6d0cf4464e0477db8c15b00a99df09d84d55cda4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6d0cf4464e0477db8c15b00a99df09d84d55cda4"
    }
  ],
  "stats": {
    "total": 90,
    "additions": 81,
    "deletions": 9
  },
  "files": [
    {
      "sha": "ca9f36474535fe1cbe6d27d3304d64497b1bc121",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edd45eb06bfc4683922c6877589004632e6e6d29/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edd45eb06bfc4683922c6877589004632e6e6d29/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=edd45eb06bfc4683922c6877589004632e6e6d29",
      "patch": "@@ -1,3 +1,11 @@\n+2020-02-18  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/read.c: Include \"count-one-bits.h\".\n+\t(update_enumeration_type_from_children): If an enumerator has\n+\tmultiple bits set, don't treat the enumeration as a \"flag enum\".\n+\t* valprint.c (generic_val_print_enum_1): Assert that enumerators\n+\tof flag enums have 0 or 1 bit set.\n+\n 2020-02-18  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* aarch64-tdep.c (aarch64_displaced_step_copy_insn): Use an explicit"
    },
    {
      "sha": "5a77b62b5a053ee73357e6c43c896453f4fdc419",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edd45eb06bfc4683922c6877589004632e6e6d29/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edd45eb06bfc4683922c6877589004632e6e6d29/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=edd45eb06bfc4683922c6877589004632e6e6d29",
      "patch": "@@ -82,6 +82,7 @@\n #include \"gdbsupport/selftest.h\"\n #include \"rust-lang.h\"\n #include \"gdbsupport/pathstuff.h\"\n+#include \"count-one-bits.h\"\n \n /* When == 1, print basic high level tracing messages.\n    When > 1, be more verbose.\n@@ -15526,10 +15527,15 @@ update_enumeration_type_from_children (struct die_info *die,\n \t  unsigned_enum = 0;\n \t  flag_enum = 0;\n \t}\n-      else if ((mask & value) != 0)\n-\tflag_enum = 0;\n       else\n-\tmask |= value;\n+\t{\n+\t  if (count_one_bits_ll (value) >= 2)\n+\t    flag_enum = 0;\n+\t  else if ((mask & value) != 0)\n+\t    flag_enum = 0;\n+\t  else\n+\t    mask |= value;\n+\t}\n \n       /* If we already know that the enum type is neither unsigned, nor\n \t a flag type, no need to look at the rest of the enumerates.  */"
    },
    {
      "sha": "5aaf5feecdfee0e421bc3efafdb026d2c1c46d2e",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edd45eb06bfc4683922c6877589004632e6e6d29/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edd45eb06bfc4683922c6877589004632e6e6d29/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=edd45eb06bfc4683922c6877589004632e6e6d29",
      "patch": "@@ -1,3 +1,15 @@\n+2020-02-18  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdb.base/printcmds.c (enum flag_enum): Prefix enumerators with\n+\tFE_, add FE_NONE.\n+\t(three): Update.\n+\t(enum flag_enum_without_zero): New enum.\n+\t(flag_enum_without_zero): New variable.\n+\t(enum not_flag_enum): New enum.\n+\t(three_not_flag): New variable.\n+\t* gdb.base/printcmds.exp (test_artificial_arrays): Update.\n+\t(test_print_enums): Add more tests for printing flag enums.\n+\n 2020-02-18  Tom de Vries  <tdevries@suse.de>\n \n \t* lib/ada.exp (gdb_compile_ada_1): Factor out of ..."
    },
    {
      "sha": "acb3cb3ad25ea4802a5bdd2b4e2550ebbdcd2e49",
      "filename": "gdb/testsuite/gdb.base/printcmds.c",
      "status": "modified",
      "additions": 28,
      "deletions": 2,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edd45eb06bfc4683922c6877589004632e6e6d29/gdb/testsuite/gdb.base/printcmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edd45eb06bfc4683922c6877589004632e6e6d29/gdb/testsuite/gdb.base/printcmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/printcmds.c?ref=edd45eb06bfc4683922c6877589004632e6e6d29",
      "patch": "@@ -96,9 +96,35 @@ enum some_volatile_enum { enumvolval1, enumvolval2 };\n    name.  See PR11827.  */\n volatile enum some_volatile_enum some_volatile_enum = enumvolval1;\n \n-enum flag_enum { ONE = 1, TWO = 2 };\n+/* An enum considered as a \"flag enum\".  */\n+enum flag_enum\n+{\n+  FE_NONE = 0x00,\n+  FE_ONE  = 0x01,\n+  FE_TWO  = 0x02,\n+};\n+\n+enum flag_enum three = FE_ONE | FE_TWO;\n+\n+/* Another enum considered as a \"flag enum\", but with no enumerator with value\n+   0.  */\n+enum flag_enum_without_zero\n+{\n+  FEWZ_ONE = 0x01,\n+  FEWZ_TWO = 0x02,\n+};\n+\n+enum flag_enum_without_zero flag_enum_without_zero = 0;\n+\n+/* Not a flag enum, an enumerator value has multiple bits sets.  */\n+enum not_flag_enum\n+{\n+  NFE_ONE = 0x01,\n+  NFE_TWO = 0x02,\n+  NFE_F0  = 0xf0,\n+};\n \n-enum flag_enum three = ONE | TWO;\n+enum not_flag_enum three_not_flag = NFE_ONE | NFE_TWO;\n \n /* A structure with an embedded array at an offset > 0.  The array has\n    all elements with the same repeating value, which must not be the"
    },
    {
      "sha": "6afb965af0668fb4fb2c91757116068b25a80511",
      "filename": "gdb/testsuite/gdb.base/printcmds.exp",
      "status": "modified",
      "additions": 17,
      "deletions": 3,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edd45eb06bfc4683922c6877589004632e6e6d29/gdb/testsuite/gdb.base/printcmds.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edd45eb06bfc4683922c6877589004632e6e6d29/gdb/testsuite/gdb.base/printcmds.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/printcmds.exp?ref=edd45eb06bfc4683922c6877589004632e6e6d29",
      "patch": "@@ -653,9 +653,9 @@ proc test_artificial_arrays {} {\n     gdb_test_escape_braces \"p int1dim\\[0\\]${ctrlv}@2${ctrlv}@3\" \\\n \t\"({{0, 1}, {2, 3}, {4, 5}}|\\[Cc\\]annot.*)\" \\\n \t{p int1dim[0]@2@3}\n-    gdb_test_escape_braces \"p int1dim\\[0\\]${ctrlv}@TWO\" \" = {0, 1}\" \\\n+    gdb_test_escape_braces \"p int1dim\\[0\\]${ctrlv}@FE_TWO\" \" = {0, 1}\" \\\n         {p int1dim[0]@TWO}\n-    gdb_test_escape_braces \"p int1dim\\[0\\]${ctrlv}@TWO${ctrlv}@three\" \\\n+    gdb_test_escape_braces \"p int1dim\\[0\\]${ctrlv}@FE_TWO${ctrlv}@three\" \\\n \t\"({{0, 1}, {2, 3}, {4, 5}}|\\[Cc\\]annot.*)\" \\\n \t{p int1dim[0]@TWO@three}\n     gdb_test_escape_braces {p/x (short [])0x12345678} \\\n@@ -736,7 +736,21 @@ proc test_print_enums {} {\n     # Regression test for PR11827.\n     gdb_test \"print some_volatile_enum\" \"enumvolval1\"\n \n-    gdb_test \"print three\" \" = \\\\\\(ONE \\\\| TWO\\\\\\)\"\n+    # Print a flag enum.\n+    gdb_test \"print three\" [string_to_regexp \" = (FE_ONE | FE_TWO)\"]\n+\n+    # Print a flag enum with value 0, where an enumerator has value 0.\n+    gdb_test \"print (enum flag_enum) 0x0\" [string_to_regexp \" = FE_NONE\"]\n+\n+    # Print a flag enum with value 0, where no enumerator has value 0.\n+    gdb_test \"print flag_enum_without_zero\" [string_to_regexp \" = (unknown: 0)\"]\n+\n+    # Print a flag enum with unknown bits set.\n+    gdb_test \"print (enum flag_enum) 0xf1\" [string_to_regexp \" = (FE_ONE | unknown: 240)\"]\n+\n+    # Test printing an enum not considered a \"flag enum\" (because one of its\n+    # enumerators has multiple bits set).\n+    gdb_test \"print three_not_flag\" [string_to_regexp \" = 3\"]\n }\n \n proc test_printf {} {"
    },
    {
      "sha": "77b9a4993d79306b5fa5ba1367f4ee24445fc3b7",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edd45eb06bfc4683922c6877589004632e6e6d29/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edd45eb06bfc4683922c6877589004632e6e6d29/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=edd45eb06bfc4683922c6877589004632e6e6d29",
      "patch": "@@ -39,6 +39,7 @@\n #include \"cli/cli-option.h\"\n #include \"gdbarch.h\"\n #include \"cli/cli-style.h\"\n+#include \"count-one-bits.h\"\n \n /* Maximum number of wchars returned from wchar_iterate.  */\n #define MAX_WCHARS 4\n@@ -638,7 +639,12 @@ generic_val_print_enum_1 (struct type *type, LONGEST val,\n \t{\n \t  QUIT;\n \n-\t  if ((val & TYPE_FIELD_ENUMVAL (type, i)) != 0)\n+\t  ULONGEST enumval = TYPE_FIELD_ENUMVAL (type, i);\n+\t  int nbits = count_one_bits_ll (enumval);\n+\n+\t  gdb_assert (nbits == 0 || nbits == 1);\n+\n+\t  if ((val & enumval) != 0)\n \t    {\n \t      if (!first)\n \t\tfputs_filtered (\" | \", stream);"
    }
  ]
}