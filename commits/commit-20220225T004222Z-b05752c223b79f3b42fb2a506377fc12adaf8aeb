{
  "sha": "b05752c223b79f3b42fb2a506377fc12adaf8aeb",
  "node_id": "C_kwDOANOeidoAKGIwNTc1MmMyMjNiNzlmM2I0MmZiMmE1MDYzNzdmYzEyYWRhZjhhZWI",
  "commit": {
    "author": {
      "name": "Keith Seitz",
      "email": "keiths@redhat.com",
      "date": "2022-02-25T00:42:22Z"
    },
    "committer": {
      "name": "Keith Seitz",
      "email": "keiths@redhat.com",
      "date": "2022-02-25T00:42:22Z"
    },
    "message": "Unit tests for strncmp_iw_with_mode\n\nThis patch attempts to make a start at adding unit tests for\nstrncmp_iw_with_mode.  While there is quite a bit of testing\nof this function in other tests, these are currently end-to-end\ntests.\n\nThis patch attempts to cover the basics of string matching, white\nspace, C++ ABI tags, and several other topics. However, one area\nthat is ostensibly missing is testing the `match_for_lcd' feature.\nThis is otherwise tested as part of our end-to-end DejaGNU-based\ntesting.",
    "tree": {
      "sha": "2d7f2b4134fe93b98cfb81ffca669a569d58eb14",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2d7f2b4134fe93b98cfb81ffca669a569d58eb14"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b05752c223b79f3b42fb2a506377fc12adaf8aeb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b05752c223b79f3b42fb2a506377fc12adaf8aeb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b05752c223b79f3b42fb2a506377fc12adaf8aeb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b05752c223b79f3b42fb2a506377fc12adaf8aeb/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "2f2c677e670063360cbb3fb1b32bd6cf36bcf03a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f2c677e670063360cbb3fb1b32bd6cf36bcf03a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2f2c677e670063360cbb3fb1b32bd6cf36bcf03a"
    }
  ],
  "stats": {
    "total": 565,
    "additions": 565,
    "deletions": 0
  },
  "files": [
    {
      "sha": "58a21939b65c145550be7ad99b6b83be5256c6cd",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 565,
      "deletions": 0,
      "changes": 565,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b05752c223b79f3b42fb2a506377fc12adaf8aeb/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b05752c223b79f3b42fb2a506377fc12adaf8aeb/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=b05752c223b79f3b42fb2a506377fc12adaf8aeb",
      "patch": "@@ -2483,6 +2483,569 @@ strncmp_iw_with_mode (const char *string1, const char *string2,\n     return 1;\n }\n \n+#if GDB_SELF_TEST\n+\n+/* Unit tests for strncmp_iw_with_mode.  */\n+\n+#define CHECK_MATCH_LM(S1, S2, MODE, LANG, LCD)\t\t\t\\\n+  SELF_CHECK (strncmp_iw_with_mode ((S1), (S2), strlen ((S2)),\t\\\n+\t\t\t\t    strncmp_iw_mode::MODE,\t\t\t\t\\\n+\t\t\t\t    (LANG), (LCD)) == 0)\n+\n+#define CHECK_MATCH_LANG(S1, S2, MODE, LANG)\t\t\t\\\n+  CHECK_MATCH_LM ((S1), (S2), MODE, (LANG), nullptr)\n+\n+#define CHECK_MATCH(S1, S2, MODE)\t\t\t\t\t\t\\\n+  CHECK_MATCH_LANG ((S1), (S2), MODE, language_minimal)\n+\n+#define CHECK_NO_MATCH_LM(S1, S2, MODE, LANG, LCD)\t\t\\\n+  SELF_CHECK (strncmp_iw_with_mode ((S1), (S2), strlen ((S2)),\t\\\n+\t\t\t\t    strncmp_iw_mode::MODE,\t\t\t\t\\\n+\t\t\t\t    (LANG)) != 0)\n+\n+#define CHECK_NO_MATCH_LANG(S1, S2, MODE, LANG)\t\t\\\n+  CHECK_NO_MATCH_LM ((S1), (S2), MODE, (LANG), nullptr)\n+\n+#define CHECK_NO_MATCH(S1, S2, MODE)\t\t\t\t       \\\n+  CHECK_NO_MATCH_LANG ((S1), (S2), MODE, language_minimal)\n+\n+static void\n+check_scope_operator (enum language lang)\n+{\n+  CHECK_MATCH_LANG (\"::\", \"::\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"::foo\", \"::\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"::foo\", \"::foo\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\" :: foo \", \"::foo\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b\", \"a ::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b\", \"a\\t::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b\", \"a \\t::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b\", \"a\\t ::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b\", \"a:: b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b\", \"a::\\tb\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b\", \"a:: \\tb\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b\", \"a::\\t b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b\", \"a :: b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b\", \"a ::\\tb\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b\", \"a\\t:: b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b\", \"a \\t::\\t b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a ::b\", \"a::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a\\t::b\", \"a::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a \\t::b\", \"a::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a\\t ::b\", \"a::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a:: b\", \"a::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::\\tb\", \"a::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a:: \\tb\", \"a::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::\\t b\", \"a::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a :: b\", \"a::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a ::\\tb\", \"a::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a\\t:: b\", \"a::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a \\t::\\t b\", \"a::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b::c\", \"a::b::c\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\" a:: b:: c\", \"a::b::c\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b::c\", \" a:: b:: c\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a ::b ::c\", \"a::b::c\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b::c\", \"a :: b:: c\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"\\ta::\\tb::\\tc\", \"\\ta::\\tb::\\tc\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a\\t::b\\t::c\\t\", \"a\\t::b\\t::c\\t\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\" \\ta:: \\tb:: \\tc\", \" \\ta:: \\tb:: \\tc\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"\\t a::\\t b::\\t c\", \"\\t a::\\t b::\\t c\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b::c\", \"\\ta::\\tb::\\tc\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b::c\", \"a\\t::b\\t::c\\t\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b::c\", \" \\ta:: \\tb:: \\tc\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b::c\", \"\\t a::\\t b::\\t c\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"\\ta::\\tb::\\tc\", \"a::b::c\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a\\t::b\\t::c\\t\", \"a::b::c\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\" \\ta:: \\tb:: \\tc\", \"a::b::c\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"\\t a::\\t b::\\t c\", \"a::b::c\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a :: b:: c\\t\", \"\\ta :: b\\t::  c\\t\\t\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"  a::\\t  \\t    b::     c\\t\", \"\\ta ::b::  c\\t\\t\",\n+\t      NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a      :: b               :: \\t\\t\\tc\\t\",\n+\t      \"\\t\\t\\t\\ta        ::   \\t\\t\\t        b             \\t\\t::c\",\n+\t      NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b()\", \"a\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b()\", \"a::\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b()\", \"a::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b(a)\", \"a\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b(a)\", \"a::\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b(a)\", \"a::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b(a,b)\", \"a\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b(a,b)\", \"a::\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b(a,b)\", \"a::b\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b(a,b,c)\", \"a\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b(a,b,c)\", \"a::\", NORMAL, lang);\n+  CHECK_MATCH_LANG (\"a::b(a,b,c)\", \"a::b\", NORMAL, lang);\n+\n+  CHECK_NO_MATCH_LANG (\"a::\", \"::a\", NORMAL, lang);\n+  CHECK_NO_MATCH_LANG (\"::a\", \"::a()\", NORMAL, lang);\n+  CHECK_NO_MATCH_LANG (\"::\", \"::a\", NORMAL, lang);\n+  CHECK_NO_MATCH_LANG (\"a:::b\", \"a::b\", NORMAL, lang);\n+  CHECK_NO_MATCH_LANG (\"a::b()\", \"a::b(a)\", NORMAL, lang);\n+  CHECK_NO_MATCH_LANG (\"a::b(a)\", \"a::b()\", NORMAL, lang);\n+  CHECK_NO_MATCH_LANG (\"a::b(a,b)\", \"a::b(a,a)\", NORMAL, lang);\n+  CHECK_NO_MATCH_LANG (\"a::b\", \"a()\", NORMAL, lang);\n+  CHECK_NO_MATCH_LANG (\"a::b\", \"a::()\", NORMAL, lang);\n+  CHECK_NO_MATCH_LANG (\"a::b\", \"a::b()\", NORMAL, lang);\n+  CHECK_NO_MATCH_LANG (\"a::b\", \"a(a)\", NORMAL, lang);\n+  CHECK_NO_MATCH_LANG (\"a::b\", \"a::(a)\", NORMAL, lang);\n+  CHECK_NO_MATCH_LANG (\"a::b\", \"a::b()\", NORMAL, lang);\n+  CHECK_NO_MATCH_LANG (\"a::b\", \"a(a,b)\", NORMAL, lang);\n+  CHECK_NO_MATCH_LANG (\"a::b\", \"a::(a,b)\", NORMAL, lang);\n+  CHECK_NO_MATCH_LANG (\"a::b\", \"a::b(a,b)\", NORMAL, lang);\n+  CHECK_NO_MATCH_LANG (\"a::b\", \"a(a,b,c)\", NORMAL, lang);\n+  CHECK_NO_MATCH_LANG (\"a::b\", \"a::(a,b,c)\", NORMAL, lang);\n+  CHECK_NO_MATCH_LANG (\"a::b\", \"a::b(a,b,c)\", NORMAL, lang);\n+}\n+\n+/* Callback for strncmp_iw_with_mode unit tests.  */\n+\n+static void\n+strncmp_iw_with_mode_tests ()\n+{\n+  /* Some of the following tests are nonsensical, but could be input by a\n+     deranged script (or user).  */\n+\n+  /* strncmp_iw_mode::NORMAL: strcmp()-like but ignore any whitespace...  */\n+\n+  CHECK_MATCH (\"\", \"\", NORMAL);\n+  CHECK_MATCH (\"foo\", \"foo\", NORMAL);\n+  CHECK_MATCH (\" foo\", \"foo\", NORMAL);\n+  CHECK_MATCH (\"foo \", \"foo\", NORMAL);\n+  CHECK_MATCH (\" foo \", \"foo\", NORMAL);\n+  CHECK_MATCH (\"  foo\", \"foo\", NORMAL);\n+  CHECK_MATCH (\"foo  \", \"foo\", NORMAL);\n+  CHECK_MATCH (\"  foo  \", \"foo\", NORMAL);\n+  CHECK_MATCH (\"\\tfoo\", \"foo\", NORMAL);\n+  CHECK_MATCH (\"foo\\t\", \"foo\", NORMAL);\n+  CHECK_MATCH (\"\\tfoo\\t\", \"foo\", NORMAL);\n+  CHECK_MATCH (\" \\tfoo \\t\", \"foo\", NORMAL);\n+  CHECK_MATCH (\"\\t foo\\t \", \"foo\", NORMAL);\n+  CHECK_MATCH (\"\\t \\t     \\t\\t\\t\\t   foo\\t\\t\\t  \\t\\t   \\t   \\t    \\t  \\t \",\n+\t       \"foo\", NORMAL);\n+  CHECK_MATCH (\"foo\",\n+\t       \"\\t \\t     \\t\\t\\t\\t   foo\\t\\t\\t  \\t\\t   \\t   \\t    \\t  \\t \",\n+\t       NORMAL);\n+  CHECK_MATCH (\"foo bar\", \"foo\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"bar\", NORMAL);\n+  CHECK_NO_MATCH (\"foo bar\", \"foobar\", NORMAL);\n+  CHECK_NO_MATCH (\" foo \", \"bar\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \" bar \", NORMAL);\n+  CHECK_NO_MATCH (\" \\t\\t    foo\\t\\t \", \"\\t    \\t    \\tbar\\t\", NORMAL);\n+  CHECK_NO_MATCH (\"@!%&\", \"@!%&foo\", NORMAL);\n+\n+  /* ... and function parameters in STRING1.  */\n+  CHECK_MATCH (\"foo()\", \"foo()\", NORMAL);\n+  CHECK_MATCH (\"foo ()\", \"foo()\", NORMAL);\n+  CHECK_MATCH (\"foo  ()\", \"foo()\", NORMAL);\n+  CHECK_MATCH (\"foo\\t()\", \"foo()\", NORMAL);\n+  CHECK_MATCH (\"foo\\t  ()\", \"foo()\", NORMAL);\n+  CHECK_MATCH (\"foo  \\t()\", \"foo()\", NORMAL);\n+  CHECK_MATCH (\"foo()\", \"foo ()\", NORMAL);\n+  CHECK_MATCH (\"foo()\", \"foo  ()\", NORMAL);\n+  CHECK_MATCH (\"foo()\", \"foo\\t()\", NORMAL);\n+  CHECK_MATCH (\"foo()\", \"foo\\t ()\", NORMAL);\n+  CHECK_MATCH (\"foo()\", \"foo \\t()\", NORMAL);\n+  CHECK_MATCH (\"foo()\", \"foo()\", NORMAL);\n+  CHECK_MATCH (\"foo ()\", \"foo ()\", NORMAL);\n+  CHECK_MATCH (\"foo  ()\", \"foo  ()\", NORMAL);\n+  CHECK_MATCH (\"foo\\t()\", \"foo\\t()\", NORMAL);\n+  CHECK_MATCH (\"foo\\t  ()\", \"foo\\t ()\", NORMAL);\n+  CHECK_MATCH (\"foo  \\t()\", \"foo \\t()\", NORMAL);\n+  CHECK_MATCH (\"foo(a)\", \"foo(a)\", NORMAL);\n+  CHECK_MATCH (\"foo( a)\", \"foo(a)\", NORMAL);\n+  CHECK_MATCH (\"foo(a )\", \"foo(a)\", NORMAL);\n+  CHECK_MATCH (\"foo(\\ta)\", \"foo(a)\", NORMAL);\n+  CHECK_MATCH (\"foo(a\\t)\", \"foo(a)\", NORMAL);\n+  CHECK_MATCH (\"foo(\\t a)\", \"foo(a)\", NORMAL);\n+  CHECK_MATCH (\"foo( \\ta)\", \"foo(a)\", NORMAL);\n+  CHECK_MATCH (\"foo(a\\t )\", \"foo(a)\", NORMAL);\n+  CHECK_MATCH (\"foo(a \\t)\", \"foo(a)\", NORMAL);\n+  CHECK_MATCH (\"foo( a )\", \"foo(a)\", NORMAL);\n+  CHECK_MATCH (\"foo(\\ta\\t)\", \"foo(a)\", NORMAL);\n+  CHECK_MATCH (\"foo(\\t a\\t )\", \"foo(a)\", NORMAL);\n+  CHECK_MATCH (\"foo( \\ta \\t)\", \"foo(a)\", NORMAL);\n+  CHECK_MATCH (\"foo(a)\", \"foo( a)\", NORMAL);\n+  CHECK_MATCH (\"foo(a)\", \"foo(a )\", NORMAL);\n+  CHECK_MATCH (\"foo(a)\", \"foo(\\ta)\", NORMAL);\n+  CHECK_MATCH (\"foo(a)\", \"foo(a\\t)\", NORMAL);\n+  CHECK_MATCH (\"foo(a)\", \"foo(\\t a)\", NORMAL);\n+  CHECK_MATCH (\"foo(a)\", \"foo( \\ta)\", NORMAL);\n+  CHECK_MATCH (\"foo(a)\", \"foo(a\\t )\", NORMAL);\n+  CHECK_MATCH (\"foo(a)\", \"foo(a \\t)\", NORMAL);\n+  CHECK_MATCH (\"foo(a)\", \"foo( a )\", NORMAL);\n+  CHECK_MATCH (\"foo(a)\", \"foo(\\ta\\t)\", NORMAL);\n+  CHECK_MATCH (\"foo(a)\", \"foo(\\t a\\t )\", NORMAL);\n+  CHECK_MATCH (\"foo(a)\", \"foo( \\ta \\t)\", NORMAL);\n+  CHECK_MATCH (\"foo(a,b)\", \"foo(a,b)\", NORMAL);\n+  CHECK_MATCH (\"foo(a ,b)\", \"foo(a,b)\", NORMAL);\n+  CHECK_MATCH (\"foo(a\\t,b)\", \"foo(a,b)\", NORMAL);\n+  CHECK_MATCH (\"foo(a,\\tb)\", \"foo(a,b)\", NORMAL);\n+  CHECK_MATCH (\"foo(a\\t,\\tb)\", \"foo(a,b)\", NORMAL);\n+  CHECK_MATCH (\"foo(a \\t,b)\", \"foo(a,b)\", NORMAL);\n+  CHECK_MATCH (\"foo(a\\t ,b)\", \"foo(a,b)\", NORMAL);\n+  CHECK_MATCH (\"foo(a,\\tb)\", \"foo(a,b)\", NORMAL);\n+  CHECK_MATCH (\"foo(a, \\tb)\", \"foo(a,b)\", NORMAL);\n+  CHECK_MATCH (\"foo(a,\\t b)\", \"foo(a,b)\", NORMAL);\n+  CHECK_MATCH (\"foo(a,b)\", \"foo(a ,b)\", NORMAL);\n+  CHECK_MATCH (\"foo(a,b)\", \"foo(a\\t,b)\", NORMAL);\n+  CHECK_MATCH (\"foo(a,b)\", \"foo(a,\\tb)\", NORMAL);\n+  CHECK_MATCH (\"foo(a,b)\", \"foo(a\\t,\\tb)\", NORMAL);\n+  CHECK_MATCH (\"foo(a,b)\", \"foo(a \\t,b)\", NORMAL);\n+  CHECK_MATCH (\"foo(a,b)\", \"foo(a\\t ,b)\", NORMAL);\n+  CHECK_MATCH (\"foo(a,b)\", \"foo(a,\\tb)\", NORMAL);\n+  CHECK_MATCH (\"foo(a,b)\", \"foo(a, \\tb)\", NORMAL);\n+  CHECK_MATCH (\"foo(a,b)\", \"foo(a,\\t b)\", NORMAL);\n+  CHECK_MATCH (\"foo(a,b,c,d)\", \"foo(a,b,c,d)\", NORMAL);\n+  CHECK_MATCH (\" foo ( a , b , c , d ) \", \"foo(a,b,c,d)\", NORMAL);\n+  CHECK_MATCH (\" foo ( a , b , c , d ) \", \"foo( a , b , c , d )\", NORMAL);\n+  CHECK_MATCH (\"foo &\\t*(\\ta b    *\\t\\t&)\", \"foo\", NORMAL);\n+  CHECK_MATCH (\"foo &\\t*(\\ta b    *\\t\\t&)\", \"foo&*(a b * &)\", NORMAL);\n+  CHECK_MATCH (\"foo(a) b\", \"foo(a)\", NORMAL);\n+  CHECK_MATCH (\"*foo(*a&)\", \"*foo\", NORMAL);\n+  CHECK_MATCH (\"*foo(*a&)\", \"*foo(*a&)\", NORMAL);\n+  CHECK_MATCH (\"*a&b#c/^d$foo(*a&)\", \"*a&b#c/^d$foo\", NORMAL);\n+  CHECK_MATCH (\"* foo\", \"*foo\", NORMAL);\n+  CHECK_MATCH (\"foo&\", \"foo\", NORMAL);\n+  CHECK_MATCH (\"foo*\", \"foo\", NORMAL);\n+  CHECK_MATCH (\"foo.\", \"foo\", NORMAL);\n+  CHECK_MATCH (\"foo->\", \"foo\", NORMAL);\n+\n+  CHECK_NO_MATCH (\"foo\", \"foo(\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo()\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo(a)\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo(a)\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo*\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo (*\", NORMAL);\n+  CHECK_NO_MATCH (\"foo*\", \"foo (*\", NORMAL);\n+  CHECK_NO_MATCH (\"foo *\", \"foo (*\", NORMAL);\n+  CHECK_NO_MATCH (\"foo&\", \"foo (*\", NORMAL);\n+  CHECK_NO_MATCH (\"foo &\", \"foo (*\", NORMAL);\n+  CHECK_NO_MATCH (\"foo &*\", \"foo (&)\", NORMAL);\n+  CHECK_NO_MATCH (\"foo & \\t    *\\t\", \"foo (*\", NORMAL);\n+  CHECK_NO_MATCH (\"foo & \\t    *\\t\", \"foo (*\", NORMAL);\n+  CHECK_NO_MATCH (\"foo(a*) b\", \"foo(a) b\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[aqi:A](a)\", \"foo(b)\", NORMAL);\n+  CHECK_NO_MATCH (\"*foo\", \"foo\", NORMAL);\n+  CHECK_NO_MATCH (\"*foo\", \"foo*\", NORMAL);\n+  CHECK_NO_MATCH (\"*foo*\", \"*foo&\", NORMAL);\n+  CHECK_NO_MATCH (\"*foo*\", \"foo *\", NORMAL);\n+  CHECK_NO_MATCH (\"&foo\", \"foo\", NORMAL);\n+  CHECK_NO_MATCH (\"&foo\", \"foo&\", NORMAL);\n+  CHECK_NO_MATCH (\"foo&\", \"&foo\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo&\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo*\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo.\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo->\", NORMAL);\n+  CHECK_NO_MATCH (\"foo bar\", \"foo()\", NORMAL);\n+  CHECK_NO_MATCH (\"foo bar\", \"foo bar()\", NORMAL);\n+  CHECK_NO_MATCH (\"foo()\", \"foo(a)\", NORMAL);\n+  CHECK_NO_MATCH (\"*(*)&\", \"*(*)*\", NORMAL);\n+  CHECK_NO_MATCH (\"foo(a)\", \"foo()\", NORMAL);\n+  CHECK_NO_MATCH (\"foo(a)\", \"foo(b)\", NORMAL);\n+  CHECK_NO_MATCH (\"foo(a,b)\", \"foo(a,b,c)\", NORMAL);\n+  CHECK_NO_MATCH (\"foo(a\\\\b)\", \"foo()\", NORMAL);\n+  CHECK_NO_MATCH (\"foo bar(a b c d)\", \"foobar\", NORMAL);\n+  CHECK_NO_MATCH (\"foo bar(a b c d)\", \"foobar ( a b   c \\td\\t)\\t\", NORMAL);\n+\n+  /* Test scope operator.  */\n+  check_scope_operator (language_minimal);\n+  check_scope_operator (language_cplus);\n+  check_scope_operator (language_fortran);\n+  check_scope_operator (language_rust);\n+\n+  /* Test C++ user-defined operators.  */\n+  CHECK_MATCH_LANG (\"operator foo(int&)\", \"operator foo(int &)\", NORMAL,\n+\t\t    language_cplus);\n+  CHECK_MATCH_LANG (\"operator foo(int &)\", \"operator foo(int &)\", NORMAL,\n+\t\t    language_cplus);\n+  CHECK_MATCH_LANG (\"operator foo(int\\t&)\", \"operator foo(int\\t&)\", NORMAL,\n+\t\t    language_cplus);\n+  CHECK_MATCH_LANG (\"operator foo (int)\", \"operator foo(int)\", NORMAL,\n+\t\t    language_cplus);\n+  CHECK_MATCH_LANG (\"operator foo\\t(int)\", \"operator foo(int)\", NORMAL,\n+\t\t    language_cplus);\n+  CHECK_MATCH_LANG (\"operator foo \\t(int)\", \"operator foo(int)\", NORMAL,\n+\t\t    language_cplus);\n+  CHECK_MATCH_LANG (\"operator foo (int)\", \"operator foo \\t(int)\", NORMAL,\n+\t\t    language_cplus);\n+  CHECK_MATCH_LANG (\"operator foo\\t(int)\", \"operator foo \\t(int)\", NORMAL,\n+\t\t    language_cplus);\n+  CHECK_MATCH_LANG (\"operator foo \\t(int)\", \"operator foo \\t(int)\", NORMAL,\n+\t\t    language_cplus);\n+\n+  CHECK_MATCH_LANG (\"a::operator foo(int&)\", \"a::operator foo(int &)\", NORMAL,\n+\t\t    language_cplus);\n+  CHECK_MATCH_LANG (\"a :: operator foo(int &)\", \"a::operator foo(int &)\", NORMAL,\n+\t\t    language_cplus);\n+  CHECK_MATCH_LANG (\"a \\t:: \\toperator foo(int\\t&)\", \"a::operator foo(int\\t&)\", NORMAL,\n+\t\t    language_cplus);\n+  CHECK_MATCH_LANG (\"a::operator foo (int)\", \"a::operator foo(int)\", NORMAL,\n+\t\t    language_cplus);\n+  CHECK_MATCH_LANG (\"a::operator foo\\t(int)\", \"a::operator foo(int)\", NORMAL,\n+\t\t    language_cplus);\n+  CHECK_MATCH_LANG (\"a::operator foo \\t(int)\", \"a::operator foo(int)\", NORMAL,\n+\t\t    language_cplus);\n+  CHECK_MATCH_LANG (\"a::operator foo (int)\", \"a::operator foo \\t(int)\", NORMAL,\n+\t\t    language_cplus);\n+  CHECK_MATCH_LANG (\"a::operator foo\\t(int)\", \"a::operator foo \\t(int)\", NORMAL,\n+\t\t    language_cplus);\n+  CHECK_MATCH_LANG (\"a::operator foo \\t(int)\", \"a::operator foo \\t(int)\", NORMAL,\n+\t\t    language_cplus);\n+\n+  CHECK_NO_MATCH_LANG (\"operator foo(int)\", \"operator foo(char)\", NORMAL,\n+\t\t       language_cplus);\n+  CHECK_NO_MATCH_LANG (\"operator foo(int)\", \"operator foo(int *)\", NORMAL,\n+\t\t       language_cplus);\n+  CHECK_NO_MATCH_LANG (\"operator foo(int)\", \"operator foo(int &)\", NORMAL,\n+\t\t       language_cplus);\n+  CHECK_NO_MATCH_LANG (\"operator foo(int)\", \"operator foo(int, char *)\", NORMAL,\n+\t\t       language_cplus);\n+  CHECK_NO_MATCH_LANG (\"operator foo(int)\", \"operator bar(int)\", NORMAL,\n+\t\t       language_cplus);\n+\n+  CHECK_NO_MATCH_LANG (\"a::operator b::foo(int)\", \"a::operator a::foo(char)\", NORMAL,\n+\t\t       language_cplus);\n+  CHECK_NO_MATCH_LANG (\"a::operator foo(int)\", \"a::operator foo(int *)\", NORMAL,\n+\t\t       language_cplus);\n+  CHECK_NO_MATCH_LANG (\"a::operator foo(int)\", \"a::operator foo(int &)\", NORMAL,\n+\t\t       language_cplus);\n+  CHECK_NO_MATCH_LANG (\"a::operator foo(int)\", \"a::operator foo(int, char *)\", NORMAL,\n+\t\t       language_cplus);\n+  CHECK_NO_MATCH_LANG (\"a::operator foo(int)\", \"a::operator bar(int)\", NORMAL,\n+\t\t       language_cplus);\n+\n+  /* Skip \"[abi:cxx11]\" tags in the symbol name if the lookup name\n+     doesn't include them.  These are not language-specific in\n+     strncmp_iw_with_mode.  */\n+\n+  CHECK_MATCH (\"foo[abi:a]\", \"foo\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a]()\", \"foo\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a](a)\", \"foo\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a](a&,b*)\", \"foo\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a](a,b)\", \"foo(a,b)\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a](a,b) c\", \"foo(a,b) c\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a](a)\", \"foo(a)\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a](a,b)\", \"foo(a,b)\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a]\", \"foo[abi:a]\", NORMAL);\n+  CHECK_MATCH (\"foo[ abi:a]\", \"foo[abi:a]\", NORMAL);\n+  CHECK_MATCH (\"foo[\\tabi:a]\", \"foo[abi:a]\", NORMAL);\n+  CHECK_MATCH (\"foo[ \\tabi:a]\", \"foo[abi:a]\", NORMAL);\n+  CHECK_MATCH (\"foo[\\t abi:a]\", \"foo[abi:a]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi :a]\", \"foo[abi:a]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi\\t:a]\", \"foo[abi:a]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi \\t:a]\", \"foo[abi:a]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi\\t :a]\", \"foo[abi:a]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a]\", \"foo[ abi:a]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a]\", \"foo[\\tabi:a]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a]\", \"foo[ \\tabi:a]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a]\", \"foo[\\t abi:a]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a]\", \"foo[abi :a]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a]\", \"foo[abi\\t:a]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a]\", \"foo[abi \\t:a]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a]\", \"foo[abi\\t :a]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a]\", \"foo[abi:a ]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a]\", \"foo[abi:a\\t]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a]\", \"foo[abi:a \\t]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a]\", \"foo[abi:a\\t ]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a,b]\", \"foo[abi:a,b]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:::]\", \"foo[abi:::]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi : : : ]\", \"foo[abi:::]\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:::]\", \"foo[abi : : : ]\", NORMAL);\n+  CHECK_MATCH (\"foo[ \\t abi  \\t:\\t:   :   \\t]\",\n+\t       \"foo[   abi :                \\t    ::]\",\n+\t       NORMAL);\n+  CHECK_MATCH (\"foo< bar< baz< quxi > > >(int)\", \"foo<bar<baz<quxi>>>(int)\",\n+\t       NORMAL);\n+  CHECK_MATCH (\"\\tfoo<\\tbar<\\tbaz\\t<\\tquxi\\t>\\t>\\t>(int)\",\n+\t       \"foo<bar<baz<quxi>>>(int)\", NORMAL);\n+  CHECK_MATCH (\" \\tfoo \\t< \\tbar \\t< \\tbaz \\t< \\tquxi \\t> \\t> \\t> \\t( \\tint \\t)\",\n+\t       \"foo<bar<baz<quxi>>>(int)\", NORMAL);\n+  CHECK_MATCH (\"foo<bar<baz<quxi>>>(int)\",\n+\t       \"foo < bar < baz < quxi > > > (int)\", NORMAL);\n+  CHECK_MATCH (\"foo<bar<baz<quxi>>>(int)\",\n+\t       \"\\tfoo\\t<\\tbar\\t<\\tbaz\\t<\\tquxi\\t>\\t>\\t>\\t(int)\", NORMAL);\n+  CHECK_MATCH (\"foo<bar<baz<quxi>>>(int)\",\n+\t       \" \\tfoo \\t< \\tbar \\t< \\tbaz \\t< \\tquxi \\t> \\t> \\t> \\t( \\tint \\t)\", NORMAL);\n+  CHECK_MATCH (\"foo<bar<baz>>::foo(quxi &)\", \"fo\", NORMAL);\n+  CHECK_MATCH (\"foo<bar<baz>>::foo(quxi &)\", \"foo\", NORMAL);\n+  CHECK_MATCH (\"foo<bar<baz>>::foo(quxi &)\", \"foo<bar<baz>>::\", NORMAL);\n+  CHECK_MATCH (\"foo<bar<baz>>::foo(quxi &)\", \"foo<bar<baz> >::foo\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a][abi:b](bar[abi:c][abi:d])\", \"foo[abi:a][abi:b](bar[abi:c][abi:d])\",\n+\t       NORMAL);\n+  CHECK_MATCH (\"foo[abi:a][abi:b](bar[abi:c][abi:d])\", \"foo\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a][abi:b](bar[abi:c][abi:d])\", \"foo(bar)\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a][abi:b](bar[abi:c][abi:d])\", \"foo[abi:a](bar)\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a][abi:b](bar[abi:c][abi:d])\", \"foo(bar[abi:c])\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a][abi:b](bar[abi:c][abi:d])\", \"foo[abi:a](bar[abi:c])\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a][abi:b](bar[abi:c][abi:d])\", \"foo[abi:a][abi:b](bar)\", NORMAL);\n+  CHECK_MATCH (\"foo[abi:a][abi:b](bar[abi:c][abi:d])\", \"foo[abi:a][abi:b](bar[abi:c])\",\n+\t       NORMAL);\n+  CHECK_MATCH(\"foo<bar[abi:a]>(char *, baz[abi:b])\", \"foo\", NORMAL);\n+  CHECK_NO_MATCH(\"foo<bar[abi:a]>(char *, baz[abi:b])\", \"foo()\", NORMAL);\n+  CHECK_MATCH(\"foo<bar[abi:a]>(char *, baz[abi:b])\", \"foo<bar>\", NORMAL);\n+  CHECK_MATCH(\"foo<bar[abi:a]>(char *, baz[abi:b])\", \"foo<bar>(char*, baz)\", NORMAL);\n+  CHECK_MATCH(\"foo<bar[abi:a]>(char *, baz[abi:b])\", \"foo<bar>(char*, baz[abi:b])\",\n+\t      NORMAL);\n+  CHECK_NO_MATCH(\"foo<bar[abi:a]>(char *, baz[abi:b])\", \"foo<bar>(char*, baz[abi:A])\",\n+\t      NORMAL);\n+  CHECK_MATCH(\"foo<bar[abi:a]>(char *, baz[abi:b])\", \"foo<bar[abi:a]>(char*, baz)\",\n+\t      NORMAL);\n+  CHECK_NO_MATCH(\"foo<bar[abi:a]>(char *, baz[abi:b])\", \"foo<bar[abi:A]>(char*, baz)\",\n+\t      NORMAL);\n+  CHECK_MATCH(\"foo<bar[abi:a]>(char *, baz[abi:b])\", \"foo<bar[abi:a]>(char*, baz[abi:b])\",\n+\t      NORMAL);\n+  CHECK_NO_MATCH(\"foo<bar[abi:a]>(char *, baz[abi:b])\",\n+\t\t \"foo<bar[abi:a]>(char*, baz[abi:B])\", NORMAL);\n+\n+  CHECK_NO_MATCH (\"foo\", \"foo[\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[ a]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[a ]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[ a ]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[\\ta]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[a \\t]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[a\\t ]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[ \\ta]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[\\t a]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[ \\ta \\t]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[\\t a\\t ]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[ abi]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi ]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[\\tabi]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi\\t]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[ \\tabi]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[\\t abi]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi \\t]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi\\t ]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi :]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi\\t:]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi \\t:]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi\\t :]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi: ]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi:\\t]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi: \\t]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi:\\t ]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi: a]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi:\\ta]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi: \\ta]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi:\\t a]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi:a ]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi:a\\t]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi:a \\t]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo\", \"foo[abi:a\\t ]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a]()\", \"foo(a)\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a]()\", \"foo(a)\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a]()\", \"foo(a)\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a]()\", \"foo(a)\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a]()\", \"foo(a) c\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a]()\", \"foo(a) .\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a]()\", \"foo(a) *\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a]()\", \"foo(a) &\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a](a,b)\", \"foo(a,b) c\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a](a,b)\", \"foo(a,b) .\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a](a,b)\", \"foo(a,b) *\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a](a,b)\", \"foo(a,b) &\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a](a,b)\", \"foo(a,b)c\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a](a,b)\", \"foo(a,b).\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a](a,b)\", \"foo(a,b)*\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a](a,b)\", \"foo(a,b)&\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a](a,b) d\", \"foo(a,b) c\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a](a)\", \"foo()\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a](a)\", \"foo(b)\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a](a)\", \"foo[abi:b](a)\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a](a)\", \"foo[abi:a](b)\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:]\", \"foo[abi:a]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:\", \"foo[abi:a]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:]\", \"foo[abi:a\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:,]\", \"foo[abi:a]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:a,b]\", \"foo[abi:a]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi::a]\", \"foo[abi:a]\", NORMAL);\n+  CHECK_NO_MATCH (\"foo[abi:,([a]\", \"foo[abi:a]\", NORMAL);\n+\n+  CHECK_MATCH (\"foo <a, b [, c (\",  \"foo\", NORMAL);\n+  CHECK_MATCH (\"foo >a, b ], c )\",  \"foo\", NORMAL);\n+  CHECK_MATCH (\"@!%&\\\\*\", \"@!%&\\\\*\", NORMAL);\n+  CHECK_MATCH (\"()\", \"()\", NORMAL);\n+  CHECK_MATCH (\"*(*)*\", \"*(*)*\", NORMAL);\n+  CHECK_MATCH (\"[]\", \"[]\", NORMAL);\n+  CHECK_MATCH (\"<>\", \"<>\", NORMAL);\n+\n+  /* strncmp_iw_with_mode::MATCH_PARAMS: the \"strcmp_iw hack.\"  */\n+  CHECK_MATCH (\"foo2\", \"foo\", NORMAL);\n+  CHECK_NO_MATCH (\"foo2\", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2\", \"foo \", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2\", \"foo\\t\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2\", \"foo \\t\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2\", \"foo\\t \", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2\", \"foo \\t\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2\", \" foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2\", \"\\tfoo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2\", \" \\tfoo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2\", \"\\t foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\" foo2\", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"\\tfoo2\", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\" \\tfoo2\", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"\\t foo2\", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\" foo2 \", \" foo \", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"\\tfoo2\\t\", \"\\tfoo\\t\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\" \\tfoo2 \\t\", \" \\tfoo \\t\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"\\t foo2\\t \", \"\\t foo\\t \", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2 \", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2\\t\", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2 \", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2 \\t\", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2\\t \", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2 (args)\", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2 (args)\", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2\\t(args)\", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2 \\t(args)\", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2\\t (args)\", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2 ( args)\", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2(args )\", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2(args\\t)\", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2 (args \\t)\", \"foo\", MATCH_PARAMS);\n+  CHECK_NO_MATCH (\"foo2 (args\\t )\", \"foo\", MATCH_PARAMS);\n+  CHECK_MATCH (\"foo[abi:a][abi:b](bar[abi:c][abi:d])\", \"foo[abi:a][abi:b](bar[abi:c][abi:d])\",\n+\t       MATCH_PARAMS);\n+  CHECK_MATCH (\"foo[abi:a][abi:b](bar[abi:c][abi:d])\", \"foo\", MATCH_PARAMS);\n+\n+  /* strncmp_iw_with_mode also supports case insensitivity.  */\n+  {\n+    CHECK_NO_MATCH (\"FoO\", \"foo\", NORMAL);\n+    CHECK_NO_MATCH (\"FoO\", \"foo\", MATCH_PARAMS);\n+\n+    scoped_restore restore_case = make_scoped_restore (&case_sensitivity);\n+    case_sensitivity = case_sensitive_off;\n+\n+    CHECK_MATCH (\"FoO\", \"foo\", NORMAL);\n+    CHECK_MATCH (\"FoO\", \"foo\", MATCH_PARAMS);\n+    CHECK_MATCH (\"foo\", \"FoO\", NORMAL);\n+    CHECK_MATCH (\"foo\", \"FoO\", MATCH_PARAMS);\n+\n+    CHECK_MATCH (\"FoO[AbI:abC]()\", \"foo\", NORMAL);\n+    CHECK_NO_MATCH (\"FoO[AbI:abC]()\", \"foo\", MATCH_PARAMS);\n+    CHECK_MATCH (\"FoO2[AbI:abC]()\", \"foo\", NORMAL);\n+    CHECK_NO_MATCH (\"FoO2[AbI:abC]()\", \"foo\", MATCH_PARAMS);\n+\n+    CHECK_MATCH (\"foo[abi:abc]()\", \"FoO[AbI:abC]()\", NORMAL);\n+    CHECK_MATCH (\"foo[abi:abc]()\", \"FoO[AbI:AbC]()\", MATCH_PARAMS);\n+    CHECK_MATCH (\"foo[abi:abc](xyz)\", \"FoO[AbI:abC](XyZ)\", NORMAL);\n+    CHECK_MATCH (\"foo[abi:abc](xyz)\", \"FoO[AbI:abC](XyZ)\", MATCH_PARAMS);\n+    CHECK_MATCH (\"foo[abi:abc][abi:def](xyz)\", \"FoO[AbI:abC](XyZ)\", NORMAL);\n+    CHECK_MATCH (\"foo[abi:abc][abi:def](xyz)\", \"FoO[AbI:abC](XyZ)\",\n+\t\t MATCH_PARAMS);\n+    CHECK_MATCH (\"foo<bar<baz>>(bar<baz>)\", \"FoO<bAr<BaZ>>(bAr<BaZ>)\",\n+\t\t NORMAL);\n+    CHECK_MATCH (\"foo<bar<baz>>(bar<baz>)\", \"FoO<bAr<BaZ>>(bAr<BaZ>)\",\n+\t\t MATCH_PARAMS);\n+  }\n+}\n+\n+#undef MATCH\n+#undef NO_MATCH\n+#endif\n+\n /* See utils.h.  */\n \n int\n@@ -3248,5 +3811,7 @@ When set, debugging messages will be marked with seconds and microseconds.\"),\n #if GDB_SELF_TEST\n   selftests::register_test (\"gdb_realpath\", gdb_realpath_tests);\n   selftests::register_test (\"gdb_argv_array_view\", gdb_argv_as_array_view_test);\n+  selftests::register_test (\"strncmp_iw_with_mode\",\n+\t\t\t    strncmp_iw_with_mode_tests);\n #endif\n }"
    }
  ]
}