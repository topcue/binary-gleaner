{
  "sha": "e0fc5c3fcbf0d9e425483c20dc14cf9cedeac3f4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTBmYzVjM2ZjYmYwZDllNDI1NDgzYzIwZGMxNGNmOWNlZGVhYzNmNA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-04-02T19:49:06Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-04-02T19:49:06Z"
    },
    "message": "gdb: use bfd_get_section_contents to read section contents in is_linked_with_cygwin_dll\n\nThe function is_linked_with_cygwin_dll currently uses\ngdb_bfd_map_section to get some section contents.  This is not ideal\nbecause that memory, which is only used in this function, can't be\nreleased.  Instead, it was suggested to use\nbfd_get_full_section_contents.\n\nHowever, bfd_get_full_section_contents returns a newly allocated buffer,\nwhich is not very practical to use with C++ automatic memory management\nconstructs.  I decided to make gdb_bfd_get_full_section_contents, a\nsmall alternative to bfd_get_full_section_contents.  It is a small\nwrapper around bfd_get_section_contents which returns the full contents\nof the section in a gdb::byte_vector.\n\ngdb_bfd_get_full_section_contents could be used at many places that\nalready allocate a vector of the size of the section and then call\nbfd_get_section_contents.  I think these call sites can be updated over\ntime.\n\ngdb/ChangeLog:\n\n\t* gdb_bfd.h: Include gdbsupport/byte-vector.h.\n\t(gdb_bfd_get_full_section_contents): New declaration.\n\t* gdb_bfd.c (gdb_bfd_get_full_section_contents): New function.\n\t* windows-tdep.c (is_linked_with_cygwin_dll): Use\n\tgdb_bfd_get_full_section_contents.",
    "tree": {
      "sha": "a67587eb388735ad67659c1903f6118dacdc963d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a67587eb388735ad67659c1903f6118dacdc963d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e0fc5c3fcbf0d9e425483c20dc14cf9cedeac3f4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e0fc5c3fcbf0d9e425483c20dc14cf9cedeac3f4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e0fc5c3fcbf0d9e425483c20dc14cf9cedeac3f4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e0fc5c3fcbf0d9e425483c20dc14cf9cedeac3f4/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e2ff18a0a54f98c38f8d9b80c36faa7aacacf6d6"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 36,
    "deletions": 8
  },
  "files": [
    {
      "sha": "e93725129d57caaac548883c05820e86e6de7f81",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0fc5c3fcbf0d9e425483c20dc14cf9cedeac3f4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0fc5c3fcbf0d9e425483c20dc14cf9cedeac3f4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e0fc5c3fcbf0d9e425483c20dc14cf9cedeac3f4",
      "patch": "@@ -1,3 +1,11 @@\n+2020-04-02  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* gdb_bfd.h: Include gdbsupport/byte-vector.h.\n+\t(gdb_bfd_get_full_section_contents): New declaration.\n+\t* gdb_bfd.c (gdb_bfd_get_full_section_contents): New function.\n+\t* windows-tdep.c (is_linked_with_cygwin_dll): Use\n+\tgdb_bfd_get_full_section_contents.\n+\n 2020-04-02  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* exec.c (build_section_table): Replace internal_error with"
    },
    {
      "sha": "26262bfedf648f4ca4eecef0e8754d57a416a731",
      "filename": "gdb/gdb_bfd.c",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0fc5c3fcbf0d9e425483c20dc14cf9cedeac3f4/gdb/gdb_bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0fc5c3fcbf0d9e425483c20dc14cf9cedeac3f4/gdb/gdb_bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdb_bfd.c?ref=e0fc5c3fcbf0d9e425483c20dc14cf9cedeac3f4",
      "patch": "@@ -926,7 +926,19 @@ gdb_bfd_requires_relocations (bfd *abfd)\n   return gdata->needs_relocations;\n }\n \n-\f\n+/* See gdb_bfd.h.  */\n+\n+bool\n+gdb_bfd_get_full_section_contents (bfd *abfd, asection *section,\n+\t\t\t\t   gdb::byte_vector *contents)\n+{\n+  bfd_size_type section_size = bfd_section_size (section);\n+\n+  contents->resize (section_size);\n+\n+  return bfd_get_section_contents (abfd, section, contents->data (), 0,\n+\t\t\t\t   section_size);\n+}\n \n /* A callback for htab_traverse that prints a single BFD.  */\n "
    },
    {
      "sha": "ce72f78a23f3d77c655a8db69f2f40763d5b70ce",
      "filename": "gdb/gdb_bfd.h",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0fc5c3fcbf0d9e425483c20dc14cf9cedeac3f4/gdb/gdb_bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0fc5c3fcbf0d9e425483c20dc14cf9cedeac3f4/gdb/gdb_bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdb_bfd.h?ref=e0fc5c3fcbf0d9e425483c20dc14cf9cedeac3f4",
      "patch": "@@ -21,6 +21,7 @@\n #define GDB_BFD_H\n \n #include \"registry.h\"\n+#include \"gdbsupport/byte-vector.h\"\n #include \"gdbsupport/gdb_ref_ptr.h\"\n \n DECLARE_REGISTRY (bfd);\n@@ -181,4 +182,12 @@ int gdb_bfd_count_sections (bfd *abfd);\n \n int gdb_bfd_requires_relocations (bfd *abfd);\n \n+/* Alternative to bfd_get_full_section_contents that returns the section\n+   contents in *CONTENTS, instead of an allocated buffer.\n+\n+   Return true on success, false otherwise.  */\n+\n+bool gdb_bfd_get_full_section_contents (bfd *abfd, asection *section,\n+\t\t\t\t\tgdb::byte_vector *contents);\n+\n #endif /* GDB_BFD_H */"
    },
    {
      "sha": "662a46fe1d702ed4bace839c7bfa33567db8b89f",
      "filename": "gdb/windows-tdep.c",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0fc5c3fcbf0d9e425483c20dc14cf9cedeac3f4/gdb/windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0fc5c3fcbf0d9e425483c20dc14cf9cedeac3f4/gdb/windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-tdep.c?ref=e0fc5c3fcbf0d9e425483c20dc14cf9cedeac3f4",
      "patch": "@@ -935,18 +935,17 @@ is_linked_with_cygwin_dll (bfd *abfd)\n   bfd_vma idata_addr\n     = pe_data (abfd)->pe_opthdr.DataDirectory[PE_IMPORT_TABLE].VirtualAddress;\n \n-  /* Map the section's data.  */\n-  bfd_size_type idata_size;\n-  const gdb_byte *const idata_contents\n-    = gdb_bfd_map_section (idata_section, &idata_size);\n-  if (idata_contents == nullptr)\n+  /* Get the section's data.  */\n+  gdb::byte_vector idata_contents;\n+  if (!gdb_bfd_get_full_section_contents (abfd, idata_section, &idata_contents))\n     {\n       warning (_(\"Failed to get content of .idata section.\"));\n       return false;\n     }\n \n-  const gdb_byte *iter = idata_contents;\n-  const gdb_byte *end = idata_contents + idata_size;\n+  size_t idata_size = idata_contents.size ();\n+  const gdb_byte *iter = idata_contents.data ();\n+  const gdb_byte *end = idata_contents.data () + idata_size;\n   const pe_import_directory_entry null_dir_entry = { 0 };\n \n   /* Iterate through all directory entries.  */"
    }
  ]
}