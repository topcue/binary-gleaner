{
  "sha": "533b2ae07d0437d0f9ae26f2067c1eab7999c5ba",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTMzYjJhZTA3ZDA0MzdkMGY5YWUyNmYyMDY3YzFlYWI3OTk5YzViYQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-11-26T11:42:03Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-12-02T17:47:39Z"
    },
    "message": "gdb/riscv: remove csr aliases created with DECLARE_CSR_ALIAS\n\nIn this commit:\n\n  commit 767a879e31ce31179e6135c2f991f670a35709fa\n  Date:   Tue Jun 9 17:38:30 2020 +0100\n\n      gdb/riscv: Improved register alias name creation\n\nRISC-V GDB was changed to make use of the DECLARE_CSR_ALIAS macro to\ndefine register aliases for some CSRs.  Actually, only one alias was\ncreated 'dscratch' as an alias for 'dscratch0'.  All of the other\nDECLARE_CSR_ALIAS lines (from include/opcode/riscv-opc.h) were\nfiltered out.\n\nIn this commit:\n\n  commit 08ccfccf0ed825be9be2972594d4be4a2207ef13\n  Date:   Mon Jun 8 10:54:53 2020 +0800\n\n      RISC-V: Support debug and float CSR as the unprivileged ones.\n\nChanges were made to include/opcode/riscv-opc.h so that GDB no longer\ncreated even the dscratch alias.\n\nThis caused a test failure in gdb.arch/riscv-tdesc-regs.exp.\n\nIn looking at how to address this failure I think that the best\nstrategy is, for now at least, to just remove the code that tries to\ncreate aliases with DECLARE_CSR_ALIAS.\n\nMy thoughts are that:\n\n  1. At least some of the aliases are for CSRs where the register now\n  has a completely different use.  Being able to reference the CSR\n  using a completely inappropriate name just seems confusing.  This\n  was solved by the filtering added in the first commit referenced\n  above.  But we certainly don't want to blindly add all aliases.\n\n  2. Names presented in a target description are always honoured, so\n  if a user has a legacy target then they should just start sending a\n  target description with their legacy register names in, this problem\n  is then solved.\n\n  3. It's easy enough to figure out which CSRs a target has with the\n  info registers command, so missing an alias shouldn't be a big\n  issue.\n\n  4.  Allowing users to use names for registers that differ from the\n  names the target announces doesn't feel like a critical feature.  If\n  in the future targets want multiple names for a register then maybe\n  we could/should extend target descriptions to allow the target to\n  send aliases as well as the primary name.... but that can wait for\n  another day.\n\nSo in this commit I remove the use of DECLARE_CSR_ALIAS, and remove\nthe test that was failing.\n\ngdb/ChangeLog:\n\n\t* riscv-tdep.c (riscv_create_csr_aliases): Remove use of\n\tDECLARE_CSR_ALIAS.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.arch/riscv-tdesc-regs.exp: Remove unwanted test.",
    "tree": {
      "sha": "73fdeb12afd0ff7975a9a1aa0dccb0b41b2c26fd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/73fdeb12afd0ff7975a9a1aa0dccb0b41b2c26fd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/533b2ae07d0437d0f9ae26f2067c1eab7999c5ba",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/533b2ae07d0437d0f9ae26f2067c1eab7999c5ba",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/533b2ae07d0437d0f9ae26f2067c1eab7999c5ba",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/533b2ae07d0437d0f9ae26f2067c1eab7999c5ba/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e45020422076c1014579ae8763fd253990ddf58e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e45020422076c1014579ae8763fd253990ddf58e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e45020422076c1014579ae8763fd253990ddf58e"
    }
  ],
  "stats": {
    "total": 23,
    "additions": 9,
    "deletions": 14
  },
  "files": [
    {
      "sha": "fdda913104174033b76b925de08de7faec05f7a3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/533b2ae07d0437d0f9ae26f2067c1eab7999c5ba/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/533b2ae07d0437d0f9ae26f2067c1eab7999c5ba/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=533b2ae07d0437d0f9ae26f2067c1eab7999c5ba",
      "patch": "@@ -1,3 +1,8 @@\n+2020-12-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* riscv-tdep.c (riscv_create_csr_aliases): Remove use of\n+\tDECLARE_CSR_ALIAS.\n+\n 2020-12-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* riscv-tdep.c (riscv_is_unknown_csr): New function,"
    },
    {
      "sha": "2f182e8ba8c19c9c13d85ad708cb1690794d5a80",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 0,
      "deletions": 10,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/533b2ae07d0437d0f9ae26f2067c1eab7999c5ba/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/533b2ae07d0437d0f9ae26f2067c1eab7999c5ba/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=533b2ae07d0437d0f9ae26f2067c1eab7999c5ba",
      "patch": "@@ -376,16 +376,6 @@ riscv_create_csr_aliases ()\n       int csr_num = reg.regnum - RISCV_FIRST_CSR_REGNUM;\n       const char *alias = xstrprintf (\"csr%d\", csr_num);\n       reg.names.push_back (alias);\n-\n-      /* Setup the other csr aliases.  We don't use a switch table here in\n-\t case there are multiple aliases with the same value.  Also filter\n-\t based on ABRT_VER in order to avoid a very old alias for misa that\n-\t duplicates the name \"misa\" but at a different CSR address.  */\n-#define DECLARE_CSR_ALIAS(NAME,VALUE,CLASS,DEF_VER,ABRT_VER)\t \\\n-      if (csr_num == VALUE && ABRT_VER >= PRIV_SPEC_CLASS_1P11)  \\\n-\treg.names.push_back ( # NAME );\n-#include \"opcode/riscv-opc.h\"\n-#undef DECLARE_CSR_ALIAS\n     }\n }\n "
    },
    {
      "sha": "c00bc61248065e8c4d70189261bba2b0be609c54",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/533b2ae07d0437d0f9ae26f2067c1eab7999c5ba/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/533b2ae07d0437d0f9ae26f2067c1eab7999c5ba/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=533b2ae07d0437d0f9ae26f2067c1eab7999c5ba",
      "patch": "@@ -1,3 +1,7 @@\n+2020-12-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.arch/riscv-tdesc-regs.exp: Remove unwanted test.\n+\n 2020-12-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.arch/riscv-tdesc-regs.exp (get_expected_result): New proc,"
    },
    {
      "sha": "6ee2bb7cb160a41db8a500323a73005174f1f2f1",
      "filename": "gdb/testsuite/gdb.arch/riscv-tdesc-regs.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/533b2ae07d0437d0f9ae26f2067c1eab7999c5ba/gdb/testsuite/gdb.arch/riscv-tdesc-regs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/533b2ae07d0437d0f9ae26f2067c1eab7999c5ba/gdb/testsuite/gdb.arch/riscv-tdesc-regs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/riscv-tdesc-regs.exp?ref=533b2ae07d0437d0f9ae26f2067c1eab7999c5ba",
      "patch": "@@ -76,10 +76,6 @@ gdb_test_no_output \"set tdesc filename $remote_file\" \\\n # Check that an alias for an unknown CSR will give a suitable error.\n gdb_test \"info registers \\$csr0\" \"Invalid register `csr0'\"\n \n-# Check we can access the dscratch register using either of its names.\n-gdb_test \"info registers \\$dscratch0\" \"dscratch0\\[ \\t\\]+.*\"\n-gdb_test \"info registers \\$dscratch\" \"dscratch\\[ \\t\\]+.*\"\n-\n # Return the number of times REGISTER should appear in GROUP, this\n # will either be 0 or 1.\n proc get_expected_result { register group } {"
    }
  ]
}