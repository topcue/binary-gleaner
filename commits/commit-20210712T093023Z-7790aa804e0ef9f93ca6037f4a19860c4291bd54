{
  "sha": "7790aa804e0ef9f93ca6037f4a19860c4291bd54",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Nzc5MGFhODA0ZTBlZjlmOTNjYTYwMzdmNGExOTg2MGM0MjkxYmQ1NA==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2021-07-12T09:30:23Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2021-07-12T09:30:23Z"
    },
    "message": "testsuite: fix whitespace problems in gdb.mi/mi-break.exp\n\nReplace leading 8-spaces with tab and remove trailing space in\ngdb.mi/mi-break.exp.",
    "tree": {
      "sha": "65040e978a01ecda70e77ed8f6f3dd5743afe90a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/65040e978a01ecda70e77ed8f6f3dd5743afe90a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7790aa804e0ef9f93ca6037f4a19860c4291bd54",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7790aa804e0ef9f93ca6037f4a19860c4291bd54",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7790aa804e0ef9f93ca6037f4a19860c4291bd54",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7790aa804e0ef9f93ca6037f4a19860c4291bd54/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b926827d4451b2f836d1e7d594d9cef1bb9726fa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b926827d4451b2f836d1e7d594d9cef1bb9726fa",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b926827d4451b2f836d1e7d594d9cef1bb9726fa"
    }
  ],
  "stats": {
    "total": 74,
    "additions": 37,
    "deletions": 37
  },
  "files": [
    {
      "sha": "430ce6f41c3308bfde2e5fffc29e5bb5c5cae179",
      "filename": "gdb/testsuite/gdb.mi/mi-break.exp",
      "status": "modified",
      "additions": 37,
      "deletions": 37,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7790aa804e0ef9f93ca6037f4a19860c4291bd54/gdb/testsuite/gdb.mi/mi-break.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7790aa804e0ef9f93ca6037f4a19860c4291bd54/gdb/testsuite/gdb.mi/mi-break.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/mi-break.exp?ref=7790aa804e0ef9f93ca6037f4a19860c4291bd54",
      "patch": "@@ -187,56 +187,56 @@ proc_with_prefix test_ignore_count {} {\n     global line_callme_body\n \n     mi_gdb_test \"-break-insert -i 1 callme\" \\\n-        \"\\\\^done,[mi_make_breakpoint -ignore 1]\" \\\n-        \"insert breakpoint with ignore count at callme\"\n+\t\"\\\\^done,[mi_make_breakpoint -ignore 1]\" \\\n+\t\"insert breakpoint with ignore count at callme\"\n \n     mi_run_cmd\n \n     mi_expect_stop \"breakpoint-hit\" \"callme\" \"\\{name=\\\"i\\\",value=\\\"2\\\"\\}\" \".*basics.c\" $line_callme_body \\\n-        {\"\" \"disp=\\\"keep\\\"\" } \"run to breakpoint with ignore count\"\n+\t{\"\" \"disp=\\\"keep\\\"\" } \"run to breakpoint with ignore count\"\n }\n \n proc_with_prefix test_error {} {\n     mi_gdb_test \"-break-insert function_that_does_not_exist\" \\\n-        \".*\\\\^error,msg=\\\"Function \\\\\\\\\\\"function_that_does_not_exist\\\\\\\\\\\" not defined.\\\"\" \\\n-        \"breakpoint at nonexistent function\"\n+\t\".*\\\\^error,msg=\\\"Function \\\\\\\\\\\"function_that_does_not_exist\\\\\\\\\\\" not defined.\\\"\" \\\n+\t\"breakpoint at nonexistent function\"\n \n     # We used to have a bug whereby -break-insert that failed would not\n     # clear some event hooks.  As result, whenever we evaluate expression\n     # containing function call, the internal breakpoint created to handle\n     # function call would be reported, messing up MI output.\n     mi_gdb_test \"-var-create V * return_1()\" \\\n-        \"\\\\^done,name=\\\"V\\\",numchild=\\\"0\\\",value=\\\"1\\\",type=\\\"int\\\",has_more=\\\"0\\\"\" \\\n-        \"create varobj for function call\"\n+\t\"\\\\^done,name=\\\"V\\\",numchild=\\\"0\\\",value=\\\"1\\\",type=\\\"int\\\",has_more=\\\"0\\\"\" \\\n+\t\"create varobj for function call\"\n \n     mi_gdb_test \"-var-update *\" \\\n-        \"\\\\^done,changelist=\\\\\\[\\\\\\]\" \\\n-        \"update varobj for function call\"    \n+\t\"\\\\^done,changelist=\\\\\\[\\\\\\]\" \\\n+\t\"update varobj for function call\"\n \n     # Try setting breakpoints with garbage after the location.\n \n     # \"if\" only works in the CLI.  It's not supposed to be accepted by\n     # MI.  The way to specify a condition is with -c.\n     mi_gdb_test \"-break-insert \\\"callme if i < 4\\\"\" \\\n-        \".*\\\\^error,msg=\\\"Garbage 'if i < 4' at end of location\\\"\" \\\n-        \"breakpoint with garbage after location\"\n+\t\".*\\\\^error,msg=\\\"Garbage 'if i < 4' at end of location\\\"\" \\\n+\t\"breakpoint with garbage after location\"\n \n     mi_gdb_test \"-break-insert -c i==4 \\\"callme if i < 4\\\"\" \\\n-        \".*\\\\^error,msg=\\\"Garbage 'if i < 4' at end of location\\\"\" \\\n-        \"conditional breakpoint with garbage after location\"\n+\t\".*\\\\^error,msg=\\\"Garbage 'if i < 4' at end of location\\\"\" \\\n+\t\"conditional breakpoint with garbage after location\"\n \n     # Try using an invalid condition.\n     mi_gdb_test \"-break-insert -c bad callme\" \\\n-        \".*\\\\^error,msg=\\\"No symbol \\\\\\\\\\\"bad\\\\\\\\\\\" in current context.\\\"\" \\\n-        \"breakpoint with bad condition\"\n+\t\".*\\\\^error,msg=\\\"No symbol \\\\\\\\\\\"bad\\\\\\\\\\\" in current context.\\\"\" \\\n+\t\"breakpoint with bad condition\"\n \n     mi_gdb_test \"-dprintf-insert -c bad callme \\\"Hello\\\"\" \\\n-        \".*\\\\^error,msg=\\\"No symbol \\\\\\\\\\\"bad\\\\\\\\\\\" in current context.\\\"\" \\\n-        \"dprintf with bad condition\"\n+\t\".*\\\\^error,msg=\\\"No symbol \\\\\\\\\\\"bad\\\\\\\\\\\" in current context.\\\"\" \\\n+\t\"dprintf with bad condition\"\n \n     mi_gdb_test \"-break-condition 5 bad\" \\\n-        \".*\\\\^error,msg=\\\"No symbol \\\\\\\\\\\"bad\\\\\\\\\\\" in current context.\\\"\" \\\n-        \"invalid condition\"\n+\t\".*\\\\^error,msg=\\\"No symbol \\\\\\\\\\\"bad\\\\\\\\\\\" in current context.\\\"\" \\\n+\t\"invalid condition\"\n }\n \n proc_with_prefix test_disabled_creation {} {\n@@ -246,12 +246,12 @@ proc_with_prefix test_disabled_creation {} {\n \t\t-enabled n -func callee2 -file \".*basics.c\" \\\n \t\t-line $line_callee2_body]\n     mi_gdb_test \"-break-insert -d basics.c:callee2\" \\\n-        \"\\\\^done,$bp\" \\\n+\t\"\\\\^done,$bp\" \\\n \t\"test disabled creation\"\n \n     mi_gdb_test \"-break-delete\" \\\n \t    \"\\\\^done\" \\\n-            \"test disabled creation: cleanup\"\n+\t\"test disabled creation: cleanup\"\n }\n \n proc_with_prefix test_breakpoint_commands {} {\n@@ -264,8 +264,8 @@ proc_with_prefix test_breakpoint_commands {} {\n \t     -line $line_callee2_body]\n \n     mi_gdb_test \"-break-commands 7 \\\"print 10\\\" \\\"continue\\\"\" \\\n-        \"\\\\^done\" \\\n-        \"breakpoint commands: set commands\"\n+\t\"\\\\^done\" \\\n+\t\"breakpoint commands: set commands\"\n \n     # Rebuild the breakpoint regexp instead of using the one returned\n     # by mi_create_breakpoint.  Only in -break-info is the actual script\n@@ -275,15 +275,15 @@ proc_with_prefix test_breakpoint_commands {} {\n \t\t       -script {\\{\"print 10\",\"continue\"\\}}]\n     mi_gdb_test \"-break-info 7\" \\\n \t\"\\\\^done,[mi_make_breakpoint_table [list $bp_script]]\" \\\n-        \"breakpoint commands: check that commands are set\"\n+\t\"breakpoint commands: check that commands are set\"\n \n     mi_gdb_test \"-break-commands 7\" \\\n-        \"\\\\^done\" \\\n-        \"breakpoint commands: clear commands\"\n+\t\"\\\\^done\" \\\n+\t\"breakpoint commands: clear commands\"\n \n     mi_gdb_test \"-break-info\" \\\n \t\"\\\\^done,[mi_make_breakpoint_table [list $bp_no_script]]\" \\\n-        \"breakpoint commands: check that commands are cleared\"\n+\t\"breakpoint commands: check that commands are cleared\"\n \n     mi_runto_main\n \n@@ -293,8 +293,8 @@ proc_with_prefix test_breakpoint_commands {} {\n \t-line $line_callee2_body\n \n     mi_gdb_test \"-break-commands 9 \\\"bt\\\" \\\"set \\$i=0\\\" \\\"while \\$i<10\\\" \\\"print \\$i\\\" \\\"set \\$i=\\$i+1\\\" \\\"end\\\" \\\"continue\\\" \" \\\n-        \"\\\\^done\" \\\n-        \"breakpoint commands: set more commands\"\n+\t\"\\\\^done\" \\\n+\t\"breakpoint commands: set more commands\"\n \n     mi_send_resuming_command \"exec-continue\" \"breakpoint commands: continue\"\n \n@@ -316,12 +316,12 @@ proc_with_prefix test_breakpoint_commands {} {\n \n     set test \"intermediate stop and continue, mi running\"\n     gdb_expect {\n-        -re \"\\\\*running\" {\n+\t-re \"\\\\*running\" {\n \t    pass $test\n \t}\n-        timeout {\n+\ttimeout {\n \t    fail $test\n-        }\n+\t}\n     }\n \n     mi_expect_stop \"exited-normally\" \"\" \"\" \"\" \"\" \"\" \"test hitting breakpoint with commands\"\n@@ -422,19 +422,19 @@ proc_with_prefix test_forced_conditions {} {\n \t\"breakpoint with forced condition\"\n \n     mi_gdb_test \"-dprintf-insert -c bad --force-condition callme \\\"Hello\\\"\" \\\n-        \"${warning}\\\\^done,$bp\" \\\n-        \"dprintf with forced condition\"\n+\t\"${warning}\\\\^done,$bp\" \\\n+\t\"dprintf with forced condition\"\n \n     # Define a plain breakpoint first, and a condition later.\n     mi_create_breakpoint \"callme\" \"define a bp\" \"\"\n     mi_gdb_test \"-break-condition --force 16 bad == 42\" \\\n-        \"${warning}\\\\^done\" \\\n-        \"invalid condition is forced\"\n+\t\"${warning}\\\\^done\" \\\n+\t\"invalid condition is forced\"\n     set args [list -cond \"bad == 42\" -locations \"\\\\\\[$loc\\\\\\]\"]\n     set bp [eval mi_make_breakpoint_multi $args]\n     mi_gdb_test \"-break-info 16\" \\\n \t\"\\\\^done,[mi_make_breakpoint_table [list $bp]]\" \\\n-        \"invalid condition is defined\"\n+\t\"invalid condition is defined\"\n }\n \n proc test_break {mi_mode} {"
    }
  ]
}