{
  "sha": "9a182d0461cc34912da51f445a242b392389edd6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWExODJkMDQ2MWNjMzQ5MTJkYTUxZjQ0NWEyNDJiMzkyMzg5ZWRkNg==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-03-24T07:33:33Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-03-24T07:33:33Z"
    },
    "message": "x86: derive opcode length from opcode value\n\nIn the majority of cases we can easily determine the length from the\nencoding, irrespective of whether a prefix is specified there as well.\nWe further don't even need to record the value in the table entries, as\nit's easy enough to determine it (without any guesswork, unless an insn\nwith major opcode 00 appeared that requires a 2nd opcode byte to be\nspecified explicitly) when installing the chosen template for further\nprocessing.\n\nShould an encoding appear which\n- has a major opcode byte of 66, F3, or F2,\n- requires a 2nd opcode byte to be specified explicitly,\n- doesn't have a mandatory prefix\nwe'd need to convert all templates presently encoding a mandatory prefix\nthis way to the Prefix_0X<nn> model to eliminate the respective guessing\ni386-gen does.",
    "tree": {
      "sha": "23378054b7425ee896162d67940c240b42064d61",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/23378054b7425ee896162d67940c240b42064d61"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9a182d0461cc34912da51f445a242b392389edd6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a182d0461cc34912da51f445a242b392389edd6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9a182d0461cc34912da51f445a242b392389edd6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9a182d0461cc34912da51f445a242b392389edd6/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3564871692e324301c2950679aa0fbb04c6d12dc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3564871692e324301c2950679aa0fbb04c6d12dc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3564871692e324301c2950679aa0fbb04c6d12dc"
    }
  ],
  "stats": {
    "total": 14993,
    "additions": 7514,
    "deletions": 7479
  },
  "files": [
    {
      "sha": "49e69dc8ce22076b84bac5be845e8ff4e1a293d6",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a182d0461cc34912da51f445a242b392389edd6/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a182d0461cc34912da51f445a242b392389edd6/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=9a182d0461cc34912da51f445a242b392389edd6",
      "patch": "@@ -1,3 +1,15 @@\n+2021-03-24  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (struct _i386_insn): New field\n+\topcode_length.\n+\t(md_begin): Drop assertion.\n+\t(install_template): New.\n+\t(build_vex_prefix): Call install_template.\n+\t(match_template): Likewise.\n+\t(process_operands): Use new opcode_length field.\n+\t(output_jump): Likewise.\n+\t(output_insn): Likewise. Adjust psedo prefix check.\n+\n 2021-03-24  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (md_begin): Add assertion."
    },
    {
      "sha": "654f43556b7e096ecee28a6cb8ac372d136ae47f",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 34,
      "deletions": 16,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a182d0461cc34912da51f445a242b392389edd6/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a182d0461cc34912da51f445a242b392389edd6/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=9a182d0461cc34912da51f445a242b392389edd6",
      "patch": "@@ -314,6 +314,9 @@ struct _i386_insn\n        or qword, if given.  */\n     char suffix;\n \n+    /* OPCODE_LENGTH holds the number of base opcode bytes.  */\n+    unsigned char opcode_length;\n+\n     /* OPERANDS gives the number of given operands.  */\n     unsigned int operands;\n \n@@ -3065,8 +3068,6 @@ md_begin (void)\n \n     while (1)\n       {\n-\tgas_assert (optab->opcode_length == 4\n-\t\t    || !(optab->base_opcode >> (8 * optab->opcode_length)));\n \t++optab;\n \tif (optab->name == NULL\n \t    || strcmp (optab->name, (optab - 1)->name) != 0)\n@@ -3584,6 +3585,22 @@ intel_float_operand (const char *mnemonic)\n   return 1;\n }\n \n+static INLINE void\n+install_template (const insn_template *t)\n+{\n+  unsigned int l;\n+\n+  i.tm = *t;\n+\n+  /* Note that for pseudo prefixes this produces a length of 1. But for them\n+     the length isn't interesting at all.  */\n+  for (l = 1; l < 4; ++l)\n+    if (!(t->base_opcode >> (8 * l)))\n+      break;\n+\n+  i.opcode_length = l;\n+}\n+\n /* Build the VEX prefix.  */\n \n static void\n@@ -3636,7 +3653,7 @@ build_vex_prefix (const insn_template *t)\n \ti.tm.base_opcode ^= (i.tm.base_opcode & 0xee) != 0x6e\n \t\t\t    ? Opcode_SIMD_FloatD : Opcode_SIMD_IntD;\n       else /* Use the next insn.  */\n-\ti.tm = t[1];\n+\tinstall_template (&t[1]);\n     }\n \n   /* Use 2-byte VEX prefix by swapping commutative source operands if there\n@@ -6665,7 +6682,7 @@ match_template (char mnem_suffix)\n     }\n \n   /* Copy the template we found.  */\n-  i.tm = *t;\n+  install_template (t);\n \n   if (addr_prefix_disp != -1)\n     i.tm.operand_types[addr_prefix_disp]\n@@ -7661,10 +7678,10 @@ process_operands (void)\n \t\t  i.tm.name, register_prefix, i.op[0].regs->reg_name);\n \t  return 0;\n \t}\n-      if ( i.op[0].regs->reg_num > 3 && i.tm.opcode_length == 1 )\n+      if ( i.op[0].regs->reg_num > 3 && i.opcode_length == 1 )\n \t{\n \t  i.tm.base_opcode ^= POP_SEG_SHORT ^ POP_SEG386_SHORT;\n-\t  i.tm.opcode_length = 2;\n+\t  i.opcode_length = 2;\n \t}\n       i.tm.base_opcode |= (i.op[0].regs->reg_num << 3);\n     }\n@@ -8657,12 +8674,12 @@ output_jump (void)\n \n   if (now_seg == absolute_section)\n     {\n-      abs_section_offset += i.tm.opcode_length + size;\n+      abs_section_offset += i.opcode_length + size;\n       return;\n     }\n \n-  p = frag_more (i.tm.opcode_length + size);\n-  switch (i.tm.opcode_length)\n+  p = frag_more (i.opcode_length + size);\n+  switch (i.opcode_length)\n     {\n     case 2:\n       *p++ = i.tm.base_opcode >> 8;\n@@ -9385,14 +9402,15 @@ output_insn (void)\n \t\tadd_prefix (0xf3);\n \t      break;\n \t    case PREFIX_NONE:\n-\t      switch (i.tm.opcode_length)\n+\t      switch (i.opcode_length)\n \t\t{\n \t\tcase 3:\n \t\tcase 2:\n-\t\tcase 1:\n \t\t  break;\n-\t\tcase 0:\n+\t\tcase 1:\n \t\t  /* Check for pseudo prefixes.  */\n+\t\t  if (!i.tm.opcode_modifier.isprefix || i.tm.base_opcode)\n+\t\t    break;\n \t\t  as_bad_where (insn_start_frag->fr_file,\n \t\t\t\tinsn_start_frag->fr_line,\n \t\t\t\t_(\"pseudo prefix without instruction\"));\n@@ -9458,14 +9476,14 @@ output_insn (void)\n \n       /* Now the opcode; be careful about word order here!  */\n       if (now_seg == absolute_section)\n-\tabs_section_offset += i.tm.opcode_length;\n-      else if (i.tm.opcode_length == 1)\n+\tabs_section_offset += i.opcode_length;\n+      else if (i.opcode_length == 1)\n \t{\n \t  FRAG_APPEND_1_CHAR (i.tm.base_opcode);\n \t}\n       else\n \t{\n-\t  switch (i.tm.opcode_length)\n+\t  switch (i.opcode_length)\n \t    {\n \t    case 4:\n \t      p = frag_more (4);\n@@ -9541,7 +9559,7 @@ output_insn (void)\n \n \t      /* Count prefixes for extended opcode maps.  */\n \t      if (!i.vex.length)\n-\t\tswitch (i.tm.opcode_length)\n+\t\tswitch (i.opcode_length)\n \t\t  {\n \t\t  case 3:\n \t\t    if (((i.tm.base_opcode >> 16) & 0xff) == 0xf)"
    },
    {
      "sha": "46210a09ec00e39761467410642f86b5a4d65b14",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a182d0461cc34912da51f445a242b392389edd6/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a182d0461cc34912da51f445a242b392389edd6/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=9a182d0461cc34912da51f445a242b392389edd6",
      "patch": "@@ -1,3 +1,13 @@\n+2021-03-24  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-gen.c (output_i386_opcode): Drop processing of\n+\topcode_length. Calculate length from base_opcode. Adjust prefix\n+\tencoding determination.\n+\t(process_i386_opcodes): Drop output of fake opcode_length.\n+\t* i386-opc.h (struct insn_template): Drop opcode_length field.\n+\t* i386-opc.tbl: Drop opcode length field from all templates.\n+\t* i386-tbl.h: Re-generate.\n+\n 2021-03-24  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-gen.c (process_i386_opcode_modifier): Return void. New"
    },
    {
      "sha": "1595f8991ad442611e310d828d8bff7f7f5cd813",
      "filename": "opcodes/i386-gen.c",
      "status": "modified",
      "additions": 15,
      "deletions": 17,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a182d0461cc34912da51f445a242b392389edd6/opcodes/i386-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a182d0461cc34912da51f445a242b392389edd6/opcodes/i386-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-gen.c?ref=9a182d0461cc34912da51f445a242b392389edd6",
      "patch": "@@ -1355,20 +1355,17 @@ static void\n output_i386_opcode (FILE *table, const char *name, char *str,\n \t\t    char *last, int lineno)\n {\n-  unsigned int i, prefix = 0;\n-  char *base_opcode, *extension_opcode, *opcode_length, *end;\n+  unsigned int i, length, prefix = 0;\n+  char *base_opcode, *extension_opcode, *end;\n   char *cpu_flags, *opcode_modifier, *operand_types [MAX_OPERANDS];\n-  unsigned long int opcode, length;\n+  unsigned long int opcode;\n \n   /* Find base_opcode.  */\n   base_opcode = next_field (str, ',', &str, last);\n \n   /* Find extension_opcode.  */\n   extension_opcode = next_field (str, ',', &str, last);\n \n-  /* Find opcode_length.  */\n-  opcode_length = next_field (str, ',', &str, last);\n-\n   /* Find cpu_flags.  */\n   cpu_flags = next_field (str, ',', &str, last);\n \n@@ -1408,29 +1405,30 @@ output_i386_opcode (FILE *table, const char *name, char *str,\n \t}\n     }\n \n-  length = strtoul (opcode_length, &end, 0);\n   opcode = strtoul (base_opcode, &end, 0);\n \n+  /* Determine opcode length.  */\n+  for (length = 1; length < 4; ++length)\n+    if (!(opcode >> (8 * length)))\n+       break;\n+\n   /* Transform prefixes encoded in the opcode into opcode modifier\n      representation.  */\n-  if (length < 4)\n+  if (length > 1)\n     {\n-      switch (opcode >> (8 * length))\n+      switch (opcode >> (8 * length - 8))\n \t{\n-\tcase 0: break;\n \tcase 0x66: prefix = PREFIX_0X66; break;\n \tcase 0xF3: prefix = PREFIX_0XF3; break;\n \tcase 0xF2: prefix = PREFIX_0XF2; break;\n-\tdefault:\n-\t  fail (_(\"%s:%d: %s: Unexpected opcode prefix %02lx\\n\"),\n-\t\tfilename, lineno, name, opcode >> (8 * length));\n \t}\n \n-      opcode &= (1UL << (8 * length)) - 1;\n+      if (prefix)\n+\topcode &= (1UL << (8 * --length)) - 1;\n     }\n \n-  fprintf (table, \"  { \\\"%s\\\", 0x%0*lx%s, %s, %lu, %u,\\n\",\n-\t   name, 2 * (int)length, opcode, end, extension_opcode, length, i);\n+  fprintf (table, \"  { \\\"%s\\\", 0x%0*lx%s, %s, %lu,\\n\",\n+\t   name, 2 * (int)length, opcode, end, extension_opcode, i);\n \n   process_i386_opcode_modifier (table, opcode_modifier, prefix,\n \t\t\t\toperand_types, lineno);\n@@ -1822,7 +1820,7 @@ process_i386_opcodes (FILE *table)\n \n   fclose (fp);\n \n-  fprintf (table, \"  { NULL, 0, 0, 0, 0,\\n\");\n+  fprintf (table, \"  { NULL, 0, 0, 0,\\n\");\n \n   process_i386_opcode_modifier (table, \"0\", 0, NULL, -1);\n "
    },
    {
      "sha": "9ed0793bdbaca0f6a12ad78950bcfa596ed02fbf",
      "filename": "opcodes/i386-opc.h",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a182d0461cc34912da51f445a242b392389edd6/opcodes/i386-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a182d0461cc34912da51f445a242b392389edd6/opcodes/i386-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.h?ref=9a182d0461cc34912da51f445a242b392389edd6",
      "patch": "@@ -949,9 +949,6 @@ typedef struct insn_template\n #define Prefix_REX\t\t8\t/* {rex} */\n #define Prefix_NoOptimize\t9\t/* {nooptimize} */\n \n-  /* Opcode length.  */\n-  unsigned char opcode_length;\n-\n   /* how many operands */\n   unsigned char operands;\n "
    },
    {
      "sha": "3f40f1021847dbf0138e0a045241ed33ed460dd9",
      "filename": "opcodes/i386-opc.tbl",
      "status": "modified",
      "additions": 3409,
      "deletions": 3409,
      "changes": 6818,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a182d0461cc34912da51f445a242b392389edd6/opcodes/i386-opc.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a182d0461cc34912da51f445a242b392389edd6/opcodes/i386-opc.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.tbl?ref=9a182d0461cc34912da51f445a242b392389edd6"
    },
    {
      "sha": "8228cefd3b17646ae10a63ca7cbe696d5dc287d7",
      "filename": "opcodes/i386-tbl.h",
      "status": "modified",
      "additions": 4034,
      "deletions": 4034,
      "changes": 8068,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9a182d0461cc34912da51f445a242b392389edd6/opcodes/i386-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9a182d0461cc34912da51f445a242b392389edd6/opcodes/i386-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-tbl.h?ref=9a182d0461cc34912da51f445a242b392389edd6"
    }
  ]
}