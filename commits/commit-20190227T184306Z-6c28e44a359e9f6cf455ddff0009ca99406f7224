{
  "sha": "6c28e44a359e9f6cf455ddff0009ca99406f7224",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmMyOGU0NGEzNTllOWY2Y2Y0NTVkZGZmMDAwOWNhOTk0MDZmNzIyNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-02-26T18:58:47Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-02-27T18:43:06Z"
    },
    "message": "Remove Python 2.4 and 2.5 support\n\nThis removes all the remainings spots I could find that work around\nissues in Python 2.4 and 2.5.\n\nI don't have a good way to test that Python 2.6 still works.\n\nTested by the buildbot.\n\ngdb/ChangeLog\n2019-02-27  Tom Tromey  <tromey@adacore.com>\n\n\t* config.in, configure: Rebuild.\n\t* configure.ac (HAVE_LIBPYTHON2_4, HAVE_LIBPYTHON2_5): Never\n\tdefine.\n\t* python/py-value.c: Remove Python 2.4 workaround.\n\t* python/py-utils.c (gdb_pymodule_addobject): Remove Python 2.4\n\tworkaround.\n\t* python/py-type.c (convert_field, gdbpy_initialize_types): Remove\n\tPython 2.4 workaround.\n\t* python/python-internal.h: Remove Python 2.4 comment.\n\t(Py_ssize_t): Don't define.\n\t(PyVarObject_HEAD_INIT, Py_TYPE): Don't define.\n\t(gdb_Py_DECREF): Remove Python 2.4 workaround.\n\t(gdb_PyObject_GetAttrString, PyObject_GetAttrString): Remove.\n\t(gdb_PyObject_HasAttrString, PyObject_HasAttrString): Remove.\n\t* python/python.c (do_start_initialization): Remove Python 2.4\n\tworkaround.\n\t* python/py-prettyprint.c (class dummy_python_frame): Remove.\n\t(print_children): Remove Python 2.4 workaround.\n\t* python/py-inferior.c (buffer_procs): Remove Python 2.4\n\tworkaround.\n\t(CHARBUFFERPROC_NAME): Remove.\n\t* python/py-breakpoint.c (gdbpy_initialize_breakpoints): Remove\n\tPython 2.4 workaround.\n\ngdb/testsuite/ChangeLog\n2019-02-27  Tom Tromey  <tromey@adacore.com>\n\n\t* lib/gdb.exp (skip_python_tests_prompt): Don't check for Python\n\t2.4.\n\t* gdb.python/py-finish-breakpoint.exp: Remove Python 2.4\n\tworkaround.\n\ngdb/ChangeLog\n2019-02-27  Tom Tromey  <tromey@adacore.com>\n\n\t* config.in, configure: Rebuild.\n\t* configure.ac (HAVE_LIBPYTHON2_4, HAVE_LIBPYTHON2_5): Never\n\tdefine.\n\t* python/py-value.c: Remove Python 2.4 workaround.\n\t* python/py-utils.c (gdb_pymodule_addobject): Remove Python 2.4\n\tworkaround.\n\t* python/py-type.c (convert_field, gdbpy_initialize_types): Remove\n\tPython 2.4 workaround.\n\t* python/python-internal.h: Remove Python 2.4 comment.\n\t(Py_ssize_t): Don't define.\n\t(PyVarObject_HEAD_INIT, Py_TYPE): Don't define.\n\t(gdb_Py_DECREF): Remove Python 2.4 workaround.\n\t(gdb_PyObject_GetAttrString, PyObject_GetAttrString): Remove.\n\t(gdb_PyObject_HasAttrString, PyObject_HasAttrString): Remove.\n\t* python/python.c (do_start_initialization): Remove Python 2.4\n\tworkaround.\n\t* python/py-prettyprint.c (class dummy_python_frame): Remove.\n\t(print_children): Remove Python 2.4 workaround.\n\t* python/py-inferior.c (buffer_procs): Remove Python 2.4\n\tworkaround.\n\t(CHARBUFFERPROC_NAME): Remove.\n\t* python/py-breakpoint.c (gdbpy_initialize_breakpoints): Remove\n\tPython 2.4 workaround.",
    "tree": {
      "sha": "d7d47c3142dcab10534e5b382fc7b233d12ac310",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d7d47c3142dcab10534e5b382fc7b233d12ac310"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6c28e44a359e9f6cf455ddff0009ca99406f7224",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6c28e44a359e9f6cf455ddff0009ca99406f7224",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6c28e44a359e9f6cf455ddff0009ca99406f7224",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6c28e44a359e9f6cf455ddff0009ca99406f7224/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2c3fc25dd18d3afb4b4cb494c4803fdfbf00ae9b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c3fc25dd18d3afb4b4cb494c4803fdfbf00ae9b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2c3fc25dd18d3afb4b4cb494c4803fdfbf00ae9b"
    }
  ],
  "stats": {
    "total": 349,
    "additions": 46,
    "deletions": 303
  },
  "files": [
    {
      "sha": "de23d4b98efa566ecb99345c162dee9250468c31",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6c28e44a359e9f6cf455ddff0009ca99406f7224",
      "patch": "@@ -1,3 +1,28 @@\n+2019-02-27  Tom Tromey  <tromey@adacore.com>\n+\n+\t* configure.ac (HAVE_LIBPYTHON2_4, HAVE_LIBPYTHON2_5): Never\n+\tdefine.\n+\t* python/py-value.c: Remove Python 2.4 workaround.\n+\t* python/py-utils.c (gdb_pymodule_addobject): Remove Python 2.4\n+\tworkaround.\n+\t* python/py-type.c (convert_field, gdbpy_initialize_types): Remove\n+\tPython 2.4 workaround.\n+\t* python/python-internal.h: Remove Python 2.4 comment.\n+\t(Py_ssize_t): Don't define.\n+\t(PyVarObject_HEAD_INIT, Py_TYPE): Don't define.\n+\t(gdb_Py_DECREF): Remove Python 2.4 workaround.\n+\t(gdb_PyObject_GetAttrString, PyObject_GetAttrString): Remove.\n+\t(gdb_PyObject_HasAttrString, PyObject_HasAttrString): Remove.\n+\t* python/python.c (do_start_initialization): Remove Python 2.4\n+\tworkaround.\n+\t* python/py-prettyprint.c (class dummy_python_frame): Remove.\n+\t(print_children): Remove Python 2.4 workaround.\n+\t* python/py-inferior.c (buffer_procs): Remove Python 2.4\n+\tworkaround.\n+\t(CHARBUFFERPROC_NAME): Remove.\n+\t* python/py-breakpoint.c (gdbpy_initialize_breakpoints): Remove\n+\tPython 2.4 workaround.\n+\n 2019-02-27  Kevin Buettner  <kevinb@redhat.com>\n     \n \t* NEWS: Note minimum Python version."
    },
    {
      "sha": "c0291fbd9c53f48594516e6201b78040a8343979",
      "filename": "gdb/config.in",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/config.in?ref=6c28e44a359e9f6cf455ddff0009ca99406f7224",
      "patch": "@@ -249,12 +249,6 @@\n /* Define if you have the mpfr library. */\n #undef HAVE_LIBMPFR\n \n-/* Define if Python 2.4 is being used. */\n-#undef HAVE_LIBPYTHON2_4\n-\n-/* Define if Python 2.5 is being used. */\n-#undef HAVE_LIBPYTHON2_5\n-\n /* Define if Python 2.6 is being used. */\n #undef HAVE_LIBPYTHON2_6\n "
    },
    {
      "sha": "f2d271e23a2ace1c36a8a483b2e1af9ec4d7be0d",
      "filename": "gdb/configure",
      "status": "modified",
      "additions": 2,
      "deletions": 86,
      "changes": 88,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure?ref=6c28e44a359e9f6cf455ddff0009ca99406f7224",
      "patch": "@@ -10649,82 +10649,6 @@ if ac_fn_c_try_link \"$LINENO\"; then :\n                   PYTHON_CPPFLAGS=$new_CPPFLAGS\n                   PYTHON_LIBS=$new_LIBS\n fi\n-rm -f core conftest.err conftest.$ac_objext \\\n-    conftest$ac_exeext conftest.$ac_ext\n-  CPPFLAGS=$save_CPPFLAGS\n-  LIBS=$save_LIBS\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: ${found_usable_python}\" >&5\n-$as_echo \"${found_usable_python}\" >&6; }\n-\n-    fi\n-    if test ${have_libpython} = no; then\n-\n-  version=python2.5\n-\n-  new_CPPFLAGS=${python_includes}\n-  new_LIBS=\"-lpython2.5 ${python_libs}\"\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ${version}\" >&5\n-$as_echo_n \"checking for ${version}... \" >&6; }\n-  save_CPPFLAGS=$CPPFLAGS\n-  save_LIBS=$LIBS\n-  CPPFLAGS=\"$CPPFLAGS $new_CPPFLAGS\"\n-  LIBS=\"$new_LIBS $LIBS\"\n-  found_usable_python=no\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#include \"Python.h\"\n-int\n-main ()\n-{\n-Py_Initialize ();\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_c_try_link \"$LINENO\"; then :\n-  have_libpython=${version}\n-                  found_usable_python=yes\n-                  PYTHON_CPPFLAGS=$new_CPPFLAGS\n-                  PYTHON_LIBS=$new_LIBS\n-fi\n-rm -f core conftest.err conftest.$ac_objext \\\n-    conftest$ac_exeext conftest.$ac_ext\n-  CPPFLAGS=$save_CPPFLAGS\n-  LIBS=$save_LIBS\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: ${found_usable_python}\" >&5\n-$as_echo \"${found_usable_python}\" >&6; }\n-\n-    fi\n-    if test ${have_libpython} = no; then\n-\n-  version=python2.4\n-\n-  new_CPPFLAGS=${python_includes}\n-  new_LIBS=\"-lpython2.4 ${python_libs}\"\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ${version}\" >&5\n-$as_echo_n \"checking for ${version}... \" >&6; }\n-  save_CPPFLAGS=$CPPFLAGS\n-  save_LIBS=$LIBS\n-  CPPFLAGS=\"$CPPFLAGS $new_CPPFLAGS\"\n-  LIBS=\"$new_LIBS $LIBS\"\n-  found_usable_python=no\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-#include \"Python.h\"\n-int\n-main ()\n-{\n-Py_Initialize ();\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_c_try_link \"$LINENO\"; then :\n-  have_libpython=${version}\n-                  found_usable_python=yes\n-                  PYTHON_CPPFLAGS=$new_CPPFLAGS\n-                  PYTHON_LIBS=$new_LIBS\n-fi\n rm -f core conftest.err conftest.$ac_objext \\\n     conftest$ac_exeext conftest.$ac_ext\n   CPPFLAGS=$save_CPPFLAGS\n@@ -10742,14 +10666,6 @@ $as_echo \"#define HAVE_LIBPYTHON2_7 1\" >>confdefs.h\n \n $as_echo \"#define HAVE_LIBPYTHON2_6 1\" >>confdefs.h\n \n-  elif test \"${have_libpython}\" = python2.5 -o \"${have_libpython}\" = python25; then\n-\n-$as_echo \"#define HAVE_LIBPYTHON2_5 1\" >>confdefs.h\n-\n-  elif test \"${have_libpython}\" = python2.4 -o \"${have_libpython}\" = python24; then\n-\n-$as_echo \"#define HAVE_LIBPYTHON2_4 1\" >>confdefs.h\n-\n   fi\n \n   if test \"${have_libpython}\" = no; then\n@@ -11477,8 +11393,8 @@ fi\n \n SRCHIGH_LIBS=\n SRCHIGH_CFLAGS=\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for source highlight\" >&5\n-$as_echo_n \"checking for source highlight... \" >&6; }\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for the source-highlight library\" >&5\n+$as_echo_n \"checking for the source-highlight library... \" >&6; }\n if test \"${pkg_config_prog_path}\" = \"missing\"; then\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no - pkg-config not found\" >&5\n $as_echo \"no - pkg-config not found\" >&6; }"
    },
    {
      "sha": "8ddd0fda61c528b86fa2beb99bc0b502f07d5d04",
      "filename": "gdb/configure.ac",
      "status": "modified",
      "additions": 2,
      "deletions": 14,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.ac?ref=6c28e44a359e9f6cf455ddff0009ca99406f7224",
      "patch": "@@ -734,7 +734,7 @@ dnl no -   Don't include python support.\n dnl yes -  Include python support, error if it's missing.\n dnl        If we find python in $PATH, use it to fetch configure options,\n dnl        otherwise assume the compiler can find it with no help from us.\n-dnl        Python 2.7, 2.6, 2.5, and then 2.4 are tried in turn.\n+dnl        Python 2.7 and 2.6 are tried in turn.\n dnl auto - Same as \"yes\", but if python is missing from the system,\n dnl        fall back to \"no\".\n dnl /path/to/python/exec-prefix -\n@@ -743,7 +743,7 @@ dnl        If /path/to/python/exec-prefix/bin/python exists, use it to find\n dnl        the compilation parameters.  Otherwise use\n dnl        -I/path/to/python/exec-prefix/include,\n dnl        -L/path/to/python/exec-prefix/lib.\n-dnl        Python 2.7, 2.6, 2.5, and then 2.4 are tried in turn.\n+dnl        Python 2.7 and 2.6 are tried in turn.\n dnl        NOTE: This case is historical.  It is what was done for 7.0/7.1\n dnl        but is deprecated.\n dnl /path/to/python/executable -\n@@ -911,23 +911,11 @@ else\n       AC_TRY_LIBPYTHON(python2.6, have_libpython,\n                        ${python_includes}, \"-lpython2.6 ${python_libs}\")\n     fi\n-    if test ${have_libpython} = no; then\n-      AC_TRY_LIBPYTHON(python2.5, have_libpython,\n-                       ${python_includes}, \"-lpython2.5 ${python_libs}\")\n-    fi\n-    if test ${have_libpython} = no; then\n-      AC_TRY_LIBPYTHON(python2.4, have_libpython,\n-                       ${python_includes}, \"-lpython2.4 ${python_libs}\")\n-    fi\n   fi\n   if test \"${have_libpython}\" = python2.7 -o \"${have_libpython}\" = python27; then\n     AC_DEFINE(HAVE_LIBPYTHON2_7, 1, [Define if Python 2.7 is being used.])\n   elif test \"${have_libpython}\" = python2.6 -o \"${have_libpython}\" = python26; then\n     AC_DEFINE(HAVE_LIBPYTHON2_6, 1, [Define if Python 2.6 is being used.])\n-  elif test \"${have_libpython}\" = python2.5 -o \"${have_libpython}\" = python25; then\n-    AC_DEFINE(HAVE_LIBPYTHON2_5, 1, [Define if Python 2.5 is being used.])\n-  elif test \"${have_libpython}\" = python2.4 -o \"${have_libpython}\" = python24; then\n-    AC_DEFINE(HAVE_LIBPYTHON2_4, 1, [Define if Python 2.4 is being used.])\n   fi\n \n   if test \"${have_libpython}\" = no; then"
    },
    {
      "sha": "ba3b4f0fc38f19973bc866526df21203d12ac57b",
      "filename": "gdb/python/py-breakpoint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/python/py-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/python/py-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-breakpoint.c?ref=6c28e44a359e9f6cf455ddff0009ca99406f7224",
      "patch": "@@ -1138,19 +1138,15 @@ gdbpy_initialize_breakpoints (void)\n   /* Add breakpoint types constants.  */\n   for (i = 0; pybp_codes[i].name; ++i)\n     {\n-      if (PyModule_AddIntConstant (gdb_module,\n-\t\t\t\t   /* Cast needed for Python 2.4.  */\n-\t\t\t\t   (char *) pybp_codes[i].name,\n+      if (PyModule_AddIntConstant (gdb_module, pybp_codes[i].name,\n \t\t\t\t   pybp_codes[i].code) < 0)\n \treturn -1;\n     }\n \n   /* Add watchpoint types constants.  */\n   for (i = 0; pybp_watch_types[i].name; ++i)\n     {\n-      if (PyModule_AddIntConstant (gdb_module,\n-\t\t\t\t   /* Cast needed for Python 2.4.  */\n-\t\t\t\t   (char *) pybp_watch_types[i].name,\n+      if (PyModule_AddIntConstant (gdb_module, pybp_watch_types[i].name,\n \t\t\t\t   pybp_watch_types[i].code) < 0)\n \treturn -1;\n     }"
    },
    {
      "sha": "72fbf6d90b93f07ecff987e9d174d0cc15a10408",
      "filename": "gdb/python/py-inferior.c",
      "status": "modified",
      "additions": 1,
      "deletions": 10,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/python/py-inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/python/py-inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-inferior.c?ref=6c28e44a359e9f6cf455ddff0009ca99406f7224",
      "patch": "@@ -1002,20 +1002,11 @@ static PyBufferProcs buffer_procs =\n \n #else\n \n-/* Python doesn't provide a decent way to get compatibility here.  */\n-#if HAVE_LIBPYTHON2_4\n-#define CHARBUFFERPROC_NAME getcharbufferproc\n-#else\n-#define CHARBUFFERPROC_NAME charbufferproc\n-#endif\n-\n static PyBufferProcs buffer_procs = {\n   get_read_buffer,\n   get_write_buffer,\n   get_seg_count,\n-  /* The cast here works around a difference between Python 2.4 and\n-     Python 2.5.  */\n-  (CHARBUFFERPROC_NAME) get_char_buffer\n+  get_char_buffer\n };\n #endif\t/* IS_PY3K */\n "
    },
    {
      "sha": "b069ca3a9f94428e88e21e6947131d8d9739d195",
      "filename": "gdb/python/py-prettyprint.c",
      "status": "modified",
      "additions": 0,
      "deletions": 94,
      "changes": 94,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/python/py-prettyprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/python/py-prettyprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-prettyprint.c?ref=6c28e44a359e9f6cf455ddff0009ca99406f7224",
      "patch": "@@ -350,88 +350,6 @@ print_string_repr (PyObject *printer, const char *hint,\n   return result;\n }\n \n-#ifndef IS_PY3K\n-\n-/* Create a dummy PyFrameObject, needed to work around\n-   a Python-2.4 bug with generators.  */\n-class dummy_python_frame\n-{\n- public:\n-\n-  dummy_python_frame ();\n-\n-  ~dummy_python_frame ()\n-  {\n-    if (m_valid)\n-      m_tstate->frame = m_saved_frame;\n-  }\n-\n-  bool failed () const\n-  {\n-    return !m_valid;\n-  }\n-\n- private:\n-\n-  bool m_valid;\n-  PyFrameObject *m_saved_frame;\n-  gdbpy_ref<> m_frame;\n-  PyThreadState *m_tstate;\n-};\n-\n-dummy_python_frame::dummy_python_frame ()\n-: m_valid (false),\n-  m_saved_frame (NULL),\n-  m_tstate (NULL)\n-{\n-  PyCodeObject *code;\n-  PyFrameObject *frame;\n-\n-  gdbpy_ref<> empty_string (PyString_FromString (\"\"));\n-  if (empty_string == NULL)\n-    return;\n-\n-  gdbpy_ref<> null_tuple (PyTuple_New (0));\n-  if (null_tuple == NULL)\n-    return;\n-\n-  code = PyCode_New (0,\t\t\t  /* argcount */\n-\t\t     0,\t\t\t  /* locals */\n-\t\t     0,\t\t\t  /* stacksize */\n-\t\t     0,\t\t\t  /* flags */\n-\t\t     empty_string.get (), /* code */\n-\t\t     null_tuple.get (),\t  /* consts */\n-\t\t     null_tuple.get (),\t  /* names */\n-\t\t     null_tuple.get (),\t  /* varnames */\n-#if PYTHON_API_VERSION >= 1010\n-\t\t     null_tuple.get (),\t  /* freevars */\n-\t\t     null_tuple.get (),\t  /* cellvars */\n-#endif\n-\t\t     empty_string.get (), /* filename */\n-\t\t     empty_string.get (), /* name */\n-\t\t     1,\t\t\t  /* firstlineno */\n-\t\t     empty_string.get ()  /* lnotab */\n-\t\t     );\n-  if (code == NULL)\n-    return;\n-  gdbpy_ref<> code_holder ((PyObject *) code);\n-\n-  gdbpy_ref<> globals (PyDict_New ());\n-  if (globals == NULL)\n-    return;\n-\n-  m_tstate = PyThreadState_GET ();\n-  frame = PyFrame_New (m_tstate, code, globals.get (), NULL);\n-  if (frame == NULL)\n-    return;\n-\n-  m_frame.reset ((PyObject *) frame);\n-  m_tstate->frame = frame;\n-  m_saved_frame = frame->f_back;\n-  m_valid = true;\n-}\n-#endif\n-\n /* Helper for gdbpy_apply_val_pretty_printer that formats children of the\n    printer, if any exist.  If is_py_none is true, then nothing has\n    been printed by to_string, and format output accordingly. */\n@@ -480,18 +398,6 @@ print_children (PyObject *printer, const char *hint,\n \tpretty = options->prettyformat_structs;\n     }\n \n-  /* Manufacture a dummy Python frame to work around Python 2.4 bug,\n-     where it insists on having a non-NULL tstate->frame when\n-     a generator is called.  */\n-#ifndef IS_PY3K\n-  dummy_python_frame frame;\n-  if (frame.failed ())\n-    {\n-      gdbpy_print_stack ();\n-      return;\n-    }\n-#endif\n-\n   done_flag = 0;\n   for (i = 0; i < options->print_max; ++i)\n     {"
    },
    {
      "sha": "c908ec62de60e7fa14ceed22d0467f820fe9384f",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=6c28e44a359e9f6cf455ddff0009ca99406f7224",
      "patch": "@@ -198,9 +198,7 @@ convert_field (struct type *type, int field)\n       if (arg == NULL)\n \treturn NULL;\n \n-      /* At least python-2.4 had the second parameter non-const.  */\n-      if (PyObject_SetAttrString (result.get (), (char *) attrstring,\n-\t\t\t\t  arg.get ()) < 0)\n+      if (PyObject_SetAttrString (result.get (), attrstring, arg.get ()) < 0)\n \treturn NULL;\n     }\n \n@@ -1408,9 +1406,7 @@ gdbpy_initialize_types (void)\n \n   for (i = 0; pyty_codes[i].name; ++i)\n     {\n-      if (PyModule_AddIntConstant (gdb_module,\n-\t\t\t\t   /* Cast needed for Python 2.4.  */\n-\t\t\t\t   (char *) pyty_codes[i].name,\n+      if (PyModule_AddIntConstant (gdb_module, pyty_codes[i].name,\n \t\t\t\t   pyty_codes[i].code) < 0)\n \treturn -1;\n     }"
    },
    {
      "sha": "a380b34afe85410ccce6eac68a0224609b85b502",
      "filename": "gdb/python/py-utils.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/python/py-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/python/py-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-utils.c?ref=6c28e44a359e9f6cf455ddff0009ca99406f7224",
      "patch": "@@ -382,8 +382,7 @@ gdb_pymodule_addobject (PyObject *module, const char *name, PyObject *object)\n   int result;\n \n   Py_INCREF (object);\n-  /* Python 2.4 did not have a 'const' here.  */\n-  result = PyModule_AddObject (module, (char *) name, object);\n+  result = PyModule_AddObject (module, name, object);\n   if (result < 0)\n     Py_DECREF (object);\n   return result;"
    },
    {
      "sha": "63a9952e513a6ed35bc08dac4fe376b4cc7a090c",
      "filename": "gdb/python/py-value.c",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/python/py-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/python/py-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-value.c?ref=6c28e44a359e9f6cf455ddff0009ca99406f7224",
      "patch": "@@ -2001,10 +2001,7 @@ static PyNumberMethods value_object_as_number = {\n   valpy_divide,               /* nb_true_divide */\n   NULL,\t\t\t      /* nb_inplace_floor_divide */\n   NULL,\t\t\t      /* nb_inplace_true_divide */\n-#ifndef HAVE_LIBPYTHON2_4\n-  /* This was added in Python 2.5.  */\n   valpy_long,\t\t      /* nb_index */\n-#endif /* HAVE_LIBPYTHON2_4 */\n };\n \n static PyMappingMethods value_object_as_mapping = {"
    },
    {
      "sha": "449926ca8744e4d3ce7d75b4aab0211c2d5959fd",
      "filename": "gdb/python/python-internal.h",
      "status": "modified",
      "additions": 1,
      "deletions": 52,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/python/python-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/python/python-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python-internal.h?ref=6c28e44a359e9f6cf455ddff0009ca99406f7224",
      "patch": "@@ -51,8 +51,6 @@\n #define CPYCHECKER_NEGATIVE_RESULT_SETS_EXCEPTION\n #endif\n \n-/* Python 2.4 doesn't include stdint.h soon enough to get {u,}intptr_t\n-   needed by pyport.h.  */\n /* /usr/include/features.h on linux systems will define _POSIX_C_SOURCE\n    if it sees _GNU_SOURCE (which config.h will define).\n    pyconfig.h defines _POSIX_C_SOURCE to a different value than\n@@ -109,26 +107,6 @@\n #define PyString_Check PyUnicode_Check\n #endif\n \n-#if HAVE_LIBPYTHON2_4\n-/* Py_ssize_t is not defined until 2.5.\n-   Logical type for Py_ssize_t is Py_intptr_t, but that fails in 64-bit\n-   compilation due to several apparent mistakes in python2.4 API, so we\n-   use 'int' instead.  */\n-typedef int Py_ssize_t;\n-#endif\n-\n-#ifndef PyVarObject_HEAD_INIT\n-/* Python 2.4 does not define PyVarObject_HEAD_INIT.  */\n-#define PyVarObject_HEAD_INIT(type, size)       \\\n-    PyObject_HEAD_INIT(type) size,\n-\n-#endif\n-\n-#ifndef Py_TYPE\n-/* Python 2.4 does not define Py_TYPE.  */\n-#define Py_TYPE(ob)             (((PyObject*)(ob))->ob_type)\n-#endif\n-\n /* If Python.h does not define WITH_THREAD, then the various\n    GIL-related functions will not be defined.  However,\n    PyGILState_STATE will be.  */\n@@ -183,41 +161,12 @@ typedef long Py_hash_t;\n static inline void\n gdb_Py_DECREF (void *op) /* ARI: editCase function */\n {\n-  /* ... and Python 2.4 didn't cast OP to PyObject pointer on the\n-     '(op)->ob_refcnt' references within the macro.  Cast it ourselves\n-     too.  */\n-  Py_DECREF ((PyObject *) op);\n+  Py_DECREF (op);\n }\n \n #undef Py_DECREF\n #define Py_DECREF(op) gdb_Py_DECREF (op)\n \n-/* The second argument to PyObject_GetAttrString was missing the 'const'\n-   qualifier in Python-2.4.  Hence, we wrap it in a function to avoid errors\n-   when compiled with -Werror.  */\n-\n-static inline PyObject *\n-gdb_PyObject_GetAttrString (PyObject *obj,\n-\t\t\t    const char *attr) /* ARI: editCase function */\n-{\n-  return PyObject_GetAttrString (obj, (char *) attr);\n-}\n-\n-#define PyObject_GetAttrString(obj, attr) gdb_PyObject_GetAttrString (obj, attr)\n-\n-/* The second argument to PyObject_HasAttrString was also missing the 'const'\n-   qualifier in Python-2.4.  Hence, we wrap it also in a function to avoid\n-   errors when compiled with -Werror.  */\n-\n-static inline int\n-gdb_PyObject_HasAttrString (PyObject *obj,\n-\t\t\t    const char *attr)  /* ARI: editCase function */\n-{\n-  return PyObject_HasAttrString (obj, (char *) attr);\n-}\n-\n-#define PyObject_HasAttrString(obj, attr) gdb_PyObject_HasAttrString (obj, attr)\n-\n /* PyObject_CallMethod's 'method' and 'format' parameters were missing\n    the 'const' qualifier before Python 3.4.  Hence, we wrap the\n    function in our own version to avoid errors with string literals."
    },
    {
      "sha": "0d9415ce8078bde7869ff6eb3d51209849405739",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=6c28e44a359e9f6cf455ddff0009ca99406f7224",
      "patch": "@@ -1646,12 +1646,10 @@ do_start_initialization ()\n   if (gdb_module == NULL)\n     return false;\n \n-  /* The casts to (char*) are for python 2.4.  */\n-  if (PyModule_AddStringConstant (gdb_module, \"VERSION\", (char*) version) < 0\n-      || PyModule_AddStringConstant (gdb_module, \"HOST_CONFIG\",\n-\t\t\t\t     (char*) host_name) < 0\n+  if (PyModule_AddStringConstant (gdb_module, \"VERSION\", version) < 0\n+      || PyModule_AddStringConstant (gdb_module, \"HOST_CONFIG\", host_name) < 0\n       || PyModule_AddStringConstant (gdb_module, \"TARGET_CONFIG\",\n-\t\t\t\t     (char*) target_name) < 0)\n+\t\t\t\t     target_name) < 0)\n     return false;\n \n   /* Add stream constants.  */"
    },
    {
      "sha": "477165a0d876896a7f66947bd6a02891ab64ff9d",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=6c28e44a359e9f6cf455ddff0009ca99406f7224",
      "patch": "@@ -1,3 +1,10 @@\n+2019-02-27  Tom Tromey  <tromey@adacore.com>\n+\n+\t* lib/gdb.exp (skip_python_tests_prompt): Don't check for Python\n+\t2.4.\n+\t* gdb.python/py-finish-breakpoint.exp: Remove Python 2.4\n+\tworkaround.\n+\n 2019-02-27  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.base/align.exp: Extend to compile in both C and C++, and add"
    },
    {
      "sha": "6ffa17a357700a9a95441a0ee86835e91ba7c943",
      "filename": "gdb/testsuite/gdb.python/py-finish-breakpoint.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/testsuite/gdb.python/py-finish-breakpoint.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/testsuite/gdb.python/py-finish-breakpoint.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-finish-breakpoint.exp?ref=6c28e44a359e9f6cf455ddff0009ca99406f7224",
      "patch": "@@ -46,13 +46,6 @@ clean_restart ${testfile}\n \n if { [skip_python_tests] } { continue }\n \n-if { $gdb_py_is_py24 == 1 } {\n-    # Python 2.4, 2.5 do not support the \"ValueError as e\" syntax used in\n-    # the py-finish-breakpoint.py script.\n-\tuntested \"missing support on Python 2.4 and 2.5\"\n-    return 0\n-}\n-\n #\n # Test FinishBreakpoint in normal conditions\n #"
    },
    {
      "sha": "8a83313c2d590900ca339a8e3e06399afd7ef1b3",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 12,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c28e44a359e9f6cf455ddff0009ca99406f7224/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=6c28e44a359e9f6cf455ddff0009ca99406f7224",
      "patch": "@@ -1803,7 +1803,6 @@ proc skip_rust_tests {} {\n \n proc skip_python_tests_prompt { prompt_regexp } {\n     global gdb_py_is_py3k\n-    global gdb_py_is_py24\n \n     gdb_test_multiple \"python print ('test')\" \"verify python support\" {\n \t-re \"not supported.*$prompt_regexp\" {\n@@ -1813,7 +1812,6 @@ proc skip_python_tests_prompt { prompt_regexp } {\n \t-re \"$prompt_regexp\" {}\n     }\n \n-    set gdb_py_is_py24 0\n     gdb_test_multiple \"python print (sys.version_info\\[0\\])\" \"check if python 3\" {\n \t-re \"3.*$prompt_regexp\" {\n             set gdb_py_is_py3k 1\n@@ -1822,16 +1820,6 @@ proc skip_python_tests_prompt { prompt_regexp } {\n             set gdb_py_is_py3k 0\n         }\n     }\n-    if { $gdb_py_is_py3k == 0 } {\n-        gdb_test_multiple \"python print (sys.version_info\\[1\\])\" \"check if python 2.4\" {\n-\t    -re \"\\[45\\].*$prompt_regexp\" {\n-                set gdb_py_is_py24 1\n-            }\n-\t    -re \".*$prompt_regexp\" {\n-                set gdb_py_is_py24 0\n-            }\n-        }\n-    }\n \n     return 0\n }"
    }
  ]
}