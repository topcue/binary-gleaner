{
  "sha": "3d4560f707b077adfb54759df5efbd96301ca2d8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2Q0NTYwZjcwN2IwNzdhZGZiNTQ3NTlkZjVlZmJkOTYzMDFjYTJkOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-12T22:45:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-12T22:51:58Z"
    },
    "message": "Move the frame data to the BFD when possible\n\nNow that comp_unit and the remaining frame data are all independent of\nthe objfile, it can all be stored on the BFD and shared across\ninferiors.\n\nAs with other code doing this same thing, care must be taken to not\nshare the data when the objfile requires relocations.  So, two keys\nare used: one for the BFD and one for the objfile, and\ngdb_bfd_requires_relocations is used to differentiate between the two\ncases.\n\ngdb/ChangeLog\n2020-02-12  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/frame.c (dwarf2_frame_bfd_data): New global.\n\t(dwarf2_frame_objfile_data): Add comment.\n\t(find_comp_unit, set_comp_unit): New functions.\n\t(dwarf2_frame_find_fde): Use find_comp_unit.\n\t(dwarf2_build_frame_info): Use set_comp_unit.",
    "tree": {
      "sha": "c9ef758cce6c2d290761a69477f7a41ca133720e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c9ef758cce6c2d290761a69477f7a41ca133720e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3d4560f707b077adfb54759df5efbd96301ca2d8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d4560f707b077adfb54759df5efbd96301ca2d8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3d4560f707b077adfb54759df5efbd96301ca2d8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d4560f707b077adfb54759df5efbd96301ca2d8/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "219823045622bd111d68b984e31aa7b1712d5e10",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/219823045622bd111d68b984e31aa7b1712d5e10",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/219823045622bd111d68b984e31aa7b1712d5e10"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 42,
    "deletions": 5
  },
  "files": [
    {
      "sha": "f9dd0b63704d4818df7950867d100a279926161f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d4560f707b077adfb54759df5efbd96301ca2d8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d4560f707b077adfb54759df5efbd96301ca2d8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3d4560f707b077adfb54759df5efbd96301ca2d8",
      "patch": "@@ -1,3 +1,11 @@\n+2020-02-12  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/frame.c (dwarf2_frame_bfd_data): New global.\n+\t(dwarf2_frame_objfile_data): Add comment.\n+\t(find_comp_unit, set_comp_unit): New functions.\n+\t(dwarf2_frame_find_fde): Use find_comp_unit.\n+\t(dwarf2_build_frame_info): Use set_comp_unit.\n+\n 2020-02-12  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/frame.c (struct comp_unit) <objfile>: Remove."
    },
    {
      "sha": "b240a25e2d835008f32ac62d6820defc89329ca5",
      "filename": "gdb/dwarf2/frame.c",
      "status": "modified",
      "additions": 34,
      "deletions": 5,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d4560f707b077adfb54759df5efbd96301ca2d8/gdb/dwarf2/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d4560f707b077adfb54759df5efbd96301ca2d8/gdb/dwarf2/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/frame.c?ref=3d4560f707b077adfb54759df5efbd96301ca2d8",
      "patch": "@@ -1480,8 +1480,14 @@ dwarf2_frame_cfa (struct frame_info *this_frame)\n   return get_frame_base (this_frame);\n }\n \f\n-static const struct objfile_key<comp_unit> dwarf2_frame_objfile_data;\n-\n+/* We store the frame data on the BFD.  This is only done if it is\n+   independent of the address space and so can be shared.  */\n+static const struct bfd_key<comp_unit> dwarf2_frame_bfd_data;\n+\n+/* If any BFD sections require relocations (note; really should be if\n+   any debug info requires relocations), then we store the frame data\n+   on the objfile instead, and do not share it.  */\n+const struct objfile_key<comp_unit> dwarf2_frame_objfile_data;\n \f\n \n /* Pointer encoding helper functions.  */\n@@ -1635,6 +1641,29 @@ bsearch_fde_cmp (const dwarf2_fde *fde, CORE_ADDR seek_pc)\n   return 1;\n }\n \n+/* Find an existing comp_unit for an objfile, if any.  */\n+\n+static comp_unit *\n+find_comp_unit (struct objfile *objfile)\n+{\n+  bfd *abfd = objfile->obfd;\n+  if (gdb_bfd_requires_relocations (abfd))\n+    return dwarf2_frame_bfd_data.get (abfd);\n+  return dwarf2_frame_objfile_data.get (objfile);\n+}\n+\n+/* Store the comp_unit on OBJFILE, or the corresponding BFD, as\n+   appropriate.  */\n+\n+static void\n+set_comp_unit (struct objfile *objfile, struct comp_unit *unit)\n+{\n+  bfd *abfd = objfile->obfd;\n+  if (gdb_bfd_requires_relocations (abfd))\n+    return dwarf2_frame_bfd_data.set (abfd, unit);\n+  return dwarf2_frame_objfile_data.set (objfile, unit);\n+}\n+\n /* Find the FDE for *PC.  Return a pointer to the FDE, and store the\n    initial location associated with it into *PC.  */\n \n@@ -1646,11 +1675,11 @@ dwarf2_frame_find_fde (CORE_ADDR *pc, CORE_ADDR *out_offset)\n       CORE_ADDR offset;\n       CORE_ADDR seek_pc;\n \n-      comp_unit *unit = dwarf2_frame_objfile_data.get (objfile);\n+      comp_unit *unit = find_comp_unit (objfile);\n       if (unit == NULL)\n \t{\n \t  dwarf2_build_frame_info (objfile);\n-\t  unit = dwarf2_frame_objfile_data.get (objfile);\n+\t  unit = find_comp_unit (objfile);\n \t}\n       gdb_assert (unit != NULL);\n \n@@ -2262,7 +2291,7 @@ dwarf2_build_frame_info (struct objfile *objfile)\n     }\n   unit->fde_table.shrink_to_fit ();\n \n-  dwarf2_frame_objfile_data.set (objfile, unit.release ());\n+  set_comp_unit (objfile, unit.release ());\n }\n \n /* Handle 'maintenance show dwarf unwinders'.  */"
    }
  ]
}