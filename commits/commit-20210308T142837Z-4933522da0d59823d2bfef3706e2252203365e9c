{
  "sha": "4933522da0d59823d2bfef3706e2252203365e9c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDkzMzUyMmRhMGQ1OTgyM2QyYmZlZjM3MDZlMjI1MjIwMzM2NWU5Yw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:37Z"
    },
    "message": "Add completion for operations\n\nThis patch adds the necessary support for field name completion for\nexpressions using class operation.\n\nThis patch takes an approach similar to what is done today.  It might\nbe good, in the future, to change completion to be a method on the\nbase class, to enable context-sensitive completion in more areas.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* parser-defs.h (struct expr_completion_state) <expout_last_op>:\n\tNew member.\n\t(struct parser_state) <mark_struct_expression>: New method.\n\t* parse.c (parser_state::mark_struct_expression): Update assert.\n\t(parser_state::mark_struct_expression): New method.\n\t(parser_state::mark_completion_tag): Update assert.\n\t(parse_expression_for_completion): Handle expout_last_op.",
    "tree": {
      "sha": "6d388690c17f9c42a69005c8a59d5dcb7bf23516",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6d388690c17f9c42a69005c8a59d5dcb7bf23516"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4933522da0d59823d2bfef3706e2252203365e9c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4933522da0d59823d2bfef3706e2252203365e9c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4933522da0d59823d2bfef3706e2252203365e9c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4933522da0d59823d2bfef3706e2252203365e9c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "413403fc34156cf695b09553fca91e0990520787",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/413403fc34156cf695b09553fca91e0990520787",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/413403fc34156cf695b09553fca91e0990520787"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 45,
    "deletions": 2
  },
  "files": [
    {
      "sha": "3436e4e83fc2bc56f1743f6c86a1ad2370dc5054",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4933522da0d59823d2bfef3706e2252203365e9c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4933522da0d59823d2bfef3706e2252203365e9c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4933522da0d59823d2bfef3706e2252203365e9c",
      "patch": "@@ -1,3 +1,13 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* parser-defs.h (struct expr_completion_state) <expout_last_op>:\n+\tNew member.\n+\t(struct parser_state) <mark_struct_expression>: New method.\n+\t* parse.c (parser_state::mark_struct_expression): Update assert.\n+\t(parser_state::mark_struct_expression): New method.\n+\t(parser_state::mark_completion_tag): Update assert.\n+\t(parse_expression_for_completion): Handle expout_last_op.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* ada-exp.h (class ada_var_value_operation) <get_symbol>: Remove;"
    },
    {
      "sha": "79b1ca1612127beb485d7efaca299be368dc40c4",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 24,
      "deletions": 2,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4933522da0d59823d2bfef3706e2252203365e9c/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4933522da0d59823d2bfef3706e2252203365e9c/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=4933522da0d59823d2bfef3706e2252203365e9c",
      "patch": "@@ -507,10 +507,23 @@ parser_state::mark_struct_expression ()\n {\n   gdb_assert (parse_completion\n \t      && (m_completion_state.expout_tag_completion_type\n-\t\t  == TYPE_CODE_UNDEF));\n+\t\t  == TYPE_CODE_UNDEF)\n+\t      && m_completion_state.expout_last_op == nullptr);\n   m_completion_state.expout_last_struct = expout_ptr;\n }\n \n+/* See parser-defs.h.  */\n+\n+void\n+parser_state::mark_struct_expression (expr::structop_base_operation *op)\n+{\n+  gdb_assert (parse_completion\n+\t      && (m_completion_state.expout_tag_completion_type\n+\t\t  == TYPE_CODE_UNDEF)\n+\t      && m_completion_state.expout_last_struct == -1);\n+  m_completion_state.expout_last_op = op;\n+}\n+\n /* Indicate that the current parser invocation is completing a tag.\n    TAG is the type code of the tag, and PTR and LENGTH represent the\n    start of the tag name.  */\n@@ -523,7 +536,8 @@ parser_state::mark_completion_tag (enum type_code tag, const char *ptr,\n \t      && (m_completion_state.expout_tag_completion_type\n \t\t  == TYPE_CODE_UNDEF)\n \t      && m_completion_state.expout_completion_name == NULL\n-\t      && m_completion_state.expout_last_struct == -1);\n+\t      && m_completion_state.expout_last_struct == -1\n+\t      && m_completion_state.expout_last_op == nullptr);\n   gdb_assert (tag == TYPE_CODE_UNION\n \t      || tag == TYPE_CODE_STRUCT\n \t      || tag == TYPE_CODE_ENUM);\n@@ -1262,6 +1276,14 @@ parse_expression_for_completion (const char *string,\n       return NULL;\n     }\n \n+  if (cstate.expout_last_op != nullptr)\n+    {\n+      expr::structop_base_operation *op = cstate.expout_last_op;\n+      const std::string &fld = op->get_string ();\n+      *name = make_unique_xstrdup (fld.c_str ());\n+      return value_type (op->evaluate_lhs (exp.get ()));\n+    }\n+\n   if (cstate.expout_last_struct == -1)\n     return NULL;\n "
    },
    {
      "sha": "9f70ff9dca7aa3a005dd9125df65e0f36b723ed8",
      "filename": "gdb/parser-defs.h",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4933522da0d59823d2bfef3706e2252203365e9c/gdb/parser-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4933522da0d59823d2bfef3706e2252203365e9c/gdb/parser-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parser-defs.h?ref=4933522da0d59823d2bfef3706e2252203365e9c",
      "patch": "@@ -25,6 +25,7 @@\n \n #include \"expression.h\"\n #include \"symtab.h\"\n+#include \"expop.h\"\n \n struct block;\n struct language_defn;\n@@ -93,6 +94,11 @@ struct expr_completion_state\n      field name.  It is -1 if no dereference operation was found.  */\n   int expout_last_struct = -1;\n \n+  /* The last struct expression directly before a '.' or '->'.  This\n+     is set when parsing and is only used when completing a field\n+     name.  It is nullptr if no dereference operation was found.  */\n+  expr::structop_base_operation *expout_last_op = nullptr;\n+\n   /* If we are completing a tagged type name, this will be nonzero.  */\n   enum type_code expout_tag_completion_type = TYPE_CODE_UNDEF;\n \n@@ -156,6 +162,11 @@ struct parser_state : public expr_builder\n \n   void mark_struct_expression ();\n \n+  /* Mark the given operation as the starting location of a structure\n+     expression.  This is used when completing on field names.  */\n+\n+  void mark_struct_expression (expr::structop_base_operation *op);\n+\n   /* Indicate that the current parser invocation is completing a tag.\n      TAG is the type code of the tag, and PTR and LENGTH represent the\n      start of the tag name.  */"
    }
  ]
}