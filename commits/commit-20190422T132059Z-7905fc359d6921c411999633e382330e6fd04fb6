{
  "sha": "7905fc359d6921c411999633e382330e6fd04fb6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzkwNWZjMzU5ZDY5MjFjNDExOTk5NjMzZTM4MjMzMGU2ZmQwNGZiNg==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-04-22T13:20:59Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-04-22T13:20:59Z"
    },
    "message": "Fix \"nosharedlibrary + continue + shared lib event\" crash\n\nOn systems that use the probes-based solib interface, GDB misbehaves\nif you run the \"nosharelibrary\" command, continue execution, and then\nthe program hits the shared library event breakpoint.  On my system it\naborts like this:\n\n (gdb) nosharedlibrary\n (gdb) c\n Continuing.\n pure virtual method called\n terminate called without an active exception\n Aborted (core dumped)\n\nThough it's really undefined behavior territory, caused by deferencing\na dangling solib event probe pointer.\n\nI've observed this by running \"nosharedlibrary\" when stopped at the\nentry point, but it should happen at any other point, if the program\ndoes a dlopen/dlclose after.\n\nThe fix is to discard an objfile's probes from the svr4 probes table\nwhen an objfile is about to be released.\n\nNew test included, works with both native and gdbserver testing.\n\nValgrind log:\n\n (gdb) starti\n (gdb) nosharedlibrary\n (gdb) c\n Continuing.\n ==24895== Invalid read of size 8\n ==24895==    at 0x89E5FB: solib_event_probe_action(probe_and_action*) (solib-svr4.c:1735)\n ==24895==    by 0x89E95A: svr4_handle_solib_event() (solib-svr4.c:1872)\n ==24895==    by 0x8A7198: handle_solib_event() (solib.c:1274)\n ==24895==    by 0x4E3407: bpstat_stop_status(address_space const*, unsigned long, thread_info*, target_waitstatus const*, bpstats*) (breakpoint.c:5407)\n ==24895==    by 0x721F41: handle_signal_stop(execution_control_state*) (infrun.c:5685)\n ==24895==    by 0x720B11: handle_inferior_event(execution_control_state*) (infrun.c:5129)\n ==24895==    by 0x71DD93: fetch_inferior_event(void*) (infrun.c:3748)\n ==24895==    by 0x7059C3: inferior_event_handler(inferior_event_type, void*) (inf-loop.c:43)\n ==24895==    by 0x874DF0: remote_async_serial_handler(serial*, void*) (remote.c:14039)\n ==24895==    by 0x894101: run_async_handler_and_reschedule(serial*) (ser-base.c:137)\n ==24895==    by 0x8941E6: fd_event(int, void*) (ser-base.c:188)\n ==24895==    by 0x67AFEF: handle_file_event(file_handler*, int) (event-loop.c:732)\n ==24895==  Address 0x18b63860 is 0 bytes inside a block of size 136 free'd\n ==24895==    at 0x4C2E616: operator delete(void*, unsigned long) (vg_replace_malloc.c:585)\n ==24895==    by 0x8C6A12: stap_probe::~stap_probe() (stap-probe.c:124)\n ==24895==    by 0x66F7DB: probe_key_free(bfd*, void*) (elfread.c:1382)\n ==24895==    by 0x69B705: bfdregistry_callback_adaptor(void (*)(registry_container*, void*), registry_container*, void*) (gdb_bfd.c:131)\n ==24895==    by 0x855A57: registry_clear_data(registry_data_registry*, void (*)(void (*)(registry_container*, void*), registry_container*, void*), registry_container*, registry_fields*) (registry.c:79)\n ==24895==    by 0x855B01: registry_container_free_data(registry_data_registry*, void (*)(void (*)(registry_container*, void*), registry_container*, void*), registry_container*, registry_fields*) (registry.c:92)\n ==24895==    by 0x69B783: bfd_free_data(bfd*) (gdb_bfd.c:131)\n ==24895==    by 0x69C4BA: gdb_bfd_unref(bfd*) (gdb_bfd.c:609)\n ==24895==    by 0x7CC33F: objfile::~objfile() (objfiles.c:651)\n ==24895==    by 0x7CD559: objfile_purge_solibs() (objfiles.c:1021)\n ==24895==    by 0x8A7132: no_shared_libraries(char const*, int) (solib.c:1252)\n ==24895==    by 0x548E3D: do_const_cfunc(cmd_list_element*, char const*, int) (cli-decode.c:106)\n ==24895==  Block was alloc'd at\n ==24895==    at 0x4C2D42A: operator new(unsigned long) (vg_replace_malloc.c:334)\n ==24895==    by 0x8C527C: handle_stap_probe(objfile*, sdt_note*, std::vector<probe*, std::allocator<probe*> >*, unsigned long) (stap-probe.c:1561)\n ==24895==    by 0x8C5535: stap_static_probe_ops::get_probes(std::vector<probe*, std::allocator<probe*> >*, objfile*) const (stap-probe.c:1656)\n ==24895==    by 0x66F71B: elf_get_probes(objfile*) (elfread.c:1365)\n ==24895==    by 0x7EDD85: find_probes_in_objfile(objfile*, char const*, char const*) (probe.c:227)\n ==24895==    by 0x4DF382: create_longjmp_master_breakpoint() (breakpoint.c:3275)\n ==24895==    by 0x4F6562: breakpoint_re_set() (breakpoint.c:13828)\n ==24895==    by 0x8A66AA: solib_add(char const*, int, int) (solib.c:1010)\n ==24895==    by 0x89F7C6: enable_break(svr4_info*, int) (solib-svr4.c:2360)\n ==24895==    by 0x8A104C: svr4_solib_create_inferior_hook(int) (solib-svr4.c:2992)\n ==24895==    by 0x8A70B9: solib_create_inferior_hook(int) (solib.c:1215)\n ==24895==    by 0x70C073: post_create_inferior(target_ops*, int) (infcmd.c:467)\n ==24895==\n pure virtual method called\n terminate called without an active exception\n ==24895==\n ==24895== Process terminating with default action of signal 6 (SIGABRT): dumping core\n ==24895==    at 0x7CF3750: raise (raise.c:51)\n ==24895==    by 0x7CF4D30: abort (abort.c:79)\n ==24895==    by 0xB008F4: __gnu_cxx::__verbose_terminate_handler() (in build/gdb/gdb)\n ==24895==    by 0xAFF845: __cxxabiv1::__terminate(void (*)()) (in build/gdb/gdb)\n ==24895==    by 0xAFF890: std::terminate() (in build/gdb/gdb)\n ==24895==    by 0xAFF95E: __cxa_pure_virtual (in build/gdb/gdb)\n ==24895==    by 0x89E610: solib_event_probe_action(probe_and_action*) (solib-svr4.c:1735)\n ==24895==    by 0x89E95A: svr4_handle_solib_event() (solib-svr4.c:1872)\n ==24895==    by 0x8A7198: handle_solib_event() (solib.c:1274)\n ==24895==    by 0x4E3407: bpstat_stop_status(address_space const*, unsigned long, thread_info*, target_waitstatus const*, bpstats*) (breakpoint.c:5407)\n ==24895==    by 0x721F41: handle_signal_stop(execution_control_state*) (infrun.c:5685)\n ==24895==    by 0x720B11: handle_inferior_event(execution_control_state*) (infrun.c:5129)\n ==24895==\n\nNote, this little bit in the patch is just a cleanup that I noticed:\n\n -  lookup.prob = prob;\n    lookup.address = address;\n\nThat line isn't necessary because hashing/comparison only looks at the\naddress.\n\ngdb/ChangeLog:\n2019-04-22  Pedro Alves  <palves@redhat.com>\n\n\t* solib-svr4.c (svr4_free_objfile_observer): New.\n\t(probe_and_action::objfile): New field.\n\t(probes_table_htab_remove_objfile_probes)\n\t(probes_table_remove_objfile_probes): New functions.\n\t(register_solib_event_probe): Add 'objfile' parameter.  Store it\n\tin the new probe_and_action.  Don't store the probe in 'lookup'.\n\t(svr4_create_probe_breakpoints): Pass objfile to\n\tregister_solib_event_probe.\n\t(_initialize_svr4_solib): Register a free_objfile observer.\n\ngdb/testsuite/ChangeLog:\n2019-04-22  Pedro Alves  <palves@redhat.com>\n\n\t* gdb.base/solib-probes-nosharedlibrary.c,\n\tgdb.base/solib-probes-nosharedlibrary.exp: New files.",
    "tree": {
      "sha": "0f3a244806093ebf3563379e57fceaf444a10a15",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0f3a244806093ebf3563379e57fceaf444a10a15"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7905fc359d6921c411999633e382330e6fd04fb6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7905fc359d6921c411999633e382330e6fd04fb6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7905fc359d6921c411999633e382330e6fd04fb6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7905fc359d6921c411999633e382330e6fd04fb6/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "73f8a5908695e96d8ecd5e0fbe9f1ebb16179547",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/73f8a5908695e96d8ecd5e0fbe9f1ebb16179547",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/73f8a5908695e96d8ecd5e0fbe9f1ebb16179547"
    }
  ],
  "stats": {
    "total": 136,
    "additions": 133,
    "deletions": 3
  },
  "files": [
    {
      "sha": "5bd521546dde927250d9f029575b7fe341fb5147",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7905fc359d6921c411999633e382330e6fd04fb6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7905fc359d6921c411999633e382330e6fd04fb6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7905fc359d6921c411999633e382330e6fd04fb6",
      "patch": "@@ -1,3 +1,15 @@\n+2019-04-22  Pedro Alves  <palves@redhat.com>\n+\n+\t* solib-svr4.c (svr4_free_objfile_observer): New.\n+\t(probe_and_action::objfile): New field.\n+\t(probes_table_htab_remove_objfile_probes)\n+\t(probes_table_remove_objfile_probes): New functions.\n+\t(register_solib_event_probe): Add 'objfile' parameter.  Store it\n+\tin the new probe_and_action.  Don't store the probe in 'lookup'.\n+\t(svr4_create_probe_breakpoints): Pass objfile to\n+\tregister_solib_event_probe.\n+\t(_initialize_svr4_solib): Register a free_objfile observer.\n+\n 2019-04-19  Tom Tromey  <tom@tromey.com>\n \n \t* common/queue.h: Remove."
    },
    {
      "sha": "2c79dfec2bb60d68e90995ebff38133aa0ee631d",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 43,
      "deletions": 3,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7905fc359d6921c411999633e382330e6fd04fb6/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7905fc359d6921c411999633e382330e6fd04fb6/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=7905fc359d6921c411999633e382330e6fd04fb6",
      "patch": "@@ -50,6 +50,7 @@ static struct link_map_offsets *svr4_fetch_link_map_offsets (void);\n static int svr4_have_link_map_offsets (void);\n static void svr4_relocate_main_executable (void);\n static void svr4_free_library_list (void *p_list);\n+static void probes_table_remove_objfile_probes (struct objfile *objfile);\n \n /* On SVR4 systems, a list of symbols in the dynamic linker where\n    GDB can try to place a breakpoint to monitor shared library\n@@ -1025,6 +1026,14 @@ struct svr4_library_list\n   CORE_ADDR main_lm;\n };\n \n+/* This module's 'free_objfile' observer.  */\n+\n+static void\n+svr4_free_objfile_observer (struct objfile *objfile)\n+{\n+  probes_table_remove_objfile_probes (objfile);\n+}\n+\n /* Implementation for target_so_ops.free_so.  */\n \n static void\n@@ -1636,6 +1645,9 @@ struct probe_and_action\n \n   /* The action.  */\n   enum probe_action action;\n+\n+  /* The objfile where this probe was found.  */\n+  struct objfile *objfile;\n };\n \n /* Returns a hash code for the probe_and_action referenced by p.  */\n@@ -1660,11 +1672,37 @@ equal_probe_and_action (const void *p1, const void *p2)\n   return pa1->address == pa2->address;\n }\n \n+/* Traversal function for probes_table_remove_objfile_probes.  */\n+\n+static int\n+probes_table_htab_remove_objfile_probes (void **slot, void *info)\n+{\n+  probe_and_action *pa = (probe_and_action *) *slot;\n+  struct objfile *objfile = (struct objfile *) info;\n+\n+  if (pa->objfile == objfile)\n+    htab_clear_slot (get_svr4_info ()->probes_table, slot);\n+\n+  return 1;\n+}\n+\n+/* Remove all probes that belong to OBJFILE from the probes table.  */\n+\n+static void\n+probes_table_remove_objfile_probes (struct objfile *objfile)\n+{\n+  svr4_info *info = get_svr4_info ();\n+  if (info->probes_table != nullptr)\n+    htab_traverse_noresize (info->probes_table,\n+\t\t\t    probes_table_htab_remove_objfile_probes, objfile);\n+}\n+\n /* Register a solib event probe and its associated action in the\n    probes table.  */\n \n static void\n-register_solib_event_probe (probe *prob, CORE_ADDR address,\n+register_solib_event_probe (struct objfile *objfile,\n+\t\t\t    probe *prob, CORE_ADDR address,\n \t\t\t    enum probe_action action)\n {\n   struct svr4_info *info = get_svr4_info ();\n@@ -1677,7 +1715,6 @@ register_solib_event_probe (probe *prob, CORE_ADDR address,\n \t\t\t\t\t    equal_probe_and_action,\n \t\t\t\t\t    xfree, xcalloc, xfree);\n \n-  lookup.prob = prob;\n   lookup.address = address;\n   slot = htab_find_slot (info->probes_table, &lookup, INSERT);\n   gdb_assert (*slot == HTAB_EMPTY_ENTRY);\n@@ -1686,6 +1723,7 @@ register_solib_event_probe (probe *prob, CORE_ADDR address,\n   pa->prob = prob;\n   pa->address = address;\n   pa->action = action;\n+  pa->objfile = objfile;\n \n   *slot = pa;\n }\n@@ -2030,7 +2068,7 @@ svr4_create_probe_breakpoints (struct gdbarch *gdbarch,\n \t  CORE_ADDR address = p->get_relocated_address (objfile);\n \n \t  create_solib_event_breakpoint (gdbarch, address);\n-\t  register_solib_event_probe (p, address, action);\n+\t  register_solib_event_probe (objfile, p, address, action);\n \t}\n     }\n \n@@ -3224,4 +3262,6 @@ _initialize_svr4_solib (void)\n   svr4_so_ops.keep_data_in_core = svr4_keep_data_in_core;\n   svr4_so_ops.update_breakpoints = svr4_update_solib_event_breakpoints;\n   svr4_so_ops.handle_event = svr4_handle_solib_event;\n+\n+  gdb::observers::free_objfile.attach (svr4_free_objfile_observer);\n }"
    },
    {
      "sha": "20bcd25be88a5936498385fa646dc2cea20fc29e",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7905fc359d6921c411999633e382330e6fd04fb6/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7905fc359d6921c411999633e382330e6fd04fb6/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=7905fc359d6921c411999633e382330e6fd04fb6",
      "patch": "@@ -1,3 +1,8 @@\n+2019-04-22  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdb.base/solib-probes-nosharedlibrary.c,\n+\tgdb.base/solib-probes-nosharedlibrary.exp: New files.\n+\n 2019-04-19  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.ada/ptype_union.c: New file."
    },
    {
      "sha": "d94b8074ec0a799ef09a85b0e88fa9446db3035e",
      "filename": "gdb/testsuite/gdb.base/solib-probes-nosharedlibrary.c",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7905fc359d6921c411999633e382330e6fd04fb6/gdb/testsuite/gdb.base/solib-probes-nosharedlibrary.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7905fc359d6921c411999633e382330e6fd04fb6/gdb/testsuite/gdb.base/solib-probes-nosharedlibrary.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/solib-probes-nosharedlibrary.c?ref=7905fc359d6921c411999633e382330e6fd04fb6",
      "patch": "@@ -0,0 +1,22 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+int\n+main ()\n+{\n+  return 0;\n+}"
    },
    {
      "sha": "0d5dc870ad542ae2237542c7e0497c374193b1b7",
      "filename": "gdb/testsuite/gdb.base/solib-probes-nosharedlibrary.exp",
      "status": "added",
      "additions": 51,
      "deletions": 0,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7905fc359d6921c411999633e382330e6fd04fb6/gdb/testsuite/gdb.base/solib-probes-nosharedlibrary.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7905fc359d6921c411999633e382330e6fd04fb6/gdb/testsuite/gdb.base/solib-probes-nosharedlibrary.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/solib-probes-nosharedlibrary.exp?ref=7905fc359d6921c411999633e382330e6fd04fb6",
      "patch": "@@ -0,0 +1,51 @@\n+# Copyright 2005-2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Regression test for a bug where GDB would misbehave (most likely\n+# crash) if you ran the \"nosharelibrary\" command, continued execution,\n+# and then the program hit the shared library event breakpoint.  GDB\n+# would deference a dangling solib event probe pointer.\n+\n+standard_testfile\n+\n+if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile debug]} {\n+    return -1\n+}\n+\n+if {$use_gdb_stub && [target_info exists gdb,do_reload_on_run]} {\n+    # This is the path taken by gdbserver \"target remote\" boards.\n+    if { [gdb_reload] != 0 } {\n+\tuntested \"could not run to initial instruction\"\n+\treturn\n+    }\n+    pass \"stopped at entry\"\n+} else {\n+    if { [gdb_starti_cmd] < 0 } {\n+\tuntested \"could not run to initial instruction\"\n+\treturn\n+    }\n+    gdb_test \"\" \"Program stopped.*\" \"stopped at entry\"\n+}\n+\n+# The program should stop at the first instruction, before the shared\n+# library event breakpoint is first hit.  On systems where probes are\n+# present in the dynamic linker, such as GNU/Linux, discarding all\n+# shared libraries discards such probes too.  The probes-based\n+# interface can no longer be used.\n+gdb_test_no_output \"nosharedlibrary\"\n+\n+# Continue to main(), past the solib event.\n+gdb_breakpoint main\n+gdb_continue_to_breakpoint \"main\""
    }
  ]
}