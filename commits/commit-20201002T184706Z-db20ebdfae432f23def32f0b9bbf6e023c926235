{
  "sha": "db20ebdfae432f23def32f0b9bbf6e023c926235",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGIyMGViZGZhZTQzMmYyM2RlZjMyZjBiOWJiZjZlMDIzYzkyNjIzNQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-10-02T18:44:38Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-10-02T18:47:06Z"
    },
    "message": "gdb: give names to async event/signal handlers\n\nAssign names to async event/signal handlers.  They will be used in debug\nmessages when file handlers are invoked.\n\nUnlike in the previous patch, the names are not copied in the structure,\nsince we don't need to (all names are string literals for the moment).\n\ngdb/ChangeLog:\n\n\t* async-event.h (create_async_signal_handler): Add name\n\tparameter.\n\t(create_async_event_handler): Likewise.\n\t* async-event.c (struct async_signal_handler) <name>: New field.\n\t(struct async_event_handler) <name>: New field.\n\t(create_async_signal_handler): Assign name.\n\t(create_async_event_handler): Assign name.\n\t* event-top.c (async_init_signals): Pass name when creating\n\thandler.\n\t* infrun.c (_initialize_infrun): Likewise.\n\t* record-btrace.c (record_btrace_push_target): Likewise.\n\t* record-full.c (record_full_open): Likewise.\n\t* remote-notif.c (remote_notif_state_allocate): Likewise.\n\t* remote.c (remote_target::open_1): Likewise.\n\t* tui/tui-win.c (tui_initialize_win): Likewise.\n\nChange-Id: Icd9d9f775542ae5fc2cd148c12f481e7885936d5",
    "tree": {
      "sha": "b11102a43affccf7bcb740972c51bc2c4212832e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b11102a43affccf7bcb740972c51bc2c4212832e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/db20ebdfae432f23def32f0b9bbf6e023c926235",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/db20ebdfae432f23def32f0b9bbf6e023c926235",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/db20ebdfae432f23def32f0b9bbf6e023c926235",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/db20ebdfae432f23def32f0b9bbf6e023c926235/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2554f6f564097e4e3a4132d3af8ef78d588d13d1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2554f6f564097e4e3a4132d3af8ef78d588d13d1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2554f6f564097e4e3a4132d3af8ef78d588d13d1"
    }
  ],
  "stats": {
    "total": 82,
    "additions": 59,
    "deletions": 23
  },
  "files": [
    {
      "sha": "3b60116d273aca379558f8c2302bf2caa88549d6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=db20ebdfae432f23def32f0b9bbf6e023c926235",
      "patch": "@@ -1,3 +1,21 @@\n+2020-10-02  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* async-event.h (create_async_signal_handler): Add name\n+\tparameter.\n+\t(create_async_event_handler): Likewise.\n+\t* async-event.c (struct async_signal_handler) <name>: New field.\n+\t(struct async_event_handler) <name>: New field.\n+\t(create_async_signal_handler): Assign name.\n+\t(create_async_event_handler): Assign name.\n+\t* event-top.c (async_init_signals): Pass name when creating\n+\thandler.\n+\t* infrun.c (_initialize_infrun): Likewise.\n+\t* record-btrace.c (record_btrace_push_target): Likewise.\n+\t* record-full.c (record_full_open): Likewise.\n+\t* remote-notif.c (remote_notif_state_allocate): Likewise.\n+\t* remote.c (remote_target::open_1): Likewise.\n+\t* tui/tui-win.c (tui_initialize_win): Likewise.\n+\n 2020-10-02  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* async-event.c (initialize_async_signal_handlers): Pass name to"
    },
    {
      "sha": "55be014484e5d22c1aeb0fca575bdc04105eed09",
      "filename": "gdb/async-event.c",
      "status": "modified",
      "additions": 14,
      "deletions": 6,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/async-event.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/async-event.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/async-event.c?ref=db20ebdfae432f23def32f0b9bbf6e023c926235",
      "patch": "@@ -46,6 +46,9 @@ struct async_signal_handler\n \n   /* Argument to PROC.  */\n   gdb_client_data client_data;\n+\n+  /* User-friendly name of this handler.  */\n+  const char *name;\n };\n \n /* PROC is a function to be invoked when the READY flag is set.  This\n@@ -68,6 +71,9 @@ struct async_event_handler\n \n   /* Argument to PROC.  */\n   gdb_client_data client_data;\n+\n+  /* User-friendly name of this handler.  */\n+  const char *name;\n };\n \n /* All the async_signal_handlers gdb is interested in are kept onto\n@@ -127,7 +133,8 @@ initialize_async_signal_handlers (void)\n    whenever the handler is invoked.  */\n async_signal_handler *\n create_async_signal_handler (sig_handler_func * proc,\n-\t\t\t     gdb_client_data client_data)\n+\t\t\t     gdb_client_data client_data,\n+\t\t\t     const char *name)\n {\n   async_signal_handler *async_handler_ptr;\n \n@@ -136,6 +143,7 @@ create_async_signal_handler (sig_handler_func * proc,\n   async_handler_ptr->next_handler = NULL;\n   async_handler_ptr->proc = proc;\n   async_handler_ptr->client_data = client_data;\n+  async_handler_ptr->name = name;\n   if (sighandler_list.first_handler == NULL)\n     sighandler_list.first_handler = async_handler_ptr;\n   else\n@@ -236,13 +244,12 @@ delete_async_signal_handler (async_signal_handler ** async_handler_ptr)\n   (*async_handler_ptr) = NULL;\n }\n \n-/* Create an asynchronous event handler, allocating memory for it.\n-   Return a pointer to the newly created handler.  PROC is the\n-   function to call with CLIENT_DATA argument whenever the handler is\n-   invoked.  */\n+/* See async-event.h.  */\n+\n async_event_handler *\n create_async_event_handler (async_event_handler_func *proc,\n-\t\t\t    gdb_client_data client_data)\n+\t\t\t    gdb_client_data client_data,\n+\t\t\t    const char *name)\n {\n   async_event_handler *h;\n \n@@ -251,6 +258,7 @@ create_async_event_handler (async_event_handler_func *proc,\n   h->next_handler = NULL;\n   h->proc = proc;\n   h->client_data = client_data;\n+  h->name = name;\n   if (async_event_handler_list.first_handler == NULL)\n     async_event_handler_list.first_handler = h;\n   else"
    },
    {
      "sha": "8f279d63d63c1c8ebd2a472c0003759e5bb6362d",
      "filename": "gdb/async-event.h",
      "status": "modified",
      "additions": 11,
      "deletions": 4,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/async-event.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/async-event.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/async-event.h?ref=db20ebdfae432f23def32f0b9bbf6e023c926235",
      "patch": "@@ -27,8 +27,9 @@ typedef void (sig_handler_func) (gdb_client_data);\n typedef void (async_event_handler_func) (gdb_client_data);\n \n extern struct async_signal_handler *\n-  create_async_signal_handler (sig_handler_func *proc, \n-\t\t\t       gdb_client_data client_data);\n+  create_async_signal_handler (sig_handler_func *proc,\n+\t\t\t       gdb_client_data client_data,\n+\t\t\t       const char *name);\n extern void delete_async_signal_handler (struct async_signal_handler **);\n \n /* Call the handler from HANDLER the next time through the event\n@@ -48,10 +49,16 @@ extern void clear_async_signal_handler (struct async_signal_handler *handler);\n    and set PROC as its callback.  CLIENT_DATA is passed as argument to\n    PROC upon its invocation.  Returns a pointer to an opaque structure\n    used to mark as ready and to later delete this event source from\n-   the event loop.  */\n+   the event loop.\n+\n+   NAME is a user-friendly name for the handler, used in debug statements.  The\n+   name is not copied: its lifetime should be at least as long as that of the\n+   handler.  */\n+\n extern struct async_event_handler *\n   create_async_event_handler (async_event_handler_func *proc,\n-\t\t\t      gdb_client_data client_data);\n+\t\t\t      gdb_client_data client_data,\n+\t\t\t      const char *name);\n \n /* Remove the event source pointed by HANDLER_PTR created by\n    CREATE_ASYNC_EVENT_HANDLER from the event loop, and release it.  */"
    },
    {
      "sha": "fdce5de6f429e07aeefe0b3594b91a95f307cd32",
      "filename": "gdb/event-top.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/event-top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/event-top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/event-top.c?ref=db20ebdfae432f23def32f0b9bbf6e023c926235",
      "patch": "@@ -916,10 +916,10 @@ async_init_signals (void)\n \n   signal (SIGINT, handle_sigint);\n   sigint_token =\n-    create_async_signal_handler (async_request_quit, NULL);\n+    create_async_signal_handler (async_request_quit, NULL, \"sigint\");\n   signal (SIGTERM, handle_sigterm);\n   async_sigterm_token\n-    = create_async_signal_handler (async_sigterm_handler, NULL);\n+    = create_async_signal_handler (async_sigterm_handler, NULL, \"sigterm\");\n \n   /* If SIGTRAP was set to SIG_IGN, then the SIG_IGN will get passed\n      to the inferior and breakpoints will be ignored.  */\n@@ -938,23 +938,23 @@ async_init_signals (void)\n      to SIG_DFL for us.  */\n   signal (SIGQUIT, handle_sigquit);\n   sigquit_token =\n-    create_async_signal_handler (async_do_nothing, NULL);\n+    create_async_signal_handler (async_do_nothing, NULL, \"sigquit\");\n #endif\n #ifdef SIGHUP\n   if (signal (SIGHUP, handle_sighup) != SIG_IGN)\n     sighup_token =\n-      create_async_signal_handler (async_disconnect, NULL);\n+      create_async_signal_handler (async_disconnect, NULL, \"sighup\");\n   else\n     sighup_token =\n-      create_async_signal_handler (async_do_nothing, NULL);\n+      create_async_signal_handler (async_do_nothing, NULL, \"sighup\");\n #endif\n   signal (SIGFPE, handle_sigfpe);\n   sigfpe_token =\n-    create_async_signal_handler (async_float_handler, NULL);\n+    create_async_signal_handler (async_float_handler, NULL, \"sigfpe\");\n \n #ifdef SIGTSTP\n   sigtstp_token =\n-    create_async_signal_handler (async_sigtstp_handler, NULL);\n+    create_async_signal_handler (async_sigtstp_handler, NULL, \"sigtstp\");\n #endif\n \n   install_handle_sigsegv ();"
    },
    {
      "sha": "0458c3acb9d4964a88a0da7562020e10375dbdd1",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=db20ebdfae432f23def32f0b9bbf6e023c926235",
      "patch": "@@ -9278,7 +9278,8 @@ _initialize_infrun ()\n \n   /* Register extra event sources in the event loop.  */\n   infrun_async_inferior_event_token\n-    = create_async_event_handler (infrun_async_inferior_event_handler, NULL);\n+    = create_async_event_handler (infrun_async_inferior_event_handler, NULL,\n+\t\t\t\t  \"infrun\");\n \n   add_info (\"signals\", info_signals_command, _(\"\\\n What debugger does when program gets various signals.\\n\\"
    },
    {
      "sha": "dd05b932c1eda66b02dd1dd8a40bda9d12be2128",
      "filename": "gdb/record-btrace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-btrace.c?ref=db20ebdfae432f23def32f0b9bbf6e023c926235",
      "patch": "@@ -342,7 +342,7 @@ record_btrace_push_target (void)\n \n   record_btrace_async_inferior_event_handler\n     = create_async_event_handler (record_btrace_handle_async_inferior_event,\n-\t\t\t\t  NULL);\n+\t\t\t\t  NULL, \"record-btrace\");\n   record_btrace_generating_corefile = 0;\n \n   format = btrace_format_short_string (record_btrace_conf.format);"
    },
    {
      "sha": "9a6187e8104f9afec8d778b7f4ca816298e8e458",
      "filename": "gdb/record-full.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/record-full.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/record-full.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-full.c?ref=db20ebdfae432f23def32f0b9bbf6e023c926235",
      "patch": "@@ -986,7 +986,7 @@ record_full_open (const char *name, int from_tty)\n   /* Register extra event sources in the event loop.  */\n   record_full_async_inferior_event_token\n     = create_async_event_handler (record_full_async_inferior_event_handler,\n-\t\t\t\t  NULL);\n+\t\t\t\t  NULL, \"record-full\");\n \n   record_full_init_record_breakpoints ();\n "
    },
    {
      "sha": "f18bc8678e3868662a4fb47fb620304b7787781d",
      "filename": "gdb/remote-notif.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/remote-notif.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/remote-notif.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote-notif.c?ref=db20ebdfae432f23def32f0b9bbf6e023c926235",
      "patch": "@@ -219,7 +219,7 @@ remote_notif_state_allocate (remote_target *remote)\n \n   notif_state->get_pending_events_token\n     = create_async_event_handler (remote_async_get_pending_events_handler,\n-\t\t\t\t  notif_state);\n+\t\t\t\t  notif_state, \"remote-notif\");\n \n   return notif_state;\n }"
    },
    {
      "sha": "f95148643f81bc2ab09a7575d6fd076d1c6312f1",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=db20ebdfae432f23def32f0b9bbf6e023c926235",
      "patch": "@@ -5605,7 +5605,8 @@ remote_target::open_1 (const char *name, int from_tty, int extended_p)\n \n   /* Register extra event sources in the event loop.  */\n   rs->remote_async_inferior_event_token\n-    = create_async_event_handler (remote_async_inferior_event_handler, remote);\n+    = create_async_event_handler (remote_async_inferior_event_handler, remote,\n+\t\t\t\t  \"remote\");\n   rs->notif_state = remote_notif_state_allocate (remote);\n \n   /* Reset the target state; these things will be queried either by"
    },
    {
      "sha": "86c0fdba2bc19e3777fa7b2e33b6406035b53cc4",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/db20ebdfae432f23def32f0b9bbf6e023c926235/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=db20ebdfae432f23def32f0b9bbf6e023c926235",
      "patch": "@@ -576,7 +576,8 @@ tui_initialize_win (void)\n {\n #ifdef SIGWINCH\n   tui_sigwinch_token\n-    = create_async_signal_handler (tui_async_resize_screen, NULL);\n+    = create_async_signal_handler (tui_async_resize_screen, NULL,\n+\t\t\t\t   \"tui-sigwinch\");\n \n   {\n #ifdef HAVE_SIGACTION"
    }
  ]
}