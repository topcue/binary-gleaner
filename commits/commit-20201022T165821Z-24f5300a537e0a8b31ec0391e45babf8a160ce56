{
  "sha": "24f5300a537e0a8b31ec0391e45babf8a160ce56",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjRmNTMwMGE1MzdlMGE4YjMxZWMwMzkxZTQ1YmFiZjhhMTYwY2U1Ng==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-10-22T16:58:11Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-10-22T16:58:21Z"
    },
    "message": "gdb: make target_ops::make_corefile_notes return a unique ptr\n\nSince we converted gdbarch_make_corefile_notes to returning a\ngdb::unique_xmalloc_ptr, I figured it would make sense to converted\ntarget_ops::make_corefile_notes as well.\n\nThe only implementation of that is in procfs.c, and it should ideally be\nre-written as a gdbarch method (see comment in write_gcore_file_1), but\nin the mean time I guess it doesn't hurt to throw some unique pointer at\nit.\n\nI tested that it builds on Solaris 11 (gcc compile farm machine gcc211),\nbut I am not able to test it, because I can't get GDB to start a\nprocess (I'll look at that separately).\n\ngdb/ChangeLog:\n\n\t* target.h (struct target_ops) <make_corefile_notes>:\n\tChange return type to unique pointer.\n\t* target.c (dummy_make_corefile_notes): Likewise.\n\t* exec.c (struct exec_target) <make_corefile_notes>:\n\tLikewise.\n\t(exec_target::make_corefile_notes): Likewise.\n\t* procfs.c (class procfs_target) <make_corefile_notes>:\n\tLikewise.\n\t(procfs_do_thread_registers): Adjust to unique pointer.\n\t(struct procfs_corefile_thread_data): Add constructor.\n\t<note_data>: Change type to unique pointer.\n\t(procfs_corefile_thread_callback): Adjust to unique pointer.\n\t(procfs_target::make_corefile_notes): Change return type to\n\tunique pointer.\n\t* target-delegates.c: Re-generate.\n\t* gcore.c (write_gcore_file_1): Adjust.\n\t* target-debug.h (target_debug_print_gdb_unique_xmalloc_ptr_char):\n\tNew.\n\nChange-Id: I768fb17ac0f7adc67d2fe95e952c784fe0ac37ab",
    "tree": {
      "sha": "97af2a3c43eae11d3dcb217e67bf669969d3a6f8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/97af2a3c43eae11d3dcb217e67bf669969d3a6f8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/24f5300a537e0a8b31ec0391e45babf8a160ce56",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24f5300a537e0a8b31ec0391e45babf8a160ce56",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/24f5300a537e0a8b31ec0391e45babf8a160ce56",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/24f5300a537e0a8b31ec0391e45babf8a160ce56/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5fb4027fae1839cabbea75112c31bd89d46d2af0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5fb4027fae1839cabbea75112c31bd89d46d2af0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5fb4027fae1839cabbea75112c31bd89d46d2af0"
    }
  ],
  "stats": {
    "total": 139,
    "additions": 82,
    "deletions": 57
  },
  "files": [
    {
      "sha": "0319b9a7b041cba71920007cde468986c00f8513",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24f5300a537e0a8b31ec0391e45babf8a160ce56/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24f5300a537e0a8b31ec0391e45babf8a160ce56/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=24f5300a537e0a8b31ec0391e45babf8a160ce56",
      "patch": "@@ -1,3 +1,24 @@\n+2020-10-22  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* target.h (struct target_ops) <make_corefile_notes>:\n+\tChange return type to unique pointer.\n+\t* target.c (dummy_make_corefile_notes): Likewise.\n+\t* exec.c (struct exec_target) <make_corefile_notes>:\n+\tLikewise.\n+\t(exec_target::make_corefile_notes): Likewise.\n+\t* procfs.c (class procfs_target) <make_corefile_notes>:\n+\tLikewise.\n+\t(procfs_do_thread_registers): Adjust to unique pointer.\n+\t(struct procfs_corefile_thread_data): Add constructor.\n+\t<note_data>: Change type to unique pointer.\n+\t(procfs_corefile_thread_callback): Adjust to unique pointer.\n+\t(procfs_target::make_corefile_notes): Change return type to\n+\tunique pointer.\n+\t* target-delegates.c: Re-generate.\n+\t* gcore.c (write_gcore_file_1): Adjust.\n+\t* target-debug.h (target_debug_print_gdb_unique_xmalloc_ptr_char):\n+\tNew.\n+\n 2020-10-22  Tom de Vries  <tdevries@suse.de>\n \n \t* block.c (find_block_in_blockvector): Make sure the returned block"
    },
    {
      "sha": "f95fdce67f8ebe01a6219f63a98eafa15ec0fb92",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24f5300a537e0a8b31ec0391e45babf8a160ce56/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24f5300a537e0a8b31ec0391e45babf8a160ce56/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=24f5300a537e0a8b31ec0391e45babf8a160ce56",
      "patch": "@@ -79,7 +79,7 @@ struct exec_target final : public target_ops\n   void files_info () override;\n \n   bool has_memory () override;\n-  char *make_corefile_notes (bfd *, int *) override;\n+  gdb::unique_xmalloc_ptr<char> make_corefile_notes (bfd *, int *) override;\n   int find_memory_regions (find_memory_region_ftype func, void *data) override;\n };\n \n@@ -1089,7 +1089,7 @@ exec_target::has_memory ()\n   return !current_target_sections->empty ();\n }\n \n-char *\n+gdb::unique_xmalloc_ptr<char>\n exec_target::make_corefile_notes (bfd *obfd, int *note_size)\n {\n   error (_(\"Can't create a corefile\"));"
    },
    {
      "sha": "15721f8244db95c0913c250a6ca1ecdb49827587",
      "filename": "gdb/gcore.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24f5300a537e0a8b31ec0391e45babf8a160ce56/gdb/gcore.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24f5300a537e0a8b31ec0391e45babf8a160ce56/gdb/gcore.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gcore.c?ref=24f5300a537e0a8b31ec0391e45babf8a160ce56",
      "patch": "@@ -78,7 +78,7 @@ write_gcore_file_1 (bfd *obfd)\n      generation should be converted to gdbarch_make_corefile_notes; at that\n      point, the target vector method can be removed.  */\n   if (!gdbarch_make_corefile_notes_p (target_gdbarch ()))\n-    note_data.reset (target_make_corefile_notes (obfd, &note_size));\n+    note_data = target_make_corefile_notes (obfd, &note_size);\n   else\n     note_data = gdbarch_make_corefile_notes (target_gdbarch (), obfd,\n \t\t\t\t\t     &note_size);"
    },
    {
      "sha": "0b66a21c7199771a6dc8533c878befd014394d71",
      "filename": "gdb/procfs.c",
      "status": "modified",
      "additions": 45,
      "deletions": 43,
      "changes": 88,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24f5300a537e0a8b31ec0391e45babf8a160ce56/gdb/procfs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24f5300a537e0a8b31ec0391e45babf8a160ce56/gdb/procfs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/procfs.c?ref=24f5300a537e0a8b31ec0391e45babf8a160ce56",
      "patch": "@@ -136,7 +136,7 @@ class procfs_target final : public inf_child_target\n   int find_memory_regions (find_memory_region_ftype func, void *data)\n     override;\n \n-  char *make_corefile_notes (bfd *, int *) override;\n+  gdb::unique_xmalloc_ptr<char> make_corefile_notes (bfd *, int *) override;\n \n   bool info_proc (const char *, enum info_proc_what) override;\n \n@@ -3495,10 +3495,10 @@ procfs_first_available (void)\n \n /* ===================  GCORE .NOTE \"MODULE\" =================== */\n \n-static char *\n+static void\n procfs_do_thread_registers (bfd *obfd, ptid_t ptid,\n-\t\t\t    char *note_data, int *note_size,\n-\t\t\t    enum gdb_signal stop_signal)\n+\t\t\t    gdb::unique_xmalloc_ptr<char> &note_data,\n+\t\t\t    int *note_size, enum gdb_signal stop_signal)\n {\n   struct regcache *regcache = get_thread_regcache (&the_procfs_target, ptid);\n   gdb_gregset_t gregs;\n@@ -3515,25 +3515,31 @@ procfs_do_thread_registers (bfd *obfd, ptid_t ptid,\n   target_fetch_registers (regcache, -1);\n \n   fill_gregset (regcache, &gregs, -1);\n-  note_data = (char *) elfcore_write_lwpstatus (obfd,\n-\t\t\t\t\t\tnote_data,\n-\t\t\t\t\t\tnote_size,\n-\t\t\t\t\t\tmerged_pid,\n-\t\t\t\t\t\tstop_signal,\n-\t\t\t\t\t\t&gregs);\n+  note_data.reset (elfcore_write_lwpstatus (obfd,\n+\t\t\t\t\t    note_data.release (),\n+\t\t\t\t\t    note_size,\n+\t\t\t\t\t    merged_pid,\n+\t\t\t\t\t    stop_signal,\n+\t\t\t\t\t    &gregs));\n   fill_fpregset (regcache, &fpregs, -1);\n-  note_data = (char *) elfcore_write_prfpreg (obfd,\n-\t\t\t\t\t      note_data,\n-\t\t\t\t\t      note_size,\n-\t\t\t\t\t      &fpregs,\n-\t\t\t\t\t      sizeof (fpregs));\n-\n-  return note_data;\n+  note_data.reset (elfcore_write_prfpreg (obfd,\n+\t\t\t\t\t  note_data.release (),\n+\t\t\t\t\t  note_size,\n+\t\t\t\t\t  &fpregs,\n+\t\t\t\t\t  sizeof (fpregs)));\n }\n \n-struct procfs_corefile_thread_data {\n+struct procfs_corefile_thread_data\n+{\n+  procfs_corefile_thread_data (bfd *obfd,\n+\t\t\t       gdb::unique_xmalloc_ptr<char> &note_data,\n+\t\t\t       int *note_size, gdb_signal stop_signal)\n+    : obfd (obfd), note_data (note_data), note_size (note_size),\n+      stop_signal (stop_signal)\n+  {}\n+\n   bfd *obfd;\n-  char *note_data;\n+  gdb::unique_xmalloc_ptr<char> &note_data;\n   int *note_size;\n   enum gdb_signal stop_signal;\n };\n@@ -3548,10 +3554,10 @@ procfs_corefile_thread_callback (procinfo *pi, procinfo *thread, void *data)\n     {\n       ptid_t ptid = ptid_t (pi->pid, thread->tid, 0);\n \n-      args->note_data = procfs_do_thread_registers (args->obfd, ptid,\n-\t\t\t\t\t\t    args->note_data,\n-\t\t\t\t\t\t    args->note_size,\n-\t\t\t\t\t\t    args->stop_signal);\n+      procfs_do_thread_registers (args->obfd, ptid,\n+\t\t\t\t  args->note_data,\n+\t\t\t\t  args->note_size,\n+\t\t\t\t  args->stop_signal);\n     }\n   return 0;\n }\n@@ -3578,16 +3584,15 @@ find_stop_signal (void)\n     return GDB_SIGNAL_0;\n }\n \n-char *\n+gdb::unique_xmalloc_ptr<char>\n procfs_target::make_corefile_notes (bfd *obfd, int *note_size)\n {\n   gdb_gregset_t gregs;\n   char fname[16] = {'\\0'};\n   char psargs[80] = {'\\0'};\n   procinfo *pi = find_procinfo_or_die (inferior_ptid.pid (), 0);\n-  char *note_data = NULL;\n+  gdb::unique_xmalloc_ptr<char> note_data;\n   const char *inf_args;\n-  struct procfs_corefile_thread_data thread_args;\n   enum gdb_signal stop_signal;\n \n   if (get_exec_file (0))\n@@ -3609,33 +3614,30 @@ procfs_target::make_corefile_notes (bfd *obfd, int *note_size)\n \t}\n     }\n \n-  note_data = (char *) elfcore_write_prpsinfo (obfd,\n-\t\t\t\t\t       note_data,\n-\t\t\t\t\t       note_size,\n-\t\t\t\t\t       fname,\n-\t\t\t\t\t       psargs);\n+  note_data.reset (elfcore_write_prpsinfo (obfd,\n+\t\t\t\t\t   note_data.release (),\n+\t\t\t\t\t   note_size,\n+\t\t\t\t\t   fname,\n+\t\t\t\t\t   psargs));\n \n   stop_signal = find_stop_signal ();\n \n   fill_gregset (get_current_regcache (), &gregs, -1);\n-  note_data = elfcore_write_pstatus (obfd, note_data, note_size,\n-\t\t\t\t     inferior_ptid.pid (),\n-\t\t\t\t     stop_signal, &gregs);\n-\n-  thread_args.obfd = obfd;\n-  thread_args.note_data = note_data;\n-  thread_args.note_size = note_size;\n-  thread_args.stop_signal = stop_signal;\n+  note_data.reset (elfcore_write_pstatus (obfd, note_data.release (), note_size,\n+\t\t\t\t\t  inferior_ptid.pid (),\n+\t\t\t\t\t  stop_signal, &gregs));\n+\n+  procfs_corefile_thread_data thread_args (obfd, note_data, note_size,\n+\t\t\t\t\t   stop_signal);\n   proc_iterate_over_threads (pi, procfs_corefile_thread_callback,\n \t\t\t     &thread_args);\n-  note_data = thread_args.note_data;\n \n   gdb::optional<gdb::byte_vector> auxv =\n     target_read_alloc (current_top_target (), TARGET_OBJECT_AUXV, NULL);\n   if (auxv && !auxv->empty ())\n-    note_data = elfcore_write_note (obfd, note_data, note_size,\n-\t\t\t\t    \"CORE\", NT_AUXV, auxv->data (),\n-\t\t\t\t    auxv->size ());\n+    note_data.reset (elfcore_write_note (obfd, note_data.release (), note_size,\n+\t\t\t\t\t \"CORE\", NT_AUXV, auxv->data (),\n+\t\t\t\t\t auxv->size ()));\n \n   return note_data;\n }"
    },
    {
      "sha": "12818da6679f739886caafbdbb0e42468c652873",
      "filename": "gdb/target-debug.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24f5300a537e0a8b31ec0391e45babf8a160ce56/gdb/target-debug.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24f5300a537e0a8b31ec0391e45babf8a160ce56/gdb/target-debug.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-debug.h?ref=24f5300a537e0a8b31ec0391e45babf8a160ce56",
      "patch": "@@ -188,6 +188,8 @@\n   target_debug_do_print ((X).c_str ())\n #define target_debug_print_gdb_byte_vector(X)\t\\\n   target_debug_do_print (host_address_to_string (X.data ()))\n+#define target_debug_print_gdb_unique_xmalloc_ptr_char(X) \\\n+  target_debug_do_print (X.get ())\n \n static void\n target_debug_print_struct_target_waitstatus_p (struct target_waitstatus *status)"
    },
    {
      "sha": "437b19b8581c636b5b01a393e934155395bff34b",
      "filename": "gdb/target-delegates.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24f5300a537e0a8b31ec0391e45babf8a160ce56/gdb/target-delegates.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24f5300a537e0a8b31ec0391e45babf8a160ce56/gdb/target-delegates.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-delegates.c?ref=24f5300a537e0a8b31ec0391e45babf8a160ce56",
      "patch": "@@ -88,7 +88,7 @@ struct dummy_target : public target_ops\n   bool supports_non_stop () override;\n   bool always_non_stop_p () override;\n   int find_memory_regions (find_memory_region_ftype arg0, void *arg1) override;\n-  char *make_corefile_notes (bfd *arg0, int *arg1) override;\n+  gdb::unique_xmalloc_ptr<char> make_corefile_notes (bfd *arg0, int *arg1) override;\n   gdb_byte *get_bookmark (const char *arg0, int arg1) override;\n   void goto_bookmark (const gdb_byte *arg0, int arg1) override;\n   CORE_ADDR get_thread_local_address (ptid_t arg0, CORE_ADDR arg1, CORE_ADDR arg2) override;\n@@ -259,7 +259,7 @@ struct debug_target : public target_ops\n   bool supports_non_stop () override;\n   bool always_non_stop_p () override;\n   int find_memory_regions (find_memory_region_ftype arg0, void *arg1) override;\n-  char *make_corefile_notes (bfd *arg0, int *arg1) override;\n+  gdb::unique_xmalloc_ptr<char> make_corefile_notes (bfd *arg0, int *arg1) override;\n   gdb_byte *get_bookmark (const char *arg0, int arg1) override;\n   void goto_bookmark (const gdb_byte *arg0, int arg1) override;\n   CORE_ADDR get_thread_local_address (ptid_t arg0, CORE_ADDR arg1, CORE_ADDR arg2) override;\n@@ -2292,30 +2292,30 @@ debug_target::find_memory_regions (find_memory_region_ftype arg0, void *arg1)\n   return result;\n }\n \n-char *\n+gdb::unique_xmalloc_ptr<char>\n target_ops::make_corefile_notes (bfd *arg0, int *arg1)\n {\n   return this->beneath ()->make_corefile_notes (arg0, arg1);\n }\n \n-char *\n+gdb::unique_xmalloc_ptr<char>\n dummy_target::make_corefile_notes (bfd *arg0, int *arg1)\n {\n   return dummy_make_corefile_notes (this, arg0, arg1);\n }\n \n-char *\n+gdb::unique_xmalloc_ptr<char>\n debug_target::make_corefile_notes (bfd *arg0, int *arg1)\n {\n-  char * result;\n+  gdb::unique_xmalloc_ptr<char> result;\n   fprintf_unfiltered (gdb_stdlog, \"-> %s->make_corefile_notes (...)\\n\", this->beneath ()->shortname ());\n   result = this->beneath ()->make_corefile_notes (arg0, arg1);\n   fprintf_unfiltered (gdb_stdlog, \"<- %s->make_corefile_notes (\", this->beneath ()->shortname ());\n   target_debug_print_bfd_p (arg0);\n   fputs_unfiltered (\", \", gdb_stdlog);\n   target_debug_print_int_p (arg1);\n   fputs_unfiltered (\") = \", gdb_stdlog);\n-  target_debug_print_char_p (result);\n+  target_debug_print_gdb_unique_xmalloc_ptr_char (result);\n   fputs_unfiltered (\"\\n\", gdb_stdlog);\n   return result;\n }"
    },
    {
      "sha": "50034cb42ec42be263c8f7a0d49cf673953cac19",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24f5300a537e0a8b31ec0391e45babf8a160ce56/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24f5300a537e0a8b31ec0391e45babf8a160ce56/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=24f5300a537e0a8b31ec0391e45babf8a160ce56",
      "patch": "@@ -89,8 +89,8 @@ static int dummy_find_memory_regions (struct target_ops *self,\n \t\t\t\t      find_memory_region_ftype ignore1,\n \t\t\t\t      void *ignore2);\n \n-static char *dummy_make_corefile_notes (struct target_ops *self,\n-\t\t\t\t\tbfd *ignore1, int *ignore2);\n+static gdb::unique_xmalloc_ptr<char> dummy_make_corefile_notes\n+  (struct target_ops *self, bfd *ignore1, int *ignore2);\n \n static std::string default_pid_to_str (struct target_ops *ops, ptid_t ptid);\n \n@@ -3058,7 +3058,7 @@ dummy_find_memory_regions (struct target_ops *self,\n }\n \n /* Error-catcher for target_make_corefile_notes.  */\n-static char *\n+static gdb::unique_xmalloc_ptr<char>\n dummy_make_corefile_notes (struct target_ops *self,\n \t\t\t   bfd *ignore1, int *ignore2)\n {"
    },
    {
      "sha": "039194c239b8b4f02804d1d64f3b1719dc6cd188",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/24f5300a537e0a8b31ec0391e45babf8a160ce56/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/24f5300a537e0a8b31ec0391e45babf8a160ce56/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=24f5300a537e0a8b31ec0391e45babf8a160ce56",
      "patch": "@@ -719,7 +719,7 @@ struct target_ops\n     virtual int find_memory_regions (find_memory_region_ftype func, void *data)\n       TARGET_DEFAULT_FUNC (dummy_find_memory_regions);\n     /* make_corefile_notes support method for gcore */\n-    virtual char *make_corefile_notes (bfd *, int *)\n+    virtual gdb::unique_xmalloc_ptr<char> make_corefile_notes (bfd *, int *)\n       TARGET_DEFAULT_FUNC (dummy_make_corefile_notes);\n     /* get_bookmark support method for bookmarks */\n     virtual gdb_byte *get_bookmark (const char *, int)"
    }
  ]
}