{
  "sha": "dd7efa79151ed5a56caccfac870865764d922a2f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGQ3ZWZhNzkxNTFlZDVhNTZjYWNjZmFjODcwODY1NzY0ZDkyMmEyZg==",
  "commit": {
    "author": {
      "name": "Peter Bergner",
      "email": "bergner@linux.ibm.com",
      "date": "2018-05-15T21:48:14Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-05-24T00:54:45Z"
    },
    "message": "PowerPC add initial -mfuture instruction support\n\nThis patch adds initial 64-bit insn assembler/disassembler support.\nThe only instruction added is \"pnop\" along with the automatic aligning\nof prefix instruction so they do not cross 64-byte boundaries.\n\ninclude/\n\t* dis-asm.h (WIDE_OUTPUT): Define.\n\t* opcode/ppc.h (prefix_opcodes, prefix_num_opcodes): Declare.\n\t(PPC_OPCODE_POWERXX, PPC_GET_PREFIX, PPC_GET_SUFFIX),\n\t(PPC_PREFIX_P, PPC_PREFIX_SEG): Define.\nopcodes/\n\t* ppc-dis.c (ppc_opts): Add \"future\" entry.\n\t(PREFIX_OPCD_SEGS): Define.\n\t(prefix_opcd_indices): New array.\n\t(disassemble_init_powerpc): Initialize prefix_opcd_indices.\n\t(lookup_prefix): New function.\n\t(print_insn_powerpc): Handle 64-bit prefix instructions.\n\t* ppc-opc.c (PREFIX_OP, PREFIX_FORM, SUFFIX_MASK, PREFIX_MASK),\n\t(PMRR, POWERXX): Define.\n\t(prefix_opcodes): New instruction table.\n\t(prefix_num_opcodes): New constant.\nbinutils/\n\t* objdump.c (disassemble_bytes): Set WIDE_OUTPUT in flags.\ngas/\n\t* config/tc-ppc.c (ppc_setup_opcodes): Handle prefix_opcodes.\n\t(struct insn_label_list): New.\n\t(insn_labels, free_insn_labels): New variables.\n\t(ppc_record_label, ppc_clear_labels, ppc_start_line_hook): New funcs.\n\t(ppc_frob_label, ppc_new_dot_label): Move functions earlier in file\n\tand call ppc_record_label.\n\t(md_assemble): Handle 64-bit prefix instructions.  Align labels\n\tthat are on the same line as a prefix instruction.\n\t* config/tc-ppc.h (tc_frob_label, ppc_frob_label): Move to\n\tlater in the file.\n\t(md_start_line_hook): Define.\n\t(ppc_start_line_hook): Declare.\n\t* testsuite/gas/ppc/prefix-align.d,\n\t* testsuite/gas/ppc/prefix-align.s: New test.\n\t* testsuite/gas/ppc/ppc.exp: Run new test.",
    "tree": {
      "sha": "acd09258a5a9dbf02c6115373e1b2b6abf562e82",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/acd09258a5a9dbf02c6115373e1b2b6abf562e82"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dd7efa79151ed5a56caccfac870865764d922a2f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd7efa79151ed5a56caccfac870865764d922a2f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dd7efa79151ed5a56caccfac870865764d922a2f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dd7efa79151ed5a56caccfac870865764d922a2f/comments",
  "author": {
    "login": "peter-bergner",
    "id": 17504345,
    "node_id": "MDQ6VXNlcjE3NTA0MzQ1",
    "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/peter-bergner",
    "html_url": "https://github.com/peter-bergner",
    "followers_url": "https://api.github.com/users/peter-bergner/followers",
    "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}",
    "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions",
    "organizations_url": "https://api.github.com/users/peter-bergner/orgs",
    "repos_url": "https://api.github.com/users/peter-bergner/repos",
    "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/peter-bergner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fcb36d746247a9f5e266afa65019129eee9273f2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fcb36d746247a9f5e266afa65019129eee9273f2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fcb36d746247a9f5e266afa65019129eee9273f2"
    }
  ],
  "stats": {
    "total": 454,
    "additions": 412,
    "deletions": 42
  },
  "files": [
    {
      "sha": "79bfaee90867f07d198387a44908e23d57acc27b",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd7efa79151ed5a56caccfac870865764d922a2f/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd7efa79151ed5a56caccfac870865764d922a2f/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=dd7efa79151ed5a56caccfac870865764d922a2f",
      "patch": "@@ -1,3 +1,7 @@\n+2019-05-24  Alan Modra  <amodra@gmail.com>\n+\n+\t* objdump.c (disassemble_bytes): Set WIDE_OUTPUT in flags.\n+\n 2019-05-23  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* MAINTAINERS: Add myself as the maintainer for BPF."
    },
    {
      "sha": "7381e4885d5942364f32cab5476fcba7d17397e8",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd7efa79151ed5a56caccfac870865764d922a2f/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd7efa79151ed5a56caccfac870865764d922a2f/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=dd7efa79151ed5a56caccfac870865764d922a2f",
      "patch": "@@ -1946,7 +1946,8 @@ disassemble_bytes (struct disassemble_info * inf,\n \t      inf->stream = &sfile;\n \t      inf->bytes_per_line = 0;\n \t      inf->bytes_per_chunk = 0;\n-\t      inf->flags = disassemble_all ? DISASSEMBLE_DATA : 0;\n+\t      inf->flags = ((disassemble_all ? DISASSEMBLE_DATA : 0)\n+\t\t\t    | (wide_output ? WIDE_OUTPUT : 0));\n \t      if (machine)\n \t\tinf->flags |= USER_SPECIFIED_MACHINE_TYPE;\n "
    },
    {
      "sha": "a747a9874fb9cd5d1e55b548d440753a9e54fd75",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd7efa79151ed5a56caccfac870865764d922a2f/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd7efa79151ed5a56caccfac870865764d922a2f/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=dd7efa79151ed5a56caccfac870865764d922a2f",
      "patch": "@@ -1,3 +1,22 @@\n+2019-05-24  Peter Bergner  <bergner@linux.ibm.com>\n+\t    Alan Modra  <amodra@gmail.com>\n+\n+\t* config/tc-ppc.c (ppc_setup_opcodes): Handle prefix_opcodes.\n+\t(struct insn_label_list): New.\n+\t(insn_labels, free_insn_labels): New variables.\n+\t(ppc_record_label, ppc_clear_labels, ppc_start_line_hook): New funcs.\n+\t(ppc_frob_label, ppc_new_dot_label): Move functions earlier in file\n+\tand call ppc_record_label.\n+\t(md_assemble): Handle 64-bit prefix instructions.  Align labels\n+\tthat are on the same line as a prefix instruction.\n+\t* config/tc-ppc.h (tc_frob_label, ppc_frob_label): Move to\n+\tlater in the file.\n+\t(md_start_line_hook): Define.\n+\t(ppc_start_line_hook): Declare.\n+\t* testsuite/gas/ppc/prefix-align.d,\n+\t* testsuite/gas/ppc/prefix-align.s: New test.\n+\t* testsuite/gas/ppc/ppc.exp: Run new test.\n+\n 2019-05-23  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* configure.ac: Handle bpf-*-* targets."
    },
    {
      "sha": "4abb5b8a31c5b73b4a0c4b2be183988342bec037",
      "filename": "gas/config/tc-ppc.c",
      "status": "modified",
      "additions": 167,
      "deletions": 34,
      "changes": 201,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd7efa79151ed5a56caccfac870865764d922a2f/gas/config/tc-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd7efa79151ed5a56caccfac870865764d922a2f/gas/config/tc-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.c?ref=dd7efa79151ed5a56caccfac870865764d922a2f",
      "patch": "@@ -1673,6 +1673,50 @@ ppc_setup_opcodes (void)\n     for (op = powerpc_opcodes; op < op_end; op++)\n       hash_insert (ppc_hash, op->name, (void *) op);\n \n+  op_end = prefix_opcodes + prefix_num_opcodes;\n+  for (op = prefix_opcodes; op < op_end; op++)\n+    {\n+      if (ENABLE_CHECKING)\n+\t{\n+\t  unsigned int new_opcode = PPC_PREFIX_SEG (op[0].opcode);\n+\n+#ifdef PRINT_OPCODE_TABLE\n+\t  printf (\"%-14s\\t#%04u\\tmajor op/2: 0x%x\\top: 0x%llx\\tmask: 0x%llx\\tflags: 0x%llx\\n\",\n+\t\t  op->name, (unsigned int) (op - prefix_opcodes),\n+\t\t  new_opcode, (unsigned long long) op->opcode,\n+\t\t  (unsigned long long) op->mask, (unsigned long long) op->flags);\n+#endif\n+\n+\t  /* The major opcodes had better be sorted.  Code in the disassembler\n+\t     assumes the insns are sorted according to major opcode.  */\n+\t  if (op != prefix_opcodes\n+\t      && new_opcode < PPC_PREFIX_SEG (op[-1].opcode))\n+\t    {\n+\t      as_bad (_(\"major opcode is not sorted for %s\"), op->name);\n+\t      bad_insn = TRUE;\n+\t    }\n+\t  bad_insn |= insn_validate (op);\n+\t}\n+\n+      if ((ppc_cpu & op->flags) != 0\n+\t  && !(ppc_cpu & op->deprecated))\n+\t{\n+\t  const char *retval;\n+\n+\t  retval = hash_insert (ppc_hash, op->name, (void *) op);\n+\t  if (retval != NULL)\n+\t    {\n+\t      as_bad (_(\"duplicate instruction %s\"),\n+\t\t      op->name);\n+\t      bad_insn = TRUE;\n+\t    }\n+\t}\n+    }\n+\n+  if ((ppc_cpu & PPC_OPCODE_ANY) != 0)\n+    for (op = prefix_opcodes; op < op_end; op++)\n+      hash_insert (ppc_hash, op->name, (void *) op);\n+\n   op_end = vle_opcodes + vle_num_opcodes;\n   for (op = vle_opcodes; op < op_end; op++)\n     {\n@@ -2740,6 +2784,90 @@ ppc_apuinfo_section_add (unsigned int apu, unsigned int version)\n #undef APUID\n #endif\n \f\n+/* Various frobbings of labels and their addresses.  */\n+\n+/* Symbols labelling the current insn.  */\n+struct insn_label_list\n+{\n+  struct insn_label_list *next;\n+  symbolS *label;\n+};\n+\n+static struct insn_label_list *insn_labels;\n+static struct insn_label_list *free_insn_labels;\n+\n+static void\n+ppc_record_label (symbolS *sym)\n+{\n+  struct insn_label_list *l;\n+\n+  if (free_insn_labels == NULL)\n+    l = XNEW (struct insn_label_list);\n+  else\n+    {\n+      l = free_insn_labels;\n+      free_insn_labels = l->next;\n+    }\n+\n+  l->label = sym;\n+  l->next = insn_labels;\n+  insn_labels = l;\n+}\n+\n+static void\n+ppc_clear_labels (void)\n+{\n+  while (insn_labels != NULL)\n+    {\n+      struct insn_label_list *l = insn_labels;\n+      insn_labels = l->next;\n+      l->next = free_insn_labels;\n+      free_insn_labels = l;\n+    }\n+}\n+\n+void\n+ppc_start_line_hook (void)\n+{\n+  ppc_clear_labels ();\n+}\n+\n+void\n+ppc_new_dot_label (symbolS *sym)\n+{\n+  ppc_record_label (sym);\n+#ifdef OBJ_XCOFF\n+  /* Anchor this label to the current csect for relocations.  */\n+  symbol_get_tc (sym)->within = ppc_current_csect;\n+#endif\n+}\n+\n+void\n+ppc_frob_label (symbolS *sym)\n+{\n+  ppc_record_label (sym);\n+\n+#ifdef OBJ_XCOFF\n+  /* Set the class of a label based on where it is defined.  This handles\n+     symbols without suffixes.  Also, move the symbol so that it follows\n+     the csect symbol.  */\n+  if (ppc_current_csect != (symbolS *) NULL)\n+    {\n+      if (symbol_get_tc (sym)->symbol_class == -1)\n+\tsymbol_get_tc (sym)->symbol_class = symbol_get_tc (ppc_current_csect)->symbol_class;\n+\n+      symbol_remove (sym, &symbol_rootP, &symbol_lastP);\n+      symbol_append (sym, symbol_get_tc (ppc_current_csect)->within,\n+\t\t     &symbol_rootP, &symbol_lastP);\n+      symbol_get_tc (ppc_current_csect)->within = sym;\n+      symbol_get_tc (sym)->within = ppc_current_csect;\n+    }\n+#endif\n+\n+#ifdef OBJ_ELF\n+  dwarf2_emit_label (sym);\n+#endif\n+}\n \n /* We need to keep a list of fixups.  We can't simply generate them as\n    we go, because that would require us to first create the frag, and\n@@ -3074,6 +3202,7 @@ md_assemble (char *str)\n       else\n \tppc_macro (s, macro);\n \n+      ppc_clear_labels ();\n       return;\n     }\n \n@@ -3828,14 +3957,50 @@ md_assemble (char *str)\n   if ((frag_now_fix () & addr_mask) != 0)\n     as_bad (_(\"instruction address is not a multiple of %d\"), addr_mask + 1);\n \n-  /* Differentiate between two and four byte insns.  */\n+  /* Differentiate between two, four, and eight byte insns.  */\n   insn_length = 4;\n   if ((ppc_cpu & PPC_OPCODE_VLE) != 0 && PPC_OP_SE_VLE (insn))\n     insn_length = 2;\n+  else if ((opcode->flags & PPC_OPCODE_POWERXX) != 0\n+\t   && PPC_PREFIX_P (insn))\n+    {\n+      struct insn_label_list *l;\n+\n+      insn_length = 8;\n+\n+      /* 8-byte prefix instructions are not allowed to cross 64-byte\n+\t boundaries.  */\n+      frag_align_code (6, 4);\n+      record_alignment (now_seg, 6);\n+\n+      /* Update \"dot\" in any expressions used by this instruction, and\n+\t a label attached to the instruction.  By \"attached\" we mean\n+\t on the same source line as the instruction and without any\n+\t intervening semicolons.  */\n+      dot_value = frag_now_fix ();\n+      dot_frag = frag_now;\n+      for (l = insn_labels; l != NULL; l = l->next)\n+\t{\n+\t  symbol_set_frag (l->label, dot_frag);\n+\t  S_SET_VALUE (l->label, dot_value);\n+\t}\n+    }\n+\n+  ppc_clear_labels ();\n \n   f = frag_more (insn_length);\n   frag_now->insn_addr = addr_mask;\n-  md_number_to_chars (f, insn, insn_length);\n+\n+  /* The prefix part of an 8-byte instruction always occupies the lower\n+     addressed word in a doubleword, regardless of endianness.  */\n+  if (!target_big_endian && insn_length == 8)\n+    {\n+      md_number_to_chars (f, PPC_GET_PREFIX (insn), 4);\n+      md_number_to_chars (f + 4, PPC_GET_SUFFIX (insn), 4);\n+    }\n+  else\n+    md_number_to_chars (f, insn, insn_length);\n+\n   last_insn = insn;\n   last_seg = now_seg;\n   last_subseg = now_subseg;\n@@ -6118,30 +6283,6 @@ ppc_symbol_new_hook (symbolS *sym)\n     as_bad (_(\"unrecognized symbol suffix\"));\n }\n \n-/* Set the class of a label based on where it is defined.  This\n-   handles symbols without suffixes.  Also, move the symbol so that it\n-   follows the csect symbol.  */\n-\n-void\n-ppc_frob_label (symbolS *sym)\n-{\n-  if (ppc_current_csect != (symbolS *) NULL)\n-    {\n-      if (symbol_get_tc (sym)->symbol_class == -1)\n-\tsymbol_get_tc (sym)->symbol_class = symbol_get_tc (ppc_current_csect)->symbol_class;\n-\n-      symbol_remove (sym, &symbol_rootP, &symbol_lastP);\n-      symbol_append (sym, symbol_get_tc (ppc_current_csect)->within,\n-\t\t     &symbol_rootP, &symbol_lastP);\n-      symbol_get_tc (ppc_current_csect)->within = sym;\n-      symbol_get_tc (sym)->within = ppc_current_csect;\n-    }\n-\n-#ifdef OBJ_ELF\n-  dwarf2_emit_label (sym);\n-#endif\n-}\n-\n /* This variable is set by ppc_frob_symbol if any absolute symbols are\n    seen.  It tells ppc_adjust_symtab whether it needs to look through\n    the symbols.  */\n@@ -6673,14 +6814,6 @@ ppc_force_relocation (fixS *fix)\n \n   return generic_force_reloc (fix);\n }\n-\n-void\n-ppc_new_dot_label (symbolS *sym)\n-{\n-  /* Anchor this label to the current csect for relocations.  */\n-  symbol_get_tc (sym)->within = ppc_current_csect;\n-}\n-\n #endif /* OBJ_XCOFF */\n \n #ifdef OBJ_ELF"
    },
    {
      "sha": "08e381e293c25eb8c0443811bd5dc03e53d472d7",
      "filename": "gas/config/tc-ppc.h",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd7efa79151ed5a56caccfac870865764d922a2f/gas/config/tc-ppc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd7efa79151ed5a56caccfac870865764d922a2f/gas/config/tc-ppc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.h?ref=dd7efa79151ed5a56caccfac870865764d922a2f",
      "patch": "@@ -171,10 +171,6 @@ extern char *ppc_canonicalize_symbol_name (char *);\n #define tc_symbol_new_hook(sym) ppc_symbol_new_hook (sym)\n extern void ppc_symbol_new_hook (symbolS *);\n \n-/* Set the symbol class of a label based on the csect.  */\n-#define tc_frob_label(sym) ppc_frob_label (sym)\n-extern void ppc_frob_label (symbolS *);\n-\n /* TOC relocs requires special handling.  */\n #define tc_fix_adjustable(FIX) ppc_fix_adjustable (FIX)\n extern int ppc_fix_adjustable (struct fix *);\n@@ -206,11 +202,11 @@ do {\t\t\t\t\t\t\t\t\\\n extern void ppc_xcoff_end (void);\n #define md_end ppc_xcoff_end\n \n+#endif /* OBJ_XCOFF */\n+\n #define tc_new_dot_label(sym) ppc_new_dot_label (sym)\n extern void ppc_new_dot_label (symbolS *);\n \n-#endif /* OBJ_XCOFF */\n-\n extern const char       ppc_symbol_chars[];\n #define tc_symbol_chars ppc_symbol_chars\n \n@@ -282,6 +278,14 @@ extern int ppc_force_relocation (struct fix *);\n \n #define TC_VALIDATE_FIX_SUB(FIX, SEG) 0\n \n+/* Various frobbings of labels and their addresses.  */\n+#define md_start_line_hook() ppc_start_line_hook ()\n+extern void ppc_start_line_hook (void);\n+\n+/* Set the symbol class of a label based on the csect.  */\n+#define tc_frob_label(sym) ppc_frob_label (sym)\n+extern void ppc_frob_label (symbolS *);\n+\n /* call md_pcrel_from_section, not md_pcrel_from */\n #define MD_PCREL_FROM_SECTION(FIX, SEC) md_pcrel_from_section(FIX, SEC)\n extern long md_pcrel_from_section (struct fix *, segT);"
    },
    {
      "sha": "6be042bf26ce6586aed279caa0cddec2b8353236",
      "filename": "gas/testsuite/gas/ppc/ppc.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd7efa79151ed5a56caccfac870865764d922a2f/gas/testsuite/gas/ppc/ppc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd7efa79151ed5a56caccfac870865764d922a2f/gas/testsuite/gas/ppc/ppc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/ppc.exp?ref=dd7efa79151ed5a56caccfac870865764d922a2f",
      "patch": "@@ -114,3 +114,4 @@ run_dump_test \"vsx2\"\n run_dump_test \"vsx3\"\n run_dump_test \"htm\"\n run_dump_test \"titan\"\n+run_dump_test \"prefix-align\""
    },
    {
      "sha": "b2e1b8374daf95e6ff241eb2f6b5b2937205db24",
      "filename": "gas/testsuite/gas/ppc/prefix-align.d",
      "status": "added",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd7efa79151ed5a56caccfac870865764d922a2f/gas/testsuite/gas/ppc/prefix-align.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd7efa79151ed5a56caccfac870865764d922a2f/gas/testsuite/gas/ppc/prefix-align.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/prefix-align.d?ref=dd7efa79151ed5a56caccfac870865764d922a2f",
      "patch": "@@ -0,0 +1,30 @@\n+#as: -mfuture\n+#objdump: -dr -Mfuture\n+#name: POWERXX alignment of labels test\n+\n+.*\n+\n+\n+Disassembly of section \\.text:\n+\n+0+00 <_start>:\n+   0:\t(48 00 00 3c|3c 00 00 48) \tb       3c <_start\\+0x3c>\n+   4:\t(48 00 00 3c|3c 00 00 48) \tb       40 <_start\\+0x40>\n+   8:\t(48 00 00 40|40 00 00 48) \tb       48 <_start\\+0x48>\n+   c:\t(7f e0 00 08|08 00 e0 7f) \ttrap\n+  10:\t(7f e0 00 08|08 00 e0 7f) \ttrap\n+  14:\t(7f e0 00 08|08 00 e0 7f) \ttrap\n+  18:\t(7f e0 00 08|08 00 e0 7f) \ttrap\n+  1c:\t(7f e0 00 08|08 00 e0 7f) \ttrap\n+  20:\t(7f e0 00 08|08 00 e0 7f) \ttrap\n+  24:\t(7f e0 00 08|08 00 e0 7f) \ttrap\n+  28:\t(7f e0 00 08|08 00 e0 7f) \ttrap\n+  2c:\t(7f e0 00 08|08 00 e0 7f) \ttrap\n+  30:\t(7f e0 00 08|08 00 e0 7f) \ttrap\n+  34:\t(7f e0 00 08|08 00 e0 7f) \ttrap\n+  38:\t(7f e0 00 08|08 00 e0 7f) \ttrap\n+  3c:\t(60 00 00 00|00 00 00 60) \tnop\n+  40:\t(07 00 00 00|00 00 00 07) \tpnop\n+  44:\t(00 00 00 00|00 00 00 00) \n+  48:\t(4e 80 00 20|20 00 80 4e) \tblr\n+#pass"
    },
    {
      "sha": "fd0043958b93057b627c70160cb875d89999c6d7",
      "filename": "gas/testsuite/gas/ppc/prefix-align.s",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd7efa79151ed5a56caccfac870865764d922a2f/gas/testsuite/gas/ppc/prefix-align.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd7efa79151ed5a56caccfac870865764d922a2f/gas/testsuite/gas/ppc/prefix-align.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/prefix-align.s?ref=dd7efa79151ed5a56caccfac870865764d922a2f",
      "patch": "@@ -0,0 +1,21 @@\n+\t.text\n+_start:\n+\tb 1f;\n+\tb 2f;\n+\tb 3f;\n+\ttrap\n+\ttrap\n+\ttrap\n+\ttrap\n+\ttrap\n+\ttrap\n+\ttrap\n+\ttrap\n+\ttrap\n+\ttrap\n+\ttrap\n+\ttrap\n+1:\n+2:\tpnop\n+3:\n+\tblr"
    },
    {
      "sha": "c02b33aa309aa1a03592e843c0ca1e6db2406fbb",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd7efa79151ed5a56caccfac870865764d922a2f/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd7efa79151ed5a56caccfac870865764d922a2f/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=dd7efa79151ed5a56caccfac870865764d922a2f",
      "patch": "@@ -1,3 +1,11 @@\n+2019-05-24  Peter Bergner  <bergner@linux.ibm.com>\n+\t    Alan Modra  <amodra@gmail.com>\n+\n+\t* dis-asm.h (WIDE_OUTPUT): Define.\n+\t* opcode/ppc.h (prefix_opcodes, prefix_num_opcodes): Declare.\n+\t(PPC_OPCODE_POWERXX, PPC_GET_PREFIX, PPC_GET_SUFFIX),\n+\t(PPC_PREFIX_P, PPC_PREFIX_SEG): Define.\n+\n 2019-05-23  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* elf/bpf.h: New file."
    },
    {
      "sha": "b4d5025811f6e2daf39d3da5d9e63056fee6ef75",
      "filename": "include/dis-asm.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd7efa79151ed5a56caccfac870865764d922a2f/include/dis-asm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd7efa79151ed5a56caccfac870865764d922a2f/include/dis-asm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/dis-asm.h?ref=dd7efa79151ed5a56caccfac870865764d922a2f",
      "patch": "@@ -116,6 +116,8 @@ typedef struct disassemble_info\n   /* Set if the user has specifically set the machine type encoded in the\n      mach field of this structure.  */\n #define USER_SPECIFIED_MACHINE_TYPE (1 << 29)\n+  /* Set if the user has requested wide output.  */\n+#define WIDE_OUTPUT (1 << 28)\n \n   /* Use internally by the target specific disassembly code.  */\n   void *private_data;"
    },
    {
      "sha": "314b9b49ff678bd65ae2b629e29b8fec25585c07",
      "filename": "include/opcode/ppc.h",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd7efa79151ed5a56caccfac870865764d922a2f/include/opcode/ppc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd7efa79151ed5a56caccfac870865764d922a2f/include/opcode/ppc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/ppc.h?ref=dd7efa79151ed5a56caccfac870865764d922a2f",
      "patch": "@@ -68,6 +68,8 @@ struct powerpc_opcode\n    instructions.  */\n extern const struct powerpc_opcode powerpc_opcodes[];\n extern const unsigned int powerpc_num_opcodes;\n+extern const struct powerpc_opcode prefix_opcodes[];\n+extern const unsigned int prefix_num_opcodes;\n extern const struct powerpc_opcode vle_opcodes[];\n extern const unsigned int vle_num_opcodes;\n extern const struct powerpc_opcode spe2_opcodes[];\n@@ -226,6 +228,9 @@ extern const unsigned int spe2_num_opcodes;\n /* Opcode is supported by EFS2.  */\n #define PPC_OPCODE_EFS2\t    0x200000000000ull\n \n+/* Opcode is only supported by powerxx architecture.  */\n+#define PPC_OPCODE_POWERXX  0x400000000000ull\n+\n /* A macro to extract the major opcode from an instruction.  */\n #define PPC_OP(i) (((i) >> 26) & 0x3f)\n \n@@ -243,6 +248,19 @@ extern const unsigned int spe2_num_opcodes;\n \n /* A macro to convert a SPE2 extended opcode to a SPE2 xopcode segment.  */\n #define SPE2_XOP_TO_SEG(i) ((i) >> 7)\n+\n+/* A macro to extract the prefix word from an 8-byte PREFIX instruction.  */\n+#define PPC_GET_PREFIX(i) (((i) >> 32) & ((1LL << 32) - 1))\n+\n+/* A macro to extract the suffix word from an 8-byte PREFIX instruction.  */\n+#define PPC_GET_SUFFIX(i) ((i) & ((1LL << 32) - 1))\n+\n+/* A macro to determine whether insn I is an 8-byte prefix instruction.  */\n+#define PPC_PREFIX_P(i) (PPC_OP (PPC_GET_PREFIX (i)) == 0x1)\n+\n+/* A macro used to hash 8-byte PREFIX instructions.  */\n+#define PPC_PREFIX_SEG(i) (PPC_OP (i) >> 1)\n+\n \f\n /* The operands table is an array of struct powerpc_operand.  */\n "
    },
    {
      "sha": "e46e1fb4670b42baabf5136444e47d2836bebbf7",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd7efa79151ed5a56caccfac870865764d922a2f/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd7efa79151ed5a56caccfac870865764d922a2f/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=dd7efa79151ed5a56caccfac870865764d922a2f",
      "patch": "@@ -1,3 +1,17 @@\n+2019-05-24  Peter Bergner  <bergner@linux.ibm.com>\n+\t    Alan Modra  <amodra@gmail.com>\n+\n+\t* ppc-dis.c (ppc_opts): Add \"future\" entry.\n+\t(PREFIX_OPCD_SEGS): Define.\n+\t(prefix_opcd_indices): New array.\n+\t(disassemble_init_powerpc): Initialize prefix_opcd_indices.\n+\t(lookup_prefix): New function.\n+\t(print_insn_powerpc): Handle 64-bit prefix instructions.\n+\t* ppc-opc.c (PREFIX_OP, PREFIX_FORM, SUFFIX_MASK, PREFIX_MASK),\n+\t(PMRR, POWERXX): Define.\n+\t(prefix_opcodes): New instruction table.\n+\t(prefix_num_opcodes): New constant.\n+\n 2019-05-23  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* configure.ac (SHARED_DEPENDENCIES): Add case for bfd_bpf_arch."
    },
    {
      "sha": "9334be21382c290db82ed3a1aa4011eec4a46931",
      "filename": "opcodes/ppc-dis.c",
      "status": "modified",
      "additions": 92,
      "deletions": 1,
      "changes": 93,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd7efa79151ed5a56caccfac870865764d922a2f/opcodes/ppc-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd7efa79151ed5a56caccfac870865764d922a2f/opcodes/ppc-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ppc-dis.c?ref=dd7efa79151ed5a56caccfac870865764d922a2f",
      "patch": "@@ -185,6 +185,11 @@ struct ppc_mopt ppc_opts[] = {\n \t\t| PPC_OPCODE_POWER7 | PPC_OPCODE_POWER8 | PPC_OPCODE_POWER9\n \t\t| PPC_OPCODE_ALTIVEC | PPC_OPCODE_VSX),\n     0 },\n+  { \"future\",  (PPC_OPCODE_PPC | PPC_OPCODE_ISEL | PPC_OPCODE_64\n+\t\t| PPC_OPCODE_POWER4 | PPC_OPCODE_POWER5 | PPC_OPCODE_POWER6\n+\t\t| PPC_OPCODE_POWER7 | PPC_OPCODE_POWER8 | PPC_OPCODE_POWER9\n+\t\t| PPC_OPCODE_POWERXX | PPC_OPCODE_ALTIVEC | PPC_OPCODE_VSX),\n+    0 },\n   { \"ppc\",     PPC_OPCODE_PPC,\n     0 },\n   { \"ppc32\",   PPC_OPCODE_PPC,\n@@ -376,6 +381,8 @@ powerpc_init_dialect (struct disassemble_info *info)\n \n #define PPC_OPCD_SEGS (1 + PPC_OP (-1))\n static unsigned short powerpc_opcd_indices[PPC_OPCD_SEGS + 1];\n+#define PREFIX_OPCD_SEGS (1 + PPC_PREFIX_SEG (-1))\n+static unsigned short prefix_opcd_indices[PPC_OPCD_SEGS+1];\n #define VLE_OPCD_SEGS (1 + VLE_OP_TO_SEG (VLE_OP (-1, 0xffff)))\n static unsigned short vle_opcd_indices[VLE_OPCD_SEGS + 1];\n #define SPE2_OPCD_SEGS (1 + SPE2_XOP_TO_SEG (SPE2_XOP (-1)))\n@@ -400,6 +407,15 @@ disassemble_init_powerpc (struct disassemble_info *info)\n \t      break;\n \t}\n \n+      /* 64-bit prefix opcodes */\n+      for (seg = 0, idx = 0; seg <= PREFIX_OPCD_SEGS; seg++)\n+\t{\n+\t  prefix_opcd_indices[seg] = idx;\n+\t  for (; idx < prefix_num_opcodes; idx++)\n+\t    if (seg < PPC_PREFIX_SEG (prefix_opcodes[idx].opcode))\n+\t      break;\n+\t}\n+\n       /* VLE opcodes */\n       for (seg = 0, idx = 0; seg <= VLE_OPCD_SEGS; seg++)\n \t{\n@@ -556,6 +572,57 @@ lookup_powerpc (uint64_t insn, ppc_cpu_t dialect)\n   return last;\n }\n \n+/* Find a match for INSN in the PREFIX opcode table.  */\n+\n+static const struct powerpc_opcode *\n+lookup_prefix (uint64_t insn, ppc_cpu_t dialect)\n+{\n+  const struct powerpc_opcode *opcode, *opcode_end, *last;\n+  unsigned long seg;\n+\n+  /* Get the opcode segment of the instruction.  */\n+  seg = PPC_PREFIX_SEG (insn);\n+\n+  /* Find the first match in the opcode table for this major opcode.  */\n+  opcode_end = prefix_opcodes + prefix_opcd_indices[seg + 1];\n+  last = NULL;\n+  for (opcode = prefix_opcodes + prefix_opcd_indices[seg];\n+       opcode < opcode_end;\n+       ++opcode)\n+    {\n+      const unsigned char *opindex;\n+      const struct powerpc_operand *operand;\n+      int invalid;\n+\n+      if ((insn & opcode->mask) != opcode->opcode\n+\t  || ((dialect & PPC_OPCODE_ANY) == 0\n+\t      && ((opcode->flags & dialect) == 0\n+\t\t  || (opcode->deprecated & dialect) != 0)))\n+\tcontinue;\n+\n+      /* Check validity of operands.  */\n+      invalid = 0;\n+      for (opindex = opcode->operands; *opindex != 0; opindex++)\n+\t{\n+\t  operand = powerpc_operands + *opindex;\n+\t  if (operand->extract)\n+\t    (*operand->extract) (insn, dialect, &invalid);\n+\t}\n+      if (invalid)\n+\tcontinue;\n+\n+      if ((dialect & PPC_OPCODE_RAW) == 0)\n+\treturn opcode;\n+\n+      /* The raw machine insn is one that is not a specialization.  */\n+      if (last == NULL\n+\t  || (last->mask & ~opcode->mask) != 0)\n+\tlast = opcode;\n+    }\n+\n+  return last;\n+}\n+\n /* Find a match for INSN in the VLE opcode table.  */\n \n static const struct powerpc_opcode *\n@@ -699,7 +766,31 @@ print_insn_powerpc (bfd_vma memaddr,\n \n   /* Get the major opcode of the insn.  */\n   opcode = NULL;\n-  if ((dialect & PPC_OPCODE_VLE) != 0)\n+  if ((dialect & PPC_OPCODE_POWERXX) != 0\n+      && PPC_OP (insn) == 0x1)\n+    {\n+      uint64_t temp_insn, suffix;\n+      status = (*info->read_memory_func) (memaddr + 4, buffer, 4, info);\n+      if (status == 0)\n+\t{\n+\t  if (bigendian)\n+\t    suffix = bfd_getb32 (buffer);\n+\t  else\n+\t    suffix = bfd_getl32 (buffer);\n+\t  temp_insn = (insn << 32) | suffix;\n+\t  opcode = lookup_prefix (temp_insn, dialect & ~PPC_OPCODE_ANY);\n+\t  if (opcode == NULL && (dialect & PPC_OPCODE_ANY) != 0)\n+\t    opcode = lookup_prefix (temp_insn, dialect);\n+\t  if (opcode != NULL)\n+\t    {\n+\t      insn = temp_insn;\n+\t      insn_length = 8;\n+\t      if ((info->flags & WIDE_OUTPUT) != 0)\n+\t\tinfo->bytes_per_line = 8;\n+\t    }\n+\t}\n+    }\n+  if (opcode == NULL && (dialect & PPC_OPCODE_VLE) != 0)\n     {\n       opcode = lookup_vle (insn);\n       if (opcode != NULL && PPC_OP_SE_VLE (opcode->mask))"
    },
    {
      "sha": "7dc2d775d9873777bb77d34b4e9a659e77dc315e",
      "filename": "opcodes/ppc-opc.c",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dd7efa79151ed5a56caccfac870865764d922a2f/opcodes/ppc-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dd7efa79151ed5a56caccfac870865764d922a2f/opcodes/ppc-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ppc-opc.c?ref=dd7efa79151ed5a56caccfac870865764d922a2f",
      "patch": "@@ -2721,6 +2721,18 @@ const unsigned int num_powerpc_operands = (sizeof (powerpc_operands)\n #define OP(x) ((((uint64_t)(x)) & 0x3f) << 26)\n #define OP_MASK OP (0x3f)\n \n+/* The prefix opcode.  */\n+#define PREFIX_OP (1ULL << 58)\n+\n+/* The 2-bit prefix form.  */\n+#define PREFIX_FORM(x) ((x & 3ULL) << 56)\n+\n+#define SUFFIX_MASK ((1ULL << 32) - 1)\n+#define PREFIX_MASK (SUFFIX_MASK << 32)\n+\n+/* Prefix insn, modified register to register form MRR.  */\n+#define PMRR (PREFIX_OP | PREFIX_FORM (3))\n+\n /* The main opcode combined with a trap code in the TO field of a D\n    form instruction.  Used for extended mnemonics for the trap\n    instructions.  */\n@@ -3547,6 +3559,7 @@ const unsigned int num_powerpc_operands = (sizeof (powerpc_operands)\n #define POWER7\tPPC_OPCODE_POWER7\n #define POWER8\tPPC_OPCODE_POWER8\n #define POWER9\tPPC_OPCODE_POWER9\n+#define POWERXX PPC_OPCODE_POWERXX\n #define CELL\tPPC_OPCODE_CELL\n #define PPC64\tPPC_OPCODE_64 | PPC_OPCODE_64_BRIDGE\n #define NON32\t(PPC_OPCODE_64 | PPC_OPCODE_POWER4\t\\\n@@ -7796,6 +7809,17 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n const unsigned int powerpc_num_opcodes =\n   sizeof (powerpc_opcodes) / sizeof (powerpc_opcodes[0]);\n \f\n+/* The opcode table for 8-byte prefix instructions.\n+\n+   The format of this opcode table is the same as the main opcode table.  */\n+\n+const struct powerpc_opcode prefix_opcodes[] = {\n+{\"pnop\",\t  PMRR,\t\t       PREFIX_MASK,\tPOWERXX, 0,\t{0}},\n+};\n+\n+const unsigned int prefix_num_opcodes =\n+  sizeof (prefix_opcodes) / sizeof (prefix_opcodes[0]);\n+\f\n /* The VLE opcode table.\n \n    The format of this opcode table is the same as the main opcode table.  */"
    }
  ]
}