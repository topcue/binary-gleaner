{
  "sha": "5a805384b831e5946cc8dae13a75617cb4b9c080",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWE4MDUzODRiODMxZTU5NDZjYzhkYWUxM2E3NTYxN2NiNGI5YzA4MA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-09-25T00:35:57Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-09-25T02:25:01Z"
    },
    "message": "asan: readelf buffer overflow and abort\n\n\t* elfcomm.c (byte_put_little_endian, byte_put_big_endian): Support\n\tmore field sizes.\n\t* readelf.c (target_specific_reloc_handling <MSP430>): Limit\n\tallowed reloc_size.  Don't read_leb128 outside of section.",
    "tree": {
      "sha": "52cc7d1c1aad1e515c72a29fee10302c3fdcb067",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/52cc7d1c1aad1e515c72a29fee10302c3fdcb067"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5a805384b831e5946cc8dae13a75617cb4b9c080",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5a805384b831e5946cc8dae13a75617cb4b9c080",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5a805384b831e5946cc8dae13a75617cb4b9c080",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5a805384b831e5946cc8dae13a75617cb4b9c080/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cc9ea2c21cd6e2c88995a7484d2c848c7d7ce71b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cc9ea2c21cd6e2c88995a7484d2c848c7d7ce71b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cc9ea2c21cd6e2c88995a7484d2c848c7d7ce71b"
    }
  ],
  "stats": {
    "total": 75,
    "additions": 24,
    "deletions": 51
  },
  "files": [
    {
      "sha": "59750dd1a262842fea54e8d6fe00f1434c002725",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a805384b831e5946cc8dae13a75617cb4b9c080/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a805384b831e5946cc8dae13a75617cb4b9c080/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=5a805384b831e5946cc8dae13a75617cb4b9c080",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-25  Alan Modra  <amodra@gmail.com>\n+\n+\t* elfcomm.c (byte_put_little_endian, byte_put_big_endian): Support\n+\tmore field sizes.\n+\t* readelf.c (target_specific_reloc_handling <MSP430>): Limit\n+\tallowed reloc_size.  Don't read_leb128 outside of section.\n+\n 2020-09-23  Mark Wielaard  <mark@klomp.org>\n \n \t* dwarf.c (process_debug_info): Print Unit Type for DWARF5."
    },
    {
      "sha": "81742bf75b1a4cd36686a0ca90e29e88fa04cac4",
      "filename": "binutils/elfcomm.c",
      "status": "modified",
      "additions": 12,
      "deletions": 47,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a805384b831e5946cc8dae13a75617cb4b9c080/binutils/elfcomm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a805384b831e5946cc8dae13a75617cb4b9c080/binutils/elfcomm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/elfcomm.c?ref=5a805384b831e5946cc8dae13a75617cb4b9c080",
      "patch": "@@ -67,66 +67,31 @@ void (*byte_put) (unsigned char *, elf_vma, int);\n void\n byte_put_little_endian (unsigned char * field, elf_vma value, int size)\n {\n-  switch (size)\n+  if (size <= 0 || size > 8)\n     {\n-    case 8:\n-      field[7] = (((value >> 24) >> 24) >> 8) & 0xff;\n-      field[6] = ((value >> 24) >> 24) & 0xff;\n-      field[5] = ((value >> 24) >> 16) & 0xff;\n-      field[4] = ((value >> 24) >> 8) & 0xff;\n-      /* Fall through.  */\n-    case 4:\n-      field[3] = (value >> 24) & 0xff;\n-      /* Fall through.  */\n-    case 3:\n-      field[2] = (value >> 16) & 0xff;\n-      /* Fall through.  */\n-    case 2:\n-      field[1] = (value >> 8) & 0xff;\n-      /* Fall through.  */\n-    case 1:\n-      field[0] = value & 0xff;\n-      break;\n-\n-    default:\n       error (_(\"Unhandled data length: %d\\n\"), size);\n       abort ();\n     }\n+  while (size--)\n+    {\n+      *field++ = value & 0xff;\n+      value >>= 8;\n+    }\n }\n \n void\n byte_put_big_endian (unsigned char * field, elf_vma value, int size)\n {\n-  switch (size)\n+  if (size <= 0 || size > 8)\n     {\n-    case 8:\n-      field[7] = value & 0xff;\n-      field[6] = (value >> 8) & 0xff;\n-      field[5] = (value >> 16) & 0xff;\n-      field[4] = (value >> 24) & 0xff;\n-      value >>= 16;\n-      value >>= 16;\n-      /* Fall through.  */\n-    case 4:\n-      field[3] = value & 0xff;\n-      value >>= 8;\n-      /* Fall through.  */\n-    case 3:\n-      field[2] = value & 0xff;\n-      value >>= 8;\n-      /* Fall through.  */\n-    case 2:\n-      field[1] = value & 0xff;\n-      value >>= 8;\n-      /* Fall through.  */\n-    case 1:\n-      field[0] = value & 0xff;\n-      break;\n-\n-    default:\n       error (_(\"Unhandled data length: %d\\n\"), size);\n       abort ();\n     }\n+  while (size--)\n+    {\n+      field[size] = value & 0xff;\n+      value >>= 8;\n+    }\n }\n \n elf_vma (*byte_get) (const unsigned char *, int);"
    },
    {
      "sha": "9ba4e29a6595398e64060b090d4f9da8f10fd155",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5a805384b831e5946cc8dae13a75617cb4b9c080/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5a805384b831e5946cc8dae13a75617cb4b9c080/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=5a805384b831e5946cc8dae13a75617cb4b9c080",
      "patch": "@@ -12622,7 +12622,7 @@ target_specific_reloc_handling (Filedata *           filedata,\n \t    if (saved_sym != NULL)\n \t      {\n \t\tbfd_vma value;\n-\t\tunsigned int reloc_size;\n+\t\tunsigned int reloc_size = 0;\n \t\tint leb_ret = 0;\n \t\tswitch (reloc_type)\n \t\t  {\n@@ -12631,15 +12631,16 @@ target_specific_reloc_handling (Filedata *           filedata,\n \t\t    break;\n \t\t  case 11: /* R_MSP430_GNU_SET_ULEB128 */\n \t\t  case 22: /* R_MSP430X_GNU_SET_ULEB128 */\n-\t\t    read_leb128 (start + reloc->r_offset, end, FALSE,\n-\t\t\t\t &reloc_size, &leb_ret);\n+\t\t    if (reloc->r_offset < (size_t) (end - start))\n+\t\t      read_leb128 (start + reloc->r_offset, end, FALSE,\n+\t\t\t\t   &reloc_size, &leb_ret);\n \t\t    break;\n \t\t  default:\n \t\t    reloc_size = 2;\n \t\t    break;\n \t\t  }\n \n-\t\tif (leb_ret != 0)\n+\t\tif (leb_ret != 0 || reloc_size == 0 || reloc_size > 8)\n \t\t  error (_(\"MSP430 ULEB128 field at 0x%lx contains invalid \"\n \t\t\t   \"ULEB128 value\\n\"),\n \t\t\t (long) reloc->r_offset);"
    }
  ]
}