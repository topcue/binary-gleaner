{
  "sha": "ad42014be254b402f7a44e578cc709fe9e30dc1d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWQ0MjAxNGJlMjU0YjQwMmY3YTQ0ZTU3OGNjNzA5ZmU5ZTMwZGMxZA==",
  "commit": {
    "author": {
      "name": "George Barrett",
      "email": "bob@bob131.so",
      "date": "2021-06-09T13:56:11Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-29T00:30:24Z"
    },
    "message": "Guile: temporary breakpoints\n\nAdds API to the Guile bindings for creating temporary breakpoints and\nquerying whether an existing breakpoint object is temporary. This is\neffectively a transliteration of the Python implementation.\n\nIt's worth noting that the added `is_temporary' flag is ignored in the\nwatchpoint registration path. This replicates the behaviour of the\nPython implementation, but might be a bit surprising for users.\n\ngdb/ChangeLog:\n\n2021-06-09  George Barrett  <bob@bob131.so>\n\n\t* guile/scm-breakpoint.c (gdbscm_breakpoint_object::spec): Add\n\tis_temporary field.\n\t(temporary_keyword): Add keyword object for make-breakpoint\n\targument parsing.\n\t(gdbscm_make_breakpoint): Accept #:temporary keyword argument\n\tand store the value in the allocated object's\n\tspec.is_temporary.\n\t(gdbscm_register_breakpoint_x): Pass the breakpoint's\n\tspec.is_temporary value to create_breakpoint.\n\t(gdbscm_breakpoint_temporary): Add breakpoint-temporary?\n\tprocedure implementation.\n\t(breakpoint_functions::make-breakpoint): Update documentation\n\tstring and fix a typo.\n\t(breakpoint_functions::breakpoint-temporary?): Add\n\tbreakpoint-temporary? procedure.\n\t(gdbscm_initialize_breakpoints): Initialise temporary_keyword\n\tvariable.\n\tNEWS (Guile API): Mention new temporary breakpoints API.\n\ngdb/doc/ChangeLog:\n\n2021-06-09  George Barrett  <bob@bob131.so>\n\n\t* guile.texi (Breakpoints In Guile): Update make-breakpoint\n\tdocumentation to reflect new #:temporary argument.\n\tAdd documentation for new breakpoint-temporary? procedure.\n\ngdb/testsuite/ChangeLog:\n\n2021-06-09  George Barrett  <bob@bob131.so>\n\n\t* gdb.guile/scm-breakpoint.exp: Add additional tests for\n\ttemporary breakpoints.\n\nChange-Id: I2de332ee7c256f5591d7141ab3ad50d31b871d17",
    "tree": {
      "sha": "c5074628919b7ddd2c1ef6162deb54d6cd627222",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c5074628919b7ddd2c1ef6162deb54d6cd627222"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ad42014be254b402f7a44e578cc709fe9e30dc1d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ad42014be254b402f7a44e578cc709fe9e30dc1d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ad42014be254b402f7a44e578cc709fe9e30dc1d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ad42014be254b402f7a44e578cc709fe9e30dc1d/comments",
  "author": {
    "login": "Bob131",
    "id": 4337852,
    "node_id": "MDQ6VXNlcjQzMzc4NTI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4337852?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/Bob131",
    "html_url": "https://github.com/Bob131",
    "followers_url": "https://api.github.com/users/Bob131/followers",
    "following_url": "https://api.github.com/users/Bob131/following{/other_user}",
    "gists_url": "https://api.github.com/users/Bob131/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/Bob131/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/Bob131/subscriptions",
    "organizations_url": "https://api.github.com/users/Bob131/orgs",
    "repos_url": "https://api.github.com/users/Bob131/repos",
    "events_url": "https://api.github.com/users/Bob131/events{/privacy}",
    "received_events_url": "https://api.github.com/users/Bob131/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "588f5af53224053162732baa630fe3bdd8d0195e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/588f5af53224053162732baa630fe3bdd8d0195e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/588f5af53224053162732baa630fe3bdd8d0195e"
    }
  ],
  "stats": {
    "total": 95,
    "additions": 86,
    "deletions": 9
  },
  "files": [
    {
      "sha": "51b276c2cc18a0ec473b8e48e0aec610bebec1f7",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad42014be254b402f7a44e578cc709fe9e30dc1d/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad42014be254b402f7a44e578cc709fe9e30dc1d/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=ad42014be254b402f7a44e578cc709fe9e30dc1d",
      "patch": "@@ -267,6 +267,9 @@ QMemTags\n      value-reference-value, value-rvalue-reference-value and\n      value-const-value.\n \n+  ** Temporary breakpoints can now be created with make-breakpoint and\n+     tested for using breakpoint-temporary?.\n+\n * Python API\n \n   ** Inferior objects now contain a read-only 'connection_num' attribute that"
    },
    {
      "sha": "a2448dd62cbe80021a149b499fcdf84c0f104ad2",
      "filename": "gdb/doc/guile.texi",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad42014be254b402f7a44e578cc709fe9e30dc1d/gdb/doc/guile.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad42014be254b402f7a44e578cc709fe9e30dc1d/gdb/doc/guile.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/guile.texi?ref=ad42014be254b402f7a44e578cc709fe9e30dc1d",
      "patch": "@@ -2965,7 +2965,7 @@ The following breakpoint-related procedures are provided by the\n @code{(gdb)} module:\n \n @c TODO: line length\n-@deffn {Scheme Procedure} make-breakpoint location @r{[}#:type type@r{]} @r{[}#:wp-class wp-class@r{]} @r{[}#:internal internal@r{]}\n+@deffn {Scheme Procedure} make-breakpoint location @r{[}#:type type@r{]} @r{[}#:wp-class wp-class@r{]} @r{[}#:internal internal@r{]} @r{[}#:temporary temporary@r{]}\n Create a new breakpoint at @var{location}, a string naming the\n location of the breakpoint, or an expression that defines a watchpoint.\n The contents can be any location recognized by the @code{break} command,\n@@ -2991,6 +2991,11 @@ registered, nor will it be listed in the output from @code{info breakpoints}\n If an internal flag is not provided, the breakpoint is visible\n (non-internal).\n \n+The optional @var{temporary} argument makes the breakpoint a temporary\n+breakpoint.  Temporary breakpoints are deleted after they have been hit,\n+after which the Guile breakpoint is no longer usable (although it may be\n+re-registered with @code{register-breakpoint!}).\n+\n When a watchpoint is created, @value{GDBN} will try to create a\n hardware assisted watchpoint.  If successful, the type of the watchpoint\n is changed from @code{BP_WATCHPOINT} to @code{BP_HARDWARE_WATCHPOINT}\n@@ -3087,6 +3092,15 @@ Return the breakpoint's number --- the identifier used by\n the user to manipulate the breakpoint.\n @end deffn\n \n+@deffn {Scheme Procedure} breakpoint-temporary? breakpoint\n+Return @code{#t} if the breakpoint was created as a temporary\n+breakpoint.  Temporary breakpoints are automatically deleted after\n+they've been hit.  Calling this procedure, and all other procedures\n+other than @code{breakpoint-valid?} and @code{register-breakpoint!},\n+will result in an error after the breakpoint has been hit (since it has\n+been automatically deleted).\n+@end deffn\n+\n @deffn {Scheme Procedure} breakpoint-type breakpoint\n Return the breakpoint's type --- the identifier used to\n determine the actual breakpoint type or use-case."
    },
    {
      "sha": "67484e440f539ca2e304749f711c22574fe939a7",
      "filename": "gdb/guile/scm-breakpoint.c",
      "status": "modified",
      "additions": 35,
      "deletions": 8,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad42014be254b402f7a44e578cc709fe9e30dc1d/gdb/guile/scm-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad42014be254b402f7a44e578cc709fe9e30dc1d/gdb/guile/scm-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-breakpoint.c?ref=ad42014be254b402f7a44e578cc709fe9e30dc1d",
      "patch": "@@ -69,6 +69,9 @@ typedef struct gdbscm_breakpoint_object\n \n     /* Non-zero if the breakpoint is an \"internal\" breakpoint.  */\n     int is_internal;\n+\n+    /* Non-zero if the breakpoint is temporary.  */\n+    int is_temporary;\n   } spec;\n \n   /* The breakpoint number according to gdb.\n@@ -103,6 +106,7 @@ static SCM pending_breakpoint_scm = SCM_BOOL_F;\n static SCM type_keyword;\n static SCM wp_class_keyword;\n static SCM internal_keyword;\n+static SCM temporary_keyword;\n \f\n /* Administrivia for breakpoint smobs.  */\n \n@@ -332,7 +336,7 @@ bpscm_get_valid_breakpoint_smob_arg_unsafe (SCM self, int arg_pos,\n /* Breakpoint methods.  */\n \n /* (make-breakpoint string [#:type integer] [#:wp-class integer]\n-    [#:internal boolean) -> <gdb:breakpoint>\n+    [#:internal boolean] [#:temporary boolean]) -> <gdb:breakpoint>\n \n    The result is the <gdb:breakpoint> Scheme object.\n    The breakpoint is not available to be used yet, however.\n@@ -342,22 +346,26 @@ static SCM\n gdbscm_make_breakpoint (SCM location_scm, SCM rest)\n {\n   const SCM keywords[] = {\n-    type_keyword, wp_class_keyword, internal_keyword, SCM_BOOL_F\n+    type_keyword, wp_class_keyword, internal_keyword,\n+    temporary_keyword, SCM_BOOL_F\n   };\n   char *s;\n   char *location;\n-  int type_arg_pos = -1, access_type_arg_pos = -1, internal_arg_pos = -1;\n+  int type_arg_pos = -1, access_type_arg_pos = -1,\n+      internal_arg_pos = -1, temporary_arg_pos = -1;\n   enum bptype type = bp_breakpoint;\n   enum target_hw_bp_type access_type = hw_write;\n   int internal = 0;\n+  int temporary = 0;\n   SCM result;\n   breakpoint_smob *bp_smob;\n \n-  gdbscm_parse_function_args (FUNC_NAME, SCM_ARG1, keywords, \"s#iit\",\n+  gdbscm_parse_function_args (FUNC_NAME, SCM_ARG1, keywords, \"s#iitt\",\n \t\t\t      location_scm, &location, rest,\n \t\t\t      &type_arg_pos, &type,\n \t\t\t      &access_type_arg_pos, &access_type,\n-\t\t\t      &internal_arg_pos, &internal);\n+\t\t\t      &internal_arg_pos, &internal,\n+\t\t\t      &temporary_arg_pos, &temporary);\n \n   result = bpscm_make_breakpoint_smob ();\n   bp_smob = (breakpoint_smob *) SCM_SMOB_DATA (result);\n@@ -412,6 +420,7 @@ gdbscm_make_breakpoint (SCM location_scm, SCM rest)\n   bp_smob->spec.type = type;\n   bp_smob->spec.access_type = access_type;\n   bp_smob->spec.is_internal = internal;\n+  bp_smob->spec.is_temporary = temporary;\n \n   return result;\n }\n@@ -447,6 +456,7 @@ gdbscm_register_breakpoint_x (SCM self)\n   try\n     {\n       int internal = bp_smob->spec.is_internal;\n+      int temporary = bp_smob->spec.is_temporary;\n \n       switch (bp_smob->spec.type)\n \t{\n@@ -457,7 +467,7 @@ gdbscm_register_breakpoint_x (SCM self)\n \t    create_breakpoint (get_current_arch (),\n \t\t\t       eloc.get (), NULL, -1, NULL, false,\n \t\t\t       0,\n-\t\t\t       0, bp_breakpoint,\n+\t\t\t       temporary, bp_breakpoint,\n \t\t\t       0,\n \t\t\t       AUTO_BOOLEAN_TRUE,\n \t\t\t       ops,\n@@ -1040,6 +1050,18 @@ gdbscm_breakpoint_number (SCM self)\n \n   return scm_from_long (bp_smob->number);\n }\n+\n+/* (breakpoint-temporary? <gdb:breakpoint>) -> boolean */\n+\n+static SCM\n+gdbscm_breakpoint_temporary (SCM self)\n+{\n+  breakpoint_smob *bp_smob\n+    = bpscm_get_valid_breakpoint_smob_arg_unsafe (self, SCM_ARG1, FUNC_NAME);\n+\n+  return scm_from_bool (bp_smob->bp->disposition == disp_del\n+\t\t\t|| bp_smob->bp->disposition == disp_del_at_next_stop);\n+}\n \f\n /* Return TRUE if \"stop\" has been set for this breakpoint.\n \n@@ -1171,9 +1193,9 @@ static const scheme_function breakpoint_functions[] =\n Create a GDB breakpoint object.\\n\\\n \\n\\\n   Arguments:\\n\\\n-    location [#:type <type>] [#:wp-class <wp-class>] [#:internal <bool>]\\n\\\n+    location [#:type <type>] [#:wp-class <wp-class>] [#:internal <bool>] [#:temporary <bool>]\\n\\\n   Returns:\\n\\\n-    <gdb:breakpoint object\" },\n+    <gdb:breakpoint> object\" },\n \n   { \"register-breakpoint!\", 1, 0, 0,\n     as_a_scm_t_subr (gdbscm_register_breakpoint_x),\n@@ -1202,6 +1224,10 @@ Return #t if the breakpoint has not been deleted from GDB.\" },\n     \"\\\n Return the breakpoint's number.\" },\n \n+  { \"breakpoint-temporary?\", 1, 0, 0, as_a_scm_t_subr (gdbscm_breakpoint_temporary),\n+    \"\\\n+Return #t if the breakpoint is a temporary breakpoint.\" },\n+\n   { \"breakpoint-type\", 1, 0, 0, as_a_scm_t_subr (gdbscm_breakpoint_type),\n     \"\\\n Return the type of the breakpoint.\" },\n@@ -1345,4 +1371,5 @@ gdbscm_initialize_breakpoints (void)\n   type_keyword = scm_from_latin1_keyword (\"type\");\n   wp_class_keyword = scm_from_latin1_keyword (\"wp-class\");\n   internal_keyword = scm_from_latin1_keyword (\"internal\");\n+  temporary_keyword = scm_from_latin1_keyword (\"temporary\");\n }"
    },
    {
      "sha": "c5f19e154d7d6fd2391f668a87e73bd1c047e028",
      "filename": "gdb/testsuite/gdb.guile/scm-breakpoint.exp",
      "status": "modified",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ad42014be254b402f7a44e578cc709fe9e30dc1d/gdb/testsuite/gdb.guile/scm-breakpoint.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ad42014be254b402f7a44e578cc709fe9e30dc1d/gdb/testsuite/gdb.guile/scm-breakpoint.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.guile/scm-breakpoint.exp?ref=ad42014be254b402f7a44e578cc709fe9e30dc1d",
      "patch": "@@ -485,6 +485,38 @@ proc_with_prefix test_bkpt_registration {} {\n \t\"= #t\" \"breakpoint valid after re-registration\"\n }\n \n+proc_with_prefix test_bkpt_temporary { } {\n+    global srcfile testfile hex decimal\n+\n+    # Start with a fresh gdb.\n+    clean_restart ${testfile}\n+\n+    if ![gdb_guile_runto_main] {\n+\tfail \"cannot run to main.\"\n+\treturn 0\n+    }\n+    delete_breakpoints\n+\n+    set ibp_location [gdb_get_line_number \"Break at multiply.\"]\n+    gdb_scm_test_silent_cmd \"guile (define ibp (make-breakpoint \\\"$ibp_location\\\" #:temporary #t))\" \\\n+\t\"create temporary breakpoint\"\n+    gdb_scm_test_silent_cmd \"guile (register-breakpoint! ibp)\" \\\n+\t\"register ibp\"\n+    gdb_test \"info breakpoints\" \\\n+\t\"2.*breakpoint.*del.*scm-breakpoint\\.c:$ibp_location.*\" \\\n+\t\"check info breakpoints shows breakpoint with temporary status\"\n+    gdb_test \"guile (print (breakpoint-location ibp))\" \"scm-breakpoint\\.c:$ibp_location*\" \\\n+\t\"check temporary breakpoint location\"\n+    gdb_test \"guile (print (breakpoint-temporary? ibp))\" \"#t\" \\\n+\t\"check breakpoint temporary status\"\n+    gdb_continue_to_breakpoint \"Break at multiply.\" \\\n+\t\".*$srcfile:$ibp_location.*\"\n+    gdb_test \"guile (print (breakpoint-temporary? ibp))\" \"Invalid object: <gdb:breakpoint>.*\" \\\n+\t\"check temporary breakpoint is deleted after being hit\"\n+    gdb_test \"info breakpoints\" \"No breakpoints or watchpoints.*\" \\\n+\t\"check info breakpoints shows temporary breakpoint is deleted\"\n+}\n+\n proc_with_prefix test_bkpt_address {} {\n     global decimal srcfile\n \n@@ -564,5 +596,6 @@ test_watchpoints\n test_bkpt_internal\n test_bkpt_eval_funcs\n test_bkpt_registration\n+test_bkpt_temporary\n test_bkpt_address\n test_bkpt_probe"
    }
  ]
}