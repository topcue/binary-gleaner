{
  "sha": "c5c412054ebeb9e9c9dcbb36692b1d6235eb6106",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzVjNDEyMDU0ZWJlYjllOWM5ZGNiYjM2NjkyYjFkNjIzNWViNjEwNg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-16T22:49:40Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-17T00:35:37Z"
    },
    "message": "Change parameters to language_defn::post_parser\n\nIn the expression rewrite, Ada type resolution will be done at parse\ntime rather than in a post-parse pass.  At this point,\nlanguage_defn::post_parser will be removed.  However, for this to\nwork, the information available to post_parser must be made available\nduring the actual parse.\n\nThis patch refactors this code slightly to make this possible.  In\nparticular, \"void_context_p\" is passed to the parser_state\nconstructor, and the parser state is then passed to the post_parser\nmethod.\n\ngdb/ChangeLog\n2020-12-16  Tom Tromey  <tom@tromey.com>\n\n\t* rust-exp.y (rust_lex_tests): Update.\n\t* parser-defs.h (parser_state): Add void_p parameter.\n\t<void_context_p>: New member.\n\t* parse.c (parse_exp_in_context): Update.\n\t* language.h (language_defn::post_parser): Remove void_context_p,\n\tcompleting, tracker parameters.  Add parser state.\n\t* ada-lang.c (ada_language::post_parser): Update.",
    "tree": {
      "sha": "312afccbb667f8e41d5ceabd6c60ef3d6f29eb2b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/312afccbb667f8e41d5ceabd6c60ef3d6f29eb2b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c5c412054ebeb9e9c9dcbb36692b1d6235eb6106",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c5c412054ebeb9e9c9dcbb36692b1d6235eb6106",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c5c412054ebeb9e9c9dcbb36692b1d6235eb6106",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c5c412054ebeb9e9c9dcbb36692b1d6235eb6106/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f81baa08635491ebf42c3c3609050399d8af21af",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f81baa08635491ebf42c3c3609050399d8af21af",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f81baa08635491ebf42c3c3609050399d8af21af"
    }
  ],
  "stats": {
    "total": 46,
    "additions": 29,
    "deletions": 17
  },
  "files": [
    {
      "sha": "8066c76b9f0f3db91857b2b29b67c4aabaa1a4ba",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c5c412054ebeb9e9c9dcbb36692b1d6235eb6106/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c5c412054ebeb9e9c9dcbb36692b1d6235eb6106/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c5c412054ebeb9e9c9dcbb36692b1d6235eb6106",
      "patch": "@@ -1,3 +1,13 @@\n+2020-12-16  Tom Tromey  <tom@tromey.com>\n+\n+\t* rust-exp.y (rust_lex_tests): Update.\n+\t* parser-defs.h (parser_state): Add void_p parameter.\n+\t<void_context_p>: New member.\n+\t* parse.c (parse_exp_in_context): Update.\n+\t* language.h (language_defn::post_parser): Remove void_context_p,\n+\tcompleting, tracker parameters.  Add parser state.\n+\t* ada-lang.c (ada_language::post_parser): Update.\n+\n 2020-12-16  Tom Tromey  <tom@tromey.com>\n \n \t* parse.c (parse_exp_1, parse_expression_for_completion): Update."
    },
    {
      "sha": "75ad33344f8e4b414aef63680a1874a422fbd0d5",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c5c412054ebeb9e9c9dcbb36692b1d6235eb6106/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c5c412054ebeb9e9c9dcbb36692b1d6235eb6106/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=c5c412054ebeb9e9c9dcbb36692b1d6235eb6106",
      "patch": "@@ -14124,16 +14124,17 @@ class ada_language : public language_defn\n      A null CONTEXT_TYPE indicates that a non-void return type is\n      preferred.  May change (expand) *EXP.  */\n \n-  void post_parser (expression_up *expp, bool void_context_p, int completing,\n-\t\t    innermost_block_tracker *tracker) const override\n+  void post_parser (expression_up *expp, struct parser_state *ps)\n+    const override\n   {\n     struct type *context_type = NULL;\n     int pc = 0;\n \n-    if (void_context_p)\n+    if (ps->void_context_p)\n       context_type = builtin_type ((*expp)->gdbarch)->builtin_void;\n \n-    resolve_subexp (expp, &pc, 1, context_type, completing, tracker);\n+    resolve_subexp (expp, &pc, 1, context_type, ps->parse_completion,\n+\t\t    ps->block_tracker);\n   }\n \n   /* See language.h.  */"
    },
    {
      "sha": "73ddd24f2287000512b6970912432b65783dc7d7",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c5c412054ebeb9e9c9dcbb36692b1d6235eb6106/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c5c412054ebeb9e9c9dcbb36692b1d6235eb6106/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=c5c412054ebeb9e9c9dcbb36692b1d6235eb6106",
      "patch": "@@ -522,14 +522,10 @@ struct language_defn\n   /* Given an expression *EXPP created by prefixifying the result of\n      la_parser, perform any remaining processing necessary to complete its\n      translation.  *EXPP may change; la_post_parser is responsible for\n-     releasing its previous contents, if necessary.  If VOID_CONTEXT_P,\n-     then no value is expected from the expression.  If COMPLETING is\n-     non-zero, then the expression has been parsed for completion, not\n-     evaluation.  */\n-\n-  virtual void post_parser (expression_up *expp, bool void_context_p,\n-\t\t\t    int completing,\n-\t\t\t    innermost_block_tracker *tracker) const\n+     releasing its previous contents, if necessary.  */\n+\n+  virtual void post_parser (expression_up *expp, struct parser_state *ps)\n+    const\n   {\n     /* By default the post-parser does nothing.  */\n   }"
    },
    {
      "sha": "80a67c6c707e0da8b587ae9cffdc0246d51655b4",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c5c412054ebeb9e9c9dcbb36692b1d6235eb6106/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c5c412054ebeb9e9c9dcbb36692b1d6235eb6106/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=c5c412054ebeb9e9c9dcbb36692b1d6235eb6106",
      "patch": "@@ -1113,7 +1113,7 @@ parse_exp_in_context (const char **stringptr, CORE_ADDR pc,\n \n   parser_state ps (lang, get_current_arch (), expression_context_block,\n \t\t   expression_context_pc, comma, *stringptr,\n-\t\t   cstate != nullptr, tracker);\n+\t\t   cstate != nullptr, tracker, void_context_p);\n \n   scoped_restore_current_language lang_saver;\n   set_language (lang->la_language);\n@@ -1147,7 +1147,7 @@ parse_exp_in_context (const char **stringptr, CORE_ADDR pc,\n   if (out_subexp)\n     *out_subexp = subexp;\n \n-  lang->post_parser (&result, void_context_p, ps.parse_completion, tracker);\n+  lang->post_parser (&result, &ps);\n \n   if (expressiondebug)\n     dump_prefix_expression (result.get (), gdb_stdlog);"
    },
    {
      "sha": "56ac5edf627f83b71c26e5bd36e53e8411b0f637",
      "filename": "gdb/parser-defs.h",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c5c412054ebeb9e9c9dcbb36692b1d6235eb6106/gdb/parser-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c5c412054ebeb9e9c9dcbb36692b1d6235eb6106/gdb/parser-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parser-defs.h?ref=c5c412054ebeb9e9c9dcbb36692b1d6235eb6106",
      "patch": "@@ -109,14 +109,16 @@ struct parser_state : public expr_builder\n \t\tint comma,\n \t\tconst char *input,\n \t\tint completion,\n-\t\tinnermost_block_tracker *tracker)\n+\t\tinnermost_block_tracker *tracker,\n+\t\tbool void_p)\n     : expr_builder (lang, gdbarch),\n       expression_context_block (context_block),\n       expression_context_pc (context_pc),\n       comma_terminates (comma),\n       lexptr (input),\n       parse_completion (completion),\n-      block_tracker (tracker)\n+      block_tracker (tracker),\n+      void_context_p (void_p)\n   {\n   }\n \n@@ -192,6 +194,9 @@ struct parser_state : public expr_builder\n   /* The innermost block tracker.  */\n   innermost_block_tracker *block_tracker;\n \n+  /* True if no value is expected from the expression.  */\n+  bool void_context_p;\n+\n private:\n \n   /* Data structure for saving values of arglist_len for function calls whose"
    },
    {
      "sha": "c354b7fbab2010aa1b9b553e9828310c464814cf",
      "filename": "gdb/rust-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c5c412054ebeb9e9c9dcbb36692b1d6235eb6106/gdb/rust-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c5c412054ebeb9e9c9dcbb36692b1d6235eb6106/gdb/rust-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-exp.y?ref=c5c412054ebeb9e9c9dcbb36692b1d6235eb6106",
      "patch": "@@ -2732,7 +2732,7 @@ rust_lex_tests (void)\n \n   /* Set up dummy \"parser\", so that rust_type works.  */\n   struct parser_state ps (language_def (language_rust), target_gdbarch (),\n-\t\t\t  nullptr, 0, 0, nullptr, 0, nullptr);\n+\t\t\t  nullptr, 0, 0, nullptr, 0, nullptr, false);\n   rust_parser parser (&ps);\n \n   rust_lex_test_one (&parser, \"\", 0);"
    }
  ]
}