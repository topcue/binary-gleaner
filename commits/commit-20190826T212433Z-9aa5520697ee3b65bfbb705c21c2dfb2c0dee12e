{
  "sha": "9aa5520697ee3b65bfbb705c21c2dfb2c0dee12e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWFhNTUyMDY5N2VlM2I2NWJmYmI3MDVjMjFjMmRmYjJjMGRlZTEyZQ==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-08-03T00:59:37Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-08-26T21:24:33Z"
    },
    "message": "Factor out the common code in lookup_{static,global}_symbol\n\nThe two functions are extremely similar; this factors out their code into\na shared _internal function.\n\ngdb/ChangeLog:\n\n2019-08-26  Christian Biesinger  <cbiesinger@google.com>\n\n\t* symtab.c (lookup_static_symbol): Call the new function (and move\n\tit down to be next to lookup_global_symbol).\n\t(struct global_sym_lookup_data): Add block_enum member and rename to...\n\t(struct global_or_static_sym_lookup_data): ...this.\n\t(lookup_symbol_global_iterator_cb): Pass block_index instead of\n\tGLOBAL_BLOCK to lookup_symbol_in_objfile and rename to...\n\t(lookup_symbol_global_or_static_iterator_cb): ...this.\n\t(lookup_global_or_static_symbol): New function.\n\t(lookup_global_symbol): Call new function.",
    "tree": {
      "sha": "c08437ec87d4c527179d8aba096b6ba5cdbd71eb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c08437ec87d4c527179d8aba096b6ba5cdbd71eb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9aa5520697ee3b65bfbb705c21c2dfb2c0dee12e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9aa5520697ee3b65bfbb705c21c2dfb2c0dee12e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9aa5520697ee3b65bfbb705c21c2dfb2c0dee12e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9aa5520697ee3b65bfbb705c21c2dfb2c0dee12e/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5c31b35808e467d39d05ffa95428e22bb10fd72d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c31b35808e467d39d05ffa95428e22bb10fd72d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5c31b35808e467d39d05ffa95428e22bb10fd72d"
    }
  ],
  "stats": {
    "total": 114,
    "additions": 57,
    "deletions": 57
  },
  "files": [
    {
      "sha": "dda3115532b12108ec215ccd30c425470a8c6c31",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9aa5520697ee3b65bfbb705c21c2dfb2c0dee12e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9aa5520697ee3b65bfbb705c21c2dfb2c0dee12e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9aa5520697ee3b65bfbb705c21c2dfb2c0dee12e",
      "patch": "@@ -1,3 +1,15 @@\n+2019-08-26  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* symtab.c (lookup_static_symbol): Call the new function (and move\n+\tit down to be next to lookup_global_symbol).\n+\t(struct global_sym_lookup_data): Add block_enum member and rename to...\n+\t(struct global_or_static_sym_lookup_data): ...this.\n+\t(lookup_symbol_global_iterator_cb): Pass block_index instead of\n+\tGLOBAL_BLOCK to lookup_symbol_in_objfile and rename to...\n+\t(lookup_symbol_global_or_static_iterator_cb): ...this.\n+\t(lookup_global_or_static_symbol): New function.\n+\t(lookup_global_symbol): Call new function.\n+\n 2019-08-26  Tom de Vries  <tdevries@suse.de>\n \n \tPR c++/24852"
    },
    {
      "sha": "787ecfe33bfe31387eb8d5996dfd3cf6ffdfc4b1",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 45,
      "deletions": 57,
      "changes": 102,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9aa5520697ee3b65bfbb705c21c2dfb2c0dee12e/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9aa5520697ee3b65bfbb705c21c2dfb2c0dee12e/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=9aa5520697ee3b65bfbb705c21c2dfb2c0dee12e",
      "patch": "@@ -2566,101 +2566,69 @@ lookup_symbol_in_objfile (struct objfile *objfile, enum block_enum block_index,\n   return result;\n }\n \n-/* See symtab.h.  */\n-\n-struct block_symbol\n-lookup_static_symbol (const char *name, const domain_enum domain)\n-{\n-  struct symbol_cache *cache = get_symbol_cache (current_program_space);\n-  struct block_symbol result;\n-  struct block_symbol_cache *bsc;\n-  struct symbol_cache_slot *slot;\n-\n-  /* Lookup in STATIC_BLOCK is not current-objfile-dependent, so just pass\n-     NULL for OBJFILE_CONTEXT.  */\n-  result = symbol_cache_lookup (cache, NULL, STATIC_BLOCK, name, domain,\n-\t\t\t\t&bsc, &slot);\n-  if (result.symbol != NULL)\n-    {\n-      if (SYMBOL_LOOKUP_FAILED_P (result))\n-\treturn {};\n-      return result;\n-    }\n-\n-  for (objfile *objfile : current_program_space->objfiles ())\n-    {\n-      result = lookup_symbol_in_objfile (objfile, STATIC_BLOCK, name, domain);\n-      if (result.symbol != NULL)\n-\t{\n-\t  /* Still pass NULL for OBJFILE_CONTEXT here.  */\n-\t  symbol_cache_mark_found (bsc, slot, NULL, result.symbol,\n-\t\t\t\t   result.block);\n-\t  return result;\n-\t}\n-    }\n-\n-  /* Still pass NULL for OBJFILE_CONTEXT here.  */\n-  symbol_cache_mark_not_found (bsc, slot, NULL, name, domain);\n-  return {};\n-}\n-\n /* Private data to be used with lookup_symbol_global_iterator_cb.  */\n \n-struct global_sym_lookup_data\n+struct global_or_static_sym_lookup_data\n {\n   /* The name of the symbol we are searching for.  */\n   const char *name;\n \n   /* The domain to use for our search.  */\n   domain_enum domain;\n \n+  /* The block index in which to search.  */\n+  enum block_enum block_index;\n+\n   /* The field where the callback should store the symbol if found.\n      It should be initialized to {NULL, NULL} before the search is started.  */\n   struct block_symbol result;\n };\n \n /* A callback function for gdbarch_iterate_over_objfiles_in_search_order.\n-   It searches by name for a symbol in the GLOBAL_BLOCK of the given\n-   OBJFILE.  The arguments for the search are passed via CB_DATA,\n-   which in reality is a pointer to struct global_sym_lookup_data.  */\n+   It searches by name for a symbol in the block given by BLOCK_INDEX of the\n+   given OBJFILE.  The arguments for the search are passed via CB_DATA, which\n+   in reality is a pointer to struct global_or_static_sym_lookup_data.  */\n \n static int\n-lookup_symbol_global_iterator_cb (struct objfile *objfile,\n-\t\t\t\t  void *cb_data)\n+lookup_symbol_global_or_static_iterator_cb (struct objfile *objfile,\n+\t\t\t\t\t    void *cb_data)\n {\n-  struct global_sym_lookup_data *data =\n-    (struct global_sym_lookup_data *) cb_data;\n+  struct global_or_static_sym_lookup_data *data =\n+    (struct global_or_static_sym_lookup_data *) cb_data;\n \n   gdb_assert (data->result.symbol == NULL\n \t      && data->result.block == NULL);\n \n-  data->result = lookup_symbol_in_objfile (objfile, GLOBAL_BLOCK,\n+  data->result = lookup_symbol_in_objfile (objfile, data->block_index,\n \t\t\t\t\t   data->name, data->domain);\n \n   /* If we found a match, tell the iterator to stop.  Otherwise,\n      keep going.  */\n   return (data->result.symbol != NULL);\n }\n \n-/* See symtab.h.  */\n+/* This function contains the common code of lookup_{global,static}_symbol.\n+   OBJFILE is only used if BLOCK_INDEX is GLOBAL_SCOPE, in which case it is\n+   the objfile to start the lookup in.  */\n \n-struct block_symbol\n-lookup_global_symbol (const char *name,\n-\t\t      const struct block *block,\n-\t\t      const domain_enum domain)\n+static struct block_symbol\n+lookup_global_or_static_symbol (const char *name,\n+\t\t\t\tenum block_enum block_index,\n+\t\t\t\tstruct objfile *objfile,\n+\t\t\t\tconst domain_enum domain)\n {\n   struct symbol_cache *cache = get_symbol_cache (current_program_space);\n   struct block_symbol result;\n-  struct objfile *objfile;\n-  struct global_sym_lookup_data lookup_data;\n+  struct global_or_static_sym_lookup_data lookup_data;\n   struct block_symbol_cache *bsc;\n   struct symbol_cache_slot *slot;\n \n-  objfile = lookup_objfile_from_block (block);\n+  gdb_assert (block_index == GLOBAL_BLOCK || block_index == STATIC_BLOCK);\n+  gdb_assert (objfile == nullptr || block_index == GLOBAL_BLOCK);\n \n   /* First see if we can find the symbol in the cache.\n      This works because we use the current objfile to qualify the lookup.  */\n-  result = symbol_cache_lookup (cache, objfile, GLOBAL_BLOCK, name, domain,\n+  result = symbol_cache_lookup (cache, objfile, block_index, name, domain,\n \t\t\t\t&bsc, &slot);\n   if (result.symbol != NULL)\n     {\n@@ -2678,10 +2646,11 @@ lookup_global_symbol (const char *name,\n     {\n       memset (&lookup_data, 0, sizeof (lookup_data));\n       lookup_data.name = name;\n+      lookup_data.block_index = block_index;\n       lookup_data.domain = domain;\n       gdbarch_iterate_over_objfiles_in_search_order\n \t(objfile != NULL ? get_objfile_arch (objfile) : target_gdbarch (),\n-\t lookup_symbol_global_iterator_cb, &lookup_data, objfile);\n+\t lookup_symbol_global_or_static_iterator_cb, &lookup_data, objfile);\n       result = lookup_data.result;\n     }\n \n@@ -2693,6 +2662,25 @@ lookup_global_symbol (const char *name,\n   return result;\n }\n \n+/* See symtab.h.  */\n+\n+struct block_symbol\n+lookup_static_symbol (const char *name, const domain_enum domain)\n+{\n+  return lookup_global_or_static_symbol (name, STATIC_BLOCK, nullptr, domain);\n+}\n+\n+/* See symtab.h.  */\n+\n+struct block_symbol\n+lookup_global_symbol (const char *name,\n+\t\t      const struct block *block,\n+\t\t      const domain_enum domain)\n+{\n+  struct objfile *objfile = lookup_objfile_from_block (block);\n+  return lookup_global_or_static_symbol (name, GLOBAL_BLOCK, objfile, domain);\n+}\n+\n int\n symbol_matches_domain (enum language symbol_language,\n \t\t       domain_enum symbol_domain,"
    }
  ]
}