{
  "sha": "15d2859fddcb769e59b906f9443c85afdd5d7380",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTVkMjg1OWZkZGNiNzY5ZTU5YjkwNmY5NDQzYzg1YWZkZDVkNzM4MA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-20T01:44:19Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-20T03:06:06Z"
    },
    "message": "ubsan: hppa: left shift of negative value\n\nbfd/\n\t* libhppa.h (hppa_field_adjust, bfd_hppa_insn2fmt): Delete forward\n\tdeclaration.  Move ATTRIBUTE_UNUSED to definition.\n\t(sign_extend, low_sign_extend, sign_unext, low_sign_unext),\n\t(re_assemble_3, re_assemble_12, re_assemble_14, re_assemble_16),\n\t(re_assemble_17, re_assemble_21, re_assemble_22): Likewise.  Make\n\targs and return value unsigned.  Use unsigned variables.\n\t(hppa_rebuild_insn): Similarly.\nopcodes/\n\t* hppa-dis.c (extract_16, extract_21, print_insn_hppa): Use\n\tunsigned variables.",
    "tree": {
      "sha": "3d1aa7d06813d4fd6ada5c0fc6152c3e1176e420",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3d1aa7d06813d4fd6ada5c0fc6152c3e1176e420"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/15d2859fddcb769e59b906f9443c85afdd5d7380",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/15d2859fddcb769e59b906f9443c85afdd5d7380",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/15d2859fddcb769e59b906f9443c85afdd5d7380",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/15d2859fddcb769e59b906f9443c85afdd5d7380/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "000fe1a756e707624d387eeacbaa959a01f0d040",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/000fe1a756e707624d387eeacbaa959a01f0d040",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/000fe1a756e707624d387eeacbaa959a01f0d040"
    }
  ],
  "stats": {
    "total": 116,
    "additions": 56,
    "deletions": 60
  },
  "files": [
    {
      "sha": "14aebd93f71b41a41ca0730593b604581c46d98a",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15d2859fddcb769e59b906f9443c85afdd5d7380/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15d2859fddcb769e59b906f9443c85afdd5d7380/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=15d2859fddcb769e59b906f9443c85afdd5d7380",
      "patch": "@@ -1,3 +1,13 @@\n+2019-12-20  Alan Modra  <amodra@gmail.com>\n+\n+\t* libhppa.h (hppa_field_adjust, bfd_hppa_insn2fmt): Delete forward\n+\tdeclaration.  Move ATTRIBUTE_UNUSED to definition.\n+\t(sign_extend, low_sign_extend, sign_unext, low_sign_unext),\n+\t(re_assemble_3, re_assemble_12, re_assemble_14, re_assemble_16),\n+\t(re_assemble_17, re_assemble_21, re_assemble_22): Likewise.  Make\n+\targs and return value unsigned.  Use unsigned variables.\n+\t(hppa_rebuild_insn): Similarly.\n+\n 2019-12-20  Alan Modra  <amodra@gmail.com>\n \n \t* format.c (bfd_check_format_matches): Free matching_vector when"
    },
    {
      "sha": "339831cbb55451401a8ca43148266128b8e5cf56",
      "filename": "bfd/libhppa.h",
      "status": "modified",
      "additions": 33,
      "deletions": 52,
      "changes": 85,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15d2859fddcb769e59b906f9443c85afdd5d7380/bfd/libhppa.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15d2859fddcb769e59b906f9443c85afdd5d7380/bfd/libhppa.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libhppa.h?ref=15d2859fddcb769e59b906f9443c85afdd5d7380",
      "patch": "@@ -155,39 +155,20 @@ enum hppa_reloc_expr_type_alt\n \n /* Some functions to manipulate PA instructions.  */\n \n-/* Declare the functions with the unused attribute to avoid warnings.  */\n-static inline int sign_extend (int, int) ATTRIBUTE_UNUSED;\n-static inline int low_sign_extend (int, int) ATTRIBUTE_UNUSED;\n-static inline int sign_unext (int, int) ATTRIBUTE_UNUSED;\n-static inline int low_sign_unext (int, int) ATTRIBUTE_UNUSED;\n-static inline int re_assemble_3 (int) ATTRIBUTE_UNUSED;\n-static inline int re_assemble_12 (int) ATTRIBUTE_UNUSED;\n-static inline int re_assemble_14 (int) ATTRIBUTE_UNUSED;\n-static inline int re_assemble_16 (int) ATTRIBUTE_UNUSED;\n-static inline int re_assemble_17 (int) ATTRIBUTE_UNUSED;\n-static inline int re_assemble_21 (int) ATTRIBUTE_UNUSED;\n-static inline int re_assemble_22 (int) ATTRIBUTE_UNUSED;\n-static inline bfd_signed_vma hppa_field_adjust\n-  (bfd_vma, bfd_signed_vma, enum hppa_reloc_field_selector_type_alt)\n-  ATTRIBUTE_UNUSED;\n-static inline int bfd_hppa_insn2fmt (bfd *, int) ATTRIBUTE_UNUSED;\n-static inline int hppa_rebuild_insn (int, int, int) ATTRIBUTE_UNUSED;\n-\n-\n /* The *sign_extend functions are used to assemble various bitfields\n    taken from an instruction and return the resulting immediate\n    value.  */\n \n-static inline int\n-sign_extend (int x, int len)\n+static inline unsigned ATTRIBUTE_UNUSED\n+sign_extend (unsigned x, unsigned len)\n {\n-  int signbit = (1 << (len - 1));\n-  int mask = (signbit << 1) - 1;\n+  unsigned signbit = (1 << (len - 1));\n+  unsigned mask = (signbit << 1) - 1;\n   return ((x & mask) ^ signbit) - signbit;\n }\n \n-static inline int\n-low_sign_extend (int x, int len)\n+static inline unsigned ATTRIBUTE_UNUSED\n+low_sign_extend (unsigned x, unsigned len)\n {\n   return (x >> 1) - ((x & 1) << (len - 1));\n }\n@@ -197,21 +178,21 @@ low_sign_extend (int x, int len)\n    insertion into an opcode. pa-risc uses all sorts of weird bitfields\n    in the instruction to hold the value.  */\n \n-static inline int\n-sign_unext (int x, int len)\n+static inline unsigned ATTRIBUTE_UNUSED\n+sign_unext (unsigned x, unsigned len)\n {\n-  int len_ones;\n+  unsigned len_ones;\n \n   len_ones = (1 << len) - 1;\n \n   return x & len_ones;\n }\n \n-static inline int\n-low_sign_unext (int x, int len)\n+static inline unsigned ATTRIBUTE_UNUSED\n+low_sign_unext (unsigned x, unsigned len)\n {\n-  int temp;\n-  int sign;\n+  unsigned temp;\n+  unsigned sign;\n \n   sign = (x >> (len-1)) & 1;\n \n@@ -220,50 +201,50 @@ low_sign_unext (int x, int len)\n   return (temp << 1) | sign;\n }\n \n-static inline int\n-re_assemble_3 (int as3)\n+static inline unsigned ATTRIBUTE_UNUSED\n+re_assemble_3 (unsigned as3)\n {\n   return ((  (as3 & 4) << (13-2))\n \t  | ((as3 & 3) << (13+1)));\n }\n \n-static inline int\n-re_assemble_12 (int as12)\n+static inline unsigned ATTRIBUTE_UNUSED\n+re_assemble_12 (unsigned as12)\n {\n   return ((  (as12 & 0x800) >> 11)\n \t  | ((as12 & 0x400) >> (10 - 2))\n \t  | ((as12 & 0x3ff) << (1 + 2)));\n }\n \n-static inline int\n-re_assemble_14 (int as14)\n+static inline unsigned ATTRIBUTE_UNUSED\n+re_assemble_14 (unsigned as14)\n {\n   return ((  (as14 & 0x1fff) << 1)\n \t  | ((as14 & 0x2000) >> 13));\n }\n \n-static inline int\n-re_assemble_16 (int as16)\n+static inline unsigned ATTRIBUTE_UNUSED\n+re_assemble_16 (unsigned as16)\n {\n-  int s, t;\n+  unsigned s, t;\n \n   /* Unusual 16-bit encoding, for wide mode only.  */\n   t = (as16 << 1) & 0xffff;\n   s = (as16 & 0x8000);\n   return (t ^ s ^ (s >> 1)) | (s >> 15);\n }\n \n-static inline int\n-re_assemble_17 (int as17)\n+static inline unsigned ATTRIBUTE_UNUSED\n+re_assemble_17 (unsigned as17)\n {\n   return ((  (as17 & 0x10000) >> 16)\n \t  | ((as17 & 0x0f800) << (16 - 11))\n \t  | ((as17 & 0x00400) >> (10 - 2))\n \t  | ((as17 & 0x003ff) << (1 + 2)));\n }\n \n-static inline int\n-re_assemble_21 (int as21)\n+static inline unsigned ATTRIBUTE_UNUSED\n+re_assemble_21 (unsigned as21)\n {\n   return ((  (as21 & 0x100000) >> 20)\n \t  | ((as21 & 0x0ffe00) >> 8)\n@@ -272,8 +253,8 @@ re_assemble_21 (int as21)\n \t  | ((as21 & 0x000003) << 12));\n }\n \n-static inline int\n-re_assemble_22 (int as22)\n+static inline unsigned ATTRIBUTE_UNUSED\n+re_assemble_22 (unsigned as22)\n {\n   return ((  (as22 & 0x200000) >> 21)\n \t  | ((as22 & 0x1f0000) << (21 - 16))\n@@ -293,7 +274,7 @@ re_assemble_22 (int as22)\n    This function returns sign extended values in all cases.\n */\n \n-static inline bfd_signed_vma\n+static inline bfd_signed_vma ATTRIBUTE_UNUSED\n hppa_field_adjust (bfd_vma sym_val,\n \t\t   bfd_signed_vma addend,\n \t\t   enum hppa_reloc_field_selector_type_alt r_field)\n@@ -459,8 +440,8 @@ enum hppa_opcode_type\n \n /* Given a machine instruction, return its format.  */\n \n-static inline int\n-bfd_hppa_insn2fmt (bfd *abfd, int insn)\n+static inline unsigned ATTRIBUTE_UNUSED\n+bfd_hppa_insn2fmt (bfd *abfd, unsigned insn)\n {\n   enum hppa_opcode_type op = (enum hppa_opcode_type) get_opcode (insn);\n \n@@ -541,8 +522,8 @@ bfd_hppa_insn2fmt (bfd *abfd, int insn)\n /* Insert VALUE into INSN using R_FORMAT to determine exactly what\n    bits to change.  */\n \n-static inline int\n-hppa_rebuild_insn (int insn, int value, int r_format)\n+static inline unsigned ATTRIBUTE_UNUSED\n+hppa_rebuild_insn (unsigned insn, unsigned value, int r_format)\n {\n   switch (r_format)\n     {"
    },
    {
      "sha": "e0d2fab410bfeed1860783db400db3d238e974d4",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15d2859fddcb769e59b906f9443c85afdd5d7380/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15d2859fddcb769e59b906f9443c85afdd5d7380/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=15d2859fddcb769e59b906f9443c85afdd5d7380",
      "patch": "@@ -1,3 +1,8 @@\n+2019-12-20  Alan Modra  <amodra@gmail.com>\n+\n+\t* hppa-dis.c (extract_16, extract_21, print_insn_hppa): Use\n+\tunsigned variables.\n+\n 2019-12-20  Alan Modra  <amodra@gmail.com>\n \n \t* m68hc11-dis.c (read_memory): Delete forward decls."
    },
    {
      "sha": "9844332f07a00ba7e294ab9715717d5420118fb1",
      "filename": "opcodes/hppa-dis.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15d2859fddcb769e59b906f9443c85afdd5d7380/opcodes/hppa-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15d2859fddcb769e59b906f9443c85afdd5d7380/opcodes/hppa-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/hppa-dis.c?ref=15d2859fddcb769e59b906f9443c85afdd5d7380",
      "patch": "@@ -289,7 +289,7 @@ extract_14 (unsigned word)\n static int\n extract_16 (unsigned word)\n {\n-  int m15, m0, m1;\n+  unsigned m15, m0, m1;\n \n   m0 = GET_BIT (word, 16);\n   m1 = GET_BIT (word, 17);\n@@ -304,7 +304,7 @@ extract_16 (unsigned word)\n static int\n extract_21 (unsigned word)\n {\n-  int val;\n+  unsigned val;\n \n   word &= MASK_21;\n   word <<= 11;\n@@ -1098,9 +1098,9 @@ print_insn_hppa (bfd_vma memaddr, disassemble_info *info)\n \n \t\tcase '#':\n \t\t  {\n-\t\t    int sign = GET_FIELD (insn, 31, 31);\n-\t\t    int imm10 = GET_FIELD (insn, 18, 27);\n-\t\t    int disp;\n+\t\t    unsigned sign = GET_FIELD (insn, 31, 31);\n+\t\t    unsigned imm10 = GET_FIELD (insn, 18, 27);\n+\t\t    unsigned disp;\n \n \t\t    if (sign)\n \t\t      disp = (-1U << 10) | imm10;\n@@ -1114,9 +1114,9 @@ print_insn_hppa (bfd_vma memaddr, disassemble_info *info)\n \t\tcase 'K':\n \t\tcase 'd':\n \t\t  {\n-\t\t    int sign = GET_FIELD (insn, 31, 31);\n-\t\t    int imm11 = GET_FIELD (insn, 18, 28);\n-\t\t    int disp;\n+\t\t    unsigned sign = GET_FIELD (insn, 31, 31);\n+\t\t    unsigned imm11 = GET_FIELD (insn, 18, 28);\n+\t\t    unsigned disp;\n \n \t\t    if (sign)\n \t\t      disp = (-1U << 11) | imm11;"
    }
  ]
}