{
  "sha": "94852430d690f22fd246a0ba75231839c36ec0f1",
  "node_id": "C_kwDOANOeidoAKDk0ODUyNDMwZDY5MGYyMmZkMjQ2YTBiYTc1MjMxODM5YzM2ZWMwZjE",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-27T04:55:34Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-27T21:10:49Z"
    },
    "message": "asan: alpha-vms: buffer overflows\n\nYet more anti-fuzzer sanity checking\n\n\t* vms-alpha.c (evax_bfd_print_egsd): Sanity check record and\n\tname lengths before access.\n\t(evax_bfd_print_etir_stc_ir, evax_bfd_print_etir): Likewise.",
    "tree": {
      "sha": "ebb80626e2a36c0a095f05d2cdc8fc35cd9a7960",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ebb80626e2a36c0a095f05d2cdc8fc35cd9a7960"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/94852430d690f22fd246a0ba75231839c36ec0f1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/94852430d690f22fd246a0ba75231839c36ec0f1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/94852430d690f22fd246a0ba75231839c36ec0f1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/94852430d690f22fd246a0ba75231839c36ec0f1/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "459cde81fb571252cad74dd7333d5dc9694cf077",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/459cde81fb571252cad74dd7333d5dc9694cf077",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/459cde81fb571252cad74dd7333d5dc9694cf077"
    }
  ],
  "stats": {
    "total": 527,
    "additions": 301,
    "deletions": 226
  },
  "files": [
    {
      "sha": "e4a897bfe653d98938359d356fe781487685a056",
      "filename": "bfd/vms-alpha.c",
      "status": "modified",
      "additions": 301,
      "deletions": 226,
      "changes": 527,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94852430d690f22fd246a0ba75231839c36ec0f1/bfd/vms-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94852430d690f22fd246a0ba75231839c36ec0f1/bfd/vms-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-alpha.c?ref=94852430d690f22fd246a0ba75231839c36ec0f1",
      "patch": "@@ -6098,16 +6098,18 @@ static void\n evax_bfd_print_egsd (FILE *file, unsigned char *rec, unsigned int rec_len)\n {\n   unsigned int off = sizeof (struct vms_egsd);\n-  unsigned int n;\n+  unsigned int n = 0;\n \n   fprintf (file, _(\"  EGSD (len=%u):\\n\"), rec_len);\n+  if (rec_len < sizeof (struct vms_egsd) + sizeof (struct vms_egsd_entry))\n+    return;\n \n-  n = 0;\n-  for (off = sizeof (struct vms_egsd); off < rec_len; )\n+  while (off <= rec_len - sizeof (struct vms_egsd_entry))\n     {\n       struct vms_egsd_entry *e = (struct vms_egsd_entry *)(rec + off);\n       unsigned int type;\n       unsigned int len;\n+      unsigned int rest;\n \n       type = (unsigned)bfd_getl16 (e->gsdtyp);\n       len = (unsigned)bfd_getl16 (e->gsdsiz);\n@@ -6117,174 +6119,212 @@ evax_bfd_print_egsd (FILE *file, unsigned char *rec, unsigned int rec_len)\n \t       n, type, len);\n       n++;\n \n-      if (off + len > rec_len || off + len < off)\n+      if (len < sizeof (struct vms_egsd_entry) || len > rec_len - off)\n \t{\n-\t  fprintf (file, _(\"   Error: length larger than remaining space in record\\n\"));\n+\t  fprintf (file, _(\"   Erroneous length\\n\"));\n \t  return;\n \t}\n \n       switch (type)\n \t{\n \tcase EGSD__C_PSC:\n-\t  {\n-\t    struct vms_egps *egps = (struct vms_egps *)e;\n-\t    unsigned int flags = bfd_getl16 (egps->flags);\n-\t    unsigned int l;\n-\n-\t    fprintf (file, _(\"PSC - Program section definition\\n\"));\n-\t    fprintf (file, _(\"   alignment  : 2**%u\\n\"), egps->align);\n-\t    fprintf (file, _(\"   flags      : 0x%04x\"), flags);\n-\t    evax_bfd_print_egsd_flags (file, flags);\n-\t    fputc ('\\n', file);\n-\t    l = bfd_getl32 (egps->alloc);\n-\t    fprintf (file, _(\"   alloc (len): %u (0x%08x)\\n\"), l, l);\n-\t    fprintf (file, _(\"   name       : %.*s\\n\"),\n-\t\t     egps->namlng, egps->name);\n-\t  }\n+\t  if (len >= offsetof (struct vms_egps, name))\n+\t    {\n+\t      struct vms_egps *egps = (struct vms_egps *) e;\n+\t      unsigned int flags = bfd_getl16 (egps->flags);\n+\t      unsigned int l;\n+\n+\t      fprintf (file, _(\"PSC - Program section definition\\n\"));\n+\t      fprintf (file, _(\"   alignment  : 2**%u\\n\"), egps->align);\n+\t      fprintf (file, _(\"   flags      : 0x%04x\"), flags);\n+\t      evax_bfd_print_egsd_flags (file, flags);\n+\t      fputc ('\\n', file);\n+\t      l = bfd_getl32 (egps->alloc);\n+\t      fprintf (file, _(\"   alloc (len): %u (0x%08x)\\n\"), l, l);\n+\t      rest = len - offsetof (struct vms_egps, name);\n+\t      fprintf (file, _(\"   name       : %.*s\\n\"),\n+\t\t       egps->namlng > rest ? rest : egps->namlng,\n+\t\t       egps->name);\n+\t    }\n \t  break;\n \tcase EGSD__C_SPSC:\n-\t  {\n-\t    struct vms_esgps *esgps = (struct vms_esgps *)e;\n-\t    unsigned int flags = bfd_getl16 (esgps->flags);\n-\t    unsigned int l;\n-\n-\t    fprintf (file, _(\"SPSC - Shared Image Program section def\\n\"));\n-\t    fprintf (file, _(\"   alignment  : 2**%u\\n\"), esgps->align);\n-\t    fprintf (file, _(\"   flags      : 0x%04x\"), flags);\n-\t    evax_bfd_print_egsd_flags (file, flags);\n-\t    fputc ('\\n', file);\n-\t    l = bfd_getl32 (esgps->alloc);\n-\t    fprintf (file, _(\"   alloc (len)   : %u (0x%08x)\\n\"), l, l);\n-\t    fprintf (file, _(\"   image offset  : 0x%08x\\n\"),\n-\t\t     (unsigned int)bfd_getl32 (esgps->base));\n-\t    fprintf (file, _(\"   symvec offset : 0x%08x\\n\"),\n-\t\t     (unsigned int)bfd_getl32 (esgps->value));\n-\t    fprintf (file, _(\"   name          : %.*s\\n\"),\n-\t\t     esgps->namlng, esgps->name);\n-\t  }\n+\t  if (len >= offsetof (struct vms_esgps, name))\n+\t    {\n+\t      struct vms_esgps *esgps = (struct vms_esgps *) e;\n+\t      unsigned int flags = bfd_getl16 (esgps->flags);\n+\t      unsigned int l;\n+\n+\t      fprintf (file, _(\"SPSC - Shared Image Program section def\\n\"));\n+\t      fprintf (file, _(\"   alignment  : 2**%u\\n\"), esgps->align);\n+\t      fprintf (file, _(\"   flags      : 0x%04x\"), flags);\n+\t      evax_bfd_print_egsd_flags (file, flags);\n+\t      fputc ('\\n', file);\n+\t      l = bfd_getl32 (esgps->alloc);\n+\t      fprintf (file, _(\"   alloc (len)   : %u (0x%08x)\\n\"), l, l);\n+\t      fprintf (file, _(\"   image offset  : 0x%08x\\n\"),\n+\t\t       (unsigned int) bfd_getl32 (esgps->base));\n+\t      fprintf (file, _(\"   symvec offset : 0x%08x\\n\"),\n+\t\t       (unsigned int) bfd_getl32 (esgps->value));\n+\t      rest = len - offsetof (struct vms_esgps, name);\n+\t      fprintf (file, _(\"   name          : %.*s\\n\"),\n+\t\t       esgps->namlng > rest ? rest : esgps->namlng,\n+\t\t       esgps->name);\n+\t    }\n \t  break;\n \tcase EGSD__C_SYM:\n-\t  {\n-\t    struct vms_egsy *egsy = (struct vms_egsy *)e;\n-\t    unsigned int flags = bfd_getl16 (egsy->flags);\n+\t  if (len >= sizeof (struct vms_egsy))\n+\t    {\n+\t      struct vms_egsy *egsy = (struct vms_egsy *) e;\n+\t      unsigned int flags = bfd_getl16 (egsy->flags);\n \n-\t    if (flags & EGSY__V_DEF)\n-\t      {\n-\t\tstruct vms_esdf *esdf = (struct vms_esdf *)e;\n-\n-\t\tfprintf (file, _(\"SYM - Global symbol definition\\n\"));\n-\t\tfprintf (file, _(\"   flags: 0x%04x\"), flags);\n-\t\texav_bfd_print_egsy_flags (flags, file);\n-\t\tfputc ('\\n', file);\n-\t\tfprintf (file, _(\"   psect offset: 0x%08x\\n\"),\n-\t\t\t (unsigned)bfd_getl32 (esdf->value));\n-\t\tif (flags & EGSY__V_NORM)\n-\t\t  {\n-\t\t    fprintf (file, _(\"   code address: 0x%08x\\n\"),\n-\t\t\t     (unsigned)bfd_getl32 (esdf->code_address));\n-\t\t    fprintf (file, _(\"   psect index for entry point : %u\\n\"),\n-\t\t\t     (unsigned)bfd_getl32 (esdf->ca_psindx));\n-\t\t  }\n-\t\tfprintf (file, _(\"   psect index : %u\\n\"),\n-\t\t\t (unsigned)bfd_getl32 (esdf->psindx));\n-\t\tfprintf (file, _(\"   name        : %.*s\\n\"),\n-\t\t\t esdf->namlng, esdf->name);\n-\t      }\n-\t    else\n-\t      {\n-\t\tstruct vms_esrf *esrf = (struct vms_esrf *)e;\n+\t      if ((flags & EGSY__V_DEF) != 0\n+\t\t  && len >= offsetof (struct vms_esdf, name))\n+\t\t{\n+\t\t  struct vms_esdf *esdf = (struct vms_esdf *) e;\n+\n+\t\t  fprintf (file, _(\"SYM - Global symbol definition\\n\"));\n+\t\t  fprintf (file, _(\"   flags: 0x%04x\"), flags);\n+\t\t  exav_bfd_print_egsy_flags (flags, file);\n+\t\t  fputc ('\\n', file);\n+\t\t  fprintf (file, _(\"   psect offset: 0x%08x\\n\"),\n+\t\t\t   (unsigned) bfd_getl32 (esdf->value));\n+\t\t  if (flags & EGSY__V_NORM)\n+\t\t    {\n+\t\t      fprintf (file, _(\"   code address: 0x%08x\\n\"),\n+\t\t\t       (unsigned) bfd_getl32 (esdf->code_address));\n+\t\t      fprintf (file, _(\"   psect index for entry point : %u\\n\"),\n+\t\t\t       (unsigned) bfd_getl32 (esdf->ca_psindx));\n+\t\t    }\n+\t\t  fprintf (file, _(\"   psect index : %u\\n\"),\n+\t\t\t   (unsigned) bfd_getl32 (esdf->psindx));\n+\t\t  rest = len - offsetof (struct vms_esdf, name);\n+\t\t  fprintf (file, _(\"   name        : %.*s\\n\"),\n+\t\t\t   esdf->namlng > rest ? rest : esdf->namlng,\n+\t\t\t   esdf->name);\n+\t\t}\n+\t      else if (len >= offsetof (struct vms_esrf, name))\n+\t\t{\n+\t\t  struct vms_esrf *esrf = (struct vms_esrf *)e;\n \n-\t\tfprintf (file, _(\"SYM - Global symbol reference\\n\"));\n-\t\tfprintf (file, _(\"   name       : %.*s\\n\"),\n-\t\t\t esrf->namlng, esrf->name);\n-\t      }\n-\t  }\n+\t\t  fprintf (file, _(\"SYM - Global symbol reference\\n\"));\n+\t\t  rest = len - offsetof (struct vms_esrf, name);\n+\t\t  fprintf (file, _(\"   name       : %.*s\\n\"),\n+\t\t\t   esrf->namlng > rest ? rest : esrf->namlng,\n+\t\t\t   esrf->name);\n+\t\t}\n+\t    }\n \t  break;\n \tcase EGSD__C_IDC:\n-\t  {\n-\t    struct vms_eidc *eidc = (struct vms_eidc *)e;\n-\t    unsigned int flags = bfd_getl32 (eidc->flags);\n-\t    unsigned char *p;\n-\n-\t    fprintf (file, _(\"IDC - Ident Consistency check\\n\"));\n-\t    fprintf (file, _(\"   flags         : 0x%08x\"), flags);\n-\t    if (flags & EIDC__V_BINIDENT)\n-\t      fputs (\" BINDENT\", file);\n-\t    fputc ('\\n', file);\n-\t    fprintf (file, _(\"   id match      : %x\\n\"),\n-\t\t     (flags >> EIDC__V_IDMATCH_SH) & EIDC__V_IDMATCH_MASK);\n-\t    fprintf (file, _(\"   error severity: %x\\n\"),\n-\t\t     (flags >> EIDC__V_ERRSEV_SH) & EIDC__V_ERRSEV_MASK);\n-\t    p = eidc->name;\n-\t    fprintf (file, _(\"   entity name   : %.*s\\n\"), p[0], p + 1);\n-\t    p += 1 + p[0];\n-\t    fprintf (file, _(\"   object name   : %.*s\\n\"), p[0], p + 1);\n-\t    p += 1 + p[0];\n-\t    if (flags & EIDC__V_BINIDENT)\n-\t      fprintf (file, _(\"   binary ident  : 0x%08x\\n\"),\n-\t\t       (unsigned)bfd_getl32 (p + 1));\n-\t    else\n-\t      fprintf (file, _(\"   ascii ident   : %.*s\\n\"), p[0], p + 1);\n-\t  }\n+\t  if (len >= sizeof (struct vms_eidc))\n+\t    {\n+\t      struct vms_eidc *eidc = (struct vms_eidc *) e;\n+\t      unsigned int flags = bfd_getl32 (eidc->flags);\n+\t      unsigned char *p;\n+\n+\t      fprintf (file, _(\"IDC - Ident Consistency check\\n\"));\n+\t      fprintf (file, _(\"   flags         : 0x%08x\"), flags);\n+\t      if (flags & EIDC__V_BINIDENT)\n+\t\tfputs (\" BINDENT\", file);\n+\t      fputc ('\\n', file);\n+\t      fprintf (file, _(\"   id match      : %x\\n\"),\n+\t\t       (flags >> EIDC__V_IDMATCH_SH) & EIDC__V_IDMATCH_MASK);\n+\t      fprintf (file, _(\"   error severity: %x\\n\"),\n+\t\t       (flags >> EIDC__V_ERRSEV_SH) & EIDC__V_ERRSEV_MASK);\n+\t      p = eidc->name;\n+\t      rest = len - (p - (unsigned char *) e);\n+\t      fprintf (file, _(\"   entity name   : %.*s\\n\"),\n+\t\t       p[0] > rest - 1 ? rest - 1 : p[0], p + 1);\n+\t      if (rest > 1u + p[0])\n+\t\t{\n+\t\t  rest -= 1 + p[0];\n+\t\t  p += 1 + p[0];\n+\t\t  fprintf (file, _(\"   object name   : %.*s\\n\"),\n+\t\t\t   p[0] > rest - 1 ? rest - 1 : p[0], p + 1);\n+\t\t  if (rest > 1u + p[0])\n+\t\t    {\n+\t\t      rest -= 1 + p[0];\n+\t\t      p += 1 + p[0];\n+\t\t      if (flags & EIDC__V_BINIDENT)\n+\t\t\t{\n+\t\t\t  if (rest >= 4)\n+\t\t\t    fprintf (file, _(\"   binary ident  : 0x%08x\\n\"),\n+\t\t\t\t     (unsigned) bfd_getl32 (p));\n+\t\t\t}\n+\t\t      else\n+\t\t\tfprintf (file, _(\"   ascii ident   : %.*s\\n\"),\n+\t\t\t\t p[0] > rest - 1 ? rest - 1 : p[0], p + 1);\n+\t\t    }\n+\t\t}\n+\t    }\n \t  break;\n \tcase EGSD__C_SYMG:\n-\t  {\n-\t    struct vms_egst *egst = (struct vms_egst *)e;\n-\t    unsigned int flags = bfd_getl16 (egst->header.flags);\n-\n-\t    fprintf (file, _(\"SYMG - Universal symbol definition\\n\"));\n-\t    fprintf (file, _(\"   flags: 0x%04x\"), flags);\n-\t    exav_bfd_print_egsy_flags (flags, file);\n-\t    fputc ('\\n', file);\n-\t    fprintf (file, _(\"   symbol vector offset: 0x%08x\\n\"),\n-\t\t     (unsigned)bfd_getl32 (egst->value));\n-\t    fprintf (file, _(\"   entry point: 0x%08x\\n\"),\n-\t\t     (unsigned)bfd_getl32 (egst->lp_1));\n-\t    fprintf (file, _(\"   proc descr : 0x%08x\\n\"),\n-\t\t     (unsigned)bfd_getl32 (egst->lp_2));\n-\t    fprintf (file, _(\"   psect index: %u\\n\"),\n-\t\t     (unsigned)bfd_getl32 (egst->psindx));\n-\t    fprintf (file, _(\"   name       : %.*s\\n\"),\n-\t\t     egst->namlng, egst->name);\n-\t  }\n+\t  if (len >= offsetof (struct vms_egst, name))\n+\t    {\n+\t      struct vms_egst *egst = (struct vms_egst *) e;\n+\t      unsigned int flags = bfd_getl16 (egst->header.flags);\n+\n+\t      fprintf (file, _(\"SYMG - Universal symbol definition\\n\"));\n+\t      fprintf (file, _(\"   flags: 0x%04x\"), flags);\n+\t      exav_bfd_print_egsy_flags (flags, file);\n+\t      fputc ('\\n', file);\n+\t      fprintf (file, _(\"   symbol vector offset: 0x%08x\\n\"),\n+\t\t       (unsigned) bfd_getl32 (egst->value));\n+\t      fprintf (file, _(\"   entry point: 0x%08x\\n\"),\n+\t\t       (unsigned) bfd_getl32 (egst->lp_1));\n+\t      fprintf (file, _(\"   proc descr : 0x%08x\\n\"),\n+\t\t       (unsigned) bfd_getl32 (egst->lp_2));\n+\t      fprintf (file, _(\"   psect index: %u\\n\"),\n+\t\t       (unsigned) bfd_getl32 (egst->psindx));\n+\t      rest = len - offsetof (struct vms_egst, name);\n+\t      fprintf (file, _(\"   name       : %.*s\\n\"),\n+\t\t       egst->namlng > rest ? rest : egst->namlng,\n+\t\t       egst->name);\n+\t    }\n \t  break;\n \tcase EGSD__C_SYMV:\n-\t  {\n-\t    struct vms_esdfv *esdfv = (struct vms_esdfv *)e;\n-\t    unsigned int flags = bfd_getl16 (esdfv->flags);\n-\n-\t    fprintf (file, _(\"SYMV - Vectored symbol definition\\n\"));\n-\t    fprintf (file, _(\"   flags: 0x%04x\"), flags);\n-\t    exav_bfd_print_egsy_flags (flags, file);\n-\t    fputc ('\\n', file);\n-\t    fprintf (file, _(\"   vector      : 0x%08x\\n\"),\n-\t\t     (unsigned)bfd_getl32 (esdfv->vector));\n-\t    fprintf (file, _(\"   psect offset: %u\\n\"),\n-\t\t     (unsigned)bfd_getl32 (esdfv->value));\n-\t    fprintf (file, _(\"   psect index : %u\\n\"),\n-\t\t     (unsigned)bfd_getl32 (esdfv->psindx));\n-\t    fprintf (file, _(\"   name        : %.*s\\n\"),\n-\t\t     esdfv->namlng, esdfv->name);\n-\t  }\n+\t  if (len >= offsetof (struct vms_esdfv, name))\n+\t    {\n+\t      struct vms_esdfv *esdfv = (struct vms_esdfv *) e;\n+\t      unsigned int flags = bfd_getl16 (esdfv->flags);\n+\n+\t      fprintf (file, _(\"SYMV - Vectored symbol definition\\n\"));\n+\t      fprintf (file, _(\"   flags: 0x%04x\"), flags);\n+\t      exav_bfd_print_egsy_flags (flags, file);\n+\t      fputc ('\\n', file);\n+\t      fprintf (file, _(\"   vector      : 0x%08x\\n\"),\n+\t\t       (unsigned) bfd_getl32 (esdfv->vector));\n+\t      fprintf (file, _(\"   psect offset: %u\\n\"),\n+\t\t       (unsigned) bfd_getl32 (esdfv->value));\n+\t      fprintf (file, _(\"   psect index : %u\\n\"),\n+\t\t       (unsigned) bfd_getl32 (esdfv->psindx));\n+\t      rest = len - offsetof (struct vms_esdfv, name);\n+\t      fprintf (file, _(\"   name        : %.*s\\n\"),\n+\t\t       esdfv->namlng > rest ? rest : esdfv->namlng,\n+\t\t       esdfv->name);\n+\t    }\n \t  break;\n \tcase EGSD__C_SYMM:\n-\t  {\n-\t    struct vms_esdfm *esdfm = (struct vms_esdfm *)e;\n-\t    unsigned int flags = bfd_getl16 (esdfm->flags);\n-\n-\t    fprintf (file, _(\"SYMM - Global symbol definition with version\\n\"));\n-\t    fprintf (file, _(\"   flags: 0x%04x\"), flags);\n-\t    exav_bfd_print_egsy_flags (flags, file);\n-\t    fputc ('\\n', file);\n-\t    fprintf (file, _(\"   version mask: 0x%08x\\n\"),\n-\t\t     (unsigned)bfd_getl32 (esdfm->version_mask));\n-\t    fprintf (file, _(\"   psect offset: %u\\n\"),\n-\t\t     (unsigned)bfd_getl32 (esdfm->value));\n-\t    fprintf (file, _(\"   psect index : %u\\n\"),\n-\t\t     (unsigned)bfd_getl32 (esdfm->psindx));\n-\t    fprintf (file, _(\"   name        : %.*s\\n\"),\n-\t\t     esdfm->namlng, esdfm->name);\n-\t  }\n+\t  if (len >= offsetof (struct vms_esdfm, name))\n+\t    {\n+\t      struct vms_esdfm *esdfm = (struct vms_esdfm *) e;\n+\t      unsigned int flags = bfd_getl16 (esdfm->flags);\n+\n+\t      fprintf (file,\n+\t\t       _(\"SYMM - Global symbol definition with version\\n\"));\n+\t      fprintf (file, _(\"   flags: 0x%04x\"), flags);\n+\t      exav_bfd_print_egsy_flags (flags, file);\n+\t      fputc ('\\n', file);\n+\t      fprintf (file, _(\"   version mask: 0x%08x\\n\"),\n+\t\t       (unsigned)bfd_getl32 (esdfm->version_mask));\n+\t      fprintf (file, _(\"   psect offset: %u\\n\"),\n+\t\t       (unsigned)bfd_getl32 (esdfm->value));\n+\t      fprintf (file, _(\"   psect index : %u\\n\"),\n+\t\t       (unsigned)bfd_getl32 (esdfm->psindx));\n+\t      rest = len - offsetof (struct vms_esdfm, name);\n+\t      fprintf (file, _(\"   name        : %.*s\\n\"),\n+\t\t       esdfm->namlng > rest ? rest : esdfm->namlng,\n+\t\t       esdfm->name);\n+\t    }\n \t  break;\n \tdefault:\n \t  fprintf (file, _(\"unhandled egsd entry type %u\\n\"), type);\n@@ -6319,8 +6359,12 @@ evax_bfd_print_hex (FILE *file, const char *pfx,\n }\n \n static void\n-evax_bfd_print_etir_stc_ir (FILE *file, const unsigned char *buf, int is_ps)\n+evax_bfd_print_etir_stc_ir (FILE *file, const unsigned char *buf,\n+\t\t\t    unsigned int len, int is_ps)\n {\n+  if (is_ps ? len < 44 : len < 33)\n+    return;\n+\n   /* xgettext:c-format */\n   fprintf (file, _(\"    linkage index: %u, replacement insn: 0x%08x\\n\"),\n \t   (unsigned)bfd_getl32 (buf),\n@@ -6342,62 +6386,71 @@ evax_bfd_print_etir_stc_ir (FILE *file, const unsigned char *buf, int is_ps)\n \t     (unsigned)bfd_getl32 (buf + 40),\n \t     (unsigned)bfd_getl32 (buf + 36));\n   else\n-    fprintf (file, _(\"    global name: %.*s\\n\"), buf[32], buf + 33);\n+    fprintf (file, _(\"    global name: %.*s\\n\"),\n+\t     buf[32] > len - 33 ? len - 33 : buf[32],\n+\t     buf + 33);\n }\n \n static void\n evax_bfd_print_etir (FILE *file, const char *name,\n \t\t     unsigned char *rec, unsigned int rec_len)\n {\n-  unsigned int off = sizeof (struct vms_egsd);\n-  unsigned int sec_len = 0;\n+  unsigned int off = sizeof (struct vms_eobjrec);\n \n   /* xgettext:c-format */\n-  fprintf (file, _(\"  %s (len=%u+%u):\\n\"), name,\n-\t   (unsigned)(rec_len - sizeof (struct vms_eobjrec)),\n-\t   (unsigned)sizeof (struct vms_eobjrec));\n+  fprintf (file, _(\"  %s (len=%u):\\n\"), name, (unsigned) rec_len);\n+  if (rec_len < sizeof (struct vms_eobjrec) + sizeof (struct vms_etir))\n+    return;\n \n-  for (off = sizeof (struct vms_eobjrec); off < rec_len; )\n+  while (off <= rec_len - sizeof (struct vms_etir))\n     {\n       struct vms_etir *etir = (struct vms_etir *)(rec + off);\n       unsigned char *buf;\n       unsigned int type;\n       unsigned int size;\n+      unsigned int rest;\n \n       type = bfd_getl16 (etir->rectyp);\n       size = bfd_getl16 (etir->size);\n       buf = rec + off + sizeof (struct vms_etir);\n \n-      if (off + size > rec_len || off + size < off)\n+      if (size < sizeof (struct vms_etir) || size > rec_len - off)\n \t{\n-\t  fprintf (file, _(\"   Error: length larger than remaining space in record\\n\"));\n+\t  fprintf (file, _(\"   Erroneous length\\n\"));\n \t  return;\n \t}\n \n       /* xgettext:c-format */\n-      fprintf (file, _(\"   (type: %3u, size: 4+%3u): \"), type, size - 4);\n+      fprintf (file, _(\"   (type: %3u, size: %3u): \"), type, size);\n+      rest = size - sizeof (struct vms_etir);\n       switch (type)\n \t{\n \tcase ETIR__C_STA_GBL:\n-\t  fprintf (file, _(\"STA_GBL (stack global) %.*s\\n\"),\n-\t\t   buf[0], buf + 1);\n+\t  if (rest >= 1)\n+\t    fprintf (file, _(\"STA_GBL (stack global) %.*s\\n\"),\n+\t\t     buf[0] > rest - 1 ? rest - 1 : buf[0], buf + 1);\n \t  break;\n \tcase ETIR__C_STA_LW:\n-\t  fprintf (file, _(\"STA_LW (stack longword) 0x%08x\\n\"),\n-\t\t   (unsigned)bfd_getl32 (buf));\n+\t  fprintf (file, _(\"STA_LW (stack longword)\"));\n+\t  if (rest >= 4)\n+\t    fprintf (file, \" 0x%08x\\n\",\n+\t\t     (unsigned) bfd_getl32 (buf));\n \t  break;\n \tcase ETIR__C_STA_QW:\n-\t  fprintf (file, _(\"STA_QW (stack quadword) 0x%08x %08x\\n\"),\n-\t\t   (unsigned)bfd_getl32 (buf + 4),\n-\t\t   (unsigned)bfd_getl32 (buf + 0));\n+\t  fprintf (file, _(\"STA_QW (stack quadword)\"));\n+\t  if (rest >= 8)\n+\t    fprintf (file, \" 0x%08x %08x\\n\",\n+\t\t     (unsigned) bfd_getl32 (buf + 4),\n+\t\t     (unsigned) bfd_getl32 (buf + 0));\n \t  break;\n \tcase ETIR__C_STA_PQ:\n \t  fprintf (file, _(\"STA_PQ (stack psect base + offset)\\n\"));\n-\t  /* xgettext:c-format */\n-\t  fprintf (file, _(\"    psect: %u, offset: 0x%08x %08x\\n\"),\n-\t\t   (unsigned)bfd_getl32 (buf + 0),\n-\t\t   (unsigned)bfd_getl32 (buf + 8),\n-\t\t   (unsigned)bfd_getl32 (buf + 4));\n+\t  if (rest >= 12)\n+\t    /* xgettext:c-format */\n+\t    fprintf (file, _(\"    psect: %u, offset: 0x%08x %08x\\n\"),\n+\t\t     (unsigned) bfd_getl32 (buf + 0),\n+\t\t     (unsigned) bfd_getl32 (buf + 8),\n+\t\t     (unsigned) bfd_getl32 (buf + 4));\n \t  break;\n \tcase ETIR__C_STA_LI:\n \t  fprintf (file, _(\"STA_LI (stack literal)\\n\"));\n@@ -6422,22 +6475,26 @@ evax_bfd_print_etir (FILE *file, const char *name,\n \t  fprintf (file, _(\"STO_QW (store quadword)\\n\"));\n \t  break;\n \tcase ETIR__C_STO_IMMR:\n-\t  {\n-\t    unsigned int len = bfd_getl32 (buf);\n-\t    fprintf (file,\n-\t\t     _(\"STO_IMMR (store immediate repeat) %u bytes\\n\"),\n-\t\t     len);\n-\t    evax_bfd_print_hex (file, \"   \", buf + 4, len);\n-\t    sec_len += len;\n-\t  }\n+\t  if (rest >= 4)\n+\t    {\n+\t      unsigned int rpt = bfd_getl32 (buf);\n+\t      fprintf (file,\n+\t\t       _(\"STO_IMMR (store immediate repeat) %u bytes\\n\"),\n+\t\t       rpt);\n+\t      if (rpt > rest - 4)\n+\t\trpt = rest - 4;\n+\t      evax_bfd_print_hex (file, \"   \", buf + 4, rpt);\n+\t    }\n \t  break;\n \tcase ETIR__C_STO_GBL:\n-\t  fprintf (file, _(\"STO_GBL (store global) %.*s\\n\"),\n-\t\t   buf[0], buf + 1);\n+\t  if (rest >= 1)\n+\t    fprintf (file, _(\"STO_GBL (store global) %.*s\\n\"),\n+\t\t     buf[0] > rest - 1 ? rest - 1 : buf[0], buf + 1);\n \t  break;\n \tcase ETIR__C_STO_CA:\n-\t  fprintf (file, _(\"STO_CA (store code address) %.*s\\n\"),\n-\t\t   buf[0], buf + 1);\n+\t  if (rest >= 1)\n+\t    fprintf (file, _(\"STO_CA (store code address) %.*s\\n\"),\n+\t\t     buf[0] > rest - 1 ? rest - 1 : buf[0], buf + 1);\n \t  break;\n \tcase ETIR__C_STO_RB:\n \t  fprintf (file, _(\"STO_RB (store relative branch)\\n\"));\n@@ -6449,18 +6506,21 @@ evax_bfd_print_etir (FILE *file, const char *name,\n \t  fprintf (file, _(\"STO_OFF (store offset to psect)\\n\"));\n \t  break;\n \tcase ETIR__C_STO_IMM:\n-\t  {\n-\t    unsigned int len = bfd_getl32 (buf);\n-\t    fprintf (file,\n-\t\t     _(\"STO_IMM (store immediate) %u bytes\\n\"),\n-\t\t     len);\n-\t    evax_bfd_print_hex (file, \"   \", buf + 4, len);\n-\t    sec_len += len;\n-\t  }\n+\t  if (rest >= 4)\n+\t    {\n+\t      unsigned int rpt = bfd_getl32 (buf);\n+\t      fprintf (file,\n+\t\t       _(\"STO_IMM (store immediate) %u bytes\\n\"),\n+\t\t       rpt);\n+\t      if (rpt > rest - 4)\n+\t\trpt = rest - 4;\n+\t      evax_bfd_print_hex (file, \"   \", buf + 4, rpt);\n+\t    }\n \t  break;\n \tcase ETIR__C_STO_GBL_LW:\n-\t  fprintf (file, _(\"STO_GBL_LW (store global longword) %.*s\\n\"),\n-\t\t   buf[0], buf + 1);\n+\t  if (rest >= 1)\n+\t    fprintf (file, _(\"STO_GBL_LW (store global longword) %.*s\\n\"),\n+\t\t     buf[0] > rest - 1 ? rest - 1 : buf[0], buf + 1);\n \t  break;\n \tcase ETIR__C_STO_LP_PSB:\n \t  fprintf (file, _(\"STO_OFF (store LP with procedure signature)\\n\"));\n@@ -6530,65 +6590,79 @@ evax_bfd_print_etir (FILE *file, const char *name,\n \tcase ETIR__C_STC_LP_PSB:\n \t  fprintf (file,\n \t\t   _(\"STC_LP_PSB (store cond linkage pair + signature)\\n\"));\n-\t  /* xgettext:c-format */\n-\t  fprintf (file, _(\"   linkage index: %u, procedure: %.*s\\n\"),\n-\t\t   (unsigned)bfd_getl32 (buf), buf[4], buf + 5);\n-\t  buf += 4 + 1 + buf[4];\n-\t  fprintf (file, _(\"   signature: %.*s\\n\"), buf[0], buf + 1);\n+\t  if (rest >= 5)\n+\t    {\n+\t      /* xgettext:c-format */\n+\t      fprintf (file, _(\"   linkage index: %u, procedure: %.*s\\n\"),\n+\t\t       (unsigned) bfd_getl32 (buf),\n+\t\t       buf[4] > rest - 5 ? rest - 5 : buf[4], buf + 5);\n+\t      if (rest > 4 + 1u + buf[4])\n+\t\t{\n+\t\t  rest -= 4 + 1 + buf[4];\n+\t\t  buf += 4 + 1 + buf[4];\n+\t\t  fprintf (file, _(\"   signature: %.*s\\n\"),\n+\t\t\t   buf[0] > rest - 1 ? rest - 1: buf[0], buf + 1);\n+\t\t}\n+\t    }\n \t  break;\n \tcase ETIR__C_STC_GBL:\n \t  fprintf (file, _(\"STC_GBL (store cond global)\\n\"));\n-\t  /* xgettext:c-format */\n-\t  fprintf (file, _(\"   linkage index: %u, global: %.*s\\n\"),\n-\t\t   (unsigned)bfd_getl32 (buf), buf[4], buf + 5);\n+\t  if (rest >= 5)\n+\t    /* xgettext:c-format */\n+\t    fprintf (file, _(\"   linkage index: %u, global: %.*s\\n\"),\n+\t\t     (unsigned) bfd_getl32 (buf),\n+\t\t     buf[4] > rest - 5 ? rest - 5 : buf[4], buf + 5);\n \t  break;\n \tcase ETIR__C_STC_GCA:\n \t  fprintf (file, _(\"STC_GCA (store cond code address)\\n\"));\n-\t  /* xgettext:c-format */\n-\t  fprintf (file, _(\"   linkage index: %u, procedure name: %.*s\\n\"),\n-\t\t   (unsigned)bfd_getl32 (buf), buf[4], buf + 5);\n+\t  if (rest >= 5)\n+\t    /* xgettext:c-format */\n+\t    fprintf (file, _(\"   linkage index: %u, procedure name: %.*s\\n\"),\n+\t\t     (unsigned) bfd_getl32 (buf),\n+\t\t     buf[4] > rest - 5 ? rest - 5 : buf[4], buf + 5);\n \t  break;\n \tcase ETIR__C_STC_PS:\n \t  fprintf (file, _(\"STC_PS (store cond psect + offset)\\n\"));\n-\t  fprintf (file,\n-\t\t   /* xgettext:c-format */\n-\t\t   _(\"   linkage index: %u, psect: %u, offset: 0x%08x %08x\\n\"),\n-\t\t   (unsigned)bfd_getl32 (buf),\n-\t\t   (unsigned)bfd_getl32 (buf + 4),\n-\t\t   (unsigned)bfd_getl32 (buf + 12),\n-\t\t   (unsigned)bfd_getl32 (buf + 8));\n+\t  if (rest >= 16)\n+\t    fprintf (file,\n+\t\t     /* xgettext:c-format */\n+\t\t     _(\"   linkage index: %u, psect: %u, offset: 0x%08x %08x\\n\"),\n+\t\t     (unsigned)bfd_getl32 (buf),\n+\t\t     (unsigned)bfd_getl32 (buf + 4),\n+\t\t     (unsigned)bfd_getl32 (buf + 12),\n+\t\t     (unsigned)bfd_getl32 (buf + 8));\n \t  break;\n \tcase ETIR__C_STC_NOP_GBL:\n \t  fprintf (file, _(\"STC_NOP_GBL (store cond NOP at global addr)\\n\"));\n-\t  evax_bfd_print_etir_stc_ir (file, buf, 0);\n+\t  evax_bfd_print_etir_stc_ir (file, buf, rest, 0);\n \t  break;\n \tcase ETIR__C_STC_NOP_PS:\n \t  fprintf (file, _(\"STC_NOP_PS (store cond NOP at psect + offset)\\n\"));\n-\t  evax_bfd_print_etir_stc_ir (file, buf, 1);\n+\t  evax_bfd_print_etir_stc_ir (file, buf, rest, 1);\n \t  break;\n \tcase ETIR__C_STC_BSR_GBL:\n \t  fprintf (file, _(\"STC_BSR_GBL (store cond BSR at global addr)\\n\"));\n-\t  evax_bfd_print_etir_stc_ir (file, buf, 0);\n+\t  evax_bfd_print_etir_stc_ir (file, buf, rest, 0);\n \t  break;\n \tcase ETIR__C_STC_BSR_PS:\n \t  fprintf (file, _(\"STC_BSR_PS (store cond BSR at psect + offset)\\n\"));\n-\t  evax_bfd_print_etir_stc_ir (file, buf, 1);\n+\t  evax_bfd_print_etir_stc_ir (file, buf, rest, 1);\n \t  break;\n \tcase ETIR__C_STC_LDA_GBL:\n \t  fprintf (file, _(\"STC_LDA_GBL (store cond LDA at global addr)\\n\"));\n-\t  evax_bfd_print_etir_stc_ir (file, buf, 0);\n+\t  evax_bfd_print_etir_stc_ir (file, buf, rest, 0);\n \t  break;\n \tcase ETIR__C_STC_LDA_PS:\n \t  fprintf (file, _(\"STC_LDA_PS (store cond LDA at psect + offset)\\n\"));\n-\t  evax_bfd_print_etir_stc_ir (file, buf, 1);\n+\t  evax_bfd_print_etir_stc_ir (file, buf, rest, 1);\n \t  break;\n \tcase ETIR__C_STC_BOH_GBL:\n \t  fprintf (file, _(\"STC_BOH_GBL (store cond BOH at global addr)\\n\"));\n-\t  evax_bfd_print_etir_stc_ir (file, buf, 0);\n+\t  evax_bfd_print_etir_stc_ir (file, buf, rest, 0);\n \t  break;\n \tcase ETIR__C_STC_BOH_PS:\n \t  fprintf (file, _(\"STC_BOH_PS (store cond BOH at psect + offset)\\n\"));\n-\t  evax_bfd_print_etir_stc_ir (file, buf, 1);\n+\t  evax_bfd_print_etir_stc_ir (file, buf, rest, 1);\n \t  break;\n \tcase ETIR__C_STC_NBH_GBL:\n \t  fprintf (file,\n@@ -6601,13 +6675,14 @@ evax_bfd_print_etir (FILE *file, const char *name,\n \n \tcase ETIR__C_CTL_SETRB:\n \t  fprintf (file, _(\"CTL_SETRB (set relocation base)\\n\"));\n-\t  sec_len += 4;\n \t  break;\n \tcase ETIR__C_CTL_AUGRB:\n-\t  {\n-\t    unsigned int val = bfd_getl32 (buf);\n-\t    fprintf (file, _(\"CTL_AUGRB (augment relocation base) %u\\n\"), val);\n-\t  }\n+\t  if (rest >= 4)\n+\t    {\n+\t      unsigned int val = bfd_getl32 (buf);\n+\t      fprintf (file, _(\"CTL_AUGRB (augment relocation base) %u\\n\"),\n+\t\t       val);\n+\t    }\n \t  break;\n \tcase ETIR__C_CTL_DFLOC:\n \t  fprintf (file, _(\"CTL_DFLOC (define location)\\n\"));"
    }
  ]
}