{
  "sha": "c8d541e2e73493228f332f4bdc9ecc8164d3744f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzhkNTQxZTJlNzM0OTMyMjhmMzMyZjRiZGM5ZWNjODE2NGQzNzQ0Zg==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-06-07T10:02:15Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-06-07T10:02:15Z"
    },
    "message": "x86: correct absolute branch check with segment override\n\nThis needs to happen before checking of what may legitimately start a\nmemory operand (like is done when there's no segment override). Plus a\nsecond '*' shouldn't be permitted when one was already found before the\nsegment override.",
    "tree": {
      "sha": "2b051a512008ef805e71d3837a7124fdc73aecb8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2b051a512008ef805e71d3837a7124fdc73aecb8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c8d541e2e73493228f332f4bdc9ecc8164d3744f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c8d541e2e73493228f332f4bdc9ecc8164d3744f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c8d541e2e73493228f332f4bdc9ecc8164d3744f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c8d541e2e73493228f332f4bdc9ecc8164d3744f/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "98ff9f1c5d0bff7545d508288a5699522277d570",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/98ff9f1c5d0bff7545d508288a5699522277d570",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/98ff9f1c5d0bff7545d508288a5699522277d570"
    }
  ],
  "stats": {
    "total": 23,
    "additions": 14,
    "deletions": 9
  },
  "files": [
    {
      "sha": "008027b1fc12f9d525961cf6d41d7dac9c15d01d",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8d541e2e73493228f332f4bdc9ecc8164d3744f/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8d541e2e73493228f332f4bdc9ecc8164d3744f/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=c8d541e2e73493228f332f4bdc9ecc8164d3744f",
      "patch": "@@ -1,3 +1,8 @@\n+2021-06-07  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (i386_att_operand): Flip checking for '*' and\n+\tstart-of-expression. Don't permit '*' when one was already seen.\n+\n 2021-06-07  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (parse_operands): Don't check for matched"
    },
    {
      "sha": "0fe439eddd5ac94d7751198738ba69e57ecea0e6",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c8d541e2e73493228f332f4bdc9ecc8164d3744f/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c8d541e2e73493228f332f4bdc9ecc8164d3744f/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=c8d541e2e73493228f332f4bdc9ecc8164d3744f",
      "patch": "@@ -11413,22 +11413,22 @@ i386_att_operand (char *operand_string)\n \t  if (is_space_char (*op_string))\n \t    ++op_string;\n \n-\t  if (!is_digit_char (*op_string)\n-\t      && !is_identifier_char (*op_string)\n-\t      && *op_string != '('\n-\t      && *op_string != ABSOLUTE_PREFIX)\n-\t    {\n-\t      as_bad (_(\"bad memory operand `%s'\"), op_string);\n-\t      return 0;\n-\t    }\n \t  /* Handle case of %es:*foo.  */\n-\t  if (*op_string == ABSOLUTE_PREFIX)\n+\t  if (!i.jumpabsolute && *op_string == ABSOLUTE_PREFIX)\n \t    {\n \t      ++op_string;\n \t      if (is_space_char (*op_string))\n \t\t++op_string;\n \t      i.jumpabsolute = true;\n \t    }\n+\n+\t  if (!is_digit_char (*op_string)\n+\t      && !is_identifier_char (*op_string)\n+\t      && *op_string != '(')\n+\t    {\n+\t      as_bad (_(\"bad memory operand `%s'\"), op_string);\n+\t      return 0;\n+\t    }\n \t  goto do_memory_reference;\n \t}\n "
    }
  ]
}