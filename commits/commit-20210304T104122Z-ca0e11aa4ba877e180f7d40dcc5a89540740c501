{
  "sha": "ca0e11aa4ba877e180f7d40dcc5a89540740c501",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2EwZTExYWE0YmE4NzdlMTgwZjdkNDBkY2M1YTg5NTQwNzQwYzUwMQ==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-03-04T10:41:22Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2021-03-04T10:41:22Z"
    },
    "message": "Gate the displaying of non-debug sections in separate debuginfo files.\n\n\tPR 27478\n\t* objdump.c (process_links): New variable.\n\t(usage): Add --process-links.\n\t(long_options): Likewise.\n\t(dump_bfd): Stop processing once the bfd has been loaded unless\n\tthis is the main file or process_links has been enabled.\n\t(main): Handle the process-links option.\n\t* readelf.c (process_links): New variable.\n\t(struct filedata): Add is_separate field.\n\t(options): Add --process-links.\n\t(usage): Likewise.\n\t(parse_args): Likewise.\n\t(process_file_header): Include the filename when dumping\n\tinformation for separate debuginfo files.\n\t(process_program_headers): Likewise.\n\t(process_section_headers): Likewise.\n\t(process_section_groups): Likewise.\n\t(process_relocs): Likewise.\n\t(process_dynamic_section): Likewise.\n\t(process_version_sections): Likewise.\n\t(display_lto_symtab): Likewise.\n\t(process_symbol_table): Likewise.\n\t(process_syminfo): Likewise.\n\t(initialise_dumps_by_name): Likewise.\n\t(process_section_contents): Likewise.\n\t(process_notes_at): Likewise.\n\t(process_notes): Likewise.\n\t(open_file): Add is_separate parameter.  Use to initialise the\n\tis_separate field in the filedata structure.\n\t(open_deug): Update call to open_file.\n\t(process_object): Add processing of the contents of separate\n\tdebuginfo files, gated by the process_links variable.\n\t(process_archive): Update call to open_file.\n\t(process_file): Initialise the is_separate field in the filedata\n\tstructure.\n\t* dwarf.c (load_separate_debug_info_file): Only report the\n\tloading of a separate file if debug links are being dumped.\n\t* objcopy.c (keep_section_symbols): New variable.\n\t(enum command_line_switch): Add OPTION_KEEP_SYMBOLS.\n\t(strip_options): Add keep-section-symbols.\n\t(copy_options): Likewise.\n\t(copy_usage): Likewise.\n\t(strip_usage): Likewise.\n\t(copy_object): Keep section symbols if requested by command line\n\toption.\n\t(strip_main): Handle --keep-section-symbols.\n\t(copy_main): Likewise.\n\t* doc/binutils.texi: Document the new options.\n\t* NEWS: Mention the new features.\n\t* testsuite/binutils-all/compress.exp (test_gnu_debuglink):\n\tUpdate options passed to objdump.  Use diff rather than cmp to\n\tcompare the dumped data.\n\t* testsuite/binutils-all/objdump.WK2: Update regexp.\n\t* testsuite/binutils-all/objdump.WK3: Update regexp.\n\t* testsuite/binutils-all/objdump.exp: Use --process-links\n\tinstead of --dwarf=follow-links.\n\t* testsuite/binutils-all/readelf.exp (readelf_test): Include\n\treadelf's output in the log when the test fails.\n\tAdd the -P option to the -wKis test.\n\t* testsuite/binutils-all/readelf.wKis: Update expected output.",
    "tree": {
      "sha": "4b63669803d3f6fdac19e967dadb1e7f521f4b75",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4b63669803d3f6fdac19e967dadb1e7f521f4b75"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ca0e11aa4ba877e180f7d40dcc5a89540740c501",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca0e11aa4ba877e180f7d40dcc5a89540740c501",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ca0e11aa4ba877e180f7d40dcc5a89540740c501",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca0e11aa4ba877e180f7d40dcc5a89540740c501/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "168bb18858e749a211125e8eb3cec27d83fc2ebb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/168bb18858e749a211125e8eb3cec27d83fc2ebb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/168bb18858e749a211125e8eb3cec27d83fc2ebb"
    }
  ],
  "stats": {
    "total": 567,
    "additions": 460,
    "deletions": 107
  },
  "files": [
    {
      "sha": "758dfdb8e70d3f37f6d882e4bc64941e56d35264",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 63,
      "deletions": 0,
      "changes": 63,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=ca0e11aa4ba877e180f7d40dcc5a89540740c501",
      "patch": "@@ -1,3 +1,66 @@\n+2021-03-04  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 27478\n+\t* objdump.c (process_links): New variable.\n+\t(usage): Add --process-links.\n+\t(long_options): Likewise.\n+\t(dump_bfd): Stop processing once the bfd has been loaded unless\n+\tthis is the main file or process_links has been enabled.\n+\t(main): Handle the process-links option.\n+\t* readelf.c (process_links): New variable.\n+\t(struct filedata): Add is_separate field.\n+\t(options): Add --process-links.\n+\t(usage): Likewise.\n+\t(parse_args): Likewise.\n+\t(process_file_header): Include the filename when dumping\n+\tinformation for separate debuginfo files.\n+\t(process_program_headers): Likewise.\n+\t(process_section_headers): Likewise.\n+\t(process_section_groups): Likewise.\n+\t(process_relocs): Likewise.\n+\t(process_dynamic_section): Likewise.\n+\t(process_version_sections): Likewise.\n+\t(display_lto_symtab): Likewise.\n+\t(process_symbol_table): Likewise.\n+\t(process_syminfo): Likewise.\n+\t(initialise_dumps_by_name): Likewise.\n+\t(process_section_contents): Likewise.\n+\t(process_notes_at): Likewise.\n+\t(process_notes): Likewise.\n+\t(open_file): Add is_separate parameter.  Use to initialise the\n+\tis_separate field in the filedata structure.\n+\t(open_deug): Update call to open_file.\n+\t(process_object): Add processing of the contents of separate\n+\tdebuginfo files, gated by the process_links variable.\n+\t(process_archive): Update call to open_file.\n+\t(process_file): Initialise the is_separate field in the filedata\n+\tstructure.\n+\t* dwarf.c (load_separate_debug_info_file): Only report the\n+\tloading of a separate file if debug links are being dumped.\n+\t* objcopy.c (keep_section_symbols): New variable.\n+\t(enum command_line_switch): Add OPTION_KEEP_SYMBOLS.\n+\t(strip_options): Add keep-section-symbols.\n+\t(copy_options): Likewise.\n+\t(copy_usage): Likewise.\n+\t(strip_usage): Likewise.\n+\t(copy_object): Keep section symbols if requested by command line\n+\toption.\n+\t(strip_main): Handle --keep-section-symbols.\n+\t(copy_main): Likewise.\n+\t* doc/binutils.texi: Document the new options.\n+\t* NEWS: Mention the new features.\n+\t* testsuite/binutils-all/compress.exp (test_gnu_debuglink):\n+\tUpdate options passed to objdump.  Use diff rather than cmp to\n+\tcompare the dumped data.\n+\t* testsuite/binutils-all/objdump.WK2: Update regexp.\n+\t* testsuite/binutils-all/objdump.WK3: Update regexp.\n+\t* testsuite/binutils-all/objdump.exp: Use --process-links\n+\tinstead of --dwarf=follow-links.\n+\t* testsuite/binutils-all/readelf.exp (readelf_test): Include\n+\treadelf's output in the log when the test fails.\n+\tAdd the -P option to the -wKis test.\n+\t* testsuite/binutils-all/readelf.wKis: Update expected output.\n+\n 2021-03-03  Alan Modra  <amodra@gmail.com>\n \n \tPR 27493"
    },
    {
      "sha": "a4d7a61ef2df4d9ccb652411a605b6e7b3b70558",
      "filename": "binutils/NEWS",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/NEWS?ref=ca0e11aa4ba877e180f7d40dcc5a89540740c501",
      "patch": "@@ -1,5 +1,10 @@\n -*- text -*-\n \n+* A new command line --keep-section-symbols has been added to objcopy and\n+  strip.  This stops the removal of unused section symbols when the file is\n+  copied.  Removing these symbols saves space, but sometimes they are needed by\n+  other tools.\n+\n * objcopy --weaken, --weaken-symbol and --weaken-symbols now make undefined\n   symbols weak on targets that support weak symbols.\n \n@@ -13,6 +18,25 @@\n   restored by the use of the --enable-follow-debug-links=no configure time\n   option.\n \n+  The semantics of the =follow-links option have also been slightly changed.\n+  When enabled, the option allows for the loading of symbol tables and string\n+  tables from the separate files which can be used to enhance the information\n+  displayed when dumping other sections, but it does not automatically imply\n+  that information from the separate files should be displayed.\n+\n+  If other debug section display options are also enabled (eg\n+  --debug-dump=info) then the contents of matching sections in both the main\n+  file and the separate debuginfo file *will* be displayed.  This is because in\n+  most cases the debug section will only be present in one of the files.\n+\n+  If however non-debug section display options are enabled (eg --sections) then\n+  the contents of matching parts of the separate debuginfo file will *not* be\n+  displayed.  This is because in most cases the user probably only wanted to\n+  load the symbol information from the separate debuginfo file.  In order to\n+  change this behaviour a new command line option --process-links can be used.\n+  This will allow di0pslay options to applied to both the main file and any\n+  separate debuginfo files.\n+\n * Nm has a new command line option: --quiet.  This suppresses \"no symbols\"\n   diagnostic.\n "
    },
    {
      "sha": "a9d1dd3e73b98f5235fd7f3b5aed7c8679d3dd1e",
      "filename": "binutils/doc/binutils.texi",
      "status": "modified",
      "additions": 29,
      "deletions": 1,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/doc/binutils.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/doc/binutils.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/doc/binutils.texi?ref=ca0e11aa4ba877e180f7d40dcc5a89540740c501",
      "patch": "@@ -1210,6 +1210,8 @@ objcopy [@option{-F} @var{bfdname}|@option{--target=}@var{bfdname}]\n         [@option{-g}|@option{--strip-debug}]\n         [@option{--strip-unneeded}]\n         [@option{-K} @var{symbolname}|@option{--keep-symbol=}@var{symbolname}]\n+        [@option{--keep-file-symbols}]\n+        [@option{--keep-section-symbols}]\n         [@option{-N} @var{symbolname}|@option{--strip-symbol=}@var{symbolname}]\n         [@option{--strip-unneeded-symbol=}@var{symbolname}]\n         [@option{-G} @var{symbolname}|@option{--keep-global-symbol=}@var{symbolname}]\n@@ -1266,7 +1268,6 @@ objcopy [@option{-F} @var{bfdname}|@option{--target=}@var{bfdname}]\n         [@option{--prefix-sections=}@var{string}]\n         [@option{--prefix-alloc-sections=}@var{string}]\n         [@option{--add-gnu-debuglink=}@var{path-to-file}]\n-        [@option{--keep-file-symbols}]\n         [@option{--only-keep-debug}]\n         [@option{--strip-dwo}]\n         [@option{--extract-dwo}]\n@@ -1967,6 +1968,11 @@ As long as the debug info file has been installed into one of these\n locations before the debugger is run everything should work\n correctly.\n \n+@item --keep-section-symbils\n+When stripping a file, perhaps with @option{--strip-debug} or\n+@option{--strip-unneeded}, retain any symbols specifying section names,\n+which would otherwise get stripped.\n+\n @item --keep-file-symbols\n When stripping a file, perhaps with @option{--strip-debug} or\n @option{--strip-unneeded}, retain any symbols specifying source file names,\n@@ -2202,6 +2208,7 @@ objdump [@option{-a}|@option{--archive-headers}]\n          @option{--dwarf}[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=str-offsets,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges,=gdb_index,=addr,=cu_index,=links]]\n         [@option{-WK}|@option{--dwarf=follow-links}]\n         [@option{-WN}|@option{--dwarf=no-follow-links}]\n+        [@option{-L}|@option{--process-links}]\n         [@option{--ctf=}@var{section}]\n         [@option{-G}|@option{--stabs}]\n         [@option{-t}|@option{--syms}]\n@@ -2441,6 +2448,13 @@ for specification with @option{-b} or @option{-m}.\n @cindex section information\n Display information only for section @var{name}.\n \n+@item -L\n+@itemx --process-links\n+Display the contents of non-debug sections found in separate debuginfo\n+files that are linked to the main file.  This option automatically\n+implies the @option{-WK} option, and only sections requested by other\n+command line options will be displayed.\n+\n @item -l\n @itemx --line-numbers\n @cindex source filenames for object files\n@@ -3321,6 +3335,7 @@ strip [@option{-F} @var{bfdname} |@option{--target=}@var{bfdname}]\n       [@option{-o} @var{file}] [@option{-p}|@option{--preserve-dates}]\n       [@option{-D}|@option{--enable-deterministic-archives}]\n       [@option{-U}|@option{--disable-deterministic-archives}]\n+      [@option{--keep-section-symbols}]\n       [@option{--keep-file-symbols}]\n       [@option{--only-keep-debug}]\n       [@option{-v} |@option{--verbose}] [@option{-V}|@option{--version}]\n@@ -3516,6 +3531,11 @@ Remove non-global symbols.\n Remove compiler-generated local symbols.\n (These usually start with @samp{L} or @samp{.}.)\n \n+@item --keep-section-symbols\n+When stripping a file, perhaps with @option{--strip-debug} or\n+@option{--strip-unneeded}, retain any symbols specifying section names,\n+which would otherwise get stripped.\n+\n @item --keep-file-symbols\n When stripping a file, perhaps with @option{--strip-debug} or\n @option{--strip-unneeded}, retain any symbols specifying source file names,\n@@ -4771,6 +4791,7 @@ readelf [@option{-a}|@option{--all}]\n          @option{--debug-dump}[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=str-offsets,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges,=gdb_index,=addr,=cu_index,=links]]\n         [@option{-wK}|@option{--debug-dump=follow-links}]\n         [@option{-wN}|@option{--debug-dump=no-follow-links}]\n+        [@option{-P}|@option{--process-links}]\n         [@option{--dwarf-depth=@var{n}}]\n         [@option{--dwarf-start=@var{n}}]\n         [@option{--ctf=}@var{section}]\n@@ -5003,6 +5024,13 @@ command to @command{ar}, but without using the BFD library.  @xref{ar}.\n @itemx --debug-dump[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=str-offsets,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges,=gdb_index,=addr,=cu_index,=links,=follow-links]\n @include debug.options.texi\n \n+@item -P\n+@itemx --process-links\n+Display the contents of non-debug sections found in separate debuginfo\n+files that are linked to the main file.  This option automatically\n+implies the @option{-wK} option, and only sections requested by other\n+command line options will be displayed.\n+\n @include ctf.options.texi\n @item --ctf-symbols=@var{section}\n @item --ctf-strings=@var{section}"
    },
    {
      "sha": "15f0bd09dc8f6c7ffa03d7dfbea853ede42a2e05",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=ca0e11aa4ba877e180f7d40dcc5a89540740c501",
      "patch": "@@ -11277,7 +11277,8 @@ load_separate_debug_info (const char *            main_filename,\n   /* FIXME: We do not check to see if there are any other separate debug info\n      files that would also match.  */\n \n-  printf (_(\"%s: Found separate debug info file: %s\\n\\n\"), main_filename, debug_filename);\n+  if (do_debug_links)\n+    printf (_(\"\\n%s: Found separate debug info file: %s\\n\"), main_filename, debug_filename);\n   add_separate_debug_file (debug_filename, debug_handle);\n \n   /* Do not free debug_filename - it might be referenced inside"
    },
    {
      "sha": "d58f910f2fa7c0d1238db09df43c14cae96a3320",
      "filename": "binutils/objcopy.c",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/objcopy.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/objcopy.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objcopy.c?ref=ca0e11aa4ba877e180f7d40dcc5a89540740c501",
      "patch": "@@ -91,6 +91,7 @@ static int copy_byte = -1;\n static int interleave = 0; /* Initialised to 4 in copy_main().  */\n static int copy_width = 1;\n \n+static bfd_boolean keep_section_symbols = FALSE ;/* True if section symbols should be retained.  */\n static bfd_boolean verbose;\t\t/* Print file and target names.  */\n static bfd_boolean preserve_dates;\t/* Preserve input file timestamp.  */\n static int deterministic = -1;\t\t/* Enable deterministic archives.  */\n@@ -335,6 +336,7 @@ enum command_line_switch\n   OPTION_KEEP_FILE_SYMBOLS,\n   OPTION_KEEP_SECTION,\n   OPTION_KEEP_SYMBOLS,\n+  OPTION_KEEP_SECTION_SYMBOLS,\n   OPTION_LOCALIZE_HIDDEN,\n   OPTION_LOCALIZE_SYMBOLS,\n   OPTION_LONG_SECTION_NAMES,\n@@ -387,6 +389,7 @@ static struct option strip_options[] =\n   {\"info\", no_argument, 0, OPTION_FORMATS_INFO},\n   {\"input-format\", required_argument, 0, 'I'}, /* Obsolete */\n   {\"input-target\", required_argument, 0, 'I'},\n+  {\"keep-section-symbols\", no_argument, 0, OPTION_KEEP_SECTION_SYMBOLS},\n   {\"keep-file-symbols\", no_argument, 0, OPTION_KEEP_FILE_SYMBOLS},\n   {\"keep-section\", required_argument, 0, OPTION_KEEP_SECTION},\n   {\"keep-symbol\", required_argument, 0, 'K'},\n@@ -463,6 +466,7 @@ static struct option copy_options[] =\n   {\"keep-section\", required_argument, 0, OPTION_KEEP_SECTION},\n   {\"keep-symbol\", required_argument, 0, 'K'},\n   {\"keep-symbols\", required_argument, 0, OPTION_KEEP_SYMBOLS},\n+  {\"keep-section-symbols\", required_argument, 0, OPTION_KEEP_SECTION_SYMBOLS},\n   {\"localize-hidden\", no_argument, 0, OPTION_LOCALIZE_HIDDEN},\n   {\"localize-symbol\", required_argument, 0, 'L'},\n   {\"localize-symbols\", required_argument, 0, OPTION_LOCALIZE_SYMBOLS},\n@@ -595,6 +599,7 @@ copy_usage (FILE *stream, int exit_status)\n      --extract-symbol              Remove section contents but keep symbols\\n\\\n      --keep-section <name>         Do not strip section <name>\\n\\\n   -K --keep-symbol <name>          Do not strip symbol <name>\\n\\\n+     --keep-section-symbols        Do not strip section symbols\\n\\\n      --keep-file-symbols           Do not strip file symbol(s)\\n\\\n      --localize-hidden             Turn all ELF hidden symbols into locals\\n\\\n   -L --localize-symbol <name>      Force symbol <name> to be marked as a local\\n\\\n@@ -729,6 +734,7 @@ strip_usage (FILE *stream, int exit_status)\n   -N --strip-symbol=<name>         Do not copy symbol <name>\\n\\\n      --keep-section=<name>         Do not strip section <name>\\n\\\n   -K --keep-symbol=<name>          Do not strip symbol <name>\\n\\\n+     --keep-section-symbols        Do not strip section symbols\\n\\\n      --keep-file-symbols           Do not strip file symbol(s)\\n\\\n   -w --wildcard                    Permit wildcard in symbol comparison\\n\\\n   -x --discard-all                 Remove all non-global symbols\\n\\\n@@ -3196,7 +3202,7 @@ copy_object (bfd *ibfd, bfd *obfd, const bfd_arch_info_type *input_arch)\n    if ((obfd->flags & (EXEC_P | DYNAMIC)) != 0\n        && (obfd->flags & HAS_RELOC) == 0)\n     {\n-      if (bfd_keep_unused_section_symbols (obfd))\n+      if (bfd_keep_unused_section_symbols (obfd) || keep_section_symbols)\n \t{\n \t  /* Non-relocatable inputs may not have the unused section\n \t     symbols.  Mark all section symbols as used to generate\n@@ -4768,6 +4774,9 @@ strip_main (int argc, char *argv[])\n \tcase OPTION_KEEP_FILE_SYMBOLS:\n \t  keep_file_symbols = 1;\n \t  break;\n+\tcase OPTION_KEEP_SECTION_SYMBOLS:\n+\t  keep_section_symbols = TRUE;\n+\t  break;\n \tcase 0:\n \t  /* We've been given a long option.  */\n \t  break;\n@@ -5653,6 +5662,10 @@ copy_main (int argc, char *argv[])\n \t\t\t\t&keep_specific_buffer);\n \t  break;\n \n+\tcase OPTION_KEEP_SECTION_SYMBOLS:\n+\t  keep_section_symbols = TRUE;\n+\t  break;\n+\n \tcase OPTION_LOCALIZE_HIDDEN:\n \t  localize_hidden = TRUE;\n \t  break;"
    },
    {
      "sha": "0aa037384c6d8d3315d0fd3a02fe1c7b22f7d0cb",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=ca0e11aa4ba877e180f7d40dcc5a89540740c501",
      "patch": "@@ -128,6 +128,7 @@ static const char * source_comment;     /* --source_comment.  */\n static bfd_boolean visualize_jumps = FALSE;          /* --visualize-jumps.  */\n static bfd_boolean color_output = FALSE;             /* --visualize-jumps=color.  */\n static bfd_boolean extended_color_output = FALSE;    /* --visualize-jumps=extended-color.  */\n+static bfd_boolean process_links = FALSE;   /* --process-links.  */\n \n static int demangle_flags = DMGL_ANSI | DMGL_PARAMS;\n \n@@ -247,6 +248,9 @@ usage (FILE *stream, int status)\n   -WN,--dwarf=no-follow-links  Do not follow links to separate debug info files (default)\\n\\\n \"));\n #endif\n+  fprintf (stream, _(\"\\\n+  -L, --process-links          Display the contents of non-debug sections in separate debuginfo files.\\n\\\n+\"));\n #ifdef ENABLE_LIBCTF\n   fprintf (stream, _(\"\\\n   --ctf=SECTION            Display CTF info from SECTION\\n\\\n@@ -383,6 +387,7 @@ static struct option long_options[]=\n   {\"line-numbers\", no_argument, NULL, 'l'},\n   {\"no-show-raw-insn\", no_argument, &show_raw_insn, -1},\n   {\"no-addresses\", no_argument, &no_addresses, 1},\n+  {\"process-links\", no_argument, &process_links, TRUE},\n   {\"prefix-addresses\", no_argument, &prefix_addresses, 1},\n   {\"recurse-limit\", no_argument, NULL, OPTION_RECURSE_LIMIT},\n   {\"recursion-limit\", no_argument, NULL, OPTION_RECURSE_LIMIT},\n@@ -4843,6 +4848,9 @@ dump_bfd (bfd *abfd, bfd_boolean is_mainfile)\n       bfd_map_over_sections (abfd, adjust_addresses, &has_reloc);\n     }\n \n+  if (! is_mainfile && ! process_links)\n+    return;\n+\n   if (! dump_debugging_tags && ! suppress_bfd_header)\n     printf (_(\"\\n%s:     file format %s\\n\"),\n \t    sanitize_string (bfd_get_filename (abfd)),\n@@ -5357,6 +5365,10 @@ main (int argc, char **argv)\n \t  do_demangle = TRUE;\n \t  seenflag = TRUE;\n \t  break;\n+\tcase 'L':\n+\t  process_links = TRUE;\n+\t  do_follow_links = TRUE;\n+\t  break;\n \tcase 'W':\n \t  dump_dwarf_section_info = TRUE;\n \t  seenflag = TRUE;"
    },
    {
      "sha": "c862839b4cf27cbe75265baca4a82f27ce947943",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 301,
      "deletions": 86,
      "changes": 387,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=ca0e11aa4ba877e180f7d40dcc5a89540740c501",
      "patch": "@@ -238,6 +238,7 @@ static bfd_boolean is_32bit_elf = FALSE;\n static bfd_boolean decompress_dumps = FALSE;\n static bfd_boolean do_not_show_symbol_truncation = FALSE;\n static bfd_boolean do_demangle = FALSE;\t/* Pretty print C++ symbol names.  */\n+static bfd_boolean process_links = FALSE;\n static int demangle_flags = DMGL_ANSI | DMGL_PARAMS;\n \n static char *dump_ctf_parent_name;\n@@ -259,6 +260,7 @@ struct group\n typedef struct filedata\n {\n   const char *         file_name;\n+  bfd_boolean          is_separate;\n   FILE *               handle;\n   bfd_size_type        file_size;\n   Elf_Internal_Ehdr    file_header;\n@@ -675,7 +677,7 @@ print_symbol (signed int width, const char * symbol)\n static const char *\n printable_section_name (Filedata * filedata, const Elf_Internal_Shdr * sec)\n {\n-#define MAX_PRINT_SEC_NAME_LEN 128\n+#define MAX_PRINT_SEC_NAME_LEN 256\n   static char  sec_name_buf [MAX_PRINT_SEC_NAME_LEN + 1];\n   const char * name = SECTION_NAME_PRINT (sec);\n   char *       buf = sec_name_buf;\n@@ -4546,6 +4548,7 @@ static struct option options[] =\n   {\"segments\",\t       no_argument, 0, 'l'},\n   {\"full-section-name\",no_argument, 0, 'N'},\n   {\"notes\",\t       no_argument, 0, 'n'},\n+  {\"process-links\",    no_argument, 0, 'P'},\n   {\"string-dump\",      required_argument, 0, 'p'},\n   {\"relocated-dump\",   required_argument, 0, 'R'},\n   {\"relocs\",\t       no_argument, 0, 'r'},\n@@ -4624,12 +4627,14 @@ usage (FILE * stream)\n   -R --relocated-dump=<number|name>\\n\\\n                          Dump the contents of section <number|name> as relocated bytes\\n\\\n   -z --decompress        Decompress section before dumping it\\n\\\n-  -w[lLiaprmfFsoORtUuTgAck] or\\n\\\n+  -w[lLiaprmfFsoORtUuTgAc] or\\n\\\n   --debug-dump[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,\\n\\\n                =frames-interp,=str,=str-offsets,=loc,=Ranges,=pubtypes,\\n\\\n                =gdb_index,=trace_info,=trace_abbrev,=trace_aranges,\\n\\\n-               =addr,=cu_index,=links]\\n\\\n-                         Display the contents of DWARF debug sections\\n\"));\n+               =addr,=cu_index]\\n\\\n+                         Display the contents of DWARF debug sections\\n\\\n+  -wk,--debug-dump=links Display the contents of sections that link to separate debuginfo files\\n\\\n+  -P,--process-links     Display the contents of non-debug sections in separate debuginfo files.  (Implies -wK)\\n\"));\n #if DEFAULT_FOR_FOLLOW_LINKS\n   fprintf (stream, _(\"\\\n   -wK,--debug-dump=follow-links     Follow links to separate debug info files (default)\\n\\\n@@ -4759,7 +4764,7 @@ parse_args (struct dump_data *dumpdata, int argc, char ** argv)\n     usage (stderr);\n \n   while ((c = getopt_long\n-\t  (argc, argv, \"ACDHILNR:STVWacdeghi:lnp:rstuvw::x:z\", options, NULL)) != EOF)\n+\t  (argc, argv, \"ACDHILNPR:STVWacdeghi:lnp:rstuvw::x:z\", options, NULL)) != EOF)\n     {\n       switch (c)\n \t{\n@@ -4837,6 +4842,10 @@ parse_args (struct dump_data *dumpdata, int argc, char ** argv)\n \tcase 'L':\n \t  do_checks = TRUE;\n \t  break;\n+\tcase 'P':\n+\t  process_links = TRUE;\n+\t  do_follow_links = TRUE;\n+\t  break;\n \tcase 'x':\n \t  request_dump (dumpdata, HEX_DUMP);\n \t  break;\n@@ -5032,13 +5041,17 @@ process_file_header (Filedata * filedata)\n       return FALSE;\n     }\n \n-  init_dwarf_regnames_by_elf_machine_code (header->e_machine);\n+  if (! filedata->is_separate)\n+    init_dwarf_regnames_by_elf_machine_code (header->e_machine);\n \n   if (do_header)\n     {\n       unsigned i;\n \n-      printf (_(\"ELF Header:\\n\"));\n+      if (filedata->is_separate)\n+\tprintf (_(\"ELF Header in linked file '%s':\\n\"), filedata->file_name);\n+      else\n+\tprintf (_(\"ELF Header:\\n\"));\n       printf (_(\"  Magic:   \"));\n       for (i = 0; i < EI_NIDENT; i++)\n \tprintf (\"%2.2x \", header->e_ident[i]);\n@@ -5294,13 +5307,24 @@ process_program_headers (Filedata * filedata)\n \t  return FALSE;\n \t}\n       else if (do_segments)\n-\tprintf (_(\"\\nThere are no program headers in this file.\\n\"));\n+\t{\n+\t  if (filedata->is_separate)\n+\t    printf (_(\"\\nThere are no program headers in linked file '%s'.\\n\"),\n+\t\t    filedata->file_name);\n+\t  else\n+\t    printf (_(\"\\nThere are no program headers in this file.\\n\"));\n+\t}\n       return TRUE;\n     }\n \n   if (do_segments && !do_header)\n     {\n-      printf (_(\"\\nElf file type is %s\\n\"), get_file_type (filedata->file_header.e_type));\n+      if (filedata->is_separate)\n+\tprintf (\"\\nIn linked file '%s' the ELF file type is %s\\n\",\n+\t\tfiledata->file_name,\n+\t\tget_file_type (filedata->file_header.e_type));\n+      else\n+\tprintf (_(\"\\nElf file type is %s\\n\"), get_file_type (filedata->file_header.e_type));\n       printf (_(\"Entry point 0x%s\\n\"), bfd_vmatoa (\"x\", filedata->file_header.e_entry));\n       printf (ngettext (\"There is %d program header, starting at offset %s\\n\",\n \t\t\t\"There are %d program headers, starting at offset %s\\n\",\n@@ -6362,13 +6386,18 @@ process_section_headers (Filedata * filedata)\n     }\n \n   if (do_sections && !do_header)\n-    printf (ngettext (\"There is %d section header, \"\n-\t\t      \"starting at offset 0x%lx:\\n\",\n-\t\t      \"There are %d section headers, \"\n-\t\t      \"starting at offset 0x%lx:\\n\",\n-\t\t      filedata->file_header.e_shnum),\n-\t    filedata->file_header.e_shnum,\n-\t    (unsigned long) filedata->file_header.e_shoff);\n+    {\n+      if (filedata->is_separate && process_links)\n+\tprintf (_(\"In linked file '%s': \"), filedata->file_name);\n+      if (! filedata->is_separate || process_links)\n+\tprintf (ngettext (\"There is %d section header, \"\n+\t\t\t  \"starting at offset 0x%lx:\\n\",\n+\t\t\t  \"There are %d section headers, \"\n+\t\t\t  \"starting at offset 0x%lx:\\n\",\n+\t\t\t  filedata->file_header.e_shnum),\n+\t\tfiledata->file_header.e_shnum,\n+\t\t(unsigned long) filedata->file_header.e_shoff);\n+    }\n \n   if (is_32bit_elf)\n     {\n@@ -6626,7 +6655,12 @@ process_section_headers (Filedata * filedata)\n   if (! do_sections)\n     return TRUE;\n \n-  if (filedata->file_header.e_shnum > 1)\n+  if (filedata->is_separate && ! process_links)\n+    return TRUE;\n+\n+  if (filedata->is_separate)\n+    printf (_(\"\\nSection Headers in linked file '%s':\\n\"), filedata->file_name);\n+  else if (filedata->file_header.e_shnum > 1)\n     printf (_(\"\\nSection Headers:\\n\"));\n   else\n     printf (_(\"\\nSection Header:\\n\"));\n@@ -7112,8 +7146,13 @@ process_section_groups (Filedata * filedata)\n   if (filedata->file_header.e_shnum == 0)\n     {\n       if (do_section_groups)\n-\tprintf (_(\"\\nThere are no sections to group in this file.\\n\"));\n-\n+\t{\n+\t  if (filedata->is_separate)\n+\t    printf (_(\"\\nThere are no sections group in linked file '%s'.\\n\"),\n+\t\t    filedata->file_name);\n+\t  else\n+\t    printf (_(\"\\nThere are no section groups in this file.\\n\"));\n+\t}\n       return TRUE;\n     }\n \n@@ -7146,7 +7185,13 @@ process_section_groups (Filedata * filedata)\n   if (filedata->group_count == 0)\n     {\n       if (do_section_groups)\n-\tprintf (_(\"\\nThere are no section groups in this file.\\n\"));\n+\t{\n+\t  if (filedata->is_separate)\n+\t    printf (_(\"\\nThere are no section groups in linked file '%s'.\\n\"),\n+\t\t    filedata->file_name);\n+\t  else\n+\t    printf (_(\"\\nThere are no section groups in this file.\\n\"));\n+\t}\n \n       return TRUE;\n     }\n@@ -7167,6 +7212,10 @@ process_section_groups (Filedata * filedata)\n   num_syms = 0;\n   strtab = NULL;\n   strtab_size = 0;\n+\n+  if (filedata->is_separate)\n+    printf (_(\"Section groups in linked file '%s'\\n\"), filedata->file_name);\n+      \n   for (i = 0, section = filedata->section_headers, group = filedata->section_groups;\n        i < filedata->file_header.e_shnum;\n        i++, section++)\n@@ -7609,9 +7658,15 @@ process_relocs (Filedata * filedata)\n \n \t  if (rel_size)\n \t    {\n-\t      printf\n-\t\t(_(\"\\n'%s' relocation section at offset 0x%lx contains %ld bytes:\\n\"),\n-\t\t name, rel_offset, rel_size);\n+\t      if (filedata->is_separate)\n+\t\tprintf\n+\t\t  (_(\"\\nIn linked file '%s' section '%s' at offset 0x%lx contains %ld bytes:\\n\"),\n+\t\t   filedata->file_name, name, rel_offset, rel_size);\n+\t      else\n+\t\tprintf\n+\t\t  (_(\"\\n'%s' relocation section at offset 0x%lx contains %ld bytes:\\n\"),\n+\t\t   name, rel_offset, rel_size);\n+\t\t\n \n \t      dump_relocations (filedata,\n \t\t\t\toffset_from_vma (filedata, rel_offset, rel_size),\n@@ -7629,7 +7684,13 @@ process_relocs (Filedata * filedata)\n \t  has_dynamic_reloc = TRUE;\n \n       if (! has_dynamic_reloc)\n-\tprintf (_(\"\\nThere are no dynamic relocations in this file.\\n\"));\n+\t{\n+\t  if (filedata->is_separate)\n+\t    printf (_(\"\\nThere are no dynamic relocations in linked file '%s'.\\n\"),\n+\t\t    filedata->file_name);\n+\t  else\n+\t    printf (_(\"\\nThere are no dynamic relocations in this file.\\n\"));\n+\t}\n     }\n   else\n     {\n@@ -7653,7 +7714,11 @@ process_relocs (Filedata * filedata)\n \t      int is_rela;\n \t      unsigned long num_rela;\n \n-\t      printf (_(\"\\nRelocation section \"));\n+\t      if (filedata->is_separate)\n+\t\tprintf (_(\"\\nIn linked file '%s' relocation section \"),\n+\t\t\tfiledata->file_name);\n+\t      else\n+\t\tprintf (_(\"\\nRelocation section \"));\n \n \t      if (filedata->string_table == NULL)\n \t\tprintf (\"%d\", section->sh_name);\n@@ -7709,14 +7774,24 @@ process_relocs (Filedata * filedata)\n \t    {\n \t      if (filedata->dynamic_info[dynamic_relocations [i].size])\n \t\t{\n-\t\t  printf (_(\"\\nThere are no static relocations in this file.\"));\n+\t\t  if (filedata->is_separate)\n+\t\t    printf (_(\"\\nThere are no static relocations in linked file '%s'.\"),\n+\t\t\t    filedata->file_name);\n+\t\t  else\n+\t\t    printf (_(\"\\nThere are no static relocations in this file.\"));\n \t\t  printf (_(\"\\nTo see the dynamic relocations add --use-dynamic to the command line.\\n\"));\n \n \t\t  break;\n \t\t}\n \t    }\n \t  if (i == ARRAY_SIZE (dynamic_relocations))\n-\t    printf (_(\"\\nThere are no relocations in this file.\\n\"));\n+\t    {\n+\t      if (filedata->is_separate)\n+\t\tprintf (_(\"\\nThere are no relocations in linked file '%s'.\\n\"),\n+\t\t\tfiledata->file_name);\n+\t      else\n+\t\tprintf (_(\"\\nThere are no relocations in this file.\\n\"));\n+\t    }\n \t}\n     }\n \n@@ -10429,7 +10504,13 @@ process_dynamic_section (Filedata * filedata)\n   if (filedata->dynamic_size == 0)\n     {\n       if (do_dynamic)\n-\tprintf (_(\"\\nThere is no dynamic section in this file.\\n\"));\n+\t{\n+\t  if (filedata->is_separate)\n+\t    printf (_(\"\\nThere is no dynamic section in linked file '%s'.\\n\"),\n+\t\t    filedata->file_name);\n+\t  else\n+\t    printf (_(\"\\nThere is no dynamic section in this file.\\n\"));\n+\t}\n \n       return TRUE;\n     }\n@@ -10654,12 +10735,30 @@ the .dynstr section doesn't match the DT_STRTAB and DT_STRSZ tags\\n\"));\n     }\n \n   if (do_dynamic && filedata->dynamic_addr)\n-    printf (ngettext (\"\\nDynamic section at offset 0x%lx \"\n-\t\t      \"contains %lu entry:\\n\",\n-\t\t      \"\\nDynamic section at offset 0x%lx \"\n-\t\t      \"contains %lu entries:\\n\",\n-\t\t      filedata->dynamic_nent),\n-\t    filedata->dynamic_addr, (unsigned long) filedata->dynamic_nent);\n+    {\n+      if (filedata->dynamic_nent == 1)\n+\t{\n+\t  if (filedata->is_separate)\n+\t    printf (_(\"\\nIn linked file '%s' the dynamic section at offset 0x%lx contains 1 entry:\\n\"),\n+\t\t    filedata->file_name,\n+\t\t    filedata->dynamic_addr);\n+\t  else\n+\t    printf (_(\"\\nDynamic section at offset 0x%lx contains 1 entry:\\n\"),\n+\t\t    filedata->dynamic_addr);\n+\t}\n+      else\n+\t{\n+\t  if (filedata->is_separate)\n+\t    printf (_(\"\\nIn linked file '%s' the dynamic section at offset 0x%lx contains %lu entries:\\n\"),\n+\t\t    filedata->file_name,\n+\t\t    filedata->dynamic_addr,\n+\t\t    (unsigned long) filedata->dynamic_nent);\n+\t  else\n+\t    printf (_(\"\\nDynamic section at offset 0x%lx contains %lu entries:\\n\"),\n+\t\t    filedata->dynamic_addr,\n+\t\t    (unsigned long) filedata->dynamic_nent);\n+\t}\n+    }\n   if (do_dynamic)\n     printf (_(\"  Tag        Type                         Name/Value\\n\"));\n \n@@ -11240,14 +11339,22 @@ process_version_sections (Filedata * filedata)\n \n \t    found = TRUE;\n \n-\t    printf (ngettext (\"\\nVersion definition section '%s' \"\n-\t\t\t      \"contains %u entry:\\n\",\n-\t\t\t      \"\\nVersion definition section '%s' \"\n-\t\t\t      \"contains %u entries:\\n\",\n-\t\t\t      section->sh_info),\n-\t\t    printable_section_name (filedata, section),\n-\t\t    section->sh_info);\n-\n+\t    if (filedata->is_separate)\n+\t      printf (ngettext (\"\\nIn linked file '%s' the version definition section '%s' contains %u entry:\\n\",\n+\t\t\t\t\"\\nIn linked file '%s' the version definition section '%s' contains %u entries:\\n\",\n+\t\t\t\tsection->sh_info),\n+\t\t      filedata->file_name,\n+\t\t      printable_section_name (filedata, section),\n+\t\t      section->sh_info);\n+\t    else\n+\t      printf (ngettext (\"\\nVersion definition section '%s' \"\n+\t\t\t\t\"contains %u entry:\\n\",\n+\t\t\t\t\"\\nVersion definition section '%s' \"\n+\t\t\t\t\"contains %u entries:\\n\",\n+\t\t\t\tsection->sh_info),\n+\t\t      printable_section_name (filedata, section),\n+\t\t      section->sh_info);\n+\t      \n \t    printf (_(\" Addr: 0x\"));\n \t    printf_vma (section->sh_addr);\n \t    printf (_(\"  Offset: %#08lx  Link: %u (%s)\\n\"),\n@@ -11379,13 +11486,22 @@ process_version_sections (Filedata * filedata)\n \n \t    found = TRUE;\n \n-\t    printf (ngettext (\"\\nVersion needs section '%s' \"\n-\t\t\t      \"contains %u entry:\\n\",\n-\t\t\t      \"\\nVersion needs section '%s' \"\n-\t\t\t      \"contains %u entries:\\n\",\n-\t\t\t      section->sh_info),\n-\t\t    printable_section_name (filedata, section), section->sh_info);\n-\n+\t    if (filedata->is_separate)\n+\t      printf (ngettext (\"\\nIn linked file '%s' the version needs section '%s' contains %u entry:\\n\",\n+\t\t\t\t\"\\nIn linked file '%s' the version needs section '%s' contains %u entries:\\n\",\n+\t\t\t\tsection->sh_info),\n+\t\t      filedata->file_name,\n+\t\t      printable_section_name (filedata, section),\n+\t\t      section->sh_info);\n+\t    else\n+\t      printf (ngettext (\"\\nVersion needs section '%s' \"\n+\t\t\t\t\"contains %u entry:\\n\",\n+\t\t\t\t\"\\nVersion needs section '%s' \"\n+\t\t\t\t\"contains %u entries:\\n\",\n+\t\t\t\tsection->sh_info),\n+\t\t      printable_section_name (filedata, section),\n+\t\t      section->sh_info);\n+\t      \n \t    printf (_(\" Addr: 0x\"));\n \t    printf_vma (section->sh_addr);\n \t    printf (_(\"  Offset: %#08lx  Link: %u (%s)\\n\"),\n@@ -11536,12 +11652,21 @@ process_version_sections (Filedata * filedata)\n \t\tbreak;\n \t      }\n \n-\t    printf (ngettext (\"\\nVersion symbols section '%s' \"\n-\t\t\t      \"contains %lu entry:\\n\",\n-\t\t\t      \"\\nVersion symbols section '%s' \"\n-\t\t\t      \"contains %lu entries:\\n\",\n-\t\t\t      total),\n-\t\t    printable_section_name (filedata, section), (unsigned long) total);\n+\t    if (filedata->is_separate)\n+\t      printf (ngettext (\"\\nIn linked file '%s' the version symbols section '%s' contains %lu entry:\\n\",\n+\t\t\t\t\"\\nIn linked file '%s' the version symbols section '%s' contains %lu entries:\\n\",\n+\t\t\t\ttotal),\n+\t\t      filedata->file_name,\n+\t\t      printable_section_name (filedata, section),\n+\t\t      (unsigned long) total);\n+\t    else\n+\t      printf (ngettext (\"\\nVersion symbols section '%s' \"\n+\t\t\t\t\"contains %lu entry:\\n\",\n+\t\t\t\t\"\\nVersion symbols section '%s' \"\n+\t\t\t\t\"contains %lu entries:\\n\",\n+\t\t\t\ttotal),\n+\t\t      printable_section_name (filedata, section),\n+\t\t      (unsigned long) total);\n \n \t    printf (_(\" Addr: 0x\"));\n \t    printf_vma (section->sh_addr);\n@@ -11744,7 +11869,13 @@ process_version_sections (Filedata * filedata)\n     }\n \n   if (! found)\n-    printf (_(\"\\nNo version information found in this file.\\n\"));\n+    {\n+      if (filedata->is_separate)\n+\tprintf (_(\"\\nNo version information found in linked file '%s'.\\n\"),\n+\t\tfiledata->file_name);\n+      else\n+\tprintf (_(\"\\nNo version information found in this file.\\n\"));\n+    }\n \n   return TRUE;\n }\n@@ -12390,8 +12521,14 @@ display_lto_symtab (Filedata *           filedata,\n {\n   if (section->sh_size == 0)\n     {\n-      printf (_(\"\\nLTO Symbol table '%s' is empty!\\n\"),\n-\t      printable_section_name (filedata, section));\n+      if (filedata->is_separate)\n+\tprintf (_(\"\\nThe LTO Symbol table section '%s' in linked file '%s' is empty!\\n\"),\n+\t\tprintable_section_name (filedata, section),\n+\t\tfiledata->file_name);\n+      else\n+\tprintf (_(\"\\nLTO Symbol table '%s' is empty!\\n\"),\n+\t\tprintable_section_name (filedata, section));\n+      \n       return TRUE;\n     }\n \n@@ -12440,25 +12577,29 @@ display_lto_symtab (Filedata *           filedata,\n   const unsigned char * data = (const unsigned char *) alloced_data;\n   const unsigned char * end = data + section->sh_size;\n \n+  if (filedata->is_separate)\n+    printf (_(\"\\nIn linked file '%s': \"), filedata->file_name);\n+  else\n+    printf (\"\\n\");\n+\n   if (ext_data_orig != NULL)\n     {\n       if (do_wide)\n-\tprintf (_(\"\\nLTO Symbol table '%s' and extension table '%s' contain:\\n\"),\n+\tprintf (_(\"LTO Symbol table '%s' and extension table '%s' contain:\\n\"),\n \t\tprintable_section_name (filedata, section),\n \t\tprintable_section_name (filedata, ext));\n       else\n \t{\n-\t  printf (_(\"\\nLTO Symbol table '%s'\\n\"),\n+\t  printf (_(\"LTO Symbol table '%s'\\n\"),\n \t\t  printable_section_name (filedata, section));\n \t  printf (_(\" and extension table '%s' contain:\\n\"),\n \t\t  printable_section_name (filedata, ext));\n \t}\n     }\n   else\n-    printf (_(\"\\nLTO Symbol table '%s' contains:\\n\"),\n+    printf (_(\"LTO Symbol table '%s' contains:\\n\"),\n \t    printable_section_name (filedata, section));\n \n-\n   /* FIXME: Add a wide version.  */\n   if (ext_data_orig != NULL)\n     printf (_(\"  Comdat_Key       Kind  Visibility     Size      Slot      Type  Section Name\\n\"));\n@@ -12590,10 +12731,21 @@ process_symbol_table (Filedata * filedata)\n     {\n       unsigned long si;\n \n-      printf (ngettext (\"\\nSymbol table for image contains %lu entry:\\n\",\n-\t\t\t\"\\nSymbol table for image contains %lu entries:\\n\",\n-\t\t\tfiledata->num_dynamic_syms),\n-\t      filedata->num_dynamic_syms);\n+      if (filedata->is_separate)\n+\t{\n+\t  printf (ngettext (\"\\nIn linked file '%s' the dynamic symbol table contains %lu entry:\\n\",\n+\t\t\t    \"\\nIn linked file '%s' the dynamic symbol table contains %lu entries:\\n\",\n+\t\t\t    filedata->num_dynamic_syms),\n+\t\t  filedata->file_name,\n+\t\t  filedata->num_dynamic_syms);\n+\t}\n+      else\n+\t{\n+\t  printf (ngettext (\"\\nSymbol table for image contains %lu entry:\\n\",\n+\t\t\t    \"\\nSymbol table for image contains %lu entries:\\n\",\n+\t\t\t    filedata->num_dynamic_syms),\n+\t\t  filedata->num_dynamic_syms);\n+\t}\n       if (is_32bit_elf)\n \tprintf (_(\"   Num:    Value  Size Type    Bind   Vis      Ndx Name\\n\"));\n       else\n@@ -12632,11 +12784,20 @@ process_symbol_table (Filedata * filedata)\n \t    }\n \n \t  num_syms = section->sh_size / section->sh_entsize;\n-\t  printf (ngettext (\"\\nSymbol table '%s' contains %lu entry:\\n\",\n-\t\t\t    \"\\nSymbol table '%s' contains %lu entries:\\n\",\n-\t\t\t    num_syms),\n-\t\t  printable_section_name (filedata, section),\n-\t\t  num_syms);\n+\n+\t  if (filedata->is_separate)\n+\t    printf (ngettext (\"\\nIn linked file '%s' symbol section '%s' contains %lu entry:\\n\",\n+\t\t\t      \"\\nIn linked file '%s' symbol section '%s' contains %lu entries:\\n\",\n+\t\t\t      num_syms),\n+\t\t    filedata->file_name,\n+\t\t    printable_section_name (filedata, section),\n+\t\t    num_syms);\n+\t  else\n+\t    printf (ngettext (\"\\nSymbol table '%s' contains %lu entry:\\n\",\n+\t\t\t      \"\\nSymbol table '%s' contains %lu entries:\\n\",\n+\t\t\t      num_syms),\n+\t\t    printable_section_name (filedata, section),\n+\t\t    num_syms);\n \n \t  if (is_32bit_elf)\n \t    printf (_(\"   Num:    Value  Size Type    Bind   Vis      Ndx Name\\n\"));\n@@ -12858,7 +13019,7 @@ process_symbol_table (Filedata * filedata)\n }\n \n static bfd_boolean\n-process_syminfo (Filedata * filedata ATTRIBUTE_UNUSED)\n+process_syminfo (Filedata * filedata)\n {\n   unsigned int i;\n \n@@ -12871,13 +13032,21 @@ process_syminfo (Filedata * filedata ATTRIBUTE_UNUSED)\n   if (filedata->dynamic_symbols == NULL || filedata->dynamic_strings == NULL)\n     return FALSE;\n \n-  if (filedata->dynamic_addr)\n+  if (filedata->is_separate)\n+    printf (ngettext (\"\\nIn linked file '%s: the dynamic info segment at offset 0x%lx contains %d entry:\\n\",\n+\t\t      \"\\nIn linked file '%s: the dynamic info segment at offset 0x%lx contains %d entries:\\n\",\n+\t\t      filedata->dynamic_syminfo_nent),\n+\t    filedata->file_name,\n+\t    filedata->dynamic_syminfo_offset,\n+\t    filedata->dynamic_syminfo_nent);\n+  else\n     printf (ngettext (\"\\nDynamic info segment at offset 0x%lx \"\n \t\t      \"contains %d entry:\\n\",\n \t\t      \"\\nDynamic info segment at offset 0x%lx \"\n \t\t      \"contains %d entries:\\n\",\n \t\t      filedata->dynamic_syminfo_nent),\n-\t    filedata->dynamic_syminfo_offset, filedata->dynamic_syminfo_nent);\n+\t    filedata->dynamic_syminfo_offset,\n+\t    filedata->dynamic_syminfo_nent);\n \n   printf (_(\" Num: Name                           BoundTo     Flags\\n\"));\n   for (i = 0; i < filedata->dynamic_syminfo_nent; ++i)\n@@ -15003,7 +15172,7 @@ load_specific_debug_section (enum dwarf_section_display_enum  debug,\n unsigned char *\n get_build_id (void * data)\n {\n-  Filedata * filedata = (Filedata *)data;\n+  Filedata * filedata = (Filedata *) data;\n   Elf_Internal_Shdr * shdr;\n   unsigned long i;\n \n@@ -15311,8 +15480,14 @@ initialise_dumps_byname (Filedata * filedata)\n \t  }\n \n       if (!any)\n-\twarn (_(\"Section '%s' was not dumped because it does not exist!\\n\"),\n-\t      cur->name);\n+\t{\n+\t  if (filedata->is_separate)\n+\t    warn (_(\"Section '%s' in linked file '%s' was not dumped because it does not exist\\n\"),\n+\t\t  cur->name, filedata->file_name);\n+\t  else\n+\t    warn (_(\"Section '%s' was not dumped because it does not exist\\n\"),\n+\t\t  cur->name);\n+\t}\n     }\n }\n \n@@ -15380,7 +15555,11 @@ process_section_contents (Filedata * filedata)\n     {\n       if (filedata->dump.dump_sects[i])\n \t{\n-\t  warn (_(\"Section %d was not dumped because it does not exist!\\n\"), i);\n+\t  if (filedata->is_separate)\n+\t    warn (_(\"Section %d in linked file '%s' was not dumped because it does not exist!\\n\"),\n+\t\t  i, filedata->file_name);\n+\t  else\n+\t    warn (_(\"Section %d was not dumped because it does not exist!\\n\"), i);\n \t  res = FALSE;\n \t}\n       i++;\n@@ -20357,10 +20536,14 @@ process_notes_at (Filedata *           filedata,\n \n   external = pnotes;\n \n+  if (filedata->is_separate)\n+    printf (_(\"In linked file '%s': \"), filedata->file_name);\n+  else\n+    printf (\"\\n\");\n   if (section)\n-    printf (_(\"\\nDisplaying notes found in: %s\\n\"), printable_section_name (filedata, section));\n+    printf (_(\"Displaying notes found in: %s\\n\"), printable_section_name (filedata, section));\n   else\n-    printf (_(\"\\nDisplaying notes found at file offset 0x%08lx with length 0x%08lx:\\n\"),\n+    printf (_(\"Displaying notes found at file offset 0x%08lx with length 0x%08lx:\\n\"),\n \t    (unsigned long) offset, (unsigned long) length);\n \n   /* NB: Some note sections may have alignment value of 0 or 1.  gABI\n@@ -20658,7 +20841,12 @@ process_notes (Filedata * filedata)\n   if (filedata->file_header.e_phnum > 0)\n     return process_corefile_note_segments (filedata);\n \n-  printf (_(\"No note segments present in the core file.\\n\"));\n+  if (filedata->is_separate)\n+    printf (_(\"No notes found in linked file '%s'.\\n\"),\n+\t    filedata->file_name);\n+  else\n+    printf (_(\"No notes found file.\\n\"));\n+\n   return TRUE;\n }\n \n@@ -20868,7 +21056,7 @@ close_debug_file (void * data)\n }\n \n static Filedata *\n-open_file (const char * pathname)\n+open_file (const char * pathname, bfd_boolean is_separate)\n {\n   struct stat  statbuf;\n   Filedata *   filedata = NULL;\n@@ -20887,6 +21075,7 @@ open_file (const char * pathname)\n \n   filedata->file_size = (bfd_size_type) statbuf.st_size;\n   filedata->file_name = pathname;\n+  filedata->is_separate = is_separate;\n \n   if (! get_file_header (filedata))\n     goto fail;\n@@ -20920,7 +21109,7 @@ open_file (const char * pathname)\n void *\n open_debug_file (const char * pathname)\n {\n-  return open_file (pathname);\n+  return open_file (pathname, TRUE);\n }\n \n /* Process one ELF object file according to the command line options.\n@@ -21025,10 +21214,35 @@ process_object (Filedata * filedata)\n \n       for (d = first_separate_info; d != NULL; d = d->next)\n \t{\n-\t  if (! process_section_headers (d->handle))\n+\t  if (process_links && ! process_file_header (d->handle))\n \t    res = FALSE;\n-\t  else if (! process_section_contents (d->handle))\n+\t  else if (! process_section_headers (d->handle))\n \t    res = FALSE;\n+\t  else if (process_links)\n+\t    {\n+\t      if (! process_section_contents (d->handle))\n+\t\tres = FALSE;\n+\t      if (! process_section_groups (d->handle))\n+\t\tres = FALSE;\n+\t      if (! process_program_headers (d->handle))\n+\t\tres = FALSE;\n+\t      if (! process_dynamic_section (d->handle))\n+\t\tres = FALSE;\n+\t      if (! process_relocs (d->handle))\n+\t\tres = FALSE;\n+\t      if (! process_unwind (d->handle))\n+\t\tres = FALSE;\n+\t      if (! process_symbol_table (d->handle))\n+\t\tres = FALSE;\n+\t      if (! process_lto_symbol_tables (d->handle))\n+\t\tres = FALSE;\n+\t      if (! process_syminfo (d->handle))\n+\t\tres = FALSE;\n+\t      if (! process_version_sections (d->handle))\n+\t\tres = FALSE;\n+\t      if (! process_notes (d->handle))\n+\t\tres = FALSE;\n+\t    }\n \t}\n \n       /* The file handles are closed by the call to free_debug_memory() below.  */\n@@ -21311,7 +21525,7 @@ process_archive (Filedata * filedata, bfd_boolean is_thin_archive)\n \t      break;\n \t    }\n \n-\t  member_filedata = open_file (member_file_name);\n+\t  member_filedata = open_file (member_file_name, FALSE);\n \t  if (member_filedata == NULL)\n \t    {\n \t      error (_(\"Input file '%s' is not readable.\\n\"), member_file_name);\n@@ -21444,6 +21658,7 @@ process_file (char * file_name)\n     }\n \n   filedata->file_size = (bfd_size_type) statbuf.st_size;\n+  filedata->is_separate = FALSE;\n \n   if (memcmp (armag, ARMAG, SARMAG) == 0)\n     {"
    },
    {
      "sha": "1756f6235c0d2d908aee4cd712dc8ca157a47040",
      "filename": "binutils/testsuite/binutils-all/compress.exp",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/testsuite/binutils-all/compress.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/testsuite/binutils-all/compress.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/compress.exp?ref=ca0e11aa4ba877e180f7d40dcc5a89540740c501",
      "patch": "@@ -693,7 +693,7 @@ proc test_gnu_debuglink {} {\n \tunsupported \"$test (build)\"\n \treturn\n     }\n-    set got [remote_exec host \"$OBJDUMP -S tmpdir/testprog\" \"\" \"/dev/null\" \"tmpdir/testprog.dump\"]\n+    set got [remote_exec host \"$OBJDUMP -d tmpdir/testprog\" \"\" \"/dev/null\" \"tmpdir/testprog.dump\"]\n     if { [lindex $got 0] != 0 || ![string match \"\" [lindex $got 1]] } then {\n \tfail \"$test (objcopy dump)\"\n \treturn\n@@ -714,7 +714,7 @@ proc test_gnu_debuglink {} {\n \tfail \"$test (objcopy link decompress)\"\n \treturn\n     }\n-    set got [remote_exec host \"$OBJDUMP -S -WN tmpdir/testprog\" \"\" \"/dev/null\" \"tmpdir/testprog.decompress.dump\"]\n+    set got [remote_exec host \"$OBJDUMP -d -WK tmpdir/testprog\" \"\" \"/dev/null\" \"tmpdir/testprog.decompress.dump\"]\n     if { [lindex $got 0] != 0 || ![string match \"\" [lindex $got 1]] } then {\n \tfail \"$test (objcopy dump decompress)\"\n \treturn\n@@ -723,17 +723,17 @@ proc test_gnu_debuglink {} {\n \tfail \"$test (objcopy link compress)\"\n \treturn\n     }\n-    set got [remote_exec host \"$OBJDUMP -S -WN tmpdir/testprog\" \"\" \"/dev/null\" \"tmpdir/testprog.compress.dump\"]\n+    set got [remote_exec host \"$OBJDUMP -d -WK tmpdir/testprog\" \"\" \"/dev/null\" \"tmpdir/testprog.compress.dump\"]\n     if { [lindex $got 0] != 0 || ![string match \"\" [lindex $got 1]] } then {\n \tfail \"$test (objcopy dump compress)\"\n \treturn\n     }\n \n     set src1 tmpdir/testprog.dump\n     set src2 tmpdir/testprog.compress.dump\n-    send_log \"cmp ${src1} ${src2}\\n\"\n-    verbose \"cmp ${src1} ${src2}\"\n-    set status [remote_exec build cmp \"${src1} ${src2}\"]\n+    send_log \"diff ${src1} ${src2}\\n\"\n+    verbose \"diff ${src1} ${src2}\"\n+    set status [remote_exec build diff \"${src1} ${src2}\"]\n     set exec_output [lindex $status 1]\n     set exec_output [prune_warnings $exec_output]\n     if ![string match \"\" $exec_output] then {\n@@ -746,9 +746,9 @@ proc test_gnu_debuglink {} {\n \n     set src1 tmpdir/testprog.decompress.dump\n     set src2 tmpdir/testprog.compress.dump\n-    send_log \"cmp ${src1} ${src2}\\n\"\n-    verbose \"cmp ${src1} ${src2}\"\n-    set status [remote_exec build cmp \"${src1} ${src2}\"]\n+    send_log \"diff ${src1} ${src2}\\n\"\n+    verbose \"diff ${src1} ${src2}\"\n+    set status [remote_exec build diff \"${src1} ${src2}\"]\n     set exec_output [lindex $status 1]\n     set exec_output [prune_warnings $exec_output]\n     if ![string match \"\" $exec_output] then {"
    },
    {
      "sha": "be7817f2409dc5a562dd44560a165919d6d78e00",
      "filename": "binutils/testsuite/binutils-all/objdump.WK2",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/testsuite/binutils-all/objdump.WK2",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/testsuite/binutils-all/objdump.WK2",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/objdump.WK2?ref=ca0e11aa4ba877e180f7d40dcc5a89540740c501",
      "patch": "@@ -1,5 +1,5 @@\n #...\n-.*debuglink.o: Found separate debug info file:.*linkdebug.debug\n+.*linkdebug.debug:.*\n #...\n Contents of the .debug_str section \\(loaded from .*linkdebug.debug\\):\n "
    },
    {
      "sha": "26ce3f8c8b6eb4bec1163d6390c6761b597a02c8",
      "filename": "binutils/testsuite/binutils-all/objdump.WK3",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/testsuite/binutils-all/objdump.WK3",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/testsuite/binutils-all/objdump.WK3",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/objdump.WK3?ref=ca0e11aa4ba877e180f7d40dcc5a89540740c501",
      "patch": "@@ -1,6 +1,4 @@\n #...\n-.*debuglink.o: Found separate debug info file:.*linkdebug.debug\n-#...\n .*linkdebug.debug:.*\n #...\n  .* .debug_abbrev .*"
    },
    {
      "sha": "c9a7eec75ec2edd16ee6054594f55dc1d86d7406",
      "filename": "binutils/testsuite/binutils-all/objdump.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/testsuite/binutils-all/objdump.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/testsuite/binutils-all/objdump.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/objdump.exp?ref=ca0e11aa4ba877e180f7d40dcc5a89540740c501",
      "patch": "@@ -671,8 +671,8 @@ proc test_follow_debuglink { options dumpfile } {\n }\n \n if {[is_elf_format]} then {\n-    test_follow_debuglink \"--dwarf=follow-links --dwarf=info --dwarf=str\" objdump.WK2\n-    test_follow_debuglink \"--dwarf=follow-links --headers --wide\" objdump.WK3\n+    test_follow_debuglink \"--process-links --dwarf=info --dwarf=str\" objdump.WK2\n+    test_follow_debuglink \"--process-links --headers --wide\" objdump.WK3\n }\n \n # Test objdump output with start and stop address limits for the specified"
    },
    {
      "sha": "4884a5df40f1bdd1a950bfdd9c7bd97a057ead17",
      "filename": "binutils/testsuite/binutils-all/readelf.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/testsuite/binutils-all/readelf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/testsuite/binutils-all/readelf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/readelf.exp?ref=ca0e11aa4ba877e180f7d40dcc5a89540740c501",
      "patch": "@@ -118,8 +118,9 @@ proc readelf_test { options binary_file regexp_file } {\n     }\n \n     if { [regexp_diff readelf.out $srcdir/$subdir/$regexp_file] } then {\n+\tsend_log [file_contents readelf.out]\n+\tsend_log \"\\n\"\n \tfail $testname\n-\tverbose \"output is \\n[file_contents readelf.out]\" 2\n \treturn\n     }\n \n@@ -526,7 +527,7 @@ if {![binutils_assemble $srcdir/$subdir/debuglink.s tmpdir/debuglink.o]} then {\n \t    set tempfile2 [remote_download host tmpdir/linkdebug.debug]\n \t}\n \n-\treadelf_test {-wKis} $tempfile readelf.wKis\n+\treadelf_test \"-wKis -P\" $tempfile readelf.wKis\n     }\n }\n "
    },
    {
      "sha": "a8ab25221bca7ba9e35d1b688569dac8f6feca43",
      "filename": "binutils/testsuite/binutils-all/readelf.wKis",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/testsuite/binutils-all/readelf.wKis",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca0e11aa4ba877e180f7d40dcc5a89540740c501/binutils/testsuite/binutils-all/readelf.wKis",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/readelf.wKis?ref=ca0e11aa4ba877e180f7d40dcc5a89540740c501",
      "patch": "@@ -1,6 +1,4 @@\n #...\n-.*debuglink.o: Found separate debug info file:.*linkdebug.debug\n-#...\n Contents of the .debug_str section \\(loaded from .*debuglink.o\\):\n \n   0x00000000 73747269 6e672d31 00737472 696e672d string-1.string-"
    }
  ]
}