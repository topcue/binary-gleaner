{
  "sha": "0becda7a5a1845c7e91ccba1b27da3607de3f534",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGJlY2RhN2E1YTE4NDVjN2U5MWNjYmExYjI3ZGEzNjA3ZGUzZjUzNA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:08:06Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:08:06Z"
    },
    "message": "gdb: remove TYPE_GNU_IFUNC\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (TYPE_GNU_IFUNC): Remove, replace all\n\tuses with type::is_gnu_ifunc.\n\nChange-Id: I72aae22599b5e582910c5d50588feaf159032bd8",
    "tree": {
      "sha": "8b1e4adc8efbc2519504ae34b664406bab7d1c25",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8b1e4adc8efbc2519504ae34b664406bab7d1c25"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0becda7a5a1845c7e91ccba1b27da3607de3f534",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0becda7a5a1845c7e91ccba1b27da3607de3f534",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0becda7a5a1845c7e91ccba1b27da3607de3f534",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0becda7a5a1845c7e91ccba1b27da3607de3f534/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "03cc72491b8139cffaf2c6ce9db84ebc17205323",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03cc72491b8139cffaf2c6ce9db84ebc17205323",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/03cc72491b8139cffaf2c6ce9db84ebc17205323"
    }
  ],
  "stats": {
    "total": 31,
    "additions": 17,
    "deletions": 14
  },
  "files": [
    {
      "sha": "eba28b86ce47b10b57cecc9fcaa5b09a2f6ad59c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0becda7a5a1845c7e91ccba1b27da3607de3f534/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0becda7a5a1845c7e91ccba1b27da3607de3f534/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0becda7a5a1845c7e91ccba1b27da3607de3f534",
      "patch": "@@ -1,3 +1,8 @@\n+2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (TYPE_GNU_IFUNC): Remove, replace all\n+\tuses with type::is_gnu_ifunc.\n+\n 2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (struct type) <is_gnu_ifunc, set_is_gnu_ifunc>: New methods."
    },
    {
      "sha": "6d455fe6b9a5d25d2940c0792a2bea2927ed2352",
      "filename": "gdb/compile/compile-c-symbols.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0becda7a5a1845c7e91ccba1b27da3607de3f534/gdb/compile/compile-c-symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0becda7a5a1845c7e91ccba1b27da3607de3f534/gdb/compile/compile-c-symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-symbols.c?ref=0becda7a5a1845c7e91ccba1b27da3607de3f534",
      "patch": "@@ -94,7 +94,7 @@ convert_one_symbol (compile_c_instance *context,\n \tcase LOC_BLOCK:\n \t  kind = GCC_C_SYMBOL_FUNCTION;\n \t  addr = BLOCK_ENTRY_PC (SYMBOL_BLOCK_VALUE (sym.symbol));\n-\t  if (is_global && TYPE_GNU_IFUNC (SYMBOL_TYPE (sym.symbol)))\n+\t  if (is_global && SYMBOL_TYPE (sym.symbol)->is_gnu_ifunc ())\n \t    addr = gnu_ifunc_resolve_addr (target_gdbarch (), addr);\n \t  break;\n \n@@ -405,7 +405,7 @@ gcc_symbol_address (void *datum, struct gcc_c_context *gcc_context,\n \t\t\t\t\"gcc_symbol_address \\\"%s\\\": full symbol\\n\",\n \t\t\t\tidentifier);\n \t  result = BLOCK_ENTRY_PC (SYMBOL_BLOCK_VALUE (sym));\n-\t  if (TYPE_GNU_IFUNC (SYMBOL_TYPE (sym)))\n+\t  if (SYMBOL_TYPE (sym)->is_gnu_ifunc ())\n \t    result = gnu_ifunc_resolve_addr (target_gdbarch (), result);\n \t  found = 1;\n \t}"
    },
    {
      "sha": "1998584791db8e2075ed17940a8dbcd2824dffb4",
      "filename": "gdb/compile/compile-cplus-symbols.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0becda7a5a1845c7e91ccba1b27da3607de3f534/gdb/compile/compile-cplus-symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0becda7a5a1845c7e91ccba1b27da3607de3f534/gdb/compile/compile-cplus-symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-symbols.c?ref=0becda7a5a1845c7e91ccba1b27da3607de3f534",
      "patch": "@@ -88,7 +88,7 @@ convert_one_symbol (compile_cplus_instance *instance,\n \t  {\n \t    kind = GCC_CP_SYMBOL_FUNCTION;\n \t    addr = BLOCK_START (SYMBOL_BLOCK_VALUE (sym.symbol));\n-\t    if (is_global && TYPE_GNU_IFUNC (SYMBOL_TYPE (sym.symbol)))\n+\t    if (is_global && SYMBOL_TYPE (sym.symbol)->is_gnu_ifunc ())\n \t      addr = gnu_ifunc_resolve_addr (target_gdbarch (), addr);\n \t  }\n \t  break;\n@@ -442,7 +442,7 @@ gcc_cplus_symbol_address (void *datum, struct gcc_cp_context *gcc_context,\n \t\t\t\t\"gcc_symbol_address \\\"%s\\\": full symbol\\n\",\n \t\t\t\tidentifier);\n \t  result = BLOCK_START (SYMBOL_BLOCK_VALUE (sym));\n-\t  if (TYPE_GNU_IFUNC (SYMBOL_TYPE (sym)))\n+\t  if (SYMBOL_TYPE (sym)->is_gnu_ifunc ())\n \t    result = gnu_ifunc_resolve_addr (target_gdbarch (), result);\n \t  found = 1;\n \t}"
    },
    {
      "sha": "e5e88f3c9bfe60009e15f1d857c2dd7a189cf410",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0becda7a5a1845c7e91ccba1b27da3607de3f534/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0becda7a5a1845c7e91ccba1b27da3607de3f534/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=0becda7a5a1845c7e91ccba1b27da3607de3f534",
      "patch": "@@ -735,7 +735,7 @@ evaluate_var_msym_value (enum noside noside,\n   CORE_ADDR address;\n   type *the_type = find_minsym_type_and_address (msymbol, objfile, &address);\n \n-  if (noside == EVAL_AVOID_SIDE_EFFECTS && !TYPE_GNU_IFUNC (the_type))\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS && !the_type->is_gnu_ifunc ())\n     return value_zero (the_type, not_lval);\n   else\n     return value_at_lazy (the_type, address);\n@@ -793,7 +793,7 @@ eval_call (expression *exp, enum noside noside,\n       else if (ftype->code () == TYPE_CODE_FUNC\n \t       || ftype->code () == TYPE_CODE_METHOD)\n \t{\n-\t  if (TYPE_GNU_IFUNC (ftype))\n+\t  if (ftype->is_gnu_ifunc ())\n \t    {\n \t      CORE_ADDR address = value_address (argvec[0]);\n \t      type *resolved_type = find_gnu_ifunc_target_type (address);"
    },
    {
      "sha": "f72f711bdabd1294066ae2c97aa2a2002dfaf3b8",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0becda7a5a1845c7e91ccba1b27da3607de3f534/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0becda7a5a1845c7e91ccba1b27da3607de3f534/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=0becda7a5a1845c7e91ccba1b27da3607de3f534",
      "patch": "@@ -233,13 +233,6 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n \n #define TYPE_NOTTEXT(t)\t(TYPE_INSTANCE_FLAGS (t) & TYPE_INSTANCE_FLAG_NOTTEXT)\n \n-/* * Used only for TYPE_CODE_FUNC where it specifies the real function\n-   address is returned by this function call.  TYPE_TARGET_TYPE\n-   determines the final returned function type to be presented to\n-   user.  */\n-\n-#define TYPE_GNU_IFUNC(t)\t((t)->is_gnu_ifunc ())\n-\n /* * Type owner.  If TYPE_OBJFILE_OWNED is true, the type is owned by\n    the objfile retrieved as TYPE_OBJFILE.  Otherwise, the type is\n    owned by an architecture; TYPE_OBJFILE is NULL in this case.  */\n@@ -1133,6 +1126,11 @@ struct type\n     this->main_type->m_flag_stub_supported = stub_is_supported;\n   }\n \n+  /* Used only for TYPE_CODE_FUNC where it specifies the real function\n+     address is returned by this function call.  TYPE_TARGET_TYPE\n+     determines the final returned function type to be presented to\n+     user.  */\n+\n   bool is_gnu_ifunc () const\n   {\n     return this->main_type->m_flag_gnu_ifunc;"
    },
    {
      "sha": "f87b7456ec050032704f881447cc32d4fd327a0e",
      "filename": "gdb/infcall.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0becda7a5a1845c7e91ccba1b27da3607de3f534/gdb/infcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0becda7a5a1845c7e91ccba1b27da3607de3f534/gdb/infcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcall.c?ref=0becda7a5a1845c7e91ccba1b27da3607de3f534",
      "patch": "@@ -275,7 +275,7 @@ find_function_addr (struct value *function,\n   if (ftype->code () == TYPE_CODE_FUNC\n       || ftype->code () == TYPE_CODE_METHOD)\n     {\n-      if (TYPE_GNU_IFUNC (ftype))\n+      if (ftype->is_gnu_ifunc ())\n \t{\n \t  CORE_ADDR resolver_addr = funaddr;\n "
    }
  ]
}