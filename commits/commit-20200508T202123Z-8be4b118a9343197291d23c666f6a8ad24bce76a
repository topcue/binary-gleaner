{
  "sha": "8be4b118a9343197291d23c666f6a8ad24bce76a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGJlNGIxMThhOTM0MzE5NzI5MWQyM2M2NjZmNmE4YWQyNGJjZTc2YQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-05-08T20:21:22Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-05-08T20:21:23Z"
    },
    "message": "More C++-ification for struct display\n\nThis changes displays to have a constructor, use bool and std::string,\nand to be stored using std::vector.  The ALL_DISPLAYS and\nALL_DISPLAYS_SAFE macros are removed.  While internal iteration is\nstill done via map_display_numbers, this is updated to use a\nfunction_view.  These changes simplify the code somewhat; for example,\nfree_display can now be removed in favor of ordinary destruction.\n\ngdb/ChangeLog\n2020-05-08  Tom Tromey  <tom@tromey.com>\n\n\t* printcmd.c (struct display) <next>: Remove.\n\t<display>: New constructor.\n\t<exp_string>: Now a std::string.\n\t<enabled_p>: Now a bool.\n\t(display_number): Move definition earlier.\n\t(displays): Rename from display_chain.  Now a std::vector.\n\t(ALL_DISPLAYS, ALL_DISPLAYS_SAFE): Remove.\n\t(display_command): Update.\n\t(do_one_display, disable_display)\n\t(enable_disable_display_command, do_enable_disable_display):\n\tUpdate.\n\t(free_display): Remove.\n\t(clear_displays): Rewrite.\n\t(delete_display): Update.\n\t(map_display_numbers): Use function_view.  Remove \"data\"\n\tparameter.  Update.\n\t(do_delete_display): Remove.\n\t(undisplay_command): Update.\n\t(do_one_display, do_displays, disable_display)\n\t(info_display_command): Update.\n\t(do_enable_disable_display): Remove.\n\t(enable_disable_display_command)\n\t(clear_dangling_display_expressions): Update.",
    "tree": {
      "sha": "6d87edce7de2093dd7c0bca8902efaaf74e134c9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6d87edce7de2093dd7c0bca8902efaaf74e134c9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8be4b118a9343197291d23c666f6a8ad24bce76a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8be4b118a9343197291d23c666f6a8ad24bce76a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8be4b118a9343197291d23c666f6a8ad24bce76a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8be4b118a9343197291d23c666f6a8ad24bce76a/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "94c93c35b50d0783fdfda277508d0ae6c3e372fb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/94c93c35b50d0783fdfda277508d0ae6c3e372fb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/94c93c35b50d0783fdfda277508d0ae6c3e372fb"
    }
  ],
  "stats": {
    "total": 219,
    "additions": 93,
    "deletions": 126
  },
  "files": [
    {
      "sha": "59125fd6ded6a9d7e7227b72ee5850125379750a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8be4b118a9343197291d23c666f6a8ad24bce76a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8be4b118a9343197291d23c666f6a8ad24bce76a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8be4b118a9343197291d23c666f6a8ad24bce76a",
      "patch": "@@ -1,3 +1,29 @@\n+2020-05-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* printcmd.c (struct display) <next>: Remove.\n+\t<display>: New constructor.\n+\t<exp_string>: Now a std::string.\n+\t<enabled_p>: Now a bool.\n+\t(display_number): Move definition earlier.\n+\t(displays): Rename from display_chain.  Now a std::vector.\n+\t(ALL_DISPLAYS, ALL_DISPLAYS_SAFE): Remove.\n+\t(display_command): Update.\n+\t(do_one_display, disable_display)\n+\t(enable_disable_display_command, do_enable_disable_display):\n+\tUpdate.\n+\t(free_display): Remove.\n+\t(clear_displays): Rewrite.\n+\t(delete_display): Update.\n+\t(map_display_numbers): Use function_view.  Remove \"data\"\n+\tparameter.  Update.\n+\t(do_delete_display): Remove.\n+\t(undisplay_command): Update.\n+\t(do_one_display, do_displays, disable_display)\n+\t(info_display_command): Update.\n+\t(do_enable_disable_display): Remove.\n+\t(enable_disable_display_command)\n+\t(clear_dangling_display_expressions): Update.\n+\n 2020-05-08  Tom Tromey  <tom@tromey.com>\n \n \t* symtab.c (set_symbol_cache_size)"
    },
    {
      "sha": "00320d20898561b0f5b1ed8f25f7c9ba27c8e9dd",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 67,
      "deletions": 126,
      "changes": 193,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8be4b118a9343197291d23c666f6a8ad24bce76a/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8be4b118a9343197291d23c666f6a8ad24bce76a/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=8be4b118a9343197291d23c666f6a8ad24bce76a",
      "patch": "@@ -116,13 +116,27 @@ show_print_symbol_filename (struct ui_file *file, int from_tty,\n \n static int current_display_number;\n \n+/* Last allocated display number.  */\n+\n+static int display_number;\n+\n struct display\n   {\n-    /* Chain link to next auto-display item.  */\n-    struct display *next;\n+    display (const char *exp_string_, expression_up &&exp_,\n+\t     const struct format_data &format_, struct program_space *pspace_,\n+\t     const struct block *block_)\n+      : exp_string (exp_string_),\n+\texp (std::move (exp_)),\n+\tnumber (++display_number),\n+\tformat (format_),\n+\tpspace (pspace_),\n+\tblock (block_),\n+\tenabled_p (true)\n+    {\n+    }\n \n     /* The expression as the user typed it.  */\n-    char *exp_string;\n+    std::string exp_string;\n \n     /* Expression to be evaluated and displayed.  */\n     expression_up exp;\n@@ -140,27 +154,13 @@ struct display\n     const struct block *block;\n \n     /* Status of this display (enabled or disabled).  */\n-    int enabled_p;\n+    bool enabled_p;\n   };\n \n-/* Chain of expressions whose values should be displayed\n-   automatically each time the program stops.  */\n-\n-static struct display *display_chain;\n+/* Expressions whose values should be displayed automatically each\n+   time the program stops.  */\n \n-static int display_number;\n-\n-/* Walk the following statement or block through all displays.\n-   ALL_DISPLAYS_SAFE does so even if the statement deletes the current\n-   display.  */\n-\n-#define ALL_DISPLAYS(B)\t\t\t\t\\\n-  for (B = display_chain; B; B = B->next)\n-\n-#define ALL_DISPLAYS_SAFE(B,TMP)\t\t\\\n-  for (B = display_chain;\t\t\t\\\n-       B ? (TMP = B->next, 1): 0;\t\t\\\n-       B = TMP)\n+static std::vector<std::unique_ptr<struct display>> all_displays;\n \n /* Prototypes for local functions.  */\n \n@@ -1763,86 +1763,48 @@ display_command (const char *arg, int from_tty)\n   innermost_block_tracker tracker;\n   expression_up expr = parse_expression (exp, &tracker);\n \n-  newobj = new display ();\n-\n-  newobj->exp_string = xstrdup (exp);\n-  newobj->exp = std::move (expr);\n-  newobj->block = tracker.block ();\n-  newobj->pspace = current_program_space;\n-  newobj->number = ++display_number;\n-  newobj->format = fmt;\n-  newobj->enabled_p = 1;\n-  newobj->next = NULL;\n-\n-  if (display_chain == NULL)\n-    display_chain = newobj;\n-  else\n-    {\n-      struct display *last;\n-\n-      for (last = display_chain; last->next != NULL; last = last->next)\n-\t;\n-      last->next = newobj;\n-    }\n+  newobj = new display (exp, std::move (expr), fmt,\n+\t\t\tcurrent_program_space, tracker.block ());\n+  all_displays.emplace_back (newobj);\n \n   if (from_tty)\n     do_one_display (newobj);\n \n   dont_repeat ();\n }\n \n-static void\n-free_display (struct display *d)\n-{\n-  xfree (d->exp_string);\n-  delete d;\n-}\n-\n /* Clear out the display_chain.  Done when new symtabs are loaded,\n    since this invalidates the types stored in many expressions.  */\n \n void\n-clear_displays (void)\n+clear_displays ()\n {\n-  struct display *d;\n-\n-  while ((d = display_chain) != NULL)\n-    {\n-      display_chain = d->next;\n-      free_display (d);\n-    }\n+  all_displays.clear ();\n }\n \n /* Delete the auto-display DISPLAY.  */\n \n static void\n delete_display (struct display *display)\n {\n-  struct display *d;\n-\n   gdb_assert (display != NULL);\n \n-  if (display_chain == display)\n-    display_chain = display->next;\n-\n-  ALL_DISPLAYS (d)\n-    if (d->next == display)\n-      {\n-\td->next = display->next;\n-\tbreak;\n-      }\n-\n-  free_display (display);\n+  auto iter = std::find_if (all_displays.begin (),\n+\t\t\t    all_displays.end (),\n+\t\t\t    [=] (const std::unique_ptr<struct display> &item)\n+\t\t\t    {\n+\t\t\t      return item.get () == display;\n+\t\t\t    });\n+  gdb_assert (iter != all_displays.end ());\n+  all_displays.erase (iter);\n }\n \n /* Call FUNCTION on each of the displays whose numbers are given in\n    ARGS.  DATA is passed unmodified to FUNCTION.  */\n \n static void\n map_display_numbers (const char *args,\n-\t\t     void (*function) (struct display *,\n-\t\t\t\t       void *),\n-\t\t     void *data)\n+\t\t     gdb::function_view<void (struct display *)> function)\n {\n   int num;\n \n@@ -1860,27 +1822,20 @@ map_display_numbers (const char *args,\n \twarning (_(\"bad display number at or near '%s'\"), p);\n       else\n \t{\n-\t  struct display *d, *tmp;\n-\n-\t  ALL_DISPLAYS_SAFE (d, tmp)\n-\t    if (d->number == num)\n-\t      break;\n-\t  if (d == NULL)\n+\t  auto iter = std::find_if (all_displays.begin (),\n+\t\t\t\t    all_displays.end (),\n+\t\t\t\t    [=] (const std::unique_ptr<display> &item)\n+\t\t\t\t    {\n+\t\t\t\t      return item->number == num;\n+\t\t\t\t    });\n+\t  if (iter == all_displays.end ())\n \t    printf_unfiltered (_(\"No display number %d.\\n\"), num);\n \t  else\n-\t    function (d, data);\n+\t    function (iter->get ());\n \t}\n     }\n }\n \n-/* Callback for map_display_numbers, that deletes a display.  */\n-\n-static void\n-do_delete_display (struct display *d, void *data)\n-{\n-  delete_display (d);\n-}\n-\n /* \"undisplay\" command.  */\n \n static void\n@@ -1894,7 +1849,7 @@ undisplay_command (const char *args, int from_tty)\n       return;\n     }\n \n-  map_display_numbers (args, do_delete_display, NULL);\n+  map_display_numbers (args, delete_display);\n   dont_repeat ();\n }\n \n@@ -1907,7 +1862,7 @@ do_one_display (struct display *d)\n {\n   int within_current_scope;\n \n-  if (d->enabled_p == 0)\n+  if (!d->enabled_p)\n     return;\n \n   /* The expression carries the architecture that was used at parse time.\n@@ -1929,15 +1884,15 @@ do_one_display (struct display *d)\n       try\n \t{\n \t  innermost_block_tracker tracker;\n-\t  d->exp = parse_expression (d->exp_string, &tracker);\n+\t  d->exp = parse_expression (d->exp_string.c_str (), &tracker);\n \t  d->block = tracker.block ();\n \t}\n       catch (const gdb_exception &ex)\n \t{\n \t  /* Can't re-parse the expression.  Disable this display item.  */\n-\t  d->enabled_p = 0;\n+\t  d->enabled_p = false;\n \t  warning (_(\"Unable to display \\\"%s\\\": %s\"),\n-\t\t   d->exp_string, ex.what ());\n+\t\t   d->exp_string.c_str (), ex.what ());\n \t  return;\n \t}\n     }\n@@ -1977,7 +1932,7 @@ do_one_display (struct display *d)\n \n       annotate_display_expression ();\n \n-      puts_filtered (d->exp_string);\n+      puts_filtered (d->exp_string.c_str ());\n       annotate_display_expression_end ();\n \n       if (d->format.count != 1 || d->format.format == 'i')\n@@ -2016,7 +1971,7 @@ do_one_display (struct display *d)\n \n       annotate_display_expression ();\n \n-      puts_filtered (d->exp_string);\n+      puts_filtered (d->exp_string.c_str ());\n       annotate_display_expression_end ();\n \n       printf_filtered (\" = \");\n@@ -2053,10 +2008,8 @@ do_one_display (struct display *d)\n void\n do_displays (void)\n {\n-  struct display *d;\n-\n-  for (d = display_chain; d; d = d->next)\n-    do_one_display (d);\n+  for (auto &d : all_displays)\n+    do_one_display (d.get ());\n }\n \n /* Delete the auto-display which we were in the process of displaying.\n@@ -2065,12 +2018,10 @@ do_displays (void)\n void\n disable_display (int num)\n {\n-  struct display *d;\n-\n-  for (d = display_chain; d; d = d->next)\n+  for (auto &d : all_displays)\n     if (d->number == num)\n       {\n-\td->enabled_p = 0;\n+\td->enabled_p = false;\n \treturn;\n       }\n   printf_unfiltered (_(\"No display number %d.\\n\"), num);\n@@ -2093,70 +2044,61 @@ disable_current_display (void)\n static void\n info_display_command (const char *ignore, int from_tty)\n {\n-  struct display *d;\n-\n-  if (!display_chain)\n+  if (all_displays.empty ())\n     printf_unfiltered (_(\"There are no auto-display expressions now.\\n\"));\n   else\n     printf_filtered (_(\"Auto-display expressions now in effect:\\n\\\n Num Enb Expression\\n\"));\n \n-  for (d = display_chain; d; d = d->next)\n+  for (auto &d : all_displays)\n     {\n       printf_filtered (\"%d:   %c  \", d->number, \"ny\"[(int) d->enabled_p]);\n       if (d->format.size)\n \tprintf_filtered (\"/%d%c%c \", d->format.count, d->format.size,\n \t\t\t d->format.format);\n       else if (d->format.format)\n \tprintf_filtered (\"/%c \", d->format.format);\n-      puts_filtered (d->exp_string);\n+      puts_filtered (d->exp_string.c_str ());\n       if (d->block && !contained_in (get_selected_block (0), d->block, true))\n \tprintf_filtered (_(\" (cannot be evaluated in the current context)\"));\n       printf_filtered (\"\\n\");\n     }\n }\n \n-/* Callback fo map_display_numbers, that enables or disables the\n-   passed in display D.  */\n-\n-static void\n-do_enable_disable_display (struct display *d, void *data)\n-{\n-  d->enabled_p = *(int *) data;\n-}\n-\n /* Implementation of both the \"disable display\" and \"enable display\"\n    commands.  ENABLE decides what to do.  */\n \n static void\n-enable_disable_display_command (const char *args, int from_tty, int enable)\n+enable_disable_display_command (const char *args, int from_tty, bool enable)\n {\n   if (args == NULL)\n     {\n-      struct display *d;\n-\n-      ALL_DISPLAYS (d)\n+      for (auto &d : all_displays)\n \td->enabled_p = enable;\n       return;\n     }\n \n-  map_display_numbers (args, do_enable_disable_display, &enable);\n+  map_display_numbers (args,\n+\t\t       [=] (struct display *d)\n+\t\t       {\n+\t\t\t d->enabled_p = enable;\n+\t\t       });\n }\n \n /* The \"enable display\" command.  */\n \n static void\n enable_display_command (const char *args, int from_tty)\n {\n-  enable_disable_display_command (args, from_tty, 1);\n+  enable_disable_display_command (args, from_tty, true);\n }\n \n /* The \"disable display\" command.  */\n \n static void\n disable_display_command (const char *args, int from_tty)\n {\n-  enable_disable_display_command (args, from_tty, 0);\n+  enable_disable_display_command (args, from_tty, false);\n }\n \n /* display_chain items point to blocks and expressions.  Some expressions in\n@@ -2170,7 +2112,6 @@ disable_display_command (const char *args, int from_tty)\n static void\n clear_dangling_display_expressions (struct objfile *objfile)\n {\n-  struct display *d;\n   struct program_space *pspace;\n \n   /* With no symbol file we cannot have a block or expression from it.  */\n@@ -2183,7 +2124,7 @@ clear_dangling_display_expressions (struct objfile *objfile)\n       gdb_assert (objfile->pspace == pspace);\n     }\n \n-  for (d = display_chain; d != NULL; d = d->next)\n+  for (auto &d : all_displays)\n     {\n       if (d->pspace != pspace)\n \tcontinue;"
    }
  ]
}