{
  "sha": "81e8046dc0daaf56fb10b11931fc77600a4b5920",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODFlODA0NmRjMGRhYWY1NmZiMTBiMTE5MzFmYzc3NjAwYTRiNTkyMA==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2019-08-16T21:25:15Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2019-08-16T21:25:58Z"
    },
    "message": "x86-64: Move PIC check for PC-relative relocations back\n\ncommit 83924b3846361f2f76f9a6e7b5afa01c0eebbd4f\nAuthor: H.J. Lu <hjl.tools@gmail.com>\nDate:   Tue Feb 5 18:45:23 2019 -0800\n\n    x86-64: Restore PIC check for PCREL reloc against protected symbol\n\nmoved PIC check for PC-relative relocations to elf_x86_64_check_relocs.\nSince linker defined symbols may not be processed at the time, we need\nto move the check back to elf_x86_64_relocate_section.\n\nbfd/\n\n\tPR ld/24905\n\t* elf64-x86-64.c (elf_x86_64_check_relocs): Move PIC check for\n\tPC-relative relocations back to ...\n\t(elf_x86_64_relocate_section): Here.\n\nld/\n\n\tPR ld/24905\n\t* testsuite/ld-x86-64/pr24905-x32.d: New file.\n\t* testsuite/ld-x86-64/pr24905.d: Likewise.\n\t* testsuite/ld-x86-64/pr24905.s: Likewise.\n\t* testsuite/ld-x86-64/pr24905.t: Likewise.\n\t* testsuite/ld-x86-64/x86-64.exp: Run pr24905 and pr24905-x32.",
    "tree": {
      "sha": "1068ed32d4fc01ea11136b4f2ba7990715703f3d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1068ed32d4fc01ea11136b4f2ba7990715703f3d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/81e8046dc0daaf56fb10b11931fc77600a4b5920",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/81e8046dc0daaf56fb10b11931fc77600a4b5920",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/81e8046dc0daaf56fb10b11931fc77600a4b5920",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/81e8046dc0daaf56fb10b11931fc77600a4b5920/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "398fdd6086a290748afcce0efabaebb4e363278c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/398fdd6086a290748afcce0efabaebb4e363278c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/398fdd6086a290748afcce0efabaebb4e363278c"
    }
  ],
  "stats": {
    "total": 189,
    "additions": 110,
    "deletions": 79
  },
  "files": [
    {
      "sha": "962fc1f0375cd4b5633fc48abb19566b5b53be81",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e8046dc0daaf56fb10b11931fc77600a4b5920/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e8046dc0daaf56fb10b11931fc77600a4b5920/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=81e8046dc0daaf56fb10b11931fc77600a4b5920",
      "patch": "@@ -1,3 +1,10 @@\n+2019-08-16  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR ld/24905\n+\t* elf64-x86-64.c (elf_x86_64_check_relocs): Move PIC check for\n+\tPC-relative relocations back to ...\n+\t(elf_x86_64_relocate_section): Here.\n+\n 2019-08-16  Martin Liska  <mliska@suse.cz>\n \n \tPR ld/24912"
    },
    {
      "sha": "e5c8003a68e1dc71e84ec10fb434175e26df38ce",
      "filename": "bfd/elf64-x86-64.c",
      "status": "modified",
      "additions": 70,
      "deletions": 79,
      "changes": 149,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e8046dc0daaf56fb10b11931fc77600a4b5920/bfd/elf64-x86-64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e8046dc0daaf56fb10b11931fc77600a4b5920/bfd/elf64-x86-64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-x86-64.c?ref=81e8046dc0daaf56fb10b11931fc77600a4b5920",
      "patch": "@@ -1864,7 +1864,6 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n       const char *name;\n       bfd_boolean size_reloc;\n       bfd_boolean converted_reloc;\n-      bfd_boolean do_check_pic;\n \n       r_symndx = htab->r_sym (rel->r_info);\n       r_type = ELF32_R_TYPE (rel->r_info);\n@@ -2136,13 +2135,6 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t  size_reloc = TRUE;\n \t  goto do_size;\n \n-\tcase R_X86_64_PC8:\n-\tcase R_X86_64_PC16:\n-\tcase R_X86_64_PC32:\n-\tcase R_X86_64_PC32_BND:\n-\t  do_check_pic = TRUE;\n-\t  goto check_pic;\n-\n \tcase R_X86_64_32:\n \t  if (!ABI_64_P (abfd))\n \t    goto pointer;\n@@ -2166,11 +2158,13 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t\t\t\t\t&x86_64_elf_howto_table[r_type]);\n \t  /* Fall through.  */\n \n+\tcase R_X86_64_PC8:\n+\tcase R_X86_64_PC16:\n+\tcase R_X86_64_PC32:\n+\tcase R_X86_64_PC32_BND:\n \tcase R_X86_64_PC64:\n \tcase R_X86_64_64:\n pointer:\n-\t  do_check_pic = FALSE;\n-check_pic:\n \t  if (eh != NULL && (sec->flags & SEC_CODE) != 0)\n \t    eh->zero_undefweak |= 0x2;\n \t  /* We are called after all symbols have been resolved.  Only\n@@ -2234,69 +2228,6 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t\t}\n \t    }\n \n-\t  if (do_check_pic)\n-\t    {\n-\t      /* Don't complain about -fPIC if the symbol is undefined\n-\t         when building executable unless it is unresolved weak\n-\t\t symbol, references a dynamic definition in PIE or\n-\t\t -z nocopyreloc is used.  */\n-\t      bfd_boolean no_copyreloc_p\n-\t\t= (info->nocopyreloc\n-\t\t   || (h != NULL\n-\t\t       && !h->root.linker_def\n-\t\t       && !h->root.ldscript_def\n-\t\t       && eh->def_protected\n-\t\t       && elf_has_no_copy_on_protected (h->root.u.def.section->owner)));\n-\t      if ((sec->flags & SEC_ALLOC) != 0\n-\t\t  && (sec->flags & SEC_READONLY) != 0\n-\t\t  && h != NULL\n-\t\t  && ((bfd_link_executable (info)\n-\t\t       && ((h->root.type == bfd_link_hash_undefweak\n-\t\t\t    && (eh == NULL\n-\t\t\t\t|| !UNDEFINED_WEAK_RESOLVED_TO_ZERO (info,\n-\t\t\t\t\t\t\t\t     eh)))\n-\t\t\t   || (bfd_link_pie (info)\n-\t\t\t       && !SYMBOL_DEFINED_NON_SHARED_P (h)\n-\t\t\t       && h->def_dynamic)\n-\t\t\t   || (no_copyreloc_p\n-\t\t\t       && h->def_dynamic\n-\t\t\t       && !(h->root.u.def.section->flags & SEC_CODE))))\n-\t\t      || bfd_link_dll (info)))\n-\t\t{\n-\t\t  bfd_boolean fail = FALSE;\n-\t\t  if (SYMBOL_REFERENCES_LOCAL_P (info, h))\n-\t\t    {\n-\t\t      /* Symbol is referenced locally.  Make sure it is\n-\t\t\t defined locally.  */\n-\t\t      fail = !SYMBOL_DEFINED_NON_SHARED_P (h);\n-\t\t    }\n-\t\t  else if (bfd_link_pie (info))\n-\t\t    {\n-\t\t      /* We can only use PC-relative relocations in PIE\n-\t\t\t from non-code sections.  */\n-\t\t      if (h->type == STT_FUNC\n-\t\t\t  && (sec->flags & SEC_CODE) != 0)\n-\t\t\tfail = TRUE;\n-\t\t    }\n-\t\t  else if (no_copyreloc_p || bfd_link_dll (info))\n-\t\t    {\n-\t\t      /* Symbol doesn't need copy reloc and isn't\n-\t\t\t referenced locally.  Don't allow PC-relative\n-\t\t\t relocations against default and protected\n-\t\t\t symbols since address of protected function\n-\t\t\t and location of protected data may not be in\n-\t\t\t the shared object.   */\n-\t\t      fail = (ELF_ST_VISIBILITY (h->other) == STV_DEFAULT\n-\t\t\t      || ELF_ST_VISIBILITY (h->other) == STV_PROTECTED);\n-\t\t    }\n-\n-\t\t  if (fail)\n-\t\t    return elf_x86_64_need_pic (info, abfd, sec, h,\n-\t\t\t\t\t\tsymtab_hdr, isym,\n-\t\t\t\t\t\t&x86_64_elf_howto_table[r_type]);\n-\t\t}\n-\t    }\n-\n \t  size_reloc = FALSE;\n do_size:\n \t  if (NEED_DYNAMIC_RELOCATION_P (info, TRUE, h, sec, r_type,\n@@ -2497,6 +2428,7 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n       bfd_boolean relative_reloc;\n       bfd_boolean converted_reloc;\n       bfd_boolean need_copy_reloc_in_pie;\n+      bfd_boolean no_copyreloc_p;\n \n       r_type = ELF32_R_TYPE (rel->r_info);\n       if (r_type == (int) R_X86_64_GNU_VTINHERIT\n@@ -3137,14 +3069,73 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \tcase R_X86_64_PC16:\n \tcase R_X86_64_PC32:\n \tcase R_X86_64_PC32_BND:\n+\t  /* Don't complain about -fPIC if the symbol is undefined when\n+\t     building executable unless it is unresolved weak symbol,\n+\t     references a dynamic definition in PIE or -z nocopyreloc\n+\t     is used.  */\n+\t  no_copyreloc_p\n+\t    = (info->nocopyreloc\n+\t       || (h != NULL\n+\t\t   && !h->root.linker_def\n+\t\t   && !h->root.ldscript_def\n+\t\t   && eh->def_protected\n+\t\t   && elf_has_no_copy_on_protected (h->root.u.def.section->owner)));\n+\n+\t  if ((input_section->flags & SEC_ALLOC) != 0\n+\t      && (input_section->flags & SEC_READONLY) != 0\n+\t      && h != NULL\n+\t      && ((bfd_link_executable (info)\n+\t\t   && ((h->root.type == bfd_link_hash_undefweak\n+\t\t\t&& (eh == NULL\n+\t\t\t    || !UNDEFINED_WEAK_RESOLVED_TO_ZERO (info,\n+\t\t\t\t\t\t\t\t eh)))\n+\t\t       || (bfd_link_pie (info)\n+\t\t\t   && !SYMBOL_DEFINED_NON_SHARED_P (h)\n+\t\t\t   && h->def_dynamic)\n+\t\t       || (no_copyreloc_p\n+\t\t\t   && h->def_dynamic\n+\t\t\t   && !(h->root.u.def.section->flags & SEC_CODE))))\n+\t\t  || bfd_link_dll (info)))\n+\t    {\n+\t      bfd_boolean fail = FALSE;\n+\t      if (SYMBOL_REFERENCES_LOCAL_P (info, h))\n+\t\t{\n+\t\t  /* Symbol is referenced locally.  Make sure it is\n+\t\t     defined locally.  */\n+\t\t  fail = !SYMBOL_DEFINED_NON_SHARED_P (h);\n+\t\t}\n+\t      else if (bfd_link_pie (info))\n+\t\t{\n+\t\t  /* We can only use PC-relative relocations in PIE\n+\t\t     from non-code sections.  */\n+\t\t  if (h->type == STT_FUNC\n+\t\t      && (sec->flags & SEC_CODE) != 0)\n+\t\t    fail = TRUE;\n+\t\t}\n+\t      else if (no_copyreloc_p || bfd_link_dll (info))\n+\t\t{\n+\t\t  /* Symbol doesn't need copy reloc and isn't\n+\t\t     referenced locally.  Don't allow PC-relative\n+\t\t     relocations against default and protected\n+\t\t     symbols since address of protected function\n+\t\t     and location of protected data may not be in\n+\t\t     the shared object.   */\n+\t\t  fail = (ELF_ST_VISIBILITY (h->other) == STV_DEFAULT\n+\t\t\t  || ELF_ST_VISIBILITY (h->other) == STV_PROTECTED);\n+\t\t}\n+\n+\t      if (fail)\n+\t\treturn elf_x86_64_need_pic (info, input_bfd, input_section,\n+\t\t\t\t\t    h, NULL, NULL, howto);\n+\t    }\n \t  /* Since x86-64 has PC-relative PLT, we can use PLT in PIE\n \t     as function address.  */\n-\t  if (h != NULL\n-\t      && (input_section->flags & SEC_CODE) == 0\n-\t      && bfd_link_pie (info)\n-\t      && h->type == STT_FUNC\n-\t      && !h->def_regular\n-\t      && h->def_dynamic)\n+\t  else if (h != NULL\n+\t\t   && (input_section->flags & SEC_CODE) == 0\n+\t\t   && bfd_link_pie (info)\n+\t\t   && h->type == STT_FUNC\n+\t\t   && !h->def_regular\n+\t\t   && h->def_dynamic)\n \t    goto use_plt;\n \t  /* Fall through.  */\n "
    },
    {
      "sha": "4837aac2203eef35b3e3d961cd2bf362933a3e2c",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e8046dc0daaf56fb10b11931fc77600a4b5920/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e8046dc0daaf56fb10b11931fc77600a4b5920/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=81e8046dc0daaf56fb10b11931fc77600a4b5920",
      "patch": "@@ -1,3 +1,12 @@\n+2019-08-16  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR ld/24905\n+\t* testsuite/ld-x86-64/pr24905-x32.d: New file.\n+\t* testsuite/ld-x86-64/pr24905.d: Likewise.\n+\t* testsuite/ld-x86-64/pr24905.s: Likewise.\n+\t* testsuite/ld-x86-64/pr24905.t: Likewise.\n+\t* testsuite/ld-x86-64/x86-64.exp: Run pr24905 and pr24905-x32.\n+\n 2019-08-16  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* emulparams/armelf.sh (OTHER_SECTIONS): Add support for noinit"
    },
    {
      "sha": "e2c6a7307666485220706074d7c054dfdbc0b518",
      "filename": "ld/testsuite/ld-x86-64/pr24905-x32.d",
      "status": "added",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e8046dc0daaf56fb10b11931fc77600a4b5920/ld/testsuite/ld-x86-64/pr24905-x32.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e8046dc0daaf56fb10b11931fc77600a4b5920/ld/testsuite/ld-x86-64/pr24905-x32.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/pr24905-x32.d?ref=81e8046dc0daaf56fb10b11931fc77600a4b5920",
      "patch": "@@ -0,0 +1,8 @@\n+#source: pr24905.s\n+#as: --x32\n+#ld: -shared -melf32_x86_64 $srcdir/$subdir/pr24905.t\n+#nm: -n\n+\n+#...\n+[0-9a-f]* t EXTERNAL_SYM\n+#pass"
    },
    {
      "sha": "f11834f12b9d90dd1dbefbc3371ff6f5f61a373b",
      "filename": "ld/testsuite/ld-x86-64/pr24905.d",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e8046dc0daaf56fb10b11931fc77600a4b5920/ld/testsuite/ld-x86-64/pr24905.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e8046dc0daaf56fb10b11931fc77600a4b5920/ld/testsuite/ld-x86-64/pr24905.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/pr24905.d?ref=81e8046dc0daaf56fb10b11931fc77600a4b5920",
      "patch": "@@ -0,0 +1,7 @@\n+#as: --64\n+#ld: -shared -melf_x86_64 $srcdir/$subdir/pr24905.t\n+#nm: -n\n+\n+#...\n+[0-9a-f]* t EXTERNAL_SYM\n+#pass"
    },
    {
      "sha": "73a5d58032f82f9847ef55e78e6dafed7c225aff",
      "filename": "ld/testsuite/ld-x86-64/pr24905.s",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e8046dc0daaf56fb10b11931fc77600a4b5920/ld/testsuite/ld-x86-64/pr24905.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e8046dc0daaf56fb10b11931fc77600a4b5920/ld/testsuite/ld-x86-64/pr24905.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/pr24905.s?ref=81e8046dc0daaf56fb10b11931fc77600a4b5920",
      "patch": "@@ -0,0 +1,6 @@\n+\t.text\n+\t.globl\tfoo\n+\t.type\tfoo, @function\n+foo:\n+\tleaq\tEXTERNAL_SYM(%rip), %rdi\n+\t.hidden\tEXTERNAL_SYM"
    },
    {
      "sha": "5e7dbd371f4bf76af8b0b4f7106a2c568613030b",
      "filename": "ld/testsuite/ld-x86-64/pr24905.t",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e8046dc0daaf56fb10b11931fc77600a4b5920/ld/testsuite/ld-x86-64/pr24905.t",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e8046dc0daaf56fb10b11931fc77600a4b5920/ld/testsuite/ld-x86-64/pr24905.t",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/pr24905.t?ref=81e8046dc0daaf56fb10b11931fc77600a4b5920",
      "patch": "@@ -0,0 +1 @@\n+PROVIDE_HIDDEN(EXTERNAL_SYM = ADDR(.text));"
    },
    {
      "sha": "b13cc7df0e9e6097ae5f186d6a46cc2caae40221",
      "filename": "ld/testsuite/ld-x86-64/x86-64.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/81e8046dc0daaf56fb10b11931fc77600a4b5920/ld/testsuite/ld-x86-64/x86-64.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/81e8046dc0daaf56fb10b11931fc77600a4b5920/ld/testsuite/ld-x86-64/x86-64.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/x86-64.exp?ref=81e8046dc0daaf56fb10b11931fc77600a4b5920",
      "patch": "@@ -458,6 +458,8 @@ run_dump_test \"pr24458c\"\n run_dump_test \"pr24458c-x32\"\n run_dump_test \"pr24721\"\n run_dump_test \"pr24721-x32\"\n+run_dump_test \"pr24905\"\n+run_dump_test \"pr24905-x32\"\n \n if { ![istarget \"x86_64-*-linux*\"] && ![istarget \"x86_64-*-nacl*\"]} {\n     return"
    }
  ]
}