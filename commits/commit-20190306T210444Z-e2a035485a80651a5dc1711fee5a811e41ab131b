{
  "sha": "e2a035485a80651a5dc1711fee5a811e41ab131b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTJhMDM1NDg1YTgwNjUxYTVkYzE3MTFmZWU1YTgxMWU0MWFiMTMxYg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2018-08-19T17:50:44Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-06T21:04:44Z"
    },
    "message": "Remove cleanups from coffread.c\n\nThis removes the remaining cleanups from coffread.c.\n\nTested by the buildbot and also some manual testing.\n\nThis version includes the fix provided by Joel.\n\ngdb/ChangeLog\n2019-03-06  Joel Brobecker  <brobecker@adacore.com>\n\t    Tom Tromey  <tom@tromey.com>\n\n\t* stabsread.h (struct stab_section_list): Remove.\n\t(coffstab_build_psymtabs): Update.\n\t* dbxread.c (symbuf_sections): Now a std::vector.\n\t(sect_idx): New global.\n\t(fill_symbuf): Update.\n\t(coffstab_build_psymtabs): Change type of stabsects parameter.\n\tUpdate.\n\t* coffread.c (struct coff_symfile_info) <stabsects>: Now a\n\tstd::vector.\n\t(linetab, linetab_offset, linetab_size, stringtab): Move earlier.\n\t(coff_locate_sections): Update.\n\t(coff_symfile_read): Remove cleanups.  Update.\n\t(init_stringtab): Add storage parameter.\n\t(free_stringtab, free_stringtab_cleanup): Remove.\n\t(init_lineno): Add storage parameter.\n\t(free_linetab, free_linetab_cleanup): Remove.",
    "tree": {
      "sha": "2251bab83082ab097d40ed205e0809fb5be1d185",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2251bab83082ab097d40ed205e0809fb5be1d185"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e2a035485a80651a5dc1711fee5a811e41ab131b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2a035485a80651a5dc1711fee5a811e41ab131b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e2a035485a80651a5dc1711fee5a811e41ab131b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2a035485a80651a5dc1711fee5a811e41ab131b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b7e60d85da12a1819671473db8550c9f076e8f38",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b7e60d85da12a1819671473db8550c9f076e8f38",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b7e60d85da12a1819671473db8550c9f076e8f38"
    }
  ],
  "stats": {
    "total": 181,
    "additions": 72,
    "deletions": 109
  },
  "files": [
    {
      "sha": "b17b6a98820b9558ba4a873737c3535edfc28f98",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2a035485a80651a5dc1711fee5a811e41ab131b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2a035485a80651a5dc1711fee5a811e41ab131b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e2a035485a80651a5dc1711fee5a811e41ab131b",
      "patch": "@@ -1,3 +1,23 @@\n+2019-03-06  Joel Brobecker  <brobecker@adacore.com>\n+\t    Tom Tromey  <tom@tromey.com>\n+\n+\t* stabsread.h (struct stab_section_list): Remove.\n+\t(coffstab_build_psymtabs): Update.\n+\t* dbxread.c (symbuf_sections): Now a std::vector.\n+\t(sect_idx): New global.\n+\t(fill_symbuf): Update.\n+\t(coffstab_build_psymtabs): Change type of stabsects parameter.\n+\tUpdate.\n+\t* coffread.c (struct coff_symfile_info) <stabsects>: Now a\n+\tstd::vector.\n+\t(linetab, linetab_offset, linetab_size, stringtab): Move earlier.\n+\t(coff_locate_sections): Update.\n+\t(coff_symfile_read): Remove cleanups.  Update.\n+\t(init_stringtab): Add storage parameter.\n+\t(free_stringtab, free_stringtab_cleanup): Remove.\n+\t(init_lineno): Add storage parameter.\n+\t(free_linetab, free_linetab_cleanup): Remove.\n+\n 2019-03-06  Pedro Alves  <palves@redhat.com>\n \n \t* linux-fork.c (fork_info::clobber_regs): Delete."
    },
    {
      "sha": "b89c0e2e8038030afc2e2fd7196920ca133f98a3",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 34,
      "deletions": 81,
      "changes": 115,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2a035485a80651a5dc1711fee5a811e41ab131b/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2a035485a80651a5dc1711fee5a811e41ab131b/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=e2a035485a80651a5dc1711fee5a811e41ab131b",
      "patch": "@@ -58,7 +58,7 @@ struct coff_symfile_info\n \n     CORE_ADDR textaddr;\t\t/* Addr of .text section.  */\n     unsigned int textsize;\t/* Size of .text section.  */\n-    struct stab_section_list *stabsects;\t/* .stab sections.  */\n+    std::vector<asection *> *stabsects;\t/* .stab sections.  */\n     asection *stabstrsect;\t/* Section pointer for .stab section.  */\n     char *stabstrdata;\n   };\n@@ -155,6 +155,12 @@ static int type_vector_length;\n \n #define INITIAL_TYPE_VECTOR_LENGTH 160\n \n+static char *linetab = NULL;\n+static long linetab_offset;\n+static unsigned long linetab_size;\n+\n+static char *stringtab = NULL;\n+\n extern void stabsread_clear_cache (void);\n \n static struct type *coff_read_struct_type (int, int, int,\n@@ -185,21 +191,13 @@ static void patch_opaque_types (struct symtab *);\n \n static void enter_linenos (long, int, int, struct objfile *);\n \n-static void free_linetab (void);\n-\n-static void free_linetab_cleanup (void *ignore);\n-\n-static int init_lineno (bfd *, long, int);\n+static int init_lineno (bfd *, long, int, gdb::unique_xmalloc_ptr<char> *);\n \n static char *getsymname (struct internal_syment *);\n \n static const char *coff_getfilename (union internal_auxent *);\n \n-static void free_stringtab (void);\n-\n-static void free_stringtab_cleanup (void *ignore);\n-\n-static int init_stringtab (bfd *, long);\n+static int init_stringtab (bfd *, long, gdb::unique_xmalloc_ptr<char> *);\n \n static void read_one_sym (struct coff_symbol *,\n \t\t\t  struct internal_syment *,\n@@ -249,21 +247,7 @@ coff_locate_sections (bfd *abfd, asection *sectp, void *csip)\n \tif (!isdigit (*s))\n \t  break;\n       if (*s == '\\0')\n-\t{\n-\t  struct stab_section_list *n, **pn;\n-\n-\t  n = XNEW (struct stab_section_list);\n-\t  n->section = sectp;\n-\t  n->next = NULL;\n-\t  for (pn = &csi->stabsects; *pn != NULL; pn = &(*pn)->next)\n-\t    ;\n-\t  *pn = n;\n-\n-\t  /* This will be run after coffstab_build_psymtabs is called\n-\t     in coff_symfile_read, at which point we no longer need\n-\t     the information.  */\n-\t  make_cleanup (xfree, n);\n-\t}\n+\tcsi->stabsects->push_back (sectp);\n     }\n }\n \n@@ -567,13 +551,16 @@ coff_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n   unsigned int num_symbols;\n   int symtab_offset;\n   int stringtab_offset;\n-  struct cleanup *back_to;\n   int stabstrsize;\n   \n   info = (struct coff_symfile_info *) objfile_data (objfile,\n \t\t\t\t\t\t    coff_objfile_data_key);\n   symfile_bfd = abfd;\t\t/* Kludge for swap routines.  */\n \n+  std::vector<asection *> stabsects;\n+  scoped_restore restore_stabsects\n+    = make_scoped_restore (&info->stabsects, &stabsects);\n+\n /* WARNING WILL ROBINSON!  ACCESSING BFD-PRIVATE DATA HERE!  FIXME!  */\n   num_symbols = bfd_get_symcount (abfd);\t/* How many syms */\n   symtab_offset = cdata->sym_filepos;\t/* Symbol table file offset */\n@@ -592,10 +579,10 @@ coff_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n \n   /* Allocate space for raw symbol and aux entries, based on their\n      space requirements as reported by BFD.  */\n-  temp_sym = (char *) xmalloc\n-    (cdata->local_symesz + cdata->local_auxesz);\n+  gdb::def_vector<char> temp_storage (cdata->local_symesz\n+\t\t\t\t      + cdata->local_auxesz);\n+  temp_sym = temp_storage.data ();\n   temp_aux = temp_sym + cdata->local_symesz;\n-  back_to = make_cleanup (free_current_contents, &temp_sym);\n \n   /* We need to know whether this is a PE file, because in PE files,\n      unlike standard COFF files, symbol values are stored as offsets\n@@ -625,22 +612,25 @@ coff_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n      can avoid spurious error messages (and maybe run a little\n      faster!) by not even reading the line number table unless we have\n      symbols.  */\n+  scoped_restore restore_linetab = make_scoped_restore (&linetab);\n+  gdb::unique_xmalloc_ptr<char> linetab_storage;\n   if (num_symbols > 0)\n     {\n       /* Read the line number table, all at once.  */\n       bfd_map_over_sections (abfd, find_linenos, (void *) info);\n \n-      make_cleanup (free_linetab_cleanup, 0 /*ignore*/);\n       val = init_lineno (abfd, info->min_lineno_offset,\n-                         info->max_lineno_offset - info->min_lineno_offset);\n+                         info->max_lineno_offset - info->min_lineno_offset,\n+\t\t\t &linetab_storage);\n       if (val < 0)\n         error (_(\"\\\"%s\\\": error reading line numbers.\"), filename);\n     }\n \n   /* Now read the string table, all at once.  */\n \n-  make_cleanup (free_stringtab_cleanup, 0 /*ignore*/);\n-  val = init_stringtab (abfd, stringtab_offset);\n+  scoped_restore restore_stringtab = make_scoped_restore (&stringtab);\n+  gdb::unique_xmalloc_ptr<char> stringtab_storage;\n+  val = init_stringtab (abfd, stringtab_offset, &stringtab_storage);\n   if (val < 0)\n     error (_(\"\\\"%s\\\": can't get string table\"), filename);\n \n@@ -698,7 +688,7 @@ coff_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n   if (!(objfile->flags & OBJF_READNEVER))\n     bfd_map_over_sections (abfd, coff_locate_sections, (void *) info);\n \n-  if (info->stabsects)\n+  if (!info->stabsects->empty())\n     {\n       if (!info->stabstrsect)\n \t{\n@@ -715,7 +705,7 @@ coff_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n \n       coffstab_build_psymtabs (objfile,\n \t\t\t       info->textaddr, info->textsize,\n-\t\t\t       info->stabsects,\n+\t\t\t       *info->stabsects,\n \t\t\t       info->stabstrsect->filepos, stabstrsize);\n     }\n   if (dwarf2_has_info (objfile, NULL))\n@@ -742,8 +732,6 @@ coff_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n \t\t\t\t    symfile_flags, objfile);\n \t}\n     }\n-\n-  do_cleanups (back_to);\n }\n \n static void\n@@ -1295,17 +1283,13 @@ read_one_sym (struct coff_symbol *cs,\n \f\n /* Support for string table handling.  */\n \n-static char *stringtab = NULL;\n-\n static int\n-init_stringtab (bfd *abfd, long offset)\n+init_stringtab (bfd *abfd, long offset, gdb::unique_xmalloc_ptr<char> *storage)\n {\n   long length;\n   int val;\n   unsigned char lengthbuf[4];\n \n-  free_stringtab ();\n-\n   /* If the file is stripped, the offset might be zero, indicating no\n      string table.  Just return with `stringtab' set to null.  */\n   if (offset == 0)\n@@ -1322,7 +1306,8 @@ init_stringtab (bfd *abfd, long offset)\n   if (val != sizeof lengthbuf || length < sizeof lengthbuf)\n     return 0;\n \n-  stringtab = (char *) xmalloc (length);\n+  storage->reset ((char *) xmalloc (length));\n+  stringtab = storage->get ();\n   /* This is in target format (probably not very useful, and not\n      currently used), not host format.  */\n   memcpy (stringtab, lengthbuf, sizeof lengthbuf);\n@@ -1337,20 +1322,6 @@ init_stringtab (bfd *abfd, long offset)\n   return 0;\n }\n \n-static void\n-free_stringtab (void)\n-{\n-  if (stringtab)\n-    xfree (stringtab);\n-  stringtab = NULL;\n-}\n-\n-static void\n-free_stringtab_cleanup (void *ignore)\n-{\n-  free_stringtab ();\n-}\n-\n static char *\n getsymname (struct internal_syment *symbol_entry)\n {\n@@ -1404,34 +1375,30 @@ coff_getfilename (union internal_auxent *aux_entry)\n \f\n /* Support for line number handling.  */\n \n-static char *linetab = NULL;\n-static long linetab_offset;\n-static unsigned long linetab_size;\n-\n /* Read in all the line numbers for fast lookups later.  Leave them in\n    external (unswapped) format in memory; we'll swap them as we enter\n    them into GDB's data structures.  */\n \n static int\n-init_lineno (bfd *abfd, long offset, int size)\n+init_lineno (bfd *abfd, long offset, int size,\n+\t     gdb::unique_xmalloc_ptr<char> *storage)\n {\n   int val;\n \n   linetab_offset = offset;\n   linetab_size = size;\n \n-  free_linetab ();\n-\n   if (size == 0)\n     return 0;\n \n   if (bfd_seek (abfd, offset, 0) < 0)\n     return -1;\n \n   /* Allocate the desired table, plus a sentinel.  */\n-  linetab = (char *) xmalloc (size + local_linesz);\n+  storage->reset ((char *) xmalloc (size + local_linesz));\n+  linetab = storage->get ();\n \n-  val = bfd_bread (linetab, size, abfd);\n+  val = bfd_bread (storage->get (), size, abfd);\n   if (val != size)\n     return -1;\n \n@@ -1441,20 +1408,6 @@ init_lineno (bfd *abfd, long offset, int size)\n   return 0;\n }\n \n-static void\n-free_linetab (void)\n-{\n-  if (linetab)\n-    xfree (linetab);\n-  linetab = NULL;\n-}\n-\n-static void\n-free_linetab_cleanup (void *ignore)\n-{\n-  free_linetab ();\n-}\n-\n #if !defined (L_LNNO32)\n #define L_LNNO32(lp) ((lp)->l_lnno)\n #endif"
    },
    {
      "sha": "ad2edc3ff4bf11e03f8259ddcc5b0654fbf8b397",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 17,
      "deletions": 15,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2a035485a80651a5dc1711fee5a811e41ab131b/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2a035485a80651a5dc1711fee5a811e41ab131b/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=e2a035485a80651a5dc1711fee5a811e41ab131b",
      "patch": "@@ -747,7 +747,8 @@ static char *stringtab_global;\n /* These variables are used to control fill_symbuf when the stabs\n    symbols are not contiguous (as may be the case when a COFF file is\n    linked using --split-by-reloc).  */\n-static struct stab_section_list *symbuf_sections;\n+static const std::vector<asection *> *symbuf_sections;\n+static size_t sect_idx;\n static unsigned int symbuf_left;\n static unsigned int symbuf_read;\n \n@@ -783,13 +784,13 @@ fill_symbuf (bfd *sym_bfd)\n     {\n       if (symbuf_left <= 0)\n \t{\n-\t  file_ptr filepos = symbuf_sections->section->filepos;\n+\t  file_ptr filepos = (*symbuf_sections)[sect_idx]->filepos;\n \n \t  if (bfd_seek (sym_bfd, filepos, SEEK_SET) != 0)\n \t    perror_with_name (bfd_get_filename (sym_bfd));\n-\t  symbuf_left = bfd_section_size (sym_bfd, symbuf_sections->section);\n+\t  symbuf_left = bfd_section_size (sym_bfd, (*symbuf_sections)[sect_idx]);\n \t  symbol_table_offset = filepos - symbuf_read;\n-\t  symbuf_sections = symbuf_sections->next;\n+\t  ++sect_idx;\n \t}\n \n       count = symbuf_left;\n@@ -2942,7 +2943,7 @@ process_one_symbol (int type, int desc, CORE_ADDR valu, const char *name,\n void\n coffstab_build_psymtabs (struct objfile *objfile,\n \t\t\t CORE_ADDR textaddr, unsigned int textsize,\n-\t\t\t struct stab_section_list *stabsects,\n+\t\t\t const std::vector<asection *> &stabsects,\n \t\t\t file_ptr stabstroffset, unsigned int stabstrsize)\n {\n   int val;\n@@ -2981,27 +2982,28 @@ coffstab_build_psymtabs (struct objfile *objfile,\n   /* In a coff file, we've already installed the minimal symbols that came\n      from the coff (non-stab) symbol table, so always act like an\n      incremental load here.  */\n-  if (stabsects->next == NULL)\n+  scoped_restore save_symbuf_sections\n+    = make_scoped_restore (&symbuf_sections);\n+  if (stabsects.size () == 1)\n     {\n-      stabsize = bfd_section_size (sym_bfd, stabsects->section);\n+      stabsize = bfd_section_size (sym_bfd, stabsects[0]);\n       DBX_SYMCOUNT (objfile) = stabsize / DBX_SYMBOL_SIZE (objfile);\n-      DBX_SYMTAB_OFFSET (objfile) = stabsects->section->filepos;\n+      DBX_SYMTAB_OFFSET (objfile) = stabsects[0]->filepos;\n     }\n   else\n     {\n-      struct stab_section_list *stabsect;\n-\n       DBX_SYMCOUNT (objfile) = 0;\n-      for (stabsect = stabsects; stabsect != NULL; stabsect = stabsect->next)\n+      for (asection *section : stabsects)\n \t{\n-\t  stabsize = bfd_section_size (sym_bfd, stabsect->section);\n+\t  stabsize = bfd_section_size (sym_bfd, section);\n \t  DBX_SYMCOUNT (objfile) += stabsize / DBX_SYMBOL_SIZE (objfile);\n \t}\n \n-      DBX_SYMTAB_OFFSET (objfile) = stabsects->section->filepos;\n+      DBX_SYMTAB_OFFSET (objfile) = stabsects[0]->filepos;\n \n-      symbuf_sections = stabsects->next;\n-      symbuf_left = bfd_section_size (sym_bfd, stabsects->section);\n+      sect_idx = 1;\n+      symbuf_sections = &stabsects;\n+      symbuf_left = bfd_section_size (sym_bfd, stabsects[0]);\n       symbuf_read = 0;\n     }\n "
    },
    {
      "sha": "f6928083d7cc9a13085a391c0cfa65b4a4ac37e7",
      "filename": "gdb/stabsread.h",
      "status": "modified",
      "additions": 1,
      "deletions": 13,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e2a035485a80651a5dc1711fee5a811e41ab131b/gdb/stabsread.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e2a035485a80651a5dc1711fee5a811e41ab131b/gdb/stabsread.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.h?ref=e2a035485a80651a5dc1711fee5a811e41ab131b",
      "patch": "@@ -167,18 +167,6 @@ extern void end_stabs (void);\n \n extern void finish_global_stabs (struct objfile *objfile);\n \f\n-/* COFF files can have multiple .stab sections, if they are linked\n-   using --split-by-reloc.  This linked list is used to pass the\n-   information into the functions in dbxread.c.  */\n-struct stab_section_list\n-  {\n-    /* Next in list.  */\n-    struct stab_section_list *next;\n-\n-    /* Stab section.  */\n-    asection *section;\n-  };\n-\f\n /* Functions exported by dbxread.c.  These are not in stabsread.c because\n    they are only used by some stabs readers.  */\n \n@@ -201,7 +189,7 @@ extern void elfstab_build_psymtabs (struct objfile *objfile,\n extern void coffstab_build_psymtabs\n   (struct objfile *objfile,\n    CORE_ADDR textaddr, unsigned int textsize,\n-   struct stab_section_list *stabs,\n+   const std::vector<asection *> &stabs,\n    file_ptr stabstroffset, unsigned int stabstrsize);\n \n extern void stabsect_build_psymtabs (struct objfile *objfile, char *stab_name,"
    }
  ]
}