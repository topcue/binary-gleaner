{
  "sha": "d4df075e8b946da354dc11690a793cf5c17394aa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDRkZjA3NWU4Yjk0NmRhMzU0ZGMxMTY5MGE3OTNjZjVjMTczOTRhYQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T00:49:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T02:29:07Z"
    },
    "message": "Add attribute::as_unsigned method\n\nThis introduces a new attribute::as_unsigned method and changes a few\nspots to use it.\n\ngdb/ChangeLog\n2020-09-29  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (dw2_get_file_names_reader)\n\t(dwarf2_build_include_psymtabs, handle_DW_AT_stmt_list)\n\t(dwarf2_cu::setup_type_unit_groups, fill_in_loclist_baton)\n\t(dwarf2_symbol_mark_computed): Use as_unsigned.\n\t* dwarf2/attribute.h (struct attribute) <as_unsigned>: New\n\tmethod.\n\t<form_is_section_offset>: Update comment.",
    "tree": {
      "sha": "4c83c093d28cdb13a977411cd2b0d7a753023439",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4c83c093d28cdb13a977411cd2b0d7a753023439"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d4df075e8b946da354dc11690a793cf5c17394aa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4df075e8b946da354dc11690a793cf5c17394aa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d4df075e8b946da354dc11690a793cf5c17394aa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4df075e8b946da354dc11690a793cf5c17394aa/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bf23a26804608145c316c7516b1aceecc055a888",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf23a26804608145c316c7516b1aceecc055a888",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bf23a26804608145c316c7516b1aceecc055a888"
    }
  ],
  "stats": {
    "total": 43,
    "additions": 31,
    "deletions": 12
  },
  "files": [
    {
      "sha": "9c161e421f506ac17bf76ccafa162056d706ae58",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4df075e8b946da354dc11690a793cf5c17394aa/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4df075e8b946da354dc11690a793cf5c17394aa/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d4df075e8b946da354dc11690a793cf5c17394aa",
      "patch": "@@ -1,3 +1,13 @@\n+2020-09-29  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (dw2_get_file_names_reader)\n+\t(dwarf2_build_include_psymtabs, handle_DW_AT_stmt_list)\n+\t(dwarf2_cu::setup_type_unit_groups, fill_in_loclist_baton)\n+\t(dwarf2_symbol_mark_computed): Use as_unsigned.\n+\t* dwarf2/attribute.h (struct attribute) <as_unsigned>: New\n+\tmethod.\n+\t<form_is_section_offset>: Update comment.\n+\n 2020-09-29  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (dwarf2_access_attribute): Rename from"
    },
    {
      "sha": "c2e14ef1fe6fd1de38f265123a42d66c1ed0e729",
      "filename": "gdb/dwarf2/attribute.h",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4df075e8b946da354dc11690a793cf5c17394aa/gdb/dwarf2/attribute.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4df075e8b946da354dc11690a793cf5c17394aa/gdb/dwarf2/attribute.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.h?ref=d4df075e8b946da354dc11690a793cf5c17394aa",
      "patch": "@@ -82,9 +82,18 @@ struct attribute\n     return u.unsnd;\n   }\n \n+  /* Return the unsigned value.  Requires that the form be an unsigned\n+     form, and that reprocessing not be needed.  */\n+  ULONGEST as_unsigned () const\n+  {\n+    gdb_assert (form_is_unsigned ());\n+    gdb_assert (!requires_reprocessing);\n+    return u.unsnd;\n+  }\n+\n   /* Return non-zero if ATTR's value is a section offset --- classes\n      lineptr, loclistptr, macptr or rangelistptr --- or zero, otherwise.\n-     You may use DW_UNSND (attr) to retrieve such offsets.\n+     You may use the as_unsigned method to retrieve such offsets.\n \n      Section 7.5.4, \"Attribute Encodings\", explains that no attribute\n      may have a value that belongs to more than one of these classes; it"
    },
    {
      "sha": "43c9adb873740b30dc3261622df5c0355ecdae39",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4df075e8b946da354dc11690a793cf5c17394aa/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4df075e8b946da354dc11690a793cf5c17394aa/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=d4df075e8b946da354dc11690a793cf5c17394aa",
      "patch": "@@ -3210,11 +3210,11 @@ dw2_get_file_names_reader (const struct die_reader_specs *reader,\n   sect_offset line_offset {};\n \n   attr = dwarf2_attr (comp_unit_die, DW_AT_stmt_list, cu);\n-  if (attr != nullptr)\n+  if (attr != nullptr && attr->form_is_unsigned ())\n     {\n       struct quick_file_names find_entry;\n \n-      line_offset = (sect_offset) DW_UNSND (attr);\n+      line_offset = (sect_offset) attr->as_unsigned ();\n \n       /* We may have already read in this line header (TU line header sharing).\n \t If we have we're done.  */\n@@ -6297,8 +6297,8 @@ dwarf2_build_include_psymtabs (struct dwarf2_cu *cu,\n   struct attribute *attr;\n \n   attr = dwarf2_attr (die, DW_AT_stmt_list, cu);\n-  if (attr != nullptr)\n-    lh = dwarf_decode_line_header ((sect_offset) DW_UNSND (attr), cu);\n+  if (attr != nullptr && attr->form_is_unsigned ())\n+    lh = dwarf_decode_line_header ((sect_offset) attr->as_unsigned (), cu);\n   if (lh == NULL)\n     return;  /* No linetable, so no includes.  */\n \n@@ -11004,10 +11004,10 @@ handle_DW_AT_stmt_list (struct die_info *die, struct dwarf2_cu *cu,\n   gdb_assert (! cu->per_cu->is_debug_types);\n \n   attr = dwarf2_attr (die, DW_AT_stmt_list, cu);\n-  if (attr == NULL)\n+  if (attr == NULL || !attr->form_is_unsigned ())\n     return;\n \n-  sect_offset line_offset = (sect_offset) DW_UNSND (attr);\n+  sect_offset line_offset = (sect_offset) attr->as_unsigned ();\n \n   /* The line header hash table is only created if needed (it exists to\n      prevent redundant reading of the line table for partial_units).\n@@ -11197,9 +11197,9 @@ dwarf2_cu::setup_type_unit_groups (struct die_info *die)\n   /* We have to handle the case of both a missing DW_AT_stmt_list or bad\n      debug info.  */\n   line_header_up lh;\n-  if (attr != NULL)\n+  if (attr != NULL && attr->form_is_unsigned ())\n     {\n-      sect_offset line_offset = (sect_offset) DW_UNSND (attr);\n+      sect_offset line_offset = (sect_offset) attr->as_unsigned ();\n       lh = dwarf_decode_line_header (line_offset, this);\n     }\n   if (lh == NULL)\n@@ -23983,8 +23983,8 @@ fill_in_loclist_baton (struct dwarf2_cu *cu,\n   gdb_assert (baton->per_cu);\n   /* We don't know how long the location list is, but make sure we\n      don't run off the edge of the section.  */\n-  baton->size = section->size - DW_UNSND (attr);\n-  baton->data = section->buffer + DW_UNSND (attr);\n+  baton->size = section->size - attr->as_unsigned ();\n+  baton->data = section->buffer + attr->as_unsigned ();\n   if (cu->base_address.has_value ())\n     baton->base_address = *cu->base_address;\n   else\n@@ -24004,7 +24004,7 @@ dwarf2_symbol_mark_computed (const struct attribute *attr, struct symbol *sym,\n       /* .debug_loc{,.dwo} may not exist at all, or the offset may be outside\n \t the section.  If so, fall through to the complaint in the\n \t other branch.  */\n-      && DW_UNSND (attr) < section->get_size (objfile))\n+      && attr->as_unsigned () < section->get_size (objfile))\n     {\n       struct dwarf2_loclist_baton *baton;\n "
    }
  ]
}