{
  "sha": "88b91969e1ae5d23f81b86ae6cd3c85b284c6294",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODhiOTE5NjllMWFlNWQyM2Y4MWI4NmFlNmNkM2M4NWIyODRjNjI5NA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-11-30T08:37:10Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-11-30T08:37:10Z"
    },
    "message": "Remove per-language op_name functions\n\nenum exp_opcode is created from all the .def files, but then each\nlanguage is required to implement its own op_name function to turn an\nenum value to a string.  This seemed over-complicated to me, and this\npatch removes the per-language functions in favor of simply using the\n.def names for all languages.  Note that op_name is only used for\ndumping expressions, which is a maintainer/debug feature.\nFurthermore, I don't think there was any case where the .def name and\nthe string name differed.\n\ngdb/ChangeLog\n2020-11-30  Tom Tromey  <tom@tromey.com>\n\n\t* rust-lang.c (rust_op_name): Remove.\n\t(exp_descriptor_rust): Update.\n\t* parser-defs.h (op_name_standard): Don't declare.\n\t(struct exp_descriptor) <op_name>: Remove.\n\t* parse.c (exp_descriptor_standard): Update.\n\t* opencl-lang.c (exp_descriptor_opencl): Update.\n\t* m2-lang.c (m2_language::exp_descriptor_modula2): Update.\n\t* f-lang.c (op_name_f): Remove.\n\t(f_language::exp_descriptor_tab): Update.\n\t* expression.h (op_name): Update.\n\t* expprint.c (op_name): Rewrite.\n\t(op_name_standard): Remove.\n\t(dump_raw_expression, dump_subexp): Update.\n\t* c-lang.c (exp_descriptor_c): Update.\n\t* ax-gdb.c (gen_expr): Update.\n\t* ada-lang.c (ada_op_name): Remove.\n\t(ada_exp_descriptor): Update.",
    "tree": {
      "sha": "33a677f9adac503851cc9e659d7e2b896e11dddd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/33a677f9adac503851cc9e659d7e2b896e11dddd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/88b91969e1ae5d23f81b86ae6cd3c85b284c6294",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/88b91969e1ae5d23f81b86ae6cd3c85b284c6294",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/88b91969e1ae5d23f81b86ae6cd3c85b284c6294",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1cd49c43f340e4de62922356ed859ee806e52f6f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1cd49c43f340e4de62922356ed859ee806e52f6f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1cd49c43f340e4de62922356ed859ee806e52f6f"
    }
  ],
  "stats": {
    "total": 119,
    "additions": 27,
    "deletions": 92
  },
  "files": [
    {
      "sha": "b6c4862ae9a2bea168ea3d9b6be1687d967928b3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=88b91969e1ae5d23f81b86ae6cd3c85b284c6294",
      "patch": "@@ -1,3 +1,23 @@\n+2020-11-30  Tom Tromey  <tom@tromey.com>\n+\n+\t* rust-lang.c (rust_op_name): Remove.\n+\t(exp_descriptor_rust): Update.\n+\t* parser-defs.h (op_name_standard): Don't declare.\n+\t(struct exp_descriptor) <op_name>: Remove.\n+\t* parse.c (exp_descriptor_standard): Update.\n+\t* opencl-lang.c (exp_descriptor_opencl): Update.\n+\t* m2-lang.c (m2_language::exp_descriptor_modula2): Update.\n+\t* f-lang.c (op_name_f): Remove.\n+\t(f_language::exp_descriptor_tab): Update.\n+\t* expression.h (op_name): Update.\n+\t* expprint.c (op_name): Rewrite.\n+\t(op_name_standard): Remove.\n+\t(dump_raw_expression, dump_subexp): Update.\n+\t* c-lang.c (exp_descriptor_c): Update.\n+\t* ax-gdb.c (gen_expr): Update.\n+\t* ada-lang.c (ada_op_name): Remove.\n+\t(ada_exp_descriptor): Update.\n+\n 2020-11-30  Tom Tromey  <tom@tromey.com>\n \n \t* eval.c (init_array_element): Remove."
    },
    {
      "sha": "906671155d03426fd29e4357125e0c35e8301aa5",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 24,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=88b91969e1ae5d23f81b86ae6cd3c85b284c6294",
      "patch": "@@ -127,8 +127,6 @@ static void replace_operator_with_call (expression_up *, int, int, int,\n \n static int possible_user_operator_p (enum exp_opcode, struct value **);\n \n-static const char *ada_op_name (enum exp_opcode);\n-\n static const char *ada_decoded_op_name (enum exp_opcode);\n \n static int numeric_type_p (struct type *);\n@@ -13289,27 +13287,6 @@ ada_operator_check (struct expression *exp, int pos,\n   return 0;\n }\n \n-static const char *\n-ada_op_name (enum exp_opcode opcode)\n-{\n-  switch (opcode)\n-    {\n-    default:\n-      return op_name_standard (opcode);\n-\n-#define OP_DEFN(op, len, args, binop) case op: return #op;\n-      ADA_OPERATORS;\n-#undef OP_DEFN\n-\n-    case OP_AGGREGATE:\n-      return \"OP_AGGREGATE\";\n-    case OP_CHOICES:\n-      return \"OP_CHOICES\";\n-    case OP_NAME:\n-      return \"OP_NAME\";\n-    }\n-}\n-\n /* As for operator_length, but assumes PC is pointing at the first\n    element of the operator, and gives meaningful results only for the \n    Ada-specific operators, returning 0 for *OPLENP and *ARGSP otherwise.  */\n@@ -13601,7 +13578,6 @@ static const struct exp_descriptor ada_exp_descriptor = {\n   ada_print_subexp,\n   ada_operator_length,\n   ada_operator_check,\n-  ada_op_name,\n   ada_dump_subexp_body,\n   ada_evaluate_subexp\n };"
    },
    {
      "sha": "cea37da5586db6ff19e74b98b558e553b1d247f7",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=88b91969e1ae5d23f81b86ae6cd3c85b284c6294",
      "patch": "@@ -2266,7 +2266,7 @@ gen_expr (struct expression *exp, union exp_element **pc,\n \n     default:\n       error (_(\"Unsupported operator %s (%d) in expression.\"),\n-\t     op_name (exp, op), op);\n+\t     op_name (op), op);\n     }\n }\n "
    },
    {
      "sha": "2a17e007fd0db71d69e8e8d2e8854aa92a5ba357",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=88b91969e1ae5d23f81b86ae6cd3c85b284c6294",
      "patch": "@@ -846,7 +846,6 @@ const struct exp_descriptor exp_descriptor_c =\n   print_subexp_standard,\n   operator_length_standard,\n   operator_check_standard,\n-  op_name_standard,\n   dump_subexp_body_standard,\n   evaluate_subexp_c\n };"
    },
    {
      "sha": "f1cf62e1c9a23117d1a9773f0ec4f12e8786fd34",
      "filename": "gdb/expprint.c",
      "status": "modified",
      "additions": 5,
      "deletions": 18,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/expprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/expprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expprint.c?ref=88b91969e1ae5d23f81b86ae6cd3c85b284c6294",
      "patch": "@@ -685,26 +685,11 @@ op_string (enum exp_opcode op)\n \n static int dump_subexp_body (struct expression *exp, struct ui_file *, int);\n \n-/* Name for OPCODE, when it appears in expression EXP.  */\n-\n-const char *\n-op_name (struct expression *exp, enum exp_opcode opcode)\n-{\n-  if (opcode >= OP_UNUSED_LAST)\n-    {\n-      char *cell = get_print_cell ();\n-      xsnprintf (cell, PRINT_CELL_SIZE, \"unknown opcode: %u\",\n-\t\t unsigned (opcode));\n-      return cell;\n-    }\n-  return exp->language_defn->expression_ops ()->op_name (opcode);\n-}\n-\n /* Default name for the standard operator OPCODE (i.e., one defined in\n    the definition of enum exp_opcode).  */\n \n const char *\n-op_name_standard (enum exp_opcode opcode)\n+op_name (enum exp_opcode opcode)\n {\n   switch (opcode)\n     {\n@@ -719,6 +704,8 @@ op_name_standard (enum exp_opcode opcode)\n     case name:\t\t\\\n       return #name ;\n #include \"std-operator.def\"\n+#include \"ada-operator.def\"\n+#include \"fortran-operator.def\"\n #undef OP\n     }\n }\n@@ -747,7 +734,7 @@ dump_raw_expression (struct expression *exp, struct ui_file *stream,\n     {\n       fprintf_filtered (stream, \"\\t%5d  \", elt);\n \n-      const char *opcode_name = op_name (exp, exp->elts[elt].opcode);\n+      const char *opcode_name = op_name (exp->elts[elt].opcode);\n       fprintf_filtered (stream, \"%20s  \", opcode_name);\n \n       print_longest (stream, 'd', 0, exp->elts[elt].longconst);\n@@ -782,7 +769,7 @@ dump_subexp (struct expression *exp, struct ui_file *stream, int elt)\n     fprintf_filtered (stream, \" \");\n   indent += 2;\n \n-  fprintf_filtered (stream, \"%-20s  \", op_name (exp, exp->elts[elt].opcode));\n+  fprintf_filtered (stream, \"%-20s  \", op_name (exp->elts[elt].opcode));\n \n   elt = dump_subexp_body (exp, stream, elt);\n "
    },
    {
      "sha": "a8bfac17d8b32d75210e0b1e206a12cfc4dafc41",
      "filename": "gdb/expression.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/expression.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/expression.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expression.h?ref=88b91969e1ae5d23f81b86ae6cd3c85b284c6294",
      "patch": "@@ -171,7 +171,7 @@ extern struct value *evaluate_subexp_do_call (expression *exp,\n \n extern void print_expression (struct expression *, struct ui_file *);\n \n-extern const char *op_name (struct expression *exp, enum exp_opcode opcode);\n+extern const char *op_name (enum exp_opcode opcode);\n \n extern const char *op_string (enum exp_opcode);\n "
    },
    {
      "sha": "6771758bacb2765a53a52a4322b723a7a31eedaf",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 19,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=88b91969e1ae5d23f81b86ae6cd3c85b284c6294",
      "patch": "@@ -1072,24 +1072,6 @@ print_subexp_f (struct expression *exp, int *pos,\n     }\n }\n \n-/* Special expression names for Fortran.  */\n-\n-static const char *\n-op_name_f (enum exp_opcode opcode)\n-{\n-  switch (opcode)\n-    {\n-    default:\n-      return op_name_standard (opcode);\n-\n-#define OP(name)\t\\\n-    case name:\t\t\\\n-      return #name ;\n-#include \"fortran-operator.def\"\n-#undef OP\n-    }\n-}\n-\n /* Special expression dumping for Fortran.  */\n \n static int\n@@ -1159,7 +1141,6 @@ const struct exp_descriptor f_language::exp_descriptor_tab =\n   print_subexp_f,\n   operator_length_f,\n   operator_check_f,\n-  op_name_f,\n   dump_subexp_body_f,\n   evaluate_subexp_f\n };"
    },
    {
      "sha": "2576dcafc53de85c142ca0452658b9009efc85a3",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=88b91969e1ae5d23f81b86ae6cd3c85b284c6294",
      "patch": "@@ -167,7 +167,6 @@ const struct exp_descriptor m2_language::exp_descriptor_modula2 =\n   print_subexp_standard,\n   operator_length_standard,\n   operator_check_standard,\n-  op_name_standard,\n   dump_subexp_body_standard,\n   evaluate_subexp_modula2\n };"
    },
    {
      "sha": "ca3a82b1088c8f2c9be191ceecd69bac75498ee8",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=88b91969e1ae5d23f81b86ae6cd3c85b284c6294",
      "patch": "@@ -948,7 +948,6 @@ const struct exp_descriptor exp_descriptor_opencl =\n   print_subexp_standard,\n   operator_length_standard,\n   operator_check_standard,\n-  op_name_standard,\n   dump_subexp_body_standard,\n   evaluate_subexp_opencl\n };"
    },
    {
      "sha": "c34b6085cd09eb9553a5b3855b8237686262a9d5",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=88b91969e1ae5d23f81b86ae6cd3c85b284c6294",
      "patch": "@@ -59,7 +59,6 @@ const struct exp_descriptor exp_descriptor_standard =\n     print_subexp_standard,\n     operator_length_standard,\n     operator_check_standard,\n-    op_name_standard,\n     dump_subexp_body_standard,\n     evaluate_subexp_standard\n   };"
    },
    {
      "sha": "17216057b18ce6e9388f7a95cf5570535ecf724b",
      "filename": "gdb/parser-defs.h",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/parser-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/parser-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parser-defs.h?ref=88b91969e1ae5d23f81b86ae6cd3c85b284c6294",
      "patch": "@@ -355,8 +355,6 @@ extern int operator_check_standard (struct expression *exp, int pos,\n \t\t\t\t      (struct objfile *objfile, void *data),\n \t\t\t\t    void *data);\n \n-extern const char *op_name_standard (enum exp_opcode);\n-\n extern bool parse_float (const char *p, int len,\n \t\t\t const struct type *type, gdb_byte *data);\n \f\n@@ -417,12 +415,6 @@ struct exp_descriptor\n \t\t\t\t\t\tvoid *data),\n \t\t\t   void *data);\n \n-    /* Name of this operator for dumping purposes.\n-       The returned value should never be NULL, even if EXP_OPCODE is\n-       an unknown opcode (a string containing an image of the numeric\n-       value of the opcode can be returned, for instance).  */\n-    const char *(*op_name) (enum exp_opcode);\n-\n     /* Dump the rest of this (prefix) expression after the operator\n        itself has been printed.  See dump_subexp_body_standard in\n        (expprint.c).  */"
    },
    {
      "sha": "b89fd30491ac534190990bec4a8ae7aecdfba24f",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 17,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/88b91969e1ae5d23f81b86ae6cd3c85b284c6294/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=88b91969e1ae5d23f81b86ae6cd3c85b284c6294",
      "patch": "@@ -1680,22 +1680,6 @@ rust_operator_length (const struct expression *exp, int pc, int *oplenp,\n   *argsp = args;\n }\n \n-/* op_name implementation for Rust.  */\n-\n-static const char *\n-rust_op_name (enum exp_opcode opcode)\n-{\n-  switch (opcode)\n-    {\n-    case OP_AGGREGATE:\n-      return \"OP_AGGREGATE\";\n-    case OP_OTHERS:\n-      return \"OP_OTHERS\";\n-    default:\n-      return op_name_standard (opcode);\n-    }\n-}\n-\n /* dump_subexp_body implementation for Rust.  */\n \n static int\n@@ -1869,7 +1853,6 @@ static const struct exp_descriptor exp_descriptor_rust =\n   rust_print_subexp,\n   rust_operator_length,\n   rust_operator_check,\n-  rust_op_name,\n   rust_dump_subexp_body,\n   rust_evaluate_subexp\n };"
    }
  ]
}