{
  "sha": "ecfda20dcc4b658560cd4f0178f6c9cd569d4cad",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWNmZGEyMGRjYzRiNjU4NTYwY2Q0ZjAxNzhmNmM5Y2Q1NjlkNGNhZA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-02-02T15:40:52Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-02-02T15:40:52Z"
    },
    "message": "gdb/testsuite: add .debug_loclists tests\n\nAdd tests for the various issues fixed in the previous patches.\n\nAdd a new \"loclists\" procedure to the DWARF assembler, to allow\ngenerating .debug_loclists sections.\n\ngdb/testsuite/ChangeLog:\n\n\tPR gdb/26813\n\t* lib/dwarf.exp (_handle_DW_FORM): Handle DW_FORM_loclistx.\n\t(loclists): New proc.\n\t* gdb.dwarf2/loclists-multiple-cus.c: New.\n\t* gdb.dwarf2/loclists-multiple-cus.exp: New.\n\t* gdb.dwarf2/loclists-sec-offset.c: New.\n\t* gdb.dwarf2/loclists-sec-offset.exp: New.\n\nChange-Id: I209bcb2a9482762ae943e518998d1f7761f76928",
    "tree": {
      "sha": "65ca334e156261389eed81bfa10091abe45bf03e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/65ca334e156261389eed81bfa10091abe45bf03e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ecfda20dcc4b658560cd4f0178f6c9cd569d4cad",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ecfda20dcc4b658560cd4f0178f6c9cd569d4cad",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ecfda20dcc4b658560cd4f0178f6c9cd569d4cad",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ecfda20dcc4b658560cd4f0178f6c9cd569d4cad/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6b0933da342b0508242560304d6b02c9fdd3696e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6b0933da342b0508242560304d6b02c9fdd3696e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6b0933da342b0508242560304d6b02c9fdd3696e"
    }
  ],
  "stats": {
    "total": 551,
    "additions": 551,
    "deletions": 0
  },
  "files": [
    {
      "sha": "ece1047c08c72d91adcf8d3aeb1aa2e4700052d9",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ecfda20dcc4b658560cd4f0178f6c9cd569d4cad/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ecfda20dcc4b658560cd4f0178f6c9cd569d4cad/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=ecfda20dcc4b658560cd4f0178f6c9cd569d4cad",
      "patch": "@@ -1,3 +1,13 @@\n+2021-02-02  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\tPR gdb/26813\n+\t* lib/dwarf.exp (_handle_DW_FORM): Handle DW_FORM_loclistx.\n+\t(loclists): New proc.\n+\t* gdb.dwarf2/loclists-multiple-cus.c: New.\n+\t* gdb.dwarf2/loclists-multiple-cus.exp: New.\n+\t* gdb.dwarf2/loclists-sec-offset.c: New.\n+\t* gdb.dwarf2/loclists-sec-offset.exp: New.\n+\n 2021-02-02  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* lib/dwarf.exp (_location): Add parameters."
    },
    {
      "sha": "2bffbf2ac4c038db814bd1a90a8da5312f50de2a",
      "filename": "gdb/testsuite/gdb.dwarf2/loclists-multiple-cus.c",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ecfda20dcc4b658560cd4f0178f6c9cd569d4cad/gdb/testsuite/gdb.dwarf2/loclists-multiple-cus.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ecfda20dcc4b658560cd4f0178f6c9cd569d4cad/gdb/testsuite/gdb.dwarf2/loclists-multiple-cus.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/loclists-multiple-cus.c?ref=ecfda20dcc4b658560cd4f0178f6c9cd569d4cad",
      "patch": "@@ -0,0 +1,37 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+static int\n+func1 (void)\n+{\n+  asm (\"func1_label: .global func1_label\\n\");\n+  return 1;\n+}\n+\n+static int\n+func2 (void)\n+{\n+  asm (\"func2_label: .global func2_label\\n\");\n+  return 2;\n+}\n+\n+int\n+main (void)\n+{\n+  func1 ();\n+  func2 ();\n+}"
    },
    {
      "sha": "6b4f5c8cbb87bdd12b66c98b6b1d6abddb4d0acd",
      "filename": "gdb/testsuite/gdb.dwarf2/loclists-multiple-cus.exp",
      "status": "added",
      "additions": 146,
      "deletions": 0,
      "changes": 146,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ecfda20dcc4b658560cd4f0178f6c9cd569d4cad/gdb/testsuite/gdb.dwarf2/loclists-multiple-cus.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ecfda20dcc4b658560cd4f0178f6c9cd569d4cad/gdb/testsuite/gdb.dwarf2/loclists-multiple-cus.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/loclists-multiple-cus.exp?ref=ecfda20dcc4b658560cd4f0178f6c9cd569d4cad",
      "patch": "@@ -0,0 +1,146 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test to reproduce the crash described in PR 26813.\n+#\n+# When reading a list in any table in the .debug_loclists section, GDB would\n+# read the header at offset 0 in the section (the header of the first table).\n+# When the index of the list we read was greater than the number of lists of\n+# the first table, GDB would erroneously report that the index is invalid.\n+#\n+# So this test creates a .debug_loclists section with two tables.  The second\n+# table has more lists than the first one and we try to read a high index in\n+# the second table.\n+\n+load_lib dwarf.exp\n+\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+# Test with 32-bit and 64-bit DWARF.\n+foreach_with_prefix is_64 {false true} {\n+    if { $is_64 } {\n+\tstandard_testfile .c -dw64.S\n+\tset testfile ${testfile}-dw64\n+    } else {\n+\tstandard_testfile .c -dw32.S\n+\tset testfile ${testfile}-dw32\n+    }\n+\n+    # Get the addresses / lengths of func1 and func2.\n+    lassign [function_range func1 $srcdir/$subdir/$srcfile] func1_addr func1_len\n+    lassign [function_range func2 $srcdir/$subdir/$srcfile] func2_addr func2_len\n+\n+    set asm_file [standard_output_file $srcfile2]\n+    Dwarf::assemble $asm_file {\n+\tglobal func1_addr func1_len\n+\tglobal func2_addr func2_len\n+\tglobal is_64\n+\n+\t# The CU uses the DW_FORM_loclistx form to refer to the .debug_loclists\n+\t# section.\n+\tcu {\n+\t    version 5\n+\t    is_64 $is_64\n+\t} {\n+\t    declare_labels int_type\n+\n+\t    DW_TAG_compile_unit {\n+\t\t{DW_AT_loclists_base cu_table DW_FORM_sec_offset}\n+\t    } {\n+\t\tint_type: DW_TAG_base_type {\n+\t\t    {DW_AT_byte_size 4 DW_FORM_data1}\n+\t\t    {DW_AT_encoding @DW_ATE_signed}\n+\t\t    {DW_AT_name \"int\"}\n+\t\t}\n+\n+\t\tDW_TAG_variable {\n+\t\t    {DW_AT_name \"foo\"}\n+\t\t    {DW_AT_location 1 DW_FORM_loclistx}\n+\t\t    {DW_AT_type :$int_type}\n+\t\t}\n+\n+\t\tDW_TAG_subprogram {\n+\t\t    {DW_AT_name \"func1\"}\n+\t\t    {DW_AT_low_pc $func1_addr}\n+\t\t    {DW_AT_high_pc $func1_len DW_FORM_udata}\n+\t\t}\n+\n+\t\tDW_TAG_subprogram {\n+\t\t    {DW_AT_name \"func2\"}\n+\t\t    {DW_AT_low_pc $func2_addr}\n+\t\t    {DW_AT_high_pc $func2_len DW_FORM_udata}\n+\t\t}\n+\t    }\n+\t}\n+\n+\tloclists -is-64 $is_64 {\n+\t    # This table is unused, but exists so that the used table is not at\n+\t    # the beginning of the section.\n+\t    table {\n+\t\tlist_ {\n+\t\t    start_length 0x1000 0x1000 { DW_OP_addr 0x100000 }\n+\t\t}\n+\t    }\n+\n+\t    # The lists in this table are accessed by index (DW_FORM_rnglistx).\n+\t    table -post-header-label cu_table {\n+\t\t# This list is unused, but exists to offset the next ones.\n+\t\tlist_ {\n+\t\t    start_length 0x1000 0x1000 { DW_OP_addr 0x100000 }\n+\t\t}\n+\n+\t\t# For variable foo.\n+\t\tlist_ {\n+\t\t    # When in func1.\n+\t\t    start_length $func1_addr $func1_len {\n+\t\t\tDW_OP_constu 0x123456\n+\t\t\tDW_OP_stack_value\n+\t\t    }\n+\n+\t\t    # When in func2.\n+\t\t    start_length $func2_addr $func2_len {\n+\t\t\tDW_OP_constu 0x234567\n+\t\t\tDW_OP_stack_value\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+    if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t      [list $srcfile $asm_file] {nodebug}] } {\n+\treturn -1\n+    }\n+\n+    if { ![runto_main] } {\n+\tfail \"can't run to main\"\n+\treturn\n+    }\n+\n+    gdb_breakpoint \"func1\"\n+    gdb_breakpoint \"func2\"\n+\n+    gdb_continue_to_breakpoint \"func1\"\n+    with_test_prefix \"at func1\" {\n+\tgdb_test \"print /x foo\" \" = 0x123456\"\n+    }\n+\n+    gdb_continue_to_breakpoint \"func2\"\n+    with_test_prefix \"at func2\" {\n+\tgdb_test \"print /x foo\" \" = 0x234567\"\n+    }\n+}"
    },
    {
      "sha": "2bffbf2ac4c038db814bd1a90a8da5312f50de2a",
      "filename": "gdb/testsuite/gdb.dwarf2/loclists-sec-offset.c",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ecfda20dcc4b658560cd4f0178f6c9cd569d4cad/gdb/testsuite/gdb.dwarf2/loclists-sec-offset.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ecfda20dcc4b658560cd4f0178f6c9cd569d4cad/gdb/testsuite/gdb.dwarf2/loclists-sec-offset.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/loclists-sec-offset.c?ref=ecfda20dcc4b658560cd4f0178f6c9cd569d4cad",
      "patch": "@@ -0,0 +1,37 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+static int\n+func1 (void)\n+{\n+  asm (\"func1_label: .global func1_label\\n\");\n+  return 1;\n+}\n+\n+static int\n+func2 (void)\n+{\n+  asm (\"func2_label: .global func2_label\\n\");\n+  return 2;\n+}\n+\n+int\n+main (void)\n+{\n+  func1 ();\n+  func2 ();\n+}"
    },
    {
      "sha": "9a9188b10744055f2a0ee0cddb4374469f18f4f5",
      "filename": "gdb/testsuite/gdb.dwarf2/loclists-sec-offset.exp",
      "status": "added",
      "additions": 125,
      "deletions": 0,
      "changes": 125,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ecfda20dcc4b658560cd4f0178f6c9cd569d4cad/gdb/testsuite/gdb.dwarf2/loclists-sec-offset.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ecfda20dcc4b658560cd4f0178f6c9cd569d4cad/gdb/testsuite/gdb.dwarf2/loclists-sec-offset.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/loclists-sec-offset.exp?ref=ecfda20dcc4b658560cd4f0178f6c9cd569d4cad",
      "patch": "@@ -0,0 +1,125 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test DW_AT_location attributes referencing the .debug_loclists section using\n+# the DW_FORM_sec_offset form.\n+\n+load_lib dwarf.exp\n+\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+# Test with 32-bit and 64-bit DWARF.\n+foreach_with_prefix is_64 {false true} {\n+    if { $is_64 } {\n+\tstandard_testfile .c -dw64.S\n+\tset testfile ${testfile}-dw64\n+    } else {\n+\tstandard_testfile .c -dw32.S\n+\tset testfile ${testfile}-dw32\n+    }\n+\n+    # Get the addresses / lengths of func1 and func2.\n+    lassign [function_range func1 $srcdir/$subdir/$srcfile] func1_addr func1_len\n+    lassign [function_range func2 $srcdir/$subdir/$srcfile] func2_addr func2_len\n+\n+    set asm_file [standard_output_file $srcfile2]\n+    Dwarf::assemble $asm_file {\n+\tglobal func1_addr func1_len\n+\tglobal func2_addr func2_len\n+\tglobal is_64\n+\n+\tdeclare_labels cu_range_list foo_range_list\n+\n+\t# This CU uses the DW_FORM_sec_offset form to refer to the .debug_rnglists\n+\t# section.\n+\tcu {\n+\t    version 5\n+\t    is_64 $is_64\n+\t} {\n+\t    declare_labels int_type\n+\t    declare_labels foo_location_list\n+\n+\t    DW_TAG_compile_unit {\n+\t    } {\n+\t\tint_type: DW_TAG_base_type {\n+\t\t    {DW_AT_byte_size 4 DW_FORM_data1}\n+\t\t    {DW_AT_encoding @DW_ATE_signed}\n+\t\t    {DW_AT_name \"int\"}\n+\t\t}\n+\n+\t\tDW_TAG_variable {\n+\t\t    {DW_AT_name \"foo\"}\n+\t\t    {DW_AT_location $foo_location_list DW_FORM_sec_offset}\n+\t\t    {DW_AT_type :$int_type}\n+\t\t}\n+\n+\t\tDW_TAG_subprogram {\n+\t\t    {DW_AT_name \"func1\"}\n+\t\t    {DW_AT_low_pc $func1_addr}\n+\t\t    {DW_AT_high_pc $func1_len DW_FORM_udata}\n+\t\t}\n+\n+\t\tDW_TAG_subprogram {\n+\t\t    {DW_AT_name \"func2\"}\n+\t\t    {DW_AT_low_pc $func2_addr}\n+\t\t    {DW_AT_high_pc $func2_len DW_FORM_udata}\n+\t\t}\n+\t    }\n+\t}\n+\n+\tloclists -is-64 $is_64 {\n+\t    # The lists in this table are accessed by direct offset\n+\t    # (DW_FORM_sec_offset).\n+\t    table {\n+\t\tfoo_location_list: list_ {\n+\t\t    start_length $func1_addr $func1_len {\n+\t\t\tDW_OP_constu 0x123456\n+\t\t\tDW_OP_stack_value\n+\t\t    }\n+\n+\t\t    start_length $func2_addr $func2_len {\n+\t\t\tDW_OP_constu 0x234567\n+\t\t\tDW_OP_stack_value\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+    if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t      [list $srcfile $asm_file] {nodebug}] } {\n+\treturn -1\n+    }\n+\n+    if { ![runto_main] } {\n+\tfail \"can't run to main\"\n+\treturn\n+    }\n+\n+    gdb_breakpoint \"func1\"\n+    gdb_breakpoint \"func2\"\n+\n+    gdb_continue_to_breakpoint \"func1\"\n+    with_test_prefix \"at func1\" {\n+\tgdb_test \"print /x foo\" \" = 0x123456\"\n+    }\n+\n+    gdb_continue_to_breakpoint \"func2\"\n+    with_test_prefix \"at func2\" {\n+\tgdb_test \"print /x foo\" \" = 0x234567\"\n+    }\n+}"
    },
    {
      "sha": "b444ef36778a6f1b3cab7025a23d22314971c5af",
      "filename": "gdb/testsuite/lib/dwarf.exp",
      "status": "modified",
      "additions": 196,
      "deletions": 0,
      "changes": 196,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ecfda20dcc4b658560cd4f0178f6c9cd569d4cad/gdb/testsuite/lib/dwarf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ecfda20dcc4b658560cd4f0178f6c9cd569d4cad/gdb/testsuite/lib/dwarf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/dwarf.exp?ref=ecfda20dcc4b658560cd4f0178f6c9cd569d4cad",
      "patch": "@@ -474,6 +474,7 @@ namespace eval Dwarf {\n \n \t    DW_FORM_ref_udata -\n \t    DW_FORM_udata -\n+\t    DW_FORM_loclistx -\n \t    DW_FORM_rnglistx {\n \t\t_op .uleb128 $value\n \t    }\n@@ -1502,6 +1503,201 @@ namespace eval Dwarf {\n \tuplevel $body\n     }\n \n+    # Emit a DWARF .debug_loclists section.\n+    #\n+    # The target address size is based on the current target's address size.\n+    #\n+    # There is one mandatory positional argument, BODY, which must be Tcl code\n+    # that emits the content of the section.  It is evaluated in the caller's\n+    # context.\n+    #\n+    # The following option can be used:\n+    #\n+    #  - -is-64 true|false: Whether to use 64-bit DWARF instead of 32-bit DWARF.\n+    #                       The default is 32-bit.\n+\n+    proc loclists { args } {\n+\tvariable _debug_loclists_addr_size\n+\tvariable _debug_loclists_offset_size\n+\tvariable _debug_loclists_is_64_dwarf\n+\n+\tparse_args {{\"is-64\" \"false\"}}\n+\n+\tif { [llength $args] != 1 } {\n+\t    error \"loclists proc expects one positional argument (body)\"\n+\t}\n+\n+\tlassign $args body\n+\n+\tif [is_64_target] {\n+\t    set _debug_loclists_addr_size 8\n+\t} else {\n+\t    set _debug_loclists_addr_size 4\n+\t}\n+\n+\tif { ${is-64} } {\n+\t    set _debug_loclists_offset_size 8\n+\t    set _debug_loclists_is_64_dwarf true\n+\t} else {\n+\t    set _debug_loclists_offset_size 4\n+\t    set _debug_loclists_is_64_dwarf false\n+\t}\n+\n+\t_section \".debug_loclists\"\n+\n+\t# Count of tables in the section.\n+\tvariable _debug_loclists_table_count 0\n+\n+\t# Compute the label name for list at index LIST_IDX, for the current\n+\t# table.\n+\n+\tproc _compute_list_label { list_idx } {\n+\t    variable _debug_loclists_table_count\n+\n+\t    return \".Lloclists_table_${_debug_loclists_table_count}_list_${list_idx}\"\n+\t}\n+\n+\t# Generate one table (header + offset array + location lists).\n+\t#\n+\t# Accepts one position argument, BODY.  BODY may call the LIST_\n+\t# procedure to generate loclists.\n+\t#\n+\t# The -post-header-label option can be used to define a label just after the\n+\t# header of the table.  This is the label that a DW_AT_loclists_base\n+\t# attribute will usually refer to.\n+\n+\tproc table { args } {\n+\t    variable _debug_loclists_table_count\n+\t    variable _debug_loclists_addr_size\n+\t    variable _debug_loclists_offset_size\n+\t    variable _debug_loclists_is_64_dwarf\n+\n+\t    parse_args {{post-header-label \"\"}}\n+\n+\t    if { [llength $args] != 1 } {\n+\t\terror \"table proc expects one positional argument (body)\"\n+\t    }\n+\n+\t    lassign $args body\n+\n+\t    # Generate one location list.\n+\t    #\n+\t    # BODY may call the various procs defined below to generate list\n+\t    # entries.  They correspond to the location list entry kinds\n+\t    # described in section 2.6.2 of the DWARF 5 spec.\n+\t    #\n+\t    # To define a label pointing to the beginning of the list, use\n+\t    # the conventional way of declaring and defining labels:\n+\t    #\n+\t    #   declare_labels the_list\n+\t    #\n+\t    #   the_list: list_ {\n+\t    #     ...\n+\t    #   }\n+\n+\t    proc list_ { body } {\n+\t\tvariable _debug_loclists_list_count\n+\n+\t\t# Count the location descriptions in this list.\n+\t\tvariable _debug_loclists_locdesc_count 0\n+\n+\t\t# Define a label for this list.  It is used to build the offset\n+\t\t# array later.\n+\t\tset list_label [_compute_list_label $_debug_loclists_list_count]\n+\t\tdefine_label $list_label\n+\n+\t\t# Emit a DW_LLE_start_length entry.\n+\n+\t\tproc start_length { start length locdesc } {\n+\t\t    variable _debug_loclists_is_64_dwarf\n+\t\t    variable _debug_loclists_addr_size\n+\t\t    variable _debug_loclists_offset_size\n+\t\t    variable _debug_loclists_table_count\n+\t\t    variable _debug_loclists_list_count\n+\t\t    variable _debug_loclists_locdesc_count\n+\n+\t\t    _op .byte 0x08 \"DW_LLE_start_length\"\n+\n+\t\t    # Start and end of the address range.\n+\t\t    _op .${_debug_loclists_addr_size}byte $start \"start\"\n+\t\t    _op .uleb128 $length \"length\"\n+\n+\t\t    # Length of location description.\n+\t\t    set locdesc_start_label \".Lloclists_table_${_debug_loclists_table_count}_list_${_debug_loclists_list_count}_locdesc_${_debug_loclists_locdesc_count}_start\"\n+\t\t    set locdesc_end_label \".Lloclists_table_${_debug_loclists_table_count}_list_${_debug_loclists_list_count}_locdesc_${_debug_loclists_locdesc_count}_end\"\n+\t\t    _op .uleb128 \"$locdesc_end_label - $locdesc_start_label\" \"locdesc length\"\n+\n+\t\t    define_label $locdesc_start_label\n+\t\t    set dwarf_version 5\n+\t\t    _location $locdesc $dwarf_version $_debug_loclists_addr_size $_debug_loclists_offset_size\n+\t\t    define_label $locdesc_end_label\n+\n+\t\t    incr _debug_loclists_locdesc_count\n+\t\t}\n+\n+\t\tuplevel $body\n+\n+\t\t# Emit end of list.\n+\t\t_op .byte 0x00 \"DW_LLE_end_of_list\"\n+\n+\t\tincr _debug_loclists_list_count\n+\t    }\n+\n+\t    # Count of lists in the table.\n+\t    variable _debug_loclists_list_count 0\n+\n+\t    # Generate the lists ops first, because we need to know how many\n+\t    # lists there are to generate the header and offset table.\n+\t    set lists_ops [_defer_to_string {\n+\t\tuplevel $body\n+\t    }]\n+\n+\t    set post_unit_len_label \\\n+\t\t[_compute_label \"loclists_table_${_debug_loclists_table_count}_post_unit_len\"]\n+\t    set post_header_label \\\n+\t\t[_compute_label \"loclists_table_${_debug_loclists_table_count}_post_header\"]\n+\t    set table_end_label \\\n+\t\t[_compute_label \"loclists_table_${_debug_loclists_table_count}_end\"]\n+\n+\t    # Emit the table header.\n+\t    if { $_debug_loclists_is_64_dwarf } {\n+\t\t_op .4byte 0xffffffff \"unit length 1/2\"\n+\t\t_op .8byte \"$table_end_label - $post_unit_len_label\" \"unit length 2/2\"\n+\t    } else {\n+\t\t_op .4byte \"$table_end_label - $post_unit_len_label\" \"unit length\"\n+\t    }\n+\n+\t    define_label $post_unit_len_label\n+\n+\t    _op .2byte 5 \"DWARF version\"\n+\t    _op .byte $_debug_loclists_addr_size \"address size\"\n+\t    _op .byte 0 \"segment selector size\"\n+\t    _op .4byte $_debug_loclists_list_count \"offset entry count\"\n+\n+\t    define_label $post_header_label\n+\n+\t    # Define the user post-header label, if provided.\n+\t    if { ${post-header-label} != \"\" } {\n+\t\tdefine_label ${post-header-label}\n+\t    }\n+\n+\t    # Emit the offset array.\n+\t    for {set list_idx 0} {$list_idx < $_debug_loclists_list_count} {incr list_idx} {\n+\t\tset list_label [_compute_list_label $list_idx]\n+\t\t_op .${_debug_loclists_offset_size}byte \"$list_label - $post_header_label\" \"offset of list $list_idx\"\n+\t    }\n+\n+\t    # Emit the actual list data.\n+\t    _emit \"$lists_ops\"\n+\n+\t    define_label $table_end_label\n+\n+\t    incr _debug_loclists_table_count\n+\t}\n+\n+\tuplevel $body\n+    }\n+\n     # Emit a DWARF .debug_line unit.\n     # OPTIONS is a list with an even number of elements containing\n     # option-name and option-value pairs."
    }
  ]
}