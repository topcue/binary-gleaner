{
  "sha": "607b483327fdfc75fb193870b3c4e7445ce3f64d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjA3YjQ4MzMyN2ZkZmM3NWZiMTkzODcwYjNjNGU3NDQ1Y2UzZjY0ZA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-05-19T03:27:15Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-05-19T03:27:15Z"
    },
    "message": "Use bfd_get_filename throughout ld\n\n\t* emultempl/beos.em (sort_by_file_name): Use bfd_get_filename\n\trather than accessing bfd->filename directly.\n\t* emultempl/pe.em (gld_${EMULATION_NAME}_after_open): Likewise.\n\t* emultempl/pep.em (gld_${EMULATION_NAME}_after_open): Likewise.\n\t* emultempl/spuelf.em (embedded_spu_file): Likewise.\n\t* ldlang.c (input_statement_is_archive_path, wild_sort),\n\t(check_excluded_libs): Likewise.\n\t* ldmain.c (add_archive_element): Likewise.\n\t* ldmisc.c (vfinfo): Likewise.\n\t* pe-dll.c (auto_export, generate_edata, pe_create_import_fixup),\n\t(pe_dll_generate_implib, pe_process_import_defs): Likewise.\n\t* plugin.c (plugin_object_p): Likewise.",
    "tree": {
      "sha": "184200d9b5f0b36628520554c4d28476137fe650",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/184200d9b5f0b36628520554c4d28476137fe650"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/607b483327fdfc75fb193870b3c4e7445ce3f64d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/607b483327fdfc75fb193870b3c4e7445ce3f64d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/607b483327fdfc75fb193870b3c4e7445ce3f64d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/607b483327fdfc75fb193870b3c4e7445ce3f64d/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "69f57659c37106c4407a801d89eed4b3e2243074",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/69f57659c37106c4407a801d89eed4b3e2243074",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/69f57659c37106c4407a801d89eed4b3e2243074"
    }
  ],
  "stats": {
    "total": 135,
    "additions": 80,
    "deletions": 55
  },
  "files": [
    {
      "sha": "730517124e919eab11f8fea7a3fdd3b23af0be94",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=607b483327fdfc75fb193870b3c4e7445ce3f64d",
      "patch": "@@ -1,3 +1,18 @@\n+2020-05-19  Alan Modra  <amodra@gmail.com>\n+\n+\t* emultempl/beos.em (sort_by_file_name): Use bfd_get_filename\n+\trather than accessing bfd->filename directly.\n+\t* emultempl/pe.em (gld_${EMULATION_NAME}_after_open): Likewise.\n+\t* emultempl/pep.em (gld_${EMULATION_NAME}_after_open): Likewise.\n+\t* emultempl/spuelf.em (embedded_spu_file): Likewise.\n+\t* ldlang.c (input_statement_is_archive_path, wild_sort),\n+\t(check_excluded_libs): Likewise.\n+\t* ldmain.c (add_archive_element): Likewise.\n+\t* ldmisc.c (vfinfo): Likewise.\n+\t* pe-dll.c (auto_export, generate_edata, pe_create_import_fixup),\n+\t(pe_dll_generate_implib, pe_process_import_defs): Likewise.\n+\t* plugin.c (plugin_object_p): Likewise.\n+\n 2020-05-18  Douglas B Rupp  <rupp@adacore.com>\n \n \t* ldemul.h (ldemul_print_symbol): New."
    },
    {
      "sha": "4da5eeef6d2376eb93269ce243d1dbecf9382660",
      "filename": "ld/emultempl/beos.em",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/emultempl/beos.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/emultempl/beos.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/beos.em?ref=607b483327fdfc75fb193870b3c4e7445ce3f64d",
      "patch": "@@ -400,12 +400,13 @@ sort_by_file_name (const void *a, const void *b)\n   asection *sb = (*rb)->section;\n   int i, a_sec, b_sec;\n \n-  i = filename_cmp (sa->owner->my_archive->filename,\n-\t\t    sb->owner->my_archive->filename);\n+  i = filename_cmp (bfd_get_filename (sa->owner->my_archive),\n+\t\t    bfd_get_filename (sb->owner->my_archive));\n   if (i != 0)\n     return i;\n \n-  i = filename_cmp (sa->owner->filename, sb->owner->filename);\n+  i = filename_cmp (bfd_get_filename (sa->owner),\n+\t\t    bfd_get_filename (sb->owner));\n   if (i != 0)\n     return i;\n   /* the tail idata4/5 are the only ones without relocs to an"
    },
    {
      "sha": "fe65d2b266e5c49ad521a5a49078061e81fef146",
      "filename": "ld/emultempl/pe.em",
      "status": "modified",
      "additions": 11,
      "deletions": 10,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/emultempl/pe.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/emultempl/pe.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pe.em?ref=607b483327fdfc75fb193870b3c4e7445ce3f64d",
      "patch": "@@ -1338,7 +1338,7 @@ gld_${EMULATION_NAME}_after_open (void)\n       bfd_hash_traverse (&link_info.hash->table, pr_sym, NULL);\n \n       for (a = link_info.input_bfds; a; a = a->link.next)\n-\tprintf (\"*%s\\n\",a->filename);\n+\tprintf (\"*%s\\n\", bfd_get_filename (a));\n     }\n #endif\n \n@@ -1599,7 +1599,7 @@ gld_${EMULATION_NAME}_after_open (void)\n \t\t       members, so look for the first element with a .dll\n \t\t       extension, and use that for the remainder of the\n \t\t       comparisons.  */\n-\t\t    pnt = strrchr (is3->the_bfd->filename, '.');\n+\t\t    pnt = strrchr (bfd_get_filename (is3->the_bfd), '.');\n \t\t    if (pnt != NULL && filename_cmp (pnt, \".dll\") == 0)\n \t\t      break;\n \t\t  }\n@@ -1616,12 +1616,12 @@ gld_${EMULATION_NAME}_after_open (void)\n \t\t      {\n \t\t\t/* Skip static members, ie anything with a .obj\n \t\t\t   extension.  */\n-\t\t\tpnt = strrchr (is2->the_bfd->filename, '.');\n+\t\t\tpnt = strrchr (bfd_get_filename (is2->the_bfd), '.');\n \t\t\tif (pnt != NULL && filename_cmp (pnt, \".obj\") == 0)\n \t\t\t  continue;\n \n-\t\t\tif (filename_cmp (is3->the_bfd->filename,\n-\t\t\t\t\t  is2->the_bfd->filename))\n+\t\t\tif (filename_cmp (bfd_get_filename (is3->the_bfd),\n+\t\t\t\t\t  bfd_get_filename (is2->the_bfd)))\n \t\t\t  {\n \t\t\t    is_ms_arch = 0;\n \t\t\t    break;\n@@ -1633,7 +1633,7 @@ gld_${EMULATION_NAME}_after_open (void)\n \t    /* This fragment might have come from an .obj file in a Microsoft\n \t       import, and not an actual import record. If this is the case,\n \t       then leave the filename alone.  */\n-\t    pnt = strrchr (is->the_bfd->filename, '.');\n+\t    pnt = strrchr (bfd_get_filename (is->the_bfd), '.');\n \n \t    if (is_ms_arch && (filename_cmp (pnt, \".dll\") == 0))\n \t      {\n@@ -1655,11 +1655,10 @@ gld_${EMULATION_NAME}_after_open (void)\n \t\telse /* sentinel */\n \t\t  seq = 'c';\n \n-\n \t\t/* PR 25993: It is possible that is->the_bfd-filename == is->filename.\n \t\t   In which case calling bfd_set_filename on one will free the memory\n \t\t   pointed to by the other.  */\n-\t\tif (is->filename == is->the_bfd->filename)\n+\t\tif (is->filename == bfd_get_filename (is->the_bfd))\n \t\t  {\n \t\t    new_name = xmalloc (strlen (is->filename) + 3);\n \t\t    sprintf (new_name, \"%s.%c\", is->filename, seq);\n@@ -1668,8 +1667,10 @@ gld_${EMULATION_NAME}_after_open (void)\n \t\t  }\n \t\telse\n \t\t  {\n-\t\t    new_name = xmalloc (strlen (is->the_bfd->filename) + 3);\n-\t\t    sprintf (new_name, \"%s.%c\", is->the_bfd->filename, seq);\n+\t\t    new_name\n+\t\t      = xmalloc (strlen (bfd_get_filename (is->the_bfd)) + 3);\n+\t\t    sprintf (new_name, \"%s.%c\",\n+\t\t\t     bfd_get_filename (is->the_bfd), seq);\n \t\t    bfd_set_filename (is->the_bfd, new_name);\n \n \t\t    new_name = xmalloc (strlen (is->filename) + 3);"
    },
    {
      "sha": "699b86501c55a325d8348420dd34817f41364341",
      "filename": "ld/emultempl/pep.em",
      "status": "modified",
      "additions": 11,
      "deletions": 9,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/emultempl/pep.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/emultempl/pep.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/pep.em?ref=607b483327fdfc75fb193870b3c4e7445ce3f64d",
      "patch": "@@ -1327,7 +1327,7 @@ gld_${EMULATION_NAME}_after_open (void)\n       bfd_hash_traverse (&link_info.hash->table, pr_sym, NULL);\n \n       for (a = link_info.input_bfds; a; a = a->link.next)\n-\tprintf (\"*%s\\n\",a->filename);\n+\tprintf (\"*%s\\n\", bfd_get_filename (a));\n     }\n #endif\n \n@@ -1567,7 +1567,7 @@ gld_${EMULATION_NAME}_after_open (void)\n \t\t       members, so look for the first element with a .dll\n \t\t       extension, and use that for the remainder of the\n \t\t       comparisons.  */\n-\t\t    pnt = strrchr (is3->the_bfd->filename, '.');\n+\t\t    pnt = strrchr (bfd_get_filename (is3->the_bfd), '.');\n \t\t    if (pnt != NULL && filename_cmp (pnt, \".dll\") == 0)\n \t\t      break;\n \t\t  }\n@@ -1584,12 +1584,12 @@ gld_${EMULATION_NAME}_after_open (void)\n \t\t      {\n \t\t\t/* Skip static members, ie anything with a .obj\n \t\t\t   extension.  */\n-\t\t\tpnt = strrchr (is2->the_bfd->filename, '.');\n+\t\t\tpnt = strrchr (bfd_get_filename (is2->the_bfd), '.');\n \t\t\tif (pnt != NULL && filename_cmp (pnt, \".obj\") == 0)\n \t\t\t  continue;\n \n-\t\t\tif (filename_cmp (is3->the_bfd->filename,\n-\t\t\t\t\t  is2->the_bfd->filename))\n+\t\t\tif (filename_cmp (bfd_get_filename (is3->the_bfd),\n+\t\t\t\t\t  bfd_get_filename (is2->the_bfd)))\n \t\t\t  {\n \t\t\t    is_ms_arch = 0;\n \t\t\t    break;\n@@ -1601,7 +1601,7 @@ gld_${EMULATION_NAME}_after_open (void)\n \t    /* This fragment might have come from an .obj file in a Microsoft\n \t       import, and not an actual import record. If this is the case,\n \t       then leave the filename alone.  */\n-\t    pnt = strrchr (is->the_bfd->filename, '.');\n+\t    pnt = strrchr (bfd_get_filename (is->the_bfd), '.');\n \n \t    if (is_ms_arch && (filename_cmp (pnt, \".dll\") == 0))\n \t      {\n@@ -1626,7 +1626,7 @@ gld_${EMULATION_NAME}_after_open (void)\n \t\t/* PR 25993: It is possible that is->the_bfd-filename == is->filename.\n \t\t   In which case calling bfd_set_filename on one will free the memory\n \t\t   pointed to by the other.  */\n-\t\tif (is->filename == is->the_bfd->filename)\n+\t\tif (is->filename == bfd_get_filename (is->the_bfd))\n \t\t  {\n \t\t    new_name = xmalloc (strlen (is->filename) + 3);\n \t\t    sprintf (new_name, \"%s.%c\", is->filename, seq);\n@@ -1635,8 +1635,10 @@ gld_${EMULATION_NAME}_after_open (void)\n \t\t  }\n \t\telse\n \t\t  {\n-\t\t    new_name = xmalloc (strlen (is->the_bfd->filename) + 3);\n-\t\t    sprintf (new_name, \"%s.%c\", is->the_bfd->filename, seq);\n+\t\t    new_name\n+\t\t      = xmalloc (strlen (bfd_get_filename (is->the_bfd)) + 3);\n+\t\t    sprintf (new_name, \"%s.%c\",\n+\t\t\t     bfd_get_filename (is->the_bfd), seq);\n \t\t    bfd_set_filename (is->the_bfd, new_name);\n \n \t\t    new_name = xmalloc (strlen (is->filename) + 3);"
    },
    {
      "sha": "56beb84f99c0045c3a39dbc0485176d05f477e2b",
      "filename": "ld/emultempl/spuelf.em",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/emultempl/spuelf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/emultempl/spuelf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/spuelf.em?ref=607b483327fdfc75fb193870b3c4e7445ce3f64d",
      "patch": "@@ -500,7 +500,7 @@ embedded_spu_file (lang_input_statement_type *entry, const char *flags)\n     return FALSE;\n \n   /* Use the filename as the symbol marking the program handle struct.  */\n-  sym = base_name (entry->the_bfd->filename);\n+  sym = base_name (bfd_get_filename (entry->the_bfd));\n \n   handle = xstrdup (sym);\n   for (p = handle; *p; ++p)\n@@ -532,7 +532,7 @@ embedded_spu_file (lang_input_statement_type *entry, const char *flags)\n   cmd[0] = EMBEDSPU;\n   cmd[1] = flags;\n   cmd[2] = handle;\n-  cmd[3] = entry->the_bfd->filename;\n+  cmd[3] = bfd_get_filename (entry->the_bfd);\n   cmd[4] = oname;\n   cmd[5] = NULL;\n   if (verbose)"
    },
    {
      "sha": "3d653d460d0a69812b10a175282852a19fbcc10b",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=607b483327fdfc75fb193870b3c4e7445ce3f64d",
      "patch": "@@ -232,7 +232,7 @@ input_statement_is_archive_path (const char *file_spec, char *sep,\n \n       if (sep != file_spec)\n \t{\n-\t  const char *aname = f->the_bfd->my_archive->filename;\n+\t  const char *aname = bfd_get_filename (f->the_bfd->my_archive);\n \t  *sep = 0;\n \t  match = name_match (file_spec, aname) == 0;\n \t  *sep = link_info.path_separator;\n@@ -294,7 +294,7 @@ walk_wild_file_in_exclude_list (struct name_list *exclude_list,\n       else if (file->the_bfd != NULL\n \t       && file->the_bfd->my_archive != NULL\n \t       && name_match (list_tmp->name,\n-\t\t\t      file->the_bfd->my_archive->filename) == 0)\n+\t\t\t      bfd_get_filename (file->the_bfd->my_archive)) == 0)\n \treturn TRUE;\n     }\n \n@@ -2776,7 +2776,7 @@ wild_sort (lang_wild_statement_type *wild,\n \t    }\n \t  else\n \t    {\n-\t      ln = ls->section->owner->filename;\n+\t      ln = bfd_get_filename (ls->section->owner);\n \t      la = FALSE;\n \t    }\n \n@@ -2791,7 +2791,7 @@ wild_sort (lang_wild_statement_type *wild,\n \t      if (fa)\n \t\tfn = file->filename;\n \t      if (la)\n-\t\tln = ls->section->owner->filename;\n+\t\tln = bfd_get_filename (ls->section->owner);\n \n \t      i = filename_cmp (fn, ln);\n \t      if (i > 0)\n@@ -2986,7 +2986,7 @@ check_excluded_libs (bfd *abfd)\n   while (lib)\n     {\n       int len = strlen (lib->name);\n-      const char *filename = lbasename (abfd->filename);\n+      const char *filename = lbasename (bfd_get_filename (abfd));\n \n       if (strcmp (lib->name, \"ALL\") == 0)\n \t{"
    },
    {
      "sha": "04a3f7a5117801ca7fa6ec35757966bdeaa01017",
      "filename": "ld/ldmain.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/ldmain.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/ldmain.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldmain.c?ref=607b483327fdfc75fb193870b3c4e7445ce3f64d",
      "patch": "@@ -815,8 +815,8 @@ add_archive_element (struct bfd_link_info *info,\n   input = (lang_input_statement_type *)\n       xcalloc (1, sizeof (lang_input_statement_type));\n   input->header.type = lang_input_statement_enum;\n-  input->filename = abfd->filename;\n-  input->local_sym_name = abfd->filename;\n+  input->filename = bfd_get_filename (abfd);\n+  input->local_sym_name = bfd_get_filename (abfd);\n   input->the_bfd = abfd;\n \n   parent = bfd_usrdata (abfd->my_archive);"
    },
    {
      "sha": "cc090a5101033d3929a9bb1904d8745e4d3acadf",
      "filename": "ld/ldmisc.c",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/ldmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/ldmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldmisc.c?ref=607b483327fdfc75fb193870b3c4e7445ce3f64d",
      "patch": "@@ -456,10 +456,11 @@ vfinfo (FILE *fp, const char *fmt, va_list ap, bfd_boolean is_warning)\n \t\t    fprintf (fp, \"%s generated\", program_name);\n \t\t  else if (abfd->my_archive != NULL\n \t\t\t   && !bfd_is_thin_archive (abfd->my_archive))\n-\t\t    fprintf (fp, \"%s(%s)\", abfd->my_archive->filename,\n-\t\t\t     abfd->filename);\n+\t\t    fprintf (fp, \"%s(%s)\",\n+\t\t\t     bfd_get_filename (abfd->my_archive),\n+\t\t\t     bfd_get_filename (abfd));\n \t\t  else\n-\t\t    fprintf (fp, \"%s\", abfd->filename);\n+\t\t    fprintf (fp, \"%s\", bfd_get_filename (abfd));\n \t\t}\n \t      else if (*fmt == 'I')\n \t\t{\n@@ -472,7 +473,8 @@ vfinfo (FILE *fp, const char *fmt, va_list ap, bfd_boolean is_warning)\n \t\t  if (i->the_bfd != NULL\n \t\t      && i->the_bfd->my_archive != NULL\n \t\t      && !bfd_is_thin_archive (i->the_bfd->my_archive))\n-\t\t    fprintf (fp, \"(%s)%s\", i->the_bfd->my_archive->filename,\n+\t\t    fprintf (fp, \"(%s)%s\",\n+\t\t\t     bfd_get_filename (i->the_bfd->my_archive),\n \t\t\t     i->local_sym_name);\n \t\t  else\n \t\t    fprintf (fp, \"%s\", i->filename);"
    },
    {
      "sha": "60504293f35878e0518185e2495db6c70777aa8e",
      "filename": "ld/pe-dll.c",
      "status": "modified",
      "additions": 21,
      "deletions": 17,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/pe-dll.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/pe-dll.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/pe-dll.c?ref=607b483327fdfc75fb193870b3c4e7445ce3f64d",
      "patch": "@@ -560,7 +560,7 @@ auto_export (bfd *abfd, def_file *d, const char *n)\n   const char * libname = NULL;\n \n   if (abfd && abfd->my_archive)\n-    libname = lbasename (abfd->my_archive->filename);\n+    libname = lbasename (bfd_get_filename (abfd->my_archive));\n \n   key.name = key.its_name = (char *) n;\n \n@@ -594,7 +594,7 @@ auto_export (bfd *abfd, def_file *d, const char *n)\n \n       /* Next, exclude symbols from certain startup objects.  */\n \n-      if (abfd && (p = lbasename (abfd->filename)))\n+      if (abfd && (p = lbasename (bfd_get_filename (abfd))))\n \t{\n \t  afptr = autofilter_objlist;\n \t  while (afptr->name)\n@@ -655,7 +655,7 @@ auto_export (bfd *abfd, def_file *d, const char *n)\n \t}\n       else if (ex->type == EXCLUDEFORIMPLIB)\n \t{\n-\t  if (filename_cmp (abfd->filename, ex->string) == 0)\n+\t  if (filename_cmp (bfd_get_filename (abfd), ex->string) == 0)\n \t    return 0;\n \t}\n       else if (strcmp (n, ex->string) == 0)\n@@ -1079,7 +1079,7 @@ generate_edata (bfd *abfd, struct bfd_link_info *info ATTRIBUTE_UNUSED)\n     dll_name = pe_def_file->name;\n   else\n     {\n-      dll_name = abfd->filename;\n+      dll_name = bfd_get_filename (abfd);\n \n       for (dlnp = dll_name; *dlnp; dlnp++)\n \tif (*dlnp == '\\\\' || *dlnp == '/' || *dlnp == ':')\n@@ -2767,7 +2767,7 @@ pe_create_import_fixup (arelent *rel, asection *s, bfd_vma addend, char *name,\n       if (!(name_thunk_sym && name_thunk_sym->type == bfd_link_hash_defined))\n \t{\n \t  b = make_singleton_name_thunk (name, link_info.output_bfd);\n-\t  add_bfd_to_link (b, b->filename, &link_info);\n+\t  add_bfd_to_link (b, bfd_get_filename (b), &link_info);\n \n \t  /* If we ever use autoimport, we have to cast text section writable.  */\n \t  config.text_read_only = FALSE;\n@@ -2778,7 +2778,7 @@ pe_create_import_fixup (arelent *rel, asection *s, bfd_vma addend, char *name,\n \t{\n \t  b = make_import_fixup_entry (name, fixup_name, symname,\n \t\t\t\t       link_info.output_bfd);\n-\t  add_bfd_to_link (b, b->filename, &link_info);\n+\t  add_bfd_to_link (b, bfd_get_filename (b), &link_info);\n \t}\n     }\n \n@@ -2794,12 +2794,12 @@ pe_create_import_fixup (arelent *rel, asection *s, bfd_vma addend, char *name,\n \n       b = make_runtime_pseudo_reloc (name, fixup_name, addend, rel->howto->bitsize,\n \t\t\t\t     link_info.output_bfd);\n-      add_bfd_to_link (b, b->filename, &link_info);\n+      add_bfd_to_link (b, bfd_get_filename (b), &link_info);\n \n       if (runtime_pseudo_relocs_created++ == 0)\n \t{\n \t  b = pe_create_runtime_relocator_reference (link_info.output_bfd);\n-\t  add_bfd_to_link (b, b->filename, &link_info);\n+\t  add_bfd_to_link (b, bfd_get_filename (b), &link_info);\n \t}\n     }\n \n@@ -2855,18 +2855,19 @@ pe_dll_generate_implib (def_file *def, const char *impfilename, struct bfd_link_\n \t{\n \t  if (ex->type != EXCLUDEFORIMPLIB)\n \t    continue;\n-\t  found = (filename_cmp (ex->string, ibfd->filename) == 0);\n+\t  found = (filename_cmp (ex->string, bfd_get_filename (ibfd)) == 0);\n \t}\n       /* If it matched, we must open a fresh BFD for it (the original\n \t input BFD is still needed for the DLL's final link) and add\n \t it into the archive member chain.  */\n       if (found)\n \t{\n \t  bfd *newbfd = bfd_openr (ibfd->my_archive\n-\t\t? ibfd->my_archive->filename : ibfd->filename, NULL);\n+\t\t\t\t   ? bfd_get_filename (ibfd->my_archive)\n+\t\t\t\t   : bfd_get_filename (ibfd), NULL);\n \t  if (!newbfd)\n \t    {\n-\t      einfo (_(\"%X%P: bfd_openr %s: %E\\n\"), ibfd->filename);\n+\t      einfo (_(\"%X%P: bfd_openr %s: %E\\n\"), bfd_get_filename (ibfd));\n \t      return;\n \t    }\n \t  if (ibfd->my_archive)\n@@ -2879,19 +2880,22 @@ pe_dll_generate_implib (def_file *def, const char *impfilename, struct bfd_link_\n \t      if (!bfd_check_format_matches (arbfd, bfd_archive, NULL))\n \t\t{\n \t\t  einfo (_(\"%X%P: %s(%s): can't find member in non-archive file\"),\n-\t\t    ibfd->my_archive->filename, ibfd->filename);\n+\t\t\t bfd_get_filename (ibfd->my_archive),\n+\t\t\t bfd_get_filename (ibfd));\n \t\t  return;\n \t\t}\n \t      newbfd = NULL;\n \t      while ((newbfd = bfd_openr_next_archived_file (arbfd, newbfd)) != 0)\n \t\t{\n-\t\t  if (filename_cmp (newbfd->filename, ibfd->filename) == 0)\n+\t\t  if (filename_cmp (bfd_get_filename (newbfd),\n+\t\t\t\t    bfd_get_filename (ibfd)) == 0)\n \t\t    break;\n \t\t}\n \t      if (!newbfd)\n \t\t{\n \t\t  einfo (_(\"%X%P: %s(%s): can't find member in archive\"),\n-\t\t    ibfd->my_archive->filename, ibfd->filename);\n+\t\t\t bfd_get_filename (ibfd->my_archive),\n+\t\t\t bfd_get_filename (ibfd));\n \t\t  return;\n \t\t}\n \t    }\n@@ -3248,7 +3252,7 @@ pe_process_import_defs (bfd *output_bfd, struct bfd_link_info *linfo)\n \t      if (!do_this_dll)\n \t\t{\n \t\t  bfd *ar_head = make_head (output_bfd);\n-\t\t  add_bfd_to_link (ar_head, ar_head->filename, linfo);\n+\t\t  add_bfd_to_link (ar_head, bfd_get_filename (ar_head), linfo);\n \t\t  do_this_dll = 1;\n \t\t}\n \t      exp.internal_name = imp[i].internal_name;\n@@ -3261,13 +3265,13 @@ pe_process_import_defs (bfd *output_bfd, struct bfd_link_info *linfo)\n \t      exp.flag_data = imp[i].data;\n \t      exp.flag_noname = exp.name ? 0 : 1;\n \t      one = make_one (&exp, output_bfd, (! exp.flag_data) && include_jmp_stub);\n-\t      add_bfd_to_link (one, one->filename, linfo);\n+\t      add_bfd_to_link (one, bfd_get_filename (one), linfo);\n \t    }\n \t}\n       if (do_this_dll)\n \t{\n \t  bfd *ar_tail = make_tail (output_bfd);\n-\t  add_bfd_to_link (ar_tail, ar_tail->filename, linfo);\n+\t  add_bfd_to_link (ar_tail, bfd_get_filename (ar_tail), linfo);\n \t}\n \n       free (dll_symname);"
    },
    {
      "sha": "60beacd06276c292312aede9f3c78e301ce5663f",
      "filename": "ld/plugin.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/607b483327fdfc75fb193870b3c4e7445ce3f64d/ld/plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/plugin.c?ref=607b483327fdfc75fb193870b3c4e7445ce3f64d",
      "patch": "@@ -1191,7 +1191,7 @@ plugin_object_p (bfd *ibfd)\n \n   /* We create a dummy BFD, initially empty, to house whatever symbols\n      the plugin may want to add.  */\n-  abfd = plugin_get_ir_dummy_bfd (ibfd->filename, ibfd);\n+  abfd = plugin_get_ir_dummy_bfd (bfd_get_filename (ibfd), ibfd);\n \n   input = bfd_alloc (abfd, sizeof (*input));\n   if (input == NULL)\n@@ -1201,7 +1201,7 @@ plugin_object_p (bfd *ibfd)\n   if (!bfd_plugin_open_input (ibfd, &file))\n     return NULL;\n \n-  if (file.name == ibfd->filename)\n+  if (file.name == bfd_get_filename (ibfd))\n     {\n       /* We must copy filename attached to ibfd if it is not an archive\n \t member since it may be freed by bfd_close below.  */\n@@ -1217,7 +1217,7 @@ plugin_object_p (bfd *ibfd)\n   input->use_mmap = FALSE;\n   input->offset = file.offset;\n   input->filesize = file.filesize;\n-  input->name = plugin_strdup (abfd, ibfd->filename);\n+  input->name = plugin_strdup (abfd, bfd_get_filename (ibfd));\n \n   claimed = 0;\n "
    }
  ]
}