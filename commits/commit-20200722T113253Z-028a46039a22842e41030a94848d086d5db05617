{
  "sha": "028a46039a22842e41030a94848d086d5db05617",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDI4YTQ2MDM5YTIyODQyZTQxMDMwYTk0ODQ4ZDA4NmQ1ZGIwNTYxNw==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-07-22T11:32:53Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-07-22T11:32:53Z"
    },
    "message": "gdbserver: handle running threads in qXfer:threads:read\n\nOn some systems, the gdb.multi/multi-target.exp testcase occasionally\nfails like so:\n\n Running src/gdb/testsuite/gdb.multi/multi-target.exp ...\n FAIL: gdb.multi/multi-target.exp: info-inferiors: multi_process=on: inferior 1: info connections\n FAIL: gdb.multi/multi-target.exp: info-inferiors: multi_process=on: inferior 1: info inferiors\n FAIL: gdb.multi/multi-target.exp: info-inferiors: multi_process=on: inferior 2: info connections\n FAIL: gdb.multi/multi-target.exp: info-inferiors: multi_process=on: inferior 2: info inferiors\n FAIL: gdb.multi/multi-target.exp: info-inferiors: multi_process=on: inferior 3: inferior 3\n ... many more cascading fails.\n\nThe problem starts when the testcase runs an inferior against GDBserver:\n\n (gdb) run\n Starting program: build/gdb/testsuite/outputs/gdb.multi/multi-target/multi-target\n Reading /lib64/ld-linux-x86-64.so.2 from remote target...\n warning: File transfers from remote targets can be slow. Use \"set sysroot\" to access files locally instead.\n Reading /lib64/ld-linux-x86-64.so.2 from remote target...\n Reading /lib64/ld-2.31.so from remote target...\n Reading /lib64/.debug/ld-2.31.so from remote target...\n Reading /usr/lib/debug//lib64/ld-2.31.so from remote target...\n Reading /usr/lib/debug/lib64//ld-2.31.so from remote target...\n Reading target:/usr/lib/debug/lib64//ld-2.31.so from remote target...\n Reading /lib/x86_64-linux-gnu/libpthread.so.0 from remote target...\n Reading /lib/x86_64-linux-gnu/libc.so.6 from remote target...\n Reading /lib/x86_64-linux-gnu/libc-2.31.so from remote target...\n Reading /lib/x86_64-linux-gnu/.debug/libc-2.31.so from remote target...\n Reading /usr/lib/debug//lib/x86_64-linux-gnu/libc-2.31.so from remote target...\n Reading /usr/lib/debug//lib/x86_64-linux-gnu/libc-2.31.so from remote target...\n Remote connection closed\n ...\n\nNote the \"Remote connection closed\" message.  That means GDBserver\nexited abruptly.\n\nI traced it down to the fact that GDB fetches the thread list from\nGDBserver while the main thread of the process is still running.  On\nmy main system where I wrote the testcase, I have not observed the\nfailure because it is slow enough that the thread stops before\nGDBserver fetches the thread list in the problem scenario which I'll\ndescribe below.\n\nWith some --remote-debug logging from GDBserver side, we see the last\npackets before the connection closes:\n\n ...\n getpkt (\"vCont;c\");  [no ack sent]\n putpkt (\"$OK#9a\"); [noack mode]\n getpkt (\"Tp10f9a.10f9a\");  [no ack sent]\n putpkt (\"$OK#9a\"); [noack mode]\n getpkt (\"Hgp0.0\");  [no ack sent]\n putpkt (\"$OK#9a\"); [noack mode]\n getpkt (\"qXfer:threads:read::0,1000\");  [no ack sent]\n\nNote the vCont;c , which sets the program running, and then a\nqXfer:threads:read packet at the end.\n\nThe problem happens when the thread list refresh (qXfer:threads:read)\nis sent just while the main thread is running and it still hasn't\ninitialized its libpthread id internally.  In that state, the main\nthread's lwp will remain with the thread_known flag clear.  See in\nfind_one_thread:\n\n  /* If the new thread ID is zero, a final thread ID will be available\n     later.  Do not enable thread debugging yet.  */\n  if (ti.ti_tid == 0)\n    return 0;\n\nNow, back in server.cc, to handle the qXfer:threads:read, we reach\nhandle_qxfer_threads -> handle_qxfer_threads_proper, and the latter\nthen calls handle_qxfer_threads_worker for each known thread.  In\nhandle_qxfer_threads_worker, we call target_thread_handle.  This ends\nup in thread_db_thread_handle, here:\n\n  if (!lwp->thread_known && !find_one_thread (thread->id))\n    return false;\n\nSince the thread ID isn't known yet, we call find_one_thread.  This\ncalls into libthread_db.so, which accesses memory.  Because the\ncurrent thread is running, that fails and we throw an error, here:\n\n  /* Get information about this thread.  */\n  err = thread_db->td_ta_map_lwp2thr_p (thread_db->thread_agent, lwpid, &th);\n  if (err != TD_OK)\n    error (\"Cannot get thread handle for LWP %d: %s\",\n\t   lwpid, thread_db_err_str (err));\n\nThe current design is that whenever GDB-facing packets/requests need\nto accesses memory, server.cc is supposed to prepare the target for\nthe access.  See gdb_read_memory / gdb_write_memory.  This preparation\nmeans pausing threads if in non-stop mode (someday we could lift this\nrequirement, but we will still need to pause to access registers or do\nother related ptrace accesses like PTRACE_GET_THREAD_AREA).  Note that\nthe multi-target.exp testcase forces \"maint set target-non-stop on\".\n\nSo the fix here is to prepare the target to access memory when\nhandling qXfer:threads:read too.\n\ngdbserver/ChangeLog:\n\n\t* inferiors.cc (switch_to_process): New, moved here from\n\tthread-db.cc, and made extern.\n\t* inferiors.h (switch_to_process): Declare.\n\t* server.cc: Include \"gdbsupport/scoped_restore.h\".\n\t(handle_qxfer_threads_proper): Now returns bool.  Prepare to\n\taccess memory around target calls.\n\t(handle_qxfer_threads): Handle errors.\n\t* thread-db.cc (switch_to_process): Moved to inferiors.cc.",
    "tree": {
      "sha": "7acf840acddcdf949b21a1ef47f5d44faa8b2471",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7acf840acddcdf949b21a1ef47f5d44faa8b2471"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/028a46039a22842e41030a94848d086d5db05617",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/028a46039a22842e41030a94848d086d5db05617",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/028a46039a22842e41030a94848d086d5db05617",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/028a46039a22842e41030a94848d086d5db05617/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0e6a3f07f50723d1831291492b96fdf74bcbdc11",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0e6a3f07f50723d1831291492b96fdf74bcbdc11",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0e6a3f07f50723d1831291492b96fdf74bcbdc11"
    }
  ],
  "stats": {
    "total": 81,
    "additions": 68,
    "deletions": 13
  },
  "files": [
    {
      "sha": "f42b5c753a3b7686c5f166f4f6e820ed6d713d15",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/028a46039a22842e41030a94848d086d5db05617/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/028a46039a22842e41030a94848d086d5db05617/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=028a46039a22842e41030a94848d086d5db05617",
      "patch": "@@ -1,3 +1,14 @@\n+2020-07-22  Pedro Alves  <pedro@palves.net>\n+\n+\t* inferiors.cc (switch_to_process): New, moved here from\n+\tthread-db.cc, and made extern.\n+\t* inferiors.h (switch_to_process): Declare.\n+\t* server.cc: Include \"gdbsupport/scoped_restore.h\".\n+\t(handle_qxfer_threads_proper): Now returns bool.  Prepare to\n+\taccess memory around target calls.\n+\t(handle_qxfer_threads): Handle errors.\n+\t* thread-db.cc (switch_to_process): Moved to inferiors.cc.\n+\n 2020-07-21  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* linux-low.cc (stopped_pids): Make static."
    },
    {
      "sha": "861c9f3e338f9e2ad7a0e562e669ceb27adfd8a5",
      "filename": "gdbserver/inferiors.cc",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/028a46039a22842e41030a94848d086d5db05617/gdbserver/inferiors.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/028a46039a22842e41030a94848d086d5db05617/gdbserver/inferiors.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/inferiors.cc?ref=028a46039a22842e41030a94848d086d5db05617",
      "patch": "@@ -223,6 +223,16 @@ switch_to_thread (process_stratum_target *ops, ptid_t ptid)\n   current_thread = find_thread_ptid (ptid);\n }\n \n+/* See inferiors.h.  */\n+\n+void\n+switch_to_process (process_info *proc)\n+{\n+  int pid = pid_of (proc);\n+\n+  current_thread = find_any_thread_of_pid (pid);\n+}\n+\n /* See gdbsupport/common-inferior.h.  */\n \n const char *"
    },
    {
      "sha": "bf2a16f801ecb4adf12ef3e9ac0288a56cb765b0",
      "filename": "gdbserver/inferiors.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/028a46039a22842e41030a94848d086d5db05617/gdbserver/inferiors.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/028a46039a22842e41030a94848d086d5db05617/gdbserver/inferiors.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/inferiors.h?ref=028a46039a22842e41030a94848d086d5db05617",
      "patch": "@@ -138,6 +138,9 @@ struct process_info *find_process_pid (int pid);\n int have_started_inferiors_p (void);\n int have_attached_inferiors_p (void);\n \n+/* Switch to a thread of PROC.  */\n+void switch_to_process (process_info *proc);\n+\n void clear_inferiors (void);\n \n void *thread_target_data (struct thread_info *);"
    },
    {
      "sha": "aadcb9b5d30dc9b89cc99771c556e3a0f8cd64c0",
      "filename": "gdbserver/server.cc",
      "status": "modified",
      "additions": 44,
      "deletions": 5,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/028a46039a22842e41030a94848d086d5db05617/gdbserver/server.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/028a46039a22842e41030a94848d086d5db05617/gdbserver/server.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/server.cc?ref=028a46039a22842e41030a94848d086d5db05617",
      "patch": "@@ -48,6 +48,7 @@\n #include \"gdbsupport/selftest.h\"\n #include \"gdbsupport/scope-exit.h\"\n #include \"gdbsupport/gdb_select.h\"\n+#include \"gdbsupport/scoped_restore.h\"\n \n #define require_running_or_return(BUF)\t\t\\\n   if (!target_running ())\t\t\t\\\n@@ -1678,19 +1679,54 @@ handle_qxfer_threads_worker (thread_info *thread, struct buffer *buffer)\n   buffer_xml_printf (buffer, \"/>\\n\");\n }\n \n-/* Helper for handle_qxfer_threads.  */\n+/* Helper for handle_qxfer_threads.  Return true on success, false\n+   otherwise.  */\n \n-static void\n+static bool\n handle_qxfer_threads_proper (struct buffer *buffer)\n {\n+  client_state &cs = get_client_state ();\n+\n+  scoped_restore save_current_thread\n+    = make_scoped_restore (&current_thread);\n+  scoped_restore save_current_general_thread\n+    = make_scoped_restore (&cs.general_thread);\n+\n   buffer_grow_str (buffer, \"<threads>\\n\");\n \n-  for_each_thread ([&] (thread_info *thread)\n+  process_info *error_proc = find_process ([&] (process_info *process)\n     {\n-      handle_qxfer_threads_worker (thread, buffer);\n+      /* The target may need to access memory and registers (e.g. via\n+\t libthread_db) to fetch thread properties.  Prepare for memory\n+\t access here, so that we potentially pause threads just once\n+\t for all accesses.  Note that even if someday we stop needing\n+\t to pause threads to access memory, we will need to be able to\n+\t access registers, or other ptrace accesses like\n+\t PTRACE_GET_THREAD_AREA.  */\n+\n+      /* Need to switch to each process in turn, because\n+\t prepare_to_access_memory prepares for an access in the\n+\t current process pointed to by general_thread.  */\n+      switch_to_process (process);\n+      cs.general_thread = current_thread->id;\n+\n+      int res = prepare_to_access_memory ();\n+      if (res == 0)\n+\t{\n+\t  for_each_thread (process->pid, [&] (thread_info *thread)\n+\t    {\n+\t      handle_qxfer_threads_worker (thread, buffer);\n+\t    });\n+\n+\t  done_accessing_memory ();\n+\t  return false;\n+\t}\n+      else\n+\treturn true;\n     });\n \n   buffer_grow_str0 (buffer, \"</threads>\\n\");\n+  return error_proc == nullptr;\n }\n \n /* Handle qXfer:threads:read.  */\n@@ -1719,11 +1755,14 @@ handle_qxfer_threads (const char *annex,\n \n       buffer_init (&buffer);\n \n-      handle_qxfer_threads_proper (&buffer);\n+      bool res = handle_qxfer_threads_proper (&buffer);\n \n       result = buffer_finish (&buffer);\n       result_length = strlen (result);\n       buffer_free (&buffer);\n+\n+      if (!res)\n+\treturn -1;\n     }\n \n   if (offset >= result_length)"
    },
    {
      "sha": "32dc3760dc64f025beae1421d7c6ef727a8ea5a7",
      "filename": "gdbserver/thread-db.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/028a46039a22842e41030a94848d086d5db05617/gdbserver/thread-db.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/028a46039a22842e41030a94848d086d5db05617/gdbserver/thread-db.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/thread-db.cc?ref=028a46039a22842e41030a94848d086d5db05617",
      "patch": "@@ -767,14 +767,6 @@ thread_db_init (void)\n   return 0;\n }\n \n-static void\n-switch_to_process (struct process_info *proc)\n-{\n-  int pid = pid_of (proc);\n-\n-  current_thread = find_any_thread_of_pid (pid);\n-}\n-\n /* Disconnect from libthread_db and free resources.  */\n \n static void"
    }
  ]
}