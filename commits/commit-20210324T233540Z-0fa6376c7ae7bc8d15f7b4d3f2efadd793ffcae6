{
  "sha": "0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGZhNjM3NmM3YWU3YmM4ZDE1ZjdiNGQzZjJlZmFkZDc5M2ZmY2FlNg==",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-01-10T03:18:00Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-03-24T23:35:40Z"
    },
    "message": "gnulib: import gitlog-to-changelog\n\nThis is going to be used to generate ChangeLog files.",
    "tree": {
      "sha": "f0f75ca6c1a70b69566cd6544ec99aebc3847e4d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f0f75ca6c1a70b69566cd6544ec99aebc3847e4d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "328d42d87e97c75d6e52800bfd4bc1bfdfb745d2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/328d42d87e97c75d6e52800bfd4bc1bfdfb745d2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/328d42d87e97c75d6e52800bfd4bc1bfdfb745d2"
    }
  ],
  "stats": {
    "total": 597,
    "additions": 569,
    "deletions": 28
  },
  "files": [
    {
      "sha": "810aa1e62da2af685442e8c0ace241dde980d0ab",
      "filename": "gnulib/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6/gnulib/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6/gnulib/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/ChangeLog?ref=0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6",
      "patch": "@@ -1,3 +1,12 @@\n+2021-03-24  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* update-gnulib.sh (IMPORTED_GNULIB_MODULES): Add gitlog-to-changelog.\n+\t* Makefile.in, configure: Regenerate.\n+\t* import/Makefile.am, import/Makefile.in: Regenerate.\n+\t* import/m4/gnulib-cache.m4: Regenerate.\n+\t* import/m4/gnulib-comp.m4: Regenerate.\n+\t* import/extra/gitlog-to-changelog: New file.\n+\n 2021-02-05  Paul E. Murphy  <murphyp@linux.ibm.com>\n \n \t* update-gnulib.sh (GNULIB_COMMIT_SHA1): Bump to"
    },
    {
      "sha": "d6737ac4d3ee5dd3a621b45aaf22f1fd42a818b6",
      "filename": "gnulib/configure",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6/gnulib/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6/gnulib/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/configure?ref=0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6",
      "patch": "@@ -6726,6 +6726,7 @@ fi\n   # Code from module getrandom:\n   # Code from module gettext-h:\n   # Code from module gettimeofday:\n+  # Code from module gitlog-to-changelog:\n   # Code from module glob:\n   # Code from module glob-h:\n   # Code from module hard-locale:"
    },
    {
      "sha": "a79d6e1e537da201c8f5bca5265f0bab177c6fcd",
      "filename": "gnulib/import/Makefile.am",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6/gnulib/import/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6/gnulib/import/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/import/Makefile.am?ref=0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6",
      "patch": "@@ -43,6 +43,7 @@\n #  frexpl \\\n #  getcwd \\\n #  gettimeofday \\\n+#  gitlog-to-changelog \\\n #  glob \\\n #  inet_ntop \\\n #  inttypes \\\n@@ -738,6 +739,13 @@ EXTRA_libgnu_a_SOURCES += gettimeofday.c\n \n ## end   gnulib module gettimeofday\n \n+## begin gnulib module gitlog-to-changelog\n+\n+\n+EXTRA_DIST += $(top_srcdir)/import/extra/gitlog-to-changelog\n+\n+## end   gnulib module gitlog-to-changelog\n+\n ## begin gnulib module glob\n \n "
    },
    {
      "sha": "f703f362f73b0742000513490131ced0d6123f2b",
      "filename": "gnulib/import/Makefile.in",
      "status": "modified",
      "additions": 31,
      "deletions": 28,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6/gnulib/import/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6/gnulib/import/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/import/Makefile.in?ref=0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6",
      "patch": "@@ -57,6 +57,7 @@\n #  frexpl \\\n #  getcwd \\\n #  gettimeofday \\\n+#  gitlog-to-changelog \\\n #  glob \\\n #  inet_ntop \\\n #  inttypes \\\n@@ -1781,34 +1782,36 @@ EXTRA_DIST = m4/gnulib-cache.m4 alloca.c alloca.in.h arpa_inet.in.h \\\n \tfnmatch.c fnmatch_loop.c fnmatch.c fnmatch.in.h fpucw.h free.c \\\n \tfrexp.c frexp.c frexpl.c fstat.c stat-w32.c stat-w32.h \\\n \tat-func.c fstatat.c getcwd.c getcwd-lgpl.c getdtablesize.c \\\n-\tgetlogin_r.c getrandom.c gettimeofday.c glob.c glob_internal.h \\\n-\tglob_pattern_p.c globfree.c glob-libc.h glob.in.h \\\n-\thard-locale.h inet_ntop.c intprops.h inttypes.in.h isblank.c \\\n-\tfloat+.h isnan.c isnand-nolibm.h isnand.c float+.h isnan.c \\\n-\tisnanl-nolibm.h isnanl.c cdefs.h libc-config.h limits.in.h \\\n-\tlocalcharset.h locale.in.h lstat.c malloc.c malloca.h \\\n-\tmath.in.h lc-charset-dispatch.c lc-charset-dispatch.h \\\n-\tmbrtowc-impl-utf8.h mbrtowc-impl.h mbrtowc.c mbtowc-lock.c \\\n-\tmbtowc-lock.h windows-initguard.h mbsinit.c mbsrtowcs-impl.h \\\n-\tmbsrtowcs-state.c mbsrtowcs.c mbtowc-impl.h mbtowc.c memchr.c \\\n-\tmemchr.valgrind memmem.c memmem.c str-two-way.h mempcpy.c \\\n-\tmemrchr.c mkdir.c mkdtemp.c mkostemp.c msvc-inval.c \\\n-\tmsvc-inval.h msvc-nothrow.c msvc-nothrow.h netinet_in.in.h \\\n-\topen.c openat.c openat.h dirent-private.h opendir.c pathmax.h \\\n-\tpipe.c rawmemchr.c rawmemchr.valgrind dirent-private.h \\\n-\treaddir.c readlink.c realloc.c rename.c dirent-private.h \\\n-\trewinddir.c rmdir.c same-inode.h save-cwd.h \\\n-\tmalloc/scratch_buffer.h scratch_buffer.h setenv.c \\\n-\tsetlocale-lock.c setlocale_null.h windows-initguard.h \\\n-\tsignal.in.h _Noreturn.h arg-nonnull.h c++defs.h warn-on-use.h \\\n-\tstat-w32.c stat-w32.h stat.c stat-time.h stdalign.in.h \\\n-\tstdbool.in.h stddef.in.h stdint.in.h stdio.in.h stdlib.in.h \\\n-\tstrchrnul.c strchrnul.valgrind strdup.c streq.h strerror.c \\\n-\tstrerror-override.c strerror-override.h strerror_r.c \\\n-\tstring.in.h strnlen.c strstr.c str-two-way.h strstr.c \\\n-\tstrtok_r.c sys_random.in.h sys_socket.in.h sys_stat.in.h \\\n-\tsys_time.in.h sys_types.in.h sys_uio.in.h tempname.h time.in.h \\\n-\ttime_r.c unistd.in.h unistd--.h unistd-safer.h unsetenv.c \\\n+\tgetlogin_r.c getrandom.c gettimeofday.c \\\n+\t$(top_srcdir)/import/extra/gitlog-to-changelog glob.c \\\n+\tglob_internal.h glob_pattern_p.c globfree.c glob-libc.h \\\n+\tglob.in.h hard-locale.h inet_ntop.c intprops.h inttypes.in.h \\\n+\tisblank.c float+.h isnan.c isnand-nolibm.h isnand.c float+.h \\\n+\tisnan.c isnanl-nolibm.h isnanl.c cdefs.h libc-config.h \\\n+\tlimits.in.h localcharset.h locale.in.h lstat.c malloc.c \\\n+\tmalloca.h math.in.h lc-charset-dispatch.c \\\n+\tlc-charset-dispatch.h mbrtowc-impl-utf8.h mbrtowc-impl.h \\\n+\tmbrtowc.c mbtowc-lock.c mbtowc-lock.h windows-initguard.h \\\n+\tmbsinit.c mbsrtowcs-impl.h mbsrtowcs-state.c mbsrtowcs.c \\\n+\tmbtowc-impl.h mbtowc.c memchr.c memchr.valgrind memmem.c \\\n+\tmemmem.c str-two-way.h mempcpy.c memrchr.c mkdir.c mkdtemp.c \\\n+\tmkostemp.c msvc-inval.c msvc-inval.h msvc-nothrow.c \\\n+\tmsvc-nothrow.h netinet_in.in.h open.c openat.c openat.h \\\n+\tdirent-private.h opendir.c pathmax.h pipe.c rawmemchr.c \\\n+\trawmemchr.valgrind dirent-private.h readdir.c readlink.c \\\n+\trealloc.c rename.c dirent-private.h rewinddir.c rmdir.c \\\n+\tsame-inode.h save-cwd.h malloc/scratch_buffer.h \\\n+\tscratch_buffer.h setenv.c setlocale-lock.c setlocale_null.h \\\n+\twindows-initguard.h signal.in.h _Noreturn.h arg-nonnull.h \\\n+\tc++defs.h warn-on-use.h stat-w32.c stat-w32.h stat.c \\\n+\tstat-time.h stdalign.in.h stdbool.in.h stddef.in.h stdint.in.h \\\n+\tstdio.in.h stdlib.in.h strchrnul.c strchrnul.valgrind strdup.c \\\n+\tstreq.h strerror.c strerror-override.c strerror-override.h \\\n+\tstrerror_r.c string.in.h strnlen.c strstr.c str-two-way.h \\\n+\tstrstr.c strtok_r.c sys_random.in.h sys_socket.in.h \\\n+\tsys_stat.in.h sys_time.in.h sys_types.in.h sys_uio.in.h \\\n+\ttempname.h time.in.h time_r.c unistd.in.h unistd--.h \\\n+\tunistd-safer.h unsetenv.c \\\n \t$(top_srcdir)/import/extra/update-copyright verify.h \\\n \twchar.in.h wctype.in.h windows-initguard.h windows-mutex.c \\\n \twindows-mutex.h windows-once.c windows-once.h \\"
    },
    {
      "sha": "de76f658d48ec09ccde144baba12e68957954654",
      "filename": "gnulib/import/extra/gitlog-to-changelog",
      "status": "added",
      "additions": 515,
      "deletions": 0,
      "changes": 515,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6/gnulib/import/extra/gitlog-to-changelog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6/gnulib/import/extra/gitlog-to-changelog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/import/extra/gitlog-to-changelog?ref=0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6",
      "patch": "@@ -0,0 +1,515 @@\n+#!/bin/sh\n+#! -*-perl-*-\n+\n+# Convert git log output to ChangeLog format.\n+\n+# Copyright (C) 2008-2021 Free Software Foundation, Inc.\n+#\n+# This program is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n+#\n+# Written by Jim Meyering\n+\n+# This is a prologue that allows to run a perl script as an executable\n+# on systems that are compliant to a POSIX version before POSIX:2017.\n+# On such systems, the usual invocation of an executable through execlp()\n+# or execvp() fails with ENOEXEC if it is a script that does not start\n+# with a #! line.  The script interpreter mentioned in the #! line has\n+# to be /bin/sh, because on GuixSD systems that is the only program that\n+# has a fixed file name.  The second line is essential for perl and is\n+# also useful for editing this file in Emacs.  The next two lines below\n+# are valid code in both sh and perl.  When executed by sh, they re-execute\n+# the script through the perl program found in $PATH.  The '-x' option\n+# is essential as well; without it, perl would re-execute the script\n+# through /bin/sh.  When executed by perl, the next two lines are a no-op.\n+eval 'exec perl -wSx \"$0\" \"$@\"'\n+     if 0;\n+\n+my $VERSION = '2020-04-04 15:07'; # UTC\n+# The definition above must lie within the first 8 lines in order\n+# for the Emacs time-stamp write hook (at end) to update it.\n+# If you change this file with Emacs, please let the write hook\n+# do its job.  Otherwise, update this string manually.\n+\n+use strict;\n+use warnings;\n+use Getopt::Long;\n+use POSIX qw(strftime);\n+\n+(my $ME = $0) =~ s|.*/||;\n+\n+# use File::Coda; # https://meyering.net/code/Coda/\n+END {\n+  defined fileno STDOUT or return;\n+  close STDOUT and return;\n+  warn \"$ME: failed to close standard output: $!\\n\";\n+  $? ||= 1;\n+}\n+\n+sub usage ($)\n+{\n+  my ($exit_code) = @_;\n+  my $STREAM = ($exit_code == 0 ? *STDOUT : *STDERR);\n+  if ($exit_code != 0)\n+    {\n+      print $STREAM \"Try '$ME --help' for more information.\\n\";\n+    }\n+  else\n+    {\n+      print $STREAM <<EOF;\n+Usage: $ME [OPTIONS] [ARGS]\n+\n+Convert git log output to ChangeLog format.  If present, any ARGS\n+are passed to \"git log\".  To avoid ARGS being parsed as options to\n+$ME, they may be preceded by '--'.\n+\n+OPTIONS:\n+\n+   --amend=FILE FILE maps from an SHA1 to perl code (i.e., s/old/new/) that\n+                  makes a change to SHA1's commit log text or metadata.\n+   --append-dot append a dot to the first line of each commit message if\n+                  there is no other punctuation or blank at the end.\n+   --no-cluster never cluster commit messages under the same date/author\n+                  header; the default is to cluster adjacent commit messages\n+                  if their headers are the same and neither commit message\n+                  contains multiple paragraphs.\n+   --srcdir=DIR the root of the source tree, from which the .git/\n+                  directory can be derived.\n+   --since=DATE convert only the logs since DATE;\n+                  the default is to convert all log entries.\n+   --until=DATE convert only the logs older than DATE.\n+   --ignore-matching=PAT ignore commit messages whose first lines match PAT.\n+   --ignore-line=PAT ignore lines of commit messages that match PAT.\n+   --format=FMT set format string for commit subject and body;\n+                  see 'man git-log' for the list of format metacharacters;\n+                  the default is '%s%n%b%n'\n+   --strip-tab  remove one additional leading TAB from commit message lines.\n+   --strip-cherry-pick  remove data inserted by \"git cherry-pick\";\n+                  this includes the \"cherry picked from commit ...\" line,\n+                  and the possible final \"Conflicts:\" paragraph.\n+   --help       display this help and exit\n+   --version    output version information and exit\n+\n+EXAMPLE:\n+\n+  $ME --since=2008-01-01 > ChangeLog\n+  $ME -- -n 5 foo > last-5-commits-to-branch-foo\n+\n+SPECIAL SYNTAX:\n+\n+The following types of strings are interpreted specially when they appear\n+at the beginning of a log message line.  They are not copied to the output.\n+\n+  Copyright-paperwork-exempt: Yes\n+    Append the \"(tiny change)\" notation to the usual \"date name email\"\n+    ChangeLog header to mark a change that does not require a copyright\n+    assignment.\n+  Co-authored-by: Joe User <user\\@example.com>\n+    List the specified name and email address on a second\n+    ChangeLog header, denoting a co-author.\n+  Signed-off-by: Joe User <user\\@example.com>\n+    These lines are simply elided.\n+\n+In a FILE specified via --amend, comment lines (starting with \"#\") are ignored.\n+FILE must consist of <SHA,CODE+> pairs where SHA is a 40-byte SHA1 (alone on\n+a line) referring to a commit in the current project, and CODE refers to one\n+or more consecutive lines of Perl code.  Pairs must be separated by one or\n+more blank line.\n+\n+Here is sample input for use with --amend=FILE, from coreutils:\n+\n+3a169f4c5d9159283548178668d2fae6fced3030\n+# fix typo in title:\n+s/all tile types/all file types/\n+\n+1379ed974f1fa39b12e2ffab18b3f7a607082202\n+# Due to a bug in vc-dwim, I mis-attributed a patch by Paul to myself.\n+# Change the author to be Paul.  Note the escaped \"@\":\n+s,Jim .*>,Paul Eggert <eggert\\\\\\@cs.ucla.edu>,\n+\n+EOF\n+    }\n+  exit $exit_code;\n+}\n+\n+# If the string $S is a well-behaved file name, simply return it.\n+# If it contains white space, quotes, etc., quote it, and return the new string.\n+sub shell_quote($)\n+{\n+  my ($s) = @_;\n+  if ($s =~ m![^\\w+/.,-]!)\n+    {\n+      # Convert each single quote to '\\''\n+      $s =~ s/\\'/\\'\\\\\\'\\'/g;\n+      # Then single quote the string.\n+      $s = \"'$s'\";\n+    }\n+  return $s;\n+}\n+\n+sub quoted_cmd(@)\n+{\n+  return join (' ', map {shell_quote $_} @_);\n+}\n+\n+# Parse file F.\n+# Comment lines (starting with \"#\") are ignored.\n+# F must consist of <SHA,CODE+> pairs where SHA is a 40-byte SHA1\n+# (alone on a line) referring to a commit in the current project, and\n+# CODE refers to one or more consecutive lines of Perl code.\n+# Pairs must be separated by one or more blank line.\n+sub parse_amend_file($)\n+{\n+  my ($f) = @_;\n+\n+  open F, '<', $f\n+    or die \"$ME: $f: failed to open for reading: $!\\n\";\n+\n+  my $fail;\n+  my $h = {};\n+  my $in_code = 0;\n+  my $sha;\n+  while (defined (my $line = <F>))\n+    {\n+      $line =~ /^\\#/\n+        and next;\n+      chomp $line;\n+      $line eq ''\n+        and $in_code = 0, next;\n+\n+      if (!$in_code)\n+        {\n+          $line =~ /^([[:xdigit:]]{40})$/\n+            or (warn \"$ME: $f:$.: invalid line; expected an SHA1\\n\"),\n+              $fail = 1, next;\n+          $sha = lc $1;\n+          $in_code = 1;\n+          exists $h->{$sha}\n+            and (warn \"$ME: $f:$.: duplicate SHA1\\n\"),\n+              $fail = 1, next;\n+        }\n+      else\n+        {\n+          $h->{$sha} ||= '';\n+          $h->{$sha} .= \"$line\\n\";\n+        }\n+    }\n+  close F;\n+\n+  $fail\n+    and exit 1;\n+\n+  return $h;\n+}\n+\n+# git_dir_option $SRCDIR\n+#\n+# From $SRCDIR, the --git-dir option to pass to git (none if $SRCDIR\n+# is undef).  Return as a list (0 or 1 element).\n+sub git_dir_option($)\n+{\n+  my ($srcdir) = @_;\n+  my @res = ();\n+  if (defined $srcdir)\n+    {\n+      my $qdir = shell_quote $srcdir;\n+      my $cmd = \"cd $qdir && git rev-parse --show-toplevel\";\n+      my $qcmd = shell_quote $cmd;\n+      my $git_dir = qx($cmd);\n+      defined $git_dir\n+        or die \"$ME: cannot run $qcmd: $!\\n\";\n+      $? == 0\n+        or die \"$ME: $qcmd had unexpected exit code or signal ($?)\\n\";\n+      chomp $git_dir;\n+      push @res, \"--git-dir=$git_dir/.git\";\n+    }\n+  @res;\n+}\n+\n+{\n+  my $since_date;\n+  my $until_date;\n+  my $format_string = '%s%n%b%n';\n+  my $amend_file;\n+  my $append_dot = 0;\n+  my $cluster = 1;\n+  my $ignore_matching;\n+  my $ignore_line;\n+  my $strip_tab = 0;\n+  my $strip_cherry_pick = 0;\n+  my $srcdir;\n+  GetOptions\n+    (\n+     help => sub { usage 0 },\n+     version => sub { print \"$ME version $VERSION\\n\"; exit },\n+     'since=s' => \\$since_date,\n+     'until=s' => \\$until_date,\n+     'format=s' => \\$format_string,\n+     'amend=s' => \\$amend_file,\n+     'append-dot' => \\$append_dot,\n+     'cluster!' => \\$cluster,\n+     'ignore-matching=s' => \\$ignore_matching,\n+     'ignore-line=s' => \\$ignore_line,\n+     'strip-tab' => \\$strip_tab,\n+     'strip-cherry-pick' => \\$strip_cherry_pick,\n+     'srcdir=s' => \\$srcdir,\n+    ) or usage 1;\n+\n+  defined $since_date\n+    and unshift @ARGV, \"--since=$since_date\";\n+  defined $until_date\n+    and unshift @ARGV, \"--until=$until_date\";\n+\n+  # This is a hash that maps an SHA1 to perl code (i.e., s/old/new/)\n+  # that makes a correction in the log or attribution of that commit.\n+  my $amend_code = defined $amend_file ? parse_amend_file $amend_file : {};\n+\n+  my @cmd = ('git',\n+             git_dir_option $srcdir,\n+             qw(log --log-size),\n+             '--pretty=format:%H:%ct  %an  <%ae>%n%n'.$format_string, @ARGV);\n+  open PIPE, '-|', @cmd\n+    or die (\"$ME: failed to run '\". quoted_cmd (@cmd) .\"': $!\\n\"\n+            . \"(Is your Git too old?  Version 1.5.1 or later is required.)\\n\");\n+\n+  my $prev_multi_paragraph;\n+  my $prev_date_line = '';\n+  my @prev_coauthors = ();\n+  my @skipshas = ();\n+  while (1)\n+    {\n+      defined (my $in = <PIPE>)\n+        or last;\n+      $in =~ /^log size (\\d+)$/\n+        or die \"$ME:$.: Invalid line (expected log size):\\n$in\";\n+      my $log_nbytes = $1;\n+\n+      my $log;\n+      my $n_read = read PIPE, $log, $log_nbytes;\n+      $n_read == $log_nbytes\n+        or die \"$ME:$.: unexpected EOF\\n\";\n+\n+      # Extract leading hash.\n+      my ($sha, $rest) = split ':', $log, 2;\n+      defined $sha\n+        or die \"$ME:$.: malformed log entry\\n\";\n+      $sha =~ /^[[:xdigit:]]{40}$/\n+        or die \"$ME:$.: invalid SHA1: $sha\\n\";\n+\n+      my $skipflag = 0;\n+      if (@skipshas)\n+        {\n+          foreach(@skipshas)\n+            {\n+              if ($sha =~ /^$_/)\n+                {\n+                  $skipflag = $_;\n+                  last;\n+                }\n+            }\n+        }\n+\n+      # If this commit's log requires any transformation, do it now.\n+      my $code = $amend_code->{$sha};\n+      if (defined $code)\n+        {\n+          eval 'use Safe';\n+          my $s = new Safe;\n+          # Put the unpreprocessed entry into \"$_\".\n+          $_ = $rest;\n+\n+          # Let $code operate on it, safely.\n+          my $r = $s->reval(\"$code\")\n+            or die \"$ME:$.:$sha: failed to eval \\\"$code\\\":\\n$@\\n\";\n+\n+          # Note that we've used this entry.\n+          delete $amend_code->{$sha};\n+\n+          # Update $rest upon success.\n+          $rest = $_;\n+        }\n+\n+      # Remove lines inserted by \"git cherry-pick\".\n+      if ($strip_cherry_pick)\n+        {\n+          $rest =~ s/^\\s*Conflicts:\\n.*//sm;\n+          $rest =~ s/^\\s*\\(cherry picked from commit [\\da-f]+\\)\\n//m;\n+        }\n+\n+      my @line = split /[ \\t]*\\n/, $rest;\n+      my $author_line = shift @line;\n+      defined $author_line\n+        or die \"$ME:$.: unexpected EOF\\n\";\n+      $author_line =~ /^(\\d+)  (.*>)$/\n+        or die \"$ME:$.: Invalid line \"\n+          . \"(expected date/author/email):\\n$author_line\\n\";\n+\n+      # Format 'Copyright-paperwork-exempt: Yes' as a standard ChangeLog\n+      # `(tiny change)' annotation.\n+      my $tiny = (grep (/^(?:Copyright-paperwork-exempt|Tiny-change):\\s+[Yy]es$/, @line)\n+                  ? '  (tiny change)' : '');\n+\n+      my $date_line = sprintf \"%s  %s$tiny\\n\",\n+        strftime (\"%Y-%m-%d\", localtime ($1)), $2;\n+\n+      my @coauthors = grep /^Co-authored-by:.*$/, @line;\n+      # Omit meta-data lines we've already interpreted.\n+      @line = grep !/^(?:Signed-off-by:[ ].*>$\n+                       |Co-authored-by:[ ]\n+                       |Copyright-paperwork-exempt:[ ]\n+                       |Tiny-change:[ ]\n+                       )/x, @line;\n+\n+      # Remove leading and trailing blank lines.\n+      if (@line)\n+        {\n+          while ($line[0] =~ /^\\s*$/) { shift @line; }\n+          while ($line[$#line] =~ /^\\s*$/) { pop @line; }\n+        }\n+\n+      # Handle Emacs gitmerge.el \"skipped\" commits.\n+      # Yes, this should be controlled by an option.  So sue me.\n+      if ( grep /^(; )?Merge from /, @line )\n+      {\n+          my $found = 0;\n+          foreach (@line)\n+          {\n+              if (grep /^The following commit.*skipped:$/, $_)\n+              {\n+                  $found = 1;\n+                  ## Reset at each merge to reduce chance of false matches.\n+                  @skipshas = ();\n+                  next;\n+              }\n+              if ($found && $_ =~ /^([[:xdigit:]]{7,}) [^ ]/)\n+              {\n+                  push ( @skipshas, $1 );\n+              }\n+          }\n+      }\n+\n+      # Ignore commits that match the --ignore-matching pattern, if specified.\n+      if (defined $ignore_matching && @line && $line[0] =~ /$ignore_matching/)\n+        {\n+          $skipflag = 1;\n+        }\n+      elsif ($skipflag)\n+        {\n+          ## Perhaps only warn if a pattern matches more than once?\n+          warn \"$ME: warning: skipping $sha due to $skipflag\\n\";\n+        }\n+\n+      if (! $skipflag)\n+        {\n+          if (defined $ignore_line && @line)\n+            {\n+              @line = grep ! /$ignore_line/, @line;\n+              while ($line[$#line] =~ /^\\s*$/) { pop @line; }\n+            }\n+\n+          # Record whether there are two or more paragraphs.\n+          my $multi_paragraph = grep /^\\s*$/, @line;\n+\n+          # Format 'Co-authored-by: A U Thor <email@example.com>' lines in\n+          # standard multi-author ChangeLog format.\n+          for (@coauthors)\n+            {\n+              s/^Co-authored-by:\\s*/\\t    /;\n+              s/\\s*</  </;\n+\n+              /<.*?@.*\\..*>/\n+                or warn \"$ME: warning: missing email address for \"\n+                  . substr ($_, 5) . \"\\n\";\n+            }\n+\n+          # If clustering of commit messages has been disabled, if this header\n+          # would be different from the previous date/name/etc. header,\n+          # or if this or the previous entry consists of two or more paragraphs,\n+          # then print the header.\n+          if ( ! $cluster\n+              || $date_line ne $prev_date_line\n+              || \"@coauthors\" ne \"@prev_coauthors\"\n+              || $multi_paragraph\n+              || $prev_multi_paragraph)\n+            {\n+              $prev_date_line eq ''\n+                or print \"\\n\";\n+              print $date_line;\n+              @coauthors\n+                and print join (\"\\n\", @coauthors), \"\\n\";\n+            }\n+          $prev_date_line = $date_line;\n+          @prev_coauthors = @coauthors;\n+          $prev_multi_paragraph = $multi_paragraph;\n+\n+          # If there were any lines\n+          if (@line == 0)\n+            {\n+              warn \"$ME: warning: empty commit message:\\n  $date_line\\n\";\n+            }\n+          else\n+            {\n+              if ($append_dot)\n+                {\n+                  # If the first line of the message has enough room, then\n+                  if (length $line[0] < 72)\n+                    {\n+                      # append a dot if there is no other punctuation or blank\n+                      # at the end.\n+                      $line[0] =~ /[[:punct:]\\s]$/\n+                        or $line[0] .= '.';\n+                    }\n+                }\n+\n+              # Remove one additional leading TAB from each line.\n+              $strip_tab\n+                and map { s/^\\t// } @line;\n+\n+              # Prefix each non-empty line with a TAB.\n+              @line = map { length $_ ? \"\\t$_\" : '' } @line;\n+\n+              print \"\\n\", join (\"\\n\", @line), \"\\n\";\n+            }\n+        }\n+\n+      defined ($in = <PIPE>)\n+        or last;\n+      $in ne \"\\n\"\n+        and die \"$ME:$.: unexpected line:\\n$in\";\n+    }\n+\n+  close PIPE\n+    or die \"$ME: error closing pipe from \" . quoted_cmd (@cmd) . \"\\n\";\n+  # FIXME-someday: include $PROCESS_STATUS in the diagnostic\n+\n+  # Complain about any unused entry in the --amend=F specified file.\n+  my $fail = 0;\n+  foreach my $sha (keys %$amend_code)\n+    {\n+      warn \"$ME:$amend_file: unused entry: $sha\\n\";\n+      $fail = 1;\n+    }\n+\n+  exit $fail;\n+}\n+\n+# Local Variables:\n+# mode: perl\n+# indent-tabs-mode: nil\n+# eval: (add-hook 'before-save-hook 'time-stamp)\n+# time-stamp-line-limit: 50\n+# time-stamp-start: \"my $VERSION = '\"\n+# time-stamp-format: \"%:y-%02m-%02d %02H:%02M\"\n+# time-stamp-time-zone: \"UTC0\"\n+# time-stamp-end: \"'; # UTC\"\n+# End:"
    },
    {
      "sha": "00dcf6040596364aca2effba75b25407cf462dd1",
      "filename": "gnulib/import/m4/gnulib-cache.m4",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6/gnulib/import/m4/gnulib-cache.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6/gnulib/import/m4/gnulib-cache.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/import/m4/gnulib-cache.m4?ref=0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6",
      "patch": "@@ -48,6 +48,7 @@\n #  frexpl \\\n #  getcwd \\\n #  gettimeofday \\\n+#  gitlog-to-changelog \\\n #  glob \\\n #  inet_ntop \\\n #  inttypes \\\n@@ -89,6 +90,7 @@ gl_MODULES([\n   frexpl\n   getcwd\n   gettimeofday\n+  gitlog-to-changelog\n   glob\n   inet_ntop\n   inttypes"
    },
    {
      "sha": "c3926e0d06db67295472ef92f6ea6d52d3e165d1",
      "filename": "gnulib/import/m4/gnulib-comp.m4",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6/gnulib/import/m4/gnulib-comp.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6/gnulib/import/m4/gnulib-comp.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/import/m4/gnulib-comp.m4?ref=0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6",
      "patch": "@@ -107,6 +107,7 @@ AC_DEFUN([gl_EARLY],\n   # Code from module getrandom:\n   # Code from module gettext-h:\n   # Code from module gettimeofday:\n+  # Code from module gitlog-to-changelog:\n   # Code from module glob:\n   # Code from module glob-h:\n   # Code from module hard-locale:\n@@ -923,6 +924,7 @@ AC_DEFUN([gltests_LIBSOURCES], [\n # This macro records the list of files which have been installed by\n # gnulib-tool and may be removed by future gnulib-tool invocations.\n AC_DEFUN([gl_FILE_LIST], [\n+  build-aux/gitlog-to-changelog\n   build-aux/update-copyright\n   lib/_Noreturn.h\n   lib/alloca.c"
    },
    {
      "sha": "c734829126f4b50a6c21bfc05cc5652d24393e0f",
      "filename": "gnulib/update-gnulib.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6/gnulib/update-gnulib.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6/gnulib/update-gnulib.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gnulib/update-gnulib.sh?ref=0fa6376c7ae7bc8d15f7b4d3f2efadd793ffcae6",
      "patch": "@@ -40,6 +40,7 @@ IMPORTED_GNULIB_MODULES=\"\\\n     frexpl \\\n     getcwd \\\n     gettimeofday \\\n+    gitlog-to-changelog \\\n     glob \\\n     inet_ntop\n     inttypes \\"
    }
  ]
}