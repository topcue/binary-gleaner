{
  "sha": "4504a6346777d544a144683bd2a534b686fbac41",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDUwNGE2MzQ2Nzc3ZDU0NGExNDQ2ODNiZDJhNTM0YjY4NmZiYWM0MQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-06-16T06:55:20Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-06-16T06:55:20Z"
    },
    "message": "gas: fix overflow diagnostics\n\nWhile the logic in fixup_segment() so far was off by 1 for fixups\ndealing with quantities without known signedness, thus failing to report\nan overflow when e.g. a byte-sized resulting value is -0x100, the logic\nin emit_expr_with_reloc() reported an overflow even on large negative\nvalues when the respective positive ones would not be warned\nabout, and when fixup_segment() wouldn't do so either. Such diagnostics\nall ought to follow a similar pattern of what value range is acceptable.\n(If expressions' X_unsigned was reliably set, emit_expr_with_reloc()'s\nchecking might make sense to tighten based on that flag.)\n\nNote that with commit 80aab57939a0 (\"Changes to let cons handle bignums\nlike general expressions\") having added handling of nbytes >\nsizeof(valueT) in the O_constant case, converting to O_big, the setting\nto zero of \"hibit\" had become dead. With \"hibit\" no longer used, this\ncode now gets dropped altogether. But additionally a respective know()\ngets inserted.",
    "tree": {
      "sha": "65f18b24a6c7df5caaf8eec8bd7ba25f7f466875",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/65f18b24a6c7df5caaf8eec8bd7ba25f7f466875"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4504a6346777d544a144683bd2a534b686fbac41",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4504a6346777d544a144683bd2a534b686fbac41",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4504a6346777d544a144683bd2a534b686fbac41",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4504a6346777d544a144683bd2a534b686fbac41/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b80d4475804d5f3c4e9d996229e1569b7b3c8426",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b80d4475804d5f3c4e9d996229e1569b7b3c8426",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b80d4475804d5f3c4e9d996229e1569b7b3c8426"
    }
  ],
  "stats": {
    "total": 82,
    "additions": 72,
    "deletions": 10
  },
  "files": [
    {
      "sha": "ebbf27f0b6635d95c26339f37e6c97141729fb1a",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4504a6346777d544a144683bd2a534b686fbac41/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4504a6346777d544a144683bd2a534b686fbac41/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=4504a6346777d544a144683bd2a534b686fbac41",
      "patch": "@@ -1,3 +1,13 @@\n+2021-06-16  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* read.c (emit_expr_with_reloc): Adjust overflow check. Drop\n+\thibit local variable.\n+\t* write.c (fixup_segment): Differentiate signed and non-signed\n+\trelocs in overflow check.\n+\t* testsuite/gas/all/overflow.s,\n+\ttestsuite/gas/all/overflow.l: New.\n+\t* testsuite/gas/all/gas.exp: Run new test.\n+\n 2021-06-15  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (md_show_usage): Split ELF and PE/COFF parts"
    },
    {
      "sha": "db1011b6392be85939c53842b9fbaacb27f86a72",
      "filename": "gas/read.c",
      "status": "modified",
      "additions": 2,
      "deletions": 9,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4504a6346777d544a144683bd2a534b686fbac41/gas/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4504a6346777d544a144683bd2a534b686fbac41/gas/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/read.c?ref=4504a6346777d544a144683bd2a534b686fbac41",
      "patch": "@@ -4505,24 +4505,19 @@ emit_expr_with_reloc (expressionS *exp,\n       valueT get;\n       valueT use;\n       valueT mask;\n-      valueT hibit;\n       valueT unmask;\n \n       /* JF << of >= number of bits in the object is undefined.  In\n \t particular SPARC (Sun 4) has problems.  */\n       if (nbytes >= sizeof (valueT))\n \t{\n+\t  know (nbytes == sizeof (valueT));\n \t  mask = 0;\n-\t  if (nbytes > sizeof (valueT))\n-\t    hibit = 0;\n-\t  else\n-\t    hibit = (valueT) 1 << (nbytes * BITS_PER_CHAR - 1);\n \t}\n       else\n \t{\n \t  /* Don't store these bits.  */\n \t  mask = ~(valueT) 0 << (BITS_PER_CHAR * nbytes);\n-\t  hibit = (valueT) 1 << (nbytes * BITS_PER_CHAR - 1);\n \t}\n \n       unmask = ~mask;\t\t/* Do store these bits.  */\n@@ -4534,9 +4529,7 @@ emit_expr_with_reloc (expressionS *exp,\n \n       get = exp->X_add_number;\n       use = get & unmask;\n-      if ((get & mask) != 0\n-\t  && ((get & mask) != mask\n-\t      || (get & hibit) == 0))\n+      if ((get & mask) != 0 && (-get & mask) != 0)\n \t{\n \t  /* Leading bits contain both 0s & 1s.  */\n \t  as_warn (_(\"value 0x%\" BFD_VMA_FMT \"x truncated to 0x%\" BFD_VMA_FMT \"x\"),"
    },
    {
      "sha": "389634f616546a0fc4dea85649320e42625bbb2d",
      "filename": "gas/testsuite/gas/all/gas.exp",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4504a6346777d544a144683bd2a534b686fbac41/gas/testsuite/gas/all/gas.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4504a6346777d544a144683bd2a534b686fbac41/gas/testsuite/gas/all/gas.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/all/gas.exp?ref=4504a6346777d544a144683bd2a534b686fbac41",
      "patch": "@@ -372,6 +372,27 @@ switch -glob $target_triplet {\n     }\n }\n \n+# Various targets use too custom handling to be able to sensibly create\n+# common expecations for this test.  Also .equ works differently on some\n+# targets.\n+if {    ![istarget avr-*-*]\n+     && ![istarget bfin-*-*]\n+     && ![istarget cris*-*-*]\n+     && ![istarget dlx-*-*]\n+     && ![istarget hppa*-*-*]\n+     && ![istarget m68k-*-*]\n+     && ![istarget nios2-*-*]\n+     && ![istarget pj-*-*]\n+     && ![istarget sh*-*-*]\n+     && ![istarget *c4x-*-*]\n+     && ![istarget *c54x-*-*]\n+     && ![istarget *c6x-*-*]\n+     && ![istarget z80-*-*] } then {\n+    # Some further targets' custom handling fails to recognize the overflows.\n+    setup_xfail \"crx-*-*\" \"h8300-*-*\" \"mcore-*-*\" \"mn10200-*-*\" \"mn10300-*-*\" \"msp430-*-*\" \"ns32k-*-*\"\n+    run_list_test \"overflow\"\n+}\n+\n if {  ([istarget \"i*86-*-*pe*\"] && ![istarget \"i*86-*-openbsd*\"]) \\\n     || [istarget \"i*86-*-cygwin*\"] \\\n     || [istarget \"i*86-*-mingw32*\"] } {"
    },
    {
      "sha": "96309570ef0e75c6e4ee785ef9e4767e18272296",
      "filename": "gas/testsuite/gas/all/overflow.l",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4504a6346777d544a144683bd2a534b686fbac41/gas/testsuite/gas/all/overflow.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4504a6346777d544a144683bd2a534b686fbac41/gas/testsuite/gas/all/overflow.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/all/overflow.l?ref=4504a6346777d544a144683bd2a534b686fbac41",
      "patch": "@@ -0,0 +1,9 @@\n+.*: Assembler messages:\n+.*:5: Warning: .* (0x)?100 truncated to (0x)?0\n+.*:6: Warning: .* (0x)?101 truncated to (0x)?1\n+.*:11: Warning: .* (0x)?f+00 truncated to (0x)?0\n+.*:12: Warning: .* (0x)?f+eff truncated to (0x)?ff\n+.*:17: Error: .* (256|(0x)?100) too large .*\n+.*:18: Error: .* (257|(0x)?101) too large .*\n+.*:23: Error: .* (0x)?f+00 too large .*\n+.*:24: Error: .* (0x)?f+eff too large .*"
    },
    {
      "sha": "879f93abe39d584dfcf685453c159da62edb9991",
      "filename": "gas/testsuite/gas/all/overflow.s",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4504a6346777d544a144683bd2a534b686fbac41/gas/testsuite/gas/all/overflow.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4504a6346777d544a144683bd2a534b686fbac41/gas/testsuite/gas/all/overflow.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/all/overflow.s?ref=4504a6346777d544a144683bd2a534b686fbac41",
      "patch": "@@ -0,0 +1,26 @@\n+\t.data\n+\t.dc.b +0x80\n+\t.dc.b +0x81\n+\t.dc.b +0xff\n+\t.dc.b +0x100\n+\t.dc.b +0x101\n+\n+\t.dc.b -0x80\n+\t.dc.b -0x81\n+\t.dc.b -0xff\n+\t.dc.b -0x100\n+\t.dc.b -0x101\n+\n+\t.dc.b zero+0x80\n+\t.dc.b zero+0x81\n+\t.dc.b zero+0xff\n+\t.dc.b zero+0x100\n+\t.dc.b zero+0x101\n+\n+\t.dc.b zero-0x80\n+\t.dc.b zero-0x81\n+\t.dc.b zero-0xff\n+\t.dc.b zero-0x100\n+\t.dc.b zero-0x101\n+\n+\t.equ zero, 0"
    },
    {
      "sha": "7dc78b7fe19f42c172d386dd62583c6078b5dd28",
      "filename": "gas/write.c",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4504a6346777d544a144683bd2a534b686fbac41/gas/write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4504a6346777d544a144683bd2a534b686fbac41/gas/write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/write.c?ref=4504a6346777d544a144683bd2a534b686fbac41",
      "patch": "@@ -1107,7 +1107,10 @@ fixup_segment (fixS *fixP, segT this_segment)\n \t      mask = 0;\n \t      mask--;\t\t/* Set all bits to one.  */\n \t      mask <<= fixP->fx_size * 8 - (fixP->fx_signed ? 1 : 0);\n-\t      if ((add_number & mask) != 0 && (add_number & mask) != mask)\n+\t      if ((add_number & mask) != 0\n+\t\t  && (fixP->fx_signed\n+\t\t      ? (add_number & mask) != mask\n+\t\t      : (-add_number & mask) != 0))\n \t\t{\n \t\t  char buf[50], buf2[50];\n \t\t  bfd_sprintf_vma (stdoutput, buf, fragP->fr_address + fixP->fx_where);"
    }
  ]
}