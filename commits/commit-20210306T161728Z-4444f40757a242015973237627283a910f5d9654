{
  "sha": "4444f40757a242015973237627283a910f5d9654",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDQ0NGY0MDc1N2EyNDIwMTU5NzMyMzc2MjcyODNhOTEwZjVkOTY1NA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-06T16:16:59Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-06T16:17:28Z"
    },
    "message": "Micro-optimize abbrev reading and storage\n\nCurrently, and abbrev_info points to a separately allocated array of\nattr_abbrev objects.  This array is constructed in a temporary vector,\nthen copied to the abbrev table's obstack.\n\nThis patch changes abbrev_info to use the struct hack to store the\nobjects directly, and changes abbrev_table::read to avoid an extra\ncopy when allocating, using the \"growing objects\" capability of\nobstacks.\n\nThis saves a bit of space, and also perhaps a little time.\n\n2021-03-06  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (read_attribute): Make 'abbrev' const.\n\t* dwarf2/abbrev.c (abbrev_table::alloc_abbrev): Remove.\n\t(abbrev_table::read): Update.\n\t* dwarf2/abbrev.h (struct attr_abbrev): Move earlier.\n\t(struct abbrev_info): Reformat.\n\t<attrs>: Now an array.\n\t(struct abbrev_table) <alloc_abbrev>: Remove.",
    "tree": {
      "sha": "2eff136ada394093d03b997cd3c69069e8c36466",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2eff136ada394093d03b997cd3c69069e8c36466"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4444f40757a242015973237627283a910f5d9654",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4444f40757a242015973237627283a910f5d9654",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4444f40757a242015973237627283a910f5d9654",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4444f40757a242015973237627283a910f5d9654/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8c0546e928b557f10cb5aba2a91f3ecee660029d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8c0546e928b557f10cb5aba2a91f3ecee660029d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8c0546e928b557f10cb5aba2a91f3ecee660029d"
    }
  ],
  "stats": {
    "total": 128,
    "additions": 61,
    "deletions": 67
  },
  "files": [
    {
      "sha": "91b7a68894f712a7691f29f7bdbe53659acd1c81",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4444f40757a242015973237627283a910f5d9654/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4444f40757a242015973237627283a910f5d9654/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4444f40757a242015973237627283a910f5d9654",
      "patch": "@@ -1,3 +1,13 @@\n+2021-03-06  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (read_attribute): Make 'abbrev' const.\n+\t* dwarf2/abbrev.c (abbrev_table::alloc_abbrev): Remove.\n+\t(abbrev_table::read): Update.\n+\t* dwarf2/abbrev.h (struct attr_abbrev): Move earlier.\n+\t(struct abbrev_info): Reformat.\n+\t<attrs>: Now an array.\n+\t(struct abbrev_table) <alloc_abbrev>: Remove.\n+\n 2021-03-06  Weimin Pan  <weimin.pan@oracle.com>\n \n \t* ctfread.c (ctf_psymtab_add_enums): New function."
    },
    {
      "sha": "9ece708a1ac0fd80df7992fa2a5baf84dcba678b",
      "filename": "gdb/dwarf2/abbrev.c",
      "status": "modified",
      "additions": 26,
      "deletions": 45,
      "changes": 71,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4444f40757a242015973237627283a910f5d9654/gdb/dwarf2/abbrev.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4444f40757a242015973237627283a910f5d9654/gdb/dwarf2/abbrev.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/abbrev.c?ref=4444f40757a242015973237627283a910f5d9654",
      "patch": "@@ -65,19 +65,6 @@ abbrev_table::abbrev_table (sect_offset off)\n {\n }\n \n-/* Allocate space for a struct abbrev_info object in ABBREV_TABLE.  */\n-\n-struct abbrev_info *\n-abbrev_table::alloc_abbrev ()\n-{\n-  struct abbrev_info *abbrev;\n-\n-  abbrev = XOBNEW (&m_abbrev_obstack, struct abbrev_info);\n-  memset (abbrev, 0, sizeof (struct abbrev_info));\n-\n-  return abbrev;\n-}\n-\n /* Add an abbreviation to the table.  */\n \n void\n@@ -97,11 +84,10 @@ abbrev_table::read (struct dwarf2_section_info *section,\n   bfd *abfd = section->get_bfd_owner ();\n   const gdb_byte *abbrev_ptr;\n   struct abbrev_info *cur_abbrev;\n-  unsigned int abbrev_number, bytes_read, abbrev_name;\n-  unsigned int abbrev_form;\n-  std::vector<struct attr_abbrev> cur_attrs;\n+  unsigned int abbrev_number, bytes_read;\n \n   abbrev_table_up abbrev_table (new struct abbrev_table (sect_off));\n+  struct obstack *obstack = &abbrev_table->m_abbrev_obstack;\n \n   /* Caller must ensure this.  */\n   gdb_assert (section->readin);\n@@ -112,56 +98,51 @@ abbrev_table::read (struct dwarf2_section_info *section,\n   /* Loop until we reach an abbrev number of 0.  */\n   while (abbrev_number)\n     {\n-      cur_attrs.clear ();\n-      cur_abbrev = abbrev_table->alloc_abbrev ();\n+      /* Start without any attrs.  */\n+      obstack_blank (obstack, offsetof (abbrev_info, attrs));\n+      cur_abbrev = (struct abbrev_info *) obstack_base (obstack);\n \n-      /* read in abbrev header */\n+      /* Read in abbrev header.  */\n       cur_abbrev->number = abbrev_number;\n       cur_abbrev->tag\n-\t= (enum dwarf_tag) read_unsigned_leb128 (abfd, abbrev_ptr, &bytes_read);\n+\t= (enum dwarf_tag) read_unsigned_leb128 (abfd, abbrev_ptr,\n+\t\t\t\t\t\t &bytes_read);\n       abbrev_ptr += bytes_read;\n       cur_abbrev->has_children = read_1_byte (abfd, abbrev_ptr);\n       abbrev_ptr += 1;\n \n-      /* now read in declarations */\n+      /* Now read in declarations.  */\n+      int num_attrs = 0;\n       for (;;)\n \t{\n-\t  LONGEST implicit_const;\n+\t  struct attr_abbrev cur_attr;\n \n-\t  abbrev_name = read_unsigned_leb128 (abfd, abbrev_ptr, &bytes_read);\n+\t  cur_attr.name\n+\t    = (enum dwarf_attribute) read_unsigned_leb128 (abfd, abbrev_ptr,\n+\t\t\t\t\t\t\t   &bytes_read);\n \t  abbrev_ptr += bytes_read;\n-\t  abbrev_form = read_unsigned_leb128 (abfd, abbrev_ptr, &bytes_read);\n+\t  cur_attr.form\n+\t    = (enum dwarf_form) read_unsigned_leb128 (abfd, abbrev_ptr,\n+\t\t\t\t\t\t      &bytes_read);\n \t  abbrev_ptr += bytes_read;\n-\t  if (abbrev_form == DW_FORM_implicit_const)\n+\t  if (cur_attr.form == DW_FORM_implicit_const)\n \t    {\n-\t      implicit_const = read_signed_leb128 (abfd, abbrev_ptr,\n-\t\t\t\t\t\t   &bytes_read);\n+\t      cur_attr.implicit_const = read_signed_leb128 (abfd, abbrev_ptr,\n+\t\t\t\t\t\t\t    &bytes_read);\n \t      abbrev_ptr += bytes_read;\n \t    }\n \t  else\n-\t    {\n-\t      /* Initialize it due to a false compiler warning.  */\n-\t      implicit_const = -1;\n-\t    }\n+\t    cur_attr.implicit_const = -1;\n \n-\t  if (abbrev_name == 0)\n+\t  if (cur_attr.name == 0)\n \t    break;\n \n-\t  cur_attrs.emplace_back ();\n-\t  struct attr_abbrev &cur_attr = cur_attrs.back ();\n-\t  cur_attr.name = (enum dwarf_attribute) abbrev_name;\n-\t  cur_attr.form = (enum dwarf_form) abbrev_form;\n-\t  cur_attr.implicit_const = implicit_const;\n+\t  ++num_attrs;\n+\t  obstack_grow (obstack, &cur_attr, sizeof (cur_attr));\n \t}\n \n-      cur_abbrev->num_attrs = cur_attrs.size ();\n-      cur_abbrev->attrs =\n-\tXOBNEWVEC (&abbrev_table->m_abbrev_obstack, struct attr_abbrev,\n-\t\t   cur_abbrev->num_attrs);\n-      if (!cur_attrs.empty ())\n-\tmemcpy (cur_abbrev->attrs, cur_attrs.data (),\n-\t\tcur_abbrev->num_attrs * sizeof (struct attr_abbrev));\n-\n+      cur_abbrev = (struct abbrev_info *) obstack_finish (obstack);\n+      cur_abbrev->num_attrs = num_attrs;\n       abbrev_table->add_abbrev (cur_abbrev);\n \n       /* Get next abbreviation."
    },
    {
      "sha": "e1d8b80619b48efeed5201a7838662a29c6ce30f",
      "filename": "gdb/dwarf2/abbrev.h",
      "status": "modified",
      "additions": 22,
      "deletions": 20,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4444f40757a242015973237627283a910f5d9654/gdb/dwarf2/abbrev.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4444f40757a242015973237627283a910f5d9654/gdb/dwarf2/abbrev.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/abbrev.h?ref=4444f40757a242015973237627283a910f5d9654",
      "patch": "@@ -29,24 +29,30 @@\n \n #include \"hashtab.h\"\n \n-/* This data structure holds the information of an abbrev.  */\n-struct abbrev_info\n-  {\n-    unsigned int number;\t/* number identifying abbrev */\n-    enum dwarf_tag tag;\t\t/* dwarf tag */\n-    unsigned short has_children;\t\t/* boolean */\n-    unsigned short num_attrs;\t/* number of attributes */\n-    struct attr_abbrev *attrs;\t/* an array of attribute descriptions */\n-  };\n-\n struct attr_abbrev\n-  {\n-    ENUM_BITFIELD(dwarf_attribute) name : 16;\n-    ENUM_BITFIELD(dwarf_form) form : 16;\n+{\n+  ENUM_BITFIELD(dwarf_attribute) name : 16;\n+  ENUM_BITFIELD(dwarf_form) form : 16;\n \n-    /* It is valid only if FORM is DW_FORM_implicit_const.  */\n-    LONGEST implicit_const;\n-  };\n+  /* It is valid only if FORM is DW_FORM_implicit_const.  */\n+  LONGEST implicit_const;\n+};\n+\n+/* This data structure holds the information of an abbrev.  */\n+struct abbrev_info\n+{\n+  /* Number identifying abbrev.  */\n+  unsigned int number;\n+  /* DWARF tag.  */\n+  enum dwarf_tag tag;\n+  /* True if the DIE has children.  */\n+  unsigned short has_children;\n+  /* Number of attributes.  */\n+  unsigned short num_attrs;\n+  /* An array of attribute descriptions, allocated using the struct\n+     hack.  */\n+  struct attr_abbrev attrs[1];\n+};\n \n struct abbrev_table;\n typedef std::unique_ptr<struct abbrev_table> abbrev_table_up;\n@@ -85,10 +91,6 @@ struct abbrev_table\n \n   DISABLE_COPY_AND_ASSIGN (abbrev_table);\n \n-  /* Allocate space for a struct abbrev_info object in\n-     ABBREV_TABLE.  */\n-  struct abbrev_info *alloc_abbrev ();\n-\n   /* Add an abbreviation to the table.  */\n   void add_abbrev (struct abbrev_info *abbrev);\n "
    },
    {
      "sha": "f129ea65978d46ece4212d5ff009e3712b7931f8",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4444f40757a242015973237627283a910f5d9654/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4444f40757a242015973237627283a910f5d9654/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=4444f40757a242015973237627283a910f5d9654",
      "patch": "@@ -1340,7 +1340,8 @@ static const struct cu_partial_die_info find_partial_die (sect_offset, int,\n \t\t\t\t\t\t\t  struct dwarf2_cu *);\n \n static const gdb_byte *read_attribute (const struct die_reader_specs *,\n-\t\t\t\t       struct attribute *, struct attr_abbrev *,\n+\t\t\t\t       struct attribute *,\n+\t\t\t\t       const struct attr_abbrev *,\n \t\t\t\t       const gdb_byte *);\n \n static void read_attribute_reprocess (const struct die_reader_specs *reader,\n@@ -20836,7 +20837,7 @@ read_attribute_value (const struct die_reader_specs *reader,\n \n static const gdb_byte *\n read_attribute (const struct die_reader_specs *reader,\n-\t\tstruct attribute *attr, struct attr_abbrev *abbrev,\n+\t\tstruct attribute *attr, const struct attr_abbrev *abbrev,\n \t\tconst gdb_byte *info_ptr)\n {\n   attr->name = abbrev->name;"
    }
  ]
}