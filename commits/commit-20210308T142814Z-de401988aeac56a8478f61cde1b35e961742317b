{
  "sha": "de401988aeac56a8478f61cde1b35e961742317b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGU0MDE5ODhhZWFjNTZhODQ3OGY2MWNkZTFiMzVlOTYxNzQyMzE3Yg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:14Z"
    },
    "message": "Implement dumping\n\nThis patch implements the dumping methods for tuple_holding_operation.\nA number of overloads are used.  Note that no default case is given.\nThis approach makes it simple to detect when a new overload is needed\n-- compilation will fail.  (There is an example of this in a later\npatch in the series.)\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expprint.c (expr::dump_for_expression): New functions.\n\t* expop.h (dump_for_expression): New overloads.\n\t(tuple_holding_operation::dump, tuple_holding_operation::do_dump):\n\tUpdate.",
    "tree": {
      "sha": "5025ecd1df35aae4520e8d6da3bf8e840762792d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5025ecd1df35aae4520e8d6da3bf8e840762792d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/de401988aeac56a8478f61cde1b35e961742317b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/de401988aeac56a8478f61cde1b35e961742317b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/de401988aeac56a8478f61cde1b35e961742317b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/de401988aeac56a8478f61cde1b35e961742317b/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e2803273a078950d0895de245cdc5375f362a8c5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2803273a078950d0895de245cdc5375f362a8c5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e2803273a078950d0895de245cdc5375f362a8c5"
    }
  ],
  "stats": {
    "total": 186,
    "additions": 185,
    "deletions": 1
  },
  "files": [
    {
      "sha": "94ce991895723d9258c9b2542d78b5e0115971f9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/de401988aeac56a8478f61cde1b35e961742317b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/de401988aeac56a8478f61cde1b35e961742317b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=de401988aeac56a8478f61cde1b35e961742317b",
      "patch": "@@ -1,3 +1,10 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expprint.c (expr::dump_for_expression): New functions.\n+\t* expop.h (dump_for_expression): New overloads.\n+\t(tuple_holding_operation::dump, tuple_holding_operation::do_dump):\n+\tUpdate.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expression.h (expr::operation): New class."
    },
    {
      "sha": "97848fd5aa21704eee6793fbcce37d9006671fa6",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 54,
      "deletions": 1,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/de401988aeac56a8478f61cde1b35e961742317b/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/de401988aeac56a8478f61cde1b35e961742317b/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=de401988aeac56a8478f61cde1b35e961742317b",
      "patch": "@@ -133,6 +133,57 @@ check_objfile (const std::pair<S, T> &item, struct objfile *objfile)\n \t  || check_objfile (item.second, objfile));\n }\n \n+static inline void\n+dump_for_expression (struct ui_file *stream, int depth,\n+\t\t     const operation_up &op)\n+{\n+  op->dump (stream, depth);\n+}\n+\n+extern void dump_for_expression (struct ui_file *stream, int depth,\n+\t\t\t\t enum exp_opcode op);\n+extern void dump_for_expression (struct ui_file *stream, int depth,\n+\t\t\t\t const std::string &str);\n+extern void dump_for_expression (struct ui_file *stream, int depth,\n+\t\t\t\t struct type *type);\n+extern void dump_for_expression (struct ui_file *stream, int depth,\n+\t\t\t\t CORE_ADDR addr);\n+extern void dump_for_expression (struct ui_file *stream, int depth,\n+\t\t\t\t internalvar *ivar);\n+extern void dump_for_expression (struct ui_file *stream, int depth,\n+\t\t\t\t symbol *sym);\n+extern void dump_for_expression (struct ui_file *stream, int depth,\n+\t\t\t\t minimal_symbol *msym);\n+extern void dump_for_expression (struct ui_file *stream, int depth,\n+\t\t\t\t const block *bl);\n+extern void dump_for_expression (struct ui_file *stream, int depth,\n+\t\t\t\t type_instance_flags flags);\n+extern void dump_for_expression (struct ui_file *stream, int depth,\n+\t\t\t\t enum c_string_type_values flags);\n+extern void dump_for_expression (struct ui_file *stream, int depth,\n+\t\t\t\t enum range_flag flags);\n+extern void dump_for_expression (struct ui_file *stream, int depth,\n+\t\t\t\t objfile *objf);\n+\n+template<typename T>\n+void\n+dump_for_expression (struct ui_file *stream, int depth,\n+\t\t     const std::vector<T> &vals)\n+{\n+  fprintf_filtered (stream, _(\"%*sVector:\\n\"), depth, \"\");\n+  for (auto &item : vals)\n+    dump_for_expression (stream, depth + 1, item);\n+}\n+\n+template<typename X, typename Y>\n+void\n+dump_for_expression (struct ui_file *stream, int depth,\n+\t\t     const std::pair<X, Y> &vals)\n+{\n+  dump_for_expression (stream, depth, vals.first);\n+  dump_for_expression (stream, depth, vals.second);\n+}\n+\n /* Base class for most concrete operations.  This class holds data,\n    specified via template parameters, and supplies generic\n    implementations of the 'dump' and 'uses_objfile' methods.  */\n@@ -155,7 +206,8 @@ class tuple_holding_operation : public operation\n \n   void dump (struct ui_file *stream, int depth) const override\n   {\n-    do_dump<0, Arg...> (stream, depth, m_storage);\n+    dump_for_expression (stream, depth, opcode ());\n+    do_dump<0, Arg...> (stream, depth + 1, m_storage);\n   }\n \n protected:\n@@ -178,6 +230,7 @@ class tuple_holding_operation : public operation\n   do_dump (struct ui_file *stream, int depth, const std::tuple<T...> &value)\n     const\n   {\n+    dump_for_expression (stream, depth, std::get<I> (value));\n     do_dump<I + 1, T...> (stream, depth, value);\n   }\n "
    },
    {
      "sha": "92f1299947295b79fbe7b40edc2569979d967c70",
      "filename": "gdb/expprint.c",
      "status": "modified",
      "additions": 124,
      "deletions": 0,
      "changes": 124,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/de401988aeac56a8478f61cde1b35e961742317b/gdb/expprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/de401988aeac56a8478f61cde1b35e961742317b/gdb/expprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expprint.c?ref=de401988aeac56a8478f61cde1b35e961742317b",
      "patch": "@@ -30,6 +30,8 @@\n #include \"objfiles.h\"\n #include \"valprint.h\"\n #include \"cli/cli-style.h\"\n+#include \"c-lang.h\"\n+#include \"expop.h\"\n \n #include <ctype.h>\n \n@@ -1160,3 +1162,125 @@ dump_prefix_expression (struct expression *exp, struct ui_file *stream)\n     elt = dump_subexp (exp, stream, elt);\n   fputs_filtered (\"\\n\", stream);\n }\n+\n+namespace expr\n+{\n+\n+void\n+dump_for_expression (struct ui_file *stream, int depth, enum exp_opcode op)\n+{\n+  fprintf_filtered (stream, _(\"%*sOperation: %s\\n\"), depth, \"\", op_name (op));\n+}\n+\n+void\n+dump_for_expression (struct ui_file *stream, int depth, const std::string &str)\n+{\n+  fprintf_filtered (stream, _(\"%*sString: %s\\n\"), depth, \"\", str.c_str ());\n+}\n+\n+void\n+dump_for_expression (struct ui_file *stream, int depth, struct type *type)\n+{\n+  fprintf_filtered (stream, _(\"%*sType: \"), depth, \"\");\n+  type_print (type, nullptr, stream, 0);\n+  fprintf_filtered (stream, \"\\n\");\n+}\n+\n+void\n+dump_for_expression (struct ui_file *stream, int depth, CORE_ADDR addr)\n+{\n+  fprintf_filtered (stream, _(\"%*sConstant: %s\\n\"), depth, \"\",\n+\t\t     core_addr_to_string (addr));\n+}\n+\n+void\n+dump_for_expression (struct ui_file *stream, int depth, internalvar *ivar)\n+{\n+  fprintf_filtered (stream, _(\"%*sInternalvar: $%s\\n\"), depth, \"\",\n+\t\t     internalvar_name (ivar));\n+}\n+\n+void\n+dump_for_expression (struct ui_file *stream, int depth, symbol *sym)\n+{\n+  fprintf_filtered (stream, _(\"%*sSymbol: %s\\n\"), depth, \"\",\n+\t\t     sym->print_name ());\n+}\n+\n+void\n+dump_for_expression (struct ui_file *stream, int depth, minimal_symbol *msym)\n+{\n+  fprintf_filtered (stream, _(\"%*sMinsym: %s\\n\"), depth, \"\",\n+\t\t     msym->print_name ());\n+}\n+\n+void\n+dump_for_expression (struct ui_file *stream, int depth, const block *bl)\n+{\n+  fprintf_filtered (stream, _(\"%*sBlock: %p\\n\"), depth, \"\", bl);\n+}\n+\n+void\n+dump_for_expression (struct ui_file *stream, int depth,\n+\t\t     type_instance_flags flags)\n+{\n+  fprintf_filtered (stream, _(\"%*sType flags: \"), depth, \"\");\n+  if (flags & TYPE_INSTANCE_FLAG_CONST)\n+    fputs_unfiltered (\"const \", stream);\n+  if (flags & TYPE_INSTANCE_FLAG_VOLATILE)\n+    fputs_unfiltered (\"volatile\", stream);\n+  fprintf_filtered (stream, \"\\n\");\n+}\n+\n+void\n+dump_for_expression (struct ui_file *stream, int depth,\n+\t\t     enum c_string_type_values flags)\n+{\n+  fprintf_filtered (stream, _(\"%*sC string flags: \"), depth, \"\");\n+  switch (flags & ~C_CHAR)\n+    {\n+    case C_WIDE_STRING:\n+      fputs_unfiltered (_(\"wide \"), stream);\n+      break;\n+    case C_STRING_16:\n+      fputs_unfiltered (_(\"u16 \"), stream);\n+      break;\n+    case C_STRING_32:\n+      fputs_unfiltered (_(\"u32 \"), stream);\n+      break;\n+    default:\n+      fputs_unfiltered (_(\"ordinary \"), stream);\n+      break;\n+    }\n+\n+  if ((flags & C_CHAR) != 0)\n+    fputs_unfiltered (_(\"char\"), stream);\n+  else\n+    fputs_unfiltered (_(\"string\"), stream);\n+  fputs_unfiltered (\"\\n\", stream);\n+}\n+\n+void\n+dump_for_expression (struct ui_file *stream, int depth, objfile *objf)\n+{\n+  fprintf_filtered (stream, _(\"%*sObjfile: %s\\n\"), depth, \"\",\n+\t\t     objfile_name (objf));\n+}\n+\n+void\n+dump_for_expression (struct ui_file *stream, int depth,\n+\t\t     enum range_flag flags)\n+{\n+  fprintf_filtered (stream, _(\"%*sRange:\"), depth, \"\");\n+  if ((flags & RANGE_LOW_BOUND_DEFAULT) != 0)\n+    fputs_unfiltered (_(\"low-default \"), stream);\n+  if ((flags & RANGE_HIGH_BOUND_DEFAULT) != 0)\n+    fputs_unfiltered (_(\"high-default \"), stream);\n+  if ((flags & RANGE_HIGH_BOUND_EXCLUSIVE) != 0)\n+    fputs_unfiltered (_(\"high-exclusive \"), stream);\n+  if ((flags & RANGE_HAS_STRIDE) != 0)\n+    fputs_unfiltered (_(\"has-stride\"), stream);\n+  fprintf_filtered (stream, \"\\n\");\n+}\n+\n+} /* namespace expr */"
    }
  ]
}