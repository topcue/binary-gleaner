{
  "sha": "75c56d3d1298de72aa67555f2c723a80b4818e04",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzVjNTZkM2QxMjk4ZGU3MmFhNjc1NTVmMmM3MjNhODBiNDgxOGUwNA==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-03-14T14:44:28Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-03-14T14:44:28Z"
    },
    "message": "Add support for NetBSD threads in arm-nbsd-nat.c\n\nNetBSD ptrace(2) accepts thread id (LWP) as the 4th argument for threads.\n\ngdb/ChangeLog:\n\n\t* arm-nbsd-nat.c (fetch_register): New variable lwp and pass\n\tit to the ptrace call.\n\t* arm-nbsd-nat.c (fetch_fp_register): Likewise.\n\t* arm-nbsd-nat.c (fetch_fp_regs): Likewise.\n\t* arm-nbsd-nat.c (store_register): Likewise.\n\t* arm-nbsd-nat.c (store_regs): Likewise.\n\t* arm-nbsd-nat.c (store_fp_register): Likewise.\n\t* arm-nbsd-nat.c (store_fp_regs): Likewise.",
    "tree": {
      "sha": "b0b794b163b77992b715b9c86426b116ef5b107b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b0b794b163b77992b715b9c86426b116ef5b107b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/75c56d3d1298de72aa67555f2c723a80b4818e04",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75c56d3d1298de72aa67555f2c723a80b4818e04",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/75c56d3d1298de72aa67555f2c723a80b4818e04",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/75c56d3d1298de72aa67555f2c723a80b4818e04/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6018d381a00515933016c539d2fdc18ad0d304b8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6018d381a00515933016c539d2fdc18ad0d304b8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6018d381a00515933016c539d2fdc18ad0d304b8"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 28,
    "deletions": 9
  },
  "files": [
    {
      "sha": "10f52ebbcefcd819fbc8faf9f7897a69c0b0b887",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75c56d3d1298de72aa67555f2c723a80b4818e04/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75c56d3d1298de72aa67555f2c723a80b4818e04/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=75c56d3d1298de72aa67555f2c723a80b4818e04",
      "patch": "@@ -1,3 +1,14 @@\n+2020-03-14  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* arm-nbsd-nat.c (fetch_register): New variable lwp and pass\n+\tit to the ptrace call.\n+\t* arm-nbsd-nat.c (fetch_fp_register): Likewise.\n+\t* arm-nbsd-nat.c (fetch_fp_regs): Likewise.\n+\t* arm-nbsd-nat.c (store_register): Likewise.\n+\t* arm-nbsd-nat.c (store_regs): Likewise.\n+\t* arm-nbsd-nat.c (store_fp_register): Likewise.\n+\t* arm-nbsd-nat.c (store_fp_regs): Likewise.\n+\n 2020-03-14  Kamil Rytarowski  <n54@gmx.com>\n \n \t* arm-nbsd-nat.c (arm_netbsd_nat_target): Inherit from"
    },
    {
      "sha": "a8a67e6e85202c71bfeb905d356b3f28f23b6380",
      "filename": "gdb/arm-nbsd-nat.c",
      "status": "modified",
      "additions": 17,
      "deletions": 9,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/75c56d3d1298de72aa67555f2c723a80b4818e04/gdb/arm-nbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/75c56d3d1298de72aa67555f2c723a80b4818e04/gdb/arm-nbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-nbsd-nat.c?ref=75c56d3d1298de72aa67555f2c723a80b4818e04",
      "patch": "@@ -66,9 +66,10 @@ fetch_register (struct regcache *regcache, int regno)\n {\n   struct reg inferior_registers;\n   int ret;\n+  int lwp = regcache->ptid ().lwp ();\n \n   ret = ptrace (PT_GETREGS, regcache->ptid ().pid (),\n-\t\t(PTRACE_TYPE_ARG3) &inferior_registers, 0);\n+\t\t(PTRACE_TYPE_ARG3) &inferior_registers, lwp);\n \n   if (ret < 0)\n     {\n@@ -83,8 +84,10 @@ static void\n fetch_fp_register (struct regcache *regcache, int regno)\n {\n   struct fpreg inferior_fp_registers;\n+  int lwp = regcache->ptid ().lwp ();\n+\n   int ret = ptrace (PT_GETFPREGS, regcache->ptid ().pid (),\n-\t\t    (PTRACE_TYPE_ARG3) &inferior_fp_registers, 0);\n+\t\t    (PTRACE_TYPE_ARG3) &inferior_fp_registers, lwp);\n \n   struct vfpreg &vfp = inferior_fp_registers.fpr_vfp;\n \n@@ -111,11 +114,12 @@ static void\n fetch_fp_regs (struct regcache *regcache)\n {\n   struct fpreg inferior_fp_registers;\n+  int lwp = regcache->ptid ().lwp ();\n   int ret;\n   int regno;\n \n   ret = ptrace (PT_GETFPREGS, regcache->ptid ().pid (),\n-\t\t(PTRACE_TYPE_ARG3) &inferior_fp_registers, 0);\n+\t\t(PTRACE_TYPE_ARG3) &inferior_fp_registers, lwp);\n \n   if (ret < 0)\n     {\n@@ -149,10 +153,11 @@ store_register (const struct regcache *regcache, int regno)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n   struct reg inferior_registers;\n+  int lwp = regcache->ptid ().lwp ();\n   int ret;\n \n   ret = ptrace (PT_GETREGS, regcache->ptid ().pid (),\n-\t\t(PTRACE_TYPE_ARG3) &inferior_registers, 0);\n+\t\t(PTRACE_TYPE_ARG3) &inferior_registers, lwp);\n \n   if (ret < 0)\n     {\n@@ -210,7 +215,7 @@ store_register (const struct regcache *regcache, int regno)\n     }\n \n   ret = ptrace (PT_SETREGS, regcache->ptid ().pid (),\n-\t\t(PTRACE_TYPE_ARG3) &inferior_registers, 0);\n+\t\t(PTRACE_TYPE_ARG3) &inferior_registers, lwp);\n \n   if (ret < 0)\n     warning (_(\"unable to write register %d to inferior\"), regno);\n@@ -221,6 +226,7 @@ store_regs (const struct regcache *regcache)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n   struct reg inferior_registers;\n+  int lwp = regcache->ptid ().lwp ();\n   int ret;\n   int regno;\n \n@@ -252,7 +258,7 @@ store_regs (const struct regcache *regcache)\n     }\n \n   ret = ptrace (PT_SETREGS, regcache->ptid ().pid (),\n-\t\t(PTRACE_TYPE_ARG3) &inferior_registers, 0);\n+\t\t(PTRACE_TYPE_ARG3) &inferior_registers, lwp);\n \n   if (ret < 0)\n     warning (_(\"unable to store general registers\"));\n@@ -262,8 +268,9 @@ static void\n store_fp_register (const struct regcache *regcache, int regno)\n {\n   struct fpreg inferior_fp_registers;\n+  int lwp = regcache->ptid ().lwp ();\n   int ret = ptrace (PT_GETFPREGS, regcache->ptid ().pid (),\n-\t\t    (PTRACE_TYPE_ARG3) &inferior_fp_registers, 0);\n+\t\t    (PTRACE_TYPE_ARG3) &inferior_fp_registers, lwp);\n   struct vfpreg &vfp = inferior_fp_registers.fpr_vfp;\n \n   if (ret < 0)\n@@ -285,7 +292,7 @@ store_fp_register (const struct regcache *regcache, int regno)\n     warning (_(\"Invalid register number.\"));\n \n   ret = ptrace (PT_SETFPREGS, regcache->ptid ().pid (),\n-\t\t(PTRACE_TYPE_ARG3) &inferior_fp_registers, 0);\n+\t\t(PTRACE_TYPE_ARG3) &inferior_fp_registers, lwp);\n \n   if (ret < 0)\n     warning (_(\"unable to write register %d to inferior\"), regno);\n@@ -295,6 +302,7 @@ static void\n store_fp_regs (const struct regcache *regcache)\n {\n   struct gdbarch_tdep *tdep = gdbarch_tdep (regcache->arch ());\n+  int lwp = regcache->ptid ().lwp ();\n   if (tdep->vfp_register_count == 0)\n     return;\n \n@@ -307,7 +315,7 @@ store_fp_regs (const struct regcache *regcache)\n \t\t\t (char *) &fpregs.fpr_vfp.vfp_fpscr);\n \n   int ret = ptrace (PT_SETFPREGS, regcache->ptid ().pid (),\n-\t\t    (PTRACE_TYPE_ARG3) &fpregs, 0);\n+\t\t    (PTRACE_TYPE_ARG3) &fpregs, lwp);\n \n   if (ret < 0)\n     warning (_(\"unable to store floating-point registers\"));"
    }
  ]
}