{
  "sha": "edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWRlYWNlZGE3YjJmMzNiMmMzYmY3OGM3MzJlNjdmMzE4OGU3ZjBiOQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-08-27T15:53:13Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-04-28T08:56:22Z"
    },
    "message": "gdb: startup commands to control Python extension language\n\nAdd two new commands to GDB that can be placed into the early\ninitialization to control how Python starts up.  The new options are:\n\n  set python ignore-environment on|off\n  set python dont-write-bytecode auto|on|off\n\n  show python ignore-environment\n  show python dont-write-bytecode\n\nThese can be used from GDB's startup file to control how the Python\nextension language behaves.  These options are equivalent to the -E\nand -B flags to python respectively, their descriptions from the\nPython man page:\n\n  -E     Ignore environment variables like PYTHONPATH and PYTHONHOME\n         that modify the  behavior  of  the  interpreter.\n\n  -B     Don't write .pyc files on import.\n\ngdb/ChangeLog:\n\n\t* NEWS: Mention new commands.\n\t* python/python.c (python_ignore_environment): New static global.\n\t(show_python_ignore_environment): New function.\n\t(set_python_ignore_environment): New function.\n\t(python_dont_write_bytecode): New static global.\n\t(show_python_dont_write_bytecode): New function.\n\t(set_python_dont_write_bytecode): New function.\n\t(_initialize_python): Register new commands.\n\ngdb/doc/ChangeLog:\n\n\t* python.texinfo (Python Commands): Mention new commands.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/py-startup-opt.exp: New file.",
    "tree": {
      "sha": "4a42856ef94f912794b339aa6cdec12616e2c978",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4a42856ef94f912794b339aa6cdec12616e2c978"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/041ca48e976b9a2a39a9440f7fbc2dffc77ed7c1"
    }
  ],
  "stats": {
    "total": 289,
    "additions": 289,
    "deletions": 0
  },
  "files": [
    {
      "sha": "3d266ea96bb4b5ec76b1c9c8c0427e7c98d7cd5f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9",
      "patch": "@@ -1,3 +1,14 @@\n+2021-04-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* NEWS: Mention new commands.\n+\t* python/python.c (python_ignore_environment): New static global.\n+\t(show_python_ignore_environment): New function.\n+\t(set_python_ignore_environment): New function.\n+\t(python_dont_write_bytecode): New static global.\n+\t(show_python_dont_write_bytecode): New function.\n+\t(set_python_dont_write_bytecode): New function.\n+\t(_initialize_python): Register new commands.\n+\n 2021-04-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* extension-priv.h (struct extension_language_ops): Rename"
    },
    {
      "sha": "6550ea352ac53e57a69f7e1408efd44ce71b3f6d",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9",
      "patch": "@@ -106,6 +106,22 @@ show print type hex\n   When 'on', the 'ptype' command uses hexadecimal notation to print sizes\n   and offsets of struct members.  When 'off', decimal notation is used.\n \n+set python ignore-environment on|off\n+show python ignore-environment\n+  When 'on', this causes GDB's builtin Python to ignore any\n+  environment variables that would otherwise effect how Python\n+  behaves.  This command needs to be added to an early initialization\n+  file (e.g. ~/.config/gdb/gdbearlyinit) in order to affect GDB.\n+\n+set python dont-write-bytecode auto|on|off\n+show python dont-write-bytecode\n+  When 'on', this causes GDB's builtin Python to not write any\n+  byte-code (.pyc files) to disk.  This command needs to be added to\n+  an early initialization file (e.g. ~/.config/gdb/gdbearlyinit) in\n+  order to affect GDB.  When 'off' byte-code will always be written.\n+  When set to 'auto' (the default) Python will check the\n+  PYTHONDONTWRITEBYTECODE. environment variable.\n+\n * Changed commands\n \n break [PROBE_MODIFIER] [LOCATION] [thread THREADNUM]"
    },
    {
      "sha": "e00d0cfb4a1c4c22a3e32ba58e2321e15986bd74",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9",
      "patch": "@@ -1,3 +1,7 @@\n+2021-04-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python.texinfo (Python Commands): Mention new commands.\n+\n 2021-04-25  Lancelot Six  <lsix@lancelotsix.com>\n \n \tPR gdb/22640"
    },
    {
      "sha": "20d65742964dfd5e2ae07c25b2c1598960d5e7b3",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9",
      "patch": "@@ -103,6 +103,44 @@ controlled using @code{set python print-stack}: if @code{full}, then\n full Python stack printing is enabled; if @code{none}, then Python stack\n and message printing is disabled; if @code{message}, the default, only\n the message component of the error is printed.\n+\n+@kindex set python ignore-environment\n+@item set python ignore-environment @r{[}on@r{|}off@r{]}\n+By default this option is @samp{off}, and, when @value{GDBN}\n+initializes its internal Python interpreter, the Python interpreter\n+will check the environment for variables that will effect how it\n+behaves, for example @env{PYTHONHOME}, and\n+@env{PYTHONPATH}@footnote{See the ENVIRONMENT VARIABLES section of\n+@command{man 1 python} for a comprehensive list.}.\n+\n+If this option is set to @samp{on} before Python is initialized then\n+Python will ignore all such environment variables.  As Python is\n+initialized early during @value{GDBN}'s startup process, then this\n+option must be placed into the early initialization file\n+(@pxref{Initialization Files}) to have the desired effect.\n+\n+This option is equivalent to passing @option{-E} to the real\n+@command{python} executable.\n+\n+@kindex set python dont-write-bytecode\n+@item set python dont-write-bytecode @r{[}auto@r{|}on@r{|}off@r{]}\n+When this option is @samp{off}, then, once @value{GDBN} has\n+initialized the Python interpreter, the interpreter will byte-compile\n+any Python modules that it imports and write the byte code to disk in\n+@file{.pyc} files.\n+\n+If this option is set to @samp{on} before Python is initialized then\n+Python will no longer write the byte code to disk.  As Python is\n+initialized early during @value{GDBN}'s startup process, then this\n+option must be placed into the early initialization file\n+(@pxref{Initialization Files}) to have the desired effect.\n+\n+By default this option is set to @samp{auto}, in this mode Python will\n+check the environment variable @env{PYTHONDONTWRITEBYTECODE} to see\n+if it should write out byte-code or not.\n+\n+This option is equivalent to passing @option{-B} to the real\n+@command{python} executable.\n @end table\n \n It is also possible to execute a Python script from the @value{GDBN}"
    },
    {
      "sha": "c46d68b73ed56f50303fe1162cd384ad5a8e68f2",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 98,
      "deletions": 0,
      "changes": 98,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9",
      "patch": "@@ -1578,6 +1578,80 @@ python_command (const char *arg, int from_tty)\n \n #endif /* HAVE_PYTHON */\n \n+/* When this is turned on before Python is initialised then Python will\n+   ignore any environment variables related to Python.  This is equivalent\n+   to passing `-E' to the python program.  */\n+static bool python_ignore_environment = false;\n+\n+/* Implement 'show python ignore-environment'.  */\n+\n+static void\n+show_python_ignore_environment (struct ui_file *file, int from_tty,\n+\t\t\t\tstruct cmd_list_element *c, const char *value)\n+{\n+  fprintf_filtered (file, _(\"Python's ignore-environment setting is %s.\\n\"),\n+\t\t    value);\n+}\n+\n+/* Implement 'set python ignore-environment'.  This sets Python's internal\n+   flag no matter when the command is issued, however, if this is used\n+   after Py_Initialize has been called then most of the environment will\n+   already have been read.  */\n+\n+static void\n+set_python_ignore_environment (const char *args, int from_tty,\n+\t\t\t       struct cmd_list_element *c)\n+{\n+#ifdef HAVE_PYTHON\n+  Py_IgnoreEnvironmentFlag = python_ignore_environment ? 1 : 0;\n+#endif\n+}\n+\n+/* When this is turned on before Python is initialised then Python will\n+   not write `.pyc' files on import of a module.  */\n+static enum auto_boolean python_dont_write_bytecode = AUTO_BOOLEAN_AUTO;\n+\n+/* Implement 'show python dont-write-bytecode'.  */\n+\n+static void\n+show_python_dont_write_bytecode (struct ui_file *file, int from_tty,\n+\t\t\t\t struct cmd_list_element *c, const char *value)\n+{\n+  if (python_dont_write_bytecode == AUTO_BOOLEAN_AUTO)\n+    {\n+      const char *auto_string\n+\t= (python_ignore_environment\n+\t   || getenv (\"PYTHONDONTWRITEBYTECODE\") == nullptr) ? \"off\" : \"on\";\n+\n+      fprintf_filtered (file,\n+\t\t\t_(\"Python's dont-write-bytecode setting is %s (currently %s).\\n\"),\n+\t\t\tvalue, auto_string);\n+    }\n+  else\n+    fprintf_filtered (file, _(\"Python's dont-write-bytecode setting is %s.\\n\"),\n+\t\t      value);\n+}\n+\n+/* Implement 'set python dont-write-bytecode'.  This sets Python's internal\n+   flag no matter when the command is issued, however, if this is used\n+   after Py_Initialize has been called then many modules could already\n+   have been imported and their byte code written out.  */\n+\n+static void\n+set_python_dont_write_bytecode (const char *args, int from_tty,\n+\t\t\t\tstruct cmd_list_element *c)\n+{\n+#ifdef HAVE_PYTHON\n+  if (python_dont_write_bytecode == AUTO_BOOLEAN_AUTO)\n+    Py_DontWriteBytecodeFlag\n+      = (!python_ignore_environment\n+\t && getenv (\"PYTHONDONTWRITEBYTECODE\") != nullptr) ? 1 : 0;\n+  else\n+    Py_DontWriteBytecodeFlag\n+      = python_dont_write_bytecode == AUTO_BOOLEAN_TRUE ? 1 : 0;\n+#endif /* HAVE_PYTHON */\n+}\n+\n \f\n \n /* Lists for 'set python' commands.  */\n@@ -1880,6 +1954,30 @@ message == an error message without a stack will be printed.\"),\n \t\t\tNULL, NULL,\n \t\t\t&user_set_python_list,\n \t\t\t&user_show_python_list);\n+\n+  add_setshow_boolean_cmd (\"ignore-environment\", no_class,\n+\t\t\t   &python_ignore_environment, _(\"\\\n+Set whether the Python interpreter should ignore environment variables.\"), _(\" \\\n+Show whether the Python interpreter showlist ignore environment variables.\"), _(\" \\\n+When enabled GDB's Python interpreter will ignore any Python related\\n\t\\\n+flags in the environment.  This is equivalent to passing `-E' to a\\n\t\\\n+python executable.\"),\n+\t\t\t   set_python_ignore_environment,\n+\t\t\t   show_python_ignore_environment,\n+\t\t\t   &user_set_python_list,\n+\t\t\t   &user_show_python_list);\n+\n+  add_setshow_auto_boolean_cmd (\"dont-write-bytecode\", no_class,\n+\t\t\t\t&python_dont_write_bytecode, _(\"\\\n+Set whether the Python interpreter should ignore environment variables.\"), _(\" \\\n+Show whether the Python interpreter showlist ignore environment variables.\"), _(\" \\\n+When enabled GDB's Python interpreter will ignore any Python related\\n\t\\\n+flags in the environment.  This is equivalent to passing `-E' to a\\n\t\\\n+python executable.\"),\n+\t\t\t\tset_python_dont_write_bytecode,\n+\t\t\t\tshow_python_dont_write_bytecode,\n+\t\t\t\t&user_set_python_list,\n+\t\t\t\t&user_show_python_list);\n }\n \n #ifdef HAVE_PYTHON"
    },
    {
      "sha": "d2ed989b17b1cc4c79ab8bbd9bf5042ff29a7f94",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9",
      "patch": "@@ -1,3 +1,7 @@\n+2021-04-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.python/py-startup-opt.exp: New file.\n+\n 2021-04-27  Luis Machado  <luis.machado@linaro.org>\n \n \t* gdb.base/maint.exp: Drop a pattern that is not needed."
    },
    {
      "sha": "842add308078bebaa6fd6cf7456596d97d6aba7a",
      "filename": "gdb/testsuite/gdb.python/py-startup-opt.exp",
      "status": "added",
      "additions": 118,
      "deletions": 0,
      "changes": 118,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9/gdb/testsuite/gdb.python/py-startup-opt.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9/gdb/testsuite/gdb.python/py-startup-opt.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-startup-opt.exp?ref=edeaceda7b2f33b2c3bf78c732e67f3188e7f0b9",
      "patch": "@@ -0,0 +1,118 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test the flags within GDB that can be used to control how Python is\n+# initialized.\n+\n+gdb_start\n+\n+# Skip all tests if Python scripting is not enabled.\n+if { [skip_python_tests] } { continue }\n+\n+gdb_exit\n+\n+# Return a list containing two directory paths for newly created home\n+# directories.\n+#\n+# The first directory is a HOME style home directory, it contains a\n+# .gdbearlyinit file containing CONTENT.\n+#\n+# The second directory is an XDG_CONFIG_HOME style home directory, it\n+# contains a sub-directory gdb/, inside which is a file gdbearlyinit\n+# that also contains CONTENT.\n+#\n+# The PREFIX is used in both directory names and should be unique for\n+# each call to this function.\n+proc setup_home_directories { prefix content } {\n+    set home_dir [standard_output_file \"${prefix}-home\"]\n+    set xdg_home_dir [standard_output_file \"${prefix}-xdg\"]\n+\n+    file mkdir $home_dir\n+    file mkdir \"$xdg_home_dir/gdb\"\n+\n+    # Write the content into the HOME directory.\n+    set fd [open \"$home_dir/.gdbearlyinit\" w]\n+    puts $fd $content\n+    close $fd\n+\n+    # Copy this from the HOME directory into the XDG_CONFIG_HOME\n+    # directory.\n+    file copy -force \"$home_dir/.gdbearlyinit\" \"$xdg_home_dir/gdb/gdbearlyinit\"\n+\n+    return [list $home_dir $xdg_home_dir]\n+}\n+\n+# Start GDB and check the status of the Python system flags that we\n+# can control from within GDB.\n+proc test_python_settings { exp_state } {\n+    gdb_start\n+\n+    gdb_test_no_output \"python import sys\"\n+\n+    foreach_with_prefix attr {ignore_environment dont_write_bytecode} {\n+\tgdb_test_multiline \"testname\" \\\n+\t    \"python\" \"\" \\\n+\t    \"if hasattr(sys, 'flags') and getattr(sys.flags, '${attr}', False):\" \"\" \\\n+\t    \"  print (\\\"${attr} is on\\\")\" \"\" \\\n+\t    \"else:\" \"\" \\\n+\t    \"  print (\\\"${attr} is off\\\")\" \"\" \\\n+\t    \"end\" \"${attr} is ${exp_state}\"\n+    }\n+\n+    gdb_exit\n+}\n+\n+save_vars { env(TERM) } {\n+    # We need an ANSI-capable terminal to get the output.\n+    setenv TERM ansi\n+\n+    # Check the features are off by default.\n+    test_python_settings \"off\"\n+\n+    # Create an empty directory we can use as HOME for some of the\n+    # tests below.  When we set XDG_CONFIG_HOME we still need to point\n+    # HOME at something otherwise GDB complains that it doesn't know\n+    # where to create the index cache.\n+    set empty_home_dir [standard_output_file fake-empty-home]\n+\n+    # Create two directories to use for the style setting test.\n+    set dirs [setup_home_directories \"style\" \\\n+\t\t  [multi_line_input \\\n+\t\t       \"set python dont-write-bytecode on\" \\\n+\t\t       \"set python ignore-environment on\"]]\n+    set home_dir [lindex $dirs 0]\n+    set xdg_home_dir [lindex $dirs 1]\n+\n+    # Now arrange to use the fake home directory early init file.\n+    save_vars { INTERNAL_GDBFLAGS env(HOME) env(XDG_CONFIG_HOME) } {\n+\tset INTERNAL_GDBFLAGS [string map {\"-nx\" \"\"} $INTERNAL_GDBFLAGS]\n+\n+\twith_test_prefix \"using HOME config\" {\n+\t    # Now test GDB when using the HOME directory.\n+\t    set env(HOME) $home_dir\n+\t    unset -nocomplain env(XDG_CONFIG_HOME)\n+\t    test_python_settings \"on\"\n+\t}\n+\n+\twith_test_prefix \"using XDG_CONFIG_HOME config\" {\n+\t    # Now test using the XDG_CONFIG_HOME folder.  We still need to\n+\t    # have a HOME directory set otherwise GDB will issue an error\n+\t    # about not knowing where to place the index cache.\n+\t    set env(XDG_CONFIG_HOME) $xdg_home_dir\n+\t    set env(HOME) $empty_home_dir\n+\t    test_python_settings \"on\"\n+\t}\n+    }\n+}"
    }
  ]
}