{
  "sha": "4b167ea1a0f1ff6f02684556e951dab8d48b9fa4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGIxNjdlYTFhMGYxZmY2ZjAyNjg0NTU2ZTk1MWRhYjhkNDhiOWZhNA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:14:01Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:15:57Z"
    },
    "message": "Remove dwarf2_per_cu_data::text_offset\n\nThis method simply returns the text offset of the objfile associated to\nthe dwarf2_per_cu_data object.  Since dwarf2_per_cu_data objects are\ngoing to become objfile-independent, we can't keep this method.  This\npatch removes it.\n\nExisting callers need to figure out the in the context of which objfile\nthis is being used, and call text_offset on it.  Typically, this comes\nfrom a symbol baton, where we store the corresponding\ndwarf2_per_objfile.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.h (struct dwarf2_per_cu_data) <text_offset>:\n\tRemove.\n\t* dwarf2/read.c (dwarf2_per_cu_data::text_offset): Remove.\n\t* dwarf2/loc.c (dwarf2_find_location_expression): Update.\n\t(dwarf2_compile_property_to_c): Update.\n\t(dwarf2_compile_expr_to_ax): Add dwarf2_per_objfile parameter,\n\tuse text offset from objfile.\n\t(locexpr_tracepoint_var_ref): Update.\n\t(locexpr_generate_c_location): Update.\n\t(loclist_describe_location): Update.\n\t(loclist_tracepoint_var_ref): Update.\n\t* dwarf2/compile.h (compile_dwarf_bounds_to_c): Add\n\tdwarf2_per_objfile parameter.\n\t* dwarf2/loc2c.c (do_compile_dwarf_expr_to_c): Likewise,\n\tuse text offset from objfile.\n\t(compile_dwarf_expr_to_c): Add dwarf2_per_objfile parameter.\n\nChange-Id: I56b01ba294733362a3562426a96d48ae051a776f",
    "tree": {
      "sha": "402be28767b0f35204af185c1b672c597c64d548",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/402be28767b0f35204af185c1b672c597c64d548"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4b167ea1a0f1ff6f02684556e951dab8d48b9fa4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4b167ea1a0f1ff6f02684556e951dab8d48b9fa4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4b167ea1a0f1ff6f02684556e951dab8d48b9fa4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4b167ea1a0f1ff6f02684556e951dab8d48b9fa4/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "89b07335fe42d6da84c19351ca0c34b11a3c4f8e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89b07335fe42d6da84c19351ca0c34b11a3c4f8e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/89b07335fe42d6da84c19351ca0c34b11a3c4f8e"
    }
  ],
  "stats": {
    "total": 102,
    "additions": 63,
    "deletions": 39
  },
  "files": [
    {
      "sha": "45e33cbc91b0c8597aae4bb0038747b85bee10ab",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b167ea1a0f1ff6f02684556e951dab8d48b9fa4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b167ea1a0f1ff6f02684556e951dab8d48b9fa4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4b167ea1a0f1ff6f02684556e951dab8d48b9fa4",
      "patch": "@@ -1,3 +1,22 @@\n+2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/read.h (struct dwarf2_per_cu_data) <text_offset>:\n+\tRemove.\n+\t* dwarf2/read.c (dwarf2_per_cu_data::text_offset): Remove.\n+\t* dwarf2/loc.c (dwarf2_find_location_expression): Update.\n+\t(dwarf2_compile_property_to_c): Update.\n+\t(dwarf2_compile_expr_to_ax): Add dwarf2_per_objfile parameter,\n+\tuse text offset from objfile.\n+\t(locexpr_tracepoint_var_ref): Update.\n+\t(locexpr_generate_c_location): Update.\n+\t(loclist_describe_location): Update.\n+\t(loclist_tracepoint_var_ref): Update.\n+\t* dwarf2/compile.h (compile_dwarf_bounds_to_c): Add\n+\tdwarf2_per_objfile parameter.\n+\t* dwarf2/loc2c.c (do_compile_dwarf_expr_to_c): Likewise,\n+\tuse text offset from objfile.\n+\t(compile_dwarf_expr_to_c): Add dwarf2_per_objfile parameter.\n+\n 2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* dwarf2/expr.h (struct dwarf_expr_context)"
    },
    {
      "sha": "2fd1810759cc56946295539f194d539588733146",
      "filename": "gdb/compile/compile-loc2c.c",
      "status": "modified",
      "additions": 12,
      "deletions": 8,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b167ea1a0f1ff6f02684556e951dab8d48b9fa4/gdb/compile/compile-loc2c.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b167ea1a0f1ff6f02684556e951dab8d48b9fa4/gdb/compile/compile-loc2c.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-loc2c.c?ref=4b167ea1a0f1ff6f02684556e951dab8d48b9fa4",
      "patch": "@@ -583,7 +583,8 @@ do_compile_dwarf_expr_to_c (int indent, string_file *stream,\n \t\t\t    unsigned int addr_size,\n \t\t\t    const gdb_byte *op_ptr, const gdb_byte *op_end,\n \t\t\t    CORE_ADDR *initial,\n-\t\t\t    struct dwarf2_per_cu_data *per_cu)\n+\t\t\t    dwarf2_per_cu_data *per_cu,\n+\t\t\t    dwarf2_per_objfile *per_objfile)\n {\n   /* We keep a counter so that labels and other objects we create have\n      unique names.  */\n@@ -719,7 +720,7 @@ do_compile_dwarf_expr_to_c (int indent, string_file *stream,\n \t     index, not an address.  We don't support things like\n \t     branching between the address and the TLS op.  */\n \t  if (op_ptr >= op_end || *op_ptr != DW_OP_GNU_push_tls_address)\n-\t    uoffset += per_cu->text_offset ();\n+\t    uoffset += per_objfile->objfile->text_section_offset ();\n \t  push (indent, stream, uoffset);\n \t  break;\n \n@@ -896,7 +897,7 @@ do_compile_dwarf_expr_to_c (int indent, string_file *stream,\n \t\t\t\t\tsym, pc,\n \t\t\t\t\tarch, registers_used, addr_size,\n \t\t\t\t\tdatastart, datastart + datalen,\n-\t\t\t\t\tNULL, per_cu);\n+\t\t\t\t\tNULL, per_cu, per_objfile);\n \n \t    pushf (indent, stream, \"%s + %s\", fb_name, hex_string (offset));\n \t  }\n@@ -1077,7 +1078,7 @@ do_compile_dwarf_expr_to_c (int indent, string_file *stream,\n \t\t\t\t\t    sym, pc, arch, registers_used,\n \t\t\t\t\t    addr_size,\n \t\t\t\t\t    cfa_start, cfa_end,\n-\t\t\t\t\t    &text_offset, per_cu);\n+\t\t\t\t\t    &text_offset, per_cu, per_objfile);\n \t\tpushf (indent, stream, \"%s\", cfa_name);\n \t      }\n \t  }\n@@ -1123,11 +1124,12 @@ compile_dwarf_expr_to_c (string_file *stream, const char *result_name,\n \t\t\t struct gdbarch *arch, unsigned char *registers_used,\n \t\t\t unsigned int addr_size,\n \t\t\t const gdb_byte *op_ptr, const gdb_byte *op_end,\n-\t\t\t struct dwarf2_per_cu_data *per_cu)\n+\t\t\t dwarf2_per_cu_data *per_cu,\n+\t\t\t dwarf2_per_objfile *per_objfile)\n {\n   do_compile_dwarf_expr_to_c (2, stream, GCC_UINTPTR, result_name, sym, pc,\n \t\t\t      arch, registers_used, addr_size, op_ptr, op_end,\n-\t\t\t      NULL, per_cu);\n+\t\t\t      NULL, per_cu, per_objfile);\n }\n \n /* See compile.h.  */\n@@ -1140,9 +1142,11 @@ compile_dwarf_bounds_to_c (string_file *stream,\n \t\t\t   struct gdbarch *arch, unsigned char *registers_used,\n \t\t\t   unsigned int addr_size,\n \t\t\t   const gdb_byte *op_ptr, const gdb_byte *op_end,\n-\t\t\t   struct dwarf2_per_cu_data *per_cu)\n+\t\t\t   dwarf2_per_cu_data *per_cu,\n+\t\t\t   dwarf2_per_objfile *per_objfile)\n {\n   do_compile_dwarf_expr_to_c (2, stream, \"unsigned long \", result_name,\n \t\t\t      sym, pc, arch, registers_used,\n-\t\t\t      addr_size, op_ptr, op_end, NULL, per_cu);\n+\t\t\t      addr_size, op_ptr, op_end, NULL, per_cu,\n+\t\t\t      per_objfile);\n }"
    },
    {
      "sha": "73f714ab2308182d6334f722ec737ecfab87626b",
      "filename": "gdb/compile/compile.h",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b167ea1a0f1ff6f02684556e951dab8d48b9fa4/gdb/compile/compile.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b167ea1a0f1ff6f02684556e951dab8d48b9fa4/gdb/compile/compile.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile.h?ref=4b167ea1a0f1ff6f02684556e951dab8d48b9fa4",
      "patch": "@@ -21,6 +21,7 @@\n struct ui_file;\n struct gdbarch;\n struct dwarf2_per_cu_data;\n+struct dwarf2_per_objfile;\n struct symbol;\n struct dynamic_prop;\n \n@@ -53,6 +54,9 @@ extern void eval_compile_command (struct command_line *cmd,\n    OPT_PTR and OP_END are the bounds of the DWARF expression.\n \n    PER_CU is the per-CU object used for looking up various other\n+   things.\n+\n+   PER_OBJFILE is the per-objfile object also used for looking up various other\n    things.  */\n \n extern void compile_dwarf_expr_to_c (string_file *stream,\n@@ -64,7 +68,8 @@ extern void compile_dwarf_expr_to_c (string_file *stream,\n \t\t\t\t     unsigned int addr_size,\n \t\t\t\t     const gdb_byte *op_ptr,\n \t\t\t\t     const gdb_byte *op_end,\n-\t\t\t\t     struct dwarf2_per_cu_data *per_cu);\n+\t\t\t\t     dwarf2_per_cu_data *per_cu,\n+\t\t\t\t     dwarf2_per_objfile *per_objfile);\n \n /* Compile a DWARF bounds expression to C, suitable for use by the\n    compiler.\n@@ -88,6 +93,9 @@ extern void compile_dwarf_expr_to_c (string_file *stream,\n    OPT_PTR and OP_END are the bounds of the DWARF expression.\n \n    PER_CU is the per-CU object used for looking up various other\n+   things.\n+\n+   PER_OBJFILE is the per-objfile object also used for looking up various other\n    things.  */\n \n extern void compile_dwarf_bounds_to_c (string_file *stream,\n@@ -99,7 +107,8 @@ extern void compile_dwarf_bounds_to_c (string_file *stream,\n \t\t\t\t       unsigned int addr_size,\n \t\t\t\t       const gdb_byte *op_ptr,\n \t\t\t\t       const gdb_byte *op_end,\n-\t\t\t\t       struct dwarf2_per_cu_data *per_cu);\n+\t\t\t\t       dwarf2_per_cu_data *per_cu,\n+\t\t\t\t       dwarf2_per_objfile *per_objfile);\n \n extern void compile_print_value (struct value *val, void *data_voidp);\n "
    },
    {
      "sha": "e2c61aa668c8ea852a49576d4e9b3bf11e69fd23",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 21,
      "deletions": 13,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b167ea1a0f1ff6f02684556e951dab8d48b9fa4/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b167ea1a0f1ff6f02684556e951dab8d48b9fa4/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=4b167ea1a0f1ff6f02684556e951dab8d48b9fa4",
      "patch": "@@ -324,7 +324,7 @@ dwarf2_find_location_expression (struct dwarf2_loclist_baton *baton,\n   unsigned int addr_size = baton->per_cu->addr_size ();\n   int signed_addr_p = bfd_get_sign_extend_vma (objfile->obfd);\n   /* Adjust base_address for relocatable objects.  */\n-  CORE_ADDR base_offset = baton->per_cu->text_offset ();\n+  CORE_ADDR base_offset = baton->per_objfile->objfile->text_section_offset ();\n   CORE_ADDR base_address = baton->base_address + base_offset;\n   const gdb_byte *loc_ptr, *buf_end;\n \n@@ -2649,26 +2649,29 @@ dwarf2_compile_property_to_c (string_file *stream,\n     = (struct dwarf2_property_baton *) prop->data.baton;\n   const gdb_byte *data;\n   size_t size;\n-  struct dwarf2_per_cu_data *per_cu;\n+  dwarf2_per_cu_data *per_cu;\n+  dwarf2_per_objfile *per_objfile;\n \n   if (prop->kind == PROP_LOCEXPR)\n     {\n       data = baton->locexpr.data;\n       size = baton->locexpr.size;\n       per_cu = baton->locexpr.per_cu;\n+      per_objfile = baton->locexpr.per_objfile;\n     }\n   else\n     {\n       gdb_assert (prop->kind == PROP_LOCLIST);\n \n       data = dwarf2_find_location_expression (&baton->loclist, &size, pc);\n       per_cu = baton->loclist.per_cu;\n+      per_objfile = baton->loclist.per_objfile;\n     }\n \n   compile_dwarf_bounds_to_c (stream, result_name, prop, sym, pc,\n \t\t\t     gdbarch, registers_used,\n \t\t\t     per_cu->addr_size (),\n-\t\t\t     data, data + size, per_cu);\n+\t\t\t     data, data + size, per_cu, per_objfile);\n }\n \n \f\n@@ -2956,7 +2959,8 @@ static void\n dwarf2_compile_expr_to_ax (struct agent_expr *expr, struct axs_value *loc,\n \t\t\t   unsigned int addr_size, const gdb_byte *op_ptr,\n \t\t\t   const gdb_byte *op_end,\n-\t\t\t   struct dwarf2_per_cu_data *per_cu)\n+\t\t\t   dwarf2_per_cu_data *per_cu,\n+\t\t\t   dwarf2_per_objfile *per_objfile)\n {\n   gdbarch *arch = expr->gdbarch;\n   std::vector<int> dw_labels, patches;\n@@ -3043,7 +3047,7 @@ dwarf2_compile_expr_to_ax (struct agent_expr *expr, struct axs_value *loc,\n \t     index, not an address.  We don't support things like\n \t     branching between the address and the TLS op.  */\n \t  if (op_ptr >= op_end || *op_ptr != DW_OP_GNU_push_tls_address)\n-\t    uoffset += per_cu->text_offset ();\n+\t    uoffset += per_objfile->objfile->text_section_offset ();\n \t  ax_const_l (expr, uoffset);\n \t  break;\n \n@@ -3234,7 +3238,8 @@ dwarf2_compile_expr_to_ax (struct agent_expr *expr, struct axs_value *loc,\n \n \t    op_ptr = safe_read_sleb128 (op_ptr, op_end, &offset);\n \t    dwarf2_compile_expr_to_ax (expr, loc, addr_size, datastart,\n-\t\t\t\t       datastart + datalen, per_cu);\n+\t\t\t\t       datastart + datalen, per_cu,\n+\t\t\t\t       per_objfile);\n \t    if (loc->kind == axs_lvalue_register)\n \t      require_rvalue (expr, loc);\n \n@@ -3460,7 +3465,7 @@ dwarf2_compile_expr_to_ax (struct agent_expr *expr, struct axs_value *loc,\n \t\t/* Another expression.  */\n \t\tax_const_l (expr, text_offset);\n \t\tdwarf2_compile_expr_to_ax (expr, loc, addr_size, cfa_start,\n-\t\t\t\t\t   cfa_end, per_cu);\n+\t\t\t\t\t   cfa_end, per_cu, per_objfile);\n \t      }\n \n \t    loc->kind = axs_lvalue_memory;\n@@ -3585,7 +3590,8 @@ dwarf2_compile_expr_to_ax (struct agent_expr *expr, struct axs_value *loc,\n \t    gdb_assert (block.per_cu == per_cu);\n \n \t    dwarf2_compile_expr_to_ax (expr, loc, addr_size, block.data,\n-\t\t\t\t       block.data + block.size, per_cu);\n+\t\t\t\t       block.data + block.size, per_cu,\n+\t\t\t\t       per_objfile);\n \t  }\n \t  break;\n \n@@ -4383,7 +4389,8 @@ locexpr_tracepoint_var_ref (struct symbol *symbol, struct agent_expr *ax,\n     value->optimized_out = 1;\n   else\n     dwarf2_compile_expr_to_ax (ax, value, addr_size, dlbaton->data,\n-\t\t\t       dlbaton->data + dlbaton->size, dlbaton->per_cu);\n+\t\t\t       dlbaton->data + dlbaton->size, dlbaton->per_cu,\n+\t\t\t       dlbaton->per_objfile);\n }\n \n /* symbol_computed_ops 'generate_c_location' method.  */\n@@ -4404,7 +4411,7 @@ locexpr_generate_c_location (struct symbol *sym, string_file *stream,\n   compile_dwarf_expr_to_c (stream, result_name,\n \t\t\t   sym, pc, gdbarch, registers_used, addr_size,\n \t\t\t   dlbaton->data, dlbaton->data + dlbaton->size,\n-\t\t\t   dlbaton->per_cu);\n+\t\t\t   dlbaton->per_cu, dlbaton->per_objfile);\n }\n \n /* The set of location functions used with the DWARF-2 expression\n@@ -4503,7 +4510,7 @@ loclist_describe_location (struct symbol *symbol, CORE_ADDR addr,\n   int offset_size = dlbaton->per_cu->offset_size ();\n   int signed_addr_p = bfd_get_sign_extend_vma (objfile->obfd);\n   /* Adjust base_address for relocatable objects.  */\n-  CORE_ADDR base_offset = dlbaton->per_cu->text_offset ();\n+  CORE_ADDR base_offset = objfile->text_section_offset ();\n   CORE_ADDR base_address = dlbaton->base_address + base_offset;\n   int done = 0;\n \n@@ -4609,7 +4616,7 @@ loclist_tracepoint_var_ref (struct symbol *symbol, struct agent_expr *ax,\n     value->optimized_out = 1;\n   else\n     dwarf2_compile_expr_to_ax (ax, value, addr_size, data, data + size,\n-\t\t\t       dlbaton->per_cu);\n+\t\t\t       dlbaton->per_cu, dlbaton->per_objfile);\n }\n \n /* symbol_computed_ops 'generate_c_location' method.  */\n@@ -4633,7 +4640,8 @@ loclist_generate_c_location (struct symbol *sym, string_file *stream,\n   compile_dwarf_expr_to_c (stream, result_name,\n \t\t\t   sym, pc, gdbarch, registers_used, addr_size,\n \t\t\t   data, data + size,\n-\t\t\t   dlbaton->per_cu);\n+\t\t\t   dlbaton->per_cu,\n+\t\t\t   dlbaton->per_objfile);\n }\n \n /* The set of location functions used with the DWARF-2 expression"
    },
    {
      "sha": "9169bac33e8671a25696e5ab708a646d3ebc9325",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 0,
      "deletions": 10,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b167ea1a0f1ff6f02684556e951dab8d48b9fa4/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b167ea1a0f1ff6f02684556e951dab8d48b9fa4/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=4b167ea1a0f1ff6f02684556e951dab8d48b9fa4",
      "patch": "@@ -23392,16 +23392,6 @@ dwarf2_per_cu_data::ref_addr_size () const\n \n /* See read.h.  */\n \n-CORE_ADDR\n-dwarf2_per_cu_data::text_offset () const\n-{\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n-\n-  return objfile->text_section_offset ();\n-}\n-\n-/* See read.h.  */\n-\n struct type *\n dwarf2_cu::addr_type () const\n {"
    },
    {
      "sha": "15951f5221ddd843583897aa05570d38e7c57fae",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4b167ea1a0f1ff6f02684556e951dab8d48b9fa4/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4b167ea1a0f1ff6f02684556e951dab8d48b9fa4/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=4b167ea1a0f1ff6f02684556e951dab8d48b9fa4",
      "patch": "@@ -508,12 +508,6 @@ struct dwarf2_per_cu_data\n      header for this CU.  */\n   int ref_addr_size () const;\n \n-  /* Return the text offset of the CU.  The returned offset comes from\n-     this CU's objfile.  If this objfile came from a separate\n-     debuginfo file, then the offset may be different from the\n-     corresponding offset in the parent objfile.  */\n-  CORE_ADDR text_offset () const;\n-\n   /* Return DWARF version number of this CU.  */\n   short version () const\n   {"
    }
  ]
}