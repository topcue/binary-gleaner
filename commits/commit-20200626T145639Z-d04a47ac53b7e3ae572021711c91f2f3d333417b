{
  "sha": "d04a47ac53b7e3ae572021711c91f2f3d333417b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDA0YTQ3YWM1M2I3ZTNhZTU3MjAyMTcxMWM5MWYyZjNkMzMzNDE3Yg==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-11-05T13:09:57Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-06-26T14:56:39Z"
    },
    "message": "libctf: create: ctf_add_type should hand back already-added non-SoUs\n\nWhen we add a type from a dictionary and then try to add it again, we\nshould hand it back unchanged unless it is a structure, union or enum\nwith a different number of members.  That's what the comment says we do.\n\nInstead, we hand it back unchanged *only* if it is a structure, union or\nenum with the same number of members: non-structs, unions and enums are\nunconditionally added.  This causes extreme type bloating and (in\nconjunction with the bug fixed by the next commit) can easily lead to\nthe same type being mistakenly added to a dictionary more than once\n(which, for forwards, was not banned and led to dictionary corruption).\n\nlibctf/\n\t* ctf-create.c (ctf_add_type_internal): Hand back existing types\n\tunchanged.",
    "tree": {
      "sha": "90f3e7110f3d343e5bf07c249e973efebc183ab9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/90f3e7110f3d343e5bf07c249e973efebc183ab9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d04a47ac53b7e3ae572021711c91f2f3d333417b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d04a47ac53b7e3ae572021711c91f2f3d333417b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d04a47ac53b7e3ae572021711c91f2f3d333417b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d04a47ac53b7e3ae572021711c91f2f3d333417b/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6bbf9da8927e848d3d6fdd188ca84385f1dddcce",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6bbf9da8927e848d3d6fdd188ca84385f1dddcce",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6bbf9da8927e848d3d6fdd188ca84385f1dddcce"
    }
  ],
  "stats": {
    "total": 21,
    "additions": 15,
    "deletions": 6
  },
  "files": [
    {
      "sha": "1b019a3e5f762fa8789478d3d62d4e85d99ad6eb",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d04a47ac53b7e3ae572021711c91f2f3d333417b/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d04a47ac53b7e3ae572021711c91f2f3d333417b/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=d04a47ac53b7e3ae572021711c91f2f3d333417b",
      "patch": "@@ -1,3 +1,8 @@\n+2020-06-26  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-create.c (ctf_add_type_internal): Hand back existing types\n+\tunchanged.\n+\n 2020-06-26  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-create.c (ctf_add_forward): Don't add forwards to"
    },
    {
      "sha": "7e94a254c500954243b6c1e5047703956f86a42a",
      "filename": "libctf/ctf-create.c",
      "status": "modified",
      "additions": 10,
      "deletions": 6,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d04a47ac53b7e3ae572021711c91f2f3d333417b/libctf/ctf-create.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d04a47ac53b7e3ae572021711c91f2f3d333417b/libctf/ctf-create.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-create.c?ref=d04a47ac53b7e3ae572021711c91f2f3d333417b",
      "patch": "@@ -1665,13 +1665,17 @@ ctf_add_type_internal (ctf_file_t *dst_fp, ctf_file_t *src_fp, ctf_id_t src_type\n \t kind and (if a struct or union) has the same number of members, hand it\n \t straight back.  */\n \n-      if ((ctf_type_kind_unsliced (tmp_fp, tmp) == (int) kind)\n-\t  && (kind == CTF_K_STRUCT || kind == CTF_K_UNION\n-\t      || kind == CTF_K_ENUM))\n+      if (ctf_type_kind_unsliced (tmp_fp, tmp) == (int) kind)\n \t{\n-\t  if ((dst_tp = ctf_lookup_by_id (&tmp_fp, dst_type)) != NULL)\n-\t    if (vlen == LCTF_INFO_VLEN (tmp_fp, dst_tp->ctt_info))\n-\t      return tmp;\n+\t  if (kind == CTF_K_STRUCT || kind == CTF_K_UNION\n+\t      || kind == CTF_K_ENUM)\n+\t    {\n+\t      if ((dst_tp = ctf_lookup_by_id (&tmp_fp, dst_type)) != NULL)\n+\t\tif (vlen == LCTF_INFO_VLEN (tmp_fp, dst_tp->ctt_info))\n+\t\t  return tmp;\n+\t    }\n+\t  else\n+\t    return tmp;\n \t}\n     }\n "
    }
  ]
}