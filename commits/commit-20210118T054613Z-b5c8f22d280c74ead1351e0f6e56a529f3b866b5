{
  "sha": "b5c8f22d280c74ead1351e0f6e56a529f3b866b5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjVjOGYyMmQyODBjNzRlYWQxMzUxZTBmNmU1NmE1MjlmM2I4NjZiNQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-18T05:46:13Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-18T05:46:13Z"
    },
    "message": "gdb: move remote_target::start_remote variable to narrower scope\n\nThe wait_status variable is only used when the target is in in all-stop\nmode.  We can therefore move it in the !target_is_non_stop scope.  That\nlets us remove the assert in the else, that checks that the wait status\nis not set.  If the variable doesn't exist in that scope, it pretty much\nguarantees that it is not set.\n\ngdb/ChangeLog:\n\n\t* remote.c (remote_target::start_remote): Move wait_status to\n\tnarrower scope.\n\nChange-Id: I30979135e3f4f36d04178baa67575c4e58d3b648",
    "tree": {
      "sha": "f51d2b26f13e14c0370000136c27e4cc2e3cadb3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f51d2b26f13e14c0370000136c27e4cc2e3cadb3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b5c8f22d280c74ead1351e0f6e56a529f3b866b5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b5c8f22d280c74ead1351e0f6e56a529f3b866b5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b5c8f22d280c74ead1351e0f6e56a529f3b866b5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b5c8f22d280c74ead1351e0f6e56a529f3b866b5/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e3b2741b162209a497db03ed4d19890326f16816",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e3b2741b162209a497db03ed4d19890326f16816",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e3b2741b162209a497db03ed4d19890326f16816"
    }
  ],
  "stats": {
    "total": 12,
    "additions": 7,
    "deletions": 5
  },
  "files": [
    {
      "sha": "a7c8b77938336c7f31d4d8a8dc59891d493501cc",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b5c8f22d280c74ead1351e0f6e56a529f3b866b5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b5c8f22d280c74ead1351e0f6e56a529f3b866b5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b5c8f22d280c74ead1351e0f6e56a529f3b866b5",
      "patch": "@@ -1,3 +1,8 @@\n+2021-01-18  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* remote.c (remote_target::start_remote): Move wait_status to\n+\tnarrower scope.\n+\n 2021-01-18  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* remote.c (class remote_target):"
    },
    {
      "sha": "17b0cab35c6115f05ac0d22c1440d38ee486484c",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b5c8f22d280c74ead1351e0f6e56a529f3b866b5/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b5c8f22d280c74ead1351e0f6e56a529f3b866b5/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=b5c8f22d280c74ead1351e0f6e56a529f3b866b5",
      "patch": "@@ -4636,7 +4636,6 @@ remote_target::start_remote (int from_tty, int extended_p)\n {\n   struct remote_state *rs = get_remote_state ();\n   struct packet_config *noack_config;\n-  char *wait_status = NULL;\n \n   /* Signal other parts that we're going through the initial setup,\n      and so things may not be stable yet.  E.g., we don't try to\n@@ -4776,6 +4775,8 @@ remote_target::start_remote (int from_tty, int extended_p)\n \n   if (!target_is_non_stop_p ())\n     {\n+      char *wait_status = NULL;\n+\n       if (rs->buf[0] == 'W' || rs->buf[0] == 'X')\n \t{\n \t  if (!extended_p)\n@@ -4903,10 +4904,6 @@ remote_target::start_remote (int from_tty, int extended_p)\n \t  return;\n \t}\n \n-      /* In non-stop mode, any cached wait status will be stored in\n-\t the stop reply queue.  */\n-      gdb_assert (wait_status == NULL);\n-\n       /* Report all signals during attach/startup.  */\n       pass_signals ({});\n "
    }
  ]
}