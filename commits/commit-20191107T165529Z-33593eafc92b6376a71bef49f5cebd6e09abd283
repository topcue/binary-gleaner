{
  "sha": "33593eafc92b6376a71bef49f5cebd6e09abd283",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzM1OTNlYWZjOTJiNjM3NmE3MWJlZjQ5ZjVjZWJkNmUwOWFiZDI4Mw==",
  "commit": {
    "author": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2019-11-07T16:53:40Z"
    },
    "committer": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2019-11-07T16:55:29Z"
    },
    "message": "[Patch][binutils][arm] Create a new generic coprocessor array [3/10]\n\nHi,\n\nThis patch is part of a series that adds support for Armv8.6-A\n(Matrix Multiply and BFloat16 extensions) to binutils.\n\nSome generic instructions match a large range of encoding space (e.g.\nstc, mcr, mrc).\nCurrently these instructions are in the coprocessor_opcodes array, which\nmeans they are checked before many other instructions when disassembling\narm and thumb32 codes.\n\nThis patch moves the generic instructions into a separate array to be\nchecked later on.\nThis is done in order to avoid instruction conflict between the generic\ninstructions and newer ones -- this has already been seen with MVE, and\nis also a problem with BFloat16.\n\nOne way to avoid the conflict could be to swap the search order between\ncoprocessor_opcodes and neon_opcodes.\nWe avoid this since it's a larger change that may introduce extra bugs\n(that aren't caught by the testsuite).\n\nWe have decided against searching the generic array after searching the\narm specific and thumb32 specific arrays with a similar reasoning about\nkeeping the change small.\n\nRegression tested with arm-none-linux-gnueabihf.\n\nCommitted on behalf of Mihail Ionescu.\n\nopcodes/ChangeLog:\n\n2019-10-29  Mihail Ionescu  <mihail.ionescu@arm.com>\n2019-10-29  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* arm-dis.c (print_insn_coprocessor,\n\tprint_insn_generic_coprocessor): Create wrapper functions around\n\tthe implementation of the print_insn_coprocessor control codes.\n\t(print_insn_coprocessor_1): Original print_insn_coprocessor\n\tfunction that now takes which array to look at as an argument.\n\t(print_insn_arm): Use both print_insn_coprocessor and\n\tprint_insn_generic_coprocessor.\n\t(print_insn_thumb32): As above.\n\nIs it ok for trunk?\n\nRegards,\nMihail",
    "tree": {
      "sha": "1152423bcfc13fc259e66fc5b2f1bfebd379a80c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1152423bcfc13fc259e66fc5b2f1bfebd379a80c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/33593eafc92b6376a71bef49f5cebd6e09abd283",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/33593eafc92b6376a71bef49f5cebd6e09abd283",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/33593eafc92b6376a71bef49f5cebd6e09abd283",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/33593eafc92b6376a71bef49f5cebd6e09abd283/comments",
  "author": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/df6780137dc9d832db8c5525ecc760acdbcde5c9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/df6780137dc9d832db8c5525ecc760acdbcde5c9"
    }
  ],
  "stats": {
    "total": 149,
    "additions": 98,
    "deletions": 51
  },
  "files": [
    {
      "sha": "3919c260e19e8084ef8690373a177f0df78d7b7b",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/33593eafc92b6376a71bef49f5cebd6e09abd283/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/33593eafc92b6376a71bef49f5cebd6e09abd283/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=33593eafc92b6376a71bef49f5cebd6e09abd283",
      "patch": "@@ -1,3 +1,15 @@\n+2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n+2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* arm-dis.c (print_insn_coprocessor,\n+\tprint_insn_generic_coprocessor): Create wrapper functions around\n+\tthe implementation of the print_insn_coprocessor control codes.\n+\t(print_insn_coprocessor_1): Original print_insn_coprocessor\n+\tfunction that now takes which array to look at as an argument.\n+\t(print_insn_arm): Use both print_insn_coprocessor and\n+\tprint_insn_generic_coprocessor.\n+\t(print_insn_thumb32): As above.\n+\n 2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n 2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n "
    },
    {
      "sha": "85c573034ea1e149eecbbe73eb705945040448d9",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 86,
      "deletions": 51,
      "changes": 137,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/33593eafc92b6376a71bef49f5cebd6e09abd283/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/33593eafc92b6376a71bef49f5cebd6e09abd283/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=33593eafc92b6376a71bef49f5cebd6e09abd283",
      "patch": "@@ -1184,38 +1184,7 @@ static const struct sopcode32 coprocessor_opcodes[] =\n   {ANY, ARM_FEATURE_COPROC (FPU_VFP_EXT_ARMV8),\n     0xfeb80b40, 0xffbc0fd0, \"vrint%16-17?mpna%u.f64\\t%z1, %z0\"},\n \n-  /* Generic coprocessor instructions.  */\n   {ANY, ARM_FEATURE_CORE_LOW (0), SENTINEL_GENERIC_START, 0, \"\" },\n-  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V5E),\n-    0x0c400000, 0x0ff00000, \"mcrr%c\\t%8-11d, %4-7d, %12-15R, %16-19r, cr%0-3d\"},\n-  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V5E),\n-    0x0c500000, 0x0ff00000,\n-    \"mrrc%c\\t%8-11d, %4-7d, %12-15Ru, %16-19Ru, cr%0-3d\"},\n-  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V2),\n-    0x0e000000, 0x0f000010,\n-    \"cdp%c\\t%8-11d, %20-23d, cr%12-15d, cr%16-19d, cr%0-3d, {%5-7d}\"},\n-  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V2),\n-    0x0e10f010, 0x0f10f010,\n-    \"mrc%c\\t%8-11d, %21-23d, APSR_nzcv, cr%16-19d, cr%0-3d, {%5-7d}\"},\n-  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V2),\n-    0x0e100010, 0x0f100010,\n-    \"mrc%c\\t%8-11d, %21-23d, %12-15r, cr%16-19d, cr%0-3d, {%5-7d}\"},\n-  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V2),\n-    0x0e000010, 0x0f100010,\n-    \"mcr%c\\t%8-11d, %21-23d, %12-15R, cr%16-19d, cr%0-3d, {%5-7d}\"},\n-  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V2),\n-    0x0c000000, 0x0e100000, \"stc%22'l%c\\t%8-11d, cr%12-15d, %A\"},\n-  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V2),\n-    0x0c100000, 0x0e100000, \"ldc%22'l%c\\t%8-11d, cr%12-15d, %A\"},\n-\n-  /* V6 coprocessor instructions.  */\n-  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V6),\n-    0xfc500000, 0xfff00000,\n-    \"mrrc2%c\\t%8-11d, %4-7d, %12-15Ru, %16-19Ru, cr%0-3d\"},\n-  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V6),\n-    0xfc400000, 0xfff00000,\n-    \"mcrr2%c\\t%8-11d, %4-7d, %12-15R, %16-19R, cr%0-3d\"},\n-\n   /* ARMv8.3 AdvSIMD instructions in the space of coprocessor 8.  */\n   {ANY, ARM_FEATURE_CORE_HIGH (ARM_EXT2_V8_3A),\n     0xfc800800, 0xfeb00f10, \"vcadd%c.f16\\t%12-15,22V, %16-19,7V, %0-3,5V, #%24?29%24'70\"},\n@@ -1262,21 +1231,6 @@ static const struct sopcode32 coprocessor_opcodes[] =\n   {ANY, ARM_FEATURE_CORE_HIGH (ARM_EXT2_FP16_INST | ARM_EXT2_V8_2A),\n     0xfe100850, 0xffb00f50, \"vfmsl.f16\\t%12-15,22Q, d%16-19,7d, d%0-2d[%3,5d]\"},\n \n-  /* V5 coprocessor instructions.  */\n-  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V5),\n-    0xfc100000, 0xfe100000, \"ldc2%22'l%c\\t%8-11d, cr%12-15d, %A\"},\n-  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V5),\n-    0xfc000000, 0xfe100000, \"stc2%22'l%c\\t%8-11d, cr%12-15d, %A\"},\n-  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V5),\n-    0xfe000000, 0xff000010,\n-    \"cdp2%c\\t%8-11d, %20-23d, cr%12-15d, cr%16-19d, cr%0-3d, {%5-7d}\"},\n-  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V5),\n-    0xfe000010, 0xff100010,\n-    \"mcr2%c\\t%8-11d, %21-23d, %12-15R, cr%16-19d, cr%0-3d, {%5-7d}\"},\n-  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V5),\n-    0xfe100010, 0xff100010,\n-    \"mrc2%c\\t%8-11d, %21-23d, %12-15r, cr%16-19d, cr%0-3d, {%5-7d}\"},\n-\n   /* ARMv8.2 half-precision Floating point coprocessor 9 (VFP) instructions.\n      cp_num: bit <11:8> == 0b1001.\n      cond: bit <31:28> == 0b1110, otherwise, it's UNPREDICTABLE.  */\n@@ -1358,6 +1312,60 @@ static const struct sopcode32 coprocessor_opcodes[] =\n   {ANY, ARM_FEATURE_CORE_LOW (0), 0, 0, 0}\n };\n \n+/* Generic coprocessor instructions.  These are only matched if a more specific\n+   SIMD or co-processor instruction does not match first.  */\n+\n+static const struct sopcode32 generic_coprocessor_opcodes[] =\n+{\n+  /* Generic coprocessor instructions.  */\n+  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V5E),\n+    0x0c400000, 0x0ff00000, \"mcrr%c\\t%8-11d, %4-7d, %12-15R, %16-19r, cr%0-3d\"},\n+  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V5E),\n+    0x0c500000, 0x0ff00000,\n+    \"mrrc%c\\t%8-11d, %4-7d, %12-15Ru, %16-19Ru, cr%0-3d\"},\n+  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V2),\n+    0x0e000000, 0x0f000010,\n+    \"cdp%c\\t%8-11d, %20-23d, cr%12-15d, cr%16-19d, cr%0-3d, {%5-7d}\"},\n+  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V2),\n+    0x0e10f010, 0x0f10f010,\n+    \"mrc%c\\t%8-11d, %21-23d, APSR_nzcv, cr%16-19d, cr%0-3d, {%5-7d}\"},\n+  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V2),\n+    0x0e100010, 0x0f100010,\n+    \"mrc%c\\t%8-11d, %21-23d, %12-15r, cr%16-19d, cr%0-3d, {%5-7d}\"},\n+  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V2),\n+    0x0e000010, 0x0f100010,\n+    \"mcr%c\\t%8-11d, %21-23d, %12-15R, cr%16-19d, cr%0-3d, {%5-7d}\"},\n+  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V2),\n+    0x0c000000, 0x0e100000, \"stc%22'l%c\\t%8-11d, cr%12-15d, %A\"},\n+  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V2),\n+    0x0c100000, 0x0e100000, \"ldc%22'l%c\\t%8-11d, cr%12-15d, %A\"},\n+\n+  /* V6 coprocessor instructions.  */\n+  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V6),\n+    0xfc500000, 0xfff00000,\n+    \"mrrc2%c\\t%8-11d, %4-7d, %12-15Ru, %16-19Ru, cr%0-3d\"},\n+  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V6),\n+    0xfc400000, 0xfff00000,\n+    \"mcrr2%c\\t%8-11d, %4-7d, %12-15R, %16-19R, cr%0-3d\"},\n+\n+  /* V5 coprocessor instructions.  */\n+  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V5),\n+    0xfc100000, 0xfe100000, \"ldc2%22'l%c\\t%8-11d, cr%12-15d, %A\"},\n+  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V5),\n+    0xfc000000, 0xfe100000, \"stc2%22'l%c\\t%8-11d, cr%12-15d, %A\"},\n+  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V5),\n+    0xfe000000, 0xff000010,\n+    \"cdp2%c\\t%8-11d, %20-23d, cr%12-15d, cr%16-19d, cr%0-3d, {%5-7d}\"},\n+  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V5),\n+    0xfe000010, 0xff100010,\n+    \"mcr2%c\\t%8-11d, %21-23d, %12-15R, cr%16-19d, cr%0-3d, {%5-7d}\"},\n+  {ANY, ARM_FEATURE_CORE_LOW (ARM_EXT_V5),\n+    0xfe100010, 0xff100010,\n+    \"mrc2%c\\t%8-11d, %21-23d, %12-15r, cr%16-19d, cr%0-3d, {%5-7d}\"},\n+\n+  {ANY, ARM_FEATURE_CORE_LOW (0), 0, 0, 0}\n+};\n+\n /* Neon opcode table:  This does not encode the top byte -- that is\n    checked by the print_insn_neon routine, as it depends on whether we are\n    doing thumb32 or arm32 disassembly.  */\n@@ -7887,10 +7895,11 @@ print_vec_condition (struct disassemble_info *info, long given,\n    recognised coprocessor instruction.  */\n \n static bfd_boolean\n-print_insn_coprocessor (bfd_vma pc,\n-\t\t\tstruct disassemble_info *info,\n-\t\t\tlong given,\n-\t\t\tbfd_boolean thumb)\n+print_insn_coprocessor_1 (const struct sopcode32 *opcodes,\n+\t\t\t  bfd_vma pc,\n+\t\t\t  struct disassemble_info *info,\n+\t\t\t  long given,\n+\t\t\t  bfd_boolean thumb)\n {\n   const struct sopcode32 *insn;\n   void *stream = info->stream;\n@@ -7906,7 +7915,7 @@ print_insn_coprocessor (bfd_vma pc,\n \n   allowed_arches = private_data->features;\n \n-  for (insn = coprocessor_opcodes; insn->assembler; insn++)\n+  for (insn = opcodes; insn->assembler; insn++)\n     {\n       unsigned long u_reg = 16;\n       bfd_boolean is_unpredictable = FALSE;\n@@ -8622,6 +8631,26 @@ print_insn_coprocessor (bfd_vma pc,\n   return FALSE;\n }\n \n+static bfd_boolean\n+print_insn_coprocessor (bfd_vma pc,\n+\t\t\tstruct disassemble_info *info,\n+\t\t\tlong given,\n+\t\t\tbfd_boolean thumb)\n+{\n+  return print_insn_coprocessor_1 (coprocessor_opcodes,\n+\t\t\t\t   pc, info, given, thumb);\n+}\n+\n+static bfd_boolean\n+print_insn_generic_coprocessor (bfd_vma pc,\n+\t\t\t\tstruct disassemble_info *info,\n+\t\t\t\tlong given,\n+\t\t\t\tbfd_boolean thumb)\n+{\n+  return print_insn_coprocessor_1 (generic_coprocessor_opcodes,\n+\t\t\t\t   pc, info, given, thumb);\n+}\n+\n /* Decodes and prints ARM addressing modes.  Returns the offset\n    used in the address, if any, if it is worthwhile printing the\n    offset as a hexadecimal value in a comment at the end of the\n@@ -9652,6 +9681,9 @@ print_insn_arm (bfd_vma pc, struct disassemble_info *info, long given)\n   if (print_insn_neon (info, given, FALSE))\n     return;\n \n+  if (print_insn_generic_coprocessor (pc, info, given, FALSE))\n+    return;\n+\n   for (insn = arm_opcodes; insn->assembler; insn++)\n     {\n       if ((given & insn->mask) != insn->value)\n@@ -10489,6 +10521,9 @@ print_insn_thumb32 (bfd_vma pc, struct disassemble_info *info, long given)\n   if (is_mve && print_insn_mve (info, given))\n     return;\n \n+  if (print_insn_generic_coprocessor (pc, info, given, TRUE))\n+    return;\n+\n   for (insn = thumb32_opcodes; insn->assembler; insn++)\n     if ((given & insn->mask) == insn->value)\n       {"
    }
  ]
}