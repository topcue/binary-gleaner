{
  "sha": "037e8112b9794a633248e5aa5943f3be273e0a20",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDM3ZTgxMTJiOTc5NGE2MzMyNDhlNWFhNTk0M2YzYmUyNzNlMGEyMA==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-01-20T15:29:30Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-01-20T15:29:30Z"
    },
    "message": "[gdb/server] Don't overwrite fs/gs_base with -m32\n\nConsider a minimal test-case test.c:\n...\nint main (void) { return 0; }\n...\ncompiled with -m32:\n...\n$ gcc test.c -m32\n...\n\nWhen running the exec using gdbserver on openSUSE Factory (currently running a\nlinux kernel version 5.10.5):\n...\n$ gdbserver localhost:12345 a.out\n...\nto which we connect in a gdb session, we run into a segfault in the inferior:\n...\n$ gdb -batch -q -ex \"target remote localhost:12345\" -ex continue\nProgram received signal SIGSEGV, Segmentation fault.\n0xf7dd8bd2 in init_cacheinfo () at ../sysdeps/x86/cacheinfo.c:761\n...\n\nThe segfault is caused by gdbserver overwriting $gs_base with 0 using\nPTRACE_SETREGS.  After it is overwritten, the next use of $gs in the inferior\nwill trigger the segfault.\n\nBefore linux kernel version 5.9, the value used by PTRACE_SETREGS for $gs_base\nwas ignored, but starting version 5.9, the linux kernel has support for\nintel architecture extension FSGSBASE, which allows users to modify $gs_base,\nand consequently PTRACE_SETREGS can no longer ignore the $gs_base value.\n\nThe overwrite of $gs_base with 0 is done by a memset in x86_fill_gregset,\nwhich was added in commit 9e0aa64f551 \"Fix gdbserver qGetTLSAddr for\nx86_64 -m32\".  The memset intends to zero-extend 32-bit registers that are\ntracked in the regcache to 64-bit when writing them into the PTRACE_SETREGS\ndata argument.  But in addition, it overwrites other registers that are\nnot tracked in the regcache, such as $gs_base.\n\nFix the segfault by redoing the fix from commit 9e0aa64f551 in minimal form.\n\nTested on x86_64-linux:\n- openSUSE Leap 15.2 (using kernel version 5.3.18):\n  - native\n  - gdbserver -m32\n  - -m32\n- openSUSE Factory (using kernel version 5.10.5):\n  - native\n  - m32\n\ngdbserver/ChangeLog:\n\n2021-01-20  Tom de Vries  <tdevries@suse.de>\n\n\t* linux-x86-low.cc (collect_register_i386): New function.\n\t(x86_fill_gregset):  Remove memset.  Use collect_register_i386.",
    "tree": {
      "sha": "d1a60fb8935822581e8413e5b401477bc56101fd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d1a60fb8935822581e8413e5b401477bc56101fd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/037e8112b9794a633248e5aa5943f3be273e0a20",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/037e8112b9794a633248e5aa5943f3be273e0a20",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/037e8112b9794a633248e5aa5943f3be273e0a20",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/037e8112b9794a633248e5aa5943f3be273e0a20/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4bd7c90276a11ee2f43c6bbe62f2379f3a225234",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4bd7c90276a11ee2f43c6bbe62f2379f3a225234",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4bd7c90276a11ee2f43c6bbe62f2379f3a225234"
    }
  ],
  "stats": {
    "total": 60,
    "additions": 38,
    "deletions": 22
  },
  "files": [
    {
      "sha": "7231d9a47b4bb5fcb3c4d932865d153f072538f5",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/037e8112b9794a633248e5aa5943f3be273e0a20/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/037e8112b9794a633248e5aa5943f3be273e0a20/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=037e8112b9794a633248e5aa5943f3be273e0a20",
      "patch": "@@ -1,3 +1,8 @@\n+2021-01-20  Tom de Vries  <tdevries@suse.de>\n+\n+\t* linux-x86-low.cc (collect_register_i386): New function.\n+\t(x86_fill_gregset):  Remove memset.  Use collect_register_i386.\n+\n 2021-01-07  Tom de Vries  <tdevries@suse.de>\n \n \t* Makefile.in (LIBIBERTY_NORMAL, LIBIBERTY_NOASAN, LIBIBERTY_PIC):"
    },
    {
      "sha": "d3273a18f47bd8d403c0363d23fe88f8c333ec4f",
      "filename": "gdbserver/linux-x86-low.cc",
      "status": "modified",
      "additions": 33,
      "deletions": 22,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/037e8112b9794a633248e5aa5943f3be273e0a20/gdbserver/linux-x86-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/037e8112b9794a633248e5aa5943f3be273e0a20/gdbserver/linux-x86-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-x86-low.cc?ref=037e8112b9794a633248e5aa5943f3be273e0a20",
      "patch": "@@ -397,6 +397,35 @@ x86_target::low_cannot_fetch_register (int regno)\n   return regno >= I386_NUM_REGS;\n }\n \n+static void\n+collect_register_i386 (struct regcache *regcache, int regno, void *buf)\n+{\n+  collect_register (regcache, regno, buf);\n+\n+#ifdef __x86_64__\n+  /* In case of x86_64 -m32, collect_register only writes 4 bytes, but the\n+     space reserved in buf for the register is 8 bytes.  Make sure the entire\n+     reserved space is initialized.  */\n+\n+  gdb_assert (register_size (regcache->tdesc, regno) == 4);\n+\n+  if (regno == RAX)\n+    {\n+      /* Sign extend EAX value to avoid potential syscall restart\n+\t problems.\n+\n+\t See amd64_linux_collect_native_gregset() in\n+\t gdb/amd64-linux-nat.c for a detailed explanation.  */\n+      *(int64_t *) buf = *(int32_t *) buf;\n+    }\n+  else\n+    {\n+      /* Zero-extend.  */\n+      *(uint64_t *) buf = *(uint32_t *) buf;\n+    }\n+#endif\n+}\n+\n static void\n x86_fill_gregset (struct regcache *regcache, void *buf)\n {\n@@ -411,32 +440,14 @@ x86_fill_gregset (struct regcache *regcache, void *buf)\n \n       return;\n     }\n-\n-  /* 32-bit inferior registers need to be zero-extended.\n-     Callers would read uninitialized memory otherwise.  */\n-  memset (buf, 0x00, X86_64_USER_REGS * 8);\n #endif\n \n   for (i = 0; i < I386_NUM_REGS; i++)\n-    collect_register (regcache, i, ((char *) buf) + i386_regmap[i]);\n-\n-  collect_register_by_name (regcache, \"orig_eax\",\n-\t\t\t    ((char *) buf) + ORIG_EAX * REGSIZE);\n+    collect_register_i386 (regcache, i, ((char *) buf) + i386_regmap[i]);\n \n-#ifdef __x86_64__\n-  /* Sign extend EAX value to avoid potential syscall restart\n-     problems. \n-\n-     See amd64_linux_collect_native_gregset() in gdb/amd64-linux-nat.c\n-     for a detailed explanation.  */\n-  if (register_size (regcache->tdesc, 0) == 4)\n-    {\n-      void *ptr = ((gdb_byte *) buf\n-\t\t   + i386_regmap[find_regno (regcache->tdesc, \"eax\")]);\n-\n-      *(int64_t *) ptr = *(int32_t *) ptr;\n-    }\n-#endif\n+  /* Handle ORIG_EAX, which is not in i386_regmap.  */\n+  collect_register_i386 (regcache, find_regno (regcache->tdesc, \"orig_eax\"),\n+\t\t\t ((char *) buf) + ORIG_EAX * REGSIZE);\n }\n \n static void"
    }
  ]
}