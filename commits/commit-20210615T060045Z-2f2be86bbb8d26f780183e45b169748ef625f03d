{
  "sha": "2f2be86bbb8d26f780183e45b169748ef625f03d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmYyYmU4NmJiYjhkMjZmNzgwMTgzZTQ1YjE2OTc0OGVmNjI1ZjAzZA==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-06-15T06:00:45Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-06-15T06:00:45Z"
    },
    "message": "x86: simplify .dispNN setting\n\nFirst of all eliminate the disp{16,32,32s} static variables, which are\nused solely for setting a temporary variable in build_modrm_byte(). The\neffect there can be had without use of such a temporary and without\noperand_type_or(), by just setting the single bit each that needs\nsetting.\n\nThen use operand_type_and_not(..., anydisp) when all dispNN bits want\nclearing together.",
    "tree": {
      "sha": "43118b9e088c86ed84e75c447dbbd1a1a85fcc8f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/43118b9e088c86ed84e75c447dbbd1a1a85fcc8f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2f2be86bbb8d26f780183e45b169748ef625f03d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f2be86bbb8d26f780183e45b169748ef625f03d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2f2be86bbb8d26f780183e45b169748ef625f03d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f2be86bbb8d26f780183e45b169748ef625f03d/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "649658972ca923250019ca15e4ddd98bf28bf123",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/649658972ca923250019ca15e4ddd98bf28bf123",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/649658972ca923250019ca15e4ddd98bf28bf123"
    }
  ],
  "stats": {
    "total": 75,
    "additions": 24,
    "deletions": 51
  },
  "files": [
    {
      "sha": "d01ba239f3f628abcee2423ef8c25a4b83de794e",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f2be86bbb8d26f780183e45b169748ef625f03d/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f2be86bbb8d26f780183e45b169748ef625f03d/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=2f2be86bbb8d26f780183e45b169748ef625f03d",
      "patch": "@@ -1,3 +1,10 @@\n+2021-06-15  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (disp16, disp32, disp32s): Delete.\n+\t(optimize_disp, i386_finalize_displacement): Use\n+\toperand_type_and_not.\n+\t(build_modrm_byte): Likewise. Eliminate local variable newdisp.\n+\n 2021-06-15  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (offset_in_range): Bail early when mask would"
    },
    {
      "sha": "18187d7bfa1f6a7d7339d067b95cb47376af7bee",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 17,
      "deletions": 51,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f2be86bbb8d26f780183e45b169748ef625f03d/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f2be86bbb8d26f780183e45b169748ef625f03d/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=2f2be86bbb8d26f780183e45b169748ef625f03d",
      "patch": "@@ -2089,9 +2089,6 @@ operand_type_xor (i386_operand_type x, i386_operand_type y)\n   return x;\n }\n \n-static const i386_operand_type disp16 = OPERAND_TYPE_DISP16;\n-static const i386_operand_type disp32 = OPERAND_TYPE_DISP32;\n-static const i386_operand_type disp32s = OPERAND_TYPE_DISP32S;\n static const i386_operand_type disp16_32 = OPERAND_TYPE_DISP16_32;\n static const i386_operand_type anydisp = OPERAND_TYPE_ANYDISP;\n static const i386_operand_type anyimm = OPERAND_TYPE_ANYIMM;\n@@ -5884,12 +5881,8 @@ optimize_disp (void)\n \n \t    if (!op_disp && i.types[op].bitfield.baseindex)\n \t      {\n-\t\ti.types[op].bitfield.disp8 = 0;\n-\t\ti.types[op].bitfield.disp16 = 0;\n-\t\ti.types[op].bitfield.disp32 = 0;\n-\t\ti.types[op].bitfield.disp32s = 0;\n-\t\ti.types[op].bitfield.disp64 = 0;\n-\t\ti.op[op].disps = 0;\n+\t\ti.types[op] = operand_type_and_not (i.types[op], anydisp);\n+\t\ti.op[op].disps = NULL;\n \t\ti.disp_operands--;\n \t\tcontinue;\n \t      }\n@@ -5938,11 +5931,7 @@ optimize_disp (void)\n \t  {\n \t    fix_new_exp (frag_now, frag_more (0) - frag_now->fr_literal, 0,\n \t\t\t i.op[op].disps, 0, i.reloc[op]);\n-\t    i.types[op].bitfield.disp8 = 0;\n-\t    i.types[op].bitfield.disp16 = 0;\n-\t    i.types[op].bitfield.disp32 = 0;\n-\t    i.types[op].bitfield.disp32s = 0;\n-\t    i.types[op].bitfield.disp64 = 0;\n+\t    i.types[op] = operand_type_and_not (i.types[op], anydisp);\n \t  }\n  \telse\n \t  /* We only support 64bit displacement on constants.  */\n@@ -8261,20 +8250,11 @@ build_modrm_byte (void)\n \t\t{\n \t\t  i.sib.base = NO_BASE_REGISTER;\n \t\t  i.sib.scale = i.log2_scale_factor;\n-\t\t  i.types[op].bitfield.disp8 = 0;\n-\t\t  i.types[op].bitfield.disp16 = 0;\n-\t\t  i.types[op].bitfield.disp64 = 0;\n+\t\t  i.types[op] = operand_type_and_not (i.types[op], anydisp);\n \t\t  if (want_disp32 (&i.tm))\n-\t\t    {\n-\t\t      /* Must be 32 bit */\n-\t\t      i.types[op].bitfield.disp32 = 1;\n-\t\t      i.types[op].bitfield.disp32s = 0;\n-\t\t    }\n+\t\t    i.types[op].bitfield.disp32 = 1;\n \t\t  else\n-\t\t    {\n-\t\t      i.types[op].bitfield.disp32 = 0;\n-\t\t      i.types[op].bitfield.disp32s = 1;\n-\t\t    }\n+\t\t    i.types[op].bitfield.disp32s = 1;\n \t\t}\n \n \t      /* Since the mandatory SIB always has index register, so\n@@ -8300,12 +8280,11 @@ build_modrm_byte (void)\n \t\tfake_zero_displacement = 1;\n \t      if (i.index_reg == 0)\n \t\t{\n-\t\t  i386_operand_type newdisp;\n-\n \t\t  /* Both check for VSIB and mandatory non-vector SIB. */\n \t\t  gas_assert (!i.tm.opcode_modifier.sib\n \t\t\t      || i.tm.opcode_modifier.sib == SIBMEM);\n \t\t  /* Operand is just <disp>  */\n+\t\t  i.types[op] = operand_type_and_not (i.types[op], anydisp);\n \t\t  if (flag_code == CODE_64BIT)\n \t\t    {\n \t\t      /* 64bit mode overwrites the 32bit absolute\n@@ -8315,21 +8294,22 @@ build_modrm_byte (void)\n \t\t      i.rm.regmem = ESCAPE_TO_TWO_BYTE_ADDRESSING;\n \t\t      i.sib.base = NO_BASE_REGISTER;\n \t\t      i.sib.index = NO_INDEX_REGISTER;\n-\t\t      newdisp = (want_disp32(&i.tm) ? disp32 : disp32s);\n+\t\t      if (want_disp32 (&i.tm))\n+\t\t\ti.types[op].bitfield.disp32 = 1;\n+\t\t      else\n+\t\t\ti.types[op].bitfield.disp32s = 1;\n \t\t    }\n \t\t  else if ((flag_code == CODE_16BIT)\n \t\t\t   ^ (i.prefix[ADDR_PREFIX] != 0))\n \t\t    {\n \t\t      i.rm.regmem = NO_BASE_REGISTER_16;\n-\t\t      newdisp = disp16;\n+\t\t      i.types[op].bitfield.disp16 = 1;\n \t\t    }\n \t\t  else\n \t\t    {\n \t\t      i.rm.regmem = NO_BASE_REGISTER;\n-\t\t      newdisp = disp32;\n+\t\t      i.types[op].bitfield.disp32 = 1;\n \t\t    }\n-\t\t  i.types[op] = operand_type_and_not (i.types[op], anydisp);\n-\t\t  i.types[op] = operand_type_or (i.types[op], newdisp);\n \t\t}\n \t      else if (!i.tm.opcode_modifier.sib)\n \t\t{\n@@ -8341,20 +8321,11 @@ build_modrm_byte (void)\n \t\t  i.sib.base = NO_BASE_REGISTER;\n \t\t  i.sib.scale = i.log2_scale_factor;\n \t\t  i.rm.regmem = ESCAPE_TO_TWO_BYTE_ADDRESSING;\n-\t\t  i.types[op].bitfield.disp8 = 0;\n-\t\t  i.types[op].bitfield.disp16 = 0;\n-\t\t  i.types[op].bitfield.disp64 = 0;\n+\t\t  i.types[op] = operand_type_and_not (i.types[op], anydisp);\n \t\t  if (want_disp32 (&i.tm))\n-\t\t    {\n-\t\t      /* Must be 32 bit */\n-\t\t      i.types[op].bitfield.disp32 = 1;\n-\t\t      i.types[op].bitfield.disp32s = 0;\n-\t\t    }\n+\t\t    i.types[op].bitfield.disp32 = 1;\n \t\t  else\n-\t\t    {\n-\t\t      i.types[op].bitfield.disp32 = 0;\n-\t\t      i.types[op].bitfield.disp32s = 1;\n-\t\t    }\n+\t\t    i.types[op].bitfield.disp32s = 1;\n \t\t  if ((i.index_reg->reg_flags & RegRex) != 0)\n \t\t    i.rex |= REX_X;\n \t\t}\n@@ -11045,12 +11016,7 @@ i386_finalize_displacement (segT exp_seg ATTRIBUTE_UNUSED, expressionS *exp,\n     i.types[this_operand].bitfield.disp8 = 1;\n \n   /* Check if this is a displacement only operand.  */\n-  bigdisp = i.types[this_operand];\n-  bigdisp.bitfield.disp8 = 0;\n-  bigdisp.bitfield.disp16 = 0;\n-  bigdisp.bitfield.disp32 = 0;\n-  bigdisp.bitfield.disp32s = 0;\n-  bigdisp.bitfield.disp64 = 0;\n+  bigdisp = operand_type_and_not (i.types[this_operand], anydisp);\n   if (operand_type_all_zero (&bigdisp))\n     i.types[this_operand] = operand_type_and (i.types[this_operand],\n \t\t\t\t\t      types);"
    }
  ]
}