{
  "sha": "94aeb44b001ab2d632806242a3bacb0a879abe15",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTRhZWI0NGIwMDFhYjJkNjMyODA2MjQyYTNiYWNiMGE4NzlhYmUxNQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-04-24T12:50:06Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-04-25T18:59:35Z"
    },
    "message": "Make exception handling more efficient\n\nThis makes exception handling more efficient in a few spots, through\nthe use of const- and rvalue-references.\n\nI wrote this patch by commenting out the gdb_exception copy\nconstructor and then examining the resulting error messages one by\none, introducing the use of std::move where appropriate.\n\ngdb/ChangeLog\n2019-04-25  Tom Tromey  <tromey@adacore.com>\n\n\t* xml-support.c (struct gdb_xml_parser) <set_error>: Take an\n\trvalue reference.\n\t(gdb_xml_start_element_wrapper, gdb_xml_end_element_wrapper)\n\t(gdb_xml_parser::parse): Use std::move.\n\t* python/python-internal.h (gdbpy_convert_exception): Take a const\n\treference.\n\t* python/py-value.c (valpy_getitem, valpy_nonzero): Use\n\tstd::move.\n\t* python/py-utils.c (gdbpy_convert_exception): Take a const\n\treference.\n\t* python/py-inferior.c (infpy_write_memory, infpy_search_memory):\n\tUse std::move.\n\t* python/py-breakpoint.c (bppy_set_condition, bppy_set_commands):\n\tUse std::move.\n\t* mi/mi-main.c (mi_print_exception): Take a const reference.\n\t* main.c (handle_command_errors): Take a const reference.\n\t* linespec.c (parse_linespec): Use std::move.\n\t* infcall.c (run_inferior_call): Use std::move.\n\t(call_function_by_hand_dummy): Use std::move.\n\t* exec.c (try_open_exec_file): Use std::move.\n\t* exceptions.h (exception_print, exception_fprintf)\n\t(exception_print_same): Update.\n\t* exceptions.c (print_exception, exception_print)\n\t(exception_fprintf, exception_print_same): Change parameters to\n\tconst reference.\n\t* event-top.c (gdb_rl_callback_read_char_wrapper): Update.\n\t* common/new-op.c: Use std::move.\n\t* common/common-exceptions.h (struct gdb_exception): Add move\n\tconstructor.\n\t(struct gdb_exception_error, struct gdb_exception_quit, struct\n\tgdb_quit_bad_alloc): Change constructor to move constructor.\n\t(throw_exception): Change parameter to rvalue reference.\n\t* common/common-exceptions.c (throw_exception): Take rvalue\n\treference.\n\t* cli/cli-interp.c (safe_execute_command): Use std::move.\n\t* breakpoint.c (insert_bp_location, location_to_sals): Use\n\tstd::move.",
    "tree": {
      "sha": "edff0a78beb11b19021e0679c1168e14c96bd84a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/edff0a78beb11b19021e0679c1168e14c96bd84a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/94aeb44b001ab2d632806242a3bacb0a879abe15",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/94aeb44b001ab2d632806242a3bacb0a879abe15",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/94aeb44b001ab2d632806242a3bacb0a879abe15",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/94aeb44b001ab2d632806242a3bacb0a879abe15/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "680d7fd5fcff860a31021845389d4dfeb7b42e3c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/680d7fd5fcff860a31021845389d4dfeb7b42e3c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/680d7fd5fcff860a31021845389d4dfeb7b42e3c"
    }
  ],
  "stats": {
    "total": 173,
    "additions": 110,
    "deletions": 63
  },
  "files": [
    {
      "sha": "3e28e77cb73980b16108a11a10f9a944aa5a9dd6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -1,3 +1,43 @@\n+2019-04-25  Tom Tromey  <tromey@adacore.com>\n+\n+\t* xml-support.c (struct gdb_xml_parser) <set_error>: Take an\n+\trvalue reference.\n+\t(gdb_xml_start_element_wrapper, gdb_xml_end_element_wrapper)\n+\t(gdb_xml_parser::parse): Use std::move.\n+\t* python/python-internal.h (gdbpy_convert_exception): Take a const\n+\treference.\n+\t* python/py-value.c (valpy_getitem, valpy_nonzero): Use\n+\tstd::move.\n+\t* python/py-utils.c (gdbpy_convert_exception): Take a const\n+\treference.\n+\t* python/py-inferior.c (infpy_write_memory, infpy_search_memory):\n+\tUse std::move.\n+\t* python/py-breakpoint.c (bppy_set_condition, bppy_set_commands):\n+\tUse std::move.\n+\t* mi/mi-main.c (mi_print_exception): Take a const reference.\n+\t* main.c (handle_command_errors): Take a const reference.\n+\t* linespec.c (parse_linespec): Use std::move.\n+\t* infcall.c (run_inferior_call): Use std::move.\n+\t(call_function_by_hand_dummy): Use std::move.\n+\t* exec.c (try_open_exec_file): Use std::move.\n+\t* exceptions.h (exception_print, exception_fprintf)\n+\t(exception_print_same): Update.\n+\t* exceptions.c (print_exception, exception_print)\n+\t(exception_fprintf, exception_print_same): Change parameters to\n+\tconst reference.\n+\t* event-top.c (gdb_rl_callback_read_char_wrapper): Update.\n+\t* common/new-op.c: Use std::move.\n+\t* common/common-exceptions.h (struct gdb_exception): Add move\n+\tconstructor.\n+\t(struct gdb_exception_error, struct gdb_exception_quit, struct\n+\tgdb_quit_bad_alloc): Change constructor to move constructor.\n+\t(throw_exception): Change parameter to rvalue reference.\n+\t* common/common-exceptions.c (throw_exception): Take rvalue\n+\treference.\n+\t* cli/cli-interp.c (safe_execute_command): Use std::move.\n+\t* breakpoint.c (insert_bp_location, location_to_sals): Use\n+\tstd::move.\n+\n 2019-04-25  Tom Tromey  <tromey@adacore.com>\n \n \t* guile/scm-exception.c (gdbscm_scm_from_gdb_exception)"
    },
    {
      "sha": "f6d2f36d0a4020d81eb9b4e6ec350f796ebedb9d",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 9,
      "deletions": 9,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -2545,9 +2545,9 @@ insert_bp_location (struct bp_location *bl,\n \t      if (val)\n \t\tbp_excpt = gdb_exception {RETURN_ERROR, GENERIC_ERROR};\n \t    }\n-\t  catch (const gdb_exception &e)\n+\t  catch (gdb_exception &e)\n \t    {\n-\t      bp_excpt = e;\n+\t      bp_excpt = std::move (e);\n \t    }\n \t}\n       else\n@@ -2584,9 +2584,9 @@ insert_bp_location (struct bp_location *bl,\n \t\t\tbp_excpt\n \t\t\t  = gdb_exception {RETURN_ERROR, GENERIC_ERROR};\n \t\t    }\n-\t\t  catch (const gdb_exception &e)\n+\t\t  catch (gdb_exception &e)\n \t\t    {\n-\t\t      bp_excpt = e;\n+\t\t      bp_excpt = std::move (e);\n \t\t    }\n \n \t\t  if (bp_excpt.reason != 0)\n@@ -2608,9 +2608,9 @@ insert_bp_location (struct bp_location *bl,\n \t\t  if (val)\n \t\t    bp_excpt = gdb_exception {RETURN_ERROR, GENERIC_ERROR};\n \t        }\n-\t      catch (const gdb_exception &e)\n+\t      catch (gdb_exception &e)\n \t        {\n-\t\t  bp_excpt = e;\n+\t\t  bp_excpt = std::move (e);\n \t        }\n \t    }\n \t  else\n@@ -13603,12 +13603,10 @@ location_to_sals (struct breakpoint *b, struct event_location *location,\n     {\n       sals = b->ops->decode_location (b, location, search_pspace);\n     }\n-  catch (const gdb_exception_error &e)\n+  catch (gdb_exception_error &e)\n     {\n       int not_found_and_ok = 0;\n \n-      exception = e;\n-\n       /* For pending breakpoints, it's expected that parsing will\n \t fail until the right shared library is loaded.  User has\n \t already told to create pending breakpoints and don't need\n@@ -13637,6 +13635,8 @@ location_to_sals (struct breakpoint *b, struct event_location *location,\n \t  b->enable_state = bp_disabled;\n \t  throw;\n \t}\n+\n+      exception = std::move (e);\n     }\n \n   if (exception.reason == 0 || exception.error != NOT_FOUND_ERROR)"
    },
    {
      "sha": "fc4b39a9c2a4c888f48b8129376b62fc8625ef04",
      "filename": "gdb/cli/cli-interp.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/cli/cli-interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/cli/cli-interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-interp.c?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -367,9 +367,9 @@ safe_execute_command (struct ui_out *command_uiout, const char *command,\n     {\n       execute_command (command, from_tty);\n     }\n-  catch (const gdb_exception &exception)\n+  catch (gdb_exception &exception)\n     {\n-      e = exception;\n+      e = std::move (exception);\n     }\n \n   /* FIXME: cagney/2005-01-13: This shouldn't be needed.  Instead the"
    },
    {
      "sha": "9f210250a6f1313d2e90aeba691f307af6d35059",
      "filename": "gdb/common/common-exceptions.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/common/common-exceptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/common/common-exceptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.c?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -180,12 +180,12 @@ throw_exception_sjlj (const struct gdb_exception &exception)\n /* Implementation of throw_exception that uses C++ try/catch.  */\n \n void\n-throw_exception (const gdb_exception &exception)\n+throw_exception (gdb_exception &&exception)\n {\n   if (exception.reason == RETURN_QUIT)\n-    throw gdb_exception_quit (exception);\n+    throw gdb_exception_quit (std::move (exception));\n   else if (exception.reason == RETURN_ERROR)\n-    throw gdb_exception_error (exception);\n+    throw gdb_exception_error (std::move (exception));\n   else\n     gdb_assert_not_reached (\"invalid return reason\");\n }"
    },
    {
      "sha": "ebcaf031354336ae733fe6cc0f28228fa386e3db",
      "filename": "gdb/common/common-exceptions.h",
      "status": "modified",
      "additions": 11,
      "deletions": 7,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/common/common-exceptions.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/common/common-exceptions.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.h?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -133,6 +133,10 @@ struct gdb_exception\n   {\n   }\n \n+  /* The move constructor exists so that we can mark it \"noexcept\",\n+     which is a good practice for any sort of exception object.  */\n+  explicit gdb_exception (gdb_exception &&other) noexcept = default;\n+\n   /* The copy constructor exists so that we can mark it \"noexcept\",\n      which is a good practice for any sort of exception object.  */\n   gdb_exception (const gdb_exception &other) noexcept\n@@ -232,8 +236,8 @@ struct gdb_exception_error : public gdb_exception\n   {\n   }\n \n-  explicit gdb_exception_error (const gdb_exception &ex) noexcept\n-    : gdb_exception (ex)\n+  explicit gdb_exception_error (gdb_exception &&ex) noexcept\n+    : gdb_exception (std::move (ex))\n   {\n     gdb_assert (ex.reason == RETURN_ERROR);\n   }\n@@ -247,8 +251,8 @@ struct gdb_exception_quit : public gdb_exception\n   {\n   }\n \n-  explicit gdb_exception_quit (const gdb_exception &ex) noexcept\n-    : gdb_exception (ex)\n+  explicit gdb_exception_quit (gdb_exception &&ex) noexcept\n+    : gdb_exception (std::move (ex))\n   {\n     gdb_assert (ex.reason == RETURN_QUIT);\n   }\n@@ -264,8 +268,8 @@ struct gdb_quit_bad_alloc\n   : public gdb_exception_quit,\n     public std::bad_alloc\n {\n-  explicit gdb_quit_bad_alloc (const gdb_exception &ex) noexcept\n-    : gdb_exception_quit (ex),\n+  explicit gdb_quit_bad_alloc (gdb_exception &&ex) noexcept\n+    : gdb_exception_quit (std::move (ex)),\n       std::bad_alloc ()\n   {\n   }\n@@ -276,7 +280,7 @@ struct gdb_quit_bad_alloc\n /* Throw an exception (as described by \"struct gdb_exception\"),\n    landing in the inner most containing exception handler established\n    using TRY/CATCH.  */\n-extern void throw_exception (const gdb_exception &exception)\n+extern void throw_exception (gdb_exception &&exception)\n      ATTRIBUTE_NORETURN;\n \n /* Throw an exception by executing a LONG JUMP to the inner most"
    },
    {
      "sha": "7c5dba0be6da571adf38a6af4c47807159ad8bf6",
      "filename": "gdb/common/new-op.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/common/new-op.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/common/new-op.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/new-op.c?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -64,9 +64,9 @@ operator new (std::size_t sz)\n \t{\n \t  malloc_failure (sz);\n \t}\n-      catch (const gdb_exception &ex)\n+      catch (gdb_exception &ex)\n \t{\n-\t  throw gdb_quit_bad_alloc (ex);\n+\t  throw gdb_quit_bad_alloc (std::move (ex));\n \t}\n     }\n   return p;"
    },
    {
      "sha": "9fa46c8ad44bbe2e91ef479c54e97a219269cb8d",
      "filename": "gdb/event-top.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/event-top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/event-top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/event-top.c?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -193,7 +193,7 @@ gdb_rl_callback_read_char_wrapper (gdb_client_data client_data)\n \n   /* Rethrow using the normal EH mechanism.  */\n   if (gdb_expt.reason < 0)\n-    throw_exception (gdb_expt);\n+    throw_exception (std::move (gdb_expt));\n }\n \n /* GDB's readline callback handler.  Calls the current INPUT_HANDLER,"
    },
    {
      "sha": "ebdc71d98d40af59b086fceb4bccbc3bc710b3df",
      "filename": "gdb/exceptions.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/exceptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/exceptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exceptions.c?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -74,7 +74,7 @@ print_flush (void)\n }\n \n static void\n-print_exception (struct ui_file *file, struct gdb_exception e)\n+print_exception (struct ui_file *file, const struct gdb_exception &e)\n {\n   /* KLUGE: cagney/2005-01-13: Write the string out one line at a time\n      as that way the MI's behavior is preserved.  */\n@@ -110,7 +110,7 @@ print_exception (struct ui_file *file, struct gdb_exception e)\n }\n \n void\n-exception_print (struct ui_file *file, struct gdb_exception e)\n+exception_print (struct ui_file *file, const struct gdb_exception &e)\n {\n   if (e.reason < 0 && e.message != NULL)\n     {\n@@ -120,7 +120,7 @@ exception_print (struct ui_file *file, struct gdb_exception e)\n }\n \n void\n-exception_fprintf (struct ui_file *file, struct gdb_exception e,\n+exception_fprintf (struct ui_file *file, const struct gdb_exception &e,\n \t\t   const char *prefix, ...)\n {\n   if (e.reason < 0 && e.message != NULL)\n@@ -141,7 +141,8 @@ exception_fprintf (struct ui_file *file, struct gdb_exception e,\n /* See exceptions.h.  */\n \n int\n-exception_print_same (struct gdb_exception e1, struct gdb_exception e2)\n+exception_print_same (const struct gdb_exception &e1,\n+\t\t      const struct gdb_exception &e2)\n {\n   const char *msg1 = e1.message == nullptr ? \"\" : e1.what ();\n   const char *msg2 = e2.message == nullptr ? \"\" : e2.what ();"
    },
    {
      "sha": "e169b25c6774e64c73716817e83831593d50512f",
      "filename": "gdb/exceptions.h",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/exceptions.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/exceptions.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exceptions.h?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -24,12 +24,14 @@\n \n /* If E is an exception, print it's error message on the specified\n    stream.  For _fprintf, prefix the message with PREFIX...  */\n-extern void exception_print (struct ui_file *file, struct gdb_exception e);\n-extern void exception_fprintf (struct ui_file *file, struct gdb_exception e,\n+extern void exception_print (struct ui_file *file,\n+\t\t\t     const struct gdb_exception &e);\n+extern void exception_fprintf (struct ui_file *file,\n+\t\t\t       const struct gdb_exception &e,\n \t\t\t       const char *prefix,\n \t\t\t       ...) ATTRIBUTE_PRINTF (3, 4);\n \n /* Compare two exception objects for print equality.  */\n-extern int exception_print_same (struct gdb_exception e1,\n-\t\t\t\t struct gdb_exception e2);\n+extern int exception_print_same (const struct gdb_exception &e1,\n+\t\t\t\t const struct gdb_exception &e2);\n #endif"
    },
    {
      "sha": "7de92347f2eee516cb8db2aa6b70a89c7ffd8947",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -167,12 +167,12 @@ try_open_exec_file (const char *exec_file_host, struct inferior *inf,\n \t exec_file_attach will clear state.  */\n       exec_file_attach (exec_file_host, add_flags & SYMFILE_VERBOSE);\n     }\n-  catch (const gdb_exception_error &err)\n+  catch (gdb_exception_error &err)\n     {\n       if (err.message != NULL)\n \twarning (\"%s\", err.what ());\n \n-      prev_err = err;\n+      prev_err = std::move (err);\n     }\n \n   if (exec_file_host != NULL)"
    },
    {
      "sha": "af60fdc56b2911f1813c41f7b59c990f10b6978c",
      "filename": "gdb/infcall.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/infcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/infcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcall.c?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -605,9 +605,9 @@ run_inferior_call (struct call_thread_fsm *sm,\n \t target supports asynchronous execution.  */\n       wait_sync_command_done ();\n     }\n-  catch (const gdb_exception &e)\n+  catch (gdb_exception &e)\n     {\n-      caught_error = e;\n+      caught_error = std::move (e);\n     }\n \n   /* If GDB has the prompt blocked before, then ensure that it remains\n@@ -1195,7 +1195,7 @@ When the function is done executing, GDB will silently stop.\"),\n \t\t       e.what (), name);\n \tcase RETURN_QUIT:\n \tdefault:\n-\t  throw_exception (e);\n+\t  throw_exception (std::move (e));\n \t}\n     }\n "
    },
    {
      "sha": "f418e03b774531a8af0b0c16090f378b4fad3e81",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -2613,9 +2613,9 @@ parse_linespec (linespec_parser *parser, const char *arg,\n \t    = symtabs_from_filename (user_filename.get (),\n \t\t\t\t     PARSER_STATE (parser)->search_pspace);\n \t}\n-      catch (const gdb_exception_error &ex)\n+      catch (gdb_exception_error &ex)\n \t{\n-\t  file_exception = ex;\n+\t  file_exception = std::move (ex);\n \t}\n \n       if (file_exception.reason >= 0)\n@@ -2663,7 +2663,7 @@ parse_linespec (linespec_parser *parser, const char *arg,\n       /* The linespec didn't parse.  Re-throw the file exception if\n \t there was one.  */\n       if (file_exception.reason < 0)\n-\tthrow_exception (file_exception);\n+\tthrow_exception (std::move (file_exception));\n \n       /* Otherwise, the symbol is not found.  */\n       symbol_not_found_error (PARSER_EXPLICIT (parser)->function_name,"
    },
    {
      "sha": "35df1e497f4f49bf8c700796ef17dc02c6b7ad7d",
      "filename": "gdb/main.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/main.c?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -339,7 +339,7 @@ captured_command_loop ()\n /* Handle command errors thrown from within catch_command_errors.  */\n \n static int\n-handle_command_errors (struct gdb_exception e)\n+handle_command_errors (const struct gdb_exception &e)\n {\n   if (e.reason < 0)\n     {"
    },
    {
      "sha": "2b9883cb99f4df237d69e7f0edbe2ef4452edd7c",
      "filename": "gdb/mi/mi-main.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/mi/mi-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/mi/mi-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-main.c?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -1875,7 +1875,7 @@ captured_mi_execute_command (struct ui_out *uiout, struct mi_parse *context)\n /* Print a gdb exception to the MI output stream.  */\n \n static void\n-mi_print_exception (const char *token, struct gdb_exception exception)\n+mi_print_exception (const char *token, const struct gdb_exception &exception)\n {\n   struct mi_interp *mi = (struct mi_interp *) current_interpreter ();\n "
    },
    {
      "sha": "fc9543eba0e1720f6584d15d71281f2d3f5c89d4",
      "filename": "gdb/python/py-breakpoint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/python/py-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/python/py-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-breakpoint.c?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -469,9 +469,9 @@ bppy_set_condition (PyObject *self, PyObject *newvalue, void *closure)\n     {\n       set_breakpoint_condition (self_bp->bp, exp, 0);\n     }\n-  catch (const gdb_exception &ex)\n+  catch (gdb_exception &ex)\n     {\n-      except = ex;\n+      except = std::move (ex);\n     }\n \n   GDB_PY_SET_HANDLE_EXCEPTION (except);\n@@ -540,9 +540,9 @@ bppy_set_commands (PyObject *self, PyObject *newvalue, void *closure)\n       counted_command_line lines = read_command_lines_1 (reader, 1, nullptr);\n       breakpoint_set_commands (self_bp->bp, std::move (lines));\n     }\n-  catch (const gdb_exception &ex)\n+  catch (gdb_exception &ex)\n     {\n-      except = ex;\n+      except = std::move (ex);\n     }\n \n   GDB_PY_SET_HANDLE_EXCEPTION (except);"
    },
    {
      "sha": "7e7d518c5577683d62324f7935e0851052a74a7e",
      "filename": "gdb/python/py-inferior.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/python/py-inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/python/py-inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-inferior.c?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -574,9 +574,9 @@ infpy_write_memory (PyObject *self, PyObject *args, PyObject *kw)\n     {\n       write_memory_with_notification (addr, buffer, length);\n     }\n-  catch (const gdb_exception &ex)\n+  catch (gdb_exception &ex)\n     {\n-      except = ex;\n+      except = std::move (ex);\n     }\n \n   GDB_PY_HANDLE_EXCEPTION (except);\n@@ -728,9 +728,9 @@ infpy_search_memory (PyObject *self, PyObject *args, PyObject *kw)\n \t\t\t\t    buffer, pattern_size,\n \t\t\t\t    &found_addr);\n     }\n-  catch (const gdb_exception &ex)\n+  catch (gdb_exception &ex)\n     {\n-      except = ex;\n+      except = std::move (ex);\n     }\n \n   GDB_PY_HANDLE_EXCEPTION (except);"
    },
    {
      "sha": "e07da034e34175b3622637b7395afc0260f6e5d0",
      "filename": "gdb/python/py-utils.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/python/py-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/python/py-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-utils.c?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -229,7 +229,7 @@ gdbpy_err_fetch::type_to_string () const\n    This sets the Python error indicator.  */\n \n void\n-gdbpy_convert_exception (struct gdb_exception exception)\n+gdbpy_convert_exception (const struct gdb_exception &exception)\n {\n   PyObject *exc_class;\n "
    },
    {
      "sha": "512e5d0220c9201d7c14ba580893481dbf17c774",
      "filename": "gdb/python/py-value.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/python/py-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/python/py-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-value.c?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -1031,9 +1031,9 @@ valpy_getitem (PyObject *self, PyObject *key)\n       if (res_val)\n \tresult = value_to_value_object (res_val);\n     }\n-  catch (const gdb_exception &ex)\n+  catch (gdb_exception &ex)\n     {\n-      except = ex;\n+      except = std::move (ex);\n     }\n \n   GDB_PY_HANDLE_EXCEPTION (except);\n@@ -1498,9 +1498,9 @@ valpy_nonzero (PyObject *self)\n \t/* All other values are True.  */\n \tnonzero = 1;\n     }\n-  catch (const gdb_exception &ex)\n+  catch (gdb_exception &ex)\n     {\n-      except = ex;\n+      except = std::move (ex);\n     }\n \n   /* This is not documented in the Python documentation, but if this"
    },
    {
      "sha": "69ff1fe30de195c29b50b1213df72714982608bb",
      "filename": "gdb/python/python-internal.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/python/python-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/python/python-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python-internal.h?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -729,7 +729,7 @@ extern PyObject *gdbpy_gdb_error;\n extern PyObject *gdbpy_gdb_memory_error;\n extern PyObject *gdbpy_gdberror_exc;\n \n-extern void gdbpy_convert_exception (struct gdb_exception)\n+extern void gdbpy_convert_exception (const struct gdb_exception &)\n     CPYCHECKER_SETS_EXCEPTION;\n \n int get_addr_from_python (PyObject *obj, CORE_ADDR *addr)"
    },
    {
      "sha": "ae727da03b360d0039c1f4fa70fd31fcb1f8a816",
      "filename": "gdb/xml-support.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/xml-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/94aeb44b001ab2d632806242a3bacb0a879abe15/gdb/xml-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xml-support.c?ref=94aeb44b001ab2d632806242a3bacb0a879abe15",
      "patch": "@@ -113,9 +113,9 @@ struct gdb_xml_parser\n   { m_is_xinclude = is_xinclude; }\n \n   /* A thrown error, if any.  */\n-  void set_error (gdb_exception error)\n+  void set_error (gdb_exception &&error)\n   {\n-    m_error = error;\n+    m_error = std::move (error);\n #ifdef HAVE_XML_STOPPARSER\n     XML_StopParser (m_expat_parser, XML_FALSE);\n #endif\n@@ -387,9 +387,9 @@ gdb_xml_start_element_wrapper (void *data, const XML_Char *name,\n     {\n       parser->start_element (name, attrs);\n     }\n-  catch (const gdb_exception &ex)\n+  catch (gdb_exception &ex)\n     {\n-      parser->set_error (ex);\n+      parser->set_error (std::move (ex));\n     }\n }\n \n@@ -459,9 +459,9 @@ gdb_xml_end_element_wrapper (void *data, const XML_Char *name)\n     {\n       parser->end_element (name);\n     }\n-  catch (const gdb_exception &ex)\n+  catch (gdb_exception &ex)\n     {\n-      parser->set_error (ex);\n+      parser->set_error (std::move (ex));\n     }\n }\n \n@@ -603,7 +603,7 @@ gdb_xml_parser::parse (const char *buffer)\n   else\n     {\n       gdb_assert (m_error.reason < 0);\n-      throw_exception (m_error);\n+      throw_exception (std::move (m_error));\n     }\n \n   if (m_last_line != 0)"
    }
  ]
}