{
  "sha": "4ba11f89a259ffa8dc90f4e8d9bca55f2fcb6483",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGJhMTFmODlhMjU5ZmZhOGRjOTBmNGU4ZDliY2E1NWYyZmNiNjQ4Mw==",
  "commit": {
    "author": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2020-07-01T13:34:50Z"
    },
    "committer": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2020-07-22T19:47:50Z"
    },
    "message": "gcore command: Place all file-backed mappings in NT_FILE note\n\nWhen making a core file with the GDB's gcore command on Linux,\nthe same criteria used for determining which mappings should be\ndumped were also being used for determining which entries should\nbe placed in the NT_FILE note.  This is wrong; we want to place\nall file-backed mappings in this note.\n\nThe predicate function, dump_mapping_p, was used to determine whether\nor not to dump a mapping from within linux_find_memory_regions_full.\nThis commit leaves this predicate in place, but adds a new parameter,\nshould_dump_mapping_p, to linux_find_memory_regions_full.  It then\ncalls should_dump_mapping_p instead of dump_mapping_p.  dump_mapping_p\nis passed to linux_find_memory_regions_full at one call site; at the\nother call site, dump_note_entry_p is passed instead.\n\ngdb/ChangeLog:\n\n\t* linux-tdep.c (dump_note_entry_p): New function.\n\t(linux_dump_mapping_p_ftype): New typedef.\n\t(linux_find_memory_regions_full): Add new parameter,\n\tshould_dump_mapping_p.\n\t(linux_find_memory_regions): Adjust call to\n\tlinux_find_memory_regions_full.\n\t(linux_make_mappings_core_file_notes): Use dump_note_entry_p in\n\tcall to linux_find_memory_regions_full.",
    "tree": {
      "sha": "d84796882ce5658b9175fe41d3479204eee7a88c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d84796882ce5658b9175fe41d3479204eee7a88c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4ba11f89a259ffa8dc90f4e8d9bca55f2fcb6483",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4ba11f89a259ffa8dc90f4e8d9bca55f2fcb6483",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4ba11f89a259ffa8dc90f4e8d9bca55f2fcb6483",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4ba11f89a259ffa8dc90f4e8d9bca55f2fcb6483/comments",
  "author": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f9e233c9c465dd4fdbfda4839c45fb624723b604",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f9e233c9c465dd4fdbfda4839c45fb624723b604",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f9e233c9c465dd4fdbfda4839c45fb624723b604"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 37,
    "deletions": 4
  },
  "files": [
    {
      "sha": "0b2b032dc74280bbba1631a7488bfc0e4e1a1b63",
      "filename": "gdb/linux-tdep.c",
      "status": "modified",
      "additions": 37,
      "deletions": 4,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4ba11f89a259ffa8dc90f4e8d9bca55f2fcb6483/gdb/linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4ba11f89a259ffa8dc90f4e8d9bca55f2fcb6483/gdb/linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-tdep.c?ref=4ba11f89a259ffa8dc90f4e8d9bca55f2fcb6483",
      "patch": "@@ -726,6 +726,25 @@ dump_mapping_p (filter_flags filterflags, const struct smaps_vmflags *v,\n   return dump_p;\n }\n \n+/* As above, but return true only when we should dump the NT_FILE\n+   entry.  */\n+\n+static int\n+dump_note_entry_p (filter_flags filterflags, const struct smaps_vmflags *v,\n+\t\tint maybe_private_p, int mapping_anon_p, int mapping_file_p,\n+\t\tconst char *filename, ULONGEST addr, ULONGEST offset)\n+{\n+  /* vDSO and vsyscall mappings will end up in the core file.  Don't\n+     put them in the NT_FILE note.  */\n+  if (strcmp (\"[vdso]\", filename) == 0\n+      || strcmp (\"[vsyscall]\", filename) == 0)\n+    return 0;\n+\n+  /* Otherwise, any other file-based mapping should be placed in the\n+     note.  */\n+  return filename != nullptr;\n+}\n+\n /* Implement the \"info proc\" command.  */\n \n static void\n@@ -1240,10 +1259,20 @@ typedef int linux_find_memory_region_ftype (ULONGEST vaddr, ULONGEST size,\n \t\t\t\t\t    const char *filename,\n \t\t\t\t\t    void *data);\n \n+typedef int linux_dump_mapping_p_ftype (filter_flags filterflags,\n+\t\t\t\t\tconst struct smaps_vmflags *v,\n+\t\t\t\t\tint maybe_private_p,\n+\t\t\t\t\tint mapping_anon_p,\n+\t\t\t\t\tint mapping_file_p,\n+\t\t\t\t\tconst char *filename,\n+\t\t\t\t\tULONGEST addr,\n+\t\t\t\t\tULONGEST offset);\n+\n /* List memory regions in the inferior for a corefile.  */\n \n static int\n linux_find_memory_regions_full (struct gdbarch *gdbarch,\n+\t\t\t\tlinux_dump_mapping_p_ftype *should_dump_mapping_p,\n \t\t\t\tlinux_find_memory_region_ftype *func,\n \t\t\t\tvoid *obfd)\n {\n@@ -1394,9 +1423,10 @@ linux_find_memory_regions_full (struct gdbarch *gdbarch,\n \t    }\n \n \t  if (has_anonymous)\n-\t    should_dump_p = dump_mapping_p (filterflags, &v, priv,\n-\t\t\t\t\t    mapping_anon_p, mapping_file_p,\n-\t\t\t\t\t    filename, addr, offset);\n+\t    should_dump_p = should_dump_mapping_p (filterflags, &v, priv,\n+\t\t\t\t\t           mapping_anon_p,\n+\t\t\t\t\t\t   mapping_file_p,\n+\t\t\t\t\t           filename, addr, offset);\n \t  else\n \t    {\n \t      /* Older Linux kernels did not support the \"Anonymous:\" counter.\n@@ -1460,6 +1490,7 @@ linux_find_memory_regions (struct gdbarch *gdbarch,\n   data.obfd = obfd;\n \n   return linux_find_memory_regions_full (gdbarch,\n+\t\t\t\t\t dump_mapping_p,\n \t\t\t\t\t linux_find_memory_regions_thunk,\n \t\t\t\t\t &data);\n }\n@@ -1543,7 +1574,9 @@ linux_make_mappings_corefile_notes (struct gdbarch *gdbarch, bfd *obfd,\n   pack_long (buf, long_type, 1);\n   obstack_grow (&data_obstack, buf, TYPE_LENGTH (long_type));\n \n-  linux_find_memory_regions_full (gdbarch, linux_make_mappings_callback,\n+  linux_find_memory_regions_full (gdbarch, \n+\t\t\t\t  dump_note_entry_p,\n+\t\t\t\t  linux_make_mappings_callback,\n \t\t\t\t  &mapping_data);\n \n   if (mapping_data.file_count != 0)"
    }
  ]
}