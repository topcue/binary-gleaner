{
  "sha": "03b46de59084f558140b632f0868a7e37b7749d3",
  "node_id": "C_kwDOANOeidoAKDAzYjQ2ZGU1OTA4NGY1NTgxNDBiNjMyZjA4NjhhN2UzN2I3NzQ5ZDM",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-12-06T07:39:42Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2022-01-01T18:31:34Z"
    },
    "message": "sim: ppc: drop natural types\n\nThese are almost entirely unused.  For the very few places using them,\nreplace with explicit signed types.  This matches what was done in the\ncommon sim code.",
    "tree": {
      "sha": "1360452b55c0ede4411c4e4b0aa3a427e1e457cd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1360452b55c0ede4411c4e4b0aa3a427e1e457cd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/03b46de59084f558140b632f0868a7e37b7749d3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03b46de59084f558140b632f0868a7e37b7749d3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/03b46de59084f558140b632f0868a7e37b7749d3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03b46de59084f558140b632f0868a7e37b7749d3/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d3eb0aa2872de6257df7a21ba2cf798f1005001d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3eb0aa2872de6257df7a21ba2cf798f1005001d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d3eb0aa2872de6257df7a21ba2cf798f1005001d"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 10,
    "deletions": 31
  },
  "files": [
    {
      "sha": "d3b765addb50181557bef426e1d9653438e73e3a",
      "filename": "sim/ppc/bits.h",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03b46de59084f558140b632f0868a7e37b7749d3/sim/ppc/bits.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03b46de59084f558140b632f0868a7e37b7749d3/sim/ppc/bits.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/bits.h?ref=03b46de59084f558140b632f0868a7e37b7749d3",
      "patch": "@@ -89,7 +89,7 @@\n \n \n /* MakeBit */\n-#define _BITn(WIDTH, pos) (((natural##WIDTH)(1)) \\\n+#define _BITn(WIDTH, pos) (((uint##WIDTH##_t)(1)) \\\n \t\t\t   << _MAKE_SHIFT(WIDTH, pos))\n \n #define BIT4(POS)  (1 << _MAKE_SHIFT(4, POS))\n@@ -177,7 +177,7 @@ INLINE_BITS\\\n \n /* extract the required bits aligning them with the lsb */\n #define _EXTRACTEDn(WIDTH, WORD, START, STOP) \\\n-((((natural##WIDTH)(WORD)) >> (WIDTH - (STOP) - 1)) \\\n+((((uint##WIDTH##_t)(WORD)) >> (WIDTH - (STOP) - 1)) \\\n  & _MASKn(WIDTH, WIDTH-1+(START)-(STOP), WIDTH-1))\n \n /* #define EXTRACTED10(WORD, START, STOP) _EXTRACTEDn(10, WORD, START, STOP) */\n@@ -215,7 +215,7 @@ INLINE_BITS\\\n \n /* move a group of bits around */\n #define _INSERTEDn(N, WORD, START, STOP) \\\n-(((natural##N)(WORD) << _MAKE_SHIFT(N, STOP)) & _MASKn(N, START, STOP))\n+(((uint##N##_t)(WORD) << _MAKE_SHIFT(N, STOP)) & _MASKn(N, START, STOP))\n \n #define INSERTED32(WORD, START, STOP) _INSERTEDn(32, WORD, START, STOP)\n #define INSERTED64(WORD, START, STOP) _INSERTEDn(64, WORD, START, STOP)"
    },
    {
      "sha": "322b584a3f13085779f0e09b9269610b03d339aa",
      "filename": "sim/ppc/emul_netbsd.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03b46de59084f558140b632f0868a7e37b7749d3/sim/ppc/emul_netbsd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03b46de59084f558140b632f0868a7e37b7749d3/sim/ppc/emul_netbsd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/emul_netbsd.c?ref=03b46de59084f558140b632f0868a7e37b7749d3",
      "patch": "@@ -631,7 +631,7 @@ do_sigprocmask(os_emul_data *emul,\n \t       cpu *processor,\n \t       unsigned_word cia)\n {\n-  natural_word how = cpu_registers(processor)->gpr[arg0];\n+  signed_word how = cpu_registers(processor)->gpr[arg0];\n   unsigned_word set = cpu_registers(processor)->gpr[arg0+1];\n   unsigned_word oset = cpu_registers(processor)->gpr[arg0+2];\n #ifdef SYS_sigprocmask\n@@ -1010,12 +1010,12 @@ do___sysctl(os_emul_data *emul,\n {\n   /* call the arguments by their real name */\n   unsigned_word name = cpu_registers(processor)->gpr[arg0];\n-  natural_word namelen = cpu_registers(processor)->gpr[arg0+1];\n+  signed_word namelen = cpu_registers(processor)->gpr[arg0+1];\n   unsigned_word oldp = cpu_registers(processor)->gpr[arg0+2];\n   unsigned_word oldlenp = cpu_registers(processor)->gpr[arg0+3];\n-  natural_word oldlen;\n-  natural_word mib;\n-  natural_word int_val;\n+  signed_word oldlen;\n+  signed_word mib;\n+  signed_word int_val;\n   SYS(__sysctl);\n \n   /* pluck out the management information base id */\n@@ -1049,7 +1049,7 @@ do___sysctl(os_emul_data *emul,\n \t\t\t\t     oldlenp,\n \t\t\t\t     processor,\n \t\t\t\t     cia);\n-      if (sizeof(natural_word) > oldlen)\n+      if (sizeof(signed_word) > oldlen)\n \terror(\"system_call()sysctl - CTL_HW.HW_PAGESIZE - to small\\n\");\n       int_val = 8192;\n       oldlen = sizeof(int_val);"
    },
    {
      "sha": "01b7ebb74a3bb0fcb2ab9c8f2d227dbb64a59400",
      "filename": "sim/ppc/idecode_expression.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03b46de59084f558140b632f0868a7e37b7749d3/sim/ppc/idecode_expression.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03b46de59084f558140b632f0868a7e37b7749d3/sim/ppc/idecode_expression.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/idecode_expression.h?ref=03b46de59084f558140b632f0868a7e37b7749d3",
      "patch": "@@ -65,7 +65,7 @@\n \n #define ALU_BEGIN(val) \\\n { \\\n-  natural_word alu_val; \\\n+  signed_word alu_val; \\\n   unsigned64 alu_carry_val; \\\n   signed64 alu_overflow_val; \\\n   ALU_SET(val)"
    },
    {
      "sha": "df9278ad11669a16c6097d2a10ecd81b621817fc",
      "filename": "sim/ppc/words.h",
      "status": "modified",
      "additions": 0,
      "deletions": 21,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03b46de59084f558140b632f0868a7e37b7749d3/sim/ppc/words.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03b46de59084f558140b632f0868a7e37b7749d3/sim/ppc/words.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/words.h?ref=03b46de59084f558140b632f0868a7e37b7749d3",
      "patch": "@@ -27,7 +27,6 @@\n \n /* TYPES:\n \n-     natural*\tsign determined by host\n      signed*    signed type of the given size\n      unsigned*  The corresponding insigned type\n \n@@ -49,18 +48,6 @@\n #include <stdint.h>\n \n /* bit based */\n-typedef char natural8;\n-typedef short natural16;\n-typedef int natural32;\n-\n-#ifdef __GNUC__\n-typedef long long natural64;\n-#endif\n-\n-#ifdef _MSC_VER\n-typedef __int64 natural64;\n-#endif \n-\n typedef int8_t signed8;\n typedef int16_t signed16;\n typedef int32_t signed32;\n@@ -72,11 +59,6 @@ typedef uint32_t unsigned32;\n typedef uint64_t unsigned64;\n \n /* byte based */\n-typedef natural8 natural_1;\n-typedef natural16 natural_2;\n-typedef natural32 natural_4;\n-typedef natural64 natural_8;\n-\n typedef signed8 signed_1;\n typedef signed16 signed_2;\n typedef signed32 signed_4;\n@@ -96,11 +78,9 @@ typedef unsigned64 unsigned_8;\n \n /* target architecture based */\n #if (WITH_TARGET_WORD_BITSIZE == 64)\n-typedef natural64 natural_word;\n typedef unsigned64 unsigned_word;\n typedef signed64 signed_word;\n #else\n-typedef natural32 natural_word;\n typedef unsigned32 unsigned_word;\n typedef signed32 signed_word;\n #endif\n@@ -110,7 +90,6 @@ typedef signed32 signed_word;\n typedef unsigned32 instruction_word;\n \n /* IEEE 1275 cell size - only support 32bit mode at present */\n-typedef natural32 natural_cell;\n typedef unsigned32 unsigned_cell;\n typedef signed32 signed_cell;\n "
    }
  ]
}