{
  "sha": "63b4cc53dc41c755f8b30d85edf29c153f76eba3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjNiNGNjNTNkYzQxYzc1NWY4YjMwZDg1ZWRmMjljMTUzZjc2ZWJhMw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-03-28T23:22:56Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-03-29T00:52:22Z"
    },
    "message": "TRUE/FALSE simplification\n\nThere is really no need to write code like \"foo != 0 ? TRUE : FALSE\"\nunless we had stupidly defined FALSE as something other than 0 or TRUE\nas something other than 1.  The simpler \"foo != 0\" does just as well.\nSimilarly \"(condition == TRUE)\" or \"(condition == FALSE) can be\nsimplified to \"(condition)\" and \"(!condition)\" respectively.\n\nI'll note that there is reason to use \"integer_expression != 0\" when\nassigning a bfd_boolean rather than the simpler \"integer_expression\",\nif you expect the variable to have 0 or 1 value.  It's probably even a\ngood idea to not rely on implicit conversion if bfd_boolean were _Bool.\n\nbfd/\n\t* aoutx.h (aout_link_write_symbols): Don't cast boolean expression\n\tto bfd_boolean.\n\t* elf32-or1k.c (or1k_set_got_and_rela_sizes): Dont compare booleans\n\tagainst FALSE.\n\t* elf32-arc.c (name_for_global_symbol): Don't compare boolean to TRUE.\n\t(is_reloc_PC_relative): Don't use \"boolean_condition ? TRUE : FALSE\".\n\t(is_reloc_SDA_relative, is_reloc_for_GOT): Likewise.\n\t(is_reloc_for_PLT, is_reloc_for_TLS): Likewise.\n\t* elf32-arm.c (stm32l4xx_need_create_replacing_stub): Likewise.\n\t* elf32-nds32.c (insert_nds32_elf_blank): Likewise.\n\t* elf32-rx.c (rx_set_section_contents): Likewise.\n\t* elfnn-aarch64.c (elfNN_aarch64_final_link_relocate): Likewise.\n\t* elfxx-mips.c (_bfd_mips_elf_ignore_undef_symbol): Likewise.\n\t* mach-o.c (bfd_mach_o_read_command): Likewise.\n\t* targets.c (bfd_get_target_info): Likewise.\nbinutils/\n\t* dlltool.c (main): Don't use \"boolean_condition ? TRUE : FALSE\".\n\t* dwarf.c (read_and_display_attr_value): Likewise.\n\t(display_debug_str_offsets): Likewise.\n\t* objdump.c (dump_bfd): Likewise.\n\t* readelf.c (dump_section_as_strings): Likewise.\n\t(dump_section_as_bytes): Likewise.\ngas/\n\t* atof-generic.c (FALSE, TRUE): Don't define.\n\t* config/obj-elf.h (FALSE, TRUE): Don't define.\n\t* config/obj-som.h (FALSE, TRUE): Don't define.\n\t* config/tc-hppa.h (FALSE, TRUE): Don't define.\n\t* config/tc-pdp11.c (FALSE, TRUE): Don't define.\n\t* config/tc-iq2000.h (obj_fix_adjustable): Delete.\n\t* config/tc-m32r.h (TC_FIX_ADJUSTABLE): Delete.\n\t* config/tc-mt.h (obj_fix_adjustable): Delete.\n\t* config/tc-nds32.h (TC_FIX_ADJUSTABLE): Delete.\n\t* config/tc-arc.c (parse_opcode_flags): Simplify boolean expression.\n\t(relaxable_flag, relaxable_operand, assemble_insn): Likewise.\n\t(tokenize_extregister): Likewise.\n\t* config/tc-csky.c (parse_opcode, get_operand_value): Likewise.\n\t(parse_operands_op, parse_operands, md_assemble): Likewise.\n\t* config/tc-d10v.c (build_insn): Likewise.\n\t* config/tc-score.c (s3_gen_insn_frag): Likewise.\n\t* config/tc-score7.c (s7_gen_insn_frag, s7_relax_frag): Likewise.\n\t* config/tc-tic6x.c (tic6x_update_features, md_assemble): Likewise.\n\t* config/tc-z80.c (emit_byte): Likewise.\ninclude/\n\t* opcode/aarch64.h (alias_opcode_p): Simplify boolean expression.\n\t(opcode_has_alias, pseudo_opcode_p, optional_operand_p): Likewise.\n\t(opcode_has_special_coder): Likewise.\nld/\n\t* emultempl/aix.em (gld${EMULATION_NAME}_before_allocation): Simplify\n\tboolean expression.\n\t* lexsup.c (parse_args): Likewise.\n\t* pe-dll.c (pe_dll_id_target): Likewise.\nopcodes/\n\t* aarch64-opc.c (vector_qualifier_p): Simplify boolean expression.\n\t(fp_qualifier_p, get_data_pattern): Likewise.\n\t(aarch64_get_operand_modifier_from_value): Likewise.\n\t(aarch64_extend_operator_p, aarch64_shift_operator_p): Likewise.\n\t(operand_variant_qualifier_p): Likewise.\n\t(qualifier_value_in_range_constraint_p): Likewise.\n\t(aarch64_get_qualifier_esize): Likewise.\n\t(aarch64_get_qualifier_nelem): Likewise.\n\t(aarch64_get_qualifier_standard_value): Likewise.\n\t(get_lower_bound, get_upper_bound): Likewise.\n\t(aarch64_find_best_match, match_operands_qualifier): Likewise.\n\t(aarch64_print_operand): Likewise.\n\t* aarch64-opc.h (operand_has_inserter, operand_has_extractor): Likewise.\n\t(operand_need_sign_extension, operand_need_shift_by_two): Likewise.\n\t(operand_need_shift_by_four, operand_maybe_stack_pointer): Likewise.\n\t* arm-dis.c (print_insn_mve, print_insn_thumb32): Likewise.\n\t* tic6x-dis.c (tic6x_check_fetch_packet_header): Likewise.\n\t(print_insn_tic6x): Likewise.",
    "tree": {
      "sha": "8a43529c805f57a538e4a13333016edabca9b7ca",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8a43529c805f57a538e4a13333016edabca9b7ca"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/63b4cc53dc41c755f8b30d85edf29c153f76eba3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/63b4cc53dc41c755f8b30d85edf29c153f76eba3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/63b4cc53dc41c755f8b30d85edf29c153f76eba3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/63b4cc53dc41c755f8b30d85edf29c153f76eba3/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "854f1e4be9172c835d1b89973d29ce66f9e65479",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/854f1e4be9172c835d1b89973d29ce66f9e65479",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/854f1e4be9172c835d1b89973d29ce66f9e65479"
    }
  ],
  "stats": {
    "total": 379,
    "additions": 203,
    "deletions": 176
  },
  "files": [
    {
      "sha": "6d361d56b98dc8d23888a0e0a7bb73b30b8a0f89",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -1,3 +1,21 @@\n+2021-03-29  Alan Modra  <amodra@gmail.com>\n+\n+\t* aoutx.h (aout_link_write_symbols): Don't cast boolean expression\n+\tto bfd_boolean.\n+\t* elf32-or1k.c (or1k_set_got_and_rela_sizes): Dont compare booleans\n+\tagainst FALSE.\n+\t* elf32-arc.c (name_for_global_symbol): Don't compare boolean to TRUE.\n+\t(is_reloc_PC_relative): Don't use \"boolean_condition ? TRUE : FALSE\".\n+\t(is_reloc_SDA_relative, is_reloc_for_GOT): Likewise.\n+\t(is_reloc_for_PLT, is_reloc_for_TLS): Likewise.\n+\t* elf32-arm.c (stm32l4xx_need_create_replacing_stub): Likewise.\n+\t* elf32-nds32.c (insert_nds32_elf_blank): Likewise.\n+\t* elf32-rx.c (rx_set_section_contents): Likewise.\n+\t* elfnn-aarch64.c (elfNN_aarch64_final_link_relocate): Likewise.\n+\t* elfxx-mips.c (_bfd_mips_elf_ignore_undef_symbol): Likewise.\n+\t* mach-o.c (bfd_mach_o_read_command): Likewise.\n+\t* targets.c (bfd_get_target_info): Likewise.\n+\n 2021-03-29  Alan Modra  <amodra@gmail.com>\n \n \t* coff-z80.c (z80_is_local_label_name): Return bfd_boolean."
    },
    {
      "sha": "8761a6ac8537e1212d3f4d4c814e1a839fb1fe84",
      "filename": "bfd/aoutx.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/aoutx.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/aoutx.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aoutx.h?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -5209,7 +5209,7 @@ aout_link_write_symbols (struct aout_final_link_info *flaginfo, bfd *input_bfd)\n \t      /* If we have already included a header file with the\n \t\t same value, then replace this one with an N_EXCL\n \t\t symbol.  */\n-\t      copy = (bfd_boolean) (! flaginfo->info->keep_memory);\n+\t      copy = !flaginfo->info->keep_memory;\n \t      incl_entry = aout_link_includes_lookup (&flaginfo->includes,\n \t\t\t\t\t\t      name, TRUE, copy);\n \t      if (incl_entry == NULL)"
    },
    {
      "sha": "c796104afda3bde069cab7d3088904bf1858b598",
      "filename": "bfd/elf32-arc.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/elf32-arc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/elf32-arc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arc.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -55,7 +55,7 @@ name_for_global_symbol (struct elf_link_hash_entry *h)\n     Elf_Internal_Rela _rel;\t\t\t\t\t\t\\\n     bfd_byte * _loc;\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n-    if (_htab->dynamic_sections_created == TRUE)\t\t\t\t\\\n+    if (_htab->dynamic_sections_created)\t\t\t\t\\\n       {\t\t\t\t\t\t\t\t\t\\\n \tBFD_ASSERT (_htab->srel##SECTION &&_htab->srel##SECTION->contents); \\\n \t_loc = _htab->srel##SECTION->contents\t\t\t\t\\\n@@ -128,33 +128,33 @@ bfd_put_32_me (bfd *abfd, bfd_vma value,unsigned char *data)\n static ATTRIBUTE_UNUSED bfd_boolean\n is_reloc_PC_relative (reloc_howto_type *howto)\n {\n-  return (strstr (howto->name, \"PC\") != NULL) ? TRUE : FALSE;\n+  return strstr (howto->name, \"PC\") != NULL;\n }\n \n static bfd_boolean\n is_reloc_SDA_relative (reloc_howto_type *howto)\n {\n-  return (strstr (howto->name, \"SDA\") != NULL) ? TRUE : FALSE;\n+  return strstr (howto->name, \"SDA\") != NULL;\n }\n \n static bfd_boolean\n is_reloc_for_GOT (reloc_howto_type * howto)\n {\n   if (strstr (howto->name, \"TLS\") != NULL)\n     return FALSE;\n-  return (strstr (howto->name, \"GOT\") != NULL) ? TRUE : FALSE;\n+  return strstr (howto->name, \"GOT\") != NULL;\n }\n \n static bfd_boolean\n is_reloc_for_PLT (reloc_howto_type * howto)\n {\n-  return (strstr (howto->name, \"PLT\") != NULL) ? TRUE : FALSE;\n+  return strstr (howto->name, \"PLT\") != NULL;\n }\n \n static bfd_boolean\n is_reloc_for_TLS (reloc_howto_type *howto)\n {\n-  return (strstr (howto->name, \"TLS\") != NULL) ? TRUE : FALSE;\n+  return strstr (howto->name, \"TLS\") != NULL;\n }\n \n struct arc_relocation_data"
    },
    {
      "sha": "7d7c3edab1635672ce0f19fc59d9330cd7a804c0",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -8796,9 +8796,9 @@ stm32l4xx_need_create_replacing_stub (const insn32 insn,\n \n   /* DEFAULT mode accounts for the real bug condition situation,\n      ALL mode inserts stubs for each LDM/VLDM instruction (testing).  */\n-  return\n-    (stm32l4xx_fix == BFD_ARM_STM32L4XX_FIX_DEFAULT) ? nb_words > 8 :\n-    (stm32l4xx_fix == BFD_ARM_STM32L4XX_FIX_ALL) ? TRUE : FALSE;\n+  return (stm32l4xx_fix == BFD_ARM_STM32L4XX_FIX_DEFAULT\n+\t  ? nb_words > 8\n+\t  : stm32l4xx_fix == BFD_ARM_STM32L4XX_FIX_ALL);\n }\n \n /* Look for potentially-troublesome code sequences which might trigger"
    },
    {
      "sha": "61a52af56ac3757089c1357b7f10419a82fcee71",
      "filename": "bfd/elf32-nds32.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/elf32-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/elf32-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nds32.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -9038,7 +9038,7 @@ insert_nds32_elf_blank (nds32_elf_blank_t **blank_p, bfd_vma addr, bfd_vma len)\n   if (!*blank_p)\n     {\n       *blank_p = create_nds32_elf_blank (addr, len);\n-      return *blank_p ? TRUE : FALSE;\n+      return *blank_p != NULL;\n     }\n \n   blank_t = search_nds32_elf_blank (*blank_p, addr);"
    },
    {
      "sha": "18048540647c59ef1ca2994c11c177bbc3c6d74e",
      "filename": "bfd/elf32-or1k.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/elf32-or1k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/elf32-or1k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-or1k.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -2698,7 +2698,7 @@ or1k_set_got_and_rela_sizes (const unsigned char tls_type,\n       is_tls_entry = TRUE;\n     }\n \n-  if (is_tls_entry == FALSE)\n+  if (!is_tls_entry)\n     *got_size += 4;\n \n   if (dynamic)\n@@ -2709,7 +2709,7 @@ or1k_set_got_and_rela_sizes (const unsigned char tls_type,\n       if ((tls_type & TLS_IE) != 0)\n \t*rela_size += sizeof (Elf32_External_Rela);\n \n-      if (is_tls_entry == FALSE)\n+      if (!is_tls_entry)\n \t*rela_size += sizeof (Elf32_External_Rela);\n     }\n }"
    },
    {
      "sha": "cd0bc002c867dc0a4ed55d80758a656c0993061c",
      "filename": "bfd/elf32-rx.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/elf32-rx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/elf32-rx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-rx.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -3541,8 +3541,8 @@ rx_set_section_contents (bfd *\t       abfd,\n \t\t\t file_ptr      offset,\n \t\t\t bfd_size_type count)\n {\n-  bfd_boolean exec = (abfd->flags & EXEC_P) ? TRUE : FALSE;\n-  bfd_boolean s_code = (section->flags & SEC_CODE) ? TRUE : FALSE;\n+  bfd_boolean exec = (abfd->flags & EXEC_P) != 0;\n+  bfd_boolean s_code = (section->flags & SEC_CODE) != 0;\n   bfd_boolean rv;\n   char * swapped_data = NULL;\n   bfd_size_type i;"
    },
    {
      "sha": "86130b424acb4174bf6791e556cb82d4583e7992",
      "filename": "bfd/elfnn-aarch64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/elfnn-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/elfnn-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-aarch64.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -5769,7 +5769,7 @@ elfNN_aarch64_final_link_relocate (reloc_howto_type *howto,\n \t\t relocate the text and data segments independently,\n \t\t so the symbol does not matter.  */\n \t      symbol = 0;\n-\t      relocate = globals->no_apply_dynamic_relocs ? FALSE : TRUE;\n+\t      relocate = !globals->no_apply_dynamic_relocs;\n \t      outrel.r_info = ELFNN_R_INFO (symbol, AARCH64_R (RELATIVE));\n \t      outrel.r_addend += value;\n \t    }"
    },
    {
      "sha": "bd4140cc3e4b3e2bc66ba49e189a8ee446cddbcb",
      "filename": "bfd/elfxx-mips.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/elfxx-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/elfxx-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -16395,7 +16395,7 @@ _bfd_mips_elf_merge_symbol_attribute (struct elf_link_hash_entry *h,\n bfd_boolean\n _bfd_mips_elf_ignore_undef_symbol (struct elf_link_hash_entry *h)\n {\n-  return ELF_MIPS_IS_OPTIONAL (h->other) ? TRUE : FALSE;\n+  return ELF_MIPS_IS_OPTIONAL (h->other) != 0;\n }\n \n bfd_boolean"
    },
    {
      "sha": "695b15811cdf56a4125e550fb9645fb6be5d5777",
      "filename": "bfd/mach-o.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/mach-o.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/mach-o.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mach-o.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -4930,7 +4930,7 @@ bfd_mach_o_read_command (bfd *abfd, bfd_mach_o_load_command *command,\n \n   cmd = bfd_h_get_32 (abfd, raw.cmd);\n   command->type = cmd & ~BFD_MACH_O_LC_REQ_DYLD;\n-  command->type_required = cmd & BFD_MACH_O_LC_REQ_DYLD ? TRUE : FALSE;\n+  command->type_required = (cmd & BFD_MACH_O_LC_REQ_DYLD) != 0;\n   command->len = bfd_h_get_32 (abfd, raw.cmdsize);\n   if (command->len < 8 || command->len % 4 != 0)\n     return FALSE;"
    },
    {
      "sha": "372a9c3896f2dff12458ffaf064ed877923a1ed0",
      "filename": "bfd/targets.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/targets.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/bfd/targets.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/targets.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -1654,8 +1654,7 @@ bfd_get_target_info (const char *target_name, bfd *abfd,\n   if (! target_vec)\n     return NULL;\n   if (is_bigendian)\n-    *is_bigendian = ((target_vec->byteorder == BFD_ENDIAN_BIG) ? TRUE\n-\t\t\t\t\t\t\t       : FALSE);\n+    *is_bigendian = target_vec->byteorder == BFD_ENDIAN_BIG;\n   if (underscoring)\n     *underscoring = ((int) target_vec->symbol_leading_char) & 0xff;\n "
    },
    {
      "sha": "8928e2319d182ea29fc09b0005a20424f1cbbba5",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -1,3 +1,12 @@\n+2021-03-29  Alan Modra  <amodra@gmail.com>\n+\n+\t* dlltool.c (main): Don't use \"boolean_condition ? TRUE : FALSE\".\n+\t* dwarf.c (read_and_display_attr_value): Likewise.\n+\t(display_debug_str_offsets): Likewise.\n+\t* objdump.c (dump_bfd): Likewise.\n+\t* readelf.c (dump_section_as_strings): Likewise.\n+\t(dump_section_as_bytes): Likewise.\n+\n 2021-03-29  Alan Modra  <amodra@gmail.com>\n \n \t* objdump.c (process_links): Use type int."
    },
    {
      "sha": "b7fdebc66f86a6644e8e30ac0d00acca63ccaea6",
      "filename": "binutils/dlltool.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/binutils/dlltool.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/binutils/dlltool.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dlltool.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -3957,7 +3957,7 @@ main (int ac, char **av)\n       bfd_get_target_info (mtable[machine].how_bfd_target, NULL,\n                            NULL, &u, NULL);\n     if (u != -1)\n-      leading_underscore = (u != 0 ? TRUE : FALSE);\n+      leading_underscore = u != 0;\n   }\n \n   if (!dll_name && exp_name)"
    },
    {
      "sha": "23ee70510f7fcfe3dd38fba0c3a344c167cab87a",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -2727,8 +2727,8 @@ read_and_display_attr_value (unsigned long           attribute,\n     case DW_FORM_strx4:\n       if (!do_loc)\n \t{\n-\t  const char * suffix = strrchr (section->name, '.');\n-\t  bfd_boolean  dwo = (suffix && strcmp (suffix, \".dwo\") == 0) ? TRUE : FALSE;\n+\t  const char *suffix = strrchr (section->name, '.');\n+\t  bfd_boolean dwo = suffix && strcmp (suffix, \".dwo\") == 0;\n \n \t  if (do_wide)\n \t    /* We have already displayed the form name.  */\n@@ -7545,8 +7545,8 @@ display_debug_str_offsets (struct dwarf_section *section,\n   unsigned char *end = start + section->size;\n   unsigned char *curr = start;\n \n-  const char * suffix = strrchr (section->name, '.');\n-  bfd_boolean  dwo = (suffix && strcmp (suffix, \".dwo\") == 0) ? TRUE : FALSE;\n+  const char *suffix = strrchr (section->name, '.');\n+  bfd_boolean dwo = suffix && strcmp (suffix, \".dwo\") == 0;\n \n   if (dwo)\n     load_debug_section_with_follow (str_dwo, file);"
    },
    {
      "sha": "0d76fb7939750771c4405d34aa6066b16c8884b2",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -4950,7 +4950,7 @@ dump_bfd (bfd *abfd, bfd_boolean is_mainfile)\n \t{\n \t  if (!print_debugging_info (stdout, dhandle, abfd, syms,\n \t\t\t\t     bfd_demangle,\n-\t\t\t\t     dump_debugging_tags ? TRUE : FALSE))\n+\t\t\t\t     dump_debugging_tags != 0))\n \t    {\n \t      non_fatal (_(\"%s: printing debugging information failed\"),\n \t\t\t bfd_get_filename (abfd));"
    },
    {
      "sha": "8b32dab1ee6b2c6a12393ecf9de49214b6b2b1ee",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -14454,7 +14454,7 @@ dump_section_as_strings (Elf_Internal_Shdr * section, Filedata * filedata)\n   real_start = start = (unsigned char *) get_section_contents (section, filedata);\n   if (start == NULL)\n     /* PR 21820: Do not fail if the section was empty.  */\n-    return (section->sh_size == 0 || section->sh_type == SHT_NOBITS) ? TRUE : FALSE;\n+    return section->sh_size == 0 || section->sh_type == SHT_NOBITS;\n \n   num_bytes = section->sh_size;\n \n@@ -14670,7 +14670,7 @@ dump_section_as_bytes (Elf_Internal_Shdr *  section,\n   real_start = start = (unsigned char *) get_section_contents (section, filedata);\n   if (start == NULL)\n     /* PR 21820: Do not fail if the section was empty.  */\n-    return (section->sh_size == 0 || section->sh_type == SHT_NOBITS) ? TRUE : FALSE;\n+    return section->sh_size == 0 || section->sh_type == SHT_NOBITS;\n \n   section_size = section->sh_size;\n "
    },
    {
      "sha": "4f773ca667e07f6427b9e4e2ad1f94d7a89bfb3f",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -1,3 +1,25 @@\n+2021-03-29  Alan Modra  <amodra@gmail.com>\n+\n+\t* atof-generic.c (FALSE, TRUE): Don't define.\n+\t* config/obj-elf.h (FALSE, TRUE): Don't define.\n+\t* config/obj-som.h (FALSE, TRUE): Don't define.\n+\t* config/tc-hppa.h (FALSE, TRUE): Don't define.\n+\t* config/tc-pdp11.c (FALSE, TRUE): Don't define.\n+\t* config/tc-iq2000.h (obj_fix_adjustable): Delete.\n+\t* config/tc-m32r.h (TC_FIX_ADJUSTABLE): Delete.\n+\t* config/tc-mt.h (obj_fix_adjustable): Delete.\n+\t* config/tc-nds32.h (TC_FIX_ADJUSTABLE): Delete.\n+\t* config/tc-arc.c (parse_opcode_flags): Simplify boolean expression.\n+\t(relaxable_flag, relaxable_operand, assemble_insn): Likewise.\n+\t(tokenize_extregister): Likewise.\n+\t* config/tc-csky.c (parse_opcode, get_operand_value): Likewise.\n+\t(parse_operands_op, parse_operands, md_assemble): Likewise.\n+\t* config/tc-d10v.c (build_insn): Likewise.\n+\t* config/tc-score.c (s3_gen_insn_frag): Likewise.\n+\t* config/tc-score7.c (s7_gen_insn_frag, s7_relax_frag): Likewise.\n+\t* config/tc-tic6x.c (tic6x_update_features, md_assemble): Likewise.\n+\t* config/tc-z80.c (emit_byte): Likewise.\n+\n 2021-03-29  Alan Modra  <amodra@gmail.com>\n \n \t* config/tc-arm.c (struct arm_long_option_table <func>): Return"
    },
    {
      "sha": "d123f02108fcd422db4fcd5dd3f44b325ce18858",
      "filename": "gas/atof-generic.c",
      "status": "modified",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/atof-generic.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/atof-generic.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/atof-generic.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -21,13 +21,6 @@\n #include \"as.h\"\n #include \"safe-ctype.h\"\n \n-#ifndef FALSE\n-#define FALSE (0)\n-#endif\n-#ifndef TRUE\n-#define TRUE  (1)\n-#endif\n-\n #ifdef TRACE\n static void flonum_print (const FLONUM_TYPE *);\n #endif"
    },
    {
      "sha": "c967db662a20c09f0a3c8b825825f762a868d116",
      "filename": "gas/config/obj-elf.h",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/obj-elf.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/obj-elf.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/obj-elf.h?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -114,11 +114,6 @@ struct elf_section_match\n \n #define OBJ_SYMFIELD_TYPE struct elf_obj_sy\n \n-#ifndef FALSE\n-#define FALSE 0\n-#define TRUE  !FALSE\n-#endif\n-\n #ifndef obj_begin\n #define obj_begin() elf_begin ()\n #endif"
    },
    {
      "sha": "a2c53159e5e0e59d13977ea709a3c7caf6731aa2",
      "filename": "gas/config/obj-som.h",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/obj-som.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/obj-som.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/obj-som.h?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -30,11 +30,6 @@\n #include \"som/reloc.h\"\n #include \"targ-cpu.h\"\n \n-#ifndef FALSE\n-#define FALSE 0\n-#define TRUE !FALSE\n-#endif\n-\n /* should be conditional on address size!  */\n #define som_symbol(asymbol) ((som_symbol_type *) (&(asymbol)->the_bfd))\n "
    },
    {
      "sha": "5b1c33ea3eae076fc1eaf798accb5e7f36b38a2e",
      "filename": "gas/config/tc-arc.c",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-arc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-arc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arc.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -1732,7 +1732,7 @@ parse_opcode_flags (const struct arc_opcode *opcode,\n     }\n \n   /* Did I check all the parsed flags?  */\n-  return lnflg ? FALSE : TRUE;\n+  return lnflg == 0;\n }\n \n \n@@ -3754,7 +3754,7 @@ relaxable_flag (const struct arc_relaxable_ins *ins,\n     }\n \n   /* If counttrue == nflgs, then all flags have been found.  */\n-  return (counttrue == nflgs ? TRUE : FALSE);\n+  return counttrue == nflgs;\n }\n \n /* Checks if operands are in line with relaxable insn.  */\n@@ -3831,7 +3831,7 @@ relaxable_operand (const struct arc_relaxable_ins *ins,\n       operand = &ins->operands[i];\n     }\n \n-  return (i == ntok ? TRUE : FALSE);\n+  return i == ntok;\n }\n \n /* Return TRUE if this OPDCODE is a candidate for relaxation.  */\n@@ -4073,8 +4073,7 @@ assemble_insn (const struct arc_opcode *opcode,\n \t      pcrel = reloc_howto->pc_relative;\n \t    }\n \t  fixup->pcrel = pcrel;\n-\t  fixup->islong = (operand->flags & ARC_OPERAND_LIMM) ?\n-\t    TRUE : FALSE;\n+\t  fixup->islong = (operand->flags & ARC_OPERAND_LIMM) != 0;\n \t  break;\n \t}\n     }\n@@ -4675,9 +4674,8 @@ tokenize_extregister (extRegister_t *ereg, int opertype)\n   char c;\n   char *p;\n   int number, imode = 0;\n-  bfd_boolean isCore_p = (opertype == EXT_CORE_REGISTER) ? TRUE : FALSE;\n-  bfd_boolean isReg_p  = (opertype == EXT_CORE_REGISTER\n-\t\t\t  || opertype == EXT_AUX_REGISTER) ? TRUE : FALSE;\n+  bfd_boolean isCore_p = opertype == EXT_CORE_REGISTER;\n+  bfd_boolean isReg_p = opertype == EXT_CORE_REGISTER || opertype == EXT_AUX_REGISTER;\n \n   /* 1st: get register name.  */\n   SKIP_WHITESPACE ();"
    },
    {
      "sha": "583fb8b02ad9289889f652f801fbeadb03551af0",
      "filename": "gas/config/tc-csky.c",
      "status": "modified",
      "additions": 20,
      "deletions": 20,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-csky.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-csky.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-csky.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -3314,7 +3314,7 @@ parse_opcode (char *str)\n     {\n       /* Is csky force 32 or 16 instruction?  */\n       if (IS_CSKY_V2 (mach_flag)\n-\t  && *opcode_end == '.' && has_suffix == FALSE)\n+\t  && *opcode_end == '.' && !has_suffix)\n \t{\n \t  has_suffix = TRUE;\n \t  if (IS_OPCODE32F (opcode_end))\n@@ -3334,7 +3334,7 @@ parse_opcode (char *str)\n     }\n \n   /* Is csky force 32 or 16 instruction?  */\n-  if (has_suffix == FALSE)\n+  if (!has_suffix)\n     {\n       if (IS_CSKY_V2 (mach_flag) && IS_OPCODE32F (opcode_end))\n \t{\n@@ -3350,7 +3350,7 @@ parse_opcode (char *str)\n   name[nlen] = '\\0';\n \n   /* Generate macro_name for finding hash in macro hash_table.  */\n-  if (has_suffix == TRUE)\n+  if (has_suffix)\n     nlen += 2;\n   strncpy (macro_name, str, nlen);\n   macro_name[nlen] = '\\0';\n@@ -3439,7 +3439,7 @@ get_operand_value (struct csky_opcode_info *op,\n \t  return FALSE;\n \t}\n \n-      if (get_operand_value (op, oper, &soprnd->subs[0]) == FALSE)\n+      if (!get_operand_value (op, oper, &soprnd->subs[0]))\n \t{\n \t  *s = rc;\n \t  return FALSE;\n@@ -3452,7 +3452,7 @@ get_operand_value (struct csky_opcode_info *op,\n \t  return FALSE;\n \t}\n \n-      if (get_operand_value (op, oper, &soprnd->subs[1]) == FALSE)\n+      if (!get_operand_value (op, oper, &soprnd->subs[1]))\n \t{\n \t  *s = rc;\n \t  return FALSE;\n@@ -3610,7 +3610,7 @@ get_operand_value (struct csky_opcode_info *op,\n \t  int val = csky_insn.val[csky_insn.idx - 1];\n \t  log = csky_log_2 (val);\n \t  csky_insn.val[csky_insn.idx - 1] = log;\n-\t  return (log == -1 ? FALSE : TRUE);\n+\t  return log != -1;\n \t}\n       else\n \treturn FALSE;\n@@ -3632,7 +3632,7 @@ get_operand_value (struct csky_opcode_info *op,\n \t      }\n \t    else\n \t      csky_insn.val[csky_insn.idx - 1] = log;\n-\t    return (log == -1 ? FALSE : TRUE);\n+\t    return log != -1;\n \t  }\n \telse\n \t  return FALSE;\n@@ -3794,19 +3794,19 @@ get_operand_value (struct csky_opcode_info *op,\n \telse\n \t  {\n \t    csky_insn.val[csky_insn.idx] = 0;\n-\t    if (is_psr_bit (oper) != FALSE)\n+\t    if (is_psr_bit (oper))\n \t      while (**oper == ',')\n \t\t{\n \t\t  *oper += 1;\n-\t\t  if (is_psr_bit (oper) == FALSE)\n+\t\t  if (!is_psr_bit (oper))\n \t\t    {\n \t\t      ret = FALSE;\n \t\t      break;\n \t\t    }\n \t\t}\n \t    else\n \t      ret = FALSE;\n-\t    if (ret == TRUE && IS_CSKY_V1 (mach_flag)\n+\t    if (ret && IS_CSKY_V1 (mach_flag)\n \t\t&& csky_insn.val[csky_insn.idx] > 8)\n \t      ret = FALSE;\n \t  }\n@@ -4315,7 +4315,7 @@ parse_operands_op (char *str, struct csky_opcode_info *op)\n \t    oper++;\n \t  flag_pass = get_operand_value (&op[i], &oper,\n \t\t\t\t\t &op[i].oprnd.oprnds[j]);\n-\t  if (flag_pass == FALSE)\n+\t  if (!flag_pass)\n \t    break;\n \t  while (ISSPACE (*oper))\n \t    oper++;\n@@ -4342,7 +4342,7 @@ parse_operands_op (char *str, struct csky_opcode_info *op)\n \t}\n       /* Parse operands in one table end.  */\n \n-      if (flag_pass == TRUE)\n+      if (flag_pass)\n \t{\n \t  /* Parse operands success, set opcode_idx.  */\n \t  csky_insn.opcode_idx = i;\n@@ -4366,7 +4366,7 @@ parse_operands (char *str)\n   if (csky_insn.flag_force == INSN_OPCODE16F\n       && (csky_insn.opcode->isa_flag16 & isa_flag) != 0)\n     {\n-      if (parse_operands_op (oper, csky_insn.opcode->op16) == TRUE)\n+      if (parse_operands_op (oper, csky_insn.opcode->op16))\n \t{\n \t  csky_insn.isize = 2;\n \t  return TRUE;\n@@ -4376,7 +4376,7 @@ parse_operands (char *str)\n   else if (csky_insn.flag_force == INSN_OPCODE32F\n \t   && (csky_insn.opcode->isa_flag32 & isa_flag) != 0)\n     {\n-      if (parse_operands_op (oper, csky_insn.opcode->op32) == TRUE)\n+      if (parse_operands_op (oper, csky_insn.opcode->op32))\n \t{\n \t  csky_insn.isize = 4;\n \t  return TRUE;\n@@ -4386,13 +4386,13 @@ parse_operands (char *str)\n   else\n     {\n       if ((csky_insn.opcode->isa_flag16 & isa_flag) != 0\n-\t  && parse_operands_op (oper, csky_insn.opcode->op16) == TRUE)\n+\t  && parse_operands_op (oper, csky_insn.opcode->op16))\n \t{\n \t  csky_insn.isize = 2;\n \t  return TRUE;\n \t}\n       if ((csky_insn.opcode->isa_flag32 & isa_flag) != 0\n-\t  && parse_operands_op (oper, csky_insn.opcode->op32) == TRUE)\n+\t  && parse_operands_op (oper, csky_insn.opcode->op32))\n \t{\n \t  csky_insn.isize = 4;\n \t  return TRUE;\n@@ -4559,7 +4559,7 @@ md_assemble (char *str)\n   while (ISSPACE (* str))\n     str++;\n   /* Get opcode from str.  */\n-  if (parse_opcode (str) == FALSE)\n+  if (!parse_opcode (str))\n     {\n       csky_show_error (ERROR_OPCODE_ILLEGAL, 0, NULL, NULL);\n       return;\n@@ -4586,7 +4586,7 @@ md_assemble (char *str)\n     }\n \n   /* Parse the operands according to operand type.  */\n-  if (parse_operands (csky_insn.opcode_end) == FALSE)\n+  if (!parse_operands (csky_insn.opcode_end))\n     {\n       csky_show_error (error_state.err_num, error_state.opnum,\n \t\t       (void *)error_state.arg1, (void *)error_state.arg1);\n@@ -4608,7 +4608,7 @@ md_assemble (char *str)\n     }\n \n   /* Adjust for xtrb0/xtrb1/xtrb2/xtrb3/divs/divu in csky v1 ISA.  */\n-  if (mov_r1_after == TRUE)\n+  if (mov_r1_after)\n     {\n       unsigned int mov_insn = CSKYV1_INST_MOV_RX_R1;\n       mov_insn |= csky_insn.val[0];\n@@ -4618,7 +4618,7 @@ md_assemble (char *str)\n       md_number_to_chars (csky_insn.output, mov_insn, 2);\n       csky_insn.isize += 2;\n     }\n-  if (mov_r1_before == TRUE)\n+  if (mov_r1_before)\n     csky_insn.isize += 2;\n \n   /* Check literal.  */"
    },
    {
      "sha": "547db0c1d9c8b5c3ecc06bca9ca9e865b250d01a",
      "filename": "gas/config/tc-d10v.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-d10v.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-d10v.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-d10v.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -581,8 +581,7 @@ build_insn (struct d10v_opcode *opcode,\n \n \t  fixups->fix[fixups->fc].exp = opers[i];\n \t  fixups->fix[fixups->fc].operand = opcode->operands[i];\n-\t  fixups->fix[fixups->fc].pcrel =\n-\t    (flags & OPERAND_ADDR) ? TRUE : FALSE;\n+\t  fixups->fix[fixups->fc].pcrel = (flags & OPERAND_ADDR) != 0;\n \t  (fixups->fc)++;\n \t}\n "
    },
    {
      "sha": "b4189918967eeeda68001a896a29d22ba06837f3",
      "filename": "gas/config/tc-hppa.h",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-hppa.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-hppa.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-hppa.h?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -80,12 +80,6 @@\n #define WARN_COMMENTS 1\n #endif\n \n-/* FIXME.  Why oh why aren't these defined somewhere globally?  */\n-#ifndef FALSE\n-#define FALSE   (0)\n-#define TRUE    (!FALSE)\n-#endif\n-\n #define ASEC_NULL (asection *)0\n \n /* pa_define_label gets used outside of tc-hppa.c via tc_frob_label.  */"
    },
    {
      "sha": "5540f50f85a0e2a99706fdceca3caa2a7b696557",
      "filename": "gas/config/tc-iq2000.h",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-iq2000.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-iq2000.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-iq2000.h?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -45,8 +45,6 @@\n \n #define tc_frob_file() iq2000_frob_file ()\n \n-#define obj_fix_adjustable(fixP) iq2000_fix_adjustable (fixP)\n-\n /* After creating a fixup for an instruction operand, we need to check\n    for HI16 relocs and queue them up for later sorting.  */\n #define md_cgen_record_fixup_exp  iq2000_cgen_record_fixup_exp"
    },
    {
      "sha": "5ff14fbf2ae6ddcedc523c2a733f1d9f34fb1788",
      "filename": "gas/config/tc-m32r.h",
      "status": "modified",
      "additions": 1,
      "deletions": 7,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-m32r.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-m32r.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-m32r.h?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -70,7 +70,7 @@ extern void m32r_handle_align (fragS *);\n #define md_apply_fix gas_cgen_md_apply_fix\n \n #define tc_fix_adjustable(FIX) m32r_fix_adjustable (FIX)\n-bfd_boolean m32r_fix_adjustable (struct fix *);\n+extern bfd_boolean m32r_fix_adjustable (struct fix *);\n \n /* After creating a fixup for an instruction operand, we need to check for\n    HI16 relocs and queue them up for later sorting.  */\n@@ -80,12 +80,6 @@ bfd_boolean m32r_fix_adjustable (struct fix *);\n \n extern int pic_code;\n \n-extern bfd_boolean m32r_fix_adjustable (struct fix *);\n-\n-/* This arranges for gas/write.c to not apply a relocation if\n-   obj_fix_adjustable() says it is not adjustable.  */\n-#define TC_FIX_ADJUSTABLE(fixP) obj_fix_adjustable (fixP)\n-\n #define tc_frob_file_before_fix() m32r_frob_file ()\n extern void m32r_frob_file (void);\n "
    },
    {
      "sha": "fd1cb012225460d30f4170c0a59709416a677a93",
      "filename": "gas/config/tc-mt.h",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-mt.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-mt.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-mt.h?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -49,9 +49,6 @@ extern void mt_apply_fix (struct fix *, valueT *, segT);\n /* Call md_pcrel_from_section(), not md_pcrel_from().  */\n #define MD_PCREL_FROM_SECTION(FIXP, SEC) md_pcrel_from_section (FIXP, SEC)\n \n-#define obj_fix_adjustable(fixP) iq2000_fix_adjustable (fixP)\n-extern bfd_boolean mt_fix_adjustable (struct fix *);\n-\n /* Values passed to md_apply_fix don't include the symbol value.  */\n #define MD_APPLY_SYM_VALUE(FIX) 0\n "
    },
    {
      "sha": "7dbeb591b58f6161eb8dd80cfa77cde6fe0bf230",
      "filename": "gas/config/tc-nds32.h",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-nds32.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-nds32.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-nds32.h?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -214,9 +214,6 @@ extern int tc_nds32_regname_to_dw2regnum (char *);\n \t&& S_IS_DEFINED ((FIX)->fx_addsy)\t\t\t\\\n \t&& ! S_IS_COMMON ((FIX)->fx_addsy)))\n #define TC_HANDLES_FX_DONE\n-/* This arranges for gas/write.c to not apply a relocation if\n-   obj_fix_adjustable() says it is not adjustable.  */\n-#define TC_FIX_ADJUSTABLE(fixP) obj_fix_adjustable (fixP)\n #endif\n \n /* Because linker may relax the code, assemble-time expression"
    },
    {
      "sha": "b59db94e875a510f936fe2220317c84c8557f184",
      "filename": "gas/config/tc-pdp11.c",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-pdp11.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-pdp11.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-pdp11.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -24,9 +24,6 @@\n \n extern int flonum_gen2vax (int, FLONUM_TYPE * f, LITTLENUM_TYPE *);\n \n-#define TRUE  1\n-#define FALSE 0\n-\n /* A representation for PDP-11 machine code.  */\n struct pdp11_code\n {"
    },
    {
      "sha": "9e1798d96bc25ae660a0993c3e667b88a7c8df5e",
      "filename": "gas/config/tc-score.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-score.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-score.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-score.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -2551,7 +2551,7 @@ s3_gen_insn_frag (struct s3_score_it *part_1, struct s3_score_it *part_2)\n   struct s3_score_it *inst2 = part_2;\n   struct s3_score_it backup_inst1;\n \n-  pce_p = (inst2) ? TRUE : FALSE;\n+  pce_p = inst2 != NULL;\n   memcpy (&backup_inst1, inst1, sizeof (struct s3_score_it));\n \n   /* Adjust instruction opcode and to be relaxed instruction opcode.  */"
    },
    {
      "sha": "c3feeaea5ce6cdfa36cbe26bf02a36a0070ec4db",
      "filename": "gas/config/tc-score7.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-score7.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-score7.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-score7.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -2672,7 +2672,7 @@ s7_gen_insn_frag (struct s7_score_it *part_1, struct s7_score_it *part_2)\n   struct s7_score_it *inst2 = part_2;\n   struct s7_score_it backup_inst1;\n \n-  pce_p = (inst2) ? TRUE : FALSE;\n+  pce_p = inst2 != NULL;\n   memcpy (&backup_inst1, inst1, sizeof (struct s7_score_it));\n \n   /* Adjust instruction opcode and to be relaxed instruction opcode.  */\n@@ -6355,7 +6355,7 @@ s7_relax_frag (asection * sec ATTRIBUTE_UNUSED,\n \t}\n     }\n \n-  word_align_p = ((fragp->fr_address + fragp->insn_addr) % 4 == 0) ? TRUE : FALSE;\n+  word_align_p = (fragp->fr_address + fragp->insn_addr) % 4 == 0;\n \n   /* Get instruction size and relax size after the last relaxation.  */\n   if (fragp->fr_opcode)"
    },
    {
      "sha": "01600856634104fbd1d0e70618fb93de9bc41a86",
      "filename": "gas/config/tc-tic6x.c",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-tic6x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-tic6x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-tic6x.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -350,16 +350,14 @@ tic6x_update_features (void)\n   tic6x_num_registers\n     = (tic6x_arch_enable & (TIC6X_INSN_C64X | TIC6X_INSN_C67XP)) ? 32 : 16;\n \n-  tic6x_predicate_a0 = (tic6x_arch_enable & TIC6X_INSN_C64X) ? TRUE : FALSE;\n+  tic6x_predicate_a0 = (tic6x_arch_enable & TIC6X_INSN_C64X) != 0;\n \n   tic6x_can_cross_fp_boundary\n-    = (tic6x_arch_enable\n-       & (TIC6X_INSN_C64X | TIC6X_INSN_C67XP)) ? TRUE : FALSE;\n+    = (tic6x_arch_enable & (TIC6X_INSN_C64X | TIC6X_INSN_C67XP)) != 0;\n \n-  tic6x_long_data_constraints\n-    = (tic6x_arch_enable & TIC6X_INSN_C64X) ? FALSE : TRUE;\n+  tic6x_long_data_constraints = (tic6x_arch_enable & TIC6X_INSN_C64X) == 0;\n \n-  tic6x_compact_insns = (tic6x_arch_enable & TIC6X_INSN_C64XP) ? TRUE : FALSE;\n+  tic6x_compact_insns = (tic6x_arch_enable & TIC6X_INSN_C64XP) != 0;\n }\n \n /* Do configuration after all options have been parsed.  */\n@@ -3620,7 +3618,7 @@ md_assemble (char *str)\n \t\t\t\t       seginfo->tc_segment_info_data.sploop_ii,\n \t\t\t\t       &fix_exp, &fix_pcrel, &fx_r_type,\n \t\t\t\t       &fix_adda, &fix_needed, &encoded_ok,\n-\t\t\t\t       (try_rank == min_rank ? TRUE : FALSE),\n+\t\t\t\t       try_rank == min_rank,\n \t\t\t\t       str, opc_len);\n       if (encoded_ok)\n \t{"
    },
    {
      "sha": "d4bbb56355be78c2a17cb971256998cf60a836a3",
      "filename": "gas/config/tc-z80.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-z80.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/gas/config/tc-z80.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-z80.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -1226,7 +1226,7 @@ emit_byte (expressionS * val, bfd_reloc_code_real_type r_type)\n     {\n       /* For symbols only, constants are stored at begin of function.  */\n       fix_new_exp (frag_now, p - frag_now->fr_literal, 1, val,\n-\t\t   (r_type == BFD_RELOC_8_PCREL) ? TRUE : FALSE, r_type);\n+\t\t   r_type == BFD_RELOC_8_PCREL, r_type);\n     }\n }\n "
    },
    {
      "sha": "2bacadf01e257efe43497b87aa3db76f1803ab39",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-29  Alan Modra  <amodra@gmail.com>\n+\n+\t* opcode/aarch64.h (alias_opcode_p): Simplify boolean expression.\n+\t(opcode_has_alias, pseudo_opcode_p, optional_operand_p): Likewise.\n+\t(opcode_has_special_coder): Likewise.\n+\n 2021-03-29  Alan Modra  <amodra@gmail.com>\n \n \t* opcode/aarch64.h (aarch64_opcode_encode): Correct prototype."
    },
    {
      "sha": "e48bea6db6ec271195b9d31f5441d4abda48181f",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -900,13 +900,13 @@ extern aarch64_opcode aarch64_opcode_table[];\n static inline bfd_boolean\n alias_opcode_p (const aarch64_opcode *opcode)\n {\n-  return (opcode->flags & F_ALIAS) ? TRUE : FALSE;\n+  return (opcode->flags & F_ALIAS) != 0;\n }\n \n static inline bfd_boolean\n opcode_has_alias (const aarch64_opcode *opcode)\n {\n-  return (opcode->flags & F_HAS_ALIAS) ? TRUE : FALSE;\n+  return (opcode->flags & F_HAS_ALIAS) != 0;\n }\n \n /* Priority for disassembling preference.  */\n@@ -919,14 +919,13 @@ opcode_priority (const aarch64_opcode *opcode)\n static inline bfd_boolean\n pseudo_opcode_p (const aarch64_opcode *opcode)\n {\n-  return (opcode->flags & F_PSEUDO) != 0lu ? TRUE : FALSE;\n+  return (opcode->flags & F_PSEUDO) != 0lu;\n }\n \n static inline bfd_boolean\n optional_operand_p (const aarch64_opcode *opcode, unsigned int idx)\n {\n-  return (((opcode->flags >> 12) & 0x7) == idx + 1)\n-    ? TRUE : FALSE;\n+  return ((opcode->flags >> 12) & 0x7) == idx + 1;\n }\n \n static inline aarch64_insn\n@@ -945,8 +944,7 @@ static inline bfd_boolean\n opcode_has_special_coder (const aarch64_opcode *opcode)\n {\n   return (opcode->flags & (F_SF | F_LSE_SZ | F_SIZEQ | F_FPTYPE | F_SSIZE | F_T\n-\t  | F_GPRSIZE_IN_Q | F_LDS_SIZE | F_MISC | F_N | F_COND)) ? TRUE\n-    : FALSE;\n+\t  | F_GPRSIZE_IN_Q | F_LDS_SIZE | F_MISC | F_N | F_COND)) != 0;\n }\n \f\n struct aarch64_name_value_pair"
    },
    {
      "sha": "4b96e1a7b6dba2db63cc815495bb1ae89423364a",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -1,3 +1,10 @@\n+2021-03-29  Alan Modra  <amodra@gmail.com>\n+\n+\t* emultempl/aix.em (gld${EMULATION_NAME}_before_allocation): Simplify\n+\tboolean expression.\n+\t* lexsup.c (parse_args): Likewise.\n+\t* pe-dll.c (pe_dll_id_target): Likewise.\n+\n 2021-03-25  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* testsuite/ld-ctf/array.d: Only check that the data object"
    },
    {
      "sha": "bea8c1d4dc57a73c2a1e15555c30f6b28988cecc",
      "filename": "ld/emultempl/aix.em",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/ld/emultempl/aix.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/ld/emultempl/aix.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/aix.em?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -834,9 +834,8 @@ gld${EMULATION_NAME}_before_allocation (void)\n   /* Let the XCOFF backend set up the .loader section.  */\n   if (!bfd_xcoff_size_dynamic_sections\n       (link_info.output_bfd, &link_info, libpath, entry_symbol.name, file_align,\n-       maxstack, maxdata, gc && !unix_ld ? TRUE : FALSE,\n-       modtype, textro ? TRUE : FALSE, flags, special_sections,\n-       rtld ? TRUE : FALSE))\n+       maxstack, maxdata, gc && !unix_ld,\n+       modtype, textro, flags, special_sections, rtld))\n     einfo (_(\"%F%P: failed to set dynamic section sizes: %E\\n\"));\n \n   /* Look through the special sections, and put them in the right"
    },
    {
      "sha": "51b2a3ed2630f189dfdc0c2cd310b8366adee009",
      "filename": "ld/lexsup.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/ld/lexsup.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/ld/lexsup.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/lexsup.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -1091,7 +1091,7 @@ parse_args (unsigned argc, char **argv)\n \t     getopt can't handle two args to an option without kludges.  */\n \n \t  /* Enable optimizations of output files.  */\n-\t  link_info.optimize = strtoul (optarg, NULL, 0) ? TRUE : FALSE;\n+\t  link_info.optimize = strtoul (optarg, NULL, 0) != 0;\n \t  break;\n \tcase 'o':\n \t  lang_add_output (optarg, 0);"
    },
    {
      "sha": "56b4375d8cecd6107c99267a32f86ba157dc6c0f",
      "filename": "ld/pe-dll.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/ld/pe-dll.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/ld/pe-dll.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/pe-dll.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -439,7 +439,7 @@ pe_dll_id_target (const char *target)\n \t  bfd_get_target_info (target, NULL, NULL, &u, NULL);\n \tif (u == -1)\n \t  abort ();\n-\tpe_detail_list[i].underscored = (u != 0 ? TRUE : FALSE);\n+\tpe_detail_list[i].underscored = u != 0;\n \tpe_details = pe_detail_list + i;\n \tpe_leading_underscore = (u != 0 ? 1 : 0);\n \treturn;"
    },
    {
      "sha": "ffe9337fd2ded5d23d7500b18c05f1180aa85a72",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -1,3 +1,24 @@\n+2021-03-29  Alan Modra  <amodra@gmail.com>\n+\n+\t* aarch64-opc.c (vector_qualifier_p): Simplify boolean expression.\n+\t(fp_qualifier_p, get_data_pattern): Likewise.\n+\t(aarch64_get_operand_modifier_from_value): Likewise.\n+\t(aarch64_extend_operator_p, aarch64_shift_operator_p): Likewise.\n+\t(operand_variant_qualifier_p): Likewise.\n+\t(qualifier_value_in_range_constraint_p): Likewise.\n+\t(aarch64_get_qualifier_esize): Likewise.\n+\t(aarch64_get_qualifier_nelem): Likewise.\n+\t(aarch64_get_qualifier_standard_value): Likewise.\n+\t(get_lower_bound, get_upper_bound): Likewise.\n+\t(aarch64_find_best_match, match_operands_qualifier): Likewise.\n+\t(aarch64_print_operand): Likewise.\n+\t* aarch64-opc.h (operand_has_inserter, operand_has_extractor): Likewise.\n+\t(operand_need_sign_extension, operand_need_shift_by_two): Likewise.\n+\t(operand_need_shift_by_four, operand_maybe_stack_pointer): Likewise.\n+\t* arm-dis.c (print_insn_mve, print_insn_thumb32): Likewise.\n+\t* tic6x-dis.c (tic6x_check_fetch_packet_header): Likewise.\n+\t(print_insn_tic6x): Likewise.\n+\n 2021-03-29  Alan Modra  <amodra@gmail.com>\n \n \t* arc-dis.c (extract_operand_value): Correct NULL cast."
    },
    {
      "sha": "c4397bc43017a9f15f42bd664c1e5e08d0c714b9",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 24,
      "deletions": 30,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -105,17 +105,15 @@ const char *const aarch64_sve_prfop_array[16] = {\n static inline bfd_boolean\n vector_qualifier_p (enum aarch64_opnd_qualifier qualifier)\n {\n-  return ((qualifier >= AARCH64_OPND_QLF_V_8B\n-\t  && qualifier <= AARCH64_OPND_QLF_V_1Q) ? TRUE\n-\t  : FALSE);\n+  return (qualifier >= AARCH64_OPND_QLF_V_8B\n+\t  && qualifier <= AARCH64_OPND_QLF_V_1Q);\n }\n \n static inline bfd_boolean\n fp_qualifier_p (enum aarch64_opnd_qualifier qualifier)\n {\n-  return ((qualifier >= AARCH64_OPND_QLF_S_B\n-\t  && qualifier <= AARCH64_OPND_QLF_S_Q) ? TRUE\n-\t  : FALSE);\n+  return (qualifier >= AARCH64_OPND_QLF_S_B\n+\t  && qualifier <= AARCH64_OPND_QLF_S_Q);\n }\n \n enum data_pattern\n@@ -144,12 +142,12 @@ static const char significant_operand_index [] =\n static enum data_pattern\n get_data_pattern (const aarch64_opnd_qualifier_seq_t qualifiers)\n {\n-  if (vector_qualifier_p (qualifiers[0]) == TRUE)\n+  if (vector_qualifier_p (qualifiers[0]))\n     {\n       /* e.g. v.4s, v.4s, v.4s\n \t   or v.4h, v.4h, v.h[3].  */\n       if (qualifiers[0] == qualifiers[1]\n-\t  && vector_qualifier_p (qualifiers[2]) == TRUE\n+\t  && vector_qualifier_p (qualifiers[2])\n \t  && (aarch64_get_qualifier_esize (qualifiers[0])\n \t      == aarch64_get_qualifier_esize (qualifiers[1]))\n \t  && (aarch64_get_qualifier_esize (qualifiers[0])\n@@ -158,25 +156,25 @@ get_data_pattern (const aarch64_opnd_qualifier_seq_t qualifiers)\n       /* e.g. v.8h, v.8b, v.8b.\n            or v.4s, v.4h, v.h[2].\n \t   or v.8h, v.16b.  */\n-      if (vector_qualifier_p (qualifiers[1]) == TRUE\n+      if (vector_qualifier_p (qualifiers[1])\n \t  && aarch64_get_qualifier_esize (qualifiers[0]) != 0\n \t  && (aarch64_get_qualifier_esize (qualifiers[0])\n \t      == aarch64_get_qualifier_esize (qualifiers[1]) << 1))\n \treturn DP_VECTOR_LONG;\n       /* e.g. v.8h, v.8h, v.8b.  */\n       if (qualifiers[0] == qualifiers[1]\n-\t  && vector_qualifier_p (qualifiers[2]) == TRUE\n+\t  && vector_qualifier_p (qualifiers[2])\n \t  && aarch64_get_qualifier_esize (qualifiers[0]) != 0\n \t  && (aarch64_get_qualifier_esize (qualifiers[0])\n \t      == aarch64_get_qualifier_esize (qualifiers[2]) << 1)\n \t  && (aarch64_get_qualifier_esize (qualifiers[0])\n \t      == aarch64_get_qualifier_esize (qualifiers[1])))\n \treturn DP_VECTOR_WIDE;\n     }\n-  else if (fp_qualifier_p (qualifiers[0]) == TRUE)\n+  else if (fp_qualifier_p (qualifiers[0]))\n     {\n       /* e.g. SADDLV <V><d>, <Vn>.<T>.  */\n-      if (vector_qualifier_p (qualifiers[1]) == TRUE\n+      if (vector_qualifier_p (qualifiers[1])\n \t  && qualifiers[2] == AARCH64_OPND_QLF_NIL)\n \treturn DP_VECTOR_ACROSS_LANES;\n     }\n@@ -427,7 +425,7 @@ enum aarch64_modifier_kind\n aarch64_get_operand_modifier_from_value (aarch64_insn value,\n \t\t\t\t\t bfd_boolean extend_p)\n {\n-  if (extend_p == TRUE)\n+  if (extend_p)\n     return AARCH64_MOD_UXTB + value;\n   else\n     return AARCH64_MOD_LSL - value;\n@@ -436,15 +434,13 @@ aarch64_get_operand_modifier_from_value (aarch64_insn value,\n bfd_boolean\n aarch64_extend_operator_p (enum aarch64_modifier_kind kind)\n {\n-  return (kind > AARCH64_MOD_LSL && kind <= AARCH64_MOD_SXTX)\n-    ? TRUE : FALSE;\n+  return kind > AARCH64_MOD_LSL && kind <= AARCH64_MOD_SXTX;\n }\n \n static inline bfd_boolean\n aarch64_shift_operator_p (enum aarch64_modifier_kind kind)\n {\n-  return (kind >= AARCH64_MOD_ROR && kind <= AARCH64_MOD_LSL)\n-    ? TRUE : FALSE;\n+  return kind >= AARCH64_MOD_ROR && kind <= AARCH64_MOD_LSL;\n }\n \n const struct aarch64_name_value_pair aarch64_barrier_options[16] =\n@@ -767,15 +763,13 @@ struct operand_qualifier_data aarch64_opnd_qualifiers[] =\n static inline bfd_boolean\n operand_variant_qualifier_p (aarch64_opnd_qualifier_t qualifier)\n {\n-  return (aarch64_opnd_qualifiers[qualifier].kind == OQK_OPD_VARIANT)\n-    ? TRUE : FALSE;\n+  return aarch64_opnd_qualifiers[qualifier].kind == OQK_OPD_VARIANT;\n }\n \n static inline bfd_boolean\n qualifier_value_in_range_constraint_p (aarch64_opnd_qualifier_t qualifier)\n {\n-  return (aarch64_opnd_qualifiers[qualifier].kind == OQK_VALUE_IN_RANGE)\n-    ? TRUE : FALSE;\n+  return aarch64_opnd_qualifiers[qualifier].kind == OQK_VALUE_IN_RANGE;\n }\n \n const char*\n@@ -789,35 +783,35 @@ aarch64_get_qualifier_name (aarch64_opnd_qualifier_t qualifier)\n unsigned char\n aarch64_get_qualifier_esize (aarch64_opnd_qualifier_t qualifier)\n {\n-  assert (operand_variant_qualifier_p (qualifier) == TRUE);\n+  assert (operand_variant_qualifier_p (qualifier));\n   return aarch64_opnd_qualifiers[qualifier].data0;\n }\n \n unsigned char\n aarch64_get_qualifier_nelem (aarch64_opnd_qualifier_t qualifier)\n {\n-  assert (operand_variant_qualifier_p (qualifier) == TRUE);\n+  assert (operand_variant_qualifier_p (qualifier));\n   return aarch64_opnd_qualifiers[qualifier].data1;\n }\n \n aarch64_insn\n aarch64_get_qualifier_standard_value (aarch64_opnd_qualifier_t qualifier)\n {\n-  assert (operand_variant_qualifier_p (qualifier) == TRUE);\n+  assert (operand_variant_qualifier_p (qualifier));\n   return aarch64_opnd_qualifiers[qualifier].data2;\n }\n \n static int\n get_lower_bound (aarch64_opnd_qualifier_t qualifier)\n {\n-  assert (qualifier_value_in_range_constraint_p (qualifier) == TRUE);\n+  assert (qualifier_value_in_range_constraint_p (qualifier));\n   return aarch64_opnd_qualifiers[qualifier].data0;\n }\n \n static int\n get_upper_bound (aarch64_opnd_qualifier_t qualifier)\n {\n-  assert (qualifier_value_in_range_constraint_p (qualifier) == TRUE);\n+  assert (qualifier_value_in_range_constraint_p (qualifier));\n   return aarch64_opnd_qualifiers[qualifier].data1;\n }\n \n@@ -951,7 +945,7 @@ aarch64_find_best_match (const aarch64_inst *inst,\n \n       /* Most opcodes has much fewer patterns in the list.\n \t First NIL qualifier indicates the end in the list.   */\n-      if (empty_qualifier_sequence_p (qualifiers) == TRUE)\n+      if (empty_qualifier_sequence_p (qualifiers))\n \t{\n \t  DEBUG_TRACE_IF (i == 0, \"SUCCEED: empty qualifier list\");\n \t  if (i)\n@@ -1023,7 +1017,7 @@ aarch64_find_best_match (const aarch64_inst *inst,\n    Return 1 if the operand qualifier(s) in *INST match one of the qualifier\n    sequences in INST->OPCODE->qualifiers_list; otherwise return 0.\n \n-   if UPDATE_P == TRUE, update the qualifier(s) in *INST after the matching\n+   if UPDATE_P, update the qualifier(s) in *INST after the matching\n    succeeds.  */\n \n static int\n@@ -1049,7 +1043,7 @@ match_operands_qualifier (aarch64_inst *inst, bfd_boolean update_p)\n     }\n \n   /* Update the qualifiers.  */\n-  if (update_p == TRUE)\n+  if (update_p)\n     for (i = 0; i < AARCH64_MAX_OPND_NUM; ++i)\n       {\n \tif (inst->opcode->operands[i] == AARCH64_OPND_NIL)\n@@ -3539,7 +3533,7 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n     case AARCH64_OPND_UIMM4_ADDG:\n     case AARCH64_OPND_UIMM7:\n     case AARCH64_OPND_UIMM10:\n-      if (optional_operand_p (opcode, idx) == TRUE\n+      if (optional_operand_p (opcode, idx)\n \t  && (opnd->imm.value ==\n \t      (int64_t) get_optional_operand_default_value (opcode)))\n \t/* Omit the operand, e.g. DCPS1.  */"
    },
    {
      "sha": "82f64c2a7515e47e07f9f4b6e267b0fa1a411ed8",
      "filename": "opcodes/aarch64-opc.h",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/opcodes/aarch64-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/opcodes/aarch64-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.h?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -245,37 +245,37 @@ verify_constraints (const struct aarch64_inst *, const aarch64_insn, bfd_vma,\n static inline bfd_boolean\n operand_has_inserter (const aarch64_operand *operand)\n {\n-  return (operand->flags & OPD_F_HAS_INSERTER) ? TRUE : FALSE;\n+  return (operand->flags & OPD_F_HAS_INSERTER) != 0;\n }\n \n static inline bfd_boolean\n operand_has_extractor (const aarch64_operand *operand)\n {\n-  return (operand->flags & OPD_F_HAS_EXTRACTOR) ? TRUE : FALSE;\n+  return (operand->flags & OPD_F_HAS_EXTRACTOR) != 0;\n }\n \n static inline bfd_boolean\n operand_need_sign_extension (const aarch64_operand *operand)\n {\n-  return (operand->flags & OPD_F_SEXT) ? TRUE : FALSE;\n+  return (operand->flags & OPD_F_SEXT) != 0;\n }\n \n static inline bfd_boolean\n operand_need_shift_by_two (const aarch64_operand *operand)\n {\n-  return (operand->flags & OPD_F_SHIFT_BY_2) ? TRUE : FALSE;\n+  return (operand->flags & OPD_F_SHIFT_BY_2) != 0;\n }\n \n static inline bfd_boolean\n operand_need_shift_by_four (const aarch64_operand *operand)\n {\n-  return (operand->flags & OPD_F_SHIFT_BY_4) ? TRUE : FALSE;\n+  return (operand->flags & OPD_F_SHIFT_BY_4) != 0;\n }\n \n static inline bfd_boolean\n operand_maybe_stack_pointer (const aarch64_operand *operand)\n {\n-  return (operand->flags & OPD_F_MAYBE_SP) ? TRUE : FALSE;\n+  return (operand->flags & OPD_F_MAYBE_SP) != 0;\n }\n \n /* Return the value of the operand-specific data field (OPD_F_OD_MASK).  */"
    },
    {
      "sha": "2f3f19ba1cbe9fe804bbdfd2d94794459af9d8ad",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -9887,11 +9887,11 @@ print_insn_mve (struct disassemble_info *info, long given)\n \t  if (is_undefined)\n \t    print_mve_undefined (info, undefined_cond);\n \n-\t  if ((vpt_block_state.in_vpt_block == FALSE)\n+\t  if (!vpt_block_state.in_vpt_block\n \t      && !ifthen_state\n-\t      && (is_vpt_instruction (given) == TRUE))\n+\t      && is_vpt_instruction (given))\n \t    mark_inside_vpt_block (given);\n-\t  else if (vpt_block_state.in_vpt_block == TRUE)\n+\t  else if (vpt_block_state.in_vpt_block)\n \t    update_vpt_block_state ();\n \n \t  return TRUE;\n@@ -10841,7 +10841,7 @@ print_insn_thumb32 (bfd_vma pc, struct disassemble_info *info, long given)\n   if (print_insn_coprocessor (pc, info, given, TRUE))\n     return;\n \n-  if ((is_mve == FALSE) && print_insn_neon (info, given, TRUE))\n+  if (!is_mve && print_insn_neon (info, given, TRUE))\n     return;\n \n   if (is_mve && print_insn_mve (info, given))"
    },
    {
      "sha": "3b5eea17d028a6d36363492b7f219dd54a049b92",
      "filename": "opcodes/tic6x-dis.c",
      "status": "modified",
      "additions": 13,
      "deletions": 14,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63b4cc53dc41c755f8b30d85edf29c153f76eba3/opcodes/tic6x-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63b4cc53dc41c755f8b30d85edf29c153f76eba3/opcodes/tic6x-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/tic6x-dis.c?ref=63b4cc53dc41c755f8b30d85edf29c153f76eba3",
      "patch": "@@ -214,17 +214,16 @@ tic6x_check_fetch_packet_header (unsigned char *fp,\n \n   for (i = 0; i < 7; i++)\n     header->word_compact[i]\n-      = (header->header & (1u << (21 + i))) ? TRUE : FALSE;\n+      = (header->header & (1u << (21 + i))) != 0;\n \n-  header->prot = (header->header & (1u << 20)) ? TRUE : FALSE;\n-  header->rs = (header->header & (1u << 19)) ? TRUE : FALSE;\n+  header->prot = (header->header & (1u << 20)) != 0;\n+  header->rs = (header->header & (1u << 19)) != 0;\n   header->dsz = (header->header >> 16) & 0x7;\n-  header->br = (header->header & (1u << 15)) ? TRUE : FALSE;\n-  header->sat = (header->header & (1u << 14)) ? TRUE : FALSE;\n+  header->br = (header->header & (1u << 15)) != 0;\n+  header->sat = (header->header & (1u << 14)) != 0;\n \n   for (i = 0; i < 14; i++)\n-    header->p_bits[i]\n-      = (header->header & (1u << i)) ? TRUE : FALSE;\n+    header->p_bits[i] = (header->header & (1u << i)) != 0;\n \n   return TRUE;\n }\n@@ -490,7 +489,7 @@ print_insn_tic6x (bfd_vma addr, struct disassemble_info *info)\n \t    {\n \t      unsigned int prev_opcode\n \t\t= tic6x_extract_32 (fp + (fp_offset & 0x1c) - 4, info);\n-\t      p_bit = (prev_opcode & 0x1) ? TRUE : FALSE;\n+\t      p_bit = (prev_opcode & 0x1) != 0;\n \t    }\n \t}\n       else\n@@ -518,14 +517,14 @@ print_insn_tic6x (bfd_vma addr, struct disassemble_info *info)\n \t\t    {\n \t\t      unsigned int prev_opcode = tic6x_extract_32 (fp_prev + 24,\n \t\t\t\t\t\t\t\t   info);\n-\t\t      p_bit = (prev_opcode & 0x1) ? TRUE : FALSE;\n+\t\t      p_bit = (prev_opcode & 0x1) != 0;\n \t\t    }\n \t\t}\n \t      else\n \t\t{\n \t\t  unsigned int prev_opcode = tic6x_extract_32 (fp_prev + 28,\n \t\t\t\t\t\t\t       info);\n-\t\t  p_bit = (prev_opcode & 0x1) ? TRUE : FALSE;\n+\t\t  p_bit = (prev_opcode & 0x1) != 0;\n \t\t}\n \t    }\n \t}\n@@ -654,7 +653,7 @@ print_insn_tic6x (bfd_vma addr, struct disassemble_info *info)\n \t\t  printf (\"opcode %x: illegal cross path specifier in adda opcode!\\n\", opcode);\n \t\t  abort ();\n \t\t}\n-\t      func_unit_cross = (func_unit_side == 1 ? TRUE : FALSE);\n+\t      func_unit_cross = func_unit_side == 1;\n \t    }\n \n \t  switch (opc->func_unit)\n@@ -1344,7 +1343,7 @@ print_insn_tic6x (bfd_vma addr, struct disassemble_info *info)\n \t\t  side = func_unit_side == 2 ? 'b' : 'a';\n \t\t  snprintf (base, 4, \"%c%u\", side, mem_base_reg);\n \n-\t\t  offset_is_reg = ((mem_mode & 4) ? TRUE : FALSE);\n+\t\t  offset_is_reg = (mem_mode & 4) != 0;\n \t\t  if (offset_is_reg)\n \t\t    {\n \n@@ -1355,7 +1354,7 @@ print_insn_tic6x (bfd_vma addr, struct disassemble_info *info)\n \t\t      snprintf (offset, 4, \"%c%u\", side, reg_base + mem_offset);\n \t\t      if (opc->operand_info[op_num].form\n \t\t\t  == tic6x_operand_mem_ndw)\n-\t\t\toffset_scaled = mem_scaled ? TRUE : FALSE;\n+\t\t\toffset_scaled = mem_scaled != 0;\n \t\t      else\n \t\t\toffset_scaled = TRUE;\n \t\t    }\n@@ -1364,7 +1363,7 @@ print_insn_tic6x (bfd_vma addr, struct disassemble_info *info)\n \t\t      if (opc->operand_info[op_num].form\n \t\t\t  == tic6x_operand_mem_ndw)\n \t\t\t{\n-\t\t\t  offset_scaled = mem_scaled ? TRUE : FALSE;\n+\t\t\t  offset_scaled = mem_scaled != 0;\n \t\t\t  snprintf (offset, 4, \"%u\", mem_offset);\n \t\t\t}\n \t\t      else"
    }
  ]
}