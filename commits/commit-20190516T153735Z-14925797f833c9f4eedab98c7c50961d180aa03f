{
  "sha": "14925797f833c9f4eedab98c7c50961d180aa03f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTQ5MjU3OTdmODMzYzlmNGVlZGFiOThjN2M1MDk2MWQxODBhYTAzZg==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T13:30:38Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:37:35Z"
    },
    "message": "[PATCH 46/57][Arm][OBJDUMP] Add support for MVE instructions: vmovl, vmull, vqdmull, vqmovn, vqmovun and vmovn\n\nopcodes/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Michael Collison <michael.collison@arm.com>\n\n\t* arm-dis.c (enum mve_instructions): Add new instructions.\n\t(is_mve_encoding_conflict): Handle new instructions.\n\t(is_mve_undefined): Likewise.\n\t(is_mve_unpredictable): Likewise.\n\t(print_mve_size): Likewise.\n\t(print_insn_mve): Likewise.",
    "tree": {
      "sha": "c92b5387a69d09231b59c1241bb0a1e46d3063cb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c92b5387a69d09231b59c1241bb0a1e46d3063cb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/14925797f833c9f4eedab98c7c50961d180aa03f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14925797f833c9f4eedab98c7c50961d180aa03f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/14925797f833c9f4eedab98c7c50961d180aa03f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14925797f833c9f4eedab98c7c50961d180aa03f/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c507f10b0711f24e1b82b8bd096e605317cf77fe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c507f10b0711f24e1b82b8bd096e605317cf77fe",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c507f10b0711f24e1b82b8bd096e605317cf77fe"
    }
  ],
  "stats": {
    "total": 206,
    "additions": 206,
    "deletions": 0
  },
  "files": [
    {
      "sha": "88304d59c68e33617968888c0418e9e679fe7d79",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/14925797f833c9f4eedab98c7c50961d180aa03f/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/14925797f833c9f4eedab98c7c50961d180aa03f/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=14925797f833c9f4eedab98c7c50961d180aa03f",
      "patch": "@@ -1,3 +1,13 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Michael Collison <michael.collison@arm.com>\n+\n+\t* arm-dis.c (enum mve_instructions): Add new instructions.\n+\t(is_mve_encoding_conflict): Handle new instructions.\n+\t(is_mve_undefined): Likewise.\n+\t(is_mve_unpredictable): Likewise.\n+\t(print_mve_size): Likewise.\n+\t(print_insn_mve): Likewise.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Michael Collison <michael.collison@arm.com>\n "
    },
    {
      "sha": "16bf0b9178dc39d8cbf5b538a8315ac0132887e0",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 196,
      "deletions": 0,
      "changes": 196,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/14925797f833c9f4eedab98c7c50961d180aa03f/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/14925797f833c9f4eedab98c7c50961d180aa03f/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=14925797f833c9f4eedab98c7c50961d180aa03f",
      "patch": "@@ -144,6 +144,14 @@ enum mve_instructions\n   MVE_VBIC_IMM,\n   MVE_VBIC_REG,\n   MVE_VMOVX,\n+  MVE_VMOVL,\n+  MVE_VMOVN,\n+  MVE_VMULL_INT,\n+  MVE_VMULL_POLY,\n+  MVE_VQDMULL_T1,\n+  MVE_VQDMULL_T2,\n+  MVE_VQMOVN,\n+  MVE_VQMOVUN,\n   MVE_NONE\n };\n \n@@ -1913,6 +1921,7 @@ static const struct opcode32 neon_opcodes[] =\n    %B\t\t\tprint v{st,ld}[24] any one operands\n    %E\t\t\tprint vmov, vmvn, vorr, vbic encoded constant\n    %N\t\t\tprint generic index for vmov\n+   %T\t\t\tprint bottom ('b') or top ('t') of source register\n \n    %<bitfield>r\t\tprint as an ARM register\n    %<bitfield>d\t\tprint the bitfield in decimal\n@@ -2280,12 +2289,36 @@ static const struct mopcode32 mve_opcodes[] =\n    0xee100b10, 0xff100f1f,\n    \"vmov%c.%u%5-6,21-22s\\t%12-15r, %17-19,7Q[%N]\"},\n \n+  /* Vector VMOVL long.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VMOVL,\n+   0xeea00f40, 0xefa70fd1,\n+   \"vmovl%T%v.%u%19-20s\\t%13-15,22Q, %1-3,5Q\"},\n+\n+  /* Vector VMOV and narrow.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VMOVN,\n+   0xfe310e81, 0xffb30fd1,\n+   \"vmovn%T%v.i%18-19s\\t%13-15,22Q, %1-3,5Q\"},\n+\n   /* Floating point move extract.  */\n   {ARM_FEATURE_COPROC (FPU_MVE_FP),\n    MVE_VMOVX,\n    0xfeb00a40, 0xffbf0fd0,\n    \"vmovx.f16\\t%22,12-15F, %5,0-3F\"},\n \n+  /* Vector VMULL integer.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VMULL_INT,\n+   0xee010e00, 0xef810f51,\n+   \"vmull%T%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VMULL polynomial.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VMULL_POLY,\n+   0xee310e00, 0xefb10f51,\n+   \"vmull%T%v.%28s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n   /* Vector VMVN immediate to vector.  */\n   {ARM_FEATURE_COPROC (FPU_MVE),\n    MVE_VMVN_IMM,\n@@ -2310,6 +2343,30 @@ static const struct mopcode32 mve_opcodes[] =\n    0xef200150, 0xffb11f51,\n    \"vorr%v\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n \n+  /* Vector VQDMULL T1 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQDMULL_T1,\n+   0xee300f01, 0xefb10f51,\n+   \"vqdmull%T%v.s%28s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n+\n+  /* Vector VQDMULL T2 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQDMULL_T2,\n+   0xee300f60, 0xefb10f70,\n+   \"vqdmull%T%v.s%28s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n+\n+  /* Vector VQMOVN.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQMOVN,\n+   0xee330e01, 0xefb30fd1,\n+   \"vqmovn%T%v.%u%18-19s\\t%13-15,22Q, %1-3,5Q\"},\n+\n+  /* Vector VQMOVUN.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQMOVUN,\n+   0xee310e81, 0xffb30fd1,\n+   \"vqmovun%T%v.s%18-19s\\t%13-15,22Q, %1-3,5Q\"},\n+\n   /* Vector VRINT floating point.  */\n   {ARM_FEATURE_COPROC (FPU_MVE_FP),\n    MVE_VRINT_FP,\n@@ -4420,6 +4477,7 @@ is_mve_encoding_conflict (unsigned long given,\n       else\n \treturn FALSE;\n \n+    case MVE_VMULL_INT:\n     case MVE_VHADD_T2:\n     case MVE_VHSUB_T2:\n     case MVE_VCMP_VEC_T1:\n@@ -4502,6 +4560,23 @@ is_mve_encoding_conflict (unsigned long given,\n       else\n \treturn FALSE;\n \n+    case MVE_VMOVL:\n+      {\n+\tunsigned long size = arm_decode_field (given, 19, 20);\n+\tif ((size == 0) || (size == 3))\n+\t  return TRUE;\n+\telse\n+\t  return FALSE;\n+      }\n+\n+    case MVE_VMOVN:\n+    case MVE_VQMOVUN:\n+    case MVE_VQMOVN:\n+      if (arm_decode_field (given, 18, 19) == 3)\n+\treturn TRUE;\n+      else\n+\treturn FALSE;\n+\n     default:\n       return FALSE;\n \n@@ -4855,6 +4930,15 @@ is_mve_undefined (unsigned long given, enum mve_instructions matched_insn,\n       else\n \treturn FALSE;\n \n+    case MVE_VMOVN:\n+      if (arm_decode_field (given, 18, 19) == 2)\n+\t{\n+\t  *undefined_code = UNDEF_SIZE_2;\n+\t  return TRUE;\n+\t}\n+      else\n+\treturn FALSE;\n+\n     default:\n       return FALSE;\n     }\n@@ -5126,6 +5210,86 @@ is_mve_unpredictable (unsigned long given, enum mve_instructions matched_insn,\n \treturn FALSE;\n       }\n \n+    case MVE_VMULL_INT:\n+      {\n+\tunsigned long Qd;\n+\tunsigned long Qm;\n+\tunsigned long Qn;\n+\n+\tif (arm_decode_field (given, 20, 21) == 2)\n+\t  {\n+\t    Qd = arm_decode_field_multiple (given, 13, 15, 22, 22);\n+\t    Qm = arm_decode_field_multiple (given, 1, 3, 5, 5);\n+\t    Qn = arm_decode_field_multiple (given, 17, 19, 7, 7);\n+\n+\t    if ((Qd == Qn) || (Qd == Qm))\n+\t      {\n+\t\t*unpredictable_code = UNPRED_Q_REGS_EQ_AND_SIZE_2;\n+\t\treturn TRUE;\n+\t      }\n+\t    else\n+\t      return FALSE;\n+\t  }\n+\telse\n+\t  return FALSE;\n+      }\n+\n+    case MVE_VQDMULL_T1:\n+      {\n+\tunsigned long Qd;\n+\tunsigned long Qm;\n+\tunsigned long Qn;\n+\n+\tif (arm_decode_field (given, 28, 28) == 1)\n+\t  {\n+\t    Qd = arm_decode_field_multiple (given, 13, 15, 22, 22);\n+\t    Qm = arm_decode_field_multiple (given, 1, 3, 5, 5);\n+\t    Qn = arm_decode_field_multiple (given, 17, 19, 7, 7);\n+\n+\t    if ((Qd == Qn) || (Qd == Qm))\n+\t      {\n+\t\t*unpredictable_code = UNPRED_Q_REGS_EQ_AND_SIZE_1;\n+\t\treturn TRUE;\n+\t      }\n+\t    else\n+\t      return FALSE;\n+\t  }\n+\telse\n+\t  return FALSE;\n+      }\n+\n+    case MVE_VQDMULL_T2:\n+      {\n+\tunsigned long gpr = arm_decode_field (given, 0, 3);\n+\tif (gpr == 0xd)\n+\t  {\n+\t    *unpredictable_code = UNPRED_R13;\n+\t    return TRUE;\n+\t  }\n+\telse if (gpr == 0xf)\n+\t  {\n+\t    *unpredictable_code = UNPRED_R15;\n+\t    return TRUE;\n+\t  }\n+\n+\tif (arm_decode_field (given, 28, 28) == 1)\n+\t  {\n+\t    unsigned long Qd\n+\t      = arm_decode_field_multiple (given, 13, 15, 22, 22);\n+\t    unsigned long Qn = arm_decode_field_multiple (given, 17, 19, 7, 7);\n+\n+\t    if ((Qd == Qn))\n+\t      {\n+\t\t*unpredictable_code = UNPRED_Q_REGS_EQ_AND_SIZE_1;\n+\t\treturn TRUE;\n+\t      }\n+\t    else\n+\t      return FALSE;\n+\t  }\n+\n+\treturn FALSE;\n+      }\n+\n     default:\n       return FALSE;\n     }\n@@ -5804,6 +5968,24 @@ print_mve_size (struct disassemble_info *info,\n \tfunc (stream, \"16\");\n       break;\n \n+    case MVE_VMOVN:\n+    case MVE_VQDMULL_T1:\n+    case MVE_VQDMULL_T2:\n+    case MVE_VQMOVN:\n+    case MVE_VQMOVUN:\n+      if (size == 0)\n+\tfunc (stream, \"16\");\n+      else if (size == 1)\n+\tfunc (stream, \"32\");\n+      break;\n+\n+    case MVE_VMOVL:\n+      if (size == 1)\n+\tfunc (stream, \"8\");\n+      else if (size == 2)\n+\tfunc (stream, \"16\");\n+      break;\n+\n     case MVE_VDUP:\n       switch (size)\n \t{\n@@ -5868,6 +6050,13 @@ print_mve_size (struct disassemble_info *info,\n \t}\n       break;\n \n+    case MVE_VMULL_POLY:\n+      if (size == 0)\n+\tfunc (stream, \"p8\");\n+      else if (size == 1)\n+\tfunc (stream, \"p16\");\n+      break;\n+\n     case MVE_VMVN_IMM:\n       switch (size)\n \t{\n@@ -7443,6 +7632,13 @@ print_insn_mve (struct disassemble_info *info, long given)\n \t\t      print_mve_vmov_index (info, given);\n \t\t      break;\n \n+\t\t    case 'T':\n+\t\t      if (arm_decode_field (given, 12, 12) == 0)\n+\t\t\tfunc (stream, \"b\");\n+\t\t      else\n+\t\t\tfunc (stream, \"t\");\n+\t\t      break;\n+\n \t\t    case '0': case '1': case '2': case '3': case '4':\n \t\t    case '5': case '6': case '7': case '8': case '9':\n \t\t      {"
    }
  ]
}