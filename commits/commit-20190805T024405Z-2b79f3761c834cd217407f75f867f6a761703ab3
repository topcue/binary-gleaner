{
  "sha": "2b79f3761c834cd217407f75f867f6a761703ab3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmI3OWYzNzYxYzgzNGNkMjE3NDA3Zjc1Zjg2N2Y2YTc2MTcwM2FiMw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-08-05T02:44:05Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-08-05T02:44:05Z"
    },
    "message": "Remove some variables in favor of using gdb::optional\n\nWhile reading that code, I noticed that some variables essentially meant\nwhether to consider some other variable or not.  I think using\ngdb::optional (which was not available when this code was written) is\nclearer, as it embeds the used/not used predicate directly in the type\nof the variable, making it harder to miss.\n\ngdb/ChangeLog:\n\n\t* dwarf2read.c (struct dw2_symtab_iterator):\n\t<want_specific_block>: Remove.\n\t<block_index>: Change type to gdb::optional.\n\t(dw2_symtab_iter_init): Remove WANT_SPECIFIC_BLOCK parameter,\n\tchange type of BLOCK_INDEX parameter to gdb::optional.\n\t(dw2_symtab_iter_next): Re-write in function of gdb::optional.\n\t(dw2_lookup_symbol): Don't pass argument for\n\tWANT_SPECIFIC_BLOCK.\n\t(dw2_expand_symtabs_for_function): Don't pass argument for\n\tWANT_SPECIFIC_BLOCK, pass empty optional for BLOCK_INDEX.\n\t(class dw2_debug_names_iterator)\n\t<dw2_debug_names_iterator>: Remove WANT_SPECIFIC_BLOCK\n\tparameter, change BLOCK_INDEX type to gdb::optional.\n\t<m_want_specific_block>: Remove.\n\t<m_block_index>: Change type to gdb::optional.\n\t(dw2_debug_names_iterator::next): Change type of IS_STATIC to\n\tgdb::optional.  Re-write in function of gdb::optional.\n\t(dw2_debug_names_lookup_symbol): Don't pass argument for\n\tWANT_SPECIFIC_BLOCK.\n\t(dw2_debug_names_expand_symtabs_for_function): Don't pass\n\targument for WANT_SPECIFIC_BLOCK, pass empty optional for\n\tBLOCK_INDEX.",
    "tree": {
      "sha": "4dcf6e42276048cba74d7ffdbd15507087de63e3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4dcf6e42276048cba74d7ffdbd15507087de63e3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2b79f3761c834cd217407f75f867f6a761703ab3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2b79f3761c834cd217407f75f867f6a761703ab3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2b79f3761c834cd217407f75f867f6a761703ab3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2b79f3761c834cd217407f75f867f6a761703ab3/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "188a63736c70060180382e36364a23dcebe3c29c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/188a63736c70060180382e36364a23dcebe3c29c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/188a63736c70060180382e36364a23dcebe3c29c"
    }
  ],
  "stats": {
    "total": 102,
    "additions": 55,
    "deletions": 47
  },
  "files": [
    {
      "sha": "c76991218a4d1d597f171b96dc1d40ab1b952adf",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b79f3761c834cd217407f75f867f6a761703ab3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b79f3761c834cd217407f75f867f6a761703ab3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2b79f3761c834cd217407f75f867f6a761703ab3",
      "patch": "@@ -1,3 +1,28 @@\n+2019-08-04  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* dwarf2read.c (struct dw2_symtab_iterator):\n+\t<want_specific_block>: Remove.\n+\t<block_index>: Change type to gdb::optional.\n+\t(dw2_symtab_iter_init): Remove WANT_SPECIFIC_BLOCK parameter,\n+\tchange type of BLOCK_INDEX parameter to gdb::optional.\n+\t(dw2_symtab_iter_next): Re-write in function of gdb::optional.\n+\t(dw2_lookup_symbol): Don't pass argument for\n+\tWANT_SPECIFIC_BLOCK.\n+\t(dw2_expand_symtabs_for_function): Don't pass argument for\n+\tWANT_SPECIFIC_BLOCK, pass empty optional for BLOCK_INDEX.\n+\t(class dw2_debug_names_iterator)\n+\t<dw2_debug_names_iterator>: Remove WANT_SPECIFIC_BLOCK\n+\tparameter, change BLOCK_INDEX type to gdb::optional.\n+\t<m_want_specific_block>: Remove.\n+\t<m_block_index>: Change type to gdb::optional.\n+\t(dw2_debug_names_iterator::next): Change type of IS_STATIC to\n+\tgdb::optional.  Re-write in function of gdb::optional.\n+\t(dw2_debug_names_lookup_symbol): Don't pass argument for\n+\tWANT_SPECIFIC_BLOCK.\n+\t(dw2_debug_names_expand_symtabs_for_function): Don't pass\n+\targument for WANT_SPECIFIC_BLOCK, pass empty optional for\n+\tBLOCK_INDEX.\n+\n 2019-08-03  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n         * NEWS: Mention changes to \"info sources\" command."
    },
    {
      "sha": "7466d1538b589c82c4d5037905aa96b9f37f3189",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 30,
      "deletions": 47,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b79f3761c834cd217407f75f867f6a761703ab3/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b79f3761c834cd217407f75f867f6a761703ab3/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=2b79f3761c834cd217407f75f867f6a761703ab3",
      "patch": "@@ -3881,11 +3881,9 @@ struct dw2_symtab_iterator\n {\n   /* The dwarf2_per_objfile owning the CUs we are iterating on.  */\n   struct dwarf2_per_objfile *dwarf2_per_objfile;\n-  /* If non-zero, only look for symbols that match BLOCK_INDEX.  */\n-  int want_specific_block;\n-  /* One of GLOBAL_BLOCK or STATIC_BLOCK.\n-     Unused if !WANT_SPECIFIC_BLOCK.  */\n-  int block_index;\n+  /* If set, only look for symbols that match that block.  Valid values are\n+     GLOBAL_BLOCK and STATIC_BLOCK.  */\n+  gdb::optional<int> block_index;\n   /* The kind of symbol we're looking for.  */\n   domain_enum domain;\n   /* The list of CUs from the index entry of the symbol,\n@@ -3902,20 +3900,16 @@ struct dw2_symtab_iterator\n   int global_seen;\n };\n \n-/* Initialize the index symtab iterator ITER.\n-   If WANT_SPECIFIC_BLOCK is non-zero, only look for symbols\n-   in block BLOCK_INDEX.  Otherwise BLOCK_INDEX is ignored.  */\n+/* Initialize the index symtab iterator ITER.  */\n \n static void\n dw2_symtab_iter_init (struct dw2_symtab_iterator *iter,\n \t\t      struct dwarf2_per_objfile *dwarf2_per_objfile,\n-\t\t      int want_specific_block,\n-\t\t      int block_index,\n+\t\t      gdb::optional<int> block_index,\n \t\t      domain_enum domain,\n \t\t      const char *name)\n {\n   iter->dwarf2_per_objfile = dwarf2_per_objfile;\n-  iter->want_specific_block = want_specific_block;\n   iter->block_index = block_index;\n   iter->domain = domain;\n   iter->next = 0;\n@@ -3945,9 +3939,6 @@ dw2_symtab_iter_next (struct dw2_symtab_iterator *iter)\n       offset_type cu_index_and_attrs =\n \tMAYBE_SWAP (iter->vec[iter->next + 1]);\n       offset_type cu_index = GDB_INDEX_CU_VALUE (cu_index_and_attrs);\n-      int want_static = iter->block_index != GLOBAL_BLOCK;\n-      /* This value is only valid for index versions >= 7.  */\n-      int is_static = GDB_INDEX_SYMBOL_STATIC_VALUE (cu_index_and_attrs);\n       gdb_index_symbol_kind symbol_kind =\n \tGDB_INDEX_SYMBOL_KIND_VALUE (cu_index_and_attrs);\n       /* Only check the symbol attributes if they're present.\n@@ -3977,9 +3968,16 @@ dw2_symtab_iter_next (struct dw2_symtab_iterator *iter)\n       /* Check static vs global.  */\n       if (attrs_valid)\n \t{\n-\t  if (iter->want_specific_block\n-\t      && want_static != is_static)\n-\t    continue;\n+\t  bool is_static = GDB_INDEX_SYMBOL_STATIC_VALUE (cu_index_and_attrs);\n+\n+\t  if (iter->block_index.has_value ())\n+\t    {\n+\t      bool want_static = *iter->block_index == STATIC_BLOCK;\n+\n+\t      if (is_static != want_static)\n+\t\tcontinue;\n+\t    }\n+\n \t  /* Work around gold/15646.  */\n \t  if (!is_static && iter->global_seen)\n \t    continue;\n@@ -4032,7 +4030,7 @@ dw2_lookup_symbol (struct objfile *objfile, int block_index,\n   struct dw2_symtab_iterator iter;\n   struct dwarf2_per_cu_data *per_cu;\n \n-  dw2_symtab_iter_init (&iter, dwarf2_per_objfile, 1, block_index, domain, name);\n+  dw2_symtab_iter_init (&iter, dwarf2_per_objfile, block_index, domain, name);\n \n   while ((per_cu = dw2_symtab_iter_next (&iter)) != NULL)\n     {\n@@ -4115,9 +4113,7 @@ dw2_expand_symtabs_for_function (struct objfile *objfile,\n   struct dw2_symtab_iterator iter;\n   struct dwarf2_per_cu_data *per_cu;\n \n-  /* Note: It doesn't matter what we pass for block_index here.  */\n-  dw2_symtab_iter_init (&iter, dwarf2_per_objfile, 0, GLOBAL_BLOCK, VAR_DOMAIN,\n-\t\t\tfunc_name);\n+  dw2_symtab_iter_init (&iter, dwarf2_per_objfile, {}, VAR_DOMAIN, func_name);\n \n   while ((per_cu = dw2_symtab_iter_next (&iter)) != NULL)\n     dw2_instantiate_symtab (per_cu, false);\n@@ -5661,14 +5657,11 @@ dwarf2_read_debug_names (struct dwarf2_per_objfile *dwarf2_per_objfile)\n class dw2_debug_names_iterator\n {\n public:\n-  /* If WANT_SPECIFIC_BLOCK is true, only look for symbols in block\n-     BLOCK_INDEX.  Otherwise BLOCK_INDEX is ignored.  */\n   dw2_debug_names_iterator (const mapped_debug_names &map,\n-\t\t\t    bool want_specific_block,\n-\t\t\t    block_enum block_index, domain_enum domain,\n+\t\t\t    gdb::optional<block_enum> block_index,\n+\t\t\t    domain_enum domain,\n \t\t\t    const char *name)\n-    : m_map (map), m_want_specific_block (want_specific_block),\n-      m_block_index (block_index), m_domain (domain),\n+    : m_map (map), m_block_index (block_index), m_domain (domain),\n       m_addr (find_vec_in_debug_names (map, name))\n   {}\n \n@@ -5691,13 +5684,9 @@ class dw2_debug_names_iterator\n   /* The internalized form of .debug_names.  */\n   const mapped_debug_names &m_map;\n \n-  /* If true, only look for symbols that match BLOCK_INDEX.  */\n-  const bool m_want_specific_block = false;\n-\n-  /* One of GLOBAL_BLOCK or STATIC_BLOCK.\n-     Unused if !WANT_SPECIFIC_BLOCK - FIRST_LOCAL_BLOCK is an invalid\n-     value.  */\n-  const block_enum m_block_index = FIRST_LOCAL_BLOCK;\n+  /* If set, only look for symbols that match that block.  Valid values are\n+     GLOBAL_BLOCK and STATIC_BLOCK.  */\n+  const gdb::optional<block_enum> m_block_index;\n \n   /* The kind of symbol we're looking for.  */\n   const domain_enum m_domain = UNDEF_DOMAIN;\n@@ -5854,8 +5843,7 @@ dw2_debug_names_iterator::next ()\n       return NULL;\n     }\n   const mapped_debug_names::index_val &indexval = indexval_it->second;\n-  bool have_is_static = false;\n-  bool is_static;\n+  gdb::optional<bool> is_static;\n   dwarf2_per_cu_data *per_cu = NULL;\n   for (const mapped_debug_names::index_val::attr &attr : indexval.attr_vec)\n     {\n@@ -5907,13 +5895,11 @@ dw2_debug_names_iterator::next ()\n \tcase DW_IDX_GNU_internal:\n \t  if (!m_map.augmentation_is_gdb)\n \t    break;\n-\t  have_is_static = true;\n \t  is_static = true;\n \t  break;\n \tcase DW_IDX_GNU_external:\n \t  if (!m_map.augmentation_is_gdb)\n \t    break;\n-\t  have_is_static = true;\n \t  is_static = false;\n \t  break;\n \t}\n@@ -5924,11 +5910,11 @@ dw2_debug_names_iterator::next ()\n     goto again;\n \n   /* Check static vs global.  */\n-  if (have_is_static)\n+  if (is_static.has_value () && m_block_index.has_value ())\n     {\n-      const bool want_static = m_block_index != GLOBAL_BLOCK;\n-      if (m_want_specific_block && want_static != is_static)\n-\tgoto again;\n+\tconst bool want_static = *m_block_index == STATIC_BLOCK;\n+\tif (want_static != *is_static)\n+\t  goto again;\n     }\n \n   /* Match dw2_symtab_iter_next, symbol_kind\n@@ -6027,8 +6013,7 @@ dw2_debug_names_lookup_symbol (struct objfile *objfile, int block_index_int,\n     }\n   const auto &map = *mapp;\n \n-  dw2_debug_names_iterator iter (map, true /* want_specific_block */,\n-\t\t\t\t block_index, domain, name);\n+  dw2_debug_names_iterator iter (map, block_index, domain, name);\n \n   struct compunit_symtab *stab_best = NULL;\n   struct dwarf2_per_cu_data *per_cu;\n@@ -6091,9 +6076,7 @@ dw2_debug_names_expand_symtabs_for_function (struct objfile *objfile,\n     {\n       const mapped_debug_names &map = *dwarf2_per_objfile->debug_names_table;\n \n-      /* Note: It doesn't matter what we pass for block_index here.  */\n-      dw2_debug_names_iterator iter (map, false /* want_specific_block */,\n-\t\t\t\t     GLOBAL_BLOCK, VAR_DOMAIN, func_name);\n+      dw2_debug_names_iterator iter (map, {}, VAR_DOMAIN, func_name);\n \n       struct dwarf2_per_cu_data *per_cu;\n       while ((per_cu = iter.next ()) != NULL)"
    }
  ]
}