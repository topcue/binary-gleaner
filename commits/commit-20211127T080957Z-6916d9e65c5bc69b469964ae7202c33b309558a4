{
  "sha": "6916d9e65c5bc69b469964ae7202c33b309558a4",
  "node_id": "C_kwDOANOeidoAKDY5MTZkOWU2NWM1YmM2OWI0Njk5NjRhZTcyMDJjMzNiMzA5NTU4YTQ",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-27T08:09:57Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-27T08:09:57Z"
    },
    "message": "sim: testsuite: add dedicated flag for init toolchain tests\n\nAs we setup more reliable CC_FOR_TARGET variables for each target, the\nbfin way of overriding it to stuff custom CFLAGS doesn't scale well.\nAdd a dedicated CFLAGS_FOR_TARGET_init setting that each set of tests\ncan setup if they want to add custom options.",
    "tree": {
      "sha": "ac2d18f7a1feb248589b7bc65a7dad32d3884000",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ac2d18f7a1feb248589b7bc65a7dad32d3884000"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6916d9e65c5bc69b469964ae7202c33b309558a4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6916d9e65c5bc69b469964ae7202c33b309558a4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6916d9e65c5bc69b469964ae7202c33b309558a4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6916d9e65c5bc69b469964ae7202c33b309558a4/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2b9c7c262e5e86224634199459c0972280aa3c71",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2b9c7c262e5e86224634199459c0972280aa3c71",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2b9c7c262e5e86224634199459c0972280aa3c71"
    }
  ],
  "stats": {
    "total": 21,
    "additions": 15,
    "deletions": 6
  },
  "files": [
    {
      "sha": "2be369dc9383ad2a8714cd9d3bf6692e49d14c63",
      "filename": "sim/testsuite/bfin/allinsn.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6916d9e65c5bc69b469964ae7202c33b309558a4/sim/testsuite/bfin/allinsn.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6916d9e65c5bc69b469964ae7202c33b309558a4/sim/testsuite/bfin/allinsn.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/bfin/allinsn.exp?ref=6916d9e65c5bc69b469964ae7202c33b309558a4",
      "patch": "@@ -2,9 +2,9 @@\n \n # Set a default CPU to satisfy bfin-elf-gcc requirements.  BF537 should work\n # with all standard Blackfin toolchains.\n-set CC_FOR_TARGET \"[find_gcc] -mcpu=bf537\"\n+global CFLAGS_FOR_TARGET_init\n+set CFLAGS_FOR_TARGET_init \"-mcpu=bf537\"\n sim_init\n-unset CC_FOR_TARGET\n \n if [istarget bfin-*-elf] {\n     # all machines"
    },
    {
      "sha": "cd16bbb13b9681079dee38d187e4a78f12ef57ed",
      "filename": "sim/testsuite/lib/sim-defs.exp",
      "status": "modified",
      "additions": 13,
      "deletions": 4,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6916d9e65c5bc69b469964ae7202c33b309558a4/sim/testsuite/lib/sim-defs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6916d9e65c5bc69b469964ae7202c33b309558a4/sim/testsuite/lib/sim-defs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/lib/sim-defs.exp?ref=6916d9e65c5bc69b469964ae7202c33b309558a4",
      "patch": "@@ -55,6 +55,7 @@ proc sim_init_toolchain {} {\n     global global_cpp_works\n     global global_cc_works\n     global global_cc_os\n+    global CFLAGS_FOR_TARGET_init\n \n     # Reset all the toolchain settings.  This provides a clean slate when\n     # starting the next set of tests.\n@@ -64,24 +65,30 @@ proc sim_init_toolchain {} {\n     set SIMFLAGS_FOR_TARGET \"\"\n     unset -nocomplain cpu_option cpu_option_sep\n \n+    # Merge per-test settings if available.\n+    if ![info exists CFLAGS_FOR_TARGET_init] {\n+\tset CFLAGS_FOR_TARGET_init \"\"\n+    }\n+    set cc_options [list \"additional_flags=$CFLAGS_FOR_TARGET_init\"]\n+\n     # See if we have a preprocessor available.\n     set result [target_compile $srcdir/lib/compilercheck.c \\\n-\t\t$objdir/compilercheck.x \"preprocess\" \"\"]\n+\t\t$objdir/compilercheck.x \"preprocess\" $cc_options]\n     set global_cpp_works [string equal \"\" \"$result\"]\n \n     # See if we have a compiler available, and which environment it's targeting.\n     if { [target_compile $srcdir/lib/newlibcheck.c \\\n-\t  $objdir/compilercheck.x \"executable\" \"\"] == \"\" } {\n+\t  $objdir/compilercheck.x \"executable\" $cc_options] == \"\" } {\n \tverbose -log \"Found newlib C compiler\"\n \tset global_cc_works 1\n \tset global_cc_os \"newlib\"\n     } elseif { [target_compile $srcdir/lib/linuxcheck.c \\\n-\t\t$objdir/compilercheck.x \"executable\" \"\"] == \"\" } {\n+\t\t$objdir/compilercheck.x \"executable\" $cc_options] == \"\" } {\n \tverbose -log \"Found Linux C compiler\"\n \tset global_cc_works 1\n \tset global_cc_os \"linux\"\n     } elseif { [target_compile $srcdir/lib/compilercheck.c \\\n-\t\t$objdir/compilercheck.x \"executable\" \"\"] == \"\" } {\n+\t\t$objdir/compilercheck.x \"executable\" $cc_options] == \"\" } {\n \tverbose -log \"Found C compiler, but unknown OS\"\n \tset global_cc_works 1\n \tset global_cc_os \"\"\n@@ -91,6 +98,8 @@ proc sim_init_toolchain {} {\n     }\n \n     file delete $objdir/compilercheck.x\n+\n+    unset CFLAGS_FOR_TARGET_init\n }\n \n # Print the version of the simulator being tested."
    }
  ]
}