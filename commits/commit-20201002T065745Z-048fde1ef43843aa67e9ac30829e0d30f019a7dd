{
  "sha": "048fde1ef43843aa67e9ac30829e0d30f019a7dd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDQ4ZmRlMWVmNDM4NDNhYTY3ZTlhYzMwODI5ZTBkMzBmMDE5YTdkZA==",
  "commit": {
    "author": {
      "name": "nitachra",
      "email": "Nitika.Achra@amd.com",
      "date": "2020-09-20T17:52:59Z"
    },
    "committer": {
      "name": "Alok Kumar Sharma",
      "email": "AlokKumar.Sharma@amd.com",
      "date": "2020-10-02T06:57:45Z"
    },
    "message": "DWARFv5: Handle DW_MACRO_define_strx and DW_MACRO_undef_strx macro entries.\n\nGDB complaints \"During symbol reading: unrecognized DW_MACFINO\nopcode 0xb\" with the testcase given below. Clang is emitting\nDW_MACRO_define_strx and DW_MACRO_undef_strx entries in .debug_macro\nsection which are not supported in GDB. This patch handles them.\n\nDW_MACRO_define_strx and DW_MACRO_undef_strx are added in DWARFv5.\nThey have two operands. The first operand encodes the line number of\nthe #define or #undef macro directive. The second operand identifies\na string; it is represented using an unsigned LEB128 encoded value,\nwhich is interpreted as a zero-based index into an array of offsets\nin the .debug_str_offsets section. This is as per the section 6.3.2.1\nof Dwarf Debugging Information Format Version 5.\n\nTest case used:\n #define MAX_SIZE 10\nint main(void)\n{\n   int size = 0;\n   size = size + MAX_SIZE;\n\n   printf(\"\\n The value of size is [%d]\\n\",size);\n\n   return 0;\n}\n\nclang -gdwarf-5 -fdebug-macro  macro.c -o macro.out\n\nBefore the patch:\n\ngdb/new_gdb/binutils-gdb/build/bin/gdb -q macro.out -ex \"set complaints 1\" -ex \"start\"\nReading symbols from macro.out...\nDuring symbol reading: unrecognized DW_MACFINO opcode 0xb\nTemporary breakpoint 1 at 0x4004df: file macro.c, line 7.\nStarting program: /home/nitika/workspace/macro.out\n\nTemporary breakpoint 1, main () at macro.c:7\n7          int size = 0;\n(gdb)\n\nTested by running the testsuite before and after the patch with\n -gdwarf-5 and there is no increase in the number of test cases\nthat fails. Used clang 11.0.0.\n\ngdb/ChangeLog:\n\n\t* dwarf2/macro.c (dwarf_decode_macro_bytes): Handle DW_MACRO_define_strx\n\tand DW_MACRO_undef_strx.\n\t(dwarf_decode_macros): Likewise\n\t* dwarf2/read.c (dwarf_decode_macros): Pass str_offsets_base in the parameters\n\twhich is the value of DW_AT_str_offsets_base.\n\t* dwarf2/macro.h (dwarf_decode_macros): Modify the definition to include\n\tstr_offsets_base.",
    "tree": {
      "sha": "7a65a5b65ca05872df345d9ceb62d37db0668659",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7a65a5b65ca05872df345d9ceb62d37db0668659"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/048fde1ef43843aa67e9ac30829e0d30f019a7dd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/048fde1ef43843aa67e9ac30829e0d30f019a7dd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/048fde1ef43843aa67e9ac30829e0d30f019a7dd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/048fde1ef43843aa67e9ac30829e0d30f019a7dd/comments",
  "author": null,
  "committer": {
    "login": "alokkrsharma",
    "id": 60725621,
    "node_id": "MDQ6VXNlcjYwNzI1NjIx",
    "avatar_url": "https://avatars.githubusercontent.com/u/60725621?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alokkrsharma",
    "html_url": "https://github.com/alokkrsharma",
    "followers_url": "https://api.github.com/users/alokkrsharma/followers",
    "following_url": "https://api.github.com/users/alokkrsharma/following{/other_user}",
    "gists_url": "https://api.github.com/users/alokkrsharma/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alokkrsharma/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alokkrsharma/subscriptions",
    "organizations_url": "https://api.github.com/users/alokkrsharma/orgs",
    "repos_url": "https://api.github.com/users/alokkrsharma/repos",
    "events_url": "https://api.github.com/users/alokkrsharma/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alokkrsharma/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "71a74ee72d18c89730d42236b212257dab8325c3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/71a74ee72d18c89730d42236b212257dab8325c3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/71a74ee72d18c89730d42236b212257dab8325c3"
    }
  ],
  "stats": {
    "total": 105,
    "additions": 101,
    "deletions": 4
  },
  "files": [
    {
      "sha": "9dd2123d60e64417275f4693d3f6bd93ab6f664e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/048fde1ef43843aa67e9ac30829e0d30f019a7dd/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/048fde1ef43843aa67e9ac30829e0d30f019a7dd/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=048fde1ef43843aa67e9ac30829e0d30f019a7dd",
      "patch": "@@ -1,3 +1,13 @@\n+2020-10-02  Nitika Achra  <Nitika.Achra@amd.com>\n+\n+\t* dwarf2/macro.c (dwarf_decode_macro_bytes): Handle DW_MACRO_define_strx\n+\tand DW_MACRO_undef_strx.\n+\t(dwarf_decode_macros): Likewise\n+\t* dwarf2/read.c (dwarf_decode_macros): Pass str_offsets_base in the parameters\n+\twhich is the value of DW_AT_str_offsets_base.\n+\t * dwarf2/macro.h (dwarf_decode_macros): Modify the definition to include\n+\tstr_offsets_base.\n+\n 2020-10-01  Kamil Rytarowski  <n54@gmx.com>\n \n \t* i386-tdep.h (i386nbsd_sc_reg_offset): Remove."
    },
    {
      "sha": "92086145643467fe5e277db7de40e7f5e1885635",
      "filename": "gdb/dwarf2/macro.c",
      "status": "modified",
      "additions": 68,
      "deletions": 3,
      "changes": 71,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/048fde1ef43843aa67e9ac30829e0d30f019a7dd/gdb/dwarf2/macro.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/048fde1ef43843aa67e9ac30829e0d30f019a7dd/gdb/dwarf2/macro.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/macro.c?ref=048fde1ef43843aa67e9ac30829e0d30f019a7dd",
      "patch": "@@ -427,6 +427,9 @@ dwarf_decode_macro_bytes (dwarf2_per_objfile *per_objfile,\n \t\t\t  const struct dwarf2_section_info *section,\n \t\t\t  int section_is_gnu, int section_is_dwz,\n \t\t\t  unsigned int offset_size,\n+\t\t\t  struct dwarf2_section_info *str_section,\n+\t\t\t  struct dwarf2_section_info *str_offsets_section,\n+\t\t\t  ULONGEST str_offsets_base,\n \t\t\t  htab_t include_hash)\n {\n   struct objfile *objfile = per_objfile->objfile;\n@@ -561,6 +564,53 @@ dwarf_decode_macro_bytes (dwarf2_per_objfile *per_objfile,\n           }\n           break;\n \n+\tcase DW_MACRO_define_strx:\n+\tcase DW_MACRO_undef_strx:\n+\t  {\n+\t    unsigned int bytes_read;\n+\n+\t    int line = read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n+\t    mac_ptr += bytes_read;\n+\t    int offset_index = read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n+\t    mac_ptr += bytes_read;\n+\n+\t    str_offsets_section->read (objfile);\n+\t    const gdb_byte *info_ptr = (str_offsets_section->buffer\n+\t\t\t\t\t+ str_offsets_base\n+\t\t\t\t\t+ offset_index * offset_size);\n+\n+\t    const char *macinfo_str = (macinfo_type == DW_MACRO_define_strx ?\n+\t\t\t\t       \"DW_MACRO_define_strx\" : \"DW_MACRO_undef_strx\");\n+\n+\t    if (str_offsets_base + offset_index * offset_size\n+\t\t>= str_offsets_section->size)\n+\t      {\n+\t\tcomplaint (_(\"%s pointing outside of .debug_str_offsets section \"\n+\t\t\t     \"[in module %s]\"), macinfo_str, objfile_name (objfile));\n+\t\tbreak;\n+\t      }\n+\n+\t    ULONGEST str_offset = read_offset (abfd, info_ptr, offset_size);\n+\n+\t    const char *body = str_section->read_string (objfile, str_offset,\n+\t\t\t\t\t\t\t macinfo_str);\n+\t    if (current_file == nullptr)\n+\t      {\n+\t\t/* DWARF violation as no main source is present.  */\n+\t\tcomplaint (_(\"debug info with no main source gives macro %s \"\n+\t\t\t     \"on line %d: %s\"),\n+\t\t\t     macinfo_type == DW_MACRO_define_strx ? _(\"definition\")\n+\t\t\t     : _(\"undefinition\"), line, body);\n+\t\tbreak;\n+\t      }\n+\n+\t    if (macinfo_type == DW_MACRO_define_strx)\n+\t      parse_macro_definition (current_file, line, body);\n+\t    else\n+\t      macro_undef (current_file, line, body);\n+\t   }\n+\t   break;\n+\n         case DW_MACRO_start_file:\n           {\n             unsigned int bytes_read;\n@@ -671,7 +721,8 @@ dwarf_decode_macro_bytes (dwarf2_per_objfile *per_objfile,\n \t\t\t\t\t  new_mac_ptr, include_mac_end,\n \t\t\t\t\t  current_file, lh, section,\n \t\t\t\t\t  section_is_gnu, is_dwz, offset_size,\n-\t\t\t\t\t  include_hash);\n+\t\t\t\t\t  str_section, str_offsets_section,\n+\t\t\t\t\t  str_offsets_base, include_hash);\n \n \t\thtab_remove_elt (include_hash, (void *) new_mac_ptr);\n \t      }\n@@ -712,7 +763,9 @@ dwarf_decode_macros (dwarf2_per_objfile *per_objfile,\n \t\t     buildsym_compunit *builder,\n \t\t     const dwarf2_section_info *section,\n \t\t     const struct line_header *lh, unsigned int offset_size,\n-\t\t     unsigned int offset, int section_is_gnu)\n+\t\t     unsigned int offset, struct dwarf2_section_info *str_section,\n+\t\t     struct dwarf2_section_info *str_offsets_section,\n+\t\t     ULONGEST str_offsets_base, int section_is_gnu)\n {\n   bfd *abfd;\n   const gdb_byte *mac_ptr, *mac_end;\n@@ -814,6 +867,17 @@ dwarf_decode_macros (dwarf2_per_objfile *per_objfile,\n \t    mac_ptr += offset_size;\n \t  }\n \t  break;\n+\tcase DW_MACRO_define_strx:\n+\tcase DW_MACRO_undef_strx:\n+\t  {\n+\t    unsigned int bytes_read;\n+\n+\t    read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n+\t    mac_ptr += bytes_read;\n+\t    read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n+\t    mac_ptr += bytes_read;\n+\t  }\n+\t  break;\n \n \tcase DW_MACRO_import:\n \tcase DW_MACRO_import_sup:\n@@ -861,5 +925,6 @@ dwarf_decode_macros (dwarf2_per_objfile *per_objfile,\n   *slot = (void *) mac_ptr;\n   dwarf_decode_macro_bytes (per_objfile, builder, abfd, mac_ptr, mac_end,\n \t\t\t    current_file, lh, section, section_is_gnu, 0,\n-\t\t\t    offset_size, include_hash.get ());\n+\t\t\t    offset_size, str_section, str_offsets_section,\n+\t\t\t    str_offsets_base, include_hash.get ());\n }"
    },
    {
      "sha": "0a7ac55fc0c7be4fc63bdcd5fbfc0ddb0ca6a61f",
      "filename": "gdb/dwarf2/macro.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/048fde1ef43843aa67e9ac30829e0d30f019a7dd/gdb/dwarf2/macro.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/048fde1ef43843aa67e9ac30829e0d30f019a7dd/gdb/dwarf2/macro.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/macro.h?ref=048fde1ef43843aa67e9ac30829e0d30f019a7dd",
      "patch": "@@ -28,6 +28,9 @@ extern void dwarf_decode_macros (dwarf2_per_objfile *per_objfile,\n \t\t\t\t const struct line_header *lh,\n \t\t\t\t unsigned int offset_size,\n \t\t\t\t unsigned int offset,\n+\t\t\t\t dwarf2_section_info *str_section,\n+\t\t\t\t dwarf2_section_info *str_offsets_section,\n+\t\t\t\t ULONGEST str_offsets_base,\n \t\t\t\t int section_is_gnu);\n \n #endif /* GDB_DWARF2_MACRO_H */"
    },
    {
      "sha": "eedfea112d96223d37e13642f67006c5a7d8f5e4",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 20,
      "deletions": 1,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/048fde1ef43843aa67e9ac30829e0d30f019a7dd/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/048fde1ef43843aa67e9ac30829e0d30f019a7dd/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=048fde1ef43843aa67e9ac30829e0d30f019a7dd",
      "patch": "@@ -23900,8 +23900,27 @@ dwarf_decode_macros (struct dwarf2_cu *cu, unsigned int offset,\n \n   buildsym_compunit *builder = cu->get_builder ();\n \n+  struct dwarf2_section_info *str_offsets_section;\n+  struct dwarf2_section_info *str_section;\n+  ULONGEST str_offsets_base;\n+\n+  if (cu->dwo_unit != nullptr)\n+    {\n+      str_offsets_section = &cu->dwo_unit->dwo_file\n+\t\t\t       ->sections.str_offsets;\n+      str_section = &cu->dwo_unit->dwo_file->sections.str;\n+      str_offsets_base = cu->header.addr_size;\n+    }\n+  else\n+    {\n+      str_offsets_section = &per_objfile->per_bfd->str_offsets;\n+      str_section = &per_objfile->per_bfd->str;\n+      str_offsets_base = *cu->str_offsets_base;\n+    }\n+\n   dwarf_decode_macros (per_objfile, builder, section, lh,\n-\t\t       offset_size, offset, section_is_gnu);\n+\t\t       offset_size, offset, str_section, str_offsets_section,\n+\t\t       str_offsets_base, section_is_gnu);\n }\n \n /* Return the .debug_loc section to use for CU."
    }
  ]
}