{
  "sha": "211aafd18d10b7739a16df5cc637952fd3f508e8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjExYWFmZDE4ZDEwYjc3MzlhMTZkZjVjYzYzNzk1MmZkM2Y1MDhlOA==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-14T12:41:27Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-14T12:41:27Z"
    },
    "message": "[gdb/symtab] Fix function range handling in psymtabs\n\nConsider the test-case from this patch.\n\nWe run into:\n...\n(gdb) PASS: gdb.dwarf2/dw2-ranges-psym-warning.exp: continue\nbt^M\nwarning: (Internal error: pc 0x4004b6 in read in psymtab, but not in symtab.)^M\n^M\nwarning: (Internal error: pc 0x4004b6 in read in psymtab, but not in symtab.)^M\n^M\nwarning: (Internal error: pc 0x4004b6 in read in psymtab, but not in symtab.)^M\n^M\nwarning: (Internal error: pc 0x4004b6 in read in psymtab, but not in symtab.)^M\n^M\nwarning: (Internal error: pc 0x4004b6 in read in psymtab, but not in symtab.)^M\n^M\nwarning: (Internal error: pc 0x4004b6 in read in psymtab, but not in symtab.)^M\n^M\n  read in psymtab, but not in symtab.)^M\n^M\n)^M\n(gdb) FAIL: gdb.dwarf2/dw2-ranges-psym-warning.exp: bt\n...\n\nThis happens as follows.\n\nThe function foo:\n...\n <1><31>: Abbrev Number: 4 (DW_TAG_subprogram)\n    <33>   DW_AT_name        : foo\n    <37>   DW_AT_ranges      : 0x0\n...\nhas these ranges:\n...\n    00000000 00000000004004c1 00000000004004d2\n    00000000 00000000004004ae 00000000004004af\n    00000000 <End of list>\n...\nwhich have a hole at at [0x4004af,0x4004c1).\n\nHowever, the address map of the partial symtabs incorrectly maps addresses\nin the hole (such as 0x4004b6 in the backtrace) to the foo CU.\n\nThe address map of the full symbol table of the foo CU however does not\ncontain the addresses in the hole, which is what the warning / internal error\ncomplains about.\n\nFix this by making sure that ranges of functions are read correctly.\n\nThe patch adds a bit to struct partial_die_info, in this hole (shown for\nx86_64-linux):\n...\n/*   11: 7   |     4 */    unsigned int canonical_name : 1;\n/* XXX  4-byte hole  */\n/*   16      |     8 */    const char *raw_name;\n...\nSo there's no increase in size for 64-bit, but AFAIU there will be an increase\nfor 32-bit.\n\nTested on x86_64-linux.\n\ngdb/ChangeLog:\n\n2021-08-10  Tom de Vries  <tdevries@suse.de>\n\n\tPR symtab/28200\n\t* dwarf2/read.c (struct partial_die_info): Add has_range_info and\n\trange_offset field.\n\t(add_partial_subprogram): Handle pdi->has_range_info.\n\t(partial_die_info::read): Set pdi->has_range_info.\n\ngdb/testsuite/ChangeLog:\n\n2021-08-10  Tom de Vries  <tdevries@suse.de>\n\n\tPR symtab/28200\n\t* gdb.dwarf2/dw2-ranges-psym-warning-main.c: New test.\n\t* gdb.dwarf2/dw2-ranges-psym-warning.c: New test.\n\t* gdb.dwarf2/dw2-ranges-psym-warning.exp: New file.",
    "tree": {
      "sha": "0f5787b71bcaf829dc407d2c24a156393daead85",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0f5787b71bcaf829dc407d2c24a156393daead85"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/211aafd18d10b7739a16df5cc637952fd3f508e8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/211aafd18d10b7739a16df5cc637952fd3f508e8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/211aafd18d10b7739a16df5cc637952fd3f508e8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/211aafd18d10b7739a16df5cc637952fd3f508e8/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2762d288534f48dc8653524b878883472037a57c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2762d288534f48dc8653524b878883472037a57c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2762d288534f48dc8653524b878883472037a57c"
    }
  ],
  "stats": {
    "total": 254,
    "additions": 246,
    "deletions": 8
  },
  "files": [
    {
      "sha": "192df2ac84374e1528e598d9bcb50e59ae8b3302",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 33,
      "deletions": 8,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/211aafd18d10b7739a16df5cc637952fd3f508e8/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/211aafd18d10b7739a16df5cc637952fd3f508e8/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=211aafd18d10b7739a16df5cc637952fd3f508e8",
      "patch": "@@ -863,6 +863,7 @@ struct partial_die_info : public allocate_on_obstack\n     unsigned int has_type : 1;\n     unsigned int has_specification : 1;\n     unsigned int has_pc_info : 1;\n+    unsigned int has_range_info : 1;\n     unsigned int may_be_inlined : 1;\n \n     /* This DIE has been marked DW_AT_main_subprogram.  */\n@@ -914,9 +915,17 @@ struct partial_die_info : public allocate_on_obstack\n       sect_offset sect_off;\n     } d {};\n \n-    /* If HAS_PC_INFO, the PC range associated with this DIE.  */\n-    CORE_ADDR lowpc = 0;\n-    CORE_ADDR highpc = 0;\n+    union\n+    {\n+      /* If HAS_PC_INFO, the PC range associated with this DIE.  */\n+      struct\n+      {\n+\tCORE_ADDR lowpc = 0;\n+\tCORE_ADDR highpc = 0;\n+      };\n+      /* If HAS_RANGE_INFO, the ranges offset associated with this DIE.  */\n+      ULONGEST ranges_offset;\n+    };\n \n     /* Pointer into the info_buffer (or types_buffer) pointing at the target of\n        DW_AT_sibling, if any.  */\n@@ -954,6 +963,7 @@ struct partial_die_info : public allocate_on_obstack\n       has_type = 0;\n       has_specification = 0;\n       has_pc_info = 0;\n+      has_range_info = 0;\n       may_be_inlined = 0;\n       main_subprogram = 0;\n       scope_set = 0;\n@@ -8125,6 +8135,10 @@ add_partial_module (struct partial_die_info *pdi, CORE_ADDR *lowpc,\n     scan_partial_symbols (pdi->die_child, lowpc, highpc, set_addrmap, cu);\n }\n \n+static int\n+dwarf2_ranges_read (unsigned, CORE_ADDR *, CORE_ADDR *, struct dwarf2_cu *,\n+\t\t    dwarf2_psymtab *, dwarf_tag);\n+\n /* Read a partial die corresponding to a subprogram or an inlined\n    subprogram and create a partial symbol for that subprogram.\n    When the CU language allows it, this routine also defines a partial\n@@ -8174,7 +8188,20 @@ add_partial_subprogram (struct partial_die_info *pdi,\n \t    }\n \t}\n \n-      if (pdi->has_pc_info || (!pdi->is_external && pdi->may_be_inlined))\n+      if (pdi->has_range_info\n+\t  && dwarf2_ranges_read (pdi->ranges_offset, &pdi->lowpc, &pdi->highpc,\n+\t\t\t\t cu,\n+\t\t\t\t set_addrmap ? cu->per_cu->v.psymtab : nullptr,\n+\t\t\t\t pdi->tag))\n+\t{\n+\t  if (pdi->lowpc < *lowpc)\n+\t    *lowpc = pdi->lowpc;\n+\t  if (pdi->highpc > *highpc)\n+\t    *highpc = pdi->highpc;\n+\t}\n+\n+      if (pdi->has_pc_info || pdi->has_range_info\n+\t  || (!pdi->is_external && pdi->may_be_inlined))\n \t{\n \t  if (!pdi->is_declaration)\n \t    /* Ignore subprogram DIEs that do not have a name, they are\n@@ -19389,16 +19416,14 @@ partial_die_info::read (const struct die_reader_specs *reader,\n \t  {\n \t    /* Offset in the .debug_ranges or .debug_rnglist section (depending\n \t       on DWARF version).  */\n-\t    ULONGEST ranges_offset = attr.as_unsigned ();\n+\t    ranges_offset = attr.as_unsigned ();\n \n \t    /* See dwarf2_cu::gnu_ranges_base's doc for why we might want to add\n \t       this value.  */\n \t    if (tag != DW_TAG_compile_unit)\n \t      ranges_offset += cu->gnu_ranges_base;\n \n-\t    if (dwarf2_ranges_read (ranges_offset, &lowpc, &highpc, cu,\n-\t\t\t\t    nullptr, tag))\n-\t      has_pc_info = 1;\n+\t    has_range_info = 1;\n \t  }\n \t  break;\n "
    },
    {
      "sha": "dfca2c984f33fda0b3aa72c3f0850060b57c2b6c",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-ranges-psym-warning-main.c",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/211aafd18d10b7739a16df5cc637952fd3f508e8/gdb/testsuite/gdb.dwarf2/dw2-ranges-psym-warning-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/211aafd18d10b7739a16df5cc637952fd3f508e8/gdb/testsuite/gdb.dwarf2/dw2-ranges-psym-warning-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-ranges-psym-warning-main.c?ref=211aafd18d10b7739a16df5cc637952fd3f508e8",
      "patch": "@@ -0,0 +1,28 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+extern void foo (void);\n+\n+int\n+main (void)\n+{\n+  asm (\"main_label: .globl main_label\");\n+\n+  foo ();\n+\n+  return 0;\n+}"
    },
    {
      "sha": "d6cd2d458b724e91aca1fbd112bcc630d48a6dc9",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-ranges-psym-warning.c",
      "status": "added",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/211aafd18d10b7739a16df5cc637952fd3f508e8/gdb/testsuite/gdb.dwarf2/dw2-ranges-psym-warning.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/211aafd18d10b7739a16df5cc637952fd3f508e8/gdb/testsuite/gdb.dwarf2/dw2-ranges-psym-warning.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-ranges-psym-warning.c?ref=211aafd18d10b7739a16df5cc637952fd3f508e8",
      "patch": "@@ -0,0 +1,44 @@\n+/* Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+void\n+baz (void)\n+{\n+  asm (\"baz_label: .globl baz_label\");\n+}\t\t\t\t\t\t/* baz end */\n+\n+void\n+foo_low (void)\n+{\t\t\t\t\t\t/* foo_low prologue */\n+  asm (\"foo_low_label: .globl foo_low_label\");\n+  baz ();\t\t\t\t\t/* foo_low baz call */\n+  asm (\"foo_low_label2: .globl foo_low_label2\");\n+}\t\t\t\t\t\t/* foo_low end */\n+\n+void\n+bar (void)\n+{\n+  asm (\"bar_label: .globl bar_label\");\n+}\t\t\t\t\t\t/* bar end */\n+\n+void\n+foo (void)\n+{\t\t\t\t\t\t/* foo prologue */\n+  asm (\"foo_label: .globl foo_label\");\n+  bar ();\t\t\t\t\t/* foo bar call */\n+  asm (\"foo_label2: .globl foo_label2\");\n+  foo_low ();\t\t\t\t\t/* foo foo_low call */\n+  asm (\"foo_label3: .globl foo_label3\");\n+}\t\t\t\t\t\t/* foo end */"
    },
    {
      "sha": "0caeb839ee4af5e06b92036dd596491ff4215bdd",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-ranges-psym-warning.exp",
      "status": "added",
      "additions": 141,
      "deletions": 0,
      "changes": 141,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/211aafd18d10b7739a16df5cc637952fd3f508e8/gdb/testsuite/gdb.dwarf2/dw2-ranges-psym-warning.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/211aafd18d10b7739a16df5cc637952fd3f508e8/gdb/testsuite/gdb.dwarf2/dw2-ranges-psym-warning.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-ranges-psym-warning.exp?ref=211aafd18d10b7739a16df5cc637952fd3f508e8",
      "patch": "@@ -0,0 +1,141 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+load_lib dwarf.exp\n+\n+# Check psymtabs addrmaps generated from DW_AT_ranges of functions.\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    unsupported \"dwarf2 support required for this test\"\n+    return 0\n+}\n+\n+standard_testfile -main.c .c -dw.S\n+\n+# We need to know the size of integer and address types in order to\n+# write some of the debugging info we'd like to generate.\n+#\n+# For that, we ask GDB by debugging our test program.  Any program\n+# would do, but since we already have it specifically for this\n+# testcase, might as well use that.\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list ${srcfile} ${srcfile2}]] } {\n+    return -1\n+}\n+\n+set asm_file [standard_output_file $srcfile3]\n+Dwarf::assemble $asm_file {\n+    global srcdir subdir srcfile srcfile2\n+    declare_labels integer_label func_ranges_label\n+    set int_size [get_sizeof \"int\" 4]\n+\n+    # Find start address and length for our functions.\n+    set sources  [list ${srcdir}/${subdir}/$srcfile ${srcdir}/${subdir}/$srcfile2]\n+\n+    lassign [function_range foo $sources] \\\n+\tfoo_start foo_len\n+    set foo_end \"$foo_start + $foo_len\"\n+\n+    lassign [function_range foo_low $sources] \\\n+\tfoo_low_start foo_low_len\n+    set foo_low_end \"$foo_low_start + $foo_low_len\"\n+\n+    lassign [function_range bar $sources] \\\n+\tbar_start bar_len\n+    set bar_end \"$bar_start + $bar_len\"\n+\n+    lassign [function_range baz $sources] \\\n+\tbaz_start baz_len\n+    set baz_end \"$baz_start + $baz_len\"\n+\n+    cu {} {\n+\tcompile_unit {\n+\t    {language @DW_LANG_C}\n+\t    {name dw-ranges-psym.c}\n+\t    {low_pc 0 addr}\n+\t} {\n+\t    integer_label: DW_TAG_base_type {\n+\t\t{DW_AT_byte_size $int_size DW_FORM_sdata}\n+\t\t{DW_AT_encoding  @DW_ATE_signed}\n+\t\t{DW_AT_name      integer}\n+\t    }\n+\t    subprogram {\n+\t\t{external 1 flag}\n+\t\t{name foo}\n+\t\t{ranges ${func_ranges_label} DW_FORM_sec_offset}\n+\t    }\n+\t    subprogram {\n+\t\t{external 1 flag}\n+\t\t{name bar}\n+\t\t{low_pc $bar_start addr}\n+\t\t{high_pc $bar_len DW_FORM_data4}\n+\t    }\n+\t    subprogram {\n+\t\t{external 1 flag}\n+\t\t{name baz}\n+\t\t{low_pc $baz_start addr}\n+\t\t{high_pc $baz_len DW_FORM_data4}\n+\t    }\n+\t}\n+    }\n+\n+    # Generate ranges data.  Create a hole at $foo_low_start + 1\" .. $foo_low_end.\n+    ranges {is_64 [is_64_target]} {\n+\tfunc_ranges_label: sequence {\n+\t    range $foo_start $foo_end\n+\t    range $foo_low_start \"$foo_low_start + 1\"\n+\t    #range \"$foo_low_start + 1\" $foo_low_end\n+\t}\n+    }\n+}\n+\n+if { [build_executable \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $srcfile2 $asm_file] {nodebug}] } {\n+    return -1\n+}\n+\n+clean_restart\n+\n+gdb_load_no_complaints $binfile\n+\n+if ![runto_main] {\n+    return -1\n+}\n+\n+# Generate backtrace from baz, that visits the hole in the addrmap.  If\n+# the hole is there in the symbol table, but not the partial symbol table,\n+# we run into:\n+# (gdb) bt\n+# warning: (Internal error: pc 0x555555554619 in read in psymtab, \\\n+#    but not in symtab.)\n+# ...\n+# (gdb) \n+\n+gdb_test \"break baz\" \\\n+    \"Breakpoint.*at.*\"\n+\n+gdb_test \"continue\"\n+\n+set re \"warning: \\\\(Internal error: pc $hex in read in psymtab, but not in symtab\\\\.\\\\)\"\n+gdb_test_multiple \"bt\" \"\" {\n+    -re -wrap \"$re.*\" {\n+\tfail $gdb_test_name\n+    }\n+    -re -wrap \"\" {\n+\tpass $gdb_test_name\n+    }\n+}"
    }
  ]
}