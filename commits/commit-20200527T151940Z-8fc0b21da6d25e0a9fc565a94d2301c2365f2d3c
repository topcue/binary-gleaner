{
  "sha": "8fc0b21da6d25e0a9fc565a94d2301c2365f2d3c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGZjMGIyMWRhNmQyNWUwYTlmYzU2NWE5NGQyMzAxYzIzNjVmMmQzYw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-05-27T15:14:09Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:19:40Z"
    },
    "message": "Pass dwarf2_cu to process_full_{comp,type}_unit\n\nThese two functions work on a dwarf2_cu.  It is currently obtained from\nthe per_cu->cu link, which we want to remove.  Make them accept the\ndwarf2_cu directly as a parameter.  This moves the per_cu->cu references\none level up, but that one will be removed too in a subsequent patch.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.c (process_full_comp_unit,\n\tprocess_full_type_unit): Remove per_cu, per_objfile paramters.\n\tAdd dwarf2_cu parameter.\n\t(process_queue): Update.\n\nChange-Id: I1027d36986073ac991e198e06f9d51341dc19c6e",
    "tree": {
      "sha": "53305ff18d2d776b8b60ed3905a47ad6010e213c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/53305ff18d2d776b8b60ed3905a47ad6010e213c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8fc0b21da6d25e0a9fc565a94d2301c2365f2d3c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8fc0b21da6d25e0a9fc565a94d2301c2365f2d3c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8fc0b21da6d25e0a9fc565a94d2301c2365f2d3c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8fc0b21da6d25e0a9fc565a94d2301c2365f2d3c/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "168c9250f292bf8d2db6dba374232e3655c10d94",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/168c9250f292bf8d2db6dba374232e3655c10d94",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/168c9250f292bf8d2db6dba374232e3655c10d94"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 22,
    "deletions": 22
  },
  "files": [
    {
      "sha": "4fbc44dbd18f2f219926638347cd42d10811ebaf",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8fc0b21da6d25e0a9fc565a94d2301c2365f2d3c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8fc0b21da6d25e0a9fc565a94d2301c2365f2d3c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8fc0b21da6d25e0a9fc565a94d2301c2365f2d3c",
      "patch": "@@ -1,3 +1,10 @@\n+2020-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* dwarf2/read.c (process_full_comp_unit,\n+\tprocess_full_type_unit): Remove per_cu, per_objfile paramters.\n+\tAdd dwarf2_cu parameter.\n+\t(process_queue): Update.\n+\n 2020-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* dwarf2/read.c (create_cu_from_index_list): Replace"
    },
    {
      "sha": "71a10f09bad92ca8202ff16f906059a81a4821db",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 15,
      "deletions": 22,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8fc0b21da6d25e0a9fc565a94d2301c2365f2d3c/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8fc0b21da6d25e0a9fc565a94d2301c2365f2d3c/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=8fc0b21da6d25e0a9fc565a94d2301c2365f2d3c",
      "patch": "@@ -1570,12 +1570,10 @@ static void load_full_comp_unit (dwarf2_per_cu_data *per_cu,\n \t\t\t\t bool skip_partial,\n \t\t\t\t enum language pretend_language);\n \n-static void process_full_comp_unit (dwarf2_per_cu_data *per_cu,\n-\t\t\t\t    dwarf2_per_objfile *per_objfile,\n+static void process_full_comp_unit (dwarf2_cu *cu,\n \t\t\t\t    enum language pretend_language);\n \n-static void process_full_type_unit (dwarf2_per_cu_data *per_cu,\n-\t\t\t\t    dwarf2_per_objfile *per_objfile,\n+static void process_full_type_unit (dwarf2_cu *cu,\n \t\t\t\t    enum language pretend_language);\n \n static void dwarf2_add_dependence (struct dwarf2_cu *,\n@@ -9021,11 +9019,9 @@ process_queue (struct dwarf2_per_objfile *dwarf2_per_objfile)\n \t    fprintf_unfiltered (gdb_stdlog, \"Expanding symtab of %s\\n\", buf);\n \n \t  if (per_cu->is_debug_types)\n-\t    process_full_type_unit (per_cu, dwarf2_per_objfile,\n-\t\t\t\t    item.pretend_language);\n+\t    process_full_type_unit (per_cu->cu, item.pretend_language);\n \t  else\n-\t    process_full_comp_unit (per_cu, dwarf2_per_objfile,\n-\t\t\t\t    item.pretend_language);\n+\t    process_full_comp_unit (per_cu->cu, item.pretend_language);\n \n \t  if (dwarf_read_debug >= debug_print_threshold)\n \t    fprintf_unfiltered (gdb_stdlog, \"Done expanding %s\\n\", buf);\n@@ -9759,15 +9755,13 @@ process_cu_includes (struct dwarf2_per_objfile *dwarf2_per_objfile)\n   dwarf2_per_objfile->per_bfd->just_read_cus.clear ();\n }\n \n-/* Generate full symbol information for PER_CU, whose DIEs have\n+/* Generate full symbol information for CU, whose DIEs have\n    already been loaded into memory.  */\n \n static void\n-process_full_comp_unit (dwarf2_per_cu_data *per_cu,\n-\t\t\tdwarf2_per_objfile *dwarf2_per_objfile,\n-\t\t\tenum language pretend_language)\n+process_full_comp_unit (dwarf2_cu *cu, enum language pretend_language)\n {\n-  struct dwarf2_cu *cu = per_cu->cu;\n+  dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   struct gdbarch *gdbarch = objfile->arch ();\n   CORE_ADDR lowpc, highpc;\n@@ -9850,30 +9844,29 @@ process_full_comp_unit (dwarf2_per_cu_data *per_cu,\n       cust->call_site_htab = cu->call_site_htab;\n     }\n \n-  dwarf2_per_objfile->set_symtab (per_cu, cust);\n+  dwarf2_per_objfile->set_symtab (cu->per_cu, cust);\n \n   /* Push it for inclusion processing later.  */\n-  dwarf2_per_objfile->per_bfd->just_read_cus.push_back (per_cu);\n+  dwarf2_per_objfile->per_bfd->just_read_cus.push_back (cu->per_cu);\n \n   /* Not needed any more.  */\n   cu->reset_builder ();\n }\n \n-/* Generate full symbol information for type unit PER_CU, whose DIEs have\n+/* Generate full symbol information for type unit CU, whose DIEs have\n    already been loaded into memory.  */\n \n static void\n-process_full_type_unit (dwarf2_per_cu_data *per_cu,\n-\t\t\tdwarf2_per_objfile *dwarf2_per_objfile,\n+process_full_type_unit (dwarf2_cu *cu,\n \t\t\tenum language pretend_language)\n {\n-  struct dwarf2_cu *cu = per_cu->cu;\n+  dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   struct compunit_symtab *cust;\n   struct signatured_type *sig_type;\n \n-  gdb_assert (per_cu->is_debug_types);\n-  sig_type = (struct signatured_type *) per_cu;\n+  gdb_assert (cu->per_cu->is_debug_types);\n+  sig_type = (struct signatured_type *) cu->per_cu;\n \n   /* Clear the list here in case something was left over.  */\n   cu->method_list.clear ();\n@@ -9925,7 +9918,7 @@ process_full_type_unit (dwarf2_per_cu_data *per_cu,\n       cust = tug_unshare->compunit_symtab;\n     }\n \n-  dwarf2_per_objfile->set_symtab (per_cu, cust);\n+  dwarf2_per_objfile->set_symtab (cu->per_cu, cust);\n \n   /* Not needed any more.  */\n   cu->reset_builder ();"
    }
  ]
}