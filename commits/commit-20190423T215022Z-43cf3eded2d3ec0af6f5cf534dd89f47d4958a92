{
  "sha": "43cf3eded2d3ec0af6f5cf534dd89f47d4958a92",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDNjZjNlZGVkMmQzZWMwYWY2ZjVjZjUzNGRkODlmNDdkNDk1OGE5Mg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-10T18:33:50Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-23T21:50:22Z"
    },
    "message": "gdb/m68hc11: Use default gdbarch methods where possible\n\nMake use of the default gdbarch methods for gdbarch_unwind_pc, and\ngdbarch_unwind_sp where possible.\n\nI have not tested this change but, by inspecting the code, I believe\nthe default methods are equivalent to the code being deleted.\n\ngdb/ChangeLog:\n\n\t* m68hc11-tdep.c (m68hc11_unwind_pc): Delete.\n\t(m68hc11_unwind_sp): Delete.\n\t(m68hc11_gdbarch_init): Don't register deleted functions with\n\tgdbarch.",
    "tree": {
      "sha": "280aaa31be21ef30e8b1bbe6430436b7a9075491",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/280aaa31be21ef30e8b1bbe6430436b7a9075491"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/43cf3eded2d3ec0af6f5cf534dd89f47d4958a92",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/43cf3eded2d3ec0af6f5cf534dd89f47d4958a92",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/43cf3eded2d3ec0af6f5cf534dd89f47d4958a92",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/43cf3eded2d3ec0af6f5cf534dd89f47d4958a92/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5e79b7bb69c797c3ca401cfa0f7a616eb2e3efe8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e79b7bb69c797c3ca401cfa0f7a616eb2e3efe8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5e79b7bb69c797c3ca401cfa0f7a616eb2e3efe8"
    }
  ],
  "stats": {
    "total": 31,
    "additions": 7,
    "deletions": 24
  },
  "files": [
    {
      "sha": "1bfdcaff8c92963273d95ea4e1fc18ebfbda2654",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43cf3eded2d3ec0af6f5cf534dd89f47d4958a92/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43cf3eded2d3ec0af6f5cf534dd89f47d4958a92/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=43cf3eded2d3ec0af6f5cf534dd89f47d4958a92",
      "patch": "@@ -1,3 +1,10 @@\n+2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* m68hc11-tdep.c (m68hc11_unwind_pc): Delete.\n+\t(m68hc11_unwind_sp): Delete.\n+\t(m68hc11_gdbarch_init): Don't register deleted functions with\n+\tgdbarch.\n+\n 2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* m32r-tdep.c (m32r_unwind_sp): Delete."
    },
    {
      "sha": "4097eef6e1c9a30e8b80a315ef3a575867459f36",
      "filename": "gdb/m68hc11-tdep.c",
      "status": "modified",
      "additions": 0,
      "deletions": 24,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/43cf3eded2d3ec0af6f5cf534dd89f47d4958a92/gdb/m68hc11-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/43cf3eded2d3ec0af6f5cf534dd89f47d4958a92/gdb/m68hc11-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m68hc11-tdep.c?ref=43cf3eded2d3ec0af6f5cf534dd89f47d4958a92",
      "patch": "@@ -757,16 +757,6 @@ m68hc11_skip_prologue (struct gdbarch *gdbarch, CORE_ADDR pc)\n   return pc;\n }\n \n-static CORE_ADDR\n-m68hc11_unwind_pc (struct gdbarch *gdbarch, struct frame_info *next_frame)\n-{\n-  ULONGEST pc;\n-\n-  pc = frame_unwind_register_unsigned (next_frame,\n-\t\t\t\t       gdbarch_pc_regnum (gdbarch));\n-  return pc;\n-}\n-\n /* Put here the code to store, into fi->saved_regs, the addresses of\n    the saved registers of frame described by FRAME_INFO.  This\n    includes special registers such as pc and fp saved in special ways\n@@ -974,14 +964,6 @@ static const struct frame_base m68hc11_frame_base = {\n   m68hc11_frame_args_address\n };\n \n-static CORE_ADDR\n-m68hc11_unwind_sp (struct gdbarch *gdbarch, struct frame_info *next_frame)\n-{\n-  ULONGEST sp;\n-  sp = frame_unwind_register_unsigned (next_frame, HARD_SP_REGNUM);\n-  return sp;\n-}\n-\n /* Assuming THIS_FRAME is a dummy, return the frame ID of that dummy\n    frame.  The frame ID's base needs to match the TOS value saved by\n    save_dummy_frame_tos(), and the PC match the dummy frame's breakpoint.  */\n@@ -1487,9 +1469,6 @@ m68hc11_gdbarch_init (struct gdbarch_info info,\n   /* Characters are unsigned.  */\n   set_gdbarch_char_signed (gdbarch, 0);\n \n-  set_gdbarch_unwind_pc (gdbarch, m68hc11_unwind_pc);\n-  set_gdbarch_unwind_sp (gdbarch, m68hc11_unwind_sp);\n-\n   /* Set register info.  */\n   set_gdbarch_fp0_regnum (gdbarch, -1);\n \n@@ -1524,9 +1503,6 @@ m68hc11_gdbarch_init (struct gdbarch_info info,\n      PUSH_DUMMY_CALL, and saved by generic_save_dummy_frame_tos.  */\n   set_gdbarch_dummy_id (gdbarch, m68hc11_dummy_id);\n \n-  /* Return the unwound PC value.  */\n-  set_gdbarch_unwind_pc (gdbarch, m68hc11_unwind_pc);\n-\n   /* Minsymbol frobbing.  */\n   set_gdbarch_elf_make_msymbol_special (gdbarch,\n                                         m68hc11_elf_make_msymbol_special);"
    }
  ]
}