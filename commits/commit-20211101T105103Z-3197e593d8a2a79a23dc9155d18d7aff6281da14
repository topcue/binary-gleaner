{
  "sha": "3197e593d8a2a79a23dc9155d18d7aff6281da14",
  "node_id": "C_kwDOANOeidoAKDMxOTdlNTkzZDhhMmE3OWEyM2RjOTE1NWQxOGQ3YWZmNjI4MWRhMTQ",
  "commit": {
    "author": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2021-11-01T10:43:25Z"
    },
    "committer": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2021-11-01T10:51:03Z"
    },
    "message": "arm: add armv9-a architecture to -march\n\nUpdate also include:\n\t+ New value of Tag_CPU_arch EABI attribute (22) is added.\n\t+ Updated missing Tag_CPU_arch EABI attributes.\n\t+ Updated how we combine archs 'v4t_plus_v6_m' as this mechanism\n\t  have to handle new Armv9 as well.\n\nRegression tested on `arm-none-eabi` cross Binutils and no issues.\n\nbfd/\n\n\t* archures.c: Define bfd_mach_arm_9.\n\t* bfd-in2.h (bfd_mach_arm_9): Define bfd_mach_arm_9.\n\t* cpu-arm.c: Add 'armv9-a' option to -march.\n\t* elf32-arm.c (using_thumb2_bl): Update assert check.\n\t(arch_has_arm_nop): Add TAG_CPU_ARCH_V9.\n\t(bfd_arm_get_mach_from_attributes): Add case for TAG_CPU_ARCH_V9.\n\tUpdate assert.\n\t(tag_cpu_arch_combine): Updated table.\n\t(v9): New table..\n\nbinutils/\n\n\t* readelf.c (arm_attr_tag_CPU_arch): Update with\n\nelfcpp/\n\n\t* arm.h: Update TAG_CPU_ARCH_ enums with correct values.\n\ngas/\n\n\t* NEWS: Update docs.\n\t* config/tc-arm.c (get_aeabi_cpu_arch_from_fset): Return Armv9-a\n\tfor -amarch=all.\n\t(aeabi_set_public_attributes): Update assert.\n\t* doc/c-arm.texi: Update docs.\n\t* testsuite/gas/arm/armv9-a_arch.d: New test.\n\t* testsuite/gas/arm/attr-march-all.d: Update test with v9.\n\ninclude/\n\n\t* elf/arm.h Update TAG_CPU_ARCH_ defines with correct values.\n\t* opcode/arm.h (ARM_EXT3_V9A): New macro.\n\t(ARM_ARCH_NONE): Updated with arm_feature_set.core size.\n\t(FPU_NONE): Updated.\n\t(ARM_ANY): Updated.\n\t(ARM_ARCH_UNKNOWN): New macro.\n\t(ARM_FEATURE_LOW): Updated.\n\t(ARM_FEATURE_CORE): Updated.\n\t(ARM_FEATURE_CORE_LOW): Updated.\n\t(ARM_FEATURE_CORE_HIGH): Updated.\n\t(ARM_FEATURE_COPROC): Updated.\n\t(ARM_FEATURE): Updated.\n\t(ARM_FEATURE_ALL): New macro.\n\nopcodes/\n\n\t* arm-dis.c (select_arm_features): Support bfd_mach_arm_9.\n\tAlso Update bfd_mach_arm_unknown to use new macro ARM_ARCH_UNKNOWN.",
    "tree": {
      "sha": "e6c241fb399f4c80a9ce4eb60a598da39306c5b0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e6c241fb399f4c80a9ce4eb60a598da39306c5b0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3197e593d8a2a79a23dc9155d18d7aff6281da14",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3197e593d8a2a79a23dc9155d18d7aff6281da14",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3197e593d8a2a79a23dc9155d18d7aff6281da14",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3197e593d8a2a79a23dc9155d18d7aff6281da14/comments",
  "author": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "94c9216c03ab1af16b1bdd11a10a66c13e6458d8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/94c9216c03ab1af16b1bdd11a10a66c13e6458d8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/94c9216c03ab1af16b1bdd11a10a66c13e6458d8"
    }
  ],
  "stats": {
    "total": 157,
    "additions": 131,
    "deletions": 26
  },
  "files": [
    {
      "sha": "441283b51a656e7f768647bd367b8736822c817c",
      "filename": "bfd/archures.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3197e593d8a2a79a23dc9155d18d7aff6281da14/bfd/archures.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3197e593d8a2a79a23dc9155d18d7aff6281da14/bfd/archures.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archures.c?ref=3197e593d8a2a79a23dc9155d18d7aff6281da14",
      "patch": "@@ -337,6 +337,7 @@ DESCRIPTION\n .#define bfd_mach_arm_8M_BASE   25\n .#define bfd_mach_arm_8M_MAIN   26\n .#define bfd_mach_arm_8_1M_MAIN 27\n+.#define bfd_mach_arm_9         28\n .  bfd_arch_nds32,     {* Andes NDS32.  *}\n .#define bfd_mach_n1\t\t1\n .#define bfd_mach_n1h\t\t2"
    },
    {
      "sha": "912d9a42674f72c55dea28b8d51ce2b0e2d08b01",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3197e593d8a2a79a23dc9155d18d7aff6281da14/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3197e593d8a2a79a23dc9155d18d7aff6281da14/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=3197e593d8a2a79a23dc9155d18d7aff6281da14",
      "patch": "@@ -1711,6 +1711,7 @@ enum bfd_architecture\n #define bfd_mach_arm_8M_BASE   25\n #define bfd_mach_arm_8M_MAIN   26\n #define bfd_mach_arm_8_1M_MAIN 27\n+#define bfd_mach_arm_9         28\n   bfd_arch_nds32,     /* Andes NDS32.  */\n #define bfd_mach_n1            1\n #define bfd_mach_n1h           2"
    },
    {
      "sha": "c8706253df13262b67bcb70aa6b431e53c6baaab",
      "filename": "bfd/cpu-arm.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3197e593d8a2a79a23dc9155d18d7aff6281da14/bfd/cpu-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3197e593d8a2a79a23dc9155d18d7aff6281da14/bfd/cpu-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-arm.c?ref=3197e593d8a2a79a23dc9155d18d7aff6281da14",
      "patch": "@@ -258,6 +258,7 @@ static const bfd_arch_info_type arch_info_struct[] =\n   N (bfd_mach_arm_8M_BASE,   \"armv8-m.base\",   false, & arch_info_struct[25]),\n   N (bfd_mach_arm_8M_MAIN,   \"armv8-m.main\",   false, & arch_info_struct[26]),\n   N (bfd_mach_arm_8_1M_MAIN, \"armv8.1-m.main\", false, & arch_info_struct[27]),\n+  N (bfd_mach_arm_9,         \"armv9-a\",        false, & arch_info_struct[28]),\n   N (bfd_mach_arm_unknown,   \"arm_any\",        false, NULL)\n };\n "
    },
    {
      "sha": "1655d52e2844e070e0baa2bd03af4a6f835283c8",
      "filename": "bfd/elf32-arm.c",
      "status": "modified",
      "additions": 49,
      "deletions": 5,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3197e593d8a2a79a23dc9155d18d7aff6281da14/bfd/elf32-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3197e593d8a2a79a23dc9155d18d7aff6281da14/bfd/elf32-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-arm.c?ref=3197e593d8a2a79a23dc9155d18d7aff6281da14",
      "patch": "@@ -3941,7 +3941,7 @@ using_thumb2_bl (struct elf32_arm_link_hash_table *globals)\n     bfd_elf_get_obj_attr_int (globals->obfd, OBJ_ATTR_PROC, Tag_CPU_arch);\n \n   /* Force return logic to be reviewed for each new architecture.  */\n-  BFD_ASSERT (arch <= TAG_CPU_ARCH_V8_1M_MAIN);\n+  BFD_ASSERT (arch <= TAG_CPU_ARCH_V9);\n \n   /* Architecture was introduced after ARMv6T2 (eg. ARMv6-M).  */\n   return (arch == TAG_CPU_ARCH_V6T2\n@@ -4130,13 +4130,14 @@ arch_has_arm_nop (struct elf32_arm_link_hash_table *globals)\n \t\t\t\t\t     Tag_CPU_arch);\n \n   /* Force return logic to be reviewed for each new architecture.  */\n-  BFD_ASSERT (arch <= TAG_CPU_ARCH_V8_1M_MAIN);\n+  BFD_ASSERT (arch <= TAG_CPU_ARCH_V9);\n \n   return (arch == TAG_CPU_ARCH_V6T2\n \t  || arch == TAG_CPU_ARCH_V6K\n \t  || arch == TAG_CPU_ARCH_V7\n \t  || arch == TAG_CPU_ARCH_V8\n-\t  || arch == TAG_CPU_ARCH_V8R);\n+\t  || arch == TAG_CPU_ARCH_V8R\n+\t  || arch == TAG_CPU_ARCH_V9);\n }\n \n static bool\n@@ -13852,6 +13853,8 @@ bfd_arm_get_mach_from_attributes (bfd * abfd)\n \treturn bfd_mach_arm_8M_MAIN;\n     case TAG_CPU_ARCH_V8_1M_MAIN:\n \treturn bfd_mach_arm_8_1M_MAIN;\n+    case TAG_CPU_ARCH_V9:\n+\treturn bfd_mach_arm_9;\n \n     default:\n       /* Force entry to be added for any new known Tag_CPU_arch value.  */\n@@ -14202,7 +14205,14 @@ tag_cpu_arch_combine (bfd *ibfd, int oldtag, int *secondary_compat_out,\n       T(V8),\t\t/* V6_M.  */\n       T(V8),\t\t/* V6S_M.  */\n       T(V8),\t\t/* V7E_M.  */\n-      T(V8)\t\t/* V8.  */\n+      T(V8),\t\t/* V8.  */\n+      T(V8),\t\t/* V8-R.  */\n+      T(V8),\t\t/* V8-M.BASE.  */\n+      T(V8),\t\t/* V8-M.MAIN.  */\n+      T(V8),\t\t/* V8.1.  */\n+      T(V8),\t\t/* V8.2.  */\n+      T(V8),\t\t/* V8.3.  */\n+      T(V8),\t\t/* V8.1-M.MAIN.  */\n     };\n   const int v8r[] =\n     {\n@@ -14289,6 +14299,32 @@ tag_cpu_arch_combine (bfd *ibfd, int oldtag, int *secondary_compat_out,\n       -1,\t\t/* Unused (20).  */\n       T(V8_1M_MAIN)\t/* V8.1-M MAINLINE.  */\n     };\n+  const int v9[] =\n+    {\n+      T(V9),\t\t/* PRE_V4.  */\n+      T(V9),\t\t/* V4.  */\n+      T(V9),\t\t/* V4T.  */\n+      T(V9),\t\t/* V5T.  */\n+      T(V9),\t\t/* V5TE.  */\n+      T(V9),\t\t/* V5TEJ.  */\n+      T(V9),\t\t/* V6.  */\n+      T(V9),\t\t/* V6KZ.  */\n+      T(V9),\t\t/* V6T2.  */\n+      T(V9),\t\t/* V6K.  */\n+      T(V9),\t\t/* V7.  */\n+      T(V9),\t\t/* V6_M.  */\n+      T(V9),\t\t/* V6S_M.  */\n+      T(V9),\t\t/* V7E_M.  */\n+      T(V9),\t\t/* V8.  */\n+      T(V9),\t\t/* V8-R.  */\n+      T(V9),\t\t/* V8-M.BASE.  */\n+      T(V9),\t\t/* V8-M.MAIN.  */\n+      T(V9),\t\t/* V8.1.  */\n+      T(V9),\t\t/* V8.2.  */\n+      T(V9),\t\t/* V8.3.  */\n+      T(V9),\t\t/* V8.1-M.MAIN.  */\n+      T(V9),\t\t/* V9.  */\n+     };\n   const int v4t_plus_v6_m[] =\n     {\n       -1,\t\t/* PRE_V4.  */\n@@ -14313,6 +14349,7 @@ tag_cpu_arch_combine (bfd *ibfd, int oldtag, int *secondary_compat_out,\n       -1,\t\t/* Unused (19).  */\n       -1,\t\t/* Unused (20).  */\n       T(V8_1M_MAIN),\t/* V8.1-M MAINLINE.  */\n+      T(V9),\t\t/* V9.  */\n       T(V4T_PLUS_V6_M)\t/* V4T plus V6_M.  */\n     };\n   const int *comb[] =\n@@ -14331,6 +14368,7 @@ tag_cpu_arch_combine (bfd *ibfd, int oldtag, int *secondary_compat_out,\n       NULL,\n       NULL,\n       v8_1m_mainline,\n+      v9,\n       /* Pseudo-architecture.  */\n       v4t_plus_v6_m\n     };\n@@ -14547,10 +14585,16 @@ elf32_arm_merge_eabi_attributes (bfd *ibfd, struct bfd_link_info *info)\n \t\t\"ARM v7\",\n \t\t\"ARM v6-M\",\n \t\t\"ARM v6S-M\",\n+\t\t\"ARM v7E-M\",\n \t\t\"ARM v8\",\n-\t\t\"\",\n+\t\t\"ARM v8-R\",\n \t\t\"ARM v8-M.baseline\",\n \t\t\"ARM v8-M.mainline\",\n+\t\t\"ARM v8.1-A\",\n+\t\t\"ARM v8.2-A\",\n+\t\t\"ARM v8.3-A\",\n+\t\t\"ARM v8.1-M.mainline\",\n+\t\t\"ARM v9\",\n \t    };\n \n \t    /* Merge Tag_CPU_arch and Tag_also_compatible_with.  */"
    },
    {
      "sha": "0fed82b63e3004c735f1e74e430744d888383538",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3197e593d8a2a79a23dc9155d18d7aff6281da14/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3197e593d8a2a79a23dc9155d18d7aff6281da14/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=3197e593d8a2a79a23dc9155d18d7aff6281da14",
      "patch": "@@ -16098,7 +16098,8 @@ typedef struct\n static const char *const arm_attr_tag_CPU_arch[] =\n   {\"Pre-v4\", \"v4\", \"v4T\", \"v5T\", \"v5TE\", \"v5TEJ\", \"v6\", \"v6KZ\", \"v6T2\",\n    \"v6K\", \"v7\", \"v6-M\", \"v6S-M\", \"v7E-M\", \"v8\", \"v8-R\", \"v8-M.baseline\",\n-   \"v8-M.mainline\", \"\", \"\", \"\", \"v8.1-M.mainline\"};\n+   \"v8-M.mainline\", \"v8.1-A\", \"v8.2-A\", \"v8.3-A\",\n+   \"v8.1-M.mainline\", \"v9\"};\n static const char *const arm_attr_tag_ARM_ISA_use[] = {\"No\", \"Yes\"};\n static const char *const arm_attr_tag_THUMB_ISA_use[] =\n   {\"No\", \"Thumb-1\", \"Thumb-2\", \"Yes\"};"
    },
    {
      "sha": "65374bb41ee701d44799222ec8e52ae430bf3497",
      "filename": "elfcpp/arm.h",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3197e593d8a2a79a23dc9155d18d7aff6281da14/elfcpp/arm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3197e593d8a2a79a23dc9155d18d7aff6281da14/elfcpp/arm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/elfcpp/arm.h?ref=3197e593d8a2a79a23dc9155d18d7aff6281da14",
      "patch": "@@ -254,7 +254,15 @@ enum\n   TAG_CPU_ARCH_V6S_M,\n   TAG_CPU_ARCH_V7E_M,\n   TAG_CPU_ARCH_V8,\n-  MAX_TAG_CPU_ARCH = TAG_CPU_ARCH_V8,\n+  TAG_CPU_ARCH_V8R,\n+  TAG_CPU_ARCH_V8M_BASE,\n+  TAG_CPU_ARCH_V8M_MAIN,\n+  TAG_CPU_ARCH_8_1A,\n+  TAG_CPU_ARCH_8_2A,\n+  TAG_CPU_ARCH_8_3A,\n+  TAG_CPU_ARCH_V8_1M_MAIN,\n+  TAG_CPU_ARCH_V9,\n+  MAX_TAG_CPU_ARCH = TAG_CPU_ARCH_V9,\n   // Pseudo-architecture to allow objects to be compatible with the subset of\n   // armv4t and armv6-m.  This value should never be stored in object files.\n   TAG_CPU_ARCH_V4T_PLUS_V6_M = (MAX_TAG_CPU_ARCH + 1)"
    },
    {
      "sha": "779ea5daf7fa20f9443b5d6bb657f47ff220e4ec",
      "filename": "gas/NEWS",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3197e593d8a2a79a23dc9155d18d7aff6281da14/gas/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3197e593d8a2a79a23dc9155d18d7aff6281da14/gas/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/NEWS?ref=3197e593d8a2a79a23dc9155d18d7aff6281da14",
      "patch": "@@ -15,6 +15,8 @@\n \n * Add support for 'armv9-a' for -march in AArch64 GAS.\n \n+* Add support for 'armv9-a' for -march in Arm GAS.\n+\n * Add support for Intel AVX512_FP16 instructions.\n \n Changes in 2.37:"
    },
    {
      "sha": "d4c590a8342e96478125885ded934ef02a0e3065",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 20,
      "deletions": 3,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3197e593d8a2a79a23dc9155d18d7aff6281da14/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3197e593d8a2a79a23dc9155d18d7aff6281da14/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=3197e593d8a2a79a23dc9155d18d7aff6281da14",
      "patch": "@@ -31949,6 +31949,21 @@ static const struct arm_ext_table armv86a_ext_table[] =\n   { NULL, 0, ARM_ARCH_NONE, ARM_ARCH_NONE }\n };\n \n+static const struct arm_ext_table armv9a_ext_table[] =\n+{\n+  ARM_ADD (\"simd\", FPU_ARCH_DOTPROD_NEON_VFP_ARMV8),\n+  ARM_ADD (\"fp16\", FPU_ARCH_NEON_VFP_ARMV8_4_FP16FML),\n+  ARM_ADD (\"bf16\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_BF16)),\n+  ARM_ADD (\"i8mm\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_I8MM)),\n+  ARM_EXT (\"crypto\", FPU_ARCH_CRYPTO_NEON_VFP_ARMV8_4,\n+\t   ARM_FEATURE_COPROC (FPU_CRYPTO_ARMV8)),\n+\n+  /* Armv9-a does not allow an FP implementation without SIMD, so the user\n+     should use the +simd option to turn on FP.  */\n+  ARM_REMOVE (\"fp\", ALL_FP),\n+  { NULL, 0, ARM_ARCH_NONE, ARM_ARCH_NONE }\n+};\n+\n #define CDE_EXTENSIONS \\\n   ARM_ADD (\"cdecp0\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE | ARM_EXT2_CDE0)), \\\n   ARM_ADD (\"cdecp1\", ARM_FEATURE_CORE_HIGH (ARM_EXT2_CDE | ARM_EXT2_CDE1)), \\\n@@ -32071,6 +32086,7 @@ static const struct arm_arch_option_table arm_archs[] =\n   ARM_ARCH_OPT2 (\"armv8.4-a\",\t  ARM_ARCH_V8_4A,\tFPU_ARCH_VFP, armv84a),\n   ARM_ARCH_OPT2 (\"armv8.5-a\",\t  ARM_ARCH_V8_5A,\tFPU_ARCH_VFP, armv85a),\n   ARM_ARCH_OPT2 (\"armv8.6-a\",\t  ARM_ARCH_V8_6A,\tFPU_ARCH_VFP, armv86a),\n+  ARM_ARCH_OPT2 (\"armv9-a\",\t  ARM_ARCH_V9A,\tFPU_ARCH_VFP, armv9a),\n   ARM_ARCH_OPT (\"xscale\",\t  ARM_ARCH_XSCALE,\tFPU_ARCH_VFP),\n   ARM_ARCH_OPT (\"iwmmxt\",\t  ARM_ARCH_IWMMXT,\tFPU_ARCH_VFP),\n   ARM_ARCH_OPT (\"iwmmxt2\",\t  ARM_ARCH_IWMMXT2,\tFPU_ARCH_VFP),\n@@ -32854,6 +32870,7 @@ static const cpu_arch_ver_table cpu_arch_ver[] =\n     {TAG_CPU_ARCH_V8,\t      ARM_ARCH_V8_5A},\n     {TAG_CPU_ARCH_V8_1M_MAIN, ARM_ARCH_V8_1M_MAIN},\n     {TAG_CPU_ARCH_V8,\t    ARM_ARCH_V8_6A},\n+    {TAG_CPU_ARCH_V9,\t    ARM_ARCH_V9A},\n     {-1,\t\t    ARM_ARCH_NONE}\n };\n \n@@ -32937,9 +32954,9 @@ get_aeabi_cpu_arch_from_fset (const arm_feature_set *arch_ext_fset,\n   if (ARM_FEATURE_EQUAL (*arch_ext_fset, arm_arch_any))\n     {\n       /* Force revisiting of decision for each new architecture.  */\n-      gas_assert (MAX_TAG_CPU_ARCH <= TAG_CPU_ARCH_V8_1M_MAIN);\n+      gas_assert (MAX_TAG_CPU_ARCH <= TAG_CPU_ARCH_V9);\n       *profile = 'A';\n-      return TAG_CPU_ARCH_V8;\n+      return TAG_CPU_ARCH_V9;\n     }\n \n   ARM_CLEAR_FEATURE (arch_fset, *arch_ext_fset, *ext_fset);\n@@ -33215,7 +33232,7 @@ aeabi_set_public_attributes (void)\n      by the base architecture.\n \n      For new architectures we will have to check these tests.  */\n-  gas_assert (arch <= TAG_CPU_ARCH_V8_1M_MAIN);\n+  gas_assert (arch <= TAG_CPU_ARCH_V9);\n   if (ARM_CPU_HAS_FEATURE (flags, arm_ext_v8)\n       || ARM_CPU_HAS_FEATURE (flags, arm_ext_v8m))\n     aeabi_set_attribute_int (Tag_DIV_use, 0);"
    },
    {
      "sha": "4baa46d3083bbde6df7f29122477f8390faf6771",
      "filename": "gas/doc/c-arm.texi",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3197e593d8a2a79a23dc9155d18d7aff6281da14/gas/doc/c-arm.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3197e593d8a2a79a23dc9155d18d7aff6281da14/gas/doc/c-arm.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/c-arm.texi?ref=3197e593d8a2a79a23dc9155d18d7aff6281da14",
      "patch": "@@ -264,6 +264,7 @@ names are recognized:\n @code{armv8-m.main},\n @code{armv8.1-m.main},\n @code{armv8.6-a},\n+@code{armv9-a},\n @code{iwmmxt},\n @code{iwmmxt2}\n and"
    },
    {
      "sha": "52c8bb0c15fd877c351b0d3d2ebb575f868cc7d6",
      "filename": "gas/testsuite/gas/arm/armv9-a_arch.d",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3197e593d8a2a79a23dc9155d18d7aff6281da14/gas/testsuite/gas/arm/armv9-a_arch.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3197e593d8a2a79a23dc9155d18d7aff6281da14/gas/testsuite/gas/arm/armv9-a_arch.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/armv9-a_arch.d?ref=3197e593d8a2a79a23dc9155d18d7aff6281da14",
      "patch": "@@ -0,0 +1,17 @@\n+# name: check for armv9-a command line option settings\n+# source: blank.s\n+# as: -march=armv9-a\n+# readelf: -A\n+# This test is only valid on EABI based ports.\n+# target: *-*-*eabi* *-*-nacl*\n+\n+Attribute Section: aeabi\n+File Attributes\n+  Tag_CPU_name: \"9-A\"\n+  Tag_CPU_arch: v9\n+  Tag_CPU_arch_profile: Application\n+  Tag_ARM_ISA_use: Yes\n+  Tag_THUMB_ISA_use: Thumb-2\n+  Tag_Advanced_SIMD_arch: NEON for ARMv8.1\n+  Tag_MPextension_use: Allowed\n+  Tag_Virtualization_use: TrustZone and Virtualization Extensions"
    },
    {
      "sha": "e051691428a438134ef9ed928869fd06d32ab1de",
      "filename": "gas/testsuite/gas/arm/attr-march-all.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3197e593d8a2a79a23dc9155d18d7aff6281da14/gas/testsuite/gas/arm/attr-march-all.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3197e593d8a2a79a23dc9155d18d7aff6281da14/gas/testsuite/gas/arm/attr-march-all.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/attr-march-all.d?ref=3197e593d8a2a79a23dc9155d18d7aff6281da14",
      "patch": "@@ -8,7 +8,7 @@\n Attribute Section: aeabi\n File Attributes\n   Tag_CPU_name: \"all\"\n-  Tag_CPU_arch: v8\n+  Tag_CPU_arch: v9\n   Tag_CPU_arch_profile: Application\n   Tag_ARM_ISA_use: Yes\n   Tag_THUMB_ISA_use: Thumb-2"
    },
    {
      "sha": "8213b90e981f168389d6318a1ac0be66d75f9633",
      "filename": "include/elf/arm.h",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3197e593d8a2a79a23dc9155d18d7aff6281da14/include/elf/arm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3197e593d8a2a79a23dc9155d18d7aff6281da14/include/elf/arm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/elf/arm.h?ref=3197e593d8a2a79a23dc9155d18d7aff6281da14",
      "patch": "@@ -111,8 +111,12 @@\n #define TAG_CPU_ARCH_V8R\t15\n #define TAG_CPU_ARCH_V8M_BASE\t16\n #define TAG_CPU_ARCH_V8M_MAIN\t17\n+#define TAG_CPU_ARCH_8_1A       18\n+#define TAG_CPU_ARCH_8_2A       19\n+#define TAG_CPU_ARCH_8_3A       20\n #define TAG_CPU_ARCH_V8_1M_MAIN 21\n-#define MAX_TAG_CPU_ARCH\tTAG_CPU_ARCH_V8_1M_MAIN\n+#define TAG_CPU_ARCH_V9         22\n+#define MAX_TAG_CPU_ARCH\tTAG_CPU_ARCH_V9\n /* Pseudo-architecture to allow objects to be compatible with the subset of\n    armv4t and armv6-m.  This value should never be stored in object files.  */\n #define TAG_CPU_ARCH_V4T_PLUS_V6_M (MAX_TAG_CPU_ARCH + 1)"
    },
    {
      "sha": "cf72b90bd55a759b0ffd4b4e644a061625e0f376",
      "filename": "include/opcode/arm.h",
      "status": "modified",
      "additions": 20,
      "deletions": 11,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3197e593d8a2a79a23dc9155d18d7aff6281da14/include/opcode/arm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3197e593d8a2a79a23dc9155d18d7aff6281da14/include/opcode/arm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/arm.h?ref=3197e593d8a2a79a23dc9155d18d7aff6281da14",
      "patch": "@@ -94,6 +94,7 @@\n \t\t\t\t\t   Authentication and Branch\n \t\t\t\t\t   Target Identification\n \t\t\t\t\t   Extension.  */\n+#define ARM_EXT3_V9A\t        0x00000002 /* Armv9-A.\t               */\n \n /* Co-processor space extensions.  */\n #define ARM_CEXT_XSCALE\t     0x00000001\t/* Allow MIA etc.\t \t   */\n@@ -385,11 +386,16 @@\n #define ARM_ARCH_V8R\t       ARM_FEATURE_CORE (ARM_AEXT_V8R, ARM_AEXT2_V8R)\n #define ARM_ARCH_V8_1M_MAIN    ARM_FEATURE_CORE (ARM_AEXT_V8_1M_MAIN,\t   \\\n \t\t\t\t\t\t ARM_AEXT2_V8_1M_MAIN)\n+#define ARM_ARCH_V9A\t       ARM_FEATURE_ALL(ARM_AEXT_V8A,\t   \\\n+\t\t\t\t      ARM_AEXT2_V8_5A | ARM_EXT2_CRC,\t   \\\n+\t\t\t\t      ARM_EXT3_V9A,\t   \\\n+                      FPU_NEON_EXT_RDMA\t| FPU_NEON_EXT_DOTPROD)\n \n /* Some useful combinations:  */\n-#define ARM_ARCH_NONE\tARM_FEATURE_LOW (0, 0)\n-#define FPU_NONE\tARM_FEATURE_LOW (0, 0)\n-#define ARM_ANY\t\tARM_FEATURE (-1, -1 & ~ (ARM_EXT2_MVE | ARM_EXT2_MVE_FP), 0)\t/* Any basic core.  */\n+#define ARM_ARCH_NONE\tARM_FEATURE_ALL (0, 0, 0, 0)\n+#define FPU_NONE\tARM_FEATURE_ALL (0, 0, 0, 0)\n+#define ARM_ARCH_UNKNOWN\tARM_FEATURE_ALL (-1, -1 & ~(ARM_EXT2_MVE | ARM_EXT2_MVE_FP), -1, -1)\t/* Machine type is unknown.  */\n+#define ARM_ANY\t\tARM_FEATURE_ALL (-1, -1 & ~(ARM_EXT2_MVE | ARM_EXT2_MVE_FP), -1, 0)\t/* Any basic core.  */\n #define FPU_ANY\t\tARM_FEATURE_COPROC (-1 & ~(ARM_CEXT_XSCALE | ARM_CEXT_IWMMXT | ARM_CEXT_IWMMXT2)) /* Any FPU.  */\n #define FPU_ANY_HARD\tARM_FEATURE_COPROC (FPU_FPA | FPU_VFP_HARD | FPU_MAVERICK)\n /* Extensions containing some Thumb-2 instructions.  If any is present, Thumb\n@@ -429,8 +435,8 @@\n \n /* There are too many feature bits to fit in a single word, so use a\n    structure.  For simplicity we put all core features in array CORE\n-   and everything else in the other.  All the bits in element core[0]\n-   have been occupied, so new feature should use bit in element core[1]\n+   and everything else in the other.  All the bits in element core[0:1]\n+   have been occupied, so new feature should use bit in element core[2]\n    and use macro ARM_FEATURE to initialize the feature set variable.  */\n typedef struct\n {\n@@ -494,10 +500,13 @@ typedef struct\n    && (T1).core[1] == (T2).core[1]\t\t\\\n    && (T1).core[2] == (T2).core[2])\n \n-#define ARM_FEATURE_LOW(core, coproc) {{(core), 0}, (coproc)}\n-#define ARM_FEATURE_CORE(core1, core2) {{(core1), (core2)}, 0}\n-#define ARM_FEATURE_CORE_LOW(core) {{(core), 0}, 0}\n-#define ARM_FEATURE_CORE_HIGH(core) {{0, (core)}, 0}\n+#define ARM_FEATURE_LOW(core, coproc) {{(core), 0, 0}, (coproc)}\n+#define ARM_FEATURE_CORE(core1, core2) {{(core1), (core2), 0}, 0}\n+#define ARM_FEATURE_CORE_LOW(core) {{(core), 0, 0}, 0}\n+#define ARM_FEATURE_CORE_HIGH(core) {{0, (core), 0}, 0}\n #define ARM_FEATURE_CORE_HIGH_HIGH(core) {{0, 0, (core)}, 0}\n-#define ARM_FEATURE_COPROC(coproc) {{0, 0}, (coproc)}\n-#define ARM_FEATURE(core1, core2, coproc) {{(core1), (core2)}, (coproc)}\n+#define ARM_FEATURE_COPROC(coproc) {{0, 0, 0}, (coproc)}\n+#define ARM_FEATURE(core1, core2, coproc) {{(core1), (core2), 0}, (coproc)}\n+/* Below macro is used to set all fields in arm_feature_set struct.\n+*/\n+#define ARM_FEATURE_ALL(core1, core2, core3, coproc) {{(core1), (core2), (core3)}, (coproc)}"
    },
    {
      "sha": "1888d9af48841bfcaa7f7c37c4a535261b1815e1",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3197e593d8a2a79a23dc9155d18d7aff6281da14/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3197e593d8a2a79a23dc9155d18d7aff6281da14/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=3197e593d8a2a79a23dc9155d18d7aff6281da14",
      "patch": "@@ -12028,12 +12028,11 @@ select_arm_features (unsigned long mach,\n       ARM_MERGE_FEATURE_SETS (arch_fset, arch_fset, mve_all);\n       force_thumb = 1;\n       break;\n+    case bfd_mach_arm_9:         ARM_SET_FEATURES (ARM_ARCH_V9A); break;\n       /* If the machine type is unknown allow all architecture types and all\n \t extensions, with the exception of MVE as that clashes with NEON.  */\n     case bfd_mach_arm_unknown:\n-      ARM_SET_FEATURES (ARM_FEATURE (-1,\n-\t\t\t\t     -1 & ~(ARM_EXT2_MVE | ARM_EXT2_MVE_FP),\n-\t\t\t\t     -1));\n+      ARM_SET_FEATURES (ARM_ARCH_UNKNOWN);\n       break;\n     default:\n       abort ();"
    }
  ]
}