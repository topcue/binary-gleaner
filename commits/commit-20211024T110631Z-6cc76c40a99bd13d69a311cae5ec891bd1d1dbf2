{
  "sha": "6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2",
  "node_id": "C_kwDOANOeidoAKDZjYzc2YzQwYTk5YmQxM2Q2OWEzMTFjYWU1ZWM4OTFiZDFkMWRiZjI",
  "commit": {
    "author": {
      "name": "liuzhensong",
      "email": "liuzhensong@loongson.cn",
      "date": "2021-10-22T08:42:04Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-24T11:06:31Z"
    },
    "message": "LoongArch opcodes support\n\n2021-10-22  Chenghua Xu  <xuchenghua@loongson.cn>\n\t    Zhensong Liu  <liuzhensong@loongson.cn>\n\t    Weinan Liu  <liuweinan@loongson.cn>\n\ninclude/\n\t* opcode/loongarch.h: New.\n\t* dis-asm.h: Declare print_loongarch_disassembler_options.\nopcodes/\n\t* Makefile.am: Add LoongArch.\n\t* configure.ac: Likewise.\n\t* disassemble.c: Likewise.\n\t* disassemble.h: Declare print_insn_loongarch.\n\t* loongarch-coder.c: New.\n\t* loongarch-dis.c: New.\n\t* loongarch-opc.c: New.\n\t* Makefile.in: Regenerate.\n\t* configure: Regenerate.\n\t* po/POTFILES.in: Regenerate.",
    "tree": {
      "sha": "091be65314dbf2b4b4030edb7a7f8140504f230b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/091be65314dbf2b4b4030edb7a7f8140504f230b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/comments",
  "author": null,
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e214f8db56f65531b0a5ec296c42339dcaa5af31"
    }
  ],
  "stats": {
    "total": 1877,
    "additions": 1877,
    "deletions": 0
  },
  "files": [
    {
      "sha": "c0bc1d542cf52b3d5e86ee1e7073e92e3f4c2498",
      "filename": "include/dis-asm.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/include/dis-asm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/include/dis-asm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/dis-asm.h?ref=6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2",
      "patch": "@@ -307,6 +307,7 @@ extern void print_arm_disassembler_options (FILE *);\n extern void print_arc_disassembler_options (FILE *);\n extern void print_s390_disassembler_options (FILE *);\n extern void print_wasm32_disassembler_options (FILE *);\n+extern void print_loongarch_disassembler_options (FILE *);\n extern bool aarch64_symbol_is_valid (asymbol *, struct disassemble_info *);\n extern bool arm_symbol_is_valid (asymbol *, struct disassemble_info *);\n extern bool csky_symbol_is_valid (asymbol *, struct disassemble_info *);"
    },
    {
      "sha": "68daa7b0d49dbf074ef976d428602740dbc8cf92",
      "filename": "include/opcode/loongarch.h",
      "status": "added",
      "additions": 239,
      "deletions": 0,
      "changes": 239,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/include/opcode/loongarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/include/opcode/loongarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/loongarch.h?ref=6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2",
      "patch": "@@ -0,0 +1,239 @@\n+/* LoongArch assembler/disassembler support.\n+\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+   This file is part of GNU Binutils.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the license, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not,\n+   see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _LOONGARCH_H_\n+#define _LOONGARCH_H_\n+#include <stdint.h>\n+\n+#ifdef __cplusplus\n+extern \"C\"\n+{\n+#endif\n+\n+  typedef uint32_t insn_t;\n+\n+  struct loongarch_opcode\n+  {\n+    const insn_t match;\n+    const insn_t mask; /* High 1 byte is main opcode and it must be 0xf.  */\n+#define LARCH_INSN_OPC(insn) ((insn & 0xf0000000) >> 28)\n+    const char *const name;\n+\n+    /* ACTUAL PARAMETER:\n+\n+  // BNF with regular expression.\n+args : token* end\n+\n+  // just few char separate 'iden'\n+token : ','\n+| '('\n+| ')'\n+| iden\t     // maybe a label (include at least one alphabet),\n+\t\t      maybe a number, maybe a expr\n+| regname\n+\n+regname : '$' iden\n+\n+iden : [a-zA-Z0-9\\.\\+\\-]+\n+\n+end : '\\0'\n+\n+\n+FORMAT: A string to describe the format of actual parameter including\n+bit field infomation.  For example, \"r5:5,r0:5,sr10:16<<2\" matches\n+\"$12,$13,12345\" and \"$4,$7,a_label\".  That 'sr' means the instruction\n+may need relocate. '10:16' means bit field of instruction.\n+In a 'format', every 'escape's can be replaced to 'iden' or 'regname'\n+acrroding to its meaning.  We fill all information needed by\n+disassembing and assembing to 'format'.\n+\n+  // BNF with regular expression.\n+format : escape (literal+ escape)* literal* end\n+| (literal+ escape)* literal* end\n+\n+end : '\\0'       // Get here means parse end.\n+\n+  // The intersection between any two among FIRST (end), FIRST\n+  // (literal) and FIRST (escape) must be empty.\n+  // So we can build a simple parser.\n+literal : ','\n+| '('\n+| ')'\n+\n+  // Double '<'s means the real number is the immediate after shifting left.\n+escape : esc_ch bit_field '<' '<' dec2\n+| esc_ch bit_field\n+| esc_ch    // for MACRO. non-macro format must indicate 'bit_field'\n+\n+  // '|' means to concatenate nonadjacent bit fields\n+  // For example, \"10:16|0:4\" means\n+  // \"16 bits starting from the 10th bit concatenating with 4 bits\n+  // starting from the 0th bit\".\n+  // This is to say \"[25..10]||[3..0]\" (little endian).\n+b_field : dec2 ':' dec2\n+| dec2 ':' dec2 '|' bit_field\n+\n+esc_ch : 's' 'r'   // signed immediate or label need relocate\n+| 's'       // signed immediate no need relocate\n+| 'u'       // unsigned immediate\n+| 'l'       // label needed relocate\n+| 'r'       // general purpose registers\n+| 'f'       // FPU registers\n+| 'v'       // 128 bit SIMD register\n+| 'x'       // 256 bit SIMD register\n+\n+dec2 : [1-9][0-9]?\n+| 0\n+\n+*/\n+    const char *const format;\n+\n+    /* MACRO: Indicate how a macro instruction expand for assembling.\n+       The main is to replace the '%num'(means the 'num'th 'escape' in\n+       'format') in 'macro' string to get the real instruction.\n+\n+       Maybe need\n+       */\n+    const char *const macro;\n+    const int *include;\n+    const int *exclude;\n+\n+    const unsigned long pinfo;\n+#define USELESS 0x0l\n+  };\n+\n+  struct hash_control;\n+\n+  struct loongarch_ase\n+  {\n+    const int *enabled;\n+    struct loongarch_opcode *const opcodes;\n+    const int *include;\n+    const int *exclude;\n+\n+    /* For disassemble to create main opcode hash table.  */\n+    const struct loongarch_opcode *opc_htab[16];\n+    unsigned char opc_htab_inited;\n+\n+    /* For GAS to create hash table.  */\n+    struct htab *name_hash_entry;\n+  };\n+\n+  extern int is_unsigned (const char *);\n+  extern int is_signed (const char *);\n+  extern int is_branch_label (const char *);\n+\n+  extern int loongarch_get_bit_field_width (const char *bit_field, char **end);\n+  extern int32_t loongarch_decode_imm (const char *bit_field, insn_t insn,\n+\t\t\t\t       int si);\n+\n+#define MAX_ARG_NUM_PLUS_2 9\n+\n+  extern size_t loongarch_split_args_by_comma (char *args,\n+\t\t\t\t\t       const char *arg_strs[]);\n+  extern char *loongarch_cat_splited_strs (const char *arg_strs[]);\n+  extern insn_t loongarch_foreach_args (\n+    const char *format, const char *arg_strs[],\n+    int32_t (*helper) (char esc1, char esc2, const char *bit_field,\n+\t\t       const char *arg, void *context),\n+    void *context);\n+\n+  extern int loongarch_check_format (const char *format);\n+  extern int loongarch_check_macro (const char *format, const char *macro);\n+\n+  extern char *loongarch_expand_macro_with_format_map (\n+    const char *format, const char *macro, const char *const arg_strs[],\n+    const char *(*map) (char esc1, char esc2, const char *arg),\n+    char *(*helper) (const char *const arg_strs[], void *context),\n+    void *context);\n+  extern char *loongarch_expand_macro (\n+    const char *macro, const char *const arg_strs[],\n+    char *(*helper) (const char *const arg_strs[], void *context),\n+    void *context);\n+  extern size_t loongarch_bits_imm_needed (int64_t imm, int si);\n+\n+  extern void loongarch_eliminate_adjacent_repeat_char (char *dest, char c);\n+\n+  extern int loongarch_parse_dis_options (const char *opts_in);\n+  extern void loongarch_disassemble_one (\n+    int64_t pc, insn_t insn,\n+    int (*fprintf_func) (void *stream, const char *format, ...), void *stream);\n+\n+  extern const char *const loongarch_r_normal_name[32];\n+  extern const char *const loongarch_r_lp64_name[32];\n+  extern const char *const loongarch_r_lp64_name1[32];\n+  extern const char *const loongarch_f_normal_name[32];\n+  extern const char *const loongarch_f_lp64_name[32];\n+  extern const char *const loongarch_f_lp64_name1[32];\n+  extern const char *const loongarch_c_normal_name[8];\n+  extern const char *const loongarch_cr_normal_name[4];\n+  extern const char *const loongarch_v_normal_name[32];\n+  extern const char *const loongarch_x_normal_name[32];\n+\n+  extern struct loongarch_ase loongarch_ASEs[];\n+\n+  extern struct loongarch_ASEs_option\n+  {\n+    struct opt_abi\n+    {\n+\t    int elf_abi;\n+    } abi;\n+#define ase_abi abi.elf_abi\n+\n+    struct opt_isa\n+    {\n+\t    int use_ilp32;\n+\t    int use_lp64;\n+\n+\t    int use_soft_float;\n+\t    int use_single_float;\n+\t    int use_double_float;\n+\n+\t    int use_lsx;\n+\t    int use_lasx;\n+\n+\t    int use_la_local_with_abs;\n+\t    int use_la_global_with_pcrel;\n+\t    int use_la_global_with_abs;\n+    } isa;\n+#define ase_ilp32\tisa.use_ilp32\n+#define ase_lp64\tisa.use_lp64\n+\n+#define ase_nf\t\tisa.use_soft_float\n+#define ase_sf\t\tisa.use_single_float\n+#define ase_df\t\tisa.use_double_float\n+\n+#define ase_lsx\t\tisa.use_lsx\n+#define ase_lasx\tisa.use_lasx\n+\n+#define ase_labs\tisa.use_la_local_with_abs\n+#define ase_gpcr\tisa.use_la_global_with_pcrel\n+#define ase_gabs\tisa.use_la_global_with_abs\n+\n+  } LARCH_opts;\n+\n+  extern size_t loongarch_insn_length (insn_t insn);\n+\n+#ifdef __cplusplus\n+}\n+#endif\n+\n+#endif /* _LOONGARCH_H_ */"
    },
    {
      "sha": "c45fc2956656e9fd1aeaebd3586e0b541b93a9bb",
      "filename": "opcodes/Makefile.am",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/Makefile.am?ref=6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2",
      "patch": "@@ -164,6 +164,9 @@ TARGET_LIBOPCODES_CFILES = \\\n \tlm32-ibld.c \\\n \tlm32-opc.c \\\n \tlm32-opinst.c \\\n+\tloongarch-opc.c \\\n+\tloongarch-dis.c \\\n+\tloongarch-coder.c \\\n \tm10200-dis.c \\\n \tm10200-opc.c \\\n \tm10300-dis.c \\"
    },
    {
      "sha": "8ba01c9f8f9d024ef6b8f0f67d65d2fc883c09c4",
      "filename": "opcodes/Makefile.in",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/Makefile.in?ref=6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2",
      "patch": "@@ -555,6 +555,9 @@ TARGET_LIBOPCODES_CFILES = \\\n \tlm32-ibld.c \\\n \tlm32-opc.c \\\n \tlm32-opinst.c \\\n+\tloongarch-opc.c \\\n+\tloongarch-dis.c \\\n+\tloongarch-coder.c \\\n \tm10200-dis.c \\\n \tm10200-opc.c \\\n \tm10300-dis.c \\\n@@ -973,6 +976,9 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lm32-ibld.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lm32-opc.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/lm32-opinst.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/loongarch-coder.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/loongarch-dis.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/loongarch-opc.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/m10200-dis.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/m10200-opc.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/m10300-dis.Plo@am__quote@"
    },
    {
      "sha": "22a9cf926ca92206c3734a2d2e00d93295f30826",
      "filename": "opcodes/configure",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/configure?ref=6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2",
      "patch": "@@ -12295,6 +12295,7 @@ if test x${all_targets} = xfalse ; then\n \tbfd_z80_arch)\t\tta=\"$ta z80-dis.lo\" ;;\n \tbfd_z8k_arch)\t\tta=\"$ta z8k-dis.lo\" ;;\n \tbfd_bpf_arch)\t\tta=\"$ta bpf-asm.lo bpf-desc.lo bpf-dis.lo bpf-ibld.lo bpf-opc.lo\" using_cgen=yes ;;\n+\tbfd_loongarch_arch)\tta=\"$ta loongarch-dis.lo loongarch-opc.lo loongarch-coder.lo\" ;;\n \n \t\"\")\t\t\t;;\n \t*)\t\tas_fn_error $? \"*** unknown target architecture $arch\" \"$LINENO\" 5 ;;"
    },
    {
      "sha": "4853b9e32d709df97e8fb90792dcb46743872255",
      "filename": "opcodes/configure.ac",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/configure.ac?ref=6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2",
      "patch": "@@ -355,6 +355,7 @@ if test x${all_targets} = xfalse ; then\n \tbfd_z80_arch)\t\tta=\"$ta z80-dis.lo\" ;;\n \tbfd_z8k_arch)\t\tta=\"$ta z8k-dis.lo\" ;;\n \tbfd_bpf_arch)\t\tta=\"$ta bpf-asm.lo bpf-desc.lo bpf-dis.lo bpf-ibld.lo bpf-opc.lo\" using_cgen=yes ;;\n+\tbfd_loongarch_arch)\tta=\"$ta loongarch-dis.lo loongarch-opc.lo loongarch-coder.lo\" ;;\n \n \t\"\")\t\t\t;;\n \t*)\t\tAC_MSG_ERROR(*** unknown target architecture $arch) ;;"
    },
    {
      "sha": "61e666c182234d7ea41329f83a5ebfd4a4849432",
      "filename": "opcodes/disassemble.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/disassemble.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/disassemble.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/disassemble.c?ref=6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2",
      "patch": "@@ -49,6 +49,7 @@\n #define ARCH_ip2k\n #define ARCH_iq2000\n #define ARCH_lm32\n+#define ARCH_loongarch\n #define ARCH_m32c\n #define ARCH_m32r\n #define ARCH_m68hc11\n@@ -551,6 +552,11 @@ disassembler (enum bfd_architecture a,\n     case bfd_arch_tilepro:\n       disassemble = print_insn_tilepro;\n       break;\n+#endif\n+#ifdef ARCH_loongarch\n+    case bfd_arch_loongarch:\n+      disassemble = print_insn_loongarch;\n+      break;\n #endif\n     default:\n       return 0;\n@@ -591,6 +597,9 @@ disassembler_usage (FILE *stream ATTRIBUTE_UNUSED)\n #ifdef ARCH_wasm32\n   print_wasm32_disassembler_options (stream);\n #endif\n+#ifdef ARCH_loongarch\n+  print_loongarch_disassembler_options (stream);\n+#endif\n \n   return;\n }"
    },
    {
      "sha": "4e3ea2328e08ba276625046af833c9059cc79cbd",
      "filename": "opcodes/disassemble.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/disassemble.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/disassemble.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/disassemble.h?ref=6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2",
      "patch": "@@ -100,6 +100,7 @@ extern int print_insn_xtensa\t\t(bfd_vma, disassemble_info *);\n extern int print_insn_z80\t\t(bfd_vma, disassemble_info *);\n extern int print_insn_z8001\t\t(bfd_vma, disassemble_info *);\n extern int print_insn_z8002\t\t(bfd_vma, disassemble_info *);\n+extern int print_insn_loongarch\t\t(bfd_vma, disassemble_info *);\n \n extern disassembler_ftype csky_get_disassembler (bfd *);\n extern disassembler_ftype rl78_get_disassembler (bfd *);"
    },
    {
      "sha": "9c46ee463b26f2f809ffd7ace751cae8aabbe20d",
      "filename": "opcodes/loongarch-coder.c",
      "status": "added",
      "additions": 473,
      "deletions": 0,
      "changes": 473,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/loongarch-coder.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/loongarch-coder.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/loongarch-coder.c?ref=6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2",
      "patch": "@@ -0,0 +1,473 @@\n+/* LoongArch opcode support.\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+   This file is part of the GNU opcodes library.\n+\n+   This library is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   It is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not,\n+   see <http://www.gnu.org/licenses/>.  */\n+#include \"sysdep.h\"\n+#include \"opcode/loongarch.h\"\n+\n+int\n+is_unsigned (const char *c_str)\n+{\n+  if (c_str[0] == '0' && (c_str[1] == 'x' || c_str[1] == 'X'))\n+    {\n+      c_str += 2;\n+      while (('a' <= *c_str && *c_str <= 'f')\n+\t     || ('A' <= *c_str && *c_str <= 'F')\n+\t     || ('0' <= *c_str && *c_str <= '9'))\n+\tc_str++;\n+    }\n+  else if (*c_str == '\\0')\n+    return 0;\n+  else\n+    while ('0' <= *c_str && *c_str <= '9')\n+      c_str++;\n+  return *c_str == '\\0';\n+}\n+\n+int\n+is_signed (const char *c_str)\n+{\n+  return *c_str == '-' ? is_unsigned (c_str + 1) : is_unsigned (c_str);\n+}\n+\n+int\n+loongarch_get_bit_field_width (const char *bit_field, char **end)\n+{\n+  int width = 0;\n+  char has_specify = 0, *bit_field_1 = (char *) bit_field;\n+  if (bit_field_1 && *bit_field_1 != '\\0')\n+    while (1)\n+      {\n+\tstrtol (bit_field_1, &bit_field_1, 10);\n+\n+\tif (*bit_field_1 != ':')\n+\t  break;\n+\tbit_field_1++;\n+\n+\twidth += strtol (bit_field_1, &bit_field_1, 10);\n+\thas_specify = 1;\n+\n+\tif (*bit_field_1 != '|')\n+\t  break;\n+\tbit_field_1++;\n+      }\n+  if (end)\n+    *end = bit_field_1;\n+  return has_specify ? width : -1;\n+}\n+\n+int32_t\n+loongarch_decode_imm (const char *bit_field, insn_t insn, int si)\n+{\n+  int32_t ret = 0;\n+  uint32_t t;\n+  int len = 0, width, b_start;\n+  char *bit_field_1 = (char *) bit_field;\n+  while (1)\n+    {\n+      b_start = strtol (bit_field_1, &bit_field_1, 10);\n+      if (*bit_field_1 != ':')\n+\tbreak;\n+      width = strtol (bit_field_1 + 1, &bit_field_1, 10);\n+      len += width;\n+\n+      t = insn;\n+      t <<= sizeof (t) * 8 - width - b_start;\n+      t >>= sizeof (t) * 8 - width;\n+      ret <<= width;\n+      ret |= t;\n+\n+      if (*bit_field_1 != '|')\n+\tbreak;\n+      bit_field_1++;\n+    }\n+\n+  if (*bit_field_1 == '<' && *(++bit_field_1) == '<')\n+    {\n+      width = atoi (bit_field_1 + 1);\n+      ret <<= width;\n+      len += width;\n+    }\n+  else if (*bit_field_1 == '+')\n+    ret += atoi (bit_field_1 + 1);\n+\n+  if (si)\n+    {\n+      ret <<= sizeof (ret) * 8 - len;\n+      ret >>= sizeof (ret) * 8 - len;\n+    }\n+  return ret;\n+}\n+\n+static insn_t\n+loongarch_encode_imm (const char *bit_field, int32_t imm)\n+{\n+  char *bit_field_1 = (char *) bit_field;\n+  char *t = bit_field_1;\n+  int width, b_start;\n+  insn_t ret = 0;\n+  uint32_t i;\n+  uint32_t uimm = (uint32_t)imm;\n+\n+  width = loongarch_get_bit_field_width (t, &t);\n+  if (width == -1)\n+    return ret;\n+\n+  if (*t == '<' && *(++t) == '<')\n+    width += atoi (t + 1);\n+  else if (*t == '+')\n+    uimm -= atoi (t + 1);\n+\n+  uimm <<= sizeof (uimm) * 8 - width;\n+  while (1)\n+    {\n+      b_start = strtol (bit_field_1, &bit_field_1, 10);\n+      if (*bit_field_1 != ':')\n+\tbreak;\n+      width = strtol (bit_field_1 + 1, &bit_field_1, 10);\n+      i = uimm;\n+      i >>= sizeof (i) * 8 - width;\n+      i <<= b_start;\n+      ret |= i;\n+      uimm <<= width;\n+\n+      if (*bit_field_1 != '|')\n+\tbreak;\n+      bit_field_1++;\n+    }\n+  return ret;\n+}\n+\n+/* Parse such FORMAT\n+   \"\"\n+   \"u\"\n+   \"v0:5,r5:5,s10:10<<2\"\n+   \"r0:5,r5:5,r10:5,u15:2+1\"\n+   \"r,r,u0:5+32,u0:5+1\"\n+*/\n+static int\n+loongarch_parse_format (const char *format, char *esc1s, char *esc2s,\n+\t\t\tconst char **bit_fields)\n+{\n+  size_t arg_num = 0;\n+\n+  if (*format == '\\0')\n+    goto end;\n+\n+  while (1)\n+    {\n+      /* esc1    esc2\n+\t for \"[a-zA-Z][a-zA-Z]?\"  */\n+      if (('a' <= *format && *format <= 'z')\n+\t  || ('A' <= *format && *format <= 'Z'))\n+\t{\n+\t  *esc1s++ = *format++;\n+\t  if (('a' <= *format && *format <= 'z')\n+\t      || ('A' <= *format && *format <= 'Z'))\n+\t    *esc2s++ = *format++;\n+\t  else\n+\t    *esc2s++ = '\\0';\n+\t}\n+      else\n+\treturn -1;\n+\n+      arg_num++;\n+      if (MAX_ARG_NUM_PLUS_2 - 2 < arg_num)\n+\t/* Need larger MAX_ARG_NUM_PLUS_2.  */\n+\treturn -1;\n+\n+      *bit_fields++ = format;\n+\n+      if ('0' <= *format && *format <= '9')\n+\t{\n+\t  /* For \"[0-9]+:[0-9]+(\\|[0-9]+:[0-9]+)*\".  */\n+\t  while (1)\n+\t    {\n+\t      while ('0' <= *format && *format <= '9')\n+\t\tformat++;\n+\n+\t      if (*format != ':')\n+\t\treturn -1;\n+\t      format++;\n+\n+\t      if (!('0' <= *format && *format <= '9'))\n+\t\treturn -1;\n+\t      while ('0' <= *format && *format <= '9')\n+\t\tformat++;\n+\n+\t      if (*format != '|')\n+\t\tbreak;\n+\t      format++;\n+\t    }\n+\n+\t  /* For \"((\\+|<<)[1-9][0-9]*)?\".  */\n+\t  do\n+\t    {\n+\t      if (*format == '+')\n+\t\tformat++;\n+\t      else if (format[0] == '<' && format[1] == '<')\n+\t\tformat += 2;\n+\t      else\n+\t\tbreak;\n+\n+\t      if (!('1' <= *format && *format <= '9'))\n+\t\treturn -1;\n+\t      while ('0' <= *format && *format <= '9')\n+\t\tformat++;\n+\t    }\n+\t  while (0);\n+\t}\n+\n+      if (*format == ',')\n+\tformat++;\n+      else if (*format == '\\0')\n+\tbreak;\n+      else\n+\treturn -1;\n+    }\n+\n+ end:\n+  *esc1s = '\\0';\n+  return 0;\n+}\n+\n+size_t\n+loongarch_split_args_by_comma (char *args, const char *arg_strs[])\n+{\n+  size_t num = 0;\n+\n+  if (*args)\n+    arg_strs[num++] = args;\n+  for (; *args; args++)\n+    if (*args == ',')\n+      {\n+\tif (MAX_ARG_NUM_PLUS_2 - 1 == num)\n+\t  break;\n+\telse\n+\t  *args = '\\0', arg_strs[num++] = args + 1;\n+      }\n+  arg_strs[num] = NULL;\n+  return num;\n+}\n+\n+char *\n+loongarch_cat_splited_strs (const char *arg_strs[])\n+{\n+  char *ret;\n+  size_t n, l;\n+\n+  for (l = 0, n = 0; arg_strs[n]; n++)\n+    l += strlen (arg_strs[n]);\n+  ret = malloc (l + n + 1);\n+  if (!ret)\n+    return ret;\n+\n+  ret[0] = '\\0';\n+  if (0 < n)\n+    strcat (ret, arg_strs[0]);\n+  for (l = 1; l < n; l++)\n+    strcat (ret, \",\"), strcat (ret, arg_strs[l]);\n+  return ret;\n+}\n+\n+insn_t\n+loongarch_foreach_args (const char *format, const char *arg_strs[],\n+\t\t\tint32_t (*helper) (char esc1, char esc2,\n+\t\t\t\t\t   const char *bit_field,\n+\t\t\t\t\t   const char *arg, void *context),\n+\t\t\tvoid *context)\n+{\n+  char esc1s[MAX_ARG_NUM_PLUS_2 - 1], esc2s[MAX_ARG_NUM_PLUS_2 - 1];\n+  const char *bit_fields[MAX_ARG_NUM_PLUS_2 - 1];\n+  size_t i;\n+  insn_t ret = 0;\n+  int ok;\n+\n+  ok = loongarch_parse_format (format, esc1s, esc2s, bit_fields) == 0;\n+\n+  /* Make sure the num of actual args is equal to the num of escape.  */\n+  for (i = 0; esc1s[i] && arg_strs[i]; i++)\n+    ;\n+  ok = ok && !esc1s[i] && !arg_strs[i];\n+\n+  if (ok && helper)\n+    {\n+      for (i = 0; arg_strs[i]; i++)\n+\tret |= loongarch_encode_imm (bit_fields[i],\n+\t\t\t\t     helper (esc1s[i], esc2s[i],\n+\t\t\t\t\t     bit_fields[i], arg_strs[i],\n+\t\t\t\t\t     context));\n+      ret |= helper ('\\0', '\\0', NULL, NULL, context);\n+    }\n+\n+  return ret;\n+}\n+\n+int\n+loongarch_check_format (const char *format)\n+{\n+  char esc1s[MAX_ARG_NUM_PLUS_2 - 1], esc2s[MAX_ARG_NUM_PLUS_2 - 1];\n+  const char *bit_fields[MAX_ARG_NUM_PLUS_2 - 1];\n+\n+  if (!format)\n+    return -1;\n+\n+  return loongarch_parse_format (format, esc1s, esc2s, bit_fields);\n+}\n+\n+int\n+loongarch_check_macro (const char *format, const char *macro)\n+{\n+  int num_of_args;\n+  char esc1s[MAX_ARG_NUM_PLUS_2 - 1], esc2s[MAX_ARG_NUM_PLUS_2 - 1];\n+  const char *bit_fields[MAX_ARG_NUM_PLUS_2 - 1];\n+\n+  if (!format || !macro\n+      || loongarch_parse_format (format, esc1s, esc2s, bit_fields) != 0)\n+    return -1;\n+\n+  for (num_of_args = 0; esc1s[num_of_args]; num_of_args++)\n+    ;\n+\n+  for (; macro[0]; macro++)\n+    if (macro[0] == '%')\n+      {\n+\tmacro++;\n+\tif ('1' <= macro[0] && macro[0] <= '9')\n+\t  {\n+\t    if (num_of_args < macro[0] - '0')\n+\t      /* Out of args num.  */\n+\t      return -1;\n+\t  }\n+\telse if (macro[0] == 'f')\n+\t  ;\n+\telse if (macro[0] == '%')\n+\t  ;\n+\telse\n+\t  return -1;\n+      }\n+  return 0;\n+}\n+\n+static const char *\n+I (char esc_ch1 ATTRIBUTE_UNUSED, char esc_ch2 ATTRIBUTE_UNUSED,\n+   const char *c_str)\n+{\n+  return c_str;\n+}\n+\n+char *\n+loongarch_expand_macro_with_format_map (\n+  const char *format, const char *macro, const char *const arg_strs[],\n+  const char *(*map) (char esc1, char esc2, const char *arg),\n+  char *(*helper) (const char *const arg_strs[], void *context), void *context)\n+{\n+  char esc1s[MAX_ARG_NUM_PLUS_2 - 1], esc2s[MAX_ARG_NUM_PLUS_2 - 1];\n+  const char *bit_fields[MAX_ARG_NUM_PLUS_2 - 1];\n+  const char *src;\n+  char *dest;\n+  char buffer[8192];\n+\n+  if (format)\n+    loongarch_parse_format (format, esc1s, esc2s, bit_fields);\n+\n+  src = macro;\n+  dest = buffer;\n+\n+  while (*src)\n+    if (*src == '%')\n+      {\n+\tsrc++;\n+\tif ('1' <= *src && *src <= '9')\n+\t  {\n+\t    size_t i = *src - '1';\n+\t    const char *t = map (esc1s[i], esc2s[i], arg_strs[i]);\n+\t    while (*t)\n+\t      *dest++ = *t++;\n+\t  }\n+\telse if (*src == '%')\n+\t  *dest++ = '%';\n+\telse if (*src == 'f' && helper)\n+\t  {\n+\t    char *b, *t;\n+\t    t = b = (*helper) (arg_strs, context);\n+\t    if (b)\n+\t      {\n+\t\twhile (*t)\n+\t\t  *dest++ = *t++;\n+\t\tfree (b);\n+\t      }\n+\t  }\n+\tsrc++;\n+      }\n+    else\n+      *dest++ = *src++;\n+\n+  *dest = '\\0';\n+  return strdup (buffer);\n+}\n+\n+char *\n+loongarch_expand_macro (const char *macro, const char *const arg_strs[],\n+\t\t\tchar *(*helper) (const char *const arg_strs[],\n+\t\t\t\t\t void *context),\n+\t\t\tvoid *context)\n+{\n+  return loongarch_expand_macro_with_format_map (NULL, macro, arg_strs, I,\n+\t\t\t\t\t\t helper, context);\n+}\n+\n+size_t\n+loongarch_bits_imm_needed (int64_t imm, int si)\n+{\n+  size_t ret;\n+  if (si)\n+    {\n+      if (imm < 0)\n+\t{\n+\t  uint64_t uimm = (uint64_t) imm;\n+\t  uint64_t uimax = UINT64_C (1) << 63;\n+\t  for (ret = 0; (uimm & uimax) != 0; uimm <<= 1, ret++)\n+\t    ;\n+\t  ret = 64 - ret + 1;\n+\t}\n+      else\n+\tret = loongarch_bits_imm_needed (imm, 0) + 1;\n+    }\n+  else\n+    {\n+      uint64_t t = imm;\n+      for (ret = 0; t; t >>= 1, ret++)\n+\t;\n+    }\n+  return ret;\n+}\n+\n+void\n+loongarch_eliminate_adjacent_repeat_char (char *dest, char c)\n+{\n+  if (c == '\\0')\n+    return;\n+  char *src = dest;\n+  while (*dest)\n+    {\n+      while (src[0] == c && src[0] == src[1])\n+\tsrc++;\n+      *dest++ = *src++;\n+    }\n+}"
    },
    {
      "sha": "8e2361da4e96e29bd8d57a31d826d344a37fe535",
      "filename": "opcodes/loongarch-dis.c",
      "status": "added",
      "additions": 342,
      "deletions": 0,
      "changes": 342,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/loongarch-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/loongarch-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/loongarch-dis.c?ref=6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2",
      "patch": "@@ -0,0 +1,342 @@\n+/* LoongArch opcode support.\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+   This file is part of the GNU opcodes library.\n+\n+   This library is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   It is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not,\n+   see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"sysdep.h\"\n+#include \"disassemble.h\"\n+#include \"opintl.h\"\n+#include \"opcode/loongarch.h\"\n+#include \"libiberty.h\"\n+#include <stdlib.h>\n+\n+static const struct loongarch_opcode *\n+get_loongarch_opcode_by_binfmt (insn_t insn)\n+{\n+  const struct loongarch_opcode *it;\n+  struct loongarch_ase *ase;\n+  size_t i;\n+  for (ase = loongarch_ASEs; ase->enabled; ase++)\n+    {\n+      if (!*ase->enabled || (ase->include && !*ase->include)\n+\t  || (ase->exclude && *ase->exclude))\n+\tcontinue;\n+\n+      if (!ase->opc_htab_inited)\n+\t{\n+\t  for (it = ase->opcodes; it->mask; it++)\n+\t    if (!ase->opc_htab[LARCH_INSN_OPC (it->match)]\n+\t\t&& it->macro == NULL)\n+\t      ase->opc_htab[LARCH_INSN_OPC (it->match)] = it;\n+\t  for (i = 0; i < 16; i++)\n+\t    if (!ase->opc_htab[i])\n+\t      ase->opc_htab[i] = it;\n+\t  ase->opc_htab_inited = 1;\n+\t}\n+\n+      it = ase->opc_htab[LARCH_INSN_OPC (insn)];\n+      for (; it->name; it++)\n+\tif ((insn & it->mask) == it->match && it->mask\n+\t    && !(it->include && !*it->include)\n+\t    && !(it->exclude && *it->exclude))\n+\t  return it;\n+    }\n+  return NULL;\n+}\n+\n+static const char *const *loongarch_r_disname = NULL;\n+static const char *const *loongarch_f_disname = NULL;\n+static const char *const *loongarch_c_disname = NULL;\n+static const char *const *loongarch_cr_disname = NULL;\n+static const char *const *loongarch_v_disname = NULL;\n+static const char *const *loongarch_x_disname = NULL;\n+\n+static void\n+set_default_loongarch_dis_options (void)\n+{\n+  LARCH_opts.ase_ilp32 = 1;\n+  LARCH_opts.ase_lp64 = 1;\n+  LARCH_opts.ase_sf = 1;\n+  LARCH_opts.ase_df = 1;\n+  LARCH_opts.ase_lsx = 1;\n+  LARCH_opts.ase_lasx = 1;\n+\n+  loongarch_r_disname = loongarch_r_lp64_name;\n+  loongarch_f_disname = loongarch_f_lp64_name;\n+  loongarch_c_disname = loongarch_c_normal_name;\n+  loongarch_cr_disname = loongarch_cr_normal_name;\n+  loongarch_v_disname = loongarch_v_normal_name;\n+  loongarch_x_disname = loongarch_x_normal_name;\n+}\n+\n+static int\n+parse_loongarch_dis_option (const char *option)\n+{\n+  if (strcmp (option, \"numeric\") == 0)\n+    {\n+      loongarch_r_disname = loongarch_r_normal_name;\n+      loongarch_f_disname = loongarch_f_normal_name;\n+    }\n+  return -1;\n+}\n+\n+static int\n+parse_loongarch_dis_options (const char *opts_in)\n+{\n+  set_default_loongarch_dis_options ();\n+\n+  if (opts_in == NULL)\n+    return 0;\n+\n+  char *opts, *opt, *opt_end;\n+  opts = xmalloc (strlen (opts_in) + 1);\n+  strcpy (opts, opts_in);\n+\n+  for (opt = opt_end = opts; opt_end != NULL; opt = opt_end + 1)\n+    {\n+      if ((opt_end = strchr (opt, ',')) != NULL)\n+\t*opt_end = 0;\n+      if (parse_loongarch_dis_option (opt) != 0)\n+\treturn -1;\n+    }\n+  free (opts);\n+  return 0;\n+}\n+\n+static int32_t\n+dis_one_arg (char esc1, char esc2, const char *bit_field,\n+\t     const char *arg ATTRIBUTE_UNUSED, void *context)\n+{\n+  static int need_comma = 0;\n+  struct disassemble_info *info = context;\n+  insn_t insn = *(insn_t *) info->private_data;\n+  int32_t imm, u_imm;\n+\n+  if (esc1)\n+    {\n+      if (need_comma)\n+\tinfo->fprintf_func (info->stream, \", \");\n+      need_comma = 1;\n+      imm = loongarch_decode_imm (bit_field, insn, 1);\n+      u_imm = loongarch_decode_imm (bit_field, insn, 0);\n+    }\n+\n+  switch (esc1)\n+    {\n+    case 'r':\n+      info->fprintf_func (info->stream, \"%s\", loongarch_r_disname[u_imm]);\n+      break;\n+    case 'f':\n+      info->fprintf_func (info->stream, \"%s\", loongarch_f_disname[u_imm]);\n+      break;\n+    case 'c':\n+      switch (esc2)\n+\t{\n+\tcase 'r':\n+\t  info->fprintf_func (info->stream, \"%s\", loongarch_cr_disname[u_imm]);\n+\t  break;\n+\tdefault:\n+\t  info->fprintf_func (info->stream, \"%s\", loongarch_c_disname[u_imm]);\n+\t}\n+      break;\n+    case 'v':\n+      info->fprintf_func (info->stream, \"%s\", loongarch_v_disname[u_imm]);\n+      break;\n+    case 'x':\n+      info->fprintf_func (info->stream, \"%s\", loongarch_x_disname[u_imm]);\n+      break;\n+    case 'u':\n+      info->fprintf_func (info->stream, \"0x%x\", u_imm);\n+      break;\n+    case 's':\n+      if (imm == 0)\n+\tinfo->fprintf_func (info->stream, \"%d\", imm);\n+      else\n+\tinfo->fprintf_func (info->stream, \"%d(0x%x)\", imm, u_imm);\n+      switch (esc2)\n+\t{\n+\tcase 'b':\n+\t  info->insn_type = dis_branch;\n+\t  info->target += imm;\n+\t}\n+      break;\n+    case '\\0':\n+      need_comma = 0;\n+    }\n+  return 0;\n+}\n+\n+static void\n+disassemble_one (insn_t insn, struct disassemble_info *info)\n+{\n+  const struct loongarch_opcode *opc = get_loongarch_opcode_by_binfmt (insn);\n+\n+#ifdef LOONGARCH_DEBUG\n+  char have_space[32] = { 0 };\n+  insn_t t;\n+  int i;\n+  const char *t_f = opc ? opc->format : NULL;\n+  if (t_f)\n+    while (*t_f)\n+      {\n+\twhile (('a' <= t_f[0] && t_f[0] <= 'z')\n+\t       || ('A' <= t_f[0] && t_f[0] <= 'Z')\n+\t       || t_f[0] == ',')\n+\t  t_f++;\n+\twhile (1)\n+\t  {\n+\t    i = strtol (t_f, &t_f, 10);\n+\t    have_space[i] = 1;\n+\t    t_f++; /* ':' */\n+\t    i += strtol (t_f, &t_f, 10);\n+\t    have_space[i] = 1;\n+\t    if (t_f[0] == '|')\n+\t      t_f++;\n+\t    else\n+\t      break;\n+\t  }\n+\tif (t_f[0] == '<')\n+\t  t_f += 2; /* '<' '<' */\n+\tstrtol (t_f, &t_f, 10);\n+      }\n+\n+  have_space[28] = 1;\n+  have_space[0] = 0;\n+  t = ~((insn_t) -1 >> 1);\n+  for (i = 31; 0 <= i; i--)\n+    {\n+      if (t & insn)\n+\tinfo->fprintf_func (info->stream, \"1\");\n+      else\n+\tinfo->fprintf_func (info->stream, \"0\");\n+      if (have_space[i])\n+\tinfo->fprintf_func (info->stream, \" \");\n+      t = t >> 1;\n+    }\n+  info->fprintf_func (info->stream, \"\\t\");\n+#endif\n+\n+  if (!opc)\n+    {\n+      info->insn_type = dis_noninsn;\n+      info->fprintf_func (info->stream, \"0x%08x\", insn);\n+      return;\n+    }\n+\n+  info->insn_type = dis_nonbranch;\n+  info->fprintf_func (info->stream, \"%-12s\", opc->name);\n+\n+  {\n+    char *fake_args = xmalloc (strlen (opc->format) + 1);\n+    const char *fake_arg_strs[MAX_ARG_NUM_PLUS_2];\n+    strcpy (fake_args, opc->format);\n+    if (0 < loongarch_split_args_by_comma (fake_args, fake_arg_strs))\n+      info->fprintf_func (info->stream, \"\\t\");\n+    info->private_data = &insn;\n+    loongarch_foreach_args (opc->format, fake_arg_strs, dis_one_arg, info);\n+    free (fake_args);\n+  }\n+\n+  if (info->insn_type == dis_branch || info->insn_type == dis_condbranch\n+      /* Someother if we have extra info to print.  */)\n+    info->fprintf_func (info->stream, \"\\t#\");\n+\n+  if (info->insn_type == dis_branch || info->insn_type == dis_condbranch)\n+    {\n+      info->fprintf_func (info->stream, \" \");\n+      info->print_address_func (info->target, info);\n+    }\n+}\n+\n+int\n+print_insn_loongarch (bfd_vma memaddr, struct disassemble_info *info)\n+{\n+  insn_t insn;\n+  int status;\n+\n+  static int not_init_yet = 1;\n+  if (not_init_yet)\n+    {\n+      parse_loongarch_dis_options (info->disassembler_options);\n+      not_init_yet = 0;\n+    }\n+\n+  info->bytes_per_chunk = 4;\n+  info->bytes_per_line = 4;\n+  info->display_endian = BFD_ENDIAN_LITTLE;\n+  info->insn_info_valid = 1;\n+  info->target = memaddr;\n+\n+  if ((status = info->read_memory_func (memaddr, (bfd_byte *) &insn,\n+\t\t\t\t\tsizeof (insn), info)) != 0)\n+    {\n+      info->memory_error_func (status, memaddr, info);\n+      return -1; /* loongarch_insn_length (0); */\n+    }\n+\n+  disassemble_one (insn, info);\n+\n+  return loongarch_insn_length (insn);\n+}\n+\n+void\n+print_loongarch_disassembler_options (FILE *stream)\n+{\n+  fprintf (stream, _(\"\\n\\\n+The following LoongArch disassembler options are supported for use\\n\\\n+with the -M switch (multiple options should be separated by commas):\\n\"));\n+\n+  fprintf (stream, _(\"\\n\\\n+    numeric       Print numeric register names, rather than ABI names.\\n\"));\n+  fprintf (stream, _(\"\\n\"));\n+}\n+\n+int\n+loongarch_parse_dis_options (const char *opts_in)\n+{\n+  return parse_loongarch_dis_options (opts_in);\n+}\n+\n+static void\n+my_print_address_func (bfd_vma addr, struct disassemble_info *dinfo)\n+{\n+  dinfo->fprintf_func (dinfo->stream, \"0x%llx\", (long long) addr);\n+}\n+\n+void\n+loongarch_disassemble_one (int64_t pc, insn_t insn,\n+\t\t\t   int (*fprintf_func) (void *stream,\n+\t\t\t\t\t\tconst char *format, ...),\n+\t\t\t   void *stream)\n+{\n+  static struct disassemble_info my_disinfo =\n+  {\n+    .print_address_func = my_print_address_func,\n+  };\n+  static int not_init_yet = 1;\n+  if (not_init_yet)\n+    {\n+      loongarch_parse_dis_options (NULL);\n+      not_init_yet = 0;\n+    }\n+\n+  my_disinfo.fprintf_func = fprintf_func;\n+  my_disinfo.stream = stream;\n+  my_disinfo.target = pc;\n+  disassemble_one (insn, &my_disinfo);\n+}"
    },
    {
      "sha": "4ccea71ee032b0acca432176beaeaf7fcd8852ab",
      "filename": "opcodes/loongarch-opc.c",
      "status": "added",
      "additions": 798,
      "deletions": 0,
      "changes": 798,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/loongarch-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/loongarch-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/loongarch-opc.c?ref=6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2",
      "patch": "@@ -0,0 +1,798 @@\n+/* LoongArch opcode support.\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+   This file is part of the GNU opcodes library.\n+\n+   This library is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3, or (at your option)\n+   any later version.\n+\n+   It is distributed in the hope that it will be useful, but WITHOUT\n+   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+   License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not,\n+   see <http://www.gnu.org/licenses/>.  */\n+\n+#include <stddef.h>\n+#include \"opcode/loongarch.h\"\n+#include \"libiberty.h\"\n+\n+struct loongarch_ASEs_option LARCH_opts;\n+\n+size_t\n+loongarch_insn_length (insn_t insn ATTRIBUTE_UNUSED)\n+{\n+  return 4;\n+}\n+\n+const char *const loongarch_r_normal_name[32] =\n+{\n+  \"$r0\",  \"$r1\",  \"$r2\",  \"$r3\",  \"$r4\",  \"$r5\",  \"$r6\",  \"$r7\",\n+  \"$r8\",  \"$r9\",  \"$r10\", \"$r11\", \"$r12\", \"$r13\", \"$r14\", \"$r15\",\n+  \"$r16\", \"$r17\", \"$r18\", \"$r19\", \"$r20\", \"$r21\", \"$r22\", \"$r23\",\n+  \"$r24\", \"$r25\", \"$r26\", \"$r27\", \"$r28\", \"$r29\", \"$r30\", \"$r31\",\n+};\n+\n+const char *const loongarch_r_lp64_name[32] =\n+{\n+  \"$zero\", \"$ra\", \"$tp\", \"$sp\", \"$a0\", \"$a1\", \"$a2\", \"$a3\",\n+  \"$a4\",   \"$a5\", \"$a6\", \"$a7\", \"$t0\", \"$t1\", \"$t2\", \"$t3\",\n+  \"$t4\",   \"$t5\", \"$t6\", \"$t7\", \"$t8\", \"$x\",  \"$fp\", \"$s0\",\n+  \"$s1\",   \"$s2\", \"$s3\", \"$s4\", \"$s5\", \"$s6\", \"$s7\", \"$s8\",\n+};\n+\n+const char *const loongarch_r_lp64_name1[32] =\n+{\n+  \"\", \"\", \"\", \"\", \"$v0\", \"$v1\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n+  \"\", \"\", \"\", \"\", \"\",    \"\",    \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n+};\n+\n+const char *const loongarch_f_normal_name[32] =\n+{\n+  \"$f0\",  \"$f1\",  \"$f2\",  \"$f3\",  \"$f4\",  \"$f5\",  \"$f6\",  \"$f7\",\n+  \"$f8\",  \"$f9\",  \"$f10\", \"$f11\", \"$f12\", \"$f13\", \"$f14\", \"$f15\",\n+  \"$f16\", \"$f17\", \"$f18\", \"$f19\", \"$f20\", \"$f21\", \"$f22\", \"$f23\",\n+  \"$f24\", \"$f25\", \"$f26\", \"$f27\", \"$f28\", \"$f29\", \"$f30\", \"$f31\",\n+};\n+\n+const char *const loongarch_f_lp64_name[32] =\n+{\n+  \"$fa0\", \"$fa1\", \"$fa2\",  \"$fa3\",  \"$fa4\",  \"$fa5\",  \"$fa6\",  \"$fa7\",\n+  \"$ft0\", \"$ft1\", \"$ft2\",  \"$ft3\",  \"$ft4\",  \"$ft5\",  \"$ft6\",  \"$ft7\",\n+  \"$ft8\", \"$ft9\", \"$ft10\", \"$ft11\", \"$ft12\", \"$ft13\", \"$ft14\", \"$ft15\",\n+  \"$fs0\", \"$fs1\", \"$fs2\",  \"$fs3\",  \"$fs4\",  \"$fs5\",  \"$fs6\",  \"$fs7\",\n+};\n+\n+const char *const loongarch_f_lp64_name1[32] =\n+{\n+  \"$fv0\", \"$fv1\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n+  \"\",     \"\",     \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n+};\n+\n+const char *const loongarch_c_normal_name[8] =\n+{\n+  \"$fcc0\", \"$fcc1\", \"$fcc2\", \"$fcc3\", \"$fcc4\", \"$fcc5\", \"$fcc6\", \"$fcc7\",\n+};\n+\n+const char *const loongarch_cr_normal_name[4] =\n+{\n+  \"$scr0\",\n+  \"$scr1\",\n+  \"$scr2\",\n+  \"$scr3\",\n+};\n+\n+const char *const loongarch_v_normal_name[32] =\n+{\n+  \"$vr0\",  \"$vr1\",  \"$vr2\",  \"$vr3\",  \"$vr4\",  \"$vr5\",  \"$vr6\",  \"$vr7\",\n+  \"$vr8\",  \"$vr9\",  \"$vr10\", \"$vr11\", \"$vr12\", \"$vr13\", \"$vr14\", \"$vr15\",\n+  \"$vr16\", \"$vr17\", \"$vr18\", \"$vr19\", \"$vr20\", \"$vr21\", \"$vr22\", \"$vr23\",\n+  \"$vr24\", \"$vr25\", \"$vr26\", \"$vr27\", \"$vr28\", \"$vr29\", \"$vr30\", \"$vr31\",\n+};\n+\n+const char *const loongarch_x_normal_name[32] =\n+{\n+  \"$xr0\",  \"$xr1\",  \"$xr2\",  \"$xr3\",  \"$xr4\",  \"$xr5\",  \"$xr6\",  \"$xr7\",\n+  \"$xr8\",  \"$xr9\",  \"$xr10\", \"$xr11\", \"$xr12\", \"$xr13\", \"$xr14\", \"$xr15\",\n+  \"$xr16\", \"$xr17\", \"$xr18\", \"$xr19\", \"$xr20\", \"$xr21\", \"$xr22\", \"$xr23\",\n+  \"$xr24\", \"$xr25\", \"$xr26\", \"$xr27\", \"$xr28\", \"$xr29\", \"$xr30\", \"$xr31\",\n+};\n+\n+static struct loongarch_opcode loongarch_macro_opcodes[] =\n+{\n+  /* match,    mask,       name, format, macro, include, exclude, pinfo.  */\n+  { 0, 0, \"li.w\", \"r,sc\", \"%f\", 0, 0, 0},\n+  { 0, 0, \"li.d\", \"r,sc\", \"%f\", 0, 0, 0},\n+  { 0, 0, \"la\", \"r,la\", \"la.global %1,%2\", 0, 0, 0 },\n+\n+  { 0, 0, \"la.global\", \"r,la\", \"la.pcrel %1,%2\",\n+    &LARCH_opts.ase_gpcr, 0, 0 },\n+  { 0, 0, \"la.global\", \"r,r,la\", \"la.pcrel %1,%2,%3\",\n+    &LARCH_opts.ase_gpcr, 0, 0 },\n+  { 0, 0, \"la.global\", \"r,la\", \"la.abs %1,%2\",\n+    &LARCH_opts.ase_gabs, 0, 0 },\n+  { 0, 0, \"la.global\", \"r,r,la\", \"la.abs %1,%3\",\n+    &LARCH_opts.ase_gabs, 0, 0 },\n+  { 0, 0, \"la.global\", \"r,l\", \"la.got %1,%2\", 0, 0, 0 },\n+  { 0, 0, \"la.global\", \"r,r,l\", \"la.got %1,%2,%3\", 0, 0, 0 },\n+\n+  { 0, 0, \"la.local\", \"r,la\", \"la.abs %1,%2\",\n+    &LARCH_opts.ase_labs, 0, 0 },\n+  { 0, 0, \"la.local\", \"r,r,la\", \"la.abs %1,%3\",\n+    &LARCH_opts.ase_labs, 0, 0 },\n+  { 0, 0, \"la.local\", \"r,la\", \"la.pcrel %1,%2\", 0, 0, 0 },\n+  { 0, 0, \"la.local\", \"r,r,la\", \"la.pcrel %1,%2,%3\", 0, 0, 0 },\n+\n+  { 0, 0, \"la.abs\", \"r,la\",\n+    \"lu12i.w %1,%%abs(%2)>>12;\"\n+    \"ori %1,%1,%%abs(%2)&0xfff;\",\n+    &LARCH_opts.ase_ilp32, &LARCH_opts.ase_lp64, 0 },\n+  { 0, 0, \"la.abs\", \"r,la\",\n+    \"lu12i.w %1,%%abs(%2)<<32>>44;\"\n+    \"ori %1,%1,%%abs(%2)&0xfff;\"\n+    \"lu32i.d %1,%%abs(%2)<<12>>44;\"\n+    \"lu52i.d %1,%1,%%abs(%2)>>52;\",\n+    &LARCH_opts.ase_lp64, 0, 0 },\n+\n+  { 0, 0, \"la.pcrel\", \"r,la\",\n+    \"pcaddu12i %1,%%pcrel(%2+0x800)<<32>>44;\"\n+    \"addi.w %1,%1,%%pcrel(%2+4)-(%%pcrel(%2+4+0x800)>>12<<12);\",\n+    &LARCH_opts.ase_ilp32, &LARCH_opts.ase_lp64, 0 },\n+\n+  { 0, 0, \"la.pcrel\", \"r,la\",\n+    \"pcaddu12i %1,%%pcrel(%2+0x800)>>12;\"\n+    \"addi.d %1,%1,%%pcrel(%2+4)-(%%pcrel(%2+4+0x800)>>12<<12);\",\n+    &LARCH_opts.ase_lp64, 0, 0 },\n+  { 0, 0, \"la.pcrel\", \"r,r,la\",\n+    \"pcaddu12i %1,(%%pcrel(%3)-(%%pcrel(%3+0x80000000)>>32<<32))<<32>>44;\"\n+    \"ori %2,$r0,(%%pcrel(%3+4)-(%%pcrel(%3+4+0x80000000)>>32<<32))&0xfff;\"\n+    \"lu32i.d %2,%%pcrel(%3+8+0x80000000)<<12>>44;\"\n+    \"lu52i.d %2,%2,%%pcrel(%3+12+0x80000000)>>52;\"\n+    \"add.d %1,%1,%2;\",\n+    &LARCH_opts.ase_lp64, 0, 0 },\n+\n+  { 0, 0, \"la.got\", \"r,l\",\n+    \"pcaddu12i %1,(%%pcrel(_GLOBAL_OFFSET_TABLE_+0x800)+%%gprel(%2))<<32>>44;\"\n+    \"ld.w \"\n+    \"%1,%1,%%pcrel(_GLOBAL_OFFSET_TABLE_+4)+%%gprel(%2)-((%%pcrel(_GLOBAL_\"\n+    \"OFFSET_TABLE_+4+0x800)+%%gprel(%2))>>12<<12);\",\n+    &LARCH_opts.ase_ilp32, &LARCH_opts.ase_lp64, 0 },\n+\n+  { 0, 0, \"la.got\", \"r,l\",\n+    \"pcaddu12i %1,(%%pcrel(_GLOBAL_OFFSET_TABLE_+0x800)+%%gprel(%2))>>12;\"\n+    \"ld.d \"\n+    \"%1,%1,%%pcrel(_GLOBAL_OFFSET_TABLE_+4)+%%gprel(%2)-((%%pcrel(_GLOBAL_\"\n+    \"OFFSET_TABLE_+4+0x800)+%%gprel(%2))>>12<<12);\",\n+    &LARCH_opts.ase_lp64, 0, 0 },\n+  { 0, 0, \"la.got\", \"r,r,l\",\n+    \"pcaddu12i \"\n+    \"%1,(%%pcrel(_GLOBAL_OFFSET_TABLE_)+%%gprel(%3)-((%%pcrel(_GLOBAL_OFFSET_\"\n+    \"TABLE_+0x80000000)+%%gprel(%3))>>32<<32))<<32>>44;\"\n+    \"ori \"\n+    \"%2,$r0,(%%pcrel(_GLOBAL_OFFSET_TABLE_+4)+%%gprel(%3)-((%%pcrel(_GLOBAL_\"\n+    \"OFFSET_TABLE_+4+0x80000000)+%%gprel(%3))>>32<<32))&0xfff;\"\n+    \"lu32i.d \"\n+    \"%2,(%%pcrel(_GLOBAL_OFFSET_TABLE_+8+0x80000000)+%%gprel(%3))<<12>>44;\"\n+    \"lu52i.d \"\n+    \"%2,%2,(%%pcrel(_GLOBAL_OFFSET_TABLE_+12+0x80000000)+%%gprel(%3))>>52;\"\n+    \"ldx.d %1,%1,%2;\",\n+    &LARCH_opts.ase_lp64, 0, 0 },\n+\n+  { 0, 0, \"la.tls.le\", \"r,la\",\n+    \"lu12i.w %1,%%tprel(%2)>>12;\"\n+    \"ori %1,%1,%%tprel(%2)&0xfff\",\n+    &LARCH_opts.ase_ilp32, &LARCH_opts.ase_lp64, 0 },\n+  /* { 0, 0, \"la.tls.le\", \"r,la\",\n+  * \"lu12i.w %1,%%tprel(%2)>>12;\"\n+  * \"ori %1,%1,%%tprel(%2)&0xfff\"\n+  * , &LARCH_opts.addrwidth_is_64, 0, 0}, */\n+  { 0, 0, \"la.tls.le\", \"r,la\",\n+    \"lu12i.w %1,%%tprel(%2)<<32>>44;\"\n+    \"ori %1,%1,%%tprel(%2)&0xfff;\"\n+    \"lu32i.d %1,%%tprel(%2)<<12>>44;\"\n+    \"lu52i.d %1,%1,%%tprel(%2)>>52;\",\n+    &LARCH_opts.ase_lp64, 0, 0 },\n+\n+  { 0, 0, \"la.tls.ie\", \"r,l\",\n+    \"pcaddu12i %1,(%%pcrel(_GLOBAL_OFFSET_TABLE_+0x800)+%%tlsgot(%2))<<32>>44;\"\n+    \"ld.w \"\n+    \"%1,%1,%%pcrel(_GLOBAL_OFFSET_TABLE_+4)+%%tlsgot(%2)-((%%pcrel(_GLOBAL_\"\n+    \"OFFSET_TABLE_+4+0x800)+%%tlsgot(%2))>>12<<12);\",\n+    &LARCH_opts.ase_ilp32, &LARCH_opts.ase_lp64, 0 },\n+\n+  { 0, 0, \"la.tls.ie\", \"r,l\",\n+    \"pcaddu12i %1,(%%pcrel(_GLOBAL_OFFSET_TABLE_+0x800)+%%tlsgot(%2))>>12;\"\n+    \"ld.d \"\n+    \"%1,%1,%%pcrel(_GLOBAL_OFFSET_TABLE_+4)+%%tlsgot(%2)-((%%pcrel(_GLOBAL_\"\n+    \"OFFSET_TABLE_+4+0x800)+%%tlsgot(%2))>>12<<12);\",\n+    &LARCH_opts.ase_lp64, 0, 0 },\n+  { 0, 0, \"la.tls.ie\", \"r,r,l\",\n+    \"pcaddu12i \"\n+    \"%1,(%%pcrel(_GLOBAL_OFFSET_TABLE_)+%%tlsgot(%3)-((%%pcrel(_GLOBAL_OFFSET_\"\n+    \"TABLE_+0x80000000)+%%tlsgot(%3))>>32<<32))<<32>>44;\"\n+    \"ori \"\n+    \"%2,$r0,(%%pcrel(_GLOBAL_OFFSET_TABLE_+4)+%%tlsgot(%3)-((%%pcrel(_GLOBAL_\"\n+    \"OFFSET_TABLE_+4+0x80000000)+%%tlsgot(%3))>>32<<32))&0xfff;\"\n+    \"lu32i.d \"\n+    \"%2,(%%pcrel(_GLOBAL_OFFSET_TABLE_+8+0x80000000)+%%tlsgot(%3))<<12>>44;\"\n+    \"lu52i.d \"\n+    \"%2,%2,(%%pcrel(_GLOBAL_OFFSET_TABLE_+12+0x80000000)+%%tlsgot(%3))>>52;\"\n+    \"ldx.d %1,%1,%2;\",\n+    &LARCH_opts.ase_lp64, 0, 0 },\n+\n+  { 0, 0, \"la.tls.ld\", \"r,l\", \"la.tls.gd %1,%2\", 0, 0, 0 },\n+  { 0, 0, \"la.tls.ld\", \"r,r,l\", \"la.tls.gd %1,%2,%3\",\n+    &LARCH_opts.ase_lp64, 0, 0 },\n+\n+  { 0, 0, \"la.tls.gd\", \"r,l\",\n+    \"pcaddu12i %1,(%%pcrel(_GLOBAL_OFFSET_TABLE_+0x800)+%%tlsgd(%2))<<32>>44;\"\n+    \"addi.w \"\n+    \"%1,%1,%%pcrel(_GLOBAL_OFFSET_TABLE_+4)+%%tlsgd(%2)-((%%pcrel(_GLOBAL_\"\n+    \"OFFSET_TABLE_+4+0x800)+%%tlsgd(%2))>>12<<12);\",\n+    &LARCH_opts.ase_ilp32, &LARCH_opts.ase_lp64, 0 },\n+\n+  { 0, 0, \"la.tls.gd\", \"r,l\",\n+    \"pcaddu12i %1,(%%pcrel(_GLOBAL_OFFSET_TABLE_+0x800)+%%tlsgd(%2))>>12;\"\n+    \"addi.d \"\n+    \"%1,%1,%%pcrel(_GLOBAL_OFFSET_TABLE_+4)+%%tlsgd(%2)-((%%pcrel(_GLOBAL_\"\n+    \"OFFSET_TABLE_+4+0x800)+%%tlsgd(%2))>>12<<12);\",\n+    &LARCH_opts.ase_lp64, 0, 0 },\n+  { 0, 0, \"la.tls.gd\", \"r,r,l\",\n+    \"pcaddu12i \"\n+    \"%1,(%%pcrel(_GLOBAL_OFFSET_TABLE_)+%%tlsgd(%3)-((%%pcrel(_GLOBAL_OFFSET_\"\n+    \"TABLE_+0x80000000)+%%tlsgd(%3))>>32<<32))<<32>>44;\"\n+    \"ori \"\n+    \"%2,$r0,(%%pcrel(_GLOBAL_OFFSET_TABLE_+4)+%%tlsgd(%3)-((%%pcrel(_GLOBAL_\"\n+    \"OFFSET_TABLE_+4+0x80000000)+%%tlsgd(%3))>>32<<32))&0xfff;\"\n+    \"lu32i.d \"\n+    \"%2,(%%pcrel(_GLOBAL_OFFSET_TABLE_+8+0x80000000)+%%tlsgd(%3))<<12>>44;\"\n+    \"lu52i.d \"\n+    \"%2,%2,(%%pcrel(_GLOBAL_OFFSET_TABLE_+12+0x80000000)+%%tlsgd(%3))>>52;\"\n+    \"add.d %1,%1,%2;\",\n+    &LARCH_opts.ase_lp64, 0, 0 },\n+\n+  { 0 } /* Terminate the list.  */\n+};\n+\n+static struct loongarch_opcode loongarch_fix_opcodes[] =\n+{\n+  /* match,\tmask,\t\tname,\t\tformat,\t\t\t\tmacro,\t\t\tinclude, exclude, pinfo.  */\n+  { 0x00001000, 0xfffffc00,\t\"clo.w\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00001400, 0xfffffc00,\t\"clz.w\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00001800, 0xfffffc00,\t\"cto.w\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00001c00, 0xfffffc00,\t\"ctz.w\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00002000, 0xfffffc00,\t\"clo.d\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00002400, 0xfffffc00,\t\"clz.d\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00002800, 0xfffffc00,\t\"cto.d\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00002c00, 0xfffffc00,\t\"ctz.d\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00003000, 0xfffffc00,\t\"revb.2h\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00003400, 0xfffffc00,\t\"revb.4h\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00003800, 0xfffffc00,\t\"revb.2w\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00003c00, 0xfffffc00,\t\"revb.d\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00004000, 0xfffffc00,\t\"revh.2w\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00004400, 0xfffffc00,\t\"revh.d\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00004800, 0xfffffc00,\t\"bitrev.4b\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00004c00, 0xfffffc00,\t\"bitrev.8b\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00005000, 0xfffffc00,\t\"bitrev.w\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00005400, 0xfffffc00,\t\"bitrev.d\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00005800, 0xfffffc00,\t\"ext.w.h\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00005c00, 0xfffffc00,\t\"ext.w.b\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  /* or %1,%2,$r0  */\n+  { 0x00150000, 0xfffffc00,\t\"move\",\t\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00006000, 0xfffffc00,\t\"rdtimel.w\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00006400, 0xfffffc00,\t\"rdtimeh.w\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00006800, 0xfffffc00,\t\"rdtime.d\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00006c00, 0xfffffc00,\t\"cpucfg\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00010000, 0xffff801f,\t\"asrtle.d\",\t\"r5:5,r10:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00018000, 0xffff801f,\t\"asrtgt.d\",\t\"r5:5,r10:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00040000, 0xfffe0000,\t\"alsl.w\",\t\"r0:5,r5:5,r10:5,u15:2+1\",\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00060000, 0xfffe0000,\t\"alsl.wu\",\t\"r0:5,r5:5,r10:5,u15:2+1\",\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00080000, 0xfffe0000,\t\"bytepick.w\",\t\"r0:5,r5:5,r10:5,u15:2\",\t0,\t\t\t0,\t0,\t0 },\n+  { 0x000c0000, 0xfffc0000,\t\"bytepick.d\",\t\"r0:5,r5:5,r10:5,u15:3\",\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00100000, 0xffff8000,\t\"add.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00108000, 0xffff8000,\t\"add.d\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00110000, 0xffff8000,\t\"sub.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00118000, 0xffff8000,\t\"sub.d\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00120000, 0xffff8000,\t\"slt\",\t\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00128000, 0xffff8000,\t\"sltu\",\t\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00130000, 0xffff8000,\t\"maskeqz\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00138000, 0xffff8000,\t\"masknez\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00140000, 0xffff8000,\t\"nor\",\t\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00148000, 0xffff8000,\t\"and\",\t\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00150000, 0xffff8000,\t\"or\",\t\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00158000, 0xffff8000,\t\"xor\",\t\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00160000, 0xffff8000,\t\"orn\",\t\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00168000, 0xffff8000,\t\"andn\",\t\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00170000, 0xffff8000,\t\"sll.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00178000, 0xffff8000,\t\"srl.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00180000, 0xffff8000,\t\"sra.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00188000, 0xffff8000,\t\"sll.d\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00190000, 0xffff8000,\t\"srl.d\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00198000, 0xffff8000,\t\"sra.d\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x001b0000, 0xffff8000,\t\"rotr.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x001b8000, 0xffff8000,\t\"rotr.d\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x001c0000, 0xffff8000,\t\"mul.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x001c8000, 0xffff8000,\t\"mulh.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x001d0000, 0xffff8000,\t\"mulh.wu\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x001d8000, 0xffff8000,\t\"mul.d\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x001e0000, 0xffff8000,\t\"mulh.d\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x001e8000, 0xffff8000,\t\"mulh.du\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x001f0000, 0xffff8000,\t\"mulw.d.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x001f8000, 0xffff8000,\t\"mulw.d.wu\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00200000, 0xffff8000,\t\"div.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00208000, 0xffff8000,\t\"mod.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00210000, 0xffff8000,\t\"div.wu\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00218000, 0xffff8000,\t\"mod.wu\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00220000, 0xffff8000,\t\"div.d\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00228000, 0xffff8000,\t\"mod.d\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00230000, 0xffff8000,\t\"div.du\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00238000, 0xffff8000,\t\"mod.du\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00240000, 0xffff8000,\t\"crc.w.b.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00248000, 0xffff8000,\t\"crc.w.h.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00250000, 0xffff8000,\t\"crc.w.w.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00258000, 0xffff8000,\t\"crc.w.d.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00260000, 0xffff8000,\t\"crcc.w.b.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00268000, 0xffff8000,\t\"crcc.w.h.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00270000, 0xffff8000,\t\"crcc.w.w.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00278000, 0xffff8000,\t\"crcc.w.d.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x002a0000, 0xffff8000,\t\"break\",\t\"u0:15\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x002a8000, 0xffff8000,\t\"dbcl\",\t\t\"u0:15\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x002b0000, 0xffff8000,\t\"syscall\",\t\"u0:15\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x002c0000, 0xfffe0000,\t\"alsl.d\",\t\"r0:5,r5:5,r10:5,u15:2+1\",\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00408000, 0xffff8000,\t\"slli.w\",\t\"r0:5,r5:5,u10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00410000, 0xffff0000,\t\"slli.d\",\t\"r0:5,r5:5,u10:6\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00448000, 0xffff8000,\t\"srli.w\",\t\"r0:5,r5:5,u10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00450000, 0xffff0000,\t\"srli.d\",\t\"r0:5,r5:5,u10:6\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00488000, 0xffff8000,\t\"srai.w\",\t\"r0:5,r5:5,u10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00490000, 0xffff0000,\t\"srai.d\",\t\"r0:5,r5:5,u10:6\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x004c8000, 0xffff8000,\t\"rotri.w\",\t\"r0:5,r5:5,u10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x004d0000, 0xffff0000,\t\"rotri.d\",\t\"r0:5,r5:5,u10:6\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00600000, 0xffe08000,\t\"bstrins.w\",\t\"r0:5,r5:5,u16:5,u10:5\",\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00608000, 0xffe08000,\t\"bstrpick.w\",\t\"r0:5,r5:5,u16:5,u10:5\",\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00800000, 0xffc00000,\t\"bstrins.d\",\t\"r0:5,r5:5,u16:6,u10:6\",\t0,\t\t\t0,\t0,\t0 },\n+  { 0x00c00000, 0xffc00000,\t\"bstrpick.d\",\t\"r0:5,r5:5,u16:6,u10:6\",\t0,\t\t\t0,\t0,\t0 },\n+  { 0 } /* Terminate the list.  */\n+};\n+\n+static struct loongarch_opcode loongarch_single_float_opcodes[] =\n+{\n+  /* match,\tmask,\t\tname,\t\tformat,\t\t\t\tmacro,\t\t\tinclude, exclude, pinfo.  */\n+  { 0x01008000, 0xffff8000,\t\"fadd.s\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01028000, 0xffff8000,\t\"fsub.s\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01048000, 0xffff8000,\t\"fmul.s\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01068000, 0xffff8000,\t\"fdiv.s\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01088000, 0xffff8000,\t\"fmax.s\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x010a8000, 0xffff8000,\t\"fmin.s\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x010c8000, 0xffff8000,\t\"fmaxa.s\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x010e8000, 0xffff8000,\t\"fmina.s\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01108000, 0xffff8000,\t\"fscaleb.s\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01128000, 0xffff8000,\t\"fcopysign.s\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01140400, 0xfffffc00,\t\"fabs.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01141400, 0xfffffc00,\t\"fneg.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01142400, 0xfffffc00,\t\"flogb.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01143400, 0xfffffc00,\t\"fclass.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01144400, 0xfffffc00,\t\"fsqrt.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01145400, 0xfffffc00,\t\"frecip.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01146400, 0xfffffc00,\t\"frsqrt.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01149400, 0xfffffc00,\t\"fmov.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0114a400, 0xfffffc00,\t\"movgr2fr.w\",\t\"f0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0114ac00, 0xfffffc00,\t\"movgr2frh.w\",\t\"f0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0114b400, 0xfffffc00,\t\"movfr2gr.s\",\t\"r0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0114bc00, 0xfffffc00,\t\"movfrh2gr.s\",\t\"r0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0114c000, 0xfffffc00,\t\"movgr2fcsr\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0114c800, 0xfffffc00,\t\"movfcsr2gr\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0114d000, 0xfffffc18,\t\"movfr2cf\",\t\"c0:3,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0114d400, 0xffffff00,\t\"movcf2fr\",\t\"f0:5,c5:3\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0114d800, 0xfffffc18,\t\"movgr2cf\",\t\"c0:3,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0114dc00, 0xffffff00,\t\"movcf2gr\",\t\"r0:5,c5:3\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011a0400, 0xfffffc00,\t\"ftintrm.w.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011a2400, 0xfffffc00,\t\"ftintrm.l.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011a4400, 0xfffffc00,\t\"ftintrp.w.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011a6400, 0xfffffc00,\t\"ftintrp.l.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011a8400, 0xfffffc00,\t\"ftintrz.w.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011aa400, 0xfffffc00,\t\"ftintrz.l.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011ac400, 0xfffffc00,\t\"ftintrne.w.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011ae400, 0xfffffc00,\t\"ftintrne.l.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011b0400, 0xfffffc00,\t\"ftint.w.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011b2400, 0xfffffc00,\t\"ftint.l.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011d1000, 0xfffffc00,\t\"ffint.s.w\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011d1800, 0xfffffc00,\t\"ffint.s.l\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011e4400, 0xfffffc00,\t\"frint.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0 } /* Terminate the list.  */\n+};\n+static struct loongarch_opcode loongarch_double_float_opcodes[] =\n+{\n+  /* match,\tmask,\t\tname,\t\tformat,\t\t\t\tmacro,\t\t\tinclude, exclude, pinfo.  */\n+  { 0x01010000, 0xffff8000,\t\"fadd.d\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01030000, 0xffff8000,\t\"fsub.d\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01050000, 0xffff8000,\t\"fmul.d\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01070000, 0xffff8000,\t\"fdiv.d\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01090000, 0xffff8000,\t\"fmax.d\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x010b0000, 0xffff8000,\t\"fmin.d\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x010d0000, 0xffff8000,\t\"fmaxa.d\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x010f0000, 0xffff8000,\t\"fmina.d\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01110000, 0xffff8000,\t\"fscaleb.d\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01130000, 0xffff8000,\t\"fcopysign.d\",\t\"f0:5,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01140800, 0xfffffc00,\t\"fabs.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01141800, 0xfffffc00,\t\"fneg.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01142800, 0xfffffc00,\t\"flogb.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01143800, 0xfffffc00,\t\"fclass.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01144800, 0xfffffc00,\t\"fsqrt.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01145800, 0xfffffc00,\t\"frecip.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01146800, 0xfffffc00,\t\"frsqrt.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01149800, 0xfffffc00,\t\"fmov.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0114a800, 0xfffffc00,\t\"movgr2fr.d\",\t\"f0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0114b800, 0xfffffc00,\t\"movfr2gr.d\",\t\"r0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01191800, 0xfffffc00,\t\"fcvt.s.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x01192400, 0xfffffc00,\t\"fcvt.d.s\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011a0800, 0xfffffc00,\t\"ftintrm.w.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011a2800, 0xfffffc00,\t\"ftintrm.l.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011a4800, 0xfffffc00,\t\"ftintrp.w.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011a6800, 0xfffffc00,\t\"ftintrp.l.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011a8800, 0xfffffc00,\t\"ftintrz.w.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011aa800, 0xfffffc00,\t\"ftintrz.l.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011ac800, 0xfffffc00,\t\"ftintrne.w.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011ae800, 0xfffffc00,\t\"ftintrne.l.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011b0800, 0xfffffc00,\t\"ftint.w.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011b2800, 0xfffffc00,\t\"ftint.l.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011d2000, 0xfffffc00,\t\"ffint.d.w\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011d2800, 0xfffffc00,\t\"ffint.d.l\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x011e4800, 0xfffffc00,\t\"frint.d\",\t\"f0:5,f5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0 } /* Terminate the list.  */\n+};\n+\n+static struct loongarch_opcode loongarch_imm_opcodes[] =\n+{\n+  /* match,\tmask,\t\tname,\t\tformat,\t\t\t\tmacro,\t\t\tinclude, exclude, pinfo.  */\n+  { 0x02000000, 0xffc00000,\t\"slti\",\t\t\"r0:5,r5:5,s10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x02400000, 0xffc00000,\t\"sltui\",\t\"r0:5,r5:5,s10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x02800000, 0xffc00000,\t\"addi.w\",\t\"r0:5,r5:5,s10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x02c00000, 0xffc00000,\t\"addi.d\",\t\"r0:5,r5:5,s10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x03000000, 0xffc00000,\t\"lu52i.d\",\t\"r0:5,r5:5,s10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"nop\",\t\t\"\",\t\t\t\t\"andi $r0,$r0,0\",\t0,\t0,\t0 },\n+  { 0x03400000, 0xffc00000,\t\"andi\",\t\t\"r0:5,r5:5,u10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x03800000, 0xffc00000,\t\"ori\",\t\t\"r0:5,r5:5,u10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x03c00000, 0xffc00000,\t\"xori\",\t\t\"r0:5,r5:5,u10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x10000000, 0xfc000000,\t\"addu16i.d\",\t\"r0:5,r5:5,s10:16\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x14000000, 0xfe000000,\t\"lu12i.w\",\t\"r0:5,s5:20\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x16000000, 0xfe000000,\t\"lu32i.d\",\t\"r0:5,s5:20\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x18000000, 0xfe000000,\t\"pcaddi\",\t\"r0:5,s5:20\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x1a000000, 0xfe000000,\t\"pcalau12i\",\t\"r0:5,s5:20\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x1c000000, 0xfe000000,\t\"pcaddu12i\",\t\"r0:5,s5:20\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x1e000000, 0xfe000000,\t\"pcaddu18i\",\t\"r0:5,s5:20\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0 } /* Terminate the list.  */\n+};\n+\n+static struct loongarch_opcode loongarch_privilege_opcodes[] =\n+{\n+  /* match,\tmask,\t\tname,\t\tformat,\t\t\t\tmacro,\t\t\tinclude, exclude, pinfo.  */\n+  { 0x04000000, 0xff0003e0,\t\"csrrd\",\t\"r0:5,u10:14\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x04000020, 0xff0003e0,\t\"csrwr\",\t\"r0:5,u10:14\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x04000000, 0xff000000,\t\"csrxchg\",\t\"r0:5,r5:5,u10:14\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06000000, 0xffc00000,\t\"cacop\",\t\"u0:5,r5:5,s10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06400000, 0xfffc0000,\t\"lddir\",\t\"r0:5,r5:5,u10:8\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06440000, 0xfffc001f,\t\"ldpte\",\t\"r5:5,u10:8\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06480000, 0xfffffc00,\t\"iocsrrd.b\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06480400, 0xfffffc00,\t\"iocsrrd.h\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06480800, 0xfffffc00,\t\"iocsrrd.w\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06480c00, 0xfffffc00,\t\"iocsrrd.d\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06481000, 0xfffffc00,\t\"iocsrwr.b\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06481400, 0xfffffc00,\t\"iocsrwr.h\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06481800, 0xfffffc00,\t\"iocsrwr.w\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06481c00, 0xfffffc00,\t\"iocsrwr.d\",\t\"r0:5,r5:5\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06482000, 0xffffffff,\t\"tlbclr\",\t\"\",\t\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06482400, 0xffffffff,\t\"tlbflush\",\t\"\",\t\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06482800, 0xffffffff,\t\"tlbsrch\",\t\"\",\t\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06482c00, 0xffffffff,\t\"tlbrd\",\t\"\",\t\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06483000, 0xffffffff,\t\"tlbwr\",\t\"\",\t\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06483400, 0xffffffff,\t\"tlbfill\",\t\"\",\t\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06483800, 0xffffffff,\t\"ertn\",\t\t\"\",\t\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06488000, 0xffff8000,\t\"idle\",\t\t\"u0:15\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x06498000, 0xffff8000,\t\"invtlb\",\t\"u0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0 } /* Terminate the list.  */\n+};\n+\n+static struct loongarch_opcode loongarch_4opt_single_float_opcodes[] =\n+{\n+  /* match,\tmask,\t\tname,\t\tformat,\t\t\t\tmacro,\t\t\tinclude, exclude, pinfo.  */\n+  { 0x08100000, 0xfff00000,\t\"fmadd.s\",\t\"f0:5,f5:5,f10:5,f15:5\",\t0,\t\t\t0,\t0,\t0 },\n+  { 0x08500000, 0xfff00000,\t\"fmsub.s\",\t\"f0:5,f5:5,f10:5,f15:5\",\t0,\t\t\t0,\t0,\t0 },\n+  { 0x08900000, 0xfff00000,\t\"fnmadd.s\",\t\"f0:5,f5:5,f10:5,f15:5\",\t0,\t\t\t0,\t0,\t0 },\n+  { 0x08d00000, 0xfff00000,\t\"fnmsub.s\",\t\"f0:5,f5:5,f10:5,f15:5\",\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c100000, 0xffff8018,\t\"fcmp.caf.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c108000, 0xffff8018,\t\"fcmp.saf.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c110000, 0xffff8018,\t\"fcmp.clt.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c118000, 0xffff8018,\t\"fcmp.slt.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c118000, 0xffff8018,\t\"fcmp.sgt.s\",\t\"c0:3,f10:5,f5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c120000, 0xffff8018,\t\"fcmp.ceq.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c128000, 0xffff8018,\t\"fcmp.seq.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c130000, 0xffff8018,\t\"fcmp.cle.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c138000, 0xffff8018,\t\"fcmp.sle.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c138000, 0xffff8018,\t\"fcmp.sge.s\",\t\"c0:3,f10:5,f5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c140000, 0xffff8018,\t\"fcmp.cun.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c148000, 0xffff8018,\t\"fcmp.sun.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c150000, 0xffff8018,\t\"fcmp.cult.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c150000, 0xffff8018,\t\"fcmp.cugt.s\",\t\"c0:3,f10:5,f5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c158000, 0xffff8018,\t\"fcmp.sult.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c160000, 0xffff8018,\t\"fcmp.cueq.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c168000, 0xffff8018,\t\"fcmp.sueq.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c170000, 0xffff8018,\t\"fcmp.cule.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c170000, 0xffff8018,\t\"fcmp.cuge.s\",\t\"c0:3,f10:5,f5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c178000, 0xffff8018,\t\"fcmp.sule.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c180000, 0xffff8018,\t\"fcmp.cne.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c188000, 0xffff8018,\t\"fcmp.sne.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c1a0000, 0xffff8018,\t\"fcmp.cor.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c1a8000, 0xffff8018,\t\"fcmp.sor.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c1c0000, 0xffff8018,\t\"fcmp.cune.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c1c8000, 0xffff8018,\t\"fcmp.sune.s\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0d000000, 0xfffc0000,\t\"fsel\",\t\t\"f0:5,f5:5,f10:5,c15:3\",\t0,\t\t\t0,\t0,\t0 },\n+  { 0 } /* Terminate the list.  */\n+};\n+\n+static struct loongarch_opcode loongarch_4opt_double_float_opcodes[] =\n+{\n+  /* match,\tmask,\t\tname,\t\tformat,\t\t\t\tmacro,\t\t\tinclude, exclude, pinfo.  */\n+  { 0x08200000, 0xfff00000,\t\"fmadd.d\",\t\"f0:5,f5:5,f10:5,f15:5\",\t0,\t\t\t0,\t0,\t0 },\n+  { 0x08600000, 0xfff00000,\t\"fmsub.d\",\t\"f0:5,f5:5,f10:5,f15:5\",\t0,\t\t\t0,\t0,\t0 },\n+  { 0x08a00000, 0xfff00000,\t\"fnmadd.d\",\t\"f0:5,f5:5,f10:5,f15:5\",\t0,\t\t\t0,\t0,\t0 },\n+  { 0x08e00000, 0xfff00000,\t\"fnmsub.d\",\t\"f0:5,f5:5,f10:5,f15:5\",\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c200000, 0xffff8018,\t\"fcmp.caf.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c208000, 0xffff8018,\t\"fcmp.saf.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c210000, 0xffff8018,\t\"fcmp.clt.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c218000, 0xffff8018,\t\"fcmp.slt.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c218000, 0xffff8018,\t\"fcmp.sgt.d\",\t\"c0:3,f10:5,f5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c220000, 0xffff8018,\t\"fcmp.ceq.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c228000, 0xffff8018,\t\"fcmp.seq.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c230000, 0xffff8018,\t\"fcmp.cle.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c238000, 0xffff8018,\t\"fcmp.sle.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c238000, 0xffff8018,\t\"fcmp.sge.d\",\t\"c0:3,f10:5,f5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c240000, 0xffff8018,\t\"fcmp.cun.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c248000, 0xffff8018,\t\"fcmp.sun.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c250000, 0xffff8018,\t\"fcmp.cult.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c250000, 0xffff8018,\t\"fcmp.cugt.d\",\t\"c0:3,f10:5,f5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c258000, 0xffff8018,\t\"fcmp.sult.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c260000, 0xffff8018,\t\"fcmp.cueq.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c268000, 0xffff8018,\t\"fcmp.sueq.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c270000, 0xffff8018,\t\"fcmp.cule.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c270000, 0xffff8018,\t\"fcmp.cuge.d\",\t\"c0:3,f10:5,f5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c278000, 0xffff8018,\t\"fcmp.sule.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c280000, 0xffff8018,\t\"fcmp.cne.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c288000, 0xffff8018,\t\"fcmp.sne.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c2a0000, 0xffff8018,\t\"fcmp.cor.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c2a8000, 0xffff8018,\t\"fcmp.sor.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c2c0000, 0xffff8018,\t\"fcmp.cune.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0c2c8000, 0xffff8018,\t\"fcmp.sune.d\",\t\"c0:3,f5:5,f10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0 } /* Terminate the list.  */\n+};\n+\n+static struct loongarch_opcode loongarch_load_store_opcodes[] =\n+{\n+  /* match,\tmask,\t\tname,\t\tformat,\t\t\t\tmacro,\t\t\tinclude, exclude, pinfo.  */\n+  { 0x20000000, 0xff000000,\t\"ll.w\",\t\t\"r0:5,r5:5,s10:14<<2\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x21000000, 0xff000000,\t\"sc.w\",\t\t\"r0:5,r5:5,s10:14<<2\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x22000000, 0xff000000,\t\"ll.d\",\t\t\"r0:5,r5:5,s10:14<<2\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x23000000, 0xff000000,\t\"sc.d\",\t\t\"r0:5,r5:5,s10:14<<2\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x24000000, 0xff000000,\t\"ldptr.w\",\t\"r0:5,r5:5,s10:14<<2\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x25000000, 0xff000000,\t\"stptr.w\",\t\"r0:5,r5:5,s10:14<<2\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x26000000, 0xff000000,\t\"ldptr.d\",\t\"r0:5,r5:5,s10:14<<2\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x27000000, 0xff000000,\t\"stptr.d\",\t\"r0:5,r5:5,s10:14<<2\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x28000000, 0xffc00000,\t\"ld.b\",\t\t\"r0:5,r5:5,s10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x28400000, 0xffc00000,\t\"ld.h\",\t\t\"r0:5,r5:5,s10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x28800000, 0xffc00000,\t\"ld.w\",\t\t\"r0:5,r5:5,s10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x28c00000, 0xffc00000,\t\"ld.d\",\t\t\"r0:5,r5:5,s10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x29000000, 0xffc00000,\t\"st.b\",\t\t\"r0:5,r5:5,s10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x29400000, 0xffc00000,\t\"st.h\",\t\t\"r0:5,r5:5,s10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x29800000, 0xffc00000,\t\"st.w\",\t\t\"r0:5,r5:5,s10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x29c00000, 0xffc00000,\t\"st.d\",\t\t\"r0:5,r5:5,s10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x2a000000, 0xffc00000,\t\"ld.bu\",\t\"r0:5,r5:5,s10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x2a400000, 0xffc00000,\t\"ld.hu\",\t\"r0:5,r5:5,s10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x2a800000, 0xffc00000,\t\"ld.wu\",\t\"r0:5,r5:5,s10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x2ac00000, 0xffc00000,\t\"preld\",\t\"u0:5,r5:5,s10:12\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x38000000, 0xffff8000,\t\"ldx.b\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x38040000, 0xffff8000,\t\"ldx.h\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x38080000, 0xffff8000,\t\"ldx.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x380c0000, 0xffff8000,\t\"ldx.d\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x38100000, 0xffff8000,\t\"stx.b\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x38140000, 0xffff8000,\t\"stx.h\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x38180000, 0xffff8000,\t\"stx.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x381c0000, 0xffff8000,\t\"stx.d\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x38200000, 0xffff8000,\t\"ldx.bu\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x38240000, 0xffff8000,\t\"ldx.hu\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x38280000, 0xffff8000,\t\"ldx.wu\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x382c0000, 0xffff8000,\t\"preldx\",\t\"u0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amswap.w\",\t\"r,r,r,u0:0\",\t\t\t\"amswap.w %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38600000, 0xffff8000,\t\"amswap.w\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amswap.d\",\t\"r,r,r,u0:0\",\t\t\t\"amswap.d %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38608000, 0xffff8000,\t\"amswap.d\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amadd.w\",\t\"r,r,r,u0:0\",\t\t\t\"amadd.w %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38610000, 0xffff8000,\t\"amadd.w\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amadd.d\",\t\"r,r,r,u0:0\",\t\t\t\"amadd.d %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38618000, 0xffff8000,\t\"amadd.d\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amand.w\",\t\"r,r,r,u0:0\",\t\t\t\"amand.w %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38620000, 0xffff8000,\t\"amand.w\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amand.d\",\t\"r,r,r,u0:0\",\t\t\t\"amand.d %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38628000, 0xffff8000,\t\"amand.d\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amor.w\",\t\"r,r,r,u0:0\",\t\t\t\"amor.w %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38630000, 0xffff8000,\t\"amor.w\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amor.d\",\t\"r,r,r,u0:0\",\t\t\t\"amor.d %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38638000, 0xffff8000,\t\"amor.d\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amxor.w\",\t\"r,r,r,u0:0\",\t\t\t\"amxor.w %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38640000, 0xffff8000,\t\"amxor.w\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amxor.d\",\t\"r,r,r,u0:0\",\t\t\t\"amxor.d %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38648000, 0xffff8000,\t\"amxor.d\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"ammax.w\",\t\"r,r,r,u0:0\",\t\t\t\"ammax.w %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38650000, 0xffff8000,\t\"ammax.w\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"ammax.d\",\t\"r,r,r,u0:0\",\t\t\t\"ammax.d %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38658000, 0xffff8000,\t\"ammax.d\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"ammin.w\",\t\"r,r,r,u0:0\",\t\t\t\"ammin.w %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38660000, 0xffff8000,\t\"ammin.w\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"ammin.d\",\t\"r,r,r,u0:0\",\t\t\t\"ammin.d %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38668000, 0xffff8000,\t\"ammin.d\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"ammax.wu\",\t\"r,r,r,u0:0\",\t\t\t\"ammax.wu %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38670000, 0xffff8000,\t\"ammax.wu\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"ammax.du\",\t\"r,r,r,u0:0\",\t\t\t\"ammax.du %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38678000, 0xffff8000,\t\"ammax.du\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"ammin.wu\",\t\"r,r,r,u0:0\",\t\t\t\"ammin.wu %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38680000, 0xffff8000,\t\"ammin.wu\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"ammin.du\",\t\"r,r,r,u0:0\",\t\t\t\"ammin.du %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38688000, 0xffff8000,\t\"ammin.du\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amswap_db.w\",\t\"r,r,r,u0:0\",\t\t\t\"amswap_db.w %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38690000, 0xffff8000,\t\"amswap_db.w\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amswap_db.d\",\t\"r,r,r,u0:0\",\t\t\t\"amswap_db.d %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38698000, 0xffff8000,\t\"amswap_db.d\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amadd_db.w\",\t\"r,r,r,u0:0\",\t\t\t\"amadd_db.w %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x386a0000, 0xffff8000,\t\"amadd_db.w\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amadd_db.d\",\t\"r,r,r,u0:0\",\t\t\t\"amadd_db.d %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x386a8000, 0xffff8000,\t\"amadd_db.d\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amand_db.w\",\t\"r,r,r,u0:0\",\t\t\t\"amand_db.w %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x386b0000, 0xffff8000,\t\"amand_db.w\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amand_db.d\",\t\"r,r,r,u0:0\",\t\t\t\"amand_db.d %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x386b8000, 0xffff8000,\t\"amand_db.d\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amor_db.w\",\t\"r,r,r,u0:0\",\t\t\t\"amor_db.w %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x386c0000, 0xffff8000,\t\"amor_db.w\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amor_db.d\",\t\"r,r,r,u0:0\",\t\t\t\"amor_db.d %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x386c8000, 0xffff8000,\t\"amor_db.d\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amxor_db.w\",\t\"r,r,r,u0:0\",\t\t\t\"amxor_db.w %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x386d0000, 0xffff8000,\t\"amxor_db.w\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"amxor_db.d\",\t\"r,r,r,u0:0\",\t\t\t\"amxor_db.d %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x386d8000, 0xffff8000,\t\"amxor_db.d\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"ammax_db.w\",\t\"r,r,r,u0:0\",\t\t\t\"ammax_db.w %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x386e0000, 0xffff8000,\t\"ammax_db.w\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"ammax_db.d\",\t\"r,r,r,u0:0\",\t\t\t\"ammax_db.d %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x386e8000, 0xffff8000,\t\"ammax_db.d\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"ammin_db.w\",\t\"r,r,r,u0:0\",\t\t\t\"ammin_db.w %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x386f0000, 0xffff8000,\t\"ammin_db.w\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"ammin_db.d\",\t\"r,r,r,u0:0\",\t\t\t\"ammin_db.d %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x386f8000, 0xffff8000,\t\"ammin_db.d\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"ammax_db.wu\",\t\"r,r,r,u0:0\",\t\t\t\"ammax_db.wu %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38700000, 0xffff8000,\t\"ammax_db.wu\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"ammax_db.du\",\t\"r,r,r,u0:0\",\t\t\t\"ammax_db.du %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38708000, 0xffff8000,\t\"ammax_db.du\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"ammin_db.wu\",\t\"r,r,r,u0:0\",\t\t\t\"ammin_db.wu %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38710000, 0xffff8000,\t\"ammin_db.wu\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x0,\t0x0,\t\t\"ammin_db.du\",\t\"r,r,r,u0:0\",\t\t\t\"ammin_db.du %1,%2,%3\",\t0,\t0,\t0 },\n+  { 0x38718000, 0xffff8000,\t\"ammin_db.du\",\t\"r0:5,r10:5,r5:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x38720000, 0xffff8000,\t\"dbar\",\t\t\"u0:15\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x38728000, 0xffff8000,\t\"ibar\",\t\t\"u0:15\",\t\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x38780000, 0xffff8000,\t\"ldgt.b\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x38788000, 0xffff8000,\t\"ldgt.h\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x38790000, 0xffff8000,\t\"ldgt.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x38798000, 0xffff8000,\t\"ldgt.d\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x387a0000, 0xffff8000,\t\"ldle.b\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x387a8000, 0xffff8000,\t\"ldle.h\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x387b0000, 0xffff8000,\t\"ldle.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x387b8000, 0xffff8000,\t\"ldle.d\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x387c0000, 0xffff8000,\t\"stgt.b\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x387c8000, 0xffff8000,\t\"stgt.h\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x387d0000, 0xffff8000,\t\"stgt.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x387d8000, 0xffff8000,\t\"stgt.d\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x387e0000, 0xffff8000,\t\"stle.b\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x387e8000, 0xffff8000,\t\"stle.h\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x387f0000, 0xffff8000,\t\"stle.w\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0x387f8000, 0xffff8000,\t\"stle.d\",\t\"r0:5,r5:5,r10:5\",\t\t0,\t\t\t0,\t0,\t0 },\n+  { 0 } /* Terminate the list.  */\n+};\n+\n+static struct loongarch_opcode loongarch_single_float_load_store_opcodes[] =\n+{\n+  /* match,\tmask,\t\tname,\t\tformat,\t\t\t\tmacro,\tinclude,\t\texclude, pinfo.  */\n+  { 0x2b000000, 0xffc00000,\t\"fld.s\",\t\"f0:5,r5:5,s10:12\",\t\t0,\t0,\t\t\t0,\t0 },\n+  { 0x2b400000, 0xffc00000,\t\"fst.s\",\t\"f0:5,r5:5,s10:12\",\t\t0,\t0,\t\t\t0,\t0 },\n+  { 0x38300000, 0xffff8000,\t\"fldx.s\",\t\"f0:5,r5:5,r10:5\",\t\t0,\t&LARCH_opts.ase_lp64,\t0,\t0 },\n+  { 0x38380000, 0xffff8000,\t\"fstx.s\",\t\"f0:5,r5:5,r10:5\",\t\t0,\t&LARCH_opts.ase_lp64,\t0,\t0 },\n+  { 0x38740000, 0xffff8000,\t\"fldgt.s\",\t\"f0:5,r5:5,r10:5\",\t\t0,\t&LARCH_opts.ase_lp64,\t0,\t0 },\n+  { 0x38750000, 0xffff8000,\t\"fldle.s\",\t\"f0:5,r5:5,r10:5\",\t\t0,\t&LARCH_opts.ase_lp64,\t0,\t0 },\n+  { 0x38760000, 0xffff8000,\t\"fstgt.s\",\t\"f0:5,r5:5,r10:5\",\t\t0,\t&LARCH_opts.ase_lp64,\t0,\t0 },\n+  { 0x38770000, 0xffff8000,\t\"fstle.s\",\t\"f0:5,r5:5,r10:5\",\t\t0,\t&LARCH_opts.ase_lp64,\t0,\t0 },\n+  { 0 } /* Terminate the list.  */\n+};\n+\n+static struct loongarch_opcode loongarch_double_float_load_store_opcodes[] =\n+{\n+  /* match,\tmask,\t\tname,\t\tformat,\t\t\t\tmacro,\tinclude,\t\texclude, pinfo.  */\n+  { 0x2b800000, 0xffc00000,\t\"fld.d\",\t\"f0:5,r5:5,s10:12\",\t\t0,\t0,\t\t\t0,\t0 },\n+  { 0x2bc00000, 0xffc00000,\t\"fst.d\",\t\"f0:5,r5:5,s10:12\",\t\t0,\t0,\t\t\t0,\t0 },\n+  { 0x38340000, 0xffff8000,\t\"fldx.d\",\t\"f0:5,r5:5,r10:5\",\t\t0,\t&LARCH_opts.ase_lp64,\t0,\t0 },\n+  { 0x383c0000, 0xffff8000,\t\"fstx.d\",\t\"f0:5,r5:5,r10:5\",\t\t0,\t&LARCH_opts.ase_lp64,\t0,\t0 },\n+  { 0x38748000, 0xffff8000,\t\"fldgt.d\",\t\"f0:5,r5:5,r10:5\",\t\t0,\t&LARCH_opts.ase_lp64,\t0,\t0 },\n+  { 0x38758000, 0xffff8000,\t\"fldle.d\",\t\"f0:5,r5:5,r10:5\",\t\t0,\t&LARCH_opts.ase_lp64,\t0,\t0 },\n+  { 0x38768000, 0xffff8000,\t\"fstgt.d\",\t\"f0:5,r5:5,r10:5\",\t\t0,\t&LARCH_opts.ase_lp64,\t0,\t0 },\n+  { 0x38778000, 0xffff8000,\t\"fstle.d\",\t\"f0:5,r5:5,r10:5\",\t\t0,\t&LARCH_opts.ase_lp64,\t0,\t0 },\n+  { 0 } /* Terminate the list.  */\n+};\n+\n+static struct loongarch_opcode loongarch_float_jmp_opcodes[] =\n+{\n+  { 0x0,\t0x0,\t\t\"bceqz\",\t\"c,la\",\t\t\t\t\"bceqz %1,%%pcrel(%2)\",\t\t0, 0, 0 },\n+  { 0x48000000, 0xfc000300,\t\"bceqz\",\t\"c5:3,sb0:5|10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"bcnez\",\t\"c,la\",\t\t\t\t\"bcnez %1,%%pcrel(%2)\",\t\t0, 0, 0 },\n+  { 0x48000100, 0xfc000300,\t\"bcnez\",\t\"c5:3,sb0:5|10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0 } /* Terminate the list.  */\n+};\n+\n+static struct loongarch_opcode loongarch_jmp_opcodes[] =\n+{\n+  /* match,\tmask,\t\tname,\t\tformat,\t\t\t\tmacro,\t\t\tinclude, exclude, pinfo.  */\n+  { 0x0,\t0x0,\t\t\"bltz\",\t\t\"r,la\",\t\t\t\t\"bltz %1,%%pcrel(%2)\",\t\t0, 0, 0 },\n+  { 0x60000000, 0xfc00001f,\t\"bltz\",\t\t\"r5:5,sb10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"bgtz\",\t\t\"r,la\",\t\t\t\t\"bgtz %1,%%pcrel(%2)\",\t\t0, 0, 0 },\n+  { 0x60000000, 0xfc0003e0,\t\"bgtz\",\t\t\"r0:5,sb10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"bgez\",\t\t\"r,la\",\t\t\t\t\"bgez %1,%%pcrel(%2)\",\t\t0, 0, 0 },\n+  { 0x64000000, 0xfc00001f,\t\"bgez\",\t\t\"r5:5,sb10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"blez\",\t\t\"r,la\",\t\t\t\t\"blez %1,%%pcrel(%2)\",\t\t0, 0, 0 },\n+  { 0x64000000, 0xfc0003e0,\t\"blez\",\t\t\"r0:5,sb10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"beqz\",\t\t\"r,la\",\t\t\t\t\"beqz %1,%%pcrel(%2)\",\t\t0, 0, 0 },\n+  { 0x40000000, 0xfc000000,\t\"beqz\",\t\t\"r5:5,sb0:5|10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"bnez\",\t\t\"r,la\",\t\t\t\t\"bnez %1,%%pcrel(%2)\",\t\t0, 0, 0 },\n+  { 0x44000000, 0xfc000000,\t\"bnez\",\t\t\"r5:5,sb0:5|10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"jr\",\t\t\"r\",\t\t\t\t\"jirl $r0,%1,0\",\t\t0, 0, 0 },\n+  { 0x50000000, 0xfc000000,\t\"b\",\t\t\"sb0:10|10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"b\",\t\t\"la\",\t\t\t\t\"b %%pcrel(%1)\",\t\t0, 0, 0 },\n+  { 0x4c000000, 0xfc000000,\t\"jirl\",\t\t\"r0:5,r5:5,s10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"bl\",\t\t\"la\",\t\t\t\t\"bl %%pcrel(%1)\",\t\t0, 0, 0 },\n+  { 0x54000000, 0xfc000000,\t\"bl\",\t\t\"sb0:10|10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"beq\",\t\t\"r,r,la\",\t\t\t\"beq %1,%2,%%pcrel(%3)\",\t0, 0, 0 },\n+  { 0x58000000, 0xfc000000,\t\"beq\",\t\t\"r5:5,r0:5,sb10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"bne\",\t\t\"r,r,la\",\t\t\t\"bne %1,%2,%%pcrel(%3)\",\t0, 0, 0 },\n+  { 0x5c000000, 0xfc000000,\t\"bne\",\t\t\"r5:5,r0:5,sb10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"blt\",\t\t\"r,r,la\",\t\t\t\"blt %1,%2,%%pcrel(%3)\",\t0, 0, 0 },\n+  { 0x60000000, 0xfc000000,\t\"blt\",\t\t\"r5:5,r0:5,sb10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"bgt\",\t\t\"r,r,la\",\t\t\t\"bgt %1,%2,%%pcrel(%3)\",\t0, 0, 0 },\n+  { 0x60000000, 0xfc000000,\t\"bgt\",\t\t\"r0:5,r5:5,sb10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"bge\",\t\t\"r,r,la\",\t\t\t\"bge %1,%2,%%pcrel(%3)\",\t0, 0, 0 },\n+  { 0x64000000, 0xfc000000,\t\"bge\",\t\t\"r5:5,r0:5,sb10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"ble\",\t\t\"r,r,la\",\t\t\t\"ble %1,%2,%%pcrel(%3)\",\t0, 0, 0 },\n+  { 0x64000000, 0xfc000000,\t\"ble\",\t\t\"r0:5,r5:5,sb10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"bltu\",\t\t\"r,r,la\",\t\t\t\"bltu %1,%2,%%pcrel(%3)\",\t0, 0, 0 },\n+  { 0x68000000, 0xfc000000,\t\"bltu\",\t\t\"r5:5,r0:5,sb10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"bgtu\",\t\t\"r,r,la\",\t\t\t\"bgtu %1,%2,%%pcrel(%3)\",\t0, 0, 0 },\n+  { 0x68000000, 0xfc000000,\t\"bgtu\",\t\t\"r0:5,r5:5,sb10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"bgeu\",\t\t\"r,r,la\",\t\t\t\"bgeu %1,%2,%%pcrel(%3)\",\t0, 0, 0 },\n+  { 0x6c000000, 0xfc000000,\t\"bgeu\",\t\t\"r5:5,r0:5,sb10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0x0,\t0x0,\t\t\"bleu\",\t\t\"r,r,la\",\t\t\t\"bleu %1,%2,%%pcrel(%3)\",\t0, 0, 0 },\n+  { 0x6c000000, 0xfc000000,\t\"bleu\",\t\t\"r0:5,r5:5,sb10:16<<2\",\t\t0,\t\t\t\t0, 0, 0 },\n+  { 0 } /* Terminate the list.  */\n+};\n+\n+struct loongarch_ase loongarch_ASEs[] =\n+{\n+  { &LARCH_opts.ase_ilp32, loongarch_macro_opcodes,\t\t0, 0, { 0 }, 0, 0 },\n+  { &LARCH_opts.ase_ilp32, loongarch_imm_opcodes,\t\t0, 0, { 0 }, 0, 0 },\n+  { &LARCH_opts.ase_ilp32, loongarch_privilege_opcodes,\t\t0, 0, { 0 }, 0, 0 },\n+  { &LARCH_opts.ase_ilp32, loongarch_load_store_opcodes,\t0, 0, { 0 }, 0, 0 },\n+  { &LARCH_opts.ase_ilp32, loongarch_fix_opcodes,\t\t0, 0, { 0 }, 0, 0 },\n+  { &LARCH_opts.ase_ilp32, loongarch_jmp_opcodes,\t\t0, 0, { 0 }, 0, 0 },\n+  { &LARCH_opts.ase_sf, loongarch_float_jmp_opcodes,\t\t0, 0, { 0 }, 0, 0 },\n+  { &LARCH_opts.ase_sf, loongarch_single_float_opcodes,\t\t0, 0, { 0 }, 0, 0 },\n+  { &LARCH_opts.ase_df, loongarch_double_float_opcodes,\t\t0, 0, { 0 }, 0, 0 },\n+  { &LARCH_opts.ase_sf, loongarch_4opt_single_float_opcodes,\t\t0, 0, { 0 }, 0, 0 },\n+  { &LARCH_opts.ase_df, loongarch_4opt_double_float_opcodes,\t\t0, 0, { 0 }, 0, 0 },\n+  { &LARCH_opts.ase_sf, loongarch_single_float_load_store_opcodes,\t0, 0, { 0 }, 0, 0 },\n+  { &LARCH_opts.ase_df, loongarch_double_float_load_store_opcodes,\t0, 0, { 0 }, 0, 0 },\n+  { 0 },\n+};"
    },
    {
      "sha": "b1037a475331b389674df8ec70b7742845633f5f",
      "filename": "opcodes/po/POTFILES.in",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/po/POTFILES.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2/opcodes/po/POTFILES.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/po/POTFILES.in?ref=6cc76c40a99bd13d69a311cae5ec891bd1d1dbf2",
      "patch": "@@ -111,6 +111,9 @@ lm32-ibld.c\n lm32-opc.c\n lm32-opc.h\n lm32-opinst.c\n+loongarch-coder.c\n+loongarch-dis.c\n+loongarch-opc.c\n m10200-dis.c\n m10200-opc.c\n m10300-dis.c"
    }
  ]
}