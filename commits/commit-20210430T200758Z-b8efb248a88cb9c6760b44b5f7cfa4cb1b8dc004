{
  "sha": "b8efb248a88cb9c6760b44b5f7cfa4cb1b8dc004",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjhlZmIyNDhhODhjYjljNjc2MGI0NGI1ZjdjZmE0Y2IxYjhkYzAwNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-04-30T20:07:58Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-04-30T20:07:58Z"
    },
    "message": "Do not separately read type units\n\nCurrently, the DWARF reader has a separate pass to read type units --\ncreate_all_type_units.  While working on other patches, I discovered\nthat this caused DWARF 5 type units to be read twice, once by\ncreate_all_comp_units and once by create_all_type_units.\n\nThere's no need any more (if there ever was) to treat type units\ndifferently from CUs.  So, this patch removes create_all_type_units\nand unifies the code paths.\n\nNote that the DWO code still has a second pass.  I haven't looked into\nthis code yet; perhaps it can also be simplified.\n\nRegression tested using the debug-types board file on x86-64 Fedora 32.\n\ngdb/ChangeLog\n2021-04-30  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (dwarf2_initialize_objfile): Update.\n\t(add_signatured_type_cu_to_table): Remove.\n\t(create_debug_type_hash_table): Assume dwo_file is non-null.\n\t(create_debug_types_hash_table): Update comment.\n\t(create_all_type_units): Remove.\n\t(sort_tu_by_abbrev_offset): Update comment.\n\t(build_type_psymtabs): Rename from build_type_psymtabs_1.\n\t(build_type_psymtabs): Remove.\n\t(process_skeletonless_type_unit, dwarf2_build_psymtabs_hard):\n\tUpdate.\n\t(read_comp_units_from_section): Add types_htab, section_kind\n\tparameters.\n\t(create_all_comp_units): Read type units.",
    "tree": {
      "sha": "5523ba72c09a75c49eaec59bf92c2e87405db93f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5523ba72c09a75c49eaec59bf92c2e87405db93f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b8efb248a88cb9c6760b44b5f7cfa4cb1b8dc004",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b8efb248a88cb9c6760b44b5f7cfa4cb1b8dc004",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b8efb248a88cb9c6760b44b5f7cfa4cb1b8dc004",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b8efb248a88cb9c6760b44b5f7cfa4cb1b8dc004/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "91eea9cc48a17763dae5a4f10eaa111c512ee2d0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/91eea9cc48a17763dae5a4f10eaa111c512ee2d0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/91eea9cc48a17763dae5a4f10eaa111c512ee2d0"
    }
  ],
  "stats": {
    "total": 202,
    "additions": 69,
    "deletions": 133
  },
  "files": [
    {
      "sha": "6ec6a701bfdbe9b55a51828e2d528e6f866c2562",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b8efb248a88cb9c6760b44b5f7cfa4cb1b8dc004/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b8efb248a88cb9c6760b44b5f7cfa4cb1b8dc004/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b8efb248a88cb9c6760b44b5f7cfa4cb1b8dc004",
      "patch": "@@ -1,3 +1,19 @@\n+2021-04-30  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (dwarf2_initialize_objfile): Update.\n+\t(add_signatured_type_cu_to_table): Remove.\n+\t(create_debug_type_hash_table): Assume dwo_file is non-null.\n+\t(create_debug_types_hash_table): Update comment.\n+\t(create_all_type_units): Remove.\n+\t(sort_tu_by_abbrev_offset): Update comment.\n+\t(build_type_psymtabs): Rename from build_type_psymtabs_1.\n+\t(build_type_psymtabs): Remove.\n+\t(process_skeletonless_type_unit, dwarf2_build_psymtabs_hard):\n+\tUpdate.\n+\t(read_comp_units_from_section): Add types_htab, section_kind\n+\tparameters.\n+\t(create_all_comp_units): Read type units.\n+\n 2021-04-30  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.h (struct tu_stats) <nr_tus>: New member."
    },
    {
      "sha": "5796cf1730b35bac0e15626138353178758d33d1",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 53,
      "deletions": 133,
      "changes": 186,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b8efb248a88cb9c6760b44b5f7cfa4cb1b8dc004/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b8efb248a88cb9c6760b44b5f7cfa4cb1b8dc004/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=b8efb248a88cb9c6760b44b5f7cfa4cb1b8dc004",
      "patch": "@@ -1689,8 +1689,6 @@ static struct type *set_die_type (struct die_info *, struct type *,\n \n static void create_all_comp_units (dwarf2_per_objfile *per_objfile);\n \n-static int create_all_type_units (dwarf2_per_objfile *per_objfile);\n-\n static void load_full_comp_unit (dwarf2_per_cu_data *per_cu,\n \t\t\t\t dwarf2_per_objfile *per_objfile,\n \t\t\t\t dwarf2_cu *existing_cu,\n@@ -5656,7 +5654,6 @@ dwarf2_initialize_objfile (struct objfile *objfile)\n \n       per_bfd->using_index = 1;\n       create_all_comp_units (per_objfile);\n-      create_all_type_units (per_objfile);\n       per_bfd->quick_file_names_table\n \t= create_quick_file_names_table (per_bfd->all_comp_units.size ());\n       per_objfile->resize_symtabs ();\n@@ -6002,20 +5999,6 @@ allocate_signatured_type_table ()\n \t\t\t\t     NULL, xcalloc, xfree));\n }\n \n-/* A helper function to add a signatured type CU to a table.  */\n-\n-static int\n-add_signatured_type_cu_to_table (void **slot, void *datum)\n-{\n-  struct signatured_type *sigt = (struct signatured_type *) *slot;\n-  std::vector<std::unique_ptr<dwarf2_per_cu_data>> *all_comp_units\n-    = (std::vector<std::unique_ptr<dwarf2_per_cu_data>> *) datum;\n-\n-  all_comp_units->emplace_back (sigt);\n-\n-  return 1;\n-}\n-\n /* A helper for create_debug_types_hash_table.  Read types from SECTION\n    and fill them into TYPES_HTAB.  It will process only type units,\n    therefore DW_UT_type.  */\n@@ -6031,9 +6014,7 @@ create_debug_type_hash_table (dwarf2_per_objfile *per_objfile,\n   bfd *abfd;\n   const gdb_byte *info_ptr, *end_ptr;\n \n-  abbrev_section = (dwo_file != NULL\n-\t\t    ? &dwo_file->sections.abbrev\n-\t\t    : &per_objfile->per_bfd->abbrev);\n+  abbrev_section = &dwo_file->sections.abbrev;\n \n   dwarf_read_debug_printf (\"Reading %s for %s\",\n \t\t\t   section->get_name (),\n@@ -6087,68 +6068,25 @@ create_debug_type_hash_table (dwarf2_per_objfile *per_objfile,\n \t}\n \n       if (types_htab == NULL)\n-\t{\n-\t  if (dwo_file)\n-\t    types_htab = allocate_dwo_unit_table ();\n-\t  else\n-\t    types_htab = allocate_signatured_type_table ();\n-\t}\n+\ttypes_htab = allocate_dwo_unit_table ();\n \n-      if (dwo_file)\n-\t{\n-\t  dwo_tu = OBSTACK_ZALLOC (&per_objfile->per_bfd->obstack, dwo_unit);\n-\t  dwo_tu->dwo_file = dwo_file;\n-\t  dwo_tu->signature = header.signature;\n-\t  dwo_tu->type_offset_in_tu = header.type_cu_offset_in_tu;\n-\t  dwo_tu->section = section;\n-\t  dwo_tu->sect_off = sect_off;\n-\t  dwo_tu->length = length;\n-\t}\n-      else\n-\t{\n-\t  /* N.B.: type_offset is not usable if this type uses a DWO file.\n-\t     The real type_offset is in the DWO file.  */\n-\t  dwo_tu = NULL;\n-\t  sig_type = per_objfile->per_bfd->allocate_signatured_type ();\n-\t  sig_type->signature = header.signature;\n-\t  sig_type->type_offset_in_tu = header.type_cu_offset_in_tu;\n-\t  sig_type->is_debug_types = 1;\n-\t  sig_type->section = section;\n-\t  sig_type->sect_off = sect_off;\n-\t  sig_type->length = length;\n-\t}\n-\n-      slot = htab_find_slot (types_htab.get (),\n-\t\t\t     (dwo_file\n-\t\t\t      ? (void *) dwo_tu\n-\t\t\t      : (void *) sig_type.get ()),\n-\t\t\t     INSERT);\n+      dwo_tu = OBSTACK_ZALLOC (&per_objfile->per_bfd->obstack, dwo_unit);\n+      dwo_tu->dwo_file = dwo_file;\n+      dwo_tu->signature = header.signature;\n+      dwo_tu->type_offset_in_tu = header.type_cu_offset_in_tu;\n+      dwo_tu->section = section;\n+      dwo_tu->sect_off = sect_off;\n+      dwo_tu->length = length;\n+\n+      slot = htab_find_slot (types_htab.get (), dwo_tu, INSERT);\n       gdb_assert (slot != NULL);\n       if (*slot != NULL)\n-\t{\n-\t  sect_offset dup_sect_off;\n-\n-\t  if (dwo_file)\n-\t    {\n-\t      const struct dwo_unit *dup_tu\n-\t\t= (const struct dwo_unit *) *slot;\n-\n-\t      dup_sect_off = dup_tu->sect_off;\n-\t    }\n-\t  else\n-\t    {\n-\t      const struct signatured_type *dup_tu\n-\t\t= (const struct signatured_type *) *slot;\n-\n-\t      dup_sect_off = dup_tu->sect_off;\n-\t    }\n-\n-\t  complaint (_(\"debug type entry at offset %s is duplicate to\"\n-\t\t       \" the entry at offset %s, signature %s\"),\n-\t\t     sect_offset_str (sect_off), sect_offset_str (dup_sect_off),\n-\t\t     hex_string (header.signature));\n-\t}\n-      *slot = dwo_file ? (void *) dwo_tu : (void *) sig_type.release ();\n+\tcomplaint (_(\"debug type entry at offset %s is duplicate to\"\n+\t\t     \" the entry at offset %s, signature %s\"),\n+\t\t   sect_offset_str (sect_off),\n+\t\t   sect_offset_str (dwo_tu->sect_off),\n+\t\t   hex_string (header.signature));\n+      *slot = dwo_tu;\n \n       dwarf_read_debug_printf_v (\"  offset %s, signature %s\",\n \t\t\t\t sect_offset_str (sect_off),\n@@ -6160,8 +6098,7 @@ create_debug_type_hash_table (dwarf2_per_objfile *per_objfile,\n \n /* Create the hash table of all entries in the .debug_types\n    (or .debug_types.dwo) section(s).\n-   If reading a DWO file, then DWO_FILE is a pointer to the DWO file object,\n-   otherwise it is NULL.\n+   DWO_FILE is a pointer to the DWO file object.\n \n    The result is a pointer to the hash table or NULL if there are no types.\n \n@@ -6178,35 +6115,6 @@ create_debug_types_hash_table (dwarf2_per_objfile *per_objfile,\n \t\t\t\t  rcuh_kind::TYPE);\n }\n \n-/* Create the hash table of all entries in the .debug_types section,\n-   and update all_comp_units.\n-   The result is zero if there is an error (e.g. missing .debug_types section),\n-   otherwise non-zero.\t*/\n-\n-static int\n-create_all_type_units (dwarf2_per_objfile *per_objfile)\n-{\n-  htab_up types_htab;\n-\n-  create_debug_type_hash_table (per_objfile, NULL, &per_objfile->per_bfd->info,\n-\t\t\t\ttypes_htab, rcuh_kind::COMPILE);\n-  create_debug_types_hash_table (per_objfile, NULL, per_objfile->per_bfd->types,\n-\t\t\t\t types_htab);\n-  if (types_htab == NULL)\n-    {\n-      per_objfile->per_bfd->signatured_types = NULL;\n-      return 0;\n-    }\n-\n-  per_objfile->per_bfd->signatured_types = std::move (types_htab);\n-\n-  htab_traverse_noresize (per_objfile->per_bfd->signatured_types.get (),\n-\t\t\t  add_signatured_type_cu_to_table,\n-\t\t\t  &per_objfile->per_bfd->all_comp_units);\n-\n-  return 1;\n-}\n-\n /* Add an entry for signature SIG to dwarf2_per_objfile->per_bfd->signatured_types.\n    If SLOT is non-NULL, it is the entry to use in the hash table.\n    Otherwise we find one.  */\n@@ -7447,7 +7355,7 @@ struct tu_abbrev_offset\n   sect_offset abbrev_offset;\n };\n \n-/* Helper routine for build_type_psymtabs_1, passed to std::sort.  */\n+/* Helper routine for build_type_psymtabs, passed to std::sort.  */\n \n static bool\n sort_tu_by_abbrev_offset (const struct tu_abbrev_offset &a,\n@@ -7457,7 +7365,6 @@ sort_tu_by_abbrev_offset (const struct tu_abbrev_offset &a,\n }\n \n /* Efficiently read all the type units.\n-   This does the bulk of the work for build_type_psymtabs.\n \n    The efficiency is because we sort TUs by the abbrev table they use and\n    only read each abbrev table once.  In one program there are 200K TUs\n@@ -7475,7 +7382,7 @@ sort_tu_by_abbrev_offset (const struct tu_abbrev_offset &a,\n    dwarf2_per_objfile->per_bfd->type_unit_groups.  */\n \n static void\n-build_type_psymtabs_1 (dwarf2_per_objfile *per_objfile)\n+build_type_psymtabs (dwarf2_per_objfile *per_objfile)\n {\n   struct tu_stats *tu_stats = &per_objfile->per_bfd->tu_stats;\n   abbrev_table_up abbrev_table;\n@@ -7602,18 +7509,6 @@ build_type_psymtab_dependencies (void **slot, void *info)\n   return 1;\n }\n \n-/* Subroutine of dwarf2_build_psymtabs_hard to simplify it.\n-   Build partial symbol tables for the .debug_types comp-units.  */\n-\n-static void\n-build_type_psymtabs (dwarf2_per_objfile *per_objfile)\n-{\n-  if (! create_all_type_units (per_objfile))\n-    return;\n-\n-  build_type_psymtabs_1 (per_objfile);\n-}\n-\n /* Traversal function for process_skeletonless_type_unit.\n    Read a TU in a DWO file and build partial symbols for it.  */\n \n@@ -7637,13 +7532,13 @@ process_skeletonless_type_unit (void **slot, void *info)\n   if (*slot != NULL)\n     return 1;\n \n-  /* This does the job that create_all_type_units would have done for\n+  /* This does the job that create_all_comp_units would have done for\n      this TU.  */\n   entry = add_type_unit (per_objfile, dwo_unit->signature, slot);\n   fill_in_sig_entry_from_dwo_entry (per_objfile, entry, dwo_unit);\n   *slot = entry;\n \n-  /* This does the job that build_type_psymtabs_1 would have done.  */\n+  /* This does the job that build_type_psymtabs would have done.  */\n   cutu_reader reader (entry, per_objfile, nullptr, nullptr, false);\n   if (!reader.dummy_p)\n     build_type_psymtabs_reader (&reader, reader.info_ptr,\n@@ -7725,9 +7620,8 @@ dwarf2_build_psymtabs_hard (dwarf2_per_objfile *per_objfile)\n      read_in_chain.  Make sure to free them when we're done.  */\n   free_cached_comp_units freer (per_objfile);\n \n-  build_type_psymtabs (per_objfile);\n-\n   create_all_comp_units (per_objfile);\n+  build_type_psymtabs (per_objfile);\n \n   /* Create a temporary address map on a temporary obstack.  We later\n      copy this to the final obstack.  */\n@@ -7800,7 +7694,9 @@ static void\n read_comp_units_from_section (dwarf2_per_objfile *per_objfile,\n \t\t\t      struct dwarf2_section_info *section,\n \t\t\t      struct dwarf2_section_info *abbrev_section,\n-\t\t\t      unsigned int is_dwz)\n+\t\t\t      unsigned int is_dwz,\n+\t\t\t      htab_up &types_htab,\n+\t\t\t      rcuh_kind section_kind)\n {\n   const gdb_byte *info_ptr;\n   struct objfile *objfile = per_objfile->objfile;\n@@ -7822,17 +7718,31 @@ read_comp_units_from_section (dwarf2_per_objfile *per_objfile,\n       comp_unit_head cu_header;\n       read_and_check_comp_unit_head (per_objfile, &cu_header, section,\n \t\t\t\t     abbrev_section, info_ptr,\n-\t\t\t\t     rcuh_kind::COMPILE);\n+\t\t\t\t     section_kind);\n \n       /* Save the compilation unit for later lookup.  */\n       if (cu_header.unit_type != DW_UT_type)\n \tthis_cu = per_objfile->per_bfd->allocate_per_cu ();\n       else\n \t{\n+\t  if (types_htab == nullptr)\n+\t    types_htab = allocate_signatured_type_table ();\n+\n \t  auto sig_type = per_objfile->per_bfd->allocate_signatured_type ();\n+\t  signatured_type *sig_ptr = sig_type.get ();\n \t  sig_type->signature = cu_header.signature;\n \t  sig_type->type_offset_in_tu = cu_header.type_cu_offset_in_tu;\n \t  this_cu = std::move (sig_type);\n+\n+\t  void **slot = htab_find_slot (types_htab.get (), sig_ptr, INSERT);\n+\t  gdb_assert (slot != nullptr);\n+\t  if (*slot != nullptr)\n+\t    complaint (_(\"debug type entry at offset %s is duplicate to\"\n+\t\t\t \" the entry at offset %s, signature %s\"),\n+\t\t       sect_offset_str (sect_off),\n+\t\t       sect_offset_str (sig_ptr->sect_off),\n+\t\t       hex_string (sig_ptr->signature));\n+\t  *slot = sig_ptr;\n \t}\n       this_cu->is_debug_types = (cu_header.unit_type == DW_UT_type);\n       this_cu->sect_off = sect_off;\n@@ -7851,12 +7761,22 @@ read_comp_units_from_section (dwarf2_per_objfile *per_objfile,\n static void\n create_all_comp_units (dwarf2_per_objfile *per_objfile)\n {\n+  htab_up types_htab;\n+\n   read_comp_units_from_section (per_objfile, &per_objfile->per_bfd->info,\n-\t\t\t\t&per_objfile->per_bfd->abbrev, 0);\n+\t\t\t\t&per_objfile->per_bfd->abbrev, 0,\n+\t\t\t\ttypes_htab, rcuh_kind::COMPILE);\n+  for (dwarf2_section_info &section : per_objfile->per_bfd->types)\n+    read_comp_units_from_section (per_objfile, &section,\n+\t\t\t\t  &per_objfile->per_bfd->abbrev, 0,\n+\t\t\t\t  types_htab, rcuh_kind::TYPE);\n \n   dwz_file *dwz = dwarf2_get_dwz_file (per_objfile->per_bfd);\n   if (dwz != NULL)\n-    read_comp_units_from_section (per_objfile, &dwz->info, &dwz->abbrev, 1);\n+    read_comp_units_from_section (per_objfile, &dwz->info, &dwz->abbrev, 1,\n+\t\t\t\t  types_htab, rcuh_kind::COMPILE);\n+\n+  per_objfile->per_bfd->signatured_types = std::move (types_htab);\n }\n \n /* Process all loaded DIEs for compilation unit CU, starting at"
    }
  ]
}