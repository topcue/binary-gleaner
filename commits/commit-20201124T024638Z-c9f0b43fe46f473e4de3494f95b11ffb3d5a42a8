{
  "sha": "c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzlmMGI0M2ZlNDZmNDczZTRkZTM0OTRmOTViMTFmZmIzZDVhNDJhOA==",
  "commit": {
    "author": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2020-11-24T02:46:38Z"
    },
    "committer": {
      "name": "Joel Brobecker",
      "email": "brobecker@adacore.com",
      "date": "2020-11-24T02:46:38Z"
    },
    "message": "gmp-utils: Convert the read/write methods to using gdb::array_view\n\nThis commit changes the interfaces of some of the methods declared\nin gmp-utils to take a gdb::array_view of gdb_byte instead of a\n(gdb_byte *, size) couple.\n\nThis makes these methods' API probably more C++-idiomatic.\n\n        * gmp-utils.h (gdb_mpz::read): Change buf and len parameters\n        into one single gdb::array_view parameter.\n        (gdb_mpz::write): Likewise.\n        (gdb_mpq::read_fixed_point, gdb_mpq::write_fixed_point): Likewise.\n        * gmp-utils.c (gdb_mpz::read): Change buf and len parameters\n        into one single gdb::array_view parameter.\n        Adjust implementation accordingly.\n        (gdb_mpz::write): Likewise.\n        (gdb_mpq::read_fixed_point, gdb_mpq::write_fixed_point): Likewise.\n        * unittests/gmp-utils-selftests.c: Adapt following changes above.\n        * valarith.c, valops.c, valprint.c, value.c: Likewise.",
    "tree": {
      "sha": "3413d683bf1843314a98ca795a8ee8ec849de3ee",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3413d683bf1843314a98ca795a8ee8ec849de3ee"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8/comments",
  "author": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "brobecke",
    "id": 11981700,
    "node_id": "MDQ6VXNlcjExOTgxNzAw",
    "avatar_url": "https://avatars.githubusercontent.com/u/11981700?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/brobecke",
    "html_url": "https://github.com/brobecke",
    "followers_url": "https://api.github.com/users/brobecke/followers",
    "following_url": "https://api.github.com/users/brobecke/following{/other_user}",
    "gists_url": "https://api.github.com/users/brobecke/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/brobecke/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/brobecke/subscriptions",
    "organizations_url": "https://api.github.com/users/brobecke/orgs",
    "repos_url": "https://api.github.com/users/brobecke/repos",
    "events_url": "https://api.github.com/users/brobecke/events{/privacy}",
    "received_events_url": "https://api.github.com/users/brobecke/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "987b670356322ba4d493f441855bf5dc8d946e9f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/987b670356322ba4d493f441855bf5dc8d946e9f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/987b670356322ba4d493f441855bf5dc8d946e9f"
    }
  ],
  "stats": {
    "total": 111,
    "additions": 68,
    "deletions": 43
  },
  "files": [
    {
      "sha": "3cf45821d6dac708b2602fc972d5178da70c1c26",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8",
      "patch": "@@ -1,3 +1,17 @@\n+2020-11-24  Joel Brobecker  <brobecker@adacore.com>\n+\n+\t* gmp-utils.h (gdb_mpz::read): Change buf and len parameters\n+\tinto one single gdb::array_view parameter.\n+\t(gdb_mpz::write): Likewise.\n+\t(gdb_mpq::read_fixed_point, gdb_mpq::write_fixed_point): Likewise.\n+\t* gmp-utils.c (gdb_mpz::read): Change buf and len parameters\n+\tinto one single gdb::array_view parameter.\n+\tAdjust implementation accordingly.\n+\t(gdb_mpz::write): Likewise.\n+\t(gdb_mpq::read_fixed_point, gdb_mpq::write_fixed_point): Likewise.\n+\t* unittests/gmp-utils-selftests.c: Adapt following changes above.\n+\t* valarith.c, valops.c, valprint.c, value.c: Likewise.\n+\n 2020-11-24  Joel Brobecker  <brobecker@adacore.com>\n \n \t* gmp-utils.h (gmp_string_printf): Rename from gmp_string_asprintf."
    },
    {
      "sha": "799410836e8b5bd8cea1b96752714ff937661f40",
      "filename": "gdb/gmp-utils.c",
      "status": "modified",
      "additions": 13,
      "deletions": 12,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8/gdb/gmp-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8/gdb/gmp-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gmp-utils.c?ref=c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8",
      "patch": "@@ -42,12 +42,12 @@ gmp_string_printf (const char *fmt, ...)\n /* See gmp-utils.h.  */\n \n void\n-gdb_mpz::read (const gdb_byte *buf, int len, enum bfd_endian byte_order,\n+gdb_mpz::read (gdb::array_view<const gdb_byte> buf, enum bfd_endian byte_order,\n \t       bool unsigned_p)\n {\n-  mpz_import (val, 1 /* count */, -1 /* order */, len /* size */,\n+  mpz_import (val, 1 /* count */, -1 /* order */, buf.size () /* size */,\n \t      byte_order == BFD_ENDIAN_BIG ? 1 : -1 /* endian */,\n-\t      0 /* nails */, buf /* op */);\n+\t      0 /* nails */, buf.data () /* op */);\n \n   if (!unsigned_p)\n     {\n@@ -56,7 +56,7 @@ gdb_mpz::read (const gdb_byte *buf, int len, enum bfd_endian byte_order,\n \t was in fact negative, we need to adjust VAL accordingly.  */\n       gdb_mpz max;\n \n-      mpz_ui_pow_ui (max.val, 2, len * TARGET_CHAR_BIT - 1);\n+      mpz_ui_pow_ui (max.val, 2, buf.size () * TARGET_CHAR_BIT - 1);\n       if (mpz_cmp (val, max.val) >= 0)\n \tmpz_submul_ui (val, max.val, 2);\n     }\n@@ -65,7 +65,7 @@ gdb_mpz::read (const gdb_byte *buf, int len, enum bfd_endian byte_order,\n /* See gmp-utils.h.  */\n \n void\n-gdb_mpz::write (gdb_byte *buf, int len, enum bfd_endian byte_order,\n+gdb_mpz::write (gdb::array_view<gdb_byte> buf, enum bfd_endian byte_order,\n \t\tbool unsigned_p) const\n {\n   gdb_mpz exported_val (val);\n@@ -77,14 +77,15 @@ gdb_mpz::write (gdb_byte *buf, int len, enum bfd_endian byte_order,\n \t would be the same as our negative value.  */\n       gdb_mpz neg_offset;\n \n-      mpz_ui_pow_ui (neg_offset.val, 2, len * TARGET_CHAR_BIT);\n+      mpz_ui_pow_ui (neg_offset.val, 2, buf.size () * TARGET_CHAR_BIT);\n       mpz_add (exported_val.val, exported_val.val, neg_offset.val);\n     }\n \n   /* Start by clearing the buffer, as mpz_export only writes as many\n      bytes as it needs (including none, if the value to export is zero.  */\n-  memset (buf, 0, len);\n-  mpz_export (buf, NULL /* count */, -1 /* order */, len /* size */,\n+  memset (buf.data (), 0, buf.size ());\n+  mpz_export (buf.data (), NULL /* count */, -1 /* order */,\n+\t      buf.size () /* size */,\n \t      byte_order == BFD_ENDIAN_BIG ? 1 : -1 /* endian */,\n \t      0 /* nails */, exported_val.val);\n }\n@@ -125,12 +126,12 @@ gdb_mpq::get_rounded () const\n /* See gmp-utils.h.  */\n \n void\n-gdb_mpq::read_fixed_point (const gdb_byte *buf, int len,\n+gdb_mpq::read_fixed_point (gdb::array_view<const gdb_byte> buf,\n \t\t\t   enum bfd_endian byte_order, bool unsigned_p,\n \t\t\t   const gdb_mpq &scaling_factor)\n {\n   gdb_mpz vz;\n-  vz.read (buf, len, byte_order, unsigned_p);\n+  vz.read (buf, byte_order, unsigned_p);\n \n   mpq_set_z (val, vz.val);\n   mpq_mul (val, val, scaling_factor.val);\n@@ -139,7 +140,7 @@ gdb_mpq::read_fixed_point (const gdb_byte *buf, int len,\n /* See gmp-utils.h.  */\n \n void\n-gdb_mpq::write_fixed_point (gdb_byte *buf, int len,\n+gdb_mpq::write_fixed_point (gdb::array_view<gdb_byte> buf,\n \t\t\t    enum bfd_endian byte_order, bool unsigned_p,\n \t\t\t    const gdb_mpq &scaling_factor) const\n {\n@@ -148,7 +149,7 @@ gdb_mpq::write_fixed_point (gdb_byte *buf, int len,\n   mpq_div (unscaled.val, unscaled.val, scaling_factor.val);\n \n   gdb_mpz unscaled_z = unscaled.get_rounded ();\n-  unscaled_z.write (buf, len, byte_order, unsigned_p);\n+  unscaled_z.write (buf, byte_order, unsigned_p);\n }\n \n /* A wrapper around xrealloc that we can then register with GMP"
    },
    {
      "sha": "12e4f8e3ecf648f926384111eea1da98d7bedc07",
      "filename": "gdb/gmp-utils.h",
      "status": "modified",
      "additions": 18,
      "deletions": 14,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8/gdb/gmp-utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8/gdb/gmp-utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gmp-utils.h?ref=c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8",
      "patch": "@@ -96,17 +96,19 @@ struct gdb_mpz\n      The return type can signed or unsigned, with no size restriction.  */\n   template<typename T> T as_integer () const;\n \n-  /* Set VAL by importing the number stored in the byte buffer (BUF),\n-     given its size (LEN) and BYTE_ORDER.\n+  /* Set VAL by importing the number stored in the byte array (BUF),\n+     using the given BYTE_ORDER.  The size of the data to read is\n+     the byte array's size.\n \n      UNSIGNED_P indicates whether the number has an unsigned type.  */\n-  void read (const gdb_byte *buf, int len, enum bfd_endian byte_order,\n+  void read (gdb::array_view<const gdb_byte> buf, enum bfd_endian byte_order,\n \t     bool unsigned_p);\n \n-  /* Write VAL into BUF as a LEN-bytes number with the given BYTE_ORDER.\n+  /* Write VAL into BUF as a number whose byte size is the size of BUF,\n+     using the given BYTE_ORDER.\n \n      UNSIGNED_P indicates whether the number has an unsigned type.  */\n-  void write (gdb_byte *buf, int len, enum bfd_endian byte_order,\n+  void write (gdb::array_view<gdb_byte> buf, enum bfd_endian byte_order,\n \t      bool unsigned_p) const;\n \n   /* Return a string containing VAL.  */\n@@ -167,24 +169,26 @@ struct gdb_mpq\n   /* Return VAL rounded to the nearest integer.  */\n   gdb_mpz get_rounded () const;\n \n-  /* Set VAL from the contents of the given buffer (BUF), which\n-     contains the unscaled value of a fixed point type object\n-     with the given size (LEN) and byte order (BYTE_ORDER).\n+  /* Set VAL from the contents of the given byte array (BUF), which\n+     contains the unscaled value of a fixed point type object.\n+     The byte size of the data is the size of BUF.\n+\n+     BYTE_ORDER provides the byte_order to use when reading the data.\n \n      UNSIGNED_P indicates whether the number has an unsigned type.\n      SCALING_FACTOR is the scaling factor to apply after having\n      read the unscaled value from our buffer.  */\n-  void read_fixed_point (const gdb_byte *buf, int len,\n+  void read_fixed_point (gdb::array_view<const gdb_byte> buf,\n \t\t\t enum bfd_endian byte_order, bool unsigned_p,\n \t\t\t const gdb_mpq &scaling_factor);\n \n-  /* Write VAL into BUF as a LEN-bytes fixed point value following\n-     the given BYTE_ORDER.\n+  /* Write VAL into BUF as fixed point value following the given BYTE_ORDER.\n+     The size of BUF is used as the length to write the value into.\n \n      UNSIGNED_P indicates whether the number has an unsigned type.\n      SCALING_FACTOR is the scaling factor to apply before writing\n      the unscaled value to our buffer.  */\n-  void write_fixed_point (gdb_byte *buf, int len,\n+  void write_fixed_point (gdb::array_view<gdb_byte> buf,\n \t\t\t  enum bfd_endian byte_order, bool unsigned_p,\n \t\t\t  const gdb_mpq &scaling_factor) const;\n \n@@ -213,13 +217,13 @@ struct gdb_mpf\n      UNSIGNED_P indicates whether the number has an unsigned type.\n      SCALING_FACTOR is the scaling factor to apply after having\n      read the unscaled value from our buffer.  */\n-  void read_fixed_point (const gdb_byte *buf, int len,\n+  void read_fixed_point (gdb::array_view<const gdb_byte> buf,\n \t\t\t enum bfd_endian byte_order, bool unsigned_p,\n \t\t\t const gdb_mpq &scaling_factor)\n   {\n     gdb_mpq tmp_q;\n \n-    tmp_q.read_fixed_point (buf, len, byte_order, unsigned_p, scaling_factor);\n+    tmp_q.read_fixed_point (buf, byte_order, unsigned_p, scaling_factor);\n     mpf_set_q (val, tmp_q.val);\n   }\n "
    },
    {
      "sha": "1365905651db01cccb24392f4ef636168eb5aa59",
      "filename": "gdb/unittests/gmp-utils-selftests.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8/gdb/unittests/gmp-utils-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8/gdb/unittests/gmp-utils-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/gmp-utils-selftests.c?ref=c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8",
      "patch": "@@ -95,7 +95,7 @@ gdb_mpz_as_integer ()\n \n template<typename T>\n void\n-store_and_read_back (T val, int buf_len, enum bfd_endian byte_order,\n+store_and_read_back (T val, size_t buf_len, enum bfd_endian byte_order,\n \t\t     gdb_mpz &expected, gdb_mpz &actual)\n {\n   gdb_byte *buf;\n@@ -109,7 +109,7 @@ store_and_read_back (T val, int buf_len, enum bfd_endian byte_order,\n   mpz_set (actual.val, expected.val);\n   mpz_sub_ui (actual.val, actual.val, 500);\n \n-  actual.read (buf, buf_len, byte_order, !std::is_signed<T>::value);\n+  actual.read ({buf, buf_len}, byte_order, !std::is_signed<T>::value);\n }\n \n /* Test the gdb_mpz::read method over a reasonable range of values.\n@@ -227,14 +227,14 @@ gdb_mpz_read_min_max ()\n \n template<typename T>\n T\n-write_and_extract (T val, int buf_len, enum bfd_endian byte_order)\n+write_and_extract (T val, size_t buf_len, enum bfd_endian byte_order)\n {\n   gdb_mpz v (val);\n \n   SELF_CHECK (v.as_integer<T> () == val);\n \n   gdb_byte *buf = (gdb_byte *) alloca (buf_len);\n-  v.write (buf, buf_len, byte_order, !std::is_signed<T>::value);\n+  v.write ({buf, buf_len}, byte_order, !std::is_signed<T>::value);\n \n   return extract_integer<T> (buf, buf_len, byte_order);\n }\n@@ -329,11 +329,11 @@ read_fp_test (int unscaled, const gdb_mpq &scaling_factor,\n {\n   /* For this kind of testing, we'll use a buffer the same size as\n      our unscaled parameter.  */\n-  const int len = sizeof (unscaled);\n+  const size_t len = sizeof (unscaled);\n   gdb_byte buf[len];\n   store_signed_integer (buf, len, byte_order, unscaled);\n \n-  actual.read_fixed_point (buf, len, byte_order, 0, scaling_factor);\n+  actual.read_fixed_point ({buf, len}, byte_order, 0, scaling_factor);\n \n   mpq_set_si (expected.val, unscaled, 1);\n   mpq_mul (expected.val, expected.val, scaling_factor.val);\n@@ -395,14 +395,14 @@ write_fp_test (int numerator, unsigned int denominator,\n      This is really an arbitrary decision, as long as the buffer\n      is long enough to hold the unscaled values that we'll be\n      writing.  */\n-  const int len = sizeof (LONGEST);\n+  const size_t len = sizeof (LONGEST);\n   gdb_byte buf[len];\n   memset (buf, 0, len);\n \n   gdb_mpq v;\n   mpq_set_si (v.val, numerator, denominator);\n   mpq_canonicalize (v.val);\n-  v.write_fixed_point (buf, len, byte_order, 0, scaling_factor);\n+  v.write_fixed_point ({buf, len}, byte_order, 0, scaling_factor);\n \n   return extract_unsigned_integer (buf, len, byte_order);\n }"
    },
    {
      "sha": "7ab183cbdc45c3bc03e3959619748ce45132fd78",
      "filename": "gdb/valarith.c",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8/gdb/valarith.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8/gdb/valarith.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valarith.c?ref=c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8",
      "patch": "@@ -908,18 +908,21 @@ fixed_point_binop (struct value *arg1, struct value *arg2, enum exp_opcode op)\n     }\n \n   gdb_mpq v1, v2, res;\n-  v1.read_fixed_point (value_contents (arg1), TYPE_LENGTH (type1),\n+  v1.read_fixed_point (gdb::make_array_view (value_contents (arg1),\n+\t\t\t\t\t     TYPE_LENGTH (type1)),\n \t\t       type_byte_order (type1), type1->is_unsigned (),\n \t\t       fixed_point_scaling_factor (type1));\n-  v2.read_fixed_point (value_contents (arg2), TYPE_LENGTH (type2),\n+  v2.read_fixed_point (gdb::make_array_view (value_contents (arg2),\n+\t\t\t\t\t     TYPE_LENGTH (type2)),\n \t\t       type_byte_order (type2), type2->is_unsigned (),\n \t\t       fixed_point_scaling_factor (type2));\n \n #define INIT_VAL_WITH_FIXED_POINT_VAL(RESULT) \\\n   do { \\\n       val = allocate_value (type1); \\\n       (RESULT).write_fixed_point\t\t\t\\\n-        (value_contents_raw (val), TYPE_LENGTH (type1), \\\n+        (gdb::make_array_view (value_contents_raw (val), \\\n+\t\t\t       TYPE_LENGTH (type1)), \\\n \t type_byte_order (type1), type1->is_unsigned (), \\\n \t fixed_point_scaling_factor (type1)); \\\n      } while (0)"
    },
    {
      "sha": "3e2d5d36c8a820e91873dc7b45968d56f8de435e",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8",
      "patch": "@@ -357,7 +357,8 @@ value_cast_to_fixed_point (struct type *to_type, struct value *from_val)\n     {\n       gdb_mpz vz;\n \n-      vz.read (value_contents (from_val), TYPE_LENGTH (from_type),\n+      vz.read (gdb::make_array_view (value_contents (from_val),\n+\t\t\t\t     TYPE_LENGTH (from_type)),\n \t       type_byte_order (from_type), from_type->is_unsigned ());\n       mpq_set_z (vq.val, vz.val);\n \n@@ -378,8 +379,9 @@ value_cast_to_fixed_point (struct type *to_type, struct value *from_val)\n   /* Finally, create the result value, and pack the unscaled value\n      in it.  */\n   struct value *result = allocate_value (to_type);\n-  unscaled.write (value_contents_raw (result),\n-\t\t  TYPE_LENGTH (to_type), type_byte_order (to_type),\n+  unscaled.write (gdb::make_array_view (value_contents_raw (result),\n+\t\t\t\t\tTYPE_LENGTH (to_type)),\n+\t\t  type_byte_order (to_type),\n \t\t  to_type->is_unsigned ());\n \n   return result;\n@@ -523,7 +525,7 @@ value_cast (struct type *type, struct value *arg2)\n \t  gdb_mpq fp_val;\n \n \t  fp_val.read_fixed_point\n-\t    (value_contents (arg2), TYPE_LENGTH (type2),\n+\t    (gdb::make_array_view (value_contents (arg2), TYPE_LENGTH (type2)),\n \t     type_byte_order (type2), type2->is_unsigned (),\n \t     fixed_point_scaling_factor (type2));\n "
    },
    {
      "sha": "f428eb595d502b9b818d94e7cd9d833e77eba961",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8",
      "patch": "@@ -809,7 +809,7 @@ generic_val_print_fixed_point (struct value *val, struct ui_file *stream,\n       const gdb_byte *valaddr = value_contents_for_printing (val);\n       gdb_mpf f;\n \n-      f.read_fixed_point (valaddr, TYPE_LENGTH (type),\n+      f.read_fixed_point (gdb::make_array_view (valaddr, TYPE_LENGTH (type)),\n \t\t\t  type_byte_order (type), type->is_unsigned (),\n \t\t\t  fixed_point_scaling_factor (type));\n "
    },
    {
      "sha": "a1226749eb9bb87b1e3ab4f9dad220048a3403e2",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=c9f0b43fe46f473e4de3494f95b11ffb3d5a42a8",
      "patch": "@@ -2812,7 +2812,8 @@ unpack_long (struct type *type, const gdb_byte *valaddr)\n     case TYPE_CODE_FIXED_POINT:\n       {\n \tgdb_mpq vq;\n-\tvq.read_fixed_point (valaddr, len, byte_order, nosign,\n+\tvq.read_fixed_point (gdb::make_array_view (valaddr, len),\n+\t\t\t     byte_order, nosign,\n \t\t\t     fixed_point_scaling_factor (type));\n \n \tgdb_mpz vz;"
    }
  ]
}