{
  "sha": "791b7405f4627ad65fd636d57adb9e5749d0b9e7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzkxYjc0MDVmNDYyN2FkNjVmZDYzNmQ1N2FkYjllNTc0OWQwYjllNw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-10-07T15:45:24Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-10-15T20:32:28Z"
    },
    "message": "gdb: Update comments that reference VEC or vec.h\n\nWith the removal of the old VEC mechanism from the code base, update\ncomments that still make reference to VECs.  There should be no user\nvisible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* linespec.c (decode_digits_ordinary): Update comment.\n\t* make-target-delegates: No longer need to handle VEC case.\n\t* memrange.c (normalize_mem_ranges): Update comment.\n\t* namespace.c (add_using_directive): Update comment.\n\t* objc-lang.c (uniquify_strings): Update comment.\n\t* ppc-linux-nat.c (struct thread_points): Update comment.\n\t* probe.h (find_probes_in_objfile): Update comment.\n\t* target.h (enum flash_preserve_mode): Update comment.\n\t* varobj.c (varobj_restrict_range): Update comment.\n\t* varobj.h (varobj_list_children): Update comment.\n\nChange-Id: Iefd2e903705c3e79cd13b43395c7a1c167f9a088",
    "tree": {
      "sha": "af7b601346c39181f5090ea6086a8728be999806",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/af7b601346c39181f5090ea6086a8728be999806"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/791b7405f4627ad65fd636d57adb9e5749d0b9e7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/791b7405f4627ad65fd636d57adb9e5749d0b9e7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/791b7405f4627ad65fd636d57adb9e5749d0b9e7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/791b7405f4627ad65fd636d57adb9e5749d0b9e7/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0dc327459b19e6765c8fe80957f5c8620611628e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0dc327459b19e6765c8fe80957f5c8620611628e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0dc327459b19e6765c8fe80957f5c8620611628e"
    }
  ],
  "stats": {
    "total": 51,
    "additions": 29,
    "deletions": 22
  },
  "files": [
    {
      "sha": "3827c4d3235a749708622975a55b6ae571d5e6b1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=791b7405f4627ad65fd636d57adb9e5749d0b9e7",
      "patch": "@@ -1,3 +1,16 @@\n+2019-10-15  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* linespec.c (decode_digits_ordinary): Update comment.\n+\t* make-target-delegates: No longer need to handle VEC case.\n+\t* memrange.c (normalize_mem_ranges): Update comment.\n+\t* namespace.c (add_using_directive): Update comment.\n+\t* objc-lang.c (uniquify_strings): Update comment.\n+\t* ppc-linux-nat.c (struct thread_points): Update comment.\n+\t* probe.h (find_probes_in_objfile): Update comment.\n+\t* target.h (enum flash_preserve_mode): Update comment.\n+\t* varobj.c (varobj_restrict_range): Update comment.\n+\t* varobj.h (varobj_list_children): Update comment.\n+\n 2019-10-15  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* Makefile.in: Remove references to vec.h and vec.c."
    },
    {
      "sha": "fb6b04e22b008f28426936d5411f81827562c674",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=791b7405f4627ad65fd636d57adb9e5749d0b9e7",
      "patch": "@@ -4109,8 +4109,9 @@ decode_digits_list_mode (struct linespec_state *self,\n   return values;\n }\n \n-/* A helper for create_sals_line_offset that iterates over the symtabs,\n-   adding lines to the VEC.  */\n+/* A helper for create_sals_line_offset that iterates over the symtabs\n+   associated with LS and returns a vector of corresponding symtab_and_line\n+   structures.  */\n \n static std::vector<symtab_and_line>\n decode_digits_ordinary (struct linespec_state *self,"
    },
    {
      "sha": "a7a39b3289726ea95301b19b2d87896cb468c9af",
      "filename": "gdb/make-target-delegates",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/make-target-delegates",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/make-target-delegates",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/make-target-delegates?ref=791b7405f4627ad65fd636d57adb9e5749d0b9e7",
      "patch": "@@ -43,11 +43,9 @@ $POINTER_PART = qr,\\s*(\\*)?\\s*,;\n $CP_SYMBOL = qr,[a-zA-Z_][a-zA-Z0-9_<>:]*,;\n # Match the return type when it is \"ordinary\".\n $SIMPLE_RETURN_PART = qr,((struct|class|enum|union)\\s+)?${CP_SYMBOL}+,;\n-# Match the return type when it is a VEC.\n-$VEC_RETURN_PART = qr,VEC\\s*\\([^\\)]+\\),;\n \n # Match a return type.\n-$RETURN_PART = qr,((const|volatile)\\s+)?(${SIMPLE_RETURN_PART}|${VEC_RETURN_PART})${POINTER_PART},;\n+$RETURN_PART = qr,((const|volatile)\\s+)?(${SIMPLE_RETURN_PART})${POINTER_PART},;\n \n # Match \"virtual\".\n $VIRTUAL_PART = qr,virtual\\s,;"
    },
    {
      "sha": "0c4b41582955315282e1204cd4db0508c5a4b974",
      "filename": "gdb/memrange.c",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/memrange.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/memrange.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/memrange.c?ref=791b7405f4627ad65fd636d57adb9e5749d0b9e7",
      "patch": "@@ -44,10 +44,6 @@ address_in_mem_range (CORE_ADDR address, const struct mem_range *r)\n void\n normalize_mem_ranges (std::vector<mem_range> *memory)\n {\n-  /* This function must not use any VEC operation on RANGES that\n-     reallocates the memory block as that invalidates the RANGES\n-     pointer, which callers expect to remain valid.  */\n-\n   if (!memory->empty ())\n     {\n       std::vector<mem_range> &m = *memory;"
    },
    {
      "sha": "e08d4f7edb4e6bc710a04f970295e7cbfa872837",
      "filename": "gdb/namespace.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/namespace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/namespace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/namespace.c?ref=791b7405f4627ad65fd636d57adb9e5749d0b9e7",
      "patch": "@@ -30,8 +30,8 @@\n    it is NULL.  EXCLUDES is a list of names not to import from an\n    imported module or NULL.  If COPY_NAMES is non-zero, then the\n    arguments are copied into newly allocated memory so they can be\n-   temporaries.  For EXCLUDES the VEC pointers are copied but the\n-   pointed to characters are not copied.  */\n+   temporaries.  For EXCLUDES the contents of the vector are copied,\n+   but the pointed to characters are not copied.  */\n \n void\n add_using_directive (struct using_direct **using_directives,"
    },
    {
      "sha": "fbf0dab2ae233b83ed3769f4320b289309ec4126",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=791b7405f4627ad65fd636d57adb9e5749d0b9e7",
      "patch": "@@ -1063,7 +1063,7 @@ find_methods (char type, const char *theclass, const char *category,\n     }\n }\n \n-/* Uniquify a VEC of strings.  */\n+/* Uniquify a vector of strings.  */\n \n static void\n uniquify_strings (std::vector<const char *> *strings)"
    },
    {
      "sha": "0d66ade45606302937df77cefde76dbb5ed76a12",
      "filename": "gdb/ppc-linux-nat.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/ppc-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/ppc-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-linux-nat.c?ref=791b7405f4627ad65fd636d57adb9e5749d0b9e7",
      "patch": "@@ -1575,9 +1575,9 @@ struct hw_break_tuple\n   struct ppc_hw_breakpoint *hw_break;\n };\n \n-/* This is an internal VEC created to store information about *points inserted\n-   for each thread.  This is used when PowerPC HWDEBUG ptrace interface is\n-   available.  */\n+/* This is an internal vector created to store information about *points\n+   inserted for each thread.  This is used when PowerPC HWDEBUG ptrace\n+   interface is available.  */\n struct thread_points\n   {\n     /* The TID to which this *point relates.  */"
    },
    {
      "sha": "4227bd43778604582b3272171a24c3a462a54f16",
      "filename": "gdb/probe.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/probe.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/probe.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/probe.h?ref=791b7405f4627ad65fd636d57adb9e5749d0b9e7",
      "patch": "@@ -274,7 +274,7 @@ extern std::vector<symtab_and_line> parse_probes\n extern struct bound_probe find_probe_by_pc (CORE_ADDR pc);\n \n /* Search OBJFILE for a probe with the given PROVIDER, NAME.  Return a\n-   VEC of all probes that were found.  If no matching probe is found,\n+   vector of all probes that were found.  If no matching probe is found,\n    return an empty vector.  */\n \n extern std::vector<probe *> find_probes_in_objfile (struct objfile *objfile,"
    },
    {
      "sha": "1bb72766737ff30fb0d6bb97275b70e6390142c1",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=791b7405f4627ad65fd636d57adb9e5749d0b9e7",
      "patch": "@@ -1535,7 +1535,7 @@ enum flash_preserve_mode\n    that supports writing to flash memory, and it should be used for\n    all cases where access to flash memory is desirable.\n \n-   REQUESTS is the vector (see vec.h) of memory_write_request.\n+   REQUESTS is the vector of memory_write_request.\n    PRESERVE_FLASH_P indicates what to do with blocks which must be\n      erased, but not completely rewritten.\n    PROGRESS_CB is a function that will be periodically called to provide"
    },
    {
      "sha": "37a522be5d0def661f6e773bd537a687fa7eeb9a",
      "filename": "gdb/varobj.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/varobj.c?ref=791b7405f4627ad65fd636d57adb9e5749d0b9e7",
      "patch": "@@ -597,10 +597,9 @@ varobj_get_frozen (const struct varobj *var)\n   return var->frozen;\n }\n \n-/* A helper function that restricts a range to what is actually\n-   available in a VEC.  This follows the usual rules for the meaning\n-   of FROM and TO -- if either is negative, the entire range is\n-   used.  */\n+/* A helper function that updates the contents of FROM and TO based on the\n+   size of the vector CHILDREN.  If the contents of either FROM or TO are\n+   negative the entire range is used.  */\n \n void\n varobj_restrict_range (const std::vector<varobj *> &children,"
    },
    {
      "sha": "66db7807fe0eaebb6519bbd320a5b6f295ecfe7c",
      "filename": "gdb/varobj.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/varobj.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/791b7405f4627ad65fd636d57adb9e5749d0b9e7/gdb/varobj.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/varobj.h?ref=791b7405f4627ad65fd636d57adb9e5749d0b9e7",
      "patch": "@@ -286,7 +286,7 @@ extern int varobj_get_num_children (struct varobj *var);\n    indicating the range of children to return.  If either *FROM or *TO\n    is less than zero on entry, then all children will be returned.  On\n    return, *FROM and *TO will be updated to indicate the real range\n-   that was returned.  The resulting VEC will contain at least the\n+   that was returned.  The resulting vector will contain at least the\n    children from *FROM to just before *TO; it might contain more\n    children, depending on whether any more were available.  */\n extern const std::vector<varobj *> &"
    }
  ]
}