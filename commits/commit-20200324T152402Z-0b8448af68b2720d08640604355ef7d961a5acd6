{
  "sha": "0b8448af68b2720d08640604355ef7d961a5acd6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGI4NDQ4YWY2OGIyNzIwZDA4NjQwNjA0MzU1ZWY3ZDk2MWE1YWNkNg==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-03-24T15:24:02Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-03-24T15:24:02Z"
    },
    "message": "Add code to the BFD library to handle opening files with pathnames longer than MAX_PATH on Win32 systems.\n\n\tPR 25713\n\t* bfdio.c (_bfd_real_fopen): Add code to handle long filenames on\n\tWin32 systems.",
    "tree": {
      "sha": "0c9cbf8366815967f5ef0780b78366191fbd1be6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0c9cbf8366815967f5ef0780b78366191fbd1be6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0b8448af68b2720d08640604355ef7d961a5acd6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b8448af68b2720d08640604355ef7d961a5acd6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0b8448af68b2720d08640604355ef7d961a5acd6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b8448af68b2720d08640604355ef7d961a5acd6/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ec2e748ad396c868839c977aa27d0333eb085970",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ec2e748ad396c868839c977aa27d0333eb085970",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ec2e748ad396c868839c977aa27d0333eb085970"
    }
  ],
  "stats": {
    "total": 42,
    "additions": 31,
    "deletions": 11
  },
  "files": [
    {
      "sha": "93c4bf950e61726d2866aeed8408ef75ec48a417",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b8448af68b2720d08640604355ef7d961a5acd6/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b8448af68b2720d08640604355ef7d961a5acd6/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=0b8448af68b2720d08640604355ef7d961a5acd6",
      "patch": "@@ -1,3 +1,9 @@\n+2020-03-24  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 25713\n+\t* bfdio.c (_bfd_real_fopen): Add code to handle long filenames on\n+\tWin32 systems.\n+\n 2020-03-24  Nick Clifton  <nickc@redhat.com>\n \n \tPR 25681"
    },
    {
      "sha": "9e88f5be9150fda1d8ff3bd83ab17f165350d884",
      "filename": "bfd/bfdio.c",
      "status": "modified",
      "additions": 25,
      "deletions": 11,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b8448af68b2720d08640604355ef7d961a5acd6/bfd/bfdio.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b8448af68b2720d08640604355ef7d961a5acd6/bfd/bfdio.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfdio.c?ref=0b8448af68b2720d08640604355ef7d961a5acd6",
      "patch": "@@ -26,6 +26,9 @@\n #include \"bfd.h\"\n #include \"libbfd.h\"\n #include \"aout/ar.h\"\n+#if defined (_WIN32)\n+#include <windows.h>\n+#endif\n \n #ifndef S_IXUSR\n #define S_IXUSR 0100    /* Execute by owner.  */\n@@ -93,12 +96,7 @@ _bfd_real_fopen (const char *filename, const char *modes)\n      In fopen-vms.h, they are separated from the mode with a comma.\n      Split here.  */\n   vms_attr = strchr (modes, ',');\n-  if (vms_attr == NULL)\n-    {\n-      /* No attributes.  */\n-      return close_on_exec (fopen (filename, modes));\n-    }\n-  else\n+  if (vms_attr != NULL)\n     {\n       /* Attributes found.  Split.  */\n       size_t modes_len = strlen (modes) + 1;\n@@ -116,13 +114,29 @@ _bfd_real_fopen (const char *filename, const char *modes)\n \t}\n       return close_on_exec (fopen (filename, at[0], at[1], at[2]));\n     }\n-#else /* !VMS */\n-#if defined (HAVE_FOPEN64)\n+\n+#elif defined (_WIN32)\n+  size_t filelen = strlen (filename) + 1;\n+\n+  if (filelen > MAX_PATH - 1)\n+    {\n+      FILE *file;\n+      char* fullpath = (char *) malloc (filelen + 8);\n+\n+      /* Add a Microsoft recommended prefix that\n+\t will allow the extra-long path to work.  */\n+      strcpy (fullpath, \"\\\\\\\\?\\\\\");\n+      strcat (fullpath, filename);\n+      file = close_on_exec (fopen (fullpath, modes));\n+      free (fullpath);\n+      return file;\n+    }\n+\n+#elif defined (HAVE_FOPEN64)\n   return close_on_exec (fopen64 (filename, modes));\n-#else\n-  return close_on_exec (fopen (filename, modes));\n #endif\n-#endif /* !VMS */\n+\n+  return close_on_exec (fopen (filename, modes));\n }\n \n /*"
    }
  ]
}