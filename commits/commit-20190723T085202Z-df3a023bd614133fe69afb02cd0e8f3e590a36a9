{
  "sha": "df3a023bd614133fe69afb02cd0e8f3e590a36a9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGYzYTAyM2JkNjE0MTMzZmU2OWFmYjAyY2QwZThmM2U1OTBhMzZhOQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-23T08:24:42Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-23T08:52:02Z"
    },
    "message": "SHF_GNU_MBIND requires ELFOSABI_GNU\n\nWhen SHF_GNU_MBIND was added in the SHF_LOOS to SHF_HIOS range, it\nshould have required ELFOSABI_GNU since these flags are already in use\nby other OSes.  HPUX SHF_HP_TLS in fact has the same value.  That\nmeans no place in binutils should test SHF_GNU_MBIND without first\nchecking OSABI, and SHF_GNU_MBIND should not be set without also\nsetting OSABI.  At least, that's the ideal, but the patch accepts\nSHF_GNU_MBIND on ELFOSABI_NONE object files since gas didn't always\nset OSABI.  However, to reinforce the fact that SHF_GNU_MBIND isn't\nproper without a non-zero OSABI, readelf will display the flag as\nLOOS+0 if OSABI isn't set.\n\nThe clash with SHF_HP_TLS means that hppa64-linux either has that flag\non .tbss sections or supports GNU_MBIND, not both.  (hppa64-linux\nusers, if there are any, may have noticed that GNU ld since 2017\nmysteriously aligned their .tbss sections to a 4k boundary.  That was\none consequence of SHF_HP_TLS being blindly interpreted as\nSHF_GNU_MBIND.)  Since it seems that binutils, gdb, gcc, glibc, and\nthe linux kernel don't care about SHF_HP_TLS I took that flag out of\n.tbss for hppa64-linux.\n\nbfd/\n\t* elf-bfd.h (enum elf_gnu_osabi): Add elf_gnu_osabi_mbind.\n\t* elf.c (_bfd_elf_make_section_from_shdr): Set elf_gnu_osabi_mbind.\n\t(get_program_header_size): Formatting.  Only test SH_GNU_MBIND\n\twhen elf_gnu_osabi_mbind is set.\n\t(_bfd_elf_map_sections_to_segments): Likewise.\n\t(_bfd_elf_init_private_section_data): Likewise.\n\t(_bfd_elf_final_write_processing): Update comment.\n\t* elf64-hppa.c (elf64_hppa_special_sections): Move .tbss entry.\n\t(elf_backend_special_sections): Define without .tbss for linux.\nbinutils/\n\t* readelf.c (get_parisc_segment_type): Split off hpux entries..\n\t(get_ia64_segment_type): ..and these..\n\t(get_hpux_segment_type): ..to here.\n\t(get_segment_type): Condition GNU_MBIND on osabi.  Use\n\tget_hpux_segment_type.\n\t(get_symbol_binding): Do not print UNIQUE for ELFOSABI_NONE.\n\t(get_symbol_type): Do not print IFUNC for ELFOSABI_NONE.\ngas/\n\t* config/obj-elf.c (obj_elf_change_section): Don't emit a fatal\n\terror for non-SHF_ALLOC SHF_GNU_MBIND here.\n\t(obj_elf_parse_section_letters): Return SHF_GNU_MBIND in new\n\tgnu_attr param.\n\t(obj_elf_section): Adjust obj_elf_parse_section_letters call.\n\tFormatting.  Set SHF_GNU_MBIND and elf_osabi from gnu_attr.\n\tEmit normal error for non-SHF_ALLOC SHF_GNU_MBIND and wrong osabi.\n\t(obj_elf_type): Set elf_osabi for ifunc.\n\t* testsuite/gas/elf/section12a.d: xfail msp430 and hpux.\n\t* testsuite/gas/elf/section12b.d: Likewise.\n\t* testsuite/gas/elf/section13.d: Likewise.\n\t* testsuite/gas/elf/section13.l: Adjust expected error.\nld/\n\t* emultempl/elf32.em (gld${EMULATION_NAME}_place_orphan): Condition\n\tSHF_GNU_MBIND on osabi.  Set output elf_gnu_osabi_mbind.",
    "tree": {
      "sha": "396b62a6d24352b88221af7749348cdfbcd5a9a3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/396b62a6d24352b88221af7749348cdfbcd5a9a3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/df3a023bd614133fe69afb02cd0e8f3e590a36a9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/df3a023bd614133fe69afb02cd0e8f3e590a36a9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/df3a023bd614133fe69afb02cd0e8f3e590a36a9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/df3a023bd614133fe69afb02cd0e8f3e590a36a9/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "06f44071ccbeca33fff70b928b71d95a15982740",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/06f44071ccbeca33fff70b928b71d95a15982740",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/06f44071ccbeca33fff70b928b71d95a15982740"
    }
  ],
  "stats": {
    "total": 313,
    "additions": 205,
    "deletions": 108
  },
  "files": [
    {
      "sha": "0b6dff692f84d8470daf344c004947b16a711187",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df3a023bd614133fe69afb02cd0e8f3e590a36a9/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df3a023bd614133fe69afb02cd0e8f3e590a36a9/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=df3a023bd614133fe69afb02cd0e8f3e590a36a9",
      "patch": "@@ -1,3 +1,15 @@\n+2019-07-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf-bfd.h (enum elf_gnu_osabi): Add elf_gnu_osabi_mbind.\n+\t* elf.c (_bfd_elf_make_section_from_shdr): Set elf_gnu_osabi_mbind.\n+\t(get_program_header_size): Formatting.  Only test SH_GNU_MBIND\n+\twhen elf_gnu_osabi_mbind is set.\n+\t(_bfd_elf_map_sections_to_segments): Likewise.\n+\t(_bfd_elf_init_private_section_data): Likewise.\n+\t(_bfd_elf_final_write_processing): Update comment.\n+\t* elf64-hppa.c (elf64_hppa_special_sections): Move .tbss entry.\n+\t(elf_backend_special_sections): Define without .tbss for linux.\n+\n 2019-07-23  Alan Modra  <amodra@gmail.com>\n \n \t* elf-bfd.h (enum elf_gnu_osabi): Rename from elf_gnu_symbols."
    },
    {
      "sha": "01beac6757d6c44a4923837f955c6a065991f175",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df3a023bd614133fe69afb02cd0e8f3e590a36a9/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df3a023bd614133fe69afb02cd0e8f3e590a36a9/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=df3a023bd614133fe69afb02cd0e8f3e590a36a9",
      "patch": "@@ -1809,11 +1809,12 @@ struct output_elf_obj_tdata\n   bfd_boolean flags_init;\n };\n \n-/* Indicate if the bfd contains symbols that have the STT_GNU_IFUNC\n-   symbol type or STB_GNU_UNIQUE binding.  Used to set the osabi\n-   field in the ELF header structure.  */\n+/* Indicate if the bfd contains SHF_GNU_MBIND sections or symbols that\n+   have the STT_GNU_IFUNC symbol type or STB_GNU_UNIQUE binding.  Used\n+   to set the osabi field in the ELF header structure.  */\n enum elf_gnu_osabi\n {\n+  elf_gnu_osabi_mbind = 1 << 0,\n   elf_gnu_osabi_ifunc = 1 << 1,\n   elf_gnu_osabi_unique = 1 << 2,\n };"
    },
    {
      "sha": "1c77a7917ab77eeb31429bb342def802e98290f1",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 48,
      "deletions": 32,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df3a023bd614133fe69afb02cd0e8f3e590a36a9/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df3a023bd614133fe69afb02cd0e8f3e590a36a9/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=df3a023bd614133fe69afb02cd0e8f3e590a36a9",
      "patch": "@@ -1067,6 +1067,19 @@ _bfd_elf_make_section_from_shdr (bfd *abfd,\n   if ((hdr->sh_flags & SHF_EXCLUDE) != 0)\n     flags |= SEC_EXCLUDE;\n \n+  switch (elf_elfheader (abfd)->e_ident[EI_OSABI])\n+    {\n+      /* FIXME: We should not recognize SHF_GNU_MBIND for ELFOSABI_NONE,\n+\t but binutils as of 2019-07-23 did not set the EI_OSABI header\n+\t byte.  */\n+    case ELFOSABI_NONE:\n+    case ELFOSABI_GNU:\n+    case ELFOSABI_FREEBSD:\n+      if ((hdr->sh_flags & SHF_GNU_MBIND) != 0)\n+\telf_tdata (abfd)->has_gnu_osabi |= elf_gnu_osabi_mbind;\n+      break;\n+    }\n+\n   if ((flags & SEC_ALLOC) == 0)\n     {\n       /* The debugging sections appear to be recognized only by name,\n@@ -4425,31 +4438,32 @@ get_program_header_size (bfd *abfd, struct bfd_link_info *info)\n \n   bed = get_elf_backend_data (abfd);\n \n- if ((abfd->flags & D_PAGED) != 0)\n-   {\n-     /* Add a PT_GNU_MBIND segment for each mbind section.  */\n-     unsigned int page_align_power = bfd_log2 (bed->commonpagesize);\n-     for (s = abfd->sections; s != NULL; s = s->next)\n-       if (elf_section_flags (s) & SHF_GNU_MBIND)\n-\t {\n-\t   if (elf_section_data (s)->this_hdr.sh_info\n-\t       > PT_GNU_MBIND_NUM)\n-\t     {\n-\t       _bfd_error_handler\n-\t\t /* xgettext:c-format */\n-\t\t (_(\"%pB: GNU_MBIN section `%pA' has invalid sh_info field: %d\"),\n-\t\t     abfd, s, elf_section_data (s)->this_hdr.sh_info);\n-\t       continue;\n-\t     }\n-\t   /* Align mbind section to page size.  */\n-\t   if (s->alignment_power < page_align_power)\n-\t     s->alignment_power = page_align_power;\n-\t   segs ++;\n-\t }\n-   }\n-\n- /* Let the backend count up any program headers it might need.  */\n- if (bed->elf_backend_additional_program_headers)\n+  if ((abfd->flags & D_PAGED) != 0\n+      && (elf_tdata (abfd)->has_gnu_osabi & elf_gnu_osabi_mbind) != 0)\n+    {\n+      /* Add a PT_GNU_MBIND segment for each mbind section.  */\n+      unsigned int page_align_power = bfd_log2 (bed->commonpagesize);\n+      for (s = abfd->sections; s != NULL; s = s->next)\n+\tif (elf_section_flags (s) & SHF_GNU_MBIND)\n+\t  {\n+\t    if (elf_section_data (s)->this_hdr.sh_info > PT_GNU_MBIND_NUM)\n+\t      {\n+\t\t_bfd_error_handler\n+\t\t  /* xgettext:c-format */\n+\t\t  (_(\"%pB: GNU_MBIND section `%pA' has invalid \"\n+\t\t     \"sh_info field: %d\"),\n+\t\t   abfd, s, elf_section_data (s)->this_hdr.sh_info);\n+\t\tcontinue;\n+\t      }\n+\t    /* Align mbind section to page size.  */\n+\t    if (s->alignment_power < page_align_power)\n+\t      s->alignment_power = page_align_power;\n+\t    segs ++;\n+\t  }\n+    }\n+\n+  /* Let the backend count up any program headers it might need.  */\n+  if (bed->elf_backend_additional_program_headers)\n     {\n       int a;\n \n@@ -5045,11 +5059,12 @@ _bfd_elf_map_sections_to_segments (bfd *abfd, struct bfd_link_info *info)\n \t  pm = &m->next;\n \t}\n \n-      if (first_mbind && (abfd->flags & D_PAGED) != 0)\n+      if (first_mbind\n+\t  && (abfd->flags & D_PAGED) != 0\n+\t  && (elf_tdata (abfd)->has_gnu_osabi & elf_gnu_osabi_mbind) != 0)\n \tfor (s = first_mbind; s != NULL; s = s->next)\n \t  if ((elf_section_flags (s) & SHF_GNU_MBIND) != 0\n-\t      && (elf_section_data (s)->this_hdr.sh_info\n-\t\t  <= PT_GNU_MBIND_NUM))\n+\t      && elf_section_data (s)->this_hdr.sh_info <= PT_GNU_MBIND_NUM)\n \t    {\n \t      /* Mandated PF_R.  */\n \t      unsigned long p_flags = PF_R;\n@@ -7665,7 +7680,8 @@ _bfd_elf_init_private_section_data (bfd *ibfd,\n \t\t\t       & (SHF_MASKOS | SHF_MASKPROC));\n \n   /* Copy sh_info from input for mbind section.  */\n-  if (elf_section_flags (isec) & SHF_GNU_MBIND)\n+  if ((elf_tdata (ibfd)->has_gnu_osabi & elf_gnu_osabi_mbind) != 0\n+      && elf_section_flags (isec) & SHF_GNU_MBIND)\n     elf_section_data (osec)->this_hdr.sh_info\n       = elf_section_data (isec)->this_hdr.sh_info;\n \n@@ -12118,9 +12134,9 @@ _bfd_elf_final_write_processing (bfd *abfd,\n   if (i_ehdrp->e_ident[EI_OSABI] == ELFOSABI_NONE)\n     i_ehdrp->e_ident[EI_OSABI] = get_elf_backend_data (abfd)->elf_osabi;\n \n-  /* To make things simpler for the loader on Linux systems we set the\n-     osabi field to ELFOSABI_GNU if the binary contains symbols of\n-     the STT_GNU_IFUNC type or STB_GNU_UNIQUE binding.  */\n+  /* Set the osabi field to ELFOSABI_GNU if the binary contains\n+     SHF_GNU_MBIND sections or symbols of STT_GNU_IFUNC type or\n+     STB_GNU_UNIQUE binding.  */\n   if (i_ehdrp->e_ident[EI_OSABI] == ELFOSABI_NONE\n       && elf_tdata (abfd)->has_gnu_osabi)\n     i_ehdrp->e_ident[EI_OSABI] = ELFOSABI_GNU;"
    },
    {
      "sha": "77811580c679b535aea388ea8f10fb9be78937c7",
      "filename": "bfd/elf64-hppa.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df3a023bd614133fe69afb02cd0e8f3e590a36a9/bfd/elf64-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df3a023bd614133fe69afb02cd0e8f3e590a36a9/bfd/elf64-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-hppa.c?ref=df3a023bd614133fe69afb02cd0e8f3e590a36a9",
      "patch": "@@ -3954,13 +3954,13 @@ elf64_hppa_relocate_section (bfd *output_bfd,\n \n static const struct bfd_elf_special_section elf64_hppa_special_sections[] =\n {\n+  { STRING_COMMA_LEN (\".tbss\"),\t 0, SHT_NOBITS, SHF_ALLOC + SHF_WRITE + SHF_HP_TLS },\n   { STRING_COMMA_LEN (\".fini\"),\t 0, SHT_PROGBITS, SHF_ALLOC + SHF_WRITE },\n   { STRING_COMMA_LEN (\".init\"),\t 0, SHT_PROGBITS, SHF_ALLOC + SHF_WRITE },\n   { STRING_COMMA_LEN (\".plt\"),\t 0, SHT_PROGBITS, SHF_ALLOC + SHF_WRITE + SHF_PARISC_SHORT },\n   { STRING_COMMA_LEN (\".dlt\"),\t 0, SHT_PROGBITS, SHF_ALLOC + SHF_WRITE + SHF_PARISC_SHORT },\n   { STRING_COMMA_LEN (\".sdata\"), 0, SHT_PROGBITS, SHF_ALLOC + SHF_WRITE + SHF_PARISC_SHORT },\n   { STRING_COMMA_LEN (\".sbss\"),\t 0, SHT_NOBITS, SHF_ALLOC + SHF_WRITE + SHF_PARISC_SHORT },\n-  { STRING_COMMA_LEN (\".tbss\"),\t 0, SHT_NOBITS, SHF_ALLOC + SHF_WRITE + SHF_HP_TLS },\n   { NULL,\t\t     0,\t 0, 0,\t\t  0 }\n };\n \n@@ -4088,5 +4088,7 @@ const struct elf_size_info hppa64_elf_size_info =\n #define ELF_OSABI\t\t\tELFOSABI_GNU\n #undef elf64_bed\n #define elf64_bed\t\t\telf64_hppa_linux_bed\n+#undef elf_backend_special_sections\n+#define elf_backend_special_sections\t(elf64_hppa_special_sections + 1)\n \n #include \"elf64-target.h\""
    },
    {
      "sha": "e329c40f305f42a59bfa58aaef16f6fb2617debd",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df3a023bd614133fe69afb02cd0e8f3e590a36a9/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df3a023bd614133fe69afb02cd0e8f3e590a36a9/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=df3a023bd614133fe69afb02cd0e8f3e590a36a9",
      "patch": "@@ -1,3 +1,13 @@\n+2019-07-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* readelf.c (get_parisc_segment_type): Split off hpux entries..\n+\t(get_ia64_segment_type): ..and these..\n+\t(get_hpux_segment_type): ..to here.\n+\t(get_segment_type): Condition GNU_MBIND on osabi.  Use\n+\tget_hpux_segment_type.\n+\t(get_symbol_binding): Do not print UNIQUE for ELFOSABI_NONE.\n+\t(get_symbol_type): Do not print IFUNC for ELFOSABI_NONE.\n+\n 2019-07-23  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/binutils-all/objcopy.exp (elf64): Correct object"
    },
    {
      "sha": "1ba4bcb57936f8edda37810f7f10c4df6d41c004",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 56,
      "deletions": 43,
      "changes": 99,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df3a023bd614133fe69afb02cd0e8f3e590a36a9/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df3a023bd614133fe69afb02cd0e8f3e590a36a9/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=df3a023bd614133fe69afb02cd0e8f3e590a36a9",
      "patch": "@@ -3879,22 +3879,6 @@ get_parisc_segment_type (unsigned long type)\n {\n   switch (type)\n     {\n-    case PT_HP_TLS:\t\treturn \"HP_TLS\";\n-    case PT_HP_CORE_NONE:\treturn \"HP_CORE_NONE\";\n-    case PT_HP_CORE_VERSION:\treturn \"HP_CORE_VERSION\";\n-    case PT_HP_CORE_KERNEL:\treturn \"HP_CORE_KERNEL\";\n-    case PT_HP_CORE_COMM:\treturn \"HP_CORE_COMM\";\n-    case PT_HP_CORE_PROC:\treturn \"HP_CORE_PROC\";\n-    case PT_HP_CORE_LOADABLE:\treturn \"HP_CORE_LOADABLE\";\n-    case PT_HP_CORE_STACK:\treturn \"HP_CORE_STACK\";\n-    case PT_HP_CORE_SHM:\treturn \"HP_CORE_SHM\";\n-    case PT_HP_CORE_MMF:\treturn \"HP_CORE_MMF\";\n-    case PT_HP_PARALLEL:\treturn \"HP_PARALLEL\";\n-    case PT_HP_FASTBIND:\treturn \"HP_FASTBIND\";\n-    case PT_HP_OPT_ANNOT:\treturn \"HP_OPT_ANNOT\";\n-    case PT_HP_HSL_ANNOT:\treturn \"HP_HSL_ANNOT\";\n-    case PT_HP_STACK:\t\treturn \"HP_STACK\";\n-    case PT_HP_CORE_UTSNAME:\treturn \"HP_CORE_UTSNAME\";\n     case PT_PARISC_ARCHEXT:\treturn \"PARISC_ARCHEXT\";\n     case PT_PARISC_UNWIND:\treturn \"PARISC_UNWIND\";\n     case PT_PARISC_WEAKORDER:\treturn \"PARISC_WEAKORDER\";\n@@ -3909,10 +3893,6 @@ get_ia64_segment_type (unsigned long type)\n     {\n     case PT_IA_64_ARCHEXT:\treturn \"IA_64_ARCHEXT\";\n     case PT_IA_64_UNWIND:\treturn \"IA_64_UNWIND\";\n-    case PT_HP_TLS:\t\treturn \"HP_TLS\";\n-    case PT_IA_64_HP_OPT_ANOT:\treturn \"HP_OPT_ANNOT\";\n-    case PT_IA_64_HP_HSL_ANOT:\treturn \"HP_HSL_ANNOT\";\n-    case PT_IA_64_HP_STACK:\treturn \"HP_STACK\";\n     default:                    return NULL;\n     }\n }\n@@ -3927,6 +3907,44 @@ get_tic6x_segment_type (unsigned long type)\n     }\n }\n \n+static const char *\n+get_hpux_segment_type (unsigned long type, unsigned e_machine)\n+{\n+  if (e_machine == EM_PARISC)\n+    switch (type)\n+      {\n+      case PT_HP_TLS:\t\treturn \"HP_TLS\";\n+      case PT_HP_CORE_NONE:\treturn \"HP_CORE_NONE\";\n+      case PT_HP_CORE_VERSION:\treturn \"HP_CORE_VERSION\";\n+      case PT_HP_CORE_KERNEL:\treturn \"HP_CORE_KERNEL\";\n+      case PT_HP_CORE_COMM:\treturn \"HP_CORE_COMM\";\n+      case PT_HP_CORE_PROC:\treturn \"HP_CORE_PROC\";\n+      case PT_HP_CORE_LOADABLE:\treturn \"HP_CORE_LOADABLE\";\n+      case PT_HP_CORE_STACK:\treturn \"HP_CORE_STACK\";\n+      case PT_HP_CORE_SHM:\treturn \"HP_CORE_SHM\";\n+      case PT_HP_CORE_MMF:\treturn \"HP_CORE_MMF\";\n+      case PT_HP_PARALLEL:\treturn \"HP_PARALLEL\";\n+      case PT_HP_FASTBIND:\treturn \"HP_FASTBIND\";\n+      case PT_HP_OPT_ANNOT:\treturn \"HP_OPT_ANNOT\";\n+      case PT_HP_HSL_ANNOT:\treturn \"HP_HSL_ANNOT\";\n+      case PT_HP_STACK:\t\treturn \"HP_STACK\";\n+      case PT_HP_CORE_UTSNAME:\treturn \"HP_CORE_UTSNAME\";\n+      default:\t\t\treturn NULL;\n+      }\n+\n+  if (e_machine == EM_IA_64)\n+    switch (type)\n+      {\n+      case PT_HP_TLS:\t\t return \"HP_TLS\";\n+      case PT_IA_64_HP_OPT_ANOT: return \"HP_OPT_ANNOT\";\n+      case PT_IA_64_HP_HSL_ANOT: return \"HP_HSL_ANNOT\";\n+      case PT_IA_64_HP_STACK:\t return \"HP_STACK\";\n+      default:\t\t\t return NULL;\n+      }\n+\n+  return NULL;\n+}\n+\n static const char *\n get_solaris_segment_type (unsigned long type)\n {\n@@ -3965,12 +3983,7 @@ get_segment_type (Filedata * filedata, unsigned long p_type)\n     case PT_GNU_PROPERTY: return \"GNU_PROPERTY\";\n \n     default:\n-      if (p_type >= PT_GNU_MBIND_LO && p_type <= PT_GNU_MBIND_HI)\n-\t{\n-\t  sprintf (buff, \"GNU_MBIND+%#lx\",\n-\t\t   p_type - PT_GNU_MBIND_LO);\n-\t}\n-      else if ((p_type >= PT_LOPROC) && (p_type <= PT_HIPROC))\n+      if ((p_type >= PT_LOPROC) && (p_type <= PT_HIPROC))\n \t{\n \t  const char * result;\n \n@@ -4011,24 +4024,28 @@ get_segment_type (Filedata * filedata, unsigned long p_type)\n \t}\n       else if ((p_type >= PT_LOOS) && (p_type <= PT_HIOS))\n \t{\n-\t  const char * result;\n+\t  const char * result = NULL;\n \n-\t  switch (filedata->file_header.e_machine)\n+\t  switch (filedata->file_header.e_ident[EI_OSABI])\n \t    {\n-\t    case EM_PARISC:\n-\t      result = get_parisc_segment_type (p_type);\n+\t    case ELFOSABI_GNU:\n+\t    case ELFOSABI_FREEBSD:\n+\t      if (p_type >= PT_GNU_MBIND_LO && p_type <= PT_GNU_MBIND_HI)\n+\t\t{\n+\t\t  sprintf (buff, \"GNU_MBIND+%#lx\", p_type - PT_GNU_MBIND_LO);\n+\t\t  result = buff;\n+\t\t}\n \t      break;\n-\t    case EM_IA_64:\n-\t      result = get_ia64_segment_type (p_type);\n+\t    case ELFOSABI_HPUX:\n+\t      result = get_hpux_segment_type (p_type,\n+\t\t\t\t\t      filedata->file_header.e_machine);\n+\t      break;\n+\t    case ELFOSABI_SOLARIS:\n+\t      result = get_solaris_segment_type (p_type);\n \t      break;\n \t    default:\n-\t      if (filedata->file_header.e_ident[EI_OSABI] == ELFOSABI_SOLARIS)\n-\t\tresult = get_solaris_segment_type (p_type);\n-\t      else\n-\t\tresult = NULL;\n \t      break;\n \t    }\n-\n \t  if (result != NULL)\n \t    return result;\n \n@@ -11052,9 +11069,7 @@ get_symbol_binding (Filedata * filedata, unsigned int binding)\n       else if (binding >= STB_LOOS && binding <= STB_HIOS)\n \t{\n \t  if (binding == STB_GNU_UNIQUE\n-\t      && (filedata->file_header.e_ident[EI_OSABI] == ELFOSABI_GNU\n-\t\t  /* GNU is still using the default value 0.  */\n-\t\t  || filedata->file_header.e_ident[EI_OSABI] == ELFOSABI_NONE))\n+\t      && filedata->file_header.e_ident[EI_OSABI] == ELFOSABI_GNU)\n \t    return \"UNIQUE\";\n \t  snprintf (buff, sizeof (buff), _(\"<OS specific>: %d\"), binding);\n \t}\n@@ -11106,9 +11121,7 @@ get_symbol_type (Filedata * filedata, unsigned int type)\n \n \t  if (type == STT_GNU_IFUNC\n \t      && (filedata->file_header.e_ident[EI_OSABI] == ELFOSABI_GNU\n-\t\t  || filedata->file_header.e_ident[EI_OSABI] == ELFOSABI_FREEBSD\n-\t\t  /* GNU is still using the default value 0.  */\n-\t\t  || filedata->file_header.e_ident[EI_OSABI] == ELFOSABI_NONE))\n+\t\t  || filedata->file_header.e_ident[EI_OSABI] == ELFOSABI_FREEBSD))\n \t    return \"IFUNC\";\n \n \t  snprintf (buff, sizeof (buff), _(\"<OS specific>: %d\"), type);"
    },
    {
      "sha": "19ca4644061c2d1fe1612a33ccf4299d9339d247",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df3a023bd614133fe69afb02cd0e8f3e590a36a9/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df3a023bd614133fe69afb02cd0e8f3e590a36a9/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=df3a023bd614133fe69afb02cd0e8f3e590a36a9",
      "patch": "@@ -1,3 +1,18 @@\n+2019-07-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/obj-elf.c (obj_elf_change_section): Don't emit a fatal\n+\terror for non-SHF_ALLOC SHF_GNU_MBIND here.\n+\t(obj_elf_parse_section_letters): Return SHF_GNU_MBIND in new\n+\tgnu_attr param.\n+\t(obj_elf_section): Adjust obj_elf_parse_section_letters call.\n+\tFormatting.  Set SHF_GNU_MBIND and elf_osabi from gnu_attr.\n+\tEmit normal error for non-SHF_ALLOC SHF_GNU_MBIND and wrong osabi.\n+\t(obj_elf_type): Set elf_osabi for ifunc.\n+\t* testsuite/gas/elf/section12a.d: xfail msp430 and hpux.\n+\t* testsuite/gas/elf/section12b.d: Likewise.\n+\t* testsuite/gas/elf/section13.d: Likewise.\n+\t* testsuite/gas/elf/section13.l: Adjust expected error.\n+\n 2019-07-23  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/gas/elf/section12a.d: Don't skip for rx."
    },
    {
      "sha": "fd2c943771fdb8bce67ef9e63bcc09596acea43d",
      "filename": "gas/config/obj-elf.c",
      "status": "modified",
      "additions": 43,
      "deletions": 26,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df3a023bd614133fe69afb02cd0e8f3e590a36a9/gas/config/obj-elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df3a023bd614133fe69afb02cd0e8f3e590a36a9/gas/config/obj-elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/obj-elf.c?ref=df3a023bd614133fe69afb02cd0e8f3e590a36a9",
      "patch": "@@ -706,9 +706,6 @@ obj_elf_change_section (const char *name,\n \tattr |= ssect->attr;\n     }\n \n-  if ((attr & (SHF_ALLOC | SHF_GNU_MBIND)) == SHF_GNU_MBIND)\n-    as_fatal (_(\"SHF_ALLOC isn't set for GNU_MBIND section: %s\"), name);\n-\n   /* Convert ELF type and flags to BFD flags.  */\n   flags = (SEC_RELOC\n \t   | ((attr & SHF_WRITE) ? 0 : SEC_READONLY)\n@@ -785,7 +782,8 @@ obj_elf_change_section (const char *name,\n }\n \n static bfd_vma\n-obj_elf_parse_section_letters (char *str, size_t len, bfd_boolean *is_clone)\n+obj_elf_parse_section_letters (char *str, size_t len,\n+\t\t\t       bfd_boolean *is_clone, bfd_vma *gnu_attr)\n {\n   bfd_vma attr = 0;\n   *is_clone = FALSE;\n@@ -819,7 +817,7 @@ obj_elf_parse_section_letters (char *str, size_t len, bfd_boolean *is_clone)\n \t  attr |= SHF_TLS;\n \t  break;\n \tcase 'd':\n-\t  attr |= SHF_GNU_MBIND;\n+\t  *gnu_attr |= SHF_GNU_MBIND;\n \t  break;\n \tcase '?':\n \t  *is_clone = TRUE;\n@@ -1011,6 +1009,7 @@ obj_elf_section (int push)\n   char *beg;\n   int type, dummy;\n   bfd_vma attr;\n+  bfd_vma gnu_attr;\n   int entsize;\n   int linkonce;\n   subsegT new_subsection = -1;\n@@ -1041,6 +1040,7 @@ obj_elf_section (int push)\n     return;\n   type = SHT_NULL;\n   attr = 0;\n+  gnu_attr = 0;\n   group_name = NULL;\n   entsize = 0;\n   linkonce = 0;\n@@ -1077,7 +1077,8 @@ obj_elf_section (int push)\n \t      ignore_rest_of_line ();\n \t      return;\n \t    }\n-\t  attr |= obj_elf_parse_section_letters (beg, strlen (beg), &is_clone);\n+\t  attr |= obj_elf_parse_section_letters (beg, strlen (beg),\n+\t\t\t\t\t\t &is_clone, &gnu_attr);\n \n \t  SKIP_WHITESPACE ();\n \t  if (*input_line_pointer == ',')\n@@ -1103,14 +1104,14 @@ obj_elf_section (int push)\n \t\t  ++input_line_pointer;\n \n \t\t  if (ISDIGIT (* input_line_pointer))\n-\t\t    {\n-\t\t      type = strtoul (input_line_pointer, & input_line_pointer, 0);\n-\t\t    }\n+\t\t    type = strtoul (input_line_pointer, &input_line_pointer, 0);\n \t\t  else\n \t\t    {\n \t\t      c = get_symbol_name (& beg);\n \t\t      (void) restore_line_pointer (c);\n-\t\t      type = obj_elf_section_type (beg, input_line_pointer - beg, TRUE);\n+\t\t      type = obj_elf_section_type (beg,\n+\t\t\t\t\t\t   input_line_pointer - beg,\n+\t\t\t\t\t\t   TRUE);\n \t\t    }\n \t\t}\n \t      else\n@@ -1177,7 +1178,7 @@ obj_elf_section (int push)\n \t\t}\n \t    }\n \n-\t  if ((attr & SHF_GNU_MBIND) != 0 && *input_line_pointer == ',')\n+\t  if ((gnu_attr & SHF_GNU_MBIND) != 0 && *input_line_pointer == ',')\n \t    {\n \t      ++input_line_pointer;\n \t      SKIP_WHITESPACE ();\n@@ -1211,7 +1212,8 @@ obj_elf_section (int push)\n \t      c = get_symbol_name (& beg);\n \t      (void) restore_line_pointer (c);\n \n-\t      attr |= obj_elf_section_word (beg, input_line_pointer - beg, & type);\n+\t      attr |= obj_elf_section_word (beg, input_line_pointer - beg,\n+\t\t\t\t\t    &type);\n \n \t      SKIP_WHITESPACE ();\n \t    }\n@@ -1226,6 +1228,23 @@ obj_elf_section (int push)\n   obj_elf_change_section (name, type, info, attr, entsize, group_name,\n \t\t\t  linkonce, push);\n \n+  if ((gnu_attr & SHF_GNU_MBIND) != 0)\n+    {\n+      struct elf_backend_data *bed;\n+\n+      if ((attr & SHF_ALLOC) == 0)\n+\tas_bad (_(\"SHF_ALLOC isn't set for GNU_MBIND section: %s\"), name);\n+\n+      bed = (struct elf_backend_data *) get_elf_backend_data (stdoutput);\n+      if (bed->elf_osabi == ELFOSABI_NONE)\n+\tbed->elf_osabi = ELFOSABI_GNU;\n+      else if (bed->elf_osabi != ELFOSABI_GNU\n+\t       && bed->elf_osabi != ELFOSABI_FREEBSD)\n+\tas_bad (_(\"GNU_MBIND section is supported only by GNU \"\n+\t\t  \"and FreeBSD targets\"));\n+    }\n+  elf_section_flags (now_seg) |= gnu_attr;\n+\n   if (push && new_subsection != -1)\n     subseg_set (now_seg, new_subsection);\n }\n@@ -2032,30 +2051,28 @@ obj_elf_type (int ignore ATTRIBUTE_UNUSED)\n \t   || strcmp (type_name, \"10\") == 0\n \t   || strcmp (type_name, \"STT_GNU_IFUNC\") == 0)\n     {\n-      const struct elf_backend_data *bed;\n-\n-      bed = get_elf_backend_data (stdoutput);\n-      if (!(bed->elf_osabi == ELFOSABI_GNU\n-\t    || bed->elf_osabi == ELFOSABI_FREEBSD\n-\t    /* GNU is still using the default value 0.  */\n-\t    || bed->elf_osabi == ELFOSABI_NONE))\n-\tas_bad (_(\"symbol type \\\"%s\\\" is supported only by GNU and FreeBSD targets\"),\n-\t\ttype_name);\n+      struct elf_backend_data *bed;\n+\n+      bed = (struct elf_backend_data *) get_elf_backend_data (stdoutput);\n+      if (bed->elf_osabi == ELFOSABI_NONE)\n+\tbed->elf_osabi = ELFOSABI_GNU;\n+      else if (bed->elf_osabi != ELFOSABI_GNU\n+\t       && bed->elf_osabi != ELFOSABI_FREEBSD)\n+\tas_bad (_(\"symbol type \\\"%s\\\" is supported only by GNU \"\n+\t\t  \"and FreeBSD targets\"), type_name);\n       type = BSF_FUNCTION | BSF_GNU_INDIRECT_FUNCTION;\n     }\n   else if (strcmp (type_name, \"gnu_unique_object\") == 0)\n     {\n       struct elf_backend_data *bed;\n \n       bed = (struct elf_backend_data *) get_elf_backend_data (stdoutput);\n-      if (!(bed->elf_osabi == ELFOSABI_GNU\n-\t    /* GNU is still using the default value 0.  */\n-\t    || bed->elf_osabi == ELFOSABI_NONE))\n+      if (bed->elf_osabi == ELFOSABI_NONE)\n+\tbed->elf_osabi = ELFOSABI_GNU;\n+      else if (bed->elf_osabi != ELFOSABI_GNU)\n \tas_bad (_(\"symbol type \\\"%s\\\" is supported only by GNU targets\"),\n \t\ttype_name);\n       type = BSF_OBJECT | BSF_GNU_UNIQUE;\n-      /* PR 10549: Always set OSABI field to GNU for objects containing unique symbols.  */\n-      bed->elf_osabi = ELFOSABI_GNU;\n     }\n #ifdef md_elf_symbol_type\n   else if ((type = md_elf_symbol_type (type_name, sym, elfsym)) != -1)"
    },
    {
      "sha": "2b6aa3e8f02186e80a218760be17ee7447eccf7d",
      "filename": "gas/testsuite/gas/elf/section12a.d",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df3a023bd614133fe69afb02cd0e8f3e590a36a9/gas/testsuite/gas/elf/section12a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df3a023bd614133fe69afb02cd0e8f3e590a36a9/gas/testsuite/gas/elf/section12a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section12a.d?ref=df3a023bd614133fe69afb02cd0e8f3e590a36a9",
      "patch": "@@ -2,6 +2,8 @@\n #as: --no-pad-sections\n #readelf: -Sg --wide\n #name: mbind sections\n+# msp430 and hpux do not support SHF_GNU_MBIND\n+#xfail: msp430-*-* *-*-hpux*\n \n #...\n   \\[[ 0-9]+\\] \\.mbind\\.data[ \t]+PROGBITS[ \t]+0+0 0+[0-9a-f]+ 0+1 00 WAD  0   0  1"
    },
    {
      "sha": "fcbb6974f8b6cf1afeaa04da20e28261b40ffa13",
      "filename": "gas/testsuite/gas/elf/section12b.d",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df3a023bd614133fe69afb02cd0e8f3e590a36a9/gas/testsuite/gas/elf/section12b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df3a023bd614133fe69afb02cd0e8f3e590a36a9/gas/testsuite/gas/elf/section12b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section12b.d?ref=df3a023bd614133fe69afb02cd0e8f3e590a36a9",
      "patch": "@@ -2,8 +2,9 @@\n #as: --no-pad-sections\n #objdump: -s\n #name: mbind section contents\n-# The RX port annoyingly reorders the sections so that they do not match the sequence expected below.\n-#skip: rx-*-*\n+# RX annoyingly reorders the sections so that they do not match the sequence\n+# expected below.  msp430 and hpux do not support SHF_GNU_MBIND\n+#xfail: rx-*-* msp430-*-* *-*-hpux*\n \n #...\n Contents of section .mbind.data:"
    },
    {
      "sha": "9f4fe36f6ee5207b52adfa3d0259bd0d31220dda",
      "filename": "gas/testsuite/gas/elf/section13.d",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df3a023bd614133fe69afb02cd0e8f3e590a36a9/gas/testsuite/gas/elf/section13.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df3a023bd614133fe69afb02cd0e8f3e590a36a9/gas/testsuite/gas/elf/section13.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section13.d?ref=df3a023bd614133fe69afb02cd0e8f3e590a36a9",
      "patch": "@@ -1,2 +1,3 @@\n #name: mbind sections without SHF_ALLOC\n #error_output: section13.l\n+#xfail: msp430-*-* *-*-hpux*"
    },
    {
      "sha": "3ddf54a7ea21bea9cbfa33401fdbc626b46e8772",
      "filename": "gas/testsuite/gas/elf/section13.l",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df3a023bd614133fe69afb02cd0e8f3e590a36a9/gas/testsuite/gas/elf/section13.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df3a023bd614133fe69afb02cd0e8f3e590a36a9/gas/testsuite/gas/elf/section13.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section13.l?ref=df3a023bd614133fe69afb02cd0e8f3e590a36a9",
      "patch": "@@ -1,2 +1,2 @@\n [^:]*: Assembler messages:\n-[^:]*:1: Fatal error: SHF_ALLOC isn't set for GNU_MBIND section: .mbind.data\n+[^:]*:1: Error: SHF_ALLOC isn't set for GNU_MBIND section: .mbind.data"
    },
    {
      "sha": "7d7b6643137bb0f763e5ebb23da3a62c6799755b",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df3a023bd614133fe69afb02cd0e8f3e590a36a9/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df3a023bd614133fe69afb02cd0e8f3e590a36a9/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=df3a023bd614133fe69afb02cd0e8f3e590a36a9",
      "patch": "@@ -1,3 +1,8 @@\n+2019-07-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* emultempl/elf32.em (gld${EMULATION_NAME}_place_orphan): Condition\n+\tSHF_GNU_MBIND on osabi.  Set output elf_gnu_osabi_mbind.\n+\n 2019-07-23  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/ld-elf/size-1.d,"
    },
    {
      "sha": "5cdd1bd667b07598fb4f5fd2489f716dc5c97d24",
      "filename": "ld/emultempl/elf32.em",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/df3a023bd614133fe69afb02cd0e8f3e590a36a9/ld/emultempl/elf32.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/df3a023bd614133fe69afb02cd0e8f3e590a36a9/ld/emultempl/elf32.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/elf32.em?ref=df3a023bd614133fe69afb02cd0e8f3e590a36a9",
      "patch": "@@ -2131,6 +2131,7 @@ gld${EMULATION_NAME}_place_orphan (asection *s,\n       && elfinput\n       && elfoutput\n       && (s->flags & SEC_ALLOC) != 0\n+      && (elf_tdata (s->owner)->has_gnu_osabi & elf_gnu_osabi_mbind) != 0\n       && (elf_section_flags (s) & SHF_GNU_MBIND) != 0)\n     {\n       /* Find the output mbind section with the same type, attributes\n@@ -2168,6 +2169,7 @@ gld${EMULATION_NAME}_place_orphan (asection *s,\n \tsecname = \".mbind.rodata\";\n       else\n \tsecname = \".mbind.text\";\n+      elf_tdata (link_info.output_bfd)->has_gnu_osabi |= elf_gnu_osabi_mbind;\n     }\n \n   /* Look through the script to see where to place this section.  The"
    }
  ]
}