{
  "sha": "e8a387fb5f91cdb9674f19703c0e7bfbaf895a84",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZThhMzg3ZmI1ZjkxY2RiOTY3NGYxOTcwM2MwZTdiZmJhZjg5NWE4NA==",
  "commit": {
    "author": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2020-07-28T09:36:10Z"
    },
    "committer": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2020-08-05T14:02:30Z"
    },
    "message": "MSP430: sim: Fix incorrect simulation of unsigned widening multiply\n\nOperand sizes used for simulation of MSP430 hardware multiply\noperations are not aligned with the sizes used on the target, resulting\nin the simulator storing signed operands with too much precision.\n\nAdditionally, simulation of unsigned multiplication is missing explicit\ncasts to prevent any implicit sign extension.\n\ngcc.c-torture/execute/pr91450-1.c uses unsigned widening multiplication\nof 32-bit operands -4 and 2, to produce a 64-bit result:\n0xffff fffc * 0x2 = 0x1 ffff fff8\n\nIf -4 is stored in 64-bit precision, then the multiplication is\nessentially signed and the result is -8 in 64-bit precision\n(0xffff ffff ffff fffc), which is not correct.\n\nsim/msp430/ChangeLog:\n\n\t* msp430-sim.c (put_op): For unsigned multiplication, explicitly cast\n\toperands to the unsigned type before multiplying.\n\t* msp430-sim.h (struct msp430_cpu_state): Fix types used to store hwmult\n\toperands.\n\nsim/testsuite/sim/msp430/ChangeLog:\n\n\t* mpyull_hwmult.s: New test.",
    "tree": {
      "sha": "162d6decb4ea00d04438bf2e2ce3620cd8b1b9da",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/162d6decb4ea00d04438bf2e2ce3620cd8b1b9da"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e8a387fb5f91cdb9674f19703c0e7bfbaf895a84",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e8a387fb5f91cdb9674f19703c0e7bfbaf895a84",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e8a387fb5f91cdb9674f19703c0e7bfbaf895a84",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e8a387fb5f91cdb9674f19703c0e7bfbaf895a84/comments",
  "author": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5555c86d3e85e85d76555acdb955aba062beb02f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5555c86d3e85e85d76555acdb955aba062beb02f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5555c86d3e85e85d76555acdb955aba062beb02f"
    }
  ],
  "stats": {
    "total": 102,
    "additions": 90,
    "deletions": 12
  },
  "files": [
    {
      "sha": "41da2a734bd05cad8deb08bd8c12bf2fc5a60f08",
      "filename": "sim/msp430/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8a387fb5f91cdb9674f19703c0e7bfbaf895a84/sim/msp430/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8a387fb5f91cdb9674f19703c0e7bfbaf895a84/sim/msp430/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/msp430/ChangeLog?ref=e8a387fb5f91cdb9674f19703c0e7bfbaf895a84",
      "patch": "@@ -1,3 +1,10 @@\n+2020-08-05  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* msp430-sim.c (put_op): For unsigned multiplication, explicitly cast\n+\toperands to the unsigned type before multiplying.\n+\t* msp430-sim.h (struct msp430_cpu_state): Fix types used to store hwmult\n+\toperands.\n+\n 2020-01-22  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* msp430-sim.c (msp430_step_once): Ignore the carry flag when executing"
    },
    {
      "sha": "a330c6caf5dba7dd747426b31c16ef0ff9ea8b30",
      "filename": "sim/msp430/msp430-sim.c",
      "status": "modified",
      "additions": 20,
      "deletions": 8,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8a387fb5f91cdb9674f19703c0e7bfbaf895a84/sim/msp430/msp430-sim.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8a387fb5f91cdb9674f19703c0e7bfbaf895a84/sim/msp430/msp430-sim.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/msp430/msp430-sim.c?ref=e8a387fb5f91cdb9674f19703c0e7bfbaf895a84",
      "patch": "@@ -566,30 +566,39 @@ put_op (SIM_DESC sd, MSP430_Opcode_Decoded *opc, int n, int val)\n \t      switch (HWMULT (sd, hwmult_type))\n \t\t{\n \t\tcase UNSIGN_32:\n-\t\t  HWMULT (sd, hwmult_result) = HWMULT (sd, hwmult_op1) * HWMULT (sd, hwmult_op2);\n-\t\t  HWMULT (sd, hwmult_signed_result) = (signed) HWMULT (sd, hwmult_result);\n+\t\t  a = HWMULT (sd, hwmult_op1);\n+\t\t  b = HWMULT (sd, hwmult_op2);\n+\t\t  /* For unsigned 32-bit multiplication of 16-bit operands, an\n+\t\t     explicit cast is required to prevent any implicit\n+\t\t     sign-extension.  */\n+\t\t  HWMULT (sd, hwmult_result) = (unsigned32) a * (unsigned32) b;\n+\t\t  HWMULT (sd, hwmult_signed_result) = a * b;\n \t\t  HWMULT (sd, hwmult_accumulator) = HWMULT (sd, hwmult_signed_accumulator) = 0;\n \t\t  break;\n \n \t\tcase SIGN_32:\n \t\t  a = sign_ext (HWMULT (sd, hwmult_op1), 16);\n \t\t  b = sign_ext (HWMULT (sd, hwmult_op2), 16);\n \t\t  HWMULT (sd, hwmult_signed_result) = a * b;\n-\t\t  HWMULT (sd, hwmult_result) = (unsigned) HWMULT (sd, hwmult_signed_result);\n+\t\t  HWMULT (sd, hwmult_result) = (unsigned32) a * (unsigned32) b;\n \t\t  HWMULT (sd, hwmult_accumulator) = HWMULT (sd, hwmult_signed_accumulator) = 0;\n \t\t  break;\n \n \t\tcase UNSIGN_MAC_32:\n-\t\t  HWMULT (sd, hwmult_accumulator) += HWMULT (sd, hwmult_op1) * HWMULT (sd, hwmult_op2);\n-\t\t  HWMULT (sd, hwmult_signed_accumulator) += HWMULT (sd, hwmult_op1) * HWMULT (sd, hwmult_op2);\n+\t\t  a = HWMULT (sd, hwmult_op1);\n+\t\t  b = HWMULT (sd, hwmult_op2);\n+\t\t  HWMULT (sd, hwmult_accumulator)\n+\t\t    += (unsigned32) a * (unsigned32) b;\n+\t\t  HWMULT (sd, hwmult_signed_accumulator) += a * b;\n \t\t  HWMULT (sd, hwmult_result) = HWMULT (sd, hwmult_accumulator);\n \t\t  HWMULT (sd, hwmult_signed_result) = HWMULT (sd, hwmult_signed_accumulator);\n \t\t  break;\n \n \t\tcase SIGN_MAC_32:\n \t\t  a = sign_ext (HWMULT (sd, hwmult_op1), 16);\n \t\t  b = sign_ext (HWMULT (sd, hwmult_op2), 16);\n-\t\t  HWMULT (sd, hwmult_accumulator) += a * b;\n+\t\t  HWMULT (sd, hwmult_accumulator)\n+\t\t    += (unsigned32) a * (unsigned32) b;\n \t\t  HWMULT (sd, hwmult_signed_accumulator) += a * b;\n \t\t  HWMULT (sd, hwmult_result) = HWMULT (sd, hwmult_accumulator);\n \t\t  HWMULT (sd, hwmult_signed_result) = HWMULT (sd, hwmult_signed_accumulator);\n@@ -648,10 +657,13 @@ put_op (SIM_DESC sd, MSP430_Opcode_Decoded *opc, int n, int val)\n \t      switch (HWMULT (sd, hw32mult_type))\n \t\t{\n \t\tcase UNSIGN_64:\n-\t\t  HWMULT (sd, hw32mult_result) = HWMULT (sd, hw32mult_op1) * HWMULT (sd, hw32mult_op2);\n+\t\t  HWMULT (sd, hw32mult_result)\n+\t\t    = (unsigned64) HWMULT (sd, hw32mult_op1)\n+\t\t    * (unsigned64) HWMULT (sd, hw32mult_op2);\n \t\t  break;\n \t\tcase SIGN_64:\n-\t\t  HWMULT (sd, hw32mult_result) = sign_ext (HWMULT (sd, hw32mult_op1), 32)\n+\t\t  HWMULT (sd, hw32mult_result)\n+\t\t    = sign_ext (HWMULT (sd, hw32mult_op1), 32)\n \t\t    * sign_ext (HWMULT (sd, hw32mult_op2), 32);\n \t\t  break;\n \t\t}"
    },
    {
      "sha": "7c486c2f3502fa9d572e8a07349d96e844c17d78",
      "filename": "sim/msp430/msp430-sim.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8a387fb5f91cdb9674f19703c0e7bfbaf895a84/sim/msp430/msp430-sim.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8a387fb5f91cdb9674f19703c0e7bfbaf895a84/sim/msp430/msp430-sim.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/msp430/msp430-sim.h?ref=e8a387fb5f91cdb9674f19703c0e7bfbaf895a84",
      "patch": "@@ -31,16 +31,16 @@ struct msp430_cpu_state\n   int cio_buffer;\n \n   hwmult_type  hwmult_type;\n-  unsigned32   hwmult_op1;\n-  unsigned32   hwmult_op2;\n+  unsigned16   hwmult_op1;\n+  unsigned16   hwmult_op2;\n   unsigned32   hwmult_result;\n   signed32     hwmult_signed_result;\n   unsigned32   hwmult_accumulator;\n   signed32     hwmult_signed_accumulator;\n \n   hw32mult_type  hw32mult_type;\n-  unsigned64     hw32mult_op1;\n-  unsigned64     hw32mult_op2;\n+  unsigned32     hw32mult_op1;\n+  unsigned32     hw32mult_op2;\n   unsigned64     hw32mult_result;\n };\n "
    },
    {
      "sha": "cd6b1952adcbd6d3987d5cb1edf4abb25b9d2f8d",
      "filename": "sim/testsuite/sim/msp430/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8a387fb5f91cdb9674f19703c0e7bfbaf895a84/sim/testsuite/sim/msp430/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8a387fb5f91cdb9674f19703c0e7bfbaf895a84/sim/testsuite/sim/msp430/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/msp430/ChangeLog?ref=e8a387fb5f91cdb9674f19703c0e7bfbaf895a84",
      "patch": "@@ -1,3 +1,7 @@\n+2020-08-05  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* mpyull_hwmult.s: New test.\n+\n 2020-01-22  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* rrux.s: New test."
    },
    {
      "sha": "911fa115709c7b76ee606d3bcb9727ae2226d87f",
      "filename": "sim/testsuite/sim/msp430/mpyull_hwmult.s",
      "status": "added",
      "additions": 55,
      "deletions": 0,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e8a387fb5f91cdb9674f19703c0e7bfbaf895a84/sim/testsuite/sim/msp430/mpyull_hwmult.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e8a387fb5f91cdb9674f19703c0e7bfbaf895a84/sim/testsuite/sim/msp430/mpyull_hwmult.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/sim/msp430/mpyull_hwmult.s?ref=e8a387fb5f91cdb9674f19703c0e7bfbaf895a84",
      "patch": "@@ -0,0 +1,55 @@\n+# Test that unsigned widening multiplication of 32-bit operands to produce a\n+# 64-bit result is simulated correctly, when using 32-bit or F5series hardware\n+# multiply functionality.\n+# 0xffff fffc * 0x2 = 0x1 ffff fff8\n+# mach: msp430\n+\n+# 32-bit hwmult register addresses\n+.set MPY32L,\t0x0140\n+.set MPY32H,\t0x0142\n+.set OP2L,\t0x0150\n+.set OP2H,\t0x0152\n+.set RES0,\t0x0154\n+.set RES1,\t0x0156\n+.set RES2,\t0x0158\n+.set RES3,\t0x015A\n+\n+# F5series hwmult register addresses\n+.set MPY32L_F5,\t\t0x04D0\n+.set MPY32H_F5,\t\t0x04D2\n+.set OP2L_F5,\t\t0x04E0\n+.set OP2H_F5,\t\t0x04E2\n+.set RES0_F5,\t\t0x04E4\n+.set RES1_F5,\t\t0x04E6\n+.set RES2_F5,\t\t0x04E8\n+.set RES3_F5,\t\t0x04EA\n+\n+.include \"testutils.inc\"\n+\n+\tstart\n+\n+\t; Test 32bit hwmult\n+\tMOV.W\t#2, &MPY32L\t\t; Load operand 1 Low into multiplier\n+\tMOV.W\t#0, &MPY32H\t\t; Load operand 1 High into multiplier\n+\tMOV.W\t#-4, &OP2L\t\t; Load operand 2 Low into multiplier\n+\tMOV.W\t#-1, &OP2H\t\t; Load operand 2 High, trigger MPY\n+\n+\tCMP.W\t#-8, &RES0\t{ JNE\t.L5\n+\tCMP.W\t#-1, &RES1\t{ JNE\t.L5\n+\tCMP.W\t#1, &RES2\t{ JNE\t.L5\n+\tCMP.W\t#0, &RES3\t{ JNE\t.L5\n+\n+\t; Test f5series hwmult\n+\tMOV.W\t#2, &MPY32L_F5\n+\tMOV.W\t#0, &MPY32H_F5\n+\tMOV.W\t#-4, &OP2L_F5\n+\tMOV.W\t#-1, &OP2H_F5\n+\n+\tCMP.W\t#-8, &RES0_F5\t{ JNE\t.L5\n+\tCMP.W\t#-1, &RES1_F5\t{ JNE\t.L5\n+\tCMP.W\t#1, &RES2_F5\t{ JNE\t.L5\n+\tCMP.W\t#0, &RES3_F5\t{ JEQ\t.L6\n+.L5:\n+\tfail\n+.L6:\n+\tpass"
    }
  ]
}