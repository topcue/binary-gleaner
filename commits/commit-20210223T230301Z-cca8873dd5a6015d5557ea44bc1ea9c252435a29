{
  "sha": "cca8873dd5a6015d5557ea44bc1ea9c252435a29",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2NhODg3M2RkNWE2MDE1ZDU1NTdlYTQ0YmMxZWE5YzI1MjQzNWEyOQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-02-22T23:07:39Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-02-23T23:03:01Z"
    },
    "message": "PR27456, lstat in rename.c on MinGW\n\n\tPR 27456\n\t* rename.c: Tidy throughout.\n\t(smart_rename): Always copy.  Remove windows specific code.",
    "tree": {
      "sha": "5fd1316c3d16d5ac419830b6682dd9a87cba62ad",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5fd1316c3d16d5ac419830b6682dd9a87cba62ad"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cca8873dd5a6015d5557ea44bc1ea9c252435a29",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cca8873dd5a6015d5557ea44bc1ea9c252435a29",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cca8873dd5a6015d5557ea44bc1ea9c252435a29",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cca8873dd5a6015d5557ea44bc1ea9c252435a29/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "08ac57714cd20e528efe9b4e169f3a2778cf6e30",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/08ac57714cd20e528efe9b4e169f3a2778cf6e30",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/08ac57714cd20e528efe9b4e169f3a2778cf6e30"
    }
  ],
  "stats": {
    "total": 117,
    "additions": 41,
    "deletions": 76
  },
  "files": [
    {
      "sha": "80bdf92c9a14763f26f9007f9d921816fd0c5ce5",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cca8873dd5a6015d5557ea44bc1ea9c252435a29/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cca8873dd5a6015d5557ea44bc1ea9c252435a29/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=cca8873dd5a6015d5557ea44bc1ea9c252435a29",
      "patch": "@@ -1,3 +1,9 @@\n+2021-02-24  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 27456\n+\t* rename.c: Tidy throughout.\n+\t(smart_rename): Always copy.  Remove windows specific code.\n+\n 2021-02-20  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/lib/binutils-common.exp: Whitespace fixes throughout."
    },
    {
      "sha": "72a9323d72c44207d55609e023486373302a717c",
      "filename": "binutils/rename.c",
      "status": "modified",
      "additions": 35,
      "deletions": 76,
      "changes": 111,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cca8873dd5a6015d5557ea44bc1ea9c252435a29/binutils/rename.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cca8873dd5a6015d5557ea44bc1ea9c252435a29/binutils/rename.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/rename.c?ref=cca8873dd5a6015d5557ea44bc1ea9c252435a29",
      "patch": "@@ -24,14 +24,9 @@\n \n #ifdef HAVE_GOOD_UTIME_H\n #include <utime.h>\n-#else /* ! HAVE_GOOD_UTIME_H */\n-#ifdef HAVE_UTIMES\n+#elif defined HAVE_UTIMES\n #include <sys/time.h>\n-#endif /* HAVE_UTIMES */\n-#endif /* ! HAVE_GOOD_UTIME_H */\n-\n-#if ! defined (_WIN32) || defined (__CYGWIN32__)\n-static int simple_copy (const char *, const char *);\n+#endif\n \n /* The number of bytes to copy at once.  */\n #define COPY_BUF 8192\n@@ -82,7 +77,6 @@ simple_copy (const char *from, const char *to)\n     }\n   return 0;\n }\n-#endif /* __CYGWIN32__ or not _WIN32 */\n \n /* Set the times of the file DESTINATION to be the same as those in\n    STATBUF.  */\n@@ -91,87 +85,52 @@ void\n set_times (const char *destination, const struct stat *statbuf)\n {\n   int result;\n-\n-  {\n #ifdef HAVE_GOOD_UTIME_H\n-    struct utimbuf tb;\n-\n-    tb.actime = statbuf->st_atime;\n-    tb.modtime = statbuf->st_mtime;\n-    result = utime (destination, &tb);\n-#else /* ! HAVE_GOOD_UTIME_H */\n-#ifndef HAVE_UTIMES\n-    long tb[2];\n-\n-    tb[0] = statbuf->st_atime;\n-    tb[1] = statbuf->st_mtime;\n-    result = utime (destination, tb);\n-#else /* HAVE_UTIMES */\n-    struct timeval tv[2];\n-\n-    tv[0].tv_sec = statbuf->st_atime;\n-    tv[0].tv_usec = 0;\n-    tv[1].tv_sec = statbuf->st_mtime;\n-    tv[1].tv_usec = 0;\n-    result = utimes (destination, tv);\n-#endif /* HAVE_UTIMES */\n-#endif /* ! HAVE_GOOD_UTIME_H */\n-  }\n+  struct utimbuf tb;\n+\n+  tb.actime = statbuf->st_atime;\n+  tb.modtime = statbuf->st_mtime;\n+  result = utime (destination, &tb);\n+#elif defined HAVE_UTIMES\n+  struct timeval tv[2];\n+\n+  tv[0].tv_sec = statbuf->st_atime;\n+  tv[0].tv_usec = 0;\n+  tv[1].tv_sec = statbuf->st_mtime;\n+  tv[1].tv_usec = 0;\n+  result = utimes (destination, tv);\n+#else\n+  long tb[2];\n+\n+  tb[0] = statbuf->st_atime;\n+  tb[1] = statbuf->st_mtime;\n+  result = utime (destination, tb);\n+#endif\n \n   if (result != 0)\n     non_fatal (_(\"%s: cannot set time: %s\"), destination, strerror (errno));\n }\n \n-/* Rename FROM to TO, copying if TO exists.  TARGET_STAT has the file status\n-   that, if non-NULL, is used to fix up timestamps after rename.  Return 0 if\n-   ok, -1 if error.  */\n+/* Copy FROM to TO.  TARGET_STAT has the file status that, if non-NULL,\n+   is used to fix up timestamps.  Return 0 if ok, -1 if error.\n+   At one time this function renamed files, but file permissions are\n+   tricky to update given the number of different schemes used by\n+   various systems.  So now we just copy.  */\n \n int\n smart_rename (const char *from, const char *to,\n-\t      struct stat *target_stat ATTRIBUTE_UNUSED)\n+\t      struct stat *target_stat)\n {\n-  int ret = 0;\n-  struct stat to_stat;\n-  bfd_boolean exists;\n-\n-  exists = lstat (to, &to_stat) == 0;\n-\n-#if defined (_WIN32) && !defined (__CYGWIN32__)\n-  /* Win32, unlike unix, will not erase `to' in `rename(from, to)' but\n-     fail instead.  Also, chown is not present.  */\n-\n-  if (exists)\n-    remove (to);\n+  int ret;\n \n-  ret = rename (from, to);\n+  ret = simple_copy (from, to);\n   if (ret != 0)\n-    {\n-      /* We have to clean up here.  */\n-      non_fatal (_(\"unable to rename '%s'; reason: %s\"), to, strerror (errno));\n-      unlink (from);\n-    }\n-#else\n-  /* Avoid a full copy and use rename if TO does not exist.  */\n-  if (!exists)\n-    {\n-      if ((ret = rename (from, to)) != 0)\n-\t{\n-\t  /* We have to clean up here.  */\n-\t  non_fatal (_(\"unable to rename '%s'; reason: %s\"), to, strerror (errno));\n-\t  unlink (from);\n-\t}\n-    }\n-  else\n-    {\n-      ret = simple_copy (from, to);\n-      if (ret != 0)\n-\tnon_fatal (_(\"unable to copy file '%s'; reason: %s\"), to, strerror (errno));\n+    non_fatal (_(\"unable to copy file '%s'; reason: %s\"),\n+\t       to, strerror (errno));\n \n-      if (target_stat != NULL)\n-\tset_times (to, target_stat);\n-      unlink (from);\n-    }\n-#endif /* _WIN32 && !__CYGWIN32__ */\n+  if (target_stat != NULL)\n+    set_times (to, target_stat);\n+  unlink (from);\n \n   return ret;\n }"
    }
  ]
}