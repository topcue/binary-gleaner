{
  "sha": "268e4f09144c48e02f01d82ab3aab359457df214",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjY4ZTRmMDkxNDRjNDhlMDJmMDFkODJhYjNhYWIzNTk0NTdkZjIxNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-11-01T22:21:04Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-12-12T22:50:52Z"
    },
    "message": "Make the objfile destructor private\n\nThe idea behind this is that, in the long run, some code will need to\nbe able to hold onto an objfile after it is unlinked from the program\nspace.  In particular, this is needed for some functionality to be\nmoved to worker threads -- otherwise the objfile can be deleted while\nstill in use.\n\nSo, this makes ~objfile private, replacing it with an \"unlink\" method,\nmaking it more obvious which operation is intended at the calling\npoints.\n\ngdb/ChangeLog\n2019-12-12  Tom Tromey  <tom@tromey.com>\n\n\t* symfile.c (syms_from_objfile_1): Use objfile_up.\n\t(syms_from_objfile_1, remove_symbol_file_command): Call unlink\n\tmethod.\n\t(reread_symbols): Use objfile_up.\n\t* solib.c (update_solib_list, reload_shared_libraries_1): Call\n\tunlink method.\n\t* objfiles.h (struct objfile) <~objfile>: Now private.\n\t<unlink>: New method.\n\t(struct objfile_deleter): New.\n\t(objfile_up): New typedef.\n\t* objfiles.c (objfile::unlink): New method.\n\t(free_objfile_separate_debug, free_all_objfiles)\n\t(objfile_purge_solibs): Use it.\n\t* jit.c (jit_unregister_code): Remove.\n\t(jit_inferior_exit_hook, jit_event_handler): Call unlink on\n\tobjfile.\n\t* compile/compile-object-run.c (do_module_cleanup): Call unlink on\n\tobjfile.\n\t* compile/compile-object-load.c (compile_object_load): Use\n\tobjfile_up.\n\nChange-Id: I934bee70b26b8b24e1735828fb1e60fe8a05714f",
    "tree": {
      "sha": "8685bc0ca92837f6f41a97059378b1b12d44cf96",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8685bc0ca92837f6f41a97059378b1b12d44cf96"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/268e4f09144c48e02f01d82ab3aab359457df214",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/268e4f09144c48e02f01d82ab3aab359457df214",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/268e4f09144c48e02f01d82ab3aab359457df214",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/268e4f09144c48e02f01d82ab3aab359457df214/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f65fe5704af56aca58fd5547d0841a9512e540af",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f65fe5704af56aca58fd5547d0841a9512e540af",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f65fe5704af56aca58fd5547d0841a9512e540af"
    }
  ],
  "stats": {
    "total": 94,
    "additions": 66,
    "deletions": 28
  },
  "files": [
    {
      "sha": "07d679b0edc86848cfcbde7536e631e8f75063ce",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/268e4f09144c48e02f01d82ab3aab359457df214/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/268e4f09144c48e02f01d82ab3aab359457df214/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=268e4f09144c48e02f01d82ab3aab359457df214",
      "patch": "@@ -1,3 +1,26 @@\n+2019-12-12  Tom Tromey  <tom@tromey.com>\n+\n+\t* symfile.c (syms_from_objfile_1): Use objfile_up.\n+\t(syms_from_objfile_1, remove_symbol_file_command): Call unlink\n+\tmethod.\n+\t(reread_symbols): Use objfile_up.\n+\t* solib.c (update_solib_list, reload_shared_libraries_1): Call\n+\tunlink method.\n+\t* objfiles.h (struct objfile) <~objfile>: Now private.\n+\t<unlink>: New method.\n+\t(struct objfile_deleter): New.\n+\t(objfile_up): New typedef.\n+\t* objfiles.c (objfile::unlink): New method.\n+\t(free_objfile_separate_debug, free_all_objfiles)\n+\t(objfile_purge_solibs): Use it.\n+\t* jit.c (jit_unregister_code): Remove.\n+\t(jit_inferior_exit_hook, jit_event_handler): Call unlink on\n+\tobjfile.\n+\t* compile/compile-object-run.c (do_module_cleanup): Call unlink on\n+\tobjfile.\n+\t* compile/compile-object-load.c (compile_object_load): Use\n+\tobjfile_up.\n+\n 2019-12-12  Tom Tromey  <tom@tromey.com>\n \n \t* symfile.c (symbol_file_add_with_addrs): Pass \"parent\" to"
    },
    {
      "sha": "c8762ad6595a956cf5b34c7bc5bb19c1507d272a",
      "filename": "gdb/compile/compile-object-load.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/268e4f09144c48e02f01d82ab3aab359457df214/gdb/compile/compile-object-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/268e4f09144c48e02f01d82ab3aab359457df214/gdb/compile/compile-object-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-object-load.c?ref=268e4f09144c48e02f01d82ab3aab359457df214",
      "patch": "@@ -632,9 +632,9 @@ compile_object_load (const compile_file_names &file_names,\n \n   /* SYMFILE_VERBOSE is not passed even if FROM_TTY, user is not interested in\n      \"Reading symbols from ...\" message for automatically generated file.  */\n-  std::unique_ptr<struct objfile> objfile_holder\n-    (symbol_file_add_from_bfd (abfd.get (), filename.get (),\n-\t\t\t       0, NULL, 0, NULL));\n+  objfile_up objfile_holder (symbol_file_add_from_bfd (abfd.get (),\n+\t\t\t\t\t\t       filename.get (),\n+\t\t\t\t\t\t       0, NULL, 0, NULL));\n   objfile = objfile_holder.get ();\n \n   func_sym = lookup_global_symbol_from_objfile (objfile,"
    },
    {
      "sha": "72f3060243e8094901e0be206f38bd3ed1740968",
      "filename": "gdb/compile/compile-object-run.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/268e4f09144c48e02f01d82ab3aab359457df214/gdb/compile/compile-object-run.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/268e4f09144c48e02f01d82ab3aab359457df214/gdb/compile/compile-object-run.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-object-run.c?ref=268e4f09144c48e02f01d82ab3aab359457df214",
      "patch": "@@ -86,7 +86,7 @@ do_module_cleanup (void *arg, int registers_valid)\n     if ((objfile->flags & OBJF_USERLOADED) == 0\n         && (strcmp (objfile_name (objfile), data->objfile_name_string) == 0))\n       {\n-\tdelete objfile;\n+\tobjfile->unlink ();\n \n \t/* It may be a bit too pervasive in this dummy_frame dtor callback.  */\n \tclear_symtab_users (0);"
    },
    {
      "sha": "59da4e0cee1d8c2e42d680f3ba3bb73ab3d86bd4",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 2,
      "deletions": 14,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/268e4f09144c48e02f01d82ab3aab359457df214/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/268e4f09144c48e02f01d82ab3aab359457df214/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=268e4f09144c48e02f01d82ab3aab359457df214",
      "patch": "@@ -951,18 +951,6 @@ jit_register_code (struct gdbarch *gdbarch,\n     jit_bfd_try_read_symtab (code_entry, entry_addr, gdbarch);\n }\n \n-/* This function unregisters JITed code and frees the corresponding\n-   objfile.  */\n-\n-static void\n-jit_unregister_code (struct objfile *objfile)\n-{\n-  if (jit_debug)\n-    fprintf_unfiltered (gdb_stdlog, \"jit_unregister_code (%s)\\n\",\n-\t\t\thost_address_to_string (objfile));\n-  delete objfile;\n-}\n-\n /* Look up the objfile with this code entry address.  */\n \n static struct objfile *\n@@ -1380,7 +1368,7 @@ jit_inferior_exit_hook (struct inferior *inf)\n \t= (struct jit_objfile_data *) objfile_data (objf, jit_objfile_data);\n \n       if (objf_data != NULL && objf_data->addr != 0)\n-\tjit_unregister_code (objf);\n+\tobjf->unlink ();\n     }\n }\n \n@@ -1414,7 +1402,7 @@ jit_event_handler (struct gdbarch *gdbarch)\n \t\t\t     \"entry at address: %s\\n\"),\n \t\t\t   paddress (gdbarch, entry_addr));\n       else\n-        jit_unregister_code (objf);\n+        objf->unlink ();\n \n       break;\n     default:"
    },
    {
      "sha": "a635f7783e6e9e545ae141bb3292592040bc1306",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 11,
      "deletions": 3,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/268e4f09144c48e02f01d82ab3aab359457df214/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/268e4f09144c48e02f01d82ab3aab359457df214/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=268e4f09144c48e02f01d82ab3aab359457df214",
      "patch": "@@ -553,6 +553,14 @@ objfile::make (bfd *bfd_, const char *name_, objfile_flags flags_,\n   return result;\n }\n \n+/* See objfiles.h.  */\n+\n+void\n+objfile::unlink ()\n+{\n+  delete this;\n+}\n+\n /* Free all separate debug objfile of OBJFILE, but don't free OBJFILE\n    itself.  */\n \n@@ -564,7 +572,7 @@ free_objfile_separate_debug (struct objfile *objfile)\n   for (child = objfile->separate_debug_objfile; child;)\n     {\n       struct objfile *next_child = child->separate_debug_objfile_link;\n-      delete child;\n+      child->unlink ();\n       child = next_child;\n     }\n }\n@@ -687,7 +695,7 @@ free_all_objfiles (void)\n     gdb_assert (so->objfile == NULL);\n \n   for (objfile *objfile : current_program_space->objfiles_safe ())\n-    delete objfile;\n+    objfile->unlink ();\n   clear_symtab_users (0);\n }\n \f\n@@ -996,7 +1004,7 @@ objfile_purge_solibs (void)\n \t be soon.  */\n \n       if (!(objf->flags & OBJF_USERLOADED) && (objf->flags & OBJF_SHARED))\n-\tdelete objf;\n+\tobjf->unlink ();\n     }\n }\n "
    },
    {
      "sha": "49b4627d67cc5e27370d24cbcc86fc369e15cae6",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 20,
      "deletions": 1,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/268e4f09144c48e02f01d82ab3aab359457df214/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/268e4f09144c48e02f01d82ab3aab359457df214/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=268e4f09144c48e02f01d82ab3aab359457df214",
      "patch": "@@ -399,13 +399,18 @@ struct objfile\n   /* The only way to create an objfile is to call objfile::make.  */\n   objfile (bfd *, const char *, objfile_flags);\n \n+  /* The only way to free an objfile is via 'unlink'.  */\n+  ~objfile ();\n+\n public:\n \n   /* Create an objfile.  */\n   static objfile *make (bfd *bfd_, const char *name_, objfile_flags flags_,\n \t\t\tobjfile *parent = nullptr);\n \n-  ~objfile ();\n+  /* Remove an objfile from the current program space, and free\n+     it.  */\n+  void unlink ();\n \n   DISABLE_COPY_AND_ASSIGN (objfile);\n \n@@ -637,6 +642,20 @@ struct objfile\n   htab_up static_links;\n };\n \n+/* A deleter for objfile.  */\n+\n+struct objfile_deleter\n+{\n+  void operator() (objfile *ptr) const\n+  {\n+    ptr->unlink ();\n+  }\n+};\n+\n+/* A unique pointer that holds an objfile.  */\n+\n+typedef std::unique_ptr<objfile, objfile_deleter> objfile_up;\n+\n /* Declarations for functions defined in objfiles.c */\n \n extern struct gdbarch *get_objfile_arch (const struct objfile *);"
    },
    {
      "sha": "7eea732d61574cc9bb08b5da82c19d74011ae65e",
      "filename": "gdb/solib.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/268e4f09144c48e02f01d82ab3aab359457df214/gdb/solib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/268e4f09144c48e02f01d82ab3aab359457df214/gdb/solib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.c?ref=268e4f09144c48e02f01d82ab3aab359457df214",
      "patch": "@@ -835,7 +835,7 @@ update_solib_list (int from_tty)\n \t  /* Unless the user loaded it explicitly, free SO's objfile.  */\n \t  if (gdb->objfile && ! (gdb->objfile->flags & OBJF_USERLOADED)\n \t      && !solib_used (gdb))\n-\t    delete gdb->objfile;\n+\t    gdb->objfile->unlink ();\n \n \t  /* Some targets' section tables might be referring to\n \t     sections from so->abfd; remove them.  */\n@@ -1312,7 +1312,7 @@ reload_shared_libraries_1 (int from_tty)\n \t{\n \t  if (so->objfile && ! (so->objfile->flags & OBJF_USERLOADED)\n \t      && !solib_used (so))\n-\t    delete so->objfile;\n+\t    so->objfile->unlink ();\n \t  remove_target_sections (so);\n \t  clear_so (so);\n \t}"
    },
    {
      "sha": "965237191ad197e8c173f07c62c052ead83b95df",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/268e4f09144c48e02f01d82ab3aab359457df214/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/268e4f09144c48e02f01d82ab3aab359457df214/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=268e4f09144c48e02f01d82ab3aab359457df214",
      "patch": "@@ -940,7 +940,7 @@ syms_from_objfile_1 (struct objfile *objfile,\n      if an error occurs during symbol reading.  */\n   gdb::optional<clear_symtab_users_cleanup> defer_clear_users;\n \n-  std::unique_ptr<struct objfile> objfile_holder (objfile);\n+  objfile_up objfile_holder (objfile);\n \n   /* If ADDRS is NULL, put together a dummy address list.\n      We now establish the convention that an addr of zero means\n@@ -958,7 +958,7 @@ syms_from_objfile_1 (struct objfile *objfile,\n \n       if (symfile_objfile != NULL)\n \t{\n-\t  delete symfile_objfile;\n+\t  symfile_objfile->unlink ();\n \t  gdb_assert (symfile_objfile == NULL);\n \t}\n \n@@ -2438,7 +2438,7 @@ remove_symbol_file_command (const char *args, int from_tty)\n \t\t objfile_name (objf)))\n     error (_(\"Not confirmed.\"));\n \n-  delete objf;\n+  objf->unlink ();\n   clear_symtab_users (0);\n }\n \n@@ -2495,7 +2495,7 @@ reread_symbols (void)\n \t  /* If we get an error, blow away this objfile (not sure if\n \t     that is the correct response for things like shared\n \t     libraries).  */\n-\t  std::unique_ptr<struct objfile> objfile_holder (objfile);\n+\t  objfile_up objfile_holder (objfile);\n \n \t  /* We need to do this whenever any symbols go away.  */\n \t  clear_symtab_users_cleanup defer_clear_users (0);"
    }
  ]
}