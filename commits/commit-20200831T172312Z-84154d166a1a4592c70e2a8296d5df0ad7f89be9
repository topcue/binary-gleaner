{
  "sha": "84154d166a1a4592c70e2a8296d5df0ad7f89be9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODQxNTRkMTY2YTFhNDU5MmM3MGUyYTgyOTZkNWRmMGFkN2Y4OWJlOQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-08-31T17:23:12Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-08-31T17:23:12Z"
    },
    "message": "gdb: introduce explicit outer frame id kind\n\nIn the following patch, we'll need to easily differentiate the frame_id\nof the outer frame (or the frame id of a frame inlined into the outer\nframe) from a simply invalid frame id.\n\nCurrently, the frame id of the outer frame has `stack_status` set to\nFID_STACK_INVALID plus special_addr_p set.  A frame inlined into the\nouter frame would also have `artificial_depth` set to greater than one.\nThat makes the job of differntiating the frame id of the outer frame (or a\nframe inlined into the outer frame) cumbersome.\n\nTo make it easier, give the outer frame id its own frame_id_stack_status\nenum value.  outer_frame_id then becomes very similar to\nsentinel_frame_id, another \"special\" frame id value.\n\nIn frame_id_p, we don't need a special case for the outer frame id, as\nit's no long a special case of FID_STACK_INVALID.  Same goes for\nframe_id_eq.\n\nSo in the end, FID_STACK_OUTER isn't even used (except in\nfprint_frame_id).  But that's expected: all the times we wanted to\nidentify an outer frame was to differentiate it from an otherwise\ninvalid frame.  Since their frame_id_stack_status value is different\nnow, that is done naturally.\n\ngdb/ChangeLog:\n\n\t* frame.h (enum frame_id_stack_status) <FID_STACK_OUTER>: New.\n\t* frame.c (fprint_frame_id): Handle FID_STACK_OUTER.\n\t(outer_frame_id): Use FID_STACK_OUTER instead of\n\tFID_STACK_INVALID.\n\t(frame_id_p): Don't check for outer_frame_id.\n\nChange-Id: I654e7f936349debc4f04f7f684b15e71a0c37619",
    "tree": {
      "sha": "345797bd9e9d6319c482b8f082a4ab26c08d46c6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/345797bd9e9d6319c482b8f082a4ab26c08d46c6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/84154d166a1a4592c70e2a8296d5df0ad7f89be9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84154d166a1a4592c70e2a8296d5df0ad7f89be9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/84154d166a1a4592c70e2a8296d5df0ad7f89be9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/84154d166a1a4592c70e2a8296d5df0ad7f89be9/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8efaf6b352ef4f88d26e130726e1099442956134",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8efaf6b352ef4f88d26e130726e1099442956134",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8efaf6b352ef4f88d26e130726e1099442956134"
    }
  ],
  "stats": {
    "total": 36,
    "additions": 20,
    "deletions": 16
  },
  "files": [
    {
      "sha": "3a0d371a87cca059ed5c5074c275cba210e53f28",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84154d166a1a4592c70e2a8296d5df0ad7f89be9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84154d166a1a4592c70e2a8296d5df0ad7f89be9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=84154d166a1a4592c70e2a8296d5df0ad7f89be9",
      "patch": "@@ -1,3 +1,11 @@\n+2020-08-31  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* frame.h (enum frame_id_stack_status) <FID_STACK_OUTER>: New.\n+\t* frame.c (fprint_frame_id): Handle FID_STACK_OUTER.\n+\t(outer_frame_id): Use FID_STACK_OUTER instead of\n+\tFID_STACK_INVALID.\n+\t(frame_id_p): Don't check for outer_frame_id.\n+\n 2020-08-31  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* frame-unwind.c (frame_unwind_got_optimized): Don't set"
    },
    {
      "sha": "54f4c613c9e870d857e3c9c01bc9ac6b7f738360",
      "filename": "gdb/frame.c",
      "status": "modified",
      "additions": 5,
      "deletions": 14,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84154d166a1a4592c70e2a8296d5df0ad7f89be9/gdb/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84154d166a1a4592c70e2a8296d5df0ad7f89be9/gdb/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.c?ref=84154d166a1a4592c70e2a8296d5df0ad7f89be9",
      "patch": "@@ -396,8 +396,11 @@ fprint_frame_id (struct ui_file *file, struct frame_id id)\n     fprintf_unfiltered (file, \"stack=<unavailable>\");\n   else if (id.stack_status == FID_STACK_SENTINEL)\n     fprintf_unfiltered (file, \"stack=<sentinel>\");\n+  else if (id.stack_status == FID_STACK_OUTER)\n+    fprintf_unfiltered (file, \"stack=<outer>\");\n   else\n     fprintf_unfiltered (file, \"stack=%s\", hex_string (id.stack_addr));\n+\n   fprintf_unfiltered (file, \",\");\n \n   fprint_field (file, \"code\", id.code_addr_p, id.code_addr);\n@@ -672,7 +675,7 @@ frame_unwind_caller_id (struct frame_info *next_frame)\n \n const struct frame_id null_frame_id = { 0 }; /* All zeros.  */\n const struct frame_id sentinel_frame_id = { 0, 0, 0, FID_STACK_SENTINEL, 0, 1, 0 };\n-const struct frame_id outer_frame_id = { 0, 0, 0, FID_STACK_INVALID, 0, 1, 0 };\n+const struct frame_id outer_frame_id = { 0, 0, 0, FID_STACK_OUTER, 0, 1, 0 };\n \n struct frame_id\n frame_id_build_special (CORE_ADDR stack_addr, CORE_ADDR code_addr,\n@@ -746,10 +749,6 @@ frame_id_p (frame_id l)\n   /* The frame is valid iff it has a valid stack address.  */\n   bool p = l.stack_status != FID_STACK_INVALID;\n \n-  /* outer_frame_id is also valid.  */\n-  if (!p && memcmp (&l, &outer_frame_id, sizeof (l)) == 0)\n-    p = true;\n-\n   if (frame_debug)\n     {\n       fprintf_unfiltered (gdb_stdlog, \"{ frame_id_p (l=\");\n@@ -774,15 +773,7 @@ frame_id_eq (frame_id l, frame_id r)\n {\n   bool eq;\n \n-  if (l.stack_status == FID_STACK_INVALID && l.special_addr_p\n-      && r.stack_status == FID_STACK_INVALID && r.special_addr_p)\n-    /* The outermost frame marker is equal to itself.  This is the\n-       dodgy thing about outer_frame_id, since between execution steps\n-       we might step into another function - from which we can't\n-       unwind either.  More thought required to get rid of\n-       outer_frame_id.  */\n-    eq = true;\n-  else if (l.stack_status == FID_STACK_INVALID\n+  if (l.stack_status == FID_STACK_INVALID\n \t   || r.stack_status == FID_STACK_INVALID)\n     /* Like a NaN, if either ID is invalid, the result is false.\n        Note that a frame ID is invalid iff it is the null frame ID.  */"
    },
    {
      "sha": "3ceb7b32effaf9c7cc12905e67af2a6100bb2736",
      "filename": "gdb/frame.h",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/84154d166a1a4592c70e2a8296d5df0ad7f89be9/gdb/frame.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/84154d166a1a4592c70e2a8296d5df0ad7f89be9/gdb/frame.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.h?ref=84154d166a1a4592c70e2a8296d5df0ad7f89be9",
      "patch": "@@ -85,8 +85,7 @@ struct frame_print_options;\n \n enum frame_id_stack_status\n {\n-  /* Stack address is invalid.  E.g., this frame is the outermost\n-     (i.e., _start), and the stack hasn't been setup yet.  */\n+  /* Stack address is invalid.  */\n   FID_STACK_INVALID = 0,\n \n   /* Stack address is valid, and is found in the stack_addr field.  */\n@@ -95,6 +94,12 @@ enum frame_id_stack_status\n   /* Sentinel frame.  */\n   FID_STACK_SENTINEL = 2,\n \n+  /* Outer frame.  Since a frame's stack address is typically defined as the\n+     value the stack pointer had prior to the activation of the frame, an outer\n+     frame doesn't have a stack address.  The frame ids of frames inlined in the\n+     outer frame are also of this type.  */\n+  FID_STACK_OUTER = 3,\n+\n   /* Stack address is unavailable.  I.e., there's a valid stack, but\n      we don't know where it is (because memory or registers we'd\n      compute it from were not collected).  */"
    }
  ]
}