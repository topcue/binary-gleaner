{
  "sha": "4f7bc5edbd3ffaad52022849d6263d982c23ff3c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGY3YmM1ZWRiZDNmZmFhZDUyMDIyODQ5ZDYyNjNkOTgyYzIzZmYzYw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-05-08T20:26:11Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-05-08T20:26:11Z"
    },
    "message": "Don't re-process a DIE in read_lexical_block_scope\n\nA customer reported a crash in the DWARF reader.\n\nInvestigation showed that the crash occurred in an unusual scenario: a\nfunction was lexically scoped within some other function -- but the\ninner function inlined the outer function and referred to its DIE via\nDW_AT_abstract_origin.  With the executable in question,\ninherit_abstract_dies could eventually call read_lexical_block_scope,\nwhich in turn could recurse into process_die, to process a DIE that\nwas already being read, triggering an assert.\n\nThis came up once before; see:\n\nhttps://www.sourceware.org/ml/gdb-patches/2014-02/msg00652.html\n\nHowever, in this case, I don't have an easy way to reproduce.  So,\nthere is no test case.\n\nI did experiment with the failing executable.  This patch fixes the\nbug and doesn't seem to cause other issues.  For example, I can still\nset breakpoints on the relevant functions.\n\ngdb/ChangeLog\n2020-05-08  Tom Tromey  <tromey@adacore.com>\n\n\t* dwarf2/read.c (read_lexical_block_scope): Don't process a DIE\n\talready being processed.",
    "tree": {
      "sha": "d1a4c5ee8cd682341f6488f2600ed6c652924737",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d1a4c5ee8cd682341f6488f2600ed6c652924737"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4f7bc5edbd3ffaad52022849d6263d982c23ff3c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4f7bc5edbd3ffaad52022849d6263d982c23ff3c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4f7bc5edbd3ffaad52022849d6263d982c23ff3c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4f7bc5edbd3ffaad52022849d6263d982c23ff3c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8be4b118a9343197291d23c666f6a8ad24bce76a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8be4b118a9343197291d23c666f6a8ad24bce76a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8be4b118a9343197291d23c666f6a8ad24bce76a"
    }
  ],
  "stats": {
    "total": 16,
    "additions": 15,
    "deletions": 1
  },
  "files": [
    {
      "sha": "07bc950502032aae2ba5780d5f93e8846a3e3d48",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4f7bc5edbd3ffaad52022849d6263d982c23ff3c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4f7bc5edbd3ffaad52022849d6263d982c23ff3c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4f7bc5edbd3ffaad52022849d6263d982c23ff3c",
      "patch": "@@ -1,3 +1,8 @@\n+2020-05-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* dwarf2/read.c (read_lexical_block_scope): Don't process a DIE\n+\talready being processed.\n+\n 2020-05-08  Tom Tromey  <tom@tromey.com>\n \n \t* printcmd.c (struct display) <next>: Remove."
    },
    {
      "sha": "439b889144b96bf9fbac71802021e155a4e2d413",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4f7bc5edbd3ffaad52022849d6263d982c23ff3c/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4f7bc5edbd3ffaad52022849d6263d982c23ff3c/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=4f7bc5edbd3ffaad52022849d6263d982c23ff3c",
      "patch": "@@ -13102,7 +13102,16 @@ read_lexical_block_scope (struct die_info *die, struct dwarf2_cu *cu)\n       for (child_die = die->child;\n \t   child_die != NULL && child_die->tag;\n \t   child_die = child_die->sibling)\n-\tprocess_die (child_die, cu);\n+\t{\n+\t  /* We might already be processing this DIE.  This can happen\n+\t     in an unusual circumstance -- where a subroutine A\n+\t     appears lexically in another subroutine B, but A actually\n+\t     inlines B.  The recursion is broken here, rather than in\n+\t     inherit_abstract_dies, because it seems better to simply\n+\t     drop concrete children here.  */\n+\t  if (!child_die->in_process)\n+\t    process_die (child_die, cu);\n+\t}\n       return;\n     case PC_BOUNDS_INVALID:\n       return;"
    }
  ]
}