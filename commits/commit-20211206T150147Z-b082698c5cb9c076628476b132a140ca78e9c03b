{
  "sha": "b082698c5cb9c076628476b132a140ca78e9c03b",
  "node_id": "C_kwDOANOeidoAKGIwODI2OThjNWNiOWMwNzY2Mjg0NzZiMTMyYTE0MGNhNzhlOWMwM2I",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-12-06T15:01:47Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-12-06T15:01:47Z"
    },
    "message": "[gdb/testsuite] Use precise align in gdb.arch/i386-{avx,sse}.exp\n\nTest-cases gdb.arch/i386-{avx,sse}.exp use assembly instructions that require\nthe memory operands to be aligned to a certain boundary, and the test-cases\nuse C11's _Alignas to make that happen.\n\nThe draw-back of using _Alignas is that while it does enforce a minimum\nalignment, the actual alignment may be bigger, which makes the following\nscenario possible:\n- copy say, gdb.arch/i386-avx.c as basis for a new test-case\n- run the test-case and observe a PASS\n- commit the new test-case in the supposition that the test-case is correct\n  and well-tested\n- run later into a failure on a different test setup (which may be a setup\n  where reproduction and investigation is more difficult and time-consuming),\n  and find out that the specified alignment was incorrect and should have been\n  updated to say, 64 bytes.  The initial PASS occurred only because the actual\n  alignment happened to be greater than required.\n\nThe idea of having precise alignment as a means of having more predictable\nexecution which allows flushing out bugs earlier, has been filed as PR\ngcc/103095.\n\nAdd a new file lib/precise-aligned-alloc.c with functions\nprecise_aligned_alloc and precise_aligned_dup, to support precise alignment.\n\nUse precise_aligned_dup in aforementioned test-cases to:\n- verify that the specified alignment is indeed sufficient, rather\n  than too little but accidentally over-aligned.\n- prevent the same type of problems in any new test-cases based on these\n\nTested on x86_64-linux, with both gcc and clang.",
    "tree": {
      "sha": "73528b1aa825c443e5329e7ce3bf6c8ddf6c8dff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/73528b1aa825c443e5329e7ce3bf6c8ddf6c8dff"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b082698c5cb9c076628476b132a140ca78e9c03b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b082698c5cb9c076628476b132a140ca78e9c03b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b082698c5cb9c076628476b132a140ca78e9c03b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b082698c5cb9c076628476b132a140ca78e9c03b/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "197a63068b10d50c01fbe024a45d47cd25a907e3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/197a63068b10d50c01fbe024a45d47cd25a907e3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/197a63068b10d50c01fbe024a45d47cd25a907e3"
    }
  ],
  "stats": {
    "total": 108,
    "additions": 106,
    "deletions": 2
  },
  "files": [
    {
      "sha": "7936e1ad1f6e29264bf596de4b431e169b807a34",
      "filename": "gdb/testsuite/gdb.arch/i386-avx.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b082698c5cb9c076628476b132a140ca78e9c03b/gdb/testsuite/gdb.arch/i386-avx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b082698c5cb9c076628476b132a140ca78e9c03b/gdb/testsuite/gdb.arch/i386-avx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/i386-avx.c?ref=b082698c5cb9c076628476b132a140ca78e9c03b",
      "patch": "@@ -28,7 +28,7 @@ typedef struct {\n } v8sf_t;\n \n \n-v8sf_t data[] =\n+v8sf_t data_orig[] =\n   {\n     { {  0.0,  0.125,  0.25,  0.375,  0.50,  0.625,  0.75,  0.875 } },\n     { {  1.0,  1.125,  1.25,  1.375,  1.50,  1.625,  1.75,  1.875 } },\n@@ -50,10 +50,16 @@ v8sf_t data[] =\n #endif\n   };\n \n+#include \"../lib/precise-aligned-alloc.c\"\n \n int\n main (int argc, char **argv)\n {\n+  void *allocated_ptr;\n+  v8sf_t *data\n+    = precise_aligned_dup (ALIGN, sizeof (data_orig), &allocated_ptr,\n+\t\t\t   data_orig);\n+\n   asm (\"vmovaps 0(%0), %%ymm0\\n\\t\"\n        \"vmovaps 32(%0), %%ymm1\\n\\t\"\n        \"vmovaps 64(%0), %%ymm2\\n\\t\"\n@@ -110,5 +116,7 @@ main (int argc, char **argv)\n \n   puts (\"Bye!\"); /* second breakpoint here */\n \n+  free (allocated_ptr);\n+\n   return 0;\n }"
    },
    {
      "sha": "e51f88b4ed71cf024f3667437106ffa528069413",
      "filename": "gdb/testsuite/gdb.arch/i386-sse.c",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b082698c5cb9c076628476b132a140ca78e9c03b/gdb/testsuite/gdb.arch/i386-sse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b082698c5cb9c076628476b132a140ca78e9c03b/gdb/testsuite/gdb.arch/i386-sse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/i386-sse.c?ref=b082698c5cb9c076628476b132a140ca78e9c03b",
      "patch": "@@ -28,7 +28,7 @@ typedef struct {\n } v4sf_t;\n \n \n-v4sf_t data[] =\n+v4sf_t data_orig[] =\n   {\n     { {  0.0,  0.25,  0.50,  0.75 } },\n     { {  1.0,  1.25,  1.50,  1.75 } },\n@@ -65,9 +65,16 @@ have_sse (void)\n     return 0;\n }\n \n+#include \"../lib/precise-aligned-alloc.c\"\n+\n int\n main (int argc, char **argv)\n {\n+  void *allocated_ptr;\n+  v4sf_t *data\n+    = precise_aligned_dup (ALIGN, sizeof (data_orig), &allocated_ptr,\n+\t\t\t   data_orig);\n+\n   if (have_sse ())\n     {\n       asm (\"movaps 0(%0), %%xmm0\\n\\t\"\n@@ -127,5 +134,7 @@ main (int argc, char **argv)\n       puts (\"Bye!\"); /* second breakpoint here */\n     }\n \n+  free (allocated_ptr);\n+\n   return 0;\n }"
    },
    {
      "sha": "418118cb9da3608ee2dc07b91c56fc23b13dbc18",
      "filename": "gdb/testsuite/lib/precise-aligned-alloc.c",
      "status": "added",
      "additions": 87,
      "deletions": 0,
      "changes": 87,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b082698c5cb9c076628476b132a140ca78e9c03b/gdb/testsuite/lib/precise-aligned-alloc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b082698c5cb9c076628476b132a140ca78e9c03b/gdb/testsuite/lib/precise-aligned-alloc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/precise-aligned-alloc.c?ref=b082698c5cb9c076628476b132a140ca78e9c03b",
      "patch": "@@ -0,0 +1,87 @@\n+/* This test file is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+*/\n+\n+#include <stdlib.h>\n+#include <assert.h>\n+#include <string.h>\n+#include <stdint.h>\n+\n+/* Return true if address P is ALIGNMENT-byte aligned.  */\n+\n+static int\n+is_aligned (void *p, size_t alignment)\n+{\n+  size_t mask = (alignment - 1);\n+  return ((uintptr_t)p & mask) == 0;\n+}\n+\n+/* Allocate SIZE memory with ALIGNMENT, and return it.  If FREE_POINTER,\n+   return in it the corresponding pointer to be passed to free.\n+\n+   Do the alignment precisely, in other words, if an alignment of 4 is\n+   requested, make sure the pointer is 4-byte aligned, but not 8-byte\n+   aligned.  In other words, make sure the pointer is not overaligned.\n+\n+   The benefit of using precise alignment is that accidentally specifying\n+   a too low alignment will not be compensated by accidental\n+   overalignment.  */\n+\n+static void *\n+precise_aligned_alloc (size_t alignment, size_t size, void **free_pointer)\n+{\n+  /* Allocate extra to compensate for \"p += alignment\".  */\n+  size_t alloc_size = size + alignment;\n+\n+  /* Align extra, to be able to do precise align.  */\n+  void *p = aligned_alloc (alignment * 2, alloc_size);\n+  assert (p != NULL);\n+  void *p_orig = p;\n+  void *p_end = p + alloc_size;\n+\n+  /* Make p precisely aligned.  */\n+  p += alignment;\n+\n+  /* Verify p is without bounds, and points to large enough area.  */\n+  assert (p >= p_orig);\n+  assert (p + size <= p_end);\n+\n+  /* Verify required alignment.  */\n+  assert (is_aligned (p, alignment));\n+\n+  /* Verify required alignment is precise.  */\n+  assert (! is_aligned (p, 2 * alignment));\n+\n+  if (free_pointer != NULL)\n+    *free_pointer = p_orig;\n+\n+  return p;\n+}\n+\n+/* Duplicate data SRC of size SIZE to a newly allocated, precisely aligned\n+   location with alignment ALIGNMENT.  */\n+\n+static void *\n+precise_aligned_dup (size_t alignment, size_t size, void **free_pointer,\n+\t\t     void *src)\n+{\n+  void *p = precise_aligned_alloc (alignment, size, free_pointer);\n+\n+  memcpy (p, src, size);\n+\n+  return p;\n+}"
    }
  ]
}