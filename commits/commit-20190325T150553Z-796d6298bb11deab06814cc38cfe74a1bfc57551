{
  "sha": "796d6298bb11deab06814cc38cfe74a1bfc57551",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Nzk2ZDYyOThiYjExZGVhYjA2ODE0Y2MzOGNmZTc0YTFiZmM1NzU1MQ==",
  "commit": {
    "author": {
      "name": "Tamar Christina",
      "email": "tamar.christina@arm.com",
      "date": "2019-03-25T12:16:17Z"
    },
    "committer": {
      "name": "Tamar Christina",
      "email": "tamar.christina@arm.com",
      "date": "2019-03-25T15:05:53Z"
    },
    "message": "Arm: Fix Arm disassembler mapping symbol search.\n\nSimilar to the AArch64 patches the Arm disassembler has the same issues with\nout of order sections but also a few short comings.\n\nFor one thing there are multiple code blocks to determine mapping symbols, and\nthey all work slightly different, and neither fully correct.  The first thing\nthis patch does is centralise the mapping symbols search into one function\nmapping_symbol_for_insn.  This function is then updated to perform a search in\na similar way as AArch64.\n\nTheir used to be a value has_mapping_symbols which was used to determine the\ndefault disassembly for objects that have no mapping symbols.  The problem with\nthe approach was that it was determining this value in the same loop that needed\nit, which is why this field could take on the states -1, 0, 1 where -1 means\n\"don't know\".  However this means that until you actually find a mapping symbol\nor reach the end of the disassembly glob, you don't know if you did the right\naction or not, and if you didn't you can't correct it anymore.\n\nThis is why the two jump-reloc-veneers-* testcases end up disassembling some\ninsn as data when they shouldn't.\n\nOut of order here refers to an object file where sections are not listed in a\nmonotonic increasing VMA order.\n\nThe ELF ABI for Arm [1] specifies the following for mapping symbols:\n\n  1) A text section must always have a corresponding mapping symbol at it's\n     start.\n  2) Data sections do not require any mapping symbols.\n  3) The range of a mapping symbol extends from the address it starts on up to\n     the next mapping symbol (exclusive) or section end (inclusive).\n\nHowever there is no defined order between a symbol and it's corresponding\nmapping symbol in the symbol table.  This means that while in general we look\nup for a corresponding mapping symbol, we have to make at least one check of\nthe symbol below the address being disassembled.\n\nWhen disassembling different PCs within the same section, the search for mapping\nsymbol can be cached somewhat.  We know that the mapping symbol corresponding to\nthe current PC is either the previous one used, or one at the same address as\nthe current PC.\n\nHowever this optimization and mapping symbol search must stop as soon as we\nreach the end or start of the section.  Furthermore if we're only disassembling\na part of a section, the search is a allowed to search further than the current\nchunk, but is not allowed to search past it (The mapping symbol if there, must\nbe at the same address, so in practice we usually stop at PC+4).\n\nlastly, since only data sections don't require a mapping symbol the default\nmapping type should be DATA and not INSN as previously defined, however if the\nbinary has had all its symbols stripped than this isn't very useful.  To fix\nthis we determine the default based on the section flags.  This will allow the\ndisassembler to be more useful on stripped binaries.  If there is no section\nthan we assume you to be disassembling INSN.\n\n[1] https://developer.arm.com/docs/ihi0044/latest/elf-for-the-arm-architecture-abi-2018q4-documentation#aaelf32-table4-7\n\nbinutils/ChangeLog:\n\n\t* testsuite/binutils-all/arm/in-order-all.d: New test.\n\t* testsuite/binutils-all/arm/in-order.d: New test.\n\t* testsuite/binutils-all/arm/objdump.exp: Support .d tests.\n\t* testsuite/binutils-all/arm/out-of-order-all.d: New test.\n\t* testsuite/binutils-all/arm/out-of-order.T: New test.\n\t* testsuite/binutils-all/arm/out-of-order.d: New test.\n\t* testsuite/binutils-all/arm/out-of-order.s: New test.\n\nld/ChangeLog:\n\n\t* testsuite/ld-arm/jump-reloc-veneers-cond-long.d: Update disassembly.\n\t* testsuite/ld-arm/jump-reloc-veneers-long.d: Update disassembly.\n\nopcodes/ChangeLog:\n\n\t* arm-dis.c (struct arm_private_data): Remove has_mapping_symbols.\n\t(mapping_symbol_for_insn): Implement new algorithm.\n\t(print_insn): Remove duplicate code.",
    "tree": {
      "sha": "d1c361b158530d703357441833b0d937e58b3b79",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d1c361b158530d703357441833b0d937e58b3b79"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/796d6298bb11deab06814cc38cfe74a1bfc57551",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/796d6298bb11deab06814cc38cfe74a1bfc57551",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/796d6298bb11deab06814cc38cfe74a1bfc57551",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/796d6298bb11deab06814cc38cfe74a1bfc57551/comments",
  "author": {
    "login": "TamarChristinaArm",
    "id": 48126768,
    "node_id": "MDQ6VXNlcjQ4MTI2NzY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TamarChristinaArm",
    "html_url": "https://github.com/TamarChristinaArm",
    "followers_url": "https://api.github.com/users/TamarChristinaArm/followers",
    "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}",
    "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions",
    "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs",
    "repos_url": "https://api.github.com/users/TamarChristinaArm/repos",
    "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "TamarChristinaArm",
    "id": 48126768,
    "node_id": "MDQ6VXNlcjQ4MTI2NzY4",
    "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/TamarChristinaArm",
    "html_url": "https://github.com/TamarChristinaArm",
    "followers_url": "https://api.github.com/users/TamarChristinaArm/followers",
    "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}",
    "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions",
    "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs",
    "repos_url": "https://api.github.com/users/TamarChristinaArm/repos",
    "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "60df3720d77c8415158f3eaa166e0b7162f9d3b4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/60df3720d77c8415158f3eaa166e0b7162f9d3b4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/60df3720d77c8415158f3eaa166e0b7162f9d3b4"
    }
  ],
  "stats": {
    "total": 490,
    "additions": 339,
    "deletions": 151
  },
  "files": [
    {
      "sha": "83aa37c58b9ebf422aa33fd957320fce777e58ff",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/796d6298bb11deab06814cc38cfe74a1bfc57551/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/796d6298bb11deab06814cc38cfe74a1bfc57551/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=796d6298bb11deab06814cc38cfe74a1bfc57551",
      "patch": "@@ -1,3 +1,14 @@\n+2019-03-25  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* testsuite/binutils-all/arm/in-order-all.d: New test.\n+\t* testsuite/binutils-all/arm/in-order.d: New test.\n+\t* testsuite/binutils-all/arm/objdump.exp: Support .d tests.\n+\t* testsuite/binutils-all/arm/out-of-order-all.d: New test.\n+\t* testsuite/binutils-all/arm/out-of-order.T: New test.\n+\t* testsuite/binutils-all/arm/out-of-order.d: New test.\n+\t* testsuite/binutils-all/arm/out-of-order.s: New test.\n+\n+\n 2019-03-25  Tamar Christina  <tamar.christina@arm.com>\n \n \t* testsuite/binutils-all/aarch64/in-order-all.d: New test."
    },
    {
      "sha": "3a098dd795a6f3853079bcfff31c824d7fe44155",
      "filename": "binutils/testsuite/binutils-all/arm/in-order-all.d",
      "status": "added",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/796d6298bb11deab06814cc38cfe74a1bfc57551/binutils/testsuite/binutils-all/arm/in-order-all.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/796d6298bb11deab06814cc38cfe74a1bfc57551/binutils/testsuite/binutils-all/arm/in-order-all.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/arm/in-order-all.d?ref=796d6298bb11deab06814cc38cfe74a1bfc57551",
      "patch": "@@ -0,0 +1,50 @@\n+#PROG: objcopy\n+#source: out-of-order.s\n+#ld: -e v1 -Ttext-segment=0x400000\n+#objdump: -D\n+#name: Check if disassembler can handle all sections in default order\n+\n+.*: +file format .*arm.*\n+\n+Disassembly of section \\.func1:\n+\n+00400000 <v1>:\n+  400000:\te0800001 \tadd\tr0, r0, r1\n+  400004:\t00000000 \tandeq\tr0, r0, r0\n+\n+Disassembly of section \\.func2:\n+\n+00400008 <\\.func2>:\n+  400008:\te0800001 \tadd\tr0, r0, r1\n+\n+Disassembly of section \\.func3:\n+\n+0040000c <\\.func3>:\n+  40000c:\te0800001 \tadd\tr0, r0, r1\n+  400010:\te0800001 \tadd\tr0, r0, r1\n+  400014:\te0800001 \tadd\tr0, r0, r1\n+  400018:\te0800001 \tadd\tr0, r0, r1\n+  40001c:\te0800001 \tadd\tr0, r0, r1\n+  400020:\t00000000 \tandeq\tr0, r0, r0\n+\n+Disassembly of section \\.rodata:\n+\n+00400024 <\\.rodata>:\n+  400024:\t00000004 \tandeq\tr0, r0, r4\n+\n+Disassembly of section \\.global:\n+\n+00410028 <__data_start>:\n+  410028:\t00000001 \tandeq\tr0, r0, r1\n+  41002c:\t00000001 \tandeq\tr0, r0, r1\n+  410030:\t00000001 \tandeq\tr0, r0, r1\n+\n+Disassembly of section \\.ARM\\.attributes:\n+\n+00000000 <\\.ARM\\.attributes>:\n+   0:\t00001141 \tandeq\tr1, r0, r1, asr #2\n+   4:\t61656100 \tcmnvs\tr5, r0, lsl #2\n+   8:\t01006962 \ttsteq\tr0, r2, ror #18\n+   c:\t00000007 \tandeq\tr0, r0, r7\n+  10:\tAddress 0x0000000000000010 is out of bounds.\n+"
    },
    {
      "sha": "a0b63c2462346ee982f58970fad1140041bdfc32",
      "filename": "binutils/testsuite/binutils-all/arm/in-order.d",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/796d6298bb11deab06814cc38cfe74a1bfc57551/binutils/testsuite/binutils-all/arm/in-order.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/796d6298bb11deab06814cc38cfe74a1bfc57551/binutils/testsuite/binutils-all/arm/in-order.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/arm/in-order.d?ref=796d6298bb11deab06814cc38cfe74a1bfc57551",
      "patch": "@@ -0,0 +1,28 @@\n+#PROG: objcopy\n+#source: out-of-order.s\n+#ld: -e v1 -Ttext-segment=0x400000\n+#objdump: -d\n+#name: Check if disassembler can handle sections in default order\n+\n+.*: +file format .*arm.*\n+\n+Disassembly of section \\.func1:\n+\n+00400000 <v1>:\n+  400000:\te0800001 \tadd\tr0, r0, r1\n+  400004:\t00000000 \t\\.word\t0x00000000\n+\n+Disassembly of section \\.func2:\n+\n+00400008 <\\.func2>:\n+  400008:\te0800001 \tadd\tr0, r0, r1\n+\n+Disassembly of section \\.func3:\n+\n+0040000c <\\.func3>:\n+  40000c:\te0800001 \tadd\tr0, r0, r1\n+  400010:\te0800001 \tadd\tr0, r0, r1\n+  400014:\te0800001 \tadd\tr0, r0, r1\n+  400018:\te0800001 \tadd\tr0, r0, r1\n+  40001c:\te0800001 \tadd\tr0, r0, r1\n+  400020:\t00000000 \t\\.word\t0x00000000"
    },
    {
      "sha": "33e3fd1437ea8286d6c7b9edd939515001a881b9",
      "filename": "binutils/testsuite/binutils-all/arm/objdump.exp",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/796d6298bb11deab06814cc38cfe74a1bfc57551/binutils/testsuite/binutils-all/arm/objdump.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/796d6298bb11deab06814cc38cfe74a1bfc57551/binutils/testsuite/binutils-all/arm/objdump.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/arm/objdump.exp?ref=796d6298bb11deab06814cc38cfe74a1bfc57551",
      "patch": "@@ -111,3 +111,17 @@ if {![binutils_assemble $srcdir/$subdir/rvct_symbol.s tmpdir/rvct_symbol.o]} the\n \tfail \"skip rvct symbol\"\n     }\n }\n+\n+###########################\n+# Set up generic test framework\n+###########################\n+\n+set tempfile tmpdir/armtemp.o\n+set copyfile tmpdir/armcopy\n+\n+set test_list [lsort [glob -nocomplain $srcdir/$subdir/*.d]]\n+foreach t $test_list {\n+    # We need to strip the \".d\", but can leave the dirname.\n+    verbose [file rootname $t]\n+    run_dump_test [file rootname $t]\n+}"
    },
    {
      "sha": "58c4057330dfffccb8b43f3119d26cd59b088f08",
      "filename": "binutils/testsuite/binutils-all/arm/out-of-order-all.d",
      "status": "added",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/796d6298bb11deab06814cc38cfe74a1bfc57551/binutils/testsuite/binutils-all/arm/out-of-order-all.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/796d6298bb11deab06814cc38cfe74a1bfc57551/binutils/testsuite/binutils-all/arm/out-of-order-all.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/arm/out-of-order-all.d?ref=796d6298bb11deab06814cc38cfe74a1bfc57551",
      "patch": "@@ -0,0 +1,50 @@\n+#PROG: objcopy\n+#source: out-of-order.s\n+#ld: -T out-of-order.T\n+#objdump: -D\n+#name: Check if disassembler can handle all sections in different order than header\n+\n+.*: +file format .*arm.*\n+\n+Disassembly of section \\.global:\n+\n+ffe00000 <\\.global>:\n+ffe00000:\t00000001 \tandeq\tr0, r0, r1\n+ffe00004:\t00000001 \tandeq\tr0, r0, r1\n+ffe00008:\t00000001 \tandeq\tr0, r0, r1\n+\n+Disassembly of section \\.func2:\n+\n+04018280 <\\.func2>:\n+ 4018280:\te0800001 \tadd\tr0, r0, r1\n+\n+Disassembly of section \\.func1:\n+\n+04005000 <v1>:\n+ 4005000:\te0800001 \tadd\tr0, r0, r1\n+ 4005004:\t00000000 \tandeq\tr0, r0, r0\n+\n+Disassembly of section \\.func3:\n+\n+04015000 <\\.func3>:\n+ 4015000:\te0800001 \tadd\tr0, r0, r1\n+ 4015004:\te0800001 \tadd\tr0, r0, r1\n+ 4015008:\te0800001 \tadd\tr0, r0, r1\n+ 401500c:\te0800001 \tadd\tr0, r0, r1\n+ 4015010:\te0800001 \tadd\tr0, r0, r1\n+ 4015014:\t00000000 \tandeq\tr0, r0, r0\n+\n+Disassembly of section \\.rodata:\n+\n+04015018 <\\.rodata>:\n+ 4015018:\t00000004 \tandeq\tr0, r0, r4\n+\n+Disassembly of section \\.ARM\\.attributes:\n+\n+00000000 <\\.ARM\\.attributes>:\n+   0:\t00001141 \tandeq\tr1, r0, r1, asr #2\n+   4:\t61656100 \tcmnvs\tr5, r0, lsl #2\n+   8:\t01006962 \ttsteq\tr0, r2, ror #18\n+   c:\t00000007 \tandeq\tr0, r0, r7\n+  10:\tAddress 0x0000000000000010 is out of bounds.\n+"
    },
    {
      "sha": "489ae80190e785f25e77a3db34e532db57b03da7",
      "filename": "binutils/testsuite/binutils-all/arm/out-of-order.T",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/796d6298bb11deab06814cc38cfe74a1bfc57551/binutils/testsuite/binutils-all/arm/out-of-order.T",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/796d6298bb11deab06814cc38cfe74a1bfc57551/binutils/testsuite/binutils-all/arm/out-of-order.T",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/arm/out-of-order.T?ref=796d6298bb11deab06814cc38cfe74a1bfc57551",
      "patch": "@@ -0,0 +1,14 @@\n+ENTRY(v1)\n+SECTIONS\n+{\n+  . = 0xffe00000;\n+  .global : { *(.global) }\n+  . = 0x4018280;\n+  .func2 : { *(.func2) }\n+  . = 0x4005000;\n+  .func1 : { *(.func1) }\n+  . = 0x4015000;\n+  .func3 : { *(.func3) }\n+  .data : { *(.data) }\n+  .rodata : { *(.rodata) }\n+}\n\\ No newline at end of file"
    },
    {
      "sha": "9351af7987bb5fda58424c4212d3f2f4e57083de",
      "filename": "binutils/testsuite/binutils-all/arm/out-of-order.d",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/796d6298bb11deab06814cc38cfe74a1bfc57551/binutils/testsuite/binutils-all/arm/out-of-order.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/796d6298bb11deab06814cc38cfe74a1bfc57551/binutils/testsuite/binutils-all/arm/out-of-order.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/arm/out-of-order.d?ref=796d6298bb11deab06814cc38cfe74a1bfc57551",
      "patch": "@@ -0,0 +1,27 @@\n+#PROG: objcopy\n+#ld: -T out-of-order.T\n+#objdump: -d\n+#name: Check if disassembler can handle sections in different order than header\n+\n+.*: +file format .*arm.*\n+\n+Disassembly of section \\.func2:\n+\n+04018280 <\\.func2>:\n+ 4018280:\te0800001 \tadd\tr0, r0, r1\n+\n+Disassembly of section \\.func1:\n+\n+04005000 <v1>:\n+ 4005000:\te0800001 \tadd\tr0, r0, r1\n+ 4005004:\t00000000 \t\\.word\t0x00000000\n+\n+Disassembly of section \\.func3:\n+\n+04015000 <\\.func3>:\n+ 4015000:\te0800001 \tadd\tr0, r0, r1\n+ 4015004:\te0800001 \tadd\tr0, r0, r1\n+ 4015008:\te0800001 \tadd\tr0, r0, r1\n+ 401500c:\te0800001 \tadd\tr0, r0, r1\n+ 4015010:\te0800001 \tadd\tr0, r0, r1\n+ 4015014:\t00000000 \t\\.word\t0x00000000"
    },
    {
      "sha": "4e43ddf5587394a0f46fe2856a7064154a769799",
      "filename": "binutils/testsuite/binutils-all/arm/out-of-order.s",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/796d6298bb11deab06814cc38cfe74a1bfc57551/binutils/testsuite/binutils-all/arm/out-of-order.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/796d6298bb11deab06814cc38cfe74a1bfc57551/binutils/testsuite/binutils-all/arm/out-of-order.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/arm/out-of-order.s?ref=796d6298bb11deab06814cc38cfe74a1bfc57551",
      "patch": "@@ -0,0 +1,29 @@\n+\t.text\n+\t.arm\n+\t.global v1\n+\t.section .func1,\"ax\",%progbits\n+\t.type v1 %function\n+\t.size v1, 4\n+v1:\n+\tadd r0, r0, r1\n+\t.word 0\n+\n+\t.section .func2,\"ax\",%progbits\n+\tadd r0, r0, r1\n+\n+\t.section .func3,\"ax\",%progbits\n+\tadd r0, r0, r1\n+\tadd r0, r0, r1\n+\tadd r0, r0, r1\n+\tadd r0, r0, r1\n+\tadd r0, r0, r1\n+\t.word 0\n+\n+\t.data\n+\t.section .global,\"aw\",%progbits\n+\t.word 1\n+\t.word 1\n+\t.word 1\n+\n+\t.section .rodata\n+\t.word 4"
    },
    {
      "sha": "002915088ed09d2c2170d6052d413b526b9ad424",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/796d6298bb11deab06814cc38cfe74a1bfc57551/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/796d6298bb11deab06814cc38cfe74a1bfc57551/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=796d6298bb11deab06814cc38cfe74a1bfc57551",
      "patch": "@@ -1,3 +1,8 @@\n+2019-03-25  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* testsuite/ld-arm/jump-reloc-veneers-cond-long.d: Update disassembly.\n+\t* testsuite/ld-arm/jump-reloc-veneers-long.d: Update disassembly.\n+\n 2019-03-21  Sudakshina Das  <sudi.das@arm.com>\n \n \t* testsuite/ld-aarch64/aarch64-elf.exp: Add new test."
    },
    {
      "sha": "88481f0e928c56a07451b319170933bd5d3cdf25",
      "filename": "ld/testsuite/ld-arm/jump-reloc-veneers-cond-long.d",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/796d6298bb11deab06814cc38cfe74a1bfc57551/ld/testsuite/ld-arm/jump-reloc-veneers-cond-long.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/796d6298bb11deab06814cc38cfe74a1bfc57551/ld/testsuite/ld-arm/jump-reloc-veneers-cond-long.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/jump-reloc-veneers-cond-long.d?ref=796d6298bb11deab06814cc38cfe74a1bfc57551",
      "patch": "@@ -10,7 +10,7 @@ Disassembly of section destsect:\n Disassembly of section .text:\n \n 000080.. <[^>]*>:\n-    80..:\t(8002f040|f0408002) \t.word\t0x(8002f040|f0408002)\n+    80..:\tf040 8002 \tbne.w\t8008 <__dest_veneer>\n     80..:\t0000      \tmovs\tr0, r0\n \t...\n "
    },
    {
      "sha": "ae176bed8ac92aa097b587224b40290af0b0ff45",
      "filename": "ld/testsuite/ld-arm/jump-reloc-veneers-long.d",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/796d6298bb11deab06814cc38cfe74a1bfc57551/ld/testsuite/ld-arm/jump-reloc-veneers-long.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/796d6298bb11deab06814cc38cfe74a1bfc57551/ld/testsuite/ld-arm/jump-reloc-veneers-long.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-arm/jump-reloc-veneers-long.d?ref=796d6298bb11deab06814cc38cfe74a1bfc57551",
      "patch": "@@ -10,8 +10,9 @@ Disassembly of section destsect:\n Disassembly of section .text:\n \n 000080.. <[^>]*>:\n-    80..:\t(b802f000|f000b802) \t.word\t0x(b802f000|f000b802)\n-    80..:\t00000000 \tandeq\tr0, r0, r0\n+    80..:\tf000 b802 \tb.w\t8008 <__dest_veneer>\n+    80..:\t0000      \tmovs\tr0, r0\n+\t...\n \n 000080.. <[^>]*>:\n     80..:\t4778      \tbx\tpc"
    },
    {
      "sha": "7b7237f7f01ad23f472864a215e2ecbca8686f96",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/796d6298bb11deab06814cc38cfe74a1bfc57551/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/796d6298bb11deab06814cc38cfe74a1bfc57551/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=796d6298bb11deab06814cc38cfe74a1bfc57551",
      "patch": "@@ -1,3 +1,9 @@\n+2019-03-25  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* arm-dis.c (struct arm_private_data): Remove has_mapping_symbols.\n+\t(mapping_symbol_for_insn): Implement new algorithm.\n+\t(print_insn): Remove duplicate code.\n+\n 2019-03-25  Tamar Christina  <tamar.christina@arm.com>\n \n \t* aarch64-dis.c (print_insn_aarch64):"
    },
    {
      "sha": "d47ef32b974cf49d484ebc656980221a89fd7b45",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 101,
      "deletions": 148,
      "changes": 249,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/796d6298bb11deab06814cc38cfe74a1bfc57551/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/796d6298bb11deab06814cc38cfe74a1bfc57551/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=796d6298bb11deab06814cc38cfe74a1bfc57551",
      "patch": "@@ -56,15 +56,14 @@ struct arm_private_data\n   /* The features to use when disassembling optional instructions.  */\n   arm_feature_set features;\n \n-  /* Whether any mapping symbols are present in the provided symbol\n-     table.  -1 if we do not know yet, otherwise 0 or 1.  */\n-  int has_mapping_symbols;\n-\n   /* Track the last type (although this doesn't seem to be useful) */\n   enum map_type last_type;\n \n   /* Tracking symbol table information */\n   int last_mapping_sym;\n+\n+  /* The end range of the current range being disassembled.  */\n+  bfd_vma last_stop_offset;\n   bfd_vma last_mapping_addr;\n };\n \n@@ -6351,52 +6350,114 @@ static bfd_boolean\n mapping_symbol_for_insn (bfd_vma pc, struct disassemble_info *info,\n \t\t\t enum map_type *map_symbol)\n {\n-  bfd_vma addr;\n-  int n, start = 0;\n+  bfd_vma addr, section_vma = 0;\n+  int n, last_sym = -1;\n   bfd_boolean found = FALSE;\n-  enum map_type type = MAP_ARM;\n+  bfd_boolean can_use_search_opt_p = FALSE;\n+\n+  /* Default to DATA.  A text section is required by the ABI to contain an\n+     INSN mapping symbol at the start.  A data section has no such\n+     requirement, hence if no mapping symbol is found the section must\n+     contain only data.  This however isn't very useful if the user has\n+     fully stripped the binaries.  If this is the case use the section\n+     attributes to determine the default.  If we have no section default to\n+     INSN as well, as we may be disassembling some raw bytes on a baremetal\n+     HEX file or similar.  */\n+  enum map_type type = MAP_DATA;\n+  if ((info->section && info->section->flags & SEC_CODE) || !info->section)\n+    type = MAP_ARM;\n   struct arm_private_data *private_data;\n \n-  if (info->private_data == NULL || info->symtab_size == 0\n+  if (info->private_data == NULL\n       || bfd_asymbol_flavour (*info->symtab) != bfd_target_elf_flavour)\n     return FALSE;\n \n   private_data = info->private_data;\n-  if (pc == 0)\n-    start = 0;\n-  else\n-    start = private_data->last_mapping_sym;\n \n-  start = (start == -1)? 0 : start;\n-  addr = bfd_asymbol_value (info->symtab[start]);\n+  /* First, look for mapping symbols.  */\n+  if (info->symtab_size != 0)\n+  {\n+    if (pc <= private_data->last_mapping_addr)\n+      private_data->last_mapping_sym = -1;\n+\n+    /* Start scanning at the start of the function, or wherever\n+       we finished last time.  */\n+    n = info->symtab_pos + 1;\n+\n+    /* If the last stop offset is different from the current one it means we\n+       are disassembling a different glob of bytes.  As such the optimization\n+       would not be safe and we should start over.  */\n+    can_use_search_opt_p\n+      = private_data->last_mapping_sym >= 0\n+\t&& info->stop_offset == private_data->last_stop_offset;\n+\n+    if (n >= private_data->last_mapping_sym && can_use_search_opt_p)\n+      n = private_data->last_mapping_sym;\n+\n+    /* Look down while we haven't passed the location being disassembled.\n+       The reason for this is that there's no defined order between a symbol\n+       and an mapping symbol that may be at the same address.  We may have to\n+       look at least one position ahead.  */\n+    for (; n < info->symtab_size; n++)\n+      {\n+\taddr = bfd_asymbol_value (info->symtab[n]);\n+\tif (addr > pc)\n+\t  break;\n+\tif (get_map_sym_type (info, n, &type))\n+\t  {\n+\t    last_sym = n;\n+\t    found = TRUE;\n+\t  }\n+      }\n \n-  if (pc >= addr)\n-    {\n-      if (get_map_sym_type (info, start, &type))\n-      found = TRUE;\n-    }\n-  else\n+    if (!found)\n+      {\n+\tn = info->symtab_pos;\n+\tif (n >= private_data->last_mapping_sym && can_use_search_opt_p)\n+\t  n = private_data->last_mapping_sym;\n+\n+\t/* No mapping symbol found at this address.  Look backwards\n+\t   for a preceeding one, but don't go pass the section start\n+\t   otherwise a data section with no mapping symbol can pick up\n+\t   a text mapping symbol of a preceeding section.  The documentation\n+\t   says section can be NULL, in which case we will seek up all the\n+\t   way to the top.  */\n+\tif (info->section)\n+\t  section_vma = info->section->vma;\n+\n+\tfor (; n >= 0; n--)\n+\t  {\n+\t    addr = bfd_asymbol_value (info->symtab[n]);\n+\t    if (addr < section_vma)\n+\t      break;\n+\n+\t    if (get_map_sym_type (info, n, &type))\n+\t      {\n+\t\tlast_sym = n;\n+\t\tfound = TRUE;\n+\t\tbreak;\n+\t      }\n+\t  }\n+      }\n+  }\n+\n+  /* If no mapping symbol was found, try looking up without a mapping\n+     symbol.  This is done by walking up from the current PC to the nearest\n+     symbol.  We don't actually have to loop here since symtab_pos will\n+     contain the nearest symbol already.  */\n+  if (!found)\n     {\n-      for (n = start - 1; n >= 0; n--)\n+      n = info->symtab_pos;\n+      if (n >= 0 && get_sym_code_type (info, n, &type))\n \t{\n-\t  if (get_map_sym_type (info, n, &type))\n-\t    {\n-\t      found = TRUE;\n-\t      break;\n-\t    }\n+\t  last_sym = n;\n+\t  found = TRUE;\n \t}\n     }\n \n-  /* No mapping symbols were found.  A leading $d may be\n-     omitted for sections which start with data; but for\n-     compatibility with legacy and stripped binaries, only\n-     assume the leading $d if there is at least one mapping\n-     symbol in the file.  */\n-  if (!found && private_data->has_mapping_symbols == 1)\n-    {\n-      type = MAP_DATA;\n-      found = TRUE;\n-    }\n+  private_data->last_mapping_sym = last_sym;\n+  private_data->last_type = type;\n+  private_data->last_stop_offset = info->stop_offset;\n \n   *map_symbol = type;\n   return found;\n@@ -6535,9 +6596,9 @@ print_insn (bfd_vma pc, struct disassemble_info *info, bfd_boolean little)\n \t during disassembly....  */\n       select_arm_features (info->mach, & private.features);\n \n-      private.has_mapping_symbols = -1;\n       private.last_mapping_sym = -1;\n       private.last_mapping_addr = 0;\n+      private.last_stop_offset = 0;\n \n       info->private_data = & private;\n     }\n@@ -6554,121 +6615,13 @@ print_insn (bfd_vma pc, struct disassemble_info *info, bfd_boolean little)\n       && bfd_asymbol_flavour (*info->symtab) == bfd_target_elf_flavour)\n     {\n       bfd_vma addr;\n-      int n, start;\n+      int n;\n       int last_sym = -1;\n       enum map_type type = MAP_ARM;\n \n-      /* Start scanning at the start of the function, or wherever\n-\t we finished last time.  */\n-      /* PR 14006.  When the address is 0 we are either at the start of the\n-\t very first function, or else the first function in a new, unlinked\n-\t executable section (eg because of -ffunction-sections).  Either way\n-\t start scanning from the beginning of the symbol table, not where we\n-\t left off last time.  */\n-      if (pc == 0)\n-\tstart = 0;\n-      else\n-\t{\n-\t  start = info->symtab_pos + 1;\n-\t  if (start < private_data->last_mapping_sym)\n-\t    start = private_data->last_mapping_sym;\n-\t}\n-      found = FALSE;\n-\n-      /* First, look for mapping symbols.  */\n-      if (private_data->has_mapping_symbols != 0)\n-\t{\n-\t  /* Scan up to the location being disassembled.  */\n-\t  for (n = start; n < info->symtab_size; n++)\n-\t    {\n-\t      addr = bfd_asymbol_value (info->symtab[n]);\n-\t      if (addr > pc)\n-\t\tbreak;\n-\t      if (get_map_sym_type (info, n, &type))\n-\t\t{\n-\t\t  last_sym = n;\n-\t\t  found = TRUE;\n-\t\t}\n-\t    }\n-\n-\t  if (!found)\n-\t    {\n-\t      /* No mapping symbol found at this address.  Look backwards\n-\t\t for a preceding one.  */\n-\t      for (n = start - 1; n >= 0; n--)\n-\t\t{\n-\t\t  if (get_map_sym_type (info, n, &type))\n-\t\t    {\n-\t\t      last_sym = n;\n-\t\t      found = TRUE;\n-\t\t      break;\n-\t\t    }\n-\t\t}\n-\t    }\n-\n-\t  if (found)\n-\t    private_data->has_mapping_symbols = 1;\n-\n-\t  /* No mapping symbols were found.  A leading $d may be\n-\t     omitted for sections which start with data; but for\n-\t     compatibility with legacy and stripped binaries, only\n-\t     assume the leading $d if there is at least one mapping\n-\t     symbol in the file.  */\n-\t  if (!found && private_data->has_mapping_symbols == -1)\n-\t    {\n-\t      /* Look for mapping symbols, in any section.  */\n-\t      for (n = 0; n < info->symtab_size; n++)\n-\t\tif (is_mapping_symbol (info, n, &type))\n-\t\t  {\n-\t\t    private_data->has_mapping_symbols = 1;\n-\t\t    break;\n-\t\t  }\n-\t      if (private_data->has_mapping_symbols == -1)\n-\t\tprivate_data->has_mapping_symbols = 0;\n-\t    }\n-\n-\t  if (!found && private_data->has_mapping_symbols == 1)\n-\t    {\n-\t      type = MAP_DATA;\n-\t      found = TRUE;\n-\t    }\n-\t}\n-\n-      /* Next search for function symbols to separate ARM from Thumb\n-\t in binaries without mapping symbols.  */\n-      if (!found)\n-\t{\n-\t  /* Scan up to the location being disassembled.  */\n-\t  for (n = start; n < info->symtab_size; n++)\n-\t    {\n-\t      addr = bfd_asymbol_value (info->symtab[n]);\n-\t      if (addr > pc)\n-\t\tbreak;\n-\t      if (get_sym_code_type (info, n, &type))\n-\t\t{\n-\t\t  last_sym = n;\n-\t\t  found = TRUE;\n-\t\t}\n-\t    }\n-\n-\t  if (!found)\n-\t    {\n-\t      /* No mapping symbol found at this address.  Look backwards\n-\t\t for a preceding one.  */\n-\t      for (n = start - 1; n >= 0; n--)\n-\t\t{\n-\t\t  if (get_sym_code_type (info, n, &type))\n-\t\t    {\n-\t\t      last_sym = n;\n-\t\t      found = TRUE;\n-\t\t      break;\n-\t\t    }\n-\t\t}\n-\t    }\n-\t}\n+      found = mapping_symbol_for_insn (pc, info, &type);\n+      last_sym = private_data->last_mapping_sym;\n \n-      private_data->last_mapping_sym = last_sym;\n-      private_data->last_type = type;\n       is_thumb = (private_data->last_type == MAP_THUMB);\n       is_data = (private_data->last_type == MAP_DATA);\n "
    }
  ]
}