{
  "sha": "11bb5c41eb98d8e7d4d75dfcf620f6f627523e77",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTFiYjVjNDFlYjk4ZDhlN2Q0ZDc1ZGZjZjYyMGY2ZjYyNzUyM2U3Nw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-05-26T13:27:54Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-26T19:03:00Z"
    },
    "message": "gdb: don't zero-initialize reg_buffer contents\n\nThe reg_buffer constructor zero-initializes (value-initializes, in C++\nspeak) the gdb_bytes of the m_registers array.  This is not necessary,\nas these bytes are only meaningful if the corresponding register_status\nis REG_VALID.  If the corresponding register_status is REG_VALID, then\nthey will have been overwritten with the actual register data when\nreading the registers from the system into the reg_buffer.\n\nFix that by removing the empty parenthesis following the new expression,\nmeaning that the bytes will now be default-initialized, meaning they'll\nbe left uninitialized.  For reference, this is explained here:\n\n  https://en.cppreference.com/w/cpp/language/new#Construction\n\nThese new expressions were added in 835dcf92618e (\"Use std::unique_ptr\nin reg_buffer\").  As mentioned in that commit message, the use of\nvalue-initialisation was done on purpose to keep existing behavior, but\nnow there is some data that suggest it would be beneficial not to do it,\nwhich is why I suggest changing it.\n\nThis doesn't make a big difference on typical architectures where the\nregister buffer is not that big.  However, on ROCm (AMD GPU), the\nregister buffer is about 65000 bytes big, so the reg_buffer constructor\nshows up in profiling.  If you want to make some tests and profile it on\na standard system, it's always possible to change:\n\n  - m_registers.reset (new gdb_byte[m_descr->sizeof_raw_registers] ());\n  + m_registers.reset (new gdb_byte[65000] ());\n\nand run a program that constantly hits a breakpoint with a false\ncondition.  For example, by doing this change and running the following\nprogram:\n\n    static void break_here () {}\n\n    int main ()\n    {\n      for (int i = 0; i < 100000; i++)\n        break_here ();\n    }\n\nwith the following GDB incantation:\n\n   /usr/bin/time  ./gdb -nx --data-directory=data-directory  -q test -ex \"b break_here if 0\" -ex r -batch\n\nI get, for value-intializing:\n\n    11.75user 7.68system 0:18.54elapsed 104%CPU (0avgtext+0avgdata 56644maxresident)k\n\nAnd for default-initializing:\n\n    6.83user 8.42system 0:14.12elapsed 108%CPU (0avgtext+0avgdata 56512maxresident)k\n\ngdb/ChangeLog:\n\n\t* regcache.c (reg_buffer::reg_buffer): Default-initialize\n\tm_registers array.\n\nChange-Id: I5071a4444dee0530ce1bc58ebe712024ddd2b158",
    "tree": {
      "sha": "67c712afe801e1e8bc19e9cafa00224e16bf89f1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/67c712afe801e1e8bc19e9cafa00224e16bf89f1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/11bb5c41eb98d8e7d4d75dfcf620f6f627523e77",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/11bb5c41eb98d8e7d4d75dfcf620f6f627523e77",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/11bb5c41eb98d8e7d4d75dfcf620f6f627523e77",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/11bb5c41eb98d8e7d4d75dfcf620f6f627523e77/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "983d5689cc07466ddc6664e10aebbb2b2fd49515",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/983d5689cc07466ddc6664e10aebbb2b2fd49515",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/983d5689cc07466ddc6664e10aebbb2b2fd49515"
    }
  ],
  "stats": {
    "total": 12,
    "additions": 10,
    "deletions": 2
  },
  "files": [
    {
      "sha": "39f444e1f78ebf289534aee5a445f5b0c189e441",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/11bb5c41eb98d8e7d4d75dfcf620f6f627523e77/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/11bb5c41eb98d8e7d4d75dfcf620f6f627523e77/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=11bb5c41eb98d8e7d4d75dfcf620f6f627523e77",
      "patch": "@@ -1,3 +1,8 @@\n+2021-05-26  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* regcache.c (reg_buffer::reg_buffer): Default-initialize\n+\tm_registers array.\n+\n 2021-05-26  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (allocate_type_unit_groups_table)"
    },
    {
      "sha": "51e9effe6428c476e1af785c4b584155c0ff486f",
      "filename": "gdb/regcache.c",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/11bb5c41eb98d8e7d4d75dfcf620f6f627523e77/gdb/regcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/11bb5c41eb98d8e7d4d75dfcf620f6f627523e77/gdb/regcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/regcache.c?ref=11bb5c41eb98d8e7d4d75dfcf620f6f627523e77",
      "patch": "@@ -184,15 +184,18 @@ reg_buffer::reg_buffer (gdbarch *gdbarch, bool has_pseudo)\n   gdb_assert (gdbarch != NULL);\n   m_descr = regcache_descr (gdbarch);\n \n+  /* We don't zero-initialize the M_REGISTERS array, as the bytes it contains\n+     aren't meaningful as long as the corresponding register status is not\n+     REG_VALID.  */\n   if (has_pseudo)\n     {\n-      m_registers.reset (new gdb_byte[m_descr->sizeof_cooked_registers] ());\n+      m_registers.reset (new gdb_byte[m_descr->sizeof_cooked_registers]);\n       m_register_status.reset\n \t(new register_status[m_descr->nr_cooked_registers] ());\n     }\n   else\n     {\n-      m_registers.reset (new gdb_byte[m_descr->sizeof_raw_registers] ());\n+      m_registers.reset (new gdb_byte[m_descr->sizeof_raw_registers]);\n       m_register_status.reset\n \t(new register_status[gdbarch_num_regs (gdbarch)] ());\n     }"
    }
  ]
}