{
  "sha": "5bb6e9dd7090cacb02bbe9f20d8b101a59a3bf99",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWJiNmU5ZGQ3MDkwY2FjYjAyYmJlOWYyMGQ4YjEwMWE1OWEzYmY5OQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-19T17:54:49Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-19T17:54:52Z"
    },
    "message": "Use gdb_bfd_sections in dwarf2/read.c\n\nThis changes some functions in dwarf2/read.c to avoid\nbfd_map_over_sections, in favor of iteration.\n\ngdb/ChangeLog\n2020-09-19  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (locate_dwz_sections): Change parameters.\n\t(dwarf2_get_dwz_file): Use foreach.\n\t(dwarf2_locate_dwo_sections): Change parameters.\n\t(open_and_init_dwo_file): Use foreach.\n\t(dwarf2_locate_common_dwp_sections): Change parameters.\n\t(open_and_init_dwp_file): Use foreach.",
    "tree": {
      "sha": "44e0b632c75c40eb2baf10641df9635b8bd49af9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/44e0b632c75c40eb2baf10641df9635b8bd49af9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5bb6e9dd7090cacb02bbe9f20d8b101a59a3bf99",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5bb6e9dd7090cacb02bbe9f20d8b101a59a3bf99",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5bb6e9dd7090cacb02bbe9f20d8b101a59a3bf99",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5bb6e9dd7090cacb02bbe9f20d8b101a59a3bf99/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ad7277dab9ffa0f388e6e54d5248792a3f122fdc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ad7277dab9ffa0f388e6e54d5248792a3f122fdc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ad7277dab9ffa0f388e6e54d5248792a3f122fdc"
    }
  ],
  "stats": {
    "total": 59,
    "additions": 33,
    "deletions": 26
  },
  "files": [
    {
      "sha": "dab34bf492175d94ebc7b93529b993c3b076903b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5bb6e9dd7090cacb02bbe9f20d8b101a59a3bf99/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5bb6e9dd7090cacb02bbe9f20d8b101a59a3bf99/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5bb6e9dd7090cacb02bbe9f20d8b101a59a3bf99",
      "patch": "@@ -1,3 +1,12 @@\n+2020-09-19  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (locate_dwz_sections): Change parameters.\n+\t(dwarf2_get_dwz_file): Use foreach.\n+\t(dwarf2_locate_dwo_sections): Change parameters.\n+\t(open_and_init_dwo_file): Use foreach.\n+\t(dwarf2_locate_common_dwp_sections): Change parameters.\n+\t(open_and_init_dwp_file): Use foreach.\n+\n 2020-09-19  Tom Tromey  <tom@tromey.com>\n \n \t* symfile.h: (find_lowest_section): Don't declare."
    },
    {
      "sha": "a339141ce0bf6144b370af85575c6006022f8857",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 24,
      "deletions": 26,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5bb6e9dd7090cacb02bbe9f20d8b101a59a3bf99/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5bb6e9dd7090cacb02bbe9f20d8b101a59a3bf99/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=5bb6e9dd7090cacb02bbe9f20d8b101a59a3bf99",
      "patch": "@@ -2120,10 +2120,8 @@ dwarf2_get_section_info (struct objfile *objfile,\n /* A helper function to find the sections for a .dwz file.  */\n \n static void\n-locate_dwz_sections (bfd *abfd, asection *sectp, void *arg)\n+locate_dwz_sections (bfd *abfd, asection *sectp, dwz_file *dwz_file)\n {\n-  struct dwz_file *dwz_file = (struct dwz_file *) arg;\n-\n   /* Note that we only support the standard ELF names, because .dwz\n      is ELF-only (at the time of writing).  */\n   if (section_is_p (sectp->name, &dwarf2_elf_names.abbrev))\n@@ -2246,8 +2244,8 @@ dwarf2_get_dwz_file (dwarf2_per_bfd *per_bfd)\n   std::unique_ptr<struct dwz_file> result\n     (new struct dwz_file (std::move (dwz_bfd)));\n \n-  bfd_map_over_sections (result->dwz_bfd.get (), locate_dwz_sections,\n-\t\t\t result.get ());\n+  for (asection *sec : gdb_bfd_sections (result->dwz_bfd))\n+    locate_dwz_sections (result->dwz_bfd.get (), sec, result.get ());\n \n   gdb_bfd_record_inclusion (per_bfd->obfd, result->dwz_bfd.get ());\n   per_bfd->dwz_file = std::move (result);\n@@ -11915,9 +11913,9 @@ create_dwp_hash_table (dwarf2_per_objfile *per_objfile,\n \n /* Update SECTIONS with the data from SECTP.\n \n-   This function is like the other \"locate\" section routines that are\n-   passed to bfd_map_over_sections, but in this context the sections to\n-   read comes from the DWP V1 hash table, not the full ELF section table.\n+   This function is like the other \"locate\" section routines, but in\n+   this context the sections to read comes from the DWP V1 hash table,\n+   not the full ELF section table.\n \n    The result is non-zero for success, or zero if an error was found.  */\n \n@@ -12730,9 +12728,9 @@ open_dwo_file (dwarf2_per_objfile *per_objfile,\n    size of each of the DWO debugging sections we are interested in.  */\n \n static void\n-dwarf2_locate_dwo_sections (bfd *abfd, asection *sectp, void *dwo_sections_ptr)\n+dwarf2_locate_dwo_sections (bfd *abfd, asection *sectp,\n+\t\t\t    dwo_sections *dwo_sections)\n {\n-  struct dwo_sections *dwo_sections = (struct dwo_sections *) dwo_sections_ptr;\n   const struct dwop_section_names *names = &dwop_section_names;\n \n   if (section_is_p (sectp->name, &names->abbrev_dwo))\n@@ -12819,8 +12817,9 @@ open_and_init_dwo_file (dwarf2_cu *cu, const char *dwo_name,\n   dwo_file->comp_dir = comp_dir;\n   dwo_file->dbfd = std::move (dbfd);\n \n-  bfd_map_over_sections (dwo_file->dbfd.get (), dwarf2_locate_dwo_sections,\n-\t\t\t &dwo_file->sections);\n+  for (asection *sec : gdb_bfd_sections (dwo_file->dbfd))\n+    dwarf2_locate_dwo_sections (dwo_file->dbfd.get (), sec,\n+\t\t\t\t&dwo_file->sections);\n \n   create_cus_hash_table (per_objfile, cu, *dwo_file, dwo_file->sections.info,\n \t\t\t dwo_file->cus);\n@@ -12849,9 +12848,8 @@ open_and_init_dwo_file (dwarf2_cu *cu, const char *dwo_name,\n \n static void\n dwarf2_locate_common_dwp_sections (bfd *abfd, asection *sectp,\n-\t\t\t\t   void *dwp_file_ptr)\n+\t\t\t\t   dwp_file *dwp_file)\n {\n-  struct dwp_file *dwp_file = (struct dwp_file *) dwp_file_ptr;\n   const struct dwop_section_names *names = &dwop_section_names;\n   unsigned int elf_section_nr = elf_section_data (sectp)->this_idx;\n \n@@ -13115,9 +13113,9 @@ open_and_init_dwp_file (dwarf2_per_objfile *per_objfile)\n     OBSTACK_CALLOC (&per_objfile->per_bfd->obstack,\n \t\t    dwp_file->num_sections, asection *);\n \n-  bfd_map_over_sections (dwp_file->dbfd.get (),\n-\t\t\t dwarf2_locate_common_dwp_sections,\n-\t\t\t dwp_file.get ());\n+  for (asection *sec : gdb_bfd_sections (dwp_file->dbfd))\n+    dwarf2_locate_common_dwp_sections (dwp_file->dbfd.get (), sec,\n+\t\t\t\t       dwp_file.get ());\n \n   dwp_file->cus = create_dwp_hash_table (per_objfile, dwp_file.get (), 0);\n \n@@ -13143,15 +13141,15 @@ open_and_init_dwp_file (dwarf2_per_objfile *per_objfile)\n   else\n     dwp_file->version = 2;\n \n-  if (dwp_file->version == 2)\n-    bfd_map_over_sections (dwp_file->dbfd.get (),\n-\t\t\t   dwarf2_locate_v2_dwp_sections,\n-\t\t\t   dwp_file.get ());\n-  else if (dwp_file->version == 5)\n-    bfd_map_over_sections (dwp_file->dbfd.get (),\n-\t\t\t   dwarf2_locate_v5_dwp_sections,\n-\t\t\t   dwp_file.get ());\n-\n+  for (asection *sec : gdb_bfd_sections (dwp_file->dbfd))\n+    {\n+      if (dwp_file->version == 2)\n+\tdwarf2_locate_v2_dwp_sections (dwp_file->dbfd.get (), sec,\n+\t\t\t\t       dwp_file.get ());\n+      else\n+\tdwarf2_locate_v5_dwp_sections (dwp_file->dbfd.get (), sec,\n+\t\t\t\t       dwp_file.get ());\n+    }\n \n   dwp_file->loaded_cus = allocate_dwp_loaded_cutus_table ();\n   dwp_file->loaded_tus = allocate_dwp_loaded_cutus_table ();"
    }
  ]
}