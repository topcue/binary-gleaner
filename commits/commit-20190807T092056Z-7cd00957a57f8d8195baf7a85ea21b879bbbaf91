{
  "sha": "7cd00957a57f8d8195baf7a85ea21b879bbbaf91",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2NkMDA5NTdhNTdmOGQ4MTk1YmFmN2E4NWVhMjFiODc5YmJiYWY5MQ==",
  "commit": {
    "author": {
      "name": "Omair Majid",
      "email": "omajid@redhat.com",
      "date": "2019-08-07T09:20:56Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-08-07T09:20:56Z"
    },
    "message": "Fix the binutils test for .NET assembly support so that it distinguishing between targets which do not support the x86 PE format at all, and those that do support it, but which do not recognise the .NET assembly variants.\n\n\t* testsuite/binutils-all/objdump.exp\n\t(test_objdump_dotnet_assemblies): Fix test to distinguish errors\n\tin parsing simple pei-i386 and pei-x86-64 vs parsing the newly\n\tintroduced machine types.\n\t* testsuite/gentestdlls.c (write_simple_dll): New function.\n\t(main): Generate simple and Linux-specific variants of pei-i386\n\tand pei-x86-64 files so both can be used by tests.",
    "tree": {
      "sha": "588e9df685c85127f858b3fa2632d7416a7f14af",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/588e9df685c85127f858b3fa2632d7416a7f14af"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7cd00957a57f8d8195baf7a85ea21b879bbbaf91",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7cd00957a57f8d8195baf7a85ea21b879bbbaf91",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7cd00957a57f8d8195baf7a85ea21b879bbbaf91",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7cd00957a57f8d8195baf7a85ea21b879bbbaf91/comments",
  "author": {
    "login": "omajid",
    "id": 174451,
    "node_id": "MDQ6VXNlcjE3NDQ1MQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/174451?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/omajid",
    "html_url": "https://github.com/omajid",
    "followers_url": "https://api.github.com/users/omajid/followers",
    "following_url": "https://api.github.com/users/omajid/following{/other_user}",
    "gists_url": "https://api.github.com/users/omajid/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/omajid/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/omajid/subscriptions",
    "organizations_url": "https://api.github.com/users/omajid/orgs",
    "repos_url": "https://api.github.com/users/omajid/repos",
    "events_url": "https://api.github.com/users/omajid/events{/privacy}",
    "received_events_url": "https://api.github.com/users/omajid/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bc750500af6d0a6cb602a5d00b3f71b26ce96762",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bc750500af6d0a6cb602a5d00b3f71b26ce96762",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bc750500af6d0a6cb602a5d00b3f71b26ce96762"
    }
  ],
  "stats": {
    "total": 157,
    "additions": 110,
    "deletions": 47
  },
  "files": [
    {
      "sha": "c785ad5a3f8f8319225b8dabd1e1a82c426245f0",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7cd00957a57f8d8195baf7a85ea21b879bbbaf91/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7cd00957a57f8d8195baf7a85ea21b879bbbaf91/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=7cd00957a57f8d8195baf7a85ea21b879bbbaf91",
      "patch": "@@ -1,3 +1,13 @@\n+2019-08-07  Omair Majid  <omajid@redhat.com>\n+\n+\t* testsuite/binutils-all/objdump.exp\n+\t(test_objdump_dotnet_assemblies): Fix test to distinguish errors\n+\tin parsing simple pei-i386 and pei-x86-64 vs parsing the newly\n+\tintroduced machine types.\n+\t* testsuite/gentestdlls.c (write_simple_dll): New function.\n+\t(main): Generate simple and Linux-specific variants of pei-i386\n+\tand pei-x86-64 files so both can be used by tests.\n+\n 2019-08-07  Alan Modra  <amodra@gmail.com>\n \n \tPR 24876"
    },
    {
      "sha": "c229194cbb6d5788f57a9dac93685f9acecf30b4",
      "filename": "binutils/testsuite/binutils-all/objdump.exp",
      "status": "modified",
      "additions": 35,
      "deletions": 7,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7cd00957a57f8d8195baf7a85ea21b879bbbaf91/binutils/testsuite/binutils-all/objdump.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7cd00957a57f8d8195baf7a85ea21b879bbbaf91/binutils/testsuite/binutils-all/objdump.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/objdump.exp?ref=7cd00957a57f8d8195baf7a85ea21b879bbbaf91",
      "patch": "@@ -740,34 +740,62 @@ proc test_objdump_dotnet_assemblies {} {\n \n     set test \"dotnet-assemblies\"\n \n-    set got [binutils_run \"$base_dir/testsuite/gentestdlls\" \"tmpdir\"]\n-    set want \"wrote dotnet-linux-x86-64.dll\"\n+    set got [binutils_run \"$base_dir/testsuite/gentestdlls\" \"tmpdir pei-i386 pei-x86-64\"]\n+    set want \"wrote linux-pei-x86-64.dll\"\n+    # The test program is hardcoded to generate valid dlls on any target\n     if ![regexp $want $got] then {\n-\tunsupported \"$test\"\n+        fail \"$test\"\n     }\n \n-    set test \"dotnet-assemblies (32-bit)\"\n+    # First test an ordinary x86 PE format DLL.\n+    set test \"dotnet-assemblies (ordinary x86 DLL)\"\n     set want \"file format pei-i386\"\n-    set got [binutils_run $OBJDUMP \"-x tmpdir/simple-i386.dll\"]\n+    set got [binutils_run $OBJDUMP \"-x tmpdir/simple-pei-i386.dll\"]\n     if ![regexp $want $got] then {\n \tif [regexp \"file format not recognized\" $got] then {\n+\t    # If the target does not recognize vanilla x86 PE format files\n+\t    # then it cannot be expected to recognize .NET assemblies.  But\n+\t    # this means that these tests are unsupported, rather than failures.\n \t    unsupported $test\n \t} else {\n \t    fail \"$test\"\n \t}\n+\t# In either case, if cannot pass this test, then\n+\t# there is no point in running any further tests.\n+\treturn\n+    }\n+    pass $test\n+\n+    # Next check a 32-bit .NET DLL.\n+    set test \"dotnet-assemblies (32-bit .NET)\"\n+    set got [binutils_run $OBJDUMP \"-x tmpdir/linux-pei-i386.dll\"]\n+    if ![regexp $want $got] then {\n+\tfail \"$test\"\n     } else {\n \tpass $test\n     }\n \n-    set test \"dotnet-assemblies (64-bit)\"\n+    # Next check an ordrinary x86_64 PE format DLL.\n+    set test \"dotnet-assemblies (ordinary x86_64 DLL)\"\n     set want \"file format pei-x86-64\"\n-    set got [binutils_run $OBJDUMP \"-x tmpdir/dotnet-linux-x86-64.dll\"]\n+    set got [binutils_run $OBJDUMP \"-x tmpdir/simple-pei-x86-64.dll\"]\n     if ![regexp $want $got] then {\n \tif [regexp \"file format not recognized\" $got] then {\n+\t    # If the target does not support 64-bit PE format\n+\t    # files, then the following tests are unsupported.\n \t    unsupported $test\n \t} else {\n \t    fail \"$test\"\n \t}\n+\treturn\n+    }\n+    pass $test\n+\n+    # Finally check a 64-bit .NET DLL.\n+    set test \"dotnet-assemblies (64-bit)\"\n+    set got [binutils_run $OBJDUMP \"-x tmpdir/linux-pei-x86-64.dll\"]\n+    if ![regexp $want $got] then {\n+\tfail \"$test\"\n     } else {\n \tpass $test\n     }"
    },
    {
      "sha": "09bbe3319f03445fe06bfca2381088372c43d5f6",
      "filename": "binutils/testsuite/gentestdlls.c",
      "status": "modified",
      "additions": 65,
      "deletions": 40,
      "changes": 105,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7cd00957a57f8d8195baf7a85ea21b879bbbaf91/binutils/testsuite/gentestdlls.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7cd00957a57f8d8195baf7a85ea21b879bbbaf91/binutils/testsuite/gentestdlls.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/gentestdlls.c?ref=7cd00957a57f8d8195baf7a85ea21b879bbbaf91",
      "patch": "@@ -29,8 +29,12 @@\n #include <stdint.h>\n #include <stdio.h>\n #include <stdlib.h>\n+#include <string.h>\n #include <unistd.h>\n \n+#define INCORRECT_USAGE 2\n+#define IO_ERROR 3\n+\n static void\n write_dos_header_and_stub (FILE* file)\n {\n@@ -64,6 +68,7 @@ static void\n write_pe_signature (FILE* file)\n {\n   char buffer[4];\n+\n   buffer[0] = 'P';\n   buffer[1] = 'E';\n   buffer[2] = 0;\n@@ -83,70 +88,90 @@ write_coff_header (FILE* file, uint16_t machine)\n   buffer[1] = machine >> 0x8;\n   fwrite (buffer, 2, 1, file);\n   memset (buffer, 0, sizeof (buffer));\n-  /* NumberOfSections = 0 */\n+  /* NumberOfSections = 0.  */\n   fwrite (buffer, 2, 1, file);\n-  /* TimeDateStamp = 0 */\n+  /* TimeDateStamp = 0.  */\n   fwrite (buffer, 4, 1, file);\n-  /* PointerToSymbolTable = 0 */\n+  /* PointerToSymbolTable = 0.  */\n   fwrite (buffer, 4, 1, file);\n-  /* NumberOfSymbols = 0 */\n+  /* NumberOfSymbols = 0.  */\n   fwrite (buffer, 4, 1, file);\n-  /* OptionalHeaderSize = 0 */\n+  /* OptionalHeaderSize = 0.  */\n   fwrite (buffer, 2, 1, file);\n-  /* Characteristics = 0x2000 */\n+  /* Characteristics = 0x2000.  */\n   buffer[0] = 0x00;\n   buffer[1] = 0x20;\n   fwrite (buffer, 2, 1, file);\n   memset (buffer, 0 , sizeof (buffer));\n }\n \n-int\n-main (int argc, char** argv)\n+static void\n+write_simple_dll (const char* name, uint16_t machine)\n {\n-  FILE* file;\n-\n-  if (argc < 2)\n-    {\n-      fprintf (stderr, \"usage: %s output-directory\\n\", argv[0]);\n-      exit (2);\n-    }\n-  if (chdir (argv[1]) != 0)\n-    {\n-      fprintf (stderr, \"error: unable to change directory to %s\\n\", argv[0]);\n-      exit (2);\n-    }\n+  FILE* file = fopen (name, \"w\");\n \n-  /* Generate a simple DLL file.  */\n-  file = fopen (\"simple-i386.dll\", \"w\");\n   if (file == NULL)\n     {\n       fprintf (stderr, \"error: unable to open file for writing\\n\");\n-      exit (1);\n+      exit (IO_ERROR);\n     }\n \n   write_dos_header_and_stub (file);\n   write_pe_signature (file);\n-  write_coff_header (file, 0x14c);\n+  write_coff_header (file, machine);\n   fclose (file);\n-  printf (\"wrote simple-i386.dll\\n\");\n-\n-  /* Generate a sample .NET Core on Linux dll file.  As opposed to the\n-     more common DLLs that contain bytecode (CIL/MSIL), many .NET Core\n-     DLLs are pre-compiled for specific architectures and platforms.\n-     See https://github.com/jbevain/cecil/issues/337 for an example of\n-     this value being used in practice.  */\n-  file = fopen (\"dotnet-linux-x86-64.dll\", \"w\");\n-  if (file == NULL)\n+  file = NULL;\n+  printf (\"wrote %s\\n\", name);\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+  char* program_name = argv[0];\n+  char* output_directory = argv[1];\n+\n+  if (argc < 3)\n     {\n-      fprintf (stderr, \"error: unable to open file for writing\\n\");\n-      exit (1);\n+      fprintf (stderr, \"usage: %s output-directory format [format ...] \\n\\n\", program_name);\n+      fprintf (stderr, \"format is an objdump-style format string, like pei-i386\\n\");\n+      exit (INCORRECT_USAGE);\n     }\n \n-  write_dos_header_and_stub (file);\n-  write_pe_signature (file);\n-  write_coff_header (file, 0xfd1d /* x86-64 + Linux */);\n-  fclose (file);\n-  printf (\"wrote dotnet-linux-x86-64.dll\\n\");\n+  if (chdir (output_directory) != 0)\n+    {\n+      fprintf (stderr, \"error: unable to change directory to %s\\n\", output_directory);\n+      exit (INCORRECT_USAGE);\n+    }\n+\n+  /* We generate a simple PEI format files, and then .NET Core on\n+     Linux-style PEI files for a number of architectures.  As opposed\n+     to the more common PEI files that contain bytecode (CIL/MSIL), many\n+     .NET Core DLLs are pre-compiled for specific architectures and\n+     platforms.  See https://github.com/jbevain/cecil/issues/337 for an\n+     example of this value being used in practice.  */\n+\n+  for (int i = 2; i < argc; i++)\n+    {\n+      char* wanted_format = argv[i];\n+\n+      if (strcmp (\"pei-i386\", wanted_format) == 0)\n+        {\n+          write_simple_dll (\"simple-pei-i386.dll\", 0x14c);\n+\n+          write_simple_dll (\"linux-pei-i386.dll\", 0x14c ^ 0x7b79 /* i386 + Linux */);\n+        }\n+      else if (strcmp (\"pei-x86-64\", wanted_format) == 0)\n+        {\n+          write_simple_dll (\"simple-pei-x86-64.dll\", 0x8664);\n+\n+          write_simple_dll (\"linux-pei-x86-64.dll\", 0x8664 ^ 0x7b79 /* x86-64 + Linux */);\n+        }\n+      else\n+        {\n+          fprintf (stderr, \"error: can't handle format %s\\n\", wanted_format);\n+          exit (INCORRECT_USAGE);\n+        }\n+    }\n \n   return 0;\n }"
    }
  ]
}