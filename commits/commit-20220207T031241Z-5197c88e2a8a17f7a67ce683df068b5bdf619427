{
  "sha": "5197c88e2a8a17f7a67ce683df068b5bdf619427",
  "node_id": "C_kwDOANOeidoAKDUxOTdjODhlMmE4YTE3ZjdhNjdjZTY4M2RmMDY4YjViZGY2MTk0Mjc",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-02-05T09:31:40Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2022-02-07T03:12:41Z"
    },
    "message": "Revert \"ld: Rewrite lang_size_relro_segment_1\"\n\nThis reverts commit c804c6f98d342c3d46f73d7a7ec6229d5ab1c9f3.\n\n\tPR ld/28743\n\tPR ld/28819\n\t* ldlang.c (lang_size_relro_segment_1): Revert 2022-01-14 change.\n\t* testsuite/ld-x86-64/pr28743-1.d: Likewise.\n\t* testsuite/ld-x86-64/pr28743-1.s: Likewise.\n\t* testsuite/ld-x86-64/x86-64.exp: Likewise.",
    "tree": {
      "sha": "22693af32bea270137d3979ce22a55e23dcaba11",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/22693af32bea270137d3979ce22a55e23dcaba11"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5197c88e2a8a17f7a67ce683df068b5bdf619427",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5197c88e2a8a17f7a67ce683df068b5bdf619427",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5197c88e2a8a17f7a67ce683df068b5bdf619427",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5197c88e2a8a17f7a67ce683df068b5bdf619427/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2b1026f391d55070ae1e724c0770302d1c429611",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2b1026f391d55070ae1e724c0770302d1c429611",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2b1026f391d55070ae1e724c0770302d1c429611"
    }
  ],
  "stats": {
    "total": 162,
    "additions": 44,
    "deletions": 118
  },
  "files": [
    {
      "sha": "cf13932a9b16278469998563adc8d741a13ceaee",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 44,
      "deletions": 51,
      "changes": 95,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5197c88e2a8a17f7a67ce683df068b5bdf619427/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5197c88e2a8a17f7a67ce683df068b5bdf619427/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=5197c88e2a8a17f7a67ce683df068b5bdf619427",
      "patch": "@@ -6370,101 +6370,94 @@ lang_size_segment (seg_align_type *seg)\n static bfd_vma\n lang_size_relro_segment_1 (seg_align_type *seg)\n {\n-  bfd_vma relro_end, desired_relro_base;\n-  asection *sec, *relro_sec = NULL;\n+  bfd_vma relro_end, desired_end;\n+  asection *sec, *prev_sec = NULL;\n+  bool remove_page_gap = false;\n   unsigned int max_alignment_power = 0;\n-  bool seen_reloc_section = false;\n-  bool desired_relro_base_reduced = false;\n \n   /* Compute the expected PT_GNU_RELRO/PT_LOAD segment end.  */\n   relro_end = ((seg->relro_end + seg->pagesize - 1)\n \t       & ~(seg->pagesize - 1));\n \n   /* Adjust by the offset arg of XXX_SEGMENT_RELRO_END.  */\n-  desired_relro_base = relro_end - seg->relro_offset;\n+  desired_end = relro_end - seg->relro_offset;\n \n-  /* For sections in the relro segment.  */\n+  /* For sections in the relro segment..  */\n   for (sec = link_info.output_bfd->section_last; sec; sec = sec->prev)\n     if ((sec->flags & SEC_ALLOC) != 0)\n       {\n-\t/* Record the maximum alignment for all sections starting from\n-\t   the relro segment.  */\n \tif (sec->alignment_power > max_alignment_power)\n \t  max_alignment_power = sec->alignment_power;\n \n \tif (sec->vma >= seg->base\n \t    && sec->vma < seg->relro_end - seg->relro_offset)\n \t  {\n-\t    /* Where do we want to put the relro section so that the\n-\t       relro segment ends on the page bounary?  */\n+\t    /* Where do we want to put this section so that it ends as\n+\t       desired?  */\n \t    bfd_vma start, end, bump;\n \n \t    end = start = sec->vma;\n \t    if (!IS_TBSS (sec))\n \t      end += TO_ADDR (sec->size);\n-\t    bump = desired_relro_base - end;\n+\t    bump = desired_end - end;\n \t    /* We'd like to increase START by BUMP, but we must heed\n \t       alignment so the increase might be less than optimum.  */\n \t    start += bump;\n \t    start &= ~(((bfd_vma) 1 << sec->alignment_power) - 1);\n \t    /* This is now the desired end for the previous section.  */\n-\t    desired_relro_base = start;\n-\t    relro_sec = sec;\n-\t    seen_reloc_section = true;\n+\t    desired_end = start;\n+\t    prev_sec = sec->prev;\n \t  }\n-\telse if (seen_reloc_section)\n+      }\n+\n+  seg->phase = exp_seg_relro_adjust;\n+  ASSERT (desired_end >= seg->base);\n+\n+  for (; prev_sec; prev_sec = prev_sec->prev)\n+    if ((prev_sec->flags & SEC_ALLOC) != 0)\n+      {\n+\tif (prev_sec->alignment_power > max_alignment_power)\n+\t  max_alignment_power = prev_sec->alignment_power;\n+\n+\tif (prev_sec->size != 0)\n \t  {\n-\t    /* Stop searching if we see a non-relro section after seeing\n-\t       relro sections.  */\n+\t    /* The 1-page gap before the RELRO segment may be removed.  */\n+\t    remove_page_gap = ((prev_sec->vma + prev_sec->size\n+\t\t\t\t+ seg->maxpagesize) < desired_end);\n+\n \t    break;\n \t  }\n       }\n \n-  if (relro_sec != NULL\n-      && seg->maxpagesize >= (1U << max_alignment_power))\n+  if (remove_page_gap)\n     {\n-      asection *prev_sec;\n-      bfd_vma prev_sec_end_plus_1_page;\n-\n-       /* Find the first preceding load section.  */\n-      for (prev_sec = relro_sec->prev;\n-\t   prev_sec != NULL;\n-\t   prev_sec = prev_sec->prev)\n-\tif ((prev_sec->flags & SEC_ALLOC) != 0)\n-\t  break;\n+      /* Find the maximum section alignment.  */\n+      for (sec = prev_sec; sec; sec = sec->prev)\n+\tif ((sec->flags & SEC_ALLOC) != 0\n+\t    && sec->alignment_power > max_alignment_power)\n+\t  max_alignment_power = sec->alignment_power;\n \n-      prev_sec_end_plus_1_page = (prev_sec->vma + prev_sec->size\n-\t\t\t\t  + seg->maxpagesize);\n-      if (prev_sec_end_plus_1_page < desired_relro_base)\n+      /* Remove the 1-page gap before the RELRO segment only if the\n+\t maximum page size >= the maximum section alignment.  */\n+      if (seg->maxpagesize >= (1U << max_alignment_power))\n \t{\n-\t  bfd_vma aligned_relro_base;\n-\n-\t  desired_relro_base_reduced = true;\n-\n-\t  /* Don't add the 1-page gap before the relro segment.  Align\n-\t     the relro segment first.  */\n-\t  aligned_relro_base = (desired_relro_base\n-\t\t\t\t & ~(seg->maxpagesize - 1));\n-\t  if (prev_sec_end_plus_1_page < aligned_relro_base)\n+\t  /* If the preceding section size is greater than the maximum\n+\t     page size, subtract the maximum page size.  Otherwise,\n+\t     align the RELRO segment to the maximum page size.  */\n+\t  if (prev_sec->size > seg->maxpagesize)\n \t    {\n-\t      /* Subtract the maximum page size if therer is still a\n-\t\t 1-page gap.  */\n-\t      desired_relro_base -= seg->maxpagesize;\n+\t      desired_end -= seg->maxpagesize;\n \t      relro_end -= seg->maxpagesize;\n \t    }\n \t  else\n \t    {\n-\t      /* Align the relro segment.  */\n-\t      desired_relro_base = aligned_relro_base;\n+\t      desired_end &= ~(seg->maxpagesize - 1);\n \t      relro_end &= ~(seg->maxpagesize - 1);\n \t    }\n-\t}\n-    }\n+\t  }\n+      }\n \n-  seg->phase = exp_seg_relro_adjust;\n-  ASSERT (desired_relro_base_reduced\n-\t  || desired_relro_base >= seg->base);\n-  seg->base = desired_relro_base;\n+  seg->base = desired_end;\n   return relro_end;\n }\n "
    },
    {
      "sha": "4a20f8e39002bafb8a5bb6894a0906dd120db8f4",
      "filename": "ld/testsuite/ld-x86-64/pr28743-1.d",
      "status": "removed",
      "additions": 0,
      "deletions": 50,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b1026f391d55070ae1e724c0770302d1c429611/ld/testsuite/ld-x86-64/pr28743-1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b1026f391d55070ae1e724c0770302d1c429611/ld/testsuite/ld-x86-64/pr28743-1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/pr28743-1.d?ref=2b1026f391d55070ae1e724c0770302d1c429611",
      "patch": "@@ -1,50 +0,0 @@\n-#as: --64\n-#ld: -melf_x86_64 -shared -z relro -z now --hash-style=sysv -z max-page-size=0x1000 -z noseparate-code $NO_DT_RELR_LDFLAGS\n-#readelf: -S -l --wide\n-#target: x86_64-*-linux*\n-\n-There are 17 section headers, starting at offset 0x101228:\n-\n-Section Headers:\n-  \\[Nr\\] Name              Type            Address          Off    Size   ES Flg Lk Inf Al\n-  \\[ 0\\]                   NULL            0000000000000000 000000 000000 00      0   0  0\n-  \\[ 1\\] .hash             HASH            0000000000000120 000120 000018 04   A  2   0  8\n-  \\[ 2\\] .dynsym           DYNSYM          0000000000000138 000138 000048 18   A  3   1  8\n-  \\[ 3\\] .dynstr           STRTAB          0000000000000180 000180 00000a 00   A  0   0  1\n-  \\[ 4\\] .rela.dyn         RELA            0000000000000190 000190 000018 18   A  2   0  8\n-  \\[ 5\\] .plt              PROGBITS        00000000000001b0 0001b0 000010 10  AX  0   0 16\n-  \\[ 6\\] .plt.got          PROGBITS        00000000000001c0 0001c0 000008 08  AX  0   0  8\n-  \\[ 7\\] .text             PROGBITS        00000000000001c8 0001c8 00000c 00  AX  0   0  1\n-  \\[ 8\\] .eh_frame         PROGBITS        00000000000001d8 0001d8 00006c 00   A  0   0  8\n-  \\[ 9\\] .init_array       INIT_ARRAY      00000000000ffff8 0ffff8 000004 08  WA  0   0  8\n-  \\[10\\] .fini_array       FINI_ARRAY      0000000000100000 100000 000100 08  WA  0   0 1048576\n-  \\[11\\] .dynamic          DYNAMIC         0000000000100100 100100 000150 10  WA  3   0  8\n-  \\[12\\] .got              PROGBITS        0000000000100250 100250 000020 08  WA  0   0  8\n-  \\[13\\] .data             PROGBITS        0000000000101000 101000 000100 00  WA  0   0  1\n-  \\[14\\] .symtab           SYMTAB          0000000000000000 101100 000078 18     15   3  8\n-  \\[15\\] .strtab           STRTAB          0000000000000000 101178 000029 00      0   0  1\n-  \\[16\\] .shstrtab         STRTAB          0000000000000000 1011a1 000080 00      0   0  1\n-Key to Flags:\n-  W \\(write\\), A \\(alloc\\), X \\(execute\\), M \\(merge\\), S \\(strings\\), I \\(info\\),\n-  L \\(link order\\), O \\(extra OS processing required\\), G \\(group\\), T \\(TLS\\),\n-  C \\(compressed\\), x \\(unknown\\), o \\(OS specific\\), E \\(exclude\\),\n-  D \\(mbind\\), l \\(large\\), p \\(processor specific\\)\n-\n-Elf file type is DYN \\(Shared object file\\)\n-Entry point 0x0\n-There are 4 program headers, starting at offset 64\n-\n-Program Headers:\n-  Type           Offset   VirtAddr           PhysAddr           FileSiz  MemSiz   Flg Align\n-  LOAD           0x000000 0x0000000000000000 0x0000000000000000 0x000244 0x000244 R E 0x1000\n-  LOAD           0x0ffff8 0x00000000000ffff8 0x00000000000ffff8 0x001108 0x001108 RW  0x100000\n-  DYNAMIC        0x100100 0x0000000000100100 0x0000000000100100 0x000150 0x000150 RW  0x8\n-  GNU_RELRO      0x0ffff8 0x00000000000ffff8 0x00000000000ffff8 0x001008 0x001008 R   0x1\n-\n- Section to Segment mapping:\n-  Segment Sections...\n-   00     .hash .dynsym .dynstr .rela.dyn .plt .plt.got .text .eh_frame \n-   01     .init_array .fini_array .dynamic .got .data \n-   02     .dynamic \n-   03     .init_array .fini_array .dynamic .got \n-#pass"
    },
    {
      "sha": "2e9a15037414db368ca8b9b8a61fbf4f289a59ea",
      "filename": "ld/testsuite/ld-x86-64/pr28743-1.s",
      "status": "removed",
      "additions": 0,
      "deletions": 16,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2b1026f391d55070ae1e724c0770302d1c429611/ld/testsuite/ld-x86-64/pr28743-1.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2b1026f391d55070ae1e724c0770302d1c429611/ld/testsuite/ld-x86-64/pr28743-1.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/pr28743-1.s?ref=2b1026f391d55070ae1e724c0770302d1c429611",
      "patch": "@@ -1,16 +0,0 @@\n-\t.text\n-\t.globl foo\n-\t.type foo, @function\n-foo:\n-\t.cfi_startproc\n-\tcall\tfunc@plt\n-\tmovq\tfunc@GOTPCREL(%rip), %rax\n-\t.cfi_endproc\n-\t.section .init_array,\"aw\",@init_array\n-\t.p2align 3\n-\t.zero 0x4\n-\t.section .fini_array,\"aw\",@fini_array\n-\t.p2align 20\n-\t.zero 0x100\n-\t.data\n-\t.zero 0x100"
    },
    {
      "sha": "3bfc5e6e467c6739c596576a57d21dece104790e",
      "filename": "ld/testsuite/ld-x86-64/x86-64.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5197c88e2a8a17f7a67ce683df068b5bdf619427/ld/testsuite/ld-x86-64/x86-64.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5197c88e2a8a17f7a67ce683df068b5bdf619427/ld/testsuite/ld-x86-64/x86-64.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/x86-64.exp?ref=5197c88e2a8a17f7a67ce683df068b5bdf619427",
      "patch": "@@ -511,7 +511,6 @@ run_dump_test \"dt-relr-1a\"\n run_dump_test \"dt-relr-1a-x32\"\n run_dump_test \"dt-relr-1b\"\n run_dump_test \"dt-relr-1b-x32\"\n-run_dump_test \"pr28743-1\"\n \n if ![istarget \"x86_64-*-linux*\"] {\n     return"
    }
  ]
}