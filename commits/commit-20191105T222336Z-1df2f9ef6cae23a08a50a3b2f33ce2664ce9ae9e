{
  "sha": "1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWRmMmY5ZWY2Y2FlMjNhMDhhNTBhM2IyZjMzY2UyNjY0Y2U5YWU5ZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-10-21T17:21:14Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-11-05T22:23:36Z"
    },
    "message": "Style disassembly in the TUI\n\nThis patch changes the TUI disassembly window to style its contents.\nThe styling should be identical to what is seen in the CLI.  This\ninvolved a bit of rearrangement, so that the source and disassembly\nwindows could share both the copy_source_line utility function, and\nthe ability to react to changes in \"set style enabled\".\n\nThis version introduces a new function to strip the styling from the\naddress string when computing the length.  As a byproduct, it also\nremoves the unused \"insn_size\" computation from\ntui_disasm_window::set_contents.\n\ngdb/ChangeLog\n2019-11-05  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-source.h (struct tui_source_window): Inline\n\tconstructor.  Remove destructor.\n\t<style_changed, m_observable>: Move to superclass.\n\t* tui/tui-winsource.h (tui_copy_source_line): Declare.\n\t(struct tui_source_window_base): Move private members to end.\n\t<style_changed, m_observable>: Move from tui_source_window.\n\t* tui/tui-winsource.c (tui_copy_source_line): Move from\n\ttui-source.c.  Rename from copy_source_line.  Add special handling\n\tfor negative line number.\n\t(tui_source_window_base::style_changed): Move from\n\ttui_source_window.\n\t(tui_source_window_base): Register observer.\n\t(~tui_source_window_base): New.\n\t* tui/tui-source.c (copy_source_line): Move to tui-winsource.c;\n\trename.\n\t(tui_source_window::set_contents): Use tui_copy_source_line.\n\t(tui_source_window::tui_source_window): Move to tui-source.h.\n\t(tui_source_window::~tui_source_window): Remove.\n\t(tui_source_window::style_changed): Move to superclass.\n\t* tui/tui-disasm.c (tui_disassemble): Create string file with\n\tstyling, when possible.  Add \"addr_size\" parameter.\n\t(tui_disasm_window::set_contents): Use tui_copy_source_line.\n\tDon't compute maximum size.\n\t(len_without_escapes): New function\n\nChange-Id: I8722635eeecbbb1633d943a65b856404c2d467b0",
    "tree": {
      "sha": "a7b1c72b7e81c9e4179ea641fc5eb17fefe8e4bf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a7b1c72b7e81c9e4179ea641fc5eb17fefe8e4bf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5d0510553eb447bf6861f4641b5ae3aaf9503a13",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5d0510553eb447bf6861f4641b5ae3aaf9503a13",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5d0510553eb447bf6861f4641b5ae3aaf9503a13"
    }
  ],
  "stats": {
    "total": 347,
    "additions": 205,
    "deletions": 142
  },
  "files": [
    {
      "sha": "00d21fac1e75743c1ef07d2095116ce62536d690",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e",
      "patch": "@@ -1,3 +1,30 @@\n+2019-11-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-source.h (struct tui_source_window): Inline\n+\tconstructor.  Remove destructor.\n+\t<style_changed, m_observable>: Move to superclass.\n+\t* tui/tui-winsource.h (tui_copy_source_line): Declare.\n+\t(struct tui_source_window_base): Move private members to end.\n+\t<style_changed, m_observable>: Move from tui_source_window.\n+\t* tui/tui-winsource.c (tui_copy_source_line): Move from\n+\ttui-source.c.  Rename from copy_source_line.  Add special handling\n+\tfor negative line number.\n+\t(tui_source_window_base::style_changed): Move from\n+\ttui_source_window.\n+\t(tui_source_window_base): Register observer.\n+\t(~tui_source_window_base): New.\n+\t* tui/tui-source.c (copy_source_line): Move to tui-winsource.c;\n+\trename.\n+\t(tui_source_window::set_contents): Use tui_copy_source_line.\n+\t(tui_source_window::tui_source_window): Move to tui-source.h.\n+\t(tui_source_window::~tui_source_window): Remove.\n+\t(tui_source_window::style_changed): Move to superclass.\n+\t* tui/tui-disasm.c (tui_disassemble): Create string file with\n+\tstyling, when possible.  Add \"addr_size\" parameter.\n+\t(tui_disasm_window::set_contents): Use tui_copy_source_line.\n+\tDon't compute maximum size.\n+\t(len_without_escapes): New function\n+\n 2019-11-05  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-winsource.h (struct tui_source_element) <line>: Now a"
    },
    {
      "sha": "71783266391e2b826aafef6c050e3dbe7a1aa849",
      "filename": "gdb/tui/tui-disasm.c",
      "status": "modified",
      "additions": 51,
      "deletions": 26,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e/gdb/tui/tui-disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e/gdb/tui/tui-disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-disasm.c?ref=1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e",
      "patch": "@@ -39,6 +39,7 @@\n #include \"tui/tui-source.h\"\n #include \"progspace.h\"\n #include \"objfiles.h\"\n+#include \"cli/cli-style.h\"\n \n #include \"gdb_curses.h\"\n \n@@ -49,15 +50,47 @@ struct tui_asm_line\n   std::string insn;\n };\n \n+/* Helper function to find the number of characters in STR, skipping\n+   any ANSI escape sequences.  */\n+static size_t\n+len_without_escapes (const std::string &str)\n+{\n+  size_t len = 0;\n+  const char *ptr = str.c_str ();\n+  char c;\n+\n+  while ((c = *ptr++) != '\\0')\n+    {\n+      if (c == '\\033')\n+\t{\n+\t  ui_file_style style;\n+\t  size_t n_read;\n+\t  if (style.parse (ptr, &n_read))\n+\t    ptr += n_read;\n+\t  else\n+\t    {\n+\t      /* Shouldn't happen, but just skip the ESC if it somehow\n+\t\t does.  */\n+\t      ++ptr;\n+\t    }\n+\t}\n+      else\n+\t++len;\n+    }\n+  return len;\n+}\n+\n /* Function to set the disassembly window's content.\n    Disassemble count lines starting at pc.\n    Return address of the count'th instruction after pc.  */\n static CORE_ADDR\n tui_disassemble (struct gdbarch *gdbarch,\n \t\t std::vector<tui_asm_line> &asm_lines,\n-\t\t CORE_ADDR pc, int pos, int count)\n+\t\t CORE_ADDR pc, int pos, int count,\n+\t\t size_t *addr_size = nullptr)\n {\n-  string_file gdb_dis_out;\n+  bool term_out = source_styling && gdb_stdout->can_emit_style_escape ();\n+  string_file gdb_dis_out (term_out);\n \n   /* Now construct each line.  */\n   for (int i = 0; i < count; ++i)\n@@ -68,6 +101,17 @@ tui_disassemble (struct gdbarch *gdbarch,\n \n       gdb_dis_out.clear ();\n \n+      if (addr_size != nullptr)\n+\t{\n+\t  size_t new_size;\n+\n+\t  if (term_out)\n+\t    new_size = len_without_escapes (asm_lines[pos + i].addr_string);\n+\t  else\n+\t    new_size = asm_lines[pos + i].addr_string.size ();\n+\t  *addr_size = std::max (*addr_size, new_size);\n+\t}\n+\n       pc = pc + gdb_print_insn (gdbarch, pc, &gdb_dis_out, NULL);\n \n       asm_lines[pos + i].insn = std::move (gdb_dis_out.string ());\n@@ -164,8 +208,7 @@ tui_disasm_window::set_contents (struct gdbarch *arch,\n   struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n   int tab_len = tui_tab_width;\n   int insn_pos;\n-  int addr_size, insn_size;\n-  \n+\n   gdb_assert (line_or_addr.loa == LOA_ADDRESS);\n   CORE_ADDR pc = line_or_addr.u.addr;\n   if (pc == 0)\n@@ -182,23 +225,8 @@ tui_disasm_window::set_contents (struct gdbarch *arch,\n \n   /* Get temporary table that will hold all strings (addr & insn).  */\n   std::vector<tui_asm_line> asm_lines (max_lines);\n-\n-  tui_disassemble (gdbarch, asm_lines, pc, 0, max_lines);\n-\n-  /* Determine maximum address- and instruction lengths.  */\n-  addr_size = 0;\n-  insn_size = 0;\n-  for (i = 0; i < max_lines; i++)\n-    {\n-      size_t len = asm_lines[i].addr_string.size ();\n-\n-      if (len > addr_size)\n-        addr_size = len;\n-\n-      len = asm_lines[i].insn.size ();\n-      if (len > insn_size)\n-\tinsn_size = len;\n-    }\n+  size_t addr_size = 0;\n+  tui_disassemble (gdbarch, asm_lines, pc, 0, max_lines, &addr_size);\n \n   /* Align instructions to the same column.  */\n   insn_pos = (1 + (addr_size / tab_len)) * tab_len;\n@@ -215,11 +243,8 @@ tui_disasm_window::set_contents (struct gdbarch *arch,\n \t\t       - asm_lines[i].addr_string.size ())\n \t   + asm_lines[i].insn);\n \n-      /* Now copy the line taking the offset into account.  */\n-      if (line.size () > offset)\n-\tsrc->line = line.substr (offset, line_width);\n-      else\n-\tsrc->line.clear ();\n+      const char *ptr = line.c_str ();\n+      src->line = tui_copy_source_line (&ptr, -1, offset, line_width);\n \n       src->line_or_addr.loa = LOA_ADDRESS;\n       src->line_or_addr.u.addr = asm_lines[i].addr;"
    },
    {
      "sha": "915f9e36315283dbc7deb9abf8136b37581972f9",
      "filename": "gdb/tui/tui-source.c",
      "status": "modified",
      "additions": 3,
      "deletions": 106,
      "changes": 109,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e/gdb/tui/tui-source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e/gdb/tui/tui-source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.c?ref=1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e",
      "patch": "@@ -37,90 +37,6 @@\n #include \"tui/tui-source.h\"\n #include \"gdb_curses.h\"\n \n-/* A helper function for tui_set_source_content that extracts some\n-   source text from PTR.  LINE_NO is the line number; FIRST_COL is the\n-   first column to extract, and LINE_WIDTH is the number of characters\n-   to display.  Returns a string holding the desired text.  */\n-\n-static std::string\n-copy_source_line (const char **ptr, int line_no, int first_col,\n-\t\t  int line_width)\n-{\n-  const char *lineptr = *ptr;\n-\n-  /* Init the line with the line number.  */\n-  std::string result = string_printf (\"%-6d\", line_no);\n-  int len = result.size ();\n-  len = len - ((len / tui_tab_width) * tui_tab_width);\n-  result.append (len, ' ');\n-\n-  int column = 0;\n-  char c;\n-  do\n-    {\n-      int skip_bytes;\n-\n-      c = *lineptr;\n-      if (c == '\\033' && skip_ansi_escape (lineptr, &skip_bytes))\n-\t{\n-\t  /* We always have to preserve escapes.  */\n-\t  result.append (lineptr, lineptr + skip_bytes);\n-\t  lineptr += skip_bytes;\n-\t  continue;\n-\t}\n-\n-      ++lineptr;\n-      ++column;\n-\n-      auto process_tab = [&] ()\n-\t{\n-\t  int max_tab_len = tui_tab_width;\n-\n-\t  --column;\n-\t  for (int j = column % max_tab_len;\n-\t       j < max_tab_len && column < first_col + line_width;\n-\t       column++, j++)\n-\t    if (column >= first_col)\n-\t      result.push_back (' ');\n-\t};\n-\n-      /* We have to process all the text in order to pick up all the\n-\t escapes.  */\n-      if (column <= first_col || column > first_col + line_width)\n-\t{\n-\t  if (c == '\\t')\n-\t    process_tab ();\n-\t  continue;\n-\t}\n-\n-      if (c == '\\n' || c == '\\r' || c == '\\0')\n-\t{\n-\t  /* Nothing.  */\n-\t}\n-      else if (c < 040 && c != '\\t')\n-\t{\n-\t  result.push_back ('^');\n-\t  result.push_back (c + 0100);\n-\t}\n-      else if (c == 0177)\n-\t{\n-\t  result.push_back ('^');\n-\t  result.push_back ('?');\n-\t}\n-      else if (c == '\\t')\n-\tprocess_tab ();\n-      else\n-\tresult.push_back (c);\n-    }\n-  while (c != '\\0' && c != '\\n' && c != '\\r');\n-\n-  if (c == '\\r' && *lineptr == '\\n')\n-    ++lineptr;\n-  *ptr = lineptr;\n-\n-  return result;\n-}\n-\n /* Function to display source in the source window.  */\n enum tui_status\n tui_source_window::set_contents (struct gdbarch *arch,\n@@ -171,8 +87,9 @@ tui_source_window::set_contents (struct gdbarch *arch,\n \n \t      std::string text;\n \t      if (*iter != '\\0')\n-\t\ttext = copy_source_line (&iter, cur_line_no, horizontal_offset,\n-\t\t\t\t\t line_width);\n+\t\ttext = tui_copy_source_line (&iter, cur_line_no,\n+\t\t\t\t\t     horizontal_offset,\n+\t\t\t\t\t     line_width);\n \n \t      /* Set whether element is the execution point\n \t\t and whether there is a break point on it.  */\n@@ -249,26 +166,6 @@ tui_source_window::do_scroll_vertical (int num_to_scroll)\n     }\n }\n \n-tui_source_window::tui_source_window ()\n-  : tui_source_window_base (SRC_WIN)\n-{\n-  gdb::observers::source_styling_changed.attach\n-    (std::bind (&tui_source_window::style_changed, this),\n-     m_observable);\n-}\n-\n-tui_source_window::~tui_source_window ()\n-{\n-  gdb::observers::source_styling_changed.detach (m_observable);\n-}\n-\n-void\n-tui_source_window::style_changed ()\n-{\n-  if (tui_active && is_visible ())\n-    refill ();\n-}\n-\n bool\n tui_source_window::location_matches_p (struct bp_location *loc, int line_no)\n {"
    },
    {
      "sha": "a2b7754e7ee87e6111cfc897adfad44ad0d2262a",
      "filename": "gdb/tui/tui-source.h",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e/gdb/tui/tui-source.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e/gdb/tui/tui-source.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.h?ref=1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e",
      "patch": "@@ -31,8 +31,10 @@ struct symtab;\n \n struct tui_source_window : public tui_source_window_base\n {\n-  tui_source_window ();\n-  ~tui_source_window ();\n+  tui_source_window ()\n+    : tui_source_window_base (SRC_WIN)\n+  {\n+  }\n \n   DISABLE_COPY_AND_ASSIGN (tui_source_window);\n \n@@ -70,17 +72,12 @@ struct tui_source_window : public tui_source_window_base\n \n private:\n \n-  void style_changed ();\n-\n   /* Answer whether a particular line number or address is displayed\n      in the current source window.  */\n   bool line_is_displayed (int line) const;\n \n   /* It is the resolved form as returned by symtab_to_fullname.  */\n   gdb::unique_xmalloc_ptr<char> m_fullname;\n-\n-  /* A token used to register and unregister an observer.  */\n-  gdb::observers::token m_observable;\n };\n \n #endif /* TUI_TUI_SOURCE_H */"
    },
    {
      "sha": "3ca723c8b2609adb9f7b39a4dfd5564f5686c201",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 99,
      "deletions": 0,
      "changes": 99,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e",
      "patch": "@@ -65,7 +65,98 @@ tui_display_main ()\n     }\n }\n \n+/* See tui-winsource.h.  */\n+\n+std::string\n+tui_copy_source_line (const char **ptr, int line_no, int first_col,\n+\t\t      int line_width)\n+{\n+  const char *lineptr = *ptr;\n+\n+  /* Init the line with the line number.  */\n+  std::string result;\n+\n+  if (line_no > 0)\n+    {\n+      result = string_printf (\"%-6d\", line_no);\n+      int len = result.size ();\n+      len = len - ((len / tui_tab_width) * tui_tab_width);\n+      result.append (len, ' ');\n+    }\n+\n+  int column = 0;\n+  char c;\n+  do\n+    {\n+      int skip_bytes;\n+\n+      c = *lineptr;\n+      if (c == '\\033' && skip_ansi_escape (lineptr, &skip_bytes))\n+\t{\n+\t  /* We always have to preserve escapes.  */\n+\t  result.append (lineptr, lineptr + skip_bytes);\n+\t  lineptr += skip_bytes;\n+\t  continue;\n+\t}\n+\n+      ++lineptr;\n+      ++column;\n+\n+      auto process_tab = [&] ()\n+\t{\n+\t  int max_tab_len = tui_tab_width;\n+\n+\t  --column;\n+\t  for (int j = column % max_tab_len;\n+\t       j < max_tab_len && column < first_col + line_width;\n+\t       column++, j++)\n+\t    if (column >= first_col)\n+\t      result.push_back (' ');\n+\t};\n+\n+      /* We have to process all the text in order to pick up all the\n+\t escapes.  */\n+      if (column <= first_col || column > first_col + line_width)\n+\t{\n+\t  if (c == '\\t')\n+\t    process_tab ();\n+\t  continue;\n+\t}\n+\n+      if (c == '\\n' || c == '\\r' || c == '\\0')\n+\t{\n+\t  /* Nothing.  */\n+\t}\n+      else if (c < 040 && c != '\\t')\n+\t{\n+\t  result.push_back ('^');\n+\t  result.push_back (c + 0100);\n+\t}\n+      else if (c == 0177)\n+\t{\n+\t  result.push_back ('^');\n+\t  result.push_back ('?');\n+\t}\n+      else if (c == '\\t')\n+\tprocess_tab ();\n+      else\n+\tresult.push_back (c);\n+    }\n+  while (c != '\\0' && c != '\\n' && c != '\\r');\n+\n+  if (c == '\\r' && *lineptr == '\\n')\n+    ++lineptr;\n+  *ptr = lineptr;\n \n+  return result;\n+}\n+\n+void\n+tui_source_window_base::style_changed ()\n+{\n+  if (tui_active && is_visible ())\n+    refill ();\n+}\n \n /* Function to display source in the source window.  This function\n    initializes the horizontal scroll to 0.  */\n@@ -253,8 +344,16 @@ tui_source_window_base::tui_source_window_base (enum tui_win_type type)\n   gdb_assert (type == SRC_WIN || type == DISASSEM_WIN);\n   start_line_or_addr.loa = LOA_ADDRESS;\n   start_line_or_addr.u.addr = 0;\n+\n+  gdb::observers::source_styling_changed.attach\n+    (std::bind (&tui_source_window::style_changed, this),\n+     m_observable);\n }\n \n+tui_source_window_base::~tui_source_window_base ()\n+{\n+  gdb::observers::source_styling_changed.detach (m_observable);\n+}\n \n /* See tui-data.h.  */\n "
    },
    {
      "sha": "7c3c626add16cfd47b384cc1bea1bcae5dfb261b",
      "filename": "gdb/tui/tui-winsource.h",
      "status": "modified",
      "additions": 21,
      "deletions": 3,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e/gdb/tui/tui-winsource.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e/gdb/tui/tui-winsource.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.h?ref=1df2f9ef6cae23a08a50a3b2f33ce2664ce9ae9e",
      "patch": "@@ -74,11 +74,9 @@ struct tui_source_element\n \n struct tui_source_window_base : public tui_win_info\n {\n-private:\n-  void show_source_content ();\n-\n protected:\n   explicit tui_source_window_base (enum tui_win_type type);\n+  ~tui_source_window_base ();\n \n   DISABLE_COPY_AND_ASSIGN (tui_source_window_base);\n \n@@ -140,6 +138,16 @@ struct tui_source_window_base : public tui_win_info\n   struct gdbarch *gdbarch = nullptr;\n \n   std::vector<tui_source_element> content;\n+\n+private:\n+\n+  void show_source_content ();\n+\n+  /* Called when the user \"set style enabled\" setting is changed.  */\n+  void style_changed ();\n+\n+  /* A token used to register and unregister an observer.  */\n+  gdb::observers::token m_observable;\n };\n \n \n@@ -227,6 +235,16 @@ extern void tui_update_source_windows_with_addr (struct gdbarch *, CORE_ADDR);\n extern void tui_update_source_windows_with_line (struct symtab *, \n \t\t\t\t\t\t int);\n \n+/* Extract some source text from PTR.  LINE_NO is the line number.  If\n+   it is positive, it is printed at the start of the line.  FIRST_COL\n+   is the first column to extract, and LINE_WIDTH is the number of\n+   characters to display.  Returns a string holding the desired text.\n+   PTR is updated to point to the start of the next line.  */\n+\n+extern std::string tui_copy_source_line (const char **ptr,\n+\t\t\t\t\t int line_no, int first_col,\n+\t\t\t\t\t int line_width);\n+\n /* Constant definitions. */\n #define SCROLL_THRESHOLD 2\t/* Threshold for lazy scroll.  */\n "
    }
  ]
}