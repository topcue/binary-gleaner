{
  "sha": "399aaebd1a5e9e3971758396bd0c5c3ec5ae2386",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Mzk5YWFlYmQxYTVlOWUzOTcxNzU4Mzk2YmQwYzVjM2VjNWFlMjM4Ng==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-06-16T13:07:16Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-06-16T13:07:17Z"
    },
    "message": "Make gdb.base/index-cache.exp work with readnow board (PR 24669)\n\nThe gdb.base/index-cache.exp test fails with the readnow board:\n\n  $ make check TESTS=\"gdb.base/index-cache.exp\" RUNTESTFLAGS=\"--target_board=readnow\"\n  FAIL: gdb.base/index-cache.exp: test_cache_enabled_miss: at least one file was created\n  FAIL: gdb.base/index-cache.exp: test_cache_enabled_miss: expected file is there\n  FAIL: gdb.base/index-cache.exp: test_cache_enabled_miss: check index-cache stats\n  FAIL: gdb.base/index-cache.exp: test_cache_enabled_hit: check index-cache stats\n\nThe problem is similar to what was fixed in\n\n  5a56d6a65f84 (\"[gdb/testsuite] Fix index-cache.exp with cc-with-{gdb-index,debug-names}\")\n\nIn that commit, gdb.base/index-cache.exp was modified to account for the\nfact that the index cache is not used when the binary already has an\nembedded index.\n\nThe same situation happens when GDB is started with the -readnow flag:\nit bypasses indices and partial symbols.  So this patch updates the test\nto also expect the index cache not to be used if -readnow is present in\n$GDBFLAGS,\n\ngdb/testsuite/ChangeLog:\n\n\tPR gdb/24669\n\t* gdb.base/index-cache.exp (uses_readnow,\n\texpecting_index_cache_use): Define global variable.\n\t(test_cache_enabled_miss, test_cache_enabled_hit): Use\n\texpecting_index_cache_use.",
    "tree": {
      "sha": "2a6295827c291bb26d44a655b9d17314291c16a8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2a6295827c291bb26d44a655b9d17314291c16a8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/399aaebd1a5e9e3971758396bd0c5c3ec5ae2386",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/399aaebd1a5e9e3971758396bd0c5c3ec5ae2386",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/399aaebd1a5e9e3971758396bd0c5c3ec5ae2386",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/399aaebd1a5e9e3971758396bd0c5c3ec5ae2386/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6ac6a19371b72f848626666af5301612b76e800e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6ac6a19371b72f848626666af5301612b76e800e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6ac6a19371b72f848626666af5301612b76e800e"
    }
  ],
  "stats": {
    "total": 57,
    "additions": 37,
    "deletions": 20
  },
  "files": [
    {
      "sha": "03303017c73947b248ba65f677e6e210ec3ab59b",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/399aaebd1a5e9e3971758396bd0c5c3ec5ae2386/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/399aaebd1a5e9e3971758396bd0c5c3ec5ae2386/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=399aaebd1a5e9e3971758396bd0c5c3ec5ae2386",
      "patch": "@@ -1,3 +1,11 @@\n+2019-06-16  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\tPR gdb/24669\n+\t* gdb.base/index-cache.exp (uses_readnow,\n+\texpecting_index_cache_use): Define global variable.\n+\t(test_cache_enabled_miss, test_cache_enabled_hit): Use\n+\texpecting_index_cache_use.\n+\n 2019-06-16  Bernhard Heckel  <bernhard.heckel@intel.com>\n \t    Andrew Burgess  <andrew.burgess@embecosm.com>\n "
    },
    {
      "sha": "075dffe3f5eaf99f50875fc22abfcb4a66f6ef5c",
      "filename": "gdb/testsuite/gdb.base/index-cache.exp",
      "status": "modified",
      "additions": 29,
      "deletions": 20,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/399aaebd1a5e9e3971758396bd0c5c3ec5ae2386/gdb/testsuite/gdb.base/index-cache.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/399aaebd1a5e9e3971758396bd0c5c3ec5ae2386/gdb/testsuite/gdb.base/index-cache.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/index-cache.exp?ref=399aaebd1a5e9e3971758396bd0c5c3ec5ae2386",
      "patch": "@@ -22,7 +22,14 @@ if { [prepare_for_testing \"failed to prepare\" $testfile $srcfile] } {\n     return\n }\n \n+# The index cache won't be used in certain circumstances, for which we must\n+# account in this test:\n+#\n+#  - the binary already has an index section\n+#  - we use the -readnow switch\n set has_index_section [exec_has_index_section $binfile]\n+set uses_readnow [expr [string first \"-readnow\" $GDBFLAGS] != -1]\n+set expecting_index_cache_use [expr !$has_index_section && !$uses_readnow]\n \n # List the files in DIR on the host (where GDB-under-test runs).\n # Return a list of two elements:\n@@ -124,23 +131,24 @@ proc_with_prefix test_cache_disabled { cache_dir } {\n     }\n }\n \n-# Test with the cache enabled, we expect to have:\n-# - exactly one file created, in case of no index section\n-# - no file created, in case of an index section\n+# Test a cache miss.  We expect to have at least one file in the cache if the\n+# index cache is going to be used (see expecting_index_cache_use) and a cache\n+# miss in the stats.  If the cache is not going to be used, we expect to have\n+# no files and no cache hits nor misses.\n \n proc_with_prefix test_cache_enabled_miss { cache_dir } {\n-    global testfile has_index_section\n+    global testfile expecting_index_cache_use\n \n     lassign [ls_host $cache_dir] ret files_before\n \n     run_test_with_flags $cache_dir on {\n \n \tlassign [ls_host $cache_dir] ret files_after\n \tset nfiles_created [expr [llength $files_after] - [llength $files_before]]\n-\tif { $has_index_section } {\n-\t    gdb_assert \"$nfiles_created == 0\" \"no file was created\"\n-\t} else {\n+\tif { $expecting_index_cache_use } {\n \t    gdb_assert \"$nfiles_created > 0\" \"at least one file was created\"\n+\t} else {\n+\t    gdb_assert \"$nfiles_created == 0\" \"no file was created\"\n \t}\n \n \tset build_id [get_build_id  [standard_output_file ${testfile}]]\n@@ -151,29 +159,30 @@ proc_with_prefix test_cache_enabled_miss { cache_dir } {\n \n \tset expected_created_file [list \"${build_id}.gdb-index\"]\n \tset found_idx [lsearch -exact $files_after $expected_created_file]\n-\tif { $has_index_section } {\n-\t    gdb_assert \"$found_idx == -1\" \"no index cache file generated\"\n-\t} else {\n+\tif { $expecting_index_cache_use } {\n \t    gdb_assert \"$found_idx >= 0\" \"expected file is there\"\n+\t} else {\n+\t    gdb_assert \"$found_idx == -1\" \"no index cache file generated\"\n \t}\n \n \tremote_exec host rm \"-f $cache_dir/$expected_created_file\"\n \n-\tif { $has_index_section } {\n-\t    check_cache_stats 0 0\n-\t} else {\n+\tif { $expecting_index_cache_use } {\n \t    check_cache_stats 0 1\n+\t} else {\n+\t    check_cache_stats 0 0\n \t}\n     }\n }\n \n \n-# Test with the cache enabled, this time we should have:\n-# - one file (the same), but one cache read hit, in case of no index section\n-# - no file, no cache hit, in case an an index section\n+# Test a cache hit.  We should have at least one file in the cache if the index\n+# cache is going to be used (see expecting_index_cache_use) and a cache hit in\n+# the stats.  If the cache is not going to be used, we expect to have no files\n+# and no cache hits nor misses.\n \n proc_with_prefix test_cache_enabled_hit { cache_dir } {\n-    global has_index_section\n+    global expecting_index_cache_use\n \n     # Just to populate the cache.\n     run_test_with_flags $cache_dir on {}\n@@ -185,10 +194,10 @@ proc_with_prefix test_cache_enabled_hit { cache_dir } {\n \tset nfiles_created [expr [llength $files_after] - [llength $files_before]]\n \tgdb_assert \"$nfiles_created == 0\" \"no files were created\"\n \n-\tif { $has_index_section } {\n-\t    check_cache_stats 0 0\n-\t} else {\n+\tif { $expecting_index_cache_use } {\n \t    check_cache_stats 1 0\n+\t} else {\n+\t    check_cache_stats 0 0\n \t}\n     }\n }"
    }
  ]
}