{
  "sha": "478c04a55ee59bf7e7f104c36a08253d15863610",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDc4YzA0YTU1ZWU1OWJmN2U3ZjEwNGMzNmEwODI1M2QxNTg2MzYxMA==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-03-02T15:10:05Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-03-02T15:10:06Z"
    },
    "message": "libctf: remove reference to \"unconflicted link mode\".\n\nThere is no such thing, and the comment makes no sense, and doesn't\nmatch what the code is doing.  We always want to put variables in the\nsame dicts as the types they relate to if at all possible.\n\nlibctf/ChangeLog\n2021-03-02  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* ctf-link.c (ctf_link_one_variable): Remove reference to\n\t\"unconflicted link mode\".",
    "tree": {
      "sha": "7c95e33edec2c0577fe664075b4590dacb369225",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7c95e33edec2c0577fe664075b4590dacb369225"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/478c04a55ee59bf7e7f104c36a08253d15863610",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/478c04a55ee59bf7e7f104c36a08253d15863610",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/478c04a55ee59bf7e7f104c36a08253d15863610",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/478c04a55ee59bf7e7f104c36a08253d15863610/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8915c559d40186064d0be75229f9b4e5ac649b16",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8915c559d40186064d0be75229f9b4e5ac649b16",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8915c559d40186064d0be75229f9b4e5ac649b16"
    }
  ],
  "stats": {
    "total": 11,
    "additions": 8,
    "deletions": 3
  },
  "files": [
    {
      "sha": "e0d3f7b4b4817cf66d5bf4cbfce021544ab5a1dd",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/478c04a55ee59bf7e7f104c36a08253d15863610/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/478c04a55ee59bf7e7f104c36a08253d15863610/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=478c04a55ee59bf7e7f104c36a08253d15863610",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-02  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-link.c (ctf_link_one_variable): Remove reference to\n+\t\"unconflicted link mode\".\n+\n 2021-03-02  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-link.c (ctf_create_per_cu): Drop FILENAME now that it is"
    },
    {
      "sha": "d598b7848e8c0cb5efe7885054c42c3360e5656a",
      "filename": "libctf/ctf-link.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/478c04a55ee59bf7e7f104c36a08253d15863610/libctf/ctf-link.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/478c04a55ee59bf7e7f104c36a08253d15863610/libctf/ctf-link.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-link.c?ref=478c04a55ee59bf7e7f104c36a08253d15863610",
      "patch": "@@ -499,9 +499,9 @@ ctf_link_one_variable (const char *name, ctf_id_t type, void *arg_)\n \treturn 0;\n     }\n \n-  /* In unconflicted link mode, if this type is mapped to a type in the parent\n-     dict, we want to try to add to that first: if it reports a duplicate,\n-     or if the type is in a child already, add straight to the child.  */\n+  /* If this type is mapped to a type in the parent dict, we want to try to add\n+     to that first: if it reports a duplicate, or if the type is in a child\n+     already, add straight to the child.  */\n \n   insert_fp = arg->out_fp;\n "
    }
  ]
}