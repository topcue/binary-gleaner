{
  "sha": "c34e87146628a14cf662dca46aac893d06502f52",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzM0ZTg3MTQ2NjI4YTE0Y2Y2NjJkY2E0NmFhYzg5M2QwNjUwMmY1Mg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-04-01T20:09:52Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-01T20:09:53Z"
    },
    "message": "Implement complex arithmetic\n\nThis adds support for complex arithmetic to gdb.  Now something like\n\"print 23 + 7i\" will work.\n\nAddition, subtraction, multiplication, division, and equality testing\nare supported binary operations.\n\nUnary +, negation, and complement are supported.  Following GCC, the ~\noperator computes the complex conjugate.\n\ngdb/ChangeLog\n2020-04-01  Tom Tromey  <tom@tromey.com>\n\n\tPR exp/25299:\n\t* valarith.c (promotion_type, complex_binop): New functions.\n\t(scalar_binop): Handle complex numbers.  Use promotion_type.\n\t(value_pos, value_neg, value_complement): Handle complex numbers.\n\ngdb/testsuite/ChangeLog\n2020-04-01  Tom Tromey  <tom@tromey.com>\n\n\t* gdb.base/complex-parts.exp: Add arithmetic tests.",
    "tree": {
      "sha": "3dd1b1f4ab1cea91ed807e40b81427fb696f4ce7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3dd1b1f4ab1cea91ed807e40b81427fb696f4ce7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c34e87146628a14cf662dca46aac893d06502f52",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c34e87146628a14cf662dca46aac893d06502f52",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c34e87146628a14cf662dca46aac893d06502f52",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c34e87146628a14cf662dca46aac893d06502f52/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fa649bb7d3c8fd97c1d8f01a3023094468f66ca4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fa649bb7d3c8fd97c1d8f01a3023094468f66ca4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fa649bb7d3c8fd97c1d8f01a3023094468f66ca4"
    }
  ],
  "stats": {
    "total": 236,
    "additions": 215,
    "deletions": 21
  },
  "files": [
    {
      "sha": "8ae8b484e56ed8433fcd91861d9a20d1adbcd024",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c34e87146628a14cf662dca46aac893d06502f52/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c34e87146628a14cf662dca46aac893d06502f52/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c34e87146628a14cf662dca46aac893d06502f52",
      "patch": "@@ -1,3 +1,10 @@\n+2020-04-01  Tom Tromey  <tom@tromey.com>\n+\n+\tPR exp/25299:\n+\t* valarith.c (promotion_type, complex_binop): New functions.\n+\t(scalar_binop): Handle complex numbers.  Use promotion_type.\n+\t(value_pos, value_neg, value_complement): Handle complex numbers.\n+\n 2020-04-01  Tom Tromey  <tom@tromey.com>\n \n \t* c-exp.y (COMPLEX_INT, COMPLEX_FLOAT): New tokens."
    },
    {
      "sha": "05a542b623207f6bd546d32a8c91d9ad684e6c60",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c34e87146628a14cf662dca46aac893d06502f52/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c34e87146628a14cf662dca46aac893d06502f52/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=c34e87146628a14cf662dca46aac893d06502f52",
      "patch": "@@ -1,3 +1,7 @@\n+2020-04-01  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdb.base/complex-parts.exp: Add arithmetic tests.\n+\n 2020-04-01  Tom Tromey  <tom@tromey.com>\n \n \t* gdb.compile/compile.exp: Update."
    },
    {
      "sha": "0cf4abf56ec434e5a6aff19dca73235953dd86e5",
      "filename": "gdb/testsuite/gdb.base/complex-parts.exp",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c34e87146628a14cf662dca46aac893d06502f52/gdb/testsuite/gdb.base/complex-parts.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c34e87146628a14cf662dca46aac893d06502f52/gdb/testsuite/gdb.base/complex-parts.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/complex-parts.exp?ref=c34e87146628a14cf662dca46aac893d06502f52",
      "patch": "@@ -60,3 +60,29 @@ gdb_test \"p \\$_cimag (i1)\" \"expected a complex number\"\n gdb_test \"p \\$_creal (d1)\" \"expected a complex number\"\n gdb_test \"p \\$_creal (f1)\" \"expected a complex number\"\n gdb_test \"p \\$_creal (i1)\" \"expected a complex number\"\n+\n+#\n+# General complex number tests.\n+#\n+\n+gdb_test \"print 23 + 7i\" \" = 23 \\\\+ 7i\"\n+gdb_test \"print 23.125f + 7i\" \" = 23.125 \\\\+ 7i\"\n+gdb_test \"print 23 + 7.25fi\" \" = 23 \\\\+ 7.25i\"\n+gdb_test \"print (23 + 7i) + (17 + 10i)\" \" = 40 \\\\+ 17i\"\n+gdb_test \"print 23 + -7i\" \" = 23 \\\\+ -7i\"\n+gdb_test \"print 23 - 7i\" \" = 23 \\\\+ -7i\"\n+\n+gdb_test \"print -(23 + 7i)\" \" = -23 \\\\+ -7i\"\n+gdb_test \"print +(23 + 7i)\" \" = 23 \\\\+ 7i\"\n+gdb_test \"print ~(23 + 7i)\" \" = 23 \\\\+ -7i\"\n+\n+gdb_test \"print (5 + 5i) * (2 + 2i)\" \" = 0 \\\\+ 20i\"\n+\n+gdb_test \"print (5 + 7i) == (5 + 7i)\" \" = 1\"\n+gdb_test \"print (5 + 7i) == (8 + 7i)\" \" = 0\"\n+gdb_test \"print (5 + 7i) == (5 + 92i)\" \" = 0\"\n+gdb_test \"print (5 + 7i) != (5 + 7i)\" \" = 0\"\n+gdb_test \"print (5 + 7i) != (8 + 7i)\" \" = 1\"\n+gdb_test \"print (5 + 7i) != (5 + 92i)\" \" = 1\"\n+\n+gdb_test \"print (20 - 4i) / (3 + 2i)\" \" = 4 \\\\+ -4i\""
    },
    {
      "sha": "07cb5014bb2ca28d7dead6f461065d23bcaca1e1",
      "filename": "gdb/valarith.c",
      "status": "modified",
      "additions": 178,
      "deletions": 21,
      "changes": 199,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c34e87146628a14cf662dca46aac893d06502f52/gdb/valarith.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c34e87146628a14cf662dca46aac893d06502f52/gdb/valarith.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valarith.c?ref=c34e87146628a14cf662dca46aac893d06502f52",
      "patch": "@@ -911,6 +911,157 @@ value_args_as_target_float (struct value *arg1, struct value *arg2,\n \t     TYPE_NAME (type2));\n }\n \n+/* A helper function that finds the type to use for a binary operation\n+   involving TYPE1 and TYPE2.  */\n+\n+static struct type *\n+promotion_type (struct type *type1, struct type *type2)\n+{\n+  struct type *result_type;\n+\n+  if (is_floating_type (type1) || is_floating_type (type2))\n+    {\n+      /* If only one type is floating-point, use its type.\n+\t Otherwise use the bigger type.  */\n+      if (!is_floating_type (type1))\n+\tresult_type = type2;\n+      else if (!is_floating_type (type2))\n+\tresult_type = type1;\n+      else if (TYPE_LENGTH (type2) > TYPE_LENGTH (type1))\n+\tresult_type = type2;\n+      else\n+\tresult_type = type1;\n+    }\n+  else\n+    {\n+      /* Integer types.  */\n+      if (TYPE_LENGTH (type1) > TYPE_LENGTH (type2))\n+\tresult_type = type1;\n+      else if (TYPE_LENGTH (type2) > TYPE_LENGTH (type1))\n+\tresult_type = type2;\n+      else if (TYPE_UNSIGNED (type1))\n+\tresult_type = type1;\n+      else if (TYPE_UNSIGNED (type2))\n+\tresult_type = type2;\n+      else\n+\tresult_type = type1;\n+    }\n+\n+  return result_type;\n+}\n+\n+static struct value *scalar_binop (struct value *arg1, struct value *arg2,\n+\t\t\t\t   enum exp_opcode op);\n+\n+/* Perform a binary operation on complex operands.  */\n+\n+static struct value *\n+complex_binop (struct value *arg1, struct value *arg2, enum exp_opcode op)\n+{\n+  struct type *arg1_type = check_typedef (value_type (arg1));\n+  struct type *arg2_type = check_typedef (value_type (arg2));\n+\n+  struct value *arg1_real, *arg1_imag, *arg2_real, *arg2_imag;\n+  if (TYPE_CODE (arg1_type) == TYPE_CODE_COMPLEX)\n+    {\n+      arg1_real = value_real_part (arg1);\n+      arg1_imag = value_imaginary_part (arg1);\n+    }\n+  else\n+    {\n+      arg1_real = arg1;\n+      arg1_imag = value_zero (arg1_type, not_lval);\n+    }\n+  if (TYPE_CODE (arg2_type) == TYPE_CODE_COMPLEX)\n+    {\n+      arg2_real = value_real_part (arg2);\n+      arg2_imag = value_imaginary_part (arg2);\n+    }\n+  else\n+    {\n+      arg2_real = arg2;\n+      arg2_imag = value_zero (arg2_type, not_lval);\n+    }\n+\n+  struct type *comp_type = promotion_type (value_type (arg1_real),\n+\t\t\t\t\t   value_type (arg2_real));\n+  arg1_real = value_cast (comp_type, arg1_real);\n+  arg1_imag = value_cast (comp_type, arg1_imag);\n+  arg2_real = value_cast (comp_type, arg2_real);\n+  arg2_imag = value_cast (comp_type, arg2_imag);\n+\n+  struct type *result_type = init_complex_type (nullptr, comp_type);\n+\n+  struct value *result_real, *result_imag;\n+  switch (op)\n+    {\n+    case BINOP_ADD:\n+    case BINOP_SUB:\n+      result_real = scalar_binop (arg1_real, arg2_real, op);\n+      result_imag = scalar_binop (arg1_imag, arg2_imag, op);\n+      break;\n+\n+    case BINOP_MUL:\n+      {\n+\tstruct value *x1 = scalar_binop (arg1_real, arg2_real, op);\n+\tstruct value *x2 = scalar_binop (arg1_imag, arg2_imag, op);\n+\tresult_real = scalar_binop (x1, x2, BINOP_SUB);\n+\n+\tx1 = scalar_binop (arg1_real, arg2_imag, op);\n+\tx2 = scalar_binop (arg1_imag, arg2_real, op);\n+\tresult_imag = scalar_binop (x1, x2, BINOP_ADD);\n+      }\n+      break;\n+\n+    case BINOP_DIV:\n+      {\n+\tif (TYPE_CODE (arg2_type) == TYPE_CODE_COMPLEX)\n+\t  {\n+\t    struct value *conjugate = value_complement (arg2);\n+\t    /* We have to reconstruct ARG1, in case the type was\n+\t       promoted.  */\n+\t    arg1 = value_literal_complex (arg1_real, arg1_imag, result_type);\n+\n+\t    struct value *numerator = scalar_binop (arg1, conjugate,\n+\t\t\t\t\t\t    BINOP_MUL);\n+\t    arg1_real = value_real_part (numerator);\n+\t    arg1_imag = value_imaginary_part (numerator);\n+\n+\t    struct value *x1 = scalar_binop (arg2_real, arg2_real, BINOP_MUL);\n+\t    struct value *x2 = scalar_binop (arg2_imag, arg2_imag, BINOP_MUL);\n+\t    arg2_real = scalar_binop (x1, x2, BINOP_ADD);\n+\t  }\n+\n+\tresult_real = scalar_binop (arg1_real, arg2_real, op);\n+\tresult_imag = scalar_binop (arg1_imag, arg2_real, op);\n+      }\n+      break;\n+\n+    case BINOP_EQUAL:\n+    case BINOP_NOTEQUAL:\n+      {\n+\tstruct value *x1 = scalar_binop (arg1_real, arg2_real, op);\n+\tstruct value *x2 = scalar_binop (arg1_imag, arg2_imag, op);\n+\n+\tLONGEST v1 = value_as_long (x1);\n+\tLONGEST v2 = value_as_long (x2);\n+\n+\tif (op == BINOP_EQUAL)\n+\t  v1 = v1 && v2;\n+\telse\n+\t  v1 = v1 || v2;\n+\n+\treturn value_from_longest (value_type (x1), v1);\n+      }\n+      break;\n+\n+    default:\n+      error (_(\"Invalid binary operation on numbers.\"));\n+    }\n+\n+  return value_literal_complex (result_real, result_imag, result_type);\n+}\n+\n /* Perform a binary operation on two operands which have reasonable\n    representations as integers or floats.  This includes booleans,\n    characters, integers, or floats.\n@@ -929,23 +1080,17 @@ scalar_binop (struct value *arg1, struct value *arg2, enum exp_opcode op)\n   type1 = check_typedef (value_type (arg1));\n   type2 = check_typedef (value_type (arg2));\n \n+  if (TYPE_CODE (type1) == TYPE_CODE_COMPLEX\n+      || TYPE_CODE (type2) == TYPE_CODE_COMPLEX)\n+    return complex_binop (arg1, arg2, op);\n+\n   if ((!is_floating_value (arg1) && !is_integral_type (type1))\n       || (!is_floating_value (arg2) && !is_integral_type (type2)))\n     error (_(\"Argument to arithmetic operation not a number or boolean.\"));\n \n   if (is_floating_type (type1) || is_floating_type (type2))\n     {\n-      /* If only one type is floating-point, use its type.\n-\t Otherwise use the bigger type.  */\n-      if (!is_floating_type (type1))\n-\tresult_type = type2;\n-      else if (!is_floating_type (type2))\n-\tresult_type = type1;\n-      else if (TYPE_LENGTH (type2) > TYPE_LENGTH (type1))\n-\tresult_type = type2;\n-      else\n-\tresult_type = type1;\n-\n+      result_type = promotion_type (type1, type2);\n       val = allocate_value (result_type);\n \n       struct type *eff_type_v1, *eff_type_v2;\n@@ -1013,16 +1158,8 @@ scalar_binop (struct value *arg1, struct value *arg2, enum exp_opcode op)\n \t if one of the operands is unsigned.  */\n       if (op == BINOP_RSH || op == BINOP_LSH || op == BINOP_EXP)\n \tresult_type = type1;\n-      else if (TYPE_LENGTH (type1) > TYPE_LENGTH (type2))\n-\tresult_type = type1;\n-      else if (TYPE_LENGTH (type2) > TYPE_LENGTH (type1))\n-\tresult_type = type2;\n-      else if (TYPE_UNSIGNED (type1))\n-\tresult_type = type1;\n-      else if (TYPE_UNSIGNED (type2))\n-\tresult_type = type2;\n       else\n-\tresult_type = type1;\n+\tresult_type = promotion_type (type1, type2);\n \n       if (TYPE_UNSIGNED (result_type))\n \t{\n@@ -1629,7 +1766,8 @@ value_pos (struct value *arg1)\n   type = check_typedef (value_type (arg1));\n \n   if (is_integral_type (type) || is_floating_value (arg1)\n-      || (TYPE_CODE (type) == TYPE_CODE_ARRAY && TYPE_VECTOR (type)))\n+      || (TYPE_CODE (type) == TYPE_CODE_ARRAY && TYPE_VECTOR (type))\n+      || TYPE_CODE (type) == TYPE_CODE_COMPLEX)\n     return value_from_contents (type, value_contents (arg1));\n   else\n     error (_(\"Argument to positive operation not a number.\"));\n@@ -1663,6 +1801,15 @@ value_neg (struct value *arg1)\n \t}\n       return val;\n     }\n+  else if (TYPE_CODE (type) == TYPE_CODE_COMPLEX)\n+    {\n+      struct value *real = value_real_part (arg1);\n+      struct value *imag = value_imaginary_part (arg1);\n+\n+      real = value_neg (real);\n+      imag = value_neg (imag);\n+      return value_literal_complex (real, imag, type);\n+    }\n   else\n     error (_(\"Argument to negate operation not a number.\"));\n }\n@@ -1696,6 +1843,16 @@ value_complement (struct value *arg1)\n                   value_contents_all (tmp), TYPE_LENGTH (eltype));\n         }\n     }\n+  else if (TYPE_CODE (type) == TYPE_CODE_COMPLEX)\n+    {\n+      /* GCC has an extension that treats ~complex as the complex\n+\t conjugate.  */\n+      struct value *real = value_real_part (arg1);\n+      struct value *imag = value_imaginary_part (arg1);\n+\n+      imag = value_neg (imag);\n+      return value_literal_complex (real, imag, type);\n+    }\n   else\n     error (_(\"Argument to complement operation not an integer, boolean.\"));\n "
    }
  ]
}