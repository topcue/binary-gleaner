{
  "sha": "058430b4a1ed7441dfc2e167bfdb9dc89ea9a209",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDU4NDMwYjRhMWVkNzQ0MWRmYzJlMTY3YmZkYjlkYzg5ZWE5YTIwOQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-11-17T02:11:36Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-11-18T13:16:39Z"
    },
    "message": "Re: Stop Gas from generating line info or address ranges\n\n\t* doc/as.texi (.nop): Document optional size arg.\n\t* dwarf2dbg.c (dwarf2_gen_line_info_1): Only check SEC_ALLOC\n\twhen ELF.  Warn whenever dwarf line number information is ignored.\n\t* frags.c (frag_offset_ignore_align_p): New function.\n\t* frags.h (frag_offset_ignore_align_p): Declare.\n\t* read.c (s_nop): Extend to support optional size arg.\n\t* testsuite/gas/elf/dwarf2-20.d: Expect warnings, and exact range.\n\t* testsuite/gas/elf/dwarf2-20.s: Emit 16 bytes worth of nops.\n\t* testsuite/gas/m68hc11/indexed12.d: Expect warnings.",
    "tree": {
      "sha": "9b7ec856174062c736b1255b25f7f7e0edae6621",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9b7ec856174062c736b1255b25f7f7e0edae6621"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "99fabbc9739a87ba3433e66792e93b773896790e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/99fabbc9739a87ba3433e66792e93b773896790e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/99fabbc9739a87ba3433e66792e93b773896790e"
    }
  ],
  "stats": {
    "total": 154,
    "additions": 122,
    "deletions": 32
  },
  "files": [
    {
      "sha": "92665855507f8c5b7b5b8e04cf770807a68e395c",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=058430b4a1ed7441dfc2e167bfdb9dc89ea9a209",
      "patch": "@@ -1,3 +1,15 @@\n+2020-11-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* doc/as.texi (.nop): Document optional size arg.\n+\t* dwarf2dbg.c (dwarf2_gen_line_info_1): Only check SEC_ALLOC\n+\twhen ELF.  Warn whenever dwarf line number information is ignored.\n+\t* frags.c (frag_offset_ignore_align_p): New function.\n+\t* frags.h (frag_offset_ignore_align_p): Declare.\n+\t* read.c (s_nop): Extend to support optional size arg.\n+\t* testsuite/gas/elf/dwarf2-20.d: Expect warnings, and exact range.\n+\t* testsuite/gas/elf/dwarf2-20.s: Emit 16 bytes worth of nops.\n+\t* testsuite/gas/m68hc11/indexed12.d: Expect warnings.\n+\n 2020-11-18  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \tH.J. Lu  <hongjiu.lu@intel.com>\n "
    },
    {
      "sha": "983cec3cbf988becaf875a33f19a1813a5a3067d",
      "filename": "gas/doc/as.texi",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/gas/doc/as.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/gas/doc/as.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/as.texi?ref=058430b4a1ed7441dfc2e167bfdb9dc89ea9a209",
      "patch": "@@ -6169,14 +6169,18 @@ counter, and @code{.nolist} decrements it.  Assembly listings are\n generated whenever the counter is greater than zero.\n \n @node Nop\n-@section @code{.nop}\n+@section @code{.nop [@var{size}]}\n \n @cindex @code{nop} directive\n @cindex filling memory with no-op instructions\n-This directive emits a single no-op instruction.  It is provided on all\n-architectures, allowing the creation of architecture neutral tests involving\n-actual code.  The size of the generated instruction is target specific.  The\n-instruction does affect the generation of DWARF debug line information.\n+This directive emits no-op instructions.  It is provided on all architectures,\n+allowing the creation of architecture neutral tests involving actual code.  The\n+size of the generated instruction is target specific, but if the optional\n+@var{size} argument is given and resolves to an absolute positive value at that\n+point in assembly (no forward expressions allowed) then the fewest no-op\n+instructions are emitted that equal or exceed a total @var{size} in bytes.\n+@code{.nop} does affect the generation of DWARF debug line information.\n+Some targets do not support using @code{.nop} with @var{size}.\n \n @node Nops\n @section @code{.nops @var{size}[, @var{control}]}"
    },
    {
      "sha": "e927c5059b8af36cecb30cea37214e915f72c4cc",
      "filename": "gas/dwarf2dbg.c",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/gas/dwarf2dbg.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/gas/dwarf2dbg.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/dwarf2dbg.c?ref=058430b4a1ed7441dfc2e167bfdb9dc89ea9a209",
      "patch": "@@ -504,16 +504,18 @@ dwarf2_gen_line_info_1 (symbolS *label, struct dwarf2_line_info *loc)\n {\n   struct line_subseg *lss;\n   struct line_entry *e;\n-  flagword need_flags = SEC_ALLOC | SEC_LOAD | SEC_CODE;\n+  flagword need_flags = SEC_LOAD | SEC_CODE;\n \n-  /* PR 26850: Do not record LOCs in non-executable, non-allocated,\n-     or non-loaded sections.  */\n+  /* PR 26850: Do not record LOCs in non-executable or non-loaded\n+     sections.  SEC_ALLOC isn't tested for non-ELF because obj-coff.c\n+     obj_coff_section is careless in setting SEC_ALLOC.  */\n+  if (IS_ELF)\n+    need_flags |= SEC_ALLOC;\n   if ((now_seg->flags & need_flags) != need_flags)\n     {\n-      if (! SEG_NORMAL (now_seg))\n-\t/* FIXME: Add code to suppress multiple warnings ?  */\n-\tas_warn (\"dwarf line number information for %s ignored\",\n-\t\t segment_name (now_seg));\n+      /* FIXME: Add code to suppress multiple warnings ?  */\n+      as_warn (\"dwarf line number information for %s ignored\",\n+\t       segment_name (now_seg));\n       return;\n     }\n "
    },
    {
      "sha": "9ed4d7bc0d127fa25a695523c3091ef97b211416",
      "filename": "gas/frags.c",
      "status": "modified",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/gas/frags.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/gas/frags.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/frags.c?ref=058430b4a1ed7441dfc2e167bfdb9dc89ea9a209",
      "patch": "@@ -468,6 +468,48 @@ frag_offset_fixed_p (const fragS *frag1, const fragS *frag2, offsetT *offset)\n   return FALSE;\n }\n \n+/* Return TRUE if FRAG2 follows FRAG1 with a fixed relationship\n+   between the two assuming alignment frags do nothing.  Set OFFSET to\n+   the difference in address not already accounted for in the frag\n+   FR_ADDRESS.  */\n+\n+bfd_boolean\n+frag_offset_ignore_align_p (const fragS *frag1, const fragS *frag2,\n+\t\t\t    offsetT *offset)\n+{\n+  const fragS *frag;\n+  offsetT off;\n+\n+  /* Start with offset initialised to difference between the two frags.\n+     Prior to assigning frag addresses this will be zero.  */\n+  off = frag1->fr_address - frag2->fr_address;\n+  if (frag1 == frag2)\n+    {\n+      *offset = off;\n+      return TRUE;\n+    }\n+\n+  frag = frag1;\n+  while (frag->fr_type == rs_fill\n+\t || frag->fr_type == rs_align\n+\t || frag->fr_type == rs_align_code\n+\t || frag->fr_type == rs_align_test)\n+    {\n+      if (frag->fr_type == rs_fill)\n+\toff += frag->fr_fix + frag->fr_offset * frag->fr_var;\n+      frag = frag->fr_next;\n+      if (frag == NULL)\n+\tbreak;\n+      if (frag == frag2)\n+\t{\n+\t  *offset = off;\n+\t  return TRUE;\n+\t}\n+    }\n+\n+  return FALSE;\n+}\n+\n /* Return TRUE if we can determine whether FRAG2 OFF2 appears after\n    (strict >, not >=) FRAG1 OFF1, assuming it is not before.  Set\n    *OFFSET so that resolve_expression will resolve an O_gt operation"
    },
    {
      "sha": "6e519ab783b23bd46e5657b2654fcadaf3e3be1e",
      "filename": "gas/frags.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/gas/frags.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/gas/frags.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/frags.h?ref=058430b4a1ed7441dfc2e167bfdb9dc89ea9a209",
      "patch": "@@ -154,6 +154,8 @@ char *frag_var (relax_stateT type,\n \t\tchar *opcode);\n \n bfd_boolean frag_offset_fixed_p (const fragS *, const fragS *, offsetT *);\n+bfd_boolean frag_offset_ignore_align_p (const fragS *, const fragS *,\n+\t\t\t\t\toffsetT *);\n bfd_boolean frag_gtoffset_p (valueT, const fragS *, valueT, const fragS *,\n \t\t\t     offsetT *);\n "
    },
    {
      "sha": "a4c6e4ed83a9f33fbd09340b2bd02014de2898b9",
      "filename": "gas/read.c",
      "status": "modified",
      "additions": 32,
      "deletions": 14,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/gas/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/gas/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/read.c?ref=058430b4a1ed7441dfc2e167bfdb9dc89ea9a209",
      "patch": "@@ -3506,6 +3506,11 @@ s_space (int mult)\n void\n s_nop (int ignore ATTRIBUTE_UNUSED)\n {\n+  expressionS exp;\n+  fragS *start;\n+  addressT start_off;\n+  offsetT frag_off;\n+\n #ifdef md_flush_pending_output\n   md_flush_pending_output ();\n #endif\n@@ -3515,29 +3520,42 @@ s_nop (int ignore ATTRIBUTE_UNUSED)\n #endif\n \n   SKIP_WHITESPACE ();\n+  expression (&exp);\n   demand_empty_rest_of_line ();\n \n+  start = frag_now;\n+  start_off = frag_now_fix ();\n+  do\n+    {\n #ifdef md_emit_single_noop\n-  md_emit_single_noop;\n+      md_emit_single_noop;\n #else\n-  char * nop;\n+      char *nop;\n \n #ifndef md_single_noop_insn\n #define md_single_noop_insn \"nop\"\n #endif\n-  /* md_assemble might modify its argument, so\n-     we must pass it a string that is writeable.  */\n-  if (asprintf (&nop, \"%s\", md_single_noop_insn) < 0)\n-    as_fatal (\"%s\", xstrerror (errno));\n-\n-  /* Some targets assume that they can update input_line_pointer inside\n-     md_assemble, and, worse, that they can leave it assigned to the string\n-     pointer that was provided as an argument.  So preserve ilp here.  */\n-  char * saved_ilp = input_line_pointer;\n-  md_assemble (nop);\n-  input_line_pointer = saved_ilp;\n-  free (nop);\n+      /* md_assemble might modify its argument, so\n+\t we must pass it a string that is writable.  */\n+      if (asprintf (&nop, \"%s\", md_single_noop_insn) < 0)\n+\tas_fatal (\"%s\", xstrerror (errno));\n+\n+      /* Some targets assume that they can update input_line_pointer\n+\t inside md_assemble, and, worse, that they can leave it\n+\t assigned to the string pointer that was provided as an\n+\t argument.  So preserve ilp here.  */\n+      char *saved_ilp = input_line_pointer;\n+      md_assemble (nop);\n+      input_line_pointer = saved_ilp;\n+      free (nop);\n+#endif\n+#ifdef md_flush_pending_output\n+      md_flush_pending_output ();\n #endif\n+    } while (exp.X_op == O_constant\n+\t     && exp.X_add_number > 0\n+\t     && frag_offset_ignore_align_p (start, frag_now, &frag_off)\n+\t     && frag_off + frag_now_fix () < start_off + exp.X_add_number);\n }\n \n void"
    },
    {
      "sha": "7f3d21cec995e797e9cb8f7d8e69f7cbe9176f6b",
      "filename": "gas/testsuite/gas/elf/dwarf2-20.d",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/gas/testsuite/gas/elf/dwarf2-20.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/gas/testsuite/gas/elf/dwarf2-20.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/dwarf2-20.d?ref=058430b4a1ed7441dfc2e167bfdb9dc89ea9a209",
      "patch": "@@ -3,6 +3,12 @@\n #name: DWARF2_20: debug ranges ignore non-code sections\n # The mn10200 target has a pointer size of 3, but it does not use segment selectors.  This confuses DWARF and readelf will complain.\n #xfail: mn102*-*\n+# score-elf, tic6x-elf and xtensa-elf need special handling to support .nop 16\n+#xfail: score-* tic6x-* xtensa-*\n+#warning: .* \\.alloc0 ignored\n+#warning: .* \\.alloc1 ignored\n+#warning: .* \\.nonalloc ignored\n+#warning: .* \\.nonallocexec ignored\n \n Contents of the .debug_aranges section:\n \n@@ -13,6 +19,6 @@ Contents of the .debug_aranges section:\n [ \t]+Segment Size:[ \t]+0\n \n [ \t]+Address[ \t]+Length\n-[ \t]+0+000 0+00. \n+[ \t]+0+000 0+010 \n [ \t]+0+000 0+000 \n #pass"
    },
    {
      "sha": "00b631448be1d0acc8e4b01105671c272830cc39",
      "filename": "gas/testsuite/gas/elf/dwarf2-20.s",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/gas/testsuite/gas/elf/dwarf2-20.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/gas/testsuite/gas/elf/dwarf2-20.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/dwarf2-20.s?ref=058430b4a1ed7441dfc2e167bfdb9dc89ea9a209",
      "patch": "@@ -1,10 +1,10 @@\n \t.section .alloc0,\"a\"\n-\t.nop\n+\t.nop 16\n \t.section .alloc1,\"a\"\n-\t.nop\n+\t.nop 16\n \t.section .nonalloc,\"\"\n-\t.nop\n+\t.nop 16\n \t.section .allocexec,\"ax\"\n-\t.nop\n+\t.nop 16\n \t.section .nonallocexec,\"x\"\n-\t.nop\n+\t.nop 16"
    },
    {
      "sha": "08279d73941234b6f6a9091a0113c3578a245d15",
      "filename": "gas/testsuite/gas/m68hc11/indexed12.d",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/gas/testsuite/gas/m68hc11/indexed12.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/058430b4a1ed7441dfc2e167bfdb9dc89ea9a209/gas/testsuite/gas/m68hc11/indexed12.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/m68hc11/indexed12.d?ref=058430b4a1ed7441dfc2e167bfdb9dc89ea9a209",
      "patch": "@@ -2,6 +2,10 @@\n #as: -m68hc12 -gdwarf2\n #name: 68HC12 indexed addressing mode with 5, 9 and 16-bit offsets (indexed12)\n #source: indexed12.s\n+#warning: .* line number information for \\.data ignored\n+#warning: .* line number information for \\.data ignored\n+#warning: .* line number information for \\.data ignored\n+#warning: .* line number information for \\.data ignored\n \n .*: +file format elf32\\-m68hc12\n "
    }
  ]
}