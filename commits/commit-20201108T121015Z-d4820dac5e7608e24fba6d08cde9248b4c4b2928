{
  "sha": "d4820dac5e7608e24fba6d08cde9248b4c4b2928",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDQ4MjBkYWM1ZTc2MDhlMjRmYmE2ZDA4Y2RlOTI0OGI0YzRiMjkyOA==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-11-08T12:10:01Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-11-08T12:10:15Z"
    },
    "message": "gold: Avoid sharing Plugin_list::iterator\n\nclass Plugin_manager has\n\n  // A pointer to the current plugin.  Used while loading plugins.\n  Plugin_list::iterator current_;\n\nThe same iterator is shared by all threads. It is OK to use it to load\nplugins since only one thread loads plugins.  Avoid sharing Plugin_list\niterator in all other cases.\n\n\tPR gold/26200\n\t* plugin.cc (Plugin_manager::claim_file): Don't share Plugin_list\n\titerator.\n\t(Plugin_manager::all_symbols_read): Likewise.\n\t(Plugin_manager::cleanup): Likewise.",
    "tree": {
      "sha": "e679864fec0c2c99baf9f1f2cab0ad3ac2f60666",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e679864fec0c2c99baf9f1f2cab0ad3ac2f60666"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d4820dac5e7608e24fba6d08cde9248b4c4b2928",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4820dac5e7608e24fba6d08cde9248b4c4b2928",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d4820dac5e7608e24fba6d08cde9248b4c4b2928",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d4820dac5e7608e24fba6d08cde9248b4c4b2928/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a907d563de51b5288a7acae8df805428cc1b960d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a907d563de51b5288a7acae8df805428cc1b960d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a907d563de51b5288a7acae8df805428cc1b960d"
    }
  ],
  "stats": {
    "total": 42,
    "additions": 25,
    "deletions": 17
  },
  "files": [
    {
      "sha": "cb2ad727067ca43f804e89cbf7f43c41b06fa5e2",
      "filename": "gold/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4820dac5e7608e24fba6d08cde9248b4c4b2928/gold/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4820dac5e7608e24fba6d08cde9248b4c4b2928/gold/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/ChangeLog?ref=d4820dac5e7608e24fba6d08cde9248b4c4b2928",
      "patch": "@@ -1,3 +1,11 @@\n+2020-11-08  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR gold/26200\n+\t* plugin.cc (Plugin_manager::claim_file): Don't share Plugin_list\n+\titerator.\n+\t(Plugin_manager::all_symbols_read): Likewise.\n+\t(Plugin_manager::cleanup): Likewise.\n+\n 2020-11-03  Alan Modra  <amodra@gmail.com>\n \n \t* powerpc.cc (Target_powerpc::tocsave_loc): Return a pointer."
    },
    {
      "sha": "729ddca9f319c6c16c3c550746c3baddbb43db83",
      "filename": "gold/plugin.cc",
      "status": "modified",
      "additions": 17,
      "deletions": 17,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d4820dac5e7608e24fba6d08cde9248b4c4b2928/gold/plugin.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d4820dac5e7608e24fba6d08cde9248b4c4b2928/gold/plugin.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/plugin.cc?ref=d4820dac5e7608e24fba6d08cde9248b4c4b2928",
      "patch": "@@ -755,17 +755,17 @@ Plugin_manager::claim_file(Input_file* input_file, off_t offset,\n     this->objects_.push_back(elf_object);\n   this->in_claim_file_handler_ = true;\n \n-  for (this->current_ = this->plugins_.begin();\n-       this->current_ != this->plugins_.end();\n-       ++this->current_)\n+  for (Plugin_list::iterator p = this->plugins_.begin();\n+       p != this->plugins_.end();\n+       ++p)\n     {\n       // If we aren't yet in replacement phase, allow plugins to claim input\n       // files, otherwise notify the plugin of the new input file, if needed.\n       if (!this->in_replacement_phase_)\n-        {\n-          if ((*this->current_)->claim_file(&this->plugin_input_file_))\n-            {\n-              this->any_claimed_ = true;\n+\t{\n+\t  if ((*p)->claim_file(&this->plugin_input_file_))\n+\t    {\n+\t      this->any_claimed_ = true;\n               this->in_claim_file_handler_ = false;\n \n \t      if (this->recorder_ != NULL)\n@@ -775,7 +775,7 @@ Plugin_manager::claim_file(Input_file* input_file, off_t offset,\n \t\t\t\t\t\t: elf_object->name());\n \t\t  this->recorder_->claimed_file(objname,\n \t\t\t\t\t\toffset, filesize,\n-\t\t\t\t\t\t(*this->current_)->filename());\n+\t\t\t\t\t\t(*p)->filename());\n \t\t}\n \n               if (this->objects_.size() > handle\n@@ -790,7 +790,7 @@ Plugin_manager::claim_file(Input_file* input_file, off_t offset,\n         }\n       else\n         {\n-          (*this->current_)->new_input(&this->plugin_input_file_);\n+\t  (*p)->new_input(&this->plugin_input_file_);\n         }\n     }\n \n@@ -850,10 +850,10 @@ Plugin_manager::all_symbols_read(Workqueue* workqueue, Task* task,\n   layout->script_options()->set_defsym_uses_in_real_elf(symtab);\n   layout->script_options()->find_defsym_defs(this->defsym_defines_set_);\n \n-  for (this->current_ = this->plugins_.begin();\n-       this->current_ != this->plugins_.end();\n-       ++this->current_)\n-    (*this->current_)->all_symbols_read();\n+  for (Plugin_list::iterator p = this->plugins_.begin();\n+       p != this->plugins_.end();\n+       ++p)\n+    (*p)->all_symbols_read();\n \n   if (this->any_added_)\n     {\n@@ -1028,10 +1028,10 @@ Plugin_manager::cleanup()\n       close_all_descriptors();\n     }\n \n-  for (this->current_ = this->plugins_.begin();\n-       this->current_ != this->plugins_.end();\n-       ++this->current_)\n-    (*this->current_)->cleanup();\n+  for (Plugin_list::iterator p = this->plugins_.begin();\n+       p != this->plugins_.end();\n+       ++p)\n+    (*p)->cleanup();\n }\n \n // Make a new Pluginobj object.  This is called when the plugin calls"
    }
  ]
}