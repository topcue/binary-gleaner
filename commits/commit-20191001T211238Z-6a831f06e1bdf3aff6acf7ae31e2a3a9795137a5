{
  "sha": "6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmE4MzFmMDZlMWJkZjNhZmY2YWNmN2FlMzFlMmEzYTk3OTUxMzdhNQ==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-09-17T23:03:28Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-10-01T21:12:38Z"
    },
    "message": "Use new %p format suffixes in gdb\n\nThis changes various spots in gdb to use the new %p format suffixes.\n\ngdb/ChangeLog\n2019-10-01  Pedro Alves  <palves@redhat.com>\n\t    Tom Tromey  <tom@tromey.com>\n\n\t* symtab.c (print_symbol_info): Use %ps.\n\t(print_msymbol_info): Use %ps.\n\t* symfile.c (symbol_file_add_with_addrs): Use %ps.\n\t* printcmd.c (print_variable_and_value): Use %ps.\n\t* macrocmd.c (show_pp_source_pos): Use %ps.\n\t* infrun.c (print_exited_reason): Use ui_out::message.\n\t* breakpoint.c (watchpoint_check, print_one_breakpoint_location)\n\t(describe_other_breakpoints): Use ui_out::message and new\n\tformats.\n\t(say_where): Use new formats.\n\t(bkpt_print_it, tracepoint_print_one_detail): Use ui_out::message\n\tand new formats.",
    "tree": {
      "sha": "316d0ef4b369a0635a9132de2b5e63cdc2a94131",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/316d0ef4b369a0635a9132de2b5e63cdc2a94131"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2a3c1174c3c0db1140180fb3fc56ac324d1c0a7c"
    }
  ],
  "stats": {
    "total": 148,
    "additions": 77,
    "deletions": 71
  },
  "files": [
    {
      "sha": "980aa60571fb3be95f9fb011613a2c4f12c4be5e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5",
      "patch": "@@ -1,3 +1,19 @@\n+2019-10-01  Pedro Alves  <palves@redhat.com>\n+\t    Tom Tromey  <tom@tromey.com>\n+\n+\t* symtab.c (print_symbol_info): Use %ps.\n+\t(print_msymbol_info): Use %ps.\n+\t* symfile.c (symbol_file_add_with_addrs): Use %ps.\n+\t* printcmd.c (print_variable_and_value): Use %ps.\n+\t* macrocmd.c (show_pp_source_pos): Use %ps.\n+\t* infrun.c (print_exited_reason): Use ui_out::message.\n+\t* breakpoint.c (watchpoint_check, print_one_breakpoint_location)\n+\t(describe_other_breakpoints): Use ui_out::message and new\n+\tformats.\n+\t(say_where): Use new formats.\n+\t(bkpt_print_it, tracepoint_print_one_detail): Use ui_out::message\n+\tand new formats.\n+\n 2019-10-01  Pedro Alves  <palves@redhat.com>\n \t    Tom Tromey  <tom@tromey.com>\n "
    },
    {
      "sha": "2030687728cfd17e637f50baf8e1f629512cb8ef",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 30,
      "deletions": 35,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5",
      "patch": "@@ -4912,10 +4912,10 @@ watchpoint_check (bpstat bs)\n \t  if (uiout->is_mi_like_p ())\n \t    uiout->field_string\n \t      (\"reason\", async_reason_lookup (EXEC_ASYNC_WATCHPOINT_SCOPE));\n-\t  uiout->text (\"\\nWatchpoint \");\n-\t  uiout->field_signed (\"wpnum\", b->number);\n-\t  uiout->text (\" deleted because the program has left the block in\\n\"\n-\t\t       \"which its expression is valid.\\n\");\n+\t  uiout->message (\"\\nWatchpoint %pF deleted because the program has \"\n+\t\t\t  \"left the block in\\n\"\n+\t\t\t  \"which its expression is valid.\\n\",\n+\t\t\t  signed_field (\"wpnum\", b->number));\n \t}\n \n       /* Make sure the watchpoint's commands aren't executed.  */\n@@ -6141,10 +6141,9 @@ print_one_breakpoint_location (struct breakpoint *b,\n \t  && breakpoint_condition_evaluation_mode ()\n \t  == condition_evaluation_target)\n \t{\n-\t  uiout->text (\" (\");\n-\t  uiout->field_string (\"evaluated-by\",\n-\t\t\t       bp_condition_evaluator (b));\n-\t  uiout->text (\" evals)\");\n+\t  uiout->message (\" (%pF evals)\",\n+\t\t\t  string_field (\"evaluated-by\",\n+\t\t\t\t\tbp_condition_evaluator (b)));\n \t}\n       uiout->text (\"\\n\");\n     }\n@@ -6193,9 +6192,8 @@ print_one_breakpoint_location (struct breakpoint *b,\n   if (!part_of_multiple && b->ignore_count)\n     {\n       annotate_field (8);\n-      uiout->text (\"\\tignore next \");\n-      uiout->field_signed (\"ignore\", b->ignore_count);\n-      uiout->text (\" hits\\n\");\n+      uiout->message (\"\\tignore next %pF hits\\n\",\n+\t\t      signed_field (\"ignore\", b->ignore_count));\n     }\n \n   /* Note that an enable count of 1 corresponds to \"enable once\"\n@@ -6658,9 +6656,9 @@ describe_other_breakpoints (struct gdbarch *gdbarch,\n \t\t\t     (others > 1) ? \",\" \n \t\t\t     : ((others == 1) ? \" and\" : \"\"));\n \t  }\n-      printf_filtered (_(\"also set at pc \"));\n-      fputs_styled (paddress (gdbarch, pc), address_style.style (), gdb_stdout);\n-      printf_filtered (\".\\n\");\n+      current_uiout->message (_(\"also set at pc %ps.\\n\"),\n+\t\t\t      styled_string (address_style.style (),\n+\t\t\t\t\t     paddress (gdbarch, pc)));\n     }\n }\n \f\n@@ -12075,23 +12073,21 @@ say_where (struct breakpoint *b)\n   else\n     {\n       if (opts.addressprint || b->loc->symtab == NULL)\n-\t{\n-\t  printf_filtered (\" at \");\n-\t  fputs_styled (paddress (b->loc->gdbarch, b->loc->address),\n-\t\t\taddress_style.style (),\n-\t\t\tgdb_stdout);\n-\t}\n+\tprintf_filtered (\" at %ps\",\n+\t\t\t styled_string (address_style.style (),\n+\t\t\t\t\tpaddress (b->loc->gdbarch,\n+\t\t\t\t\t\t  b->loc->address)));\n       if (b->loc->symtab != NULL)\n \t{\n \t  /* If there is a single location, we can print the location\n \t     more nicely.  */\n \t  if (b->loc->next == NULL)\n \t    {\n-\t      puts_filtered (\": file \");\n-\t      fputs_styled (symtab_to_filename_for_display (b->loc->symtab),\n-\t\t\t    file_name_style.style (),\n-\t\t\t    gdb_stdout);\n-\t      printf_filtered (\", line %d.\",\n+\t      const char *filename\n+\t\t= symtab_to_filename_for_display (b->loc->symtab);\n+\t      printf_filtered (\": file %ps, line %d.\",\n+\t\t\t       styled_string (file_name_style.style (),\n+\t\t\t\t\t      filename),\n \t\t\t       b->loc->line_number);\n \t    }\n \t  else\n@@ -12389,18 +12385,18 @@ bkpt_print_it (bpstat bs)\n   annotate_breakpoint (b->number);\n   maybe_print_thread_hit_breakpoint (uiout);\n \n-  if (bp_temp)\n-    uiout->text (\"Temporary breakpoint \");\n-  else\n-    uiout->text (\"Breakpoint \");\n   if (uiout->is_mi_like_p ())\n     {\n       uiout->field_string (\"reason\",\n \t\t\t   async_reason_lookup (EXEC_ASYNC_BREAKPOINT_HIT));\n       uiout->field_string (\"disp\", bpdisp_text (b->disposition));\n     }\n-  uiout->field_signed (\"bkptno\", b->number);\n-  uiout->text (\", \");\n+  if (bp_temp)\n+    uiout->message (\"Temporary breakpoint %pF, \",\n+\t\t    signed_field (\"bkptno\", b->number));\n+  else\n+    uiout->message (\"Breakpoint %pF, \",\n+\t\t    signed_field (\"bkptno\", b->number));\n \n   return PRINT_SRC_AND_LOC;\n }\n@@ -12716,10 +12712,9 @@ tracepoint_print_one_detail (const struct breakpoint *self,\n     {\n       gdb_assert (self->type == bp_static_tracepoint);\n \n-      uiout->text (\"\\tmarker id is \");\n-      uiout->field_string (\"static-tracepoint-marker-string-id\",\n-\t\t\t   tp->static_trace_marker_id);\n-      uiout->text (\"\\n\");\n+      uiout->message (\"\\tmarker id is %pF\\n\",\n+\t\t      string_field (\"static-tracepoint-marker-string-id\",\n+\t\t\t\t    tp->static_trace_marker_id.c_str ()));\n     }\n }\n "
    },
    {
      "sha": "07aebfa678f48ede1ba8a59dd75291762a46d44c",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 7,
      "deletions": 12,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5",
      "patch": "@@ -7656,24 +7656,19 @@ print_exited_reason (struct ui_out *uiout, int exitstatus)\n     {\n       if (uiout->is_mi_like_p ())\n \tuiout->field_string (\"reason\", async_reason_lookup (EXEC_ASYNC_EXITED));\n-      uiout->text (\"[Inferior \");\n-      uiout->text (plongest (inf->num));\n-      uiout->text (\" (\");\n-      uiout->text (pidstr.c_str ());\n-      uiout->text (\") exited with code \");\n-      uiout->field_fmt (\"exit-code\", \"0%o\", (unsigned int) exitstatus);\n-      uiout->text (\"]\\n\");\n+      std::string exit_code_str\n+\t= string_printf (\"0%o\", (unsigned int) exitstatus);\n+      uiout->message (\"[Inferior %s (%s) exited with code %pF]\\n\",\n+\t\t      plongest (inf->num), pidstr.c_str (),\n+\t\t      string_field (\"exit-code\", exit_code_str.c_str ()));\n     }\n   else\n     {\n       if (uiout->is_mi_like_p ())\n \tuiout->field_string\n \t  (\"reason\", async_reason_lookup (EXEC_ASYNC_EXITED_NORMALLY));\n-      uiout->text (\"[Inferior \");\n-      uiout->text (plongest (inf->num));\n-      uiout->text (\" (\");\n-      uiout->text (pidstr.c_str ());\n-      uiout->text (\") exited normally]\\n\");\n+      uiout->message (\"[Inferior %s (%s) exited normally]\\n\",\n+\t\t      plongest (inf->num), pidstr.c_str ());\n     }\n }\n "
    },
    {
      "sha": "cb7267d07a3eeba5def1adfdd7b96e2804ac9c32",
      "filename": "gdb/macrocmd.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5/gdb/macrocmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5/gdb/macrocmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/macrocmd.c?ref=6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5",
      "patch": "@@ -120,8 +120,10 @@ show_pp_source_pos (struct ui_file *stream,\n                     int line)\n {\n   std::string fullname = macro_source_fullname (file);\n-  fputs_styled (fullname.c_str (), file_name_style.style (), stream);\n-  fprintf_filtered (stream, \":%d\\n\", line);\n+  fprintf_filtered (stream, \"%ps:%d\\n\",\n+\t\t    styled_string (file_name_style.style (),\n+\t\t\t\t   fullname.c_str ()),\n+\t\t    line);\n \n   while (file->included_by)\n     {"
    },
    {
      "sha": "c17afe29bb2072ffd81c1dd8242c5af8804ea17d",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5",
      "patch": "@@ -2214,9 +2214,8 @@ print_variable_and_value (const char *name, struct symbol *var,\n   if (!name)\n     name = SYMBOL_PRINT_NAME (var);\n \n-  fputs_filtered (n_spaces (2 * indent), stream);\n-  fputs_styled (name, variable_name_style.style (), stream);\n-  fputs_filtered (\" = \", stream);\n+  fprintf_filtered (stream, \"%s%ps = \", n_spaces (2 * indent),\n+\t\t    styled_string (variable_name_style.style (), name));\n \n   try\n     {"
    },
    {
      "sha": "ca1360f0a7ef396295c7309c2a195d72c9c0ced3",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5",
      "patch": "@@ -1106,11 +1106,8 @@ symbol_file_add_with_addrs (bfd *abfd, const char *name,\n       if (deprecated_pre_add_symbol_hook)\n \tdeprecated_pre_add_symbol_hook (name);\n       else\n-\t{\n-\t  puts_filtered (_(\"Reading symbols from \"));\n-\t  fputs_styled (name, file_name_style.style (), gdb_stdout);\n-\t  puts_filtered (\"...\\n\");\n-\t}\n+\tprintf_filtered (_(\"Reading symbols from %ps...\\n\"),\n+\t\t\t styled_string (file_name_style.style (), name));\n     }\n   syms_from_objfile (objfile, addrs, add_flags);\n \n@@ -1122,7 +1119,8 @@ symbol_file_add_with_addrs (bfd *abfd, const char *name,\n   if ((flags & OBJF_READNOW))\n     {\n       if (should_print)\n-\tprintf_filtered (_(\"Expanding full symbols from %s...\\n\"), name);\n+\tprintf_filtered (_(\"Expanding full symbols from %ps...\\n\"),\n+\t\t\t styled_string (file_name_style.style (), name));\n \n       if (objfile->sf)\n \tobjfile->sf->qf->expand_all_symtabs (objfile);\n@@ -1134,7 +1132,8 @@ symbol_file_add_with_addrs (bfd *abfd, const char *name,\n      file, and so printing it twice is just redundant.  */\n   if (should_print && !objfile_has_symbols (objfile)\n       && objfile->separate_debug_objfile == nullptr)\n-    printf_filtered (_(\"(No debugging symbols found in %s)\\n\"), name);\n+    printf_filtered (_(\"(No debugging symbols found in %ps)\\n\"),\n+\t\t     styled_string (file_name_style.style (), name));\n \n   if (should_print)\n     {"
    },
    {
      "sha": "df6b87f94836fd51cb95a3507bb8c68a297c035c",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=6a831f06e1bdf3aff6acf7ae31e2a3a9795137a5",
      "patch": "@@ -4748,9 +4748,9 @@ print_symbol_info (enum search_domain kind,\n \n       if (filename_cmp (last, s_filename) != 0)\n \t{\n-\t  fputs_filtered (\"\\nFile \", gdb_stdout);\n-\t  fputs_styled (s_filename, file_name_style.style (), gdb_stdout);\n-\t  fputs_filtered (\":\\n\", gdb_stdout);\n+\t  printf_filtered (_(\"\\nFile %ps:\\n\"),\n+\t\t\t   styled_string (file_name_style.style (),\n+\t\t\t\t\t  s_filename));\n \t}\n \n       if (SYMBOL_LINE (sym) != 0)\n@@ -4812,15 +4812,15 @@ print_msymbol_info (struct bound_minimal_symbol msymbol)\n   else\n     tmp = hex_string_custom (BMSYMBOL_VALUE_ADDRESS (msymbol),\n \t\t\t     16);\n-  fputs_styled (tmp, address_style.style (), gdb_stdout);\n-  fputs_filtered (\"  \", gdb_stdout);\n-  if (msymbol.minsym->text_p ())\n-    fputs_styled (MSYMBOL_PRINT_NAME (msymbol.minsym),\n-\t\t  function_name_style.style (),\n-\t\t  gdb_stdout);\n-  else\n-    fputs_filtered (MSYMBOL_PRINT_NAME (msymbol.minsym), gdb_stdout);\n-  fputs_filtered (\"\\n\", gdb_stdout);\n+\n+  ui_file_style sym_style = (msymbol.minsym->text_p ()\n+\t\t\t     ? function_name_style.style ()\n+\t\t\t     : ui_file_style ());\n+\n+  printf_filtered (_(\"%ps  %ps\\n\"),\n+\t\t   styled_string (address_style.style (), tmp),\n+\t\t   styled_string (sym_style,\n+\t\t\t\t  MSYMBOL_PRINT_NAME (msymbol.minsym)));\n }\n \n /* This is the guts of the commands \"info functions\", \"info types\", and"
    }
  ]
}