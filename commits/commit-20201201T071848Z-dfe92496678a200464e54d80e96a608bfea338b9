{
  "sha": "dfe92496678a200464e54d80e96a608bfea338b9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGZlOTI0OTY2NzhhMjAwNDY0ZTU0ZDgwZTk2YTYwOGJmZWEzMzhiOQ==",
  "commit": {
    "author": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2020-11-20T10:05:05Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2020-12-01T07:18:48Z"
    },
    "message": "RISC-V: Support to add implicit extensions.\n\nWe have to parse and add all arch string extensions at first, and then\nstart to add their implicit extensions.  That means we can always add\narch string extensions at the end of the subset list, but we need to\nsearch the right place to add their implicit extensions.  For now we\nfollow the following rules to add the implicit extensions,\n\n* Add zicsr and zifencei only when the i's version less than 2.1.\n* Add d, f and zicsr when q is found.\n* Add f and zicsr when d is found.\n* Add zicsr when f is found.\n\nBesides, we do not add the implicit extensions if they are already added\nin the subset list, or we cannot find their default versions according to\nthe chosen ISA spec.\n\n\tbfd/\n\t* elfnn-riscv.c (riscv_merge_std_ext): Updated since\n\triscv_lookup_subset is changed.\n\t* elfxx-riscv.c (riscv_ext_order): New Array used to compare the\n\textensions' order quickly.\n\t(riscv_init_ext_order): New function.  Init the riscv_ext_order\n\taccording to the riscv_supported_std_ext and parse_config[i].class\n\tautomatically.\n\t(riscv_compare_subsets): New function.  Similar to the strcmp, but\n\tcompare the subsets with the specific order.\n\t(riscv_lookup_subset): Return TRUE and set `current` to the subset\n\tif it is found.  Otherwise, return FALSE and set `current` to the\n\tplace where we should insert the subset.\n\t(riscv_add_implicit_subset): New function.  Search the list first,\n\tand then find the right place to add the implicit_subset.\n\t(riscv_parse_add_subset): Since We have to add all arch string\n\textensions first, and then start to add their implicit extensions.\n\tWe can add arch string extensions in order by the original\n\triscv_add_subset, and then add the implicit subsets by the\n\triscv_add_implicit_subset.  Besides, do not add the implicit\n\textensions if we failed to find their default versions.\n\t(riscv_parse_std_ext): Updated.\n\t(riscv_parse_add_implicit_subsets): New function.  Add all implicit\n\textensions according to the arch string extensions.\n\t(riscv_parse_subset): Call riscv_init_ext_order and\n\triscv_parse_add_implicit_subsets, before and after parsing the\n\tarch string.  Remove parts of the ISA conflict checking since\n\tthe implicit extensions are added.\n\t* elfxx-riscv.h (riscv_lookup_subset): Updated.\n\n\tgas/\n\t* config/tc-riscv.c (riscv_subset_supports): Updated.\n\t* testsuite/gas/riscv/march-imply-i2p0.d: New testcase.  Need to\n\tadd the implicit zicsr and zifencei when i's version less than 2.1.\n\t* testsuite/gas/riscv/march-imply-i2p1.d: New testcase.\n\t* testsuite/gas/riscv/march-imply-d.d: Likewise.\n\t* testsuite/gas/riscv/march-imply-f.d: Likewise.\n\t* testsuite/gas/riscv/march-imply-q.d: Likewise.\n\t* testsuite/gas/riscv/march-fail-rv32iq.l: Updated.\n\t* testsuite/gas/riscv/march-fail-rv32id.d: Removed.\n\t* testsuite/gas/riscv/march-fail-rv32id.l: Likewise.\n\t* testsuite/gas/riscv/march-fail-rv64iq.d: Likewise.\n\t* testsuite/gas/riscv/march-fail-rv64iq.l: Likewise.",
    "tree": {
      "sha": "bdb1591a6dc6f76a781ffaaf2abef7663852f1b4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bdb1591a6dc6f76a781ffaaf2abef7663852f1b4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dfe92496678a200464e54d80e96a608bfea338b9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dfe92496678a200464e54d80e96a608bfea338b9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dfe92496678a200464e54d80e96a608bfea338b9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dfe92496678a200464e54d80e96a608bfea338b9/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "7ef19aa616aee98f0a5c7c948d0db56a9f3c5e57",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ef19aa616aee98f0a5c7c948d0db56a9f3c5e57",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7ef19aa616aee98f0a5c7c948d0db56a9f3c5e57"
    }
  ],
  "stats": {
    "total": 384,
    "additions": 315,
    "deletions": 69
  },
  "files": [
    {
      "sha": "927e688c8191319d0c2478ac6da966a7a32e01ef",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfe92496678a200464e54d80e96a608bfea338b9/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfe92496678a200464e54d80e96a608bfea338b9/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=dfe92496678a200464e54d80e96a608bfea338b9",
      "patch": "@@ -1,3 +1,34 @@\n+2020-12-01  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* elfnn-riscv.c (riscv_merge_std_ext): Updated since\n+\triscv_lookup_subset is changed.\n+\t* elfxx-riscv.c (riscv_ext_order): New Array used to compare the\n+\textensions' order quickly.\n+\t(riscv_init_ext_order): New function.  Init the riscv_ext_order\n+\taccording to the riscv_supported_std_ext and parse_config[i].class\n+\tautomatically.\n+\t(riscv_compare_subsets): New function.  Similar to the strcmp, but\n+\tcompare the subsets with the specific order.\n+\t(riscv_lookup_subset): Return TRUE and set `current` to the subset\n+\tif it is found.  Otherwise, return FALSE and set `current` to the\n+\tplace where we should insert the subset.\n+\t(riscv_add_implicit_subset): New function.  Search the list first,\n+\tand then find the right place to add the implicit_subset.\n+\t(riscv_parse_add_subset): Since We have to add all arch string\n+\textensions first, and then start to add their implicit extensions.\n+\tWe can add arch string extensions in order by the original\n+\triscv_add_subset, and then add the implicit subsets by the\n+\triscv_add_implicit_subset.  Besides, do not add the implicit\n+\textensions if we failed to find their default versions.\n+\t(riscv_parse_std_ext): Updated.\n+\t(riscv_parse_add_implicit_subsets): New function.  Add all implicit\n+\textensions according to the arch string extensions.\n+\t(riscv_parse_subset): Call riscv_init_ext_order and\n+\triscv_parse_add_implicit_subsets, before and after parsing the\n+\tarch string.  Remove parts of the ISA conflict checking since\n+\tthe implicit extensions are added.\n+\t* elfxx-riscv.h (riscv_lookup_subset): Updated.\n+\n 2020-12-01  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* elfxx-riscv.c (riscv_lookup_subset): Moved to front."
    },
    {
      "sha": "20944c8109ffc7cb2553bdc4218703b4f8b8b6f3",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 12,
      "deletions": 9,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfe92496678a200464e54d80e96a608bfea338b9/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfe92496678a200464e54d80e96a608bfea338b9/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=dfe92496678a200464e54d80e96a608bfea338b9",
      "patch": "@@ -3380,21 +3380,24 @@ riscv_merge_std_ext (bfd *ibfd,\n   /* Handle standard extension first.  */\n   for (p = standard_exts; *p; ++p)\n     {\n+      struct riscv_subset_t *ext_in, *ext_out, *ext_merged;\n       char find_ext[2] = {*p, '\\0'};\n-      struct riscv_subset_t *find_in =\n-\triscv_lookup_subset (&in_subsets, find_ext);\n-      struct riscv_subset_t *find_out =\n-\triscv_lookup_subset (&out_subsets, find_ext);\n+      bfd_boolean find_in, find_out;\n \n-      if (find_in == NULL && find_out == NULL)\n+      find_in = riscv_lookup_subset (&in_subsets, find_ext, &ext_in);\n+      find_out = riscv_lookup_subset (&out_subsets, find_ext, &ext_out);\n+\n+      if (!find_in && !find_out)\n \tcontinue;\n \n-      if (!riscv_version_mismatch (ibfd, find_in, find_out))\n+      if (find_in\n+\t  && find_out\n+\t  && !riscv_version_mismatch (ibfd, ext_in, ext_out))\n \treturn FALSE;\n \n-      struct riscv_subset_t *merged = find_out ? find_out : find_in;\n-      riscv_add_subset (&merged_subsets, merged->name,\n-\t\t\tmerged->major_version, merged->minor_version);\n+      ext_merged = find_out ? ext_out : ext_in;\n+      riscv_add_subset (&merged_subsets, ext_merged->name,\n+\t\t\text_merged->major_version, ext_merged->minor_version);\n     }\n \n   /* Skip all standard extensions.  */"
    },
    {
      "sha": "6244967d7b13de2f1a942c35e90578203f5e8632",
      "filename": "bfd/elfxx-riscv.c",
      "status": "modified",
      "additions": 221,
      "deletions": 46,
      "changes": 267,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfe92496678a200464e54d80e96a608bfea338b9/bfd/elfxx-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfe92496678a200464e54d80e96a608bfea338b9/bfd/elfxx-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.c?ref=dfe92496678a200464e54d80e96a608bfea338b9",
      "patch": "@@ -1025,22 +1025,75 @@ riscv_elf_add_sub_reloc (bfd *abfd,\n   return bfd_reloc_ok;\n }\n \n-/* Find subset in list, return NULL if not found.  */\n+/* Array is used to compare the all extensions' order quickly.\n \n-riscv_subset_t *\n-riscv_lookup_subset (const riscv_subset_list_t *subset_list,\n-\t\t     const char *subset)\n+   Zero     number means it is a preserved keyword.\n+   Negative number means it is a prefix keyword (s, h, x, z).\n+   Positive number means it is a standard extension.  */\n+\n+static int riscv_ext_order[26] = {0};\n+\n+/* Similar to the strcmp.  It returns an integer less than, equal to,\n+   or greater than zero if `subset2` is found, respectively, to be less\n+   than, to match, or be greater than `subset1`.  */\n+\n+static int\n+riscv_compare_subsets (const char *subset1, const char *subset2)\n {\n-  riscv_subset_t *s;\n+  int order1 = riscv_ext_order[(*subset1 - 'a')];\n+  int order2 = riscv_ext_order[(*subset2 - 'a')];\n \n-  for (s = subset_list->head; s != NULL; s = s->next)\n-    if (strcasecmp (s->name, subset) == 0)\n-      return s;\n+  /* Compare the standard extension first.  */\n+  if (order1 > 0 && order2 > 0)\n+    return order1 - order2;\n \n-  return NULL;\n+  if (order1 == order2 && order1 < 0)\n+    {\n+      /* Compare the standard addition z extensions.  */\n+      if (*subset1 == 'z')\n+\t{\n+\t  order1 = riscv_ext_order[(*++subset1 - 'a')];\n+\t  order2 = riscv_ext_order[(*++subset2 - 'a')];\n+\t  if (order1 != order2)\n+\t    return order1 - order2;\n+\t}\n+      return strcasecmp (++subset1, ++subset2);\n+    }\n+\n+  return order2 - order1;\n }\n \n-/* Add extension to the subset list.  */\n+/* Find subset in the list.  Return TRUE and set `current` to the subset\n+   if it is found.  Otherwise, return FALSE and set `current` to the place\n+   where we should insert the subset.  However, return FALSE with the NULL\n+   `current` means we should insert the subset at the head of subset list,\n+   if needed.  */\n+\n+bfd_boolean\n+riscv_lookup_subset (const riscv_subset_list_t *subset_list,\n+\t\t     const char *subset,\n+\t\t     riscv_subset_t **current)\n+{\n+  riscv_subset_t *s, *pre_s = NULL;\n+\n+  for (s = subset_list->head;\n+       s != NULL;\n+       pre_s = s, s = s->next)\n+    {\n+      int cmp = riscv_compare_subsets (s->name, subset);\n+      if (cmp == 0)\n+\t{\n+\t  *current = s;\n+\t  return TRUE;\n+\t}\n+      else if (cmp > 0)\n+\tbreak;\n+    }\n+  *current = pre_s;\n+  return FALSE;\n+}\n+\n+/* Add arch string extension to the last of the subset list.  */\n \n void\n riscv_add_subset (riscv_subset_list_t *subset_list,\n@@ -1063,15 +1116,53 @@ riscv_add_subset (riscv_subset_list_t *subset_list,\n   subset_list->tail = s;\n }\n \n-/* Find the default versions for the extension before adding them to\n+/* Add the implicit extension to the subset list.  Search the\n+   list first, and then find the right place to add.  */\n+\n+static void\n+riscv_add_implicit_subset (riscv_subset_list_t *subset_list,\n+\t\t\t   const char *subset,\n+\t\t\t   int major,\n+\t\t\t   int minor)\n+{\n+  riscv_subset_t *current, *new;\n+\n+  if (riscv_lookup_subset (subset_list, subset, &current))\n+    return;\n+\n+  new = xmalloc (sizeof *new);\n+  new->name = xstrdup (subset);\n+  new->major_version = major;\n+  new->minor_version = minor;\n+  new->next = NULL;\n+\n+  if (current != NULL)\n+    {\n+      new->next = current->next;\n+      current->next = new;\n+    }\n+  else\n+    {\n+      new->next = subset_list->head;\n+      subset_list->head = new;\n+    }\n+}\n+\n+/* We have to add all arch string extensions first, and then start to\n+   add their implicit extensions.  The arch string extensions must be\n+   set in order, so we can add them to the last of the subset list\n+   directly, without searching.\n+\n+   Find the default versions for the extension before adding them to\n    the subset list, if their versions are RISCV_UNKNOWN_VERSION.\n    Afterwards, report errors if we can not find their default versions.  */\n \n static void\n riscv_parse_add_subset (riscv_parse_subset_t *rps,\n \t\t\tconst char *subset,\n \t\t\tint major,\n-\t\t\tint minor)\n+\t\t\tint minor,\n+\t\t\tbfd_boolean implicit)\n {\n   int major_version = major;\n   int minor_version = minor;\n@@ -1081,8 +1172,9 @@ riscv_parse_add_subset (riscv_parse_subset_t *rps,\n       && rps->get_default_version != NULL)\n     rps->get_default_version (subset, &major_version, &minor_version);\n \n-  if (major_version == RISCV_UNKNOWN_VERSION\n-      || minor_version == RISCV_UNKNOWN_VERSION)\n+  if (!implicit\n+      && (major_version == RISCV_UNKNOWN_VERSION\n+\t  || minor_version == RISCV_UNKNOWN_VERSION))\n     {\n       if (subset[0] == 'x')\n \trps->error_handler\n@@ -1095,8 +1187,15 @@ riscv_parse_add_subset (riscv_parse_subset_t *rps,\n       return;\n     }\n \n-  riscv_add_subset (rps->subset_list, subset,\n-\t\t    major_version, minor_version);\n+  if (!implicit)\n+    riscv_add_subset (rps->subset_list, subset,\n+\t\t      major_version, minor_version);\n+  else if (major_version != RISCV_UNKNOWN_VERSION\n+\t   && minor_version != RISCV_UNKNOWN_VERSION)\n+    /* We only add the implicit extension if it is supported in the\n+       chosen ISA spec.  */\n+    riscv_add_implicit_subset (rps->subset_list, subset,\n+\t\t\t       major_version, minor_version);\n }\n \n /* Release subset list.  */\n@@ -1230,7 +1329,7 @@ riscv_parse_std_ext (riscv_parse_subset_t *rps,\n \t\t\t\t\t  &minor_version, TRUE);\n \triscv_parse_add_subset (rps, \"i\",\n \t\t\t\tmajor_version,\n-\t\t\t\tminor_version);\n+\t\t\t\tminor_version, FALSE);\n \tbreak;\n \n       case 'e':\n@@ -1239,11 +1338,11 @@ riscv_parse_std_ext (riscv_parse_subset_t *rps,\n \t\t\t\t\t  &minor_version, TRUE);\n \triscv_parse_add_subset (rps, \"e\",\n \t\t\t\tmajor_version,\n-\t\t\t\tminor_version);\n+\t\t\t\tminor_version, FALSE);\n \t/* i-ext must be enabled.  */\n \triscv_parse_add_subset (rps, \"i\",\n \t\t\t\tRISCV_UNKNOWN_VERSION,\n-\t\t\t\tRISCV_UNKNOWN_VERSION);\n+\t\t\t\tRISCV_UNKNOWN_VERSION, FALSE);\n \n \tif (*rps->xlen > 32)\n \t  {\n@@ -1263,13 +1362,13 @@ riscv_parse_std_ext (riscv_parse_subset_t *rps,\n \t/* i-ext must be enabled.  */\n \triscv_parse_add_subset (rps, \"i\",\n \t\t\t\tRISCV_UNKNOWN_VERSION,\n-\t\t\t\tRISCV_UNKNOWN_VERSION);\n+\t\t\t\tRISCV_UNKNOWN_VERSION, FALSE);\n \tfor ( ; *std_exts != 'q'; std_exts++)\n \t  {\n \t    subset[0] = *std_exts;\n \t    riscv_parse_add_subset (rps, subset,\n \t\t\t\t    RISCV_UNKNOWN_VERSION,\n-\t\t\t\t    RISCV_UNKNOWN_VERSION);\n+\t\t\t\t    RISCV_UNKNOWN_VERSION, FALSE);\n \t  }\n \tbreak;\n \n@@ -1316,7 +1415,7 @@ riscv_parse_std_ext (riscv_parse_subset_t *rps,\n \t\t\t\t\t&minor_version, TRUE);\n       riscv_parse_add_subset (rps, subset,\n \t\t\t      major_version,\n-\t\t\t      minor_version);\n+\t\t\t      minor_version, FALSE);\n     }\n \n   return p;\n@@ -1453,7 +1552,7 @@ riscv_parse_prefixed_ext (riscv_parse_subset_t *rps,\n \n       riscv_parse_add_subset (rps, subset,\n \t\t\t      major_version,\n-\t\t\t      minor_version);\n+\t\t\t      minor_version, FALSE);\n       free (subset);\n       p += end_of_version - subset;\n \n@@ -1559,6 +1658,92 @@ static const riscv_parse_config_t parse_config[] =\n   {RV_ISA_CLASS_UNKNOWN, NULL, NULL}\n };\n \n+/* Init the riscv_ext_order array.  */\n+\n+static void\n+riscv_init_ext_order (void)\n+{\n+  static bfd_boolean inited = FALSE;\n+  const char *std_base_exts = \"eig\";\n+  const char *std_remain_exts = riscv_supported_std_ext ();\n+  const char *ext;\n+  unsigned int i;\n+  int order;\n+\n+  if (inited)\n+    return;\n+\n+  /* All standard extensions' orders are positive numbers.  */\n+  order = 1;\n+\n+  /* Init the standard base extensions first.  */\n+  for (ext = std_base_exts; *ext; ext++)\n+    riscv_ext_order[(*ext - 'a')] = order++;\n+\n+  /* Init the standard remaining extensions.  */\n+  for (ext = std_remain_exts; *ext; ext++)\n+    riscv_ext_order[(*ext - 'a')] = order++;\n+\n+  /* Init the order for prefixed keywords.  The orders are\n+     negative numbers.  */\n+  order = -1;\n+  for (i = 0; parse_config[i].class != RV_ISA_CLASS_UNKNOWN; i++)\n+    {\n+      ext = parse_config[i].prefix;\n+      riscv_ext_order[(*ext - 'a')] = order--;\n+    }\n+\n+  inited = TRUE;\n+}\n+\n+/* Add the implicit extensions according to the arch string extensions.  */\n+\n+static void\n+riscv_parse_add_implicit_subsets (riscv_parse_subset_t *rps)\n+{\n+  riscv_subset_t *subset = NULL;\n+\n+  /* Add the zicsr and zifencei only when the i's version less than 2.1.  */\n+  if ((riscv_lookup_subset (rps->subset_list, \"i\", &subset))\n+      && (subset->major_version < 2\n+\t  || (subset->major_version == 2\n+\t      && subset->minor_version < 1)))\n+    {\n+      riscv_parse_add_subset (rps, \"zicsr\",\n+\t\t\t      RISCV_UNKNOWN_VERSION,\n+\t\t\t      RISCV_UNKNOWN_VERSION, TRUE);\n+      riscv_parse_add_subset (rps, \"zifencei\",\n+\t\t\t      RISCV_UNKNOWN_VERSION,\n+\t\t\t      RISCV_UNKNOWN_VERSION, TRUE);\n+    }\n+\n+  if ((riscv_lookup_subset (rps->subset_list, \"q\", &subset)))\n+    {\n+      riscv_parse_add_subset (rps, \"d\",\n+\t\t\t      RISCV_UNKNOWN_VERSION,\n+\t\t\t      RISCV_UNKNOWN_VERSION, TRUE);\n+      riscv_parse_add_subset (rps, \"f\",\n+\t\t\t      RISCV_UNKNOWN_VERSION,\n+\t\t\t      RISCV_UNKNOWN_VERSION, TRUE);\n+      riscv_parse_add_subset (rps, \"zicsr\",\n+\t\t\t      RISCV_UNKNOWN_VERSION,\n+\t\t\t      RISCV_UNKNOWN_VERSION, TRUE);\n+    }\n+  else if ((riscv_lookup_subset (rps->subset_list, \"d\", &subset)))\n+    {\n+      riscv_parse_add_subset (rps, \"f\",\n+\t\t\t      RISCV_UNKNOWN_VERSION,\n+\t\t\t      RISCV_UNKNOWN_VERSION, TRUE);\n+      riscv_parse_add_subset (rps, \"zicsr\",\n+\t\t\t      RISCV_UNKNOWN_VERSION,\n+\t\t\t      RISCV_UNKNOWN_VERSION, TRUE);\n+    }\n+  else if ((riscv_lookup_subset (rps->subset_list, \"f\", &subset)))\n+    riscv_parse_add_subset (rps, \"zicsr\",\n+\t\t\t    RISCV_UNKNOWN_VERSION,\n+\t\t\t    RISCV_UNKNOWN_VERSION, TRUE);\n+}\n+\n /* Function for parsing arch string.\n \n    Return Value:\n@@ -1572,6 +1757,7 @@ bfd_boolean\n riscv_parse_subset (riscv_parse_subset_t *rps,\n \t\t    const char *arch)\n {\n+  riscv_subset_t *subset = NULL;\n   const char *p;\n   size_t i;\n   bfd_boolean no_conflict = TRUE;\n@@ -1612,6 +1798,10 @@ riscv_parse_subset (riscv_parse_subset_t *rps,\n       return FALSE;\n     }\n \n+  /* Init the riscv_ext_order array to compare the order of extensions\n+     quickly.  */\n+  riscv_init_ext_order ();\n+\n   /* Parsing standard extension.  */\n   p = riscv_parse_std_ext (rps, arch, p);\n \n@@ -1634,42 +1824,27 @@ riscv_parse_subset (riscv_parse_subset_t *rps,\n       return FALSE;\n     }\n \n+  /* Finally add implicit extensions according to the current\n+     extensions.  */\n+  riscv_parse_add_implicit_subsets (rps);\n+\n   /* Check the conflicts.  */\n-  if (riscv_lookup_subset (rps->subset_list, \"e\")\n-      && riscv_lookup_subset (rps->subset_list, \"f\"))\n+  if (riscv_lookup_subset (rps->subset_list, \"e\", &subset)\n+      && riscv_lookup_subset (rps->subset_list, \"f\", &subset))\n     {\n       rps->error_handler\n \t(_(\"-march=%s: rv32e does not support the `f' extension\"),\n \t arch);\n       no_conflict = FALSE;\n     }\n-\n-  if (riscv_lookup_subset (rps->subset_list, \"q\") && *rps->xlen < 64)\n+  if (riscv_lookup_subset (rps->subset_list, \"q\", &subset)\n+      && *rps->xlen < 64)\n     {\n       rps->error_handler\n \t(_(\"-march=%s: rv32 does not support the `q' extension\"),\n \t arch);\n       no_conflict = FALSE;\n     }\n-\n-  if (riscv_lookup_subset (rps->subset_list, \"d\")\n-      && !riscv_lookup_subset (rps->subset_list, \"f\"))\n-    {\n-      rps->error_handler\n-\t(_(\"-march=%s: `d' extension requires `f' extension\"),\n-\t arch);\n-      no_conflict = FALSE;\n-    }\n-\n-  if (riscv_lookup_subset (rps->subset_list, \"q\")\n-      && !riscv_lookup_subset (rps->subset_list, \"d\"))\n-    {\n-      rps->error_handler\n-\t(_(\"-march=%s: `q' extension requires `d' extension\"),\n-\t arch);\n-      no_conflict = FALSE;\n-    }\n-\n   return no_conflict;\n }\n "
    },
    {
      "sha": "89d4abb86e5f18ccf21ad508d6c0291e547bf0e8",
      "filename": "bfd/elfxx-riscv.h",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfe92496678a200464e54d80e96a608bfea338b9/bfd/elfxx-riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfe92496678a200464e54d80e96a608bfea338b9/bfd/elfxx-riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-riscv.h?ref=dfe92496678a200464e54d80e96a608bfea338b9",
      "patch": "@@ -60,9 +60,10 @@ riscv_add_subset (riscv_subset_list_t *,\n \t\t  const char *,\n \t\t  int, int);\n \n-extern riscv_subset_t *\n+extern bfd_boolean\n riscv_lookup_subset (const riscv_subset_list_t *,\n-\t\t     const char *);\n+\t\t     const char *,\n+\t\t     riscv_subset_t **);\n \n typedef struct\n {"
    },
    {
      "sha": "0cf20e6fad7d1aa04975c2ea91c5b32b61dca983",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfe92496678a200464e54d80e96a608bfea338b9/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfe92496678a200464e54d80e96a608bfea338b9/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=dfe92496678a200464e54d80e96a608bfea338b9",
      "patch": "@@ -1,3 +1,18 @@\n+2020-12-01  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* config/tc-riscv.c (riscv_subset_supports): Updated.\n+\t* testsuite/gas/riscv/march-imply-i2p0.d: New testcase.  Need to\n+\tadd the implicit zicsr and zifencei when i's version less than 2.1.\n+\t* testsuite/gas/riscv/march-imply-i2p1.d: New testcase.\n+\t* testsuite/gas/riscv/march-imply-d.d: Likewise.\n+\t* testsuite/gas/riscv/march-imply-f.d: Likewise.\n+\t* testsuite/gas/riscv/march-imply-q.d: Likewise.\n+\t* testsuite/gas/riscv/march-fail-rv32iq.l: Updated.\n+\t* testsuite/gas/riscv/march-fail-rv32id.d: Removed.\n+\t* testsuite/gas/riscv/march-fail-rv32id.l: Likewise.\n+\t* testsuite/gas/riscv/march-fail-rv64iq.d: Likewise.\n+\t* testsuite/gas/riscv/march-fail-rv64iq.l: Likewise.\n+\n 2020-12-01  Nelson Chu  <nelson.chu@sifive.com>\n \n \t* config/tc-riscv.c (riscv_get_default_ext_version):"
    },
    {
      "sha": "5e140fe174bac969238ee25dd3e7776d93adc8a9",
      "filename": "gas/config/tc-riscv.c",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfe92496678a200464e54d80e96a608bfea338b9/gas/config/tc-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfe92496678a200464e54d80e96a608bfea338b9/gas/config/tc-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.c?ref=dfe92496678a200464e54d80e96a608bfea338b9",
      "patch": "@@ -218,10 +218,12 @@ static riscv_subset_list_t riscv_subsets;\n static bfd_boolean\n riscv_subset_supports (const char *feature)\n {\n+  struct riscv_subset_t *subset;\n+\n   if (riscv_opts.rvc && (strcasecmp (feature, \"c\") == 0))\n     return TRUE;\n \n-  return riscv_lookup_subset (&riscv_subsets, feature) != NULL;\n+  return riscv_lookup_subset (&riscv_subsets, feature, &subset);\n }\n \n static bfd_boolean"
    },
    {
      "sha": "de741cbc81df81bbb8b60285ace5b34a62613482",
      "filename": "gas/testsuite/gas/riscv/march-fail-rv32id.d",
      "status": "removed",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ef19aa616aee98f0a5c7c948d0db56a9f3c5e57/gas/testsuite/gas/riscv/march-fail-rv32id.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ef19aa616aee98f0a5c7c948d0db56a9f3c5e57/gas/testsuite/gas/riscv/march-fail-rv32id.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-rv32id.d?ref=7ef19aa616aee98f0a5c7c948d0db56a9f3c5e57",
      "patch": "@@ -1,3 +0,0 @@\n-#as: -march=rv32id\n-#source: empty.s\n-#error_output: march-fail-rv32id.l"
    },
    {
      "sha": "c5f990cd73584ed2ba2d6f48065a31b42a5e2611",
      "filename": "gas/testsuite/gas/riscv/march-fail-rv32id.l",
      "status": "removed",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ef19aa616aee98f0a5c7c948d0db56a9f3c5e57/gas/testsuite/gas/riscv/march-fail-rv32id.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ef19aa616aee98f0a5c7c948d0db56a9f3c5e57/gas/testsuite/gas/riscv/march-fail-rv32id.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-rv32id.l?ref=7ef19aa616aee98f0a5c7c948d0db56a9f3c5e57",
      "patch": "@@ -1,2 +0,0 @@\n-.*Assembler messages:\n-.*Error: .*`d' extension requires `f' extension"
    },
    {
      "sha": "dc201b3d7bf2097edc7736939b34f6ecc96964b2",
      "filename": "gas/testsuite/gas/riscv/march-fail-rv32iq.l",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfe92496678a200464e54d80e96a608bfea338b9/gas/testsuite/gas/riscv/march-fail-rv32iq.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfe92496678a200464e54d80e96a608bfea338b9/gas/testsuite/gas/riscv/march-fail-rv32iq.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-rv32iq.l?ref=dfe92496678a200464e54d80e96a608bfea338b9",
      "patch": "@@ -1,3 +1,2 @@\n .*Assembler messages:\n .*Error: .*rv32 does not support the `q' extension\n-.*Error: .*`q' extension requires `d' extension"
    },
    {
      "sha": "c97a812cb3a155aa92a06174935357945ea29a88",
      "filename": "gas/testsuite/gas/riscv/march-fail-rv64iq.d",
      "status": "removed",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ef19aa616aee98f0a5c7c948d0db56a9f3c5e57/gas/testsuite/gas/riscv/march-fail-rv64iq.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ef19aa616aee98f0a5c7c948d0db56a9f3c5e57/gas/testsuite/gas/riscv/march-fail-rv64iq.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-rv64iq.d?ref=7ef19aa616aee98f0a5c7c948d0db56a9f3c5e57",
      "patch": "@@ -1,3 +0,0 @@\n-#as: -march=rv64iq\n-#source: empty.s\n-#error_output: march-fail-rv64iq.l"
    },
    {
      "sha": "787f46d1ed8b5f9a52fec377c92d8d37d20caacf",
      "filename": "gas/testsuite/gas/riscv/march-fail-rv64iq.l",
      "status": "removed",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ef19aa616aee98f0a5c7c948d0db56a9f3c5e57/gas/testsuite/gas/riscv/march-fail-rv64iq.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ef19aa616aee98f0a5c7c948d0db56a9f3c5e57/gas/testsuite/gas/riscv/march-fail-rv64iq.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-fail-rv64iq.l?ref=7ef19aa616aee98f0a5c7c948d0db56a9f3c5e57",
      "patch": "@@ -1,2 +0,0 @@\n-.*Assembler messages:\n-.*Error: .*`q' extension requires `d' extension"
    },
    {
      "sha": "ce2b47929f9f6a2ef0349cdcaaf878cfe9f9ab2a",
      "filename": "gas/testsuite/gas/riscv/march-imply-d.d",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfe92496678a200464e54d80e96a608bfea338b9/gas/testsuite/gas/riscv/march-imply-d.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfe92496678a200464e54d80e96a608bfea338b9/gas/testsuite/gas/riscv/march-imply-d.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-imply-d.d?ref=dfe92496678a200464e54d80e96a608bfea338b9",
      "patch": "@@ -0,0 +1,6 @@\n+#as: -march=rv32id -march-attr -misa-spec=20191213\n+#readelf: -A\n+#source: empty.s\n+Attribute Section: riscv\n+File Attributes\n+  Tag_RISCV_arch: \"rv32i2p1_f2p2_d2p2_zicsr2p0\""
    },
    {
      "sha": "bc372aed0e7f0b73a8cdb1bfc1e32c40038645c9",
      "filename": "gas/testsuite/gas/riscv/march-imply-f.d",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfe92496678a200464e54d80e96a608bfea338b9/gas/testsuite/gas/riscv/march-imply-f.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfe92496678a200464e54d80e96a608bfea338b9/gas/testsuite/gas/riscv/march-imply-f.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-imply-f.d?ref=dfe92496678a200464e54d80e96a608bfea338b9",
      "patch": "@@ -0,0 +1,6 @@\n+#as: -march=rv32if -march-attr -misa-spec=20191213\n+#readelf: -A\n+#source: empty.s\n+Attribute Section: riscv\n+File Attributes\n+  Tag_RISCV_arch: \"rv32i2p1_f2p2_zicsr2p0\""
    },
    {
      "sha": "17fcc7aa90c5d67279b0b256db630ade0fe5105a",
      "filename": "gas/testsuite/gas/riscv/march-imply-i2p0.d",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfe92496678a200464e54d80e96a608bfea338b9/gas/testsuite/gas/riscv/march-imply-i2p0.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfe92496678a200464e54d80e96a608bfea338b9/gas/testsuite/gas/riscv/march-imply-i2p0.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-imply-i2p0.d?ref=dfe92496678a200464e54d80e96a608bfea338b9",
      "patch": "@@ -0,0 +1,6 @@\n+#as: -march=rv32i2p0 -march-attr -misa-spec=20191213\n+#readelf: -A\n+#source: empty.s\n+Attribute Section: riscv\n+File Attributes\n+  Tag_RISCV_arch: \"rv32i2p0_zicsr2p0_zifencei2p0\""
    },
    {
      "sha": "0e9a464d6168bba877759f4e382afa4d1c6601f3",
      "filename": "gas/testsuite/gas/riscv/march-imply-i2p1.d",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfe92496678a200464e54d80e96a608bfea338b9/gas/testsuite/gas/riscv/march-imply-i2p1.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfe92496678a200464e54d80e96a608bfea338b9/gas/testsuite/gas/riscv/march-imply-i2p1.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-imply-i2p1.d?ref=dfe92496678a200464e54d80e96a608bfea338b9",
      "patch": "@@ -0,0 +1,6 @@\n+#as: -march=rv32i -march-attr -misa-spec=20191213\n+#readelf: -A\n+#source: empty.s\n+Attribute Section: riscv\n+File Attributes\n+  Tag_RISCV_arch: \"rv32i2p1\""
    },
    {
      "sha": "d631d6f3218fbbcc14d37de4de60deab695b135e",
      "filename": "gas/testsuite/gas/riscv/march-imply-q.d",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfe92496678a200464e54d80e96a608bfea338b9/gas/testsuite/gas/riscv/march-imply-q.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfe92496678a200464e54d80e96a608bfea338b9/gas/testsuite/gas/riscv/march-imply-q.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/march-imply-q.d?ref=dfe92496678a200464e54d80e96a608bfea338b9",
      "patch": "@@ -0,0 +1,6 @@\n+#as: -march=rv64iq -march-attr -misa-spec=20191213\n+#readelf: -A\n+#source: empty.s\n+Attribute Section: riscv\n+File Attributes\n+  Tag_RISCV_arch: \"rv64i2p1_f2p2_d2p2_q2p2_zicsr2p0\""
    }
  ]
}