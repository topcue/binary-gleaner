{
  "sha": "19a2740f7f2ea0f65745a3c00cf8a64647378aa3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTlhMjc0MGY3ZjJlYTBmNjU3NDVhM2MwMGNmOGE2NDY0NzM3OGFhMw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-12-27T18:31:09Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-03-19T08:23:30Z"
    },
    "message": "gdb: Remove C++ symbol aliases from completion list\n\nConsider debugging the following C++ program:\n\n  struct object\n  { int a; };\n\n  typedef object *object_p;\n\n  static int\n  get_value (object_p obj)\n  {\n    return obj->a;\n  }\n\n  int\n  main ()\n  {\n    object obj;\n    obj.a = 0;\n\n    return get_value (&obj);\n  }\n\nNow in a GDB session:\n\n  (gdb) complete break get_value\n  break get_value(object*)\n  break get_value(object_p)\n\nOr:\n\n  (gdb) break get_va<TAB>\n  (gdb) break get_value(object<RETURN>\n  Function \"get_value(object\" not defined.\n  Make breakpoint pending on future shared library load? (y or [n]) n\n\nThe reason this happens is that we add completions based on the\nmsymbol names and on the symbol names.  For C++ both of these names\ninclude the parameter list, however, the msymbol names have some\ndifferences from the symbol names, for example:\n\n  + typedefs are resolved,\n  + whitespace rules are different around pointers,\n  + the 'const' keyword is placed differently.\n\nWhat this means is that the msymbol names and symbol names appear to\nbe completely different to GDB's completion tracker, and therefore to\nreadline when it offers the completions.\n\nThis commit builds on the previous commit which reworked the\ncompletion_tracker class.  It is now trivial to add a\nremove_completion member function, this is then used along with\ncp_canonicalize_string_no_typedefs to remove the msymbol aliases from\nthe completion tracker as we add the symbol names.\n\nNow, for the above program GDB only presents a single completion for\n'get_value', which is 'get_value(object_p)'.\n\nIt is still possible to reference the symbol using the msymbol name,\nso a user can manually type out 'break get_value (object *)' if they\nwish and will get the expected behaviour.\n\nI did consider adding an option to make this alias exclusion optional,\nin the end I didn't bother as I didn't think it would be very useful,\nbut I can easily add such an option if people think it would be\nuseful.\n\ngdb/ChangeLog:\n\n\t* completer.c (completion_tracker::remove_completion): Define new\n\tfunction.\n\t* completer.h (completion_tracker::remove_completion): Declare new\n\tfunction.\n\t* symtab.c (completion_list_add_symbol): Remove aliasing msymbols\n\twhen adding a C++ function symbol.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.linespec/cp-completion-aliases.cc: New file.\n\t* gdb.linespec/cp-completion-aliases.exp: New file.\n\nChange-Id: Ie5c7c9fc8ecf973072cfb4a9650867104bf7f50c",
    "tree": {
      "sha": "d391f702c3054eb50db729a7936908ff2ef1b72d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d391f702c3054eb50db729a7936908ff2ef1b72d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/19a2740f7f2ea0f65745a3c00cf8a64647378aa3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/19a2740f7f2ea0f65745a3c00cf8a64647378aa3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/19a2740f7f2ea0f65745a3c00cf8a64647378aa3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/19a2740f7f2ea0f65745a3c00cf8a64647378aa3/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "724fd9ba432a20ef2e3f2c0d6060bff131226816",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/724fd9ba432a20ef2e3f2c0d6060bff131226816",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/724fd9ba432a20ef2e3f2c0d6060bff131226816"
    }
  ],
  "stats": {
    "total": 180,
    "additions": 180,
    "deletions": 0
  },
  "files": [
    {
      "sha": "1fe2e588ad41eeba693440dbf7ab149522ebb093",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19a2740f7f2ea0f65745a3c00cf8a64647378aa3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19a2740f7f2ea0f65745a3c00cf8a64647378aa3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=19a2740f7f2ea0f65745a3c00cf8a64647378aa3",
      "patch": "@@ -1,3 +1,12 @@\n+2020-03-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* completer.c (completion_tracker::remove_completion): Define new\n+\tfunction.\n+\t* completer.h (completion_tracker::remove_completion): Declare new\n+\tfunction.\n+\t* symtab.c (completion_list_add_symbol): Remove aliasing msymbols\n+\twhen adding a C++ function symbol.\n+\n 2020-03-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* completer.c (completion_tracker::completion_hash_entry): Define"
    },
    {
      "sha": "67dce30fbe3996d1dd1563413d6d35c9d68dc4fa",
      "filename": "gdb/completer.c",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19a2740f7f2ea0f65745a3c00cf8a64647378aa3/gdb/completer.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19a2740f7f2ea0f65745a3c00cf8a64647378aa3/gdb/completer.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/completer.c?ref=19a2740f7f2ea0f65745a3c00cf8a64647378aa3",
      "patch": "@@ -1678,6 +1678,20 @@ completion_tracker::add_completions (completion_list &&list)\n     add_completion (std::move (candidate));\n }\n \n+/* See completer.h.  */\n+\n+void\n+completion_tracker::remove_completion (const char *name)\n+{\n+  hashval_t hash = htab_hash_string (name);\n+  if (htab_find_slot_with_hash (m_entries_hash, name, hash, NO_INSERT)\n+      != NULL)\n+    {\n+      htab_remove_elt_with_hash (m_entries_hash, name, hash);\n+      m_lowest_common_denominator_valid = false;\n+    }\n+}\n+\n /* Helper for the make_completion_match_str overloads.  Returns NULL\n    as an indication that we want MATCH_NAME exactly.  It is up to the\n    caller to xstrdup that string if desired.  */"
    },
    {
      "sha": "fd0d47b206bdb100a3e558ac78ec803d43721dc9",
      "filename": "gdb/completer.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19a2740f7f2ea0f65745a3c00cf8a64647378aa3/gdb/completer.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19a2740f7f2ea0f65745a3c00cf8a64647378aa3/gdb/completer.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/completer.h?ref=19a2740f7f2ea0f65745a3c00cf8a64647378aa3",
      "patch": "@@ -326,6 +326,10 @@ class completion_tracker\n      LIST.  */\n   void add_completions (completion_list &&list);\n \n+  /* Remove completion matching NAME from the completion list, does nothing\n+     if NAME is not already in the completion list.  */\n+  void remove_completion (const char *name);\n+\n   /* Set the quote char to be appended after a unique completion is\n      added to the input line.  Set to '\\0' to clear.  See\n      m_quote_char's description.  */"
    },
    {
      "sha": "f300d759e0362d4b8be815981155fd3748f1b803",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19a2740f7f2ea0f65745a3c00cf8a64647378aa3/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19a2740f7f2ea0f65745a3c00cf8a64647378aa3/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=19a2740f7f2ea0f65745a3c00cf8a64647378aa3",
      "patch": "@@ -5296,6 +5296,27 @@ completion_list_add_symbol (completion_tracker &tracker,\n   completion_list_add_name (tracker, sym->language (),\n \t\t\t    sym->natural_name (),\n \t\t\t    lookup_name, text, word);\n+\n+  /* C++ function symbols include the parameters within both the msymbol\n+     name and the symbol name.  The problem is that the msymbol name will\n+     describe the parameters in the most basic way, with typedefs stripped\n+     out, while the symbol name will represent the types as they appear in\n+     the program.  This means we will see duplicate entries in the\n+     completion tracker.  The following converts the symbol name back to\n+     the msymbol name and removes the msymbol name from the completion\n+     tracker.  */\n+  if (sym->language () == language_cplus\n+      && SYMBOL_DOMAIN (sym) == VAR_DOMAIN\n+      && SYMBOL_CLASS (sym) == LOC_BLOCK)\n+    {\n+      /* The call to canonicalize returns the empty string if the input\n+\t string is already in canonical form, thanks to this we don't\n+\t remove the symbol we just added above.  */\n+      std::string str\n+\t= cp_canonicalize_string_no_typedefs (sym->natural_name ());\n+      if (!str.empty ())\n+\ttracker.remove_completion (str.c_str ());\n+    }\n }\n \n /* completion_list_add_name wrapper for struct minimal_symbol.  */"
    },
    {
      "sha": "6574270e4dea2d032cec4ef15ba74b99c6e8ebdf",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19a2740f7f2ea0f65745a3c00cf8a64647378aa3/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19a2740f7f2ea0f65745a3c00cf8a64647378aa3/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=19a2740f7f2ea0f65745a3c00cf8a64647378aa3",
      "patch": "@@ -1,3 +1,8 @@\n+2020-03-19  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.linespec/cp-completion-aliases.cc: New file.\n+\t* gdb.linespec/cp-completion-aliases.exp: New file.\n+\n 2020-03-19  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.opt/inline-locals.exp: Add kfail PR number.  Make kfail matching"
    },
    {
      "sha": "5f2fb5c663a89236c082866cf3e8123312734f5d",
      "filename": "gdb/testsuite/gdb.linespec/cp-completion-aliases.cc",
      "status": "added",
      "additions": 73,
      "deletions": 0,
      "changes": 73,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19a2740f7f2ea0f65745a3c00cf8a64647378aa3/gdb/testsuite/gdb.linespec/cp-completion-aliases.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19a2740f7f2ea0f65745a3c00cf8a64647378aa3/gdb/testsuite/gdb.linespec/cp-completion-aliases.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.linespec/cp-completion-aliases.cc?ref=19a2740f7f2ea0f65745a3c00cf8a64647378aa3",
      "patch": "@@ -0,0 +1,73 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019-2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <cstring>\n+\n+template<typename T>\n+struct magic\n+{\n+  T x;\n+};\n+\n+struct object\n+{\n+  int a;\n+};\n+\n+typedef magic<int> int_magic_t;\n+\n+typedef object *object_p;\n+\n+typedef const char *my_string_t;\n+\n+static int\n+get_value (object_p obj)\n+{\n+  return obj->a;\n+}\n+\n+static int\n+get_something (object_p obj)\n+{\n+  return obj->a;\n+}\n+\n+static int\n+get_something (my_string_t msg)\n+{\n+  return strlen (msg);\n+}\n+\n+static int\n+grab_it (int_magic_t *var)\n+{\n+  return var->x;\n+}\n+\n+int\n+main ()\n+{\n+  magic<int> m;\n+  m.x = 4;\n+\n+  object obj;\n+  obj.a = 0;\n+\n+  int val = (get_value (&obj) + get_something (&obj)\n+\t     + get_something (\"abc\") + grab_it (&m));\n+  return val;\n+}"
    },
    {
      "sha": "313ff844b3604e4b2cf2429161cf9fee04e0c1ad",
      "filename": "gdb/testsuite/gdb.linespec/cp-completion-aliases.exp",
      "status": "added",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/19a2740f7f2ea0f65745a3c00cf8a64647378aa3/gdb/testsuite/gdb.linespec/cp-completion-aliases.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/19a2740f7f2ea0f65745a3c00cf8a64647378aa3/gdb/testsuite/gdb.linespec/cp-completion-aliases.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.linespec/cp-completion-aliases.exp?ref=19a2740f7f2ea0f65745a3c00cf8a64647378aa3",
      "patch": "@@ -0,0 +1,54 @@\n+# Copyright 2019-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This file tests GDB's ability to remove symbol aliases from the\n+# completion list in C++.\n+\n+load_lib completion-support.exp\n+\n+standard_testfile .cc\n+\n+if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile {debug}]} {\n+    return -1\n+}\n+\n+# Tests below are about tab-completion, which doesn't work if readline\n+# library isn't used.  Check it first.\n+\n+if { ![readline_is_used] } {\n+    untested \"no tab completion support without readline\"\n+    return -1\n+}\n+\n+# Disable the completion limit for the whole testcase.\n+gdb_test_no_output \"set max-completions unlimited\"\n+\n+test_gdb_complete_tab_unique \"break get_v\" \\\n+    \"break get_value\\\\(object_p\\\\)\" \" \"\n+\n+test_gdb_complete_cmd_unique \"break get_v\" \\\n+    \"break get_value\\\\(object_p\\\\)\"\n+\n+test_gdb_complete_tab_unique \"break gr\" \\\n+    \"break grab_it\\\\(int_magic_t\\\\*\\\\)\" \" \"\n+\n+test_gdb_complete_cmd_unique \"break gr\" \\\n+    \"break grab_it\\\\(int_magic_t\\\\*\\\\)\"\n+\n+test_gdb_complete_tab_multiple \"break get_som\" \"ething(\" \\\n+    { \"get_something(my_string_t)\" \"get_something(object_p)\" }\n+\n+test_gdb_complete_cmd_multiple \"break \" \"get_som\" \\\n+    { \"get_something(my_string_t)\" \"get_something(object_p)\" }"
    }
  ]
}