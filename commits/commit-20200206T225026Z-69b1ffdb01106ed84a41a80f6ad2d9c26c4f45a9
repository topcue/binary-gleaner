{
  "sha": "69b1ffdb01106ed84a41a80f6ad2d9c26c4f45a9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjliMWZmZGIwMTEwNmVkODRhNDFhODBmNmFkMmQ5YzI2YzRmNDVhOQ==",
  "commit": {
    "author": {
      "name": "Carlo Bramini",
      "email": "carlo_bramini@users.sourceforge.net",
      "date": "2020-02-06T22:50:26Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-02-06T22:50:26Z"
    },
    "message": "sim/aarch64: Fix register ordering bug in blr (PR sim/25318)\n\nA comment in the implementation of blr says:\n\n  /* The pseudo code in the spec says we update LR before fetching.\n     the value from the rn.  */\n\nWith 'rn' being the register holding the destination address.\n\nThis may have been true at one point, but the ISA manual now clearly\nshows the destination register being read before the link register is\nwritten.\n\nThis commit updates the implementation of blr to match.\n\nsim/aarch64/ChangeLog:\n\n\tPR sim/25318\n\t* simulator.c (blr): Read destination register before calling\n\taarch64_save_LR.\n\nChange-Id: Icb1c556064e3d9c807ac28440475caa205ab1064",
    "tree": {
      "sha": "284c914e9ea392b7d0c682e09a9838d0b53b6f30",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/284c914e9ea392b7d0c682e09a9838d0b53b6f30"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/69b1ffdb01106ed84a41a80f6ad2d9c26c4f45a9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/69b1ffdb01106ed84a41a80f6ad2d9c26c4f45a9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/69b1ffdb01106ed84a41a80f6ad2d9c26c4f45a9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/69b1ffdb01106ed84a41a80f6ad2d9c26c4f45a9/comments",
  "author": {
    "login": "carlo-bramini",
    "id": 30959007,
    "node_id": "MDQ6VXNlcjMwOTU5MDA3",
    "avatar_url": "https://avatars.githubusercontent.com/u/30959007?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/carlo-bramini",
    "html_url": "https://github.com/carlo-bramini",
    "followers_url": "https://api.github.com/users/carlo-bramini/followers",
    "following_url": "https://api.github.com/users/carlo-bramini/following{/other_user}",
    "gists_url": "https://api.github.com/users/carlo-bramini/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/carlo-bramini/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/carlo-bramini/subscriptions",
    "organizations_url": "https://api.github.com/users/carlo-bramini/orgs",
    "repos_url": "https://api.github.com/users/carlo-bramini/repos",
    "events_url": "https://api.github.com/users/carlo-bramini/events{/privacy}",
    "received_events_url": "https://api.github.com/users/carlo-bramini/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1d5d29e73f4b5f1af4df5b6e39ccf2fa722acead"
    }
  ],
  "stats": {
    "total": 13,
    "additions": 9,
    "deletions": 4
  },
  "files": [
    {
      "sha": "1b907b94c9c506d50540aca4a2234089ca5db82d",
      "filename": "sim/aarch64/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/69b1ffdb01106ed84a41a80f6ad2d9c26c4f45a9/sim/aarch64/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/69b1ffdb01106ed84a41a80f6ad2d9c26c4f45a9/sim/aarch64/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/aarch64/ChangeLog?ref=69b1ffdb01106ed84a41a80f6ad2d9c26c4f45a9",
      "patch": "@@ -1,3 +1,9 @@\n+2020-02-06  Carlo Bramini  <carlo_bramini@users.sourceforge.net>\n+\n+\tPR sim/25318\n+\t* simulator.c (blr): Read destination register before calling\n+\taarch64_save_LR.\n+\n 2019-03-28  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* cpustate.c: Add 'libiberty.h' include."
    },
    {
      "sha": "5f16a69478c8cb0edab4f85274c489cec0b23ad2",
      "filename": "sim/aarch64/simulator.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/69b1ffdb01106ed84a41a80f6ad2d9c26c4f45a9/sim/aarch64/simulator.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/69b1ffdb01106ed84a41a80f6ad2d9c26c4f45a9/sim/aarch64/simulator.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/aarch64/simulator.c?ref=69b1ffdb01106ed84a41a80f6ad2d9c26c4f45a9",
      "patch": "@@ -13437,13 +13437,12 @@ br (sim_cpu *cpu)\n static void\n blr (sim_cpu *cpu)\n {\n-  unsigned rn = INSTR (9, 5);\n+  /* Ensure we read the destination before we write LR.  */\n+  uint64_t target = aarch64_get_reg_u64 (cpu, INSTR (9, 5), NO_SP);\n \n   TRACE_DECODE (cpu, \"emulated at line %d\", __LINE__);\n-  /* The pseudo code in the spec says we update LR before fetching.\n-     the value from the rn.  */\n   aarch64_save_LR (cpu);\n-  aarch64_set_next_PC (cpu, aarch64_get_reg_u64 (cpu, rn, NO_SP));\n+  aarch64_set_next_PC (cpu, target);\n \n   if (TRACE_BRANCH_P (cpu))\n     {"
    }
  ]
}