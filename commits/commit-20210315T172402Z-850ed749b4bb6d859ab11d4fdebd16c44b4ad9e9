{
  "sha": "850ed749b4bb6d859ab11d4fdebd16c44b4ad9e9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODUwZWQ3NDliNGJiNmQ4NTlhYjExZDRmZGViZDE2YzQ0YjRhZDllOQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-03-11T03:20:39Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-03-15T17:24:02Z"
    },
    "message": "gdb: add logging to dwarf2_initialize_objfile\n\nI added these printouts while working on 27541.  I won't have a fix for\nthat right now, but I thought that it would be useful to merge them\nupstream, as they help understand what happens in that function.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.c (dwarf2_initialize_objfile): Add debug prints.\n\nChange-Id: I790c0d53383327038cb5dd705f74c8c978e0a7ec",
    "tree": {
      "sha": "0031ba3529eb6cbd9a56f1524e10ce6e636a9545",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0031ba3529eb6cbd9a56f1524e10ce6e636a9545"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/850ed749b4bb6d859ab11d4fdebd16c44b4ad9e9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/850ed749b4bb6d859ab11d4fdebd16c44b4ad9e9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/850ed749b4bb6d859ab11d4fdebd16c44b4ad9e9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/850ed749b4bb6d859ab11d4fdebd16c44b4ad9e9/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "eb5dd7374837c76c05acb27769da6cc10f5bfcc0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/eb5dd7374837c76c05acb27769da6cc10f5bfcc0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/eb5dd7374837c76c05acb27769da6cc10f5bfcc0"
    }
  ],
  "stats": {
    "total": 15,
    "additions": 14,
    "deletions": 1
  },
  "files": [
    {
      "sha": "704ba9f36655b786f21a15153120c293a727cd26",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/850ed749b4bb6d859ab11d4fdebd16c44b4ad9e9/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/850ed749b4bb6d859ab11d4fdebd16c44b4ad9e9/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=850ed749b4bb6d859ab11d4fdebd16c44b4ad9e9",
      "patch": "@@ -5903,16 +5903,21 @@ dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n   dwarf2_per_bfd *per_bfd = per_objfile->per_bfd;\n \n+  dwarf_read_debug_printf (\"called\");\n+\n   /* If we're about to read full symbols, don't bother with the\n      indices.  In this case we also don't care if some other debug\n      format is making psymtabs, because they are all about to be\n      expanded anyway.  */\n   if ((objfile->flags & OBJF_READNOW))\n     {\n+      dwarf_read_debug_printf (\"readnow requested\");\n+\n       /* When using READNOW, the using_index flag (set below) indicates that\n \t PER_BFD was already initialized, when we loaded some other objfile.  */\n       if (per_bfd->using_index)\n \t{\n+\t  dwarf_read_debug_printf (\"using_index already set\");\n \t  *index_kind = dw_index_kind::GDB_INDEX;\n \t  per_objfile->resize_symtabs ();\n \t  return true;\n@@ -5945,6 +5950,7 @@ dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n      PER_BFD?  */\n   if (per_bfd->debug_names_table != nullptr)\n     {\n+      dwarf_read_debug_printf (\"re-using shared debug names table\");\n       *index_kind = dw_index_kind::DEBUG_NAMES;\n       per_objfile->objfile->partial_symtabs = per_bfd->partial_symtabs;\n       per_objfile->resize_symtabs ();\n@@ -5955,6 +5961,7 @@ dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n      PER_BFD?  */\n   if (per_bfd->index_table != nullptr)\n     {\n+      dwarf_read_debug_printf (\"re-using shared index table\");\n       *index_kind = dw_index_kind::GDB_INDEX;\n       per_objfile->objfile->partial_symtabs = per_bfd->partial_symtabs;\n       per_objfile->resize_symtabs ();\n@@ -5967,10 +5974,14 @@ dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n      be completed in dwarf2_build_psymtabs, in the standard partial symtabs\n      code path.  */\n   if (per_bfd->partial_symtabs != nullptr)\n-    return false;\n+    {\n+      dwarf_read_debug_printf (\"re-using shared partial symtabs\");\n+      return false;\n+    }\n \n   if (dwarf2_read_debug_names (per_objfile))\n     {\n+      dwarf_read_debug_printf (\"found debug names\");\n       *index_kind = dw_index_kind::DEBUG_NAMES;\n       per_objfile->resize_symtabs ();\n       return true;\n@@ -5980,6 +5991,7 @@ dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n \t\t\t     get_gdb_index_contents_from_section<struct dwarf2_per_bfd>,\n \t\t\t     get_gdb_index_contents_from_section<dwz_file>))\n     {\n+      dwarf_read_debug_printf (\"found gdb index from file\");\n       *index_kind = dw_index_kind::GDB_INDEX;\n       per_objfile->resize_symtabs ();\n       return true;\n@@ -5990,6 +6002,7 @@ dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n \t\t\t     get_gdb_index_contents_from_cache,\n \t\t\t     get_gdb_index_contents_from_cache_dwz))\n     {\n+      dwarf_read_debug_printf (\"found gdb index from cache\");\n       global_index_cache.hit ();\n       *index_kind = dw_index_kind::GDB_INDEX;\n       per_objfile->resize_symtabs ();"
    }
  ]
}