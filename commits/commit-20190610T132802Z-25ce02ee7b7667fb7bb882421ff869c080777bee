{
  "sha": "25ce02ee7b7667fb7bb882421ff869c080777bee",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjVjZTAyZWU3Yjc2NjdmYjdiYjg4MjQyMWZmODY5YzA4MDc3N2JlZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-07T22:08:47Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-10T13:28:02Z"
    },
    "message": "Use gdbpy_enter in py-breakpoint.c\n\nA few spots in py-breakpoint.c acquire the GIL manually.  However,\nbecause these spots generate events, and because events are expected\nto be arbitrary gdb-flavored Python code, it's important to use\ngdbpy_enter instead, in order to ensure that the other gdb-related\nPython globals are set correctly.\n\nThis patch makes this change.  Tested on x86-64 Fedora 29.\n\ngdb/ChangeLog\n2019-06-10  Tom Tromey  <tom@tromey.com>\n\n\t* python/py-breakpoint.c (gdbpy_breakpoint_created)\n\t(gdbpy_breakpoint_deleted, gdbpy_breakpoint_modified): Use\n\tgdbpy_enter.",
    "tree": {
      "sha": "7ba9838fbf8e0cacef0ddae0d51c7f89ab662998",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7ba9838fbf8e0cacef0ddae0d51c7f89ab662998"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/25ce02ee7b7667fb7bb882421ff869c080777bee",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/25ce02ee7b7667fb7bb882421ff869c080777bee",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/25ce02ee7b7667fb7bb882421ff869c080777bee",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/25ce02ee7b7667fb7bb882421ff869c080777bee/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "caa429d81a9999699a40b6394c9fb7b258669d54",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/caa429d81a9999699a40b6394c9fb7b258669d54",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/caa429d81a9999699a40b6394c9fb7b258669d54"
    }
  ],
  "stats": {
    "total": 24,
    "additions": 14,
    "deletions": 10
  },
  "files": [
    {
      "sha": "88680732a855de836b711ea9eea1f0dbf5e2acdd",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/25ce02ee7b7667fb7bb882421ff869c080777bee/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/25ce02ee7b7667fb7bb882421ff869c080777bee/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=25ce02ee7b7667fb7bb882421ff869c080777bee",
      "patch": "@@ -1,3 +1,9 @@\n+2019-06-10  Tom Tromey  <tom@tromey.com>\n+\n+\t* python/py-breakpoint.c (gdbpy_breakpoint_created)\n+\t(gdbpy_breakpoint_deleted, gdbpy_breakpoint_modified): Use\n+\tgdbpy_enter.\n+\n 2019-06-10  Tom Tromey  <tromey@adacore.com>\n \n \t* elfread.c (elf_read_minimal_symbols): Don't set the dbx objfile"
    },
    {
      "sha": "88cd7de334316f39342d49840fdf9f780512206a",
      "filename": "gdb/python/py-breakpoint.c",
      "status": "modified",
      "additions": 8,
      "deletions": 10,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/25ce02ee7b7667fb7bb882421ff869c080777bee/gdb/python/py-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/25ce02ee7b7667fb7bb882421ff869c080777bee/gdb/python/py-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-breakpoint.c?ref=25ce02ee7b7667fb7bb882421ff869c080777bee",
      "patch": "@@ -1003,7 +1003,6 @@ static void\n gdbpy_breakpoint_created (struct breakpoint *bp)\n {\n   gdbpy_breakpoint_object *newbp;\n-  PyGILState_STATE state;\n \n   if (!user_breakpoint_p (bp) && bppy_pending_object == NULL)\n     return;\n@@ -1015,7 +1014,8 @@ gdbpy_breakpoint_created (struct breakpoint *bp)\n       && bp->type != bp_access_watchpoint)\n     return;\n \n-  state = PyGILState_Ensure ();\n+  struct gdbarch *garch = bp->gdbarch ? bp->gdbarch : get_current_arch ();\n+  gdbpy_enter enter_py (garch, current_language);\n \n   if (bppy_pending_object)\n     {\n@@ -1046,8 +1046,6 @@ gdbpy_breakpoint_created (struct breakpoint *bp)\n \t\t\t   gdb_py_events.breakpoint_created) < 0)\n \tgdbpy_print_stack ();\n     }\n-\n-  PyGILState_Release (state);\n }\n \n /* Callback that is used when a breakpoint is deleted.  This will\n@@ -1056,13 +1054,14 @@ static void\n gdbpy_breakpoint_deleted (struct breakpoint *b)\n {\n   int num = b->number;\n-  PyGILState_STATE state;\n   struct breakpoint *bp = NULL;\n \n-  state = PyGILState_Ensure ();\n   bp = get_breakpoint (num);\n   if (bp)\n     {\n+      struct gdbarch *garch = bp->gdbarch ? bp->gdbarch : get_current_arch ();\n+      gdbpy_enter enter_py (garch, current_language);\n+\n       gdbpy_ref<gdbpy_breakpoint_object> bp_obj (bp->py_bp_object);\n       if (bp_obj != NULL)\n \t{\n@@ -1077,7 +1076,6 @@ gdbpy_breakpoint_deleted (struct breakpoint *b)\n \t  --bppy_live;\n \t}\n     }\n-  PyGILState_Release (state);\n }\n \n /* Callback that is used when a breakpoint is modified.  */\n@@ -1086,13 +1084,14 @@ static void\n gdbpy_breakpoint_modified (struct breakpoint *b)\n {\n   int num = b->number;\n-  PyGILState_STATE state;\n   struct breakpoint *bp = NULL;\n \n-  state = PyGILState_Ensure ();\n   bp = get_breakpoint (num);\n   if (bp)\n     {\n+      struct gdbarch *garch = bp->gdbarch ? bp->gdbarch : get_current_arch ();\n+      gdbpy_enter enter_py (garch, current_language);\n+\n       PyObject *bp_obj = (PyObject *) bp->py_bp_object;\n       if (bp_obj)\n \t{\n@@ -1104,7 +1103,6 @@ gdbpy_breakpoint_modified (struct breakpoint *b)\n \t    }\n \t}\n     }\n-  PyGILState_Release (state);\n }\n \n \f"
    }
  ]
}