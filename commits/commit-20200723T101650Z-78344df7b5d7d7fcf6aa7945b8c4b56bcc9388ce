{
  "sha": "78344df7b5d7d7fcf6aa7945b8c4b56bcc9388ce",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzgzNDRkZjdiNWQ3ZDdmY2Y2YWE3OTQ1YjhjNGI1NmJjYzkzODhjZQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-21T10:21:50Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-23T10:16:50Z"
    },
    "message": "gdb/disassembly: Update to handle non-statement addresses\n\nAfter the introduction of support for non-statement addresses in the\nline table, the output for 'disassemble /m' can be broken in some\ncases.\n\nWith the /m format disassembly GDB associates a set of addresses with\neach line, these addresses are then sorted and printed for each line.\n\nWhen the non-statement support was added GDB was incorrectly told to\nignore non-statement instructions, and not add these to the result\ntable.  This means that these instructions are completely missing from\nthe output.\n\nThis commit removes the code that caused non-statement lines to be\nignored.\n\nA result of this change is that GDB will now potentially include new\nline numbers in the 'disassemble /m' output, lines that previously\nwere only in the line table as non-statement lines will now appear in\nthe disassembly output.  This feels like an improvement though.\n\ngdb/ChangeLog:\n\n\t* disasm.c (do_mixed_source_and_assembly_deprecated): Don't\n\texclude non-statement entries.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.dwarf2/dw2-disasm-over-non-stmt.exp: New file.",
    "tree": {
      "sha": "08db40497223153f12e24b7cc0a64a63bebb378c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/08db40497223153f12e24b7cc0a64a63bebb378c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/78344df7b5d7d7fcf6aa7945b8c4b56bcc9388ce",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/78344df7b5d7d7fcf6aa7945b8c4b56bcc9388ce",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/78344df7b5d7d7fcf6aa7945b8c4b56bcc9388ce",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/78344df7b5d7d7fcf6aa7945b8c4b56bcc9388ce/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "25dfed247b09f2e5c9672a8737c8208ff90928bf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/25dfed247b09f2e5c9672a8737c8208ff90928bf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/25dfed247b09f2e5c9672a8737c8208ff90928bf"
    }
  ],
  "stats": {
    "total": 221,
    "additions": 215,
    "deletions": 6
  },
  "files": [
    {
      "sha": "c400d234f5fbdff26075f818df54484d194cbee4",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/78344df7b5d7d7fcf6aa7945b8c4b56bcc9388ce/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/78344df7b5d7d7fcf6aa7945b8c4b56bcc9388ce/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=78344df7b5d7d7fcf6aa7945b8c4b56bcc9388ce",
      "patch": "@@ -1,3 +1,8 @@\n+2020-07-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* disasm.c (do_mixed_source_and_assembly_deprecated): Don't\n+\texclude non-statement entries.\n+\n 2020-07-22  Kevin Buettner  <kevinb@redhat.com>\n \n \t* NEWS (New commands): Mention new command"
    },
    {
      "sha": "e45c8400689b02fc9dd81e6322989a76e70310f7",
      "filename": "gdb/disasm.c",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/78344df7b5d7d7fcf6aa7945b8c4b56bcc9388ce/gdb/disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/78344df7b5d7d7fcf6aa7945b8c4b56bcc9388ce/gdb/disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/disasm.c?ref=78344df7b5d7d7fcf6aa7945b8c4b56bcc9388ce",
      "patch": "@@ -376,12 +376,6 @@ do_mixed_source_and_assembly_deprecated\n       if (le[i].line == le[i + 1].line && le[i].pc == le[i + 1].pc)\n \tcontinue;\t\t/* Ignore duplicates.  */\n \n-      /* Ignore non-statement line table entries.  This means we print the\n-\t source line at the place where GDB would insert a breakpoint for\n-\t that line, which seems more intuitive.  */\n-      if (le[i].is_stmt == 0)\n-\tcontinue;\n-\n       /* Skip any end-of-function markers.  */\n       if (le[i].line == 0)\n \tcontinue;"
    },
    {
      "sha": "c9502eeedf778a7854e21b7e70e3987e92701edf",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/78344df7b5d7d7fcf6aa7945b8c4b56bcc9388ce/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/78344df7b5d7d7fcf6aa7945b8c4b56bcc9388ce/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=78344df7b5d7d7fcf6aa7945b8c4b56bcc9388ce",
      "patch": "@@ -1,3 +1,7 @@\n+2020-07-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.dwarf2/dw2-disasm-over-non-stmt.exp: New file.\n+\n 2020-07-22  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* lib/gdb.exp (gdb_wrapper_file, gdb_wrapper_flags):"
    },
    {
      "sha": "6df275f1b110cce23d29cd42391cd58b75566311",
      "filename": "gdb/testsuite/gdb.dwarf2/dw2-disasm-over-non-stmt.exp",
      "status": "added",
      "additions": 206,
      "deletions": 0,
      "changes": 206,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/78344df7b5d7d7fcf6aa7945b8c4b56bcc9388ce/gdb/testsuite/gdb.dwarf2/dw2-disasm-over-non-stmt.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/78344df7b5d7d7fcf6aa7945b8c4b56bcc9388ce/gdb/testsuite/gdb.dwarf2/dw2-disasm-over-non-stmt.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/dw2-disasm-over-non-stmt.exp?ref=78344df7b5d7d7fcf6aa7945b8c4b56bcc9388ce",
      "patch": "@@ -0,0 +1,206 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Create an example function that contains both addresses marked as\n+# statements and addresses marked as non-statements, and then\n+# disassemble the function.\n+#\n+# Of particular interest is how 'disassemble /m' handles the\n+# non-statement addresses, we want to ensure that these addresses are\n+# included in the disassembly output.  For completeness we test both\n+# 'disassemble /m' and 'disassemble /s'.\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+# The .c files use __attribute__.\n+if [get_compiler_info] {\n+    return -1\n+}\n+if !$gcc_compiled {\n+    return 0\n+}\n+\n+# Reuse many of the test source files from dw2-inline-header-1.exp.\n+standard_testfile dw2-inline-header-lbls.c dw2-inline-header.S \\\n+    dw2-inline-header.c\n+\n+set asm_file [standard_output_file $srcfile2]\n+Dwarf::assemble $asm_file {\n+    global srcdir subdir srcfile srcfile3\n+    declare_labels lines_label\n+\n+    get_func_info main\n+\n+    cu {} {\n+\tcompile_unit {\n+\t    {producer \"gcc\" }\n+\t    {language @DW_LANG_C}\n+\t    {name ${srcfile3}}\n+\t    {low_pc 0 addr}\n+\t    {stmt_list ${lines_label} DW_FORM_sec_offset}\n+\t} {\n+\t    subprogram {\n+\t\t{external 1 flag}\n+\t\t{MACRO_AT_func {main}}\n+\t    }\n+\t}\n+    }\n+\n+    lines {version 2 default_is_stmt 1} lines_label {\n+\tinclude_dir \"${srcdir}/${subdir}\"\n+\tfile_name \"$srcfile3\" 1\n+\n+\tprogram {\n+\t    {DW_LNE_set_address $main_start}\n+\t    {DW_LNS_advance_line 15}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_2}\n+\t    {DW_LNS_negate_stmt}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_3}\n+\t    {DW_LNS_advance_line 1}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_4}\n+\t    {DW_LNS_negate_stmt}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_5}\n+\t    {DW_LNS_negate_stmt}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address line_label_6}\n+\t    {DW_LNS_advance_line 1}\n+\t    {DW_LNS_negate_stmt}\n+\t    {DW_LNS_copy}\n+\n+\t    {DW_LNE_set_address $main_end}\n+\t    {DW_LNS_copy}\n+\t    {DW_LNE_end_sequence}\n+\t}\n+    }\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $asm_file] {nodebug} ] } {\n+    return -1\n+}\n+\n+if ![runto_main] {\n+    return -1\n+}\n+\n+# Global lines array, maps lines numbers to the list of addresses\n+# associated with that line in the debug output.\n+array set lines {}\n+\n+# Look in the global LINES array and check that the disassembly for\n+# line LINENUM includes the address of LABEL.\n+proc check_disassembly_results { linenum label } {\n+    global lines\n+\n+    set address [get_hexadecimal_valueof \"&${label}\" \"__unknown__\"]\n+    set testname \"check_disassembly_results $linenum $label\"\n+    if {![info exists lines($linenum)]} {\n+\tfail \"$testname (no disassembly for $linenum)\"\n+\treturn\n+    }\n+\n+    # Use a loop to compare the addresses as the addresses extracted\n+    # from the disassembly output can be padded with zeros, while the\n+    # address of the label will not be padded.\n+    set addrs $lines($linenum)\n+    foreach a $addrs {\n+\tif { $a == $address } {\n+\t    pass $testname\n+\t    return\n+\t}\n+    }\n+    fail $testname\n+}\n+\n+foreach_with_prefix opt { m s } {\n+    # Disassemble 'main' and split up the disassembly output.  We\n+    # build an associative array, for each line number store the list\n+    # of addresses that were part of its disassembly output.\n+    #\n+    # LINENUM is the line we are currently collecting the disassembly\n+    # addresses for, and ADDRS is the list of addresses collected for\n+    # this line.\n+    set linenum -1\n+    set addrs {}\n+\n+    # Clear the global associative array used to hold the results.\n+    unset lines\n+    array set lines {}\n+\n+    gdb_test_multiple \"disassemble /${opt} main\" \"\" {\n+\t-re \"Dump of assembler code for function main:\\r\\n\" {\n+\t    exp_continue\n+\t}\n+\n+\t-re \"^\\[^\\r\\n\\]+${srcfile3}:\" {\n+\t    exp_continue\n+\t}\n+\n+\t-re \"^(\\\\d+)\\\\s+\\[^\\r\\n\\]+\\r\\n\" {\n+\t    if { $linenum != -1 } {\n+\t\tset lines($linenum) $addrs\n+\t\tset addrs {}\n+\t    }\n+\t    set linenum $expect_out(1,string)\n+\t    exp_continue\n+\t}\n+\n+\t-re \"^(?:=>)?\\\\s*($hex)\\\\s*\\[^\\r\\n\\]+\\r\\n\" {\n+\t    set address $expect_out(1,string)\n+\t    lappend addrs $address\n+\t    exp_continue\n+\t}\n+\n+\t-re \"^\\\\s*\\r\\n\" {\n+\t    exp_continue\n+\t}\n+\n+\t-re \"^End of assembler dump\\\\.\\r\\n\" {\n+\t    if { $linenum != -1 } {\n+\t\tset lines($linenum) $addrs\n+\t\tset linenum -1\n+\t\tset addrs {}\n+\t    }\n+\t    exp_continue\n+\t}\n+\n+\t-re \"^$gdb_prompt $\" {\n+\t    # All done.\n+\t}\n+    }\n+\n+    # Now check that each label we expect to be associated with each line\n+    # shows up in the disassembly output.\n+    check_disassembly_results 16 \"line_label_1\"\n+    check_disassembly_results 16 \"line_label_2\"\n+    check_disassembly_results 17 \"line_label_3\"\n+    check_disassembly_results 17 \"line_label_4\"\n+    check_disassembly_results 17 \"line_label_5\"\n+    check_disassembly_results 18 \"line_label_6\"\n+}"
    }
  ]
}