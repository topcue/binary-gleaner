{
  "sha": "5e12f48ffbf5eba4524fdbae341f091c7cd0cb72",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWUxMmY0OGZmYmY1ZWJhNDUyNGZkYmFlMzQxZjA5MWM3Y2QwY2I3Mg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-13T16:44:24Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-01-13T16:44:24Z"
    },
    "message": "gdb: bool-ify file_is_auto_load_safe\n\nMake it return bool and change the advice_printed to bool as well.  Move\ndoc to header file.\n\ngdb/ChangeLog:\n\n\t* auto-load.h (file_is_auto_load_safe): Change return type to\n\tbool, move comment here.\n\t* auto-load.c (file_is_auto_load_safe): Change return type and\n\tadvice_printed to bool.  Move comment to  header.\n\nChange-Id: Ia7395e7cea8880377800240833316e4be5251d49",
    "tree": {
      "sha": "984056816a088262765391f58e72580130f584a4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/984056816a088262765391f58e72580130f584a4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5e12f48ffbf5eba4524fdbae341f091c7cd0cb72",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e12f48ffbf5eba4524fdbae341f091c7cd0cb72",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5e12f48ffbf5eba4524fdbae341f091c7cd0cb72",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e12f48ffbf5eba4524fdbae341f091c7cd0cb72/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "54ca900277f2abe483f6c747452a528a0e804b62",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/54ca900277f2abe483f6c747452a528a0e804b62",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/54ca900277f2abe483f6c747452a528a0e804b62"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 24,
    "deletions": 15
  },
  "files": [
    {
      "sha": "d0b78c708d789fe299015a925fa17638c078fe02",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e12f48ffbf5eba4524fdbae341f091c7cd0cb72/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e12f48ffbf5eba4524fdbae341f091c7cd0cb72/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5e12f48ffbf5eba4524fdbae341f091c7cd0cb72",
      "patch": "@@ -1,3 +1,10 @@\n+2021-01-13  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* auto-load.h (file_is_auto_load_safe): Change return type to\n+\tbool, move comment here.\n+\t* auto-load.c (file_is_auto_load_safe): Change return type and\n+\tadvice_printed to bool.  Move comment to  header.\n+\n 2021-01-13  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* jit.c (jit_debug_printf): New, use throughout file."
    },
    {
      "sha": "7b4cd73ea574b26d2d5dab455d4472214d0fc749",
      "filename": "gdb/auto-load.c",
      "status": "modified",
      "additions": 7,
      "deletions": 13,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e12f48ffbf5eba4524fdbae341f091c7cd0cb72/gdb/auto-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e12f48ffbf5eba4524fdbae341f091c7cd0cb72/gdb/auto-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auto-load.c?ref=5e12f48ffbf5eba4524fdbae341f091c7cd0cb72",
      "patch": "@@ -461,19 +461,13 @@ filename_is_in_auto_load_safe_path_vec (const char *filename,\n   return 0;\n }\n \n-/* Return 1 if FILENAME is located in one of the directories of\n-   AUTO_LOAD_SAFE_PATH.  Otherwise call warning and return 0.  FILENAME does\n-   not have to be an absolute path.\n+/* See auto-load.h.  */\n \n-   Existence of FILENAME is not checked.  Function will still give a warning\n-   even if the caller would quietly skip non-existing file in unsafe\n-   directory.  */\n-\n-int\n+bool\n file_is_auto_load_safe (const char *filename, const char *debug_fmt, ...)\n {\n   gdb::unique_xmalloc_ptr<char> filename_real;\n-  static int advice_printed = 0;\n+  static bool advice_printed = false;\n \n   if (debug_auto_load)\n     {\n@@ -485,11 +479,11 @@ file_is_auto_load_safe (const char *filename, const char *debug_fmt, ...)\n     }\n \n   if (filename_is_in_auto_load_safe_path_vec (filename, &filename_real))\n-    return 1;\n+    return true;\n \n   auto_load_safe_path_vec_update ();\n   if (filename_is_in_auto_load_safe_path_vec (filename, &filename_real))\n-    return 1;\n+    return true;\n \n   warning (_(\"File \\\"%ps\\\" auto-loading has been declined by your \"\n \t     \"`auto-load safe-path' set to \\\"%s\\\".\"),\n@@ -531,10 +525,10 @@ For more information about this security protection see the\\n\\\n \\tinfo \\\"(gdb)Auto-loading safe path\\\"\\n\"),\n \t\t       filename_real.get (),\n \t\t       home_config.c_str (), home_config.c_str ());\n-      advice_printed = 1;\n+      advice_printed = true;\n     }\n \n-  return 0;\n+  return false;\n }\n \n /* For scripts specified in .debug_gdb_scripts, multiple objfiles may load"
    },
    {
      "sha": "c644b4694accc5d3d432aba6a12d6fd48a930f21",
      "filename": "gdb/auto-load.h",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e12f48ffbf5eba4524fdbae341f091c7cd0cb72/gdb/auto-load.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e12f48ffbf5eba4524fdbae341f091c7cd0cb72/gdb/auto-load.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auto-load.h?ref=5e12f48ffbf5eba4524fdbae341f091c7cd0cb72",
      "patch": "@@ -44,8 +44,16 @@ extern struct cmd_list_element **auto_load_set_cmdlist_get (void);\n extern struct cmd_list_element **auto_load_show_cmdlist_get (void);\n extern struct cmd_list_element **auto_load_info_cmdlist_get (void);\n \n-extern int file_is_auto_load_safe (const char *filename,\n-\t\t\t\t   const char *debug_fmt, ...)\n+/* Return true if FILENAME is located in one of the directories of\n+   AUTO_LOAD_SAFE_PATH.  Otherwise call warning and return false.  FILENAME does\n+   not have to be an absolute path.\n+\n+   Existence of FILENAME is not checked.  Function will still give a warning\n+   even if the caller would quietly skip non-existing file in unsafe\n+   directory.  */\n+\n+extern bool file_is_auto_load_safe (const char *filename,\n+\t\t\t\t    const char *debug_fmt, ...)\n   ATTRIBUTE_PRINTF (2, 3);\n \n extern int auto_load_gdb_scripts_enabled"
    }
  ]
}