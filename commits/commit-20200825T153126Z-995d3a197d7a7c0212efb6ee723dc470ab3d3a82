{
  "sha": "995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTk1ZDNhMTk3ZDdhN2MwMjEyZWZiNmVlNzIzZGM0NzBhYjNkM2E4Mg==",
  "commit": {
    "author": {
      "name": "Shahab Vahedi",
      "email": "shahab@synopsys.com",
      "date": "2020-07-09T15:43:13Z"
    },
    "committer": {
      "name": "Shahab Vahedi",
      "email": "shahab@synopsys.com",
      "date": "2020-08-25T15:31:26Z"
    },
    "message": "arc: Add ARCv2 XML target along with refactoring\n\nA few changes have been made to make the register support simpler,\nmore flexible and extendible.  The trigger for most of these changes\nare the remarks [1] made earlier for v2 of this patch.  The noticeable\nimprovements are:\n\n- The arc XML target features are placed under gdb/features/arc\n- There are two cores (based on ISA) and one auxiliary feature:\n  v1-core: ARC600, ARC601, ARC700\n  v2-core: ARC EM, ARC HS\n  aux: common in both\n- The XML target features represent a minimalistic sane set of\n  registers irrespective of application (baremetal or linux).\n- A concept of \"feature\" class has been introduced in the code.\n  The \"feature\" object is constructed from BFD and GDBARCH data.\n  It contains necessary information (ISA and register size) to\n  determine which XML target feature to use.\n- A new structure (ARC_REGISTER_FEATURE) is added that allows\n  providing index, names, and the necessity of registers. This\n  simplifies the sanity checks and future extendibility.\n- Documnetation has been updated to reflect ARC features better.\n- Although the feature names has changed, there still exists\n  backward compatibility with older names through\n  find_obsolete_[core,aux]_names() functions.\n\nThe last two points were inspired from RiscV port.\n\n[1]\nhttps://sourceware.org/pipermail/gdb-patches/2020-May/168511.html\n\ngdb/ChangeLog:\n\n\t* arch/arc.h\n\t  (arc_gdbarch_features): New class to stir the selection of target XML.\n\t  (arc_create_target_description): Use FEATURES to choose XML target.\n\t  (arc_lookup_target_description): Use arc_create_target_description\n\t  to create _new_ target descriptions or return the already created\n\t  ones if the FEATURES is the same.\n\t* arch/arc.c: Implementation of prototypes described above.\n\t* gdb/arc-tdep.h (arc_regnum enum): Add more registers.\n\t  (arc_gdbarch_features_init): Initialize the FEATURES struct.\n\t* arc-tdep.c (*_feature_name): Make feature names consistent.\n\t  (arc_register_feature): A new struct to hold information about\n\t  registers of a particular target/feature.\n\t  (arc_check_tdesc_feature): Check if XML provides registers in\n\t  compliance with ARC_REGISTER_FEATURE structs.\n\t  (arc_update_acc_reg_names): Add aliases for r58 and r59.\n\t  (determine_*_reg_feature_set): Which feature name to look for.\n\t  (arc_gdbarch_features_init): Given MACH and ABFD, initialize FEATURES.\n\t  (mach_type_to_arc_isa): Convert from a set of binutils machine types\n\t  to expected ISA enums to be used in arc_gdbarch_features structs.\n\t* features/Makefile (FEATURE_XMLFILES): Add new files.\n\t* gdb/features/arc/v1-aux.c: New file.\n\t* gdb/features/arc/v1-aux.xml: Likewise.\n\t* gdb/features/arc/v1-core.c: Likewise.\n\t* gdb/features/arc/v1-core.xml: Likewise.\n\t* gdb/features/arc/v2-aux.c: Likewise.\n\t* gdb/features/arc/v2-aux.xml: Likewise.\n\t* gdb/features/arc/v2-core.c: Likewise.\n\t* gdb/features/arc/v2-core.xml: Likewise.\n\t* NEWS (Changes since GDB 9): Announce obsolence of old feature names.\n\ngdb/doc/ChangeLog:\n\n\t* gdb.texinfo (Synopsys ARC): Update the documentation for ARC\n\tFeatures.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.arch/arc-tdesc-cpu.xml: Use new feature names.",
    "tree": {
      "sha": "b6a11792e5b0f79854411639964b10a4939f22bc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b6a11792e5b0f79854411639964b10a4939f22bc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "8cac2b318b1bf14d468b769187a8233a1220c48e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8cac2b318b1bf14d468b769187a8233a1220c48e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8cac2b318b1bf14d468b769187a8233a1220c48e"
    }
  ],
  "stats": {
    "total": 1040,
    "additions": 691,
    "deletions": 349
  },
  "files": [
    {
      "sha": "ec936d7ccd4c75a926bca4eb0f050b88b962a940",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -1,3 +1,35 @@\n+2020-08-25  Shahab Vahedi  <shahab@synopsys.com>\n+\n+\t* arch/arc.h\n+\t(arc_gdbarch_features): New class to stir the selection of target XML.\n+\t(arc_create_target_description): Use FEATURES to choose XML target.\n+\t(arc_lookup_target_description): Use arc_create_target_description\n+\tto create _new_ target descriptions or return the already created\n+\tones if the FEATURES is the same.\n+\t* arch/arc.c: Implementation of prototypes described above.\n+\t* gdb/arc-tdep.h (arc_regnum enum): Add more registers.\n+\t(arc_gdbarch_features_init): Initialize the FEATURES struct.\n+\t* arc-tdep.c (*_feature_name): Make feature names consistent.\n+\t(arc_register_feature): A new struct to hold information about\n+\tregisters of a particular target/feature.\n+\t(arc_check_tdesc_feature): Check if XML provides registers in\n+\tcompliance with ARC_REGISTER_FEATURE structs.\n+\t(arc_update_acc_reg_names): Add aliases for r58 and r59.\n+\t(determine_*_reg_feature_set): Which feature name to look for.\n+\t(arc_gdbarch_features_init): Given MACH and ABFD, initialize FEATURES.\n+\t(mach_type_to_arc_isa): Convert from a set of binutils machine types\n+\tto expected ISA enums to be used in arc_gdbarch_features structs.\n+\t* features/Makefile (FEATURE_XMLFILES): Add new files.\n+\t* gdb/features/arc/v1-aux.c: New file.\n+\t* gdb/features/arc/v1-aux.xml: Likewise.\n+\t* gdb/features/arc/v1-core.c: Likewise.\n+\t* gdb/features/arc/v1-core.xml: Likewise.\n+\t* gdb/features/arc/v2-aux.c: Likewise.\n+\t* gdb/features/arc/v2-aux.xml: Likewise.\n+\t* gdb/features/arc/v2-core.c: Likewise.\n+\t* gdb/features/arc/v2-core.xml: Likewise.\n+\t* NEWS (Changes since GDB 9): Announce obsolence of old feature names.\n+\n 2020-08-25  Gaius Mulley  <gaiusmod2@gmail.com>\n \t    Andrew Burgess  <andrew.burgess@embecosm.com>\n "
    },
    {
      "sha": "45bd23526d65a8c990d6163a71987ab535cab119",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -3,6 +3,11 @@\n \n *** Changes since GDB 9\n \n+* There are new feature names for ARC targets: \"org.gnu.gdb.arc.core\"\n+  and \"org.gnu.gdb.arc.aux\".  The old names are still supported but\n+  must be considered obsolete.  They will be deprecated after some\n+  grace period.\n+\n * Help and apropos commands will now show the documentation of a\n   command only once, even if that command has one or more aliases.\n   These commands now show the command name, then all of its aliases,"
    },
    {
      "sha": "cb4941dec026067c2aa503a018fcdd1cbb06e260",
      "filename": "gdb/arc-tdep.c",
      "status": "modified",
      "additions": 416,
      "deletions": 236,
      "changes": 652,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/arc-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/arc-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-tdep.c?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -21,6 +21,7 @@\n /* GDB header files.  */\n #include \"defs.h\"\n #include \"arch-utils.h\"\n+#include \"elf-bfd.h\"\n #include \"disasm.h\"\n #include \"dwarf2/frame.h\"\n #include \"frame-base.h\"\n@@ -41,6 +42,7 @@\n \n /* Standard headers.  */\n #include <algorithm>\n+#include <sstream>\n \n /* The frame unwind cache for ARC.  */\n \n@@ -91,63 +93,211 @@ int arc_debug;\n \n static struct cmd_list_element *maintenance_print_arc_list = NULL;\n \n-/* XML target description features.  */\n-\n-static const char core_v2_feature_name[] = \"org.gnu.gdb.arc.core.v2\";\n-static const char\n-  core_reduced_v2_feature_name[] = \"org.gnu.gdb.arc.core-reduced.v2\";\n-static const char\n-  core_arcompact_feature_name[] = \"org.gnu.gdb.arc.core.arcompact\";\n-static const char aux_minimal_feature_name[] = \"org.gnu.gdb.arc.aux-minimal\";\n-\n-/* XML target description known registers.  */\n-\n-static const char *const core_v2_register_names[] = {\n-  \"r0\", \"r1\", \"r2\", \"r3\",\n-  \"r4\", \"r5\", \"r6\", \"r7\",\n-  \"r8\", \"r9\", \"r10\", \"r11\",\n-  \"r12\", \"r13\", \"r14\", \"r15\",\n-  \"r16\", \"r17\", \"r18\", \"r19\",\n-  \"r20\", \"r21\", \"r22\", \"r23\",\n-  \"r24\", \"r25\", \"gp\", \"fp\",\n-  \"sp\", \"ilink\", \"r30\", \"blink\",\n-  \"r32\", \"r33\", \"r34\", \"r35\",\n-  \"r36\", \"r37\", \"r38\", \"r39\",\n-  \"r40\", \"r41\", \"r42\", \"r43\",\n-  \"r44\", \"r45\", \"r46\", \"r47\",\n-  \"r48\", \"r49\", \"r50\", \"r51\",\n-  \"r52\", \"r53\", \"r54\", \"r55\",\n-  \"r56\", \"r57\", \"accl\", \"acch\",\n-  \"lp_count\", \"reserved\", \"limm\", \"pcl\",\n+/* A set of registers that we expect to find in a tdesc_feature.  These\n+   are used in ARC_TDESC_INIT when processing the target description.  */\n+\n+struct arc_register_feature\n+{\n+  /* Information for a single register.  */\n+  struct register_info\n+  {\n+    /* The GDB register number for this register.  */\n+    int regnum;\n+\n+    /* List of names for this register.  The first name in this list is the\n+       preferred name, the name GDB will use when describing this register.  */\n+    std::vector<const char *> names;\n+\n+    /* When true, this register must be present in this feature set.  */\n+    bool required_p;\n+  };\n+\n+  /* The name for this feature.  This is the name used to find this feature\n+     within the target description.  */\n+  const char *name;\n+\n+  /* List of all the registers that we expect to encounter in this register\n+     set.  */\n+  std::vector<struct register_info> registers;\n };\n \n-static const char *const aux_minimal_register_names[] = {\n-  \"pc\", \"status32\",\n+/* Obsolete feature names for backward compatibility.  */\n+static const char *ARC_CORE_V1_OBSOLETE_FEATURE_NAME\n+  = \"org.gnu.gdb.arc.core.arcompact\";\n+static const char *ARC_CORE_V2_OBSOLETE_FEATURE_NAME\n+  = \"org.gnu.gdb.arc.core.v2\";\n+static const char *ARC_CORE_V2_REDUCED_OBSOLETE_FEATURE_NAME\n+  = \"org.gnu.gdb.arc.core-reduced.v2\";\n+static const char *ARC_AUX_OBSOLETE_FEATURE_NAME\n+  = \"org.gnu.gdb.arc.aux-minimal\";\n+/* Modern feature names.  */\n+static const char *ARC_CORE_FEATURE_NAME = \"org.gnu.gdb.arc.core\";\n+static const char *ARC_AUX_FEATURE_NAME = \"org.gnu.gdb.arc.aux\";\n+\n+/* ARCv1 (ARC600, ARC601, ARC700) general core registers feature set.\n+   See also arc_update_acc_reg_names() for \"accl/acch\" names.  */\n+\n+static struct arc_register_feature arc_v1_core_reg_feature =\n+{\n+  ARC_CORE_FEATURE_NAME,\n+  {\n+    { ARC_R0_REGNUM + 0, { \"r0\" }, true },\n+    { ARC_R0_REGNUM + 1, { \"r1\" }, true },\n+    { ARC_R0_REGNUM + 2, { \"r2\" }, true },\n+    { ARC_R0_REGNUM + 3, { \"r3\" }, true },\n+    { ARC_R0_REGNUM + 4, { \"r4\" }, false },\n+    { ARC_R0_REGNUM + 5, { \"r5\" }, false },\n+    { ARC_R0_REGNUM + 6, { \"r6\" }, false },\n+    { ARC_R0_REGNUM + 7, { \"r7\" }, false },\n+    { ARC_R0_REGNUM + 8, { \"r8\" }, false },\n+    { ARC_R0_REGNUM + 9, { \"r9\" }, false },\n+    { ARC_R0_REGNUM + 10, { \"r10\" }, true },\n+    { ARC_R0_REGNUM + 11, { \"r11\" }, true },\n+    { ARC_R0_REGNUM + 12, { \"r12\" }, true },\n+    { ARC_R0_REGNUM + 13, { \"r13\" }, true },\n+    { ARC_R0_REGNUM + 14, { \"r14\" }, true },\n+    { ARC_R0_REGNUM + 15, { \"r15\" }, true },\n+    { ARC_R0_REGNUM + 16, { \"r16\" }, false },\n+    { ARC_R0_REGNUM + 17, { \"r17\" }, false },\n+    { ARC_R0_REGNUM + 18, { \"r18\" }, false },\n+    { ARC_R0_REGNUM + 19, { \"r19\" }, false },\n+    { ARC_R0_REGNUM + 20, { \"r20\" }, false },\n+    { ARC_R0_REGNUM + 21, { \"r21\" }, false },\n+    { ARC_R0_REGNUM + 22, { \"r22\" }, false },\n+    { ARC_R0_REGNUM + 23, { \"r23\" }, false },\n+    { ARC_R0_REGNUM + 24, { \"r24\" }, false },\n+    { ARC_R0_REGNUM + 25, { \"r25\" }, false },\n+    { ARC_R0_REGNUM + 26, { \"gp\" }, true },\n+    { ARC_R0_REGNUM + 27, { \"fp\" }, true },\n+    { ARC_R0_REGNUM + 28, { \"sp\" }, true },\n+    { ARC_R0_REGNUM + 29, { \"ilink1\" }, false },\n+    { ARC_R0_REGNUM + 30, { \"ilink2\" }, false },\n+    { ARC_R0_REGNUM + 31, { \"blink\" }, true },\n+    { ARC_R0_REGNUM + 32, { \"r32\" }, false },\n+    { ARC_R0_REGNUM + 33, { \"r33\" }, false },\n+    { ARC_R0_REGNUM + 34, { \"r34\" }, false },\n+    { ARC_R0_REGNUM + 35, { \"r35\" }, false },\n+    { ARC_R0_REGNUM + 36, { \"r36\" }, false },\n+    { ARC_R0_REGNUM + 37, { \"r37\" }, false },\n+    { ARC_R0_REGNUM + 38, { \"r38\" }, false },\n+    { ARC_R0_REGNUM + 39, { \"r39\" }, false },\n+    { ARC_R0_REGNUM + 40, { \"r40\" }, false },\n+    { ARC_R0_REGNUM + 41, { \"r41\" }, false },\n+    { ARC_R0_REGNUM + 42, { \"r42\" }, false },\n+    { ARC_R0_REGNUM + 43, { \"r43\" }, false },\n+    { ARC_R0_REGNUM + 44, { \"r44\" }, false },\n+    { ARC_R0_REGNUM + 45, { \"r45\" }, false },\n+    { ARC_R0_REGNUM + 46, { \"r46\" }, false },\n+    { ARC_R0_REGNUM + 47, { \"r47\" }, false },\n+    { ARC_R0_REGNUM + 48, { \"r48\" }, false },\n+    { ARC_R0_REGNUM + 49, { \"r49\" }, false },\n+    { ARC_R0_REGNUM + 50, { \"r50\" }, false },\n+    { ARC_R0_REGNUM + 51, { \"r51\" }, false },\n+    { ARC_R0_REGNUM + 52, { \"r52\" }, false },\n+    { ARC_R0_REGNUM + 53, { \"r53\" }, false },\n+    { ARC_R0_REGNUM + 54, { \"r54\" }, false },\n+    { ARC_R0_REGNUM + 55, { \"r55\" }, false },\n+    { ARC_R0_REGNUM + 56, { \"r56\" }, false },\n+    { ARC_R0_REGNUM + 57, { \"r57\" }, false },\n+    { ARC_R0_REGNUM + 58, { \"r58\", \"accl\" }, false },\n+    { ARC_R0_REGNUM + 59, { \"r59\", \"acch\" }, false },\n+    { ARC_R0_REGNUM + 60, { \"lp_count\" }, false },\n+    { ARC_R0_REGNUM + 61, { \"reserved\" }, false },\n+    { ARC_R0_REGNUM + 62, { \"limm\" }, false },\n+    { ARC_R0_REGNUM + 63, { \"pcl\" }, true }\n+  }\n };\n \n-static const char *const core_arcompact_register_names[] = {\n-  \"r0\", \"r1\", \"r2\", \"r3\",\n-  \"r4\", \"r5\", \"r6\", \"r7\",\n-  \"r8\", \"r9\", \"r10\", \"r11\",\n-  \"r12\", \"r13\", \"r14\", \"r15\",\n-  \"r16\", \"r17\", \"r18\", \"r19\",\n-  \"r20\", \"r21\", \"r22\", \"r23\",\n-  \"r24\", \"r25\", \"gp\", \"fp\",\n-  \"sp\", \"ilink1\", \"ilink2\", \"blink\",\n-  \"r32\", \"r33\", \"r34\", \"r35\",\n-  \"r36\", \"r37\", \"r38\", \"r39\",\n-  \"r40\", \"r41\", \"r42\", \"r43\",\n-  \"r44\", \"r45\", \"r46\", \"r47\",\n-  \"r48\", \"r49\", \"r50\", \"r51\",\n-  \"r52\", \"r53\", \"r54\", \"r55\",\n-  \"r56\", \"r57\", \"r58\", \"r59\",\n-  \"lp_count\", \"reserved\", \"limm\", \"pcl\",\n+/* ARCv2 (ARCHS) general core registers feature set.  See also\n+   arc_update_acc_reg_names() for \"accl/acch\" names.  */\n+\n+static struct arc_register_feature arc_v2_core_reg_feature =\n+{\n+  ARC_CORE_FEATURE_NAME,\n+  {\n+    { ARC_R0_REGNUM + 0, { \"r0\" }, true },\n+    { ARC_R0_REGNUM + 1, { \"r1\" }, true },\n+    { ARC_R0_REGNUM + 2, { \"r2\" }, true },\n+    { ARC_R0_REGNUM + 3, { \"r3\" }, true },\n+    { ARC_R0_REGNUM + 4, { \"r4\" }, false },\n+    { ARC_R0_REGNUM + 5, { \"r5\" }, false },\n+    { ARC_R0_REGNUM + 6, { \"r6\" }, false },\n+    { ARC_R0_REGNUM + 7, { \"r7\" }, false },\n+    { ARC_R0_REGNUM + 8, { \"r8\" }, false },\n+    { ARC_R0_REGNUM + 9, { \"r9\" }, false },\n+    { ARC_R0_REGNUM + 10, { \"r10\" }, true },\n+    { ARC_R0_REGNUM + 11, { \"r11\" }, true },\n+    { ARC_R0_REGNUM + 12, { \"r12\" }, true },\n+    { ARC_R0_REGNUM + 13, { \"r13\" }, true },\n+    { ARC_R0_REGNUM + 14, { \"r14\" }, true },\n+    { ARC_R0_REGNUM + 15, { \"r15\" }, true },\n+    { ARC_R0_REGNUM + 16, { \"r16\" }, false },\n+    { ARC_R0_REGNUM + 17, { \"r17\" }, false },\n+    { ARC_R0_REGNUM + 18, { \"r18\" }, false },\n+    { ARC_R0_REGNUM + 19, { \"r19\" }, false },\n+    { ARC_R0_REGNUM + 20, { \"r20\" }, false },\n+    { ARC_R0_REGNUM + 21, { \"r21\" }, false },\n+    { ARC_R0_REGNUM + 22, { \"r22\" }, false },\n+    { ARC_R0_REGNUM + 23, { \"r23\" }, false },\n+    { ARC_R0_REGNUM + 24, { \"r24\" }, false },\n+    { ARC_R0_REGNUM + 25, { \"r25\" }, false },\n+    { ARC_R0_REGNUM + 26, { \"gp\" }, true },\n+    { ARC_R0_REGNUM + 27, { \"fp\" }, true },\n+    { ARC_R0_REGNUM + 28, { \"sp\" }, true },\n+    { ARC_R0_REGNUM + 29, { \"ilink\" }, false },\n+    { ARC_R0_REGNUM + 30, { \"r30\" }, true },\n+    { ARC_R0_REGNUM + 31, { \"blink\" }, true },\n+    { ARC_R0_REGNUM + 32, { \"r32\" }, false },\n+    { ARC_R0_REGNUM + 33, { \"r33\" }, false },\n+    { ARC_R0_REGNUM + 34, { \"r34\" }, false },\n+    { ARC_R0_REGNUM + 35, { \"r35\" }, false },\n+    { ARC_R0_REGNUM + 36, { \"r36\" }, false },\n+    { ARC_R0_REGNUM + 37, { \"r37\" }, false },\n+    { ARC_R0_REGNUM + 38, { \"r38\" }, false },\n+    { ARC_R0_REGNUM + 39, { \"r39\" }, false },\n+    { ARC_R0_REGNUM + 40, { \"r40\" }, false },\n+    { ARC_R0_REGNUM + 41, { \"r41\" }, false },\n+    { ARC_R0_REGNUM + 42, { \"r42\" }, false },\n+    { ARC_R0_REGNUM + 43, { \"r43\" }, false },\n+    { ARC_R0_REGNUM + 44, { \"r44\" }, false },\n+    { ARC_R0_REGNUM + 45, { \"r45\" }, false },\n+    { ARC_R0_REGNUM + 46, { \"r46\" }, false },\n+    { ARC_R0_REGNUM + 47, { \"r47\" }, false },\n+    { ARC_R0_REGNUM + 48, { \"r48\" }, false },\n+    { ARC_R0_REGNUM + 49, { \"r49\" }, false },\n+    { ARC_R0_REGNUM + 50, { \"r50\" }, false },\n+    { ARC_R0_REGNUM + 51, { \"r51\" }, false },\n+    { ARC_R0_REGNUM + 52, { \"r52\" }, false },\n+    { ARC_R0_REGNUM + 53, { \"r53\" }, false },\n+    { ARC_R0_REGNUM + 54, { \"r54\" }, false },\n+    { ARC_R0_REGNUM + 55, { \"r55\" }, false },\n+    { ARC_R0_REGNUM + 56, { \"r56\" }, false },\n+    { ARC_R0_REGNUM + 57, { \"r57\" }, false },\n+    { ARC_R0_REGNUM + 58, { \"r58\", \"accl\" }, false },\n+    { ARC_R0_REGNUM + 59, { \"r59\", \"acch\" }, false },\n+    { ARC_R0_REGNUM + 60, { \"lp_count\" }, false },\n+    { ARC_R0_REGNUM + 61, { \"reserved\" }, false },\n+    { ARC_R0_REGNUM + 62, { \"limm\" }, false },\n+    { ARC_R0_REGNUM + 63, { \"pcl\" }, true }\n+  }\n };\n \n-static char *arc_disassembler_options = NULL;\n+/* The common auxiliary registers feature set.  The REGNUM field\n+   must match the ARC_REGNUM enum in arc-tdep.h.  */\n \n-/* Possible arc target descriptors.  */\n-static struct target_desc *tdesc_arc_list[ARC_SYS_TYPE_NUM];\n+static const struct arc_register_feature arc_common_aux_reg_feature =\n+{\n+  ARC_AUX_FEATURE_NAME,\n+  {\n+    { ARC_FIRST_AUX_REGNUM + 0, { \"pc\" }, true },\n+    { ARC_FIRST_AUX_REGNUM + 1, { \"status32\" }, true },\n+    { ARC_FIRST_AUX_REGNUM + 2, { \"lp_start\" }, false },\n+    { ARC_FIRST_AUX_REGNUM + 3, { \"lp_end\" }, false },\n+    { ARC_FIRST_AUX_REGNUM + 4, { \"bta\" }, false }\n+  }\n+};\n+\n+static char *arc_disassembler_options = NULL;\n \n /* Functions are sorted in the order as they are used in the\n    _initialize_arc_tdep (), which uses the same order as gdbarch.h.  Static\n@@ -1717,192 +1867,254 @@ static const struct frame_base arc_normal_base = {\n   arc_frame_base_address\n };\n \n-/* Initialize target description for the ARC.\n-\n-   Returns TRUE if input tdesc was valid and in this case it will assign TDESC\n-   and TDESC_DATA output parameters.  */\n-\n-static bool\n-arc_tdesc_init (struct gdbarch_info info, const struct target_desc **tdesc,\n-\t\tstruct tdesc_arch_data **tdesc_data)\n+static enum arc_isa\n+mach_type_to_arc_isa (const unsigned long mach)\n {\n-  if (arc_debug)\n-    debug_printf (\"arc: Target description initialization.\\n\");\n-\n-  const struct target_desc *tdesc_loc = info.target_desc;\n+  switch (mach)\n+    {\n+    case bfd_mach_arc_arc600:\n+    case bfd_mach_arc_arc601:\n+    case bfd_mach_arc_arc700:\n+      return ARC_ISA_ARCV1;\n+    case bfd_mach_arc_arcv2:\n+      return ARC_ISA_ARCV2;\n+    default:\n+\tinternal_error (__FILE__, __LINE__,\n+\t\t\t_(\"unknown machine id %lu\"), mach);\n+    }\n+}\n \n-  /* Depending on whether this is ARCompact or ARCv2 we will assign\n-     different default registers sets (which will differ in exactly two core\n-     registers).  GDB will also refuse to accept register feature from invalid\n-     ISA - v2 features can be used only with v2 ARChitecture.  We read\n-     bfd_arch_info, which looks like to be a safe bet here, as it looks like it\n-     is always initialized even when we don't pass any elf file to GDB at all\n-     (it uses default arch in this case).  Also GDB will call this function\n-     multiple times, and if XML target description file contains architecture\n-     specifications, then GDB will set this architecture to info.bfd_arch_info,\n-     overriding value from ELF file if they are different.  That means that,\n-     where matters, this value is always our best guess on what CPU we are\n-     debugging.  It has been noted that architecture specified in tdesc file\n-     has higher precedence over ELF and even \"set architecture\" - that is,\n-     using \"set architecture\" command will have no effect when tdesc has \"arch\"\n-     tag.  */\n-  /* Cannot use arc_mach_is_arcv2 (), because gdbarch is not created yet.  */\n-  const int is_arcv2 = (info.bfd_arch_info->mach == bfd_mach_arc_arcv2);\n-  bool is_reduced_rf;\n-  const char *const *core_regs;\n-  const char *core_feature_name;\n+/* Common construction code for ARC_GDBARCH_FEATURES struct.  If there\n+   is no ABFD, then a FEATURE with default values is returned.  */\n \n-  /* If target doesn't provide a description, use the default ones.  */\n-  if (!tdesc_has_registers (tdesc_loc))\n+static arc_gdbarch_features\n+arc_gdbarch_features_create (const bfd *abfd, const unsigned long mach)\n+{\n+  /* Use 4 as a fallback value.  */\n+  int reg_size = 4;\n+\n+  /* Try to guess the features parameters by looking at the binary to be\n+     executed.  If the user is providing a binary that does not match the\n+     target, then tough luck.  This is the last effort to makes sense of\n+     what's going on.  */\n+  if (abfd != nullptr && bfd_get_flavour (abfd) == bfd_target_elf_flavour)\n     {\n-      if (is_arcv2)\n-\ttdesc_loc = arc_read_description (ARC_SYS_TYPE_ARCV2);\n+      unsigned char eclass = elf_elfheader (abfd)->e_ident[EI_CLASS];\n+\n+      if (eclass == ELFCLASS32)\n+\treg_size = 4;\n+      else if (eclass == ELFCLASS64)\n+\treg_size = 8;\n       else\n-\ttdesc_loc = arc_read_description (ARC_SYS_TYPE_ARCOMPACT);\n+\tinternal_error (__FILE__, __LINE__,\n+\t\t\t_(\"unknown ELF header class %d\"), eclass);\n     }\n-  else\n+\n+  /* MACH from a bfd_arch_info struct is used here.  It should be a safe\n+     bet, as it looks like the struct is always initialized even when we\n+     don't pass any elf file to GDB at all (it uses default arch in that\n+     case).  */\n+  arc_isa isa = mach_type_to_arc_isa (mach);\n+\n+  return arc_gdbarch_features (reg_size, isa);\n+}\n+\n+/* Look for obsolete core feature names in TDESC.  */\n+\n+static const struct tdesc_feature *\n+find_obsolete_core_names (const struct target_desc *tdesc)\n+{\n+  const struct tdesc_feature *feat = nullptr;\n+\n+  feat = tdesc_find_feature (tdesc, ARC_CORE_V1_OBSOLETE_FEATURE_NAME);\n+\n+  if (feat == nullptr)\n+    feat = tdesc_find_feature (tdesc, ARC_CORE_V2_OBSOLETE_FEATURE_NAME);\n+\n+  if (feat == nullptr)\n+    feat = tdesc_find_feature\n+      (tdesc, ARC_CORE_V2_REDUCED_OBSOLETE_FEATURE_NAME);\n+\n+  return feat;\n+}\n+\n+/* Look for obsolete aux feature names in TDESC.  */\n+\n+static const struct tdesc_feature *\n+find_obsolete_aux_names (const struct target_desc *tdesc)\n+{\n+  return tdesc_find_feature (tdesc, ARC_AUX_OBSOLETE_FEATURE_NAME);\n+}\n+\n+/* Based on the MACH value, determines which core register features set\n+   must be used.  */\n+\n+static arc_register_feature *\n+determine_core_reg_feature_set (const unsigned long mach)\n+{\n+  switch (mach_type_to_arc_isa (mach))\n     {\n-      if (arc_debug)\n-\tdebug_printf (\"arc: Using provided register set.\\n\");\n+    case ARC_ISA_ARCV1:\n+      return &arc_v1_core_reg_feature;\n+    case ARC_ISA_ARCV2:\n+      return &arc_v2_core_reg_feature;\n+    default:\n+      gdb_assert_not_reached\n+        (\"Unknown machine type to determine the core feature set.\");\n     }\n-  gdb_assert (tdesc_loc != NULL);\n-\n-  /* Now we can search for base registers.  Core registers can be either full\n-     or reduced.  Summary:\n-\n-     - core.v2 + aux-minimal\n-     - core-reduced.v2 + aux-minimal\n-     - core.arcompact + aux-minimal\n-\n-     NB: It is entirely feasible to have ARCompact with reduced core regs, but\n-     we ignore that because GCC doesn't support that and at the same time\n-     ARCompact is considered obsolete, so there is not much reason to support\n-     that.  */\n-  const struct tdesc_feature *feature\n-    = tdesc_find_feature (tdesc_loc, core_v2_feature_name);\n-  if (feature != NULL)\n-    {\n-      /* Confirm that register and architecture match, to prevent accidents in\n-\t some situations.  This code will trigger an error if:\n+}\n \n-\t 1. XML tdesc doesn't specify arch explicitly, registers are for arch\n-\t X, but ELF specifies arch Y.\n+/* At the moment, there is only 1 auxiliary register features set.\n+   This is a place holder for future extendability.  */\n \n-\t 2. XML tdesc specifies arch X, but contains registers for arch Y.\n+static const arc_register_feature *\n+determine_aux_reg_feature_set ()\n+{\n+  return &arc_common_aux_reg_feature;\n+}\n \n-\t It will not protect from case where XML or ELF specify arch X,\n-\t registers are for the same arch X, but the real target is arch Y.  To\n-\t detect this case we need to check IDENTITY register.  */\n-      if (!is_arcv2)\n-\t{\n-\t  arc_print (_(\"Error: ARC v2 target description supplied for \"\n-\t\t       \"non-ARCv2 target.\\n\"));\n-\t  return false;\n-\t}\n+/* Update accumulator register names (ACCH/ACCL) for r58 and r59 in the\n+   register sets.  The endianness determines the assignment:\n \n-      is_reduced_rf = false;\n-      core_feature_name = core_v2_feature_name;\n-      core_regs = core_v2_register_names;\n-    }\n-  else\n+        ,------.------.\n+        | acch | accl |\n+   ,----|------+------|\n+   | LE | r59  | r58  |\n+   | BE | r58  | r59  |\n+   `----^------^------'  */\n+\n+static void\n+arc_update_acc_reg_names (const int byte_order)\n+{\n+  const char *r58_alias\n+    = byte_order == BFD_ENDIAN_LITTLE ? \"accl\" : \"acch\";\n+  const char *r59_alias\n+    = byte_order == BFD_ENDIAN_LITTLE ? \"acch\" : \"accl\";\n+\n+  /* Subscript 1 must be OK because those registers have 2 names.  */\n+  arc_v1_core_reg_feature.registers[ARC_R58_REGNUM].names[1] = r58_alias;\n+  arc_v1_core_reg_feature.registers[ARC_R59_REGNUM].names[1] = r59_alias;\n+  arc_v2_core_reg_feature.registers[ARC_R58_REGNUM].names[1] = r58_alias;\n+  arc_v2_core_reg_feature.registers[ARC_R59_REGNUM].names[1] = r59_alias;\n+}\n+\n+/* Go through all the registers in REG_SET and check if they exist\n+   in FEATURE.  The TDESC_DATA is updated with the register number\n+   in REG_SET if it is found in the feature.  If a required register\n+   is not found, this function returns false.  */\n+\n+static bool\n+arc_check_tdesc_feature (struct tdesc_arch_data *tdesc_data,\n+\t\t\t const struct tdesc_feature *feature,\n+\t\t\t const struct arc_register_feature *reg_set)\n+{\n+  for (const auto &reg : reg_set->registers)\n     {\n-      feature = tdesc_find_feature (tdesc_loc, core_reduced_v2_feature_name);\n-      if (feature != NULL)\n+      bool found = false;\n+\n+      for (const char *name : reg.names)\n \t{\n-\t  if (!is_arcv2)\n-\t    {\n-\t      arc_print (_(\"Error: ARC v2 target description supplied for \"\n-\t\t\t   \"non-ARCv2 target.\\n\"));\n-\t      return false;\n-\t    }\n+\t  found\n+\t    = tdesc_numbered_register (feature, tdesc_data, reg.regnum, name);\n \n-\t  is_reduced_rf = true;\n-\t  core_feature_name = core_reduced_v2_feature_name;\n-\t  core_regs = core_v2_register_names;\n+\t  if (found)\n+\t    break;\n \t}\n-      else\n+\n+      if (!found && reg.required_p)\n \t{\n-\t  feature = tdesc_find_feature (tdesc_loc,\n-\t\t\t\t\tcore_arcompact_feature_name);\n-\t  if (feature != NULL)\n-\t    {\n-\t      if (is_arcv2)\n-\t\t{\n-\t\t  arc_print (_(\"Error: ARCompact target description supplied \"\n-\t\t\t       \"for non-ARCompact target.\\n\"));\n-\t\t  return false;\n-\t\t}\n-\n-\t      is_reduced_rf = false;\n-\t      core_feature_name = core_arcompact_feature_name;\n-\t      core_regs = core_arcompact_register_names;\n-\t    }\n-\t  else\n+\t  std::ostringstream reg_names;\n+\t  for (std::size_t i = 0; i < reg.names.size(); ++i)\n \t    {\n-\t      arc_print (_(\"Error: Couldn't find core register feature in \"\n-\t\t\t   \"supplied target description.\"));\n-\t      return false;\n+\t      if (i == 0)\n+\t\treg_names << \"'\" << reg.names[0] << \"'\";\n+\t      else\n+\t\treg_names << \" or '\" << reg.names[0] << \"'\";\n \t    }\n+\t  arc_print (_(\"Error: Cannot find required register(s) %s \"\n+\t\t       \"in feature '%s'.\\n\"), reg_names.str ().c_str (),\n+\t\t       feature->name.c_str ());\n+\t  return false;\n \t}\n     }\n \n-  struct tdesc_arch_data *tdesc_data_loc = tdesc_data_alloc ();\n+  return true;\n+}\n \n-  gdb_assert (feature != NULL);\n-  int valid_p = 1;\n+/* Initialize target description for the ARC.\n \n-  for (int i = 0; i <= ARC_LAST_CORE_REGNUM; i++)\n+   Returns true if input TDESC was valid and in this case it will assign TDESC\n+   and TDESC_DATA output parameters.  */\n+\n+static bool\n+arc_tdesc_init (struct gdbarch_info info, const struct target_desc **tdesc,\n+\t\tstruct tdesc_arch_data **tdesc_data)\n+{\n+  const struct target_desc *tdesc_loc = info.target_desc;\n+  if (arc_debug)\n+    debug_printf (\"arc: Target description initialization.\\n\");\n+\n+  /* If target doesn't provide a description, use the default ones.  */\n+  if (!tdesc_has_registers (tdesc_loc))\n     {\n-      /* If rf16, then skip extra registers.  */\n-      if (is_reduced_rf && ((i >= ARC_R4_REGNUM && i <= ARC_R9_REGNUM)\n-\t\t\t    || (i >= ARC_R16_REGNUM && i <= ARC_R25_REGNUM)))\n-\tcontinue;\n-\n-      valid_p = tdesc_numbered_register (feature, tdesc_data_loc, i,\n-\t\t\t\t\t core_regs[i]);\n-\n-      /* - Ignore errors in extension registers - they are optional.\n-\t - Ignore missing ILINK because it doesn't make sense for Linux.\n-\t - Ignore missing ILINK2 when architecture is ARCompact, because it\n-\t doesn't make sense for Linux targets.\n-\n-\t In theory those optional registers should be in separate features, but\n-\t that would create numerous but tiny features, which looks like an\n-\t overengineering of a rather simple task.  */\n-      if (!valid_p && (i <= ARC_SP_REGNUM || i == ARC_BLINK_REGNUM\n-\t\t       || i == ARC_LP_COUNT_REGNUM || i == ARC_PCL_REGNUM\n-\t\t       || (i == ARC_R30_REGNUM && is_arcv2)))\n-\t{\n-\t  arc_print (_(\"Error: Cannot find required register `%s' in \"\n-\t\t       \"feature `%s'.\\n\"), core_regs[i], core_feature_name);\n-\t  tdesc_data_cleanup (tdesc_data_loc);\n-\t  return false;\n-\t}\n+      arc_gdbarch_features features\n+\t= arc_gdbarch_features_create (info.abfd,\n+\t\t\t\t       info.bfd_arch_info->mach);\n+      tdesc_loc = arc_lookup_target_description (features);\n+    }\n+  gdb_assert (tdesc_loc != nullptr);\n+\n+  if (arc_debug)\n+    debug_printf (\"arc: Have got a target description\\n\");\n+\n+  const struct tdesc_feature *feature_core\n+    = tdesc_find_feature (tdesc_loc, ARC_CORE_FEATURE_NAME);\n+  const struct tdesc_feature *feature_aux\n+    = tdesc_find_feature (tdesc_loc, ARC_AUX_FEATURE_NAME);\n+\n+  /* Maybe there still is a chance to salvage the input.  */\n+  if (feature_core == nullptr)\n+    feature_core = find_obsolete_core_names (tdesc_loc);\n+  if (feature_aux == nullptr)\n+    feature_aux = find_obsolete_aux_names (tdesc_loc);\n+\n+  if (feature_core == nullptr)\n+    {\n+      arc_print (_(\"Error: Cannot find required feature '%s' in supplied \"\n+\t\t   \"target description.\\n\"), ARC_CORE_FEATURE_NAME);\n+      return false;\n     }\n \n-  /* Mandatory AUX registers are intentionally few and are common between\n-     ARCompact and ARC v2, so same code can be used for both.  */\n-  feature = tdesc_find_feature (tdesc_loc, aux_minimal_feature_name);\n-  if (feature == NULL)\n+  if (feature_aux == nullptr)\n     {\n-      arc_print (_(\"Error: Cannot find required feature `%s' in supplied \"\n-\t\t   \"target description.\\n\"), aux_minimal_feature_name);\n-      tdesc_data_cleanup (tdesc_data_loc);\n+      arc_print (_(\"Error: Cannot find required feature '%s' in supplied \"\n+\t\t   \"target description.\\n\"), ARC_AUX_FEATURE_NAME);\n       return false;\n     }\n \n-  for (int i = ARC_FIRST_AUX_REGNUM; i <= ARC_LAST_AUX_REGNUM; i++)\n+  const arc_register_feature *arc_core_reg_feature\n+    = determine_core_reg_feature_set (info.bfd_arch_info->mach);\n+  const arc_register_feature *arc_aux_reg_feature\n+    = determine_aux_reg_feature_set ();\n+\n+  struct tdesc_arch_data *tdesc_data_loc = tdesc_data_alloc ();\n+\n+  arc_update_acc_reg_names (info.byte_order);\n+\n+  bool valid_p = arc_check_tdesc_feature (tdesc_data_loc,\n+\t\t\t\t\t  feature_core,\n+\t\t\t\t\t  arc_core_reg_feature);\n+\n+  valid_p &= arc_check_tdesc_feature (tdesc_data_loc,\n+\t\t\t\t      feature_aux,\n+\t\t\t\t      arc_aux_reg_feature);\n+\n+  if (!valid_p)\n     {\n-      const char *name = aux_minimal_register_names[i - ARC_FIRST_AUX_REGNUM];\n-      valid_p = tdesc_numbered_register (feature, tdesc_data_loc, i, name);\n-      if (!valid_p)\n-\t{\n-\t  arc_print (_(\"Error: Cannot find required register `%s' \"\n-\t\t       \"in feature `%s'.\\n\"),\n-\t\t     name, tdesc_feature_name (feature));\n-\t  tdesc_data_cleanup (tdesc_data_loc);\n-\t  return false;\n-\t}\n+      if (arc_debug)\n+        debug_printf (\"arc: Target description is not valid\\n\");\n+      tdesc_data_cleanup (tdesc_data_loc);\n+      return false;\n     }\n \n   *tdesc = tdesc_loc;\n@@ -2131,38 +2343,6 @@ dump_arc_instruction_command (const char *args, int from_tty)\n   arc_insn_dump (insn);\n }\n \n-/* See arc-tdep.h.  */\n-\n-const target_desc *\n-arc_read_description (arc_sys_type sys_type)\n-{\n-  if (arc_debug)\n-    debug_printf (\"arc: Reading target description for \\\"%s\\\".\\n\",\n-\t\t  arc_sys_type_to_str (sys_type));\n-\n-  gdb_assert ((sys_type >= 0) && (sys_type < ARC_SYS_TYPE_NUM));\n-  struct target_desc *tdesc = tdesc_arc_list[sys_type];\n-\n-  if (tdesc == nullptr)\n-    {\n-      tdesc = arc_create_target_description (sys_type);\n-      tdesc_arc_list[sys_type] = tdesc;\n-\n-      if (arc_debug)\n-\t{\n-\t  const char *arch = tdesc_architecture_name (tdesc);\n-\t  const char *abi = tdesc_osabi_name (tdesc);\n-\t  arch = arch != NULL ? arch : \"\";\n-\t  abi = abi != NULL ? abi : \"\";\n-\t  debug_printf (\"arc: Created target description for \"\n-\t\t\t\"\\\"%s\\\": arch=\\\"%s\\\", ABI=\\\"%s\\\"\\n\",\n-\t\t\tarc_sys_type_to_str (sys_type), arch, abi);\n-\t}\n-    }\n-\n-  return tdesc;\n-}\n-\n void _initialize_arc_tdep ();\n void\n _initialize_arc_tdep ()"
    },
    {
      "sha": "6ca759a661d4bbd1a59dbde88820646f99c90e8d",
      "filename": "gdb/arc-tdep.h",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/arc-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/arc-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arc-tdep.h?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -35,7 +35,6 @@ enum arc_regnum\n   {\n     /* Core registers.  */\n     ARC_R0_REGNUM = 0,\n-    ARC_FIRST_CORE_REGNUM = ARC_R0_REGNUM,\n     ARC_R1_REGNUM = 1,\n     ARC_R4_REGNUM = 4,\n     ARC_R7_REGNUM = 7,\n@@ -54,6 +53,9 @@ enum arc_regnum\n     ARC_R30_REGNUM,\n     /* Return address from function.  */\n     ARC_BLINK_REGNUM,\n+    /* Accumulator registers.  */\n+    ARC_R58_REGNUM = 58,\n+    ARC_R59_REGNUM,\n     /* Zero-delay loop counter.  */\n     ARC_LP_COUNT_REGNUM = 60,\n     /* Reserved register number.  There should never be a register with such\n@@ -69,14 +71,21 @@ enum arc_regnum\n     /* Program counter, aligned to 4-bytes, read-only.  */\n     ARC_PCL_REGNUM,\n     ARC_LAST_CORE_REGNUM = ARC_PCL_REGNUM,\n+\n     /* AUX registers.  */\n     /* Actual program counter.  */\n     ARC_PC_REGNUM,\n     ARC_FIRST_AUX_REGNUM = ARC_PC_REGNUM,\n     /* Status register.  */\n     ARC_STATUS32_REGNUM,\n-    ARC_LAST_REGNUM = ARC_STATUS32_REGNUM,\n-    ARC_LAST_AUX_REGNUM = ARC_STATUS32_REGNUM,\n+    /* Zero-delay loop start instruction.  */\n+    ARC_LP_START_REGNUM,\n+    /* Zero-delay loop next-after-last instruction.  */\n+    ARC_LP_END_REGNUM,\n+    /* Branch target address.  */\n+    ARC_BTA_REGNUM,\n+    ARC_LAST_AUX_REGNUM = ARC_BTA_REGNUM,\n+    ARC_LAST_REGNUM = ARC_LAST_AUX_REGNUM,\n \n     /* Additional ABI constants.  */\n     ARC_FIRST_ARG_REGNUM = ARC_R0_REGNUM,\n@@ -164,7 +173,4 @@ CORE_ADDR arc_insn_get_branch_target (const struct arc_instruction &insn);\n \n CORE_ADDR arc_insn_get_linear_next_pc (const struct arc_instruction &insn);\n \n-/* Get the correct ARC target description for the given system type.  */\n-const target_desc *arc_read_description (arc_sys_type sys_type);\n-\n #endif /* ARC_TDEP_H */"
    },
    {
      "sha": "8e126ca5a828a2963f6cf92c579054287ded5e59",
      "filename": "gdb/arch/arc.c",
      "status": "modified",
      "additions": 86,
      "deletions": 22,
      "changes": 108,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/arch/arc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/arch/arc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/arc.c?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -17,42 +17,106 @@\n \n \n #include \"gdbsupport/common-defs.h\"\n-#include <stdlib.h>\n-\n #include \"arc.h\"\n+#include <stdlib.h>\n+#include <unordered_map>\n+#include <string>\n \n /* Target description features.  */\n-#include \"features/arc/core-v2.c\"\n-#include \"features/arc/aux-v2.c\"\n-#include \"features/arc/core-arcompact.c\"\n-#include \"features/arc/aux-arcompact.c\"\n+#include \"features/arc/v1-core.c\"\n+#include \"features/arc/v1-aux.c\"\n+#include \"features/arc/v2-core.c\"\n+#include \"features/arc/v2-aux.c\"\n \n-/* See arc.h.  */\n+#ifndef GDBSERVER\n+#define STATIC_IN_GDB static\n+#else\n+#define STATIC_IN_GDB\n+#endif\n \n-target_desc *\n-arc_create_target_description (arc_sys_type sys_type)\n+STATIC_IN_GDB target_desc *\n+arc_create_target_description (const struct arc_gdbarch_features &features)\n {\n+  /* Create a new target description.  */\n   target_desc *tdesc = allocate_target_description ();\n \n-  long regnum = 0;\n-\n #ifndef IN_PROCESS_AGENT\n-  if (sys_type == ARC_SYS_TYPE_ARCV2)\n-    set_tdesc_architecture (tdesc, \"arc:ARCv2\");\n-  else\n-    set_tdesc_architecture (tdesc, \"arc:ARC700\");\n-#endif\n+  std::string arch_name;\n \n-  if (sys_type == ARC_SYS_TYPE_ARCV2)\n+  /* Architecture names here must match the ones in\n+     ARCH_INFO_STRUCT in bfd/cpu-arc.c.  */\n+  if (features.isa == ARC_ISA_ARCV1 && features.reg_size == 4)\n+      arch_name = \"arc:ARC700\";\n+  else if (features.isa == ARC_ISA_ARCV2 && features.reg_size == 4)\n+      arch_name = \"arc:ARCv2\";\n+  else\n     {\n-      regnum = create_feature_arc_core_v2 (tdesc, regnum);\n-      regnum = create_feature_arc_aux_v2 (tdesc, regnum);\n+      std::string msg = string_printf\n+\t(\"Cannot determine architecture: ISA=%d; bitness=%d\",\n+\t features.isa, 8 * features.reg_size);\n+      gdb_assert_not_reached (msg.c_str ());\n     }\n-  else\n+\n+  set_tdesc_architecture (tdesc, arch_name.c_str ());\n+#endif\n+\n+  long regnum = 0;\n+\n+  switch (features.isa)\n     {\n-      regnum = create_feature_arc_core_arcompact (tdesc, regnum);\n-      regnum = create_feature_arc_aux_arcompact (tdesc, regnum);\n+    case ARC_ISA_ARCV1:\n+      regnum = create_feature_arc_v1_core (tdesc, regnum);\n+      regnum = create_feature_arc_v1_aux (tdesc, regnum);\n+      break;\n+    case ARC_ISA_ARCV2:\n+      regnum = create_feature_arc_v2_core (tdesc, regnum);\n+      regnum = create_feature_arc_v2_aux (tdesc, regnum);\n+      break;\n+    default:\n+      std::string msg = string_printf\n+\t(\"Cannot choose target description XML: %d\", features.isa);\n+      gdb_assert_not_reached (msg.c_str ());\n     }\n \n   return tdesc;\n }\n+\n+#ifndef GDBSERVER\n+\n+/* Wrapper used by std::unordered_map to generate hash for features set.  */\n+struct arc_gdbarch_features_hasher\n+{\n+  std::size_t\n+  operator() (const arc_gdbarch_features &features) const noexcept\n+  {\n+    return features.hash ();\n+  }\n+};\n+\n+/* Cache of previously created target descriptions, indexed by the hash\n+   of the features set used to create them.  */\n+static std::unordered_map<arc_gdbarch_features,\n+\t\t\t  const target_desc_up,\n+\t\t\t  arc_gdbarch_features_hasher> arc_tdesc_cache;\n+\n+/* See arch/arc.h.  */\n+\n+const target_desc *\n+arc_lookup_target_description (const struct arc_gdbarch_features &features)\n+{\n+  /* Lookup in the cache first.  If found, return the pointer from the\n+     \"target_desc_up\" type which is a \"unique_ptr\".  This should be fine\n+     as the \"arc_tdesc_cache\" will persist until GDB terminates.  */\n+  const auto it = arc_tdesc_cache.find (features);\n+  if (it != arc_tdesc_cache.end ())\n+    return it->second.get ();\n+\n+  target_desc *tdesc = arc_create_target_description (features);\n+\n+  /* Add the newly created target description to the repertoire.  */\n+  arc_tdesc_cache.emplace (features, tdesc);\n+\n+  return tdesc;\n+}\n+\n+#endif /* !GDBSERVER */"
    },
    {
      "sha": "a5313b1fee6554bd372f04f11de94c5399de30ab",
      "filename": "gdb/arch/arc.h",
      "status": "modified",
      "additions": 59,
      "deletions": 20,
      "changes": 79,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/arch/arc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/arch/arc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/arc.h?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -20,29 +20,68 @@\n \n #include \"gdbsupport/tdesc.h\"\n \n-/* Supported ARC system hardware types.  */\n-enum arc_sys_type\n+/* Supported ARC ISAs.  */\n+enum arc_isa\n {\n-  ARC_SYS_TYPE_ARCOMPACT = 0,\t  /* ARC600 or ARC700 */\n-  ARC_SYS_TYPE_ARCV2,\t\t  /* ARC EM or ARC HS */\n-  ARC_SYS_TYPE_NUM\n+  ARC_ISA_ARCV1 = 1,  /* a.k.a. ARCompact (ARC600, ARC700)  */\n+  ARC_ISA_ARCV2\t      /* such as ARC EM and ARC HS  */\n };\n \n-static inline const char *\n-arc_sys_type_to_str (const arc_sys_type type)\n+struct arc_gdbarch_features\n {\n-  switch (type)\n-    {\n-    case ARC_SYS_TYPE_ARCOMPACT:\n-      return \"ARC_SYS_TYPE_ARCOMPACT\";\n-    case ARC_SYS_TYPE_ARCV2:\n-      return \"ARC_SYS_TYPE_ARCV2\";\n-    default:\n-      return \"Invalid\";\n-    }\n-}\n-\n-/* Create target description for the specified system type.  */\n-target_desc *arc_create_target_description (arc_sys_type sys_type);\n+  arc_gdbarch_features (int reg_size, arc_isa isa)\n+    : reg_size (reg_size), isa (isa)\n+  {}\n+\n+  /* Register size in bytes.  Possible values are 4, and 8.  A 0 indicates\n+     an uninitialised value.  */\n+  const int reg_size;\n+\n+  /* See ARC_ISA enum.  */\n+  const arc_isa isa;\n+\n+  /* Equality operator.  */\n+  bool operator== (const struct arc_gdbarch_features &rhs) const\n+  {\n+    return (reg_size == rhs.reg_size && isa == rhs.isa);\n+  }\n+\n+  /* Inequality operator.  */\n+  bool operator!= (const struct arc_gdbarch_features &rhs) const\n+  {\n+    return !(*this == rhs);\n+  }\n+\n+  /* Used by std::unordered_map to hash the feature sets.  The hash is\n+     calculated in the manner below:\n+     REG_SIZE |  ISA\n+      5-bits  | 4-bits  */\n+\n+  std::size_t hash () const noexcept\n+  {\n+    std::size_t val = ((reg_size & 0x1f) << 8 | (isa & 0xf) << 0);\n+    return val;\n+  }\n+};\n+\n+#ifdef GDBSERVER\n+\n+/* Create and return a target description that is compatible with FEATURES.\n+   The only external client of this must be the gdbserver which manipulates\n+   the returned data.  */\n+\n+target_desc *arc_create_target_description\n+\t(const struct arc_gdbarch_features &features);\n+\n+#else\n+\n+/* Lookup the cache for a target description matching the FEATURES.\n+   If nothing is found, then create one and return it.  */\n+\n+const target_desc *arc_lookup_target_description\n+\t(const struct arc_gdbarch_features &features);\n+\n+#endif /* GDBSERVER */\n+\n \n #endif /* ARCH_ARC_H */"
    },
    {
      "sha": "6a81351282f17024b9b6613ee36d7499d49e7d9c",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -1,3 +1,8 @@\n+2020-08-25  Shahab Vahedi  <shahab@synopsys.com>\n+\n+\t* gdb.texinfo (Synopsys ARC): Update the documentation for ARC\n+\tFeatures.\n+\n 2020-08-07  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.texinfo (Ravenscar Profile): Add examples."
    },
    {
      "sha": "a4f5b7875033556955b01620da4c1d299ba0ea9c",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 35,
      "deletions": 34,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -45265,40 +45265,41 @@ it should contain registers @samp{pauth_dmask} and @samp{pauth_cmask}.\n @subsection ARC Features\n @cindex target descriptions, ARC Features\n \n-ARC processors are highly configurable, so even core registers and their number\n-are not completely predetermined.  In addition flags and PC registers which are\n-important to @value{GDBN} are not ``core'' registers in ARC.  It is required\n-that one of the core registers features is present.\n-@samp{org.gnu.gdb.arc.aux-minimal} feature is mandatory.\n-\n-The @samp{org.gnu.gdb.arc.core.v2} feature is required for ARC EM and ARC HS\n-targets with a normal register file.  It should contain registers @samp{r0}\n-through @samp{r25}, @samp{gp}, @samp{fp}, @samp{sp}, @samp{r30}, @samp{blink},\n-@samp{lp_count} and @samp{pcl}.  This feature may contain register @samp{ilink}\n-and any of extension core registers @samp{r32} through @samp{r59/acch}.\n-@samp{ilink} and extension core registers are not available to read/write, when\n-debugging GNU/Linux applications, thus @samp{ilink} is made optional.\n-\n-The @samp{org.gnu.gdb.arc.core-reduced.v2} feature is required for ARC EM and\n-ARC HS targets with a reduced register file.  It should contain registers\n-@samp{r0} through @samp{r3}, @samp{r10} through @samp{r15}, @samp{gp},\n-@samp{fp}, @samp{sp}, @samp{r30}, @samp{blink}, @samp{lp_count} and @samp{pcl}.\n-This feature may contain register @samp{ilink} and any of extension core\n-registers @samp{r32} through @samp{r59/acch}.\n-\n-The @samp{org.gnu.gdb.arc.core.arcompact} feature is required for ARCompact\n-targets with a normal register file.  It should contain registers @samp{r0}\n-through @samp{r25}, @samp{gp}, @samp{fp}, @samp{sp}, @samp{r30}, @samp{blink},\n-@samp{lp_count} and @samp{pcl}.  This feature may contain registers\n-@samp{ilink1}, @samp{ilink2} and any of extension core registers @samp{r32}\n-through @samp{r59/acch}.  @samp{ilink1} and @samp{ilink2} and extension core\n-registers are not available when debugging GNU/Linux applications.  The only\n-difference with @samp{org.gnu.gdb.arc.core.v2} feature is in the names of\n-@samp{ilink1} and @samp{ilink2} registers and that @samp{r30} is mandatory in\n-ARC v2, but @samp{ilink2} is optional on ARCompact.\n-\n-The @samp{org.gnu.gdb.arc.aux-minimal} feature is required for all ARC\n-targets.  It should contain registers @samp{pc} and @samp{status32}.\n+ARC processors are so configurable that even core registers and their numbers\n+are not predetermined completely.  Moreover, @emph{flags} and @emph{PC}\n+registers, which are important to @value{GDBN}, are not ``core'' registers in\n+ARC.  Therefore, there are two features that their presence is mandatory:\n+@samp{org.gnu.gdb.arc.core} and @samp{org.gnu.gdb.arc.aux}.\n+\n+The @samp{org.gnu.gdb.arc.core} feature is required for all targets.  It must\n+contain registers:\n+\n+@itemize @minus\n+@item\n+@samp{r0} through @samp{r25} for normal register file targets.\n+@item\n+@samp{r0} through @samp{r3}, and @samp{r10} through @samp{r15} for reduced\n+register file targets.\n+@item\n+@samp{gp}, @samp{fp}, @samp{sp}, @samp{r30}@footnote{Not necessary for ARCv1.},\n+@samp{blink}, @samp{lp_count}, @samp{pcl}.\n+@end itemize\n+\n+In case of an ARCompact target (ARCv1 ISA), the @samp{org.gnu.gdb.arc.core}\n+feature may contain registers @samp{ilink1} and @samp{ilink2}.  While in case\n+of ARC EM and ARC HS targets (ARCv2 ISA), register @samp{ilink} may be present.\n+The difference between ARCv1 and ARCv2 is the naming of registers @emph{29th}\n+and @emph{30th}.  They are called @samp{ilink1} and @samp{ilink2} for ARCv1 and\n+are optional.  For ARCv2, they are called @samp{ilink} and @samp{r30} and only\n+@samp{ilink} is optional.  The optionality of @samp{ilink*} registers is\n+because of their inaccessibility during user space debugging sessions.\n+\n+Extension core registers @samp{r32} through @samp{r59} are optional and their\n+existence depends on the configuration.  When debugging GNU/Linux applications,\n+i.e.@: user space debugging, these core registers are not available.\n+\n+The @samp{org.gnu.gdb.arc.aux} feature is required for all ARC targets.  It\n+should at least contain @samp{pc} and @samp{status32} registers.\n \n @node ARM Features\n @subsection ARM Features"
    },
    {
      "sha": "689603847a001ae0297558cd1fde1242b1c9800c",
      "filename": "gdb/features/Makefile",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/features/Makefile",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/features/Makefile",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/Makefile?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -201,10 +201,10 @@ $(outdir)/%.dat: %.xml number-regs.xsl sort-regs.xsl gdbserver-regs.xsl\n FEATURE_XMLFILES = aarch64-core.xml \\\n \taarch64-fpu.xml \\\n \taarch64-pauth.xml \\\n-\tarc/core-v2.xml \\\n-\tarc/aux-v2.xml \\\n-\tarc/core-arcompact.xml \\\n-\tarc/aux-arcompact.xml \\\n+\tarc/v1-core.xml \\\n+\tarc/v1-aux.xml \\\n+\tarc/v2-core.xml \\\n+\tarc/v2-aux.xml \\\n \tarm/arm-core.xml \\\n \tarm/arm-fpa.xml \\\n \tarm/arm-m-profile.xml \\"
    },
    {
      "sha": "d1540763433e074f983c6e8e16bfe8d02b849d47",
      "filename": "gdb/features/arc/v1-aux.c",
      "status": "renamed",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/features/arc/v1-aux.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/features/arc/v1-aux.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/arc/v1-aux.c?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -1,14 +1,14 @@\n /* THIS FILE IS GENERATED.  -*- buffer-read-only: t -*- vi:set ro:\n-  Original: aux-arcompact.xml */\n+  Original: v1-aux.xml */\n \n #include \"gdbsupport/tdesc.h\"\n \n static int\n-create_feature_arc_aux_arcompact (struct target_desc *result, long regnum)\n+create_feature_arc_v1_aux (struct target_desc *result, long regnum)\n {\n   struct tdesc_feature *feature;\n \n-  feature = tdesc_create_feature (result, \"org.gnu.gdb.arc.aux-minimal\");\n+  feature = tdesc_create_feature (result, \"org.gnu.gdb.arc.aux\");\n   tdesc_type_with_fields *type_with_fields;\n   type_with_fields = tdesc_create_flags (feature, \"status32_type\", 4);\n   tdesc_add_flag (type_with_fields, 0, \"H\");\n@@ -27,5 +27,8 @@ create_feature_arc_aux_arcompact (struct target_desc *result, long regnum)\n \n   tdesc_create_reg (feature, \"pc\", regnum++, 1, NULL, 32, \"code_ptr\");\n   tdesc_create_reg (feature, \"status32\", regnum++, 1, NULL, 32, \"status32_type\");\n+  tdesc_create_reg (feature, \"lp_start\", regnum++, 1, NULL, 32, \"code_ptr\");\n+  tdesc_create_reg (feature, \"lp_end\", regnum++, 1, NULL, 32, \"code_ptr\");\n+  tdesc_create_reg (feature, \"bta\", regnum++, 1, NULL, 32, \"code_ptr\");\n   return regnum;\n }",
      "previous_filename": "gdb/features/arc/aux-arcompact.c"
    },
    {
      "sha": "091808b1e29c04e1498ff10ff97b1e0058066799",
      "filename": "gdb/features/arc/v1-aux.xml",
      "status": "renamed",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/features/arc/v1-aux.xml",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/features/arc/v1-aux.xml",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/arc/v1-aux.xml?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -6,7 +6,7 @@\n      notice and this notice are preserved.  -->\n \n <!DOCTYPE target SYSTEM \"gdb-target.dtd\">\n-<feature name=\"org.gnu.gdb.arc.aux-minimal\">\n+<feature name=\"org.gnu.gdb.arc.aux\">\n   <flags id=\"status32_type\" size=\"4\">\n       <field name=\"H\"   start=\"0\" end=\"0\"/>\n       <field name=\"E\"   start=\"1\" end=\"2\"/>\n@@ -19,10 +19,13 @@\n       <field name=\"N\"   start=\"10\" end=\"10\"/>\n       <field name=\"Z\"   start=\"11\" end=\"11\"/>\n       <field name=\"L\"   start=\"12\" end=\"12\"/>\n-      <field name=\"R\"  start=\"13\" end=\"13\"/>\n+      <field name=\"R\"   start=\"13\" end=\"13\"/>\n       <field name=\"SE\"  start=\"14\" end=\"14\"/>\n   </flags>\n \n   <reg name=\"pc\"       bitsize=\"32\" type=\"code_ptr\"/>\n   <reg name=\"status32\" bitsize=\"32\" type=\"status32_type\"/>\n+  <reg name=\"lp_start\" bitsize=\"32\" type=\"code_ptr\"/>\n+  <reg name=\"lp_end\"   bitsize=\"32\" type=\"code_ptr\"/>\n+  <reg name=\"bta\"      bitsize=\"32\" type=\"code_ptr\"/>\n </feature>",
      "previous_filename": "gdb/features/arc/aux-arcompact.xml"
    },
    {
      "sha": "df51d4788dfc3db41127553cbc76211a70c4e671",
      "filename": "gdb/features/arc/v1-core.c",
      "status": "renamed",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/features/arc/v1-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/features/arc/v1-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/arc/v1-core.c?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -1,14 +1,14 @@\n /* THIS FILE IS GENERATED.  -*- buffer-read-only: t -*- vi:set ro:\n-  Original: core-arcompact.xml */\n+  Original: v1-core.xml */\n \n #include \"gdbsupport/tdesc.h\"\n \n static int\n-create_feature_arc_core_arcompact (struct target_desc *result, long regnum)\n+create_feature_arc_v1_core (struct target_desc *result, long regnum)\n {\n   struct tdesc_feature *feature;\n \n-  feature = tdesc_create_feature (result, \"org.gnu.gdb.arc.core.arcompact\");\n+  feature = tdesc_create_feature (result, \"org.gnu.gdb.arc.core\");\n   tdesc_create_reg (feature, \"r0\", regnum++, 1, NULL, 32, \"int\");\n   tdesc_create_reg (feature, \"r1\", regnum++, 1, NULL, 32, \"int\");\n   tdesc_create_reg (feature, \"r2\", regnum++, 1, NULL, 32, \"int\");\n@@ -38,8 +38,6 @@ create_feature_arc_core_arcompact (struct target_desc *result, long regnum)\n   tdesc_create_reg (feature, \"gp\", regnum++, 1, NULL, 32, \"data_ptr\");\n   tdesc_create_reg (feature, \"fp\", regnum++, 1, NULL, 32, \"data_ptr\");\n   tdesc_create_reg (feature, \"sp\", regnum++, 1, NULL, 32, \"data_ptr\");\n-  tdesc_create_reg (feature, \"ilink1\", regnum++, 1, NULL, 32, \"code_ptr\");\n-  tdesc_create_reg (feature, \"ilink2\", regnum++, 1, NULL, 32, \"code_ptr\");\n   tdesc_create_reg (feature, \"blink\", regnum++, 1, NULL, 32, \"code_ptr\");\n   tdesc_create_reg (feature, \"lp_count\", regnum++, 1, NULL, 32, \"uint32\");\n   tdesc_create_reg (feature, \"pcl\", regnum++, 1, NULL, 32, \"code_ptr\");",
      "previous_filename": "gdb/features/arc/core-arcompact.c"
    },
    {
      "sha": "68d04bdf9d01aa9b73059c74fa79b053084c4ae8",
      "filename": "gdb/features/arc/v1-core.xml",
      "status": "renamed",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/features/arc/v1-core.xml",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/features/arc/v1-core.xml",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/arc/v1-core.xml?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -6,7 +6,7 @@\n      notice and this notice are preserved.  -->\n \n <!DOCTYPE target SYSTEM \"gdb-target.dtd\">\n-<feature name=\"org.gnu.gdb.arc.core.arcompact\">\n+<feature name=\"org.gnu.gdb.arc.core\">\n   <reg name=\"r0\"  bitsize=\"32\"/>\n   <reg name=\"r1\"  bitsize=\"32\"/>\n   <reg name=\"r2\"  bitsize=\"32\"/>\n@@ -40,8 +40,6 @@\n   <reg name=\"sp\"  bitsize=\"32\" type=\"data_ptr\"/>\n \n   <!-- Code pointers.  -->\n-  <reg name=\"ilink1\" bitsize=\"32\" type=\"code_ptr\"/>\n-  <reg name=\"ilink2\" bitsize=\"32\" type=\"code_ptr\"/>\n   <reg name=\"blink\"  bitsize=\"32\" type=\"code_ptr\"/>\n \n   <!-- Here goes extension core registers: r32 - r59 -->",
      "previous_filename": "gdb/features/arc/core-arcompact.xml"
    },
    {
      "sha": "7b38e377fe14967bff586c6d0667d32cbe34fca6",
      "filename": "gdb/features/arc/v2-aux.c",
      "status": "renamed",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/features/arc/v2-aux.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/features/arc/v2-aux.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/arc/v2-aux.c?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -1,14 +1,14 @@\n /* THIS FILE IS GENERATED.  -*- buffer-read-only: t -*- vi:set ro:\n-  Original: aux-v2.xml */\n+  Original: v2-aux.xml */\n \n #include \"gdbsupport/tdesc.h\"\n \n static int\n-create_feature_arc_aux_v2 (struct target_desc *result, long regnum)\n+create_feature_arc_v2_aux (struct target_desc *result, long regnum)\n {\n   struct tdesc_feature *feature;\n \n-  feature = tdesc_create_feature (result, \"org.gnu.gdb.arc.aux-minimal\");\n+  feature = tdesc_create_feature (result, \"org.gnu.gdb.arc.aux\");\n   tdesc_type_with_fields *type_with_fields;\n   type_with_fields = tdesc_create_flags (feature, \"status32_type\", 4);\n   tdesc_add_flag (type_with_fields, 0, \"H\");\n@@ -31,5 +31,8 @@ create_feature_arc_aux_v2 (struct target_desc *result, long regnum)\n \n   tdesc_create_reg (feature, \"pc\", regnum++, 1, NULL, 32, \"code_ptr\");\n   tdesc_create_reg (feature, \"status32\", regnum++, 1, NULL, 32, \"status32_type\");\n+  tdesc_create_reg (feature, \"lp_start\", regnum++, 1, NULL, 32, \"code_ptr\");\n+  tdesc_create_reg (feature, \"lp_end\", regnum++, 1, NULL, 32, \"code_ptr\");\n+  tdesc_create_reg (feature, \"bta\", regnum++, 1, NULL, 32, \"code_ptr\");\n   return regnum;\n }",
      "previous_filename": "gdb/features/arc/aux-v2.c"
    },
    {
      "sha": "5d81e248088cfee3558c48aedcceff1c15411c6d",
      "filename": "gdb/features/arc/v2-aux.xml",
      "status": "renamed",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/features/arc/v2-aux.xml",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/features/arc/v2-aux.xml",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/arc/v2-aux.xml?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -6,7 +6,7 @@\n      notice and this notice are preserved.  -->\n \n <!DOCTYPE target SYSTEM \"gdb-target.dtd\">\n-<feature name=\"org.gnu.gdb.arc.aux-minimal\">\n+<feature name=\"org.gnu.gdb.arc.aux\">\n   <flags id=\"status32_type\" size=\"4\">\n       <field name=\"H\"   start=\"0\" end=\"0\"/>\n       <field name=\"E\"   start=\"1\" end=\"4\"/>\n@@ -29,4 +29,7 @@\n \n   <reg name=\"pc\"       bitsize=\"32\" type=\"code_ptr\"/>\n   <reg name=\"status32\" bitsize=\"32\" type=\"status32_type\"/>\n+  <reg name=\"lp_start\" bitsize=\"32\" type=\"code_ptr\"/>\n+  <reg name=\"lp_end\"   bitsize=\"32\" type=\"code_ptr\"/>\n+  <reg name=\"bta\"      bitsize=\"32\" type=\"code_ptr\"/>\n </feature>",
      "previous_filename": "gdb/features/arc/aux-v2.xml"
    },
    {
      "sha": "1c3ef1a91df89c9a2a25367cb71f6edf092655b7",
      "filename": "gdb/features/arc/v2-core.c",
      "status": "renamed",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/features/arc/v2-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/features/arc/v2-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/arc/v2-core.c?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -1,14 +1,14 @@\n /* THIS FILE IS GENERATED.  -*- buffer-read-only: t -*- vi:set ro:\n-  Original: core-v2.xml */\n+  Original: v2-core.xml */\n \n #include \"gdbsupport/tdesc.h\"\n \n static int\n-create_feature_arc_core_v2 (struct target_desc *result, long regnum)\n+create_feature_arc_v2_core (struct target_desc *result, long regnum)\n {\n   struct tdesc_feature *feature;\n \n-  feature = tdesc_create_feature (result, \"org.gnu.gdb.arc.core.v2\");\n+  feature = tdesc_create_feature (result, \"org.gnu.gdb.arc.core\");\n   tdesc_create_reg (feature, \"r0\", regnum++, 1, NULL, 32, \"int\");\n   tdesc_create_reg (feature, \"r1\", regnum++, 1, NULL, 32, \"int\");\n   tdesc_create_reg (feature, \"r2\", regnum++, 1, NULL, 32, \"int\");\n@@ -38,7 +38,6 @@ create_feature_arc_core_v2 (struct target_desc *result, long regnum)\n   tdesc_create_reg (feature, \"gp\", regnum++, 1, NULL, 32, \"data_ptr\");\n   tdesc_create_reg (feature, \"fp\", regnum++, 1, NULL, 32, \"data_ptr\");\n   tdesc_create_reg (feature, \"sp\", regnum++, 1, NULL, 32, \"data_ptr\");\n-  tdesc_create_reg (feature, \"ilink\", regnum++, 1, NULL, 32, \"code_ptr\");\n   tdesc_create_reg (feature, \"r30\", regnum++, 1, NULL, 32, \"int\");\n   tdesc_create_reg (feature, \"blink\", regnum++, 1, NULL, 32, \"code_ptr\");\n   tdesc_create_reg (feature, \"lp_count\", regnum++, 1, NULL, 32, \"uint32\");",
      "previous_filename": "gdb/features/arc/core-v2.c"
    },
    {
      "sha": "2a2561eab16c94e8317085d3a2709d08cc1a6867",
      "filename": "gdb/features/arc/v2-core.xml",
      "status": "renamed",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/features/arc/v2-core.xml",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/features/arc/v2-core.xml",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/features/arc/v2-core.xml?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -6,7 +6,7 @@\n      notice and this notice are preserved.  -->\n \n <!DOCTYPE target SYSTEM \"gdb-target.dtd\">\n-<feature name=\"org.gnu.gdb.arc.core.v2\">\n+<feature name=\"org.gnu.gdb.arc.core\">\n   <reg name=\"r0\"  bitsize=\"32\"/>\n   <reg name=\"r1\"  bitsize=\"32\"/>\n   <reg name=\"r2\"  bitsize=\"32\"/>\n@@ -42,12 +42,11 @@\n   <!-- Code pointers.  R30 is general purpose, but it used to be ILINK2 in\n   ARCompact, thus its odd position in between of special purpose registers.\n   GCC does't use this register, so it isn't a member of a general group. -->\n-  <reg name=\"ilink\" bitsize=\"32\" type=\"code_ptr\"/>\n   <reg name=\"r30\"   bitsize=\"32\" group=\"\"/>\n   <reg name=\"blink\" bitsize=\"32\" type=\"code_ptr\"/>\n \n-  <!-- Here goes extension core registers: r32 - r57.  -->\n-  <!-- Here goes ACCL/ACCH registers, r58, r59.  -->\n+  <!-- Extension core registers: r32 - r57.  -->\n+  <!-- ACCL/ACCH registers: r58, r59.  -->\n \n   <!-- Loop counter.  -->\n   <reg name=\"lp_count\" bitsize=\"32\" type=\"uint32\"/>",
      "previous_filename": "gdb/features/arc/core-v2.xml"
    },
    {
      "sha": "cb2945697ad58cd64f72a713b694511ef705ee0f",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -1,3 +1,7 @@\n+2020-08-25  Shahab Vahedi  <shahab@synopsys.com>\n+\n+\t* gdb.arch/arc-tdesc-cpu.xml: Use new feature names.\n+\n 2020-08-25  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \tPR gdb/26532"
    },
    {
      "sha": "0ae2190c511af3bdab42df56991fbb2e26f19c43",
      "filename": "gdb/testsuite/gdb.arch/arc-tdesc-cpu.xml",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/testsuite/gdb.arch/arc-tdesc-cpu.xml",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/995d3a197d7a7c0212efb6ee723dc470ab3d3a82/gdb/testsuite/gdb.arch/arc-tdesc-cpu.xml",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/arc-tdesc-cpu.xml?ref=995d3a197d7a7c0212efb6ee723dc470ab3d3a82",
      "patch": "@@ -9,7 +9,7 @@\n <target>\n   <architecture>arc:HS</architecture>\n \n-  <feature name=\"org.gnu.gdb.arc.core.v2\">\n+  <feature name=\"org.gnu.gdb.arc.core\">\n     <reg name=\"r0\"  bitsize=\"32\"/>\n     <reg name=\"r1\"  bitsize=\"32\"/>\n     <reg name=\"r2\"  bitsize=\"32\"/>\n@@ -46,7 +46,7 @@\n     <reg name=\"pcl\" bitsize=\"32\"/>\n   </feature>\n \n-  <feature name=\"org.gnu.gdb.arc.aux-minimal\">\n+  <feature name=\"org.gnu.gdb.arc.aux\">\n     <reg name=\"pc\"       bitsize=\"32\"/>\n     <reg name=\"status32\" bitsize=\"32\"/>\n   </feature>"
    }
  ]
}