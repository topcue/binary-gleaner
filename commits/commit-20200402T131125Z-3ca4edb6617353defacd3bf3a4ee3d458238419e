{
  "sha": "3ca4edb6617353defacd3bf3a4ee3d458238419e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2NhNGVkYjY2MTczNTNkZWZhY2QzYmYzYTRlZTNkNDU4MjM4NDE5ZQ==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:25Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:25Z"
    },
    "message": "gdbserver/linux-low: turn 'sw_breakpoint_from_kind' into a method\n\ngdbserver/ChangeLog:\n2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tRemove the 'sw_breakpoint_from_kind' linux target op, and let\n\tthe concrete linux target define it by overriding the op\n\tin process_stratum_target.\n\n\t* linux-low.cc (linux_process_target::sw_breakpoint_from_kind):\n\tRemove.\n\t* linux-low.h (struct linux_target_ops): Remove the op.\n\t(class linux_process_target) <sw_breakpoint_from_kind>: Remove.\n\t* linux-x86-low.cc (class x86_target) <sw_breakpoint_from_kind>:\n\tDeclare.\n\t(x86_sw_breakpoint_from_kind): Turn into...\n\t(x86_target::sw_breakpoint_from_kind): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-aarch64-low.cc (class aarch64_target)\n\t<sw_breakpoint_from_kind>: Declare.\n\t(aarch64_sw_breakpoint_from_kind): Turn into...\n\t(aarch64_target::sw_breakpoint_from_kind): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-arm-low.cc (class arm_target) <sw_breakpoint_from_kind>:\n\tDeclare.\n\t(arm_target::sw_breakpoint_from_kind): Define.\n\t(the_low_target): Remove the op field.\n\t* linux-bfin-low.cc (class bfin_target) <sw_breakpoint_from_kind>:\n\tDeclare.\n\t(bfin_sw_breakpoint_from_kind): Turn into...\n\t(bfin_target::sw_breakpoint_from_kind): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-cris-low.cc (class cris_target) <sw_breakpoint_from_kind>:\n\tDeclare.\n\t(cris_sw_breakpoint_from_kind): Turn into...\n\t(cris_target::sw_breakpoint_from_kind): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-crisv32-low.cc (class crisv32_target)\n\t<sw_breakpoint_from_kind>: Declare.\n\t(cris_sw_breakpoint_from_kind): Turn into...\n\t(crisv32_target::sw_breakpoint_from_kind): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-ia64-low.cc (class ia64_target) <sw_breakpoint_from_kind>:\n\tDeclare.\n\t(ia64_target::sw_breakpoint_from_kind): Define.\n\t* linux-m32r-low.cc (class m32r_target) <sw_breakpoint_from_kind>:\n\tDeclare.\n\t(m32r_sw_breakpoint_from_kind): Turn into...\n\t(m32r_target::sw_breakpoint_from_kind): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-m68k-low.cc (class m68k_target) <sw_breakpoint_from_kind>:\n\tDeclare.\n\t(m68k_sw_breakpoint_from_kind): Turn into...\n\t(m68k_target::sw_breakpoint_from_kind): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-mips-low.cc (class mips_target) <sw_breakpoint_from_kind>:\n\tDeclare.\n\t(mips_sw_breakpoint_from_kind): Turn into...\n\t(mips_target::sw_breakpoint_from_kind): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-nios2-low.cc (class nios2_target) <sw_breakpoint_from_kind>:\n\tDeclare.\n\t(nios2_sw_breakpoint_from_kind): Turn into...\n\t(nios2_target::sw_breakpoint_from_kind): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-ppc-low.cc (class ppc_target) <sw_breakpoint_from_kind>:\n\tDeclare.\n\t(ppc_sw_breakpoint_from_kind): Turn into...\n\t(ppc_target::sw_breakpoint_from_kind): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-riscv-low.cc (class riscv_target) <sw_breakpoint_from_kind>:\n\tDeclare.\n\t(riscv_sw_breakpoint_from_kind): Turn into...\n\t(riscv_target::sw_breakpoint_from_kind): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-s390-low.cc (class s390_target) <sw_breakpoint_from_kind>:\n\tDeclare.\n\t(s390_sw_breakpoint_from_kind): Turn into...\n\t(s390_target::sw_breakpoint_from_kind): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-sh-low.cc (class sh_target) <sw_breakpoint_from_kind>:\n\tDeclare.\n\t(sh_sw_breakpoint_from_kind): Turn into...\n\t(sh_target::sw_breakpoint_from_kind): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-sparc-low.cc (class sparc_target) <sw_breakpoint_from_kind>:\n\tDeclare.\n\t(sparc_sw_breakpoint_from_kind): Turn into...\n\t(sparc_target::sw_breakpoint_from_kind): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-tic6x-low.cc (class tic6x_target) <sw_breakpoint_from_kind>:\n\tDeclare.\n\t(tic6x_sw_breakpoint_from_kind): Turn into...\n\t(tic6x_target::sw_breakpoint_from_kind): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-tile-low.cc (class tile_target) <sw_breakpoint_from_kind>:\n\tDeclare.\n\t(tile_sw_breakpoint_from_kind): Turn into...\n\t(tile_target::sw_breakpoint_from_kind): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-xtensa-low.cc (class xtensa_target)\n\t<sw_breakpoint_from_kind>: Declare.\n\t(xtensa_sw_breakpoint_from_kind): Turn into...\n\t(xtensa_target::sw_breakpoint_from_kind): ...this.\n\t(the_low_target): Remove the op field.",
    "tree": {
      "sha": "73c0da776f0ad92042b886a1d0169f70105aa47c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/73c0da776f0ad92042b886a1d0169f70105aa47c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3ca4edb6617353defacd3bf3a4ee3d458238419e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3ca4edb6617353defacd3bf3a4ee3d458238419e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3ca4edb6617353defacd3bf3a4ee3d458238419e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3ca4edb6617353defacd3bf3a4ee3d458238419e/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "06250e4e67c0f40a00526afac642b4c345b56750",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/06250e4e67c0f40a00526afac642b4c345b56750",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/06250e4e67c0f40a00526afac642b4c345b56750"
    }
  ],
  "stats": {
    "total": 289,
    "additions": 205,
    "deletions": 84
  },
  "files": [
    {
      "sha": "77c766d8052a2d5034deb442ba5b1374447af659",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 103,
      "deletions": 0,
      "changes": 103,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -1,3 +1,106 @@\n+2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tRemove the 'sw_breakpoint_from_kind' linux target op, and let\n+\tthe concrete linux target define it by overriding the op\n+\tin process_stratum_target.\n+\n+\t* linux-low.cc (linux_process_target::sw_breakpoint_from_kind):\n+\tRemove.\n+\t* linux-low.h (struct linux_target_ops): Remove the op.\n+\t(class linux_process_target) <sw_breakpoint_from_kind>: Remove.\n+\t* linux-x86-low.cc (class x86_target) <sw_breakpoint_from_kind>:\n+\tDeclare.\n+\t(x86_sw_breakpoint_from_kind): Turn into...\n+\t(x86_target::sw_breakpoint_from_kind): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-aarch64-low.cc (class aarch64_target)\n+\t<sw_breakpoint_from_kind>: Declare.\n+\t(aarch64_sw_breakpoint_from_kind): Turn into...\n+\t(aarch64_target::sw_breakpoint_from_kind): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-arm-low.cc (class arm_target) <sw_breakpoint_from_kind>:\n+\tDeclare.\n+\t(arm_target::sw_breakpoint_from_kind): Define.\n+\t(the_low_target): Remove the op field.\n+\t* linux-bfin-low.cc (class bfin_target) <sw_breakpoint_from_kind>:\n+\tDeclare.\n+\t(bfin_sw_breakpoint_from_kind): Turn into...\n+\t(bfin_target::sw_breakpoint_from_kind): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-cris-low.cc (class cris_target) <sw_breakpoint_from_kind>:\n+\tDeclare.\n+\t(cris_sw_breakpoint_from_kind): Turn into...\n+\t(cris_target::sw_breakpoint_from_kind): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-crisv32-low.cc (class crisv32_target)\n+\t<sw_breakpoint_from_kind>: Declare.\n+\t(cris_sw_breakpoint_from_kind): Turn into...\n+\t(crisv32_target::sw_breakpoint_from_kind): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-ia64-low.cc (class ia64_target) <sw_breakpoint_from_kind>:\n+\tDeclare.\n+\t(ia64_target::sw_breakpoint_from_kind): Define.\n+\t* linux-m32r-low.cc (class m32r_target) <sw_breakpoint_from_kind>:\n+\tDeclare.\n+\t(m32r_sw_breakpoint_from_kind): Turn into...\n+\t(m32r_target::sw_breakpoint_from_kind): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-m68k-low.cc (class m68k_target) <sw_breakpoint_from_kind>:\n+\tDeclare.\n+\t(m68k_sw_breakpoint_from_kind): Turn into...\n+\t(m68k_target::sw_breakpoint_from_kind): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-mips-low.cc (class mips_target) <sw_breakpoint_from_kind>:\n+\tDeclare.\n+\t(mips_sw_breakpoint_from_kind): Turn into...\n+\t(mips_target::sw_breakpoint_from_kind): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-nios2-low.cc (class nios2_target) <sw_breakpoint_from_kind>:\n+\tDeclare.\n+\t(nios2_sw_breakpoint_from_kind): Turn into...\n+\t(nios2_target::sw_breakpoint_from_kind): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-ppc-low.cc (class ppc_target) <sw_breakpoint_from_kind>:\n+\tDeclare.\n+\t(ppc_sw_breakpoint_from_kind): Turn into...\n+\t(ppc_target::sw_breakpoint_from_kind): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-riscv-low.cc (class riscv_target) <sw_breakpoint_from_kind>:\n+\tDeclare.\n+\t(riscv_sw_breakpoint_from_kind): Turn into...\n+\t(riscv_target::sw_breakpoint_from_kind): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-s390-low.cc (class s390_target) <sw_breakpoint_from_kind>:\n+\tDeclare.\n+\t(s390_sw_breakpoint_from_kind): Turn into...\n+\t(s390_target::sw_breakpoint_from_kind): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-sh-low.cc (class sh_target) <sw_breakpoint_from_kind>:\n+\tDeclare.\n+\t(sh_sw_breakpoint_from_kind): Turn into...\n+\t(sh_target::sw_breakpoint_from_kind): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-sparc-low.cc (class sparc_target) <sw_breakpoint_from_kind>:\n+\tDeclare.\n+\t(sparc_sw_breakpoint_from_kind): Turn into...\n+\t(sparc_target::sw_breakpoint_from_kind): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-tic6x-low.cc (class tic6x_target) <sw_breakpoint_from_kind>:\n+\tDeclare.\n+\t(tic6x_sw_breakpoint_from_kind): Turn into...\n+\t(tic6x_target::sw_breakpoint_from_kind): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-tile-low.cc (class tile_target) <sw_breakpoint_from_kind>:\n+\tDeclare.\n+\t(tile_sw_breakpoint_from_kind): Turn into...\n+\t(tile_target::sw_breakpoint_from_kind): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-xtensa-low.cc (class xtensa_target)\n+\t<sw_breakpoint_from_kind>: Declare.\n+\t(xtensa_sw_breakpoint_from_kind): Turn into...\n+\t(xtensa_target::sw_breakpoint_from_kind): ...this.\n+\t(the_low_target): Remove the op field.\n+\n 2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tRemove the 'breakpoint_kind_from_pc' and"
    },
    {
      "sha": "23c9c3e25184ce83ae42d911ccecdb964f537766",
      "filename": "gdbserver/linux-aarch64-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-aarch64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-aarch64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-aarch64-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -61,6 +61,8 @@ class aarch64_target : public linux_process_target\n \n   int breakpoint_kind_from_current_state (CORE_ADDR *pcptr) override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -3054,10 +3056,10 @@ aarch64_supports_range_stepping (void)\n   return 1;\n }\n \n-/* Implementation of linux_target_ops method \"sw_breakpoint_from_kind\".  */\n+/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-aarch64_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+aarch64_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   if (is_64bit_tdesc ())\n     {\n@@ -3101,7 +3103,6 @@ aarch64_supports_hardware_single_step (void)\n \n struct linux_target_ops the_low_target =\n {\n-  aarch64_sw_breakpoint_from_kind,\n   NULL, /* get_next_pcs */\n   0,    /* decr_pc_after_break */\n   aarch64_breakpoint_at,"
    },
    {
      "sha": "aab2c427f5abd4b446de5b0d3a6862ddf3c7319c",
      "filename": "gdbserver/linux-arm-low.cc",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-arm-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-arm-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-arm-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -66,6 +66,8 @@ class arm_target : public linux_process_target\n \n   int breakpoint_kind_from_current_state (CORE_ADDR *pcptr) override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -115,6 +117,12 @@ arm_target::breakpoint_kind_from_current_state (CORE_ADDR *pcptr)\n   return arm_breakpoint_kind_from_current_state (pcptr);\n }\n \n+const gdb_byte *\n+arm_target::sw_breakpoint_from_kind (int kind, int *size)\n+{\n+  return arm_sw_breakpoint_from_kind (kind, size);\n+}\n+\n /* Information describing the hardware breakpoint capabilities.  */\n static struct\n {\n@@ -1067,7 +1075,6 @@ arm_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  arm_sw_breakpoint_from_kind,\n   arm_gdbserver_get_next_pcs,\n   0,\n   arm_breakpoint_at,"
    },
    {
      "sha": "c798c9317f26d570cca196ef4751b8b1630888d7",
      "filename": "gdbserver/linux-bfin-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-bfin-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-bfin-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-bfin-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -31,6 +31,8 @@ class bfin_target : public linux_process_target\n \n   const regs_info *get_regs_info () override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -102,10 +104,10 @@ bfin_target::low_cannot_fetch_register (int regno)\n #define bfin_breakpoint_len 2\n static const gdb_byte bfin_breakpoint[bfin_breakpoint_len] = {0xa1, 0x00};\n \n-/* Implementation of linux_target_ops method \"sw_breakpoint_from_kind\".  */\n+/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-bfin_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+bfin_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   *size = bfin_breakpoint_len;\n   return bfin_breakpoint;\n@@ -159,7 +161,6 @@ bfin_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  bfin_sw_breakpoint_from_kind,\n   NULL, /* get_next_pcs */\n   2,\n   bfin_breakpoint_at,"
    },
    {
      "sha": "a22ec3342dcae1d0976f1e517abd046c2d236c2d",
      "filename": "gdbserver/linux-cris-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-cris-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-cris-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-cris-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -28,6 +28,8 @@ class cris_target : public linux_process_target\n \n   const regs_info *get_regs_info () override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -107,10 +109,10 @@ cris_target::low_cannot_fetch_register (int regno)\n static const unsigned short cris_breakpoint = 0xe938;\n #define cris_breakpoint_len 2\n \n-/* Implementation of linux_target_ops method \"sw_breakpoint_from_kind\".  */\n+/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-cris_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+cris_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   *size = cris_breakpoint_len;\n   return (const gdb_byte *) &cris_breakpoint;\n@@ -156,7 +158,6 @@ cris_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  cris_sw_breakpoint_from_kind,\n   NULL, /* get_next_pcs */\n   0,\n   cris_breakpoint_at,"
    },
    {
      "sha": "965f186981d9eacc07486d56f1384cea0b8ae902",
      "filename": "gdbserver/linux-crisv32-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-crisv32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-crisv32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-crisv32-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -28,6 +28,8 @@ class crisv32_target : public linux_process_target\n \n   const regs_info *get_regs_info () override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -117,10 +119,10 @@ static int cris_regmap[] = {\n static const unsigned short cris_breakpoint = 0xe938;\n #define cris_breakpoint_len 2\n \n-/* Implementation of linux_target_ops method \"sw_breakpoint_from_kind\".  */\n+/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-cris_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+crisv32_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   *size = cris_breakpoint_len;\n   return (const gdb_byte *) &cris_breakpoint;\n@@ -453,7 +455,6 @@ crisv32_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  cris_sw_breakpoint_from_kind,\n   NULL, /* get_next_pcs */\n   0,\n   cris_breakpoint_at,"
    },
    {
      "sha": "493c7e4f93d6fd20da2016bfa0fb84f1ae4b14b4",
      "filename": "gdbserver/linux-ia64-low.cc",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-ia64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-ia64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-ia64-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -31,6 +31,8 @@ class ia64_target : public linux_process_target\n \n   const regs_info *get_regs_info () override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -46,6 +48,13 @@ class ia64_target : public linux_process_target\n \n static ia64_target the_ia64_target;\n \n+const gdb_byte *\n+ia64_target::sw_breakpoint_from_kind (int kind, int *size)\n+{\n+  gdb_assert_no_reached (\"target op sw_breakpoint_from_kind is not \"\n+\t\t\t \"implemented by this target\");\n+}\n+\n /* Defined in auto-generated file reg-ia64.c.  */\n void init_registers_ia64 (void);\n extern const struct target_desc *tdesc_ia64;"
    },
    {
      "sha": "14a4dbf0866a2c4bf27d58dcf2087e5e7cc1a597",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 10,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -7230,16 +7230,6 @@ current_lwp_ptid (void)\n   return ptid_of (current_thread);\n }\n \n-/* Implementation of the target_ops method \"sw_breakpoint_from_kind\".  */\n-\n-const gdb_byte *\n-linux_process_target::sw_breakpoint_from_kind (int kind, int *size)\n-{\n-  gdb_assert (the_low_target.sw_breakpoint_from_kind != NULL);\n-\n-  return (*the_low_target.sw_breakpoint_from_kind) (kind, size);\n-}\n-\n const char *\n linux_process_target::thread_name (ptid_t thread)\n {"
    },
    {
      "sha": "b2f779893e30fe08e4283b83744edf64311cfa66",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -131,9 +131,6 @@ struct lwp_info;\n \n struct linux_target_ops\n {\n-  /* See target.h for details.  */\n-  const gdb_byte *(*sw_breakpoint_from_kind) (int kind, int *size);\n-\n   /* Find the next possible PCs after the current instruction executes.  */\n   std::vector<CORE_ADDR> (*get_next_pcs) (struct regcache *regcache);\n \n@@ -436,8 +433,6 @@ class linux_process_target : public process_stratum_target\n   ssize_t multifs_readlink (int pid, const char *filename, char *buf,\n \t\t\t    size_t bufsiz) override;\n \n-  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n-\n   const char *thread_name (ptid_t thread) override;\n \n #if USE_THREAD_DB"
    },
    {
      "sha": "1a6771f5845c54497afea64df78915ae8337d738",
      "filename": "gdbserver/linux-m32r-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-m32r-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-m32r-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m32r-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -31,6 +31,8 @@ class m32r_target : public linux_process_target\n \n   const regs_info *get_regs_info () override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -101,10 +103,10 @@ m32r_target::low_cannot_fetch_register (int regno)\n static const unsigned short m32r_breakpoint = 0x10f1;\n #define m32r_breakpoint_len 2\n \n-/* Implementation of linux_target_ops method \"sw_breakpoint_from_kind\".  */\n+/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-m32r_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+m32r_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   *size = m32r_breakpoint_len;\n   return (const gdb_byte *) &m32r_breakpoint;\n@@ -158,7 +160,6 @@ m32r_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  m32r_sw_breakpoint_from_kind,\n   NULL,\n   0,\n   m32r_breakpoint_at,"
    },
    {
      "sha": "5e19ab02094d459927596bbaf667e9f426150802",
      "filename": "gdbserver/linux-m68k-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-m68k-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-m68k-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m68k-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -27,6 +27,8 @@ class m68k_target : public linux_process_target\n \n   const regs_info *get_regs_info () override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -170,10 +172,10 @@ static struct regset_info m68k_regsets[] = {\n static const gdb_byte m68k_breakpoint[] = { 0x4E, 0x4F };\n #define m68k_breakpoint_len 2\n \n-/* Implementation of linux_target_ops method \"sw_breakpoint_from_kind\".  */\n+/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-m68k_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+m68k_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   *size = m68k_breakpoint_len;\n   return m68k_breakpoint;\n@@ -253,7 +255,6 @@ m68k_supports_hardware_single_step (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  m68k_sw_breakpoint_from_kind,\n   NULL,\n   2,\n   m68k_breakpoint_at,"
    },
    {
      "sha": "972f431bfbd8931de61e55d716b615febd886b71",
      "filename": "gdbserver/linux-mips-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-mips-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-mips-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-mips-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -33,6 +33,8 @@ class mips_target : public linux_process_target\n \n   const regs_info *get_regs_info () override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -315,10 +317,10 @@ mips_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n static const unsigned int mips_breakpoint = 0x0005000d;\n #define mips_breakpoint_len 4\n \n-/* Implementation of linux_target_ops method \"sw_breakpoint_from_kind\".  */\n+/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-mips_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+mips_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   *size = mips_breakpoint_len;\n   return (const gdb_byte *) &mips_breakpoint;\n@@ -964,7 +966,6 @@ mips_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  mips_sw_breakpoint_from_kind,\n   NULL, /* get_next_pcs */\n   0,\n   mips_breakpoint_at,"
    },
    {
      "sha": "693af71f29ec3daa416f55df4821520e640d3136",
      "filename": "gdbserver/linux-nios2-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-nios2-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-nios2-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-nios2-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -39,6 +39,8 @@ class nios2_target : public linux_process_target\n \n   const regs_info *get_regs_info () override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -152,10 +154,10 @@ nios2_target::low_cannot_store_register (int regno)\n static const unsigned int nios2_breakpoint = NIOS2_BREAKPOINT;\n #define nios2_breakpoint_len 4\n \n-/* Implementation of linux_target_ops method \"sw_breakpoint_from_kind\".  */\n+/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-nios2_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+nios2_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   *size = nios2_breakpoint_len;\n   return (const gdb_byte *) &nios2_breakpoint;\n@@ -275,7 +277,6 @@ nios2_target::get_regs_info ()\n \n struct linux_target_ops the_low_target =\n {\n-  nios2_sw_breakpoint_from_kind,\n   NULL, /* get_next_pcs */\n   0,\n   nios2_breakpoint_at,"
    },
    {
      "sha": "9690d79f3d87360c5c3869b58885689ca7767dbb",
      "filename": "gdbserver/linux-ppc-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-ppc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-ppc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-ppc-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -52,6 +52,8 @@ class ppc_target : public linux_process_target\n \n   const regs_info *get_regs_info () override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -296,10 +298,10 @@ static int ppc_regmap_adjusted;\n static const unsigned int ppc_breakpoint = 0x7d821008;\n #define ppc_breakpoint_len 4\n \n-/* Implementation of linux_target_ops method \"sw_breakpoint_from_kind\".  */\n+/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-ppc_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+ppc_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   *size = ppc_breakpoint_len;\n   return (const gdb_byte *) &ppc_breakpoint;\n@@ -3404,7 +3406,6 @@ ppc_get_ipa_tdesc_idx (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  ppc_sw_breakpoint_from_kind,\n   NULL,\n   0,\n   ppc_breakpoint_at,"
    },
    {
      "sha": "d6f31b47250cd8b02b9e4b1158785aa63115182a",
      "filename": "gdbserver/linux-riscv-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-riscv-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-riscv-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-riscv-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -40,6 +40,8 @@ class riscv_target : public linux_process_target\n \n   int breakpoint_kind_from_pc (CORE_ADDR *pcptr) override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -266,10 +268,10 @@ riscv_target::breakpoint_kind_from_pc (CORE_ADDR *pcptr)\n     return sizeof (riscv_cbreakpoint);\n }\n \n-/* Implementation of linux_target_ops method \"sw_breakpoint_from_kind\".  */\n+/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-riscv_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+riscv_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   *size = kind;\n   switch (kind)\n@@ -307,7 +309,6 @@ riscv_breakpoint_at (CORE_ADDR pc)\n /* RISC-V/Linux target operations.  */\n struct linux_target_ops the_low_target =\n {\n-  riscv_sw_breakpoint_from_kind,\n   NULL, /* get_next_pcs */\n   0,    /* decr_pc_after_break */\n   riscv_breakpoint_at,"
    },
    {
      "sha": "164142dff6e81fddcd34c3cdc666c6ca7542f200",
      "filename": "gdbserver/linux-s390-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-s390-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-s390-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-s390-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -59,6 +59,8 @@ class s390_target : public linux_process_target\n \n   const regs_info *get_regs_info () override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -451,10 +453,10 @@ static struct regset_info s390_regsets[] = {\n static const gdb_byte s390_breakpoint[] = { 0, 1 };\n #define s390_breakpoint_len 2\n \n-/* Implementation of linux_target_ops method \"sw_breakpoint_from_kind\".  */\n+/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-s390_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+s390_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   *size = s390_breakpoint_len;\n   return s390_breakpoint;\n@@ -2824,7 +2826,6 @@ s390_emit_ops (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  s390_sw_breakpoint_from_kind,\n   NULL,\n   s390_breakpoint_len,\n   s390_breakpoint_at,"
    },
    {
      "sha": "10ee49a5f87118ddd5c5236c8217ee7b31510243",
      "filename": "gdbserver/linux-sh-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-sh-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-sh-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sh-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -27,6 +27,8 @@ class sh_target : public linux_process_target\n \n   const regs_info *get_regs_info () override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -107,10 +109,10 @@ sh_target::low_cannot_fetch_register (int regno)\n static const unsigned short sh_breakpoint = 0xc3c3;\n #define sh_breakpoint_len 2\n \n-/* Implementation of linux_target_ops method \"sw_breakpoint_from_kind\".  */\n+/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-sh_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+sh_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   *size = sh_breakpoint_len;\n   return (const gdb_byte *) &sh_breakpoint;\n@@ -188,7 +190,6 @@ sh_target::low_arch_setup ()\n }\n \n struct linux_target_ops the_low_target = {\n-  sh_sw_breakpoint_from_kind,\n   NULL,\n   0,\n   sh_breakpoint_at,"
    },
    {
      "sha": "c94c3e3caf3b65fe02680d5724b185529916549f",
      "filename": "gdbserver/linux-sparc-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-sparc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-sparc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sparc-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -50,6 +50,8 @@ class sparc_target : public linux_process_target\n \n   const regs_info *get_regs_info () override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -267,10 +269,10 @@ static const gdb_byte sparc_breakpoint[INSN_SIZE] = {\n };\n #define sparc_breakpoint_len INSN_SIZE\n \n-/* Implementation of linux_target_ops method \"sw_breakpoint_from_kind\".  */\n+/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n \n-static const unsigned char *\n-sparc_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+sparc_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   *size = sparc_breakpoint_len;\n   return sparc_breakpoint;\n@@ -337,7 +339,6 @@ sparc_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  sparc_sw_breakpoint_from_kind,\n   NULL, /* get_next_pcs */\n   0,\n   sparc_breakpoint_at,"
    },
    {
      "sha": "69bb4f3d7b1e63ca985edfa85d8289de126d9bb3",
      "filename": "gdbserver/linux-tic6x-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-tic6x-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-tic6x-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tic6x-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -46,6 +46,8 @@ class tic6x_target : public linux_process_target\n \n   const regs_info *get_regs_info () override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -202,10 +204,10 @@ static int *tic6x_regmap;\n static unsigned int tic6x_breakpoint;\n #define tic6x_breakpoint_len 4\n \n-/* Implementation of linux_target_ops method \"sw_breakpoint_from_kind\".  */\n+/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-tic6x_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+tic6x_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   *size = tic6x_breakpoint_len;\n   return (const gdb_byte *) &tic6x_breakpoint;\n@@ -419,7 +421,6 @@ tic6x_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  tic6x_sw_breakpoint_from_kind,\n   NULL,\n   0,\n   tic6x_breakpoint_at,"
    },
    {
      "sha": "e4565b4cfbecc86169996cc853bb5b68fbb889a6",
      "filename": "gdbserver/linux-tile-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-tile-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-tile-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tile-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -31,6 +31,8 @@ class tile_target : public linux_process_target\n \n   const regs_info *get_regs_info () override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -116,10 +118,10 @@ tile_target::low_cannot_store_register (int regno)\n static uint64_t tile_breakpoint = 0x400b3cae70166000ULL;\n #define tile_breakpoint_len 8\n \n-/* Implementation of linux_target_ops method \"sw_breakpoint_from_kind\".  */\n+/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-tile_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+tile_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   *size = tile_breakpoint_len;\n   return (const gdb_byte *) &tile_breakpoint;\n@@ -220,7 +222,6 @@ tile_supports_hardware_single_step (void)\n \n struct linux_target_ops the_low_target =\n {\n-  tile_sw_breakpoint_from_kind,\n   NULL,\n   0,\n   tile_breakpoint_at,"
    },
    {
      "sha": "a9d7ec06705d1db5c832ae2f5d8a2214c40d5207",
      "filename": "gdbserver/linux-x86-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-x86-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-x86-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-x86-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -106,6 +106,8 @@ class x86_target : public linux_process_target\n \n   const regs_info *get_regs_info () override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -2852,10 +2854,10 @@ x86_emit_ops (void)\n     return &i386_emit_ops;\n }\n \n-/* Implementation of linux_target_ops method \"sw_breakpoint_from_kind\".  */\n+/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-x86_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+x86_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   *size = x86_breakpoint_len;\n   return x86_breakpoint;\n@@ -2897,7 +2899,6 @@ x86_get_ipa_tdesc_idx (void)\n \n struct linux_target_ops the_low_target =\n {\n-  x86_sw_breakpoint_from_kind,\n   NULL,\n   1,\n   x86_breakpoint_at,"
    },
    {
      "sha": "ab08227a862b28ae22dd4d8ef13245a284971abe",
      "filename": "gdbserver/linux-xtensa-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-xtensa-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3ca4edb6617353defacd3bf3a4ee3d458238419e/gdbserver/linux-xtensa-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-xtensa-low.cc?ref=3ca4edb6617353defacd3bf3a4ee3d458238419e",
      "patch": "@@ -28,6 +28,8 @@ class xtensa_target : public linux_process_target\n \n   const regs_info *get_regs_info () override;\n \n+  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -252,10 +254,10 @@ static struct regset_info xtensa_regsets[] = {\n static const gdb_byte xtensa_breakpoint[] = XTENSA_BREAKPOINT;\n #define xtensa_breakpoint_len 2\n \n-/* Implementation of linux_target_ops method \"sw_breakpoint_from_kind\".  */\n+/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n \n-static const gdb_byte *\n-xtensa_sw_breakpoint_from_kind (int kind, int *size)\n+const gdb_byte *\n+xtensa_target::sw_breakpoint_from_kind (int kind, int *size)\n {\n   *size = xtensa_breakpoint_len;\n   return xtensa_breakpoint;\n@@ -326,7 +328,6 @@ xtensa_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  xtensa_sw_breakpoint_from_kind,\n   NULL,\n   0,\n   xtensa_breakpoint_at,"
    }
  ]
}