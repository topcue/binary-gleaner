{
  "sha": "7f3a18cfb58deb36e05469d94e7b9e48b19d90af",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2YzYTE4Y2ZiNThkZWIzNmUwNTQ2OWQ5NGU3YjllNDhiMTlkOTBhZg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-12-16T21:14:48Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-12-18T00:04:16Z"
    },
    "message": "Statically initialise target common sections\n\nThis tidies initialisation of target common sections, doing so using a\nstatic initialiser rather than via code and deleting unnecessary\nsymbol_ptr_ptr variables (the one in asection is used instead).\n\nThe patch also initialises ecoff.c:bfd_debug_section using\nBFD_FAKE_SECTION.  That does change bfd_debug_section slightly,\noutput_section was NULL now bfd_debug_section, and symbol_ptr_ptr\nwas NULL now &bfd_debug_section.symbol, but I believe those changes\nare safe.\n\nbfd/\n\t* ecoff.c (bfd_debug_section): Init using BFD_FAKE_SECTION.\n\t(ecoff_scom_section, ecoff_scom_symbol): Statically init using\n\tBFD_FAKE_SECTION and GLOBAL_SYM_INIT.  Delete initialisation code.\n\t(ecoff_scom_symbol_ptr): Delete.\n\t* elf32-m32r.c (m32r_elf_scom_section, m32r_elf_scom_symbol),\n\t(m32r_elf_scom_symbol_ptr),\n\t* elf32-score.c (score_elf_scom_section, score_elf_scom_symbol),\n\t(score_elf_scom_symbol_ptr),\n\t* elf32-score7.c (score_elf_scom_section, score_elf_scom_symbol),\n\t(score_elf_scom_symbol_ptr),\n\t* elf32-tic6x.c (tic6x_elf_scom_section, tic6x_elf_scom_symbol),\n\t(tic6x_elf_scom_symbol_ptr),\n\t* elf32-v850.c (v850_elf_scom_section, v850_elf_scom_symbol),\n\t(v850_elf_scom_symbol_ptr),\n\t(v850_elf_tcom_section, v850_elf_tcom_symbol),\n\t(v850_elf_tcom_symbol_ptr),\n\t(v850_elf_zcom_section, v850_elf_zcom_symbol),\n\t(v850_elf_zcom_symbol_ptr),\n\t* elf64-mmix.c (mmix_elf_reg_section, mmix_elf_reg_section_symbol),\n\t(mmix_elf_reg_section_symbol_ptr),\n\t* elfxx-mips.c (mips_elf_scom_section, mips_elf_scom_symbol),\n\t(mips_elf_scom_symbol_ptr): Likewise.\ngas/\n\t* ecoff.c (ecoff_frob_symbol): Rename scom_section to\n\tecoff_scom_section and statically initialise.",
    "tree": {
      "sha": "fdcaf3f90aab305c07bb75189d9db56db67c4dbe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fdcaf3f90aab305c07bb75189d9db56db67c4dbe"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7f3a18cfb58deb36e05469d94e7b9e48b19d90af",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7f3a18cfb58deb36e05469d94e7b9e48b19d90af",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7f3a18cfb58deb36e05469d94e7b9e48b19d90af",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3ece0b95273fafe20fface5be0b70667eaf7a127",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3ece0b95273fafe20fface5be0b70667eaf7a127",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3ece0b95273fafe20fface5be0b70667eaf7a127"
    }
  ],
  "stats": {
    "total": 325,
    "additions": 93,
    "deletions": 232
  },
  "files": [
    {
      "sha": "40d96a86a7627be2d3d07d90aac45585fb282dce",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=7f3a18cfb58deb36e05469d94e7b9e48b19d90af",
      "patch": "@@ -1,3 +1,18 @@\n+2020-12-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* ecoff.c (bfd_debug_section): Init using BFD_FAKE_SECTION.\n+\t(ecoff_scom_section, ecoff_scom_symbol): Statically init using\n+\tBFD_FAKE_SECTION and GLOBAL_SYM_INIT.  Delete initialisation code.\n+\t* elf32-m32r.c (m32r_elf_scom_section, m32r_elf_scom_symbol),\n+\t* elf32-score.c (score_elf_scom_section, score_elf_scom_symbol),\n+\t* elf32-score7.c (score_elf_scom_section, score_elf_scom_symbol),\n+\t* elf32-tic6x.c (tic6x_elf_scom_section, tic6x_elf_scom_symbol),\n+\t* elf32-v850.c (v850_elf_scom_section, v850_elf_scom_symbol),\n+\t(v850_elf_tcom_section, v850_elf_tcom_symbol),\n+\t(v850_elf_zcom_section, v850_elf_zcom_symbol),\n+\t* elf64-mmix.c (mmix_elf_reg_section, mmix_elf_reg_section_symbol),\n+\t* elfxx-mips.c (mips_elf_scom_section, mips_elf_scom_symbol): Likewise.\n+\n 2020-12-16  Alan Modra  <amodra@gmail.com>\n \n \t* elfxx-target.h (elfNN_bed): Constify."
    },
    {
      "sha": "22060e7477846889da6123cea01b5048c85f6d42",
      "filename": "bfd/ecoff.c",
      "status": "modified",
      "additions": 6,
      "deletions": 60,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/bfd/ecoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/bfd/ecoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ecoff.c?ref=7f3a18cfb58deb36e05469d94e7b9e48b19d90af",
      "patch": "@@ -51,38 +51,7 @@\n \f\n /* This stuff is somewhat copied from coffcode.h.  */\n static asection bfd_debug_section =\n-{\n-  /* name,\tid,  section_id, index, next, prev, flags,\t  */\n-     \"*DEBUG*\", 0,   0,\t\t 0,\tNULL, NULL, 0,\n-  /* user_set_vma,\t   */\n-     0,\n-  /* linker_mark, linker_has_input, gc_mark, compress_status,\t   */\n-     0,\t\t  0,\t\t    1,\t     0,\n-  /* segment_mark, sec_info_type, use_rela_p,\t\t\t   */\n-     0,\t\t   0,\t\t  0,\n-  /* sec_flg0, sec_flg1, sec_flg2, sec_flg3, sec_flg4, sec_flg5,   */\n-     0,\t       0,\t 0,\t   0,\t     0,\t       0,\n-  /* vma, lma, size, rawsize, compressed_size, relax, relax_count, */\n-     0,\t  0,   0,    0,\t      0,\t       0,     0,\n-  /* output_offset, output_section, alignment_power,\t\t   */\n-     0,\t\t    NULL,\t    0,\n-  /* relocation, orelocation, reloc_count, filepos, rel_filepos,   */\n-     NULL,\t NULL,\t      0,\t   0,\t    0,\n-  /* line_filepos, userdata, contents, lineno, lineno_count,\t   */\n-     0,\t\t   NULL,     NULL,     NULL,   0,\n-  /* entsize, kept_section, moving_line_filepos,\t\t   */\n-     0,\t      NULL,\t    0,\n-  /* target_index, used_by_bfd, constructor_chain, owner,\t   */\n-     0,\t\t   NULL,\tNULL,\t\t   NULL,\n-  /* symbol,\t\t\t\t\t\t\t   */\n-     NULL,\n-  /* symbol_ptr_ptr,\t\t\t\t\t\t   */\n-     NULL,\n-  /* map_head, map_tail,\t\t\t\t\t   */\n-     { NULL }, { NULL },\n-  /* already_assigned \t\t\t\t\t\t   */\n-     NULL,\n-};\n+  BFD_FAKE_SECTION (bfd_debug_section, NULL, \"*DEBUG*\", 0, 0);\n \n /* Create an ECOFF object.  */\n \n@@ -644,8 +613,11 @@ _bfd_ecoff_slurp_symbolic_info (bfd *abfd,\n    faster assembler code.  This is what we use for the small common\n    section.  */\n static asection ecoff_scom_section;\n-static asymbol ecoff_scom_symbol;\n-static asymbol *ecoff_scom_symbol_ptr;\n+static const asymbol ecoff_scom_symbol =\n+  GLOBAL_SYM_INIT (SCOMMON, &ecoff_scom_section);\n+static asection ecoff_scom_section =\n+  BFD_FAKE_SECTION (ecoff_scom_section, &ecoff_scom_symbol,\n+\t\t    SCOMMON, 0, SEC_IS_COMMON | SEC_SMALL_DATA);\n \n /* Create an empty symbol.  */\n \n@@ -787,19 +759,6 @@ ecoff_set_symbol_info (bfd *abfd,\n \t}\n       /* Fall through.  */\n     case scSCommon:\n-      if (ecoff_scom_section.name == NULL)\n-\t{\n-\t  /* Initialize the small common section.  */\n-\t  ecoff_scom_section.name = SCOMMON;\n-\t  ecoff_scom_section.flags = SEC_IS_COMMON | SEC_SMALL_DATA;\n-\t  ecoff_scom_section.output_section = &ecoff_scom_section;\n-\t  ecoff_scom_section.symbol = &ecoff_scom_symbol;\n-\t  ecoff_scom_section.symbol_ptr_ptr = &ecoff_scom_symbol_ptr;\n-\t  ecoff_scom_symbol.name = SCOMMON;\n-\t  ecoff_scom_symbol.flags = BSF_SECTION_SYM;\n-\t  ecoff_scom_symbol.section = &ecoff_scom_section;\n-\t  ecoff_scom_symbol_ptr = &ecoff_scom_symbol;\n-\t}\n       asym->section = &ecoff_scom_section;\n       asym->flags = 0;\n       break;\n@@ -3400,19 +3359,6 @@ ecoff_link_add_externals (bfd *abfd,\n \t    }\n \t  /* Fall through.  */\n \tcase scSCommon:\n-\t  if (ecoff_scom_section.name == NULL)\n-\t    {\n-\t      /* Initialize the small common section.  */\n-\t      ecoff_scom_section.name = SCOMMON;\n-\t      ecoff_scom_section.flags = SEC_IS_COMMON | SEC_SMALL_DATA;\n-\t      ecoff_scom_section.output_section = &ecoff_scom_section;\n-\t      ecoff_scom_section.symbol = &ecoff_scom_symbol;\n-\t      ecoff_scom_section.symbol_ptr_ptr = &ecoff_scom_symbol_ptr;\n-\t      ecoff_scom_symbol.name = SCOMMON;\n-\t      ecoff_scom_symbol.flags = BSF_SECTION_SYM;\n-\t      ecoff_scom_symbol.section = &ecoff_scom_section;\n-\t      ecoff_scom_symbol_ptr = &ecoff_scom_symbol;\n-\t    }\n \t  section = &ecoff_scom_section;\n \t  break;\n \tcase scSUndefined:"
    },
    {
      "sha": "46fb6c7975286cfa149b8673d8b8264a67238cd3",
      "filename": "bfd/elf32-m32r.c",
      "status": "modified",
      "additions": 5,
      "deletions": 15,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/bfd/elf32-m32r.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/bfd/elf32-m32r.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m32r.c?ref=7f3a18cfb58deb36e05469d94e7b9e48b19d90af",
      "patch": "@@ -1337,8 +1337,11 @@ _bfd_m32r_elf_section_from_bfd_section (bfd *abfd ATTRIBUTE_UNUSED,\n    _SDA_BASE.  This is what we use for the small common section.  This\n    approach is copied from elf32-mips.c.  */\n static asection m32r_elf_scom_section;\n-static asymbol m32r_elf_scom_symbol;\n-static asymbol *m32r_elf_scom_symbol_ptr;\n+static const asymbol m32r_elf_scom_symbol =\n+  GLOBAL_SYM_INIT (\".scommon\", &m32r_elf_scom_section);\n+static asection m32r_elf_scom_section =\n+  BFD_FAKE_SECTION (m32r_elf_scom_section, &m32r_elf_scom_symbol,\n+\t\t    \".scommon\", 0, SEC_IS_COMMON | SEC_SMALL_DATA);\n \n /* Handle the special M32R section numbers that a symbol may use.  */\n \n@@ -1350,19 +1353,6 @@ _bfd_m32r_elf_symbol_processing (bfd *abfd ATTRIBUTE_UNUSED, asymbol *asym)\n   switch (elfsym->internal_elf_sym.st_shndx)\n     {\n     case SHN_M32R_SCOMMON:\n-      if (m32r_elf_scom_section.name == NULL)\n-\t{\n-\t  /* Initialize the small common section.  */\n-\t  m32r_elf_scom_section.name = \".scommon\";\n-\t  m32r_elf_scom_section.flags = SEC_IS_COMMON | SEC_SMALL_DATA;\n-\t  m32r_elf_scom_section.output_section = &m32r_elf_scom_section;\n-\t  m32r_elf_scom_section.symbol = &m32r_elf_scom_symbol;\n-\t  m32r_elf_scom_section.symbol_ptr_ptr = &m32r_elf_scom_symbol_ptr;\n-\t  m32r_elf_scom_symbol.name = \".scommon\";\n-\t  m32r_elf_scom_symbol.flags = BSF_SECTION_SYM;\n-\t  m32r_elf_scom_symbol.section = &m32r_elf_scom_section;\n-\t  m32r_elf_scom_symbol_ptr = &m32r_elf_scom_symbol;\n-\t}\n       asym->section = &m32r_elf_scom_section;\n       asym->value = elfsym->internal_elf_sym.st_size;\n       break;"
    },
    {
      "sha": "5c15c7014551c4bc851289658d5ea214dff976d6",
      "filename": "bfd/elf32-score.c",
      "status": "modified",
      "additions": 5,
      "deletions": 15,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/bfd/elf32-score.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/bfd/elf32-score.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-score.c?ref=7f3a18cfb58deb36e05469d94e7b9e48b19d90af",
      "patch": "@@ -201,8 +201,11 @@ static bfd *reldyn_sorting_bfd;\n    faster assembler code.  This is what we use for the small common\n    section.  This approach is copied from ecoff.c.  */\n static asection score_elf_scom_section;\n-static asymbol  score_elf_scom_symbol;\n-static asymbol  *score_elf_scom_symbol_ptr;\n+static const asymbol score_elf_scom_symbol =\n+  GLOBAL_SYM_INIT (\".scommon\", &score_elf_scom_section);\n+static asection score_elf_scom_section =\n+  BFD_FAKE_SECTION (score_elf_scom_section, &score_elf_scom_symbol,\n+\t\t    \".scommon\", 0, SEC_IS_COMMON | SEC_SMALL_DATA);\n \n static bfd_vma\n score_bfd_get_16 (bfd *abfd, const void *data)\n@@ -3031,19 +3034,6 @@ s3_bfd_score_elf_symbol_processing (bfd *abfd, asymbol *asym)\n \tbreak;\n       /* Fall through.  */\n     case SHN_SCORE_SCOMMON:\n-      if (score_elf_scom_section.name == NULL)\n-\t{\n-\t  /* Initialize the small common section.  */\n-\t  score_elf_scom_section.name = \".scommon\";\n-\t  score_elf_scom_section.flags = SEC_IS_COMMON | SEC_SMALL_DATA;\n-\t  score_elf_scom_section.output_section = &score_elf_scom_section;\n-\t  score_elf_scom_section.symbol = &score_elf_scom_symbol;\n-\t  score_elf_scom_section.symbol_ptr_ptr = &score_elf_scom_symbol_ptr;\n-\t  score_elf_scom_symbol.name = \".scommon\";\n-\t  score_elf_scom_symbol.flags = BSF_SECTION_SYM;\n-\t  score_elf_scom_symbol.section = &score_elf_scom_section;\n-\t  score_elf_scom_symbol_ptr = &score_elf_scom_symbol;\n-\t}\n       asym->section = &score_elf_scom_section;\n       asym->value = elfsym->internal_elf_sym.st_size;\n       break;"
    },
    {
      "sha": "40ae21b727a96acf5c3d79dc2cb1a94fb8ddd4ea",
      "filename": "bfd/elf32-score7.c",
      "status": "modified",
      "additions": 6,
      "deletions": 16,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/bfd/elf32-score7.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/bfd/elf32-score7.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-score7.c?ref=7f3a18cfb58deb36e05469d94e7b9e48b19d90af",
      "patch": "@@ -197,9 +197,12 @@ static bfd *reldyn_sorting_bfd;\n    together, and then referenced via the gp pointer, which yields\n    faster assembler code.  This is what we use for the small common\n    section.  This approach is copied from ecoff.c.  */\n-static asection  score_elf_scom_section;\n-static asymbol   score_elf_scom_symbol;\n-static asymbol * score_elf_scom_symbol_ptr;\n+static asection score_elf_scom_section;\n+static const asymbol score_elf_scom_symbol =\n+  GLOBAL_SYM_INIT (\".scommon\", &score_elf_scom_section);\n+static asection score_elf_scom_section =\n+  BFD_FAKE_SECTION (score_elf_scom_section, &score_elf_scom_symbol,\n+\t\t    \".scommon\", 0, SEC_IS_COMMON | SEC_SMALL_DATA);\n \n static bfd_reloc_status_type\n score_elf_hi16_reloc (bfd *abfd ATTRIBUTE_UNUSED,\n@@ -2836,19 +2839,6 @@ s7_bfd_score_elf_symbol_processing (bfd *abfd, asymbol *asym)\n \tbreak;\n       /* Fall through.  */\n     case SHN_SCORE_SCOMMON:\n-      if (score_elf_scom_section.name == NULL)\n-\t{\n-\t  /* Initialize the small common section.  */\n-\t  score_elf_scom_section.name = \".scommon\";\n-\t  score_elf_scom_section.flags = SEC_IS_COMMON | SEC_SMALL_DATA;\n-\t  score_elf_scom_section.output_section = &score_elf_scom_section;\n-\t  score_elf_scom_section.symbol = &score_elf_scom_symbol;\n-\t  score_elf_scom_section.symbol_ptr_ptr = &score_elf_scom_symbol_ptr;\n-\t  score_elf_scom_symbol.name = \".scommon\";\n-\t  score_elf_scom_symbol.flags = BSF_SECTION_SYM;\n-\t  score_elf_scom_symbol.section = &score_elf_scom_section;\n-\t  score_elf_scom_symbol_ptr = &score_elf_scom_symbol;\n-\t}\n       asym->section = &score_elf_scom_section;\n       asym->value = elfsym->internal_elf_sym.st_size;\n       break;"
    },
    {
      "sha": "3ccb9c70ea305613abb11ef0136b75403cafd59b",
      "filename": "bfd/elf32-tic6x.c",
      "status": "modified",
      "additions": 5,
      "deletions": 15,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/bfd/elf32-tic6x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/bfd/elf32-tic6x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-tic6x.c?ref=7f3a18cfb58deb36e05469d94e7b9e48b19d90af",
      "patch": "@@ -128,8 +128,11 @@ struct elf32_tic6x_obj_tdata\n    faster assembler code.  This is what we use for the small common\n    section.  This approach is copied from ecoff.c.  */\n static asection tic6x_elf_scom_section;\n-static asymbol  tic6x_elf_scom_symbol;\n-static asymbol  *tic6x_elf_scom_symbol_ptr;\n+static const asymbol tic6x_elf_scom_symbol =\n+  GLOBAL_SYM_INIT (\".scommon\", &tic6x_elf_scom_section);\n+static asection tic6x_elf_scom_section =\n+  BFD_FAKE_SECTION (tic6x_elf_scom_section, &tic6x_elf_scom_symbol,\n+\t\t    \".scommon\", 0, SEC_IS_COMMON | SEC_SMALL_DATA);\n \n static reloc_howto_type elf32_tic6x_howto_table[] =\n {\n@@ -2970,19 +2973,6 @@ elf32_tic6x_symbol_processing (bfd *abfd ATTRIBUTE_UNUSED, asymbol *asym)\n   switch (elfsym->internal_elf_sym.st_shndx)\n     {\n     case SHN_TIC6X_SCOMMON:\n-      if (tic6x_elf_scom_section.name == NULL)\n-\t{\n-\t  /* Initialize the small common section.  */\n-\t  tic6x_elf_scom_section.name = \".scommon\";\n-\t  tic6x_elf_scom_section.flags = SEC_IS_COMMON | SEC_SMALL_DATA;\n-\t  tic6x_elf_scom_section.output_section = &tic6x_elf_scom_section;\n-\t  tic6x_elf_scom_section.symbol = &tic6x_elf_scom_symbol;\n-\t  tic6x_elf_scom_section.symbol_ptr_ptr = &tic6x_elf_scom_symbol_ptr;\n-\t  tic6x_elf_scom_symbol.name = \".scommon\";\n-\t  tic6x_elf_scom_symbol.flags = BSF_SECTION_SYM;\n-\t  tic6x_elf_scom_symbol.section = &tic6x_elf_scom_section;\n-\t  tic6x_elf_scom_symbol_ptr = &tic6x_elf_scom_symbol;\n-\t}\n       asym->section = &tic6x_elf_scom_section;\n       asym->value = elfsym->internal_elf_sym.st_size;\n       break;"
    },
    {
      "sha": "88e774b88e499f83bb6931a0a70d2538ce287018",
      "filename": "bfd/elf32-v850.c",
      "status": "modified",
      "additions": 23,
      "deletions": 49,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/bfd/elf32-v850.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/bfd/elf32-v850.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-v850.c?ref=7f3a18cfb58deb36e05469d94e7b9e48b19d90af",
      "patch": "@@ -2929,15 +2929,29 @@ v850_elf_print_private_bfd_data (bfd *abfd, void * ptr)\n    respectively, which yields smaller, faster assembler code.  This\n    approach is copied from elf32-mips.c.  */\n \n-static asection  v850_elf_scom_section;\n-static asymbol   v850_elf_scom_symbol;\n-static asymbol * v850_elf_scom_symbol_ptr;\n-static asection  v850_elf_tcom_section;\n-static asymbol   v850_elf_tcom_symbol;\n-static asymbol * v850_elf_tcom_symbol_ptr;\n-static asection  v850_elf_zcom_section;\n-static asymbol   v850_elf_zcom_symbol;\n-static asymbol * v850_elf_zcom_symbol_ptr;\n+static asection v850_elf_scom_section;\n+static const asymbol v850_elf_scom_symbol =\n+  GLOBAL_SYM_INIT (\".scommon\", &v850_elf_scom_section);\n+static asection v850_elf_scom_section =\n+  BFD_FAKE_SECTION (v850_elf_scom_section, &v850_elf_scom_symbol,\n+\t\t    \".scommon\", 0,\n+\t\t    SEC_IS_COMMON | SEC_SMALL_DATA | SEC_ALLOC | SEC_DATA);\n+\n+static asection v850_elf_tcom_section;\n+static const asymbol v850_elf_tcom_symbol =\n+  GLOBAL_SYM_INIT (\".tcommon\", &v850_elf_tcom_section);\n+static asection v850_elf_tcom_section =\n+  BFD_FAKE_SECTION (v850_elf_tcom_section, &v850_elf_tcom_symbol,\n+\t\t    \".tcommon\", 0,\n+\t\t    SEC_IS_COMMON | SEC_SMALL_DATA);\n+\n+static asection v850_elf_zcom_section;\n+static const asymbol v850_elf_zcom_symbol =\n+  GLOBAL_SYM_INIT (\".zcommon\", &v850_elf_zcom_section);\n+static asection v850_elf_zcom_section =\n+  BFD_FAKE_SECTION (v850_elf_zcom_section, &v850_elf_zcom_symbol,\n+\t\t    \".zcommon\", 0,\n+\t\t    SEC_IS_COMMON | SEC_SMALL_DATA);\n \n /* Given a BFD section, try to locate the\n    corresponding ELF section index.  */\n@@ -2997,56 +3011,16 @@ v850_elf_symbol_processing (bfd *abfd, asymbol *asym)\n   switch (indx)\n     {\n     case SHN_V850_SCOMMON:\n-      if (v850_elf_scom_section.name == NULL)\n-\t{\n-\t  /* Initialize the small common section.  */\n-\t  v850_elf_scom_section.name\t       = \".scommon\";\n-\t  v850_elf_scom_section.flags\n-\t    = SEC_IS_COMMON | SEC_SMALL_DATA | SEC_ALLOC | SEC_DATA;\n-\t  v850_elf_scom_section.output_section = & v850_elf_scom_section;\n-\t  v850_elf_scom_section.symbol\t       = & v850_elf_scom_symbol;\n-\t  v850_elf_scom_section.symbol_ptr_ptr = & v850_elf_scom_symbol_ptr;\n-\t  v850_elf_scom_symbol.name\t       = \".scommon\";\n-\t  v850_elf_scom_symbol.flags\t       = BSF_SECTION_SYM;\n-\t  v850_elf_scom_symbol.section\t       = & v850_elf_scom_section;\n-\t  v850_elf_scom_symbol_ptr\t       = & v850_elf_scom_symbol;\n-\t}\n       asym->section = & v850_elf_scom_section;\n       asym->value = elfsym->internal_elf_sym.st_size;\n       break;\n \n     case SHN_V850_TCOMMON:\n-      if (v850_elf_tcom_section.name == NULL)\n-\t{\n-\t  /* Initialize the tcommon section.  */\n-\t  v850_elf_tcom_section.name\t       = \".tcommon\";\n-\t  v850_elf_tcom_section.flags\t       = SEC_IS_COMMON | SEC_SMALL_DATA;\n-\t  v850_elf_tcom_section.output_section = & v850_elf_tcom_section;\n-\t  v850_elf_tcom_section.symbol\t       = & v850_elf_tcom_symbol;\n-\t  v850_elf_tcom_section.symbol_ptr_ptr = & v850_elf_tcom_symbol_ptr;\n-\t  v850_elf_tcom_symbol.name\t       = \".tcommon\";\n-\t  v850_elf_tcom_symbol.flags\t       = BSF_SECTION_SYM;\n-\t  v850_elf_tcom_symbol.section\t       = & v850_elf_tcom_section;\n-\t  v850_elf_tcom_symbol_ptr\t       = & v850_elf_tcom_symbol;\n-\t}\n       asym->section = & v850_elf_tcom_section;\n       asym->value = elfsym->internal_elf_sym.st_size;\n       break;\n \n     case SHN_V850_ZCOMMON:\n-      if (v850_elf_zcom_section.name == NULL)\n-\t{\n-\t  /* Initialize the zcommon section.  */\n-\t  v850_elf_zcom_section.name\t       = \".zcommon\";\n-\t  v850_elf_zcom_section.flags\t       = SEC_IS_COMMON | SEC_SMALL_DATA;\n-\t  v850_elf_zcom_section.output_section = & v850_elf_zcom_section;\n-\t  v850_elf_zcom_section.symbol\t       = & v850_elf_zcom_symbol;\n-\t  v850_elf_zcom_section.symbol_ptr_ptr = & v850_elf_zcom_symbol_ptr;\n-\t  v850_elf_zcom_symbol.name\t       = \".zcommon\";\n-\t  v850_elf_zcom_symbol.flags\t       = BSF_SECTION_SYM;\n-\t  v850_elf_zcom_symbol.section\t       = & v850_elf_zcom_section;\n-\t  v850_elf_zcom_symbol_ptr\t       = & v850_elf_zcom_symbol;\n-\t}\n       asym->section = & v850_elf_zcom_section;\n       asym->value = elfsym->internal_elf_sym.st_size;\n       break;"
    },
    {
      "sha": "fad1a0a07cefb0d7b572776f254cbd55c92e6185",
      "filename": "bfd/elf64-mmix.c",
      "status": "modified",
      "additions": 5,
      "deletions": 15,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/bfd/elf64-mmix.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/bfd/elf64-mmix.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-mmix.c?ref=7f3a18cfb58deb36e05469d94e7b9e48b19d90af",
      "patch": "@@ -2076,8 +2076,11 @@ mmix_elf_link_output_symbol_hook (struct bfd_link_info *info ATTRIBUTE_UNUSED,\n    formats (e.g. mmo) than for example a STT_REGISTER attribute.\n    This section faking is based on a construct in elf32-mips.c.  */\n static asection mmix_elf_reg_section;\n-static asymbol mmix_elf_reg_section_symbol;\n-static asymbol *mmix_elf_reg_section_symbol_ptr;\n+static const asymbol mmix_elf_reg_section_symbol =\n+  GLOBAL_SYM_INIT (MMIX_REG_SECTION_NAME, &mmix_elf_reg_section);\n+static asection mmix_elf_reg_section =\n+  BFD_FAKE_SECTION (mmix_elf_reg_section, &mmix_elf_reg_section_symbol,\n+\t\t    MMIX_REG_SECTION_NAME, 0, SEC_NO_FLAGS);\n \n /* Handle the special section numbers that a symbol may use.  */\n \n@@ -2090,19 +2093,6 @@ mmix_elf_symbol_processing (bfd *abfd ATTRIBUTE_UNUSED, asymbol *asym)\n   switch (elfsym->internal_elf_sym.st_shndx)\n     {\n     case SHN_REGISTER:\n-      if (mmix_elf_reg_section.name == NULL)\n-\t{\n-\t  /* Initialize the register section.  */\n-\t  mmix_elf_reg_section.name = MMIX_REG_SECTION_NAME;\n-\t  mmix_elf_reg_section.flags = SEC_NO_FLAGS;\n-\t  mmix_elf_reg_section.output_section = &mmix_elf_reg_section;\n-\t  mmix_elf_reg_section.symbol = &mmix_elf_reg_section_symbol;\n-\t  mmix_elf_reg_section.symbol_ptr_ptr = &mmix_elf_reg_section_symbol_ptr;\n-\t  mmix_elf_reg_section_symbol.name = MMIX_REG_SECTION_NAME;\n-\t  mmix_elf_reg_section_symbol.flags = BSF_SECTION_SYM;\n-\t  mmix_elf_reg_section_symbol.section = &mmix_elf_reg_section;\n-\t  mmix_elf_reg_section_symbol_ptr = &mmix_elf_reg_section_symbol;\n-\t}\n       asym->section = &mmix_elf_reg_section;\n       break;\n "
    },
    {
      "sha": "6d43d107428be6280356488c640a58e55e12247c",
      "filename": "bfd/elfxx-mips.c",
      "status": "modified",
      "additions": 10,
      "deletions": 30,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/bfd/elfxx-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/bfd/elfxx-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.c?ref=7f3a18cfb58deb36e05469d94e7b9e48b19d90af",
      "patch": "@@ -7058,15 +7058,21 @@ elf_mips_abi_name (bfd *abfd)\n    faster assembler code.  This is what we use for the small common\n    section.  This approach is copied from ecoff.c.  */\n static asection mips_elf_scom_section;\n-static asymbol mips_elf_scom_symbol;\n-static asymbol *mips_elf_scom_symbol_ptr;\n+static const asymbol mips_elf_scom_symbol =\n+  GLOBAL_SYM_INIT (\".scommon\", &mips_elf_scom_section);\n+static asection mips_elf_scom_section =\n+  BFD_FAKE_SECTION (mips_elf_scom_section, &mips_elf_scom_symbol,\n+\t\t    \".scommon\", 0, SEC_IS_COMMON | SEC_SMALL_DATA);\n \n /* MIPS ELF also uses an acommon section, which represents an\n    allocated common symbol which may be overridden by a\n    definition in a shared library.  */\n static asection mips_elf_acom_section;\n-static asymbol mips_elf_acom_symbol;\n-static asymbol *mips_elf_acom_symbol_ptr;\n+static const asymbol mips_elf_acom_symbol =\n+  GLOBAL_SYM_INIT (\".acommon\", &mips_elf_acom_section);\n+static asection mips_elf_acom_section =\n+  BFD_FAKE_SECTION (mips_elf_acom_section, &mips_elf_acom_symbol,\n+\t\t    \".acommon\", 0, SEC_ALLOC);\n \n /* This is used for both the 32-bit and the 64-bit ABI.  */\n \n@@ -7085,19 +7091,6 @@ _bfd_mips_elf_symbol_processing (bfd *abfd, asymbol *asym)\n \t either resolve these symbols to something in a shared\n \t library, or it can just leave them here.  For our purposes,\n \t we can consider these symbols to be in a new section.  */\n-      if (mips_elf_acom_section.name == NULL)\n-\t{\n-\t  /* Initialize the acommon section.  */\n-\t  mips_elf_acom_section.name = \".acommon\";\n-\t  mips_elf_acom_section.flags = SEC_ALLOC;\n-\t  mips_elf_acom_section.output_section = &mips_elf_acom_section;\n-\t  mips_elf_acom_section.symbol = &mips_elf_acom_symbol;\n-\t  mips_elf_acom_section.symbol_ptr_ptr = &mips_elf_acom_symbol_ptr;\n-\t  mips_elf_acom_symbol.name = \".acommon\";\n-\t  mips_elf_acom_symbol.flags = BSF_SECTION_SYM;\n-\t  mips_elf_acom_symbol.section = &mips_elf_acom_section;\n-\t  mips_elf_acom_symbol_ptr = &mips_elf_acom_symbol;\n-\t}\n       asym->section = &mips_elf_acom_section;\n       break;\n \n@@ -7110,19 +7103,6 @@ _bfd_mips_elf_symbol_processing (bfd *abfd, asymbol *asym)\n \tbreak;\n       /* Fall through.  */\n     case SHN_MIPS_SCOMMON:\n-      if (mips_elf_scom_section.name == NULL)\n-\t{\n-\t  /* Initialize the small common section.  */\n-\t  mips_elf_scom_section.name = \".scommon\";\n-\t  mips_elf_scom_section.flags = SEC_IS_COMMON | SEC_SMALL_DATA;\n-\t  mips_elf_scom_section.output_section = &mips_elf_scom_section;\n-\t  mips_elf_scom_section.symbol = &mips_elf_scom_symbol;\n-\t  mips_elf_scom_section.symbol_ptr_ptr = &mips_elf_scom_symbol_ptr;\n-\t  mips_elf_scom_symbol.name = \".scommon\";\n-\t  mips_elf_scom_symbol.flags = BSF_SECTION_SYM;\n-\t  mips_elf_scom_symbol.section = &mips_elf_scom_section;\n-\t  mips_elf_scom_symbol_ptr = &mips_elf_scom_symbol;\n-\t}\n       asym->section = &mips_elf_scom_section;\n       asym->value = elfsym->internal_elf_sym.st_size;\n       break;"
    },
    {
      "sha": "8cdf93b6a2e32367bc903c27f9b1c4194ec1824e",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=7f3a18cfb58deb36e05469d94e7b9e48b19d90af",
      "patch": "@@ -1,3 +1,8 @@\n+2020-12-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* ecoff.c (ecoff_frob_symbol): Rename scom_section to\n+\tecoff_scom_section, move to file scope and statically initialise.\n+\n 2020-12-16  Alan Modra  <amodra@gmail.com>\n \n \t* config/obj-elf.c (obj_elf_section): Don't set elf_osabi here."
    },
    {
      "sha": "b708f53dd1c60372cf3686980f3b2ad7acc1a803",
      "filename": "gas/ecoff.c",
      "status": "modified",
      "additions": 8,
      "deletions": 17,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/gas/ecoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7f3a18cfb58deb36e05469d94e7b9e48b19d90af/gas/ecoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ecoff.c?ref=7f3a18cfb58deb36e05469d94e7b9e48b19d90af",
      "patch": "@@ -3551,6 +3551,13 @@ ecoff_stab (segT sec ATTRIBUTE_UNUSED,\n   cur_file_ptr = save_file_ptr;\n }\n \f\n+static asection ecoff_scom_section;\n+static const asymbol ecoff_scom_symbol =\n+  GLOBAL_SYM_INIT (SCOMMON, &ecoff_scom_section);\n+static asection ecoff_scom_section =\n+  BFD_FAKE_SECTION (ecoff_scom_section, &ecoff_scom_symbol,\n+\t\t    SCOMMON, 0, SEC_IS_COMMON | SEC_SMALL_DATA);\n+\n /* Frob an ECOFF symbol.  Small common symbols go into a special\n    .scommon section rather than bfd_com_section.  */\n \n@@ -3561,23 +3568,7 @@ ecoff_frob_symbol (symbolS *sym)\n       && S_GET_VALUE (sym) > 0\n       && S_GET_VALUE (sym) <= bfd_get_gp_size (stdoutput))\n     {\n-      static asection scom_section;\n-      static asymbol scom_symbol;\n-\n-      /* We must construct a fake section similar to bfd_com_section\n-         but with the name .scommon.  */\n-      if (scom_section.name == NULL)\n-\t{\n-\t  scom_section = *bfd_com_section_ptr;\n-\t  scom_section.name = \".scommon\";\n-\t  scom_section.output_section = &scom_section;\n-\t  scom_section.symbol = &scom_symbol;\n-\t  scom_section.symbol_ptr_ptr = &scom_section.symbol;\n-\t  scom_symbol = *bfd_com_section_ptr->symbol;\n-\t  scom_symbol.name = \".scommon\";\n-\t  scom_symbol.section = &scom_section;\n-\t}\n-      S_SET_SEGMENT (sym, &scom_section);\n+      S_SET_SEGMENT (sym, &ecoff_scom_section);\n     }\n \n   /* Double check weak symbols.  */"
    }
  ]
}