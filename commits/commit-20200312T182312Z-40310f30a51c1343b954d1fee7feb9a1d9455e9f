{
  "sha": "40310f30a51c1343b954d1fee7feb9a1d9455e9f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDAzMTBmMzBhNTFjMTM0M2I5NTRkMWZlZTdmZWI5YTFkOTQ1NWU5Zg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-03-12T18:22:23Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-03-12T18:23:12Z"
    },
    "message": "gdb: make gdb.arch/amd64-disp-step-avx.exp actually test displaced stepping\n\nThe test gdb.arch/amd64-disp-step-avx.exp is meant to test that doing a\ndisplaced step of an AVX instruction works correctly.  However, I found\n(by pure coincidence) that the test instructions are not actually\ndisplaced stepped.  Rather, they are inline-stepped, so the test is not\nactually testing what it's meant to test.\n\nThis is what a portion of the test binary looks like:\n\n    0000000000400180 <_start>:\n      400180:       90                      nop\n\n    0000000000400181 <main>:\n      400181:       90                      nop\n\n    0000000000400182 <test_rip_vex2>:\n      400182:       c5 fb 10 05 0e 00 00    vmovsd 0xe(%rip),%xmm0        # 400198 <ro_var>\n      400189:       00\n\n    000000000040018a <test_rip_vex2_end>:\n      40018a:       90                      nop\n\nThe instruction at 0x400182 is the one we want to test a displaced step\nfor.  A breakpoint is placed at 0x400182 and ran to.  The execution is\nthen resumed from there, forcing a step-over (which should normally be a\ndisplaced step) of the breakpoint.\n\nHowever, the displaced stepping buffer is at the _start label, and that\nmeans a breakpoint is present in the displaced stepping buffer.  The\nbreakpoint_in_range_p check in displaced_step_prepare_throw evaluates to\ntrue, which makes displaced_step_prepare_throw fail, forcing GDB to fall\nback on an in-line step.\n\nThis can be easily observed by placing a `gdb_assert (false)` inside the\nbreakpoint_in_range_p condition, in displaced_step_prepare_throw, and\nrunning gdb.arch/amd64-disp-step-avx.exp.  The assertion will make the\ntest fail.\n\nThe proposed fix is to pad `_start` with a bunch of nops so that the\ntest instruction is out of the displaced step buffer.\n\nI also think it would be good to enhance the test to make sure that we\nare testing displaced stepping as intended.  I did that by enabling \"set\ndebug displaced on\" while we step over the interesting instruction, and\nmatching a message printed only when a displaced step is executed.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.arch/amd64-disp-step-avx.S: Add nops after _start.\n\t* gdb.arch/amd64-disp-step-avx.exp: Enable \"set debug displaced\n\ton\" while stepping over the test instruction, match printed\n\tmessage.",
    "tree": {
      "sha": "97982fbb31fe0b13a05a9411befc81ae4d68c333",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/97982fbb31fe0b13a05a9411befc81ae4d68c333"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/40310f30a51c1343b954d1fee7feb9a1d9455e9f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/40310f30a51c1343b954d1fee7feb9a1d9455e9f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/40310f30a51c1343b954d1fee7feb9a1d9455e9f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/40310f30a51c1343b954d1fee7feb9a1d9455e9f/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "272cd5a31e7ff16fe46a5532e857b98229404c48",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/272cd5a31e7ff16fe46a5532e857b98229404c48",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/272cd5a31e7ff16fe46a5532e857b98229404c48"
    }
  ],
  "stats": {
    "total": 20,
    "additions": 19,
    "deletions": 1
  },
  "files": [
    {
      "sha": "48588a391bbc576f88e39b8a9b8c7395c6bc1e69",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/40310f30a51c1343b954d1fee7feb9a1d9455e9f/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/40310f30a51c1343b954d1fee7feb9a1d9455e9f/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=40310f30a51c1343b954d1fee7feb9a1d9455e9f",
      "patch": "@@ -1,3 +1,10 @@\n+2020-03-12  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdb.arch/amd64-disp-step-avx.S: Add nops after _start.\n+\t* gdb.arch/amd64-disp-step-avx.exp: Enable \"set debug displaced\n+\ton\" while stepping over the test instruction, match printed\n+\tmessage.\n+\n 2020-03-12  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.base/info-types.exp: Use exp_continue during matching of output"
    },
    {
      "sha": "c72f6a5ca89bf758f51270f21b9b97eb75610cd3",
      "filename": "gdb/testsuite/gdb.arch/amd64-disp-step-avx.S",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/40310f30a51c1343b954d1fee7feb9a1d9455e9f/gdb/testsuite/gdb.arch/amd64-disp-step-avx.S",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/40310f30a51c1343b954d1fee7feb9a1d9455e9f/gdb/testsuite/gdb.arch/amd64-disp-step-avx.S",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/amd64-disp-step-avx.S?ref=40310f30a51c1343b954d1fee7feb9a1d9455e9f",
      "patch": "@@ -22,7 +22,12 @@\n \n \t.global _start,main\n _start:\n+\t# The area at _start is used as the displaced stepping buffer.  Put\n+\t# more than enough nop instructions so that the instructions under test\n+\t# below don't conflict with it.\n+\t.rept 200\n \tnop\n+\t.endr\n main:\n         nop\n "
    },
    {
      "sha": "ab83fe6770a52afbada61a79677a20f2d8b80c6a",
      "filename": "gdb/testsuite/gdb.arch/amd64-disp-step-avx.exp",
      "status": "modified",
      "additions": 7,
      "deletions": 1,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/40310f30a51c1343b954d1fee7feb9a1d9455e9f/gdb/testsuite/gdb.arch/amd64-disp-step-avx.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/40310f30a51c1343b954d1fee7feb9a1d9455e9f/gdb/testsuite/gdb.arch/amd64-disp-step-avx.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/amd64-disp-step-avx.exp?ref=40310f30a51c1343b954d1fee7feb9a1d9455e9f",
      "patch": "@@ -92,10 +92,16 @@ proc disp_step_func { func } {\n     set value \"0xdeadbeefd3adb33f\"\n     set_regs $value\n \n+    # Turn \"debug displaced\" on to make sure a displaced step is actually\n+    # executed, not an inline step.\n+    gdb_test_no_output \"set debug displaced on\"\n+\n     gdb_test \"continue\" \\\n-\t\"Continuing.*Breakpoint.*, ${test_end_label} ().*\" \\\n+\t\"Continuing.*displaced: displaced pc to.*Breakpoint.*, ${test_end_label} ().*\" \\\n \t\"continue to ${test_end_label}\"\n \n+    gdb_test_no_output \"set debug displaced off\"\n+\n     verify_regs $value\n }\n "
    }
  ]
}