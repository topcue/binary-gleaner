{
  "sha": "8f570d62882debe92524fff4f847dbdbe90fb5b9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGY1NzBkNjI4ODJkZWJlOTI1MjRmZmY0Zjg0N2RiZGJlOTBmYjViOQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-06-25T07:31:50Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-06-25T07:31:50Z"
    },
    "message": "x86: make J disassembler macro available for new use\n\nThere's clearly a shortage of available macro characters, as can be seen\nfrom the various two-character macros that had to be introduced. Don't\nwaste characters for things that can be expressed differently. In the\ncase of J this alternative is {l|}.",
    "tree": {
      "sha": "edb096454618f0703cd71c869732e666610278ba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/edb096454618f0703cd71c869732e666610278ba"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8f570d62882debe92524fff4f847dbdbe90fb5b9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8f570d62882debe92524fff4f847dbdbe90fb5b9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8f570d62882debe92524fff4f847dbdbe90fb5b9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8f570d62882debe92524fff4f847dbdbe90fb5b9/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "464dc4af9ab34e1482fb4ab47019a0972665505c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/464dc4af9ab34e1482fb4ab47019a0972665505c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/464dc4af9ab34e1482fb4ab47019a0972665505c"
    }
  ],
  "stats": {
    "total": 25,
    "additions": 13,
    "deletions": 12
  },
  "files": [
    {
      "sha": "f36ee55612aeb90f56319e1437631b5106fe4497",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8f570d62882debe92524fff4f847dbdbe90fb5b9/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8f570d62882debe92524fff4f847dbdbe90fb5b9/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=8f570d62882debe92524fff4f847dbdbe90fb5b9",
      "patch": "@@ -1,3 +1,9 @@\n+2020-06-25  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-dis.c: Adjust description of J macro.\n+\t(dis386, x86_64_table, mod_table): Replace J.\n+\t(putop): Remove handling of J.\n+\n 2020-06-25  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-dis.c: (float_mem): Reduce alternatives for fstpt and fldpt."
    },
    {
      "sha": "8964832ad2d2e01cce5432d25bce3734dfe68053",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 7,
      "deletions": 12,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8f570d62882debe92524fff4f847dbdbe90fb5b9/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8f570d62882debe92524fff4f847dbdbe90fb5b9/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=8f570d62882debe92524fff4f847dbdbe90fb5b9",
      "patch": "@@ -2252,7 +2252,7 @@ struct dis386 {\n    'H' => print \",pt\" or \",pn\" branch hint\n    'I' => honor following macro letter even in Intel mode (implemented only\n \t  for some of the macro letters)\n-   'J' => print 'l'\n+   'J' unused.\n    'K' => print 'd' or 'q' if rex prefix is present.\n    'L' => print 'l' if suffix_always is true\n    'M' => print 'r' if intel_mnemonic is false.\n@@ -2536,8 +2536,8 @@ static const struct dis386 dis386[] = {\n   /* c8 */\n   { \"enterT\",\t\t{ Iw, Ib }, 0 },\n   { \"leaveT\",\t\t{ XX }, 0 },\n-  { \"Jret{|f}P\",\t{ Iw }, 0 },\n-  { \"Jret{|f}P\",\t{ XX }, 0 },\n+  { \"{l|}ret{|f}P\",\t{ Iw }, 0 },\n+  { \"{l|}ret{|f}P\",\t{ XX }, 0 },\n   { \"int3\",\t\t{ XX }, 0 },\n   { \"int\",\t\t{ Ib }, 0 },\n   { X86_64_TABLE (X86_64_CE) },\n@@ -6857,7 +6857,7 @@ static const struct dis386 x86_64_table[][2] = {\n \n   /* X86_64_9A */\n   {\n-    { \"Jcall{T|}\", { Ap }, 0 },\n+    { \"{l|}call{T|}\", { Ap }, 0 },\n   },\n \n   /* X86_64_C2 */\n@@ -6913,7 +6913,7 @@ static const struct dis386 x86_64_table[][2] = {\n \n   /* X86_64_EA */\n   {\n-    { \"Jjmp{T|}\", { Ap }, 0 },\n+    { \"{l|}jmp{T|}\", { Ap }, 0 },\n   },\n \n   /* X86_64_0F01_REG_0 */\n@@ -10180,11 +10180,11 @@ static const struct dis386 mod_table[][2] = {\n   },\n   {\n     /* MOD_FF_REG_3 */\n-    { \"Jcall^\", { indirEp }, 0 },\n+    { \"{l|}call^\", { indirEp }, 0 },\n   },\n   {\n     /* MOD_FF_REG_5 */\n-    { \"Jjmp^\", { indirEp }, 0 },\n+    { \"{l|}jmp^\", { indirEp }, 0 },\n   },\n   {\n     /* MOD_0F01_REG_0 */\n@@ -12867,11 +12867,6 @@ putop (const char *in_template, int sizeflag)\n \t\t*obufp++ = 'n';\n \t    }\n \t  break;\n-\tcase 'J':\n-\t  if (intel_syntax)\n-\t    break;\n-\t  *obufp++ = 'l';\n-\t  break;\n \tcase 'K':\n \t  USED_REX (REX_W);\n \t  if (rex & REX_W)"
    }
  ]
}