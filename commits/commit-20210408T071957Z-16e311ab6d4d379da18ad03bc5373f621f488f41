{
  "sha": "16e311ab6d4d379da18ad03bc5373f621f488f41",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTZlMzExYWI2ZDRkMzc5ZGExOGFkMDNiYzUzNzNmNjIxZjQ4OGY0MQ==",
  "commit": {
    "author": {
      "name": "Felix Willgerodt",
      "email": "felix.willgerodt@intel.com",
      "date": "2021-04-08T07:16:15Z"
    },
    "committer": {
      "name": "Felix Willgerodt",
      "email": "felix.willgerodt@intel.com",
      "date": "2021-04-08T07:19:57Z"
    },
    "message": "gdb: Allow prologue detection via symbols for Intel compilers.\n\nThe next-gen Intel Fortran compiler isn't flang-based, but emits\nprologue_end in the same manner.  As do the newer Intel C/C++ compilers.\nThis allows prologue detection based on dwarf for all newer Intel compilers.\nThe cut-off version was not chosen for any specific reason other than the\neffort to test this.\n\ngdb/Changelog:\n2021-04-08  Felix Willgerodt  <felix.willgerodt@intel.com>\n\n    \t* i386-tdep.c (i386_skip_prologue): Use symbol table to find the\n    \tprologue end for Intel compilers.\n    \t* amd64-tdep.c (amd64_skip_prologue): Likewise.\n    \t* producer.c (producer_is_icc_ge_19): New function.\n    \t* producer.h (producer_is_icc_ge_19): New declaration.",
    "tree": {
      "sha": "afa98eda1ca8835ff0f8181b360777be8fab8451",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/afa98eda1ca8835ff0f8181b360777be8fab8451"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/16e311ab6d4d379da18ad03bc5373f621f488f41",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/16e311ab6d4d379da18ad03bc5373f621f488f41",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/16e311ab6d4d379da18ad03bc5373f621f488f41",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/16e311ab6d4d379da18ad03bc5373f621f488f41/comments",
  "author": {
    "login": "felix-willgerodt",
    "id": 68062808,
    "node_id": "MDQ6VXNlcjY4MDYyODA4",
    "avatar_url": "https://avatars.githubusercontent.com/u/68062808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/felix-willgerodt",
    "html_url": "https://github.com/felix-willgerodt",
    "followers_url": "https://api.github.com/users/felix-willgerodt/followers",
    "following_url": "https://api.github.com/users/felix-willgerodt/following{/other_user}",
    "gists_url": "https://api.github.com/users/felix-willgerodt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/felix-willgerodt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/felix-willgerodt/subscriptions",
    "organizations_url": "https://api.github.com/users/felix-willgerodt/orgs",
    "repos_url": "https://api.github.com/users/felix-willgerodt/repos",
    "events_url": "https://api.github.com/users/felix-willgerodt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/felix-willgerodt/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "felix-willgerodt",
    "id": 68062808,
    "node_id": "MDQ6VXNlcjY4MDYyODA4",
    "avatar_url": "https://avatars.githubusercontent.com/u/68062808?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/felix-willgerodt",
    "html_url": "https://github.com/felix-willgerodt",
    "followers_url": "https://api.github.com/users/felix-willgerodt/followers",
    "following_url": "https://api.github.com/users/felix-willgerodt/following{/other_user}",
    "gists_url": "https://api.github.com/users/felix-willgerodt/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/felix-willgerodt/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/felix-willgerodt/subscriptions",
    "organizations_url": "https://api.github.com/users/felix-willgerodt/orgs",
    "repos_url": "https://api.github.com/users/felix-willgerodt/repos",
    "events_url": "https://api.github.com/users/felix-willgerodt/events{/privacy}",
    "received_events_url": "https://api.github.com/users/felix-willgerodt/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fbb3bcfcd8810ecf25a47e71c2f7d46d7a74a6be",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbb3bcfcd8810ecf25a47e71c2f7d46d7a74a6be",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fbb3bcfcd8810ecf25a47e71c2f7d46d7a74a6be"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 33,
    "deletions": 8
  },
  "files": [
    {
      "sha": "e2fd9122017390d45d7572f28a5e33467b14f426",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/16e311ab6d4d379da18ad03bc5373f621f488f41/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/16e311ab6d4d379da18ad03bc5373f621f488f41/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=16e311ab6d4d379da18ad03bc5373f621f488f41",
      "patch": "@@ -1,3 +1,11 @@\n+2021-04-08  Felix Willgerodt  <felix.willgerodt@intel.com>\n+\n+\t* i386-tdep.c (i386_skip_prologue): Use symbol table to find the\n+\tprologue end for Intel compilers.\n+\t* amd64-tdep.c (amd64_skip_prologue): Likewise.\n+\t* producer.c (producer_is_icc_ge_19): New function.\n+\t* producer.h (producer_is_icc_ge_19): New declaration.\n+\n 2021-04-08  Felix Willgerodt  <felix.willgerodt@intel.com>\n \n \t* producer.c: (producer_is_icc): Update for new version scheme."
    },
    {
      "sha": "66a7c02f53403a608122d677f5bd14aeb8df74ee",
      "filename": "gdb/amd64-tdep.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/16e311ab6d4d379da18ad03bc5373f621f488f41/gdb/amd64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/16e311ab6d4d379da18ad03bc5373f621f488f41/gdb/amd64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-tdep.c?ref=16e311ab6d4d379da18ad03bc5373f621f488f41",
      "patch": "@@ -2527,13 +2527,14 @@ amd64_skip_prologue (struct gdbarch *gdbarch, CORE_ADDR start_pc)\n       struct compunit_symtab *cust = find_pc_compunit_symtab (func_addr);\n \n       /* LLVM backend (Clang/Flang) always emits a line note before the\n-\t prologue and another one after.  We trust clang to emit usable\n-\t line notes.  */\n+\t prologue and another one after.  We trust clang and newer Intel\n+\t compilers to emit usable line notes.  */\n       if (post_prologue_pc\n \t  && (cust != NULL\n \t      && COMPUNIT_PRODUCER (cust) != NULL\n-\t      && producer_is_llvm (COMPUNIT_PRODUCER (cust))))\n-\treturn std::max (start_pc, post_prologue_pc);\n+\t      && (producer_is_llvm (COMPUNIT_PRODUCER (cust))\n+\t      || producer_is_icc_ge_19 (COMPUNIT_PRODUCER (cust)))))\n+        return std::max (start_pc, post_prologue_pc);\n     }\n \n   amd64_init_frame_cache (&cache);"
    },
    {
      "sha": "50fd2767a18292a0dbc21222c8929c768acb835e",
      "filename": "gdb/i386-tdep.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/16e311ab6d4d379da18ad03bc5373f621f488f41/gdb/i386-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/16e311ab6d4d379da18ad03bc5373f621f488f41/gdb/i386-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.c?ref=16e311ab6d4d379da18ad03bc5373f621f488f41",
      "patch": "@@ -1847,13 +1847,14 @@ i386_skip_prologue (struct gdbarch *gdbarch, CORE_ADDR start_pc)\n       struct compunit_symtab *cust = find_pc_compunit_symtab (func_addr);\n \n       /* LLVM backend (Clang/Flang) always emits a line note before the\n-\t prologue and another one after.  We trust clang to emit usable\n-\t line notes.  */\n+\t prologue and another one after.  We trust clang and newer Intel\n+\t compilers to emit usable line notes.  */\n       if (post_prologue_pc\n \t  && (cust != NULL\n \t      && COMPUNIT_PRODUCER (cust) != NULL\n-\t      && producer_is_llvm (COMPUNIT_PRODUCER (cust))))\n-\treturn std::max (start_pc, post_prologue_pc);\n+\t      && (producer_is_llvm (COMPUNIT_PRODUCER (cust))\n+\t      || producer_is_icc_ge_19 (COMPUNIT_PRODUCER (cust)))))\n+        return std::max (start_pc, post_prologue_pc);\n     }\n  \n   cache.locals = -1;"
    },
    {
      "sha": "591509fa85c18e62c6b8360b0eac42e15480817a",
      "filename": "gdb/producer.c",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/16e311ab6d4d379da18ad03bc5373f621f488f41/gdb/producer.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/16e311ab6d4d379da18ad03bc5373f621f488f41/gdb/producer.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/producer.c?ref=16e311ab6d4d379da18ad03bc5373f621f488f41",
      "patch": "@@ -73,6 +73,18 @@ producer_is_gcc (const char *producer, int *major, int *minor)\n   return 0;\n }\n \n+/* See producer.h.  */\n+\n+bool\n+producer_is_icc_ge_19 (const char *producer)\n+{\n+  int major, minor;\n+\n+  if (! producer_is_icc (producer, &major, &minor))\n+    return false;\n+\n+  return major >= 19;\n+}\n \n /* See producer.h.  */\n "
    },
    {
      "sha": "d08062e3e6d00f08b8e9d174621da9d9dc731899",
      "filename": "gdb/producer.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/16e311ab6d4d379da18ad03bc5373f621f488f41/gdb/producer.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/16e311ab6d4d379da18ad03bc5373f621f488f41/gdb/producer.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/producer.h?ref=16e311ab6d4d379da18ad03bc5373f621f488f41",
      "patch": "@@ -30,6 +30,9 @@ extern int producer_is_gcc_ge_4 (const char *producer);\n    is NULL or it isn't GCC.  */\n extern int producer_is_gcc (const char *producer, int *major, int *minor);\n \n+/* Check for Intel compilers >= 19.0.  */\n+extern bool producer_is_icc_ge_19 (const char *producer);\n+\n /* Returns true if the given PRODUCER string is Intel or false\n    otherwise.  Sets the MAJOR and MINOR versions when not NULL.  */\n extern bool producer_is_icc (const char *producer, int *major, int *minor);"
    }
  ]
}