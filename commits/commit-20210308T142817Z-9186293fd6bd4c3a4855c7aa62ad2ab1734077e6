{
  "sha": "9186293fd6bd4c3a4855c7aa62ad2ab1734077e6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTE4NjI5M2ZkNmJkNGMzYTQ4NTVjN2FhNjJhZDJhYjE3MzQwNzdlNg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:17Z"
    },
    "message": "Introduce ternop_cond_operation\n\nThis adds class ternop_cond_operation, which implements TERNOP_COND.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expop.h (class ternop_cond_operation): New.\n\t* ax-gdb.c (ternop_cond_operation::do_generate_ax): New method.",
    "tree": {
      "sha": "96b8629642559901874a0b406eb729307c82a379",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/96b8629642559901874a0b406eb729307c82a379"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9186293fd6bd4c3a4855c7aa62ad2ab1734077e6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9186293fd6bd4c3a4855c7aa62ad2ab1734077e6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9186293fd6bd4c3a4855c7aa62ad2ab1734077e6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9186293fd6bd4c3a4855c7aa62ad2ab1734077e6/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1594e0bb3d35b05aa53519f08021fb15bf26f1dc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1594e0bb3d35b05aa53519f08021fb15bf26f1dc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1594e0bb3d35b05aa53519f08021fb15bf26f1dc"
    }
  ],
  "stats": {
    "total": 65,
    "additions": 65,
    "deletions": 0
  },
  "files": [
    {
      "sha": "5eb9dcac3e9fcfa305d9398b6356cbbbc70a1f3d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9186293fd6bd4c3a4855c7aa62ad2ab1734077e6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9186293fd6bd4c3a4855c7aa62ad2ab1734077e6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9186293fd6bd4c3a4855c7aa62ad2ab1734077e6",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expop.h (class ternop_cond_operation): New.\n+\t* ax-gdb.c (ternop_cond_operation::do_generate_ax): New method.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (class ternop_slice_operation): New."
    },
    {
      "sha": "87aa2107872dcfdd3d86b771eef395cefb12e965",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9186293fd6bd4c3a4855c7aa62ad2ab1734077e6/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9186293fd6bd4c3a4855c7aa62ad2ab1734077e6/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=9186293fd6bd4c3a4855c7aa62ad2ab1734077e6",
      "patch": "@@ -2390,6 +2390,35 @@ internalvar_operation::do_generate_ax (struct expression *exp,\n \t     \"expressions cannot use convenience variables.\"), name);\n }\n \n+void\n+ternop_cond_operation::do_generate_ax (struct expression *exp,\n+\t\t\t\t       struct agent_expr *ax,\n+\t\t\t\t       struct axs_value *value,\n+\t\t\t\t       struct type *cast_type)\n+{\n+  struct axs_value value1, value2, value3;\n+  int if1, end;\n+\n+  std::get<0> (m_storage)->generate_ax (exp, ax, &value1);\n+  gen_usual_unary (ax, &value1);\n+  /* For (A ? B : C), it's easiest to generate subexpression\n+     bytecodes in order, but if_goto jumps on true, so we invert\n+     the sense of A.  Then we can do B by dropping through, and\n+     jump to do C.  */\n+  gen_logical_not (ax, &value1, builtin_type (ax->gdbarch)->builtin_int);\n+  if1 = ax_goto (ax, aop_if_goto);\n+  std::get<1> (m_storage)->generate_ax (exp, ax, &value2);\n+  gen_usual_unary (ax, &value2);\n+  end = ax_goto (ax, aop_goto);\n+  ax_label (ax, if1, ax->len);\n+  std::get<2> (m_storage)->generate_ax (exp, ax, &value3);\n+  gen_usual_unary (ax, &value3);\n+  ax_label (ax, end, ax->len);\n+  /* This is arbitrary - what if B and C are incompatible types? */\n+  value->type = value2.type;\n+  value->kind = value2.kind;\n+}\n+\n }\n \n /* This handles the middle-to-right-side of code generation for binary"
    },
    {
      "sha": "0f5b5042c10295d57edefc9060f7396ec2a8664e",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9186293fd6bd4c3a4855c7aa62ad2ab1734077e6/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9186293fd6bd4c3a4855c7aa62ad2ab1734077e6/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=9186293fd6bd4c3a4855c7aa62ad2ab1734077e6",
      "patch": "@@ -734,6 +734,37 @@ class ternop_slice_operation\n   { return TERNOP_SLICE; }\n };\n \n+class ternop_cond_operation\n+  : public maybe_constant_operation<operation_up, operation_up, operation_up>\n+{\n+public:\n+\n+  using maybe_constant_operation::maybe_constant_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    struct value *val\n+      = std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n+\n+    if (value_logical_not (val))\n+      return std::get<2> (m_storage)->evaluate (nullptr, exp, noside);\n+    return std::get<1> (m_storage)->evaluate (nullptr, exp, noside);\n+  }\n+\n+  enum exp_opcode opcode () const override\n+  { return TERNOP_COND; }\n+\n+protected:\n+\n+  void do_generate_ax (struct expression *exp,\n+\t\t       struct agent_expr *ax,\n+\t\t       struct axs_value *value,\n+\t\t       struct type *cast_type)\n+    override;\n+};\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    }
  ]
}