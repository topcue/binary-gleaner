{
  "sha": "539b54f03dd082c572308246e610e516ff96b5b1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTM5YjU0ZjAzZGQwODJjNTcyMzA4MjQ2ZTYxMGU1MTZmZjk2YjViMQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-06-18T08:54:43Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-06-19T01:38:00Z"
    },
    "message": "dwarf.c: string_fortify.h strncpy error\n\nIn function 'strncpy',\n    inlined from 'display_debug_lines_decoded' at /home/alan/src/binutils-gdb/binutils/dwarf.c:5434:5,\n    inlined from 'display_debug_lines' at /home/alan/src/binutils-gdb/binutils/dwarf.c:5567:21:\n/usr/include/bits/string_fortified.h:95:10: error: '__builtin_strncpy' specified bound 36 equals destination size [-Werror=stringop-truncation]\n\nNo need for strncpy here, the string being copied always fits the\ndestination buffer.\n\n\t* dwarf.c (display_debug_lines_decoded): Use memcpy rather than\n\tstrncpy when trimming file name length to MAX_FILENAME_LENGTH.\n\tDon't make an unnecessary copy when length is good.",
    "tree": {
      "sha": "d5c7eb8cc110c302581899452756974d75e70e39",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d5c7eb8cc110c302581899452756974d75e70e39"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/539b54f03dd082c572308246e610e516ff96b5b1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/539b54f03dd082c572308246e610e516ff96b5b1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/539b54f03dd082c572308246e610e516ff96b5b1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/539b54f03dd082c572308246e610e516ff96b5b1/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8ee63c615688aeb997d01129a037068e606351bd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8ee63c615688aeb997d01129a037068e606351bd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8ee63c615688aeb997d01129a037068e606351bd"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 14,
    "deletions": 16
  },
  "files": [
    {
      "sha": "c6a05ca6b3eea50d45a32496e617269103db3422",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/539b54f03dd082c572308246e610e516ff96b5b1/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/539b54f03dd082c572308246e610e516ff96b5b1/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=539b54f03dd082c572308246e610e516ff96b5b1",
      "patch": "@@ -1,3 +1,9 @@\n+2021-06-19  Alan Modra  <amodra@gmail.com>\n+\n+\t* dwarf.c (display_debug_lines_decoded): Use memcpy rather than\n+\tstrncpy when trimming file name length to MAX_FILENAME_LENGTH.\n+\tDon't make an unnecessary copy when length is good.\n+\n 2021-06-18  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* readelf.c (print_gnu_property_note): Handle"
    },
    {
      "sha": "a57f0dab6b268c9326a18d9e9997544a4c74eb63",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 8,
      "deletions": 16,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/539b54f03dd082c572308246e610e516ff96b5b1/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/539b54f03dd082c572308246e610e516ff96b5b1/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=539b54f03dd082c572308246e610e516ff96b5b1",
      "patch": "@@ -5426,31 +5426,22 @@ display_debug_lines_decoded (struct dwarf_section *  section,\n \t\tfileName = _(\"<unknown>\");\n \n \t      fileNameLength = strlen (fileName);\n-\n-\t      if ((fileNameLength > MAX_FILENAME_LENGTH) && (!do_wide))\n+\t      newFileName = fileName;\n+\t      if (fileNameLength > MAX_FILENAME_LENGTH && !do_wide)\n \t\t{\n \t\t  newFileName = (char *) xmalloc (MAX_FILENAME_LENGTH + 1);\n \t\t  /* Truncate file name */\n-\t\t  strncpy (newFileName,\n-\t\t\t   fileName + fileNameLength - MAX_FILENAME_LENGTH,\n-\t\t\t   MAX_FILENAME_LENGTH + 1);\n-\t\t  /* FIXME: This is to pacify gcc-10 which can warn that the\n-\t\t     strncpy above might leave a non-NUL terminated string\n-\t\t     in newFileName.  It won't, but gcc's analysis doesn't\n-\t\t     quite go far enough to discover this.  */\n+\t\t  memcpy (newFileName,\n+\t\t\t  fileName + fileNameLength - MAX_FILENAME_LENGTH,\n+\t\t\t  MAX_FILENAME_LENGTH);\n \t\t  newFileName[MAX_FILENAME_LENGTH] = 0;\n \t\t}\n-\t      else\n-\t\t{\n-\t\t  newFileName = (char *) xmalloc (fileNameLength + 1);\n-\t\t  strncpy (newFileName, fileName, fileNameLength + 1);\n-\t\t}\n \n \t      /* A row with end_seq set to true has a meaningful address, but\n \t\t the other information in the same row is not significant.\n \t\t In such a row, print line as \"-\", and don't print\n \t\t view/is_stmt.  */\n-\t      if (!do_wide || (fileNameLength <= MAX_FILENAME_LENGTH))\n+\t      if (!do_wide || fileNameLength <= MAX_FILENAME_LENGTH)\n \t\t{\n \t\t  if (linfo.li_max_ops_per_insn == 1)\n \t\t    {\n@@ -5525,7 +5516,8 @@ display_debug_lines_decoded (struct dwarf_section *  section,\n \t\t  putchar ('\\n');\n \t\t}\n \n-\t      free (newFileName);\n+\t      if (newFileName != fileName)\n+\t\tfree (newFileName);\n \t    }\n \t}\n "
    }
  ]
}