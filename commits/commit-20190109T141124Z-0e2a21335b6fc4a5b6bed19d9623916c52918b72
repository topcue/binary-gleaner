{
  "sha": "0e2a21335b6fc4a5b6bed19d9623916c52918b72",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGUyYTIxMzM1YjZmYzRhNWI2YmVkMTlkOTYyMzkxNmM1MjkxOGI3Mg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-07T07:26:35Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-09T14:11:24Z"
    },
    "message": "gdb: Avoid signed integer overflow when printing source lines\n\nWhen printing source lines with calls to print_source_lines we need to\npass a start line number and an end line number.  The end line number\nis calculated by calling get_lines_to_list and adding this value to\nthe start line number.  For example this code from list_command:\n\n    print_source_lines (cursal.symtab, first,\n                        first + get_lines_to_list (), 0);\n\nThe problem is that get_lines_to_list returns a value based on the\nGDB setting `set listsize LISTSIZE`.  By default LISTSIZE is 10,\nhowever, its also possible to set LISTSIZE to unlimited, in which\ncase get_lines_to_list will return INT_MAX.\n\nAs the parameter signature for print_source_lines is:\n\n  void print_source_lines (struct symtab *, int, int,\n                           print_source_lines_flags);\n\nand `first` in the above code is an `int`, then when LISTSIZE is\n`unlimited` the above code will result in signed integer overflow,\nwhich is undefined.\n\nThe solution in this patch is a new class source_lines_range that can\nbe constructed from a single line number and a direction (forward or\nbackward).  The range is then constructed from the line number and the\nvalue of get_lines_to_list.\n\ngdb/ChangeLog:\n\n\t* cli/cli-cmds.c (list_command): Pass a source_lines_range to\n\tprint_source_lines.\n\t* source.c (print_source_lines_base): Update line number check.\n\t(print_source_lines): New function.\n\t(source_lines_range::source_lines_range): New function.\n\t* source.h (class source_lines_range): New class.\n\t(print_source_lines): New declaration.",
    "tree": {
      "sha": "d476440be29fbef1a438b80788c5cb30d94011a5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d476440be29fbef1a438b80788c5cb30d94011a5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0e2a21335b6fc4a5b6bed19d9623916c52918b72",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0e2a21335b6fc4a5b6bed19d9623916c52918b72",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0e2a21335b6fc4a5b6bed19d9623916c52918b72",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0e2a21335b6fc4a5b6bed19d9623916c52918b72/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8379fac67e963e0d12649c58f79d52824a7eafdf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8379fac67e963e0d12649c58f79d52824a7eafdf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8379fac67e963e0d12649c58f79d52824a7eafdf"
    }
  ],
  "stats": {
    "total": 141,
    "additions": 115,
    "deletions": 26
  },
  "files": [
    {
      "sha": "c89c86be4e7d7eea094b63b9472b9d995dd21ecf",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e2a21335b6fc4a5b6bed19d9623916c52918b72/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e2a21335b6fc4a5b6bed19d9623916c52918b72/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0e2a21335b6fc4a5b6bed19d9623916c52918b72",
      "patch": "@@ -1,3 +1,13 @@\n+2019-01-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* cli/cli-cmds.c (list_command): Pass a source_lines_range to\n+\tprint_source_lines.\n+\t* source.c (print_source_lines_base): Update line number check.\n+\t(print_source_lines): New function.\n+\t(source_lines_range::source_lines_range): New function.\n+\t* source.h (class source_lines_range): New class.\n+\t(print_source_lines): New declaration.\n+\n 2019-01-09  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* linespec.c (linespec_state_destructor): Free self->canonical_names."
    },
    {
      "sha": "57cfad441c9a1270f05dc1d248e95f20e4e2ea50",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 16,
      "deletions": 19,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e2a21335b6fc4a5b6bed19d9623916c52918b72/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e2a21335b6fc4a5b6bed19d9623916c52918b72/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=0e2a21335b6fc4a5b6bed19d9623916c52918b72",
      "patch": "@@ -895,14 +895,13 @@ list_command (const char *arg, int from_tty)\n \t      && get_lines_to_list () == 1 && first > 1)\n \t    first -= 1;\n \n-\t  print_source_lines (cursal.symtab, first,\n-\t\t\t      first + get_lines_to_list (), 0);\n+\t  print_source_lines (cursal.symtab, source_lines_range (first), 0);\n \t}\n \n       /* \"l\" or \"l +\" lists next ten lines.  */\n       else if (arg == NULL || arg[0] == '+')\n-\tprint_source_lines (cursal.symtab, cursal.line,\n-\t\t\t    cursal.line + get_lines_to_list (), 0);\n+\tprint_source_lines (cursal.symtab,\n+\t\t\t    source_lines_range (cursal.line), 0);\n \n       /* \"l -\" lists previous ten lines, the ones before the ten just\n \t listed.  */\n@@ -911,10 +910,9 @@ list_command (const char *arg, int from_tty)\n \t  if (get_first_line_listed () == 1)\n \t    error (_(\"Already at the start of %s.\"),\n \t\t   symtab_to_filename_for_display (cursal.symtab));\n-\t  print_source_lines (cursal.symtab,\n-\t\t\t      std::max (get_first_line_listed ()\n-\t\t\t\t\t- get_lines_to_list (), 1),\n-\t\t\t      get_first_line_listed (), 0);\n+\t  source_lines_range range (get_first_line_listed (),\n+\t\t\t\t    source_lines_range::BACKWARD);\n+\t  print_source_lines (cursal.symtab, range, 0);\n \t}\n \n       return;\n@@ -1059,9 +1057,11 @@ list_command (const char *arg, int from_tty)\n   if (dummy_beg && sal_end.symtab == 0)\n     error (_(\"No default source file yet.  Do \\\"help list\\\".\"));\n   if (dummy_beg)\n-    print_source_lines (sal_end.symtab,\n-\t\t\tstd::max (sal_end.line - (get_lines_to_list () - 1), 1),\n-\t\t\tsal_end.line + 1, 0);\n+    {\n+      source_lines_range range (sal_end.line + 1,\n+\t\t\t\tsource_lines_range::BACKWARD);\n+      print_source_lines (sal_end.symtab, range, 0);\n+    }\n   else if (sal.symtab == 0)\n     error (_(\"No default source file yet.  Do \\\"help list\\\".\"));\n   else if (no_end)\n@@ -1074,17 +1074,14 @@ list_command (const char *arg, int from_tty)\n \t    first_line = 1;\n \t  if (sals.size () > 1)\n \t    print_sal_location (sal);\n-\t  print_source_lines (sal.symtab,\n-\t\t\t      first_line,\n-\t\t\t      first_line + get_lines_to_list (),\n-\t\t\t      0);\n+\t  print_source_lines (sal.symtab, source_lines_range (first_line), 0);\n \t}\n     }\n+  else if (dummy_end)\n+    print_source_lines (sal.symtab, source_lines_range (sal.line), 0);\n   else\n-    print_source_lines (sal.symtab, sal.line,\n-\t\t\t(dummy_end\n-\t\t\t ? sal.line + get_lines_to_list ()\n-\t\t\t : sal_end.line + 1),\n+    print_source_lines (sal.symtab,\n+\t\t\tsource_lines_range (sal.line, (sal_end.line + 1)),\n \t\t\t0);\n }\n "
    },
    {
      "sha": "1f10379a071e2de5b893c4739a76a30c9eea4855",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 41,
      "deletions": 7,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e2a21335b6fc4a5b6bed19d9623916c52918b72/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e2a21335b6fc4a5b6bed19d9623916c52918b72/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=0e2a21335b6fc4a5b6bed19d9623916c52918b72",
      "patch": "@@ -1331,13 +1331,8 @@ print_source_lines_base (struct symtab *s, int line, int stopline,\n   last_source_error = 0;\n \n   /* If the user requested a sequence of lines that seems to go backward\n-     (from high to low line numbers) then we don't print anything.\n-     The use of '- 1' here instead of '<=' is currently critical, we rely\n-     on the undefined wrap around behaviour of 'int' for stopline.  When\n-     the use has done: 'set listsize unlimited' then stopline can overflow\n-     and appear as MIN_INT.  This is a long-standing bug that needs\n-     fixing.  */\n-  if (stopline - 1 < line)\n+     (from high to low line numbers) then we don't print anything.  */\n+  if (stopline <= line)\n     return;\n \n   std::string lines;\n@@ -1399,6 +1394,18 @@ print_source_lines (struct symtab *s, int line, int stopline,\n {\n   print_source_lines_base (s, line, stopline, flags);\n }\n+\n+/* See source.h.  */\n+\n+void\n+print_source_lines (struct symtab *s, source_lines_range line_range,\n+\t\t    print_source_lines_flags flags)\n+{\n+  print_source_lines_base (s, line_range.startline (),\n+\t\t\t   line_range.stopline (), flags);\n+}\n+\n+\n \f\n /* Print info on range of pc's in a specified line.  */\n \n@@ -1822,6 +1829,33 @@ set_substitute_path_command (const char *args, int from_tty)\n   forget_cached_source_info ();\n }\n \n+/* See source.h.  */\n+\n+source_lines_range::source_lines_range (int startline,\n+\t\t\t\t\tsource_lines_range::direction dir)\n+{\n+  if (dir == source_lines_range::FORWARD)\n+    {\n+      LONGEST end = static_cast <LONGEST> (startline) + get_lines_to_list ();\n+\n+      if (end > INT_MAX)\n+\tend = INT_MAX;\n+\n+      m_startline = startline;\n+      m_stopline = static_cast <int> (end);\n+    }\n+  else\n+    {\n+      LONGEST start = static_cast <LONGEST> (startline) - get_lines_to_list ();\n+\n+      if (start < 1)\n+\tstart = 1;\n+\n+      m_startline = static_cast <int> (start);\n+      m_stopline = startline;\n+    }\n+}\n+\n \f\n void\n _initialize_source (void)"
    },
    {
      "sha": "f1b5f6e8f7f6b61032e9d779225ec85334f0c9b8",
      "filename": "gdb/source.h",
      "status": "modified",
      "additions": 48,
      "deletions": 0,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0e2a21335b6fc4a5b6bed19d9623916c52918b72/gdb/source.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0e2a21335b6fc4a5b6bed19d9623916c52918b72/gdb/source.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.h?ref=0e2a21335b6fc4a5b6bed19d9623916c52918b72",
      "patch": "@@ -157,6 +157,54 @@ DEF_ENUM_FLAGS_TYPE (enum print_source_lines_flag, print_source_lines_flags);\n extern void print_source_lines (struct symtab *s, int line, int stopline,\n \t\t\t\tprint_source_lines_flags flags);\n \n+/* Wrap up the logic to build a line number range for passing to\n+   print_source_lines when using get_lines_to_list.  An instance of this\n+   class can be built from a single line number and a direction (forward or\n+   backward) the range is then computed using get_lines_to_list.  */\n+class source_lines_range\n+{\n+public:\n+  /* When constructing the range from a single line number, does the line\n+     range extend forward, or backward.  */\n+  enum direction\n+  {\n+   FORWARD,\n+   BACKWARD\n+  };\n+\n+  /* Construct a SOURCE_LINES_RANGE starting at STARTLINE and extending in\n+   direction DIR.  The number of lines is from GET_LINES_TO_LIST.  If the\n+   direction is backward then the start is actually (STARTLINE -\n+   GET_LINES_TO_LIST).  There is also logic in place to ensure the start\n+   is always 1 or more, and the end will be at most INT_MAX.  */\n+  explicit source_lines_range (int startline, direction dir = FORWARD);\n+\n+  /* Construct a SOURCE_LINES_RANGE from STARTLINE to STOPLINE.  */\n+  explicit source_lines_range (int startline, int stopline)\n+    : m_startline (startline),\n+      m_stopline (stopline)\n+  { /* Nothing.  */ }\n+\n+  /* Return the line to start listing from.  */\n+  int startline () const\n+  { return m_startline; }\n+\n+  /* Return the line after the last line that should be listed.  */\n+  int stopline () const\n+  { return m_stopline; }\n+\n+private:\n+\n+  /* The start and end of the range.  */\n+  int m_startline;\n+  int m_stopline;\n+};\n+\n+/* Variation of previous print_source_lines that takes a range instead of a\n+   start and end line number.  */\n+extern void print_source_lines (struct symtab *s, source_lines_range r,\n+\t\t\t\tprint_source_lines_flags flags);\n+\n /* Forget line positions and file names for the symtabs in a\n    particular objfile.  */\n extern void forget_cached_source_info_for_objfile (struct objfile *);"
    }
  ]
}