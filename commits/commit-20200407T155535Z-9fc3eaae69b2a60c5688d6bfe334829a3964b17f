{
  "sha": "9fc3eaae69b2a60c5688d6bfe334829a3964b17f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWZjM2VhYWU2OWIyYTYwYzU2ODhkNmJmZTMzNDgyOWEzOTY0YjE3Zg==",
  "commit": {
    "author": {
      "name": "nitachra",
      "email": "Nitika.Achra@amd.com",
      "date": "2020-04-07T13:05:59Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-07T15:55:35Z"
    },
    "message": "DWARFv5: Handle location list for split dwarf.\n\nGDB throws the error '<error reading variable: dwarf2_find_location_\nexpression: Corrupted DWARF expression.>' while printing the variable\nvalue with executable file compiled with -gdwarf-5 and -gdwarf-split\nflags. This is because DW_LLE_start* or DW_LLE_offset_pair with\nDW_LLE_base_addressx are being emitted in DWARFv5 location list instead of\nDW_LLE_GNU*. This patch fixes this error.\n\nTested by running the testsuite before and after the patch and there is no\nincrease in the number of test cases that fails. Tested with both -gdwarf-4\nand -gdwarf-5 flags. Also tested -gslit-dwarf along with -gdwarf-4 as well as\n-gdwarf-5 flags. Used clang version 10.0.0. This is the test case used-\n\nvoid bar(int arr[], int l, int m, int r) {\n    int i, j, k, n1= m - l + 1, n2= r - m, L[n1], R[n2];\n    for (i = 0; i < n1; i++)\n        L[i] = arr[l + i];\n    for (j = 0; j < n2; j++)\n        R[j] = arr[m + 1+ j];\n}\n\nint main()\n{\n    int arr[] = {12, 11};\n    bar(arr,0,1,2);\n    return 0;\n}\n\nclang -gdwarf-5 -gsplit-dwarf test.c -o test.out\n\ngdb test.out\ngdb> start\ngdb> step\ngdb> step\ngdb> step\ngdb> step\ngdb> p L[0]\ndwarf2_find_location_expression: Corrupted DWARF expression.\n\ngdb/ChangeLog:\n2020-04-07  Nitika Achra  <Nitika.Achra@amd.com>\n\n\t* dwarf2/loc.c (enum debug_loc_kind): Add a new kind DEBUG_LOC_OFFSET_PAIR.\n\t(dwarf2_find_location_expression): Call the function decode_debug_loclists_\n\taddresses if DWARF version is 5 or more. DW_LLE_start* or DW_LLE_offset_pair\n\twith DW_LLE_base_addressx are being emitted in DWARFv5 instead of DW_LLE_GNU*.\n\tAdd applicable base address if the entry is DW_LLE_offset_pair from DWO.\n\t(decode_debug_loclists_addresses): Return DEBUG_LOC_OFFSET_PAIR instead of\n\tDEBUG_LOC_START_END in case of DW_LLE_offset_pair.",
    "tree": {
      "sha": "de14c8fb4bc1e180b8c47d523f4b8f4d6cd03cc8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/de14c8fb4bc1e180b8c47d523f4b8f4d6cd03cc8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9fc3eaae69b2a60c5688d6bfe334829a3964b17f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9fc3eaae69b2a60c5688d6bfe334829a3964b17f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9fc3eaae69b2a60c5688d6bfe334829a3964b17f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9fc3eaae69b2a60c5688d6bfe334829a3964b17f/comments",
  "author": null,
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4114425321d5c380bc8fb5344db8bc8664c170c6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4114425321d5c380bc8fb5344db8bc8664c170c6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4114425321d5c380bc8fb5344db8bc8664c170c6"
    }
  ],
  "stats": {
    "total": 29,
    "additions": 24,
    "deletions": 5
  },
  "files": [
    {
      "sha": "4d3c70bf9e68c0c2e1efafc272666075e83fea4a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9fc3eaae69b2a60c5688d6bfe334829a3964b17f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9fc3eaae69b2a60c5688d6bfe334829a3964b17f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9fc3eaae69b2a60c5688d6bfe334829a3964b17f",
      "patch": "@@ -1,3 +1,14 @@\n+2020-04-07  Nitika Achra  <Nitika.Achra@amd.com>\n+\n+\t* dwarf2/loc.c (enum debug_loc_kind): Add a new kind DEBUG_LOC_OFFSET_PAIR.\n+\t(dwarf2_find_location_expression): Call the function decode_debug_loclists_\n+\taddresses if DWARF version is 5 or more. DW_LLE_start* or DW_LLE_offset_pair\n+\twith DW_LLE_base_addressx are being emitted in DWARFv5 instead of DW_LLE_GNU*.\n+\tAdd applicable base address if the entry is DW_LLE_offset_pair from DWO.\n+\t(decode_debug_loclists_addresses): Return DEBUG_LOC_OFFSET_PAIR instead of\n+\tDEBUG_LOC_START_END in case of DW_LLE_offset_pair.\n+\n+\n 2020-04-07  Nitika Achra  <Nitika.Achra@amd.com>\n \n \t* dwarf2/read.c (cu_debug_loc_section): Added the declaration for the function."
    },
    {
      "sha": "ecd83ec4b9c38320785c4cf66767a738936b4374",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 13,
      "deletions": 5,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9fc3eaae69b2a60c5688d6bfe334829a3964b17f/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9fc3eaae69b2a60c5688d6bfe334829a3964b17f/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=9fc3eaae69b2a60c5688d6bfe334829a3964b17f",
      "patch": "@@ -92,6 +92,11 @@ enum debug_loc_kind\n      as in .debug_loc.  */\n   DEBUG_LOC_START_LENGTH = 3,\n \n+  /* This is followed by two unsigned LEB128 operands. The values of these\n+     operands are the starting and ending offsets, respectively, relative to\n+     the applicable base address.  */\n+  DEBUG_LOC_OFFSET_PAIR = 4,\n+\n   /* An internal value indicating there is insufficient data.  */\n   DEBUG_LOC_BUFFER_OVERFLOW = -1,\n \n@@ -232,7 +237,7 @@ decode_debug_loclists_addresses (struct dwarf2_per_cu_data *per_cu,\n \treturn DEBUG_LOC_BUFFER_OVERFLOW;\n       *high = u64;\n       *new_ptr = loc_ptr;\n-      return DEBUG_LOC_START_END;\n+      return DEBUG_LOC_OFFSET_PAIR;\n     /* Following cases are not supported yet.  */\n     case DW_LLE_startx_endx:\n     case DW_LLE_start_end:\n@@ -332,7 +337,7 @@ dwarf2_find_location_expression (struct dwarf2_loclist_baton *baton,\n       enum debug_loc_kind kind;\n       const gdb_byte *new_ptr = NULL; /* init for gcc -Wall */\n \n-      if (baton->from_dwo)\n+      if (baton->per_cu->version () < 5 && baton->from_dwo)\n \tkind = decode_debug_loc_dwo_addresses (baton->per_cu,\n \t\t\t\t\t       loc_ptr, buf_end, &new_ptr,\n \t\t\t\t\t       &low, &high, byte_order);\n@@ -358,6 +363,7 @@ dwarf2_find_location_expression (struct dwarf2_loclist_baton *baton,\n \t  continue;\n \tcase DEBUG_LOC_START_END:\n \tcase DEBUG_LOC_START_LENGTH:\n+\tcase DEBUG_LOC_OFFSET_PAIR:\n \t  break;\n \tcase DEBUG_LOC_BUFFER_OVERFLOW:\n \tcase DEBUG_LOC_INVALID_ENTRY:\n@@ -369,9 +375,11 @@ dwarf2_find_location_expression (struct dwarf2_loclist_baton *baton,\n \n       /* Otherwise, a location expression entry.\n \t If the entry is from a DWO, don't add base address: the entry is from\n-\t .debug_addr which already has the DWARF \"base address\".  We still add\n-\t base_offset in case we're debugging a PIE executable.  */\n-      if (baton->from_dwo)\n+\t .debug_addr which already has the DWARF \"base address\". We still add\n+\t base_offset in case we're debugging a PIE executable. However, if the\n+\t entry is DW_LLE_offset_pair from a DWO, add the base address as the\n+\t operands are offsets relative to the applicable base address.  */\n+      if (baton->from_dwo && kind != DEBUG_LOC_OFFSET_PAIR)\n \t{\n \t  low += base_offset;\n \t  high += base_offset;"
    }
  ]
}