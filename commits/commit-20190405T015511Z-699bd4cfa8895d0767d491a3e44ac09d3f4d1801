{
  "sha": "699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Njk5YmQ0Y2ZhODg5NWQwNzY3ZDQ5MWEzZTQ0YWMwOWQzZjRkMTgwMQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-31T23:20:24Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-05T01:55:11Z"
    },
    "message": "Move innermost_block_tracker global to parse_state\n\nThis changes the parsing API so that callers that are interested in\ntracking the innermost block must instantiate an\ninnermost_block_tracker and pass it in.  Then, a pointer to this\nobject is stored in the parser_state.\n\n2019-04-04  Tom Tromey  <tom@tromey.com>\n\n\t* varobj.c (varobj_create): Update.\n\t* rust-exp.y (struct rust_parser) <update_innermost_block,\n\tlookup_symbol>: New methods.\n\t(rust_parser::update_innermost_block, rust_parser::lookup_symbol):\n\tRename.\n\t(rust_parser::rust_lookup_type)\n\t(rust_parser::convert_ast_to_expression, rust_lex_tests): Update.\n\t* printcmd.c (display_command, do_one_display): Update.\n\t* parser-defs.h (struct parser_state) <parser_state>: Add\n\t\"tracker\" parameter.\n\t(block_tracker): New member.\n\t(class innermost_block_tracker) <innermost_block_tracker>: Add\n\t\"types\" parameter.\n\t<reset>: Remove method.\n\t(innermost_block): Don't declare.\n\t(null_post_parser): Update.\n\t* parse.c (innermost_block): Remove global.\n\t(write_dollar_variable): Update.\n\t(parse_exp_1, parse_exp_in_context): Add \"tracker\" parameter.\n\tRemove \"tracker_types\" parameter.\n\t(parse_expression): Add \"tracker\" parameter.\n\t(parse_expression_for_completion): Update.\n\t(null_post_parser): Add \"tracker\" parameter.\n\t* p-exp.y: Update rules.\n\t* m2-exp.y: Update rules.\n\t* language.h (struct language_defn) <la_post_parser>: Add\n\t\"tracker\" parameter.\n\t* go-exp.y: Update rules.\n\t* f-exp.y: Update rules.\n\t* expression.h (parse_expression, parse_exp_1): Add \"tracker\"\n\tparameter.\n\t* d-exp.y: Update rules.\n\t* c-exp.y: Update rules.\n\t* breakpoint.c (set_breakpoint_condition): Create an\n\tinnermost_block_tracker.\n\t(watch_command_1): Likewise.\n\t* ada-lang.c (resolve): Add \"tracker\" parameter.\n\t(resolve_subexp): Likewise.\n\t* ada-exp.y (write_var_from_sym): Update.",
    "tree": {
      "sha": "6f0f6dea3ef2cd37f4e0b9173d38431b27df17fd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6f0f6dea3ef2cd37f4e0b9173d38431b27df17fd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "dac43e327d002107f6bc9481749de039f410df73",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dac43e327d002107f6bc9481749de039f410df73",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/dac43e327d002107f6bc9481749de039f410df73"
    }
  ],
  "stats": {
    "total": 242,
    "additions": 145,
    "deletions": 97
  },
  "files": [
    {
      "sha": "7272b9c7b0fc88a10de87878f3bb9cff94bb7cae",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
      "patch": "@@ -1,3 +1,45 @@\n+2019-04-04  Tom Tromey  <tom@tromey.com>\n+\n+\t* varobj.c (varobj_create): Update.\n+\t* rust-exp.y (struct rust_parser) <update_innermost_block,\n+\tlookup_symbol>: New methods.\n+\t(rust_parser::update_innermost_block, rust_parser::lookup_symbol):\n+\tRename.\n+\t(rust_parser::rust_lookup_type)\n+\t(rust_parser::convert_ast_to_expression, rust_lex_tests): Update.\n+\t* printcmd.c (display_command, do_one_display): Update.\n+\t* parser-defs.h (struct parser_state) <parser_state>: Add\n+\t\"tracker\" parameter.\n+\t(block_tracker): New member.\n+\t(class innermost_block_tracker) <innermost_block_tracker>: Add\n+\t\"types\" parameter.\n+\t<reset>: Remove method.\n+\t(innermost_block): Don't declare.\n+\t(null_post_parser): Update.\n+\t* parse.c (innermost_block): Remove global.\n+\t(write_dollar_variable): Update.\n+\t(parse_exp_1, parse_exp_in_context): Add \"tracker\" parameter.\n+\tRemove \"tracker_types\" parameter.\n+\t(parse_expression): Add \"tracker\" parameter.\n+\t(parse_expression_for_completion): Update.\n+\t(null_post_parser): Add \"tracker\" parameter.\n+\t* p-exp.y: Update rules.\n+\t* m2-exp.y: Update rules.\n+\t* language.h (struct language_defn) <la_post_parser>: Add\n+\t\"tracker\" parameter.\n+\t* go-exp.y: Update rules.\n+\t* f-exp.y: Update rules.\n+\t* expression.h (parse_expression, parse_exp_1): Add \"tracker\"\n+\tparameter.\n+\t* d-exp.y: Update rules.\n+\t* c-exp.y: Update rules.\n+\t* breakpoint.c (set_breakpoint_condition): Create an\n+\tinnermost_block_tracker.\n+\t(watch_command_1): Likewise.\n+\t* ada-lang.c (resolve): Add \"tracker\" parameter.\n+\t(resolve_subexp): Likewise.\n+\t* ada-exp.y (write_var_from_sym): Update.\n+\n 2019-04-04  Tom Tromey  <tom@tromey.com>\n \n \t* type-stack.h: New file."
    },
    {
      "sha": "efad85b19ad358c3acbf5001be5add7bb20cde0f",
      "filename": "gdb/ada-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/ada-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/ada-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.y?ref=699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
      "patch": "@@ -757,7 +757,7 @@ write_var_from_sym (struct parser_state *par_state,\n \t\t    struct symbol *sym)\n {\n   if (symbol_read_needs_frame (sym))\n-    innermost_block.update (block, INNERMOST_BLOCK_FOR_SYMBOLS);\n+    par_state->block_tracker->update (block, INNERMOST_BLOCK_FOR_SYMBOLS);\n \n   write_exp_elt_opcode (par_state, OP_VAR_VALUE);\n   write_exp_elt_block (par_state, block);"
    },
    {
      "sha": "51615dcd36132b9a1fdc71ebb46113d079f86920",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 18,
      "deletions": 13,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
      "patch": "@@ -125,7 +125,8 @@ static int num_defns_collected (struct obstack *);\n static struct block_symbol *defns_collected (struct obstack *, int);\n \n static struct value *resolve_subexp (expression_up *, int *, int,\n-                                     struct type *, int);\n+                                     struct type *, int,\n+\t\t\t\t     innermost_block_tracker *);\n \n static void replace_operator_with_call (expression_up *, int, int, int,\n                                         struct symbol *, const struct block *);\n@@ -3220,15 +3221,16 @@ ada_decoded_op_name (enum exp_opcode op)\n    return type is preferred.  May change (expand) *EXP.  */\n \n static void\n-resolve (expression_up *expp, int void_context_p, int parse_completion)\n+resolve (expression_up *expp, int void_context_p, int parse_completion,\n+\t innermost_block_tracker *tracker)\n {\n   struct type *context_type = NULL;\n   int pc = 0;\n \n   if (void_context_p)\n     context_type = builtin_type ((*expp)->gdbarch)->builtin_void;\n \n-  resolve_subexp (expp, &pc, 1, context_type, parse_completion);\n+  resolve_subexp (expp, &pc, 1, context_type, parse_completion, tracker);\n }\n \n /* Resolve the operator of the subexpression beginning at\n@@ -3242,7 +3244,8 @@ resolve (expression_up *expp, int void_context_p, int parse_completion)\n \n static struct value *\n resolve_subexp (expression_up *expp, int *pos, int deprocedure_p,\n-                struct type *context_type, int parse_completion)\n+                struct type *context_type, int parse_completion,\n+\t\tinnermost_block_tracker *tracker)\n {\n   int pc = *pos;\n   int i;\n@@ -3267,20 +3270,20 @@ resolve_subexp (expression_up *expp, int *pos, int deprocedure_p,\n       else\n         {\n           *pos += 3;\n-          resolve_subexp (expp, pos, 0, NULL, parse_completion);\n+          resolve_subexp (expp, pos, 0, NULL, parse_completion, tracker);\n         }\n       nargs = longest_to_int (exp->elts[pc + 1].longconst);\n       break;\n \n     case UNOP_ADDR:\n       *pos += 1;\n-      resolve_subexp (expp, pos, 0, NULL, parse_completion);\n+      resolve_subexp (expp, pos, 0, NULL, parse_completion, tracker);\n       break;\n \n     case UNOP_QUAL:\n       *pos += 3;\n       resolve_subexp (expp, pos, 1, check_typedef (exp->elts[pc + 1].type),\n-\t\t      parse_completion);\n+\t\t      parse_completion, tracker);\n       break;\n \n     case OP_ATR_MODULUS:\n@@ -3311,11 +3314,12 @@ resolve_subexp (expression_up *expp, int *pos, int deprocedure_p,\n         struct value *arg1;\n \n         *pos += 1;\n-        arg1 = resolve_subexp (expp, pos, 0, NULL, parse_completion);\n+        arg1 = resolve_subexp (expp, pos, 0, NULL, parse_completion, tracker);\n         if (arg1 == NULL)\n-          resolve_subexp (expp, pos, 1, NULL, parse_completion);\n+          resolve_subexp (expp, pos, 1, NULL, parse_completion, tracker);\n         else\n-          resolve_subexp (expp, pos, 1, value_type (arg1), parse_completion);\n+          resolve_subexp (expp, pos, 1, value_type (arg1), parse_completion,\n+\t\t\t  tracker);\n         break;\n       }\n \n@@ -3403,7 +3407,8 @@ resolve_subexp (expression_up *expp, int *pos, int deprocedure_p,\n \n   argvec = XALLOCAVEC (struct value *, nargs + 1);\n   for (i = 0; i < nargs; i += 1)\n-    argvec[i] = resolve_subexp (expp, pos, 1, NULL, parse_completion);\n+    argvec[i] = resolve_subexp (expp, pos, 1, NULL, parse_completion,\n+\t\t\t\ttracker);\n   argvec[i] = NULL;\n   exp = expp->get ();\n \n@@ -3487,7 +3492,7 @@ resolve_subexp (expression_up *expp, int *pos, int deprocedure_p,\n \n           exp->elts[pc + 1].block = candidates[i].block;\n           exp->elts[pc + 2].symbol = candidates[i].symbol;\n-\t  innermost_block.update (candidates[i]);\n+\t  tracker->update (candidates[i]);\n         }\n \n       if (deprocedure_p\n@@ -3531,7 +3536,7 @@ resolve_subexp (expression_up *expp, int *pos, int deprocedure_p,\n \n             exp->elts[pc + 4].block = candidates[i].block;\n             exp->elts[pc + 5].symbol = candidates[i].symbol;\n-\t    innermost_block.update (candidates[i]);\n+\t    tracker->update (candidates[i]);\n           }\n       }\n       break;"
    },
    {
      "sha": "7799d1c1b487419d4201ae67a4e593c105582110",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
      "patch": "@@ -880,11 +880,12 @@ set_breakpoint_condition (struct breakpoint *b, const char *exp,\n \t{\n \t  struct watchpoint *w = (struct watchpoint *) b;\n \n+\t  innermost_block_tracker tracker;\n \t  arg = exp;\n-\t  w->cond_exp = parse_exp_1 (&arg, 0, 0, 0);\n+\t  w->cond_exp = parse_exp_1 (&arg, 0, 0, 0, &tracker);\n \t  if (*arg)\n \t    error (_(\"Junk at end of expression\"));\n-\t  w->cond_exp_valid_block = innermost_block.block ();\n+\t  w->cond_exp_valid_block = tracker.block ();\n \t}\n       else\n \t{\n@@ -10603,7 +10604,8 @@ watch_command_1 (const char *arg, int accessflag, int from_tty,\n      ARG.  */\n   std::string expression (arg, exp_end - arg);\n   exp_start = arg = expression.c_str ();\n-  expression_up exp = parse_exp_1 (&arg, 0, 0, 0);\n+  innermost_block_tracker tracker;\n+  expression_up exp = parse_exp_1 (&arg, 0, 0, 0, &tracker);\n   exp_end = arg;\n   /* Remove trailing whitespace from the expression before saving it.\n      This makes the eventual display of the expression string a bit\n@@ -10622,7 +10624,7 @@ watch_command_1 (const char *arg, int accessflag, int from_tty,\n       error (_(\"Cannot watch constant value `%.*s'.\"), len, exp_start);\n     }\n \n-  exp_valid_block = innermost_block.block ();\n+  exp_valid_block = tracker.block ();\n   struct value *mark = value_mark ();\n   struct value *val_as_value = nullptr;\n   fetch_subexp_value (exp.get (), &pc, &val_as_value, &result, NULL,\n@@ -10663,11 +10665,12 @@ watch_command_1 (const char *arg, int accessflag, int from_tty,\n   if (toklen >= 1 && strncmp (tok, \"if\", toklen) == 0)\n     {\n       tok = cond_start = end_tok + 1;\n-      parse_exp_1 (&tok, 0, 0, 0);\n+      innermost_block_tracker if_tracker;\n+      parse_exp_1 (&tok, 0, 0, 0, &if_tracker);\n \n       /* The watchpoint expression may not be local, but the condition\n \t may still be.  E.g.: `watch global if local > 0'.  */\n-      cond_exp_valid_block = innermost_block.block ();\n+      cond_exp_valid_block = if_tracker.block ();\n \n       cond_end = tok;\n     }"
    },
    {
      "sha": "e1a17b5628a99102fdadbfc3162b9eecba71243b",
      "filename": "gdb/c-exp.y",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/c-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/c-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.y?ref=699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
      "patch": "@@ -1002,8 +1002,7 @@ variable:\tblock COLONCOLON name\n \t\t\t    error (_(\"No symbol \\\"%s\\\" in specified context.\"),\n \t\t\t\t   copy_name ($3));\n \t\t\t  if (symbol_read_needs_frame (sym.symbol))\n-\n-\t\t\t    innermost_block.update (sym);\n+\t\t\t    pstate->block_tracker->update (sym);\n \n \t\t\t  write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n \t\t\t  write_exp_elt_block (pstate, sym.block);\n@@ -1092,7 +1091,7 @@ variable:\tname_not_typename\n \t\t\t  if (sym.symbol)\n \t\t\t    {\n \t\t\t      if (symbol_read_needs_frame (sym.symbol))\n-\t\t\t\tinnermost_block.update (sym);\n+\t\t\t\tpstate->block_tracker->update (sym);\n \n \t\t\t      /* If we found a function, see if it's\n \t\t\t\t an ifunc resolver that has the same\n@@ -1116,7 +1115,7 @@ variable:\tname_not_typename\n \t\t\t      /* C++: it hangs off of `this'.  Must\n \t\t\t         not inadvertently convert from a method call\n \t\t\t\t to data ref.  */\n-\t\t\t      innermost_block.update (sym);\n+\t\t\t      pstate->block_tracker->update (sym);\n \t\t\t      write_exp_elt_opcode (pstate, OP_THIS);\n \t\t\t      write_exp_elt_opcode (pstate, OP_THIS);\n \t\t\t      write_exp_elt_opcode (pstate, STRUCTOP_PTR);"
    },
    {
      "sha": "8f04e93bb8f288f044ef20860ccb8c9125ba66f2",
      "filename": "gdb/d-exp.y",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/d-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/d-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-exp.y?ref=699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
      "patch": "@@ -425,7 +425,7 @@ PrimaryExpression:\n \t\t  if (sym.symbol && SYMBOL_CLASS (sym.symbol) != LOC_TYPEDEF)\n \t\t    {\n \t\t      if (symbol_read_needs_frame (sym.symbol))\n-\t\t\tinnermost_block.update (sym);\n+\t\t\tpstate->block_tracker->update (sym);\n \t\t      write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n \t\t      write_exp_elt_block (pstate, sym.block);\n \t\t      write_exp_elt_sym (pstate, sym.symbol);\n@@ -435,7 +435,7 @@ PrimaryExpression:\n \t\t     {\n \t\t      /* It hangs off of `this'.  Must not inadvertently convert from a\n \t\t\t method call to data ref.  */\n-\t\t      innermost_block.update (sym);\n+\t\t      pstate->block_tracker->update (sym);\n \t\t      write_exp_elt_opcode (pstate, OP_THIS);\n \t\t      write_exp_elt_opcode (pstate, OP_THIS);\n \t\t      write_exp_elt_opcode (pstate, STRUCTOP_PTR);"
    },
    {
      "sha": "10e5f3e788e8933a84f2d330c31e40488c0f6739",
      "filename": "gdb/expression.h",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/expression.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/expression.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expression.h?ref=699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
      "patch": "@@ -110,18 +110,20 @@ typedef gdb::unique_xmalloc_ptr<expression> expression_up;\n \n /* From parse.c */\n \n-extern expression_up parse_expression (const char *);\n+class innermost_block_tracker;\n+extern expression_up parse_expression (const char *,\n+\t\t\t\t       innermost_block_tracker * = nullptr);\n \n extern expression_up parse_expression_with_language (const char *string,\n \t\t\t\t\t\t     enum language lang);\n \n extern struct type *parse_expression_for_completion\n     (const char *, gdb::unique_xmalloc_ptr<char> *, enum type_code *);\n \n+class innermost_block_tracker;\n extern expression_up parse_exp_1 (const char **, CORE_ADDR pc,\n \t\t\t\t  const struct block *, int,\n-\t\t\t\t  innermost_block_tracker_types\n-\t\t\t\t    = INNERMOST_BLOCK_FOR_SYMBOLS);\n+\t\t\t\t  innermost_block_tracker * = nullptr);\n \n /* From eval.c */\n "
    },
    {
      "sha": "9ee5316470f74632835f2b4ced9173fb9c23dab3",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
      "patch": "@@ -480,7 +480,7 @@ variable:\tname_not_typename\n \t\t\t  if (sym.symbol)\n \t\t\t    {\n \t\t\t      if (symbol_read_needs_frame (sym.symbol))\n-\t\t\t\tinnermost_block.update (sym);\n+\t\t\t\tpstate->block_tracker->update (sym);\n \t\t\t      write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n \t\t\t      write_exp_elt_block (pstate, sym.block);\n \t\t\t      write_exp_elt_sym (pstate, sym.symbol);"
    },
    {
      "sha": "0084b2f7eb6fe6f56cc780be552e7cdcd690b7f1",
      "filename": "gdb/go-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/go-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/go-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-exp.y?ref=699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
      "patch": "@@ -552,7 +552,7 @@ variable:\tname_not_typename\n \t\t\t  if (sym.symbol)\n \t\t\t    {\n \t\t\t      if (symbol_read_needs_frame (sym.symbol))\n-\t\t\t\tinnermost_block.update (sym);\n+\t\t\t\tpstate->block_tracker->update (sym);\n \n \t\t\t      write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n \t\t\t      write_exp_elt_block (pstate, sym.block);"
    },
    {
      "sha": "a982e1977d2a5998fe67796967eaf9f5bfaea464",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
      "patch": "@@ -38,6 +38,7 @@ struct lang_varobj_ops;\n struct parser_state;\n class compile_instance;\n struct completion_match_for_lcd;\n+class innermost_block_tracker;\n \n #define MAX_FORTRAN_DIMS  7\t/* Maximum number of F77 array dims.  */\n \n@@ -181,7 +182,7 @@ struct language_defn\n        for completion, not evaluation.  */\n \n     void (*la_post_parser) (expression_up *expp, int void_context_p,\n-\t\t\t    int completing);\n+\t\t\t    int completing, innermost_block_tracker *tracker);\n \n     void (*la_printchar) (int ch, struct type *chtype,\n \t\t\t  struct ui_file * stream);"
    },
    {
      "sha": "1ea462ec71919fe4a93d2a19787fef462cf1e677",
      "filename": "gdb/m2-exp.y",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/m2-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/m2-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-exp.y?ref=699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
      "patch": "@@ -548,7 +548,7 @@ variable:\tblock COLONCOLON NAME\n \t\t\t    error (_(\"No symbol \\\"%s\\\" in specified context.\"),\n \t\t\t\t   copy_name ($3));\n \t\t\t  if (symbol_read_needs_frame (sym.symbol))\n-\t\t\t    innermost_block.update (sym);\n+\t\t\t    pstate->block_tracker->update (sym);\n \n \t\t\t  write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n \t\t\t  write_exp_elt_block (pstate, sym.block);\n@@ -570,7 +570,7 @@ variable:\tNAME\n \t\t\t  if (sym.symbol)\n \t\t\t    {\n \t\t\t      if (symbol_read_needs_frame (sym.symbol))\n-\t\t\t\tinnermost_block.update (sym);\n+\t\t\t\tpstate->block_tracker->update (sym);\n \n \t\t\t      write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n \t\t\t      write_exp_elt_block (pstate, sym.block);"
    },
    {
      "sha": "da25ae42af6784ed4045570df251905f3dd023a1",
      "filename": "gdb/p-exp.y",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/p-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/p-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-exp.y?ref=699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
      "patch": "@@ -712,7 +712,7 @@ variable:\tname_not_typename\n \t\t\t  if (sym.symbol)\n \t\t\t    {\n \t\t\t      if (symbol_read_needs_frame (sym.symbol))\n-\t\t\t\tinnermost_block.update (sym);\n+\t\t\t\tpstate->block_tracker->update (sym);\n \n \t\t\t      write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n \t\t\t      write_exp_elt_block (pstate, sym.block);\n@@ -726,7 +726,7 @@ variable:\tname_not_typename\n \t\t\t      /* Object pascal: it hangs off of `this'.  Must\n \t\t\t         not inadvertently convert from a method call\n \t\t\t\t to data ref.  */\n-\t\t\t      innermost_block.update (sym);\n+\t\t\t      pstate->block_tracker->update (sym);\n \t\t\t      write_exp_elt_opcode (pstate, OP_THIS);\n \t\t\t      write_exp_elt_opcode (pstate, OP_THIS);\n \t\t\t      write_exp_elt_opcode (pstate, STRUCTOP_PTR);"
    },
    {
      "sha": "359f6f893214670735d7b30a768eb9d54d0dba92",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 18,
      "deletions": 18,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
      "patch": "@@ -64,10 +64,6 @@ const struct exp_descriptor exp_descriptor_standard =\n     dump_subexp_body_standard,\n     evaluate_subexp_standard\n   };\n-\f\n-/* Global variables declared in parser-defs.h (and commented there).  */\n-innermost_block_tracker innermost_block;\n-\n \f\n static unsigned int expressiondebug = 0;\n static void\n@@ -95,7 +91,7 @@ static int prefixify_subexp (struct expression *, struct expression *, int,\n static expression_up parse_exp_in_context (const char **, CORE_ADDR,\n \t\t\t\t\t   const struct block *, int,\n \t\t\t\t\t   int, int *,\n-\t\t\t\t\t   innermost_block_tracker_types,\n+\t\t\t\t\t   innermost_block_tracker *,\n \t\t\t\t\t   expr_completion_state *);\n \n static void increase_expout_size (struct expr_builder *ps, size_t lenelt);\n@@ -637,8 +633,8 @@ write_dollar_variable (struct parser_state *ps, struct stoken str)\n   str.ptr++;\n   write_exp_string (ps, str);\n   write_exp_elt_opcode (ps, OP_REGISTER);\n-  innermost_block.update (ps->expression_context_block,\n-\t\t\t  INNERMOST_BLOCK_FOR_REGISTERS);\n+  ps->block_tracker->update (ps->expression_context_block,\n+\t\t\t     INNERMOST_BLOCK_FOR_REGISTERS);\n   return;\n }\n \n@@ -1049,10 +1045,10 @@ prefixify_subexp (struct expression *inexpr,\n \n expression_up\n parse_exp_1 (const char **stringptr, CORE_ADDR pc, const struct block *block,\n-\t     int comma, innermost_block_tracker_types tracker_types)\n+\t     int comma, innermost_block_tracker *tracker)\n {\n   return parse_exp_in_context (stringptr, pc, block, comma, 0, NULL,\n-\t\t\t       tracker_types, nullptr);\n+\t\t\t       tracker, nullptr);\n }\n \n /* As for parse_exp_1, except that if VOID_CONTEXT_P, then\n@@ -1066,20 +1062,22 @@ static expression_up\n parse_exp_in_context (const char **stringptr, CORE_ADDR pc,\n \t\t      const struct block *block,\n \t\t      int comma, int void_context_p, int *out_subexp,\n-\t\t      innermost_block_tracker_types tracker_types,\n+\t\t      innermost_block_tracker *tracker,\n \t\t      expr_completion_state *cstate)\n {\n   const struct language_defn *lang = NULL;\n   int subexp;\n \n-  innermost_block.reset (tracker_types);\n-\n   if (*stringptr == 0 || **stringptr == 0)\n     error_no_arg (_(\"expression to compute\"));\n \n   const struct block *expression_context_block = block;\n   CORE_ADDR expression_context_pc = 0;\n \n+  innermost_block_tracker local_tracker;\n+  if (tracker == nullptr)\n+    tracker = &local_tracker;\n+\n   /* If no context specified, try using the current frame, if any.  */\n   if (!expression_context_block)\n     expression_context_block = get_selected_block (&expression_context_pc);\n@@ -1134,7 +1132,7 @@ parse_exp_in_context (const char **stringptr, CORE_ADDR pc,\n \n   parser_state ps (lang, get_current_arch (), expression_context_block,\n \t\t   expression_context_pc, comma, *stringptr,\n-\t\t   cstate != nullptr);\n+\t\t   cstate != nullptr, tracker);\n \n   scoped_restore_current_language lang_saver;\n   set_language (lang->la_language);\n@@ -1169,7 +1167,8 @@ parse_exp_in_context (const char **stringptr, CORE_ADDR pc,\n   if (out_subexp)\n     *out_subexp = subexp;\n \n-  lang->la_post_parser (&result, void_context_p, ps.parse_completion);\n+  lang->la_post_parser (&result, void_context_p, ps.parse_completion,\n+\t\t\ttracker);\n \n   if (expressiondebug)\n     dump_prefix_expression (result.get (), gdb_stdlog);\n@@ -1184,9 +1183,9 @@ parse_exp_in_context (const char **stringptr, CORE_ADDR pc,\n    to use up all of the contents of STRING.  */\n \n expression_up\n-parse_expression (const char *string)\n+parse_expression (const char *string, innermost_block_tracker *tracker)\n {\n-  expression_up exp = parse_exp_1 (&string, 0, 0, 0);\n+  expression_up exp = parse_exp_1 (&string, 0, 0, 0, tracker);\n   if (*string)\n     error (_(\"Junk after end of expression.\"));\n   return exp;\n@@ -1228,7 +1227,7 @@ parse_expression_for_completion (const char *string,\n   TRY\n     {\n       exp = parse_exp_in_context (&string, 0, 0, 0, 0, &subexp,\n-\t\t\t\t  INNERMOST_BLOCK_FOR_SYMBOLS, &cstate);\n+\t\t\t\t  nullptr, &cstate);\n     }\n   CATCH (except, RETURN_MASK_ERROR)\n     {\n@@ -1267,7 +1266,8 @@ parse_expression_for_completion (const char *string,\n /* A post-parser that does nothing.  */\n \n void\n-null_post_parser (expression_up *exp, int void_context_p, int completin)\n+null_post_parser (expression_up *exp, int void_context_p, int completin,\n+\t\t  innermost_block_tracker *tracker)\n {\n }\n "
    },
    {
      "sha": "5244842e58d8d3e527c2226b60622b05b13e991d",
      "filename": "gdb/parser-defs.h",
      "status": "modified",
      "additions": 13,
      "deletions": 21,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/parser-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/parser-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parser-defs.h?ref=699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
      "patch": "@@ -29,6 +29,7 @@\n struct block;\n struct language_defn;\n struct internalvar;\n+class innermost_block_tracker;\n \n extern int parser_debug;\n \n@@ -107,13 +108,15 @@ struct parser_state : public expr_builder\n \t\tCORE_ADDR context_pc,\n \t\tint comma,\n \t\tconst char *input,\n-\t\tint completion)\n+\t\tint completion,\n+\t\tinnermost_block_tracker *tracker)\n     : expr_builder (lang, gdbarch),\n       expression_context_block (context_block),\n       expression_context_pc (context_pc),\n       comma_terminates (comma),\n       lexptr (input),\n-      parse_completion (completion)\n+      parse_completion (completion),\n+      block_tracker (tracker)\n   {\n   }\n \n@@ -186,6 +189,9 @@ struct parser_state : public expr_builder\n   /* Completion state is updated here.  */\n   expr_completion_state m_completion_state;\n \n+  /* The innermost block tracker.  */\n+  innermost_block_tracker *block_tracker;\n+\n private:\n \n   /* Data structure for saving values of arglist_len for function calls whose\n@@ -200,21 +206,12 @@ struct parser_state : public expr_builder\n class innermost_block_tracker\n {\n public:\n-  innermost_block_tracker ()\n-    : m_types (INNERMOST_BLOCK_FOR_SYMBOLS),\n+  innermost_block_tracker (innermost_block_tracker_types types\n+\t\t\t   = INNERMOST_BLOCK_FOR_SYMBOLS)\n+    : m_types (types),\n       m_innermost_block (NULL)\n   { /* Nothing.  */ }\n \n-  /* Reset the currently stored innermost block.  Usually called before\n-     parsing a new expression.  As the most common case is that we only\n-     want to gather the innermost block for symbols in an expression, this\n-     becomes the default block tracker type.  */\n-  void reset (innermost_block_tracker_types t = INNERMOST_BLOCK_FOR_SYMBOLS)\n-  {\n-    m_types = t;\n-    m_innermost_block = NULL;\n-  }\n-\n   /* Update the stored innermost block if the new block B is more inner\n      than the currently stored block, or if no block is stored yet.  The\n      type T tells us whether the block B was for a symbol or for a\n@@ -246,12 +243,6 @@ class innermost_block_tracker\n   const struct block *m_innermost_block;\n };\n \n-/* The innermost context required by the stack and register variables\n-   we've encountered so far.  This is cleared by the expression\n-   parsing functions before parsing an expression, and can queried\n-   once the parse is complete.  */\n-extern innermost_block_tracker innermost_block;\n-\n /* A string token, either a char-string or bit-string.  Char-strings are\n    used, for example, for the names of symbols.  */\n \n@@ -359,7 +350,8 @@ extern int operator_check_standard (struct expression *exp, int pos,\n \n extern const char *op_name_standard (enum exp_opcode);\n \n-extern void null_post_parser (expression_up *, int, int);\n+extern void null_post_parser (expression_up *, int, int,\n+\t\t\t      innermost_block_tracker *);\n \n extern bool parse_float (const char *p, int len,\n \t\t\t const struct type *type, gdb_byte *data);"
    },
    {
      "sha": "be12ef5e636f8bd0b8b5ea196a793552694dfa0e",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
      "patch": "@@ -1715,13 +1715,14 @@ display_command (const char *arg, int from_tty)\n       fmt.raw = 0;\n     }\n \n-  expression_up expr = parse_expression (exp);\n+  innermost_block_tracker tracker;\n+  expression_up expr = parse_expression (exp, &tracker);\n \n   newobj = new display ();\n \n   newobj->exp_string = xstrdup (exp);\n   newobj->exp = std::move (expr);\n-  newobj->block = innermost_block.block ();\n+  newobj->block = tracker.block ();\n   newobj->pspace = current_program_space;\n   newobj->number = ++display_number;\n   newobj->format = fmt;\n@@ -1882,8 +1883,9 @@ do_one_display (struct display *d)\n \n       TRY\n \t{\n-\t  d->exp = parse_expression (d->exp_string);\n-\t  d->block = innermost_block.block ();\n+\t  innermost_block_tracker tracker;\n+\t  d->exp = parse_expression (d->exp_string, &tracker);\n+\t  d->block = tracker.block ();\n \t}\n       CATCH (ex, RETURN_MASK_ALL)\n \t{"
    },
    {
      "sha": "6e22620600ebdc4c633e9e654ffbc3386bbdf148",
      "filename": "gdb/rust-exp.y",
      "status": "modified",
      "additions": 15,
      "deletions": 14,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/rust-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/rust-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-exp.y?ref=699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
      "patch": "@@ -118,9 +118,6 @@ static int rustyylex (YYSTYPE *, rust_parser *);\n static void rustyyerror (rust_parser *parser, const char *msg);\n \n static struct stoken make_stoken (const char *);\n-static struct block_symbol rust_lookup_symbol (const char *name,\n-\t\t\t\t\t       const struct block *block,\n-\t\t\t\t\t       const domain_enum domain);\n \n /* A regular expression for matching Rust numbers.  This is split up\n    since it is very long and this gives us a way to comment the\n@@ -241,6 +238,10 @@ struct rust_parser\n   int lex_operator (YYSTYPE *lvalp);\n   void push_back (char c);\n \n+  void update_innermost_block (struct block_symbol sym);\n+  struct block_symbol lookup_symbol (const char *name,\n+\t\t\t\t     const struct block *block,\n+\t\t\t\t     const domain_enum domain);\n   struct type *rust_lookup_type (const char *name, const struct block *block);\n   std::vector<struct type *> convert_params_to_types (rust_op_vector *params);\n   struct type *convert_ast_to_type (const struct rust_op *operation);\n@@ -1104,11 +1105,11 @@ rust_parser::super_name (const struct rust_op *ident, unsigned int n_supers)\n \n /* A helper that updates the innermost block as appropriate.  */\n \n-static void\n-update_innermost_block (struct block_symbol sym)\n+void\n+rust_parser::update_innermost_block (struct block_symbol sym)\n {\n   if (symbol_read_needs_frame (sym.symbol))\n-    innermost_block.update (sym);\n+    pstate->block_tracker->update (sym);\n }\n \n /* Lex a hex number with at least MIN digits and at most MAX\n@@ -1992,15 +1993,15 @@ munge_name_and_block (const char **name, const struct block **block)\n /* Like lookup_symbol, but handles Rust namespace conventions, and\n    doesn't require field_of_this_result.  */\n \n-static struct block_symbol\n-rust_lookup_symbol (const char *name, const struct block *block,\n-\t\t    const domain_enum domain)\n+struct block_symbol\n+rust_parser::lookup_symbol (const char *name, const struct block *block,\n+\t\t\t    const domain_enum domain)\n {\n   struct block_symbol result;\n \n   munge_name_and_block (&name, &block);\n \n-  result = lookup_symbol (name, block, domain, NULL);\n+  result = ::lookup_symbol (name, block, domain, NULL);\n   if (result.symbol != NULL)\n     update_innermost_block (result);\n   return result;\n@@ -2016,7 +2017,7 @@ rust_parser::rust_lookup_type (const char *name, const struct block *block)\n \n   munge_name_and_block (&name, &block);\n \n-  result = lookup_symbol (name, block, STRUCT_DOMAIN, NULL);\n+  result = ::lookup_symbol (name, block, STRUCT_DOMAIN, NULL);\n   if (result.symbol != NULL)\n     {\n       update_innermost_block (result);\n@@ -2387,8 +2388,8 @@ rust_parser::convert_ast_to_expression (const struct rust_op *operation,\n \t  }\n \n \tvarname = convert_name (operation);\n-\tsym = rust_lookup_symbol (varname, pstate->expression_context_block,\n-\t\t\t\t  VAR_DOMAIN);\n+\tsym = lookup_symbol (varname, pstate->expression_context_block,\n+\t\t\t     VAR_DOMAIN);\n \tif (sym.symbol != NULL && SYMBOL_CLASS (sym.symbol) != LOC_TYPEDEF)\n \t  {\n \t    write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n@@ -2726,7 +2727,7 @@ rust_lex_tests (void)\n \n   // Set up dummy \"parser\", so that rust_type works.\n   struct parser_state ps (&rust_language_defn, target_gdbarch (),\n-\t\t\t  nullptr, 0, 0, nullptr, 0);\n+\t\t\t  nullptr, 0, 0, nullptr, 0, nullptr);\n   rust_parser parser (&ps);\n \n   rust_lex_test_one (&parser, \"\", 0);"
    },
    {
      "sha": "abace990494e71e3954c2b53795fbba174544528",
      "filename": "gdb/varobj.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/699bd4cfa8895d0767d491a3e44ac09d3f4d1801/gdb/varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/varobj.c?ref=699bd4cfa8895d0767d491a3e44ac09d3f4d1801",
      "patch": "@@ -309,13 +309,14 @@ varobj_create (const char *objname,\n \t}\n \n       p = expression;\n+\n+      innermost_block_tracker tracker (INNERMOST_BLOCK_FOR_SYMBOLS\n+\t\t\t\t       | INNERMOST_BLOCK_FOR_REGISTERS);\n       /* Wrap the call to parse expression, so we can \n          return a sensible error.  */\n       TRY\n \t{\n-\t  var->root->exp = parse_exp_1 (&p, pc, block, 0,\n-\t\t\t\t\tINNERMOST_BLOCK_FOR_SYMBOLS\n-\t\t\t\t\t| INNERMOST_BLOCK_FOR_REGISTERS);\n+\t  var->root->exp = parse_exp_1 (&p, pc, block, 0, &tracker);\n \t}\n \n       CATCH (except, RETURN_MASK_ERROR)\n@@ -336,7 +337,7 @@ varobj_create (const char *objname,\n \n       var->format = variable_default_display (var.get ());\n       var->root->valid_block =\n-\tvar->root->floating ? NULL : innermost_block.block ();\n+\tvar->root->floating ? NULL : tracker.block ();\n       var->name = expression;\n       /* For a root var, the name and the expr are the same.  */\n       var->path_expr = expression;"
    }
  ]
}