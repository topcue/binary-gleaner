{
  "sha": "350fab54163e2dd178609d268e80bf31042d182d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzUwZmFiNTQxNjNlMmRkMTc4NjA5ZDI2OGU4MGJmMzEwNDJkMTgyZA==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-06-25T10:02:32Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-07-04T11:47:42Z"
    },
    "message": "Arm/AArch64: Use a single set of Arm register set size defines\n\nBoth targets were using a mixture of defines and hardcoded values.\nAdd a standard set in arch/arm.h and use throughout, ensuring that\nnone of the existing sizes change.\n\nNo functionality changes.\n\ngdb/ChangeLog:\n\n\t* aarch32-linux-nat.h (VFP_REGS_SIZE): Remove define.\n\t* aarch64-linux-nat.c (fetch_fpregs_from_thread)\n\t(store_fpregs_to_thread)\n\t(aarch64_linux_nat_target::read_description): Use ARM_VFP3_REGS_SIZE.\n\t* arch/arm.h (IWMMXT_VEC_REGISTER_SIZE, ARM_CORE_REGS_SIZE)\n\t(ARM_FP_REGS_SIZE, ARM_VFP2_REGS_SIZE, ARM_VFP3_REGS_SIZE)\n\t(IWMMXT_REGS_SIZE): Add define.\n\t* arm-linux-nat.c (IWMMXT_REGS_SIZE): Remove define.\n\t(fetch_vfp_regs, store_vfp_regs)\n\t(arm_linux_nat_target::read_description): Use ARM_VFP3_REGS_SIZE.\n\t* arm-tdep.c (arm_register_g_packet_guesses): Use new defines.\n\ngdb/gdbserver/ChangeLog:\n\n\t* linux-aarch32-low.c (arm_read_description, arm_regsets): Use new\n\tdefines.\n\t* linux-arm-low.c (arm_read_description, arm_regsets): Likewise.",
    "tree": {
      "sha": "f7d48bdd52a381b2f876ae6cf3a4ac58ec29adf9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f7d48bdd52a381b2f876ae6cf3a4ac58ec29adf9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/350fab54163e2dd178609d268e80bf31042d182d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/350fab54163e2dd178609d268e80bf31042d182d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/350fab54163e2dd178609d268e80bf31042d182d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/350fab54163e2dd178609d268e80bf31042d182d/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f0452268d6c7296106aba81f532b04dc08187352",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f0452268d6c7296106aba81f532b04dc08187352",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f0452268d6c7296106aba81f532b04dc08187352"
    }
  ],
  "stats": {
    "total": 100,
    "additions": 59,
    "deletions": 41
  },
  "files": [
    {
      "sha": "483ab9b9628f8d60d24b532553132dce989c805c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/350fab54163e2dd178609d268e80bf31042d182d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/350fab54163e2dd178609d268e80bf31042d182d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=350fab54163e2dd178609d268e80bf31042d182d",
      "patch": "@@ -1,3 +1,17 @@\n+2019-07-04  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* aarch32-linux-nat.h (VFP_REGS_SIZE): Remove define.\n+\t* aarch64-linux-nat.c (fetch_fpregs_from_thread)\n+\t(store_fpregs_to_thread)\n+\t(aarch64_linux_nat_target::read_description): Use ARM_VFP3_REGS_SIZE.\n+\t* arch/arm.h (IWMMXT_VEC_REGISTER_SIZE, ARM_CORE_REGS_SIZE)\n+\t(ARM_FP_REGS_SIZE, ARM_VFP2_REGS_SIZE, ARM_VFP3_REGS_SIZE)\n+\t(IWMMXT_REGS_SIZE): Add define.\n+\t* arm-linux-nat.c (IWMMXT_REGS_SIZE): Remove define.\n+\t(fetch_vfp_regs, store_vfp_regs)\n+\t(arm_linux_nat_target::read_description): Use ARM_VFP3_REGS_SIZE.\n+\t* arm-tdep.c (arm_register_g_packet_guesses): Use new defines.\n+\n 2019-07-04  Alan Hayward  <alan.hayward@arm.com>\n \n         * arch/arm-get-next-pcs.c (thumb_get_next_pcs_raw): Use ARM_"
    },
    {
      "sha": "e86593a8ad83cbc065ca09b266ec9115510e16d3",
      "filename": "gdb/aarch32-linux-nat.h",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/350fab54163e2dd178609d268e80bf31042d182d/gdb/aarch32-linux-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/350fab54163e2dd178609d268e80bf31042d182d/gdb/aarch32-linux-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch32-linux-nat.h?ref=350fab54163e2dd178609d268e80bf31042d182d",
      "patch": "@@ -18,11 +18,6 @@\n #ifndef AARCH32_LINUX_NAT_H\n #define AARCH32_LINUX_NAT_H\n \n-/* Fetch and store VFP Registers.  The kernel object has space for 32\n-   64-bit registers, and the FPSCR.  This is even when on a VFPv2 or\n-   VFPv3D16 target.  */\n-#define VFP_REGS_SIZE (32 * 8 + 4)\n-\n void aarch32_gp_regcache_supply (struct regcache *regcache, uint32_t *regs,\n \t\t\t\t int arm_apcs_32);\n "
    },
    {
      "sha": "7b60a9a0c383b672ad71c4f5f650ab206de3209c",
      "filename": "gdb/aarch64-linux-nat.c",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/350fab54163e2dd178609d268e80bf31042d182d/gdb/aarch64-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/350fab54163e2dd178609d268e80bf31042d182d/gdb/aarch64-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-nat.c?ref=350fab54163e2dd178609d268e80bf31042d182d",
      "patch": "@@ -30,6 +30,7 @@\n #include \"aarch64-tdep.h\"\n #include \"aarch64-linux-tdep.h\"\n #include \"aarch32-linux-nat.h\"\n+#include \"arch/arm.h\"\n #include \"nat/aarch64-linux.h\"\n #include \"nat/aarch64-linux-hw-point.h\"\n #include \"nat/aarch64-sve-linux-ptrace.h\"\n@@ -294,15 +295,15 @@ fetch_fpregs_from_thread (struct regcache *regcache)\n \n   /* Make sure REGS can hold all VFP registers contents on both aarch64\n      and arm.  */\n-  gdb_static_assert (sizeof regs >= VFP_REGS_SIZE);\n+  gdb_static_assert (sizeof regs >= ARM_VFP3_REGS_SIZE);\n \n   tid = regcache->ptid ().lwp ();\n \n   iovec.iov_base = &regs;\n \n   if (gdbarch_bfd_arch_info (gdbarch)->bits_per_word == 32)\n     {\n-      iovec.iov_len = VFP_REGS_SIZE;\n+      iovec.iov_len = ARM_VFP3_REGS_SIZE;\n \n       ret = ptrace (PTRACE_GETREGSET, tid, NT_ARM_VFP, &iovec);\n       if (ret < 0)\n@@ -341,14 +342,14 @@ store_fpregs_to_thread (const struct regcache *regcache)\n \n   /* Make sure REGS can hold all VFP registers contents on both aarch64\n      and arm.  */\n-  gdb_static_assert (sizeof regs >= VFP_REGS_SIZE);\n+  gdb_static_assert (sizeof regs >= ARM_VFP3_REGS_SIZE);\n   tid = regcache->ptid ().lwp ();\n \n   iovec.iov_base = &regs;\n \n   if (gdbarch_bfd_arch_info (gdbarch)->bits_per_word == 32)\n     {\n-      iovec.iov_len = VFP_REGS_SIZE;\n+      iovec.iov_len = ARM_VFP3_REGS_SIZE;\n \n       ret = ptrace (PTRACE_GETREGSET, tid, NT_ARM_VFP, &iovec);\n       if (ret < 0)\n@@ -638,13 +639,13 @@ const struct target_desc *\n aarch64_linux_nat_target::read_description ()\n {\n   int ret, tid;\n-  gdb_byte regbuf[VFP_REGS_SIZE];\n+  gdb_byte regbuf[ARM_VFP3_REGS_SIZE];\n   struct iovec iovec;\n \n   tid = inferior_ptid.lwp ();\n \n   iovec.iov_base = regbuf;\n-  iovec.iov_len = VFP_REGS_SIZE;\n+  iovec.iov_len = ARM_VFP3_REGS_SIZE;\n \n   ret = ptrace (PTRACE_GETREGSET, tid, NT_ARM_VFP, &iovec);\n   if (ret == 0)"
    },
    {
      "sha": "dfbbd56d28c74cb953c9905675162125a9b7bfd9",
      "filename": "gdb/arch/arm.h",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/350fab54163e2dd178609d268e80bf31042d182d/gdb/arch/arm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/350fab54163e2dd178609d268e80bf31042d182d/gdb/arch/arm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/arm.h?ref=350fab54163e2dd178609d268e80bf31042d182d",
      "patch": "@@ -99,6 +99,21 @@ enum arm_breakpoint_kinds\n /* IEEE extended doubles are 80 bits.  DWORD aligned they use 96 bits.  */\n #define ARM_FP_REGISTER_SIZE\t\t12\n #define ARM_VFP_REGISTER_SIZE\t\t8\n+#define IWMMXT_VEC_REGISTER_SIZE\t8\n+\n+/* Size of register sets.  */\n+\n+/* r0-r12,sp,lr,pc,cpsr.  */\n+#define ARM_CORE_REGS_SIZE (17 * ARM_INT_REGISTER_SIZE)\n+/* f0-f8,fps.  */\n+#define ARM_FP_REGS_SIZE (8 * ARM_FP_REGISTER_SIZE + ARM_INT_REGISTER_SIZE)\n+/* d0-d15,fpscr.  */\n+#define ARM_VFP2_REGS_SIZE (16 * ARM_VFP_REGISTER_SIZE + ARM_INT_REGISTER_SIZE)\n+/* d0-d31,fpscr.  */\n+#define ARM_VFP3_REGS_SIZE (32 * ARM_VFP_REGISTER_SIZE + ARM_INT_REGISTER_SIZE)\n+/* wR0-wR15,fpscr.  */\n+#define IWMMXT_REGS_SIZE (16 * IWMMXT_VEC_REGISTER_SIZE \\\n+\t\t\t  + 6 * ARM_INT_REGISTER_SIZE)\n \n /* Addresses for calling Thumb functions have the bit 0 set.\n    Here are some macros to test, set, or clear bit 0 of addresses.  */"
    },
    {
      "sha": "a1ad6fe01edca9b832128fe3fac3e039bd5f73d4",
      "filename": "gdb/arm-linux-nat.c",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/350fab54163e2dd178609d268e80bf31042d182d/gdb/arm-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/350fab54163e2dd178609d268e80bf31042d182d/gdb/arm-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-linux-nat.c?ref=350fab54163e2dd178609d268e80bf31042d182d",
      "patch": "@@ -276,8 +276,6 @@ store_regs (const struct regcache *regcache)\n /* Fetch all WMMX registers of the process and store into\n    regcache.  */\n \n-#define IWMMXT_REGS_SIZE (16 * 8 + 6 * 4)\n-\n static void\n fetch_wmmx_regs (struct regcache *regcache)\n {\n@@ -339,7 +337,7 @@ store_wmmx_regs (const struct regcache *regcache)\n static void\n fetch_vfp_regs (struct regcache *regcache)\n {\n-  gdb_byte regbuf[VFP_REGS_SIZE];\n+  gdb_byte regbuf[ARM_VFP3_REGS_SIZE];\n   int ret, tid;\n   struct gdbarch *gdbarch = regcache->arch ();\n   struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n@@ -352,7 +350,7 @@ fetch_vfp_regs (struct regcache *regcache)\n       struct iovec iov;\n \n       iov.iov_base = regbuf;\n-      iov.iov_len = VFP_REGS_SIZE;\n+      iov.iov_len = ARM_VFP3_REGS_SIZE;\n       ret = ptrace (PTRACE_GETREGSET, tid, NT_ARM_VFP, &iov);\n     }\n   else\n@@ -368,7 +366,7 @@ fetch_vfp_regs (struct regcache *regcache)\n static void\n store_vfp_regs (const struct regcache *regcache)\n {\n-  gdb_byte regbuf[VFP_REGS_SIZE];\n+  gdb_byte regbuf[ARM_VFP3_REGS_SIZE];\n   int ret, tid;\n   struct gdbarch *gdbarch = regcache->arch ();\n   struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n@@ -381,7 +379,7 @@ store_vfp_regs (const struct regcache *regcache)\n       struct iovec iov;\n \n       iov.iov_base = regbuf;\n-      iov.iov_len = VFP_REGS_SIZE;\n+      iov.iov_len = ARM_VFP3_REGS_SIZE;\n       ret = ptrace (PTRACE_GETREGSET, tid, NT_ARM_VFP, &iov);\n     }\n   else\n@@ -398,7 +396,7 @@ store_vfp_regs (const struct regcache *regcache)\n       struct iovec iov;\n \n       iov.iov_base = regbuf;\n-      iov.iov_len = VFP_REGS_SIZE;\n+      iov.iov_len = ARM_VFP3_REGS_SIZE;\n       ret = ptrace (PTRACE_SETREGSET, tid, NT_ARM_VFP, &iov);\n     }\n   else\n@@ -574,7 +572,7 @@ arm_linux_nat_target::read_description ()\n \t registers.  Support was added in 2.6.30.  */\n       pid = inferior_ptid.lwp ();\n       errno = 0;\n-      buf = (char *) alloca (VFP_REGS_SIZE);\n+      buf = (char *) alloca (ARM_VFP3_REGS_SIZE);\n       if (ptrace (PTRACE_GETVFPREGS, pid, 0, buf) < 0\n \t  && errno == EIO)\n \tresult = NULL;"
    },
    {
      "sha": "8e3607cdea5fab983c9bd2caa649aaf8e5e50c84",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 12,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/350fab54163e2dd178609d268e80bf31042d182d/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/350fab54163e2dd178609d268e80bf31042d182d/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=350fab54163e2dd178609d268e80bf31042d182d",
      "patch": "@@ -8781,25 +8781,16 @@ arm_register_g_packet_guesses (struct gdbarch *gdbarch)\n \t cater for remote targets whose register set layout is the\n \t same as the FPA layout.  */\n       register_remote_g_packet_guess (gdbarch,\n-\t\t\t\t      /* r0-r12,sp,lr,pc; f0-f7; fps,xpsr */\n-\t\t\t\t      (16 * ARM_INT_REGISTER_SIZE)\n-\t\t\t\t      + (8 * ARM_FP_REGISTER_SIZE)\n-\t\t\t\t      + (2 * ARM_INT_REGISTER_SIZE),\n+\t\t\t\t      ARM_CORE_REGS_SIZE + ARM_FP_REGS_SIZE,\n \t\t\t\t      tdesc_arm_with_m_fpa_layout);\n \n       /* The regular M-profile layout.  */\n-      register_remote_g_packet_guess (gdbarch,\n-\t\t\t\t      /* r0-r12,sp,lr,pc; xpsr */\n-\t\t\t\t      (16 * ARM_INT_REGISTER_SIZE)\n-\t\t\t\t      + ARM_INT_REGISTER_SIZE,\n+      register_remote_g_packet_guess (gdbarch, ARM_CORE_REGS_SIZE,\n \t\t\t\t      tdesc_arm_with_m);\n \n       /* M-profile plus M4F VFP.  */\n       register_remote_g_packet_guess (gdbarch,\n-\t\t\t\t      /* r0-r12,sp,lr,pc; d0-d15; fpscr,xpsr */\n-\t\t\t\t      (16 * ARM_INT_REGISTER_SIZE)\n-\t\t\t\t      + (16 * ARM_VFP_REGISTER_SIZE)\n-\t\t\t\t      + (2 * ARM_INT_REGISTER_SIZE),\n+\t\t\t\t      ARM_CORE_REGS_SIZE + ARM_VFP2_REGS_SIZE,\n \t\t\t\t      tdesc_arm_with_m_vfp_d16);\n     }\n "
    },
    {
      "sha": "0bd61131cbcb509f9b3d42f6d11f064374321232",
      "filename": "gdb/gdbserver/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/350fab54163e2dd178609d268e80bf31042d182d/gdb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/350fab54163e2dd178609d268e80bf31042d182d/gdb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/ChangeLog?ref=350fab54163e2dd178609d268e80bf31042d182d",
      "patch": "@@ -1,3 +1,9 @@\n+2019-07-04  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* linux-aarch32-low.c (arm_read_description, arm_regsets): Use new\n+\tdefines.\n+\t* linux-arm-low.c (arm_read_description, arm_regsets): Likewise.\n+\n 2019-07-04  Alan Hayward  <alan.hayward@arm.com>\n \n \t* configure.srv: Remove legacy xml."
    },
    {
      "sha": "a932373518d806213d3b9ad4fbd84bc80d9801f1",
      "filename": "gdb/gdbserver/linux-aarch32-low.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/350fab54163e2dd178609d268e80bf31042d182d/gdb/gdbserver/linux-aarch32-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/350fab54163e2dd178609d268e80bf31042d182d/gdb/gdbserver/linux-aarch32-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-aarch32-low.c?ref=350fab54163e2dd178609d268e80bf31042d182d",
      "patch": "@@ -143,10 +143,10 @@ arm_store_vfpregset (struct regcache *regcache, const void *buf)\n /* Register sets with using PTRACE_GETREGSET.  */\n \n static struct regset_info aarch32_regsets[] = {\n-  { PTRACE_GETREGSET, PTRACE_SETREGSET, NT_PRSTATUS, 18 * 4,\n-    GENERAL_REGS,\n+  { PTRACE_GETREGSET, PTRACE_SETREGSET, NT_PRSTATUS,\n+    ARM_CORE_REGS_SIZE + ARM_INT_REGISTER_SIZE, GENERAL_REGS,\n     arm_fill_gregset, arm_store_gregset },\n-  { PTRACE_GETREGSET, PTRACE_SETREGSET, NT_ARM_VFP, 32 * 8 + 4,\n+  { PTRACE_GETREGSET, PTRACE_SETREGSET, NT_ARM_VFP, ARM_VFP3_REGS_SIZE,\n     EXTENDED_REGS,\n     arm_fill_vfpregset, arm_store_vfpregset },\n   NULL_REGSET"
    },
    {
      "sha": "b323b1907846c94d9ee0eecb6151f1cc1078310b",
      "filename": "gdb/gdbserver/linux-arm-low.c",
      "status": "modified",
      "additions": 5,
      "deletions": 7,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/350fab54163e2dd178609d268e80bf31042d182d/gdb/gdbserver/linux-arm-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/350fab54163e2dd178609d268e80bf31042d182d/gdb/gdbserver/linux-arm-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-arm-low.c?ref=350fab54163e2dd178609d268e80bf31042d182d",
      "patch": "@@ -876,7 +876,7 @@ arm_read_description (void)\n       /* Now make sure that the kernel supports reading these\n \t registers.  Support was added in 2.6.30.  */\n       errno = 0;\n-      buf = (char *) xmalloc (32 * 8 + 4);\n+      buf = (char *) xmalloc (ARM_VFP3_REGS_SIZE);\n       if (ptrace (PTRACE_GETVFPREGS, pid, 0, buf) < 0\n \t  && errno == EIO)\n \tresult = tdesc_arm;\n@@ -973,14 +973,12 @@ arm_get_syscall_trapinfo (struct regcache *regcache, int *sysno)\n /* Register sets without using PTRACE_GETREGSET.  */\n \n static struct regset_info arm_regsets[] = {\n-  { PTRACE_GETREGS, PTRACE_SETREGS, 0, 18 * 4,\n-    GENERAL_REGS,\n+  { PTRACE_GETREGS, PTRACE_SETREGS, 0,\n+    ARM_CORE_REGS_SIZE + ARM_INT_REGISTER_SIZE, GENERAL_REGS,\n     arm_fill_gregset, arm_store_gregset },\n-  { PTRACE_GETWMMXREGS, PTRACE_SETWMMXREGS, 0, 16 * 8 + 6 * 4,\n-    EXTENDED_REGS,\n+  { PTRACE_GETWMMXREGS, PTRACE_SETWMMXREGS, 0, IWMMXT_REGS_SIZE, EXTENDED_REGS,\n     arm_fill_wmmxregset, arm_store_wmmxregset },\n-  { PTRACE_GETVFPREGS, PTRACE_SETVFPREGS, 0, 32 * 8 + 4,\n-    EXTENDED_REGS,\n+  { PTRACE_GETVFPREGS, PTRACE_SETVFPREGS, 0, ARM_VFP3_REGS_SIZE, EXTENDED_REGS,\n     arm_fill_vfpregset, arm_store_vfpregset },\n   NULL_REGSET\n };"
    }
  ]
}