{
  "sha": "0636b24556961d705b945f2465432df80e9ebf68",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDYzNmIyNDU1Njk2MWQ3MDViOTQ1ZjI0NjU0MzJkZjgwZTllYmY2OA==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-03-23T16:17:51Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-03-23T16:19:07Z"
    },
    "message": "Avoid trigger an assertion failure in the STABS parser by replacing the abort with an error return.\n\n\tPR 25714\n\t* wrstabs.c (stab_pop_type): Replace assertion with error return.\n\t* write_stabs_in_sections_debugging_info: Likewise.\n\t* stab_enum_type: Likewise.\n\t* stab_modify_type: Likewise.\n\t* stab_struct_field: Likewise.\n\t* stab_end_struct_type: Likewise.\n\t* stab_start_class_type: Likewise.\n\t* stab_class_static_member: Likewise.\n\t* stab_class_baseclass: Likewise.\n\t* stab_class_start_method: Likewise.\n\t* stab_class_method_var: Likewise.\n\t* stab_class_end_method: Likewise.\n\t* stab_end_class_type: Likewise.\n\t* stab_typedef_type: Likewise.\n\t* stab_start_function: Likewise.\n\t* stab_end_block: Likewise.\n\t* stab_lineno: Likewise.",
    "tree": {
      "sha": "7db042540daf047bd91e7d7d957e2bd949447eaf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7db042540daf047bd91e7d7d957e2bd949447eaf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0636b24556961d705b945f2465432df80e9ebf68",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0636b24556961d705b945f2465432df80e9ebf68",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0636b24556961d705b945f2465432df80e9ebf68",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0636b24556961d705b945f2465432df80e9ebf68/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fdde2fb60cc2d0c60d9d3f085a7b6c648376991e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fdde2fb60cc2d0c60d9d3f085a7b6c648376991e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fdde2fb60cc2d0c60d9d3f085a7b6c648376991e"
    }
  ],
  "stats": {
    "total": 77,
    "additions": 59,
    "deletions": 18
  },
  "files": [
    {
      "sha": "bad19ea8b296440ebb30e4ffdc1b7f0d24b37210",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0636b24556961d705b945f2465432df80e9ebf68/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0636b24556961d705b945f2465432df80e9ebf68/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=0636b24556961d705b945f2465432df80e9ebf68",
      "patch": "@@ -1,3 +1,24 @@\n+2020-03-23  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 25714\n+\t* wrstabs.c (stab_pop_type): Replace assertion with error return.\n+\t* write_stabs_in_sections_debugging_info: Likewise.\n+\t* stab_enum_type: Likewise.\n+\t* stab_modify_type: Likewise.\n+\t* stab_struct_field: Likewise.\n+\t* stab_end_struct_type: Likewise.\n+\t* stab_start_class_type: Likewise.\n+\t* stab_class_static_member: Likewise.\n+\t* stab_class_baseclass: Likewise.\n+\t* stab_class_start_method: Likewise.\n+\t* stab_class_method_var: Likewise.\n+\t* stab_class_end_method: Likewise.\n+\t* stab_end_class_type: Likewise.\n+\t* stab_typedef_type: Likewise.\n+\t* stab_start_function: Likewise.\n+\t* stab_end_block: Likewise.\n+\t* stab_lineno: Likewise.\n+\n 2020-03-20  Nick Clifton  <nickc@redhat.com>\n \n \t* readelf.c (get_compression_header): Add ATTRIBUTE_WARN_UNUSED_RESULT."
    },
    {
      "sha": "86abec2765c9a96f35003afc72cde9ac14390e5a",
      "filename": "binutils/wrstabs.c",
      "status": "modified",
      "additions": 38,
      "deletions": 18,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0636b24556961d705b945f2465432df80e9ebf68/binutils/wrstabs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0636b24556961d705b945f2465432df80e9ebf68/binutils/wrstabs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/wrstabs.c?ref=0636b24556961d705b945f2465432df80e9ebf68",
      "patch": "@@ -437,7 +437,8 @@ stab_pop_type (struct stab_write_handle *info)\n   char *ret;\n \n   s = info->type_stack;\n-  assert (s != NULL);\n+  if (s == NULL)\n+    return NULL;\n \n   info->type_stack = s->next;\n \n@@ -511,7 +512,8 @@ write_stabs_in_sections_debugging_info (bfd *abfd, void *dhandle,\n   if (! debug_write (dhandle, &stab_fns, (void *) &info))\n     return FALSE;\n \n-  assert (info.pending_lbrac == (bfd_vma) -1);\n+  if (info.pending_lbrac != (bfd_vma) -1)\n+    return FALSE;\n \n   /* Output a trailing N_SO.  */\n   if (! stab_write_symbol (&info, N_SO, 0, info.last_text_address,\n@@ -788,7 +790,8 @@ stab_enum_type (void *p, const char *tag, const char **names,\n \n   if (names == NULL)\n     {\n-      assert (tag != NULL);\n+      if (tag == NULL)\n+\treturn FALSE;\n \n       buf = (char *) xmalloc (10 + strlen (tag));\n       sprintf (buf, \"xe%s:\", tag);\n@@ -850,7 +853,8 @@ stab_modify_type (struct stab_write_handle *info, int mod,\n   long tindex;\n   char *s, *buf;\n \n-  assert (info->type_stack != NULL);\n+  if (info->type_stack == NULL)\n+    return FALSE;\n   targindex = info->type_stack->index;\n \n   if (targindex <= 0\n@@ -1360,8 +1364,9 @@ stab_struct_field (void *p, const char *name, bfd_vma bitpos,\n \n   /* Add this field to the end of the current struct fields, which is\n      currently on the top of the stack.  */\n+  if (info->type_stack->fields == NULL)\n+    return FALSE;\n \n-  assert (info->type_stack->fields != NULL);\n   n = (char *) xmalloc (strlen (info->type_stack->fields)\n \t\t\t+ strlen (name)\n \t\t\t+ strlen (s)\n@@ -1416,7 +1421,8 @@ stab_end_struct_type (void *p)\n   unsigned int size;\n   char *fields, *first, *buf;\n \n-  assert (info->type_stack != NULL && info->type_stack->fields != NULL);\n+  if (info->type_stack == NULL || info->type_stack->fields == NULL)\n+    return FALSE;\n \n   definition = info->type_stack->definition;\n   tindex = info->type_stack->index;\n@@ -1463,13 +1469,15 @@ stab_start_class_type (void *p, const char *tag, unsigned int id,\n \n       if (ownvptr)\n \t{\n-\t  assert (info->type_stack->index > 0);\n+\t  if (info->type_stack->index < 1)\n+\t    return FALSE;\n \t  vtable = (char *) xmalloc (20);\n \t  sprintf (vtable, \"~%%%ld\", info->type_stack->index);\n \t}\n       else\n \t{\n-\t  assert (vstring);\n+\t  if (vstring == NULL)\n+\t    return FALSE;\n \t  vtable = (char *) xmalloc (strlen (vstring) + 3);\n \t  sprintf (vtable, \"~%%%s\", vstring);\n \t  free (vstring);\n@@ -1499,7 +1507,8 @@ stab_class_static_member (void *p, const char *name, const char *physname,\n   /* Add this field to the end of the current struct fields, which is\n      currently on the top of the stack.  */\n \n-  assert (info->type_stack->fields != NULL);\n+  if (info->type_stack->fields == NULL)\n+    return FALSE;\n   n = (char *) xmalloc (strlen (info->type_stack->fields)\n \t\t\t+ strlen (name)\n \t\t\t+ strlen (s)\n@@ -1579,7 +1588,8 @@ stab_class_baseclass (void *p, bfd_vma bitpos, bfd_boolean is_virtual,\n \n   /* Add the new baseclass to the existing ones.  */\n \n-  assert (info->type_stack != NULL && info->type_stack->fields != NULL);\n+  if (info->type_stack == NULL || info->type_stack->fields == NULL)\n+    return FALSE;\n \n   if (info->type_stack->baseclasses == NULL)\n     c = 0;\n@@ -1611,7 +1621,8 @@ stab_class_start_method (void *p, const char *name)\n   struct stab_write_handle *info = (struct stab_write_handle *) p;\n   char *m;\n \n-  assert (info->type_stack != NULL && info->type_stack->fields != NULL);\n+  if (info->type_stack == NULL || info->type_stack->fields == NULL)\n+    return FALSE;\n \n   if (info->type_stack->methods == NULL)\n     {\n@@ -1656,7 +1667,8 @@ stab_class_method_var (struct stab_write_handle *info, const char *physname,\n       context = stab_pop_type (info);\n     }\n \n-  assert (info->type_stack != NULL && info->type_stack->methods != NULL);\n+  if (info->type_stack == NULL || info->type_stack->methods == NULL)\n+    return FALSE;\n \n   switch (visibility)\n     {\n@@ -1757,7 +1769,8 @@ stab_class_end_method (void *p)\n {\n   struct stab_write_handle *info = (struct stab_write_handle *) p;\n \n-  assert (info->type_stack != NULL && info->type_stack->methods != NULL);\n+  if (info->type_stack == NULL || info->type_stack->methods == NULL)\n+    return FALSE;\n \n   /* We allocated enough room on info->type_stack->methods to add the\n      trailing semicolon.  */\n@@ -1776,7 +1789,10 @@ stab_end_class_type (void *p)\n   unsigned int i = 0;\n   char *buf;\n \n-  assert (info->type_stack != NULL && info->type_stack->fields != NULL);\n+  if (info->type_stack == NULL\n+      || info->type_stack->string == NULL\n+      || info->type_stack->fields == NULL)\n+    return FALSE;\n \n   /* Work out the size we need to allocate for the class definition.  */\n \n@@ -1849,7 +1865,8 @@ stab_typedef_type (void *p, const char *name)\n   struct string_hash_entry *h;\n \n   h = string_hash_lookup (&info->typedef_hash, name, FALSE, FALSE);\n-  assert (h != NULL && h->index > 0);\n+  if (h == NULL || h->index < 1)\n+    return FALSE;\n \n   return stab_push_defined_type (info, h->index, h->size);\n }\n@@ -2081,7 +2098,8 @@ stab_start_function (void *p, const char *name, bfd_boolean globalp)\n   struct stab_write_handle *info = (struct stab_write_handle *) p;\n   char *rettype, *buf;\n \n-  assert (info->nesting == 0 && info->fun_offset == -1);\n+  if (info->nesting != 0 || info->fun_offset != -1)\n+    return FALSE;\n \n   rettype = stab_pop_type (info);\n \n@@ -2223,7 +2241,8 @@ stab_end_block (void *p, bfd_vma addr)\n       info->pending_lbrac = (bfd_vma) -1;\n     }\n \n-  assert (info->nesting > 0);\n+  if (info->nesting < 1)\n+    return FALSE;\n \n   --info->nesting;\n \n@@ -2250,7 +2269,8 @@ stab_lineno (void *p, const char *file, unsigned long lineno, bfd_vma addr)\n {\n   struct stab_write_handle *info = (struct stab_write_handle *) p;\n \n-  assert (info->lineno_filename != NULL);\n+  if (info->lineno_filename == NULL)\n+    return FALSE;\n \n   if (addr > info->last_text_address)\n     info->last_text_address = addr;"
    }
  ]
}