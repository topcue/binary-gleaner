{
  "sha": "e904f56d02afd68ffd9333435fe8b026f1e14b5f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTkwNGY1NmQwMmFmZDY4ZmZkOTMzMzQzNWZlOGIwMjZmMWUxNGI1Zg==",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2015-12-30T04:52:57Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-01-07T17:18:59Z"
    },
    "message": "gdb/sim: add support for exporting memory map\n\nThis allows gdb to quickly dump & process the memory map that the sim\nknows about.  This isn't fully accurate, but is largely limited by the\ngdb memory map format.  While the sim supports RWX bits, gdb can only\nhandle RW or RO regions.",
    "tree": {
      "sha": "21af166171abe5a1aa80ed2b2b37b8cbc9b64bcf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/21af166171abe5a1aa80ed2b2b37b8cbc9b64bcf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e904f56d02afd68ffd9333435fe8b026f1e14b5f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e904f56d02afd68ffd9333435fe8b026f1e14b5f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e904f56d02afd68ffd9333435fe8b026f1e14b5f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e904f56d02afd68ffd9333435fe8b026f1e14b5f/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f478212851a25cd9849ad7f41112d08f91ab308b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f478212851a25cd9849ad7f41112d08f91ab308b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f478212851a25cd9849ad7f41112d08f91ab308b"
    }
  ],
  "stats": {
    "total": 98,
    "additions": 98,
    "deletions": 0
  },
  "files": [
    {
      "sha": "02c561de07e9404b52a30b5ffb7819d66e922c8a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e904f56d02afd68ffd9333435fe8b026f1e14b5f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e904f56d02afd68ffd9333435fe8b026f1e14b5f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e904f56d02afd68ffd9333435fe8b026f1e14b5f",
      "patch": "@@ -1,3 +1,9 @@\n+2021-01-07  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* remote-sim.c: Include memory-map.h.\n+\t(gdbsim_target): Define memory_map override.\n+\t(gdbsim_target::memory_map): Define.\n+\n 2021-01-07  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-lang.c (do_full_match): Conditionally skip \"_ada_\" prefix."
    },
    {
      "sha": "b21a4e80ee6a4f6cd5cf731bf709d090b1392d7e",
      "filename": "gdb/remote-sim.c",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e904f56d02afd68ffd9333435fe8b026f1e14b5f/gdb/remote-sim.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e904f56d02afd68ffd9333435fe8b026f1e14b5f/gdb/remote-sim.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote-sim.c?ref=e904f56d02afd68ffd9333435fe8b026f1e14b5f",
      "patch": "@@ -42,6 +42,7 @@\n #include \"readline/readline.h\"\n #include \"gdbthread.h\"\n #include \"gdbsupport/byte-vector.h\"\n+#include \"memory-map.h\"\n \n /* Prototypes */\n \n@@ -164,6 +165,7 @@ struct gdbsim_target final\n \n   bool has_all_memory ()  override;\n   bool has_memory ()  override;\n+  std::vector<mem_region> memory_map () override;\n \n private:\n   sim_inferior_data *get_inferior_data_by_ptid (ptid_t ptid,\n@@ -1270,6 +1272,22 @@ gdbsim_target::has_memory ()\n   return true;\n }\n \n+/* Get memory map from the simulator.  */\n+\n+std::vector<mem_region>\n+gdbsim_target::memory_map ()\n+{\n+  struct sim_inferior_data *sim_data\n+    = get_sim_inferior_data (current_inferior (), SIM_INSTANCE_NEEDED);\n+  std::vector<mem_region> result;\n+  gdb::unique_xmalloc_ptr<char> text (sim_memory_map (sim_data->gdbsim_desc));\n+\n+  if (text != nullptr)\n+    result = parse_memory_map (text.get ());\n+\n+  return result;\n+}\n+\n void _initialize_remote_sim ();\n void\n _initialize_remote_sim ()"
    },
    {
      "sha": "27efbaf877fec4502f25a7e79dae0edbb9e71f9d",
      "filename": "include/gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e904f56d02afd68ffd9333435fe8b026f1e14b5f/include/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e904f56d02afd68ffd9333435fe8b026f1e14b5f/include/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/gdb/ChangeLog?ref=e904f56d02afd68ffd9333435fe8b026f1e14b5f",
      "patch": "@@ -1,3 +1,7 @@\n+2021-01-07  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* remote-sim.h (sim_memory_map): Define.\n+\n 2016-07-15  John Baldwin  <jhb@FreeBSD.org>\n \n \t* signals.def: Add GDB_SIGNAL_LIBRT."
    },
    {
      "sha": "a3ba3aa36cd2ec1fe310c629d2035da97cc92780",
      "filename": "include/gdb/remote-sim.h",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e904f56d02afd68ffd9333435fe8b026f1e14b5f/include/gdb/remote-sim.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e904f56d02afd68ffd9333435fe8b026f1e14b5f/include/gdb/remote-sim.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/gdb/remote-sim.h?ref=e904f56d02afd68ffd9333435fe8b026f1e14b5f",
      "patch": "@@ -213,6 +213,15 @@ int sim_store_register (SIM_DESC sd, int regno, unsigned char *buf, int length);\n void sim_info (SIM_DESC sd, int verbose);\n \n \n+/* Return a memory map in XML format.\n+\n+   The caller must free the returned string.\n+\n+   For details on the format, see GDB's Memory Map Format documentation.  */\n+\n+char *sim_memory_map (SIM_DESC sd);\n+\n+\n /* Run (or resume) the simulated program.\n \n    STEP, when non-zero indicates that only a single simulator cycle"
    },
    {
      "sha": "05948f2fb31fd58b8f0ed9ba5663752a6f84c2c3",
      "filename": "sim/common/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e904f56d02afd68ffd9333435fe8b026f1e14b5f/sim/common/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e904f56d02afd68ffd9333435fe8b026f1e14b5f/sim/common/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/ChangeLog?ref=e904f56d02afd68ffd9333435fe8b026f1e14b5f",
      "patch": "@@ -1,3 +1,7 @@\n+2021-01-07  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* sim-core.c (sim_memory_map): Define.\n+\n 2021-01-04  Mike Frysinger  <vapier@gentoo.org>\n \n \t* acinclude.m4 (ACX_BUGURL): Change http:// to https://."
    },
    {
      "sha": "538230635bc94421c842b07572e2db1ba737639f",
      "filename": "sim/common/sim-core.c",
      "status": "modified",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e904f56d02afd68ffd9333435fe8b026f1e14b5f/sim/common/sim-core.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e904f56d02afd68ffd9333435fe8b026f1e14b5f/sim/common/sim-core.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-core.c?ref=e904f56d02afd68ffd9333435fe8b026f1e14b5f",
      "patch": "@@ -452,6 +452,63 @@ sim_core_translate (sim_core_mapping *mapping,\n }\n \n \n+#if EXTERN_SIM_CORE_P\n+/* See include/gdb/remote-sim.h.  */\n+char *\n+sim_memory_map (SIM_DESC sd)\n+{\n+  sim_core *core = STATE_CORE (sd);\n+  unsigned map;\n+  char *s1, *s2, *entry;\n+\n+  s1 = xstrdup (\n+    \"<?xml version='1.0'?>\\n\"\n+    \"<!DOCTYPE memory-map PUBLIC '+//IDN gnu.org//DTD GDB Memory Map V1.0//EN'\"\n+    \" 'http://sourceware.org/gdb/gdb-memory-map.dtd'>\\n\"\n+    \"<memory-map>\\n\");\n+\n+  for (map = 0; map < nr_maps; ++map)\n+    {\n+      sim_core_mapping *mapping;\n+\n+      for (mapping = core->common.map[map].first;\n+\t   mapping != NULL;\n+\t   mapping = mapping->next)\n+\t{\n+\t  /* GDB can only handle a single address space.  */\n+\t  if (mapping->level != 0)\n+\t    continue;\n+\n+\t  entry = xasprintf (\"<memory type='ram' start='%#x' length='%#x'/>\\n\",\n+\t\t\t     mapping->base, mapping->nr_bytes);\n+\t  /* The sim memory map is organized by access, not by addresses.\n+\t     So a RWX memory map will have three independent mappings.\n+\t     GDB's format cannot support overlapping regions, so we have\n+\t     to filter those out.\n+\n+\t     Further, GDB can only handle RX (\"rom\") or RWX (\"ram\") mappings.\n+\t     We just emit \"ram\" everywhere to keep it simple.  If GDB ever\n+\t     gains support for more stuff, we can expand this.\n+\n+\t     Using strstr is kind of hacky, but as long as the map is not huge\n+\t     (we're talking <10K), should be fine.  */\n+\t  if (strstr (s1, entry) == NULL)\n+\t    {\n+\t      s2 = concat (s1, entry, NULL);\n+\t      free (s1);\n+\t      s1 = s2;\n+\t    }\n+\t  free (entry);\n+\t}\n+    }\n+\n+  s2 = concat (s1, \"</memory-map>\", NULL);\n+  free (s1);\n+  return s2;\n+}\n+#endif\n+\n+\n #if EXTERN_SIM_CORE_P\n unsigned\n sim_core_read_buffer (SIM_DESC sd,"
    }
  ]
}