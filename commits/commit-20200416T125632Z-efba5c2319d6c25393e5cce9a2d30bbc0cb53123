{
  "sha": "efba5c2319d6c25393e5cce9a2d30bbc0cb53123",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWZiYTVjMjMxOWQ2YzI1MzkzZTVjY2U5YTJkMzBiYmMwY2I1MzEyMw==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-04-16T12:56:32Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-04-16T12:56:32Z"
    },
    "message": "[gdb/symtab] Handle PU without import in \"save gdb-index\"\n\nConsider the test-case added in this patch, with resulting dwarf:\n...\n  Compilation Unit @ offset 0xc7:\n   Length:        0x2c (32-bit)\n   Version:       4\n   Abbrev Offset: 0x64\n   Pointer Size:  8\n <0><d2>: Abbrev Number: 2 (DW_TAG_partial_unit)\n    <d3>   DW_AT_language    : 2        (non-ANSI C)\n    <d4>   DW_AT_name        : imported_unit.c\n <1><e4>: Abbrev Number: 3 (DW_TAG_base_type)\n    <e5>   DW_AT_byte_size   : 4\n    <e6>   DW_AT_encoding    : 5        (signed)\n    <e7>   DW_AT_name        : int\n <1><eb>: Abbrev Number: 4 (DW_TAG_subprogram)\n    <ec>   DW_AT_name        : main\n    <f1>   DW_AT_type        : <0xe4>\n    <f5>   DW_AT_external    : 1\n <1><f6>: Abbrev Number: 0\n  Compilation Unit @ offset 0xf7:\n   Length:        0x2c (32-bit)\n   Version:       4\n   Abbrev Offset: 0x85\n   Pointer Size:  8\n <0><102>: Abbrev Number: 2 (DW_TAG_compile_unit)\n    <103>   DW_AT_language    : 2       (non-ANSI C)\n    <104>   DW_AT_name        : <artificial>\n <1><111>: Abbrev Number: 3 (DW_TAG_subprogram)\n    <112>   DW_AT_abstract_origin: <0xeb>\n    <116>   DW_AT_low_pc      : 0x4004a7\n    <11e>   DW_AT_high_pc     : 0x4004b2\n <1><126>: Abbrev Number: 0\n...\n\nWhen run with target board cc-with-gdb-index, we run into:\n...\n(gdb) break main\nwarning: (Internal error: pc 0x4004a7 in read in CU, but not in symtab.)\n<repeat>\nwarning: (Internal error: pc 0x4004ab in read in CU, but not in symtab.)\n<repeat>\nBreakpoint 1 at 0x4004ab\n(gdb) PASS: gdb.dwarf2/imported-unit-runto-main.exp: setting breakpoint at main\nrun\nStarting program: /data/gdb_versions/devel/build/gdb/testsuite/outputs/gdb.dwarf2/imported-unit-runto-main/imported-unit-runto-main\nwarning: (Internal error: pc 0x4004a7 in read in CU, but not in symtab.)\n<repeat>\nwarning: (Internal error: pc 0x4004ab in read in CU, but not in symtab.)\n<repeat>\n\nBreakpoint 1, warning: (Internal error: pc 0x4004ab in read in CU, but not in symtab.)\nwarning: (Internal error: pc 0x4004ab in read in CU, but not in symtab.)\n<repeat>\n0x00000000004004ab in main ()\nwarning: (Internal error: pc 0x4004ab in read in CU, but not in symtab.)\n<repeat>\n(gdb) FAIL: gdb.dwarf2/imported-unit-runto-main.exp: running to main in runto\n...\n\nLooking at the .gdb_index section contents using objdump --dwarf=gdb_index, we\nhave:\n...\nCU table:\n[  0] 0x0 - 0x2d\n[  1] 0x2e - 0xa4\n[  2] 0xa5 - 0xc6\n[  3] 0xf7 - 0x126\n[  4] 0x127 - 0x2de\n[  5] 0x2df - 0x300\n\nAddress table:\n00000000004004a7 00000000004004b2 4\n\nSymbol table:\n[489] main: 4 [global, function]\n...\nWe see that both the main symbol, and main address range map to CU 4, which has\noffset range 0x127 - 0x2de, while main actually is contained in CU 3 at offset\nrange 0xf7 - 0x126.\n\nThis is caused by this continue in write_gdbindex, which triggers for the PU:\n...\n      /* CU of a shared file from 'dwz -m' may be unused by this main file.\n        It may be referenced from a local scope but in such case it does not\n        need to be present in .gdb_index.  */\n      if (psymtab == NULL)\n       continue;\n...\nThe continue causes the PU to be skipped in the CU table (we can see that the\nPU offset range 0xc7-0xf6 is missing) but the references are not taking that\ninto account.\n\nI've tried fixing this in the optimal way, by updating the references, but ran\ninto trouble when follow_die_offset tries to find the CU for the inter-CU\nref.  Because the PU is missing from the CU table,\ndwarf2_find_containing_comp_unit bisects to the wrong CU.\n\nFix this by not skipping the PU in the CU table.\n\nBuild and reg-tested on x86_64-linux, with native and target boards\ncc-with-gdb-index, cc-with-dwz and cc-with-dwz-m.\n\ngdb/ChangeLog:\n\n2020-04-16  Tom de Vries  <tdevries@suse.de>\n\n\tPR symtab/25791\n\t* dwarf2/index-write.c (write_gdbindex): Generate CU table entries for\n\tCUs without psymtab.\n\ngdb/testsuite/ChangeLog:\n\n2020-04-16  Tom de Vries  <tdevries@suse.de>\n\n\tPR symtab/25791\n\t* gdb.dwarf2/gdb-add-index.exp (add_gdb_index): Move ...\n\t(ensure_gdb_index): and factor out and move ...\n\t* lib/gdb.exp (add_gdb_index, ensure_gdb_index): ... here.\n\t* gdb.dwarf2/imported-unit-runto-main.exp: New file.",
    "tree": {
      "sha": "11ab4d9a2cd646e4bc94ba63708c1cdd0cb09224",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/11ab4d9a2cd646e4bc94ba63708c1cdd0cb09224"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/efba5c2319d6c25393e5cce9a2d30bbc0cb53123",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efba5c2319d6c25393e5cce9a2d30bbc0cb53123",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/efba5c2319d6c25393e5cce9a2d30bbc0cb53123",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efba5c2319d6c25393e5cce9a2d30bbc0cb53123/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "97ed802d1531632efba69f34accd811217579d0b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/97ed802d1531632efba69f34accd811217579d0b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/97ed802d1531632efba69f34accd811217579d0b"
    }
  ],
  "stats": {
    "total": 208,
    "additions": 160,
    "deletions": 48
  },
  "files": [
    {
      "sha": "b019ca9b46126d2747dfda9a269270406e5425a8",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efba5c2319d6c25393e5cce9a2d30bbc0cb53123/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efba5c2319d6c25393e5cce9a2d30bbc0cb53123/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=efba5c2319d6c25393e5cce9a2d30bbc0cb53123",
      "patch": "@@ -1,3 +1,9 @@\n+2020-04-16  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR symtab/25791\n+\t* dwarf2/index-write.c (write_gdbindex): Generate CU table entries for\n+\tCUs without psymtab.\n+\n 2020-04-16  Kevin Buettner  <kevinb@redhat.com>\n \n \t* python/python.c (do_start_initialization): Don't call"
    },
    {
      "sha": "b6a13a0ca169616b5faa31454e313d32a9d7cc3e",
      "filename": "gdb/dwarf2/index-write.c",
      "status": "modified",
      "additions": 8,
      "deletions": 11,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efba5c2319d6c25393e5cce9a2d30bbc0cb53123/gdb/dwarf2/index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efba5c2319d6c25393e5cce9a2d30bbc0cb53123/gdb/dwarf2/index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-write.c?ref=efba5c2319d6c25393e5cce9a2d30bbc0cb53123",
      "patch": "@@ -1426,18 +1426,15 @@ write_gdbindex (struct dwarf2_per_objfile *dwarf2_per_objfile, FILE *out_file,\n \t= dwarf2_per_objfile->all_comp_units[i];\n       partial_symtab *psymtab = per_cu->v.psymtab;\n \n-      /* CU of a shared file from 'dwz -m' may be unused by this main file.\n-\t It may be referenced from a local scope but in such case it does not\n-\t need to be present in .gdb_index.  */\n-      if (psymtab == NULL)\n-\tcontinue;\n-\n-      if (psymtab->user == NULL)\n-\trecursively_write_psymbols (objfile, psymtab, &symtab,\n-\t\t\t\t    psyms_seen, i);\n+      if (psymtab != NULL)\n+\t{\n+\t  if (psymtab->user == NULL)\n+\t    recursively_write_psymbols (objfile, psymtab, &symtab,\n+\t\t\t\t\tpsyms_seen, i);\n \n-      const auto insertpair = cu_index_htab.emplace (psymtab, i);\n-      gdb_assert (insertpair.second);\n+\t  const auto insertpair = cu_index_htab.emplace (psymtab, i);\n+\t  gdb_assert (insertpair.second);\n+\t}\n \n       /* The all_comp_units list contains CUs read from the objfile as well as\n \t from the eventual dwz file.  We need to place the entry in the"
    },
    {
      "sha": "eaa96b06e7620be1d02888487c3c4ed0eba25220",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efba5c2319d6c25393e5cce9a2d30bbc0cb53123/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efba5c2319d6c25393e5cce9a2d30bbc0cb53123/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=efba5c2319d6c25393e5cce9a2d30bbc0cb53123",
      "patch": "@@ -1,3 +1,11 @@\n+2020-04-16  Tom de Vries  <tdevries@suse.de>\n+\n+\tPR symtab/25791\n+\t* gdb.dwarf2/gdb-add-index.exp (add_gdb_index): Move ...\n+\t(ensure_gdb_index): and factor out and move ...\n+\t* lib/gdb.exp (add_gdb_index, ensure_gdb_index): ... here.\n+\t* gdb.dwarf2/imported-unit-runto-main.exp: New file.\n+\n 2020-04-16  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.base/maint-expand-symbols-header-file.exp: Set language before"
    },
    {
      "sha": "708f4b13751b523f1922d928701d79da1900f6ec",
      "filename": "gdb/testsuite/gdb.dwarf2/gdb-add-index.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 37,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efba5c2319d6c25393e5cce9a2d30bbc0cb53123/gdb/testsuite/gdb.dwarf2/gdb-add-index.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efba5c2319d6c25393e5cce9a2d30bbc0cb53123/gdb/testsuite/gdb.dwarf2/gdb-add-index.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/gdb-add-index.exp?ref=efba5c2319d6c25393e5cce9a2d30bbc0cb53123",
      "patch": "@@ -27,48 +27,14 @@ if { [prepare_for_testing \"failed to prepare\" \"${testfile}\" \\\n     return -1\n }\n \n-# Add a .gdb_index section to PROGRAM.\n-# PROGRAM is assumed to be the output of standard_output_file.\n-# Returns the 0 if there is a failure, otherwise 1.\n-\n-proc add_gdb_index { program } {\n-    global srcdir GDB env BUILD_DATA_DIRECTORY\n-    set contrib_dir \"$srcdir/../contrib\"\n-    set env(GDB) \"$GDB --data-directory=$BUILD_DATA_DIRECTORY\"\n-    set result [catch \"exec $contrib_dir/gdb-add-index.sh $program\" output]\n-    if { $result != 0 } {\n-\tverbose -log \"result is $result\"\n-\tverbose -log \"output is $output\"\n-\treturn 0\n-    }\n-\n-    return 1\n-}\n-\n-# Build a copy of the program with an index (.gdb_index/.debug_names).\n-# But only if the toolchain didn't already create one: gdb doesn't support\n-# building an index from a program already using one.\n-\n-set test \"check if index present\"\n-gdb_test_multiple \"mt print objfiles ${testfile}\" $test {\n-    -re \"gdb_index.*${gdb_prompt} $\" {\n-\tset binfile_with_index $binfile\n-    }\n-    -re \"debug_names.*${gdb_prompt} $\" {\n-\tset binfile_with_index $binfile\n-    }\n-    -re \"Psymtabs.*${gdb_prompt} $\" {\n-\tif { [add_gdb_index $binfile] != \"1\" } {\n-\t    return -1\n-\t}\n-\tset binfile_with_index $binfile\n-    }\n+if { [ensure_gdb_index $binfile] == -1 } {\n+    return -1\n }\n \n # Ok, we have a copy of $binfile with an index.\n # Restart gdb and verify the index was used.\n \n-clean_restart ${binfile_with_index}\n+clean_restart ${binfile}\n gdb_test \"mt print objfiles ${testfile}\" \\\n     \"(gdb_index|debug_names).*\" \\\n     \"index used\""
    },
    {
      "sha": "279468405342febb1da85ac6636a3af3d37cc43b",
      "filename": "gdb/testsuite/gdb.dwarf2/imported-unit-runto-main.exp",
      "status": "added",
      "additions": 92,
      "deletions": 0,
      "changes": 92,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efba5c2319d6c25393e5cce9a2d30bbc0cb53123/gdb/testsuite/gdb.dwarf2/imported-unit-runto-main.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efba5c2319d6c25393e5cce9a2d30bbc0cb53123/gdb/testsuite/gdb.dwarf2/imported-unit-runto-main.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/imported-unit-runto-main.exp?ref=efba5c2319d6c25393e5cce9a2d30bbc0cb53123",
      "patch": "@@ -0,0 +1,92 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF-2 and use gas.\n+if {![dwarf2_support]} {\n+    return 0\n+};\n+\n+standard_testfile main.c .S\n+\n+set executable ${testfile}\n+set asm_file [standard_output_file ${srcfile2}]\n+\n+# We need to know the size of integer types in order to write some of the\n+# debugging info we'd like to generate.\n+if [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}] {\n+    return -1\n+}\n+\n+# Create the DWARF.\n+Dwarf::assemble $asm_file {\n+    declare_labels cu_label main_label int_label\n+    declare_labels aaa_label\n+    set int_size [get_sizeof \"int\" 4]\n+\n+    global srcdir subdir srcfile\n+\n+    extern main\n+\n+    set main_range [function_range main ${srcdir}/${subdir}/${srcfile}]\n+    set main_start [lindex $main_range 0]\n+    set main_length [lindex $main_range 1]\n+\n+    cu {} {\n+\tcu_label: partial_unit {\n+\t    {language @DW_LANG_C}\n+\t    {name \"imported_unit.c\"}\n+\t} {\n+\t    int_label: base_type {\n+\t\t{byte_size $int_size sdata}\n+\t\t{encoding @DW_ATE_signed}\n+\t\t{name int}\n+\t    }\n+\n+\t    main_label: subprogram {\n+\t\t{name main}\n+\t\t{type :$int_label}\n+\t\t{external 1 flag}\n+\t    }\n+\t}\n+    }\n+\n+    cu {} {\n+\tcompile_unit {\n+\t    {language @DW_LANG_C}\n+\t    {name \"<artificial>\"}\n+\t} {\n+\t    subprogram {\n+\t\t{abstract_origin %$main_label}\n+\t\t{low_pc $main_start addr}\n+\t\t{high_pc \"$main_start + $main_length\" addr}\n+\t    }\n+\t}\n+    }\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t  [list $srcfile $asm_file] {nodebug}] } {\n+    return -1\n+}\n+\n+if { [ensure_gdb_index $binfile] == -1 } {\n+    return -1\n+}\n+\n+clean_restart ${binfile}\n+\n+runto main message"
    },
    {
      "sha": "8418c3d87530174e499395e8175fb3e36f135487",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efba5c2319d6c25393e5cce9a2d30bbc0cb53123/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efba5c2319d6c25393e5cce9a2d30bbc0cb53123/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=efba5c2319d6c25393e5cce9a2d30bbc0cb53123",
      "patch": "@@ -7038,5 +7038,48 @@ proc verify_psymtab_expanded { filename readin } {\n     }\n }\n \n+# Add a .gdb_index section to PROGRAM.\n+# PROGRAM is assumed to be the output of standard_output_file.\n+# Returns the 0 if there is a failure, otherwise 1.\n+\n+proc add_gdb_index { program } {\n+    global srcdir GDB env BUILD_DATA_DIRECTORY\n+    set contrib_dir \"$srcdir/../contrib\"\n+    set env(GDB) \"$GDB --data-directory=$BUILD_DATA_DIRECTORY\"\n+    set result [catch \"exec $contrib_dir/gdb-add-index.sh $program\" output]\n+    if { $result != 0 } {\n+\tverbose -log \"result is $result\"\n+\tverbose -log \"output is $output\"\n+\treturn 0\n+    }\n+\n+    return 1\n+}\n+\n+# Add a .gdb_index section to PROGRAM, unless it alread has an index\n+# (.gdb_index/.debug_names).  Gdb doesn't support building an index from a\n+# program already using one.  Return 1 if a .gdb_index was added, return 0\n+# if it already contained an index, and -1 if an error occurred.\n+\n+proc ensure_gdb_index { binfile } {\n+    set testfile [file tail $binfile]\n+    set test \"check if index present\"\n+    gdb_test_multiple \"mt print objfiles ${testfile}\" $test {\n+\t-re -wrap \"gdb_index.*\" {\n+\t    return 0\n+\t}\n+\t-re -wrap \"debug_names.*\" {\n+\t    return 0\n+\t}\n+\t-re -wrap \"Psymtabs.*\" {\n+\t    if { [add_gdb_index $binfile] != \"1\" } {\n+\t\treturn -1\n+\t    }\n+\t    return 1\n+\t}\n+    }\n+    return -1\n+}\n+\n # Always load compatibility stuff.\n load_lib future.exp"
    }
  ]
}