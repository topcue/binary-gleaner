{
  "sha": "382aae06322799a25ea52fe61b243cbca4db8d66",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzgyYWFlMDYzMjI3OTlhMjVlYTUyZmU2MWIyNDNjYmNhNGRiOGQ2Ng==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-04-01T21:31:47Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-04-01T21:31:47Z"
    },
    "message": "x86: Only allow S + A relocations against absolute symbol\n\nSince value of non-preemptible absolute symbol (SHN_ABS) won't change,\nonly relocations, which can be resolved as absolute value + addend, and\nGOTPCREL relocations, where absolute value + addend is stored in the GOT\nslot, against non-preemptible absolute symbol are allowed in PIE and\nshared library.\n\nAlso convert load relocation to R_386_32, R_X86_64_32S or R_X86_64_32 for\nrelocation against non-preemptible absolute symbol.  Don't convert to\nR_X86_64_32S nor R_X86_64_32 for non-preemptible absolute symbol if they\noverflow.\n\nbfd/\n\n\tPR ld/25749\n\tPR ld/25754\n\t* elf32-i386.c (elf_i386_convert_load_reloc): Convert load\n\trelocation to R_386_32 for relocation against non-preemptible\n\tabsolute symbol.\n\t(elf_i386_check_relocs): Call _bfd_elf_x86_valid_reloc_p.  Don't\n\tallocate dynamic relocation for non-preemptible absolute symbol.\n\t(elf_i386_relocate_section): Pass sec to\n\tGENERATE_DYNAMIC_RELOCATION_P.\n\t* elf64-x86-64.c (R_X86_64_converted_reloc_bit): Moved.\n\t(elf_x86_64_convert_load_reloc): Covert load relocation to\n\tR_X86_64_32S or R_X86_64_32 for relocation against non-preemptible\n\tabsolute symbol.  Don't convert to R_X86_64_32S nor R_X86_64_32\n\tfor non-preemptible absolute symbol if they overflow.\n\t(elf_x86_64_check_relocs): Call _bfd_elf_x86_valid_reloc_p.  Set\n\ttls_type for GOT slot to GOT_ABS for non-preemptible absolute\n\tsymbol.  Don't allocate dynamic relocation for non-preemptible\n\tabsolute symbol.\n\t(elf_x86_64_relocate_section): Don't generate relative relocation\n\tfor GOTPCREL relocations aganst local absolute symbol.  Pass sec\n\tto GENERATE_DYNAMIC_RELOCATION_P.\n\t* elfxx-x86.c (elf_x86_allocate_dynrelocs): No dynamic relocation\n\tagainst non-preemptible absolute symbol.\n\t(_bfd_elf_x86_valid_reloc_p): New function.\n\t(_bfd_x86_elf_size_dynamic_sections): No dynamic relocation for\n\tGOT_ABS GOT slot.\n\t* elfxx-x86.h (GENERATE_DYNAMIC_RELOCATION_P): Add an SEC\n\targument.  Don't generate dynamic relocation against\n\tnon-preemptible absolute symbol.\n\t(ABS_SYMBOL_P): New.\n\t(GENERATE_RELATIVE_RELOC_P): Don't generate relative relocation\n\tagainst non-preemptible absolute symbol.\n\t(GOT_ABS): New.\n\t(R_X86_64_converted_reloc_bit): New.  Moved from elf64-x86-64.c.\n\t(_bfd_elf_x86_valid_reloc_p): New.\n\nld/\n\n\tPR ld/25749\n\tPR ld/25754\n\t* testsuite/ld-elf/linux-x86.exp: Run ld/25749 tests.\n\t* testsuite/ld-elf/pr25749-1.c: New file.\n\t* testsuite/ld-elf/pr25749-1a.c: Likewise.\n\t* testsuite/ld-elf/pr25749-1b.c: Likewise.\n\t* testsuite/ld-elf/pr25749-1b.err: Likewise.\n\t* testsuite/ld-elf/pr25749-1c.c: Likewise.\n\t* testsuite/ld-elf/pr25749-1d.c: Likewise.\n\t* testsuite/ld-elf/pr25749-2.c: Likewise.\n\t* testsuite/ld-elf/pr25749-2a.s: Likewise.\n\t* testsuite/ld-elf/pr25749-2b.s: Likewise.\n\t* testsuite/ld-elf/pr25749.rd: Likewise.\n\t* testsuite/ld-elf/pr25754-1a.c: Likewise.\n\t* testsuite/ld-elf/pr25754-1b.s: Likewise.\n\t* testsuite/ld-elf/pr25754-2a.c: Likewise.\n\t* testsuite/ld-elf/pr25754-2b.err: Likewise.\n\t* testsuite/ld-elf/pr25754-2b.s: Likewise.\n\t* testsuite/ld-elf/pr25754-3a.c: Likewise.\n\t* testsuite/ld-elf/pr25754-3b.s: Likewise.\n\t* testsuite/ld-elf/pr25754-4a.c: Likewise.\n\t* testsuite/ld-elf/pr25754-4b.s: Likewise.\n\t* testsuite/ld-elf/pr25754-4c.s: Likewise.\n\t* testsuite/ld-elf/pr25754-5a.c: Likewise.\n\t* testsuite/ld-elf/pr25754-5b.s: Likewise.\n\t* testsuite/ld-elf/pr25754-5c.s: Likewise.\n\t* testsuite/ld-elf/pr25754-6a.c: Likewise.\n\t* testsuite/ld-elf/pr25754-6b.s: Likewise.\n\t* testsuite/ld-x86-64/pr19609-6a.d: Don't expect linker error.",
    "tree": {
      "sha": "bc60e7b2d1d5acc2622c393933788146f8b1c291",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bc60e7b2d1d5acc2622c393933788146f8b1c291"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/382aae06322799a25ea52fe61b243cbca4db8d66",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/382aae06322799a25ea52fe61b243cbca4db8d66",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/382aae06322799a25ea52fe61b243cbca4db8d66",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/382aae06322799a25ea52fe61b243cbca4db8d66/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6b4a335bf7b7996e904e895b3fdc35443c40cfca",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6b4a335bf7b7996e904e895b3fdc35443c40cfca",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6b4a335bf7b7996e904e895b3fdc35443c40cfca"
    }
  ],
  "stats": {
    "total": 778,
    "additions": 746,
    "deletions": 32
  },
  "files": [
    {
      "sha": "2ed10465791c9c768d6f29725b55319664ac9803",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -1,3 +1,41 @@\n+2020-04-01  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR ld/25749\n+\tPR ld/25754\n+\t* elf32-i386.c (elf_i386_convert_load_reloc): Convert load\n+\trelocation to R_386_32 for relocation against non-preemptible\n+\tabsolute symbol.\n+\t(elf_i386_check_relocs): Call _bfd_elf_x86_valid_reloc_p.  Don't\n+\tallocate dynamic relocation for non-preemptible absolute symbol.\n+\t(elf_i386_relocate_section): Pass sec to\n+\tGENERATE_DYNAMIC_RELOCATION_P.\n+\t* elf64-x86-64.c (R_X86_64_converted_reloc_bit): Moved.\n+\t(elf_x86_64_convert_load_reloc): Covert load relocation to\n+\tR_X86_64_32S or R_X86_64_32 for relocation against non-preemptible\n+\tabsolute symbol.  Don't convert to R_X86_64_32S nor R_X86_64_32\n+\tfor non-preemptible absolute symbol if they overflow.\n+\t(elf_x86_64_check_relocs): Call _bfd_elf_x86_valid_reloc_p.  Set\n+\ttls_type for GOT slot to GOT_ABS for non-preemptible absolute\n+\tsymbol.  Don't allocate dynamic relocation for non-preemptible\n+\tabsolute symbol.\n+\t(elf_x86_64_relocate_section): Don't generate relative relocation\n+\tfor GOTPCREL relocations aganst local absolute symbol.  Pass sec\n+\tto GENERATE_DYNAMIC_RELOCATION_P.\n+\t* elfxx-x86.c (elf_x86_allocate_dynrelocs): No dynamic relocation\n+\tagainst non-preemptible absolute symbol.\n+\t(_bfd_elf_x86_valid_reloc_p): New function.\n+\t(_bfd_x86_elf_size_dynamic_sections): No dynamic relocation for\n+\tGOT_ABS GOT slot.\n+\t* elfxx-x86.h (GENERATE_DYNAMIC_RELOCATION_P): Add an SEC\n+\targument.  Don't generate dynamic relocation against\n+\tnon-preemptible absolute symbol.\n+\t(ABS_SYMBOL_P): New.\n+\t(GENERATE_RELATIVE_RELOC_P): Don't generate relative relocation\n+\tagainst non-preemptible absolute symbol.\n+\t(GOT_ABS): New.\n+\t(R_X86_64_converted_reloc_bit): New.  Moved from elf64-x86-64.c.\n+\t(_bfd_elf_x86_valid_reloc_p): New.\n+\n 2020-04-01  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR ld/16017"
    },
    {
      "sha": "51c3e863044b7b5e525c735b305414ccb4fd6ca4",
      "filename": "bfd/elf32-i386.c",
      "status": "modified",
      "additions": 29,
      "deletions": 11,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/bfd/elf32-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/bfd/elf32-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-i386.c?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -1226,6 +1226,7 @@ elf_i386_convert_load_reloc (bfd *abfd, Elf_Internal_Shdr *symtab_hdr,\n   bfd_vma nop_offset;\n   bfd_boolean is_pic;\n   bfd_boolean to_reloc_32;\n+  bfd_boolean abs_symbol;\n   unsigned int r_type;\n   unsigned int r_symndx;\n   bfd_vma roff = irel->r_offset;\n@@ -1249,18 +1250,29 @@ elf_i386_convert_load_reloc (bfd *abfd, Elf_Internal_Shdr *symtab_hdr,\n   modrm = bfd_get_8 (abfd, contents + roff - 1);\n   baseless = (modrm & 0xc7) == 0x5;\n \n+  if (h)\n+    {\n+      /* NB: Also set linker_def via SYMBOL_REFERENCES_LOCAL_P.  */\n+      local_ref = SYMBOL_REFERENCES_LOCAL_P (link_info, h);\n+      isym = NULL;\n+      abs_symbol = ABS_SYMBOL_P (h);\n+    }\n+  else\n+    {\n+      local_ref = TRUE;\n+      isym = bfd_sym_from_r_symndx (&htab->sym_cache, abfd,\n+\t\t\t\t    r_symndx);\n+      abs_symbol = isym->st_shndx == SHN_ABS;\n+    }\n+\n   if (baseless && is_pic)\n     {\n       /* For PIC, disallow R_386_GOT32X without a base register\n \t since we don't know what the GOT base is.  */\n       const char *name;\n \n       if (h == NULL)\n-\t{\n-\t  isym = bfd_sym_from_r_symndx (&htab->sym_cache, abfd,\n-\t\t\t\t\tr_symndx);\n-\t  name = bfd_elf_sym_name (abfd, symtab_hdr, isym, NULL);\n-\t}\n+\tname = bfd_elf_sym_name (abfd, symtab_hdr, isym, NULL);\n       else\n \tname = h->root.root.string;\n \n@@ -1294,9 +1306,6 @@ elf_i386_convert_load_reloc (bfd *abfd, Elf_Internal_Shdr *symtab_hdr,\n \tgoto convert_load;\n     }\n \n-  /* NB: Also set linker_def via SYMBOL_REFERENCES_LOCAL_P.  */\n-  local_ref = SYMBOL_REFERENCES_LOCAL_P (link_info, h);\n-\n   /* Undefined weak symbol is only bound locally in executable\n      and its reference is resolved as 0.  */\n   if (h->root.type == bfd_link_hash_undefweak\n@@ -1396,6 +1405,9 @@ elf_i386_convert_load_reloc (bfd *abfd, Elf_Internal_Shdr *symtab_hdr,\n \tconvert_load:\n \t  if (opcode == 0x8b)\n \t    {\n+\t      if (abs_symbol && local_ref)\n+\t\tto_reloc_32 = TRUE;\n+\n \t      if (to_reloc_32)\n \t\t{\n \t\t  /* Convert \"mov foo@GOT[(%reg1)], %reg2\" to\n@@ -1519,6 +1531,7 @@ elf_i386_check_relocs (bfd *abfd,\n       Elf_Internal_Sym *isym;\n       const char *name;\n       bfd_boolean size_reloc;\n+      bfd_boolean no_dynreloc;\n \n       r_symndx = ELF32_R_SYM (rel->r_info);\n       r_type = ELF32_R_TYPE (rel->r_info);\n@@ -1587,6 +1600,10 @@ elf_i386_check_relocs (bfd *abfd,\n \t    goto error_return;\n \t}\n \n+      if (!_bfd_elf_x86_valid_reloc_p (sec, info, htab, rel, h, isym,\n+\t\t\t\t       symtab_hdr, &no_dynreloc))\n+\treturn FALSE;\n+\n       if (! elf_i386_tls_transition (info, abfd, sec, contents,\n \t\t\t\t     symtab_hdr, sym_hashes,\n \t\t\t\t     &r_type, GOT_UNKNOWN,\n@@ -1827,8 +1844,9 @@ elf_i386_check_relocs (bfd *abfd,\n \n \t  size_reloc = FALSE;\n \tdo_size:\n-\t  if (NEED_DYNAMIC_RELOCATION_P (info, FALSE, h, sec, r_type,\n-\t\t\t\t\t R_386_32))\n+\t  if (!no_dynreloc\n+\t      && NEED_DYNAMIC_RELOCATION_P (info, FALSE, h, sec, r_type,\n+\t\t\t\t\t    R_386_32))\n \t    {\n \t      struct elf_dyn_relocs *p;\n \t      struct elf_dyn_relocs **head;\n@@ -2704,7 +2722,7 @@ elf_i386_relocate_section (bfd *output_bfd,\n \t      || is_vxworks_tls)\n \t    break;\n \n-\t  if (GENERATE_DYNAMIC_RELOCATION_P (info, eh, r_type,\n+\t  if (GENERATE_DYNAMIC_RELOCATION_P (info, eh, r_type, sec,\n \t\t\t\t\t     FALSE, resolved_to_zero,\n \t\t\t\t\t     (r_type == R_386_PC32)))\n \t    {"
    },
    {
      "sha": "4c9ad78dd74a600a3da7a45f8fbf2e7d2d2b5cca",
      "filename": "bfd/elf64-x86-64.c",
      "status": "modified",
      "additions": 68,
      "deletions": 13,
      "changes": 81,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/bfd/elf64-x86-64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/bfd/elf64-x86-64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-x86-64.c?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -196,9 +196,6 @@ static reloc_howto_type x86_64_elf_howto_table[] =\n \tFALSE)\n };\n \n-/* Set if a relocation is converted from a GOTPCREL relocation.  */\n-#define R_X86_64_converted_reloc_bit (1 << 7)\n-\n #define X86_PCREL_TYPE_P(TYPE)\t\t\\\n   (   ((TYPE) == R_X86_64_PC8)\t\t\\\n    || ((TYPE) == R_X86_64_PC16)\t\t\\\n@@ -1509,13 +1506,16 @@ elf_x86_64_convert_load_reloc (bfd *abfd,\n   bfd_boolean no_overflow;\n   bfd_boolean relocx;\n   bfd_boolean to_reloc_pc32;\n+  bfd_boolean abs_symbol;\n+  bfd_boolean local_ref;\n   asection *tsec;\n   bfd_signed_vma raddend;\n   unsigned int opcode;\n   unsigned int modrm;\n   unsigned int r_type = *r_type_p;\n   unsigned int r_symndx;\n   bfd_vma roff = irel->r_offset;\n+  bfd_vma abs_relocation;\n \n   if (roff < (r_type == R_X86_64_REX_GOTPCRELX ? 3 : 2))\n     return TRUE;\n@@ -1559,6 +1559,9 @@ elf_x86_64_convert_load_reloc (bfd *abfd,\n \t\t   || no_overflow\n \t\t   || is_pic);\n \n+  abs_symbol = FALSE;\n+  abs_relocation = 0;\n+\n   /* Get the symbol referred to by the reloc.  */\n   if (h == NULL)\n     {\n@@ -1569,8 +1572,13 @@ elf_x86_64_convert_load_reloc (bfd *abfd,\n       if (isym->st_shndx == SHN_UNDEF)\n \treturn TRUE;\n \n+      local_ref = TRUE;\n       if (isym->st_shndx == SHN_ABS)\n-\ttsec = bfd_abs_section_ptr;\n+\t{\n+\t  tsec = bfd_abs_section_ptr;\n+\t  abs_symbol = TRUE;\n+\t  abs_relocation = isym->st_value;\n+\t}\n       else if (isym->st_shndx == SHN_COMMON)\n \ttsec = bfd_com_section_ptr;\n       else if (isym->st_shndx == SHN_X86_64_LCOMMON)\n@@ -1586,9 +1594,11 @@ elf_x86_64_convert_load_reloc (bfd *abfd,\n \t GOTPCRELX relocations since we need to modify REX byte.\n \t It is OK convert mov with R_X86_64_GOTPCREL to\n \t R_X86_64_PC32.  */\n-      bfd_boolean local_ref;\n       struct elf_x86_link_hash_entry *eh = elf_x86_hash_entry (h);\n \n+      abs_symbol = ABS_SYMBOL_P (h);\n+      abs_relocation = h->root.u.def.value;\n+\n       /* NB: Also set linker_def via SYMBOL_REFERENCES_LOCAL_P.  */\n       local_ref = SYMBOL_REFERENCES_LOCAL_P (link_info, h);\n       if ((relocx || opcode == 0x8b)\n@@ -1728,6 +1738,9 @@ elf_x86_64_convert_load_reloc (bfd *abfd,\n \n       if (opcode == 0x8b)\n \t{\n+\t  if (abs_symbol && local_ref)\n+\t    to_reloc_pc32 = FALSE;\n+\n \t  if (to_reloc_pc32)\n \t    {\n \t      /* Convert \"mov foo@GOTPCREL(%rip), %reg\" to\n@@ -1788,6 +1801,21 @@ elf_x86_64_convert_load_reloc (bfd *abfd,\n \t  r_type = (rex & REX_W) != 0 ? R_X86_64_32S : R_X86_64_32;\n \n \trewrite_modrm_rex:\n+\t  if (abs_relocation)\n+\t    {\n+\t      /* Check if R_X86_64_32S/R_X86_64_32 fits.  */\n+\t      if (r_type == R_X86_64_32S)\n+\t\t{\n+\t\t  if ((abs_relocation + 0x80000000) > 0xffffffff)\n+\t\t    return TRUE;\n+\t\t}\n+\t      else\n+\t\t{\n+\t\t  if (abs_relocation > 0xffffffff)\n+\t\t    return TRUE;\n+\t\t}\n+\t    }\n+\n \t  bfd_put_8 (abfd, modrm, contents + roff - 1);\n \n \t  if (rex)\n@@ -1879,6 +1907,7 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n       const char *name;\n       bfd_boolean size_reloc;\n       bfd_boolean converted_reloc;\n+      bfd_boolean no_dynreloc;\n \n       r_symndx = htab->r_sym (rel->r_info);\n       r_type = ELF32_R_TYPE (rel->r_info);\n@@ -1983,6 +2012,10 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \t    converted = TRUE;\n \t}\n \n+      if (!_bfd_elf_x86_valid_reloc_p (sec, info, htab, rel, h, isym,\n+\t\t\t\t       symtab_hdr, &no_dynreloc))\n+\treturn FALSE;\n+\n       if (! elf_x86_64_tls_transition (info, abfd, sec, contents,\n \t\t\t\t       symtab_hdr, sym_hashes,\n \t\t\t\t       &r_type, GOT_UNKNOWN,\n@@ -2029,12 +2062,26 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \n \t    switch (r_type)\n \t      {\n-\t      default: tls_type = GOT_NORMAL; break;\n-\t      case R_X86_64_TLSGD: tls_type = GOT_TLS_GD; break;\n-\t      case R_X86_64_GOTTPOFF: tls_type = GOT_TLS_IE; break;\n+\t      default:\n+\t\ttls_type = GOT_NORMAL;\n+\t\tif (h)\n+\t\t  {\n+\t\t    if (ABS_SYMBOL_P (h))\n+\t\t      tls_type = GOT_ABS;\n+\t\t  }\n+\t\telse if (isym->st_shndx == SHN_ABS)\n+\t\t  tls_type = GOT_ABS;\n+\t\tbreak;\n+\t      case R_X86_64_TLSGD:\n+\t\ttls_type = GOT_TLS_GD;\n+\t\tbreak;\n+\t      case R_X86_64_GOTTPOFF:\n+\t\ttls_type = GOT_TLS_IE;\n+\t\tbreak;\n \t      case R_X86_64_GOTPC32_TLSDESC:\n \t      case R_X86_64_TLSDESC_CALL:\n-\t\ttls_type = GOT_TLS_GDESC; break;\n+\t\ttls_type = GOT_TLS_GDESC;\n+\t\tbreak;\n \t      }\n \n \t    if (h != NULL)\n@@ -2245,8 +2292,9 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \n \t  size_reloc = FALSE;\n \tdo_size:\n-\t  if (NEED_DYNAMIC_RELOCATION_P (info, TRUE, h, sec, r_type,\n-\t\t\t\t\t htab->pointer_r_type))\n+\t  if (!no_dynreloc\n+\t      && NEED_DYNAMIC_RELOCATION_P (info, TRUE, h, sec, r_type,\n+\t\t\t\t\t    htab->pointer_r_type))\n \t    {\n \t      struct elf_dyn_relocs *p;\n \t      struct elf_dyn_relocs **head;\n@@ -2880,7 +2928,14 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \t\t\t      base_got->contents + off);\n \t\t  local_got_offsets[r_symndx] |= 1;\n \n-\t\t  if (bfd_link_pic (info))\n+\t\t  /* NB: GOTPCREL relocations against local absolute\n+\t\t     symbol store relocation value in the GOT slot\n+\t\t     without relative relocation.  */\n+\t\t  if (bfd_link_pic (info)\n+\t\t      && !(sym->st_shndx == SHN_ABS\n+\t\t\t   && (r_type == R_X86_64_GOTPCREL\n+\t\t\t       || r_type == R_X86_64_GOTPCRELX\n+\t\t\t       || r_type == R_X86_64_REX_GOTPCRELX)))\n \t\t    relative_reloc = TRUE;\n \t\t}\n \t    }\n@@ -3175,7 +3230,7 @@ elf_x86_64_relocate_section (bfd *output_bfd,\n \t\t\t\t    && (X86_PCREL_TYPE_P (r_type)\n \t\t\t\t\t|| X86_SIZE_TYPE_P (r_type)));\n \n-\t  if (GENERATE_DYNAMIC_RELOCATION_P (info, eh, r_type,\n+\t  if (GENERATE_DYNAMIC_RELOCATION_P (info, eh, r_type, sec,\n \t\t\t\t\t     need_copy_reloc_in_pie,\n \t\t\t\t\t     resolved_to_zero, FALSE))\n \t    {"
    },
    {
      "sha": "0fc75fbedfb7f6086b0c803dcc2f4b01de76a7fc",
      "filename": "bfd/elfxx-x86.c",
      "status": "modified",
      "additions": 100,
      "deletions": 3,
      "changes": 103,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/bfd/elfxx-x86.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/bfd/elfxx-x86.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-x86.c?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -347,7 +347,8 @@ elf_x86_allocate_dynrelocs (struct elf_link_hash_entry *h, void *inf)\n \t (but if both R_386_TLS_IE_32 and R_386_TLS_IE is present, we\n \t need two), R_386_TLS_GD and R_X86_64_TLSGD need one if local\n \t symbol and two if global.  No dynamic relocation against\n-\t resolved undefined weak symbol in executable.  */\n+\t resolved undefined weak symbol in executable.  No dynamic\n+\t relocation against non-preemptible absolute symbol.  */\n       if (tls_type == GOT_TLS_IE_BOTH)\n \thtab->elf.srelgot->size += 2 * htab->sizeof_reloc;\n       else if ((GOT_TLS_GD_P (tls_type) && h->dynindx == -1)\n@@ -359,7 +360,9 @@ elf_x86_allocate_dynrelocs (struct elf_link_hash_entry *h, void *inf)\n \t       && ((ELF_ST_VISIBILITY (h->other) == STV_DEFAULT\n \t\t    && !resolved_to_zero)\n \t\t   || h->root.type != bfd_link_hash_undefweak)\n-\t       && (bfd_link_pic (info)\n+\t       && ((bfd_link_pic (info)\n+\t\t    && !(h->dynindx == -1\n+\t\t\t && ABS_SYMBOL_P (h)))\n \t\t   || WILL_CALL_FINISH_DYNAMIC_SYMBOL (dyn, 0, h)))\n \thtab->elf.srelgot->size += htab->sizeof_reloc;\n       if (GOT_TLS_GDESC_P (tls_type))\n@@ -952,6 +955,100 @@ _bfd_x86_elf_link_check_relocs (bfd *abfd, struct bfd_link_info *info)\n   return _bfd_elf_link_check_relocs (abfd, info);\n }\n \n+bfd_boolean\n+_bfd_elf_x86_valid_reloc_p (asection *input_section,\n+\t\t\t    struct bfd_link_info *info,\n+\t\t\t    struct elf_x86_link_hash_table *htab,\n+\t\t\t    const Elf_Internal_Rela *rel,\n+\t\t\t    struct elf_link_hash_entry *h,\n+\t\t\t    Elf_Internal_Sym *sym,\n+\t\t\t    Elf_Internal_Shdr *symtab_hdr,\n+\t\t\t    bfd_boolean *no_dynreloc_p)\n+{\n+  bfd_boolean valid_p = TRUE;\n+\n+  *no_dynreloc_p = FALSE;\n+\n+  /* Check If relocation against non-preemptible absolute symbol is\n+     valid in PIC.  FIXME: Can't use SYMBOL_REFERENCES_LOCAL_P since\n+     it may call _bfd_elf_link_hide_sym_by_version and result in\n+     ld-elfvers/ vers21 test failure.  */\n+  if (bfd_link_pic (info)\n+      && (h == NULL || SYMBOL_REFERENCES_LOCAL (info, h)))\n+    {\n+      const struct elf_backend_data *bed;\n+      unsigned int r_type;\n+      Elf_Internal_Rela irel;\n+\n+      /* Skip non-absolute symbol.  */\n+      if (h)\n+\t{\n+\t  if (!ABS_SYMBOL_P (h))\n+\t    return valid_p;\n+\t}\n+      else if (sym->st_shndx != SHN_ABS)\n+\treturn valid_p;\n+\n+      bed = get_elf_backend_data (input_section->owner);\n+      r_type = ELF32_R_TYPE (rel->r_info);\n+      irel = *rel;\n+\n+      /* Only allow relocations against absolute symbol, which can be\n+\t resolved as absolute value + addend.  GOTPCREL relocations\n+\t are allowed since absolute value + addend is stored in the\n+\t GOT slot.  */\n+      if (bed->target_id == X86_64_ELF_DATA)\n+\t{\n+\t  r_type &= ~R_X86_64_converted_reloc_bit;\n+\t  valid_p = (r_type == R_X86_64_64\n+\t\t     || r_type == R_X86_64_32\n+\t\t     || r_type == R_X86_64_32S\n+\t\t     || r_type == R_X86_64_16\n+\t\t     || r_type == R_X86_64_8\n+\t\t     || r_type == R_X86_64_GOTPCREL\n+\t\t     || r_type == R_X86_64_GOTPCRELX\n+\t\t     || r_type == R_X86_64_REX_GOTPCRELX);\n+\t  if (!valid_p)\n+\t    {\n+\t      unsigned int r_symndx = htab->r_sym (rel->r_info);\n+\t      irel.r_info = htab->r_info (r_symndx, r_type);\n+\t    }\n+\t}\n+      else\n+\tvalid_p = (r_type == R_386_32\n+\t\t   || r_type == R_386_16\n+\t\t   || r_type == R_386_8);\n+\n+      if (valid_p)\n+\t*no_dynreloc_p = TRUE;\n+      else\n+\t{\n+\t  const char *name;\n+\t  arelent internal_reloc;\n+\n+\t  if (!bed->elf_info_to_howto (input_section->owner,\n+\t\t\t\t       &internal_reloc, &irel)\n+\t      || internal_reloc.howto == NULL)\n+\t    abort ();\n+\n+\t  if (h)\n+\t    name = h->root.root.string;\n+\t  else\n+\t    name = bfd_elf_sym_name (input_section->owner, symtab_hdr,\n+\t\t\t\t     sym, NULL);\n+\t  info->callbacks->einfo\n+\t    /* xgettext:c-format */\n+\t    (_(\"%F%P: %pB: relocation %s against absolute symbol \"\n+\t       \"`%s' in section `%pA' is disallowed\\n\"),\n+\t     input_section->owner, internal_reloc.howto->name, name,\n+\t     input_section);\n+\t  bfd_set_error (bfd_error_bad_value);\n+\t}\n+    }\n+\n+  return valid_p;\n+}\n+\n /* Set the sizes of the dynamic sections.  */\n \n bfd_boolean\n@@ -1065,7 +1162,7 @@ _bfd_x86_elf_size_dynamic_sections (bfd *output_bfd,\n \t\t      || *local_tls_type == GOT_TLS_IE_BOTH)\n \t\t    s->size += htab->got_entry_size;\n \t\t}\n-\t      if (bfd_link_pic (info)\n+\t      if ((bfd_link_pic (info) && *local_tls_type != GOT_ABS)\n \t\t  || GOT_TLS_GD_ANY_P (*local_tls_type)\n \t\t  || (*local_tls_type & GOT_TLS_IE))\n \t\t{"
    },
    {
      "sha": "6e91f242622baa8caf99ff209a5f04341b0d577c",
      "filename": "bfd/elfxx-x86.h",
      "status": "modified",
      "additions": 25,
      "deletions": 4,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/bfd/elfxx-x86.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/bfd/elfxx-x86.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-x86.h?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -119,11 +119,15 @@\n    Copy dynamic function pointer relocations.  Don't generate dynamic\n    relocations against resolved undefined weak symbols in PIE, except\n    when PC32_RELOC is TRUE.  Undefined weak symbol is bound locally\n-   when PIC is false.  */\n-#define GENERATE_DYNAMIC_RELOCATION_P(INFO, EH, R_TYPE, \\\n+   when PIC is false.  Don't generate dynamic relocations against\n+   non-preemptible absolute symbol.  */\n+#define GENERATE_DYNAMIC_RELOCATION_P(INFO, EH, R_TYPE, SEC, \\\n \t\t\t\t      NEED_COPY_RELOC_IN_PIE, \\\n \t\t\t\t      RESOLVED_TO_ZERO, PC32_RELOC) \\\n   ((bfd_link_pic (INFO) \\\n+    && !(bfd_is_abs_section (SEC) \\\n+\t && ((EH) == NULL \\\n+\t     || SYMBOL_REFERENCES_LOCAL (INFO, &(EH)->elf))) \\\n     && !(NEED_COPY_RELOC_IN_PIE) \\\n     && ((EH) == NULL \\\n \t|| ((ELF_ST_VISIBILITY ((EH)->elf.other) == STV_DEFAULT \\\n@@ -170,17 +174,25 @@\n    || ((struct elf_x86_link_hash_entry *) (H))->linker_def \\\n    || ELF_COMMON_DEF_P (H))\n \n+/* Return TRUE if the symbol described by a linker hash entry H is\n+   going to be absolute.  Similar to bfd_is_abs_symbol, but excluding\n+   all linker-script defined symbols.  */\n+#define ABS_SYMBOL_P(H) \\\n+  (bfd_is_abs_symbol (&(H)->root) && !(H)->root.ldscript_def)\n+\n /* TRUE if relative relocation should be generated.  GOT reference to\n    global symbol in PIC will lead to dynamic symbol.  It becomes a\n    problem when \"time\" or \"times\" is defined as a variable in an\n    executable, clashing with functions of the same name in libc.  If a\n    symbol isn't undefined weak symbol, don't make it dynamic in PIC and\n-   generate relative relocation.  */\n+   generate relative relocation.   Don't generate relative relocation\n+   against non-preemptible absolute symbol.  */\n #define GENERATE_RELATIVE_RELOC_P(INFO, H) \\\n   ((H)->dynindx == -1 \\\n    && !(H)->forced_local \\\n    && (H)->root.type != bfd_link_hash_undefweak \\\n-   && bfd_link_pic (INFO))\n+   && bfd_link_pic (INFO) \\\n+   && !ABS_SYMBOL_P (H))\n \n /* TRUE if this is a pointer reference to a local IFUNC.  */\n #define POINTER_LOCAL_IFUNC_P(INFO, H) \\\n@@ -414,6 +426,7 @@ struct elf_x86_plt_layout\n #define GOT_TLS_IE_NEG\t6\n #define GOT_TLS_IE_BOTH 7\n #define GOT_TLS_GDESC\t8\n+#define GOT_ABS\t\t9\n #define GOT_TLS_GD_BOTH_P(type)\t\\\n   ((type) == (GOT_TLS_GD | GOT_TLS_GDESC))\n #define GOT_TLS_GD_P(type) \\\n@@ -601,6 +614,9 @@ struct elf_x86_plt\n   long count;\n };\n \n+/* Set if a relocation is converted from a GOTPCREL relocation.  */\n+#define R_X86_64_converted_reloc_bit (1 << 7)\n+\n #define elf_x86_tdata(abfd) \\\n   ((struct elf_x86_obj_tdata *) (abfd)->tdata.any)\n \n@@ -652,6 +668,11 @@ extern int _bfd_x86_elf_compare_relocs\n extern bfd_boolean _bfd_x86_elf_link_check_relocs\n   (bfd *, struct bfd_link_info *);\n \n+extern bfd_boolean _bfd_elf_x86_valid_reloc_p\n+  (asection *, struct bfd_link_info *, struct elf_x86_link_hash_table *,\n+   const Elf_Internal_Rela *, struct elf_link_hash_entry *,\n+   Elf_Internal_Sym *, Elf_Internal_Shdr *, bfd_boolean *);\n+\n extern bfd_boolean _bfd_x86_elf_size_dynamic_sections\n   (bfd *, struct bfd_link_info *);\n "
    },
    {
      "sha": "6c95224f0baadb877cd24f606be3963e74b1de3c",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -1,3 +1,35 @@\n+2020-04-01  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR ld/25749\n+\tPR ld/25754\n+\t* testsuite/ld-elf/linux-x86.exp: Run ld/25749 tests.\n+\t* testsuite/ld-elf/pr25749-1.c: New file.\n+\t* testsuite/ld-elf/pr25749-1a.c: Likewise.\n+\t* testsuite/ld-elf/pr25749-1b.c: Likewise.\n+\t* testsuite/ld-elf/pr25749-1b.err: Likewise.\n+\t* testsuite/ld-elf/pr25749-1c.c: Likewise.\n+\t* testsuite/ld-elf/pr25749-1d.c: Likewise.\n+\t* testsuite/ld-elf/pr25749-2.c: Likewise.\n+\t* testsuite/ld-elf/pr25749-2a.s: Likewise.\n+\t* testsuite/ld-elf/pr25749-2b.s: Likewise.\n+\t* testsuite/ld-elf/pr25749.rd: Likewise.\n+\t* testsuite/ld-elf/pr25754-1a.c: Likewise.\n+\t* testsuite/ld-elf/pr25754-1b.s: Likewise.\n+\t* testsuite/ld-elf/pr25754-2a.c: Likewise.\n+\t* testsuite/ld-elf/pr25754-2b.err: Likewise.\n+\t* testsuite/ld-elf/pr25754-2b.s: Likewise.\n+\t* testsuite/ld-elf/pr25754-3a.c: Likewise.\n+\t* testsuite/ld-elf/pr25754-3b.s: Likewise.\n+\t* testsuite/ld-elf/pr25754-4a.c: Likewise.\n+\t* testsuite/ld-elf/pr25754-4b.s: Likewise.\n+\t* testsuite/ld-elf/pr25754-4c.s: Likewise.\n+\t* testsuite/ld-elf/pr25754-5a.c: Likewise.\n+\t* testsuite/ld-elf/pr25754-5b.s: Likewise.\n+\t* testsuite/ld-elf/pr25754-5c.s: Likewise.\n+\t* testsuite/ld-elf/pr25754-6a.c: Likewise.\n+\t* testsuite/ld-elf/pr25754-6b.s: Likewise.\n+\t* testsuite/ld-x86-64/pr19609-6a.d: Don't expect linker error.\n+\n 2020-04-01  Tamar Christina  <tamar.christina@arm.com>\n \n \tPR ld/16017"
    },
    {
      "sha": "7186dede711e9da4d7cdc1e60101873a35e35244",
      "filename": "ld/testsuite/ld-elf/linux-x86.exp",
      "status": "modified",
      "additions": 167,
      "deletions": 0,
      "changes": 167,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/linux-x86.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/linux-x86.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/linux-x86.exp?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -115,3 +115,170 @@ elfedit_test \"--disable-x86-feature shstk\" x86-feature-1 x86-feature-1c\n elfedit_test \"--disable-x86-feature ibt\" x86-feature-1 x86-feature-1d\n elfedit_test \"--enable-x86-feature ibt --enable-x86-feature shstk\" \\\n \t\tx86-feature-1 x86-feature-1e\n+\n+proc check_pr25749a {testname srcfilea srcfileb cflags ldflags lderror} {\n+    global objcopy\n+    global srcdir\n+    global subdir\n+\n+    if { [istarget \"i?86-*-linux*\"] } {\n+\tset output_arch \"i386:i386\"\n+\tset output_target \"elf32-i386\"\n+    } else {\n+\tset output_arch \"i386:x86-64\"\n+\tif {[istarget \"x86_64-*-linux*-gnux32\"]} {\n+\t    set output_target \"elf32-x86-64\"\n+\t} else {\n+\t    set output_target \"elf64-x86-64\"\n+\t}\n+    }\n+\n+    exec cp $srcdir/$subdir/$srcfilea $srcfilea\n+    set pr25749_bin \"$objcopy -B $output_arch -I binary -O $output_target $srcfilea tmpdir/pr25749-bin.o\"\n+    send_log \"$pr25749_bin\\n\"\n+    set got [remote_exec host \"$pr25749_bin\"]\n+    if { [lindex $got 0] != 0 || ![string match \"\" [lindex $got 1]] } then {\n+\tsend_log \"$got\\n\"\n+\tfail \"Convert $srcfilea to $output_target\"\n+\treturn\n+    }\n+\n+    if {\"$lderror\" == \"\"} {\n+\trun_cc_link_tests [list \\\n+\t    [list \\\n+\t\t\"Build $testname ($ldflags $cflags)\" \\\n+\t\t\"$ldflags tmpdir/pr25749-bin.o\" \\\n+\t\t\"$cflags\" \\\n+\t\t[list $srcfilea $srcfileb]\\\n+\t\t{{readelf {-Wr} pr25749.rd}}  \\\n+\t\t\"${testname}a\" \\\n+\t    ] \\\n+\t]\n+\trun_ld_link_exec_tests [list \\\n+\t    [list \\\n+\t\t\"Run ${testname}a ($ldflags $cflags)\" \\\n+\t\t\"$ldflags tmpdir/pr25749-bin.o\" \\\n+\t\t\"\" \\\n+\t\t[list $srcfilea $srcfileb]\\\n+\t\t\"${testname}a\" \\\n+\t\t\"pass.out\" \\\n+\t\t\"$cflags\" \\\n+\t    ] \\\n+\t]\n+    } else {\n+\trun_cc_link_tests [list \\\n+\t    [list \\\n+\t\t\"Build $testname ($ldflags $cflags)\" \\\n+\t\t\"$ldflags tmpdir/pr25749-bin.o\" \\\n+\t\t\"$cflags\" \\\n+\t\t[list $srcfilea $srcfileb]\\\n+\t\t[list [list error_output $lderror]] \\\n+\t\t\"$testname\" \\\n+\t    ] \\\n+\t]\n+    }\n+}\n+\n+check_pr25749a \"pr25749-1a\" \"pr25749-1.c\" \"pr25749-1a.c\" \"$NOPIE_CFLAGS\" \"$NOPIE_LDFLAGS\" \"\"\n+check_pr25749a \"pr25749-1a\" \"pr25749-1.c\" \"pr25749-1a.c\" \"-fPIE\" \"-pie\" \"\"\n+check_pr25749a \"pr25749-1b\" \"pr25749-1.c\" \"pr25749-1b.c\" \"$NOPIE_CFLAGS\" \"$NOPIE_LDFLAGS\" \"\"\n+if { [istarget \"i?86-*-linux*\"] } {\n+    check_pr25749a \"pr25749-1b\" \"pr25749-1.c\" \"pr25749-1b.c\" \"-fPIE\" \"-pie\" \"\"\n+} else {\n+    check_pr25749a \"pr25749-1b\" \"pr25749-1.c\" \"pr25749-1b.c\" \"-fPIE\" \"-pie\" \"pr25749-1b.err\"\n+}\n+check_pr25749a \"pr25749-1c\" \"pr25749-1.c\" \"pr25749-1c.c\" \"-fPIC\" \"-shared\" \"pr25749-1b.err\"\n+check_pr25749a \"pr25749-2a\" \"pr25749-2.c\" \"pr25749-2a.s\" \"$NOPIE_CFLAGS\" \"$NOPIE_LDFLAGS\" \"\"\n+check_pr25749a \"pr25749-2a\" \"pr25749-2.c\" \"pr25749-2a.s\" \"-fPIE\" \"-pie\" \"\"\n+check_pr25749a \"pr25749-2b\" \"pr25749-2.c\" \"pr25749-2b.s\" \"$NOPIE_CFLAGS\" \"$NOPIE_LDFLAGS\" \"\"\n+check_pr25749a \"pr25749-2b\" \"pr25749-2.c\" \"pr25749-2b.s\" \"-fPIE\" \"-pie\" \"\"\n+check_pr25749a \"pr25754-1a\" \"pr25754-1a.c\" \"pr25754-1b.s\" \"$NOPIE_CFLAGS\" \"$NOPIE_LDFLAGS\" \"\"\n+check_pr25749a \"pr25754-1b\" \"pr25754-1a.c\" \"pr25754-1b.s\" \"-fPIE\" \"$NOPIE_LDFLAGS\" \"\"\n+check_pr25749a \"pr25754-1c\" \"pr25754-1a.c\" \"pr25754-1b.s\" \"-fPIC\" \"$NOPIE_LDFLAGS\" \"\"\n+check_pr25749a \"pr25754-1d\" \"pr25754-1a.c\" \"pr25754-1b.s\" \"-fPIC\" \"-pie\" \"\"\n+if { [istarget \"i?86-*-linux*\"] || [istarget \"x86_64-*-linux*-gnux32\"]} {\n+    check_pr25749a \"pr25754-2a\" \"pr25754-2a.c\" \"pr25754-2b.s\" \"-fPIC\" \"$NOPIE_LDFLAGS\" \"\"\n+    check_pr25749a \"pr25754-2b\" \"pr25754-2a.c\" \"pr25754-2b.s\" \"-fPIC\" \"-pie\" \"\"\n+} else {\n+    check_pr25749a \"pr25754-3a\" \"pr25754-3a.c\" \"pr25754-3b.s\" \"-fPIC\" \"$NOPIE_LDFLAGS\" \"\"\n+    check_pr25749a \"pr25754-3b\" \"pr25754-3a.c\" \"pr25754-3b.s\" \"-fPIC\" \"-pie\" \"\"\n+}\n+if { [istarget \"i?86-*-linux*\"] } {\n+    check_pr25749a \"pr25754-4a\" \"pr25754-4a.c\" \"pr25754-4b.s\" \"$NOPIE_CFLAGS\" \"$NOPIE_LDFLAGS\" \"\"\n+    check_pr25749a \"pr25754-4b\" \"pr25754-4a.c\" \"pr25754-4b.s\" \"-fpie\" \"-pie\" \"\"\n+    check_pr25749a \"pr25754-5a\" \"pr25754-5a.c\" \"pr25754-5b.s\" \"$NOPIE_CFLAGS\" \"$NOPIE_LDFLAGS\" \"\"\n+    check_pr25749a \"pr25754-5b\" \"pr25754-5a.c\" \"pr25754-5b.s\" \"-fpie\" \"-pie\" \"\"\n+} else {\n+    check_pr25749a \"pr25754-4a\" \"pr25754-4a.c\" \"pr25754-4c.s\" \"$NOPIE_CFLAGS\" \"$NOPIE_LDFLAGS\" \"\"\n+    check_pr25749a \"pr25754-4b\" \"pr25754-4a.c\" \"pr25754-4c.s\" \"-fpie\" \"-pie\" \"\"\n+    check_pr25749a \"pr25754-5a\" \"pr25754-5a.c\" \"pr25754-5c.s\" \"$NOPIE_CFLAGS\" \"$NOPIE_LDFLAGS\" \"\"\n+    check_pr25749a \"pr25754-5b\" \"pr25754-5a.c\" \"pr25754-5c.s\" \"-fpie\" \"-pie\" \"\"\n+    if { ![istarget \"x86_64-*-linux*-gnux32\"]} {\n+\tcheck_pr25749a \"pr25754-6a\" \"pr25754-6a.c\" \"pr25754-6b.s\" \"$NOPIE_CFLAGS\" \"$NOPIE_LDFLAGS\" \"\"\n+\tcheck_pr25749a \"pr25754-6b\" \"pr25754-6a.c\" \"pr25754-6b.s\" \"-fpie\" \"-pie\" \"\"\n+    }\n+}\n+\n+proc check_pr25749b {testname srcfilea srcfileb cflags ldflags dsoldflags} {\n+    global objcopy\n+    global srcdir\n+    global subdir\n+\n+    if { [istarget \"i?86-*-linux*\"] } {\n+\tset output_arch \"i386:i386\"\n+\tset output_target \"elf32-i386\"\n+    } else {\n+\tset output_arch \"i386:x86-64\"\n+\tif {[istarget \"x86_64-*-linux*-gnux32\"]} {\n+\t    set output_target \"elf32-x86-64\"\n+\t} else {\n+\t    set output_target \"elf64-x86-64\"\n+\t}\n+    }\n+\n+    exec cp $srcdir/$subdir/$srcfilea $srcfilea\n+    set pr25749_bin \"$objcopy -B $output_arch -I binary -O $output_target $srcfilea tmpdir/pr25749-bin.o\"\n+    send_log \"$pr25749_bin\\n\"\n+    set got [remote_exec host \"$pr25749_bin\"]\n+    if { [lindex $got 0] != 0 || ![string match \"\" [lindex $got 1]] } then {\n+\tsend_log \"$got\\n\"\n+\tfail \"Convert $srcfilea to $output_target\"\n+\treturn\n+    }\n+\n+    run_cc_link_tests [list \\\n+\t[list \\\n+\t    \"Build lib${testname}.so ($dsoldflags)\" \\\n+\t    \"-shared $dsoldflags tmpdir/pr25749-bin.o\" \\\n+\t    \"-fPIC\" \\\n+\t    [list $srcfileb] \\\n+\t    {{readelf {-Wr} pr25749.rd}}  \\\n+\t    \"lib${testname}.so\" \\\n+\t] \\\n+    ]\n+    run_ld_link_exec_tests [list \\\n+\t[list \\\n+\t    \"Run ${testname}b ($ldflags $cflags)\" \\\n+\t    \"$ldflags -Wl,--no-as-needed tmpdir/lib${testname}.so\" \\\n+\t    \"\" \\\n+\t    [list $srcfilea]\\\n+\t    \"${testname}b\" \\\n+\t    \"pass.out\" \\\n+\t    \"$cflags\" \\\n+\t] \\\n+    ]\n+}\n+\n+check_pr25749b \"pr25749-1a\" \"pr25749-1.c\" \"pr25749-1a.c\" \"$NOPIE_CFLAGS\" \"$NOPIE_LDFLAGS\" \"\"\n+check_pr25749b \"pr25749-1a\" \"pr25749-1.c\" \"pr25749-1a.c\" \"-fPIE\" \"-pie\" \"\"\n+check_pr25749b \"pr25749-1a\" \"pr25749-1.c\" \"pr25749-1a.c\" \"-fPIE\" \"-pie\" \"-Wl,-Bsymbolic\"\n+check_pr25749b \"pr25749-1b\" \"pr25749-1.c\" \"pr25749-1b.c\" \"$NOPIE_CFLAGS\" \"$NOPIE_LDFLAGS\" \"\"\n+check_pr25749b \"pr25749-1b\" \"pr25749-1.c\" \"pr25749-1b.c\" \"-fPIE\" \"-pie\" \"\"\n+check_pr25749b \"pr25749-1b\" \"pr25749-1.c\" \"pr25749-1b.c\" \"-fPIE\" \"-pie\" \"-Wl,-Bsymbolic\"\n+check_pr25749b \"pr25749-1d\" \"pr25749-1.c\" \"pr25749-1d.c\" \"$NOPIE_CFLAGS\" \"$NOPIE_LDFLAGS\" \"-Wl,-defsym=_begin=0\"\n+check_pr25749b \"pr25749-1d\" \"pr25749-1.c\" \"pr25749-1d.c\" \"-fPIE\" \"-pie\" \"-Wl,-defsym=_begin=0\"\n+check_pr25749b \"pr25749-1d\" \"pr25749-1.c\" \"pr25749-1d.c\" \"-fPIE\" \"-pie\" \"-Wl,-Bsymbolic -Wl,-defsym=_begin=0\"\n+check_pr25749b \"pr25749-2a\" \"pr25749-2.c\" \"pr25749-2a.s\" \"$NOPIE_CFLAGS\" \"$NOPIE_LDFLAGS\" \"\"\n+check_pr25749b \"pr25749-2a\" \"pr25749-2.c\" \"pr25749-2a.s\" \"-fPIE\" \"-pie\" \"\"\n+check_pr25749b \"pr25749-2b\" \"pr25749-2.c\" \"pr25749-2b.s\" \"$NOPIE_CFLAGS\" \"$NOPIE_LDFLAGS\" \"\"\n+check_pr25749b \"pr25749-2b\" \"pr25749-2.c\" \"pr25749-2b.s\" \"-fPIE\" \"-pie\" \"\""
    },
    {
      "sha": "5b37af08c697569fc7333df7671ddbbe3f38ddd1",
      "filename": "ld/testsuite/ld-elf/pr25749-1.c",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749-1.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749-1.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25749-1.c?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,12 @@\n+#include <stdio.h>\n+#include <bfd_stdint.h>\n+\n+extern intptr_t size (void);\n+\n+int\n+main ()\n+{\n+  if (size () == 147)\n+    printf (\"PASS\\n\");\n+  return 0;\n+}"
    },
    {
      "sha": "775623b8c9c1c690b584386952804fb881140afb",
      "filename": "ld/testsuite/ld-elf/pr25749-1a.c",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749-1a.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749-1a.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25749-1a.c?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,11 @@\n+#include <bfd_stdint.h>\n+\n+extern void *_binary_pr25749_1_c_start;\n+extern void *_binary_pr25749_1_c_end;\n+\n+intptr_t\n+size (void)\n+{\n+  return ((intptr_t) &_binary_pr25749_1_c_end\n+\t  - (intptr_t) &_binary_pr25749_1_c_start);\n+}"
    },
    {
      "sha": "f02a408700454366965cd1c1e908c74ea8a12f56",
      "filename": "ld/testsuite/ld-elf/pr25749-1b.c",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749-1b.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749-1b.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25749-1b.c?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,9 @@\n+#include <bfd_stdint.h>\n+\n+extern void *_binary_pr25749_1_c_size;\n+\n+intptr_t\n+size (void)\n+{\n+  return (intptr_t) &_binary_pr25749_1_c_size;\n+}"
    },
    {
      "sha": "bb389172f16b2bb764bf838fbd050cd06ddcf394",
      "filename": "ld/testsuite/ld-elf/pr25749-1b.err",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749-1b.err",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749-1b.err",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25749-1b.err?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,3 @@\n+#...\n+.*: .* against absolute symbol `_binary_pr25749_1_c_size' .* is disallowed\n+#pass"
    },
    {
      "sha": "f2847d7f623a140e40e5ae8c2750f099c3c6366a",
      "filename": "ld/testsuite/ld-elf/pr25749-1c.c",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749-1c.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749-1c.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25749-1c.c?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,9 @@\n+#include <bfd_stdint.h>\n+\n+extern void *_binary_pr25749_1_c_size __attribute__ ((visibility(\"hidden\")));\n+\n+intptr_t\n+size (void)\n+{\n+  return (intptr_t) &_binary_pr25749_1_c_size;\n+}"
    },
    {
      "sha": "33b869deb5d90e4cc25c62f81a53f2f4084b7d72",
      "filename": "ld/testsuite/ld-elf/pr25749-1d.c",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749-1d.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749-1d.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25749-1d.c?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,19 @@\n+#include <bfd_stdint.h>\n+\n+extern void *_binary_pr25749_1_c_start;\n+extern void *_binary_pr25749_1_c_end;\n+\n+intptr_t\n+size (void)\n+{\n+  return ((intptr_t) &_binary_pr25749_1_c_end\n+\t  - (intptr_t) &_binary_pr25749_1_c_start);\n+}\n+\n+extern void *_begin __attribute__ ((visibility(\"hidden\")));\n+\n+intptr_t\n+size_p (void)\n+{\n+  return (intptr_t) &_begin;\n+}"
    },
    {
      "sha": "820bebc1673fc95174e168b96e5f5fcd0a7212cd",
      "filename": "ld/testsuite/ld-elf/pr25749-2.c",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25749-2.c?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,12 @@\n+#include <stdio.h>\n+#include <bfd_stdint.h>\n+\n+extern intptr_t size;\n+\n+int\n+main ()\n+{\n+  if (size == 137)\n+    printf (\"PASS\\n\");\n+  return 0;\n+}"
    },
    {
      "sha": "df486fe329475635a3d734bd4aad714fbf1f6488",
      "filename": "ld/testsuite/ld-elf/pr25749-2a.s",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749-2a.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749-2a.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25749-2a.s?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,6 @@\n+\t.data\n+\t.globl\tsize\n+\t.type\tsize, %object\n+size:\n+\t.dc.a\t_binary_pr25749_2_c_size\n+\t.size size, .-size"
    },
    {
      "sha": "ba82c450bc24ca4cf88bd465017128b66a6a40d8",
      "filename": "ld/testsuite/ld-elf/pr25749-2b.s",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749-2b.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749-2b.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25749-2b.s?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,7 @@\n+\t.data\n+\t.hidden _binary_pr25749_2_c_size\n+\t.globl\tsize\n+\t.type\tsize, %object\n+size:\n+\t.dc.a\t_binary_pr25749_2_c_size\n+\t.size size, .-size"
    },
    {
      "sha": "fbc68bf2688dd1b810afbbac5707b6f9f5a6ae4a",
      "filename": "ld/testsuite/ld-elf/pr25749.rd",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25749.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25749.rd?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,4 @@\n+#failif\n+#...\n+[0-9a-f ]+R_.*_NONE.*\n+#..."
    },
    {
      "sha": "2b048ec09bbbe0b76de2e97d45468daae3a25b9f",
      "filename": "ld/testsuite/ld-elf/pr25754-1a.c",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-1a.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-1a.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25754-1a.c?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,19 @@\n+#include <stdio.h>\n+#include <bfd_stdint.h>\n+\n+extern uintptr_t bar;\n+\n+uintptr_t *\n+__attribute__ ((noinline, noclone))\n+get_bar (void)\n+{\n+  return &bar;\n+}\n+\n+int\n+main ()\n+{\n+  if ((uintptr_t) get_bar () == 42)\n+    printf (\"PASS\\n\");\n+  return 0;\n+}"
    },
    {
      "sha": "99d585d6b5f40847b66fb626539d4b2767fe7464",
      "filename": "ld/testsuite/ld-elf/pr25754-1b.s",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-1b.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-1b.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25754-1b.s?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,3 @@\n+\t.data\n+\t.global bar\n+\tbar = 42"
    },
    {
      "sha": "7c9f58116e7bfcb98d8f432961f2379622ac53f0",
      "filename": "ld/testsuite/ld-elf/pr25754-2a.c",
      "status": "added",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-2a.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-2a.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25754-2a.c?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,20 @@\n+#include <stdio.h>\n+#include <bfd_stdint.h>\n+\n+extern uintptr_t bar;\n+\n+uintptr_t *\n+__attribute__ ((noinline, noclone))\n+get_bar (void)\n+{\n+  return &bar;\n+}\n+\n+int\n+main ()\n+{\n+  if ((uintptr_t) get_bar () == 0xfffffff0U)\n+    printf (\"PASS\\n\");\n+  return 0;\n+}\n+#include <stdio.h>"
    },
    {
      "sha": "9cab99303eee8593ddc324eaef7b0cf8528d4e4f",
      "filename": "ld/testsuite/ld-elf/pr25754-2b.s",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-2b.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-2b.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25754-2b.s?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,3 @@\n+\t.data\n+\t.global bar\n+\tbar = 0xfffffff0"
    },
    {
      "sha": "2d4f02abe5a91c61f8eea2db6bd6b8e189984d54",
      "filename": "ld/testsuite/ld-elf/pr25754-3a.c",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-3a.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-3a.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25754-3a.c?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,19 @@\n+#include <stdio.h>\n+#include <bfd_stdint.h>\n+\n+extern uintptr_t bar;\n+\n+uintptr_t *\n+__attribute__ ((noinline, noclone))\n+get_bar (void)\n+{\n+  return &bar;\n+}\n+\n+int\n+main ()\n+{\n+  if ((uintptr_t) get_bar () == -0x80000001LL)\n+    printf (\"PASS\\n\");\n+  return 0;\n+}"
    },
    {
      "sha": "aad3e45e0f6da67424ba0c5a1cd49b35d49f7e9e",
      "filename": "ld/testsuite/ld-elf/pr25754-3b.s",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-3b.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-3b.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25754-3b.s?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,3 @@\n+\t.data\n+\t.global bar\n+\tbar = -0x80000001"
    },
    {
      "sha": "e2c2f8d54d0cbb294aa413c3821d42e566bf617b",
      "filename": "ld/testsuite/ld-elf/pr25754-4a.c",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-4a.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-4a.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25754-4a.c?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,12 @@\n+#include <stdio.h>\n+#include <bfd_stdint.h>\n+\n+extern uintptr_t *get_bar (void);\n+\n+int\n+main ()\n+{\n+  if ((uintptr_t) get_bar () == 0x7fffffffULL)\n+    printf (\"PASS\\n\");\n+  return 0;\n+}"
    },
    {
      "sha": "448406dff89c0c1765a71469777e9dd3b9e6d045",
      "filename": "ld/testsuite/ld-elf/pr25754-4b.s",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-4b.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-4b.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25754-4b.s?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,23 @@\n+\t.text\n+\t.p2align 4\n+\t.globl\tget_bar\n+\t.type\tget_bar, @function\n+get_bar:\n+\t.cfi_startproc\n+\tcall\t__x86.get_pc_thunk.ax\n+\taddl\t$_GLOBAL_OFFSET_TABLE_, %eax\n+\tmovl\tbar@GOT(%eax), %eax\n+\tret\n+\t.cfi_endproc\n+\t.size\tget_bar, .-get_bar\n+\tbar = 0x7fffffff\n+\t.section\t.text.__x86.get_pc_thunk.ax,\"axG\",@progbits,__x86.get_pc_thunk.ax,comdat\n+\t.globl\t__x86.get_pc_thunk.ax\n+\t.hidden\t__x86.get_pc_thunk.ax\n+\t.type\t__x86.get_pc_thunk.ax, @function\n+__x86.get_pc_thunk.ax:\n+\t.cfi_startproc\n+\tmovl\t(%esp), %eax\n+\tret\n+\t.cfi_endproc\n+\t.section\t.note.GNU-stack,\"\",@progbits"
    },
    {
      "sha": "de450fe081ee5a754e9c4c368099cf8bd8f5db68",
      "filename": "ld/testsuite/ld-elf/pr25754-4c.s",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-4c.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-4c.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25754-4c.s?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,12 @@\n+\t.text\n+\t.p2align 4\n+\t.globl\tget_bar\n+\t.type\tget_bar, @function\n+get_bar:\n+\t.cfi_startproc\n+\tmovq\tbar@GOTPCREL(%rip), %rax\n+\tret\n+\t.cfi_endproc\n+\t.size\tget_bar, .-get_bar\n+\tbar = 0x7fffffff\n+\t.section\t.note.GNU-stack,\"\",@progbits"
    },
    {
      "sha": "cb791dd56f77f8110bfe1c09ab4e828c5ccfc54b",
      "filename": "ld/testsuite/ld-elf/pr25754-5a.c",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-5a.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-5a.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25754-5a.c?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,12 @@\n+#include <stdio.h>\n+#include <bfd_stdint.h>\n+\n+extern uintptr_t *get_bar (void);\n+\n+int\n+main ()\n+{\n+  if ((uintptr_t) get_bar () == 0xfffffff0ULL)\n+    printf (\"PASS\\n\");\n+  return 0;\n+}"
    },
    {
      "sha": "2923c32ee9fb49f950589bf97e662aef6cffbfcd",
      "filename": "ld/testsuite/ld-elf/pr25754-5b.s",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-5b.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-5b.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25754-5b.s?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,23 @@\n+\t.text\n+\t.p2align 4\n+\t.globl\tget_bar\n+\t.type\tget_bar, @function\n+get_bar:\n+\t.cfi_startproc\n+\tcall\t__x86.get_pc_thunk.ax\n+\taddl\t$_GLOBAL_OFFSET_TABLE_, %eax\n+\tmovl\tbar@GOT(%eax), %eax\n+\tret\n+\t.cfi_endproc\n+\t.size\tget_bar, .-get_bar\n+\tbar = 0xfffffff0\n+\t.section\t.text.__x86.get_pc_thunk.ax,\"axG\",@progbits,__x86.get_pc_thunk.ax,comdat\n+\t.globl\t__x86.get_pc_thunk.ax\n+\t.hidden\t__x86.get_pc_thunk.ax\n+\t.type\t__x86.get_pc_thunk.ax, @function\n+__x86.get_pc_thunk.ax:\n+\t.cfi_startproc\n+\tmovl\t(%esp), %eax\n+\tret\n+\t.cfi_endproc\n+\t.section\t.note.GNU-stack,\"\",@progbits"
    },
    {
      "sha": "0195f19165d8807678d3fbb2c6aa95e24467e204",
      "filename": "ld/testsuite/ld-elf/pr25754-5c.s",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-5c.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-5c.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25754-5c.s?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,12 @@\n+\t.text\n+\t.p2align 4\n+\t.globl\tget_bar\n+\t.type\tget_bar, @function\n+get_bar:\n+\t.cfi_startproc\n+\tmovq\tbar@GOTPCREL(%rip), %rax\n+\tret\n+\t.cfi_endproc\n+\t.size\tget_bar, .-get_bar\n+\tbar = 0xfffffff0\n+\t.section\t.note.GNU-stack,\"\",@progbits"
    },
    {
      "sha": "59633a3b4dd9829177f75cca1b4ffa712d19900f",
      "filename": "ld/testsuite/ld-elf/pr25754-6a.c",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-6a.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-6a.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25754-6a.c?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,12 @@\n+#include <stdio.h>\n+#include <bfd_stdint.h>\n+\n+extern uintptr_t *get_bar (void);\n+\n+int\n+main ()\n+{\n+  if ((uintptr_t) get_bar () == 0xffffffffffffff0ULL)\n+    printf (\"PASS\\n\");\n+  return 0;\n+}"
    },
    {
      "sha": "2532480e5f0e169edb752d9b425bbcf98a5c618d",
      "filename": "ld/testsuite/ld-elf/pr25754-6b.s",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-6b.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-elf/pr25754-6b.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr25754-6b.s?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -0,0 +1,12 @@\n+\t.text\n+\t.p2align 4\n+\t.globl\tget_bar\n+\t.type\tget_bar, @function\n+get_bar:\n+\t.cfi_startproc\n+\tmovq\tbar@GOTPCREL(%rip), %rax\n+\tret\n+\t.cfi_endproc\n+\t.size\tget_bar, .-get_bar\n+\tbar = 0xffffffffffffff0\n+\t.section\t.note.GNU-stack,\"\",@progbits"
    },
    {
      "sha": "b340287f48b179a0d83a3e76c881aea8888fefb6",
      "filename": "ld/testsuite/ld-x86-64/pr19609-6a.d",
      "status": "modified",
      "additions": 10,
      "deletions": 1,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-x86-64/pr19609-6a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/382aae06322799a25ea52fe61b243cbca4db8d66/ld/testsuite/ld-x86-64/pr19609-6a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-x86-64/pr19609-6a.d?ref=382aae06322799a25ea52fe61b243cbca4db8d66",
      "patch": "@@ -1,4 +1,13 @@\n #source: pr19609-6.s\n #as: --64 -mrelax-relocations=yes\n #ld: -melf_x86_64 --defsym foobar=0x80000000\n-#error: failed to convert GOTPCREL relocation; relink with --no-relax\n+#objdump: -dw\n+\n+.*: +file format .*\n+\n+\n+Disassembly of section .text:\n+\n+[a-f0-9]+ <_start>:\n+[ \t]*[a-f0-9]+:\t48 8b 05 ([0-9a-f]{2} ){4} *\tmov    0x[a-f0-9]+\\(%rip\\),%rax        # [a-f0-9]+ <.got>\n+#pass"
    }
  ]
}