{
  "sha": "854f1e4be9172c835d1b89973d29ce66f9e65479",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODU0ZjFlNGJlOTE3MmM4MzVkMWI4OTk3M2QyOWNlNjZmOWU2NTQ3OQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-03-28T23:19:35Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-03-29T00:52:21Z"
    },
    "message": "gas int vs bfd_boolean fixes\n\n\t* config/tc-arm.c (struct arm_long_option_table <func>): Return\n\tbfd_boolean.\n\t* config/tc-arm.h (arm_optimize_expr, arm_data_in_code): Likewise.\n\t* config/tc-metag.c (parse_mov_port): Replace unsigned int variable\n\twith bfd_boolean.\n\t(parse_mmov, parse_mov_ct, parse_alu, parse_shift, parse_bitop),\n\t(parse_cmp, parse_fmmov, parse_fmov_data, parse_fearith),\n\t(parse_dget_set, parse_dalu): Likewise, ensuring assignment from\n\tlogical expressions.\n\t(struct metag_long_option <func>): Return bfd_boolean.\n\t(metag_parse_cpu, metag_parse_fpu, metag_parse_dsp): Likewise.\n\t* config/tc-msp430.c (msp430_dstoperand): Correct dummy type.\n\t* config/tc-s12z.c (parse_operand_func): Return bfd_boolean.\n\t(no_operands, lex_force_match, lex_reg_list): Likewise.\n\t(size_from_suffix): Return int.\n\t(s12z_relax_frag, md_estimate_size_before_relax): Return 0.\n\t* config/tc-s12z.h (tc_s12z_fix_adjustable): Likewise.",
    "tree": {
      "sha": "b34cad1198458e35cd9e8c748b879aa35cbc0ea6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b34cad1198458e35cd9e8c748b879aa35cbc0ea6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/854f1e4be9172c835d1b89973d29ce66f9e65479",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/854f1e4be9172c835d1b89973d29ce66f9e65479",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/854f1e4be9172c835d1b89973d29ce66f9e65479",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/854f1e4be9172c835d1b89973d29ce66f9e65479/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1be305ffcd43050184097a8f41445c85a4b1a411",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1be305ffcd43050184097a8f41445c85a4b1a411",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1be305ffcd43050184097a8f41445c85a4b1a411"
    }
  ],
  "stats": {
    "total": 148,
    "additions": 83,
    "deletions": 65
  },
  "files": [
    {
      "sha": "ad1b751024a8a89bde76704deb27353f4ae98b10",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/854f1e4be9172c835d1b89973d29ce66f9e65479/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/854f1e4be9172c835d1b89973d29ce66f9e65479/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=854f1e4be9172c835d1b89973d29ce66f9e65479",
      "patch": "@@ -1,3 +1,23 @@\n+2021-03-29  Alan Modra  <amodra@gmail.com>\n+\n+\t* config/tc-arm.c (struct arm_long_option_table <func>): Return\n+\tbfd_boolean.\n+\t* config/tc-arm.h (arm_optimize_expr, arm_data_in_code): Likewise.\n+\t* config/tc-metag.c (parse_mov_port): Replace unsigned int variable\n+\twith bfd_boolean.\n+\t(parse_mmov, parse_mov_ct, parse_alu, parse_shift, parse_bitop),\n+\t(parse_cmp, parse_fmmov, parse_fmov_data, parse_fearith),\n+\t(parse_dget_set, parse_dalu): Likewise, ensuring assignment from\n+\tlogical expressions.\n+\t(struct metag_long_option <func>): Return bfd_boolean.\n+\t(metag_parse_cpu, metag_parse_fpu, metag_parse_dsp): Likewise.\n+\t* config/tc-msp430.c (msp430_dstoperand): Correct dummy type.\n+\t* config/tc-s12z.c (parse_operand_func): Return bfd_boolean.\n+\t(no_operands, lex_force_match, lex_reg_list): Likewise.\n+\t(size_from_suffix): Return int.\n+\t(s12z_relax_frag, md_estimate_size_before_relax): Return 0.\n+\t* config/tc-s12z.h (tc_s12z_fix_adjustable): Likewise.\n+\n 2021-03-26  Jan Beulich  <jbeulich@suse.com>\n \n \t* testsuite/gas/i386/x86-64-nosse2.s,"
    },
    {
      "sha": "e7e7f3caf85560b0eb42a391d140c836c64ed665",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/854f1e4be9172c835d1b89973d29ce66f9e65479/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/854f1e4be9172c835d1b89973d29ce66f9e65479/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=854f1e4be9172c835d1b89973d29ce66f9e65479",
      "patch": "@@ -32175,7 +32175,7 @@ struct arm_long_option_table\n {\n   const char * option;\t\t\t/* Substring to match.\t*/\n   const char * help;\t\t\t/* Help information.  */\n-  int (* func) (const char * subopt);\t/* Function to decode sub-option.  */\n+  bfd_boolean (*func) (const char *subopt);\t/* Function to decode sub-option.  */\n   const char * deprecated;\t\t/* If non-null, print this message.  */\n };\n "
    },
    {
      "sha": "884e00f3294115cb436b3e6bea2a6f8ab42fb404",
      "filename": "gas/config/tc-arm.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/854f1e4be9172c835d1b89973d29ce66f9e65479/gas/config/tc-arm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/854f1e4be9172c835d1b89973d29ce66f9e65479/gas/config/tc-arm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.h?ref=854f1e4be9172c835d1b89973d29ce66f9e65479",
      "patch": "@@ -82,7 +82,7 @@ extern unsigned int arm_frag_max_var (struct frag *);\n extern int arm_relax_frag (asection *, struct frag *, long);\n \n #define md_optimize_expr(l,o,r)\t\tarm_optimize_expr (l, o, r)\n-extern int arm_optimize_expr (expressionS *, operatorT, expressionS *);\n+extern bfd_boolean arm_optimize_expr (expressionS *, operatorT, expressionS *);\n \n #define md_cleanup() arm_cleanup ()\n \n@@ -348,7 +348,7 @@ extern int arm_force_relocation (struct fix *);\n extern void arm_cleanup (void);\n extern void arm_start_line_hook (void);\n extern void arm_frob_label (symbolS *);\n-extern int arm_data_in_code (void);\n+extern bfd_boolean arm_data_in_code (void);\n extern char * arm_canonicalize_symbol_name (char *);\n extern void arm_adjust_symtab (void);\n extern void armelf_frob_symbol (symbolS *, int *);"
    },
    {
      "sha": "28666bef3f006873788a35497ea92ec8c01dd1d6",
      "filename": "gas/config/tc-metag.c",
      "status": "modified",
      "additions": 51,
      "deletions": 53,
      "changes": 104,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/854f1e4be9172c835d1b89973d29ce66f9e65479/gas/config/tc-metag.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/854f1e4be9172c835d1b89973d29ce66f9e65479/gas/config/tc-metag.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-metag.c?ref=854f1e4be9172c835d1b89973d29ce66f9e65479",
      "patch": "@@ -472,7 +472,7 @@ parse_mov_port (const char *line, metag_insn *insn,\n \t\tconst insn_template *template)\n {\n   const char *l = line;\n-  unsigned int is_movl = MINOR_OPCODE (template->meta_opcode) == MOVL_MINOR;\n+  bfd_boolean is_movl = MINOR_OPCODE (template->meta_opcode) == MOVL_MINOR;\n   const metag_reg *dest_regs[2];\n   const metag_reg *port_regs[1];\n \n@@ -1501,10 +1501,9 @@ parse_mmov (const char *line, metag_insn *insn,\n \t    const insn_template *template)\n {\n   const char *l = line;\n-  unsigned int is_fpu = template->insn_type == INSN_FPU;\n-  unsigned int is_prime = ((MINOR_OPCODE (template->meta_opcode) & 0x2) &&\n-\t\t\t   !is_fpu);\n-  unsigned int is_64bit = MINOR_OPCODE (template->meta_opcode) & 0x1;\n+  bfd_boolean is_fpu = template->insn_type == INSN_FPU;\n+  bfd_boolean is_prime = (MINOR_OPCODE (template->meta_opcode) & 0x2) != 0 && !is_fpu;\n+  bfd_boolean is_64bit = (MINOR_OPCODE (template->meta_opcode) & 0x1) != 0;\n   unsigned int rmask = 0;\n \n   if (is_prime)\n@@ -1966,9 +1965,9 @@ parse_mov_ct (const char *line, metag_insn *insn,\n {\n   const char *l = line;\n   const metag_reg *regs[1];\n-  unsigned int top = template->meta_opcode & 0x1;\n-  unsigned int is_trace = (template->meta_opcode >> 2) & 0x1;\n-  unsigned int sign_extend = 0;\n+  bfd_boolean top = (template->meta_opcode & 0x1) != 0;\n+  bfd_boolean is_trace = ((template->meta_opcode >> 2) & 0x1) != 0;\n+  bfd_boolean sign_extend = 0;\n   int value = 0;\n \n   l = parse_gp_regs (l, regs, 1);\n@@ -2005,7 +2004,7 @@ parse_mov_ct (const char *line, metag_insn *insn,\n \t\t(regs[0]->no << 19) |\n \t\t((value & IMM16_MASK) << 3));\n \n-  if (sign_extend == 1 && top == 0)\n+  if (sign_extend && !top)\n     insn->bits |= (1 << 1);\n \n   insn->len = 4;\n@@ -2291,16 +2290,16 @@ parse_alu (const char *line, metag_insn *insn,\n   const metag_reg *dest_regs[1];\n   const metag_reg *src_regs[2];\n   int value = 0;\n-  unsigned int o1z = 0;\n-  unsigned int imm = (template->meta_opcode >> 25) & 0x1;\n-  unsigned int cond = (template->meta_opcode >> 26) & 0x1;\n-  unsigned int ca = (template->meta_opcode >> 5) & 0x1;\n-  unsigned int top = template->meta_opcode & 0x1;\n-  unsigned int sign_extend = 0;\n-  unsigned int is_addr_op = MAJOR_OPCODE (template->meta_opcode) == OPC_ADDR;\n-  unsigned int is_mul = MAJOR_OPCODE (template->meta_opcode) == OPC_MUL;\n+  bfd_boolean o1z = 0;\n+  bfd_boolean imm = ((template->meta_opcode >> 25) & 0x1) != 0;\n+  bfd_boolean cond = ((template->meta_opcode >> 26) & 0x1) != 0;\n+  bfd_boolean ca = ((template->meta_opcode >> 5) & 0x1) != 0;\n+  bfd_boolean top = (template->meta_opcode & 0x1) != 0;\n+  bfd_boolean sign_extend = 0;\n+  bfd_boolean is_addr_op = MAJOR_OPCODE (template->meta_opcode) == OPC_ADDR;\n+  bfd_boolean is_mul = MAJOR_OPCODE (template->meta_opcode) == OPC_MUL;\n   unsigned int unit_bit = 0;\n-  bfd_boolean is_quickrot = template->arg_type & GP_ARGS_QR;\n+  bfd_boolean is_quickrot = (template->arg_type & GP_ARGS_QR) != 0;\n \n   l = parse_gp_regs (l, dest_regs, 1);\n \n@@ -2511,7 +2510,7 @@ parse_alu (const char *line, metag_insn *insn,\n     }\n   else\n     {\n-      unsigned int o2r = 0;\n+      bfd_boolean o2r = 0;\n       int rs2;\n \n       if (cond || !o1z)\n@@ -2690,7 +2689,7 @@ parse_alu (const char *line, metag_insn *insn,\n \t}\n     }\n \n-  if (sign_extend == 1 && top == 0)\n+  if (sign_extend && !top)\n     insn->bits |= (1 << 1);\n \n   insn->bits |= unit_bit << 24;\n@@ -2787,8 +2786,8 @@ parse_shift (const char *line, metag_insn *insn,\n   const metag_reg *regs[2];\n   const metag_reg *src2_regs[1];\n   int value = 0;\n-  unsigned int cond = (template->meta_opcode >> 26) & 0x1;\n-  unsigned int ca = (template->meta_opcode >> 5) & 0x1;\n+  bfd_boolean cond = ((template->meta_opcode >> 26) & 0x1) != 0;\n+  bfd_boolean ca = ((template->meta_opcode >> 5) & 0x1) != 0;\n   unsigned int unit_bit = 0;\n \n   l = parse_gp_regs (l, regs, 2);\n@@ -2910,11 +2909,10 @@ parse_bitop (const char *line, metag_insn *insn,\n {\n   const char *l = line;\n   const metag_reg *regs[2];\n-  unsigned int swap_inst = MAJOR_OPCODE (template->meta_opcode) == OPC_MISC;\n-  unsigned int is_bexl = 0;\n+  bfd_boolean swap_inst = MAJOR_OPCODE (template->meta_opcode) == OPC_MISC;\n+  bfd_boolean is_bexl = 0;\n \n-  if (swap_inst &&\n-      ((template->meta_opcode >> 1) & 0xb) == 0xa)\n+  if (swap_inst && ((template->meta_opcode >> 1) & 0xb) == 0xa)\n     is_bexl = 1;\n \n   l = parse_gp_regs (l, regs, 2);\n@@ -2966,10 +2964,10 @@ parse_cmp (const char *line, metag_insn *insn,\n   const metag_reg *dest_regs[1];\n   const metag_reg *src_regs[1];\n   int value = 0;\n-  unsigned int imm = (template->meta_opcode >> 25) & 0x1;\n-  unsigned int cond = (template->meta_opcode >> 26) & 0x1;\n-  unsigned int top = template->meta_opcode & 0x1;\n-  unsigned int sign_extend = 0;\n+  bfd_boolean imm = ((template->meta_opcode >> 25) & 0x1) != 0;\n+  bfd_boolean cond = ((template->meta_opcode >> 26) & 0x1) != 0;\n+  bfd_boolean top = (template->meta_opcode & 0x1) != 0;\n+  bfd_boolean sign_extend = 0;\n   unsigned int unit_bit = 0;\n \n   l = parse_gp_regs (l, dest_regs, 1);\n@@ -3039,7 +3037,7 @@ parse_cmp (const char *line, metag_insn *insn,\n     }\n   else\n     {\n-      unsigned int o2r = 0;\n+      bfd_boolean o2r = 0;\n       int rs2;\n \n       l = parse_gp_regs (l, src_regs, 1);\n@@ -3069,7 +3067,7 @@ parse_cmp (const char *line, metag_insn *insn,\n \tinsn->bits |= 1;\n     }\n \n-  if (sign_extend == 1 && top == 0)\n+  if (sign_extend && !top)\n     insn->bits |= (1 << 1);\n \n   insn->bits |= unit_bit << 24;\n@@ -3346,7 +3344,7 @@ parse_fmmov (const char *line, metag_insn *insn,\n {\n   const char *l = line;\n   bfd_boolean to_fpu = MAJOR_OPCODE (template->meta_opcode) == OPC_GET;\n-  bfd_boolean is_mmovl = MINOR_OPCODE (template->meta_opcode) & 0x1;\n+  bfd_boolean is_mmovl = (MINOR_OPCODE (template->meta_opcode) & 0x1) != 0;\n   size_t regs_read = 0;\n   const metag_reg *regs[16];\n   unsigned int lowest_data_reg = 0xffffffff;\n@@ -3457,7 +3455,7 @@ parse_fmov_data (const char *line, metag_insn *insn,\n \t    const insn_template *template)\n {\n   const char *l = line;\n-  unsigned int to_fpu = ((template->meta_opcode >> 7) & 0x1);\n+  bfd_boolean to_fpu = ((template->meta_opcode >> 7) & 0x1) != 0;\n   const metag_reg *regs[2];\n   unsigned int base_unit;\n \n@@ -3864,11 +3862,11 @@ parse_fearith (const char *line, metag_insn *insn,\n {\n   const char *l = line;\n   const metag_reg *regs[3];\n-  bfd_boolean is_muz = (MINOR_OPCODE (template->meta_opcode) == 0x6 &&\n-\t\t\t((template->meta_opcode >> 4) & 0x1));\n-  unsigned int is_o3o = template->meta_opcode & 0x1;\n-  unsigned int is_mac = 0;\n-  unsigned int is_maw = 0;\n+  bfd_boolean is_muz = (MINOR_OPCODE (template->meta_opcode) == 0x6\n+\t\t\t&& ((template->meta_opcode >> 4) & 0x1) != 0);\n+  bfd_boolean is_o3o = (template->meta_opcode & 0x1) != 0;\n+  bfd_boolean is_mac = 0;\n+  bfd_boolean is_maw = 0;\n \n   if (!strncasecmp (template->name, \"MAW\", 3))\n     is_maw = 1;\n@@ -4477,8 +4475,8 @@ parse_dget_set (const char *line, metag_insn *insn,\n   metag_addr addr;\n   int unit = 0;\n   int rd_reg = 0;\n-  bfd_boolean is_get = (template->meta_opcode & 0x100);\n-  bfd_boolean is_dual = (template->meta_opcode & 0x4);\n+  bfd_boolean is_get = (template->meta_opcode & 0x100) != 0;\n+  bfd_boolean is_dual = (template->meta_opcode & 0x4) != 0;\n   bfd_boolean is_template = FALSE;\n   const metag_reg *regs[2];\n   unsigned int size;\n@@ -4966,7 +4964,7 @@ parse_dalu (const char *line, metag_insn *insn,\n   bfd_boolean is_mov = MAJOR_OPCODE (template->meta_opcode) == OPC_ADD;\n   bfd_boolean is_cmp = ((MAJOR_OPCODE (template->meta_opcode) == OPC_CMP) &&\n \t\t\t((template->meta_opcode & 0xee) == 0));\n-  bfd_boolean is_dual = (insn->dsp_width == DSP_WIDTH_DUAL);\n+  bfd_boolean is_dual = insn->dsp_width == DSP_WIDTH_DUAL;\n   bfd_boolean is_quickrot64 = ((insn->dsp_action_flags & DSP_ACTION_QR64) != 0);\n   int l1_shift = INVALID_SHIFT;\n   bfd_boolean load = FALSE;\n@@ -5005,7 +5003,7 @@ parse_dalu (const char *line, metag_insn *insn,\n   int mx_shift = INVALID_SHIFT;\n   int size = is_dual ? 8 : 4;\n   bfd_boolean dspram;\n-  bfd_boolean conditional = (MINOR_OPCODE (template->meta_opcode) & 0x4);\n+  bfd_boolean conditional = (MINOR_OPCODE (template->meta_opcode) & 0x4) != 0;\n \n   /* XFIXME: check the flags are valid with the instruction.  */\n   if (is_quickrot64 && !(template->arg_type & DSP_ARGS_QR))\n@@ -5311,10 +5309,10 @@ parse_dalu (const char *line, metag_insn *insn,\n   /* Group 2.  */\n   if (template->arg_type & DSP_ARGS_2)\n     {\n-      bfd_boolean is_xsd = ((MAJOR_OPCODE (template->meta_opcode) == OPC_MISC) &&\n-\t\t\t    (MINOR_OPCODE (template->meta_opcode) == 0xa));\n+      bfd_boolean is_xsd = (MAJOR_OPCODE (template->meta_opcode) == OPC_MISC\n+\t\t\t    && MINOR_OPCODE (template->meta_opcode) == 0xa);\n       bfd_boolean is_fpu_mov = template->insn_type == INSN_DSP_FPU;\n-      bfd_boolean to_fpu = (template->meta_opcode >> 7) & 0x1;\n+      bfd_boolean to_fpu = ((template->meta_opcode >> 7) & 0x1) != 0;\n \n       if (is_xsd)\n \tdu_shift = 0;\n@@ -5821,7 +5819,7 @@ static const struct metag_core_option metag_dsps[] =\n   };\n \n /* Parse a CPU command line option.  */\n-static int\n+static bfd_boolean\n metag_parse_cpu (const char * str)\n {\n   const struct metag_core_option * opt;\n@@ -5847,7 +5845,7 @@ metag_parse_cpu (const char * str)\n }\n \n /* Parse an FPU command line option.  */\n-static int\n+static bfd_boolean\n metag_parse_fpu (const char * str)\n {\n   const struct metag_core_option * opt;\n@@ -5873,7 +5871,7 @@ metag_parse_fpu (const char * str)\n }\n \n /* Parse a DSP command line option.  */\n-static int\n+static bfd_boolean\n metag_parse_dsp (const char * str)\n {\n   const struct metag_core_option * opt;\n@@ -5900,10 +5898,10 @@ metag_parse_dsp (const char * str)\n \n struct metag_long_option\n {\n-  const char * option;                /* Substring to match.  */\n-  const char * help;                  /* Help information.  */\n-  int (* func) (const char * subopt); /* Function to decode sub-option.  */\n-  const char * deprecated;            /* If non-null, print this message.  */\n+  const char *option;\t\t\t/* Substring to match.  */\n+  const char *help;\t\t\t/* Help information.  */\n+  bfd_boolean (*func) (const char *subopt);\t/* Function to decode sub-option.  */\n+  const char *deprecated;\t\t/* If non-null, print this message.  */\n };\n \n struct metag_long_option metag_long_opts[] ="
    },
    {
      "sha": "d33a18d2ff91d9bfb987612e252a7952ea20e5d2",
      "filename": "gas/config/tc-msp430.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/854f1e4be9172c835d1b89973d29ce66f9e65479/gas/config/tc-msp430.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/854f1e4be9172c835d1b89973d29ce66f9e65479/gas/config/tc-msp430.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-msp430.c?ref=854f1e4be9172c835d1b89973d29ce66f9e65479",
      "patch": "@@ -2377,7 +2377,7 @@ msp430_dstoperand (struct msp430_operand_s * op,\n \t\t   bfd_boolean allow_20bit_values,\n \t\t   bfd_boolean constants_allowed)\n {\n-  int dummy;\n+  bfd_boolean dummy;\n   int ret = msp430_srcoperand (op, l, bin, & dummy,\n \t\t\t       allow_20bit_values,\n \t\t\t       constants_allowed);"
    },
    {
      "sha": "cf866a58eae5a026d84fa45dfab0a5d12f8b1d02",
      "filename": "gas/config/tc-s12z.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/854f1e4be9172c835d1b89973d29ce66f9e65479/gas/config/tc-s12z.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/854f1e4be9172c835d1b89973d29ce66f9e65479/gas/config/tc-s12z.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-s12z.c?ref=854f1e4be9172c835d1b89973d29ce66f9e65479",
      "patch": "@@ -425,7 +425,7 @@ lex_reg_name (uint16_t which, int *reg)\n   return false;\n }\n \n-static int\n+static bfd_boolean\n lex_force_match (char x)\n {\n   char *p = input_line_pointer;\n@@ -783,7 +783,7 @@ lex_offset (long *val)\n \n struct instruction;\n \n-typedef int (*parse_operand_func) (const struct instruction *);\n+typedef bfd_boolean (*parse_operand_func) (const struct instruction *);\n \n struct instruction\n {\n@@ -805,7 +805,7 @@ struct instruction\n   uint8_t alt_opc;\n };\n \n-static int\n+static bfd_boolean\n no_operands (const struct instruction *insn)\n {\n   if (*input_line_pointer != '\\0')\n@@ -1031,7 +1031,7 @@ clr_xy (const struct instruction *insn ATTRIBUTE_UNUSED)\n \n /* Some instructions have a suffix like \".l\", \".b\", \".w\" etc\n    which indicates the size of the operands. */\n-static bfd_boolean\n+static int\n size_from_suffix  (const struct instruction *insn, int idx)\n {\n   const char *dot = strchr (insn->name, '.');\n@@ -1342,7 +1342,7 @@ static const uint8_t reg_map [] =\n     0x00\n   };\n \n-static  int\n+static bfd_boolean\n lex_reg_list (uint16_t grp, uint16_t *reg_bits)\n {\n   if (lex_match (','))\n@@ -3858,7 +3858,7 @@ long\n s12z_relax_frag (segT seg ATTRIBUTE_UNUSED, fragS *fragP ATTRIBUTE_UNUSED,\n \t\t   long stretch ATTRIBUTE_UNUSED)\n {\n-  return false;\n+  return 0;\n }\n \n void\n@@ -3877,7 +3877,7 @@ md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED, asection *sec ATTRIBUTE_UNUSED,\n int\n md_estimate_size_before_relax (fragS *fragP ATTRIBUTE_UNUSED, asection *segment ATTRIBUTE_UNUSED)\n {\n-  return false;\n+  return 0;\n }\n \n "
    },
    {
      "sha": "2a8416e205244490c6e5f81673a9516f7007c743",
      "filename": "gas/config/tc-s12z.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/854f1e4be9172c835d1b89973d29ce66f9e65479/gas/config/tc-s12z.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/854f1e4be9172c835d1b89973d29ce66f9e65479/gas/config/tc-s12z.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-s12z.h?ref=854f1e4be9172c835d1b89973d29ce66f9e65479",
      "patch": "@@ -91,7 +91,7 @@ extern long s12z_relax_frag (segT, fragS*, long);\n extern int tc_s12z_force_relocation (struct fix *);\n \n #define tc_fix_adjustable(X) tc_s12z_fix_adjustable(X)\n-extern int tc_s12z_fix_adjustable (struct fix *);\n+extern bfd_boolean tc_s12z_fix_adjustable (struct fix *);\n \n #define md_operand(x)\n "
    }
  ]
}