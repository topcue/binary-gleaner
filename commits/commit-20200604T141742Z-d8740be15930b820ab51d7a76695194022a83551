{
  "sha": "d8740be15930b820ab51d7a76695194022a83551",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDg3NDBiZTE1OTMwYjgyMGFiNTFkN2E3NjY5NTE5NDAyMmE4MzU1MQ==",
  "commit": {
    "author": {
      "name": "Jose E. Marchesi",
      "email": "jose.marchesi@oracle.com",
      "date": "2020-06-04T14:17:07Z"
    },
    "committer": {
      "name": "Jose E. Marchesi",
      "email": "jose.marchesi@oracle.com",
      "date": "2020-06-04T14:17:42Z"
    },
    "message": "cpu,gas,opcodes: remove no longer needed workaround from the BPF port\n\ncpu/ChangeLog:\n\n2020-06-02  Jose E. Marchesi  <jose.marchesi@oracle.com>\n\n\t* bpf.cpu (define-bpf-isa): Set base-insn-bitsize to 64.\n\t* bpf.opc (bpf_print_insn): Do not set endian_code here.\n\ngas/ChangeLog:\n\n2020-06-04  Jose E. Marchesi  <jose.marchesi@oracle.com>\n\n\t* config/tc-bpf.c (md_begin): Pass CGEN_CPU_OPEN_INSN_ENDIAN to\n\tbpf_cgen_cpu_open.\n\t(md_assemble): Remove no longer needed hack.\n\nopcodes/ChangeLog:\n\n2020-06-04  Jose E. Marchesi  <jose.marchesi@oracle.com>\n\n\t* disassemble.c (disassemble_init_for_target): Set endian_code for\n\tbpf targets.\n\t* bpf-desc.c: Regenerate.\n\t* bpf-opc.c: Likewise.\n\t* bpf-dis.c: Likewise.",
    "tree": {
      "sha": "bc27d8c02f25e78556d67cf0f753e39d070bd47f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bc27d8c02f25e78556d67cf0f753e39d070bd47f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d8740be15930b820ab51d7a76695194022a83551",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d8740be15930b820ab51d7a76695194022a83551",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d8740be15930b820ab51d7a76695194022a83551",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d8740be15930b820ab51d7a76695194022a83551/comments",
  "author": {
    "login": "jemarch",
    "id": 7061875,
    "node_id": "MDQ6VXNlcjcwNjE4NzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jemarch",
    "html_url": "https://github.com/jemarch",
    "followers_url": "https://api.github.com/users/jemarch/followers",
    "following_url": "https://api.github.com/users/jemarch/following{/other_user}",
    "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions",
    "organizations_url": "https://api.github.com/users/jemarch/orgs",
    "repos_url": "https://api.github.com/users/jemarch/repos",
    "events_url": "https://api.github.com/users/jemarch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jemarch/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jemarch",
    "id": 7061875,
    "node_id": "MDQ6VXNlcjcwNjE4NzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jemarch",
    "html_url": "https://github.com/jemarch",
    "followers_url": "https://api.github.com/users/jemarch/followers",
    "following_url": "https://api.github.com/users/jemarch/following{/other_user}",
    "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions",
    "organizations_url": "https://api.github.com/users/jemarch/orgs",
    "repos_url": "https://api.github.com/users/jemarch/repos",
    "events_url": "https://api.github.com/users/jemarch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jemarch/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e9bffec9afc45cf7c49308f0b4b8cc6bf68f58f2"
    }
  ],
  "stats": {
    "total": 90,
    "additions": 51,
    "deletions": 39
  },
  "files": [
    {
      "sha": "f2ac243c68e1e70714ba7cff81a039f569649ba7",
      "filename": "cpu/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8740be15930b820ab51d7a76695194022a83551/cpu/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8740be15930b820ab51d7a76695194022a83551/cpu/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/ChangeLog?ref=d8740be15930b820ab51d7a76695194022a83551",
      "patch": "@@ -1,3 +1,8 @@\n+2020-06-02  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* bpf.cpu (define-bpf-isa): Set base-insn-bitsize to 64.\n+\t* bpf.opc (bpf_print_insn): Do not set endian_code here.\n+\n 2020-06-02  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* mep.opc (print_slot_insn): Pass the insn endianness to"
    },
    {
      "sha": "dcfb0ca8cf1dc8f833277c9b8bf69e2e64297be2",
      "filename": "cpu/bpf.cpu",
      "status": "modified",
      "additions": 3,
      "deletions": 7,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8740be15930b820ab51d7a76695194022a83551/cpu/bpf.cpu",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8740be15930b820ab51d7a76695194022a83551/cpu/bpf.cpu",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/bpf.cpu?ref=d8740be15930b820ab51d7a76695194022a83551",
      "patch": "@@ -98,13 +98,9 @@\n     ;; Length of an unknown instruction.  Used by disassembly and by the\n     ;; simulator's invalid insn handler.\n     (default-insn-bitsize 64)\n-    ;; Number of bits of insn that can be initially fetched.  XXX this\n-    ;; should be 64 (the size of the smallest insn) but until CGEN\n-    ;; gets fixed to place constant fields in their own words, we have\n-    ;; to use this workaround to avoid the opcode byte to be placed at\n-    ;; the wrong side of the instruction when assembling in\n-    ;; big-endian.\n-    (base-insn-bitsize 8)))\n+    ;; Number of bits of insn that can be initially fetched.  This is\n+    ;; the size of the smallest insn.\n+    (base-insn-bitsize 64)))\n \n (define-bpf-isa le)\n (define-bpf-isa be)"
    },
    {
      "sha": "e70ee04841df05bb8267961968c6b8d64e49f40c",
      "filename": "cpu/bpf.opc",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8740be15930b820ab51d7a76695194022a83551/cpu/bpf.opc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8740be15930b820ab51d7a76695194022a83551/cpu/bpf.opc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/bpf.opc?ref=d8740be15930b820ab51d7a76695194022a83551",
      "patch": "@@ -129,7 +129,6 @@ bpf_print_insn (CGEN_CPU_DESC cd, bfd_vma pc, disassemble_info *info)\n \n   info->bytes_per_chunk = 1;\n   info->bytes_per_line = 8;\n-  info->endian_code = BFD_ENDIAN_BIG;\n \n   /* Attempt to read the base part of the insn.  */\n   buflen = cd->base_insn_bitsize / 8;"
    },
    {
      "sha": "91e3dc2ba250356947d6c6745575a6cea2055ad0",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8740be15930b820ab51d7a76695194022a83551/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8740be15930b820ab51d7a76695194022a83551/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=d8740be15930b820ab51d7a76695194022a83551",
      "patch": "@@ -1,3 +1,9 @@\n+2020-06-04  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* config/tc-bpf.c (md_begin): Pass CGEN_CPU_OPEN_INSN_ENDIAN to\n+\tbpf_cgen_cpu_open.\n+\t(md_assemble): Remove no longer needed hack.\n+\n 2020-06-04  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* cgen.c (gas_cgen_finish_insn): Pass the endianness to"
    },
    {
      "sha": "b742f426a1fd0e2d2dbf44f528a8c6e3fb5bc34d",
      "filename": "gas/config/tc-bpf.c",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8740be15930b820ab51d7a76695194022a83551/gas/config/tc-bpf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8740be15930b820ab51d7a76695194022a83551/gas/config/tc-bpf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-bpf.c?ref=d8740be15930b820ab51d7a76695194022a83551",
      "patch": "@@ -174,6 +174,8 @@ md_begin (void)\n   gas_cgen_cpu_desc = bpf_cgen_cpu_open (CGEN_CPU_OPEN_ENDIAN,\n                                          target_big_endian ?\n                                          CGEN_ENDIAN_BIG : CGEN_ENDIAN_LITTLE,\n+                                         CGEN_CPU_OPEN_INSN_ENDIAN,\n+                                         CGEN_ENDIAN_LITTLE,\n                                          CGEN_CPU_OPEN_ISAS,\n                                          bpf_isa,\n                                          CGEN_CPU_OPEN_END);\n@@ -354,10 +356,6 @@ md_assemble (char *str)\n   CGEN_INSN_INT buffer[CGEN_MAX_INSN_SIZE / sizeof (CGEN_INT_INSN_P)];\n #else\n   unsigned char buffer[CGEN_MAX_INSN_SIZE];\n-  memset (buffer, 0, CGEN_MAX_INSN_SIZE); /* XXX to remove when CGEN\n-                                             is fixed to handle\n-                                             opcodes-in-words\n-                                             properly.  */\n #endif\n \n   gas_cgen_init_parse ();"
    },
    {
      "sha": "63824c8e336a773acbe69c6bfe790df74a37f7fe",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8740be15930b820ab51d7a76695194022a83551/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8740be15930b820ab51d7a76695194022a83551/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=d8740be15930b820ab51d7a76695194022a83551",
      "patch": "@@ -1,3 +1,11 @@\n+2020-06-04  Jose E. Marchesi  <jose.marchesi@oracle.com>\n+\n+\t* disassemble.c (disassemble_init_for_target): Set endian_code for\n+\tbpf targets.\n+\t* bpf-desc.c: Regenerate.\n+\t* bpf-opc.c: Likewise.\n+\t* bpf-dis.c: Likewise.\n+\n 2020-06-03  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* cgen-opc.c (cgen_get_insn_value): Get an `endian' argument."
    },
    {
      "sha": "6319f100f3ca001ff09fb944acc8fb5f56e6186e",
      "filename": "opcodes/bpf-desc.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8740be15930b820ab51d7a76695194022a83551/opcodes/bpf-desc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8740be15930b820ab51d7a76695194022a83551/opcodes/bpf-desc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/bpf-desc.c?ref=d8740be15930b820ab51d7a76695194022a83551",
      "patch": "@@ -119,8 +119,8 @@ const CGEN_ATTR_TABLE bpf_cgen_insn_attr_table[] =\n /* Instruction set variants.  */\n \n static const CGEN_ISA bpf_cgen_isa_table[] = {\n-  { \"ebpfle\", 64, 8, 64, 128 },\n-  { \"ebpfbe\", 64, 8, 64, 128 },\n+  { \"ebpfle\", 64, 64, 64, 128 },\n+  { \"ebpfbe\", 64, 64, 64, 128 },\n   { 0, 0, 0, 0, 0 }\n };\n "
    },
    {
      "sha": "9425ee7f3cb25d600c87dbcc7b64f6694443705e",
      "filename": "opcodes/bpf-dis.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8740be15930b820ab51d7a76695194022a83551/opcodes/bpf-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8740be15930b820ab51d7a76695194022a83551/opcodes/bpf-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/bpf-dis.c?ref=d8740be15930b820ab51d7a76695194022a83551",
      "patch": "@@ -75,7 +75,6 @@ bpf_print_insn (CGEN_CPU_DESC cd, bfd_vma pc, disassemble_info *info)\n \n   info->bytes_per_chunk = 1;\n   info->bytes_per_line = 8;\n-  info->endian_code = BFD_ENDIAN_BIG;\n \n   /* Attempt to read the base part of the insn.  */\n   buflen = cd->base_insn_bitsize / 8;"
    },
    {
      "sha": "00f3b25f768f79502fedbab4b33809487254ed04",
      "filename": "opcodes/bpf-opc.c",
      "status": "modified",
      "additions": 24,
      "deletions": 24,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8740be15930b820ab51d7a76695194022a83551/opcodes/bpf-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8740be15930b820ab51d7a76695194022a83551/opcodes/bpf-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/bpf-opc.c?ref=d8740be15930b820ab51d7a76695194022a83551",
      "patch": "@@ -50,99 +50,99 @@ static const CGEN_IFMT ifmt_empty ATTRIBUTE_UNUSED = {\n };\n \n static const CGEN_IFMT ifmt_addile ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_CODE) }, { F (F_DSTLE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_CODE) }, { F (F_DSTLE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_addrle ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_CODE) }, { F (F_DSTLE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_CODE) }, { F (F_DSTLE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_negle ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_CODE) }, { F (F_DSTLE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_CODE) }, { F (F_DSTLE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_addibe ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_CODE) }, { F (F_SRCBE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_CODE) }, { F (F_SRCBE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_addrbe ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_CODE) }, { F (F_SRCBE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_CODE) }, { F (F_SRCBE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_negbe ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_CODE) }, { F (F_SRCBE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_CODE) }, { F (F_SRCBE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_endlele ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_CODE) }, { F (F_DSTLE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_CODE) }, { F (F_DSTLE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_endlebe ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_CODE) }, { F (F_SRCBE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_CODE) }, { F (F_SRCBE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_lddwle ATTRIBUTE_UNUSED = {\n-  8, 128, 0xff, { { F (F_IMM64) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_MODE) }, { F (F_OP_SIZE) }, { F (F_DSTLE) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 128, 0xff, { { F (F_IMM64) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_MODE) }, { F (F_OP_SIZE) }, { F (F_DSTLE) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_lddwbe ATTRIBUTE_UNUSED = {\n-  8, 128, 0xff, { { F (F_IMM64) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_MODE) }, { F (F_OP_SIZE) }, { F (F_SRCBE) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 128, 0xff, { { F (F_IMM64) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_MODE) }, { F (F_OP_SIZE) }, { F (F_SRCBE) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_ldabsw ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_REGS) }, { F (F_OP_MODE) }, { F (F_OP_SIZE) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_REGS) }, { F (F_OP_MODE) }, { F (F_OP_SIZE) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_ldindwle ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_MODE) }, { F (F_OP_SIZE) }, { F (F_DSTLE) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_MODE) }, { F (F_OP_SIZE) }, { F (F_DSTLE) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_ldindwbe ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_MODE) }, { F (F_OP_SIZE) }, { F (F_SRCBE) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_MODE) }, { F (F_OP_SIZE) }, { F (F_SRCBE) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_ldxwle ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_MODE) }, { F (F_OP_SIZE) }, { F (F_DSTLE) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_MODE) }, { F (F_OP_SIZE) }, { F (F_DSTLE) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_ldxwbe ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_MODE) }, { F (F_OP_SIZE) }, { F (F_SRCBE) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_MODE) }, { F (F_OP_SIZE) }, { F (F_SRCBE) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_stble ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_MODE) }, { F (F_OP_SIZE) }, { F (F_DSTLE) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_MODE) }, { F (F_OP_SIZE) }, { F (F_DSTLE) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_stbbe ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_MODE) }, { F (F_OP_SIZE) }, { F (F_SRCBE) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_MODE) }, { F (F_OP_SIZE) }, { F (F_SRCBE) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_jeqile ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_CODE) }, { F (F_DSTLE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_CODE) }, { F (F_DSTLE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_jeqrle ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_CODE) }, { F (F_DSTLE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_SRCLE) }, { F (F_OP_CODE) }, { F (F_DSTLE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_jeqibe ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_CODE) }, { F (F_SRCBE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_CODE) }, { F (F_SRCBE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_jeqrbe ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_CODE) }, { F (F_SRCBE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_DSTBE) }, { F (F_OP_CODE) }, { F (F_SRCBE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_callle ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_REGS) }, { F (F_OP_CODE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_REGS) }, { F (F_OP_CODE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_ja ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_REGS) }, { F (F_OP_CODE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_REGS) }, { F (F_OP_CODE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n static const CGEN_IFMT ifmt_exit ATTRIBUTE_UNUSED = {\n-  8, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_REGS) }, { F (F_OP_CODE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n+  64, 64, 0xff, { { F (F_IMM32) }, { F (F_OFFSET16) }, { F (F_REGS) }, { F (F_OP_CODE) }, { F (F_OP_SRC) }, { F (F_OP_CLASS) }, { 0 } }\n };\n \n #undef F"
    },
    {
      "sha": "299c23db137e1c73cbf09ad456dcac4f21c29fd7",
      "filename": "opcodes/disassemble.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8740be15930b820ab51d7a76695194022a83551/opcodes/disassemble.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8740be15930b820ab51d7a76695194022a83551/opcodes/disassemble.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/disassemble.c?ref=d8740be15930b820ab51d7a76695194022a83551",
      "patch": "@@ -660,6 +660,7 @@ disassemble_init_for_target (struct disassemble_info * info)\n #endif\n #ifdef ARCH_bpf\n     case bfd_arch_bpf:\n+      info->endian_code = BFD_ENDIAN_LITTLE;\n       if (!info->private_data)\n \t{\n \t  info->private_data = cgen_bitset_create (ISA_EBPFMAX);"
    }
  ]
}