{
  "sha": "9c027c2f6c5cdb3db0b8c72c06b691c5ba502279",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWMwMjdjMmY2YzVjZGIzZGIwYjhjNzJjMDZiNjkxYzViYTUwMjI3OQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-12-04T12:36:47Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-12-04T12:36:47Z"
    },
    "message": "[gdb/testsuite] Handle SIGILL in gdb.reverse/insn-reverse.exp\n\nConsider test-case gdb.reverse/insn-reverse.exp.\n\nIt runs a number of subtests, dependent on the architecture, f.i. for\nx86_64 it runs subtests rdrand and rdseed.\n\nFor each subtest, it checks whether the subtest is supported and otherwise\nbails out of that subtest.\n\nHowever, there may be a problem with the support test or the information it\nrelies on, and if it states that a subtest is supported while it is actually\nnot, we may run into a SIGILL, as f.i. described in PR21166, which results in\ntcl errors like this:\n...\nERROR: tcl error sourcing src/gdb/testsuite/gdb.reverse/insn-reverse.exp.\nERROR: can't read \"insn_array(5)\": no such element in array\n...\n\nWe can emulate this by inserting a sigfpe in function rdrand in\ninsn-reverse-x86.c, like this:\n...\n  volatile int a = 0; volatile int b = 1; volatile int c = b / a;\n...\n\nThe problem is that the loop in the test-case attempts to stepi over of all\ninsn in rdrand, but because of the signal it will never get to the last insn.\n\nHandle this by detecting that the stepi made no progress, and bailing out of\nthe loop.\n\nFurthermore, make running of the subtests independent, such that a SIGILL in\nsubtest rdrand does not affect running of subtest rdseed.\n\nTested on x86_64-linux.\n\ngdb/testsuite/ChangeLog:\n\n2020-12-04  Tom de Vries  <tdevries@suse.de>\n\n\t* gdb.reverse/insn-reverse.c (test_nr): New var.\n\t(usage, parse_args): New function.\n\t(main): Call parse_args.  Only run test for test_nr.\n\t* gdb.reverse/insn-reverse.exp: Detect lack of progress in stepi loop\n\tand bail out.  Run subtests individually, using an inferior arg\n\tspecifying the subtest.",
    "tree": {
      "sha": "d185e8438ffe0a6ffc0ff28551e33249cc02c4cc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d185e8438ffe0a6ffc0ff28551e33249cc02c4cc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9c027c2f6c5cdb3db0b8c72c06b691c5ba502279",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9c027c2f6c5cdb3db0b8c72c06b691c5ba502279",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9c027c2f6c5cdb3db0b8c72c06b691c5ba502279",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9c027c2f6c5cdb3db0b8c72c06b691c5ba502279/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c524d11e50729ac1a14ac1e749d9a5c459881391",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c524d11e50729ac1a14ac1e749d9a5c459881391",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c524d11e50729ac1a14ac1e749d9a5c459881391"
    }
  ],
  "stats": {
    "total": 67,
    "additions": 61,
    "deletions": 6
  },
  "files": [
    {
      "sha": "36953af0d75e7cae890a3693d5c441406547e969",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c027c2f6c5cdb3db0b8c72c06b691c5ba502279/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c027c2f6c5cdb3db0b8c72c06b691c5ba502279/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=9c027c2f6c5cdb3db0b8c72c06b691c5ba502279",
      "patch": "@@ -1,3 +1,12 @@\n+2020-12-04  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdb.reverse/insn-reverse.c (test_nr): New var.\n+\t(usage, parse_args): New function.\n+\t(main): Call parse_args.  Only run test for test_nr.\n+\t* gdb.reverse/insn-reverse.exp: Detect lack of progress in stepi loop\n+\tand bail out.  Run subtests individually, using an inferior arg\n+\tspecifying the subtest.\n+\n 2020-12-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.arch/riscv-tdesc-regs.exp: Remove unwanted test."
    },
    {
      "sha": "b3881d44251cd168cc4ac81808f13396f92efadd",
      "filename": "gdb/testsuite/gdb.reverse/insn-reverse.c",
      "status": "modified",
      "additions": 39,
      "deletions": 4,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c027c2f6c5cdb3db0b8c72c06b691c5ba502279/gdb/testsuite/gdb.reverse/insn-reverse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c027c2f6c5cdb3db0b8c72c06b691c5ba502279/gdb/testsuite/gdb.reverse/insn-reverse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.reverse/insn-reverse.c?ref=9c027c2f6c5cdb3db0b8c72c06b691c5ba502279",
      "patch": "@@ -15,6 +15,9 @@\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n+#include <stdlib.h>\n+#include <stdio.h>\n+\n typedef void (*testcase_ftype) (void);\n \n /* The arch-specific files need to implement both the initialize function\n@@ -45,16 +48,48 @@ initialize (void)\n    array is defined together with them.  */\n static int n_testcases = (sizeof (testcases) / sizeof (testcase_ftype));\n \n+static void\n+usage (void)\n+{\n+  printf (\"usage: insn-reverse <0-%d>\\n\", n_testcases - 1);\n+}\n+\n+static int test_nr;\n+\n+static void\n+parse_args (int argc, char **argv)\n+{\n+  if (argc != 2)\n+    {\n+      usage ();\n+      exit (1);\n+    }\n+\n+  char *tail;\n+  test_nr = strtol (argv[1], &tail, 10);\n+  if (*tail != '\\0')\n+    {\n+      usage ();\n+      exit (1);\n+    }\n+\n+  int in_range_p = 0 <= test_nr && test_nr < n_testcases;\n+  if (!in_range_p)\n+    {\n+      usage ();\n+      exit (1);\n+    }\n+}\n+\n int\n-main ()\n+main (int argc, char **argv)\n {\n-  int i = 0;\n+  parse_args (argc, argv);\n \n   /* Initialize any required arch-specific bits.  */\n   initialize ();\n \n-  for (i = 0; i < n_testcases; i++)\n-    testcases[i] ();\n+  testcases[test_nr] ();\n \n   return 0;\n }"
    },
    {
      "sha": "d60f873e0d076004390ffce5012ed4bb034bf011",
      "filename": "gdb/testsuite/gdb.reverse/insn-reverse.exp",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c027c2f6c5cdb3db0b8c72c06b691c5ba502279/gdb/testsuite/gdb.reverse/insn-reverse.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c027c2f6c5cdb3db0b8c72c06b691c5ba502279/gdb/testsuite/gdb.reverse/insn-reverse.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.reverse/insn-reverse.exp?ref=9c027c2f6c5cdb3db0b8c72c06b691c5ba502279",
      "patch": "@@ -50,11 +50,14 @@ proc read_testcase { n } {\n # the contents of registers are saved, and test compares them.  If\n # there is any differences, a FAIL is emitted.\n \n-proc test { func } {\n+proc test { func testcase_nr } {\n     global hex decimal\n     global gdb_prompt\n \n     with_test_prefix \"$func\" {\n+\tgdb_start_cmd $testcase_nr\n+\tgdb_test \"\" \"\" \"wait for prompt\"\n+\n \tgdb_breakpoint $func\n \tgdb_test \"continue\"\n \n@@ -74,15 +77,23 @@ proc test { func } {\n \n \t# Registers contents before each forward single step.\n \tset count 0\n+\tset insn_addr \"\"\n \tfor {} {$count < 500} {incr count} {\n \t    gdb_test_multiple \"x/i \\$pc\" \"\" {\n \t\t-re \".* ($hex) <.*>:\\[ \\t\\]*(.*)\\r\\n$gdb_prompt $\" {\n+\t\t    set prev_insn_addr $insn_addr\n \t\t    set insn_addr $expect_out(1,string)\n \n \t\t    if [expr {$last_insn == $insn_addr}] {\n \t\t\tbreak\n \t\t    }\n \n+\t\t    if { $prev_insn_addr == $insn_addr } {\n+\t\t\t# Failed to make progress, might have run into SIGILL.\n+\t\t\tunsupported \"no progress at: $expect_out(2,string)\"\n+\t\t\tbreak\n+\t\t    }\n+\n \t\t    set insn_array($count) $expect_out(2,string)\n \t\t}\n \t    }\n@@ -125,5 +136,5 @@ if { ${n_testcases} == 0 } {\n for { set i 0 } { ${i} < ${n_testcases} } { incr i } {\n     set testcase [read_testcase $i]\n \n-    test $testcase\n+    test $testcase $i\n }"
    }
  ]
}