{
  "sha": "627c7fb8ea16388f349b6b26e20bf017d71e51fe",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjI3YzdmYjhlYTE2Mzg4ZjM0OWI2YjI2ZTIwYmYwMTdkNzFlNTFmZQ==",
  "commit": {
    "author": {
      "name": "Hannes Domani",
      "email": "ssbssa@yahoo.de",
      "date": "2020-04-27T13:58:09Z"
    },
    "committer": {
      "name": "Hannes Domani",
      "email": "ssbssa@yahoo.de",
      "date": "2020-04-30T12:36:55Z"
    },
    "message": "Use thiscall calling convention for class members\n\nNon-static member functions for Windows 32bit programs need the thiscall\ncalling convention, so the 'this' pointer needs to be passed in ECX.\n\ngdb/ChangeLog:\n\n2020-04-30  Hannes Domani  <ssbssa@yahoo.de>\n\n\tPR gdb/15559\n\t* i386-tdep.c (i386_push_dummy_call): Call\n\ti386_thiscall_push_dummy_call.\n\t(i386_thiscall_push_dummy_call): New function.\n\t* i386-tdep.h (i386_thiscall_push_dummy_call): Declare.\n\t* i386-windows-tdep.c (i386_windows_push_dummy_call): New function.\n\t(i386_windows_init_abi): Call set_gdbarch_push_dummy_call.",
    "tree": {
      "sha": "6c3768b72f7861c80244e1cc16c1bebf88c76e7c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6c3768b72f7861c80244e1cc16c1bebf88c76e7c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/627c7fb8ea16388f349b6b26e20bf017d71e51fe",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/627c7fb8ea16388f349b6b26e20bf017d71e51fe",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/627c7fb8ea16388f349b6b26e20bf017d71e51fe",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/627c7fb8ea16388f349b6b26e20bf017d71e51fe/comments",
  "author": {
    "login": "ssbssa",
    "id": 40947,
    "node_id": "MDQ6VXNlcjQwOTQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40947?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ssbssa",
    "html_url": "https://github.com/ssbssa",
    "followers_url": "https://api.github.com/users/ssbssa/followers",
    "following_url": "https://api.github.com/users/ssbssa/following{/other_user}",
    "gists_url": "https://api.github.com/users/ssbssa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ssbssa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ssbssa/subscriptions",
    "organizations_url": "https://api.github.com/users/ssbssa/orgs",
    "repos_url": "https://api.github.com/users/ssbssa/repos",
    "events_url": "https://api.github.com/users/ssbssa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ssbssa/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "ssbssa",
    "id": 40947,
    "node_id": "MDQ6VXNlcjQwOTQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40947?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ssbssa",
    "html_url": "https://github.com/ssbssa",
    "followers_url": "https://api.github.com/users/ssbssa/followers",
    "following_url": "https://api.github.com/users/ssbssa/following{/other_user}",
    "gists_url": "https://api.github.com/users/ssbssa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ssbssa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ssbssa/subscriptions",
    "organizations_url": "https://api.github.com/users/ssbssa/orgs",
    "repos_url": "https://api.github.com/users/ssbssa/repos",
    "events_url": "https://api.github.com/users/ssbssa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ssbssa/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c578f16ef18fde35d5887909d5faaf0bd0118e9d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c578f16ef18fde35d5887909d5faaf0bd0118e9d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c578f16ef18fde35d5887909d5faaf0bd0118e9d"
    }
  ],
  "stats": {
    "total": 90,
    "additions": 83,
    "deletions": 7
  },
  "files": [
    {
      "sha": "d9f2b2c6f6bbd02629a70c5a59a0f86bfed21d73",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/627c7fb8ea16388f349b6b26e20bf017d71e51fe/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/627c7fb8ea16388f349b6b26e20bf017d71e51fe/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=627c7fb8ea16388f349b6b26e20bf017d71e51fe",
      "patch": "@@ -1,3 +1,13 @@\n+2020-04-30  Hannes Domani  <ssbssa@yahoo.de>\n+\n+\tPR gdb/15559\n+\t* i386-tdep.c (i386_push_dummy_call): Call\n+\ti386_thiscall_push_dummy_call.\n+\t(i386_thiscall_push_dummy_call): New function.\n+\t* i386-tdep.h (i386_thiscall_push_dummy_call): Declare.\n+\t* i386-windows-tdep.c (i386_windows_push_dummy_call): New function.\n+\t(i386_windows_init_abi): Call set_gdbarch_push_dummy_call.\n+\n 2020-04-29  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbarch.sh (do_read): Add shellcheck disable directive for"
    },
    {
      "sha": "fc63635317b037e9c86ffd0c3264fac1fa055949",
      "filename": "gdb/i386-tdep.c",
      "status": "modified",
      "additions": 28,
      "deletions": 7,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/627c7fb8ea16388f349b6b26e20bf017d71e51fe/gdb/i386-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/627c7fb8ea16388f349b6b26e20bf017d71e51fe/gdb/i386-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.c?ref=627c7fb8ea16388f349b6b26e20bf017d71e51fe",
      "patch": "@@ -2668,12 +2668,15 @@ i386_push_dummy_code (struct gdbarch *gdbarch, CORE_ADDR sp, CORE_ADDR funaddr,\n   return sp - 16;\n }\n \n-static CORE_ADDR\n-i386_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n-\t\t      struct regcache *regcache, CORE_ADDR bp_addr, int nargs,\n-\t\t      struct value **args, CORE_ADDR sp,\n-\t\t      function_call_return_method return_method,\n-\t\t      CORE_ADDR struct_addr)\n+/* The \"push_dummy_call\" gdbarch method, optionally with the thiscall\n+   calling convention.  */\n+\n+CORE_ADDR\n+i386_thiscall_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n+\t\t\t       struct regcache *regcache, CORE_ADDR bp_addr,\n+\t\t\t       int nargs, struct value **args, CORE_ADDR sp,\n+\t\t\t       function_call_return_method return_method,\n+\t\t\t       CORE_ADDR struct_addr, bool thiscall)\n {\n   enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n   gdb_byte buf[4];\n@@ -2709,7 +2712,7 @@ i386_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n \t    args_space += 4;\n \t}\n \n-      for (i = 0; i < nargs; i++)\n+      for (i = thiscall ? 1 : 0; i < nargs; i++)\n \t{\n \t  int len = TYPE_LENGTH (value_enclosing_type (args[i]));\n \n@@ -2761,6 +2764,10 @@ i386_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n   /* ...and fake a frame pointer.  */\n   regcache->cooked_write (I386_EBP_REGNUM, buf);\n \n+  /* The 'this' pointer needs to be in ECX.  */\n+  if (thiscall)\n+    regcache->cooked_write (I386_ECX_REGNUM, value_contents_all (args[0]));\n+\n   /* MarkK wrote: This \"+ 8\" is all over the place:\n      (i386_frame_this_id, i386_sigtramp_frame_this_id,\n      i386_dummy_id).  It's there, since all frame unwinders for\n@@ -2773,6 +2780,20 @@ i386_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n   return sp + 8;\n }\n \n+/* Implement the \"push_dummy_call\" gdbarch method.  */\n+\n+static CORE_ADDR\n+i386_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n+\t\t      struct regcache *regcache, CORE_ADDR bp_addr, int nargs,\n+\t\t      struct value **args, CORE_ADDR sp,\n+\t\t      function_call_return_method return_method,\n+\t\t      CORE_ADDR struct_addr)\n+{\n+  return i386_thiscall_push_dummy_call (gdbarch, function, regcache, bp_addr,\n+\t\t\t\t\tnargs, args, sp, return_method,\n+\t\t\t\t\tstruct_addr, false);\n+}\n+\n /* These registers are used for returning integers (and on some\n    targets also for returning `struct' and `union' values when their\n    size and alignment match an integer type).  */"
    },
    {
      "sha": "79b3b1f942898eb9b67b405294100ce0ff4ce3da",
      "filename": "gdb/i386-tdep.h",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/627c7fb8ea16388f349b6b26e20bf017d71e51fe/gdb/i386-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/627c7fb8ea16388f349b6b26e20bf017d71e51fe/gdb/i386-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.h?ref=627c7fb8ea16388f349b6b26e20bf017d71e51fe",
      "patch": "@@ -399,6 +399,19 @@ extern CORE_ADDR i386_pe_skip_trampoline_code (struct frame_info *frame,\n extern CORE_ADDR i386_skip_main_prologue (struct gdbarch *gdbarch,\n \t\t\t\t\t  CORE_ADDR pc);\n \n+/* The \"push_dummy_call\" gdbarch method, optionally with the thiscall\n+   calling convention.  */\n+extern CORE_ADDR i386_thiscall_push_dummy_call (struct gdbarch *gdbarch,\n+\t\t\t\t\t\tstruct value *function,\n+\t\t\t\t\t\tstruct regcache *regcache,\n+\t\t\t\t\t\tCORE_ADDR bp_addr,\n+\t\t\t\t\t\tint nargs, struct value **args,\n+\t\t\t\t\t\tCORE_ADDR sp,\n+\t\t\t\t\t\tfunction_call_return_method\n+\t\t\t\t\t\treturn_method,\n+\t\t\t\t\t\tCORE_ADDR struct_addr,\n+\t\t\t\t\t\tbool thiscall);\n+\n /* Return whether the THIS_FRAME corresponds to a sigtramp routine.  */\n extern int i386_sigtramp_p (struct frame_info *this_frame);\n "
    },
    {
      "sha": "4824a9e5528d6c7f47b72817d2a09db4b2076f07",
      "filename": "gdb/i386-windows-tdep.c",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/627c7fb8ea16388f349b6b26e20bf017d71e51fe/gdb/i386-windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/627c7fb8ea16388f349b6b26e20bf017d71e51fe/gdb/i386-windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-windows-tdep.c?ref=627c7fb8ea16388f349b6b26e20bf017d71e51fe",
      "patch": "@@ -200,6 +200,36 @@ i386_windows_auto_wide_charset (void)\n   return \"UTF-16\";\n }\n \n+/* Implement the \"push_dummy_call\" gdbarch method.  */\n+\n+static CORE_ADDR\n+i386_windows_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n+\t\t\t      struct regcache *regcache, CORE_ADDR bp_addr,\n+\t\t\t      int nargs, struct value **args, CORE_ADDR sp,\n+\t\t\t      function_call_return_method return_method,\n+\t\t\t      CORE_ADDR struct_addr)\n+{\n+  /* For non-static member functions of 32bit Windows programs, the thiscall\n+     calling convention is used, so the 'this' pointer is passed in ECX.  */\n+  bool thiscall = false;\n+\n+  struct type *type = check_typedef (value_type (function));\n+  if (TYPE_CODE (type) == TYPE_CODE_PTR)\n+    type = check_typedef (TYPE_TARGET_TYPE (type));\n+\n+  /* read_subroutine_type sets for non-static member functions the\n+     artificial flag of the first parameter ('this' pointer).  */\n+  if (TYPE_CODE (type) == TYPE_CODE_METHOD\n+      && TYPE_NFIELDS (type) > 0\n+      && TYPE_FIELD_ARTIFICIAL (type, 0)\n+      && TYPE_CODE (TYPE_FIELD_TYPE (type, 0)) == TYPE_CODE_PTR)\n+    thiscall = 1;\n+\n+  return i386_thiscall_push_dummy_call (gdbarch, function, regcache, bp_addr,\n+\t\t\t\t\tnargs, args, sp, return_method,\n+\t\t\t\t\tstruct_addr, thiscall);\n+}\n+\n /* Common parts for gdbarch initialization for Windows and Cygwin on i386.  */\n \n static void\n@@ -234,6 +264,8 @@ i386_windows_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n   i386_windows_init_abi_common (info, gdbarch);\n   windows_init_abi (info, gdbarch);\n+\n+  set_gdbarch_push_dummy_call (gdbarch, i386_windows_push_dummy_call);\n }\n \n /* gdbarch initialization for Cygwin on i386.  */"
    }
  ]
}