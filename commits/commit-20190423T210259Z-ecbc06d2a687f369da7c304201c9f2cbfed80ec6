{
  "sha": "ecbc06d2a687f369da7c304201c9f2cbfed80ec6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWNiYzA2ZDJhNjg3ZjM2OWRhN2MzMDQyMDFjOWYyY2JmZWQ4MGVjNg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-12T14:07:51Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-23T21:02:59Z"
    },
    "message": "gdb/nds32: Use type_align instead of nds32_type_align\n\nThe general type_align method should be a suitable alternative to\nnds32_type_align, so switch to use that.\n\nThe only change this will introduce is related to static fields in a\nstruct or union, the existing code doesn't take account of static\nfields when computing the alignment for structs of unions, though this\nis probably a bug - which would probably be exposed by the test case\ngdb.cp/many-args.exp, though I don't have any way to test this target\nright now.\n\ngdb/ChangeLog:\n\n\t* nds32-tdep.c (nds32_type_align): Delete.\n\t(nds32_push_dummy_call): Use type_align instead.",
    "tree": {
      "sha": "0c773c576379bad72aa7415c64175fe46ce65ba6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0c773c576379bad72aa7415c64175fe46ce65ba6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ecbc06d2a687f369da7c304201c9f2cbfed80ec6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ecbc06d2a687f369da7c304201c9f2cbfed80ec6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ecbc06d2a687f369da7c304201c9f2cbfed80ec6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ecbc06d2a687f369da7c304201c9f2cbfed80ec6/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "030197b43cd8ccfe6869f798dd39fa27a29c0e01",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/030197b43cd8ccfe6869f798dd39fa27a29c0e01",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/030197b43cd8ccfe6869f798dd39fa27a29c0e01"
    }
  ],
  "stats": {
    "total": 54,
    "additions": 7,
    "deletions": 47
  },
  "files": [
    {
      "sha": "f9121ff45d4d9df1de0f7410c9e2656619429ea5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ecbc06d2a687f369da7c304201c9f2cbfed80ec6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ecbc06d2a687f369da7c304201c9f2cbfed80ec6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ecbc06d2a687f369da7c304201c9f2cbfed80ec6",
      "patch": "@@ -1,3 +1,8 @@\n+2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* nds32-tdep.c (nds32_type_align): Delete.\n+\t(nds32_push_dummy_call): Use type_align instead.\n+\n 2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* arm-tdep.c (arm_type_align): Only handle vector override case."
    },
    {
      "sha": "d3481e2000bb78d52bad6fecf54d901a3c42a38c",
      "filename": "gdb/nds32-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 47,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ecbc06d2a687f369da7c304201c9f2cbfed80ec6/gdb/nds32-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ecbc06d2a687f369da7c304201c9f2cbfed80ec6/gdb/nds32-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nds32-tdep.c?ref=ecbc06d2a687f369da7c304201c9f2cbfed80ec6",
      "patch": "@@ -1439,51 +1439,6 @@ nds32_check_calling_use_fpr (struct type *type)\n   return typecode == TYPE_CODE_FLT;\n }\n \n-/* Return the alignment (in bytes) of the given type.  */\n-\n-static int\n-nds32_type_align (struct type *type)\n-{\n-  int n;\n-  int align;\n-  int falign;\n-\n-  type = check_typedef (type);\n-  switch (TYPE_CODE (type))\n-    {\n-    default:\n-      /* Should never happen.  */\n-      internal_error (__FILE__, __LINE__, _(\"unknown type alignment\"));\n-      return 4;\n-\n-    case TYPE_CODE_PTR:\n-    case TYPE_CODE_ENUM:\n-    case TYPE_CODE_INT:\n-    case TYPE_CODE_FLT:\n-    case TYPE_CODE_SET:\n-    case TYPE_CODE_RANGE:\n-    case TYPE_CODE_REF:\n-    case TYPE_CODE_CHAR:\n-    case TYPE_CODE_BOOL:\n-      return TYPE_LENGTH (type);\n-\n-    case TYPE_CODE_ARRAY:\n-    case TYPE_CODE_COMPLEX:\n-      return nds32_type_align (TYPE_TARGET_TYPE (type));\n-\n-    case TYPE_CODE_STRUCT:\n-    case TYPE_CODE_UNION:\n-      align = 1;\n-      for (n = 0; n < TYPE_NFIELDS (type); n++)\n-\t{\n-\t  falign = nds32_type_align (TYPE_FIELD_TYPE (type, n));\n-\t  if (falign > align)\n-\t    align = falign;\n-\t}\n-      return align;\n-    }\n-}\n-\n /* Implement the \"push_dummy_call\" gdbarch method.  */\n \n static CORE_ADDR\n@@ -1522,7 +1477,7 @@ nds32_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n   for (i = 0; i < nargs; i++)\n     {\n       struct type *type = value_type (args[i]);\n-      int align = nds32_type_align (type);\n+      int align = type_align (type);\n \n       /* If align is zero, it may be an empty struct.\n \t Just ignore the argument of empty struct.  */\n@@ -1548,7 +1503,7 @@ nds32_push_dummy_call (struct gdbarch *gdbarch, struct value *function,\n       type = value_type (args[i]);\n       calling_use_fpr = nds32_check_calling_use_fpr (type);\n       len = TYPE_LENGTH (type);\n-      align = nds32_type_align (type);\n+      align = type_align (type);\n       val = value_contents (args[i]);\n \n       /* The size of a composite type larger than 4 bytes will be rounded"
    }
  ]
}