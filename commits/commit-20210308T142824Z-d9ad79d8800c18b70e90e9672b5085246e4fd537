{
  "sha": "d9ad79d8800c18b70e90e9672b5085246e4fd537",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDlhZDc5ZDg4MDBjMThiNzBlOTBlOTY3MmI1MDg1MjQ2ZTRmZDUzNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:24Z"
    },
    "message": "Implement C++ cast operations\n\nThis adds class cxx_cast_operation, which is used to implement the C++\ndynamic_cast and reinterpret_cast operations.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expop.h (cxx_cast_ftype): New typedef.\n\t(cxx_cast_operation): New template.\n\t(dynamic_cast_operation, reinterpret_cast_operation): New\n\ttypedefs.",
    "tree": {
      "sha": "6d1fee1571632b148e4175b9307e2b29b2c88ef1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6d1fee1571632b148e4175b9307e2b29b2c88ef1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d9ad79d8800c18b70e90e9672b5085246e4fd537",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d9ad79d8800c18b70e90e9672b5085246e4fd537",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d9ad79d8800c18b70e90e9672b5085246e4fd537",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d9ad79d8800c18b70e90e9672b5085246e4fd537/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "292382f47ef08c5ec3292c612f737fe4b312c9f1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/292382f47ef08c5ec3292c612f737fe4b312c9f1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/292382f47ef08c5ec3292c612f737fe4b312c9f1"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 41,
    "deletions": 0
  },
  "files": [
    {
      "sha": "053f9a919a1b4f572ffd4b8b12441cd68665c72f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9ad79d8800c18b70e90e9672b5085246e4fd537/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9ad79d8800c18b70e90e9672b5085246e4fd537/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d9ad79d8800c18b70e90e9672b5085246e4fd537",
      "patch": "@@ -1,3 +1,10 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expop.h (cxx_cast_ftype): New typedef.\n+\t(cxx_cast_operation): New template.\n+\t(dynamic_cast_operation, reinterpret_cast_operation): New\n+\ttypedefs.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (class unop_cast_type_operation): New."
    },
    {
      "sha": "3ab412e35a16905de848cb4276237e0745636be7",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d9ad79d8800c18b70e90e9672b5085246e4fd537/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d9ad79d8800c18b70e90e9672b5085246e4fd537/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=d9ad79d8800c18b70e90e9672b5085246e4fd537",
      "patch": "@@ -1895,6 +1895,40 @@ class unop_cast_type_operation\n     override;\n };\n \n+typedef value *cxx_cast_ftype (struct type *, value *);\n+\n+/* This implements dynamic_cast and reinterpret_cast.  static_cast and\n+   const_cast are handled by the ordinary case operations.  */\n+template<exp_opcode OP, cxx_cast_ftype FUNC>\n+class cxx_cast_operation\n+  : public maybe_constant_operation<operation_up, operation_up>\n+{\n+public:\n+\n+  using maybe_constant_operation::maybe_constant_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    value *val = std::get<0> (m_storage)->evaluate (nullptr, exp,\n+\t\t\t\t\t\t    EVAL_AVOID_SIDE_EFFECTS);\n+    struct type *type = value_type (val);\n+    value *rhs = std::get<1> (m_storage)->evaluate (type, exp, noside);\n+    if (noside == EVAL_SKIP)\n+      return eval_skip_value (exp);\n+    return FUNC (type, rhs);\n+  }\n+\n+  enum exp_opcode opcode () const override\n+  { return OP; }\n+};\n+\n+using dynamic_cast_operation = cxx_cast_operation<UNOP_DYNAMIC_CAST,\n+\t\t\t\t\t\t  value_dynamic_cast>;\n+using reinterpret_cast_operation = cxx_cast_operation<UNOP_REINTERPRET_CAST,\n+\t\t\t\t\t\t      value_reinterpret_cast>;\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    }
  ]
}