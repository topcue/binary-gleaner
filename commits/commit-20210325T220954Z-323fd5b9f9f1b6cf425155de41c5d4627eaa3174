{
  "sha": "323fd5b9f9f1b6cf425155de41c5d4627eaa3174",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzIzZmQ1YjlmOWYxYjZjZjQyNTE1NWRlNDFjNWQ0NjI3ZWFhMzE3NA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2021-02-13T19:16:44Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2021-03-25T22:09:54Z"
    },
    "message": "Fix problem exposed by gdb.server/stop-reply-no-thread-multi.exp\n\nRunning gdb.server/stop-reply-no-thread-multi.exp with \"maint set\ntarget-non-stop on\" occasionally hit an internal error like this:\n\n  ...\n  continue\n  Continuing.\n  warning: multi-threaded target stopped without sending a thread-id, using first non-exited thread\n  /home/pedro/gdb/binutils-gdb/src/gdb/inferior.c:291: internal-error: inferior* find_inferior_pid(process_stratum_target*, int): Assertion `pid != 0' failed.\n  A problem internal to GDB has been detected,\n  further debugging may prove unreliable.\n\n  This is a bug, please report it.\n  FAIL: gdb.server/stop-reply-no-thread-multi.exp: to_disable=Tthread: continue until exit (GDB internal error)\n\nThe backtrace looks like this:\n\n ...\n #5  0x0000560357b0879c in internal_error (file=0x560357be6c18 \"/home/pedro/gdb/binutils-gdb/src/gdb/inferior.c\", line=291, fmt=0x560357be6b21 \"%s: Assertion `%s' failed.\") at /home/pedro/gdb/binutils-gdb/src/gdbsupport/errors.cc:55\n #6  0x000056035762061b in find_inferior_pid (targ=0x5603596e9560, pid=0) at /home/pedro/gdb/binutils-gdb/src/gdb/inferior.c:291\n #7  0x00005603576206e6 in find_inferior_ptid (targ=0x5603596e9560, ptid=...) at /home/pedro/gdb/binutils-gdb/src/gdb/inferior.c:305\n #8  0x00005603577d43ed in remote_target::check_pending_events_prevent_wildcard_vcont (this=0x5603596e9560, may_global_wildcard=0x7fff84fb05f0) at /home/pedro/gdb/binutils-gdb/src/gdb/remote.c:7215\n #9  0x00005603577d2a9c in remote_target::commit_resumed (this=0x5603596e9560) at /home/pedro/gdb/binutils-gdb/src/gdb/remote.c:6680\n ...\n\npid is 0 in this case because the queued event is a process exit event\nwith no pid associated:\n\n (top-gdb) p event->ws\n During symbol reading: .debug_line address at offset 0x563c9a is 0 [in module /home/pedro/gdb/binutils-gdb/build/gdb/gdb]\n $1 = {kind = TARGET_WAITKIND_EXITED, value = {integer = 0, sig = GDB_SIGNAL_0, related_pid = {m_pid = 0, m_lwp = 0, m_tid = 0}, execd_pathname = 0x0, syscall_number = 0}}\n (top-gdb)\n\nThis fixes it, and adds a \"maint set target-non-stop on/off\" axis to the testcase.\n\ngdb/ChangeLog:\n\n\t* remote.c\n\t(remote_target::check_pending_events_prevent_wildcard_vcont):\n\tCheck whether the event's ptid is not null_ptid before looking up\n\tthe corresponding inferior.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.server/stop-reply-no-thread-multi.exp (run_test): Add\n\t\"target_non_stop\" parameter and use it.\n\t(top level): Add \"maint set target-non-stop on/off\" testing axis.\n\nChange-Id: Ia30cf275305ee4dcbbd33f731534cd71d1550eaa",
    "tree": {
      "sha": "3aed56646f6fe71ae97794f86bfd64e7e304d407",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3aed56646f6fe71ae97794f86bfd64e7e304d407"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/323fd5b9f9f1b6cf425155de41c5d4627eaa3174",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/323fd5b9f9f1b6cf425155de41c5d4627eaa3174",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/323fd5b9f9f1b6cf425155de41c5d4627eaa3174",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/323fd5b9f9f1b6cf425155de41c5d4627eaa3174/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8592be8c7d300c37dc44b0f5a1a381ede99a6048",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8592be8c7d300c37dc44b0f5a1a381ede99a6048",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8592be8c7d300c37dc44b0f5a1a381ede99a6048"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 33,
    "deletions": 8
  },
  "files": [
    {
      "sha": "5bceb92c37907ad4674ce9b63a3c639b22be4127",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/323fd5b9f9f1b6cf425155de41c5d4627eaa3174/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/323fd5b9f9f1b6cf425155de41c5d4627eaa3174/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=323fd5b9f9f1b6cf425155de41c5d4627eaa3174",
      "patch": "@@ -1,3 +1,10 @@\n+2021-03-25  Pedro Alves  <pedro@palves.net>\n+\n+\t* remote.c\n+\t(remote_target::check_pending_events_prevent_wildcard_vcont):\n+\tCheck whether the event's ptid is not null_ptid before looking up\n+\tthe corresponding inferior.\n+\n 2021-03-24  Changbin Du  <changbin.du@gmail.com>\n \n \t* riscv-tdep.c (riscv_breakpoint_kind_from_pc): Remove call to"
    },
    {
      "sha": "188f507febdbd4fe1bd036e5b4f64544309c990a",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/323fd5b9f9f1b6cf425155de41c5d4627eaa3174/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/323fd5b9f9f1b6cf425155de41c5d4627eaa3174/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=323fd5b9f9f1b6cf425155de41c5d4627eaa3174",
      "patch": "@@ -7190,14 +7190,16 @@ remote_target::check_pending_events_prevent_wildcard_vcont\n \t  || event->ws.kind == TARGET_WAITKIND_VFORKED)\n \t*may_global_wildcard = 0;\n \n-      struct inferior *inf = find_inferior_ptid (this, event->ptid);\n-\n       /* This may be the first time we heard about this process.\n \t Regardless, we must not do a global wildcard resume, otherwise\n \t we'd resume this process too.  */\n       *may_global_wildcard = 0;\n-      if (inf != NULL)\n-\tget_remote_inferior (inf)->may_wildcard_vcont = false;\n+      if (event->ptid != null_ptid)\n+\t{\n+\t  inferior *inf = find_inferior_ptid (this, event->ptid);\n+\t  if (inf != NULL)\n+\t    get_remote_inferior (inf)->may_wildcard_vcont = false;\n+\t}\n     }\n }\n "
    },
    {
      "sha": "65c322562cdba26c278605c3fc98661d00db93c8",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/323fd5b9f9f1b6cf425155de41c5d4627eaa3174/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/323fd5b9f9f1b6cf425155de41c5d4627eaa3174/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=323fd5b9f9f1b6cf425155de41c5d4627eaa3174",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-25  Pedro Alves  <pedro@palves.net>\n+\n+\t* gdb.server/stop-reply-no-thread-multi.exp (run_test): Add\n+\t\"target_non_stop\" parameter and use it.\n+\t(top level): Add \"maint set target-non-stop on/off\" testing axis.\n+\n 2021-03-25  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* lib/ada.exp (gnat_runtime_has_debug_info): Use -wrap with"
    },
    {
      "sha": "50cf10fe3134489117f0b237e0d6635ef143a142",
      "filename": "gdb/testsuite/gdb.server/stop-reply-no-thread-multi.exp",
      "status": "modified",
      "additions": 14,
      "deletions": 4,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/323fd5b9f9f1b6cf425155de41c5d4627eaa3174/gdb/testsuite/gdb.server/stop-reply-no-thread-multi.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/323fd5b9f9f1b6cf425155de41c5d4627eaa3174/gdb/testsuite/gdb.server/stop-reply-no-thread-multi.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/stop-reply-no-thread-multi.exp?ref=323fd5b9f9f1b6cf425155de41c5d4627eaa3174",
      "patch": "@@ -41,10 +41,15 @@ if { [build_executable \"failed to prepare\" $testfile $srcfile {debug pthreads}]\n }\n \n # Run the tests with different features of GDBserver disabled.\n-proc run_test { disable_feature } {\n+# TARGET_NON_STOP is passed to \"maint set target-non-stop\".\n+proc run_test { target_non_stop disable_feature } {\n     global binfile gdb_prompt decimal hex\n+    global GDBFLAGS\n \n-    clean_restart ${binfile}\n+    save_vars { GDBFLAGS } {\n+\tappend GDBFLAGS \" -ex \\\"maint set target-non-stop $target_non_stop\\\"\"\n+\tclean_restart ${binfile}\n+    }\n \n     # Make sure we're disconnected, in case we're testing with an\n     # extended-remote board, therefore already connected.\n@@ -131,6 +136,11 @@ proc run_test { disable_feature } {\n #\n # T: Start GDBserver with the entire 'T' stop reply packet disabled,\n #    GDBserver will instead send the 'S' stop reply.\n-foreach_with_prefix to_disable { \"\" Tthread T } {\n-    run_test $to_disable\n+#\n+# Also test both all-stop and non-stop variants of the remote\n+# protocol.\n+foreach_with_prefix target-non-stop {\"off\" \"on\"} {\n+    foreach_with_prefix to_disable { \"\" Tthread T } {\n+\trun_test ${target-non-stop} $to_disable\n+    }\n }"
    }
  ]
}