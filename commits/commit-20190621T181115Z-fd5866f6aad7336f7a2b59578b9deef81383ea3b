{
  "sha": "fd5866f6aad7336f7a2b59578b9deef81383ea3b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmQ1ODY2ZjZhYWQ3MzM2ZjdhMmI1OTU3OGI5ZGVlZjgxMzgzZWEzYg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-06-21T18:10:15Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-06-21T18:11:15Z"
    },
    "message": "dwarf2read: Get rid of VEC (dwarf2_section_info_def)\n\nThis patch removes uses of VEC (dwarf2_section_info_def) in favor of\nstd::vector<dwarf2_section_info>.  The conversion is relatively\nstraightforward, no function changes are intended.\n\ngdb/ChangeLog:\n\n\t* dwarf2read.h (dwarf2_section_info_def): Remove.\n\t(DEF_VEC_O (dwarf2_section_info_def)): Remove.\n\t* dwarf2read.c (struct dwo_sections) <types>: Change type to\n\tstd::vector<dwarf2_section_info>.\n\t(struct dwo_file) <~dwo_file>: Remove.\n\t(dwarf2_per_objfile::~dwarf2_per_objfile): Don't manually free\n\ttypes field.\n\t(dwarf2_per_objfile::locate_sections): Adjust to std::vector.\n\t(dwarf2_read_debug_names): Likewise.\n\t(create_debug_types_hash_table): Change parameter type to\n\tarray_view, adjust code accordingly.\n\t(dwarf2_locate_dwo_sections): Adjust to std::vector.\n\t(partial_die_info::fixup): Likewise.\n\t(determine_prefix): Likewise.\n\t* dwarf-index-write.c (write_psymtabs_to_index): Adjust.",
    "tree": {
      "sha": "85fac8222aea10cc9f43ae15fc25e885014476e1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/85fac8222aea10cc9f43ae15fc25e885014476e1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fd5866f6aad7336f7a2b59578b9deef81383ea3b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fd5866f6aad7336f7a2b59578b9deef81383ea3b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fd5866f6aad7336f7a2b59578b9deef81383ea3b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fd5866f6aad7336f7a2b59578b9deef81383ea3b/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fb1eb2f94a62813ab3daa34da59c035717ffb9da",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fb1eb2f94a62813ab3daa34da59c035717ffb9da",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fb1eb2f94a62813ab3daa34da59c035717ffb9da"
    }
  ],
  "stats": {
    "total": 71,
    "additions": 32,
    "deletions": 39
  },
  "files": [
    {
      "sha": "a31d078ef8db9b6ee34b32f8a055fba93662edc2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd5866f6aad7336f7a2b59578b9deef81383ea3b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd5866f6aad7336f7a2b59578b9deef81383ea3b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fd5866f6aad7336f7a2b59578b9deef81383ea3b",
      "patch": "@@ -1,3 +1,21 @@\n+2019-06-21  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2read.h (dwarf2_section_info_def): Remove.\n+\t(DEF_VEC_O (dwarf2_section_info_def)): Remove.\n+\t* dwarf2read.c (struct dwo_sections) <types>: Change type to\n+\tstd::vector<dwarf2_section_info>.\n+\t(struct dwo_file) <~dwo_file>: Remove.\n+\t(dwarf2_per_objfile::~dwarf2_per_objfile): Don't manually free\n+\ttypes field.\n+\t(dwarf2_per_objfile::locate_sections): Adjust to std::vector.\n+\t(dwarf2_read_debug_names): Likewise.\n+\t(create_debug_types_hash_table): Change parameter type to\n+\tarray_view, adjust code accordingly.\n+\t(dwarf2_locate_dwo_sections): Adjust to std::vector.\n+\t(partial_die_info::fixup): Likewise.\n+\t(determine_prefix): Likewise.\n+\t* dwarf-index-write.c (write_psymtabs_to_index): Adjust.\n+\n 2019-06-21  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* dwarf2read.c (struct dwo_file) <dbfd>: Change type to"
    },
    {
      "sha": "3f5862aeb4ca2167babbb22a87d08e183752539d",
      "filename": "gdb/dwarf-index-write.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd5866f6aad7336f7a2b59578b9deef81383ea3b/gdb/dwarf-index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd5866f6aad7336f7a2b59578b9deef81383ea3b/gdb/dwarf-index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf-index-write.c?ref=fd5866f6aad7336f7a2b59578b9deef81383ea3b",
      "patch": "@@ -1638,7 +1638,7 @@ write_psymtabs_to_index (struct dwarf2_per_objfile *dwarf2_per_objfile,\n   if (dwarf2_per_objfile->using_index)\n     error (_(\"Cannot use an index to create the index\"));\n \n-  if (VEC_length (dwarf2_section_info_def, dwarf2_per_objfile->types) > 1)\n+  if (dwarf2_per_objfile->types.size () > 1)\n     error (_(\"Cannot make an index when the file has multiple .debug_types sections\"));\n \n   if (!objfile->partial_symtabs->psymtabs"
    },
    {
      "sha": "fccbd05e2d69b6dcc8409dc6a91f16e32f10fd63",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 12,
      "deletions": 34,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd5866f6aad7336f7a2b59578b9deef81383ea3b/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd5866f6aad7336f7a2b59578b9deef81383ea3b/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=fd5866f6aad7336f7a2b59578b9deef81383ea3b",
      "patch": "@@ -655,7 +655,7 @@ struct dwo_sections\n   struct dwarf2_section_info str_offsets;\n   /* In the case of a virtual DWO file, these two are unused.  */\n   struct dwarf2_section_info info;\n-  VEC (dwarf2_section_info_def) *types;\n+  std::vector<dwarf2_section_info> types;\n };\n \n /* CUs/TUs in DWP/DWO files.  */\n@@ -706,11 +706,6 @@ struct dwo_file\n   dwo_file () = default;\n   DISABLE_COPY_AND_ASSIGN (dwo_file);\n \n-  ~dwo_file ()\n-  {\n-    VEC_free (dwarf2_section_info_def, sections.types);\n-  }\n-\n   /* The DW_AT_GNU_dwo_name attribute.\n      For virtual DWO files the name is constructed from the section offsets\n      of abbrev,line,loc,str_offsets so that we combine virtual DWO files\n@@ -2160,8 +2155,6 @@ dwarf2_per_objfile::~dwarf2_per_objfile ()\n   for (signatured_type *sig_type : all_type_units)\n     VEC_free (dwarf2_per_cu_ptr, sig_type->per_cu.imported_symtabs);\n \n-  VEC_free (dwarf2_section_info_def, types);\n-\n   /* Everything else should be on the objfile obstack.  */\n }\n \n@@ -2418,8 +2411,7 @@ dwarf2_per_objfile::locate_sections (bfd *abfd, asection *sectp,\n       type_section.s.section = sectp;\n       type_section.size = bfd_get_section_size (sectp);\n \n-      VEC_safe_push (dwarf2_section_info_def, this->types,\n-\t\t     &type_section);\n+      this->types.push_back (type_section);\n     }\n   else if (section_is_p (sectp->name, &names.gdb_index))\n     {\n@@ -3592,15 +3584,12 @@ dwarf2_read_gdb_index\n \n   if (types_list_elements)\n     {\n-      struct dwarf2_section_info *section;\n-\n       /* We can only handle a single .debug_types when we have an\n \t index.  */\n-      if (VEC_length (dwarf2_section_info_def, dwarf2_per_objfile->types) != 1)\n+      if (dwarf2_per_objfile->types.size () != 1)\n \treturn 0;\n \n-      section = VEC_index (dwarf2_section_info_def,\n-\t\t\t   dwarf2_per_objfile->types, 0);\n+      dwarf2_section_info *section = &dwarf2_per_objfile->types[0];\n \n       create_signatured_type_table_from_index (dwarf2_per_objfile, section,\n \t\t\t\t\t       types_list, types_list_elements);\n@@ -5636,11 +5625,10 @@ dwarf2_read_debug_names (struct dwarf2_per_objfile *dwarf2_per_objfile)\n     {\n       /* We can only handle a single .debug_types when we have an\n \t index.  */\n-      if (VEC_length (dwarf2_section_info_def, dwarf2_per_objfile->types) != 1)\n+      if (dwarf2_per_objfile->types.size () != 1)\n \treturn false;\n \n-      dwarf2_section_info *section = VEC_index (dwarf2_section_info_def,\n-\t\t\t\t\t\tdwarf2_per_objfile->types, 0);\n+      dwarf2_section_info *section = &dwarf2_per_objfile->types[0];\n \n       create_signatured_type_table_from_debug_names\n \t(dwarf2_per_objfile, *map, section, &dwarf2_per_objfile->abbrev);\n@@ -6817,19 +6805,11 @@ create_debug_type_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n static void\n create_debug_types_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t\t       struct dwo_file *dwo_file,\n-\t\t\t       VEC (dwarf2_section_info_def) *types,\n+\t\t\t       gdb::array_view<dwarf2_section_info> type_sections,\n \t\t\t       htab_t &types_htab)\n {\n-  int ix;\n-  struct dwarf2_section_info *section;\n-\n-  if (VEC_empty (dwarf2_section_info_def, types))\n-    return;\n-\n-  for (ix = 0;\n-       VEC_iterate (dwarf2_section_info_def, types, ix, section);\n-       ++ix)\n-    create_debug_type_hash_table (dwarf2_per_objfile, dwo_file, section,\n+  for (dwarf2_section_info &section : type_sections)\n+    create_debug_type_hash_table (dwarf2_per_objfile, dwo_file, &section,\n \t\t\t\t  types_htab, rcuh_kind::TYPE);\n }\n \n@@ -12943,8 +12923,7 @@ dwarf2_locate_dwo_sections (bfd *abfd, asection *sectp, void *dwo_sections_ptr)\n       memset (&type_section, 0, sizeof (type_section));\n       type_section.s.section = sectp;\n       type_section.size = bfd_get_section_size (sectp);\n-      VEC_safe_push (dwarf2_section_info_def, dwo_sections->types,\n-\t\t     &type_section);\n+      dwo_sections->types.push_back (type_section);\n     }\n }\n \n@@ -19030,8 +19009,7 @@ partial_die_info::fixup (struct dwarf2_cu *cu)\n      children, see if we can determine the namespace from their linkage\n      name.  */\n   if (cu->language == language_cplus\n-      && !VEC_empty (dwarf2_section_info_def,\n-\t\t     cu->per_cu->dwarf2_per_objfile->types)\n+      && !cu->per_cu->dwarf2_per_objfile->types.empty ()\n       && die_parent == NULL\n       && has_children\n       && (tag == DW_TAG_class_type\n@@ -22533,7 +22511,7 @@ determine_prefix (struct die_info *die, struct dwarf2_cu *cu)\n       case DW_TAG_partial_unit:\n \t/* gcc-4.5 -gdwarf-4 can drop the enclosing namespace.  Cope.  */\n \tif (cu->language == language_cplus\n-\t    && !VEC_empty (dwarf2_section_info_def, dwarf2_per_objfile->types)\n+\t    && !dwarf2_per_objfile->types.empty ()\n \t    && die->child != NULL\n \t    && (die->tag == DW_TAG_class_type\n \t\t|| die->tag == DW_TAG_structure_type"
    },
    {
      "sha": "9251bde125926bcb7d5d81d0a664f2b65012f47c",
      "filename": "gdb/dwarf2read.h",
      "status": "modified",
      "additions": 1,
      "deletions": 4,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fd5866f6aad7336f7a2b59578b9deef81383ea3b/gdb/dwarf2read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fd5866f6aad7336f7a2b59578b9deef81383ea3b/gdb/dwarf2read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.h?ref=fd5866f6aad7336f7a2b59578b9deef81383ea3b",
      "patch": "@@ -73,9 +73,6 @@ struct dwarf2_section_info\n   bool is_virtual;\n };\n \n-typedef struct dwarf2_section_info dwarf2_section_info_def;\n-DEF_VEC_O (dwarf2_section_info_def);\n-\n /* Read the contents of the section INFO.\n    OBJFILE is the main object file, but not necessarily the file where\n    the section comes from.  E.g., for DWO files the bfd of INFO is the bfd\n@@ -167,7 +164,7 @@ struct dwarf2_per_objfile\n   dwarf2_section_info debug_names {};\n   dwarf2_section_info debug_aranges {};\n \n-  VEC (dwarf2_section_info_def) *types = NULL;\n+  std::vector<dwarf2_section_info> types;\n \n   /* Back link.  */\n   struct objfile *objfile = NULL;"
    }
  ]
}