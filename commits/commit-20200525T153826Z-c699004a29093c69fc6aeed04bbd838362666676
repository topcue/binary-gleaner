{
  "sha": "c699004a29093c69fc6aeed04bbd838362666676",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzY5OTAwNGEyOTA5M2M2OWZjNmFlZWQwNGJiZDgzODM2MjY2NjY3Ng==",
  "commit": {
    "author": {
      "name": "Michael Weghorn",
      "email": "m.weghorn@posteo.de",
      "date": "2020-05-25T15:38:11Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-05-25T15:38:26Z"
    },
    "message": "gdbsupport: Adapt construct_inferior_arguments\n\nAllow construct_inferior_arguments to handle zero args\nand have it return a std::string, similar to how\nstringify_argv in gdbsupport/common-utils does.\n\nAlso, add a const qualifier for the second parameter,\nsince it is only read, not written to.\n\nThe intention is to replace existing uses of\nstringify_argv by construct_inferior_arguments\nin a subsequent step, since construct_inferior_arguments\nproperly handles special characters, while stringify_argv\ndoesn't.\n\ngdbsupport/ChangeLog:\n\n\t* common-inferior.cc, common-inferior.h (construct_inferior_arguments):\n\tAdapt to handle zero args and return a std::string.\n\tAdapt call site.\n\nChange-Id: I126c4390a1018c7527b0b8fd545252ab8a5a7adc",
    "tree": {
      "sha": "b435a084f110bc9468f188dacb6f25f80f4a16d2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b435a084f110bc9468f188dacb6f25f80f4a16d2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c699004a29093c69fc6aeed04bbd838362666676",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c699004a29093c69fc6aeed04bbd838362666676",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c699004a29093c69fc6aeed04bbd838362666676",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c699004a29093c69fc6aeed04bbd838362666676/comments",
  "author": {
    "login": "michaelweghorn",
    "id": 6560939,
    "node_id": "MDQ6VXNlcjY1NjA5Mzk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6560939?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/michaelweghorn",
    "html_url": "https://github.com/michaelweghorn",
    "followers_url": "https://api.github.com/users/michaelweghorn/followers",
    "following_url": "https://api.github.com/users/michaelweghorn/following{/other_user}",
    "gists_url": "https://api.github.com/users/michaelweghorn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/michaelweghorn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/michaelweghorn/subscriptions",
    "organizations_url": "https://api.github.com/users/michaelweghorn/orgs",
    "repos_url": "https://api.github.com/users/michaelweghorn/repos",
    "events_url": "https://api.github.com/users/michaelweghorn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/michaelweghorn/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "92651b1d91a124b8c14e45adc8d007b659cc92c2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/92651b1d91a124b8c14e45adc8d007b659cc92c2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/92651b1d91a124b8c14e45adc8d007b659cc92c2"
    }
  ],
  "stats": {
    "total": 82,
    "additions": 32,
    "deletions": 50
  },
  "files": [
    {
      "sha": "ffcc364f64942a626660f04c5c5c8505a1a8926e",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c699004a29093c69fc6aeed04bbd838362666676/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c699004a29093c69fc6aeed04bbd838362666676/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=c699004a29093c69fc6aeed04bbd838362666676",
      "patch": "@@ -151,12 +151,9 @@ get_inferior_args (void)\n {\n   if (current_inferior ()->argc != 0)\n     {\n-      char *n;\n-\n-      n = construct_inferior_arguments (current_inferior ()->argc,\n-\t\t\t\t\tcurrent_inferior ()->argv);\n-      set_inferior_args (n);\n-      xfree (n);\n+      std::string n = construct_inferior_arguments (current_inferior ()->argc,\n+\t\t\t\t\t            current_inferior ()->argv);\n+      set_inferior_args (n.c_str ());\n     }\n \n   if (current_inferior ()->args == NULL)"
    },
    {
      "sha": "67dcdeec07d48e7b9b60d49844d9dfd8f7103151",
      "filename": "gdbsupport/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c699004a29093c69fc6aeed04bbd838362666676/gdbsupport/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c699004a29093c69fc6aeed04bbd838362666676/gdbsupport/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/ChangeLog?ref=c699004a29093c69fc6aeed04bbd838362666676",
      "patch": "@@ -1,3 +1,9 @@\n+2020-05-25  Michael Weghorn  <m.weghorn@posteo.de>\n+\n+\t* common-inferior.cc, common-inferior.h (construct_inferior_arguments):\n+\tAdapt to handle zero args and return a std::string.\n+\tAdapt call site.\n+\n 2020-05-25  Michael Weghorn  <m.weghorn@posteo.de>\n \n \t* common-inferior.h, common-inferior.cc: (construct_inferior_arguments):"
    },
    {
      "sha": "aa8be14c742677f2ace41dea5f87cf2522d30c22",
      "filename": "gdbsupport/common-inferior.cc",
      "status": "modified",
      "additions": 22,
      "deletions": 43,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c699004a29093c69fc6aeed04bbd838362666676/gdbsupport/common-inferior.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c699004a29093c69fc6aeed04bbd838362666676/gdbsupport/common-inferior.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/common-inferior.cc?ref=c699004a29093c69fc6aeed04bbd838362666676",
      "patch": "@@ -27,15 +27,12 @@ bool startup_with_shell = true;\n \n /* See common-inferior.h.  */\n \n-char *\n-construct_inferior_arguments (int argc, char **argv)\n+std::string\n+construct_inferior_arguments (int argc, char * const *argv)\n {\n-  char *result;\n+  gdb_assert (argc >= 0);\n \n-  /* ARGC should always be at least 1, but we double check this\n-     here.  This is also needed to silence -Werror-stringop\n-     warnings.  */\n-  gdb_assert (argc > 0);\n+  std::string result;\n \n   if (startup_with_shell)\n     {\n@@ -51,49 +48,38 @@ construct_inferior_arguments (int argc, char **argv)\n       static const char special[] = \"\\\"!#$&*()\\\\|[]{}<>?'`~^; \\t\\n\";\n       static const char quote = '\\'';\n #endif\n-      int i;\n-      int length = 0;\n-      char *out, *cp;\n-\n-      /* We over-compute the size.  It shouldn't matter.  */\n-      for (i = 0; i < argc; ++i)\n-\tlength += 3 * strlen (argv[i]) + 1 + 2 * (argv[i][0] == '\\0');\n-\n-      result = (char *) xmalloc (length);\n-      out = result;\n-\n-      for (i = 0; i < argc; ++i)\n+      for (int i = 0; i < argc; ++i)\n \t{\n \t  if (i > 0)\n-\t    *out++ = ' ';\n+\t    result += ' ';\n \n \t  /* Need to handle empty arguments specially.  */\n \t  if (argv[i][0] == '\\0')\n \t    {\n-\t      *out++ = quote;\n-\t      *out++ = quote;\n+\t      result += quote;\n+\t      result += quote;\n \t    }\n \t  else\n \t    {\n #ifdef __MINGW32__\n-\t      int quoted = 0;\n+\t      bool quoted = false;\n \n \t      if (strpbrk (argv[i], special))\n \t\t{\n-\t\t  quoted = 1;\n-\t\t  *out++ = quote;\n+\t\t  quoted = true;\n+\t\t  result += quote;\n \t\t}\n #endif\n-\t      for (cp = argv[i]; *cp; ++cp)\n+\t      for (char *cp = argv[i]; *cp; ++cp)\n \t\t{\n \t\t  if (*cp == '\\n')\n \t\t    {\n \t\t      /* A newline cannot be quoted with a backslash (it\n \t\t\t just disappears), only by putting it inside\n \t\t\t quotes.  */\n-\t\t      *out++ = quote;\n-\t\t      *out++ = '\\n';\n-\t\t      *out++ = quote;\n+\t\t      result += quote;\n+\t\t      result += '\\n';\n+\t\t      result += quote;\n \t\t    }\n \t\t  else\n \t\t    {\n@@ -102,26 +88,22 @@ construct_inferior_arguments (int argc, char **argv)\n #else\n \t\t      if (strchr (special, *cp) != NULL)\n #endif\n-\t\t\t*out++ = '\\\\';\n-\t\t      *out++ = *cp;\n+\t\t\tresult += '\\\\';\n+\t\t      result += *cp;\n \t\t    }\n \t\t}\n #ifdef __MINGW32__\n \t      if (quoted)\n-\t\t*out++ = quote;\n+\t\tresult += quote;\n #endif\n \t    }\n \t}\n-      *out = '\\0';\n     }\n   else\n     {\n       /* In this case we can't handle arguments that contain spaces,\n \t tabs, or newlines -- see breakup_args().  */\n-      int i;\n-      int length = 0;\n-\n-      for (i = 0; i < argc; ++i)\n+      for (int i = 0; i < argc; ++i)\n \t{\n \t  char *cp = strchr (argv[i], ' ');\n \t  if (cp == NULL)\n@@ -131,16 +113,13 @@ construct_inferior_arguments (int argc, char **argv)\n \t  if (cp != NULL)\n \t    error (_(\"can't handle command-line \"\n \t\t     \"argument containing whitespace\"));\n-\t  length += strlen (argv[i]) + 1;\n \t}\n \n-      result = (char *) xmalloc (length);\n-      result[0] = '\\0';\n-      for (i = 0; i < argc; ++i)\n+      for (int i = 0; i < argc; ++i)\n \t{\n \t  if (i > 0)\n-\t    strcat (result, \" \");\n-\t  strcat (result, argv[i]);\n+\t    result += \" \";\n+\t  result += argv[i];\n \t}\n     }\n "
    },
    {
      "sha": "5e9fc8b0b913920bf6e35e8992e38ca12f086d25",
      "filename": "gdbsupport/common-inferior.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c699004a29093c69fc6aeed04bbd838362666676/gdbsupport/common-inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c699004a29093c69fc6aeed04bbd838362666676/gdbsupport/common-inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/common-inferior.h?ref=c699004a29093c69fc6aeed04bbd838362666676",
      "patch": "@@ -60,6 +60,6 @@ extern bool startup_with_shell;\n \n /* Compute command-line string given argument vector. This does the\n    same shell processing as fork_inferior.  */\n-extern char *construct_inferior_arguments (int, char **);\n+extern std::string construct_inferior_arguments (int, char * const *);\n \n #endif /* COMMON_COMMON_INFERIOR_H */"
    }
  ]
}