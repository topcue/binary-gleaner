{
  "sha": "d53fd721a18f8c827aa69ffbd15abd99641b5e20",
  "node_id": "C_kwDOANOeidoAKGQ1M2ZkNzIxYTE4ZjhjODI3YWE2OWZmYmQxNWFiZDk5NjQxYjVlMjA",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-12-31T17:40:02Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-01-05T18:01:02Z"
    },
    "message": "Implement putstr and putstrn in ui_file\n\nIn my tour of the ui_file subsystem, I found that fputstr and fputstrn\ncan be simplified.  The _filtered forms are never used (and IMO\nunlikely to ever be used) and so can be removed.  And, the interface\ncan be simplified by removing a callback function and moving the\nimplementation directly to ui_file.\n\nA new self-test is included.  Previously, I think nothing was testing\nthis code.\n\nRegression tested on x86-64 Fedora 34.",
    "tree": {
      "sha": "436641845129a7eb9eb38733a456656da9312366",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/436641845129a7eb9eb38733a456656da9312366"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d53fd721a18f8c827aa69ffbd15abd99641b5e20",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d53fd721a18f8c827aa69ffbd15abd99641b5e20",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d53fd721a18f8c827aa69ffbd15abd99641b5e20",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d53fd721a18f8c827aa69ffbd15abd99641b5e20/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "28a4e64dd1b17b0d9f267c3466d7da3e8a41afd8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/28a4e64dd1b17b0d9f267c3466d7da3e8a41afd8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/28a4e64dd1b17b0d9f267c3466d7da3e8a41afd8"
    }
  ],
  "stats": {
    "total": 297,
    "additions": 158,
    "deletions": 139
  },
  "files": [
    {
      "sha": "d0db5fbdee19eab70d8621587e9a27562cca0d35",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=d53fd721a18f8c827aa69ffbd15abd99641b5e20",
      "patch": "@@ -477,6 +477,7 @@ SELFTESTS_SRCS = \\\n \tunittests/style-selftests.c \\\n \tunittests/tracepoint-selftests.c \\\n \tunittests/tui-selftests.c \\\n+\tunittests/ui-file-selftests.c \\\n \tunittests/unpack-selftests.c \\\n \tunittests/utils-selftests.c \\\n \tunittests/vec-utils-selftests.c \\"
    },
    {
      "sha": "dde7882b425fa371e0a6a2423baf52f47c18be4b",
      "filename": "gdb/guile/scm-ports.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/guile/scm-ports.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/guile/scm-ports.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-ports.c?ref=d53fd721a18f8c827aa69ffbd15abd99641b5e20",
      "patch": "@@ -191,8 +191,8 @@ ioscm_open_port (scm_t_port_type *port_type, long mode_bits, scm_t_bits stream)\n \f\n /* Support for connecting Guile's stdio ports to GDB's stdio ports.  */\n \n-/* Like fputstrn_filtered, but don't escape characters, except nul.\n-   Also like fputs_filtered, but a length is specified.  */\n+/* Print a string S, length SIZE, but don't escape characters, except\n+   nul.  */\n \n static void\n fputsn_filtered (const char *s, size_t size, struct ui_file *stream)"
    },
    {
      "sha": "9db87fe180c2f8b421223d998ac6f619ee8e0931",
      "filename": "gdb/mi/mi-console.c",
      "status": "modified",
      "additions": 4,
      "deletions": 16,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/mi/mi-console.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/mi/mi-console.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-console.c?ref=d53fd721a18f8c827aa69ffbd15abd99641b5e20",
      "patch": "@@ -48,29 +48,18 @@ mi_console_file::write (const char *buf, long length_buf)\n     this->flush ();\n }\n \n-/* Write C to STREAM's in an async-safe way.  */\n-\n-static int\n-do_fputc_async_safe (int c, ui_file *stream)\n-{\n-  char ch = c;\n-  stream->write_async_safe (&ch, 1);\n-  return c;\n-}\n-\n void\n mi_console_file::write_async_safe (const char *buf, long length_buf)\n {\n   m_raw->write_async_safe (m_prefix, strlen (m_prefix));\n   if (m_quote)\n     {\n       m_raw->write_async_safe (&m_quote, 1);\n-      fputstrn_unfiltered (buf, length_buf, m_quote, do_fputc_async_safe,\n-\t\t\t   m_raw);\n+      m_raw->putstrn (buf, length_buf, m_quote, true);\n       m_raw->write_async_safe (&m_quote, 1);\n     }\n   else\n-    fputstrn_unfiltered (buf, length_buf, 0, do_fputc_async_safe, m_raw);\n+    m_raw->putstrn (buf, length_buf, 0, true);\n \n   char nl = '\\n';\n   m_raw->write_async_safe (&nl, 1);\n@@ -91,14 +80,13 @@ mi_console_file::flush ()\n       if (m_quote)\n \t{\n \t  fputc_unfiltered (m_quote, m_raw);\n-\t  fputstrn_unfiltered (buf, length_buf, m_quote, fputc_unfiltered,\n-\t\t\t       m_raw);\n+\t  m_raw->putstrn (buf, length_buf, m_quote);\n \t  fputc_unfiltered (m_quote, m_raw);\n \t  fputc_unfiltered ('\\n', m_raw);\n \t}\n       else\n \t{\n-\t  fputstrn_unfiltered (buf, length_buf, 0, fputc_unfiltered, m_raw);\n+\t  m_raw->putstrn (buf, length_buf, 0);\n \t  fputc_unfiltered ('\\n', m_raw);\n \t}\n       gdb_flush (m_raw);"
    },
    {
      "sha": "4860da7536a99e6e50f5cc95ab9774735b4125f1",
      "filename": "gdb/mi/mi-main.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/mi/mi-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/mi/mi-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-main.c?ref=d53fd721a18f8c827aa69ffbd15abd99641b5e20",
      "patch": "@@ -1866,7 +1866,7 @@ mi_print_exception (const char *token, const struct gdb_exception &exception)\n   if (exception.message == NULL)\n     fputs_unfiltered (\"unknown error\", mi->raw_stdout);\n   else\n-    fputstr_unfiltered (exception.what (), '\"', mi->raw_stdout);\n+    mi->raw_stdout->putstr (exception.what (), '\"');\n   fputs_unfiltered (\"\\\"\", mi->raw_stdout);\n \n   switch (exception.error)"
    },
    {
      "sha": "20c6f0f9194bc96db8cf2d5f2003a0c3872869ae",
      "filename": "gdb/mi/mi-out.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/mi/mi-out.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/mi/mi-out.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-out.c?ref=d53fd721a18f8c827aa69ffbd15abd99641b5e20",
      "patch": "@@ -135,7 +135,7 @@ mi_ui_out::do_field_string (int fldno, int width, ui_align align,\n     fprintf_unfiltered (stream, \"%s=\", fldname);\n   fprintf_unfiltered (stream, \"\\\"\");\n   if (string)\n-    fputstr_unfiltered (string, '\"', stream);\n+    stream->putstr (string, '\"');\n   fprintf_unfiltered (stream, \"\\\"\");\n }\n "
    },
    {
      "sha": "c6a4888ed48eb1d0f48cd1cb370b16bb4af9f4aa",
      "filename": "gdb/ui-file.c",
      "status": "modified",
      "additions": 66,
      "deletions": 3,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/ui-file.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/ui-file.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ui-file.c?ref=d53fd721a18f8c827aa69ffbd15abd99641b5e20",
      "patch": "@@ -47,13 +47,15 @@ ui_file::printf (const char *format, ...)\n void\n ui_file::putstr (const char *str, int quoter)\n {\n-  fputstr_unfiltered (str, quoter, this);\n+  while (*str)\n+    printchar (*str++, quoter, false);\n }\n \n void\n-ui_file::putstrn (const char *str, int n, int quoter)\n+ui_file::putstrn (const char *str, int n, int quoter, bool async_safe)\n {\n-  fputstrn_unfiltered (str, n, quoter, fputc_unfiltered, this);\n+  for (int i = 0; i < n; i++)\n+    printchar (str[i], quoter, async_safe);\n }\n \n int\n@@ -68,6 +70,67 @@ ui_file::vprintf (const char *format, va_list args)\n   vfprintf_unfiltered (this, format, args);\n }\n \n+/* See ui-file.h.  */\n+\n+void\n+ui_file::printchar (int c, int quoter, bool async_safe)\n+{\n+  char buf[4];\n+  int out = 0;\n+\n+  c &= 0xFF;\t\t\t/* Avoid sign bit follies */\n+\n+  if (c < 0x20\t\t\t /* Low control chars */\n+      || (c >= 0x7F && c < 0xA0) /* DEL, High controls */\n+      || (sevenbit_strings && c >= 0x80))\n+    {\t\t\t\t/* high order bit set */\n+      buf[out++] = '\\\\';\n+\n+      switch (c)\n+\t{\n+\tcase '\\n':\n+\t  buf[out++] = 'n';\n+\t  break;\n+\tcase '\\b':\n+\t  buf[out++] = 'b';\n+\t  break;\n+\tcase '\\t':\n+\t  buf[out++] = 't';\n+\t  break;\n+\tcase '\\f':\n+\t  buf[out++] = 'f';\n+\t  break;\n+\tcase '\\r':\n+\t  buf[out++] = 'r';\n+\t  break;\n+\tcase '\\033':\n+\t  buf[out++] = 'e';\n+\t  break;\n+\tcase '\\007':\n+\t  buf[out++] = 'a';\n+\t  break;\n+\tdefault:\n+\t  {\n+\t    buf[out++] = '0' + ((c >> 6) & 0x7);\n+\t    buf[out++] = '0' + ((c >> 3) & 0x7);\n+\t    buf[out++] = '0' + ((c >> 0) & 0x7);\n+\t    break;\n+\t  }\n+\t}\n+    }\n+  else\n+    {\n+      if (quoter != 0 && (c == '\\\\' || c == quoter))\n+\tbuf[out++] = '\\\\';\n+      buf[out++] = c;\n+    }\n+\n+  if (async_safe)\n+    this->write_async_safe (buf, out);\n+  else\n+    this->write (buf, out);\n+}\n+\n \f\n \n void"
    },
    {
      "sha": "c097abf0c29fff5ff42c23052898e1320f5cec5b",
      "filename": "gdb/ui-file.h",
      "status": "modified",
      "additions": 21,
      "deletions": 4,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/ui-file.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/ui-file.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ui-file.h?ref=d53fd721a18f8c827aa69ffbd15abd99641b5e20",
      "patch": "@@ -34,12 +34,22 @@ class ui_file\n \n   void printf (const char *, ...) ATTRIBUTE_PRINTF (2, 3);\n \n-  /* Print a string whose delimiter is QUOTER.  Note that these\n-     routines should only be called for printing things which are\n-     independent of the language of the program being debugged.  */\n+  /* Print a NUL-terminated string whose delimiter is QUOTER.  Note\n+     that these routines should only be called for printing things\n+     which are independent of the language of the program being\n+     debugged.\n+\n+     This will normally escape backslashes and instances of QUOTER.\n+     If QUOTER is 0, it won't escape backslashes or any quoting\n+     character.  As a side effect, if you pass the backslash character\n+     as the QUOTER, this will escape backslashes as usual, but not any\n+     other quoting character.  */\n   void putstr (const char *str, int quoter);\n \n-  void putstrn (const char *str, int n, int quoter);\n+  /* Like putstr, but only print the first N characters of STR.  If\n+     ASYNC_SAFE is true, then the output is done via the\n+     write_async_safe method.  */\n+  void putstrn (const char *str, int n, int quoter, bool async_safe = false);\n \n   int putc (int c);\n \n@@ -96,6 +106,13 @@ class ui_file\n        default.  */\n     return false;\n   }\n+\n+private:\n+\n+  /* Helper function for putstr and putstrn.  Print the character C on\n+     this stream as part of the contents of a literal string whose\n+     delimiter is QUOTER.  */\n+  void printchar (int c, int quoter, bool async_safe);\n };\n \n typedef std::unique_ptr<ui_file> ui_file_up;"
    },
    {
      "sha": "558543861694935edb99d369e904e3cd291c9d92",
      "filename": "gdb/unittests/ui-file-selftests.c",
      "status": "added",
      "additions": 62,
      "deletions": 0,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/unittests/ui-file-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/unittests/ui-file-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/ui-file-selftests.c?ref=d53fd721a18f8c827aa69ffbd15abd99641b5e20",
      "patch": "@@ -0,0 +1,62 @@\n+/* Self tests for ui_file\n+\n+   Copyright (C) 2022 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"gdbsupport/selftest.h\"\n+#include \"ui-file.h\"\n+\n+namespace selftests {\n+namespace file {\n+\n+static void\n+check_one (const char *str, int quoter, const char *result)\n+{\n+  string_file out;\n+  out.putstr (str, quoter);\n+  SELF_CHECK (out.string () == result);\n+}\n+\n+static void\n+run_tests ()\n+{\n+  check_one (\"basic stuff: \\\\\", '\\\\',\n+\t     \"basic stuff: \\\\\\\\\");\n+  check_one (\"more basic stuff: \\\\Q\", 'Q',\n+\t     \"more basic stuff: \\\\\\\\\\\\Q\");\n+  check_one (\"more basic stuff: \\\\Q\", '\\0',\n+\t     \"more basic stuff: \\\\Q\");\n+\n+  check_one (\"weird stuff: \\x1f\\x90\\n\\b\\t\\f\\r\\033\\007\", '\\\\',\n+\t     \"weird stuff: \\\\037\\\\220\\\\n\\\\b\\\\t\\\\f\\\\r\\\\e\\\\a\");\n+\n+  scoped_restore save_7 = make_scoped_restore (&sevenbit_strings, true);\n+  check_one (\"more weird stuff: \\xa5\", '\\\\',\n+\t     \"more weird stuff: \\\\245\");\n+}\n+\n+} /* namespace file*/\n+} /* namespace selftests */\n+\n+void _initialize_ui_file_selftest ();\n+void\n+_initialize_ui_file_selftest ()\n+{\n+  selftests::register_test (\"ui-file\",\n+\t\t\t    selftests::file::run_tests);\n+}"
    },
    {
      "sha": "3ee2b5444df45b82601a929892bc48fa614f6840",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 0,
      "deletions": 97,
      "changes": 97,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=d53fd721a18f8c827aa69ffbd15abd99641b5e20",
      "patch": "@@ -1129,103 +1129,6 @@ parse_escape (struct gdbarch *gdbarch, const char **string_ptr)\n   return target_char;\n }\n \f\n-/* Print the character C on STREAM as part of the contents of a literal\n-   string whose delimiter is QUOTER.  Note that this routine should only\n-   be called for printing things which are independent of the language\n-   of the program being debugged.\n-\n-   printchar will normally escape backslashes and instances of QUOTER. If\n-   QUOTER is 0, printchar won't escape backslashes or any quoting character.\n-   As a side effect, if you pass the backslash character as the QUOTER,\n-   printchar will escape backslashes as usual, but not any other quoting\n-   character. */\n-\n-static void\n-printchar (int c, do_fputc_ftype do_fputc, ui_file *stream, int quoter)\n-{\n-  c &= 0xFF;\t\t\t/* Avoid sign bit follies */\n-\n-  if (c < 0x20 ||\t\t/* Low control chars */\n-      (c >= 0x7F && c < 0xA0) ||\t/* DEL, High controls */\n-      (sevenbit_strings && c >= 0x80))\n-    {\t\t\t\t/* high order bit set */\n-      do_fputc ('\\\\', stream);\n-\n-      switch (c)\n-\t{\n-\tcase '\\n':\n-\t  do_fputc ('n', stream);\n-\t  break;\n-\tcase '\\b':\n-\t  do_fputc ('b', stream);\n-\t  break;\n-\tcase '\\t':\n-\t  do_fputc ('t', stream);\n-\t  break;\n-\tcase '\\f':\n-\t  do_fputc ('f', stream);\n-\t  break;\n-\tcase '\\r':\n-\t  do_fputc ('r', stream);\n-\t  break;\n-\tcase '\\033':\n-\t  do_fputc ('e', stream);\n-\t  break;\n-\tcase '\\007':\n-\t  do_fputc ('a', stream);\n-\t  break;\n-\tdefault:\n-\t  {\n-\t    do_fputc ('0' + ((c >> 6) & 0x7), stream);\n-\t    do_fputc ('0' + ((c >> 3) & 0x7), stream);\n-\t    do_fputc ('0' + ((c >> 0) & 0x7), stream);\n-\t    break;\n-\t  }\n-\t}\n-    }\n-  else\n-    {\n-      if (quoter != 0 && (c == '\\\\' || c == quoter))\n-\tdo_fputc ('\\\\', stream);\n-      do_fputc (c, stream);\n-    }\n-}\n-\n-/* Print the character C on STREAM as part of the contents of a\n-   literal string whose delimiter is QUOTER.  Note that these routines\n-   should only be call for printing things which are independent of\n-   the language of the program being debugged.  */\n-\n-void\n-fputstr_filtered (const char *str, int quoter, struct ui_file *stream)\n-{\n-  while (*str)\n-    printchar (*str++, fputc_filtered, stream, quoter);\n-}\n-\n-void\n-fputstr_unfiltered (const char *str, int quoter, struct ui_file *stream)\n-{\n-  while (*str)\n-    printchar (*str++, fputc_unfiltered, stream, quoter);\n-}\n-\n-void\n-fputstrn_filtered (const char *str, int n, int quoter,\n-\t\t   struct ui_file *stream)\n-{\n-  for (int i = 0; i < n; i++)\n-    printchar (str[i], fputc_filtered, stream, quoter);\n-}\n-\n-void\n-fputstrn_unfiltered (const char *str, int n, int quoter,\n-\t\t     do_fputc_ftype do_fputc, struct ui_file *stream)\n-{\n-  for (int i = 0; i < n; i++)\n-    printchar (str[i], do_fputc, stream, quoter);\n-}\n-\f\n \n /* Number of lines per page or UINT_MAX if paging is disabled.  */\n static unsigned int lines_per_page;"
    },
    {
      "sha": "ac30fd5f1145b3aa4471677b5af1b4483ab45819",
      "filename": "gdb/utils.h",
      "status": "modified",
      "additions": 0,
      "deletions": 15,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d53fd721a18f8c827aa69ffbd15abd99641b5e20/gdb/utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.h?ref=d53fd721a18f8c827aa69ffbd15abd99641b5e20",
      "patch": "@@ -464,21 +464,6 @@ extern void print_spaces_filtered (int, struct ui_file *);\n \n extern const char *n_spaces (int);\n \n-extern void fputstr_filtered (const char *str, int quotr,\n-\t\t\t      struct ui_file * stream);\n-\n-extern void fputstr_unfiltered (const char *str, int quotr,\n-\t\t\t\tstruct ui_file * stream);\n-\n-extern void fputstrn_filtered (const char *str, int n, int quotr,\n-\t\t\t       struct ui_file * stream);\n-\n-typedef int (*do_fputc_ftype) (int c, ui_file *stream);\n-\n-extern void fputstrn_unfiltered (const char *str, int n, int quotr,\n-\t\t\t\t do_fputc_ftype do_fputc,\n-\t\t\t\t struct ui_file * stream);\n-\n /* Return nonzero if filtered printing is initialized.  */\n extern int filtered_printing_initialized (void);\n "
    }
  ]
}