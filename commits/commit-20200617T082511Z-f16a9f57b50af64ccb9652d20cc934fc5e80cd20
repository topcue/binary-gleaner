{
  "sha": "f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjE2YTlmNTdiNTBhZjY0Y2NiOTY1MmQyMGNjOTM0ZmM1ZTgwY2QyMA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-01T14:06:43Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-17T08:25:11Z"
    },
    "message": "gdb: Convert language la_watch_location_expression field to a method\n\nThis commit changes the language_data::la_watch_location_expression\nfunction pointer member variable into a member function of\nlanguage_defn.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* ada-lang.c (ada_watch_location_expression): Rename to\n\tada_language::watch_location_expression.\n\t(ada_language_data): Delete la_watch_location_expression\n\tinitializer.\n\t(ada_language::watch_location_expression): New member function,\n\timplementation from ada_watch_location_expression.\n\t* breakpoint.c (watch_command_1): Update call to\n\twatch_location_expression.\n\t* c-lang.c (c_watch_location_expression): Rename to\n\tlanguage_defn::watch_location_expression.\n\t(c_language_data): Delete la_watch_location_expression\n\tinitializer.\n\t(cplus_language_data): Likewise.\n\t(asm_language_data): Likewise.\n\t(minimal_language_data): Likewise.\n\t* c-lang.h (c_watch_location_expression): Delete declaration.\n\t* d-lang.c (d_language_data): Delete la_watch_location_expression\n\tinitializer.\n\t* f-lang.c (f_language_data): Likewise.\n\t* go-lang.c (go_language_data): Likewise.\n\t* language.c (language_defn::watch_location_expression): Member\n\tfunction implementation from c_watch_location_expression.\n\t(unknown_language_data): Delete la_watch_location_expression\n\tinitializer.\n\t(auto_language_data): Likewise.\n\t* language.h (language_data): Delete la_watch_location_expression\n\tfield.\n\t(language_defn::watch_location_expression): Declare new member\n\tfunction.\n\t* m2-lang.c (m2_language_data): Delete\n\tla_watch_location_expression initializer.\n\t* objc-lang.c (objc_language_data): Likewise.\n\t* opencl-lang.c (opencl_language_data): Likewise.\n\t* p-lang.c (pascal_language_data): Likewise.\n\t* rust-lang.c (rust_watch_location_expression): Rename to\n\trust_language::watch_location_expression.\n\t(rust_language_data): Delete la_watch_location_expression\n\tinitializer.\n\t(rust_language::watch_location_expression): New member function,\n\timplementation from rust_watch_location_expression.",
    "tree": {
      "sha": "95552dfa5130729f03508ec0ee10235ea1c1113f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/95552dfa5130729f03508ec0ee10235ea1c1113f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7e56227dfffddbbb5b648c386c85345929fa0529",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7e56227dfffddbbb5b648c386c85345929fa0529",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7e56227dfffddbbb5b648c386c85345929fa0529"
    }
  ],
  "stats": {
    "total": 147,
    "additions": 86,
    "deletions": 61
  },
  "files": [
    {
      "sha": "2b8ea9617f3b97553f7f0dcaed55192fa5e3da08",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
      "patch": "@@ -1,3 +1,46 @@\n+2020-06-17  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* ada-lang.c (ada_watch_location_expression): Rename to\n+\tada_language::watch_location_expression.\n+\t(ada_language_data): Delete la_watch_location_expression\n+\tinitializer.\n+\t(ada_language::watch_location_expression): New member function,\n+\timplementation from ada_watch_location_expression.\n+\t* breakpoint.c (watch_command_1): Update call to\n+\twatch_location_expression.\n+\t* c-lang.c (c_watch_location_expression): Rename to\n+\tlanguage_defn::watch_location_expression.\n+\t(c_language_data): Delete la_watch_location_expression\n+\tinitializer.\n+\t(cplus_language_data): Likewise.\n+\t(asm_language_data): Likewise.\n+\t(minimal_language_data): Likewise.\n+\t* c-lang.h (c_watch_location_expression): Delete declaration.\n+\t* d-lang.c (d_language_data): Delete la_watch_location_expression\n+\tinitializer.\n+\t* f-lang.c (f_language_data): Likewise.\n+\t* go-lang.c (go_language_data): Likewise.\n+\t* language.c (language_defn::watch_location_expression): Member\n+\tfunction implementation from c_watch_location_expression.\n+\t(unknown_language_data): Delete la_watch_location_expression\n+\tinitializer.\n+\t(auto_language_data): Likewise.\n+\t* language.h (language_data): Delete la_watch_location_expression\n+\tfield.\n+\t(language_defn::watch_location_expression): Declare new member\n+\tfunction.\n+\t* m2-lang.c (m2_language_data): Delete\n+\tla_watch_location_expression initializer.\n+\t* objc-lang.c (objc_language_data): Likewise.\n+\t* opencl-lang.c (opencl_language_data): Likewise.\n+\t* p-lang.c (pascal_language_data): Likewise.\n+\t* rust-lang.c (rust_watch_location_expression): Rename to\n+\trust_language::watch_location_expression.\n+\t(rust_language_data): Delete la_watch_location_expression\n+\tinitializer.\n+\t(rust_language::watch_location_expression): New member function,\n+\timplementation from rust_watch_location_expression.\n+\n 2020-06-17  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* ada-lang.c (ada_collect_symbol_completion_matches): Rename to"
    },
    {
      "sha": "392b1a679c57b9175cbaccf4f5f30d5a243db666",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 11,
      "deletions": 12,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
      "patch": "@@ -488,17 +488,6 @@ add_angle_brackets (const char *str)\n   return string_printf (\"<%s>\", str);\n }\n \n-/* la_watch_location_expression for Ada.  */\n-\n-static gdb::unique_xmalloc_ptr<char>\n-ada_watch_location_expression (struct type *type, CORE_ADDR addr)\n-{\n-  type = check_typedef (TYPE_TARGET_TYPE (check_typedef (type)));\n-  std::string name = type_to_string (type);\n-  return gdb::unique_xmalloc_ptr<char>\n-    (xstrprintf (\"{%s} %s\", name.c_str (), core_addr_to_string (addr)));\n-}\n-\n /* Assuming V points to an array of S objects,  make sure that it contains at\n    least M objects, updating V and S as necessary.  */\n \n@@ -13783,7 +13772,6 @@ extern const struct language_data ada_language_data =\n   ada_op_print_tab,             /* expression operators for printing */\n   0,                            /* c-style arrays */\n   1,                            /* String lower bound */\n-  ada_watch_location_expression,\n   &ada_varobj_ops,\n   ada_is_string_type,\n   \"(...)\"\t\t\t/* la_struct_too_deep_ellipsis */\n@@ -14102,6 +14090,17 @@ class ada_language : public language_defn\n       }\n   }\n \n+  /* See language.h.  */\n+\n+  gdb::unique_xmalloc_ptr<char> watch_location_expression\n+\t(struct type *type, CORE_ADDR addr) const override\n+  {\n+    type = check_typedef (TYPE_TARGET_TYPE (check_typedef (type)));\n+    std::string name = type_to_string (type);\n+    return gdb::unique_xmalloc_ptr<char>\n+      (xstrprintf (\"{%s} %s\", name.c_str (), core_addr_to_string (addr)));\n+  }\n+\n protected:\n   /* See language.h.  */\n "
    },
    {
      "sha": "6d81323dd921fd3699757c32b2a6ab33894e9b09",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
      "patch": "@@ -10738,7 +10738,7 @@ watch_command_1 (const char *arg, int accessflag, int from_tty,\n       CORE_ADDR addr = value_as_address (val.get ());\n \n       w->exp_string_reparse\n-\t= current_language->la_watch_location_expression (t, addr).release ();\n+\t= current_language->watch_location_expression (t, addr).release ();\n \n       w->exp_string = xstrprintf (\"-location %.*s\",\n \t\t\t\t  (int) (exp_end - exp_start), exp_start);"
    },
    {
      "sha": "42141e28dd4cb255b40d4b5a20d3111ce165720d",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 15,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
      "patch": "@@ -727,17 +727,6 @@ evaluate_subexp_c (struct type *expect_type, struct expression *exp,\n   return evaluate_subexp_standard (expect_type, exp, pos, noside);\n }\n \f\n-/* la_watch_location_expression for C.  */\n-\n-gdb::unique_xmalloc_ptr<char>\n-c_watch_location_expression (struct type *type, CORE_ADDR addr)\n-{\n-  type = check_typedef (TYPE_TARGET_TYPE (check_typedef (type)));\n-  std::string name = type_to_string (type);\n-  return gdb::unique_xmalloc_ptr<char>\n-    (xstrprintf (\"* (%s *) %s\", name.c_str (), core_addr_to_string (addr)));\n-}\n-\n /* See c-lang.h.  */\n \n bool\n@@ -914,7 +903,6 @@ extern const struct language_data c_language_data =\n   c_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n-  c_watch_location_expression,\n   &c_varobj_ops,\n   c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n@@ -1026,7 +1014,6 @@ extern const struct language_data cplus_language_data =\n   c_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n-  c_watch_location_expression,\n   &cplus_varobj_ops,\n   c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n@@ -1226,7 +1213,6 @@ extern const struct language_data asm_language_data =\n   c_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n-  c_watch_location_expression,\n   &default_varobj_ops,\n   c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n@@ -1293,7 +1279,6 @@ extern const struct language_data minimal_language_data =\n   c_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n-  c_watch_location_expression,\n   &default_varobj_ops,\n   c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */"
    },
    {
      "sha": "6c5d0d814c4c2dc80c34c74dcbe15fa1f9431bf4",
      "filename": "gdb/c-lang.h",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/c-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/c-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.h?ref=f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
      "patch": "@@ -116,9 +116,6 @@ extern void c_emit_char (int c, struct type *type,\n \n extern const struct op_print c_op_print_tab[];\n \n-extern gdb::unique_xmalloc_ptr<char> c_watch_location_expression\n-     (struct type *type, CORE_ADDR addr);\n-\n /* These are in c-typeprint.c: */\n \n extern void c_type_print_base (struct type *, struct ui_file *,"
    },
    {
      "sha": "001af06a82af1fdfc1bcd583460bbea9dda97c39",
      "filename": "gdb/d-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/d-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/d-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-lang.c?ref=f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
      "patch": "@@ -157,7 +157,6 @@ extern const struct language_data d_language_data =\n   d_op_print_tab,\t\t/* Expression operators for printing.  */\n   1,\t\t\t\t/* C-style arrays.  */\n   0,\t\t\t\t/* String lower bound.  */\n-  c_watch_location_expression,\n   &default_varobj_ops,\n   c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */"
    },
    {
      "sha": "e421e5f96451298ebdc77e401ff6cd0ce9489ad7",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
      "patch": "@@ -578,7 +578,6 @@ extern const struct language_data f_language_data =\n   f_op_print_tab,\t\t/* expression operators for printing */\n   0,\t\t\t\t/* arrays are first-class (not c-style) */\n   1,\t\t\t\t/* String lower bound */\n-  c_watch_location_expression,\n   &default_varobj_ops,\n   f_is_string_type_p,\n   \"(...)\"\t\t\t/* la_struct_too_deep_ellipsis */"
    },
    {
      "sha": "5e742d710945f012c75cab7be261b06ce83f16f2",
      "filename": "gdb/go-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/go-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/go-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.c?ref=f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
      "patch": "@@ -542,7 +542,6 @@ extern const struct language_data go_language_data =\n   go_op_print_tab,\t\t/* Expression operators for printing.  */\n   1,\t\t\t\t/* C-style arrays.  */\n   0,\t\t\t\t/* String lower bound.  */\n-  c_watch_location_expression,\n   &default_varobj_ops,\n   go_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */"
    },
    {
      "sha": "6320577addf84e6c5d5cea7f2c6defb1248b9291",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 13,
      "deletions": 2,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
      "patch": "@@ -622,6 +622,19 @@ language_defn::print_array_index (struct type *index_type, LONGEST index,\n   fprintf_filtered (stream, \"] = \");\n }\n \n+/* See language.h.  */\n+\n+gdb::unique_xmalloc_ptr<char>\n+language_defn::watch_location_expression (struct type *type,\n+\t\t\t\t\t  CORE_ADDR addr) const\n+{\n+  /* Generates an expression that assumes a C like syntax is valid.  */\n+  type = check_typedef (TYPE_TARGET_TYPE (check_typedef (type)));\n+  std::string name = type_to_string (type);\n+  return gdb::unique_xmalloc_ptr<char>\n+    (xstrprintf (\"* (%s *) %s\", name.c_str (), core_addr_to_string (addr)));\n+}\n+\n /* The default implementation of the get_symbol_name_matcher_inner method\n    from the language_defn class.  Matches with strncmp_iw.  */\n \n@@ -779,7 +792,6 @@ extern const struct language_data unknown_language_data =\n   unk_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n-  c_watch_location_expression,\n   &default_varobj_ops,\n   default_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n@@ -850,7 +862,6 @@ extern const struct language_data auto_language_data =\n   unk_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n-  c_watch_location_expression,\n   &default_varobj_ops,\n   default_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */"
    },
    {
      "sha": "1cd3785ab0b8e7270605bc648849f27d6d9ca6b7",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
      "patch": "@@ -319,12 +319,6 @@ struct language_data\n     /* Index to use for extracting the first element of a string.  */\n     char string_lower_bound;\n \n-    /* Return an expression that can be used for a location\n-       watchpoint.  TYPE is a pointer type that points to the memory\n-       to watch, and ADDR is the address of the watched memory.  */\n-    gdb::unique_xmalloc_ptr<char> (*la_watch_location_expression)\n-         (struct type *type, CORE_ADDR addr);\n-\n     /* Various operations on varobj.  */\n     const struct lang_varobj_ops *la_varobj_ops;\n \n@@ -540,6 +534,12 @@ struct language_defn : language_data\n       (tracker, mode, name_match_type, text, word, \"\", code);\n   }\n \n+  /* Return an expression that can be used for a location\n+     watchpoint.  TYPE is a pointer type that points to the memory\n+     to watch, and ADDR is the address of the watched memory.  */\n+  virtual gdb::unique_xmalloc_ptr<char> watch_location_expression\n+\t(struct type *type, CORE_ADDR addr) const;\n+\n   /* List of all known languages.  */\n   static const struct language_defn *languages[nr_languages];\n "
    },
    {
      "sha": "6dbc48767dcb8018b3be913a4b27434fb30b6a86",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
      "patch": "@@ -376,7 +376,6 @@ extern const struct language_data m2_language_data =\n   m2_op_print_tab,\t\t/* expression operators for printing */\n   0,\t\t\t\t/* arrays are first-class (not c-style) */\n   0,\t\t\t\t/* String lower bound */\n-  c_watch_location_expression,\n   &default_varobj_ops,\n   m2_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */"
    },
    {
      "sha": "fa5aa9bc06e4eaad13c82aa7add08f0ceaecdb6c",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
      "patch": "@@ -351,7 +351,6 @@ extern const struct language_data objc_language_data =\n   objc_op_print_tab,\t\t/* Expression operators for printing */\n   1,\t\t\t\t/* C-style arrays */\n   0,\t\t\t\t/* String lower bound */\n-  c_watch_location_expression,\n   &default_varobj_ops,\n   c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */"
    },
    {
      "sha": "4cdfc045e04df10149d3316a04d307a00b872fc0",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
      "patch": "@@ -1030,7 +1030,6 @@ extern const struct language_data opencl_language_data =\n   c_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n-  c_watch_location_expression,\n   &default_varobj_ops,\n   c_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */"
    },
    {
      "sha": "808e9e51a2705517e88f79b02a4222b793b94a3c",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
      "patch": "@@ -407,7 +407,6 @@ extern const struct language_data pascal_language_data =\n   pascal_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n-  c_watch_location_expression,\n   &default_varobj_ops,\n   pascal_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */"
    },
    {
      "sha": "fec68e3819374e2593b93f897e16f5ba1185270b",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 12,
      "deletions": 15,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f16a9f57b50af64ccb9652d20cc934fc5e80cd20/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=f16a9f57b50af64ccb9652d20cc934fc5e80cd20",
      "patch": "@@ -2006,20 +2006,6 @@ rust_lookup_symbol_nonlocal (const struct language_defn *langdef,\n \n \f\n \n-/* la_watch_location_expression for Rust.  */\n-\n-static gdb::unique_xmalloc_ptr<char>\n-rust_watch_location_expression (struct type *type, CORE_ADDR addr)\n-{\n-  type = check_typedef (TYPE_TARGET_TYPE (check_typedef (type)));\n-  std::string name = type_to_string (type);\n-  return gdb::unique_xmalloc_ptr<char>\n-    (xstrprintf (\"*(%s as *mut %s)\", core_addr_to_string (addr),\n-\t\t name.c_str ()));\n-}\n-\n-\f\n-\n static const struct exp_descriptor exp_descriptor_rust = \n {\n   rust_print_subexp,\n@@ -2062,7 +2048,6 @@ extern const struct language_data rust_language_data =\n   c_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n-  rust_watch_location_expression,\n   &default_varobj_ops,\n   rust_is_string_type_p,\n   \"{...}\"\t\t\t/* la_struct_too_deep_ellipsis */\n@@ -2143,6 +2128,18 @@ class rust_language : public language_defn\n     rust_internal_print_type (type, varstring, stream, show, level,\n \t\t\t      flags, false, &podata);\n   }\n+\n+  /* See language.h.  */\n+\n+  gdb::unique_xmalloc_ptr<char> watch_location_expression\n+\t(struct type *type, CORE_ADDR addr) const override\n+  {\n+    type = check_typedef (TYPE_TARGET_TYPE (check_typedef (type)));\n+    std::string name = type_to_string (type);\n+    return gdb::unique_xmalloc_ptr<char>\n+      (xstrprintf (\"*(%s as *mut %s)\", core_addr_to_string (addr),\n+\t\t   name.c_str ()));\n+  }\n };\n \n /* Single instance of the Rust language class.  */"
    }
  ]
}