{
  "sha": "1859c670e9979c1e58ed4e9d83085f732e6936f5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTg1OWM2NzBlOTk3OWMxZTU4ZWQ0ZTlkODMwODVmNzMyZTY5MzZmNQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-05-27T15:13:54Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:15:54Z"
    },
    "message": "Add dwarf2_per_bfd field to dwarf2_per_cu_data\n\nSome code using dwarf2_per_cu_data objects accesses the corresponding\ndwarf2_per_bfd using the following pattern:\n\n    per_cu->dwarf2_per_objfile->per_bfd\n\nSince dwarf2_per_cu_data objects are going to become\nobjfile-independent, the dwarf2_per_objfile link must go.  To replace\nit, add a dwarf2_per_cu_data->per_bfd link.  It makes sense to have it\nthere because the dwarf2_per_cu_data objects belong to the\ndwarf2_per_bfd, so this is essentially just a backlink to their owner.\n\ngdb/ChangeLog:\n\n\t* dwarf2/read.h (struct dwarf2_per_cu_data) <per_bfd>: New\n\tmember.\n\t* dwarf2/read.c (dwarf2_per_bfd::allocate_per_cu): Initialize\n\tdwarf2_per_cu_data::per_bfd.\n\t(dwarf2_per_bfd::allocate_signatured_type): Likewise.\n\t(create_type_unit_group): Likewise.\n\t(queue_comp_unit): Remove reference to\n\tper_cu->dwarf2_per_objfile.\n\t(maybe_queue_comp_unit): Likewise.\n\t(fill_in_sig_entry_from_dwo_entry): Assign new field.\n\t(create_cus_hash_table): Assign new field.\n\nChange-Id: I4ba0a393e64a14489ef061261a3dede1509d055b",
    "tree": {
      "sha": "e41af8237a87c90c2924b16e758981a863e3e6b6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e41af8237a87c90c2924b16e758981a863e3e6b6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1859c670e9979c1e58ed4e9d83085f732e6936f5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1859c670e9979c1e58ed4e9d83085f732e6936f5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1859c670e9979c1e58ed4e9d83085f732e6936f5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1859c670e9979c1e58ed4e9d83085f732e6936f5/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5e22e966a02123478a3c5e067f911a3d180060af",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e22e966a02123478a3c5e067f911a3d180060af",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5e22e966a02123478a3c5e067f911a3d180060af"
    }
  ],
  "stats": {
    "total": 38,
    "additions": 32,
    "deletions": 6
  },
  "files": [
    {
      "sha": "799d1ed2dfec291e87cab180e158b4477ac422c5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1859c670e9979c1e58ed4e9d83085f732e6936f5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1859c670e9979c1e58ed4e9d83085f732e6936f5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1859c670e9979c1e58ed4e9d83085f732e6936f5",
      "patch": "@@ -1,3 +1,17 @@\n+2020-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* dwarf2/read.h (struct dwarf2_per_cu_data) <per_bfd>: New\n+\tmember.\n+\t* dwarf2/read.c (dwarf2_per_bfd::allocate_per_cu): Initialize\n+\tdwarf2_per_cu_data::per_bfd.\n+\t(dwarf2_per_bfd::allocate_signatured_type): Likewise.\n+\t(create_type_unit_group): Likewise.\n+\t(queue_comp_unit): Remove reference to\n+\tper_cu->dwarf2_per_objfile.\n+\t(maybe_queue_comp_unit): Likewise.\n+\t(fill_in_sig_entry_from_dwo_entry): Assign new field.\n+\t(create_cus_hash_table): Assign new field.\n+\n 2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* dwarf2/read.c: Replace"
    },
    {
      "sha": "da1638d3a197bc4216b1e31febeed00582e4759f",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 15,
      "deletions": 6,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1859c670e9979c1e58ed4e9d83085f732e6936f5/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1859c670e9979c1e58ed4e9d83085f732e6936f5/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=1859c670e9979c1e58ed4e9d83085f732e6936f5",
      "patch": "@@ -2447,6 +2447,7 @@ dwarf2_per_cu_data *\n dwarf2_per_bfd::allocate_per_cu ()\n {\n   dwarf2_per_cu_data *result = OBSTACK_ZALLOC (&obstack, dwarf2_per_cu_data);\n+  result->per_bfd = this;\n   result->index = m_num_psymtabs++;\n   return result;\n }\n@@ -2457,6 +2458,7 @@ signatured_type *\n dwarf2_per_bfd::allocate_signatured_type ()\n {\n   signatured_type *result = OBSTACK_ZALLOC (&obstack, signatured_type);\n+  result->per_cu.per_bfd = this;\n   result->per_cu.index = m_num_psymtabs++;\n   return result;\n }\n@@ -6451,10 +6453,12 @@ fill_in_sig_entry_from_dwo_entry (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t\t\t  struct signatured_type *sig_entry,\n \t\t\t\t  struct dwo_unit *dwo_entry)\n {\n+  dwarf2_per_bfd *per_bfd = dwarf2_per_objfile->per_bfd;\n+\n   /* Make sure we're not clobbering something we don't expect to.  */\n   gdb_assert (! sig_entry->per_cu.queued);\n   gdb_assert (sig_entry->per_cu.cu == NULL);\n-  if (dwarf2_per_objfile->per_bfd->using_index)\n+  if (per_bfd->using_index)\n     {\n       gdb_assert (sig_entry->per_cu.v.quick != NULL);\n       gdb_assert (!dwarf2_per_objfile->symtab_set_p (&sig_entry->per_cu));\n@@ -6471,6 +6475,7 @@ fill_in_sig_entry_from_dwo_entry (struct dwarf2_per_objfile *dwarf2_per_objfile,\n   sig_entry->per_cu.length = dwo_entry->length;\n   sig_entry->per_cu.reading_dwo_directly = 1;\n   sig_entry->per_cu.dwarf2_per_objfile = dwarf2_per_objfile;\n+  sig_entry->per_cu.per_bfd = per_bfd;\n   sig_entry->type_offset_in_tu = dwo_entry->type_offset_in_tu;\n   sig_entry->dwo_unit = dwo_entry;\n }\n@@ -7283,17 +7288,19 @@ static struct type_unit_group *\n create_type_unit_group (struct dwarf2_cu *cu, sect_offset line_offset_struct)\n {\n   struct dwarf2_per_objfile *dwarf2_per_objfile = cu->per_objfile;\n+  dwarf2_per_bfd *per_bfd = dwarf2_per_objfile->per_bfd;\n   struct dwarf2_per_cu_data *per_cu;\n   struct type_unit_group *tu_group;\n \n   tu_group = OBSTACK_ZALLOC (&dwarf2_per_objfile->per_bfd->obstack,\n \t\t\t     struct type_unit_group);\n   per_cu = &tu_group->per_cu;\n   per_cu->dwarf2_per_objfile = dwarf2_per_objfile;\n+  per_cu->per_bfd = per_bfd;\n \n-  if (dwarf2_per_objfile->per_bfd->using_index)\n+  if (per_bfd->using_index)\n     {\n-      per_cu->v.quick = OBSTACK_ZALLOC (&dwarf2_per_objfile->per_bfd->obstack,\n+      per_cu->v.quick = OBSTACK_ZALLOC (&per_bfd->obstack,\n \t\t\t\t\tstruct dwarf2_per_cu_quick_data);\n     }\n   else\n@@ -8906,7 +8913,7 @@ queue_comp_unit (struct dwarf2_per_cu_data *per_cu,\n \t\t enum language pretend_language)\n {\n   per_cu->queued = 1;\n-  per_cu->dwarf2_per_objfile->per_bfd->queue.emplace (per_cu, pretend_language);\n+  per_cu->per_bfd->queue.emplace (per_cu, pretend_language);\n }\n \n /* If PER_CU is not yet queued, add it to the queue.\n@@ -8926,7 +8933,7 @@ maybe_queue_comp_unit (struct dwarf2_cu *dependent_cu,\n   /* We may arrive here during partial symbol reading, if we need full\n      DIEs to process an unusual case (e.g. template arguments).  Do\n      not queue PER_CU, just tell our caller to load its DIEs.  */\n-  if (per_cu->dwarf2_per_objfile->per_bfd->reading_partial_symbols)\n+  if (per_cu->per_bfd->reading_partial_symbols)\n     {\n       if (per_cu->cu == NULL || per_cu->cu->dies == NULL)\n \treturn 1;\n@@ -11274,6 +11281,7 @@ create_cus_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t       dwarf2_section_info &section, htab_up &cus_htab)\n {\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n+  dwarf2_per_bfd *per_bfd = dwarf2_per_objfile->per_bfd;\n   const gdb_byte *info_ptr, *end_ptr;\n \n   section.read (objfile);\n@@ -11300,6 +11308,7 @@ create_cus_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \n       memset (&per_cu, 0, sizeof (per_cu));\n       per_cu.dwarf2_per_objfile = dwarf2_per_objfile;\n+      per_cu.per_bfd = per_bfd;\n       per_cu.is_debug_types = 0;\n       per_cu.sect_off = sect_offset (info_ptr - section.buffer);\n       per_cu.section = &section;\n@@ -11317,7 +11326,7 @@ create_cus_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n       if (cus_htab == NULL)\n \tcus_htab = allocate_dwo_unit_table ();\n \n-      dwo_unit = OBSTACK_ZALLOC (&dwarf2_per_objfile->per_bfd->obstack,\n+      dwo_unit = OBSTACK_ZALLOC (&per_bfd->obstack,\n \t\t\t\t struct dwo_unit);\n       *dwo_unit = read_unit;\n       slot = htab_find_slot (cus_htab.get (), dwo_unit, INSERT);"
    },
    {
      "sha": "02478d1aa84c0281159ad30fcc02974e453904f1",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1859c670e9979c1e58ed4e9d83085f732e6936f5/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1859c670e9979c1e58ed4e9d83085f732e6936f5/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=1859c670e9979c1e58ed4e9d83085f732e6936f5",
      "patch": "@@ -412,6 +412,9 @@ struct dwarf2_per_cu_data\n   /* The corresponding dwarf2_per_objfile.  */\n   struct dwarf2_per_objfile *dwarf2_per_objfile;\n \n+  /* Backlink to the owner of this.  */\n+  dwarf2_per_bfd *per_bfd;\n+\n   /* When dwarf2_per_bfd::using_index is true, the 'quick' field\n      is active.  Otherwise, the 'psymtab' field is active.  */\n   union"
    }
  ]
}