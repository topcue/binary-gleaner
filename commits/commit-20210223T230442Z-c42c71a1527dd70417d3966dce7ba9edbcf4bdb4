{
  "sha": "c42c71a1527dd70417d3966dce7ba9edbcf4bdb4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzQyYzcxYTE1MjdkZDcwNDE3ZDM5NjZkY2U3YmE5ZWRiY2Y0YmRiNA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-02-23T01:40:58Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-02-23T23:04:42Z"
    },
    "message": "Use make_tempname file descriptor in smart_rename\n\nThis patch makes use of the temp file descriptor in smart_rename\nrather than reopening the file.  I don't believe there is a security\nissue in reopening the file, but this way is one less directory\noperation.  The patch also attempts to preserve S_ISUID and S_ISGID.\n\n\tPR 27456\n\t* bucomm.h (smart_rename): Update prototype.\n\t* rename.c (smart_rename): Add fromfd and preserve_dates params.\n\tPass fromfd and target_stat to simple_copy.  Call set_times\n\twhen preserve_dates.\n\t(simple_copy): Accept fromfd rather than from filename.  Add\n\ttarget_stat param.  Rewind fromfd rather than opening.  Open\n\t\"to\" file without O_CREAT.  Try to preserve S_ISUID and S_ISGID.\n\t* ar.c (write_archive): Rename ofd to tmpfd.  Dup tmpfd before\n\tclosing output temp file, and pass tmpfd to smart_rename.\n\t* arsup.c (temp_fd): Rename from real_fd.\n\t(ar_save): Dup temp_fd and pass to smart_rename.\n\t* objcopy.c (strip_main, copy_main): Likewise, and pass\n\tpreserve_dates.",
    "tree": {
      "sha": "c84495ca493b5b03e8e144701fcc276a01d736d5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c84495ca493b5b03e8e144701fcc276a01d736d5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c42c71a1527dd70417d3966dce7ba9edbcf4bdb4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c42c71a1527dd70417d3966dce7ba9edbcf4bdb4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c42c71a1527dd70417d3966dce7ba9edbcf4bdb4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c42c71a1527dd70417d3966dce7ba9edbcf4bdb4/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cca8873dd5a6015d5557ea44bc1ea9c252435a29",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cca8873dd5a6015d5557ea44bc1ea9c252435a29",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cca8873dd5a6015d5557ea44bc1ea9c252435a29"
    }
  ],
  "stats": {
    "total": 118,
    "additions": 83,
    "deletions": 35
  },
  "files": [
    {
      "sha": "42b6954911f5e8bf23d1b55f0382c5a5da2377a8",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c42c71a1527dd70417d3966dce7ba9edbcf4bdb4/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c42c71a1527dd70417d3966dce7ba9edbcf4bdb4/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=c42c71a1527dd70417d3966dce7ba9edbcf4bdb4",
      "patch": "@@ -1,3 +1,21 @@\n+2021-02-24  Alan Modra  <amodra@gmail.com>\n+\t    Siddhesh Poyarekar  <siddhesh@gotplt.org>\n+\n+\tPR 27456\n+\t* bucomm.h (smart_rename): Update prototype.\n+\t* rename.c (smart_rename): Add fromfd and preserve_dates params.\n+\tPass fromfd and target_stat to simple_copy.  Call set_times\n+\twhen preserve_dates.\n+\t(simple_copy): Accept fromfd rather than from filename.  Add\n+\ttarget_stat param.  Rewind fromfd rather than opening.  Open\n+\t\"to\" file without O_CREAT.  Try to preserve S_ISUID and S_ISGID.\n+\t* ar.c (write_archive): Rename ofd to tmpfd.  Dup tmpfd before\n+\tclosing output temp file, and pass tmpfd to smart_rename.\n+\t* arsup.c (temp_fd): Rename from real_fd.\n+\t(ar_save): Dup temp_fd and pass to smart_rename.\n+\t* objcopy.c (strip_main, copy_main): Likewise, and pass\n+\tpreserve_dates.\n+\n 2021-02-24  Alan Modra  <amodra@gmail.com>\n \n \tPR 27456"
    },
    {
      "sha": "fb19b14fec5784698d2d1a61811b34484db8e424",
      "filename": "binutils/ar.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c42c71a1527dd70417d3966dce7ba9edbcf4bdb4/binutils/ar.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c42c71a1527dd70417d3966dce7ba9edbcf4bdb4/binutils/ar.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ar.c?ref=c42c71a1527dd70417d3966dce7ba9edbcf4bdb4",
      "patch": "@@ -1252,21 +1252,21 @@ write_archive (bfd *iarch)\n   bfd *obfd;\n   char *old_name, *new_name;\n   bfd *contents_head = iarch->archive_next;\n-  int ofd = -1;\n+  int tmpfd = -1;\n \n   old_name = xstrdup (bfd_get_filename (iarch));\n-  new_name = make_tempname (old_name, &ofd);\n+  new_name = make_tempname (old_name, &tmpfd);\n \n   if (new_name == NULL)\n     bfd_fatal (_(\"could not create temporary file whilst writing archive\"));\n \n   output_filename = new_name;\n \n-  obfd = bfd_fdopenw (new_name, bfd_get_target (iarch), ofd);\n+  obfd = bfd_fdopenw (new_name, bfd_get_target (iarch), tmpfd);\n \n   if (obfd == NULL)\n     {\n-      close (ofd);\n+      close (tmpfd);\n       bfd_fatal (old_name);\n     }\n \n@@ -1297,6 +1297,7 @@ write_archive (bfd *iarch)\n   if (!bfd_set_archive_head (obfd, contents_head))\n     bfd_fatal (old_name);\n \n+  tmpfd = dup (tmpfd);\n   if (!bfd_close (obfd))\n     bfd_fatal (old_name);\n \n@@ -1306,7 +1307,7 @@ write_archive (bfd *iarch)\n   /* We don't care if this fails; we might be creating the archive.  */\n   bfd_close (iarch);\n \n-  if (smart_rename (new_name, old_name, NULL) != 0)\n+  if (smart_rename (new_name, old_name, tmpfd, NULL, FALSE) != 0)\n     xexit (1);\n   free (old_name);\n   free (new_name);"
    },
    {
      "sha": "9982484dbe0cfbc5659b91ae781f2222b4e487ff",
      "filename": "binutils/arsup.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c42c71a1527dd70417d3966dce7ba9edbcf4bdb4/binutils/arsup.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c42c71a1527dd70417d3966dce7ba9edbcf4bdb4/binutils/arsup.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/arsup.c?ref=c42c71a1527dd70417d3966dce7ba9edbcf4bdb4",
      "patch": "@@ -43,7 +43,7 @@ extern int deterministic;\n static bfd *obfd;\n static char *real_name;\n static char *temp_name;\n-static int real_ofd;\n+static int temp_fd;\n static FILE *outfile;\n \n static void\n@@ -152,7 +152,7 @@ void\n ar_open (char *name, int t)\n {\n   real_name = xstrdup (name);\n-  temp_name = make_tempname (real_name, &real_ofd);\n+  temp_name = make_tempname (real_name, &temp_fd);\n \n   if (temp_name == NULL)\n     {\n@@ -162,7 +162,7 @@ ar_open (char *name, int t)\n       return;\n     }\n \n-  obfd = bfd_fdopenw (temp_name, NULL, real_ofd);\n+  obfd = bfd_fdopenw (temp_name, NULL, temp_fd);\n \n   if (!obfd)\n     {\n@@ -348,6 +348,7 @@ ar_save (void)\n       if (deterministic > 0)\n         obfd->flags |= BFD_DETERMINISTIC_OUTPUT;\n \n+      temp_fd = dup (temp_fd);\n       bfd_close (obfd);\n \n       if (stat (real_name, &target_stat) != 0)\n@@ -363,7 +364,7 @@ ar_save (void)\n \t    }\n \t}\n \n-      smart_rename (temp_name, real_name, NULL);\n+      smart_rename (temp_name, real_name, temp_fd, NULL, FALSE);\n       obfd = 0;\n       free (temp_name);\n       free (real_name);"
    },
    {
      "sha": "f1ae47fa1b5660fff74d82f58fb412e95a88efe8",
      "filename": "binutils/bucomm.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c42c71a1527dd70417d3966dce7ba9edbcf4bdb4/binutils/bucomm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c42c71a1527dd70417d3966dce7ba9edbcf4bdb4/binutils/bucomm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/bucomm.h?ref=c42c71a1527dd70417d3966dce7ba9edbcf4bdb4",
      "patch": "@@ -71,7 +71,8 @@ extern void print_version (const char *);\n /* In rename.c.  */\n extern void set_times (const char *, const struct stat *);\n \n-extern int smart_rename (const char *, const char *, struct stat *);\n+extern int smart_rename (const char *, const char *, int,\n+\t\t\t struct stat *, bfd_boolean);\n \n \n /* In libiberty.  */"
    },
    {
      "sha": "90ae0bd46bd0ff421fdbaa55c35fa92d5e8783c7",
      "filename": "binutils/objcopy.c",
      "status": "modified",
      "additions": 31,
      "deletions": 11,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c42c71a1527dd70417d3966dce7ba9edbcf4bdb4/binutils/objcopy.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c42c71a1527dd70417d3966dce7ba9edbcf4bdb4/binutils/objcopy.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objcopy.c?ref=c42c71a1527dd70417d3966dce7ba9edbcf4bdb4",
      "patch": "@@ -4837,6 +4837,7 @@ strip_main (int argc, char *argv[])\n       struct stat statbuf;\n       char *tmpname;\n       int tmpfd = -1;\n+      int copyfd = -1;\n \n       if (get_file_size (argv[i]) < 1)\n \t{\n@@ -4846,7 +4847,11 @@ strip_main (int argc, char *argv[])\n \n       if (output_file == NULL\n \t  || filename_cmp (argv[i], output_file) == 0)\n-\ttmpname = make_tempname (argv[i], &tmpfd);\n+\t{\n+\t  tmpname = make_tempname (argv[i], &tmpfd);\n+\t  if (tmpfd >= 0)\n+\t    copyfd = dup (tmpfd);\n+\t}\n       else\n \ttmpname = output_file;\n \n@@ -4864,14 +4869,18 @@ strip_main (int argc, char *argv[])\n       if (status == 0)\n \t{\n \t  if (output_file != tmpname)\n-\t    status = (smart_rename (tmpname,\n-\t\t\t\t    output_file ? output_file : argv[i],\n-\t\t\t\t    preserve_dates ? &statbuf : NULL) != 0);\n+\t    status = smart_rename (tmpname,\n+\t\t\t\t   output_file ? output_file : argv[i],\n+\t\t\t\t   copyfd, &statbuf, preserve_dates) != 0;\n \t  if (status == 0)\n \t    status = hold_status;\n \t}\n       else\n-\tunlink_if_ordinary (tmpname);\n+\t{\n+\t  if (copyfd >= 0)\n+\t    close (copyfd);\n+\t  unlink_if_ordinary (tmpname);\n+\t}\n       if (output_file != tmpname)\n \tfree (tmpname);\n     }\n@@ -5078,7 +5087,9 @@ copy_main (int argc, char *argv[])\n   bfd_boolean formats_info = FALSE;\n   bfd_boolean use_globalize = FALSE;\n   bfd_boolean use_keep_global = FALSE;\n-  int c, tmpfd = -1;\n+  int c;\n+  int tmpfd = -1;\n+  int copyfd;\n   struct stat statbuf;\n   const bfd_arch_info_type *input_arch = NULL;\n \n@@ -5916,10 +5927,15 @@ copy_main (int argc, char *argv[])\n     }\n \n   /* If there is no destination file, or the source and destination files\n-     are the same, then create a temp and rename the result into the input.  */\n+     are the same, then create a temp and copy the result into the input.  */\n+  copyfd = -1;\n   if (output_filename == NULL\n       || filename_cmp (input_filename, output_filename) == 0)\n-    tmpname = make_tempname (input_filename, &tmpfd);\n+    {\n+      tmpname = make_tempname (input_filename, &tmpfd);\n+      if (tmpfd >= 0)\n+\tcopyfd = dup (tmpfd);\n+    }\n   else\n     tmpname = output_filename;\n \n@@ -5934,11 +5950,15 @@ copy_main (int argc, char *argv[])\n   if (status == 0)\n     {\n       if (tmpname != output_filename)\n-\tstatus = (smart_rename (tmpname, input_filename,\n-\t\t\t\tpreserve_dates ? &statbuf : NULL) != 0);\n+\tstatus = smart_rename (tmpname, input_filename, copyfd,\n+\t\t\t       &statbuf, preserve_dates) != 0;\n     }\n   else\n-    unlink_if_ordinary (tmpname);\n+    {\n+      if (copyfd >= 0)\n+\tclose (copyfd);\n+      unlink_if_ordinary (tmpname);\n+    }\n \n   if (tmpname != output_filename)\n     free (tmpname);"
    },
    {
      "sha": "f688f350d51f2a812d05557f31941f075e9678fd",
      "filename": "binutils/rename.c",
      "status": "modified",
      "additions": 21,
      "deletions": 14,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c42c71a1527dd70417d3966dce7ba9edbcf4bdb4/binutils/rename.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c42c71a1527dd70417d3966dce7ba9edbcf4bdb4/binutils/rename.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/rename.c?ref=c42c71a1527dd70417d3966dce7ba9edbcf4bdb4",
      "patch": "@@ -31,31 +31,29 @@\n /* The number of bytes to copy at once.  */\n #define COPY_BUF 8192\n \n-/* Copy file FROM to file TO, performing no translations.\n+/* Copy file FROMFD to file TO, performing no translations.\n    Return 0 if ok, -1 if error.  */\n \n static int\n-simple_copy (const char *from, const char *to)\n+simple_copy (int fromfd, const char *to, struct stat *target_stat)\n {\n-  int fromfd, tofd, nread;\n+  int tofd, nread;\n   int saved;\n   char buf[COPY_BUF];\n \n-  fromfd = open (from, O_RDONLY | O_BINARY);\n-  if (fromfd < 0)\n+  if (fromfd < 0\n+      || lseek (fromfd, 0, SEEK_SET) != 0)\n     return -1;\n-#ifdef O_CREAT\n-  tofd = open (to, O_CREAT | O_WRONLY | O_TRUNC | O_BINARY, 0777);\n-#else\n-  tofd = creat (to, 0777);\n-#endif\n+\n+  tofd = open (to, O_WRONLY | O_TRUNC | O_BINARY);\n   if (tofd < 0)\n     {\n       saved = errno;\n       close (fromfd);\n       errno = saved;\n       return -1;\n     }\n+\n   while ((nread = read (fromfd, buf, sizeof buf)) > 0)\n     {\n       if (write (tofd, buf, nread) != nread)\n@@ -67,7 +65,16 @@ simple_copy (const char *from, const char *to)\n \t  return -1;\n \t}\n     }\n+\n   saved = errno;\n+\n+#if !defined (_WIN32) || defined (__CYGWIN32__)\n+  /* Writing to a setuid/setgid file may clear S_ISUID and S_ISGID.\n+     Try to restore them, ignoring failure.  */\n+  if (target_stat != NULL)\n+    fchmod (tofd, target_stat->st_mode);\n+#endif\n+\n   close (fromfd);\n   close (tofd);\n   if (nread < 0)\n@@ -118,17 +125,17 @@ set_times (const char *destination, const struct stat *statbuf)\n    various systems.  So now we just copy.  */\n \n int\n-smart_rename (const char *from, const char *to,\n-\t      struct stat *target_stat)\n+smart_rename (const char *from, const char *to, int fromfd,\n+\t      struct stat *target_stat, bfd_boolean preserve_dates)\n {\n   int ret;\n \n-  ret = simple_copy (from, to);\n+  ret = simple_copy (fromfd, to, target_stat);\n   if (ret != 0)\n     non_fatal (_(\"unable to copy file '%s'; reason: %s\"),\n \t       to, strerror (errno));\n \n-  if (target_stat != NULL)\n+  if (preserve_dates)\n     set_times (to, target_stat);\n   unlink (from);\n "
    }
  ]
}