{
  "sha": "3add462fff33beb0e6f1480d3853eb56d664b438",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2FkZDQ2MmZmZjMzYmViMGU2ZjE0ODBkMzg1M2ViNTZkNjY0YjQzOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-21T02:16:07Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-25T13:48:45Z"
    },
    "message": "Separate out locator window\n\nThis introduces a new subclass of tui_gen_win_info for the locator,\nletting us remove another element from union tui_which_element.\n\ngdb/ChangeLog\n2019-06-25  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-wingeneral.c (tui_refresh_all): Update.\n\t* tui/tui-win.c (tui_resize_all, tui_adjust_win_heights)\n\t(tui_source_window_base::set_new_height): Update.\n\t* tui/tui-stack.c (tui_make_status_line): Change parameter type.\n\tUpdate.\n\t(tui_set_locator_fullname, tui_set_locator_info)\n\t(tui_show_frame_info): Update.\n\t* tui/tui-source.c (tui_set_source_content)\n\t(tui_source_is_displayed): Update.\n\t* tui/tui-layout.c (show_source_disasm_command, show_data)\n\t(show_source_or_disasm_and_command): Update.\n\t* tui/tui-disasm.c (tui_set_disassem_content)\n\t(tui_get_begin_asm_address): Update.\n\t* tui/tui-data.h (struct tui_locator_element): Remove.\n\t(union tui_which_element) <locator>: Remove.\n\t(struct tui_locator_window): New.\n\t(tui_locator_win_info_ptr): Change return type.\n\t* tui/tui-data.c (_locator): Change type.\n\t(tui_locator_win_info_ptr): Change return type.\n\t(init_content_element): Remove LOCATOR_WIN case.  Add assert.\n\t(tui_alloc_content): Add assert.",
    "tree": {
      "sha": "2a2d4b09984d99584af176d3da3dee6fc143ed5c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2a2d4b09984d99584af176d3da3dee6fc143ed5c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3add462fff33beb0e6f1480d3853eb56d664b438",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3add462fff33beb0e6f1480d3853eb56d664b438",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3add462fff33beb0e6f1480d3853eb56d664b438",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3add462fff33beb0e6f1480d3853eb56d664b438/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "489e9d8b7bb3337a7f4f902a03c176c22faeabc7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/489e9d8b7bb3337a7f4f902a03c176c22faeabc7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/489e9d8b7bb3337a7f4f902a03c176c22faeabc7"
    }
  ],
  "stats": {
    "total": 220,
    "additions": 107,
    "deletions": 113
  },
  "files": [
    {
      "sha": "dd31fb63b58b314be201468bde8849dafb02509f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3add462fff33beb0e6f1480d3853eb56d664b438/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3add462fff33beb0e6f1480d3853eb56d664b438/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3add462fff33beb0e6f1480d3853eb56d664b438",
      "patch": "@@ -1,3 +1,27 @@\n+2019-06-25  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-wingeneral.c (tui_refresh_all): Update.\n+\t* tui/tui-win.c (tui_resize_all, tui_adjust_win_heights)\n+\t(tui_source_window_base::set_new_height): Update.\n+\t* tui/tui-stack.c (tui_make_status_line): Change parameter type.\n+\tUpdate.\n+\t(tui_set_locator_fullname, tui_set_locator_info)\n+\t(tui_show_frame_info): Update.\n+\t* tui/tui-source.c (tui_set_source_content)\n+\t(tui_source_is_displayed): Update.\n+\t* tui/tui-layout.c (show_source_disasm_command, show_data)\n+\t(show_source_or_disasm_and_command): Update.\n+\t* tui/tui-disasm.c (tui_set_disassem_content)\n+\t(tui_get_begin_asm_address): Update.\n+\t* tui/tui-data.h (struct tui_locator_element): Remove.\n+\t(union tui_which_element) <locator>: Remove.\n+\t(struct tui_locator_window): New.\n+\t(tui_locator_win_info_ptr): Change return type.\n+\t* tui/tui-data.c (_locator): Change type.\n+\t(tui_locator_win_info_ptr): Change return type.\n+\t(init_content_element): Remove LOCATOR_WIN case.  Add assert.\n+\t(tui_alloc_content): Add assert.\n+\n 2019-06-25  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-winsource.c"
    },
    {
      "sha": "3da269b248da2f3e57dfd6d4a761eb20fe4abe5c",
      "filename": "gdb/tui/tui-data.c",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3add462fff33beb0e6f1480d3853eb56d664b438/gdb/tui/tui-data.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3add462fff33beb0e6f1480d3853eb56d664b438/gdb/tui/tui-data.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.c?ref=3add462fff33beb0e6f1480d3853eb56d664b438",
      "patch": "@@ -36,7 +36,7 @@ struct tui_win_info *tui_win_list[MAX_MAJOR_WINDOWS];\n ****************************/\n static enum tui_layout_type current_layout = UNDEFINED_LAYOUT;\n static int term_height, term_width;\n-static struct tui_gen_win_info _locator (LOCATOR_WIN);\n+static struct tui_locator_window _locator;\n static std::vector<tui_source_window_base *> source_windows;\n static struct tui_win_info *win_with_focus = NULL;\n static struct tui_layout_def layout_def = {\n@@ -185,7 +185,7 @@ tui_data_window::clear_detail ()\n \n /* Accessor for the locator win info.  Answers a pointer to the static\n    locator win info struct.  */\n-struct tui_gen_win_info *\n+struct tui_locator_window *\n tui_locator_win_info_ptr (void)\n {\n   return &_locator;\n@@ -365,6 +365,7 @@ init_content_element (struct tui_win_element *element,\n \t\t      enum tui_win_type type)\n {\n   gdb_assert (type != EXEC_INFO_WIN);\n+  gdb_assert (type != LOCATOR_WIN);\n \n   switch (type)\n     {\n@@ -393,12 +394,6 @@ init_content_element (struct tui_win_element *element,\n       element->which_element.data.highlight = FALSE;\n       element->which_element.data.content = NULL;\n       break;\n-    case LOCATOR_WIN:\n-      element->which_element.locator.full_name[0] =\n-\telement->which_element.locator.proc_name[0] = (char) 0;\n-      element->which_element.locator.line_no = 0;\n-      element->which_element.locator.addr = 0;\n-      break;\n     default:\n       break;\n     }\n@@ -426,6 +421,7 @@ tui_alloc_content (int num_elements, enum tui_win_type type)\n   int i;\n \n   gdb_assert (type != EXEC_INFO_WIN);\n+  gdb_assert (type != LOCATOR_WIN);\n \n   content = XNEWVEC (struct tui_win_element *, num_elements);\n "
    },
    {
      "sha": "f29891c8a02f90957f5f3cb3ccbe7f565f3c63b3",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 20,
      "deletions": 14,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3add462fff33beb0e6f1480d3853eb56d664b438/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3add462fff33beb0e6f1480d3853eb56d664b438/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=3add462fff33beb0e6f1480d3853eb56d664b438",
      "patch": "@@ -214,18 +214,6 @@ struct tui_command_element\n # define MAX_LOCATOR_ELEMENT_LEN        1024\n #endif\n \n-/* Elements in the locator window content.  */\n-struct tui_locator_element\n-{\n-  /* Resolved absolute filename as returned by symtab_to_fullname.  */\n-  char full_name[MAX_LOCATOR_ELEMENT_LEN];\n-  char proc_name[MAX_LOCATOR_ELEMENT_LEN];\n-  int line_no;\n-  CORE_ADDR addr;\n-  /* Architecture associated with code at this location.  */\n-  struct gdbarch *gdbarch;\n-};\n-\n /* Flags to tell what kind of breakpoint is at current line.  */\n #define TUI_BP_ENABLED      0x01\n #define TUI_BP_DISABLED     0x02\n@@ -248,7 +236,6 @@ union tui_which_element\n   struct tui_gen_win_info *data_window;\t/* Data display elements.  */\n   struct tui_data_element data;\t\t/* Elements of data_window.  */\n   struct tui_command_element command;\t/* Command elements.  */\n-  struct tui_locator_element locator;\t/* Locator elements.  */\n };\n \n struct tui_win_element\n@@ -284,6 +271,25 @@ struct tui_exec_info_window : public tui_gen_win_info\n   tui_exec_info_content *m_content = nullptr;\n };\n \n+/* Locator window class.  */\n+\n+struct tui_locator_window : public tui_gen_win_info\n+{\n+  tui_locator_window ()\n+    : tui_gen_win_info (LOCATOR_WIN)\n+  {\n+    full_name[0] = 0;\n+    proc_name[0] = 0;\n+  }\n+\n+  char full_name[MAX_LOCATOR_ELEMENT_LEN];\n+  char proc_name[MAX_LOCATOR_ELEMENT_LEN];\n+  int line_no = 0;\n+  CORE_ADDR addr = 0;\n+  /* Architecture associated with code at this location.  */\n+  struct gdbarch *gdbarch = nullptr;\n+};\n+\n /* This defines information about each logical window.  */\n struct tui_win_info : public tui_gen_win_info\n {\n@@ -572,7 +578,7 @@ extern int tui_term_height (void);\n extern void tui_set_term_height_to (int);\n extern int tui_term_width (void);\n extern void tui_set_term_width_to (int);\n-extern struct tui_gen_win_info *tui_locator_win_info_ptr (void);\n+extern struct tui_locator_window *tui_locator_win_info_ptr (void);\n extern std::vector<tui_source_window_base *> &tui_source_windows ();\n extern void tui_clear_source_windows (void);\n extern void tui_clear_source_windows_detail (void);"
    },
    {
      "sha": "6b88d96a9db3a3340d9c17d217c564d9890e1217",
      "filename": "gdb/tui/tui-disasm.c",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3add462fff33beb0e6f1480d3853eb56d664b438/gdb/tui/tui-disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3add462fff33beb0e6f1480d3853eb56d664b438/gdb/tui/tui-disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-disasm.c?ref=3add462fff33beb0e6f1480d3853eb56d664b438",
      "patch": "@@ -169,7 +169,7 @@ tui_set_disassem_content (struct gdbarch *gdbarch, CORE_ADDR pc)\n   int offset = TUI_DISASM_WIN->horizontal_offset;\n   int max_lines, line_width;\n   CORE_ADDR cur_pc;\n-  struct tui_gen_win_info *locator = tui_locator_win_info_ptr ();\n+  struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n   int tab_len = tui_tab_width;\n   struct tui_asm_line *asm_lines;\n   int insn_pos;\n@@ -185,7 +185,7 @@ tui_set_disassem_content (struct gdbarch *gdbarch, CORE_ADDR pc)\n   base->gdbarch = gdbarch;\n   base->start_line_or_addr.loa = LOA_ADDRESS;\n   base->start_line_or_addr.u.addr = pc;\n-  cur_pc = locator->content[0]->which_element.locator.addr;\n+  cur_pc = locator->addr;\n \n   /* Window size, excluding highlight box.  */\n   max_lines = TUI_DISASM_WIN->height - 2;\n@@ -316,15 +316,13 @@ tui_show_disassem_and_update_source (struct gdbarch *gdbarch,\n void\n tui_get_begin_asm_address (struct gdbarch **gdbarch_p, CORE_ADDR *addr_p)\n {\n-  struct tui_gen_win_info *locator;\n-  struct tui_locator_element *element;\n+  struct tui_locator_window *locator;\n   struct gdbarch *gdbarch = get_current_arch ();\n   CORE_ADDR addr;\n \n   locator = tui_locator_win_info_ptr ();\n-  element = &locator->content[0]->which_element.locator;\n \n-  if (element->addr == 0)\n+  if (locator->addr == 0)\n     {\n       struct bound_minimal_symbol main_symbol;\n \n@@ -342,8 +340,8 @@ tui_get_begin_asm_address (struct gdbarch **gdbarch_p, CORE_ADDR *addr_p)\n     }\n   else\t\t\t\t/* The target is executing.  */\n     {\n-      gdbarch = element->gdbarch;\n-      addr = element->addr;\n+      gdbarch = locator->gdbarch;\n+      addr = locator->addr;\n     }\n \n   *gdbarch_p = gdbarch;"
    },
    {
      "sha": "cf8f13feeed019e3b885fb6d29c124a3c8f5948a",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 21,
      "deletions": 21,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3add462fff33beb0e6f1480d3853eb56d664b438/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3add462fff33beb0e6f1480d3853eb56d664b438/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=3add462fff33beb0e6f1480d3853eb56d664b438",
      "patch": "@@ -634,21 +634,21 @@ show_source_disasm_command (void)\n \t  TUI_SRC_WIN->m_has_locator = false;\n \t}\n \n-      struct tui_gen_win_info *locator = tui_locator_win_info_ptr ();\n+      struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n+      gdb_assert (locator != nullptr);\n \n       tui_show_source_content (TUI_SRC_WIN);\n       if (TUI_DISASM_WIN == NULL)\n \t{\n \t  tui_win_list[DISASSEM_WIN]\n \t    = make_disasm_window (asm_height, src_height - 1);\n-\t  locator\n-\t    = init_and_make_win (locator,\n-\t\t\t\t LOCATOR_WIN,\n-\t\t\t\t 2 /* 1 */ ,\n-\t\t\t\t tui_term_width (),\n-\t\t\t\t 0,\n-\t\t\t\t (src_height + asm_height) - 1,\n-\t\t\t\t DONT_BOX_WINDOW);\n+\t  init_and_make_win (locator,\n+\t\t\t     LOCATOR_WIN,\n+\t\t\t     2 /* 1 */ ,\n+\t\t\t     tui_term_width (),\n+\t\t\t     0,\n+\t\t\t     (src_height + asm_height) - 1,\n+\t\t\t     DONT_BOX_WINDOW);\n \t}\n       else\n \t{\n@@ -703,8 +703,9 @@ show_data (enum tui_layout_type new_layout)\n   int total_height = (tui_term_height () - TUI_CMD_WIN->height);\n   int src_height, data_height;\n   enum tui_win_type win_type;\n-  struct tui_gen_win_info *locator = tui_locator_win_info_ptr ();\n \n+  struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n+  gdb_assert (locator != nullptr);\n \n   data_height = total_height / 2;\n   src_height = total_height - data_height;\n@@ -725,8 +726,7 @@ show_data (enum tui_layout_type new_layout)\n       else\n \ttui_win_list[win_type]\n \t  = make_disasm_window (src_height, data_height - 1);\n-      locator\n-\t= init_and_make_win (locator,\n+      init_and_make_win (locator,\n \t\t\t     LOCATOR_WIN,\n \t\t\t     2 /* 1 */ ,\n \t\t\t     tui_term_width (),\n@@ -870,7 +870,8 @@ show_source_or_disasm_and_command (enum tui_layout_type layout_type)\n     {\n       struct tui_win_info **win_info_ptr;\n       int src_height, cmd_height;\n-      struct tui_gen_win_info *locator = tui_locator_win_info_ptr ();\n+      struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n+      gdb_assert (locator != nullptr);\n \n       if (TUI_CMD_WIN != NULL)\n \tcmd_height = TUI_CMD_WIN->height;\n@@ -890,14 +891,13 @@ show_source_or_disasm_and_command (enum tui_layout_type layout_type)\n \t    *win_info_ptr = make_source_window (src_height - 1, 0);\n \t  else\n \t    *win_info_ptr = make_disasm_window (src_height - 1, 0);\n-\t  locator\n-\t    = init_and_make_win (locator,\n-\t\t\t\t LOCATOR_WIN,\n-\t\t\t\t 2 /* 1 */ ,\n-\t\t\t\t tui_term_width (),\n-\t\t\t\t 0,\n-\t\t\t\t src_height - 1,\n-\t\t\t\t DONT_BOX_WINDOW);\n+\t  init_and_make_win (locator,\n+\t\t\t     LOCATOR_WIN,\n+\t\t\t     2 /* 1 */ ,\n+\t\t\t     tui_term_width (),\n+\t\t\t     0,\n+\t\t\t     src_height - 1,\n+\t\t\t     DONT_BOX_WINDOW);\n \t  base = (tui_source_window_base *) *win_info_ptr;\n \t}\n       else"
    },
    {
      "sha": "e1448dbd96138e89b1925e8bae9f60175867e94b",
      "filename": "gdb/tui/tui-source.c",
      "status": "modified",
      "additions": 4,
      "deletions": 8,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3add462fff33beb0e6f1480d3853eb56d664b438/gdb/tui/tui-source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3add462fff33beb0e6f1480d3853eb56d664b438/gdb/tui/tui-source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.c?ref=3add462fff33beb0e6f1480d3853eb56d664b438",
      "patch": "@@ -157,7 +157,7 @@ tui_set_source_content (struct symtab *s,\n       else\n \t{\n \t  int cur_line_no, cur_line;\n-\t  struct tui_gen_win_info *locator\n+\t  struct tui_locator_window *locator\n \t    = tui_locator_win_info_ptr ();\n \t  struct tui_source_window_base *src\n \t    = (struct tui_source_window_base *) TUI_SRC_WIN;\n@@ -194,12 +194,9 @@ tui_set_source_content (struct symtab *s,\n \t      element->which_element.source.line_or_addr.u.line_no =\n \t\tcur_line_no;\n \t      element->which_element.source.is_exec_point =\n-\t\t(filename_cmp (locator->content[0]\n-\t\t\t       ->which_element.locator.full_name,\n+\t\t(filename_cmp (locator->full_name,\n \t\t\t       symtab_to_fullname (s)) == 0\n-\t\t && cur_line_no\n-\t\t == locator->content[0]\n-\t\t ->which_element.locator.line_no);\n+\t\t && cur_line_no == locator->line_no);\n \n \t      xfree (TUI_SRC_WIN->content[cur_line]\n \t\t     ->which_element.source.line);\n@@ -300,8 +297,7 @@ tui_source_is_displayed (const char *fullname)\n {\n   return (TUI_SRC_WIN != NULL\n \t  && TUI_SRC_WIN->content_in_use \n-\t  && (filename_cmp (tui_locator_win_info_ptr ()->content[0]\n-\t\t\t      ->which_element.locator.full_name,\n+\t  && (filename_cmp (tui_locator_win_info_ptr ()->full_name,\n \t\t\t    fullname) == 0));\n }\n "
    },
    {
      "sha": "f761ac1f7017a50dbc5d1d26d022c193ca4a8815",
      "filename": "gdb/tui/tui-stack.c",
      "status": "modified",
      "additions": 24,
      "deletions": 50,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3add462fff33beb0e6f1480d3853eb56d664b438/gdb/tui/tui-stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3add462fff33beb0e6f1480d3853eb56d664b438/gdb/tui/tui-stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-stack.c?ref=3add462fff33beb0e6f1480d3853eb56d664b438",
      "patch": "@@ -59,8 +59,8 @@ static void tui_update_command (const char *, int);\n /* Create the status line to display as much information as we can on\n    this single line: target name, process number, current function,\n    current line, current PC, SingleKey mode.  */\n-static char*\n-tui_make_status_line (struct tui_locator_element *loc)\n+static char *\n+tui_make_status_line (struct tui_locator_window *loc)\n {\n   char *string;\n   char line_buf[50], *pname;\n@@ -246,17 +246,13 @@ void\n tui_show_locator_content (void)\n {\n   char *string;\n-  struct tui_gen_win_info *locator;\n+  struct tui_locator_window *locator;\n \n   locator = tui_locator_win_info_ptr ();\n \n   if (locator != NULL && locator->handle != NULL)\n     {\n-      struct tui_win_element *element;\n-\n-      element = locator->content[0];\n-\n-      string = tui_make_status_line (&element->which_element.locator);\n+      string = tui_make_status_line (locator);\n       wmove (locator->handle, 0, 0);\n       /* We ignore the return value from wstandout and wstandend, casting\n \t them to void in order to avoid a compiler warning.  The warning\n@@ -279,18 +275,10 @@ tui_show_locator_content (void)\n static void\n tui_set_locator_fullname (const char *fullname)\n {\n-  struct tui_gen_win_info *locator = tui_locator_win_info_ptr ();\n-  struct tui_locator_element *element;\n-\n-  if (locator->content[0] == NULL)\n-    {\n-      tui_set_locator_info (NULL, fullname, NULL, 0, 0);\n-      return;\n-    }\n+  struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n \n-  element = &locator->content[0]->which_element.locator;\n-  element->full_name[0] = 0;\n-  strcat_to_buf (element->full_name, MAX_LOCATOR_ELEMENT_LEN, fullname);\n+  locator->full_name[0] = 0;\n+  strcat_to_buf (locator->full_name, MAX_LOCATOR_ELEMENT_LEN, fullname);\n }\n \n /* Update the locator, with the provided arguments.\n@@ -305,39 +293,28 @@ tui_set_locator_info (struct gdbarch *gdbarch,\n \t\t      int lineno,\n                       CORE_ADDR addr)\n {\n-  struct tui_gen_win_info *locator = tui_locator_win_info_ptr ();\n-  struct tui_locator_element *element;\n+  struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n   int locator_changed_p = 0;\n \n-  /* Allocate the locator content if necessary.  */\n-  if (locator->content_size <= 0)\n-    {\n-      locator->content = tui_alloc_content (1, LOCATOR_WIN);\n-      locator->content_size = 1;\n-      locator_changed_p = 1;\n-    }\n-\n   if (procname == NULL)\n     procname = \"\";\n \n   if (fullname == NULL)\n     fullname = \"\";\n \n-  element = &locator->content[0]->which_element.locator;\n-\n-  locator_changed_p |= strncmp (element->proc_name, procname,\n+  locator_changed_p |= strncmp (locator->proc_name, procname,\n \t\t\t\tMAX_LOCATOR_ELEMENT_LEN) != 0;\n-  locator_changed_p |= lineno != element->line_no;\n-  locator_changed_p |= addr != element->addr;\n-  locator_changed_p |= gdbarch != element->gdbarch;\n-  locator_changed_p |= strncmp (element->full_name, fullname,\n+  locator_changed_p |= lineno != locator->line_no;\n+  locator_changed_p |= addr != locator->addr;\n+  locator_changed_p |= gdbarch != locator->gdbarch;\n+  locator_changed_p |= strncmp (locator->full_name, fullname,\n \t\t\t\tMAX_LOCATOR_ELEMENT_LEN) != 0;\n \n-  element->proc_name[0] = (char) 0;\n-  strcat_to_buf (element->proc_name, MAX_LOCATOR_ELEMENT_LEN, procname);\n-  element->line_no = lineno;\n-  element->addr = addr;\n-  element->gdbarch = gdbarch;\n+  locator->proc_name[0] = (char) 0;\n+  strcat_to_buf (locator->proc_name, MAX_LOCATOR_ELEMENT_LEN, procname);\n+  locator->line_no = lineno;\n+  locator->addr = addr;\n+  locator->gdbarch = gdbarch;\n   tui_set_locator_fullname (fullname);\n \n   return locator_changed_p;\n@@ -366,7 +343,7 @@ tui_show_frame_info (struct frame_info *fi)\n     {\n       int start_line;\n       CORE_ADDR low;\n-      struct tui_gen_win_info *locator = tui_locator_win_info_ptr ();\n+      struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n       int source_already_displayed;\n       CORE_ADDR pc;\n \n@@ -398,12 +375,9 @@ tui_show_frame_info (struct frame_info *fi)\n       start_line = 0;\n       for (struct tui_source_window_base *win_info : tui_source_windows ())\n \t{\n-\t  union tui_which_element *item;\n-\n-\t  item = &locator->content[0]->which_element;\n \t  if (win_info == TUI_SRC_WIN)\n \t    {\n-\t      start_line = (item->locator.line_no -\n+\t      start_line = (locator->line_no -\n \t\t\t   (win_info->viewport_height / 2)) + 1;\n \t      if (start_line <= 0)\n \t\tstart_line = 1;\n@@ -429,13 +403,13 @@ tui_show_frame_info (struct frame_info *fi)\n \t      l.loa = LOA_LINE;\n \t      l.u.line_no = start_line;\n \t      if (!(source_already_displayed\n-\t\t    && tui_line_is_displayed (item->locator.line_no,\n+\t\t    && tui_line_is_displayed (locator->line_no,\n \t\t\t\t\t      win_info, TRUE)))\n \t\ttui_update_source_window (win_info, get_frame_arch (fi),\n \t\t\t\t\t  sal.symtab, l, TRUE);\n \t      else\n \t\t{\n-\t\t  l.u.line_no = item->locator.line_no;\n+\t\t  l.u.line_no = locator->line_no;\n \t\t  win_info->set_is_exec_point_at (l);\n \t\t}\n \t    }\n@@ -447,13 +421,13 @@ tui_show_frame_info (struct frame_info *fi)\n \n \t\t  a.loa = LOA_ADDRESS;\n \t\t  a.u.addr = low;\n-\t\t  if (!tui_addr_is_displayed (item->locator.addr,\n+\t\t  if (!tui_addr_is_displayed (locator->addr,\n \t\t\t\t\t      win_info, TRUE))\n \t\t    tui_update_source_window (win_info, get_frame_arch (fi),\n \t\t\t\t\t      sal.symtab, a, TRUE);\n \t\t  else\n \t\t    {\n-\t\t      a.u.addr = item->locator.addr;\n+\t\t      a.u.addr = locator->addr;\n \t\t      win_info->set_is_exec_point_at (a);\n \t\t    }\n \t\t}"
    },
    {
      "sha": "f43e11a4225107836763545c006a150103d93fdf",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3add462fff33beb0e6f1480d3853eb56d664b438/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3add462fff33beb0e6f1480d3853eb56d664b438/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=3add462fff33beb0e6f1480d3853eb56d664b438",
      "patch": "@@ -556,7 +556,7 @@ tui_resize_all (void)\n       struct tui_win_info *win_with_focus = tui_win_with_focus ();\n       struct tui_win_info *first_win;\n       struct tui_win_info *second_win;\n-      struct tui_gen_win_info *locator = tui_locator_win_info_ptr ();\n+      struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n       int win_type;\n       int new_height, split_diff, cmd_split_diff, num_wins_displayed = 2;\n \n@@ -1099,7 +1099,7 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n \t{\n \t  int diff;\n \t  struct tui_win_info *win_info;\n-\t  struct tui_gen_win_info *locator = tui_locator_win_info_ptr ();\n+\t  struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n \t  enum tui_layout_type cur_layout = tui_current_layout ();\n \n \t  diff = (new_height - primary_win_info->height) * (-1);\n@@ -1255,7 +1255,7 @@ tui_source_window_base::set_new_height (int height)\n \n   if (has_locator ())\n     {\n-      tui_gen_win_info *gen_win_info = tui_locator_win_info_ptr ();\n+      tui_locator_window *gen_win_info = tui_locator_win_info_ptr ();\n       tui_make_invisible (gen_win_info);\n       gen_win_info->origin.y = origin.y + height;\n     }"
    },
    {
      "sha": "9bc4e2b24ca66b7fde0176cae63d88c95f93a662",
      "filename": "gdb/tui/tui-wingeneral.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3add462fff33beb0e6f1480d3853eb56d664b438/gdb/tui/tui-wingeneral.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3add462fff33beb0e6f1480d3853eb56d664b438/gdb/tui/tui-wingeneral.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-wingeneral.c?ref=3add462fff33beb0e6f1480d3853eb56d664b438",
      "patch": "@@ -266,7 +266,7 @@ void\n tui_refresh_all (struct tui_win_info **list)\n {\n   int type;\n-  struct tui_gen_win_info *locator = tui_locator_win_info_ptr ();\n+  struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n \n   for (type = SRC_WIN; (type < MAX_MAJOR_WINDOWS); type++)\n     {"
    }
  ]
}