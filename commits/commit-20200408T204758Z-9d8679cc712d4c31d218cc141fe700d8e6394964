{
  "sha": "9d8679cc712d4c31d218cc141fe700d8e6394964",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWQ4Njc5Y2M3MTJkNGMzMWQyMThjYzE0MWZlNzAwZDhlNjM5NDk2NA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:33:35Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:47:58Z"
    },
    "message": "Share get_image_name between gdb and gdbserver\n\nThis moves get_image_name to nat/windows-nat.c so that it can be\nshared between gdb and gdbserver.\n\ngdb/ChangeLog\n2020-04-08  Tom Tromey  <tromey@adacore.com>\n\n\t* windows-nat.c (get_image_name): Move to nat/windows-nat.c.\n\t(handle_load_dll): Update.\n\t* nat/windows-nat.c (get_image_name): Move from windows-nat.c.\n\ngdbserver/ChangeLog\n2020-04-08  Tom Tromey  <tromey@adacore.com>\n\n\t* win32-low.c (get_image_name): Remove.\n\t(handle_load_dll): Update.",
    "tree": {
      "sha": "41c6b2c0658250425f1bbd76aa5392ff7e38433d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/41c6b2c0658250425f1bbd76aa5392ff7e38433d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9d8679cc712d4c31d218cc141fe700d8e6394964",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9d8679cc712d4c31d218cc141fe700d8e6394964",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9d8679cc712d4c31d218cc141fe700d8e6394964",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9d8679cc712d4c31d218cc141fe700d8e6394964/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "28688adf8f883fdd8b642a446ec5578236e84b1e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/28688adf8f883fdd8b642a446ec5578236e84b1e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/28688adf8f883fdd8b642a446ec5578236e84b1e"
    }
  ],
  "stats": {
    "total": 178,
    "additions": 77,
    "deletions": 101
  },
  "files": [
    {
      "sha": "7fd7bca64583e97eb8e4e1446207535b913ff2a6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d8679cc712d4c31d218cc141fe700d8e6394964/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d8679cc712d4c31d218cc141fe700d8e6394964/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9d8679cc712d4c31d218cc141fe700d8e6394964",
      "patch": "@@ -1,3 +1,9 @@\n+2020-04-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* windows-nat.c (get_image_name): Move to nat/windows-nat.c.\n+\t(handle_load_dll): Update.\n+\t* nat/windows-nat.c (get_image_name): Move from windows-nat.c.\n+\n 2020-04-08  Tom Tromey  <tromey@adacore.com>\n \n \t* windows-nat.c (enum thread_disposition_type): Move to"
    },
    {
      "sha": "8217a9853204b708834509ffdf2279c1290e3396",
      "filename": "gdb/nat/windows-nat.c",
      "status": "modified",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d8679cc712d4c31d218cc141fe700d8e6394964/gdb/nat/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d8679cc712d4c31d218cc141fe700d8e6394964/gdb/nat/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.c?ref=9d8679cc712d4c31d218cc141fe700d8e6394964",
      "patch": "@@ -69,4 +69,61 @@ windows_thread_info::resume ()\n   suspended = 0;\n }\n \n+const char *\n+get_image_name (HANDLE h, void *address, int unicode)\n+{\n+#ifdef __CYGWIN__\n+  static char buf[MAX_PATH];\n+#else\n+  static char buf[(2 * MAX_PATH) + 1];\n+#endif\n+  DWORD size = unicode ? sizeof (WCHAR) : sizeof (char);\n+  char *address_ptr;\n+  int len = 0;\n+  char b[2];\n+  SIZE_T done;\n+\n+  /* Attempt to read the name of the dll that was detected.\n+     This is documented to work only when actively debugging\n+     a program.  It will not work for attached processes.  */\n+  if (address == NULL)\n+    return NULL;\n+\n+#ifdef _WIN32_WCE\n+  /* Windows CE reports the address of the image name,\n+     instead of an address of a pointer into the image name.  */\n+  address_ptr = address;\n+#else\n+  /* See if we could read the address of a string, and that the\n+     address isn't null.  */\n+  if (!ReadProcessMemory (h, address,  &address_ptr,\n+\t\t\t  sizeof (address_ptr), &done)\n+      || done != sizeof (address_ptr)\n+      || !address_ptr)\n+    return NULL;\n+#endif\n+\n+  /* Find the length of the string.  */\n+  while (ReadProcessMemory (h, address_ptr + len++ * size, &b, size, &done)\n+\t && (b[0] != 0 || b[size - 1] != 0) && done == size)\n+    continue;\n+\n+  if (!unicode)\n+    ReadProcessMemory (h, address_ptr, buf, len, &done);\n+  else\n+    {\n+      WCHAR *unicode_address = (WCHAR *) alloca (len * sizeof (WCHAR));\n+      ReadProcessMemory (h, address_ptr, unicode_address, len * sizeof (WCHAR),\n+\t\t\t &done);\n+#ifdef __CYGWIN__\n+      wcstombs (buf, unicode_address, MAX_PATH);\n+#else\n+      WideCharToMultiByte (CP_ACP, 0, unicode_address, len, buf, sizeof buf,\n+\t\t\t   0, 0);\n+#endif\n+    }\n+\n+  return buf;\n+}\n+\n }"
    },
    {
      "sha": "4176ed7f66027c6ea9e4a622a398faf9fdc2a1dc",
      "filename": "gdb/nat/windows-nat.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d8679cc712d4c31d218cc141fe700d8e6394964/gdb/nat/windows-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d8679cc712d4c31d218cc141fe700d8e6394964/gdb/nat/windows-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.h?ref=9d8679cc712d4c31d218cc141fe700d8e6394964",
      "patch": "@@ -111,6 +111,13 @@ enum thread_disposition_type\n extern windows_thread_info *thread_rec (ptid_t ptid,\n \t\t\t\t\tthread_disposition_type disposition);\n \n+/* Return the name of the DLL referenced by H at ADDRESS.  UNICODE\n+   determines what sort of string is read from the inferior.  Returns\n+   the name of the DLL, or NULL on error.  If a name is returned, it\n+   is stored in a static buffer which is valid until the next call to\n+   get_image_name.  */\n+extern const char *get_image_name (HANDLE h, void *address, int unicode);\n+\n }\n \n #endif"
    },
    {
      "sha": "4180cb267fb84a48ada38e528b21a8639dcd916d",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 1,
      "deletions": 51,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d8679cc712d4c31d218cc141fe700d8e6394964/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d8679cc712d4c31d218cc141fe700d8e6394964/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=9d8679cc712d4c31d218cc141fe700d8e6394964",
      "patch": "@@ -921,56 +921,6 @@ windows_make_so (const char *name, LPVOID load_addr)\n   return so;\n }\n \n-static char *\n-get_image_name (HANDLE h, void *address, int unicode)\n-{\n-#ifdef __CYGWIN__\n-  static char buf[__PMAX];\n-#else\n-  static char buf[(2 * __PMAX) + 1];\n-#endif\n-  DWORD size = unicode ? sizeof (WCHAR) : sizeof (char);\n-  char *address_ptr;\n-  int len = 0;\n-  char b[2];\n-  SIZE_T done;\n-\n-  /* Attempt to read the name of the dll that was detected.\n-     This is documented to work only when actively debugging\n-     a program.  It will not work for attached processes.  */\n-  if (address == NULL)\n-    return NULL;\n-\n-  /* See if we could read the address of a string, and that the\n-     address isn't null.  */\n-  if (!ReadProcessMemory (h, address,  &address_ptr,\n-\t\t\t  sizeof (address_ptr), &done)\n-      || done != sizeof (address_ptr) || !address_ptr)\n-    return NULL;\n-\n-  /* Find the length of the string.  */\n-  while (ReadProcessMemory (h, address_ptr + len++ * size, &b, size, &done)\n-\t && (b[0] != 0 || b[size - 1] != 0) && done == size)\n-    continue;\n-\n-  if (!unicode)\n-    ReadProcessMemory (h, address_ptr, buf, len, &done);\n-  else\n-    {\n-      WCHAR *unicode_address = (WCHAR *) alloca (len * sizeof (WCHAR));\n-      ReadProcessMemory (h, address_ptr, unicode_address, len * sizeof (WCHAR),\n-\t\t\t &done);\n-#ifdef __CYGWIN__\n-      wcstombs (buf, unicode_address, __PMAX);\n-#else\n-      WideCharToMultiByte (CP_ACP, 0, unicode_address, len, buf, sizeof buf,\n-\t\t\t   0, 0);\n-#endif\n-    }\n-\n-  return buf;\n-}\n-\n /* Handle a DLL load event, and return 1.\n \n    This function assumes that this event did not occur during inferior\n@@ -982,7 +932,7 @@ static void\n handle_load_dll ()\n {\n   LOAD_DLL_DEBUG_INFO *event = &current_event.u.LoadDll;\n-  char *dll_name;\n+  const char *dll_name;\n \n   /* Try getting the DLL name via the lpImageName field of the event.\n      Note that Microsoft documents this fields as strictly optional,"
    },
    {
      "sha": "c6ad533f82b10b3aa21627554bb40c9011389931",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d8679cc712d4c31d218cc141fe700d8e6394964/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d8679cc712d4c31d218cc141fe700d8e6394964/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=9d8679cc712d4c31d218cc141fe700d8e6394964",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* win32-low.c (get_image_name): Remove.\n+\t(handle_load_dll): Update.\n+\n 2020-04-08  Tom Tromey  <tromey@adacore.com>\n \n \t* win32-low.c (windows_nat::thread_rec): Rename from thread_rec."
    },
    {
      "sha": "810896e87ca070d4853cecb5a4d66716f8ae239e",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 50,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9d8679cc712d4c31d218cc141fe700d8e6394964/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9d8679cc712d4c31d218cc141fe700d8e6394964/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=9d8679cc712d4c31d218cc141fe700d8e6394964",
      "patch": "@@ -1031,55 +1031,6 @@ win32_add_one_solib (const char *name, CORE_ADDR load_addr)\n   loaded_dll (buf2, load_addr);\n }\n \n-static char *\n-get_image_name (HANDLE h, void *address, int unicode)\n-{\n-  static char buf[(2 * MAX_PATH) + 1];\n-  DWORD size = unicode ? sizeof (WCHAR) : sizeof (char);\n-  char *address_ptr;\n-  int len = 0;\n-  char b[2];\n-  SIZE_T done;\n-\n-  /* Attempt to read the name of the dll that was detected.\n-     This is documented to work only when actively debugging\n-     a program.  It will not work for attached processes. */\n-  if (address == NULL)\n-    return NULL;\n-\n-#ifdef _WIN32_WCE\n-  /* Windows CE reports the address of the image name,\n-     instead of an address of a pointer into the image name.  */\n-  address_ptr = address;\n-#else\n-  /* See if we could read the address of a string, and that the\n-     address isn't null. */\n-  if (!ReadProcessMemory (h, address,  &address_ptr,\n-\t\t\t  sizeof (address_ptr), &done)\n-      || done != sizeof (address_ptr)\n-      || !address_ptr)\n-    return NULL;\n-#endif\n-\n-  /* Find the length of the string */\n-  while (ReadProcessMemory (h, address_ptr + len++ * size, &b, size, &done)\n-\t && (b[0] != 0 || b[size - 1] != 0) && done == size)\n-    continue;\n-\n-  if (!unicode)\n-    ReadProcessMemory (h, address_ptr, buf, len, &done);\n-  else\n-    {\n-      WCHAR *unicode_address = XALLOCAVEC (WCHAR, len);\n-      ReadProcessMemory (h, address_ptr, unicode_address, len * sizeof (WCHAR),\n-\t\t\t &done);\n-\n-      WideCharToMultiByte (CP_ACP, 0, unicode_address, len, buf, len, 0, 0);\n-    }\n-\n-  return buf;\n-}\n-\n typedef BOOL (WINAPI *winapi_EnumProcessModules) (HANDLE, HMODULE *,\n \t\t\t\t\t\t  DWORD, LPDWORD);\n typedef BOOL (WINAPI *winapi_GetModuleInformation) (HANDLE, HMODULE,\n@@ -1188,7 +1139,7 @@ static void\n handle_load_dll (void)\n {\n   LOAD_DLL_DEBUG_INFO *event = &current_event.u.LoadDll;\n-  char *dll_name;\n+  const char *dll_name;\n \n   dll_name = get_image_name (current_process_handle,\n \t\t\t     event->lpImageName, event->fUnicode);"
    }
  ]
}