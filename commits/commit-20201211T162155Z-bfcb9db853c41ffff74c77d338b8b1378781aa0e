{
  "sha": "bfcb9db853c41ffff74c77d338b8b1378781aa0e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmZjYjlkYjg1M2M0MWZmZmY3NGM3N2QzMzhiOGIxMzc4NzgxYWEwZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-11T16:21:53Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-11T16:21:55Z"
    },
    "message": "Remove scoped_inc_dec_ref\n\nWe can remove scoped_inc_dec_ref by changing the sole user to instead\nkeep a vector of thread_info_ref objects.  This removes some manual\nreference counting and simplifies the code a bit.\n\ngdb/ChangeLog\n2020-12-11  Tom Tromey  <tom@tromey.com>\n\n\t* thread.c (class scoped_inc_dec_ref): Remove.\n\t(tp_array_compar_ascending, tp_array_compar_descending): Change\n\tparameter types.\n\t(thread_apply_all_command): Use thread_info_ref.",
    "tree": {
      "sha": "528ca883d8200bcbbac7b80e2be980679cc8f4af",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/528ca883d8200bcbbac7b80e2be980679cc8f4af"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bfcb9db853c41ffff74c77d338b8b1378781aa0e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bfcb9db853c41ffff74c77d338b8b1378781aa0e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bfcb9db853c41ffff74c77d338b8b1378781aa0e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bfcb9db853c41ffff74c77d338b8b1378781aa0e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d634cd0bcef830f2c8b9a544f1f0621fa382e2cc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d634cd0bcef830f2c8b9a544f1f0621fa382e2cc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d634cd0bcef830f2c8b9a544f1f0621fa382e2cc"
    }
  ],
  "stats": {
    "total": 48,
    "additions": 14,
    "deletions": 34
  },
  "files": [
    {
      "sha": "691e583578fbfdb0a0701b76b2b9636a6ac4799d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bfcb9db853c41ffff74c77d338b8b1378781aa0e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bfcb9db853c41ffff74c77d338b8b1378781aa0e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bfcb9db853c41ffff74c77d338b8b1378781aa0e",
      "patch": "@@ -1,3 +1,10 @@\n+2020-12-11  Tom Tromey  <tom@tromey.com>\n+\n+\t* thread.c (class scoped_inc_dec_ref): Remove.\n+\t(tp_array_compar_ascending, tp_array_compar_descending): Change\n+\tparameter types.\n+\t(thread_apply_all_command): Use thread_info_ref.\n+\n 2020-12-11  Tom Tromey  <tom@tromey.com>\n \n \t* infrun.c (struct stop_context) <thread>: Now a thread_info_ref."
    },
    {
      "sha": "dd88f1238c4a6a581e26e00a19427050a664bfd0",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 7,
      "deletions": 34,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bfcb9db853c41ffff74c77d338b8b1378781aa0e/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bfcb9db853c41ffff74c77d338b8b1378781aa0e/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=bfcb9db853c41ffff74c77d338b8b1378781aa0e",
      "patch": "@@ -58,29 +58,6 @@ static int highest_thread_num;\n /* The current/selected thread.  */\n static thread_info *current_thread_;\n \n-/* RAII type used to increase / decrease the refcount of each thread\n-   in a given list of threads.  */\n-\n-class scoped_inc_dec_ref\n-{\n-public:\n-  explicit scoped_inc_dec_ref (const std::vector<thread_info *> &thrds)\n-    : m_thrds (thrds)\n-  {\n-    for (thread_info *thr : m_thrds)\n-      thr->incref ();\n-  }\n-\n-  ~scoped_inc_dec_ref ()\n-  {\n-    for (thread_info *thr : m_thrds)\n-      thr->decref ();\n-  }\n-\n-private:\n-  const std::vector<thread_info *> &m_thrds;\n-};\n-\n /* Returns true if THR is the current thread.  */\n \n static bool\n@@ -1468,7 +1445,7 @@ print_thread_id (struct thread_info *thr)\n    ascending order.  */\n \n static bool\n-tp_array_compar_ascending (const thread_info *a, const thread_info *b)\n+tp_array_compar_ascending (const thread_info_ref &a, const thread_info_ref &b)\n {\n   if (a->inf->num != b->inf->num)\n     return a->inf->num < b->inf->num;\n@@ -1481,7 +1458,7 @@ tp_array_compar_ascending (const thread_info *a, const thread_info *b)\n    descending order.  */\n \n static bool\n-tp_array_compar_descending (const thread_info *a, const thread_info *b)\n+tp_array_compar_descending (const thread_info_ref &a, const thread_info_ref &b)\n {\n   if (a->inf->num != b->inf->num)\n     return a->inf->num > b->inf->num;\n@@ -1619,27 +1596,23 @@ thread_apply_all_command (const char *cmd, int from_tty)\n \t thread, in case the command is one that wipes threads.  E.g.,\n \t detach, kill, disconnect, etc., or even normally continuing\n \t over an inferior or thread exit.  */\n-      std::vector<thread_info *> thr_list_cpy;\n+      std::vector<thread_info_ref> thr_list_cpy;\n       thr_list_cpy.reserve (tc);\n \n       for (thread_info *tp : all_non_exited_threads ())\n-\tthr_list_cpy.push_back (tp);\n+\tthr_list_cpy.push_back (thread_info_ref::new_reference (tp));\n       gdb_assert (thr_list_cpy.size () == tc);\n \n-      /* Increment the refcounts, and restore them back on scope\n-\t exit.  */\n-      scoped_inc_dec_ref inc_dec_ref (thr_list_cpy);\n-\n       auto *sorter = (ascending\n \t\t      ? tp_array_compar_ascending\n \t\t      : tp_array_compar_descending);\n       std::sort (thr_list_cpy.begin (), thr_list_cpy.end (), sorter);\n \n       scoped_restore_current_thread restore_thread;\n \n-      for (thread_info *thr : thr_list_cpy)\n-\tif (switch_to_thread_if_alive (thr))\n-\t  thr_try_catch_cmd (thr, cmd, from_tty, flags);\n+      for (thread_info_ref &thr : thr_list_cpy)\n+\tif (switch_to_thread_if_alive (thr.get ()))\n+\t  thr_try_catch_cmd (thr.get (), cmd, from_tty, flags);\n     }\n }\n "
    }
  ]
}