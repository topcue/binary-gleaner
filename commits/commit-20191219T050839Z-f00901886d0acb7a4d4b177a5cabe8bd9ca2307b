{
  "sha": "f00901886d0acb7a4d4b177a5cabe8bd9ca2307b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjAwOTAxODg2ZDBhY2I3YTRkNGIxNzdhNWNhYmU4YmQ5Y2EyMzA3Yg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-19T05:08:39Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-19T05:08:39Z"
    },
    "message": "vax decoding of indexed addressing mode\n\nThis patch prevents print_insn_mode recursing into another index mode\nbyte, which if repeated enough times will overflow private.the_buffer\nand scribble over other memory.\n\n\t* vax-dis.c (print_insn_mode): Stop index mode recursion.",
    "tree": {
      "sha": "5ed06c27df45ecc145c0562a7373db42b251bca5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5ed06c27df45ecc145c0562a7373db42b251bca5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f00901886d0acb7a4d4b177a5cabe8bd9ca2307b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f00901886d0acb7a4d4b177a5cabe8bd9ca2307b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f00901886d0acb7a4d4b177a5cabe8bd9ca2307b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f00901886d0acb7a4d4b177a5cabe8bd9ca2307b/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9ad9b810c385c83242a3100fa986d174c83ffe10",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9ad9b810c385c83242a3100fa986d174c83ffe10",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9ad9b810c385c83242a3100fa986d174c83ffe10"
    }
  ],
  "stats": {
    "total": 18,
    "additions": 16,
    "deletions": 2
  },
  "files": [
    {
      "sha": "49b94e3a34ebcb419292f0c600d34053cd9e0e9c",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f00901886d0acb7a4d4b177a5cabe8bd9ca2307b/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f00901886d0acb7a4d4b177a5cabe8bd9ca2307b/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=f00901886d0acb7a4d4b177a5cabe8bd9ca2307b",
      "patch": "@@ -1,3 +1,7 @@\n+2019-12-19  Alan Modra  <amodra@gmail.com>\n+\n+\t* vax-dis.c (print_insn_mode): Stop index mode recursion.\n+\n 2019-12-19  Dr N.W. Filardo  <nwf20@cam.ac.uk>\n \n \tPR 25277"
    },
    {
      "sha": "f88001584a44daa881f39872dfb0817e8ab9fee8",
      "filename": "opcodes/vax-dis.c",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f00901886d0acb7a4d4b177a5cabe8bd9ca2307b/opcodes/vax-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f00901886d0acb7a4d4b177a5cabe8bd9ca2307b/opcodes/vax-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/vax-dis.c?ref=f00901886d0acb7a4d4b177a5cabe8bd9ca2307b",
      "patch": "@@ -240,8 +240,18 @@ print_insn_mode (const char *d,\n         (*info->fprintf_func) (info->stream, \"$0x%x\", mode);\n       break;\n     case 0x40: /* Index:\t\t\tbase-addr[Rn] */\n-      p += print_insn_mode (d, size, p0 + 1, addr + 1, info);\n-      (*info->fprintf_func) (info->stream, \"[%s]\", reg_names[reg]);\n+      {\n+\tunsigned char *q = p0 + 1;\n+\tunsigned char nextmode = NEXTBYTE (q);\n+\tif (nextmode < 0x60 || nextmode == 0x8f)\n+\t  /* Literal, index, register, or immediate is invalid.  In\n+\t     particular don't recurse into another index mode which\n+\t     might overflow the_buffer.   */\n+\t  (*info->fprintf_func) (info->stream, \"[invalid base]\");\n+\telse\n+\t  p += print_insn_mode (d, size, p0 + 1, addr + 1, info);\n+\t(*info->fprintf_func) (info->stream, \"[%s]\", reg_names[reg]);\n+      }\n       break;\n     case 0x50: /* Register:\t\t\tRn */\n       (*info->fprintf_func) (info->stream, \"%s\", reg_names[reg]);"
    }
  ]
}