{
  "sha": "0c7af29227028f58dfe8ac7e6f0be19f87b9fe22",
  "node_id": "C_kwDOANOeidoAKDBjN2FmMjkyMjcwMjhmNThkZmU4YWM3ZTZmMGJlMTlmODdiOWZlMjI",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-11-10T19:15:02Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-11-10T19:16:40Z"
    },
    "message": "Handle PIE in .debug_loclists\n\nSimon pointed out that my recent patches to .debug_loclists caused\nsome regressions.  After a brief discussion we realized it was because\nhis system compiler defaults to PIE.\n\nThis patch changes this code to unconditionally apply the text offset\nhere.  It also changes loclist_describe_location to work more like\ndwarf2_find_location_expression.\n\nI tested this by running the gdb.dwarf2 tests both with and without\n-pie.",
    "tree": {
      "sha": "bd00d06f52ddfe4121d6e9e88f96002977482860",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bd00d06f52ddfe4121d6e9e88f96002977482860"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0c7af29227028f58dfe8ac7e6f0be19f87b9fe22",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0c7af29227028f58dfe8ac7e6f0be19f87b9fe22",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0c7af29227028f58dfe8ac7e6f0be19f87b9fe22",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0c7af29227028f58dfe8ac7e6f0be19f87b9fe22/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "14f458590a51e9922c03bbb16f7e733db8015f98",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14f458590a51e9922c03bbb16f7e733db8015f98",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/14f458590a51e9922c03bbb16f7e733db8015f98"
    }
  ],
  "stats": {
    "total": 31,
    "additions": 15,
    "deletions": 16
  },
  "files": [
    {
      "sha": "182f15e7077fbbfb333b61f538a0cdf6d41ed9f6",
      "filename": "gdb/dwarf2/loc.c",
      "status": "modified",
      "additions": 15,
      "deletions": 16,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0c7af29227028f58dfe8ac7e6f0be19f87b9fe22/gdb/dwarf2/loc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0c7af29227028f58dfe8ac7e6f0be19f87b9fe22/gdb/dwarf2/loc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/loc.c?ref=0c7af29227028f58dfe8ac7e6f0be19f87b9fe22",
      "patch": "@@ -356,9 +356,9 @@ dwarf2_find_location_expression (struct dwarf2_loclist_baton *baton,\n   enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n   unsigned int addr_size = baton->per_cu->addr_size ();\n   int signed_addr_p = bfd_get_sign_extend_vma (objfile->obfd);\n-  /* Adjust base_address for relocatable objects.  */\n-  CORE_ADDR base_offset = baton->per_objfile->objfile->text_section_offset ();\n-  CORE_ADDR base_address = baton->base_address + base_offset;\n+  /* Adjustment for relocatable objects.  */\n+  CORE_ADDR text_offset = baton->per_objfile->objfile->text_section_offset ();\n+  CORE_ADDR base_address = baton->base_address;\n   const gdb_byte *loc_ptr, *buf_end;\n \n   loc_ptr = baton->data;\n@@ -396,7 +396,7 @@ dwarf2_find_location_expression (struct dwarf2_loclist_baton *baton,\n \t  return NULL;\n \n \tcase DEBUG_LOC_BASE_ADDRESS:\n-\t  base_address = high + base_offset;\n+\t  base_address = high;\n \t  continue;\n \n \tcase DEBUG_LOC_START_END:\n@@ -416,17 +416,14 @@ dwarf2_find_location_expression (struct dwarf2_loclist_baton *baton,\n       /* Otherwise, a location expression entry.\n \t If the entry is from a DWO, don't add base address: the entry is from\n \t .debug_addr which already has the DWARF \"base address\". We still add\n-\t base_offset in case we're debugging a PIE executable. However, if the\n+\t text offset in case we're debugging a PIE executable. However, if the\n \t entry is DW_LLE_offset_pair from a DWO, add the base address as the\n \t operands are offsets relative to the applicable base address.\n \t If the entry is DW_LLE_start_end or DW_LLE_start_length, then\n \t it already is an address, and we don't need to add the base.  */\n-      if (baton->from_dwo && kind != DEBUG_LOC_OFFSET_PAIR)\n-\t{\n-\t  low += base_offset;\n-\t  high += base_offset;\n-\t}\n-      else if (kind == DEBUG_LOC_OFFSET_PAIR)\n+      low += text_offset;\n+      high += text_offset;\n+      if (!baton->from_dwo && kind == DEBUG_LOC_OFFSET_PAIR)\n \t{\n \t  low += base_address;\n \t  high += base_address;\n@@ -3925,9 +3922,9 @@ loclist_describe_location (struct symbol *symbol, CORE_ADDR addr,\n   unsigned int addr_size = dlbaton->per_cu->addr_size ();\n   int offset_size = dlbaton->per_cu->offset_size ();\n   int signed_addr_p = bfd_get_sign_extend_vma (objfile->obfd);\n-  /* Adjust base_address for relocatable objects.  */\n-  CORE_ADDR base_offset = objfile->text_section_offset ();\n-  CORE_ADDR base_address = dlbaton->base_address + base_offset;\n+  /* Adjustment for relocatable objects.  */\n+  CORE_ADDR text_offset = objfile->text_section_offset ();\n+  CORE_ADDR base_address = dlbaton->base_address;\n   int done = 0;\n \n   loc_ptr = dlbaton->data;\n@@ -3967,7 +3964,7 @@ loclist_describe_location (struct symbol *symbol, CORE_ADDR addr,\n \t  continue;\n \n \tcase DEBUG_LOC_BASE_ADDRESS:\n-\t  base_address = high + base_offset;\n+\t  base_address = high;\n \t  fprintf_filtered (stream, _(\"  Base address %s\"),\n \t\t\t    paddress (gdbarch, base_address));\n \t  continue;\n@@ -3987,7 +3984,9 @@ loclist_describe_location (struct symbol *symbol, CORE_ADDR addr,\n \t}\n \n       /* Otherwise, a location expression entry.  */\n-      if (kind == DEBUG_LOC_OFFSET_PAIR)\n+      low += text_offset;\n+      high += text_offset;\n+      if (!dlbaton->from_dwo && kind == DEBUG_LOC_OFFSET_PAIR)\n \t{\n \t  low += base_address;\n \t  high += base_address;"
    }
  ]
}