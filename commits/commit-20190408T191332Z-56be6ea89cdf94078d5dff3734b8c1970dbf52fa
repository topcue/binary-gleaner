{
  "sha": "56be6ea89cdf94078d5dff3734b8c1970dbf52fa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTZiZTZlYTg5Y2RmOTQwNzhkNWRmZjM3MzRiOGMxOTcwZGJmNTJmYQ==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-04-08T12:03:54Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-04-08T19:13:32Z"
    },
    "message": "Some gdb_exception{,error,quit} tweaks\n\n- Explicitly include <string> for std::string.\n\n- Use std::make_shared to construct gdb_exception::message instead of\n  operator new, avoiding one heap allocation (2 instead of 3).  Add\n  'const char *fmt, va_list ap' parameters to\n  gdb_exception{,error,quit}'s ctors, and do the std::make_shared in\n  the gdb_exception ctor.\n\n- gdb_exception_error's constructor does not need to have an 'enum\n  return_reason' parameter, since it is always RETURN_ERROR, by\n  definition.\n\n- Similarly, gdb_exception_quit's contructor does not need to have\n  'enum return_reason'/'enum errors' parameters.\n\n- In the gdb_exception_{quit,_error} ctors that take a gdb_exception\n  as argument, assert that they're being passed a gdb_exception object\n  of the right 'reason'.\n\ngdb/ChangeLog:\n2019-04-08  Pedro Alves  <palves@redhat.com>\n\n\t* common/common-exceptions.c (throw_exception): Don't create\n\tnamed object to throw; throw directly.\n\t(throw_it): Likewise.  Don't initialize gdb_exception::message\n\there, with new; pass FMT and AP to the ctor instead.\n\t* common/common-exceptions.h: Include <string>.\n\t(gdb_exception::gdb_exception(enum return_reason, enum errors,\n\tconst char *, va_list)): New ctor.  Use std::make_shared.\n\t(gdb_exception_error::gdb_exception_error(enum return_reason, enum\n\terrors)): Delete.\n\t(gdb_exception_error::gdb_exception_error(enum errors, const char\n\t*, va_list)): New.\n\t(gdb_exception_error::gdb_exception_error(const gdb_exception &)):\n\tAdd assertion.\n\t(gdb_exception_quit::gdb_exception_quit(enum return_reason, enum\n\terrors)): Delete.\n\t(gdb_exception_quit::gdb_exception_quit(const char *, va_list)): New.\n\t(gdb_exception_quit::gdb_exception_quit(const gdb_exception &)):\n\tAdd assertion.",
    "tree": {
      "sha": "72a8d6b1b905e36c0f59f3d522130598be0d221e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/72a8d6b1b905e36c0f59f3d522130598be0d221e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/56be6ea89cdf94078d5dff3734b8c1970dbf52fa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/56be6ea89cdf94078d5dff3734b8c1970dbf52fa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/56be6ea89cdf94078d5dff3734b8c1970dbf52fa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/56be6ea89cdf94078d5dff3734b8c1970dbf52fa/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3ae61bb67d62eb53d110835b8b7c3a289e6bce45",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3ae61bb67d62eb53d110835b8b7c3a289e6bce45",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3ae61bb67d62eb53d110835b8b7c3a289e6bce45"
    }
  ],
  "stats": {
    "total": 65,
    "additions": 43,
    "deletions": 22
  },
  "files": [
    {
      "sha": "9910952aa56cd8040ec655ecab63eca698894c75",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/56be6ea89cdf94078d5dff3734b8c1970dbf52fa/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/56be6ea89cdf94078d5dff3734b8c1970dbf52fa/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=56be6ea89cdf94078d5dff3734b8c1970dbf52fa",
      "patch": "@@ -1,3 +1,24 @@\n+2019-04-08  Pedro Alves  <palves@redhat.com>\n+\n+\t* common/common-exceptions.c (throw_exception): Don't create\n+\tnamed object to throw; throw directly.\n+\t(throw_it): Likewise.  Don't initialize gdb_exception::message\n+\there, with new; pass FMT and AP to the ctor instead.\n+\t* common/common-exceptions.h: Include <string>.\n+\t(gdb_exception::gdb_exception(enum return_reason, enum errors,\n+\tconst char *, va_list)): New ctor.  Use std::make_shared.\n+\t(gdb_exception_error::gdb_exception_error(enum return_reason, enum\n+\terrors)): Delete.\n+\t(gdb_exception_error::gdb_exception_error(enum errors, const char\n+\t*, va_list)): New.\n+\t(gdb_exception_error::gdb_exception_error(const gdb_exception &)):\n+\tAdd assertion.\n+\t(gdb_exception_quit::gdb_exception_quit(enum return_reason, enum\n+\terrors)): Delete.\n+\t(gdb_exception_quit::gdb_exception_quit(const char *, va_list)): New.\n+\t(gdb_exception_quit::gdb_exception_quit(const gdb_exception &)):\n+\tAdd assertion.\n+\n 2019-04-08  Tom Tromey  <tom@tromey.com>\n \n \t* valops.c (value_rtti_indirect_type): Replace throw_exception"
    },
    {
      "sha": "6378dc40d6d645456c4e5052adf6604f951ef273",
      "filename": "gdb/common/common-exceptions.c",
      "status": "modified",
      "additions": 4,
      "deletions": 18,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/56be6ea89cdf94078d5dff3734b8c1970dbf52fa/gdb/common/common-exceptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/56be6ea89cdf94078d5dff3734b8c1970dbf52fa/gdb/common/common-exceptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.c?ref=56be6ea89cdf94078d5dff3734b8c1970dbf52fa",
      "patch": "@@ -184,15 +184,9 @@ void\n throw_exception (const gdb_exception &exception)\n {\n   if (exception.reason == RETURN_QUIT)\n-    {\n-      gdb_exception_quit ex (exception);\n-      throw ex;\n-    }\n+    throw gdb_exception_quit (exception);\n   else if (exception.reason == RETURN_ERROR)\n-    {\n-      gdb_exception_error ex (exception);\n-      throw ex;\n-    }\n+    throw gdb_exception_error (exception);\n   else\n     gdb_assert_not_reached (\"invalid return reason\");\n }\n@@ -202,17 +196,9 @@ throw_it (enum return_reason reason, enum errors error, const char *fmt,\n \t  va_list ap)\n {\n   if (reason == RETURN_QUIT)\n-    {\n-      gdb_exception_quit ex (reason, error);\n-      ex.message.reset (new std::string (string_vprintf (fmt, ap)));\n-      throw ex;\n-    }\n+    throw gdb_exception_quit (fmt, ap);\n   else if (reason == RETURN_ERROR)\n-    {\n-      gdb_exception_error ex (reason, error);\n-      ex.message.reset (new std::string (string_vprintf (fmt, ap)));\n-      throw ex;\n-    }\n+    throw gdb_exception_error (error, fmt, ap);\n   else\n     gdb_assert_not_reached (\"invalid return reason\");\n }"
    },
    {
      "sha": "3f47caec7757ef88b5b5642db40edffc5f0f0a38",
      "filename": "gdb/common/common-exceptions.h",
      "status": "modified",
      "additions": 18,
      "deletions": 4,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/56be6ea89cdf94078d5dff3734b8c1970dbf52fa/gdb/common/common-exceptions.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/56be6ea89cdf94078d5dff3734b8c1970dbf52fa/gdb/common/common-exceptions.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.h?ref=56be6ea89cdf94078d5dff3734b8c1970dbf52fa",
      "patch": "@@ -23,6 +23,7 @@\n #include <setjmp.h>\n #include <new>\n #include <memory>\n+#include <string>\n \n /* Reasons for calling throw_exceptions().  NOTE: all reason values\n    must be different from zero.  enum value 0 is reserved for internal\n@@ -123,6 +124,15 @@ struct gdb_exception\n   {\n   }\n \n+  gdb_exception (enum return_reason r, enum errors e,\n+\t\t const char *fmt, va_list ap)\n+    ATTRIBUTE_PRINTF (4, 0)\n+    : reason (r),\n+      error (e),\n+      message (std::make_shared<std::string> (string_vprintf (fmt, ap)))\n+  {\n+  }\n+\n   /* The copy constructor exists so that we can mark it \"noexcept\",\n      which is a good practice for any sort of exception object.  */\n   gdb_exception (const gdb_exception &other) noexcept\n@@ -214,27 +224,31 @@ extern int exceptions_state_mc_catch (struct gdb_exception *, int);\n \n struct gdb_exception_error : public gdb_exception\n {\n-  gdb_exception_error (enum return_reason r, enum errors e)\n-    : gdb_exception (r, e)\n+  gdb_exception_error (enum errors e, const char *fmt, va_list ap)\n+    ATTRIBUTE_PRINTF (3, 0)\n+    : gdb_exception (RETURN_ERROR, e, fmt, ap)\n   {\n   }\n \n   explicit gdb_exception_error (const gdb_exception &ex) noexcept\n     : gdb_exception (ex)\n   {\n+    gdb_assert (ex.reason == RETURN_ERROR);\n   }\n };\n \n struct gdb_exception_quit : public gdb_exception\n {\n-  gdb_exception_quit (enum return_reason r, enum errors e)\n-    : gdb_exception (r, e)\n+  gdb_exception_quit (const char *fmt, va_list ap)\n+    ATTRIBUTE_PRINTF (2, 0)\n+    : gdb_exception (RETURN_QUIT, GDB_NO_ERROR, fmt, ap)\n   {\n   }\n \n   explicit gdb_exception_quit (const gdb_exception &ex) noexcept\n     : gdb_exception (ex)\n   {\n+    gdb_assert (ex.reason == RETURN_QUIT);\n   }\n };\n "
    }
  ]
}