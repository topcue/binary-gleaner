{
  "sha": "23dca5c3d77252ad8000d749b4457f7e286b8367",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjNkY2E1YzNkNzcyNTJhZDgwMDBkNzQ5YjQ0NTdmN2UyODZiODM2Nw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T00:49:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-30T02:29:07Z"
    },
    "message": "Add attribute::as_virtuality method\n\nThis adds a new attribute::as_virtuality method and changes the DWARF\nreader to use it.  This also ensures that the attibute's form will now\nbe respected.\n\ngdb/ChangeLog\n2020-09-29  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (dwarf2_add_field, dwarf2_add_member_fn): Update.\n\t* dwarf2/attribute.h (struct attribute) <as_virtuality>: New\n\tmethod.\n\t* dwarf2/attribute.c (attribute::as_virtuality): New method.",
    "tree": {
      "sha": "72773528073caf42d22c15e61fb9f0452857fa3c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/72773528073caf42d22c15e61fb9f0452857fa3c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/23dca5c3d77252ad8000d749b4457f7e286b8367",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/23dca5c3d77252ad8000d749b4457f7e286b8367",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/23dca5c3d77252ad8000d749b4457f7e286b8367",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/23dca5c3d77252ad8000d749b4457f7e286b8367/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "52c14d112840423f0515f7334063f532ec3950b1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/52c14d112840423f0515f7334063f532ec3950b1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/52c14d112840423f0515f7334063f532ec3950b1"
    }
  ],
  "stats": {
    "total": 39,
    "additions": 37,
    "deletions": 2
  },
  "files": [
    {
      "sha": "f21e549849a35776673194ee8f3774c4e657c6a9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/23dca5c3d77252ad8000d749b4457f7e286b8367/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/23dca5c3d77252ad8000d749b4457f7e286b8367/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=23dca5c3d77252ad8000d749b4457f7e286b8367",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-29  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (dwarf2_add_field, dwarf2_add_member_fn): Update.\n+\t* dwarf2/attribute.h (struct attribute) <as_virtuality>: New\n+\tmethod.\n+\t* dwarf2/attribute.c (attribute::as_virtuality): New method.\n+\n 2020-09-29  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/die.h (struct die_info) <addr_base, ranges_base>: Check"
    },
    {
      "sha": "95c5fe427f03a45e9dc7be974b041d6732052b0c",
      "filename": "gdb/dwarf2/attribute.c",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/23dca5c3d77252ad8000d749b4457f7e286b8367/gdb/dwarf2/attribute.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/23dca5c3d77252ad8000d749b4457f7e286b8367/gdb/dwarf2/attribute.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.c?ref=23dca5c3d77252ad8000d749b4457f7e286b8367",
      "patch": "@@ -222,3 +222,26 @@ attribute::defaulted () const\n \t       plongest (value));\n   return DW_DEFAULTED_no;\n }\n+\n+/* See attribute.h.  */\n+\n+dwarf_virtuality_attribute\n+attribute::as_virtuality () const\n+{\n+  LONGEST value = constant_value (-1);\n+\n+  switch (value)\n+    {\n+    case DW_VIRTUALITY_none:\n+    case DW_VIRTUALITY_virtual:\n+    case DW_VIRTUALITY_pure_virtual:\n+      return (dwarf_virtuality_attribute) value;\n+    }\n+\n+  /* If the form was not constant, we already complained in\n+     constant_value, so there's no need to complain again.  */\n+  if (form_is_constant ())\n+    complaint (_(\"unrecognized DW_AT_virtuality value (%s)\"),\n+\t       plongest (value));\n+  return DW_VIRTUALITY_none;\n+}"
    },
    {
      "sha": "8890fdba88e96ad1c319a5786607db9126121116",
      "filename": "gdb/dwarf2/attribute.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/23dca5c3d77252ad8000d749b4457f7e286b8367/gdb/dwarf2/attribute.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/23dca5c3d77252ad8000d749b4457f7e286b8367/gdb/dwarf2/attribute.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/attribute.h?ref=23dca5c3d77252ad8000d749b4457f7e286b8367",
      "patch": "@@ -258,6 +258,11 @@ struct attribute\n      returned.  */\n   dwarf_defaulted_attribute defaulted () const;\n \n+  /* Return the attribute's value as a dwarf_virtuality_attribute\n+     constant according to DWARF spec.  An unrecognized value will\n+     issue a complaint and return DW_VIRTUALITY_none.  */\n+  dwarf_virtuality_attribute as_virtuality () const;\n+\n   ENUM_BITFIELD(dwarf_attribute) name : 15;\n \n   /* A boolean that is used for forms that require reprocessing.  A"
    },
    {
      "sha": "6653aee1497e5192e32e933894915b9acf72ba80",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/23dca5c3d77252ad8000d749b4457f7e286b8367/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/23dca5c3d77252ad8000d749b4457f7e286b8367/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=23dca5c3d77252ad8000d749b4457f7e286b8367",
      "patch": "@@ -15021,7 +15021,7 @@ dwarf2_add_field (struct field_info *fip, struct die_info *die,\n \n   attr = dwarf2_attr (die, DW_AT_virtuality, cu);\n   if (attr != nullptr)\n-    new_field->virtuality = DW_UNSND (attr);\n+    new_field->virtuality = attr->as_virtuality ();\n   else\n     new_field->virtuality = DW_VIRTUALITY_none;\n \n@@ -15722,7 +15722,7 @@ dwarf2_add_member_fn (struct field_info *fip, struct die_info *die,\n   else\n     {\n       attr = dwarf2_attr (die, DW_AT_virtuality, cu);\n-      if (attr && DW_UNSND (attr))\n+      if (attr != nullptr && attr->as_virtuality () != DW_VIRTUALITY_none)\n \t{\n \t  /* GCC does this, as of 2008-08-25; PR debug/37237.  */\n \t  complaint (_(\"Member function \\\"%s\\\" (offset %s) is virtual \""
    }
  ]
}