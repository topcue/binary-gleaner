{
  "sha": "7ad417dd217849c164e3c8a250c62a98eb0b8cd4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2FkNDE3ZGQyMTc4NDljMTY0ZTNjOGEyNTBjNjJhOThlYjBiOGNkNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-23T16:11:51Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-23T16:59:10Z"
    },
    "message": "Have parser reset the innermost block tracker\n\nI ran across a comment in symfile.c today:\n\n  /* Clear globals which might have pointed into a removed objfile.\n     FIXME: It's not clear which of these are supposed to persist\n     between expressions and which ought to be reset each time.  */\n\nIt seems to me that this can be clarified: the parser entry points\nought to reset the innermost block tracker (and the expression context\nblock), and these should not be considered valid for code to use at\narbitrary times -- only immediately after an expression has been\nparsed.\n\nThis patch implements this idea.  This could be further improved by\nremoving the parser globals and changing the parser functions to\nreturn this information, but I have not done this.\n\nTested by the buildbot.\n\ngdb/ChangeLog\n2019-03-23  Tom Tromey  <tom@tromey.com>\n\n\t* varobj.c (varobj_create): Update.\n\t* symfile.c (clear_symtab_users): Don't reset innermost_block.\n\t* printcmd.c (display_command, do_one_display): Don't reset\n\tinnermost_block.\n\t* parser-defs.h (enum innermost_block_tracker_type): Move to\n\texpression.h.\n\t(innermost_block): Update comment.\n\t* parse.c (parse_exp_1): Add tracker_types parameter.\n\t(parse_exp_in_context): Rename from parse_exp_in_context_1.  Add\n\ttracker_types parameter.  Reset innermost_block.\n\t(parse_exp_in_context): Remove.\n\t(parse_expression_for_completion): Update.\n\t* objfiles.c (~objfile): Don't reset expression_context_block or\n\tinnermost_block.\n\t* expression.h (enum innermost_block_tracker_type): Move from\n\tparser-defs.h.\n\t(parse_exp_1): Add tracker_types parameter.\n\t* breakpoint.c (set_breakpoint_condition, watch_command_1): Don't\n\treset innermost_block.",
    "tree": {
      "sha": "7c5a868ea6aa91f34146092c15dd550986086218",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7c5a868ea6aa91f34146092c15dd550986086218"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7ad417dd217849c164e3c8a250c62a98eb0b8cd4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ad417dd217849c164e3c8a250c62a98eb0b8cd4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7ad417dd217849c164e3c8a250c62a98eb0b8cd4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b366c208ee07924cc3cafc1bd4d70548bc91075b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b366c208ee07924cc3cafc1bd4d70548bc91075b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b366c208ee07924cc3cafc1bd4d70548bc91075b"
    }
  ],
  "stats": {
    "total": 120,
    "additions": 60,
    "deletions": 60
  },
  "files": [
    {
      "sha": "ebc2fd9138635816277dc19718e4183d05530a0f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7ad417dd217849c164e3c8a250c62a98eb0b8cd4",
      "patch": "@@ -1,3 +1,25 @@\n+2019-03-23  Tom Tromey  <tom@tromey.com>\n+\n+\t* varobj.c (varobj_create): Update.\n+\t* symfile.c (clear_symtab_users): Don't reset innermost_block.\n+\t* printcmd.c (display_command, do_one_display): Don't reset\n+\tinnermost_block.\n+\t* parser-defs.h (enum innermost_block_tracker_type): Move to\n+\texpression.h.\n+\t(innermost_block): Update comment.\n+\t* parse.c (parse_exp_1): Add tracker_types parameter.\n+\t(parse_exp_in_context): Rename from parse_exp_in_context_1.  Add\n+\ttracker_types parameter.  Reset innermost_block.\n+\t(parse_exp_in_context): Remove.\n+\t(parse_expression_for_completion): Update.\n+\t* objfiles.c (~objfile): Don't reset expression_context_block or\n+\tinnermost_block.\n+\t* expression.h (enum innermost_block_tracker_type): Move from\n+\tparser-defs.h.\n+\t(parse_exp_1): Add tracker_types parameter.\n+\t* breakpoint.c (set_breakpoint_condition, watch_command_1): Don't\n+\treset innermost_block.\n+\n 2019-03-23  Tom Tromey  <tom@tromey.com>\n \n \t* objfiles.h: Include bcache.h."
    },
    {
      "sha": "855bd3811e21e8f09cd8c16eb2eddcfcb2ed5c13",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=7ad417dd217849c164e3c8a250c62a98eb0b8cd4",
      "patch": "@@ -880,7 +880,6 @@ set_breakpoint_condition (struct breakpoint *b, const char *exp,\n \t{\n \t  struct watchpoint *w = (struct watchpoint *) b;\n \n-\t  innermost_block.reset ();\n \t  arg = exp;\n \t  w->cond_exp = parse_exp_1 (&arg, 0, 0, 0);\n \t  if (*arg)\n@@ -10602,7 +10601,6 @@ watch_command_1 (const char *arg, int accessflag, int from_tty,\n   /* Parse the rest of the arguments.  From here on out, everything\n      is in terms of a newly allocated string instead of the original\n      ARG.  */\n-  innermost_block.reset ();\n   std::string expression (arg, exp_end - arg);\n   exp_start = arg = expression.c_str ();\n   expression_up exp = parse_exp_1 (&arg, 0, 0, 0);\n@@ -10664,7 +10662,6 @@ watch_command_1 (const char *arg, int accessflag, int from_tty,\n   toklen = end_tok - tok;\n   if (toklen >= 1 && strncmp (tok, \"if\", toklen) == 0)\n     {\n-      innermost_block.reset ();\n       tok = cond_start = end_tok + 1;\n       parse_exp_1 (&tok, 0, 0, 0);\n "
    },
    {
      "sha": "36f18be6af6ff43c827c23c2aee0695246e25a92",
      "filename": "gdb/expression.h",
      "status": "modified",
      "additions": 20,
      "deletions": 1,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/gdb/expression.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/gdb/expression.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expression.h?ref=7ad417dd217849c164e3c8a250c62a98eb0b8cd4",
      "patch": "@@ -23,6 +23,23 @@\n \n #include \"symtab.h\"\t\t/* Needed for \"struct block\" type.  */\n \n+/* While parsing expressions we need to track the innermost lexical block\n+   that we encounter.  In some situations we need to track the innermost\n+   block just for symbols, and in other situations we want to track the\n+   innermost block for symbols and registers.  These flags are used by the\n+   innermost block tracker to control which blocks we consider for the\n+   innermost block.  These flags can be combined together as needed.  */\n+\n+enum innermost_block_tracker_type\n+{\n+  /* Track the innermost block for symbols within an expression.  */\n+  INNERMOST_BLOCK_FOR_SYMBOLS = (1 << 0),\n+\n+  /* Track the innermost block for registers within an expression.  */\n+  INNERMOST_BLOCK_FOR_REGISTERS = (1 << 1)\n+};\n+DEF_ENUM_FLAGS_TYPE (enum innermost_block_tracker_type,\n+\t\t     innermost_block_tracker_types);\n \n /* Definitions for saved C expressions.  */\n \n@@ -105,7 +122,9 @@ extern struct type *parse_expression_for_completion\n     (const char *, gdb::unique_xmalloc_ptr<char> *, enum type_code *);\n \n extern expression_up parse_exp_1 (const char **, CORE_ADDR pc,\n-\t\t\t\t  const struct block *, int);\n+\t\t\t\t  const struct block *, int,\n+\t\t\t\t  innermost_block_tracker_types\n+\t\t\t\t    = INNERMOST_BLOCK_FOR_SYMBOLS);\n \n /* For use by parsers; set if we want to parse an expression and\n    attempt completion.  */"
    },
    {
      "sha": "1c95e068842a7ee353fe448bf8cbf2b6a8a7fbcb",
      "filename": "gdb/objfiles.c",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/gdb/objfiles.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/gdb/objfiles.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.c?ref=7ad417dd217849c164e3c8a250c62a98eb0b8cd4",
      "patch": "@@ -670,12 +670,6 @@ objfile::~objfile ()\n      for example), so we need to call this here.  */\n   clear_pc_function_cache ();\n \n-  /* Clear globals which might have pointed into a removed objfile.\n-     FIXME: It's not clear which of these are supposed to persist\n-     between expressions and which ought to be reset each time.  */\n-  expression_context_block = NULL;\n-  innermost_block.reset ();\n-\n   /* Check to see if the current_source_symtab belongs to this objfile,\n      and if so, call clear_current_source_symtab_and_line.  */\n "
    },
    {
      "sha": "c76e0d52c9048c92a0da5a72452bffbf7edca1b8",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 12,
      "deletions": 19,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=7ad417dd217849c164e3c8a250c62a98eb0b8cd4",
      "patch": "@@ -116,10 +116,8 @@ static int prefixify_subexp (struct expression *, struct expression *, int,\n \n static expression_up parse_exp_in_context (const char **, CORE_ADDR,\n \t\t\t\t\t   const struct block *, int,\n-\t\t\t\t\t   int, int *);\n-static expression_up parse_exp_in_context_1 (const char **, CORE_ADDR,\n-\t\t\t\t\t     const struct block *, int,\n-\t\t\t\t\t     int, int *);\n+\t\t\t\t\t   int, int *,\n+\t\t\t\t\t   innermost_block_tracker_types);\n \n /* Documented at it's declaration.  */\n \n@@ -1095,18 +1093,10 @@ prefixify_subexp (struct expression *inexpr,\n \n expression_up\n parse_exp_1 (const char **stringptr, CORE_ADDR pc, const struct block *block,\n-\t     int comma)\n+\t     int comma, innermost_block_tracker_types tracker_types)\n {\n-  return parse_exp_in_context (stringptr, pc, block, comma, 0, NULL);\n-}\n-\n-static expression_up\n-parse_exp_in_context (const char **stringptr, CORE_ADDR pc,\n-\t\t      const struct block *block,\n-\t\t      int comma, int void_context_p, int *out_subexp)\n-{\n-  return parse_exp_in_context_1 (stringptr, pc, block, comma,\n-\t\t\t\t void_context_p, out_subexp);\n+  return parse_exp_in_context (stringptr, pc, block, comma, 0, NULL,\n+\t\t\t       tracker_types);\n }\n \n /* As for parse_exp_1, except that if VOID_CONTEXT_P, then\n@@ -1117,9 +1107,10 @@ parse_exp_in_context (const char **stringptr, CORE_ADDR pc,\n    is left untouched.  */\n \n static expression_up\n-parse_exp_in_context_1 (const char **stringptr, CORE_ADDR pc,\n-\t\t\tconst struct block *block,\n-\t\t\tint comma, int void_context_p, int *out_subexp)\n+parse_exp_in_context (const char **stringptr, CORE_ADDR pc,\n+\t\t      const struct block *block,\n+\t\t      int comma, int void_context_p, int *out_subexp,\n+\t\t      innermost_block_tracker_types tracker_types)\n {\n   const struct language_defn *lang = NULL;\n   int subexp;\n@@ -1132,6 +1123,7 @@ parse_exp_in_context_1 (const char **stringptr, CORE_ADDR pc,\n   expout_last_struct = -1;\n   expout_tag_completion_type = TYPE_CODE_UNDEF;\n   expout_completion_name.reset ();\n+  innermost_block.reset (tracker_types);\n \n   comma_terminates = comma;\n \n@@ -1286,7 +1278,8 @@ parse_expression_for_completion (const char *string,\n   TRY\n     {\n       parse_completion = 1;\n-      exp = parse_exp_in_context (&string, 0, 0, 0, 0, &subexp);\n+      exp = parse_exp_in_context (&string, 0, 0, 0, 0, &subexp,\n+\t\t\t\t  INNERMOST_BLOCK_FOR_SYMBOLS);\n     }\n   CATCH (except, RETURN_MASK_ERROR)\n     {"
    },
    {
      "sha": "26e0a836c11fb5b409fee3ec906e6192dfa9f4cd",
      "filename": "gdb/parser-defs.h",
      "status": "modified",
      "additions": 3,
      "deletions": 20,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/gdb/parser-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/gdb/parser-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parser-defs.h?ref=7ad417dd217849c164e3c8a250c62a98eb0b8cd4",
      "patch": "@@ -75,24 +75,6 @@ extern const struct block *expression_context_block;\n    then look up the macro definitions active at that point.  */\n extern CORE_ADDR expression_context_pc;\n \n-/* While parsing expressions we need to track the innermost lexical block\n-   that we encounter.  In some situations we need to track the innermost\n-   block just for symbols, and in other situations we want to track the\n-   innermost block for symbols and registers.  These flags are used by the\n-   innermost block tracker to control which blocks we consider for the\n-   innermost block.  These flags can be combined together as needed.  */\n-\n-enum innermost_block_tracker_type\n-{\n-  /* Track the innermost block for symbols within an expression.  */\n-  INNERMOST_BLOCK_FOR_SYMBOLS = (1 << 0),\n-\n-  /* Track the innermost block for registers within an expression.  */\n-  INNERMOST_BLOCK_FOR_REGISTERS = (1 << 1)\n-};\n-DEF_ENUM_FLAGS_TYPE (enum innermost_block_tracker_type,\n-\t\t     innermost_block_tracker_types);\n-\n /* When parsing expressions we track the innermost block that was\n    referenced.  */\n \n@@ -146,8 +128,9 @@ class innermost_block_tracker\n };\n \n /* The innermost context required by the stack and register variables\n-   we've encountered so far.  This should be cleared before parsing an\n-   expression, and queried once the parse is complete.  */\n+   we've encountered so far.  This is cleared by the expression\n+   parsing functions before parsing an expression, and can queried\n+   once the parse is complete.  */\n extern innermost_block_tracker innermost_block;\n \n /* Number of arguments seen so far in innermost function call.  */"
    },
    {
      "sha": "e3f2f2e591cb209ac2b9a8dd3d49c5d855c26573",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=7ad417dd217849c164e3c8a250c62a98eb0b8cd4",
      "patch": "@@ -1715,7 +1715,6 @@ display_command (const char *arg, int from_tty)\n       fmt.raw = 0;\n     }\n \n-  innermost_block.reset ();\n   expression_up expr = parse_expression (exp);\n \n   newobj = new display ();\n@@ -1883,7 +1882,6 @@ do_one_display (struct display *d)\n \n       TRY\n \t{\n-\t  innermost_block.reset ();\n \t  d->exp = parse_expression (d->exp_string);\n \t  d->block = innermost_block.block ();\n \t}"
    },
    {
      "sha": "dbfc306c5215408518e751e0bcefbc6e1f0abff6",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=7ad417dd217849c164e3c8a250c62a98eb0b8cd4",
      "patch": "@@ -2901,12 +2901,6 @@ clear_symtab_users (symfile_add_flags add_flags)\n   clear_pc_function_cache ();\n   gdb::observers::new_objfile.notify (NULL);\n \n-  /* Clear globals which might have pointed into a removed objfile.\n-     FIXME: It's not clear which of these are supposed to persist\n-     between expressions and which ought to be reset each time.  */\n-  expression_context_block = NULL;\n-  innermost_block.reset ();\n-\n   /* Varobj may refer to old symbols, perform a cleanup.  */\n   varobj_invalidate ();\n "
    },
    {
      "sha": "b2975be6b774703587725b9e9465c9b78c2431ca",
      "filename": "gdb/varobj.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/gdb/varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7ad417dd217849c164e3c8a250c62a98eb0b8cd4/gdb/varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/varobj.c?ref=7ad417dd217849c164e3c8a250c62a98eb0b8cd4",
      "patch": "@@ -309,13 +309,13 @@ varobj_create (const char *objname,\n \t}\n \n       p = expression;\n-      innermost_block.reset (INNERMOST_BLOCK_FOR_SYMBOLS\n-\t\t\t     | INNERMOST_BLOCK_FOR_REGISTERS);\n       /* Wrap the call to parse expression, so we can \n          return a sensible error.  */\n       TRY\n \t{\n-\t  var->root->exp = parse_exp_1 (&p, pc, block, 0);\n+\t  var->root->exp = parse_exp_1 (&p, pc, block, 0,\n+\t\t\t\t\tINNERMOST_BLOCK_FOR_SYMBOLS\n+\t\t\t\t\t| INNERMOST_BLOCK_FOR_REGISTERS);\n \t}\n \n       CATCH (except, RETURN_MASK_ERROR)"
    }
  ]
}