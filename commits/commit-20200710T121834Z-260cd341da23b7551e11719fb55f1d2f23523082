{
  "sha": "260cd341da23b7551e11719fb55f1d2f23523082",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjYwY2QzNDFkYTIzYjc1NTFlMTE3MTlmYjU1ZjFkMmYyMzUyMzA4Mg==",
  "commit": {
    "author": {
      "name": "Lili Cui",
      "email": "lili.cui@intel.com",
      "date": "2020-07-10T12:17:29Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-07-10T12:18:34Z"
    },
    "message": "x86: Add support for Intel AMX instructions\n\ngas/\n\n\t* doc/c-i386.texi: Document amx_int8, amx_bf16 and amx_tile.\n\t* config/tc-i386.c (i386_error): Add invalid_sib_address.\n\t(cpu_arch): Add .amx_int8, .amx_bf16 and .amx_tile.\n\t(cpu_noarch): Add noamx_int8, noamx_bf16 and noamx_tile.\n\t(match_simd_size): Add tmmword check.\n\t(operand_type_match): Add tmmword.\n\t(type_names): Add rTMM.\n\t(i386_error): Add invalid_tmm_register_set.\n\t(check_VecOperands): Handle invalid_sib_address and\n\tinvalid_tmm_register_set.\n\t(match_template): Handle invalid_sib_address.\n\t(build_modrm_byte): Handle non-vector SIB and zmmword.\n\t(i386_index_check): Disallow RegIP for non-vector SIB.\n\t(check_register): Handle zmmword.\n\t* testsuite/gas/i386/i386.exp: Add AMX new tests.\n\t* testsuite/gas/i386/intel-regs.d: Add tmm.\n\t* testsuite/gas/i386/intel-regs.s: Add tmm.\n\t* testsuite/gas/i386/x86-64-amx-intel.d: New.\n\t* testsuite/gas/i386/x86-64-amx-inval.l: New.\n\t* testsuite/gas/i386/x86-64-amx-inval.s: New.\n\t* testsuite/gas/i386/x86-64-amx.d: New.\n\t* testsuite/gas/i386/x86-64-amx.s: New.\n\t* testsuite/gas/i386/x86-64-amx-bad.d: New.\n\t* testsuite/gas/i386/x86-64-amx-bad.s: New.\n\nopcodes/\n\n\t* i386-dis.c (TMM): New.\n\t(EXtmm): Likewise.\n\t(VexTmm): Likewise.\n\t(MVexSIBMEM): Likewise.\n\t(tmm_mode): Likewise.\n\t(vex_sibmem_mode): Likewise.\n\t(REG_VEX_0F3849_X86_64_P_0_W_0_M_1): Likewise.\n\t(MOD_VEX_0F3849_X86_64_P_0_W_0): Likewise.\n\t(MOD_VEX_0F3849_X86_64_P_2_W_0): Likewise.\n\t(MOD_VEX_0F3849_X86_64_P_3_W_0): Likewise.\n\t(MOD_VEX_0F384B_X86_64_P_1_W_0): Likewise.\n\t(MOD_VEX_0F384B_X86_64_P_2_W_0): Likewise.\n\t(MOD_VEX_0F384B_X86_64_P_3_W_0): Likewise.\n\t(MOD_VEX_0F385C_X86_64_P_1_W_0): Likewise.\n\t(MOD_VEX_0F385E_X86_64_P_0_W_0): Likewise.\n\t(MOD_VEX_0F385E_X86_64_P_1_W_0): Likewise.\n\t(MOD_VEX_0F385E_X86_64_P_2_W_0): Likewise.\n\t(MOD_VEX_0F385E_X86_64_P_3_W_0): Likewise.\n\t(RM_VEX_0F3849_X86_64_P_0_W_0_M_1_R_0): Likewise.\n\t(PREFIX_VEX_0F3849_X86_64): Likewise.\n\t(PREFIX_VEX_0F384B_X86_64): Likewise.\n\t(PREFIX_VEX_0F385C_X86_64): Likewise.\n\t(PREFIX_VEX_0F385E_X86_64): Likewise.\n\t(X86_64_VEX_0F3849): Likewise.\n\t(X86_64_VEX_0F384B): Likewise.\n\t(X86_64_VEX_0F385C): Likewise.\n\t(X86_64_VEX_0F385E): Likewise.\n\t(VEX_LEN_0F3849_X86_64_P_0_W_0_M_0): Likewise.\n\t(VEX_LEN_0F3849_X86_64_P_0_W_0_M_1_REG_0_RM_0): Likewise.\n\t(VEX_LEN_0F3849_X86_64_P_2_W_0_M_0): Likewise.\n\t(VEX_LEN_0F3849_X86_64_P_3_W_0_M_0): Likewise.\n\t(VEX_LEN_0F384B_X86_64_P_1_W_0_M_0): Likewise.\n\t(VEX_LEN_0F384B_X86_64_P_2_W_0_M_0): Likewise.\n\t(VEX_LEN_0F384B_X86_64_P_3_W_0_M_0): Likewise.\n\t(VEX_LEN_0F385C_X86_64_P_1_W_0_M_0): Likewise.\n\t(VEX_LEN_0F385E_X86_64_P_0_W_0_M_0): Likewise.\n\t(VEX_LEN_0F385E_X86_64_P_1_W_0_M_0): Likewise.\n\t(VEX_LEN_0F385E_X86_64_P_2_W_0_M_0): Likewise.\n\t(VEX_LEN_0F385E_X86_64_P_3_W_0_M_0): Likewise.\n\t(VEX_W_0F3849_X86_64_P_0): Likewise.\n\t(VEX_W_0F3849_X86_64_P_2): Likewise.\n\t(VEX_W_0F3849_X86_64_P_3): Likewise.\n\t(VEX_W_0F384B_X86_64_P_1): Likewise.\n\t(VEX_W_0F384B_X86_64_P_2): Likewise.\n\t(VEX_W_0F384B_X86_64_P_3): Likewise.\n\t(VEX_W_0F385C_X86_64_P_1): Likewise.\n\t(VEX_W_0F385E_X86_64_P_0): Likewise.\n\t(VEX_W_0F385E_X86_64_P_1): Likewise.\n\t(VEX_W_0F385E_X86_64_P_2): Likewise.\n\t(VEX_W_0F385E_X86_64_P_3): Likewise.\n\t(names_tmm): Likewise.\n\t(att_names_tmm): Likewise.\n\t(intel_operand_size): Handle void_mode.\n\t(OP_XMM): Handle tmm_mode.\n\t(OP_EX): Likewise.\n\t(OP_VEX): Likewise.\n\t* i386-gen.c (cpu_flag_init): Add entries for CpuAMX_INT8,\n\tCpuAMX_BF16 and CpuAMX_TILE.\n\t(operand_type_shorthands): Add RegTMM.\n\t(operand_type_init): Likewise.\n\t(operand_types): Add Tmmword.\n\t(cpu_flag_init): Add CPU_AMX_INT8, CpuAMX_BF16 and CpuAMX_TILE.\n\t(cpu_flags): Add CpuAMX_INT8, CpuAMX_BF16 and CpuAMX_TILE.\n\t* i386-opc.h (CpuAMX_INT8): New.\n\t(CpuAMX_BF16): Likewise.\n\t(CpuAMX_TILE): Likewise.\n\t(SIBMEM): Likewise.\n\t(Tmmword): Likewise.\n\t(i386_cpu_flags): Add cpuamx_int8, cpuamx_bf16 and cpuamx_tile.\n\t(i386_opcode_modifier): Extend width of fields vexvvvv and sib.\n\t(i386_operand_type): Add tmmword.\n\t* i386-opc.tbl: Add AMX instructions.\n\t* i386-reg.tbl: Add AMX registers.\n\t* i386-init.h: Regenerated.\n\t* i386-tbl.h: Likewise.",
    "tree": {
      "sha": "f03e517ffdaf36cf7ab838b48374b2e9905d3c1b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f03e517ffdaf36cf7ab838b48374b2e9905d3c1b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/260cd341da23b7551e11719fb55f1d2f23523082",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/260cd341da23b7551e11719fb55f1d2f23523082",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/260cd341da23b7551e11719fb55f1d2f23523082",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/260cd341da23b7551e11719fb55f1d2f23523082/comments",
  "author": {
    "login": "cuilili8868",
    "id": 54013017,
    "node_id": "MDQ6VXNlcjU0MDEzMDE3",
    "avatar_url": "https://avatars.githubusercontent.com/u/54013017?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cuilili8868",
    "html_url": "https://github.com/cuilili8868",
    "followers_url": "https://api.github.com/users/cuilili8868/followers",
    "following_url": "https://api.github.com/users/cuilili8868/following{/other_user}",
    "gists_url": "https://api.github.com/users/cuilili8868/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cuilili8868/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cuilili8868/subscriptions",
    "organizations_url": "https://api.github.com/users/cuilili8868/orgs",
    "repos_url": "https://api.github.com/users/cuilili8868/repos",
    "events_url": "https://api.github.com/users/cuilili8868/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cuilili8868/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "af2b31864802e6ca75b2c98ce4a4a7deb9d5c608",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/af2b31864802e6ca75b2c98ce4a4a7deb9d5c608",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/af2b31864802e6ca75b2c98ce4a4a7deb9d5c608"
    }
  ],
  "stats": {
    "total": 29862,
    "additions": 15523,
    "deletions": 14339
  },
  "files": [
    {
      "sha": "bd4c465201d080d16c38ed133dc5b5112aec2cf3",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -1,3 +1,31 @@\n+2020-07-10  Lili Cui  <lili.cui@intel.com>\n+\n+\t* NEWS: Mention support for Intel AMX instructions.\n+\t* config/tc-i386.c (i386_error): Add invalid_sib_address.\n+\t(cpu_arch): Add .amx_int8, .amx_bf16 and .amx_tile.\n+\t(cpu_noarch): Add noamx_int8, noamx_bf16 and noamx_tile.\n+\t(match_simd_size): Add tmmword check.\n+\t(operand_type_match): Add tmmword.\n+\t(type_names): Add rTMM.\n+\t(i386_error): Add invalid_tmm_register_set.\n+\t(check_VecOperands): Handle invalid_sib_address and\n+\tinvalid_tmm_register_set.\n+\t(match_template): Handle invalid_sib_address.\n+\t(build_modrm_byte): Handle non-vector SIB and zmmword.\n+\t(i386_index_check): Disallow RegIP for non-vector SIB.\n+\t(check_register): Handle zmmword.\n+\t* doc/c-i386.texi: Document amx_int8, amx_bf16 and amx_tile.\n+\t* testsuite/gas/i386/i386.exp: Add AMX new tests.\n+\t* testsuite/gas/i386/intel-regs.d: Add tmm.\n+\t* testsuite/gas/i386/intel-regs.s: Add tmm.\n+\t* testsuite/gas/i386/x86-64-amx-intel.d: New.\n+\t* testsuite/gas/i386/x86-64-amx-inval.l: New.\n+\t* testsuite/gas/i386/x86-64-amx-inval.s: New.\n+\t* testsuite/gas/i386/x86-64-amx.d: New.\n+\t* testsuite/gas/i386/x86-64-amx.s: New.\n+\t* testsuite/gas/i386/x86-64-amx-bad.d: New.\n+\t* testsuite/gas/i386/x86-64-amx-bad.s: New.\n+\n 2020-07-10  Tom de Vries  <tdevries@suse.de>\n \n \t* testsuite/gas/elf/dwarf2-11.d: Update expected output from"
    },
    {
      "sha": "272fe5dfa166538efa1f2af7372e62ab9d9bf813",
      "filename": "gas/NEWS",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/gas/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/gas/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/NEWS?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -1,5 +1,7 @@\n -*- text -*-\n \n+* Add support for Intel AMX instructions.\n+\n * Configure with --enable-x86-used-note by default for Linux/x86.\n \n Changes in 2.35:"
    },
    {
      "sha": "0e4291499b17ffe25ceafa3f517afab6da5532d5",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 84,
      "deletions": 13,
      "changes": 97,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -290,8 +290,10 @@ enum i386_error\n     unsupported_with_intel_mnemonic,\n     unsupported_syntax,\n     unsupported,\n+    invalid_sib_address,\n     invalid_vsib_address,\n     invalid_vector_register_set,\n+    invalid_tmm_register_set,\n     unsupported_vector_index_register,\n     unsupported_broadcast,\n     broadcast_needed,\n@@ -372,6 +374,9 @@ struct _i386_insn\n     /* Has ZMM register operands.  */\n     bfd_boolean has_regzmm;\n \n+    /* Has TMM register operands.  */\n+    bfd_boolean has_regtmm;\n+\n     /* Has GOTPC or TLS relocation.  */\n     bfd_boolean has_gotpc_tls_reloc;\n \n@@ -1201,6 +1206,12 @@ static const arch_entry cpu_arch[] =\n     CPU_WAITPKG_FLAGS, 0 },\n   { STRING_COMMA_LEN (\".cldemote\"), PROCESSOR_UNKNOWN,\n     CPU_CLDEMOTE_FLAGS, 0 },\n+  { STRING_COMMA_LEN (\".amx_int8\"), PROCESSOR_UNKNOWN,\n+    CPU_AMX_INT8_FLAGS, 0 },\n+  { STRING_COMMA_LEN (\".amx_bf16\"), PROCESSOR_UNKNOWN,\n+    CPU_AMX_BF16_FLAGS, 0 },\n+  { STRING_COMMA_LEN (\".amx_tile\"), PROCESSOR_UNKNOWN,\n+    CPU_AMX_TILE_FLAGS, 0 },\n   { STRING_COMMA_LEN (\".movdiri\"), PROCESSOR_UNKNOWN,\n     CPU_MOVDIRI_FLAGS, 0 },\n   { STRING_COMMA_LEN (\".movdir64b\"), PROCESSOR_UNKNOWN,\n@@ -1259,6 +1270,9 @@ static const noarch_entry cpu_noarch[] =\n   { STRING_COMMA_LEN (\"noavx512_bitalg\"), CPU_ANY_AVX512_BITALG_FLAGS },\n   { STRING_COMMA_LEN (\"noibt\"), CPU_ANY_IBT_FLAGS },\n   { STRING_COMMA_LEN (\"noshstk\"), CPU_ANY_SHSTK_FLAGS },\n+  { STRING_COMMA_LEN (\"noamx_int8\"), CPU_ANY_AMX_INT8_FLAGS },\n+  { STRING_COMMA_LEN (\"noamx_bf16\"), CPU_ANY_AMX_BF16_FLAGS },\n+  { STRING_COMMA_LEN (\"noamx_tile\"), CPU_ANY_AMX_TILE_FLAGS },\n   { STRING_COMMA_LEN (\"nomovdiri\"), CPU_ANY_MOVDIRI_FLAGS },\n   { STRING_COMMA_LEN (\"nomovdir64b\"), CPU_ANY_MOVDIR64B_FLAGS },\n   { STRING_COMMA_LEN (\"noavx512_bf16\"), CPU_ANY_AVX512_BF16_FLAGS },\n@@ -2159,7 +2173,9 @@ match_simd_size (const insn_template *t, unsigned int wanted,\n \t   || (i.types[given].bitfield.ymmword\n \t       && !t->operand_types[wanted].bitfield.ymmword)\n \t   || (i.types[given].bitfield.zmmword\n-\t       && !t->operand_types[wanted].bitfield.zmmword));\n+\t       && !t->operand_types[wanted].bitfield.zmmword)\n+\t   || (i.types[given].bitfield.tmmword\n+\t       && !t->operand_types[wanted].bitfield.tmmword));\n }\n \n /* Return 1 if there is no conflict in any size between operand GIVEN\n@@ -2296,6 +2312,7 @@ operand_type_match (i386_operand_type overlap,\n   temp.bitfield.xmmword = 0;\n   temp.bitfield.ymmword = 0;\n   temp.bitfield.zmmword = 0;\n+  temp.bitfield.tmmword = 0;\n   if (operand_type_all_zero (&temp))\n     goto mismatch;\n \n@@ -3304,6 +3321,7 @@ const type_names[] =\n   { OPERAND_TYPE_REGXMM, \"rXMM\" },\n   { OPERAND_TYPE_REGYMM, \"rYMM\" },\n   { OPERAND_TYPE_REGZMM, \"rZMM\" },\n+  { OPERAND_TYPE_REGTMM, \"rTMM\" },\n   { OPERAND_TYPE_REGMASK, \"Mask reg\" },\n };\n \n@@ -5790,7 +5808,7 @@ check_VecOperands (const insn_template *t)\n \n   /* For VSIB byte, we need a vector register for index, and all vector\n      registers must be distinct.  */\n-  if (t->opcode_modifier.sib)\n+  if (t->opcode_modifier.sib && t->opcode_modifier.sib != SIBMEM)\n     {\n       if (!i.index_reg\n \t  || !((t->opcode_modifier.sib == VECSIB128\n@@ -5849,6 +5867,23 @@ check_VecOperands (const insn_template *t)\n \t}\n     }\n \n+  /* For AMX instructions with three tmmword operands, all tmmword operand must be\n+     distinct */\n+  if (t->operand_types[0].bitfield.tmmword\n+      && i.reg_operands == 3)\n+    {\n+      if (register_number (i.op[0].regs)\n+          == register_number (i.op[1].regs)\n+          || register_number (i.op[0].regs)\n+             == register_number (i.op[2].regs)\n+          || register_number (i.op[1].regs)\n+             == register_number (i.op[2].regs))\n+\t{\n+\t  i.error = invalid_tmm_register_set;\n+\t  return 1;\n+\t}\n+    }\n+\n   /* Check if broadcast is supported by the instruction and is applied\n      to the memory operand.  */\n   if (i.broadcast)\n@@ -6584,12 +6619,18 @@ match_template (char mnem_suffix)\n \t  as_bad (_(\"unsupported instruction `%s'\"),\n \t\t  current_templates->start->name);\n \t  return NULL;\n+\tcase invalid_sib_address:\n+\t  err_msg = _(\"invalid SIB address\");\n+\t  break;\n \tcase invalid_vsib_address:\n \t  err_msg = _(\"invalid VSIB address\");\n \t  break;\n \tcase invalid_vector_register_set:\n \t  err_msg = _(\"mask, index, and destination registers must be distinct\");\n \t  break;\n+\tcase invalid_tmm_register_set:\n+\t  err_msg = _(\"all tmm registers must be distinct\");\n+\t  break;\n \tcase unsupported_vector_index_register:\n \t  err_msg = _(\"unsupported vector index register\");\n \t  break;\n@@ -7923,8 +7964,11 @@ build_modrm_byte (void)\n \t  else if (i.op[dest].regs->reg_type.bitfield.class == RegSIMD\n \t\t   || i.op[source].regs->reg_type.bitfield.class == RegSIMD)\n \t    {\n-\t      if (i.types[dest].bitfield.zmmword\n-\t\t  || i.types[source].bitfield.zmmword)\n+\t      if (i.types[dest].bitfield.tmmword\n+\t\t  || i.types[source].bitfield.tmmword)\n+\t\ti.has_regtmm = TRUE;\n+\t      else if (i.types[dest].bitfield.zmmword\n+\t\t       || i.types[source].bitfield.zmmword)\n \t\ti.has_regzmm = TRUE;\n \t      else if (i.types[dest].bitfield.ymmword\n \t\t       || i.types[source].bitfield.ymmword)\n@@ -7966,7 +8010,9 @@ build_modrm_byte (void)\n \n \t  if (i.tm.opcode_modifier.sib)\n \t    {\n-\t      if (i.index_reg->reg_num == RegIZ)\n+\t      /* The index register of VSIB shouldn't be RegIZ.  */\n+\t      if (i.tm.opcode_modifier.sib != SIBMEM\n+\t\t  && i.index_reg->reg_num == RegIZ)\n \t\tabort ();\n \n \t      i.rm.regmem = ESCAPE_TO_TWO_BYTE_ADDRESSING;\n@@ -7989,8 +8035,19 @@ build_modrm_byte (void)\n \t\t      i.types[op].bitfield.disp32s = 1;\n \t\t    }\n \t\t}\n-\t      i.sib.index = i.index_reg->reg_num;\n-\t      set_rex_vrex (i.index_reg, REX_X, FALSE);\n+\n+\t      /* Since the mandatory SIB always has index register, so\n+\t\t the code logic remains unchanged. The non-mandatory SIB\n+\t\t without index register is allowed and will be handled\n+\t\t later.  */\n+\t      if (i.index_reg)\n+\t\t{\n+\t\t  if (i.index_reg->reg_num == RegIZ)\n+\t\t    i.sib.index = NO_INDEX_REGISTER;\n+\t\t  else\n+\t\t    i.sib.index = i.index_reg->reg_num;\n+\t\t  set_rex_vrex (i.index_reg, REX_X, FALSE);\n+\t\t}\n \t    }\n \n \t  default_seg = &ds;\n@@ -8004,7 +8061,9 @@ build_modrm_byte (void)\n \t\t{\n \t\t  i386_operand_type newdisp;\n \n-\t\t  gas_assert (!i.tm.opcode_modifier.sib);\n+\t\t  /* Both check for VSIB and mandatory non-vector SIB. */\n+\t\t  gas_assert (!i.tm.opcode_modifier.sib\n+\t\t\t      || i.tm.opcode_modifier.sib == SIBMEM);\n \t\t  /* Operand is just <disp>  */\n \t\t  if (flag_code == CODE_64BIT)\n \t\t    {\n@@ -8142,7 +8201,11 @@ build_modrm_byte (void)\n \t      i.sib.scale = i.log2_scale_factor;\n \t      if (i.index_reg == 0)\n \t\t{\n-\t\t  gas_assert (!i.tm.opcode_modifier.sib);\n+\t\t  /* Only check for VSIB. */\n+\t\t  gas_assert (i.tm.opcode_modifier.sib != VECSIB128\n+\t\t\t      && i.tm.opcode_modifier.sib != VECSIB256\n+\t\t\t      && i.tm.opcode_modifier.sib != VECSIB512);\n+\n \t\t  /* <disp>(%esp) becomes two byte modrm with no index\n \t\t     register.  We've already stored the code for esp\n \t\t     in i.rm.regmem ie. ESCAPE_TO_TWO_BYTE_ADDRESSING.\n@@ -8267,7 +8330,9 @@ build_modrm_byte (void)\n \t\tbreak;\n \t      if (i.types[op].bitfield.class == RegSIMD)\n \t\t{\n-\t\t  if (i.types[op].bitfield.zmmword)\n+\t\t  if (i.types[op].bitfield.tmmword)\n+\t\t    i.has_regtmm = TRUE;\n+\t\t  else if (i.types[op].bitfield.zmmword)\n \t\t    i.has_regzmm = TRUE;\n \t\t  else if (i.types[op].bitfield.ymmword)\n \t\t    i.has_regymm = TRUE;\n@@ -10931,9 +10996,10 @@ i386_index_check (const char *operand_string)\n \t\t      || !i.index_reg->reg_type.bitfield.baseindex)))\n \t    goto bad_address;\n \n-\t  /* bndmk, bndldx, and bndstx have special restrictions. */\n+\t  /* bndmk, bndldx, bndstx and mandatory non-vector SIB have special restrictions. */\n \t  if (current_templates->start->base_opcode == 0xf30f1b\n-\t      || (current_templates->start->base_opcode & ~1) == 0x0f1a)\n+\t      || (current_templates->start->base_opcode & ~1) == 0x0f1a\n+\t      || current_templates->start->opcode_modifier.sib == SIBMEM)\n \t    {\n \t      /* They cannot use RIP-relative addressing. */\n \t      if (i.base_reg && i.base_reg->reg_num == RegIP)\n@@ -10943,7 +11009,7 @@ i386_index_check (const char *operand_string)\n \t\t}\n \n \t      /* bndldx and bndstx ignore their scale factor. */\n-\t      if (current_templates->start->base_opcode != 0xf30f1b\n+\t      if ((current_templates->start->base_opcode & ~1) == 0x0f1a\n \t\t  && i.log2_scale_factor)\n \t\tas_warn (_(\"register scaling is being ignored here\"));\n \t    }\n@@ -12445,6 +12511,11 @@ static bfd_boolean check_register (const reg_entry *r)\n \t}\n     }\n \n+  if (r->reg_type.bitfield.tmmword\n+      && (!cpu_arch_flags.bitfield.cpuamx_tile\n+          || flag_code != CODE_64BIT))\n+    return FALSE;\n+\n   if (r->reg_type.bitfield.class == RegBND && !cpu_arch_flags.bitfield.cpumpx)\n     return FALSE;\n "
    },
    {
      "sha": "3813f5eb59d7f3940a7ea92996766e84c82c0354",
      "filename": "gas/doc/c-i386.texi",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/gas/doc/c-i386.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/gas/doc/c-i386.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/c-i386.texi?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -226,6 +226,12 @@ accept various extension mnemonics.  For example,\n @code{noenqcmd},\n @code{noserialize},\n @code{notsxldtrk},\n+@code{amx_int8},\n+@code{noamx_int8},\n+@code{amx_bf16},\n+@code{noamx_bf16},\n+@code{amx_tile},\n+@code{noamx_tile},\n @code{vmx},\n @code{vmfunc},\n @code{smx},\n@@ -1494,6 +1500,7 @@ supported on the CPU specified.  The choices for @var{cpu_type} are:\n @item @samp{.wbnoinvd} @tab @samp{.pconfig} @tab @samp{.waitpkg} @tab @samp{.cldemote}\n @item @samp{.shstk} @tab @samp{.gfni} @tab @samp{.vaes} @tab @samp{.vpclmulqdq}\n @item @samp{.movdiri} @tab @samp{.movdir64b} @tab @samp{.enqcmd} @tab @samp{.tsxldtrk}\n+@item @samp{.amx_int8} @tab @samp{.amx_bf16} @tab @samp{.amx_tile}\n @item @samp{.3dnow} @tab @samp{.3dnowa} @tab @samp{.sse4a} @tab @samp{.sse5}\n @item @samp{.syscall} @tab @samp{.rdtscp} @tab @samp{.svme}\n @item @samp{.lwp} @tab @samp{.fma4} @tab @samp{.xop} @tab @samp{.cx16}"
    },
    {
      "sha": "eabc09893f4a3c222ce99c6593e9cd7fd3ed1f76",
      "filename": "gas/testsuite/gas/i386/i386.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/i386.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/i386.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/i386.exp?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -1141,6 +1141,10 @@ if [expr ([istarget \"i*86-*-*\"] || [istarget \"x86_64-*-*\"]) && [gas_64_check]] t\n     run_dump_test \"x86-64-lfence-ret-d\"\n     run_dump_test \"x86-64-lfence-ret-e\"\n     run_dump_test \"x86-64-lfence-byte\"\n+    run_list_test \"x86-64-amx-inval\"\n+    run_dump_test \"x86-64-amx\"\n+    run_dump_test \"x86-64-amx-intel\"\n+    run_dump_test \"x86-64-amx-bad\"\n \n     if { ![istarget \"*-*-aix*\"]\n       && ![istarget \"*-*-beos*\"]"
    },
    {
      "sha": "480b291c91c935481e7540a1183b434597711625",
      "filename": "gas/testsuite/gas/i386/intel-regs.d",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/intel-regs.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/intel-regs.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/intel-regs.d?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -6,6 +6,7 @@\n \n Disassembly of section \\.text:\n 0+0 <.*>:\n+.*[ \t]+R_386_32[ \t]+tmm1\n .*[ \t]+R_386_16[ \t]+eax\n .*[ \t]+R_386_16[ \t]+rax\n .*[ \t]+R_386_16[ \t]+axl\n@@ -53,4 +54,7 @@ Disassembly of section \\.text:\n \n .* <ymm8>:\n .*[ \t]+<ymm8>\n+\n+.* <tmm0>:\n+.*[ \t]+<tmm0>\n #pass"
    },
    {
      "sha": "44e369bb0f04c3321d3c2d6e5bc7c0c2c999aaa4",
      "filename": "gas/testsuite/gas/i386/intel-regs.s",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/intel-regs.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/intel-regs.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/intel-regs.s?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -1,6 +1,8 @@\n \t.text\n \t.intel_syntax noprefix\n \n+\tmov\teax, tmm1\n+\n \t.arch i286\n \t.code16\n \tmov\tax, eax\t\t\t; add\t[bx+si], al\n@@ -59,3 +61,5 @@\n \tmov\trax, r8\n ymm8:\n \tjmp\tymm8\n+tmm0:\n+\tjmp\ttmm0"
    },
    {
      "sha": "087e89aabe68d2df65a09f539776c1845ad24592",
      "filename": "gas/testsuite/gas/i386/x86-64-amx-bad.d",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/x86-64-amx-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/x86-64-amx-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-amx-bad.d?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -0,0 +1,24 @@\n+#as:\n+#objdump: -drw\n+#name: x86_64 AMX insns\n+#source: x86-64-amx-bad.s\n+\n+.*: +file format .*\n+\n+\n+Disassembly of section \\.text:\n+\n+0+ <\\.text>:\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 d2 5c[ \t]*\\(bad\\)[ \t]*\n+[ \t]*[a-f0-9]+:[ \t]*dc 90 90 90 90 90[ \t]*fcoml.*\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 56 5c[ \t]*\\(bad\\)[ \t]*\n+[ \t]*[a-f0-9]+:[ \t]*dc 90 90 90 90 90[ \t]*fcoml.*\n+[ \t]*[a-f0-9]+:[ \t]*c4 62 52 5c dc[ \t]*tdpbf16ps %tmm5,%tmm4,\\(bad\\)\n+[ \t]*[a-f0-9]+:[ \t]*c4 c2 52 5c dc[ \t]*tdpbf16ps %tmm5,\\(bad\\),%tmm3\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 32 5c dc[ \t]*tdpbf16ps \\(bad\\),%tmm4,%tmm3\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 4b 09[ \t]*tileloadd \\(bad\\),%tmm1\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 70 5e c9[ \t]*tdpbuud %tmm1/\\(bad\\),%tmm1/\\(bad\\),%tmm1/\\(bad\\)\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 78 5e c9[ \t]*tdpbuud %tmm0,%tmm1/\\(bad\\),%tmm1/\\(bad\\)\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 70 5e c8[ \t]*tdpbuud %tmm1/\\(bad\\),%tmm0,%tmm1/\\(bad\\)\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 70 5e c1[ \t]*tdpbuud %tmm1/\\(bad\\),%tmm1/\\(bad\\),%tmm0\n+#pass"
    },
    {
      "sha": "2781553cb40407b47e39307df6a34b7d4b258581",
      "filename": "gas/testsuite/gas/i386/x86-64-amx-bad.s",
      "status": "added",
      "additions": 63,
      "deletions": 0,
      "changes": 63,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/x86-64-amx-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/x86-64-amx-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-amx-bad.s?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -0,0 +1,63 @@\n+.text\n+\t#tdpbf16ps %tmm5,%tmm4,%tmm3 set VEX.W = 1 (illegal value).\n+\t.byte 0xc4\n+\t.byte 0xe2\n+\t.byte 0xd2\n+\t.byte 0x5c\n+\t.byte 0xdc\n+\t.fill 0x05, 0x01, 0x90\n+\t#tdpbf16ps %tmm5,%tmm4,%tmm3 set VEX.L = 1 (illegal value).\n+\t.byte 0xc4\n+\t.byte 0xe2\n+\t.byte 0x56\n+\t.byte 0x5c\n+\t.byte 0xdc\n+\t.fill 0x05, 0x01, 0x90\n+\t#tdpbf16ps %tmm5,%tmm4,%tmm3 set VEX.R = 0 (illegal value).\n+\t.byte 0xc4\n+\t.byte 0x62\n+\t.byte 0x52\n+\t.byte 0x5c\n+\t.byte 0xdc\n+\t#tdpbf16ps %tmm5,%tmm4,%tmm3 set VEX.B = 0 (illegal value).\n+\t.byte 0xc4\n+\t.byte 0xc2\n+\t.byte 0x52\n+\t.byte 0x5c\n+\t.byte 0xdc\n+\t#tdpbf16ps %tmm5,%tmm4,%tmm3 set VEX.VVVV = 0110 (illegal value).\n+\t.byte 0xc4\n+\t.byte 0xe2\n+\t.byte 0x32\n+\t.byte 0x5c\n+\t.byte 0xdc\n+\t#tileloadd (%rax),%tmm1 set R/M= 001 (illegal value) without SIB.\n+\t.byte 0xc4\n+\t.byte 0xe2\n+\t.byte 0x7b\n+\t.byte 0x4b\n+\t.byte 0x09\n+\t#tdpbuud %tmm1,%tmm1,%tmm1 All 3 TMM registers can't be identical.\n+\t.byte 0xc4\n+\t.byte 0xe2\n+\t.byte 0x70\n+\t.byte 0x5e\n+\t.byte 0xc9\n+\t#tdpbuud %tmm0,%tmm1,%tmm1 All 3 TMM registers can't be identical.\n+\t.byte 0xc4\n+\t.byte 0xe2\n+\t.byte 0x78\n+\t.byte 0x5e\n+\t.byte 0xc9\n+\t#tdpbuud %tmm1,%tmm0,%tmm1 All 3 TMM registers can't be identical.\n+\t.byte 0xc4\n+\t.byte 0xe2\n+\t.byte 0x70\n+\t.byte 0x5e\n+\t.byte 0xc8\n+\t#tdpbuud %tmm1,%tmm1,%tmm0 All 3 TMM registers can't be identical.\n+\t.byte 0xc4\n+\t.byte 0xe2\n+\t.byte 0x70\n+\t.byte 0x5e\n+\t.byte 0xc1"
    },
    {
      "sha": "fc5e0745ea8c7e2eb61f8fa5bf8dfd5d0f073426",
      "filename": "gas/testsuite/gas/i386/x86-64-amx-intel.d",
      "status": "added",
      "additions": 70,
      "deletions": 0,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/x86-64-amx-intel.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/x86-64-amx-intel.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-amx-intel.d?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -0,0 +1,70 @@\n+#as:\n+#objdump: -d -Mintel\n+#name: x86_64 AMX insns in Intel syntax\n+#source: x86-64-amx.s\n+\n+.*: +file format .*\n+\n+\n+Disassembly of section \\.text:\n+\n+0+ <_start>:\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 78 49 04 51[ \t]*ldtilecfg \\[rcx\\+rdx\\*2\\]\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 49 04 51[ \t]*sttilecfg \\[rcx\\+rdx\\*2\\]\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 52 5c dc[ \t]*tdpbf16ps tmm3,tmm4,tmm5\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 63 5e ca[ \t]*tdpbssd tmm1,tmm2,tmm3\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 62 5e ca[ \t]*tdpbsud tmm1,tmm2,tmm3\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 61 5e ca[ \t]*tdpbusd tmm1,tmm2,tmm3\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 60 5e ca[ \t]*tdpbuud tmm1,tmm2,tmm3\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 4b 2c 25 00[ \t]*tileloadd tmm5,ds:0x0\n+[ \t]*[a-f0-9]+:[ \t]*00 00 00[ \t]*\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 4b 2c 21[ \t]*tileloadd tmm5,\\[rcx\\+riz\\*1\\]\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 7b 4b 2c 21[ \t]*tileloadd tmm5,\\[ecx\\+eiz\\*1\\]\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 4b 2c 11[ \t]*tileloadd tmm5,\\[rcx\\+rdx\\*1\\]\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 7b 4b 0c 51[ \t]*tileloadd tmm1,\\[ecx\\+edx\\*2\\]\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 4b 2c 25 00[ \t]*tileloaddt1 tmm5,ds:0x0\n+[ \t]*[a-f0-9]+:[ \t]*00 00 00[ \t]*\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 4b 2c 21[ \t]*tileloaddt1 tmm5,\\[rcx\\+riz\\*1\\]\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 79 4b 2c 21[ \t]*tileloaddt1 tmm5,\\[ecx\\+eiz\\*1\\]\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 4b 2c 11[ \t]*tileloaddt1 tmm5,\\[rcx\\+rdx\\*1\\]\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 79 4b 0c 51[ \t]*tileloaddt1 tmm1,\\[ecx\\+edx\\*2\\]\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 4b 0c 61[ \t]*tileloaddt1 tmm1,\\[rcx\\+riz\\*2\\]\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 78 49 c0[ \t]*tilerelease *\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7a 4b 2c 21[ \t]*tilestored \\[rcx\\+riz\\*1\\],tmm5\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 7a 4b 2c 21[ \t]*tilestored \\[ecx\\+eiz\\*1\\],tmm5\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7a 4b 2c 11[ \t]*tilestored \\[rcx\\+rdx\\*1\\],tmm5\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 7a 4b 0c 51[ \t]*tilestored \\[ecx\\+edx\\*2\\],tmm1\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 49 c0[ \t]*tilezero tmm0\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 49 e8[ \t]*tilezero tmm5\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 49 f8[ \t]*tilezero tmm7\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 78 49 01[ \t]*ldtilecfg \\[rcx\\]\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 78 49 03[ \t]*ldtilecfg \\[rbx\\]\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 49 01[ \t]*sttilecfg \\[rcx\\]\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 49 03[ \t]*sttilecfg \\[rbx\\]\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 52 5c dc[ \t]*tdpbf16ps tmm3,tmm4,tmm5\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 63 5e ca[ \t]*tdpbssd tmm1,tmm2,tmm3\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 62 5e ca[ \t]*tdpbsud tmm1,tmm2,tmm3\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 61 5e ca[ \t]*tdpbusd tmm1,tmm2,tmm3\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 60 5e ca[ \t]*tdpbuud tmm1,tmm2,tmm3\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 4b 2c 25 00[ \t]*tileloadd tmm5,ds:0x0\n+[ \t]*[a-f0-9]+:[ \t]*00 00 00[ \t]*\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 4b 2c 21[ \t]*tileloadd tmm5,\\[rcx\\+riz\\*1\\]\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 7b 4b 2c 21[ \t]*tileloadd tmm5,\\[ecx\\+eiz\\*1\\]\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 4b 2c 11[ \t]*tileloadd tmm5,\\[rcx\\+rdx\\*1\\]\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 7b 4b 0c 51[ \t]*tileloadd tmm1,\\[ecx\\+edx\\*2\\]\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 4b 2c 25 00[ \t]*tileloaddt1 tmm5,ds:0x0\n+[ \t]*[a-f0-9]+:[ \t]*00 00 00[ \t]*\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 4b 2c 21[ \t]*tileloaddt1 tmm5,\\[rcx\\+riz\\*1\\]\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 79 4b 2c 21[ \t]*tileloaddt1 tmm5,\\[ecx\\+eiz\\*1\\]\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 4b 2c 11[ \t]*tileloaddt1 tmm5,\\[rcx\\+rdx\\*1\\]\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 79 4b 0c 51[ \t]*tileloaddt1 tmm1,\\[ecx\\+edx\\*2\\]\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 4b 0c 61[ \t]*tileloaddt1 tmm1,\\[rcx\\+riz\\*2\\]\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 78 49 c0[ \t]*tilerelease *\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7a 4b 2c 21[ \t]*tilestored \\[rcx\\+riz\\*1\\],tmm5\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 7a 4b 2c 21[ \t]*tilestored \\[ecx\\+eiz\\*1\\],tmm5\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7a 4b 2c 11[ \t]*tilestored \\[rcx\\+rdx\\*1\\],tmm5\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 7a 4b 0c 51[ \t]*tilestored \\[ecx\\+edx\\*2\\],tmm1\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 49 c0[ \t]*tilezero tmm0\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 49 e8[ \t]*tilezero tmm5\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 49 f8[ \t]*tilezero tmm7\n+#pass"
    },
    {
      "sha": "6757b780ea8d9dd50139fde7624d8a64fe7586a4",
      "filename": "gas/testsuite/gas/i386/x86-64-amx-inval.l",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/x86-64-amx-inval.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/x86-64-amx-inval.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-amx-inval.l?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -0,0 +1,17 @@\n+.* Assembler messages:\n+.*:5: Error: `\\(%rip\\)' cannot be used here\n+.*:6: Error: `\\(%rip\\)' cannot be used here\n+.*:7: Error: `\\(%rip\\)' cannot be used here\n+.*:8: Error: operand size mismatch for `tdpbssd'\n+.*:9: Error: operand size mismatch for `vaddps'\n+.*:10: Error: all tmm registers must be distinct for `tdpbssd'\n+.*:11: Error: all tmm registers must be distinct for `tdpbssd'\n+.*:12: Error: all tmm registers must be distinct for `tdpbssd'\n+.*:15: Error: `\\[rip\\]' cannot be used here\n+.*:16: Error: `\\[rip\\]' cannot be used here\n+.*:17: Error: `\\[rip\\]' cannot be used here\n+.*:18: Error: operand size mismatch for `tdpbssd'\n+.*:19: Error: operand size mismatch for `vaddps'\n+.*:20: Error: all tmm registers must be distinct for `tdpbssd'\n+.*:21: Error: all tmm registers must be distinct for `tdpbssd'\n+.*:22: Error: all tmm registers must be distinct for `tdpbssd'"
    },
    {
      "sha": "6e29453669714f36a27a96ed9eba64c99b84746e",
      "filename": "gas/testsuite/gas/i386/x86-64-amx-inval.s",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/x86-64-amx-inval.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/x86-64-amx-inval.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-amx-inval.s?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -0,0 +1,22 @@\n+# Check illegal SIBMEM and register size used in AMX instructions\n+\n+    .text\n+_start:\n+    tileloadd (%rip), %tmm1\n+    tileloaddt1 (%rip), %tmm1\n+    tilestored %tmm1, (%rip)\n+    tdpbssd %xmm1, %xmm2, %xmm3\n+    vaddps %tmm1, %tmm2, %tmm3\n+    tdpbssd %tmm1, %tmm1, %tmm0\n+    tdpbssd %tmm1, %tmm0, %tmm1\n+    tdpbssd %tmm0, %tmm1, %tmm1\n+\n+    .intel_syntax noprefix\n+    tileloadd tmm1, [rip]\n+    tileloaddt1 tmm1, [rip]\n+    tilestored [rip], tmm1\n+    tdpbssd xmm3, xmm2, xmm1\n+    vaddps %tmm1, %tmm2, %tmm3\n+    tdpbssd tmm0, tmm1, tmm1\n+    tdpbssd tmm1, tmm0, tmm1\n+    tdpbssd tmm1, tmm1, tmm0"
    },
    {
      "sha": "ad6f42240b412bd34e2d195c79ecbb86e566efb1",
      "filename": "gas/testsuite/gas/i386/x86-64-amx.d",
      "status": "added",
      "additions": 70,
      "deletions": 0,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/x86-64-amx.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/x86-64-amx.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-amx.d?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -0,0 +1,70 @@\n+#as:\n+#objdump: -d\n+#name: x86_64 AMX insns\n+#source: x86-64-amx.s\n+\n+.*: +file format .*\n+\n+\n+Disassembly of section \\.text:\n+\n+0+ <_start>:\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 78 49 04 51[ \t]*ldtilecfg \\(%rcx,%rdx,2\\)\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 49 04 51[ \t]*sttilecfg \\(%rcx,%rdx,2\\)\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 52 5c dc[ \t]*tdpbf16ps %tmm5,%tmm4,%tmm3\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 63 5e ca[ \t]*tdpbssd %tmm3,%tmm2,%tmm1\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 62 5e ca[ \t]*tdpbsud %tmm3,%tmm2,%tmm1\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 61 5e ca[ \t]*tdpbusd %tmm3,%tmm2,%tmm1\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 60 5e ca[ \t]*tdpbuud %tmm3,%tmm2,%tmm1\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 4b 2c 25 00[ \t]*tileloadd 0x0,%tmm5\n+[ \t]*[a-f0-9]+:[ \t]*00 00 00[ \t]*\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 4b 2c 21[ \t]*tileloadd \\(%rcx,%riz,1\\),%tmm5\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 7b 4b 2c 21[ \t]*tileloadd \\(%ecx,%eiz,1\\),%tmm5\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 4b 2c 11[ \t]*tileloadd \\(%rcx,%rdx,1\\),%tmm5\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 7b 4b 0c 51[ \t]*tileloadd \\(%ecx,%edx,2\\),%tmm1\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 4b 2c 25 00[ \t]*tileloaddt1 0x0,%tmm5\n+[ \t]*[a-f0-9]+:[ \t]*00 00 00[ \t]*\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 4b 2c 21[ \t]*tileloaddt1 \\(%rcx,%riz,1\\),%tmm5\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 79 4b 2c 21[ \t]*tileloaddt1 \\(%ecx,%eiz,1\\),%tmm5\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 4b 2c 11[ \t]*tileloaddt1 \\(%rcx,%rdx,1\\),%tmm5\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 79 4b 0c 51[ \t]*tileloaddt1 \\(%ecx,%edx,2\\),%tmm1\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 4b 0c 61[ \t]*tileloaddt1 \\(%rcx,%riz,2\\),%tmm1\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 78 49 c0[ \t]*tilerelease *\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7a 4b 2c 21[ \t]*tilestored %tmm5,\\(%rcx,%riz,1\\)\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 7a 4b 2c 21[ \t]*tilestored %tmm5,\\(%ecx,%eiz,1\\)\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7a 4b 2c 11[ \t]*tilestored %tmm5,\\(%rcx,%rdx,1\\)\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 7a 4b 0c 51[ \t]*tilestored %tmm1,\\(%ecx,%edx,2\\)\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 49 c0[ \t]*tilezero %tmm0\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 49 e8[ \t]*tilezero %tmm5\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 49 f8[ \t]*tilezero %tmm7\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 78 49 01[ \t]*ldtilecfg \\(%rcx\\)\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 78 49 03[ \t]*ldtilecfg \\(%rbx\\)\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 49 01[ \t]*sttilecfg \\(%rcx\\)\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 49 03[ \t]*sttilecfg \\(%rbx\\)\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 52 5c dc[ \t]*tdpbf16ps %tmm5,%tmm4,%tmm3\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 63 5e ca[ \t]*tdpbssd %tmm3,%tmm2,%tmm1\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 62 5e ca[ \t]*tdpbsud %tmm3,%tmm2,%tmm1\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 61 5e ca[ \t]*tdpbusd %tmm3,%tmm2,%tmm1\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 60 5e ca[ \t]*tdpbuud %tmm3,%tmm2,%tmm1\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 4b 2c 25 00[ \t]*tileloadd 0x0,%tmm5\n+[ \t]*[a-f0-9]+:[ \t]*00 00 00[ \t]*\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 4b 2c 21[ \t]*tileloadd \\(%rcx,%riz,1\\),%tmm5\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 7b 4b 2c 21[ \t]*tileloadd \\(%ecx,%eiz,1\\),%tmm5\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 4b 2c 11[ \t]*tileloadd \\(%rcx,%rdx,1\\),%tmm5\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 7b 4b 0c 51[ \t]*tileloadd \\(%ecx,%edx,2\\),%tmm1\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 4b 2c 25 00[ \t]*tileloaddt1 0x0,%tmm5\n+[ \t]*[a-f0-9]+:[ \t]*00 00 00[ \t]*\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 4b 2c 21[ \t]*tileloaddt1 \\(%rcx,%riz,1\\),%tmm5\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 79 4b 2c 21[ \t]*tileloaddt1 \\(%ecx,%eiz,1\\),%tmm5\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 4b 2c 11[ \t]*tileloaddt1 \\(%rcx,%rdx,1\\),%tmm5\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 79 4b 0c 51[ \t]*tileloaddt1 \\(%ecx,%edx,2\\),%tmm1\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 79 4b 0c 61[ \t]*tileloaddt1 \\(%rcx,%riz,2\\),%tmm1\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 78 49 c0[ \t]*tilerelease *\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7a 4b 2c 21[ \t]*tilestored %tmm5,\\(%rcx,%riz,1\\)\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 7a 4b 2c 21[ \t]*tilestored %tmm5,\\(%ecx,%eiz,1\\)\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7a 4b 2c 11[ \t]*tilestored %tmm5,\\(%rcx,%rdx,1\\)\n+[ \t]*[a-f0-9]+:[ \t]*67 c4 e2 7a 4b 0c 51[ \t]*tilestored %tmm1,\\(%ecx,%edx,2\\)\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 49 c0[ \t]*tilezero %tmm0\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 49 e8[ \t]*tilezero %tmm5\n+[ \t]*[a-f0-9]+:[ \t]*c4 e2 7b 49 f8[ \t]*tilezero %tmm7\n+#pass"
    },
    {
      "sha": "c70543152bbe6daa88ebb24b2d93e971138fd841",
      "filename": "gas/testsuite/gas/i386/x86-64-amx.s",
      "status": "added",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/x86-64-amx.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/gas/testsuite/gas/i386/x86-64-amx.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/i386/x86-64-amx.s?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -0,0 +1,61 @@\n+\n+  .allow_index_reg\n+  .text\n+_start:\n+  ldtilecfg  (%rcx,%rdx,2)\n+  sttilecfg  (%rcx,%rdx,2)\n+  tdpbf16ps %tmm5, %tmm4, %tmm3\n+  tdpbssd %tmm3, %tmm2, %tmm1\n+  tdpbsud %tmm3, %tmm2, %tmm1\n+  tdpbusd %tmm3, %tmm2, %tmm1\n+  tdpbuud %tmm3, %tmm2, %tmm1\n+  tileloadd foo, %tmm5\n+  tileloadd (%rcx), %tmm5\n+  tileloadd (%ecx), %tmm5\n+  tileloadd (%rcx,%rdx,1), %tmm5\n+  tileloadd (%ecx,%edx,2), %tmm1\n+  tileloaddt1 foo, %tmm5\n+  tileloaddt1 (%rcx), %tmm5\n+  tileloaddt1 (%ecx), %tmm5\n+  tileloaddt1 (%rcx,%rdx,1), %tmm5\n+  tileloaddt1 (%ecx,%edx,2), %tmm1\n+  tileloaddt1 (%rcx,%riz,2), %tmm1\n+  tilerelease\n+  tilestored %tmm5, (%rcx)\n+  tilestored %tmm5, (%ecx)\n+  tilestored %tmm5, (%rcx,%rdx,1)\n+  tilestored %tmm1, (%ecx,%edx,2)\n+  tilezero %tmm0\n+  tilezero %tmm5\n+  tilezero %tmm7\n+\n+\n+  .intel_syntax noprefix\n+  ldtilecfg  [rcx]\n+  ldtilecfg  [rbx]\n+  sttilecfg  [rcx]\n+  sttilecfg  [rbx]\n+  tdpbf16ps tmm3, tmm4, tmm5\n+  tdpbssd tmm1, tmm2, tmm3\n+  tdpbsud tmm1, tmm2, tmm3\n+  tdpbusd tmm1, tmm2, tmm3\n+  tdpbuud tmm1, tmm2, tmm3\n+  tileloadd tmm5, foo\n+  tileloadd tmm5, [rcx]\n+  tileloadd tmm5, [ecx]\n+  tileloadd tmm5, [rcx+rdx]\n+  tileloadd tmm1, [ecx+edx*2]\n+  tileloaddt1 tmm5, foo\n+  tileloaddt1 tmm5, [rcx]\n+  tileloaddt1 tmm5, [ecx]\n+  tileloaddt1 tmm5, [rcx+rdx]\n+  tileloaddt1 tmm1, [ecx+edx*2]\n+  tileloaddt1 tmm1, [rcx+riz*2]\n+  tilerelease\n+  tilestored [rcx], tmm5\n+  tilestored [ecx], tmm5\n+  tilestored [rcx+rdx], tmm5\n+  tilestored [ecx+edx*2], tmm1\n+  tilezero tmm0\n+  tilezero tmm5\n+  tilezero tmm7"
    },
    {
      "sha": "83dfd2e2ba95e2e6e7eaf73fe8c8444d920f45ca",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 78,
      "deletions": 0,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -1,3 +1,81 @@\n+2020-07-10  Lili Cui  <lili.cui@intel.com>\n+\n+\t* i386-dis.c (TMM): New.\n+\t(EXtmm): Likewise.\n+\t(VexTmm): Likewise.\n+\t(MVexSIBMEM): Likewise.\n+\t(tmm_mode): Likewise.\n+\t(vex_sibmem_mode): Likewise.\n+\t(REG_VEX_0F3849_X86_64_P_0_W_0_M_1): Likewise.\n+\t(MOD_VEX_0F3849_X86_64_P_0_W_0): Likewise.\n+\t(MOD_VEX_0F3849_X86_64_P_2_W_0): Likewise.\n+\t(MOD_VEX_0F3849_X86_64_P_3_W_0): Likewise.\n+\t(MOD_VEX_0F384B_X86_64_P_1_W_0): Likewise.\n+\t(MOD_VEX_0F384B_X86_64_P_2_W_0): Likewise.\n+\t(MOD_VEX_0F384B_X86_64_P_3_W_0): Likewise.\n+\t(MOD_VEX_0F385C_X86_64_P_1_W_0): Likewise.\n+\t(MOD_VEX_0F385E_X86_64_P_0_W_0): Likewise.\n+\t(MOD_VEX_0F385E_X86_64_P_1_W_0): Likewise.\n+\t(MOD_VEX_0F385E_X86_64_P_2_W_0): Likewise.\n+\t(MOD_VEX_0F385E_X86_64_P_3_W_0): Likewise.\n+\t(RM_VEX_0F3849_X86_64_P_0_W_0_M_1_R_0): Likewise.\n+\t(PREFIX_VEX_0F3849_X86_64): Likewise.\n+\t(PREFIX_VEX_0F384B_X86_64): Likewise.\n+\t(PREFIX_VEX_0F385C_X86_64): Likewise.\n+\t(PREFIX_VEX_0F385E_X86_64): Likewise.\n+\t(X86_64_VEX_0F3849): Likewise.\n+\t(X86_64_VEX_0F384B): Likewise.\n+\t(X86_64_VEX_0F385C): Likewise.\n+\t(X86_64_VEX_0F385E): Likewise.\n+\t(VEX_LEN_0F3849_X86_64_P_0_W_0_M_0): Likewise.\n+\t(VEX_LEN_0F3849_X86_64_P_0_W_0_M_1_REG_0_RM_0): Likewise.\n+\t(VEX_LEN_0F3849_X86_64_P_2_W_0_M_0): Likewise.\n+\t(VEX_LEN_0F3849_X86_64_P_3_W_0_M_0): Likewise.\n+\t(VEX_LEN_0F384B_X86_64_P_1_W_0_M_0): Likewise.\n+\t(VEX_LEN_0F384B_X86_64_P_2_W_0_M_0): Likewise.\n+\t(VEX_LEN_0F384B_X86_64_P_3_W_0_M_0): Likewise.\n+\t(VEX_LEN_0F385C_X86_64_P_1_W_0_M_0): Likewise.\n+\t(VEX_LEN_0F385E_X86_64_P_0_W_0_M_0): Likewise.\n+\t(VEX_LEN_0F385E_X86_64_P_1_W_0_M_0): Likewise.\n+\t(VEX_LEN_0F385E_X86_64_P_2_W_0_M_0): Likewise.\n+\t(VEX_LEN_0F385E_X86_64_P_3_W_0_M_0): Likewise.\n+\t(VEX_W_0F3849_X86_64_P_0): Likewise.\n+\t(VEX_W_0F3849_X86_64_P_2): Likewise.\n+\t(VEX_W_0F3849_X86_64_P_3): Likewise.\n+\t(VEX_W_0F384B_X86_64_P_1): Likewise.\n+\t(VEX_W_0F384B_X86_64_P_2): Likewise.\n+\t(VEX_W_0F384B_X86_64_P_3): Likewise.\n+\t(VEX_W_0F385C_X86_64_P_1): Likewise.\n+\t(VEX_W_0F385E_X86_64_P_0): Likewise.\n+\t(VEX_W_0F385E_X86_64_P_1): Likewise.\n+\t(VEX_W_0F385E_X86_64_P_2): Likewise.\n+\t(VEX_W_0F385E_X86_64_P_3): Likewise.\n+\t(names_tmm): Likewise.\n+\t(att_names_tmm): Likewise.\n+\t(intel_operand_size): Handle void_mode.\n+\t(OP_XMM): Handle tmm_mode.\n+\t(OP_EX): Likewise.\n+\t(OP_VEX): Likewise.\n+\t* i386-gen.c (cpu_flag_init): Add entries for CpuAMX_INT8,\n+\tCpuAMX_BF16 and CpuAMX_TILE.\n+\t(operand_type_shorthands): Add RegTMM.\n+\t(operand_type_init): Likewise.\n+\t(operand_types): Add Tmmword.\n+\t(cpu_flag_init): Add CPU_AMX_INT8, CpuAMX_BF16 and CpuAMX_TILE.\n+\t(cpu_flags): Add CpuAMX_INT8, CpuAMX_BF16 and CpuAMX_TILE.\n+\t* i386-opc.h (CpuAMX_INT8): New.\n+\t(CpuAMX_BF16): Likewise.\n+\t(CpuAMX_TILE): Likewise.\n+\t(SIBMEM): Likewise.\n+\t(Tmmword): Likewise.\n+\t(i386_cpu_flags): Add cpuamx_int8, cpuamx_bf16 and cpuamx_tile.\n+\t(i386_opcode_modifier): Extend width of fields vexvvvv and sib.\n+\t(i386_operand_type): Add tmmword.\n+\t* i386-opc.tbl: Add AMX instructions.\n+\t* i386-reg.tbl: Add AMX registers.\n+\t* i386-init.h: Regenerated.\n+\t* i386-tbl.h: Likewise.\n+\n 2020-07-08  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-dis.c (OP_LWPCB_E, OP_LWP_E): Delete."
    },
    {
      "sha": "6a14f9e258dd499b304e4db82b5f0fc9a891533f",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 346,
      "deletions": 5,
      "changes": 351,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -370,6 +370,7 @@ fetch_data (struct disassemble_info *info, bfd_byte *addr)\n #define XMScalar { OP_XMM, scalar_mode }\n #define XMGatherQ { OP_XMM, vex_vsib_q_w_dq_mode }\n #define XMM { OP_XMM, xmm_mode }\n+#define TMM { OP_XMM, tmm_mode }\n #define XMxmmq { OP_XMM, xmmq_mode }\n #define EM { OP_EM, v_mode }\n #define EMS { OP_EM, v_swap_mode }\n@@ -386,6 +387,7 @@ fetch_data (struct disassemble_info *info, bfd_byte *addr)\n #define EXxS { OP_EX, x_swap_mode }\n #define EXxmm { OP_EX, xmm_mode }\n #define EXymm { OP_EX, ymm_mode }\n+#define EXtmm { OP_EX, tmm_mode }\n #define EXxmmq { OP_EX, xmmq_mode }\n #define EXEvexHalfBcstXmmq { OP_EX, evex_half_bcst_xmmq_mode }\n #define EXxmm_mb { OP_EX, xmm_mb_mode }\n@@ -415,6 +417,7 @@ fetch_data (struct disassemble_info *info, bfd_byte *addr)\n #define Vex128 { OP_VEX, vex128_mode }\n #define Vex256 { OP_VEX, vex256_mode }\n #define VexGdq { OP_VEX, dq_mode }\n+#define VexTmm { OP_VEX, tmm_mode }\n #define EXdVexScalarS { OP_EX_Vex, d_scalar_swap_mode }\n #define EXqVexScalarS { OP_EX_Vex, q_scalar_swap_mode }\n #define XMVexScalar { OP_XMM_Vex, scalar_mode }\n@@ -442,6 +445,8 @@ fetch_data (struct disassemble_info *info, bfd_byte *addr)\n #define MVexVSIBQWpX { OP_M, vex_vsib_q_w_dq_mode }\n #define MVexVSIBQDWpX { OP_M, vex_vsib_q_w_d_mode }\n \n+#define MVexSIBMEM { OP_M, vex_sibmem_mode }\n+\n /* Used handle \"rep\" prefix for string instructions.  */\n #define Xbr { REP_Fixup, eSI_reg }\n #define Xvr { REP_Fixup, eSI_reg }\n@@ -533,6 +538,8 @@ enum\n   ymmq_mode,\n   /* 32-byte YMM or 16-byte word operand */\n   ymmxmm_mode,\n+  /* TMM operand */\n+  tmm_mode,\n   /* d_mode in 32bit, q_mode in 64bit mode.  */\n   m_mode,\n   /* pair of v_mode operands */\n@@ -586,6 +593,8 @@ enum\n   vex_vsib_q_w_dq_mode,\n   /* Similar to vex_vsib_q_w_dq_mode, with smaller memory.  */\n   vex_vsib_q_w_d_mode,\n+  /* mandatory non-vector SIB.  */\n+  vex_sibmem_mode,\n \n   /* scalar, ignore vector length.  */\n   scalar_mode,\n@@ -734,6 +743,7 @@ enum\n   REG_VEX_0F72,\n   REG_VEX_0F73,\n   REG_VEX_0FAE,\n+  REG_VEX_0F3849_X86_64_P_0_W_0_M_1,\n   REG_VEX_0F38F3,\n \n   REG_0FXOP_09_01_L_0,\n@@ -818,6 +828,17 @@ enum\n   MOD_0FE7_PREFIX_2,\n   MOD_0FF0_PREFIX_3,\n   MOD_0F382A_PREFIX_2,\n+  MOD_VEX_0F3849_X86_64_P_0_W_0,\n+  MOD_VEX_0F3849_X86_64_P_2_W_0,\n+  MOD_VEX_0F3849_X86_64_P_3_W_0,\n+  MOD_VEX_0F384B_X86_64_P_1_W_0,\n+  MOD_VEX_0F384B_X86_64_P_2_W_0,\n+  MOD_VEX_0F384B_X86_64_P_3_W_0,\n+  MOD_VEX_0F385C_X86_64_P_1_W_0,\n+  MOD_VEX_0F385E_X86_64_P_0_W_0,\n+  MOD_VEX_0F385E_X86_64_P_1_W_0,\n+  MOD_VEX_0F385E_X86_64_P_2_W_0,\n+  MOD_VEX_0F385E_X86_64_P_3_W_0,\n   MOD_0F38F5_PREFIX_2,\n   MOD_0F38F6_PREFIX_0,\n   MOD_0F38F8_PREFIX_1,\n@@ -957,6 +978,7 @@ enum\n   RM_0F1E_P_1_MOD_3_REG_7,\n   RM_0FAE_REG_6_MOD_3_P_0,\n   RM_0FAE_REG_7_MOD_3,\n+  RM_VEX_0F3849_X86_64_P_0_W_0_M_1_R_0\n };\n \n enum\n@@ -1292,9 +1314,13 @@ enum\n   PREFIX_VEX_0F3845,\n   PREFIX_VEX_0F3846,\n   PREFIX_VEX_0F3847,\n+  PREFIX_VEX_0F3849_X86_64,\n+  PREFIX_VEX_0F384B_X86_64,\n   PREFIX_VEX_0F3858,\n   PREFIX_VEX_0F3859,\n   PREFIX_VEX_0F385A,\n+  PREFIX_VEX_0F385C_X86_64,\n+  PREFIX_VEX_0F385E_X86_64,\n   PREFIX_VEX_0F3878,\n   PREFIX_VEX_0F3879,\n   PREFIX_VEX_0F388C,\n@@ -1667,7 +1693,11 @@ enum\n   X86_64_0F01_REG_0,\n   X86_64_0F01_REG_1,\n   X86_64_0F01_REG_2,\n-  X86_64_0F01_REG_3\n+  X86_64_0F01_REG_3,\n+  X86_64_VEX_0F3849,\n+  X86_64_VEX_0F384B,\n+  X86_64_VEX_0F385C,\n+  X86_64_VEX_0F385E\n };\n \n enum\n@@ -1752,7 +1782,19 @@ enum\n   VEX_LEN_0F381A_P_2_M_0,\n   VEX_LEN_0F3836_P_2,\n   VEX_LEN_0F3841_P_2,\n+  VEX_LEN_0F3849_X86_64_P_0_W_0_M_0,\n+  VEX_LEN_0F3849_X86_64_P_0_W_0_M_1_REG_0_RM_0,\n+  VEX_LEN_0F3849_X86_64_P_2_W_0_M_0,\n+  VEX_LEN_0F3849_X86_64_P_3_W_0_M_0,\n+  VEX_LEN_0F384B_X86_64_P_1_W_0_M_0,\n+  VEX_LEN_0F384B_X86_64_P_2_W_0_M_0,\n+  VEX_LEN_0F384B_X86_64_P_3_W_0_M_0,\n   VEX_LEN_0F385A_P_2_M_0,\n+  VEX_LEN_0F385C_X86_64_P_1_W_0_M_0,\n+  VEX_LEN_0F385E_X86_64_P_0_W_0_M_0,\n+  VEX_LEN_0F385E_X86_64_P_1_W_0_M_0,\n+  VEX_LEN_0F385E_X86_64_P_2_W_0_M_0,\n+  VEX_LEN_0F385E_X86_64_P_3_W_0_M_0,\n   VEX_LEN_0F38DB_P_2,\n   VEX_LEN_0F38F2_P_0,\n   VEX_LEN_0F38F3_R_1_P_0,\n@@ -1960,9 +2002,20 @@ enum\n   VEX_W_0F382F_P_2_M_0,\n   VEX_W_0F3836_P_2,\n   VEX_W_0F3846_P_2,\n+  VEX_W_0F3849_X86_64_P_0,\n+  VEX_W_0F3849_X86_64_P_2,\n+  VEX_W_0F3849_X86_64_P_3,\n+  VEX_W_0F384B_X86_64_P_1,\n+  VEX_W_0F384B_X86_64_P_2,\n+  VEX_W_0F384B_X86_64_P_3,\n   VEX_W_0F3858_P_2,\n   VEX_W_0F3859_P_2,\n   VEX_W_0F385A_P_2_M_0,\n+  VEX_W_0F385C_X86_64_P_1,\n+  VEX_W_0F385E_X86_64_P_0,\n+  VEX_W_0F385E_X86_64_P_1,\n+  VEX_W_0F385E_X86_64_P_2,\n+  VEX_W_0F385E_X86_64_P_3,\n   VEX_W_0F3878_P_2,\n   VEX_W_0F3879_P_2,\n   VEX_W_0F38CF_P_2,\n@@ -3116,6 +3169,16 @@ static const char *att_names_zmm[] = {\n   \"%zmm28\", \"%zmm29\", \"%zmm30\", \"%zmm31\"\n };\n \n+static const char **names_tmm;\n+static const char *intel_names_tmm[] = {\n+  \"tmm0\", \"tmm1\", \"tmm2\", \"tmm3\",\n+  \"tmm4\", \"tmm5\", \"tmm6\", \"tmm7\"\n+};\n+static const char *att_names_tmm[] = {\n+  \"%tmm0\", \"%tmm1\", \"%tmm2\", \"%tmm3\",\n+  \"%tmm4\", \"%tmm5\", \"%tmm6\", \"%tmm7\"\n+};\n+\n static const char **names_mask;\n static const char *intel_names_mask[] = {\n   \"k0\", \"k1\", \"k2\", \"k3\", \"k4\", \"k5\", \"k6\", \"k7\"\n@@ -3484,6 +3547,10 @@ static const struct dis386 reg_table[][8] = {\n     { MOD_TABLE (MOD_VEX_0FAE_REG_2) },\n     { MOD_TABLE (MOD_VEX_0FAE_REG_3) },\n   },\n+  /* REG_VEX_0F3849_X86_64_P_0_W_0_M_1 */\n+  {\n+    { RM_TABLE (RM_VEX_0F3849_X86_64_P_0_W_0_M_1_R_0) },\n+  },\n   /* REG_VEX_0F38F3 */\n   {\n     { Bad_Opcode },\n@@ -5865,6 +5932,22 @@ static const struct dis386 prefix_table[][4] = {\n     { \"vpsllv%LW\", { XM, Vex, EXx }, 0 },\n   },\n \n+  /* PREFIX_VEX_0F3849_X86_64 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0F3849_X86_64_P_0) },\n+    { Bad_Opcode },\n+    { VEX_W_TABLE (VEX_W_0F3849_X86_64_P_2) },\n+    { VEX_W_TABLE (VEX_W_0F3849_X86_64_P_3) },\n+  },\n+\n+  /* PREFIX_VEX_0F384B_X86_64 */\n+  {\n+    { Bad_Opcode },\n+    { VEX_W_TABLE (VEX_W_0F384B_X86_64_P_1) },\n+    { VEX_W_TABLE (VEX_W_0F384B_X86_64_P_2) },\n+    { VEX_W_TABLE (VEX_W_0F384B_X86_64_P_3) },\n+  },\n+\n   /* PREFIX_VEX_0F3858 */\n   {\n     { Bad_Opcode },\n@@ -5886,6 +5969,21 @@ static const struct dis386 prefix_table[][4] = {\n     { MOD_TABLE (MOD_VEX_0F385A_PREFIX_2) },\n   },\n \n+  /* PREFIX_VEX_0F385C_X86_64 */\n+  {\n+    { Bad_Opcode },\n+    { VEX_W_TABLE (VEX_W_0F385C_X86_64_P_1) },\n+    { Bad_Opcode },\n+  },\n+\n+  /* PREFIX_VEX_0F385E_X86_64 */\n+  {\n+    { VEX_W_TABLE (VEX_W_0F385E_X86_64_P_0) },\n+    { VEX_W_TABLE (VEX_W_0F385E_X86_64_P_1) },\n+    { VEX_W_TABLE (VEX_W_0F385E_X86_64_P_2) },\n+    { VEX_W_TABLE (VEX_W_0F385E_X86_64_P_3) },\n+  },\n+\n   /* PREFIX_VEX_0F3878 */\n   {\n     { Bad_Opcode },\n@@ -6901,6 +6999,30 @@ static const struct dis386 x86_64_table[][2] = {\n     { \"lidt{Q|Q}\", { M }, 0 },\n     { \"lidt\", { M }, 0 },\n   },\n+\n+  /* X86_64_VEX_0F3849 */\n+  {\n+    { Bad_Opcode },\n+    { PREFIX_TABLE (PREFIX_VEX_0F3849_X86_64) },\n+  },\n+\n+  /* X86_64_VEX_0F384B */\n+  {\n+    { Bad_Opcode },\n+    { PREFIX_TABLE (PREFIX_VEX_0F384B_X86_64) },\n+  },\n+\n+  /* X86_64_VEX_0F385C */\n+  {\n+    { Bad_Opcode },\n+    { PREFIX_TABLE (PREFIX_VEX_0F385C_X86_64) },\n+  },\n+\n+  /* X86_64_VEX_0F385E */\n+  {\n+    { Bad_Opcode },\n+    { PREFIX_TABLE (PREFIX_VEX_0F385E_X86_64) },\n+  },\n };\n \n static const struct dis386 three_byte_table[][256] = {\n@@ -8742,9 +8864,9 @@ static const struct dis386 vex_table[][256] = {\n     { PREFIX_TABLE (PREFIX_VEX_0F3847) },\n     /* 48 */\n     { Bad_Opcode },\n+    { X86_64_TABLE (X86_64_VEX_0F3849) },\n     { Bad_Opcode },\n-    { Bad_Opcode },\n-    { Bad_Opcode },\n+    { X86_64_TABLE (X86_64_VEX_0F384B) },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -8763,9 +8885,9 @@ static const struct dis386 vex_table[][256] = {\n     { PREFIX_TABLE (PREFIX_VEX_0F3859) },\n     { PREFIX_TABLE (PREFIX_VEX_0F385A) },\n     { Bad_Opcode },\n+    { X86_64_TABLE (X86_64_VEX_0F385C) },\n     { Bad_Opcode },\n-    { Bad_Opcode },\n-    { Bad_Opcode },\n+    { X86_64_TABLE (X86_64_VEX_0F385E) },\n     { Bad_Opcode },\n     /* 60 */\n     { Bad_Opcode },\n@@ -9503,12 +9625,71 @@ static const struct dis386 vex_len_table[][2] = {\n     { \"vphminposuw\",\t{ XM, EXx }, 0 },\n   },\n \n+   /* VEX_LEN_0F3849_X86_64_P_0_W_0_M_0 */\n+  {\n+    { \"ldtilecfg\", { M }, 0 },\n+  },\n+\n+  /* VEX_LEN_0F3849_X86_64_P_0_W_0_M_1_REG_0_RM_0 */\n+  {\n+    { \"tilerelease\", { Skip_MODRM }, 0 },\n+  },\n+\n+  /* VEX_LEN_0F3849_X86_64_P_2_W_0_M_0 */\n+  {\n+    { \"sttilecfg\", { M }, 0 },\n+  },\n+\n+  /* VEX_LEN_0F3849_X86_64_P_3_W_0_M_0 */\n+  {\n+    { \"tilezero\", { TMM, Skip_MODRM }, 0 },\n+  },\n+\n+  /* VEX_LEN_0F384B_X86_64_P_1_W_0_M_0 */\n+  {\n+    { \"tilestored\", { MVexSIBMEM, TMM }, 0 },\n+  },\n+  /* VEX_LEN_0F384B_X86_64_P_2_W_0_M_0 */\n+  {\n+    { \"tileloaddt1\", { TMM, MVexSIBMEM }, 0 },\n+  },\n+\n+  /* VEX_LEN_0F384B_X86_64_P_3_W_0_M_0 */\n+  {\n+    { \"tileloadd\", { TMM, MVexSIBMEM }, 0 },\n+  },\n+\n   /* VEX_LEN_0F385A_P_2_M_0 */\n   {\n     { Bad_Opcode },\n     { VEX_W_TABLE (VEX_W_0F385A_P_2_M_0) },\n   },\n \n+  /* VEX_LEN_0F385C_X86_64_P_1_W_0_M_0 */\n+  {\n+    { \"tdpbf16ps\", { TMM, EXtmm, VexTmm }, 0 },\n+  },\n+\n+  /* VEX_LEN_0F385E_X86_64_P_0_W_0_M_0 */\n+  {\n+    { \"tdpbuud\", {TMM, EXtmm, VexTmm }, 0 },\n+  },\n+\n+  /* VEX_LEN_0F385E_X86_64_P_1_W_0_M_0 */\n+  {\n+    { \"tdpbsud\", {TMM, EXtmm, VexTmm }, 0 },\n+  },\n+\n+  /* VEX_LEN_0F385E_X86_64_P_2_W_0_M_0 */\n+  {\n+    { \"tdpbusd\", {TMM, EXtmm, VexTmm }, 0 },\n+  },\n+\n+  /* VEX_LEN_0F385E_X86_64_P_3_W_0_M_0 */\n+  {\n+    { \"tdpbssd\", {TMM, EXtmm, VexTmm }, 0 },\n+  },\n+\n   /* VEX_LEN_0F38DB_P_2 */\n   {\n     { \"vaesimc\",\t{ XM, EXx }, 0 },\n@@ -10201,6 +10382,30 @@ static const struct dis386 vex_w_table[][2] = {\n     /* VEX_W_0F3846_P_2 */\n     { \"vpsravd\",\t{ XM, Vex, EXx }, 0 },\n   },\n+  {\n+    /* VEX_W_0F3849_X86_64_P_0 */\n+    { MOD_TABLE (MOD_VEX_0F3849_X86_64_P_0_W_0) },\n+  },\n+  {\n+    /* VEX_W_0F3849_X86_64_P_2 */\n+    { MOD_TABLE (MOD_VEX_0F3849_X86_64_P_2_W_0) },\n+  },\n+  {\n+    /* VEX_W_0F3849_X86_64_P_3 */\n+    { MOD_TABLE (MOD_VEX_0F3849_X86_64_P_3_W_0) },\n+  },\n+  {\n+    /* VEX_W_0F384B_X86_64_P_1 */\n+    { MOD_TABLE (MOD_VEX_0F384B_X86_64_P_1_W_0) },\n+  },\n+  {\n+    /* VEX_W_0F384B_X86_64_P_2 */\n+    { MOD_TABLE (MOD_VEX_0F384B_X86_64_P_2_W_0) },\n+  },\n+  {\n+    /* VEX_W_0F384B_X86_64_P_3 */\n+    { MOD_TABLE (MOD_VEX_0F384B_X86_64_P_3_W_0) },\n+  },\n   {\n     /* VEX_W_0F3858_P_2 */\n     { \"vpbroadcastd\", { XM, EXxmm_md }, 0 },\n@@ -10213,6 +10418,26 @@ static const struct dis386 vex_w_table[][2] = {\n     /* VEX_W_0F385A_P_2_M_0 */\n     { \"vbroadcasti128\", { XM, Mxmm }, 0 },\n   },\n+  {\n+    /* VEX_W_0F385C_X86_64_P_1 */\n+    { MOD_TABLE (MOD_VEX_0F385C_X86_64_P_1_W_0) },\n+  },\n+  {\n+    /* VEX_W_0F385E_X86_64_P_0 */\n+    { MOD_TABLE (MOD_VEX_0F385E_X86_64_P_0_W_0) },\n+  },\n+  {\n+    /* VEX_W_0F385E_X86_64_P_1 */\n+    { MOD_TABLE (MOD_VEX_0F385E_X86_64_P_1_W_0) },\n+  },\n+  {\n+    /* VEX_W_0F385E_X86_64_P_2 */\n+    { MOD_TABLE (MOD_VEX_0F385E_X86_64_P_2_W_0) },\n+  },\n+  {\n+    /* VEX_W_0F385E_X86_64_P_3 */\n+    { MOD_TABLE (MOD_VEX_0F385E_X86_64_P_3_W_0) },\n+  },\n   {\n     /* VEX_W_0F3878_P_2 */\n     { \"vpbroadcastb\",\t{ XM, EXxmm_mb }, 0 },\n@@ -10805,6 +11030,57 @@ static const struct dis386 mod_table[][2] = {\n     /* MOD_0F382A_PREFIX_2 */\n     { \"movntdqa\",\t{ XM, Mx }, 0 },\n   },\n+  {\n+    /* MOD_VEX_0F3849_X86_64_P_0_W_0 */\n+    { VEX_LEN_TABLE (VEX_LEN_0F3849_X86_64_P_0_W_0_M_0) },\n+    { REG_TABLE (REG_VEX_0F3849_X86_64_P_0_W_0_M_1) },\n+  },\n+  {\n+    /* MOD_VEX_0F3849_X86_64_P_2_W_0 */\n+    { VEX_LEN_TABLE (VEX_LEN_0F3849_X86_64_P_2_W_0_M_0) },\n+  },\n+  {\n+    /* MOD_VEX_0F3849_X86_64_P_3_W_0 */\n+    { Bad_Opcode },\n+    { VEX_LEN_TABLE (VEX_LEN_0F3849_X86_64_P_3_W_0_M_0) },\n+  },\n+  {\n+    /* MOD_VEX_0F384B_X86_64_P_1_W_0 */\n+    { VEX_LEN_TABLE (VEX_LEN_0F384B_X86_64_P_1_W_0_M_0) },\n+  },\n+  {\n+    /* MOD_VEX_0F384B_X86_64_P_2_W_0 */\n+    { VEX_LEN_TABLE (VEX_LEN_0F384B_X86_64_P_2_W_0_M_0) },\n+  },\n+  {\n+    /* MOD_VEX_0F384B_X86_64_P_3_W_0 */\n+    { VEX_LEN_TABLE (VEX_LEN_0F384B_X86_64_P_3_W_0_M_0) },\n+  },\n+  {\n+    /* MOD_VEX_0F385C_X86_64_P_1_W_0 */\n+    { Bad_Opcode },\n+    { VEX_LEN_TABLE (VEX_LEN_0F385C_X86_64_P_1_W_0_M_0) },\n+  },\n+  {\n+    /* MOD_VEX_0F385E_X86_64_P_0_W_0 */\n+    { Bad_Opcode },\n+    { VEX_LEN_TABLE (VEX_LEN_0F385E_X86_64_P_0_W_0_M_0) },\n+  },\n+  {\n+    /* MOD_VEX_0F385E_X86_64_P_1_W_0 */\n+    { Bad_Opcode },\n+    { VEX_LEN_TABLE (VEX_LEN_0F385E_X86_64_P_1_W_0_M_0) },\n+  },\n+  {\n+    /* MOD_VEX_0F385E_X86_64_P_2_W_0 */\n+    { Bad_Opcode },\n+    { VEX_LEN_TABLE (VEX_LEN_0F385E_X86_64_P_2_W_0_M_0) },\n+  },\n+  {\n+    /* MOD_VEX_0F385E_X86_64_P_3_W_0 */\n+    { Bad_Opcode },\n+    { VEX_LEN_TABLE (VEX_LEN_0F385E_X86_64_P_3_W_0_M_0) },\n+  },\n   {\n     /* MOD_0F38F5_PREFIX_2 */\n     { \"wrussK\",\t\t{ M, Gdq }, PREFIX_OPCODE },\n@@ -11371,6 +11647,10 @@ static const struct dis386 rm_table[][8] = {\n     { \"sfence\",\t\t{ Skip_MODRM }, 0 },\n \n   },\n+  {\n+    /* RM_VEX_0F3849_X86_64_P_0_W_0_M_1_R_0 */\n+    { VEX_LEN_TABLE (VEX_LEN_0F3849_X86_64_P_0_W_0_M_1_REG_0_RM_0) },\n+  },\n };\n \n #define INTERNAL_DISASSEMBLER_ERROR _(\"<internal disassembler error>\")\n@@ -12267,6 +12547,7 @@ print_insn (bfd_vma pc, disassemble_info *info)\n       names_xmm = intel_names_xmm;\n       names_ymm = intel_names_ymm;\n       names_zmm = intel_names_zmm;\n+      names_tmm = intel_names_tmm;\n       index64 = intel_index64;\n       index32 = intel_index32;\n       names_mask = intel_names_mask;\n@@ -12289,6 +12570,7 @@ print_insn (bfd_vma pc, disassemble_info *info)\n       names_xmm = att_names_xmm;\n       names_ymm = att_names_ymm;\n       names_zmm = att_names_zmm;\n+      names_tmm = att_names_tmm;\n       index64 = att_index64;\n       index32 = att_index32;\n       names_mask = att_names_mask;\n@@ -14444,6 +14726,15 @@ OP_E_memory (int bytemode, int sizeflag)\n \t  base = sib.base;\n \t  codep++;\n \t}\n+      else\n+\t{\n+\t  /* mandatory non-vector SIB must have sib */\n+\t  if (bytemode == vex_sibmem_mode)\n+\t    {\n+\t      oappend (\"(bad)\");\n+\t      return;\n+\t    }\n+\t}\n       rbase = base + add;\n \n       switch (modrm.mod)\n@@ -15471,6 +15762,7 @@ OP_XMM (int bytemode, int sizeflag ATTRIBUTE_UNUSED)\n       && bytemode != xmmq_mode\n       && bytemode != evex_half_bcst_xmmq_mode\n       && bytemode != ymm_mode\n+      && bytemode != tmm_mode\n       && bytemode != scalar_mode)\n     {\n       switch (vex.length)\n@@ -15509,6 +15801,16 @@ OP_XMM (int bytemode, int sizeflag ATTRIBUTE_UNUSED)\n \t  abort ();\n \t}\n     }\n+  else if (bytemode == tmm_mode)\n+    {\n+      modrm.reg = reg;\n+      if (reg >= 8)\n+\t{\n+\t  oappend (\"(bad)\");\n+\t  return;\n+\t}\n+      names = names_tmm;\n+    }\n   else if (bytemode == ymm_mode)\n     names = names_ymm;\n   else\n@@ -15633,6 +15935,7 @@ OP_EX (int bytemode, int sizeflag)\n       && bytemode != xmmq_mode\n       && bytemode != evex_half_bcst_xmmq_mode\n       && bytemode != ymm_mode\n+      && bytemode != tmm_mode\n       && bytemode != d_scalar_swap_mode\n       && bytemode != q_scalar_swap_mode\n       && bytemode != vex_scalar_w_dq_mode)\n@@ -15668,6 +15971,16 @@ OP_EX (int bytemode, int sizeflag)\n \t  abort ();\n \t}\n     }\n+  else if (bytemode == tmm_mode)\n+    {\n+      modrm.rm = reg;\n+      if (reg >= 8)\n+\t{\n+\t  oappend (\"(bad)\");\n+\t  return;\n+\t}\n+      names = names_tmm;\n+    }\n   else if (bytemode == ymm_mode)\n     names = names_ymm;\n   else\n@@ -16223,6 +16536,34 @@ OP_VEX (int bytemode, int sizeflag ATTRIBUTE_UNUSED)\n       return;\n     }\n \n+  if (bytemode == tmm_mode)\n+    {\n+      /* All 3 TMM registers must be distinct.  */\n+      if (reg >= 8)\n+\toappend (\"(bad)\");\n+      else\n+\t{\n+\t  /* This must be the 3rd operand.  */\n+\t  if (obufp != op_out[2])\n+\t    abort ();\n+\t  oappend (names_tmm[reg]);\n+\t  if (reg == modrm.reg || reg == modrm.rm)\n+\t    strcpy (obufp, \"/(bad)\");\n+\t}\n+\n+      if (modrm.reg == modrm.rm || modrm.reg == reg || modrm.rm == reg)\n+\t{\n+\t  if (modrm.reg <= 8\n+\t      && (modrm.reg == modrm.rm || modrm.reg == reg))\n+\t    strcat (op_out[0], \"/(bad)\");\n+\t  if (modrm.rm <= 8\n+\t      && (modrm.rm == modrm.reg || modrm.rm == reg))\n+\t    strcat (op_out[1], \"/(bad)\");\n+\t}\n+\n+      return;\n+    }\n+\n   switch (vex.length)\n     {\n     case 128:"
    },
    {
      "sha": "33341550715c96c77efeee219bb3a7df0d000272",
      "filename": "opcodes/i386-gen.c",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/opcodes/i386-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/opcodes/i386-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-gen.c?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -297,6 +297,12 @@ static initializer cpu_flag_init[] =\n     \"CpuWAITPKG\" },\n   { \"CPU_CLDEMOTE_FLAGS\",\n     \"CpuCLDEMOTE\" },\n+  { \"CPU_AMX_INT8_FLAGS\",\n+    \"CpuAMX_INT8\" },\n+  { \"CPU_AMX_BF16_FLAGS\",\n+    \"CpuAMX_BF16\" },\n+  { \"CPU_AMX_TILE_FLAGS\",\n+    \"CpuAMX_TILE\" },\n   { \"CPU_MOVDIRI_FLAGS\",\n     \"CpuMOVDIRI\" },\n   { \"CPU_MOVDIR64B_FLAGS\",\n@@ -383,6 +389,12 @@ static initializer cpu_flag_init[] =\n     \"CpuAVX512_BITALG\" },\n   { \"CPU_ANY_AVX512_BF16_FLAGS\",\n     \"CpuAVX512_BF16\" },\n+  { \"CPU_ANY_AMX_INT8_FLAGS\",\n+    \"CpuAMX_INT8\" },\n+  { \"CPU_ANY_AMX_BF16_FLAGS\",\n+    \"CpuAMX_BF16\" },\n+  { \"CPU_ANY_AMX_TILE_FLAGS\",\n+    \"CpuAMX_TILE|CpuAMX_INT8|CpuAMX_BF16\" },\n   { \"CPU_ANY_MOVDIRI_FLAGS\",\n     \"CpuMOVDIRI\" },\n   { \"CPU_ANY_MOVDIR64B_FLAGS\",\n@@ -459,6 +471,8 @@ static initializer operand_type_init[] =\n     \"Class=RegSIMD|Ymmword\" },\n   { \"OPERAND_TYPE_REGZMM\",\n     \"Class=RegSIMD|Zmmword\" },\n+  { \"OPERAND_TYPE_REGTMM\",\n+    \"Class=RegSIMD|Tmmword\" },\n   { \"OPERAND_TYPE_REGMASK\",\n     \"Class=RegMask\" },\n   { \"OPERAND_TYPE_REGBND\",\n@@ -611,6 +625,9 @@ static bitfield cpu_flags[] =\n   BITFIELD (CpuPCONFIG),\n   BITFIELD (CpuWAITPKG),\n   BITFIELD (CpuCLDEMOTE),\n+  BITFIELD (CpuAMX_INT8),\n+  BITFIELD (CpuAMX_BF16),\n+  BITFIELD (CpuAMX_TILE),\n   BITFIELD (CpuMOVDIRI),\n   BITFIELD (CpuMOVDIR64B),\n   BITFIELD (CpuENQCMD),\n@@ -741,6 +758,7 @@ static bitfield operand_types[] =\n   BITFIELD (Xmmword),\n   BITFIELD (Ymmword),\n   BITFIELD (Zmmword),\n+  BITFIELD (Tmmword),\n   BITFIELD (Unspecified),\n #ifdef OTUnused\n   BITFIELD (OTUnused),"
    },
    {
      "sha": "8da95bb57ea767e0ef35f32fe18bd6835c413448",
      "filename": "opcodes/i386-init.h",
      "status": "modified",
      "additions": 279,
      "deletions": 227,
      "changes": 506,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/opcodes/i386-init.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/opcodes/i386-init.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-init.h?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -24,1585 +24,1637 @@\n       1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n-      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1 } }\n+      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1 } }\n \n #define CPU_GENERIC32_FLAGS \\\n   { { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_GENERIC64_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_NONE_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_I186_FLAGS \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_I286_FLAGS \\\n   { { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_I386_FLAGS \\\n   { { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_I486_FLAGS \\\n   { { 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_I586_FLAGS \\\n   { { 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_I686_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_PENTIUMPRO_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_P2_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_P3_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_P4_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_NOCONA_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_CORE_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_CORE2_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_COREI7_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_K6_FLAGS \\\n   { { 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_K6_2_FLAGS \\\n   { { 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ATHLON_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, \\\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_K8_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, \\\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AMDFAM10_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, \\\n       1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_BDVER1_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, \\\n       0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_BDVER2_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, \\\n       0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, \\\n       1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_BDVER3_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, \\\n       0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, \\\n       1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_BDVER4_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, \\\n       0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, \\\n       1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ZNVER1_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, \\\n       0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, \\\n       1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ZNVER2_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, \\\n       0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, \\\n       1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, \\\n-      0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0 } }\n \n #define CPU_BTVER1_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, \\\n       0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_BTVER2_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, \\\n       0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, \\\n       1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_8087_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_287_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_387_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_687_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_CMOV_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_FXSR_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_CLFLUSH_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_NOP_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_SYSCALL_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_MMX_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_SSE_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_SSE2_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_SSE3_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_SSSE3_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_SSE4_1_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_SSE4_2_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_VMX_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_SMX_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_XSAVE_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_XSAVEOPT_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AES_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_PCLMUL_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_FMA_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_FMA4_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_XOP_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_LWP_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_BMI_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_TBM_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_MOVBE_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_CX16_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_RDTSCP_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_EPT_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_FSGSBASE_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_RDRND_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_F16C_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_BMI2_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_LZCNT_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_POPCNT_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_HLE_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_RTM_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_INVPCID_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_VMFUNC_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_3DNOW_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_3DNOWA_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, \\\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_PADLOCK_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_SVME_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_SSE4A_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ABM_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX2_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX512F_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX512CD_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX512ER_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX512PF_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX512DQ_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX512BW_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, \\\n       1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX512VL_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX512IFMA_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX512VBMI_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX512_4FMAPS_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX512_4VNNIW_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX512_VPOPCNTDQ_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX512_VBMI2_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX512_VNNI_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX512_BITALG_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX512_BF16_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_L1OM_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n-      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1 } }\n+      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1 } }\n \n #define CPU_K1OM_FLAGS \\\n   { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, \\\n-      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1 } }\n+      1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1 } }\n \n #define CPU_IAMCU_FLAGS \\\n   { { 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ADX_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_RDSEED_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_PRFCHW_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_SMAP_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_MPX_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_SHA_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_CLFLUSHOPT_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_XSAVES_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_XSAVEC_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_PREFETCHWT1_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_SE1_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_CLWB_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_CLZERO_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_MWAITX_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_OSPKE_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_RDPID_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_PTWRITE_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_IBT_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_SHSTK_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_GFNI_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_VAES_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_VPCLMULQDQ_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_WBNOINVD_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_PCONFIG_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_WAITPKG_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_CLDEMOTE_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+\n+#define CPU_AMX_INT8_FLAGS \\\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+\n+#define CPU_AMX_BF16_FLAGS \\\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+\n+#define CPU_AMX_TILE_FLAGS \\\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_MOVDIRI_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_MOVDIR64B_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ENQCMD_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_SERIALIZE_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_AVX512_VP2INTERSECT_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_RDPRU_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_MCOMMIT_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 } }\n \n #define CPU_SEV_ES_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 } }\n \n #define CPU_TSXLDTRK_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 } }\n \n #define CPU_ANY_X87_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_287_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_387_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_687_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_CMOV_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_FXSR_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_MMX_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, \\\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_SSE_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_SSE2_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_SSE3_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_SSSE3_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_SSE4_1_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_SSE4_2_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_SSE4A_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, \\\n       1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX2_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, \\\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX512F_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, \\\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n       1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX512CD_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX512ER_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX512PF_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX512DQ_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX512BW_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX512VL_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX512IFMA_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX512VBMI_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX512_4FMAPS_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX512_4VNNIW_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX512_VPOPCNTDQ_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_IBT_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_SHSTK_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX512_VBMI2_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX512_VNNI_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX512_BITALG_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX512_BF16_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+\n+#define CPU_ANY_AMX_INT8_FLAGS \\\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+\n+#define CPU_ANY_AMX_BF16_FLAGS \\\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+\n+#define CPU_ANY_AMX_TILE_FLAGS \\\n+  { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, \\\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_MOVDIRI_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_MOVDIR64B_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_ENQCMD_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_SERIALIZE_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_AVX512_VP2INTERSECT_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }\n \n #define CPU_ANY_TSXLDTRK_FLAGS \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 } }\n \n \n #define OPERAND_TYPE_NONE \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG8 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG16 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG32 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REG64 \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM1 \\\n   { { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM8 \\\n   { { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM8S \\\n   { { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16 \\\n   { { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32 \\\n   { { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32S \\\n   { { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM64 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_BASEINDEX \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP8 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP16 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP32 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP32S \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP64 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_INOUTPORTREG \\\n   { { 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_SHIFTCOUNT \\\n   { { 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_CONTROL \\\n   { { 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_TEST \\\n   { { 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DEBUG \\\n   { { 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_FLOATREG \\\n   { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      1, 0, 0, 0, 0, 0 } }\n+      1, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_FLOATACC \\\n   { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      1, 0, 0, 0, 0, 0 } }\n+      1, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_SREG \\\n   { { 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGMMX \\\n   { { 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGXMM \\\n   { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 1, 0, 0, 0, 0 } }\n+      0, 1, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGYMM \\\n   { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 1, 0, 0, 0 } }\n+      0, 0, 1, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGZMM \\\n   { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 1, 0, 0 } }\n+      0, 0, 0, 1, 0, 0, 0 } }\n+\n+#define OPERAND_TYPE_REGTMM \\\n+  { { 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n+      0, 0, 0, 0, 1, 0, 0 } }\n \n #define OPERAND_TYPE_REGMASK \\\n   { { 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_REGBND \\\n   { { 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC8 \\\n   { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC16 \\\n   { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC32 \\\n   { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ACC64 \\\n   { { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_DISP16_32 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ANYDISP \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32 \\\n   { { 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32S \\\n   { { 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM16_32_32S \\\n   { { 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_64 \\\n   { { 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_DISP32 \\\n   { { 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM64_DISP64 \\\n   { { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_64_DISP32 \\\n   { { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_IMM32_32S_64_DISP32_64 \\\n   { { 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }\n \n #define OPERAND_TYPE_ANYIMM \\\n   { { 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, \\\n-      0, 0, 0, 0, 0, 0 } }\n+      0, 0, 0, 0, 0, 0, 0 } }"
    },
    {
      "sha": "b8a6dfc25c07daf58e3fd3c73ba617ccb7c55546",
      "filename": "opcodes/i386-opc.h",
      "status": "modified",
      "additions": 15,
      "deletions": 1,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/opcodes/i386-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/opcodes/i386-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.h?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -223,6 +223,12 @@ enum\n   /* CET instructions support required */\n   CpuIBT,\n   CpuSHSTK,\n+  /* AMX-INT8 instructions required */\n+  CpuAMX_INT8,\n+  /* AMX-BF16 instructions required */\n+  CpuAMX_BF16,\n+  /* AMX-TILE instructions required */\n+  CpuAMX_TILE,\n   /* GFNI instructions required */\n   CpuGFNI,\n   /* VAES instructions required */\n@@ -372,6 +378,9 @@ typedef union i386_cpu_flags\n       unsigned int cpuptwrite:1;\n       unsigned int cpuibt:1;\n       unsigned int cpushstk:1;\n+      unsigned int cpuamx_int8:1;\n+      unsigned int cpuamx_bf16:1;\n+      unsigned int cpuamx_tile:1;\n       unsigned int cpugfni:1;\n       unsigned int cpuvaes:1;\n       unsigned int cpuvpclmulqdq:1;\n@@ -574,7 +583,9 @@ enum\n #define VECSIB128\t1\n #define VECSIB256\t2\n #define VECSIB512\t3\n+#define SIBMEM\t\t4\n   SIB,\n+\n   /* SSE to AVX support required */\n   SSE2AVX,\n   /* No AVX equivalent */\n@@ -702,7 +713,7 @@ typedef struct i386_opcode_modifier\n   unsigned int vexw:2;\n   unsigned int vexopcode:3;\n   unsigned int vexsources:2;\n-  unsigned int sib:2;\n+  unsigned int sib:3;\n   unsigned int sse2avx:1;\n   unsigned int noavx:1;\n   unsigned int evex:3;\n@@ -807,6 +818,8 @@ enum\n   Ymmword,\n   /* ZMMWORD size.  */\n   Zmmword,\n+  /* TMMWORD size.  */\n+  Tmmword,\n   /* Unspecified memory size.  */\n   Unspecified,\n \n@@ -851,6 +864,7 @@ typedef union i386_operand_type\n       unsigned int xmmword:1;\n       unsigned int ymmword:1;\n       unsigned int zmmword:1;\n+      unsigned int tmmword:1;\n       unsigned int unspecified:1;\n #ifdef OTUnused\n       unsigned int unused:(OTNumOfBits - OTUnused);"
    },
    {
      "sha": "bb7fb02dde4d7c7fd1aaeb82be978d90d41dc079",
      "filename": "opcodes/i386-opc.tbl",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/opcodes/i386-opc.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/opcodes/i386-opc.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.tbl?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -52,6 +52,7 @@\n #define RegXMM Class=RegSIMD|Xmmword\n #define RegYMM Class=RegSIMD|Ymmword\n #define RegZMM Class=RegSIMD|Zmmword\n+#define RegTMM Class=RegSIMD|Tmmword\n \n #define RegMask Class=RegMask\n \n@@ -88,6 +89,7 @@\n #define VecSIB128 SIB=VECSIB128\n #define VecSIB256 SIB=VECSIB256\n #define VecSIB512 SIB=VECSIB512\n+#define Sibmem SIB=SIBMEM|Modrm\n \n #define EVex128 EVex=EVEX128\n #define EVex256 EVex=EVEX256\n@@ -4093,3 +4095,24 @@ xsusldtrk, 0, 0xf20f01e8, None, 3, CpuTSXLDTRK, No_bSuf|No_wSuf|No_lSuf|No_sSuf|\n xresldtrk, 0, 0xf20f01e9, None, 3, CpuTSXLDTRK, No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { 0 }\n \n // TSXLDTRK instructions end.\n+\n+// AMX instructions.\n+\n+ldtilecfg, 1, 0x49, None, 1, CpuAMX_TILE|Cpu64, Modrm|Vex128|VexOpcode=1|VexW0|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Unspecified|BaseIndex }\n+sttilecfg, 1, 0x6649, None, 1, CpuAMX_TILE|Cpu64, Modrm|Vex128|VexOpcode=1|VexW0|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Unspecified|BaseIndex }\n+\n+tdpbf16ps, 3, 0xf35c, None, 1, CpuAMX_BF16|Cpu64, Modrm|Vex128|VexOpcode=1|VexVVVV=1|VexW0|SwapSources|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { RegTMM, RegTMM, RegTMM }\n+tdpbssd, 3, 0xf25e, None, 1, CpuAMX_INT8|Cpu64, Modrm|Vex128|VexOpcode=1|VexVVVV=1|VexW0|SwapSources|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { RegTMM, RegTMM, RegTMM }\n+tdpbuud, 3, 0x5e,   None, 1, CpuAMX_INT8|Cpu64, Modrm|Vex128|VexOpcode=1|VexVVVV=1|VexW0|SwapSources|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { RegTMM, RegTMM, RegTMM }\n+tdpbusd, 3, 0x665e, None, 1, CpuAMX_INT8|Cpu64, Modrm|Vex128|VexOpcode=1|VexVVVV=1|VexW0|SwapSources|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { RegTMM, RegTMM, RegTMM }\n+tdpbsud, 3, 0xf35e, None, 1, CpuAMX_INT8|Cpu64, Modrm|Vex128|VexOpcode=1|VexVVVV=1|VexW0|SwapSources|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { RegTMM, RegTMM, RegTMM }\n+\n+tileloadd, 2, 0xf24b, None, 1, CpuAMX_TILE|Cpu64, Sibmem|Vex128|VexOpcode=1|VexW0|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Unspecified|BaseIndex, RegTMM }\n+tileloaddt1, 2, 0x664b, None, 1, CpuAMX_TILE|Cpu64, Sibmem|Vex128|VexOpcode=1|VexW0|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { Unspecified|BaseIndex, RegTMM }\n+tilestored, 2, 0xf34b, None, 1, CpuAMX_TILE|Cpu64, Sibmem|Vex128|VexOpcode=1|VexW0|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { RegTMM, Unspecified|BaseIndex }\n+\n+tilerelease, 0, 0x49c0, None, 2, CpuAMX_TILE|Cpu64, Vex128|VexOpcode=1|VexW0|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { 0 }\n+\n+tilezero, 1, 0xf249, None, 1, CpuAMX_TILE|Cpu64, Modrm|Vex128|VexOpcode=1|VexW0|No_bSuf|No_wSuf|No_lSuf|No_sSuf|No_qSuf|No_ldSuf, { RegTMM }\n+\n+// AMX instructions end."
    },
    {
      "sha": "ca7eeba4885f1df247f003629b60c1de09482367",
      "filename": "opcodes/i386-reg.tbl",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/opcodes/i386-reg.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/opcodes/i386-reg.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-reg.tbl?ref=260cd341da23b7551e11719fb55f1d2f23523082",
      "patch": "@@ -278,6 +278,15 @@ zmm28, Class=RegSIMD|Zmmword, RegVRex|RegRex, 4, Dw2Inval, Dw2Inval\n zmm29, Class=RegSIMD|Zmmword, RegVRex|RegRex, 5, Dw2Inval, Dw2Inval\n zmm30, Class=RegSIMD|Zmmword, RegVRex|RegRex, 6, Dw2Inval, Dw2Inval\n zmm31, Class=RegSIMD|Zmmword, RegVRex|RegRex, 7, Dw2Inval, Dw2Inval\n+// TMM registers for AMX\n+tmm0, Class=RegSIMD|Tmmword, 0, 0, Dw2Inval, Dw2Inval\n+tmm1, Class=RegSIMD|Tmmword, 0, 1, Dw2Inval, Dw2Inval\n+tmm2, Class=RegSIMD|Tmmword, 0, 2, Dw2Inval, Dw2Inval\n+tmm3, Class=RegSIMD|Tmmword, 0, 3, Dw2Inval, Dw2Inval\n+tmm4, Class=RegSIMD|Tmmword, 0, 4, Dw2Inval, Dw2Inval\n+tmm5, Class=RegSIMD|Tmmword, 0, 5, Dw2Inval, Dw2Inval\n+tmm6, Class=RegSIMD|Tmmword, 0, 6, Dw2Inval, Dw2Inval\n+tmm7, Class=RegSIMD|Tmmword, 0, 7, Dw2Inval, Dw2Inval\n // Bound registers for MPX\n bnd0, Class=RegBND, 0, 0, Dw2Inval, Dw2Inval\n bnd1, Class=RegBND, 0, 1, Dw2Inval, Dw2Inval"
    },
    {
      "sha": "a3aa69175a3bae2e6606a86acbb25ca7de7d0156",
      "filename": "opcodes/i386-tbl.h",
      "status": "modified",
      "additions": 14295,
      "deletions": 14093,
      "changes": 28388,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/260cd341da23b7551e11719fb55f1d2f23523082/opcodes/i386-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/260cd341da23b7551e11719fb55f1d2f23523082/opcodes/i386-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-tbl.h?ref=260cd341da23b7551e11719fb55f1d2f23523082"
    }
  ]
}