{
  "sha": "6c9c307c67043b55a209af402246404d89f992c9",
  "node_id": "C_kwDOANOeidoAKDZjOWMzMDdjNjcwNDNiNTVhMjA5YWY0MDIyNDY0MDRkODlmOTkyYzk",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2022-01-28T02:50:32Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2022-02-06T21:03:46Z"
    },
    "message": "gdb: remove SYMBOL_DOMAIN macro\n\nAdd a getter and a setter for a symbol's domain.  Remove the\ncorresponding macro and adjust all callers.\n\nChange-Id: I54465b50ac89739c663859a726aef8cdc6e4b8f3",
    "tree": {
      "sha": "20a8edd6e245153957a63a702f8f2eef122867c6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/20a8edd6e245153957a63a702f8f2eef122867c6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6c9c307c67043b55a209af402246404d89f992c9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6c9c307c67043b55a209af402246404d89f992c9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6c9c307c67043b55a209af402246404d89f992c9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6c9c307c67043b55a209af402246404d89f992c9/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "66d7f48f8045adf266046df7ceb84161d5678cfa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/66d7f48f8045adf266046df7ceb84161d5678cfa",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/66d7f48f8045adf266046df7ceb84161d5678cfa"
    }
  ],
  "stats": {
    "total": 206,
    "additions": 107,
    "deletions": 99
  },
  "files": [
    {
      "sha": "0cb4aac10e33873bd57c3549e18bf39886969005",
      "filename": "gdb/ada-exp.y",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/ada-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/ada-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.y?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -290,7 +290,7 @@ ada_funcall (int nargs)\n   int array_arity = 0;\n   struct type *callee_t = nullptr;\n   if (vvo == nullptr\n-      || SYMBOL_DOMAIN (vvo->get_symbol ()) != UNDEF_DOMAIN)\n+      || vvo->get_symbol ()->domain () != UNDEF_DOMAIN)\n     {\n       struct value *callee_v = callee->evaluate (nullptr,\n \t\t\t\t\t\t pstate->expout.get (),\n@@ -1435,7 +1435,7 @@ write_ambiguous_var (struct parser_state *par_state,\n {\n   struct symbol *sym = new (&temp_parse_space) symbol ();\n \n-  SYMBOL_DOMAIN (sym) = UNDEF_DOMAIN;\n+  sym->set_domain (UNDEF_DOMAIN);\n   sym->set_linkage_name (obstack_strndup (&temp_parse_space, name, len));\n   sym->set_language (language_ada, nullptr);\n "
    },
    {
      "sha": "dd1be60456395b62a864b42ec7e30f9a7ffef865",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -4477,7 +4477,7 @@ lesseq_defined_than (struct symbol *sym0, struct symbol *sym1)\n {\n   if (sym0 == sym1)\n     return 1;\n-  if (SYMBOL_DOMAIN (sym0) != SYMBOL_DOMAIN (sym1)\n+  if (sym0->domain () != sym1->domain ()\n       || sym0->aclass () != sym1->aclass ())\n     return 0;\n \n@@ -5740,7 +5740,7 @@ ada_add_block_symbols (std::vector<struct block_symbol> &result,\n        sym != NULL;\n        sym = block_iter_match_next (lookup_name, &iter))\n     {\n-      if (symbol_matches_domain (sym->language (), SYMBOL_DOMAIN (sym), domain))\n+      if (symbol_matches_domain (sym->language (), sym->domain (), domain))\n \t{\n \t  if (sym->aclass () != LOC_UNRESOLVED)\n \t    {\n@@ -5780,7 +5780,7 @@ ada_add_block_symbols (std::vector<struct block_symbol> &result,\n       ALL_BLOCK_SYMBOLS (block, iter, sym)\n       {\n \tif (symbol_matches_domain (sym->language (),\n-\t\t\t\t   SYMBOL_DOMAIN (sym), domain))\n+\t\t\t\t   sym->domain (), domain))\n \t  {\n \t    int cmp;\n \n@@ -10411,7 +10411,7 @@ ada_var_value_operation::evaluate (struct type *expect_type,\n {\n   symbol *sym = std::get<0> (m_storage).symbol;\n \n-  if (SYMBOL_DOMAIN (sym) == UNDEF_DOMAIN)\n+  if (sym->domain () == UNDEF_DOMAIN)\n     /* Only encountered when an unresolved symbol occurs in a\n        context other than a function call, in which case, it is\n        invalid.  */\n@@ -10501,7 +10501,7 @@ ada_var_value_operation::resolve (struct expression *exp,\n \t\t\t\t  struct type *context_type)\n {\n   symbol *sym = std::get<0> (m_storage).symbol;\n-  if (SYMBOL_DOMAIN (sym) == UNDEF_DOMAIN)\n+  if (sym->domain () == UNDEF_DOMAIN)\n     {\n       block_symbol resolved\n \t= ada_resolve_variable (sym, std::get<0> (m_storage).block,\n@@ -10666,7 +10666,7 @@ ada_funcall_operation::evaluate (struct type *expect_type,\n   ada_var_value_operation *avv\n     = dynamic_cast<ada_var_value_operation *> (callee_op.get ());\n   if (avv != nullptr\n-      && SYMBOL_DOMAIN (avv->get_symbol ()) == UNDEF_DOMAIN)\n+      && avv->get_symbol ()->domain () == UNDEF_DOMAIN)\n     error (_(\"Unexpected unresolved symbol, %s, during evaluation\"),\n \t   avv->get_symbol ()->print_name ());\n \n@@ -10810,7 +10810,7 @@ ada_funcall_operation::resolve (struct expression *exp,\n     return false;\n \n   symbol *sym = avv->get_symbol ();\n-  if (SYMBOL_DOMAIN (sym) != UNDEF_DOMAIN)\n+  if (sym->domain () != UNDEF_DOMAIN)\n     return false;\n \n   const std::vector<operation_up> &args_up = std::get<1> (m_storage);"
    },
    {
      "sha": "7ec56c745aff4d963293e5745d3b16e55b4b98fa",
      "filename": "gdb/block.c",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/block.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/block.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/block.c?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -664,7 +664,7 @@ block_iter_match_next (const lookup_name_info &name,\n bool\n best_symbol (struct symbol *a, const domain_enum domain)\n {\n-  return (SYMBOL_DOMAIN (a) == domain\n+  return (a->domain () == domain\n \t  && a->aclass () != LOC_UNRESOLVED);\n }\n \n@@ -678,11 +678,10 @@ better_symbol (struct symbol *a, struct symbol *b, const domain_enum domain)\n   if (b == NULL)\n     return a;\n \n-  if (SYMBOL_DOMAIN (a) == domain\n-      && SYMBOL_DOMAIN (b) != domain)\n+  if (a->domain () == domain && b->domain () != domain)\n     return a;\n-  if (SYMBOL_DOMAIN (b) == domain\n-      && SYMBOL_DOMAIN (a) != domain)\n+\n+  if (b->domain () == domain && a->domain () != domain)\n     return b;\n \n   if (a->aclass () != LOC_UNRESOLVED && b->aclass () == LOC_UNRESOLVED)\n@@ -730,7 +729,7 @@ block_lookup_symbol (const struct block *block, const char *name,\n \t     make sure there is no \"better\" matching symbol, i.e., one with\n \t     exactly the same domain.  PR 16253.  */\n \t  if (symbol_matches_domain (sym->language (),\n-\t\t\t\t     SYMBOL_DOMAIN (sym), domain))\n+\t\t\t\t     sym->domain (), domain))\n \t    other = better_symbol (other, sym, domain);\n \t}\n       return other;\n@@ -751,7 +750,7 @@ block_lookup_symbol (const struct block *block, const char *name,\n       ALL_BLOCK_SYMBOLS_WITH_NAME (block, lookup_name, iter, sym)\n \t{\n \t  if (symbol_matches_domain (sym->language (),\n-\t\t\t\t     SYMBOL_DOMAIN (sym), domain))\n+\t\t\t\t     sym->domain (), domain))\n \t    {\n \t      sym_found = sym;\n \t      if (!SYMBOL_IS_ARGUMENT (sym))\n@@ -819,7 +818,7 @@ block_lookup_symbol_primary (const struct block *block, const char *name,\n \t STRUCT vs VAR domain symbols.  So if a matching symbol is found,\n \t make sure there is no \"better\" matching symbol, i.e., one with\n \t exactly the same domain.  PR 16253.  */\n-      if (symbol_matches_domain (sym->language (), SYMBOL_DOMAIN (sym), domain))\n+      if (symbol_matches_domain (sym->language (), sym->domain (), domain))\n \tother = better_symbol (other, sym, domain);\n     }\n \n@@ -846,7 +845,7 @@ block_find_symbol (const struct block *block, const char *name,\n     {\n       /* MATCHER is deliberately called second here so that it never sees\n \t a non-domain-matching symbol.  */\n-      if (symbol_matches_domain (sym->language (), SYMBOL_DOMAIN (sym), domain)\n+      if (symbol_matches_domain (sym->language (), sym->domain (), domain)\n \t  && matcher (sym, data))\n \treturn sym;\n     }"
    },
    {
      "sha": "8bf742161e7e773a410f72e79c2404e02840fd84",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -1491,7 +1491,7 @@ patch_opaque_types (struct symtab *s)\n \t but search the whole chain, as there may be several syms\n \t from different files with the same name.  */\n       if (real_sym->aclass () == LOC_TYPEDEF\n-\t  && SYMBOL_DOMAIN (real_sym) == VAR_DOMAIN\n+\t  && real_sym->domain () == VAR_DOMAIN\n \t  && SYMBOL_TYPE (real_sym)->code () == TYPE_CODE_PTR\n \t  && TYPE_LENGTH (TYPE_TARGET_TYPE (SYMBOL_TYPE (real_sym))) != 0)\n \t{\n@@ -1565,7 +1565,7 @@ process_coff_symbol (struct coff_symbol *cs,\n \n   /* default assumptions */\n   SYMBOL_VALUE (sym) = cs->c_value;\n-  SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+  sym->set_domain (VAR_DOMAIN);\n   sym->set_section_index (cs_to_section (cs, objfile));\n \n   if (ISFCN (cs->c_type))\n@@ -1653,7 +1653,7 @@ process_coff_symbol (struct coff_symbol *cs,\n \n \tcase C_TPDEF:\n \t  sym->set_aclass_index (LOC_TYPEDEF);\n-\t  SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+\t  sym->set_domain (VAR_DOMAIN);\n \n \t  /* If type has no name, give it one.  */\n \t  if (SYMBOL_TYPE (sym)->name () == 0)\n@@ -1708,7 +1708,7 @@ process_coff_symbol (struct coff_symbol *cs,\n \tcase C_UNTAG:\n \tcase C_ENTAG:\n \t  sym->set_aclass_index (LOC_TYPEDEF);\n-\t  SYMBOL_DOMAIN (sym) = STRUCT_DOMAIN;\n+\t  sym->set_domain (STRUCT_DOMAIN);\n \n \t  /* Some compilers try to be helpful by inventing \"fake\"\n \t     names for anonymous enums, structures, and unions, like\n@@ -2099,7 +2099,7 @@ coff_read_enum_type (int index, int length, int lastsym,\n \t  name = obstack_strdup (&objfile->objfile_obstack, name);\n \t  sym->set_linkage_name (name);\n \t  sym->set_aclass_index (LOC_CONST);\n-\t  SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+\t  sym->set_domain (VAR_DOMAIN);\n \t  SYMBOL_VALUE (sym) = ms->c_value;\n \t  add_symbol_to_list (sym, symlist);\n \t  nsyms++;"
    },
    {
      "sha": "41746c20e057169de0eeb4e9436fb9209911ebb3",
      "filename": "gdb/compile/compile-c-symbols.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/compile/compile-c-symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/compile/compile-c-symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-symbols.c?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -67,7 +67,7 @@ convert_one_symbol (compile_c_instance *context,\n   else\n     sym_type = context->convert_type (SYMBOL_TYPE (sym.symbol));\n \n-  if (SYMBOL_DOMAIN (sym.symbol) == STRUCT_DOMAIN)\n+  if (sym.symbol->domain () == STRUCT_DOMAIN)\n     {\n       /* Binding a tag, so we don't need to build a decl.  */\n       context->plugin ().tagbind (sym.symbol->natural_name (),"
    },
    {
      "sha": "3a24aa7dc8b00bc456e3872d7a1c73df2435529b",
      "filename": "gdb/compile/compile-cplus-symbols.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/compile/compile-cplus-symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/compile/compile-cplus-symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-symbols.c?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -58,7 +58,7 @@ convert_one_symbol (compile_cplus_instance *instance,\n   else\n     sym_type = instance->convert_type (SYMBOL_TYPE (sym.symbol));\n \n-  if (SYMBOL_DOMAIN (sym.symbol) == STRUCT_DOMAIN)\n+  if (sym.symbol->domain () == STRUCT_DOMAIN)\n     {\n       /* Nothing to do.  */\n     }\n@@ -374,7 +374,7 @@ gcc_cplus_convert_symbol (void *datum,\n \t    {\n \t      found = true;\n \t      convert_symbol_sym (instance, identifier, it,\n-\t\t\t\t  SYMBOL_DOMAIN (it.symbol));\n+\t\t\t\t  it.symbol->domain ());\n \t    }\n \t}\n "
    },
    {
      "sha": "2f8c039165946060e25b9762fa6ae9aa7abb1be9",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -451,7 +451,7 @@ ctf_add_enum_member_cb (const char *name, int enum_value, void *arg)\n       sym->set_language (language_c, &ccp->of->objfile_obstack);\n       sym->compute_and_set_names (name, false, ccp->of->per_bfd);\n       sym->set_aclass_index (LOC_CONST);\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       SYMBOL_TYPE (sym) = fip->ptype;\n       add_symbol_to_list (sym, ccp->builder->get_global_symbols ());\n     }\n@@ -479,7 +479,7 @@ new_symbol (struct ctf_context *ccp, struct type *type, ctf_id_t tid)\n \n       sym->set_language (language_c, &objfile->objfile_obstack);\n       sym->compute_and_set_names (name, false, objfile->per_bfd);\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       sym->set_aclass_index (LOC_OPTIMIZED_OUT);\n \n       if (type != nullptr)\n@@ -492,7 +492,7 @@ new_symbol (struct ctf_context *ccp, struct type *type, ctf_id_t tid)\n \t  case CTF_K_UNION:\n \t  case CTF_K_ENUM:\n \t    sym->set_aclass_index (LOC_TYPEDEF);\n-\t    SYMBOL_DOMAIN (sym) = STRUCT_DOMAIN;\n+\t    sym->set_domain (STRUCT_DOMAIN);\n \t    break;\n \t  case CTF_K_FUNCTION:\n \t    sym->set_aclass_index (LOC_STATIC);\n@@ -506,7 +506,7 @@ new_symbol (struct ctf_context *ccp, struct type *type, ctf_id_t tid)\n \t  case CTF_K_INTEGER:\n \t  case CTF_K_FLOAT:\n \t    sym->set_aclass_index (LOC_TYPEDEF);\n-\t    SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+\t    sym->set_domain (VAR_DOMAIN);\n \t    break;\n \t  case CTF_K_POINTER:\n \t    break;\n@@ -1170,7 +1170,7 @@ ctf_add_var_cb (const char *name, ctf_id_t id, void *arg)\n \tsym = new (&ccp->of->objfile_obstack) symbol;\n \tOBJSTAT (ccp->of, n_syms++);\n \tSYMBOL_TYPE (sym) = type;\n-\tSYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+\tsym->set_domain (VAR_DOMAIN);\n \tsym->set_aclass_index (LOC_OPTIMIZED_OUT);\n \tsym->compute_and_set_names (name, false, ccp->of->per_bfd);\n \tadd_symbol_to_list (sym, ccp->builder->get_file_symbols ());\n@@ -1206,7 +1206,7 @@ add_stt_entries (struct ctf_context *ccp, int functions)\n       sym = new (&ccp->of->objfile_obstack) symbol;\n       OBJSTAT (ccp->of, n_syms++);\n       SYMBOL_TYPE (sym) = type;\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       sym->set_aclass_index (LOC_STATIC);\n       sym->compute_and_set_names (tname, false, ccp->of->per_bfd);\n       add_symbol_to_list (sym, ccp->builder->get_global_symbols ());"
    },
    {
      "sha": "b62252eb4cfe1b4c55194c43ed967cf81b0f9737",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -8916,7 +8916,7 @@ fixup_go_packaging (struct dwarf2_cu *cu)\n       sym->compute_and_set_names (saved_package_name, false, objfile->per_bfd);\n       /* This is not VAR_DOMAIN because we want a way to ensure a lookup of,\n \t e.g., \"main\" finds the \"main\" module and not C's main().  */\n-      SYMBOL_DOMAIN (sym) = STRUCT_DOMAIN;\n+      sym->set_domain (STRUCT_DOMAIN);\n       sym->set_aclass_index (LOC_TYPEDEF);\n       SYMBOL_TYPE (sym) = type;\n \n@@ -21717,7 +21717,7 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n \n       /* Default assumptions.\n \t Use the passed type or decode it from the die.  */\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       sym->set_aclass_index (LOC_OPTIMIZED_OUT);\n       if (type != NULL)\n \tSYMBOL_TYPE (sym) = type;\n@@ -21765,7 +21765,7 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n \t  else\n \t    sym->set_aclass_index (LOC_OPTIMIZED_OUT);\n \t  SYMBOL_TYPE (sym) = objfile_type (objfile)->builtin_core_addr;\n-\t  SYMBOL_DOMAIN (sym) = LABEL_DOMAIN;\n+\t  sym->set_domain (LABEL_DOMAIN);\n \t  add_symbol_to_list (sym, cu->list_in_scope);\n \t  break;\n \tcase DW_TAG_subprogram:\n@@ -21964,7 +21964,7 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n \tcase DW_TAG_set_type:\n \tcase DW_TAG_enumeration_type:\n \t  sym->set_aclass_index (LOC_TYPEDEF);\n-\t  SYMBOL_DOMAIN (sym) = STRUCT_DOMAIN;\n+\t  sym->set_domain (STRUCT_DOMAIN);\n \n \t  {\n \t    /* NOTE: carlton/2003-11-10: C++ class symbols shouldn't\n@@ -22002,14 +22002,14 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n \t  break;\n \tcase DW_TAG_typedef:\n \t  sym->set_aclass_index (LOC_TYPEDEF);\n-\t  SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+\t  sym->set_domain (VAR_DOMAIN);\n \t  list_to_add = cu->list_in_scope;\n \t  break;\n \tcase DW_TAG_array_type:\n \tcase DW_TAG_base_type:\n \tcase DW_TAG_subrange_type:\n \t  sym->set_aclass_index (LOC_TYPEDEF);\n-\t  SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+\t  sym->set_domain (VAR_DOMAIN);\n \t  list_to_add = cu->list_in_scope;\n \t  break;\n \tcase DW_TAG_enumerator:\n@@ -22036,12 +22036,12 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n \t  break;\n \tcase DW_TAG_module:\n \t  sym->set_aclass_index (LOC_TYPEDEF);\n-\t  SYMBOL_DOMAIN (sym) = MODULE_DOMAIN;\n+\t  sym->set_domain (MODULE_DOMAIN);\n \t  list_to_add = cu->get_builder ()->get_global_symbols ();\n \t  break;\n \tcase DW_TAG_common_block:\n \t  sym->set_aclass_index (LOC_COMMON_BLOCK);\n-\t  SYMBOL_DOMAIN (sym) = COMMON_BLOCK_DOMAIN;\n+\t  sym->set_domain (COMMON_BLOCK_DOMAIN);\n \t  add_symbol_to_list (sym, cu->list_in_scope);\n \t  break;\n \tdefault:"
    },
    {
      "sha": "e8d8627bfca4a739ed1a61354be61825a2e6cbd2",
      "filename": "gdb/f-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/f-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/f-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-valprint.c?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -595,7 +595,7 @@ info_common_command_for_block (const struct block *block, const char *comname,\n   get_user_print_options (&opts);\n \n   ALL_BLOCK_SYMBOLS (block, iter, sym)\n-    if (SYMBOL_DOMAIN (sym) == COMMON_BLOCK_DOMAIN)\n+    if (sym->domain () == COMMON_BLOCK_DOMAIN)\n       {\n \tconst struct common_block *common = SYMBOL_VALUE_COMMON_BLOCK (sym);\n \tsize_t index;"
    },
    {
      "sha": "d13b9b2043457ef0dc3fe1a0e9e258c072479fb4",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -559,7 +559,7 @@ finalize_symtab (struct gdb_symtab *stab, struct objfile *objfile)\n       BLOCK_END (new_block) = (CORE_ADDR) gdb_block_iter.end;\n \n       /* The name.  */\n-      SYMBOL_DOMAIN (block_name) = VAR_DOMAIN;\n+      block_name->set_domain (VAR_DOMAIN);\n       block_name->set_aclass_index (LOC_BLOCK);\n       symbol_set_symtab (block_name, filetab);\n       SYMBOL_TYPE (block_name) = lookup_function_type (block_type);"
    },
    {
      "sha": "b33ff7ff0da337b5a32d3d491d1f46b8a0e4e645",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -1001,7 +1001,7 @@ language_arch_info::type_and_symbol::alloc_type_symbol\n   SYMBOL_OBJFILE_OWNED (symbol) = 0;\n   symbol->set_section_index (0);\n   SYMBOL_TYPE (symbol) = type;\n-  SYMBOL_DOMAIN (symbol) = VAR_DOMAIN;\n+  symbol->set_domain (VAR_DOMAIN);\n   symbol->set_aclass_index (LOC_TYPEDEF);\n   return symbol;\n }"
    },
    {
      "sha": "ac21bbd23480ea76f22cf672cd7c7fe143311a69",
      "filename": "gdb/linespec.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/linespec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/linespec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linespec.c?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -3995,7 +3995,7 @@ find_label_symbols_in_block (const struct block *block,\n       ALL_BLOCK_SYMBOLS (block, iter, sym)\n \t{\n \t  if (symbol_matches_domain (sym->language (),\n-\t\t\t\t     SYMBOL_DOMAIN (sym), LABEL_DOMAIN)\n+\t\t\t\t     sym->domain (), LABEL_DOMAIN)\n \t      && cmp (sym->search_name (), name, name_len) == 0)\n \t    {\n \t      result->push_back ({sym, block});"
    },
    {
      "sha": "0a2a4c327d166ed3aab1dacd9f0e2bdf6b7d4fef",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -562,7 +562,7 @@ add_data_symbol (SYMR *sh, union aux_ext *ax, int bigend,\n \t\t struct symbol *s, int aclass_index, struct block *b,\n \t\t struct objfile *objfile, const char *name)\n {\n-  SYMBOL_DOMAIN (s) = VAR_DOMAIN;\n+  s->set_domain (VAR_DOMAIN);\n   s->set_aclass_index (aclass_index);\n   add_symbol (s, top_stack->cur_st, b);\n \n@@ -675,7 +675,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \tname = \"this\";\t\t/* FIXME, not alloc'd in obstack.  */\n       s = new_symbol (name);\n \n-      SYMBOL_DOMAIN (s) = VAR_DOMAIN;\n+      s->set_domain (VAR_DOMAIN);\n       SYMBOL_IS_ARGUMENT (s) = 1;\n       switch (sh->sc)\n \t{\n@@ -703,7 +703,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \n     case stLabel:\t\t/* label, goes into current block.  */\n       s = new_symbol (name);\n-      SYMBOL_DOMAIN (s) = VAR_DOMAIN;\t/* So that it can be used */\n+      s->set_domain (VAR_DOMAIN);\t/* So that it can be used */\n       s->set_aclass_index (LOC_LABEL);\t/* but not misused.  */\n       SET_SYMBOL_VALUE_ADDRESS (s, (CORE_ADDR) sh->value);\n       SYMBOL_TYPE (s) = objfile_type (objfile)->builtin_int;\n@@ -744,7 +744,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \t  break;\n \t}\n       s = new_symbol (name);\n-      SYMBOL_DOMAIN (s) = VAR_DOMAIN;\n+      s->set_domain (VAR_DOMAIN);\n       s->set_aclass_index (LOC_BLOCK);\n       /* Type of the return value.  */\n       if (SC_IS_UNDEF (sh->sc) || sh->sc == scNil)\n@@ -1067,7 +1067,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \t\t\t\t   f->name ()));\n \t\tenum_sym->set_aclass_index (LOC_CONST);\n \t\tSYMBOL_TYPE (enum_sym) = t;\n-\t\tSYMBOL_DOMAIN (enum_sym) = VAR_DOMAIN;\n+\t\tenum_sym->set_domain (VAR_DOMAIN);\n \t\tSYMBOL_VALUE (enum_sym) = tsym.value;\n \t\tif (SYMBOL_VALUE (enum_sym) < 0)\n \t\t  unsigned_enum = 0;\n@@ -1097,7 +1097,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \t  }\n \n \ts = new_symbol (name);\n-\tSYMBOL_DOMAIN (s) = STRUCT_DOMAIN;\n+\ts->set_domain (STRUCT_DOMAIN);\n \ts->set_aclass_index (LOC_TYPEDEF);\n \tSYMBOL_VALUE (s) = 0;\n \tSYMBOL_TYPE (s) = t;\n@@ -1154,7 +1154,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \n \t  /* Make up special symbol to contain procedure specific info.  */\n \t  s = new_symbol (MDEBUG_EFI_SYMBOL_NAME);\n-\t  SYMBOL_DOMAIN (s) = LABEL_DOMAIN;\n+\t  s->set_domain (LABEL_DOMAIN);\n \t  s->set_aclass_index (LOC_CONST);\n \t  SYMBOL_TYPE (s) = objfile_type (mdebugread_objfile)->builtin_void;\n \t  e = OBSTACK_ZALLOC (&mdebugread_objfile->objfile_obstack,\n@@ -1295,7 +1295,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n       if (has_opaque_xref (cur_fdr, sh))\n \tbreak;\n       s = new_symbol (name);\n-      SYMBOL_DOMAIN (s) = VAR_DOMAIN;\n+      s->set_domain (VAR_DOMAIN);\n       s->set_aclass_index (LOC_TYPEDEF);\n       SYMBOL_BLOCK_VALUE (s) = top_stack->cur_block;\n       SYMBOL_TYPE (s) = t;\n@@ -1987,7 +1987,7 @@ parse_procedure (PDR *pr, struct compunit_symtab *search_symtab,\n #else\n /* FIXME -- delete.  We can't do symbol allocation now; it's all done.  */\n       s = new_symbol (sh_name);\n-      SYMBOL_DOMAIN (s) = VAR_DOMAIN;\n+      s->set_domain (VAR_DOMAIN);\n       SYMBOL_CLASS (s) = LOC_BLOCK;\n       /* Don't know its type, hope int is ok.  */\n       SYMBOL_TYPE (s)\n@@ -3987,7 +3987,7 @@ mdebug_expand_psymtab (legacy_psymtab *pst, struct objfile *objfile)\n \t\t\t\t      mdebug_extra_func_info);\n \t\t  struct symbol *s = new_symbol (MDEBUG_EFI_SYMBOL_NAME);\n \n-\t\t  SYMBOL_DOMAIN (s) = LABEL_DOMAIN;\n+\t\t  s->set_domain (LABEL_DOMAIN);\n \t\t  s->set_aclass_index (LOC_CONST);\n \t\t  SYMBOL_TYPE (s) = objfile_type (objfile)->builtin_void;\n \t\t  SYMBOL_VALUE_BYTES (s) = (gdb_byte *) e;\n@@ -4467,7 +4467,7 @@ mylookup_symbol (const char *name, const struct block *block,\n   ALL_BLOCK_SYMBOLS (block, iter, sym)\n     {\n       if (sym->linkage_name ()[0] == inc\n-\t  && SYMBOL_DOMAIN (sym) == domain\n+\t  && sym->domain () == domain\n \t  && sym->aclass () == theclass\n \t  && strcmp (sym->linkage_name (), name) == 0)\n \treturn sym;"
    },
    {
      "sha": "38e94818fc548f1cdc50a55630e2184f83d116f5",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 26,
      "deletions": 26,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -424,7 +424,7 @@ patch_block_stabs (struct pending *symbols, struct pending_stabs *stabs,\n \t\t ld will remove it from the executable.  There is then\n \t\t a N_GSYM stab for it, but no regular (C_EXT) symbol.  */\n \t      sym = new (&objfile->objfile_obstack) symbol;\n-\t      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+\t      sym->set_domain (VAR_DOMAIN);\n \t      sym->set_aclass_index (LOC_OPTIMIZED_OUT);\n \t      sym->set_linkage_name\n \t\t(obstack_strndup (&objfile->objfile_obstack, name, pp - name));\n@@ -785,7 +785,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \t{\n \t  sym->set_aclass_index (LOC_CONST);\n \t  SYMBOL_TYPE (sym) = error_type (&p, objfile);\n-\t  SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+\t  sym->set_domain (VAR_DOMAIN);\n \t  add_symbol_to_list (sym, get_file_symbols ());\n \t  return sym;\n \t}\n@@ -844,7 +844,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \t      {\n \t\tsym->set_aclass_index (LOC_CONST);\n \t\tSYMBOL_TYPE (sym) = error_type (&p, objfile);\n-\t\tSYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+\t\tsym->set_domain (VAR_DOMAIN);\n \t\tadd_symbol_to_list (sym, get_file_symbols ());\n \t\treturn sym;\n \t      }\n@@ -869,7 +869,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \t      {\n \t\tsym->set_aclass_index (LOC_CONST);\n \t\tSYMBOL_TYPE (sym) = error_type (&p, objfile);\n-\t\tSYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+\t\tsym->set_domain (VAR_DOMAIN);\n \t\tadd_symbol_to_list (sym, get_file_symbols ());\n \t\treturn sym;\n \t      }\n@@ -924,15 +924,15 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \t    SYMBOL_TYPE (sym) = error_type (&p, objfile);\n \t  }\n \t}\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       add_symbol_to_list (sym, get_file_symbols ());\n       return sym;\n \n     case 'C':\n       /* The name of a caught exception.  */\n       SYMBOL_TYPE (sym) = read_type (&p, objfile);\n       sym->set_aclass_index (LOC_LABEL);\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       SET_SYMBOL_VALUE_ADDRESS (sym, valu);\n       add_symbol_to_list (sym, get_local_symbols ());\n       break;\n@@ -941,7 +941,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       /* A static function definition.  */\n       SYMBOL_TYPE (sym) = read_type (&p, objfile);\n       sym->set_aclass_index (LOC_BLOCK);\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       add_symbol_to_list (sym, get_file_symbols ());\n       /* fall into process_function_types.  */\n \n@@ -1013,7 +1013,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       /* A global function definition.  */\n       SYMBOL_TYPE (sym) = read_type (&p, objfile);\n       sym->set_aclass_index (LOC_BLOCK);\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       add_symbol_to_list (sym, get_global_symbols ());\n       goto process_function_types;\n \n@@ -1024,7 +1024,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \t These definitions appear at the end of the namelist.  */\n       SYMBOL_TYPE (sym) = read_type (&p, objfile);\n       sym->set_aclass_index (LOC_STATIC);\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       /* Don't add symbol references to global_sym_chain.\n \t Symbol references don't have valid names and wont't match up with\n \t minimal symbols when the global_sym_chain is relocated.\n@@ -1046,7 +1046,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       SYMBOL_TYPE (sym) = read_type (&p, objfile);\n       sym->set_aclass_index (LOC_LOCAL);\n       SYMBOL_VALUE (sym) = valu;\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       add_symbol_to_list (sym, get_local_symbols ());\n       break;\n \n@@ -1066,7 +1066,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \n       sym->set_aclass_index (LOC_ARG);\n       SYMBOL_VALUE (sym) = valu;\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       SYMBOL_IS_ARGUMENT (sym) = 1;\n       add_symbol_to_list (sym, get_local_symbols ());\n \n@@ -1116,7 +1116,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       sym->set_aclass_index (stab_register_index);\n       SYMBOL_IS_ARGUMENT (sym) = 1;\n       SYMBOL_VALUE (sym) = valu;\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       add_symbol_to_list (sym, get_local_symbols ());\n       break;\n \n@@ -1125,7 +1125,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       SYMBOL_TYPE (sym) = read_type (&p, objfile);\n       sym->set_aclass_index (stab_register_index);\n       SYMBOL_VALUE (sym) = valu;\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       if (within_function)\n \t{\n \t  /* Sun cc uses a pair of symbols, one 'p' and one 'r', with\n@@ -1180,7 +1180,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       SYMBOL_TYPE (sym) = read_type (&p, objfile);\n       sym->set_aclass_index (LOC_STATIC);\n       SET_SYMBOL_VALUE_ADDRESS (sym, valu);\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       add_symbol_to_list (sym, get_file_symbols ());\n       break;\n \n@@ -1211,7 +1211,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \n       sym->set_aclass_index (LOC_TYPEDEF);\n       SYMBOL_VALUE (sym) = valu;\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       /* C++ vagaries: we may have a type which is derived from\n \t a base type which did not have its name defined when the\n \t derived class was output.  We fill in the derived class's\n@@ -1288,7 +1288,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \t  *struct_sym = *sym;\n \t  struct_sym->set_aclass_index (LOC_TYPEDEF);\n \t  SYMBOL_VALUE (struct_sym) = valu;\n-\t  SYMBOL_DOMAIN (struct_sym) = STRUCT_DOMAIN;\n+\t  struct_sym->set_domain (STRUCT_DOMAIN);\n \t  if (SYMBOL_TYPE (sym)->name () == 0)\n \t    SYMBOL_TYPE (sym)->set_name\n \t      (obconcat (&objfile->objfile_obstack, sym->linkage_name (),\n@@ -1315,7 +1315,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \n       sym->set_aclass_index (LOC_TYPEDEF);\n       SYMBOL_VALUE (sym) = valu;\n-      SYMBOL_DOMAIN (sym) = STRUCT_DOMAIN;\n+      sym->set_domain (STRUCT_DOMAIN);\n       if (SYMBOL_TYPE (sym)->name () == 0)\n \tSYMBOL_TYPE (sym)->set_name\n \t  (obconcat (&objfile->objfile_obstack, sym->linkage_name (),\n@@ -1330,7 +1330,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \t  *typedef_sym = *sym;\n \t  typedef_sym->set_aclass_index (LOC_TYPEDEF);\n \t  SYMBOL_VALUE (typedef_sym) = valu;\n-\t  SYMBOL_DOMAIN (typedef_sym) = VAR_DOMAIN;\n+\t  typedef_sym->set_domain (VAR_DOMAIN);\n \t  if (SYMBOL_TYPE (sym)->name () == 0)\n \t    SYMBOL_TYPE (sym)->set_name\n \t      (obconcat (&objfile->objfile_obstack, sym->linkage_name (),\n@@ -1344,7 +1344,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       SYMBOL_TYPE (sym) = read_type (&p, objfile);\n       sym->set_aclass_index (LOC_STATIC);\n       SET_SYMBOL_VALUE_ADDRESS (sym, valu);\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       add_symbol_to_list (sym, get_local_symbols ());\n       break;\n \n@@ -1354,7 +1354,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       sym->set_aclass_index (LOC_REF_ARG);\n       SYMBOL_IS_ARGUMENT (sym) = 1;\n       SYMBOL_VALUE (sym) = valu;\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       add_symbol_to_list (sym, get_local_symbols ());\n       break;\n \n@@ -1364,7 +1364,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       sym->set_aclass_index (stab_regparm_index);\n       SYMBOL_IS_ARGUMENT (sym) = 1;\n       SYMBOL_VALUE (sym) = valu;\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       add_symbol_to_list (sym, get_local_symbols ());\n       break;\n \n@@ -1376,15 +1376,15 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       SYMBOL_TYPE (sym) = read_type (&p, objfile);\n       sym->set_aclass_index (LOC_LOCAL);\n       SYMBOL_VALUE (sym) = valu;\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       add_symbol_to_list (sym, get_local_symbols ());\n       break;\n \n     default:\n       SYMBOL_TYPE (sym) = error_type (&p, objfile);\n       sym->set_aclass_index (LOC_CONST);\n       SYMBOL_VALUE (sym) = 0;\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       add_symbol_to_list (sym, get_file_symbols ());\n       break;\n     }\n@@ -1629,7 +1629,7 @@ read_type (const char **pp, struct objfile *objfile)\n \t      struct symbol *sym = ppt->symbol[i];\n \n \t      if (sym->aclass () == LOC_TYPEDEF\n-\t\t  && SYMBOL_DOMAIN (sym) == STRUCT_DOMAIN\n+\t\t  && sym->domain () == STRUCT_DOMAIN\n \t\t  && (SYMBOL_TYPE (sym)->code () == code)\n \t\t  && strcmp (sym->linkage_name (), type_name) == 0)\n \t\t{\n@@ -3593,7 +3593,7 @@ read_enum_type (const char **pp, struct type *type,\n       sym->set_language (get_current_subfile ()->language,\n \t\t\t &objfile->objfile_obstack);\n       sym->set_aclass_index (LOC_CONST);\n-      SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+      sym->set_domain (VAR_DOMAIN);\n       SYMBOL_VALUE (sym) = n;\n       if (n < 0)\n \tunsigned_enum = 0;\n@@ -4467,7 +4467,7 @@ cleanup_undefined_types_1 (void)\n \t\t\tstruct symbol *sym = ppt->symbol[i];\n \n \t\t\tif (sym->aclass () == LOC_TYPEDEF\n-\t\t\t    && SYMBOL_DOMAIN (sym) == STRUCT_DOMAIN\n+\t\t\t    && sym->domain () == STRUCT_DOMAIN\n \t\t\t    && (SYMBOL_TYPE (sym)->code () == (*type)->code ())\n \t\t\t    && ((*type)->instance_flags ()\n \t\t\t\t== SYMBOL_TYPE (sym)->instance_flags ())"
    },
    {
      "sha": "fcdcd35f8b393a2d8f411d2c7b45ba762ce6abbd",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -2258,7 +2258,7 @@ iterate_over_block_locals (const struct block *b,\n \tcase LOC_OPTIMIZED_OUT:\n \t  if (SYMBOL_IS_ARGUMENT (sym))\n \t    break;\n-\t  if (SYMBOL_DOMAIN (sym) == COMMON_BLOCK_DOMAIN)\n+\t  if (sym->domain () == COMMON_BLOCK_DOMAIN)\n \t    break;\n \t  (*cb) (sym->print_name (), sym, cb_data);\n \t  break;"
    },
    {
      "sha": "9bba067a07f8b5576a2ae47b09c8bf6bb31742bf",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -508,7 +508,7 @@ print_symbol (struct gdbarch *gdbarch, struct symbol *symbol,\n     section = NULL;\n \n   print_spaces_filtered (depth, outfile);\n-  if (SYMBOL_DOMAIN (symbol) == LABEL_DOMAIN)\n+  if (symbol->domain () == LABEL_DOMAIN)\n     {\n       fprintf_filtered (outfile, \"label %s at \", symbol->print_name ());\n       fputs_filtered (paddress (gdbarch, SYMBOL_VALUE_ADDRESS (symbol)),\n@@ -521,7 +521,7 @@ print_symbol (struct gdbarch *gdbarch, struct symbol *symbol,\n       return;\n     }\n \n-  if (SYMBOL_DOMAIN (symbol) == STRUCT_DOMAIN)\n+  if (symbol->domain () == STRUCT_DOMAIN)\n     {\n       if (SYMBOL_TYPE (symbol)->name ())\n \t{"
    },
    {
      "sha": "5e4a461deb92080583ebb47d1237edfdb509b748",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -1229,7 +1229,7 @@ eq_symbol_entry (const struct symbol_cache_slot *slot,\n   else\n     {\n       slot_name = slot->value.found.symbol->search_name ();\n-      slot_domain = SYMBOL_DOMAIN (slot->value.found.symbol);\n+      slot_domain = slot->value.found.symbol->domain ();\n     }\n \n   /* NULL names match.  */\n@@ -1582,7 +1582,7 @@ symbol_cache_dump (const struct symbol_cache *cache)\n \t\tprintf_filtered (\"  [%4u] = %s, %s %s\\n\", i,\n \t\t\t\t host_address_to_string (context),\n \t\t\t\t found->print_name (),\n-\t\t\t\t domain_name (SYMBOL_DOMAIN (found)));\n+\t\t\t\t domain_name (found->domain ()));\n \t\tbreak;\n \t      }\n \t    }\n@@ -2329,7 +2329,7 @@ lookup_symbol_in_objfile_symtabs (struct objfile *objfile,\n \t  break;\n \t}\n       if (symbol_matches_domain (result.symbol->language (),\n-\t\t\t\t SYMBOL_DOMAIN (result.symbol), domain))\n+\t\t\t\t result.symbol->domain (), domain))\n \t{\n \t  struct symbol *better\n \t    = better_symbol (other.symbol, result.symbol, domain);\n@@ -2906,7 +2906,7 @@ iterate_over_symbols (const struct block *block,\n \n   ALL_BLOCK_SYMBOLS_WITH_NAME (block, name, iter, sym)\n     {\n-      if (symbol_matches_domain (sym->language (), SYMBOL_DOMAIN (sym), domain))\n+      if (symbol_matches_domain (sym->language (), sym->domain (), domain))\n \t{\n \t  struct block_symbol block_sym = {sym, block};\n \n@@ -4847,9 +4847,9 @@ global_symbol_searcher::add_matching_symbols\n \t\t\t\t\t\t\t\t sym)))\n \t\t\t  || (kind == TYPES_DOMAIN\n \t\t\t      && sym->aclass () == LOC_TYPEDEF\n-\t\t\t      && SYMBOL_DOMAIN (sym) != MODULE_DOMAIN)\n+\t\t\t      && sym->domain () != MODULE_DOMAIN)\n \t\t\t  || (kind == MODULES_DOMAIN\n-\t\t\t      && SYMBOL_DOMAIN (sym) == MODULE_DOMAIN\n+\t\t\t      && sym->domain () == MODULE_DOMAIN\n \t\t\t      && SYMBOL_LINE (sym) != 0))))\n \t\t{\n \t\t  if (result_set->size () < m_max_search_results)\n@@ -5030,7 +5030,7 @@ symbol_to_info_string (struct symbol *sym, int block,\n \n   /* Typedef that is not a C++ class.  */\n   if (kind == TYPES_DOMAIN\n-      && SYMBOL_DOMAIN (sym) != STRUCT_DOMAIN)\n+      && sym->domain () != STRUCT_DOMAIN)\n     {\n       string_file tmp_stream;\n \n@@ -5051,7 +5051,7 @@ symbol_to_info_string (struct symbol *sym, int block,\n   /* variable, func, or typedef-that-is-c++-class.  */\n   else if (kind < TYPES_DOMAIN\n \t   || (kind == TYPES_DOMAIN\n-\t       && SYMBOL_DOMAIN (sym) == STRUCT_DOMAIN))\n+\t       && sym->domain () == STRUCT_DOMAIN))\n     {\n       string_file tmp_stream;\n \n@@ -5525,7 +5525,7 @@ completion_list_add_symbol (completion_tracker &tracker,\n      the msymbol name and removes the msymbol name from the completion\n      tracker.  */\n   if (sym->language () == language_cplus\n-      && SYMBOL_DOMAIN (sym) == VAR_DOMAIN\n+      && sym->domain () == VAR_DOMAIN\n       && sym->aclass () == LOC_BLOCK)\n     {\n       /* The call to canonicalize returns the empty string if the input\n@@ -5788,7 +5788,7 @@ add_symtab_completions (struct compunit_symtab *cust,\n \t    continue;\n \n \t  if (code == TYPE_CODE_UNDEF\n-\t      || (SYMBOL_DOMAIN (sym) == STRUCT_DOMAIN\n+\t      || (sym->domain () == STRUCT_DOMAIN\n \t\t  && SYMBOL_TYPE (sym)->code () == code))\n \t    completion_list_add_symbol (tracker, sym,\n \t\t\t\t\tlookup_name,\n@@ -5941,7 +5941,7 @@ default_collect_symbol_completion_matches_break_on\n \t\tcompletion_list_add_fields (tracker, sym, lookup_name,\n \t\t\t\t\t    sym_text, word);\n \t      }\n-\t    else if (SYMBOL_DOMAIN (sym) == STRUCT_DOMAIN\n+\t    else if (sym->domain () == STRUCT_DOMAIN\n \t\t     && SYMBOL_TYPE (sym)->code () == code)\n \t      completion_list_add_symbol (tracker, sym, lookup_name,\n \t\t\t\t\t  sym_text, word);"
    },
    {
      "sha": "2825697fc1928da9cf9500b8ac3e79c729d97f2b",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 12,
      "deletions": 3,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -1113,7 +1113,7 @@ struct symbol : public general_symbol_info, public allocate_on_obstack\n {\n   symbol ()\n     /* Class-initialization of bitfields is only allowed in C++20.  */\n-    : domain (UNDEF_DOMAIN),\n+    : m_domain (UNDEF_DOMAIN),\n       m_aclass_index (0),\n       is_objfile_owned (1),\n       is_argument (0),\n@@ -1158,6 +1158,16 @@ struct symbol : public general_symbol_info, public allocate_on_obstack\n     return this->impl ().aclass;\n   }\n \n+  domain_enum domain () const\n+  {\n+    return m_domain;\n+  }\n+\n+  void set_domain (domain_enum domain)\n+  {\n+    m_domain = domain;\n+  }\n+\n   /* Data type of value */\n \n   struct type *type = nullptr;\n@@ -1178,7 +1188,7 @@ struct symbol : public general_symbol_info, public allocate_on_obstack\n \n   /* Domain code.  */\n \n-  ENUM_BITFIELD(domain_enum_tag) domain : SYMBOL_DOMAIN_BITS;\n+  ENUM_BITFIELD(domain_enum_tag) m_domain : SYMBOL_DOMAIN_BITS;\n \n   /* Address class.  This holds an index into the 'symbol_impls'\n      table.  The actual enum address_class value is stored there,\n@@ -1260,7 +1270,6 @@ struct block_symbol\n /* Note: There is no accessor macro for symbol.owner because it is\n    \"private\".  */\n \n-#define SYMBOL_DOMAIN(symbol)\t(symbol)->domain\n #define SYMBOL_OBJFILE_OWNED(symbol)\t((symbol)->is_objfile_owned)\n #define SYMBOL_IS_ARGUMENT(symbol)\t(symbol)->is_argument\n #define SYMBOL_INLINED(symbol)\t\t(symbol)->is_inlined"
    },
    {
      "sha": "bdfbdbff96ff8008057f13489dafc5f5ae5be436",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c9c307c67043b55a209af402246404d89f992c9/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c9c307c67043b55a209af402246404d89f992c9/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=6c9c307c67043b55a209af402246404d89f992c9",
      "patch": "@@ -1562,7 +1562,7 @@ process_xcoff_symbol (struct coff_symbol *cs, struct objfile *objfile)\n \n   /* default assumptions */\n   SET_SYMBOL_VALUE_ADDRESS (sym, cs->c_value + off);\n-  SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n+  sym->set_domain (VAR_DOMAIN);\n   sym->set_section_index (secnum_to_section (cs->c_secnum, objfile));\n \n   if (ISFCN (cs->c_type))"
    }
  ]
}