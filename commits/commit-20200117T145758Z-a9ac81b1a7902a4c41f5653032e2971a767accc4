{
  "sha": "a9ac81b1a7902a4c41f5653032e2971a767accc4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTlhYzgxYjFhNzkwMmE0YzQxZjU2NTMwMzJlMjk3MWE3NjdhY2NjNA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-01-17T14:57:58Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-01-17T14:57:58Z"
    },
    "message": "gdb: remove uses of iterate_over_inferiors in mi/mi-main.c\n\nReplace with range-based loops.\n\ngdb/ChangeLog:\n\n\t* mi/mi-main.c (run_one_inferior): Change return type to void, replace\n\t`void *` parameter with proper parameters.\n\t(mi_cmd_exec_run): Use range-based loop to iterate over inferiors.\n\t(print_one_inferior): Change return type to void, replace `void *`\n\tparameter with proper parameters.\n\t(mi_cmd_list_thread_groups): Use range-based loop to iterate over\n\tinferiors.\n\t(get_other_inferior): Remove.\n\t(mi_cmd_remove_inferior): Use range-based loop to iterate over\n\tinferiors.",
    "tree": {
      "sha": "59f8c0720b787491677f54f9ab546b79837ac8ce",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/59f8c0720b787491677f54f9ab546b79837ac8ce"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a9ac81b1a7902a4c41f5653032e2971a767accc4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9ac81b1a7902a4c41f5653032e2971a767accc4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a9ac81b1a7902a4c41f5653032e2971a767accc4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9ac81b1a7902a4c41f5653032e2971a767accc4/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "788eca4949d08494109249d35cd599971ce6ec51",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/788eca4949d08494109249d35cd599971ce6ec51",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/788eca4949d08494109249d35cd599971ce6ec51"
    }
  ],
  "stats": {
    "total": 86,
    "additions": 40,
    "deletions": 46
  },
  "files": [
    {
      "sha": "0d3660249faf69077a348c5799eb1b56ae759424",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9ac81b1a7902a4c41f5653032e2971a767accc4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9ac81b1a7902a4c41f5653032e2971a767accc4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a9ac81b1a7902a4c41f5653032e2971a767accc4",
      "patch": "@@ -1,3 +1,16 @@\n+2020-01-17  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* mi/mi-main.c (run_one_inferior): Change return type to void, replace\n+\t`void *` parameter with proper parameters.\n+\t(mi_cmd_exec_run): Use range-based loop to iterate over inferiors.\n+\t(print_one_inferior): Change return type to void, replace `void *`\n+\tparameter with proper parameters.\n+\t(mi_cmd_list_thread_groups): Use range-based loop to iterate over\n+\tinferiors.\n+\t(get_other_inferior): Remove.\n+\t(mi_cmd_remove_inferior): Use range-based loop to iterate over\n+\tinferiors.\n+\n 2020-01-17  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* mi/mi-interp.c (report_initial_inferior): Remove."
    },
    {
      "sha": "d0a3b2887440683fd1a64bc1acbd31b4c067e90a",
      "filename": "gdb/mi/mi-main.c",
      "status": "modified",
      "additions": 27,
      "deletions": 46,
      "changes": 73,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a9ac81b1a7902a4c41f5653032e2971a767accc4/gdb/mi/mi-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a9ac81b1a7902a4c41f5653032e2971a767accc4/gdb/mi/mi-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-main.c?ref=a9ac81b1a7902a4c41f5653032e2971a767accc4",
      "patch": "@@ -390,17 +390,14 @@ mi_cmd_exec_interrupt (const char *command, char **argv, int argc)\n     }\n }\n \n-/* Callback for iterate_over_inferiors which starts the execution\n-   of the given inferior.\n+/* Start the execution of the given inferior.\n \n-   ARG is a pointer to an integer whose value, if non-zero, indicates\n-   that the program should be stopped when reaching the main subprogram\n-   (similar to what the CLI \"start\" command does).  */\n+   START_P indicates whether the program should be stopped when reaching the\n+   main subprogram (similar to what the CLI \"start\" command does).  */\n \n-static int\n-run_one_inferior (struct inferior *inf, void *arg)\n+static void\n+run_one_inferior (inferior *inf, bool start_p)\n {\n-  int start_p = *(int *) arg;\n   const char *run_cmd = start_p ? \"start\" : \"run\";\n   struct target_ops *run_target = find_run_target ();\n   int async_p = mi_async && run_target->can_async_p ();\n@@ -417,7 +414,6 @@ run_one_inferior (struct inferior *inf, void *arg)\n     switch_to_inferior_no_thread (inf);\n   mi_execute_cli_command (run_cmd, async_p,\n \t\t\t  async_p ? \"&\" : NULL);\n-  return 0;\n }\n \n void\n@@ -462,7 +458,8 @@ mi_cmd_exec_run (const char *command, char **argv, int argc)\n     {\n       scoped_restore_current_pspace_and_thread restore_pspace_thread;\n \n-      iterate_over_inferiors (run_one_inferior, &start_p);\n+      for (inferior *inf : all_inferiors ())\n+\trun_one_inferior (inf, start_p);\n     }\n   else\n     {\n@@ -633,16 +630,13 @@ struct print_one_inferior_data\n   const std::set<int> *inferiors;\n };\n \n-static int\n-print_one_inferior (struct inferior *inferior, void *xdata)\n+static void\n+print_one_inferior (struct inferior *inferior, bool recurse,\n+\t\t    const std::set<int> &ids)\n {\n-  struct print_one_inferior_data *top_data\n-    = (struct print_one_inferior_data *) xdata;\n   struct ui_out *uiout = current_uiout;\n \n-  if (top_data->inferiors->empty ()\n-      || (top_data->inferiors->find (inferior->pid)\n-\t  != top_data->inferiors->end ()))\n+  if (ids.empty () || (ids.find (inferior->pid) != ids.end ()))\n     {\n       struct collect_cores_data data;\n       ui_out_emit_tuple tuple_emitter (uiout, NULL);\n@@ -675,11 +669,9 @@ print_one_inferior (struct inferior *inferior, void *xdata)\n \t    uiout->field_signed (NULL, b);\n \t}\n \n-      if (top_data->recurse)\n+      if (recurse)\n \tprint_thread_info (uiout, NULL, inferior->pid);\n     }\n-\n-  return 0;\n }\n \n /* Output a field named 'cores' with a list as the value.  The\n@@ -853,18 +845,14 @@ mi_cmd_list_thread_groups (const char *command, char **argv, int argc)\n     }\n   else\n     {\n-      struct print_one_inferior_data data;\n-\n-      data.recurse = recurse;\n-      data.inferiors = &ids;\n-\n       /* Local thread groups.  Either no explicit ids -- and we\n \t print everything, or several explicit ids.  In both cases,\n \t we print more than one group, and have to use 'groups'\n \t as the top-level element.  */\n       ui_out_emit_list list_emitter (uiout, \"groups\");\n       update_thread_list ();\n-      iterate_over_inferiors (print_one_inferior, &data);\n+      for (inferior *inf : all_inferiors ())\n+\tprint_one_inferior (inf, recurse, ids);\n     }\n }\n \n@@ -1719,42 +1707,35 @@ mi_cmd_add_inferior (const char *command, char **argv, int argc)\n   current_uiout->field_fmt (\"inferior\", \"i%d\", inf->num);\n }\n \n-/* Callback used to find the first inferior other than the current\n-   one.  */\n-\n-static int\n-get_other_inferior (struct inferior *inf, void *arg)\n-{\n-  if (inf == current_inferior ())\n-    return 0;\n-\n-  return 1;\n-}\n-\n void\n mi_cmd_remove_inferior (const char *command, char **argv, int argc)\n {\n   int id;\n-  struct inferior *inf;\n+  struct inferior *inf_to_remove;\n \n   if (argc != 1)\n     error (_(\"-remove-inferior should be passed a single argument\"));\n \n   if (sscanf (argv[0], \"i%d\", &id) != 1)\n     error (_(\"the thread group id is syntactically invalid\"));\n \n-  inf = find_inferior_id (id);\n-  if (!inf)\n+  inf_to_remove = find_inferior_id (id);\n+  if (inf_to_remove == NULL)\n     error (_(\"the specified thread group does not exist\"));\n \n-  if (inf->pid != 0)\n+  if (inf_to_remove->pid != 0)\n     error (_(\"cannot remove an active inferior\"));\n \n-  if (inf == current_inferior ())\n+  if (inf_to_remove == current_inferior ())\n     {\n       struct thread_info *tp = 0;\n-      struct inferior *new_inferior\n-\t= iterate_over_inferiors (get_other_inferior, NULL);\n+      struct inferior *new_inferior = NULL;\n+\n+      for (inferior *inf : all_inferiors ())\n+\t{\n+\t  if (inf != inf_to_remove)\n+\t    new_inferior = inf;\n+\t}\n \n       if (new_inferior == NULL)\n \terror (_(\"Cannot remove last inferior\"));\n@@ -1769,7 +1750,7 @@ mi_cmd_remove_inferior (const char *command, char **argv, int argc)\n       set_current_program_space (new_inferior->pspace);\n     }\n \n-  delete_inferior (inf);\n+  delete_inferior (inf_to_remove);\n }\n \n \f"
    }
  ]
}