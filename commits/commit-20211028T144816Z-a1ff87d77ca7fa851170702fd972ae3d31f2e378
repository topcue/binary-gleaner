{
  "sha": "a1ff87d77ca7fa851170702fd972ae3d31f2e378",
  "node_id": "C_kwDOANOeidoAKGExZmY4N2Q3N2NhN2ZhODUxMTcwNzAyZmQ5NzJhZTNkMzFmMmUzNzg",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-09-22T14:38:16Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-10-28T14:48:16Z"
    },
    "message": "gdb: add \"maint set/show selftest verbose\" commands and use process_options\n\nI saw the new -verbose switch to \"maint selftests\" and thought it would\nbe nice for it to use the option framework.  For example, that makes\nhaving completion easy.  It's not that high value, given this is a\nmaintenance command, but I had never used the framework myself, so it\nwas a good way to practice.\n\nThis patch also adds the \"maint set/show selftest verbose\" setting.  It\nwould be possible to use option framework without adding the setting,\nbut using the framework makes adding the option almost trivial, so I\nthought why not.\n\nChange-Id: I6687faa0713ff3da60b398253211777100094144",
    "tree": {
      "sha": "796e94e5e02072e993e0e6569e302b76d31d4116",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/796e94e5e02072e993e0e6569e302b76d31d4116"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a1ff87d77ca7fa851170702fd972ae3d31f2e378",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1ff87d77ca7fa851170702fd972ae3d31f2e378",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a1ff87d77ca7fa851170702fd972ae3d31f2e378",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1ff87d77ca7fa851170702fd972ae3d31f2e378/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2e466f72c43a515f4dac5c65cca5cdf3f24dad21",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2e466f72c43a515f4dac5c65cca5cdf3f24dad21",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2e466f72c43a515f4dac5c65cca5cdf3f24dad21"
    }
  ],
  "stats": {
    "total": 81,
    "additions": 76,
    "deletions": 5
  },
  "files": [
    {
      "sha": "d52cec0e5bef83342908a2067c423ed87f117ffb",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1ff87d77ca7fa851170702fd972ae3d31f2e378/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1ff87d77ca7fa851170702fd972ae3d31f2e378/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=a1ff87d77ca7fa851170702fd972ae3d31f2e378",
      "patch": "@@ -39478,6 +39478,13 @@ If a @var{filter} is passed, only the tests with @var{filter} in their\n name will be ran.  If @code{-verbose} is passed, the self tests can be\n more verbose.\n \n+@kindex maint set selftest verbose\n+@kindex maint show selftest verbose\n+@cindex self tests\n+@item maint set selftest verbose\n+@item maint show selftest verbose\n+Control whether self tests are run verbosely or not.\n+\n @kindex maint info selftests\n @cindex self tests\n @item maint info selftests"
    },
    {
      "sha": "4e75e47c6a75a3d7fc1efba8364de7163c1ca76d",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 69,
      "deletions": 5,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1ff87d77ca7fa851170702fd972ae3d31f2e378/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1ff87d77ca7fa851170702fd972ae3d31f2e378/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=a1ff87d77ca7fa851170702fd972ae3d31f2e378",
      "patch": "@@ -1119,23 +1119,67 @@ set_per_command_cmd (const char *args, int from_tty)\n       }\n }\n \n-\f\n+/* Options affecting the \"maintenance selftest\" command.  */\n+\n+struct maintenance_selftest_options\n+{\n+  bool verbose = false;\n+} user_maintenance_selftest_options;\n+\n+static const gdb::option::option_def maintenance_selftest_option_defs[] = {\n+  gdb::option::boolean_option_def<maintenance_selftest_options> {\n+    \"verbose\",\n+    [] (maintenance_selftest_options *opt) { return &opt->verbose; },\n+    nullptr,\n+    N_(\"Set whether selftests run in verbose mode.\"),\n+    N_(\"Show whether selftests run in verbose mode.\"),\n+    N_(\"\\\n+When on, selftests may print verbose information.\"),\n+  },\n+};\n+\n+/* Make option groups for the \"maintenance selftest\" command.  */\n+\n+static std::array<gdb::option::option_def_group, 1>\n+make_maintenance_selftest_option_group (maintenance_selftest_options *opts)\n+{\n+  return {{\n+    {{maintenance_selftest_option_defs}, opts},\n+  }};\n+}\n \n /* The \"maintenance selftest\" command.  */\n \n static void\n maintenance_selftest (const char *args, int from_tty)\n {\n #if GDB_SELF_TEST\n-  bool verbose = args != nullptr && check_for_argument (&args, \"-verbose\");\n+  maintenance_selftest_options opts = user_maintenance_selftest_options;\n+  auto grp = make_maintenance_selftest_option_group (&opts);\n+  gdb::option::process_options\n+    (&args, gdb::option::PROCESS_OPTIONS_UNKNOWN_IS_ERROR, grp);\n   gdb_argv argv (args);\n-  selftests::run_tests (argv.as_array_view (), verbose);\n+  selftests::run_tests (argv.as_array_view (), opts.verbose);\n #else\n   printf_filtered (_(\"\\\n Selftests have been disabled for this build.\\n\"));\n #endif\n }\n \n+/* Completer for the \"maintenance selftest\" command.  */\n+\n+static void\n+maintenance_selftest_completer (cmd_list_element *cmd,\n+\t\t\t\tcompletion_tracker &tracker,\n+\t\t\t\tconst char *text,\n+\t\t\t\tconst char *word)\n+{\n+  auto grp = make_maintenance_selftest_option_group (nullptr);\n+\n+  gdb::option::complete_options\n+    (tracker, &text, gdb::option::PROCESS_OPTIONS_UNKNOWN_IS_ERROR, grp);\n+}\n+\n static void\n maintenance_info_selftests (const char *arg, int from_tty)\n {\n@@ -1369,12 +1413,15 @@ This is used by the testsuite to check the command deprecator.\\n\\\n You probably shouldn't use this.\"),\n \t   &maintenancelist);\n \n-  add_cmd (\"selftest\", class_maintenance, maintenance_selftest, _(\"\\\n+  cmd_list_element *maintenance_selftest_cmd\n+    = add_cmd (\"selftest\", class_maintenance, maintenance_selftest, _(\"\\\n Run gdb's unit tests.\\n\\\n Usage: maintenance selftest [FILTER]\\n\\\n This will run any unit tests that were built in to gdb.\\n\\\n If a filter is given, only the tests with that value in their name will ran.\"),\n-\t   &maintenancelist);\n+\t       &maintenancelist);\n+  set_cmd_completer_handle_brkchars (maintenance_selftest_cmd,\n+\t\t\t\t     maintenance_selftest_completer);\n \n   add_cmd (\"selftests\", class_maintenance, maintenance_info_selftests,\n \t _(\"List the registered selftests.\"), &maintenanceinfolist);\n@@ -1401,5 +1448,22 @@ such as demangling symbol names.\"),\n \t\t\t\t       &maintenance_set_cmdlist,\n \t\t\t\t       &maintenance_show_cmdlist);\n \n+  /* Add the \"maint set/show selftest\" commands.  */\n+  static cmd_list_element *set_selftest_cmdlist = nullptr;\n+  static cmd_list_element *show_selftest_cmdlist = nullptr;\n+\n+  add_setshow_prefix_cmd (\"selftest\", class_maintenance,\n+\t\t\t  _(\"Self tests-related settings.\"),\n+\t\t\t  _(\"Self tests-related settings.\"),\n+\t\t\t  &set_selftest_cmdlist, &show_selftest_cmdlist,\n+\t\t\t  &maintenance_set_cmdlist, &maintenance_show_cmdlist);\n+\n+  /* Add setting commands matching \"maintenance selftest\" options.  */\n+  gdb::option::add_setshow_cmds_for_options (class_maintenance,\n+\t\t\t\t\t     &user_maintenance_selftest_options,\n+\t\t\t\t\t     maintenance_selftest_option_defs,\n+\t\t\t\t\t     &set_selftest_cmdlist,\n+\t\t\t\t\t     &show_selftest_cmdlist);\n+\n   update_thread_pool_size ();\n }"
    }
  ]
}