{
  "sha": "830070c66d25e6749b7159009f1d87d85f02eaa3",
  "node_id": "C_kwDOANOeidoAKDgzMDA3MGM2NmQyNWU2NzQ5YjcxNTkwMDlmMWQ4N2Q4NWYwMmVhYTM",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-11-13T02:12:00Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-11-16T20:37:00Z"
    },
    "message": "gdbsupport: remove FUNCTION_NAME\n\n__func__ is standard C++11:\n\n    https://en.cppreference.com/w/cpp/language/function\n\nAlso, in C++11, __func__ expands to the demangled function name, so the\nmention in the comment above FUNCTION_NAME doesn't apply anymore.\nFinally, in places where FUNCTION_NAME is used, I think it's enough to\nprint the function name, no need to print the whole signature.\nTherefore, I propose to just remove FUNCTION_NAME and update users to\nuse the standard __func__.\n\nChange-Id: I778f28155422b044402442dc18d42d0cded1017d",
    "tree": {
      "sha": "124d4d830112e4ffb121b3cefa4e1f2335fcd259",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/124d4d830112e4ffb121b3cefa4e1f2335fcd259"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/830070c66d25e6749b7159009f1d87d85f02eaa3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/830070c66d25e6749b7159009f1d87d85f02eaa3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/830070c66d25e6749b7159009f1d87d85f02eaa3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/830070c66d25e6749b7159009f1d87d85f02eaa3/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8579fd136a614985bd27f20539c7bb7c5a51287d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8579fd136a614985bd27f20539c7bb7c5a51287d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8579fd136a614985bd27f20539c7bb7c5a51287d"
    }
  ],
  "stats": {
    "total": 43,
    "additions": 3,
    "deletions": 40
  },
  "files": [
    {
      "sha": "9d6b0c530bde8dd5f3848fd8e84df6260886a433",
      "filename": "gdb/darwin-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 7,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/830070c66d25e6749b7159009f1d87d85f02eaa3/gdb/darwin-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/830070c66d25e6749b7159009f1d87d85f02eaa3/gdb/darwin-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/darwin-nat.h?ref=830070c66d25e6749b7159009f1d87d85f02eaa3",
      "patch": "@@ -200,14 +200,8 @@ extern mach_port_t darwin_port_set;\n /* A copy of mach_host_self ().  */\n extern mach_port_t darwin_host_self;\n \n-/* FUNCTION_NAME is defined in common-utils.h (or not).  */\n-#ifdef FUNCTION_NAME\n #define MACH_CHECK_ERROR(ret) \\\n-  mach_check_error (ret, __FILE__, __LINE__, FUNCTION_NAME)\n-#else\n-#define MACH_CHECK_ERROR(ret) \\\n-  mach_check_error (ret, __FILE__, __LINE__, \"??\")\n-#endif\n+  mach_check_error (ret, __FILE__, __LINE__, __func__)\n \n extern void mach_check_error (kern_return_t ret, const char *file,\n \t\t\t      unsigned int line, const char *func);"
    },
    {
      "sha": "af078475780a7db3d95b29478406d41d91791558",
      "filename": "gdbsupport/common-utils.h",
      "status": "modified",
      "additions": 0,
      "deletions": 20,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/830070c66d25e6749b7159009f1d87d85f02eaa3/gdbsupport/common-utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/830070c66d25e6749b7159009f1d87d85f02eaa3/gdbsupport/common-utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/common-utils.h?ref=830070c66d25e6749b7159009f1d87d85f02eaa3",
      "patch": "@@ -24,27 +24,7 @@\n #include <vector>\n #include \"gdbsupport/byte-vector.h\"\n #include \"gdbsupport/gdb_unique_ptr.h\"\n-\n #include \"poison.h\"\n-\n-/* If possible, define FUNCTION_NAME, a macro containing the name of\n-   the function being defined.  Since this macro may not always be\n-   defined, all uses must be protected by appropriate macro definition\n-   checks (Eg: \"#ifdef FUNCTION_NAME\").\n-\n-   Version 2.4 and later of GCC define a magical variable `__PRETTY_FUNCTION__'\n-   which contains the name of the function currently being defined.\n-   This is broken in G++ before version 2.6.\n-   C9x has a similar variable called __func__, but prefer the GCC one since\n-   it demangles C++ function names.  */\n-#if (GCC_VERSION >= 2004)\n-#define FUNCTION_NAME\t\t__PRETTY_FUNCTION__\n-#else\n-#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L\n-#define FUNCTION_NAME\t\t__func__  /* ARI: func */\n-#endif\n-#endif\n-\n #include \"gdb_string_view.h\"\n \n /* xmalloc(), xrealloc() and xcalloc() have already been declared in"
    },
    {
      "sha": "bc8ad7b5dc4e20004e9048d82d8ae1270cf3fad8",
      "filename": "gdbsupport/gdb_assert.h",
      "status": "modified",
      "additions": 2,
      "deletions": 13,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/830070c66d25e6749b7159009f1d87d85f02eaa3/gdbsupport/gdb_assert.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/830070c66d25e6749b7159009f1d87d85f02eaa3/gdbsupport/gdb_assert.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/gdb_assert.h?ref=830070c66d25e6749b7159009f1d87d85f02eaa3",
      "patch": "@@ -33,29 +33,18 @@\n \n #define gdb_assert(expr)                                                      \\\n   ((void) ((expr) ? 0 :                                                       \\\n-\t   (gdb_assert_fail (#expr, __FILE__, __LINE__, FUNCTION_NAME), 0)))\n+\t   (gdb_assert_fail (#expr, __FILE__, __LINE__, __func__), 0)))\n \n /* This prints an \"Assertion failed\" message, asking the user if they\n    want to continue, dump core, or just exit.  */\n-#if defined (FUNCTION_NAME)\n #define gdb_assert_fail(assertion, file, line, function)                      \\\n   internal_error (file, line, _(\"%s: Assertion `%s' failed.\"),                \\\n \t\t  function, assertion)\n-#else\n-#define gdb_assert_fail(assertion, file, line, function)                      \\\n-  internal_error (file, line, _(\"Assertion `%s' failed.\"),                    \\\n-\t\t  assertion)\n-#endif\n \n /* The canonical form of gdb_assert (0).\n    MESSAGE is a string to include in the error message.  */\n \n-#if defined (FUNCTION_NAME)\n-#define gdb_assert_not_reached(message) \\\n-  internal_error (__FILE__, __LINE__, \"%s: %s\", FUNCTION_NAME, _(message))\n-#else\n #define gdb_assert_not_reached(message) \\\n-  internal_error (__FILE__, __LINE__, _(message))\n-#endif\n+  internal_error (__FILE__, __LINE__, \"%s: %s\", __func__, _(message))\n \n #endif /* COMMON_GDB_ASSERT_H */"
    }
  ]
}