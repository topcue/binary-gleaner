{
  "sha": "c5a2e0123b7241be6a2022f1acb8fa700dda628a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzVhMmUwMTIzYjcyNDFiZTZhMjAyMmYxYWNiOGZhNzAwZGRhNjI4YQ==",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-05-15T12:43:36Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-05-15T14:59:19Z"
    },
    "message": "sim: switch to libiberty environ.h\n\nDrop our compat code and assume environ exists to simplify.",
    "tree": {
      "sha": "8418125810838d9bdb2970385d9672a907efc59c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8418125810838d9bdb2970385d9672a907efc59c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c5a2e0123b7241be6a2022f1acb8fa700dda628a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c5a2e0123b7241be6a2022f1acb8fa700dda628a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c5a2e0123b7241be6a2022f1acb8fa700dda628a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c5a2e0123b7241be6a2022f1acb8fa700dda628a/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b9c0d703127de14cdbb32dc3607fd16cc427e352",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b9c0d703127de14cdbb32dc3607fd16cc427e352",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b9c0d703127de14cdbb32dc3607fd16cc427e352"
    }
  ],
  "stats": {
    "total": 42,
    "additions": 18,
    "deletions": 24
  },
  "files": [
    {
      "sha": "b221166212aa338534d6105801f9eecb285e7e08",
      "filename": "sim/common/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c5a2e0123b7241be6a2022f1acb8fa700dda628a/sim/common/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c5a2e0123b7241be6a2022f1acb8fa700dda628a/sim/common/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/ChangeLog?ref=c5a2e0123b7241be6a2022f1acb8fa700dda628a",
      "patch": "@@ -1,3 +1,9 @@\n+2021-05-15  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* nrun.c: Include environ.h.\n+\t(environ): Delete prototype.\n+\t(main): Delete HAVE_ENVIRON check.\n+\n 2021-05-14  Mike Frysinger  <vapier@gentoo.org>\n \n \t* callback.c (os_lseek): Change return and 3rd arg to int64_t."
    },
    {
      "sha": "8a1b3c19acc1e43bf8d6659e95dbc0b3bd198aa8",
      "filename": "sim/common/nrun.c",
      "status": "modified",
      "additions": 1,
      "deletions": 8,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c5a2e0123b7241be6a2022f1acb8fa700dda628a/sim/common/nrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c5a2e0123b7241be6a2022f1acb8fa700dda628a/sim/common/nrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/nrun.c?ref=c5a2e0123b7241be6a2022f1acb8fa700dda628a",
      "patch": "@@ -27,16 +27,13 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n #include \"sim-main.h\"\n \n #include \"bfd.h\"\n+#include \"environ.h\"\n \n #ifndef HAVE_STRSIGNAL\n /* While libiberty provides a fallback, it doesn't provide a prototype.  */\n extern const char *strsignal (int);\n #endif\n \n-#ifdef HAVE_ENVIRON\n-extern char **environ;\n-#endif\n-\n #ifdef HAVE_UNISTD_H\n /* For chdir.  */\n #include <unistd.h>\n@@ -133,11 +130,7 @@ main (int argc, char **argv)\n     exit (1);\n \n   /* Prepare the program for execution.  */\n-#ifdef HAVE_ENVIRON\n   sim_create_inferior (sd, prog_bfd, prog_argv, environ);\n-#else\n-  sim_create_inferior (sd, prog_bfd, prog_argv, NULL);\n-#endif\n \n   /* To accommodate relative file paths, chdir to sysroot now.  We\n      mustn't do this until BFD has opened the program, else we wouldn't"
    },
    {
      "sha": "7dfc8873275fc07ce7dd551c66018aef057793f3",
      "filename": "sim/cris/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c5a2e0123b7241be6a2022f1acb8fa700dda628a/sim/cris/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c5a2e0123b7241be6a2022f1acb8fa700dda628a/sim/cris/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/cris/ChangeLog?ref=c5a2e0123b7241be6a2022f1acb8fa700dda628a",
      "patch": "@@ -1,3 +1,9 @@\n+2021-05-15  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* sim-if.c: Include environ.h.\n+\t(environ, GET_ENVIRON): Delete.\n+\t(sim_open): Replace my_environ with environ.\n+\n 2021-05-14  Mike Frysinger  <vapier@gentoo.org>\n \n \t* traps.c (cris_break_13_handler): Delete 2nd arg to time callback."
    },
    {
      "sha": "388d1ef89627b3cce60773adaacb26029958b21d",
      "filename": "sim/cris/sim-if.c",
      "status": "modified",
      "additions": 5,
      "deletions": 16,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c5a2e0123b7241be6a2022f1acb8fa700dda628a/sim/cris/sim-if.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c5a2e0123b7241be6a2022f1acb8fa700dda628a/sim/cris/sim-if.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/cris/sim-if.c?ref=c5a2e0123b7241be6a2022f1acb8fa700dda628a",
      "patch": "@@ -30,16 +30,7 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n #include <errno.h>\n #include \"sim-options.h\"\n #include \"dis-asm.h\"\n-\n-/* Apparently the autoconf bits are missing (though HAVE_ENVIRON is used\n-   in other dirs; also lacking there).  Patch around it for major systems.  */\n-#if defined (HAVE_ENVIRON) || defined (__GLIBC__)\n-extern char **environ;\n-#define GET_ENVIRON() environ\n-#else\n-char *missing_environ[] = { \"SHELL=/bin/sh\", \"PATH=/bin:/usr/bin\", NULL };\n-#define GET_ENVIRON() missing_environ\n-#endif\n+#include \"environ.h\"\n \n /* Used with get_progbounds to find out how much memory is needed for the\n    program.  We don't want to allocate more, since that could mask\n@@ -747,7 +738,6 @@ sim_open (SIM_OPEN_KIND kind, host_callback *callback, struct bfd *abfd,\n   if (abfd != NULL && !cris_bare_iron)\n     {\n       const char *name = bfd_get_filename (abfd);\n-      char **my_environ = GET_ENVIRON ();\n       /* We use these maps to give the same behavior as the old xsim\n \t simulator.  */\n       USI envtop = 0x40000000;\n@@ -764,8 +754,8 @@ sim_open (SIM_OPEN_KIND kind, host_callback *callback, struct bfd *abfd,\n       bfd_byte buf[4];\n \n       /* Count in the environment as well. */\n-      for (envc = 0; my_environ[envc] != NULL; envc++)\n-\tlen += strlen (my_environ[envc]) + 1;\n+      for (envc = 0; environ[envc] != NULL; envc++)\n+\tlen += strlen (environ[envc]) + 1;\n \n       for (i = 0; prog_argv[i] != NULL; my_argc++, i++)\n \tlen += strlen (prog_argv[i]) + 1;\n@@ -849,10 +839,9 @@ sim_open (SIM_OPEN_KIND kind, host_callback *callback, struct bfd *abfd,\n \n       for (i = 0; i < envc; i++, csp += 4)\n \t{\n-\t  unsigned int strln = strlen (my_environ[i]) + 1;\n+\t  unsigned int strln = strlen (environ[i]) + 1;\n \n-\t  if (sim_core_write_buffer (sd, NULL, NULL_CIA, my_environ[i], epp,\n-\t\t\t\t     strln)\n+\t  if (sim_core_write_buffer (sd, NULL, NULL_CIA, environ[i], epp, strln)\n \t      != strln)\n \t    goto abandon_chip;\n "
    }
  ]
}