{
  "sha": "4a4f97c129b26445ff14d0e5323feeb80610a539",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGE0Zjk3YzEyOWIyNjQ0NWZmMTRkMGU1MzIzZmVlYjgwNjEwYTUzOQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-04-02T15:23:52Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-04-02T15:35:29Z"
    },
    "message": "gdb: add intern methods to objfile_per_bfd_storage\n\nThis allows keeping the objfile_per_bfd_storage implementation details\ninto objfile_per_bfd_storage, instead of into objfile.  And this makes\nthe intern methods usable for code that only has an\nobjfile_per_bfd_storage to work with.\n\ngdb/ChangeLog:\n\n\t* objfiles.h (struct objfile_per_bfd_storage) <intern>: New\n\tmethods.\n\t(struct objfile) <intern>: Use\n\tobjfile::objfile_per_bfd_storage::intern.\n\nChange-Id: Ifd54026c5efaeffafac9b84ff84c199acc7ce78a",
    "tree": {
      "sha": "d477370ea39e6b4c7407ebc1b6eb43f6c38be9ac",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d477370ea39e6b4c7407ebc1b6eb43f6c38be9ac"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4a4f97c129b26445ff14d0e5323feeb80610a539",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a4f97c129b26445ff14d0e5323feeb80610a539",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4a4f97c129b26445ff14d0e5323feeb80610a539",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a4f97c129b26445ff14d0e5323feeb80610a539/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0672875f3c7c03580ed88dfa48c2e3a3b16d0697",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0672875f3c7c03580ed88dfa48c2e3a3b16d0697",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0672875f3c7c03580ed88dfa48c2e3a3b16d0697"
    }
  ],
  "stats": {
    "total": 29,
    "additions": 26,
    "deletions": 3
  },
  "files": [
    {
      "sha": "ac64f5c7609954f97c06f7859abc54aa908f8531",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a4f97c129b26445ff14d0e5323feeb80610a539/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a4f97c129b26445ff14d0e5323feeb80610a539/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4a4f97c129b26445ff14d0e5323feeb80610a539",
      "patch": "@@ -1,3 +1,10 @@\n+2021-04-02  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* objfiles.h (struct objfile_per_bfd_storage) <intern>: New\n+\tmethods.\n+\t(struct objfile) <intern>: Use\n+\tobjfile::objfile_per_bfd_storage::intern.\n+\n 2021-04-01  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (TYPE_FLAG_ENUM): Remove, replace all uses"
    },
    {
      "sha": "e8a8b5f6de78be04cd470661c6c32e1e0ab4d99a",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 19,
      "deletions": 3,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a4f97c129b26445ff14d0e5323feeb80610a539/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a4f97c129b26445ff14d0e5323feeb80610a539/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=4a4f97c129b26445ff14d0e5323feeb80610a539",
      "patch": "@@ -270,6 +270,23 @@ struct objfile_per_bfd_storage\n \n   ~objfile_per_bfd_storage ();\n \n+  /* Intern STRING in this object's string cache and return the unique copy.\n+     The copy has the same lifetime as this object.\n+\n+     STRING must be null-terminated.  */\n+\n+  const char *intern (const char *str)\n+  {\n+    return (const char *) string_cache.insert (str, strlen (str) + 1);\n+  }\n+\n+  /* Same as the above, but for an std::string.  */\n+\n+  const char *intern (const std::string &str)\n+  {\n+    return (const char *) string_cache.insert (str.c_str (), str.size () + 1);\n+  }\n+\n   /* The storage has an obstack of its own.  */\n \n   auto_obstack storage_obstack;\n@@ -516,15 +533,14 @@ struct objfile\n      lifetime as the per-BFD object.  */\n   const char *intern (const char *str)\n   {\n-    return (const char *) per_bfd->string_cache.insert (str, strlen (str) + 1);\n+    return per_bfd->intern (str);\n   }\n \n   /* Intern STRING and return the unique copy.  The copy has the same\n      lifetime as the per-BFD object.  */\n   const char *intern (const std::string &str)\n   {\n-    return (const char *) per_bfd->string_cache.insert (str.c_str (),\n-\t\t\t\t\t\t\tstr.size () + 1);\n+    return per_bfd->intern (str);\n   }\n \n   /* Retrieve the gdbarch associated with this objfile.  */"
    }
  ]
}