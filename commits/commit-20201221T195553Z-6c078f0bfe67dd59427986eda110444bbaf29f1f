{
  "sha": "6c078f0bfe67dd59427986eda110444bbaf29f1f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmMwNzhmMGJmZTY3ZGQ1OTQyNzk4NmVkYTExMDQ0NGJiYWYyOWYxZg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-11-21T15:49:10Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-21T19:55:53Z"
    },
    "message": "Move enum noside earlier in expression.h\n\nFor the expression rewrite series, I needed to move enum noside\nearlier in expression.h.  Because this is a pure move, and because it\nseems harmless and uncontroversial to move an enum definition earlier\nin a file, I'm pushing it in early, to reduce the size of that series.\n\nTested by rebuilding.\n\ngdb/ChangeLog\n2020-12-21  Tom Tromey  <tom@tromey.com>\n\n\t* expression.h (enum noside): Move earlier.",
    "tree": {
      "sha": "ac5a72e6f382b8a63eff327bd3779d7ccdc5b837",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ac5a72e6f382b8a63eff327bd3779d7ccdc5b837"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6c078f0bfe67dd59427986eda110444bbaf29f1f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6c078f0bfe67dd59427986eda110444bbaf29f1f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6c078f0bfe67dd59427986eda110444bbaf29f1f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6c078f0bfe67dd59427986eda110444bbaf29f1f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e1ff6226d8e36896edbdd651753a3e1292381ba0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e1ff6226d8e36896edbdd651753a3e1292381ba0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e1ff6226d8e36896edbdd651753a3e1292381ba0"
    }
  ],
  "stats": {
    "total": 48,
    "additions": 26,
    "deletions": 22
  },
  "files": [
    {
      "sha": "142278a34990e8dcac885962cd73a874a913e085",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c078f0bfe67dd59427986eda110444bbaf29f1f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c078f0bfe67dd59427986eda110444bbaf29f1f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6c078f0bfe67dd59427986eda110444bbaf29f1f",
      "patch": "@@ -1,3 +1,7 @@\n+2020-12-21  Tom Tromey  <tom@tromey.com>\n+\n+\t* expression.h (enum noside): Move earlier.\n+\n 2020-12-21  Peter Waller  <p@pwaller.net>\n \n \t* interps.c (interpreter_exec_cmd): Restore streams pointers."
    },
    {
      "sha": "f30c79309ae97e0bac4dd704ecb0eec5a6ace281",
      "filename": "gdb/expression.h",
      "status": "modified",
      "additions": 22,
      "deletions": 22,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c078f0bfe67dd59427986eda110444bbaf29f1f/gdb/expression.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c078f0bfe67dd59427986eda110444bbaf29f1f/gdb/expression.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expression.h?ref=6c078f0bfe67dd59427986eda110444bbaf29f1f",
      "patch": "@@ -67,6 +67,28 @@ enum exp_opcode : uint8_t\n     OP_UNUSED_LAST\n   };\n \n+/* Values of NOSIDE argument to eval_subexp.  */\n+\n+enum noside\n+  {\n+    EVAL_NORMAL,\n+    EVAL_SKIP,\t\t\t/* Only effect is to increment pos.\n+\t\t\t\t   Return type information where\n+\t\t\t\t   possible.  */\n+    EVAL_AVOID_SIDE_EFFECTS\t/* Don't modify any variables or\n+\t\t\t\t   call any functions.  The value\n+\t\t\t\t   returned will have the correct\n+\t\t\t\t   type, and will have an\n+\t\t\t\t   approximately correct lvalue\n+\t\t\t\t   type (inaccuracy: anything that is\n+\t\t\t\t   listed as being in a register in\n+\t\t\t\t   the function in which it was\n+\t\t\t\t   declared will be lval_register).\n+\t\t\t\t   Ideally this would not even read\n+\t\t\t\t   target memory, but currently it\n+\t\t\t\t   does in many situations.  */\n+  };\n+\n union exp_element\n   {\n     enum exp_opcode opcode;\n@@ -135,28 +157,6 @@ extern expression_up parse_exp_1 (const char **, CORE_ADDR pc,\n \n /* From eval.c */\n \n-/* Values of NOSIDE argument to eval_subexp.  */\n-\n-enum noside\n-  {\n-    EVAL_NORMAL,\n-    EVAL_SKIP,\t\t\t/* Only effect is to increment pos.\n-\t\t\t\t   Return type information where\n-\t\t\t\t   possible.  */\n-    EVAL_AVOID_SIDE_EFFECTS\t/* Don't modify any variables or\n-\t\t\t\t   call any functions.  The value\n-\t\t\t\t   returned will have the correct\n-\t\t\t\t   type, and will have an\n-\t\t\t\t   approximately correct lvalue\n-\t\t\t\t   type (inaccuracy: anything that is\n-\t\t\t\t   listed as being in a register in\n-\t\t\t\t   the function in which it was\n-\t\t\t\t   declared will be lval_register).\n-\t\t\t\t   Ideally this would not even read\n-\t\t\t\t   target memory, but currently it\n-\t\t\t\t   does in many situations.  */\n-  };\n-\n extern struct value *evaluate_subexp_standard\n   (struct type *, struct expression *, int *, enum noside);\n "
    }
  ]
}