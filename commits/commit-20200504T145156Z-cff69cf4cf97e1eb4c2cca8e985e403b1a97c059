{
  "sha": "cff69cf4cf97e1eb4c2cca8e985e403b1a97c059",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2ZmNjljZjRjZjk3ZTFlYjRjMmNjYThlOTg1ZTQwM2IxYTk3YzA1OQ==",
  "commit": {
    "author": {
      "name": "Wilco Dijkstra",
      "email": "wdijkstr@arm.com",
      "date": "2020-05-04T14:51:56Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-05-04T14:51:56Z"
    },
    "message": "[binutils-gdb][ld][AArch64] Fix group_sections algorithm\n\n\tPR ld/25665\n\t* bfd/elfnn-aarch64.c (group_sections): Copy implementation\n\tfrom elf32-arm.c.\n\t* testsuite/ld-aarch64/aarch64-elf.exp: Add new test.\n\t* testsuite/ld-aarch64/farcall-group.s: New large group test.\n\t* testsuite/ld-aarch64/farcall-group.d: Likewise.",
    "tree": {
      "sha": "e6da7c4ad676bba189e360caf912b069ed876376",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e6da7c4ad676bba189e360caf912b069ed876376"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cff69cf4cf97e1eb4c2cca8e985e403b1a97c059",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cff69cf4cf97e1eb4c2cca8e985e403b1a97c059",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cff69cf4cf97e1eb4c2cca8e985e403b1a97c059",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cff69cf4cf97e1eb4c2cca8e985e403b1a97c059/comments",
  "author": null,
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "070b775f03ebdab6d0d007787fe19b916af4439c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/070b775f03ebdab6d0d007787fe19b916af4439c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/070b775f03ebdab6d0d007787fe19b916af4439c"
    }
  ],
  "stats": {
    "total": 142,
    "additions": 115,
    "deletions": 27
  },
  "files": [
    {
      "sha": "be1c985615c7292594338e139daaed831e3a94fa",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cff69cf4cf97e1eb4c2cca8e985e403b1a97c059/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cff69cf4cf97e1eb4c2cca8e985e403b1a97c059/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=cff69cf4cf97e1eb4c2cca8e985e403b1a97c059",
      "patch": "@@ -1,3 +1,9 @@\n+2020-05-01  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR ld/25665\n+\t* elfnn-aarch64.c (group_sections): Copy implementation from\n+\telf32-arm.c.\n+\n 2020-05-01  Alan Modra  <amodra@gmail.com>\n \n \tPR 25900"
    },
    {
      "sha": "4bb5707d2f453c4b0fc32eeba5d58f0e2ba30d75",
      "filename": "bfd/elfnn-aarch64.c",
      "status": "modified",
      "additions": 56,
      "deletions": 27,
      "changes": 83,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cff69cf4cf97e1eb4c2cca8e985e403b1a97c059/bfd/elfnn-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cff69cf4cf97e1eb4c2cca8e985e403b1a97c059/bfd/elfnn-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-aarch64.c?ref=cff69cf4cf97e1eb4c2cca8e985e403b1a97c059",
      "patch": "@@ -3546,7 +3546,7 @@ elfNN_aarch64_next_input_section (struct bfd_link_info *info, asection *isec)\n     {\n       asection **list = htab->input_list + isec->output_section->index;\n \n-      if (*list != bfd_abs_section_ptr)\n+      if (*list != bfd_abs_section_ptr && (isec->flags & SEC_CODE) != 0)\n \t{\n \t  /* Steal the link_sec pointer for our list.  */\n \t  /* This happens to make the list in reverse order,\n@@ -3567,67 +3567,96 @@ elfNN_aarch64_next_input_section (struct bfd_link_info *info, asection *isec)\n static void\n group_sections (struct elf_aarch64_link_hash_table *htab,\n \t\tbfd_size_type stub_group_size,\n-\t\tbfd_boolean stubs_always_before_branch)\n+\t\tbfd_boolean stubs_always_after_branch)\n {\n-  asection **list = htab->input_list + htab->top_index;\n+  asection **list = htab->input_list;\n \n   do\n     {\n       asection *tail = *list;\n+      asection *head;\n \n       if (tail == bfd_abs_section_ptr)\n \tcontinue;\n \n+      /* Reverse the list: we must avoid placing stubs at the\n+\t beginning of the section because the beginning of the text\n+\t section may be required for an interrupt vector in bare metal\n+\t code.  */\n+#define NEXT_SEC PREV_SEC\n+      head = NULL;\n       while (tail != NULL)\n+\t{\n+\t  /* Pop from tail.  */\n+\t  asection *item = tail;\n+\t  tail = PREV_SEC (item);\n+\n+\t  /* Push on head.  */\n+\t  NEXT_SEC (item) = head;\n+\t  head = item;\n+\t}\n+\n+      while (head != NULL)\n \t{\n \t  asection *curr;\n-\t  asection *prev;\n-\t  bfd_size_type total;\n+\t  asection *next;\n+\t  bfd_vma stub_group_start = head->output_offset;\n+\t  bfd_vma end_of_next;\n \n-\t  curr = tail;\n-\t  total = tail->size;\n-\t  while ((prev = PREV_SEC (curr)) != NULL\n-\t\t && ((total += curr->output_offset - prev->output_offset)\n-\t\t     < stub_group_size))\n-\t    curr = prev;\n+\t  curr = head;\n+\t  while (NEXT_SEC (curr) != NULL)\n+\t    {\n+\t      next = NEXT_SEC (curr);\n+\t      end_of_next = next->output_offset + next->size;\n+\t      if (end_of_next - stub_group_start >= stub_group_size)\n+\t\t/* End of NEXT is too far from start, so stop.  */\n+\t\tbreak;\n+\t      /* Add NEXT to the group.  */\n+\t      curr = next;\n+\t    }\n \n-\t  /* OK, the size from the start of CURR to the end is less\n+\t  /* OK, the size from the start to the start of CURR is less\n \t     than stub_group_size and thus can be handled by one stub\n-\t     section.  (Or the tail section is itself larger than\n+\t     section.  (Or the head section is itself larger than\n \t     stub_group_size, in which case we may be toast.)\n \t     We should really be keeping track of the total size of\n \t     stubs added here, as stubs contribute to the final output\n \t     section size.  */\n \t  do\n \t    {\n-\t      prev = PREV_SEC (tail);\n+\t      next = NEXT_SEC (head);\n \t      /* Set up this stub group.  */\n-\t      htab->stub_group[tail->id].link_sec = curr;\n+\t      htab->stub_group[head->id].link_sec = curr;\n \t    }\n-\t  while (tail != curr && (tail = prev) != NULL);\n+\t  while (head != curr && (head = next) != NULL);\n \n \t  /* But wait, there's more!  Input sections up to stub_group_size\n-\t     bytes before the stub section can be handled by it too.  */\n-\t  if (!stubs_always_before_branch)\n+\t     bytes after the stub section can be handled by it too.  */\n+\t  if (!stubs_always_after_branch)\n \t    {\n-\t      total = 0;\n-\t      while (prev != NULL\n-\t\t     && ((total += tail->output_offset - prev->output_offset)\n-\t\t\t < stub_group_size))\n+\t      stub_group_start = curr->output_offset + curr->size;\n+\n+\t      while (next != NULL)\n \t\t{\n-\t\t  tail = prev;\n-\t\t  prev = PREV_SEC (tail);\n-\t\t  htab->stub_group[tail->id].link_sec = curr;\n+\t\t  end_of_next = next->output_offset + next->size;\n+\t\t  if (end_of_next - stub_group_start >= stub_group_size)\n+\t\t    /* End of NEXT is too far from stubs, so stop.  */\n+\t\t    break;\n+\t\t  /* Add NEXT to the stub group.  */\n+\t\t  head = next;\n+\t\t  next = NEXT_SEC (head);\n+\t\t  htab->stub_group[head->id].link_sec = curr;\n \t\t}\n \t    }\n-\t  tail = prev;\n+\t  head = next;\n \t}\n     }\n-  while (list-- != htab->input_list);\n+  while (list++ != htab->input_list + htab->top_index);\n \n   free (htab->input_list);\n }\n \n+#undef PREV_SEC\n #undef PREV_SEC\n \n #define AARCH64_BITS(x, pos, n) (((x) >> (pos)) & ((1 << (n)) - 1))"
    },
    {
      "sha": "63b0b769a87155cb4c75ef7e67dbf36f3c5b8fc7",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cff69cf4cf97e1eb4c2cca8e985e403b1a97c059/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cff69cf4cf97e1eb4c2cca8e985e403b1a97c059/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=cff69cf4cf97e1eb4c2cca8e985e403b1a97c059",
      "patch": "@@ -1,3 +1,10 @@\n+2020-05-01  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\tPR ld/25665\n+\t* testsuite/ld-aarch64/farcall-group.s: New large group test.\n+\t* testsuite/ld-aarch64/farcall-group.d: New test driver.\n+\t* testsuite/ld-aarch64/aarch64-elf.exp: Run the new test.\n+\n 2020-05-01  Alan Modra  <amodra@gmail.com>\n \n \tPR 25882"
    },
    {
      "sha": "297a3e96db95b70d92c7249ab52d3a136ef5e3f8",
      "filename": "ld/testsuite/ld-aarch64/aarch64-elf.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cff69cf4cf97e1eb4c2cca8e985e403b1a97c059/ld/testsuite/ld-aarch64/aarch64-elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cff69cf4cf97e1eb4c2cca8e985e403b1a97c059/ld/testsuite/ld-aarch64/aarch64-elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/aarch64-elf.exp?ref=cff69cf4cf97e1eb4c2cca8e985e403b1a97c059",
      "patch": "@@ -262,6 +262,7 @@ run_dump_test \"farcall-b-none-function\"\n run_dump_test \"farcall-bl-none-function\"\n run_dump_test \"farcall-b-section\"\n run_dump_test \"farcall-bl-section\"\n+run_dump_test \"farcall-group\"\n \n run_dump_test \"tls-relax-all\"\n run_dump_test \"tls-relax-all-ilp32\""
    },
    {
      "sha": "365b6b99a11669c258dfd91f2349a7091cc75c31",
      "filename": "ld/testsuite/ld-aarch64/farcall-group.d",
      "status": "added",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cff69cf4cf97e1eb4c2cca8e985e403b1a97c059/ld/testsuite/ld-aarch64/farcall-group.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cff69cf4cf97e1eb4c2cca8e985e403b1a97c059/ld/testsuite/ld-aarch64/farcall-group.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/farcall-group.d?ref=cff69cf4cf97e1eb4c2cca8e985e403b1a97c059",
      "patch": "@@ -0,0 +1,30 @@\n+#name: aarch64-farcall-group\n+#source: farcall-group.s\n+#as:\n+#ld: -Ttext=0x400078\n+#objdump: -dr\n+#...\n+\n+Disassembly of section .text:\n+\n+0000000000400078 <_start>:\n+  400078:\t95000008 \tbl\t4400098 <__end_veneer>\n+\t...\n+ 440007c:\t(d503201f|1f2003d5) \t.word\t0x(d503201f|1f2003d5)\n+ 4400080:\t1400000e \tb\t44000b8 <__end_veneer\\+0x20>\n+ 4400084:\td503201f \tnop\n+\n+0000000004400088 <___start_veneer>:\n+ 4400088:\t90fe0010 \tadrp\tx16, 400000 <.*>\n+ 440008c:\t9101e210 \tadd\tx16, x16, #0x78\n+ 4400090:\td61f0200 \tbr\tx16\n+ 4400094:\t00000000 \tudf\t#0\n+\n+0000000004400098 <__end_veneer>:\n+ 4400098:\t90020010 \tadrp\tx16, 8400000 <__end_veneer\\+0x3ffff68>\n+ 440009c:\t9102e210 \tadd\tx16, x16, #0xb8\n+ 44000a0:\td61f0200 \tbr\tx16\n+\t...\n+\n+00000000084000b8 <end>:\n+ 84000b8:\t96fffff4 \tbl\t4400088 <___start_veneer>"
    },
    {
      "sha": "7fe8f94c89cec0191c1815cbbc8df2c16cc90ea8",
      "filename": "ld/testsuite/ld-aarch64/farcall-group.s",
      "status": "added",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cff69cf4cf97e1eb4c2cca8e985e403b1a97c059/ld/testsuite/ld-aarch64/farcall-group.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cff69cf4cf97e1eb4c2cca8e985e403b1a97c059/ld/testsuite/ld-aarch64/farcall-group.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-aarch64/farcall-group.s?ref=cff69cf4cf97e1eb4c2cca8e985e403b1a97c059",
      "patch": "@@ -0,0 +1,15 @@\n+\t.section .text.t1\n+\t.global _start\n+\t.global end\n+_start:\n+\tbl\tend\n+\n+\t.section .text.t2\n+\t.zero 64 * 1024 * 1024\n+\n+\t.section .text.t3\n+\t.zero 64 * 1024 * 1024\n+\n+\t.section .text.t4\n+end:\n+\tbl _start"
    }
  ]
}