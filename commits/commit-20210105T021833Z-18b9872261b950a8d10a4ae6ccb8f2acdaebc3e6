{
  "sha": "18b9872261b950a8d10a4ae6ccb8f2acdaebc3e6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MThiOTg3MjI2MWI5NTBhOGQxMGE0YWU2Y2NiOGYyYWNkYWViYzNlNg==",
  "commit": {
    "author": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2020-12-16T03:03:34Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-01-05T02:18:33Z"
    },
    "message": "RISC-V: Ouput __global_pointer$ as dynamic symbol when generating dynamic PDE.\n\nWhen the ifunc resolver is in the executable, we may relax the variables\nto gp-relative access instruction in the ifunc resolver, or in other functions\nthat called by the ifunc resolver.  But this will cause the uninitialized\ngp problem since the ifunc need to be resolved at the early runtime, that\nis at the pre-load stage, but we set the gp until the startup code.\n\nAt first, we try to add a new dynamic tag, DT_RISCV_GP, to stroe the gp value\nand let ld.so can init the gp register early, before the pre-load stage.  But\nwe need to extend the ABI if we want to add a new dynamic tag.  Therefore,\nin the psabi discussion, we try another solution, which was suggested by the\nlld and FreeBSD linker experts, to let ld.so set the gp earlier - make sure\n__global_pointer$ is output as a dynamic symbol when we are generating pde,\nsince we only do the relaxation for it.  Afterwards, ld.so can search the\nDT_SYMTAB to get the gp value, and set the gp register before resolving ifunc.\n\nbfd/\n    * elfnn-riscv.c (allocate_dynrelocs): When we are generating pde, make\n      sure gp symbol is output as a dynamic symbol.",
    "tree": {
      "sha": "68413cf74c2d6906d4e7da73f09aa0da31f9fdb2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/68413cf74c2d6906d4e7da73f09aa0da31f9fdb2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/18b9872261b950a8d10a4ae6ccb8f2acdaebc3e6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/18b9872261b950a8d10a4ae6ccb8f2acdaebc3e6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/18b9872261b950a8d10a4ae6ccb8f2acdaebc3e6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/18b9872261b950a8d10a4ae6ccb8f2acdaebc3e6/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "3d52735bab7e6df662381f51ee00b10e170cd6e9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d52735bab7e6df662381f51ee00b10e170cd6e9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3d52735bab7e6df662381f51ee00b10e170cd6e9"
    }
  ],
  "stats": {
    "total": 14,
    "additions": 14,
    "deletions": 0
  },
  "files": [
    {
      "sha": "20ccea5920efe6e028739c37f6570b909d57a101",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/18b9872261b950a8d10a4ae6ccb8f2acdaebc3e6/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/18b9872261b950a8d10a4ae6ccb8f2acdaebc3e6/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=18b9872261b950a8d10a4ae6ccb8f2acdaebc3e6",
      "patch": "@@ -1,3 +1,8 @@\n+2021-01-05  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* elfnn-riscv.c (allocate_dynrelocs): When we are generating pde,\n+\tmake sure gp symbol is output as a dynamic symbol.\n+\n 2021-01-04  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR ld/26256"
    },
    {
      "sha": "9da415e604e5a9df45febb9d968f966432f0a2ae",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/18b9872261b950a8d10a4ae6ccb8f2acdaebc3e6/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/18b9872261b950a8d10a4ae6ccb8f2acdaebc3e6/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=18b9872261b950a8d10a4ae6ccb8f2acdaebc3e6",
      "patch": "@@ -1083,6 +1083,15 @@ allocate_dynrelocs (struct elf_link_hash_entry *h, void *inf)\n   htab = riscv_elf_hash_table (info);\n   BFD_ASSERT (htab != NULL);\n \n+  /* When we are generating pde, make sure gp symbol is output as a\n+     dynamic symbol.  Then ld.so can set the gp register earlier, before\n+     resolving the ifunc.  */\n+  if (!bfd_link_pic (info)\n+      && htab->elf.dynamic_sections_created\n+      && strcmp (h->root.root.string, RISCV_GP_SYMBOL) == 0\n+      && !bfd_elf_link_record_dynamic_symbol (info, h))\n+    return FALSE;\n+\n   /* Since STT_GNU_IFUNC symbols must go through PLT, we handle them\n      in the allocate_ifunc_dynrelocs and allocate_local_ifunc_dynrelocs,\n      if they are defined and referenced in a non-shared object.  */"
    }
  ]
}