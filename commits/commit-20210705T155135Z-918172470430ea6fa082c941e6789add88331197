{
  "sha": "918172470430ea6fa082c941e6789add88331197",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTE4MTcyNDcwNDMwZWE2ZmEwODJjOTQxZTY3ODlhZGQ4ODMzMTE5Nw==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-07-02T20:42:32Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-07-05T15:51:35Z"
    },
    "message": "ld: Cache and reuse the IR archive file descriptor\n\nLinker plugin_object_p opens the IR archive for each IR archive member.\nFor GCC plugin, plugin_object_p closes the archive file descriptor.  But\nfor LLVM plugin, the archive file descriptor remains open.  If there are\n3000 IR archive members, there are 3000 file descriptors for them.  We\ncan run out of file descriptors petty easily.\n\n1. Add archive_plugin_fd and archive_plugin_fd_open_count to bfd so that\nwe can cache and reuse the IR archive file descriptor for all IR archive\nmembers in the archive.\n2. Add bfd_plugin_close_file_descriptor to properly close the IR archive\nfile descriptor.\n\nbfd/\n\n\tPR ld/28040\n\t* archive.c (_bfd_archive_close_and_cleanup): Close the archive\n\tplugin file descriptor if needed.\n\t* bfd.c (bfd): Add archive_plugin_fd and\n\tarchive_plugin_fd_open_count.\n\t* opncls.c (_bfd_new_bfd): Initialize to -1.\n\t* plugin.c (bfd_plugin_open_input): Cache and reuse the archive\n\tplugin file descriptor.\n\t(bfd_plugin_close_file_descriptor): New function.\n\t(try_claim): Call bfd_plugin_close_file_descriptor.\n\t* plugin.h (bfd_plugin_close_file_descriptor): New.\n\t* bfd-in2.h: Regenerated.\n\nld/\n\n\tPR ld/28040\n\t* plugin.c (plugin_input_file): Add ibfd.\n\t(release_plugin_file_descriptor): New function.\n\t(release_input_file): Call release_plugin_file_descriptor to\n\tclose input->fd.\n\t(plugin_object_p): Call release_plugin_file_descriptor to close\n\tinput->fd.  Also call release_plugin_file_descriptor if not\n\tclaimed.\n\t* testsuite/config/default.exp (RANLIB): New.\n\t* testsuite/ld-plugin/lto.exp: Run ranlib test.",
    "tree": {
      "sha": "d32fe8758c189052469f5b029bef5ebc3fc01a51",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d32fe8758c189052469f5b029bef5ebc3fc01a51"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/918172470430ea6fa082c941e6789add88331197",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/918172470430ea6fa082c941e6789add88331197",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/918172470430ea6fa082c941e6789add88331197",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/918172470430ea6fa082c941e6789add88331197/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c919d6be44913ed52d91c203e87e529ee17de805",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c919d6be44913ed52d91c203e87e529ee17de805",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c919d6be44913ed52d91c203e87e529ee17de805"
    }
  ],
  "stats": {
    "total": 161,
    "additions": 122,
    "deletions": 39
  },
  "files": [
    {
      "sha": "5f350b8e5ce3991ae1df6d81382afed2db7a2dba",
      "filename": "bfd/archive.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/918172470430ea6fa082c941e6789add88331197/bfd/archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/918172470430ea6fa082c941e6789add88331197/bfd/archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archive.c?ref=918172470430ea6fa082c941e6789add88331197",
      "patch": "@@ -2845,6 +2845,10 @@ _bfd_archive_close_and_cleanup (bfd *abfd)\n \t  htab_delete (htab);\n \t  bfd_ardata (abfd)->cache = NULL;\n \t}\n+\n+      /* Close the archive plugin file descriptor if needed.  */\n+      if (abfd->archive_plugin_fd > 0)\n+\tclose (abfd->archive_plugin_fd);\n     }\n \n   _bfd_unlink_from_archive_parent (abfd);"
    },
    {
      "sha": "9a698316980528610641b494a2ce642524c0ee3d",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/918172470430ea6fa082c941e6789add88331197/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/918172470430ea6fa082c941e6789add88331197/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=918172470430ea6fa082c941e6789add88331197",
      "patch": "@@ -6707,6 +6707,12 @@ struct bfd\n   /* The number of sections.  */\n   unsigned int section_count;\n \n+  /* The archive plugin file descriptor.  */\n+  int archive_plugin_fd;\n+\n+  /* The number of opens on the archive plugin file descriptor.  */\n+  unsigned int archive_plugin_fd_open_count;\n+\n   /* A field used by _bfd_generic_link_add_archive_symbols.  This will\n      be used only for archive elements.  */\n   int archive_pass;"
    },
    {
      "sha": "0952aaea19c64bfea1427cbaabee231b4a4ca8f6",
      "filename": "bfd/bfd.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/918172470430ea6fa082c941e6789add88331197/bfd/bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/918172470430ea6fa082c941e6789add88331197/bfd/bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd.c?ref=918172470430ea6fa082c941e6789add88331197",
      "patch": "@@ -276,6 +276,12 @@ CODE_FRAGMENT\n .  {* The number of sections.  *}\n .  unsigned int section_count;\n .\n+.  {* The archive plugin file descriptor.  *}\n+.  int archive_plugin_fd;\n+.\n+.  {* The number of opens on the archive plugin file descriptor.  *}\n+.  unsigned int archive_plugin_fd_open_count;\n+.\n .  {* A field used by _bfd_generic_link_add_archive_symbols.  This will\n .     be used only for archive elements.  *}\n .  int archive_pass;"
    },
    {
      "sha": "4fb79324c0ad39a6606790f459b369157e00090a",
      "filename": "bfd/opncls.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/918172470430ea6fa082c941e6789add88331197/bfd/opncls.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/918172470430ea6fa082c941e6789add88331197/bfd/opncls.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/opncls.c?ref=918172470430ea6fa082c941e6789add88331197",
      "patch": "@@ -89,6 +89,8 @@ _bfd_new_bfd (void)\n       return NULL;\n     }\n \n+  nbfd->archive_plugin_fd = -1;\n+\n   return nbfd;\n }\n "
    },
    {
      "sha": "b3d6739dabbf172b439454358bfa2af62ef6ff18",
      "filename": "bfd/plugin.c",
      "status": "modified",
      "additions": 74,
      "deletions": 31,
      "changes": 105,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/918172470430ea6fa082c941e6789add88331197/bfd/plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/918172470430ea6fa082c941e6789add88331197/bfd/plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/plugin.c?ref=918172470430ea6fa082c941e6789add88331197",
      "patch": "@@ -192,6 +192,7 @@ int\n bfd_plugin_open_input (bfd *ibfd, struct ld_plugin_input_file *file)\n {\n   bfd *iobfd;\n+  int fd;\n \n   iobfd = ibfd;\n   while (iobfd->my_archive\n@@ -202,50 +203,60 @@ bfd_plugin_open_input (bfd *ibfd, struct ld_plugin_input_file *file)\n   if (!iobfd->iostream && !bfd_open_file (iobfd))\n     return 0;\n \n-  /* The plugin API expects that the file descriptor won't be closed\n-     and reused as done by the bfd file cache.  So open it again.\n-     dup isn't good enough.  plugin IO uses lseek/read while BFD uses\n-     fseek/fread.  It isn't wise to mix the unistd and stdio calls on\n-     the same underlying file descriptor.  */\n-  file->fd = open (file->name, O_RDONLY | O_BINARY);\n-  if (file->fd < 0)\n+  /* Reuse the archive plugin file descriptor.  */\n+  if (iobfd != ibfd)\n+    fd = iobfd->archive_plugin_fd;\n+  else\n+    fd = -1;\n+\n+  if (fd < 0)\n     {\n+      /* The plugin API expects that the file descriptor won't be closed\n+\t and reused as done by the bfd file cache.  So open it again.\n+\t dup isn't good enough.  plugin IO uses lseek/read while BFD uses\n+\t fseek/fread.  It isn't wise to mix the unistd and stdio calls on\n+\t the same underlying file descriptor.  */\n+      fd = open (file->name, O_RDONLY | O_BINARY);\n+      if (fd < 0)\n+\t{\n #ifndef EMFILE\n-      return 0;\n+\t  return 0;\n #else\n-      if (errno != EMFILE)\n-\treturn 0;\n+\t  if (errno != EMFILE)\n+\t    return 0;\n \n #ifdef HAVE_GETRLIMIT\n-      struct rlimit lim;\n-\n-      /* Complicated links involving lots of files and/or large archives\n-\t can exhaust the number of file descriptors available to us.\n-\t If possible, try to allocate more descriptors.  */\n-      if (getrlimit (RLIMIT_NOFILE, & lim) == 0\n-\t  && lim.rlim_cur < lim.rlim_max)\n-\t{\n-\t  lim.rlim_cur = lim.rlim_max;\n-\t  if (setrlimit (RLIMIT_NOFILE, &lim) == 0)\n-\t    file->fd = open (file->name, O_RDONLY | O_BINARY);\n-\t}\n+\t  struct rlimit lim;\n+\n+\t  /* Complicated links involving lots of files and/or large\n+\t     archives can exhaust the number of file descriptors\n+\t     available to us.  If possible, try to allocate more\n+\t     descriptors.  */\n+\t  if (getrlimit (RLIMIT_NOFILE, & lim) == 0\n+\t      && lim.rlim_cur < lim.rlim_max)\n+\t    {\n+\t      lim.rlim_cur = lim.rlim_max;\n+\t      if (setrlimit (RLIMIT_NOFILE, &lim) == 0)\n+\t\tfd = open (file->name, O_RDONLY | O_BINARY);\n+\t    }\n \n-      if (file->fd < 0)\n+\t  if (fd < 0)\n #endif\n-\t{\n-\t  _bfd_error_handler (_(\"plugin framework: out of file descriptors. Try using fewer objects/archives\\n\"));\n-\t  return 0;\n-\t} \n+\t    {\n+\t      _bfd_error_handler (_(\"plugin framework: out of file descriptors. Try using fewer objects/archives\\n\"));\n+\t      return 0;\n+\t    }\n #endif\n-   }\n+\t}\n+    }\n \n   if (iobfd == ibfd)\n     {\n       struct stat stat_buf;\n \n-      if (fstat (file->fd, &stat_buf))\n+      if (fstat (fd, &stat_buf))\n \t{\n-\t  close(file->fd);\n+\t  close (fd);\n \t  return 0;\n \t}\n \n@@ -254,12 +265,44 @@ bfd_plugin_open_input (bfd *ibfd, struct ld_plugin_input_file *file)\n     }\n   else\n     {\n+      /* Cache the archive plugin file descriptor.  */\n+      iobfd->archive_plugin_fd = fd;\n+      iobfd->archive_plugin_fd_open_count++;\n+\n       file->offset = ibfd->origin;\n       file->filesize = arelt_size (ibfd);\n     }\n+\n+  file->fd = fd;\n   return 1;\n }\n \n+/* Close the plugin file descriptor.  */\n+\n+void\n+bfd_plugin_close_file_descriptor (bfd *abfd, int fd)\n+{\n+  bfd *iobfd;\n+\n+  iobfd = abfd;\n+  while (iobfd->my_archive\n+\t && !bfd_is_thin_archive (iobfd->my_archive))\n+    iobfd = iobfd->my_archive;\n+  if (iobfd == abfd)\n+    close (fd);\n+  else\n+    {\n+      iobfd->archive_plugin_fd_open_count--;\n+      /* Dup the archive plugin file descriptor for later use, which\n+\t will be closed by _bfd_archive_close_and_cleanup.  */\n+      if (iobfd->archive_plugin_fd_open_count == 0)\n+\t{\n+\t  iobfd->archive_plugin_fd = dup (fd);\n+\t  close (fd);\n+\t}\n+    }\n+}\n+\n static int\n try_claim (bfd *abfd)\n {\n@@ -271,7 +314,7 @@ try_claim (bfd *abfd)\n       && current_plugin->claim_file)\n     {\n       current_plugin->claim_file (&file, &claimed);\n-      close (file.fd);\n+      bfd_plugin_close_file_descriptor (abfd, file.fd);\n     }\n \n   return claimed;"
    },
    {
      "sha": "709478e0065301a9e9791a5be68f222122b43147",
      "filename": "bfd/plugin.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/918172470430ea6fa082c941e6789add88331197/bfd/plugin.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/918172470430ea6fa082c941e6789add88331197/bfd/plugin.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/plugin.h?ref=918172470430ea6fa082c941e6789add88331197",
      "patch": "@@ -28,6 +28,7 @@ bool bfd_plugin_target_p (const bfd_target *);\n bool bfd_plugin_specified_p (void);\n bool bfd_link_plugin_object_p (bfd *);\n void register_ld_plugin_object_p (bfd_cleanup (*object_p) (bfd *));\n+void bfd_plugin_close_file_descriptor (bfd *, int);\n \n typedef struct plugin_data_struct\n {"
    },
    {
      "sha": "bb369f46955eb641ff9bfcc19b57e83f9e216e5e",
      "filename": "ld/plugin.c",
      "status": "modified",
      "additions": 18,
      "deletions": 8,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/918172470430ea6fa082c941e6789add88331197/ld/plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/918172470430ea6fa082c941e6789add88331197/ld/plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/plugin.c?ref=918172470430ea6fa082c941e6789add88331197",
      "patch": "@@ -103,6 +103,7 @@ typedef struct view_buffer\n typedef struct plugin_input_file\n {\n   bfd *abfd;\n+  bfd *ibfd;\n   view_buffer_t view_buffer;\n   char *name;\n   int fd;\n@@ -605,17 +606,25 @@ get_view (const void *handle, const void **viewp)\n   return LDPS_OK;\n }\n \n+/* Release plugin file descriptor.  */\n+\n+static void\n+release_plugin_file_descriptor (plugin_input_file_t *input)\n+{\n+  if (input->fd != -1)\n+    {\n+      bfd_plugin_close_file_descriptor (input->ibfd, input->fd);\n+      input->fd = -1;\n+    }\n+}\n+\n /* Release the input file.  */\n static enum ld_plugin_status\n release_input_file (const void *handle)\n {\n   plugin_input_file_t *input = (plugin_input_file_t *) handle;\n   ASSERT (called_plugin);\n-  if (input->fd != -1)\n-    {\n-      close (input->fd);\n-      input->fd = -1;\n-    }\n+  release_plugin_file_descriptor (input);\n   return LDPS_OK;\n }\n \n@@ -1211,6 +1220,7 @@ plugin_object_p (bfd *ibfd)\n \n   file.handle = input;\n   input->abfd = abfd;\n+  input->ibfd = ibfd;\n   input->view_buffer.addr = NULL;\n   input->view_buffer.filesize = 0;\n   input->view_buffer.offset = 0;\n@@ -1226,7 +1236,8 @@ plugin_object_p (bfd *ibfd)\n     einfo (_(\"%F%P: %s: plugin reported error claiming file\\n\"),\n \t   plugin_error_plugin ());\n \n-  if (input->fd != -1 && !bfd_plugin_target_p (ibfd->xvec))\n+  if (input->fd != -1\n+      && (!claimed || !bfd_plugin_target_p (ibfd->xvec)))\n     {\n       /* FIXME: fd belongs to us, not the plugin.  GCC plugin, which\n \t doesn't need fd after plugin_call_claim_file, doesn't use\n@@ -1236,8 +1247,7 @@ plugin_object_p (bfd *ibfd)\n \t release_input_file after it is done, uses BFD plugin target\n \t vector.  This scheme doesn't work when a plugin needs fd and\n \t doesn't use BFD plugin target vector neither.  */\n-      close (input->fd);\n-      input->fd = -1;\n+      release_plugin_file_descriptor (input);\n     }\n \n   if (claimed)"
    },
    {
      "sha": "0795ea81bfb6e52031f0540d5bdb9713cd8f1459",
      "filename": "ld/testsuite/config/default.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/918172470430ea6fa082c941e6789add88331197/ld/testsuite/config/default.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/918172470430ea6fa082c941e6789add88331197/ld/testsuite/config/default.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/config/default.exp?ref=918172470430ea6fa082c941e6789add88331197",
      "patch": "@@ -286,6 +286,10 @@ if ![info exists OBJCOPYFLAGS] then {\n     set OBJCOPYFLAGS {}\n }\n \n+if ![info exists RANLIB] then {\n+    set RANLIB [findfile $base_dir/../binutils/ranlib]\n+}\n+\n if ![info exists READELF] then {\n     set READELF [findfile $base_dir/../binutils/readelf]\n }"
    },
    {
      "sha": "def69e43ab3060907a02fbc0df7b0f929daa0e8d",
      "filename": "ld/testsuite/ld-plugin/lto.exp",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/918172470430ea6fa082c941e6789add88331197/ld/testsuite/ld-plugin/lto.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/918172470430ea6fa082c941e6789add88331197/ld/testsuite/ld-plugin/lto.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-plugin/lto.exp?ref=918172470430ea6fa082c941e6789add88331197",
      "patch": "@@ -786,6 +786,13 @@ if { [at_least_gcc_version 4 7] } {\n     } else {\n \tfail \"PR binutils/23460\"\n     }\n+    set exec_output [run_host_cmd \"$RANLIB\" \"$plug_opt tmpdir/libpr23460.a\"]\n+    set exec_output [prune_warnings $exec_output]\n+    if [string match \"\" $exec_output] then {\n+\tpass \"PR binutils/23460\"\n+    } else {\n+\tfail \"PR binutils/23460\"\n+    }\n }\n \n # Run \"ld -r\" to generate inputs for complex LTO tests."
    }
  ]
}