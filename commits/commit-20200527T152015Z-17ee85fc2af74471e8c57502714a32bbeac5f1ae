{
  "sha": "17ee85fc2af74471e8c57502714a32bbeac5f1ae",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTdlZTg1ZmMyYWY3NDQ3MWU4YzU3NTAyNzE0YTMyYmJlYWM1ZjFhZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-05-27T15:20:14Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:20:15Z"
    },
    "message": "Share DWARF partial symtabs\n\nThis changes the DWARF reader to share partial symtabs (or indices if\nthey are available) across objfiles.  This has a few parts.\n\n* If multiple objfiles backed by the same BFD can share partial symtabs\n  (see below), a single dwarf2_per_bfd is created.  It is stored in the\n  per-bfd `dwarf2_per_bfd_bfd_data_key` registry.  Multiple\n  dwarf2_per_objfile objects will point to the same instance.  The\n  lifetime of these dwarf2_per_bfd objects is naturally handled.  When\n  all the objfiles using the BFD are destroyed, the BFD's refount drops\n  to 0, which triggers the removal of the corresponding dwarf2_per_bfd\n  object from the registry and its destruction.\n\n* If multiple objfiles backed by the same BFD can't share partial\n  symtabs (see below), one dwarf2_per_bfd object is created for each\n  objfile.  Each dwarf2_per_objfile will point to their own instance of\n  dwarf2_per_bfd.  These instances of dwarf2_per_bfd are kept in a\n  per-objfile registry, meaning that when the objfile gets destroyed,\n  the dwarf2_per_bfd instance gets destroyed as well.\n\n* objfile::partial_symtabs is changed to be a shared_ptr again.  This\n  lets us stash a second reference in dwarf2_per_bfd; if the DWARF\n  data is being shared, we can simply copy this value to the new\n  objfile.\n\n* Two dwarf2_per_objfile objects backed by the same BFD may share a\n  dwarf2_per_bfd instance if:\n\n  * No other symbol reader has found symbols, and\n  * No BFD section rqeuires relocation\n\ngdb/ChangeLog:\n\nYYYY-MM-DD  Tom Tromey  <tom@tromey.com>\nYYYY-MM-DD  Simon Marchi  <simon.marchi@efficios.com>\n\n\t* objfiles.h (struct objfile) <partial_symtabs>: Now a\n\tshared_ptr.\n\t* dwarf2/read.h (struct dwarf2_per_objfile) <partial_symtabs>: New\n\tmember.\n\t* dwarf2/read.c (dwarf2_per_bfd_bfd_data_key,\n\tdwarf2_per_bfd_objfile_data_key>: New globals.\n\t(dwarf2_has_info): Use shared dwarf2_per_bfd if possible.\n\t(dwarf2_get_section_info): Use get_dwarf2_per_objfile.\n\t(dwarf2_initialize_objfile): Consider cases where per_bfd can be\n\tshared.\n\t(dwarf2_build_psymtabs): Set objfile::partial_symtabs and\n\tshort-circuit when sharing.\n\t(dwarf2_build_psymtabs): Set dwarf2_per_objfile::partial_symtabs.\n\t(dwarf2_psymtab::expand_psymtab): Use free_cached_comp_units.\n\nChange-Id: I868c64448589102ab8cbb8f06c31a8de50a14004",
    "tree": {
      "sha": "45d239aad7962a2d72a1b36ce3416e0ad2311b79",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/45d239aad7962a2d72a1b36ce3416e0ad2311b79"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/17ee85fc2af74471e8c57502714a32bbeac5f1ae",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/17ee85fc2af74471e8c57502714a32bbeac5f1ae",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/17ee85fc2af74471e8c57502714a32bbeac5f1ae",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/17ee85fc2af74471e8c57502714a32bbeac5f1ae/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "39b16f87f720b5cc454eac1e668c2ce2c60bfe15",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39b16f87f720b5cc454eac1e668c2ce2c60bfe15",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/39b16f87f720b5cc454eac1e668c2ce2c60bfe15"
    }
  ],
  "stats": {
    "total": 130,
    "additions": 115,
    "deletions": 15
  },
  "files": [
    {
      "sha": "0879dfab5c5e13105e5225c5344ea7e9900e6745",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17ee85fc2af74471e8c57502714a32bbeac5f1ae/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17ee85fc2af74471e8c57502714a32bbeac5f1ae/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=17ee85fc2af74471e8c57502714a32bbeac5f1ae",
      "patch": "@@ -1,3 +1,21 @@\n+2020-05-27  Tom Tromey  <tom@tromey.com>\n+\t    Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* objfiles.h (struct objfile) <partial_symtabs>: Now a\n+\tshared_ptr.\n+\t* dwarf2/read.h (struct dwarf2_per_objfile) <partial_symtabs>: New\n+\tmember.\n+\t* dwarf2/read.c (dwarf2_per_bfd_bfd_data_key,\n+\tdwarf2_per_bfd_objfile_data_key>: New globals.\n+\t(dwarf2_has_info): Use shared dwarf2_per_bfd if possible.\n+\t(dwarf2_get_section_info): Use get_dwarf2_per_objfile.\n+\t(dwarf2_initialize_objfile): Consider cases where per_bfd can be\n+\tshared.\n+\t(dwarf2_build_psymtabs): Set objfile::partial_symtabs and\n+\tshort-circuit when sharing.\n+\t(dwarf2_build_psymtabs): Set dwarf2_per_objfile::partial_symtabs.\n+\t(dwarf2_psymtab::expand_psymtab): Use free_cached_comp_units.\n+\n 2020-05-27  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* dwarf2/read.h (struct dwarf2_per_bfd) <line_header_hash>: Move"
    },
    {
      "sha": "a9569a0dcffb64c606cce3507b3baf6577df3228",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 91,
      "deletions": 14,
      "changes": 105,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17ee85fc2af74471e8c57502714a32bbeac5f1ae/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17ee85fc2af74471e8c57502714a32bbeac5f1ae/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=17ee85fc2af74471e8c57502714a32bbeac5f1ae",
      "patch": "@@ -105,7 +105,19 @@ static bool check_physname = false;\n /* When true, do not reject deprecated .gdb_index sections.  */\n static bool use_deprecated_index_sections = false;\n \n-static const struct objfile_key<dwarf2_per_objfile> dwarf2_objfile_data_key;\n+/* This is used to store the data that is always per objfile.  */\n+static const objfile_key<dwarf2_per_objfile> dwarf2_objfile_data_key;\n+\n+/* These are used to store the dwarf2_per_bfd objects.\n+\n+   objfiles having the same BFD, which doesn't require relocations, are going to\n+   share a dwarf2_per_bfd object, which is held in the _bfd_data_key version.\n+\n+   Other objfiles are not going to share a dwarf2_per_bfd with any other\n+   objfiles, so they'll have their own version kept in the _objfile_data_key\n+   version.  */\n+static const struct bfd_key<dwarf2_per_bfd> dwarf2_per_bfd_bfd_data_key;\n+static const struct objfile_key<dwarf2_per_bfd> dwarf2_per_bfd_objfile_data_key;\n \n /* The \"aclass\" indices for various kinds of computed DWARF symbols.  */\n \n@@ -1853,9 +1865,30 @@ dwarf2_has_info (struct objfile *objfile,\n \n   if (dwarf2_per_objfile == NULL)\n     {\n-      /* For now, each dwarf2_per_objfile owns its own dwarf2_per_bfd (no\n-         sharing yet).  */\n-      dwarf2_per_bfd *per_bfd = new dwarf2_per_bfd (objfile->obfd, names, can_copy);\n+      dwarf2_per_bfd *per_bfd;\n+\n+      /* We can share a \"dwarf2_per_bfd\" with other objfiles if the BFD\n+         doesn't require relocations and if there aren't partial symbols\n+\t from some other reader.  */\n+      if (!objfile_has_partial_symbols (objfile)\n+\t  && !gdb_bfd_requires_relocations (objfile->obfd))\n+\t{\n+\t  /* See if one has been created for this BFD yet.  */\n+\t  per_bfd = dwarf2_per_bfd_bfd_data_key.get (objfile->obfd);\n+\n+\t  if (per_bfd == nullptr)\n+\t    {\n+\t      /* No, create it now.  */\n+\t      per_bfd = new dwarf2_per_bfd (objfile->obfd, names, can_copy);\n+\t      dwarf2_per_bfd_bfd_data_key.set (objfile->obfd, per_bfd);\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  /* No sharing possible, create one specifically for this objfile.  */\n+\t  per_bfd = new dwarf2_per_bfd (objfile->obfd, names, can_copy);\n+\t  dwarf2_per_bfd_objfile_data_key.set (objfile, per_bfd);\n+\t}\n \n       dwarf2_per_objfile = dwarf2_objfile_data_key.emplace (objfile, objfile, per_bfd);\n     }\n@@ -2017,7 +2050,7 @@ dwarf2_get_section_info (struct objfile *objfile,\n                          asection **sectp, const gdb_byte **bufp,\n                          bfd_size_type *sizep)\n {\n-  struct dwarf2_per_objfile *data = dwarf2_objfile_data_key.get (objfile);\n+  struct dwarf2_per_objfile *data = get_dwarf2_per_objfile (objfile);\n   struct dwarf2_section_info *info;\n \n   /* We may see an objfile without any DWARF, in which case we just\n@@ -5913,27 +5946,36 @@ dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n {\n   struct dwarf2_per_objfile *dwarf2_per_objfile\n     = get_dwarf2_per_objfile (objfile);\n+  dwarf2_per_bfd *per_bfd = dwarf2_per_objfile->per_bfd;\n \n   /* If we're about to read full symbols, don't bother with the\n      indices.  In this case we also don't care if some other debug\n      format is making psymtabs, because they are all about to be\n      expanded anyway.  */\n   if ((objfile->flags & OBJF_READNOW))\n     {\n-      dwarf2_per_objfile->per_bfd->using_index = 1;\n+      /* When using READNOW, the using_index flag (set below) indicates that\n+\t PER_BFD was already initialized, when we loaded some other objfile.  */\n+      if (per_bfd->using_index)\n+\t{\n+\t  *index_kind = dw_index_kind::GDB_INDEX;\n+\t  dwarf2_per_objfile->resize_symtabs ();\n+\t  return true;\n+\t}\n+\n+      per_bfd->using_index = 1;\n       create_all_comp_units (dwarf2_per_objfile);\n       create_all_type_units (dwarf2_per_objfile);\n-      dwarf2_per_objfile->per_bfd->quick_file_names_table\n-\t= create_quick_file_names_table\n-\t    (dwarf2_per_objfile->per_bfd->all_comp_units.size ());\n+      per_bfd->quick_file_names_table\n+\t= create_quick_file_names_table (per_bfd->all_comp_units.size ());\n       dwarf2_per_objfile->resize_symtabs ();\n \n-      for (int i = 0; i < (dwarf2_per_objfile->per_bfd->all_comp_units.size ()\n-\t\t\t   + dwarf2_per_objfile->per_bfd->all_type_units.size ()); ++i)\n+      for (int i = 0; i < (per_bfd->all_comp_units.size ()\n+\t\t\t   + per_bfd->all_type_units.size ()); ++i)\n \t{\n-\t  dwarf2_per_cu_data *per_cu = dwarf2_per_objfile->per_bfd->get_cutu (i);\n+\t  dwarf2_per_cu_data *per_cu = per_bfd->get_cutu (i);\n \n-\t  per_cu->v.quick = OBSTACK_ZALLOC (&dwarf2_per_objfile->per_bfd->obstack,\n+\t  per_cu->v.quick = OBSTACK_ZALLOC (&per_bfd->obstack,\n \t\t\t\t\t    struct dwarf2_per_cu_quick_data);\n \t}\n \n@@ -5944,6 +5986,24 @@ dwarf2_initialize_objfile (struct objfile *objfile, dw_index_kind *index_kind)\n       return true;\n     }\n \n+  /* Was a debug names index already read when we processed an objfile sharing\n+     PER_BFD?  */\n+  if (per_bfd->debug_names_table != nullptr)\n+    {\n+      *index_kind = dw_index_kind::DEBUG_NAMES;\n+      dwarf2_per_objfile->resize_symtabs ();\n+      return true;\n+    }\n+\n+  /* Was a GDB index already read when we processed an objfile sharing\n+     PER_BFD?  */\n+  if (per_bfd->index_table != nullptr)\n+    {\n+      *index_kind = dw_index_kind::GDB_INDEX;\n+      dwarf2_per_objfile->resize_symtabs ();\n+      return true;\n+    }\n+\n   if (dwarf2_read_debug_names (dwarf2_per_objfile))\n     {\n       *index_kind = dw_index_kind::DEBUG_NAMES;\n@@ -5984,6 +6044,16 @@ dwarf2_build_psymtabs (struct objfile *objfile)\n {\n   struct dwarf2_per_objfile *dwarf2_per_objfile\n     = get_dwarf2_per_objfile (objfile);\n+  dwarf2_per_bfd *per_bfd = dwarf2_per_objfile->per_bfd;\n+\n+  if (per_bfd->partial_symtabs != nullptr)\n+    {\n+      /* Partial symbols were already read, so now we can simply\n+\t attach them.  */\n+      objfile->partial_symtabs = per_bfd->partial_symtabs;\n+      dwarf2_per_objfile->resize_symtabs ();\n+      return;\n+    }\n \n   init_psymbol_list (objfile, 1024);\n \n@@ -6005,6 +6075,12 @@ dwarf2_build_psymtabs (struct objfile *objfile)\n     {\n       exception_print (gdb_stderr, except);\n     }\n+\n+  /* Finish by setting the local reference to partial symtabs, so that\n+     we don't try to read them again if reading another objfile with the same\n+     BFD.  If we can't in fact share, this won't make a difference anyway as\n+     the dwarf2_per_bfd object won't be shared.  */\n+  per_bfd->partial_symtabs = objfile->partial_symtabs;\n }\n \n /* Find the base address of the compilation unit for range lists and\n@@ -9053,9 +9129,10 @@ dwarf2_psymtab::expand_psymtab (struct objfile *objfile)\n {\n   gdb_assert (!readin_p (objfile));\n \n+  dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n+  free_cached_comp_units freer (per_objfile);\n   expand_dependencies (objfile);\n \n-  dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n   dw2_do_instantiate_symtab (per_cu_data, per_objfile, false);\n   gdb_assert (get_compunit_symtab (objfile) != nullptr);\n }"
    },
    {
      "sha": "c52430a2d7a01316f08570a729a80d7391d6de70",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17ee85fc2af74471e8c57502714a32bbeac5f1ae/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17ee85fc2af74471e8c57502714a32bbeac5f1ae/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=17ee85fc2af74471e8c57502714a32bbeac5f1ae",
      "patch": "@@ -251,6 +251,11 @@ struct dwarf2_per_bfd\n   /* CUs that are queued to be read.  */\n   std::queue<dwarf2_queue_item> queue;\n \n+  /* We keep a separate reference to the partial symtabs, in case we\n+     are sharing them between objfiles.  This is only set after\n+     partial symbols have been read the first time.  */\n+  std::shared_ptr<psymtab_storage> partial_symtabs;\n+\n private:\n \n   /* The total number of per_cu and signatured_type objects that have"
    },
    {
      "sha": "56ff52119dc4de117d7b123307e3f19eab2d356a",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/17ee85fc2af74471e8c57502714a32bbeac5f1ae/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/17ee85fc2af74471e8c57502714a32bbeac5f1ae/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=17ee85fc2af74471e8c57502714a32bbeac5f1ae",
      "patch": "@@ -576,7 +576,7 @@ struct objfile\n \n   /* The partial symbol tables.  */\n \n-  std::unique_ptr<psymtab_storage> partial_symtabs;\n+  std::shared_ptr<psymtab_storage> partial_symtabs;\n \n   /* The object file's BFD.  Can be null if the objfile contains only\n      minimal symbols, e.g. the run time common symbols for SunOS4.  */"
    }
  ]
}