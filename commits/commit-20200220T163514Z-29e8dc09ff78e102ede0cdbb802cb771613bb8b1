{
  "sha": "29e8dc09ff78e102ede0cdbb802cb771613bb8b1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjllOGRjMDlmZjc4ZTEwMmVkZTBjZGJiODAyY2I3NzE2MTNiYjhiMQ==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-17T15:12:00Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-20T16:35:14Z"
    },
    "message": "gdbserver: turn target ops 'pause_all' and 'unpause_all' into methods\n\ngdbserver/ChangeLog:\n2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn process_stratum_target's pause_all and unpause_all ops\n\tinto methods of process_target.\n\n\t* target.h (struct process_stratum_target): Remove the target ops.\n\t(class process_target): Add the target ops.\n\t(pause_all): Update the macro and rename to...\n\t(target_pause_all): ... this.\n\t(unpause_all): Update the macro and rename to...\n\t(target_unpause_all): ... this.\n\t* target.cc (process_target::pause_all): Define.\n\t(process_target::unpause_all): Define.\n\n\tUpdate the derived classes and callers below.\n\n\t* server.cc (handle_status): Update.\n\t* tracepoint.cc (clear_installed_tracepoints): Update.\n\t(cmd_qtdp): Update.\n\t(cmd_qtstart): Update.\n\t(stop_tracing): Update.\n\t(cmd_qtstatus): Update.\n\t(upload_fast_traceframes): Update.\n\t(run_inferior_command): Update.\n\t* linux-low.cc (linux_target_ops): Update.\n\t(linux_pause_all): Turn into ...\n\t(linux_process_target::pause_all): ... this.\n\t(linux_unpause_all): Turn into ...\n\t(linux_process_target::unpause_all): ... this.\n\t(linux_process_target::prepare_to_access_memory): Update.\n\t(linux_process_target::done_accessing_memory): Update.\n\t* linux-low.h (class linux_process_target): Update.\n\t* lynx-low.cc (lynx_target_ops): Update.\n\t* nto-low.cc (nto_target_ops): Update.\n\t* win32-low.cc (win32_target_ops): Update.",
    "tree": {
      "sha": "e2b59f98ed2614089d6d810a913716ef7ada220f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e2b59f98ed2614089d6d810a913716ef7ada220f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/29e8dc09ff78e102ede0cdbb802cb771613bb8b1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/29e8dc09ff78e102ede0cdbb802cb771613bb8b1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/29e8dc09ff78e102ede0cdbb802cb771613bb8b1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4e2e869cb3336beb959a969e7b7c7897583ef16e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4e2e869cb3336beb959a969e7b7c7897583ef16e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4e2e869cb3336beb959a969e7b7c7897583ef16e"
    }
  ],
  "stats": {
    "total": 148,
    "additions": 92,
    "deletions": 56
  },
  "files": [
    {
      "sha": "162077b10a58ec56a81cb8aa4f5b7e0e52a46d4f",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=29e8dc09ff78e102ede0cdbb802cb771613bb8b1",
      "patch": "@@ -1,3 +1,39 @@\n+2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn process_stratum_target's pause_all and unpause_all ops\n+\tinto methods of process_target.\n+\n+\t* target.h (struct process_stratum_target): Remove the target ops.\n+\t(class process_target): Add the target ops.\n+\t(pause_all): Update the macro and rename to...\n+\t(target_pause_all): ... this.\n+\t(unpause_all): Update the macro and rename to...\n+\t(target_unpause_all): ... this.\n+\t* target.cc (process_target::pause_all): Define.\n+\t(process_target::unpause_all): Define.\n+\n+\tUpdate the derived classes and callers below.\n+\n+\t* server.cc (handle_status): Update.\n+\t* tracepoint.cc (clear_installed_tracepoints): Update.\n+\t(cmd_qtdp): Update.\n+\t(cmd_qtstart): Update.\n+\t(stop_tracing): Update.\n+\t(cmd_qtstatus): Update.\n+\t(upload_fast_traceframes): Update.\n+\t(run_inferior_command): Update.\n+\t* linux-low.cc (linux_target_ops): Update.\n+\t(linux_pause_all): Turn into ...\n+\t(linux_process_target::pause_all): ... this.\n+\t(linux_unpause_all): Turn into ...\n+\t(linux_process_target::unpause_all): ... this.\n+\t(linux_process_target::prepare_to_access_memory): Update.\n+\t(linux_process_target::done_accessing_memory): Update.\n+\t* linux-low.h (class linux_process_target): Update.\n+\t* lynx-low.cc (lynx_target_ops): Update.\n+\t* nto-low.cc (nto_target_ops): Update.\n+\t* win32-low.cc (win32_target_ops): Update.\n+\n 2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn process_stratum_target's get_tib_address op into a method of"
    },
    {
      "sha": "1a1af7953448b5a496f9af0d28450452c8a143a2",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=29e8dc09ff78e102ede0cdbb802cb771613bb8b1",
      "patch": "@@ -6586,17 +6586,17 @@ linux_process_target::thread_stopped (thread_info *thread)\n \n /* This exposes stop-all-threads functionality to other modules.  */\n \n-static void\n-linux_pause_all (int freeze)\n+void\n+linux_process_target::pause_all (bool freeze)\n {\n   stop_all_lwps (freeze, NULL);\n }\n \n /* This exposes unstop-all-threads functionality to other gdbserver\n    modules.  */\n \n-static void\n-linux_unpause_all (int unfreeze)\n+void\n+linux_process_target::unpause_all (bool unfreeze)\n {\n   unstop_all_lwps (unfreeze, NULL);\n }\n@@ -6607,7 +6607,7 @@ linux_process_target::prepare_to_access_memory ()\n   /* Neither ptrace nor /proc/PID/mem allow accessing memory through a\n      running LWP.  */\n   if (non_stop)\n-    linux_pause_all (1);\n+    target_pause_all (true);\n   return 0;\n }\n \n@@ -6617,7 +6617,7 @@ linux_process_target::done_accessing_memory ()\n   /* Neither ptrace nor /proc/PID/mem allow accessing memory through a\n      running LWP.  */\n   if (non_stop)\n-    linux_unpause_all (1);\n+    target_unpause_all (true);\n }\n \n static int\n@@ -7455,8 +7455,6 @@ linux_get_hwcap2 (int wordsize)\n static linux_process_target the_linux_target;\n \n static process_stratum_target linux_target_ops = {\n-  linux_pause_all,\n-  linux_unpause_all,\n   linux_stabilize_threads,\n   linux_install_fast_tracepoint_jump_pad,\n   linux_emit_ops,"
    },
    {
      "sha": "e5d54c5e08dac5d5b27021a355e936135a37ea53",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=29e8dc09ff78e102ede0cdbb802cb771613bb8b1",
      "patch": "@@ -396,6 +396,10 @@ class linux_process_target : public process_target\n   bool supports_thread_stopped () override;\n \n   bool thread_stopped (thread_info *thread) override;\n+\n+  void pause_all (bool freeze) override;\n+\n+  void unpause_all (bool unfreeze) override;\n };\n \n #define get_thread_lwp(thr) ((struct lwp_info *) (thread_target_data (thr)))"
    },
    {
      "sha": "92c086d97c39c3628a15dec079e3c9e9d80407ff",
      "filename": "gdbserver/lynx-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/lynx-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/lynx-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.cc?ref=29e8dc09ff78e102ede0cdbb802cb771613bb8b1",
      "patch": "@@ -735,8 +735,6 @@ static lynx_process_target the_lynx_target;\n /* The LynxOS target_ops vector.  */\n \n static process_stratum_target lynx_target_ops = {\n-  NULL,  /* pause_all */\n-  NULL,  /* unpause_all */\n   NULL,  /* stabilize_threads */\n   NULL,  /* install_fast_tracepoint_jump_pad */\n   NULL,  /* emit_ops */"
    },
    {
      "sha": "ee411a1e3756cec3ff62c820c2cc518a12d92198",
      "filename": "gdbserver/nto-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/nto-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/nto-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.cc?ref=29e8dc09ff78e102ede0cdbb802cb771613bb8b1",
      "patch": "@@ -947,8 +947,6 @@ nto_sw_breakpoint_from_kind (int kind, int *size)\n static nto_process_target the_nto_target;\n \n static process_stratum_target nto_target_ops = {\n-  NULL, /* pause_all */\n-  NULL, /* unpause_all */\n   NULL, /* stabilize_threads */\n   NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */"
    },
    {
      "sha": "670c0fed968c1f56296d8d09ccf391f950792990",
      "filename": "gdbserver/server.cc",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/server.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/server.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/server.cc?ref=29e8dc09ff78e102ede0cdbb802cb771613bb8b1",
      "patch": "@@ -3323,7 +3323,7 @@ handle_status (char *own_buf)\n     {\n       thread_info *thread = NULL;\n \n-      pause_all (0);\n+      target_pause_all (false);\n       stabilize_threads ();\n       gdb_wants_all_threads_stopped ();\n "
    },
    {
      "sha": "912f4b8bdad404271e3d9e48143a23faed9e43a8",
      "filename": "gdbserver/target.cc",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/target.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/target.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.cc?ref=29e8dc09ff78e102ede0cdbb802cb771613bb8b1",
      "patch": "@@ -650,3 +650,15 @@ process_target::get_tib_address (ptid_t ptid, CORE_ADDR *address)\n {\n   gdb_assert_not_reached (\"target op get_tib_address not supported\");\n }\n+\n+void\n+process_target::pause_all (bool freeze)\n+{\n+  /* Nop.  */\n+}\n+\n+void\n+process_target::unpause_all (bool unfreeze)\n+{\n+  /* Nop.  */\n+}"
    },
    {
      "sha": "60fb14f69e66a2ed03ec34946bd8f3c1080b7146",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 16,
      "deletions": 24,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=29e8dc09ff78e102ede0cdbb802cb771613bb8b1",
      "patch": "@@ -70,18 +70,6 @@ class process_target;\n    shared code.  */\n struct process_stratum_target\n {\n-  /* Pause all threads.  If FREEZE, arrange for any resume attempt to\n-     be ignored until an unpause_all call unfreezes threads again.\n-     There can be nested calls to pause_all, so a freeze counter\n-     should be maintained.  */\n-  void (*pause_all) (int freeze);\n-\n-  /* Unpause all threads.  Threads that hadn't been resumed by the\n-     client should be left stopped.  Basically a pause/unpause call\n-     pair should not end up resuming threads that were stopped before\n-     the pause call.  */\n-  void (*unpause_all) (int unfreeze);\n-\n   /* Stabilize all threads.  That is, force them out of jump pads.  */\n   void (*stabilize_threads) (void);\n \n@@ -494,6 +482,18 @@ class process_target\n \n   /* Read Thread Information Block address.  */\n   virtual int get_tib_address (ptid_t ptid, CORE_ADDR *address);\n+\n+  /* Pause all threads.  If FREEZE, arrange for any resume attempt to\n+     be ignored until an unpause_all call unfreezes threads again.\n+     There can be nested calls to pause_all, so a freeze counter\n+     should be maintained.  */\n+  virtual void pause_all (bool freeze);\n+\n+  /* Unpause all threads.  Threads that hadn't been resumed by the\n+     client should be left stopped.  Basically a pause/unpause call\n+     pair should not end up resuming threads that were stopped before\n+     the pause call.  */\n+  virtual void unpause_all (bool unfreeze);\n };\n \n extern process_stratum_target *the_target;\n@@ -568,19 +568,11 @@ int kill_inferior (process_info *proc);\n #define target_thread_stopped(thread) \\\n   the_target->pt->thread_stopped (thread)\n \n-#define pause_all(freeze)\t\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      if (the_target->pause_all)\t\t\\\n-\t(*the_target->pause_all) (freeze);\t\\\n-    } while (0)\n+#define target_pause_all(freeze)\t\t\\\n+  the_target->pt->pause_all (freeze)\n \n-#define unpause_all(unfreeze)\t\t\t\\\n-  do\t\t\t\t\t\t\\\n-    {\t\t\t\t\t\t\\\n-      if (the_target->unpause_all)\t\t\\\n-\t(*the_target->unpause_all) (unfreeze);\t\\\n-    } while (0)\n+#define target_unpause_all(unfreeze)\t\t\\\n+  the_target->pt->unpause_all (unfreeze)\n \n #define stabilize_threads()\t\t\t\\\n   do\t\t\t\t\t\t\\"
    },
    {
      "sha": "ffa819cf24e773c4966dd23c9684374dec7b869c",
      "filename": "gdbserver/tracepoint.cc",
      "status": "modified",
      "additions": 17,
      "deletions": 17,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/tracepoint.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/tracepoint.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/tracepoint.cc?ref=29e8dc09ff78e102ede0cdbb802cb771613bb8b1",
      "patch": "@@ -2433,7 +2433,7 @@ clear_installed_tracepoints (void)\n   struct tracepoint *tpoint;\n   struct tracepoint *prev_stpoint;\n \n-  pause_all (1);\n+  target_pause_all (true);\n \n   prev_stpoint = NULL;\n \n@@ -2486,7 +2486,7 @@ clear_installed_tracepoints (void)\n       tpoint->handle = NULL;\n     }\n \n-  unpause_all (1);\n+  target_unpause_all (true);\n }\n \n /* Parse a packet that defines a tracepoint.  */\n@@ -2602,14 +2602,14 @@ cmd_qtdp (char *own_buf)\n       struct tracepoint *tp = NULL;\n \n       /* Pause all threads temporarily while we patch tracepoints.  */\n-      pause_all (0);\n+      target_pause_all (false);\n \n       /* download_tracepoint will update global `tracepoints'\n \t list, so it is unsafe to leave threads in jump pad.  */\n       stabilize_threads ();\n \n       /* Freeze threads.  */\n-      pause_all (1);\n+      target_pause_all (true);\n \n \n       if (tpoint->type != trap_tracepoint)\n@@ -2658,7 +2658,7 @@ cmd_qtdp (char *own_buf)\n \t    write_ok (own_buf);\n \t}\n \n-      unpause_all (1);\n+      target_unpause_all (true);\n       return;\n     }\n \n@@ -3220,7 +3220,7 @@ cmd_qtstart (char *packet)\n   trace_debug (\"Starting the trace\");\n \n   /* Pause all threads temporarily while we patch tracepoints.  */\n-  pause_all (0);\n+  target_pause_all (false);\n \n   /* Get threads out of jump pads.  Safe to do here, since this is a\n      top level command.  And, required to do here, since we're\n@@ -3229,7 +3229,7 @@ cmd_qtstart (char *packet)\n   stabilize_threads ();\n \n   /* Freeze threads.  */\n-  pause_all (1);\n+  target_pause_all (true);\n \n   /* Sync the fast tracepoints list in the inferior ftlib.  */\n   if (agent_loaded_p ())\n@@ -3370,7 +3370,7 @@ cmd_qtstart (char *packet)\n       clear_installed_tracepoints ();\n       if (*packet == '\\0')\n \twrite_enn (packet);\n-      unpause_all (1);\n+      target_unpause_all (true);\n       return;\n     }\n \n@@ -3418,7 +3418,7 @@ cmd_qtstart (char *packet)\n \terror (\"Error setting flush_trace_buffer breakpoint\");\n     }\n \n-  unpause_all (1);\n+  target_unpause_all (true);\n \n   write_ok (packet);\n }\n@@ -3445,7 +3445,7 @@ stop_tracing (void)\n      when we're sure we can move all threads out of the jump pads).\n      We can't now, since we may be getting here due to the inferior\n      agent calling us.  */\n-  pause_all (1);\n+  target_pause_all (true);\n \n   /* Stop logging. Tracepoints can still be hit, but they will not be\n      recorded.  */\n@@ -3522,7 +3522,7 @@ stop_tracing (void)\n       flush_trace_buffer_bkpt = NULL;\n     }\n \n-  unpause_all (1);\n+  target_unpause_all (true);\n }\n \n static int\n@@ -3668,11 +3668,11 @@ cmd_qtstatus (char *packet)\n \n   if (agent_loaded_p ())\n     {\n-      pause_all (1);\n+      target_pause_all (true);\n \n       upload_fast_traceframes ();\n \n-      unpause_all (1);\n+      target_unpause_all (true);\n    }\n \n   stop_reason_rsp = (char *) tracing_stop_reason;\n@@ -6578,12 +6578,12 @@ upload_fast_traceframes (void)\n \n   trace_debug (\"Done uploading traceframes [%d]\\n\", curr_tbctrl_idx);\n \n-  pause_all (1);\n+  target_pause_all (true);\n \n   delete_breakpoint (about_to_request_buffer_space_bkpt);\n   about_to_request_buffer_space_bkpt = NULL;\n \n-  unpause_all (1);\n+  target_unpause_all (true);\n \n   if (trace_buffer_is_full)\n     stop_tracing ();\n@@ -6861,13 +6861,13 @@ run_inferior_command (char *cmd, int len)\n \n   trace_debug (\"run_inferior_command: running: %s\", cmd);\n \n-  pause_all (0);\n+  target_pause_all (false);\n   uninsert_all_breakpoints ();\n \n   err = agent_run_command (pid, (const char *) cmd, len);\n \n   reinsert_all_breakpoints ();\n-  unpause_all (0);\n+  target_unpause_all (false);\n \n   return err;\n }"
    },
    {
      "sha": "a06cea22fc8eb85bbce228c9b12de01a04757ae9",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/29e8dc09ff78e102ede0cdbb802cb771613bb8b1/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=29e8dc09ff78e102ede0cdbb802cb771613bb8b1",
      "patch": "@@ -1858,8 +1858,6 @@ win32_sw_breakpoint_from_kind (int kind, int *size)\n static win32_process_target the_win32_target;\n \n static process_stratum_target win32_target_ops = {\n-  NULL, /* pause_all */\n-  NULL, /* unpause_all */\n   NULL, /* stabilize_threads */\n   NULL, /* install_fast_tracepoint_jump_pad */\n   NULL, /* emit_ops */"
    }
  ]
}