{
  "sha": "3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Mzk0N2Y2NTRlYWJiMWI2Y2NmOGFhZDExZWNlNDZkYzRiMDI3ZjBmMA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-27T17:59:01Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-27T18:00:07Z"
    },
    "message": "gdb: make add_com_alias accept target as a cmd_list_element\n\nThe alias creation functions currently accept a name to specify the\ntarget command.  They pass this to add_alias_cmd, which needs to lookup\nthe target command by name.\n\nGiven that:\n\n - We don't support creating an alias for a command before that command\n   exists.\n - We always use add_info_alias just after creating that target command,\n   and therefore have access to the target command's cmd_list_element.\n\n... change add_com_alias to accept the target command as a\ncmd_list_element (other functions are done in subsequent patches).  This\nensures we don't create the alias before the target command, because you\nneed to get the cmd_list_element from somewhere when you call the alias\ncreation function.  And it avoids an unecessary command lookup.  So it\nseems better to me in every aspect.\n\ngdb/ChangeLog:\n\n\t* command.h (add_com_alias): Accept target as\n\tcmd_list_element.  Update callers.\n\nChange-Id: I24bed7da57221cc77606034de3023fedac015150",
    "tree": {
      "sha": "ce1f687f4929daf2ce5aa10741c244cb1ab6e7ab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ce1f687f4929daf2ce5aa10741c244cb1ab6e7ab"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7bd22f56a3cf47c6743f7f7989a6fa07f935d31b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7bd22f56a3cf47c6743f7f7989a6fa07f935d31b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7bd22f56a3cf47c6743f7f7989a6fa07f935d31b"
    }
  ],
  "stats": {
    "total": 392,
    "additions": 219,
    "deletions": 173
  },
  "files": [
    {
      "sha": "5b04413509b9a63a252d16a164bf56875cec0bb9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -1,3 +1,8 @@\n+2021-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* command.h (add_com_alias): Accept target as\n+\tcmd_list_element.  Update callers.\n+\n 2021-05-27  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* python/py-param.c (add_setshow_generic): Use return values of"
    },
    {
      "sha": "1df0080dd52076e765df4e1f2f41a004495b7ff0",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 35,
      "deletions": 28,
      "changes": 63,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -15724,16 +15724,17 @@ so it will be deleted when hit.\\n\\\n BREAK_ARGS_HELP (\"thbreak\")));\n   set_cmd_completer (c, location_completer);\n \n-  add_prefix_cmd (\"enable\", class_breakpoint, enable_command, _(\"\\\n+  cmd_list_element *enable_cmd\n+    = add_prefix_cmd (\"enable\", class_breakpoint, enable_command, _(\"\\\n Enable all or some breakpoints.\\n\\\n Usage: enable [BREAKPOINTNUM]...\\n\\\n Give breakpoint numbers (separated by spaces) as arguments.\\n\\\n With no subcommand, breakpoints are enabled until you command otherwise.\\n\\\n This is used to cancel the effect of the \\\"disable\\\" command.\\n\\\n With a subcommand you can enable temporarily.\"),\n-\t\t  &enablelist, 1, &cmdlist);\n+\t\t      &enablelist, 1, &cmdlist);\n \n-  add_com_alias (\"en\", \"enable\", class_breakpoint, 1);\n+  add_com_alias (\"en\", enable_cmd, class_breakpoint, 1);\n \n   add_prefix_cmd (\"breakpoints\", class_breakpoint, enable_command, _(\"\\\n Enable all or some breakpoints.\\n\\\n@@ -15781,15 +15782,16 @@ If a breakpoint is hit while enabled in this fashion,\\n\\\n the count is decremented; when it reaches zero, the breakpoint is disabled.\"),\n \t   &enablelist);\n \n-  add_prefix_cmd (\"disable\", class_breakpoint, disable_command, _(\"\\\n+  cmd_list_element *disable_cmd\n+    = add_prefix_cmd (\"disable\", class_breakpoint, disable_command, _(\"\\\n Disable all or some breakpoints.\\n\\\n Usage: disable [BREAKPOINTNUM]...\\n\\\n Arguments are breakpoint numbers with spaces in between.\\n\\\n To disable all breakpoints, give no argument.\\n\\\n A disabled breakpoint is not forgotten, but has no effect until re-enabled.\"),\n-\t\t  &disablelist, 1, &cmdlist);\n-  add_com_alias (\"dis\", \"disable\", class_breakpoint, 1);\n-  add_com_alias (\"disa\", \"disable\", class_breakpoint, 1);\n+\t\t      &disablelist, 1, &cmdlist);\n+  add_com_alias (\"dis\", disable_cmd, class_breakpoint, 1);\n+  add_com_alias (\"disa\", disable_cmd, class_breakpoint, 1);\n \n   add_cmd (\"breakpoints\", class_breakpoint, disable_command, _(\"\\\n Disable all or some breakpoints.\\n\\\n@@ -15800,16 +15802,17 @@ A disabled breakpoint is not forgotten, but has no effect until re-enabled.\\n\\\n This command may be abbreviated \\\"disable\\\".\"),\n \t   &disablelist);\n \n-  add_prefix_cmd (\"delete\", class_breakpoint, delete_command, _(\"\\\n+  cmd_list_element *delete_cmd\n+    = add_prefix_cmd (\"delete\", class_breakpoint, delete_command, _(\"\\\n Delete all or some breakpoints.\\n\\\n Usage: delete [BREAKPOINTNUM]...\\n\\\n Arguments are breakpoint numbers with spaces in between.\\n\\\n To delete all breakpoints, give no argument.\\n\\\n \\n\\\n Also a prefix command for deletion of other GDB objects.\"),\n-\t\t  &deletelist, 1, &cmdlist);\n-  add_com_alias (\"d\", \"delete\", class_breakpoint, 1);\n-  add_com_alias (\"del\", \"delete\", class_breakpoint, 1);\n+\t\t      &deletelist, 1, &cmdlist);\n+  add_com_alias (\"d\", delete_cmd, class_breakpoint, 1);\n+  add_com_alias (\"del\", delete_cmd, class_breakpoint, 1);\n \n   add_cmd (\"breakpoints\", class_breakpoint, delete_command, _(\"\\\n Delete all or some breakpoints or auto-display expressions.\\n\\\n@@ -15819,25 +15822,27 @@ To delete all breakpoints, give no argument.\\n\\\n This command may be abbreviated \\\"delete\\\".\"),\n \t   &deletelist);\n \n-  add_com (\"clear\", class_breakpoint, clear_command, _(\"\\\n+  cmd_list_element *clear_cmd\n+   = add_com (\"clear\", class_breakpoint, clear_command, _(\"\\\n Clear breakpoint at specified location.\\n\\\n Argument may be a linespec, explicit, or address location as described below.\\n\\\n \\n\\\n With no argument, clears all breakpoints in the line that the selected frame\\n\\\n is executing in.\\n\"\n \"\\n\" LOCATION_HELP_STRING \"\\n\\n\\\n See also the \\\"delete\\\" command which clears breakpoints by number.\"));\n-  add_com_alias (\"cl\", \"clear\", class_breakpoint, 1);\n+  add_com_alias (\"cl\", clear_cmd, class_breakpoint, 1);\n \n-  c = add_com (\"break\", class_breakpoint, break_command, _(\"\\\n+  cmd_list_element *break_cmd\n+    = add_com (\"break\", class_breakpoint, break_command, _(\"\\\n Set breakpoint at specified location.\\n\"\n BREAK_ARGS_HELP (\"break\")));\n-  set_cmd_completer (c, location_completer);\n+  set_cmd_completer (break_cmd, location_completer);\n \n-  add_com_alias (\"b\", \"break\", class_run, 1);\n-  add_com_alias (\"br\", \"break\", class_run, 1);\n-  add_com_alias (\"bre\", \"break\", class_run, 1);\n-  add_com_alias (\"brea\", \"break\", class_run, 1);\n+  add_com_alias (\"b\", break_cmd, class_run, 1);\n+  add_com_alias (\"br\", break_cmd, class_run, 1);\n+  add_com_alias (\"bre\", break_cmd, class_run, 1);\n+  add_com_alias (\"brea\", break_cmd, class_run, 1);\n \n   if (dbx_commands)\n     {\n@@ -16006,17 +16011,18 @@ hardware.)\"),\n \n   /* Tracepoint manipulation commands.  */\n \n-  c = add_com (\"trace\", class_breakpoint, trace_command, _(\"\\\n+  cmd_list_element *trace_cmd\n+    = add_com (\"trace\", class_breakpoint, trace_command, _(\"\\\n Set a tracepoint at specified location.\\n\\\n \\n\"\n BREAK_ARGS_HELP (\"trace\") \"\\n\\\n Do \\\"help tracepoints\\\" for info on other tracepoint commands.\"));\n-  set_cmd_completer (c, location_completer);\n+  set_cmd_completer (trace_cmd, location_completer);\n \n-  add_com_alias (\"tp\", \"trace\", class_breakpoint, 0);\n-  add_com_alias (\"tr\", \"trace\", class_breakpoint, 1);\n-  add_com_alias (\"tra\", \"trace\", class_breakpoint, 1);\n-  add_com_alias (\"trac\", \"trace\", class_breakpoint, 1);\n+  add_com_alias (\"tp\", trace_cmd, class_breakpoint, 0);\n+  add_com_alias (\"tr\", trace_cmd, class_breakpoint, 1);\n+  add_com_alias (\"tra\", trace_cmd, class_breakpoint, 1);\n+  add_com_alias (\"trac\", trace_cmd, class_breakpoint, 1);\n \n   c = add_com (\"ftrace\", class_breakpoint, ftrace_command, _(\"\\\n Set a fast tracepoint at specified location.\\n\\\n@@ -16094,13 +16100,14 @@ session to restore them.\"),\n \t       &save_cmdlist);\n   set_cmd_completer (c, filename_completer);\n \n-  c = add_cmd (\"tracepoints\", class_trace, save_tracepoints_command, _(\"\\\n+  cmd_list_element *save_tracepoints_cmd\n+    = add_cmd (\"tracepoints\", class_trace, save_tracepoints_command, _(\"\\\n Save current tracepoint definitions as a script.\\n\\\n Use the 'source' command in another debug session to restore them.\"),\n \t       &save_cmdlist);\n-  set_cmd_completer (c, filename_completer);\n+  set_cmd_completer (save_tracepoints_cmd, filename_completer);\n \n-  c = add_com_alias (\"save-tracepoints\", \"save tracepoints\", class_trace, 0);\n+  c = add_com_alias (\"save-tracepoints\", save_tracepoints_cmd, class_trace, 0);\n   deprecate_cmd (c, \"save tracepoints\");\n \n   add_basic_prefix_cmd (\"breakpoint\", class_maintenance, _(\"\\"
    },
    {
      "sha": "8b2aa5aad5a9f0edd855d22bc0009362a8c0b1e6",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 36,
      "deletions": 28,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -1750,19 +1750,20 @@ argv_to_string (char **argv, int n)\n    and the user would expect bbb to execute 'backtrace -full -past-main'\n    while it will execute 'backtrace -past-main'.  */\n \n-static void\n+static cmd_list_element *\n validate_aliased_command (const char *command)\n {\n-  struct cmd_list_element *c;\n   std::string default_args;\n-\n-  c = lookup_cmd_1 (& command, cmdlist, NULL, &default_args, 1);\n+  cmd_list_element *c\n+    = lookup_cmd_1 (& command, cmdlist, NULL, &default_args, 1);\n \n   if (c == NULL || c == (struct cmd_list_element *) -1)\n     error (_(\"Invalid command to alias to: %s\"), command);\n \n   if (!default_args.empty ())\n     error (_(\"Cannot define an alias of an alias that has default args\"));\n+\n+  return c;\n }\n \n /* Called when \"alias\" was incorrectly used.  */\n@@ -1832,7 +1833,7 @@ alias_command (const char *args, int from_tty)\n   std::string command_string (argv_to_string (command_argv.get (),\n \t\t\t\t\t      command_argc));\n   command = command_string.c_str ();\n-  validate_aliased_command (command);\n+  cmd_list_element *target_cmd = validate_aliased_command (command);\n \n   /* ALIAS must not exist.  */\n   std::string alias_string (argv_to_string (alias_argv, alias_argc));\n@@ -1875,8 +1876,8 @@ alias_command (const char *args, int from_tty)\n   if (alias_argc == 1)\n     {\n       /* add_cmd requires *we* allocate space for name, hence the xstrdup.  */\n-      alias_cmd = add_com_alias (xstrdup (alias_argv[0]), command, class_alias,\n-\t\t\t\t a_opts.abbrev_flag);\n+      alias_cmd = add_com_alias (xstrdup (alias_argv[0]), target_cmd,\n+\t\t\t\t class_alias, a_opts.abbrev_flag);\n     }\n   else\n     {\n@@ -2332,16 +2333,18 @@ strict == evaluate script according to filename extension, error if not supporte\n \t\t\tshow_script_ext_mode,\n \t\t\t&setlist, &showlist);\n \n-  add_com (\"quit\", class_support, quit_command, _(\"\\\n+  cmd_list_element *quit_cmd\n+    = add_com (\"quit\", class_support, quit_command, _(\"\\\n Exit gdb.\\n\\\n Usage: quit [EXPR]\\n\\\n The optional expression EXPR, if present, is evaluated and the result\\n\\\n used as GDB's exit code.  The default is zero.\"));\n-  c = add_com (\"help\", class_support, help_command,\n+  cmd_list_element *help_cmd\n+    = add_com (\"help\", class_support, help_command,\n \t       _(\"Print list of commands.\"));\n-  set_cmd_completer (c, command_completer);\n-  add_com_alias (\"q\", \"quit\", class_support, 1);\n-  add_com_alias (\"h\", \"help\", class_support, 1);\n+  set_cmd_completer (help_cmd, command_completer);\n+  add_com_alias (\"q\", quit_cmd, class_support, 1);\n+  add_com_alias (\"h\", help_cmd, class_support, 1);\n \n   add_setshow_boolean_cmd (\"verbose\", class_support, &info_verbose, _(\"\\\n Set verbosity.\"), _(\"\\\n@@ -2365,11 +2368,12 @@ Without an argument, history expansion is enabled.\"),\n \t\t\t   show_history_expansion_p,\n \t\t\t   &sethistlist, &showhistlist);\n \n-  add_prefix_cmd (\"info\", class_info, info_command, _(\"\\\n+  cmd_list_element *info_cmd\n+    = add_prefix_cmd (\"info\", class_info, info_command, _(\"\\\n Generic command for showing things about the program being debugged.\"),\n-\t\t  &infolist, 0, &cmdlist);\n-  add_com_alias (\"i\", \"info\", class_info, 1);\n-  add_com_alias (\"inf\", \"info\", class_info, 1);\n+\t\t      &infolist, 0, &cmdlist);\n+  add_com_alias (\"i\", info_cmd, class_info, 1);\n+  add_com_alias (\"inf\", info_cmd, class_info, 1);\n \n   add_com (\"complete\", class_obscure, complete_command,\n \t   _(\"List the completions for the rest of the line as a command.\"));\n@@ -2380,7 +2384,8 @@ Generic command for showing things about the debugger.\"),\n   /* Another way to get at the same thing.  */\n   add_alias_cmd (\"set\", c, class_info, 0, &infolist);\n \n-  c = add_com (\"with\", class_vars, with_command, _(\"\\\n+  cmd_list_element *with_cmd\n+    = add_com (\"with\", class_vars, with_command, _(\"\\\n Temporarily set SETTING to VALUE, run COMMAND, and restore SETTING.\\n\\\n Usage: with SETTING [VALUE] [-- COMMAND]\\n\\\n Usage: w SETTING [VALUE] [-- COMMAND]\\n\\\n@@ -2394,8 +2399,8 @@ E.g.:\\n\\\n You can change multiple settings using nested with, and use\\n\\\n abbreviations for commands and/or values.  E.g.:\\n\\\n   w la p -- w p el u -- p obj\"));\n-  set_cmd_completer_handle_brkchars (c, with_command_completer);\n-  add_com_alias (\"w\", \"with\", class_vars, 1);\n+  set_cmd_completer_handle_brkchars (with_cmd, with_command_completer);\n+  add_com_alias (\"w\", with_cmd, class_vars, 1);\n \n   add_internal_function (\"_gdb_setting_str\", _(\"\\\n $_gdb_setting_str - returns the value of a GDB setting as a string.\\n\\\n@@ -2455,12 +2460,13 @@ the previous command number shown.\"),\n \t\t       _(\"Generic command for showing gdb debugging flags.\"),\n \t\t       &showdebuglist, 0, &showlist);\n \n-  c = add_com (\"shell\", class_support, shell_command, _(\"\\\n+  cmd_list_element *shell_cmd\n+    = add_com (\"shell\", class_support, shell_command, _(\"\\\n Execute the rest of the line as a shell command.\\n\\\n With no arguments, run an inferior shell.\"));\n-  set_cmd_completer (c, filename_completer);\n+  set_cmd_completer (shell_cmd, filename_completer);\n \n-  add_com_alias (\"!\", \"shell\", class_support, 0);\n+  add_com_alias (\"!\", shell_cmd, class_support, 0);\n \n   c = add_com (\"edit\", class_files, edit_command, _(\"\\\n Edit specified file or function.\\n\\\n@@ -2474,7 +2480,8 @@ Uses EDITOR environment variable contents as editor (or ex as default).\"));\n \n   c->completer = location_completer;\n \n-  c = add_com (\"pipe\", class_support, pipe_command, _(\"\\\n+  cmd_list_element *pipe_cmd\n+    = add_com (\"pipe\", class_support, pipe_command, _(\"\\\n Send the output of a gdb command to a shell command.\\n\\\n Usage: | [COMMAND] | SHELL_COMMAND\\n\\\n Usage: | -d DELIM COMMAND DELIM SHELL_COMMAND\\n\\\n@@ -2489,10 +2496,11 @@ case COMMAND contains a | character.\\n\\\n \\n\\\n With no COMMAND, repeat the last executed command\\n\\\n and send its output to SHELL_COMMAND.\"));\n-  set_cmd_completer_handle_brkchars (c, pipe_command_completer);\n-  add_com_alias (\"|\", \"pipe\", class_support, 0);\n+  set_cmd_completer_handle_brkchars (pipe_cmd, pipe_command_completer);\n+  add_com_alias (\"|\", pipe_cmd, class_support, 0);\n \n-  add_com (\"list\", class_files, list_command, _(\"\\\n+  cmd_list_element *list_cmd\n+    = add_com (\"list\", class_files, list_command, _(\"\\\n List specified function or line.\\n\\\n With no argument, lists ten more lines after or around previous listing.\\n\\\n \\\"list -\\\" lists the ten lines before a previous ten-line listing.\\n\\\n@@ -2511,10 +2519,10 @@ By default, when a single location is given, display ten lines.\\n\\\n This can be changed using \\\"set listsize\\\", and the current value\\n\\\n can be shown using \\\"show listsize\\\".\"));\n \n-  add_com_alias (\"l\", \"list\", class_files, 1);\n+  add_com_alias (\"l\", list_cmd, class_files, 1);\n \n   if (dbx_commands)\n-    add_com_alias (\"file\", \"list\", class_files, 1);\n+    add_com_alias (\"file\", list_cmd, class_files, 1);\n \n   c = add_com (\"disassemble\", class_vars, disassemble_command, _(\"\\\n Disassemble a specified section of memory.\\n\\"
    },
    {
      "sha": "dd6499621886b2ced801c33683a5bc4d45bcead1",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -1007,11 +1007,11 @@ add_com (const char *name, enum command_class theclass,\n    different of class_alias, as class_alias is used to identify\n    user defined aliases.  */\n \n-struct cmd_list_element *\n-add_com_alias (const char *name, const char *target_name,\n+cmd_list_element *\n+add_com_alias (const char *name, cmd_list_element *target,\n \t       command_class theclass, int abbrev_flag)\n {\n-  return add_alias_cmd (name, target_name, theclass, abbrev_flag, &cmdlist);\n+  return add_alias_cmd (name, target, theclass, abbrev_flag, &cmdlist);\n }\n \n /* Add an element with a suppress notification to the list of commands.  */"
    },
    {
      "sha": "638de1efde91ae4c19a9d782f1836b08fefcd5b5",
      "filename": "gdb/command.h",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/command.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/command.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/command.h?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -359,8 +359,10 @@ extern struct cmd_list_element *add_com (const char *, enum command_class,\n \t\t\t\t\t cmd_const_cfunc_ftype *fun,\n \t\t\t\t\t const char *);\n \n-extern struct cmd_list_element *add_com_alias (const char *, const char *,\n-\t\t\t\t\t       enum command_class, int);\n+extern cmd_list_element *add_com_alias (const char *name,\n+\t\t\t\t\tcmd_list_element *target,\n+\t\t\t\t\tcommand_class theclass,\n+\t\t\t\t\tint abbrev_flag);\n \n extern struct cmd_list_element *add_com_suppress_notification\n \t\t       (const char *name, enum command_class theclass,"
    },
    {
      "sha": "8481d14576ec78dfe4de073fb74259e4d9df7e86",
      "filename": "gdb/compile/compile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/compile/compile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/compile/compile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -931,7 +931,7 @@ _initialize_compile ()\n \t\t\t\t\tcompile_command, _(\"\\\n Command to compile source code and inject it into the inferior.\"),\n \t\t  &compile_command_list, 1, &cmdlist);\n-  add_com_alias (\"expression\", \"compile\", class_obscure, 0);\n+  add_com_alias (\"expression\", compile_cmd_element, class_obscure, 0);\n \n   const auto compile_opts = make_compile_options_def_group (nullptr);\n "
    },
    {
      "sha": "76e856d71a810ee11953bc3dab4d751452bb81ab",
      "filename": "gdb/gcore.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/gcore.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/gcore.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gcore.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -604,10 +604,11 @@ void _initialize_gcore ();\n void\n _initialize_gcore ()\n {\n-  add_com (\"generate-core-file\", class_files, gcore_command, _(\"\\\n+  cmd_list_element *generate_core_file_cmd\n+    = add_com (\"generate-core-file\", class_files, gcore_command, _(\"\\\n Save a core file with the current state of the debugged process.\\n\\\n Usage: generate-core-file [FILENAME]\\n\\\n Argument is optional filename.  Default filename is 'core.PROCESS_ID'.\"));\n \n-  add_com_alias (\"gcore\", \"generate-core-file\", class_files, 1);\n+  add_com_alias (\"gcore\", generate_core_file_cmd, class_files, 1);\n }"
    },
    {
      "sha": "a707c89b84619432d9984429a5d0f9289f9c8873",
      "filename": "gdb/guile/guile.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/guile/guile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/guile/guile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/guile.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -726,8 +726,8 @@ cmd_list_element *guile_cmd_element = nullptr;\n static void\n install_gdb_commands (void)\n {\n-  add_com (\"guile-repl\", class_obscure,\n-\t   guile_repl_command,\n+  cmd_list_element *guile_repl_cmd\n+    = add_com (\"guile-repl\", class_obscure, guile_repl_command,\n #ifdef HAVE_GUILE\n \t   _(\"\\\n Start an interactive Guile prompt.\\n\\\n@@ -742,7 +742,7 @@ Guile scripting is not supported in this copy of GDB.\\n\\\n This command is only a placeholder.\")\n #endif /* HAVE_GUILE */\n \t   );\n-  add_com_alias (\"gr\", \"guile-repl\", class_obscure, 1);\n+  add_com_alias (\"gr\", guile_repl_cmd, class_obscure, 1);\n \n   /* Since \"help guile\" is easy to type, and intuitive, we add general help\n      in using GDB+Guile to this command.  */\n@@ -778,7 +778,7 @@ Guile scripting is not supported in this copy of GDB.\\n\\\n This command is only a placeholder.\")\n #endif /* HAVE_GUILE */\n \t   );\n-  add_com_alias (\"gu\", \"guile\", class_obscure, 1);\n+  add_com_alias (\"gu\", guile_cmd_element, class_obscure, 1);\n \n   add_basic_prefix_cmd (\"guile\", class_obscure,\n \t\t\t_(\"Prefix command for Guile preference settings.\"),"
    },
    {
      "sha": "07d69b481fabfff18547bd221ba4084affe464ef",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 31,
      "deletions": 22,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -3174,64 +3174,72 @@ In a multi-threaded program the signal is queued with, or discarded from,\\n\\\n the current thread only.\"));\n   set_cmd_completer (c, signal_completer);\n \n-  add_com (\"stepi\", class_run, stepi_command, _(\"\\\n+  cmd_list_element *stepi_cmd\n+    = add_com (\"stepi\", class_run, stepi_command, _(\"\\\n Step one instruction exactly.\\n\\\n Usage: stepi [N]\\n\\\n Argument N means step N times (or till program stops for another \\\n reason).\"));\n-  add_com_alias (\"si\", \"stepi\", class_run, 0);\n+  add_com_alias (\"si\", stepi_cmd, class_run, 0);\n \n-  add_com (\"nexti\", class_run, nexti_command, _(\"\\\n+  cmd_list_element *nexti_cmd\n+   = add_com (\"nexti\", class_run, nexti_command, _(\"\\\n Step one instruction, but proceed through subroutine calls.\\n\\\n Usage: nexti [N]\\n\\\n Argument N means step N times (or till program stops for another \\\n reason).\"));\n-  add_com_alias (\"ni\", \"nexti\", class_run, 0);\n+  add_com_alias (\"ni\", nexti_cmd, class_run, 0);\n \n-  add_com (\"finish\", class_run, finish_command, _(\"\\\n+  cmd_list_element *finish_cmd\n+    = add_com (\"finish\", class_run, finish_command, _(\"\\\n Execute until selected stack frame returns.\\n\\\n Usage: finish\\n\\\n Upon return, the value returned is printed and put in the value history.\"));\n-  add_com_alias (\"fin\", \"finish\", class_run, 1);\n+  add_com_alias (\"fin\", finish_cmd, class_run, 1);\n \n-  add_com (\"next\", class_run, next_command, _(\"\\\n+  cmd_list_element *next_cmd\n+    = add_com (\"next\", class_run, next_command, _(\"\\\n Step program, proceeding through subroutine calls.\\n\\\n Usage: next [N]\\n\\\n Unlike \\\"step\\\", if the current source line calls a subroutine,\\n\\\n this command does not enter the subroutine, but instead steps over\\n\\\n the call, in effect treating it as a single source line.\"));\n-  add_com_alias (\"n\", \"next\", class_run, 1);\n+  add_com_alias (\"n\", next_cmd, class_run, 1);\n \n-  add_com (\"step\", class_run, step_command, _(\"\\\n+  cmd_list_element *step_cmd\n+    = add_com (\"step\", class_run, step_command, _(\"\\\n Step program until it reaches a different source line.\\n\\\n Usage: step [N]\\n\\\n Argument N means step N times (or till program stops for another \\\n reason).\"));\n-  add_com_alias (\"s\", \"step\", class_run, 1);\n+  add_com_alias (\"s\", step_cmd, class_run, 1);\n \n-  c = add_com (\"until\", class_run, until_command, _(\"\\\n+  cmd_list_element *until_cmd\n+    = add_com (\"until\", class_run, until_command, _(\"\\\n Execute until past the current line or past a LOCATION.\\n\\\n Execute until the program reaches a source line greater than the current\\n\\\n or a specified location (same args as break command) within the current \\\n frame.\"));\n-  set_cmd_completer (c, location_completer);\n-  add_com_alias (\"u\", \"until\", class_run, 1);\n+  set_cmd_completer (until_cmd, location_completer);\n+  add_com_alias (\"u\", until_cmd, class_run, 1);\n \n   c = add_com (\"advance\", class_run, advance_command, _(\"\\\n Continue the program up to the given location (same form as args for break \\\n command).\\n\\\n Execution will also stop upon exit from the current stack frame.\"));\n   set_cmd_completer (c, location_completer);\n \n-  c = add_com (\"jump\", class_run, jump_command, _(\"\\\n+  cmd_list_element *jump_cmd\n+    = add_com (\"jump\", class_run, jump_command, _(\"\\\n Continue program being debugged at specified line or address.\\n\\\n Usage: jump LOCATION\\n\\\n Give as argument either LINENUM or *ADDR, where ADDR is an expression\\n\\\n for an address to start at.\"));\n-  set_cmd_completer (c, location_completer);\n-  add_com_alias (\"j\", \"jump\", class_run, 1);\n+  set_cmd_completer (jump_cmd, location_completer);\n+  add_com_alias (\"j\", jump_cmd, class_run, 1);\n \n-  add_com (\"continue\", class_run, continue_command, _(\"\\\n+  cmd_list_element *continue_cmd\n+    = add_com (\"continue\", class_run, continue_command, _(\"\\\n Continue program being debugged, after signal or breakpoint.\\n\\\n Usage: continue [N]\\n\\\n If proceeding from breakpoint, a number N may be used as an argument,\\n\\\n@@ -3242,14 +3250,15 @@ If non-stop mode is enabled, continue only the current thread,\\n\\\n otherwise all the threads in the program are continued.  To \\n\\\n continue all stopped threads in non-stop mode, use the -a option.\\n\\\n Specifying -a and an ignore count simultaneously is an error.\"));\n-  add_com_alias (\"c\", \"cont\", class_run, 1);\n-  add_com_alias (\"fg\", \"cont\", class_run, 1);\n+  add_com_alias (\"c\", continue_cmd, class_run, 1);\n+  add_com_alias (\"fg\", continue_cmd, class_run, 1);\n \n-  c = add_com (\"run\", class_run, run_command, _(\"\\\n+  cmd_list_element *run_cmd\n+    = add_com (\"run\", class_run, run_command, _(\"\\\n Start debugged program.\\n\"\n RUN_ARGS_HELP));\n-  set_cmd_completer (c, filename_completer);\n-  add_com_alias (\"r\", \"run\", class_run, 1);\n+  set_cmd_completer (run_cmd, filename_completer);\n+  add_com_alias (\"r\", run_cmd, class_run, 1);\n \n   c = add_com (\"start\", class_run, start_command, _(\"\\\n Start the debugged program stopping at the beginning of the main procedure.\\n\""
    },
    {
      "sha": "91a7f77d0eb0dae44911d53b42fcccb2eb7cf143",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -1133,14 +1133,15 @@ _initialize_maint_cmds ()\n {\n   struct cmd_list_element *cmd;\n \n-  add_basic_prefix_cmd (\"maintenance\", class_maintenance, _(\"\\\n+  cmd_list_element *maintenance_cmd\n+    = add_basic_prefix_cmd (\"maintenance\", class_maintenance, _(\"\\\n Commands for use by GDB maintainers.\\n\\\n Includes commands to dump specific internal GDB structures in\\n\\\n a human readable form, to cause GDB to deliberately dump core, etc.\"),\n-\t\t\t&maintenancelist, 0,\n-\t\t\t&cmdlist);\n+\t\t\t    &maintenancelist, 0,\n+\t\t\t    &cmdlist);\n \n-  add_com_alias (\"mt\", \"maintenance\", class_maintenance, 1);\n+  add_com_alias (\"mt\", maintenance_cmd, class_maintenance, 1);\n \n   add_basic_prefix_cmd (\"info\", class_maintenance, _(\"\\\n Commands for showing internal info about the program being debugged.\"),"
    },
    {
      "sha": "077ac772f79fc98895aafe18c7d522132656f449",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -1319,9 +1319,10 @@ _initialize_objc_language ()\n \t    _(\"All Objective-C selectors, or those matching REGEXP.\"));\n   add_info (\"classes\", info_classes_command,\n \t    _(\"All Objective-C classes, or those matching REGEXP.\"));\n-  add_com (\"print-object\", class_vars, print_object_command, \n-\t   _(\"Ask an Objective-C object to print itself.\"));\n-  add_com_alias (\"po\", \"print-object\", class_vars, 1);\n+  cmd_list_element *print_object_cmd\n+    = add_com (\"print-object\", class_vars, print_object_command,\n+\t       _(\"Ask an Objective-C object to print itself.\"));\n+  add_com_alias (\"po\", print_object_cmd, class_vars, 1);\n }\n \n static void "
    },
    {
      "sha": "8daa87cf978f086e941ba89b5894818790b6b2c9",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -3351,10 +3351,11 @@ EXP may be preceded with /FMT, where FMT is a format letter\\n\\\n but no count or size letter (see \\\"x\\\" command).\"),\n \t\t\t\t\t      print_opts);\n \n-  c = add_com (\"print\", class_vars, print_command, print_help.c_str ());\n-  set_cmd_completer_handle_brkchars (c, print_command_completer);\n-  add_com_alias (\"p\", \"print\", class_vars, 1);\n-  add_com_alias (\"inspect\", \"print\", class_vars, 1);\n+  cmd_list_element *print_cmd\n+    = add_com (\"print\", class_vars, print_command, print_help.c_str ());\n+  set_cmd_completer_handle_brkchars (print_cmd, print_command_completer);\n+  add_com_alias (\"p\", print_cmd, class_vars, 1);\n+  add_com_alias (\"inspect\", print_cmd, class_vars, 1);\n \n   add_setshow_uinteger_cmd (\"max-symbolic-offset\", no_class,\n \t\t\t    &max_symbolic_offset, _(\"\\"
    },
    {
      "sha": "e42cbc4fd5ee1bd6e85ff6badfcf93a2748e79ec",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -1886,8 +1886,9 @@ void _initialize_python ();\n void\n _initialize_python ()\n {\n-  add_com (\"python-interactive\", class_obscure,\n-\t   python_interactive_command,\n+  cmd_list_element *python_interactive_cmd\n+    =\tadd_com (\"python-interactive\", class_obscure,\n+\t\t python_interactive_command,\n #ifdef HAVE_PYTHON\n \t   _(\"\\\n Start an interactive Python prompt.\\n\\\n@@ -1909,7 +1910,7 @@ Python scripting is not supported in this copy of GDB.\\n\\\n This command is only a placeholder.\")\n #endif /* HAVE_PYTHON */\n \t   );\n-  add_com_alias (\"pi\", \"python-interactive\", class_obscure, 1);\n+  add_com_alias (\"pi\", python_interactive_cmd, class_obscure, 1);\n \n   python_cmd_element = add_com (\"python\", class_obscure, python_command,\n #ifdef HAVE_PYTHON\n@@ -1931,7 +1932,7 @@ Python scripting is not supported in this copy of GDB.\\n\\\n This command is only a placeholder.\")\n #endif /* HAVE_PYTHON */\n \t   );\n-  add_com_alias (\"py\", \"python\", class_obscure, 1);\n+  add_com_alias (\"py\", python_cmd_element, class_obscure, 1);\n \n   /* Add set/show python print-stack.  */\n   add_basic_prefix_cmd (\"python\", no_class,"
    },
    {
      "sha": "a09137b34feb395cd90ed5964fbd16a1c1fe76f5",
      "filename": "gdb/record.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/record.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/record.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -785,12 +785,13 @@ A size of \\\"unlimited\\\" means unlimited lines.  The default is 10.\"),\n \t\t\t    set_record_call_history_size, NULL,\n \t\t\t    &set_record_cmdlist, &show_record_cmdlist);\n \n-  c = add_prefix_cmd (\"record\", class_obscure, cmd_record_start,\n+  cmd_list_element *record_cmd\n+    = add_prefix_cmd (\"record\", class_obscure, cmd_record_start,\n \t\t      _(\"Start recording.\"),\n \t\t      &record_cmdlist, 0, &cmdlist);\n-  set_cmd_completer (c, filename_completer);\n+  set_cmd_completer (record_cmd, filename_completer);\n \n-  add_com_alias (\"rec\", \"record\", class_obscure, 1);\n+  add_com_alias (\"rec\", record_cmd, class_obscure, 1);\n   add_basic_prefix_cmd (\"record\", class_support,\n \t\t\t_(\"Set record options.\"), &set_record_cmdlist,\n \t\t\t0, &setlist);"
    },
    {
      "sha": "2d50f3efc85a105bf7274ea2e9e0ff6e1bf84320",
      "filename": "gdb/regcache.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/regcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/regcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/regcache.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -2092,10 +2092,11 @@ _initialize_regcache ()\n   gdb::observers::thread_ptid_changed.attach (regcache_thread_ptid_changed,\n \t\t\t\t\t      \"regcache\");\n \n-  add_cmd (\"register-cache\", class_maintenance, reg_flush_command,\n-\t   _(\"Force gdb to flush its register and frame cache.\"),\n-\t   &maintenanceflushlist);\n-  c = add_com_alias (\"flushregs\", \"maintenance flush register-cache\",\n+  cmd_list_element *maintenance_flush_register_cache_cmd\n+    = add_cmd (\"register-cache\", class_maintenance, reg_flush_command,\n+\t       _(\"Force gdb to flush its register and frame cache.\"),\n+\t       &maintenanceflushlist);\n+  c = add_com_alias (\"flushregs\", maintenance_flush_register_cache_cmd,\n \t\t     class_maintenance, 0);\n   deprecate_cmd (c, \"maintenance flush register-cache\");\n "
    },
    {
      "sha": "feca1b647309739b56698f434365f31471e7a8f2",
      "filename": "gdb/reverse.c",
      "status": "modified",
      "additions": 19,
      "deletions": 18,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/reverse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/reverse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/reverse.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -326,38 +326,39 @@ void _initialize_reverse ();\n void\n _initialize_reverse ()\n {\n-  add_com (\"reverse-step\", class_run, reverse_step, _(\"\\\n+  cmd_list_element *reverse_step_cmd\n+   = add_com (\"reverse-step\", class_run, reverse_step, _(\"\\\n Step program backward until it reaches the beginning of another source line.\\n\\\n-Argument N means do this N times (or till program stops for another reason).\")\n-\t   );\n-  add_com_alias (\"rs\", \"reverse-step\", class_run, 1);\n+Argument N means do this N times (or till program stops for another reason).\"));\n+  add_com_alias (\"rs\", reverse_step_cmd, class_run, 1);\n \n-  add_com (\"reverse-next\", class_run, reverse_next, _(\"\\\n+  cmd_list_element *reverse_next_cmd\n+    = add_com (\"reverse-next\", class_run, reverse_next, _(\"\\\n Step program backward, proceeding through subroutine calls.\\n\\\n Like the \\\"reverse-step\\\" command as long as subroutine calls do not happen;\\n\\\n when they do, the call is treated as one instruction.\\n\\\n-Argument N means do this N times (or till program stops for another reason).\")\n-\t   );\n-  add_com_alias (\"rn\", \"reverse-next\", class_run, 1);\n+Argument N means do this N times (or till program stops for another reason).\"));\n+  add_com_alias (\"rn\", reverse_next_cmd, class_run, 1);\n \n-  add_com (\"reverse-stepi\", class_run, reverse_stepi, _(\"\\\n+  cmd_list_element *reverse_stepi_cmd\n+    = add_com (\"reverse-stepi\", class_run, reverse_stepi, _(\"\\\n Step backward exactly one instruction.\\n\\\n-Argument N means do this N times (or till program stops for another reason).\")\n-\t   );\n-  add_com_alias (\"rsi\", \"reverse-stepi\", class_run, 0);\n+Argument N means do this N times (or till program stops for another reason).\"));\n+  add_com_alias (\"rsi\", reverse_stepi_cmd, class_run, 0);\n \n-  add_com (\"reverse-nexti\", class_run, reverse_nexti, _(\"\\\n+  cmd_list_element *reverse_nexti_cmd\n+    = add_com (\"reverse-nexti\", class_run, reverse_nexti, _(\"\\\n Step backward one instruction, but proceed through called subroutines.\\n\\\n-Argument N means do this N times (or till program stops for another reason).\")\n-\t   );\n-  add_com_alias (\"rni\", \"reverse-nexti\", class_run, 0);\n+Argument N means do this N times (or till program stops for another reason).\"));\n+  add_com_alias (\"rni\", reverse_nexti_cmd, class_run, 0);\n \n-  add_com (\"reverse-continue\", class_run, reverse_continue, _(\"\\\n+  cmd_list_element *reverse_continue_cmd\n+    = add_com (\"reverse-continue\", class_run, reverse_continue, _(\"\\\n Continue program being debugged but run it in reverse.\\n\\\n If proceeding from breakpoint, a number N may be used as an argument,\\n\\\n which means to set the ignore count of that breakpoint to N - 1 (so that\\n\\\n the breakpoint won't break until the Nth time it is reached).\"));\n-  add_com_alias (\"rc\", \"reverse-continue\", class_run, 0);\n+  add_com_alias (\"rc\", reverse_continue_cmd, class_run, 0);\n \n   add_com (\"reverse-finish\", class_run, reverse_finish, _(\"\\\n Execute backward until just before selected stack frame is called.\"));"
    },
    {
      "sha": "94e61cc79a60e560908dcb4ba3d8a401d1b86cb8",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 11,
      "deletions": 10,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -1904,8 +1904,6 @@ void _initialize_source ();\n void\n _initialize_source ()\n {\n-  struct cmd_list_element *c;\n-\n   init_source_path ();\n \n   /* The intention is to use POSIX Basic Regular Expressions.\n@@ -1914,7 +1912,8 @@ _initialize_source ()\n      just an approximation.  */\n   re_set_syntax (RE_SYNTAX_GREP);\n \n-  c = add_cmd (\"directory\", class_files, directory_command, _(\"\\\n+  cmd_list_element *directory_cmd\n+    = add_cmd (\"directory\", class_files, directory_command, _(\"\\\n Add directory DIR to beginning of search path for source files.\\n\\\n Forget cached info on source file locations and line positions.\\n\\\n DIR can also be $cwd for the current working directory, or $cdir for the\\n\\\n@@ -1923,9 +1922,9 @@ With no argument, reset the search path to $cdir:$cwd, the default.\"),\n \t       &cmdlist);\n \n   if (dbx_commands)\n-    add_com_alias (\"use\", \"directory\", class_files, 0);\n+    add_com_alias (\"use\", directory_cmd, class_files, 0);\n \n-  set_cmd_completer (c, filename_completer);\n+  set_cmd_completer (directory_cmd, filename_completer);\n \n   add_setshow_optional_filename_cmd (\"directories\",\n \t\t\t\t     class_files,\n@@ -1959,16 +1958,18 @@ This sets the default address for \\\"x\\\" to the line's first instruction\\n\\\n so that \\\"x/i\\\" suffices to start examining the machine code.\\n\\\n The address is also stored as the value of \\\"$_\\\".\"));\n \n-  add_com (\"forward-search\", class_files, forward_search_command, _(\"\\\n+  cmd_list_element *forward_search_cmd\n+    = add_com (\"forward-search\", class_files, forward_search_command, _(\"\\\n Search for regular expression (see regex(3)) from last line listed.\\n\\\n The matching line number is also stored as the value of \\\"$_\\\".\"));\n-  add_com_alias (\"search\", \"forward-search\", class_files, 0);\n-  add_com_alias (\"fo\", \"forward-search\", class_files, 1);\n+  add_com_alias (\"search\", forward_search_cmd, class_files, 0);\n+  add_com_alias (\"fo\", forward_search_cmd, class_files, 1);\n \n-  add_com (\"reverse-search\", class_files, reverse_search_command, _(\"\\\n+  cmd_list_element *reverse_search_cmd\n+    = add_com (\"reverse-search\", class_files, reverse_search_command, _(\"\\\n Search backward for regular expression (see regex(3)) from last line listed.\\n\\\n The matching line number is also stored as the value of \\\"$_\\\".\"));\n-  add_com_alias (\"rev\", \"reverse-search\", class_files, 1);\n+  add_com_alias (\"rev\", reverse_search_cmd, class_files, 1);\n \n   add_setshow_integer_cmd (\"listsize\", class_support, &lines_to_list, _(\"\\\n Set number of source lines gdb will list by default.\"), _(\"\\"
    },
    {
      "sha": "a3a6ba6c41966ccd82da1a15b101a188cd22cbe9",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 15,
      "deletions": 13,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -3329,22 +3329,24 @@ An argument says how many frames up to go.\"));\n Same as the `up' command, but does not print anything.\\n\\\n This is useful in command scripts.\"));\n \n-  add_com (\"down\", class_stack, down_command, _(\"\\\n+  cmd_list_element *down_cmd\n+    = add_com (\"down\", class_stack, down_command, _(\"\\\n Select and print stack frame called by this one.\\n\\\n An argument says how many frames down to go.\"));\n-  add_com_alias (\"do\", \"down\", class_stack, 1);\n-  add_com_alias (\"dow\", \"down\", class_stack, 1);\n+  add_com_alias (\"do\", down_cmd, class_stack, 1);\n+  add_com_alias (\"dow\", down_cmd, class_stack, 1);\n   add_com (\"down-silently\", class_support, down_silently_command, _(\"\\\n Same as the `down' command, but does not print anything.\\n\\\n This is useful in command scripts.\"));\n \n-  add_prefix_cmd (\"frame\", class_stack,\n-\t\t  &frame_cmd.base_command, _(\"\\\n+  cmd_list_element *frame_cmd_el\n+    = add_prefix_cmd (\"frame\", class_stack,\n+\t\t      &frame_cmd.base_command, _(\"\\\n Select and print a stack frame.\\n\\\n With no argument, print the selected stack frame.  (See also \\\"info frame\\\").\\n\\\n A single numerical argument specifies the frame to select.\"),\n-\t\t  &frame_cmd_list, 1, &cmdlist);\n-  add_com_alias (\"f\", \"frame\", class_stack, 1);\n+\t\t      &frame_cmd_list, 1, &cmdlist);\n+  add_com_alias (\"f\", frame_cmd_el, class_stack, 1);\n \n #define FRAME_APPLY_OPTION_HELP \"\\\n Prints the frame location information followed by COMMAND output.\\n\\\n@@ -3498,14 +3500,14 @@ For backward compatibility, the following qualifiers are supported:\\n\\\n With a negative COUNT, print outermost -COUNT frames.\"),\n \t\t\t       backtrace_opts);\n \n-  cmd_list_element *c = add_com (\"backtrace\", class_stack,\n-\t\t\t\t backtrace_command,\n-\t\t\t\t backtrace_help.c_str ());\n-  set_cmd_completer_handle_brkchars (c, backtrace_command_completer);\n+  cmd_list_element *backtrace_cmd\n+    = add_com (\"backtrace\", class_stack, backtrace_command,\n+\t       backtrace_help.c_str ());\n+  set_cmd_completer_handle_brkchars (backtrace_cmd, backtrace_command_completer);\n \n-  add_com_alias (\"bt\", \"backtrace\", class_stack, 0);\n+  add_com_alias (\"bt\", backtrace_cmd, class_stack, 0);\n \n-  add_com_alias (\"where\", \"backtrace\", class_stack, 0);\n+  add_com_alias (\"where\", backtrace_cmd, class_stack, 0);\n   add_info (\"stack\", backtrace_command,\n \t    _(\"Backtrace of the stack, or innermost COUNT frames.\"));\n   add_info_alias (\"s\", \"stack\", 1);"
    },
    {
      "sha": "b2034c6e0c3605a6a598980e980a3fccebeb4c90",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -3863,12 +3863,13 @@ When OFFSET is provided, FILE must also be provided.  FILE can be provided\\n\\\n on its own.\"), &cmdlist);\n   set_cmd_completer (c, filename_completer);\n \n-  add_basic_prefix_cmd (\"overlay\", class_support,\n-\t\t\t_(\"Commands for debugging overlays.\"), &overlaylist,\n-\t\t\t0, &cmdlist);\n+  cmd_list_element *overlay_cmd\n+    = add_basic_prefix_cmd (\"overlay\", class_support,\n+\t\t\t    _(\"Commands for debugging overlays.\"), &overlaylist,\n+\t\t\t    0, &cmdlist);\n \n-  add_com_alias (\"ovly\", \"overlay\", class_support, 1);\n-  add_com_alias (\"ov\", \"overlay\", class_support, 1);\n+  add_com_alias (\"ovly\", overlay_cmd, class_support, 1);\n+  add_com_alias (\"ov\", overlay_cmd, class_support, 1);\n \n   add_cmd (\"map-overlay\", class_support, map_overlay_command,\n \t   _(\"Assert that an overlay section is mapped.\"), &overlaylist);"
    },
    {
      "sha": "f850f05ad48e45079d7e93e4f4f309959914cfaa",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -2133,10 +2133,13 @@ Options:\\n\\\n   c = add_info (\"threads\", info_threads_command, info_threads_help.c_str ());\n   set_cmd_completer_handle_brkchars (c, info_threads_command_completer);\n \n-  add_prefix_cmd (\"thread\", class_run, thread_command, _(\"\\\n+  cmd_list_element *thread_cmd\n+    = add_prefix_cmd (\"thread\", class_run, thread_command, _(\"\\\n Use this command to switch between threads.\\n\\\n The new thread ID must be currently known.\"),\n-\t\t  &thread_cmd_list, 1, &cmdlist);\n+\t\t      &thread_cmd_list, 1, &cmdlist);\n+\n+  add_com_alias (\"t\", thread_cmd, class_run, 1);\n \n #define THREAD_APPLY_OPTION_HELP \"\\\n Prints per-inferior thread number and target system's thread id\\n\\\n@@ -2203,8 +2206,6 @@ Usage: thread find REGEXP\\n\\\n Will display thread ids whose name, target ID, or extra info matches REGEXP.\"),\n \t   &thread_cmd_list);\n \n-  add_com_alias (\"t\", \"thread\", class_run, 1);\n-\n   add_setshow_boolean_cmd (\"thread-events\", no_class,\n \t\t\t   &print_thread_events, _(\"\\\n Set printing of thread events (such as thread start and exit).\"), _(\"\\"
    },
    {
      "sha": "abbd507c8b22f51bc1d2b2c6fdb7e3c2f0e39e53",
      "filename": "gdb/tracepoint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -4116,8 +4116,8 @@ one or more \\\"collect\\\" commands, to specify what to collect\\n\\\n while single-stepping.\\n\\n\\\n Note: this command can only be used in a tracepoint \\\"actions\\\" list.\"));\n \n-  add_com_alias (\"ws\", \"while-stepping\", class_trace, 0);\n-  add_com_alias (\"stepping\", \"while-stepping\", class_trace, 0);\n+  add_com_alias (\"ws\", while_stepping_cmd_element, class_trace, 0);\n+  add_com_alias (\"stepping\", while_stepping_cmd_element, class_trace, 0);\n \n   add_com (\"collect\", class_trace, collect_pseudocommand, _(\"\\\n Specify one or more data items to be collected at a tracepoint.\\n\\"
    },
    {
      "sha": "4e75a66a00e92cdab4db4acacb5603d12df09d27",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 11,
      "deletions": 9,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3947f654eabb1b6ccf8aad11ece46dc4b027f0f0/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=3947f654eabb1b6ccf8aad11ece46dc4b027f0f0",
      "patch": "@@ -990,7 +990,6 @@ _initialize_tui_win ()\n {\n   static struct cmd_list_element *tui_setlist;\n   static struct cmd_list_element *tui_showlist;\n-  struct cmd_list_element *cmd;\n \n   /* Define the classes of commands.\n      They will appear in the help list in the reverse of this order.  */\n@@ -1004,26 +1003,29 @@ _initialize_tui_win ()\n   add_com (\"refresh\", class_tui, tui_refresh_all_command,\n \t   _(\"Refresh the terminal display.\"));\n \n-  cmd = add_com (\"tabset\", class_tui, tui_set_tab_width_command, _(\"\\\n+  cmd_list_element *tabset_cmd\n+    = add_com (\"tabset\", class_tui, tui_set_tab_width_command, _(\"\\\n Set the width (in characters) of tab stops.\\n\\\n Usage: tabset N\"));\n-  deprecate_cmd (cmd, \"set tui tab-width\");\n+  deprecate_cmd (tabset_cmd, \"set tui tab-width\");\n \n-  cmd = add_com (\"winheight\", class_tui, tui_set_win_height_command, _(\"\\\n+  cmd_list_element *winheight_cmd\n+    = add_com (\"winheight\", class_tui, tui_set_win_height_command, _(\"\\\n Set or modify the height of a specified window.\\n\\\n Usage: winheight WINDOW-NAME [+ | -] NUM-LINES\\n\\\n Use \\\"info win\\\" to see the names of the windows currently being displayed.\"));\n-  add_com_alias (\"wh\", \"winheight\", class_tui, 0);\n-  set_cmd_completer (cmd, winheight_completer);\n+  add_com_alias (\"wh\", winheight_cmd, class_tui, 0);\n+  set_cmd_completer (winheight_cmd, winheight_completer);\n   add_info (\"win\", tui_all_windows_info,\n \t    _(\"List of all displayed windows.\\n\\\n Usage: info win\"));\n-  cmd = add_com (\"focus\", class_tui, tui_set_focus_command, _(\"\\\n+  cmd_list_element *focus_cmd\n+    = add_com (\"focus\", class_tui, tui_set_focus_command, _(\"\\\n Set focus to named window or next/prev window.\\n\\\n Usage: focus [WINDOW-NAME | next | prev]\\n\\\n Use \\\"info win\\\" to see the names of the windows currently being displayed.\"));\n-  add_com_alias (\"fs\", \"focus\", class_tui, 0);\n-  set_cmd_completer (cmd, focus_completer);\n+  add_com_alias (\"fs\", focus_cmd, class_tui, 0);\n+  set_cmd_completer (focus_cmd, focus_completer);\n   add_com (\"+\", class_tui, tui_scroll_forward_command, _(\"\\\n Scroll window forward.\\n\\\n Usage: + [N] [WIN]\\n\\"
    }
  ]
}