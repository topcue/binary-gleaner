{
  "sha": "aa3c112fab5db4a90703442f65b743857e50d2ac",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWEzYzExMmZhYjVkYjRhOTA3MDM0NDJmNjViNzQzODU3ZTUwZDJhYw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-05-11T00:10:42Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-05-11T11:38:37Z"
    },
    "message": "Power10 Reduced precision outer product operations\n\ninclude/\n\t* opcode/ppc.h (PPC_OPERAND_ACC): Define.  Renumber following\n\tPPC_OPERAND defines.\nopcodes/\n\t* ppc-opc.c (insert_xa6a, extract_xa6a, insert_xb6a, extract_xb6a):\n\tNew functions.\n\t(powerpc_operands): Define ACC, PMSK8, PMSK4, PMSK2, XMSK, YMSK,\n\tYMSK2, XA6a, XA6ap, XB6a entries.\n\t(PMMIRR, P_X_MASK, P_XX1_MASK, P_GER_MASK): Define\n\t(P_GER2_MASK, P_GER4_MASK, P_GER8_MASK, P_GER64_MASK): Define.\n\t(PPCVSX4): Define.\n\t(powerpc_opcodes): Add xxmfacc, xxmtacc, xxsetaccz,\n\txvi8ger4pp, xvi8ger4, xvf16ger2pp, xvf16ger2, xvf32gerpp, xvf32ger,\n\txvi4ger8pp, xvi4ger8, xvi16ger2spp, xvi16ger2s, xvbf16ger2pp,\n\txvbf16ger2, xvf64gerpp, xvf64ger, xvi16ger2, xvf16ger2np,\n\txvf32gernp, xvi8ger4spp, xvi16ger2pp, xvbf16ger2np, xvf64gernp,\n\txvf16ger2pn, xvf32gerpn, xvbf16ger2pn, xvf64gerpn, xvf16ger2nn,\n\txvf32gernn, xvbf16ger2nn, xvf64gernn, xvcvbf16sp, xvcvspbf16.\n\t(prefix_opcodes): Add pmxvi8ger4pp, pmxvi8ger4, pmxvf16ger2pp,\n\tpmxvf16ger2, pmxvf32gerpp, pmxvf32ger, pmxvi4ger8pp, pmxvi4ger8,\n\tpmxvi16ger2spp, pmxvi16ger2s, pmxvbf16ger2pp, pmxvbf16ger2,\n\tpmxvf64gerpp, pmxvf64ger, pmxvi16ger2, pmxvf16ger2np, pmxvf32gernp,\n\tpmxvi8ger4spp, pmxvi16ger2pp, pmxvbf16ger2np, pmxvf64gernp,\n\tpmxvf16ger2pn, pmxvf32gerpn, pmxvbf16ger2pn, pmxvf64gerpn,\n\tpmxvf16ger2nn, pmxvf32gernn, pmxvbf16ger2nn, pmxvf64gernn.\ngas/\n\t* config/tc-ppc.c (pre_defined_registers): Add accumulators.\n\t(md_assemble): Check acc specified in correct operand.\n\t* testsuite/gas/ppc/outerprod.d,\n\t* testsuite/gas/ppc/outerprod.s,\n\t* testsuite/gas/ppc/vsx4.d,\n\t* testsuite/gas/ppc/vsx4.s: New tests.\n\t* testsuite/gas/ppc/ppc.exp: Run them.",
    "tree": {
      "sha": "25c6c8d45ee9365ebe6865536d56d8680bf93c90",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/25c6c8d45ee9365ebe6865536d56d8680bf93c90"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/aa3c112fab5db4a90703442f65b743857e50d2ac",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa3c112fab5db4a90703442f65b743857e50d2ac",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/aa3c112fab5db4a90703442f65b743857e50d2ac",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa3c112fab5db4a90703442f65b743857e50d2ac/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6edbfd3beb15105dfe5c59ee3b22e3daefaea509",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6edbfd3beb15105dfe5c59ee3b22e3daefaea509",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6edbfd3beb15105dfe5c59ee3b22e3daefaea509"
    }
  ],
  "stats": {
    "total": 477,
    "additions": 459,
    "deletions": 18
  },
  "files": [
    {
      "sha": "0fe429a17ab1f7776e9661850e201f188cd4040d",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3c112fab5db4a90703442f65b743857e50d2ac/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3c112fab5db4a90703442f65b743857e50d2ac/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=aa3c112fab5db4a90703442f65b743857e50d2ac",
      "patch": "@@ -1,3 +1,14 @@\n+2020-05-11  Alan Modra  <amodra@gmail.com>\n+\t    Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* config/tc-ppc.c (pre_defined_registers): Add accumulators.\n+\t(md_assemble): Check acc specified in correct operand.\n+\t* testsuite/gas/ppc/outerprod.d,\n+\t* testsuite/gas/ppc/outerprod.s,\n+\t* testsuite/gas/ppc/vsx4.d,\n+\t* testsuite/gas/ppc/vsx4.s: New tests.\n+\t* testsuite/gas/ppc/ppc.exp: Run them.\n+\n 2020-05-11  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/gas/ppc/simd_perm.d,"
    },
    {
      "sha": "4a07f0bd751e86363fc41907073f82678edf5428",
      "filename": "gas/config/tc-ppc.c",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3c112fab5db4a90703442f65b743857e50d2ac/gas/config/tc-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3c112fab5db4a90703442f65b743857e50d2ac/gas/config/tc-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.c?ref=aa3c112fab5db4a90703442f65b743857e50d2ac",
      "patch": "@@ -346,6 +346,16 @@ struct pd_reg\n \n static const struct pd_reg pre_defined_registers[] =\n {\n+  /* VSX accumulators.  */\n+  { \"a0\", 0, PPC_OPERAND_ACC },\n+  { \"a1\", 1, PPC_OPERAND_ACC },\n+  { \"a2\", 2, PPC_OPERAND_ACC },\n+  { \"a3\", 3, PPC_OPERAND_ACC },\n+  { \"a4\", 4, PPC_OPERAND_ACC },\n+  { \"a5\", 5, PPC_OPERAND_ACC },\n+  { \"a6\", 6, PPC_OPERAND_ACC },\n+  { \"a7\", 7, PPC_OPERAND_ACC },\n+\n   /* Condition Registers */\n   { \"cr.0\", 0, PPC_OPERAND_CR_REG },\n   { \"cr.1\", 1, PPC_OPERAND_CR_REG },\n@@ -3569,7 +3579,7 @@ md_assemble (char *str)\n \t       & ~operand->flags\n \t       & (PPC_OPERAND_GPR | PPC_OPERAND_FPR | PPC_OPERAND_VR\n \t\t  | PPC_OPERAND_VSR | PPC_OPERAND_CR_BIT | PPC_OPERAND_CR_REG\n-\t\t  | PPC_OPERAND_SPR | PPC_OPERAND_GQR)) != 0\n+\t\t  | PPC_OPERAND_SPR | PPC_OPERAND_GQR | PPC_OPERAND_ACC)) != 0\n \t      && !((ex.X_md & PPC_OPERAND_GPR) != 0\n \t\t   && ex.X_add_number != 0\n \t\t   && (operand->flags & PPC_OPERAND_GPR_0) != 0))"
    },
    {
      "sha": "613fb189966a18467a6642726e79094158fad176",
      "filename": "gas/testsuite/gas/ppc/outerprod.d",
      "status": "added",
      "additions": 104,
      "deletions": 0,
      "changes": 104,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3c112fab5db4a90703442f65b743857e50d2ac/gas/testsuite/gas/ppc/outerprod.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3c112fab5db4a90703442f65b743857e50d2ac/gas/testsuite/gas/ppc/outerprod.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/outerprod.d?ref=aa3c112fab5db4a90703442f65b743857e50d2ac",
      "patch": "@@ -0,0 +1,104 @@\n+#as: -mpower10\n+#objdump: -dr -Mpower10\n+#name: outer product reduced precision\n+\n+.*\n+\n+\n+Disassembly of section \\.text:\n+\n+0+0 <_start>:\n+.*:\t(7e 80 01 62|62 01 80 7e) \txxmfacc a5\n+.*:\t(7f 01 01 62|62 01 01 7f) \txxmtacc a6\n+.*:\t(7f 83 01 62|62 01 83 7f) \txxsetaccz a7\n+.*:\t(ec 1f f1 1e|1e f1 1f ec) \txvi4ger8 a0,vs63,vs62\n+.*:\t(ec 9d e1 16|16 e1 9d ec) \txvi4ger8pp a1,vs61,vs60\n+.*:\t(07 90 ff fe|fe ff 90 07) \tpmxvi4ger8 a2,vs59,vs58,15,14,255\n+.*:\t(ed 1b d1 1e|1e d1 1b ed) \n+.*:\t(07 90 80 78|78 80 90 07) \tpmxvi4ger8pp a3,vs57,vs56,7,8,128\n+.*:\t(ed 99 c1 16|16 c1 99 ed) \n+.*:\t(ee 17 b0 1e|1e b0 17 ee) \txvi8ger4 a4,vs55,vs54\n+.*:\t(ee 95 a0 16|16 a0 95 ee) \txvi8ger4pp a5,vs53,vs52\n+.*:\t(07 90 b0 dc|dc b0 90 07) \tpmxvi8ger4 a6,vs51,vs50,13,12,11\n+.*:\t(ef 13 90 1e|1e 90 13 ef) \n+.*:\t(07 90 80 a9|a9 80 90 07) \tpmxvi8ger4pp a7,vs49,vs48,10,9,8\n+.*:\t(ef 91 80 16|16 80 91 ef) \n+.*:\t(ec 0f 71 5e|5e 71 0f ec) \txvi16ger2s a0,vs47,vs46\n+.*:\t(ec 8d 61 56|56 61 8d ec) \txvi16ger2spp a1,vs45,vs44\n+.*:\t(07 90 c0 76|76 c0 90 07) \tpmxvi16ger2s a2,vs43,vs42,7,6,3\n+.*:\t(ed 0b 51 5e|5e 51 0b ed) \n+.*:\t(07 90 80 54|54 80 90 07) \tpmxvi16ger2spp a3,vs41,vs40,5,4,2\n+.*:\t(ed 89 41 56|56 41 89 ed) \n+.*:\t(ee 07 30 9e|9e 30 07 ee) \txvf16ger2 a4,vs39,vs38\n+.*:\t(ee 85 20 96|96 20 85 ee) \txvf16ger2pp a5,vs37,vs36\n+.*:\t(ef 03 14 96|96 14 03 ef) \txvf16ger2pn a6,vs35,vs34\n+.*:\t(ef 81 02 96|96 02 81 ef) \txvf16ger2np a7,vs33,vs32\n+.*:\t(ec 04 2e 90|90 2e 04 ec) \txvf16ger2nn a0,vs4,vs5\n+.*:\t(07 90 40 32|32 40 90 07) \tpmxvf16ger2 a1,vs2,vs3,3,2,1\n+.*:\t(ec 82 18 98|98 18 82 ec) \n+.*:\t(07 90 00 10|10 00 90 07) \tpmxvf16ger2pp a2,vs4,vs5,1,0,0\n+.*:\t(ed 04 28 90|90 28 04 ed) \n+.*:\t(07 90 c0 fe|fe c0 90 07) \tpmxvf16ger2pn a3,vs6,vs7,15,14,3\n+.*:\t(ed 86 3c 90|90 3c 86 ed) \n+.*:\t(07 90 80 dc|dc 80 90 07) \tpmxvf16ger2np a4,vs8,vs9,13,12,2\n+.*:\t(ee 08 4a 90|90 4a 08 ee) \n+.*:\t(07 90 40 ba|ba 40 90 07) \tpmxvf16ger2nn a5,vs10,vs11,11,10,1\n+.*:\t(ee 8a 5e 90|90 5e 8a ee) \n+.*:\t(ef 0c 68 d8|d8 68 0c ef) \txvf32ger a6,vs12,vs13\n+.*:\t(ef 8e 78 d0|d0 78 8e ef) \txvf32gerpp a7,vs14,vs15\n+.*:\t(ec 10 8c d0|d0 8c 10 ec) \txvf32gerpn a0,vs16,vs17\n+.*:\t(ec 92 9a d0|d0 9a 92 ec) \txvf32gernp a1,vs18,vs19\n+.*:\t(ed 14 ae d0|d0 ae 14 ed) \txvf32gernn a2,vs20,vs21\n+.*:\t(07 90 00 98|98 00 90 07) \tpmxvf32ger a3,vs22,vs23,9,8\n+.*:\t(ed 96 b8 d8|d8 b8 96 ed) \n+.*:\t(07 90 00 76|76 00 90 07) \tpmxvf32gerpp a4,vs24,vs25,7,6\n+.*:\t(ee 18 c8 d0|d0 c8 18 ee) \n+.*:\t(07 90 00 54|54 00 90 07) \tpmxvf32gerpn a5,vs26,vs27,5,4\n+.*:\t(ee 9a dc d0|d0 dc 9a ee) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(07 90 00 32|32 00 90 07) \tpmxvf32gernp a6,vs28,vs29,3,2\n+.*:\t(ef 1c ea d0|d0 ea 1c ef) \n+.*:\t(07 90 00 10|10 00 90 07) \tpmxvf32gernn a7,vs0,vs1,1,0\n+.*:\t(ef 80 0e d0|d0 0e 80 ef) \n+.*:\t(ec 04 29 d8|d8 29 04 ec) \txvf64ger a0,vs4,vs5\n+.*:\t(ec 88 49 d0|d0 49 88 ec) \txvf64gerpp a1,vs8,vs9\n+.*:\t(ed 02 15 d0|d0 15 02 ed) \txvf64gerpn a2,vs2,vs2\n+.*:\t(ed 84 1b d0|d0 1b 84 ed) \txvf64gernp a3,vs4,vs3\n+.*:\t(ee 04 27 d0|d0 27 04 ee) \txvf64gernn a4,vs4,vs4\n+.*:\t(07 90 00 f0|f0 00 90 07) \tpmxvf64ger a5,vs6,vs5,15,0\n+.*:\t(ee 86 29 d8|d8 29 86 ee) \n+.*:\t(07 90 00 e4|e4 00 90 07) \tpmxvf64gerpp a6,vs6,vs6,14,1\n+.*:\t(ef 06 31 d0|d0 31 06 ef) \n+.*:\t(07 90 00 d8|d8 00 90 07) \tpmxvf64gerpn a7,vs8,vs7,13,2\n+.*:\t(ef 88 3d d0|d0 3d 88 ef) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(07 90 00 cc|cc 00 90 07) \tpmxvf64gernp a0,vs4,vs5,12,3\n+.*:\t(ec 04 2b d0|d0 2b 04 ec) \n+.*:\t(07 90 00 a0|a0 00 90 07) \tpmxvf64gernn a1,vs2,vs1,10,0\n+.*:\t(ec 82 0f d0|d0 0f 82 ec) \n+.*:\t(ed 03 21 90|90 21 03 ed) \txvbf16ger2pp a2,vs3,vs4\n+.*:\t(ed 84 29 98|98 29 84 ed) \txvbf16ger2 a3,vs4,vs5\n+.*:\t(ee 05 33 90|90 33 05 ee) \txvbf16ger2np a4,vs5,vs6\n+.*:\t(ee 86 3d 90|90 3d 86 ee) \txvbf16ger2pn a5,vs6,vs7\n+.*:\t(ef 07 47 90|90 47 07 ef) \txvbf16ger2nn a6,vs7,vs8\n+.*:\t(07 90 c0 ff|ff c0 90 07) \tpmxvbf16ger2pp a7,vs8,vs9,15,15,3\n+.*:\t(ef 88 49 90|90 49 88 ef) \n+.*:\t(07 90 80 cc|cc 80 90 07) \tpmxvbf16ger2 a0,vs9,vs10,12,12,2\n+.*:\t(ec 09 51 98|98 51 09 ec) \n+.*:\t(07 90 40 aa|aa 40 90 07) \tpmxvbf16ger2np a1,vs10,vs11,10,10,1\n+.*:\t(ec 8a 5b 90|90 5b 8a ec) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(07 90 00 dd|dd 00 90 07) \tpmxvbf16ger2pn a2,vs12,vs13,13,13,0\n+.*:\t(ed 0c 6d 90|90 6d 0c ed) \n+.*:\t(07 90 c0 ee|ee c0 90 07) \tpmxvbf16ger2nn a3,vs16,vs17,14,14,3\n+.*:\t(ed 90 8f 90|90 8f 90 ed) \n+.*:\t(ee 00 0b 1e|1e 0b 00 ee) \txvi8ger4spp a4,vs32,vs33\n+.*:\t(07 90 f0 ff|ff f0 90 07) \tpmxvi8ger4spp a5,vs34,vs35,15,15,15\n+.*:\t(ee 82 1b 1e|1e 1b 82 ee) \n+.*:\t(ef 04 2a 5e|5e 2a 04 ef) \txvi16ger2 a6,vs36,vs37\n+.*:\t(ef 86 3b 5e|5e 3b 86 ef) \txvi16ger2pp a7,vs38,vs39\n+.*:\t(07 90 40 ff|ff 40 90 07) \tpmxvi16ger2 a0,vs38,vs39,15,15,1\n+.*:\t(ec 06 3a 5e|5e 3a 06 ec) \n+.*:\t(07 90 80 cc|cc 80 90 07) \tpmxvi16ger2pp a1,vs40,vs41,12,12,2\n+.*:\t(ec 88 4b 5e|5e 4b 88 ec) \n+#pass"
    },
    {
      "sha": "1f02c158daa5b7dbca84583884f1aed9c0e7d7fc",
      "filename": "gas/testsuite/gas/ppc/outerprod.s",
      "status": "added",
      "additions": 63,
      "deletions": 0,
      "changes": 63,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3c112fab5db4a90703442f65b743857e50d2ac/gas/testsuite/gas/ppc/outerprod.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3c112fab5db4a90703442f65b743857e50d2ac/gas/testsuite/gas/ppc/outerprod.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/outerprod.s?ref=aa3c112fab5db4a90703442f65b743857e50d2ac",
      "patch": "@@ -0,0 +1,63 @@\n+\t.text\n+_start:\n+\txxmfacc\t5\n+\txxmtacc 6\n+\txxsetaccz 7\n+\txvi4ger8 0,63,62\n+\txvi4ger8pp 1,61,60\n+\tpmxvi4ger8 2,59,58,15,14,255\n+\tpmxvi4ger8pp 3,57,56,7,8,128\n+\txvi8ger4 4,55,54\n+\txvi8ger4pp 5,53,52\n+\tpmxvi8ger4 6,51,50,13,12,11\n+\tpmxvi8ger4pp 7,49,48,10,9,8\n+\txvi16ger2s 0,47,46\n+\txvi16ger2spp 1,45,44\n+\tpmxvi16ger2s 2,43,42,7,6,3\n+\tpmxvi16ger2spp 3,41,40,5,4,2\n+\txvf16ger2 4,39,38\n+\txvf16ger2pp 5,37,36\n+\txvf16ger2pn 6,35,34\n+\txvf16ger2np 7,33,32\n+\txvf16ger2nn 0,4,5\n+\tpmxvf16ger2 1,2,3,3,2,1\n+\tpmxvf16ger2pp 2,4,5,1,0,0\n+\tpmxvf16ger2pn 3,6,7,15,14,3\n+\tpmxvf16ger2np 4,8,9,13,12,2\n+\tpmxvf16ger2nn 5,10,11,11,10,1\n+\txvf32ger 6,12,13\n+\txvf32gerpp 7,14,15\n+\txvf32gerpn 0,16,17\n+\txvf32gernp 1,18,19\n+\txvf32gernn 2,20,21\n+\tpmxvf32ger 3,22,23,9,8\n+\tpmxvf32gerpp 4,24,25,7,6\n+\tpmxvf32gerpn 5,26,27,5,4\n+\tpmxvf32gernp 6,28,29,3,2\n+\tpmxvf32gernn 7,0,1,1,0\n+\txvf64ger 0,4,5\n+\txvf64gerpp 1,8,9\n+\txvf64gerpn 2,2,2\n+\txvf64gernp 3,4,3\n+\txvf64gernn 4,4,4\n+\tpmxvf64ger 5,6,5,15,0\n+\tpmxvf64gerpp 6,6,6,14,1\n+\tpmxvf64gerpn 7,8,7,13,2\n+\tpmxvf64gernp 0,4,5,12,3\n+\tpmxvf64gernn 1,2,1,10,0\n+\txvbf16ger2pp 2,3,4\n+\txvbf16ger2 3,4,5\n+\txvbf16ger2np 4,5,6\n+\txvbf16ger2pn 5,6,7\n+\txvbf16ger2nn 6,7,8\n+\tpmxvbf16ger2pp 7,8,9,15,15,3\n+\tpmxvbf16ger2 0,9,10,12,12,2\n+\tpmxvbf16ger2np 1,10,11,10,10,1\n+\tpmxvbf16ger2pn 2,12,13,13,13,0\n+\tpmxvbf16ger2nn 3,16,17,14,14,3\n+\txvi8ger4spp 4,32,33\n+\tpmxvi8ger4spp 5,34,35,15,15,15\n+\txvi16ger2 6,36,37\n+\txvi16ger2pp 7,38,39\n+\tpmxvi16ger2 0,38,39,15,15,1\n+\tpmxvi16ger2pp 1,40,41,12,12,2"
    },
    {
      "sha": "34cc82c9f39cee4a3b3dcc6621ef4282b08a8c52",
      "filename": "gas/testsuite/gas/ppc/ppc.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3c112fab5db4a90703442f65b743857e50d2ac/gas/testsuite/gas/ppc/ppc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3c112fab5db4a90703442f65b743857e50d2ac/gas/testsuite/gas/ppc/ppc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/ppc.exp?ref=aa3c112fab5db4a90703442f65b743857e50d2ac",
      "patch": "@@ -124,6 +124,7 @@ run_dump_test \"power10\"\n run_dump_test \"vsx\"\n run_dump_test \"vsx2\"\n run_dump_test \"vsx3\"\n+run_dump_test \"vsx4\"\n run_dump_test \"htm\"\n run_dump_test \"titan\"\n run_dump_test \"prefix-align\"\n@@ -136,3 +137,4 @@ run_dump_test \"vec_mul\"\n run_dump_test \"vsx_32byte\"\n run_dump_test \"int128\"\n run_dump_test \"simd_perm\"\n+run_dump_test \"outerprod\""
    },
    {
      "sha": "657a8ae6d994cb5838752029d85e1a80f72bbd08",
      "filename": "gas/testsuite/gas/ppc/vsx4.d",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3c112fab5db4a90703442f65b743857e50d2ac/gas/testsuite/gas/ppc/vsx4.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3c112fab5db4a90703442f65b743857e50d2ac/gas/testsuite/gas/ppc/vsx4.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/vsx4.d?ref=aa3c112fab5db4a90703442f65b743857e50d2ac",
      "patch": "@@ -0,0 +1,12 @@\n+#as: -mpower10\n+#objdump: -dr -Mpower10\n+#name: VSX ISA power10 instructions\n+\n+.*\n+\n+Disassembly of section \\.text:\n+\n+0+0 <vsx4>:\n+.*:\t(f0 50 6f 6f|6f 6f 50 f0) \txvcvbf16sp vs34,vs45\n+.*:\t(f1 f1 27 6f|6f 27 f1 f1) \txvcvspbf16 vs47,vs36\n+#pass"
    },
    {
      "sha": "290f595017bf672bfe67777c2fc0be69f0f47671",
      "filename": "gas/testsuite/gas/ppc/vsx4.s",
      "status": "added",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3c112fab5db4a90703442f65b743857e50d2ac/gas/testsuite/gas/ppc/vsx4.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3c112fab5db4a90703442f65b743857e50d2ac/gas/testsuite/gas/ppc/vsx4.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/ppc/vsx4.s?ref=aa3c112fab5db4a90703442f65b743857e50d2ac",
      "patch": "@@ -0,0 +1,4 @@\n+\t.text\n+vsx4:\n+\txvcvbf16sp\t34,45\n+\txvcvspbf16\t47,36"
    },
    {
      "sha": "c14cea3bfe1f3ca7c298113116d32402a5cceb26",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3c112fab5db4a90703442f65b743857e50d2ac/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3c112fab5db4a90703442f65b743857e50d2ac/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=aa3c112fab5db4a90703442f65b743857e50d2ac",
      "patch": "@@ -1,3 +1,8 @@\n+2020-05-11  Alan Modra  <amodra@gmail.com>\n+\n+\t* opcode/ppc.h (PPC_OPERAND_ACC): Define.  Renumber following\n+\tPPC_OPERAND defines.\n+\n 2020-05-11  Alan Modra  <amodra@gmail.com>\n \n \t* elf/ppc64.h: Update comment."
    },
    {
      "sha": "11c2939253b15ea6229076146cc25656b01db258",
      "filename": "include/opcode/ppc.h",
      "status": "modified",
      "additions": 16,
      "deletions": 13,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3c112fab5db4a90703442f65b743857e50d2ac/include/opcode/ppc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3c112fab5db4a90703442f65b743857e50d2ac/include/opcode/ppc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/ppc.h?ref=aa3c112fab5db4a90703442f65b743857e50d2ac",
      "patch": "@@ -362,67 +362,70 @@ extern const unsigned int num_powerpc_operands;\n    prints these with a leading 'vs'.  */\n #define PPC_OPERAND_VSR (0x10)\n \n+/* This operand names a VSX accumulator.  */\n+#define PPC_OPERAND_ACC (0x20)\n+\n /* This operand may use the symbolic names for the CR fields (even\n    without -mregnames), which are\n        lt  0\tgt  1\teq  2\tso  3\tun  3\n        cr0 0\tcr1 1\tcr2 2\tcr3 3\n        cr4 4\tcr5 5\tcr6 6\tcr7 7\n    These may be combined arithmetically, as in cr2*4+gt.  These are\n    only supported on the PowerPC, not the POWER.  */\n-#define PPC_OPERAND_CR_BIT (0x20)\n+#define PPC_OPERAND_CR_BIT (0x40)\n \n /* This is a CR FIELD that does not use symbolic names (unless\n    -mregnames is in effect).  If both PPC_OPERAND_CR_BIT and\n    PPC_OPERAND_CR_REG are set then treat the field as per\n    PPC_OPERAND_CR_BIT for assembly, but as if neither of these\n    bits are set for disassembly.  */\n-#define PPC_OPERAND_CR_REG (0x40)\n+#define PPC_OPERAND_CR_REG (0x80)\n \n /* This operand names a special purpose register.  */\n-#define PPC_OPERAND_SPR (0x80)\n+#define PPC_OPERAND_SPR (0x100)\n \n /* This operand names a paired-single graphics quantization register.  */\n-#define PPC_OPERAND_GQR (0x100)\n+#define PPC_OPERAND_GQR (0x200)\n \n /* This operand is a relative branch displacement.  The disassembler\n    prints these symbolically if possible.  */\n-#define PPC_OPERAND_RELATIVE (0x200)\n+#define PPC_OPERAND_RELATIVE (0x400)\n \n /* This operand is an absolute branch address.  The disassembler\n    prints these symbolically if possible.  */\n-#define PPC_OPERAND_ABSOLUTE (0x400)\n+#define PPC_OPERAND_ABSOLUTE (0x800)\n \n /* This operand takes signed values.  */\n-#define PPC_OPERAND_SIGNED (0x800)\n+#define PPC_OPERAND_SIGNED (0x1000)\n \n /* This operand takes signed values, but also accepts a full positive\n    range of values when running in 32 bit mode.  That is, if bits is\n    16, it takes any value from -0x8000 to 0xffff.  In 64 bit mode,\n    this flag is ignored.  */\n-#define PPC_OPERAND_SIGNOPT (0x1000)\n+#define PPC_OPERAND_SIGNOPT (0x2000)\n \n /* The next operand should be wrapped in parentheses rather than\n    separated from this one by a comma.  This is used for the load and\n    store instructions which want their operands to look like\n        reg,displacement(reg)\n    */\n-#define PPC_OPERAND_PARENS (0x2000)\n+#define PPC_OPERAND_PARENS (0x4000)\n \n /* This operand is for the DS field in a DS form instruction.  */\n-#define PPC_OPERAND_DS (0x4000)\n+#define PPC_OPERAND_DS (0x8000)\n \n /* This operand is for the DQ field in a DQ form instruction.  */\n-#define PPC_OPERAND_DQ (0x8000)\n+#define PPC_OPERAND_DQ (0x10000)\n \n /* This operand should be regarded as a negative number for the\n    purposes of overflow checking (i.e., the normal most negative\n    number is disallowed and one more than the normal most positive\n    number is allowed).  This flag will only be set for a signed\n    operand.  */\n-#define PPC_OPERAND_NEGATIVE (0x10000)\n+#define PPC_OPERAND_NEGATIVE (0x20000)\n \n /* Valid range of operand is 0..n rather than 0..n-1.  */\n-#define PPC_OPERAND_PLUS1 (0x20000)\n+#define PPC_OPERAND_PLUS1 (0x40000)\n \n /* This operand is optional, and is zero if omitted.  This is used for\n    example, in the optional BF field in the comparison instructions.  The"
    },
    {
      "sha": "7b343a533ef56fdf91a9d7b6ead613c6f515cef2",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3c112fab5db4a90703442f65b743857e50d2ac/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3c112fab5db4a90703442f65b743857e50d2ac/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=aa3c112fab5db4a90703442f65b743857e50d2ac",
      "patch": "@@ -1,3 +1,28 @@\n+2020-05-11  Alan Modra  <amodra@gmail.com>\n+\t    Peter Bergner  <bergner@linux.ibm.com>\n+\n+\t* ppc-opc.c (insert_xa6a, extract_xa6a, insert_xb6a, extract_xb6a):\n+\tNew functions.\n+\t(powerpc_operands): Define ACC, PMSK8, PMSK4, PMSK2, XMSK, YMSK,\n+\tYMSK2, XA6a, XA6ap, XB6a entries.\n+\t(PMMIRR, P_X_MASK, P_XX1_MASK, P_GER_MASK): Define\n+\t(P_GER2_MASK, P_GER4_MASK, P_GER8_MASK, P_GER64_MASK): Define.\n+\t(PPCVSX4): Define.\n+\t(powerpc_opcodes): Add xxmfacc, xxmtacc, xxsetaccz,\n+\txvi8ger4pp, xvi8ger4, xvf16ger2pp, xvf16ger2, xvf32gerpp, xvf32ger,\n+\txvi4ger8pp, xvi4ger8, xvi16ger2spp, xvi16ger2s, xvbf16ger2pp,\n+\txvbf16ger2, xvf64gerpp, xvf64ger, xvi16ger2, xvf16ger2np,\n+\txvf32gernp, xvi8ger4spp, xvi16ger2pp, xvbf16ger2np, xvf64gernp,\n+\txvf16ger2pn, xvf32gerpn, xvbf16ger2pn, xvf64gerpn, xvf16ger2nn,\n+\txvf32gernn, xvbf16ger2nn, xvf64gernn, xvcvbf16sp, xvcvspbf16.\n+\t(prefix_opcodes): Add pmxvi8ger4pp, pmxvi8ger4, pmxvf16ger2pp,\n+\tpmxvf16ger2, pmxvf32gerpp, pmxvf32ger, pmxvi4ger8pp, pmxvi4ger8,\n+\tpmxvi16ger2spp, pmxvi16ger2s, pmxvbf16ger2pp, pmxvbf16ger2,\n+\tpmxvf64gerpp, pmxvf64ger, pmxvi16ger2, pmxvf16ger2np, pmxvf32gernp,\n+\tpmxvi8ger4spp, pmxvi16ger2pp, pmxvbf16ger2np, pmxvf64gernp,\n+\tpmxvf16ger2pn, pmxvf32gerpn, pmxvbf16ger2pn, pmxvf64gerpn,\n+\tpmxvf16ger2nn, pmxvf32gernn, pmxvbf16ger2nn, pmxvf64gernn.\n+\n 2020-05-11  Alan Modra  <amodra@gmail.com>\n \n \t* ppc-opc.c (insert_imm32, extract_imm32): New functions."
    },
    {
      "sha": "162f770697514b8180555a25cb9bb2ebe5a65cb5",
      "filename": "opcodes/ppc-dis.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3c112fab5db4a90703442f65b743857e50d2ac/opcodes/ppc-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3c112fab5db4a90703442f65b743857e50d2ac/opcodes/ppc-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ppc-dis.c?ref=aa3c112fab5db4a90703442f65b743857e50d2ac",
      "patch": "@@ -881,6 +881,8 @@ print_insn_powerpc (bfd_vma memaddr,\n \t    (*info->fprintf_func) (info->stream, \"v%\" PRId64, value);\n \t  else if ((operand->flags & PPC_OPERAND_VSR) != 0)\n \t    (*info->fprintf_func) (info->stream, \"vs%\" PRId64, value);\n+\t  else if ((operand->flags & PPC_OPERAND_ACC) != 0)\n+\t    (*info->fprintf_func) (info->stream, \"a%\" PRId64, value);\n \t  else if ((operand->flags & PPC_OPERAND_RELATIVE) != 0)\n \t    (*info->print_address_func) (memaddr + value, info);\n \t  else if ((operand->flags & PPC_OPERAND_ABSOLUTE) != 0)"
    },
    {
      "sha": "5e122ef2e9805102611d8179a54dd8365b106719",
      "filename": "opcodes/ppc-opc.c",
      "status": "modified",
      "additions": 204,
      "deletions": 4,
      "changes": 208,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa3c112fab5db4a90703442f65b743857e50d2ac/opcodes/ppc-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa3c112fab5db4a90703442f65b743857e50d2ac/opcodes/ppc-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ppc-opc.c?ref=aa3c112fab5db4a90703442f65b743857e50d2ac",
      "patch": "@@ -1548,6 +1548,33 @@ extract_xa6 (uint64_t insn,\n   return ((insn << 3) & 0x20) | ((insn >> 16) & 0x1f);\n }\n \n+/* The XA field in an MMA XX3 form instruction.  This is split\n+   and must not overlap with the ACC operand.  */\n+\n+static uint64_t\n+insert_xa6a (uint64_t insn,\n+\t     int64_t value,\n+\t     ppc_cpu_t dialect,\n+\t     const char **errmsg)\n+{\n+  int64_t acc = (insn >> 23) & 0x7;\n+  if ((value >> 2) == acc)\n+    *errmsg = _(\"VSR overlaps ACC operand\");\n+  return insert_xa6 (insn, value, dialect, errmsg);\n+}\n+\n+static int64_t\n+extract_xa6a (uint64_t insn,\n+\t      ppc_cpu_t dialect,\n+\t      int *invalid)\n+{\n+  int64_t acc = (insn >> 23) & 0x7;\n+  int64_t value = extract_xa6 (insn, dialect, invalid);\n+  if ((value >> 2) == acc)\n+    *invalid = 1;\n+  return value;\n+}\n+\n /* The XB field in an XX3 form instruction.  This is split.  */\n \n static uint64_t\n@@ -1567,6 +1594,33 @@ extract_xb6 (uint64_t insn,\n   return ((insn << 4) & 0x20) | ((insn >> 11) & 0x1f);\n }\n \n+/* The XB field in an MMA XX3 form instruction.  This is split\n+   and must not overlap with the ACC operand.  */\n+\n+static uint64_t\n+insert_xb6a (uint64_t insn,\n+\t     int64_t value,\n+\t     ppc_cpu_t dialect,\n+\t     const char **errmsg)\n+{\n+  int64_t acc = (insn >> 23) & 0x7;\n+  if ((value >> 2) == acc)\n+    *errmsg = _(\"VSR overlaps ACC operand\");\n+  return insert_xb6 (insn, value, dialect, errmsg);\n+}\n+\n+static int64_t\n+extract_xb6a (uint64_t insn,\n+\t      ppc_cpu_t dialect,\n+\t      int *invalid)\n+{\n+  int64_t acc = (insn >> 23) & 0x7;\n+  int64_t value = extract_xb6 (insn, dialect, invalid);\n+  if ((value >> 2) == acc)\n+    *invalid = 1;\n+  return value;\n+}\n+\n /* The XA and XB fields in an XX3 form instruction when they must be the same.\n    This is used for extended mnemonics like xvmovdp.  The extraction function\n    enforces that the fields are the same.  */\n@@ -2095,9 +2149,13 @@ const struct powerpc_operand powerpc_operands[] =\n #define BFF BF + 1\n   { 0x7, 23, NULL, NULL, 0 },\n \n+  /* The ACC field in a VSX ACC 8LS:D-form instruction.  */\n+#define ACC BFF + 1\n+  { 0x7, 23, NULL, NULL, PPC_OPERAND_ACC },\n+\n   /* An optional BF field.  This is used for comparison instructions,\n      in which an omitted BF field is taken as zero.  */\n-#define OBF BFF + 1\n+#define OBF ACC + 1\n   { 0x7, 23, NULL, NULL, PPC_OPERAND_CR_REG | PPC_OPERAND_OPTIONAL },\n \n   /* The BFA field in an X or XL form instruction.  */\n@@ -2252,9 +2310,33 @@ const struct powerpc_operand powerpc_operands[] =\n #define IX UIM3 + 1\n   { 0x1, 17, NULL, NULL, 0 },\n \n+  /* The PMSK field in GER rank 8 prefix instructions.  */\n+#define PMSK8 IX + 1\n+  { 0xff, 40, NULL, NULL, 0 },\n+\n+  /* The PMSK field in GER rank 4 prefix instructions.  */\n+#define PMSK4 PMSK8 + 1\n+  { 0xf, 44, NULL, NULL, 0 },\n+\n+  /* The PMSK field in GER rank 2 prefix instructions.  */\n+#define PMSK2 PMSK4 + 1\n+  { 0x3, 46, NULL, NULL, 0 },\n+\n+  /* The XMSK field in GER prefix instructions.  */\n+#define XMSK PMSK2 + 1\n+  { 0xf, 36, NULL, NULL, 0 },\n+\n+  /* The YMSK field in GER prefix instructions.  */\n+#define YMSK XMSK + 1\n+  { 0xf, 32, NULL, NULL, 0 },\n+\n+  /* The YMSK field in 64-bit GER prefix instructions.  */\n+#define YMSK2 YMSK + 1\n+  { 0x3, 34, NULL, NULL, 0 },\n+\n   /* The DUIS or BHRBE fields in a XFX form instruction, 10 bits\n      unsigned imediate */\n-#define DUIS IX + 1\n+#define DUIS YMSK2 + 1\n #define BHRBE DUIS\n   { 0x3ff, 11, NULL, NULL, 0 },\n \n@@ -2906,13 +2988,28 @@ const struct powerpc_operand powerpc_operands[] =\n #define XA6 XTOP + 1\n   { 0x3f, PPC_OPSHIFT_INV, insert_xa6, extract_xa6, PPC_OPERAND_VSR },\n \n+  /* The XA field in an MMA XX3 form instruction.  This is split and\n+     must not overlap with the ACC operand.  */\n+#define XA6a XA6 + 1\n+  { 0x3f, PPC_OPSHIFT_INV, insert_xa6a, extract_xa6a, PPC_OPERAND_VSR },\n+\n+  /* The XAp field in an MMA XX3 form instruction.  This is split.\n+     This is like XA6a, but must be even.  */\n+#define XA6ap XA6a + 1\n+  { 0x3e, PPC_OPSHIFT_INV, insert_xa6a, extract_xa6a, PPC_OPERAND_VSR },\n+\n   /* The XB field in an XX2 or XX3 form instruction.  This is split.  */\n-#define XB6 XA6 + 1\n+#define XB6 XA6ap + 1\n   { 0x3f, PPC_OPSHIFT_INV, insert_xb6, extract_xb6, PPC_OPERAND_VSR },\n \n+  /* The XB field in an XX3 form instruction.  This is split and\n+     must not overlap with the ACC operand.  */\n+#define XB6a XB6 + 1\n+  { 0x3f, PPC_OPSHIFT_INV, insert_xb6a, extract_xb6a, PPC_OPERAND_VSR },\n+\n   /* The XA and XB fields in an XX3 form instruction when they must be the same.\n      This is used in extended mnemonics like xvmovdp.  This is split.  */\n-#define XAB6 XB6 + 1\n+#define XAB6 XB6a + 1\n   { 0x3f, PPC_OPSHIFT_INV, insert_xab6, extract_xab6, PPC_OPERAND_VSR },\n \n   /* The XC field in an XX4 form instruction.  This is split.  */\n@@ -2993,16 +3090,30 @@ const unsigned int num_powerpc_operands = (sizeof (powerpc_operands)\n /* Prefix insn, modified register to register form MRR.  */\n #define PMRR (PREFIX_OP | PREFIX_FORM (3))\n \n+/* Prefix insn, modified masked immediate register to register form MMIRR.  */\n+#define PMMIRR (PREFIX_OP | PREFIX_FORM (3) | (9ULL << 52))\n+\n /* An 8-byte D form prefix instruction.  */\n #define P_D_MASK (((-1ULL << 50) & ~PCREL_MASK) | OP_MASK)\n \n /* The same as P_D_MASK, but with the RA and PCREL fields specified.  */\n #define P_DRAPCREL_MASK (P_D_MASK | PCREL_MASK | RA_MASK)\n \n+/* Mask for prefix X form instructions.  */\n+#define P_X_MASK (PREFIX_MASK | X_MASK)\n+#define P_XX1_MASK (PREFIX_MASK | XX1_MASK)\n+\n /* Mask for prefix vector permute insns.  */\n #define P_XX4_MASK (PREFIX_MASK | XX4_MASK)\n #define P_UXX4_MASK (P_XX4_MASK & ~(7ULL << 32))\n \n+/* MMIRR:XX3-form 8-byte outer product instructions.  */\n+#define P_GER_MASK ((-1ULL << 40) | XX3_MASK | (3 << 21) | 1)\n+#define P_GER2_MASK (P_GER_MASK & ~(3ULL << 46))\n+#define P_GER4_MASK (P_GER_MASK & ~(15ULL << 44))\n+#define P_GER8_MASK (P_GER_MASK & ~(255ULL << 40))\n+#define P_GER64_MASK (P_GER_MASK | (3ULL << 32))\n+\n /* Vector splat immediate op.  */\n #define VSOP(op, xop) (OP (op) | (xop << 17))\n #define P_VS_MASK ((-1ULL << 48) | VSOP (0x3f, 0xf))\n@@ -3869,6 +3980,7 @@ const unsigned int num_powerpc_operands = (sizeof (powerpc_operands)\n #define PPCVSX\tPPC_OPCODE_VSX\n #define PPCVSX2\tPPC_OPCODE_POWER8\n #define PPCVSX3\tPPC_OPCODE_POWER9\n+#define PPCVSX4\tPPC_OPCODE_POWER10\n #define POWER\tPPC_OPCODE_POWER\n #define POWER2\tPPC_OPCODE_POWER | PPC_OPCODE_POWER2\n #define PWR2COM PPC_OPCODE_POWER | PPC_OPCODE_POWER2 | PPC_OPCODE_COMMON\n@@ -6115,6 +6227,10 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"msgclrp\",\tXRTRA(31,174,0,0), XRTRA_MASK, POWER8,\t0,\t\t{RB}},\n {\"dcbtlse\",\tX(31,174),\tX_MASK,\t     PPCCHLK,\tE500MC,\t\t{CT, RA0, RB}},\n \n+{\"xxmfacc\",\tXVA(31,177,0), XRARB_MASK|3<<21, POWER10, 0,\t\t{ACC}},\n+{\"xxmtacc\",\tXVA(31,177,1), XRARB_MASK|3<<21, POWER10, 0,\t\t{ACC}},\n+{\"xxsetaccz\",\tXVA(31,177,3), XRARB_MASK|3<<21, POWER10, 0,\t\t{ACC}},\n+\n {\"mtmsrd\",\tX(31,178),\tXRLARB_MASK, PPC64,\t0,\t\t{RS, A_L}},\n \n {\"mtvsrd\",\tX(31,179),\tXX1RB_MASK,   PPCVSX2,\t0,\t\t{XT6, RA}},\n@@ -7564,6 +7680,9 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"dqua\",\tZRC(59,3,0),\tZ2_MASK,     POWER6,\tPPCVLE,\t\t{FRT,FRA,FRB,RMC}},\n {\"dqua.\",\tZRC(59,3,1),\tZ2_MASK,     POWER6,\tPPCVLE,\t\t{FRT,FRA,FRB,RMC}},\n \n+{\"xvi8ger4pp\",\tXX3(59,2),   XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+{\"xvi8ger4\",\tXX3(59,3),   XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+\n {\"fdivs\",\tA(59,18,0),\tAFRC_MASK,   PPC,\tPPCEFS|PPCVLE,\t{FRT, FRA, FRB}},\n {\"fdivs.\",\tA(59,18,1),\tAFRC_MASK,   PPC,\tPPCEFS|PPCVLE,\t{FRT, FRA, FRB}},\n \n@@ -7613,21 +7732,41 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"dquai\",\tZRC(59,67,0),\tZ2_MASK,     POWER6,\tPPCVLE,\t\t{TE, FRT,FRB,RMC}},\n {\"dquai.\",\tZRC(59,67,1),\tZ2_MASK,     POWER6,\tPPCVLE,\t\t{TE, FRT,FRB,RMC}},\n \n+{\"xvf16ger2pp\",\tXX3(59,18),  XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+{\"xvf16ger2\",\tXX3(59,19),  XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+\n {\"dscri\",\tZRC(59,98,0),\tZ_MASK,\t     POWER6,\tPPCVLE,\t\t{FRT, FRA, SH16}},\n {\"dscri.\",\tZRC(59,98,1),\tZ_MASK,\t     POWER6,\tPPCVLE,\t\t{FRT, FRA, SH16}},\n \n {\"drintx\",\tZRC(59,99,0),\tZ2_MASK,     POWER6,\tPPCVLE,\t\t{R, FRT, FRB, RMC}},\n {\"drintx.\",\tZRC(59,99,1),\tZ2_MASK,     POWER6,\tPPCVLE,\t\t{R, FRT, FRB, RMC}},\n \n+{\"xvf32gerpp\",\tXX3(59,26),  XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+{\"xvf32ger\",\tXX3(59,27),  XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+\n {\"dcmpo\",\tX(59,130),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{BF,  FRA, FRB}},\n \n+{\"xvi4ger8pp\",\tXX3(59,34),  XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+{\"xvi4ger8\",\tXX3(59,35),  XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+\n {\"dtstex\",\tX(59,162),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{BF,  FRA, FRB}},\n+\n+{\"xvi16ger2spp\", XX3(59,42), XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+{\"xvi16ger2s\",\tXX3(59,43),  XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+\n {\"dtstdc\",\tZ(59,194),\tZ_MASK,\t     POWER6,\tPPCVLE,\t\t{BF,  FRA, DCM}},\n+\n+{\"xvbf16ger2pp\",XX3(59,50),  XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+{\"xvbf16ger2\",\tXX3(59,51),  XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+\n {\"dtstdg\",\tZ(59,226),\tZ_MASK,\t     POWER6,\tPPCVLE,\t\t{BF,  FRA, DGM}},\n \n {\"drintn\",\tZRC(59,227,0),\tZ2_MASK,     POWER6,\tPPCVLE,\t\t{R, FRT, FRB, RMC}},\n {\"drintn.\",\tZRC(59,227,1),\tZ2_MASK,     POWER6,\tPPCVLE,\t\t{R, FRT, FRB, RMC}},\n \n+{\"xvf64gerpp\",\tXX3(59,58),  XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6ap, XB6a}},\n+{\"xvf64ger\",\tXX3(59,59),  XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6ap, XB6a}},\n+\n {\"dctdp\",\tXRC(59,258,0),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{FRT, FRB}},\n {\"dctdp.\",\tXRC(59,258,1),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{FRT, FRB}},\n \n@@ -7637,20 +7776,42 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"ddedpd\",\tXRC(59,322,0),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{SP, FRT, FRB}},\n {\"ddedpd.\",\tXRC(59,322,1),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{SP, FRT, FRB}},\n \n+{\"xvi16ger2\",\tXX3(59,75),  XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+\n+{\"xvf16ger2np\",\tXX3(59,82),  XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+\n {\"dxex\",\tXRC(59,354,0),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{FRT, FRB}},\n {\"dxex.\",\tXRC(59,354,1),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{FRT, FRB}},\n \n+{\"xvf32gernp\",\tXX3(59,90),  XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+\n+{\"xvi8ger4spp\",\tXX3(59,99),  XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+\n+{\"xvi16ger2pp\",\tXX3(59,107), XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+\n+{\"xvbf16ger2np\",XX3(59,114), XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+\n+{\"xvf64gernp\",\tXX3(59,122), XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6ap, XB6a}},\n+\n {\"dsub\",\tXRC(59,514,0),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{FRT, FRA, FRB}},\n {\"dsub.\",\tXRC(59,514,1),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{FRT, FRA, FRB}},\n \n {\"ddiv\",\tXRC(59,546,0),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{FRT, FRA, FRB}},\n {\"ddiv.\",\tXRC(59,546,1),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{FRT, FRA, FRB}},\n \n+{\"xvf16ger2pn\",\tXX3(59,146), XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+\n+{\"xvf32gerpn\",\tXX3(59,154), XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+\n {\"dcmpu\",\tX(59,642),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{BF,  FRA, FRB}},\n \n {\"dtstsf\",\tX(59,674),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{BF,  FRA, FRB}},\n {\"dtstsfi\",\tX(59,675),\tX_MASK|1<<22,POWER9,\tPPCVLE,\t\t{BF, UIM6, FRB}},\n \n+{\"xvbf16ger2pn\",XX3(59,178), XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+\n+{\"xvf64gerpn\",\tXX3(59,186), XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6ap, XB6a}},\n+\n {\"drsp\",\tXRC(59,770,0),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{FRT, FRB}},\n {\"drsp.\",\tXRC(59,770,1),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{FRT, FRB}},\n \n@@ -7660,15 +7821,23 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"denbcd\",\tXRC(59,834,0),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{S, FRT, FRB}},\n {\"denbcd.\",\tXRC(59,834,1),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{S, FRT, FRB}},\n \n+{\"xvf16ger2nn\",\tXX3(59,210), XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+\n {\"fcfids\",\tXRC(59,846,0),\tXRA_MASK, POWER7|PPCA2,\tPPCVLE,\t\t{FRT, FRB}},\n {\"fcfids.\",\tXRC(59,846,1),\tXRA_MASK, POWER7|PPCA2,\tPPCVLE,\t\t{FRT, FRB}},\n \n {\"diex\",\tXRC(59,866,0),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{FRT, FRA, FRB}},\n {\"diex.\",\tXRC(59,866,1),\tX_MASK,\t     POWER6,\tPPCVLE,\t\t{FRT, FRA, FRB}},\n \n+{\"xvf32gernn\",\tXX3(59,218), XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+\n+{\"xvbf16ger2nn\",XX3(59,242), XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6a, XB6a}},\n+\n {\"fcfidus\",\tXRC(59,974,0),\tXRA_MASK, POWER7|PPCA2,\tPPCVLE,\t\t{FRT, FRB}},\n {\"fcfidus.\",\tXRC(59,974,1),\tXRA_MASK, POWER7|PPCA2,\tPPCVLE,\t\t{FRT, FRB}},\n \n+{\"xvf64gernn\",\tXX3(59,250), XX3_MASK|3<<21, POWER10,\tPPCVLE,\t\t{ACC, XA6ap, XB6a}},\n+\n {\"xsaddsp\",\tXX3(60,0),\tXX3_MASK,    PPCVSX2,\tPPCVLE,\t\t{XT6, XA6, XB6}},\n {\"xsmaddasp\",\tXX3(60,1),\tXX3_MASK,    PPCVSX2,\tPPCVLE,\t\t{XT6, XA6, XB6}},\n {\"xxsldwi\",\tXX3(60,2),\tXX3SHW_MASK, PPCVSX,\tPPCVLE,\t\t{XT6, XA6, XB6, SHW}},\n@@ -7854,6 +8023,8 @@ const struct powerpc_opcode powerpc_opcodes[] = {\n {\"xvxexpsp\",\tXX2VA(60,475,8),XX2_MASK,    PPCVSX3,\tPPCVLE,\t\t{XT6, XB6}},\n {\"xvxsigsp\",\tXX2VA(60,475,9),XX2_MASK,    PPCVSX3,\tPPCVLE,\t\t{XT6, XB6}},\n {\"xxbrw\",\tXX2VA(60,475,15),XX2_MASK,   PPCVSX3,\tPPCVLE,\t\t{XT6, XB6}},\n+{\"xvcvbf16sp\",\tXX2VA(60,475,16),XX2_MASK,   PPCVSX4,\tPPCVLE,\t\t{XT6, XB6}},\n+{\"xvcvspbf16\",\tXX2VA(60,475,17),XX2_MASK,   PPCVSX4,\tPPCVLE,\t\t{XT6, XB6}},\n {\"xxbrd\",\tXX2VA(60,475,23),XX2_MASK,   PPCVSX3,\tPPCVLE,\t\t{XT6, XB6}},\n {\"xvcvhpsp\",\tXX2VA(60,475,24),XX2_MASK,   PPCVSX3,\tPPCVLE,\t\t{XT6, XB6}},\n {\"xvcvsphp\",\tXX2VA(60,475,25),XX2_MASK,   PPCVSX3,\tPPCVLE,\t\t{XT6, XB6}},\n@@ -8227,6 +8398,35 @@ const struct powerpc_opcode prefix_opcodes[] = {\n {\"plq\",\t\t  P8LS|OP(56),\t       P_D_MASK,\tPOWER10, 0,\t{RTQ, D34, PRAQ, PCREL}},\n {\"pld\",\t\t  P8LS|OP(57),\t       P_D_MASK,\tPOWER10, 0,\t{RT, D34, PRA0, PCREL}},\n {\"plxvp\",\t  P8LS|OP(58),\t       P_D_MASK,\tPOWER10, 0,\t{XTP, D34, PRA0, PCREL}},\n+{\"pmxvi8ger4pp\",  PMMIRR|XX3(59,2),    P_GER4_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK4}},\n+{\"pmxvi8ger4\",\t  PMMIRR|XX3(59,3),    P_GER4_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK4}},\n+{\"pmxvf16ger2pp\", PMMIRR|XX3(59,18),   P_GER2_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK2}},\n+{\"pmxvf16ger2\",\t  PMMIRR|XX3(59,19),   P_GER2_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK2}},\n+{\"pmxvf32gerpp\",  PMMIRR|XX3(59,26),   P_GER_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK}},\n+{\"pmxvf32ger\",\t  PMMIRR|XX3(59,27),   P_GER_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK}},\n+{\"pmxvi4ger8pp\",  PMMIRR|XX3(59,34),   P_GER8_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK8}},\n+{\"pmxvi4ger8\",\t  PMMIRR|XX3(59,35),   P_GER8_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK8}},\n+{\"pmxvi16ger2spp\",PMMIRR|XX3(59,42),   P_GER2_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK2}},\n+{\"pmxvi16ger2s\",  PMMIRR|XX3(59,43),   P_GER2_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK2}},\n+{\"pmxvbf16ger2pp\",PMMIRR|XX3(59,50),   P_GER2_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK2}},\n+{\"pmxvbf16ger2\",  PMMIRR|XX3(59,51),   P_GER2_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK2}},\n+{\"pmxvf64gerpp\",  PMMIRR|XX3(59,58),   P_GER64_MASK,\tPOWER10, 0,\t{ACC, XA6ap, XB6a, XMSK, YMSK2}},\n+{\"pmxvf64ger\",\t  PMMIRR|XX3(59,59),   P_GER64_MASK,\tPOWER10, 0,\t{ACC, XA6ap, XB6a, XMSK, YMSK2}},\n+{\"pmxvi16ger2\",   PMMIRR|XX3(59,75),   P_GER2_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK2}},\n+{\"pmxvf16ger2np\", PMMIRR|XX3(59,82),   P_GER2_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK2}},\n+{\"pmxvf32gernp\",  PMMIRR|XX3(59,90),   P_GER_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK}},\n+{\"pmxvi8ger4spp\", PMMIRR|XX3(59,99),   P_GER4_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK4}},\n+{\"pmxvi16ger2pp\", PMMIRR|XX3(59,107),  P_GER2_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK2}},\n+{\"pmxvbf16ger2np\",PMMIRR|XX3(59,114),  P_GER2_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK2}},\n+{\"pmxvf64gernp\",  PMMIRR|XX3(59,122),  P_GER64_MASK,\tPOWER10, 0,\t{ACC, XA6ap, XB6a, XMSK, YMSK2}},\n+{\"pmxvf16ger2pn\", PMMIRR|XX3(59,146),  P_GER2_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK2}},\n+{\"pmxvf32gerpn\",  PMMIRR|XX3(59,154),  P_GER_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK}},\n+{\"pmxvbf16ger2pn\",PMMIRR|XX3(59,178),  P_GER2_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK2}},\n+{\"pmxvf64gerpn\",  PMMIRR|XX3(59,186),  P_GER64_MASK,\tPOWER10, 0,\t{ACC, XA6ap, XB6a, XMSK, YMSK2}},\n+{\"pmxvf16ger2nn\", PMMIRR|XX3(59,210),  P_GER2_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK2}},\n+{\"pmxvf32gernn\",  PMMIRR|XX3(59,218),  P_GER_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK}},\n+{\"pmxvbf16ger2nn\",PMMIRR|XX3(59,242),  P_GER2_MASK,\tPOWER10, 0,\t{ACC, XA6a, XB6a, XMSK, YMSK, PMSK2}},\n+{\"pmxvf64gernn\",  PMMIRR|XX3(59,250),  P_GER64_MASK,\tPOWER10, 0,\t{ACC, XA6ap, XB6a, XMSK, YMSK2}},\n {\"pstq\",\t  P8LS|OP(60),\t       P_D_MASK,\tPOWER10, 0,\t{RSQ, D34, PRA0, PCREL}},\n {\"pstd\",\t  P8LS|OP(61),\t       P_D_MASK,\tPOWER10, 0,\t{RS, D34, PRA0, PCREL}},\n {\"pstxvp\",\t  P8LS|OP(62),\t       P_D_MASK,\tPOWER10, 0,\t{XTP, D34, PRA0, PCREL}},"
    }
  ]
}