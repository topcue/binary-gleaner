{
  "sha": "3e6aa7751ab86fdc2f2762ed8a5bce41b22be56e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2U2YWE3NzUxYWI4NmZkYzJmMjc2MmVkOGE1YmNlNDFiMjJiZTU2ZQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-01-05T23:31:55Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-01-06T11:23:51Z"
    },
    "message": "Basic error checking for mach-o\n\nFixes lots of places the fuzzers are going to find, and the one they\nalready hit.\n\n\t* mach-o.c (bfd_mach_o_read_dylinker): Don't read past end of\n\tcommand.  Check name offset is within command.\n\t(bfd_mach_o_read_dylib, bfd_mach_o_read_prebound_dylib),\n\t(bfd_mach_o_read_prebind_cksum, bfd_mach_o_read_twolevel_hints),\n\t(bfd_mach_o_read_fvmlib, bfd_mach_o_read_dysymtab),\n\t(bfd_mach_o_read_symtab, bfd_mach_o_read_uuid),\n\t(bfd_mach_o_read_linkedit, bfd_mach_o_read_str),\n\t(bfd_mach_o_read_dyld_info, bfd_mach_o_read_version_min),\n\t(bfd_mach_o_read_encryption_info, bfd_mach_o_read_source_version),\n\t(bfd_mach_o_read_encryption_info_64, bfd_mach_o_read_main),\n\t(bfd_mach_o_read_note, bfd_mach_o_read_build_version),\n\t(bfd_mach_o_read_segment): Similarly.\n\t(bfd_mach_o_read_thread): Properly bound check thread struct.\n\tDon't repeat checks on second loop.\n\t(bfd_mach_o_read_command): Fail on invalid command length.",
    "tree": {
      "sha": "1308ae262b43b4cf0a34b1d97e68aadea54ee9b9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1308ae262b43b4cf0a34b1d97e68aadea54ee9b9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3e6aa7751ab86fdc2f2762ed8a5bce41b22be56e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3e6aa7751ab86fdc2f2762ed8a5bce41b22be56e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3e6aa7751ab86fdc2f2762ed8a5bce41b22be56e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3e6aa7751ab86fdc2f2762ed8a5bce41b22be56e/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "660e62b1d9ca02e4ec7b18e8f0a0ff0707e540ac",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/660e62b1d9ca02e4ec7b18e8f0a0ff0707e540ac",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/660e62b1d9ca02e4ec7b18e8f0a0ff0707e540ac"
    }
  ],
  "stats": {
    "total": 101,
    "additions": 84,
    "deletions": 17
  },
  "files": [
    {
      "sha": "1d2b346060c9f3042e73576b786ec26b51e91baa",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3e6aa7751ab86fdc2f2762ed8a5bce41b22be56e/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3e6aa7751ab86fdc2f2762ed8a5bce41b22be56e/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=3e6aa7751ab86fdc2f2762ed8a5bce41b22be56e",
      "patch": "@@ -1,3 +1,21 @@\n+2020-01-06  Alan Modra  <amodra@gmail.com>\n+\n+\t* mach-o.c (bfd_mach_o_read_dylinker): Don't read past end of\n+\tcommand.  Check name offset is within command.\n+\t(bfd_mach_o_read_dylib, bfd_mach_o_read_prebound_dylib),\n+\t(bfd_mach_o_read_prebind_cksum, bfd_mach_o_read_twolevel_hints),\n+\t(bfd_mach_o_read_fvmlib, bfd_mach_o_read_dysymtab),\n+\t(bfd_mach_o_read_symtab, bfd_mach_o_read_uuid),\n+\t(bfd_mach_o_read_linkedit, bfd_mach_o_read_str),\n+\t(bfd_mach_o_read_dyld_info, bfd_mach_o_read_version_min),\n+\t(bfd_mach_o_read_encryption_info, bfd_mach_o_read_source_version),\n+\t(bfd_mach_o_read_encryption_info_64, bfd_mach_o_read_main),\n+\t(bfd_mach_o_read_note, bfd_mach_o_read_build_version),\n+\t(bfd_mach_o_read_segment): Similarly.\n+\t(bfd_mach_o_read_thread): Properly bound check thread struct.\n+\tDon't repeat checks on second loop.\n+\t(bfd_mach_o_read_command): Fail on invalid command length.\n+\n 2020-01-04  Alan Modra  <amodra@gmail.com>\n \n \t* format.c (bfd_check_format_matches): Add preserve_match."
    },
    {
      "sha": "c1ef64eff015383e321a583532643923ff4bdb7f",
      "filename": "bfd/mach-o.c",
      "status": "modified",
      "additions": 66,
      "deletions": 17,
      "changes": 83,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3e6aa7751ab86fdc2f2762ed8a5bce41b22be56e/bfd/mach-o.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3e6aa7751ab86fdc2f2762ed8a5bce41b22be56e/bfd/mach-o.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/mach-o.c?ref=3e6aa7751ab86fdc2f2762ed8a5bce41b22be56e",
      "patch": "@@ -3998,10 +3998,14 @@ bfd_mach_o_read_dylinker (bfd *abfd, bfd_mach_o_load_command *command)\n   unsigned int nameoff;\n   unsigned int namelen;\n \n+  if (command->len < sizeof (raw) + 8)\n+    return FALSE;\n   if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n     return FALSE;\n \n   nameoff = bfd_h_get_32 (abfd, raw.str);\n+  if (nameoff > command->len)\n+    return FALSE;\n \n   cmd->name_offset = nameoff;\n   namelen = command->len - nameoff;\n@@ -4024,6 +4028,8 @@ bfd_mach_o_read_dylib (bfd *abfd, bfd_mach_o_load_command *command)\n   unsigned int nameoff;\n   unsigned int namelen;\n \n+  if (command->len < sizeof (raw) + 8)\n+    return FALSE;\n   switch (command->type)\n     {\n     case BFD_MACH_O_LC_LOAD_DYLIB:\n@@ -4042,6 +4048,8 @@ bfd_mach_o_read_dylib (bfd *abfd, bfd_mach_o_load_command *command)\n     return FALSE;\n \n   nameoff = bfd_h_get_32 (abfd, raw.name);\n+  if (nameoff > command->len)\n+    return FALSE;\n   cmd->timestamp = bfd_h_get_32 (abfd, raw.timestamp);\n   cmd->current_version = bfd_h_get_32 (abfd, raw.current_version);\n   cmd->compatibility_version = bfd_h_get_32 (abfd, raw.compatibility_version);\n@@ -4068,6 +4076,8 @@ bfd_mach_o_read_prebound_dylib (bfd *abfd,\n   unsigned int str_len;\n   unsigned char *str;\n \n+  if (command->len < sizeof (raw) + 8)\n+    return FALSE;\n   if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n     return FALSE;\n \n@@ -4099,6 +4109,8 @@ bfd_mach_o_read_prebind_cksum (bfd *abfd,\n   bfd_mach_o_prebind_cksum_command *cmd = &command->command.prebind_cksum;\n   struct mach_o_prebind_cksum_command_external raw;\n \n+  if (command->len < sizeof (raw) + 8)\n+    return FALSE;\n   if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n     return FALSE;\n \n@@ -4113,6 +4125,8 @@ bfd_mach_o_read_twolevel_hints (bfd *abfd,\n   bfd_mach_o_twolevel_hints_command *cmd = &command->command.twolevel_hints;\n   struct mach_o_twolevel_hints_command_external raw;\n \n+  if (command->len < sizeof (raw) + 8)\n+    return FALSE;\n   if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n     return FALSE;\n \n@@ -4129,10 +4143,14 @@ bfd_mach_o_read_fvmlib (bfd *abfd, bfd_mach_o_load_command *command)\n   unsigned int nameoff;\n   unsigned int namelen;\n \n+  if (command->len < sizeof (raw) + 8)\n+    return FALSE;\n   if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n     return FALSE;\n \n   nameoff = bfd_h_get_32 (abfd, raw.name);\n+  if (nameoff > command->len)\n+    return FALSE;\n   fvm->minor_version = bfd_h_get_32 (abfd, raw.minor_version);\n   fvm->header_addr = bfd_h_get_32 (abfd, raw.header_addr);\n \n@@ -4155,31 +4173,35 @@ bfd_mach_o_read_thread (bfd *abfd, bfd_mach_o_load_command *command)\n   unsigned int offset;\n   unsigned int nflavours;\n   unsigned int i;\n+  struct mach_o_thread_command_external raw;\n \n   BFD_ASSERT ((command->type == BFD_MACH_O_LC_THREAD)\n \t      || (command->type == BFD_MACH_O_LC_UNIXTHREAD));\n \n   /* Count the number of threads.  */\n   offset = 8;\n   nflavours = 0;\n-  while (offset != command->len)\n+  while (offset + sizeof (raw) <= command->len)\n     {\n-      struct mach_o_thread_command_external raw;\n-\n-      if (offset >= command->len)\n-\treturn FALSE;\n+      unsigned int count;\n \n       if (bfd_seek (abfd, command->offset + offset, SEEK_SET) != 0\n \t  || bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n \treturn FALSE;\n \n-      offset += sizeof (raw) + bfd_h_get_32 (abfd, raw.count) * 4;\n+      count = bfd_h_get_32 (abfd, raw.count);\n+      if (count > (unsigned) -1 / 4\n+\t  || command->len - (offset + sizeof (raw)) < count * 4)\n+\treturn FALSE;\n+      offset += sizeof (raw) + count * 4;\n       nflavours++;\n     }\n+  if (nflavours == 0 || offset != command->len)\n+    return FALSE;\n \n   /* Allocate threads.  */\n-  cmd->flavours = bfd_alloc2\n-    (abfd, nflavours, sizeof (bfd_mach_o_thread_flavour));\n+  cmd->flavours = bfd_alloc2 (abfd, nflavours,\n+\t\t\t      sizeof (bfd_mach_o_thread_flavour));\n   if (cmd->flavours == NULL)\n     return FALSE;\n   cmd->nflavours = nflavours;\n@@ -4188,14 +4210,6 @@ bfd_mach_o_read_thread (bfd *abfd, bfd_mach_o_load_command *command)\n   nflavours = 0;\n   while (offset != command->len)\n     {\n-      struct mach_o_thread_command_external raw;\n-\n-      if (offset >= command->len)\n-\treturn FALSE;\n-\n-      if (nflavours >= cmd->nflavours)\n-\treturn FALSE;\n-\n       if (bfd_seek (abfd, command->offset + offset, SEEK_SET) != 0\n \t  || bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n \treturn FALSE;\n@@ -4271,6 +4285,8 @@ bfd_mach_o_read_dysymtab (bfd *abfd, bfd_mach_o_load_command *command)\n   {\n     struct mach_o_dysymtab_command_external raw;\n \n+    if (command->len < sizeof (raw) + 8)\n+      return FALSE;\n     if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n       return FALSE;\n \n@@ -4447,6 +4463,8 @@ bfd_mach_o_read_symtab (bfd *abfd, bfd_mach_o_load_command *command)\n \n   BFD_ASSERT (command->type == BFD_MACH_O_LC_SYMTAB);\n \n+  if (command->len < sizeof (raw) + 8)\n+    return FALSE;\n   if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n     return FALSE;\n \n@@ -4473,6 +4491,8 @@ bfd_mach_o_read_uuid (bfd *abfd, bfd_mach_o_load_command *command)\n \n   BFD_ASSERT (command->type == BFD_MACH_O_LC_UUID);\n \n+  if (command->len < 16 + 8)\n+    return FALSE;\n   if (bfd_bread (cmd->uuid, 16, abfd) != 16)\n     return FALSE;\n \n@@ -4485,6 +4505,8 @@ bfd_mach_o_read_linkedit (bfd *abfd, bfd_mach_o_load_command *command)\n   bfd_mach_o_linkedit_command *cmd = &command->command.linkedit;\n   struct mach_o_linkedit_data_command_external raw;\n \n+  if (command->len < sizeof (raw) + 8)\n+    return FALSE;\n   if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n     return FALSE;\n \n@@ -4500,10 +4522,15 @@ bfd_mach_o_read_str (bfd *abfd, bfd_mach_o_load_command *command)\n   struct mach_o_str_command_external raw;\n   unsigned long off;\n \n+  if (command->len < sizeof (raw) + 8)\n+    return FALSE;\n   if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n     return FALSE;\n \n   off = bfd_get_32 (abfd, raw.str);\n+  if (off > command->len)\n+    return FALSE;\n+\n   cmd->stroff = command->offset + off;\n   cmd->str_len = command->len - off;\n   cmd->str = bfd_alloc (abfd, cmd->str_len);\n@@ -4586,6 +4613,8 @@ bfd_mach_o_read_dyld_info (bfd *abfd, bfd_mach_o_load_command *command)\n   bfd_mach_o_dyld_info_command *cmd = &command->command.dyld_info;\n   struct mach_o_dyld_info_command_external raw;\n \n+  if (command->len < sizeof (raw) + 8)\n+    return FALSE;\n   if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n     return FALSE;\n \n@@ -4613,6 +4642,8 @@ bfd_mach_o_read_version_min (bfd *abfd, bfd_mach_o_load_command *command)\n   bfd_mach_o_version_min_command *cmd = &command->command.version_min;\n   struct mach_o_version_min_command_external raw;\n \n+  if (command->len < sizeof (raw) + 8)\n+    return FALSE;\n   if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n     return FALSE;\n \n@@ -4627,6 +4658,8 @@ bfd_mach_o_read_encryption_info (bfd *abfd, bfd_mach_o_load_command *command)\n   bfd_mach_o_encryption_info_command *cmd = &command->command.encryption_info;\n   struct mach_o_encryption_info_command_external raw;\n \n+  if (command->len < sizeof (raw) + 8)\n+    return FALSE;\n   if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n     return FALSE;\n \n@@ -4642,6 +4675,8 @@ bfd_mach_o_read_encryption_info_64 (bfd *abfd, bfd_mach_o_load_command *command)\n   bfd_mach_o_encryption_info_command *cmd = &command->command.encryption_info;\n   struct mach_o_encryption_info_64_command_external raw;\n \n+  if (command->len < sizeof (raw) + 8)\n+    return FALSE;\n   if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n     return FALSE;\n \n@@ -4657,6 +4692,8 @@ bfd_mach_o_read_main (bfd *abfd, bfd_mach_o_load_command *command)\n   bfd_mach_o_main_command *cmd = &command->command.main;\n   struct mach_o_entry_point_command_external raw;\n \n+  if (command->len < sizeof (raw) + 8)\n+    return FALSE;\n   if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n     return FALSE;\n \n@@ -4672,6 +4709,8 @@ bfd_mach_o_read_source_version (bfd *abfd, bfd_mach_o_load_command *command)\n   struct mach_o_source_version_command_external raw;\n   bfd_uint64_t ver;\n \n+  if (command->len < sizeof (raw) + 8)\n+    return FALSE;\n   if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n     return FALSE;\n \n@@ -4697,6 +4736,8 @@ bfd_mach_o_read_note (bfd *abfd, bfd_mach_o_load_command *command)\n   bfd_mach_o_note_command *cmd = &command->command.note;\n   struct mach_o_note_command_external raw;\n \n+  if (command->len < sizeof (raw) + 8)\n+    return FALSE;\n   if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n     return FALSE;\n \n@@ -4712,6 +4753,8 @@ bfd_mach_o_read_build_version (bfd *abfd, bfd_mach_o_load_command *command)\n   bfd_mach_o_build_version_command *cmd = &command->command.build_version;\n   struct mach_o_build_version_command_external raw;\n \n+  if (command->len < sizeof (raw) + 8)\n+    return FALSE;\n   if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n     return FALSE;\n \n@@ -4736,6 +4779,8 @@ bfd_mach_o_read_segment (bfd *abfd,\n \n       BFD_ASSERT (command->type == BFD_MACH_O_LC_SEGMENT_64);\n \n+      if (command->len < sizeof (raw) + 8)\n+\treturn FALSE;\n       if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n \treturn FALSE;\n \n@@ -4757,6 +4802,8 @@ bfd_mach_o_read_segment (bfd *abfd,\n \n       BFD_ASSERT (command->type == BFD_MACH_O_LC_SEGMENT);\n \n+      if (command->len < sizeof (raw) + 8)\n+\treturn FALSE;\n       if (bfd_bread (&raw, sizeof (raw), abfd) != sizeof (raw))\n \treturn FALSE;\n \n@@ -4815,9 +4862,11 @@ bfd_mach_o_read_command (bfd *abfd, bfd_mach_o_load_command *command)\n     return FALSE;\n \n   cmd = bfd_h_get_32 (abfd, raw.cmd);\n-  command->type =  cmd & ~BFD_MACH_O_LC_REQ_DYLD;\n+  command->type = cmd & ~BFD_MACH_O_LC_REQ_DYLD;\n   command->type_required = cmd & BFD_MACH_O_LC_REQ_DYLD ? TRUE : FALSE;\n   command->len = bfd_h_get_32 (abfd, raw.cmdsize);\n+  if (command->len < 8 || command->len % 4 != 0)\n+    return FALSE;\n \n   switch (command->type)\n     {"
    }
  ]
}