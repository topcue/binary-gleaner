{
  "sha": "912697efc15768894c13a9370a2fcaa950f24558",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTEyNjk3ZWZjMTU3Njg4OTRjMTNhOTM3MGEyZmNhYTk1MGYyNDU1OA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-08-05T05:02:56Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-09-17T22:50:11Z"
    },
    "message": "[GOLD] Got_offset_list: addend field\n\nThis is the first in a series of patches aimed at supporting GOT\nentries against symbol plus addend generally for PowerPC64 rather than\njust section symbol plus addend as gold has currently.\n\nThis patch adds an addend field to Got_offset_list, so that both local\nand global symbols can have GOT entries with addend.\n\n\tPR 28192\n\t* object.h (Got_offset_list): Add addend_ field, init in both\n\tconstructors.  Adjust all accessors to suit.\n\t(Sized_relobj::do_local_has_got_offset): Adjust to suit.\n\t(Sized_relobj::do_local_got_offset): Likewise.\n\t(Sized_relobj::do_set_local_got_offset): Likewise.\n\t* symtab.h (Symbol::has_got_offset): Add optional addend param.\n\t(Symbol::got_offset, Symbol::set_got_offset): Likewise.\n\t* incremental.cc (Local_got_offset_visitor::visit): Add unused\n\tuint64_t parameter with FIXME.\n\t(Global_got_offset_visitor::visit): Add unused uint64_t parameter.",
    "tree": {
      "sha": "5f1c97e1870cee187d20fbdbca17d605e18c12e5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5f1c97e1870cee187d20fbdbca17d605e18c12e5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/912697efc15768894c13a9370a2fcaa950f24558",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/912697efc15768894c13a9370a2fcaa950f24558",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/912697efc15768894c13a9370a2fcaa950f24558",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/912697efc15768894c13a9370a2fcaa950f24558/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6bc2c6ee80c32462a120927b0a3d1a828769f045",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6bc2c6ee80c32462a120927b0a3d1a828769f045",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6bc2c6ee80c32462a120927b0a3d1a828769f045"
    }
  ],
  "stats": {
    "total": 56,
    "additions": 34,
    "deletions": 22
  },
  "files": [
    {
      "sha": "52941985e6f1d13b977a58af25b9823bee24af9c",
      "filename": "gold/incremental.cc",
      "status": "modified",
      "additions": 8,
      "deletions": 2,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/912697efc15768894c13a9370a2fcaa950f24558/gold/incremental.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/912697efc15768894c13a9370a2fcaa950f24558/gold/incremental.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/incremental.cc?ref=912697efc15768894c13a9370a2fcaa950f24558",
      "patch": "@@ -1848,7 +1848,7 @@ class Local_got_offset_visitor : public Got_offset_list::Visitor\n   { }\n \n   void\n-  visit(unsigned int got_type, unsigned int got_offset)\n+  visit(unsigned int got_type, unsigned int got_offset, uint64_t)\n   {\n     unsigned int got_index = got_offset / this->info_.got_entry_size;\n     gold_assert(got_index < this->info_.got_count);\n@@ -1860,6 +1860,12 @@ class Local_got_offset_visitor : public Got_offset_list::Visitor\n     unsigned char* pov = this->info_.got_desc_p + got_index * 8;\n     elfcpp::Swap<32, big_endian>::writeval(pov, this->info_.sym_index);\n     elfcpp::Swap<32, big_endian>::writeval(pov + 4, this->info_.input_index);\n+    // FIXME: the uint64_t addend should be written here if powerpc64\n+    // sym+addend got entries are to be supported, with similar changes\n+    // to Global_got_offset_visitor and support to read them back in\n+    // do_process_got_plt.\n+    // FIXME: don't we need this for section symbol plus addend anyway?\n+    // (See 2015-12-03 commit 7ef8ae7c5f35)\n   }\n \n  private:\n@@ -1879,7 +1885,7 @@ class Global_got_offset_visitor : public Got_offset_list::Visitor\n   { }\n \n   void\n-  visit(unsigned int got_type, unsigned int got_offset)\n+  visit(unsigned int got_type, unsigned int got_offset, uint64_t)\n   {\n     unsigned int got_index = got_offset / this->info_.got_entry_size;\n     gold_assert(got_index < this->info_.got_count);"
    },
    {
      "sha": "66e565c1b4ca329b37e3fe252108ad0a474ad41e",
      "filename": "gold/object.h",
      "status": "modified",
      "additions": 19,
      "deletions": 14,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/912697efc15768894c13a9370a2fcaa950f24558/gold/object.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/912697efc15768894c13a9370a2fcaa950f24558/gold/object.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/object.h?ref=912697efc15768894c13a9370a2fcaa950f24558",
      "patch": "@@ -214,11 +214,13 @@ class Got_offset_list\n {\n  public:\n   Got_offset_list()\n-    : got_type_(-1U), got_offset_(0), got_next_(NULL)\n+    : got_type_(-1U), got_offset_(0), addend_(0), got_next_(NULL)\n   { }\n \n-  Got_offset_list(unsigned int got_type, unsigned int got_offset)\n-    : got_type_(got_type), got_offset_(got_offset), got_next_(NULL)\n+  Got_offset_list(unsigned int got_type, unsigned int got_offset,\n+\t\t  uint64_t addend)\n+    : got_type_(got_type), got_offset_(got_offset), addend_(addend),\n+      got_next_(NULL)\n   { }\n \n   ~Got_offset_list()\n@@ -236,41 +238,43 @@ class Got_offset_list\n   {\n     this->got_type_ = -1U;\n     this->got_offset_ = 0;\n+    this->addend_ = 0;\n     this->got_next_ = NULL;\n   }\n \n   // Set the offset for the GOT entry of type GOT_TYPE.\n   void\n-  set_offset(unsigned int got_type, unsigned int got_offset)\n+  set_offset(unsigned int got_type, unsigned int got_offset, uint64_t addend)\n   {\n     if (this->got_type_ == -1U)\n       {\n         this->got_type_ = got_type;\n         this->got_offset_ = got_offset;\n+        this->addend_ = addend;\n       }\n     else\n       {\n         for (Got_offset_list* g = this; g != NULL; g = g->got_next_)\n           {\n-            if (g->got_type_ == got_type)\n+            if (g->got_type_ == got_type && g->addend_ == addend)\n               {\n                 g->got_offset_ = got_offset;\n                 return;\n               }\n           }\n-        Got_offset_list* g = new Got_offset_list(got_type, got_offset);\n+        Got_offset_list* g = new Got_offset_list(got_type, got_offset, addend);\n         g->got_next_ = this->got_next_;\n         this->got_next_ = g;\n       }\n   }\n \n   // Return the offset for a GOT entry of type GOT_TYPE.\n   unsigned int\n-  get_offset(unsigned int got_type) const\n+  get_offset(unsigned int got_type, uint64_t addend) const\n   {\n     for (const Got_offset_list* g = this; g != NULL; g = g->got_next_)\n       {\n-        if (g->got_type_ == got_type)\n+        if (g->got_type_ == got_type && g->addend_ == addend)\n           return g->got_offset_;\n       }\n     return -1U;\n@@ -297,7 +301,7 @@ class Got_offset_list\n     { }\n \n     virtual void\n-    visit(unsigned int, unsigned int) = 0;\n+    visit(unsigned int, unsigned int, uint64_t) = 0;\n   };\n \n   // Loop over all GOT offset entries, calling a visitor class V for each.\n@@ -307,12 +311,13 @@ class Got_offset_list\n     if (this->got_type_ == -1U)\n       return;\n     for (const Got_offset_list* g = this; g != NULL; g = g->got_next_)\n-      v->visit(g->got_type_, g->got_offset_);\n+      v->visit(g->got_type_, g->got_offset_, g->addend_);\n   }\n \n  private:\n   unsigned int got_type_;\n   unsigned int got_offset_;\n+  uint64_t addend_;\n   Got_offset_list* got_next_;\n };\n \n@@ -2134,7 +2139,7 @@ class Sized_relobj : public Relobj\n     Local_got_offsets::const_iterator p =\n         this->local_got_offsets_.find(key);\n     return (p != this->local_got_offsets_.end()\n-            && p->second->get_offset(got_type) != -1U);\n+            && p->second->get_offset(got_type, addend) != -1U);\n   }\n \n   // Return the GOT offset of type GOT_TYPE of the local symbol\n@@ -2147,7 +2152,7 @@ class Sized_relobj : public Relobj\n     Local_got_offsets::const_iterator p =\n         this->local_got_offsets_.find(key);\n     gold_assert(p != this->local_got_offsets_.end());\n-    unsigned int off = p->second->get_offset(got_type);\n+    unsigned int off = p->second->get_offset(got_type, addend);\n     gold_assert(off != -1U);\n     return off;\n   }\n@@ -2162,10 +2167,10 @@ class Sized_relobj : public Relobj\n     Local_got_offsets::const_iterator p =\n         this->local_got_offsets_.find(key);\n     if (p != this->local_got_offsets_.end())\n-      p->second->set_offset(got_type, got_offset);\n+      p->second->set_offset(got_type, got_offset, addend);\n     else\n       {\n-        Got_offset_list* g = new Got_offset_list(got_type, got_offset);\n+\tGot_offset_list* g = new Got_offset_list(got_type, got_offset, addend);\n         std::pair<Local_got_offsets::iterator, bool> ins =\n             this->local_got_offsets_.insert(std::make_pair(key, g));\n         gold_assert(ins.second);"
    },
    {
      "sha": "a60cfb9ca197cf32f1e99d59a9a1a9e355db6f87",
      "filename": "gold/symtab.h",
      "status": "modified",
      "additions": 7,
      "deletions": 6,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/912697efc15768894c13a9370a2fcaa950f24558/gold/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/912697efc15768894c13a9370a2fcaa950f24558/gold/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gold/symtab.h?ref=912697efc15768894c13a9370a2fcaa950f24558",
      "patch": "@@ -428,22 +428,23 @@ class Symbol\n   // Return whether this symbol has an entry in the GOT section.\n   // For a TLS symbol, this GOT entry will hold its tp-relative offset.\n   bool\n-  has_got_offset(unsigned int got_type) const\n-  { return this->got_offsets_.get_offset(got_type) != -1U; }\n+  has_got_offset(unsigned int got_type, uint64_t addend = 0) const\n+  { return this->got_offsets_.get_offset(got_type, addend) != -1U; }\n \n   // Return the offset into the GOT section of this symbol.\n   unsigned int\n-  got_offset(unsigned int got_type) const\n+  got_offset(unsigned int got_type, uint64_t addend = 0) const\n   {\n-    unsigned int got_offset = this->got_offsets_.get_offset(got_type);\n+    unsigned int got_offset = this->got_offsets_.get_offset(got_type, addend);\n     gold_assert(got_offset != -1U);\n     return got_offset;\n   }\n \n   // Set the GOT offset of this symbol.\n   void\n-  set_got_offset(unsigned int got_type, unsigned int got_offset)\n-  { this->got_offsets_.set_offset(got_type, got_offset); }\n+  set_got_offset(unsigned int got_type, unsigned int got_offset,\n+\t\t uint64_t addend = 0)\n+  { this->got_offsets_.set_offset(got_type, got_offset, addend); }\n \n   // Return the GOT offset list.\n   const Got_offset_list*"
    }
  ]
}