{
  "sha": "012fc90932dae0347c03244807b975a57a8448c0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDEyZmM5MDkzMmRhZTAzNDdjMDMyNDQ4MDdiOTc1YTU3YTg0NDhjMA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-11-21T00:04:22Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-11-22T22:18:17Z"
    },
    "message": "Restore parameter names in observable.h\n\nAges ago, when we switched observables to be templates, Joel asked me\nto restore the parameter names that were used in the old\nobserver.texi.\n\nI've finally done this, putting the names into comments.  I also\nupdated the comments in this file to use the GNU metasyntactic\nvariable convention as well.\n\ngdb/ChangeLog\n2019-11-22  Tom Tromey  <tom@tromey.com>\n\n\t* observable.h: Update comments.\n\nChange-Id: Id71bea7a7fcaa8f5d4491f33aa8861c56ba9c3f0",
    "tree": {
      "sha": "22b3c3f1290697512504d040272566051c94835c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/22b3c3f1290697512504d040272566051c94835c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/012fc90932dae0347c03244807b975a57a8448c0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/012fc90932dae0347c03244807b975a57a8448c0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/012fc90932dae0347c03244807b975a57a8448c0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/012fc90932dae0347c03244807b975a57a8448c0/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c83d8d32c9b3379a39c434fcaa9f304b6e4432ca",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c83d8d32c9b3379a39c434fcaa9f304b6e4432ca",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c83d8d32c9b3379a39c434fcaa9f304b6e4432ca"
    }
  ],
  "stats": {
    "total": 173,
    "additions": 93,
    "deletions": 80
  },
  "files": [
    {
      "sha": "65da2ffe3c6288b5c35bb7a4356e6505b3934429",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/012fc90932dae0347c03244807b975a57a8448c0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/012fc90932dae0347c03244807b975a57a8448c0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=012fc90932dae0347c03244807b975a57a8448c0",
      "patch": "@@ -1,3 +1,7 @@\n+2019-11-22  Tom Tromey  <tom@tromey.com>\n+\n+\t* observable.h: Update comments.\n+\n 2019-11-22  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-tasks.c (ada_task_is_alive): Make parameter const."
    },
    {
      "sha": "9ce00993d72fb3e8c9e1f4b666e0d9771fc97ba9",
      "filename": "gdb/observable.h",
      "status": "modified",
      "additions": 89,
      "deletions": 80,
      "changes": 169,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/012fc90932dae0347c03244807b975a57a8448c0/gdb/observable.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/012fc90932dae0347c03244807b975a57a8448c0/gdb/observable.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/observable.h?ref=012fc90932dae0347c03244807b975a57a8448c0",
      "patch": "@@ -35,9 +35,9 @@ namespace gdb\n namespace observers\n {\n \n-/* The inferior has stopped for real.  The bs argument describes the\n+/* The inferior has stopped for real.  The BS argument describes the\n    breakpoints were are stopped at, if any.  Second argument\n-   print_frame non-zero means display the location where the\n+   PRINT_FRAME non-zero means display the location where the\n    inferior has stopped.\n \n    gdb notifies all normal_stop observers when the inferior execution\n@@ -49,19 +49,19 @@ namespace observers\n    condition that is not met.  If the breakpoint has any associated\n    commands list, the commands are executed after the notification is\n    emitted.  */\n-extern observable<struct bpstats *, int> normal_stop;\n+extern observable<struct bpstats */* bs */, int /* print_frame */> normal_stop;\n \n /* The inferior was stopped by a signal.  */\n-extern observable<enum gdb_signal> signal_received;\n+extern observable<enum gdb_signal /* siggnal */> signal_received;\n \n /* We are done with a step/next/si/ni command.  */\n extern observable<> end_stepping_range;\n \n /* The inferior was terminated by a signal.  */\n-extern observable<enum gdb_signal> signal_exited;\n+extern observable<enum gdb_signal /* siggnal */> signal_exited;\n \n /* The inferior program is finished.  */\n-extern observable<int> exited;\n+extern observable<int /* exitstatus */> exited;\n \n /* Reverse execution: target ran out of history info.  */\n extern observable<> no_history;\n@@ -73,7 +73,7 @@ extern observable<> sync_execution_done;\n extern observable<> command_error;\n \n /* The target's register contents have changed.  */\n-extern observable<struct target_ops *> target_changed;\n+extern observable<struct target_ops */* target */> target_changed;\n \n /* The executable being debugged by GDB has changed: The user\n    decided to debug a different program, or the program he was\n@@ -86,147 +86,156 @@ extern observable<> executable_changed;\n    instruction.  For 'attach' and 'core', gdb calls this observer\n    immediately after connecting to the inferior, and before any\n    information on the inferior has been printed.  */\n-extern observable<struct target_ops *, int> inferior_created;\n+extern observable<struct target_ops */* target */,\n+\t\t  int /* from_tty */> inferior_created;\n \n /* The status of process record for inferior inferior in gdb has\n-   changed.  The process record is started if started is true, and\n-   the process record is stopped if started is false.\n+   changed.  The process record is started if STARTED is true, and\n+   the process record is stopped if STARTED is false.\n \n-   When started is true, method indicates the short name of the\n+   When STARTED is true, METHOD indicates the short name of the\n    method used for recording.  If the method supports multiple\n-   formats, format indicates which one is being used, otherwise it\n-   is NULL.  When started is false, they are both NULL.  */\n-extern observable<struct inferior *, int, const char *, const char *>\n+   formats, FORMAT indicates which one is being used, otherwise it\n+   is NULL.  When STARTED is false, they are both NULL.  */\n+extern observable<struct inferior */* inferior */, int /* started */,\n+\t\t  const char */* method */, const char */* format */>\n     record_changed;\n \n-/* The shared library specified by solib has been loaded.  Note that\n+/* The shared library specified by SOLIB has been loaded.  Note that\n    when gdb calls this observer, the library's symbols probably\n    haven't been loaded yet.  */\n-extern observable<struct so_list *> solib_loaded;\n+extern observable<struct so_list */* solib */> solib_loaded;\n \n-/* The shared library specified by solib has been unloaded.  Note\n+/* The shared library specified by SOLIB has been unloaded.  Note\n    that when gdb calls this observer, the library's symbols have not\n    been unloaded yet, and thus are still available.  */\n-extern observable<struct so_list *> solib_unloaded;\n+extern observable<struct so_list */* solib */> solib_unloaded;\n \n-/* The symbol file specified by objfile has been loaded.  Called\n-   with objfile equal to NULL to indicate previously loaded symbol\n+/* The symbol file specified by OBJFILE has been loaded.  Called\n+   with OBJFILE equal to NULL to indicate previously loaded symbol\n    table data has now been invalidated.  */\n-extern observable<struct objfile *> new_objfile;\n+extern observable<struct objfile */* objfile */> new_objfile;\n \n-/* The object file specified by objfile is about to be freed.  */\n-extern observable<struct objfile *> free_objfile;\n+/* The object file specified by OBJFILE is about to be freed.  */\n+extern observable<struct objfile */* objfile */> free_objfile;\n \n-/* The thread specified by t has been created.  */\n-extern observable<struct thread_info *> new_thread;\n+/* The thread specified by T has been created.  */\n+extern observable<struct thread_info */* t */> new_thread;\n \n-/* The thread specified by t has exited.  The silent argument\n+/* The thread specified by T has exited.  The SILENT argument\n    indicates that gdb is removing the thread from its tables without\n    wanting to notify the user about it.  */\n-extern observable<struct thread_info *, int> thread_exit;\n+extern observable<struct thread_info */* t */, int /* silent */> thread_exit;\n \n-/* An explicit stop request was issued to ptid.  If ptid equals\n+/* An explicit stop request was issued to PTID.  If PTID equals\n    minus_one_ptid, the request applied to all threads.  If\n-   ptid_is_pid(ptid) returns true, the request applied to all\n-   threads of the process pointed at by ptid.  Otherwise, the\n-   request applied to the single thread pointed at by ptid.  */\n-extern observable<ptid_t> thread_stop_requested;\n+   ptid_is_pid(PTID) returns true, the request applied to all\n+   threads of the process pointed at by PTID.  Otherwise, the\n+   request applied to the single thread pointed at by PTID.  */\n+extern observable<ptid_t /* ptid */> thread_stop_requested;\n \n-/* The target was resumed.  The ptid parameter specifies which\n+/* The target was resumed.  The PTID parameter specifies which\n    thread was resume, and may be RESUME_ALL if all threads are\n    resumed.  */\n-extern observable<ptid_t> target_resumed;\n+extern observable<ptid_t /* ptid */> target_resumed;\n \n /* The target is about to be proceeded.  */\n extern observable<> about_to_proceed;\n \n-/* A new breakpoint b has been created.  */\n-extern observable<struct breakpoint *> breakpoint_created;\n+/* A new breakpoint B has been created.  */\n+extern observable<struct breakpoint */* b */> breakpoint_created;\n \n-/* A breakpoint has been destroyed.  The argument b is the\n+/* A breakpoint has been destroyed.  The argument B is the\n    pointer to the destroyed breakpoint.  */\n-extern observable<struct breakpoint *> breakpoint_deleted;\n+extern observable<struct breakpoint */* b */> breakpoint_deleted;\n \n-/* A breakpoint has been modified in some way.  The argument b\n+/* A breakpoint has been modified in some way.  The argument B\n    is the modified breakpoint.  */\n-extern observable<struct breakpoint *> breakpoint_modified;\n+extern observable<struct breakpoint */* b */> breakpoint_modified;\n \n-/* The trace frame is changed to tfnum (e.g., by using the 'tfind'\n-   command).  If tfnum is negative, it means gdb resumes live\n+/* The trace frame is changed to TFNUM (e.g., by using the 'tfind'\n+   command).  If TFNUM is negative, it means gdb resumes live\n    debugging.  The number of the tracepoint associated with this\n-   traceframe is tpnum.  */\n-extern observable<int, int> traceframe_changed;\n+   traceframe is TPNUM.  */\n+extern observable<int /* tfnum */, int /* tpnum */> traceframe_changed;\n \n-/* The current architecture has changed.  The argument newarch is a\n+/* The current architecture has changed.  The argument NEWARCH is a\n    pointer to the new architecture.  */\n-extern observable<struct gdbarch *> architecture_changed;\n+extern observable<struct gdbarch */* newarch */> architecture_changed;\n \n-/* The thread's ptid has changed.  The old_ptid parameter specifies\n-   the old value, and new_ptid specifies the new value.  */\n-extern observable<ptid_t, ptid_t> thread_ptid_changed;\n+/* The thread's ptid has changed.  The OLD_PTID parameter specifies\n+   the old value, and NEW_PTID specifies the new value.  */\n+extern observable<ptid_t /* old_ptid */, ptid_t /* new_ptid */>\n+    thread_ptid_changed;\n \n-/* The inferior inf has been added to the list of inferiors.  At\n+/* The inferior INF has been added to the list of inferiors.  At\n    this point, it might not be associated with any process.  */\n-extern observable<struct inferior *> inferior_added;\n+extern observable<struct inferior */* inf */> inferior_added;\n \n-/* The inferior identified by inf has been attached to a\n+/* The inferior identified by INF has been attached to a\n    process.  */\n-extern observable<struct inferior *> inferior_appeared;\n+extern observable<struct inferior */* inf */> inferior_appeared;\n \n-/* Either the inferior associated with inf has been detached from\n+/* Either the inferior associated with INF has been detached from\n    the process, or the process has exited.  */\n-extern observable<struct inferior *> inferior_exit;\n+extern observable<struct inferior */* inf */> inferior_exit;\n \n-/* The inferior inf has been removed from the list of inferiors.\n-   This method is called immediately before freeing inf.  */\n-extern observable<struct inferior *> inferior_removed;\n+/* The inferior INF has been removed from the list of inferiors.\n+   This method is called immediately before freeing INF.  */\n+extern observable<struct inferior */* inf */> inferior_removed;\n \n-/* Bytes from data to data + len have been written to the inferior\n-   at addr.  */\n-extern observable<struct inferior *, CORE_ADDR, ssize_t, const bfd_byte *>\n+/* Bytes from DATA to DATA + LEN have been written to the inferior\n+   at ADDR.  */\n+extern observable<struct inferior */* inferior */, CORE_ADDR /* addr */,\n+\t\t  ssize_t /* len */, const bfd_byte */* data */>\n     memory_changed;\n \n-/* Called before a top-level prompt is displayed.  current_prompt is\n+/* Called before a top-level prompt is displayed.  CURRENT_PROMPT is\n    the current top-level prompt.  */\n-extern observable<const char *> before_prompt;\n+extern observable<const char */* current_prompt */> before_prompt;\n \n /* Variable gdb_datadir has been set.  The value may not necessarily\n    change.  */\n extern observable<> gdb_datadir_changed;\n \n /* The parameter of some 'set' commands in console are changed.\n-   This method is called after a command 'set param value'.  param\n-   is the parameter of 'set' command, and value is the value of\n+   This method is called after a command 'set param value'.  PARAM\n+   is the parameter of 'set' command, and VALUE is the value of\n    changed parameter.  */\n-extern observable<const char *, const char *> command_param_changed;\n+extern observable<const char */* param */, const char */* value */>\n+    command_param_changed;\n \n-/* The new trace state variable tsv is created.  */\n-extern observable<const struct trace_state_variable *> tsv_created;\n+/* The new trace state variable TSV is created.  */\n+extern observable<const struct trace_state_variable */* tsv */> tsv_created;\n \n-/* The trace state variable tsv is deleted.  If tsv is NULL, all\n+/* The trace state variable TSV is deleted.  If TSV is NULL, all\n    trace state variables are deleted.  */\n-extern observable<const struct trace_state_variable *> tsv_deleted;\n+extern observable<const struct trace_state_variable */* tsv */> tsv_deleted;\n \n-/* The trace state value tsv is modified.  */\n-extern observable<const struct trace_state_variable *> tsv_modified;\n+/* The trace state value TSV is modified.  */\n+extern observable<const struct trace_state_variable */* tsv */> tsv_modified;\n \n-/* An inferior function at address is about to be called in thread\n-   thread.  */\n-extern observable<ptid_t, CORE_ADDR> inferior_call_pre;\n+/* An inferior function at ADDRESS is about to be called in thread\n+   THREAD.  */\n+extern observable<ptid_t /* thread */, CORE_ADDR /* address */>\n+    inferior_call_pre;\n \n-/* The inferior function at address has just been called.  This\n+/* The inferior function at ADDRESS has just been called.  This\n    observer is called even if the inferior exits during the call.\n-   thread is the thread in which the function was called, which may\n+   THREAD is the thread in which the function was called, which may\n    be different from the current thread.  */\n-extern observable<ptid_t, CORE_ADDR> inferior_call_post;\n+extern observable<ptid_t /* thread */, CORE_ADDR /* address */>\n+    inferior_call_post;\n \n /* A register in the inferior has been modified by the gdb user.  */\n-extern observable<struct frame_info *, int> register_changed;\n+extern observable<struct frame_info */* frame */, int /* regnum */>\n+    register_changed;\n \n /* The user-selected inferior, thread and/or frame has changed.  The\n    user_select_what flag specifies if the inferior, thread and/or\n    frame has changed.  */\n-extern observable<user_selected_what> user_selected_context_changed;\n+extern observable<user_selected_what /* selection */>\n+    user_selected_context_changed;\n \n /* This is notified when the source styling setting has changed and\n    should be reconsulted.  */"
    }
  ]
}