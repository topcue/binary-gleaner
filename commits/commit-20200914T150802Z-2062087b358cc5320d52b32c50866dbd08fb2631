{
  "sha": "2062087b358cc5320d52b32c50866dbd08fb2631",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjA2MjA4N2IzNThjYzUzMjBkNTJiMzJjNTA4NjZkYmQwOGZiMjYzMQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:08:02Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:08:02Z"
    },
    "message": "gdb: add type::is_vector / type::set_is_vector\n\nAdd the `is_vector` and `set_is_vector` methods on `struct type`, in\norder to remove the `TYPE_VECTOR` macro.  In this patch, the macro is\nchanged to use the getter, so all the call sites of the macro that are\nused as a setter are changed to use the setter method directly.  The\nnext patch will remove the macro completely.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <is_vector, set_is_vector>: New methods.\n\t(TYPE_VECTOR): Use type::is_vector, change all write call sites to\n\tuse type::set_is_vector.\n\nChange-Id: I415e8d169f058662e0750329bfa4017bea3ca0cb",
    "tree": {
      "sha": "bbf2de8f0df655ce90cbc94e2edbab7b0082919e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bbf2de8f0df655ce90cbc94e2edbab7b0082919e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2062087b358cc5320d52b32c50866dbd08fb2631",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2062087b358cc5320d52b32c50866dbd08fb2631",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2062087b358cc5320d52b32c50866dbd08fb2631",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2062087b358cc5320d52b32c50866dbd08fb2631/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a409645d13f6cddef4827cf7240c01ec3e09559c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a409645d13f6cddef4827cf7240c01ec3e09559c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a409645d13f6cddef4827cf7240c01ec3e09559c"
    }
  ],
  "stats": {
    "total": 42,
    "additions": 29,
    "deletions": 13
  },
  "files": [
    {
      "sha": "b28de5b6ad01f24684e414abc483cc077d10dc6a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2062087b358cc5320d52b32c50866dbd08fb2631/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2062087b358cc5320d52b32c50866dbd08fb2631/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2062087b358cc5320d52b32c50866dbd08fb2631",
      "patch": "@@ -1,3 +1,9 @@\n+2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct type) <is_vector, set_is_vector>: New methods.\n+\t(TYPE_VECTOR): Use type::is_vector, change all write call sites to\n+\tuse type::set_is_vector.\n+\n 2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (TYPE_VARARGS): Remove, replace all"
    },
    {
      "sha": "ecf65f24a19578373a482e80ad1ccce812781381",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2062087b358cc5320d52b32c50866dbd08fb2631/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2062087b358cc5320d52b32c50866dbd08fb2631/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=2062087b358cc5320d52b32c50866dbd08fb2631",
      "patch": "@@ -4030,7 +4030,7 @@ arm_neon_double_type (struct gdbarch *gdbarch)\n       elem = builtin_type (gdbarch)->builtin_double;\n       append_composite_type_field (t, \"f64\", elem);\n \n-      TYPE_VECTOR (t) = 1;\n+      t->set_is_vector (true);\n       t->set_name (\"neon_d\");\n       tdep->neon_double_type = t;\n     }\n@@ -4069,7 +4069,7 @@ arm_neon_quad_type (struct gdbarch *gdbarch)\n       elem = builtin_type (gdbarch)->builtin_double;\n       append_composite_type_field (t, \"f64\", init_vector_type (elem, 2));\n \n-      TYPE_VECTOR (t) = 1;\n+      t->set_is_vector (true);\n       t->set_name (\"neon_q\");\n       tdep->neon_quad_type = t;\n     }"
    },
    {
      "sha": "c9245fc4ac7763a16cce05789aed65664fd652a4",
      "filename": "gdb/csky-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2062087b358cc5320d52b32c50866dbd08fb2631/gdb/csky-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2062087b358cc5320d52b32c50866dbd08fb2631/gdb/csky-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/csky-tdep.c?ref=2062087b358cc5320d52b32c50866dbd08fb2631",
      "patch": "@@ -266,7 +266,7 @@ csky_vector_type (struct gdbarch *gdbarch)\n   append_composite_type_field (t, \"u8\",\n \t\t\t       init_vector_type (bt->builtin_int8, 16));\n \n-  TYPE_VECTOR (t) = 1;\n+  t->set_is_vector (true);\n   t->set_name (\"builtin_type_vec128i\");\n \n   return t;"
    },
    {
      "sha": "d8229309dc8ad6a4620142a38e18162cc3219720",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2062087b358cc5320d52b32c50866dbd08fb2631/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2062087b358cc5320d52b32c50866dbd08fb2631/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=2062087b358cc5320d52b32c50866dbd08fb2631",
      "patch": "@@ -1428,7 +1428,7 @@ make_vector_type (struct type *array_type)\n       TYPE_TARGET_TYPE (inner_array) = elt_type;\n     }\n \n-  TYPE_VECTOR (array_type) = 1;\n+  array_type->set_is_vector (true);\n }\n \n struct type *"
    },
    {
      "sha": "760d536dd041d494af252633e7fbcc29b5a073ad",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2062087b358cc5320d52b32c50866dbd08fb2631/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2062087b358cc5320d52b32c50866dbd08fb2631/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=2062087b358cc5320d52b32c50866dbd08fb2631",
      "patch": "@@ -219,7 +219,7 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n /* * Identify a vector type.  Gcc is handling this by adding an extra\n    attribute to the array type.  We slurp that in as a new flag of a\n    type.  This is used only in dwarf2read.c.  */\n-#define TYPE_VECTOR(t)\t\t(TYPE_MAIN_TYPE (t)->flag_vector)\n+#define TYPE_VECTOR(t)\t\t((t)->is_vector ())\n \n /* * The debugging formats (especially STABS) do not contain enough\n    information to represent all Ada types---especially those whose\n@@ -824,7 +824,7 @@ struct main_type\n   unsigned int m_flag_target_stub : 1;\n   unsigned int m_flag_prototyped : 1;\n   unsigned int m_flag_varargs : 1;\n-  unsigned int flag_vector : 1;\n+  unsigned int m_flag_vector : 1;\n   unsigned int flag_stub_supported : 1;\n   unsigned int flag_gnu_ifunc : 1;\n   unsigned int flag_fixed_instance : 1;\n@@ -1116,6 +1116,16 @@ struct type\n     this->main_type->m_flag_varargs = has_varargs;\n   }\n \n+  bool is_vector () const\n+  {\n+    return this->main_type->m_flag_vector;\n+  }\n+\n+  void set_is_vector (bool is_vector)\n+  {\n+    this->main_type->m_flag_vector = is_vector;\n+  }\n+\n   /* * Return the dynamic property of the requested KIND from this type's\n      list of dynamic properties.  */\n   dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;"
    },
    {
      "sha": "98aaa1408583e5987cf74b2abd119eb27d2f03f3",
      "filename": "gdb/i386-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2062087b358cc5320d52b32c50866dbd08fb2631/gdb/i386-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2062087b358cc5320d52b32c50866dbd08fb2631/gdb/i386-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-tdep.c?ref=2062087b358cc5320d52b32c50866dbd08fb2631",
      "patch": "@@ -3137,7 +3137,7 @@ i386_zmm_type (struct gdbarch *gdbarch)\n       append_composite_type_field (t, \"v4_int128\",\n \t\t\t\t   init_vector_type (bt->builtin_int128, 4));\n \n-      TYPE_VECTOR (t) = 1;\n+      t->set_is_vector (true);\n       t->set_name (\"builtin_type_vec512i\");\n       tdep->i386_zmm_type = t;\n     }\n@@ -3193,7 +3193,7 @@ i386_ymm_type (struct gdbarch *gdbarch)\n       append_composite_type_field (t, \"v2_int128\",\n \t\t\t\t   init_vector_type (bt->builtin_int128, 2));\n \n-      TYPE_VECTOR (t) = 1;\n+      t->set_is_vector (true);\n       t->set_name (\"builtin_type_vec256i\");\n       tdep->i386_ymm_type = t;\n     }\n@@ -3235,7 +3235,7 @@ i386_mmx_type (struct gdbarch *gdbarch)\n       append_composite_type_field (t, \"v8_int8\",\n \t\t\t\t   init_vector_type (bt->builtin_int8, 8));\n \n-      TYPE_VECTOR (t) = 1;\n+      t->set_is_vector (true);\n       t->set_name (\"builtin_type_vec64i\");\n       tdep->i386_mmx_type = t;\n     }"
    },
    {
      "sha": "0e8cf38e50c1c2ff4589b33b0919bdab72bbfeb4",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2062087b358cc5320d52b32c50866dbd08fb2631/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2062087b358cc5320d52b32c50866dbd08fb2631/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=2062087b358cc5320d52b32c50866dbd08fb2631",
      "patch": "@@ -674,7 +674,7 @@ riscv_fpreg_d_type (struct gdbarch *gdbarch)\n \t\t\t       \"__gdb_builtin_type_fpreg_d\", TYPE_CODE_UNION);\n       append_composite_type_field (t, \"float\", bt->builtin_float);\n       append_composite_type_field (t, \"double\", bt->builtin_double);\n-      TYPE_VECTOR (t) = 1;\n+      t->set_is_vector (true);\n       t->set_name (\"builtin_type_fpreg_d\");\n       tdep->riscv_fpreg_d_type = t;\n     }"
    },
    {
      "sha": "adb39d90d1118af9c71c0ce6cfabddb051021fac",
      "filename": "gdb/rs6000-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2062087b358cc5320d52b32c50866dbd08fb2631/gdb/rs6000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2062087b358cc5320d52b32c50866dbd08fb2631/gdb/rs6000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rs6000-tdep.c?ref=2062087b358cc5320d52b32c50866dbd08fb2631",
      "patch": "@@ -2273,7 +2273,7 @@ rs6000_builtin_type_vec64 (struct gdbarch *gdbarch)\n       append_composite_type_field (t, \"v8_int8\",\n \t\t\t\t   init_vector_type (bt->builtin_int8, 8));\n \n-      TYPE_VECTOR (t) = 1;\n+      t->set_is_vector (true);\n       t->set_name (\"ppc_builtin_type_vec64\");\n       tdep->ppc_builtin_type_vec64 = t;\n     }\n@@ -2320,7 +2320,7 @@ rs6000_builtin_type_vec128 (struct gdbarch *gdbarch)\n       append_composite_type_field (t, \"v16_int8\",\n \t\t\t\t   init_vector_type (bt->builtin_int8, 16));\n \n-      TYPE_VECTOR (t) = 1;\n+      t->set_is_vector (true);\n       t->set_name (\"ppc_builtin_type_vec128\");\n       tdep->ppc_builtin_type_vec128 = t;\n     }"
    },
    {
      "sha": "9d2d053545c287c8b04fe74fc0f081862834aee5",
      "filename": "gdb/target-descriptions.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2062087b358cc5320d52b32c50866dbd08fb2631/gdb/target-descriptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2062087b358cc5320d52b32c50866dbd08fb2631/gdb/target-descriptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-descriptions.c?ref=2062087b358cc5320d52b32c50866dbd08fb2631",
      "patch": "@@ -264,7 +264,7 @@ make_gdb_type (struct gdbarch *gdbarch, struct tdesc_type *ttype)\n \t     union as a vector also.  This allows e.g. a union of two\n \t     vector types to show up automatically in \"info vector\".  */\n \t  if (TYPE_VECTOR (field_gdb_type))\n-\t    TYPE_VECTOR (m_type) = 1;\n+\t    m_type->set_is_vector (true);\n \t}\n     }\n "
    }
  ]
}