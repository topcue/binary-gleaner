{
  "sha": "7657f14df7c697792b626efbd24ac44ad5642485",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzY1N2YxNGRmN2M2OTc3OTJiNjI2ZWZiZDI0YWM0NGFkNTY0MjQ4NQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-02-05T10:08:02Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-02-15T20:53:42Z"
    },
    "message": "C++-ify ravenscar_arch_ops\n\nThis turns ravenscar_arch_ops into an abstract base class and updates\nall the places where it is used.  This is an improvement because it\navoids any possibility of forgetting to set one of the function\npointers.  It also makes clear that these functions aren't intended to\nbe changed dynamically.\n\nThis version of the patch removes the prepare_to_store method, as it\nis unused, and it is easy enough to add if it is ever needed.\n\ngdb/ChangeLog\n2019-02-15  Tom Tromey  <tromey@adacore.com>\n\n\t* sparc-ravenscar-thread.c (struct sparc_ravenscar_ops): Derive\n\tfrom ravenscar_arch_ops.\n\t(sparc_ravenscar_ops::fetch_registers)\n\t(sparc_ravenscar_ops::store_registers): Now methods.\n\t(sparc_ravenscar_prepare_to_store): Remove.\n\t(sparc_ravenscar_ops): Redefine.\n\t* ravenscar-thread.h (struct ravenscar_arch_ops): Add virtual\n\tmethods and destructor.  Remove members.\n\t* ravenscar-thread.c (ravenscar_thread_target::fetch_registers)\n\t(ravenscar_thread_target::store_registers)\n\t(ravenscar_thread_target::prepare_to_store): Update.\n\t* ppc-ravenscar-thread.c (ppc_ravenscar_generic_prepare_to_store):\n\tRemove.\n\t(struct ppc_ravenscar_powerpc_ops): Derive from\n\travenscar_arch_ops.\n\t(ppc_ravenscar_powerpc_ops::fetch_registers)\n\t(ppc_ravenscar_powerpc_ops::store_registers): Now methods.\n\t(ppc_ravenscar_powerpc_ops): Redefine.\n\t(struct ppc_ravenscar_e500_ops): Derive from ravenscar_arch_ops.\n\t(ppc_ravenscar_e500_ops::fetch_registers)\n\t(ppc_ravenscar_e500_ops::store_registers): Now methods.\n\t(ppc_ravenscar_e500_ops): Redefine.\n\t* aarch64-ravenscar-thread.c\n\t(aarch64_ravenscar_generic_prepare_to_store): Remove.\n\t(struct aarch64_ravenscar_ops): Derive from ravenscar_arch_ops.\n\t(aarch64_ravenscar_fetch_registers)\n\t(aarch64_ravenscar_store_registers): Now methods.\n\t(aarch64_ravenscar_ops): Redefine.",
    "tree": {
      "sha": "5b636873519efe4f620656be3368bbc0c249332e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5b636873519efe4f620656be3368bbc0c249332e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7657f14df7c697792b626efbd24ac44ad5642485",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7657f14df7c697792b626efbd24ac44ad5642485",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7657f14df7c697792b626efbd24ac44ad5642485",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7657f14df7c697792b626efbd24ac44ad5642485/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5b6ea500d554b173e63e1f8f0344d568ad347463",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b6ea500d554b173e63e1f8f0344d568ad347463",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5b6ea500d554b173e63e1f8f0344d568ad347463"
    }
  ],
  "stats": {
    "total": 187,
    "additions": 84,
    "deletions": 103
  },
  "files": [
    {
      "sha": "cd1d477afccd5e67109504720ac968165d7f655c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7657f14df7c697792b626efbd24ac44ad5642485/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7657f14df7c697792b626efbd24ac44ad5642485/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7657f14df7c697792b626efbd24ac44ad5642485",
      "patch": "@@ -1,3 +1,34 @@\n+2019-02-15  Tom Tromey  <tromey@adacore.com>\n+\n+\t* sparc-ravenscar-thread.c (struct sparc_ravenscar_ops): Derive\n+\tfrom ravenscar_arch_ops.\n+\t(sparc_ravenscar_ops::fetch_registers)\n+\t(sparc_ravenscar_ops::store_registers): Now methods.\n+\t(sparc_ravenscar_prepare_to_store): Remove.\n+\t(sparc_ravenscar_ops): Redefine.\n+\t* ravenscar-thread.h (struct ravenscar_arch_ops): Add virtual\n+\tmethods and destructor.  Remove members.\n+\t* ravenscar-thread.c (ravenscar_thread_target::fetch_registers)\n+\t(ravenscar_thread_target::store_registers)\n+\t(ravenscar_thread_target::prepare_to_store): Update.\n+\t* ppc-ravenscar-thread.c (ppc_ravenscar_generic_prepare_to_store):\n+\tRemove.\n+\t(struct ppc_ravenscar_powerpc_ops): Derive from\n+\travenscar_arch_ops.\n+\t(ppc_ravenscar_powerpc_ops::fetch_registers)\n+\t(ppc_ravenscar_powerpc_ops::store_registers): Now methods.\n+\t(ppc_ravenscar_powerpc_ops): Redefine.\n+\t(struct ppc_ravenscar_e500_ops): Derive from ravenscar_arch_ops.\n+\t(ppc_ravenscar_e500_ops::fetch_registers)\n+\t(ppc_ravenscar_e500_ops::store_registers): Now methods.\n+\t(ppc_ravenscar_e500_ops): Redefine.\n+\t* aarch64-ravenscar-thread.c\n+\t(aarch64_ravenscar_generic_prepare_to_store): Remove.\n+\t(struct aarch64_ravenscar_ops): Derive from ravenscar_arch_ops.\n+\t(aarch64_ravenscar_fetch_registers)\n+\t(aarch64_ravenscar_store_registers): Now methods.\n+\t(aarch64_ravenscar_ops): Redefine.\n+\n 2019-02-15  Tom Tromey  <tromey@adacore.com>\n \n \t* ravenscar-thread.c (ravenscar_thread_target::stopped_by_sw_breakpoint)"
    },
    {
      "sha": "3e87a4bf5b96aea5b41baaf82089653cb6007dc5",
      "filename": "gdb/aarch64-ravenscar-thread.c",
      "status": "modified",
      "additions": 14,
      "deletions": 33,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7657f14df7c697792b626efbd24ac44ad5642485/gdb/aarch64-ravenscar-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7657f14df7c697792b626efbd24ac44ad5642485/gdb/aarch64-ravenscar-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-ravenscar-thread.c?ref=7657f14df7c697792b626efbd24ac44ad5642485",
      "patch": "@@ -133,15 +133,6 @@ aarch64_ravenscar_generic_fetch_registers\n     }\n }\n \n-/* to_prepare_to_store when inferior_ptid is different from the running\n-   thread.  */\n-\n-static void\n-aarch64_ravenscar_generic_prepare_to_store (struct regcache *regcache)\n-{\n-  /* Nothing to do.  */\n-}\n-\n /* to_store_registers when inferior_ptid is different from the running\n    thread.  */\n \n@@ -175,34 +166,24 @@ static const struct ravenscar_reg_info aarch64_reg_info =\n   ARRAY_SIZE (aarch64_context_offsets),\n };\n \n-/* Implement the to_fetch_registers ravenscar_arch_ops method\n-   for most Aarch64 targets.  */\n-\n-static void\n-aarch64_ravenscar_fetch_registers (struct regcache *regcache, int regnum)\n+struct aarch64_ravenscar_ops : public ravenscar_arch_ops\n {\n-  aarch64_ravenscar_generic_fetch_registers\n-    (&aarch64_reg_info, regcache, regnum);\n-}\n-\n-/* Implement the to_store_registers ravenscar_arch_ops method\n-   for most Aarch64 targets.  */\n-\n-static void\n-aarch64_ravenscar_store_registers (struct regcache *regcache, int regnum)\n-{\n-  aarch64_ravenscar_generic_store_registers\n-    (&aarch64_reg_info, regcache, regnum);\n-}\n+  void fetch_registers (struct regcache *regcache, int regnum) override\n+  {\n+    aarch64_ravenscar_generic_fetch_registers\n+      (&aarch64_reg_info, regcache, regnum);\n+  }\n+\n+  void store_registers (struct regcache *regcache, int regnum) override\n+  {\n+    aarch64_ravenscar_generic_store_registers\n+      (&aarch64_reg_info, regcache, regnum);\n+  }\n+};\n \n /* The ravenscar_arch_ops vector for most Aarch64 targets.  */\n \n-static struct ravenscar_arch_ops aarch64_ravenscar_ops =\n-{\n-  aarch64_ravenscar_fetch_registers,\n-  aarch64_ravenscar_store_registers,\n-  aarch64_ravenscar_generic_prepare_to_store\n-};\n+static struct aarch64_ravenscar_ops aarch64_ravenscar_ops;\n \n /* Register aarch64_ravenscar_ops in GDBARCH.  */\n "
    },
    {
      "sha": "fca826bc8468ebadc47ad3a016759cc4bb591d9a",
      "filename": "gdb/ppc-ravenscar-thread.c",
      "status": "modified",
      "additions": 20,
      "deletions": 36,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7657f14df7c697792b626efbd24ac44ad5642485/gdb/ppc-ravenscar-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7657f14df7c697792b626efbd24ac44ad5642485/gdb/ppc-ravenscar-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-ravenscar-thread.c?ref=7657f14df7c697792b626efbd24ac44ad5642485",
      "patch": "@@ -169,15 +169,6 @@ ppc_ravenscar_generic_fetch_registers\n     }\n }\n \n-/* to_prepare_to_store when inferior_ptid is different from the running\n-   thread.  */\n-\n-static void\n-ppc_ravenscar_generic_prepare_to_store (struct regcache *regcache)\n-{\n-  /* Nothing to do.  */\n-}\n-\n /* to_store_registers when inferior_ptid is different from the running\n    thread.  */\n \n@@ -211,32 +202,27 @@ static const struct ravenscar_reg_info ppc_reg_info =\n   ARRAY_SIZE (powerpc_context_offsets),\n };\n \n-/* Implement the to_fetch_registers ravenscar_arch_ops method\n-   for most PowerPC targets.  */\n+struct ppc_ravenscar_powerpc_ops : public ravenscar_arch_ops\n+{\n+  void fetch_registers (struct regcache *, int) override;\n+  void store_registers (struct regcache *, int) override;\n+};\n \n-static void\n-ppc_ravenscar_powerpc_fetch_registers (struct regcache *regcache, int regnum)\n+void\n+ppc_ravenscar_powerpc_ops::fetch_registers (struct regcache *regcache, int regnum)\n {\n   ppc_ravenscar_generic_fetch_registers (&ppc_reg_info, regcache, regnum);\n }\n \n-/* Implement the to_store_registers ravenscar_arch_ops method\n-   for most PowerPC targets.  */\n-\n-static void\n-ppc_ravenscar_powerpc_store_registers (struct regcache *regcache, int regnum)\n+void\n+ppc_ravenscar_powerpc_ops::store_registers (struct regcache *regcache, int regnum)\n {\n   ppc_ravenscar_generic_store_registers (&ppc_reg_info, regcache, regnum);\n }\n \n /* The ravenscar_arch_ops vector for most PowerPC targets.  */\n \n-static struct ravenscar_arch_ops ppc_ravenscar_powerpc_ops =\n-{\n-  ppc_ravenscar_powerpc_fetch_registers,\n-  ppc_ravenscar_powerpc_store_registers,\n-  ppc_ravenscar_generic_prepare_to_store\n-};\n+static struct ppc_ravenscar_powerpc_ops ppc_ravenscar_powerpc_ops;\n \n /* Register ppc_ravenscar_powerpc_ops in GDBARCH.  */\n \n@@ -254,32 +240,30 @@ static const struct ravenscar_reg_info e500_reg_info =\n   ARRAY_SIZE (e500_context_offsets),\n };\n \n-/* Implement the to_fetch_registers ravenscar_arch_ops method\n-   for E500 targets.  */\n+struct ppc_ravenscar_e500_ops : public ravenscar_arch_ops\n+{\n+  void fetch_registers (struct regcache *, int) override;\n+  void store_registers (struct regcache *, int) override;\n+};\n \n-static void\n-ppc_ravenscar_e500_fetch_registers (struct regcache *regcache, int regnum)\n+void\n+ppc_ravenscar_e500_ops::fetch_registers (struct regcache *regcache, int regnum)\n {\n   ppc_ravenscar_generic_fetch_registers (&e500_reg_info, regcache, regnum);\n }\n \n /* Implement the to_store_registers ravenscar_arch_ops method\n    for E500 targets.  */\n \n-static void\n-ppc_ravenscar_e500_store_registers (struct regcache *regcache, int regnum)\n+void\n+ppc_ravenscar_e500_ops::store_registers (struct regcache *regcache, int regnum)\n {\n   ppc_ravenscar_generic_store_registers (&e500_reg_info, regcache, regnum);\n }\n \n /* The ravenscar_arch_ops vector for E500 targets.  */\n \n-static struct ravenscar_arch_ops ppc_ravenscar_e500_ops =\n-{\n-  ppc_ravenscar_e500_fetch_registers,\n-  ppc_ravenscar_e500_store_registers,\n-  ppc_ravenscar_generic_prepare_to_store\n-};\n+static struct ppc_ravenscar_e500_ops ppc_ravenscar_e500_ops;\n \n /* Register ppc_ravenscar_e500_ops in GDBARCH.  */\n "
    },
    {
      "sha": "95c4046724163b15582e61a2acb9b4f47fab5d65",
      "filename": "gdb/ravenscar-thread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 7,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7657f14df7c697792b626efbd24ac44ad5642485/gdb/ravenscar-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7657f14df7c697792b626efbd24ac44ad5642485/gdb/ravenscar-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ravenscar-thread.c?ref=7657f14df7c697792b626efbd24ac44ad5642485",
      "patch": "@@ -414,7 +414,7 @@ ravenscar_thread_target::fetch_registers (struct regcache *regcache, int regnum)\n       struct ravenscar_arch_ops *arch_ops\n \t= gdbarch_ravenscar_ops (gdbarch);\n \n-      arch_ops->to_fetch_registers (regcache, regnum);\n+      arch_ops->fetch_registers (regcache, regnum);\n     }\n   else\n     beneath ()->fetch_registers (regcache, regnum);\n@@ -434,7 +434,7 @@ ravenscar_thread_target::store_registers (struct regcache *regcache,\n       struct ravenscar_arch_ops *arch_ops\n \t= gdbarch_ravenscar_ops (gdbarch);\n \n-      arch_ops->to_store_registers (regcache, regnum);\n+      arch_ops->store_registers (regcache, regnum);\n     }\n   else\n     beneath ()->store_registers (regcache, regnum);\n@@ -449,11 +449,7 @@ ravenscar_thread_target::prepare_to_store (struct regcache *regcache)\n       && is_ravenscar_task (ptid)\n       && !ravenscar_task_is_currently_active (ptid))\n     {\n-      struct gdbarch *gdbarch = regcache->arch ();\n-      struct ravenscar_arch_ops *arch_ops\n-\t= gdbarch_ravenscar_ops (gdbarch);\n-\n-      arch_ops->to_prepare_to_store (regcache);\n+      /* Nothing.  */\n     }\n   else\n     beneath ()->prepare_to_store (regcache);"
    },
    {
      "sha": "add55533038e20777bb736e893b2bf9360e82fb0",
      "filename": "gdb/ravenscar-thread.h",
      "status": "modified",
      "additions": 6,
      "deletions": 3,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7657f14df7c697792b626efbd24ac44ad5642485/gdb/ravenscar-thread.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7657f14df7c697792b626efbd24ac44ad5642485/gdb/ravenscar-thread.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ravenscar-thread.h?ref=7657f14df7c697792b626efbd24ac44ad5642485",
      "patch": "@@ -24,9 +24,12 @@\n \n struct ravenscar_arch_ops\n {\n-  void (*to_fetch_registers) (struct regcache *, int);\n-  void (*to_store_registers) (struct regcache *, int);\n-  void (*to_prepare_to_store) (struct regcache *);\n+  virtual ~ravenscar_arch_ops ()\n+  {\n+  }\n+\n+  virtual void fetch_registers (struct regcache *, int) = 0;\n+  virtual void store_registers (struct regcache *, int) = 0;\n };\n \n #endif /* !defined (RAVENSCAR_THREAD_H) */"
    },
    {
      "sha": "c619f6e3c10c917c8231b833b5350434097f8b97",
      "filename": "gdb/sparc-ravenscar-thread.c",
      "status": "modified",
      "additions": 10,
      "deletions": 24,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7657f14df7c697792b626efbd24ac44ad5642485/gdb/sparc-ravenscar-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7657f14df7c697792b626efbd24ac44ad5642485/gdb/sparc-ravenscar-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc-ravenscar-thread.c?ref=7657f14df7c697792b626efbd24ac44ad5642485",
      "patch": "@@ -25,11 +25,11 @@\n #include \"ravenscar-thread.h\"\n #include \"sparc-ravenscar-thread.h\"\n \n-static void sparc_ravenscar_fetch_registers (struct regcache *regcache,\n-                                             int regnum);\n-static void sparc_ravenscar_store_registers (struct regcache *regcache,\n-                                             int regnum);\n-static void sparc_ravenscar_prepare_to_store (struct regcache *regcache);\n+struct sparc_ravenscar_ops : public ravenscar_arch_ops\n+{\n+  void fetch_registers (struct regcache *, int) override;\n+  void store_registers (struct regcache *, int) override;\n+};\n \n /* Register offsets from a referenced address (exempli gratia the\n    Thread_Descriptor).  The referenced address depends on the register\n@@ -100,8 +100,8 @@ register_in_thread_descriptor_p (int regnum)\n /* to_fetch_registers when inferior_ptid is different from the running\n    thread.  */\n \n-static void\n-sparc_ravenscar_fetch_registers (struct regcache *regcache, int regnum)\n+void\n+sparc_ravenscar_ops::fetch_registers (struct regcache *regcache, int regnum)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n   const int sp_regnum = gdbarch_sp_regnum (gdbarch);\n@@ -140,20 +140,11 @@ sparc_ravenscar_fetch_registers (struct regcache *regcache, int regnum)\n     }\n }\n \n-/* to_prepare_to_store when inferior_ptid is different from the running\n-   thread.  */\n-\n-static void\n-sparc_ravenscar_prepare_to_store (struct regcache *regcache)\n-{\n-  /* Nothing to do.  */\n-}\n-\n /* to_store_registers when inferior_ptid is different from the running\n    thread.  */\n \n-static void\n-sparc_ravenscar_store_registers (struct regcache *regcache, int regnum)\n+void\n+sparc_ravenscar_ops::store_registers (struct regcache *regcache, int regnum)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n   int buf_size = register_size (gdbarch, regnum);\n@@ -178,12 +169,7 @@ sparc_ravenscar_store_registers (struct regcache *regcache, int regnum)\n                 buf_size);\n }\n \n-static struct ravenscar_arch_ops sparc_ravenscar_ops =\n-{\n-  sparc_ravenscar_fetch_registers,\n-  sparc_ravenscar_store_registers,\n-  sparc_ravenscar_prepare_to_store\n-};\n+static struct sparc_ravenscar_ops sparc_ravenscar_ops;\n \n /* Register ravenscar_arch_ops in GDBARCH.  */\n "
    }
  ]
}