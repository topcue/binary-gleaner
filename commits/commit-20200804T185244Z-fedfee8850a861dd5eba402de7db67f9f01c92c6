{
  "sha": "fedfee8850a861dd5eba402de7db67f9f01c92c6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmVkZmVlODg1MGE4NjFkZDVlYmE0MDJkZTdkYjY3ZjlmMDFjOTJjNg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-08-04T18:52:44Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-08-04T18:52:44Z"
    },
    "message": "gdb: change frame_info::prev_func::p type to cached_copy_status\n\nOne might think that variable `frame_info::prev_func::p` is a simple\ntrue/false value, but that's not the case, it can also have the value -1\nto mean \"unavaiable\".  Change it to use the `cached_copy_status` enum,\nwhich seems designed exactly for this purpose.\n\nRename to `status` to be consistent with `prev_pc::status` (and be cause\n`p` means `predicate`, which implies boolean, which this is not).\n\ngdb/ChangeLog:\n\n\t* frame.c (frame_info) <prev_func> <p>: Rename to status, change\n\ttype to cached_copy_status.\n\t(fprintf_frame): Adjust.\n\t(get_frame_func_if_available): Adjust.\n\t(frame_cleanup_after_sniffer): Adjust.\n\nChange-Id: I50c6ebef6c0acb076e25c741f7f417bfd101d953",
    "tree": {
      "sha": "907d7ce437b365b61ea76f23127ea09e2fa9a6a5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/907d7ce437b365b61ea76f23127ea09e2fa9a6a5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fedfee8850a861dd5eba402de7db67f9f01c92c6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fedfee8850a861dd5eba402de7db67f9f01c92c6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fedfee8850a861dd5eba402de7db67f9f01c92c6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fedfee8850a861dd5eba402de7db67f9f01c92c6/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6cfa9b59e25aaddae2f09d185330787b68a3559d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6cfa9b59e25aaddae2f09d185330787b68a3559d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6cfa9b59e25aaddae2f09d185330787b68a3559d"
    }
  ],
  "stats": {
    "total": 26,
    "additions": 18,
    "deletions": 8
  },
  "files": [
    {
      "sha": "da1f2e1d9e87c1574b83df0b734871d672754918",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fedfee8850a861dd5eba402de7db67f9f01c92c6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fedfee8850a861dd5eba402de7db67f9f01c92c6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fedfee8850a861dd5eba402de7db67f9f01c92c6",
      "patch": "@@ -1,3 +1,11 @@\n+2020-08-04  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* frame.c (frame_info) <prev_func> <p>: Rename to status, change\n+\ttype to cached_copy_status.\n+\t(fprintf_frame): Adjust.\n+\t(get_frame_func_if_available): Adjust.\n+\t(frame_cleanup_after_sniffer): Adjust.\n+\n 2020-08-04  Mark Wielaard  <mark@klomp.org>\n \n \t* MAINTAINERS (Write After Approval): Update email address."
    },
    {
      "sha": "9c3a1ae1d5cd564b3b4e4a3abe4bbe8fdce2af0b",
      "filename": "gdb/frame.c",
      "status": "modified",
      "additions": 10,
      "deletions": 8,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fedfee8850a861dd5eba402de7db67f9f01c92c6/gdb/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fedfee8850a861dd5eba402de7db67f9f01c92c6/gdb/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.c?ref=fedfee8850a861dd5eba402de7db67f9f01c92c6",
      "patch": "@@ -133,7 +133,7 @@ struct frame_info\n \n   /* Cached copy of the previous frame's resume address.  */\n   struct {\n-    enum cached_copy_status status;\n+    cached_copy_status status;\n     /* Did VALUE require unmasking when being read.  */\n     bool masked;\n     CORE_ADDR value;\n@@ -143,7 +143,7 @@ struct frame_info\n   struct\n   {\n     CORE_ADDR addr;\n-    int p;\n+    cached_copy_status status;\n   } prev_func;\n   \n   /* This frame's ID.  */\n@@ -478,7 +478,7 @@ fprint_frame (struct ui_file *file, struct frame_info *fi)\n     fprintf_unfiltered (file, \"<unknown>\");\n   fprintf_unfiltered (file, \",\");\n   fprintf_unfiltered (file, \"func=\");\n-  if (fi->next != NULL && fi->next->prev_func.p)\n+  if (fi->next != NULL && fi->next->prev_func.status == CC_VALUE)\n     fprintf_unfiltered (file, \"%s\", hex_string (fi->next->prev_func.addr));\n   else\n     fprintf_unfiltered (file, \"<unknown>\");\n@@ -1008,15 +1008,15 @@ get_frame_func_if_available (struct frame_info *this_frame, CORE_ADDR *pc)\n {\n   struct frame_info *next_frame = this_frame->next;\n \n-  if (!next_frame->prev_func.p)\n+  if (next_frame->prev_func.status == CC_UNKNOWN)\n     {\n       CORE_ADDR addr_in_block;\n \n       /* Make certain that this, and not the adjacent, function is\n          found.  */\n       if (!get_frame_address_in_block_if_available (this_frame, &addr_in_block))\n \t{\n-\t  next_frame->prev_func.p = -1;\n+\t  next_frame->prev_func.status = CC_UNAVAILABLE;\n \t  if (frame_debug)\n \t    fprintf_unfiltered (gdb_stdlog,\n \t\t\t\t\"{ get_frame_func (this_frame=%d)\"\n@@ -1025,7 +1025,7 @@ get_frame_func_if_available (struct frame_info *this_frame, CORE_ADDR *pc)\n \t}\n       else\n \t{\n-\t  next_frame->prev_func.p = 1;\n+\t  next_frame->prev_func.status = CC_VALUE;\n \t  next_frame->prev_func.addr = get_pc_function_start (addr_in_block);\n \t  if (frame_debug)\n \t    fprintf_unfiltered (gdb_stdlog,\n@@ -1035,13 +1035,15 @@ get_frame_func_if_available (struct frame_info *this_frame, CORE_ADDR *pc)\n \t}\n     }\n \n-  if (next_frame->prev_func.p < 0)\n+  if (next_frame->prev_func.status == CC_UNAVAILABLE)\n     {\n       *pc = -1;\n       return 0;\n     }\n   else\n     {\n+      gdb_assert (next_frame->prev_func.status == CC_VALUE);\n+\n       *pc = next_frame->prev_func.addr;\n       return 1;\n     }\n@@ -2908,7 +2910,7 @@ frame_cleanup_after_sniffer (struct frame_info *frame)\n \n      The previous PC is independent of the unwinder, but the previous\n      function is not (see get_frame_address_in_block).  */\n-  frame->prev_func.p = 0;\n+  frame->prev_func.status = CC_UNKNOWN;\n   frame->prev_func.addr = 0;\n \n   /* Discard the unwinder last, so that we can easily find it if an assertion"
    }
  ]
}