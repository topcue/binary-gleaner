{
  "sha": "9ddc1af18c31e775ae7b107779addfcde92c723f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWRkYzFhZjE4YzMxZTc3NWFlN2IxMDc3NzlhZGRmY2RlOTJjNzIzZg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-05-15T15:20:16Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-05-15T15:20:52Z"
    },
    "message": "linux-thread-db.c: use bool where possible in thread_db code\n\nI happened to be looking at this code and noticed we could replace ints\nby bools at a few places.\n\ngdb/ChangeLog:\n\n\t* linux-thread-db.c (try_thread_db_load_1): Change return type\n\tto bool.\n\t(try_thread_db_load): Likewise.\n\t(try_thread_db_load_from_pdir_1): Likewise.\n\t(try_thread_db_load_from_pdir): Likewise.\n\t(try_thread_db_load_from_sdir): Likewise.\n\t(try_thread_db_load_from_dir): Likewise.\n\t(thread_db_load_search): Likewise.\n\t(has_libpthread): Likewise.\n\t(thread_db_load): Likewise.",
    "tree": {
      "sha": "d50a5e06d7993220d6ce5b5d83b985d482295407",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d50a5e06d7993220d6ce5b5d83b985d482295407"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9ddc1af18c31e775ae7b107779addfcde92c723f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9ddc1af18c31e775ae7b107779addfcde92c723f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9ddc1af18c31e775ae7b107779addfcde92c723f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9ddc1af18c31e775ae7b107779addfcde92c723f/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "95008a882803920a0faf672dd4a54edcc6ab66a7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/95008a882803920a0faf672dd4a54edcc6ab66a7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/95008a882803920a0faf672dd4a54edcc6ab66a7"
    }
  ],
  "stats": {
    "total": 95,
    "additions": 54,
    "deletions": 41
  },
  "files": [
    {
      "sha": "7eb3b9226bfccf76f7895d238dce81073614fecb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9ddc1af18c31e775ae7b107779addfcde92c723f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9ddc1af18c31e775ae7b107779addfcde92c723f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9ddc1af18c31e775ae7b107779addfcde92c723f",
      "patch": "@@ -1,3 +1,16 @@\n+2019-05-15  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* linux-thread-db.c (try_thread_db_load_1): Change return type\n+\tto bool.\n+\t(try_thread_db_load): Likewise.\n+\t(try_thread_db_load_from_pdir_1): Likewise.\n+\t(try_thread_db_load_from_pdir): Likewise.\n+\t(try_thread_db_load_from_sdir): Likewise.\n+\t(try_thread_db_load_from_dir): Likewise.\n+\t(thread_db_load_search): Likewise.\n+\t(has_libpthread): Likewise.\n+\t(thread_db_load): Likewise.\n+\n 2019-05-15  Sergio Durigan Junior  <sergiodj@redhat.com>\n \n \tRef.: https://bugzilla.redhat.com/show_bug.cgi?id=1708192"
    },
    {
      "sha": "5c8b76c9a76388f6cba45050fccea0b4cee6ff49",
      "filename": "gdb/linux-thread-db.c",
      "status": "modified",
      "additions": 41,
      "deletions": 41,
      "changes": 82,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9ddc1af18c31e775ae7b107779addfcde92c723f/gdb/linux-thread-db.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9ddc1af18c31e775ae7b107779addfcde92c723f/gdb/linux-thread-db.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-thread-db.c?ref=9ddc1af18c31e775ae7b107779addfcde92c723f",
      "patch": "@@ -795,12 +795,12 @@ check_thread_db (struct thread_db_info *info, bool log_progress)\n }\n \n /* Attempt to initialize dlopen()ed libthread_db, described by INFO.\n-   Return 1 on success.\n+   Return true on success.\n    Failure could happen if libthread_db does not have symbols we expect,\n    or when it refuses to work with the current inferior (e.g. due to\n    version mismatch between libthread_db and libpthread).  */\n \n-static int\n+static bool\n try_thread_db_load_1 (struct thread_db_info *info)\n {\n   td_err_e err;\n@@ -818,7 +818,7 @@ try_thread_db_load_1 (struct thread_db_info *info)\n   do\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       if ((a) == NULL)\t\t\t\t\t\t\t\\\n-\treturn 0;\t\t\t\t\t\t\t\\\n+\treturn false;\t\t\t\t\t\t\t\\\n   } while (0)\n \n   CHK (TDB_VERBOSE_DLSYM (info, td_init));\n@@ -828,7 +828,7 @@ try_thread_db_load_1 (struct thread_db_info *info)\n     {\n       warning (_(\"Cannot initialize libthread_db: %s\"),\n \t       thread_db_err_str (err));\n-      return 0;\n+      return false;\n     }\n \n   CHK (TDB_VERBOSE_DLSYM (info, td_ta_new));\n@@ -857,7 +857,7 @@ try_thread_db_load_1 (struct thread_db_info *info)\n             default:\n               warning (_(\"td_ta_new failed: %s\"), thread_db_err_str (err));\n           }\n-      return 0;\n+      return false;\n     }\n \n   /* These are essential.  */\n@@ -892,7 +892,7 @@ try_thread_db_load_1 (struct thread_db_info *info)\n   if (check_thread_db_on_load)\n     {\n       if (!check_thread_db (info, libthread_db_debug))\n-\treturn 0;\n+\treturn false;\n     }\n \n   if (info->td_ta_thr_iter_p == NULL)\n@@ -914,7 +914,7 @@ try_thread_db_load_1 (struct thread_db_info *info)\n       /* Even if libthread_db initializes, if the thread list is\n          corrupted, we'd not manage to list any threads.  Better reject this\n          thread_db, and fall back to at least listing LWPs.  */\n-      return 0;\n+      return false;\n     }\n \n   printf_unfiltered (_(\"[Thread debugging using libthread_db enabled]\\n\"));\n@@ -942,14 +942,14 @@ try_thread_db_load_1 (struct thread_db_info *info)\n   if (thread_db_list->next == NULL)\n     push_target (&the_thread_db_target);\n \n-  return 1;\n+  return true;\n }\n \n /* Attempt to use LIBRARY as libthread_db.  LIBRARY could be absolute,\n    relative, or just LIBTHREAD_DB.  */\n \n-static int\n-try_thread_db_load (const char *library, int check_auto_load_safe)\n+static bool\n+try_thread_db_load (const char *library, bool check_auto_load_safe)\n {\n   void *handle;\n   struct thread_db_info *info;\n@@ -968,22 +968,22 @@ try_thread_db_load (const char *library, int check_auto_load_safe)\n \t  if (libthread_db_debug)\n \t    fprintf_unfiltered (gdb_stdlog, _(\"open failed: %s.\\n\"),\n \t\t\t\tsafe_strerror (errno));\n-\t  return 0;\n+\t  return false;\n \t}\n \n       if (!file_is_auto_load_safe (library, _(\"auto-load: Loading libthread-db \"\n \t\t\t\t\t      \"library \\\"%s\\\" from explicit \"\n \t\t\t\t\t      \"directory.\\n\"),\n \t\t\t\t   library))\n-\treturn 0;\n+\treturn false;\n     }\n \n   handle = dlopen (library, RTLD_NOW);\n   if (handle == NULL)\n     {\n       if (libthread_db_debug)\n \tfprintf_unfiltered (gdb_stdlog, _(\"dlopen failed: %s.\\n\"), dlerror ());\n-      return 0;\n+      return false;\n     }\n \n   if (libthread_db_debug && strchr (library, '/') == NULL)\n@@ -1008,19 +1008,19 @@ try_thread_db_load (const char *library, int check_auto_load_safe)\n     info->filename = gdb_realpath (library).release ();\n \n   if (try_thread_db_load_1 (info))\n-    return 1;\n+    return true;\n \n   /* This library \"refused\" to work on current inferior.  */\n   delete_thread_db_info (inferior_ptid.pid ());\n-  return 0;\n+  return false;\n }\n \n /* Subroutine of try_thread_db_load_from_pdir to simplify it.\n    Try loading libthread_db in directory(OBJ)/SUBDIR.\n    SUBDIR may be NULL.  It may also be something like \"../lib64\".\n    The result is true for success.  */\n \n-static int\n+static bool\n try_thread_db_load_from_pdir_1 (struct objfile *obj, const char *subdir)\n {\n   const char *obj_name = objfile_name (obj);\n@@ -1029,7 +1029,7 @@ try_thread_db_load_from_pdir_1 (struct objfile *obj, const char *subdir)\n     {\n       warning (_(\"Expected absolute pathname for libpthread in the\"\n \t\t \" inferior, but got %s.\"), obj_name);\n-      return 0;\n+      return false;\n     }\n \n   std::string path = obj_name;\n@@ -1041,25 +1041,25 @@ try_thread_db_load_from_pdir_1 (struct objfile *obj, const char *subdir)\n     path = path + subdir + \"/\";\n   path += LIBTHREAD_DB_SO;\n \n-  return try_thread_db_load (path.c_str (), 1);\n+  return try_thread_db_load (path.c_str (), true);\n }\n \n /* Handle $pdir in libthread-db-search-path.\n    Look for libthread_db in directory(libpthread)/SUBDIR.\n    SUBDIR may be NULL.  It may also be something like \"../lib64\".\n    The result is true for success.  */\n \n-static int\n+static bool\n try_thread_db_load_from_pdir (const char *subdir)\n {\n   if (!auto_load_thread_db)\n-    return 0;\n+    return false;\n \n   for (objfile *obj : current_program_space->objfiles ())\n     if (libpthread_name_p (objfile_name (obj)))\n       {\n \tif (try_thread_db_load_from_pdir_1 (obj, subdir))\n-\t  return 1;\n+\t  return true;\n \n \t/* We may have found the separate-debug-info version of\n \t   libpthread, and it may live in a directory without a matching\n@@ -1068,45 +1068,45 @@ try_thread_db_load_from_pdir (const char *subdir)\n \t  return try_thread_db_load_from_pdir_1 (obj->separate_debug_objfile_backlink,\n \t\t\t\t\t\t subdir);\n \n-\treturn 0;\n+\treturn false;\n       }\n \n-  return 0;\n+  return false;\n }\n \n /* Handle $sdir in libthread-db-search-path.\n    Look for libthread_db in the system dirs, or wherever a plain\n    dlopen(file_without_path) will look.\n    The result is true for success.  */\n \n-static int\n+static bool\n try_thread_db_load_from_sdir (void)\n {\n-  return try_thread_db_load (LIBTHREAD_DB_SO, 0);\n+  return try_thread_db_load (LIBTHREAD_DB_SO, false);\n }\n \n /* Try to load libthread_db from directory DIR of length DIR_LEN.\n    The result is true for success.  */\n \n-static int\n+static bool\n try_thread_db_load_from_dir (const char *dir, size_t dir_len)\n {\n   if (!auto_load_thread_db)\n-    return 0;\n+    return false;\n \n   std::string path = std::string (dir, dir_len) + \"/\" + LIBTHREAD_DB_SO;\n \n-  return try_thread_db_load (path.c_str (), 1);\n+  return try_thread_db_load (path.c_str (), true);\n }\n \n /* Search libthread_db_search_path for libthread_db which \"agrees\"\n    to work on current inferior.\n    The result is true for success.  */\n \n-static int\n+static bool\n thread_db_load_search (void)\n {\n-  int rc = 0;\n+  bool rc = false;\n \n   std::vector<gdb::unique_xmalloc_ptr<char>> dir_vec\n     = dirnames_to_char_ptr_vec (libthread_db_search_path);\n@@ -1159,56 +1159,56 @@ thread_db_load_search (void)\n   return rc;\n }\n \n-/* Return non-zero if the inferior has a libpthread.  */\n+/* Return true if the inferior has a libpthread.  */\n \n-static int\n+static bool\n has_libpthread (void)\n {\n   for (objfile *obj : current_program_space->objfiles ())\n     if (libpthread_name_p (objfile_name (obj)))\n-      return 1;\n+      return true;\n \n-  return 0;\n+  return false;\n }\n \n /* Attempt to load and initialize libthread_db.\n    Return 1 on success.  */\n \n-static int\n+static bool\n thread_db_load (void)\n {\n   struct thread_db_info *info;\n \n   info = get_thread_db_info (inferior_ptid.pid ());\n \n   if (info != NULL)\n-    return 1;\n+    return true;\n \n   /* Don't attempt to use thread_db on executables not running\n      yet.  */\n   if (!target_has_registers)\n-    return 0;\n+    return false;\n \n   /* Don't attempt to use thread_db for remote targets.  */\n   if (!(target_can_run () || core_bfd))\n-    return 0;\n+    return false;\n \n   if (thread_db_load_search ())\n-    return 1;\n+    return true;\n \n   /* We couldn't find a libthread_db.\n      If the inferior has a libpthread warn the user.  */\n   if (has_libpthread ())\n     {\n       warning (_(\"Unable to find libthread_db matching inferior's thread\"\n \t\t \" library, thread debugging will not be available.\"));\n-      return 0;\n+      return false;\n     }\n \n   /* Either this executable isn't using libpthread at all, or it is\n      statically linked.  Since we can't easily distinguish these two cases,\n      no warning is issued.  */\n-  return 0;\n+  return false;\n }\n \n static void"
    }
  ]
}