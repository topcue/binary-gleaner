{
  "sha": "31edb802957b0073c571f48b9262e66b817fd360",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzFlZGI4MDI5NTdiMDA3M2M1NzFmNDhiOTI2MmU2NmI4MTdmZDM2MA==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-10-13T11:57:14Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-10-29T19:19:59Z"
    },
    "message": "Change some arguments to gdb::string_view instead of name+len\n\nJust some code cleanup. This change has a few benefits:\n- Shorter argument list in the functions\n- If the caller needs to calculate the string, they no longer\n  need to explicitly call strlen\n- It is easy to pass std::string to this (done in one place\n  currently)\n\nThis also updates a couple of places that were passing 0/1 to\na bool parameter.\n\ngdb/ChangeLog:\n\n2019-10-29  Christian Biesinger  <cbiesinger@google.com>\n\n\t* coffread.c (record_minimal_symbol): Update.\n\t(process_coff_symbol): Update.\n\t* dbxread.c (read_dbx_symtab): Update.\n\t* dwarf2read.c (add_partial_symbol): Update.\n\t(fixup_go_packaging): Update.\n\t(load_partial_dies): Update.\n\t(new_symbol): Update.\n\t* elfread.c (record_minimal_symbol): Change signature to use\n\tgdb::string_view instead of name+len.\n\t(elf_symtab_read): Update.\n\t(elf_rel_plt_read): Update.\n\t* mdebugread.c (parse_partial_symbols): Update.\n\t(handle_psymbol_enumerators): Update.\n\t(new_symbol): Update.\n\t* minsyms.c (minimal_symbol_reader::record_full): Change signature\n\tto use gdb::string_view instead of name+len.\n\t* minsyms.h (class minimal_symbol_reader) <record_full>: Likewise.\n\t* psympriv.h (add_psymbol_to_list): Likewise.\n\t* psymtab.c (add_psymbol_to_bcache): Likewise.\n\t(add_psymbol_to_list): Likewise.\n\t* stabsread.c (define_symbol): Update.\n\t* symtab.c (symbol_set_names): Change signature to use gdb::string_view.\n\t* symtab.h (SYMBOL_SET_NAMES): Likewise.\n\t(symbol_set_names): Likewise.\n\t* xcoffread.c (scan_xcoff_symtab): Update.\n\nChange-Id: I2675c6865e0368f9c755a1081088a53aa54dda4c",
    "tree": {
      "sha": "9acfdc350025bbb603e41372e898681418121dec",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9acfdc350025bbb603e41372e898681418121dec"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/31edb802957b0073c571f48b9262e66b817fd360",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/31edb802957b0073c571f48b9262e66b817fd360",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/31edb802957b0073c571f48b9262e66b817fd360",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/31edb802957b0073c571f48b9262e66b817fd360/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0c921b219c0f62004787d352b03a746682c01489",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0c921b219c0f62004787d352b03a746682c01489",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0c921b219c0f62004787d352b03a746682c01489"
    }
  ],
  "stats": {
    "total": 335,
    "additions": 188,
    "deletions": 147
  },
  "files": [
    {
      "sha": "fee6332e8fc3257c189b6a5745158a50fc977210",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/31edb802957b0073c571f48b9262e66b817fd360/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/31edb802957b0073c571f48b9262e66b817fd360/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=31edb802957b0073c571f48b9262e66b817fd360",
      "patch": "@@ -1,3 +1,31 @@\n+2019-10-29  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* coffread.c (record_minimal_symbol): Update.\n+\t(process_coff_symbol): Update.\n+\t* dbxread.c (read_dbx_symtab): Update.\n+\t* dwarf2read.c (add_partial_symbol): Update.\n+\t(fixup_go_packaging): Update.\n+\t(load_partial_dies): Update.\n+\t(new_symbol): Update.\n+\t* elfread.c (record_minimal_symbol): Change signature to use\n+\tgdb::string_view instead of name+len.\n+\t(elf_symtab_read): Update.\n+\t(elf_rel_plt_read): Update.\n+\t* mdebugread.c (parse_partial_symbols): Update.\n+\t(handle_psymbol_enumerators): Update.\n+\t(new_symbol): Update.\n+\t* minsyms.c (minimal_symbol_reader::record_full): Change signature\n+\tto use gdb::string_view instead of name+len.\n+\t* minsyms.h (class minimal_symbol_reader) <record_full>: Likewise.\n+\t* psympriv.h (add_psymbol_to_list): Likewise.\n+\t* psymtab.c (add_psymbol_to_bcache): Likewise.\n+\t(add_psymbol_to_list): Likewise.\n+\t* stabsread.c (define_symbol): Update.\n+\t* symtab.c (symbol_set_names): Change signature to use gdb::string_view.\n+\t* symtab.h (SYMBOL_SET_NAMES): Likewise.\n+\t(symbol_set_names): Likewise.\n+\t* xcoffread.c (scan_xcoff_symtab): Update.\n+\n 2019-10-29  Christian Biesinger  <cbiesinger@google.com>\n \n \t* symtab.h (symbol_set_names): Document that copy_name must be"
    },
    {
      "sha": "2ec48d60d5632c5f8f03d1e1e9c3f553c0b6bccc",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/31edb802957b0073c571f48b9262e66b817fd360/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/31edb802957b0073c571f48b9262e66b817fd360/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=31edb802957b0073c571f48b9262e66b817fd360",
      "patch": "@@ -462,8 +462,7 @@ record_minimal_symbol (minimal_symbol_reader &reader,\n       return NULL;\n     }\n \n-  return reader.record_full (cs->c_name, strlen (cs->c_name), true, address,\n-\t\t\t     type, section);\n+  return reader.record_full (cs->c_name, true, address, type, section);\n }\n \f\n /* coff_symfile_init ()\n@@ -1569,7 +1568,7 @@ process_coff_symbol (struct coff_symbol *cs,\n   name = EXTERNAL_NAME (name, objfile->obfd);\n   SYMBOL_SET_LANGUAGE (sym, get_current_subfile ()->language,\n \t\t       &objfile->objfile_obstack);\n-  SYMBOL_SET_NAMES (sym, name, strlen (name), 1, objfile);\n+  SYMBOL_SET_NAMES (sym, name, true, objfile);\n \n   /* default assumptions */\n   SYMBOL_VALUE (sym) = cs->c_value;"
    },
    {
      "sha": "0e80150394a1636c7eaf960b1b9cef198a60770d",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/31edb802957b0073c571f48b9262e66b817fd360/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/31edb802957b0073c571f48b9262e66b817fd360/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=31edb802957b0073c571f48b9262e66b817fd360",
      "patch": "@@ -380,7 +380,7 @@ ctf_add_enum_member_cb (const char *name, int enum_value, void *arg)\n       OBJSTAT (ccp->of, n_syms++);\n \n       SYMBOL_SET_LANGUAGE (sym, language_c, &ccp->of->objfile_obstack);\n-      SYMBOL_SET_NAMES (sym, name, strlen (name), 0, ccp->of);\n+      SYMBOL_SET_NAMES (sym, name, false, ccp->of);\n       SYMBOL_ACLASS_INDEX (sym) = LOC_CONST;\n       SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n       SYMBOL_TYPE (sym) = fip->ptype;\n@@ -409,7 +409,7 @@ new_symbol (ctf_context_t *ccp, struct type *type, ctf_id_t tid)\n       OBJSTAT (objfile, n_syms++);\n \n       SYMBOL_SET_LANGUAGE (sym, language_c, &objfile->objfile_obstack);\n-      SYMBOL_SET_NAMES (sym, name.get (), strlen (name.get ()), 1, objfile);\n+      SYMBOL_SET_NAMES (sym, name.get (), true, objfile);\n       SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n       SYMBOL_ACLASS_INDEX (sym) = LOC_OPTIMIZED_OUT;\n \n@@ -1029,7 +1029,7 @@ ctf_add_var_cb (const char *name, ctf_id_t id, void *arg)\n \tif (type)\n \t  {\n \t    sym = new_symbol (ccp, type, id);\n-\t    SYMBOL_SET_NAMES (sym, name, strlen (name), 0, ccp->of);\n+\t    SYMBOL_SET_NAMES (sym, name, false, ccp->of);\n \t  }\n \tbreak;\n       case CTF_K_STRUCT:\n@@ -1045,7 +1045,7 @@ ctf_add_var_cb (const char *name, ctf_id_t id, void *arg)\n \tSYMBOL_TYPE (sym) = type;\n \tSYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n \tSYMBOL_ACLASS_INDEX (sym) = LOC_OPTIMIZED_OUT;\n-\tSYMBOL_SET_NAMES (sym, name, strlen (name), 0, ccp->of);\n+\tSYMBOL_SET_NAMES (sym, name, false, ccp->of);\n \tadd_symbol_to_list (sym, ccp->builder->get_global_symbols ());\n \tbreak;\n       default:\n@@ -1365,7 +1365,7 @@ ctf_psymtab_type_cb (ctf_id_t tid, void *arg)\n \treturn 0;\n     }\n \n-    add_psymbol_to_list (name.get (), strlen (name.get ()), true,\n+    add_psymbol_to_list (name.get (), true,\n \t\t\t domain, aclass, section,\n \t\t\t psymbol_placement::GLOBAL,\n \t\t\t 0, language_c, ccp->of);\n@@ -1380,7 +1380,7 @@ ctf_psymtab_var_cb (const char *name, ctf_id_t id, void *arg)\n {\n   ctf_context_t *ccp = (ctf_context_t *) arg;\n \n-  add_psymbol_to_list (name, strlen (name), true,\n+  add_psymbol_to_list (name, true,\n \t\t       VAR_DOMAIN, LOC_STATIC, -1,\n \t\t       psymbol_placement::GLOBAL,\n \t\t       0, language_c, ccp->of);\n@@ -1445,7 +1445,7 @@ scan_partial_symbols (ctf_file_t *cfp, struct objfile *of)\n       else\n \taclass = LOC_TYPEDEF;\n \n-      add_psymbol_to_list (tname.get (), strlen (tname.get ()), true,\n+      add_psymbol_to_list (tname.get (), true,\n \t\t\t   tdomain, aclass, -1,\n \t\t\t   psymbol_placement::STATIC,\n \t\t\t   0, language_c, of);"
    },
    {
      "sha": "462f7f0ddaea24bd4f8d77498b6269cf5aa43b04",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/31edb802957b0073c571f48b9262e66b817fd360/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/31edb802957b0073c571f48b9262e66b817fd360/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=31edb802957b0073c571f48b9262e66b817fd360",
      "patch": "@@ -1464,7 +1464,7 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \t      if (gdbarch_static_transform_name_p (gdbarch))\n \t\tgdbarch_static_transform_name (gdbarch, namestring);\n \n-\t      add_psymbol_to_list (sym_name, sym_len, true,\n+\t      add_psymbol_to_list (gdb::string_view (sym_name, sym_len), true,\n \t\t\t\t   VAR_DOMAIN, LOC_STATIC,\n \t\t\t\t   data_sect_index,\n \t\t\t\t   psymbol_placement::STATIC,\n@@ -1474,7 +1474,7 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \t    case 'G':\n \t      /* The addresses in these entries are reported to be\n \t\t wrong.  See the code that reads 'G's for symtabs.  */\n-\t      add_psymbol_to_list (sym_name, sym_len, true,\n+\t      add_psymbol_to_list (gdb::string_view (sym_name, sym_len), true,\n \t\t\t\t   VAR_DOMAIN, LOC_STATIC,\n \t\t\t\t   data_sect_index,\n \t\t\t\t   psymbol_placement::GLOBAL,\n@@ -1492,15 +1492,15 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \t\t  || (p == namestring + 1\n \t\t      && namestring[0] != ' '))\n \t\t{\n-\t\t  add_psymbol_to_list (sym_name, sym_len, true,\n-\t\t\t\t       STRUCT_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t  add_psymbol_to_list (gdb::string_view (sym_name, sym_len),\n+\t\t\t\t       true, STRUCT_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t\t       psymbol_placement::STATIC,\n \t\t\t\t       0, psymtab_language, objfile);\n \t\t  if (p[2] == 't')\n \t\t    {\n \t\t      /* Also a typedef with the same name.  */\n-\t\t      add_psymbol_to_list (sym_name, sym_len, true,\n-\t\t\t\t\t   VAR_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t      add_psymbol_to_list (gdb::string_view (sym_name, sym_len),\n+\t\t\t\t\t   true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t\t\t   psymbol_placement::STATIC,\n \t\t\t\t\t   0, psymtab_language, objfile);\n \t\t      p += 1;\n@@ -1511,8 +1511,8 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \t    case 't':\n \t      if (p != namestring)\t/* a name is there, not just :T...  */\n \t\t{\n-\t\t  add_psymbol_to_list (sym_name, sym_len, true,\n-\t\t\t\t       VAR_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t  add_psymbol_to_list (gdb::string_view (sym_name, sym_len),\n+\t\t\t\t       true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t\t       psymbol_placement::STATIC,\n \t\t\t\t       0, psymtab_language, objfile);\n \t\t}\n@@ -1572,7 +1572,7 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \t\t\t;\n \t\t      /* Note that the value doesn't matter for\n \t\t\t enum constants in psymtabs, just in symtabs.  */\n-\t\t      add_psymbol_to_list (p, q - p, true,\n+\t\t      add_psymbol_to_list (gdb::string_view (p, q - p), true,\n \t\t\t\t\t   VAR_DOMAIN, LOC_CONST, -1,\n \t\t\t\t\t   psymbol_placement::STATIC, 0,\n \t\t\t\t\t   psymtab_language, objfile);\n@@ -1590,7 +1590,7 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \n \t    case 'c':\n \t      /* Constant, e.g. from \"const\" in Pascal.  */\n-\t      add_psymbol_to_list (sym_name, sym_len, true,\n+\t      add_psymbol_to_list (gdb::string_view (sym_name, sym_len), true,\n \t\t\t\t   VAR_DOMAIN, LOC_CONST, -1,\n \t\t\t\t   psymbol_placement::STATIC, 0,\n \t\t\t\t   psymtab_language, objfile);\n@@ -1645,7 +1645,7 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \t\t  pst->set_text_low (nlist.n_value);\n \t\t  textlow_not_set = 0;\n \t\t}\n-\t      add_psymbol_to_list (sym_name, sym_len, true,\n+\t      add_psymbol_to_list (gdb::string_view (sym_name, sym_len), true,\n \t\t\t\t   VAR_DOMAIN, LOC_BLOCK,\n \t\t\t\t   SECT_OFF_TEXT (objfile),\n \t\t\t\t   psymbol_placement::STATIC,\n@@ -1704,7 +1704,7 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \t\t  pst->set_text_low (nlist.n_value);\n \t\t  textlow_not_set = 0;\n \t\t}\n-\t      add_psymbol_to_list (sym_name, sym_len, true,\n+\t      add_psymbol_to_list (gdb::string_view (sym_name, sym_len), true,\n \t\t\t\t   VAR_DOMAIN, LOC_BLOCK,\n \t\t\t\t   SECT_OFF_TEXT (objfile),\n \t\t\t\t   psymbol_placement::GLOBAL,"
    },
    {
      "sha": "cac719a9c6a662588a1f4cf59cb15e2e7e1c08d4",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 14,
      "deletions": 15,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/31edb802957b0073c571f48b9262e66b817fd360/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/31edb802957b0073c571f48b9262e66b817fd360/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=31edb802957b0073c571f48b9262e66b817fd360",
      "patch": "@@ -8952,7 +8952,7 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n              But in Ada and Fortran, we want to be able to access nested\n              procedures globally.  So all Ada and Fortran subprograms are\n              stored in the global scope.  */\n-\t  add_psymbol_to_list (actual_name, strlen (actual_name),\n+\t  add_psymbol_to_list (actual_name,\n \t\t\t       built_actual_name != NULL,\n \t\t\t       VAR_DOMAIN, LOC_BLOCK,\n \t\t\t       SECT_OFF_TEXT (objfile),\n@@ -8962,7 +8962,7 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n \t}\n       else\n \t{\n-\t  add_psymbol_to_list (actual_name, strlen (actual_name),\n+\t  add_psymbol_to_list (actual_name,\n \t\t\t       built_actual_name != NULL,\n \t\t\t       VAR_DOMAIN, LOC_BLOCK,\n \t\t\t       SECT_OFF_TEXT (objfile),\n@@ -8974,7 +8974,7 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n \tset_objfile_main_name (objfile, actual_name, cu->language);\n       break;\n     case DW_TAG_constant:\n-      add_psymbol_to_list (actual_name, strlen (actual_name),\n+      add_psymbol_to_list (actual_name,\n \t\t\t   built_actual_name != NULL, VAR_DOMAIN, LOC_STATIC,\n \t\t\t   -1, (pdi->is_external\n \t\t\t\t? psymbol_placement::GLOBAL\n@@ -9010,7 +9010,7 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n \t     table building.  */\n \n \t  if (pdi->d.locdesc || pdi->has_type)\n-\t    add_psymbol_to_list (actual_name, strlen (actual_name),\n+\t    add_psymbol_to_list (actual_name,\n \t\t\t\t built_actual_name != NULL,\n \t\t\t\t VAR_DOMAIN, LOC_STATIC,\n \t\t\t\t SECT_OFF_TEXT (objfile),\n@@ -9029,7 +9029,7 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n \t      return;\n \t    }\n \n-\t  add_psymbol_to_list (actual_name, strlen (actual_name),\n+\t  add_psymbol_to_list (actual_name,\n \t\t\t       built_actual_name != NULL,\n \t\t\t       VAR_DOMAIN, LOC_STATIC,\n \t\t\t       SECT_OFF_TEXT (objfile),\n@@ -9041,15 +9041,15 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n     case DW_TAG_typedef:\n     case DW_TAG_base_type:\n     case DW_TAG_subrange_type:\n-      add_psymbol_to_list (actual_name, strlen (actual_name),\n+      add_psymbol_to_list (actual_name,\n \t\t\t   built_actual_name != NULL,\n \t\t\t   VAR_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t   psymbol_placement::STATIC,\n \t\t\t   0, cu->language, objfile);\n       break;\n     case DW_TAG_imported_declaration:\n     case DW_TAG_namespace:\n-      add_psymbol_to_list (actual_name, strlen (actual_name),\n+      add_psymbol_to_list (actual_name,\n \t\t\t   built_actual_name != NULL,\n \t\t\t   VAR_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t   psymbol_placement::GLOBAL,\n@@ -9060,7 +9060,7 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n          available without any name.  If so, we skip the module as it\n          doesn't bring any value.  */\n       if (actual_name != nullptr)\n-\tadd_psymbol_to_list (actual_name, strlen (actual_name),\n+\tadd_psymbol_to_list (actual_name,\n \t\t\t     built_actual_name != NULL,\n \t\t\t     MODULE_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t     psymbol_placement::GLOBAL,\n@@ -9084,7 +9084,7 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n \n       /* NOTE: carlton/2003-10-07: See comment in new_symbol about\n \t static vs. global.  */\n-      add_psymbol_to_list (actual_name, strlen (actual_name),\n+      add_psymbol_to_list (actual_name,\n \t\t\t   built_actual_name != NULL,\n \t\t\t   STRUCT_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t   cu->language == language_cplus\n@@ -9094,7 +9094,7 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n \n       break;\n     case DW_TAG_enumerator:\n-      add_psymbol_to_list (actual_name, strlen (actual_name),\n+      add_psymbol_to_list (actual_name,\n \t\t\t   built_actual_name != NULL,\n \t\t\t   VAR_DOMAIN, LOC_CONST, -1,\n \t\t\t   cu->language == language_cplus\n@@ -9924,8 +9924,7 @@ fixup_go_packaging (struct dwarf2_cu *cu)\n \n       sym = allocate_symbol (objfile);\n       SYMBOL_SET_LANGUAGE (sym, language_go, &objfile->objfile_obstack);\n-      SYMBOL_SET_NAMES (sym, saved_package_name,\n-\t\t\tstrlen (saved_package_name), 0, objfile);\n+      SYMBOL_SET_NAMES (sym, saved_package_name, false, objfile);\n       /* This is not VAR_DOMAIN because we want a way to ensure a lookup of,\n \t e.g., \"main\" finds the \"main\" module and not C's main().  */\n       SYMBOL_DOMAIN (sym) = STRUCT_DOMAIN;\n@@ -18566,7 +18565,7 @@ load_partial_dies (const struct die_reader_specs *reader,\n \t      || pdi.tag == DW_TAG_subrange_type))\n \t{\n \t  if (building_psymtab && pdi.name != NULL)\n-\t    add_psymbol_to_list (pdi.name, strlen (pdi.name), false,\n+\t    add_psymbol_to_list (pdi.name, false,\n \t\t\t\t VAR_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t\t psymbol_placement::STATIC,\n \t\t\t\t 0, cu->language, objfile);\n@@ -18600,7 +18599,7 @@ load_partial_dies (const struct die_reader_specs *reader,\n \t  if (pdi.name == NULL)\n \t    complaint (_(\"malformed enumerator DIE ignored\"));\n \t  else if (building_psymtab)\n-\t    add_psymbol_to_list (pdi.name, strlen (pdi.name), false,\n+\t    add_psymbol_to_list (pdi.name, false,\n \t\t\t\t VAR_DOMAIN, LOC_CONST, -1,\n \t\t\t\t cu->language == language_cplus\n \t\t\t\t ? psymbol_placement::GLOBAL\n@@ -21606,7 +21605,7 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n       /* Cache this symbol's name and the name's demangled form (if any).  */\n       SYMBOL_SET_LANGUAGE (sym, cu->language, &objfile->objfile_obstack);\n       linkagename = dwarf2_physname (name, die, cu);\n-      SYMBOL_SET_NAMES (sym, linkagename, strlen (linkagename), 0, objfile);\n+      SYMBOL_SET_NAMES (sym, linkagename, false, objfile);\n \n       /* Fortran does not have mangling standard and the mangling does differ\n \t between gfortran, iFort etc.  */"
    },
    {
      "sha": "226e3f09d3876f50fd4c94f2c78f27f1af462bea",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 13,
      "deletions": 12,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/31edb802957b0073c571f48b9262e66b817fd360/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/31edb802957b0073c571f48b9262e66b817fd360/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=31edb802957b0073c571f48b9262e66b817fd360",
      "patch": "@@ -48,6 +48,7 @@\n #include \"auxv.h\"\n #include \"mdebugread.h\"\n #include \"ctfread.h\"\n+#include \"gdbsupport/gdb_string_view.h\"\n \n /* Forward declarations.  */\n extern const struct sym_fns elf_sym_fns_gdb_index;\n@@ -198,7 +199,7 @@ elf_locate_sections (bfd *ignore_abfd, asection *sectp, void *eip)\n \n static struct minimal_symbol *\n record_minimal_symbol (minimal_symbol_reader &reader,\n-\t\t       const char *name, int name_len, bool copy_name,\n+\t\t       gdb::string_view name, bool copy_name,\n \t\t       CORE_ADDR address,\n \t\t       enum minimal_symbol_type ms_type,\n \t\t       asection *bfd_section, struct objfile *objfile)\n@@ -210,7 +211,7 @@ record_minimal_symbol (minimal_symbol_reader &reader,\n     address = gdbarch_addr_bits_remove (gdbarch, address);\n \n   struct minimal_symbol *result\n-    = reader.record_full (name, name_len, copy_name, address,\n+    = reader.record_full (name, copy_name, address,\n \t\t\t  ms_type,\n \t\t\t  gdb_bfd_section_index (objfile->obfd,\n \t\t\t\t\t\t bfd_section));\n@@ -330,7 +331,7 @@ elf_symtab_read (minimal_symbol_reader &reader,\n \t    continue;\n \n \t  msym = record_minimal_symbol\n-\t    (reader, sym->name, strlen (sym->name), copy_names,\n+\t    (reader, sym->name, copy_names,\n \t     symaddr, mst_solib_trampoline, sect, objfile);\n \t  if (msym != NULL)\n \t    {\n@@ -474,7 +475,7 @@ elf_symtab_read (minimal_symbol_reader &reader,\n \t      continue;\t/* Skip this symbol.  */\n \t    }\n \t  msym = record_minimal_symbol\n-\t    (reader, sym->name, strlen (sym->name), copy_names, symaddr,\n+\t    (reader, sym->name, copy_names, symaddr,\n \t     ms_type, sym->section, objfile);\n \n \t  if (msym)\n@@ -503,8 +504,10 @@ elf_symtab_read (minimal_symbol_reader &reader,\n \t\t{\n \t\t  int len = atsign - sym->name;\n \n-\t\t  record_minimal_symbol (reader, sym->name, len, true, symaddr,\n-\t\t\t\t\t ms_type, sym->section, objfile);\n+\t\t  record_minimal_symbol (reader,\n+\t\t\t\t\t gdb::string_view (sym->name, len),\n+\t\t\t\t\t true, symaddr, ms_type, sym->section,\n+\t\t\t\t\t objfile);\n \t\t}\n \t    }\n \n@@ -520,10 +523,9 @@ elf_symtab_read (minimal_symbol_reader &reader,\n \t\t{\n \t\t  struct minimal_symbol *mtramp;\n \n-\t\t  mtramp = record_minimal_symbol (reader, sym->name, len - 4,\n-\t\t\t\t\t\t  true, symaddr,\n-\t\t\t\t\t\t  mst_solib_trampoline,\n-\t\t\t\t\t\t  sym->section, objfile);\n+\t\t  mtramp = record_minimal_symbol\n+\t\t    (reader, gdb::string_view (sym->name, len - 4), true,\n+\t\t     symaddr, mst_solib_trampoline, sym->section, objfile);\n \t\t  if (mtramp)\n \t\t    {\n \t\t      SET_MSYMBOL_SIZE (mtramp, MSYMBOL_SIZE (msym));\n@@ -639,8 +641,7 @@ elf_rel_plt_read (minimal_symbol_reader &reader,\n       string_buffer.assign (name);\n       string_buffer.append (got_suffix, got_suffix + got_suffix_len);\n \n-      msym = record_minimal_symbol (reader, string_buffer.c_str (),\n-\t\t\t\t    string_buffer.size (),\n+      msym = record_minimal_symbol (reader, string_buffer,\n \t\t\t\t    true, address, mst_slot_got_plt,\n \t\t\t\t    msym_section, objfile);\n       if (msym)"
    },
    {
      "sha": "454929381d92742efd3d56f65e98371ad0e578e4",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 43,
      "deletions": 37,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/31edb802957b0073c571f48b9262e66b817fd360/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/31edb802957b0073c571f48b9262e66b817fd360/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=31edb802957b0073c571f48b9262e66b817fd360",
      "patch": "@@ -3050,8 +3050,9 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t  namestring = gdbarch_static_transform_name\n \t\t\t\t\t (gdbarch, namestring);\n \n-\t\t\tadd_psymbol_to_list (namestring, p - namestring, true,\n-\t\t\t\t\t     VAR_DOMAIN, LOC_STATIC,\n+\t\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n+\t\t\t\t\t\t\t       p - namestring),\n+\t\t\t\t\t     true, VAR_DOMAIN, LOC_STATIC,\n \t\t\t\t\t     SECT_OFF_DATA (objfile),\n \t\t\t\t\t     psymbol_placement::STATIC,\n \t\t\t\t\t     sh.value,\n@@ -3061,8 +3062,9 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t/* The addresses in these entries are reported\n \t\t\t   to be wrong.  See the code that reads 'G's\n \t\t\t   for symtabs.  */\n-\t\t\tadd_psymbol_to_list (namestring, p - namestring, true,\n-\t\t\t\t\t     VAR_DOMAIN, LOC_STATIC,\n+\t\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n+\t\t\t\t\t\t\t       p - namestring),\n+\t\t\t\t\t     true, VAR_DOMAIN, LOC_STATIC,\n \t\t\t\t\t     SECT_OFF_DATA (objfile),\n \t\t\t\t\t     psymbol_placement::GLOBAL,\n \t\t\t\t\t     sh.value,\n@@ -3080,21 +3082,20 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t    || (p == namestring + 1\n \t\t\t\t&& namestring[0] != ' '))\n \t\t\t  {\n-\t\t\t    add_psymbol_to_list (namestring, p - namestring, true,\n-\t\t\t\t\t\t STRUCT_DOMAIN, LOC_TYPEDEF,\n-\t\t\t\t\t\t -1,\n-\t\t\t\t\t\t psymbol_placement::STATIC,\n-\t\t\t\t\t\t 0, psymtab_language, objfile);\n+\t\t\t    add_psymbol_to_list\n+\t\t\t      (gdb::string_view (namestring, p - namestring),\n+\t\t\t       true, STRUCT_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t\t       psymbol_placement::STATIC, 0, psymtab_language,\n+\t\t\t       objfile);\n \t\t\t    if (p[2] == 't')\n \t\t\t      {\n \t\t\t\t/* Also a typedef with the same name.  */\n-\t\t\t\tadd_psymbol_to_list (namestring,\n-\t\t\t\t\t\t     p - namestring, true,\n-\t\t\t\t\t\t     VAR_DOMAIN, LOC_TYPEDEF,\n-\t\t\t\t\t\t     -1,\n-\t\t\t\t\t\t     psymbol_placement::STATIC,\n-\t\t\t\t\t\t     0, psymtab_language,\n-\t\t\t\t\t\t     objfile);\n+\t\t\t\tadd_psymbol_to_list\n+\t\t\t\t  (gdb::string_view (namestring,\n+\t\t\t\t\t\t     p - namestring),\n+\t\t\t\t   true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t\t\t   psymbol_placement::STATIC, 0,\n+\t\t\t\t   psymtab_language, objfile);\n \t\t\t\tp += 1;\n \t\t\t      }\n \t\t\t  }\n@@ -3103,11 +3104,12 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\tif (p != namestring)\t/* a name is there, not\n \t\t\t\t\t\t   just :T...  */\n \t\t\t  {\n-\t\t\t    add_psymbol_to_list (namestring, p - namestring,\n-\t\t\t\t\t\t true, VAR_DOMAIN, LOC_TYPEDEF,\n-\t\t\t\t\t\t -1,\n-\t\t\t\t\t\t psymbol_placement::STATIC,\n-\t\t\t\t\t\t 0, psymtab_language, objfile);\n+\t\t\t    add_psymbol_to_list\n+\t\t\t      (gdb::string_view (namestring,\n+\t\t\t\t\t\t p - namestring),\n+\t\t\t       true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t\t       psymbol_placement::STATIC, 0, psymtab_language,\n+\t\t\t       objfile);\n \t\t\t  }\n \t\t      check_enum:\n \t\t\t/* If this is an enumerated type, we need to add\n@@ -3168,9 +3170,10 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t\t/* Note that the value doesn't matter for\n \t\t\t\t   enum constants in psymtabs, just in\n \t\t\t\t   symtabs.  */\n-\t\t\t\tadd_psymbol_to_list (p, q - p, true,\n-\t\t\t\t\t\t     VAR_DOMAIN, LOC_CONST,\n-\t\t\t\t\t\t     -1,\n+\t\t\t\tadd_psymbol_to_list (gdb::string_view (p,\n+\t\t\t\t\t\t\t\t       q - p),\n+\t\t\t\t\t\t     true, VAR_DOMAIN,\n+\t\t\t\t\t\t     LOC_CONST, -1,\n \t\t\t\t\t\t     psymbol_placement::STATIC,\n \t\t\t\t\t\t     0, psymtab_language,\n \t\t\t\t\t\t     objfile);\n@@ -3187,8 +3190,9 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\tcontinue;\n \t\t      case 'c':\n \t\t\t/* Constant, e.g. from \"const\" in Pascal.  */\n-\t\t\tadd_psymbol_to_list (namestring, p - namestring, true,\n-\t\t\t\t\t     VAR_DOMAIN, LOC_CONST, -1,\n+\t\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n+\t\t\t\t\t\t\t       p - namestring),\n+\t\t\t\t\t     true, VAR_DOMAIN, LOC_CONST, -1,\n \t\t\t\t\t     psymbol_placement::STATIC,\n \t\t\t\t\t     0, psymtab_language, objfile);\n \t\t\tcontinue;\n@@ -3200,8 +3204,9 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t    function_outside_compilation_unit_complaint\n \t\t\t      (copy.c_str ());\n \t\t\t  }\n-\t\t\tadd_psymbol_to_list (namestring, p - namestring, true,\n-\t\t\t\t\t     VAR_DOMAIN, LOC_BLOCK,\n+\t\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n+\t\t\t\t\t\t\t       p - namestring),\n+\t\t\t\t\t     true, VAR_DOMAIN, LOC_BLOCK,\n \t\t\t\t\t     SECT_OFF_TEXT (objfile),\n \t\t\t\t\t     psymbol_placement::STATIC,\n \t\t\t\t\t     sh.value,\n@@ -3219,8 +3224,9 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t    function_outside_compilation_unit_complaint\n \t\t\t      (copy.c_str ());\n \t\t\t  }\n-\t\t\tadd_psymbol_to_list (namestring, p - namestring, true,\n-\t\t\t\t\t     VAR_DOMAIN, LOC_BLOCK,\n+\t\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n+\t\t\t\t\t\t\t       p - namestring),\n+\t\t\t\t\t     true, VAR_DOMAIN, LOC_BLOCK,\n \t\t\t\t\t     SECT_OFF_TEXT (objfile),\n \t\t\t\t\t     psymbol_placement::GLOBAL,\n \t\t\t\t\t     sh.value,\n@@ -3454,13 +3460,13 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t     symbol table, and the MAIN__ symbol via the minimal\n \t\t     symbol table.  */\n \t\t  if (sh.st == stProc)\n-\t\t    add_psymbol_to_list (sym_name, strlen (sym_name), true,\n+\t\t    add_psymbol_to_list (sym_name, true,\n \t\t\t\t\t VAR_DOMAIN, LOC_BLOCK,\n \t\t\t\t\t section,\n \t\t\t\t\t psymbol_placement::GLOBAL,\n \t\t\t\t\t sh.value, psymtab_language, objfile);\n \t\t  else\n-\t\t    add_psymbol_to_list (sym_name, strlen (sym_name), true,\n+\t\t    add_psymbol_to_list (sym_name, true,\n \t\t\t\t\t VAR_DOMAIN, LOC_BLOCK,\n \t\t\t\t\t section,\n \t\t\t\t\t psymbol_placement::STATIC,\n@@ -3527,7 +3533,7 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t      && sh.iss != 0\n \t\t      && sh.index != cur_sdx + 2)\n \t\t    {\n-\t\t      add_psymbol_to_list (sym_name, strlen (sym_name), true,\n+\t\t      add_psymbol_to_list (sym_name, true,\n \t\t\t\t\t   STRUCT_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t\t\t   psymbol_placement::STATIC,\n \t\t\t\t\t   0, psymtab_language, objfile);\n@@ -3567,7 +3573,7 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t  continue;\n \t\t}\n \t      /* Use this gdb symbol.  */\n-\t      add_psymbol_to_list (sym_name, strlen (sym_name), true,\n+\t      add_psymbol_to_list (sym_name, true,\n \t\t\t\t   VAR_DOMAIN, theclass, section,\n \t\t\t\t   psymbol_placement::STATIC,\n \t\t\t\t   sh.value, psymtab_language, objfile);\n@@ -3646,7 +3652,7 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t  break;\n \t\t}\n \t      char *sym_name = debug_info->ssext + psh->iss;\n-\t      add_psymbol_to_list (sym_name, strlen (sym_name), true,\n+\t      add_psymbol_to_list (sym_name, true,\n \t\t\t\t   VAR_DOMAIN, theclass,\n \t\t\t\t   section,\n \t\t\t\t   psymbol_placement::GLOBAL,\n@@ -3809,7 +3815,7 @@ handle_psymbol_enumerators (struct objfile *objfile, FDR *fh, int stype,\n \n       /* Note that the value doesn't matter for enum constants\n          in psymtabs, just in symtabs.  */\n-      add_psymbol_to_list (name, strlen (name), true,\n+      add_psymbol_to_list (name, true,\n \t\t\t   VAR_DOMAIN, LOC_CONST, -1,\n \t\t\t   psymbol_placement::STATIC, 0,\n \t\t\t   psymtab_language, objfile);\n@@ -4758,7 +4764,7 @@ new_symbol (const char *name)\n \n   SYMBOL_SET_LANGUAGE (s, psymtab_language,\n \t\t       &mdebugread_objfile->objfile_obstack);\n-  SYMBOL_SET_NAMES (s, name, strlen (name), 1, mdebugread_objfile);\n+  SYMBOL_SET_NAMES (s, name, true, mdebugread_objfile);\n   return s;\n }\n "
    },
    {
      "sha": "db3e546ae1aa80429ccbfa7732f6b356f7467e71",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 8,
      "deletions": 10,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/31edb802957b0073c571f48b9262e66b817fd360/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/31edb802957b0073c571f48b9262e66b817fd360/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=31edb802957b0073c571f48b9262e66b817fd360",
      "patch": "@@ -1086,7 +1086,7 @@ mst_str (minimal_symbol_type t)\n /* See minsyms.h.  */\n \n struct minimal_symbol *\n-minimal_symbol_reader::record_full (const char *name, int name_len,\n+minimal_symbol_reader::record_full (gdb::string_view name,\n \t\t\t\t    bool copy_name, CORE_ADDR address,\n \t\t\t\t    enum minimal_symbol_type ms_type,\n \t\t\t\t    int section)\n@@ -1100,24 +1100,22 @@ minimal_symbol_reader::record_full (const char *name, int name_len,\n      lookup_minimal_symbol_by_pc would have no way of getting the\n      right one.  */\n   if (ms_type == mst_file_text && name[0] == 'g'\n-      && (strcmp (name, GCC_COMPILED_FLAG_SYMBOL) == 0\n-\t  || strcmp (name, GCC2_COMPILED_FLAG_SYMBOL) == 0))\n+      && (name == GCC_COMPILED_FLAG_SYMBOL\n+\t  || name == GCC2_COMPILED_FLAG_SYMBOL))\n     return (NULL);\n \n   /* It's safe to strip the leading char here once, since the name\n      is also stored stripped in the minimal symbol table.  */\n   if (name[0] == get_symbol_leading_char (m_objfile->obfd))\n-    {\n-      ++name;\n-      --name_len;\n-    }\n+    name = name.substr (1);\n \n   if (ms_type == mst_file_text && startswith (name, \"__gnu_compiled\"))\n     return (NULL);\n \n   if (symtab_create_debug >= 2)\n-    printf_unfiltered (\"Recording minsym:  %-21s  %18s  %4d  %s\\n\",\n-               mst_str (ms_type), hex_string (address), section, name);\n+    printf_unfiltered (\"Recording minsym:  %-21s  %18s  %4d  %.*s\\n\",\n+               mst_str (ms_type), hex_string (address), section,\n+\t       (int) name.size (), name.data ());\n \n   if (m_msym_bunch_index == BUNCH_SIZE)\n     {\n@@ -1129,7 +1127,7 @@ minimal_symbol_reader::record_full (const char *name, int name_len,\n   msymbol = &m_msym_bunch->contents[m_msym_bunch_index];\n   symbol_set_language (msymbol, language_auto,\n \t\t       &m_objfile->per_bfd->storage_obstack);\n-  symbol_set_names (msymbol, name, name_len, copy_name, m_objfile->per_bfd);\n+  symbol_set_names (msymbol, name, copy_name, m_objfile->per_bfd);\n \n   SET_MSYMBOL_VALUE_ADDRESS (msymbol, address);\n   MSYMBOL_SECTION (msymbol) = section;"
    },
    {
      "sha": "deaecb4df613d97790e801c8415e66bba5b8dc42",
      "filename": "gdb/minsyms.h",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/31edb802957b0073c571f48b9262e66b817fd360/gdb/minsyms.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/31edb802957b0073c571f48b9262e66b817fd360/gdb/minsyms.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.h?ref=31edb802957b0073c571f48b9262e66b817fd360",
      "patch": "@@ -88,7 +88,6 @@ class minimal_symbol_reader\n      Arguments are:\n \n      NAME - the symbol's name\n-     NAME_LEN - the length of the name\n      COPY_NAME - if true, the minsym code must make a copy of NAME.  If\n      false, then NAME must be NUL-terminated, and must have a lifetime\n      that is at least as long as OBJFILE's lifetime.\n@@ -97,15 +96,14 @@ class minimal_symbol_reader\n      SECTION - the symbol's section\n   */\n \n-  struct minimal_symbol *record_full (const char *name,\n-\t\t\t\t      int name_len,\n+  struct minimal_symbol *record_full (gdb::string_view name,\n \t\t\t\t      bool copy_name,\n \t\t\t\t      CORE_ADDR address,\n \t\t\t\t      enum minimal_symbol_type ms_type,\n \t\t\t\t      int section);\n \n   /* Like record_full, but:\n-     - uses strlen to compute NAME_LEN,\n+     - computes the length of NAME\n      - passes COPY_NAME = true,\n      - and passes a default SECTION, depending on the type\n \n@@ -115,7 +113,7 @@ class minimal_symbol_reader\n \t       enum minimal_symbol_type ms_type);\n \n   /* Like record_full, but:\n-     - uses strlen to compute NAME_LEN,\n+     - computes the length of NAME\n      - passes COPY_NAME = true.\n \n      This variant does not return the new symbol.  */\n@@ -124,7 +122,7 @@ class minimal_symbol_reader\n \t\t\t enum minimal_symbol_type ms_type,\n \t\t\t int section)\n   {\n-    record_full (name, strlen (name), true, address, ms_type, section);\n+    record_full (name, true, address, ms_type, section);\n   }\n \n  private:"
    },
    {
      "sha": "19d692bd230e7019481d1deb9f480d00e755af6d",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/31edb802957b0073c571f48b9262e66b817fd360/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/31edb802957b0073c571f48b9262e66b817fd360/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=31edb802957b0073c571f48b9262e66b817fd360",
      "patch": "@@ -22,6 +22,7 @@\n \n #include \"psymtab.h\"\n #include \"objfiles.h\"\n+#include \"gdbsupport/gdb_string_view.h\"\n \n /* A partial_symbol records the name, domain, and address class of\n    symbols whose types we have not parsed yet.  For functions, it also\n@@ -304,7 +305,7 @@ enum class psymbol_placement\n    LANGUAGE is the language from which the symbol originates.  This will\n    influence, amongst other things, how the symbol name is demangled. */\n \n-extern void add_psymbol_to_list (const char *name, int namelength,\n+extern void add_psymbol_to_list (gdb::string_view name,\n \t\t\t\t bool copy_name, domain_enum domain,\n \t\t\t\t enum address_class theclass,\n \t\t\t\t short section,"
    },
    {
      "sha": "b30d29e6efa836472b3ba19ea90af0d6d43880fb",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/31edb802957b0073c571f48b9262e66b817fd360/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/31edb802957b0073c571f48b9262e66b817fd360/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=31edb802957b0073c571f48b9262e66b817fd360",
      "patch": "@@ -1568,7 +1568,7 @@ psymbol_compare (const void *addr1, const void *addr2, int length)\n    different domain (or address) is possible and correct.  */\n \n static struct partial_symbol *\n-add_psymbol_to_bcache (const char *name, int namelength, bool copy_name,\n+add_psymbol_to_bcache (gdb::string_view name, bool copy_name,\n \t\t       domain_enum domain,\n \t\t       enum address_class theclass,\n \t\t       short section,\n@@ -1585,7 +1585,7 @@ add_psymbol_to_bcache (const char *name, int namelength, bool copy_name,\n   psymbol.aclass = theclass;\n   symbol_set_language (&psymbol.ginfo, language,\n \t\t       objfile->partial_symtabs->obstack ());\n-  symbol_set_names (&psymbol.ginfo, name, namelength, copy_name,\n+  symbol_set_names (&psymbol.ginfo, name, copy_name,\n \t\t    objfile->per_bfd);\n \n   /* Stash the partial symbol away in the cache.  */\n@@ -1608,7 +1608,7 @@ append_psymbol_to_list (std::vector<partial_symbol *> *list,\n /* See psympriv.h.  */\n \n void\n-add_psymbol_to_list (const char *name, int namelength, bool copy_name,\n+add_psymbol_to_list (gdb::string_view name, bool copy_name,\n \t\t     domain_enum domain,\n \t\t     enum address_class theclass,\n \t\t     short section,\n@@ -1621,7 +1621,7 @@ add_psymbol_to_list (const char *name, int namelength, bool copy_name,\n   int added;\n \n   /* Stash the partial symbol away in the cache.  */\n-  psym = add_psymbol_to_bcache (name, namelength, copy_name, domain, theclass,\n+  psym = add_psymbol_to_bcache (name, copy_name, domain, theclass,\n \t\t\t\tsection, coreaddr, language, objfile, &added);\n \n   /* Do not duplicate global partial symbols.  */"
    },
    {
      "sha": "ef4aa47345c580e64c865f172483f8824a241a27",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/31edb802957b0073c571f48b9262e66b817fd360/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/31edb802957b0073c571f48b9262e66b817fd360/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=31edb802957b0073c571f48b9262e66b817fd360",
      "patch": "@@ -752,11 +752,12 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n       if (!new_name.empty ())\n \t{\n \t  SYMBOL_SET_NAMES (sym,\n-\t\t\t    new_name.c_str (), new_name.length (),\n+\t\t\t    new_name,\n \t\t\t    1, objfile);\n \t}\n       else\n-\tSYMBOL_SET_NAMES (sym, string, p - string, 1, objfile);\n+\tSYMBOL_SET_NAMES (sym, gdb::string_view (string, p - string), true,\n+\t\t\t  objfile);\n \n       if (SYMBOL_LANGUAGE (sym) == language_cplus)\n \tcp_scan_for_anonymous_namespaces (get_buildsym_compunit (), sym,"
    },
    {
      "sha": "060e676bbb60ac3a1a099be6a9070fb4635ee529",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 19,
      "deletions": 18,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/31edb802957b0073c571f48b9262e66b817fd360/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/31edb802957b0073c571f48b9262e66b817fd360/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=31edb802957b0073c571f48b9262e66b817fd360",
      "patch": "@@ -828,7 +828,7 @@ symbol_find_demangled_name (struct general_symbol_info *gsymbol,\n \n void\n symbol_set_names (struct general_symbol_info *gsymbol,\n-\t\t  const char *linkage_name, int len, bool copy_name,\n+\t\t  gdb::string_view linkage_name, bool copy_name,\n \t\t  struct objfile_per_bfd_storage *per_bfd)\n {\n   struct demangled_name_entry **slot;\n@@ -838,14 +838,14 @@ symbol_set_names (struct general_symbol_info *gsymbol,\n       /* In Ada, we do the symbol lookups using the mangled name, so\n          we can save some space by not storing the demangled name.  */\n       if (!copy_name)\n-\tgsymbol->name = linkage_name;\n+\tgsymbol->name = linkage_name.data ();\n       else\n \t{\n \t  char *name = (char *) obstack_alloc (&per_bfd->storage_obstack,\n-\t\t\t\t\t       len + 1);\n+\t\t\t\t\t       linkage_name.length () + 1);\n \n-\t  memcpy (name, linkage_name, len);\n-\t  name[len] = '\\0';\n+\t  memcpy (name, linkage_name.data (), linkage_name.length ());\n+\t  name[linkage_name.length ()] = '\\0';\n \t  gsymbol->name = name;\n \t}\n       symbol_set_demangled_name (gsymbol, NULL, &per_bfd->storage_obstack);\n@@ -856,7 +856,7 @@ symbol_set_names (struct general_symbol_info *gsymbol,\n   if (per_bfd->demangled_names_hash == NULL)\n     create_demangled_names_hash (per_bfd);\n \n-  struct demangled_name_entry entry (gdb::string_view (linkage_name, len));\n+  struct demangled_name_entry entry (linkage_name);\n   slot = ((struct demangled_name_entry **)\n \t  htab_find_slot (per_bfd->demangled_names_hash.get (),\n \t\t\t  &entry, INSERT));\n@@ -870,20 +870,21 @@ symbol_set_names (struct general_symbol_info *gsymbol,\n       /* A 0-terminated copy of the linkage name.  Callers must set COPY_NAME\n          to true if the string might not be nullterminated.  We have to make\n          this copy because demangling needs a nullterminated string.  */\n-      const char *linkage_name_copy;\n+      gdb::string_view linkage_name_copy;\n       if (copy_name)\n \t{\n-\t  char *alloc_name = (char *) alloca (len + 1);\n-\t  memcpy (alloc_name, linkage_name, len);\n-\t  alloc_name[len] = '\\0';\n+\t  char *alloc_name = (char *) alloca (linkage_name.length () + 1);\n+\t  memcpy (alloc_name, linkage_name.data (), linkage_name.length ());\n+\t  alloc_name[linkage_name.length ()] = '\\0';\n \n-\t  linkage_name_copy = alloc_name;\n+\t  linkage_name_copy = gdb::string_view (alloc_name,\n+\t\t\t\t\t\tlinkage_name.length ());\n \t}\n       else\n \tlinkage_name_copy = linkage_name;\n \n       gdb::unique_xmalloc_ptr<char> demangled_name_ptr\n-\t(symbol_find_demangled_name (gsymbol, linkage_name_copy));\n+\t(symbol_find_demangled_name (gsymbol, linkage_name_copy.data ()));\n \n       /* Suppose we have demangled_name==NULL, copy_name==0, and\n \t linkage_name_copy==linkage_name.  In this case, we already have the\n@@ -900,8 +901,7 @@ symbol_set_names (struct general_symbol_info *gsymbol,\n \t    = ((struct demangled_name_entry *)\n \t       obstack_alloc (&per_bfd->storage_obstack,\n \t\t\t      sizeof (demangled_name_entry)));\n-\t  new (*slot) demangled_name_entry\n-\t    (gdb::string_view (linkage_name, len));\n+\t  new (*slot) demangled_name_entry (linkage_name);\n \t}\n       else\n \t{\n@@ -910,12 +910,13 @@ symbol_set_names (struct general_symbol_info *gsymbol,\n \t  *slot\n \t    = ((struct demangled_name_entry *)\n \t       obstack_alloc (&per_bfd->storage_obstack,\n-\t\t\t      sizeof (demangled_name_entry) + len + 1));\n+\t\t\t      sizeof (demangled_name_entry)\n+\t\t\t      + linkage_name.length () + 1));\n \t  char *mangled_ptr = reinterpret_cast<char *> (*slot + 1);\n-\t  memcpy (mangled_ptr, linkage_name, len);\n-\t  mangled_ptr [len] = '\\0';\n+\t  memcpy (mangled_ptr, linkage_name.data (), linkage_name.length ());\n+\t  mangled_ptr [linkage_name.length ()] = '\\0';\n \t  new (*slot) demangled_name_entry\n-\t    (gdb::string_view (mangled_ptr, len));\n+\t    (gdb::string_view (mangled_ptr, linkage_name.length ()));\n \t}\n       (*slot)->demangled = std::move (demangled_name_ptr);\n       (*slot)->language = gsymbol->language;"
    },
    {
      "sha": "20c11d16cf84b16e517e3ccf4b990d5985169a6a",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/31edb802957b0073c571f48b9262e66b817fd360/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/31edb802957b0073c571f48b9262e66b817fd360/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=31edb802957b0073c571f48b9262e66b817fd360",
      "patch": "@@ -29,6 +29,7 @@\n #include \"gdbsupport/enum-flags.h\"\n #include \"gdbsupport/function-view.h\"\n #include \"gdbsupport/gdb_optional.h\"\n+#include \"gdbsupport/gdb_string_view.h\"\n #include \"gdbsupport/next-iterator.h\"\n #include \"completer.h\"\n \n@@ -506,11 +507,11 @@ extern void symbol_set_language (struct general_symbol_info *symbol,\n /* Set the linkage and natural names of a symbol, by demangling\n    the linkage name.  If linkage_name may not be nullterminated,\n    copy_name must be set to true.  */\n-#define SYMBOL_SET_NAMES(symbol,linkage_name,len,copy_name,objfile)\t\\\n-  symbol_set_names (&(symbol)->ginfo, linkage_name, len, copy_name, \\\n+#define SYMBOL_SET_NAMES(symbol,linkage_name,copy_name,objfile)\t\\\n+  symbol_set_names (&(symbol)->ginfo, linkage_name, copy_name, \\\n \t\t    (objfile)->per_bfd)\n extern void symbol_set_names (struct general_symbol_info *symbol,\n-\t\t\t      const char *linkage_name, int len, bool copy_name,\n+\t\t\t      gdb::string_view linkage_name, bool copy_name,\n \t\t\t      struct objfile_per_bfd_storage *per_bfd);\n \n /* Now come lots of name accessor macros.  Short version as to when to"
    },
    {
      "sha": "20a21872d1cc87a8d74c1c2bc3d55a0a7d610986",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 25,
      "deletions": 17,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/31edb802957b0073c571f48b9262e66b817fd360/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/31edb802957b0073c571f48b9262e66b817fd360/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=31edb802957b0073c571f48b9262e66b817fd360",
      "patch": "@@ -2634,8 +2634,9 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t  namestring = gdbarch_static_transform_name\n \t\t\t\t (gdbarch, namestring);\n \n-\t\tadd_psymbol_to_list (namestring, p - namestring, true,\n-\t\t\t\t     VAR_DOMAIN, LOC_STATIC,\n+\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n+\t\t\t\t\t\t       p - namestring),\n+\t\t\t\t     true, VAR_DOMAIN, LOC_STATIC,\n \t\t\t\t     SECT_OFF_DATA (objfile),\n \t\t\t\t     psymbol_placement::STATIC,\n \t\t\t\t     symbol.n_value,\n@@ -2645,8 +2646,9 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t      case 'G':\n \t\t/* The addresses in these entries are reported to be\n \t\t   wrong.  See the code that reads 'G's for symtabs.  */\n-\t\tadd_psymbol_to_list (namestring, p - namestring, true,\n-\t\t\t\t     VAR_DOMAIN, LOC_STATIC,\n+\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n+\t\t\t\t\t\t       p - namestring),\n+\t\t\t\t     true, VAR_DOMAIN, LOC_STATIC,\n \t\t\t\t     SECT_OFF_DATA (objfile),\n \t\t\t\t     psymbol_placement::GLOBAL,\n \t\t\t\t     symbol.n_value,\n@@ -2664,15 +2666,17 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t    || (p == namestring + 1\n \t\t\t&& namestring[0] != ' '))\n \t\t  {\n-\t\t    add_psymbol_to_list (namestring, p - namestring, true,\n-\t\t\t\t\t STRUCT_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t    add_psymbol_to_list (gdb::string_view (namestring,\n+\t\t\t\t\t\t\t   p - namestring),\n+\t\t\t\t\t true, STRUCT_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t\t\t psymbol_placement::STATIC,\n \t\t\t\t\t 0, psymtab_language, objfile);\n \t\t    if (p[2] == 't')\n \t\t      {\n \t\t\t/* Also a typedef with the same name.  */\n-\t\t\tadd_psymbol_to_list (namestring, p - namestring, true,\n-\t\t\t\t\t     VAR_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n+\t\t\t\t\t\t\t       p - namestring),\n+\t\t\t\t\t     true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t\t\t     psymbol_placement::STATIC,\n \t\t\t\t\t     0, psymtab_language, objfile);\n \t\t\tp += 1;\n@@ -2683,8 +2687,9 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t      case 't':\n \t\tif (p != namestring)\t/* a name is there, not just :T...  */\n \t\t  {\n-\t\t    add_psymbol_to_list (namestring, p - namestring, true,\n-\t\t\t\t\t VAR_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t    add_psymbol_to_list (gdb::string_view (namestring,\n+\t\t\t\t\t\t\t   p - namestring),\n+\t\t\t\t\t true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t\t\t psymbol_placement::STATIC,\n \t\t\t\t\t 0, psymtab_language, objfile);\n \t\t  }\n@@ -2745,7 +2750,7 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t\t  ;\n \t\t\t/* Note that the value doesn't matter for\n \t\t\t   enum constants in psymtabs, just in symtabs.  */\n-\t\t\tadd_psymbol_to_list (p, q - p, true,\n+\t\t\tadd_psymbol_to_list (gdb::string_view (p, q - p), true,\n \t\t\t\t\t     VAR_DOMAIN, LOC_CONST, -1,\n \t\t\t\t\t     psymbol_placement::STATIC,\n \t\t\t\t\t     0, psymtab_language, objfile);\n@@ -2763,8 +2768,9 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \n \t      case 'c':\n \t\t/* Constant, e.g. from \"const\" in Pascal.  */\n-\t\tadd_psymbol_to_list (namestring, p - namestring, true,\n-\t\t\t\t     VAR_DOMAIN, LOC_CONST, -1,\n+\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n+\t\t\t\t\t\t       p - namestring),\n+\t\t\t\t     true, VAR_DOMAIN, LOC_CONST, -1,\n \t\t\t\t     psymbol_placement::STATIC,\n \t\t\t\t     0, psymtab_language, objfile);\n \t\tcontinue;\n@@ -2780,8 +2786,9 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t    function_outside_compilation_unit_complaint (name);\n \t\t    xfree (name);\n \t\t  }\n-\t\tadd_psymbol_to_list (namestring, p - namestring, true,\n-\t\t\t\t     VAR_DOMAIN, LOC_BLOCK,\n+\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n+\t\t\t\t\t\t       p - namestring),\n+\t\t\t\t     true, VAR_DOMAIN, LOC_BLOCK,\n \t\t\t\t     SECT_OFF_TEXT (objfile),\n \t\t\t\t     psymbol_placement::STATIC,\n \t\t\t\t     symbol.n_value,\n@@ -2810,8 +2817,9 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\tif (startswith (namestring, \"@FIX\"))\n \t\t  continue;\n \n-\t\tadd_psymbol_to_list (namestring, p - namestring, true,\n-\t\t\t\t     VAR_DOMAIN, LOC_BLOCK,\n+\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n+\t\t\t\t\t\t       p - namestring),\n+\t\t\t\t     true, VAR_DOMAIN, LOC_BLOCK,\n \t\t\t\t     SECT_OFF_TEXT (objfile),\n \t\t\t\t     psymbol_placement::GLOBAL,\n \t\t\t\t     symbol.n_value,"
    }
  ]
}