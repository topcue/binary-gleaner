{
  "sha": "89e1cf9cb46c091441e5c7c992fbb19fdc9d4ec4",
  "node_id": "C_kwDOANOeidoAKDg5ZTFjZjljYjQ2YzA5MTQ0MWU1YzdjOTkyZmJiMTlmZGM5ZDRlYzQ",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-11-18T21:35:31Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-11-18T21:35:31Z"
    },
    "message": "gdb: fix ia64-tdep.c build with g++ 4.8\n\nWhen building with g++ 4.8, I get:\n\n      CXX    ia64-tdep.o\n    /home/smarchi/src/binutils-gdb/gdb/ia64-tdep.c:3862:1: error: could not convert '{ia64_allocate_new_rse_frame, ia64_store_argument_in_slot, ia64_set_function_addr}' from '<brace\n-enclosed initializer list>' to 'const ia64_infcall_ops'\n     };\n     ^\n\nThis happens since commit 345bd07cce3 (\"gdb: fix gdbarch_tdep ODR\nviolation\"), which added default values for ia64_infcall_ops fields.  It\nlooks like g++ 4.8 doesn't like initializing the ia64_infcall_ops object\nusing the brace-enclosed initializer list when the ia64_infcall_ops\nfields are assigned default values.\n\nLater compilers don't have a problem with that, so I suppose that the\ncode is correct, but still, change it to make gcc 4.8 happy.  Don't\ninitialize the fields of ia64_infcall_ops directly, instead\ndefault-initialize ia64_gdbarch_tdep::infcall_ops.\n\nChange-Id: I35e3a61abd7b7bbcafe6cb207078c738c5266d76",
    "tree": {
      "sha": "d62968535faff5008b4a62ddba2b2f40220d9f36",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d62968535faff5008b4a62ddba2b2f40220d9f36"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/89e1cf9cb46c091441e5c7c992fbb19fdc9d4ec4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89e1cf9cb46c091441e5c7c992fbb19fdc9d4ec4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/89e1cf9cb46c091441e5c7c992fbb19fdc9d4ec4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89e1cf9cb46c091441e5c7c992fbb19fdc9d4ec4/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "629f88f80a8ffc795c69773ff576861ea75d6205",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/629f88f80a8ffc795c69773ff576861ea75d6205",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/629f88f80a8ffc795c69773ff576861ea75d6205"
    }
  ],
  "stats": {
    "total": 9,
    "additions": 4,
    "deletions": 5
  },
  "files": [
    {
      "sha": "d831484ee57ee6c428205d2fa8f3ba1f4a859579",
      "filename": "gdb/ia64-tdep.h",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/89e1cf9cb46c091441e5c7c992fbb19fdc9d4ec4/gdb/ia64-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/89e1cf9cb46c091441e5c7c992fbb19fdc9d4ec4/gdb/ia64-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ia64-tdep.h?ref=89e1cf9cb46c091441e5c7c992fbb19fdc9d4ec4",
      "patch": "@@ -216,18 +216,17 @@ struct ia64_infcall_ops\n \n      Should do nothing if this operation is not permitted by the OS.  */\n   void (*allocate_new_rse_frame) (struct regcache *regcache, ULONGEST bsp,\n-\t\t\t\t  int sof) = nullptr;\n+\t\t\t\t  int sof);\n \n   /* Store the argument stored in BUF into the appropriate location\n      given the BSP and the SLOTNUM.  */\n   void (*store_argument_in_slot) (struct regcache *regcache, CORE_ADDR bsp,\n-\t\t\t\t  int slotnum, gdb_byte *buf) = nullptr;\n+\t\t\t\t  int slotnum, gdb_byte *buf);\n \n   /* For targets where we cannot call the function directly, store\n      the address of the function we want to call at the location\n      expected by the calling sequence.  */\n-  void (*set_function_addr) (struct regcache *regcache, CORE_ADDR func_addr)\n-    = nullptr;\n+  void (*set_function_addr) (struct regcache *regcache, CORE_ADDR func_addr);\n };\n \n struct ia64_gdbarch_tdep : gdbarch_tdep\n@@ -255,7 +254,7 @@ struct ia64_gdbarch_tdep : gdbarch_tdep\n   /* ISA-specific data types.  */\n   struct type *ia64_ext_type = nullptr;\n \n-  struct ia64_infcall_ops infcall_ops;\n+  struct ia64_infcall_ops infcall_ops {};\n };\n \n extern void ia64_write_pc (struct regcache *, CORE_ADDR);"
    }
  ]
}