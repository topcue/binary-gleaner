{
  "sha": "7e183d273682fe94c6b9777ae2f3d981f415b8cd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2UxODNkMjczNjgyZmU5NGM2Yjk3NzdhZTJmM2Q5ODFmNDE1YjhjZA==",
  "commit": {
    "author": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2020-07-03T20:32:08Z"
    },
    "committer": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2020-07-22T19:44:13Z"
    },
    "message": "Add new gdbarch method, read_core_file_mappings\n\nThe new gdbarch method, read_core_file_mappings, will be used for\nreading file-backed mappings from a core file.  It'll be used\nfor two purposes: 1) to construct a table of file-backed mappings\nin corelow.c, and 2) for display of core file mappings.\n\nFor Linux, I tried a different approach in which knowledge of the note\nformat was placed directly in corelow.c.  This seemed okay at first;\nit was only one note format and the note format was fairly simple.\nAfter looking at FreeBSD's note/mapping reading code, I concluded\nthat it's best to leave architecture specific details for decoding\nthe note in (architecture specific) tdep files.\n\nWith regard to display of core file mappings, I experimented with\nplacing the mappings display code in corelow.c.  It has access to the\nfile-backed mappings which were read in when the core file was loaded.\nAnd, better, still common code could be used for all architectures.\nBut, again, the FreeBSD mapping code convinced me that this was not\nthe best approach since it has even more mapping info than Linux.\nDisplay code which would work well for Linux will leave out mappings\nas well as protection info for mappings.\n\nSo, for these reasons, I'm introducing a new gdbarch method for\nreading core file mappings.\n\ngdb/ChangeLog:\n\n\t* arch-utils.c (default_read_core_file_mappings): New function.\n\t* arch-utils.c (default_read_core_file_mappings): Declare.\n\t* gdbarch.sh (read_core_file_mappings): New gdbarch method.\n\t* gdbarch.h, gdbarch.c: Regenerate.",
    "tree": {
      "sha": "aaaba0da3cfd0faf29d83537da10d1c03fe6a7cc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/aaaba0da3cfd0faf29d83537da10d1c03fe6a7cc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7e183d273682fe94c6b9777ae2f3d981f415b8cd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7e183d273682fe94c6b9777ae2f3d981f415b8cd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7e183d273682fe94c6b9777ae2f3d981f415b8cd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7e183d273682fe94c6b9777ae2f3d981f415b8cd/comments",
  "author": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5efb677960e786a7cfa3b5a53f15cc6656f33f02",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5efb677960e786a7cfa3b5a53f15cc6656f33f02",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5efb677960e786a7cfa3b5a53f15cc6656f33f02"
    }
  ],
  "stats": {
    "total": 67,
    "additions": 67,
    "deletions": 0
  },
  "files": [
    {
      "sha": "f5925c6e0829ad166456ee4e12cdfdeb81d77bcb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e183d273682fe94c6b9777ae2f3d981f415b8cd/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e183d273682fe94c6b9777ae2f3d981f415b8cd/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7e183d273682fe94c6b9777ae2f3d981f415b8cd",
      "patch": "@@ -1,3 +1,10 @@\n+2020-07-22  Kevin Buettner  <kevinb@redhat.com>\n+\n+\t* arch-utils.c (default_read_core_file_mappings): New function.\n+\t* arch-utils.c (default_read_core_file_mappings): Declare.\n+\t* gdbarch.sh (read_core_file_mappings): New gdbarch method.\n+\t* gdbarch.h, gdbarch.c: Regenerate.\n+\n 2020-07-22  Kevin Buettner  <kevinb@redhat.com>\n \n \tPR corefiles/25631"
    },
    {
      "sha": "12e3b8dbbb97ddad3b1ffc9ea626d8c601cf5610",
      "filename": "gdb/arch-utils.c",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e183d273682fe94c6b9777ae2f3d981f415b8cd/gdb/arch-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e183d273682fe94c6b9777ae2f3d981f415b8cd/gdb/arch-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch-utils.c?ref=7e183d273682fe94c6b9777ae2f3d981f415b8cd",
      "patch": "@@ -1036,6 +1036,22 @@ default_get_pc_address_flags (frame_info *frame, CORE_ADDR pc)\n   return \"\";\n }\n \n+/* See arch-utils.h.  */\n+void\n+default_read_core_file_mappings (struct gdbarch *gdbarch,\n+                                 struct bfd *cbfd,\n+\t\t\t\t gdb::function_view<void (ULONGEST count)>\n+\t\t\t\t   pre_loop_cb,\n+\t\t\t\t gdb::function_view<void (int num,\n+\t\t\t\t                          ULONGEST start,\n+\t\t\t\t\t\t\t  ULONGEST end,\n+\t\t\t\t\t\t\t  ULONGEST file_ofs,\n+\t\t\t\t\t\t\t  const char *filename,\n+\t\t\t\t\t\t\t  const void *other)>\n+\t\t\t\t   loop_cb)\n+{\n+}\n+\n void _initialize_gdbarch_utils ();\n void\n _initialize_gdbarch_utils ()"
    },
    {
      "sha": "8cb0db04c8c4121295a08e2634e6674e43797e22",
      "filename": "gdb/arch-utils.h",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e183d273682fe94c6b9777ae2f3d981f415b8cd/gdb/arch-utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e183d273682fe94c6b9777ae2f3d981f415b8cd/gdb/arch-utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch-utils.h?ref=7e183d273682fe94c6b9777ae2f3d981f415b8cd",
      "patch": "@@ -280,4 +280,16 @@ extern ULONGEST default_type_align (struct gdbarch *gdbarch,\n extern std::string default_get_pc_address_flags (frame_info *frame,\n \t\t\t\t\t\t CORE_ADDR pc);\n \n+/* Default implementation of gdbarch read_core_file_mappings method.  */\n+extern void default_read_core_file_mappings (struct gdbarch *gdbarch,\n+\t\t\t\t\t     struct bfd *cbfd,\n+\t\t\t\t\t     gdb::function_view<void (ULONGEST count)>\n+\t\t\t\t\t       pre_loop_cb,\n+\t\t\t\t\t     gdb::function_view<void (int num,\n+\t\t\t\t\t\t\t\t      ULONGEST start,\n+\t\t\t\t\t\t\t\t      ULONGEST end,\n+\t\t\t\t\t\t\t\t      ULONGEST file_ofs,\n+\t\t\t\t\t\t\t\t      const char *filename,\n+\t\t\t\t\t\t\t\t      const void *other)>\n+\t\t\t\t\t       loop_cb);\n #endif /* ARCH_UTILS_H */"
    },
    {
      "sha": "f8fe03ca6820f9931f4b56ddab610731bf3f497f",
      "filename": "gdb/gdbarch.c",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e183d273682fe94c6b9777ae2f3d981f415b8cd/gdb/gdbarch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e183d273682fe94c6b9777ae2f3d981f415b8cd/gdb/gdbarch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.c?ref=7e183d273682fe94c6b9777ae2f3d981f415b8cd",
      "patch": "@@ -348,6 +348,7 @@ struct gdbarch\n   const disasm_options_and_args_t * valid_disassembler_options;\n   gdbarch_type_align_ftype *type_align;\n   gdbarch_get_pc_address_flags_ftype *get_pc_address_flags;\n+  gdbarch_read_core_file_mappings_ftype *read_core_file_mappings;\n };\n \n /* Create a new ``struct gdbarch'' based on information provided by\n@@ -464,6 +465,7 @@ gdbarch_alloc (const struct gdbarch_info *info,\n   gdbarch->addressable_memory_unit_size = default_addressable_memory_unit_size;\n   gdbarch->type_align = default_type_align;\n   gdbarch->get_pc_address_flags = default_get_pc_address_flags;\n+  gdbarch->read_core_file_mappings = default_read_core_file_mappings;\n   /* gdbarch_alloc() */\n \n   return gdbarch;\n@@ -712,6 +714,7 @@ verify_gdbarch (struct gdbarch *gdbarch)\n   /* Skip verify of valid_disassembler_options, invalid_p == 0 */\n   /* Skip verify of type_align, invalid_p == 0 */\n   /* Skip verify of get_pc_address_flags, invalid_p == 0 */\n+  /* Skip verify of read_core_file_mappings, invalid_p == 0 */\n   if (!log.empty ())\n     internal_error (__FILE__, __LINE__,\n                     _(\"verify_gdbarch: the following are invalid ...%s\"),\n@@ -1275,6 +1278,9 @@ gdbarch_dump (struct gdbarch *gdbarch, struct ui_file *file)\n   fprintf_unfiltered (file,\n                       \"gdbarch_dump: ravenscar_ops = %s\\n\",\n                       host_address_to_string (gdbarch->ravenscar_ops));\n+  fprintf_unfiltered (file,\n+                      \"gdbarch_dump: read_core_file_mappings = <%s>\\n\",\n+                      host_address_to_string (gdbarch->read_core_file_mappings));\n   fprintf_unfiltered (file,\n                       \"gdbarch_dump: gdbarch_read_pc_p() = %d\\n\",\n                       gdbarch_read_pc_p (gdbarch));\n@@ -5137,6 +5143,23 @@ set_gdbarch_get_pc_address_flags (struct gdbarch *gdbarch,\n   gdbarch->get_pc_address_flags = get_pc_address_flags;\n }\n \n+void\n+gdbarch_read_core_file_mappings (struct gdbarch *gdbarch, struct bfd *cbfd,gdb::function_view<void (ULONGEST count)> pre_loop_cb,gdb::function_view<void (int num, ULONGEST start, ULONGEST end, ULONGEST file_ofs, const char *filename, const void *other)> loop_cb)\n+{\n+  gdb_assert (gdbarch != NULL);\n+  gdb_assert (gdbarch->read_core_file_mappings != NULL);\n+  if (gdbarch_debug >= 2)\n+    fprintf_unfiltered (gdb_stdlog, \"gdbarch_read_core_file_mappings called\\n\");\n+  gdbarch->read_core_file_mappings (gdbarch, cbfd, pre_loop_cb, loop_cb);\n+}\n+\n+void\n+set_gdbarch_read_core_file_mappings (struct gdbarch *gdbarch,\n+                                     gdbarch_read_core_file_mappings_ftype read_core_file_mappings)\n+{\n+  gdbarch->read_core_file_mappings = read_core_file_mappings;\n+}\n+\n \n /* Keep a registry of per-architecture data-pointers required by GDB\n    modules.  */"
    },
    {
      "sha": "7a3060e628d2aaf8fa3254aad262c383e3c80b0a",
      "filename": "gdb/gdbarch.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e183d273682fe94c6b9777ae2f3d981f415b8cd/gdb/gdbarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e183d273682fe94c6b9777ae2f3d981f415b8cd/gdb/gdbarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.h?ref=7e183d273682fe94c6b9777ae2f3d981f415b8cd",
      "patch": "@@ -1627,6 +1627,12 @@ typedef std::string (gdbarch_get_pc_address_flags_ftype) (frame_info *frame, COR\n extern std::string gdbarch_get_pc_address_flags (struct gdbarch *gdbarch, frame_info *frame, CORE_ADDR pc);\n extern void set_gdbarch_get_pc_address_flags (struct gdbarch *gdbarch, gdbarch_get_pc_address_flags_ftype *get_pc_address_flags);\n \n+/* Read core file mappings */\n+\n+typedef void (gdbarch_read_core_file_mappings_ftype) (struct gdbarch *gdbarch, struct bfd *cbfd,gdb::function_view<void (ULONGEST count)> pre_loop_cb,gdb::function_view<void (int num, ULONGEST start, ULONGEST end, ULONGEST file_ofs, const char *filename, const void *other)> loop_cb);\n+extern void gdbarch_read_core_file_mappings (struct gdbarch *gdbarch, struct bfd *cbfd,gdb::function_view<void (ULONGEST count)> pre_loop_cb,gdb::function_view<void (int num, ULONGEST start, ULONGEST end, ULONGEST file_ofs, const char *filename, const void *other)> loop_cb);\n+extern void set_gdbarch_read_core_file_mappings (struct gdbarch *gdbarch, gdbarch_read_core_file_mappings_ftype *read_core_file_mappings);\n+\n extern struct gdbarch_tdep *gdbarch_tdep (struct gdbarch *gdbarch);\n \n "
    },
    {
      "sha": "6d3c5c889d6946fd867df16d9b7ddb42417cced5",
      "filename": "gdb/gdbarch.sh",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7e183d273682fe94c6b9777ae2f3d981f415b8cd/gdb/gdbarch.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7e183d273682fe94c6b9777ae2f3d981f415b8cd/gdb/gdbarch.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.sh?ref=7e183d273682fe94c6b9777ae2f3d981f415b8cd",
      "patch": "@@ -1176,6 +1176,9 @@ m;ULONGEST;type_align;struct type *type;type;;default_type_align;;0\n # Return a string containing any flags for the given PC in the given FRAME.\n f;std::string;get_pc_address_flags;frame_info *frame, CORE_ADDR pc;frame, pc;;default_get_pc_address_flags;;0\n \n+# Read core file mappings\n+m;void;read_core_file_mappings;struct bfd *cbfd,gdb::function_view<void (ULONGEST count)> pre_loop_cb,gdb::function_view<void (int num, ULONGEST start, ULONGEST end, ULONGEST file_ofs, const char *filename, const void *other)> loop_cb;cbfd, pre_loop_cb, loop_cb;;default_read_core_file_mappings;;0\n+\n EOF\n }\n "
    }
  ]
}