{
  "sha": "6ad036d703099508c388038b57c77a8f7aaffb1d",
  "node_id": "C_kwDOANOeidoAKDZhZDAzNmQ3MDMwOTk1MDhjMzg4MDM4YjU3Yzc3YThmN2FhZmZiMWQ",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-08-20T16:05:10Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-09-24T15:29:09Z"
    },
    "message": "Fix handling of DW_AT_data_bit_offset\n\nA newer version of GCC will now emit member locations using just\nDW_AT_data_bit_offset, like:\n\n <3><14fe>: Abbrev Number: 1 (DW_TAG_member)\n    <14ff>   DW_AT_name        : (indirect string, offset: 0x215e): nb_bytes\n    <1503>   DW_AT_decl_file   : 1\n    <1503>   DW_AT_decl_line   : 10\n    <1504>   DW_AT_decl_column : 7\n    <1505>   DW_AT_type        : <0x150b>\n    <1509>   DW_AT_bit_size    : 31\n    <150a>   DW_AT_data_bit_offset: 64\n\nwhereas earlier versions would emit something like:\n\n <3><164f>: Abbrev Number: 7 (DW_TAG_member)\n    <1650>   DW_AT_name        : (indirect string, offset: 0x218d): nb_bytes\n    <1654>   DW_AT_decl_file   : 1\n    <1655>   DW_AT_decl_line   : 10\n    <1656>   DW_AT_decl_column : 7\n    <1657>   DW_AT_type        : <0x165f>\n    <165b>   DW_AT_byte_size   : 4\n    <165c>   DW_AT_bit_size    : 31\n    <165d>   DW_AT_bit_offset  : 1\n    <165e>   DW_AT_data_member_location: 8\n\nThat is, DW_AT_data_member_location is not emitted any more.  This is\na change due to the switch to DWARF 5 by default.\n\nThis change pointed out an existing bug in gdb, namely that the\nattr_to_dynamic_prop depends on the presence of\nDW_AT_data_member_location.  This patch moves the handling of\nDW_AT_data_bit_offset into handle_data_member_location, and updates\nattr_to_dynamic_prop to handle this new case.\n\nA new test case is included.  This test fails with GCC 11, but passes\nwith an earlier version of GCC.",
    "tree": {
      "sha": "72713be9603f7a609a6adfd96b3bed39f577f6c1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/72713be9603f7a609a6adfd96b3bed39f577f6c1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6ad036d703099508c388038b57c77a8f7aaffb1d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6ad036d703099508c388038b57c77a8f7aaffb1d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6ad036d703099508c388038b57c77a8f7aaffb1d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6ad036d703099508c388038b57c77a8f7aaffb1d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fbd6ddfdbf6c41fed3f355e278f68e8e0433ad0d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fbd6ddfdbf6c41fed3f355e278f68e8e0433ad0d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fbd6ddfdbf6c41fed3f355e278f68e8e0433ad0d"
    }
  ],
  "stats": {
    "total": 131,
    "additions": 114,
    "deletions": 17
  },
  "files": [
    {
      "sha": "d2501c9dd5624501ace63e75719cb3490f6b2189",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 32,
      "deletions": 17,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6ad036d703099508c388038b57c77a8f7aaffb1d/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6ad036d703099508c388038b57c77a8f7aaffb1d/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=6ad036d703099508c388038b57c77a8f7aaffb1d",
      "patch": "@@ -14420,14 +14420,14 @@ dwarf2_access_attribute (struct die_info *die, struct dwarf2_cu *cu)\n     }\n }\n \n-/* Look for DW_AT_data_member_location.  Set *OFFSET to the byte\n-   offset.  If the attribute was not found return 0, otherwise return\n-   1.  If it was found but could not properly be handled, set *OFFSET\n-   to 0.  */\n+/* Look for DW_AT_data_member_location or DW_AT_data_bit_offset.  Set\n+   *OFFSET to the byte offset.  If the attribute was not found return\n+   0, otherwise return 1.  If it was found but could not properly be\n+   handled, set *OFFSET to 0.  */\n \n static int\n-handle_data_member_location (struct die_info *die, struct dwarf2_cu *cu,\n-\t\t\t     LONGEST *offset)\n+handle_member_location (struct die_info *die, struct dwarf2_cu *cu,\n+\t\t\tLONGEST *offset)\n {\n   struct attribute *attr;\n \n@@ -14451,15 +14451,25 @@ handle_data_member_location (struct die_info *die, struct dwarf2_cu *cu,\n \n       return 1;\n     }\n+  else\n+    {\n+      attr = dwarf2_attr (die, DW_AT_data_bit_offset, cu);\n+      if (attr != nullptr)\n+\t{\n+\t  *offset = attr->constant_value (0);\n+\t  return 1;\n+\t}\n+    }\n \n   return 0;\n }\n \n-/* Look for DW_AT_data_member_location and store the results in FIELD.  */\n+/* Look for DW_AT_data_member_location or DW_AT_data_bit_offset and\n+   store the results in FIELD.  */\n \n static void\n-handle_data_member_location (struct die_info *die, struct dwarf2_cu *cu,\n-\t\t\t     struct field *field)\n+handle_member_location (struct die_info *die, struct dwarf2_cu *cu,\n+\t\t\tstruct field *field)\n {\n   struct attribute *attr;\n \n@@ -14501,6 +14511,12 @@ handle_data_member_location (struct die_info *die, struct dwarf2_cu *cu,\n       else\n \tdwarf2_complex_location_expr_complaint ();\n     }\n+  else\n+    {\n+      attr = dwarf2_attr (die, DW_AT_data_bit_offset, cu);\n+      if (attr != nullptr)\n+\tSET_FIELD_BITPOS (*field, attr->constant_value (0));\n+    }\n }\n \n /* Add an aggregate field to the field list.  */\n@@ -14562,7 +14578,7 @@ dwarf2_add_field (struct field_info *fip, struct die_info *die,\n \t}\n \n       /* Get bit offset of field.  */\n-      handle_data_member_location (die, cu, fp);\n+      handle_member_location (die, cu, fp);\n       attr = dwarf2_attr (die, DW_AT_bit_offset, cu);\n       if (attr != nullptr && attr->form_is_constant ())\n \t{\n@@ -14609,10 +14625,6 @@ dwarf2_add_field (struct field_info *fip, struct die_info *die,\n \t\t\t\t - bit_offset - FIELD_BITSIZE (*fp)));\n \t    }\n \t}\n-      attr = dwarf2_attr (die, DW_AT_data_bit_offset, cu);\n-      if (attr != NULL)\n-\tSET_FIELD_BITPOS (*fp, (FIELD_BITPOS (*fp)\n-\t\t\t\t+ attr->constant_value (0)));\n \n       /* Get name of field.  */\n       fieldname = dwarf2_name (die, cu);\n@@ -14673,7 +14685,7 @@ dwarf2_add_field (struct field_info *fip, struct die_info *die,\n   else if (die->tag == DW_TAG_inheritance)\n     {\n       /* C++ base class field.  */\n-      handle_data_member_location (die, cu, fp);\n+      handle_member_location (die, cu, fp);\n       FIELD_BITSIZE (*fp) = 0;\n       fp->set_type (die_type (die, cu));\n       FIELD_NAME (*fp) = fp->type ()->name ();\n@@ -18388,6 +18400,9 @@ attr_to_dynamic_prop (const struct attribute *attr, struct die_info *die,\n       if (target_attr == NULL)\n \ttarget_attr = dwarf2_attr (target_die, DW_AT_data_member_location,\n \t\t\t\t   target_cu);\n+      if (target_attr == nullptr)\n+\ttarget_attr = dwarf2_attr (target_die, DW_AT_data_bit_offset,\n+\t\t\t\t   target_cu);\n       if (target_attr == NULL)\n \t{\n \t  const char *name = var_decl_name (target_die, target_cu);\n@@ -18431,11 +18446,11 @@ attr_to_dynamic_prop (const struct attribute *attr, struct die_info *die,\n \t      }\n \t    break;\n \t  case DW_AT_data_member_location:\n+\t  case DW_AT_data_bit_offset:\n \t    {\n \t      LONGEST offset;\n \n-\t      if (!handle_data_member_location (target_die, target_cu,\n-\t\t\t\t\t\t&offset))\n+\t      if (!handle_member_location (target_die, target_cu, &offset))\n \t\treturn 0;\n \n \t      baton = XOBNEW (obstack, struct dwarf2_property_baton);"
    },
    {
      "sha": "c5573c78b4bb7b59705d4277493eae2aa4c941a4",
      "filename": "gdb/testsuite/gdb.ada/packed_record.exp",
      "status": "added",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6ad036d703099508c388038b57c77a8f7aaffb1d/gdb/testsuite/gdb.ada/packed_record.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6ad036d703099508c388038b57c77a8f7aaffb1d/gdb/testsuite/gdb.ada/packed_record.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/packed_record.exp?ref=6ad036d703099508c388038b57c77a8f7aaffb1d",
      "patch": "@@ -0,0 +1,47 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+load_lib \"ada.exp\"\n+\n+if { [skip_ada_tests] } { return -1 }\n+\n+standard_ada_testfile pr\n+\n+foreach_with_prefix scenario {all minimal} {\n+    set flags [list debug additional_flags=-fgnat-encodings=$scenario]\n+\n+    if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable $flags] != \"\"} {\n+\treturn -1\n+    }\n+\n+    clean_restart ${testfile}\n+\n+    set bp_location [gdb_get_line_number \"STOP\" ${testdir}/pr.adb]\n+    runto \"pr.adb:$bp_location\"\n+\n+    set test \"print var\"\n+    gdb_test_multiple $test $test {\n+\t-re \" = \\\\(length => 11, length_t => 23, bytes => 13, msg => hello, val => \\\"abcdefghijk\\\"\\\\)\\[\\r\\n\\]+$gdb_prompt $\" {\n+\t    pass $test\n+\t}\n+\t-re \" = .*more than max-value-size.*\\[\\r\\n\\]+$gdb_prompt $\" {\n+\t    # GNAT >= 12.0 has the needed fix here.\n+\t    if {$scenario == \"minimal\" && ![test_compiler_info {gcc-1[2-9]-*}]} {\n+\t\tsetup_kfail \"minimal encodings\" *-*-*\n+\t    }\n+\t    fail $test\n+\t}\n+    }\n+}"
    },
    {
      "sha": "7abfda9085b7f7711347ea9c6f5f78378f92564c",
      "filename": "gdb/testsuite/gdb.ada/packed_record/pr.adb",
      "status": "added",
      "additions": 35,
      "deletions": 0,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6ad036d703099508c388038b57c77a8f7aaffb1d/gdb/testsuite/gdb.ada/packed_record/pr.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6ad036d703099508c388038b57c77a8f7aaffb1d/gdb/testsuite/gdb.ada/packed_record/pr.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/packed_record/pr.adb?ref=6ad036d703099508c388038b57c77a8f7aaffb1d",
      "patch": "@@ -0,0 +1,35 @@\n+--  Copyright 2021 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+procedure pr is\n+\n+   type Report is (Hello, Goodbye);\n+\n+   type Response (Length : integer ) is record\n+      Length_t : Integer;\n+      Bytes : Natural;\n+      Msg : Report;\n+      Val : String(1..Length);\n+   end record;\n+\n+   pragma pack (Response);\n+\n+   Var : Response(11) := (11, 23, 13, Hello, \"abcdefghijk\");\n+\n+begin\n+\n+   null; -- STOP\n+\n+end pr;"
    }
  ]
}