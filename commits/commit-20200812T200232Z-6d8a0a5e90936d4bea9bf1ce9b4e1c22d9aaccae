{
  "sha": "6d8a0a5e90936d4bea9bf1ce9b4e1c22d9aaccae",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmQ4YTBhNWU5MDkzNmQ0YmVhOWJmMWNlOWI0ZTFjMjJkOWFhY2NhZQ==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-08-12T20:02:32Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-08-12T20:02:32Z"
    },
    "message": "Fix malloc allocation size sanity check\n\nDuring debugging of PR26362, it was noticed that the malloc size check\nin check_type_length_before_alloc wasn't detecting an allocation attempt\nof a huge amount of bytes, making GDB run into an internal error.\n\nThis happens because we're using an int to store a type's length. When the\ntype length is large enough, the int will overflow and the max_value_size\ncheck won't work anymore.\n\nThe following patch fixes this by making the length variable a ULONGEST.\n\nPrinting statements were also updated to show the correct number of bytes.\n\ngdb/ChangeLog:\n\n2020-08-12  Luis Machado  <luis.machado@linaro.org>\n\n\t* value.c (check_type_length_before_alloc): Use ULONGEST to store a\n\ttype's length.\n\tUse %s and pulongest to print the length.",
    "tree": {
      "sha": "1a1c7c7956a97bd002fde51577b5792b7e91ae63",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1a1c7c7956a97bd002fde51577b5792b7e91ae63"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6d8a0a5e90936d4bea9bf1ce9b4e1c22d9aaccae",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6d8a0a5e90936d4bea9bf1ce9b4e1c22d9aaccae",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6d8a0a5e90936d4bea9bf1ce9b4e1c22d9aaccae",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6d8a0a5e90936d4bea9bf1ce9b4e1c22d9aaccae/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7cf663a9321e2fc4f4e3316eab77bdd0b21ab4af",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7cf663a9321e2fc4f4e3316eab77bdd0b21ab4af",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7cf663a9321e2fc4f4e3316eab77bdd0b21ab4af"
    }
  ],
  "stats": {
    "total": 16,
    "additions": 11,
    "deletions": 5
  },
  "files": [
    {
      "sha": "27c6849cd6ae182b7ebebfe1bf260a1549721799",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6d8a0a5e90936d4bea9bf1ce9b4e1c22d9aaccae/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6d8a0a5e90936d4bea9bf1ce9b4e1c22d9aaccae/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6d8a0a5e90936d4bea9bf1ce9b4e1c22d9aaccae",
      "patch": "@@ -1,3 +1,9 @@\n+2020-08-12  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* value.c (check_type_length_before_alloc): Use ULONGEST to store a\n+\ttype's length.\n+\tUse %s and pulongest to print the length.\n+\n 2020-08-12  Pedro Alves  <palves@redhat.com>\n \n \t* NEWS: Move \"Multi-target debugging support\" item to the"
    },
    {
      "sha": "a6e21309f857086db69f9c615839457bd3cac0c4",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6d8a0a5e90936d4bea9bf1ce9b4e1c22d9aaccae/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6d8a0a5e90936d4bea9bf1ce9b4e1c22d9aaccae/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=6d8a0a5e90936d4bea9bf1ce9b4e1c22d9aaccae",
      "patch": "@@ -997,16 +997,16 @@ show_max_value_size (struct ui_file *file, int from_tty,\n static void\n check_type_length_before_alloc (const struct type *type)\n {\n-  unsigned int length = TYPE_LENGTH (type);\n+  ULONGEST length = TYPE_LENGTH (type);\n \n   if (max_value_size > -1 && length > max_value_size)\n     {\n       if (type->name () != NULL)\n-\terror (_(\"value of type `%s' requires %u bytes, which is more \"\n-\t\t \"than max-value-size\"), type->name (), length);\n+\terror (_(\"value of type `%s' requires %s bytes, which is more \"\n+\t\t \"than max-value-size\"), type->name (), pulongest (length));\n       else\n-\terror (_(\"value requires %u bytes, which is more than \"\n-\t\t \"max-value-size\"), length);\n+\terror (_(\"value requires %s bytes, which is more than \"\n+\t\t \"max-value-size\"), pulongest (length));\n     }\n }\n "
    }
  ]
}