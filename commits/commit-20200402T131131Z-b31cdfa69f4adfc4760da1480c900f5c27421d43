{
  "sha": "b31cdfa69f4adfc4760da1480c900f5c27421d43",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjMxY2RmYTY5ZjRhZGZjNDc2MGRhMTQ4MGM5MDBmNWMyNzQyMWQ0Mw==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:31Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-04-02T13:11:31Z"
    },
    "message": "gdbserver/linux-low: turn 'supports_hardware_single_step' into a method\n\nAll the linux low targets except arm define the\n'supports_hardware_single_step' op to return true.  Hence, we override\nthe method to return true in linux_process_target, and remove the\ndefinitions in all the linux low targets but arm.\n\ngdbserver/ChangeLog:\n2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tRemove the 'supports_hardware_single_step' linux target op and\n\toverride the process_stratum_target's op definition in\n\tlinux_process_target to return true.\n\n\t* linux-low.h (struct linux_target_ops): Remove the op.\n\t(class linux_process_target) <finish_step_over>\n\t<maybe_hw_step>: Declare.\n\t* linux-low.cc (can_hardware_single_step): Remove.\n\t(maybe_hw_step): Turn into...\n\t(linux_process_target::maybe_hw_step): ...this.\n\t(finish_step_over): Turn into...\n\t(linux_process_target::finish_step_over): ...this.\n\t(linux_process_target::supports_hardware_single_step): Update\n\tto return true.\n\n\tUpdate the callers below.\n\n\t(linux_process_target::single_step)\n\t(linux_process_target::resume_one_lwp_throw)\n\n\t* linux-arm-low.cc (class arm_target)\n\t<supports_hardware_single_step>: Declare.\n\t(arm_supports_hardware_single_step): Turn into...\n\t(arm_target::supports_hardware_single_step): ...this.\n\t(the_low_target): Remove the op field.\n\t* linux-x86-low.cc (x86_supports_hardware_single_step): Remove.\n\t(the_low_target): Remove the op field.\n\t* linux-aarch64-low.cc (aarch64_supports_hardware_single_step):\n\tRemove.\n\t(the_low_target): Remove the op field.\n\t* linux-bfin-low.cc (bfin_supports_hardware_single_step): Remove.\n\t(the_low_target): Remove the op field.\n\t* linux-crisv32-low.cc (cris_supports_hardware_single_step): Remove.\n\t(the_low_target): Remove the op field.\n\t* linux-m32r-low.cc (m32r_supports_hardware_single_step): Remove.\n\t(the_low_target): Remove the op field.\n\t* linux-m68k-low.cc (m68k_supports_hardware_single_step): Remove.\n\t(the_low_target): Remove the op field.\n\t* linux-ppc-low.cc (ppc_supports_hardware_single_step): Remove.\n\t(the_low_target): Remove the op field.\n\t* linux-s390-low.cc (s390_supports_hardware_single_step): Remove.\n\t(the_low_target): Remove the op field.\n\t* linux-sh-low.cc (sh_supports_hardware_single_step): Remove.\n\t(the_low_target): Remove the op field.\n\t* linux-tic6x-low.cc (tic6x_supports_hardware_single_step): Remove.\n\t(the_low_target): Remove the op field.\n\t* linux-tile-low.cc (tile_supports_hardware_single_step): Remove.\n\t(the_low_target): Remove the op field.\n\t* linux-xtensa-low.cc (xtensa_supports_hardware_single_step):\n\tRemove.\n\t(the_low_target): Remove the op field.",
    "tree": {
      "sha": "6a17ecd2fa2566f8d3ef2b9b55916d41c7def9c4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6a17ecd2fa2566f8d3ef2b9b55916d41c7def9c4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b31cdfa69f4adfc4760da1480c900f5c27421d43",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b31cdfa69f4adfc4760da1480c900f5c27421d43",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b31cdfa69f4adfc4760da1480c900f5c27421d43",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b31cdfa69f4adfc4760da1480c900f5c27421d43/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9cfd87155142f0467cdadb067efd21e165956c20",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9cfd87155142f0467cdadb067efd21e165956c20",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9cfd87155142f0467cdadb067efd21e165956c20"
    }
  ],
  "stats": {
    "total": 231,
    "additions": 82,
    "deletions": 149
  },
  "files": [
    {
      "sha": "9f14c57933e0686cd6431389c8bd3b92986e0bdc",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=b31cdfa69f4adfc4760da1480c900f5c27421d43",
      "patch": "@@ -1,3 +1,57 @@\n+2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tRemove the 'supports_hardware_single_step' linux target op and\n+\toverride the process_stratum_target's op definition in\n+\tlinux_process_target to return true.\n+\n+\t* linux-low.h (struct linux_target_ops): Remove the op.\n+\t(class linux_process_target) <finish_step_over>\n+\t<maybe_hw_step>: Declare.\n+\t* linux-low.cc (can_hardware_single_step): Remove.\n+\t(maybe_hw_step): Turn into...\n+\t(linux_process_target::maybe_hw_step): ...this.\n+\t(finish_step_over): Turn into...\n+\t(linux_process_target::finish_step_over): ...this.\n+\t(linux_process_target::supports_hardware_single_step): Update\n+\tto return true.\n+\n+\tUpdate the callers below.\n+\n+\t(linux_process_target::single_step)\n+\t(linux_process_target::resume_one_lwp_throw)\n+\n+\t* linux-arm-low.cc (class arm_target)\n+\t<supports_hardware_single_step>: Declare.\n+\t(arm_supports_hardware_single_step): Turn into...\n+\t(arm_target::supports_hardware_single_step): ...this.\n+\t(the_low_target): Remove the op field.\n+\t* linux-x86-low.cc (x86_supports_hardware_single_step): Remove.\n+\t(the_low_target): Remove the op field.\n+\t* linux-aarch64-low.cc (aarch64_supports_hardware_single_step):\n+\tRemove.\n+\t(the_low_target): Remove the op field.\n+\t* linux-bfin-low.cc (bfin_supports_hardware_single_step): Remove.\n+\t(the_low_target): Remove the op field.\n+\t* linux-crisv32-low.cc (cris_supports_hardware_single_step): Remove.\n+\t(the_low_target): Remove the op field.\n+\t* linux-m32r-low.cc (m32r_supports_hardware_single_step): Remove.\n+\t(the_low_target): Remove the op field.\n+\t* linux-m68k-low.cc (m68k_supports_hardware_single_step): Remove.\n+\t(the_low_target): Remove the op field.\n+\t* linux-ppc-low.cc (ppc_supports_hardware_single_step): Remove.\n+\t(the_low_target): Remove the op field.\n+\t* linux-s390-low.cc (s390_supports_hardware_single_step): Remove.\n+\t(the_low_target): Remove the op field.\n+\t* linux-sh-low.cc (sh_supports_hardware_single_step): Remove.\n+\t(the_low_target): Remove the op field.\n+\t* linux-tic6x-low.cc (tic6x_supports_hardware_single_step): Remove.\n+\t(the_low_target): Remove the op field.\n+\t* linux-tile-low.cc (tile_supports_hardware_single_step): Remove.\n+\t(the_low_target): Remove the op field.\n+\t* linux-xtensa-low.cc (xtensa_supports_hardware_single_step):\n+\tRemove.\n+\t(the_low_target): Remove the op field.\n+\n 2020-04-02  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn the 'supports_range_stepping' linux target op into a method"
    },
    {
      "sha": "4f7c2578eb8938bb434e9dd0149f354b3f7a9b91",
      "filename": "gdbserver/linux-aarch64-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-aarch64-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-aarch64-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-aarch64-low.cc?ref=b31cdfa69f4adfc4760da1480c900f5c27421d43",
      "patch": "@@ -3157,17 +3157,8 @@ aarch64_target::breakpoint_kind_from_current_state (CORE_ADDR *pcptr)\n     return arm_breakpoint_kind_from_current_state (pcptr);\n }\n \n-/* Support for hardware single step.  */\n-\n-static int\n-aarch64_supports_hardware_single_step (void)\n-{\n-  return 1;\n-}\n-\n struct linux_target_ops the_low_target =\n {\n-  aarch64_supports_hardware_single_step,\n   aarch64_get_syscall_trapinfo,\n };\n "
    },
    {
      "sha": "2e3d00a489afd94a40398f60e7fbbf7b1ce5a4a0",
      "filename": "gdbserver/linux-arm-low.cc",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-arm-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-arm-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-arm-low.cc?ref=b31cdfa69f4adfc4760da1480c900f5c27421d43",
      "patch": "@@ -72,6 +72,8 @@ class arm_target : public linux_process_target\n \n   bool supports_z_point_type (char z_type) override;\n \n+  bool supports_hardware_single_step () override;\n+\n protected:\n \n   void low_arch_setup () override;\n@@ -1030,10 +1032,10 @@ arm_target::low_get_next_pcs (regcache *regcache)\n \n /* Support for hardware single step.  */\n \n-static int\n-arm_supports_hardware_single_step (void)\n+bool\n+arm_target::supports_hardware_single_step ()\n {\n-  return 0;\n+  return false;\n }\n \n /* Implementation of linux_target_ops method \"get_syscall_trapinfo\".  */\n@@ -1117,7 +1119,6 @@ arm_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  arm_supports_hardware_single_step,\n   arm_get_syscall_trapinfo,\n };\n "
    },
    {
      "sha": "b83af96a85c67c209078b7496e5d7570a2f712f7",
      "filename": "gdbserver/linux-bfin-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-bfin-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-bfin-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-bfin-low.cc?ref=b31cdfa69f4adfc4760da1480c900f5c27421d43",
      "patch": "@@ -144,14 +144,6 @@ bfin_target::low_arch_setup ()\n   current_process ()->tdesc = tdesc_bfin;\n }\n \n-/* Support for hardware single step.  */\n-\n-static int\n-bfin_supports_hardware_single_step (void)\n-{\n-  return 1;\n-}\n-\n static struct usrregs_info bfin_usrregs_info =\n   {\n     bfin_num_regs,\n@@ -171,7 +163,6 @@ bfin_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  bfin_supports_hardware_single_step,\n };\n \n /* The linux target ops object.  */"
    },
    {
      "sha": "f662510370529baec8f962c6785c4801c7d54f72",
      "filename": "gdbserver/linux-crisv32-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-crisv32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-crisv32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-crisv32-low.cc?ref=b31cdfa69f4adfc4760da1480c900f5c27421d43",
      "patch": "@@ -426,14 +426,6 @@ crisv32_target::low_arch_setup ()\n   current_process ()->tdesc = tdesc_crisv32;\n }\n \n-/* Support for hardware single step.  */\n-\n-static int\n-cris_supports_hardware_single_step (void)\n-{\n-  return 1;\n-}\n-\n static struct regset_info cris_regsets[] = {\n   { PTRACE_GETREGS, PTRACE_SETREGS, 0, cris_num_regs * 4,\n     GENERAL_REGS, cris_fill_gregset, cris_store_gregset },\n@@ -468,7 +460,6 @@ crisv32_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  cris_supports_hardware_single_step,\n };\n \n /* The linux target ops object.  */"
    },
    {
      "sha": "56615430b59e1d8291fe191db5dcd7b478455aae",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 14,
      "deletions": 32,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=b31cdfa69f4adfc4760da1480c900f5c27421d43",
      "patch": "@@ -270,7 +270,6 @@ static int stabilizing_threads;\n static void unsuspend_all_lwps (struct lwp_info *except);\n static void mark_lwp_dead (struct lwp_info *lwp, int wstat);\n static int lwp_is_marked_dead (struct lwp_info *lwp);\n-static int finish_step_over (struct lwp_info *lwp);\n static int kill_lwp (unsigned long lwpid, int signo);\n static void enqueue_pending_signal (struct lwp_info *lwp, int signal, siginfo_t *info);\n static int linux_low_ptrace_options (int attached);\n@@ -280,17 +279,6 @@ static int check_ptrace_stopped_lwp_gone (struct lwp_info *lp);\n    being stepped.  */\n ptid_t step_over_bkpt;\n \n-/* True if the low target can hardware single-step.  */\n-\n-static int\n-can_hardware_single_step (void)\n-{\n-  if (the_low_target.supports_hardware_single_step != NULL)\n-    return the_low_target.supports_hardware_single_step ();\n-  else\n-    return 0;\n-}\n-\n bool\n linux_process_target::low_supports_breakpoints ()\n {\n@@ -2503,19 +2491,17 @@ linux_process_target::filter_event (int lwpid, int wstat)\n   return child;\n }\n \n-/* Return true if THREAD is doing hardware single step.  */\n-\n-static int\n-maybe_hw_step (struct thread_info *thread)\n+bool\n+linux_process_target::maybe_hw_step (thread_info *thread)\n {\n-  if (can_hardware_single_step ())\n-    return 1;\n+  if (supports_hardware_single_step ())\n+    return true;\n   else\n     {\n       /* GDBserver must insert single-step breakpoint for software\n \t single step.  */\n       gdb_assert (has_single_step_breakpoints (thread));\n-      return 0;\n+      return false;\n     }\n }\n \n@@ -4107,7 +4093,7 @@ linux_process_target::single_step (lwp_info* lwp)\n {\n   int step = 0;\n \n-  if (can_hardware_single_step ())\n+  if (supports_hardware_single_step ())\n     {\n       step = 1;\n     }\n@@ -4218,7 +4204,7 @@ linux_process_target::resume_one_lwp_throw (lwp_info *lwp, int step,\n \tdebug_printf (\"  pending reinsert at 0x%s\\n\",\n \t\t      paddress (lwp->bp_reinsert));\n \n-      if (can_hardware_single_step ())\n+      if (supports_hardware_single_step ())\n \t{\n \t  if (fast_tp_collecting == fast_tpoint_collect_result::not_collecting)\n \t    {\n@@ -4247,7 +4233,7 @@ linux_process_target::resume_one_lwp_throw (lwp_info *lwp, int step,\n \t\t      \" single-stepping\\n\",\n \t\t      lwpid_of (thread));\n \n-      if (can_hardware_single_step ())\n+      if (supports_hardware_single_step ())\n \tstep = 1;\n       else\n \t{\n@@ -4700,12 +4686,8 @@ linux_process_target::start_step_over (lwp_info *lwp)\n   step_over_bkpt = thread->id;\n }\n \n-/* Finish a step-over.  Reinsert the breakpoint we had uninserted in\n-   start_step_over, if still there, and delete any single-step\n-   breakpoints we've set, on non hardware single-step targets.  */\n-\n-static int\n-finish_step_over (struct lwp_info *lwp)\n+bool\n+linux_process_target::finish_step_over (lwp_info *lwp)\n {\n   if (lwp->bp_reinsert != 0)\n     {\n@@ -4728,18 +4710,18 @@ finish_step_over (struct lwp_info *lwp)\n \t and later not being able to explain it, because we were\n \t stepping over a breakpoint, and we hold all threads but\n \t LWP stopped while doing that.  */\n-      if (!can_hardware_single_step ())\n+      if (!supports_hardware_single_step ())\n \t{\n \t  gdb_assert (has_single_step_breakpoints (current_thread));\n \t  delete_single_step_breakpoints (current_thread);\n \t}\n \n       step_over_bkpt = null_ptid;\n       current_thread = saved_thread;\n-      return 1;\n+      return true;\n     }\n   else\n-    return 0;\n+    return false;\n }\n \n void\n@@ -5899,7 +5881,7 @@ linux_process_target::supports_stopped_by_hw_breakpoint ()\n bool\n linux_process_target::supports_hardware_single_step ()\n {\n-  return can_hardware_single_step ();\n+  return true;\n }\n \n bool"
    },
    {
      "sha": "0182be17ce1b337b54268261866db6a6f1e787b1",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=b31cdfa69f4adfc4760da1480c900f5c27421d43",
      "patch": "@@ -131,9 +131,6 @@ struct lwp_info;\n \n struct linux_target_ops\n {\n-  /* See target.h.  */\n-  int (*supports_hardware_single_step) (void);\n-\n   /* Fill *SYSNO with the syscall nr trapped.  Only to be called when\n      inferior is stopped due to SYSCALL_SIGTRAP.  */\n   void (*get_syscall_trapinfo) (struct regcache *regcache, int *sysno);\n@@ -401,6 +398,12 @@ class linux_process_target : public process_stratum_target\n      events.  */\n   void complete_ongoing_step_over ();\n \n+  /* Finish a step-over.  Reinsert the breakpoint we had uninserted in\n+     start_step_over, if still there, and delete any single-step\n+     breakpoints we've set, on non hardware single-step targets.\n+     Return true if step over finished.  */\n+  bool finish_step_over (lwp_info *lwp);\n+\n   /* When we finish a step-over, set threads running again.  If there's\n      another thread that may need a step-over, now's the time to start\n      it.  Eventually, we'll move all threads past their breakpoints.  */\n@@ -519,6 +522,9 @@ class linux_process_target : public process_stratum_target\n      or can't single step.  */\n   int single_step (lwp_info* lwp);\n \n+  /* Return true if THREAD is doing hardware single step.  */\n+  bool maybe_hw_step (thread_info *thread);\n+\n   /* Install breakpoints for software single stepping.  */\n   void install_software_single_step_breakpoints (lwp_info *lwp);\n "
    },
    {
      "sha": "6d33157dfdf4cae30360a38e7a1a63a21754ad51",
      "filename": "gdbserver/linux-m32r-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-m32r-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-m32r-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m32r-low.cc?ref=b31cdfa69f4adfc4760da1480c900f5c27421d43",
      "patch": "@@ -134,14 +134,6 @@ m32r_target::low_arch_setup ()\n   current_process ()->tdesc = tdesc_m32r;\n }\n \n-/* Support for hardware single step.  */\n-\n-static int\n-m32r_supports_hardware_single_step (void)\n-{\n-  return 1;\n-}\n-\n static struct usrregs_info m32r_usrregs_info =\n   {\n     m32r_num_regs,\n@@ -161,7 +153,6 @@ m32r_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  m32r_supports_hardware_single_step,\n };\n \n /* The linux target ops object.  */"
    },
    {
      "sha": "a5e39ffdb6279a3099ea8ecef143d6bc4f3762af",
      "filename": "gdbserver/linux-m68k-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-m68k-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-m68k-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-m68k-low.cc?ref=b31cdfa69f4adfc4760da1480c900f5c27421d43",
      "patch": "@@ -256,16 +256,7 @@ m68k_target::low_arch_setup ()\n   current_process ()->tdesc = tdesc_m68k;\n }\n \n-/* Support for hardware single step.  */\n-\n-static int\n-m68k_supports_hardware_single_step (void)\n-{\n-  return 1;\n-}\n-\n struct linux_target_ops the_low_target = {\n-  m68k_supports_hardware_single_step,\n };\n \n /* The linux target ops object.  */"
    },
    {
      "sha": "5c6930751e19ee12d5406f7ddb4616625c91d128",
      "filename": "gdbserver/linux-ppc-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-ppc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-ppc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-ppc-low.cc?ref=b31cdfa69f4adfc4760da1480c900f5c27421d43",
      "patch": "@@ -805,14 +805,6 @@ ppc_store_evrregset (struct regcache *regcache, const void *buf)\n   supply_register_by_name (regcache, \"spefscr\", &regset->spefscr);\n }\n \n-/* Support for hardware single step.  */\n-\n-static int\n-ppc_supports_hardware_single_step (void)\n-{\n-  return 1;\n-}\n-\n static struct regset_info ppc_regsets[] = {\n   /* List the extra register sets before GENERAL_REGS.  That way we will\n      fetch them every time, but still fall back to PTRACE_PEEKUSER for the\n@@ -3454,7 +3446,6 @@ ppc_get_ipa_tdesc_idx (void)\n }\n \n struct linux_target_ops the_low_target = {\n-  ppc_supports_hardware_single_step,\n   NULL, /* get_syscall_trapinfo */\n   ppc_get_ipa_tdesc_idx,\n };"
    },
    {
      "sha": "3ab14d884ee6ca745663c900aa98166db7d367c2",
      "filename": "gdbserver/linux-s390-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-s390-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-s390-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-s390-low.cc?ref=b31cdfa69f4adfc4760da1480c900f5c27421d43",
      "patch": "@@ -723,14 +723,6 @@ s390_target::supports_z_point_type (char z_type)\n     }\n }\n \n-/* Support for hardware single step.  */\n-\n-static int\n-s390_supports_hardware_single_step (void)\n-{\n-  return 1;\n-}\n-\n static struct usrregs_info s390_usrregs_info =\n   {\n     s390_num_regs,\n@@ -2863,7 +2855,6 @@ s390_target::emit_ops ()\n }\n \n struct linux_target_ops the_low_target = {\n-  s390_supports_hardware_single_step,\n   NULL, /* get_syscall_trapinfo */\n   s390_get_ipa_tdesc_idx,\n };"
    },
    {
      "sha": "3d961647b3a23be10e113cb6e82b604b03896403",
      "filename": "gdbserver/linux-sh-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-sh-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-sh-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-sh-low.cc?ref=b31cdfa69f4adfc4760da1480c900f5c27421d43",
      "patch": "@@ -134,14 +134,6 @@ sh_target::low_breakpoint_at (CORE_ADDR where)\n   return false;\n }\n \n-/* Support for hardware single step.  */\n-\n-static int\n-sh_supports_hardware_single_step (void)\n-{\n-  return 1;\n-}\n-\n /* Provide only a fill function for the general register set.  ps_lgetregs\n    will use this for NPTL support.  */\n \n@@ -192,7 +184,6 @@ sh_target::low_arch_setup ()\n }\n \n struct linux_target_ops the_low_target = {\n-  sh_supports_hardware_single_step,\n };\n \n /* The linux target ops object.  */"
    },
    {
      "sha": "adcc410100e9fddca8eae4f424007a56c692d2bd",
      "filename": "gdbserver/linux-tic6x-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-tic6x-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-tic6x-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tic6x-low.cc?ref=b31cdfa69f4adfc4760da1480c900f5c27421d43",
      "patch": "@@ -394,14 +394,6 @@ tic6x_target::low_arch_setup ()\n   current_process ()->tdesc = tic6x_read_description (feature);\n }\n \n-/* Support for hardware single step.  */\n-\n-static int\n-tic6x_supports_hardware_single_step (void)\n-{\n-  return 1;\n-}\n-\n static struct regsets_info tic6x_regsets_info =\n   {\n     tic6x_regsets, /* regsets */\n@@ -423,7 +415,6 @@ tic6x_target::get_regs_info ()\n }\n \n struct linux_target_ops the_low_target = {\n-  tic6x_supports_hardware_single_step,\n };\n \n #if GDB_SELF_TEST"
    },
    {
      "sha": "39c9694fc8736b33be563ded37bd701b349e5458",
      "filename": "gdbserver/linux-tile-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 10,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-tile-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-tile-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tile-low.cc?ref=b31cdfa69f4adfc4760da1480c900f5c27421d43",
      "patch": "@@ -213,18 +213,8 @@ tile_target::low_arch_setup ()\n     current_process ()->tdesc = tdesc_tilegx;\n }\n \n-/* Support for hardware single step.  */\n-\n-static int\n-tile_supports_hardware_single_step (void)\n-{\n-  return 1;\n-}\n-\n-\n struct linux_target_ops the_low_target =\n {\n-  tile_supports_hardware_single_step,\n };\n \n /* The linux target ops object.  */"
    },
    {
      "sha": "c05928d155606be68e5f7f7643b50770433fafb4",
      "filename": "gdbserver/linux-x86-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 10,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-x86-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-x86-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-x86-low.cc?ref=b31cdfa69f4adfc4760da1480c900f5c27421d43",
      "patch": "@@ -2964,15 +2964,6 @@ x86_target::low_supports_range_stepping ()\n   return true;\n }\n \n-/* Implementation of linux_target_ops method \"supports_hardware_single_step\".\n- */\n-\n-static int\n-x86_supports_hardware_single_step (void)\n-{\n-  return 1;\n-}\n-\n static int\n x86_get_ipa_tdesc_idx (void)\n {\n@@ -2994,7 +2985,6 @@ x86_get_ipa_tdesc_idx (void)\n \n struct linux_target_ops the_low_target =\n {\n-  x86_supports_hardware_single_step,\n   x86_get_syscall_trapinfo,\n   x86_get_ipa_tdesc_idx,\n };"
    },
    {
      "sha": "9c41c24cde16094cba185208ba2167def5c50c4f",
      "filename": "gdbserver/linux-xtensa-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-xtensa-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31cdfa69f4adfc4760da1480c900f5c27421d43/gdbserver/linux-xtensa-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-xtensa-low.cc?ref=b31cdfa69f4adfc4760da1480c900f5c27421d43",
      "patch": "@@ -314,22 +314,13 @@ xtensa_target::low_arch_setup ()\n   current_process ()->tdesc = tdesc_xtensa;\n }\n \n-/* Support for hardware single step.  */\n-\n-static int\n-xtensa_supports_hardware_single_step (void)\n-{\n-  return 1;\n-}\n-\n const regs_info *\n xtensa_target::get_regs_info ()\n {\n   return &myregs_info;\n }\n \n struct linux_target_ops the_low_target = {\n-  xtensa_supports_hardware_single_step,\n };\n \n /* The linux target ops object.  */"
    }
  ]
}