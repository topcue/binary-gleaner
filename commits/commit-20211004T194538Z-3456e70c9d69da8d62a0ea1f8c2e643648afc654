{
  "sha": "3456e70c9d69da8d62a0ea1f8c2e643648afc654",
  "node_id": "C_kwDOANOeidoAKDM0NTZlNzBjOWQ2OWRhOGQ2MmEwZWExZjhjMmU2NDM2NDhhZmM2NTQ",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-10-04T14:44:22Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-10-04T19:45:38Z"
    },
    "message": "Use unique_xmalloc_ptr<char> when demangling\n\nI noticed that some methods in language_defn could use\nunique_xmalloc_ptr<char> rather than a plain 'char *'.  This patch\nimplements this change, fixing up the fallout and changing\ngdb_demangle to also return this type.  In one spot, std::string is\nused to simplify some related code, and in another, an auto_obstack is\nused to avoid manual management.\n\nRegression tested on x86-64 Fedora 34.",
    "tree": {
      "sha": "7959a8dc460685d2e8e3197478eddb4430d48708",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7959a8dc460685d2e8e3197478eddb4430d48708"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3456e70c9d69da8d62a0ea1f8c2e643648afc654",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3456e70c9d69da8d62a0ea1f8c2e643648afc654",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3456e70c9d69da8d62a0ea1f8c2e643648afc654",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3456e70c9d69da8d62a0ea1f8c2e643648afc654/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e133de4984cef9acb32fd756c607aa2fa1d090fb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e133de4984cef9acb32fd756c607aa2fa1d090fb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e133de4984cef9acb32fd756c607aa2fa1d090fb"
    }
  ],
  "stats": {
    "total": 254,
    "additions": 118,
    "deletions": 136
  },
  "files": [
    {
      "sha": "3b7c10f8e6cd61cdaaf8829dfd280e02a9a97e9f",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 6,
      "deletions": 10,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -1324,12 +1324,6 @@ ada_decode_symbol (const struct general_symbol_info *arg)\n   return *resultp;\n }\n \n-static char *\n-ada_la_decode (const char *encoded, int options)\n-{\n-  return xstrdup (ada_decode (encoded).c_str ());\n-}\n-\n \f\n \n \t\t\t\t/* Arrays */\n@@ -13116,8 +13110,9 @@ class ada_language : public language_defn\n   }\n \n   /* See language.h.  */\n-  bool sniff_from_mangled_name (const char *mangled,\n-\t\t\t\tchar **out) const override\n+  bool sniff_from_mangled_name\n+       (const char *mangled,\n+\tgdb::unique_xmalloc_ptr<char> *out) const override\n   {\n     std::string demangled = ada_decode (mangled);\n \n@@ -13155,9 +13150,10 @@ class ada_language : public language_defn\n \n   /* See language.h.  */\n \n-  char *demangle_symbol (const char *mangled, int options) const override\n+  gdb::unique_xmalloc_ptr<char> demangle_symbol (const char *mangled,\n+\t\t\t\t\t\t int options) const override\n   {\n-    return ada_la_decode (mangled, options);\n+    return make_unique_xstrdup (ada_decode (mangled).c_str ());\n   }\n \n   /* See language.h.  */"
    },
    {
      "sha": "98250f5151dde8ff1d9b880881e7d5af157116b6",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -944,16 +944,18 @@ class cplus_language : public language_defn\n   }\n \n   /* See language.h.  */\n-  bool sniff_from_mangled_name (const char *mangled,\n-\t\t\t\tchar **demangled) const override\n+  bool sniff_from_mangled_name\n+       (const char *mangled,\n+\tgdb::unique_xmalloc_ptr<char> *demangled) const override\n   {\n     *demangled = gdb_demangle (mangled, DMGL_PARAMS | DMGL_ANSI);\n     return *demangled != NULL;\n   }\n \n   /* See language.h.  */\n \n-  char *demangle_symbol (const char *mangled, int options) const override\n+  gdb::unique_xmalloc_ptr<char> demangle_symbol (const char *mangled,\n+\t\t\t\t\t\t int options) const override\n   {\n     return gdb_demangle (mangled, options);\n   }"
    },
    {
      "sha": "33700aa34fd886db1f06d5bdcb4d9351f377f726",
      "filename": "gdb/c-typeprint.c",
      "status": "modified",
      "additions": 13,
      "deletions": 21,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/c-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/c-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-typeprint.c?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -674,16 +674,16 @@ is_type_conversion_operator (struct type *type, int i, int j)\n    form.  Even the author of this function feels that writing little\n    parsers like this everywhere is stupid.  */\n \n-static char *\n-remove_qualifiers (char *qid)\n+static const char *\n+remove_qualifiers (const char *qid)\n {\n   int quoted = 0;\t/* Zero if we're not in quotes;\n \t\t\t   '\"' if we're in a double-quoted string;\n \t\t\t   '\\'' if we're in a single-quoted string.  */\n   int depth = 0;\t/* Number of unclosed parens we've seen.  */\n   char *parenstack = (char *) alloca (strlen (qid));\n-  char *scan;\n-  char *last = 0;\t/* The character after the rightmost\n+  const char *scan;\n+  const char *last = 0;\t/* The character after the rightmost\n \t\t\t   `::' token we've seen so far.  */\n \n   for (scan = qid; *scan; scan++)\n@@ -1257,7 +1257,6 @@ c_type_print_base_struct_union (struct type *type, struct ui_file *stream,\n \t    {\n \t      const char *mangled_name;\n \t      gdb::unique_xmalloc_ptr<char> mangled_name_holder;\n-\t      char *demangled_name;\n \t      const char *physname = TYPE_FN_FIELD_PHYSNAME (f, j);\n \t      int is_full_physname_constructor =\n \t\tTYPE_FN_FIELD_CONSTRUCTOR (f, j)\n@@ -1311,9 +1310,9 @@ c_type_print_base_struct_union (struct type *type, struct ui_file *stream,\n \t      else\n \t\tmangled_name = TYPE_FN_FIELD_PHYSNAME (f, j);\n \n-\t      demangled_name =\n-\t\tgdb_demangle (mangled_name,\n-\t\t\t      DMGL_ANSI | DMGL_PARAMS);\n+\t      gdb::unique_xmalloc_ptr<char> demangled_name\n+\t\t= gdb_demangle (mangled_name,\n+\t\t\t\tDMGL_ANSI | DMGL_PARAMS);\n \t      if (demangled_name == NULL)\n \t\t{\n \t\t  /* In some cases (for instance with the HP\n@@ -1340,29 +1339,22 @@ c_type_print_base_struct_union (struct type *type, struct ui_file *stream,\n \t\t}\n \t      else\n \t\t{\n-\t\t  char *p;\n-\t\t  char *demangled_no_class\n-\t\t    = remove_qualifiers (demangled_name);\n+\t\t  const char *p;\n+\t\t  const char *demangled_no_class\n+\t\t    = remove_qualifiers (demangled_name.get ());\n \n \t\t  /* Get rid of the `static' appended by the\n \t\t     demangler.  */\n \t\t  p = strstr (demangled_no_class, \" static\");\n \t\t  if (p != NULL)\n \t\t    {\n \t\t      int length = p - demangled_no_class;\n-\t\t      char *demangled_no_static;\n-\n-\t\t      demangled_no_static\n-\t\t\t= (char *) xmalloc (length + 1);\n-\t\t      strncpy (demangled_no_static,\n-\t\t\t       demangled_no_class, length);\n-\t\t      *(demangled_no_static + length) = '\\0';\n-\t\t      fputs_filtered (demangled_no_static, stream);\n-\t\t      xfree (demangled_no_static);\n+\t\t      std::string demangled_no_static (demangled_no_class,\n+\t\t\t\t\t\t       length);\n+\t\t      fputs_filtered (demangled_no_static.c_str (), stream);\n \t\t    }\n \t\t  else\n \t\t    fputs_filtered (demangled_no_class, stream);\n-\t\t  xfree (demangled_name);\n \t\t}\n \n \t      fprintf_filtered (stream, \";\\n\");"
    },
    {
      "sha": "367fb6a20bbf5c14046a3a06738c26e3108790ae",
      "filename": "gdb/cp-support.c",
      "status": "modified",
      "additions": 12,
      "deletions": 17,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/cp-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/cp-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.c?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -661,10 +661,9 @@ cp_canonicalize_string (const char *string)\n \n static std::unique_ptr<demangle_parse_info>\n mangled_name_to_comp (const char *mangled_name, int options,\n-\t\t      void **memory, char **demangled_p)\n+\t\t      void **memory,\n+\t\t      gdb::unique_xmalloc_ptr<char> *demangled_p)\n {\n-  char *demangled_name;\n-\n   /* If it looks like a v3 mangled name, then try to go directly\n      to trees.  */\n   if (mangled_name[0] == '_' && mangled_name[1] == 'Z')\n@@ -684,22 +683,20 @@ mangled_name_to_comp (const char *mangled_name, int options,\n \n   /* If it doesn't, or if that failed, then try to demangle the\n      name.  */\n-  demangled_name = gdb_demangle (mangled_name, options);\n+  gdb::unique_xmalloc_ptr<char> demangled_name = gdb_demangle (mangled_name,\n+\t\t\t\t\t\t\t       options);\n   if (demangled_name == NULL)\n    return NULL;\n   \n   /* If we could demangle the name, parse it to build the component\n      tree.  */\n   std::unique_ptr<demangle_parse_info> info\n-    = cp_demangled_name_to_comp (demangled_name, NULL);\n+    = cp_demangled_name_to_comp (demangled_name.get (), NULL);\n \n   if (info == NULL)\n-    {\n-      xfree (demangled_name);\n-      return NULL;\n-    }\n+    return NULL;\n \n-  *demangled_p = demangled_name;\n+  *demangled_p = std::move (demangled_name);\n   return info;\n }\n \n@@ -709,7 +706,7 @@ char *\n cp_class_name_from_physname (const char *physname)\n {\n   void *storage = NULL;\n-  char *demangled_name = NULL;\n+  gdb::unique_xmalloc_ptr<char> demangled_name;\n   gdb::unique_xmalloc_ptr<char> ret;\n   struct demangle_component *ret_comp, *prev_comp, *cur_comp;\n   std::unique_ptr<demangle_parse_info> info;\n@@ -789,7 +786,6 @@ cp_class_name_from_physname (const char *physname)\n     }\n \n   xfree (storage);\n-  xfree (demangled_name);\n   return ret.release ();\n }\n \n@@ -857,7 +853,7 @@ char *\n method_name_from_physname (const char *physname)\n {\n   void *storage = NULL;\n-  char *demangled_name = NULL;\n+  gdb::unique_xmalloc_ptr<char> demangled_name;\n   gdb::unique_xmalloc_ptr<char> ret;\n   struct demangle_component *ret_comp;\n   std::unique_ptr<demangle_parse_info> info;\n@@ -875,7 +871,6 @@ method_name_from_physname (const char *physname)\n     ret = cp_comp_to_string (ret_comp, 10);\n \n   xfree (storage);\n-  xfree (demangled_name);\n   return ret.release ();\n }\n \n@@ -1604,10 +1599,10 @@ report_failed_demangle (const char *name, bool core_dump_allowed,\n \n /* A wrapper for bfd_demangle.  */\n \n-char *\n+gdb::unique_xmalloc_ptr<char>\n gdb_demangle (const char *name, int options)\n {\n-  char *result = NULL;\n+  gdb::unique_xmalloc_ptr<char> result;\n   int crash_signal = 0;\n \n #ifdef HAVE_WORKING_FORK\n@@ -1636,7 +1631,7 @@ gdb_demangle (const char *name, int options)\n #endif\n \n   if (crash_signal == 0)\n-    result = bfd_demangle (NULL, name, options);\n+    result.reset (bfd_demangle (NULL, name, options));\n \n #ifdef HAVE_WORKING_FORK\n   if (catch_demangler_crashes)"
    },
    {
      "sha": "841ee4f53314db0f91b12369dd0fb60a58b51884",
      "filename": "gdb/cp-support.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/cp-support.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/cp-support.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.h?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -188,6 +188,6 @@ extern struct cmd_list_element *maint_cplus_cmd_list;\n \n /* A wrapper for bfd_demangle.  */\n \n-char *gdb_demangle (const char *name, int options);\n+gdb::unique_xmalloc_ptr<char> gdb_demangle (const char *name, int options);\n \n #endif /* CP_SUPPORT_H */"
    },
    {
      "sha": "c712053a7874682c7de2e8c3dc002f4436a7fad6",
      "filename": "gdb/d-lang.c",
      "status": "modified",
      "additions": 6,
      "deletions": 4,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/d-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/d-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-lang.c?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -51,7 +51,7 @@ d_main_name (void)\n \n /* Implements the la_demangle language_defn routine for language D.  */\n \n-char *\n+gdb::unique_xmalloc_ptr<char>\n d_demangle (const char *symbol, int options)\n {\n   return gdb_demangle (symbol, options | DMGL_DLANG);\n@@ -126,16 +126,18 @@ class d_language : public language_defn\n   }\n \n   /* See language.h.  */\n-  bool sniff_from_mangled_name (const char *mangled,\n-\t\t\t\tchar **demangled) const override\n+  bool sniff_from_mangled_name\n+       (const char *mangled,\n+\tgdb::unique_xmalloc_ptr<char> *demangled) const override\n   {\n     *demangled = d_demangle (mangled, 0);\n     return *demangled != NULL;\n   }\n \n   /* See language.h.  */\n \n-  char *demangle_symbol (const char *mangled, int options) const override\n+  gdb::unique_xmalloc_ptr<char> demangle_symbol (const char *mangled,\n+\t\t\t\t\t\t int options) const override\n   {\n     return d_demangle (mangled, options);\n   }"
    },
    {
      "sha": "3a4c23febe25724ccf22db07552d9cb323d82aff",
      "filename": "gdb/d-lang.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/d-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/d-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-lang.h?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -62,7 +62,8 @@ extern int d_parse (struct parser_state *);\n \n extern const char *d_main_name (void);\n \n-extern char *d_demangle (const char *mangled, int options);\n+extern gdb::unique_xmalloc_ptr<char> d_demangle (const char *mangled,\n+\t\t\t\t\t\t int options);\n \n extern const struct builtin_d_type *builtin_d_type (struct gdbarch *);\n "
    },
    {
      "sha": "5d48e4c133a948f1713deb0c6033e80a91c01433",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -10174,9 +10174,8 @@ dwarf2_physname (const char *name, struct die_info *die, struct dwarf2_cu *cu)\n \t     to look up their definition from their declaration so\n \t     the only disadvantage remains the minimal symbol variant\n \t     `long name(params)' does not have the proper inferior type.  */\n-\t  demangled.reset (gdb_demangle (mangled,\n-\t\t\t\t\t (DMGL_PARAMS | DMGL_ANSI\n-\t\t\t\t\t  | DMGL_RET_DROP)));\n+\t  demangled = gdb_demangle (mangled, (DMGL_PARAMS | DMGL_ANSI\n+\t\t\t\t\t      | DMGL_RET_DROP));\n \t}\n       if (demangled)\n \tcanon = demangled.get ();"
    },
    {
      "sha": "154edfdc29f7686c9f23570fa1002041bce1e68c",
      "filename": "gdb/f-lang.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/f-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/f-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.h?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -67,7 +67,8 @@ class f_language : public language_defn\n \n   /* See language.h.  */\n \n-  char *demangle_symbol (const char *mangled, int options) const override\n+  gdb::unique_xmalloc_ptr<char> demangle_symbol (const char *mangled,\n+\t\t\t\t\t\t int options) const override\n   {\n       /* We could support demangling here to provide module namespaces\n \t also for inferiors with only minimal symbol table (ELF symbols)."
    },
    {
      "sha": "5382af84008330ef73002499c0e4b395dc249e52",
      "filename": "gdb/gdb-demangle.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/gdb-demangle.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/gdb-demangle.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdb-demangle.c?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -160,7 +160,6 @@ is_cplus_marker (int c)\n static void\n demangle_command (const char *args, int from_tty)\n {\n-  char *demangled;\n   const char *name;\n   const char *arg_start;\n   int processing_args = 1;\n@@ -202,12 +201,10 @@ demangle_command (const char *args, int from_tty)\n   else\n     lang = current_language;\n \n-  demangled = language_demangle (lang, name, DMGL_ANSI | DMGL_PARAMS);\n+  gdb::unique_xmalloc_ptr<char> demangled\n+    = language_demangle (lang, name, DMGL_ANSI | DMGL_PARAMS);\n   if (demangled != NULL)\n-    {\n-      printf_filtered (\"%s\\n\", demangled);\n-      xfree (demangled);\n-    }\n+    printf_filtered (\"%s\\n\", demangled.get ());\n   else\n     error (_(\"Can't demangle \\\"%s\\\"\"), name);\n }"
    },
    {
      "sha": "913a877c0e05321c8bb75d139abfab8b1f982d60",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -3078,16 +3078,16 @@ check_stub_method (struct type *type, int method_id, int signature_id)\n   struct gdbarch *gdbarch = type->arch ();\n   struct fn_field *f;\n   char *mangled_name = gdb_mangle_name (type, method_id, signature_id);\n-  char *demangled_name = gdb_demangle (mangled_name,\n-\t\t\t\t       DMGL_PARAMS | DMGL_ANSI);\n+  gdb::unique_xmalloc_ptr<char> demangled_name\n+    = gdb_demangle (mangled_name, DMGL_PARAMS | DMGL_ANSI);\n   char *argtypetext, *p;\n   int depth = 0, argcount = 1;\n   struct field *argtypes;\n   struct type *mtype;\n \n   /* Make sure we got back a function string that we can use.  */\n   if (demangled_name)\n-    p = strchr (demangled_name, '(');\n+    p = strchr (demangled_name.get (), '(');\n   else\n     p = NULL;\n \n@@ -3178,8 +3178,6 @@ check_stub_method (struct type *type, int method_id, int signature_id)\n \t\t\targtypes, argcount, p[-2] == '.');\n   mtype->set_is_stub (false);\n   TYPE_FN_FIELD_STUB (f, signature_id) = 0;\n-\n-  xfree (demangled_name);\n }\n \n /* This is the external interface to check_stub_method, above.  This"
    },
    {
      "sha": "cdcd3d5dd781f35e0481d0979ed8539612a686ee",
      "filename": "gdb/gnu-v2-abi.c",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/gnu-v2-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/gnu-v2-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v2-abi.c?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -189,7 +189,7 @@ gnuv2_value_rtti_type (struct value *v, int *full, LONGEST *top, int *using_enc)\n   struct type *rtti_type;\n   CORE_ADDR vtbl;\n   struct bound_minimal_symbol minsym;\n-  char *demangled_name, *p;\n+  char *p;\n   const char *linkage_name;\n   struct type *btype;\n   struct type *known_type_vptr_basetype;\n@@ -248,14 +248,15 @@ gnuv2_value_rtti_type (struct value *v, int *full, LONGEST *top, int *using_enc)\n     return NULL;\n \n   /* If we just skip the prefix, we get screwed by namespaces.  */\n-  demangled_name=gdb_demangle(linkage_name,DMGL_PARAMS|DMGL_ANSI);\n-  p = strchr (demangled_name, ' ');\n+  gdb::unique_xmalloc_ptr<char> demangled_name\n+    = gdb_demangle(linkage_name,DMGL_PARAMS|DMGL_ANSI);\n+  p = strchr (demangled_name.get (), ' ');\n   if (p)\n     *p = '\\0';\n \n   /* Lookup the type for the name.  */\n   /* FIXME: chastain/2003-11-26: block=NULL is bogus.  See pr gdb/1465.  */\n-  rtti_type = cp_lookup_rtti_type (demangled_name, NULL);\n+  rtti_type = cp_lookup_rtti_type (demangled_name.get (), NULL);\n   if (rtti_type == NULL)\n     return NULL;\n "
    },
    {
      "sha": "748d555979723434d31332365e1ebcf1d436059b",
      "filename": "gdb/gnu-v3-abi.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/gnu-v3-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/gnu-v3-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v3-abi.c?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -644,17 +644,14 @@ gnuv3_print_method_ptr (const gdb_byte *contents,\n \t possible paths to the method based on the adjustment.  */\n       if (physname)\n \t{\n-\t  char *demangled_name = gdb_demangle (physname,\n-\t\t\t\t\t       DMGL_ANSI | DMGL_PARAMS);\n+\t  gdb::unique_xmalloc_ptr<char> demangled_name\n+\t    = gdb_demangle (physname, DMGL_ANSI | DMGL_PARAMS);\n \n \t  fprintf_filtered (stream, \"&virtual \");\n \t  if (demangled_name == NULL)\n \t    fputs_filtered (physname, stream);\n \t  else\n-\t    {\n-\t      fputs_filtered (demangled_name, stream);\n-\t      xfree (demangled_name);\n-\t    }\n+\t    fputs_filtered (demangled_name.get (), stream);\n \t  return;\n \t}\n     }"
    },
    {
      "sha": "75cd38d51e8e7061b4d417a5687a098634d71c97",
      "filename": "gdb/go-lang.c",
      "status": "modified",
      "additions": 9,
      "deletions": 14,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/go-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/go-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.c?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -333,12 +333,9 @@ unpack_mangled_go_symbol (const char *mangled_name,\n    This demangler can't work in all situations,\n    thus not too much effort is currently put into it.  */\n \n-char *\n+gdb::unique_xmalloc_ptr<char>\n go_language::demangle_symbol (const char *mangled_name, int options) const\n {\n-  struct obstack tempbuf;\n-  char *result;\n-  char *name_buf;\n   const char *package_name;\n   const char *object_name;\n   const char *method_type_package_name;\n@@ -348,15 +345,16 @@ go_language::demangle_symbol (const char *mangled_name, int options) const\n   if (mangled_name == NULL)\n     return NULL;\n \n-  name_buf = unpack_mangled_go_symbol (mangled_name,\n-\t\t\t\t       &package_name, &object_name,\n-\t\t\t\t       &method_type_package_name,\n-\t\t\t\t       &method_type_object_name,\n-\t\t\t\t       &method_type_is_pointer);\n+  gdb::unique_xmalloc_ptr<char> name_buf\n+    (unpack_mangled_go_symbol (mangled_name,\n+\t\t\t       &package_name, &object_name,\n+\t\t\t       &method_type_package_name,\n+\t\t\t       &method_type_object_name,\n+\t\t\t       &method_type_is_pointer));\n   if (name_buf == NULL)\n     return NULL;\n \n-  obstack_init (&tempbuf);\n+  auto_obstack tempbuf;\n \n   /* Print methods as they appear in \"method expressions\".  */\n   if (method_type_package_name != NULL)\n@@ -380,10 +378,7 @@ go_language::demangle_symbol (const char *mangled_name, int options) const\n     }\n   obstack_grow_str0 (&tempbuf, \"\");\n \n-  result = xstrdup ((const char *) obstack_finish (&tempbuf));\n-  obstack_free (&tempbuf, NULL);\n-  xfree (name_buf);\n-  return result;\n+  return make_unique_xstrdup ((const char *) obstack_finish (&tempbuf));\n }\n \n /* Given a Go symbol, return its package or NULL if unknown."
    },
    {
      "sha": "3a726e7c3fb549ceb67b293703173e7a585946e7",
      "filename": "gdb/go-lang.h",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/go-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/go-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.h?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -94,16 +94,18 @@ class go_language : public language_defn\n \n   /* See language.h.  */\n \n-  bool sniff_from_mangled_name (const char *mangled,\n-\t\t\t\tchar **demangled) const override\n+  bool sniff_from_mangled_name\n+       (const char *mangled, gdb::unique_xmalloc_ptr<char> *demangled)\n+       const override\n   {\n     *demangled = demangle_symbol (mangled, 0);\n     return *demangled != NULL;\n   }\n \n   /* See language.h.  */\n \n-  char *demangle_symbol (const char *mangled, int options) const override;\n+  gdb::unique_xmalloc_ptr<char> demangle_symbol (const char *mangled,\n+\t\t\t\t\t\t int options) const override;\n \n   /* See language.h.  */\n "
    },
    {
      "sha": "81bc2a5a8c6e7f0103fc098fb93c889da02b6920",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -551,7 +551,7 @@ skip_language_trampoline (struct frame_info *frame, CORE_ADDR pc)\n    more flexible demangler for the languages that need it.\n    FIXME: Sometimes the demangler is invoked when we don't know the\n    language, so we can't use this everywhere.  */\n-char *\n+gdb::unique_xmalloc_ptr<char>\n language_demangle (const struct language_defn *current_language, \n \t\t\t\tconst char *mangled, int options)\n {\n@@ -771,7 +771,8 @@ class auto_or_unknown_language : public language_defn\n \n   /* See language.h.  */\n \n-  char *demangle_symbol (const char *mangled, int options) const override\n+  gdb::unique_xmalloc_ptr<char> demangle_symbol (const char *mangled,\n+\t\t\t\t\t\t int options) const override\n   {\n     /* The auto language just uses the C++ demangler.  */\n     return gdb_demangle (mangled, options);"
    },
    {
      "sha": "1ba0b9377e28dece0897b0f9b90dca1d3e6d9b66",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -430,15 +430,16 @@ struct language_defn\n \n      The resulting string should be of the form that will be\n      installed into a symbol.  */\n-  virtual bool sniff_from_mangled_name (const char *mangled,\n-\t\t\t\t\tchar **demangled) const\n+  virtual bool sniff_from_mangled_name\n+       (const char *mangled, gdb::unique_xmalloc_ptr<char> *demangled) const\n   {\n     *demangled = nullptr;\n     return false;\n   }\n \n   /* Return demangled language symbol version of MANGLED, or NULL.  */\n-  virtual char *demangle_symbol (const char *mangled, int options) const\n+  virtual gdb::unique_xmalloc_ptr<char> demangle_symbol (const char *mangled,\n+\t\t\t\t\t\t\t int options) const\n   {\n     return nullptr;\n   }\n@@ -791,8 +792,9 @@ extern const char *language_str (enum language);\n extern CORE_ADDR skip_language_trampoline (struct frame_info *, CORE_ADDR pc);\n \n /* Return demangled language symbol, or NULL.  */\n-extern char *language_demangle (const struct language_defn *current_language, \n-\t\t\t\tconst char *mangled, int options);\n+extern gdb::unique_xmalloc_ptr<char> language_demangle\n+     (const struct language_defn *current_language,\n+      const char *mangled, int options);\n \n /* Return information about whether TYPE should be passed\n    (and returned) by reference at the language level.  */"
    },
    {
      "sha": "5f4cf54c66378aa0bedfaff573aa5375b7d55913",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -1473,10 +1473,11 @@ minimal_symbol_reader::install ()\n \t       if (!msym->name_set)\n \t\t {\n \t\t   /* This will be freed later, by compute_and_set_names.  */\n-\t\t   char *demangled_name\n+\t\t   gdb::unique_xmalloc_ptr<char> demangled_name\n \t\t     = symbol_find_demangled_name (msym, msym->linkage_name ());\n \t\t   msym->set_demangled_name\n-\t\t     (demangled_name, &m_objfile->per_bfd->storage_obstack);\n+\t\t     (demangled_name.release (),\n+\t\t      &m_objfile->per_bfd->storage_obstack);\n \t\t   msym->name_set = 1;\n \t\t }\n \t       /* This mangled_name_hash computation has to be outside of"
    },
    {
      "sha": "bc3a74179826575af627c88ed6f2d7fd2f823204",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 7,
      "deletions": 5,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -251,16 +251,18 @@ class objc_language : public language_defn\n   }\n \n   /* See language.h.  */\n-  bool sniff_from_mangled_name (const char *mangled,\n-\t\t\t\tchar **demangled) const override\n+  bool sniff_from_mangled_name\n+       (const char *mangled, gdb::unique_xmalloc_ptr<char> *demangled)\n+       const override\n   {\n     *demangled = demangle_symbol (mangled, 0);\n     return *demangled != NULL;\n   }\n \n   /* See language.h.  */\n \n-  char *demangle_symbol (const char *mangled, int options) const override;\n+  gdb::unique_xmalloc_ptr<char> demangle_symbol (const char *mangled,\n+\t\t\t\t\t\t int options) const override;\n \n   /* See language.h.  */\n \n@@ -318,7 +320,7 @@ class objc_language : public language_defn\n \n /* See declaration of objc_language::demangle_symbol above.  */\n \n-char *\n+gdb::unique_xmalloc_ptr<char>\n objc_language::demangle_symbol (const char *mangled, int options) const\n {\n   char *demangled, *cp;\n@@ -376,7 +378,7 @@ objc_language::demangle_symbol (const char *mangled, int options) const\n \n       *cp++ = ']';\t\t/* closing right brace */\n       *cp++ = 0;\t\t/* string terminator */\n-      return demangled;\n+      return gdb::unique_xmalloc_ptr<char> (demangled);\n     }\n   else\n     return nullptr;\t/* Not an objc mangled name.  */"
    },
    {
      "sha": "6962f45d7b88c56ad40d0c3f01b4226e78ffddc0",
      "filename": "gdb/rust-lang.h",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/rust-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/rust-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.h?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -84,16 +84,18 @@ class rust_language : public language_defn\n \n   /* See language.h.  */\n \n-  bool sniff_from_mangled_name (const char *mangled,\n-\t\t\t\tchar **demangled) const override\n+  bool sniff_from_mangled_name\n+       (const char *mangled, gdb::unique_xmalloc_ptr<char> *demangled)\n+       const override\n   {\n     *demangled = gdb_demangle (mangled, DMGL_PARAMS | DMGL_ANSI);\n     return *demangled != NULL;\n   }\n \n   /* See language.h.  */\n \n-  char *demangle_symbol (const char *mangled, int options) const override\n+  gdb::unique_xmalloc_ptr<char> demangle_symbol (const char *mangled,\n+\t\t\t\t\t\t int options) const override\n   {\n     return gdb_demangle (mangled, options);\n   }"
    },
    {
      "sha": "3f2eb64a7c426ed231bf082d65ebd8d08f2e5060",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 11,
      "deletions": 10,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -821,11 +821,11 @@ create_demangled_names_hash (struct objfile_per_bfd_storage *per_bfd)\n \n /* See symtab.h  */\n \n-char *\n+gdb::unique_xmalloc_ptr<char>\n symbol_find_demangled_name (struct general_symbol_info *gsymbol,\n \t\t\t    const char *mangled)\n {\n-  char *demangled = NULL;\n+  gdb::unique_xmalloc_ptr<char> demangled;\n   int i;\n \n   if (gsymbol->language () == language_unknown)\n@@ -931,8 +931,8 @@ general_symbol_info::compute_and_set_names (gdb::string_view linkage_name,\n \tlinkage_name_copy = linkage_name;\n \n       if (demangled_name.get () == nullptr)\n-\t demangled_name.reset\n-\t   (symbol_find_demangled_name (this, linkage_name_copy.data ()));\n+\t demangled_name\n+\t   = symbol_find_demangled_name (this, linkage_name_copy.data ());\n \n       /* Suppose we have demangled_name==NULL, copy_name==0, and\n \t linkage_name_copy==linkage_name.  In this case, we already have the\n@@ -1858,9 +1858,10 @@ demangle_for_lookup (const char *name, enum language lang,\n      lookup, so we can always binary search.  */\n   if (lang == language_cplus)\n     {\n-      char *demangled_name = gdb_demangle (name, DMGL_ANSI | DMGL_PARAMS);\n+      gdb::unique_xmalloc_ptr<char> demangled_name\n+\t= gdb_demangle (name, DMGL_ANSI | DMGL_PARAMS);\n       if (demangled_name != NULL)\n-\treturn storage.set_malloc_ptr (demangled_name);\n+\treturn storage.set_malloc_ptr (std::move (demangled_name));\n \n       /* If we were given a non-mangled name, canonicalize it\n \t according to the language (so far only for C++).  */\n@@ -1870,16 +1871,16 @@ demangle_for_lookup (const char *name, enum language lang,\n     }\n   else if (lang == language_d)\n     {\n-      char *demangled_name = d_demangle (name, 0);\n+      gdb::unique_xmalloc_ptr<char> demangled_name = d_demangle (name, 0);\n       if (demangled_name != NULL)\n-\treturn storage.set_malloc_ptr (demangled_name);\n+\treturn storage.set_malloc_ptr (std::move (demangled_name));\n     }\n   else if (lang == language_go)\n     {\n-      char *demangled_name\n+      gdb::unique_xmalloc_ptr<char> demangled_name\n \t= language_def (language_go)->demangle_symbol (name, 0);\n       if (demangled_name != NULL)\n-\treturn storage.set_malloc_ptr (demangled_name);\n+\treturn storage.set_malloc_ptr (std::move (demangled_name));\n     }\n \n   return name;"
    },
    {
      "sha": "61f20b25a7bd642fe13e465bab4823ce70aecf11",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -592,8 +592,8 @@ extern CORE_ADDR get_symbol_address (const struct symbol *sym);\n    then set the language appropriately.  The returned name is allocated\n    by the demangler and should be xfree'd.  */\n \n-extern char *symbol_find_demangled_name (struct general_symbol_info *gsymbol,\n-\t\t\t\t\t const char *mangled);\n+extern gdb::unique_xmalloc_ptr<char> symbol_find_demangled_name\n+     (struct general_symbol_info *gsymbol, const char *mangled);\n \n /* Return true if NAME matches the \"search\" name of SYMBOL, according\n    to the symbol's language.  */"
    },
    {
      "sha": "5486c337a3c85b8b95e6f9ea0331bc27a71a1592",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 3,
      "deletions": 8,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3456e70c9d69da8d62a0ea1f8c2e643648afc654/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=3456e70c9d69da8d62a0ea1f8c2e643648afc654",
      "patch": "@@ -2345,8 +2345,6 @@ void\n fprintf_symbol_filtered (struct ui_file *stream, const char *name,\n \t\t\t enum language lang, int arg_mode)\n {\n-  char *demangled;\n-\n   if (name != NULL)\n     {\n       /* If user wants to see raw output, no problem.  */\n@@ -2356,12 +2354,9 @@ fprintf_symbol_filtered (struct ui_file *stream, const char *name,\n \t}\n       else\n \t{\n-\t  demangled = language_demangle (language_def (lang), name, arg_mode);\n-\t  fputs_filtered (demangled ? demangled : name, stream);\n-\t  if (demangled != NULL)\n-\t    {\n-\t      xfree (demangled);\n-\t    }\n+\t  gdb::unique_xmalloc_ptr<char> demangled\n+\t    = language_demangle (language_def (lang), name, arg_mode);\n+\t  fputs_filtered (demangled ? demangled.get () : name, stream);\n \t}\n     }\n }"
    }
  ]
}