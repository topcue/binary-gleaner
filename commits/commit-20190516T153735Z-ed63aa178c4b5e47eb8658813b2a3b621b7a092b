{
  "sha": "ed63aa178c4b5e47eb8658813b2a3b621b7a092b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWQ2M2FhMTc4YzRiNWU0N2ViODY1ODgxM2IyYTNiNjIxYjdhMDkyYg==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T13:39:12Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:37:35Z"
    },
    "message": "[PATCH 50/57][Arm][OBJDUMP] Add support for MVE shift instructions\n\nopcodes/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Michael Collison <michael.collison@arm.com>\n\n\t* arm-dis.c (enum mve_instructions): Add new instructions.\n\t(enum mve_undefined): Add new reasons.\n\t(is_mve_encoding_conflict): Handle new instructions.\n\t(is_mve_undefined): Likewise.\n\t(is_mve_unpredictable): Likewise.\n\t(print_mve_undefined): Likewise.\n\t(print_mve_size): Likewise.\n\t(print_mve_shift_n): Likewise.\n\t(print_insn_mve): Likewise.",
    "tree": {
      "sha": "6fc402da49ff884fffb40b167c2f1fc07246c2f4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6fc402da49ff884fffb40b167c2f1fc07246c2f4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ed63aa178c4b5e47eb8658813b2a3b621b7a092b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed63aa178c4b5e47eb8658813b2a3b621b7a092b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ed63aa178c4b5e47eb8658813b2a3b621b7a092b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed63aa178c4b5e47eb8658813b2a3b621b7a092b/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "897b9bbcffa894bd3f3664d7f1b666379493d9b2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/897b9bbcffa894bd3f3664d7f1b666379493d9b2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/897b9bbcffa894bd3f3664d7f1b666379493d9b2"
    }
  ],
  "stats": {
    "total": 424,
    "additions": 422,
    "deletions": 2
  },
  "files": [
    {
      "sha": "3c6573ddf1a148d17dfbf2931391730f6841fda5",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed63aa178c4b5e47eb8658813b2a3b621b7a092b/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed63aa178c4b5e47eb8658813b2a3b621b7a092b/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=ed63aa178c4b5e47eb8658813b2a3b621b7a092b",
      "patch": "@@ -1,3 +1,16 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Michael Collison <michael.collison@arm.com>\n+\n+\t* arm-dis.c (enum mve_instructions): Add new instructions.\n+\t(enum mve_undefined): Add new reasons.\n+\t(is_mve_encoding_conflict): Handle new instructions.\n+\t(is_mve_undefined): Likewise.\n+\t(is_mve_unpredictable): Likewise.\n+\t(print_mve_undefined): Likewise.\n+\t(print_mve_size): Likewise.\n+\t(print_mve_shift_n): Likewise.\n+\t(print_insn_mve): Likewise.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Michael Collison <michael.collison@arm.com>\n "
    },
    {
      "sha": "05fad18614d99011c35258144a5560467a7d309f",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 409,
      "deletions": 2,
      "changes": 411,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ed63aa178c4b5e47eb8658813b2a3b621b7a092b/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ed63aa178c4b5e47eb8658813b2a3b621b7a092b/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=ed63aa178c4b5e47eb8658813b2a3b621b7a092b",
      "patch": "@@ -184,6 +184,30 @@ enum mve_instructions\n   MVE_VHCADD,\n   MVE_VCMLA_FP,\n   MVE_VCMUL_FP,\n+  MVE_VQRSHL_T1,\n+  MVE_VQRSHL_T2,\n+  MVE_VQRSHRN,\n+  MVE_VQRSHRUN,\n+  MVE_VQSHL_T1,\n+  MVE_VQSHL_T2,\n+  MVE_VQSHLU_T3,\n+  MVE_VQSHL_T4,\n+  MVE_VQSHRN,\n+  MVE_VQSHRUN,\n+  MVE_VRSHL_T1,\n+  MVE_VRSHL_T2,\n+  MVE_VRSHR,\n+  MVE_VRSHRN,\n+  MVE_VSHL_T1,\n+  MVE_VSHL_T2,\n+  MVE_VSHL_T3,\n+  MVE_VSHLC,\n+  MVE_VSHLL_T1,\n+  MVE_VSHLL_T2,\n+  MVE_VSHR,\n+  MVE_VSHRN,\n+  MVE_VSLI,\n+  MVE_VSRI,\n   MVE_NONE\n };\n \n@@ -216,6 +240,7 @@ enum mve_unpredictable\n \n enum mve_undefined\n {\n+  UNDEF_SIZE,\t\t\t/* undefined size.  */\n   UNDEF_SIZE_0,\t\t\t/* undefined because size == 0.  */\n   UNDEF_SIZE_2,\t\t\t/* undefined because size == 2.  */\n   UNDEF_SIZE_3,\t\t\t/* undefined because size == 3.  */\n@@ -2420,6 +2445,63 @@ static const struct mopcode32 mve_opcodes[] =\n    0xef800050, 0xefb810f0,\n    \"vorr%v.i%8-11s\\t%13-15,22Q, %E\"},\n \n+  /* Vector VQSHL T2 Variant.\n+     NOTE: MVE_VQSHL_T2 must appear in the table before\n+     before MVE_VMOV_IMM_TO_VEC due to opcode aliasing.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQSHL_T2,\n+   0xef800750, 0xef801fd1,\n+   \"vqshl%v.%u%19-21s\\t%13-15,22Q, %1-3,5Q, #%16-18d\"},\n+\n+  /* Vector VQSHLU T3 Variant\n+     NOTE: MVE_VQSHL_T2 must appear in the table before\n+     before MVE_VMOV_IMM_TO_VEC due to opcode aliasing.  */\n+\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQSHLU_T3,\n+   0xff800650, 0xff801fd1,\n+   \"vqshlu%v.s%19-21s\\t%13-15,22Q, %1-3,5Q, #%16-18d\"},\n+\n+  /* Vector VRSHR\n+     NOTE: MVE_VRSHR must appear in the table before\n+     before MVE_VMOV_IMM_TO_VEC due to opcode aliasing.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VRSHR,\n+   0xef800250, 0xef801fd1,\n+   \"vrshr%v.%u%19-21s\\t%13-15,22Q, %1-3,5Q, #%16-18d\"},\n+\n+  /* Vector VSHL.\n+     NOTE: MVE_VSHL must appear in the table before\n+     before MVE_VMOV_IMM_TO_VEC due to opcode aliasing.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSHL_T1,\n+   0xef800550, 0xff801fd1,\n+   \"vshl%v.i%19-21s\\t%13-15,22Q, %1-3,5Q, #%16-18d\"},\n+\n+  /* Vector VSHR\n+     NOTE: MVE_VSHR must appear in the table before\n+     before MVE_VMOV_IMM_TO_VEC due to opcode aliasing.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSHR,\n+   0xef800050, 0xef801fd1,\n+   \"vshr%v.%u%19-21s\\t%13-15,22Q, %1-3,5Q, #%16-18d\"},\n+\n+  /* Vector VSLI\n+     NOTE: MVE_VSLI must appear in the table before\n+     before MVE_VMOV_IMM_TO_VEC due to opcode aliasing.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSLI,\n+   0xff800550, 0xff801fd1,\n+   \"vsli%v.%19-21s\\t%13-15,22Q, %1-3,5Q, #%16-18d\"},\n+\n+  /* Vector VSRI\n+     NOTE: MVE_VSRI must appear in the table before\n+     before MVE_VMOV_IMM_TO_VEC due to opcode aliasing.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSRI,\n+   0xff800450, 0xff801fd1,\n+   \"vsri%v.%19-21s\\t%13-15,22Q, %1-3,5Q, #%16-18d\"},\n+\n   /* Vector VMOV immediate to vector,\n      cmode == 11x1 -> VMVN which is UNDEFINED\n      for such a cmode.  */\n@@ -2462,6 +2544,13 @@ static const struct mopcode32 mve_opcodes[] =\n    0xee100b10, 0xff100f1f,\n    \"vmov%c.%u%5-6,21-22s\\t%12-15r, %17-19,7Q[%N]\"},\n \n+  /* Vector VSHLL T1 Variant.  Note: VSHLL T1 must appear before MVE_VMOVL due\n+     to instruction opcode aliasing.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSHLL_T1,\n+   0xeea00f40, 0xefa00fd1,\n+   \"vshll%T%v.%u%19-20s\\t%13-15,22Q, %1-3,5Q, #%16-18d\"},\n+\n   /* Vector VMOVL long.  */\n   {ARM_FEATURE_COPROC (FPU_MVE),\n    MVE_VMOVL,\n@@ -2612,6 +2701,54 @@ static const struct mopcode32 mve_opcodes[] =\n    0xfe010e60, 0xff811f70,\n    \"vqrdmulh%v.s%20-21s\\t%13-15,22Q, %17-19,7Q, %0-3r\"},\n \n+  /* Vector VQRSHL T1 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQRSHL_T1,\n+   0xef000550, 0xef811f51,\n+   \"vqrshl%v.%u%20-21s\\t%13-15,22Q, %1-3,5Q, %17-19,7Q\"},\n+\n+  /* Vector VQRSHL T2 variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQRSHL_T2,\n+   0xee331ee0, 0xefb31ff0,\n+   \"vqrshl%v.%u%18-19s\\t%13-15,22Q, %0-3r\"},\n+\n+  /* Vector VQRSHRN.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQRSHRN,\n+   0xee800f41, 0xefa00fd1,\n+   \"vqrshrn%T%v.%u%19-20s\\t%13-15,22Q, %1-3,5Q, #%16-18d\"},\n+\n+  /* Vector VQRSHRUN.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQRSHRUN,\n+   0xfe800fc0, 0xffa00fd1,\n+   \"vqrshrun%T%v.s%19-20s\\t%13-15,22Q, %1-3,5Q, #%16-18d\"},\n+\n+  /* Vector VQSHL T1 Variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQSHL_T1,\n+   0xee311ee0, 0xefb31ff0,\n+   \"vqshl%v.%u%18-19s\\t%13-15,22Q, %0-3r\"},\n+\n+  /* Vector VQSHL T4 Variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQSHL_T4,\n+   0xef000450, 0xef811f51,\n+   \"vqshl%v.%u%20-21s\\t%13-15,22Q, %1-3,5Q, %17-19,7Q\"},\n+\n+  /* Vector VQSHRN.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQSHRN,\n+   0xee800f40, 0xefa00fd1,\n+   \"vqshrn%T%v.%u%19-20s\\t%13-15,22Q, %1-3,5Q, #%16-18d\"},\n+\n+  /* Vector VQSHRUN.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VQSHRUN,\n+   0xee800fc0, 0xffa00fd1,\n+   \"vqshrun%T%v.s%19-20s\\t%13-15,22Q, %1-3,5Q, #%16-18d\"},\n+\n   /* Vector VRINT floating point.  */\n   {ARM_FEATURE_COPROC (FPU_MVE_FP),\n    MVE_VRINT_FP,\n@@ -2630,6 +2767,54 @@ static const struct mopcode32 mve_opcodes[] =\n    0xee801f00, 0xef811f51,\n    \"vrmlaldavh%5Ax%v.%u32\\t%13-15l, %20-22h, %17-19,7Q, %1-3Q\"},\n \n+  /* Vector VRSHL T1 Variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VRSHL_T1,\n+   0xef000540, 0xef811f51,\n+   \"vrshl%v.%u%20-21s\\t%13-15,22Q, %1-3,5Q, %17-19,7Q\"},\n+\n+  /* Vector VRSHL T2 Variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VRSHL_T2,\n+   0xee331e60, 0xefb31ff0,\n+   \"vrshl%v.%u%18-19s\\t%13-15,22Q, %0-3r\"},\n+\n+  /* Vector VRSHRN.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VRSHRN,\n+   0xfe800fc1, 0xffa00fd1,\n+   \"vrshrn%T%v.i%19-20s\\t%13-15,22Q, %1-3,5Q, #%16-18d\"},\n+\n+  /* Vector VSHL T2 Variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSHL_T2,\n+   0xee311e60, 0xefb31ff0,\n+   \"vshl%v.%u%18-19s\\t%13-15,22Q, %0-3r\"},\n+\n+  /* Vector VSHL T3 Variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSHL_T3,\n+   0xef000440, 0xef811f51,\n+   \"vshl%v.%u%20-21s\\t%13-15,22Q, %1-3,5Q, %17-19,7Q\"},\n+\n+  /* Vector VSHLC.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSHLC,\n+   0xeea00fc0, 0xffa01ff0,\n+   \"vshlc%v\\t%13-15,22Q, %0-3r, #%16-20d\"},\n+\n+  /* Vector VSHLL T2 Variant.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSHLL_T2,\n+   0xee310e01, 0xefb30fd1,\n+   \"vshll%T%v.%u%18-19s\\t%13-15,22Q, %1-3,5Q, #%18-19d\"},\n+\n+  /* Vector VSHRN.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VSHRN,\n+   0xee800fc1, 0xffa00fd1,\n+   \"vshrn%T%v.i%19-20s\\t%13-15,22Q, %1-3,5Q, #%16-18d\"},\n+\n   /* Vector VST2 no writeback.  */\n   {ARM_FEATURE_COPROC (FPU_MVE),\n    MVE_VST2,\n@@ -4734,6 +4919,10 @@ is_mve_encoding_conflict (unsigned long given,\n       else\n \treturn FALSE;\n \n+    case MVE_VQRSHL_T1:\n+    case MVE_VQSHL_T4:\n+    case MVE_VRSHL_T1:\n+    case MVE_VSHL_T3:\n     case MVE_VCADD_VEC:\n     case MVE_VHCADD:\n     case MVE_VDDUP:\n@@ -4841,6 +5030,11 @@ is_mve_encoding_conflict (unsigned long given,\n \t  return FALSE;\n       }\n \n+    case MVE_VQRSHL_T2:\n+    case MVE_VQSHL_T1:\n+    case MVE_VRSHL_T2:\n+    case MVE_VSHL_T2:\n+    case MVE_VSHLL_T2:\n     case MVE_VADDV:\n     case MVE_VMOVN:\n     case MVE_VQMOVUN:\n@@ -4873,6 +5067,32 @@ is_mve_encoding_conflict (unsigned long given,\n       else\n \treturn FALSE;\n \n+\n+    case MVE_VSHLL_T1:\n+      if (arm_decode_field (given, 16, 18) == 0)\n+\t{\n+\t  unsigned long sz = arm_decode_field (given, 19, 20);\n+\n+\t  if ((sz == 1) || (sz == 2))\n+\t    return TRUE;\n+\t  else\n+\t    return FALSE;\n+\t}\n+      else\n+\treturn FALSE;\n+\n+    case MVE_VQSHL_T2:\n+    case MVE_VQSHLU_T3:\n+    case MVE_VRSHR:\n+    case MVE_VSHL_T1:\n+    case MVE_VSHR:\n+    case MVE_VSLI:\n+    case MVE_VSRI:\n+      if (arm_decode_field (given, 19, 21) == 0)\n+\treturn TRUE;\n+      else\n+\treturn FALSE;\n+\n     default:\n       return FALSE;\n \n@@ -5228,6 +5448,7 @@ is_mve_undefined (unsigned long given, enum mve_instructions matched_insn,\n       else\n \treturn FALSE;\n \n+    case MVE_VSHLL_T2:\n     case MVE_VMOVN:\n       if (arm_decode_field (given, 18, 19) == 2)\n \t{\n@@ -5250,6 +5471,56 @@ is_mve_undefined (unsigned long given, enum mve_instructions matched_insn,\n       else\n \treturn FALSE;\n \n+    case MVE_VQSHRN:\n+    case MVE_VQSHRUN:\n+    case MVE_VSHLL_T1:\n+    case MVE_VSHRN:\n+      {\n+\tunsigned long sz = arm_decode_field (given, 19, 20);\n+\tif (sz == 1)\n+\t  return FALSE;\n+\telse if ((sz & 2) == 2)\n+\t  return FALSE;\n+\telse\n+\t  {\n+\t    *undefined_code = UNDEF_SIZE;\n+\t    return TRUE;\n+\t  }\n+      }\n+      break;\n+\n+    case MVE_VQSHL_T2:\n+    case MVE_VQSHLU_T3:\n+    case MVE_VRSHR:\n+    case MVE_VSHL_T1:\n+    case MVE_VSHR:\n+    case MVE_VSLI:\n+    case MVE_VSRI:\n+      {\n+\tunsigned long sz = arm_decode_field (given, 19, 21);\n+\tif ((sz & 7) == 1)\n+\t  return FALSE;\n+\telse if ((sz & 6) == 2)\n+\t  return FALSE;\n+\telse if ((sz & 4) == 4)\n+\t  return FALSE;\n+\telse\n+\t  {\n+\t    *undefined_code = UNDEF_SIZE;\n+\t    return TRUE;\n+\t  }\n+      }\n+\n+    case MVE_VQRSHRN:\n+    case MVE_VQRSHRUN:\n+      if (arm_decode_field (given, 19, 20) == 0)\n+\t{\n+\t  *undefined_code = UNDEF_SIZE_0;\n+\t  return TRUE;\n+\t}\n+      else\n+\treturn FALSE;\n+\n     default:\n       return FALSE;\n     }\n@@ -5309,6 +5580,11 @@ is_mve_unpredictable (unsigned long given, enum mve_instructions matched_insn,\n \treturn FALSE;\n       }\n \n+    case MVE_VQRSHL_T2:\n+    case MVE_VQSHL_T1:\n+    case MVE_VRSHL_T2:\n+    case MVE_VSHL_T2:\n+    case MVE_VSHLC:\n     case MVE_VQDMLAH:\n     case MVE_VQRDMLAH:\n     case MVE_VQDMLASH:\n@@ -5897,6 +6173,10 @@ print_mve_undefined (struct disassemble_info *info,\n \n   switch (undefined_code)\n     {\n+    case UNDEF_SIZE:\n+      func (stream, \"illegal size\");\n+      break;\n+\n     case UNDEF_SIZE_0:\n       func (stream, \"size equals zero\");\n       break;\n@@ -6403,8 +6683,17 @@ print_mve_size (struct disassemble_info *info,\n     case MVE_VQRDMULH_T2:\n     case MVE_VQDMULH_T3:\n     case MVE_VQRDMULH_T4:\n+    case MVE_VQRSHL_T1:\n+    case MVE_VQRSHL_T2:\n+    case MVE_VQSHL_T1:\n+    case MVE_VQSHL_T4:\n     case MVE_VRHADD:\n     case MVE_VRINT_FP:\n+    case MVE_VRSHL_T1:\n+    case MVE_VRSHL_T2:\n+    case MVE_VSHL_T2:\n+    case MVE_VSHL_T3:\n+    case MVE_VSHLL_T2:\n     case MVE_VST2:\n     case MVE_VST4:\n     case MVE_VSTRB_SCATTER_T1:\n@@ -6563,11 +6852,95 @@ print_mve_size (struct disassemble_info *info,\n \t}\n       break;\n \n+    case MVE_VQSHRN:\n+    case MVE_VQSHRUN:\n+    case MVE_VQRSHRN:\n+    case MVE_VQRSHRUN:\n+    case MVE_VRSHRN:\n+    case MVE_VSHRN:\n+      {\n+\tswitch (size)\n+\t{\n+\tcase 1:\n+\t  func (stream, \"16\");\n+\t  break;\n+\n+\tcase 2: case 3:\n+\t  func (stream, \"32\");\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+      }\n+      break;\n+\n+    case MVE_VQSHL_T2:\n+    case MVE_VQSHLU_T3:\n+    case MVE_VRSHR:\n+    case MVE_VSHL_T1:\n+    case MVE_VSHLL_T1:\n+    case MVE_VSHR:\n+    case MVE_VSLI:\n+    case MVE_VSRI:\n+      {\n+\tswitch (size)\n+\t{\n+\tcase 1:\n+\t  func (stream, \"8\");\n+\t  break;\n+\n+\tcase 2: case 3:\n+\t  func (stream, \"16\");\n+\t  break;\n+\n+\tcase 4: case 5: case 6: case 7:\n+\t  func (stream, \"32\");\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+      }\n+      break;\n+\n     default:\n       break;\n     }\n }\n \n+static void\n+print_mve_shift_n (struct disassemble_info *info, long given,\n+\t\t   enum mve_instructions matched_insn)\n+{\n+  void *stream = info->stream;\n+  fprintf_ftype func = info->fprintf_func;\n+\n+  int startAt0\n+    = matched_insn == MVE_VQSHL_T2\n+      || matched_insn == MVE_VQSHLU_T3\n+      || matched_insn == MVE_VSHL_T1\n+      || matched_insn == MVE_VSHLL_T1\n+      || matched_insn == MVE_VSLI;\n+\n+  unsigned imm6 = (given & 0x3f0000) >> 16;\n+\n+  if (matched_insn == MVE_VSHLL_T1)\n+    imm6 &= 0x1f;\n+\n+  unsigned shiftAmount = 0;\n+  if ((imm6 & 0x20) != 0)\n+    shiftAmount = startAt0 ? imm6 - 32 : 64 - imm6;\n+  else if ((imm6 & 0x10) != 0)\n+    shiftAmount = startAt0 ? imm6 - 16 : 32 - imm6;\n+  else if ((imm6 & 0x08) != 0)\n+    shiftAmount = startAt0 ? imm6 - 8 : 16 - imm6;\n+  else\n+    print_mve_undefined (info, UNDEF_SIZE_0);\n+\n+  func (stream, \"%u\", shiftAmount);\n+}\n+\n static void\n print_vec_condition (struct disassemble_info *info, long given,\n \t\t     enum mve_instructions matched_insn)\n@@ -8207,8 +8580,42 @@ print_insn_mve (struct disassemble_info *info, long given)\n \t\t\t    func (stream, \"%s\", arm_regnames[value]);\n \t\t\t    break;\n \t\t\t  case 'd':\n-\t\t\t    func (stream, \"%ld\", value);\n-\t\t\t    value_in_comment = value;\n+\t\t\t    if (insn->mve_op == MVE_VQSHL_T2\n+\t\t\t\t|| insn->mve_op == MVE_VQSHLU_T3\n+\t\t\t\t|| insn->mve_op == MVE_VRSHR\n+\t\t\t\t|| insn->mve_op == MVE_VRSHRN\n+\t\t\t\t|| insn->mve_op == MVE_VSHL_T1\n+\t\t\t\t|| insn->mve_op == MVE_VSHLL_T1\n+\t\t\t\t|| insn->mve_op == MVE_VSHR\n+\t\t\t\t|| insn->mve_op == MVE_VSHRN\n+\t\t\t\t|| insn->mve_op == MVE_VSLI\n+\t\t\t\t|| insn->mve_op == MVE_VSRI)\n+\t\t\t      print_mve_shift_n (info, given, insn->mve_op);\n+\t\t\t    else if (insn->mve_op == MVE_VSHLL_T2)\n+\t\t\t      {\n+\t\t\t\tswitch (value)\n+\t\t\t\t  {\n+\t\t\t\t  case 0x00:\n+\t\t\t\t    func (stream, \"8\");\n+\t\t\t\t    break;\n+\t\t\t\t  case 0x01:\n+\t\t\t\t    func (stream, \"16\");\n+\t\t\t\t    break;\n+\t\t\t\t  case 0x10:\n+\t\t\t\t    print_mve_undefined (info, UNDEF_SIZE_0);\n+\t\t\t\t    break;\n+\t\t\t\t  default:\n+\t\t\t\t    assert (0);\n+\t\t\t\t    break;\n+\t\t\t\t  }\n+\t\t\t      }\n+\t\t\t    else\n+\t\t\t      {\n+\t\t\t\tif (insn->mve_op == MVE_VSHLC && value == 0)\n+\t\t\t\t  value = 32;\n+\t\t\t\tfunc (stream, \"%ld\", value);\n+\t\t\t\tvalue_in_comment = value;\n+\t\t\t      }\n \t\t\t    break;\n \t\t\t  case 'F':\n \t\t\t    func (stream, \"s%ld\", value);"
    }
  ]
}