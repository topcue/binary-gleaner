{
  "sha": "72d0a71134f9a7e4725d6ac490e1323cf7aa6ec2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzJkMGE3MTEzNGY5YTdlNDcyNWQ2YWM0OTBlMTMyM2NmN2FhNmVjMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:17Z"
    },
    "message": "Add c-exp.h and c_string_operation\n\nThis adds the new file c-exp.h, where C operation classes will be\ndeclared.  The first such class, c_string_operation, is also added\nhere.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* c-lang.c (c_string_operation::evaluate): New method.\n\t* c-exp.h: New file.",
    "tree": {
      "sha": "ad06048ae5e4a24d076b710f8545586d5a813388",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ad06048ae5e4a24d076b710f8545586d5a813388"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/72d0a71134f9a7e4725d6ac490e1323cf7aa6ec2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/72d0a71134f9a7e4725d6ac490e1323cf7aa6ec2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/72d0a71134f9a7e4725d6ac490e1323cf7aa6ec2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/72d0a71134f9a7e4725d6ac490e1323cf7aa6ec2/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9186293fd6bd4c3a4855c7aa62ad2ab1734077e6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9186293fd6bd4c3a4855c7aa62ad2ab1734077e6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9186293fd6bd4c3a4855c7aa62ad2ab1734077e6"
    }
  ],
  "stats": {
    "total": 177,
    "additions": 177,
    "deletions": 0
  },
  "files": [
    {
      "sha": "5dd766606bbef4481af340498a2cf817ebdccf31",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/72d0a71134f9a7e4725d6ac490e1323cf7aa6ec2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/72d0a71134f9a7e4725d6ac490e1323cf7aa6ec2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=72d0a71134f9a7e4725d6ac490e1323cf7aa6ec2",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* c-lang.c (c_string_operation::evaluate): New method.\n+\t* c-exp.h: New file.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (class ternop_cond_operation): New."
    },
    {
      "sha": "5558a773e98480bc782fd8c76d8bb0aec4189581",
      "filename": "gdb/c-exp.h",
      "status": "added",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/72d0a71134f9a7e4725d6ac490e1323cf7aa6ec2/gdb/c-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/72d0a71134f9a7e4725d6ac490e1323cf7aa6ec2/gdb/c-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.h?ref=72d0a71134f9a7e4725d6ac490e1323cf7aa6ec2",
      "patch": "@@ -0,0 +1,46 @@\n+/* Definitions for C expressions\n+\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef C_EXP_H\n+#define C_EXP_H\n+\n+#include \"expop.h\"\n+\n+namespace expr\n+{\n+\n+class c_string_operation\n+  : public tuple_holding_operation<enum c_string_type_values,\n+\t\t\t\t   std::vector<std::string>>\n+{\n+public:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override;\n+\n+  enum exp_opcode opcode () const override\n+  { return OP_STRING; }\n+};\n+\n+}/* namespace expr */\n+\n+#endif /* C_EXP_H */"
    },
    {
      "sha": "d191d07a00abb787e2f643e024d77a4fd1c2d6c4",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 126,
      "deletions": 0,
      "changes": 126,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/72d0a71134f9a7e4725d6ac490e1323cf7aa6ec2/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/72d0a71134f9a7e4725d6ac490e1323cf7aa6ec2/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=72d0a71134f9a7e4725d6ac490e1323cf7aa6ec2",
      "patch": "@@ -37,6 +37,7 @@\n #include \"gdbcore.h\"\n #include \"gdbarch.h\"\n #include \"compile/compile-internal.h\"\n+#include \"c-exp.h\"\n \n /* Given a C string type, STR_TYPE, return the corresponding target\n    character set name.  */\n@@ -728,6 +729,131 @@ evaluate_subexp_c (struct type *expect_type, struct expression *exp,\n     }\n   return evaluate_subexp_standard (expect_type, exp, pos, noside);\n }\n+\n+namespace expr\n+{\n+\n+value *\n+c_string_operation::evaluate (struct type *expect_type,\n+\t\t\t      struct expression *exp,\n+\t\t\t      enum noside noside)\n+{\n+  struct type *type;\n+  struct value *result;\n+  c_string_type dest_type;\n+  const char *dest_charset;\n+  int satisfy_expected = 0;\n+\n+  auto_obstack output;\n+\n+  dest_type = std::get<0> (m_storage);\n+\n+  switch (dest_type & ~C_CHAR)\n+    {\n+    case C_STRING:\n+      type = language_string_char_type (exp->language_defn,\n+\t\t\t\t\texp->gdbarch);\n+      break;\n+    case C_WIDE_STRING:\n+      type = lookup_typename (exp->language_defn, \"wchar_t\", NULL, 0);\n+      break;\n+    case C_STRING_16:\n+      type = lookup_typename (exp->language_defn, \"char16_t\", NULL, 0);\n+      break;\n+    case C_STRING_32:\n+      type = lookup_typename (exp->language_defn, \"char32_t\", NULL, 0);\n+      break;\n+    default:\n+      internal_error (__FILE__, __LINE__, _(\"unhandled c_string_type\"));\n+    }\n+\n+  /* Ensure TYPE_LENGTH is valid for TYPE.  */\n+  check_typedef (type);\n+\n+  /* If the caller expects an array of some integral type,\n+     satisfy them.  If something odder is expected, rely on the\n+     caller to cast.  */\n+  if (expect_type && expect_type->code () == TYPE_CODE_ARRAY)\n+    {\n+      struct type *element_type\n+\t= check_typedef (TYPE_TARGET_TYPE (expect_type));\n+\n+      if (element_type->code () == TYPE_CODE_INT\n+\t  || element_type->code () == TYPE_CODE_CHAR)\n+\t{\n+\t  type = element_type;\n+\t  satisfy_expected = 1;\n+\t}\n+    }\n+\n+  dest_charset = charset_for_string_type (dest_type, exp->gdbarch);\n+\n+  if (noside != EVAL_SKIP)\n+    {\n+      for (const std::string &item : std::get<1> (m_storage))\n+\tparse_one_string (&output, item.c_str (), item.size (),\n+\t\t\t  dest_charset, type);\n+    }\n+\n+  if (noside == EVAL_SKIP)\n+    {\n+      /* Return a dummy value of the appropriate type.  */\n+      if (expect_type != NULL)\n+\tresult = allocate_value (expect_type);\n+      else if ((dest_type & C_CHAR) != 0)\n+\tresult = allocate_value (type);\n+      else\n+\tresult = value_cstring (\"\", 0, type);\n+      return result;\n+    }\n+\n+  if ((dest_type & C_CHAR) != 0)\n+    {\n+      LONGEST value;\n+\n+      if (obstack_object_size (&output) != TYPE_LENGTH (type))\n+\terror (_(\"Could not convert character \"\n+\t\t \"constant to target character set\"));\n+      value = unpack_long (type, (gdb_byte *) obstack_base (&output));\n+      result = value_from_longest (type, value);\n+    }\n+  else\n+    {\n+      int i;\n+\n+      /* Write the terminating character.  */\n+      for (i = 0; i < TYPE_LENGTH (type); ++i)\n+\tobstack_1grow (&output, 0);\n+\n+      if (satisfy_expected)\n+\t{\n+\t  LONGEST low_bound, high_bound;\n+\t  int element_size = TYPE_LENGTH (type);\n+\n+\t  if (!get_discrete_bounds (expect_type->index_type (),\n+\t\t\t\t    &low_bound, &high_bound))\n+\t    {\n+\t      low_bound = 0;\n+\t      high_bound = (TYPE_LENGTH (expect_type) / element_size) - 1;\n+\t    }\n+\t  if (obstack_object_size (&output) / element_size\n+\t      > (high_bound - low_bound + 1))\n+\t    error (_(\"Too many array elements\"));\n+\n+\t  result = allocate_value (expect_type);\n+\t  memcpy (value_contents_raw (result), obstack_base (&output),\n+\t\t  obstack_object_size (&output));\n+\t}\n+      else\n+\tresult = value_cstring ((const char *) obstack_base (&output),\n+\t\t\t\tobstack_object_size (&output),\n+\t\t\t\ttype);\n+    }\n+  return result;\n+}\n+\n+} /* namespace expr */\n+\n \f\n /* See c-lang.h.  */\n "
    }
  ]
}