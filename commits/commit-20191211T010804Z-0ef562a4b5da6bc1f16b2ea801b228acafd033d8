{
  "sha": "0ef562a4b5da6bc1f16b2ea801b228acafd033d8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGVmNTYyYTRiNWRhNmJjMWYxNmIyZWE4MDFiMjI4YWNhZmQwMzNkOA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-10T12:32:37Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-11T01:08:04Z"
    },
    "message": "ubsan: cr16: left shift cannot be represented in type 'int'\n\nThis was:\n  unsigned long mask = SBM (instruction->match_bits);\nwith\n  #define SBM(offs)  ((((1 << (32 - offs)) -1) << (offs)))\n\nWell, there are a couple of problems.  Firstly, the expression uses\nint values (1 rather than 1u or 1ul) resulting in the ubsan error, and\nsecondly, a zero offs will result in a 32-bit shift which is undefined\nif ints are only 32 bits.\n\n\t* cr16-dis.c (EXTRACT, SBM): Rewrite.\n\t(cr16_match_opcode): Delete duplicate bcond test.",
    "tree": {
      "sha": "4d87c16e9066d5947b56c349141008c063a76b6f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4d87c16e9066d5947b56c349141008c063a76b6f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0ef562a4b5da6bc1f16b2ea801b228acafd033d8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0ef562a4b5da6bc1f16b2ea801b228acafd033d8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0ef562a4b5da6bc1f16b2ea801b228acafd033d8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0ef562a4b5da6bc1f16b2ea801b228acafd033d8/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2fd2b153a3819d3ab6b9c4cf06943d498187714c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2fd2b153a3819d3ab6b9c4cf06943d498187714c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2fd2b153a3819d3ab6b9c4cf06943d498187714c"
    }
  ],
  "stats": {
    "total": 16,
    "additions": 9,
    "deletions": 7
  },
  "files": [
    {
      "sha": "57212f843baa4a034b3c11e810e1d6f1e42351bc",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ef562a4b5da6bc1f16b2ea801b228acafd033d8/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ef562a4b5da6bc1f16b2ea801b228acafd033d8/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=0ef562a4b5da6bc1f16b2ea801b228acafd033d8",
      "patch": "@@ -1,3 +1,8 @@\n+2019-12-11  Alan Modra  <amodra@gmail.com>\n+\n+\t* cr16-dis.c (EXTRACT, SBM): Rewrite.\n+\t(cr16_match_opcode): Delete duplicate bcond test.\n+\n 2019-12-11  Alan Modra  <amodra@gmail.com>\n \n \t* bfin-dis.c (HOST_LONG_WORD_SIZE, XFIELD): Delete."
    },
    {
      "sha": "68fbe42a6514240f7268a0061c19fc51cfcef54f",
      "filename": "opcodes/cr16-dis.c",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ef562a4b5da6bc1f16b2ea801b228acafd033d8/opcodes/cr16-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ef562a4b5da6bc1f16b2ea801b228acafd033d8/opcodes/cr16-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/cr16-dis.c?ref=0ef562a4b5da6bc1f16b2ea801b228acafd033d8",
      "patch": "@@ -30,11 +30,11 @@\n \n /* Extract 'n_bits' from 'a' starting from offset 'offs'.  */\n #define EXTRACT(a, offs, n_bits)                    \\\n-  (n_bits == 32 ? (((a) >> (offs)) & 0xffffffffL)   \\\n-  : (((a) >> (offs)) & ((1 << (n_bits)) -1)))\n+  (((a) >> (offs)) & ((1ul << ((n_bits) - 1) << 1) - 1))\n \n-/* Set Bit Mask - a mask to set all bits starting from offset 'offs'.  */\n-#define SBM(offs)  ((((1 << (32 - offs)) -1) << (offs)))\n+/* Set Bit Mask - a mask to set all bits in a 32-bit word starting\n+   from offset 'offs'.  */\n+#define SBM(offs)  ((1ul << 31 << 1) - (1ul << (offs)))\n \n typedef struct\n {\n@@ -329,9 +329,6 @@ cr16_match_opcode (void)\n   while (instruction >= cr16_instruction)\n     {\n       mask = build_mask ();\n-      /* Adjust mask for bcond with 32-bit size instruction */\n-      if ((IS_INSN_MNEMONIC(\"b\") && instruction->size == 2))\n-        mask = 0xff0f0000;\n \n       if ((doubleWord & mask) == BIN (instruction->match,\n                                       instruction->match_bits))"
    }
  ]
}