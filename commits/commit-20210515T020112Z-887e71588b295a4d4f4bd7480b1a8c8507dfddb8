{
  "sha": "887e71588b295a4d4f4bd7480b1a8c8507dfddb8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODg3ZTcxNTg4YjI5NWE0ZDRmNGJkNzQ4MGIxYThjODUwN2RmZGRiOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-05-15T01:54:35Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-05-15T02:01:12Z"
    },
    "message": "Fix Python pretty-printing bug in Rust\n\nAn upstream Rust bug notes notes that the Python pretty-printing\nfeature is broken for values that appear as members of certain types\nin Rust.\n\nThe bug here is that some of the Rust value-printing code calls\nvalue_print_inner, a method on rust_language.  This bypasses the\ncommon code that calls into Python.\n\nI'm checking this in.\n\ngdb/ChangeLog\n2021-05-14  Tom Tromey  <tom@tromey.com>\n\n\t* rust-lang.c (rust_language::val_print_struct)\n\t(rust_language::print_enum): Use common_val_print, not\n\tvalue_print_inner.\n\ngdb/testsuite/ChangeLog\n2021-05-14  Tom Tromey  <tom@tromey.com>\n\n\t* gdb.rust/pp.exp: New file.\n\t* gdb.rust/pp.py: New file.\n\t* gdb.rust/pp.rs: New file.",
    "tree": {
      "sha": "7a40b0b55efa561569dd468ca7a45453e1faadc8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7a40b0b55efa561569dd468ca7a45453e1faadc8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/887e71588b295a4d4f4bd7480b1a8c8507dfddb8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/887e71588b295a4d4f4bd7480b1a8c8507dfddb8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/887e71588b295a4d4f4bd7480b1a8c8507dfddb8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/887e71588b295a4d4f4bd7480b1a8c8507dfddb8/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2fbe9507bfba58a6a000d231fe735bad1f245b55",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2fbe9507bfba58a6a000d231fe735bad1f245b55",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2fbe9507bfba58a6a000d231fe735bad1f245b55"
    }
  ],
  "stats": {
    "total": 135,
    "additions": 133,
    "deletions": 2
  },
  "files": [
    {
      "sha": "8e1e00250b89477f81ea41652ec2bc92ae014218",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/887e71588b295a4d4f4bd7480b1a8c8507dfddb8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/887e71588b295a4d4f4bd7480b1a8c8507dfddb8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=887e71588b295a4d4f4bd7480b1a8c8507dfddb8",
      "patch": "@@ -1,3 +1,9 @@\n+2021-05-14  Tom Tromey  <tom@tromey.com>\n+\n+\t* rust-lang.c (rust_language::val_print_struct)\n+\t(rust_language::print_enum): Use common_val_print, not\n+\tvalue_print_inner.\n+\n 2021-05-14  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* python/py-inferior.c (infpy_get_connection_num): New function."
    },
    {
      "sha": "3b15bb22a27c0e7c7b2b4a755bcee57f7c740111",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/887e71588b295a4d4f4bd7480b1a8c8507dfddb8/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/887e71588b295a4d4f4bd7480b1a8c8507dfddb8/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=887e71588b295a4d4f4bd7480b1a8c8507dfddb8",
      "patch": "@@ -386,7 +386,8 @@ rust_language::val_print_struct\n \t  fputs_filtered (\": \", stream);\n \t}\n \n-      value_print_inner (value_field (val, i), stream, recurse + 1, &opts);\n+      common_val_print (value_field (val, i), stream, recurse + 1, &opts,\n+\t\t\tthis);\n     }\n \n   if (options->prettyformat)\n@@ -464,7 +465,8 @@ rust_language::print_enum (struct value *val, struct ui_file *stream,\n \t\t\t  styled_string (variable_name_style.style (),\n \t\t\t\t\t TYPE_FIELD_NAME (variant_type, j)));\n \n-      value_print_inner (value_field (val, j), stream, recurse + 1, &opts);\n+      common_val_print (value_field (val, j), stream, recurse + 1, &opts,\n+\t\t\tthis);\n     }\n \n   if (is_tuple)"
    },
    {
      "sha": "c7e7152eee08f46982cd3302e5bd4b8da9b10b47",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/887e71588b295a4d4f4bd7480b1a8c8507dfddb8/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/887e71588b295a4d4f4bd7480b1a8c8507dfddb8/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=887e71588b295a4d4f4bd7480b1a8c8507dfddb8",
      "patch": "@@ -1,3 +1,9 @@\n+2021-05-14  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdb.rust/pp.exp: New file.\n+\t* gdb.rust/pp.py: New file.\n+\t* gdb.rust/pp.rs: New file.\n+\n 2021-05-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* gdb.base/index-cache.exp: Cleanup $cache_dir/*.gdb-index and"
    },
    {
      "sha": "abe2168af69bbe1c50d29c74b4c62d12086e8e45",
      "filename": "gdb/testsuite/gdb.rust/pp.exp",
      "status": "added",
      "additions": 42,
      "deletions": 0,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/887e71588b295a4d4f4bd7480b1a8c8507dfddb8/gdb/testsuite/gdb.rust/pp.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/887e71588b295a4d4f4bd7480b1a8c8507dfddb8/gdb/testsuite/gdb.rust/pp.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.rust/pp.exp?ref=887e71588b295a4d4f4bd7480b1a8c8507dfddb8",
      "patch": "@@ -0,0 +1,42 @@\n+# Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test expression parsing and evaluation that requires Rust compiler.\n+\n+load_lib gdb-python.exp\n+load_lib rust-support.exp\n+if {[skip_rust_tests]} {\n+    continue\n+}\n+\n+standard_testfile .rs\n+if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile {debug rust}]} {\n+    return -1\n+}\n+\n+if { [skip_python_tests] } { continue }\n+\n+set remote_python_file [gdb_remote_download host \\\n+\t\t\t    ${srcdir}/${subdir}/${testfile}.py]\n+gdb_test_no_output \"source ${remote_python_file}\" \"load python file\"\n+\n+set line [gdb_get_line_number \"set breakpoint here\"]\n+if {![runto ${srcfile}:$line]} {\n+    untested \"could not run to breakpoint\"\n+    return -1\n+}\n+\n+gdb_test \"print outer\" \" = pp::Outer \\\\(x\\\\(5\\\\)\\\\)\"\n+gdb_test \"print outer.0\" \" = x\\\\(5\\\\)\""
    },
    {
      "sha": "57c8cc3fbf3fccd92a0ee54ca9148a06d2dd7989",
      "filename": "gdb/testsuite/gdb.rust/pp.py",
      "status": "added",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/887e71588b295a4d4f4bd7480b1a8c8507dfddb8/gdb/testsuite/gdb.rust/pp.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/887e71588b295a4d4f4bd7480b1a8c8507dfddb8/gdb/testsuite/gdb.rust/pp.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.rust/pp.py?ref=887e71588b295a4d4f4bd7480b1a8c8507dfddb8",
      "patch": "@@ -0,0 +1,49 @@\n+# Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This file is part of the GDB testsuite.  It tests python pretty\n+# printers.\n+\n+import re\n+import gdb\n+\n+\n+# Printer for Inner.\n+class inner_print(object):\n+    def __init__(self, val):\n+        self.val = val\n+\n+    def to_string(self):\n+        return \"x(\" + str(self.val[\"x\"]) + \")\"\n+\n+\n+def lookup_function(val):\n+    \"Look-up and return a pretty-printer that can print val.\"\n+\n+    # Get the type.\n+    type = val.type\n+\n+    # Get the type name.\n+    typename = type.tag\n+\n+    if typename == None:\n+        return None\n+\n+    if typename == \"pp::Inner\":\n+        return inner_print(val)\n+    return None\n+\n+\n+gdb.pretty_printers.append(lookup_function)"
    },
    {
      "sha": "23e85afeba8d7ffabf6a6ffa30886752c1b32d1e",
      "filename": "gdb/testsuite/gdb.rust/pp.rs",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/887e71588b295a4d4f4bd7480b1a8c8507dfddb8/gdb/testsuite/gdb.rust/pp.rs",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/887e71588b295a4d4f4bd7480b1a8c8507dfddb8/gdb/testsuite/gdb.rust/pp.rs",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.rust/pp.rs?ref=887e71588b295a4d4f4bd7480b1a8c8507dfddb8",
      "patch": "@@ -0,0 +1,26 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+// This program is free software; you can redistribute it and/or modify\n+// it under the terms of the GNU General Public License as published by\n+// the Free Software Foundation; either version 3 of the License, or\n+// (at your option) any later version.\n+//\n+// This program is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License\n+// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+#![allow(unused_assignments)]\n+\n+struct Inner{ x : u8 }\n+struct Outer(Inner);\n+\n+fn main () {\n+    let outer = Outer(Inner{x: 5});\n+    println!(\"{}\", outer.0.x);        // set breakpoint here\n+}"
    }
  ]
}