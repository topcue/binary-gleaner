{
  "sha": "161719466ac9ea5f186514312f6bce842181804f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTYxNzE5NDY2YWM5ZWE1ZjE4NjUxNDMxMmY2YmNlODQyMTgxODA0Zg==",
  "commit": {
    "author": {
      "name": "Fangrui Song",
      "email": "maskray@google.com",
      "date": "2020-04-22T15:20:02Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-04-22T15:20:02Z"
    },
    "message": "For relative paths in INPUT() and GROUP(), search the directory of the current linker script before searching other paths.\n\n\tPR ld/25806\n\t* ldlang.h (struct lang_input_statement_struct): Add extra_search_path.\n\t* ldlang.c (current_input_file): New.\n\t(ldirname): New.\n\t(new_afile): Add from_filename parameter. Set extra_search_path.\n\t(lang_add_input_file): Pass current_input_file to new_afile.\n\t(load_symbols): Set current_input_file.",
    "tree": {
      "sha": "8f5243eadc4f7266ca8362b1da384e9a9aa057c6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8f5243eadc4f7266ca8362b1da384e9a9aa057c6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/161719466ac9ea5f186514312f6bce842181804f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/161719466ac9ea5f186514312f6bce842181804f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/161719466ac9ea5f186514312f6bce842181804f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/161719466ac9ea5f186514312f6bce842181804f/comments",
  "author": {
    "login": "MaskRay",
    "id": 416322,
    "node_id": "MDQ6VXNlcjQxNjMyMg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/416322?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/MaskRay",
    "html_url": "https://github.com/MaskRay",
    "followers_url": "https://api.github.com/users/MaskRay/followers",
    "following_url": "https://api.github.com/users/MaskRay/following{/other_user}",
    "gists_url": "https://api.github.com/users/MaskRay/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/MaskRay/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/MaskRay/subscriptions",
    "organizations_url": "https://api.github.com/users/MaskRay/orgs",
    "repos_url": "https://api.github.com/users/MaskRay/repos",
    "events_url": "https://api.github.com/users/MaskRay/events{/privacy}",
    "received_events_url": "https://api.github.com/users/MaskRay/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "31c89d6038f2658f5e06a762aa9e20e78e74651f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/31c89d6038f2658f5e06a762aa9e20e78e74651f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/31c89d6038f2658f5e06a762aa9e20e78e74651f"
    }
  ],
  "stats": {
    "total": 89,
    "additions": 77,
    "deletions": 12
  },
  "files": [
    {
      "sha": "341ad1d90dcd6712bda4444b3eeafac683792908",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/161719466ac9ea5f186514312f6bce842181804f/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/161719466ac9ea5f186514312f6bce842181804f/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=161719466ac9ea5f186514312f6bce842181804f",
      "patch": "@@ -1,3 +1,17 @@\n+2020-04-22  Fangrui Song <maskray@google.com>\n+\n+\tPR ld/25806\n+\t* ldlang.h (struct lang_input_statement_struct): Add extra_search_path.\n+\t* ldlang.c (current_input_file): New.\n+\t(ldirname): New.\n+\t(new_afile): Add from_filename parameter.  Set extra_search_path.\n+\t(lang_add_input_file): Pass current_input_file to new_afile.\n+\t(load_symbols): Set current_input_file.\n+\t* ldfile.c (ldfile_open_file): If extra_search_path has been set\n+\tthen scan it for the file that needs to be opened.\n+\t* ld.texi: Document the new behaviour.\n+\t* NEWS: Mention the new feature.\n+\n 2020-04-22  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/ld-scripts/default-script1.d: Correct mingw skip."
    },
    {
      "sha": "9f5bbe51cf61e6c2ffc60c2eae82828e461c67e2",
      "filename": "ld/NEWS",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/161719466ac9ea5f186514312f6bce842181804f/ld/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/161719466ac9ea5f186514312f6bce842181804f/ld/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/NEWS?ref=161719466ac9ea5f186514312f6bce842181804f",
      "patch": "@@ -7,6 +7,10 @@\n   IMAGIC (0411) for separate instruction and data spaces, and change the\n   default format option for pdp11-aout to be --omagic.\n \n+* Relative pathnames in INPUT() and GROUP() directives in linker scripts are\n+  searched relative to the directory of the linker script before other search\n+  paths.\n+\n Changes in 2.34:\n \n * The ld check for \"PHDR segment not covered by LOAD segment\" is more"
    },
    {
      "sha": "4dc78e65fa251aa5487e3811fff97214b63136c4",
      "filename": "ld/ld.texi",
      "status": "modified",
      "additions": 10,
      "deletions": 7,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/161719466ac9ea5f186514312f6bce842181804f/ld/ld.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/161719466ac9ea5f186514312f6bce842181804f/ld/ld.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ld.texi?ref=161719466ac9ea5f186514312f6bce842181804f",
      "patch": "@@ -3657,13 +3657,16 @@ script, and then invoke the linker with nothing but a @samp{-T} option.\n In case a @dfn{sysroot prefix} is configured, and the filename starts\n with the @samp{/} character, and the script being processed was\n located inside the @dfn{sysroot prefix}, the filename will be looked\n-for in the @dfn{sysroot prefix}.  Otherwise, the linker will try to\n-open the file in the current directory.  If it is not found, the\n-linker will search through the archive library search path.\n-The @dfn{sysroot prefix} can also be forced by specifying @code{=}\n-as the first character in the filename path, or prefixing the filename\n-path with @code{$SYSROOT}.  See also the description of @samp{-L} in\n-@ref{Options,,Command-line Options}.\n+for in the @dfn{sysroot prefix}.  The @dfn{sysroot prefix} can also be forced by specifying\n+@code{=} as the first character in the filename path, or prefixing the\n+filename path with @code{$SYSROOT}. See also the description of\n+@samp{-L} in @ref{Options,,Command-line Options}.\n+\n+If a @dfn{sysroot prefix} is not used then the linker will try to open\n+the file in the directory containing the linker script.  If it is not\n+found the linker will then search the current directory.  If it is still\n+not found the linker will search through the archive library search\n+path.\n \n If you use @samp{INPUT (-l@var{file})}, @command{ld} will transform the\n name to @code{lib@var{file}.a}, as with the command-line argument"
    },
    {
      "sha": "53112c86947fdf222e9517f5b3db4a36a56ff5ad",
      "filename": "ld/ldfile.c",
      "status": "modified",
      "additions": 18,
      "deletions": 1,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/161719466ac9ea5f186514312f6bce842181804f/ld/ldfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/161719466ac9ea5f186514312f6bce842181804f/ld/ldfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldfile.c?ref=161719466ac9ea5f186514312f6bce842181804f",
      "patch": "@@ -416,7 +416,24 @@ ldfile_open_file (lang_input_statement_type *entry)\n       search_arch_type *arch;\n       bfd_boolean found = FALSE;\n \n-      /* Try to open <filename><suffix> or lib<filename><suffix>.a */\n+      /* If extra_search_path is set, entry->filename is a relative path.\n+         Search the directory of the current linker script before searching\n+         other paths. */\n+      if (entry->extra_search_path)\n+        {\n+          char *path = concat (entry->extra_search_path, slash, entry->filename,\n+                               (const char *)0);\n+          if (ldfile_try_open_bfd (path, entry))\n+            {\n+              entry->filename = path;\n+              entry->flags.search_dirs = FALSE;\n+              return;\n+            }\n+\n+\t  free (path);\n+        }\n+\n+      /* Try to open <filename><suffix> or lib<filename><suffix>.a.  */\n       for (arch = search_arch_head; arch != NULL; arch = arch->next)\n \t{\n \t  found = ldfile_open_file_search (arch->name, entry, \"lib\", \".a\");"
    },
    {
      "sha": "2ef234f90b2324acb176b24878528beeeaa63a52",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 28,
      "deletions": 4,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/161719466ac9ea5f186514312f6bce842181804f/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/161719466ac9ea5f186514312f6bce842181804f/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=161719466ac9ea5f186514312f6bce842181804f",
      "patch": "@@ -117,6 +117,7 @@ lang_statement_list_type file_chain = { NULL, NULL };\n    lang_input_statement_type statement (reached via input_statement field in a\n    lang_statement_union).  */\n lang_statement_list_type input_file_chain;\n+static const char *current_input_file;\n struct bfd_sym_chain entry_symbol = { NULL, NULL };\n const char *entry_section = \".text\";\n struct lang_input_statement_flags input_flags;\n@@ -176,6 +177,21 @@ name_match (const char *pattern, const char *name)\n   return strcmp (pattern, name);\n }\n \n+static char *\n+ldirname (const char *name)\n+{\n+  const char *base = lbasename (name);\n+  char *dirname;\n+\n+  while (base > name && IS_DIR_SEPARATOR (base[-1]))\n+    --base;\n+  if (base == name)\n+    return strdup (\".\");\n+  dirname = strdup (name);\n+  dirname[base - name] = '\\0';\n+  return dirname;\n+}\n+\n /* If PATTERN is of the form archive:file, return a pointer to the\n    separator.  If not, return NULL.  */\n \n@@ -1093,7 +1109,8 @@ new_statement (enum statement_enum type,\n static lang_input_statement_type *\n new_afile (const char *name,\n \t   lang_input_file_enum_type file_type,\n-\t   const char *target)\n+\t   const char *target,\n+\t   const char *from_filename)\n {\n   lang_input_statement_type *p;\n \n@@ -1102,6 +1119,7 @@ new_afile (const char *name,\n   p = new_stat (lang_input_statement, stat_ptr);\n   memset (&p->the_bfd, 0,\n \t  sizeof (*p) - offsetof (lang_input_statement_type, the_bfd));\n+  p->extra_search_path = NULL;\n   p->target = target;\n   p->flags.dynamic = input_flags.dynamic;\n   p->flags.add_DT_NEEDED_for_dynamic = input_flags.add_DT_NEEDED_for_dynamic;\n@@ -1142,6 +1160,10 @@ new_afile (const char *name,\n     case lang_input_file_is_search_file_enum:\n       p->filename = name;\n       p->local_sym_name = name;\n+      /* If name is a relative path, search the directory of the current linker\n+         script first. */\n+      if (from_filename && !IS_ABSOLUTE_PATH (name))\n+        p->extra_search_path = ldirname (from_filename);\n       p->flags.real = TRUE;\n       p->flags.search_dirs = TRUE;\n       break;\n@@ -1181,12 +1203,12 @@ lang_add_input_file (const char *name,\n \t within the sysroot subdirectory.)  */\n       unsigned int outer_sysrooted = input_flags.sysrooted;\n       input_flags.sysrooted = 0;\n-      ret = new_afile (sysrooted_name, file_type, target);\n+      ret = new_afile (sysrooted_name, file_type, target, NULL);\n       input_flags.sysrooted = outer_sysrooted;\n       return ret;\n     }\n \n-  return new_afile (name, file_type, target);\n+  return new_afile (name, file_type, target, current_input_file);\n }\n \n struct out_section_hash_entry\n@@ -2909,7 +2931,7 @@ lookup_name (const char *name)\n       lang_statement_union_type *rest = *after;\n       stat_ptr->tail = after;\n       search = new_afile (name, lang_input_file_is_search_file_enum,\n-\t\t\t  default_target);\n+\t\t\t  default_target, NULL);\n       *stat_ptr->tail = rest;\n       if (*tail == NULL)\n \tstat_ptr->tail = tail;\n@@ -3051,7 +3073,9 @@ load_symbols (lang_input_statement_type *entry,\n \n       ldfile_assumed_script = TRUE;\n       parser_input = input_script;\n+      current_input_file = entry->filename;\n       yyparse ();\n+      current_input_file = NULL;\n       ldfile_assumed_script = FALSE;\n \n       /* missing_file is sticky.  sysrooted will already have been"
    },
    {
      "sha": "2aa3930f95a31ba1a868d5aab27739fe70938e08",
      "filename": "ld/ldlang.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/161719466ac9ea5f186514312f6bce842181804f/ld/ldlang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/161719466ac9ea5f186514312f6bce842181804f/ld/ldlang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.h?ref=161719466ac9ea5f186514312f6bce842181804f",
      "patch": "@@ -293,6 +293,9 @@ typedef struct lang_input_statement_struct\n      Usually the same as filename, but for a file spec'd with\n      -l this is the -l switch itself rather than the filename.  */\n   const char *local_sym_name;\n+  /* Extra search path. Used to find a file relative to the\n+     directory of the current linker script.  */\n+  const char *extra_search_path;\n \n   bfd *the_bfd;\n "
    }
  ]
}