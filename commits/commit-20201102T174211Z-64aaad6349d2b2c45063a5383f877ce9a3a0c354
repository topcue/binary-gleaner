{
  "sha": "64aaad6349d2b2c45063a5383f877ce9a3a0c354",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjRhYWFkNjM0OWQyYjJjNDUwNjNhNTM4M2Y4NzdjZTlhM2EwYzM1NA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-09-25T13:50:56Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-11-02T17:42:11Z"
    },
    "message": "gdb: use get_standard_config_dir when looking for .gdbinit\n\nThis commit effectively changes the default location of the .gdbinit\nfile, while maintaining backward compatibility.\n\nFor non Apple hosts the .gdbinit file will now be looked for in the\nfollowing locations:\n\n  $XDG_CONFIG_HOME/gdb/gdbinit\n  $HOME/.config/gdb/gdbinit\n  $HOME/.gdbinit\n\nOn Apple hosts the search order is instead:\n\n  $HOME/Library/Preferences/gdb/gdbinit\n  $HOME/.gdbinit\n\nI've performed an extensive rewrite of the documentation, moving all\ninformation about initialization files and where to find them into a\nnew @node, text from other areas has been moved into this one\nlocation, and other areas cross-reference to this new @node as much as\npossible.\n\ngdb/ChangeLog:\n\n\t* NEWS: Mention changes to config file search path.\n\t* main.c\n\ngdb/doc/ChangeLog:\n\n\t* gdb.texinfo (Mode Options): Descriptions of initialization files\n\thas been moved to 'Initialization Files'.\n\t(Startup): Likewise.\n\t(Initialization Files): New node.\n\t(gdb man): Update to mention alternative file paths.\n\t(gdbinit man): Likewise.",
    "tree": {
      "sha": "80261e6099c2421820a8e8a8f025a13cd9995c27",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/80261e6099c2421820a8e8a8f025a13cd9995c27"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/64aaad6349d2b2c45063a5383f877ce9a3a0c354",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64aaad6349d2b2c45063a5383f877ce9a3a0c354",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/64aaad6349d2b2c45063a5383f877ce9a3a0c354",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64aaad6349d2b2c45063a5383f877ce9a3a0c354/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8768c3e3629657d9728487c680b173868baeee7f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8768c3e3629657d9728487c680b173868baeee7f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8768c3e3629657d9728487c680b173868baeee7f"
    }
  ],
  "stats": {
    "total": 339,
    "additions": 246,
    "deletions": 93
  },
  "files": [
    {
      "sha": "18b7fb0a53a34edde270c3bd9caedcfcec8cee8e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64aaad6349d2b2c45063a5383f877ce9a3a0c354/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64aaad6349d2b2c45063a5383f877ce9a3a0c354/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=64aaad6349d2b2c45063a5383f877ce9a3a0c354",
      "patch": "@@ -1,3 +1,8 @@\n+2020-11-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* NEWS: Mention changes to config file search path.\n+\t* main.c\n+\n 2020-11-02  Tom Tromey  <tromey@adacore.com>\n \n \t* python/python.c: Consolidate two HAVE_PYTHON blocks."
    },
    {
      "sha": "3e08aee7c6fe012ac3bebd7a3bb6fbe0d9649a78",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64aaad6349d2b2c45063a5383f877ce9a3a0c354/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64aaad6349d2b2c45063a5383f877ce9a3a0c354/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=64aaad6349d2b2c45063a5383f877ce9a3a0c354",
      "patch": "@@ -15,6 +15,12 @@\n \n * GDB now supports core file debugging for x86_64 Cygwin programs.\n \n+* GDB will now look for the .gdbinit file in a config directory before\n+  looking for ~/.gdbinit.  The file is searched for in the following\n+  locations: $XDG_CONFIG_HOME/gdb/gdbinit, $HOME/.config/gdb/gdbinit,\n+  $HOME/.gdbinit.  On Apple hosts the search order is instead:\n+  $HOME/Library/Preferences/gdb/gdbinit, $HOME/.gdbinit.\n+\n * New commands\n \n set debug event-loop"
    },
    {
      "sha": "79011dbeb24505b9e74275ee6abaf759b5ca3241",
      "filename": "gdb/auto-load.c",
      "status": "modified",
      "additions": 21,
      "deletions": 6,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64aaad6349d2b2c45063a5383f877ce9a3a0c354/gdb/auto-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64aaad6349d2b2c45063a5383f877ce9a3a0c354/gdb/auto-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/auto-load.c?ref=64aaad6349d2b2c45063a5383f877ce9a3a0c354",
      "patch": "@@ -498,11 +498,26 @@ file_is_auto_load_safe (const char *filename, const char *debug_fmt, ...)\n \n   if (!advice_printed)\n     {\n-      const char *homedir = getenv (\"HOME\");\n-\n-      if (homedir == NULL)\n-\thomedir = \"$HOME\";\n-      std::string homeinit = string_printf (\"%s/%s\", homedir, GDBINIT);\n+      /* Find the existing home directory config file.  */\n+      struct stat buf;\n+      std::string home_config = find_gdb_home_config_file (GDBINIT, &buf);\n+      if (home_config.empty ())\n+\t{\n+\t  /* The user doesn't have an existing home directory config file,\n+\t     so we should suggest a suitable path for them to use.  */\n+\t  std::string config_dir_file\n+\t    = get_standard_config_filename (GDBINIT);\n+\t  if (!config_dir_file.empty ())\n+\t    home_config = config_dir_file;\n+\t  else\n+\t    {\n+\t      const char *homedir = getenv (\"HOME\");\n+\t      if (homedir == nullptr)\n+\t\thomedir = \"$HOME\";\n+\t      home_config = (std::string (homedir) + SLASH_STRING\n+\t\t\t     + std::string (GDBINIT));\n+\t    }\n+\t}\n \n       printf_filtered (_(\"\\\n To enable execution of this file add\\n\\\n@@ -515,7 +530,7 @@ For more information about this security protection see the\\n\\\n \\\"Auto-loading safe path\\\" section in the GDB manual.  E.g., run from the shell:\\n\\\n \\tinfo \\\"(gdb)Auto-loading safe path\\\"\\n\"),\n \t\t       filename_real.get (),\n-\t\t       homeinit.c_str (), homeinit.c_str ());\n+\t\t       home_config.c_str (), home_config.c_str ());\n       advice_printed = 1;\n     }\n "
    },
    {
      "sha": "a57a36a4844050f8b733ab1a689185e64ab01e05",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64aaad6349d2b2c45063a5383f877ce9a3a0c354/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64aaad6349d2b2c45063a5383f877ce9a3a0c354/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=64aaad6349d2b2c45063a5383f877ce9a3a0c354",
      "patch": "@@ -1,3 +1,12 @@\n+2020-11-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.texinfo (Mode Options): Descriptions of initialization files\n+\thas been moved to 'Initialization Files'.\n+\t(Startup): Likewise.\n+\t(Initialization Files): New node.\n+\t(gdb man): Update to mention alternative file paths.\n+\t(gdbinit man): Likewise.\n+\n 2020-10-27  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* gdb.texinfo (Set Breaks): Document the '-force-condition' flag"
    },
    {
      "sha": "52701560006a330e9ea2c7fef5aad717e10a0682",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 131,
      "deletions": 76,
      "changes": 207,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64aaad6349d2b2c45063a5383f877ce9a3a0c354/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64aaad6349d2b2c45063a5383f877ce9a3a0c354/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=64aaad6349d2b2c45063a5383f877ce9a3a0c354",
      "patch": "@@ -937,6 +937,7 @@ in sequential order.  The order makes a difference when the\n * File Options::                Choosing files\n * Mode Options::                Choosing modes\n * Startup::                     What @value{GDBN} does during startup\n+* Initialization Files::        Initialization Files\n @end menu\n \n @node File Options\n@@ -1077,47 +1078,16 @@ batch mode or quiet mode.\n @itemx -n\n @cindex @code{--nx}\n @cindex @code{-n}\n-Do not execute commands found in any initialization file.\n-There are three init files, loaded in the following order:\n-\n-@table @code\n-@item @file{system.gdbinit}\n-This is the system-wide init file.\n-Its location is specified with the @code{--with-system-gdbinit}\n-configure option (@pxref{System-wide configuration}).\n-It is loaded first when @value{GDBN} starts, before command line options\n-have been processed.\n-@item @file{system.gdbinit.d}\n-This is the system-wide init directory.\n-Its location is specified with the @code{--with-system-gdbinit-dir}\n-configure option (@pxref{System-wide configuration}).\n-Files in this directory are loaded in alphabetical order immediately after\n-system.gdbinit (if enabled) when @value{GDBN} starts, before command line\n-options have been processed.  Files need to have a recognized scripting\n-language extension (@file{.py}/@file{.scm}) or be named with a @file{.gdb}\n-extension to be interpreted as regular @value{GDBN} commands.  @value{GDBN}\n-will not recurse into any subdirectories of this directory.\n-@item @file{~/.gdbinit}\n-This is the init file in your home directory.\n-It is loaded next, after @file{system.gdbinit}, and before\n-command options have been processed.\n-@item @file{./.gdbinit}\n-This is the init file in the current directory.\n-It is loaded last, after command line options other than @code{-x} and\n-@code{-ex} have been processed.  Command line options @code{-x} and\n-@code{-ex} are processed last, after @file{./.gdbinit} has been loaded.\n-@end table\n-\n-For further documentation on startup processing, @xref{Startup}.\n-For documentation on how to write command files,\n-@xref{Command Files,,Command Files}.\n+Do not execute commands found in any initialization files\n+(@pxref{Initialization Files}).\n \n @anchor{-nh}\n @item -nh\n @cindex @code{--nh}\n-Do not execute commands found in @file{~/.gdbinit}, the init file\n-in your home directory.\n-@xref{Startup}.\n+Do not execute commands found in any home directory initialization\n+file (@pxref{Initialization Files,,Home directory initialization\n+file}).  The system wide and current directory initialization files\n+are still loaded.\n \n @item -quiet\n @itemx -silent\n@@ -1327,20 +1297,13 @@ Sets up the command interpreter as specified by the command line\n \n @item\n @cindex init file\n-Reads the system-wide @dfn{init file} (if @option{--with-system-gdbinit} was\n-used when building @value{GDBN}; @pxref{System-wide configuration,\n- ,System-wide configuration and settings}) and the files in the system-wide\n-gdbinit directory (if @option{--with-system-gdbinit-dir} was used) and executes\n-all the commands in those files.  The files need to be named with a @file{.gdb}\n-extension to be interpreted as @value{GDBN} commands, or they can be written\n-in a supported scripting language with an appropriate file extension.\n+Reads the system wide initialization file and the files from the\n+system wide initialization directory, @pxref{System Wide Init Files}.\n \n-@anchor{Home Directory Init File}\n @item\n-Reads the init file (if any) in your home directory@footnote{On\n-DOS/Windows systems, the home directory is the one pointed to by the\n-@code{HOME} environment variable.} and executes all the commands in\n-that file.\n+Reads the initialization file (if any) in your home directory and\n+executes all the commands in that file, @pxref{Home Directory Init\n+File}.\n \n @anchor{Option -init-eval-command}\n @item\n@@ -1353,16 +1316,16 @@ gets loaded.\n @item\n Processes command line options and operands.\n \n-@anchor{Init File in the Current Directory during Startup}\n @item\n-Reads and executes the commands from init file (if any) in the current\n-working directory as long as @samp{set auto-load local-gdbinit} is set to\n-@samp{on} (@pxref{Init File in the Current Directory}).\n-This is only done if the current directory is\n-different from your home directory.  Thus, you can have more than one\n-init file, one generic in your home directory, and another, specific\n-to the program you are debugging, in the directory where you invoke\n-@value{GDBN}.\n+Reads and executes the commands from the initialization file (if any)\n+in the current working directory as long as @samp{set auto-load\n+local-gdbinit} is set to @samp{on} (@pxref{Init File in the Current\n+Directory}).  This is only done if the current directory is different\n+from your home directory.  Thus, you can have more than one init file,\n+one generic in your home directory, and another, specific to the\n+program you are debugging, in the directory where you invoke\n+@value{GDBN}. @xref{Init File in the Current Directory during\n+Startup}.\n \n @item\n If the command line specified a program to debug, or a process to\n@@ -1391,26 +1354,115 @@ Reads the command history recorded in the @dfn{history file}.\n files where @value{GDBN} records it.\n @end enumerate\n \n-Init files use the same syntax as @dfn{command files} (@pxref{Command\n-Files}) and are processed by @value{GDBN} in the same way.  The init\n-file in your home directory can set options (such as @samp{set\n-complaints}) that affect subsequent processing of command line options\n-and operands.  Init files are not executed if you use the @samp{-nx}\n-option (@pxref{Mode Options, ,Choosing Modes}).\n+@node Initialization Files\n+@subsection Initialization Files\n+@cindex init file name\n \n-To display the list of init files loaded by gdb at startup, you\n-can use @kbd{gdb --help}.\n+During startup (@pxref{Startup}) @value{GDBN} will execute commands\n+from several initialization files.  These initialization files use the\n+same syntax as @dfn{command files} (@pxref{Command Files}) and are\n+processed by @value{GDBN} in the same way.\n \n-@cindex init file name\n+To display the list of initialization files loaded by @value{GDBN} at\n+startup, in the order they will be loaded, you can use @kbd{gdb\n+--help}.\n+\n+As the system wide and home directory initialization files are\n+processed before most command line options, changes to settings\n+(e.g. @samp{set complaints}) can affect subsequent processing of\n+command line options and operands.\n+\n+The following sections describe where @value{GDBN} looks for the\n+initialization and the order that the files are searched for.\n+\n+@anchor{System Wide Init Files}\n+@subsubsection System wide initialization files\n+\n+There are two locations that are searched for system wide\n+initialization files.  Both of these locations are always checked:\n+\n+@table @code\n+\n+@item @file{system.gdbinit}\n+This is a single system-wide initialization file.  Its location is\n+specified with the @code{--with-system-gdbinit} configure option\n+(@pxref{System-wide configuration}).  It is loaded first when\n+@value{GDBN} starts, before command line options have been processed.\n+\n+@item @file{system.gdbinit.d}\n+This is the system-wide initialization directory.  Its location is\n+specified with the @code{--with-system-gdbinit-dir} configure option\n+(@pxref{System-wide configuration}).  Files in this directory are\n+loaded in alphabetical order immediately after @file{system.gdbinit}\n+(if enabled) when @value{GDBN} starts, before command line options\n+have been processed.  Files need to have a recognized scripting\n+language extension (@file{.py}/@file{.scm}) or be named with a\n+@file{.gdb} extension to be interpreted as regular @value{GDBN}\n+commands.  @value{GDBN} will not recurse into any subdirectories of\n+this directory.\n+\n+@end table\n+\n+It is possible to prevent the system wide initialization files from\n+being loaded using the @samp{-nx} command line option, @pxref{Mode\n+Options,,Choosing Modes}.\n+\n+@anchor{Home Directory Init File}\n+@subsubsection Home directory initialization file\n+@cindex @file{gdbinit}\n @cindex @file{.gdbinit}\n @cindex @file{gdb.ini}\n-The @value{GDBN} init files are normally called @file{.gdbinit}.\n-The DJGPP port of @value{GDBN} uses the name @file{gdb.ini}, due to\n-the limitations of file names imposed by DOS filesystems.  The Windows\n-port of @value{GDBN} uses the standard name, but if it finds a\n-@file{gdb.ini} file in your home directory, it warns you about that\n-and suggests to rename the file to the standard name.\n \n+After loading the system wide initialization files @value{GDBN} will\n+look for an initialization file in the users home\n+directory@footnote{On DOS/Windows systems, the home directory is the\n+one pointed to by the @code{HOME} environment variable.}.  There are a\n+number of locations that @value{GDBN} will search in the home\n+directory, these locations are searched in order and @value{GDBN} will\n+load the first file that it finds, and subsequent locations will not\n+be checked.\n+\n+On non-Apple hosts the locations searched are:\n+@table @file\n+@item $XDG_CONFIG_HOME/gdb/gdbinit\n+@item $HOME/.config/gdb/gdbinit\n+@item $HOME/.gdbinit\n+@end table\n+\n+While on Apple hosts the locations searched are:\n+@table @file\n+@item $HOME/Library/Preferences/gdb/gdbinit\n+@item $HOME/.gdbinit\n+@end table\n+\n+It is possible to prevent the home directory initialization file from\n+being loaded using the @samp{-nx} or @samp{-nh} command line options,\n+@pxref{Mode Options,,Choosing Modes}.\n+\n+The DJGPP port of @value{GDBN} uses the name @file{gdb.ini} instead of\n+@file{.gdbinit} or @file{gdbinit}, due to the limitations of file\n+names imposed by DOS filesystems.  The Windows port of @value{GDBN}\n+uses the standard name, but if it finds a @file{gdb.ini} file in your\n+home directory, it warns you about that and suggests to rename the\n+file to the standard name.\n+\n+@anchor{Init File in the Current Directory during Startup}\n+@subsubsection Local directory initialization file\n+\n+@value{GDBN} will check the current directory for a file called\n+@file{.gdbinit}.  It is loaded last, after command line options\n+other than @samp{-x} and @samp{-ex} have been processed.  The command\n+line options @samp{-x} and @samp{-ex} are processed last, after\n+@file{.gdbinit} has been loaded, @pxref{File Options,,Choosing\n+Files}.\n+\n+If the file in the current directory was already loaded as the home\n+directory initialization file then it will not be loaded a second\n+time.\n+\n+It is possible to prevent the local directory initialization file from\n+being loaded using the @samp{-nx} command line option, @pxref{Mode\n+Options,,Choosing Modes}.\n \n @node Quitting GDB\n @section Quitting @value{GDBN}\n@@ -46470,7 +46522,8 @@ Execute given @value{GDBN} @var{command}.\n Add @var{directory} to the path to search for source files.\n \n @item -nh\n-Do not execute commands from @file{~/.gdbinit}.\n+Do not execute commands from @file{~/.config/gdb/gdbinit} or\n+@file{~/.gdbinit}.\n \n @item -nx\n @itemx -n\n@@ -46895,6 +46948,8 @@ Richard M. Stallman and Roland H. Pesch, July 1991.\n @value{SYSTEM_GDBINIT_DIR}/*\n @end ifset\n \n+~/.config/gdb/gdbinit\n+\n ~/.gdbinit\n \n ./.gdbinit\n@@ -46954,11 +47009,11 @@ the @value{GDBN} manual in node @code{System-wide configuration}\n @ref{System-wide configuration}.\n @end ifclear\n \n-@item ~/.gdbinit\n+@item @file{~/.config/gdb/gdbinit} or @file{~/.gdbinit}\n User initialization file.  It is executed unless user specified\n @value{GDBN} options @code{-nx}, @code{-n} or @code{-nh}.\n \n-@item ./.gdbinit\n+@item @file{.gdbinit}\n Initialization file for current directory.  It may need to be enabled with\n @value{GDBN} security command @code{set auto-load local-gdbinit}.\n See more in"
    },
    {
      "sha": "6232ea3f633a48b4ea027941325b669077e91811",
      "filename": "gdb/main.c",
      "status": "modified",
      "additions": 2,
      "deletions": 11,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64aaad6349d2b2c45063a5383f877ce9a3a0c354/gdb/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64aaad6349d2b2c45063a5383f877ce9a3a0c354/gdb/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/main.c?ref=64aaad6349d2b2c45063a5383f877ce9a3a0c354",
      "patch": "@@ -301,8 +301,6 @@ get_init_files (std::vector<std::string> *system_gdbinit,\n \t  }\n \t}\n \n-      const char *homedir = getenv (\"HOME\");\n-\n       /* If the .gdbinit file in the current directory is the same as\n \t the $HOME/.gdbinit file, it should not be sourced.  homebuf\n \t and cwdbuf are used in that purpose.  Make sure that the stats\n@@ -312,14 +310,7 @@ get_init_files (std::vector<std::string> *system_gdbinit,\n       memset (&homebuf, 0, sizeof (struct stat));\n       memset (&cwdbuf, 0, sizeof (struct stat));\n \n-      if (homedir)\n-\t{\n-\t  homeinit = std::string (homedir) + SLASH_STRING + GDBINIT;\n-\t  if (stat (homeinit.c_str (), &homebuf) != 0)\n-\t    {\n-\t      homeinit = \"\";\n-\t    }\n-\t}\n+      homeinit = find_gdb_home_config_file (GDBINIT, &homebuf);\n \n       if (stat (GDBINIT, &cwdbuf) == 0)\n \t{\n@@ -328,7 +319,7 @@ get_init_files (std::vector<std::string> *system_gdbinit,\n \t\t\t sizeof (struct stat)))\n \t    localinit = GDBINIT;\n \t}\n-      \n+\n       initialized = 1;\n     }\n "
    },
    {
      "sha": "a52e53b8671e2df0f749e7b5e0eb699e986d0bef",
      "filename": "gdbsupport/pathstuff.cc",
      "status": "modified",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64aaad6349d2b2c45063a5383f877ce9a3a0c354/gdbsupport/pathstuff.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64aaad6349d2b2c45063a5383f877ce9a3a0c354/gdbsupport/pathstuff.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/pathstuff.cc?ref=64aaad6349d2b2c45063a5383f877ce9a3a0c354",
      "patch": "@@ -23,6 +23,10 @@\n #include \"filenames.h\"\n #include \"gdb_tilde_expand.h\"\n \n+#include <sys/types.h>\n+#include <sys/stat.h>\n+#include <unistd.h>\n+\n #ifdef USE_WIN32API\n #include <windows.h>\n #endif\n@@ -298,6 +302,51 @@ get_standard_config_dir ()\n   return {};\n }\n \n+/* See pathstuff.h. */\n+\n+std::string\n+get_standard_config_filename (const char *filename)\n+{\n+  std::string config_dir = get_standard_config_dir ();\n+  if (config_dir != \"\")\n+    {\n+      const char *tmp = (*filename == '.') ? (filename + 1) : filename;\n+      std::string path = config_dir + SLASH_STRING + std::string (tmp);\n+      return path;\n+    }\n+\n+  return {};\n+}\n+\n+/* See pathstuff.h.  */\n+\n+std::string\n+find_gdb_home_config_file (const char *name, struct stat *buf)\n+{\n+  gdb_assert (name != nullptr);\n+  gdb_assert (*name != '\\0');\n+\n+  std::string config_dir_file = get_standard_config_filename (name);\n+  if (!config_dir_file.empty ())\n+    {\n+      if (stat (config_dir_file.c_str (), buf) == 0)\n+\treturn config_dir_file;\n+    }\n+\n+  const char *homedir = getenv (\"HOME\");\n+  if (homedir != nullptr)\n+    {\n+      /* Make sure the path is absolute and tilde-expanded.  */\n+      gdb::unique_xmalloc_ptr<char> abs (gdb_abspath (homedir));\n+      std::string path = (std::string (abs.get ()) + SLASH_STRING\n+\t\t\t  + std::string (name));\n+      if (stat (path.c_str (), buf) == 0)\n+\treturn path;\n+    }\n+\n+  return {};\n+}\n+\n /* See gdbsupport/pathstuff.h.  */\n \n const char *"
    },
    {
      "sha": "996c8f2bbf6a9f144f74157ca395beb395f071a7",
      "filename": "gdbsupport/pathstuff.h",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64aaad6349d2b2c45063a5383f877ce9a3a0c354/gdbsupport/pathstuff.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64aaad6349d2b2c45063a5383f877ce9a3a0c354/gdbsupport/pathstuff.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbsupport/pathstuff.h?ref=64aaad6349d2b2c45063a5383f877ce9a3a0c354",
      "patch": "@@ -99,6 +99,29 @@ extern std::string get_standard_temp_dir ();\n \n extern std::string get_standard_config_dir ();\n \n+/* Look for FILENAME in the standard configuration directory as returned by\n+   GET_STANDARD_CONFIG_DIR and return the path to the file.  No check is\n+   performed that the file actually exists or not.\n+\n+   If FILENAME begins with a '.' then the path returned will remove the\n+   leading '.' character, for example passing '.gdbinit' could return the\n+   path '/home/username/.config/gdb/gdbinit'.  */\n+\n+extern std::string get_standard_config_filename (const char *filename);\n+\n+/* Look for a file called NAME in either the standard config directory or\n+   in the users home directory.  If a suitable file is found then *BUF will\n+   be filled with the contents of a call to 'stat' on the found file,\n+   otherwise *BUF is undefined after this call.\n+\n+   If NAME starts with a '.' character then, when looking in the standard\n+   config directory the file searched for has the '.' removed.  For\n+   example, if NAME is '.gdbinit' then on a Linux target GDB might look for\n+   '~/.config/gdb/gdbinit' and then '~/.gdbinit'.  */\n+\n+extern std::string find_gdb_home_config_file (const char *name,\n+\t\t\t\t\t      struct stat *buf);\n+\n /* Return the file name of the user's shell.  Normally this comes from\n    the SHELL environment variable.  */\n "
    }
  ]
}