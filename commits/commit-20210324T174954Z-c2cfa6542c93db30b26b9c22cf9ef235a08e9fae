{
  "sha": "c2cfa6542c93db30b26b9c22cf9ef235a08e9fae",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzJjZmE2NTQyYzkzZGIzMGIyNmI5YzIyY2Y5ZWYyMzVhMDhlOWZhZQ==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-06-15T18:40:47Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-03-24T17:49:54Z"
    },
    "message": "Unit tests for gdbserver memory tagging remote packets\n\nAdd some unit testing to exercise the functions handling the qMemTags and\nQMemTags packets as well as feature support.\n\ngdbserver/ChangeLog:\n\n2021-03-24  Luis Machado  <luis.machado@linaro.org>\n\n\t* server.cc (test_memory_tagging_functions): New function.\n\t(captured_main): Register test_memory_tagging_functions.",
    "tree": {
      "sha": "16b8356796ae0f47602bc230ddd48639e43d73c5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/16b8356796ae0f47602bc230ddd48639e43d73c5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c2cfa6542c93db30b26b9c22cf9ef235a08e9fae",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c2cfa6542c93db30b26b9c22cf9ef235a08e9fae",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c2cfa6542c93db30b26b9c22cf9ef235a08e9fae",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c2cfa6542c93db30b26b9c22cf9ef235a08e9fae/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "546b77fe78bb366bbec3c708ac371e2f553bbdae",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/546b77fe78bb366bbec3c708ac371e2f553bbdae",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/546b77fe78bb366bbec3c708ac371e2f553bbdae"
    }
  ],
  "stats": {
    "total": 83,
    "additions": 83,
    "deletions": 0
  },
  "files": [
    {
      "sha": "eefd402fbe93bd95430aaddd46febc7b28217fc5",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2cfa6542c93db30b26b9c22cf9ef235a08e9fae/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2cfa6542c93db30b26b9c22cf9ef235a08e9fae/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=c2cfa6542c93db30b26b9c22cf9ef235a08e9fae",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-24  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* server.cc (test_memory_tagging_functions): New function.\n+\t(captured_main): Register test_memory_tagging_functions.\n+\n 2021-03-24  Luis Machado  <luis.machado@linaro.org>\n \n \t* remote-utils.cc (decode_m_packet_params): Renamed from ..."
    },
    {
      "sha": "fd5e78083639660239b78b0dfbedf4b7dcf04ec8",
      "filename": "gdbserver/server.cc",
      "status": "modified",
      "additions": 78,
      "deletions": 0,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c2cfa6542c93db30b26b9c22cf9ef235a08e9fae/gdbserver/server.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c2cfa6542c93db30b26b9c22cf9ef235a08e9fae/gdbserver/server.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/server.cc?ref=c2cfa6542c93db30b26b9c22cf9ef235a08e9fae",
      "patch": "@@ -3653,6 +3653,81 @@ detach_or_kill_for_exit_cleanup ()\n     }\n }\n \n+#if GDB_SELF_TEST\n+\n+namespace selftests {\n+\n+static void\n+test_memory_tagging_functions (void)\n+{\n+  /* Setup testing.  */\n+  gdb::char_vector packet;\n+  gdb::byte_vector tags, bv;\n+  std::string expected;\n+  packet.resize (32000);\n+  CORE_ADDR addr;\n+  size_t len;\n+  int type;\n+\n+  /* Test parsing a qMemTags request.  */\n+\n+  /* Valid request, addr, len and type updated.  */\n+  addr = 0xff;\n+  len = 255;\n+  type = 255;\n+  strcpy (packet.data (), \"qMemTags:0,0:0\");\n+  parse_fetch_memtags_request (packet.data (), &addr, &len, &type);\n+  SELF_CHECK (addr == 0 && len == 0 && type == 0);\n+\n+  /* Valid request, addr, len and type updated.  */\n+  addr = 0;\n+  len = 0;\n+  type = 0;\n+  strcpy (packet.data (), \"qMemTags:deadbeef,ff:5\");\n+  parse_fetch_memtags_request (packet.data (), &addr, &len, &type);\n+  SELF_CHECK (addr == 0xdeadbeef && len == 255 && type == 5);\n+\n+  /* Test creating a qMemTags reply.  */\n+\n+  /* Non-empty tag data.  */\n+  bv.resize (0);\n+\n+  for (int i = 0; i < 5; i++)\n+    bv.push_back (i);\n+\n+  expected = \"m0001020304\";\n+  SELF_CHECK (create_fetch_memtags_reply (packet.data (), bv) == true);\n+  SELF_CHECK (strcmp (packet.data (), expected.c_str ()) == 0);\n+\n+  /* Test parsing a QMemTags request.  */\n+\n+  /* Valid request and empty tag data: addr, len, type and tags updated.  */\n+  addr = 0xff;\n+  len = 255;\n+  type = 255;\n+  tags.resize (5);\n+  strcpy (packet.data (), \"QMemTags:0,0:0:\");\n+  SELF_CHECK (parse_store_memtags_request (packet.data (),\n+\t\t\t\t\t   &addr, &len, tags, &type) == true);\n+  SELF_CHECK (addr == 0 && len == 0 && type == 0 && tags.size () == 0);\n+\n+  /* Valid request and non-empty tag data: addr, len, type\n+     and tags updated.  */\n+  addr = 0;\n+  len = 0;\n+  type = 0;\n+  tags.resize (0);\n+  strcpy (packet.data (),\n+\t  \"QMemTags:deadbeef,ff:5:0001020304\");\n+  SELF_CHECK (parse_store_memtags_request (packet.data (), &addr, &len, tags,\n+\t\t\t\t\t   &type) == true);\n+  SELF_CHECK (addr == 0xdeadbeef && len == 255 && type == 5\n+\t      && tags.size () == 5);\n+}\n+\n+} // namespace selftests\n+#endif /* GDB_SELF_TEST */\n+\n /* Main function.  This is called by the real \"main\" function,\n    wrapped in a TRY_CATCH that handles any uncaught exceptions.  */\n \n@@ -3670,6 +3745,9 @@ captured_main (int argc, char *argv[])\n   bool selftest = false;\n #if GDB_SELF_TEST\n   std::vector<const char *> selftest_filters;\n+\n+  selftests::register_test (\"remote_memory_tagging\",\n+\t\t\t    selftests::test_memory_tagging_functions);\n #endif\n \n   current_directory = getcwd (NULL, 0);"
    }
  ]
}