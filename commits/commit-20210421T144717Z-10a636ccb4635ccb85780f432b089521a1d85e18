{
  "sha": "10a636ccb4635ccb85780f432b089521a1d85e18",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTBhNjM2Y2NiNDYzNWNjYjg1NzgwZjQzMmIwODk1MjFhMWQ4NWUxOA==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2021-04-21T14:42:40Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2021-04-21T14:47:17Z"
    },
    "message": "gdb/breakpoint: add a 'force_condition' parameter to 'create_breakpoint'\n\nThe 'create_breakpoint' function takes a 'parse_extra' argument that\ndetermines whether the condition, thread, and force-condition\nspecifiers should be parsed from the extra string or be used from the\nfunction arguments.  However, for the case when 'parse_extra' is\nfalse, there is no way to pass the force-condition specifier.  This\npatch adds it as a new argument.\n\nAlso, in the case when parse_extra is false, the current behavior is\nas if the condition is being forced.  This is a bug.  The default\nbehavior should reject the breakpoint.  See below for a demo of this\nincorrect behavior.  (The MI command '-break-insert' uses the\n'create_breakpoint' function with parse_extra=0.)\n\n  $ gdb -q --interpreter=mi3 /tmp/simple\n  =thread-group-added,id=\"i1\"\n  =cmd-param-changed,param=\"history save\",value=\"on\"\n  =cmd-param-changed,param=\"auto-load safe-path\",value=\"/\"\n  ~\"Reading symbols from /tmp/simple...\\n\"\n  (gdb)\n  -break-insert -c junk -f main\n  &\"warning: failed to validate condition at location 1, disabling:\\n  \"\n  &\"No symbol \\\"junk\\\" in current context.\\n\"\n  ^done,bkpt={number=\"1\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",addr=\"<MULTIPLE>\",cond=\"junk\",times=\"0\",original-location=\"main\",locations=[{number=\"1.1\",enabled=\"N\",addr=\"0x000000000000114e\",func=\"main\",file=\"/tmp/simple.c\",fullname=\"/tmp/simple.c\",line=\"2\",thread-groups=[\"i1\"]}]}\n  (gdb)\n  break main if junk\n  &\"break main if junk\\n\"\n  &\"No symbol \\\"junk\\\" in current context.\\n\"\n  ^error,msg=\"No symbol \\\"junk\\\" in current context.\"\n  (gdb)\n  break main -force-condition if junk\n  &\"break main -force-condition if junk\\n\"\n  ~\"Note: breakpoint 1 also set at pc 0x114e.\\n\"\n  &\"warning: failed to validate condition at location 1, disabling:\\n  \"\n  &\"No symbol \\\"junk\\\" in current context.\\n\"\n  ~\"Breakpoint 2 at 0x114e: file /tmp/simple.c, line 2.\\n\"\n  =breakpoint-created,bkpt={number=\"2\",type=\"breakpoint\",disp=\"keep\",enabled=\"y\",addr=\"<MULTIPLE>\",cond=\"junk\",times=\"0\",original-location=\"main\",locations=[{number=\"2.1\",enabled=\"N\",addr=\"0x000000000000114e\",func=\"main\",file=\"/tmp/simple.c\",fullname=\"/tmp/simple.c\",line=\"2\",thread-groups=[\"i1\"]}]}\n  ^done\n  (gdb)\n\nAfter applying this patch, we get the behavior below:\n\n  (gdb)\n  -break-insert -c junk -f main\n  ^error,msg=\"No symbol \\\"junk\\\" in current context.\"\n\nThis restores the behavior that is present in the existing releases.\n\ngdb/ChangeLog:\n2021-04-21  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* breakpoint.h (create_breakpoint): Add a new parameter,\n\t'force_condition'.\n\t* breakpoint.c (create_breakpoint): Use the 'force_condition'\n\targument when 'parse_extra' is false to check if the condition\n\tis invalid at all of the breakpoint locations.\n\tUpdate the users below.\n\t(break_command_1)\n\t(dprintf_command)\n\t(trace_command)\n\t(ftrace_command)\n\t(strace_command)\n\t(create_tracepoint_from_upload): Update.\n\t* guile/scm-breakpoint.c (gdbscm_register_breakpoint_x): Update.\n\t* mi/mi-cmd-break.c (mi_cmd_break_insert_1): Update.\n\t* python/py-breakpoint.c (bppy_init): Update.\n\t* python/py-finishbreakpoint.c (bpfinishpy_init): Update.\n\ngdb/testsuite/ChangeLog:\n2021-04-21  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* gdb.mi/mi-break.exp: Extend with checks for invalid breakpoint\n\tconditions.",
    "tree": {
      "sha": "75931ab01e64b1ef024448f35c57412fd567470e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/75931ab01e64b1ef024448f35c57412fd567470e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/10a636ccb4635ccb85780f432b089521a1d85e18",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/10a636ccb4635ccb85780f432b089521a1d85e18",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/10a636ccb4635ccb85780f432b089521a1d85e18",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/10a636ccb4635ccb85780f432b089521a1d85e18/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "98e713abc69e9bd0232417dfadae339fa6113ee1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/98e713abc69e9bd0232417dfadae339fa6113ee1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/98e713abc69e9bd0232417dfadae339fa6113ee1"
    }
  ],
  "stats": {
    "total": 90,
    "additions": 81,
    "deletions": 9
  },
  "files": [
    {
      "sha": "981fcb55b4c226c37e51140afcf6eeb3e81a6724",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10a636ccb4635ccb85780f432b089521a1d85e18/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10a636ccb4635ccb85780f432b089521a1d85e18/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=10a636ccb4635ccb85780f432b089521a1d85e18",
      "patch": "@@ -1,3 +1,22 @@\n+2021-04-21  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* breakpoint.h (create_breakpoint): Add a new parameter,\n+\t'force_condition'.\n+\t* breakpoint.c (create_breakpoint): Use the 'force_condition'\n+\targument when 'parse_extra' is false to check if the condition\n+\tis invalid at all of the breakpoint locations.\n+\tUpdate the users below.\n+\t(break_command_1)\n+\t(dprintf_command)\n+\t(trace_command)\n+\t(ftrace_command)\n+\t(strace_command)\n+\t(create_tracepoint_from_upload): Update.\n+\t* guile/scm-breakpoint.c (gdbscm_register_breakpoint_x): Update.\n+\t* mi/mi-cmd-break.c (mi_cmd_break_insert_1): Update.\n+\t* python/py-breakpoint.c (bppy_init): Update.\n+\t* python/py-finishbreakpoint.c (bpfinishpy_init): Update.\n+\n 2021-04-21  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* breakpoint.c (print_one_breakpoint_location): Display \"N\" for"
    },
    {
      "sha": "c2d0ffba974d4783c11f03a5ca3a8eb1626c0f18",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 34,
      "deletions": 6,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10a636ccb4635ccb85780f432b089521a1d85e18/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10a636ccb4635ccb85780f432b089521a1d85e18/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=10a636ccb4635ccb85780f432b089521a1d85e18",
      "patch": "@@ -9460,7 +9460,7 @@ create_breakpoint (struct gdbarch *gdbarch,\n \t\t   struct event_location *location,\n \t\t   const char *cond_string,\n \t\t   int thread, const char *extra_string,\n-\t\t   int parse_extra,\n+\t\t   bool force_condition, int parse_extra,\n \t\t   int tempflag, enum bptype type_wanted,\n \t\t   int ignore_count,\n \t\t   enum auto_boolean pending_break_support,\n@@ -9558,6 +9558,33 @@ create_breakpoint (struct gdbarch *gdbarch,\n \t      && extra_string != NULL && *extra_string != '\\0')\n \t\terror (_(\"Garbage '%s' at end of location\"), extra_string);\n \n+\t  /* Check the validity of the condition.  We should error out\n+\t     if the condition is invalid at all of the locations and\n+\t     if it is not forced.  In the PARSE_EXTRA case above, this\n+\t     check is done when parsing the EXTRA_STRING.  */\n+\t  if (cond_string != nullptr && !force_condition)\n+\t    {\n+\t      int num_failures = 0;\n+\t      const linespec_sals &lsal = canonical.lsals[0];\n+\t      for (const auto &sal : lsal.sals)\n+\t\t{\n+\t\t  const char *cond = cond_string;\n+\t\t  try\n+\t\t    {\n+\t\t      parse_exp_1 (&cond, sal.pc, block_for_pc (sal.pc), 0);\n+\t\t      /* One success is sufficient to keep going.  */\n+\t\t      break;\n+\t\t    }\n+\t\t  catch (const gdb_exception_error &)\n+\t\t    {\n+\t\t      num_failures++;\n+\t\t      /* If this is the last sal, error out.  */\n+\t\t      if (num_failures == lsal.sals.size ())\n+\t\t\tthrow;\n+\t\t    }\n+\t\t}\n+\t    }\n+\n \t  /* Create a private copy of condition string.  */\n \t  if (cond_string)\n \t    cond_string_copy.reset (xstrdup (cond_string));\n@@ -9636,7 +9663,7 @@ break_command_1 (const char *arg, int flag, int from_tty)\n \n   create_breakpoint (get_current_arch (),\n \t\t     location.get (),\n-\t\t     NULL, 0, arg, 1 /* parse arg */,\n+\t\t     NULL, 0, arg, false, 1 /* parse arg */,\n \t\t     tempflag, type_wanted,\n \t\t     0 /* Ignore count */,\n \t\t     pending_break_support,\n@@ -9823,7 +9850,7 @@ dprintf_command (const char *arg, int from_tty)\n \n   create_breakpoint (get_current_arch (),\n \t\t     location.get (),\n-\t\t     NULL, 0, arg, 1 /* parse arg */,\n+\t\t     NULL, 0, arg, false, 1 /* parse arg */,\n \t\t     0, bp_dprintf,\n \t\t     0 /* Ignore count */,\n \t\t     pending_break_support,\n@@ -14721,7 +14748,7 @@ trace_command (const char *arg, int from_tty)\n \n   create_breakpoint (get_current_arch (),\n \t\t     location.get (),\n-\t\t     NULL, 0, arg, 1 /* parse arg */,\n+\t\t     NULL, 0, arg, false, 1 /* parse arg */,\n \t\t     0 /* tempflag */,\n \t\t     bp_tracepoint /* type_wanted */,\n \t\t     0 /* Ignore count */,\n@@ -14739,7 +14766,7 @@ ftrace_command (const char *arg, int from_tty)\n \t\t\t\t\t\t\t current_language);\n   create_breakpoint (get_current_arch (),\n \t\t     location.get (),\n-\t\t     NULL, 0, arg, 1 /* parse arg */,\n+\t\t     NULL, 0, arg, false, 1 /* parse arg */,\n \t\t     0 /* tempflag */,\n \t\t     bp_fast_tracepoint /* type_wanted */,\n \t\t     0 /* Ignore count */,\n@@ -14773,7 +14800,7 @@ strace_command (const char *arg, int from_tty)\n \n   create_breakpoint (get_current_arch (),\n \t\t     location.get (),\n-\t\t     NULL, 0, arg, 1 /* parse arg */,\n+\t\t     NULL, 0, arg, false, 1 /* parse arg */,\n \t\t     0 /* tempflag */,\n \t\t     bp_static_tracepoint /* type_wanted */,\n \t\t     0 /* Ignore count */,\n@@ -14843,6 +14870,7 @@ create_tracepoint_from_upload (struct uploaded_tp *utp)\n   if (!create_breakpoint (get_current_arch (),\n \t\t\t  location.get (),\n \t\t\t  utp->cond_string.get (), -1, addr_str,\n+\t\t\t  false /* force_condition */,\n \t\t\t  0 /* parse cond/thread */,\n \t\t\t  0 /* tempflag */,\n \t\t\t  utp->type /* type_wanted */,"
    },
    {
      "sha": "ded498f55622626e4bbf75d1c507cd8cd31826b4",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10a636ccb4635ccb85780f432b089521a1d85e18/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10a636ccb4635ccb85780f432b089521a1d85e18/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=10a636ccb4635ccb85780f432b089521a1d85e18",
      "patch": "@@ -1409,6 +1409,11 @@ enum breakpoint_create_flags\n    the condition, thread, and extra string from EXTRA_STRING, ignoring\n    the similarly named parameters.\n \n+   If FORCE_CONDITION is true, the condition is accepted even when it is\n+   invalid at all of the locations.  However, if PARSE_EXTRA is non-zero,\n+   the FORCE_CONDITION parameter is ignored and the corresponding argument\n+   is parsed from EXTRA_STRING.\n+\n    If INTERNAL is non-zero, the breakpoint number will be allocated\n    from the internal breakpoint count.\n \n@@ -1418,6 +1423,7 @@ extern int create_breakpoint (struct gdbarch *gdbarch,\n \t\t\t      struct event_location *location,\n \t\t\t      const char *cond_string, int thread,\n \t\t\t      const char *extra_string,\n+\t\t\t      bool force_condition,\n \t\t\t      int parse_extra,\n \t\t\t      int tempflag, enum bptype wanted_type,\n \t\t\t      int ignore_count,"
    },
    {
      "sha": "af63893461ba2fd10b4f7c204ad9596b783c756c",
      "filename": "gdb/guile/scm-breakpoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10a636ccb4635ccb85780f432b089521a1d85e18/gdb/guile/scm-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10a636ccb4635ccb85780f432b089521a1d85e18/gdb/guile/scm-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-breakpoint.c?ref=10a636ccb4635ccb85780f432b089521a1d85e18",
      "patch": "@@ -440,7 +440,7 @@ gdbscm_register_breakpoint_x (SCM self)\n \t    const breakpoint_ops *ops =\n \t      breakpoint_ops_for_event_location (eloc.get (), false);\n \t    create_breakpoint (get_current_arch (),\n-\t\t\t       eloc.get (), NULL, -1, NULL,\n+\t\t\t       eloc.get (), NULL, -1, NULL, false,\n \t\t\t       0,\n \t\t\t       0, bp_breakpoint,\n \t\t\t       0,"
    },
    {
      "sha": "5a4a62ce8c3497e9acc64eab4bbcc4502d3e3c38",
      "filename": "gdb/mi/mi-cmd-break.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10a636ccb4635ccb85780f432b089521a1d85e18/gdb/mi/mi-cmd-break.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10a636ccb4635ccb85780f432b089521a1d85e18/gdb/mi/mi-cmd-break.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-break.c?ref=10a636ccb4635ccb85780f432b089521a1d85e18",
      "patch": "@@ -353,6 +353,7 @@ mi_cmd_break_insert_1 (int dprintf, const char *command, char **argv, int argc)\n \n   create_breakpoint (get_current_arch (), location.get (), condition, thread,\n \t\t     extra_string.c_str (),\n+\t\t     false,\n \t\t     0 /* condition and thread are valid.  */,\n \t\t     temp_p, type_wanted,\n \t\t     ignore_count,"
    },
    {
      "sha": "9650bd023b56e0c9cf0a244429e4128c8bb544c0",
      "filename": "gdb/python/py-breakpoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10a636ccb4635ccb85780f432b089521a1d85e18/gdb/python/py-breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10a636ccb4635ccb85780f432b089521a1d85e18/gdb/python/py-breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-breakpoint.c?ref=10a636ccb4635ccb85780f432b089521a1d85e18",
      "patch": "@@ -835,7 +835,7 @@ bppy_init (PyObject *self, PyObject *args, PyObject *kwargs)\n \t      breakpoint_ops_for_event_location (location.get (), false);\n \n \t    create_breakpoint (python_gdbarch,\n-\t\t\t       location.get (), NULL, -1, NULL,\n+\t\t\t       location.get (), NULL, -1, NULL, false,\n \t\t\t       0,\n \t\t\t       temporary_bp, type,\n \t\t\t       0,"
    },
    {
      "sha": "38b4cc67901f8aab77b775dab42b2265809dd25a",
      "filename": "gdb/python/py-finishbreakpoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10a636ccb4635ccb85780f432b089521a1d85e18/gdb/python/py-finishbreakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10a636ccb4635ccb85780f432b089521a1d85e18/gdb/python/py-finishbreakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-finishbreakpoint.c?ref=10a636ccb4635ccb85780f432b089521a1d85e18",
      "patch": "@@ -294,7 +294,7 @@ bpfinishpy_init (PyObject *self, PyObject *args, PyObject *kwargs)\n       event_location_up location\n \t= new_address_location (get_frame_pc (prev_frame), NULL, 0);\n       create_breakpoint (python_gdbarch,\n-\t\t\t location.get (), NULL, thread, NULL,\n+\t\t\t location.get (), NULL, thread, NULL, false,\n \t\t\t 0,\n \t\t\t 1 /*temp_flag*/,\n \t\t\t bp_breakpoint,"
    },
    {
      "sha": "44fa9f35fefe802a59019b4bd4fe9d857185299d",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10a636ccb4635ccb85780f432b089521a1d85e18/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10a636ccb4635ccb85780f432b089521a1d85e18/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=10a636ccb4635ccb85780f432b089521a1d85e18",
      "patch": "@@ -1,3 +1,8 @@\n+2021-04-21  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* gdb.mi/mi-break.exp: Extend with checks for invalid breakpoint\n+\tconditions.\n+\n 2021-04-21  Simon Marchi  <simon.marchi@polymtl.ca>\n \t    Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n "
    },
    {
      "sha": "b2db2d41d1fcf4e1df451134067704e787c9e2ad",
      "filename": "gdb/testsuite/gdb.mi/mi-break.exp",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10a636ccb4635ccb85780f432b089521a1d85e18/gdb/testsuite/gdb.mi/mi-break.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10a636ccb4635ccb85780f432b089521a1d85e18/gdb/testsuite/gdb.mi/mi-break.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.mi/mi-break.exp?ref=10a636ccb4635ccb85780f432b089521a1d85e18",
      "patch": "@@ -224,6 +224,19 @@ proc_with_prefix test_error {} {\n     mi_gdb_test \"-break-insert -c i==4 \\\"callme if i < 4\\\"\" \\\n         \".*\\\\^error,msg=\\\"Garbage 'if i < 4' at end of location\\\"\" \\\n         \"conditional breakpoint with garbage after location\"\n+\n+    # Try using an invalid condition.\n+    mi_gdb_test \"-break-insert -c bad callme\" \\\n+        \".*\\\\^error,msg=\\\"No symbol \\\\\\\\\\\"bad\\\\\\\\\\\" in current context.\\\"\" \\\n+        \"breakpoint with bad condition\"\n+\n+    mi_gdb_test \"-dprintf-insert -c bad callme \\\"Hello\\\"\" \\\n+        \".*\\\\^error,msg=\\\"No symbol \\\\\\\\\\\"bad\\\\\\\\\\\" in current context.\\\"\" \\\n+        \"dprintf with bad condition\"\n+\n+    mi_gdb_test \"-break-condition 5 bad\" \\\n+        \".*\\\\^error,msg=\\\"No symbol \\\\\\\\\\\"bad\\\\\\\\\\\" in current context.\\\"\" \\\n+        \"invalid condition\"\n }\n \n proc_with_prefix test_disabled_creation {} {"
    }
  ]
}