{
  "sha": "f6eee2d098049afd18f90b8f4bb6a5d1a49d900c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjZlZWUyZDA5ODA0OWFmZDE4ZjkwYjhmNGJiNmE1ZDFhNDlkOTAwYw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-05-14T22:19:48Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-02T12:53:11Z"
    },
    "message": "gdb: Convert language skip_trampoline field to a method\n\nThis commit changes the language_data::skip_trampoline function\npointer member variable into a member function of language_defn.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* ada-lang.c (ada_language_data): Delete skip_trampoline\n\tinitializer.\n\t* c-lang.c (c_language_data): Likewise.\n\t(cplus_language_data): Likewise.\n\t(cplus_language::skip_trampoline): New member function.\n\t(asm_language_data): Delete skip_trampoline initializer.\n\t(minimal_language_data): Likewise.\n\t* d-lang.c (d_language_data): Likewise.\n\t* f-lang.c (f_language_data): Likewise.\n\t* go-lang.c (go_language_data): Likewise.\n\t* language.c (unk_lang_trampoline): Delete function.\n\t(skip_language_trampoline): Update.\n\t(unknown_language_data): Delete skip_trampoline initializer.\n\t(auto_language_data): Likewise.\n\t* language.h (language_data): Delete skip_trampoline field.\n\t(language_defn::skip_trampoline): New function.\n\t* m2-lang.c (m2_language_data): Delete skip_trampoline\n\tinitializer.\n\t* objc-lang.c (objc_skip_trampoline): Delete function, move\n\timplementation to objc_language::skip_trampoline.\n\t(objc_language_data): Delete skip_trampoline initializer.\n\t(objc_language::skip_trampoline): New member function with\n\timplementation from objc_skip_trampoline.\n\t* opencl-lang.c (opencl_language_data): Delete skip_trampoline\n\tinitializer.\n\t* p-lang.c (pascal_language_data): Likewise.\n\t* rust-lang.c (rust_language_data): Likewise.",
    "tree": {
      "sha": "50d744e8e9bb6fa77425b8d51e13ae8968b01c7e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/50d744e8e9bb6fa77425b8d51e13ae8968b01c7e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0a50df5dabfe12c8bf20f4f724622ff38ef7828b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0a50df5dabfe12c8bf20f4f724622ff38ef7828b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0a50df5dabfe12c8bf20f4f724622ff38ef7828b"
    }
  ],
  "stats": {
    "total": 149,
    "additions": 84,
    "deletions": 65
  },
  "files": [
    {
      "sha": "393651799ef9a73cfeb64a4751ee4f04a671378f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f6eee2d098049afd18f90b8f4bb6a5d1a49d900c",
      "patch": "@@ -1,3 +1,33 @@\n+2020-06-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* ada-lang.c (ada_language_data): Delete skip_trampoline\n+\tinitializer.\n+\t* c-lang.c (c_language_data): Likewise.\n+\t(cplus_language_data): Likewise.\n+\t(cplus_language::skip_trampoline): New member function.\n+\t(asm_language_data): Delete skip_trampoline initializer.\n+\t(minimal_language_data): Likewise.\n+\t* d-lang.c (d_language_data): Likewise.\n+\t* f-lang.c (f_language_data): Likewise.\n+\t* go-lang.c (go_language_data): Likewise.\n+\t* language.c (unk_lang_trampoline): Delete function.\n+\t(skip_language_trampoline): Update.\n+\t(unknown_language_data): Delete skip_trampoline initializer.\n+\t(auto_language_data): Likewise.\n+\t* language.h (language_data): Delete skip_trampoline field.\n+\t(language_defn::skip_trampoline): New function.\n+\t* m2-lang.c (m2_language_data): Delete skip_trampoline\n+\tinitializer.\n+\t* objc-lang.c (objc_skip_trampoline): Delete function, move\n+\timplementation to objc_language::skip_trampoline.\n+\t(objc_language_data): Delete skip_trampoline initializer.\n+\t(objc_language::skip_trampoline): New member function with\n+\timplementation from objc_skip_trampoline.\n+\t* opencl-lang.c (opencl_language_data): Delete skip_trampoline\n+\tinitializer.\n+\t* p-lang.c (pascal_language_data): Likewise.\n+\t* rust-lang.c (rust_language_data): Likewise.\n+\n 2020-06-02  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* ada-lang.c (ada_language_data): Delete la_demangle initializer."
    },
    {
      "sha": "b1c689beb0fe307799cbfc20f73f1ae3ca495090",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=f6eee2d098049afd18f90b8f4bb6a5d1a49d900c",
      "patch": "@@ -13922,7 +13922,6 @@ extern const struct language_data ada_language_data =\n   ada_print_typedef,            /* Print a typedef using appropriate syntax */\n   ada_value_print_inner,\t/* la_value_print_inner */\n   ada_value_print,              /* Print a top-level value */\n-  NULL,                         /* Language specific skip_trampoline */\n   NULL,                         /* name_of_this */\n   true,                         /* la_store_sym_names_in_linkage_form_p */\n   ada_lookup_symbol_nonlocal,   /* Looking up non-local symbols.  */"
    },
    {
      "sha": "364a672119aec2d8404ab58a39e419b06e376f3c",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=f6eee2d098049afd18f90b8f4bb6a5d1a49d900c",
      "patch": "@@ -908,7 +908,6 @@ extern const struct language_data c_language_data =\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   c_value_print_inner,\t\t/* la_value_print_inner */\n   c_value_print,\t\t/* Print a top-level value */\n-  NULL,\t\t\t\t/* Language specific skip_trampoline */\n   NULL,\t\t\t\t/* name_of_this */\n   true,\t\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n@@ -1017,7 +1016,6 @@ extern const struct language_data cplus_language_data =\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   c_value_print_inner,\t\t/* la_value_print_inner */\n   c_value_print,\t\t/* Print a top-level value */\n-  cplus_skip_trampoline,\t/* Language specific skip_trampoline */\n   \"this\",                       /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   cp_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n@@ -1157,6 +1155,14 @@ class cplus_language : public language_defn\n   {\n     c_print_type (type, varstring, stream, show, level, flags);\n   }\n+\n+  /* See language.h.  */\n+\n+  CORE_ADDR skip_trampoline (struct frame_info *fi,\n+\t\t\t     CORE_ADDR pc) const override\n+  {\n+    return cplus_skip_trampoline (fi, pc);\n+  }\n };\n \n /* The single instance of the C++ language class.  */\n@@ -1189,7 +1195,6 @@ extern const struct language_data asm_language_data =\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   c_value_print_inner,\t\t/* la_value_print_inner */\n   c_value_print,\t\t/* Print a top-level value */\n-  NULL,\t\t\t\t/* Language specific skip_trampoline */\n   NULL,\t\t\t\t/* name_of_this */\n   true,\t\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n@@ -1263,7 +1268,6 @@ extern const struct language_data minimal_language_data =\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   c_value_print_inner,\t\t/* la_value_print_inner */\n   c_value_print,\t\t/* Print a top-level value */\n-  NULL,\t\t\t\t/* Language specific skip_trampoline */\n   NULL,\t\t\t\t/* name_of_this */\n   true,\t\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */"
    },
    {
      "sha": "81e3aac87ba6bb4a73b0df5ac3e0af0f4b8e3714",
      "filename": "gdb/d-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/d-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/d-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-lang.c?ref=f6eee2d098049afd18f90b8f4bb6a5d1a49d900c",
      "patch": "@@ -151,7 +151,6 @@ extern const struct language_data d_language_data =\n \t\t\t\t   syntax.  */\n   d_value_print_inner,\t\t/* la_value_print_inner */\n   c_value_print,\t\t/* Print a top-level value.  */\n-  NULL,\t\t\t\t/* Language specific skip_trampoline.  */\n   \"this\",\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   d_lookup_symbol_nonlocal,"
    },
    {
      "sha": "90a794ef4bab10a3c940e767777bd4e5d6e72147",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=f6eee2d098049afd18f90b8f4bb6a5d1a49d900c",
      "patch": "@@ -611,7 +611,6 @@ extern const struct language_data f_language_data =\n   f_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   f_value_print_innner,\t\t/* la_value_print_inner */\n   c_value_print,\t\t/* FIXME */\n-  NULL,\t\t\t\t/* Language specific skip_trampoline */\n   NULL,                    \t/* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   cp_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */"
    },
    {
      "sha": "3975dfcb482ee2c0400e4ce9cfe3b45dc430013e",
      "filename": "gdb/go-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/go-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/go-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.c?ref=f6eee2d098049afd18f90b8f4bb6a5d1a49d900c",
      "patch": "@@ -536,7 +536,6 @@ extern const struct language_data go_language_data =\n \t\t\t\t   syntax.  */\n   go_value_print_inner,\t\t/* la_value_print_inner */\n   c_value_print,\t\t/* Print a top-level value.  */\n-  NULL,\t\t\t\t/* Language specific skip_trampoline.  */\n   NULL,\t\t\t\t/* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal, "
    },
    {
      "sha": "ba4d96cf89b4a043d7cc01cfb6acc629bbeaf068",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 3,
      "deletions": 15,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=f6eee2d098049afd18f90b8f4bb6a5d1a49d900c",
      "patch": "@@ -60,8 +60,6 @@ static void unk_lang_printchar (int c, struct type *type,\n static void unk_lang_value_print (struct value *, struct ui_file *,\n \t\t\t\t  const struct value_print_options *);\n \n-static CORE_ADDR unk_lang_trampoline (struct frame_info *, CORE_ADDR pc);\n-\n /* The current (default at startup) state of type and range checking.\n    (If the modes are set to \"auto\", though, these are changed based\n    on the default language at startup, and then again based on the\n@@ -567,13 +565,10 @@ skip_language_trampoline (struct frame_info *frame, CORE_ADDR pc)\n {\n   for (const auto &lang : language_defn::languages)\n     {\n-      if (lang->skip_trampoline != NULL)\n-\t{\n-\t  CORE_ADDR real_pc = lang->skip_trampoline (frame, pc);\n+      CORE_ADDR real_pc = lang->skip_trampoline (frame, pc);\n \n-\t  if (real_pc)\n-\t    return real_pc;\n-\t}\n+      if (real_pc != 0)\n+\treturn real_pc;\n     }\n \n   return 0;\n@@ -744,11 +739,6 @@ unk_lang_value_print (struct value *val, struct ui_file *stream,\n \t   \"function unk_lang_value_print called.\"));\n }\n \n-static CORE_ADDR unk_lang_trampoline (struct frame_info *frame, CORE_ADDR pc)\n-{\n-  return 0;\n-}\n-\n static char *unk_lang_class_name (const char *mangled)\n {\n   return NULL;\n@@ -790,7 +780,6 @@ extern const struct language_data unknown_language_data =\n   default_print_typedef,\t/* Print a typedef using appropriate syntax */\n   unk_lang_value_print_inner,\t/* la_value_print_inner */\n   unk_lang_value_print,\t\t/* Print a top-level value */\n-  unk_lang_trampoline,\t\t/* Language specific skip_trampoline */\n   \"this\",        \t    \t/* name_of_this */\n   true,\t\t\t\t/* store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal, /* lookup_symbol_nonlocal */\n@@ -868,7 +857,6 @@ extern const struct language_data auto_language_data =\n   default_print_typedef,\t/* Print a typedef using appropriate syntax */\n   unk_lang_value_print_inner,\t/* la_value_print_inner */\n   unk_lang_value_print,\t\t/* Print a top-level value */\n-  unk_lang_trampoline,\t\t/* Language specific skip_trampoline */\n   \"this\",\t\t        /* name_of_this */\n   false,\t\t\t/* store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */"
    },
    {
      "sha": "05ad132d01b5ffee9715849f525fdbc14d50890b",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=f6eee2d098049afd18f90b8f4bb6a5d1a49d900c",
      "patch": "@@ -267,12 +267,6 @@ struct language_data\n     void (*la_value_print) (struct value *, struct ui_file *,\n \t\t\t    const struct value_print_options *);\n \n-    /* PC is possibly an unknown languages trampoline.\n-       If that PC falls in a trampoline belonging to this language,\n-       return the address of the first pc in the real function, or 0\n-       if it isn't a language tramp for this language.  */\n-    CORE_ADDR (*skip_trampoline) (struct frame_info *, CORE_ADDR);\n-\n     /* Now come some hooks for lookup_symbol.  */\n \n     /* If this is non-NULL, specifies the name that of the implicit\n@@ -520,6 +514,15 @@ struct language_defn : language_data\n   virtual void print_type (struct type *, const char *, struct ui_file *, int,\n \t\t\t   int, const struct type_print_options *) const = 0;\n \n+  /* PC is possibly an unknown languages trampoline.\n+     If that PC falls in a trampoline belonging to this language, return\n+     the address of the first pc in the real function, or 0 if it isn't a\n+     language tramp for this language.  */\n+  virtual CORE_ADDR skip_trampoline (struct frame_info *fi, CORE_ADDR pc) const\n+  {\n+    return (CORE_ADDR) 0;\n+  }\n+\n   /* List of all known languages.  */\n   static const struct language_defn *languages[nr_languages];\n };"
    },
    {
      "sha": "f174ad55823f30a487441d9d5f0ee9b080707037",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=f6eee2d098049afd18f90b8f4bb6a5d1a49d900c",
      "patch": "@@ -370,7 +370,6 @@ extern const struct language_data m2_language_data =\n   m2_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   m2_value_print_inner,\t\t/* la_value_print_inner */\n   c_value_print,\t\t/* Print a top-level value */\n-  NULL,\t\t\t\t/* Language specific skip_trampoline */\n   NULL,\t\t                /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */"
    },
    {
      "sha": "ff028fc012a9164f850b684cb1572af833ff2733",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 34,
      "deletions": 32,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=f6eee2d098049afd18f90b8f4bb6a5d1a49d900c",
      "patch": "@@ -281,37 +281,6 @@ objc_demangle (const char *mangled, int options)\n     return NULL;\t/* Not an objc mangled name.  */\n }\n \n-/* Determine if we are currently in the Objective-C dispatch function.\n-   If so, get the address of the method function that the dispatcher\n-   would call and use that as the function to step into instead.  Also\n-   skip over the trampoline for the function (if any).  This is better\n-   for the user since they are only interested in stepping into the\n-   method function anyway.  */\n-static CORE_ADDR \n-objc_skip_trampoline (struct frame_info *frame, CORE_ADDR stop_pc)\n-{\n-  struct gdbarch *gdbarch = get_frame_arch (frame);\n-  CORE_ADDR real_stop_pc;\n-  CORE_ADDR method_stop_pc;\n-  \n-  real_stop_pc = gdbarch_skip_trampoline_code (gdbarch, frame, stop_pc);\n-\n-  if (real_stop_pc != 0)\n-    find_objc_msgcall (real_stop_pc, &method_stop_pc);\n-  else\n-    find_objc_msgcall (stop_pc, &method_stop_pc);\n-\n-  if (method_stop_pc)\n-    {\n-      real_stop_pc = gdbarch_skip_trampoline_code\n-\t\t       (gdbarch, frame, method_stop_pc);\n-      if (real_stop_pc == 0)\n-\treal_stop_pc = method_stop_pc;\n-    }\n-\n-  return real_stop_pc;\n-}\n-\n \n /* Table mapping opcodes into strings for printing operators\n    and precedences of the operators.  */\n@@ -376,7 +345,6 @@ extern const struct language_data objc_language_data =\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   c_value_print_inner,\t\t/* la_value_print_inner */\n   c_value_print,\t\t/* Print a top-level value */\n-  objc_skip_trampoline, \t/* Language specific skip_trampoline */\n   \"self\",\t\t        /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n@@ -434,6 +402,40 @@ class objc_language : public language_defn\n   {\n     c_print_type (type, varstring, stream, show, level, flags);\n   }\n+\n+  /* See language.h.  */\n+\n+  CORE_ADDR skip_trampoline (struct frame_info *frame,\n+\t\t\t     CORE_ADDR stop_pc) const override\n+  {\n+    struct gdbarch *gdbarch = get_frame_arch (frame);\n+    CORE_ADDR real_stop_pc;\n+    CORE_ADDR method_stop_pc;\n+\n+    /* Determine if we are currently in the Objective-C dispatch function.\n+       If so, get the address of the method function that the dispatcher\n+       would call and use that as the function to step into instead.  Also\n+       skip over the trampoline for the function (if any).  This is better\n+       for the user since they are only interested in stepping into the\n+       method function anyway.  */\n+\n+    real_stop_pc = gdbarch_skip_trampoline_code (gdbarch, frame, stop_pc);\n+\n+    if (real_stop_pc != 0)\n+      find_objc_msgcall (real_stop_pc, &method_stop_pc);\n+    else\n+      find_objc_msgcall (stop_pc, &method_stop_pc);\n+\n+    if (method_stop_pc)\n+      {\n+\treal_stop_pc = gdbarch_skip_trampoline_code\n+\t  (gdbarch, frame, method_stop_pc);\n+\tif (real_stop_pc == 0)\n+\t  real_stop_pc = method_stop_pc;\n+      }\n+\n+    return real_stop_pc;\n+  }\n };\n \n /* Single instance of the class representing the Objective-C language.  */"
    },
    {
      "sha": "eaf61c3fc1aad18e7bf3bcf4e81a75946fbdd300",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=f6eee2d098049afd18f90b8f4bb6a5d1a49d900c",
      "patch": "@@ -1024,7 +1024,6 @@ extern const struct language_data opencl_language_data =\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   c_value_print_inner,\t\t/* la_value_print_inner */\n   c_value_print,\t\t/* Print a top-level value */\n-  NULL,\t\t\t\t/* Language specific skip_trampoline */\n   NULL,                         /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */"
    },
    {
      "sha": "777f1ffe217a2c42325769983a354c86ea2cb599",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=f6eee2d098049afd18f90b8f4bb6a5d1a49d900c",
      "patch": "@@ -401,7 +401,6 @@ extern const struct language_data pascal_language_data =\n   pascal_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   pascal_value_print_inner,\t/* la_value_print_inner */\n   pascal_value_print,\t\t/* Print a top-level value */\n-  NULL,\t\t\t\t/* Language specific skip_trampoline */\n   \"this\",\t\t        /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */"
    },
    {
      "sha": "0929daf0511090df9acc46aa5f0cad19e10d2eaf",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f6eee2d098049afd18f90b8f4bb6a5d1a49d900c/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=f6eee2d098049afd18f90b8f4bb6a5d1a49d900c",
      "patch": "@@ -2056,7 +2056,6 @@ extern const struct language_data rust_language_data =\n   rust_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   rust_value_print_inner,\t/* la_value_print_inner */\n   c_value_print,\t\t/* Print a top-level value */\n-  NULL,\t\t\t\t/* Language specific skip_trampoline */\n   NULL,\t\t\t\t/* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   rust_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */"
    }
  ]
}