{
  "sha": "3b3c74341e3a5137eae07f0c95f2704c5f7e686f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2IzYzc0MzQxZTNhNTEzN2VhZTA3ZjBjOTVmMjcwNGM1ZjdlNjg2Zg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-06T17:52:17Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-23T19:38:53Z"
    },
    "message": "gdb.base/setshow.exp: split in procs\n\nSplit in multiple procs, one per topic, and start with a fresh GDB in\neach.  I find it easier to work on a test with multiple smaller\nindependent test procedures.  For example, it's possible to comment all\nbut one when working on one.  It's also easier to add things without\nhaving to think about the impact on existing tests, and vice-versa.\n\nChange-Id: I19691eed8f9bcb975b2eeff7577cac66251bcbe2",
    "tree": {
      "sha": "f90fe490c1c73fdf83ee58f990423ffe388e1996",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f90fe490c1c73fdf83ee58f990423ffe388e1996"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3b3c74341e3a5137eae07f0c95f2704c5f7e686f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3b3c74341e3a5137eae07f0c95f2704c5f7e686f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3b3c74341e3a5137eae07f0c95f2704c5f7e686f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3b3c74341e3a5137eae07f0c95f2704c5f7e686f/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ffb6ba773e0a5ad9884afdc3b8279671c61d5add",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ffb6ba773e0a5ad9884afdc3b8279671c61d5add",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ffb6ba773e0a5ad9884afdc3b8279671c61d5add"
    }
  ],
  "stats": {
    "total": 729,
    "additions": 435,
    "deletions": 294
  },
  "files": [
    {
      "sha": "bfc689b184e510be14efbb62ed6cbe5881fcb44a",
      "filename": "gdb/testsuite/gdb.base/setshow.exp",
      "status": "modified",
      "additions": 435,
      "deletions": 294,
      "changes": 729,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b3c74341e3a5137eae07f0c95f2704c5f7e686f/gdb/testsuite/gdb.base/setshow.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b3c74341e3a5137eae07f0c95f2704c5f7e686f/gdb/testsuite/gdb.base/setshow.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/setshow.exp?ref=3b3c74341e3a5137eae07f0c95f2704c5f7e686f",
      "patch": "@@ -15,6 +15,10 @@\n \n # This file was written by Michael Snyder (msnyder@cygnus.com)\n \n+# Test gdb set and show commands.  The goal here is to verify that parameters\n+# are set and shown correctly, not test whether setting the parameter has the\n+# desired effect.\n+\n \n standard_testfile .c\n \n@@ -23,280 +27,361 @@ if { [gdb_compile ${srcdir}/${subdir}/${srcfile} ${binfile} executable {debug}]\n      return -1\n }\n \n-# Start with a fresh gdb\n+proc_with_prefix test_setshow_annotate {} {\n+    # Start with a fresh gdb\n+    clean_restart $::binfile\n \n-clean_restart ${binfile}\n+    if ![runto_main] then {\n+\tfail \"can't run to main\"\n+\treturn\n+    }\n \n-# make sure $pc is sane, in case we're talking to a board.\n-if ![runto_main] then {\n-    fail \"can't run to main\"\n-    return 0\n-}\n+    #test default annotation_level is 0\n+    gdb_test \"show annotate\" \"Annotation_level is 0..*\"  \"default annotation_level is zero\"\n \n-#\n-# Test gdb set and show commands.\n-# Add tests here for show and set that don't fit neatly elsewhere.\n-# FIXME: many rudimentary tests for set and show commands have been\n-#        added below, but most do nothing more than check that a \n-#        variable has been set successfully, ie. they do not test\n-#        whether setting the variable has had the desired effect.\n-#\n+    #test set annotate 2\n \n-#test default annotation_level is 0\n-gdb_test \"show annotate\" \"Annotation_level is 0..*\"  \"default annotation_level is zero\"\n+    # Here we need to fiddle with prompts.\n+    save_vars { ::gdb_prompt } {\n+\tset old_gdb_prompt $::gdb_prompt\n+\tset ::gdb_prompt \"\\r\\n\\032\\032pre-prompt\\r\\n$::gdb_prompt \\r\\n\\032\\032prompt\\r\\n\"\n \n-#test set annotate 2\n+\tgdb_test_multiple \"set annotate 2\" \"set annotate 2\" {\n+\t    -re \"\\r\\n$::gdb_prompt$\" {\n+\t\tpass \"set annotate 2\"\n+\t    }\n+\t}\n \n-# Here we need to fiddle with prompts.\n-save_vars { gdb_prompt } {\n-    set old_gdb_prompt $gdb_prompt\n-    set gdb_prompt \"\\r\\n\\032\\032pre-prompt\\r\\n$gdb_prompt \\r\\n\\032\\032prompt\\r\\n\"\n+\tgdb_test_multiple \"show annotate\" \"show annotate 2\" {\n+\t    -re \".*\\032\\032post-prompt.*Annotation_level is 2..*\\032\\032pre-prompt.*$old_gdb_prompt .*\\032\\032prompt.*$\" {\n+\t\tpass \"show annotate 2\"\n+\t    }\n+\t}\n \n-    gdb_test_multiple \"set annotate 2\" \"set annotate 2\" {\n-\t-re \"\\r\\n$gdb_prompt$\" {\n-\t    pass \"set annotate 2\"\n+\t#test annotation_level 2\n+\tgdb_test_multiple \"info line 1\" \"annotation_level 2\" {\n+\t    -re \".*\\032\\032post-prompt.*Line 1 of .* is at address .* but contains no code.*:1:0:beg:0x.*\\032\\032pre-prompt.*$old_gdb_prompt .*\\032\\032prompt.*$\" {\n+\t\tpass \"annotation_level 2\"\n+\t    }\n \t}\n     }\n \n-    gdb_test_multiple \"show annotate\" \"show annotate 2\" {\n-\t-re \".*\\032\\032post-prompt.*Annotation_level is 2..*\\032\\032pre-prompt.*$old_gdb_prompt .*\\032\\032prompt.*$\" {\n-\t    pass \"show annotate 2\"\n+    #test set annotate 1\n+    gdb_test \"set annotate 1\" \".*post-prompt.*\"\n+    gdb_test \"show annotate\" \"Annotation_level is 1..*\"  \"show annotate (1)\"\n+    #test annotation_level 1\n+    gdb_test \"info line 1\" \"Line 1 of .* is at address .* but contains no code.*:1:0:beg:0x.*\"  \"annotation_level 1\"\n+    #test set annotate 0\n+    gdb_test_no_output \"set annotate 0\" \"set annotate 0\"\n+    gdb_test \"show annotate\" \"Annotation_level is 0..*\"  \"show annotate (0)\"\n+    #test annotation_level 0\n+    gdb_test \"info line 1\" \"Line 1 of .* is at address .* but contains no code.*\"  \"annotation_level 0\"\n+}\n+\n+proc_with_prefix test_setshow_args {} {\n+    clean_restart $::binfile\n+\n+    if ![runto_main] then {\n+\tfail \"can't run to main\"\n+\treturn\n+    }\n+\n+    gdb_test \"show args\" \"Argument list to give program being debugged when it is started is \\\"\\\"\\.\"\n+    gdb_test \"p \\$_gdb_setting_str(\\\"args\\\")\" \" = \\\"\\\"\"\n+\n+    gdb_test_no_output \"set args ~\"\n+    gdb_test \"show args\" \"Argument list to give program being debugged when it is started is \\\"~\\\"..*\" \\\n+\t\"show args ~\"\n+\n+    #test set args\n+    gdb_test_no_output \"set args foo bar blup baz bubble\" \"set args\"\n+\n+    #test show args\n+    gdb_test \"show args\" \"Argument list to give program being debugged when it is started is \\\"foo bar blup baz bubble\\\"..*\"\n+    gdb_test \"p \\$_gdb_setting(\\\"args\\\")\" \" = \\\"foo bar blup baz bubble\\\"\" \\\n+\t\"_gdb_setting args\"\n+\n+    # Don't test if we can't pass args or if we're using a stub.\n+    if { !$::use_gdb_stub && ![target_info exists noargs] } {\n+\t#test passing args\n+\tgdb_test \"cont\" \"Continuing.*\" \"continuing\"\n+\tdelete_breakpoints\n+\tgdb_test \"run\" \"Starting program:.*foo bar blup baz bubble.*\" \"passing args\"\n+    }\n+}\n+\n+proc_with_prefix test_setshow_check {} {\n+    clean_restart\n+\n+    #test set check range on\n+    # Note: the below might produce a warning, so match anything.\n+    gdb_test \"set check range on\" \"\"\n+\n+    gdb_test \"p \\$_gdb_setting(\\\"check range\\\")\" \" = \\\"on\\\"\" \\\n+\t\"_gdb_setting check range on\"\n+\n+    #test show check range on\n+    gdb_test \"show check range\" \"Range checking is \\\"on\\\"\\..*\" \"show check range (on)\"\n+\n+    #test set check range off with trailing space\n+    gdb_test_no_output \"set check range off \" \"set check range off\"\n+\n+    #test show check range off\n+    gdb_test \"show check range\" \"Range checking is \\\"off\\\"\\..*\" \"show check range (off)\"\n+    gdb_test \"p \\$_gdb_setting(\\\"check range\\\")\" \" = \\\"off\\\"\" \\\n+\t\"_gdb_setting check range off\"\n+\n+    #test set check range auto\n+    gdb_test_no_output \"set check range auto\" \"set check range auto\"\n+\n+    #test show check range auto\n+    gdb_test \"show check range\" \"Range checking is \\\"auto; currently .*\" \"show check range (auto)\"\n+    gdb_test \"p \\$_gdb_setting(\\\"check range\\\")\" \" = \\\"auto\\\"\" \\\n+\t\"_gdb_setting check range auto\"\n+\n+    # Test set check type on\n+    gdb_test_no_output \"set check type on\"\n+\n+    # Test show check type on\n+    gdb_test \"show check type\" \"Strict type checking is on\\..*\" \\\n+\t\"show check type (on)\"\n+    gdb_test \"p \\$_gdb_setting_str(\\\"check type\\\")\" \" = \\\"on\\\"\" \\\n+\t\"_gdb_setting_str check type on\"\n+    gdb_test \"p \\$_gdb_setting(\\\"check type\\\")\" \" = 1\" \\\n+\t\"_gdb_setting check type on 1\"\n+\n+    # Test set check type off with trailing space\n+    gdb_test_no_output \"set check type off \" \"set check type off\"\n+    gdb_test \"p \\$_gdb_setting_str(\\\"check type\\\")\" \" = \\\"off\\\"\" \\\n+\t\"_gdb_setting_str check type off\"\n+    gdb_test \"p \\$_gdb_setting(\\\"check type\\\")\" \" = 0\" \\\n+\t\"_gdb_setting check type off 0\"\n+\n+    # Test show check type off\n+    gdb_test \"show check type\" \"Strict type checking is off\\..*\" \\\n+\t\"show check type (off)\"\n+}\n+\n+proc_with_prefix test_setshow_breakpoint_pending {} {\n+    #test set breakpoint pending\n+\n+    #test set breakpoint pending on\n+    gdb_test_no_output \"set breakpoint pending on\"\n+    gdb_test \"p \\$_gdb_setting_str(\\\"breakpoint pending\\\")\" \" = \\\"on\\\"\" \\\n+\t\"_gdb_setting_str breakpoint pending on\"\n+    gdb_test \"p \\$_gdb_setting(\\\"breakpoint pending\\\")\" \" = 1\" \\\n+\t\"_gdb_setting breakpoint pending 1\"\n+\n+    #test show breakpoint pending on\n+    gdb_test \"show breakpoint pending\" \" is on\\..*\" \"show breakpoint pending on\"\n+\n+    #test show breakpoint pending off\n+    gdb_test_no_output \"set breakpoint pending off\"\n+    gdb_test \"show breakpoint pending\" \" is off\\..*\" \"show breakpoint pending off\"\n+    gdb_test \"p \\$_gdb_setting_str(\\\"breakpoint pending\\\")\" \" = \\\"off\\\"\" \\\n+\t\"_gdb_setting_str breakpoint pending off\"\n+    gdb_test \"p \\$_gdb_setting(\\\"breakpoint pending\\\")\" \" = 0\" \\\n+\t\"_gdb_setting breakpoint pending 0\"\n+\n+    #test set breakpoint pending auto\n+    gdb_test_no_output \"set breakpoint pending auto\"\n+\n+    #test show breakpoint pending auto\n+    gdb_test \"show breakpoint pending\" \" is auto.*\" \"show breakpoint pending auto\"\n+    gdb_test \"p \\$_gdb_setting_str(\\\"breakpoint pending\\\")\" \" = \\\"auto\\\"\" \\\n+\t\"_gdb_setting_str breakpoint pending auto\"\n+    gdb_test \"p \\$_gdb_setting(\\\"breakpoint pending\\\")\" \" = -1\" \\\n+\t\"_gdb_setting breakpoint pending -1\"\n+}\n+\n+proc_with_prefix test_setshow_complaints {} {\n+    clean_restart\n+\n+    #test set complaints 100\n+    gdb_test_no_output \"set complaints 100\" \"set complaints 100\"\n+    #test show complaints 100\n+    gdb_test \"show complaints\" \"Max number of complaints about incorrect symbols is 100..*\" \"show complaints (100)\"\n+    #test set complaints 0\n+    gdb_test_no_output \"set complaints 0\" \"set complaints 0\"\n+    #test show complaints 0\n+    gdb_test \"show complaints\" \"Max number of complaints about incorrect symbols is 0..*\" \"show complaints (0)\"\n+}\n+\n+proc_with_prefix test_setshow_confirm {} {\n+    clean_restart\n+\n+    #test set confirm off\n+    gdb_test_no_output \"set confirm off\" \"set confirm off\"\n+    #test show confirm off\n+    gdb_test \"show confirm\" \"Whether to confirm potentially dangerous operations is off..*\" \"show confirm (off)\"\n+    #test set confirm on\n+    gdb_test_no_output \"set confirm on\" \"set confirm on\"\n+    #test show confirm on\n+    gdb_test \"show confirm\" \"Whether to confirm potentially dangerous operations is on..*\" \"show confirm (on)\"\n+}\n+\n+proc_with_prefix test_setshow_editing {} {\n+    clean_restart\n+\n+    #test set editing off\n+    gdb_test_no_output \"set editing off\" \"set editing off\"\n+\n+    #test show editing off\n+    gdb_test \"show editing\" \"Editing of command lines as they are typed is off..*\" \"show editing (off)\"\n+\n+    #test set editing on\n+    #gdb_test_no_output \"set editing on\" \"set editing on\"\n+\n+    #test show editing on\n+    #gdb_test \"show editing\" \"Editing of command lines as they are typed is on..*\" \"show editing (on)\"\n+}\n+\n+proc_with_prefix test_setshow_environment {} {\n+    clean_restart\n+\n+    #test set environment FOOBARBAZ\n+    gdb_test_no_output \"set environment FOOBARBAZ = grbxgrbxgrbx\" \\\n+\t\"set environment FOOBARBAZ\"\n+\n+    #test show environment FOOBARBAZ\n+    gdb_test \"show environment FOOBARBAZ\" \"FOOBARBAZ = grbxgrbxgrbx.*\"\n+}\n+\n+proc_with_prefix test_setshow_height {} {\n+    clean_restart\n+\n+    #test set height 100\n+    gdb_test_no_output \"set height 100\" \"set height 100\"\n+\n+    #test show height 100\n+    gdb_test \"show height\" \"Number of lines gdb thinks are in a page is 100..*\"\n+    gdb_test \"p \\$_gdb_setting_str(\\\"height\\\")\" \" = \\\"100\\\"\" \\\n+\t\"_gdb_setting_str height 100\"\n+    gdb_test \"p \\$_gdb_setting(\\\"height\\\")\" \" = 100\" \\\n+\t\"_gdb_setting height 100\"\n+\n+    # Back to infinite height to avoid pagers.  While at it, check that\n+    # literal \"unlimited\" works just as well as 0.\n+    gdb_test_no_output \"set height unlimited\"\n+    gdb_test \"p \\$_gdb_setting_str(\\\"height\\\")\" \" = \\\"unlimited\\\"\" \\\n+\t\"_gdb_setting_str height unlimited\"\n+    gdb_test \"p \\$_gdb_setting(\\\"height\\\")\" \" = 0\" \\\n+\t\"_gdb_setting height unlimited\"\n+}\n+\n+proc_with_prefix test_setshow_history {} {\n+    clean_restart\n+\n+    #test set history expansion on\n+    gdb_test_no_output \"set history expansion on\" \"set history expansion on\"\n+\n+    #test show history expansion on\n+    gdb_test \"show history expansion on\" \"History expansion on command input is on.*\" \"show history expansion\"\n+\n+    #get home directory path\n+    set HOME \"\"\n+    set test \"show environment HOME\"\n+    gdb_test_multiple $test $test {\n+\t-re \"\\nHOME = (\\[^\\r\\n\\]*)\\[\\r\\n\\]+$::gdb_prompt $\" {\n+\t    set HOME $expect_out(1,string)\n+\t    pass $test\n \t}\n     }\n \n-    #test annotation_level 2\n-    gdb_test_multiple \"info line 1\" \"annotation_level 2\" {\n-\t-re \".*\\032\\032post-prompt.*Line 1 of .* is at address .* but contains no code.*:1:0:beg:0x.*\\032\\032pre-prompt.*$old_gdb_prompt .*\\032\\032prompt.*$\" {\n-\t    pass \"annotation_level 2\"\n+    #test set history filename ~/foobar.baz\n+    gdb_test_no_output \"set history filename ~/foobar.baz\" \\\n+\t\"set history filename ~/foobar.baz\"\n+\n+    #test show history filename ~/foobar.baz\n+    gdb_test \"show history filename\" \\\n+\t\"The filename in which to record the command history is \\\"[string_to_regexp $HOME]/foobar.baz\\\"..*\" \\\n+\t\"show history filename (~/foobar.baz)\"\n+    gdb_test \"p \\$_gdb_setting(\\\"history filename\\\")\" \\\n+\t\" = \\\"[string_to_regexp $HOME]/foobar.baz\\\"..*\" \\\n+\t\"_gdb_setting history filename\"\n+    gdb_test \"p \\$_gdb_setting_str(\\\"history filename\\\")\" \\\n+\t\" = \\\"[string_to_regexp $HOME]/foobar.baz\\\"..*\" \\\n+\t\"_gdb_setting_str history filename\"\n+\n+    #get current working directory\n+    set PWD \"\"\n+    set test \"show working directory\"\n+    gdb_test_multiple \"pwd\" $test {\n+\t-re \"\\nWorking directory (\\[^\\r\\n\\]*)\\\\.\\[\\r\\n\\]+$::gdb_prompt $\" {\n+\t    set PWD $expect_out(1,string)\n+\t    pass $test\n \t}\n     }\n+\n+    #test set history filename foobar.baz\n+    gdb_test_no_output \"set history filename foobar.baz\" \\\n+\t\"set history filename foobar.baz\"\n+\n+    #test show history filename foobar.baz\n+    gdb_test \"show history filename\" \\\n+\t\"The filename in which to record the command history is \\\"[string_to_regexp $PWD]/foobar.baz\\\"..*\" \\\n+\t\"show history filename (current_directory/foobar.baz)\"\n+\n+    #test set history save on\n+    gdb_test_no_output \"set history save on\" \"set history save on\"\n+\n+    #test show history save on\n+    gdb_test \"show history save\" \"Saving of the history record on exit is on..*\"  \"show history save (on)\"\n+\n+    #history saving should stay disabled\n+    gdb_test_no_output \"set history save off\" \"set history save off\"\n+\n+    #test set history size 100\n+    gdb_test_no_output \"set history size 100\" \"set history size 100\"\n+\n+    #test show history size 100\n+    gdb_test \"show history size\" \"The size of the command history is 100..*\" \"show history size (100)\"\n }\n \n-#test set annotate 1\n-gdb_test \"set annotate 1\" \".*post-prompt.*\"\n-gdb_test \"show annotate\" \"Annotation_level is 1..*\"  \"show annotate (1)\" \n-#test annotation_level 1\n-gdb_test \"info line 1\" \"Line 1 of .* is at address .* but contains no code.*:1:0:beg:0x.*\"  \"annotation_level 1\" \n-#test set annotate 0\n-gdb_test_no_output \"set annotate 0\" \"set annotate 0\" \n-gdb_test \"show annotate\" \"Annotation_level is 0..*\"  \"show annotate (0)\" \n-#test annotation_level 0\n-gdb_test \"info line 1\" \"Line 1 of .* is at address .* but contains no code.*\"  \"annotation_level 0\" \n-\n-gdb_test \"show args\" \"Argument list to give program being debugged when it is started is \\\"\\\"\\.\"\n-gdb_test \"p \\$_gdb_setting_str(\\\"args\\\")\" \" = \\\"\\\"\"\n-\n-gdb_test_no_output \"set args ~\"\n-gdb_test \"show args\" \"Argument list to give program being debugged when it is started is \\\"~\\\"..*\" \\\n-    \"show args ~\"\n-#test set args\n-gdb_test_no_output \"set args foo bar blup baz bubble\" \"set args\" \n-#test show args\n-gdb_test \"show args\" \"Argument list to give program being debugged when it is started is \\\"foo bar blup baz bubble\\\"..*\"\n-gdb_test \"p \\$_gdb_setting(\\\"args\\\")\" \" = \\\"foo bar blup baz bubble\\\"\" \\\n-    \"_gdb_setting args\"\n-\n-\n-# Don't test if we can't pass args or if we're using a stub.\n-if { !$use_gdb_stub && ![target_info exists noargs] } {\n-    #test passing args\n-    gdb_test \"cont\" \"Continuing.*\" \"continuing\"\n-    delete_breakpoints\n-    gdb_test \"run\" \"Starting program:.*foo bar blup baz bubble.*\" \"passing args\"\n+proc_with_prefix test_setshow_language {} {\n+    clean_restart\n+\n+    #test set language asm\n+    gdb_test_no_output \"set language asm\"\n+\n+    #test show language asm\n+    gdb_test \"show language\" \"The current source language is \\\"asm\\\"..*\" \"show language (asm)\"\n+\n+    #test set language rust, with a trailing space\n+    gdb_test_no_output \"set language rust \" \"set language rust\"\n+\n+    #test show language rust\n+    gdb_test \"show language\" \"The current source language is \\\"rust\\\"..*\" \"show language (rust)\"\n+\n+    #test completion for set language.\n+    gdb_test \"complete set language min\" \"set language minimal\" \\\n+      \"complete set language minimal\"\n+\n+    #test set language auto\n+    gdb_test_no_output \"set language auto\" \"set language auto\"\n+\n+    #test show language\n+    gdb_test \"show language\" \"The current source language is \\\"auto.*\\\"..*\" \"show language (auto)\"\n }\n-#test set check range on\n-# Note: the below might produce a warning, so match anything. \n-gdb_test \"set check range on\" \"\"\n-\n-gdb_test \"p \\$_gdb_setting(\\\"check range\\\")\" \" = \\\"on\\\"\" \\\n-    \"_gdb_setting check range on\"\n-#test show check range on\n-gdb_test \"show check range\" \"Range checking is \\\"on\\\"\\..*\" \"show check range (on)\" \n-#test set check range off with trailing space\n-gdb_test_no_output \"set check range off \" \"set check range off\" \n-#test show check range off\n-gdb_test \"show check range\" \"Range checking is \\\"off\\\"\\..*\" \"show check range (off)\" \n-gdb_test \"p \\$_gdb_setting(\\\"check range\\\")\" \" = \\\"off\\\"\" \\\n-    \"_gdb_setting check range off\"\n-#test set check range auto\n-gdb_test_no_output \"set check range auto\" \"set check range auto\" \n-#test show check range auto\n-gdb_test \"show check range\" \"Range checking is \\\"auto; currently .*\" \"show check range (auto)\"\n-gdb_test \"p \\$_gdb_setting(\\\"check range\\\")\" \" = \\\"auto\\\"\" \\\n-    \"_gdb_setting check range auto\"\n-\n-# Test set check type on\n-gdb_test_no_output \"set check type on\"\n-\n-# Test show check type on\n-gdb_test \"show check type\" \"Strict type checking is on\\..*\" \\\n-    \"show check type (on)\"\n-gdb_test \"p \\$_gdb_setting_str(\\\"check type\\\")\" \" = \\\"on\\\"\" \\\n-    \"_gdb_setting_str check type on\"\n-gdb_test \"p \\$_gdb_setting(\\\"check type\\\")\" \" = 1\" \\\n-    \"_gdb_setting check type on 1\"\n-\n-# Test set check type off with trailing space\n-gdb_test_no_output \"set check type off \" \"set check type off\"\n-gdb_test \"p \\$_gdb_setting_str(\\\"check type\\\")\" \" = \\\"off\\\"\" \\\n-    \"_gdb_setting_str check type off\"\n-gdb_test \"p \\$_gdb_setting(\\\"check type\\\")\" \" = 0\" \\\n-    \"_gdb_setting check type off 0\"\n-\n-# Test show check type off\n-gdb_test \"show check type\" \"Strict type checking is off\\..*\" \\\n-    \"show check type (off)\"\n-\n-#test set breakpoint pending\n-\n-#test set breakpoint pending on\n-gdb_test_no_output \"set breakpoint pending on\"\n-gdb_test \"p \\$_gdb_setting_str(\\\"breakpoint pending\\\")\" \" = \\\"on\\\"\" \\\n-    \"_gdb_setting_str breakpoint pending on\"\n-gdb_test \"p \\$_gdb_setting(\\\"breakpoint pending\\\")\" \" = 1\" \\\n-    \"_gdb_setting breakpoint pending 1\"\n-\n-#test show breakpoint pending on\n-gdb_test \"show breakpoint pending\" \" is on\\..*\" \"show breakpoint pending on\"\n-\n-#test show breakpoint pending off\n-gdb_test_no_output \"set breakpoint pending off\"\n-gdb_test \"show breakpoint pending\" \" is off\\..*\" \"show breakpoint pending off\"\n-gdb_test \"p \\$_gdb_setting_str(\\\"breakpoint pending\\\")\" \" = \\\"off\\\"\" \\\n-    \"_gdb_setting_str breakpoint pending off\"\n-gdb_test \"p \\$_gdb_setting(\\\"breakpoint pending\\\")\" \" = 0\" \\\n-    \"_gdb_setting breakpoint pending 0\"\n-\n-#test set breakpoint pending auto\n-gdb_test_no_output \"set breakpoint pending auto\"\n-\n-#test show breakpoint pending auto\n-gdb_test \"show breakpoint pending\" \" is auto.*\" \"show breakpoint pending auto\"\n-gdb_test \"p \\$_gdb_setting_str(\\\"breakpoint pending\\\")\" \" = \\\"auto\\\"\" \\\n-    \"_gdb_setting_str breakpoint pending auto\"\n-gdb_test \"p \\$_gdb_setting(\\\"breakpoint pending\\\")\" \" = -1\" \\\n-    \"_gdb_setting breakpoint pending -1\"\n-\n-\n-\n-#test set complaints 100\n-gdb_test_no_output \"set complaints 100\" \"set complaints 100\" \n-#test show complaints 100\n-gdb_test \"show complaints\" \"Max number of complaints about incorrect symbols is 100..*\" \"show complaints (100)\" \n-#test set complaints 0\n-gdb_test_no_output \"set complaints 0\" \"set complaints 0\" \n-#test show complaints 0\n-gdb_test \"show complaints\" \"Max number of complaints about incorrect symbols is 0..*\" \"show complaints (0)\" \n-#test set confirm off\n-gdb_test_no_output \"set confirm off\" \"set confirm off\" \n-#test show confirm off\n-gdb_test \"show confirm\" \"Whether to confirm potentially dangerous operations is off..*\" \"show confirm (off)\" \n-#test set confirm on\n-gdb_test_no_output \"set confirm on\" \"set confirm on\" \n-#test show confirm on\n-gdb_test \"show confirm\" \"Whether to confirm potentially dangerous operations is on..*\" \"show confirm (on)\" \n-#test set editing off\n-gdb_test_no_output \"set editing off\" \"set editing off\" \n-#test show editing off\n-gdb_test \"show editing\" \"Editing of command lines as they are typed is off..*\" \"show editing (off)\" \n-#test set editing on\n-#gdb_test_no_output \"set editing on\" \"set editing on\" \n-#test show editing on\n-#gdb_test \"show editing\" \"Editing of command lines as they are typed is on..*\" \"show editing (on)\" \n-#test set environment FOOBARBAZ\n-gdb_test_no_output \"set environment FOOBARBAZ = grbxgrbxgrbx\" \\\n-    \"set environment FOOBARBAZ\" \n-#test show environment FOOBARBAZ\n-gdb_test \"show environment FOOBARBAZ\" \"FOOBARBAZ = grbxgrbxgrbx.*\"\n-#test set height 100\n-gdb_test_no_output \"set height 100\" \"set height 100\" \n-#test show height 100\n-gdb_test \"show height\" \"Number of lines gdb thinks are in a page is 100..*\"\n-gdb_test \"p \\$_gdb_setting_str(\\\"height\\\")\" \" = \\\"100\\\"\" \\\n-    \"_gdb_setting_str height 100\"\n-gdb_test \"p \\$_gdb_setting(\\\"height\\\")\" \" = 100\" \\\n-    \"_gdb_setting height 100\"\n-# Back to infinite height to avoid pagers.  While at it, check that\n-# literal \"unlimited\" works just as well as 0.\n-gdb_test_no_output \"set height unlimited\"\n-gdb_test \"p \\$_gdb_setting_str(\\\"height\\\")\" \" = \\\"unlimited\\\"\" \\\n-    \"_gdb_setting_str height unlimited\"\n-gdb_test \"p \\$_gdb_setting(\\\"height\\\")\" \" = 0\" \\\n-    \"_gdb_setting height unlimited\"\n-#test set history expansion on\n-gdb_test_no_output \"set history expansion on\" \"set history expansion on\" \n-#test show history expansion on\n-gdb_test \"show history expansion on\" \"History expansion on command input is on.*\" \"show history expansion\" \n-#get home directory path\n-set HOME \"\"\n-set test \"show environment HOME\"\n-gdb_test_multiple $test $test {\n-    -re \"\\nHOME = (\\[^\\r\\n\\]*)\\[\\r\\n\\]+$gdb_prompt $\" {\n-        set HOME $expect_out(1,string)\n-        pass $test\n-    }\n+\n+proc_with_prefix test_setshow_listsize {} {\n+    clean_restart\n+\n+    #test set listsize 100\n+    gdb_test_no_output \"set listsize 100\" \"set listsize 100\"\n+\n+    #test show listsize 100\n+    gdb_test \"show listsize\" \"Number of source lines gdb will list by default is 100..*\" \"show listsize (100)\"\n }\n-#test set history filename ~/foobar.baz\n-gdb_test_no_output \"set history filename ~/foobar.baz\" \\\n-    \"set history filename ~/foobar.baz\"\n-#test show history filename ~/foobar.baz\n-gdb_test \"show history filename\" \\\n-    \"The filename in which to record the command history is \\\"[string_to_regexp $HOME]/foobar.baz\\\"..*\" \\\n-    \"show history filename (~/foobar.baz)\"\n-gdb_test \"p \\$_gdb_setting(\\\"history filename\\\")\" \\\n-    \" = \\\"[string_to_regexp $HOME]/foobar.baz\\\"..*\" \\\n-    \"_gdb_setting history filename\"\n-gdb_test \"p \\$_gdb_setting_str(\\\"history filename\\\")\" \\\n-    \" = \\\"[string_to_regexp $HOME]/foobar.baz\\\"..*\" \\\n-    \"_gdb_setting_str history filename\"\n-#get current working directory\n-set PWD \"\"\n-set test \"show working directory\"\n-gdb_test_multiple \"pwd\" $test {\n-    -re \"\\nWorking directory (\\[^\\r\\n\\]*)\\\\.\\[\\r\\n\\]+$gdb_prompt $\" {\n-        set PWD $expect_out(1,string)\n-        pass $test\n+\n+proc_with_prefix test_setshow_prompt {} {\n+    clean_restart\n+\n+    if [board_info target exists gdb_prompt] {\n+\treturn\n     }\n-}\n-#test set history filename foobar.baz\n-gdb_test_no_output \"set history filename foobar.baz\" \\\n-    \"set history filename foobar.baz\"\n-#test show history filename foobar.baz\n-gdb_test \"show history filename\" \\\n-    \"The filename in which to record the command history is \\\"[string_to_regexp $PWD]/foobar.baz\\\"..*\" \\\n-    \"show history filename (current_directory/foobar.baz)\"\n-#test set history save on\n-gdb_test_no_output \"set history save on\" \"set history save on\" \n-#test show history save on\n-gdb_test \"show history save\" \"Saving of the history record on exit is on..*\"  \"show history save (on)\" \n-#history saving should stay disabled\n-gdb_test_no_output \"set history save off\" \"set history save off\" \n-#test set history size 100\n-gdb_test_no_output \"set history size 100\" \"set history size 100\" \n-#test show history size 100\n-gdb_test \"show history size\" \"The size of the command history is 100..*\" \"show history size (100)\" \n-#test set language asm\n-gdb_test_no_output \"set language asm\"\n-#test show language asm\n-gdb_test \"show language\" \"The current source language is \\\"asm\\\"..*\" \"show language (asm)\" \n-#test set language rust, with a trailing space\n-gdb_test_no_output \"set language rust \" \"set language rust\"\n-#test show language rust\n-gdb_test \"show language\" \"The current source language is \\\"rust\\\"..*\" \"show language (rust)\" \n-#test completion for set language.\n-gdb_test \"complete set language min\" \"set language minimal\" \\\n-  \"complete set language minimal\"\n-#test set language auto\n-gdb_test_no_output \"set language auto\" \"set language auto\" \n-#test show language\n-gdb_test \"show language\" \"The current source language is \\\"auto.*\\\"..*\" \"show language (auto)\" \n-#test set listsize 100\n-gdb_test_no_output \"set listsize 100\" \"set listsize 100\" \n-#test show listsize 100\n-gdb_test \"show listsize\" \"Number of source lines gdb will list by default is 100..*\" \"show listsize (100)\" \n-\n-if ![board_info target exists gdb_prompt] {\n-    #test set prompt (FooBarBaz) \n+\n+    #test set prompt (FooBarBaz)\n     set newprompt \"\\\\(FooBarBaz\\\\)\"\n \n     gdb_test_multiple \"set prompt (FooBarBaz) \" \"set prompt FooBarBaz\" {\n@@ -305,57 +390,113 @@ if ![board_info target exists gdb_prompt] {\n \t}\n     }\n \n-    #test show prompt (FooBarBaz) \n-\n+    #test show prompt (FooBarBaz)\n     gdb_test_multiple \"show prompt\" \"show prompt FooBarBaz\" {\n \t-re \"Gdb's prompt is \\\"$newprompt \\\"..* $\" {\n \t    pass \"show prompt FooBarBaz\"\n \t}\n     }\n \n-    #test set prompt (gdb) \n-\n+    #test set prompt (gdb)\n     gdb_test_multiple \"set prompt (gdb) \" \"set prompt gdb\" {\n-\t-re \"\\[\\r\\n\\]$gdb_prompt $\" {\n+\t-re \"\\[\\r\\n\\]$::gdb_prompt $\" {\n \t    pass \"set prompt gdb\"\n \t}\n     }\n }\n \n-#test set radix 11\n-gdb_test \"set radix 11\" \"Unsupported output radix ``decimal 11''; output radix unchanged..*\"\n-#test set radix 16\n-gdb_test \"set radix 16\" \"Input and output radices now set to decimal 16, hex 10, octal 20..*\"\n-#test show radix 16\n-gdb_test \"show radix\" \"Input and output radices set to decimal 16, hex 10, octal 20..*\"  \"show radix (16)\" \n-#test set radix 10\n-gdb_test \"set radix\" \"Input and output radices now set to decimal 10, hex a, octal 12..*\"  \"set radix 10\" \n-#test show radix 10\n-gdb_test \"show radix\" \"Input and output radices set to decimal 10, hex a, octal 12..*\" \"show radix (10)\" \n-#test set width 90\n-gdb_test_no_output \"set width 90\" \"set width 90\"\n-#test show width 90\n-gdb_test \"show width\" \"Number of characters gdb thinks are in a line is 90..*\" \"show width (90)\" \n-#test set write on\n-# This is only supported on targets which use exec.o.\n-gdb_test_no_output \"set write on\" \"set write on\" \n-#test show write on\n-# This is only supported on targets which use exec.o.\n-gdb_test \"show write\" \"Writing into executable and core files is on..*\" \"show write (on)\" \n-#test show user\n-gdb_test_no_output \"show user\" \"show user\" \n-#test set verbose on\n-gdb_test_no_output \"set verbose on\" \"set verbose on\" \n-#test show verbose on\n-gdb_test \"show verbose\" \"Verbose printing of informational messages is on..*\" \"show verbose (on)\" \n-#test set verbose off\n-gdb_test_no_output \"set verbose off\" \"set verbose off\" \n-#test show verbose off\n-gdb_test \"show verbose\" \"Verbosity is off..*\" \"show verbose (off)\" \n-#test argument must be preceded by space\n-foreach x {\"history file\" \"solib-search-path\" \"data-directory\"} {\n-    foreach y {\"/home/\" \"~/home\" \"=home\"} {\n-        gdb_test \"set $x$y\" \"Argument must be preceded by space.\" \\\n-            \"$x is not set to $y\"\n+proc_with_prefix test_setshow_radix {} {\n+    clean_restart\n+\n+    #test set radix 11\n+    gdb_test \"set radix 11\" \"Unsupported output radix ``decimal 11''; output radix unchanged..*\"\n+\n+    #test set radix 16\n+    gdb_test \"set radix 16\" \"Input and output radices now set to decimal 16, hex 10, octal 20..*\"\n+\n+    #test show radix 16\n+    gdb_test \"show radix\" \"Input and output radices set to decimal 16, hex 10, octal 20..*\"  \"show radix (16)\"\n+\n+    #test set radix 10\n+    gdb_test \"set radix\" \"Input and output radices now set to decimal 10, hex a, octal 12..*\"  \"set radix 10\"\n+\n+    #test show radix 10\n+    gdb_test \"show radix\" \"Input and output radices set to decimal 10, hex a, octal 12..*\" \"show radix (10)\"\n+}\n+\n+proc_with_prefix test_setshow_width {} {\n+    clean_restart\n+\n+    #test set width 90\n+    gdb_test_no_output \"set width 90\" \"set width 90\"\n+\n+    #test show width 90\n+    gdb_test \"show width\" \"Number of characters gdb thinks are in a line is 90..*\" \"show width (90)\"\n+}\n+\n+proc_with_prefix test_setshow_write {} {\n+    clean_restart\n+\n+    #test set write on\n+    # This is only supported on targets which use exec.o.\n+    gdb_test_no_output \"set write on\" \"set write on\"\n+\n+    #test show write on\n+    # This is only supported on targets which use exec.o.\n+    gdb_test \"show write\" \"Writing into executable and core files is on..*\" \"show write (on)\"\n+}\n+\n+proc_with_prefix test_show_user {} {\n+    clean_restart\n+\n+    #test show user\n+    gdb_test_no_output \"show user\" \"show user\"\n+}\n+\n+proc_with_prefix test_setshow_verbose {} {\n+    clean_restart\n+\n+    #test set verbose on\n+    gdb_test_no_output \"set verbose on\" \"set verbose on\"\n+\n+    #test show verbose on\n+    gdb_test \"show verbose\" \"Verbose printing of informational messages is on..*\" \"show verbose (on)\"\n+\n+    #test set verbose off\n+    gdb_test_no_output \"set verbose off\" \"set verbose off\"\n+\n+    #test show verbose off\n+    gdb_test \"show verbose\" \"Verbosity is off..*\" \"show verbose (off)\"\n+}\n+\n+proc_with_prefix test_argument_preceded_by_space {} {\n+    clean_restart\n+\n+    #test argument must be preceded by space\n+    foreach x {\"history file\" \"solib-search-path\" \"data-directory\"} {\n+\tforeach y {\"/home/\" \"~/home\" \"=home\"} {\n+\t    gdb_test \"set $x$y\" \"Argument must be preceded by space.\" \\\n+\t\t\"$x is not set to $y\"\n+\t}\n     }\n }\n+\n+test_setshow_annotate\n+test_setshow_args\n+test_setshow_check\n+test_setshow_breakpoint_pending\n+test_setshow_complaints\n+test_setshow_confirm\n+test_setshow_editing\n+test_setshow_environment\n+test_setshow_height\n+test_setshow_history\n+test_setshow_language\n+test_setshow_listsize\n+test_setshow_prompt\n+test_setshow_radix\n+test_setshow_width\n+test_setshow_write\n+test_show_user\n+test_setshow_verbose\n+test_argument_preceded_by_space"
    }
  ]
}