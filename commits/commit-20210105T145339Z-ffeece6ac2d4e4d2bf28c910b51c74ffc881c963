{
  "sha": "ffeece6ac2d4e4d2bf28c910b51c74ffc881c963",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmZlZWNlNmFjMmQ0ZTRkMmJmMjhjOTEwYjUxYzc0ZmZjODgxYzk2Mw==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-01-05T13:25:56Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-01-05T14:53:39Z"
    },
    "message": "libctf, ld: prohibit getting the size or alignment of forwards\n\nC allows you to do only a very few things with entities of incomplete\ntype (as opposed to pointers to them): make pointers to them and give\nthem cv-quals, roughly. In particular you can't sizeof them and you\ncan't get their alignment.\n\nWe cannot impose all the requirements the standard imposes on CTF users,\nbecause the deduplicator can transform any structure type into a forward\nfor the purposes of breaking cycles: so CTF type graphs can easily\ncontain things like arrays of forward type (if you want to figure out\ntheir size or alignment, you need to chase down the types this forward\nmight be a forward to in child TU dicts: we will soon add API functions\nto make doing this much easier).\n\nNonetheless, it is still meaningless to ask for the size or alignment of\nforwards: but libctf didn't prohibit this and returned nonsense from\ninternal implementation details when you asked (it returned the kind of\nthe pointed-to type as both the size and alignment, because forwards\nreuse ctt_type as a type kind, and ctt_type and ctt_size overlap).  So\nintroduce a new error, ECTF_INCOMPLETE, which is returned when you try\nto get the size or alignment of forwards: we also return it when you try\nto do things that require libctf itself to get the size or alignment of\na forward, notably using a forward as an array index type (which C\nshould never do in any case) or adding forwards to structures without\nspecifying their offset explicitly.\n\nThe dumper will not emit size or alignment info for forwards any more.\n\n(This should not be an API break since ctf_type_size and ctf_type_align\ncould both return errors before now: any code that isn't expecting error\nreturns is already potentially broken.)\n\ninclude/ChangeLog\n2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* ctf-api.h (ECTF_INCOMPLETE): New.\n\t(ECTF_NERR): Adjust.\n\nld/ChangeLog\n2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* testsuite/ld-ctf/conflicting-cycle-1.parent.d: Adjust for dumper\n\tchanges.\n\t* testsuite/ld-ctf/cross-tu-cyclic-conflicting.d: Likewise.\n\t* testsuite/ld-ctf/forward.c: New test...\n\t* testsuite/ld-ctf/forward.d: ... and results.\n\nlibctf/ChangeLog\n2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* ctf-types.c (ctf_type_resolve): Improve comment.\n\t(ctf_type_size): Yield ECTF_INCOMPLETE when applied to forwards.\n\tEmit errors into the right dict.\n\t(ctf_type_align): Likewise.\n\t* ctf-create.c (ctf_add_member_offset): Yield ECTF_INCOMPLETE\n\twhen adding a member without explicit offset when this member, or\n\tthe previous member, is incomplete.\n\t* ctf-dump.c (ctf_dump_format_type): Do not try to print the size of\n\tforwards.\n\t(ctf_dump_member): Do not try to print their alignment.",
    "tree": {
      "sha": "dbb61a523d3289f68a024ed1c84a4290d75b364b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/dbb61a523d3289f68a024ed1c84a4290d75b364b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/91e7ce2fd7b82f3982b453d1c6f4576621bc1c2d"
    }
  ],
  "stats": {
    "total": 159,
    "additions": 135,
    "deletions": 24
  },
  "files": [
    {
      "sha": "1b56987ea9b57735aa40d01913c6266b48f66b0c",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=ffeece6ac2d4e4d2bf28c910b51c74ffc881c963",
      "patch": "@@ -1,3 +1,8 @@\n+2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-api.h (ECTF_INCOMPLETE): New.\n+\t(ECTF_NERR): Adjust.\n+\n 2021-01-01  Nicolas Boulenguez  <nicolas@debian.org>\n \n \t* coff/internal.h: Correct comment spelling."
    },
    {
      "sha": "b3cfd391506badcfb5460eb0b58b6637cc6037db",
      "filename": "include/ctf-api.h",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/include/ctf-api.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/include/ctf-api.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ctf-api.h?ref=ffeece6ac2d4e4d2bf28c910b51c74ffc881c963",
      "patch": "@@ -230,7 +230,8 @@ typedef struct ctf_snapshot_id\n   _CTF_ITEM (ECTF_NEXT_WRONGFUN, \"Wrong iteration function called.\") \\\n   _CTF_ITEM (ECTF_NEXT_WRONGFP, \"Iteration entity changed in mid-iterate.\") \\\n   _CTF_ITEM (ECTF_FLAGS, \"CTF header contains flags unknown to libctf.\") \\\n-  _CTF_ITEM (ECTF_NEEDSBFD, \"This feature needs a libctf with BFD support.\")\n+  _CTF_ITEM (ECTF_NEEDSBFD, \"This feature needs a libctf with BFD support.\") \\\n+  _CTF_ITEM (ECTF_INCOMPLETE, \"Type is not a complete type.\")\n \n #define\tECTF_BASE\t1000\t/* Base value for libctf errnos.  */\n \n@@ -243,7 +244,7 @@ _CTF_ERRORS\n #undef _CTF_FIRST\n   };\n \n-#define ECTF_NERR (ECTF_NEEDSBFD - ECTF_BASE + 1) /* Count of CTF errors.  */\n+#define ECTF_NERR (ECTF_INCOMPLETE - ECTF_BASE + 1) /* Count of CTF errors.  */\n \n /* The CTF data model is inferred to be the caller's data model or the data\n    model of the given object, unless ctf_setmodel is explicitly called.  */"
    },
    {
      "sha": "1497fc40e702a9acbfc93b19e90c148130a1d718",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=ffeece6ac2d4e4d2bf28c910b51c74ffc881c963",
      "patch": "@@ -1,3 +1,11 @@\n+2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* testsuite/ld-ctf/conflicting-cycle-1.parent.d: Adjust for dumper\n+\tchanges.\n+\t* testsuite/ld-ctf/cross-tu-cyclic-conflicting.d: Likewise.\n+\t* testsuite/ld-ctf/forward.c: New test...\n+\t* testsuite/ld-ctf/forward.d: ... and results.\n+\n 2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* testsuite/ld-ctf/array.d: Adjust for dumper changes."
    },
    {
      "sha": "5da66fda14c99371b59720ee68c1c7ef785776c8",
      "filename": "ld/testsuite/ld-ctf/conflicting-cycle-1.parent.d",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/ld/testsuite/ld-ctf/conflicting-cycle-1.parent.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/ld/testsuite/ld-ctf/conflicting-cycle-1.parent.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/conflicting-cycle-1.parent.d?ref=ffeece6ac2d4e4d2bf28c910b51c74ffc881c963",
      "patch": "@@ -29,8 +29,8 @@ Contents of CTF section .ctf:\n #...\n   Types:\n #...\n-     0x[0-9a-f]*: struct B \\(.*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 9\\) struct B \\(.*\n+     0x[0-9a-f]*: struct B\n+           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 9\\) struct B\n #...\n CTF archive member: .*:\n #..."
    },
    {
      "sha": "eff295edd308612f010aac9e478da1d740879d57",
      "filename": "ld/testsuite/ld-ctf/cross-tu-cyclic-conflicting.d",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/ld/testsuite/ld-ctf/cross-tu-cyclic-conflicting.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/ld/testsuite/ld-ctf/cross-tu-cyclic-conflicting.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/cross-tu-cyclic-conflicting.d?ref=ffeece6ac2d4e4d2bf28c910b51c74ffc881c963",
      "patch": "@@ -23,8 +23,8 @@ Contents of CTF section \\.ctf:\n      0x[0-9a-f]*: int \\[0x0:0x[0-9a-f]*\\] \\(size 0x[0-9a-f]*\\)\n            *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 1\\) int:[0-9]* \\(aligned at 0x[0-9a-f]*, format 0x1, offset:bits 0x0:0x[0-9a-f]*\\)\n #...\n-     0x[0-9a-f]*: struct A .*\n-           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 9\\) struct A .*\n+     0x[0-9a-f]*: struct A\n+           *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 9\\) struct A\n #...\n      0x[0-9a-f]*: struct C .*\n            *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 6\\) struct C .*"
    },
    {
      "sha": "e41a7aececaf8dd6401e53303a13def3fad3c75d",
      "filename": "ld/testsuite/ld-ctf/forward.c",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/ld/testsuite/ld-ctf/forward.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/ld/testsuite/ld-ctf/forward.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/forward.c?ref=ffeece6ac2d4e4d2bf28c910b51c74ffc881c963",
      "patch": "@@ -0,0 +1,2 @@\n+struct foo;\n+struct foo *bar __attribute__((used));"
    },
    {
      "sha": "9ff0dd2ba73e7e72b518cbbe83d52058671e25d1",
      "filename": "ld/testsuite/ld-ctf/forward.d",
      "status": "added",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/ld/testsuite/ld-ctf/forward.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/ld/testsuite/ld-ctf/forward.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-ctf/forward.d?ref=ffeece6ac2d4e4d2bf28c910b51c74ffc881c963",
      "patch": "@@ -0,0 +1,23 @@\n+#as:\n+#source: forward.c\n+#objdump: --ctf=.ctf\n+#ld: -shared\n+#name: Forwards\n+\n+.*: +file format .*\n+\n+Contents of CTF section .ctf:\n+\n+  Header:\n+    Magic number: 0xdff2\n+    Version: 4 \\(CTF_VERSION_3\\)\n+#...\n+    Type section:\t.* \\(0x18 bytes\\)\n+#...\n+  Types:\n+\n+     0x[0-9a-f]: struct foo\n+          *\\[0x0\\] \\(ID 0x[0-9a-f]*\\) \\(kind 9\\) struct foo\n+     0x[0-9a-f]: struct foo \\* \\(size 0x[0-9a-f]*\\) -> 0x[0-9a-f]: struct foo\n+          *\\[0x0\\] \\(ID 0x[0-9a-f]\\) \\(kind 3\\) struct foo \\* \\(aligned at 0x[0-9a-f]*\\)\n+#..."
    },
    {
      "sha": "b9142541063d4a617128bde7a441fd3540f0de90",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=ffeece6ac2d4e4d2bf28c910b51c74ffc881c963",
      "patch": "@@ -1,3 +1,16 @@\n+2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-types.c (ctf_type_resolve): Improve comment.\n+\t(ctf_type_size): Yield ECTF_INCOMPLETE when applied to forwards.\n+\tEmit errors into the right dict.\n+\t(ctf_type_align): Likewise.\n+\t* ctf-create.c (ctf_add_member_offset): Yield ECTF_INCOMPLETE\n+\twhen adding a member without explicit offset when this member, or\n+\tthe previous member, is incomplete.\n+\t* ctf-dump.c (ctf_dump_format_type): Do not try to print the size of\n+\tforwards.\n+\t(ctf_dump_member): Do not try to print their alignment.\n+\n 2021-01-05  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-dump.c (ctf_dump_objts): Dump by calling ctf_dump_format_type."
    },
    {
      "sha": "6fe7461c527854d97db0f6cb1ccc8c0f1946813a",
      "filename": "libctf/ctf-create.c",
      "status": "modified",
      "additions": 43,
      "deletions": 7,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/libctf/ctf-create.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/libctf/ctf-create.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-create.c?ref=ffeece6ac2d4e4d2bf28c910b51c74ffc881c963",
      "patch": "@@ -1690,6 +1690,14 @@ ctf_add_array (ctf_dict_t *fp, uint32_t flag, const ctf_arinfo_t *arp)\n   if (ctf_lookup_by_id (&tmp, arp->ctr_index) == NULL)\n     return CTF_ERR;\t\t/* errno is set for us.  */\n \n+  if (ctf_type_kind (fp, arp->ctr_index) == CTF_K_FORWARD)\n+    {\n+      ctf_err_warn (fp, 1, ECTF_INCOMPLETE,\n+\t\t    _(\"ctf_add_array: index type %lx is incomplete\"),\n+\t\t    arp->ctr_contents);\n+      return (ctf_set_errno (fp, ECTF_INCOMPLETE));\n+    }\n+\n   if ((type = ctf_add_generic (fp, flag, NULL, CTF_K_ARRAY, &dtd)) == CTF_ERR)\n     return CTF_ERR;\t\t/* errno is set for us.  */\n \n@@ -2040,6 +2048,7 @@ ctf_add_member_offset (ctf_dict_t *fp, ctf_id_t souid, const char *name,\n   ssize_t msize, malign, ssize;\n   uint32_t kind, vlen, root;\n   char *s = NULL;\n+  int is_incomplete = 0;\n \n   if (!(fp->ctf_flags & LCTF_RDWR))\n     return (ctf_set_errno (fp, ECTF_RDONLY));\n@@ -2075,14 +2084,19 @@ ctf_add_member_offset (ctf_dict_t *fp, ctf_id_t souid, const char *name,\n     {\n       /* The unimplemented type, and any type that resolves to it, has no size\n \t and no alignment: it can correspond to any number of compiler-inserted\n-\t types.  */\n-\n+\t types.  We allow incomplete types through since they are routinely\n+\t added to the ends of structures, and can even be added elsewhere in\n+\t structures by the deduplicator.  They are assumed to be zero-size with\n+\t no alignment: this is often wrong, but problems can be avoided in this\n+\t case by explicitly specifying the size of the structure via the _sized\n+\t functions.  The deduplicator always does this.  */\n+\n+      msize = 0;\n+      malign = 0;\n       if (ctf_errno (fp) == ECTF_NONREPRESENTABLE)\n-\t{\n-\t  msize = 0;\n-\t  malign = 0;\n-\t  ctf_set_errno (fp, 0);\n-\t}\n+\tctf_set_errno (fp, 0);\n+      else if (ctf_errno (fp) == ECTF_INCOMPLETE)\n+\tis_incomplete = 1;\n       else\n \treturn -1;\t\t/* errno is set for us.  */\n     }\n@@ -2123,10 +2137,32 @@ ctf_add_member_offset (ctf_dict_t *fp, ctf_id_t souid, const char *name,\n \t      return -1;\t/* errno is set for us.  */\n \t    }\n \n+\t  if (is_incomplete)\n+\t    {\n+\t      ctf_err_warn (fp, 1, ECTF_INCOMPLETE,\n+\t\t\t    _(\"ctf_add_member_offset: cannot add member %s of \"\n+\t\t\t      \"incomplete type %lx to struct %lx without \"\n+\t\t\t      \"specifying explicit offset\\n\"),\n+\t\t\t    name ? name : _(\"(unnamed member)\"), type, souid);\n+\t      return (ctf_set_errno (fp, ECTF_INCOMPLETE));\n+\t    }\n+\n \t  if (ctf_type_encoding (fp, ltype, &linfo) == 0)\n \t    off += linfo.cte_bits;\n \t  else if ((lsize = ctf_type_size (fp, ltype)) > 0)\n \t    off += lsize * CHAR_BIT;\n+\t  else if (lsize == -1 && ctf_errno (fp) == ECTF_INCOMPLETE)\n+\t    {\n+\t      ctf_err_warn (fp, 1, ECTF_INCOMPLETE,\n+\t\t\t    _(\"ctf_add_member_offset: cannot add member %s of \"\n+\t\t\t      \"type %lx to struct %lx without specifying \"\n+\t\t\t      \"explicit offset after member %s of type %lx, \"\n+\t\t\t      \"which is an incomplete type\\n\"),\n+\t\t\t    name ? name : _(\"(unnamed member)\"), type, souid,\n+\t\t\t    lmd->dmd_name ? lmd->dmd_name\n+\t\t\t    : _(\"(unnamed member)\"), ltype);\n+\t      return -1;\t\t\t/* errno is set for us.  */\n+\t    }\n \n \t  /* Round up the offset of the end of the last member to\n \t     the next byte boundary, convert 'off' to bytes, and"
    },
    {
      "sha": "abed48310f6c70c2a7ac28853655e92fa698198a",
      "filename": "libctf/ctf-dump.c",
      "status": "modified",
      "additions": 14,
      "deletions": 3,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/libctf/ctf-dump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/libctf/ctf-dump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-dump.c?ref=ffeece6ac2d4e4d2bf28c910b51c74ffc881c963",
      "patch": "@@ -151,7 +151,7 @@ ctf_dump_format_type (ctf_dict_t *fp, ctf_id_t id, int flag)\n       free (bit);\n       bit = NULL;\n \n-      if (kind != CTF_K_FUNCTION)\n+      if (kind != CTF_K_FUNCTION && kind != CTF_K_FORWARD)\n \tif (asprintf (&bit, \" (size 0x%lx)%s\",\n \t\t      (unsigned long) ctf_type_size (fp, id),\n \t\t      nonroot_trailer) < 0)\n@@ -476,6 +476,7 @@ ctf_dump_member (const char *name, ctf_id_t id, unsigned long offset,\n   char *bit = NULL;\n   ctf_encoding_t ep;\n   int has_encoding = 0;\n+  int opened_paren = 0;\n \n   /* Align neatly.  */\n \n@@ -520,15 +521,24 @@ ctf_dump_member (const char *name, ctf_id_t id, unsigned long offset,\n \t\t    ep.cte_bits, (unsigned long) ctf_type_align (state->cdm_fp,\n \t\t\t\t\t\t\t\t id)) < 0)\n \tgoto oom;\n+      opened_paren = 1;\n     }\n-  else\n+  else if (ctf_type_kind (state->cdm_fp, id) != CTF_K_FORWARD)\n     {\n       if (asprintf (&bit, \"[0x%lx] (ID 0x%lx) (kind %i) %s%s%s \"\n \t\t    \"(aligned at 0x%lx\", offset, id,\n \t\t    ctf_type_kind (state->cdm_fp, id), typestr,\n \t\t    (name[0] != 0 && typestr[0] != 0) ? \" \" : \"\", name,\n \t\t    (unsigned long) ctf_type_align (state->cdm_fp, id)) < 0)\n \tgoto oom;\n+      opened_paren = 1;\n+    }\n+  else /* Forwards have no alignment.  */\n+    {\n+      if (asprintf (&bit, \"[0x%lx] (ID 0x%lx) (kind %i) %s%s%s\\n\", offset, id,\n+\t\t    ctf_type_kind (state->cdm_fp, id), typestr,\n+\t\t    (name[0] != 0 && typestr[0] != 0) ? \" \" : \"\", name) < 0)\n+\tgoto oom;\n     }\n \n   *state->cdm_str = str_append (*state->cdm_str, bit);\n@@ -547,7 +557,8 @@ ctf_dump_member (const char *name, ctf_id_t id, unsigned long offset,\n       bit = NULL;\n     }\n \n-  *state->cdm_str = str_append (*state->cdm_str, \")\\n\");\n+  if (opened_paren)\n+    *state->cdm_str = str_append (*state->cdm_str, \")\\n\");\n   return 0;\n \n  oom:"
    },
    {
      "sha": "3ba635f48bbf961e8e3d3983d499f43ecd8c16dc",
      "filename": "libctf/ctf-types.c",
      "status": "modified",
      "additions": 20,
      "deletions": 8,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/libctf/ctf-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ffeece6ac2d4e4d2bf28c910b51c74ffc881c963/libctf/ctf-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-types.c?ref=ffeece6ac2d4e4d2bf28c910b51c74ffc881c963",
      "patch": "@@ -583,7 +583,10 @@ ctf_variable_next (ctf_dict_t *fp, ctf_next_t **it, const char **name)\n    against infinite loops, we implement simplified cycle detection and check\n    each link against itself, the previous node, and the topmost node.\n \n-   Does not drill down through slices to their contained type.  */\n+   Does not drill down through slices to their contained type.\n+\n+   Callers of this function must not presume that a type it returns must have a\n+   valid ctt_size: forwards do not, and must be separately handled.  */\n \n ctf_id_t\n ctf_type_resolve (ctf_dict_t *fp, ctf_id_t type)\n@@ -911,6 +914,7 @@ ctf_type_aname_raw (ctf_dict_t *fp, ctf_id_t type)\n ssize_t\n ctf_type_size (ctf_dict_t *fp, ctf_id_t type)\n {\n+  ctf_dict_t *ofp = fp;\n   const ctf_type_t *tp;\n   ssize_t size;\n   ctf_arinfo_t ar;\n@@ -942,12 +946,16 @@ ctf_type_size (ctf_dict_t *fp, ctf_id_t type)\n       if ((size = ctf_get_ctt_size (fp, tp, NULL, NULL)) > 0)\n \treturn size;\n \n-      if (ctf_array_info (fp, type, &ar) < 0\n-\t  || (size = ctf_type_size (fp, ar.ctr_contents)) < 0)\n+      if (ctf_array_info (ofp, type, &ar) < 0\n+\t  || (size = ctf_type_size (ofp, ar.ctr_contents)) < 0)\n \treturn -1;\t\t/* errno is set for us.  */\n \n       return size * ar.ctr_nelems;\n \n+    case CTF_K_FORWARD:\n+      /* Forwards do not have a meaningful size.  */\n+      return (ctf_set_errno (ofp, ECTF_INCOMPLETE));\n+\n     default: /* including slices of enums, etc */\n       return (ctf_get_ctt_size (fp, tp, NULL, NULL));\n     }\n@@ -981,9 +989,9 @@ ctf_type_align (ctf_dict_t *fp, ctf_id_t type)\n     case CTF_K_ARRAY:\n       {\n \tctf_arinfo_t r;\n-\tif (ctf_array_info (fp, type, &r) < 0)\n+\tif (ctf_array_info (ofp, type, &r) < 0)\n \t  return -1;\t\t/* errno is set for us.  */\n-\treturn (ctf_type_align (fp, r.ctr_contents));\n+\treturn (ctf_type_align (ofp, r.ctr_contents));\n       }\n \n     case CTF_K_STRUCT:\n@@ -1009,7 +1017,7 @@ ctf_type_align (ctf_dict_t *fp, ctf_id_t type)\n \t\tconst ctf_member_t *mp = vmp;\n \t\tfor (; n != 0; n--, mp++)\n \t\t  {\n-\t\t    ssize_t am = ctf_type_align (fp, mp->ctm_type);\n+\t\t    ssize_t am = ctf_type_align (ofp, mp->ctm_type);\n \t\t    align = MAX (align, (size_t) am);\n \t\t  }\n \t      }\n@@ -1018,7 +1026,7 @@ ctf_type_align (ctf_dict_t *fp, ctf_id_t type)\n \t\tconst ctf_lmember_t *lmp = vmp;\n \t\tfor (; n != 0; n--, lmp++)\n \t\t  {\n-\t\t    ssize_t am = ctf_type_align (fp, lmp->ctlm_type);\n+\t\t    ssize_t am = ctf_type_align (ofp, lmp->ctlm_type);\n \t\t    align = MAX (align, (size_t) am);\n \t\t  }\n \t      }\n@@ -1030,7 +1038,7 @@ ctf_type_align (ctf_dict_t *fp, ctf_id_t type)\n \t      for (dmd = ctf_list_next (&dtd->dtd_u.dtu_members);\n \t\t   dmd != NULL; dmd = ctf_list_next (dmd))\n \t\t{\n-\t\t  ssize_t am = ctf_type_align (fp, dmd->dmd_type);\n+\t\t  ssize_t am = ctf_type_align (ofp, dmd->dmd_type);\n \t\t  align = MAX (align, (size_t) am);\n \t\t  if (kind == CTF_K_STRUCT)\n \t\t    break;\n@@ -1043,6 +1051,10 @@ ctf_type_align (ctf_dict_t *fp, ctf_id_t type)\n     case CTF_K_ENUM:\n       return fp->ctf_dmodel->ctd_int;\n \n+    case CTF_K_FORWARD:\n+      /* Forwards do not have a meaningful alignment.  */\n+      return (ctf_set_errno (ofp, ECTF_INCOMPLETE));\n+\n     default:  /* including slices of enums, etc */\n       return (ctf_get_ctt_size (fp, tp, NULL, NULL));\n     }"
    }
  ]
}