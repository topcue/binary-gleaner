{
  "sha": "971db5e21e35e1ad0d124b954ce13d463b887b6c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTcxZGI1ZTIxZTM1ZTFhZDBkMTI0Yjk1NGNlMTNkNDYzYjg4N2I2Yw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-08T14:15:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-11-26T21:02:58Z"
    },
    "message": "Use run_on_main_thread in gdb.post_event\n\nThis changes gdb.post_event to use the new run_on_main_thread\nfunction.  This is somewhat tricky because the Python GIL must be held\nwhile manipulating reference counts.\n\n2019-11-26  Tom Tromey  <tom@tromey.com>\n\n\t* python/python.c (class gdbpy_gil): New.\n\t(struct gdbpy_event): Add constructor, destructor, operator().\n\t(gdbpy_post_event): Use run_on_main_thread.\n\t(gdbpy_initialize_events): Remove.\n\t(do_start_initialization): Update.\n\nChange-Id: Ie4431e60f328dae48bd96b6c6a8e875e70bda1de",
    "tree": {
      "sha": "53f82af7080c1c229d48c483de736b7986147dab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/53f82af7080c1c229d48c483de736b7986147dab"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/971db5e21e35e1ad0d124b954ce13d463b887b6c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/971db5e21e35e1ad0d124b954ce13d463b887b6c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/971db5e21e35e1ad0d124b954ce13d463b887b6c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/971db5e21e35e1ad0d124b954ce13d463b887b6c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "22138db609721897c213e5a08ccaca206c0fb1f6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22138db609721897c213e5a08ccaca206c0fb1f6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/22138db609721897c213e5a08ccaca206c0fb1f6"
    }
  ],
  "stats": {
    "total": 143,
    "additions": 71,
    "deletions": 72
  },
  "files": [
    {
      "sha": "0c5aab26d302c2880a400e0c835330e50f89cb96",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971db5e21e35e1ad0d124b954ce13d463b887b6c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971db5e21e35e1ad0d124b954ce13d463b887b6c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=971db5e21e35e1ad0d124b954ce13d463b887b6c",
      "patch": "@@ -1,3 +1,11 @@\n+2019-11-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* python/python.c (class gdbpy_gil): New.\n+\t(struct gdbpy_event): Add constructor, destructor, operator().\n+\t(gdbpy_post_event): Use run_on_main_thread.\n+\t(gdbpy_initialize_events): Remove.\n+\t(do_start_initialization): Update.\n+\n 2019-11-26  Tom Tromey  <tom@tromey.com>\n \n \t* NEWS: Add entry."
    },
    {
      "sha": "2f4fb0fe10d87069ab7e56efc9f321c2ee05da1d",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 63,
      "deletions": 72,
      "changes": 135,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/971db5e21e35e1ad0d124b954ce13d463b887b6c/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/971db5e21e35e1ad0d124b954ce13d463b887b6c/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=971db5e21e35e1ad0d124b954ce13d463b887b6c",
      "patch": "@@ -28,14 +28,13 @@\n #include \"value.h\"\n #include \"language.h\"\n #include \"event-loop.h\"\n-#include \"serial.h\"\n #include \"readline/tilde.h\"\n #include \"python.h\"\n #include \"extension-priv.h\"\n #include \"cli/cli-utils.h\"\n #include <ctype.h>\n #include \"location.h\"\n-#include \"ser-event.h\"\n+#include \"run-on-main-thread.h\"\n \n /* Declared constants and enum for python stack printing.  */\n static const char python_excp_none[] = \"none\";\n@@ -940,63 +939,81 @@ gdbpy_source_script (const struct extension_language_defn *extlang,\n \n /* Posting and handling events.  */\n \n+/* A helper class to save and restore the GIL, but without touching\n+   the other globals that are handled by gdbpy_enter.  */\n+\n+class gdbpy_gil\n+{\n+public:\n+\n+  gdbpy_gil ()\n+    : m_state (PyGILState_Ensure ())\n+  {\n+  }\n+\n+  ~gdbpy_gil ()\n+  {\n+    PyGILState_Release (m_state);\n+  }\n+\n+  DISABLE_COPY_AND_ASSIGN (gdbpy_gil);\n+\n+private:\n+\n+  PyGILState_STATE m_state;\n+};\n+\n /* A single event.  */\n struct gdbpy_event\n {\n-  /* The Python event.  This is just a callable object.  */\n-  PyObject *event;\n-  /* The next event.  */\n-  struct gdbpy_event *next;\n-};\n+  gdbpy_event (gdbpy_ref<> &&func)\n+    : m_func (func.release ())\n+  {\n+  }\n \n-/* All pending events.  */\n-static struct gdbpy_event *gdbpy_event_list;\n-/* The final link of the event list.  */\n-static struct gdbpy_event **gdbpy_event_list_end;\n+  gdbpy_event (gdbpy_event &&other)\n+    : m_func (other.m_func)\n+  {\n+    other.m_func = nullptr;\n+  }\n \n-/* So that we can wake up the main thread even when it is blocked in\n-   poll().  */\n-static struct serial_event *gdbpy_serial_event;\n+  gdbpy_event (const gdbpy_event &other)\n+    : m_func (other.m_func)\n+  {\n+    gdbpy_gil gil;\n+    Py_XINCREF (m_func);\n+  }\n+\n+  ~gdbpy_event ()\n+  {\n+    gdbpy_gil gil;\n+    Py_XDECREF (m_func);\n+  }\n \n-/* The file handler callback.  This reads from the internal pipe, and\n-   then processes the Python event queue.  This will always be run in\n-   the main gdb thread.  */\n+  gdbpy_event &operator= (const gdbpy_event &other) = delete;\n \n-static void\n-gdbpy_run_events (int error, gdb_client_data client_data)\n-{\n-  gdbpy_enter enter_py (get_current_arch (), current_language);\n+  void operator() ()\n+  {\n+    gdbpy_enter enter_py (get_current_arch (), current_language);\n \n-  /* Clear the event fd.  Do this before flushing the events list, so\n-     that any new event post afterwards is sure to re-awake the event\n-     loop.  */\n-  serial_event_clear (gdbpy_serial_event);\n+    gdbpy_ref<> call_result (PyObject_CallObject (m_func, NULL));\n+    if (call_result == NULL)\n+      gdbpy_print_stack ();\n+  }\n \n-  while (gdbpy_event_list)\n-    {\n-      /* Dispatching the event might push a new element onto the event\n-\t loop, so we update here \"atomically enough\".  */\n-      struct gdbpy_event *item = gdbpy_event_list;\n-      gdbpy_event_list = gdbpy_event_list->next;\n-      if (gdbpy_event_list == NULL)\n-\tgdbpy_event_list_end = &gdbpy_event_list;\n-\n-      gdbpy_ref<> call_result (PyObject_CallObject (item->event, NULL));\n-      if (call_result == NULL)\n-\tgdbpy_print_stack ();\n+private:\n \n-      Py_DECREF (item->event);\n-      xfree (item);\n-    }\n-}\n+  /* The Python event.  This is just a callable object.  Note that\n+     this is not a gdbpy_ref<>, because we have to take particular\n+     care to only destroy the reference when holding the GIL. */\n+  PyObject *m_func;\n+};\n \n /* Submit an event to the gdb thread.  */\n static PyObject *\n gdbpy_post_event (PyObject *self, PyObject *args)\n {\n-  struct gdbpy_event *event;\n   PyObject *func;\n-  int wakeup;\n \n   if (!PyArg_ParseTuple (args, \"O\", &func))\n     return NULL;\n@@ -1008,38 +1025,13 @@ gdbpy_post_event (PyObject *self, PyObject *args)\n       return NULL;\n     }\n \n-  Py_INCREF (func);\n-\n-  /* From here until the end of the function, we have the GIL, so we\n-     can operate on our global data structures without worrying.  */\n-  wakeup = gdbpy_event_list == NULL;\n-\n-  event = XNEW (struct gdbpy_event);\n-  event->event = func;\n-  event->next = NULL;\n-  *gdbpy_event_list_end = event;\n-  gdbpy_event_list_end = &event->next;\n-\n-  /* Wake up gdb when needed.  */\n-  if (wakeup)\n-    serial_event_set (gdbpy_serial_event);\n+  gdbpy_ref<> func_ref = gdbpy_ref<>::new_reference (func);\n+  gdbpy_event event (std::move (func_ref));\n+  run_on_main_thread (event);\n \n   Py_RETURN_NONE;\n }\n \n-/* Initialize the Python event handler.  */\n-static int\n-gdbpy_initialize_events (void)\n-{\n-  gdbpy_event_list_end = &gdbpy_event_list;\n-\n-  gdbpy_serial_event = make_serial_event ();\n-  add_file_handler (serial_event_fd (gdbpy_serial_event),\n-\t\t    gdbpy_run_events, NULL);\n-\n-  return 0;\n-}\n-\n \f\n \n /* This is the extension_language_ops.before_prompt \"method\".  */\n@@ -1704,7 +1696,6 @@ do_start_initialization ()\n       || gdbpy_initialize_linetable () < 0\n       || gdbpy_initialize_thread () < 0\n       || gdbpy_initialize_inferior () < 0\n-      || gdbpy_initialize_events () < 0\n       || gdbpy_initialize_eventregistry () < 0\n       || gdbpy_initialize_py_events () < 0\n       || gdbpy_initialize_event () < 0"
    }
  ]
}