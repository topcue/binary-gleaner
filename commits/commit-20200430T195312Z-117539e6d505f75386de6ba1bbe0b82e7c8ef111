{
  "sha": "117539e6d505f75386de6ba1bbe0b82e7c8ef111",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTE3NTM5ZTZkNTA1Zjc1Mzg2ZGU2YmExYmJlMGI4MmU3YzhlZjExMQ==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-04-30T14:13:33Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-04-30T19:53:12Z"
    },
    "message": "Add support for NetBSD thread events (create, exit)\n\nReport LWP CREATE and LWP EXIT events and setup this on post_attach()\nand post_startup_inferior().\n\nStop reinitializing the list of recognized threads in update_thread_list().\n\nHandle LWP CREATE and EXIT events in nbsd_nat_target::wait().\n\ngdb/ChangeLog:\n\n        * nbsd-nat.c (nbsd_enable_proc_events)\n        (nbsd_nat_target::post_startup_inferior): Add.\n        (nbsd_nat_target::post_attach): Call `nbsd_enable_proc_events'.\n        (nbsd_nat_target::update_thread_list): Rewrite.\n        (nbsd_nat_target::wait): Handle \"PTRACE_LWP_EXIT\" and\n        \"PTRACE_LWP_CREATE\".\n        * nbsd-nat.h (nbsd_nat_target::post_startup_inferior): Add.",
    "tree": {
      "sha": "2df6f878efd11b992f2e0ba684103135414850f8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2df6f878efd11b992f2e0ba684103135414850f8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/117539e6d505f75386de6ba1bbe0b82e7c8ef111",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/117539e6d505f75386de6ba1bbe0b82e7c8ef111",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/117539e6d505f75386de6ba1bbe0b82e7c8ef111",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/117539e6d505f75386de6ba1bbe0b82e7c8ef111/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b2a0dd767a59a4b1e343c178177dcaee55e540f1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b2a0dd767a59a4b1e343c178177dcaee55e540f1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b2a0dd767a59a4b1e343c178177dcaee55e540f1"
    }
  ],
  "stats": {
    "total": 93,
    "additions": 90,
    "deletions": 3
  },
  "files": [
    {
      "sha": "4f3b2680bb78bc3ebf75cd991e265f2254334daf",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/117539e6d505f75386de6ba1bbe0b82e7c8ef111/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/117539e6d505f75386de6ba1bbe0b82e7c8ef111/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=117539e6d505f75386de6ba1bbe0b82e7c8ef111",
      "patch": "@@ -1,3 +1,13 @@\n+2020-04-30  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* nbsd-nat.c (nbsd_enable_proc_events)\n+\t(nbsd_nat_target::post_startup_inferior): Add.\n+\t(nbsd_nat_target::post_attach): Call `nbsd_enable_proc_events'.\n+\t(nbsd_nat_target::update_thread_list): Rewrite.\n+\t(nbsd_nat_target::wait): Handle \"PTRACE_LWP_EXIT\" and\n+\t\"PTRACE_LWP_CREATE\".\n+\t* nbsd-nat.h (nbsd_nat_target::post_startup_inferior): Add.\n+\n 2020-04-30  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \t* stack.c (_initialize_stack): Remove duplicated creation\n \tof \"frame\" command and \"f\" alias."
    },
    {
      "sha": "254a768eb370a3116df4c3b530f6a02d4f30a738",
      "filename": "gdb/nbsd-nat.c",
      "status": "modified",
      "additions": 79,
      "deletions": 3,
      "changes": 82,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/117539e6d505f75386de6ba1bbe0b82e7c8ef111/gdb/nbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/117539e6d505f75386de6ba1bbe0b82e7c8ef111/gdb/nbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nbsd-nat.c?ref=117539e6d505f75386de6ba1bbe0b82e7c8ef111",
      "patch": "@@ -222,11 +222,37 @@ nbsd_add_threads (nbsd_nat_target *target, pid_t pid)\n   nbsd_thread_lister (pid, fn);\n }\n \n+/* Enable additional event reporting on new processes.  */\n+\n+static void\n+nbsd_enable_proc_events (pid_t pid)\n+{\n+  int events;\n+\n+  if (ptrace (PT_GET_EVENT_MASK, pid, &events, sizeof (events)) == -1)\n+    perror_with_name ((\"ptrace\"));\n+\n+  events |= PTRACE_LWP_CREATE;\n+  events |= PTRACE_LWP_EXIT;\n+\n+  if (ptrace (PT_SET_EVENT_MASK, pid, &events, sizeof (events)) == -1)\n+    perror_with_name ((\"ptrace\"));\n+}\n+\n+/* Implement the \"post_startup_inferior\" target_ops method.  */\n+\n+void\n+nbsd_nat_target::post_startup_inferior (ptid_t ptid)\n+{\n+  nbsd_enable_proc_events (ptid.pid ());\n+}\n+\n /* Implement the \"post_attach\" target_ops method.  */\n \n void\n nbsd_nat_target::post_attach (int pid)\n {\n+  nbsd_enable_proc_events (pid);\n   nbsd_add_threads (this, pid);\n }\n \n@@ -235,9 +261,7 @@ nbsd_nat_target::post_attach (int pid)\n void\n nbsd_nat_target::update_thread_list ()\n {\n-  prune_threads ();\n-\n-  nbsd_add_threads (this, inferior_ptid.pid ());\n+  delete_exited_threads ();\n }\n \n /* Convert PTID to a string.  */\n@@ -686,9 +710,61 @@ nbsd_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n   if (code <= SI_USER || code == SI_NOINFO)\n     return wptid;\n \n+  /* Process state for threading events */\n+  ptrace_state_t pst = {};\n+  if (code == TRAP_LWP)\n+    {\n+      if (ptrace (PT_GET_PROCESS_STATE, pid, &pst, sizeof (pst)) == -1)\n+\tperror_with_name ((\"ptrace\"));\n+    }\n+\n+  if (code == TRAP_LWP && pst.pe_report_event == PTRACE_LWP_EXIT)\n+    {\n+      /* If GDB attaches to a multi-threaded process, exiting\n+\t threads might be skipped during post_attach that\n+\t have not yet reported their PTRACE_LWP_EXIT event.\n+\t Ignore exited events for an unknown LWP.  */\n+      thread_info *thr = find_thread_ptid (this, wptid);\n+      if (thr == nullptr)\n+\t  ourstatus->kind = TARGET_WAITKIND_SPURIOUS;\n+      else\n+\t{\n+\t  ourstatus->kind = TARGET_WAITKIND_THREAD_EXITED;\n+\t  /* NetBSD does not store an LWP exit status.  */\n+\t  ourstatus->value.integer = 0;\n+\n+\t  if (print_thread_events)\n+\t    printf_unfiltered (_(\"[%s exited]\\n\"),\n+\t\t\t       target_pid_to_str (wptid).c_str ());\n+\t  delete_thread (thr);\n+\t}\n+\n+      /* The GDB core expects that the rest of the threads are running.  */\n+      if (ptrace (PT_CONTINUE, pid, (void *) 1, 0) == -1)\n+\tperror_with_name ((\"ptrace\"));\n+\n+      return wptid;\n+    }\n+\n   if (in_thread_list (this, ptid_t (pid)))\n       thread_change_ptid (this, ptid_t (pid), wptid);\n \n+  if (code == TRAP_LWP && pst.pe_report_event == PTRACE_LWP_CREATE)\n+    {\n+      /* If GDB attaches to a multi-threaded process, newborn\n+\t threads might be added by nbsd_add_threads that have\n+\t not yet reported their PTRACE_LWP_CREATE event.  Ignore\n+\t born events for an already-known LWP.  */\n+      if (in_thread_list (this, wptid))\n+\t  ourstatus->kind = TARGET_WAITKIND_SPURIOUS;\n+      else\n+\t{\n+\t  add_thread (this, wptid);\n+\t  ourstatus->kind = TARGET_WAITKIND_THREAD_CREATED;\n+\t}\n+      return wptid;\n+    }\n+\n   if (code == TRAP_EXEC)\n     {\n       ourstatus->kind = TARGET_WAITKIND_EXECD;"
    },
    {
      "sha": "4a8b96026e638ae3686e89b32eff1f31bb00ec22",
      "filename": "gdb/nbsd-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/117539e6d505f75386de6ba1bbe0b82e7c8ef111/gdb/nbsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/117539e6d505f75386de6ba1bbe0b82e7c8ef111/gdb/nbsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nbsd-nat.h?ref=117539e6d505f75386de6ba1bbe0b82e7c8ef111",
      "patch": "@@ -32,6 +32,7 @@ struct nbsd_nat_target : public inf_ptrace_target\n \n   bool thread_alive (ptid_t ptid) override;\n   const char *thread_name (struct thread_info *thr) override;\n+  void post_startup_inferior (ptid_t ptid) override;\n   void post_attach (int pid) override;\n   void update_thread_list () override;\n   std::string pid_to_str (ptid_t ptid) override;"
    }
  ]
}