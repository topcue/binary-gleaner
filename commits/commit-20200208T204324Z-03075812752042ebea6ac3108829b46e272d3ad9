{
  "sha": "03075812752042ebea6ac3108829b46e272d3ad9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDMwNzU4MTI3NTIwNDJlYmVhNmFjMzEwODgyOWI0NmUyNzJkM2FkOQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:40:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:43:24Z"
    },
    "message": "Change line_table methods to return unique_xmalloc_ptr\n\nThis changes the two new line_table methods to return\nunique_xmalloc_ptr.  This removes a bit of manual memory management.\n\n2020-02-08  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (struct line_header) <file_full_name,\n\tfile_file_name>: Return unique_xmalloc_ptr.\n\t(line_header::file_file_name): Update.\n\t(line_header::file_full_name): Update.\n\t(dw2_get_file_names_reader): Update.\n\t(macro_start_file): Update.\n\nChange-Id: I9442dba43882fb26097d0770a291eea2b03913a4",
    "tree": {
      "sha": "d9b36847e773d37f20f954e44e9de73ca5e3dae1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d9b36847e773d37f20f954e44e9de73ca5e3dae1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/03075812752042ebea6ac3108829b46e272d3ad9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03075812752042ebea6ac3108829b46e272d3ad9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/03075812752042ebea6ac3108829b46e272d3ad9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03075812752042ebea6ac3108829b46e272d3ad9/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bb82240439b045d99adafc430ed38bc9c02e2807",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bb82240439b045d99adafc430ed38bc9c02e2807",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bb82240439b045d99adafc430ed38bc9c02e2807"
    }
  ],
  "stats": {
    "total": 46,
    "additions": 29,
    "deletions": 17
  },
  "files": [
    {
      "sha": "6df7f03f050506e6f0049a1b4437feef37519bda",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03075812752042ebea6ac3108829b46e272d3ad9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03075812752042ebea6ac3108829b46e272d3ad9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=03075812752042ebea6ac3108829b46e272d3ad9",
      "patch": "@@ -1,3 +1,12 @@\n+2020-02-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (struct line_header) <file_full_name,\n+\tfile_file_name>: Return unique_xmalloc_ptr.\n+\t(line_header::file_file_name): Update.\n+\t(line_header::file_full_name): Update.\n+\t(dw2_get_file_names_reader): Update.\n+\t(macro_start_file): Update.\n+\n 2020-02-08  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (struct line_header) <file_full_name,"
    },
    {
      "sha": "6844ce15ec3f78c23a089d7736b748c77fbfc16e",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 20,
      "deletions": 17,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03075812752042ebea6ac3108829b46e272d3ad9/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03075812752042ebea6ac3108829b46e272d3ad9/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=03075812752042ebea6ac3108829b46e272d3ad9",
      "patch": "@@ -1078,13 +1078,14 @@ struct line_header\n      table.  Use COMP_DIR as the name of the current directory of the\n      compilation.  The result is allocated using xmalloc; the caller\n      is responsible for freeing it.  */\n-  char *file_full_name (int file, const char *comp_dir);\n+  gdb::unique_xmalloc_ptr<char> file_full_name (int file,\n+\t\t\t\t\t\tconst char *comp_dir);\n \n   /* Return file name relative to the compilation directory of file\n      number I in this object's file name table.  The result is\n      allocated using xmalloc; the caller is responsible for freeing\n      it.  */\n-  char *file_file_name (int file);\n+  gdb::unique_xmalloc_ptr<char> file_file_name (int file);\n \n  private:\n   /* The include_directories table.  Note these are observing\n@@ -3405,7 +3406,8 @@ dw2_get_file_names_reader (const struct die_reader_specs *reader,\n   if (offset != 0)\n     qfn->file_names[0] = xstrdup (fnd.name);\n   for (int i = 0; i < lh->file_names_size (); ++i)\n-    qfn->file_names[i + offset] = lh->file_full_name (i + 1, fnd.comp_dir);\n+    qfn->file_names[i + offset] = lh->file_full_name (i + 1,\n+\t\t\t\t\t\t      fnd.comp_dir).release ();\n   qfn->real_names = NULL;\n \n   lh_cu->v.quick->file_names = qfn;\n@@ -23754,7 +23756,7 @@ dwarf_alloc_die (struct dwarf2_cu *cu, int num_attrs)\n \f\n /* Macro support.  */\n \n-char *\n+gdb::unique_xmalloc_ptr<char>\n line_header::file_file_name (int file)\n {\n   /* Is the file number a valid index into the line header's file name\n@@ -23767,9 +23769,11 @@ line_header::file_file_name (int file)\n \t{\n \t  const char *dir = fe->include_dir (this);\n \t  if (dir != NULL)\n-\t    return concat (dir, SLASH_STRING, fe->name, (char *) NULL);\n+\t    return gdb::unique_xmalloc_ptr<char> (concat (dir, SLASH_STRING,\n+\t\t\t\t\t\t\t  fe->name,\n+\t\t\t\t\t\t\t  (char *) NULL));\n \t}\n-      return xstrdup (fe->name);\n+      return make_unique_xstrdup (fe->name);\n     }\n   else\n     {\n@@ -23784,23 +23788,24 @@ line_header::file_file_name (int file)\n       complaint (_(\"bad file number in macro information (%d)\"),\n                  file);\n \n-      return xstrdup (fake_name);\n+      return make_unique_xstrdup (fake_name);\n     }\n }\n \n-char *\n+gdb::unique_xmalloc_ptr<char>\n line_header::file_full_name (int file, const char *comp_dir)\n {\n   /* Is the file number a valid index into the line header's file name\n      table?  Remember that file numbers start with one, not zero.  */\n   if (is_valid_file_index (file))\n     {\n-      char *relative = file_file_name (file);\n+      gdb::unique_xmalloc_ptr<char> relative = file_file_name (file);\n \n-      if (IS_ABSOLUTE_PATH (relative) || comp_dir == NULL)\n+      if (IS_ABSOLUTE_PATH (relative.get ()) || comp_dir == NULL)\n \treturn relative;\n-      return reconcat (relative, comp_dir, SLASH_STRING,\n-\t\t       relative, (char *) NULL);\n+      return gdb::unique_xmalloc_ptr<char> (concat (comp_dir, SLASH_STRING,\n+\t\t\t\t\t\t    relative.get (),\n+\t\t\t\t\t\t    (char *) NULL));\n     }\n   else\n     return file_file_name (file);\n@@ -23814,7 +23819,7 @@ macro_start_file (struct dwarf2_cu *cu,\n                   struct line_header *lh)\n {\n   /* File name relative to the compilation directory of this source file.  */\n-  char *file_name = lh->file_file_name (file);\n+  gdb::unique_xmalloc_ptr<char> file_name = lh->file_file_name (file);\n \n   if (! current_file)\n     {\n@@ -23824,13 +23829,11 @@ macro_start_file (struct dwarf2_cu *cu,\n \n       /* If we have no current file, then this must be the start_file\n \t directive for the compilation unit's main source file.  */\n-      current_file = macro_set_main (macro_table, file_name);\n+      current_file = macro_set_main (macro_table, file_name.get ());\n       macro_define_special (macro_table);\n     }\n   else\n-    current_file = macro_include (current_file, line, file_name);\n-\n-  xfree (file_name);\n+    current_file = macro_include (current_file, line, file_name.get ());\n \n   return current_file;\n }"
    }
  ]
}