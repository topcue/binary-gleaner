{
  "sha": "0b790b1eeb3741217d4b7b419aca1ed77a114b6c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGI3OTBiMWVlYjM3NDEyMTdkNGI3YjQxOWFjYTFlZDc3YTExNGI2Yw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-02-06T10:06:49Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-02-15T20:53:43Z"
    },
    "message": "Make the ravenscar thread target multi-target-ready\n\nThis changes ravenscar-thread.c to make it ready for multi-target.\nThis is done by moving globals into the target, and then arranging to\nallocate the target with \"new\" and delete the target in its \"close\"\nmethod.\n\ngdb/ChangeLog\n2019-02-15  Tom Tromey  <tromey@adacore.com>\n\n\t* ravenscar-thread.c (base_ptid): Remove.\n\t(struct ravenscar_thread_target) <close>: New method.\n\t<m_base_ptid>: New member.\n\t<update_inferior_ptid, active_task, task_is_currently_active,\n\truntime_initialized>: Declare methods.\n\t<ravenscar_thread_target>: Add constructor.\n\t(ravenscar_thread_target::task_is_currently_active)\n\t(ravenscar_thread_target::update_inferior_ptid)\n\t(ravenscar_runtime_initialized): Rename.  Now methods.\n\t(ravenscar_thread_target::resume, ravenscar_thread_target::wait)\n\t(ravenscar_thread_target::update_thread_list): Update.\n\t(ravenscar_thread_target::active_task): Now method.\n\t(ravenscar_thread_target::store_registers)\n\t(ravenscar_thread_target::prepare_to_store)\n\t(ravenscar_thread_target::prepare_to_store)\n\t(ravenscar_thread_target::mourn_inferior): Update.\n\t(ravenscar_inferior_created): Use \"new\" to create target.\n\t(ravenscar_thread_target::get_ada_task_ptid): Update.\n\t(_initialize_ravenscar): Don't initialize base_ptid.\n\t(ravenscar_ops): Remove global.",
    "tree": {
      "sha": "4f94626e8eb755fdec280fa26fe9c53b546c90d4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4f94626e8eb755fdec280fa26fe9c53b546c90d4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0b790b1eeb3741217d4b7b419aca1ed77a114b6c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b790b1eeb3741217d4b7b419aca1ed77a114b6c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0b790b1eeb3741217d4b7b419aca1ed77a114b6c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b790b1eeb3741217d4b7b419aca1ed77a114b6c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "dea57a626364698759d1525acf9109771d173811",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dea57a626364698759d1525acf9109771d173811",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/dea57a626364698759d1525acf9109771d173811"
    }
  ],
  "stats": {
    "total": 122,
    "additions": 77,
    "deletions": 45
  },
  "files": [
    {
      "sha": "28762cc593f45a65c87b06ba993ec43249399c11",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b790b1eeb3741217d4b7b419aca1ed77a114b6c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b790b1eeb3741217d4b7b419aca1ed77a114b6c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0b790b1eeb3741217d4b7b419aca1ed77a114b6c",
      "patch": "@@ -1,3 +1,26 @@\n+2019-02-15  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ravenscar-thread.c (base_ptid): Remove.\n+\t(struct ravenscar_thread_target) <close>: New method.\n+\t<m_base_ptid>: New member.\n+\t<update_inferior_ptid, active_task, task_is_currently_active,\n+\truntime_initialized>: Declare methods.\n+\t<ravenscar_thread_target>: Add constructor.\n+\t(ravenscar_thread_target::task_is_currently_active)\n+\t(ravenscar_thread_target::update_inferior_ptid)\n+\t(ravenscar_runtime_initialized): Rename.  Now methods.\n+\t(ravenscar_thread_target::resume, ravenscar_thread_target::wait)\n+\t(ravenscar_thread_target::update_thread_list): Update.\n+\t(ravenscar_thread_target::active_task): Now method.\n+\t(ravenscar_thread_target::store_registers)\n+\t(ravenscar_thread_target::prepare_to_store)\n+\t(ravenscar_thread_target::prepare_to_store)\n+\t(ravenscar_thread_target::mourn_inferior): Update.\n+\t(ravenscar_inferior_created): Use \"new\" to create target.\n+\t(ravenscar_thread_target::get_ada_task_ptid): Update.\n+\t(_initialize_ravenscar): Don't initialize base_ptid.\n+\t(ravenscar_ops): Remove global.\n+\n 2019-02-15  Tom Tromey  <tromey@adacore.com>\n \n \t* target.h (push_target): Declare new overload."
    },
    {
      "sha": "186345d0fba10cea5391a2d6ba8ba608dd2189a3",
      "filename": "gdb/ravenscar-thread.c",
      "status": "modified",
      "additions": 54,
      "deletions": 45,
      "changes": 99,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0b790b1eeb3741217d4b7b419aca1ed77a114b6c/gdb/ravenscar-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0b790b1eeb3741217d4b7b419aca1ed77a114b6c/gdb/ravenscar-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ravenscar-thread.c?ref=0b790b1eeb3741217d4b7b419aca1ed77a114b6c",
      "patch": "@@ -60,11 +60,6 @@\n /* If non-null, ravenscar task support is enabled.  */\n static int ravenscar_task_support = 1;\n \n-/* PTID of the last thread that received an event.\n-   This can be useful to determine the associated task that received\n-   the event, to make it the current task.  */\n-static ptid_t base_ptid;\n-\n static const char running_thread_name[] = \"__gnat_running_thread_table\";\n \n static const char known_tasks_name[] = \"system__tasking__debug__known_tasks\";\n@@ -81,6 +76,11 @@ static const target_info ravenscar_target_info = {\n \n struct ravenscar_thread_target final : public target_ops\n {\n+  ravenscar_thread_target ()\n+  {\n+    update_inferior_ptid ();\n+  }\n+\n   const target_info &info () const override\n   { return ravenscar_target_info; }\n \n@@ -115,13 +115,24 @@ struct ravenscar_thread_target final : public target_ops\n   ptid_t get_ada_task_ptid (long lwp, long thread) override;\n \n   void mourn_inferior () override;\n-};\n \n-/* This module's target-specific operations.  */\n-static ravenscar_thread_target ravenscar_ops;\n+  void close () override\n+  {\n+    delete this;\n+  }\n+\n+private:\n \n-static ptid_t ravenscar_active_task (int cpu);\n-static bool ravenscar_runtime_initialized ();\n+  /* PTID of the last thread that received an event.\n+     This can be useful to determine the associated task that received\n+     the event, to make it the current task.  */\n+  ptid_t m_base_ptid = null_ptid;\n+\n+  void update_inferior_ptid ();\n+  ptid_t active_task (int cpu);\n+  bool task_is_currently_active (ptid_t ptid);\n+  bool runtime_initialized ();\n+};\n \n /* Return true iff PTID corresponds to a ravenscar task.  */\n \n@@ -175,11 +186,11 @@ ravenscar_get_thread_base_cpu (ptid_t ptid)\n    that task's registers are in the CPU bank.  Otherwise, the task\n    is currently suspended, and its registers have been saved in memory.  */\n \n-static bool\n-ravenscar_task_is_currently_active (ptid_t ptid)\n+bool\n+ravenscar_thread_target::task_is_currently_active (ptid_t ptid)\n {\n   ptid_t active_task_ptid\n-    = ravenscar_active_task (ravenscar_get_thread_base_cpu (ptid));\n+    = active_task (ravenscar_get_thread_base_cpu (ptid));\n \n   return ptid == active_task_ptid;\n }\n@@ -205,24 +216,24 @@ get_base_thread_from_ravenscar_task (ptid_t ptid)\n /* Fetch the ravenscar running thread from target memory and\n    update inferior_ptid accordingly.  */\n \n-static void\n-ravenscar_update_inferior_ptid ()\n+void\n+ravenscar_thread_target::update_inferior_ptid ()\n {\n   int base_cpu;\n \n-  base_ptid = inferior_ptid;\n+  m_base_ptid = inferior_ptid;\n \n   gdb_assert (!is_ravenscar_task (inferior_ptid));\n-  base_cpu = ravenscar_get_thread_base_cpu (base_ptid);\n+  base_cpu = ravenscar_get_thread_base_cpu (m_base_ptid);\n \n   /* If the runtime has not been initialized yet, the inferior_ptid is\n      the only ptid that there is.  */\n-  if (!ravenscar_runtime_initialized ())\n+  if (!runtime_initialized ())\n     return;\n \n-  /* Make sure we set base_ptid before calling ravenscar_active_task\n+  /* Make sure we set m_base_ptid before calling active_task\n      as the latter relies on it.  */\n-  inferior_ptid = ravenscar_active_task (base_cpu);\n+  inferior_ptid = active_task (base_cpu);\n   gdb_assert (inferior_ptid != null_ptid);\n \n   /* The running thread may not have been added to\n@@ -276,10 +287,10 @@ has_ravenscar_runtime ()\n /* Return True if the Ada Ravenscar run-time can be found in the\n    application, and if it has been initialized on target.  */\n \n-static bool\n-ravenscar_runtime_initialized ()\n+bool\n+ravenscar_thread_target::runtime_initialized ()\n {\n-  return ravenscar_active_task (1) != null_ptid;\n+  return active_task (1) != null_ptid;\n }\n \n /* Return the ID of the thread that is currently running.\n@@ -312,8 +323,8 @@ void\n ravenscar_thread_target::resume (ptid_t ptid, int step,\n \t\t\t\t enum gdb_signal siggnal)\n {\n-  inferior_ptid = base_ptid;\n-  beneath ()->resume (base_ptid, step, siggnal);\n+  inferior_ptid = m_base_ptid;\n+  beneath ()->resume (m_base_ptid, step, siggnal);\n }\n \n ptid_t\n@@ -323,8 +334,8 @@ ravenscar_thread_target::wait (ptid_t ptid,\n {\n   ptid_t event_ptid;\n \n-  inferior_ptid = base_ptid;\n-  event_ptid = beneath ()->wait (base_ptid, status, 0);\n+  inferior_ptid = m_base_ptid;\n+  event_ptid = beneath ()->wait (m_base_ptid, status, 0);\n   /* Find any new threads that might have been created, and update\n      inferior_ptid to the active thread.\n \n@@ -337,7 +348,7 @@ ravenscar_thread_target::wait (ptid_t ptid,\n     {\n       inferior_ptid = event_ptid;\n       this->update_thread_list ();\n-      ravenscar_update_inferior_ptid ();\n+      this->update_inferior_ptid ();\n     }\n   return inferior_ptid;\n }\n@@ -359,21 +370,21 @@ ravenscar_thread_target::update_thread_list ()\n \n   /* Do not clear the thread list before adding the Ada task, to keep\n      the thread that the process stratum has included into it\n-     (base_ptid) and the running thread, that may not have been included\n+     (m_base_ptid) and the running thread, that may not have been included\n      to system.tasking.debug's list yet.  */\n \n   iterate_over_live_ada_tasks (ravenscar_add_thread);\n }\n \n-static ptid_t\n-ravenscar_active_task (int cpu)\n+ptid_t\n+ravenscar_thread_target::active_task (int cpu)\n {\n   CORE_ADDR tid = get_running_thread_id (cpu);\n \n   if (tid == 0)\n     return null_ptid;\n   else\n-    return ptid_t (base_ptid.pid (), 0, tid);\n+    return ptid_t (m_base_ptid.pid (), 0, tid);\n }\n \n const char *\n@@ -403,9 +414,9 @@ ravenscar_thread_target::fetch_registers (struct regcache *regcache, int regnum)\n {\n   ptid_t ptid = regcache->ptid ();\n \n-  if (ravenscar_runtime_initialized ()\n+  if (runtime_initialized ()\n       && is_ravenscar_task (ptid)\n-      && !ravenscar_task_is_currently_active (ptid))\n+      && !task_is_currently_active (ptid))\n     {\n       struct gdbarch *gdbarch = regcache->arch ();\n       struct ravenscar_arch_ops *arch_ops\n@@ -423,9 +434,9 @@ ravenscar_thread_target::store_registers (struct regcache *regcache,\n {\n   ptid_t ptid = regcache->ptid ();\n \n-  if (ravenscar_runtime_initialized ()\n+  if (runtime_initialized ()\n       && is_ravenscar_task (ptid)\n-      && !ravenscar_task_is_currently_active (ptid))\n+      && !task_is_currently_active (ptid))\n     {\n       struct gdbarch *gdbarch = regcache->arch ();\n       struct ravenscar_arch_ops *arch_ops\n@@ -442,9 +453,9 @@ ravenscar_thread_target::prepare_to_store (struct regcache *regcache)\n {\n   ptid_t ptid = regcache->ptid ();\n \n-  if (ravenscar_runtime_initialized ()\n+  if (runtime_initialized ()\n       && is_ravenscar_task (ptid)\n-      && !ravenscar_task_is_currently_active (ptid))\n+      && !task_is_currently_active (ptid))\n     {\n       /* Nothing.  */\n     }\n@@ -495,9 +506,9 @@ ravenscar_thread_target::stopped_data_address (CORE_ADDR *addr_p)\n void\n ravenscar_thread_target::mourn_inferior ()\n {\n-  base_ptid = null_ptid;\n+  m_base_ptid = null_ptid;\n   beneath ()->mourn_inferior ();\n-  unpush_target (&ravenscar_ops);\n+  unpush_target (this);\n }\n \n /* Implement the to_core_of_thread target_ops \"method\".  */\n@@ -529,14 +540,14 @@ ravenscar_inferior_created (struct target_ops *target, int from_tty)\n       return;\n     }\n \n-  ravenscar_update_inferior_ptid ();\n-  push_target (&ravenscar_ops);\n+  target_ops_up target_holder (new ravenscar_thread_target ());\n+  push_target (std::move (target_holder));\n }\n \n ptid_t\n ravenscar_thread_target::get_ada_task_ptid (long lwp, long thread)\n {\n-  return ptid_t (base_ptid.pid (), 0, thread);\n+  return ptid_t (m_base_ptid.pid (), 0, thread);\n }\n \n /* Command-list for the \"set/show ravenscar\" prefix command.  */\n@@ -582,8 +593,6 @@ Support for Ravenscar task/thread switching is disabled\\n\"));\n void\n _initialize_ravenscar ()\n {\n-  base_ptid = null_ptid;\n-\n   /* Notice when the inferior is created in order to push the\n      ravenscar ops if needed.  */\n   gdb::observers::inferior_created.attach (ravenscar_inferior_created);"
    }
  ]
}