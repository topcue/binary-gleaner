{
  "sha": "22c4c60c865ad3251e28b7ac60a069e20c8a0378",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjJjNGM2MGM4NjVhZDMyNTFlMjhiN2FjNjBhMDY5ZTIwYzhhMDM3OA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:08:07Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:08:07Z"
    },
    "message": "gdb: remove TYPE_FIXED_INSTANCE\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (TYPE_FIXED_INSTANCE): Remove, replace all\n\tuses with type::is_fixed_instance.\n\nChange-Id: I57731b5ab44aac7d8896a32b9c7481891baea51a",
    "tree": {
      "sha": "8354c10d5807aec9608c797e86a64a937482b964",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8354c10d5807aec9608c797e86a64a937482b964"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/22c4c60c865ad3251e28b7ac60a069e20c8a0378",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22c4c60c865ad3251e28b7ac60a069e20c8a0378",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/22c4c60c865ad3251e28b7ac60a069e20c8a0378",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22c4c60c865ad3251e28b7ac60a069e20c8a0378/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9cdd0d12cc05495da96559ce80ad5b0467d33417",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9cdd0d12cc05495da96559ce80ad5b0467d33417",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9cdd0d12cc05495da96559ce80ad5b0467d33417"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 22,
    "deletions": 19
  },
  "files": [
    {
      "sha": "78f8e7ad019dce59c44e330bc51ae26b61ecfaa9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22c4c60c865ad3251e28b7ac60a069e20c8a0378/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22c4c60c865ad3251e28b7ac60a069e20c8a0378/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=22c4c60c865ad3251e28b7ac60a069e20c8a0378",
      "patch": "@@ -1,3 +1,8 @@\n+2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (TYPE_FIXED_INSTANCE): Remove, replace all\n+\tuses with type::is_fixed_instance.\n+\n 2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (struct type) <is_fixed_instance,"
    },
    {
      "sha": "a2280d6b32288b5001f8471f2a5fd4f82d8a27fd",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22c4c60c865ad3251e28b7ac60a069e20c8a0378/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22c4c60c865ad3251e28b7ac60a069e20c8a0378/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=22c4c60c865ad3251e28b7ac60a069e20c8a0378",
      "patch": "@@ -2938,7 +2938,7 @@ ada_array_bound_from_type (struct type *arr_type, int n, int which)\n   else\n     type = arr_type;\n \n-  if (TYPE_FIXED_INSTANCE (type))\n+  if (type->is_fixed_instance ())\n     {\n       /* The array has already been fixed, so we do not need to\n \t check the parallel ___XA type again.  That encoding has\n@@ -8054,7 +8054,7 @@ template_to_static_fixed_type (struct type *type0)\n   int f;\n \n   /* No need no do anything if the input type is already fixed.  */\n-  if (TYPE_FIXED_INSTANCE (type0))\n+  if (type0->is_fixed_instance ())\n     return type0;\n \n   /* Likewise if we already have computed the static approximation.  */\n@@ -8207,7 +8207,7 @@ to_fixed_record_type (struct type *type0, const gdb_byte *valaddr,\n {\n   struct type *templ_type;\n \n-  if (TYPE_FIXED_INSTANCE (type0))\n+  if (type0->is_fixed_instance ())\n     return type0;\n \n   templ_type = dynamic_template_type (type0);\n@@ -8363,7 +8363,7 @@ to_fixed_array_type (struct type *type0, struct value *dval,\n   static const char *xa_suffix = \"___XA\";\n \n   type0 = ada_check_typedef (type0);\n-  if (TYPE_FIXED_INSTANCE (type0))\n+  if (type0->is_fixed_instance ())\n     return type0;\n \n   constrained_packed_array_p = ada_is_constrained_packed_array_type (type0);\n@@ -8683,7 +8683,7 @@ to_static_fixed_type (struct type *type0)\n   if (type0 == NULL)\n     return NULL;\n \n-  if (TYPE_FIXED_INSTANCE (type0))\n+  if (type0->is_fixed_instance ())\n     return type0;\n \n   type0 = ada_check_typedef (type0);"
    },
    {
      "sha": "5ca4b880e22b5f9196ecc4a54c0029871eab9889",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22c4c60c865ad3251e28b7ac60a069e20c8a0378/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22c4c60c865ad3251e28b7ac60a069e20c8a0378/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=22c4c60c865ad3251e28b7ac60a069e20c8a0378",
      "patch": "@@ -5099,7 +5099,7 @@ recursive_dump_type (struct type *type, int spaces)\n     {\n       puts_filtered (\" TYPE_VECTOR\");\n     }\n-  if (TYPE_FIXED_INSTANCE (type))\n+  if (type->is_fixed_instance ())\n     {\n       puts_filtered (\" TYPE_FIXED_INSTANCE\");\n     }"
    },
    {
      "sha": "dcb691468d84785208abbae8c8e9d84622c4c590",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 11,
      "deletions": 13,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22c4c60c865ad3251e28b7ac60a069e20c8a0378/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22c4c60c865ad3251e28b7ac60a069e20c8a0378/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=22c4c60c865ad3251e28b7ac60a069e20c8a0378",
      "patch": "@@ -216,18 +216,6 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n \n #define TYPE_ENDIANITY_NOT_DEFAULT(t) (TYPE_MAIN_TYPE (t)->flag_endianity_not_default)\n \n-/* * The debugging formats (especially STABS) do not contain enough\n-   information to represent all Ada types---especially those whose\n-   size depends on dynamic quantities.  Therefore, the GNAT Ada\n-   compiler includes extra information in the form of additional type\n-   definitions connected by naming conventions.  This flag indicates\n-   that the type is an ordinary (unencoded) GDB type that has been\n-   created from the necessary run-time information, and does not need\n-   further interpretation.  Optionally marks ordinary, fixed-size GDB\n-   type.  */\n-\n-#define TYPE_FIXED_INSTANCE(t) ((t)->is_fixed_instance ())\n-\n /* * Not textual.  By default, GDB treats all single byte integers as\n    characters (or elements of strings) unless this flag is set.  */\n \n@@ -1141,6 +1129,16 @@ struct type\n     this->main_type->m_flag_gnu_ifunc = is_gnu_ifunc;\n   }\n \n+  /* The debugging formats (especially STABS) do not contain enough\n+     information to represent all Ada types---especially those whose\n+     size depends on dynamic quantities.  Therefore, the GNAT Ada\n+     compiler includes extra information in the form of additional type\n+     definitions connected by naming conventions.  This flag indicates\n+     that the type is an ordinary (unencoded) GDB type that has been\n+     created from the necessary run-time information, and does not need\n+     further interpretation.  Optionally marks ordinary, fixed-size GDB\n+     type.  */\n+\n   bool is_fixed_instance () const\n   {\n     return this->main_type->m_flag_fixed_instance;\n@@ -1658,7 +1656,7 @@ extern void allocate_gnat_aux_type (struct type *);\n #define ADA_TYPE_P(type)\t\t\t\t\t\\\n   (TYPE_SPECIFIC_FIELD (type) == TYPE_SPECIFIC_GNAT_STUFF\t\\\n     || (TYPE_SPECIFIC_FIELD (type) == TYPE_SPECIFIC_NONE\t\\\n-\t&& TYPE_FIXED_INSTANCE (type)))\n+\t&& (type)->is_fixed_instance ()))\n \n #define INIT_FUNC_SPECIFIC(type)\t\t\t\t\t       \\\n   (TYPE_SPECIFIC_FIELD (type) = TYPE_SPECIFIC_FUNC,\t\t\t       \\"
    }
  ]
}