{
  "sha": "32e4c1c2d7adfa71121b70c544c721b8c04b39f5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzJlNGMxYzJkN2FkZmE3MTEyMWI3MGM1NDRjNzIxYjhjMDRiMzlmNQ==",
  "commit": {
    "author": {
      "name": "Martin Liska",
      "email": "mliska@suse.cz",
      "date": "2020-08-15T17:47:35Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-08-20T01:26:07Z"
    },
    "message": "Use libiberty hash in gas/read.c.\n\n\t* read.c (struct po_entry): New.\n\t(hash_po_entry): Likewise.\n\t(eq_po_entry): Likewise.\n\t(po_entry_alloc): Likewise.\n\t(po_entry_find): Likewise.\n\t(pop_insert): Likewise.\n\t(pobegin): Use htab hash table.\n\t(read_a_source_file): Likewise.\n\t(s_macro): Likewise.\n\t(read_print_statistics): Likewise.\n\t* config/tc-m68k.c (m68k_conditional_pseudoop): Add const qualifier.\n\t* config/tc-m68k.h (m68k_conditional_pseudoop): Likewise.",
    "tree": {
      "sha": "8d7de29b0b35eec58d702ccf5b7af64837e889bb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8d7de29b0b35eec58d702ccf5b7af64837e889bb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/32e4c1c2d7adfa71121b70c544c721b8c04b39f5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32e4c1c2d7adfa71121b70c544c721b8c04b39f5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/32e4c1c2d7adfa71121b70c544c721b8c04b39f5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/32e4c1c2d7adfa71121b70c544c721b8c04b39f5/comments",
  "author": {
    "login": "marxin",
    "id": 2658545,
    "node_id": "MDQ6VXNlcjI2NTg1NDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/marxin",
    "html_url": "https://github.com/marxin",
    "followers_url": "https://api.github.com/users/marxin/followers",
    "following_url": "https://api.github.com/users/marxin/following{/other_user}",
    "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marxin/subscriptions",
    "organizations_url": "https://api.github.com/users/marxin/orgs",
    "repos_url": "https://api.github.com/users/marxin/repos",
    "events_url": "https://api.github.com/users/marxin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/marxin/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2b272f449e8664977d0aafba82c416b27b5f2d6f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2b272f449e8664977d0aafba82c416b27b5f2d6f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2b272f449e8664977d0aafba82c416b27b5f2d6f"
    }
  ],
  "stats": {
    "total": 92,
    "additions": 77,
    "deletions": 15
  },
  "files": [
    {
      "sha": "a2da4f987c06d2bc11fe583ffa26eb2b5011bc50",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32e4c1c2d7adfa71121b70c544c721b8c04b39f5/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32e4c1c2d7adfa71121b70c544c721b8c04b39f5/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=32e4c1c2d7adfa71121b70c544c721b8c04b39f5",
      "patch": "@@ -1,3 +1,18 @@\n+2020-08-20  Martin Liska  <mliska@suse.cz>\n+\n+\t* read.c (struct po_entry): New.\n+\t(hash_po_entry): Likewise.\n+\t(eq_po_entry): Likewise.\n+\t(po_entry_alloc): Likewise.\n+\t(po_entry_find): Likewise.\n+\t(pop_insert): Likewise.\n+\t(pobegin): Use htab hash table.\n+\t(read_a_source_file): Likewise.\n+\t(s_macro): Likewise.\n+\t(read_print_statistics): Likewise.\n+\t* config/tc-m68k.c (m68k_conditional_pseudoop): Add const qualifier.\n+\t* config/tc-m68k.h (m68k_conditional_pseudoop): Likewise.\n+\n 2020-08-20  Martin Liska  <mliska@suse.cz>\n \n \t* config/tc-iq2000.c (iq2000_add_macro): Use htab hash table."
    },
    {
      "sha": "6fe3f4a867998bd29bdddbdc85078d69112bb790",
      "filename": "gas/config/tc-m68k.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32e4c1c2d7adfa71121b70c544c721b8c04b39f5/gas/config/tc-m68k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32e4c1c2d7adfa71121b70c544c721b8c04b39f5/gas/config/tc-m68k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-m68k.c?ref=32e4c1c2d7adfa71121b70c544c721b8c04b39f5",
      "patch": "@@ -5560,7 +5560,7 @@ s_proc (int ignore ATTRIBUTE_UNUSED)\n    alignment is needed.  */\n \n int\n-m68k_conditional_pseudoop (pseudo_typeS *pop)\n+m68k_conditional_pseudoop (const pseudo_typeS *pop)\n {\n   return (pop->poc_handler == s_mri_if\n \t  || pop->poc_handler == s_mri_else);"
    },
    {
      "sha": "89bf0460f0f8b19235f3eaad8a57839e4a7df1bc",
      "filename": "gas/config/tc-m68k.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32e4c1c2d7adfa71121b70c544c721b8c04b39f5/gas/config/tc-m68k.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32e4c1c2d7adfa71121b70c544c721b8c04b39f5/gas/config/tc-m68k.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-m68k.h?ref=32e4c1c2d7adfa71121b70c544c721b8c04b39f5",
      "patch": "@@ -47,7 +47,7 @@ extern const char *m68k_comment_chars;\n extern void m68k_mri_mode_change (int);\n #define MRI_MODE_CHANGE(i) m68k_mri_mode_change (i)\n \n-extern int m68k_conditional_pseudoop (pseudo_typeS *);\n+extern int m68k_conditional_pseudoop (const pseudo_typeS *);\n #define tc_conditional_pseudoop(pop) m68k_conditional_pseudoop (pop)\n \n extern void m68k_frob_label (symbolS *);"
    },
    {
      "sha": "a65e56d16f99854ee6e49e96889ab36caaed0e0f",
      "filename": "gas/read.c",
      "status": "modified",
      "additions": 60,
      "deletions": 13,
      "changes": 73,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/32e4c1c2d7adfa71121b70c544c721b8c04b39f5/gas/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/32e4c1c2d7adfa71121b70c544c721b8c04b39f5/gas/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/read.c?ref=32e4c1c2d7adfa71121b70c544c721b8c04b39f5",
      "patch": "@@ -295,7 +295,53 @@ address_bytes (void)\n \n /* Set up pseudo-op tables.  */\n \n-static struct hash_control *po_hash;\n+struct po_entry\n+{\n+  const char *poc_name;\n+\n+  const pseudo_typeS *pop;\n+};\n+\n+typedef struct po_entry po_entry_t;\n+\n+/* Hash function for a po_entry.  */\n+\n+static hashval_t\n+hash_po_entry (const void *e)\n+{\n+  const po_entry_t *entry = (const po_entry_t *) e;\n+  return htab_hash_string (entry->poc_name);\n+}\n+\n+/* Equality function for a po_entry.  */\n+\n+static int\n+eq_po_entry (const void *a, const void *b)\n+{\n+  const po_entry_t *ea = (const po_entry_t *) a;\n+  const po_entry_t *eb = (const po_entry_t *) b;\n+\n+  return strcmp (ea->poc_name, eb->poc_name) == 0;\n+}\n+\n+static po_entry_t *\n+po_entry_alloc (const char *poc_name, const pseudo_typeS *pop)\n+{\n+  po_entry_t *entry = XNEW (po_entry_t);\n+  entry->poc_name = poc_name;\n+  entry->pop = pop;\n+  return entry;\n+}\n+\n+static const pseudo_typeS *\n+po_entry_find (htab_t table, const char *poc_name)\n+{\n+  po_entry_t needle = { poc_name, NULL };\n+  po_entry_t *entry = htab_find (table, &needle);\n+  return entry != NULL ? entry->pop : NULL;\n+}\n+\n+static struct htab *po_hash;\n \n static const pseudo_typeS potable[] = {\n   {\"abort\", s_abort, 0},\n@@ -514,14 +560,14 @@ static const char *pop_table_name;\n void\n pop_insert (const pseudo_typeS *table)\n {\n-  const char *errtxt;\n   const pseudo_typeS *pop;\n   for (pop = table; pop->poc_name; pop++)\n     {\n-      errtxt = hash_insert (po_hash, pop->poc_name, (char *) pop);\n-      if (errtxt && (!pop_override_ok || strcmp (errtxt, \"exists\")))\n-\tas_fatal (_(\"error constructing %s pseudo-op table: %s\"), pop_table_name,\n-\t\t  errtxt);\n+      int exists = po_entry_find (po_hash, pop->poc_name) != NULL;\n+      if (!pop_override_ok && exists)\n+\tas_fatal (_(\"error constructing %s pseudo-op table\"), pop_table_name);\n+      else if (!exists)\n+\thtab_insert (po_hash, po_entry_alloc (pop->poc_name, pop));\n     }\n }\n \n@@ -540,7 +586,8 @@ pop_insert (const pseudo_typeS *table)\n static void\n pobegin (void)\n {\n-  po_hash = hash_new ();\n+  po_hash = htab_create_alloc (16, hash_po_entry, eq_po_entry, NULL,\n+\t\t\t       xcalloc, xfree);\n \n   /* Do the target-specific pseudo ops.  */\n   pop_table_name = \"md\";\n@@ -819,7 +866,7 @@ read_a_source_file (const char *name)\n   char next_char;\n   char *s;\t\t/* String of symbol, '\\0' appended.  */\n   long temp;\n-  pseudo_typeS *pop;\n+  const pseudo_typeS *pop;\n \n #ifdef WARN_COMMENTS\n   found_comment = 0;\n@@ -1069,7 +1116,7 @@ read_a_source_file (const char *name)\n \t\t    {\n \t\t      /* The MRI assembler uses pseudo-ops without\n \t\t\t a period.  */\n-\t\t      pop = (pseudo_typeS *) hash_find (po_hash, s);\n+\t\t      pop = po_entry_find (po_hash, s);\n \t\t      if (pop != NULL && pop->poc_handler == NULL)\n \t\t\tpop = NULL;\n \t\t    }\n@@ -1084,7 +1131,7 @@ read_a_source_file (const char *name)\n \t\t\t already know that the pseudo-op begins with a '.'.  */\n \n \t\t      if (pop == NULL)\n-\t\t\tpop = (pseudo_typeS *) hash_find (po_hash, s + 1);\n+\t\t\tpop = po_entry_find (po_hash, s + 1);\n \t\t      if (pop && !pop->poc_handler)\n \t\t\tpop = NULL;\n \n@@ -2739,10 +2786,10 @@ s_macro (int ignore ATTRIBUTE_UNUSED)\n \t}\n \n       if (((NO_PSEUDO_DOT || flag_m68k_mri)\n-\t   && hash_find (po_hash, name) != NULL)\n+\t   && po_entry_find (po_hash, name) != NULL)\n \t  || (!flag_m68k_mri\n \t      && *name == '.'\n-\t      && hash_find (po_hash, name + 1) != NULL))\n+\t      && po_entry_find (po_hash, name + 1) != NULL))\n \tas_warn_where (file,\n \t\t line,\n \t\t _(\"attempt to redefine pseudo-op `%s' ignored\"),\n@@ -6128,7 +6175,7 @@ s_ignore (int arg ATTRIBUTE_UNUSED)\n void\n read_print_statistics (FILE *file)\n {\n-  hash_print_statistics (file, \"pseudo-op table\", po_hash);\n+  htab_print_statistics (file, \"pseudo-op table\", po_hash);\n }\n \n /* Inserts the given line into the input stream."
    }
  ]
}