{
  "sha": "0830d301901d225403eaf6629c20a6c09f3ec8f6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDgzMGQzMDE5MDFkMjI1NDAzZWFmNjYyOWMyMGE2YzA5ZjNlYzhmNg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-02T19:13:02Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-02T19:17:27Z"
    },
    "message": "Avoid assertion failure due to complex type change\n\nTankut Baris Aktemur pointed out that the recent series to change how\ncomplex types are handled introduced a regression.\n\nThis assert in init_complex_type was firing:\n\n  gdb_assert (TYPE_CODE (target_type) == TYPE_CODE_INT\n\t      || TYPE_CODE (target_type) == TYPE_CODE_FLT);\n\nThe problem was that f-lang.c could call init_complex_type with a type\nwhose code was TYPE_CODE_ERROR.\n\nIt seemed best to me to fix this in f-lang.c, rather than to change\ninit_complex_type to accept error types.\n\nTested on x86-64 Fedora 30.  I'm checking this in.\n\ngdb/ChangeLog\n2020-04-02  Tom Tromey  <tromey@adacore.com>\n\n\t* f-lang.c (build_fortran_types): Use arch_type to initialize\n\tbuiltin_complex_s32 in the TYPE_CODE_ERROR case.",
    "tree": {
      "sha": "9f5ba89cdcfdc1e61a37c676a555bcba373cab2f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9f5ba89cdcfdc1e61a37c676a555bcba373cab2f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0830d301901d225403eaf6629c20a6c09f3ec8f6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0830d301901d225403eaf6629c20a6c09f3ec8f6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0830d301901d225403eaf6629c20a6c09f3ec8f6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0830d301901d225403eaf6629c20a6c09f3ec8f6/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e7da7f8f71572e3ef71a22ad3fae2388a53bd84c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e7da7f8f71572e3ef71a22ad3fae2388a53bd84c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e7da7f8f71572e3ef71a22ad3fae2388a53bd84c"
    }
  ],
  "stats": {
    "total": 14,
    "additions": 12,
    "deletions": 2
  },
  "files": [
    {
      "sha": "3b58f2ee54674718b37cab5e8aa8795dde6d5109",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0830d301901d225403eaf6629c20a6c09f3ec8f6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0830d301901d225403eaf6629c20a6c09f3ec8f6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0830d301901d225403eaf6629c20a6c09f3ec8f6",
      "patch": "@@ -1,3 +1,8 @@\n+2020-04-02  Tom Tromey  <tromey@adacore.com>\n+\n+\t* f-lang.c (build_fortran_types): Use arch_type to initialize\n+\tbuiltin_complex_s32 in the TYPE_CODE_ERROR case.\n+\n 2020-04-02  Tom Tromey  <tromey@adacore.com>\n \n \t* dwarf2/read.c (partial_die_info::read): Do not create a vector"
    },
    {
      "sha": "6b7a5fb7dbaaa04712c59bdfbf3cd4ce6973a78d",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0830d301901d225403eaf6629c20a6c09f3ec8f6/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0830d301901d225403eaf6629c20a6c09f3ec8f6/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=0830d301901d225403eaf6629c20a6c09f3ec8f6",
      "patch": "@@ -744,8 +744,13 @@ build_fortran_types (struct gdbarch *gdbarch)\n     = init_complex_type (\"complex*8\", builtin_f_type->builtin_real);\n   builtin_f_type->builtin_complex_s16\n     = init_complex_type (\"complex*16\", builtin_f_type->builtin_real_s8);\n-  builtin_f_type->builtin_complex_s32\n-    = init_complex_type (\"complex*32\", builtin_f_type->builtin_real_s16);\n+\n+  if (TYPE_CODE (builtin_f_type->builtin_real_s16) == TYPE_CODE_ERROR)\n+    builtin_f_type->builtin_complex_s32\n+      = arch_type (gdbarch, TYPE_CODE_ERROR, 256, \"complex*32\");\n+  else\n+    builtin_f_type->builtin_complex_s32\n+      = init_complex_type (\"complex*32\", builtin_f_type->builtin_real_s16);\n \n   return builtin_f_type;\n }"
    }
  ]
}