{
  "sha": "c4b126b87a6cd842e567136b07ac1adca98c660f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzRiMTI2Yjg3YTZjZDg0MmU1NjcxMzZiMDdhYzFhZGNhOThjNjYwZg==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-06-04T12:58:34Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-06-04T12:58:47Z"
    },
    "message": "ELF: Don't check relocations in non-loaded, non-alloced sections\n\nDon't do anything special with non-loaded, non-alloced sections.\nIn particular, any relocs in such sections should not affect GOT\nand PLT reference counting (ie. we don't allow them to create GOT\nor PLT entries), there's no possibility or desire to optimize TLS\nrelocs, and there's not much point in propagating relocs to shared\nlibs that the dynamic linker won't relocate.\n\nSince check_relocs is no longer called on non-loaded, non-alloced\nsections, remove SEC_ALLOC check.  Resolve relocation in debug section\nagainst symbol defined in shared library to 0.\n\nbfd/\n\n\tPR ld/26080\n\t* elf-m10300.c (mn10300_elf_relocate_section): Resolve relocation\n\tin debug section against symbol defined in shared library to 0.\n\t* elf32-i386.c (elf_i386_check_relocs): Remove SEC_ALLOC check.\n\t* elf32-lm32.c (lm32_elf_check_relocs): Likewise.\n\t* elf32-m32r.c (m32r_elf_check_relocs): Likewise.\n\t* elf32-nds32.c (nds32_elf_check_relocs): Likewise.\n\t* elf32-nios2.c (nios2_elf32_check_relocs): Likewise.\n\t* elf32-or1k.c (or1k_elf_check_relocs): Likewise.\n\t* elf32-ppc.c (ppc_elf_check_relocs): Likewise.\n\t* elf32-sh.c (sh_elf_check_relocs): Likewise.\n\t* elf32-xtensa.c (elf_xtensa_check_relocs): Likewise.\n\t* elf64-alpha.c (elf64_alpha_check_relocs): Likewise.\n\t* elf64-ppc.c (ppc64_elf_check_relocs): Likewise.\n\t* elf64-x86-64.c (elf_x86_64_check_relocs): Likewise.\n\t* elfxx-mips.c (_bfd_mips_elf_check_relocs): Likewise.\n\t* elf32-vax.c (elf_vax_check_relocs): Set non_got_ref for non-GOT\n\treference.\n\t(elf_vax_adjust_dynamic_symbol): Generate a copy reloc only if\n\tthere is non-GOT reference.\n\t* elflink.c (_bfd_elf_link_check_relocs): Skip non-loaded,\n\tnon-alloced sections.\n\nld/\n\n\tPR ld/26080\n\t* testsuite/ld-elf/comm-data.exp: Remove copy_reloc.\n\t* testsuite/ld-elf/comm-data2r.rd: Removed.\n\t* testsuite/ld-elf/comm-data2r.sd: Likewise.\n\t* testsuite/ld-elf/comm-data2r.xd: Likewise.",
    "tree": {
      "sha": "d2fc43aad5eabf1e5389b8136c98d2042ec52225",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d2fc43aad5eabf1e5389b8136c98d2042ec52225"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c4b126b87a6cd842e567136b07ac1adca98c660f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c4b126b87a6cd842e567136b07ac1adca98c660f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c4b126b87a6cd842e567136b07ac1adca98c660f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c4b126b87a6cd842e567136b07ac1adca98c660f/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1cf67587a0980e5fee20cad75f2c1fe01af6e808",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1cf67587a0980e5fee20cad75f2c1fe01af6e808",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1cf67587a0980e5fee20cad75f2c1fe01af6e808"
    }
  ],
  "stats": {
    "total": 198,
    "additions": 62,
    "deletions": 136
  },
  "files": [
    {
      "sha": "13a3ed180b5c219700252bad36ada1de1dfd15ad",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -1,3 +1,28 @@\n+2020-06-04  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR ld/26080\n+\t* elf-m10300.c (mn10300_elf_relocate_section): Resolve relocation\n+\tin debug section against symbol defined in shared library to 0.\n+\t* elf32-i386.c (elf_i386_check_relocs): Remove SEC_ALLOC check.\n+\t* elf32-lm32.c (lm32_elf_check_relocs): Likewise.\n+\t* elf32-m32r.c (m32r_elf_check_relocs): Likewise.\n+\t* elf32-nds32.c (nds32_elf_check_relocs): Likewise.\n+\t* elf32-nios2.c (nios2_elf32_check_relocs): Likewise.\n+\t* elf32-or1k.c (or1k_elf_check_relocs): Likewise.\n+\t* elf32-ppc.c (ppc_elf_check_relocs): Likewise.\n+\t* elf32-sh.c (sh_elf_check_relocs): Likewise.\n+\t* elf32-xtensa.c (elf_xtensa_check_relocs): Likewise.\n+\t* elf64-alpha.c (elf64_alpha_check_relocs): Likewise.\n+\t* elf64-ppc.c (ppc64_elf_check_relocs): Likewise.\n+\t* elf64-x86-64.c (elf_x86_64_check_relocs): Likewise.\n+\t* elfxx-mips.c (_bfd_mips_elf_check_relocs): Likewise.\n+\t* elf32-vax.c (elf_vax_check_relocs): Set non_got_ref for non-GOT\n+\treference.\n+\t(elf_vax_adjust_dynamic_symbol): Generate a copy reloc only if\n+\tthere is non-GOT reference.\n+\t* elflink.c (_bfd_elf_link_check_relocs): Skip non-loaded,\n+\tnon-alloced sections.\n+\n 2020-06-03  Stephen Casner  <casner@acm.org>\n \n \tCopy several years of fixes from bfd/aoutx.h to bfd/pdp11.c."
    },
    {
      "sha": "5a0bb9f005af556c2995971885762be40c7df8cc",
      "filename": "bfd/elf-m10300.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf-m10300.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf-m10300.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-m10300.c?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -2066,12 +2066,12 @@ mn10300_elf_relocate_section (bfd *output_bfd,\n \t\t      && elf_hash_table (info)->dynamic_sections_created\n \t\t      && !SYMBOL_REFERENCES_LOCAL (info, hh))\n \t\t  || (r_type == R_MN10300_32\n+\t\t      && !SYMBOL_REFERENCES_LOCAL (info, hh)\n \t\t      /* _32 relocs in executables force _COPY relocs,\n \t\t\t such that the address of the symbol ends up\n \t\t\t being local.  */\n-\t\t      && !bfd_link_executable (info)\n-\t\t      && !SYMBOL_REFERENCES_LOCAL (info, hh)\n-\t\t      && ((input_section->flags & SEC_ALLOC) != 0\n+\t\t      && (((input_section->flags & SEC_ALLOC) != 0\n+\t\t\t   && !bfd_link_executable (info))\n \t\t\t  /* DWARF will emit R_MN10300_32 relocations\n \t\t\t     in its sections against symbols defined\n \t\t\t     externally in shared libraries.  We can't"
    },
    {
      "sha": "f6f669957c3fa5180f61054e829b0b1808b0edba",
      "filename": "bfd/elf32-i386.c",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-i386.c?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -1487,15 +1487,6 @@ elf_i386_check_relocs (bfd *abfd,\n   if (bfd_link_relocatable (info))\n     return TRUE;\n \n-  /* Don't do anything special with non-loaded, non-alloced sections.\n-     In particular, any relocs in such sections should not affect GOT\n-     and PLT reference counting (ie. we don't allow them to create GOT\n-     or PLT entries), there's no possibility or desire to optimize TLS\n-     relocs, and there's not much point in propagating relocs to shared\n-     libs that the dynamic linker won't relocate.  */\n-  if ((sec->flags & SEC_ALLOC) == 0)\n-    return TRUE;\n-\n   htab = elf_x86_hash_table (info, I386_ELF_DATA);\n   if (htab == NULL)\n     {"
    },
    {
      "sha": "aba821ffd1a4245b1dee969b7db50974c776077e",
      "filename": "bfd/elf32-lm32.c",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-lm32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-lm32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-lm32.c?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -1128,15 +1128,6 @@ lm32_elf_check_relocs (bfd *abfd,\n   if (bfd_link_relocatable (info))\n     return TRUE;\n \n-  /* Don't do anything special with non-loaded, non-alloced sections.\n-     In particular, any relocs in such sections should not affect GOT\n-     and PLT reference counting (ie. we don't allow them to create GOT\n-     or PLT entries), there's no possibility or desire to optimize TLS\n-     relocs, and there's not much point in propagating relocs to shared\n-     libs that the dynamic linker won't relocate.  */\n-  if ((sec->flags & SEC_ALLOC) == 0)\n-    return TRUE;\n-\n   symtab_hdr = &elf_tdata (abfd)->symtab_hdr;\n   sym_hashes = elf_sym_hashes (abfd);\n   sym_hashes_end = sym_hashes + symtab_hdr->sh_size/sizeof (Elf32_External_Sym);"
    },
    {
      "sha": "740be9338295f29aa8db8d10a15ce78499fbff9b",
      "filename": "bfd/elf32-m32r.c",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-m32r.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-m32r.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-m32r.c?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -3424,15 +3424,6 @@ m32r_elf_check_relocs (bfd *abfd,\n   if (bfd_link_relocatable (info))\n     return TRUE;\n \n-  /* Don't do anything special with non-loaded, non-alloced sections.\n-     In particular, any relocs in such sections should not affect GOT\n-     and PLT reference counting (ie. we don't allow them to create GOT\n-     or PLT entries), there's no possibility or desire to optimize TLS\n-     relocs, and there's not much point in propagating relocs to shared\n-     libs that the dynamic linker won't relocate.  */\n-  if ((sec->flags & SEC_ALLOC) == 0)\n-    return TRUE;\n-\n   sreloc = NULL;\n   symtab_hdr = &elf_tdata (abfd)->symtab_hdr;\n   sym_hashes = elf_sym_hashes (abfd);"
    },
    {
      "sha": "1d3a0f7526f05e693f8b80c4a2804c4bafed6eaf",
      "filename": "bfd/elf32-nds32.c",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-nds32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-nds32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nds32.c?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -7055,15 +7055,6 @@ nds32_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n       return TRUE;\n     }\n \n-  /* Don't do anything special with non-loaded, non-alloced sections.\n-     In particular, any relocs in such sections should not affect GOT\n-     and PLT reference counting (ie. we don't allow them to create GOT\n-     or PLT entries), there's no possibility or desire to optimize TLS\n-     relocs, and there's not much point in propagating relocs to shared\n-     libs that the dynamic linker won't relocate.  */\n-  if ((sec->flags & SEC_ALLOC) == 0)\n-    return TRUE;\n-\n   symtab_hdr = &elf_tdata (abfd)->symtab_hdr;\n   sym_hashes = elf_sym_hashes (abfd);\n   sym_hashes_end ="
    },
    {
      "sha": "cdc11f97159810584216c31ccc1695c965b8148b",
      "filename": "bfd/elf32-nios2.c",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-nios2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-nios2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-nios2.c?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -4689,15 +4689,6 @@ nios2_elf32_check_relocs (bfd *abfd, struct bfd_link_info *info,\n   if (bfd_link_relocatable (info))\n     return TRUE;\n \n-  /* Don't do anything special with non-loaded, non-alloced sections.\n-     In particular, any relocs in such sections should not affect GOT\n-     and PLT reference counting (ie. we don't allow them to create GOT\n-     or PLT entries), there's no possibility or desire to optimize TLS\n-     relocs, and there's not much point in propagating relocs to shared\n-     libs that the dynamic linker won't relocate.  */\n-  if ((sec->flags & SEC_ALLOC) == 0)\n-    return TRUE;\n-\n   symtab_hdr = &elf_tdata (abfd)->symtab_hdr;\n   sym_hashes = elf_sym_hashes (abfd);\n   sym_hashes_end = (sym_hashes"
    },
    {
      "sha": "b25f96b42de4a20456f3c57eb8a431996583ca37",
      "filename": "bfd/elf32-or1k.c",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-or1k.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-or1k.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-or1k.c?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -1880,15 +1880,6 @@ or1k_elf_check_relocs (bfd *abfd,\n   if (bfd_link_relocatable (info))\n     return TRUE;\n \n-  /* Don't do anything special with non-loaded, non-alloced sections.\n-     In particular, any relocs in such sections should not affect GOT\n-     and PLT reference counting (ie. we don't allow them to create GOT\n-     or PLT entries), there's no possibility or desire to optimize TLS\n-     relocs, and there's not much point in propagating relocs to shared\n-     libs that the dynamic linker won't relocate.  */\n-  if ((sec->flags & SEC_ALLOC) == 0)\n-    return TRUE;\n-\n   symtab_hdr = &elf_tdata (abfd)->symtab_hdr;\n   sym_hashes = elf_sym_hashes (abfd);\n "
    },
    {
      "sha": "995e1a95e23cb5b6cc2e91fdfc7067689c25f896",
      "filename": "bfd/elf32-ppc.c",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ppc.c?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -2888,15 +2888,6 @@ ppc_elf_check_relocs (bfd *abfd,\n   if (bfd_link_relocatable (info))\n     return TRUE;\n \n-  /* Don't do anything special with non-loaded, non-alloced sections.\n-     In particular, any relocs in such sections should not affect GOT\n-     and PLT reference counting (ie. we don't allow them to create GOT\n-     or PLT entries), there's no possibility or desire to optimize TLS\n-     relocs, and there's not much point in propagating relocs to shared\n-     libs that the dynamic linker won't relocate.  */\n-  if ((sec->flags & SEC_ALLOC) == 0)\n-    return TRUE;\n-\n #ifdef DEBUG\n   _bfd_error_handler (\"ppc_elf_check_relocs called for section %pA in %pB\",\n \t\t      sec, abfd);"
    },
    {
      "sha": "dd670466c3b4219f49c1a94a62560d88d4af9d8e",
      "filename": "bfd/elf32-sh.c",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-sh.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-sh.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-sh.c?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -5350,15 +5350,6 @@ sh_elf_check_relocs (bfd *abfd, struct bfd_link_info *info, asection *sec,\n   if (bfd_link_relocatable (info))\n     return TRUE;\n \n-  /* Don't do anything special with non-loaded, non-alloced sections.\n-     In particular, any relocs in such sections should not affect GOT\n-     and PLT reference counting (ie. we don't allow them to create GOT\n-     or PLT entries), there's no possibility or desire to optimize TLS\n-     relocs, and there's not much point in propagating relocs to shared\n-     libs that the dynamic linker won't relocate.  */\n-  if ((sec->flags & SEC_ALLOC) == 0)\n-    return TRUE;\n-\n   BFD_ASSERT (is_sh_elf (abfd));\n \n   symtab_hdr = &elf_symtab_hdr (abfd);"
    },
    {
      "sha": "b5c3d8943a86e561dbd65b44fad5a2188cff0f87",
      "filename": "bfd/elf32-vax.c",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-vax.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-vax.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-vax.c?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -712,6 +712,11 @@ elf_vax_check_relocs (bfd *abfd, struct bfd_link_info *info, asection *sec,\n \t\th->plt.refcount++;\n \t    }\n \n+\t  /* Non-GOT reference may need a copy reloc in executable or\n+\t     a dynamic reloc in shared library.  */\n+\t  if (h != NULL)\n+\t    h->non_got_ref = 1;\n+\n \t  /* If we are creating a shared library, we need to copy the\n \t     reloc into the shared library.  */\n \t  if (bfd_link_pic (info)\n@@ -929,6 +934,11 @@ elf_vax_adjust_dynamic_symbol (struct bfd_link_info *info,\n   if (bfd_link_pic (info))\n     return TRUE;\n \n+  /* If there are no references to this symbol that do not use the\n+     GOT relocation, we don't need to generate a copy reloc.  */\n+  if (!h->non_got_ref)\n+    return TRUE;\n+\n   /* We must allocate the symbol in our .dynbss section, which will\n      become part of the .bss section of the executable.  There will be\n      an entry for this symbol in the .dynsym section.  The dynamic"
    },
    {
      "sha": "9dc815edbb33eebb252b6f95a829b8929a13427f",
      "filename": "bfd/elf32-xtensa.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-xtensa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf32-xtensa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-xtensa.c?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -1039,7 +1039,7 @@ elf_xtensa_check_relocs (bfd *abfd,\n   const Elf_Internal_Rela *rel;\n   const Elf_Internal_Rela *rel_end;\n \n-  if (bfd_link_relocatable (info) || (sec->flags & SEC_ALLOC) == 0)\n+  if (bfd_link_relocatable (info))\n     return TRUE;\n \n   BFD_ASSERT (is_xtensa_elf (abfd));"
    },
    {
      "sha": "0b31d450dca1eaf36d04be0e99e26600b9e12084",
      "filename": "bfd/elf64-alpha.c",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf64-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf64-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-alpha.c?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -1782,15 +1782,6 @@ elf64_alpha_check_relocs (bfd *abfd, struct bfd_link_info *info,\n   if (bfd_link_relocatable (info))\n     return TRUE;\n \n-  /* Don't do anything special with non-loaded, non-alloced sections.\n-     In particular, any relocs in such sections should not affect GOT\n-     and PLT reference counting (ie. we don't allow them to create GOT\n-     or PLT entries), there's no possibility or desire to optimize TLS\n-     relocs, and there's not much point in propagating relocs to shared\n-     libs that the dynamic linker won't relocate.  */\n-  if ((sec->flags & SEC_ALLOC) == 0)\n-    return TRUE;\n-\n   BFD_ASSERT (is_alpha_elf (abfd));\n \n   dynobj = elf_hash_table (info)->dynobj;"
    },
    {
      "sha": "769afc5aa5624a7927341ed0fbacfd19718f9542",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -4536,15 +4536,6 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n   if (bfd_link_relocatable (info))\n     return TRUE;\n \n-  /* Don't do anything special with non-loaded, non-alloced sections.\n-     In particular, any relocs in such sections should not affect GOT\n-     and PLT reference counting (ie. we don't allow them to create GOT\n-     or PLT entries), there's no possibility or desire to optimize TLS\n-     relocs, and there's not much point in propagating relocs to shared\n-     libs that the dynamic linker won't relocate.  */\n-  if ((sec->flags & SEC_ALLOC) == 0)\n-    return TRUE;\n-\n   BFD_ASSERT (is_ppc64_elf (abfd));\n \n   htab = ppc_hash_table (info);"
    },
    {
      "sha": "eada0e53ed9e2e5da639224892cb49f1a86b0cb6",
      "filename": "bfd/elf64-x86-64.c",
      "status": "modified",
      "additions": 0,
      "deletions": 9,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf64-x86-64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elf64-x86-64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-x86-64.c?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -1862,15 +1862,6 @@ elf_x86_64_check_relocs (bfd *abfd, struct bfd_link_info *info,\n   if (bfd_link_relocatable (info))\n     return TRUE;\n \n-  /* Don't do anything special with non-loaded, non-alloced sections.\n-     In particular, any relocs in such sections should not affect GOT\n-     and PLT reference counting (ie. we don't allow them to create GOT\n-     or PLT entries), there's no possibility or desire to optimize TLS\n-     relocs, and there's not much point in propagating relocs to shared\n-     libs that the dynamic linker won't relocate.  */\n-  if ((sec->flags & SEC_ALLOC) == 0)\n-    return TRUE;\n-\n   htab = elf_x86_hash_table (info, X86_64_ELF_DATA);\n   if (htab == NULL)\n     {"
    },
    {
      "sha": "7e86adec5bdeb9748a142d7c1b779297437cd894",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -3956,8 +3956,16 @@ _bfd_elf_link_check_relocs (bfd *abfd, struct bfd_link_info *info)\n \t  Elf_Internal_Rela *internal_relocs;\n \t  bfd_boolean ok;\n \n-\t  /* Don't check relocations in excluded sections.  */\n-\t  if ((o->flags & SEC_RELOC) == 0\n+\t  /* Don't check relocations in excluded sections.  Don't do\n+\t     anything special with non-loaded, non-alloced sections.\n+\t     In particular, any relocs in such sections should not\n+\t     affect GOT and PLT reference counting (ie.  we don't\n+\t     allow them to create GOT or PLT entries), there's no\n+\t     possibility or desire to optimize TLS relocs, and\n+\t     there's not much point in propagating relocs to shared\n+\t     libs that the dynamic linker won't relocate.  */\n+\t  if ((o->flags & SEC_ALLOC) == 0\n+\t      || (o->flags & SEC_RELOC) == 0\n \t      || (o->flags & SEC_EXCLUDE) != 0\n \t      || o->reloc_count == 0\n \t      || ((info->strip == strip_all || info->strip == strip_debugger)"
    },
    {
      "sha": "6c7aaa3c7c3994116a442d37ec6d06f30a45cb2f",
      "filename": "bfd/elfxx-mips.c",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elfxx-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/bfd/elfxx-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.c?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -8654,10 +8654,8 @@ _bfd_mips_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n       call_reloc_p = FALSE;\n \n       /* Set CONSTRAIN_SYMBOL_P if we need to take the relocation\n-\t into account when deciding how to define the symbol.\n-\t Relocations in nonallocatable sections such as .pdr and\n-\t .debug* should have no effect.  */\n-      constrain_symbol_p = ((sec->flags & SEC_ALLOC) != 0);\n+\t into account when deciding how to define the symbol.  */\n+      constrain_symbol_p = TRUE;\n \n       switch (r_type)\n \t{"
    },
    {
      "sha": "00066c59c07a987f25b3d32ba8d8eff40769ba00",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -1,3 +1,11 @@\n+2020-06-04  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR ld/26080\n+\t* testsuite/ld-elf/comm-data.exp: Remove copy_reloc.\n+\t* testsuite/ld-elf/comm-data2r.rd: Removed.\n+\t* testsuite/ld-elf/comm-data2r.sd: Likewise.\n+\t* testsuite/ld-elf/comm-data2r.xd: Likewise.\n+\n 2020-06-04  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/config/default.exp: Remove global directive outside"
    },
    {
      "sha": "c735fe244ceeb695daedbbef27fdd2f492ea6451",
      "filename": "ld/testsuite/ld-elf/comm-data.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 12,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c4b126b87a6cd842e567136b07ac1adca98c660f/ld/testsuite/ld-elf/comm-data.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c4b126b87a6cd842e567136b07ac1adca98c660f/ld/testsuite/ld-elf/comm-data.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/comm-data.exp?ref=c4b126b87a6cd842e567136b07ac1adca98c660f",
      "patch": "@@ -79,12 +79,6 @@ setup_xfail \"bfin-*-*\"\n \n setup_xfail \"arm*-*-*\" \"ld/13802\"\n \n-# List targets here that keep copy relocs rather than eliminating\n-# them where possible in favour to dynamic relocs in the relevant\n-# loadable sections; see also the \"-z nocopyreloc\" command-line\n-# option and the ELIMINATE_COPY_RELOCS macro some backends use.\n-set copy_reloc [expr [istarget mn10300-*-*] || [istarget vax-*-*]]\n-\n # Verify that a common symbol has been converted to an undefined\n # reference to the global symbol of the same name defined above\n # and that the debug reference has been dropped.\n@@ -95,12 +89,9 @@ run_ld_link_tests [list \\\n \t\"$AFLAGS\" \\\n \t{ comm-data2.s } \\\n \t[list \\\n-\t    [list readelf -s \\\n-\t\t[expr { $copy_reloc ? \"comm-data2r.sd\" : \"comm-data2.sd\"}]] \\\n-\t    [list readelf -r \\\n-\t\t[expr { $copy_reloc ? \"comm-data2r.rd\" : \"comm-data2.rd\"}]] \\\n-\t    [list readelf \"-x .debug_foo\" \\\n-\t\t[expr { $copy_reloc ? \"comm-data2r.xd\" : \"comm-data2.xd\"}]]] \\\n+\t    [list readelf -s comm-data2.sd] \\\n+\t    [list readelf -r comm-data2.rd] \\\n+\t    [list readelf \"-x .debug_foo\" comm-data2.xd]] \\\n \t\"comm-data\" \\\n     ] \\\n     [list \\"
    },
    {
      "sha": "64c0396d26e96bf254bb333cfc617c218c42cc91",
      "filename": "ld/testsuite/ld-elf/comm-data2r.rd",
      "status": "removed",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cf67587a0980e5fee20cad75f2c1fe01af6e808/ld/testsuite/ld-elf/comm-data2r.rd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cf67587a0980e5fee20cad75f2c1fe01af6e808/ld/testsuite/ld-elf/comm-data2r.rd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/comm-data2r.rd?ref=1cf67587a0980e5fee20cad75f2c1fe01af6e808",
      "patch": "@@ -1,3 +0,0 @@\n-Relocation section '\\.rela\\.dyn' at offset 0x[0-9a-f]+ contains 1 entry:\n- +Offset +Info +Type +Sym\\.Value +Sym\\. Name \\+ Addend\n-0*12340000 +[0-9a-f]+ +R_.*_COPY +0*12340000 +foo \\+ 0"
    },
    {
      "sha": "685b0befd1d6c49552e4a6e4a7aa24932458b1fd",
      "filename": "ld/testsuite/ld-elf/comm-data2r.sd",
      "status": "removed",
      "additions": 0,
      "deletions": 10,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cf67587a0980e5fee20cad75f2c1fe01af6e808/ld/testsuite/ld-elf/comm-data2r.sd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cf67587a0980e5fee20cad75f2c1fe01af6e808/ld/testsuite/ld-elf/comm-data2r.sd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/comm-data2r.sd?ref=1cf67587a0980e5fee20cad75f2c1fe01af6e808",
      "patch": "@@ -1,10 +0,0 @@\n-Symbol table '\\.dynsym' contains [0-9]+ entries:\n- +Num: +Value +Size +Type +Bind +Vis +Ndx +Name\n-#...\n- +[0-9]+: +0*12340000 +4 +OBJECT +GLOBAL +DEFAULT +[0-9]+ +foo\n-#...\n-Symbol table '\\.symtab' contains [0-9]+ entries:\n- +Num: +Value +Size +Type +Bind +Vis +Ndx +Name\n-#...\n- +[0-9]+: +0*12340000 +4 +OBJECT +GLOBAL +DEFAULT +[0-9]+ +foo\n-#pass"
    },
    {
      "sha": "58f6f2a88f106db9903eeaac34f4495002065911",
      "filename": "ld/testsuite/ld-elf/comm-data2r.xd",
      "status": "removed",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cf67587a0980e5fee20cad75f2c1fe01af6e808/ld/testsuite/ld-elf/comm-data2r.xd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cf67587a0980e5fee20cad75f2c1fe01af6e808/ld/testsuite/ld-elf/comm-data2r.xd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/comm-data2r.xd?ref=1cf67587a0980e5fee20cad75f2c1fe01af6e808",
      "patch": "@@ -1,2 +0,0 @@\n-Hex dump of section '\\.debug_foo':\n- +0x0*76540000 (?:12340000 00000000|00003412 00000000|00000000 00003412) 00000000 00000000 .*"
    }
  ]
}