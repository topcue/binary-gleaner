{
  "sha": "6a91be866619c592762cd7e9b034a9f7ad27ef37",
  "node_id": "C_kwDOANOeidoAKDZhOTFiZTg2NjYxOWM1OTI3NjJjZDdlOWIwMzRhOWY3YWQyN2VmMzc",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2022-01-03T14:50:20Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2022-01-12T14:04:29Z"
    },
    "message": "ld: Initial DT_RELR support\n\nAdd a -z pack-relative-relocs option to enable DT_RELR and create a\nrelr.dyn section for DT_RELR.  DT_RELR is implemented with the linker\nrelaxation infrastructure, but it doesn't require the --relax option\nenabled.  -z pack-relative-relocs implies -z combreloc.  -z nocombreloc\nimplies -z nopack-relative-relocs.\n\n-z pack-relative-relocs is chosen over the similar option in lld,\n--pack-dyn-relocs=relr, to implement a glibc binary lockout mechanism\nwith a special glibc version symbol, to avoid random crashes of DT_RELR\nbinaries with the existing glibc binaries.\n\nbfd/\n\n\t* elf-bfd.h (elf_link_hash_table): Add srelrdyn.\n\t* elflink.c (_bfd_elf_link_create_dynamic_sections): Create a\n\t.relr.dyn section for DT_RELR.\n\ninclude/\n\n\t* bfdlink.h (bfd_link_info): Add enable_dt_relr.\n\nld/\n\n\t* News: Mention -z pack-relative-relocs and\n\t-z nopack-relative-relocs.\n\t* ld.texi: Document -z pack-relative-relocs and\n\t-z nopack-relative-relocs.\n\t* ldelf.c (ldelf_after_parse): Disable DT_RELR if not building\n\tPIE nor shared library.  Add 3 spare dynamic tags for DT_RELR,\n\tDT_RELRSZ and DT_RELRENT.\n\t* ldlang.c (lang_relax_sections): Also enable relaxation if\n\tDT_RELR is enabled.\n\t* emulparams/elf32_x86_64.sh: Source dt-relr.sh.\n\t* emulparams/elf_i386.sh: Likewise.\n\t* emulparams/elf_x86_64.sh: Likewise.\n\t* emulparams/dt-relr.sh: New file.\n\t* scripttempl/elf.sc: Support .relr.dyn.",
    "tree": {
      "sha": "0e6f3c1cb84ecdee20857f3ba3f2087bf0425e06",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0e6f3c1cb84ecdee20857f3ba3f2087bf0425e06"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6a91be866619c592762cd7e9b034a9f7ad27ef37",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a91be866619c592762cd7e9b034a9f7ad27ef37",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6a91be866619c592762cd7e9b034a9f7ad27ef37",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6a91be866619c592762cd7e9b034a9f7ad27ef37/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e2cbf4df83fe57892a6aaedf737b84baa6321fa7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e2cbf4df83fe57892a6aaedf737b84baa6321fa7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e2cbf4df83fe57892a6aaedf737b84baa6321fa7"
    }
  ],
  "stats": {
    "total": 65,
    "additions": 64,
    "deletions": 1
  },
  "files": [
    {
      "sha": "7808f87d1f4b887461514e28dc010a7703ced65d",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a91be866619c592762cd7e9b034a9f7ad27ef37/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a91be866619c592762cd7e9b034a9f7ad27ef37/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=6a91be866619c592762cd7e9b034a9f7ad27ef37",
      "patch": "@@ -707,6 +707,7 @@ struct elf_link_hash_table\n   asection *irelplt;\n   asection *irelifunc;\n   asection *dynsym;\n+  asection *srelrdyn;\n };\n \n /* Returns TRUE if the hash table is a struct elf_link_hash_table.  */"
    },
    {
      "sha": "17407f26bc161863c62d4d54bf38e757acadbb95",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a91be866619c592762cd7e9b034a9f7ad27ef37/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a91be866619c592762cd7e9b034a9f7ad27ef37/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=6a91be866619c592762cd7e9b034a9f7ad27ef37",
      "patch": "@@ -359,6 +359,17 @@ _bfd_elf_link_create_dynamic_sections (bfd *abfd, struct bfd_link_info *info)\n \telf_section_data (s)->this_hdr.sh_entsize = 4;\n     }\n \n+  if (info->enable_dt_relr)\n+    {\n+      s = bfd_make_section_anyway_with_flags (abfd, \".relr.dyn\",\n+\t\t\t\t\t      (bed->dynamic_sec_flags\n+\t\t\t\t\t       | SEC_READONLY));\n+      if (s == NULL\n+\t  || !bfd_set_section_alignment (s, bed->s->log_file_align))\n+\treturn false;\n+      elf_hash_table (info)->srelrdyn = s;\n+    }\n+\n   /* Let the backend create the rest of the sections.  This lets the\n      backend set the right flags.  The backend will normally create\n      the .got and .plt sections.  */"
    },
    {
      "sha": "92e3e32360b6c3b9df39f66cc88467993a15f1d9",
      "filename": "include/bfdlink.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a91be866619c592762cd7e9b034a9f7ad27ef37/include/bfdlink.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a91be866619c592762cd7e9b034a9f7ad27ef37/include/bfdlink.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/bfdlink.h?ref=6a91be866619c592762cd7e9b034a9f7ad27ef37",
      "patch": "@@ -413,6 +413,10 @@ struct bfd_link_info\n   /* TRUE if PT_GNU_RELRO segment should be created.  */\n   unsigned int relro: 1;\n \n+  /* TRUE if DT_RELR should be enabled for compact relative\n+     relocations.  */\n+  unsigned int enable_dt_relr: 1;\n+\n   /* TRUE if separate code segment should be created.  */\n   unsigned int separate_code: 1;\n "
    },
    {
      "sha": "77c716b577d05cf8173c06ef08547089c7939031",
      "filename": "ld/NEWS",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a91be866619c592762cd7e9b034a9f7ad27ef37/ld/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a91be866619c592762cd7e9b034a9f7ad27ef37/ld/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/NEWS?ref=6a91be866619c592762cd7e9b034a9f7ad27ef37",
      "patch": "@@ -1,5 +1,8 @@\n -*- text -*-\n \n+* Add -z pack-relative-relocs/-z no pack-relative-relocs to x86 ELF\n+  linker to pack relative relocations in the DT_RELR section.\n+\n * Add support for the LoongArch architecture.\n \n * Add -z indirect-extern-access/-z noindirect-extern-access to x86 ELF"
    },
    {
      "sha": "b2b403ce236a3c9173dc73bde5cbf2e02c08d9ed",
      "filename": "ld/emulparams/dt-relr.sh",
      "status": "added",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a91be866619c592762cd7e9b034a9f7ad27ef37/ld/emulparams/dt-relr.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a91be866619c592762cd7e9b034a9f7ad27ef37/ld/emulparams/dt-relr.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emulparams/dt-relr.sh?ref=6a91be866619c592762cd7e9b034a9f7ad27ef37",
      "patch": "@@ -0,0 +1,18 @@\n+HAVE_DT_RELR=yes\n+PARSE_AND_LIST_OPTIONS_PACK_RELATIVE_RELOCS='\n+  fprintf (file, _(\"\\\n+  -z pack-relative-relocs     Pack relative relocations\\n\"));\n+  fprintf (file, _(\"\\\n+  -z nopack-relative-relocs   Do not pack relative relocations (default)\\n\"));\n+'\n+\n+PARSE_AND_LIST_ARGS_CASE_Z_PACK_RELATIVE_RELOCS='\n+      else if (strcmp (optarg, \"pack-relative-relocs\") == 0)\n+\tlink_info.enable_dt_relr = true;\n+      else if (strcmp (optarg, \"nopack-relative-relocs\") == 0)\n+\tlink_info.enable_dt_relr = false;\n+'\n+\n+\n+PARSE_AND_LIST_OPTIONS=\"$PARSE_AND_LIST_OPTIONS $PARSE_AND_LIST_OPTIONS_PACK_RELATIVE_RELOCS\"\n+PARSE_AND_LIST_ARGS_CASE_Z=\"$PARSE_AND_LIST_ARGS_CASE_Z $PARSE_AND_LIST_ARGS_CASE_Z_PACK_RELATIVE_RELOCS\""
    },
    {
      "sha": "4bff41287c1137336543fcf71ca3c7a2fe333df9",
      "filename": "ld/emulparams/elf32_x86_64.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a91be866619c592762cd7e9b034a9f7ad27ef37/ld/emulparams/elf32_x86_64.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a91be866619c592762cd7e9b034a9f7ad27ef37/ld/emulparams/elf32_x86_64.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emulparams/elf32_x86_64.sh?ref=6a91be866619c592762cd7e9b034a9f7ad27ef37",
      "patch": "@@ -7,6 +7,7 @@ source_sh ${srcdir}/emulparams/cet.sh\n source_sh ${srcdir}/emulparams/x86-report-relative.sh\n source_sh ${srcdir}/emulparams/x86-64-level.sh\n source_sh ${srcdir}/emulparams/static.sh\n+source_sh ${srcdir}/emulparams/dt-relr.sh\n SCRIPT_NAME=elf\n ELFSIZE=32\n OUTPUT_FORMAT=\"elf32-x86-64\""
    },
    {
      "sha": "ae17bb4b3f7e7e4940667a33cebb4a5fd4861c01",
      "filename": "ld/emulparams/elf_i386.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a91be866619c592762cd7e9b034a9f7ad27ef37/ld/emulparams/elf_i386.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a91be866619c592762cd7e9b034a9f7ad27ef37/ld/emulparams/elf_i386.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emulparams/elf_i386.sh?ref=6a91be866619c592762cd7e9b034a9f7ad27ef37",
      "patch": "@@ -6,6 +6,7 @@ source_sh ${srcdir}/emulparams/cet.sh\n source_sh ${srcdir}/emulparams/x86-report-relative.sh\n source_sh ${srcdir}/emulparams/x86-64-level.sh\n source_sh ${srcdir}/emulparams/static.sh\n+source_sh ${srcdir}/emulparams/dt-relr.sh\n SCRIPT_NAME=elf\n OUTPUT_FORMAT=\"elf32-i386\"\n NO_RELA_RELOCS=yes"
    },
    {
      "sha": "5f2743ed409c9db252bbb8416e5fe2eb99dec667",
      "filename": "ld/emulparams/elf_x86_64.sh",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a91be866619c592762cd7e9b034a9f7ad27ef37/ld/emulparams/elf_x86_64.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a91be866619c592762cd7e9b034a9f7ad27ef37/ld/emulparams/elf_x86_64.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emulparams/elf_x86_64.sh?ref=6a91be866619c592762cd7e9b034a9f7ad27ef37",
      "patch": "@@ -8,6 +8,7 @@ source_sh ${srcdir}/emulparams/x86-report-relative.sh\n source_sh ${srcdir}/emulparams/x86-64-level.sh\n source_sh ${srcdir}/emulparams/x86-64-lam.sh\n source_sh ${srcdir}/emulparams/static.sh\n+source_sh ${srcdir}/emulparams/dt-relr.sh\n SCRIPT_NAME=elf\n ELFSIZE=64\n OUTPUT_FORMAT=\"elf64-x86-64\""
    },
    {
      "sha": "1b42c6b562a5d03b6cccb82b0afdc831174866ff",
      "filename": "ld/ld.texi",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a91be866619c592762cd7e9b034a9f7ad27ef37/ld/ld.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a91be866619c592762cd7e9b034a9f7ad27ef37/ld/ld.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ld.texi?ref=6a91be866619c592762cd7e9b034a9f7ad27ef37",
      "patch": "@@ -1430,6 +1430,15 @@ called.\n @item origin\n Specify that the object requires @samp{$ORIGIN} handling in paths.\n \n+@item pack-relative-relocs\n+@itemx nopack-relative-relocs\n+Generate compact relative relocation in position-independent executable\n+and shared library.  It adds @code{DT_RELR}, @code{DT_RELRSZ} and\n+@code{DT_RELRENT} entries to the dynamic section.  It is ignored when\n+building position-dependent executable and relocatable output.\n+@option{nopack-relative-relocs} is the default, which disables compact\n+relative relocation.  Supported for i386 and x86-64.\n+\n @item relro\n @itemx norelro\n Create an ELF @code{PT_GNU_RELRO} segment header in the object.  This"
    },
    {
      "sha": "7a1a553cae7190578de652f6a9bddcb9ead56314",
      "filename": "ld/ldelf.c",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a91be866619c592762cd7e9b034a9f7ad27ef37/ld/ldelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a91be866619c592762cd7e9b034a9f7ad27ef37/ld/ldelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldelf.c?ref=6a91be866619c592762cd7e9b034a9f7ad27ef37",
      "patch": "@@ -71,6 +71,15 @@ ldelf_after_parse (void)\n \teinfo (_(\"%P: warning: -z dynamic-undefined-weak ignored\\n\"));\n       link_info.dynamic_undefined_weak = 0;\n     }\n+\n+  /* Disable DT_RELR if not building PIE nor shared library.  */\n+  if (!bfd_link_pic (&link_info))\n+    link_info.enable_dt_relr = 0;\n+\n+  /* Add 3 spare tags for DT_RELR, DT_RELRSZ and DT_RELRENT.  */\n+  if (link_info.enable_dt_relr)\n+    link_info.spare_dynamic_tags += 3;\n+\n   after_parse_default ();\n   if (link_info.commonpagesize > link_info.maxpagesize)\n     einfo (_(\"%F%P: common page size (0x%v) > maximum page size (0x%v)\\n\"),"
    },
    {
      "sha": "0a24fd854bc9bd41413adbacf3c919f1c09eb274",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a91be866619c592762cd7e9b034a9f7ad27ef37/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a91be866619c592762cd7e9b034a9f7ad27ef37/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=6a91be866619c592762cd7e9b034a9f7ad27ef37",
      "patch": "@@ -7709,7 +7709,8 @@ lang_find_relro_sections (void)\n void\n lang_relax_sections (bool need_layout)\n {\n-  if (RELAXATION_ENABLED)\n+  /* NB: Also enable relaxation to layout sections for DT_RELR.  */\n+  if (RELAXATION_ENABLED || link_info.enable_dt_relr)\n     {\n       /* We may need more than one relaxation pass.  */\n       int i = link_info.relax_pass;"
    },
    {
      "sha": "f3552a4a554d21bd209d75c25b12f1476d413530",
      "filename": "ld/scripttempl/elf.sc",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6a91be866619c592762cd7e9b034a9f7ad27ef37/ld/scripttempl/elf.sc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6a91be866619c592762cd7e9b034a9f7ad27ef37/ld/scripttempl/elf.sc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/scripttempl/elf.sc?ref=6a91be866619c592762cd7e9b034a9f7ad27ef37",
      "patch": "@@ -10,6 +10,7 @@\n #\t\tempty.\n #\tHAVE_NOINIT - Include a .noinit output section in the script.\n #\tHAVE_PERSISTENT - Include a .persistent output section in the script.\n+#\tHAVE_DT_RELR - Include a .relr.dyn output section in the script.\n #\tSMALL_DATA_CTOR - .ctors contains small data.\n #\tSMALL_DATA_DTOR - .dtors contains small data.\n #\tDATA_ADDR - if end-of-text-plus-one-page isn't right for data start\n@@ -520,6 +521,9 @@ emit_dyn()\n     fi\n   fi\n   rm -f ldscripts/dyntmp.$$\n+  if test -n \"${COMBRELOC}\" && test -n \"${HAVE_DT_RELR}\"; then\n+    echo \"  .relr.dyn : { *(.relr.dyn) }\"\n+  fi\n }\n \n test -n \"${NON_ALLOC_DYN}${SEPARATE_CODE}\" || emit_dyn"
    }
  ]
}