{
  "sha": "bdcccc56393c26b86265f94d4fcf55c20c938ab7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmRjY2NjNTYzOTNjMjZiODYyNjVmOTRkNGZjZjU1YzIwYzkzOGFiNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-03-02T20:00:45Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-03-02T20:00:45Z"
    },
    "message": "Use new for ada_symbol_cache\n\nThis changes the ada_symbol_cache to be allocated with 'new' and\nmanaged via unique_ptr.  This simplifies the code somewhat.  Also,\nada_clear_symbol_cache is changed so that it does not allocate a\nsymbol cache just to clear it.\n\ngdb/ChangeLog\n2021-03-02  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-lang.c (struct ada_symbol_cache) <cache_space>: Now an\n\tauto_obstack.\n\t<root>: Initialize.\n\t(ada_pspace_data): Remove destructor.\n\t<sym_cache>: Now a unique_ptr.\n\t(ada_init_symbol_cache, ada_free_symbol_cache): Remove.\n\t(ada_get_symbol_cache): Use 'new'.\n\t(ada_clear_symbol_cache): Rewrite.",
    "tree": {
      "sha": "9818ccbb3b290953aaee11b1828d5baf62084698",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9818ccbb3b290953aaee11b1828d5baf62084698"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bdcccc56393c26b86265f94d4fcf55c20c938ab7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bdcccc56393c26b86265f94d4fcf55c20c938ab7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bdcccc56393c26b86265f94d4fcf55c20c938ab7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bdcccc56393c26b86265f94d4fcf55c20c938ab7/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1228719f312c22a3ce4ade10d175b80ac5cedb08",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1228719f312c22a3ce4ade10d175b80ac5cedb08",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1228719f312c22a3ce4ade10d175b80ac5cedb08"
    }
  ],
  "stats": {
    "total": 62,
    "additions": 22,
    "deletions": 40
  },
  "files": [
    {
      "sha": "8f5bc1d59b1cd5a6f19a4d5f53830d2e38ec98bb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdcccc56393c26b86265f94d4fcf55c20c938ab7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdcccc56393c26b86265f94d4fcf55c20c938ab7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bdcccc56393c26b86265f94d4fcf55c20c938ab7",
      "patch": "@@ -1,3 +1,14 @@\n+2021-03-02  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-lang.c (struct ada_symbol_cache) <cache_space>: Now an\n+\tauto_obstack.\n+\t<root>: Initialize.\n+\t(ada_pspace_data): Remove destructor.\n+\t<sym_cache>: Now a unique_ptr.\n+\t(ada_init_symbol_cache, ada_free_symbol_cache): Remove.\n+\t(ada_get_symbol_cache): Use 'new'.\n+\t(ada_clear_symbol_cache): Rewrite.\n+\n 2021-03-02  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-lang.c (add_nonlocal_symbols): Handle case where objfile->sf"
    },
    {
      "sha": "7ab423bd23558efa6c96b5dcd05f39fbc176e7f9",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 11,
      "deletions": 40,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bdcccc56393c26b86265f94d4fcf55c20c938ab7/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bdcccc56393c26b86265f94d4fcf55c20c938ab7/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=bdcccc56393c26b86265f94d4fcf55c20c938ab7",
      "patch": "@@ -283,14 +283,12 @@ struct cache_entry\n struct ada_symbol_cache\n {\n   /* An obstack used to store the entries in our cache.  */\n-  struct obstack cache_space;\n+  struct auto_obstack cache_space;\n \n   /* The root of the hash table used to implement our symbol cache.  */\n-  struct cache_entry *root[HASH_SIZE];\n+  struct cache_entry *root[HASH_SIZE] {};\n };\n \n-static void ada_free_symbol_cache (struct ada_symbol_cache *sym_cache);\n-\n /* Maximum-sized dynamic type.  */\n static unsigned int varsize_limit;\n \n@@ -385,14 +383,8 @@ ada_inferior_exit (struct inferior *inf)\n /* This module's per-program-space data.  */\n struct ada_pspace_data\n {\n-  ~ada_pspace_data ()\n-  {\n-    if (sym_cache != NULL)\n-      ada_free_symbol_cache (sym_cache);\n-  }\n-\n   /* The Ada symbol cache.  */\n-  struct ada_symbol_cache *sym_cache = nullptr;\n+  std::unique_ptr<ada_symbol_cache> sym_cache;\n };\n \n /* Key to our per-program-space data.  */\n@@ -4604,24 +4596,6 @@ make_array_descriptor (struct type *type, struct value *arr)\n    even in this case, some expensive name-based symbol searches are still\n    sometimes necessary - to find an XVZ variable, mostly.  */\n \n-/* Initialize the contents of SYM_CACHE.  */\n-\n-static void\n-ada_init_symbol_cache (struct ada_symbol_cache *sym_cache)\n-{\n-  obstack_init (&sym_cache->cache_space);\n-  memset (sym_cache->root, '\\000', sizeof (sym_cache->root));\n-}\n-\n-/* Free the memory used by SYM_CACHE.  */\n-\n-static void\n-ada_free_symbol_cache (struct ada_symbol_cache *sym_cache)\n-{\n-  obstack_free (&sym_cache->cache_space, NULL);\n-  xfree (sym_cache);\n-}\n-\n /* Return the symbol cache associated to the given program space PSPACE.\n    If not allocated for this PSPACE yet, allocate and initialize one.  */\n \n@@ -4630,25 +4604,22 @@ ada_get_symbol_cache (struct program_space *pspace)\n {\n   struct ada_pspace_data *pspace_data = get_ada_pspace_data (pspace);\n \n-  if (pspace_data->sym_cache == NULL)\n-    {\n-      pspace_data->sym_cache = XCNEW (struct ada_symbol_cache);\n-      ada_init_symbol_cache (pspace_data->sym_cache);\n-    }\n+  if (pspace_data->sym_cache == nullptr)\n+    pspace_data->sym_cache.reset (new ada_symbol_cache);\n \n-  return pspace_data->sym_cache;\n+  return pspace_data->sym_cache.get ();\n }\n \n /* Clear all entries from the symbol cache.  */\n \n static void\n-ada_clear_symbol_cache (void)\n+ada_clear_symbol_cache ()\n {\n-  struct ada_symbol_cache *sym_cache\n-    = ada_get_symbol_cache (current_program_space);\n+  struct ada_pspace_data *pspace_data\n+    = get_ada_pspace_data (current_program_space);\n \n-  obstack_free (&sym_cache->cache_space, NULL);\n-  ada_init_symbol_cache (sym_cache);\n+  if (pspace_data->sym_cache != nullptr)\n+    pspace_data->sym_cache.reset ();\n }\n \n /* Search our cache for an entry matching NAME and DOMAIN."
    }
  ]
}