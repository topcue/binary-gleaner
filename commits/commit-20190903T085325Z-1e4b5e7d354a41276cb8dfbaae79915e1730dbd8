{
  "sha": "1e4b5e7d354a41276cb8dfbaae79915e1730dbd8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWU0YjVlN2QzNTRhNDEyNzZjYjhkZmJhYWU3OTkxNWUxNzMwZGJkOA==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-09-03T08:53:25Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-09-03T08:53:25Z"
    },
    "message": "Fix a potential buffer overrun in the MMIX disassembler when processing a corrupt input file.\n\n\tPR 24958\n\t* mmix-dis.c (MAX_REG_NAME_LEN): Define.\n\t(MAX_SPEC_REG_NAME_LEN): Define.\n\t(struct mmix_dis_info): Use defined constants for array lengths.\n\t(get_reg_name): New function.\n\t(get_sprec_reg_name): New function.\n\t(print_insn_mmix): Use new functions.",
    "tree": {
      "sha": "160ea2d4f2e38d86148b1b01d9c49569aefe31cc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/160ea2d4f2e38d86148b1b01d9c49569aefe31cc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1e4b5e7d354a41276cb8dfbaae79915e1730dbd8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1e4b5e7d354a41276cb8dfbaae79915e1730dbd8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1e4b5e7d354a41276cb8dfbaae79915e1730dbd8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1e4b5e7d354a41276cb8dfbaae79915e1730dbd8/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6591bf0131d1d1c8c0e4de59ca2dd739dda86ddd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6591bf0131d1d1c8c0e4de59ca2dd739dda86ddd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6591bf0131d1d1c8c0e4de59ca2dd739dda86ddd"
    }
  ],
  "stats": {
    "total": 103,
    "additions": 66,
    "deletions": 37
  },
  "files": [
    {
      "sha": "87e3f74663d7b27641b88e613a83d8d5c513b26c",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1e4b5e7d354a41276cb8dfbaae79915e1730dbd8/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1e4b5e7d354a41276cb8dfbaae79915e1730dbd8/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=1e4b5e7d354a41276cb8dfbaae79915e1730dbd8",
      "patch": "@@ -1,3 +1,13 @@\n+2019-09-03  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 24958\n+\t* mmix-dis.c (MAX_REG_NAME_LEN): Define.\n+\t(MAX_SPEC_REG_NAME_LEN): Define.\n+\t(struct mmix_dis_info): Use defined constants for array lengths.\n+\t(get_reg_name): New function.\n+\t(get_sprec_reg_name): New function.\n+\t(print_insn_mmix): Use new functions.\n+\n 2019-08-27  Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n \n \t* arm-dis.c (mve_opcodes): Add entry for MVE_VMOV_VEC_TO_VEC."
    },
    {
      "sha": "93688d3cb7b14c074d6ec2e8dd5d5449fd64fab3",
      "filename": "opcodes/mmix-dis.c",
      "status": "modified",
      "additions": 56,
      "deletions": 37,
      "changes": 93,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1e4b5e7d354a41276cb8dfbaae79915e1730dbd8/opcodes/mmix-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1e4b5e7d354a41276cb8dfbaae79915e1730dbd8/opcodes/mmix-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/mmix-dis.c?ref=1e4b5e7d354a41276cb8dfbaae79915e1730dbd8",
      "patch": "@@ -54,15 +54,17 @@\n #define INSN_IMMEDIATE_BIT (IMM_OFFSET_BIT << 24)\n #define INSN_BACKWARD_OFFSET_BIT (1 << 24)\n \n+#define MAX_REG_NAME_LEN       256\n+#define MAX_SPEC_REG_NAME_LEN  32\n struct mmix_dis_info\n  {\n-   const char *reg_name[256];\n-   const char *spec_reg_name[32];\n+   const char *reg_name[MAX_REG_NAME_LEN];\n+   const char *spec_reg_name[MAX_SPEC_REG_NAME_LEN];\n \n    /* Waste a little memory so we don't have to allocate each separately.\n       We could have an array with static contents for these, but on the\n       other hand, we don't have to.  */\n-   char basic_reg_name[256][sizeof (\"$255\")];\n+   char basic_reg_name[MAX_REG_NAME_LEN][sizeof (\"$255\")];\n  };\n \n /* Initialize a target-specific array in INFO.  */\n@@ -111,15 +113,15 @@ initialize_mmix_dis_info (struct disassemble_info *info)\n \t  for (i = 0; i < nsyms && syms[i] != NULL; i++)\n \t    {\n \t      if (syms[i]->section == reg_section\n-\t\t  && syms[i]->value < 256\n+\t\t  && syms[i]->value < MAX_REG_NAME_LEN\n \t\t  && minfop->reg_name[syms[i]->value] == NULL)\n \t\tminfop->reg_name[syms[i]->value] = syms[i]->name;\n \t    }\n \t}\n     }\n \n   /* Fill in the rest with the canonical names.  */\n-  for (i = 0; i < 256; i++)\n+  for (i = 0; i < MAX_REG_NAME_LEN; i++)\n     if (minfop->reg_name[i] == NULL)\n       {\n \tsprintf (minfop->basic_reg_name[i], \"$%ld\", i);\n@@ -238,6 +240,22 @@ get_opcode (unsigned long insn)\n   return NULL;\n }\n \n+static inline const char *\n+get_reg_name (const struct mmix_dis_info * minfop, unsigned int x)\n+{\n+  if (x >= MAX_REG_NAME_LEN)\n+    return _(\"*illegal*\");\n+  return minfop->reg_name[x];\n+}\n+\n+static inline const char *\n+get_spec_reg_name (const struct mmix_dis_info * minfop, unsigned int x)\n+{\n+  if (x >= MAX_SPEC_REG_NAME_LEN)\n+    return _(\"*illegal*\");\n+  return minfop->spec_reg_name[x];\n+}\n+\n /* The main disassembly function.  */\n \n int\n@@ -333,15 +351,15 @@ print_insn_mmix (bfd_vma memaddr, struct disassemble_info *info)\n     case mmix_operands_regs:\n       /*  All registers: \"$X,$Y,$Z\".  */\n       (*info->fprintf_func) (info->stream, \"%s,%s,%s\",\n-\t\t\t     minfop->reg_name[x],\n-\t\t\t     minfop->reg_name[y],\n-\t\t\t     minfop->reg_name[z]);\n+\t\t\t     get_reg_name (minfop, x),\n+\t\t\t     get_reg_name (minfop, y),\n+\t\t\t     get_reg_name (minfop, z));\n       break;\n \n     case mmix_operands_reg_yz:\n       /* Like SETH - \"$X,YZ\".  */\n       (*info->fprintf_func) (info->stream, \"%s,0x%x\",\n-\t\t\t     minfop->reg_name[x], y * 256 + z);\n+\t\t\t     get_reg_name (minfop, x), y * 256 + z);\n       break;\n \n     case mmix_operands_regs_z_opt:\n@@ -350,12 +368,13 @@ print_insn_mmix (bfd_vma memaddr, struct disassemble_info *info)\n       /* The regular \"$X,$Y,$Z|Z\".  */\n       if (insn & INSN_IMMEDIATE_BIT)\n \t(*info->fprintf_func) (info->stream, \"%s,%s,%d\",\n-\t\t\t       minfop->reg_name[x], minfop->reg_name[y], z);\n+\t\t\t       get_reg_name (minfop, x),\n+\t\t\t       get_reg_name (minfop, y), z);\n       else\n \t(*info->fprintf_func) (info->stream, \"%s,%s,%s\",\n-\t\t\t       minfop->reg_name[x],\n-\t\t\t       minfop->reg_name[y],\n-\t\t\t       minfop->reg_name[z]);\n+\t\t\t       get_reg_name (minfop, x),\n+\t\t\t       get_reg_name (minfop, y),\n+\t\t\t       get_reg_name (minfop, z));\n       break;\n \n     case mmix_operands_jmp:\n@@ -378,23 +397,23 @@ print_insn_mmix (bfd_vma memaddr, struct disassemble_info *info)\n \t{\n \t  if (insn & INSN_IMMEDIATE_BIT)\n \t    (*info->fprintf_func) (info->stream, \"%s,%s,%d\",\n-\t\t\t\t   minfop->reg_name[x],\n+\t\t\t\t   get_reg_name (minfop, x),\n \t\t\t\t   ROUND_MODE (y), z);\n \t  else\n \t    (*info->fprintf_func) (info->stream, \"%s,%s,%s\",\n-\t\t\t\t   minfop->reg_name[x],\n+\t\t\t\t   get_reg_name (minfop, x),\n \t\t\t\t   ROUND_MODE (y),\n-\t\t\t\t   minfop->reg_name[z]);\n+\t\t\t\t   get_reg_name (minfop, z));\n \t}\n       else\n \t{\n \t  if (insn & INSN_IMMEDIATE_BIT)\n \t    (*info->fprintf_func) (info->stream, \"%s,%d\",\n-\t\t\t\t   minfop->reg_name[x], z);\n+\t\t\t\t   get_reg_name (minfop, x), z);\n \t  else\n \t    (*info->fprintf_func) (info->stream, \"%s,%s\",\n-\t\t\t\t   minfop->reg_name[x],\n-\t\t\t\t   minfop->reg_name[z]);\n+\t\t\t\t   get_reg_name (minfop, x),\n+\t\t\t\t   get_reg_name (minfop, z));\n \t}\n       break;\n \n@@ -408,13 +427,13 @@ print_insn_mmix (bfd_vma memaddr, struct disassemble_info *info)\n \t \"$X,ROUND_MODE,$Z\".  */\n       if (y != 0)\n \t(*info->fprintf_func) (info->stream, \"%s,%s,%s\",\n-\t\t\t       minfop->reg_name[x],\n+\t\t\t       get_reg_name (minfop, x),\n \t\t\t       ROUND_MODE (y),\n-\t\t\t       minfop->reg_name[z]);\n+\t\t\t       get_reg_name (minfop, z));\n       else\n \t(*info->fprintf_func) (info->stream, \"%s,%s\",\n-\t\t\t       minfop->reg_name[x],\n-\t\t\t       minfop->reg_name[z]);\n+\t\t\t       get_reg_name (minfop, x),\n+\t\t\t       get_reg_name (minfop, z));\n       break;\n \n     case mmix_operands_sync:\n@@ -427,22 +446,22 @@ print_insn_mmix (bfd_vma memaddr, struct disassemble_info *info)\n       /* Like SYNCD - \"X,$Y,$Z|Z\".  */\n       if (insn & INSN_IMMEDIATE_BIT)\n \t(*info->fprintf_func) (info->stream, \"%d,%s,%d\",\n-\t\t\t       x, minfop->reg_name[y], z);\n+\t\t\t       x, get_reg_name (minfop, y), z);\n       else\n \t(*info->fprintf_func) (info->stream, \"%d,%s,%s\",\n-\t\t\t       x, minfop->reg_name[y],\n-\t\t\t       minfop->reg_name[z]);\n+\t\t\t       x, get_reg_name (minfop, y),\n+\t\t\t       get_reg_name (minfop, z));\n       break;\n \n     case mmix_operands_neg:\n       /* Like NEG and NEGU - \"$X,Y,$Z|Z\".  */\n       if (insn & INSN_IMMEDIATE_BIT)\n \t(*info->fprintf_func) (info->stream, \"%s,%d,%d\",\n-\t\t\t       minfop->reg_name[x], y, z);\n+\t\t\t       get_reg_name (minfop, x), y, z);\n       else\n \t(*info->fprintf_func) (info->stream, \"%s,%d,%s\",\n-\t\t\t       minfop->reg_name[x], y,\n-\t\t\t       minfop->reg_name[z]);\n+\t\t\t       get_reg_name (minfop, x), y,\n+\t\t\t       get_reg_name (minfop, z));\n       break;\n \n     case mmix_operands_pushj:\n@@ -456,34 +475,34 @@ print_insn_mmix (bfd_vma memaddr, struct disassemble_info *info)\n \n \tinfo->target = memaddr + offset;\n \n-\t(*info->fprintf_func) (info->stream, \"%s,\", minfop->reg_name[x]);\n+\t(*info->fprintf_func) (info->stream, \"%s,\", get_reg_name (minfop, x));\n \t(*info->print_address_func) (memaddr + offset, info);\n       }\n       break;\n \n     case mmix_operands_get:\n       /* GET - \"X,spec_reg\".  */\n       (*info->fprintf_func) (info->stream, \"%s,%s\",\n-\t\t\t     minfop->reg_name[x],\n-\t\t\t     minfop->spec_reg_name[z]);\n+\t\t\t     get_reg_name (minfop, x),\n+\t\t\t     get_spec_reg_name (minfop, z));\n       break;\n \n     case mmix_operands_put:\n       /* PUT - \"spec_reg,$Z|Z\".  */\n       if (insn & INSN_IMMEDIATE_BIT)\n \t(*info->fprintf_func) (info->stream, \"%s,%d\",\n-\t\t\t       minfop->spec_reg_name[x], z);\n+\t\t\t       get_spec_reg_name (minfop, x), z);\n       else\n \t(*info->fprintf_func) (info->stream, \"%s,%s\",\n-\t\t\t       minfop->spec_reg_name[x],\n-\t\t\t       minfop->reg_name[z]);\n+\t\t\t       get_spec_reg_name (minfop, x),\n+\t\t\t       get_reg_name (minfop, z));\n       break;\n \n     case mmix_operands_set:\n       /*  Two registers, \"$X,$Y\".  */\n       (*info->fprintf_func) (info->stream, \"%s,%s\",\n-\t\t\t     minfop->reg_name[x],\n-\t\t\t     minfop->reg_name[y]);\n+\t\t\t     get_reg_name (minfop, x),\n+\t\t\t     get_reg_name (minfop, y));\n       break;\n \n     case mmix_operands_save:"
    }
  ]
}