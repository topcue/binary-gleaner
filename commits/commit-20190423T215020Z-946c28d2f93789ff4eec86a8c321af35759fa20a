{
  "sha": "946c28d2f93789ff4eec86a8c321af35759fa20a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTQ2YzI4ZDJmOTM3ODlmZjRlZWM4NmE4YzMyMWFmMzU3NTlmYTIwYQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-10T18:21:40Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-23T21:50:20Z"
    },
    "message": "gdb/lm32: Use default gdbarch methods where possible\n\nMake use of the default gdbarch methods for gdbarch_dummy_id,\ngdbarch_unwind_pc, and gdbarch_unwind_sp where possible.\n\nI have not tested this change but, by inspecting the code, I believe\nthe default methods are equivalent to the code being deleted.\n\ngdb/ChangeLog:\n\n\t* gdb/lm32-tdep.c (lm32_unwind_sp): Delete.\n\t(lm32_unwind_pc): Delete.\n\t(lm32_dummy_id): Delete.\n\t(lm32_gdbarch_init): Don't register deleted functions with\n\tgdbarch.",
    "tree": {
      "sha": "a5d32de4dcaeb262b9d5d4fc039957ad1735cf15",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a5d32de4dcaeb262b9d5d4fc039957ad1735cf15"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/946c28d2f93789ff4eec86a8c321af35759fa20a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/946c28d2f93789ff4eec86a8c321af35759fa20a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/946c28d2f93789ff4eec86a8c321af35759fa20a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/946c28d2f93789ff4eec86a8c321af35759fa20a/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bf12844a68f3f4f267846a19df6a280f53e7ec5f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf12844a68f3f4f267846a19df6a280f53e7ec5f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bf12844a68f3f4f267846a19df6a280f53e7ec5f"
    }
  ],
  "stats": {
    "total": 31,
    "additions": 8,
    "deletions": 23
  },
  "files": [
    {
      "sha": "36502182181e742361e3a010057faa968c93c232",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/946c28d2f93789ff4eec86a8c321af35759fa20a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/946c28d2f93789ff4eec86a8c321af35759fa20a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=946c28d2f93789ff4eec86a8c321af35759fa20a",
      "patch": "@@ -1,3 +1,11 @@\n+2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb/lm32-tdep.c (lm32_unwind_sp): Delete.\n+\t(lm32_unwind_pc): Delete.\n+\t(lm32_dummy_id): Delete.\n+\t(lm32_gdbarch_init): Don't register deleted functions with\n+\tgdbarch.\n+\n 2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb/iq2000-tdep.c (iq2000_unwind_sp): Delete."
    },
    {
      "sha": "1f746d250cdca51df1479fe085a906cf01281cfa",
      "filename": "gdb/lm32-tdep.c",
      "status": "modified",
      "additions": 0,
      "deletions": 23,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/946c28d2f93789ff4eec86a8c321af35759fa20a/gdb/lm32-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/946c28d2f93789ff4eec86a8c321af35759fa20a/gdb/lm32-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/lm32-tdep.c?ref=946c28d2f93789ff4eec86a8c321af35759fa20a",
      "patch": "@@ -383,26 +383,6 @@ lm32_return_value (struct gdbarch *gdbarch, struct value *function,\n   return RETURN_VALUE_REGISTER_CONVENTION;\n }\n \n-static CORE_ADDR\n-lm32_unwind_pc (struct gdbarch *gdbarch, struct frame_info *next_frame)\n-{\n-  return frame_unwind_register_unsigned (next_frame, SIM_LM32_PC_REGNUM);\n-}\n-\n-static CORE_ADDR\n-lm32_unwind_sp (struct gdbarch *gdbarch, struct frame_info *next_frame)\n-{\n-  return frame_unwind_register_unsigned (next_frame, SIM_LM32_SP_REGNUM);\n-}\n-\n-static struct frame_id\n-lm32_dummy_id (struct gdbarch *gdbarch, struct frame_info *this_frame)\n-{\n-  CORE_ADDR sp = get_frame_register_unsigned (this_frame, SIM_LM32_SP_REGNUM);\n-\n-  return frame_id_build (sp, get_frame_pc (this_frame));\n-}\n-\n /* Put here the code to store, into fi->saved_regs, the addresses of\n    the saved registers of frame described by FRAME_INFO.  This\n    includes special registers such as pc and fp saved in special ways\n@@ -552,9 +532,6 @@ lm32_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   /* Frame unwinding.  */\n   set_gdbarch_frame_align (gdbarch, lm32_frame_align);\n   frame_base_set_default (gdbarch, &lm32_frame_base);\n-  set_gdbarch_unwind_pc (gdbarch, lm32_unwind_pc);\n-  set_gdbarch_unwind_sp (gdbarch, lm32_unwind_sp);\n-  set_gdbarch_dummy_id (gdbarch, lm32_dummy_id);\n   frame_unwind_append_unwinder (gdbarch, &lm32_frame_unwind);\n \n   /* Breakpoints.  */"
    }
  ]
}