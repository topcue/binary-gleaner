{
  "sha": "d05e24e61a7dc22076568a59b3d4bbbd63ca764c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDA1ZTI0ZTYxYTdkYzIyMDc2NTY4YTU5YjNkNGJiYmQ2M2NhNzY0Yw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:11Z"
    },
    "message": "Split out ada_abs\n\nThis splits UNOP_ABS into a new function for future use.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* ada-lang.c (ada_abs): New function.\n\t(ada_evaluate_subexp): Use it.",
    "tree": {
      "sha": "e7a93c232f07d09a7ffca38fef5f1915f475fafe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e7a93c232f07d09a7ffca38fef5f1915f475fafe"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d05e24e61a7dc22076568a59b3d4bbbd63ca764c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d05e24e61a7dc22076568a59b3d4bbbd63ca764c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d05e24e61a7dc22076568a59b3d4bbbd63ca764c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d05e24e61a7dc22076568a59b3d4bbbd63ca764c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "68c757358fc3d41ec26b2159cdbcac4f757dc3a2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/68c757358fc3d41ec26b2159cdbcac4f757dc3a2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/68c757358fc3d41ec26b2159cdbcac4f757dc3a2"
    }
  ],
  "stats": {
    "total": 26,
    "additions": 21,
    "deletions": 5
  },
  "files": [
    {
      "sha": "7fb5e9b30d5dc5d953ada84b4efbf4b1baa767e0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d05e24e61a7dc22076568a59b3d4bbbd63ca764c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d05e24e61a7dc22076568a59b3d4bbbd63ca764c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d05e24e61a7dc22076568a59b3d4bbbd63ca764c",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* ada-lang.c (ada_abs): New function.\n+\t(ada_evaluate_subexp): Use it.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* ada-lang.c (ada_atr_size): New function."
    },
    {
      "sha": "cf84cf00563525906c90100e0691d3da3e79b2db",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 16,
      "deletions": 5,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d05e24e61a7dc22076568a59b3d4bbbd63ca764c/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d05e24e61a7dc22076568a59b3d4bbbd63ca764c/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=d05e24e61a7dc22076568a59b3d4bbbd63ca764c",
      "patch": "@@ -10050,6 +10050,21 @@ ada_atr_size (struct type *expect_type,\n \t\t\t       TARGET_CHAR_BIT * TYPE_LENGTH (type));\n }\n \n+/* A helper function for UNOP_ABS.  */\n+\n+static value *\n+ada_abs (struct type *expect_type,\n+\t struct expression *exp,\n+\t enum noside noside, enum exp_opcode op,\n+\t struct value *arg1)\n+{\n+  unop_promote (exp->language_defn, exp->gdbarch, &arg1);\n+  if (value_less (arg1, value_zero (value_type (arg1), not_lval)))\n+    return value_neg (arg1);\n+  else\n+    return arg1;\n+}\n+\n /* Implement the evaluate_exp routine in the exp_descriptor structure\n    for the Ada language.  */\n \n@@ -10870,11 +10885,7 @@ ada_evaluate_subexp (struct type *expect_type, struct expression *exp,\n       arg1 = evaluate_subexp (nullptr, exp, pos, noside);\n       if (noside == EVAL_SKIP)\n \tgoto nosideret;\n-      unop_promote (exp->language_defn, exp->gdbarch, &arg1);\n-      if (value_less (arg1, value_zero (value_type (arg1), not_lval)))\n-\treturn value_neg (arg1);\n-      else\n-\treturn arg1;\n+      return ada_abs (expect_type, exp, noside, op, arg1);\n \n     case UNOP_IND:\n       preeval_pos = *pos;"
    }
  ]
}