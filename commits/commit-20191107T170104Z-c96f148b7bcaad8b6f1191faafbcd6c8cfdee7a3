{
  "sha": "c96f148b7bcaad8b6f1191faafbcd6c8cfdee7a3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Yzk2ZjE0OGI3YmNhYWQ4YjZmMTE5MWZhYWZiY2Q2YzhjZmRlZTdhMw==",
  "commit": {
    "author": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2019-11-07T17:01:04Z"
    },
    "committer": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2019-11-07T17:01:04Z"
    },
    "message": "[Patch][binutils] Generic support for parsing numbers in bfloat16 format [5/X]\n\nHi,\n\nThis patch is part of a series that adds support for Armv8.6-A\n(Matrix Multiply and BFloat16 extensions).\n\nThis patch contains some general refactoring of the atof_ieee\nfunction, exposing a function that allows a higher level of control\nover the format of IEEE-like floating point numbers.\nThis has been done in order to be able to add a directive for assembling\nfloating point literals in the bfloat16 format in the following patches.\n\nCommitted on behalf of Mihail Ionescu.\n\nTested on arm-none-eabi, arm-none-linux-gnueabihf, aarch64-none-elf\nand aarch64-none-linux-gnuwith no issues.\n\ngas/ChangeLog:\n\n2019-10-21  Mihail Ionescu  <mihail.ionescu@arm.com>\n2019-10-21  Barnaby Wilks  <barnaby.wilks@arm.com>\n\n\t* as.h (atof_ieee_detail): Add prototype for atof_ieee_detail function.\n\t(atof_ieee): Move some code into the atof_ieee_detail function.\n\t(atof_ieee_detail): Add function that provides a higher level of control over generating\n\tIEEE-like numbers.\n\nIs it ok for trunk?\n\nRegards,\nMihail",
    "tree": {
      "sha": "46fe9cbb482a2d65e88967230a0587ac0d8e92a6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/46fe9cbb482a2d65e88967230a0587ac0d8e92a6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c96f148b7bcaad8b6f1191faafbcd6c8cfdee7a3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c96f148b7bcaad8b6f1191faafbcd6c8cfdee7a3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c96f148b7bcaad8b6f1191faafbcd6c8cfdee7a3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c96f148b7bcaad8b6f1191faafbcd6c8cfdee7a3/comments",
  "author": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aab2c27d9f01d667f1b3356fbca2d931bfa6c599",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/aab2c27d9f01d667f1b3356fbca2d931bfa6c599"
    }
  ],
  "stats": {
    "total": 92,
    "additions": 63,
    "deletions": 29
  },
  "files": [
    {
      "sha": "3b94f2975a04b013a6652edd8c2bae3d9f240a24",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c96f148b7bcaad8b6f1191faafbcd6c8cfdee7a3/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c96f148b7bcaad8b6f1191faafbcd6c8cfdee7a3/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=c96f148b7bcaad8b6f1191faafbcd6c8cfdee7a3",
      "patch": "@@ -1,3 +1,11 @@\n+2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n+2019-11-07  Barnaby Wilks  <barnaby.wilks@arm.com>\n+\n+\t* as.h (atof_ieee_detail): Add prototype for atof_ieee_detail function.\n+\t(atof_ieee): Move some code into the atof_ieee_detail function.\n+\t(atof_ieee_detail): Add function that provides a higher level of\n+\tcontrol over generating IEEE-like numbers.\n+\n 2019-11-07  Mihail Ionescu  <mihail.ionescu@arm.com>\n 2019-11-07  Matthew Malcomson  <matthew.malcomson@arm.com>\n "
    },
    {
      "sha": "d996697bed8784260a8f5400ac0c72254e4d0387",
      "filename": "gas/as.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c96f148b7bcaad8b6f1191faafbcd6c8cfdee7a3/gas/as.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c96f148b7bcaad8b6f1191faafbcd6c8cfdee7a3/gas/as.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/as.h?ref=c96f148b7bcaad8b6f1191faafbcd6c8cfdee7a3",
      "patch": "@@ -484,6 +484,7 @@ char * app_push (void);\n #define MAX_LITTLENUMS 6\n \n char * atof_ieee (char *, int, LITTLENUM_TYPE *);\n+char * atof_ieee_detail (char *, int, int, LITTLENUM_TYPE *, FLONUM_TYPE *);\n const char * ieee_md_atof (int, char *, int *, bfd_boolean);\n const char * vax_md_atof (int, char *, int *);\n char * input_scrub_include_file (const char *, char *);"
    },
    {
      "sha": "03f90bea75d8e29c5ed9b6a97c44c75dfd63eef9",
      "filename": "gas/config/atof-ieee.c",
      "status": "modified",
      "additions": 54,
      "deletions": 29,
      "changes": 83,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c96f148b7bcaad8b6f1191faafbcd6c8cfdee7a3/gas/config/atof-ieee.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c96f148b7bcaad8b6f1191faafbcd6c8cfdee7a3/gas/config/atof-ieee.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/atof-ieee.c?ref=c96f148b7bcaad8b6f1191faafbcd6c8cfdee7a3",
      "patch": "@@ -146,29 +146,30 @@ make_invalid_floating_point_number (LITTLENUM_TYPE *words)\n   words[4] = (LITTLENUM_TYPE) -1;\n   words[5] = (LITTLENUM_TYPE) -1;\n }\n-\f\n-/* Warning: This returns 16-bit LITTLENUMs.  It is up to the caller to\n-   figure out any alignment problems and to conspire for the\n-   bytes/word to be emitted in the right order.  Bigendians beware!  */\n \n-/* Note that atof-ieee always has X and P precisions enabled.  it is up\n-   to md_atof to filter them out if the target machine does not support\n-   them.  */\n+/* Build a floating point constant at str into a IEEE floating\n+   point number.  This function does the same thing as atof_ieee\n+   however it allows more control over the exact format, i.e.\n+   explicitly specifying the precision and number of exponent bits\n+   instead of relying on this infomation being deduced from a given type.\n \n-/* Returns pointer past text consumed.  */\n+   If generic_float_info is not NULL then it will be set to contain generic\n+   infomation about the parsed floating point number.\n \n+   Returns pointer past text consumed. */\n char *\n-atof_ieee (char *str,\t\t\t/* Text to convert to binary.  */\n-\t   int what_kind,\t\t/* 'd', 'f', 'x', 'p'.  */\n-\t   LITTLENUM_TYPE *words)\t/* Build the binary here.  */\n+atof_ieee_detail (char * str,\n+\t\t  int precision,\n+\t\t  int exponent_bits,\n+\t\t  LITTLENUM_TYPE * words,\n+\t\t  FLONUM_TYPE * generic_float_info)\n {\n   /* Extra bits for zeroed low-order bits.\n      The 1st MAX_PRECISION are zeroed, the last contain flonum bits.  */\n   static LITTLENUM_TYPE bits[MAX_PRECISION + MAX_PRECISION + GUARD];\n   char *return_value;\n+\n   /* Number of 16-bit words in the format.  */\n-  int precision;\n-  long exponent_bits;\n   FLONUM_TYPE save_gen_flonum;\n \n   /* We have to save the generic_floating_point_number because it\n@@ -189,6 +190,45 @@ atof_ieee (char *str,\t\t\t/* Text to convert to binary.  */\n \n   memset (bits, '\\0', sizeof (LITTLENUM_TYPE) * MAX_PRECISION);\n \n+  generic_floating_point_number.high\n+    = generic_floating_point_number.low + precision - 1 + GUARD;\n+\n+  if (atof_generic (&return_value, \".\", EXP_CHARS,\n+\t\t    &generic_floating_point_number))\n+    {\n+      make_invalid_floating_point_number (words);\n+      return NULL;\n+    }\n+\n+  if (generic_float_info)\n+    *generic_float_info = generic_floating_point_number;\n+\n+  gen_to_words (words, precision, exponent_bits);\n+\n+  /* Restore the generic_floating_point_number's storage alloc (and\n+     everything else).  */\n+  generic_floating_point_number = save_gen_flonum;\n+\n+  return return_value;\n+}\n+\n+/* Warning: This returns 16-bit LITTLENUMs.  It is up to the caller to\n+   figure out any alignment problems and to conspire for the\n+   bytes/word to be emitted in the right order.  Bigendians beware!  */\n+\n+/* Note that atof-ieee always has X and P precisions enabled.  it is up\n+   to md_atof to filter them out if the target machine does not support\n+   them.  */\n+\n+/* Returns pointer past text consumed.  */\n+char *\n+atof_ieee (char *str,\t\t\t/* Text to convert to binary.  */\n+\t   int what_kind,\t\t/* 'd', 'f', 'x', 'p'.  */\n+\t   LITTLENUM_TYPE *words)\t/* Build the binary here.  */\n+{\n+  int precision;\n+  long exponent_bits;\n+\n   switch (what_kind)\n     {\n     case 'h':\n@@ -232,22 +272,7 @@ atof_ieee (char *str,\t\t\t/* Text to convert to binary.  */\n       return (NULL);\n     }\n \n-  generic_floating_point_number.high\n-    = generic_floating_point_number.low + precision - 1 + GUARD;\n-\n-  if (atof_generic (&return_value, \".\", EXP_CHARS,\n-\t\t    &generic_floating_point_number))\n-    {\n-      make_invalid_floating_point_number (words);\n-      return NULL;\n-    }\n-  gen_to_words (words, precision, exponent_bits);\n-\n-  /* Restore the generic_floating_point_number's storage alloc (and\n-     everything else).  */\n-  generic_floating_point_number = save_gen_flonum;\n-\n-  return return_value;\n+  return atof_ieee_detail (str, precision, exponent_bits, words, NULL);\n }\n \n /* Turn generic_floating_point_number into a real float/double/extended.  */"
    }
  ]
}