{
  "sha": "c90ec28ae44ebf72d57d58439d02fc5aab90f1f6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzkwZWMyOGFlNDRlYmY3MmQ1N2Q1ODQzOWQwMmZjNWFhYjkwZjFmNg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-26T15:28:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-26T15:28:15Z"
    },
    "message": "Move code to new file dwarf2/macro.c\n\nThis moves some more code out of dwarf2/read.c, introducing new files\ndwarf2/macro.c and dwarf2/macro.h.\n\ngdb/ChangeLog\n2020-03-26  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (dwarf2_macro_malformed_definition_complaint)\n\t(macro_start_file, consume_improper_spaces)\n\t(parse_macro_definition, skip_form_bytes, skip_unknown_opcode)\n\t(dwarf_parse_macro_header, dwarf_decode_macro_bytes)\n\t(dwarf_decode_macros): Move to macro.c.\n\t* dwarf2/macro.c: New file.\n\t* dwarf2/macro.h: New file.\n\t* Makefile.in (COMMON_SFILES): Add dwarf2/macro.c.",
    "tree": {
      "sha": "b8d04f025c5bdeaa2d32d6e89a5c788a3851bbfb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b8d04f025c5bdeaa2d32d6e89a5c788a3851bbfb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c90ec28ae44ebf72d57d58439d02fc5aab90f1f6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c90ec28ae44ebf72d57d58439d02fc5aab90f1f6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c90ec28ae44ebf72d57d58439d02fc5aab90f1f6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c90ec28ae44ebf72d57d58439d02fc5aab90f1f6/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4f44ae6c69b839712a33a46aaa62d58d2b16b4ca",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4f44ae6c69b839712a33a46aaa62d58d2b16b4ca",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4f44ae6c69b839712a33a46aaa62d58d2b16b4ca"
    }
  ],
  "stats": {
    "total": 1744,
    "additions": 914,
    "deletions": 830
  },
  "files": [
    {
      "sha": "70b58f22455c948f3c2f642c07442f0792582507",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c90ec28ae44ebf72d57d58439d02fc5aab90f1f6/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c90ec28ae44ebf72d57d58439d02fc5aab90f1f6/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c90ec28ae44ebf72d57d58439d02fc5aab90f1f6",
      "patch": "@@ -1,3 +1,14 @@\n+2020-03-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (dwarf2_macro_malformed_definition_complaint)\n+\t(macro_start_file, consume_improper_spaces)\n+\t(parse_macro_definition, skip_form_bytes, skip_unknown_opcode)\n+\t(dwarf_parse_macro_header, dwarf_decode_macro_bytes)\n+\t(dwarf_decode_macros): Move to macro.c.\n+\t* dwarf2/macro.c: New file.\n+\t* dwarf2/macro.h: New file.\n+\t* Makefile.in (COMMON_SFILES): Add dwarf2/macro.c.\n+\n 2020-03-26  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/section.h (struct dwarf2_section_info) <read_string>: New"
    },
    {
      "sha": "f66affd3e5fe0015f0e41c78272aa3f2f4e80ada",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c90ec28ae44ebf72d57d58439d02fc5aab90f1f6/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c90ec28ae44ebf72d57d58439d02fc5aab90f1f6/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=c90ec28ae44ebf72d57d58439d02fc5aab90f1f6",
      "patch": "@@ -1013,6 +1013,7 @@ COMMON_SFILES = \\\n \tdwarf2/leb.c \\\n \tdwarf2/line-header.c \\\n \tdwarf2/loc.c \\\n+\tdwarf2/macro.c \\\n \tdwarf2/read.c \\\n \tdwarf2/section.c \\\n \teval.c \\"
    },
    {
      "sha": "1f1cca858c143d9d2495a897093bbbd5f517b522",
      "filename": "gdb/dwarf2/macro.c",
      "status": "added",
      "additions": 867,
      "deletions": 0,
      "changes": 867,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c90ec28ae44ebf72d57d58439d02fc5aab90f1f6/gdb/dwarf2/macro.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c90ec28ae44ebf72d57d58439d02fc5aab90f1f6/gdb/dwarf2/macro.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/macro.c?ref=c90ec28ae44ebf72d57d58439d02fc5aab90f1f6",
      "patch": "@@ -0,0 +1,867 @@\n+/* Read DWARF macro information\n+\n+   Copyright (C) 1994-2020 Free Software Foundation, Inc.\n+\n+   Adapted by Gary Funck (gary@intrepid.com), Intrepid Technology,\n+   Inc.  with support from Florida State University (under contract\n+   with the Ada Joint Program Office), and Silicon Graphics, Inc.\n+   Initial contribution by Brent Benson, Harris Computer Systems, Inc.,\n+   based on Fred Fish's (Cygnus Support) implementation of DWARF 1\n+   support.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"dwarf2/read.h\"\n+#include \"dwarf2/leb.h\"\n+#include \"dwarf2/expr.h\"\n+#include \"dwarf2/line-header.h\"\n+#include \"dwarf2/section.h\"\n+#include \"dwarf2/macro.h\"\n+#include \"dwarf2/dwz.h\"\n+#include \"buildsym.h\"\n+#include \"macrotab.h\"\n+#include \"complaints.h\"\n+\n+static void\n+dwarf2_macro_malformed_definition_complaint (const char *arg1)\n+{\n+  complaint (_(\"macro debug info contains a \"\n+\t       \"malformed macro definition:\\n`%s'\"),\n+\t     arg1);\n+}\n+\n+static struct macro_source_file *\n+macro_start_file (buildsym_compunit *builder,\n+\t\t  int file, int line,\n+                  struct macro_source_file *current_file,\n+                  struct line_header *lh)\n+{\n+  /* File name relative to the compilation directory of this source file.  */\n+  gdb::unique_xmalloc_ptr<char> file_name = lh->file_file_name (file);\n+\n+  if (! current_file)\n+    {\n+      /* Note: We don't create a macro table for this compilation unit\n+\t at all until we actually get a filename.  */\n+      struct macro_table *macro_table = builder->get_macro_table ();\n+\n+      /* If we have no current file, then this must be the start_file\n+\t directive for the compilation unit's main source file.  */\n+      current_file = macro_set_main (macro_table, file_name.get ());\n+      macro_define_special (macro_table);\n+    }\n+  else\n+    current_file = macro_include (current_file, line, file_name.get ());\n+\n+  return current_file;\n+}\n+\n+static const char *\n+consume_improper_spaces (const char *p, const char *body)\n+{\n+  if (*p == ' ')\n+    {\n+      complaint (_(\"macro definition contains spaces \"\n+\t\t   \"in formal argument list:\\n`%s'\"),\n+\t\t body);\n+\n+      while (*p == ' ')\n+        p++;\n+    }\n+\n+  return p;\n+}\n+\n+\n+static void\n+parse_macro_definition (struct macro_source_file *file, int line,\n+                        const char *body)\n+{\n+  const char *p;\n+\n+  /* The body string takes one of two forms.  For object-like macro\n+     definitions, it should be:\n+\n+        <macro name> \" \" <definition>\n+\n+     For function-like macro definitions, it should be:\n+\n+        <macro name> \"() \" <definition>\n+     or\n+        <macro name> \"(\" <arg name> ( \",\" <arg name> ) * \") \" <definition>\n+\n+     Spaces may appear only where explicitly indicated, and in the\n+     <definition>.\n+\n+     The Dwarf 2 spec says that an object-like macro's name is always\n+     followed by a space, but versions of GCC around March 2002 omit\n+     the space when the macro's definition is the empty string.\n+\n+     The Dwarf 2 spec says that there should be no spaces between the\n+     formal arguments in a function-like macro's formal argument list,\n+     but versions of GCC around March 2002 include spaces after the\n+     commas.  */\n+\n+\n+  /* Find the extent of the macro name.  The macro name is terminated\n+     by either a space or null character (for an object-like macro) or\n+     an opening paren (for a function-like macro).  */\n+  for (p = body; *p; p++)\n+    if (*p == ' ' || *p == '(')\n+      break;\n+\n+  if (*p == ' ' || *p == '\\0')\n+    {\n+      /* It's an object-like macro.  */\n+      int name_len = p - body;\n+      std::string name (body, name_len);\n+      const char *replacement;\n+\n+      if (*p == ' ')\n+        replacement = body + name_len + 1;\n+      else\n+        {\n+\t  dwarf2_macro_malformed_definition_complaint (body);\n+          replacement = body + name_len;\n+        }\n+\n+      macro_define_object (file, line, name.c_str (), replacement);\n+    }\n+  else if (*p == '(')\n+    {\n+      /* It's a function-like macro.  */\n+      std::string name (body, p - body);\n+      int argc = 0;\n+      int argv_size = 1;\n+      char **argv = XNEWVEC (char *, argv_size);\n+\n+      p++;\n+\n+      p = consume_improper_spaces (p, body);\n+\n+      /* Parse the formal argument list.  */\n+      while (*p && *p != ')')\n+        {\n+          /* Find the extent of the current argument name.  */\n+          const char *arg_start = p;\n+\n+          while (*p && *p != ',' && *p != ')' && *p != ' ')\n+            p++;\n+\n+          if (! *p || p == arg_start)\n+\t    dwarf2_macro_malformed_definition_complaint (body);\n+          else\n+            {\n+              /* Make sure argv has room for the new argument.  */\n+              if (argc >= argv_size)\n+                {\n+                  argv_size *= 2;\n+                  argv = XRESIZEVEC (char *, argv, argv_size);\n+                }\n+\n+              argv[argc++] = savestring (arg_start, p - arg_start);\n+            }\n+\n+          p = consume_improper_spaces (p, body);\n+\n+          /* Consume the comma, if present.  */\n+          if (*p == ',')\n+            {\n+              p++;\n+\n+              p = consume_improper_spaces (p, body);\n+            }\n+        }\n+\n+      if (*p == ')')\n+        {\n+          p++;\n+\n+          if (*p == ' ')\n+            /* Perfectly formed definition, no complaints.  */\n+            macro_define_function (file, line, name.c_str (),\n+                                   argc, (const char **) argv,\n+                                   p + 1);\n+          else if (*p == '\\0')\n+            {\n+              /* Complain, but do define it.  */\n+\t      dwarf2_macro_malformed_definition_complaint (body);\n+              macro_define_function (file, line, name.c_str (),\n+                                     argc, (const char **) argv,\n+                                     p);\n+            }\n+          else\n+            /* Just complain.  */\n+\t    dwarf2_macro_malformed_definition_complaint (body);\n+        }\n+      else\n+        /* Just complain.  */\n+\tdwarf2_macro_malformed_definition_complaint (body);\n+\n+      {\n+        int i;\n+\n+        for (i = 0; i < argc; i++)\n+          xfree (argv[i]);\n+      }\n+      xfree (argv);\n+    }\n+  else\n+    dwarf2_macro_malformed_definition_complaint (body);\n+}\n+\n+/* Skip some bytes from BYTES according to the form given in FORM.\n+   Returns the new pointer.  */\n+\n+static const gdb_byte *\n+skip_form_bytes (bfd *abfd, const gdb_byte *bytes, const gdb_byte *buffer_end,\n+\t\t enum dwarf_form form,\n+\t\t unsigned int offset_size,\n+\t\t struct dwarf2_section_info *section)\n+{\n+  unsigned int bytes_read;\n+\n+  switch (form)\n+    {\n+    case DW_FORM_data1:\n+    case DW_FORM_flag:\n+      ++bytes;\n+      break;\n+\n+    case DW_FORM_data2:\n+      bytes += 2;\n+      break;\n+\n+    case DW_FORM_data4:\n+      bytes += 4;\n+      break;\n+\n+    case DW_FORM_data8:\n+      bytes += 8;\n+      break;\n+\n+    case DW_FORM_data16:\n+      bytes += 16;\n+      break;\n+\n+    case DW_FORM_string:\n+      read_direct_string (abfd, bytes, &bytes_read);\n+      bytes += bytes_read;\n+      break;\n+\n+    case DW_FORM_sec_offset:\n+    case DW_FORM_strp:\n+    case DW_FORM_GNU_strp_alt:\n+      bytes += offset_size;\n+      break;\n+\n+    case DW_FORM_block:\n+      bytes += read_unsigned_leb128 (abfd, bytes, &bytes_read);\n+      bytes += bytes_read;\n+      break;\n+\n+    case DW_FORM_block1:\n+      bytes += 1 + read_1_byte (abfd, bytes);\n+      break;\n+    case DW_FORM_block2:\n+      bytes += 2 + read_2_bytes (abfd, bytes);\n+      break;\n+    case DW_FORM_block4:\n+      bytes += 4 + read_4_bytes (abfd, bytes);\n+      break;\n+\n+    case DW_FORM_addrx:\n+    case DW_FORM_sdata:\n+    case DW_FORM_strx:\n+    case DW_FORM_udata:\n+    case DW_FORM_GNU_addr_index:\n+    case DW_FORM_GNU_str_index:\n+      bytes = gdb_skip_leb128 (bytes, buffer_end);\n+      if (bytes == NULL)\n+\t{\n+\t  section->overflow_complaint ();\n+\t  return NULL;\n+\t}\n+      break;\n+\n+    case DW_FORM_implicit_const:\n+      break;\n+\n+    default:\n+      {\n+\tcomplaint (_(\"invalid form 0x%x in `%s'\"),\n+\t\t   form, section->get_name ());\n+\treturn NULL;\n+      }\n+    }\n+\n+  return bytes;\n+}\n+\n+/* A helper for dwarf_decode_macros that handles skipping an unknown\n+   opcode.  Returns an updated pointer to the macro data buffer; or,\n+   on error, issues a complaint and returns NULL.  */\n+\n+static const gdb_byte *\n+skip_unknown_opcode (unsigned int opcode,\n+\t\t     const gdb_byte **opcode_definitions,\n+\t\t     const gdb_byte *mac_ptr, const gdb_byte *mac_end,\n+\t\t     bfd *abfd,\n+\t\t     unsigned int offset_size,\n+\t\t     struct dwarf2_section_info *section)\n+{\n+  unsigned int bytes_read, i;\n+  unsigned long arg;\n+  const gdb_byte *defn;\n+\n+  if (opcode_definitions[opcode] == NULL)\n+    {\n+      complaint (_(\"unrecognized DW_MACFINO opcode 0x%x\"),\n+\t\t opcode);\n+      return NULL;\n+    }\n+\n+  defn = opcode_definitions[opcode];\n+  arg = read_unsigned_leb128 (abfd, defn, &bytes_read);\n+  defn += bytes_read;\n+\n+  for (i = 0; i < arg; ++i)\n+    {\n+      mac_ptr = skip_form_bytes (abfd, mac_ptr, mac_end,\n+\t\t\t\t (enum dwarf_form) defn[i], offset_size,\n+\t\t\t\t section);\n+      if (mac_ptr == NULL)\n+\t{\n+\t  /* skip_form_bytes already issued the complaint.  */\n+\t  return NULL;\n+\t}\n+    }\n+\n+  return mac_ptr;\n+}\n+\n+/* A helper function which parses the header of a macro section.\n+   If the macro section is the extended (for now called \"GNU\") type,\n+   then this updates *OFFSET_SIZE.  Returns a pointer to just after\n+   the header, or issues a complaint and returns NULL on error.  */\n+\n+static const gdb_byte *\n+dwarf_parse_macro_header (const gdb_byte **opcode_definitions,\n+\t\t\t  bfd *abfd,\n+\t\t\t  const gdb_byte *mac_ptr,\n+\t\t\t  unsigned int *offset_size,\n+\t\t\t  int section_is_gnu)\n+{\n+  memset (opcode_definitions, 0, 256 * sizeof (gdb_byte *));\n+\n+  if (section_is_gnu)\n+    {\n+      unsigned int version, flags;\n+\n+      version = read_2_bytes (abfd, mac_ptr);\n+      if (version != 4 && version != 5)\n+\t{\n+\t  complaint (_(\"unrecognized version `%d' in .debug_macro section\"),\n+\t\t     version);\n+\t  return NULL;\n+\t}\n+      mac_ptr += 2;\n+\n+      flags = read_1_byte (abfd, mac_ptr);\n+      ++mac_ptr;\n+      *offset_size = (flags & 1) ? 8 : 4;\n+\n+      if ((flags & 2) != 0)\n+\t/* We don't need the line table offset.  */\n+\tmac_ptr += *offset_size;\n+\n+      /* Vendor opcode descriptions.  */\n+      if ((flags & 4) != 0)\n+\t{\n+\t  unsigned int i, count;\n+\n+\t  count = read_1_byte (abfd, mac_ptr);\n+\t  ++mac_ptr;\n+\t  for (i = 0; i < count; ++i)\n+\t    {\n+\t      unsigned int opcode, bytes_read;\n+\t      unsigned long arg;\n+\n+\t      opcode = read_1_byte (abfd, mac_ptr);\n+\t      ++mac_ptr;\n+\t      opcode_definitions[opcode] = mac_ptr;\n+\t      arg = read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n+\t      mac_ptr += bytes_read;\n+\t      mac_ptr += arg;\n+\t    }\n+\t}\n+    }\n+\n+  return mac_ptr;\n+}\n+\n+/* A helper for dwarf_decode_macros that handles the GNU extensions,\n+   including DW_MACRO_import.  */\n+\n+static void\n+dwarf_decode_macro_bytes (struct dwarf2_per_objfile *dwarf2_per_objfile,\n+\t\t\t  buildsym_compunit *builder,\n+\t\t\t  bfd *abfd,\n+\t\t\t  const gdb_byte *mac_ptr, const gdb_byte *mac_end,\n+\t\t\t  struct macro_source_file *current_file,\n+\t\t\t  struct line_header *lh,\n+\t\t\t  struct dwarf2_section_info *section,\n+\t\t\t  int section_is_gnu, int section_is_dwz,\n+\t\t\t  unsigned int offset_size,\n+\t\t\t  htab_t include_hash)\n+{\n+  struct objfile *objfile = dwarf2_per_objfile->objfile;\n+  enum dwarf_macro_record_type macinfo_type;\n+  int at_commandline;\n+  const gdb_byte *opcode_definitions[256];\n+\n+  mac_ptr = dwarf_parse_macro_header (opcode_definitions, abfd, mac_ptr,\n+\t\t\t\t      &offset_size, section_is_gnu);\n+  if (mac_ptr == NULL)\n+    {\n+      /* We already issued a complaint.  */\n+      return;\n+    }\n+\n+  /* Determines if GDB is still before first DW_MACINFO_start_file.  If true\n+     GDB is still reading the definitions from command line.  First\n+     DW_MACINFO_start_file will need to be ignored as it was already executed\n+     to create CURRENT_FILE for the main source holding also the command line\n+     definitions.  On first met DW_MACINFO_start_file this flag is reset to\n+     normally execute all the remaining DW_MACINFO_start_file macinfos.  */\n+\n+  at_commandline = 1;\n+\n+  do\n+    {\n+      /* Do we at least have room for a macinfo type byte?  */\n+      if (mac_ptr >= mac_end)\n+\t{\n+\t  section->overflow_complaint ();\n+\t  break;\n+\t}\n+\n+      macinfo_type = (enum dwarf_macro_record_type) read_1_byte (abfd, mac_ptr);\n+      mac_ptr++;\n+\n+      /* Note that we rely on the fact that the corresponding GNU and\n+\t DWARF constants are the same.  */\n+      DIAGNOSTIC_PUSH\n+      DIAGNOSTIC_IGNORE_SWITCH_DIFFERENT_ENUM_TYPES\n+      switch (macinfo_type)\n+\t{\n+\t  /* A zero macinfo type indicates the end of the macro\n+\t     information.  */\n+\tcase 0:\n+\t  break;\n+\n+        case DW_MACRO_define:\n+        case DW_MACRO_undef:\n+\tcase DW_MACRO_define_strp:\n+\tcase DW_MACRO_undef_strp:\n+\tcase DW_MACRO_define_sup:\n+\tcase DW_MACRO_undef_sup:\n+          {\n+            unsigned int bytes_read;\n+            int line;\n+            const char *body;\n+\t    int is_define;\n+\n+\t    line = read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n+\t    mac_ptr += bytes_read;\n+\n+\t    if (macinfo_type == DW_MACRO_define\n+\t\t|| macinfo_type == DW_MACRO_undef)\n+\t      {\n+\t\tbody = read_direct_string (abfd, mac_ptr, &bytes_read);\n+\t\tmac_ptr += bytes_read;\n+\t      }\n+\t    else\n+\t      {\n+\t\tLONGEST str_offset;\n+\n+\t\tstr_offset = read_offset (abfd, mac_ptr, offset_size);\n+\t\tmac_ptr += offset_size;\n+\n+\t\tif (macinfo_type == DW_MACRO_define_sup\n+\t\t    || macinfo_type == DW_MACRO_undef_sup\n+\t\t    || section_is_dwz)\n+\t\t  {\n+\t\t    struct dwz_file *dwz\n+\t\t      = dwarf2_get_dwz_file (dwarf2_per_objfile);\n+\n+\t\t    body = dwz->read_string (objfile, str_offset);\n+\t\t  }\n+\t\telse\n+\t\t  body = (dwarf2_per_objfile->str.read_string\n+\t\t\t  (dwarf2_per_objfile->objfile,\n+\t\t\t   str_offset, \"DW_FORM_strp\"));\n+\t      }\n+\n+\t    is_define = (macinfo_type == DW_MACRO_define\n+\t\t\t || macinfo_type == DW_MACRO_define_strp\n+\t\t\t || macinfo_type == DW_MACRO_define_sup);\n+            if (! current_file)\n+\t      {\n+\t\t/* DWARF violation as no main source is present.  */\n+\t\tcomplaint (_(\"debug info with no main source gives macro %s \"\n+\t\t\t     \"on line %d: %s\"),\n+\t\t\t   is_define ? _(\"definition\") : _(\"undefinition\"),\n+\t\t\t   line, body);\n+\t\tbreak;\n+\t      }\n+\t    if ((line == 0 && !at_commandline)\n+\t\t|| (line != 0 && at_commandline))\n+\t      complaint (_(\"debug info gives %s macro %s with %s line %d: %s\"),\n+\t\t\t at_commandline ? _(\"command-line\") : _(\"in-file\"),\n+\t\t\t is_define ? _(\"definition\") : _(\"undefinition\"),\n+\t\t\t line == 0 ? _(\"zero\") : _(\"non-zero\"), line, body);\n+\n+\t    if (body == NULL)\n+\t      {\n+\t\t/* Fedora's rpm-build's \"debugedit\" binary\n+\t\t   corrupted .debug_macro sections.\n+\n+\t\t   For more info, see\n+\t\t   https://bugzilla.redhat.com/show_bug.cgi?id=1708786 */\n+\t\tcomplaint (_(\"debug info gives %s invalid macro %s \"\n+\t\t\t     \"without body (corrupted?) at line %d \"\n+\t\t\t     \"on file %s\"),\n+\t\t\t   at_commandline ? _(\"command-line\") : _(\"in-file\"),\n+\t\t\t   is_define ? _(\"definition\") : _(\"undefinition\"),\n+\t\t\t   line, current_file->filename);\n+\t      }\n+\t    else if (is_define)\n+\t      parse_macro_definition (current_file, line, body);\n+\t    else\n+\t      {\n+\t\tgdb_assert (macinfo_type == DW_MACRO_undef\n+\t\t\t    || macinfo_type == DW_MACRO_undef_strp\n+\t\t\t    || macinfo_type == DW_MACRO_undef_sup);\n+\t\tmacro_undef (current_file, line, body);\n+\t      }\n+          }\n+          break;\n+\n+        case DW_MACRO_start_file:\n+          {\n+            unsigned int bytes_read;\n+            int line, file;\n+\n+            line = read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n+            mac_ptr += bytes_read;\n+            file = read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n+            mac_ptr += bytes_read;\n+\n+\t    if ((line == 0 && !at_commandline)\n+\t\t|| (line != 0 && at_commandline))\n+\t      complaint (_(\"debug info gives source %d included \"\n+\t\t\t   \"from %s at %s line %d\"),\n+\t\t\t file, at_commandline ? _(\"command-line\") : _(\"file\"),\n+\t\t\t line == 0 ? _(\"zero\") : _(\"non-zero\"), line);\n+\n+\t    if (at_commandline)\n+\t      {\n+\t\t/* This DW_MACRO_start_file was executed in the\n+\t\t   pass one.  */\n+\t\tat_commandline = 0;\n+\t      }\n+\t    else\n+\t      current_file = macro_start_file (builder, file, line,\n+\t\t\t\t\t       current_file, lh);\n+          }\n+          break;\n+\n+        case DW_MACRO_end_file:\n+          if (! current_file)\n+\t    complaint (_(\"macro debug info has an unmatched \"\n+\t\t\t \"`close_file' directive\"));\n+          else\n+            {\n+              current_file = current_file->included_by;\n+              if (! current_file)\n+                {\n+                  enum dwarf_macro_record_type next_type;\n+\n+                  /* GCC circa March 2002 doesn't produce the zero\n+                     type byte marking the end of the compilation\n+                     unit.  Complain if it's not there, but exit no\n+                     matter what.  */\n+\n+                  /* Do we at least have room for a macinfo type byte?  */\n+                  if (mac_ptr >= mac_end)\n+                    {\n+\t\t      section->overflow_complaint ();\n+                      return;\n+                    }\n+\n+                  /* We don't increment mac_ptr here, so this is just\n+                     a look-ahead.  */\n+                  next_type\n+\t\t    = (enum dwarf_macro_record_type) read_1_byte (abfd,\n+\t\t\t\t\t\t\t\t  mac_ptr);\n+                  if (next_type != 0)\n+\t\t    complaint (_(\"no terminating 0-type entry for \"\n+\t\t\t\t \"macros in `.debug_macinfo' section\"));\n+\n+                  return;\n+                }\n+            }\n+          break;\n+\n+\tcase DW_MACRO_import:\n+\tcase DW_MACRO_import_sup:\n+\t  {\n+\t    LONGEST offset;\n+\t    void **slot;\n+\t    bfd *include_bfd = abfd;\n+\t    struct dwarf2_section_info *include_section = section;\n+\t    const gdb_byte *include_mac_end = mac_end;\n+\t    int is_dwz = section_is_dwz;\n+\t    const gdb_byte *new_mac_ptr;\n+\n+\t    offset = read_offset (abfd, mac_ptr, offset_size);\n+\t    mac_ptr += offset_size;\n+\n+\t    if (macinfo_type == DW_MACRO_import_sup)\n+\t      {\n+\t\tstruct dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile);\n+\n+\t\tdwz->macro.read (objfile);\n+\n+\t\tinclude_section = &dwz->macro;\n+\t\tinclude_bfd = include_section->get_bfd_owner ();\n+\t\tinclude_mac_end = dwz->macro.buffer + dwz->macro.size;\n+\t\tis_dwz = 1;\n+\t      }\n+\n+\t    new_mac_ptr = include_section->buffer + offset;\n+\t    slot = htab_find_slot (include_hash, new_mac_ptr, INSERT);\n+\n+\t    if (*slot != NULL)\n+\t      {\n+\t\t/* This has actually happened; see\n+\t\t   http://sourceware.org/bugzilla/show_bug.cgi?id=13568.  */\n+\t\tcomplaint (_(\"recursive DW_MACRO_import in \"\n+\t\t\t     \".debug_macro section\"));\n+\t      }\n+\t    else\n+\t      {\n+\t\t*slot = (void *) new_mac_ptr;\n+\n+\t\tdwarf_decode_macro_bytes (dwarf2_per_objfile, builder,\n+\t\t\t\t\t  include_bfd, new_mac_ptr,\n+\t\t\t\t\t  include_mac_end, current_file, lh,\n+\t\t\t\t\t  section, section_is_gnu, is_dwz,\n+\t\t\t\t\t  offset_size, include_hash);\n+\n+\t\thtab_remove_elt (include_hash, (void *) new_mac_ptr);\n+\t      }\n+\t  }\n+\t  break;\n+\n+        case DW_MACINFO_vendor_ext:\n+\t  if (!section_is_gnu)\n+\t    {\n+\t      unsigned int bytes_read;\n+\n+\t      /* This reads the constant, but since we don't recognize\n+\t\t any vendor extensions, we ignore it.  */\n+\t      read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n+\t      mac_ptr += bytes_read;\n+\t      read_direct_string (abfd, mac_ptr, &bytes_read);\n+\t      mac_ptr += bytes_read;\n+\n+\t      /* We don't recognize any vendor extensions.  */\n+\t      break;\n+\t    }\n+\t  /* FALLTHROUGH */\n+\n+\tdefault:\n+\t  mac_ptr = skip_unknown_opcode (macinfo_type, opcode_definitions,\n+\t\t\t\t\t mac_ptr, mac_end, abfd, offset_size,\n+\t\t\t\t\t section);\n+\t  if (mac_ptr == NULL)\n+\t    return;\n+\t  break;\n+        }\n+      DIAGNOSTIC_POP\n+    } while (macinfo_type != 0);\n+}\n+\n+void\n+dwarf_decode_macros (struct dwarf2_per_objfile *dwarf2_per_objfile,\n+\t\t     buildsym_compunit *builder, dwarf2_section_info *section,\n+\t\t     struct line_header *lh, unsigned int offset_size,\n+\t\t     unsigned int offset, int section_is_gnu)\n+{\n+  bfd *abfd;\n+  const gdb_byte *mac_ptr, *mac_end;\n+  struct macro_source_file *current_file = 0;\n+  enum dwarf_macro_record_type macinfo_type;\n+  const gdb_byte *opcode_definitions[256];\n+  void **slot;\n+\n+  abfd = section->get_bfd_owner ();\n+\n+  /* First pass: Find the name of the base filename.\n+     This filename is needed in order to process all macros whose definition\n+     (or undefinition) comes from the command line.  These macros are defined\n+     before the first DW_MACINFO_start_file entry, and yet still need to be\n+     associated to the base file.\n+\n+     To determine the base file name, we scan the macro definitions until we\n+     reach the first DW_MACINFO_start_file entry.  We then initialize\n+     CURRENT_FILE accordingly so that any macro definition found before the\n+     first DW_MACINFO_start_file can still be associated to the base file.  */\n+\n+  mac_ptr = section->buffer + offset;\n+  mac_end = section->buffer + section->size;\n+\n+  mac_ptr = dwarf_parse_macro_header (opcode_definitions, abfd, mac_ptr,\n+\t\t\t\t      &offset_size, section_is_gnu);\n+  if (mac_ptr == NULL)\n+    {\n+      /* We already issued a complaint.  */\n+      return;\n+    }\n+\n+  do\n+    {\n+      /* Do we at least have room for a macinfo type byte?  */\n+      if (mac_ptr >= mac_end)\n+        {\n+\t  /* Complaint is printed during the second pass as GDB will probably\n+\t     stop the first pass earlier upon finding\n+\t     DW_MACINFO_start_file.  */\n+\t  break;\n+        }\n+\n+      macinfo_type = (enum dwarf_macro_record_type) read_1_byte (abfd, mac_ptr);\n+      mac_ptr++;\n+\n+      /* Note that we rely on the fact that the corresponding GNU and\n+\t DWARF constants are the same.  */\n+      DIAGNOSTIC_PUSH\n+      DIAGNOSTIC_IGNORE_SWITCH_DIFFERENT_ENUM_TYPES\n+      switch (macinfo_type)\n+        {\n+          /* A zero macinfo type indicates the end of the macro\n+             information.  */\n+        case 0:\n+\t  break;\n+\n+\tcase DW_MACRO_define:\n+\tcase DW_MACRO_undef:\n+\t  /* Only skip the data by MAC_PTR.  */\n+\t  {\n+\t    unsigned int bytes_read;\n+\n+\t    read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n+\t    mac_ptr += bytes_read;\n+\t    read_direct_string (abfd, mac_ptr, &bytes_read);\n+\t    mac_ptr += bytes_read;\n+\t  }\n+\t  break;\n+\n+\tcase DW_MACRO_start_file:\n+\t  {\n+\t    unsigned int bytes_read;\n+\t    int line, file;\n+\n+\t    line = read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n+\t    mac_ptr += bytes_read;\n+\t    file = read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n+\t    mac_ptr += bytes_read;\n+\n+\t    current_file = macro_start_file (builder, file, line,\n+\t\t\t\t\t     current_file, lh);\n+\t  }\n+\t  break;\n+\n+\tcase DW_MACRO_end_file:\n+\t  /* No data to skip by MAC_PTR.  */\n+\t  break;\n+\n+\tcase DW_MACRO_define_strp:\n+\tcase DW_MACRO_undef_strp:\n+\tcase DW_MACRO_define_sup:\n+\tcase DW_MACRO_undef_sup:\n+\t  {\n+\t    unsigned int bytes_read;\n+\n+\t    read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n+\t    mac_ptr += bytes_read;\n+\t    mac_ptr += offset_size;\n+\t  }\n+\t  break;\n+\n+\tcase DW_MACRO_import:\n+\tcase DW_MACRO_import_sup:\n+\t  /* Note that, according to the spec, a transparent include\n+\t     chain cannot call DW_MACRO_start_file.  So, we can just\n+\t     skip this opcode.  */\n+\t  mac_ptr += offset_size;\n+\t  break;\n+\n+\tcase DW_MACINFO_vendor_ext:\n+\t  /* Only skip the data by MAC_PTR.  */\n+\t  if (!section_is_gnu)\n+\t    {\n+\t      unsigned int bytes_read;\n+\n+\t      read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n+\t      mac_ptr += bytes_read;\n+\t      read_direct_string (abfd, mac_ptr, &bytes_read);\n+\t      mac_ptr += bytes_read;\n+\t    }\n+\t  /* FALLTHROUGH */\n+\n+\tdefault:\n+\t  mac_ptr = skip_unknown_opcode (macinfo_type, opcode_definitions,\n+\t\t\t\t\t mac_ptr, mac_end, abfd, offset_size,\n+\t\t\t\t\t section);\n+\t  if (mac_ptr == NULL)\n+\t    return;\n+\t  break;\n+\t}\n+      DIAGNOSTIC_POP\n+    } while (macinfo_type != 0 && current_file == NULL);\n+\n+  /* Second pass: Process all entries.\n+\n+     Use the AT_COMMAND_LINE flag to determine whether we are still processing\n+     command-line macro definitions/undefinitions.  This flag is unset when we\n+     reach the first DW_MACINFO_start_file entry.  */\n+\n+  htab_up include_hash (htab_create_alloc (1, htab_hash_pointer,\n+\t\t\t\t\t   htab_eq_pointer,\n+\t\t\t\t\t   NULL, xcalloc, xfree));\n+  mac_ptr = section->buffer + offset;\n+  slot = htab_find_slot (include_hash.get (), mac_ptr, INSERT);\n+  *slot = (void *) mac_ptr;\n+  dwarf_decode_macro_bytes (dwarf2_per_objfile, builder,\n+\t\t\t    abfd, mac_ptr, mac_end,\n+\t\t\t    current_file, lh, section,\n+\t\t\t    section_is_gnu, 0, offset_size,\n+\t\t\t    include_hash.get ());\n+}"
    },
    {
      "sha": "3937c550088320927b9388ced4b33ba8bcbd0263",
      "filename": "gdb/dwarf2/macro.h",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c90ec28ae44ebf72d57d58439d02fc5aab90f1f6/gdb/dwarf2/macro.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c90ec28ae44ebf72d57d58439d02fc5aab90f1f6/gdb/dwarf2/macro.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/macro.h?ref=c90ec28ae44ebf72d57d58439d02fc5aab90f1f6",
      "patch": "@@ -0,0 +1,33 @@\n+/* DWARF macro support for GDB.\n+\n+   Copyright (C) 2003-2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GDB_DWARF2_MACRO_H\n+#define GDB_DWARF2_MACRO_H\n+\n+struct buildsym_compunit;\n+\n+extern void dwarf_decode_macros (struct dwarf2_per_objfile *dwarf2_per_objfile,\n+\t\t\t\t buildsym_compunit *builder,\n+\t\t\t\t dwarf2_section_info *section,\n+\t\t\t\t struct line_header *lh,\n+\t\t\t\t unsigned int offset_size,\n+\t\t\t\t unsigned int offset,\n+\t\t\t\t int section_is_gnu);\n+\n+#endif /* GDB_DWARF2_MACRO_H */"
    },
    {
      "sha": "29f3aeb7e70d276bddf59de2efd738bbea29b269",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 2,
      "deletions": 830,
      "changes": 832,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c90ec28ae44ebf72d57d58439d02fc5aab90f1f6/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c90ec28ae44ebf72d57d58439d02fc5aab90f1f6/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=c90ec28ae44ebf72d57d58439d02fc5aab90f1f6",
      "patch": "@@ -38,6 +38,7 @@\n #include \"dwarf2/leb.h\"\n #include \"dwarf2/line-header.h\"\n #include \"dwarf2/dwz.h\"\n+#include \"dwarf2/macro.h\"\n #include \"bfd.h\"\n #include \"elf-bfd.h\"\n #include \"symtab.h\"\n@@ -48,7 +49,6 @@\n #include \"demangle.h\"\n #include \"gdb-demangle.h\"\n #include \"filenames.h\"\t/* for DOSish file names */\n-#include \"macrotab.h\"\n #include \"language.h\"\n #include \"complaints.h\"\n #include \"dwarf2/expr.h\"\n@@ -1710,14 +1710,6 @@ dwarf2_const_value_length_mismatch_complaint (const char *arg1, int arg2,\n \t     arg1, arg2, arg3);\n }\n \n-static void\n-dwarf2_macro_malformed_definition_complaint (const char *arg1)\n-{\n-  complaint (_(\"macro debug info contains a \"\n-\t       \"malformed macro definition:\\n`%s'\"),\n-\t     arg1);\n-}\n-\n static void\n dwarf2_invalid_attrib_class_complaint (const char *arg1, const char *arg2)\n {\n@@ -23040,828 +23032,8 @@ dwarf_alloc_die (struct dwarf2_cu *cu, int num_attrs)\n }\n \n \f\n-/* Macro support.  */\n-\n-static struct macro_source_file *\n-macro_start_file (buildsym_compunit *builder,\n-\t\t  int file, int line,\n-                  struct macro_source_file *current_file,\n-                  struct line_header *lh)\n-{\n-  /* File name relative to the compilation directory of this source file.  */\n-  gdb::unique_xmalloc_ptr<char> file_name = lh->file_file_name (file);\n-\n-  if (! current_file)\n-    {\n-      /* Note: We don't create a macro table for this compilation unit\n-\t at all until we actually get a filename.  */\n-      struct macro_table *macro_table = builder->get_macro_table ();\n-\n-      /* If we have no current file, then this must be the start_file\n-\t directive for the compilation unit's main source file.  */\n-      current_file = macro_set_main (macro_table, file_name.get ());\n-      macro_define_special (macro_table);\n-    }\n-  else\n-    current_file = macro_include (current_file, line, file_name.get ());\n-\n-  return current_file;\n-}\n-\n-static const char *\n-consume_improper_spaces (const char *p, const char *body)\n-{\n-  if (*p == ' ')\n-    {\n-      complaint (_(\"macro definition contains spaces \"\n-\t\t   \"in formal argument list:\\n`%s'\"),\n-\t\t body);\n-\n-      while (*p == ' ')\n-        p++;\n-    }\n-\n-  return p;\n-}\n-\n-\n-static void\n-parse_macro_definition (struct macro_source_file *file, int line,\n-                        const char *body)\n-{\n-  const char *p;\n-\n-  /* The body string takes one of two forms.  For object-like macro\n-     definitions, it should be:\n-\n-        <macro name> \" \" <definition>\n-\n-     For function-like macro definitions, it should be:\n-\n-        <macro name> \"() \" <definition>\n-     or\n-        <macro name> \"(\" <arg name> ( \",\" <arg name> ) * \") \" <definition>\n-\n-     Spaces may appear only where explicitly indicated, and in the\n-     <definition>.\n-\n-     The Dwarf 2 spec says that an object-like macro's name is always\n-     followed by a space, but versions of GCC around March 2002 omit\n-     the space when the macro's definition is the empty string.\n-\n-     The Dwarf 2 spec says that there should be no spaces between the\n-     formal arguments in a function-like macro's formal argument list,\n-     but versions of GCC around March 2002 include spaces after the\n-     commas.  */\n-\n-\n-  /* Find the extent of the macro name.  The macro name is terminated\n-     by either a space or null character (for an object-like macro) or\n-     an opening paren (for a function-like macro).  */\n-  for (p = body; *p; p++)\n-    if (*p == ' ' || *p == '(')\n-      break;\n-\n-  if (*p == ' ' || *p == '\\0')\n-    {\n-      /* It's an object-like macro.  */\n-      int name_len = p - body;\n-      std::string name (body, name_len);\n-      const char *replacement;\n-\n-      if (*p == ' ')\n-        replacement = body + name_len + 1;\n-      else\n-        {\n-\t  dwarf2_macro_malformed_definition_complaint (body);\n-          replacement = body + name_len;\n-        }\n-\n-      macro_define_object (file, line, name.c_str (), replacement);\n-    }\n-  else if (*p == '(')\n-    {\n-      /* It's a function-like macro.  */\n-      std::string name (body, p - body);\n-      int argc = 0;\n-      int argv_size = 1;\n-      char **argv = XNEWVEC (char *, argv_size);\n-\n-      p++;\n-\n-      p = consume_improper_spaces (p, body);\n-\n-      /* Parse the formal argument list.  */\n-      while (*p && *p != ')')\n-        {\n-          /* Find the extent of the current argument name.  */\n-          const char *arg_start = p;\n-\n-          while (*p && *p != ',' && *p != ')' && *p != ' ')\n-            p++;\n-\n-          if (! *p || p == arg_start)\n-\t    dwarf2_macro_malformed_definition_complaint (body);\n-          else\n-            {\n-              /* Make sure argv has room for the new argument.  */\n-              if (argc >= argv_size)\n-                {\n-                  argv_size *= 2;\n-                  argv = XRESIZEVEC (char *, argv, argv_size);\n-                }\n-\n-              argv[argc++] = savestring (arg_start, p - arg_start);\n-            }\n-\n-          p = consume_improper_spaces (p, body);\n-\n-          /* Consume the comma, if present.  */\n-          if (*p == ',')\n-            {\n-              p++;\n-\n-              p = consume_improper_spaces (p, body);\n-            }\n-        }\n-\n-      if (*p == ')')\n-        {\n-          p++;\n-\n-          if (*p == ' ')\n-            /* Perfectly formed definition, no complaints.  */\n-            macro_define_function (file, line, name.c_str (),\n-                                   argc, (const char **) argv,\n-                                   p + 1);\n-          else if (*p == '\\0')\n-            {\n-              /* Complain, but do define it.  */\n-\t      dwarf2_macro_malformed_definition_complaint (body);\n-              macro_define_function (file, line, name.c_str (),\n-                                     argc, (const char **) argv,\n-                                     p);\n-            }\n-          else\n-            /* Just complain.  */\n-\t    dwarf2_macro_malformed_definition_complaint (body);\n-        }\n-      else\n-        /* Just complain.  */\n-\tdwarf2_macro_malformed_definition_complaint (body);\n-\n-      {\n-        int i;\n-\n-        for (i = 0; i < argc; i++)\n-          xfree (argv[i]);\n-      }\n-      xfree (argv);\n-    }\n-  else\n-    dwarf2_macro_malformed_definition_complaint (body);\n-}\n-\n-/* Skip some bytes from BYTES according to the form given in FORM.\n-   Returns the new pointer.  */\n-\n-static const gdb_byte *\n-skip_form_bytes (bfd *abfd, const gdb_byte *bytes, const gdb_byte *buffer_end,\n-\t\t enum dwarf_form form,\n-\t\t unsigned int offset_size,\n-\t\t struct dwarf2_section_info *section)\n-{\n-  unsigned int bytes_read;\n-\n-  switch (form)\n-    {\n-    case DW_FORM_data1:\n-    case DW_FORM_flag:\n-      ++bytes;\n-      break;\n-\n-    case DW_FORM_data2:\n-      bytes += 2;\n-      break;\n-\n-    case DW_FORM_data4:\n-      bytes += 4;\n-      break;\n-\n-    case DW_FORM_data8:\n-      bytes += 8;\n-      break;\n-\n-    case DW_FORM_data16:\n-      bytes += 16;\n-      break;\n-\n-    case DW_FORM_string:\n-      read_direct_string (abfd, bytes, &bytes_read);\n-      bytes += bytes_read;\n-      break;\n-\n-    case DW_FORM_sec_offset:\n-    case DW_FORM_strp:\n-    case DW_FORM_GNU_strp_alt:\n-      bytes += offset_size;\n-      break;\n-\n-    case DW_FORM_block:\n-      bytes += read_unsigned_leb128 (abfd, bytes, &bytes_read);\n-      bytes += bytes_read;\n-      break;\n-\n-    case DW_FORM_block1:\n-      bytes += 1 + read_1_byte (abfd, bytes);\n-      break;\n-    case DW_FORM_block2:\n-      bytes += 2 + read_2_bytes (abfd, bytes);\n-      break;\n-    case DW_FORM_block4:\n-      bytes += 4 + read_4_bytes (abfd, bytes);\n-      break;\n-\n-    case DW_FORM_addrx:\n-    case DW_FORM_sdata:\n-    case DW_FORM_strx:\n-    case DW_FORM_udata:\n-    case DW_FORM_GNU_addr_index:\n-    case DW_FORM_GNU_str_index:\n-      bytes = gdb_skip_leb128 (bytes, buffer_end);\n-      if (bytes == NULL)\n-\t{\n-\t  section->overflow_complaint ();\n-\t  return NULL;\n-\t}\n-      break;\n-\n-    case DW_FORM_implicit_const:\n-      break;\n-\n-    default:\n-      {\n-\tcomplaint (_(\"invalid form 0x%x in `%s'\"),\n-\t\t   form, section->get_name ());\n-\treturn NULL;\n-      }\n-    }\n-\n-  return bytes;\n-}\n-\n-/* A helper for dwarf_decode_macros that handles skipping an unknown\n-   opcode.  Returns an updated pointer to the macro data buffer; or,\n-   on error, issues a complaint and returns NULL.  */\n-\n-static const gdb_byte *\n-skip_unknown_opcode (unsigned int opcode,\n-\t\t     const gdb_byte **opcode_definitions,\n-\t\t     const gdb_byte *mac_ptr, const gdb_byte *mac_end,\n-\t\t     bfd *abfd,\n-\t\t     unsigned int offset_size,\n-\t\t     struct dwarf2_section_info *section)\n-{\n-  unsigned int bytes_read, i;\n-  unsigned long arg;\n-  const gdb_byte *defn;\n-\n-  if (opcode_definitions[opcode] == NULL)\n-    {\n-      complaint (_(\"unrecognized DW_MACFINO opcode 0x%x\"),\n-\t\t opcode);\n-      return NULL;\n-    }\n-\n-  defn = opcode_definitions[opcode];\n-  arg = read_unsigned_leb128 (abfd, defn, &bytes_read);\n-  defn += bytes_read;\n-\n-  for (i = 0; i < arg; ++i)\n-    {\n-      mac_ptr = skip_form_bytes (abfd, mac_ptr, mac_end,\n-\t\t\t\t (enum dwarf_form) defn[i], offset_size,\n-\t\t\t\t section);\n-      if (mac_ptr == NULL)\n-\t{\n-\t  /* skip_form_bytes already issued the complaint.  */\n-\t  return NULL;\n-\t}\n-    }\n-\n-  return mac_ptr;\n-}\n-\n-/* A helper function which parses the header of a macro section.\n-   If the macro section is the extended (for now called \"GNU\") type,\n-   then this updates *OFFSET_SIZE.  Returns a pointer to just after\n-   the header, or issues a complaint and returns NULL on error.  */\n-\n-static const gdb_byte *\n-dwarf_parse_macro_header (const gdb_byte **opcode_definitions,\n-\t\t\t  bfd *abfd,\n-\t\t\t  const gdb_byte *mac_ptr,\n-\t\t\t  unsigned int *offset_size,\n-\t\t\t  int section_is_gnu)\n-{\n-  memset (opcode_definitions, 0, 256 * sizeof (gdb_byte *));\n-\n-  if (section_is_gnu)\n-    {\n-      unsigned int version, flags;\n-\n-      version = read_2_bytes (abfd, mac_ptr);\n-      if (version != 4 && version != 5)\n-\t{\n-\t  complaint (_(\"unrecognized version `%d' in .debug_macro section\"),\n-\t\t     version);\n-\t  return NULL;\n-\t}\n-      mac_ptr += 2;\n-\n-      flags = read_1_byte (abfd, mac_ptr);\n-      ++mac_ptr;\n-      *offset_size = (flags & 1) ? 8 : 4;\n-\n-      if ((flags & 2) != 0)\n-\t/* We don't need the line table offset.  */\n-\tmac_ptr += *offset_size;\n-\n-      /* Vendor opcode descriptions.  */\n-      if ((flags & 4) != 0)\n-\t{\n-\t  unsigned int i, count;\n-\n-\t  count = read_1_byte (abfd, mac_ptr);\n-\t  ++mac_ptr;\n-\t  for (i = 0; i < count; ++i)\n-\t    {\n-\t      unsigned int opcode, bytes_read;\n-\t      unsigned long arg;\n-\n-\t      opcode = read_1_byte (abfd, mac_ptr);\n-\t      ++mac_ptr;\n-\t      opcode_definitions[opcode] = mac_ptr;\n-\t      arg = read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n-\t      mac_ptr += bytes_read;\n-\t      mac_ptr += arg;\n-\t    }\n-\t}\n-    }\n-\n-  return mac_ptr;\n-}\n-\n-/* A helper for dwarf_decode_macros that handles the GNU extensions,\n-   including DW_MACRO_import.  */\n-\n-static void\n-dwarf_decode_macro_bytes (struct dwarf2_per_objfile *dwarf2_per_objfile,\n-\t\t\t  buildsym_compunit *builder,\n-\t\t\t  bfd *abfd,\n-\t\t\t  const gdb_byte *mac_ptr, const gdb_byte *mac_end,\n-\t\t\t  struct macro_source_file *current_file,\n-\t\t\t  struct line_header *lh,\n-\t\t\t  struct dwarf2_section_info *section,\n-\t\t\t  int section_is_gnu, int section_is_dwz,\n-\t\t\t  unsigned int offset_size,\n-\t\t\t  htab_t include_hash)\n-{\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n-  enum dwarf_macro_record_type macinfo_type;\n-  int at_commandline;\n-  const gdb_byte *opcode_definitions[256];\n-\n-  mac_ptr = dwarf_parse_macro_header (opcode_definitions, abfd, mac_ptr,\n-\t\t\t\t      &offset_size, section_is_gnu);\n-  if (mac_ptr == NULL)\n-    {\n-      /* We already issued a complaint.  */\n-      return;\n-    }\n-\n-  /* Determines if GDB is still before first DW_MACINFO_start_file.  If true\n-     GDB is still reading the definitions from command line.  First\n-     DW_MACINFO_start_file will need to be ignored as it was already executed\n-     to create CURRENT_FILE for the main source holding also the command line\n-     definitions.  On first met DW_MACINFO_start_file this flag is reset to\n-     normally execute all the remaining DW_MACINFO_start_file macinfos.  */\n-\n-  at_commandline = 1;\n-\n-  do\n-    {\n-      /* Do we at least have room for a macinfo type byte?  */\n-      if (mac_ptr >= mac_end)\n-\t{\n-\t  section->overflow_complaint ();\n-\t  break;\n-\t}\n-\n-      macinfo_type = (enum dwarf_macro_record_type) read_1_byte (abfd, mac_ptr);\n-      mac_ptr++;\n-\n-      /* Note that we rely on the fact that the corresponding GNU and\n-\t DWARF constants are the same.  */\n-      DIAGNOSTIC_PUSH\n-      DIAGNOSTIC_IGNORE_SWITCH_DIFFERENT_ENUM_TYPES\n-      switch (macinfo_type)\n-\t{\n-\t  /* A zero macinfo type indicates the end of the macro\n-\t     information.  */\n-\tcase 0:\n-\t  break;\n-\n-        case DW_MACRO_define:\n-        case DW_MACRO_undef:\n-\tcase DW_MACRO_define_strp:\n-\tcase DW_MACRO_undef_strp:\n-\tcase DW_MACRO_define_sup:\n-\tcase DW_MACRO_undef_sup:\n-          {\n-            unsigned int bytes_read;\n-            int line;\n-            const char *body;\n-\t    int is_define;\n-\n-\t    line = read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n-\t    mac_ptr += bytes_read;\n-\n-\t    if (macinfo_type == DW_MACRO_define\n-\t\t|| macinfo_type == DW_MACRO_undef)\n-\t      {\n-\t\tbody = read_direct_string (abfd, mac_ptr, &bytes_read);\n-\t\tmac_ptr += bytes_read;\n-\t      }\n-\t    else\n-\t      {\n-\t\tLONGEST str_offset;\n-\n-\t\tstr_offset = read_offset (abfd, mac_ptr, offset_size);\n-\t\tmac_ptr += offset_size;\n-\n-\t\tif (macinfo_type == DW_MACRO_define_sup\n-\t\t    || macinfo_type == DW_MACRO_undef_sup\n-\t\t    || section_is_dwz)\n-\t\t  {\n-\t\t    struct dwz_file *dwz\n-\t\t      = dwarf2_get_dwz_file (dwarf2_per_objfile);\n-\n-\t\t    body = dwz->read_string (objfile, str_offset);\n-\t\t  }\n-\t\telse\n-\t\t  body = read_indirect_string_at_offset (dwarf2_per_objfile,\n-\t\t\t\t\t\t\t str_offset);\n-\t      }\n-\n-\t    is_define = (macinfo_type == DW_MACRO_define\n-\t\t\t || macinfo_type == DW_MACRO_define_strp\n-\t\t\t || macinfo_type == DW_MACRO_define_sup);\n-            if (! current_file)\n-\t      {\n-\t\t/* DWARF violation as no main source is present.  */\n-\t\tcomplaint (_(\"debug info with no main source gives macro %s \"\n-\t\t\t     \"on line %d: %s\"),\n-\t\t\t   is_define ? _(\"definition\") : _(\"undefinition\"),\n-\t\t\t   line, body);\n-\t\tbreak;\n-\t      }\n-\t    if ((line == 0 && !at_commandline)\n-\t\t|| (line != 0 && at_commandline))\n-\t      complaint (_(\"debug info gives %s macro %s with %s line %d: %s\"),\n-\t\t\t at_commandline ? _(\"command-line\") : _(\"in-file\"),\n-\t\t\t is_define ? _(\"definition\") : _(\"undefinition\"),\n-\t\t\t line == 0 ? _(\"zero\") : _(\"non-zero\"), line, body);\n-\n-\t    if (body == NULL)\n-\t      {\n-\t\t/* Fedora's rpm-build's \"debugedit\" binary\n-\t\t   corrupted .debug_macro sections.\n-\n-\t\t   For more info, see\n-\t\t   https://bugzilla.redhat.com/show_bug.cgi?id=1708786 */\n-\t\tcomplaint (_(\"debug info gives %s invalid macro %s \"\n-\t\t\t     \"without body (corrupted?) at line %d \"\n-\t\t\t     \"on file %s\"),\n-\t\t\t   at_commandline ? _(\"command-line\") : _(\"in-file\"),\n-\t\t\t   is_define ? _(\"definition\") : _(\"undefinition\"),\n-\t\t\t   line, current_file->filename);\n-\t      }\n-\t    else if (is_define)\n-\t      parse_macro_definition (current_file, line, body);\n-\t    else\n-\t      {\n-\t\tgdb_assert (macinfo_type == DW_MACRO_undef\n-\t\t\t    || macinfo_type == DW_MACRO_undef_strp\n-\t\t\t    || macinfo_type == DW_MACRO_undef_sup);\n-\t\tmacro_undef (current_file, line, body);\n-\t      }\n-          }\n-          break;\n-\n-        case DW_MACRO_start_file:\n-          {\n-            unsigned int bytes_read;\n-            int line, file;\n-\n-            line = read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n-            mac_ptr += bytes_read;\n-            file = read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n-            mac_ptr += bytes_read;\n-\n-\t    if ((line == 0 && !at_commandline)\n-\t\t|| (line != 0 && at_commandline))\n-\t      complaint (_(\"debug info gives source %d included \"\n-\t\t\t   \"from %s at %s line %d\"),\n-\t\t\t file, at_commandline ? _(\"command-line\") : _(\"file\"),\n-\t\t\t line == 0 ? _(\"zero\") : _(\"non-zero\"), line);\n-\n-\t    if (at_commandline)\n-\t      {\n-\t\t/* This DW_MACRO_start_file was executed in the\n-\t\t   pass one.  */\n-\t\tat_commandline = 0;\n-\t      }\n-\t    else\n-\t      current_file = macro_start_file (builder, file, line,\n-\t\t\t\t\t       current_file, lh);\n-          }\n-          break;\n-\n-        case DW_MACRO_end_file:\n-          if (! current_file)\n-\t    complaint (_(\"macro debug info has an unmatched \"\n-\t\t\t \"`close_file' directive\"));\n-          else\n-            {\n-              current_file = current_file->included_by;\n-              if (! current_file)\n-                {\n-                  enum dwarf_macro_record_type next_type;\n-\n-                  /* GCC circa March 2002 doesn't produce the zero\n-                     type byte marking the end of the compilation\n-                     unit.  Complain if it's not there, but exit no\n-                     matter what.  */\n-\n-                  /* Do we at least have room for a macinfo type byte?  */\n-                  if (mac_ptr >= mac_end)\n-                    {\n-\t\t      section->overflow_complaint ();\n-                      return;\n-                    }\n-\n-                  /* We don't increment mac_ptr here, so this is just\n-                     a look-ahead.  */\n-                  next_type\n-\t\t    = (enum dwarf_macro_record_type) read_1_byte (abfd,\n-\t\t\t\t\t\t\t\t  mac_ptr);\n-                  if (next_type != 0)\n-\t\t    complaint (_(\"no terminating 0-type entry for \"\n-\t\t\t\t \"macros in `.debug_macinfo' section\"));\n-\n-                  return;\n-                }\n-            }\n-          break;\n-\n-\tcase DW_MACRO_import:\n-\tcase DW_MACRO_import_sup:\n-\t  {\n-\t    LONGEST offset;\n-\t    void **slot;\n-\t    bfd *include_bfd = abfd;\n-\t    struct dwarf2_section_info *include_section = section;\n-\t    const gdb_byte *include_mac_end = mac_end;\n-\t    int is_dwz = section_is_dwz;\n-\t    const gdb_byte *new_mac_ptr;\n-\n-\t    offset = read_offset (abfd, mac_ptr, offset_size);\n-\t    mac_ptr += offset_size;\n-\n-\t    if (macinfo_type == DW_MACRO_import_sup)\n-\t      {\n-\t\tstruct dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile);\n-\n-\t\tdwz->macro.read (objfile);\n-\n-\t\tinclude_section = &dwz->macro;\n-\t\tinclude_bfd = include_section->get_bfd_owner ();\n-\t\tinclude_mac_end = dwz->macro.buffer + dwz->macro.size;\n-\t\tis_dwz = 1;\n-\t      }\n \n-\t    new_mac_ptr = include_section->buffer + offset;\n-\t    slot = htab_find_slot (include_hash, new_mac_ptr, INSERT);\n-\n-\t    if (*slot != NULL)\n-\t      {\n-\t\t/* This has actually happened; see\n-\t\t   http://sourceware.org/bugzilla/show_bug.cgi?id=13568.  */\n-\t\tcomplaint (_(\"recursive DW_MACRO_import in \"\n-\t\t\t     \".debug_macro section\"));\n-\t      }\n-\t    else\n-\t      {\n-\t\t*slot = (void *) new_mac_ptr;\n-\n-\t\tdwarf_decode_macro_bytes (dwarf2_per_objfile, builder,\n-\t\t\t\t\t  include_bfd, new_mac_ptr,\n-\t\t\t\t\t  include_mac_end, current_file, lh,\n-\t\t\t\t\t  section, section_is_gnu, is_dwz,\n-\t\t\t\t\t  offset_size, include_hash);\n-\n-\t\thtab_remove_elt (include_hash, (void *) new_mac_ptr);\n-\t      }\n-\t  }\n-\t  break;\n-\n-        case DW_MACINFO_vendor_ext:\n-\t  if (!section_is_gnu)\n-\t    {\n-\t      unsigned int bytes_read;\n-\n-\t      /* This reads the constant, but since we don't recognize\n-\t\t any vendor extensions, we ignore it.  */\n-\t      read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n-\t      mac_ptr += bytes_read;\n-\t      read_direct_string (abfd, mac_ptr, &bytes_read);\n-\t      mac_ptr += bytes_read;\n-\n-\t      /* We don't recognize any vendor extensions.  */\n-\t      break;\n-\t    }\n-\t  /* FALLTHROUGH */\n-\n-\tdefault:\n-\t  mac_ptr = skip_unknown_opcode (macinfo_type, opcode_definitions,\n-\t\t\t\t\t mac_ptr, mac_end, abfd, offset_size,\n-\t\t\t\t\t section);\n-\t  if (mac_ptr == NULL)\n-\t    return;\n-\t  break;\n-        }\n-      DIAGNOSTIC_POP\n-    } while (macinfo_type != 0);\n-}\n-\n-static void\n-dwarf_decode_macros (struct dwarf2_per_objfile *dwarf2_per_objfile,\n-\t\t     buildsym_compunit *builder, dwarf2_section_info *section,\n-\t\t     struct line_header *lh, unsigned int offset_size,\n-\t\t     unsigned int offset, int section_is_gnu)\n-{\n-  bfd *abfd;\n-  const gdb_byte *mac_ptr, *mac_end;\n-  struct macro_source_file *current_file = 0;\n-  enum dwarf_macro_record_type macinfo_type;\n-  const gdb_byte *opcode_definitions[256];\n-  void **slot;\n-\n-  abfd = section->get_bfd_owner ();\n-\n-  /* First pass: Find the name of the base filename.\n-     This filename is needed in order to process all macros whose definition\n-     (or undefinition) comes from the command line.  These macros are defined\n-     before the first DW_MACINFO_start_file entry, and yet still need to be\n-     associated to the base file.\n-\n-     To determine the base file name, we scan the macro definitions until we\n-     reach the first DW_MACINFO_start_file entry.  We then initialize\n-     CURRENT_FILE accordingly so that any macro definition found before the\n-     first DW_MACINFO_start_file can still be associated to the base file.  */\n-\n-  mac_ptr = section->buffer + offset;\n-  mac_end = section->buffer + section->size;\n-\n-  mac_ptr = dwarf_parse_macro_header (opcode_definitions, abfd, mac_ptr,\n-\t\t\t\t      &offset_size, section_is_gnu);\n-  if (mac_ptr == NULL)\n-    {\n-      /* We already issued a complaint.  */\n-      return;\n-    }\n-\n-  do\n-    {\n-      /* Do we at least have room for a macinfo type byte?  */\n-      if (mac_ptr >= mac_end)\n-        {\n-\t  /* Complaint is printed during the second pass as GDB will probably\n-\t     stop the first pass earlier upon finding\n-\t     DW_MACINFO_start_file.  */\n-\t  break;\n-        }\n-\n-      macinfo_type = (enum dwarf_macro_record_type) read_1_byte (abfd, mac_ptr);\n-      mac_ptr++;\n-\n-      /* Note that we rely on the fact that the corresponding GNU and\n-\t DWARF constants are the same.  */\n-      DIAGNOSTIC_PUSH\n-      DIAGNOSTIC_IGNORE_SWITCH_DIFFERENT_ENUM_TYPES\n-      switch (macinfo_type)\n-        {\n-          /* A zero macinfo type indicates the end of the macro\n-             information.  */\n-        case 0:\n-\t  break;\n-\n-\tcase DW_MACRO_define:\n-\tcase DW_MACRO_undef:\n-\t  /* Only skip the data by MAC_PTR.  */\n-\t  {\n-\t    unsigned int bytes_read;\n-\n-\t    read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n-\t    mac_ptr += bytes_read;\n-\t    read_direct_string (abfd, mac_ptr, &bytes_read);\n-\t    mac_ptr += bytes_read;\n-\t  }\n-\t  break;\n-\n-\tcase DW_MACRO_start_file:\n-\t  {\n-\t    unsigned int bytes_read;\n-\t    int line, file;\n-\n-\t    line = read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n-\t    mac_ptr += bytes_read;\n-\t    file = read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n-\t    mac_ptr += bytes_read;\n-\n-\t    current_file = macro_start_file (builder, file, line,\n-\t\t\t\t\t     current_file, lh);\n-\t  }\n-\t  break;\n-\n-\tcase DW_MACRO_end_file:\n-\t  /* No data to skip by MAC_PTR.  */\n-\t  break;\n-\n-\tcase DW_MACRO_define_strp:\n-\tcase DW_MACRO_undef_strp:\n-\tcase DW_MACRO_define_sup:\n-\tcase DW_MACRO_undef_sup:\n-\t  {\n-\t    unsigned int bytes_read;\n-\n-\t    read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n-\t    mac_ptr += bytes_read;\n-\t    mac_ptr += offset_size;\n-\t  }\n-\t  break;\n-\n-\tcase DW_MACRO_import:\n-\tcase DW_MACRO_import_sup:\n-\t  /* Note that, according to the spec, a transparent include\n-\t     chain cannot call DW_MACRO_start_file.  So, we can just\n-\t     skip this opcode.  */\n-\t  mac_ptr += offset_size;\n-\t  break;\n-\n-\tcase DW_MACINFO_vendor_ext:\n-\t  /* Only skip the data by MAC_PTR.  */\n-\t  if (!section_is_gnu)\n-\t    {\n-\t      unsigned int bytes_read;\n-\n-\t      read_unsigned_leb128 (abfd, mac_ptr, &bytes_read);\n-\t      mac_ptr += bytes_read;\n-\t      read_direct_string (abfd, mac_ptr, &bytes_read);\n-\t      mac_ptr += bytes_read;\n-\t    }\n-\t  /* FALLTHROUGH */\n-\n-\tdefault:\n-\t  mac_ptr = skip_unknown_opcode (macinfo_type, opcode_definitions,\n-\t\t\t\t\t mac_ptr, mac_end, abfd, offset_size,\n-\t\t\t\t\t section);\n-\t  if (mac_ptr == NULL)\n-\t    return;\n-\t  break;\n-\t}\n-      DIAGNOSTIC_POP\n-    } while (macinfo_type != 0 && current_file == NULL);\n-\n-  /* Second pass: Process all entries.\n-\n-     Use the AT_COMMAND_LINE flag to determine whether we are still processing\n-     command-line macro definitions/undefinitions.  This flag is unset when we\n-     reach the first DW_MACINFO_start_file entry.  */\n-\n-  htab_up include_hash (htab_create_alloc (1, htab_hash_pointer,\n-\t\t\t\t\t   htab_eq_pointer,\n-\t\t\t\t\t   NULL, xcalloc, xfree));\n-  mac_ptr = section->buffer + offset;\n-  slot = htab_find_slot (include_hash.get (), mac_ptr, INSERT);\n-  *slot = (void *) mac_ptr;\n-  dwarf_decode_macro_bytes (dwarf2_per_objfile, builder,\n-\t\t\t    abfd, mac_ptr, mac_end,\n-\t\t\t    current_file, lh, section,\n-\t\t\t    section_is_gnu, 0, offset_size,\n-\t\t\t    include_hash.get ());\n-}\n+/* Macro support.  */\n \n /* An overload of dwarf_decode_macros that finds the correct section\n    and ensures it is read in before calling the other overload.  */"
    }
  ]
}