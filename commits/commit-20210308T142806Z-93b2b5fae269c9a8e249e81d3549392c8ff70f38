{
  "sha": "93b2b5fae269c9a8e249e81d3549392c8ff70f38",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTNiMmI1ZmFlMjY5YzlhOGUyNDllODFkMzU0OTM5MmM4ZmY3MGYzOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:06Z"
    },
    "message": "Split out eval_op_f_modulo\n\nThis splits BINOP_FORTRAN_MODULO into a new function for future use.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* f-lang.c (eval_op_f_modulo): New function.\n\t(evaluate_subexp_f): Use it.",
    "tree": {
      "sha": "260ff4e11e599302f0d921da179d0949c0d908af",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/260ff4e11e599302f0d921da179d0949c0d908af"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/93b2b5fae269c9a8e249e81d3549392c8ff70f38",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/93b2b5fae269c9a8e249e81d3549392c8ff70f38",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/93b2b5fae269c9a8e249e81d3549392c8ff70f38",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/93b2b5fae269c9a8e249e81d3549392c8ff70f38/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9f1a1f3c4f8fd9dd7422bf246ef3d199df22eb18",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9f1a1f3c4f8fd9dd7422bf246ef3d199df22eb18",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9f1a1f3c4f8fd9dd7422bf246ef3d199df22eb18"
    }
  ],
  "stats": {
    "total": 85,
    "additions": 49,
    "deletions": 36
  },
  "files": [
    {
      "sha": "5bf13a718c56c31d0dd096e1abd5b0bda8ed3971",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93b2b5fae269c9a8e249e81d3549392c8ff70f38/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93b2b5fae269c9a8e249e81d3549392c8ff70f38/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=93b2b5fae269c9a8e249e81d3549392c8ff70f38",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* f-lang.c (eval_op_f_modulo): New function.\n+\t(evaluate_subexp_f): Use it.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* f-lang.c (eval_op_f_floor): New function."
    },
    {
      "sha": "5239f7aa50a602ae1190d93721485fa1d4adda5f",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 44,
      "deletions": 36,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/93b2b5fae269c9a8e249e81d3549392c8ff70f38/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/93b2b5fae269c9a8e249e81d3549392c8ff70f38/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=93b2b5fae269c9a8e249e81d3549392c8ff70f38",
      "patch": "@@ -1079,6 +1079,47 @@ eval_op_f_floor (struct type *expect_type, struct expression *exp,\n   return value_from_host_double (type, val);\n }\n \n+/* A helper function for BINOP_FORTRAN_MODULO.  */\n+\n+static struct value *\n+eval_op_f_modulo (struct type *expect_type, struct expression *exp,\n+\t\t  enum noside noside,\n+\t\t  struct value *arg1, struct value *arg2)\n+{\n+  if (noside == EVAL_SKIP)\n+    return eval_skip_value (exp);\n+  struct type *type = value_type (arg1);\n+  if (type->code () != value_type (arg2)->code ())\n+    error (_(\"non-matching types for parameters to MODULO ()\"));\n+  /* MODULO(A, P) = A - FLOOR (A / P) * P */\n+  switch (type->code ())\n+    {\n+    case TYPE_CODE_INT:\n+      {\n+\tLONGEST a = value_as_long (arg1);\n+\tLONGEST p = value_as_long (arg2);\n+\tLONGEST result = a - (a / p) * p;\n+\tif (result != 0 && (a < 0) != (p < 0))\n+\t  result += p;\n+\treturn value_from_longest (value_type (arg1), result);\n+      }\n+    case TYPE_CODE_FLT:\n+      {\n+\tdouble a\n+\t  = target_float_to_host_double (value_contents (arg1),\n+\t\t\t\t\t value_type (arg1));\n+\tdouble p\n+\t  = target_float_to_host_double (value_contents (arg2),\n+\t\t\t\t\t value_type (arg2));\n+\tdouble result = fmod (a, p);\n+\tif (result != 0 && (a < 0.0) != (p < 0.0))\n+\t  result += p;\n+\treturn value_from_host_double (type, result);\n+      }\n+    }\n+  error (_(\"MODULO of type %s not supported\"), TYPE_SAFE_NAME (type));\n+}\n+\n /* Special expression evaluation cases for Fortran.  */\n \n static struct value *\n@@ -1132,42 +1173,9 @@ evaluate_subexp_f (struct type *expect_type, struct expression *exp,\n       }\n \n     case BINOP_FORTRAN_MODULO:\n-      {\n-\targ1 = evaluate_subexp (nullptr, exp, pos, noside);\n-\targ2 = evaluate_subexp (value_type (arg1), exp, pos, noside);\n-\tif (noside == EVAL_SKIP)\n-\t  return eval_skip_value (exp);\n-\ttype = value_type (arg1);\n-\tif (type->code () != value_type (arg2)->code ())\n-\t  error (_(\"non-matching types for parameters to MODULO ()\"));\n-\t/* MODULO(A, P) = A - FLOOR (A / P) * P */\n-\tswitch (type->code ())\n-\t  {\n-\t  case TYPE_CODE_INT:\n-\t    {\n-\t      LONGEST a = value_as_long (arg1);\n-\t      LONGEST p = value_as_long (arg2);\n-\t      LONGEST result = a - (a / p) * p;\n-\t      if (result != 0 && (a < 0) != (p < 0))\n-\t\tresult += p;\n-\t      return value_from_longest (value_type (arg1), result);\n-\t    }\n-\t  case TYPE_CODE_FLT:\n-\t    {\n-\t      double a\n-\t\t= target_float_to_host_double (value_contents (arg1),\n-\t\t\t\t\t       value_type (arg1));\n-\t      double p\n-\t\t= target_float_to_host_double (value_contents (arg2),\n-\t\t\t\t\t       value_type (arg2));\n-\t      double result = fmod (a, p);\n-\t      if (result != 0 && (a < 0.0) != (p < 0.0))\n-\t\tresult += p;\n-\t      return value_from_host_double (type, result);\n-\t    }\n-\t  }\n-\terror (_(\"MODULO of type %s not supported\"), TYPE_SAFE_NAME (type));\n-      }\n+      arg1 = evaluate_subexp (nullptr, exp, pos, noside);\n+      arg2 = evaluate_subexp (value_type (arg1), exp, pos, noside);\n+      return eval_op_f_modulo (expect_type, exp, noside, arg1, arg2);\n \n     case FORTRAN_LBOUND:\n     case FORTRAN_UBOUND:"
    }
  ]
}