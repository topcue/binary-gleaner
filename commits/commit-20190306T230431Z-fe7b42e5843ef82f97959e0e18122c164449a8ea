{
  "sha": "fe7b42e5843ef82f97959e0e18122c164449a8ea",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmU3YjQyZTU4NDNlZjgyZjk3OTU5ZTBlMTgxMjJjMTY0NDQ5YThlYQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-24T16:56:49Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-03-06T23:04:31Z"
    },
    "message": "Remove basic cleanup code\n\nThis removes the basic cleanup code: make_cleanups, do_cleanups,\ndiscard_cleanups, and friends.  This code is no longer needed, as\nnothing in gdb makes an ordinary cleanup.  Final cleanups are still\nneeded.\n\n2019-03-06  Tom Tromey  <tom@tromey.com>\n\n\t* top.c (quit_force): Update.\n\t* main.c (captured_command_loop): Update.\n\t* common/new-op.c (operator new): Update.\n\t* common/common-exceptions.c (struct catcher)\n\t<save_cleanup_chain>: Remove member.\n\t(exceptions_state_mc_init): Update.\n\t(exception_try_scope_entry): Return nullptr.\n\t(exception_try_scope_exit, exception_rethrow)\n\t(throw_exception_sjlj, throw_exception_cxx): Update.\n\t* common/cleanups.h (make_cleanup, make_cleanup_dtor)\n\t(all_cleanups, do_cleanups, discard_cleanups)\n\t(discard_final_cleanups, save_cleanups, save_final_cleanups)\n\t(restore_cleanups, restore_final_cleanups): Don't declare.\n\t(do_final_cleanups): Remove parameter.\n\t* common/cleanups.c (cleanup_chain, make_cleanup)\n\t(make_cleanup_dtor, all_cleanups, do_cleanups)\n\t(discard_my_cleanups, discard_cleanups)\n\t(discard_final_cleanups, save_my_cleanups, save_cleanups)\n\t(save_final_cleanups, restore_my_cleanups, restore_cleanups)\n\t(null_cleanup): Remove.\n\t(do_final_cleanups): Remove parameter.",
    "tree": {
      "sha": "9324d78cdb2e523c04fc6556882c21280606132f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9324d78cdb2e523c04fc6556882c21280606132f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fe7b42e5843ef82f97959e0e18122c164449a8ea",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe7b42e5843ef82f97959e0e18122c164449a8ea",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fe7b42e5843ef82f97959e0e18122c164449a8ea",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe7b42e5843ef82f97959e0e18122c164449a8ea/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c6321f19c5414c2a34db3cf5979834d081c32abd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6321f19c5414c2a34db3cf5979834d081c32abd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c6321f19c5414c2a34db3cf5979834d081c32abd"
    }
  ],
  "stats": {
    "total": 248,
    "additions": 31,
    "deletions": 217
  },
  "files": [
    {
      "sha": "a311b8290e40feb842771e6a459a12b06b0c7c8a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe7b42e5843ef82f97959e0e18122c164449a8ea/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe7b42e5843ef82f97959e0e18122c164449a8ea/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fe7b42e5843ef82f97959e0e18122c164449a8ea",
      "patch": "@@ -1,3 +1,27 @@\n+2019-03-06  Tom Tromey  <tom@tromey.com>\n+\n+\t* top.c (quit_force): Update.\n+\t* main.c (captured_command_loop): Update.\n+\t* common/new-op.c (operator new): Update.\n+\t* common/common-exceptions.c (struct catcher)\n+\t<save_cleanup_chain>: Remove member.\n+\t(exceptions_state_mc_init): Update.\n+\t(exception_try_scope_entry): Return nullptr.\n+\t(exception_try_scope_exit, exception_rethrow)\n+\t(throw_exception_sjlj, throw_exception_cxx): Update.\n+\t* common/cleanups.h (make_cleanup, make_cleanup_dtor)\n+\t(all_cleanups, do_cleanups, discard_cleanups)\n+\t(discard_final_cleanups, save_cleanups, save_final_cleanups)\n+\t(restore_cleanups, restore_final_cleanups): Don't declare.\n+\t(do_final_cleanups): Remove parameter.\n+\t* common/cleanups.c (cleanup_chain, make_cleanup)\n+\t(make_cleanup_dtor, all_cleanups, do_cleanups)\n+\t(discard_my_cleanups, discard_cleanups)\n+\t(discard_final_cleanups, save_my_cleanups, save_cleanups)\n+\t(save_final_cleanups, restore_my_cleanups, restore_cleanups)\n+\t(null_cleanup): Remove.\n+\t(do_final_cleanups): Remove parameter.\n+\n 2019-03-06  Tom Tromey  <tom@tromey.com>\n \n \t* remote.c (remote_target::remote_parse_stop_reply): Use"
    },
    {
      "sha": "121720d3c0f3563370bb5529e2b2e6daca782e53",
      "filename": "gdb/common/cleanups.c",
      "status": "modified",
      "additions": 4,
      "deletions": 156,
      "changes": 160,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe7b42e5843ef82f97959e0e18122c164449a8ea/gdb/common/cleanups.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe7b42e5843ef82f97959e0e18122c164449a8ea/gdb/common/cleanups.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/cleanups.c?ref=fe7b42e5843ef82f97959e0e18122c164449a8ea",
      "patch": "@@ -58,10 +58,6 @@ static const struct cleanup sentinel_cleanup = { 0, 0, 0, 0 };\n /* Handy macro to use when referring to sentinel_cleanup.  */\n #define SENTINEL_CLEANUP ((struct cleanup *) &sentinel_cleanup)\n \n-/* Chain of cleanup actions established with make_cleanup,\n-   to be executed if an error happens.  */\n-static struct cleanup *cleanup_chain = SENTINEL_CLEANUP;\n-\n /* Chain of cleanup actions established with make_final_cleanup,\n    to be executed when gdb exits.  */\n static struct cleanup *final_cleanup_chain = SENTINEL_CLEANUP;\n@@ -107,30 +103,11 @@ make_my_cleanup (struct cleanup **pmy_chain, make_cleanup_ftype *function,\n   return make_my_cleanup2 (pmy_chain, function, arg, NULL);\n }\n \n-/* Add a new cleanup to the cleanup_chain,\n+/* Add a new cleanup to the final cleanup_chain,\n    and return the previous chain pointer\n    to be passed later to do_cleanups or discard_cleanups.\n    Args are FUNCTION to clean up with, and ARG to pass to it.  */\n \n-struct cleanup *\n-make_cleanup (make_cleanup_ftype *function, void *arg)\n-{\n-  return make_my_cleanup (&cleanup_chain, function, arg);\n-}\n-\n-/* Same as make_cleanup except also includes DTOR, a destructor to free ARG.\n-   DTOR is invoked when the cleanup is performed or when it is discarded.  */\n-\n-struct cleanup *\n-make_cleanup_dtor (make_cleanup_ftype *function, void *arg,\n-\t\t   make_cleanup_dtor_ftype *dtor)\n-{\n-  return make_my_cleanup2 (&cleanup_chain,\n-\t\t\t   function, arg, dtor);\n-}\n-\n-/* Same as make_cleanup except the cleanup is added to final_cleanup_chain.  */\n-\n struct cleanup *\n make_final_cleanup (make_cleanup_ftype *function, void *arg)\n {\n@@ -158,139 +135,10 @@ do_my_cleanups (struct cleanup **pmy_chain,\n     }\n }\n \n-/* Return a value that can be passed to do_cleanups, do_final_cleanups to\n-   indicate perform all cleanups.  */\n-\n-struct cleanup *\n-all_cleanups (void)\n-{\n-  return SENTINEL_CLEANUP;\n-}\n-\n-/* Discard cleanups and do the actions they describe\n-   until we get back to the point OLD_CHAIN in the cleanup_chain.  */\n-\n-void\n-do_cleanups (struct cleanup *old_chain)\n-{\n-  do_my_cleanups (&cleanup_chain, old_chain);\n-}\n-\n-/* Discard cleanups and do the actions they describe\n-   until we get back to the point OLD_CHAIN in the final_cleanup_chain.  */\n-\n-void\n-do_final_cleanups (struct cleanup *old_chain)\n-{\n-  do_my_cleanups (&final_cleanup_chain, old_chain);\n-}\n-\n-/* Main worker routine to discard cleanups.\n-   PMY_CHAIN is a pointer to either cleanup_chain or final_cleanup_chain.\n-   OLD_CHAIN is the result of a \"make\" cleanup routine.\n-   Cleanups are discarded until we get back to the old end of the chain.  */\n-\n-static void\n-discard_my_cleanups (struct cleanup **pmy_chain,\n-\t\t     struct cleanup *old_chain)\n-{\n-  struct cleanup *ptr;\n-\n-  while ((ptr = *pmy_chain) != old_chain)\n-    {\n-      *pmy_chain = ptr->next;\n-      if (ptr->free_arg)\n-\t(*ptr->free_arg) (ptr->arg);\n-      xfree (ptr);\n-    }\n-}\n-\n-/* Discard cleanups, not doing the actions they describe,\n-   until we get back to the point OLD_CHAIN in the cleanup chain.  */\n-\n-void\n-discard_cleanups (struct cleanup *old_chain)\n-{\n-  discard_my_cleanups (&cleanup_chain, old_chain);\n-}\n-\n-/* Discard final cleanups, not doing the actions they describe,\n-   until we get back to the point OLD_CHAIN in the final cleanup chain.  */\n-\n-void\n-discard_final_cleanups (struct cleanup *old_chain)\n-{\n-  discard_my_cleanups (&final_cleanup_chain, old_chain);\n-}\n-\n-/* Main worker routine to save cleanups.\n-   PMY_CHAIN is a pointer to either cleanup_chain or final_cleanup_chain.\n-   The chain is emptied and the result is a pointer to the old chain.  */\n-\n-static struct cleanup *\n-save_my_cleanups (struct cleanup **pmy_chain)\n-{\n-  struct cleanup *old_chain = *pmy_chain;\n-\n-  *pmy_chain = SENTINEL_CLEANUP;\n-  return old_chain;\n-}\n-\n-/* Set the cleanup_chain to 0, and return the old cleanup_chain.  */\n-\n-struct cleanup *\n-save_cleanups (void)\n-{\n-  return save_my_cleanups (&cleanup_chain);\n-}\n-\n-/* Set the final_cleanup_chain to 0, and return the old\n-   final_cleanup_chain.  */\n-\n-struct cleanup *\n-save_final_cleanups (void)\n-{\n-  return save_my_cleanups (&final_cleanup_chain);\n-}\n-\n-/* Main worker routine to save cleanups.\n-   PMY_CHAIN is a pointer to either cleanup_chain or final_cleanup_chain.\n-   The chain is restored from CHAIN.  */\n-\n-static void\n-restore_my_cleanups (struct cleanup **pmy_chain, struct cleanup *chain)\n-{\n-  if (*pmy_chain != SENTINEL_CLEANUP)\n-    internal_warning (__FILE__, __LINE__,\n-\t\t      _(\"restore_my_cleanups has found a stale cleanup\"));\n-\n-  *pmy_chain = chain;\n-}\n-\n-/* Restore the cleanup chain from a previously saved chain.  */\n-\n-void\n-restore_cleanups (struct cleanup *chain)\n-{\n-  restore_my_cleanups (&cleanup_chain, chain);\n-}\n-\n-/* Restore the final cleanup chain from a previously saved chain.  */\n-\n-void\n-restore_final_cleanups (struct cleanup *chain)\n-{\n-  restore_my_cleanups (&final_cleanup_chain, chain);\n-}\n-\n-/* Provide a known function that does nothing, to use as a base for\n-   a possibly long chain of cleanups.  This is useful where we\n-   use the cleanup chain for handling normal cleanups as well as dealing\n-   with cleanups that need to be done as a result of a call to error().\n-   In such cases, we may not be certain where the first cleanup is, unless\n-   we have a do-nothing one to always use as the base.  */\n+/* Discard final cleanups and do the actions they describe.  */\n \n void\n-null_cleanup (void *arg)\n+do_final_cleanups ()\n {\n+  do_my_cleanups (&final_cleanup_chain, SENTINEL_CLEANUP);\n }"
    },
    {
      "sha": "e676076a16dc650228aeee70eb6bacd65fd6613d",
      "filename": "gdb/common/cleanups.h",
      "status": "modified",
      "additions": 1,
      "deletions": 31,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe7b42e5843ef82f97959e0e18122c164449a8ea/gdb/common/cleanups.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe7b42e5843ef82f97959e0e18122c164449a8ea/gdb/common/cleanups.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/cleanups.h?ref=fe7b42e5843ef82f97959e0e18122c164449a8ea",
      "patch": "@@ -32,38 +32,8 @@ typedef void (make_cleanup_ftype) (void *);\n /* Function type for the dtor in make_cleanup_dtor.  */\n typedef void (make_cleanup_dtor_ftype) (void *);\n \n-/* WARNING: The result of the \"make cleanup\" routines is not the intuitive\n-   choice of being a handle on the just-created cleanup.  Instead it is an\n-   opaque handle of the cleanup mechanism and represents all cleanups created\n-   from that point onwards.\n-   The result is guaranteed to be non-NULL though.  */\n-\n-extern struct cleanup *make_cleanup (make_cleanup_ftype *, void *);\n-\n-extern struct cleanup *make_cleanup_dtor (make_cleanup_ftype *, void *,\n-\t\t\t\t\t  make_cleanup_dtor_ftype *);\n-\n extern struct cleanup *make_final_cleanup (make_cleanup_ftype *, void *);\n \n-/* A special value to pass to do_cleanups and do_final_cleanups\n-   to tell them to do all cleanups.  */\n-extern struct cleanup *all_cleanups (void);\n-\n-extern void do_cleanups (struct cleanup *);\n-extern void do_final_cleanups (struct cleanup *);\n-\n-extern void discard_cleanups (struct cleanup *);\n-extern void discard_final_cleanups (struct cleanup *);\n-\n-extern struct cleanup *save_cleanups (void);\n-extern struct cleanup *save_final_cleanups (void);\n-\n-extern void restore_cleanups (struct cleanup *);\n-extern void restore_final_cleanups (struct cleanup *);\n-\n-/* A no-op cleanup.\n-   This is useful when you want to establish a known reference point\n-   to pass to do_cleanups.  */\n-extern void null_cleanup (void *);\n+extern void do_final_cleanups ();\n \n #endif /* COMMON_CLEANUPS_H */"
    },
    {
      "sha": "4e67e898bda187528155947ad33915b3930ad712",
      "filename": "gdb/common/common-exceptions.c",
      "status": "modified",
      "additions": 1,
      "deletions": 19,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe7b42e5843ef82f97959e0e18122c164449a8ea/gdb/common/common-exceptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe7b42e5843ef82f97959e0e18122c164449a8ea/gdb/common/common-exceptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-exceptions.c?ref=fe7b42e5843ef82f97959e0e18122c164449a8ea",
      "patch": "@@ -47,7 +47,6 @@ struct catcher\n   jmp_buf buf;\n   /* Status buffer belonging to the exception handler.  */\n   struct gdb_exception exception;\n-  struct cleanup *saved_cleanup_chain;\n   /* Back link.  */\n   struct catcher *prev;\n };\n@@ -83,10 +82,6 @@ exceptions_state_mc_init (void)\n   /* Start with no exception.  */\n   new_catcher->exception = exception_none;\n \n-  /* Prevent error/quit during FUNC from calling cleanups established\n-     prior to here.  */\n-  new_catcher->saved_cleanup_chain = save_cleanups ();\n-\n   /* Push this new catcher on the top.  */\n   new_catcher->prev = current_catcher;\n   current_catcher = new_catcher;\n@@ -102,11 +97,6 @@ catcher_pop (void)\n \n   current_catcher = old_catcher->prev;\n \n-  /* Restore the cleanup chain, the error/quit messages, and the uiout\n-     builder, to their original states.  */\n-\n-  restore_cleanups (old_catcher->saved_cleanup_chain);\n-\n   xfree (old_catcher);\n }\n \n@@ -228,7 +218,7 @@ void *\n exception_try_scope_entry (void)\n {\n   ++try_scope_depth;\n-  return (void *) save_cleanups ();\n+  return nullptr;\n }\n \n /* Called on exit of a TRY scope, either normal exit or exception\n@@ -237,7 +227,6 @@ exception_try_scope_entry (void)\n void\n exception_try_scope_exit (void *saved_state)\n {\n-  restore_cleanups ((struct cleanup *) saved_state);\n   --try_scope_depth;\n }\n \n@@ -248,9 +237,6 @@ exception_try_scope_exit (void *saved_state)\n void\n exception_rethrow (void)\n {\n-  /* Run this scope's cleanups before re-throwing to the next\n-     outermost scope.  */\n-  do_cleanups (all_cleanups ());\n   throw;\n }\n \n@@ -269,8 +255,6 @@ gdb_exception_sliced_copy (struct gdb_exception *to, const struct gdb_exception\n void\n throw_exception_sjlj (struct gdb_exception exception)\n {\n-  do_cleanups (all_cleanups ());\n-\n   /* Jump to the nearest CATCH_SJLJ block, communicating REASON to\n      that call via setjmp's return value.  Note that REASON can't be\n      zero, by definition in common-exceptions.h.  */\n@@ -286,8 +270,6 @@ throw_exception_sjlj (struct gdb_exception exception)\n static ATTRIBUTE_NORETURN void\n throw_exception_cxx (struct gdb_exception exception)\n {\n-  do_cleanups (all_cleanups ());\n-\n   if (exception.reason == RETURN_QUIT)\n     {\n       gdb_exception_RETURN_MASK_QUIT ex;"
    },
    {
      "sha": "cff6686ef12d4c523edf54bf46dc3815ce0f9bb2",
      "filename": "gdb/common/new-op.c",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe7b42e5843ef82f97959e0e18122c164449a8ea/gdb/common/new-op.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe7b42e5843ef82f97959e0e18122c164449a8ea/gdb/common/new-op.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/new-op.c?ref=fe7b42e5843ef82f97959e0e18122c164449a8ea",
      "patch": "@@ -66,8 +66,6 @@ operator new (std::size_t sz)\n \t}\n       CATCH (ex, RETURN_MASK_ALL)\n \t{\n-\t  do_cleanups (all_cleanups ());\n-\n \t  throw gdb_quit_bad_alloc (ex);\n \t}\n       END_CATCH"
    },
    {
      "sha": "97ffc3fba482abdf8acca6d336b8fbe15eb3cbc7",
      "filename": "gdb/main.c",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe7b42e5843ef82f97959e0e18122c164449a8ea/gdb/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe7b42e5843ef82f97959e0e18122c164449a8ea/gdb/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/main.c?ref=fe7b42e5843ef82f97959e0e18122c164449a8ea",
      "patch": "@@ -330,14 +330,6 @@ captured_command_loop ()\n   /* Now it's time to start the event loop.  */\n   start_event_loop ();\n \n-  /* FIXME: cagney/1999-11-05: A correct command_loop() implementaton\n-     would clean things up (restoring the cleanup chain) to the state\n-     they were just prior to the call.  Technically, this means that\n-     the do_cleanups() below is redundant.  Unfortunately, many FUNCs\n-     are not that well behaved.  do_cleanups should either be replaced\n-     with a do_cleanups call (to cover the problem) or an assertion\n-     check to detect bad FUNCs code.  */\n-  do_cleanups (all_cleanups ());\n   /* If the command_loop returned, normally (rather than threw an\n      error) we try to quit.  If the quit is aborted, our caller\n      catches the signal and restarts the command loop.  */"
    },
    {
      "sha": "4065df708154499be33a849d9d02c5e4946f5e0c",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe7b42e5843ef82f97959e0e18122c164449a8ea/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe7b42e5843ef82f97959e0e18122c164449a8ea/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=fe7b42e5843ef82f97959e0e18122c164449a8ea",
      "patch": "@@ -1675,7 +1675,7 @@ quit_force (int *exit_arg, int from_tty)\n   /* Do any final cleanups before exiting.  */\n   TRY\n     {\n-      do_final_cleanups (all_cleanups ());\n+      do_final_cleanups ();\n     }\n   CATCH (ex, RETURN_MASK_ALL)\n     {"
    }
  ]
}