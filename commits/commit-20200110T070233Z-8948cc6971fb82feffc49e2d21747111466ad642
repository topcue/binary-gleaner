{
  "sha": "8948cc6971fb82feffc49e2d21747111466ad642",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODk0OGNjNjk3MWZiODJmZWZmYzQ5ZTJkMjE3NDcxMTE0NjZhZDY0Mg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-01-08T20:14:16Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-01-10T07:02:33Z"
    },
    "message": "ubsan: spu: left shift of negative value\n\nAlso fixes a real bug.  The DECODE_INSN_I9a and DECODE_INSN_I9b both\nuse UNSIGNED_EXTRACT for 7 low bits of the result, but this was an\nunsigned value due to \"insn\" being unsigned.  DECODE_INSN_I9* is\ntherefore unsigned too, leading to a zero extension in an expression\nusing a bfd_vma if bfd_vma is 64 bits.\n\n\t* opcode/spu.h: Formatting.\n\t(UNSIGNED_EXTRACT): Use 1u.\n\t(SIGNED_EXTRACT): Don't sign extend with shifts.\n\t(DECODE_INSN_I9a, DECODE_INSN_I9b): Avoid left shift of signed value.\n\tKeep result signed.\n\t(DECODE_INSN_U9a, DECODE_INSN_U9b): Delete.",
    "tree": {
      "sha": "c71b8b40324ce83b2fb5396f2134f21169da1b21",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c71b8b40324ce83b2fb5396f2134f21169da1b21"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8948cc6971fb82feffc49e2d21747111466ad642",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8948cc6971fb82feffc49e2d21747111466ad642",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8948cc6971fb82feffc49e2d21747111466ad642",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8948cc6971fb82feffc49e2d21747111466ad642/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "71780f455fbf35ed4c48e94b4228c55c11a213c8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/71780f455fbf35ed4c48e94b4228c55c11a213c8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/71780f455fbf35ed4c48e94b4228c55c11a213c8"
    }
  ],
  "stats": {
    "total": 46,
    "additions": 29,
    "deletions": 17
  },
  "files": [
    {
      "sha": "91765c5be61c29352e4509b3a0b19942660ef1f9",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8948cc6971fb82feffc49e2d21747111466ad642/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8948cc6971fb82feffc49e2d21747111466ad642/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=8948cc6971fb82feffc49e2d21747111466ad642",
      "patch": "@@ -1,3 +1,12 @@\n+2020-01-10  Alan Modra  <amodra@gmail.com>\n+\n+\t* opcode/spu.h: Formatting.\n+\t(UNSIGNED_EXTRACT): Use 1u.\n+\t(SIGNED_EXTRACT): Don't sign extend with shifts.\n+\t(DECODE_INSN_I9a, DECODE_INSN_I9b): Avoid left shift of signed value.\n+\tKeep result signed.\n+\t(DECODE_INSN_U9a, DECODE_INSN_U9b): Delete.\n+\n 2020-01-07  Shahab Vahedi  <shahab@synopsys.com>\n \n \t* opcode/arc.h (insn_class_t): Add 'LLOCK' and 'SCOND'."
    },
    {
      "sha": "d8505ef6da35ae46f908a73554d7d5ef2270cc86",
      "filename": "include/opcode/spu.h",
      "status": "modified",
      "additions": 20,
      "deletions": 17,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8948cc6971fb82feffc49e2d21747111466ad642/include/opcode/spu.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8948cc6971fb82feffc49e2d21747111466ad642/include/opcode/spu.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/spu.h?ref=8948cc6971fb82feffc49e2d21747111466ad642",
      "patch": "@@ -87,39 +87,42 @@ struct spu_opcode\n    int arg[5];\n };\n \n-#define SIGNED_EXTRACT(insn,size,pos) (((int)((insn) << (32-size-pos))) >> (32-size))\n-#define UNSIGNED_EXTRACT(insn,size,pos) (((insn) >> pos) & ((1 << size)-1))\n+#define UNSIGNED_EXTRACT(insn, size, pos)\t\\\n+  (((insn) >> (pos)) & ((1u << (size)) - 1))\n+#define SIGNED_EXTRACT(insn, size, pos)\t\t\t\\\n+  (((int) UNSIGNED_EXTRACT(insn, size, pos)\t\t\\\n+    ^ (1 << ((size) - 1))) - (1 << ((size) - 1)))\n \n #define DECODE_INSN_RT(insn) (insn & 0x7f)\n #define DECODE_INSN_RA(insn) ((insn >> 7) & 0x7f)\n #define DECODE_INSN_RB(insn) ((insn >> 14) & 0x7f)\n #define DECODE_INSN_RC(insn) ((insn >> 21) & 0x7f)\n \n-#define DECODE_INSN_I10(insn) SIGNED_EXTRACT(insn,10,14)\n-#define DECODE_INSN_U10(insn) UNSIGNED_EXTRACT(insn,10,14)\n+#define DECODE_INSN_I10(insn) SIGNED_EXTRACT (insn, 10, 14)\n+#define DECODE_INSN_U10(insn) UNSIGNED_EXTRACT (insn, 10, 14)\n \n /* For branching, immediate loads, hbr and  lqa/stqa. */\n-#define DECODE_INSN_I16(insn) SIGNED_EXTRACT(insn,16,7)\n-#define DECODE_INSN_U16(insn) UNSIGNED_EXTRACT(insn,16,7)\n+#define DECODE_INSN_I16(insn) SIGNED_EXTRACT (insn, 16, 7)\n+#define DECODE_INSN_U16(insn) UNSIGNED_EXTRACT (insn, 16, 7)\n \n /* for stop */\n-#define DECODE_INSN_U14(insn) UNSIGNED_EXTRACT(insn,14,0)\n+#define DECODE_INSN_U14(insn) UNSIGNED_EXTRACT (insn, 14, 0)\n \n /* For ila */\n-#define DECODE_INSN_I18(insn) SIGNED_EXTRACT(insn,18,7)\n-#define DECODE_INSN_U18(insn) UNSIGNED_EXTRACT(insn,18,7)\n+#define DECODE_INSN_I18(insn) SIGNED_EXTRACT (insn, 18, 7)\n+#define DECODE_INSN_U18(insn) UNSIGNED_EXTRACT (insn, 18, 7)\n \n /* For rotate and shift and generate control mask */\n-#define DECODE_INSN_I7(insn) SIGNED_EXTRACT(insn,7,14)\n-#define DECODE_INSN_U7(insn) UNSIGNED_EXTRACT(insn,7,14)\n+#define DECODE_INSN_I7(insn) SIGNED_EXTRACT (insn, 7, 14)\n+#define DECODE_INSN_U7(insn) UNSIGNED_EXTRACT (insn, 7, 14)\n \n /* For float <-> int conversion */\n-#define DECODE_INSN_I8(insn)  SIGNED_EXTRACT(insn,8,14)\n-#define DECODE_INSN_U8(insn) UNSIGNED_EXTRACT(insn,8,14)\n+#define DECODE_INSN_I8(insn) SIGNED_EXTRACT (insn, 8, 14)\n+#define DECODE_INSN_U8(insn) UNSIGNED_EXTRACT (insn, 8, 14)\n \n /* For hbr  */\n-#define DECODE_INSN_I9a(insn) ((SIGNED_EXTRACT(insn,2,23) << 7) | UNSIGNED_EXTRACT(insn,7,0))\n-#define DECODE_INSN_I9b(insn) ((SIGNED_EXTRACT(insn,2,14) << 7) | UNSIGNED_EXTRACT(insn,7,0))\n-#define DECODE_INSN_U9a(insn) ((UNSIGNED_EXTRACT(insn,2,23) << 7) | UNSIGNED_EXTRACT(insn,7,0))\n-#define DECODE_INSN_U9b(insn) ((UNSIGNED_EXTRACT(insn,2,14) << 7) | UNSIGNED_EXTRACT(insn,7,0))\n+#define DECODE_INSN_I9a(insn) \\\n+  ((SIGNED_EXTRACT (insn, 2, 23) * 128) | (int) UNSIGNED_EXTRACT (insn, 7, 0))\n+#define DECODE_INSN_I9b(insn) \\\n+  ((SIGNED_EXTRACT (insn, 2, 14) * 128) | (int) UNSIGNED_EXTRACT (insn, 7, 0))\n "
    }
  ]
}