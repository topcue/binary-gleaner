{
  "sha": "89bcba74f89baceba3fa7387622e3d60e1de02e8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODliY2JhNzRmODliYWNlYmEzZmE3Mzg3NjIyZTNkNjBlMWRlMDJlOA==",
  "commit": {
    "author": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2020-05-09T14:17:45Z"
    },
    "committer": {
      "name": "Philippe Waroquiers",
      "email": "philippe.waroquiers@skynet.be",
      "date": "2020-05-15T20:17:45Z"
    },
    "message": "command-def-selftests.c: detect missing or wrong prefix cmd in subcommands.\n\nThis test revealed a number of problems that are fixed in the previous commit.\n\n2020-05-15  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\n\t* unittests/command-def-selftests.c (traverse_command_structure):\n\tVerify all commands of a list have the same prefix command and\n\tthat only the top cmdlist commands have a null prefix.",
    "tree": {
      "sha": "2f91d85620ff9930aaa2c2709fd7cf71014db9f5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2f91d85620ff9930aaa2c2709fd7cf71014db9f5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/89bcba74f89baceba3fa7387622e3d60e1de02e8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89bcba74f89baceba3fa7387622e3d60e1de02e8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/89bcba74f89baceba3fa7387622e3d60e1de02e8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89bcba74f89baceba3fa7387622e3d60e1de02e8/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "3f4d92ebdf7f848b5ccc9e8d8e8514c64fde1183",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f4d92ebdf7f848b5ccc9e8d8e8514c64fde1183",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3f4d92ebdf7f848b5ccc9e8d8e8514c64fde1183"
    }
  ],
  "stats": {
    "total": 43,
    "additions": 41,
    "deletions": 2
  },
  "files": [
    {
      "sha": "d6204a297eb29605e7f83f76dcfe7ef139d51e45",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/89bcba74f89baceba3fa7387622e3d60e1de02e8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/89bcba74f89baceba3fa7387622e3d60e1de02e8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=89bcba74f89baceba3fa7387622e3d60e1de02e8",
      "patch": "@@ -1,3 +1,9 @@\n+2020-05-15  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\n+\t* unittests/command-def-selftests.c (traverse_command_structure):\n+\tVerify all commands of a list have the same prefix command and\n+\tthat only the top cmdlist commands have a null prefix.\n+\n 2020-05-15  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* cli/cli-decode.c (lookup_cmd_for_prefix): Return the aliased command"
    },
    {
      "sha": "2146f8028d81692b159800bde6f20976bf07ade1",
      "filename": "gdb/unittests/command-def-selftests.c",
      "status": "modified",
      "additions": 35,
      "deletions": 2,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/89bcba74f89baceba3fa7387622e3d60e1de02e8/gdb/unittests/command-def-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/89bcba74f89baceba3fa7387622e3d60e1de02e8/gdb/unittests/command-def-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/command-def-selftests.c?ref=89bcba74f89baceba3fa7387622e3d60e1de02e8",
      "patch": "@@ -106,20 +106,26 @@ help_doc_invariants_tests ()\n \n namespace command_structure_tests {\n \n+/* Nr of commands in which a duplicated list is found.  */\n unsigned int nr_duplicates = 0;\n+/* Nr of commands in a list having no valid prefix cmd.  */\n+unsigned int nr_invalid_prefixcmd = 0;\n \n /* A map associating a list with the prefix leading to it.  */\n \n std::map<cmd_list_element **, const char *> lists;\n \n /* Store each command list in lists, associated with the prefix to reach it.  A\n-   list must only be found once.  */\n+   list must only be found once.\n+\n+   Verifies that all elements of the list have the same non-null prefix\n+   command.  */\n \n static void\n traverse_command_structure (struct cmd_list_element **list,\n \t\t\t    const char *prefix)\n {\n-  struct cmd_list_element *c;\n+  struct cmd_list_element *c, *prefixcmd;\n \n   auto dupl = lists.find (list);\n   if (dupl != lists.end ())\n@@ -137,6 +143,13 @@ traverse_command_structure (struct cmd_list_element **list,\n \n   lists.insert ({list, prefix});\n \n+  /* All commands of *list must have a prefix command equal to PREFIXCMD,\n+     the prefix command of the first command.  */\n+  if (*list == nullptr)\n+    prefixcmd = nullptr; /* A prefix command with an empty subcommand list.  */\n+  else\n+    prefixcmd = (*list)->prefix;\n+\n   /* Walk through the commands.  */\n   for (c = *list; c; c = c->next)\n     {\n@@ -148,6 +161,23 @@ traverse_command_structure (struct cmd_list_element **list,\n \t     passing the right prefix in.  */\n \t  traverse_command_structure (c->prefixlist, c->prefixname);\n \t}\n+      if (prefixcmd != c->prefix\n+\t  || (prefixcmd == nullptr && *list != cmdlist))\n+\t{\n+\t  if (c->prefix == nullptr)\n+\t    fprintf_filtered (gdb_stdout,\n+\t\t\t      \"list %p reachable via prefix '%s'.\"\n+\t\t\t      \"  command '%s' has null prefixcmd\\n\",\n+\t\t\t      list,\n+\t\t\t      prefix, c->name);\n+\t  else\n+\t    fprintf_filtered (gdb_stdout,\n+\t\t\t      \"list %p reachable via prefix '%s'.\"\n+\t\t\t      \"  command '%s' has a different prefixcmd\\n\",\n+\t\t\t      list,\n+\t\t\t      prefix, c->name);\n+\t  nr_invalid_prefixcmd++;\n+\t}\n     }\n }\n \n@@ -157,12 +187,15 @@ static void\n command_structure_invariants_tests ()\n {\n   nr_duplicates = 0;\n+  nr_invalid_prefixcmd = 0;\n+\n   traverse_command_structure (&cmdlist, \"\");\n \n   /* Release memory, be ready to be re-run.  */\n   lists.clear ();\n \n   SELF_CHECK (nr_duplicates == 0);\n+  SELF_CHECK (nr_invalid_prefixcmd == 0);\n }\n \n }"
    }
  ]
}