{
  "sha": "aa2d5a4229eb541406d3b91a384ad6a62caf7760",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWEyZDVhNDIyOWViNTQxNDA2ZDNiOTFhMzg0YWQ2YTYyY2FmNzc2MA==",
  "commit": {
    "author": {
      "name": "Keith Seitz",
      "email": "keiths@redhat.com",
      "date": "2019-12-07T17:35:03Z"
    },
    "committer": {
      "name": "Keith Seitz",
      "email": "keiths@redhat.com",
      "date": "2019-12-07T20:05:41Z"
    },
    "message": "Core file build-id support\n\nThis patch uses new BFD support for detecting build-ids in core\nfiles.\n\nAfter this patch, it is possible to run gdb with only the\ncore file, and gdb will automatically load the executable and\ndebug info [example from tests]:\n\n$ gdb -nx -q\n(gdb) core-file corefile-buildid.core\n[New LWP 29471]\nReading symbols from gdb.base/corefile-buildid/debugdir-exec/.build-id/36/fe5722c5a7ca3ac746a84e223c6a2a69193a24...\nCore was generated by `outputs/gdb.base/coref'.\nProgram terminated with signal SIGABRT, Aborted.\n(gdb)\n\nThis work is based on functionality available in Fedora originally\nwritten by Jan Kratochvil.\n\nRegression tested on buildbot.\n\ngdb/ChangeLog:\n2019-12-07  Keith Seitz  <keiths@redhat.com>\n\n\t* build-id.c (build_id_bfd_get): Permit bfd_core, too.\n\t(build_id_to_debug_bfd): Make static, rewriting to use\n\tbuild_id_to_bfd_suffix.\n\t(build_id_to_bfd_suffix): Copy of build_id_to_debug_bfd,\n\tadding `suffix' parameter. Append SUFFIX to file names\n\twhen searching for matching files.\n\t(build_id_to_debug_bfd): Use build_id_to_bfd_suffix.\n\t(build_id_to_exec_bfd): Likewise.\n\t* build-id.h (build_id_to_debug_bfd): Clarify that function\n\tsearches for BFD of debug info file.\n\t(build_id_to_exec_bfd): Declare.\n\t* corelow.c: Include build-id.h.\n\t(locate_exec_from_corefile_build_id): New function.\n\t(core_target_open): If no executable BFD is found,\n\tsearch for a core file BFD using build-id.\n\ngdb/testsuite/ChangeLog:\n2019-12-07  Keith Seitz  <keiths@redhat.com>\n\n\t* gdb.base/corefile-buildid-shlib-shr.c: New file.\n\t* gdb.base/corefile-buildid-shlib.c: New file.\n\t* gdb.base/corefile-buildid.c: New file.\n\t* gdb.base/corefile-buildid.exp: New file.\n\nChange-Id: I15e9e8e58f10c68b5cae55e2eba58df1e8aef529",
    "tree": {
      "sha": "cb77da7a06472447d1d9174c9fdc31f30311c305",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cb77da7a06472447d1d9174c9fdc31f30311c305"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/aa2d5a4229eb541406d3b91a384ad6a62caf7760",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa2d5a4229eb541406d3b91a384ad6a62caf7760",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/aa2d5a4229eb541406d3b91a384ad6a62caf7760",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa2d5a4229eb541406d3b91a384ad6a62caf7760/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "5fa370e437f39bf73a133cc84c4e6329943522bf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5fa370e437f39bf73a133cc84c4e6329943522bf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5fa370e437f39bf73a133cc84c4e6329943522bf"
    }
  ],
  "stats": {
    "total": 493,
    "additions": 485,
    "deletions": 8
  },
  "files": [
    {
      "sha": "ee45156e391bcc0dd152f009b0ce8f7d20655f21",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa2d5a4229eb541406d3b91a384ad6a62caf7760/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa2d5a4229eb541406d3b91a384ad6a62caf7760/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=aa2d5a4229eb541406d3b91a384ad6a62caf7760",
      "patch": "@@ -1,3 +1,21 @@\n+2019-12-07  Keith Seitz  <keiths@redhat.com>\n+\n+\t* build-id.c (build_id_bfd_get): Permit bfd_core, too.\n+\t(build_id_to_debug_bfd): Make static, rewriting to use\n+\tbuild_id_to_bfd_suffix.\n+\t(build_id_to_bfd_suffix): Copy of build_id_to_debug_bfd,\n+\tadding `suffix' parameter. Append SUFFIX to file names\n+\twhen searching for matching files.\n+\t(build_id_to_debug_bfd): Use build_id_to_bfd_suffix.\n+\t(build_id_to_exec_bfd): Likewise.\n+\t* build-id.h (build_id_to_debug_bfd): Clarify that function\n+\tsearches for BFD of debug info file.\n+\t(build_id_to_exec_bfd): Declare.\n+\t* corelow.c: Include build-id.h.\n+\t(locate_exec_from_corefile_build_id): New function.\n+\t(core_target_open): If no executable BFD is found,\n+\tsearch for a core file BFD using build-id.\n+\n 2019-12-06  Christian Biesinger  <cbiesinger@google.com>\n \n \t* bcache.c: Put in namespace gdb."
    },
    {
      "sha": "e8d77bb44c80305dfc682aa94eb75ea05c83f409",
      "filename": "gdb/build-id.c",
      "status": "modified",
      "additions": 25,
      "deletions": 5,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa2d5a4229eb541406d3b91a384ad6a62caf7760/gdb/build-id.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa2d5a4229eb541406d3b91a384ad6a62caf7760/gdb/build-id.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/build-id.c?ref=aa2d5a4229eb541406d3b91a384ad6a62caf7760",
      "patch": "@@ -32,7 +32,8 @@\n const struct bfd_build_id *\n build_id_bfd_get (bfd *abfd)\n {\n-  if (!bfd_check_format (abfd, bfd_object))\n+  if (!bfd_check_format (abfd, bfd_object)\n+      && !bfd_check_format (abfd, bfd_core))\n     return NULL;\n \n   if (abfd->build_id != NULL)\n@@ -117,10 +118,13 @@ build_id_to_debug_bfd_1 (const std::string &link, size_t build_id_len,\n   return debug_bfd;\n }\n \n-/* See build-id.h.  */\n+/* Common code for finding BFDs of a given build-id.  This function\n+   works with both debuginfo files (SUFFIX == \".debug\") and executable\n+   files (SUFFIX == \"\").  */\n \n-gdb_bfd_ref_ptr\n-build_id_to_debug_bfd (size_t build_id_len, const bfd_byte *build_id)\n+static gdb_bfd_ref_ptr\n+build_id_to_bfd_suffix (size_t build_id_len, const bfd_byte *build_id,\n+\t\t\tconst char *suffix)\n {\n   /* Keep backward compatibility so that DEBUG_FILE_DIRECTORY being \"\" will\n      cause \"/.build-id/...\" lookups.  */\n@@ -149,7 +153,7 @@ build_id_to_debug_bfd (size_t build_id_len, const bfd_byte *build_id)\n       while (size-- > 0)\n \tstring_appendf (link, \"%02x\", (unsigned) *data++);\n \n-      link += \".debug\";\n+      link += suffix;\n \n       gdb_bfd_ref_ptr debug_bfd\n \t= build_id_to_debug_bfd_1 (link, build_id_len, build_id);\n@@ -177,6 +181,22 @@ build_id_to_debug_bfd (size_t build_id_len, const bfd_byte *build_id)\n \n /* See build-id.h.  */\n \n+gdb_bfd_ref_ptr\n+build_id_to_debug_bfd (size_t build_id_len, const bfd_byte *build_id)\n+{\n+  return build_id_to_bfd_suffix (build_id_len, build_id, \".debug\");\n+}\n+\n+/* See build-id.h.  */\n+\n+gdb_bfd_ref_ptr\n+build_id_to_exec_bfd (size_t build_id_len, const bfd_byte *build_id)\n+{\n+  return build_id_to_bfd_suffix (build_id_len, build_id, \"\");\n+}\n+\n+/* See build-id.h.  */\n+\n std::string\n find_separate_debug_file_by_buildid (struct objfile *objfile)\n {"
    },
    {
      "sha": "d251bc1e5d4002cda94f2d55c80e13c5ae29546c",
      "filename": "gdb/build-id.h",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa2d5a4229eb541406d3b91a384ad6a62caf7760/gdb/build-id.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa2d5a4229eb541406d3b91a384ad6a62caf7760/gdb/build-id.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/build-id.h?ref=aa2d5a4229eb541406d3b91a384ad6a62caf7760",
      "patch": "@@ -34,13 +34,19 @@ extern int build_id_verify (bfd *abfd,\n \t\t\t    size_t check_len, const bfd_byte *check);\n \n \n-/* Find and open a BFD given a build-id.  If no BFD can be found,\n-   return NULL.  The returned reference to the BFD must be released by\n-   the caller.  */\n+/* Find and open a BFD for a debuginfo file  given a build-id.  If no BFD\n+   can be found, return NULL.  */\n \n extern gdb_bfd_ref_ptr build_id_to_debug_bfd (size_t build_id_len,\n \t\t\t\t\t      const bfd_byte *build_id);\n \n+/* Find and open a BFD for an executable file given a build-id.  If no BFD\n+   can be found, return NULL.  The returned reference to the BFD must be\n+   released by the caller.  */\n+\n+extern gdb_bfd_ref_ptr build_id_to_exec_bfd (size_t build_id_len,\n+\t\t\t\t\t     const bfd_byte *build_id);\n+\n /* Find the separate debug file for OBJFILE, by using the build-id\n    associated with OBJFILE's BFD.  If successful, returns the file name for the\n    separate debug file, otherwise, return an empty string.  */"
    },
    {
      "sha": "bdbfae372d74f187d1ebde7f03ab823e7c741b7d",
      "filename": "gdb/corelow.c",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa2d5a4229eb541406d3b91a384ad6a62caf7760/gdb/corelow.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa2d5a4229eb541406d3b91a384ad6a62caf7760/gdb/corelow.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/corelow.c?ref=aa2d5a4229eb541406d3b91a384ad6a62caf7760",
      "patch": "@@ -43,6 +43,7 @@\n #include \"gdb_bfd.h\"\n #include \"completer.h\"\n #include \"gdbsupport/filestuff.h\"\n+#include \"build-id.h\"\n \n #ifndef O_LARGEFILE\n #define O_LARGEFILE 0\n@@ -351,6 +352,27 @@ core_file_command (const char *filename, int from_tty)\n     core_target_open (filename, from_tty);\n }\n \n+/* Locate (and load) an executable file (and symbols) given the core file\n+   BFD ABFD.  */\n+\n+static void\n+locate_exec_from_corefile_build_id (bfd *abfd, int from_tty)\n+{\n+  const bfd_build_id *build_id = build_id_bfd_get (abfd);\n+  if (build_id == nullptr)\n+    return;\n+\n+  gdb_bfd_ref_ptr execbfd\n+    = build_id_to_exec_bfd (build_id->size, build_id->data);\n+\n+  if (execbfd != nullptr)\n+    {\n+      exec_file_attach (bfd_get_filename (execbfd.get ()), from_tty);\n+      symbol_file_add_main (bfd_get_filename (execbfd.get ()),\n+\t\t\t    symfile_add_flag (from_tty ? SYMFILE_VERBOSE : 0));\n+    }\n+}\n+\n /* See gdbcore.h.  */\n \n void\n@@ -456,6 +478,9 @@ core_target_open (const char *arg, int from_tty)\n \tswitch_to_thread (thread);\n     }\n \n+  if (exec_bfd == nullptr)\n+    locate_exec_from_corefile_build_id (core_bfd, from_tty);\n+\n   post_create_inferior (target, from_tty);\n \n   /* Now go through the target stack looking for threads since there"
    },
    {
      "sha": "17ae51a37a99448f1536396a386ea2a7ec955580",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa2d5a4229eb541406d3b91a384ad6a62caf7760/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa2d5a4229eb541406d3b91a384ad6a62caf7760/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=aa2d5a4229eb541406d3b91a384ad6a62caf7760",
      "patch": "@@ -1,3 +1,10 @@\n+2019-12-07  Keith Seitz  <keiths@redhat.com>\n+\n+\t* gdb.base/corefile-buildid-shlib-shr.c: New file.\n+\t* gdb.base/corefile-buildid-shlib.c: New file.\n+\t* gdb.base/corefile-buildid.c: New file.\n+\t* gdb.base/corefile-buildid.exp: New file.\n+\n 2019-12-06  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.dwarf2/varval.exp: Add decl before def test."
    },
    {
      "sha": "55b9bfae6d94ac8b98721805ebd2d9c2bc7bc12e",
      "filename": "gdb/testsuite/gdb.base/corefile-buildid-shlib-shr.c",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa2d5a4229eb541406d3b91a384ad6a62caf7760/gdb/testsuite/gdb.base/corefile-buildid-shlib-shr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa2d5a4229eb541406d3b91a384ad6a62caf7760/gdb/testsuite/gdb.base/corefile-buildid-shlib-shr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/corefile-buildid-shlib-shr.c?ref=aa2d5a4229eb541406d3b91a384ad6a62caf7760",
      "patch": "@@ -0,0 +1,29 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+static int crashfunc_global = 1234;\n+\n+int\n+crashfunc (void)\n+{\n+  printf (\"in crashfunc\\n\");\n+  abort ();\n+  return crashfunc_global;\n+}"
    },
    {
      "sha": "10c523d701a1ba3f1702353784c8673a757232dd",
      "filename": "gdb/testsuite/gdb.base/corefile-buildid-shlib.c",
      "status": "added",
      "additions": 58,
      "deletions": 0,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa2d5a4229eb541406d3b91a384ad6a62caf7760/gdb/testsuite/gdb.base/corefile-buildid-shlib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa2d5a4229eb541406d3b91a384ad6a62caf7760/gdb/testsuite/gdb.base/corefile-buildid-shlib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/corefile-buildid-shlib.c?ref=aa2d5a4229eb541406d3b91a384ad6a62caf7760",
      "patch": "@@ -0,0 +1,58 @@\n+/* Copyright (C) 2007-2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This shared library will dlopen another shared object.\n+   This is based on gdb.base/solib-disc.c.  */\n+\n+#include <stdio.h>\n+#include <stdlib.h>\n+\n+#ifdef __WIN32__\n+#include <windows.h>\n+#define dlopen(name, mode) LoadLibrary (name)\n+#define dlsym(handle, func) GetProcAddress (handle, func)\n+#define dlclose(handle) FreeLibrary (handle)\n+#define dlerror() \"an error occurred\"\n+#else\n+#include <dlfcn.h>\n+#endif\n+\n+const char *the_shlib = SHLIB_NAME;\n+\n+int\n+shlib_function (void)\n+{\n+  void *handle;\n+  int (*func) (void);\n+  int result;\n+\n+  handle = dlopen (the_shlib, RTLD_LAZY);\n+  if (!handle)\n+    {\n+      fprintf (stderr, \"%s\\n\", dlerror ());\n+      exit (1);\n+    }\n+\n+  func = (int (*)(void)) dlsym (handle, \"crashfunc\");\n+  if (func == NULL)\n+    {\n+      fprintf (stderr, \"%s\\n\", dlerror ());\n+      exit (1);\n+    }\n+\n+  result = func ();\n+  dlclose (handle);\n+  return result;\n+}"
    },
    {
      "sha": "ae0a1cabdc241a5ce874d2e07f33676bb2dbd316",
      "filename": "gdb/testsuite/gdb.base/corefile-buildid.c",
      "status": "added",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa2d5a4229eb541406d3b91a384ad6a62caf7760/gdb/testsuite/gdb.base/corefile-buildid.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa2d5a4229eb541406d3b91a384ad6a62caf7760/gdb/testsuite/gdb.base/corefile-buildid.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/corefile-buildid.c?ref=aa2d5a4229eb541406d3b91a384ad6a62caf7760",
      "patch": "@@ -0,0 +1,43 @@\n+/* Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifdef TEST_SHARED\n+/* A function in the shared library linked with this program.  */\n+extern int shlib_function (void);\n+#else\n+#include <stdlib.h>\n+\n+static int crashfunc_global = 4321;\n+\n+static int\n+crashfunc (void)\n+{\n+  abort ();\n+  return crashfunc_global;\n+}\n+\n+int\n+shlib_function (void)\n+{\n+  return crashfunc ();\n+}\n+#endif\n+\n+int\n+main (void)\n+{\n+  int ret = shlib_function ();\n+  return ret;\n+}"
    },
    {
      "sha": "8a29359854d8094137e3ec997deb8b776aed1c54",
      "filename": "gdb/testsuite/gdb.base/corefile-buildid.exp",
      "status": "added",
      "additions": 271,
      "deletions": 0,
      "changes": 271,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa2d5a4229eb541406d3b91a384ad6a62caf7760/gdb/testsuite/gdb.base/corefile-buildid.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa2d5a4229eb541406d3b91a384ad6a62caf7760/gdb/testsuite/gdb.base/corefile-buildid.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/corefile-buildid.exp?ref=aa2d5a4229eb541406d3b91a384ad6a62caf7760",
      "patch": "@@ -0,0 +1,271 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Based on break.exp, written by Rob Savoye. (rob@cygnus.com)\n+# Modified to test gdb's handling of separate debug info files.\n+# Modified to test gdb's handling of a debug-id retrieval.\n+\n+# Build-id-related tests for core files.\n+\n+standard_testfile\n+\n+# Build a non-shared executable.\n+\n+proc build_corefile_buildid_exec {} {\n+    global testfile srcfile binfile execdir\n+\n+    if {[build_executable $testfile.exp $testfile $srcfile debug] == -1} {\n+\tuntested \"failed to compile\"\n+\treturn false\n+    }\n+\n+    # Move executable to non-default path.\n+    set builddir [standard_output_file $execdir]\n+    remote_exec build \"rm -rf $builddir\"\n+    remote_exec build \"mkdir $builddir\"\n+    remote_exec build \"mv $binfile [file join $builddir [file tail $binfile]]\"\n+\n+    return true\n+}\n+\n+# Build a shared executable.\n+\n+proc build_corefile_buildid_shared {} {\n+    global srcdir subdir testfile binfile srcfile sharedir\n+\n+    set builddir [standard_output_file $sharedir]\n+\n+    # Compile DSO.\n+    set srcdso [file join $srcdir $subdir $testfile-shlib-shr.c]\n+    set objdso [standard_output_file $testfile-shlib-shr.so]\n+    if {[gdb_compile_shlib $srcdso $objdso {debug}] != \"\"} {\n+\tuntested \"failed to compile dso\"\n+\treturn false\n+    }\n+\n+    # Compile shared library.\n+    set srclib [file join $srcdir $subdir $testfile-shlib.c]\n+    set libname lib$testfile.so\n+    set objlib [standard_output_file $libname]\n+    set dlopen_lib [shlib_target_file \\\n+\t\t\t[file join $builddir [file tail $objdso]]]\n+    set opts [list debug shlib_load \\\n+\t\t  additional_flags=-DSHLIB_NAME=\\\"$dlopen_lib\\\"]\n+    if {[gdb_compile_shlib $srclib $objlib $opts] != \"\"} {\n+\tuntested \"failed to compile shared library\"\n+\treturn false\n+    }\n+\n+    # Compile main program.\n+    set srcexec [file join $srcdir $subdir $srcfile]\n+    set binfile [standard_output_file $testfile-shared]\n+    set opts [list debug shlib=$objlib additional_flags=-DTEST_SHARED]\n+    if {[gdb_compile $srcexec $binfile executable $opts] != \"\"} {\n+\tuntested \"failed to compile shared executable\"\n+\treturn false\n+    }\n+\n+    # Move objects to non-default path.\n+    remote_exec build \"rm -rf $builddir\"\n+    remote_exec build \"mkdir $builddir\"\n+    remote_exec build \"mv $binfile $builddir\"\n+    remote_exec build \"mv $objdso  $builddir\"\n+    remote_exec build \"mv $objlib $builddir\"\n+\n+    return true\n+}\n+\n+# Append DEBUGDIR to the debug-file-directory path.\n+\n+proc append_debug_dir {debugdir} {\n+    global gdb_prompt\n+\n+    set orig_debugdir {}\n+    gdb_test_multiple \"show debug-file-directory\" \\\n+\t\"get debug-file-directory\" {\n+\t    -re \"The directory where separate debug symbols are searched for is \\\"(.*)\\\"\\.\\[\\r\\n\\]+$gdb_prompt $\" {\n+\t\tset orig_debugdir $expect_out(1,string)\n+\t\tpass \"get debug-file-directory\"\n+\t    }\n+\t}\n+    gdb_test_no_output \"set debug-file-directory $debugdir:$orig_debugdir\" \\\n+\t\"append debug directory\"\n+}\n+\n+# A convenience procedure to check if \"info files\" mentions the exec file\n+# FILE.\n+\n+proc check_exec_file {file} {\n+    send_log \"expecting exec file \\\"$file\\\"\\n\"\n+    gdb_test \"info files\" \"Local exec file:\\[\\r\\n\\t\\ \\]+`[string_to_regexp $file]'.*\"\n+}\n+\n+# Test whether gdb can find an exec file from a core file's build-id.\n+# The executable (and separate debuginfo if SEPDEBUG is true) is\n+# copied to the .build-id directory.\n+#\n+# SUFFIX is appended to the .builid-id parent directory name to\n+# keep all tests separate.\n+# SYMLINK specifies whether build-id files should be copied or symlinked.\n+# SHARED is a boolean indicating whether we are testing the shared\n+# library core dump test case.\n+\n+proc locate_exec_from_core_build_id {corefile buildid suffix \\\n+\t\t\t\t\t sepdebug symlink shared} {\n+    global testfile binfile srcfile\n+\n+    clean_restart\n+\n+    # Set up the build-id directory and symlink the binary there.\n+    if {$symlink} {\n+\tset d \"symlinkdir\"\n+    } else {\n+\tset d \"debugdir\"\n+    }\n+    set debugdir [standard_output_file $d-$suffix]\n+    remote_exec build \"rm -rf $debugdir\"\n+    remote_exec build \\\n+\t\"mkdir -p [file join $debugdir [file dirname $buildid]]\"\n+\n+    set files_list {}\n+    if {$sepdebug} {\n+\tlappend files_list \"$binfile.stripped\" $buildid\n+\tlappend files_list \"$binfile.debug\" \"$buildid.debug\"\n+    } else {\n+\tlappend files_list $binfile $buildid\n+    }\n+    if {$shared} {\n+\tglobal sharedir\n+\tset builddir [standard_output_file $sharedir]\n+    } else {\n+\tglobal execdir\n+\tset builddir [standard_output_file $execdir]\n+    }\n+    foreach {target name} $files_list {\n+\tset t [file join $builddir [file tail $target]]\n+\tif {$symlink} {\n+\t    remote_exec build \"ln -s $t [file join $debugdir $name]\"\n+\t} else {\n+\t    remote_exec build \"cp $t [file join $debugdir $name]\"\n+\t}\n+    }\n+\n+    # Append the debugdir to the separate debug directory search path.\n+    append_debug_dir $debugdir\n+\n+    gdb_test \"core-file $corefile\" \"Program terminated with .*\" \\\n+\t\"load core file\"\n+    if {$symlink} {\n+\tif {$sepdebug} {\n+\t    set expected_file [file join $builddir \\\n+\t\t\t\t   [file tail \"$binfile.stripped\"]]\n+\t} else {\n+\t    set expected_file [file join $builddir [file tail $binfile]]\n+\t}\n+    } else {\n+\tset expected_file $buildid\n+    }\n+    check_exec_file [file join $debugdir $expected_file]\n+}\n+\n+# Run a build-id tests on a core file.\n+# Supported options: \"-shared\" and \"-sepdebug\" for running tests\n+# of shared and/or stripped/.debug executables.\n+\n+proc do_corefile_buildid_tests {args} {\n+    global binfile testfile srcfile execdir sharedir\n+\n+    # Parse options.\n+    parse_args [list {sepdebug} {shared}]\n+\n+    # PROGRAM to run to generate core file.  This could be different\n+    # than the program that was originally built, e.g., for a stripped\n+    # executable.\n+    if {$shared} {\n+\tset builddir [standard_output_file $sharedir]\n+    } else {\n+\tset builddir [standard_output_file $execdir]\n+    }\n+    set program_to_run [file join $builddir [file tail $binfile]]\n+\n+    # A list of suffixes to use to describe the test and the .build-id\n+    # directory for the test.  The suffix will be used, joined with spaces,\n+    # to prefix all tests for the given run.  It will be used, joined with\n+    # dashes, to create a unique build-id directory.\n+    set suffix {}\n+    if {$shared} {\n+\tlappend suffix \"shared\"\n+    } else {\n+\tlappend suffix \"exec\"\n+    }\n+\n+    if {$sepdebug} {\n+\t# Strip debuginfo into its own file.\n+\tif {[gdb_gnu_strip_debug [standard_output_file $program_to_run]] \\\n+\t\t!= 0} {\n+\t    untested \"could not strip executable  for [join $suffix \\ ]\"\n+\t    return\n+\t}\n+\n+\t# Run the stripped program instead of the original.\n+\tset program_to_run [file join $builddir \\\n+\t\t\t\t[file tail \"$binfile.stripped\"]]\n+\tlappend suffix \"sepdebug\"\n+    }\n+\n+    # Find the core file.\n+    set corefile [core_find $program_to_run]\n+    if {$corefile == \"\"} {\n+\tuntested \"could not generate core file\"\n+\treturn\n+    }\n+    verbose -log \"corefile is $corefile\"\n+\n+    # Grab the build-id from the binary, removing \".debug\" from the end.\n+    set buildid [build_id_debug_filename_get $program_to_run]\n+    if {$buildid == \"\"} {\n+\tuntested \"binary for [join $suffix \\ ] has no build-id\"\n+    }\n+    regsub {\\.debug$} $buildid {} buildid\n+    verbose -log \"build-id is $buildid\"\n+\n+    with_test_prefix \"[join $suffix \\ ]\"  {\n+\tlocate_exec_from_core_build_id $corefile $buildid \\\n+\t    [join $suffix -] $sepdebug false $shared\n+    }\n+\n+    with_test_prefix \"symlink [join $suffix \\ ]\" {\n+\tlocate_exec_from_core_build_id $corefile $buildid \\\n+\t    [join $suffix -] $sepdebug true $shared\n+    }\n+}\n+\n+# Directories where executables will be moved before testing.\n+set execdir \"build-exec\"\n+set sharedir \"build-shared\"\n+\n+#\n+# Do tests\n+#\n+\n+build_corefile_buildid_exec\n+do_corefile_buildid_tests\n+do_corefile_buildid_tests -sepdebug\n+\n+if {![skip_shlib_tests]} {\n+    build_corefile_buildid_shared\n+    do_corefile_buildid_tests -shared\n+    do_corefile_buildid_tests -shared -sepdebug\n+}"
    }
  ]
}