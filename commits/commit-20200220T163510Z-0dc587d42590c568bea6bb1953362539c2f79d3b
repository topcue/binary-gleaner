{
  "sha": "0dc587d42590c568bea6bb1953362539c2f79d3b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGRjNTg3ZDQyNTkwYzU2OGJlYTZiYjE5NTMzNjI1MzljMmY3OWQzYg==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-17T15:11:57Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-20T16:35:10Z"
    },
    "message": "gdbserver: turn non-stop and async target ops into methods\n\ngdbserver/ChangeLog:\n2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn process_stratum_target's supports_non_stop, async, and\n\tstart_non_stop ops into methods of process_target.\n\n\t* target.h (struct process_stratum_target): Remove the target ops.\n\t(class process_target): Add the target ops.\n\t(target_supports_non_stop): Update the macro.\n\t(target_async): Update the macro.\n\t(start_non_stop): Remove declaration.\n\t* target.cc (process_target::supports_non_stop): Define.\n\t(process_target::async): Define.\n\t(process_target::start_non_stop): Define.\n\t(start_non_stop): Remove.\n\n\tUpdate the derived classes and callers below.\n\n\t* server.cc (handle_qxfer_siginfo): Update.\n\t(handle_query): Update.\n\t* linux-low.cc (linux_target_ops): Update.\n\t(linux_supports_non_stop): Turn into ...\n\t(linux_process_target::supports_non_stop): ... this.\n\t(linux_async): Turn into ...\n\t(linux_process_target::async): ... this.\n\t(linux_start_non_stop): Turn into ...\n\t(linux_process_target::start_non_stop): ... this.\n\t* linux-low.h (class linux_process_target): Update.\n\t* lynx-low.cc (lynx_target_ops): Update.\n\t* nto-low.cc (nto_target_ops): Update.\n\t(nto_supports_non_stop): Remove; rely on the default behavior\n\tinstead.\n\t* win32-low.cc (win32_target_ops): Update.",
    "tree": {
      "sha": "bf2f556d52a9267cb9c2390049f773cf9f73bdde",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bf2f556d52a9267cb9c2390049f773cf9f73bdde"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0dc587d42590c568bea6bb1953362539c2f79d3b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0dc587d42590c568bea6bb1953362539c2f79d3b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0dc587d42590c568bea6bb1953362539c2f79d3b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0dc587d42590c568bea6bb1953362539c2f79d3b/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d7abedf7e7d18c8a32f63b0e44bee4a4f3b581ba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d7abedf7e7d18c8a32f63b0e44bee4a4f3b581ba",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d7abedf7e7d18c8a32f63b0e44bee4a4f3b581ba"
    }
  ],
  "stats": {
    "total": 150,
    "additions": 86,
    "deletions": 64
  },
  "files": [
    {
      "sha": "062c013e79589274cdbee828821450edde5c5f23",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0dc587d42590c568bea6bb1953362539c2f79d3b/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0dc587d42590c568bea6bb1953362539c2f79d3b/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=0dc587d42590c568bea6bb1953362539c2f79d3b",
      "patch": "@@ -1,3 +1,36 @@\n+2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn process_stratum_target's supports_non_stop, async, and\n+\tstart_non_stop ops into methods of process_target.\n+\n+\t* target.h (struct process_stratum_target): Remove the target ops.\n+\t(class process_target): Add the target ops.\n+\t(target_supports_non_stop): Update the macro.\n+\t(target_async): Update the macro.\n+\t(start_non_stop): Remove declaration.\n+\t* target.cc (process_target::supports_non_stop): Define.\n+\t(process_target::async): Define.\n+\t(process_target::start_non_stop): Define.\n+\t(start_non_stop): Remove.\n+\n+\tUpdate the derived classes and callers below.\n+\n+\t* server.cc (handle_qxfer_siginfo): Update.\n+\t(handle_query): Update.\n+\t* linux-low.cc (linux_target_ops): Update.\n+\t(linux_supports_non_stop): Turn into ...\n+\t(linux_process_target::supports_non_stop): ... this.\n+\t(linux_async): Turn into ...\n+\t(linux_process_target::async): ... this.\n+\t(linux_start_non_stop): Turn into ...\n+\t(linux_process_target::start_non_stop): ... this.\n+\t* linux-low.h (class linux_process_target): Update.\n+\t* lynx-low.cc (lynx_target_ops): Update.\n+\t* nto-low.cc (nto_target_ops): Update.\n+\t(nto_supports_non_stop): Remove; rely on the default behavior\n+\tinstead.\n+\t* win32-low.cc (win32_target_ops): Update.\n+\n 2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn process_stratum_target's qxfer_siginfo op into a method of"
    },
    {
      "sha": "d162f7e421f964ffa3332ebe68731441050a0c83",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 10,
      "deletions": 13,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0dc587d42590c568bea6bb1953362539c2f79d3b/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0dc587d42590c568bea6bb1953362539c2f79d3b/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=0dc587d42590c568bea6bb1953362539c2f79d3b",
      "patch": "@@ -6265,16 +6265,16 @@ sigchld_handler (int signo)\n   errno = old_errno;\n }\n \n-static int\n-linux_supports_non_stop (void)\n+bool\n+linux_process_target::supports_non_stop ()\n {\n-  return 1;\n+  return true;\n }\n \n-static int\n-linux_async (int enable)\n+bool\n+linux_process_target::async (bool enable)\n {\n-  int previous = target_is_async_p ();\n+  bool previous = target_is_async_p ();\n \n   if (debug_threads)\n     debug_printf (\"linux_async (%d), previous=%d\\n\",\n@@ -6326,13 +6326,13 @@ linux_async (int enable)\n   return previous;\n }\n \n-static int\n-linux_start_non_stop (int nonstop)\n+int\n+linux_process_target::start_non_stop (bool nonstop)\n {\n   /* Register or unregister from event-loop accordingly.  */\n-  linux_async (nonstop);\n+  target_async (nonstop);\n \n-  if (target_is_async_p () != (nonstop != 0))\n+  if (target_is_async_p () != (nonstop != false))\n     return -1;\n \n   return 0;\n@@ -7429,9 +7429,6 @@ linux_get_hwcap2 (int wordsize)\n static linux_process_target the_linux_target;\n \n static process_stratum_target linux_target_ops = {\n-  linux_supports_non_stop,\n-  linux_async,\n-  linux_start_non_stop,\n   linux_supports_multi_process,\n   linux_supports_fork_events,\n   linux_supports_vfork_events,"
    },
    {
      "sha": "c5982ca3e5b9c7d62dfa13ee4cf0ff4abeb6c551",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0dc587d42590c568bea6bb1953362539c2f79d3b/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0dc587d42590c568bea6bb1953362539c2f79d3b/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=0dc587d42590c568bea6bb1953362539c2f79d3b",
      "patch": "@@ -357,6 +357,12 @@ class linux_process_target : public process_target\n   int qxfer_siginfo (const char *annex, unsigned char *readbuf,\n \t\t     unsigned const char *writebuf,\n \t\t     CORE_ADDR offset, int len) override;\n+\n+  bool supports_non_stop () override;\n+\n+  bool async (bool enable) override;\n+\n+  int start_non_stop (bool enable) override;\n };\n \n #define get_thread_lwp(thr) ((struct lwp_info *) (thread_target_data (thr)))"
    },
    {
      "sha": "15811d2034a0029dcdf739f8cd63cffc49416c07",
      "filename": "gdbserver/lynx-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0dc587d42590c568bea6bb1953362539c2f79d3b/gdbserver/lynx-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0dc587d42590c568bea6bb1953362539c2f79d3b/gdbserver/lynx-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.cc?ref=0dc587d42590c568bea6bb1953362539c2f79d3b",
      "patch": "@@ -735,9 +735,6 @@ static lynx_process_target the_lynx_target;\n /* The LynxOS target_ops vector.  */\n \n static process_stratum_target lynx_target_ops = {\n-  NULL,  /* supports_non_stop */\n-  NULL,  /* async */\n-  NULL,  /* start_non_stop */\n   NULL,  /* supports_multi_process */\n   NULL,  /* supports_fork_events */\n   NULL,  /* supports_vfork_events */"
    },
    {
      "sha": "bb0b14aa95116017bfcb098555bc5cf6984fd5e7",
      "filename": "gdbserver/nto-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 12,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0dc587d42590c568bea6bb1953362539c2f79d3b/gdbserver/nto-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0dc587d42590c568bea6bb1953362539c2f79d3b/gdbserver/nto-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.cc?ref=0dc587d42590c568bea6bb1953362539c2f79d3b",
      "patch": "@@ -933,15 +933,6 @@ nto_process_target::stopped_data_address ()\n   return ret;\n }\n \n-/* We do not currently support non-stop.  */\n-\n-static int\n-nto_supports_non_stop (void)\n-{\n-  TRACE (\"%s\\n\", __func__);\n-  return 0;\n-}\n-\n /* Implementation of the target_ops method \"sw_breakpoint_from_kind\".  */\n \n static const gdb_byte *\n@@ -956,9 +947,6 @@ nto_sw_breakpoint_from_kind (int kind, int *size)\n static nto_process_target the_nto_target;\n \n static process_stratum_target nto_target_ops = {\n-  nto_supports_non_stop,\n-  NULL, /* async */\n-  NULL, /* start_non_stop */\n   NULL, /* supports_multi_process */\n   NULL, /* supports_fork_events */\n   NULL, /* supports_vfork_events */"
    },
    {
      "sha": "f427e7706fbb62730636902bd77aaa2fcafab6db",
      "filename": "gdbserver/server.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0dc587d42590c568bea6bb1953362539c2f79d3b/gdbserver/server.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0dc587d42590c568bea6bb1953362539c2f79d3b/gdbserver/server.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/server.cc?ref=0dc587d42590c568bea6bb1953362539c2f79d3b",
      "patch": "@@ -740,7 +740,7 @@ handle_general_set (char *own_buf)\n \t}\n \n       req_str = req ? \"non-stop\" : \"all-stop\";\n-      if (start_non_stop (req) != 0)\n+      if (the_target->pt->start_non_stop (req == 1) != 0)\n \t{\n \t  fprintf (stderr, \"Setting %s mode failed\\n\", req_str);\n \t  write_enn (own_buf);\n@@ -1234,7 +1234,7 @@ handle_detach (char *own_buf)\n \t    debug_printf (\"Forcing non-stop mode\\n\");\n \n \t  non_stop = true;\n-\t  start_non_stop (1);\n+\t  the_target->pt->start_non_stop (true);\n \t}\n \n       process->gdb_detached = 1;\n@@ -3885,7 +3885,7 @@ captured_main (int argc, char *argv[])\n \t\t     down without informing GDB.  */\n \t\t  if (!non_stop)\n \t\t    {\n-\t\t      if (start_non_stop (1))\n+\t\t      if (the_target->pt->start_non_stop (true))\n \t\t\tnon_stop = 1;\n \n \t\t      /* Detaching implicitly resumes all threads;"
    },
    {
      "sha": "33e31a748effd63396d1b4183e79debd64a886ca",
      "filename": "gdbserver/target.cc",
      "status": "modified",
      "additions": 21,
      "deletions": 14,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0dc587d42590c568bea6bb1953362539c2f79d3b/gdbserver/target.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0dc587d42590c568bea6bb1953362539c2f79d3b/gdbserver/target.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.cc?ref=0dc587d42590c568bea6bb1953362539c2f79d3b",
      "patch": "@@ -264,20 +264,6 @@ target_supports_multi_process (void)\n \t  (*the_target->supports_multi_process) () : 0);\n }\n \n-int\n-start_non_stop (int nonstop)\n-{\n-  if (the_target->start_non_stop == NULL)\n-    {\n-      if (nonstop)\n-\treturn -1;\n-      else\n-\treturn 0;\n-    }\n-\n-  return (*the_target->start_non_stop) (nonstop);\n-}\n-\n void\n set_target_ops (process_stratum_target *target)\n {\n@@ -541,3 +527,24 @@ process_target::qxfer_siginfo (const char *annex, unsigned char *readbuf,\n {\n   gdb_assert_not_reached (\"target op qxfer_siginfo not supported\");\n }\n+\n+bool\n+process_target::supports_non_stop ()\n+{\n+  return false;\n+}\n+\n+bool\n+process_target::async (bool enable)\n+{\n+  return false;\n+}\n+\n+int\n+process_target::start_non_stop (bool enable)\n+{\n+  if (enable)\n+    return -1;\n+  else\n+    return 0;\n+}"
    },
    {
      "sha": "d3ee4452b63809059dace475400dfe390f6478b5",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 13,
      "deletions": 16,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0dc587d42590c568bea6bb1953362539c2f79d3b/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0dc587d42590c568bea6bb1953362539c2f79d3b/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=0dc587d42590c568bea6bb1953362539c2f79d3b",
      "patch": "@@ -70,16 +70,6 @@ class process_target;\n    shared code.  */\n struct process_stratum_target\n {\n-  int (*supports_non_stop) (void);\n-\n-  /* Enables async target events.  Returns the previous enable\n-     state.  */\n-  int (*async) (int enable);\n-\n-  /* Switch to non-stop (1) or all-stop (0) mode.  Return 0 on\n-     success, -1 otherwise.  */\n-  int (*start_non_stop) (int);\n-\n   /* Returns true if the target supports multi-process debugging.  */\n   int (*supports_multi_process) (void);\n \n@@ -485,6 +475,17 @@ class process_target\n   virtual int qxfer_siginfo (const char *annex, unsigned char *readbuf,\n \t\t\t     unsigned const char *writebuf,\n \t\t\t     CORE_ADDR offset, int len);\n+\n+  /* Return true if non-stop mode is supported.  */\n+  virtual bool supports_non_stop ();\n+\n+  /* Enables async target events.  Returns the previous enable\n+     state.  */\n+  virtual bool async (bool enable);\n+\n+  /* Switch to non-stop (ENABLE == true) or all-stop (ENABLE == false)\n+     mode.  Return 0 on success, -1 otherwise.  */\n+  virtual int start_non_stop (bool enable);\n };\n \n extern process_stratum_target *the_target;\n@@ -537,10 +538,10 @@ int kill_inferior (process_info *proc);\n   the_target->pt->join (pid)\n \n #define target_supports_non_stop() \\\n-  (the_target->supports_non_stop ? (*the_target->supports_non_stop ) () : 0)\n+  the_target->pt->supports_non_stop ()\n \n #define target_async(enable) \\\n-  (the_target->async ? (*the_target->async) (enable) : 0)\n+  the_target->pt->async (enable)\n \n #define target_process_qsupported(features, count)\t\\\n   do\t\t\t\t\t\t\t\\\n@@ -696,10 +697,6 @@ target_read_btrace_conf (struct btrace_target_info *tinfo,\n   (the_target->supports_software_single_step ? \\\n    (*the_target->supports_software_single_step) () : 0)\n \n-/* Start non-stop mode, returns 0 on success, -1 on failure.   */\n-\n-int start_non_stop (int nonstop);\n-\n ptid_t mywait (ptid_t ptid, struct target_waitstatus *ourstatus, int options,\n \t       int connected_wait);\n "
    },
    {
      "sha": "60a7f475f84f8739e5164d5ab66ff461bd60c1d4",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0dc587d42590c568bea6bb1953362539c2f79d3b/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0dc587d42590c568bea6bb1953362539c2f79d3b/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=0dc587d42590c568bea6bb1953362539c2f79d3b",
      "patch": "@@ -1852,9 +1852,6 @@ win32_sw_breakpoint_from_kind (int kind, int *size)\n static win32_process_target the_win32_target;\n \n static process_stratum_target win32_target_ops = {\n-  NULL, /* supports_non_stop */\n-  NULL, /* async */\n-  NULL, /* start_non_stop */\n   NULL, /* supports_multi_process */\n   NULL, /* supports_fork_events */\n   NULL, /* supports_vfork_events */"
    }
  ]
}