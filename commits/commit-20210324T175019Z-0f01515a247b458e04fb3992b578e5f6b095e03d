{
  "sha": "0f01515a247b458e04fb3992b578e5f6b095e03d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGYwMTUxNWEyNDdiNDU4ZTA0ZmIzOTkyYjU3OGU1ZjZiMDk1ZTAzZA==",
  "commit": {
    "author": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2020-06-15T18:43:03Z"
    },
    "committer": {
      "name": "Luis Machado",
      "email": "luis.machado@linaro.org",
      "date": "2021-03-24T17:50:19Z"
    },
    "message": "Documentation for memory tagging remote packets\n\nDocument the remote packet changes to support memory tagging.\n\ngdb/doc/ChangeLog:\n\n2021-03-24  Luis Machado  <luis.machado@linaro.org>\n\n\t* gdb.texinfo (General Query Packets): Document qMemTags and\n\tQMemTags.  Document the \"memory-tagging\" feature.\n\t(ARM-Specific Protocol Details): Document memory tag types.",
    "tree": {
      "sha": "0560fd4ae064c6d96cfa32e59de65f6a455a16e3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0560fd4ae064c6d96cfa32e59de65f6a455a16e3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0f01515a247b458e04fb3992b578e5f6b095e03d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0f01515a247b458e04fb3992b578e5f6b095e03d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0f01515a247b458e04fb3992b578e5f6b095e03d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0f01515a247b458e04fb3992b578e5f6b095e03d/comments",
  "author": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "luislinaro",
    "id": 53092780,
    "node_id": "MDQ6VXNlcjUzMDkyNzgw",
    "avatar_url": "https://avatars.githubusercontent.com/u/53092780?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/luislinaro",
    "html_url": "https://github.com/luislinaro",
    "followers_url": "https://api.github.com/users/luislinaro/followers",
    "following_url": "https://api.github.com/users/luislinaro/following{/other_user}",
    "gists_url": "https://api.github.com/users/luislinaro/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/luislinaro/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/luislinaro/subscriptions",
    "organizations_url": "https://api.github.com/users/luislinaro/orgs",
    "repos_url": "https://api.github.com/users/luislinaro/repos",
    "events_url": "https://api.github.com/users/luislinaro/events{/privacy}",
    "received_events_url": "https://api.github.com/users/luislinaro/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c2cfa6542c93db30b26b9c22cf9ef235a08e9fae",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c2cfa6542c93db30b26b9c22cf9ef235a08e9fae",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c2cfa6542c93db30b26b9c22cf9ef235a08e9fae"
    }
  ],
  "stats": {
    "total": 120,
    "additions": 120,
    "deletions": 0
  },
  "files": [
    {
      "sha": "6dc6a6569e90d14ce39e2d5d46f890060cfd95b3",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f01515a247b458e04fb3992b578e5f6b095e03d/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f01515a247b458e04fb3992b578e5f6b095e03d/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=0f01515a247b458e04fb3992b578e5f6b095e03d",
      "patch": "@@ -1,3 +1,9 @@\n+2021-03-24  Luis Machado  <luis.machado@linaro.org>\n+\n+\t* gdb.texinfo (General Query Packets): Document qMemTags and\n+\tQMemTags.  Document the \"memory-tagging\" feature.\n+\t(ARM-Specific Protocol Details): Document memory tag types.\n+\n 2021-03-18  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* python.texinfo (Parameters In Python): Return empty string in"
    },
    {
      "sha": "e26ce4e9b6bbca5ee10f43602e428dadf4d6abd7",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 114,
      "deletions": 0,
      "changes": 114,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0f01515a247b458e04fb3992b578e5f6b095e03d/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0f01515a247b458e04fb3992b578e5f6b095e03d/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=0f01515a247b458e04fb3992b578e5f6b095e03d",
      "patch": "@@ -40992,6 +40992,87 @@ is a sequence of thread IDs, @var{threadid} (eight hex\n digits), from the target.  See @code{remote.c:parse_threadlist_response()}.\n @end table\n \n+@item qMemTags:@var{start address},@var{length}:@var{type}\n+@anchor{qMemTags}\n+@cindex fetch memory tags\n+@cindex @samp{qMemTags} packet\n+Fetch memory tags of type @var{type} from the address range\n+@w{@r{[}@var{start address}, @var{start address} + @var{length}@r{)}}.  The\n+target is responsible for calculating how many tags will be returned, as this\n+is architecture-specific.\n+\n+@var{start address} is the starting address of the memory range.\n+\n+@var{length} is the length, in bytes, of the memory range.\n+\n+@var{type} is the type of tag the request wants to fetch.  The type is a signed\n+integer.\n+\n+Reply:\n+@table @samp\n+@item @var{mxx}@dots{}\n+Hex encoded sequence of uninterpreted bytes, @var{xx}@dots{}, representing the\n+tags found in the requested memory range.\n+\n+@item E @var{nn}\n+An error occured.  This means that fetching of memory tags failed for some\n+reason.\n+\n+@item @w{}\n+An empty reply indicates that @samp{qMemTags} is not supported by the stub,\n+although this should not happen given @value{GDBN} will only send this packet\n+if the stub has advertised support for memory tagging via @samp{qSupported}.\n+@end table\n+\n+@item QMemTags:@var{start address},@var{length}:@var{type}:@var{tag bytes}\n+@anchor{QMemTags}\n+@cindex store memory tags\n+@cindex @samp{QMemTags} packet\n+Store memory tags of type @var{type} to the address range\n+@w{@r{[}@var{start address}, @var{start address} + @var{length}@r{)}}.  The\n+target is responsible for interpreting the type, the tag bytes and modifying\n+the memory tag granules accordingly, given this is architecture-specific.\n+\n+The interpretation of how many tags (@var{nt}) should be written to how many\n+memory tag granules (@var{ng}) is also architecture-specific.  The behavior is\n+implementation-specific, but the following is suggested.\n+\n+If the number of memory tags, @var{nt}, is greater than or equal to the\n+number of memory tag granules, @var{ng}, only @var{ng} tags will be\n+stored.\n+\n+If @var{nt} is less than @var{ng}, the behavior is that of a fill operation,\n+and the tag bytes will be used as a pattern that will get repeated until\n+@var{ng} tags are stored.\n+\n+@var{start address} is the starting address of the memory range.  The address\n+does not have any restriction on alignment or size.\n+\n+@var{length} is the length, in bytes, of the memory range.\n+\n+@var{type} is the type of tag the request wants to fetch.  The type is a signed\n+integer.\n+\n+@var{tag bytes} is a sequence of hex encoded uninterpreted bytes which will be\n+interpreted by the target.  Each pair of hex digits is interpreted as a\n+single byte.\n+\n+Reply:\n+@table @samp\n+@item OK\n+The request was successful and the memory tag granules were modified\n+accordingly.\n+\n+@item E @var{nn}\n+An error occured.  This means that modifying the memory tag granules failed\n+for some reason.\n+\n+@item @w{}\n+An empty reply indicates that @samp{QMemTags} is not supported by the stub,\n+although this should not happen given @value{GDBN} will only send this packet\n+if the stub has advertised support for memory tagging via @samp{qSupported}.\n+@end table\n+\n @item qOffsets\n @cindex section offsets, remote request\n @cindex @samp{qOffsets} packet\n@@ -41659,6 +41740,11 @@ These are the currently defined stub features and their properties:\n @tab @samp{-}\n @tab No\n \n+@item @samp{memory-tagging}\n+@tab No\n+@tab @samp{-}\n+@tab No\n+\n @end multitable\n \n These are the currently defined stub features, in more detail:\n@@ -41873,6 +41959,16 @@ The remote stub understands the @samp{QThreadEvents} packet.\n @item no-resumed\n The remote stub reports the @samp{N} stop reply.\n \n+\n+@item memory-tagging\n+The remote stub supports and implements the required memory tagging\n+functionality and understands the @samp{qMemTags} (@pxref{qMemTags}) and\n+@samp{QMemTags} (@pxref{QMemTags}) packets.\n+\n+For AArch64 GNU/Linux systems, this feature also requires access to the\n+@file{/proc/@var{pid}/smaps} file so memory mapping page flags can be inspected.\n+This is done via the @samp{vFile} requests.\n+\n @end table\n \n @item qSymbol::\n@@ -42354,6 +42450,7 @@ details of XML target descriptions for each architecture.\n \n @menu\n * ARM Breakpoint Kinds::\n+* ARM Memory Tag Types::\n @end menu\n \n @node ARM Breakpoint Kinds\n@@ -42375,6 +42472,23 @@ These breakpoint kinds are defined for the @samp{Z0} and @samp{Z1} packets.\n \n @end table\n \n+@node ARM Memory Tag Types\n+@subsubsection @acronym{ARM} Memory Tag Types\n+@cindex memory tag types, @acronym{ARM}\n+\n+These memory tag types are defined for the @samp{qMemTag} and @samp{QMemTag}\n+packets.\n+\n+@table @r\n+\n+@item 0\n+MTE logical tag\n+\n+@item 1\n+MTE allocation tag\n+\n+@end table\n+\n @node MIPS-Specific Protocol Details\n @subsection @acronym{MIPS}-specific Protocol Details\n "
    }
  ]
}