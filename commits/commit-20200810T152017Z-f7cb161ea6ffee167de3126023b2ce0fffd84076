{
  "sha": "f7cb161ea6ffee167de3126023b2ce0fffd84076",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjdjYjE2MWVhNmZmZWUxNjdkZTMxMjYwMjNiMmNlMGZmZmQ4NDA3Ng==",
  "commit": {
    "author": {
      "name": "Przemyslaw Wirkus",
      "email": "przemyslaw.wirkus@arm.com",
      "date": "2020-08-10T15:20:17Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-08-10T15:20:17Z"
    },
    "message": "[aarch64] GAS doesn't validate the architecture version for any tlbi registers.  Fixed with this patch.\n\n\t* gas/config/tc-aarch64.c (parse_sys_reg): Call to\n\taarch64_sys_ins_reg_supported_p instead of aarch64_sys_reg_supported_p.\n\t(parse_sys_ins_reg): Add aarch64_sys_reg_deprecated_p check.\n\t* include/opcode/aarch64.h (aarch64_sys_reg_deprecated_p): Functions\n\tparamaters changed.\n\t(aarch64_sys_reg_supported_p): Function removed.\n\t(aarch64_sys_ins_reg_supported_p): Functions paramaters changed.\n\t* opcodes/aarch64-opc.c (aarch64_print_operand):\n\t(aarch64_sys_reg_deprecated_p): Functions paramaters changed.\n\t(aarch64_sys_reg_supported_p): Function removed.\n\t(aarch64_sys_ins_reg_supported_p): Functions paramaters changed.\n\t(aarch64_sys_ins_reg_supported_p): Merged aarch64_sys_reg_supported_p\n\tinto this function.\n\t* gas/testsuite/gas/aarch64/illegal-sysreg-5.d: New test.\n\t* gas/testsuite/gas/aarch64/illegal-sysreg-5.l: New test.\n\t* gas/testsuite/gas/aarch64/sysreg-5.s: New test.",
    "tree": {
      "sha": "9dc058c4d67de093d16167ae1cc16930daa240bb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9dc058c4d67de093d16167ae1cc16930daa240bb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f7cb161ea6ffee167de3126023b2ce0fffd84076",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f7cb161ea6ffee167de3126023b2ce0fffd84076",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f7cb161ea6ffee167de3126023b2ce0fffd84076",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f7cb161ea6ffee167de3126023b2ce0fffd84076/comments",
  "author": {
    "login": "PrzemekWirkus",
    "id": 6360720,
    "node_id": "MDQ6VXNlcjYzNjA3MjA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6360720?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/PrzemekWirkus",
    "html_url": "https://github.com/PrzemekWirkus",
    "followers_url": "https://api.github.com/users/PrzemekWirkus/followers",
    "following_url": "https://api.github.com/users/PrzemekWirkus/following{/other_user}",
    "gists_url": "https://api.github.com/users/PrzemekWirkus/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/PrzemekWirkus/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/PrzemekWirkus/subscriptions",
    "organizations_url": "https://api.github.com/users/PrzemekWirkus/orgs",
    "repos_url": "https://api.github.com/users/PrzemekWirkus/repos",
    "events_url": "https://api.github.com/users/PrzemekWirkus/events{/privacy}",
    "received_events_url": "https://api.github.com/users/PrzemekWirkus/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f8e3fe0d2764e2976fec6a0ac48921893dc62bbf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f8e3fe0d2764e2976fec6a0ac48921893dc62bbf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f8e3fe0d2764e2976fec6a0ac48921893dc62bbf"
    }
  ],
  "stats": {
    "total": 264,
    "additions": 153,
    "deletions": 111
  },
  "files": [
    {
      "sha": "6588c37ec1894c3136b2d03c6052f0a90de8eef6",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f7cb161ea6ffee167de3126023b2ce0fffd84076/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f7cb161ea6ffee167de3126023b2ce0fffd84076/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=f7cb161ea6ffee167de3126023b2ce0fffd84076",
      "patch": "@@ -1,3 +1,23 @@\n+\t* include/opcode/aarch64.h (aarch64_sys_reg_deprecated_p): Functions\n+\tparamaters changed.\n+\t(aarch64_sys_reg_supported_p): Function removed.\n+\t(aarch64_sys_ins_reg_supported_p): Functions paramaters changed.\n+\t* opcodes/aarch64-opc.c (aarch64_print_operand):\n+\t(aarch64_sys_reg_deprecated_p): Functions paramaters changed.\n+\t(aarch64_sys_reg_supported_p): Function removed.\n+\t(aarch64_sys_ins_reg_supported_p): Functions paramaters changed.\n+\t(aarch64_sys_ins_reg_supported_p): Merged aarch64_sys_reg_supported_p\n+\tinto this function.\n+2020-08-10  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* config/tc-aarch64.c (parse_sys_reg): Call to\n+\taarch64_sys_ins_reg_supported_p instead of\n+\taarch64_sys_reg_supported_p.\n+\t(parse_sys_ins_reg): Add aarch64_sys_reg_deprecated_p check.\n+\t* testsuite/gas/aarch64/illegal-sysreg-5.d: New test.\n+\t* testsuite/gas/aarch64/illegal-sysreg-5.l: New test.\n+\t* testsuite/gas/aarch64/sysreg-5.s: New test.\n+\n 2020-08-10  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/gas/ppc/power8.d,"
    },
    {
      "sha": "a46a474af561e7772bb93dc47921371f194e72a4",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 12,
      "deletions": 4,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f7cb161ea6ffee167de3126023b2ce0fffd84076/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f7cb161ea6ffee167de3126023b2ce0fffd84076/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=f7cb161ea6ffee167de3126023b2ce0fffd84076",
      "patch": "@@ -4137,10 +4137,12 @@ parse_sys_reg (char **str, struct hash_control *sys_regs,\n       if (pstatefield_p && !aarch64_pstatefield_supported_p (cpu_variant, o))\n \tas_bad (_(\"selected processor does not support PSTATE field \"\n \t\t  \"name '%s'\"), buf);\n-      if (!pstatefield_p && !aarch64_sys_reg_supported_p (cpu_variant, o))\n+      if (!pstatefield_p\n+\t  && !aarch64_sys_ins_reg_supported_p (cpu_variant, o->value,\n+\t\t\t\t\t       o->flags, o->features))\n \tas_bad (_(\"selected processor does not support system register \"\n \t\t  \"name '%s'\"), buf);\n-      if (aarch64_sys_reg_deprecated_p (o))\n+      if (aarch64_sys_reg_deprecated_p (o->flags))\n \tas_warn (_(\"system register name '%s' is deprecated and may be \"\n \t\t   \"removed in a future release\"), buf);\n       value = o->value;\n@@ -4172,9 +4174,12 @@ parse_sys_ins_reg (char **str, struct hash_control *sys_ins_regs)\n   if (!o)\n     return NULL;\n \n-  if (!aarch64_sys_ins_reg_supported_p (cpu_variant, o))\n+  if (!aarch64_sys_ins_reg_supported_p (cpu_variant, o->value, o->flags, 0))\n     as_bad (_(\"selected processor does not support system register \"\n \t      \"name '%s'\"), buf);\n+  if (aarch64_sys_reg_deprecated_p (o->flags))\n+    as_warn (_(\"system register name '%s' is deprecated and may be \"\n+          \"removed in a future release\"), buf);\n \n   *str = q;\n   return o;\n@@ -4328,7 +4333,10 @@ reencode_movzn_to_movn (uint32_t opcode)\n static fixS *\n fix_new_aarch64 (fragS * frag,\n \t\t int where,\n-\t\t short int size, expressionS * exp, int pc_rel, int reloc)\n+\t\t short int size,\n+\t\t expressionS * exp,\n+\t\t int pc_rel,\n+\t\t int reloc)\n {\n   fixS *new_fix;\n "
    },
    {
      "sha": "d108d0f474feed34de58fe2793d6f66e674be5e5",
      "filename": "gas/testsuite/gas/aarch64/illegal-sysreg-5.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f7cb161ea6ffee167de3126023b2ce0fffd84076/gas/testsuite/gas/aarch64/illegal-sysreg-5.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f7cb161ea6ffee167de3126023b2ce0fffd84076/gas/testsuite/gas/aarch64/illegal-sysreg-5.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/illegal-sysreg-5.d?ref=f7cb161ea6ffee167de3126023b2ce0fffd84076",
      "patch": "@@ -0,0 +1,3 @@\n+#as: -march=armv8.3-a\n+#source: sysreg-5.s\n+#error_output: illegal-sysreg-5.l"
    },
    {
      "sha": "cd3eff85d55ca7684c5413957805f8a13e05abea",
      "filename": "gas/testsuite/gas/aarch64/illegal-sysreg-5.l",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f7cb161ea6ffee167de3126023b2ce0fffd84076/gas/testsuite/gas/aarch64/illegal-sysreg-5.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f7cb161ea6ffee167de3126023b2ce0fffd84076/gas/testsuite/gas/aarch64/illegal-sysreg-5.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/illegal-sysreg-5.l?ref=f7cb161ea6ffee167de3126023b2ce0fffd84076",
      "patch": "@@ -0,0 +1,2 @@\n+[^:]*: Assembler messages:\n+[^:]*:[0-9]+: Error: selected processor does not support system register name 'rvae1is'"
    },
    {
      "sha": "c695b1b17a61fa7efc41a04b8a154e451177f8f0",
      "filename": "gas/testsuite/gas/aarch64/sysreg-5.s",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f7cb161ea6ffee167de3126023b2ce0fffd84076/gas/testsuite/gas/aarch64/sysreg-5.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f7cb161ea6ffee167de3126023b2ce0fffd84076/gas/testsuite/gas/aarch64/sysreg-5.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/aarch64/sysreg-5.s?ref=f7cb161ea6ffee167de3126023b2ce0fffd84076",
      "patch": "@@ -0,0 +1 @@\n+tlbi rvae1is, x0"
    },
    {
      "sha": "27f14cc111ef4d87a15f445bcb70f7ae67b6d91d",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f7cb161ea6ffee167de3126023b2ce0fffd84076/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f7cb161ea6ffee167de3126023b2ce0fffd84076/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=f7cb161ea6ffee167de3126023b2ce0fffd84076",
      "patch": "@@ -1,3 +1,10 @@\n+2020-08-10  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* opcode/aarch64.h (aarch64_sys_reg_deprecated_p): Functions\n+\tparamaters changed.\n+\t(aarch64_sys_reg_supported_p): Function removed.\n+\t(aarch64_sys_ins_reg_supported_p): Functions paramaters changed.\n+\n 2020-07-28  Caroline Tice  <cmtice@google.com>\n \n         * dwarf2.h (enum dwarf_sect_v5): A new enum section for\tthe"
    },
    {
      "sha": "4b71f93b9461bd92692ff9296afa37313b3fd38d",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f7cb161ea6ffee167de3126023b2ce0fffd84076/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f7cb161ea6ffee167de3126023b2ce0fffd84076/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=f7cb161ea6ffee167de3126023b2ce0fffd84076",
      "patch": "@@ -956,9 +956,7 @@ typedef struct\n \n extern const aarch64_sys_reg aarch64_sys_regs [];\n extern const aarch64_sys_reg aarch64_pstatefields [];\n-extern bfd_boolean aarch64_sys_reg_deprecated_p (const aarch64_sys_reg *);\n-extern bfd_boolean aarch64_sys_reg_supported_p (const aarch64_feature_set,\n-\t\t\t\t\t\tconst aarch64_sys_reg *);\n+extern bfd_boolean aarch64_sys_reg_deprecated_p (const uint32_t);\n extern bfd_boolean aarch64_pstatefield_supported_p (const aarch64_feature_set,\n \t\t\t\t\t\t    const aarch64_sys_reg *);\n \n@@ -971,8 +969,8 @@ typedef struct\n \n extern bfd_boolean aarch64_sys_ins_reg_has_xt (const aarch64_sys_ins_reg *);\n extern bfd_boolean\n-aarch64_sys_ins_reg_supported_p (const aarch64_feature_set,\n-\t\t\t\t const aarch64_sys_ins_reg *);\n+aarch64_sys_ins_reg_supported_p (const aarch64_feature_set, aarch64_insn,\n+                                 uint32_t, aarch64_feature_set);\n \n extern const aarch64_sys_ins_reg aarch64_sys_regs_ic [];\n extern const aarch64_sys_ins_reg aarch64_sys_regs_dc [];"
    },
    {
      "sha": "95f8deb1b491c3ae44600aa0caaf3096c00dba7b",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f7cb161ea6ffee167de3126023b2ce0fffd84076/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f7cb161ea6ffee167de3126023b2ce0fffd84076/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=f7cb161ea6ffee167de3126023b2ce0fffd84076",
      "patch": "@@ -1,3 +1,12 @@\n+2020-08-10  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n+\n+\t* aarch64-opc.c (aarch64_print_operand):\n+\t(aarch64_sys_reg_deprecated_p): Functions paramaters changed.\n+\t(aarch64_sys_reg_supported_p): Function removed.\n+\t(aarch64_sys_ins_reg_supported_p): Functions paramaters changed.\n+\t(aarch64_sys_ins_reg_supported_p): Merged aarch64_sys_reg_supported_p\n+\tinto this function.\n+\n 2020-08-10  Alan Modra  <amodra@gmail.com>\n \n \t* ppc-opc.c (powerpc_opcodes): Add many mtspr and mfspr extended"
    },
    {
      "sha": "d2b325f15b736cb55889c44897411437dc71de66",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 96,
      "deletions": 102,
      "changes": 198,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f7cb161ea6ffee167de3126023b2ce0fffd84076/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f7cb161ea6ffee167de3126023b2ce0fffd84076/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=f7cb161ea6ffee167de3126023b2ce0fffd84076",
      "patch": "@@ -3695,7 +3695,7 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n \t  /* Try and find an exact match, But if that fails, return the first\n \t     partial match that was found.  */\n \t  if (aarch64_sys_regs[i].value == opnd->sysreg.value\n-\t      && ! aarch64_sys_reg_deprecated_p (&aarch64_sys_regs[i])\n+\t      && ! aarch64_sys_reg_deprecated_p (aarch64_sys_regs[i].flags)\n \t      && (name == NULL || exact_match))\n \t    {\n \t      name = aarch64_sys_regs[i].name;\n@@ -4245,72 +4245,9 @@ const aarch64_sys_reg aarch64_sys_regs [] =\n };\n \n bfd_boolean\n-aarch64_sys_reg_deprecated_p (const aarch64_sys_reg *reg)\n+aarch64_sys_reg_deprecated_p (const uint32_t reg_flags)\n {\n-  return (reg->flags & F_DEPRECATED) != 0;\n-}\n-\n-bfd_boolean\n-aarch64_sys_reg_supported_p (const aarch64_feature_set features,\n-\t\t\t     const aarch64_sys_reg *reg)\n-{\n-  if (!(reg->flags & F_ARCHEXT))\n-    return TRUE;\n-\n-  if (!AARCH64_CPU_HAS_ALL_FEATURES (features, reg->features))\n-    return FALSE;\n-\n-  /* ARMv8.4 TLB instructions.  */\n-  if ((reg->value == CPENS (0, C8, C1, 0)\n-       || reg->value == CPENS (0, C8, C1, 1)\n-       || reg->value == CPENS (0, C8, C1, 2)\n-       || reg->value == CPENS (0, C8, C1, 3)\n-       || reg->value == CPENS (0, C8, C1, 5)\n-       || reg->value == CPENS (0, C8, C1, 7)\n-       || reg->value == CPENS (4, C8, C4, 0)\n-       || reg->value == CPENS (4, C8, C4, 4)\n-       || reg->value == CPENS (4, C8, C1, 1)\n-       || reg->value == CPENS (4, C8, C1, 5)\n-       || reg->value == CPENS (4, C8, C1, 6)\n-       || reg->value == CPENS (6, C8, C1, 1)\n-       || reg->value == CPENS (6, C8, C1, 5)\n-       || reg->value == CPENS (4, C8, C1, 0)\n-       || reg->value == CPENS (4, C8, C1, 4)\n-       || reg->value == CPENS (6, C8, C1, 0)\n-       || reg->value == CPENS (0, C8, C6, 1)\n-       || reg->value == CPENS (0, C8, C6, 3)\n-       || reg->value == CPENS (0, C8, C6, 5)\n-       || reg->value == CPENS (0, C8, C6, 7)\n-       || reg->value == CPENS (0, C8, C2, 1)\n-       || reg->value == CPENS (0, C8, C2, 3)\n-       || reg->value == CPENS (0, C8, C2, 5)\n-       || reg->value == CPENS (0, C8, C2, 7)\n-       || reg->value == CPENS (0, C8, C5, 1)\n-       || reg->value == CPENS (0, C8, C5, 3)\n-       || reg->value == CPENS (0, C8, C5, 5)\n-       || reg->value == CPENS (0, C8, C5, 7)\n-       || reg->value == CPENS (4, C8, C0, 2)\n-       || reg->value == CPENS (4, C8, C0, 6)\n-       || reg->value == CPENS (4, C8, C4, 2)\n-       || reg->value == CPENS (4, C8, C4, 6)\n-       || reg->value == CPENS (4, C8, C4, 3)\n-       || reg->value == CPENS (4, C8, C4, 7)\n-       || reg->value == CPENS (4, C8, C6, 1)\n-       || reg->value == CPENS (4, C8, C6, 5)\n-       || reg->value == CPENS (4, C8, C2, 1)\n-       || reg->value == CPENS (4, C8, C2, 5)\n-       || reg->value == CPENS (4, C8, C5, 1)\n-       || reg->value == CPENS (4, C8, C5, 5)\n-       || reg->value == CPENS (6, C8, C6, 1)\n-       || reg->value == CPENS (6, C8, C6, 5)\n-       || reg->value == CPENS (6, C8, C2, 1)\n-       || reg->value == CPENS (6, C8, C2, 5)\n-       || reg->value == CPENS (6, C8, C5, 1)\n-       || reg->value == CPENS (6, C8, C5, 5))\n-      && !AARCH64_CPU_HAS_FEATURE (features, AARCH64_FEATURE_V8_4))\n-    return FALSE;\n-\n-  return TRUE;\n+  return (reg_flags & F_DEPRECATED) != 0;\n }\n \n /* The CPENC below is fairly misleading, the fields\n@@ -4508,55 +4445,112 @@ aarch64_sys_ins_reg_has_xt (const aarch64_sys_ins_reg *sys_ins_reg)\n \n extern bfd_boolean\n aarch64_sys_ins_reg_supported_p (const aarch64_feature_set features,\n-\t\t\t\t const aarch64_sys_ins_reg *reg)\n+                 aarch64_insn reg_value,\n+                 uint32_t reg_flags,\n+                 aarch64_feature_set reg_features)\n {\n-  if (!(reg->flags & F_ARCHEXT))\n+\n+  if (!(reg_flags & F_ARCHEXT))\n+    return TRUE;\n+\n+  if (reg_features\n+      && AARCH64_CPU_HAS_ALL_FEATURES (features, reg_features))\n+    return TRUE;\n+\n+  /* ARMv8.4 TLB instructions.  */\n+  if ((reg_value == CPENS (0, C8, C1, 0)\n+       || reg_value == CPENS (0, C8, C1, 1)\n+       || reg_value == CPENS (0, C8, C1, 2)\n+       || reg_value == CPENS (0, C8, C1, 3)\n+       || reg_value == CPENS (0, C8, C1, 5)\n+       || reg_value == CPENS (0, C8, C1, 7)\n+       || reg_value == CPENS (4, C8, C4, 0)\n+       || reg_value == CPENS (4, C8, C4, 4)\n+       || reg_value == CPENS (4, C8, C1, 1)\n+       || reg_value == CPENS (4, C8, C1, 5)\n+       || reg_value == CPENS (4, C8, C1, 6)\n+       || reg_value == CPENS (6, C8, C1, 1)\n+       || reg_value == CPENS (6, C8, C1, 5)\n+       || reg_value == CPENS (4, C8, C1, 0)\n+       || reg_value == CPENS (4, C8, C1, 4)\n+       || reg_value == CPENS (6, C8, C1, 0)\n+       || reg_value == CPENS (0, C8, C6, 1)\n+       || reg_value == CPENS (0, C8, C6, 3)\n+       || reg_value == CPENS (0, C8, C6, 5)\n+       || reg_value == CPENS (0, C8, C6, 7)\n+       || reg_value == CPENS (0, C8, C2, 1)\n+       || reg_value == CPENS (0, C8, C2, 3)\n+       || reg_value == CPENS (0, C8, C2, 5)\n+       || reg_value == CPENS (0, C8, C2, 7)\n+       || reg_value == CPENS (0, C8, C5, 1)\n+       || reg_value == CPENS (0, C8, C5, 3)\n+       || reg_value == CPENS (0, C8, C5, 5)\n+       || reg_value == CPENS (0, C8, C5, 7)\n+       || reg_value == CPENS (4, C8, C0, 2)\n+       || reg_value == CPENS (4, C8, C0, 6)\n+       || reg_value == CPENS (4, C8, C4, 2)\n+       || reg_value == CPENS (4, C8, C4, 6)\n+       || reg_value == CPENS (4, C8, C4, 3)\n+       || reg_value == CPENS (4, C8, C4, 7)\n+       || reg_value == CPENS (4, C8, C6, 1)\n+       || reg_value == CPENS (4, C8, C6, 5)\n+       || reg_value == CPENS (4, C8, C2, 1)\n+       || reg_value == CPENS (4, C8, C2, 5)\n+       || reg_value == CPENS (4, C8, C5, 1)\n+       || reg_value == CPENS (4, C8, C5, 5)\n+       || reg_value == CPENS (6, C8, C6, 1)\n+       || reg_value == CPENS (6, C8, C6, 5)\n+       || reg_value == CPENS (6, C8, C2, 1)\n+       || reg_value == CPENS (6, C8, C2, 5)\n+       || reg_value == CPENS (6, C8, C5, 1)\n+       || reg_value == CPENS (6, C8, C5, 5))\n+      && AARCH64_CPU_HAS_FEATURE (features, AARCH64_FEATURE_V8_4))\n     return TRUE;\n \n   /* DC CVAP.  Values are from aarch64_sys_regs_dc.  */\n-  if (reg->value == CPENS (3, C7, C12, 1)\n-      && !AARCH64_CPU_HAS_FEATURE (features, AARCH64_FEATURE_V8_2))\n-    return FALSE;\n+  if (reg_value == CPENS (3, C7, C12, 1)\n+      && AARCH64_CPU_HAS_FEATURE (features, AARCH64_FEATURE_V8_2))\n+    return TRUE;\n \n   /* DC CVADP.  Values are from aarch64_sys_regs_dc.  */\n-  if (reg->value == CPENS (3, C7, C13, 1)\n-      && !AARCH64_CPU_HAS_FEATURE (features, AARCH64_FEATURE_CVADP))\n-    return FALSE;\n+  if (reg_value == CPENS (3, C7, C13, 1)\n+      && AARCH64_CPU_HAS_FEATURE (features, AARCH64_FEATURE_CVADP))\n+    return TRUE;\n \n   /* DC <dc_op> for ARMv8.5-A Memory Tagging Extension.  */\n-  if ((reg->value == CPENS (0, C7, C6, 3)\n-       || reg->value == CPENS (0, C7, C6, 4)\n-       || reg->value == CPENS (0, C7, C10, 4)\n-       || reg->value == CPENS (0, C7, C14, 4)\n-       || reg->value == CPENS (3, C7, C10, 3)\n-       || reg->value == CPENS (3, C7, C12, 3)\n-       || reg->value == CPENS (3, C7, C13, 3)\n-       || reg->value == CPENS (3, C7, C14, 3)\n-       || reg->value == CPENS (3, C7, C4, 3)\n-       || reg->value == CPENS (0, C7, C6, 5)\n-       || reg->value == CPENS (0, C7, C6, 6)\n-       || reg->value == CPENS (0, C7, C10, 6)\n-       || reg->value == CPENS (0, C7, C14, 6)\n-       || reg->value == CPENS (3, C7, C10, 5)\n-       || reg->value == CPENS (3, C7, C12, 5)\n-       || reg->value == CPENS (3, C7, C13, 5)\n-       || reg->value == CPENS (3, C7, C14, 5)\n-       || reg->value == CPENS (3, C7, C4, 4))\n-      && !AARCH64_CPU_HAS_FEATURE (features, AARCH64_FEATURE_MEMTAG))\n-    return FALSE;\n+  if ((reg_value == CPENS (0, C7, C6, 3)\n+       || reg_value == CPENS (0, C7, C6, 4)\n+       || reg_value == CPENS (0, C7, C10, 4)\n+       || reg_value == CPENS (0, C7, C14, 4)\n+       || reg_value == CPENS (3, C7, C10, 3)\n+       || reg_value == CPENS (3, C7, C12, 3)\n+       || reg_value == CPENS (3, C7, C13, 3)\n+       || reg_value == CPENS (3, C7, C14, 3)\n+       || reg_value == CPENS (3, C7, C4, 3)\n+       || reg_value == CPENS (0, C7, C6, 5)\n+       || reg_value == CPENS (0, C7, C6, 6)\n+       || reg_value == CPENS (0, C7, C10, 6)\n+       || reg_value == CPENS (0, C7, C14, 6)\n+       || reg_value == CPENS (3, C7, C10, 5)\n+       || reg_value == CPENS (3, C7, C12, 5)\n+       || reg_value == CPENS (3, C7, C13, 5)\n+       || reg_value == CPENS (3, C7, C14, 5)\n+       || reg_value == CPENS (3, C7, C4, 4))\n+      && AARCH64_CPU_HAS_FEATURE (features, AARCH64_FEATURE_MEMTAG))\n+    return TRUE;\n \n   /* AT S1E1RP, AT S1E1WP.  Values are from aarch64_sys_regs_at.  */\n-  if ((reg->value == CPENS (0, C7, C9, 0)\n-       || reg->value == CPENS (0, C7, C9, 1))\n-      && !AARCH64_CPU_HAS_FEATURE (features, AARCH64_FEATURE_V8_2))\n-    return FALSE;\n+  if ((reg_value == CPENS (0, C7, C9, 0)\n+       || reg_value == CPENS (0, C7, C9, 1))\n+      && AARCH64_CPU_HAS_FEATURE (features, AARCH64_FEATURE_V8_2))\n+    return TRUE;\n \n   /* CFP/DVP/CPP RCTX : Value are from aarch64_sys_regs_sr. */\n-  if (reg->value == CPENS (3, C7, C3, 0)\n-      && !AARCH64_CPU_HAS_FEATURE (features, AARCH64_FEATURE_PREDRES))\n-    return FALSE;\n+  if (reg_value == CPENS (3, C7, C3, 0)\n+      && AARCH64_CPU_HAS_FEATURE (features, AARCH64_FEATURE_PREDRES))\n+    return TRUE;\n \n-  return TRUE;\n+  return FALSE;\n }\n \n #undef C0"
    }
  ]
}