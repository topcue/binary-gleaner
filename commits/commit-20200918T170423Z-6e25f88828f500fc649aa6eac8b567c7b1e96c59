{
  "sha": "6e25f88828f500fc649aa6eac8b567c7b1e96c59",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmUyNWY4ODgyOGY1MDBmYzY0OWFhNmVhYzhiNTY3YzdiMWU5NmM1OQ==",
  "commit": {
    "author": {
      "name": "David Faust",
      "email": "david.faust@oracle.com",
      "date": "2020-09-18T16:56:43Z"
    },
    "committer": {
      "name": "David Faust",
      "email": "david.faust@oracle.com",
      "date": "2020-09-18T17:04:23Z"
    },
    "message": "bpf: xBPF SDIV, SMOD instructions\n\nAdd gas and opcodes support for two xBPF-exclusive ALU operations:\nSDIV (signed division) and SMOD (signed modulo), and add tests for\nthem in gas.\n\ncpu/\n\t* bpf.cpu (insn-op-code-alu): Add SDIV and SMOD.\n\t(define-alu-insn-bin, daib): Take ISAs as an argument.\n\t(define-alu-instructions): Update calls to daib pmacro with\n\tISAs; add sdiv and smod.\n\ngas/\n\t* testsuite/gas/bpf/alu-xbpf.d: New file.\n\t* testsuite/gas/bpf/alu-xbpf.s: Likewise.\n\t* testsuite/gas/bpf/alu32-xbpf.d: Likewise.\n\t* testsuite/gas/bpf/alu32-xbpf.d: Likewise.\n\t* testuiste/gas/bpf/bpf.exp: Run new tests.\n\nopcodes/\n\t* bpf-desc.c: Regenerate.\n\t* bpf-desc.h: Likewise.\n\t* bpf-opc.c: Likewise.\n\t* bpf-opc.h: Likewise.",
    "tree": {
      "sha": "f2ee690ca5ba7bb36cb1c887a33daf76677311d7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f2ee690ca5ba7bb36cb1c887a33daf76677311d7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6e25f88828f500fc649aa6eac8b567c7b1e96c59",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6e25f88828f500fc649aa6eac8b567c7b1e96c59",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6e25f88828f500fc649aa6eac8b567c7b1e96c59",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6e25f88828f500fc649aa6eac8b567c7b1e96c59/comments",
  "author": {
    "login": "dafaust",
    "id": 4460334,
    "node_id": "MDQ6VXNlcjQ0NjAzMzQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dafaust",
    "html_url": "https://github.com/dafaust",
    "followers_url": "https://api.github.com/users/dafaust/followers",
    "following_url": "https://api.github.com/users/dafaust/following{/other_user}",
    "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions",
    "organizations_url": "https://api.github.com/users/dafaust/orgs",
    "repos_url": "https://api.github.com/users/dafaust/repos",
    "events_url": "https://api.github.com/users/dafaust/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dafaust/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "dafaust",
    "id": 4460334,
    "node_id": "MDQ6VXNlcjQ0NjAzMzQ=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/dafaust",
    "html_url": "https://github.com/dafaust",
    "followers_url": "https://api.github.com/users/dafaust/followers",
    "following_url": "https://api.github.com/users/dafaust/following{/other_user}",
    "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions",
    "organizations_url": "https://api.github.com/users/dafaust/orgs",
    "repos_url": "https://api.github.com/users/dafaust/repos",
    "events_url": "https://api.github.com/users/dafaust/events{/privacy}",
    "received_events_url": "https://api.github.com/users/dafaust/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e163628395d40485c3b379fa39bdc211ee19d40b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e163628395d40485c3b379fa39bdc211ee19d40b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e163628395d40485c3b379fa39bdc211ee19d40b"
    }
  ],
  "stats": {
    "total": 312,
    "additions": 289,
    "deletions": 23
  },
  "files": [
    {
      "sha": "4d68e00fc10ce82315127987ad74151baf4f7147",
      "filename": "cpu/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e25f88828f500fc649aa6eac8b567c7b1e96c59/cpu/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e25f88828f500fc649aa6eac8b567c7b1e96c59/cpu/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/ChangeLog?ref=6e25f88828f500fc649aa6eac8b567c7b1e96c59",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-18  David Faust  <david.faust@oracle.com>\n+\n+\t* bpf.cpu (insn-op-code-alu): Add SDIV and SMOD.\n+\t(define-alu-insn-bin, daib): Take ISAs as an argument.\n+\t(define-alu-instructions): Update calls to daib pmacro with\n+\tISAs; add sdiv and smod.\n+\n 2020-09-08  David Faust  <david.faust@oracle.com>\n \n \t* bpf.cpu (define-alu-instructions): Correct semantic operators"
    },
    {
      "sha": "13dde7094c8b2557719ab8976e424553cf7ea64e",
      "filename": "cpu/bpf.cpu",
      "status": "modified",
      "additions": 21,
      "deletions": 17,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e25f88828f500fc649aa6eac8b567c7b1e96c59/cpu/bpf.cpu",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e25f88828f500fc649aa6eac8b567c7b1e96c59/cpu/bpf.cpu",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/bpf.cpu?ref=6e25f88828f500fc649aa6eac8b567c7b1e96c59",
      "patch": "@@ -249,6 +249,8 @@\n    (ADD #x0) (SUB #x1) (MUL #x2) (DIV #x3) (OR #x4) (AND #x5)\n    (LSH #x6) (RSH #x7) (NEG #x8) (MOD #x9) (XOR #xa) (MOV #xb)\n    (ARSH #xc) (END #xd)\n+   ;; xBPF-only: signed div, signed mod\n+   (SDIV #xe) (SMOD #xf)\n    ;; Codes for OP_CLASS_JMP\n    (JA #x0) (JEQ #x1) (JGT #x2) (JGE #x3) (JSET #x4)\n    (JNE #x5) (JSGT #x6) (JSGE #x7) (CALL #x8) (EXIT #x9)\n@@ -420,12 +422,12 @@\n        ()))\n \n (define-pmacro (define-alu-insn-bin x-basename x-suffix x-op-class x-op-code\n-                 x-endian x-mode x-semop)\n+                 x-endian x-mode x-semop x-isas)\n   (begin\n     ;; dst = dst OP immediate\n     (dni (.sym x-basename x-suffix \"i\" x-endian)\n          (.str x-basename x-suffix \" immediate\")\n-         (endian-isas x-endian)\n+         (.splice (.unsplice x-isas))\n          (.str x-basename x-suffix \" $dst\" x-endian \",$imm32\")\n          (+ imm32 (f-offset16 0) ((.sym f-src x-endian) 0) (.sym dst x-endian)\n             x-op-class OP_SRC_K x-op-code)\n@@ -434,7 +436,7 @@\n     ;; dst = dst OP src\n     (dni (.sym x-basename x-suffix \"r\" x-endian)\n          (.str x-basename x-suffix \" register\")\n-         (endian-isas x-endian)\n+         (.splice (.unsplice x-isas))\n          (.str x-basename x-suffix \" $dst\" x-endian \",$src\" x-endian)\n          (+ (f-imm32 0) (f-offset16 0) (.sym src x-endian) (.sym dst x-endian)\n             x-op-class OP_SRC_X x-op-code)\n@@ -471,10 +473,10 @@\n \n ;; Binary ALU instructions (all the others)\n ;; For ALU32: DST = (u32) DST OP (u32) SRC is correct semantics\n-(define-pmacro (daib x-basename x-op-code x-endian x-semop)\n+(define-pmacro (daib x-basename x-op-code x-endian x-semop x-isas)\n   (begin\n-    (define-alu-insn-bin x-basename \"\" OP_CLASS_ALU64 x-op-code x-endian DI x-semop)\n-    (define-alu-insn-bin x-basename \"32\" OP_CLASS_ALU x-op-code x-endian USI x-semop)))\n+    (define-alu-insn-bin x-basename \"\" OP_CLASS_ALU64 x-op-code x-endian DI x-semop x-isas)\n+    (define-alu-insn-bin x-basename \"32\" OP_CLASS_ALU x-op-code x-endian USI x-semop x-isas)))\n \n ;; Move ALU instructions (mov)\n (define-pmacro (daim x-basename x-op-code x-endian)\n@@ -484,17 +486,19 @@\n \n (define-pmacro (define-alu-instructions x-endian)\n   (begin\n-    (daib add OP_CODE_ADD x-endian add)\n-    (daib sub OP_CODE_SUB x-endian sub)\n-    (daib mul OP_CODE_MUL x-endian mul)\n-    (daib div OP_CODE_DIV x-endian udiv)\n-    (daib or  OP_CODE_OR x-endian or)\n-    (daib and OP_CODE_AND x-endian and)\n-    (daib lsh OP_CODE_LSH x-endian sll)\n-    (daib rsh OP_CODE_RSH x-endian srl)\n-    (daib mod OP_CODE_MOD x-endian umod)\n-    (daib xor OP_CODE_XOR x-endian xor)\n-    (daib arsh OP_CODE_ARSH x-endian sra)\n+    (daib add OP_CODE_ADD x-endian add (endian-isas x-endian))\n+    (daib sub OP_CODE_SUB x-endian sub (endian-isas x-endian))\n+    (daib mul OP_CODE_MUL x-endian mul (endian-isas x-endian))\n+    (daib div OP_CODE_DIV x-endian udiv (endian-isas x-endian))\n+    (daib or  OP_CODE_OR x-endian or (endian-isas x-endian))\n+    (daib and OP_CODE_AND x-endian and (endian-isas x-endian))\n+    (daib lsh OP_CODE_LSH x-endian sll (endian-isas x-endian))\n+    (daib rsh OP_CODE_RSH x-endian srl (endian-isas x-endian))\n+    (daib mod OP_CODE_MOD x-endian umod (endian-isas x-endian))\n+    (daib xor OP_CODE_XOR x-endian xor (endian-isas x-endian))\n+    (daib arsh OP_CODE_ARSH x-endian sra (endian-isas x-endian))\n+    (daib sdiv OP_CODE_SDIV x-endian div ((ISA (.sym xbpf x-endian))))\n+    (daib smod OP_CODE_SMOD x-endian mod ((ISA (.sym xbpf x-endian))))\n     (daiu neg OP_CODE_NEG x-endian neg)\n     (daim mov OP_CODE_MOV x-endian)))\n "
    },
    {
      "sha": "cad6b5c57c1cb7387b1cab6289abf69534a9fa05",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e25f88828f500fc649aa6eac8b567c7b1e96c59/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e25f88828f500fc649aa6eac8b567c7b1e96c59/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=6e25f88828f500fc649aa6eac8b567c7b1e96c59",
      "patch": "@@ -1,3 +1,11 @@\n+2020-09-018  David Faust  <david.faust@oracle.com>\n+\n+\t* testsuite/gas/bpf/alu-xbpf.d: New file.\n+\t* testsuite/gas/bpf/alu-xbpf.s: Likewise.\n+\t* testsuite/gas/bpf/alu32-xbpf.d: Likewise.\n+\t* testsuite/gas/bpf/alu32-xbpf.d: Likewise.\n+\t* testuiste/gas/bpf/bpf.exp: Run new tests.\n+\n 2020-09-18  Tucker  <tuckkern+sourceware@gmail.com>\n \n \tPR 26556"
    },
    {
      "sha": "7f97d49ddc40b2c2709412d50bcf77d1c76b445b",
      "filename": "gas/testsuite/gas/bpf/alu-xbpf.d",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e25f88828f500fc649aa6eac8b567c7b1e96c59/gas/testsuite/gas/bpf/alu-xbpf.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e25f88828f500fc649aa6eac8b567c7b1e96c59/gas/testsuite/gas/bpf/alu-xbpf.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/bpf/alu-xbpf.d?ref=6e25f88828f500fc649aa6eac8b567c7b1e96c59",
      "patch": "@@ -0,0 +1,17 @@\n+#as: --EL -mxbpf\n+#objdump: -dr -mxbpf\n+#name: xBPF ALU64 insns\n+\n+.*: +file format .*bpf.*\n+\n+Disassembly of section \\.text:\n+\n+0+ <\\.text>:\n+   0:\te7 02 00 00 02 00 00 00 \tsdiv %r2,2\n+   8:\te7 03 00 00 fd ff ff ff \tsdiv %r3,-3\n+  10:\te7 04 00 00 ef be ad 7e \tsdiv %r4,0x7eadbeef\n+  18:\tef 25 00 00 00 00 00 00 \tsdiv %r5,%r2\n+  20:\tf7 02 00 00 03 00 00 00 \tsmod %r2,3\n+  28:\tf7 03 00 00 fc ff ff ff \tsmod %r3,-4\n+  30:\tf7 04 00 00 ef be ad 7e \tsmod %r4,0x7eadbeef\n+  38:\tff 25 00 00 00 00 00 00 \tsmod %r5,%r2"
    },
    {
      "sha": "ebcebd790081c42f10494ca7941e20e889d9661b",
      "filename": "gas/testsuite/gas/bpf/alu-xbpf.s",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e25f88828f500fc649aa6eac8b567c7b1e96c59/gas/testsuite/gas/bpf/alu-xbpf.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e25f88828f500fc649aa6eac8b567c7b1e96c59/gas/testsuite/gas/bpf/alu-xbpf.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/bpf/alu-xbpf.s?ref=6e25f88828f500fc649aa6eac8b567c7b1e96c59",
      "patch": "@@ -0,0 +1,11 @@\n+    # Tests for xBPF-specific alu instructions\n+    .text\n+    sdiv %r2, 2\n+    sdiv %r3, -3\n+    sdiv %r4, 0x7eadbeef\n+    sdiv %r5, %r2\n+\n+    smod %r2, 3\n+    smod %r3, -4\n+    smod %r4, 0x7eadbeef\n+    smod %r5, %r2"
    },
    {
      "sha": "03411d62d20ec0361ae727229264fb4dba556ddb",
      "filename": "gas/testsuite/gas/bpf/alu32-xbpf.d",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e25f88828f500fc649aa6eac8b567c7b1e96c59/gas/testsuite/gas/bpf/alu32-xbpf.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e25f88828f500fc649aa6eac8b567c7b1e96c59/gas/testsuite/gas/bpf/alu32-xbpf.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/bpf/alu32-xbpf.d?ref=6e25f88828f500fc649aa6eac8b567c7b1e96c59",
      "patch": "@@ -0,0 +1,17 @@\n+#as: --EL -mxbpf\n+#objdump: -dr -mxbpf\n+#name: xBPF ALU32 insns\n+\n+.*: +file format .*bpf.*\n+\n+Disassembly of section \\.text:\n+\n+0+ <\\.text>:\n+   0:\te4 02 00 00 02 00 00 00 \tsdiv32 %r2,2\n+   8:\te4 03 00 00 fd ff ff ff \tsdiv32 %r3,-3\n+  10:\te4 04 00 00 ef be ad 7e \tsdiv32 %r4,0x7eadbeef\n+  18:\tec 25 00 00 00 00 00 00 \tsdiv32 %r5,%r2\n+  20:\tf4 02 00 00 03 00 00 00 \tsmod32 %r2,3\n+  28:\tf4 03 00 00 fc ff ff ff \tsmod32 %r3,-4\n+  30:\tf4 04 00 00 ef be ad 7e \tsmod32 %r4,0x7eadbeef\n+  38:\tfc 25 00 00 00 00 00 00 \tsmod32 %r5,%r2"
    },
    {
      "sha": "9ce5a26bb78a29593e8a790d228571d313c99791",
      "filename": "gas/testsuite/gas/bpf/alu32-xbpf.s",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e25f88828f500fc649aa6eac8b567c7b1e96c59/gas/testsuite/gas/bpf/alu32-xbpf.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e25f88828f500fc649aa6eac8b567c7b1e96c59/gas/testsuite/gas/bpf/alu32-xbpf.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/bpf/alu32-xbpf.s?ref=6e25f88828f500fc649aa6eac8b567c7b1e96c59",
      "patch": "@@ -0,0 +1,11 @@\n+    # Tests for xBPF-specific alu instructions\n+    .text\n+    sdiv32 %r2, 2\n+    sdiv32 %r3, -3\n+    sdiv32 %r4, 0x7eadbeef\n+    sdiv32 %r5, %r2\n+\n+    smod32 %r2, 3\n+    smod32 %r3, -4\n+    smod32 %r4, 0x7eadbeef\n+    smod32 %r5, %r2"
    },
    {
      "sha": "f7c04f402661721d03381d4ef1516934a93b761b",
      "filename": "gas/testsuite/gas/bpf/bpf.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e25f88828f500fc649aa6eac8b567c7b1e96c59/gas/testsuite/gas/bpf/bpf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e25f88828f500fc649aa6eac8b567c7b1e96c59/gas/testsuite/gas/bpf/bpf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/bpf/bpf.exp?ref=6e25f88828f500fc649aa6eac8b567c7b1e96c59",
      "patch": "@@ -41,4 +41,7 @@ if {[istarget bpf*-*-*]} {\n \n     run_dump_test indcall-1\n     run_list_test indcall-bad-1\n+\n+    run_dump_test alu-xbpf\n+    run_dump_test alu32-xbpf\n }"
    },
    {
      "sha": "0f3c270810c20ece9f2d0b6a265ff421abab2918",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e25f88828f500fc649aa6eac8b567c7b1e96c59/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e25f88828f500fc649aa6eac8b567c7b1e96c59/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=6e25f88828f500fc649aa6eac8b567c7b1e96c59",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-18  David Faust  <david.faust@oracle.com>\n+\n+\t* bpf-desc.c: Regenerate.\n+\t* bpf-desc.h: Likewise.\n+\t* bpf-opc.c: Likewise.\n+\t* bpf-opc.h: Likewise.\n+\n 2020-09-16  Andrew Burgess <andrew.burgess@embecosm.com>\n \n \t* csky-dis.c (csky_get_disassembler): Don't return NULL when there"
    },
    {
      "sha": "adcff34e7f1d4112916a925c794d0fd192699898",
      "filename": "opcodes/bpf-desc.c",
      "status": "modified",
      "additions": 80,
      "deletions": 0,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e25f88828f500fc649aa6eac8b567c7b1e96c59/opcodes/bpf-desc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e25f88828f500fc649aa6eac8b567c7b1e96c59/opcodes/bpf-desc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/bpf-desc.c?ref=6e25f88828f500fc649aa6eac8b567c7b1e96c59",
      "patch": "@@ -520,6 +520,46 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_ARSH32RLE, \"arsh32rle\", \"arsh32\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\xa0\" } } } }\n   },\n+/* sdiv $dstle,$imm32 */\n+  {\n+    BPF_INSN_SDIVILE, \"sdivile\", \"sdiv\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x20\" } } } }\n+  },\n+/* sdiv $dstle,$srcle */\n+  {\n+    BPF_INSN_SDIVRLE, \"sdivrle\", \"sdiv\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x20\" } } } }\n+  },\n+/* sdiv32 $dstle,$imm32 */\n+  {\n+    BPF_INSN_SDIV32ILE, \"sdiv32ile\", \"sdiv32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x20\" } } } }\n+  },\n+/* sdiv32 $dstle,$srcle */\n+  {\n+    BPF_INSN_SDIV32RLE, \"sdiv32rle\", \"sdiv32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x20\" } } } }\n+  },\n+/* smod $dstle,$imm32 */\n+  {\n+    BPF_INSN_SMODILE, \"smodile\", \"smod\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x20\" } } } }\n+  },\n+/* smod $dstle,$srcle */\n+  {\n+    BPF_INSN_SMODRLE, \"smodrle\", \"smod\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x20\" } } } }\n+  },\n+/* smod32 $dstle,$imm32 */\n+  {\n+    BPF_INSN_SMOD32ILE, \"smod32ile\", \"smod32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x20\" } } } }\n+  },\n+/* smod32 $dstle,$srcle */\n+  {\n+    BPF_INSN_SMOD32RLE, \"smod32rle\", \"smod32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x20\" } } } }\n+  },\n /* neg $dstle */\n   {\n     BPF_INSN_NEGLE, \"negle\", \"neg\", 64,\n@@ -770,6 +810,46 @@ static const CGEN_IBASE bpf_cgen_insn_table[MAX_INSNS] =\n     BPF_INSN_ARSH32RBE, \"arsh32rbe\", \"arsh32\", 64,\n     { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x50\" } } } }\n   },\n+/* sdiv $dstbe,$imm32 */\n+  {\n+    BPF_INSN_SDIVIBE, \"sdivibe\", \"sdiv\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x10\" } } } }\n+  },\n+/* sdiv $dstbe,$srcbe */\n+  {\n+    BPF_INSN_SDIVRBE, \"sdivrbe\", \"sdiv\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x10\" } } } }\n+  },\n+/* sdiv32 $dstbe,$imm32 */\n+  {\n+    BPF_INSN_SDIV32IBE, \"sdiv32ibe\", \"sdiv32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x10\" } } } }\n+  },\n+/* sdiv32 $dstbe,$srcbe */\n+  {\n+    BPF_INSN_SDIV32RBE, \"sdiv32rbe\", \"sdiv32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x10\" } } } }\n+  },\n+/* smod $dstbe,$imm32 */\n+  {\n+    BPF_INSN_SMODIBE, \"smodibe\", \"smod\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x10\" } } } }\n+  },\n+/* smod $dstbe,$srcbe */\n+  {\n+    BPF_INSN_SMODRBE, \"smodrbe\", \"smod\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x10\" } } } }\n+  },\n+/* smod32 $dstbe,$imm32 */\n+  {\n+    BPF_INSN_SMOD32IBE, \"smod32ibe\", \"smod32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x10\" } } } }\n+  },\n+/* smod32 $dstbe,$srcbe */\n+  {\n+    BPF_INSN_SMOD32RBE, \"smod32rbe\", \"smod32\", 64,\n+    { 0, { { { (1<<MACH_BASE), 0 } }, { { 1, \"\\x10\" } } } }\n+  },\n /* neg $dstbe */\n   {\n     BPF_INSN_NEGBE, \"negbe\", \"neg\", 64,"
    },
    {
      "sha": "04e2af1f6d210ccc4ee0e842dbab5c404b8c5eb4",
      "filename": "opcodes/bpf-desc.h",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e25f88828f500fc649aa6eac8b567c7b1e96c59/opcodes/bpf-desc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e25f88828f500fc649aa6eac8b567c7b1e96c59/opcodes/bpf-desc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/bpf-desc.h?ref=6e25f88828f500fc649aa6eac8b567c7b1e96c59",
      "patch": "@@ -67,10 +67,11 @@ typedef enum insn_op_code_alu {\n   OP_CODE_ADD = 0, OP_CODE_SUB = 1, OP_CODE_MUL = 2, OP_CODE_DIV = 3\n  , OP_CODE_OR = 4, OP_CODE_AND = 5, OP_CODE_LSH = 6, OP_CODE_RSH = 7\n  , OP_CODE_NEG = 8, OP_CODE_MOD = 9, OP_CODE_XOR = 10, OP_CODE_MOV = 11\n- , OP_CODE_ARSH = 12, OP_CODE_END = 13, OP_CODE_JA = 0, OP_CODE_JEQ = 1\n- , OP_CODE_JGT = 2, OP_CODE_JGE = 3, OP_CODE_JSET = 4, OP_CODE_JNE = 5\n- , OP_CODE_JSGT = 6, OP_CODE_JSGE = 7, OP_CODE_CALL = 8, OP_CODE_EXIT = 9\n- , OP_CODE_JLT = 10, OP_CODE_JLE = 11, OP_CODE_JSLT = 12, OP_CODE_JSLE = 13\n+ , OP_CODE_ARSH = 12, OP_CODE_END = 13, OP_CODE_SDIV = 14, OP_CODE_SMOD = 15\n+ , OP_CODE_JA = 0, OP_CODE_JEQ = 1, OP_CODE_JGT = 2, OP_CODE_JGE = 3\n+ , OP_CODE_JSET = 4, OP_CODE_JNE = 5, OP_CODE_JSGT = 6, OP_CODE_JSGE = 7\n+ , OP_CODE_CALL = 8, OP_CODE_EXIT = 9, OP_CODE_JLT = 10, OP_CODE_JLE = 11\n+ , OP_CODE_JSLT = 12, OP_CODE_JSLE = 13\n } INSN_OP_CODE_ALU;\n \n /* Enum declaration for eBPF instruction source.  */"
    },
    {
      "sha": "5a157ee652c0ab1c67272ead23cba41ea91b00c3",
      "filename": "opcodes/bpf-opc.c",
      "status": "modified",
      "additions": 96,
      "deletions": 0,
      "changes": 96,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e25f88828f500fc649aa6eac8b567c7b1e96c59/opcodes/bpf-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e25f88828f500fc649aa6eac8b567c7b1e96c59/opcodes/bpf-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/bpf-opc.c?ref=6e25f88828f500fc649aa6eac8b567c7b1e96c59",
      "patch": "@@ -424,6 +424,54 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), 0 } },\n     & ifmt_addrle, { 0xcc }\n   },\n+/* sdiv $dstle,$imm32 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (IMM32), 0 } },\n+    & ifmt_addile, { 0xe7 }\n+  },\n+/* sdiv $dstle,$srcle */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), 0 } },\n+    & ifmt_addrle, { 0xef }\n+  },\n+/* sdiv32 $dstle,$imm32 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (IMM32), 0 } },\n+    & ifmt_addile, { 0xe4 }\n+  },\n+/* sdiv32 $dstle,$srcle */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), 0 } },\n+    & ifmt_addrle, { 0xec }\n+  },\n+/* smod $dstle,$imm32 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (IMM32), 0 } },\n+    & ifmt_addile, { 0xf7 }\n+  },\n+/* smod $dstle,$srcle */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), 0 } },\n+    & ifmt_addrle, { 0xff }\n+  },\n+/* smod32 $dstle,$imm32 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (IMM32), 0 } },\n+    & ifmt_addile, { 0xf4 }\n+  },\n+/* smod32 $dstle,$srcle */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTLE), ',', OP (SRCLE), 0 } },\n+    & ifmt_addrle, { 0xfc }\n+  },\n /* neg $dstle */\n   {\n     { 0, 0, 0, 0 },\n@@ -724,6 +772,54 @@ static const CGEN_OPCODE bpf_cgen_insn_opcode_table[MAX_INSNS] =\n     { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), 0 } },\n     & ifmt_addrbe, { 0xcc }\n   },\n+/* sdiv $dstbe,$imm32 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (IMM32), 0 } },\n+    & ifmt_addibe, { 0xe7 }\n+  },\n+/* sdiv $dstbe,$srcbe */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), 0 } },\n+    & ifmt_addrbe, { 0xef }\n+  },\n+/* sdiv32 $dstbe,$imm32 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (IMM32), 0 } },\n+    & ifmt_addibe, { 0xe4 }\n+  },\n+/* sdiv32 $dstbe,$srcbe */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), 0 } },\n+    & ifmt_addrbe, { 0xec }\n+  },\n+/* smod $dstbe,$imm32 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (IMM32), 0 } },\n+    & ifmt_addibe, { 0xf7 }\n+  },\n+/* smod $dstbe,$srcbe */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), 0 } },\n+    & ifmt_addrbe, { 0xff }\n+  },\n+/* smod32 $dstbe,$imm32 */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (IMM32), 0 } },\n+    & ifmt_addibe, { 0xf4 }\n+  },\n+/* smod32 $dstbe,$srcbe */\n+  {\n+    { 0, 0, 0, 0 },\n+    { { MNEM, ' ', OP (DSTBE), ',', OP (SRCBE), 0 } },\n+    & ifmt_addrbe, { 0xfc }\n+  },\n /* neg $dstbe */\n   {\n     { 0, 0, 0, 0 },"
    },
    {
      "sha": "c3f9362f9b3fbdb9399850eb28ecf3dd058df41b",
      "filename": "opcodes/bpf-opc.h",
      "status": "modified",
      "additions": 6,
      "deletions": 2,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6e25f88828f500fc649aa6eac8b567c7b1e96c59/opcodes/bpf-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6e25f88828f500fc649aa6eac8b567c7b1e96c59/opcodes/bpf-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/bpf-opc.h?ref=6e25f88828f500fc649aa6eac8b567c7b1e96c59",
      "patch": "@@ -59,7 +59,9 @@ typedef enum cgen_insn_type {\n  , BPF_INSN_RSH32RLE, BPF_INSN_MODILE, BPF_INSN_MODRLE, BPF_INSN_MOD32ILE\n  , BPF_INSN_MOD32RLE, BPF_INSN_XORILE, BPF_INSN_XORRLE, BPF_INSN_XOR32ILE\n  , BPF_INSN_XOR32RLE, BPF_INSN_ARSHILE, BPF_INSN_ARSHRLE, BPF_INSN_ARSH32ILE\n- , BPF_INSN_ARSH32RLE, BPF_INSN_NEGLE, BPF_INSN_NEG32LE, BPF_INSN_MOVILE\n+ , BPF_INSN_ARSH32RLE, BPF_INSN_SDIVILE, BPF_INSN_SDIVRLE, BPF_INSN_SDIV32ILE\n+ , BPF_INSN_SDIV32RLE, BPF_INSN_SMODILE, BPF_INSN_SMODRLE, BPF_INSN_SMOD32ILE\n+ , BPF_INSN_SMOD32RLE, BPF_INSN_NEGLE, BPF_INSN_NEG32LE, BPF_INSN_MOVILE\n  , BPF_INSN_MOVRLE, BPF_INSN_MOV32ILE, BPF_INSN_MOV32RLE, BPF_INSN_ADDIBE\n  , BPF_INSN_ADDRBE, BPF_INSN_ADD32IBE, BPF_INSN_ADD32RBE, BPF_INSN_SUBIBE\n  , BPF_INSN_SUBRBE, BPF_INSN_SUB32IBE, BPF_INSN_SUB32RBE, BPF_INSN_MULIBE\n@@ -71,7 +73,9 @@ typedef enum cgen_insn_type {\n  , BPF_INSN_RSHRBE, BPF_INSN_RSH32IBE, BPF_INSN_RSH32RBE, BPF_INSN_MODIBE\n  , BPF_INSN_MODRBE, BPF_INSN_MOD32IBE, BPF_INSN_MOD32RBE, BPF_INSN_XORIBE\n  , BPF_INSN_XORRBE, BPF_INSN_XOR32IBE, BPF_INSN_XOR32RBE, BPF_INSN_ARSHIBE\n- , BPF_INSN_ARSHRBE, BPF_INSN_ARSH32IBE, BPF_INSN_ARSH32RBE, BPF_INSN_NEGBE\n+ , BPF_INSN_ARSHRBE, BPF_INSN_ARSH32IBE, BPF_INSN_ARSH32RBE, BPF_INSN_SDIVIBE\n+ , BPF_INSN_SDIVRBE, BPF_INSN_SDIV32IBE, BPF_INSN_SDIV32RBE, BPF_INSN_SMODIBE\n+ , BPF_INSN_SMODRBE, BPF_INSN_SMOD32IBE, BPF_INSN_SMOD32RBE, BPF_INSN_NEGBE\n  , BPF_INSN_NEG32BE, BPF_INSN_MOVIBE, BPF_INSN_MOVRBE, BPF_INSN_MOV32IBE\n  , BPF_INSN_MOV32RBE, BPF_INSN_ENDLELE, BPF_INSN_ENDBELE, BPF_INSN_ENDLEBE\n  , BPF_INSN_ENDBEBE, BPF_INSN_LDDWLE, BPF_INSN_LDDWBE, BPF_INSN_LDABSW"
    }
  ]
}