{
  "sha": "974c89e0882ddb03e294eca76a9e3d3bef90eacf",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTc0Yzg5ZTA4ODJkZGIwM2UyOTRlY2E3NmE5ZTNkM2JlZjkwZWFjZg==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-03-25T10:44:11Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-03-26T16:27:43Z"
    },
    "message": "gdbserver: Add linux_get_hwcap\n\nIn gdbserver, Tidy up calls to read HWCAP (and HWCAP2) by adding common\nfunctions, removing the Arm, AArch64, PPC and S390 specific versions.\n\nNo functionality differences.\n\ngdb/gdbserver/ChangeLog:\n\n\t* linux-aarch64-low.c (aarch64_get_hwcap): Remove function.\n\t(aarch64_arch_setup): Call linux_get_hwcap.\n\t* linux-arm-low.c (arm_get_hwcap): Remove function.\n\t(arm_read_description): Call linux_get_hwcap.\n\t* linux-low.c (linux_get_auxv): New function.\n\t(linux_get_hwcap): Likewise.\n\t(linux_get_hwcap2): Likewise.\n\t* linux-low.h (linux_get_hwcap): New declaration.\n\t(linux_get_hwcap2): Likewise.\n\t* linux-ppc-low.c (ppc_get_auxv): Remove function.\n\t(ppc_arch_setup): Call linux_get_hwcap.\n\t* linux-s390-low.c (s390_get_hwcap): Remove function.\n\t(s390_arch_setup): Call linux_get_hwcap.",
    "tree": {
      "sha": "b90e670ef3e07b1ca0f30c004eb5cd006077f7b5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b90e670ef3e07b1ca0f30c004eb5cd006077f7b5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/974c89e0882ddb03e294eca76a9e3d3bef90eacf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/974c89e0882ddb03e294eca76a9e3d3bef90eacf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/974c89e0882ddb03e294eca76a9e3d3bef90eacf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/974c89e0882ddb03e294eca76a9e3d3bef90eacf/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7ea79cb3affe1ae1d196f511ace044c015e0ccd3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ea79cb3affe1ae1d196f511ace044c015e0ccd3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7ea79cb3affe1ae1d196f511ace044c015e0ccd3"
    }
  ],
  "stats": {
    "total": 201,
    "additions": 79,
    "deletions": 122
  },
  "files": [
    {
      "sha": "8716ab5b43e389ae42b5b0f242f4d53a0aa2d7d0",
      "filename": "gdb/gdbserver/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/974c89e0882ddb03e294eca76a9e3d3bef90eacf/gdb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/974c89e0882ddb03e294eca76a9e3d3bef90eacf/gdb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/ChangeLog?ref=974c89e0882ddb03e294eca76a9e3d3bef90eacf",
      "patch": "@@ -1,3 +1,19 @@\n+2019-03-26  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* linux-aarch64-low.c (aarch64_get_hwcap): Remove function.\n+\t(aarch64_arch_setup): Call linux_get_hwcap.\n+\t* linux-arm-low.c (arm_get_hwcap): Remove function.\n+\t(arm_read_description): Call linux_get_hwcap.\n+\t* linux-low.c (linux_get_auxv): New function.\n+\t(linux_get_hwcap): Likewise.\n+\t(linux_get_hwcap2): Likewise.\n+\t* linux-low.h (linux_get_hwcap): New declaration.\n+\t(linux_get_hwcap2): Likewise.\n+\t* linux-ppc-low.c (ppc_get_auxv): Remove function.\n+\t(ppc_arch_setup): Call linux_get_hwcap.\n+\t* linux-s390-low.c (s390_get_hwcap): Remove function.\n+\t(s390_arch_setup): Call linux_get_hwcap.\n+\n 2019-03-22  Alan Hayward  <alan.hayward@arm.com>\n \t    Jiong Wang  <jiong.wang@arm.com>\n "
    },
    {
      "sha": "dc4ee81d2a24ead4f97fad653aa547f97f30faf0",
      "filename": "gdb/gdbserver/linux-aarch64-low.c",
      "status": "modified",
      "additions": 2,
      "deletions": 26,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/974c89e0882ddb03e294eca76a9e3d3bef90eacf/gdb/gdbserver/linux-aarch64-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/974c89e0882ddb03e294eca76a9e3d3bef90eacf/gdb/gdbserver/linux-aarch64-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-aarch64-low.c?ref=974c89e0882ddb03e294eca76a9e3d3bef90eacf",
      "patch": "@@ -505,30 +505,6 @@ aarch64_linux_new_fork (struct process_info *parent,\n /* Matches HWCAP_PACA in kernel header arch/arm64/include/uapi/asm/hwcap.h.  */\n #define AARCH64_HWCAP_PACA (1 << 30)\n \n-/* Fetch the AT_HWCAP entry from the auxv vector.  */\n-\n-static bool\n-aarch64_get_hwcap (unsigned long *valp)\n-{\n-  unsigned char *data = (unsigned char *) alloca (16);\n-  int offset = 0;\n-\n-  while ((*the_target->read_auxv) (offset, data, 16) == 16)\n-    {\n-      unsigned long *data_p = (unsigned long *)data;\n-      if (data_p[0] == AT_HWCAP)\n-\t{\n-\t  *valp = data_p[1];\n-\t  return true;\n-\t}\n-\n-      offset += 16;\n-    }\n-\n-  *valp = 0;\n-  return false;\n-}\n-\n /* Implementation of linux_target_ops method \"arch_setup\".  */\n \n static void\n@@ -545,8 +521,8 @@ aarch64_arch_setup (void)\n   if (is_elf64)\n     {\n       uint64_t vq = aarch64_sve_get_vq (tid);\n-      unsigned long hwcap = 0;\n-      bool pauth_p = aarch64_get_hwcap (&hwcap) && (hwcap & AARCH64_HWCAP_PACA);\n+      unsigned long hwcap = linux_get_hwcap (8);\n+      bool pauth_p = hwcap & AARCH64_HWCAP_PACA;\n \n       current_process ()->tdesc = aarch64_linux_read_description (vq, pauth_p);\n     }"
    },
    {
      "sha": "ff72a489cba98f1562337dcaa26936b29f68e5ea",
      "filename": "gdb/gdbserver/linux-arm-low.c",
      "status": "modified",
      "additions": 1,
      "deletions": 26,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/974c89e0882ddb03e294eca76a9e3d3bef90eacf/gdb/gdbserver/linux-arm-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/974c89e0882ddb03e294eca76a9e3d3bef90eacf/gdb/gdbserver/linux-arm-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-arm-low.c?ref=974c89e0882ddb03e294eca76a9e3d3bef90eacf",
      "patch": "@@ -847,40 +847,15 @@ get_next_pcs_syscall_next_pc (struct arm_get_next_pcs *self)\n   return next_pc;\n }\n \n-static int\n-arm_get_hwcap (unsigned long *valp)\n-{\n-  unsigned char *data = (unsigned char *) alloca (8);\n-  int offset = 0;\n-\n-  while ((*the_target->read_auxv) (offset, data, 8) == 8)\n-    {\n-      unsigned int *data_p = (unsigned int *)data;\n-      if (data_p[0] == AT_HWCAP)\n-\t{\n-\t  *valp = data_p[1];\n-\t  return 1;\n-\t}\n-\n-      offset += 8;\n-    }\n-\n-  *valp = 0;\n-  return 0;\n-}\n-\n static const struct target_desc *\n arm_read_description (void)\n {\n   int pid = lwpid_of (current_thread);\n-  unsigned long arm_hwcap = 0;\n+  unsigned long arm_hwcap = linux_get_hwcap (4);\n \n   /* Query hardware watchpoint/breakpoint capabilities.  */\n   arm_linux_init_hwbp_cap (pid);\n \n-  if (arm_get_hwcap (&arm_hwcap) == 0)\n-    return tdesc_arm;\n-\n   if (arm_hwcap & HWCAP_IWMMXT)\n     return tdesc_arm_with_iwmmxt;\n "
    },
    {
      "sha": "7158a6798c91f42670a232343b252d5f835da999",
      "filename": "gdb/gdbserver/linux-low.c",
      "status": "modified",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/974c89e0882ddb03e294eca76a9e3d3bef90eacf/gdb/gdbserver/linux-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/974c89e0882ddb03e294eca76a9e3d3bef90eacf/gdb/gdbserver/linux-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-low.c?ref=974c89e0882ddb03e294eca76a9e3d3bef90eacf",
      "patch": "@@ -7423,6 +7423,53 @@ linux_get_pc_64bit (struct regcache *regcache)\n   return pc;\n }\n \n+/* Fetch the entry MATCH from the auxv vector, where entries are length\n+   WORDSIZE.  If no entry was found, return zero.  */\n+\n+static CORE_ADDR\n+linux_get_auxv (int wordsize, CORE_ADDR match)\n+{\n+  gdb_byte *data = (gdb_byte *) alloca (2 * wordsize);\n+  int offset = 0;\n+\n+  gdb_assert (wordsize == 4 || wordsize == 8);\n+\n+  while ((*the_target->read_auxv) (offset, data, 2 * wordsize) == 2 * wordsize)\n+    {\n+      if (wordsize == 4)\n+\t{\n+\t  uint32_t *data_p = (uint32_t *)data;\n+\t  if (data_p[0] == match)\n+\t    return data_p[1];\n+\t}\n+      else\n+\t{\n+\t  uint64_t *data_p = (uint64_t *)data;\n+\t  if (data_p[0] == match)\n+\t    return data_p[1];\n+\t}\n+\n+      offset += 2 * wordsize;\n+    }\n+\n+  return 0;\n+}\n+\n+/* See linux-low.h.  */\n+\n+CORE_ADDR\n+linux_get_hwcap (int wordsize)\n+{\n+  return linux_get_auxv (wordsize, AT_HWCAP);\n+}\n+\n+/* See linux-low.h.  */\n+\n+CORE_ADDR\n+linux_get_hwcap2 (int wordsize)\n+{\n+  return linux_get_auxv (wordsize, AT_HWCAP2);\n+}\n \n static struct target_ops linux_target_ops = {\n   linux_create_inferior,"
    },
    {
      "sha": "d825184835d9965a629a1ad0294a8c5d3389a893",
      "filename": "gdb/gdbserver/linux-low.h",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/974c89e0882ddb03e294eca76a9e3d3bef90eacf/gdb/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/974c89e0882ddb03e294eca76a9e3d3bef90eacf/gdb/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-low.h?ref=974c89e0882ddb03e294eca76a9e3d3bef90eacf",
      "patch": "@@ -435,4 +435,14 @@ bool thread_db_thread_handle (ptid_t ptid, gdb_byte **handle, int *handle_len);\n \n extern int have_ptrace_getregset;\n \n+/* Fetch the AT_HWCAP entry from the auxv vector, where entries are length\n+   WORDSIZE.  If no entry was found, return zero.  */\n+\n+CORE_ADDR linux_get_hwcap (int wordsize);\n+\n+/* Fetch the AT_HWCAP2 entry from the auxv vector, where entries are length\n+   WORDSIZE.  If no entry was found, return zero.  */\n+\n+CORE_ADDR linux_get_hwcap2 (int wordsize);\n+\n #endif /* GDBSERVER_LINUX_LOW_H */"
    },
    {
      "sha": "8deb0ce068b2c75d56f8bf69eea815053af3071b",
      "filename": "gdb/gdbserver/linux-ppc-low.c",
      "status": "modified",
      "additions": 2,
      "deletions": 39,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/974c89e0882ddb03e294eca76a9e3d3bef90eacf/gdb/gdbserver/linux-ppc-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/974c89e0882ddb03e294eca76a9e3d3bef90eacf/gdb/gdbserver/linux-ppc-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-ppc-low.c?ref=974c89e0882ddb03e294eca76a9e3d3bef90eacf",
      "patch": "@@ -323,43 +323,6 @@ ppc_set_pc (struct regcache *regcache, CORE_ADDR pc)\n     }\n }\n \n-\n-static int\n-ppc_get_auxv (unsigned long type, unsigned long *valp)\n-{\n-  const struct target_desc *tdesc = current_process ()->tdesc;\n-  int wordsize = register_size (tdesc, 0);\n-  unsigned char *data = (unsigned char *) alloca (2 * wordsize);\n-  int offset = 0;\n-\n-  while ((*the_target->read_auxv) (offset, data, 2 * wordsize) == 2 * wordsize)\n-    {\n-      if (wordsize == 4)\n-\t{\n-\t  unsigned int *data_p = (unsigned int *)data;\n-\t  if (data_p[0] == type)\n-\t    {\n-\t      *valp = data_p[1];\n-\t      return 1;\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  unsigned long *data_p = (unsigned long *)data;\n-\t  if (data_p[0] == type)\n-\t    {\n-\t      *valp = data_p[1];\n-\t      return 1;\n-\t    }\n-\t}\n-\n-      offset += 2 * wordsize;\n-    }\n-\n-  *valp = 0;\n-  return 0;\n-}\n-\n #ifndef __powerpc64__\n static int ppc_regmap_adjusted;\n #endif\n@@ -944,8 +907,8 @@ ppc_arch_setup (void)\n \n   /* The value of current_process ()->tdesc needs to be set for this\n      call.  */\n-  ppc_get_auxv (AT_HWCAP, &ppc_hwcap);\n-  ppc_get_auxv (AT_HWCAP2, &ppc_hwcap2);\n+  ppc_hwcap = linux_get_hwcap (features.wordsize);\n+  ppc_hwcap2 = linux_get_hwcap2 (features.wordsize);\n \n   features.isa205 = ppc_linux_has_isa205 (ppc_hwcap);\n "
    },
    {
      "sha": "f65a1ec38efd0faef3b0a5c7a52a725d54161e5c",
      "filename": "gdb/gdbserver/linux-s390-low.c",
      "status": "modified",
      "additions": 1,
      "deletions": 31,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/974c89e0882ddb03e294eca76a9e3d3bef90eacf/gdb/gdbserver/linux-s390-low.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/974c89e0882ddb03e294eca76a9e3d3bef90eacf/gdb/gdbserver/linux-s390-low.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/linux-s390-low.c?ref=974c89e0882ddb03e294eca76a9e3d3bef90eacf",
      "patch": "@@ -467,36 +467,6 @@ s390_set_pc (struct regcache *regcache, CORE_ADDR newpc)\n     }\n }\n \n-/* Get HWCAP from AUXV, using the given WORDSIZE.  Return the HWCAP, or\n-   zero if not found.  */\n-\n-static unsigned long\n-s390_get_hwcap (int wordsize)\n-{\n-  gdb_byte *data = (gdb_byte *) alloca (2 * wordsize);\n-  int offset = 0;\n-\n-  while ((*the_target->read_auxv) (offset, data, 2 * wordsize) == 2 * wordsize)\n-    {\n-      if (wordsize == 4)\n-        {\n-          unsigned int *data_p = (unsigned int *)data;\n-          if (data_p[0] == AT_HWCAP)\n-\t    return data_p[1];\n-        }\n-      else\n-        {\n-          unsigned long *data_p = (unsigned long *)data;\n-          if (data_p[0] == AT_HWCAP)\n-\t    return data_p[1];\n-        }\n-\n-      offset += 2 * wordsize;\n-    }\n-\n-  return 0;\n-}\n-\n /* Determine the word size for the given PID, in bytes.  */\n \n #ifdef __s390x__\n@@ -548,7 +518,7 @@ s390_arch_setup (void)\n   /* Determine word size and HWCAP.  */\n   int pid = pid_of (current_thread);\n   int wordsize = s390_get_wordsize (pid);\n-  unsigned long hwcap = s390_get_hwcap (wordsize);\n+  unsigned long hwcap = linux_get_hwcap (wordsize);\n \n   /* Check whether the kernel supports extra register sets.  */\n   int have_regset_last_break"
    }
  ]
}