{
  "sha": "efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWZhYzRiZmUwYjJiZGQyMWEyN2M5NGNhMzQ2NDA0NmU5YzIzZjBlNA==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2019-02-12T21:56:16Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2019-02-12T21:56:16Z"
    },
    "message": "Add a new function child_path.\n\nchild_path returns a pointer to the first component in a child path\nthat comes after a parent path.  This does not depend on trying to\nstat() the paths since they may describe remote paths but instead\nrelies on filename parsing.  The function requires that the child path\ndescribe a filename that contains at least one component below the\nparent path and returns a pointer to the first component.\n\ngdb/ChangeLog:\n\n\t* Makefile.in (SUBDIR_UNITTESTS_SRCS): Add\n\tunittests/child-path-selftests.c.\n\t* common/pathstuff.c (child_path): New function.\n\t* common/pathstuff.h (child_path): New prototype.\n\t* unittests/child-path-selftests.c: New file.",
    "tree": {
      "sha": "85e22a71d2b6e613641f3351792d38f69d4ca847",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/85e22a71d2b6e613641f3351792d38f69d4ca847"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "402d2bfec425f29c5b54089d5ff98ca9a1b8ec27",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/402d2bfec425f29c5b54089d5ff98ca9a1b8ec27",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/402d2bfec425f29c5b54089d5ff98ca9a1b8ec27"
    }
  ],
  "stats": {
    "total": 133,
    "additions": 133,
    "deletions": 0
  },
  "files": [
    {
      "sha": "2357a4045c09cf8ec8b584160849cfd7879901dc",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4",
      "patch": "@@ -1,3 +1,11 @@\n+2019-02-12  John Baldwin  <jhb@FreeBSD.org>\n+\n+\t* Makefile.in (SUBDIR_UNITTESTS_SRCS): Add\n+\tunittests/child-path-selftests.c.\n+\t* common/pathstuff.c (child_path): New function.\n+\t* common/pathstuff.h (child_path): New prototype.\n+\t* unittests/child-path-selftests.c: New file.\n+\n 2019-02-12  John Baldwin  <jhb@FreeBSD.org>\n \n \t* symfile.c (find_separate_debug_file): Look for separate debug"
    },
    {
      "sha": "5614cc3386ce77b0e53ecf07de859180ffafbac5",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4",
      "patch": "@@ -411,6 +411,7 @@ SUBDIR_PYTHON_CFLAGS =\n \n SUBDIR_UNITTESTS_SRCS = \\\n \tunittests/array-view-selftests.c \\\n+\tunittests/child-path-selftests.c \\\n \tunittests/cli-utils-selftests.c \\\n \tunittests/common-utils-selftests.c \\\n \tunittests/copy_bitwise-selftests.c \\"
    },
    {
      "sha": "2b1669a5b99e2db9cbb52a4085b0ab7b42e3e3f2",
      "filename": "gdb/common/pathstuff.c",
      "status": "modified",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4/gdb/common/pathstuff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4/gdb/common/pathstuff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/pathstuff.c?ref=efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4",
      "patch": "@@ -147,6 +147,56 @@ gdb_abspath (const char *path)\n \n /* See common/pathstuff.h.  */\n \n+const char *\n+child_path (const char *parent, const char *child)\n+{\n+  /* The child path must start with the parent path.  */\n+  size_t parent_len = strlen (parent);\n+  if (filename_ncmp (parent, child, parent_len) != 0)\n+    return NULL;\n+\n+  /* The parent path must be a directory and the child must contain at\n+     least one component underneath the parent.  */\n+  const char *child_component;\n+  if (IS_DIR_SEPARATOR (parent[parent_len - 1]))\n+    {\n+      /* The parent path ends in a directory separator, so it is a\n+\t directory.  The first child component starts after the common\n+\t prefix.  */\n+      child_component = child + parent_len;\n+    }\n+  else\n+    {\n+      /* The parent path does not end in a directory separator.  The\n+\t first character in the child after the common prefix must be\n+\t a directory separator.\n+\n+\t Note that CHILD must hold at least parent_len characters for\n+\t filename_ncmp to return zero.  If the character at parent_len\n+\t is nul due to CHILD containing the same path as PARENT, the\n+\t IS_DIR_SEPARATOR check will fail here.  */\n+      if (!IS_DIR_SEPARATOR (child[parent_len]))\n+\treturn NULL;\n+\n+      /* The first child component starts after the separator after the\n+\t common prefix.  */\n+      child_component = child + parent_len + 1;\n+    }\n+\n+  /* The child must contain at least one non-separator character after\n+     the parent.  */\n+  while (*child_component != '\\0')\n+    {\n+      if (!IS_DIR_SEPARATOR (*child_component))\n+\treturn child_component;\n+\n+      child_component++;\n+    }\n+  return NULL;\n+}\n+\n+/* See common/pathstuff.h.  */\n+\n bool\n contains_dir_separator (const char *path)\n {"
    },
    {
      "sha": "67072a40e733700f369c1284718dee37dbf9cc7d",
      "filename": "gdb/common/pathstuff.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4/gdb/common/pathstuff.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4/gdb/common/pathstuff.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/pathstuff.h?ref=efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4",
      "patch": "@@ -48,6 +48,12 @@ extern gdb::unique_xmalloc_ptr<char>\n \n extern gdb::unique_xmalloc_ptr<char> gdb_abspath (const char *path);\n \n+/* If the path in CHILD is a child of the path in PARENT, return a\n+   pointer to the first component in the CHILD's pathname below the\n+   PARENT.  Otherwise, return NULL.  */\n+\n+extern const char *child_path (const char *parent, const char *child);\n+\n /* Return whether PATH contains a directory separator character.  */\n \n extern bool contains_dir_separator (const char *path);"
    },
    {
      "sha": "4c436efa969ae593c42575486db194d7132a595d",
      "filename": "gdb/unittests/child-path-selftests.c",
      "status": "added",
      "additions": 68,
      "deletions": 0,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4/gdb/unittests/child-path-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4/gdb/unittests/child-path-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/child-path-selftests.c?ref=efac4bfe0b2bdd21a27c94ca3464046e9c23f0e4",
      "patch": "@@ -0,0 +1,68 @@\n+/* Self tests for child_path for GDB, the GNU debugger.\n+\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"defs.h\"\n+#include \"common/pathstuff.h\"\n+#include \"common/selftest.h\"\n+\n+namespace selftests {\n+namespace child_path {\n+\n+/* Verify the result of a single child_path test.  */\n+\n+static bool\n+child_path_check (const char *parent, const char *child, const char *expected)\n+{\n+  const char *result = ::child_path (parent, child);\n+  if (result == NULL || expected == NULL)\n+    return result == expected;\n+  return strcmp (result, expected) == 0;\n+}\n+\n+/* Test child_path.  */\n+\n+static void\n+test ()\n+{\n+  SELF_CHECK (child_path_check (\"/one\", \"/two\", NULL));\n+  SELF_CHECK (child_path_check (\"/one\", \"/one\", NULL));\n+  SELF_CHECK (child_path_check (\"/one\", \"/one/\", NULL));\n+  SELF_CHECK (child_path_check (\"/one\", \"/one//\", NULL));\n+  SELF_CHECK (child_path_check (\"/one\", \"/one/two\", \"two\"));\n+  SELF_CHECK (child_path_check (\"/one/\", \"/two\", NULL));\n+  SELF_CHECK (child_path_check (\"/one/\", \"/one\", NULL));\n+  SELF_CHECK (child_path_check (\"/one/\", \"/one/\", NULL));\n+  SELF_CHECK (child_path_check (\"/one/\", \"/one//\", NULL));\n+  SELF_CHECK (child_path_check (\"/one/\", \"/one/two\", \"two\"));\n+  SELF_CHECK (child_path_check (\"/one/\", \"/one//two\", \"two\"));\n+  SELF_CHECK (child_path_check (\"/one/\", \"/one//two/\", \"two/\"));\n+  SELF_CHECK (child_path_check (\"/one\", \"/onetwo\", NULL));\n+  SELF_CHECK (child_path_check (\"/one\", \"/onetwo/three\", NULL));\n+}\n+\n+}\n+}\n+\n+void\n+_initialize_child_path_selftests ()\n+{\n+  selftests::register_test (\"child_path\",\n+\t\t\t    selftests::child_path::test);\n+}\n+"
    }
  ]
}