{
  "sha": "7befbbd4c3d50c17fb22d872fd933d8c917aa5ee",
  "node_id": "C_kwDOANOeidoAKDdiZWZiYmQ0YzNkNTBjMTdmYjIyZDg3MmZkOTMzZDhjOTE3YWE1ZWU",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-12-30T19:16:58Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-01-05T18:36:33Z"
    },
    "message": "Use filtered output in some dumping commands\n\nThere are several commands that may optionally send their output to a\nfile -- they take an optional filename argument and open a file.  This\npatch changes these commands to use filtered output.  The rationale\nhere is that, when printing to gdb_stdout, filtering is appropriate --\nit is, and should be, the default for all commands.  And, when writing\nto a file, paging will not happen anyway (it only happens when the\nstream==gdb_stdout), so using the _filtered form will not change\nanything.",
    "tree": {
      "sha": "d557613e147874cfadab23223b412fd571d6ddbc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d557613e147874cfadab23223b412fd571d6ddbc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7befbbd4c3d50c17fb22d872fd933d8c917aa5ee",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7befbbd4c3d50c17fb22d872fd933d8c917aa5ee",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7befbbd4c3d50c17fb22d872fd933d8c917aa5ee",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7befbbd4c3d50c17fb22d872fd933d8c917aa5ee/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "34fda50beed954b3fa392297c34c9417a81d7a38",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/34fda50beed954b3fa392297c34c9417a81d7a38",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/34fda50beed954b3fa392297c34c9417a81d7a38"
    }
  ],
  "stats": {
    "total": 122,
    "additions": 61,
    "deletions": 61
  },
  "files": [
    {
      "sha": "41c0bdeb945595c90cb4b01948ae2eff95d85cc0",
      "filename": "gdb/dummy-frame.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7befbbd4c3d50c17fb22d872fd933d8c917aa5ee/gdb/dummy-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7befbbd4c3d50c17fb22d872fd933d8c917aa5ee/gdb/dummy-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dummy-frame.c?ref=7befbbd4c3d50c17fb22d872fd933d8c917aa5ee",
      "patch": "@@ -405,10 +405,10 @@ fprint_dummy_frames (struct ui_file *file)\n   struct dummy_frame *s;\n \n   for (s = dummy_frame_stack; s != NULL; s = s->next)\n-    fprintf_unfiltered (file, \"%s: id=%s, ptid=%s\\n\",\n-\t\t\thost_address_to_string (s),\n-\t\t\ts->id.id.to_string ().c_str (),\n-\t\t\ttarget_pid_to_str (s->id.thread->ptid).c_str ());\n+    fprintf_filtered (file, \"%s: id=%s, ptid=%s\\n\",\n+\t\t      host_address_to_string (s),\n+\t\t      s->id.id.to_string ().c_str (),\n+\t\t      target_pid_to_str (s->id.thread->ptid).c_str ());\n }\n \n static void"
    },
    {
      "sha": "b9b538d78bbfb87cff6444ae149f3f75bacb72bd",
      "filename": "gdb/maint-test-options.c",
      "status": "modified",
      "additions": 16,
      "deletions": 16,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7befbbd4c3d50c17fb22d872fd933d8c917aa5ee/gdb/maint-test-options.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7befbbd4c3d50c17fb22d872fd933d8c917aa5ee/gdb/maint-test-options.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint-test-options.c?ref=7befbbd4c3d50c17fb22d872fd933d8c917aa5ee",
      "patch": "@@ -143,22 +143,22 @@ struct test_options_opts\n      arguments.  */\n   void dump (ui_file *file, const char *args) const\n   {\n-    fprintf_unfiltered (file,\n-\t\t\t_(\"-flag %d -xx1 %d -xx2 %d -bool %d \"\n-\t\t\t  \"-enum %s -uint %s -zuint-unl %s -string '%s' -- %s\\n\"),\n-\t\t\tflag_opt,\n-\t\t\txx1_opt,\n-\t\t\txx2_opt,\n-\t\t\tboolean_opt,\n-\t\t\tenum_opt,\n-\t\t\t(uint_opt == UINT_MAX\n-\t\t\t ? \"unlimited\"\n-\t\t\t : pulongest (uint_opt)),\n-\t\t\t(zuint_unl_opt == -1\n-\t\t\t ? \"unlimited\"\n-\t\t\t : plongest (zuint_unl_opt)),\n-\t\t\tstring_opt.c_str (),\n-\t\t\targs);\n+    fprintf_filtered (file,\n+\t\t      _(\"-flag %d -xx1 %d -xx2 %d -bool %d \"\n+\t\t\t\"-enum %s -uint %s -zuint-unl %s -string '%s' -- %s\\n\"),\n+\t\t      flag_opt,\n+\t\t      xx1_opt,\n+\t\t      xx2_opt,\n+\t\t      boolean_opt,\n+\t\t      enum_opt,\n+\t\t      (uint_opt == UINT_MAX\n+\t\t       ? \"unlimited\"\n+\t\t       : pulongest (uint_opt)),\n+\t\t      (zuint_unl_opt == -1\n+\t\t       ? \"unlimited\"\n+\t\t       : plongest (zuint_unl_opt)),\n+\t\t      string_opt.c_str (),\n+\t\t      args);\n   }\n };\n "
    },
    {
      "sha": "f59345032eda0a24a58c814a127cc4bd8004114f",
      "filename": "gdb/regcache-dump.c",
      "status": "modified",
      "additions": 15,
      "deletions": 15,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7befbbd4c3d50c17fb22d872fd933d8c917aa5ee/gdb/regcache-dump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7befbbd4c3d50c17fb22d872fd933d8c917aa5ee/gdb/regcache-dump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/regcache-dump.c?ref=7befbbd4c3d50c17fb22d872fd933d8c917aa5ee",
      "patch": "@@ -43,9 +43,9 @@ class register_dump_regcache : public register_dump\n     if (regnum < 0)\n       {\n \tif (m_dump_pseudo)\n-\t  fprintf_unfiltered (file, \"Cooked value\");\n+\t  fprintf_filtered (file, \"Cooked value\");\n \telse\n-\t  fprintf_unfiltered (file, \"Raw value\");\n+\t  fprintf_filtered (file, \"Raw value\");\n       }\n     else\n       {\n@@ -60,9 +60,9 @@ class register_dump_regcache : public register_dump\n \t    auto status = m_regcache->cooked_read (regnum, buf.data ());\n \n \t    if (status == REG_UNKNOWN)\n-\t      fprintf_unfiltered (file, \"<invalid>\");\n+\t      fprintf_filtered (file, \"<invalid>\");\n \t    else if (status == REG_UNAVAILABLE)\n-\t      fprintf_unfiltered (file, \"<unavailable>\");\n+\t      fprintf_filtered (file, \"<unavailable>\");\n \t    else\n \t      {\n \t\tprint_hex_chars (file, buf.data (), size,\n@@ -73,7 +73,7 @@ class register_dump_regcache : public register_dump\n \t  {\n \t    /* Just print \"<cooked>\" for pseudo register when\n \t       regcache_dump_raw.  */\n-\t    fprintf_unfiltered (file, \"<cooked>\");\n+\t    fprintf_filtered (file, \"<cooked>\");\n \t  }\n       }\n   }\n@@ -102,9 +102,9 @@ class register_dump_reg_buffer : public register_dump, reg_buffer\n     if (regnum < 0)\n       {\n \tif (m_has_pseudo)\n-\t  fprintf_unfiltered (file, \"Cooked value\");\n+\t  fprintf_filtered (file, \"Cooked value\");\n \telse\n-\t  fprintf_unfiltered (file, \"Raw value\");\n+\t  fprintf_filtered (file, \"Raw value\");\n       }\n     else\n       {\n@@ -120,15 +120,15 @@ class register_dump_reg_buffer : public register_dump, reg_buffer\n \t    gdb_assert (status != REG_VALID);\n \n \t    if (status == REG_UNKNOWN)\n-\t      fprintf_unfiltered (file, \"<invalid>\");\n+\t      fprintf_filtered (file, \"<invalid>\");\n \t    else\n-\t      fprintf_unfiltered (file, \"<unavailable>\");\n+\t      fprintf_filtered (file, \"<unavailable>\");\n \t  }\n \telse\n \t  {\n \t    /* Just print \"<cooked>\" for pseudo register when\n \t       regcache_dump_raw.  */\n-\t    fprintf_unfiltered (file, \"<cooked>\");\n+\t    fprintf_filtered (file, \"<cooked>\");\n \t  }\n       }\n   }\n@@ -162,15 +162,15 @@ class register_dump_remote : public register_dump\n   {\n     if (regnum < 0)\n       {\n-\tfprintf_unfiltered (file, \"Rmt Nr  g/G Offset\");\n+\tfprintf_filtered (file, \"Rmt Nr  g/G Offset\");\n       }\n     else if (regnum < gdbarch_num_regs (m_gdbarch))\n       {\n \tint pnum, poffset;\n \n \tif (remote_register_number_and_offset (m_gdbarch, regnum,\n \t\t\t\t\t       &pnum, &poffset))\n-\t  fprintf_unfiltered (file, \"%7d %11d\", pnum, poffset);\n+\t  fprintf_filtered (file, \"%7d %11d\", pnum, poffset);\n       }\n   }\n };\n@@ -188,7 +188,7 @@ class register_dump_groups : public register_dump\n   void dump_reg (ui_file *file, int regnum) override\n   {\n     if (regnum < 0)\n-      fprintf_unfiltered (file, \"Groups\");\n+      fprintf_filtered (file, \"Groups\");\n     else\n       {\n \tconst char *sep = \"\";\n@@ -200,8 +200,8 @@ class register_dump_groups : public register_dump\n \t  {\n \t    if (gdbarch_register_reggroup_p (m_gdbarch, regnum, group))\n \t      {\n-\t\tfprintf_unfiltered (file,\n-\t\t\t\t    \"%s%s\", sep, reggroup_name (group));\n+\t\tfprintf_filtered (file,\n+\t\t\t\t  \"%s%s\", sep, reggroup_name (group));\n \t\tsep = \",\";\n \t      }\n \t  }"
    },
    {
      "sha": "ab45277e3b6b31a343dd5517f99c49e5fd79f557",
      "filename": "gdb/regcache.c",
      "status": "modified",
      "additions": 23,
      "deletions": 23,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7befbbd4c3d50c17fb22d872fd933d8c917aa5ee/gdb/regcache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7befbbd4c3d50c17fb22d872fd933d8c917aa5ee/gdb/regcache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/regcache.c?ref=7befbbd4c3d50c17fb22d872fd933d8c917aa5ee",
      "patch": "@@ -1436,7 +1436,7 @@ register_dump::dump (ui_file *file)\n     {\n       /* Name.  */\n       if (regnum < 0)\n-\tfprintf_unfiltered (file, \" %-10s\", \"Name\");\n+\tfprintf_filtered (file, \" %-10s\", \"Name\");\n       else\n \t{\n \t  const char *p = gdbarch_register_name (m_gdbarch, regnum);\n@@ -1445,31 +1445,31 @@ register_dump::dump (ui_file *file)\n \t    p = \"\";\n \t  else if (p[0] == '\\0')\n \t    p = \"''\";\n-\t  fprintf_unfiltered (file, \" %-10s\", p);\n+\t  fprintf_filtered (file, \" %-10s\", p);\n \t}\n \n       /* Number.  */\n       if (regnum < 0)\n-\tfprintf_unfiltered (file, \" %4s\", \"Nr\");\n+\tfprintf_filtered (file, \" %4s\", \"Nr\");\n       else\n-\tfprintf_unfiltered (file, \" %4d\", regnum);\n+\tfprintf_filtered (file, \" %4d\", regnum);\n \n       /* Relative number.  */\n       if (regnum < 0)\n-\tfprintf_unfiltered (file, \" %4s\", \"Rel\");\n+\tfprintf_filtered (file, \" %4s\", \"Rel\");\n       else if (regnum < gdbarch_num_regs (m_gdbarch))\n-\tfprintf_unfiltered (file, \" %4d\", regnum);\n+\tfprintf_filtered (file, \" %4d\", regnum);\n       else\n-\tfprintf_unfiltered (file, \" %4d\",\n-\t\t\t    (regnum - gdbarch_num_regs (m_gdbarch)));\n+\tfprintf_filtered (file, \" %4d\",\n+\t\t\t  (regnum - gdbarch_num_regs (m_gdbarch)));\n \n       /* Offset.  */\n       if (regnum < 0)\n-\tfprintf_unfiltered (file, \" %6s  \", \"Offset\");\n+\tfprintf_filtered (file, \" %6s  \", \"Offset\");\n       else\n \t{\n-\t  fprintf_unfiltered (file, \" %6ld\",\n-\t\t\t      descr->register_offset[regnum]);\n+\t  fprintf_filtered (file, \" %6ld\",\n+\t\t\t    descr->register_offset[regnum]);\n \t  if (register_offset != descr->register_offset[regnum]\n \t      || (regnum > 0\n \t\t  && (descr->register_offset[regnum]\n@@ -1479,19 +1479,19 @@ register_dump::dump (ui_file *file)\n \t    {\n \t      if (!footnote_register_offset)\n \t\tfootnote_register_offset = ++footnote_nr;\n-\t      fprintf_unfiltered (file, \"*%d\", footnote_register_offset);\n+\t      fprintf_filtered (file, \"*%d\", footnote_register_offset);\n \t    }\n \t  else\n-\t    fprintf_unfiltered (file, \"  \");\n+\t    fprintf_filtered (file, \"  \");\n \t  register_offset = (descr->register_offset[regnum]\n \t\t\t     + descr->sizeof_register[regnum]);\n \t}\n \n       /* Size.  */\n       if (regnum < 0)\n-\tfprintf_unfiltered (file, \" %5s \", \"Size\");\n+\tfprintf_filtered (file, \" %5s \", \"Size\");\n       else\n-\tfprintf_unfiltered (file, \" %5ld\", descr->sizeof_register[regnum]);\n+\tfprintf_filtered (file, \" %5ld\", descr->sizeof_register[regnum]);\n \n       /* Type.  */\n       {\n@@ -1517,24 +1517,24 @@ register_dump::dump (ui_file *file)\n \t    if (startswith (t, blt))\n \t      t += strlen (blt);\n \t  }\n-\tfprintf_unfiltered (file, \" %-15s\", t);\n+\tfprintf_filtered (file, \" %-15s\", t);\n       }\n \n       /* Leading space always present.  */\n-      fprintf_unfiltered (file, \" \");\n+      fprintf_filtered (file, \" \");\n \n       dump_reg (file, regnum);\n \n-      fprintf_unfiltered (file, \"\\n\");\n+      fprintf_filtered (file, \"\\n\");\n     }\n \n   if (footnote_register_offset)\n-    fprintf_unfiltered (file, \"*%d: Inconsistent register offsets.\\n\",\n-\t\t\tfootnote_register_offset);\n+    fprintf_filtered (file, \"*%d: Inconsistent register offsets.\\n\",\n+\t\t      footnote_register_offset);\n   if (footnote_register_type_name_null)\n-    fprintf_unfiltered (file,\n-\t\t\t\"*%d: Register type's name NULL.\\n\",\n-\t\t\tfootnote_register_type_name_null);\n+    fprintf_filtered (file,\n+\t\t      \"*%d: Register type's name NULL.\\n\",\n+\t\t      footnote_register_type_name_null);\n }\n \n #if GDB_SELF_TEST"
    },
    {
      "sha": "2b612fbd0402ad5530c44cb160a9c26a96b5eba9",
      "filename": "gdb/reggroups.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7befbbd4c3d50c17fb22d872fd933d8c917aa5ee/gdb/reggroups.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7befbbd4c3d50c17fb22d872fd933d8c917aa5ee/gdb/reggroups.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/reggroups.c?ref=7befbbd4c3d50c17fb22d872fd933d8c917aa5ee",
      "patch": "@@ -251,7 +251,7 @@ reggroups_dump (struct gdbarch *gdbarch, struct ui_file *file)\n \t  name = \"Group\";\n \telse\n \t  name = reggroup_name (group);\n-\tfprintf_unfiltered (file, \" %-10s\", name);\n+\tfprintf_filtered (file, \" %-10s\", name);\n       }\n       \n       /* Group type.  */\n@@ -274,13 +274,13 @@ reggroups_dump (struct gdbarch *gdbarch, struct ui_file *file)\n \t\tinternal_error (__FILE__, __LINE__, _(\"bad switch\"));\n \t      }\n \t  }\n-\tfprintf_unfiltered (file, \" %-10s\", type);\n+\tfprintf_filtered (file, \" %-10s\", type);\n       }\n \n       /* Note: If you change this, be sure to also update the\n \t documentation.  */\n       \n-      fprintf_unfiltered (file, \"\\n\");\n+      fprintf_filtered (file, \"\\n\");\n \n       group = reggroup_next (gdbarch, group);\n     }"
    }
  ]
}