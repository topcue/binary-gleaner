{
  "sha": "496afd17055aeb7d8f45e01715c475664f2b73bd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDk2YWZkMTcwNTVhZWI3ZDhmNDVlMDE3MTVjNDc1NjY0ZjJiNzNiZA==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-09-12T12:37:30Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-09-12T12:37:43Z"
    },
    "message": "elf: Add -z unique-symbol to avoid duplicated local symbol names\n\nThe symbol string table in the .symtab section is optional and cosmetic.\nThe contents of the .symtab section have no impact on run-time execution.\nThe symbol names in the symbol string table help distinguish addresses at\ndifferent locations.  Add a linker option, -z unique-symbol, to avoid\nduplicated local symbol names in the symbol string table.\n\nThis feature was well received by the livepatch maintainers.  It not only\nsolves the duplicated local symbol name problem, but also would allow\nlivepatch to more precisely locate duplicate symbols in general for\npatching.\n\nbfd/\n\n\tPR ld/26391\n\t* elflink.c (elf_final_link_info): Add local_hash_table.\n\t(local_hash_entry): New.\n\t(local_hash_newfunc): Likewise.\n\t(elf_link_output_symstrtab): Append \".COUNT\" to duplicated local\n\tsymbols.\n\t(bfd_elf_final_link): Initialize and free local_hash_table for\n\t\"-z unique-symbol\".\n\ninclude/\n\n\tPR ld/26391\n\t* bfdlink.h (bfd_link_info): Add unique_symbol.\n\nld/\n\n\tPR ld/26391\n\t* NEWS: Mention \"-z unique-symbol\".\n\t* emultempl/elf.em (gld${EMULATION_NAME}_handle_option): Handle\n\t\"-z unique-symbol\" and \"-z nounique-symbol\".\n\t* ld.texi: Document \"-z unique-symbol\" and \"-z nounique-symbol\".\n\t* lexsup.c (elf_static_list_options): Add \"-z unique-symbol\" and\n\t\"-z nounique-symbol\".\n\t* testsuite/ld-elf/elf.exp: Add PR ld/26391 tests.\n\t* testsuite/ld-elf/pr26391.nd: New file.\n\t* testsuite/ld-elf/pr26391.out: Likewise.\n\t* testsuite/ld-elf/pr26391a.c: Likewise.\n\t* testsuite/ld-elf/pr26391b.c: Likewise.\n\t* testsuite/ld-elf/pr26391c.c: Likewise.\n\t* testsuite/ld-elf/pr26391d.c: Likewise.",
    "tree": {
      "sha": "221e0db337f288cbced1e5e4189463c23733a1a1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/221e0db337f288cbced1e5e4189463c23733a1a1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/496afd17055aeb7d8f45e01715c475664f2b73bd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/496afd17055aeb7d8f45e01715c475664f2b73bd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/496afd17055aeb7d8f45e01715c475664f2b73bd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/496afd17055aeb7d8f45e01715c475664f2b73bd/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e71774ed24cc6890285b174cb95caf79a7622466",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e71774ed24cc6890285b174cb95caf79a7622466",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e71774ed24cc6890285b174cb95caf79a7622466"
    }
  ],
  "stats": {
    "total": 447,
    "additions": 406,
    "deletions": 41
  },
  "files": [
    {
      "sha": "4f0faa5c3ae98e76d72f84bf56f6a348ec77a635",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/496afd17055aeb7d8f45e01715c475664f2b73bd/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/496afd17055aeb7d8f45e01715c475664f2b73bd/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=496afd17055aeb7d8f45e01715c475664f2b73bd",
      "patch": "@@ -1,3 +1,14 @@\n+2020-09-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR ld/26391\n+\t* elflink.c (elf_final_link_info): Add local_hash_table.\n+\t(local_hash_entry): New.\n+\t(local_hash_newfunc): Likewise.\n+\t(elf_link_output_symstrtab): Append \".COUNT\" to duplicated local\n+\tsymbols.\n+\t(bfd_elf_final_link): Initialize and free local_hash_table for\n+\t\"-z unique-symbol\".\n+\n 2020-09-10  Siddhesh Poyarekar  <siddesh.poyarekar@arm.com>\n \n \t* elfnn-aarch64.c (elfNN_aarch64_final_link_relocate): Revert"
    },
    {
      "sha": "b6937293e8fb0894977f7901213955edc58d426b",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 166,
      "deletions": 41,
      "changes": 207,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/496afd17055aeb7d8f45e01715c475664f2b73bd/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/496afd17055aeb7d8f45e01715c475664f2b73bd/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=496afd17055aeb7d8f45e01715c475664f2b73bd",
      "patch": "@@ -8401,8 +8401,49 @@ struct elf_final_link_info\n   Elf_External_Sym_Shndx *symshndxbuf;\n   /* Number of STT_FILE syms seen.  */\n   size_t filesym_count;\n+  /* Local symbol hash table.  */\n+  struct bfd_hash_table local_hash_table;\n };\n \n+struct local_hash_entry\n+{\n+  /* Base hash table entry structure.  */\n+  struct bfd_hash_entry root;\n+  /* Size of the local symbol name.  */\n+  size_t size;\n+  /* Number of the duplicated local symbol names.  */\n+  long count;\n+};\n+\n+/* Create an entry in the local symbol hash table.  */\n+\n+static struct bfd_hash_entry *\n+local_hash_newfunc (struct bfd_hash_entry *entry,\n+\t\t    struct bfd_hash_table *table,\n+\t\t    const char *string)\n+{\n+\n+  /* Allocate the structure if it has not already been allocated by a\n+     subclass.  */\n+  if (entry == NULL)\n+    {\n+      entry = bfd_hash_allocate (table,\n+\t\t\t\t sizeof (struct local_hash_entry));\n+      if (entry == NULL)\n+        return entry;\n+    }\n+\n+  /* Call the allocation method of the superclass.  */\n+  entry = bfd_hash_newfunc (entry, table, string);\n+  if (entry != NULL)\n+    {\n+      ((struct local_hash_entry *) entry)->count = 0;\n+      ((struct local_hash_entry *) entry)->size = 0;\n+    }\n+\n+  return entry;\n+}\n+\n /* This struct is used to pass information to elf_link_output_extsym.  */\n \n struct elf_outext_info\n@@ -9666,23 +9707,66 @@ elf_link_output_symstrtab (struct elf_final_link_info *flinfo,\n       /* Call _bfd_elf_strtab_offset after _bfd_elf_strtab_finalize\n \t to get the final offset for st_name.  */\n       char *versioned_name = (char *) name;\n-      if (h != NULL && h->versioned == versioned && h->def_dynamic)\n-\t{\n-\t  /* Keep only one '@' for versioned symbols defined in shared\n-\t     objects.  */\n-\t  char *version = strrchr (name, ELF_VER_CHR);\n-\t  char *base_end = strchr (name, ELF_VER_CHR);\n-\t  if (version != base_end)\n-\t    {\n-\t      size_t base_len;\n-\t      size_t len = strlen (name);\n-\t      versioned_name = bfd_alloc (flinfo->output_bfd, len);\n-\t      if (versioned_name == NULL)\n+      if (h != NULL)\n+\t{\n+\t  if (h->versioned == versioned && h->def_dynamic)\n+\t    {\n+\t      /* Keep only one '@' for versioned symbols defined in\n+\t         shared objects.  */\n+\t      char *version = strrchr (name, ELF_VER_CHR);\n+\t      char *base_end = strchr (name, ELF_VER_CHR);\n+\t      if (version != base_end)\n+\t\t{\n+\t\t  size_t base_len;\n+\t\t  size_t len = strlen (name);\n+\t\t  versioned_name = bfd_alloc (flinfo->output_bfd, len);\n+\t\t  if (versioned_name == NULL)\n+\t\t    return 0;\n+\t\t  base_len = base_end - name;\n+\t\t  memcpy (versioned_name, name, base_len);\n+\t\t  memcpy (versioned_name + base_len, version,\n+\t\t\t  len - base_len);\n+\t\t}\n+\t    }\n+\t}\n+      else if (flinfo->info->unique_symbol\n+\t       && ELF_ST_BIND (elfsym->st_info) == STB_LOCAL)\n+\t{\n+\t  struct local_hash_entry *lh;\n+\t  switch (ELF_ST_TYPE (elfsym->st_info))\n+\t    {\n+\t    case STT_FILE:\n+\t    case STT_SECTION:\n+\t      break;\n+\t    default:\n+\t      lh = (struct local_hash_entry *) bfd_hash_lookup\n+\t\t     (&flinfo->local_hash_table, name, TRUE, FALSE);\n+\t      if (lh == NULL)\n \t\treturn 0;\n-\t      base_len = base_end - name;\n-\t      memcpy (versioned_name, name, base_len);\n-\t      memcpy (versioned_name + base_len, version,\n-\t\t      len - base_len);\n+\t      if (lh->count)\n+\t\t{\n+\t\t  /* Append \".COUNT\" to duplicated local symbols.  */\n+\t\t  size_t count_len;\n+\t\t  size_t base_len = lh->size;\n+\t\t  char buf[30];\n+\t\t  sprintf (buf, \"%lx\", lh->count);\n+\t\t  if (!base_len)\n+\t\t    {\n+\t\t      base_len = strlen (name);\n+\t\t      lh->size = base_len;\n+\t\t    }\n+\t\t  count_len = strlen (buf);\n+\t\t  versioned_name = bfd_alloc (flinfo->output_bfd,\n+\t\t\t\t\t      base_len + count_len + 2);\n+\t\t  if (versioned_name == NULL)\n+\t\t    return 0;\n+\t\t  memcpy (versioned_name, name, base_len);\n+\t\t  versioned_name[base_len] = '.';\n+\t\t  memcpy (versioned_name + base_len + 1, buf,\n+\t\t\t  count_len + 1);\n+\t\t}\n+\t      lh->count++;\n+\t      break;\n \t    }\n \t}\n       elfsym->st_name\n@@ -11996,6 +12080,7 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n   const char *std_attrs_section;\n   struct elf_link_hash_table *htab = elf_hash_table (info);\n   bfd_boolean sections_removed;\n+  bfd_boolean ret;\n \n   if (!is_elf_hash_table (htab))\n     return FALSE;\n@@ -12009,6 +12094,7 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n   emit_relocs = (bfd_link_relocatable (info)\n \t\t || info->emitrelocations);\n \n+  memset (&flinfo, 0, sizeof (flinfo));\n   flinfo.info = info;\n   flinfo.output_bfd = abfd;\n   flinfo.symstrtab = _bfd_elf_strtab_init ();\n@@ -12028,16 +12114,11 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n       /* Note that it is OK if symver_sec is NULL.  */\n     }\n \n-  flinfo.contents = NULL;\n-  flinfo.external_relocs = NULL;\n-  flinfo.internal_relocs = NULL;\n-  flinfo.external_syms = NULL;\n-  flinfo.locsym_shndx = NULL;\n-  flinfo.internal_syms = NULL;\n-  flinfo.indices = NULL;\n-  flinfo.sections = NULL;\n-  flinfo.symshndxbuf = NULL;\n-  flinfo.filesym_count = 0;\n+  if (info->unique_symbol\n+      && !bfd_hash_table_init (&flinfo.local_hash_table,\n+\t\t\t       local_hash_newfunc,\n+\t\t\t       sizeof (struct local_hash_entry)))\n+    return FALSE;\n \n   /* The object attributes have been merged.  Remove the input\n      sections from the link, and set the contents of the output\n@@ -12572,6 +12653,8 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n \t  }\n     }\n \n+  ret = TRUE;\n+\n   /* Output any global symbols that got converted to local in a\n      version script or due to symbol visibility.  We do this in a\n      separate step since ELF requires all local symbols to appear\n@@ -12584,7 +12667,10 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n   eoinfo.file_sym_done = FALSE;\n   bfd_hash_traverse (&info->hash->table, elf_link_output_extsym, &eoinfo);\n   if (eoinfo.failed)\n-    return FALSE;\n+    {\n+      ret = FALSE;\n+      goto return_local_hash_table;\n+    }\n \n   /* If backend needs to output some local symbols not present in the hash\n      table, do it now.  */\n@@ -12598,7 +12684,10 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n       if (! ((*bed->elf_backend_output_arch_local_syms)\n \t     (abfd, info, &flinfo,\n \t      (out_sym_func) elf_link_output_symstrtab)))\n-\treturn FALSE;\n+\t{\n+\t  ret = FALSE;\n+\t  goto return_local_hash_table;\n+\t}\n     }\n \n   /* That wrote out all the local symbols.  Finish up the symbol table\n@@ -12645,7 +12734,10 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n \t      BFD_ASSERT (indx > 0);\n \t      sym.st_shndx = indx;\n \t      if (! check_dynsym (abfd, &sym))\n-\t\treturn FALSE;\n+\t\t{\n+\t\t  ret = FALSE;\n+\t\t  goto return_local_hash_table;\n+\t\t}\n \t      sym.st_value = s->vma;\n \t      dest = dynsym + dynindx * bed->s->sizeof_sym;\n \t      bed->s->swap_symbol_out (abfd, &sym, dest, 0);\n@@ -12677,7 +12769,10 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n \t\t  sym.st_shndx =\n \t\t    elf_section_data (s->output_section)->this_idx;\n \t\t  if (! check_dynsym (abfd, &sym))\n-\t\t    return FALSE;\n+\t\t    {\n+\t\t      ret = FALSE;\n+\t\t      goto return_local_hash_table;\n+\t\t    }\n \t\t  sym.st_value = (s->output_section->vma\n \t\t\t\t  + s->output_offset\n \t\t\t\t  + e->isym.st_value);\n@@ -12695,7 +12790,10 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n   eoinfo.flinfo = &flinfo;\n   bfd_hash_traverse (&info->hash->table, elf_link_output_extsym, &eoinfo);\n   if (eoinfo.failed)\n-    return FALSE;\n+    {\n+      ret = FALSE;\n+      goto return_local_hash_table;\n+    }\n \n   /* If backend needs to output some symbols not present in the hash\n      table, do it now.  */\n@@ -12709,15 +12807,21 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n       if (! ((*bed->elf_backend_output_arch_syms)\n \t     (abfd, info, &flinfo,\n \t      (out_sym_func) elf_link_output_symstrtab)))\n-\treturn FALSE;\n+\t{\n+\t  ret = FALSE;\n+\t  goto return_local_hash_table;\n+\t}\n     }\n \n   /* Finalize the .strtab section.  */\n   _bfd_elf_strtab_finalize (flinfo.symstrtab);\n \n   /* Swap out the .strtab section. */\n   if (!elf_link_swap_symbols_out (&flinfo))\n-    return FALSE;\n+    {\n+      ret = FALSE;\n+      goto return_local_hash_table;\n+    }\n \n   /* Now we know the size of the symtab section.  */\n   if (bfd_get_symcount (abfd) > 0)\n@@ -12744,7 +12848,10 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n \n \t      if (bfd_seek (abfd, symtab_shndx_hdr->sh_offset, SEEK_SET) != 0\n \t\t  || (bfd_bwrite (flinfo.symshndxbuf, amt, abfd) != amt))\n-\t\treturn FALSE;\n+\t\t{\n+\t\t  ret = FALSE;\n+\t\t  goto return_local_hash_table;\n+\t\t}\n \t    }\n \t}\n \n@@ -12766,14 +12873,18 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n \n       if (bfd_seek (abfd, symstrtab_hdr->sh_offset, SEEK_SET) != 0\n \t  || ! _bfd_elf_strtab_emit (abfd, flinfo.symstrtab))\n-\treturn FALSE;\n+\t{\n+\t  ret = FALSE;\n+\t  goto return_local_hash_table;\n+\t}\n     }\n \n   if (info->out_implib_bfd && !elf_output_implib (abfd, info))\n     {\n       _bfd_error_handler (_(\"%pB: failed to generate import library\"),\n \t\t\t  info->out_implib_bfd);\n-      return FALSE;\n+      ret = FALSE;\n+      goto return_local_hash_table;\n     }\n \n   /* Adjust the relocs to have the correct symbol indices.  */\n@@ -12788,10 +12899,16 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n       sort = bed->sort_relocs_p == NULL || (*bed->sort_relocs_p) (o);\n       if (esdo->rel.hdr != NULL\n \t  && !elf_link_adjust_relocs (abfd, o, &esdo->rel, sort, info))\n-\treturn FALSE;\n+\t{\n+\t  ret = FALSE;\n+\t  goto return_local_hash_table;\n+\t}\n       if (esdo->rela.hdr != NULL\n \t  && !elf_link_adjust_relocs (abfd, o, &esdo->rela, sort, info))\n-\treturn FALSE;\n+\t{\n+\t  ret = FALSE;\n+\t  goto return_local_hash_table;\n+\t}\n \n       /* Set the reloc_count field to 0 to prevent write_relocs from\n \t trying to swap the relocs out itself.  */\n@@ -13110,17 +13227,25 @@ bfd_elf_final_link (bfd *abfd, struct bfd_link_info *info)\n     {\n       bfd_byte *contents = (bfd_byte *) bfd_malloc (attr_size);\n       if (contents == NULL)\n-\treturn FALSE;\t/* Bail out and fail.  */\n+\t{\n+\t  /* Bail out and fail.  */\n+\t  ret = FALSE;\n+\t  goto return_local_hash_table;\n+\t}\n       bfd_elf_set_obj_attr_contents (abfd, contents, attr_size);\n       bfd_set_section_contents (abfd, attr_section, contents, 0, attr_size);\n       free (contents);\n     }\n \n-  return TRUE;\n+ return_local_hash_table:\n+  if (info->unique_symbol)\n+    bfd_hash_table_free (&flinfo.local_hash_table);\n+  return ret;\n \n  error_return:\n   elf_final_link_free (abfd, &flinfo);\n-  return FALSE;\n+  ret = FALSE;\n+  goto return_local_hash_table;\n }\n \f\n /* Initialize COOKIE for input bfd ABFD.  */"
    },
    {
      "sha": "38baf59ca4d750b254a931433840175c954e238e",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/496afd17055aeb7d8f45e01715c475664f2b73bd/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/496afd17055aeb7d8f45e01715c475664f2b73bd/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=496afd17055aeb7d8f45e01715c475664f2b73bd",
      "patch": "@@ -1,3 +1,8 @@\n+2020-09-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR ld/26391\n+\t* bfdlink.h (bfd_link_info): Add unique_symbol.\n+\n 2020-09-11  Felix Willgerodt  <felix.willgerodt@intel.com>\n \n \tSync with GCC"
    },
    {
      "sha": "55020e31f454261df862a11a7481f31b1cc910aa",
      "filename": "include/bfdlink.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/496afd17055aeb7d8f45e01715c475664f2b73bd/include/bfdlink.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/496afd17055aeb7d8f45e01715c475664f2b73bd/include/bfdlink.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/bfdlink.h?ref=496afd17055aeb7d8f45e01715c475664f2b73bd",
      "patch": "@@ -523,6 +523,9 @@ struct bfd_link_info\n      the linker.  */\n   unsigned int non_contiguous_regions_warnings : 1;\n \n+  /* TRUE if all symbol names should be unique.  */\n+  unsigned int unique_symbol : 1;\n+\n   /* Char that may appear as the first char of a symbol, but should be\n      skipped (like symbol_leading_char) when looking up symbols in\n      wrap_hash.  Used by PowerPC Linux for 'dot' symbols.  */"
    },
    {
      "sha": "8d63f66c66e62934e044496b8543f0a1a024f464",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=496afd17055aeb7d8f45e01715c475664f2b73bd",
      "patch": "@@ -1,3 +1,20 @@\n+2020-09-12  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR ld/26391\n+\t* NEWS: Mention \"-z unique-symbol\".\n+\t* emultempl/elf.em (gld${EMULATION_NAME}_handle_option): Handle\n+\t\"-z unique-symbol\" and \"-z nounique-symbol\".\n+\t* ld.texi: Document \"-z unique-symbol\" and \"-z nounique-symbol\".\n+\t* lexsup.c (elf_static_list_options): Add \"-z unique-symbol\" and\n+\t\"-z nounique-symbol\".\n+\t* testsuite/ld-elf/elf.exp: Add PR ld/26391 tests.\n+\t* testsuite/ld-elf/pr26391.nd: New file.\n+\t* testsuite/ld-elf/pr26391.out: Likewise.\n+\t* testsuite/ld-elf/pr26391a.c: Likewise.\n+\t* testsuite/ld-elf/pr26391b.c: Likewise.\n+\t* testsuite/ld-elf/pr26391c.c: Likewise.\n+\t* testsuite/ld-elf/pr26391d.c: Likewise.\n+\n 2020-09-11  Jeremy Drake  <sourceware-bugzilla@jdrake.com>\n \n \tPR 26588"
    },
    {
      "sha": "e4ae43b257d2297462c527a2b2328d70fa8ce8c5",
      "filename": "ld/NEWS",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/NEWS?ref=496afd17055aeb7d8f45e01715c475664f2b73bd",
      "patch": "@@ -1,5 +1,7 @@\n -*- text -*-\n \n+* Add -z unique-symbol to avoid duplicated local symbol names.\n+\n * The creation of PE format DLLs now defaults to using a more secure set of DLL\n   characteristics.\n "
    },
    {
      "sha": "59eed707ea7d6347d6df713b4ec4972e3f831168",
      "filename": "ld/emultempl/elf.em",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/emultempl/elf.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/emultempl/elf.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/elf.em?ref=496afd17055aeb7d8f45e01715c475664f2b73bd",
      "patch": "@@ -751,6 +751,10 @@ fragment <<EOF\n \t  link_info.noexecstack = TRUE;\n \t  link_info.execstack = FALSE;\n \t}\n+      else if (strcmp (optarg, \"unique-symbol\") == 0)\n+\tlink_info.unique_symbol = TRUE;\n+      else if (strcmp (optarg, \"nounique-symbol\") == 0)\n+\tlink_info.unique_symbol = FALSE;\n       else if (strcmp (optarg, \"globalaudit\") == 0)\n \t{\n \t  link_info.flags_1 |= DF_1_GLOBAUDIT;"
    },
    {
      "sha": "ee592df6c244da5a331d0a8d9307e37e01bebca3",
      "filename": "ld/ld.texi",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/ld.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/ld.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ld.texi?ref=496afd17055aeb7d8f45e01715c475664f2b73bd",
      "patch": "@@ -1378,6 +1378,12 @@ specifies a memory segment that should contain only instructions and must\n be in wholly disjoint pages from any other data.  Don't create separate\n code @code{PT_LOAD} segment if @samp{noseparate-code} is used.\n \n+@item unique-symbol\n+@itemx nounique-symbol\n+Avoid duplicated local symbol names in the symbol string table.  Append\n+\".@code{number}\" to duplicated local symbol names if @samp{unique-symbol}\n+is used.  @option{nounique-symbol} is the default.\n+\n @item shstk\n Generate GNU_PROPERTY_X86_FEATURE_1_SHSTK in .note.gnu.property section\n to indicate compatibility with Intel Shadow Stack.  Supported for"
    },
    {
      "sha": "b8f066745f374cb03a3d74c32eef340df0da9a0b",
      "filename": "ld/lexsup.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/lexsup.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/lexsup.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/lexsup.c?ref=496afd17055aeb7d8f45e01715c475664f2b73bd",
      "patch": "@@ -2050,6 +2050,10 @@ elf_static_list_options (FILE *file)\n   fprintf (file, _(\"\\\n   -z noexecstack              Mark executable as not requiring executable stack\\n\"));\n   fprintf (file, _(\"\\\n+  -z unique-symbol            Avoid duplicated local symbol names\\n\"));\n+  fprintf (file, _(\"\\\n+  -z nounique-symbol          Keep duplicated local symbol names (default)\\n\"));\n+  fprintf (file, _(\"\\\n   -z globalaudit              Mark executable requiring global auditing\\n\"));\n }\n "
    },
    {
      "sha": "f2ff0397c76148aea83012bf9198e74ecdae937b",
      "filename": "ld/testsuite/ld-elf/elf.exp",
      "status": "modified",
      "additions": 121,
      "deletions": 0,
      "changes": 121,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/testsuite/ld-elf/elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/testsuite/ld-elf/elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/elf.exp?ref=496afd17055aeb7d8f45e01715c475664f2b73bd",
      "patch": "@@ -359,4 +359,125 @@ if { [istarget *-*-linux*]\n \n run_ld_link_exec_tests $array_tests_static $xfails\n \n+run_cc_link_tests [list \\\n+    [list \\\n+\t\"Build pr26391-1\" \\\n+\t\"-Wl,-z,unique-symbol\" \\\n+\t\"-fno-function-sections\" \\\n+\t{pr26391a.c pr26391b.c pr26391c.c pr26391d.c} \\\n+\t{{nm \"\" pr26391.nd}} \\\n+\t\"pr26391-1\" \\\n+    ] \\\n+    [list \\\n+\t\"Build pr26391-2\" \\\n+\t\"-Wl,-z,unique-symbol\" \\\n+\t\"-ffunction-sections\" \\\n+\t{pr26391a.c pr26391b.c pr26391c.c pr26391d.c} \\\n+\t{{nm \"\" pr26391.nd}} \\\n+\t\"pr26391-2\" \\\n+    ] \\\n+    [list \\\n+\t\"Build pr26391-3\" \\\n+\t\"-Wl,-z,unique-symbol,--emit-relocs\" \\\n+\t\"-fno-function-sections\" \\\n+\t{pr26391a.c pr26391b.c pr26391c.c pr26391d.c} \\\n+\t{{nm \"\" pr26391.nd}} \\\n+\t\"pr26391-3\" \\\n+    ] \\\n+    [list \\\n+\t\"Build pr26391-4\" \\\n+\t\"-Wl,-z,unique-symbol,--emit-relocs\" \\\n+\t\"-ffunction-sections\" \\\n+\t{pr26391a.c pr26391b.c pr26391c.c pr26391d.c} \\\n+\t{{nm \"\" pr26391.nd}} \\\n+\t\"pr26391-4\" \\\n+    ] \\\n+]\n+\n+run_ld_link_tests [list \\\n+    [list \\\n+\t\"Build pr26391-5.o\" \\\n+\t\"-z unique-symbol -r\" \\\n+\t\"\" \\\n+\t\"\" \\\n+\t{pr26391a.c pr26391b.c pr26391c.c pr26391d.c} \\\n+\t{{nm \"\" pr26391.nd}} \\\n+\t\"pr26391-5.o\" \\\n+\t\"-fno-function-sections\" \\\n+    ] \\\n+    [list \\\n+\t\"Build pr26391-6.o\" \\\n+\t\"-z unique-symbol -r\" \\\n+\t\"\" \\\n+\t\"\" \\\n+\t{pr26391a.c pr26391b.c pr26391c.c pr26391d.c} \\\n+\t{{nm \"\" pr26391.nd}} \\\n+\t\"pr26391-6.o\" \\\n+\t\"-ffunction-sections\" \\\n+    ] \\\n+]\n+\n+run_ld_link_exec_tests [list \\\n+    [list \\\n+\t\"Run pr26391-1\" \\\n+\t\"-Wl,-z,unique-symbol\" \\\n+\t\"\" \\\n+\t{pr26391a.c pr26391b.c pr26391c.c pr26391d.c} \\\n+\t\"pr26391-1\" \\\n+\t\"pr26391.out\" \\\n+\t\"-fno-function-sections\" \\\n+    ] \\\n+    [list \\\n+\t\"Run pr26391-2\" \\\n+\t\"-Wl,-z,unique-symbol\" \\\n+\t\"\" \\\n+\t{pr26391a.c pr26391b.c pr26391c.c pr26391d.c} \\\n+\t\"pr26391-2\" \\\n+\t\"pr26391.out\" \\\n+\t\"-ffunction-sections\" \\\n+    ] \\\n+    [list \\\n+\t\"Run pr26391-3\" \\\n+\t\"-Wl,-z,unique-symbol,--emit-relocs\" \\\n+\t\"\" \\\n+\t{pr26391a.c pr26391b.c pr26391c.c pr26391d.c} \\\n+\t\"pr26391-3\" \\\n+\t\"pr26391.out\" \\\n+\t\"-fno-function-sections\" \\\n+    ] \\\n+    [list \\\n+\t\"Run pr26391-4\" \\\n+\t\"-Wl,-z,unique-symbol,--emit-relocs\" \\\n+\t\"\" \\\n+\t{pr26391a.c pr26391b.c pr26391c.c pr26391d.c} \\\n+\t\"pr26391-4\" \\\n+\t\"pr26391.out\" \\\n+\t\"-ffunction-sections\" \\\n+    ] \\\n+    [list \\\n+\t\"Run pr26391-5\" \\\n+\t\"-Wl,-z,unique-symbol\" \\\n+\t\"\" \\\n+\t{dummy.c} \\\n+\t\"pr26391-5\" \\\n+\t\"pr26391.out\" \\\n+\t\"\" \\\n+\t\"c\" \\\n+\t\"\" \\\n+\t\"tmpdir/pr26391-5.o\" \\\n+    ] \\\n+    [list \\\n+\t\"Run pr26391-6\" \\\n+\t\"-Wl,-z,unique-symbol\" \\\n+\t\"\" \\\n+\t{dummy.c} \\\n+\t\"pr26391-6\" \\\n+\t\"pr26391.out\" \\\n+\t\"\" \\\n+\t\"c\" \\\n+\t\"\" \\\n+\t\"tmpdir/pr26391-6.o\" \\\n+    ] \\\n+]\n+\n catch \"exec rm -f tmpdir/preinit tmpdir/init tmpdir/fini tmpdir/init-mixed\" status"
    },
    {
      "sha": "8dd48d921fbcdaf6dbcc4d4fbb4b209dd2c720fa",
      "filename": "ld/testsuite/ld-elf/pr26391.nd",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/testsuite/ld-elf/pr26391.nd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/testsuite/ld-elf/pr26391.nd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr26391.nd?ref=496afd17055aeb7d8f45e01715c475664f2b73bd",
      "patch": "@@ -0,0 +1,7 @@\n+#...\n+[0-9a-z]+ t _?bar\n+#...\n+[0-9a-z]+ t _?bar.1\n+#...\n+[0-9a-z]+ t _?bar.2\n+#pass"
    },
    {
      "sha": "73654eeb01ffff400ed93d6f8a3d125d4cf18aa0",
      "filename": "ld/testsuite/ld-elf/pr26391.out",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/testsuite/ld-elf/pr26391.out",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/testsuite/ld-elf/pr26391.out",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr26391.out?ref=496afd17055aeb7d8f45e01715c475664f2b73bd",
      "patch": "@@ -0,0 +1,3 @@\n+bar 1\n+bar 2\n+bar 3"
    },
    {
      "sha": "7356d9d5c3c25c3b62778e6897ea35cb1f74d8a1",
      "filename": "ld/testsuite/ld-elf/pr26391a.c",
      "status": "added",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/testsuite/ld-elf/pr26391a.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/testsuite/ld-elf/pr26391a.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr26391a.c?ref=496afd17055aeb7d8f45e01715c475664f2b73bd",
      "patch": "@@ -0,0 +1,18 @@\n+typedef void (*func_p) (void);\n+\n+extern func_p bar1_p (void);\n+extern func_p bar2_p (void);\n+extern func_p bar3_p (void);\n+\n+int\n+main ()\n+{\n+  func_p f;\n+  f = bar1_p ();\n+  f ();\n+  f = bar2_p ();\n+  f ();\n+  f = bar3_p ();\n+  f ();\n+  return 0;\n+}"
    },
    {
      "sha": "8f716a52beb376a4b8c8b87bed447c6960042352",
      "filename": "ld/testsuite/ld-elf/pr26391b.c",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/testsuite/ld-elf/pr26391b.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/testsuite/ld-elf/pr26391b.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr26391b.c?ref=496afd17055aeb7d8f45e01715c475664f2b73bd",
      "patch": "@@ -0,0 +1,13 @@\n+#include <stdio.h>\n+\n+static void\n+bar (void)\n+{\n+  printf (\"bar 1\\n\");\n+}\n+\n+void *\n+bar1_p (void)\n+{\n+  return bar;\n+}"
    },
    {
      "sha": "e5bf1c108d2405274639710ffd181573a3f6b363",
      "filename": "ld/testsuite/ld-elf/pr26391c.c",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/testsuite/ld-elf/pr26391c.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/testsuite/ld-elf/pr26391c.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr26391c.c?ref=496afd17055aeb7d8f45e01715c475664f2b73bd",
      "patch": "@@ -0,0 +1,13 @@\n+#include <stdio.h>\n+\n+static void\n+bar (void)\n+{\n+  printf (\"bar 2\\n\");\n+}\n+\n+void *\n+bar2_p (void)\n+{\n+  return bar;\n+}"
    },
    {
      "sha": "6e388f8995ecaf0def75d7c60a1f51ded1dfbc60",
      "filename": "ld/testsuite/ld-elf/pr26391d.c",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/testsuite/ld-elf/pr26391d.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/496afd17055aeb7d8f45e01715c475664f2b73bd/ld/testsuite/ld-elf/pr26391d.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/pr26391d.c?ref=496afd17055aeb7d8f45e01715c475664f2b73bd",
      "patch": "@@ -0,0 +1,13 @@\n+#include <stdio.h>\n+\n+static void\n+bar (void)\n+{\n+  printf (\"bar 3\\n\");\n+}\n+\n+void *\n+bar3_p (void)\n+{\n+  return bar;\n+}"
    }
  ]
}