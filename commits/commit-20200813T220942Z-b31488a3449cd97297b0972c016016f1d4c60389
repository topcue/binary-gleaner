{
  "sha": "b31488a3449cd97297b0972c016016f1d4c60389",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjMxNDg4YTM0NDljZDk3Mjk3YjA5NzJjMDE2MDE2ZjFkNGM2MDM4OQ==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-07-28T15:29:35Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-08-13T22:09:42Z"
    },
    "message": "gdb: Implement native dumpcore function\n\nAdd new API for systems with native kernel support for dumping\na process on demand. Wire it into the gdb's gcore functionality.\n\ngdb/ChangeLog:\n\n       * target.h (supports_dumpcore, dumpcore): New\n       function declarations.\n       * target.c (supports_dumpcore, dumpcore): New\n       functions.\n       * target-delegates.c: Rebuild.\n       * gcore.c (gcore_command): Use target_supports_dumpcore ()\n       and target_dumpcore ().",
    "tree": {
      "sha": "a9707af272eb93896d792df09298e32c57cbcc45",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a9707af272eb93896d792df09298e32c57cbcc45"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b31488a3449cd97297b0972c016016f1d4c60389",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b31488a3449cd97297b0972c016016f1d4c60389",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b31488a3449cd97297b0972c016016f1d4c60389",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b31488a3449cd97297b0972c016016f1d4c60389/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "002a3166d359a759b6cddfe4571d1da5b4f96dce",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/002a3166d359a759b6cddfe4571d1da5b4f96dce",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/002a3166d359a759b6cddfe4571d1da5b4f96dce"
    }
  ],
  "stats": {
    "total": 99,
    "additions": 91,
    "deletions": 8
  },
  "files": [
    {
      "sha": "038d11702ab194e2f2e6fd57a5d1c662326c740c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31488a3449cd97297b0972c016016f1d4c60389/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31488a3449cd97297b0972c016016f1d4c60389/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b31488a3449cd97297b0972c016016f1d4c60389",
      "patch": "@@ -1,3 +1,13 @@\n+2020-08-13  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* target.h (supports_dumpcore, dumpcore): New\n+\tfunction declarations.\n+\t* target.c (supports_dumpcore, dumpcore): New\n+\tfunctions.\n+\t* target-delegates.c: Rebuild.\n+\t* gcore.c (gcore_command): Use target_supports_dumpcore ()\n+\tand target_dumpcore ().\n+\n 2020-08-13  Aaron Merey  <amerey@redhat.com>\n \n \t* debuginfod-support.c: Replace global variables with user_data."
    },
    {
      "sha": "d0e36b1a70816b8ff7c47034e23c9dc1f7772f0f",
      "filename": "gdb/gcore.c",
      "status": "modified",
      "additions": 13,
      "deletions": 8,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31488a3449cd97297b0972c016016f1d4c60389/gdb/gcore.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31488a3449cd97297b0972c016016f1d4c60389/gdb/gcore.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gcore.c?ref=b31488a3449cd97297b0972c016016f1d4c60389",
      "patch": "@@ -145,17 +145,22 @@ gcore_command (const char *args, int from_tty)\n \t\t      \"Opening corefile '%s' for output.\\n\",\n \t\t      corefilename.get ());\n \n-  /* Open the output file.  */\n-  gdb_bfd_ref_ptr obfd (create_gcore_bfd (corefilename.get ()));\n+  if (target_supports_dumpcore ())\n+    target_dumpcore (corefilename.get ());\n+  else\n+    {\n+      /* Open the output file.  */\n+      gdb_bfd_ref_ptr obfd (create_gcore_bfd (corefilename.get ()));\n \n-  /* Arrange to unlink the file on failure.  */\n-  gdb::unlinker unlink_file (corefilename.get ());\n+      /* Arrange to unlink the file on failure.  */\n+      gdb::unlinker unlink_file (corefilename.get ());\n \n-  /* Call worker function.  */\n-  write_gcore_file (obfd.get ());\n+      /* Call worker function.  */\n+      write_gcore_file (obfd.get ());\n \n-  /* Succeeded.  */\n-  unlink_file.keep ();\n+      /* Succeeded.  */\n+      unlink_file.keep ();\n+    }\n \n   fprintf_filtered (gdb_stdout, \"Saved corefile %s\\n\", corefilename.get ());\n }"
    },
    {
      "sha": "15f441edf28cb24921e3924a065dabd1aaccb17b",
      "filename": "gdb/target-delegates.c",
      "status": "modified",
      "additions": 50,
      "deletions": 0,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31488a3449cd97297b0972c016016f1d4c60389/gdb/target-delegates.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31488a3449cd97297b0972c016016f1d4c60389/gdb/target-delegates.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-delegates.c?ref=b31488a3449cd97297b0972c016016f1d4c60389",
      "patch": "@@ -108,6 +108,8 @@ struct dummy_target : public target_ops\n   bool supports_disable_randomization () override;\n   bool supports_string_tracing () override;\n   bool supports_evaluation_of_breakpoint_conditions () override;\n+  bool supports_dumpcore () override;\n+  void dumpcore (const char *arg0) override;\n   bool can_run_breakpoint_commands () override;\n   struct gdbarch *thread_architecture (ptid_t arg0) override;\n   struct address_space *thread_address_space (ptid_t arg0) override;\n@@ -277,6 +279,8 @@ struct debug_target : public target_ops\n   bool supports_disable_randomization () override;\n   bool supports_string_tracing () override;\n   bool supports_evaluation_of_breakpoint_conditions () override;\n+  bool supports_dumpcore () override;\n+  void dumpcore (const char *arg0) override;\n   bool can_run_breakpoint_commands () override;\n   struct gdbarch *thread_architecture (ptid_t arg0) override;\n   struct address_space *thread_address_space (ptid_t arg0) override;\n@@ -2825,6 +2829,52 @@ debug_target::supports_evaluation_of_breakpoint_conditions ()\n   return result;\n }\n \n+bool\n+target_ops::supports_dumpcore ()\n+{\n+  return this->beneath ()->supports_dumpcore ();\n+}\n+\n+bool\n+dummy_target::supports_dumpcore ()\n+{\n+  return false;\n+}\n+\n+bool\n+debug_target::supports_dumpcore ()\n+{\n+  bool result;\n+  fprintf_unfiltered (gdb_stdlog, \"-> %s->supports_dumpcore (...)\\n\", this->beneath ()->shortname ());\n+  result = this->beneath ()->supports_dumpcore ();\n+  fprintf_unfiltered (gdb_stdlog, \"<- %s->supports_dumpcore (\", this->beneath ()->shortname ());\n+  fputs_unfiltered (\") = \", gdb_stdlog);\n+  target_debug_print_bool (result);\n+  fputs_unfiltered (\"\\n\", gdb_stdlog);\n+  return result;\n+}\n+\n+void\n+target_ops::dumpcore (const char *arg0)\n+{\n+  this->beneath ()->dumpcore (arg0);\n+}\n+\n+void\n+dummy_target::dumpcore (const char *arg0)\n+{\n+}\n+\n+void\n+debug_target::dumpcore (const char *arg0)\n+{\n+  fprintf_unfiltered (gdb_stdlog, \"-> %s->dumpcore (...)\\n\", this->beneath ()->shortname ());\n+  this->beneath ()->dumpcore (arg0);\n+  fprintf_unfiltered (gdb_stdlog, \"<- %s->dumpcore (\", this->beneath ()->shortname ());\n+  target_debug_print_const_char_p (arg0);\n+  fputs_unfiltered (\")\\n\", gdb_stdlog);\n+}\n+\n bool\n target_ops::can_run_breakpoint_commands ()\n {"
    },
    {
      "sha": "71d575f2917673b9d924cb60aa1b5c0dfc9e33e5",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b31488a3449cd97297b0972c016016f1d4c60389/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b31488a3449cd97297b0972c016016f1d4c60389/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=b31488a3449cd97297b0972c016016f1d4c60389",
      "patch": "@@ -881,6 +881,14 @@ struct target_ops\n     virtual bool supports_evaluation_of_breakpoint_conditions ()\n       TARGET_DEFAULT_RETURN (false);\n \n+    /* Does this target support native dumpcore API?  */\n+    virtual bool supports_dumpcore ()\n+      TARGET_DEFAULT_RETURN (false);\n+\n+    /* Generate the core file with native target API.  */\n+    virtual void dumpcore (const char *filename)\n+      TARGET_DEFAULT_IGNORE ();\n+\n     /* Does this target support evaluation of breakpoint commands on its\n        end?  */\n     virtual bool can_run_breakpoint_commands ()\n@@ -1499,6 +1507,16 @@ int target_supports_disable_randomization (void);\n #define target_supports_evaluation_of_breakpoint_conditions() \\\n   (current_top_target ()->supports_evaluation_of_breakpoint_conditions) ()\n \n+/* Does this target support dumpcore API?  */\n+\n+#define target_supports_dumpcore() \\\n+  (current_top_target ()->supports_dumpcore) ()\n+\n+/* Generate the core file with target API.  */\n+\n+#define target_dumpcore(x) \\\n+  (current_top_target ()->dumpcore (x))\n+\n /* Returns true if this target can handle breakpoint commands\n    on its end.  */\n "
    }
  ]
}