{
  "sha": "09db4332c6017ab57cd136788c48e5a81e3b9399",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDlkYjQzMzJjNjAxN2FiNTdjZDEzNjc4OGM0OGU1YTgxZTNiOTM5OQ==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-06-14T21:28:26Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-06-14T21:55:48Z"
    },
    "message": "fbsd nat: Disable address space randomization when requested.\n\nUse procctl(2) with PROC_ASLR_CTL to disable address space\nrandomization in the current gdb process before forking a child\nprocess for a new inferior when address space randomization is\ndisabled.\n\ngdb/ChangeLog:\n\n\t* configure.ac: Check for <sys/procctl.h>.\n\t* config.in, configure: Regenerate.\n\t* fbsd-nat.c: Include <sys/procctl.h> if present.\n\t[PROC_ASLR_CTL] (maybe_disable_address_space_randomization): New.\n\t(fbsd_nat_target::create_inferior)\n\t(fbsd_nat_target::supports_disable_randomization): New.\n\t* fbsd-nat.h (fbsd_nat_target::create_inferior)\n\t(fbsd_nat_target::supports_disable_randomization): New.",
    "tree": {
      "sha": "d0c6e194cab1c0161bd3c4b94f8980a6b5eb5614",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d0c6e194cab1c0161bd3c4b94f8980a6b5eb5614"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/09db4332c6017ab57cd136788c48e5a81e3b9399",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/09db4332c6017ab57cd136788c48e5a81e3b9399",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/09db4332c6017ab57cd136788c48e5a81e3b9399",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/09db4332c6017ab57cd136788c48e5a81e3b9399/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c9923e71ff57ce6e824833560aae59057c6f5783",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c9923e71ff57ce6e824833560aae59057c6f5783",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c9923e71ff57ce6e824833560aae59057c6f5783"
    }
  ],
  "stats": {
    "total": 98,
    "additions": 96,
    "deletions": 2
  },
  "files": [
    {
      "sha": "7f46c4a64822bf5ef239d74975b1b3bd6c2f6e1f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/09db4332c6017ab57cd136788c48e5a81e3b9399/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/09db4332c6017ab57cd136788c48e5a81e3b9399/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=09db4332c6017ab57cd136788c48e5a81e3b9399",
      "patch": "@@ -1,3 +1,14 @@\n+2021-06-14  John Baldwin  <jhb@FreeBSD.org>\n+\n+\t* configure.ac: Check for <sys/procctl.h>.\n+\t* config.in, configure: Regenerate.\n+\t* fbsd-nat.c: Include <sys/procctl.h> if present.\n+\t[PROC_ASLR_CTL] (maybe_disable_address_space_randomization): New.\n+\t(fbsd_nat_target::create_inferior)\n+\t(fbsd_nat_target::supports_disable_randomization): New.\n+\t* fbsd-nat.h (fbsd_nat_target::create_inferior)\n+\t(fbsd_nat_target::supports_disable_randomization): New.\n+\n 2021-06-14  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* compile/compile.c: Include missing header signal.h."
    },
    {
      "sha": "9342604ac4c915b32963bf31d758599e55d5479c",
      "filename": "gdb/config.in",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/09db4332c6017ab57cd136788c48e5a81e3b9399/gdb/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/09db4332c6017ab57cd136788c48e5a81e3b9399/gdb/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/config.in?ref=09db4332c6017ab57cd136788c48e5a81e3b9399",
      "patch": "@@ -486,6 +486,9 @@\n /* Define to 1 if you have the <sys/poll.h> header file. */\n #undef HAVE_SYS_POLL_H\n \n+/* Define to 1 if you have the <sys/procctl.h> header file. */\n+#undef HAVE_SYS_PROCCTL_H\n+\n /* Define to 1 if you have the <sys/procfs.h> header file. */\n #undef HAVE_SYS_PROCFS_H\n "
    },
    {
      "sha": "c6b5906d9e477de9e9a52424f4ce5da96f024b38",
      "filename": "gdb/configure",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/09db4332c6017ab57cd136788c48e5a81e3b9399/gdb/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/09db4332c6017ab57cd136788c48e5a81e3b9399/gdb/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure?ref=09db4332c6017ab57cd136788c48e5a81e3b9399",
      "patch": "@@ -12260,7 +12260,7 @@ fi\n for ac_header in nlist.h machine/reg.h \\\n                   thread_db.h \\\n \t\t  sys/file.h sys/filio.h sys/ioctl.h sys/param.h \\\n-\t\t  sys/resource.h sys/ptrace.h ptrace.h \\\n+\t\t  sys/procctl.h sys/resource.h sys/ptrace.h ptrace.h \\\n \t\t  sys/reg.h sys/debugreg.h \\\n \t\t  termios.h elf_hp.h\n do :"
    },
    {
      "sha": "68cf84d6ca3f12f627f5afb1387bad763fb18e36",
      "filename": "gdb/configure.ac",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/09db4332c6017ab57cd136788c48e5a81e3b9399/gdb/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/09db4332c6017ab57cd136788c48e5a81e3b9399/gdb/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.ac?ref=09db4332c6017ab57cd136788c48e5a81e3b9399",
      "patch": "@@ -1298,7 +1298,7 @@ AC_HEADER_STDC\n AC_CHECK_HEADERS([nlist.h machine/reg.h \\\n                   thread_db.h \\\n \t\t  sys/file.h sys/filio.h sys/ioctl.h sys/param.h \\\n-\t\t  sys/resource.h sys/ptrace.h ptrace.h \\\n+\t\t  sys/procctl.h sys/resource.h sys/ptrace.h ptrace.h \\\n \t\t  sys/reg.h sys/debugreg.h \\\n \t\t  termios.h elf_hp.h])\n AC_CHECK_HEADERS(sys/user.h, [], [],"
    },
    {
      "sha": "234e74fcfd430a0e5cccb20ae782b5876aa2e529",
      "filename": "gdb/fbsd-nat.c",
      "status": "modified",
      "additions": 75,
      "deletions": 0,
      "changes": 75,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/09db4332c6017ab57cd136788c48e5a81e3b9399/gdb/fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/09db4332c6017ab57cd136788c48e5a81e3b9399/gdb/fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.c?ref=09db4332c6017ab57cd136788c48e5a81e3b9399",
      "patch": "@@ -29,6 +29,9 @@\n #include \"gdbsupport/gdb_wait.h\"\n #include \"inf-ptrace.h\"\n #include <sys/types.h>\n+#ifdef HAVE_SYS_PROCCTL_H\n+#include <sys/procctl.h>\n+#endif\n #include <sys/procfs.h>\n #include <sys/ptrace.h>\n #include <sys/signal.h>\n@@ -1401,6 +1404,68 @@ fbsd_nat_target::supports_stopped_by_sw_breakpoint ()\n }\n #endif\n \n+#ifdef PROC_ASLR_CTL\n+class maybe_disable_address_space_randomization\n+{\n+public:\n+  explicit maybe_disable_address_space_randomization (bool disable_randomization)\n+  {\n+    if (disable_randomization)\n+      {\n+\tif (procctl (P_PID, getpid (), PROC_ASLR_STATUS, &m_aslr_ctl) == -1)\n+\t  {\n+\t    warning (_(\"Failed to fetch current address space randomization \"\n+\t\t       \"status: %s\"), safe_strerror (errno));\n+\t    return;\n+\t  }\n+\n+\tm_aslr_ctl &= ~PROC_ASLR_ACTIVE;\n+\tif (m_aslr_ctl == PROC_ASLR_FORCE_DISABLE)\n+\t  return;\n+\n+\tint ctl = PROC_ASLR_FORCE_DISABLE;\n+\tif (procctl (P_PID, getpid (), PROC_ASLR_CTL, &ctl) == -1)\n+\t  {\n+\t    warning (_(\"Error disabling address space randomization: %s\"),\n+\t\t     safe_strerror (errno));\n+\t    return;\n+\t  }\n+\n+\tm_aslr_ctl_set = true;\n+      }\n+  }\n+\n+  ~maybe_disable_address_space_randomization ()\n+  {\n+    if (m_aslr_ctl_set)\n+      {\n+\tif (procctl (P_PID, getpid (), PROC_ASLR_CTL, &m_aslr_ctl) == -1)\n+\t  warning (_(\"Error restoring address space randomization: %s\"),\n+\t\t   safe_strerror (errno));\n+      }\n+  }\n+\n+  DISABLE_COPY_AND_ASSIGN (maybe_disable_address_space_randomization);\n+\n+private:\n+  bool m_aslr_ctl_set = false;\n+  int m_aslr_ctl = 0;\n+};\n+#endif\n+\n+void\n+fbsd_nat_target::create_inferior (const char *exec_file,\n+\t\t\t\t  const std::string &allargs,\n+\t\t\t\t  char **env, int from_tty)\n+{\n+#ifdef PROC_ASLR_CTL\n+  maybe_disable_address_space_randomization restore_aslr_ctl\n+    (disable_randomization);\n+#endif\n+\n+  inf_ptrace_target::create_inferior (exec_file, allargs, env, from_tty);\n+}\n+\n #ifdef TDP_RFPPWAIT\n /* Target hook for follow_fork.  On entry and at return inferior_ptid is\n    the ptid of the followed inferior.  */\n@@ -1526,6 +1591,16 @@ fbsd_nat_target::supports_multi_process ()\n   return true;\n }\n \n+bool\n+fbsd_nat_target::supports_disable_randomization ()\n+{\n+#ifdef PROC_ASLR_CTL\n+  return true;\n+#else\n+  return false;\n+#endif\n+}\n+\n void _initialize_fbsd_nat ();\n void\n _initialize_fbsd_nat ()"
    },
    {
      "sha": "1fdb939935c634afa8462c558b3733447342bd77",
      "filename": "gdb/fbsd-nat.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/09db4332c6017ab57cd136788c48e5a81e3b9399/gdb/fbsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/09db4332c6017ab57cd136788c48e5a81e3b9399/gdb/fbsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.h?ref=09db4332c6017ab57cd136788c48e5a81e3b9399",
      "patch": "@@ -67,6 +67,9 @@ class fbsd_nat_target : public inf_ptrace_target\n   thread_control_capabilities get_thread_control_capabilities () override\n   { return tc_schedlock; }\n \n+  void create_inferior (const char *, const std::string &,\n+\t\t\tchar **, int) override;\n+\n   void resume (ptid_t, int, enum gdb_signal) override;\n \n   ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n@@ -98,6 +101,8 @@ class fbsd_nat_target : public inf_ptrace_target\n #endif\n \n   bool supports_multi_process () override;\n+\n+  bool supports_disable_randomization () override;\n };\n \n #endif /* fbsd-nat.h */"
    }
  ]
}