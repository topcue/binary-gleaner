{
  "sha": "60da9d955964759b1f52690bff587ad32a198507",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjBkYTlkOTU1OTY0NzU5YjFmNTI2OTBiZmY1ODdhZDMyYTE5ODUwNw==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-04-23T17:55:27Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-05-28T16:07:15Z"
    },
    "message": "libctf: lowest-level memory allocation and debug-dumping wrappers\n\nThe memory-allocation wrappers are simple things to allow malloc\ninterposition: they are only used inconsistently at present, usually\nwhere malloc debugging was required in the past.\n\nThese provide a default implementation that is environment-variable\ntriggered (initialized on the first call to the libctf creation and\nfile-opening functions, the first functions people will use), and\na ctf_setdebug()/ctf_getdebug() pair that allows the caller to\nexplicitly turn debugging off and on.  If ctf_setdebug() is called,\nthe automatic setting from an environment variable is skipped.\n\nlibctf/\n\t* ctf-impl.h: New file.\n\t* ctf-subr.c: New file.\n\ninclude/\n\t* ctf-api.h (ctf_setdebug): New.\n\t(ctf_getdebug): Likewise.",
    "tree": {
      "sha": "e3d9dd8f6667916ef29c557e62c2d0f3fba6f6c0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e3d9dd8f6667916ef29c557e62c2d0f3fba6f6c0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/60da9d955964759b1f52690bff587ad32a198507",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/60da9d955964759b1f52690bff587ad32a198507",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/60da9d955964759b1f52690bff587ad32a198507",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/60da9d955964759b1f52690bff587ad32a198507/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2e94b05630514109994abb77ee2dae730f17c263",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2e94b05630514109994abb77ee2dae730f17c263",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2e94b05630514109994abb77ee2dae730f17c263"
    }
  ],
  "stats": {
    "total": 330,
    "additions": 330,
    "deletions": 0
  },
  "files": [
    {
      "sha": "d113f987637daaf95400a879192f6331b65245bb",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60da9d955964759b1f52690bff587ad32a198507/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60da9d955964759b1f52690bff587ad32a198507/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=60da9d955964759b1f52690bff587ad32a198507",
      "patch": "@@ -1,3 +1,8 @@\n+2019-05-28  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-api.h (ctf_setdebug): New.\n+\t(ctf_getdebug): Likewise.\n+\n 2019-05-28  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-api.h: New file."
    },
    {
      "sha": "8c6b770cb9615d7a9cd00e2c4b1b577081c657d4",
      "filename": "include/ctf-api.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60da9d955964759b1f52690bff587ad32a198507/include/ctf-api.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60da9d955964759b1f52690bff587ad32a198507/include/ctf-api.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ctf-api.h?ref=60da9d955964759b1f52690bff587ad32a198507",
      "patch": "@@ -123,6 +123,9 @@ enum\n #define\tCTF_ADD_ROOT\t1\t/* Type visible at top-level scope.  */\n \n \n+extern void ctf_setdebug (int debug);\n+extern int ctf_getdebug (void);\n+\n #ifdef\t__cplusplus\n }\n #endif"
    },
    {
      "sha": "6a37212d8b6167f5db76d50e50bd7d15cc3ce968",
      "filename": "libctf/ChangeLog",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60da9d955964759b1f52690bff587ad32a198507/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60da9d955964759b1f52690bff587ad32a198507/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=60da9d955964759b1f52690bff587ad32a198507",
      "patch": "@@ -0,0 +1,12 @@\n+2019-05-28  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-impl.h: New file.\n+\t* ctf-subr.c: New file.\n+\n+\f\n+Local Variables:\n+mode: change-log\n+left-margin: 8\n+fill-column: 76\n+version-control: never\n+End:"
    },
    {
      "sha": "4356a2a9f0feeb5c70ab17a4639abcd577ab03ec",
      "filename": "libctf/ctf-impl.h",
      "status": "added",
      "additions": 78,
      "deletions": 0,
      "changes": 78,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60da9d955964759b1f52690bff587ad32a198507/libctf/ctf-impl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60da9d955964759b1f52690bff587ad32a198507/libctf/ctf-impl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-impl.h?ref=60da9d955964759b1f52690bff587ad32a198507",
      "patch": "@@ -0,0 +1,78 @@\n+/* Implementation header.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of libctf.\n+\n+   libctf is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3, or (at your option) any later\n+   version.\n+\n+   This program is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+   See the GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef\t_CTF_IMPL_H\n+#define\t_CTF_IMPL_H\n+\n+#include \"config.h\"\n+#include <sys/errno.h>\n+#include <ctf-api.h>\n+#include <sys/types.h>\n+\n+#ifdef\t__cplusplus\n+extern \"C\"\n+  {\n+#endif\n+\n+/* Compiler attributes.  */\n+\n+#if defined (__GNUC__)\n+\n+/* GCC.  We assume that all compilers claiming to be GCC support sufficiently\n+   many GCC attributes that the code below works.  If some non-GCC compilers\n+   masquerading as GCC in fact do not implement these attributes, version checks\n+   may be required.  */\n+\n+/* We use the _libctf_*_ pattern to avoid clashes with any future attribute\n+   macros glibc may introduce, which have names of the pattern\n+   __attribute_blah__.  */\n+\n+#define _libctf_printflike_(string_index,first_to_check) \\\n+    __attribute__ ((__format__ (__printf__, (string_index), (first_to_check))))\n+#define _libctf_unlikely_(x) __builtin_expect ((x), 0)\n+#define _libctf_unused_ __attribute__ ((__unused__))\n+#define _libctf_malloc_ __attribute__((__malloc__))\n+\n+#endif\n+\n+_libctf_malloc_\n+extern void *ctf_data_alloc (size_t);\n+extern void ctf_data_free (void *, size_t);\n+extern void ctf_data_protect (void *, size_t);\n+\n+_libctf_malloc_\n+extern void *ctf_mmap (size_t length, size_t offset, int fd);\n+extern void ctf_munmap (void *, size_t);\n+extern ssize_t ctf_pread (int fd, void *buf, ssize_t count, off_t offset);\n+\n+_libctf_malloc_\n+extern void *ctf_alloc (size_t);\n+extern void ctf_free (void *);\n+\n+_libctf_printflike_ (1, 2)\n+extern void ctf_dprintf (const char *, ...);\n+extern void libctf_init_debug (void);\n+\n+extern int _libctf_debug;\t/* debugging messages enabled */\n+\n+#ifdef\t__cplusplus\n+}\n+#endif\n+\n+#endif /* _CTF_IMPL_H */"
    },
    {
      "sha": "3103e28a3f3d62c27db4c9f616296713899ea160",
      "filename": "libctf/ctf-subr.c",
      "status": "added",
      "additions": 232,
      "deletions": 0,
      "changes": 232,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60da9d955964759b1f52690bff587ad32a198507/libctf/ctf-subr.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60da9d955964759b1f52690bff587ad32a198507/libctf/ctf-subr.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-subr.c?ref=60da9d955964759b1f52690bff587ad32a198507",
      "patch": "@@ -0,0 +1,232 @@\n+/* Simple subrs.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of libctf.\n+\n+   libctf is free software; you can redistribute it and/or modify it under\n+   the terms of the GNU General Public License as published by the Free\n+   Software Foundation; either version 3, or (at your option) any later\n+   version.\n+\n+   This program is distributed in the hope that it will be useful, but\n+   WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+   See the GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING.  If not see\n+   <http://www.gnu.org/licenses/>.  */\n+\n+#include <ctf-impl.h>\n+#ifdef HAVE_MMAP\n+#include <sys/mman.h>\n+#endif\n+#include <sys/types.h>\n+#include <stdarg.h>\n+#include <string.h>\n+#include <unistd.h>\n+\n+static size_t _PAGESIZE _libctf_unused_;\n+int _libctf_debug = 0;\t\t\t      /* Debugging messages enabled.  */\n+\n+_libctf_malloc_ void *\n+ctf_data_alloc (size_t size)\n+{\n+  void *ret;\n+\n+#ifdef HAVE_MMAP\n+  if (_PAGESIZE == 0)\n+    _PAGESIZE = sysconf(_SC_PAGESIZE);\n+\n+  if (size > _PAGESIZE)\n+    {\n+      ret = mmap (NULL, size, PROT_READ | PROT_WRITE,\n+\t\t  MAP_PRIVATE | MAP_ANON, -1, 0);\n+      if (ret == MAP_FAILED)\n+\tret = NULL;\n+    }\n+  else\n+    ret = calloc (1, size);\n+#else\n+  ret = calloc (1, size);\n+#endif\n+  return ret;\n+}\n+\n+void\n+ctf_data_free (void *buf, size_t size _libctf_unused_)\n+{\n+#ifdef HAVE_MMAP\n+  /* Must be the same as the check in ctf_data_alloc().  */\n+\n+  if (size > _PAGESIZE)\n+    (void) munmap (buf, size);\n+  else\n+    free (buf);\n+#else\n+  free (buf);\n+#endif\n+}\n+\n+/* Private, read-only mmap from a file, with fallback to copying.\n+\n+   No handling of page-offset issues at all: the caller must allow for that. */\n+\n+_libctf_malloc_ void *\n+ctf_mmap (size_t length, size_t offset, int fd)\n+{\n+  void *data;\n+\n+#ifdef HAVE_MMAP\n+  data = mmap (NULL, length, PROT_READ, MAP_PRIVATE, fd, offset);\n+  if (data == MAP_FAILED)\n+    data = NULL;\n+#else\n+  if ((data = malloc (length)) != NULL)\n+    {\n+      if (ctf_pread (fd, data, length, offset) <= 0)\n+\t{\n+\t  free (data);\n+\t  data = NULL;\n+\t}\n+    }\n+#endif\n+  return data;\n+}\n+\n+void\n+ctf_munmap (void *buf, size_t length _libctf_unused_)\n+{\n+#ifdef HAVE_MMAP\n+  (void) munmap (buf, length);\n+#else\n+  free (buf);\n+#endif\n+}\n+\n+void\n+ctf_data_protect (void *buf, size_t size)\n+{\n+#ifdef HAVE_MMAP\n+  /* Must be the same as the check in ctf_data_alloc().  */\n+\n+  if (size > _PAGESIZE)\n+    (void) mprotect (buf, size, PROT_READ);\n+#endif\n+}\n+\n+_libctf_malloc_ void *\n+ctf_alloc (size_t size)\n+{\n+  return (malloc (size));\n+}\n+\n+void\n+ctf_free (void *buf)\n+{\n+  free (buf);\n+}\n+\n+ssize_t\n+ctf_pread (int fd, void *buf, ssize_t count, off_t offset)\n+{\n+  ssize_t len;\n+  size_t acc = 0;\n+  char *data = (char *) buf;\n+\n+#ifdef HAVE_PREAD\n+  while (count > 0)\n+    {\n+      errno = 0;\n+      if (((len = pread (fd, data, count, offset)) < 0) &&\n+\t  errno != EINTR)\n+\t  return len;\n+      if (errno == EINTR)\n+\tcontinue;\n+\n+      acc += len;\n+      if (len == 0)\t\t\t\t/* EOF.  */\n+\treturn acc;\n+\n+      count -= len;\n+      offset += len;\n+      data += len;\n+    }\n+  return acc;\n+#else\n+  off_t orig_off;\n+\n+  if ((orig_off = lseek (fd, 0, SEEK_CUR)) < 0)\n+    return -1;\n+  if ((lseek (fd, offset, SEEK_SET)) < 0)\n+    return -1;\n+\n+  while (count > 0)\n+    {\n+      errno = 0;\n+      if (((len = read (fd, data, count)) < 0) &&\n+\t  errno != EINTR)\n+\t  return len;\n+      if (errno == EINTR)\n+\tcontinue;\n+\n+      acc += len;\n+      if (len == 0)\t\t\t\t/* EOF.  */\n+\tbreak;\n+\n+      count -= len;\n+      data += len;\n+    }\n+  if ((lseek (fd, orig_off, SEEK_SET)) < 0)\n+    return -1;\t\t\t\t\t/* offset is smashed.  */\n+#endif\n+\n+  return acc;\n+}\n+\n+const char *\n+ctf_strerror (int err)\n+{\n+  return (const char *) (strerror (err));\n+}\n+\n+void\n+libctf_init_debug (void)\n+{\n+  static int inited;\n+  if (!inited)\n+    {\n+      _libctf_debug = getenv (\"LIBCTF_DEBUG\") != NULL;\n+      inited = 1;\n+    }\n+}\n+\n+void ctf_setdebug (int debug)\n+{\n+  /* Ensure that libctf_init_debug() has been called, so that we don't get our\n+     debugging-on-or-off smashed by the next call.  */\n+\n+  libctf_init_debug();\n+  _libctf_debug = debug;\n+  ctf_dprintf (\"CTF debugging set to %i\\n\", debug);\n+}\n+\n+int ctf_getdebug (void)\n+{\n+  return _libctf_debug;\n+}\n+\n+_libctf_printflike_ (1, 2)\n+void ctf_dprintf (const char *format, ...)\n+{\n+  if (_libctf_debug)\n+    {\n+      va_list alist;\n+\n+      va_start (alist, format);\n+      fflush (stdout);\n+      (void) fputs (\"libctf DEBUG: \", stderr);\n+      (void) vfprintf (stderr, format, alist);\n+      va_end (alist);\n+    }\n+}"
    }
  ]
}