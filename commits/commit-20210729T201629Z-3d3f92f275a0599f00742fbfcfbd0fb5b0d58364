{
  "sha": "3d3f92f275a0599f00742fbfcfbd0fb5b0d58364",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2QzZjkyZjI3NWEwNTk5ZjAwNzQyZmJmY2ZiZDBmYjViMGQ1ODM2NA==",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-07-29T20:16:29Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2021-07-29T20:16:29Z"
    },
    "message": "obsd-nat: Various fixes to obsd_nat_target::wait.\n\n- Call inf_ptrace_target::wait instead of duplicating the code.\n  Replace a check for WIFSTOPPED on the returned status from waitpid\n  by checking for TARGET_WAITKIND_STOPPED in the parsed status as is\n  done in fbsd_nat_target::wait.\n\n- Don't use inferior_ptid when deciding if a new process is a child vs\n  parent of the fork.  Instead, use find_inferior_pid and assume that\n  if an inferior already exists, the pid in question is the parent;\n  otherwise, the pid is the child.\n\n- Don't use inferior_ptid when deciding if the ptid of the process\n  needs to be updated with an LWP ID, or if this is a new thread.\n  Instead, use the approach from fbsd-nat which is to check if a ptid\n  without an LWP exists and if so update the ptid of that thread\n  instead of adding a new thread.",
    "tree": {
      "sha": "884e9ed311adb412aa269d04f956912ae09eb22c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/884e9ed311adb412aa269d04f956912ae09eb22c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3d3f92f275a0599f00742fbfcfbd0fb5b0d58364",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d3f92f275a0599f00742fbfcfbd0fb5b0d58364",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3d3f92f275a0599f00742fbfcfbd0fb5b0d58364",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3d3f92f275a0599f00742fbfcfbd0fb5b0d58364/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9f07c7700101a4a69e4f78a0cfd16403228694ee",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9f07c7700101a4a69e4f78a0cfd16403228694ee",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9f07c7700101a4a69e4f78a0cfd16403228694ee"
    }
  ],
  "stats": {
    "total": 61,
    "additions": 12,
    "deletions": 49
  },
  "files": [
    {
      "sha": "e7a7fb3fd0e58e7ea8a8695c054315a1bd46ca9b",
      "filename": "gdb/obsd-nat.c",
      "status": "modified",
      "additions": 12,
      "deletions": 49,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3d3f92f275a0599f00742fbfcfbd0fb5b0d58364/gdb/obsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3d3f92f275a0599f00742fbfcfbd0fb5b0d58364/gdb/obsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/obsd-nat.c?ref=3d3f92f275a0599f00742fbfcfbd0fb5b0d58364",
      "patch": "@@ -26,7 +26,7 @@\n #include <sys/ptrace.h>\n #include \"gdbsupport/gdb_wait.h\"\n \n-#include \"inf-child.h\"\n+#include \"inf-ptrace.h\"\n #include \"obsd-nat.h\"\n \n /* OpenBSD 5.2 and later include rthreads which uses a thread model\n@@ -76,47 +76,12 @@ ptid_t\n obsd_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n \t\t       target_wait_flags options)\n {\n-  pid_t pid;\n-  int status, save_errno;\n-\n-  do\n-    {\n-      set_sigint_trap ();\n-\n-      do\n-\t{\n-\t  pid = waitpid (ptid.pid (), &status, 0);\n-\t  save_errno = errno;\n-\t}\n-      while (pid == -1 && errno == EINTR);\n-\n-      clear_sigint_trap ();\n-\n-      if (pid == -1)\n-\t{\n-\t  fprintf_unfiltered (gdb_stderr,\n-\t\t\t      _(\"Child process unexpectedly missing: %s.\\n\"),\n-\t\t\t      safe_strerror (save_errno));\n-\n-\t  /* Claim it exited with unknown signal.  */\n-\t  ourstatus->kind = TARGET_WAITKIND_SIGNALLED;\n-\t  ourstatus->value.sig = GDB_SIGNAL_UNKNOWN;\n-\t  return inferior_ptid;\n-\t}\n-\n-      /* Ignore terminated detached child processes.  */\n-      if (!WIFSTOPPED (status) && pid != inferior_ptid.pid ())\n-\tpid = -1;\n-    }\n-  while (pid == -1);\n-\n-  ptid = ptid_t (pid);\n-\n-  if (WIFSTOPPED (status))\n+  ptid_t wptid = inf_ptrace_target::wait (ptid, ourstatus, options);\n+  if (ourstatus->kind == TARGET_WAITKIND_STOPPED)\n     {\n       ptrace_state_t pe;\n-      pid_t fpid;\n \n+      pid_t pid = wptid.pid ();\n       if (ptrace (PT_GET_PROCESS_STATE, pid, (caddr_t)&pe, sizeof pe) == -1)\n \tperror_with_name ((\"ptrace\"));\n \n@@ -127,7 +92,7 @@ obsd_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n \t  ourstatus->value.related_pid = ptid_t (pe.pe_other_pid);\n \n \t  /* Make sure the other end of the fork is stopped too.  */\n-\t  fpid = waitpid (pe.pe_other_pid, &status, 0);\n+\t  pid_t fpid = waitpid (pe.pe_other_pid, nullptr, 0);\n \t  if (fpid == -1)\n \t    perror_with_name ((\"waitpid\"));\n \n@@ -137,7 +102,7 @@ obsd_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n \n \t  gdb_assert (pe.pe_report_event == PTRACE_FORK);\n \t  gdb_assert (pe.pe_other_pid == pid);\n-\t  if (fpid == inferior_ptid.pid ())\n+\t  if (find_inferior_pid (this, fpid) != nullptr)\n \t    {\n \t      ourstatus->value.related_pid = ptid_t (pe.pe_other_pid);\n \t      return ptid_t (fpid);\n@@ -146,18 +111,16 @@ obsd_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n \t  return ptid_t (pid);\n \t}\n \n-      ptid = ptid_t (pid, pe.pe_tid, 0);\n-      if (!in_thread_list (this, ptid))\n+      wptid = ptid_t (pid, pe.pe_tid, 0);\n+      if (!in_thread_list (this, wptid))\n \t{\n-\t  if (inferior_ptid.lwp () == 0)\n-\t    thread_change_ptid (this, inferior_ptid, ptid);\n+\t  if (in_thread_list (this, ptid_t (pid)))\n+\t    thread_change_ptid (this, ptid_t (pid), wptid);\n \t  else\n-\t    add_thread (this, ptid);\n+\t    add_thread (this, wptid);\n \t}\n     }\n-\n-  store_waitstatus (ourstatus, status);\n-  return ptid;\n+  return wptid;\n }\n \n #endif /* PT_GET_THREAD_FIRST */"
    }
  ]
}