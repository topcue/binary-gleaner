{
  "sha": "046bebe1c0a367687bd693eb4594fcdcba0b8f7e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDQ2YmViZTFjMGEzNjc2ODdiZDY5M2ViNDU5NGZjZGNiYTBiOGY3ZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-07-19T04:07:10Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-08-06T17:37:51Z"
    },
    "message": "Add more styling to \"disassemble\"\n\nThis adds more styling to the disassemble command.  In particular,\naddresses and function names in the disassembly are now styled.\n\nThis required fixing a small latent bug in set_output_style.  This\nfunction always passed NULL to emit_style_escape; but when writing to\na file other than gdb_stdout, it should emit the style escape\ndirectly.  (FWIW this is another argument for better integrating the\npager with ui_file and getting rid of this entire layer.)\n\ngdb/ChangeLog\n2019-08-06  Tom Tromey  <tom@tromey.com>\n\n\t* utils.c (set_output_style): Sometimes pass stream to\n\temit_style_escape.\n\t* ui-out.h (class ui_out) <can_emit_style_escape>: Declare.\n\t* record-btrace.c (btrace_insn_history): Update.\n\t* mi/mi-out.h (class mi_ui_out) <can_emit_style_escape>: New\n\tmethod.\n\t* disasm.h (gdb_pretty_print_disassembler): Add uiout parameter.\n\tUpdate initializers.\n\t<m_uiout>: New field.\n\t<m_di>: Move lower.\n\t* disasm.c (gdb_pretty_print_disassembler::pretty_print_insn):\n\tRemove \"uiout\" parameter.\n\t(dump_insns): Update.\n\t* cli-out.h (class cli_ui_out) <can_emit_style_escape>: Declare.\n\t* cli-out.c (cli_ui_out::can_emit_style_escape): New method.\n\ngdb/testsuite/ChangeLog\n2019-08-06  Tom Tromey  <tom@tromey.com>\n\n\t* gdb.base/style.exp: Add disassemble test.\n\t* gdb.base/style.c (some_called_function): New function.\n\t(main): Use it.",
    "tree": {
      "sha": "38fdfa265e21d04c7bed98491f3bb7b4a8185ad8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/38fdfa265e21d04c7bed98491f3bb7b4a8185ad8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/046bebe1c0a367687bd693eb4594fcdcba0b8f7e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/046bebe1c0a367687bd693eb4594fcdcba0b8f7e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/046bebe1c0a367687bd693eb4594fcdcba0b8f7e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ddbcedf5de138bc83d5d16554a3f44163dcaef7a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ddbcedf5de138bc83d5d16554a3f44163dcaef7a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ddbcedf5de138bc83d5d16554a3f44163dcaef7a"
    }
  ],
  "stats": {
    "total": 131,
    "additions": 94,
    "deletions": 37
  },
  "files": [
    {
      "sha": "57ca368352aa02b02b4c4629dc87ef9bb5520bd5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=046bebe1c0a367687bd693eb4594fcdcba0b8f7e",
      "patch": "@@ -1,3 +1,21 @@\n+2019-08-06  Tom Tromey  <tom@tromey.com>\n+\n+\t* utils.c (set_output_style): Sometimes pass stream to\n+\temit_style_escape.\n+\t* ui-out.h (class ui_out) <can_emit_style_escape>: Declare.\n+\t* record-btrace.c (btrace_insn_history): Update.\n+\t* mi/mi-out.h (class mi_ui_out) <can_emit_style_escape>: New\n+\tmethod.\n+\t* disasm.h (gdb_pretty_print_disassembler): Add uiout parameter.\n+\tUpdate initializers.\n+\t<m_uiout>: New field.\n+\t<m_di>: Move lower.\n+\t* disasm.c (gdb_pretty_print_disassembler::pretty_print_insn):\n+\tRemove \"uiout\" parameter.\n+\t(dump_insns): Update.\n+\t* cli-out.h (class cli_ui_out) <can_emit_style_escape>: Declare.\n+\t* cli-out.c (cli_ui_out::can_emit_style_escape): New method.\n+\n 2019-08-06  Christian Biesinger  <cbiesinger@google.com>\n \n \t* symtab.c (symbol_cache_lookup): Change int to enum block_enum."
    },
    {
      "sha": "549d518d60f8299203a573038c48f2f893de6cca",
      "filename": "gdb/cli-out.c",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/cli-out.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/cli-out.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli-out.c?ref=046bebe1c0a367687bd693eb4594fcdcba0b8f7e",
      "patch": "@@ -316,6 +316,12 @@ cli_ui_out::set_stream (struct ui_file *stream)\n   return old;\n }\n \n+bool\n+cli_ui_out::can_emit_style_escape () const\n+{\n+  return m_streams.back ()->can_emit_style_escape ();\n+}\n+\n /* CLI interface to display tab-completion matches.  */\n \n /* CLI version of displayer.crlf.  */"
    },
    {
      "sha": "f38c1cc0571d0559215cea2647d2ee77f1d2f027",
      "filename": "gdb/cli-out.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/cli-out.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/cli-out.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli-out.h?ref=046bebe1c0a367687bd693eb4594fcdcba0b8f7e",
      "patch": "@@ -32,6 +32,8 @@ class cli_ui_out : public ui_out\n \n   ui_file *set_stream (ui_file *stream);\n \n+  bool can_emit_style_escape () const override;\n+\n protected:\n \n   virtual void do_table_begin (int nbrofcols, int nr_rows,"
    },
    {
      "sha": "68da682c15e7faefb1f9ab2e3e4caca4ba729e41",
      "filename": "gdb/disasm.c",
      "status": "modified",
      "additions": 24,
      "deletions": 25,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/disasm.c?ref=046bebe1c0a367687bd693eb4594fcdcba0b8f7e",
      "patch": "@@ -191,8 +191,7 @@ compare_lines (const void *mle1p, const void *mle2p)\n /* See disasm.h.  */\n \n int\n-gdb_pretty_print_disassembler::pretty_print_insn (struct ui_out *uiout,\n-\t\t\t\t\t\t  const struct disasm_insn *insn,\n+gdb_pretty_print_disassembler::pretty_print_insn (const struct disasm_insn *insn,\n \t\t\t\t\t\t  gdb_disassembly_flags flags)\n {\n   /* parts of the symbolic representation of the address */\n@@ -204,37 +203,37 @@ gdb_pretty_print_disassembler::pretty_print_insn (struct ui_out *uiout,\n   struct gdbarch *gdbarch = arch ();\n \n   {\n-    ui_out_emit_tuple tuple_emitter (uiout, NULL);\n+    ui_out_emit_tuple tuple_emitter (m_uiout, NULL);\n     pc = insn->addr;\n \n     if (insn->number != 0)\n       {\n-\tuiout->field_unsigned (\"insn-number\", insn->number);\n-\tuiout->text (\"\\t\");\n+\tm_uiout->field_unsigned (\"insn-number\", insn->number);\n+\tm_uiout->text (\"\\t\");\n       }\n \n     if ((flags & DISASSEMBLY_SPECULATIVE) != 0)\n       {\n \tif (insn->is_speculative)\n \t  {\n-\t    uiout->field_string (\"is-speculative\", \"?\");\n+\t    m_uiout->field_string (\"is-speculative\", \"?\");\n \n \t    /* The speculative execution indication overwrites the first\n \t       character of the PC prefix.\n \t       We assume a PC prefix length of 3 characters.  */\n \t    if ((flags & DISASSEMBLY_OMIT_PC) == 0)\n-\t      uiout->text (pc_prefix (pc) + 1);\n+\t      m_uiout->text (pc_prefix (pc) + 1);\n \t    else\n-\t      uiout->text (\"  \");\n+\t      m_uiout->text (\"  \");\n \t  }\n \telse if ((flags & DISASSEMBLY_OMIT_PC) == 0)\n-\t  uiout->text (pc_prefix (pc));\n+\t  m_uiout->text (pc_prefix (pc));\n \telse\n-\t  uiout->text (\"   \");\n+\t  m_uiout->text (\"   \");\n       }\n     else if ((flags & DISASSEMBLY_OMIT_PC) == 0)\n-      uiout->text (pc_prefix (pc));\n-    uiout->field_core_addr (\"address\", gdbarch, pc);\n+      m_uiout->text (pc_prefix (pc));\n+    m_uiout->field_core_addr (\"address\", gdbarch, pc);\n \n     std::string name, filename;\n     bool omit_fname = ((flags & DISASSEMBLY_OMIT_FNAME) != 0);\n@@ -243,19 +242,19 @@ gdb_pretty_print_disassembler::pretty_print_insn (struct ui_out *uiout,\n       {\n \t/* We don't care now about line, filename and unmapped.  But we might in\n \t   the future.  */\n-\tuiout->text (\" <\");\n+\tm_uiout->text (\" <\");\n \tif (!omit_fname)\n-\t  uiout->field_string (\"func-name\", name.c_str (),\n-\t\t\t       ui_out_style_kind::FUNCTION);\n+\t  m_uiout->field_string (\"func-name\", name.c_str (),\n+\t\t\t\t ui_out_style_kind::FUNCTION);\n \t/* For negative offsets, avoid displaying them as +-N; the sign of\n \t   the offset takes the place of the \"+\" here.  */\n \tif (offset >= 0)\n-\t  uiout->text (\"+\");\n-\tuiout->field_signed (\"offset\", offset);\n-\tuiout->text (\">:\\t\");\n+\t  m_uiout->text (\"+\");\n+\tm_uiout->field_signed (\"offset\", offset);\n+\tm_uiout->text (\">:\\t\");\n       }\n     else\n-      uiout->text (\":\\t\");\n+      m_uiout->text (\":\\t\");\n \n     m_insn_stb.clear ();\n \n@@ -279,15 +278,15 @@ gdb_pretty_print_disassembler::pretty_print_insn (struct ui_out *uiout,\n \t    spacer = \" \";\n \t  }\n \n-\tuiout->field_stream (\"opcodes\", m_opcode_stb);\n-\tuiout->text (\"\\t\");\n+\tm_uiout->field_stream (\"opcodes\", m_opcode_stb);\n+\tm_uiout->text (\"\\t\");\n       }\n     else\n       size = m_di.print_insn (pc);\n \n-    uiout->field_stream (\"inst\", m_insn_stb);\n+    m_uiout->field_stream (\"inst\", m_insn_stb);\n   }\n-  uiout->text (\"\\n\");\n+  m_uiout->text (\"\\n\");\n \n   return size;\n }\n@@ -303,13 +302,13 @@ dump_insns (struct gdbarch *gdbarch,\n   memset (&insn, 0, sizeof (insn));\n   insn.addr = low;\n \n-  gdb_pretty_print_disassembler disasm (gdbarch);\n+  gdb_pretty_print_disassembler disasm (gdbarch, uiout);\n \n   while (insn.addr < high && (how_many < 0 || num_displayed < how_many))\n     {\n       int size;\n \n-      size = disasm.pretty_print_insn (uiout, &insn, flags);\n+      size = disasm.pretty_print_insn (&insn, flags);\n       if (size <= 0)\n \tbreak;\n "
    },
    {
      "sha": "5c1b30b85310e825eef0ce52c6ca7d98a7e31b25",
      "filename": "gdb/disasm.h",
      "status": "modified",
      "additions": 13,
      "deletions": 7,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/disasm.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/disasm.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/disasm.h?ref=046bebe1c0a367687bd693eb4594fcdcba0b8f7e",
      "patch": "@@ -112,26 +112,32 @@ extern int gdb_print_insn (struct gdbarch *gdbarch, CORE_ADDR memaddr,\n class gdb_pretty_print_disassembler\n {\n public:\n-  explicit gdb_pretty_print_disassembler (struct gdbarch *gdbarch)\n-    : m_di (gdbarch, &m_insn_stb)\n+  explicit gdb_pretty_print_disassembler (struct gdbarch *gdbarch,\n+\t\t\t\t\t  struct ui_out *uiout)\n+    : m_uiout (uiout),\n+      m_insn_stb (uiout->can_emit_style_escape ()),\n+      m_di (gdbarch, &m_insn_stb)\n   {}\n \n-  /* Prints the instruction INSN into UIOUT and returns the length of\n-     the printed instruction in bytes.  */\n-  int pretty_print_insn (struct ui_out *uiout, const struct disasm_insn *insn,\n+  /* Prints the instruction INSN into the saved ui_out and returns the\n+     length of the printed instruction in bytes.  */\n+  int pretty_print_insn (const struct disasm_insn *insn,\n \t\t\t gdb_disassembly_flags flags);\n \n private:\n   /* Returns the architecture used for disassembling.  */\n   struct gdbarch *arch () { return m_di.arch (); }\n \n-  /* The disassembler used for instruction printing.  */\n-  gdb_disassembler m_di;\n+  /* The ui_out that is used by pretty_print_insn.  */\n+  struct ui_out *m_uiout;\n \n   /* The buffer used to build the instruction string.  The\n      disassembler is initialized with this stream.  */\n   string_file m_insn_stb;\n \n+  /* The disassembler used for instruction printing.  */\n+  gdb_disassembler m_di;\n+\n   /* The buffer used to build the raw opcodes string.  */\n   string_file m_opcode_stb;\n };"
    },
    {
      "sha": "fe96658b59b37e0989622b59c89995b12b7baecc",
      "filename": "gdb/mi/mi-out.h",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/mi/mi-out.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/mi/mi-out.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-out.h?ref=046bebe1c0a367687bd693eb4594fcdcba0b8f7e",
      "patch": "@@ -40,6 +40,11 @@ class mi_ui_out : public ui_out\n   /* Return the version number of the current MI.  */\n   int version ();\n \n+  bool can_emit_style_escape () const override\n+  {\n+    return false;\n+  }\n+\n protected:\n \n   virtual void do_table_begin (int nbrofcols, int nr_rows, const char *tblid)"
    },
    {
      "sha": "c4197454266a8dfb59920216857d81f64f4048d2",
      "filename": "gdb/record-btrace.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/record-btrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/record-btrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-btrace.c?ref=046bebe1c0a367687bd693eb4594fcdcba0b8f7e",
      "patch": "@@ -778,7 +778,7 @@ btrace_insn_history (struct ui_out *uiout,\n   gdb::optional<ui_out_emit_tuple> src_and_asm_tuple;\n   gdb::optional<ui_out_emit_list> asm_list;\n \n-  gdb_pretty_print_disassembler disasm (gdbarch);\n+  gdb_pretty_print_disassembler disasm (gdbarch, uiout);\n \n   for (btrace_insn_iterator it = *begin; btrace_insn_cmp (&it, end) != 0;\n          btrace_insn_next (&it, 1))\n@@ -841,7 +841,7 @@ btrace_insn_history (struct ui_out *uiout,\n \t  if ((insn->flags & BTRACE_INSN_FLAG_SPECULATIVE) != 0)\n \t    dinsn.is_speculative = 1;\n \n-\t  disasm.pretty_print_insn (uiout, &dinsn, flags);\n+\t  disasm.pretty_print_insn (&dinsn, flags);\n \t}\n     }\n }"
    },
    {
      "sha": "49783ebac317474a824630c32de34e8278281dee",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=046bebe1c0a367687bd693eb4594fcdcba0b8f7e",
      "patch": "@@ -1,3 +1,9 @@\n+2019-08-06  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdb.base/style.exp: Add disassemble test.\n+\t* gdb.base/style.c (some_called_function): New function.\n+\t(main): Use it.\n+\n 2019-08-05  Christian Biesinger  <cbiesinger@google.com>\n \n \t* gdb.python/py-block.exp: Test dictionary access on blocks."
    },
    {
      "sha": "82dca7dfd15c44fc43b6afcd0b67917d97bb1aa2",
      "filename": "gdb/testsuite/gdb.base/style.c",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/testsuite/gdb.base/style.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/testsuite/gdb.base/style.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/style.c?ref=046bebe1c0a367687bd693eb4594fcdcba0b8f7e",
      "patch": "@@ -15,8 +15,13 @@\n \n #define SOME_MACRO 23\n \n+int some_called_function (void)\n+{\n+  return 0;\n+}\n+\n int\n main (int argc, char **argv)\n {\n-  return 0; /* break here */\n+  return some_called_function (); /* break here */\n }"
    },
    {
      "sha": "842c52e4891336e33a34a713acd40182ea940d99",
      "filename": "gdb/testsuite/gdb.base/style.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/testsuite/gdb.base/style.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/testsuite/gdb.base/style.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/style.exp?ref=046bebe1c0a367687bd693eb4594fcdcba0b8f7e",
      "patch": "@@ -83,6 +83,10 @@ save_vars { env(TERM) } {\n \t    \"Defined at $base_file_expr:16\\r\\n#define SOME_MACRO 23\"\n     }\n \n+    set func [style some_called_function function]\n+    # Somewhere should see the call to the function.\n+    gdb_test \"disassemble main\" \"[style $hex address].*$func.*\"\n+\n     gdb_exit\n     gdb_spawn\n "
    },
    {
      "sha": "7041d9690e59854deaf8d133675797bfc5625c8d",
      "filename": "gdb/ui-out.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/ui-out.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/ui-out.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ui-out.h?ref=046bebe1c0a367687bd693eb4594fcdcba0b8f7e",
      "patch": "@@ -145,6 +145,10 @@ class ui_out\n   bool query_table_field (int colno, int *width, int *alignment,\n \t\t\t  const char **col_name);\n \n+  /* Return true if this stream is prepared to handle style\n+     escapes.  */\n+  virtual bool can_emit_style_escape () const = 0;\n+\n  protected:\n \n   virtual void do_table_begin (int nbrofcols, int nr_rows, const char *tblid)"
    },
    {
      "sha": "398dd30f07b1402b66994b7935d99b9aaf90cb57",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/046bebe1c0a367687bd693eb4594fcdcba0b8f7e/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=046bebe1c0a367687bd693eb4594fcdcba0b8f7e",
      "patch": "@@ -1442,9 +1442,11 @@ set_output_style (struct ui_file *stream, const ui_file_style &style)\n   if (!stream->can_emit_style_escape ())\n     return;\n \n-  /* Note that we don't pass STREAM here, because we want to emit to\n+  /* Note that we may not pass STREAM here, when we want to emit to\n      the wrap buffer, not directly to STREAM.  */\n-  emit_style_escape (style);\n+  if (stream == gdb_stdout)\n+    stream = nullptr;\n+  emit_style_escape (style, stream);\n }\n \n /* See utils.h.  */"
    }
  ]
}