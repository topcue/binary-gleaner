{
  "sha": "489e9d8b7bb3337a7f4f902a03c176c22faeabc7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDg5ZTlkOGI3YmIzMzM3YTdmNGY5MDJhMDNjMTc2YzIyZmFlYWJjNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-21T01:59:06Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-25T13:48:44Z"
    },
    "message": "Separate out execution-info window\n\nThis pulls the EXEC_INFO_WIN case out into its own subclass of\ntui_gen_win_info.  This lets us remove an element from\nunion tui_which_element.\n\ngdb/ChangeLog\n2019-06-25  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-winsource.c\n\t(tui_exec_info_window::maybe_allocate_content): New method.\n\t(tui_set_exec_info_content, tui_show_exec_info_content): Update.\n\t* tui/tui-layout.c (init_and_make_win): Add EXEC_INFO_WIN case.\n\t(make_source_or_disasm_window): Add cast.\n\t* tui/tui-data.h (union tui_which_element) <simple_string>:\n\tRemove.\n\t(struct tui_source_info): New.\n\t(struct tui_source_window_base) <execution_info>: Change type.\n\t* tui/tui-data.c (init_content_element): Remove EXEC_INFO_WIN\n\tcase, and add assert.\n\t(tui_alloc_content): Add assert.",
    "tree": {
      "sha": "0ef7391a8ad8df0e8c463889a64c17164f693fcd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0ef7391a8ad8df0e8c463889a64c17164f693fcd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/489e9d8b7bb3337a7f4f902a03c176c22faeabc7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/489e9d8b7bb3337a7f4f902a03c176c22faeabc7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/489e9d8b7bb3337a7f4f902a03c176c22faeabc7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/489e9d8b7bb3337a7f4f902a03c176c22faeabc7/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c3fabb7d69b3735bc6042a2992729944c8ced62c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3fabb7d69b3735bc6042a2992729944c8ced62c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c3fabb7d69b3735bc6042a2992729944c8ced62c"
    }
  ],
  "stats": {
    "total": 121,
    "additions": 84,
    "deletions": 37
  },
  "files": [
    {
      "sha": "51fd84fed699556e5301190130d3519534534162",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/489e9d8b7bb3337a7f4f902a03c176c22faeabc7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/489e9d8b7bb3337a7f4f902a03c176c22faeabc7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=489e9d8b7bb3337a7f4f902a03c176c22faeabc7",
      "patch": "@@ -1,3 +1,18 @@\n+2019-06-25  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-winsource.c\n+\t(tui_exec_info_window::maybe_allocate_content): New method.\n+\t(tui_set_exec_info_content, tui_show_exec_info_content): Update.\n+\t* tui/tui-layout.c (init_and_make_win): Add EXEC_INFO_WIN case.\n+\t(make_source_or_disasm_window): Add cast.\n+\t* tui/tui-data.h (union tui_which_element) <simple_string>:\n+\tRemove.\n+\t(struct tui_source_info): New.\n+\t(struct tui_source_window_base) <execution_info>: Change type.\n+\t* tui/tui-data.c (init_content_element): Remove EXEC_INFO_WIN\n+\tcase, and add assert.\n+\t(tui_alloc_content): Add assert.\n+\n 2019-06-25  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-data.h (tui_alloc_win_info): Don't declare."
    },
    {
      "sha": "119d249edc55319c521a9c2841bf189f51e15b7b",
      "filename": "gdb/tui/tui-data.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/489e9d8b7bb3337a7f4f902a03c176c22faeabc7/gdb/tui/tui-data.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/489e9d8b7bb3337a7f4f902a03c176c22faeabc7/gdb/tui/tui-data.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.c?ref=489e9d8b7bb3337a7f4f902a03c176c22faeabc7",
      "patch": "@@ -364,6 +364,8 @@ static void\n init_content_element (struct tui_win_element *element, \n \t\t      enum tui_win_type type)\n {\n+  gdb_assert (type != EXEC_INFO_WIN);\n+\n   switch (type)\n     {\n     case SRC_WIN:\n@@ -397,10 +399,6 @@ init_content_element (struct tui_win_element *element,\n       element->which_element.locator.line_no = 0;\n       element->which_element.locator.addr = 0;\n       break;\n-    case EXEC_INFO_WIN:\n-      memset(element->which_element.simple_string, ' ',\n-             sizeof(element->which_element.simple_string));\n-      break;\n     default:\n       break;\n     }\n@@ -427,6 +425,8 @@ tui_alloc_content (int num_elements, enum tui_win_type type)\n   struct tui_win_element *element_block_ptr;\n   int i;\n \n+  gdb_assert (type != EXEC_INFO_WIN);\n+\n   content = XNEWVEC (struct tui_win_element *, num_elements);\n \n   /*"
    },
    {
      "sha": "c5b518b9bfc33f0ac8b6ca37a48150c5e6db07b8",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 29,
      "deletions": 2,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/489e9d8b7bb3337a7f4f902a03c176c22faeabc7/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/489e9d8b7bb3337a7f4f902a03c176c22faeabc7/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=489e9d8b7bb3337a7f4f902a03c176c22faeabc7",
      "patch": "@@ -249,14 +249,41 @@ union tui_which_element\n   struct tui_data_element data;\t\t/* Elements of data_window.  */\n   struct tui_command_element command;\t/* Command elements.  */\n   struct tui_locator_element locator;\t/* Locator elements.  */\n-  tui_exec_info_content simple_string;\t/* Simple char based elements.  */\n };\n \n struct tui_win_element\n {\n   union tui_which_element which_element;\n };\n \n+/* Execution info window class.  */\n+\n+struct tui_exec_info_window : public tui_gen_win_info\n+{\n+  tui_exec_info_window ()\n+    : tui_gen_win_info (EXEC_INFO_WIN)\n+  {\n+  }\n+\n+  ~tui_exec_info_window () override\n+  {\n+    xfree (m_content);\n+  }\n+\n+  /* Get or allocate contents.  */\n+  tui_exec_info_content *maybe_allocate_content (int n_elements);\n+\n+  /* Return the contents.  */\n+  const tui_exec_info_content *get_content () const\n+  {\n+    return m_content;\n+  }\n+\n+private:\n+\n+  tui_exec_info_content *m_content = nullptr;\n+};\n+\n /* This defines information about each logical window.  */\n struct tui_win_info : public tui_gen_win_info\n {\n@@ -380,7 +407,7 @@ struct tui_source_window_base : public tui_win_info\n   /* Does the locator belong to this window?  */\n   bool m_has_locator = false;\n   /* Execution information window.  */\n-  struct tui_gen_win_info *execution_info = nullptr;\n+  struct tui_exec_info_window *execution_info = nullptr;\n   /* Used for horizontal scroll.  */\n   int horizontal_offset = 0;\n   struct tui_line_or_address start_line_or_addr;"
    },
    {
      "sha": "a0745bf538402891ec142e29223ace97bc3e7d8f",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 12,
      "deletions": 8,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/489e9d8b7bb3337a7f4f902a03c176c22faeabc7/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/489e9d8b7bb3337a7f4f902a03c176c22faeabc7/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=489e9d8b7bb3337a7f4f902a03c176c22faeabc7",
      "patch": "@@ -816,6 +816,10 @@ init_and_make_win (tui_gen_win_info *win_info,\n \t  win_info = new tui_cmd_window ();\n \t  break;\n \n+\tcase EXEC_INFO_WIN:\n+\t  win_info = new tui_exec_info_window ();\n+\t  break;\n+\n \tdefault:\n \t  gdb_assert (tui_win_is_auxillary (win_type));\n \t  win_info = new tui_gen_win_info (win_type);\n@@ -834,14 +838,14 @@ static struct tui_win_info *\n make_source_or_disasm_window (enum tui_win_type type,\n \t\t\t      int height, int origin_y)\n {\n-  struct tui_gen_win_info *execution_info\n-    = init_and_make_win (nullptr,\n-\t\t\t EXEC_INFO_WIN,\n-\t\t\t height,\n-\t\t\t 3,\n-\t\t\t 0,\n-\t\t\t origin_y,\n-\t\t\t DONT_BOX_WINDOW);\n+  struct tui_exec_info_window *execution_info\n+    = (tui_exec_info_window *) init_and_make_win (nullptr,\n+\t\t\t\t\t\t  EXEC_INFO_WIN,\n+\t\t\t\t\t\t  height,\n+\t\t\t\t\t\t  3,\n+\t\t\t\t\t\t  0,\n+\t\t\t\t\t\t  origin_y,\n+\t\t\t\t\t\t  DONT_BOX_WINDOW);\n \n   /* Now create the source window.  */\n   struct tui_source_window_base *result"
    },
    {
      "sha": "204fee13be960cb81284225cce6be21408834728",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 24,
      "deletions": 23,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/489e9d8b7bb3337a7f4f902a03c176c22faeabc7/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/489e9d8b7bb3337a7f4f902a03c176c22faeabc7/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=489e9d8b7bb3337a7f4f902a03c176c22faeabc7",
      "patch": "@@ -470,6 +470,16 @@ tui_update_breakpoint_info (struct tui_win_info *win,\n   return need_refresh;\n }\n \n+/* See tui-data.h.  */\n+\n+tui_exec_info_content *\n+tui_exec_info_window::maybe_allocate_content (int n_elements)\n+{\n+  if (m_content == nullptr)\n+    m_content = XNEWVEC (tui_exec_info_content, n_elements);\n+  return m_content;\n+}\n+\n \n /* Function to initialize the content of the execution info window,\n    based upon the input window which is either the source or\n@@ -479,63 +489,54 @@ tui_set_exec_info_content (struct tui_source_window_base *win_info)\n {\n   if (win_info->execution_info != NULL)\n     {\n-      struct tui_gen_win_info *exec_info_ptr = win_info->execution_info;\n-\n-      if (exec_info_ptr->content == NULL)\n-\texec_info_ptr->content =\n-\t  tui_alloc_content (win_info->height, exec_info_ptr->type);\n+      tui_exec_info_content *content\n+\t= win_info->execution_info->maybe_allocate_content (win_info->height);\n \n       tui_update_breakpoint_info (win_info, 1);\n       for (int i = 0; i < win_info->content_size; i++)\n \t{\n-\t  struct tui_win_element *element;\n+\t  tui_exec_info_content &element = content[i];\n \t  struct tui_win_element *src_element;\n \t  int mode;\n \n-\t  element = exec_info_ptr->content[i];\n \t  src_element = win_info->content[i];\n \n-\t  memset(element->which_element.simple_string, ' ',\n-\t\t sizeof(element->which_element.simple_string));\n-\t  element->which_element.simple_string[TUI_EXECINFO_SIZE - 1] = 0;\n+\t  memset (element, ' ', sizeof (tui_exec_info_content));\n+\t  element[TUI_EXECINFO_SIZE - 1] = 0;\n \n \t  /* Now update the exec info content based upon the state\n \t     of each line as indicated by the source content.  */\n \t  mode = src_element->which_element.source.has_break;\n \t  if (mode & TUI_BP_HIT)\n-\t    element->which_element.simple_string[TUI_BP_HIT_POS] =\n-\t      (mode & TUI_BP_HARDWARE) ? 'H' : 'B';\n+\t    element[TUI_BP_HIT_POS] = (mode & TUI_BP_HARDWARE) ? 'H' : 'B';\n \t  else if (mode & (TUI_BP_ENABLED | TUI_BP_DISABLED))\n-\t    element->which_element.simple_string[TUI_BP_HIT_POS] =\n-\t      (mode & TUI_BP_HARDWARE) ? 'h' : 'b';\n+\t    element[TUI_BP_HIT_POS] = (mode & TUI_BP_HARDWARE) ? 'h' : 'b';\n \n \t  if (mode & TUI_BP_ENABLED)\n-\t    element->which_element.simple_string[TUI_BP_BREAK_POS] = '+';\n+\t    element[TUI_BP_BREAK_POS] = '+';\n \t  else if (mode & TUI_BP_DISABLED)\n-\t    element->which_element.simple_string[TUI_BP_BREAK_POS] = '-';\n+\t    element[TUI_BP_BREAK_POS] = '-';\n \n \t  if (src_element->which_element.source.is_exec_point)\n-\t    element->which_element.simple_string[TUI_EXEC_POS] = '>';\n+\t    element[TUI_EXEC_POS] = '>';\n \t}\n-      exec_info_ptr->content_size = win_info->content_size;\n     }\n }\n \n \n void\n tui_show_exec_info_content (struct tui_source_window_base *win_info)\n {\n-  struct tui_gen_win_info *exec_info = win_info->execution_info;\n-  int cur_line;\n+  struct tui_exec_info_window *exec_info = win_info->execution_info;\n+  const tui_exec_info_content *content = exec_info->get_content ();\n \n   werase (exec_info->handle);\n   exec_info->refresh_window ();\n-  for (cur_line = 1; (cur_line <= exec_info->content_size); cur_line++)\n+  for (int cur_line = 1; (cur_line <= win_info->content_size); cur_line++)\n     mvwaddstr (exec_info->handle,\n \t       cur_line,\n \t       0,\n-\t       (char *) exec_info->content[cur_line - 1]\n-\t\t\t  ->which_element.simple_string);\n+\t       content[cur_line - 1]);\n   exec_info->refresh_window ();\n   exec_info->content_in_use = TRUE;\n }"
    }
  ]
}