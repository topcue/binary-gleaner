{
  "sha": "976ca31673841e14a7595ed32f8009b61608fe46",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTc2Y2EzMTY3Mzg0MWUxNGE3NTk1ZWQzMmY4MDA5YjYxNjA4ZmU0Ng==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-29T19:15:10Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-29T19:15:10Z"
    },
    "message": "gdb: rename dwarf2_per_objfile variables/fields to per_objfile\n\nWhile doing the psymtab-sharing patchset, I avoided renaming variables\nunnecessarily to avoid adding noise to patches, but I'd like to do it\nnow.  Basically, we have these dwarf2 per-something structures:\n\n  - dwarf2_per_objfile\n  - dwarf2_per_bfd\n  - dwarf2_per_cu_data\n\nI named the instances of dwarf2_per_bfd `per_bfd` and most of instances\nof dwarf2_per_cu_data are called `per_cu`.  Most pre-existing instances\nof dwarf2_per_objfile are named `dwarf2_per_objfile`.  For consistency\nwith the other type, I'd like to rename them to just `per_objfile`.  The\n`dwarf2_` prefix is superfluous, since it's already clear we are in\ndwarf2 code.  It also helps reducing the line wrapping by saving 7\nprecious columns.\n\ngdb/ChangeLog:\n\n\t* dwarf2/comp-unit.c, dwarf2/comp-unit.h, dwarf2/index-cache.c,\n\tdwarf2/index-cache.h, dwarf2/index-write.c,\n\tdwarf2/index-write.h, dwarf2/line-header.c,\n\tdwarf2/line-header.h, dwarf2/macro.c, dwarf2/macro.h,\n\tdwarf2/read.c, dwarf2/read.h: Rename struct dwarf2_per_objfile\n\tvariables and fields from `dwarf2_per_objfile` to just\n\t`per_objfile` throughout.\n\nChange-Id: I3c45cdcc561265e90df82cbd36b4b4ef2fa73aef",
    "tree": {
      "sha": "fa94f1d4ebbbe08a4a9c7c42f0ada88aea2f7406",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fa94f1d4ebbbe08a4a9c7c42f0ada88aea2f7406"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/976ca31673841e14a7595ed32f8009b61608fe46",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/976ca31673841e14a7595ed32f8009b61608fe46",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/976ca31673841e14a7595ed32f8009b61608fe46",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/976ca31673841e14a7595ed32f8009b61608fe46/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "678048e8079ace915052f3070b2df97bcaea58d2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/678048e8079ace915052f3070b2df97bcaea58d2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/678048e8079ace915052f3070b2df97bcaea58d2"
    }
  ],
  "stats": {
    "total": 1512,
    "additions": 719,
    "deletions": 793
  },
  "files": [
    {
      "sha": "86faab1a568c35ee08720f9130c9e0a772149e2a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/976ca31673841e14a7595ed32f8009b61608fe46/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/976ca31673841e14a7595ed32f8009b61608fe46/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=976ca31673841e14a7595ed32f8009b61608fe46",
      "patch": "@@ -1,3 +1,13 @@\n+2020-05-29  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* dwarf2/comp-unit.c, dwarf2/comp-unit.h, dwarf2/index-cache.c,\n+\tdwarf2/index-cache.h, dwarf2/index-write.c,\n+\tdwarf2/index-write.h, dwarf2/line-header.c,\n+\tdwarf2/line-header.h, dwarf2/macro.c, dwarf2/macro.h,\n+\tdwarf2/read.c, dwarf2/read.h: Rename struct dwarf2_per_objfile\n+\tvariables and fields from `dwarf2_per_objfile` to just\n+\t`per_objfile` throughout.\n+\n 2020-05-28  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* dwarf2/loc.c (class dwarf_evaluate_loc_desc)"
    },
    {
      "sha": "7ddc893aac6287d4f9a88e454e75b66eed96e9ef",
      "filename": "gdb/dwarf2/comp-unit.c",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/comp-unit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/comp-unit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/comp-unit.c?ref=976ca31673841e14a7595ed32f8009b61608fe46",
      "patch": "@@ -173,15 +173,15 @@ read_comp_unit_head (struct comp_unit_head *cu_header,\n    Perform various error checking on the header.  */\n \n static void\n-error_check_comp_unit_head (struct dwarf2_per_objfile *dwarf2_per_objfile,\n+error_check_comp_unit_head (dwarf2_per_objfile *per_objfile,\n \t\t\t    struct comp_unit_head *header,\n \t\t\t    struct dwarf2_section_info *section,\n \t\t\t    struct dwarf2_section_info *abbrev_section)\n {\n   const char *filename = section->get_file_name ();\n \n   if (to_underlying (header->abbrev_sect_off)\n-      >= abbrev_section->get_size (dwarf2_per_objfile->objfile))\n+      >= abbrev_section->get_size (per_objfile->objfile))\n     error (_(\"Dwarf Error: bad offset (%s) in compilation unit header \"\n \t   \"(offset %s + 6) [in module %s]\"),\n \t   sect_offset_str (header->abbrev_sect_off),\n@@ -201,7 +201,7 @@ error_check_comp_unit_head (struct dwarf2_per_objfile *dwarf2_per_objfile,\n /* See comp-unit.h.  */\n \n const gdb_byte *\n-read_and_check_comp_unit_head (struct dwarf2_per_objfile *dwarf2_per_objfile,\n+read_and_check_comp_unit_head (dwarf2_per_objfile *per_objfile,\n \t\t\t       struct comp_unit_head *header,\n \t\t\t       struct dwarf2_section_info *section,\n \t\t\t       struct dwarf2_section_info *abbrev_section,\n@@ -216,8 +216,7 @@ read_and_check_comp_unit_head (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \n   header->first_die_cu_offset = (cu_offset) (info_ptr - beg_of_comp_unit);\n \n-  error_check_comp_unit_head (dwarf2_per_objfile, header, section,\n-\t\t\t      abbrev_section);\n+  error_check_comp_unit_head (per_objfile, header, section, abbrev_section);\n \n   return info_ptr;\n }"
    },
    {
      "sha": "35bca8f8e9d7e55c7e21ab5afcd148764338fd49",
      "filename": "gdb/dwarf2/comp-unit.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/comp-unit.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/comp-unit.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/comp-unit.h?ref=976ca31673841e14a7595ed32f8009b61608fe46",
      "patch": "@@ -112,7 +112,7 @@ extern const gdb_byte *read_comp_unit_head\n    The contents of the header are stored in HEADER.\n    The result is a pointer to the start of the first DIE.  */\n extern const gdb_byte *read_and_check_comp_unit_head\n-  (struct dwarf2_per_objfile *dwarf2_per_objfile,\n+  (dwarf2_per_objfile *per_objfile,\n    struct comp_unit_head *header,\n    struct dwarf2_section_info *section,\n    struct dwarf2_section_info *abbrev_section,"
    },
    {
      "sha": "38cbc545a637bf39110cc00c284b387fadbce916",
      "filename": "gdb/dwarf2/index-cache.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/index-cache.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/index-cache.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-cache.c?ref=976ca31673841e14a7595ed32f8009b61608fe46",
      "patch": "@@ -87,9 +87,9 @@ index_cache::disable ()\n /* See dwarf-index-cache.h.  */\n \n void\n-index_cache::store (struct dwarf2_per_objfile *dwarf2_per_objfile)\n+index_cache::store (dwarf2_per_objfile *per_objfile)\n {\n-  objfile *obj = dwarf2_per_objfile->objfile;\n+  objfile *obj = per_objfile->objfile;\n \n   if (!enabled ())\n     return;\n@@ -108,7 +108,7 @@ index_cache::store (struct dwarf2_per_objfile *dwarf2_per_objfile)\n \n   /* Get build id of dwz file, if present.  */\n   gdb::optional<std::string> dwz_build_id_str;\n-  const dwz_file *dwz = dwarf2_get_dwz_file (dwarf2_per_objfile->per_bfd);\n+  const dwz_file *dwz = dwarf2_get_dwz_file (per_objfile->per_bfd);\n   const char *dwz_build_id_ptr = NULL;\n \n   if (dwz != nullptr)\n@@ -149,7 +149,7 @@ index_cache::store (struct dwarf2_per_objfile *dwarf2_per_objfile)\n \n       /* Write the index itself to the directory, using the build id as the\n          filename.  */\n-      write_psymtabs_to_index (dwarf2_per_objfile, m_dir.c_str (),\n+      write_psymtabs_to_index (per_objfile, m_dir.c_str (),\n \t\t\t       build_id_str.c_str (), dwz_build_id_ptr,\n \t\t\t       dw_index_kind::GDB_INDEX);\n     }"
    },
    {
      "sha": "2eb7d232352b2c4649f57fa3e9387e5d9b34a85f",
      "filename": "gdb/dwarf2/index-cache.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/index-cache.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/index-cache.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-cache.h?ref=976ca31673841e14a7595ed32f8009b61608fe46",
      "patch": "@@ -53,7 +53,7 @@ class index_cache\n   void disable ();\n \n   /* Store an index for the specified object file in the cache.  */\n-  void store (struct dwarf2_per_objfile *dwarf2_per_objfile);\n+  void store (dwarf2_per_objfile *per_objfile);\n \n   /* Look for an index file matching BUILD_ID.  If found, return the contents\n      as an array_view and store the underlying resources (allocated memory,"
    },
    {
      "sha": "eabb67fd88dfc454361e1a0583d8709e94435663",
      "filename": "gdb/dwarf2/index-write.c",
      "status": "modified",
      "additions": 50,
      "deletions": 55,
      "changes": 105,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-write.c?ref=976ca31673841e14a7595ed32f8009b61608fe46",
      "patch": "@@ -661,7 +661,7 @@ recursively_write_psymbols (struct objfile *objfile,\n class debug_names\n {\n public:\n-  debug_names (struct dwarf2_per_objfile *dwarf2_per_objfile, bool is_dwarf64,\n+  debug_names (dwarf2_per_objfile *per_objfile, bool is_dwarf64,\n \t       bfd_endian dwarf5_byte_order)\n     : m_dwarf5_byte_order (dwarf5_byte_order),\n       m_dwarf32 (dwarf5_byte_order),\n@@ -671,7 +671,7 @@ class debug_names\n \t       : static_cast<dwarf &> (m_dwarf32)),\n       m_name_table_string_offs (m_dwarf.name_table_string_offs),\n       m_name_table_entry_offs (m_dwarf.name_table_entry_offs),\n-      m_debugstrlookup (dwarf2_per_objfile)\n+      m_debugstrlookup (per_objfile)\n   {}\n \n   int dwarf5_offset_size () const\n@@ -957,21 +957,21 @@ class debug_names\n \n     /* Object constructor to be called for current DWARF2_PER_OBJFILE.\n        All .debug_str section strings are automatically stored.  */\n-    debug_str_lookup (struct dwarf2_per_objfile *dwarf2_per_objfile)\n-      : m_abfd (dwarf2_per_objfile->objfile->obfd),\n-\tm_dwarf2_per_objfile (dwarf2_per_objfile)\n+    debug_str_lookup (dwarf2_per_objfile *per_objfile)\n+      : m_abfd (per_objfile->objfile->obfd),\n+\tm_per_objfile (per_objfile)\n     {\n-      dwarf2_per_objfile->per_bfd->str.read (dwarf2_per_objfile->objfile);\n-      if (dwarf2_per_objfile->per_bfd->str.buffer == NULL)\n+      per_objfile->per_bfd->str.read (per_objfile->objfile);\n+      if (per_objfile->per_bfd->str.buffer == NULL)\n \treturn;\n-      for (const gdb_byte *data = dwarf2_per_objfile->per_bfd->str.buffer;\n-\t   data < (dwarf2_per_objfile->per_bfd->str.buffer\n-\t\t   + dwarf2_per_objfile->per_bfd->str.size);)\n+      for (const gdb_byte *data = per_objfile->per_bfd->str.buffer;\n+\t   data < (per_objfile->per_bfd->str.buffer\n+\t\t   + per_objfile->per_bfd->str.size);)\n \t{\n \t  const char *const s = reinterpret_cast<const char *> (data);\n \t  const auto insertpair\n \t    = m_str_table.emplace (c_str_view (s),\n-\t\t\t\t   data - dwarf2_per_objfile->per_bfd->str.buffer);\n+\t\t\t\t   data - per_objfile->per_bfd->str.buffer);\n \t  if (!insertpair.second)\n \t    complaint (_(\"Duplicate string \\\"%s\\\" in \"\n \t\t\t \".debug_str section [in module %s]\"),\n@@ -988,7 +988,7 @@ class debug_names\n       const auto it = m_str_table.find (c_str_view (s));\n       if (it != m_str_table.end ())\n \treturn it->second;\n-      const size_t offset = (m_dwarf2_per_objfile->per_bfd->str.size\n+      const size_t offset = (m_per_objfile->per_bfd->str.size\n \t\t\t     + m_str_add_buf.size ());\n       m_str_table.emplace (c_str_view (s), offset);\n       m_str_add_buf.append_cstr0 (s);\n@@ -1004,7 +1004,7 @@ class debug_names\n   private:\n     std::unordered_map<c_str_view, size_t, c_str_view_hasher> m_str_table;\n     bfd *const m_abfd;\n-    struct dwarf2_per_objfile *m_dwarf2_per_objfile;\n+    dwarf2_per_objfile *m_per_objfile;\n \n     /* Data to add at the end of .debug_str for new needed symbol names.  */\n     data_buf m_str_add_buf;\n@@ -1294,14 +1294,14 @@ class debug_names\n    .debug_names section.  */\n \n static bool\n-check_dwarf64_offsets (struct dwarf2_per_objfile *dwarf2_per_objfile)\n+check_dwarf64_offsets (dwarf2_per_objfile *per_objfile)\n {\n-  for (dwarf2_per_cu_data *per_cu : dwarf2_per_objfile->per_bfd->all_comp_units)\n+  for (dwarf2_per_cu_data *per_cu : per_objfile->per_bfd->all_comp_units)\n     {\n       if (to_underlying (per_cu->sect_off) >= (static_cast<uint64_t> (1) << 32))\n \treturn true;\n     }\n-  for (const signatured_type *sigtype : dwarf2_per_objfile->per_bfd->all_type_units)\n+  for (const signatured_type *sigtype : per_objfile->per_bfd->all_type_units)\n     {\n       const dwarf2_per_cu_data &per_cu = sigtype->per_cu;\n \n@@ -1318,10 +1318,10 @@ check_dwarf64_offsets (struct dwarf2_per_objfile *dwarf2_per_objfile)\n    malloc/free.  */\n \n static size_t\n-psyms_seen_size (struct dwarf2_per_objfile *dwarf2_per_objfile)\n+psyms_seen_size (dwarf2_per_objfile *per_objfile)\n {\n   size_t psyms_count = 0;\n-  for (dwarf2_per_cu_data *per_cu : dwarf2_per_objfile->per_bfd->all_comp_units)\n+  for (dwarf2_per_cu_data *per_cu : per_objfile->per_bfd->all_comp_units)\n     {\n       partial_symtab *psymtab = per_cu->v.psymtab;\n \n@@ -1401,10 +1401,10 @@ write_gdbindex_1 (FILE *out_file,\n    associated dwz file, DWZ_OUT_FILE must be NULL.  */\n \n static void\n-write_gdbindex (struct dwarf2_per_objfile *dwarf2_per_objfile, FILE *out_file,\n+write_gdbindex (dwarf2_per_objfile *per_objfile, FILE *out_file,\n \t\tFILE *dwz_out_file)\n {\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = per_objfile->objfile;\n   mapped_symtab symtab;\n   data_buf objfile_cu_list;\n   data_buf dwz_cu_list;\n@@ -1414,18 +1414,17 @@ write_gdbindex (struct dwarf2_per_objfile *dwarf2_per_objfile, FILE *out_file,\n      in the index file).  This will later be needed to write the address\n      table.  */\n   psym_index_map cu_index_htab;\n-  cu_index_htab.reserve (dwarf2_per_objfile->per_bfd->all_comp_units.size ());\n+  cu_index_htab.reserve (per_objfile->per_bfd->all_comp_units.size ());\n \n   /* The CU list is already sorted, so we don't need to do additional\n      work here.  Also, the debug_types entries do not appear in\n      all_comp_units, but only in their own hash table.  */\n \n   std::unordered_set<partial_symbol *> psyms_seen\n-    (psyms_seen_size (dwarf2_per_objfile));\n-  for (int i = 0; i < dwarf2_per_objfile->per_bfd->all_comp_units.size (); ++i)\n+    (psyms_seen_size (per_objfile));\n+  for (int i = 0; i < per_objfile->per_bfd->all_comp_units.size (); ++i)\n     {\n-      struct dwarf2_per_cu_data *per_cu\n-\t= dwarf2_per_objfile->per_bfd->all_comp_units[i];\n+      dwarf2_per_cu_data *per_cu = per_objfile->per_bfd->all_comp_units[i];\n       partial_symtab *psymtab = per_cu->v.psymtab;\n \n       if (psymtab != NULL)\n@@ -1453,15 +1452,15 @@ write_gdbindex (struct dwarf2_per_objfile *dwarf2_per_objfile, FILE *out_file,\n \n   /* Write out the .debug_type entries, if any.  */\n   data_buf types_cu_list;\n-  if (dwarf2_per_objfile->per_bfd->signatured_types)\n+  if (per_objfile->per_bfd->signatured_types)\n     {\n       signatured_type_index_data sig_data (types_cu_list,\n \t\t\t\t\t   psyms_seen);\n \n       sig_data.objfile = objfile;\n       sig_data.symtab = &symtab;\n-      sig_data.cu_index = dwarf2_per_objfile->per_bfd->all_comp_units.size ();\n-      htab_traverse_noresize (dwarf2_per_objfile->per_bfd->signatured_types.get (),\n+      sig_data.cu_index = per_objfile->per_bfd->all_comp_units.size ();\n+      htab_traverse_noresize (per_objfile->per_bfd->signatured_types.get (),\n \t\t\t      write_one_signatured_type, &sig_data);\n     }\n \n@@ -1489,25 +1488,24 @@ static const gdb_byte dwarf5_gdb_augmentation[] = { 'G', 'D', 'B', 0 };\n    many bytes were expected to be written into OUT_FILE.  */\n \n static void\n-write_debug_names (struct dwarf2_per_objfile *dwarf2_per_objfile,\n+write_debug_names (dwarf2_per_objfile *per_objfile,\n \t\t   FILE *out_file, FILE *out_file_str)\n {\n-  const bool dwarf5_is_dwarf64 = check_dwarf64_offsets (dwarf2_per_objfile);\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n+  const bool dwarf5_is_dwarf64 = check_dwarf64_offsets (per_objfile);\n+  struct objfile *objfile = per_objfile->objfile;\n   const enum bfd_endian dwarf5_byte_order\n     = gdbarch_byte_order (objfile->arch ());\n \n   /* The CU list is already sorted, so we don't need to do additional\n      work here.  Also, the debug_types entries do not appear in\n      all_comp_units, but only in their own hash table.  */\n   data_buf cu_list;\n-  debug_names nametable (dwarf2_per_objfile, dwarf5_is_dwarf64,\n-\t\t\t dwarf5_byte_order);\n+  debug_names nametable (per_objfile, dwarf5_is_dwarf64, dwarf5_byte_order);\n   std::unordered_set<partial_symbol *>\n-    psyms_seen (psyms_seen_size (dwarf2_per_objfile));\n-  for (int i = 0; i < dwarf2_per_objfile->per_bfd->all_comp_units.size (); ++i)\n+    psyms_seen (psyms_seen_size (per_objfile));\n+  for (int i = 0; i < per_objfile->per_bfd->all_comp_units.size (); ++i)\n     {\n-      const dwarf2_per_cu_data *per_cu = dwarf2_per_objfile->per_bfd->all_comp_units[i];\n+      const dwarf2_per_cu_data *per_cu = per_objfile->per_bfd->all_comp_units[i];\n       partial_symtab *psymtab = per_cu->v.psymtab;\n \n       /* CU of a shared file from 'dwz -m' may be unused by this main\n@@ -1525,7 +1523,7 @@ write_debug_names (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \n   /* Write out the .debug_type entries, if any.  */\n   data_buf types_cu_list;\n-  if (dwarf2_per_objfile->per_bfd->signatured_types)\n+  if (per_objfile->per_bfd->signatured_types)\n     {\n       debug_names::write_one_signatured_type_data sig_data (nametable,\n \t\t\tsignatured_type_index_data (types_cu_list, psyms_seen));\n@@ -1534,7 +1532,7 @@ write_debug_names (struct dwarf2_per_objfile *dwarf2_per_objfile,\n       /* It is used only for gdb_index.  */\n       sig_data.info.symtab = nullptr;\n       sig_data.info.cu_index = 0;\n-      htab_traverse_noresize (dwarf2_per_objfile->per_bfd->signatured_types.get (),\n+      htab_traverse_noresize (per_objfile->per_bfd->signatured_types.get (),\n \t\t\t      debug_names::write_one_signatured_type,\n \t\t\t      &sig_data);\n     }\n@@ -1574,12 +1572,12 @@ write_debug_names (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \n   /* comp_unit_count - The number of CUs in the CU list.  */\n   header.append_uint (4, dwarf5_byte_order,\n-\t\t      dwarf2_per_objfile->per_bfd->all_comp_units.size ());\n+\t\t      per_objfile->per_bfd->all_comp_units.size ());\n \n   /* local_type_unit_count - The number of TUs in the local TU\n      list.  */\n   header.append_uint (4, dwarf5_byte_order,\n-\t\t      dwarf2_per_objfile->per_bfd->all_type_units.size ());\n+\t\t      per_objfile->per_bfd->all_type_units.size ());\n \n   /* foreign_type_unit_count - The number of TUs in the foreign TU\n      list.  */\n@@ -1669,17 +1667,16 @@ struct index_wip_file\n /* See dwarf-index-write.h.  */\n \n void\n-write_psymtabs_to_index (struct dwarf2_per_objfile *dwarf2_per_objfile,\n-\t\t\t const char *dir, const char *basename,\n-\t\t\t const char *dwz_basename,\n+write_psymtabs_to_index (dwarf2_per_objfile *per_objfile, const char *dir,\n+\t\t\t const char *basename, const char *dwz_basename,\n \t\t\t dw_index_kind index_kind)\n {\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = per_objfile->objfile;\n \n-  if (dwarf2_per_objfile->per_bfd->using_index)\n+  if (per_objfile->per_bfd->using_index)\n     error (_(\"Cannot use an index to create the index\"));\n \n-  if (dwarf2_per_objfile->per_bfd->types.size () > 1)\n+  if (per_objfile->per_bfd->types.size () > 1)\n     error (_(\"Cannot make an index when the file has multiple .debug_types sections\"));\n \n   if (!objfile->partial_symtabs->psymtabs\n@@ -1703,13 +1700,13 @@ write_psymtabs_to_index (struct dwarf2_per_objfile *dwarf2_per_objfile,\n     {\n       index_wip_file str_wip_file (dir, basename, DEBUG_STR_SUFFIX);\n \n-      write_debug_names (dwarf2_per_objfile, objfile_index_wip.out_file.get (),\n+      write_debug_names (per_objfile, objfile_index_wip.out_file.get (),\n \t\t\t str_wip_file.out_file.get ());\n \n       str_wip_file.finalize ();\n     }\n   else\n-    write_gdbindex (dwarf2_per_objfile, objfile_index_wip.out_file.get (),\n+    write_gdbindex (per_objfile, objfile_index_wip.out_file.get (),\n \t\t    (dwz_index_wip.has_value ()\n \t\t     ? dwz_index_wip->out_file.get () : NULL));\n \n@@ -1753,23 +1750,21 @@ save_gdb_index_command (const char *arg, int from_tty)\n       if (stat (objfile_name (objfile), &st) < 0)\n \tcontinue;\n \n-      struct dwarf2_per_objfile *dwarf2_per_objfile\n-\t= get_dwarf2_per_objfile (objfile);\n+      dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n \n-      if (dwarf2_per_objfile != NULL)\n+      if (per_objfile != NULL)\n \t{\n \t  try\n \t    {\n \t      const char *basename = lbasename (objfile_name (objfile));\n-\t      const dwz_file *dwz\n-\t\t= dwarf2_get_dwz_file (dwarf2_per_objfile->per_bfd);\n+\t      const dwz_file *dwz = dwarf2_get_dwz_file (per_objfile->per_bfd);\n \t      const char *dwz_basename = NULL;\n \n \t      if (dwz != NULL)\n \t\tdwz_basename = lbasename (dwz->filename ());\n \n-\t      write_psymtabs_to_index (dwarf2_per_objfile, arg, basename,\n-\t\t\t\t       dwz_basename, index_kind);\n+\t      write_psymtabs_to_index (per_objfile, arg, basename, dwz_basename,\n+\t\t\t\t       index_kind);\n \t    }\n \t  catch (const gdb_exception_error &except)\n \t    {"
    },
    {
      "sha": "4710205c8d772cd96ef795ce89ead61a847e58f0",
      "filename": "gdb/dwarf2/index-write.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/index-write.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/index-write.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-write.h?ref=976ca31673841e14a7595ed32f8009b61608fe46",
      "patch": "@@ -33,7 +33,7 @@\n    same, but for the dwz file's index.  */\n \n extern void write_psymtabs_to_index\n-  (struct dwarf2_per_objfile *dwarf2_per_objfile, const char *dir,\n-   const char *basename, const char *dwz_basename, dw_index_kind index_kind);\n+  (dwarf2_per_objfile *per_objfile, const char *dir, const char *basename,\n+   const char *dwz_basename, dw_index_kind index_kind);\n \n #endif /* DWARF_INDEX_WRITE_H */"
    },
    {
      "sha": "6c67f2b551feddf15333bf5e276c133a7ba54d2e",
      "filename": "gdb/dwarf2/line-header.c",
      "status": "modified",
      "additions": 6,
      "deletions": 9,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/line-header.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/line-header.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/line-header.c?ref=976ca31673841e14a7595ed32f8009b61608fe46",
      "patch": "@@ -154,9 +154,8 @@ read_checked_initial_length_and_offset (bfd *abfd, const gdb_byte *buf,\n    format.  */\n \n static void\n-read_formatted_entries (struct dwarf2_per_objfile *dwarf2_per_objfile,\n-\t\t\tbfd *abfd, const gdb_byte **bufp,\n-\t\t\tstruct line_header *lh,\n+read_formatted_entries (dwarf2_per_objfile *per_objfile, bfd *abfd,\n+\t\t\tconst gdb_byte **bufp, struct line_header *lh,\n \t\t\tconst struct comp_unit_head *cu_header,\n \t\t\tvoid (*callback) (struct line_header *lh,\n \t\t\t\t\t  const char *name,\n@@ -208,9 +207,7 @@ read_formatted_entries (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \n \t    case DW_FORM_line_strp:\n \t      string.emplace\n-\t\t(dwarf2_per_objfile->read_line_string (buf,\n-\t\t\t\t\t\t       cu_header,\n-\t\t\t\t\t\t       &bytes_read));\n+\t\t(per_objfile->read_line_string (buf, cu_header, &bytes_read));\n \t      buf += bytes_read;\n \t      break;\n \n@@ -286,7 +283,7 @@ read_formatted_entries (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \n line_header_up\n dwarf_decode_line_header  (sect_offset sect_off, bool is_dwz,\n-\t\t\t   struct dwarf2_per_objfile *dwarf2_per_objfile,\n+\t\t\t   dwarf2_per_objfile *per_objfile,\n \t\t\t   struct dwarf2_section_info *section,\n \t\t\t   const struct comp_unit_head *cu_header)\n {\n@@ -393,7 +390,7 @@ dwarf_decode_line_header  (sect_offset sect_off, bool is_dwz,\n   if (lh->version >= 5)\n     {\n       /* Read directory table.  */\n-      read_formatted_entries (dwarf2_per_objfile, abfd, &line_ptr, lh.get (),\n+      read_formatted_entries (per_objfile, abfd, &line_ptr, lh.get (),\n \t\t\t      cu_header,\n \t\t\t      [] (struct line_header *header, const char *name,\n \t\t\t\t  dir_index d_index, unsigned int mod_time,\n@@ -403,7 +400,7 @@ dwarf_decode_line_header  (sect_offset sect_off, bool is_dwz,\n \t});\n \n       /* Read file name table.  */\n-      read_formatted_entries (dwarf2_per_objfile, abfd, &line_ptr, lh.get (),\n+      read_formatted_entries (per_objfile, abfd, &line_ptr, lh.get (),\n \t\t\t      cu_header,\n \t\t\t      [] (struct line_header *header, const char *name,\n \t\t\t\t  dir_index d_index, unsigned int mod_time,"
    },
    {
      "sha": "6ec86fd08d7bb29ba6ed8bb18dd38bd655f5def4",
      "filename": "gdb/dwarf2/line-header.h",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/line-header.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/line-header.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/line-header.h?ref=976ca31673841e14a7595ed32f8009b61608fe46",
      "patch": "@@ -204,9 +204,7 @@ file_entry::include_dir (const line_header *lh) const\n    and must not be freed.  */\n \n extern line_header_up dwarf_decode_line_header\n-  (sect_offset sect_off, bool is_dwz,\n-   struct dwarf2_per_objfile *dwarf2_per_objfile,\n-   struct dwarf2_section_info *section,\n-   const struct comp_unit_head *cu_header);\n+  (sect_offset sect_off, bool is_dwz, dwarf2_per_objfile *per_objfile,\n+   struct dwarf2_section_info *section, const struct comp_unit_head *cu_header);\n \n #endif /* DWARF2_LINE_HEADER_H */"
    },
    {
      "sha": "d047d806f884b34f97dca2736927413b1f67f9f3",
      "filename": "gdb/dwarf2/macro.c",
      "status": "modified",
      "additions": 16,
      "deletions": 20,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/macro.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/macro.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/macro.c?ref=976ca31673841e14a7595ed32f8009b61608fe46",
      "patch": "@@ -418,7 +418,7 @@ dwarf_parse_macro_header (const gdb_byte **opcode_definitions,\n    including DW_MACRO_import.  */\n \n static void\n-dwarf_decode_macro_bytes (struct dwarf2_per_objfile *dwarf2_per_objfile,\n+dwarf_decode_macro_bytes (dwarf2_per_objfile *per_objfile,\n \t\t\t  buildsym_compunit *builder,\n \t\t\t  bfd *abfd,\n \t\t\t  const gdb_byte *mac_ptr, const gdb_byte *mac_end,\n@@ -429,7 +429,7 @@ dwarf_decode_macro_bytes (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t\t  unsigned int offset_size,\n \t\t\t  htab_t include_hash)\n {\n-  struct objfile *objfile = dwarf2_per_objfile->objfile;\n+  struct objfile *objfile = per_objfile->objfile;\n   enum dwarf_macro_record_type macinfo_type;\n   int at_commandline;\n   const gdb_byte *opcode_definitions[256];\n@@ -506,15 +506,14 @@ dwarf_decode_macro_bytes (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t    || macinfo_type == DW_MACRO_undef_sup\n \t\t    || section_is_dwz)\n \t\t  {\n-\t\t    struct dwz_file *dwz\n-\t\t      = dwarf2_get_dwz_file (dwarf2_per_objfile->per_bfd);\n+\t\t    dwz_file *dwz = dwarf2_get_dwz_file (per_objfile->per_bfd);\n \n \t\t    body = dwz->read_string (objfile, str_offset);\n \t\t  }\n \t\telse\n-\t\t  body = dwarf2_per_objfile->per_bfd->str.read_string (objfile,\n-\t\t\t\t\t\t\t\t       str_offset,\n-\t\t\t\t\t\t\t\t       \"DW_FORM_strp\");\n+\t\t  body = per_objfile->per_bfd->str.read_string (objfile,\n+\t\t\t\t\t\t\t\tstr_offset,\n+\t\t\t\t\t\t\t\t\"DW_FORM_strp\");\n \t      }\n \n \t    is_define = (macinfo_type == DW_MACRO_define\n@@ -644,8 +643,7 @@ dwarf_decode_macro_bytes (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \n \t    if (macinfo_type == DW_MACRO_import_sup)\n \t      {\n-\t\tstruct dwz_file *dwz\n-\t\t  = dwarf2_get_dwz_file (dwarf2_per_objfile->per_bfd);\n+\t\tdwz_file *dwz = dwarf2_get_dwz_file (per_objfile->per_bfd);\n \n \t\tdwz->macro.read (objfile);\n \n@@ -669,11 +667,11 @@ dwarf_decode_macro_bytes (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t      {\n \t\t*slot = (void *) new_mac_ptr;\n \n-\t\tdwarf_decode_macro_bytes (dwarf2_per_objfile, builder,\n-\t\t\t\t\t  include_bfd, new_mac_ptr,\n-\t\t\t\t\t  include_mac_end, current_file, lh,\n-\t\t\t\t\t  section, section_is_gnu, is_dwz,\n-\t\t\t\t\t  offset_size, include_hash);\n+\t\tdwarf_decode_macro_bytes (per_objfile, builder, include_bfd,\n+\t\t\t\t\t  new_mac_ptr, include_mac_end,\n+\t\t\t\t\t  current_file, lh, section,\n+\t\t\t\t\t  section_is_gnu, is_dwz, offset_size,\n+\t\t\t\t\t  include_hash);\n \n \t\thtab_remove_elt (include_hash, (void *) new_mac_ptr);\n \t      }\n@@ -710,7 +708,7 @@ dwarf_decode_macro_bytes (struct dwarf2_per_objfile *dwarf2_per_objfile,\n }\n \n void\n-dwarf_decode_macros (struct dwarf2_per_objfile *dwarf2_per_objfile,\n+dwarf_decode_macros (dwarf2_per_objfile *per_objfile,\n \t\t     buildsym_compunit *builder,\n \t\t     const dwarf2_section_info *section,\n \t\t     const struct line_header *lh, unsigned int offset_size,\n@@ -861,9 +859,7 @@ dwarf_decode_macros (struct dwarf2_per_objfile *dwarf2_per_objfile,\n   mac_ptr = section->buffer + offset;\n   slot = htab_find_slot (include_hash.get (), mac_ptr, INSERT);\n   *slot = (void *) mac_ptr;\n-  dwarf_decode_macro_bytes (dwarf2_per_objfile, builder,\n-\t\t\t    abfd, mac_ptr, mac_end,\n-\t\t\t    current_file, lh, section,\n-\t\t\t    section_is_gnu, 0, offset_size,\n-\t\t\t    include_hash.get ());\n+  dwarf_decode_macro_bytes (per_objfile, builder, abfd, mac_ptr, mac_end,\n+\t\t\t    current_file, lh, section, section_is_gnu, 0,\n+\t\t\t    offset_size, include_hash.get ());\n }"
    },
    {
      "sha": "d874068947069cf12d710671e820a991079b031d",
      "filename": "gdb/dwarf2/macro.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/macro.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/macro.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/macro.h?ref=976ca31673841e14a7595ed32f8009b61608fe46",
      "patch": "@@ -22,7 +22,7 @@\n \n struct buildsym_compunit;\n \n-extern void dwarf_decode_macros (struct dwarf2_per_objfile *dwarf2_per_objfile,\n+extern void dwarf_decode_macros (dwarf2_per_objfile *per_objfile,\n \t\t\t\t buildsym_compunit *builder,\n \t\t\t\t const dwarf2_section_info *section,\n \t\t\t\t const struct line_header *lh,"
    },
    {
      "sha": "4724738363be70b296cad1ff850d6717b4ff957b",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 621,
      "deletions": 690,
      "changes": 1311,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=976ca31673841e14a7595ed32f8009b61608fe46"
    },
    {
      "sha": "cd57d9026ae63cf63c6437e65daf7705084189e4",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/976ca31673841e14a7595ed32f8009b61608fe46/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=976ca31673841e14a7595ed32f8009b61608fe46",
      "patch": "@@ -651,7 +651,7 @@ struct type *dwarf2_get_die_type (cu_offset die_offset,\n    may no longer exist.  */\n \n CORE_ADDR dwarf2_read_addr_index (dwarf2_per_cu_data *per_cu,\n-\t\t\t\t  dwarf2_per_objfile *dwarf2_per_objfile,\n+\t\t\t\t  dwarf2_per_objfile *per_objfile,\n \t\t\t\t  unsigned int addr_index);\n \n /* Return DWARF block referenced by DW_AT_location of DIE at SECT_OFF at PER_CU."
    }
  ]
}