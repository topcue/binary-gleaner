{
  "sha": "d6ba6a11642cdbec4ce91fefe455920b5c073f60",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDZiYTZhMTE2NDJjZGJlYzRjZTkxZmVmZTQ1NTkyMGI1YzA3M2Y2MA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-17T20:08:44Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-25T13:48:41Z"
    },
    "message": "Introduce tui_gen_win_info::reset method\n\nThis introduces the tui_gen_win_info::reset method and changes various\nplaces to use it.  This led to the realization that the can_highlight\nmember only needs to be set during construction, so this patch makes\nthat change as well.  Finally, init_and_make_win is drastically\nsimplified.\n\ngdb/ChangeLog\n2019-06-25  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-layout.c (make_command_window): Don't set\n\tcan_highlight.\n\t(show_source_disasm_command): Call the reset method.\n\t(show_data): Don't set can_highlight.  Call the reset method.\n\t(tui_gen_win_info::reset): Rename from init_gen_win_info\n\t(init_and_make_win): Simplify.  Return tui_gen_win_info.\n\t(show_source_or_disasm_and_command): Call the reset method.\n\t* tui/tui-data.h (struct tui_gen_win_info) <reset>: New method.\n\t(struct tui_cmd_window): Set can_highlight.",
    "tree": {
      "sha": "6df54168a60e0d5daa81bd40a65832abfdf39cad",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6df54168a60e0d5daa81bd40a65832abfdf39cad"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d6ba6a11642cdbec4ce91fefe455920b5c073f60",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d6ba6a11642cdbec4ce91fefe455920b5c073f60",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d6ba6a11642cdbec4ce91fefe455920b5c073f60",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d6ba6a11642cdbec4ce91fefe455920b5c073f60/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "48a3bd16c2189174f601600dc6cceedd68e908b6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/48a3bd16c2189174f601600dc6cceedd68e908b6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/48a3bd16c2189174f601600dc6cceedd68e908b6"
    }
  ],
  "stats": {
    "total": 290,
    "additions": 134,
    "deletions": 156
  },
  "files": [
    {
      "sha": "4f6f26adb32b823ef26569b8c4f18bebb6c6c105",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d6ba6a11642cdbec4ce91fefe455920b5c073f60/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d6ba6a11642cdbec4ce91fefe455920b5c073f60/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d6ba6a11642cdbec4ce91fefe455920b5c073f60",
      "patch": "@@ -1,3 +1,15 @@\n+2019-06-25  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-layout.c (make_command_window): Don't set\n+\tcan_highlight.\n+\t(show_source_disasm_command): Call the reset method.\n+\t(show_data): Don't set can_highlight.  Call the reset method.\n+\t(tui_gen_win_info::reset): Rename from init_gen_win_info\n+\t(init_and_make_win): Simplify.  Return tui_gen_win_info.\n+\t(show_source_or_disasm_and_command): Call the reset method.\n+\t* tui/tui-data.h (struct tui_gen_win_info) <reset>: New method.\n+\t(struct tui_cmd_window): Set can_highlight.\n+\n 2019-06-25  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-wingeneral.c (tui_gen_win_info::make_visible): Rename"
    },
    {
      "sha": "fdde3026590813d0844fcd1ac139600e4944554b",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d6ba6a11642cdbec4ce91fefe455920b5c073f60/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d6ba6a11642cdbec4ce91fefe455920b5c073f60/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=d6ba6a11642cdbec4ce91fefe455920b5c073f60",
      "patch": "@@ -60,6 +60,13 @@ struct tui_gen_win_info\n     return \"\";\n   }\n \n+  /* Reset this window.  WIN_TYPE must match the existing type of this\n+     window (it is only passed for self-test purposes).  The other\n+     parameters are used to set the window's size and position.  */\n+  void reset (enum tui_win_type win_type,\n+\t      int height, int width,\n+\t      int origin_x, int origin_y);\n+\n   /* Window handle.  */\n   WINDOW *handle = nullptr;\n   /* Type of window.  */\n@@ -309,7 +316,7 @@ struct tui_win_info : public tui_gen_win_info\n   void right_scroll (int num_to_scroll);\n \n   /* Can this window ever be highlighted?  */\n-  bool can_highlight = false;\n+  bool can_highlight = true;\n \n   /* Is this window highlighted?  */\n   bool is_highlighted = false;\n@@ -453,6 +460,7 @@ struct tui_cmd_window : public tui_win_info\n   tui_cmd_window ()\n     : tui_win_info (CMD_WIN)\n   {\n+    can_highlight = false;\n   }\n \n   DISABLE_COPY_AND_ASSIGN (tui_cmd_window);"
    },
    {
      "sha": "f586d703d43fdd7236edfb974f0b94452282cb65",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 113,
      "deletions": 155,
      "changes": 268,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d6ba6a11642cdbec4ce91fefe455920b5c073f60/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d6ba6a11642cdbec4ce91fefe455920b5c073f60/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=d6ba6a11642cdbec4ce91fefe455920b5c073f60",
      "patch": "@@ -43,11 +43,9 @@\n ** Static Local Decls\n ********************************/\n static void show_layout (enum tui_layout_type);\n-static void init_gen_win_info (struct tui_gen_win_info *, \n-\t\t\t       enum tui_win_type, \n-\t\t\t       int, int, int, int);\n-static void *init_and_make_win (void *, enum tui_win_type, \n-\t\t\t\tint, int, int, int, int);\n+static tui_gen_win_info *init_and_make_win (tui_gen_win_info *,\n+\t\t\t\t\t    enum tui_win_type,\n+\t\t\t\t\t    int, int, int, int, int);\n static void show_source_or_disasm_and_command (enum tui_layout_type);\n static struct tui_win_info *make_source_or_disasm_window (enum tui_win_type, \n \t\t\t\t\t\t\t  int, int);\n@@ -546,7 +544,6 @@ make_command_window (int height, int origin_y)\n \t\t\t\t\t\t 0,\n \t\t\t\t\t\t origin_y,\n \t\t\t\t\t\t DONT_BOX_WINDOW);\n-  result->can_highlight = false;\n   return result;\n }\n \n@@ -621,19 +618,16 @@ show_source_disasm_command (void)\n \ttui_win_list[SRC_WIN] = make_source_window (src_height, 0);\n       else\n \t{\n-\t  init_gen_win_info (TUI_SRC_WIN,\n-\t\t\t     TUI_SRC_WIN->type,\n-\t\t\t     src_height,\n-\t\t\t     TUI_SRC_WIN->width,\n-\t\t\t     TUI_SRC_WIN->execution_info->width,\n-\t\t\t     0);\n-\t  TUI_SRC_WIN->can_highlight = true;\n-\t  init_gen_win_info (TUI_SRC_WIN->execution_info,\n-\t\t\t     EXEC_INFO_WIN,\n-\t\t\t     src_height,\n-\t\t\t     3,\n-\t\t\t     0,\n-\t\t\t     0);\n+\t  TUI_SRC_WIN->reset (TUI_SRC_WIN->type,\n+\t\t\t      src_height,\n+\t\t\t      TUI_SRC_WIN->width,\n+\t\t\t      TUI_SRC_WIN->execution_info->width,\n+\t\t\t      0);\n+\t  TUI_SRC_WIN->execution_info->reset (EXEC_INFO_WIN,\n+\t\t\t\t\t      src_height,\n+\t\t\t\t\t      3,\n+\t\t\t\t\t      0,\n+\t\t\t\t\t      0);\n \t  tui_make_visible (TUI_SRC_WIN);\n \t  tui_make_visible (TUI_SRC_WIN->execution_info);\n \t  TUI_SRC_WIN->m_has_locator = false;\n@@ -647,37 +641,32 @@ show_source_disasm_command (void)\n \t  tui_win_list[DISASSEM_WIN]\n \t    = make_disasm_window (asm_height, src_height - 1);\n \t  locator\n-\t    = ((struct tui_gen_win_info *)\n-\t       init_and_make_win (locator,\n-\t\t\t\t  LOCATOR_WIN,\n-\t\t\t\t  2 /* 1 */ ,\n-\t\t\t\t  tui_term_width (),\n-\t\t\t\t  0,\n-\t\t\t\t  (src_height + asm_height) - 1,\n-\t\t\t\t  DONT_BOX_WINDOW));\n+\t    = init_and_make_win (locator,\n+\t\t\t\t LOCATOR_WIN,\n+\t\t\t\t 2 /* 1 */ ,\n+\t\t\t\t tui_term_width (),\n+\t\t\t\t 0,\n+\t\t\t\t (src_height + asm_height) - 1,\n+\t\t\t\t DONT_BOX_WINDOW);\n \t}\n       else\n \t{\n-\t  init_gen_win_info (locator,\n-\t\t\t     LOCATOR_WIN,\n-\t\t\t     2 /* 1 */ ,\n-\t\t\t     tui_term_width (),\n-\t\t\t     0,\n-\t\t\t     (src_height + asm_height) - 1);\n+\t  locator->reset (LOCATOR_WIN,\n+\t\t\t  2 /* 1 */ ,\n+\t\t\t  tui_term_width (),\n+\t\t\t  0,\n+\t\t\t  (src_height + asm_height) - 1);\n \t  TUI_DISASM_WIN->m_has_locator = true;\n-\t  init_gen_win_info (TUI_DISASM_WIN,\n-\t\t\t     TUI_DISASM_WIN->type,\n-\t\t\t     asm_height,\n-\t\t\t     TUI_DISASM_WIN->width,\n-\t\t\t     TUI_DISASM_WIN->execution_info->width,\n-\t\t\t     src_height - 1);\n-\t  init_gen_win_info (TUI_DISASM_WIN->execution_info,\n-\t\t\t     EXEC_INFO_WIN,\n-\t\t\t     asm_height,\n-\t\t\t     3,\n-\t\t\t     0,\n-\t\t\t     src_height - 1);\n-\t  TUI_DISASM_WIN->can_highlight = true;\n+\t  TUI_DISASM_WIN->reset (TUI_DISASM_WIN->type,\n+\t\t\t\t asm_height,\n+\t\t\t\t TUI_DISASM_WIN->width,\n+\t\t\t\t TUI_DISASM_WIN->execution_info->width,\n+\t\t\t\t src_height - 1);\n+\t  TUI_DISASM_WIN->execution_info->reset (EXEC_INFO_WIN,\n+\t\t\t\t\t\t asm_height,\n+\t\t\t\t\t\t 3,\n+\t\t\t\t\t\t 0,\n+\t\t\t\t\t\t src_height - 1);\n \t  tui_make_visible (TUI_DISASM_WIN);\n \t  tui_make_visible (TUI_DISASM_WIN->execution_info);\n \t}\n@@ -692,13 +681,11 @@ show_source_disasm_command (void)\n \t  = make_command_window (cmd_height, tui_term_height () - cmd_height);\n       else\n \t{\n-\t  init_gen_win_info (TUI_CMD_WIN,\n-\t\t\t     TUI_CMD_WIN->type,\n-\t\t\t     TUI_CMD_WIN->height,\n-\t\t\t     TUI_CMD_WIN->width,\n-\t\t\t     0,\n-\t\t\t     TUI_CMD_WIN->origin.y);\n-\t  TUI_CMD_WIN->can_highlight = false;\n+\t  TUI_CMD_WIN->reset (TUI_CMD_WIN->type,\n+\t\t\t      TUI_CMD_WIN->height,\n+\t\t\t      TUI_CMD_WIN->width,\n+\t\t\t      0,\n+\t\t\t      TUI_CMD_WIN->origin.y);\n \t  tui_make_visible (TUI_CMD_WIN);\n \t}\n       TUI_CMD_WIN->refresh_window ();\n@@ -723,7 +710,6 @@ show_data (enum tui_layout_type new_layout)\n   tui_make_all_invisible ();\n   tui_make_invisible (locator);\n   make_data_window (&tui_win_list[DATA_WIN], data_height, 0);\n-  TUI_DATA_WIN->can_highlight = true;\n   if (new_layout == SRC_DATA_COMMAND)\n     win_type = SRC_WIN;\n   else\n@@ -739,39 +725,35 @@ show_data (enum tui_layout_type new_layout)\n \ttui_win_list[win_type]\n \t  = make_disasm_window (src_height, data_height - 1);\n       locator\n-\t= ((struct tui_gen_win_info *)\n-\t   init_and_make_win (locator,\n-\t\t\t      LOCATOR_WIN,\n-\t\t\t      2 /* 1 */ ,\n-\t\t\t      tui_term_width (),\n-\t\t\t      0,\n-\t\t\t      total_height - 1,\n-\t\t\t      DONT_BOX_WINDOW));\n+\t= init_and_make_win (locator,\n+\t\t\t     LOCATOR_WIN,\n+\t\t\t     2 /* 1 */ ,\n+\t\t\t     tui_term_width (),\n+\t\t\t     0,\n+\t\t\t     total_height - 1,\n+\t\t\t     DONT_BOX_WINDOW);\n       base = (tui_source_window_base *) tui_win_list[win_type];\n     }\n   else\n     {\n       base = (tui_source_window_base *) tui_win_list[win_type];\n-      init_gen_win_info (tui_win_list[win_type],\n-\t\t\t tui_win_list[win_type]->type,\n-\t\t\t src_height,\n-\t\t\t tui_win_list[win_type]->width,\n-\t\t\t base->execution_info->width,\n-\t\t\t data_height - 1);\n-      init_gen_win_info (base->execution_info,\n-\t\t\t EXEC_INFO_WIN,\n-\t\t\t src_height,\n-\t\t\t 3,\n-\t\t\t 0,\n-\t\t\t data_height - 1);\n+      tui_win_list[win_type]->reset (tui_win_list[win_type]->type,\n+\t\t\t\t     src_height,\n+\t\t\t\t     tui_win_list[win_type]->width,\n+\t\t\t\t     base->execution_info->width,\n+\t\t\t\t     data_height - 1);\n+      base->execution_info->reset (EXEC_INFO_WIN,\n+\t\t\t\t   src_height,\n+\t\t\t\t   3,\n+\t\t\t\t   0,\n+\t\t\t\t   data_height - 1);\n       tui_make_visible (tui_win_list[win_type]);\n       tui_make_visible (base->execution_info);\n-      init_gen_win_info (locator,\n-\t\t\t LOCATOR_WIN,\n-\t\t\t 2 /* 1 */ ,\n-\t\t\t tui_term_width (),\n-\t\t\t 0,\n-\t\t\t total_height - 1);\n+      locator->reset (LOCATOR_WIN,\n+\t\t      2 /* 1 */ ,\n+\t\t      tui_term_width (),\n+\t\t      0,\n+\t\t      total_height - 1);\n     }\n   base->m_has_locator = true;\n   tui_make_visible (locator);\n@@ -781,67 +763,50 @@ show_data (enum tui_layout_type new_layout)\n   tui_set_current_layout_to (new_layout);\n }\n \n-/* init_gen_win_info().\n- */\n-static void\n-init_gen_win_info (struct tui_gen_win_info *win_info, \n-\t\t   enum tui_win_type type,\n-\t\t   int height, int width, \n-\t\t   int origin_x, int origin_y)\n+void\n+tui_gen_win_info::reset (enum tui_win_type win_type,\n+\t\t\t int height_, int width_,\n+\t\t\t int origin_x_, int origin_y_)\n {\n-  int h = height;\n+  int h = height_;\n+\n+  gdb_assert (type == win_type);\n \n-  win_info->type = type;\n-  win_info->width = width;\n-  win_info->height = h;\n+  width = width_;\n+  height = h;\n   if (h > 1)\n     {\n-      win_info->viewport_height = h - 1;\n-      if (win_info->type != CMD_WIN)\n-\twin_info->viewport_height--;\n+      viewport_height = h - 1;\n+      if (type != CMD_WIN)\n+\tviewport_height--;\n     }\n   else\n-    win_info->viewport_height = 1;\n-  win_info->origin.x = origin_x;\n-  win_info->origin.y = origin_y;\n-\n-  return;\n-}\t\t\t\t/* init_gen_win_info */\n+    viewport_height = 1;\n+  origin.x = origin_x_;\n+  origin.y = origin_y_;\n+}\n \n /* init_and_make_win().\n  */\n-static void *\n-init_and_make_win (void *opaque_win_info, \n+static tui_gen_win_info *\n+init_and_make_win (tui_gen_win_info *win_info, \n \t\t   enum tui_win_type win_type,\n \t\t   int height, int width, \n \t\t   int origin_x, int origin_y,\n \t\t   int box_it)\n {\n-  struct tui_gen_win_info *generic;\n-\n-  if (opaque_win_info == NULL)\n+  if (win_info == NULL)\n     {\n       if (tui_win_is_auxillary (win_type))\n-\topaque_win_info = (void *) new tui_gen_win_info (win_type);\n+\twin_info = new tui_gen_win_info (win_type);\n       else\n-\topaque_win_info = (void *) tui_alloc_win_info (win_type);\n+\twin_info = tui_alloc_win_info (win_type);\n     }\n-  if (tui_win_is_auxillary (win_type))\n-    generic = (struct tui_gen_win_info *) opaque_win_info;\n-  else\n-    generic = (struct tui_win_info *) opaque_win_info;\n \n-  init_gen_win_info (generic, win_type, height, width, origin_x, origin_y);\n-  if (!tui_win_is_auxillary (win_type))\n-    {\n-      if (generic->type == CMD_WIN)\n-\t((struct tui_win_info *) opaque_win_info)->can_highlight = false;\n-      else\n-\t((struct tui_win_info *) opaque_win_info)->can_highlight = true;\n-    }\n-  tui_make_window (generic, box_it);\n+  win_info->reset (win_type, height, width, origin_x, origin_y);\n+  tui_make_window (win_info, box_it);\n \n-  return opaque_win_info;\n+  return win_info;\n }\n \n \n@@ -910,39 +875,34 @@ show_source_or_disasm_and_command (enum tui_layout_type layout_type)\n \t  else\n \t    *win_info_ptr = make_disasm_window (src_height - 1, 0);\n \t  locator\n-\t    = ((struct tui_gen_win_info *)\n-\t       init_and_make_win (locator,\n-\t\t\t\t  LOCATOR_WIN,\n-\t\t\t\t  2 /* 1 */ ,\n-\t\t\t\t  tui_term_width (),\n-\t\t\t\t  0,\n-\t\t\t\t  src_height - 1,\n-\t\t\t\t  DONT_BOX_WINDOW));\n+\t    = init_and_make_win (locator,\n+\t\t\t\t LOCATOR_WIN,\n+\t\t\t\t 2 /* 1 */ ,\n+\t\t\t\t tui_term_width (),\n+\t\t\t\t 0,\n+\t\t\t\t src_height - 1,\n+\t\t\t\t DONT_BOX_WINDOW);\n \t  base = (tui_source_window_base *) *win_info_ptr;\n \t}\n       else\n \t{\n \t  base = (tui_source_window_base *) *win_info_ptr;\n-\t  init_gen_win_info (locator,\n-\t\t\t     LOCATOR_WIN,\n-\t\t\t     2 /* 1 */ ,\n-\t\t\t     tui_term_width (),\n-\t\t\t     0,\n-\t\t\t     src_height - 1);\n+\t  locator->reset (LOCATOR_WIN,\n+\t\t\t  2 /* 1 */ ,\n+\t\t\t  tui_term_width (),\n+\t\t\t  0,\n+\t\t\t  src_height - 1);\n \t  base->m_has_locator = true;\n-\t  init_gen_win_info (*win_info_ptr,\n-\t\t\t     (*win_info_ptr)->type,\n-\t\t\t     src_height - 1,\n-\t\t\t     (*win_info_ptr)->width,\n-\t\t\t     base->execution_info->width,\n-\t\t\t     0);\n-\t  init_gen_win_info (base->execution_info,\n-\t\t\t     EXEC_INFO_WIN,\n-\t\t\t     src_height - 1,\n-\t\t\t     3,\n-\t\t\t     0,\n-\t\t\t     0);\n-\t  base->can_highlight = true;\n+\t  (*win_info_ptr)->reset ((*win_info_ptr)->type,\n+\t\t\t\t  src_height - 1,\n+\t\t\t\t  (*win_info_ptr)->width,\n+\t\t\t\t  base->execution_info->width,\n+\t\t\t\t  0);\n+\t  base->execution_info->reset (EXEC_INFO_WIN,\n+\t\t\t\t       src_height - 1,\n+\t\t\t\t       3,\n+\t\t\t\t       0,\n+\t\t\t\t       0);\n \t  tui_make_visible (*win_info_ptr);\n \t  tui_make_visible (base->execution_info);\n \t}\n@@ -960,13 +920,11 @@ show_source_or_disasm_and_command (enum tui_layout_type layout_type)\n \t}\n       else\n \t{\n-\t  init_gen_win_info (TUI_CMD_WIN,\n-\t\t\t     TUI_CMD_WIN->type,\n-\t\t\t     TUI_CMD_WIN->height,\n-\t\t\t     TUI_CMD_WIN->width,\n-\t\t\t     TUI_CMD_WIN->origin.x,\n-\t\t\t     TUI_CMD_WIN->origin.y);\n-\t  TUI_CMD_WIN->can_highlight = false;\n+\t  TUI_CMD_WIN->reset (TUI_CMD_WIN->type,\n+\t\t\t      TUI_CMD_WIN->height,\n+\t\t\t      TUI_CMD_WIN->width,\n+\t\t\t      TUI_CMD_WIN->origin.x,\n+\t\t\t      TUI_CMD_WIN->origin.y);\n \t  tui_make_visible (TUI_CMD_WIN);\n \t}\n       tui_set_current_layout_to (layout_type);"
    }
  ]
}