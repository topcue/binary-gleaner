{
  "sha": "b0556968af05310748d7a1286b8d7639de67831e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjA1NTY5NjhhZjA1MzEwNzQ4ZDdhMTI4NmI4ZDc2MzlkZTY3ODMxZQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-07-22T11:08:05Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-07-22T11:08:05Z"
    },
    "message": "x86: fold duplicate vector register printing code\n\nThe bulk of OP_XMM() can be easily reused also for OP_EX(). Break the\nshared logic out of the function, and invoke the new helper from both\nplaces.",
    "tree": {
      "sha": "2db21e8f9eaee82c7026a39f64a0ac47934d7f9c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2db21e8f9eaee82c7026a39f64a0ac47934d7f9c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b0556968af05310748d7a1286b8d7639de67831e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b0556968af05310748d7a1286b8d7639de67831e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b0556968af05310748d7a1286b8d7639de67831e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b0556968af05310748d7a1286b8d7639de67831e/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "605228fcaf91a86b5ae898415374a9382c85f76f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/605228fcaf91a86b5ae898415374a9382c85f76f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/605228fcaf91a86b5ae898415374a9382c85f76f"
    }
  ],
  "stats": {
    "total": 107,
    "additions": 33,
    "deletions": 74
  },
  "files": [
    {
      "sha": "e750c94704a2e7b0d7f7980f830c8aed120354a6",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 33,
      "deletions": 74,
      "changes": 107,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b0556968af05310748d7a1286b8d7639de67831e/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b0556968af05310748d7a1286b8d7639de67831e/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=b0556968af05310748d7a1286b8d7639de67831e",
      "patch": "@@ -12530,20 +12530,10 @@ OP_MMX (int bytemode ATTRIBUTE_UNUSED, int sizeflag ATTRIBUTE_UNUSED)\n }\n \n static void\n-OP_XMM (int bytemode, int sizeflag ATTRIBUTE_UNUSED)\n+print_vector_reg (unsigned int reg, int bytemode)\n {\n-  int reg = modrm.reg;\n   const char **names;\n \n-  USED_REX (REX_R);\n-  if (rex & REX_R)\n-    reg += 8;\n-  if (vex.evex)\n-    {\n-      if (!vex.r)\n-\treg += 16;\n-    }\n-\n   if (bytemode == xmmq_mode\n       || bytemode == evex_half_bcst_xmmq_mode)\n     {\n@@ -12564,7 +12554,6 @@ OP_XMM (int bytemode, int sizeflag ATTRIBUTE_UNUSED)\n     names = names_ymm;\n   else if (bytemode == tmm_mode)\n     {\n-      modrm.reg = reg;\n       if (reg >= 8)\n \t{\n \t  oappend (\"(bad)\");\n@@ -12574,7 +12563,14 @@ OP_XMM (int bytemode, int sizeflag ATTRIBUTE_UNUSED)\n     }\n   else if (need_vex\n \t   && bytemode != xmm_mode\n-\t   && bytemode != scalar_mode)\n+\t   && bytemode != scalar_mode\n+\t   && bytemode != xmmdw_mode\n+\t   && bytemode != xmmqd_mode\n+\t   && bytemode != xmm_mb_mode\n+\t   && bytemode != xmm_mw_mode\n+\t   && bytemode != xmm_md_mode\n+\t   && bytemode != xmm_mq_mode\n+\t   && bytemode != vex_scalar_w_dq_mode)\n     {\n       switch (vex.length)\n \t{\n@@ -12604,6 +12600,26 @@ OP_XMM (int bytemode, int sizeflag ATTRIBUTE_UNUSED)\n   oappend (names[reg]);\n }\n \n+static void\n+OP_XMM (int bytemode, int sizeflag ATTRIBUTE_UNUSED)\n+{\n+  unsigned int reg = modrm.reg;\n+\n+  USED_REX (REX_R);\n+  if (rex & REX_R)\n+    reg += 8;\n+  if (vex.evex)\n+    {\n+      if (!vex.r)\n+\treg += 16;\n+    }\n+\n+  if (bytemode == tmm_mode)\n+    modrm.reg = reg;\n+\n+  print_vector_reg (reg, bytemode);\n+}\n+\n static void\n OP_EM (int bytemode, int sizeflag)\n {\n@@ -12679,7 +12695,6 @@ static void\n OP_EX (int bytemode, int sizeflag)\n {\n   int reg;\n-  const char **names;\n \n   /* Skip mod/rm byte.  */\n   MODRM_CHECK;\n@@ -12708,66 +12723,10 @@ OP_EX (int bytemode, int sizeflag)\n \t  || bytemode == q_swap_mode))\n     swap_operand ();\n \n-  if (need_vex\n-      && bytemode != xmm_mode\n-      && bytemode != xmmdw_mode\n-      && bytemode != xmmqd_mode\n-      && bytemode != xmm_mb_mode\n-      && bytemode != xmm_mw_mode\n-      && bytemode != xmm_md_mode\n-      && bytemode != xmm_mq_mode\n-      && bytemode != xmmq_mode\n-      && bytemode != evex_half_bcst_xmmq_mode\n-      && bytemode != ymm_mode\n-      && bytemode != tmm_mode\n-      && bytemode != vex_scalar_w_dq_mode)\n-    {\n-      switch (vex.length)\n-\t{\n-\tcase 128:\n-\t  names = names_xmm;\n-\t  break;\n-\tcase 256:\n-\t  names = names_ymm;\n-\t  break;\n-\tcase 512:\n-\t  names = names_zmm;\n-\t  break;\n-\tdefault:\n-\t  abort ();\n-\t}\n-    }\n-  else if (bytemode == xmmq_mode\n-\t   || bytemode == evex_half_bcst_xmmq_mode)\n-    {\n-      switch (vex.length)\n-\t{\n-\tcase 128:\n-\tcase 256:\n-\t  names = names_xmm;\n-\t  break;\n-\tcase 512:\n-\t  names = names_ymm;\n-\t  break;\n-\tdefault:\n-\t  abort ();\n-\t}\n-    }\n-  else if (bytemode == tmm_mode)\n-    {\n-      modrm.rm = reg;\n-      if (reg >= 8)\n-\t{\n-\t  oappend (\"(bad)\");\n-\t  return;\n-\t}\n-      names = names_tmm;\n-    }\n-  else if (bytemode == ymm_mode)\n-    names = names_ymm;\n-  else\n-    names = names_xmm;\n-  oappend (names[reg]);\n+  if (bytemode == tmm_mode)\n+    modrm.rm = reg;\n+\n+  print_vector_reg (reg, bytemode);\n }\n \n static void"
    }
  ]
}