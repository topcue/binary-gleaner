{
  "sha": "cf28cfef6006c41b74af126bc6ef26590d7bd1b9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2YyOGNmZWY2MDA2YzQxYjc0YWYxMjZiYzZlZjI2NTkwZDdiZDFiOQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-23T12:53:31Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-23T12:56:12Z"
    },
    "message": "ECOFF archive uninitialised read\n\n\t* ecoff.c (_bfd_ecoff_slurp_armap): Sanity check parsed_size and\n\tsymbol count.  Allocate an extra byte to ensure name strings\n\tare terminated.  Sanity check name offsets.  Release memory on\n\terror return.",
    "tree": {
      "sha": "9b3b94214b920d26770ddddcacb9a10b4a771093",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9b3b94214b920d26770ddddcacb9a10b4a771093"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cf28cfef6006c41b74af126bc6ef26590d7bd1b9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cf28cfef6006c41b74af126bc6ef26590d7bd1b9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cf28cfef6006c41b74af126bc6ef26590d7bd1b9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cf28cfef6006c41b74af126bc6ef26590d7bd1b9/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5e737279c6e832a757f0326128e5a5f96fbdd291",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e737279c6e832a757f0326128e5a5f96fbdd291",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5e737279c6e832a757f0326128e5a5f96fbdd291"
    }
  ],
  "stats": {
    "total": 42,
    "additions": 32,
    "deletions": 10
  },
  "files": [
    {
      "sha": "646868762cbf2fe0c9636185d4bd77f07e774399",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cf28cfef6006c41b74af126bc6ef26590d7bd1b9/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cf28cfef6006c41b74af126bc6ef26590d7bd1b9/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=cf28cfef6006c41b74af126bc6ef26590d7bd1b9",
      "patch": "@@ -1,3 +1,10 @@\n+2020-03-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* ecoff.c (_bfd_ecoff_slurp_armap): Sanity check parsed_size and\n+\tsymbol count.  Allocate an extra byte to ensure name strings\n+\tare terminated.  Sanity check name offsets.  Release memory on\n+\terror return.\n+\n 2020-03-23  Alan Modra  <amodra@gmail.com>\n \n \t* i386msdos.c (msdos_object_p): Don't access e_lfanew when that"
    },
    {
      "sha": "50a133b7bac30d0ecdfa48e3390cff61c62b8bde",
      "filename": "bfd/ecoff.c",
      "status": "modified",
      "additions": 25,
      "deletions": 10,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cf28cfef6006c41b74af126bc6ef26590d7bd1b9/bfd/ecoff.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cf28cfef6006c41b74af126bc6ef26590d7bd1b9/bfd/ecoff.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ecoff.c?ref=cf28cfef6006c41b74af126bc6ef26590d7bd1b9",
      "patch": "@@ -2883,7 +2883,7 @@ _bfd_ecoff_slurp_armap (bfd *abfd)\n   char nextname[17];\n   unsigned int i;\n   struct areltdata *mapdata;\n-  bfd_size_type parsed_size;\n+  bfd_size_type parsed_size, stringsize;\n   char *raw_armap;\n   struct artdata *ardata;\n   unsigned int count;\n@@ -2895,9 +2895,9 @@ _bfd_ecoff_slurp_armap (bfd *abfd)\n   /* Get the name of the first element.  */\n   i = bfd_bread ((void *) nextname, (bfd_size_type) 16, abfd);\n   if (i == 0)\n-      return TRUE;\n+    return TRUE;\n   if (i != 16)\n-      return FALSE;\n+    return FALSE;\n \n   if (bfd_seek (abfd, (file_ptr) -16, SEEK_CUR) != 0)\n     return FALSE;\n@@ -2942,24 +2942,30 @@ _bfd_ecoff_slurp_armap (bfd *abfd)\n   parsed_size = mapdata->parsed_size;\n   free (mapdata);\n \n-  raw_armap = (char *) _bfd_alloc_and_read (abfd, parsed_size, parsed_size);\n-  if (raw_armap == NULL)\n+  if (parsed_size + 1 < 9)\n     {\n-      if (bfd_get_error () != bfd_error_system_call)\n-\tbfd_set_error (bfd_error_malformed_archive);\n+      bfd_set_error (bfd_error_malformed_archive);\n       return FALSE;\n     }\n \n+  raw_armap = (char *) _bfd_alloc_and_read (abfd, parsed_size + 1, parsed_size);\n+  if (raw_armap == NULL)\n+    return FALSE;\n+  raw_armap[parsed_size] = 0;\n+\n   ardata->tdata = (void *) raw_armap;\n \n   count = H_GET_32 (abfd, raw_armap);\n+  if ((parsed_size - 8) / 8 < count)\n+    goto error_malformed;\n \n   ardata->symdef_count = 0;\n   ardata->cache = NULL;\n \n   /* This code used to overlay the symdefs over the raw archive data,\n      but that doesn't work on a 64 bit host.  */\n   stringbase = raw_armap + count * 8 + 8;\n+  stringsize = parsed_size - (count * 8 + 8);\n \n #ifdef CHECK_ARMAP_HASH\n   {\n@@ -3007,7 +3013,7 @@ _bfd_ecoff_slurp_armap (bfd *abfd)\n   amt *= sizeof (carsym);\n   symdef_ptr = (carsym *) bfd_alloc (abfd, amt);\n   if (!symdef_ptr)\n-    return FALSE;\n+    goto error_exit;\n \n   ardata->symdefs = symdef_ptr;\n \n@@ -3020,6 +3026,8 @@ _bfd_ecoff_slurp_armap (bfd *abfd)\n       if (file_offset == 0)\n \tcontinue;\n       name_offset = H_GET_32 (abfd, raw_ptr);\n+      if (name_offset > stringsize)\n+\tgoto error_malformed;\n       symdef_ptr->name = stringbase + name_offset;\n       symdef_ptr->file_offset = file_offset;\n       ++symdef_ptr;\n@@ -3028,10 +3036,17 @@ _bfd_ecoff_slurp_armap (bfd *abfd)\n   ardata->first_file_filepos = bfd_tell (abfd);\n   /* Pad to an even boundary.  */\n   ardata->first_file_filepos += ardata->first_file_filepos % 2;\n-\n   abfd->has_armap = TRUE;\n-\n   return TRUE;\n+\n+ error_malformed:\n+  bfd_set_error (bfd_error_malformed_archive);\n+ error_exit:\n+  ardata->symdef_count = 0;\n+  ardata->symdefs = NULL;\n+  ardata->tdata = NULL;\n+  bfd_release (abfd, raw_armap);\n+  return FALSE;\n }\n \n /* Write out an armap.  */"
    }
  ]
}