{
  "sha": "3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2NhYmI2YjA2OTRiNjVjN2I1ZWQ4MDA4MjJjYTA4YmQ4OTlmYzFkMQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-22T20:55:16Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-22T20:55:16Z"
    },
    "message": "gdb: add type::fields / type::set_fields\n\nAdd the `fields` and `set_fields` methods on `struct type`, in order to\nremove the `TYPE_FIELDS` macro.  In this patch, the `TYPE_FIELDS` macro\nis changed to the `type::fields`, so all the call sites that use it to\nset the fields array are changed to use `type::set_fields`.  The next\npatch will remove `TYPE_FIELDS` entirely.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <fields, set_fields>: New methods.\n\t(TYPE_FIELDS): Use type::fields.  Change all call sites that\n\tmodify the propery to use type::set_fields instead.\n\nChange-Id: I05174ce68f2ce3fccdf5d8b469ff141f14886b33",
    "tree": {
      "sha": "58ba2ab20a5c34f30dff225f099dea06d0ef531e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/58ba2ab20a5c34f30dff225f099dea06d0ef531e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1f704f761b34e145f5eabdc222301ce6e9ec9102",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1f704f761b34e145f5eabdc222301ce6e9ec9102",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1f704f761b34e145f5eabdc222301ce6e9ec9102"
    }
  ],
  "stats": {
    "total": 200,
    "additions": 114,
    "deletions": 86
  },
  "files": [
    {
      "sha": "4b4039fae35ef8caa8e9c48ecc8423a31f394246",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
      "patch": "@@ -1,3 +1,9 @@\n+2020-05-22  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct type) <fields, set_fields>: New methods.\n+\t(TYPE_FIELDS): Use type::fields.  Change all call sites that\n+\tmodify the propery to use type::set_fields instead.\n+\n 2020-05-22  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (TYPE_NFIELDS): Remove.  Change all cal sites to use"
    },
    {
      "sha": "d4377a1a495e6e6e70d8d8245ec2f0657123b50e",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 14,
      "deletions": 10,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
      "patch": "@@ -8021,7 +8021,6 @@ empty_record (struct type *templ)\n   struct type *type = alloc_type_copy (templ);\n \n   type->set_code (TYPE_CODE_STRUCT);\n-  TYPE_FIELDS (type) = NULL;\n   INIT_NONE_SPECIFIC (type);\n   type->set_name (\"<empty>\");\n   TYPE_LENGTH (type) = 0;\n@@ -8078,9 +8077,8 @@ ada_template_to_fixed_record_type_1 (struct type *type,\n   rtype->set_code (TYPE_CODE_STRUCT);\n   INIT_NONE_SPECIFIC (rtype);\n   rtype->set_num_fields (nfields);\n-  TYPE_FIELDS (rtype) = (struct field *)\n-    TYPE_ALLOC (rtype, nfields * sizeof (struct field));\n-  memset (TYPE_FIELDS (rtype), 0, sizeof (struct field) * nfields);\n+  rtype->set_fields\n+   ((struct field *) TYPE_ZALLOC (rtype, nfields * sizeof (struct field)));\n   rtype->set_name (ada_type_name (type));\n   TYPE_FIXED_INSTANCE (rtype) = 1;\n \n@@ -8353,10 +8351,14 @@ template_to_static_fixed_type (struct type *type0)\n \t      type->set_code (type0->code ());\n \t      INIT_NONE_SPECIFIC (type);\n \t      type->set_num_fields (nfields);\n-\t      TYPE_FIELDS (type) = (struct field *)\n-\t\tTYPE_ALLOC (type, nfields * sizeof (struct field));\n-\t      memcpy (TYPE_FIELDS (type), TYPE_FIELDS (type0),\n+\n+\t      field *fields =\n+\t\t((struct field *)\n+\t\t TYPE_ALLOC (type, nfields * sizeof (struct field)));\n+\t      memcpy (fields, TYPE_FIELDS (type0),\n \t\t      sizeof (struct field) * nfields);\n+\t      type->set_fields (fields);\n+\n \t      type->set_name (ada_type_name (type0));\n \t      TYPE_FIXED_INSTANCE (type) = 1;\n \t      TYPE_LENGTH (type) = 0;\n@@ -8402,10 +8404,12 @@ to_record_with_fixed_variant_part (struct type *type, const gdb_byte *valaddr,\n   rtype->set_code (TYPE_CODE_STRUCT);\n   INIT_NONE_SPECIFIC (rtype);\n   rtype->set_num_fields (nfields);\n-  TYPE_FIELDS (rtype) =\n+\n+  field *fields =\n     (struct field *) TYPE_ALLOC (rtype, nfields * sizeof (struct field));\n-  memcpy (TYPE_FIELDS (rtype), TYPE_FIELDS (type),\n-          sizeof (struct field) * nfields);\n+  memcpy (fields, TYPE_FIELDS (type), sizeof (struct field) * nfields);\n+  rtype->set_fields (fields);\n+\n   rtype->set_name (ada_type_name (type));\n   TYPE_FIXED_INSTANCE (rtype) = 1;\n   TYPE_LENGTH (rtype) = TYPE_LENGTH (type);"
    },
    {
      "sha": "33bf6523e905bb2a9f54ab3e7e007c9795fba18c",
      "filename": "gdb/buildsym.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/buildsym.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/buildsym.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/buildsym.c?ref=3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
      "patch": "@@ -272,8 +272,9 @@ buildsym_compunit::finish_block_internal\n \t  if (nparams > 0)\n \t    {\n \t      ftype->set_num_fields (nparams);\n-\t      TYPE_FIELDS (ftype) = (struct field *)\n-\t\tTYPE_ALLOC (ftype, nparams * sizeof (struct field));\n+\t      ftype->set_fields\n+\t\t((struct field *)\n+\t\t TYPE_ALLOC (ftype, nparams * sizeof (struct field)));\n \n \t      iparams = 0;\n \t      /* Here we want to directly access the dictionary, because"
    },
    {
      "sha": "9b2f638d748f0ac2dde7b946810eedc50600e0ff",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 10,
      "deletions": 12,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
      "patch": "@@ -1456,12 +1456,10 @@ patch_type (struct type *type, struct type *real_type)\n \n   TYPE_LENGTH (target) = TYPE_LENGTH (real_target);\n   target->set_num_fields (real_target->num_fields ());\n-  TYPE_FIELDS (target) = (struct field *) TYPE_ALLOC (target,\n-\t\t\t\t\t\t      field_size);\n \n-  memcpy (TYPE_FIELDS (target), \n-\t  TYPE_FIELDS (real_target), \n-\t  field_size);\n+  field *fields = (struct field *) TYPE_ALLOC (target, field_size);\n+  memcpy (fields, real_target->fields (), field_size);\n+  target->set_fields (fields);\n \n   if (real_target->name ())\n     {\n@@ -1882,7 +1880,7 @@ decode_base_type (struct coff_symbol *cs,\n \t  type->set_name (NULL);\n \t  INIT_CPLUS_SPECIFIC (type);\n \t  TYPE_LENGTH (type) = 0;\n-\t  TYPE_FIELDS (type) = 0;\n+\t  type->set_fields (nullptr);\n \t  type->set_num_fields (0);\n \t}\n       else\n@@ -1902,7 +1900,7 @@ decode_base_type (struct coff_symbol *cs,\n \t  type->set_name (NULL);\n \t  INIT_CPLUS_SPECIFIC (type);\n \t  TYPE_LENGTH (type) = 0;\n-\t  TYPE_FIELDS (type) = 0;\n+\t  type->set_fields (nullptr);\n \t  type->set_num_fields (0);\n \t}\n       else\n@@ -1923,7 +1921,7 @@ decode_base_type (struct coff_symbol *cs,\n \t  type->set_code (TYPE_CODE_ENUM);\n \t  type->set_name (NULL);\n \t  TYPE_LENGTH (type) = 0;\n-\t  TYPE_FIELDS (type) = 0;\n+\t  type->set_fields (nullptr);\n \t  type->set_num_fields (0);\n \t}\n       else\n@@ -2041,8 +2039,8 @@ coff_read_struct_type (int index, int length, int lastsym,\n   /* Now create the vector of fields, and record how big it is.  */\n \n   type->set_num_fields (nfields);\n-  TYPE_FIELDS (type) = (struct field *)\n-    TYPE_ALLOC (type, sizeof (struct field) * nfields);\n+  type->set_fields\n+    ((struct field *) TYPE_ALLOC (type, sizeof (struct field) * nfields));\n \n   /* Copy the saved-up fields into the field vector.  */\n \n@@ -2121,8 +2119,8 @@ coff_read_enum_type (int index, int length, int lastsym,\n     TYPE_LENGTH (type) = gdbarch_int_bit (gdbarch) / TARGET_CHAR_BIT;\n   type->set_code (TYPE_CODE_ENUM);\n   type->set_num_fields (nsyms);\n-  TYPE_FIELDS (type) = (struct field *)\n-    TYPE_ALLOC (type, sizeof (struct field) * nsyms);\n+  type->set_fields\n+    ((struct field *) TYPE_ALLOC (type, sizeof (struct field) * nsyms));\n \n   /* Find the symbols for the values and put them into the type.\n      The symbols can be found in the symlist that we put them on"
    },
    {
      "sha": "c0694ed312f316b3e0b2a3245e80c850f784d2f1",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
      "patch": "@@ -309,8 +309,8 @@ attach_fields_to_type (struct ctf_field_info *fip, struct type *type)\n \n   /* Record the field count, allocate space for the array of fields.  */\n   type->set_num_fields (nfields);\n-  TYPE_FIELDS (type)\n-    = (struct field *) TYPE_ZALLOC (type, sizeof (struct field) * nfields);\n+  type->set_fields\n+    ((struct field *) TYPE_ZALLOC (type, sizeof (struct field) * nfields));\n \n   /* Copy the saved-up fields into the field vector.  */\n   for (int i = 0; i < nfields; ++i)\n@@ -1143,8 +1143,8 @@ add_stt_func (struct ctf_context *ccp, unsigned long idx)\n \n   /* If argc is 0, it has a \"void\" type.  */\n   if (argc != 0)\n-    TYPE_FIELDS (ftype)\n-      = (struct field *) TYPE_ZALLOC (ftype, argc * sizeof (struct field));\n+    ftype->set_fields\n+      ((struct field *) TYPE_ZALLOC (ftype, argc * sizeof (struct field)));\n \n   /* TYPE_FIELD_TYPE must never be NULL.  Fill it with void_type, if failed\n      to find the argument type.  */"
    },
    {
      "sha": "08d235865b064af1278f7b6921296326f7d5a72c",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 11,
      "deletions": 10,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
      "patch": "@@ -9365,8 +9365,8 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n       type->set_num_fields (3);\n       /* Save the field we care about.  */\n       struct field saved_field = TYPE_FIELD (type, 0);\n-      TYPE_FIELDS (type)\n-\t= (struct field *) TYPE_ZALLOC (type, 3 * sizeof (struct field));\n+      type->set_fields\n+\t((struct field *) TYPE_ZALLOC (type, 3 * sizeof (struct field)));\n \n       /* Put the discriminant at index 0.  */\n       TYPE_FIELD_TYPE (type, 0) = field_type;\n@@ -9460,7 +9460,7 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n \t\t\t\t\t       * sizeof (struct field)));\n       memcpy (new_fields + 1, TYPE_FIELDS (type),\n \t      type->num_fields () * sizeof (struct field));\n-      TYPE_FIELDS (type) = new_fields;\n+      type->set_fields (new_fields);\n       type->set_num_fields (type->num_fields () + 1);\n \n       /* Install the discriminant at index 0 in the union.  */\n@@ -9510,7 +9510,7 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n \t  if (sub_type->num_fields () > 0)\n \t    {\n \t      sub_type->set_num_fields (sub_type->num_fields () - 1);\n-\t      ++TYPE_FIELDS (sub_type);\n+\t      sub_type->set_fields (sub_type->fields () + 1);\n \t    }\n \t  TYPE_FIELD_NAME (type, i) = variant_name;\n \t  sub_type->set_name\n@@ -14805,8 +14805,8 @@ dwarf2_attach_fields_to_type (struct field_info *fip, struct type *type,\n   /* Record the field count, allocate space for the array of fields,\n      and create blank accessibility bitfields if necessary.  */\n   type->set_num_fields (nfields);\n-  TYPE_FIELDS (type) = (struct field *)\n-    TYPE_ZALLOC (type, sizeof (struct field) * nfields);\n+  type->set_fields\n+    ((struct field *) TYPE_ZALLOC (type, sizeof (struct field) * nfields));\n \n   if (fip->non_public_fields && cu->language != language_ada)\n     {\n@@ -15934,8 +15934,9 @@ update_enumeration_type_from_children (struct die_info *die,\n   if (!fields.empty ())\n     {\n       type->set_num_fields (fields.size ());\n-      TYPE_FIELDS (type) = (struct field *)\n-\tTYPE_ALLOC (type, sizeof (struct field) * fields.size ());\n+      type->set_fields\n+\t((struct field *)\n+\t TYPE_ALLOC (type, sizeof (struct field) * fields.size ()));\n       memcpy (TYPE_FIELDS (type), fields.data (),\n \t      sizeof (struct field) * fields.size ());\n     }\n@@ -17085,8 +17086,8 @@ read_subroutine_type (struct die_info *die, struct dwarf2_cu *cu)\n \n       /* Allocate storage for parameters and fill them in.  */\n       ftype->set_num_fields (nparams);\n-      TYPE_FIELDS (ftype) = (struct field *)\n-\tTYPE_ZALLOC (ftype, nparams * sizeof (struct field));\n+      ftype->set_fields\n+\t((struct field *) TYPE_ZALLOC (ftype, nparams * sizeof (struct field)));\n \n       /* TYPE_FIELD_TYPE must never be NULL.  Pre-fill the array to ensure it\n \t even if we error out during the parameters reading below.  */"
    },
    {
      "sha": "069cf5ddbc42881525034f57c5ec46cee4c4d7aa",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
      "patch": "@@ -683,8 +683,8 @@ fake_method::fake_method (type_instance_flags flags,\n      allocate memory for auxiliary fields, and free the memory ourselves\n      when we are done with it.  */\n   type->set_num_fields (num_types);\n-  TYPE_FIELDS (type) = (struct field *)\n-    xzalloc (sizeof (struct field) * num_types);\n+  type->set_fields\n+    ((struct field *) xzalloc (sizeof (struct field) * num_types));\n \n   while (num_types-- > 0)\n     TYPE_FIELD_TYPE (type, num_types) = param_types[num_types];"
    },
    {
      "sha": "d1623457a134482159c638ecf002cd14d9457858",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 28,
      "deletions": 25,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
      "patch": "@@ -563,8 +563,8 @@ lookup_function_type_with_arguments (struct type *type,\n     }\n \n   fn->set_num_fields (nparams);\n-  TYPE_FIELDS (fn)\n-    = (struct field *) TYPE_ZALLOC (fn, nparams * sizeof (struct field));\n+  fn->set_fields\n+    ((struct field *) TYPE_ZALLOC (fn, nparams * sizeof (struct field)));\n   for (i = 0; i < nparams; ++i)\n     TYPE_FIELD_TYPE (fn, i) = param_types[i];\n \n@@ -1282,8 +1282,8 @@ create_array_type_with_stride (struct type *result_type,\n   TYPE_TARGET_TYPE (result_type) = element_type;\n \n   result_type->set_num_fields (1);\n-  TYPE_FIELDS (result_type) =\n-    (struct field *) TYPE_ZALLOC (result_type, sizeof (struct field));\n+  result_type->set_fields\n+    ((struct field *) TYPE_ZALLOC (result_type, sizeof (struct field)));\n   TYPE_INDEX_TYPE (result_type) = range_type;\n   if (byte_stride_prop != NULL)\n     result_type->add_dyn_prop (DYN_PROP_BYTE_STRIDE, *byte_stride_prop);\n@@ -1381,8 +1381,8 @@ create_set_type (struct type *result_type, struct type *domain_type)\n \n   result_type->set_code (TYPE_CODE_SET);\n   result_type->set_num_fields (1);\n-  TYPE_FIELDS (result_type)\n-    = (struct field *) TYPE_ZALLOC (result_type, sizeof (struct field));\n+  result_type->set_fields\n+    ((struct field *) TYPE_ZALLOC (result_type, sizeof (struct field)));\n \n   if (!TYPE_STUB (domain_type))\n     {\n@@ -1549,7 +1549,7 @@ smash_to_method_type (struct type *type, struct type *self_type,\n   type->set_code (TYPE_CODE_METHOD);\n   TYPE_TARGET_TYPE (type) = to_type;\n   set_type_self_type (type, self_type);\n-  TYPE_FIELDS (type) = args;\n+  type->set_fields (args);\n   type->set_num_fields (nargs);\n   if (varargs)\n     TYPE_VARARGS (type) = 1;\n@@ -2238,10 +2238,10 @@ resolve_dynamic_union (struct type *type,\n   gdb_assert (type->code () == TYPE_CODE_UNION);\n \n   resolved_type = copy_type (type);\n-  TYPE_FIELDS (resolved_type)\n-    = (struct field *) TYPE_ALLOC (resolved_type,\n-\t\t\t\t   resolved_type->num_fields ()\n-\t\t\t\t   * sizeof (struct field));\n+  resolved_type->set_fields\n+    ((struct field *)\n+     TYPE_ALLOC (resolved_type,\n+\t\t resolved_type->num_fields () * sizeof (struct field)));\n   memcpy (TYPE_FIELDS (resolved_type),\n \t  TYPE_FIELDS (type),\n \t  resolved_type->num_fields () * sizeof (struct field));\n@@ -2404,10 +2404,11 @@ compute_variant_fields (struct type *type,\n \n   resolved_type->set_num_fields\n     (std::count (flags.begin (), flags.end (), true));\n-  TYPE_FIELDS (resolved_type)\n-    = (struct field *) TYPE_ALLOC (resolved_type,\n-\t\t\t\t   resolved_type->num_fields ()\n-\t\t\t\t   * sizeof (struct field));\n+  resolved_type->set_fields\n+    ((struct field *)\n+     TYPE_ALLOC (resolved_type,\n+\t\t resolved_type->num_fields () * sizeof (struct field)));\n+\n   int out = 0;\n   for (int i = 0; i < type->num_fields (); ++i)\n     {\n@@ -2448,10 +2449,10 @@ resolve_dynamic_struct (struct type *type,\n     }\n   else\n     {\n-      TYPE_FIELDS (resolved_type)\n-\t= (struct field *) TYPE_ALLOC (resolved_type,\n-\t\t\t\t       resolved_type->num_fields ()\n-\t\t\t\t       * sizeof (struct field));\n+      resolved_type->set_fields\n+\t((struct field *)\n+\t TYPE_ALLOC (resolved_type,\n+\t\t     resolved_type->num_fields () * sizeof (struct field)));\n       memcpy (TYPE_FIELDS (resolved_type),\n \t      TYPE_FIELDS (type),\n \t      resolved_type->num_fields () * sizeof (struct field));\n@@ -5301,8 +5302,10 @@ copy_type_recursive (struct objfile *objfile,\n       int i, nfields;\n \n       nfields = type->num_fields ();\n-      TYPE_FIELDS (new_type) = (struct field *)\n-        TYPE_ZALLOC (new_type, nfields * sizeof (struct field));\n+      new_type->set_fields\n+\t((struct field *)\n+\t TYPE_ZALLOC (new_type, nfields * sizeof (struct field)));\n+\n       for (i = 0; i < nfields; i++)\n \t{\n \t  TYPE_FIELD_ARTIFICIAL (new_type, i) = \n@@ -5560,8 +5563,8 @@ arch_flags_type (struct gdbarch *gdbarch, const char *name, int bit)\n   TYPE_UNSIGNED (type) = 1;\n   type->set_num_fields (0);\n   /* Pre-allocate enough space assuming every field is one bit.  */\n-  TYPE_FIELDS (type)\n-    = (struct field *) TYPE_ZALLOC (type, bit * sizeof (struct field));\n+  type->set_fields\n+    ((struct field *) TYPE_ZALLOC (type, bit * sizeof (struct field)));\n \n   return type;\n }\n@@ -5631,8 +5634,8 @@ append_composite_type_field_raw (struct type *t, const char *name,\n   struct field *f;\n \n   t->set_num_fields (t->num_fields () + 1);\n-  TYPE_FIELDS (t) = XRESIZEVEC (struct field, TYPE_FIELDS (t),\n-\t\t\t\tt->num_fields ());\n+  t->set_fields (XRESIZEVEC (struct field, TYPE_FIELDS (t),\n+\t\t\t     t->num_fields ()));\n   f = &(TYPE_FIELDS (t)[t->num_fields () - 1]);\n   memset (f, 0, sizeof f[0]);\n   FIELD_TYPE (f[0]) = field;"
    },
    {
      "sha": "3ed9f8e7fc176b6112a28d6c39d6480e20cc56ed",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 13,
      "deletions": 1,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
      "patch": "@@ -913,6 +913,18 @@ struct type\n     this->main_type->nfields = num_fields;\n   }\n \n+  /* Get the fields array of this type.  */\n+  field *fields () const\n+  {\n+    return this->main_type->flds_bnds.fields;\n+  }\n+\n+  /* Set the fields array of this type.  */\n+  void set_fields (field *fields)\n+  {\n+    this->main_type->flds_bnds.fields = fields;\n+  }\n+\n   /* * Return the dynamic property of the requested KIND from this type's\n      list of dynamic properties.  */\n   dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;\n@@ -1458,7 +1470,7 @@ extern unsigned type_align (struct type *);\n    space in struct type.  */\n extern bool set_type_align (struct type *, ULONGEST);\n \n-#define TYPE_FIELDS(thistype) TYPE_MAIN_TYPE(thistype)->flds_bnds.fields\n+#define TYPE_FIELDS(thistype) (thistype)->fields ()\n \n #define TYPE_INDEX_TYPE(type) TYPE_FIELD_TYPE (type, 0)\n #define TYPE_RANGE_DATA(thistype) TYPE_MAIN_TYPE(thistype)->flds_bnds.bounds"
    },
    {
      "sha": "064f924c7691285d6be18168d5e733db2524b120",
      "filename": "gdb/gnu-v3-abi.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/gnu-v3-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/gnu-v3-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v3-abi.c?ref=3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
      "patch": "@@ -166,7 +166,7 @@ build_gdb_vtable_type (struct gdbarch *arch)\n \n   t = arch_type (arch, TYPE_CODE_STRUCT, offset * TARGET_CHAR_BIT, NULL);\n   t->set_num_fields (field - field_list);\n-  TYPE_FIELDS (t) = field_list;\n+  t->set_fields (field_list);\n   t->set_name (\"gdb_gnu_v3_abi_vtable\");\n   INIT_CPLUS_SPECIFIC (t);\n \n@@ -1055,7 +1055,7 @@ build_std_type_info_type (struct gdbarch *arch)\n \n   t = arch_type (arch, TYPE_CODE_STRUCT, offset * TARGET_CHAR_BIT, NULL);\n   t->set_num_fields (field - field_list);\n-  TYPE_FIELDS (t) = field_list;\n+  t->set_fields (field_list);\n   t->set_name (\"gdb_gnu_v3_type_info\");\n   INIT_CPLUS_SPECIFIC (t);\n "
    },
    {
      "sha": "aeecb14f19e02ded117389e02617306847a7cdae",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
      "patch": "@@ -1018,9 +1018,8 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \tt->set_code (type_code);\n \tTYPE_LENGTH (t) = sh->value;\n \tt->set_num_fields (nfields);\n-\tTYPE_FIELDS (t) = f = ((struct field *)\n-\t\t\t       TYPE_ALLOC (t,\n-\t\t\t\t\t   nfields * sizeof (struct field)));\n+\tf = ((struct field *) TYPE_ALLOC (t, nfields * sizeof (struct field)));\n+\tt->set_fields (f);\n \n \tif (type_code == TYPE_CODE_ENUM)\n \t  {\n@@ -1187,8 +1186,9 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \t\t  struct block_iterator iter;\n \n \t\t  ftype->set_num_fields (nparams);\n-\t\t  TYPE_FIELDS (ftype) = (struct field *)\n-\t\t    TYPE_ALLOC (ftype, nparams * sizeof (struct field));\n+\t\t  ftype->set_fields\n+\t\t    ((struct field *)\n+\t\t     TYPE_ALLOC (ftype, nparams * sizeof (struct field)));\n \n \t\t  iparams = 0;\n \t\t  ALL_BLOCK_SYMBOLS (cblock, iter, sym)"
    },
    {
      "sha": "f7eba1d9f2f952f4bf886eb7a68addecad3625ef",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
      "patch": "@@ -985,8 +985,8 @@ rust_composite_type (struct type *original,\n   result->set_name (name);\n \n   result->set_num_fields (nfields);\n-  TYPE_FIELDS (result)\n-    = (struct field *) TYPE_ZALLOC (result, nfields * sizeof (struct field));\n+  result->set_fields\n+    ((struct field *) TYPE_ZALLOC (result, nfields * sizeof (struct field)));\n \n   i = 0;\n   bitpos = 0;"
    },
    {
      "sha": "e710a43b7a0648a51e671a2d16edd3df3b3b85f0",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 12,
      "deletions": 9,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
      "patch": "@@ -986,8 +986,9 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \t    }\n \n \t  /* Allocate parameter information fields and fill them in.  */\n-\t  TYPE_FIELDS (ftype) = (struct field *)\n-\t    TYPE_ALLOC (ftype, nsemi * sizeof (struct field));\n+\t  ftype->set_fields\n+\t    ((struct field *)\n+\t     TYPE_ALLOC (ftype, nsemi * sizeof (struct field)));\n \t  while (*p++ == ';')\n \t    {\n \t      struct type *ptype;\n@@ -1836,9 +1837,9 @@ read_type (const char **pp, struct objfile *objfile)\n             && arg_types->type->code () == TYPE_CODE_VOID)\n           num_args = 0;\n \n-        TYPE_FIELDS (func_type)\n-          = (struct field *) TYPE_ALLOC (func_type,\n-                                         num_args * sizeof (struct field));\n+\tfunc_type->set_fields\n+\t  ((struct field *) TYPE_ALLOC (func_type,\n+\t\t\t\t\tnum_args * sizeof (struct field)));\n         memset (TYPE_FIELDS (func_type), 0, num_args * sizeof (struct field));\n         {\n           int i;\n@@ -3309,8 +3310,9 @@ attach_fields_to_type (struct stab_field_info *fip, struct type *type,\n      array of fields, and create blank visibility bitfields if necessary.  */\n \n   type->set_num_fields (nfields);\n-  TYPE_FIELDS (type) = (struct field *)\n-    TYPE_ALLOC (type, sizeof (struct field) * nfields);\n+  type->set_fields\n+    ((struct field *)\n+     TYPE_ALLOC (type, sizeof (struct field) * nfields));\n   memset (TYPE_FIELDS (type), 0, sizeof (struct field) * nfields);\n \n   if (non_public_fields)\n@@ -3655,8 +3657,9 @@ read_enum_type (const char **pp, struct type *type,\n   if (unsigned_enum)\n     TYPE_UNSIGNED (type) = 1;\n   type->set_num_fields (nsyms);\n-  TYPE_FIELDS (type) = (struct field *)\n-    TYPE_ALLOC (type, sizeof (struct field) * nsyms);\n+  type->set_fields\n+    ((struct field *)\n+     TYPE_ALLOC (type, sizeof (struct field) * nsyms));\n   memset (TYPE_FIELDS (type), 0, sizeof (struct field) * nsyms);\n \n   /* Find the symbols for the values and put them into the type."
    },
    {
      "sha": "6eec2577f38614dac952e7c7df8c3806802a3383",
      "filename": "gdb/windows-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1/gdb/windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-tdep.c?ref=3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
      "patch": "@@ -752,8 +752,8 @@ create_enum (struct gdbarch *gdbarch, int bit, const char *name,\n \n   type = arch_type (gdbarch, TYPE_CODE_ENUM, bit, name);\n   type->set_num_fields (count);\n-  TYPE_FIELDS (type) = (struct field *)\n-    TYPE_ZALLOC (type, sizeof (struct field) * count);\n+  type->set_fields\n+    ((struct field *) TYPE_ZALLOC (type, sizeof (struct field) * count));\n   TYPE_UNSIGNED (type) = 1;\n \n   for (i = 0; i < count; i++)"
    }
  ]
}