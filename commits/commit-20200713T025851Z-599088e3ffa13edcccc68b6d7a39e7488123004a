{
  "sha": "599088e3ffa13edcccc68b6d7a39e7488123004a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTk5MDg4ZTNmZmExM2VkY2NjYzY4YjZkN2EzOWU3NDg4MTIzMDA0YQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-07-13T02:58:51Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-07-13T02:58:51Z"
    },
    "message": "gdb: remove TYPE_RANGE_DATA macro\n\nRemove it in favor of using type::bounds directly.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (TYPE_RANGE_DATA): Remove.  Update callers to use\n\tthe type::bounds method directly.\n\nChange-Id: Id4fab22af0a94cbf505f78b01b3ee5b3d682fba2",
    "tree": {
      "sha": "f8e0b4d1c6fe7bf9694d319c9d22fc6e4d631f58",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f8e0b4d1c6fe7bf9694d319c9d22fc6e4d631f58"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/599088e3ffa13edcccc68b6d7a39e7488123004a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/599088e3ffa13edcccc68b6d7a39e7488123004a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/599088e3ffa13edcccc68b6d7a39e7488123004a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/599088e3ffa13edcccc68b6d7a39e7488123004a/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c4dfcb3638cbdb33589e3789df45d76178b333bf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c4dfcb3638cbdb33589e3789df45d76178b333bf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c4dfcb3638cbdb33589e3789df45d76178b333bf"
    }
  ],
  "stats": {
    "total": 66,
    "additions": 34,
    "deletions": 32
  },
  "files": [
    {
      "sha": "90168a3d017e446131935df702b5d9487b33f3b7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=599088e3ffa13edcccc68b6d7a39e7488123004a",
      "patch": "@@ -1,3 +1,8 @@\n+2020-07-12  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* gdbtypes.h (TYPE_RANGE_DATA): Remove.  Update callers to use\n+\tthe type::bounds method directly.\n+\n 2020-07-12  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (struct type) <bounds, set_bounds>: New methods."
    },
    {
      "sha": "88ab7dddde47ea8309e58de5becc5869185141c9",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=599088e3ffa13edcccc68b6d7a39e7488123004a",
      "patch": "@@ -2250,7 +2250,7 @@ has_negatives (struct type *type)\n     case TYPE_CODE_INT:\n       return !TYPE_UNSIGNED (type);\n     case TYPE_CODE_RANGE:\n-      return TYPE_LOW_BOUND (type) - TYPE_RANGE_DATA (type)->bias < 0;\n+      return TYPE_LOW_BOUND (type) - type->bounds ()->bias < 0;\n     }\n }\n "
    },
    {
      "sha": "be2ca35dead9dc2c59a0ddc5ac44959b2c881934",
      "filename": "gdb/compile/compile-c-symbols.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/compile/compile-c-symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/compile/compile-c-symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-symbols.c?ref=599088e3ffa13edcccc68b6d7a39e7488123004a",
      "patch": "@@ -504,7 +504,7 @@ generate_vla_size (compile_instance *compiler,\n \tif (TYPE_HIGH_BOUND_KIND (type) == PROP_LOCEXPR\n \t    || TYPE_HIGH_BOUND_KIND (type) == PROP_LOCLIST)\n \t  {\n-\t    const struct dynamic_prop *prop = &TYPE_RANGE_DATA (type)->high;\n+\t    const struct dynamic_prop *prop = &type->bounds ()->high;\n \t    std::string name = c_get_range_decl_name (prop);\n \n \t    dwarf2_compile_property_to_c (stream, name.c_str (),"
    },
    {
      "sha": "e5050da03b865fd602021b1bde1c53522476200f",
      "filename": "gdb/compile/compile-c-types.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/compile/compile-c-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/compile/compile-c-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-types.c?ref=599088e3ffa13edcccc68b6d7a39e7488123004a",
      "patch": "@@ -61,7 +61,7 @@ convert_array (compile_c_instance *context, struct type *type)\n \t\t\t\t\t   \" is not supported\"));\n \n       std::string upper_bound\n-\t= c_get_range_decl_name (&TYPE_RANGE_DATA (range)->high);\n+\t= c_get_range_decl_name (&range->bounds ()->high);\n       result = context->plugin ().build_vla_array_type (element_type,\n \t\t\t\t\t\t\tupper_bound.c_str ());\n       return result;"
    },
    {
      "sha": "d07036020cf357628b839b4862dfc5ba24a1ab59",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=599088e3ffa13edcccc68b6d7a39e7488123004a",
      "patch": "@@ -483,7 +483,7 @@ compile_cplus_convert_array (compile_cplus_instance *instance,\n \t}\n \n       std::string upper_bound\n-\t= c_get_range_decl_name (&TYPE_RANGE_DATA (range)->high);\n+\t= c_get_range_decl_name (&range->bounds ()->high);\n       return instance->plugin ().build_vla_array_type (element_type,\n \t\t\t\t\t     upper_bound.c_str ());\n     }"
    },
    {
      "sha": "bc8f4a106d1daeaa381f37e64edcd10ec5dd47fd",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=599088e3ffa13edcccc68b6d7a39e7488123004a",
      "patch": "@@ -17958,7 +17958,7 @@ read_subrange_type (struct die_info *die, struct dwarf2_cu *cu)\n     range_type = create_range_type (NULL, orig_base_type, &low, &high, bias);\n \n   if (high_bound_is_count)\n-    TYPE_RANGE_DATA (range_type)->flag_upper_bound_is_count = 1;\n+    range_type->bounds ()->flag_upper_bound_is_count = 1;\n \n   /* Ada expects an empty array on no boundary attributes.  */\n   if (attr == NULL && cu->language != language_ada)"
    },
    {
      "sha": "e28bfcbbd8130d3157842b76c76b9e1b61149307",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=599088e3ffa13edcccc68b6d7a39e7488123004a",
      "patch": "@@ -3255,7 +3255,7 @@ evaluate_subexp_for_sizeof (struct expression *exp, int *pos,\n \t\t  type = type->index_type ();\n \t\t  /* Only re-evaluate the right hand side if the resulting type\n \t\t     is a variable length type.  */\n-\t\t  if (TYPE_RANGE_DATA (type)->flag_bound_evaluated)\n+\t\t  if (type->bounds ()->flag_bound_evaluated)\n \t\t    {\n \t\t      val = evaluate_subexp (NULL_TYPE, exp, pos, EVAL_NORMAL);\n \t\t      return value_from_longest"
    },
    {
      "sha": "957307ec6120d27412f2761242a3d7e92062067b",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 12,
      "deletions": 13,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=599088e3ffa13edcccc68b6d7a39e7488123004a",
      "patch": "@@ -978,8 +978,8 @@ create_range_type_with_stride (struct type *result_type,\n \t\t\t\t   high_bound, bias);\n \n   gdb_assert (stride != nullptr);\n-  TYPE_RANGE_DATA (result_type)->stride = *stride;\n-  TYPE_RANGE_DATA (result_type)->flag_is_byte_stride = byte_stride_p;\n+  result_type->bounds ()->stride = *stride;\n+  result_type->bounds ()->flag_is_byte_stride = byte_stride_p;\n \n   return result_type;\n }\n@@ -1200,7 +1200,7 @@ update_static_array_size (struct type *type)\n   struct type *range_type = type->index_type ();\n \n   if (type->dyn_prop (DYN_PROP_BYTE_STRIDE) == nullptr\n-      && has_static_range (TYPE_RANGE_DATA (range_type))\n+      && has_static_range (range_type->bounds ())\n       && (!type_not_associated (type)\n \t  && !type_not_allocated (type)))\n     {\n@@ -2017,7 +2017,7 @@ is_dynamic_type_internal (struct type *type, int top_level)\n \t   dynamic when its subtype is dynamic, even if the bounds\n \t   of the range type are static.  It allows us to assume that\n \t   the subtype of a static range type is also static.  */\n-\treturn (!has_static_range (TYPE_RANGE_DATA (type))\n+\treturn (!has_static_range (type->bounds ())\n \t\t|| is_dynamic_type_internal (TYPE_TARGET_TYPE (type), 0));\n       }\n \n@@ -2094,12 +2094,11 @@ resolve_dynamic_range (struct type *dyn_range_type,\n {\n   CORE_ADDR value;\n   struct type *static_range_type, *static_target_type;\n-  const struct dynamic_prop *prop;\n   struct dynamic_prop low_bound, high_bound, stride;\n \n   gdb_assert (dyn_range_type->code () == TYPE_CODE_RANGE);\n \n-  prop = &TYPE_RANGE_DATA (dyn_range_type)->low;\n+  const struct dynamic_prop *prop = &dyn_range_type->bounds ()->low;\n   if (dwarf2_evaluate_property (prop, NULL, addr_stack, &value))\n     {\n       low_bound.kind = PROP_CONST;\n@@ -2111,13 +2110,13 @@ resolve_dynamic_range (struct type *dyn_range_type,\n       low_bound.data.const_val = 0;\n     }\n \n-  prop = &TYPE_RANGE_DATA (dyn_range_type)->high;\n+  prop = &dyn_range_type->bounds ()->high;\n   if (dwarf2_evaluate_property (prop, NULL, addr_stack, &value))\n     {\n       high_bound.kind = PROP_CONST;\n       high_bound.data.const_val = value;\n \n-      if (TYPE_RANGE_DATA (dyn_range_type)->flag_upper_bound_is_count)\n+      if (dyn_range_type->bounds ()->flag_upper_bound_is_count)\n \thigh_bound.data.const_val\n \t  = low_bound.data.const_val + high_bound.data.const_val - 1;\n     }\n@@ -2127,8 +2126,8 @@ resolve_dynamic_range (struct type *dyn_range_type,\n       high_bound.data.const_val = 0;\n     }\n \n-  bool byte_stride_p = TYPE_RANGE_DATA (dyn_range_type)->flag_is_byte_stride;\n-  prop = &TYPE_RANGE_DATA (dyn_range_type)->stride;\n+  bool byte_stride_p = dyn_range_type->bounds ()->flag_is_byte_stride;\n+  prop = &dyn_range_type->bounds ()->stride;\n   if (dwarf2_evaluate_property (prop, NULL, addr_stack, &value))\n     {\n       stride.kind = PROP_CONST;\n@@ -2154,11 +2153,11 @@ resolve_dynamic_range (struct type *dyn_range_type,\n   static_target_type\n     = resolve_dynamic_type_internal (TYPE_TARGET_TYPE (dyn_range_type),\n \t\t\t\t     addr_stack, 0);\n-  LONGEST bias = TYPE_RANGE_DATA (dyn_range_type)->bias;\n+  LONGEST bias = dyn_range_type->bounds ()->bias;\n   static_range_type = create_range_type_with_stride\n     (copy_type (dyn_range_type), static_target_type,\n      &low_bound, &high_bound, bias, &stride, byte_stride_p);\n-  TYPE_RANGE_DATA (static_range_type)->flag_bound_evaluated = 1;\n+  static_range_type->bounds ()->flag_bound_evaluated = 1;\n   return static_range_type;\n }\n \n@@ -4036,7 +4035,7 @@ check_types_equal (struct type *type1, struct type *type2,\n \n   if (type1->code () == TYPE_CODE_RANGE)\n     {\n-      if (*TYPE_RANGE_DATA (type1) != *TYPE_RANGE_DATA (type2))\n+      if (*type1->bounds () != *type2->bounds ())\n \treturn false;\n     }\n   else"
    },
    {
      "sha": "2a1e6931b7fe802e02bf21a71b1c261118449ed4",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=599088e3ffa13edcccc68b6d7a39e7488123004a",
      "patch": "@@ -1518,22 +1518,21 @@ extern unsigned type_align (struct type *);\n    space in struct type.  */\n extern bool set_type_align (struct type *, ULONGEST);\n \n-#define TYPE_RANGE_DATA(thistype) ((thistype)->bounds ())\n #define TYPE_LOW_BOUND(range_type) \\\n-  TYPE_RANGE_DATA(range_type)->low.data.const_val\n+  ((range_type)->bounds ()->low.data.const_val)\n #define TYPE_HIGH_BOUND(range_type) \\\n-  TYPE_RANGE_DATA(range_type)->high.data.const_val\n+  ((range_type)->bounds ()->high.data.const_val)\n #define TYPE_LOW_BOUND_UNDEFINED(range_type) \\\n-  (TYPE_RANGE_DATA(range_type)->low.kind == PROP_UNDEFINED)\n+  (TYPE_LOW_BOUND_KIND(range_type) == PROP_UNDEFINED)\n #define TYPE_HIGH_BOUND_UNDEFINED(range_type) \\\n-  (TYPE_RANGE_DATA(range_type)->high.kind == PROP_UNDEFINED)\n+  (TYPE_HIGH_BOUND_KIND(range_type) == PROP_UNDEFINED)\n #define TYPE_HIGH_BOUND_KIND(range_type) \\\n-  TYPE_RANGE_DATA(range_type)->high.kind\n+  ((range_type)->bounds ()->high.kind)\n #define TYPE_LOW_BOUND_KIND(range_type) \\\n-  TYPE_RANGE_DATA(range_type)->low.kind\n+  ((range_type)->bounds ()->low.kind)\n #define TYPE_BIT_STRIDE(range_type) \\\n-  (TYPE_RANGE_DATA(range_type)->stride.data.const_val \\\n-   * (TYPE_RANGE_DATA(range_type)->flag_is_byte_stride ? 8 : 1))\n+  ((range_type)->bounds ()->stride.data.const_val \\\n+   * ((range_type)->bounds ()->flag_is_byte_stride ? 8 : 1))\n \n /* Property accessors for the type data location.  */\n #define TYPE_DATA_LOCATION(thistype) \\"
    },
    {
      "sha": "309d2cabfff4c7c2cdf85b73a1421c9eca064e7c",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=599088e3ffa13edcccc68b6d7a39e7488123004a",
      "patch": "@@ -418,8 +418,7 @@ print_scalar_formatted (const gdb_byte *valaddr, struct type *type,\n \t   || options->format == 'z'\n \t   || options->format == 'd'\n \t   || options->format == 'u'))\n-      || (type->code () == TYPE_CODE_RANGE\n-\t  && TYPE_RANGE_DATA (type)->bias != 0))\n+      || (type->code () == TYPE_CODE_RANGE && type->bounds ()->bias != 0))\n     {\n       val_long.emplace (unpack_long (type, valaddr));\n       converted_bytes.resize (TYPE_LENGTH (type));"
    },
    {
      "sha": "3a5b02bcb4659c0c54d0409930e2766a9f7a2489",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/599088e3ffa13edcccc68b6d7a39e7488123004a/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=599088e3ffa13edcccc68b6d7a39e7488123004a",
      "patch": "@@ -2781,7 +2781,7 @@ unpack_long (struct type *type, const gdb_byte *valaddr)\n \telse\n \t  result = extract_signed_integer (valaddr, len, byte_order);\n \tif (code == TYPE_CODE_RANGE)\n-\t  result += TYPE_RANGE_DATA (type)->bias;\n+\t  result += type->bounds ()->bias;\n \treturn result;\n       }\n \n@@ -3331,7 +3331,7 @@ pack_long (gdb_byte *buf, struct type *type, LONGEST num)\n   switch (type->code ())\n     {\n     case TYPE_CODE_RANGE:\n-      num -= TYPE_RANGE_DATA (type)->bias;\n+      num -= type->bounds ()->bias;\n       /* Fall through.  */\n     case TYPE_CODE_INT:\n     case TYPE_CODE_CHAR:"
    }
  ]
}