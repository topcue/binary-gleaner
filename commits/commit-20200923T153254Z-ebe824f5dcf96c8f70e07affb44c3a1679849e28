{
  "sha": "ebe824f5dcf96c8f70e07affb44c3a1679849e28",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWJlODI0ZjVkY2Y5NmM4ZjcwZTA3YWZmYjQ0YzNhMTY3OTg0OWUyOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-23T15:32:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-23T15:32:54Z"
    },
    "message": "Remove some manual memory management from compile interface\n\nThis changes gdb's compile code to use std::vector in a couple of\nplaces, rather than manual memory management.\n\ngdb/ChangeLog\n2020-09-23  Tom Tromey  <tom@tromey.com>\n\n\t* compile/compile-cplus-types.c\n\t(compile_cplus_convert_struct_or_union): Use std::vector.\n\t(compile_cplus_convert_func): Likewise.\n\t* compile/compile-c-types.c (convert_func): Use std::vector.",
    "tree": {
      "sha": "483baf4a5fab305c7a9cd3750c215b13243af0e0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/483baf4a5fab305c7a9cd3750c215b13243af0e0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ebe824f5dcf96c8f70e07affb44c3a1679849e28",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ebe824f5dcf96c8f70e07affb44c3a1679849e28",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ebe824f5dcf96c8f70e07affb44c3a1679849e28",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ebe824f5dcf96c8f70e07affb44c3a1679849e28/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c4694f172b51a2168b8cc15109ab1b97fc0bcb9c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c4694f172b51a2168b8cc15109ab1b97fc0bcb9c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c4694f172b51a2168b8cc15109ab1b97fc0bcb9c"
    }
  ],
  "stats": {
    "total": 50,
    "additions": 26,
    "deletions": 24
  },
  "files": [
    {
      "sha": "84d2700ebe26bdebb404260c671581044b486c35",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebe824f5dcf96c8f70e07affb44c3a1679849e28/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebe824f5dcf96c8f70e07affb44c3a1679849e28/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ebe824f5dcf96c8f70e07affb44c3a1679849e28",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-23  Tom Tromey  <tom@tromey.com>\n+\n+\t* compile/compile-cplus-types.c\n+\t(compile_cplus_convert_struct_or_union): Use std::vector.\n+\t(compile_cplus_convert_func): Likewise.\n+\t* compile/compile-c-types.c (convert_func): Use std::vector.\n+\n 2020-09-21  Tom Tromey  <tromey@adacore.com>\n \n \t* sparc-tdep.c (sparc32_skip_prologue): Use"
    },
    {
      "sha": "82c9af37b5fb65ccc29dc9db1193f7f6b8854abc",
      "filename": "gdb/compile/compile-c-types.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebe824f5dcf96c8f70e07affb44c3a1679849e28/gdb/compile/compile-c-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebe824f5dcf96c8f70e07affb44c3a1679849e28/gdb/compile/compile-c-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-types.c?ref=ebe824f5dcf96c8f70e07affb44c3a1679849e28",
      "patch": "@@ -176,13 +176,13 @@ convert_func (compile_c_instance *context, struct type *type)\n   return_type = context->convert_type (target_type);\n \n   array.n_elements = type->num_fields ();\n-  array.elements = XNEWVEC (gcc_type, type->num_fields ());\n+  std::vector<gcc_type> elements (array.n_elements);\n+  array.elements = elements.data ();\n   for (i = 0; i < type->num_fields (); ++i)\n     array.elements[i] = context->convert_type (type->field (i).type ());\n \n   result = context->plugin ().build_function_type (return_type,\n \t\t\t\t\t\t   &array, is_varargs);\n-  xfree (array.elements);\n \n   return result;\n }"
    },
    {
      "sha": "f92091a82529987c9e039e57549f729a4cc8fdd4",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 17,
      "deletions": 22,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ebe824f5dcf96c8f70e07affb44c3a1679849e28/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ebe824f5dcf96c8f70e07affb44c3a1679849e28/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=ebe824f5dcf96c8f70e07affb44c3a1679849e28",
      "patch": "@@ -848,33 +848,29 @@ compile_cplus_convert_struct_or_union (compile_cplus_instance *instance,\n   gcc_type result;\n   if (type->code () == TYPE_CODE_STRUCT)\n     {\n-      struct gcc_vbase_array bases;\n       int num_baseclasses = TYPE_N_BASECLASSES (type);\n+      std::vector<gcc_type> elements (num_baseclasses);\n+      std::vector<enum gcc_cp_symbol_kind> flags (num_baseclasses);\n \n-      memset (&bases, 0, sizeof (bases));\n+      struct gcc_vbase_array bases {};\n+      bases.elements = elements.data ();\n+      bases.flags = flags.data ();\n+      bases.n_elements = num_baseclasses;\n \n-      if (num_baseclasses > 0)\n+      for (int i = 0; i < num_baseclasses; ++i)\n \t{\n-\t  bases.elements = XNEWVEC (gcc_type, num_baseclasses);\n-\t  bases.flags = XNEWVEC (enum gcc_cp_symbol_kind, num_baseclasses);\n-\t  bases.n_elements = num_baseclasses;\n-\t  for (int i = 0; i < num_baseclasses; ++i)\n-\t    {\n-\t      struct type *base_type = TYPE_BASECLASS (type, i);\n-\n-\t      bases.flags[i] = GCC_CP_SYMBOL_BASECLASS\n-\t\t| get_field_access_flag (type, i)\n-\t\t| (BASETYPE_VIA_VIRTUAL (type, i)\n-\t\t   ? GCC_CP_FLAG_BASECLASS_VIRTUAL\n-\t\t   : GCC_CP_FLAG_BASECLASS_NOFLAG);\n-\t      bases.elements[i] = instance->convert_type (base_type);\n-\t    }\n+\t  struct type *base_type = TYPE_BASECLASS (type, i);\n+\n+\t  bases.flags[i] = (GCC_CP_SYMBOL_BASECLASS\n+\t\t\t    | get_field_access_flag (type, i)\n+\t\t\t    | (BASETYPE_VIA_VIRTUAL (type, i)\n+\t\t\t       ? GCC_CP_FLAG_BASECLASS_VIRTUAL\n+\t\t\t       : GCC_CP_FLAG_BASECLASS_NOFLAG));\n+\t  bases.elements[i] = instance->convert_type (base_type);\n \t}\n \n       result = instance->plugin ().start_class_type\n \t(name.get (), resuld, &bases, filename, line);\n-      xfree (bases.flags);\n-      xfree (bases.elements);\n     }\n   else\n     {\n@@ -985,8 +981,8 @@ compile_cplus_convert_func (compile_cplus_instance *instance,\n      types.  Those are impossible in C, though.  */\n   gcc_type return_type = instance->convert_type (target_type);\n \n-  struct gcc_type_array array =\n-    { type->num_fields (), XNEWVEC (gcc_type, type->num_fields ()) };\n+  std::vector<gcc_type> elements (type->num_fields ());\n+  struct gcc_type_array array = { type->num_fields (), elements.data () };\n   int artificials = 0;\n   for (int i = 0; i < type->num_fields (); ++i)\n     {\n@@ -1006,7 +1002,6 @@ compile_cplus_convert_func (compile_cplus_instance *instance,\n      with some minsyms like printf (compile-cplus.exp has examples).  */\n   gcc_type result = instance->plugin ().build_function_type\n     (return_type, &array, is_varargs);\n-  xfree (array.elements);\n   return result;\n }\n "
    }
  ]
}