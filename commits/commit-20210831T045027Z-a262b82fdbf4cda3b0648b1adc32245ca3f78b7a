{
  "sha": "a262b82fdbf4cda3b0648b1adc32245ca3f78b7a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTI2MmI4MmZkYmY0Y2RhM2IwNjQ4YjFhZGMzMjI0NWNhM2Y3OGI3YQ==",
  "commit": {
    "author": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-07-16T05:32:18Z"
    },
    "committer": {
      "name": "Nelson Chu",
      "email": "nelson.chu@sifive.com",
      "date": "2021-08-31T04:50:27Z"
    },
    "message": "RISC-V: Extend .insn directive to support hardcode encoding.\n\nThe .insn directive can let users use their own instructions, or\nsome new instruction, which haven't supported in the old binutils.\nFor example, if users want to use sifive cache instruction, they\ncannot just write \"cflush.d1.l1\" in the assembly code, they should\nuse \".insn i SYSTEM, 0, x0, x10, -0x40\".  But the .insn directive\nmay not easy to use for some cases, and not so friendly to users.\nTherefore, I believe most of the users will use \".word 0xfc050073\",\nto encode the instructions directly, rather than use .insn.  But\nonce we have supported the mapping symbols, the .word directives\nare marked as data, so disassembler won't dump them as instructions\nas usual.  I have discussed this with Kito many times, we all think\nextend the .insn direcitve to support the hardcode encoding, is the\neasiest way to resolve the problem.  Therefore, there are two more\n.insn formats are proposed as follows,\n\n(original) .insn <type>, <operand1>, <operand2>, ...\n           .insn <insn-length>, <value>\n           .insn <value>\n\nThe <type> is string, and the <insn-length> and <value> are constants.\n\ngas/\n\t* config/tc-riscv.c (riscv_ip_hardcode): Similar to riscv_ip,\n\tbut assembles an instruction according to the hardcode values\n\tof .insn directive.\n\t* doc/c-riscv.texi: Document two new .insn formats.\n\t* testsuite/gas/riscv/insn-fail.d: New testcases.\n\t* testsuite/gas/riscv/insn-fail.l: Likewise.\n\t* testsuite/gas/riscv/insn-fail.s: Likewise.\n\t* testsuite/gas/riscv/insn.d: Updated.\n\t* testsuite/gas/riscv/insn.s: Likewise.",
    "tree": {
      "sha": "97b55d8f82454d447e1929683c72e127f520b5cf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/97b55d8f82454d447e1929683c72e127f520b5cf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a262b82fdbf4cda3b0648b1adc32245ca3f78b7a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a262b82fdbf4cda3b0648b1adc32245ca3f78b7a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a262b82fdbf4cda3b0648b1adc32245ca3f78b7a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a262b82fdbf4cda3b0648b1adc32245ca3f78b7a/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "ad15549d514afa0602a0c0fca4b3bbf545a3c994",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ad15549d514afa0602a0c0fca4b3bbf545a3c994",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ad15549d514afa0602a0c0fca4b3bbf545a3c994"
    }
  ],
  "stats": {
    "total": 101,
    "additions": 96,
    "deletions": 5
  },
  "files": [
    {
      "sha": "1dbc4d85b86f44670217157268ff68633a84919f",
      "filename": "gas/config/tc-riscv.c",
      "status": "modified",
      "additions": 55,
      "deletions": 3,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a262b82fdbf4cda3b0648b1adc32245ca3f78b7a/gas/config/tc-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a262b82fdbf4cda3b0648b1adc32245ca3f78b7a/gas/config/tc-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-riscv.c?ref=a262b82fdbf4cda3b0648b1adc32245ca3f78b7a",
      "patch": "@@ -2900,6 +2900,51 @@ riscv_ip (char *str, struct riscv_cl_insn *ip, expressionS *imm_expr,\n   return error;\n }\n \n+/* Similar to riscv_ip, but assembles an instruction according to the\n+   hardcode values of .insn directive.  */\n+\n+static const char *\n+riscv_ip_hardcode (char *str,\n+\t\t   struct riscv_cl_insn *ip,\n+\t\t   expressionS *imm_expr,\n+\t\t   const char *error)\n+{\n+  struct riscv_opcode *insn;\n+  insn_t values[2] = {0, 0};\n+  unsigned int num = 0;\n+\n+  input_line_pointer = str;\n+  do\n+    {\n+      expression (imm_expr);\n+      if (imm_expr->X_op != O_constant)\n+\t{\n+\t  /* The first value isn't constant, so it should be\n+\t     .insn <type> <operands>.  We have been parsed it\n+\t     in the riscv_ip.  */\n+\t  if (num == 0)\n+\t    return error;\n+\t  return _(\"values must be constant\");\n+\t}\n+      values[num++] = (insn_t) imm_expr->X_add_number;\n+    }\n+  while (*input_line_pointer++ == ',' && num < 2);\n+\n+  input_line_pointer--;\n+  if (*input_line_pointer != '\\0')\n+    return _(\"unrecognized values\");\n+\n+  insn = XNEW (struct riscv_opcode);\n+  insn->match = values[num - 1];\n+  create_insn (ip, insn);\n+  unsigned int bytes = riscv_insn_length (insn->match);\n+  if (values[num - 1] >> (8 * bytes) != 0\n+      || (num == 2 && values[0] != bytes))\n+    return _(\"value conflicts with instruction length\");\n+\n+  return NULL;\n+}\n+\n void\n md_assemble (char *str)\n {\n@@ -3891,7 +3936,10 @@ s_riscv_leb128 (int sign)\n   return s_leb128 (sign);\n }\n \n-/* Parse the .insn directive.  */\n+/* Parse the .insn directive.  There are three formats,\n+   Format 1: .insn <type> <operand1>, <operand2>, ...\n+   Format 2: .insn <length>, <value>\n+   Format 3: .insn <value>.  */\n \n static void\n s_riscv_insn (int x ATTRIBUTE_UNUSED)\n@@ -3912,11 +3960,15 @@ s_riscv_insn (int x ATTRIBUTE_UNUSED)\n \n   const char *error = riscv_ip (str, &insn, &imm_expr,\n \t\t\t\t&imm_reloc, insn_type_hash);\n-\n   if (error)\n     {\n-      as_bad (\"%s `%s'\", error, str);\n+      char *save_in = input_line_pointer;\n+      error = riscv_ip_hardcode (str, &insn, &imm_expr, error);\n+      input_line_pointer = save_in;\n     }\n+\n+  if (error)\n+    as_bad (\"%s `%s'\", error, str);\n   else\n     {\n       gas_assert (insn.insn_mo->pinfo != INSN_MACRO);"
    },
    {
      "sha": "bfbf61d64a753368d32792973cfb2272f22a4ee0",
      "filename": "gas/doc/c-riscv.texi",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a262b82fdbf4cda3b0648b1adc32245ca3f78b7a/gas/doc/c-riscv.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a262b82fdbf4cda3b0648b1adc32245ca3f78b7a/gas/doc/c-riscv.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/c-riscv.texi?ref=a262b82fdbf4cda3b0648b1adc32245ca3f78b7a",
      "patch": "@@ -213,13 +213,23 @@ desirable.\n Enables or disables the CSR checking.\n \n @cindex INSN directives\n-@item .insn @var{value}\n+@item .insn @var{type}, @var{operand} [,...,@var{operand_n}]\n+@itemx .insn @var{insn_length}, @var{value}\n @itemx .insn @var{value}\n This directive permits the numeric representation of an instructions\n and makes the assembler insert the operands according to one of the\n instruction formats for @samp{.insn} (@ref{RISC-V-Formats}).\n For example, the instruction @samp{add a0, a1, a2} could be written as\n-@samp{.insn r 0x33, 0, 0, a0, a1, a2}.\n+@samp{.insn r 0x33, 0, 0, a0, a1, a2}.  But in fact, the instruction\n+formats are difficult to use for some users, so most of them are using\n+@samp{.word} to encode the instruction directly, rather than using\n+@samp{.insn}.  It is fine for now, but will be wrong when the mapping\n+symbols are supported, since @samp{.word} will not be shown as an\n+instruction, it should be shown as data.  Therefore, we also support\n+two more formats of the @samp{.insn}, the instruction @samp{add a0, a1, a2}\n+could also be written as @samp{.insn 0x4, 0xc58533} or @samp{.insn 0xc58533}.\n+When the @var{insn_length} is set, then assembler will check if the\n+@var{value} is a valid @var{insn_length} bytes instruction.\n \n @cindex @code{.attribute} directive, RISC-V\n @item .attribute @var{tag}, @var{value}"
    },
    {
      "sha": "3548e85415aca817bfaa7c9ddcf2c2d01f395ff9",
      "filename": "gas/testsuite/gas/riscv/insn-fail.d",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a262b82fdbf4cda3b0648b1adc32245ca3f78b7a/gas/testsuite/gas/riscv/insn-fail.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a262b82fdbf4cda3b0648b1adc32245ca3f78b7a/gas/testsuite/gas/riscv/insn-fail.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/insn-fail.d?ref=a262b82fdbf4cda3b0648b1adc32245ca3f78b7a",
      "patch": "@@ -0,0 +1,3 @@\n+#as:\n+#source: insn-fail.s\n+#error_output: insn-fail.l"
    },
    {
      "sha": "e47d106b39bccf832e6d170b8cb6daa0a2f8ad82",
      "filename": "gas/testsuite/gas/riscv/insn-fail.l",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a262b82fdbf4cda3b0648b1adc32245ca3f78b7a/gas/testsuite/gas/riscv/insn-fail.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a262b82fdbf4cda3b0648b1adc32245ca3f78b7a/gas/testsuite/gas/riscv/insn-fail.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/insn-fail.l?ref=a262b82fdbf4cda3b0648b1adc32245ca3f78b7a",
      "patch": "@@ -0,0 +1,7 @@\n+.*Assembler messages:\n+.*Error: unrecognized opcode `r,0x00000013'\n+.*Error: values must be constant `0x4,rs1'\n+.*Error: unrecognized values `0x4 0x5'\n+.*Error: unrecognized values `0x4,0x5,0x6'\n+.*Error: value conflicts with instruction length `0x4,0x0001'\n+.*Error: value conflicts with instruction length `0x2,0x00000013'"
    },
    {
      "sha": "064211d985d85d26d600ebe15f2f990bc3586457",
      "filename": "gas/testsuite/gas/riscv/insn-fail.s",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a262b82fdbf4cda3b0648b1adc32245ca3f78b7a/gas/testsuite/gas/riscv/insn-fail.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a262b82fdbf4cda3b0648b1adc32245ca3f78b7a/gas/testsuite/gas/riscv/insn-fail.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/insn-fail.s?ref=a262b82fdbf4cda3b0648b1adc32245ca3f78b7a",
      "patch": "@@ -0,0 +1,6 @@\n+\t.insn\tr, 0x00000013\n+\t.insn\t0x4, rs1\n+\t.insn\t0x4 0x5\n+\t.insn\t0x4, 0x5, 0x6\n+\t.insn\t0x4, 0x0001\n+\t.insn\t0x2, 0x00000013"
    },
    {
      "sha": "4edacc633686686bce4aa8dc68e56660c1359666",
      "filename": "gas/testsuite/gas/riscv/insn.d",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a262b82fdbf4cda3b0648b1adc32245ca3f78b7a/gas/testsuite/gas/riscv/insn.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a262b82fdbf4cda3b0648b1adc32245ca3f78b7a/gas/testsuite/gas/riscv/insn.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/insn.d?ref=a262b82fdbf4cda3b0648b1adc32245ca3f78b7a",
      "patch": "@@ -69,3 +69,9 @@ Disassembly of section .text:\n [^:]+:[ \t]+00c58533[ \t]+add[ \t]+a0,a1,a2\n [^:]+:[ \t]+00c58533[ \t]+add[ \t]+a0,a1,a2\n [^:]+:[ \t]+00c58533[ \t]+add[ \t]+a0,a1,a2\n+[^:]+:[ \t]+0001[ \t]+nop\n+[^:]+:[ \t]+00000013[ \t]+nop\n+[^:]+:[ \t]+00000057[ \t]+0x57\n+[^:]+:[ \t]+0001[ \t]+nop\n+[^:]+:[ \t]+00000013[ \t]+nop\n+[^:]+:[ \t]+00000057[ \t]+0x57"
    },
    {
      "sha": "84739056b1a1fe49e0b5a89afa44e7e2fc42d391",
      "filename": "gas/testsuite/gas/riscv/insn.s",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a262b82fdbf4cda3b0648b1adc32245ca3f78b7a/gas/testsuite/gas/riscv/insn.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a262b82fdbf4cda3b0648b1adc32245ca3f78b7a/gas/testsuite/gas/riscv/insn.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/riscv/insn.s?ref=a262b82fdbf4cda3b0648b1adc32245ca3f78b7a",
      "patch": "@@ -53,3 +53,10 @@ target:\n \t.insn r  0x33,  0,  0, fa0, a1, fa2\n \t.insn r  0x33,  0,  0, a0, fa1, fa2\n \t.insn r  0x33,  0,  0, fa0, fa1, fa2\n+\n+\t.insn 0x0001\n+\t.insn 0x00000013\n+\t.insn 0x00000057\n+\t.insn 0x2, 0x0001\n+\t.insn 0x4, 0x00000013\n+\t.insn 0x4, 0x00000057"
    }
  ]
}