{
  "sha": "8e2e3c6c346c1c8142e714715e5a86b32f7e31ea",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGUyZTNjNmMzNDZjMWM4MTQyZTcxNDcxNWU1YTg2YjMyZjdlMzFlYQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-26T03:28:52Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-07-26T03:35:16Z"
    },
    "message": "PR24798, buffer overflow in process_cu_tu_index\n\n\tPR 24798\n\t* dwarf.c (process_cu_tu_index): Avoid integer overflow on 64-bit\n\tsystems by casting ncols and nslots expressions to size_t.  Display\n\tnumber of columns and slots before giving up due to buffer overflow.\n\tUse %u to display unsigned ints.  Perform more pointer wrap tests.",
    "tree": {
      "sha": "f37c408660f255113544c75cda01fd0d8dc4580d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f37c408660f255113544c75cda01fd0d8dc4580d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8e2e3c6c346c1c8142e714715e5a86b32f7e31ea",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8e2e3c6c346c1c8142e714715e5a86b32f7e31ea",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8e2e3c6c346c1c8142e714715e5a86b32f7e31ea",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8e2e3c6c346c1c8142e714715e5a86b32f7e31ea/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6dd17ae0f9b0d9fc230e75ce345da9793498554d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6dd17ae0f9b0d9fc230e75ce345da9793498554d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6dd17ae0f9b0d9fc230e75ce345da9793498554d"
    }
  ],
  "stats": {
    "total": 61,
    "additions": 32,
    "deletions": 29
  },
  "files": [
    {
      "sha": "9195540282812f70f090755e4755d94b71b4ed1c",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e2e3c6c346c1c8142e714715e5a86b32f7e31ea/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e2e3c6c346c1c8142e714715e5a86b32f7e31ea/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=8e2e3c6c346c1c8142e714715e5a86b32f7e31ea",
      "patch": "@@ -1,3 +1,11 @@\n+2019-07-26  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 24798\n+\t* dwarf.c (process_cu_tu_index): Avoid integer overflow on 64-bit\n+\tsystems by casting ncols and nslots expressions to size_t.  Display\n+\tnumber of columns and slots before giving up due to buffer overflow.\n+\tUse %u to display unsigned ints.  Perform more pointer wrap tests.\n+\n 2019-07-25  Tom Tromey <tromey@adacore.com>\n \n \tPR 24809"
    },
    {
      "sha": "d63383271b724cba483a7f63bb103030807b75a0",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 24,
      "deletions": 29,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8e2e3c6c346c1c8142e714715e5a86b32f7e31ea/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8e2e3c6c346c1c8142e714715e5a86b32f7e31ea/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=8e2e3c6c346c1c8142e714715e5a86b32f7e31ea",
      "patch": "@@ -9314,33 +9314,29 @@ process_cu_tu_index (struct dwarf_section *section, int do_display)\n   SAFE_BYTE_GET (nslots, phdr + 12, 4, limit);\n \n   phash = phdr + 16;\n-  pindex = phash + nslots * 8;\n-  ppool = pindex + nslots * 4;\n-\n-  /* PR 17531: file: 45d69832.  */\n-  if (pindex < phash || ppool < phdr || (pindex == phash && nslots != 0))\n-    {\n-      warn (ngettext (\"Section %s is too small for %d slot\\n\",\n-\t\t      \"Section %s is too small for %d slots\\n\",\n-\t\t      nslots),\n-\t    section->name, nslots);\n-      return 0;\n-    }\n+  pindex = phash + (size_t) nslots * 8;\n+  ppool = pindex + (size_t) nslots * 4;\n \n   if (do_display)\n     {\n       introduce (section, FALSE);\n \n-      printf (_(\"  Version:                 %d\\n\"), version);\n+      printf (_(\"  Version:                 %u\\n\"), version);\n       if (version >= 2)\n-\tprintf (_(\"  Number of columns:       %d\\n\"), ncols);\n-      printf (_(\"  Number of used entries:  %d\\n\"), nused);\n-      printf (_(\"  Number of slots:         %d\\n\\n\"), nslots);\n+\tprintf (_(\"  Number of columns:       %u\\n\"), ncols);\n+      printf (_(\"  Number of used entries:  %u\\n\"), nused);\n+      printf (_(\"  Number of slots:         %u\\n\\n\"), nslots);\n     }\n \n-  if (ppool > limit || ppool < phdr)\n+  /* PR 17531: file: 45d69832.  */\n+  if ((size_t) nslots * 8 / 8 != nslots\n+      || phash < phdr || phash > limit\n+      || pindex < phash || pindex > limit\n+      || ppool < pindex || ppool > limit)\n     {\n-      warn (_(\"Section %s too small for %d hash table entries\\n\"),\n+      warn (ngettext (\"Section %s is too small for %u slot\\n\",\n+\t\t      \"Section %s is too small for %u slots\\n\",\n+\t\t      nslots),\n \t    section->name, nslots);\n       return 0;\n     }\n@@ -9402,9 +9398,9 @@ process_cu_tu_index (struct dwarf_section *section, int do_display)\n       unsigned int dw_sect;\n       unsigned char *ph = phash;\n       unsigned char *pi = pindex;\n-      unsigned char *poffsets = ppool + ncols * 4;\n-      unsigned char *psizes = poffsets + nused * ncols * 4;\n-      unsigned char *pend = psizes + nused * ncols * 4;\n+      unsigned char *poffsets = ppool + (size_t) ncols * 4;\n+      unsigned char *psizes = poffsets + (size_t) nused * ncols * 4;\n+      unsigned char *pend = psizes + (size_t) nused * ncols * 4;\n       bfd_boolean is_tu_index;\n       struct cu_tu_set *this_set = NULL;\n       unsigned int row;\n@@ -9413,14 +9409,13 @@ process_cu_tu_index (struct dwarf_section *section, int do_display)\n       is_tu_index = strcmp (section->name, \".debug_tu_index\") == 0;\n \n       /* PR 17531: file: 0dd159bf.\n-\t Check for wraparound with an overlarge ncols value.  */\n-      if (poffsets < ppool || (unsigned int) ((poffsets - ppool) / 4) != ncols)\n-\t{\n-\t  warn (_(\"Overlarge number of columns: %x\\n\"), ncols);\n-\t  return 0;\n-\t}\n-\n-      if (pend > limit)\n+\t Check for integer overflow (can occur when size_t is 32-bit)\n+\t with overlarge ncols or nused values.  */\n+      if ((size_t) ncols * 4 / 4 != ncols\n+\t  || (size_t) nused * ncols * 4 / ((size_t) ncols * 4) != nused\n+\t  || poffsets < ppool || poffsets > limit\n+\t  || psizes < poffsets || psizes > limit\n+\t  || pend < psizes || pend > limit)\n \t{\n \t  warn (_(\"Section %s too small for offset and size tables\\n\"),\n \t\tsection->name);"
    }
  ]
}