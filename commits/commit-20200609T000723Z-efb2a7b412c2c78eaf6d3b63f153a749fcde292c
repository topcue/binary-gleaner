{
  "sha": "efb2a7b412c2c78eaf6d3b63f153a749fcde292c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWZiMmE3YjQxMmMyYzc4ZWFmNmQzYjYzZjE1M2E3NDlmY2RlMjkyYw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-06-09T00:02:10Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-06-09T00:07:23Z"
    },
    "message": "PowerPC64: Downgrade ifunc with textrel error to a warning\n\nFor ppc64 I set flags when recording the dynamic relocation rather\nthan when allocating space.  That allows you to distinguish three\ncases:\n1) The dynamic ifunc relocation is in an executable and will always be\n   to an ifunc resolver in the executable.\n2) The dynamic ifunc relocation is in a shared library which provides\n   an ifunc resolver, but that may be overridden at runtime to use a\n   resolver in another binary.\n3) The dynamic ifunc relocation is not to a locally defined ifunc\n   resolver.\n\nCase (3) won't cause a segfault trying to run resolver code that is\nnon-exec on older glibc.\n\nI made case (1) an error for ppc64, but since newer glibc ld.so does\nallow running ifunc resolvers when segments are writable I suppose I\nshould downgrade that to a warning like case (2).\n\n\t* elf64-ppc.c (struct ppc_link_hash_table): Delete\n\tmaybe_local_ifunc_resolver field.\n\t(build_global_entry_stubs_and_plt): Set local_ifunc_resolver in\n\tcases where maybe_local_ifunc_resolver was set.\n\t(ppc64_elf_relocate_section): Likewise.\n\t(ppc64_elf_finish_dynamic_sections): Downgrade ifunc with textrel\n\terror to a warning.",
    "tree": {
      "sha": "9520362ef89c24e92b7c7a545778f700065aef45",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9520362ef89c24e92b7c7a545778f700065aef45"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/efb2a7b412c2c78eaf6d3b63f153a749fcde292c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efb2a7b412c2c78eaf6d3b63f153a749fcde292c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/efb2a7b412c2c78eaf6d3b63f153a749fcde292c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efb2a7b412c2c78eaf6d3b63f153a749fcde292c/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c3cd66019e6ce9234909ea18331049eda56d76c2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3cd66019e6ce9234909ea18331049eda56d76c2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c3cd66019e6ce9234909ea18331049eda56d76c2"
    }
  ],
  "stats": {
    "total": 25,
    "additions": 13,
    "deletions": 12
  },
  "files": [
    {
      "sha": "146045b0b87f38035f70f130f900fe9088233b3f",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efb2a7b412c2c78eaf6d3b63f153a749fcde292c/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efb2a7b412c2c78eaf6d3b63f153a749fcde292c/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=efb2a7b412c2c78eaf6d3b63f153a749fcde292c",
      "patch": "@@ -1,3 +1,13 @@\n+2020-06-09  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf64-ppc.c (struct ppc_link_hash_table): Delete\n+\tmaybe_local_ifunc_resolver field.\n+\t(build_global_entry_stubs_and_plt): Set local_ifunc_resolver in\n+\tcases where maybe_local_ifunc_resolver was set.\n+\t(ppc64_elf_relocate_section): Likewise.\n+\t(ppc64_elf_finish_dynamic_sections): Downgrade ifunc with textrel\n+\terror to a warning.\n+\n 2020-06-08  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* elf-bfd.h (elf_link_hash_entry): Add tlsdesc_plt and"
    },
    {
      "sha": "9868f6a755a847fb7e1e20141196790d9d08bafb",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 12,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/efb2a7b412c2c78eaf6d3b63f153a749fcde292c/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/efb2a7b412c2c78eaf6d3b63f153a749fcde292c/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=efb2a7b412c2c78eaf6d3b63f153a749fcde292c",
      "patch": "@@ -3242,7 +3242,6 @@ struct ppc_link_hash_table\n   /* Whether there exist local gnu indirect function resolvers,\n      referenced by dynamic relocations.  */\n   unsigned int local_ifunc_resolver:1;\n-  unsigned int maybe_local_ifunc_resolver:1;\n \n   /* Whether plt calls for ELFv2 localentry:0 funcs have been optimized.  */\n   unsigned int has_plt_localentry0:1;\n@@ -13935,7 +13934,7 @@ build_global_entry_stubs_and_plt (struct elf_link_hash_entry *h, void *inf)\n \t\t   + ((ent->plt.offset - PLT_INITIAL_ENTRY_SIZE (htab))\n \t\t      / PLT_ENTRY_SIZE (htab) * sizeof (Elf64_External_Rela)));\n \t    if (h->type == STT_GNU_IFUNC && is_static_defined (h))\n-\t      htab->maybe_local_ifunc_resolver = 1;\n+\t      htab->local_ifunc_resolver = 1;\n \t    bfd_elf64_swap_reloca_out (info->output_bfd, &rela, loc);\n \t  }\n       }\n@@ -16103,10 +16102,8 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\tif (ifunc)\n \t\t  {\n \t\t    relgot = htab->elf.irelplt;\n-\t\t    if (indx == 0)\n+\t\t    if (indx == 0 || is_static_defined (&h->elf))\n \t\t      htab->local_ifunc_resolver = 1;\n-\t\t    else if (is_static_defined (&h->elf))\n-\t\t      htab->maybe_local_ifunc_resolver = 1;\n \t\t  }\n \t\telse if (indx != 0\n \t\t\t || (bfd_link_pic (info)\n@@ -16635,10 +16632,8 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t  : ELF_ST_TYPE (sym->st_info) == STT_GNU_IFUNC)\n \t\t{\n \t\t  sreloc = htab->elf.irelplt;\n-\t\t  if (indx == 0)\n+\t\t  if (indx == 0 || is_static_defined (&h->elf))\n \t\t    htab->local_ifunc_resolver = 1;\n-\t\t  else if (is_static_defined (&h->elf))\n-\t\t    htab->maybe_local_ifunc_resolver = 1;\n \t\t}\n \t      if (sreloc == NULL)\n \t\tabort ();\n@@ -17403,10 +17398,6 @@ ppc64_elf_finish_dynamic_sections (bfd *output_bfd,\n \n \t    case DT_TEXTREL:\n \t      if (htab->local_ifunc_resolver)\n-\t\tinfo->callbacks->einfo\n-\t\t  (_(\"%X%P: text relocations and GNU indirect \"\n-\t\t     \"functions will result in a segfault at runtime\\n\"));\n-\t      else if (htab->maybe_local_ifunc_resolver)\n \t\tinfo->callbacks->einfo\n \t\t  (_(\"%P: warning: text relocations and GNU indirect \"\n \t\t     \"functions may result in a segfault at runtime\\n\"));"
    }
  ]
}