{
  "sha": "9698cf9b1c485edbbeabc9f65bfd0fdef92e3854",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTY5OGNmOWIxYzQ4NWVkYmJlYWJjOWY2NWJmZDBmZGVmOTJlMzg1NA==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-05-29T09:11:37Z"
    },
    "committer": {
      "name": "Jose E. Marchesi",
      "email": "jose.marchesi@oracle.com",
      "date": "2019-05-29T09:11:37Z"
    },
    "message": "Fix libctf build on non-ELF targets.\n\nAll machinery works as on ELF, except for automatic loading of ELF\nstring and symbol tables in the BFD-style open machinery.\n\n        * Makefile.def (dependencies): configure-libctf depends on all-bfd\n        and all its deps.\n        * Makefile.in: Regenerated.\n\nlibctf/\n        * configure.in: Check for bfd_section_from_elf_index.\n        * configure: Regenerate.\n        * config.h.in [HAVE_BFD_ELF]: Likewise.\n        * libctf/ctf_open_bfd (ctf_bfdopen_ctfsect): Use it.\n        abfd is potentially unused now.",
    "tree": {
      "sha": "5dbe117ab7f582cb95faec5ce3b183c7d6397155",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5dbe117ab7f582cb95faec5ce3b183c7d6397155"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jemarch",
    "id": 7061875,
    "node_id": "MDQ6VXNlcjcwNjE4NzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jemarch",
    "html_url": "https://github.com/jemarch",
    "followers_url": "https://api.github.com/users/jemarch/followers",
    "following_url": "https://api.github.com/users/jemarch/following{/other_user}",
    "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions",
    "organizations_url": "https://api.github.com/users/jemarch/orgs",
    "repos_url": "https://api.github.com/users/jemarch/repos",
    "events_url": "https://api.github.com/users/jemarch/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jemarch/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "90f879191c1bc8455527f66fb4ab46873aa870aa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/90f879191c1bc8455527f66fb4ab46873aa870aa",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/90f879191c1bc8455527f66fb4ab46873aa870aa"
    }
  ],
  "stats": {
    "total": 196,
    "additions": 195,
    "deletions": 1
  },
  "files": [
    {
      "sha": "cbfb2155c2e4b5ffe4d55203a1c3c6df6549dde2",
      "filename": "ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ChangeLog?ref=9698cf9b1c485edbbeabc9f65bfd0fdef92e3854",
      "patch": "@@ -1,3 +1,9 @@\n+2019-05-28  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* Makefile.def (dependencies): configure-libctf depends on all-bfd\n+\tand all its deps.\n+\t* Makefile.in: Regenerated.\n+\n 2019-05-28  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* MAINTAINERS: Add libctf."
    },
    {
      "sha": "e3a94f2c7deeab3cfa9d66ffd4af6cc00eb425d6",
      "filename": "Makefile.def",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854/Makefile.def",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854/Makefile.def",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/Makefile.def?ref=9698cf9b1c485edbbeabc9f65bfd0fdef92e3854",
      "patch": "@@ -522,6 +522,11 @@ dependencies = { module=all-fastjar; on=all-libiberty; };\n dependencies = { module=all-libctf; on=all-libiberty; hard=true; };\n dependencies = { module=all-libctf; on=all-bfd; };\n dependencies = { module=all-libctf; on=all-zlib; };\n+// So that checking for ELF support in BFD from libctf configure is possible.\n+dependencies = { module=configure-libctf; on=all-bfd; };\n+dependencies = { module=configure-libctf; on=all-intl; };\n+dependencies = { module=configure-libctf; on=all-zlib; };\n+dependencies = { module=configure-libctf; on=all-libiconv; };\n \n // Warning, these are not well tested.\n dependencies = { module=all-bison; on=all-intl; };"
    },
    {
      "sha": "e4b6051b1a7f61be74d581f4135eee7aaef9e947",
      "filename": "Makefile.in",
      "status": "modified",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/Makefile.in?ref=9698cf9b1c485edbbeabc9f65bfd0fdef92e3854",
      "patch": "@@ -50930,6 +50930,34 @@ all-stage3-libctf: maybe-all-stage3-zlib\n all-stage4-libctf: maybe-all-stage4-zlib\n all-stageprofile-libctf: maybe-all-stageprofile-zlib\n all-stagefeedback-libctf: maybe-all-stagefeedback-zlib\n+configure-libctf: maybe-all-bfd\n+configure-stage1-libctf: maybe-all-stage1-bfd\n+configure-stage2-libctf: maybe-all-stage2-bfd\n+configure-stage3-libctf: maybe-all-stage3-bfd\n+configure-stage4-libctf: maybe-all-stage4-bfd\n+configure-stageprofile-libctf: maybe-all-stageprofile-bfd\n+configure-stagefeedback-libctf: maybe-all-stagefeedback-bfd\n+configure-libctf: maybe-all-intl\n+configure-stage1-libctf: maybe-all-stage1-intl\n+configure-stage2-libctf: maybe-all-stage2-intl\n+configure-stage3-libctf: maybe-all-stage3-intl\n+configure-stage4-libctf: maybe-all-stage4-intl\n+configure-stageprofile-libctf: maybe-all-stageprofile-intl\n+configure-stagefeedback-libctf: maybe-all-stagefeedback-intl\n+configure-libctf: maybe-all-zlib\n+configure-stage1-libctf: maybe-all-stage1-zlib\n+configure-stage2-libctf: maybe-all-stage2-zlib\n+configure-stage3-libctf: maybe-all-stage3-zlib\n+configure-stage4-libctf: maybe-all-stage4-zlib\n+configure-stageprofile-libctf: maybe-all-stageprofile-zlib\n+configure-stagefeedback-libctf: maybe-all-stagefeedback-zlib\n+configure-libctf: maybe-all-libiconv\n+configure-stage1-libctf: maybe-all-stage1-libiconv\n+configure-stage2-libctf: maybe-all-stage2-libiconv\n+configure-stage3-libctf: maybe-all-stage3-libiconv\n+configure-stage4-libctf: maybe-all-stage4-libiconv\n+configure-stageprofile-libctf: maybe-all-stageprofile-libiconv\n+configure-stagefeedback-libctf: maybe-all-stagefeedback-libiconv\n all-bison: maybe-all-build-texinfo\n all-flex: maybe-all-build-bison\n all-flex: maybe-all-m4"
    },
    {
      "sha": "879aeed38f7282087d0784f69662924f83e8e33c",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=9698cf9b1c485edbbeabc9f65bfd0fdef92e3854",
      "patch": "@@ -1,3 +1,11 @@\n+2019-05-28  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* configure.in: Check for bfd_section_from_elf_index.\n+\t* configure: Regenerate.\n+\t* config.h.in [HAVE_BFD_ELF]: Likewise.\n+\t* libctf/ctf_open_bfd (ctf_bfdopen_ctfsect): Use it.\n+\tabfd is potentially unused now.\n+\n 2019-05-28  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* Makefile.am: New."
    },
    {
      "sha": "829201033ea5bf6fbecea0ed85b148ca8929c35b",
      "filename": "libctf/config.h.in",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854/libctf/config.h.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854/libctf/config.h.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/config.h.in?ref=9698cf9b1c485edbbeabc9f65bfd0fdef92e3854",
      "patch": "@@ -1,5 +1,8 @@\n /* config.h.in.  Generated from configure.ac by autoheader.  */\n \n+/* Whether libbfd was configured for an ELF target. */\n+#undef HAVE_BFD_ELF\n+\n /* Define to 1 if you have the <byteswap.h> header file. */\n #undef HAVE_BYTESWAP_H\n "
    },
    {
      "sha": "1c0340125a05535eec47c37be5c99d02aa1ec625",
      "filename": "libctf/configure",
      "status": "modified",
      "additions": 108,
      "deletions": 0,
      "changes": 108,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854/libctf/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854/libctf/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/configure?ref=9698cf9b1c485edbbeabc9f65bfd0fdef92e3854",
      "patch": "@@ -5974,6 +5974,114 @@ $as_echo \"#define HAVE_MMAP 1\" >>confdefs.h\n fi\n rm -f conftest.mmap conftest.txt\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing dlopen\" >&5\n+$as_echo_n \"checking for library containing dlopen... \" >&6; }\n+if ${ac_cv_search_dlopen+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_func_search_save_LIBS=$LIBS\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char dlopen ();\n+int\n+main ()\n+{\n+return dlopen ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+for ac_lib in '' dl; do\n+  if test -z \"$ac_lib\"; then\n+    ac_res=\"none required\"\n+  else\n+    ac_res=-l$ac_lib\n+    LIBS=\"-l$ac_lib  $ac_func_search_save_LIBS\"\n+  fi\n+  if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_search_dlopen=$ac_res\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext\n+  if ${ac_cv_search_dlopen+:} false; then :\n+  break\n+fi\n+done\n+if ${ac_cv_search_dlopen+:} false; then :\n+\n+else\n+  ac_cv_search_dlopen=no\n+fi\n+rm conftest.$ac_ext\n+LIBS=$ac_func_search_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_search_dlopen\" >&5\n+$as_echo \"$ac_cv_search_dlopen\" >&6; }\n+ac_res=$ac_cv_search_dlopen\n+if test \"$ac_res\" != no; then :\n+  test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n+\n+fi\n+\n+\n+# Similar to GDB_AC_CHECK_BFD.\n+OLD_CFLAGS=$CFLAGS\n+OLD_LDFLAGS=$LDFLAGS\n+OLD_LIBS=$LIBS\n+# Put the old CFLAGS/LDFLAGS last, in case the user's (C|LD)FLAGS\n+# points somewhere with bfd, with -I/foo/lib and -L/foo/lib.  We\n+# always want our bfd.\n+CFLAGS=\"-I${srcdir}/../include -I../bfd -I${srcdir}/../bfd $CFLAGS\"\n+ZLIBDIR=`echo $zlibdir | sed 's,\\$(top_builddir)/,,g'`\n+LDFLAGS=\"-L../bfd -L../libiberty $ZLIBDIR $LDFLAGS\"\n+intl=`echo $LIBINTL | sed 's,${top_builddir}/,,g'`\n+LIBS=\"-lbfd -liberty -lz $intl $LIBS\"\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ELF support in BFD\" >&5\n+$as_echo_n \"checking for ELF support in BFD... \" >&6; }\n+if ${ac_cv_libctf_bfd_elf+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+#include <stdlib.h>\n+\t     #include \"bfd.h\"\n+\t     #include \"elf-bfd.h\"\n+int\n+main ()\n+{\n+(void) bfd_section_from_elf_index (NULL, 0);\n+\t     return 0;\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_libctf_bfd_elf=yes\n+else\n+  ac_cv_libctf_bfd_elf=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_libctf_bfd_elf\" >&5\n+$as_echo \"$ac_cv_libctf_bfd_elf\" >&6; }\n+CFLAGS=$OLD_CFLAGS\n+LDFLAGS=$OLD_LDFLAGS\n+LIBS=$OLD_LIBS\n+\n+if test $ac_cv_libctf_bfd_elf = yes; then\n+\n+$as_echo \"#define HAVE_BFD_ELF 1\" >>confdefs.h\n+\n+fi\n+\n for ac_header in byteswap.h\n do :\n   ac_fn_c_check_header_mongrel \"$LINENO\" \"byteswap.h\" \"ac_cv_header_byteswap_h\" \"$ac_includes_default\""
    },
    {
      "sha": "2df10935c05b82ad8675a4bfc7e48442d13f1fb6",
      "filename": "libctf/configure.ac",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854/libctf/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854/libctf/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/configure.ac?ref=9698cf9b1c485edbbeabc9f65bfd0fdef92e3854",
      "patch": "@@ -55,6 +55,37 @@ AM_MAINTAINER_MODE\n ACX_PROG_CC_WARNING_OPTS([-Wall], [ac_libctf_warn_cflags])\n \n AC_FUNC_MMAP\n+AC_SEARCH_LIBS(dlopen, dl)\n+\n+# Similar to GDB_AC_CHECK_BFD.\n+OLD_CFLAGS=$CFLAGS\n+OLD_LDFLAGS=$LDFLAGS\n+OLD_LIBS=$LIBS\n+# Put the old CFLAGS/LDFLAGS last, in case the user's (C|LD)FLAGS\n+# points somewhere with bfd, with -I/foo/lib and -L/foo/lib.  We\n+# always want our bfd.\n+CFLAGS=\"-I${srcdir}/../include -I../bfd -I${srcdir}/../bfd $CFLAGS\"\n+ZLIBDIR=`echo $zlibdir | sed 's,\\$(top_builddir)/,,g'`\n+LDFLAGS=\"-L../bfd -L../libiberty $ZLIBDIR $LDFLAGS\"\n+intl=`echo $LIBINTL | sed 's,${top_builddir}/,,g'`\n+LIBS=\"-lbfd -liberty -lz $intl $LIBS\"\n+AC_CACHE_CHECK([for ELF support in BFD], ac_cv_libctf_bfd_elf,\n+[AC_TRY_LINK([#include <stdlib.h>\n+\t     #include \"bfd.h\"\n+\t     #include \"elf-bfd.h\"],\n+\t    [(void) bfd_section_from_elf_index (NULL, 0);\n+\t     return 0;],\n+\t    [ac_cv_libctf_bfd_elf=yes],\n+\t    [ac_cv_libctf_bfd_elf=no])])\n+CFLAGS=$OLD_CFLAGS\n+LDFLAGS=$OLD_LDFLAGS\n+LIBS=$OLD_LIBS\n+\n+if test $ac_cv_libctf_bfd_elf = yes; then\n+  AC_DEFINE([HAVE_BFD_ELF], 1,\n+\t    [Whether libbfd was configured for an ELF target.])\n+fi\n+\n AC_CHECK_HEADERS(byteswap.h)\n AC_CHECK_FUNCS(pread)\n "
    },
    {
      "sha": "5e34d123699b19e963e99fb030756c0add7205aa",
      "filename": "libctf/ctf-open-bfd.c",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854/libctf/ctf-open-bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9698cf9b1c485edbbeabc9f65bfd0fdef92e3854/libctf/ctf-open-bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-open-bfd.c?ref=9698cf9b1c485edbbeabc9f65bfd0fdef92e3854",
      "patch": "@@ -119,7 +119,8 @@ ctf_bfdopen (struct bfd *abfd, int *errp)\n    later.  */\n \n ctf_archive_t *\n-ctf_bfdopen_ctfsect (struct bfd *abfd, const ctf_sect_t *ctfsect, int *errp)\n+ctf_bfdopen_ctfsect (struct bfd *abfd _libctf_unused_,\n+\t\t     const ctf_sect_t *ctfsect, int *errp)\n {\n   struct ctf_archive *arc = NULL;\n   ctf_archive_t *arci;\n@@ -129,6 +130,7 @@ ctf_bfdopen_ctfsect (struct bfd *abfd, const ctf_sect_t *ctfsect, int *errp)\n   const char *bfderrstr = NULL;\n   int is_archive;\n \n+#ifdef HAVE_BFD_ELF\n   asection *sym_asect;\n   ctf_sect_t symsect, strsect;\n   /* TODO: handle SYMTAB_SHNDX.  */\n@@ -178,6 +180,7 @@ ctf_bfdopen_ctfsect (struct bfd *abfd, const ctf_sect_t *ctfsect, int *errp)\n \t  symsectp = &symsect;\n \t}\n     }\n+#endif\n \n   if (ctfsect->cts_size > sizeof (uint64_t) &&\n       ((*(uint64_t *) ctfsect->cts_data) == CTFA_MAGIC))\n@@ -203,9 +206,11 @@ ctf_bfdopen_ctfsect (struct bfd *abfd, const ctf_sect_t *ctfsect, int *errp)\n   if (arci)\n     return arci;\n  err_free_sym:\n+#ifdef HAVE_BFD_ELF\n   free ((void *) symsect.cts_data);\n err_free_str:\n   free ((void *) strsect.cts_data);\n+#endif\n err: _libctf_unused_;\n   if (bfderrstr)\n     {"
    }
  ]
}