{
  "sha": "733f5eea6bde8546a4845416457174c6d716e882",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzMzZjVlZWE2YmRlODU0NmE0ODQ1NDE2NDU3MTc0YzZkNzE2ZTg4Mg==",
  "commit": {
    "author": {
      "name": "Martin Liska",
      "email": "mliska@suse.cz",
      "date": "2021-03-23T09:02:04Z"
    },
    "committer": {
      "name": "Martin Liska",
      "email": "mliska@suse.cz",
      "date": "2021-04-01T04:29:59Z"
    },
    "message": "Use startswith in gdb subfolder.\n\ngdb/ChangeLog:\n\n\t* cp-name-parser.y: Use startswith instead of strncmp.\n\t* m2-exp.y: Likewise.\n\t* macroexp.c (substitute_args): Likewise.\n\t* mi/mi-main.c (command_notifies_uscc_observer): Likewise.\n\t* rust-exp.y: Likewise.",
    "tree": {
      "sha": "e07361cad1bb0c645db507135b7d5ea361a57d26",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e07361cad1bb0c645db507135b7d5ea361a57d26"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/733f5eea6bde8546a4845416457174c6d716e882",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/733f5eea6bde8546a4845416457174c6d716e882",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/733f5eea6bde8546a4845416457174c6d716e882",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/733f5eea6bde8546a4845416457174c6d716e882/comments",
  "author": {
    "login": "marxin",
    "id": 2658545,
    "node_id": "MDQ6VXNlcjI2NTg1NDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/marxin",
    "html_url": "https://github.com/marxin",
    "followers_url": "https://api.github.com/users/marxin/followers",
    "following_url": "https://api.github.com/users/marxin/following{/other_user}",
    "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marxin/subscriptions",
    "organizations_url": "https://api.github.com/users/marxin/orgs",
    "repos_url": "https://api.github.com/users/marxin/repos",
    "events_url": "https://api.github.com/users/marxin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/marxin/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "marxin",
    "id": 2658545,
    "node_id": "MDQ6VXNlcjI2NTg1NDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/marxin",
    "html_url": "https://github.com/marxin",
    "followers_url": "https://api.github.com/users/marxin/followers",
    "following_url": "https://api.github.com/users/marxin/following{/other_user}",
    "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marxin/subscriptions",
    "organizations_url": "https://api.github.com/users/marxin/orgs",
    "repos_url": "https://api.github.com/users/marxin/repos",
    "events_url": "https://api.github.com/users/marxin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/marxin/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "af82f89db0f4a9c161a642c201f4618e728b9ff9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/af82f89db0f4a9c161a642c201f4618e728b9ff9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/af82f89db0f4a9c161a642c201f4618e728b9ff9"
    }
  ],
  "stats": {
    "total": 92,
    "additions": 50,
    "deletions": 42
  },
  "files": [
    {
      "sha": "9684f2904013dd7db0321706262b0f1c34700d5e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/733f5eea6bde8546a4845416457174c6d716e882/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/733f5eea6bde8546a4845416457174c6d716e882/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=733f5eea6bde8546a4845416457174c6d716e882",
      "patch": "@@ -1,3 +1,11 @@\n+2021-04-01  Martin Liska  <mliska@suse.cz>\n+\n+\t* cp-name-parser.y: Use startswith instead of strncmp.\n+\t* m2-exp.y: Likewise.\n+\t* macroexp.c (substitute_args): Likewise.\n+\t* mi/mi-main.c (command_notifies_uscc_observer): Likewise.\n+\t* rust-exp.y: Likewise.\n+\n 2021-03-31  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (dwarf2_gdb_index::map_matching_symbols): Merge"
    },
    {
      "sha": "0688e5b085ae0352157eda2b927f0993f9a7be2e",
      "filename": "gdb/cp-name-parser.y",
      "status": "modified",
      "additions": 34,
      "deletions": 34,
      "changes": 68,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/733f5eea6bde8546a4845416457174c6d716e882/gdb/cp-name-parser.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/733f5eea6bde8546a4845416457174c6d716e882/gdb/cp-name-parser.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-name-parser.y?ref=733f5eea6bde8546a4845416457174c6d716e882",
      "patch": "@@ -1511,7 +1511,7 @@ cp_parse_escape (const char **string_ptr)\n }\n \n #define HANDLE_SPECIAL(string, comp)\t\t\t\t\\\n-  if (strncmp (tokstart, string, sizeof (string) - 1) == 0)\t\\\n+  if (startswith (tokstart, string))\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\\\n       state->lexptr = tokstart + sizeof (string) - 1;\t\t\t\\\n       lvalp->lval = comp;\t\t\t\t\t\\\n@@ -1592,7 +1592,7 @@ yylex (YYSTYPE *lvalp, cpname_state *state)\n       return INT;\n \n     case '(':\n-      if (strncmp (tokstart, \"(anonymous namespace)\", 21) == 0)\n+      if (startswith (tokstart, \"(anonymous namespace)\"))\n \t{\n \t  state->lexptr += 21;\n \t  lvalp->comp = state->make_name (\"(anonymous namespace)\",\n@@ -1625,7 +1625,7 @@ yylex (YYSTYPE *lvalp, cpname_state *state)\n       HANDLE_TOKEN2 (\"->\", ARROW);\n \n       /* For construction vtables.  This is kind of hokey.  */\n-      if (strncmp (tokstart, \"-in-\", 4) == 0)\n+      if (startswith (tokstart, \"-in-\"))\n \t{\n \t  state->lexptr += 4;\n \t  return CONSTRUCTION_IN;\n@@ -1803,20 +1803,20 @@ yylex (YYSTYPE *lvalp, cpname_state *state)\n   switch (namelen)\n     {\n     case 16:\n-      if (strncmp (tokstart, \"reinterpret_cast\", 16) == 0)\n+      if (startswith (tokstart, \"reinterpret_cast\"))\n \treturn REINTERPRET_CAST;\n       break;\n     case 12:\n-      if (strncmp (tokstart, \"construction vtable for \", 24) == 0)\n+      if (startswith (tokstart, \"construction vtable for \"))\n \t{\n \t  state->lexptr = tokstart + 24;\n \t  return CONSTRUCTION_VTABLE;\n \t}\n-      if (strncmp (tokstart, \"dynamic_cast\", 12) == 0)\n+      if (startswith (tokstart, \"dynamic_cast\"))\n \treturn DYNAMIC_CAST;\n       break;\n     case 11:\n-      if (strncmp (tokstart, \"static_cast\", 11) == 0)\n+      if (startswith (tokstart, \"static_cast\"))\n \treturn STATIC_CAST;\n       break;\n     case 9:\n@@ -1827,24 +1827,24 @@ yylex (YYSTYPE *lvalp, cpname_state *state)\n       HANDLE_SPECIAL (\"typeinfo for \", DEMANGLE_COMPONENT_TYPEINFO);\n       HANDLE_SPECIAL (\"typeinfo fn for \", DEMANGLE_COMPONENT_TYPEINFO_FN);\n       HANDLE_SPECIAL (\"typeinfo name for \", DEMANGLE_COMPONENT_TYPEINFO_NAME);\n-      if (strncmp (tokstart, \"operator\", 8) == 0)\n+      if (startswith (tokstart, \"operator\"))\n \treturn OPERATOR;\n-      if (strncmp (tokstart, \"restrict\", 8) == 0)\n+      if (startswith (tokstart, \"restrict\"))\n \treturn RESTRICT;\n-      if (strncmp (tokstart, \"unsigned\", 8) == 0)\n+      if (startswith (tokstart, \"unsigned\"))\n \treturn UNSIGNED;\n-      if (strncmp (tokstart, \"template\", 8) == 0)\n+      if (startswith (tokstart, \"template\"))\n \treturn TEMPLATE;\n-      if (strncmp (tokstart, \"volatile\", 8) == 0)\n+      if (startswith (tokstart, \"volatile\"))\n \treturn VOLATILE_KEYWORD;\n       break;\n     case 7:\n       HANDLE_SPECIAL (\"virtual thunk to \", DEMANGLE_COMPONENT_VIRTUAL_THUNK);\n-      if (strncmp (tokstart, \"wchar_t\", 7) == 0)\n+      if (startswith (tokstart, \"wchar_t\"))\n \treturn WCHAR_T;\n       break;\n     case 6:\n-      if (strncmp (tokstart, \"global constructors keyed to \", 29) == 0)\n+      if (startswith (tokstart, \"global constructors keyed to \"))\n \t{\n \t  const char *p;\n \t  state->lexptr = tokstart + 29;\n@@ -1855,7 +1855,7 @@ yylex (YYSTYPE *lvalp, cpname_state *state)\n \t  state->lexptr = p;\n \t  return DEMANGLER_SPECIAL;\n \t}\n-      if (strncmp (tokstart, \"global destructors keyed to \", 28) == 0)\n+      if (startswith (tokstart, \"global destructors keyed to \"))\n \t{\n \t  const char *p;\n \t  state->lexptr = tokstart + 28;\n@@ -1868,52 +1868,52 @@ yylex (YYSTYPE *lvalp, cpname_state *state)\n \t}\n \n       HANDLE_SPECIAL (\"vtable for \", DEMANGLE_COMPONENT_VTABLE);\n-      if (strncmp (tokstart, \"delete\", 6) == 0)\n+      if (startswith (tokstart, \"delete\"))\n \treturn DELETE;\n-      if (strncmp (tokstart, \"struct\", 6) == 0)\n+      if (startswith (tokstart, \"struct\"))\n \treturn STRUCT;\n-      if (strncmp (tokstart, \"signed\", 6) == 0)\n+      if (startswith (tokstart, \"signed\"))\n \treturn SIGNED_KEYWORD;\n-      if (strncmp (tokstart, \"sizeof\", 6) == 0)\n+      if (startswith (tokstart, \"sizeof\"))\n \treturn SIZEOF;\n-      if (strncmp (tokstart, \"double\", 6) == 0)\n+      if (startswith (tokstart, \"double\"))\n \treturn DOUBLE_KEYWORD;\n       break;\n     case 5:\n       HANDLE_SPECIAL (\"guard variable for \", DEMANGLE_COMPONENT_GUARD);\n-      if (strncmp (tokstart, \"false\", 5) == 0)\n+      if (startswith (tokstart, \"false\"))\n \treturn FALSEKEYWORD;\n-      if (strncmp (tokstart, \"class\", 5) == 0)\n+      if (startswith (tokstart, \"class\"))\n \treturn CLASS;\n-      if (strncmp (tokstart, \"union\", 5) == 0)\n+      if (startswith (tokstart, \"union\"))\n \treturn UNION;\n-      if (strncmp (tokstart, \"float\", 5) == 0)\n+      if (startswith (tokstart, \"float\"))\n \treturn FLOAT_KEYWORD;\n-      if (strncmp (tokstart, \"short\", 5) == 0)\n+      if (startswith (tokstart, \"short\"))\n \treturn SHORT;\n-      if (strncmp (tokstart, \"const\", 5) == 0)\n+      if (startswith (tokstart, \"const\"))\n \treturn CONST_KEYWORD;\n       break;\n     case 4:\n-      if (strncmp (tokstart, \"void\", 4) == 0)\n+      if (startswith (tokstart, \"void\"))\n \treturn VOID;\n-      if (strncmp (tokstart, \"bool\", 4) == 0)\n+      if (startswith (tokstart, \"bool\"))\n \treturn BOOL;\n-      if (strncmp (tokstart, \"char\", 4) == 0)\n+      if (startswith (tokstart, \"char\"))\n \treturn CHAR;\n-      if (strncmp (tokstart, \"enum\", 4) == 0)\n+      if (startswith (tokstart, \"enum\"))\n \treturn ENUM;\n-      if (strncmp (tokstart, \"long\", 4) == 0)\n+      if (startswith (tokstart, \"long\"))\n \treturn LONG;\n-      if (strncmp (tokstart, \"true\", 4) == 0)\n+      if (startswith (tokstart, \"true\"))\n \treturn TRUEKEYWORD;\n       break;\n     case 3:\n       HANDLE_SPECIAL (\"VTT for \", DEMANGLE_COMPONENT_VTT);\n       HANDLE_SPECIAL (\"non-virtual thunk to \", DEMANGLE_COMPONENT_THUNK);\n-      if (strncmp (tokstart, \"new\", 3) == 0)\n+      if (startswith (tokstart, \"new\"))\n \treturn NEW;\n-      if (strncmp (tokstart, \"int\", 3) == 0)\n+      if (startswith (tokstart, \"int\"))\n \treturn INT_KEYWORD;\n       break;\n     default:"
    },
    {
      "sha": "b19bbeb3fb258e46d6b70bb0812ba9dc18bd9e2e",
      "filename": "gdb/m2-exp.y",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/733f5eea6bde8546a4845416457174c6d716e882/gdb/m2-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/733f5eea6bde8546a4845416457174c6d716e882/gdb/m2-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-exp.y?ref=733f5eea6bde8546a4845416457174c6d716e882",
      "patch": "@@ -976,12 +976,12 @@ yylex (void)\n     else\n     {\n        /* Built-in BOOLEAN type.  This is sort of a hack.  */\n-       if (strncmp (tokstart, \"TRUE\", 4) == 0)\n+       if (startswith (tokstart, \"TRUE\"))\n        {\n \t  yylval.ulval = 1;\n \t  return M2_TRUE;\n        }\n-       else if (strncmp (tokstart, \"FALSE\", 5) == 0)\n+       else if (startswith (tokstart, \"FALSE\"))\n        {\n \t  yylval.ulval = 0;\n \t  return M2_FALSE;"
    },
    {
      "sha": "1ece8d5d5be580a797029a09e36f2161154cfe0f",
      "filename": "gdb/macroexp.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/733f5eea6bde8546a4845416457174c6d716e882/gdb/macroexp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/733f5eea6bde8546a4845416457174c6d716e882/gdb/macroexp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/macroexp.c?ref=733f5eea6bde8546a4845416457174c6d716e882",
      "patch": "@@ -988,7 +988,7 @@ substitute_args (growable_macro_buffer *dest,\n \t\t\t\t\t&keep_going))\n     {\n       bool token_is_vaopt = (tok.len == 10\n-\t\t\t     && strncmp (tok.text, \"__VA_OPT__\", 10) == 0);\n+\t\t\t     && startswith (tok.text, \"__VA_OPT__\"));\n \n       if (vaopt_state > 0)\n \t{"
    },
    {
      "sha": "582a55490d171207a43ee213657eb20be74ecf5d",
      "filename": "gdb/mi/mi-main.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/733f5eea6bde8546a4845416457174c6d716e882/gdb/mi/mi-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/733f5eea6bde8546a4845416457174c6d716e882/gdb/mi/mi-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-main.c?ref=733f5eea6bde8546a4845416457174c6d716e882",
      "patch": "@@ -1886,17 +1886,17 @@ command_notifies_uscc_observer (struct mi_parse *command)\n   if (command->op == CLI_COMMAND)\n     {\n       /* CLI commands \"thread\" and \"inferior\" already send it.  */\n-      return (strncmp (command->command, \"thread \", 7) == 0\n-\t      || strncmp (command->command, \"inferior \", 9) == 0);\n+      return (startswith (command->command, \"thread \")\n+\t      || startswith (command->command, \"inferior \"));\n     }\n   else /* MI_COMMAND */\n     {\n       if (strcmp (command->command, \"interpreter-exec\") == 0\n \t  && command->argc > 1)\n \t{\n \t  /* \"thread\" and \"inferior\" again, but through -interpreter-exec.  */\n-\t  return (strncmp (command->argv[1], \"thread \", 7) == 0\n-\t\t  || strncmp (command->argv[1], \"inferior \", 9) == 0);\n+\t  return (startswith (command->argv[1], \"thread \")\n+\t\t  || startswith (command->argv[1], \"inferior \"));\n \t}\n \n       else"
    },
    {
      "sha": "3750af0dc348ec9b3db8d13195cc9634d6cfedd9",
      "filename": "gdb/rust-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/733f5eea6bde8546a4845416457174c6d716e882/gdb/rust-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/733f5eea6bde8546a4845416457174c6d716e882/gdb/rust-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-exp.y?ref=733f5eea6bde8546a4845416457174c6d716e882",
      "patch": "@@ -1986,7 +1986,7 @@ munge_name_and_block (const char **name, const struct block **block)\n {\n   /* If it is a global reference, skip the current block in favor of\n      the static block.  */\n-  if (strncmp (*name, \"::\", 2) == 0)\n+  if (startswith (*name, \"::\"))\n     {\n       *name += 2;\n       *block = block_static_block (*block);"
    }
  ]
}