{
  "sha": "3a275541049f295719782642fb8aa912b0a4a0d3",
  "node_id": "C_kwDOANOeidoAKDNhMjc1NTQxMDQ5ZjI5NTcxOTc4MjY0MmZiOGFhOTEyYjBhNGEwZDM",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-03T05:17:17Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-03T05:19:43Z"
    },
    "message": "sim: mloop: mark a few conditionally used funcs as unused\n\nThese are marked inline, so building w/gcc at higher optimization\nlevels will automatically discard them.  But building with -O0 will\ntrigger unused function warnings, so fix that.\n\nThe common before/after cover functions in the common mloop generator\nare not used by all architecture ports.  Doesn't seem to be a hard\nrequirement, so marking them optional (i.e. unused) is fine.\n\nThe cris execute function is conditionally used depending on the\nfast-build mode settings, so mark it unused too.",
    "tree": {
      "sha": "bf11791f181a0fc9f7ac1bd740b3148c2385abbc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bf11791f181a0fc9f7ac1bd740b3148c2385abbc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3a275541049f295719782642fb8aa912b0a4a0d3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3a275541049f295719782642fb8aa912b0a4a0d3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3a275541049f295719782642fb8aa912b0a4a0d3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3a275541049f295719782642fb8aa912b0a4a0d3/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "359c74415c2b78bf2b2be3bd3e013d78f298350d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/359c74415c2b78bf2b2be3bd3e013d78f298350d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/359c74415c2b78bf2b2be3bd3e013d78f298350d"
    }
  ],
  "stats": {
    "total": 7,
    "additions": 4,
    "deletions": 3
  },
  "files": [
    {
      "sha": "b8a0f435a09b5bfa150d15a36d25cac8be6369da",
      "filename": "sim/common/genmloop.sh",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a275541049f295719782642fb8aa912b0a4a0d3/sim/common/genmloop.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a275541049f295719782642fb8aa912b0a4a0d3/sim/common/genmloop.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/genmloop.sh?ref=3a275541049f295719782642fb8aa912b0a4a0d3",
      "patch": "@@ -349,7 +349,7 @@ static INLINE void\n    This is as opposed to x-after which is only emitted at the end of a group\n    of parallel insns.  */\n \n-static INLINE void\n+ATTRIBUTE_UNUSED static INLINE void\n @prefix@_emit_before (SIM_CPU *current_cpu, SCACHE *sc, PCADDR pc, int first_p)\n {\n   ARGBUF *abuf = &sc[0].argbuf;\n@@ -364,7 +364,7 @@ static INLINE void\n    x-after is emitted after a serial insn or at the end of a group of\n    parallel insns.  */\n \n-static INLINE void\n+ATTRIBUTE_UNUSED static INLINE void\n @prefix@_emit_after (SIM_CPU *current_cpu, SCACHE *sc, PCADDR pc)\n {\n   ARGBUF *abuf = &sc[0].argbuf;"
    },
    {
      "sha": "da800e745afd36dfee409ebb3616330455e9afb2",
      "filename": "sim/cris/mloop.in",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a275541049f295719782642fb8aa912b0a4a0d3/sim/cris/mloop.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a275541049f295719782642fb8aa912b0a4a0d3/sim/cris/mloop.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/cris/mloop.in?ref=3a275541049f295719782642fb8aa912b0a4a0d3",
      "patch": "@@ -67,7 +67,8 @@ extract (SIM_CPU *current_cpu, PCADDR pc, CGEN_INSN_INT insn, ARGBUF *abuf,\n   return id;\n }\n \n-static INLINE SEM_PC\n+/* This might not be used directly depending on the fast compile mode.  */\n+ATTRIBUTE_UNUSED static INLINE SEM_PC\n execute (SIM_CPU *current_cpu, SCACHE *sc, int fast_p)\n {\n   SEM_PC vpc;"
    }
  ]
}