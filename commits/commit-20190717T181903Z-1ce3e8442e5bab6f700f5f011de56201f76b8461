{
  "sha": "1ce3e8442e5bab6f700f5f011de56201f76b8461",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWNlM2U4NDQyZTViYWI2ZjcwMGY1ZjAxMWRlNTYyMDFmNzZiODQ2MQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-27T22:04:26Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-07-17T18:19:03Z"
    },
    "message": "Introduce TUI window iterator\n\nThis introduces an iterator class and a range adapter to make it\nsimpler to iterate over TUI windows.\n\nOne explicit iteration remains, in tui-win.c, because that spot is\ndeleting windows as well.\n\ngdb/ChangeLog\n2019-07-17  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-wingeneral.h (tui_refresh_all): Update.\n\t* tui/tui-wingeneral.c (make_all_visible): Use foreach.\n\t(tui_refresh_all): Remove \"list\" parameter.  Use foreach.\n\t* tui/tui-win.c (window_name_completer): Use foreach.\n\t(tui_refresh_all_win, tui_rehighlight_all, tui_all_windows_info)\n\t(update_tab_width): Likewise.\n\t* tui/tui-layout.c (show_layout): Update.\n\t* tui/tui-data.h (class tui_window_iterator): New.\n\t(struct all_tui_windows): New.\n\t* tui/tui-data.c (tui_partial_win_by_name): Use foreach.",
    "tree": {
      "sha": "03a4a7a990697c748a9cea081cf13b2dcc693e72",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/03a4a7a990697c748a9cea081cf13b2dcc693e72"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1ce3e8442e5bab6f700f5f011de56201f76b8461",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ce3e8442e5bab6f700f5f011de56201f76b8461",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1ce3e8442e5bab6f700f5f011de56201f76b8461",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ce3e8442e5bab6f700f5f011de56201f76b8461/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fe3eaf1cd9af54cd4c678a8dde7fd0df601c9490",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe3eaf1cd9af54cd4c678a8dde7fd0df601c9490",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fe3eaf1cd9af54cd4c678a8dde7fd0df601c9490"
    }
  ],
  "stats": {
    "total": 175,
    "additions": 116,
    "deletions": 59
  },
  "files": [
    {
      "sha": "64e3a1b4c8ba915cde7b0fd1c5b7dded868dc479",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ce3e8442e5bab6f700f5f011de56201f76b8461/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ce3e8442e5bab6f700f5f011de56201f76b8461/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1ce3e8442e5bab6f700f5f011de56201f76b8461",
      "patch": "@@ -1,3 +1,16 @@\n+2019-07-17  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-wingeneral.h (tui_refresh_all): Update.\n+\t* tui/tui-wingeneral.c (make_all_visible): Use foreach.\n+\t(tui_refresh_all): Remove \"list\" parameter.  Use foreach.\n+\t* tui/tui-win.c (window_name_completer): Use foreach.\n+\t(tui_refresh_all_win, tui_rehighlight_all, tui_all_windows_info)\n+\t(update_tab_width): Likewise.\n+\t* tui/tui-layout.c (show_layout): Update.\n+\t* tui/tui-data.h (class tui_window_iterator): New.\n+\t(struct all_tui_windows): New.\n+\t* tui/tui-data.c (tui_partial_win_by_name): Use foreach.\n+\n 2019-07-17  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-regs.c (tui_reg_next, tui_reg_prev): Add \"current_group\""
    },
    {
      "sha": "eacf174bbe7962ca3e794b52999608d9a84107c5",
      "filename": "gdb/tui/tui-data.c",
      "status": "modified",
      "additions": 7,
      "deletions": 15,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ce3e8442e5bab6f700f5f011de56201f76b8461/gdb/tui/tui-data.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ce3e8442e5bab6f700f5f011de56201f76b8461/gdb/tui/tui-data.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.c?ref=1ce3e8442e5bab6f700f5f011de56201f76b8461",
      "patch": "@@ -294,27 +294,19 @@ tui_prev_win (struct tui_win_info *cur_win)\n struct tui_win_info *\n tui_partial_win_by_name (const char *name)\n {\n-  struct tui_win_info *win_info = NULL;\n-\n   if (name != NULL)\n     {\n-      int i = 0;\n-\n-      while (i < MAX_MAJOR_WINDOWS && win_info == NULL)\n+      for (tui_win_info *item : all_tui_windows ())\n \t{\n-          if (tui_win_list[i] != 0)\n-            {\n-              const char *cur_name = tui_win_list[i]->name ();\n-\n-              if (strlen (name) <= strlen (cur_name)\n-\t\t  && startswith (cur_name, name))\n-                win_info = tui_win_list[i];\n-            }\n-\t  i++;\n+\t  const char *cur_name = item->name ();\n+\n+\t  if (strlen (name) <= strlen (cur_name)\n+\t      && startswith (cur_name, name))\n+\t    return item;\n \t}\n     }\n \n-  return win_info;\n+  return NULL;\n }\n \n "
    },
    {
      "sha": "bd22f9eec6931f02c242ca59b9dcd1c3c70a9821",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 69,
      "deletions": 0,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ce3e8442e5bab6f700f5f011de56201f76b8461/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ce3e8442e5bab6f700f5f011de56201f76b8461/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=1ce3e8442e5bab6f700f5f011de56201f76b8461",
      "patch": "@@ -601,6 +601,75 @@ extern struct tui_win_info *tui_win_list[MAX_MAJOR_WINDOWS];\n #define TUI_DATA_WIN    ((tui_data_window *) tui_win_list[DATA_WIN])\n #define TUI_CMD_WIN     ((tui_cmd_window *) tui_win_list[CMD_WIN])\n \n+/* An iterator that iterates over all windows.  */\n+\n+class tui_window_iterator\n+{\n+public:\n+\n+  typedef tui_window_iterator self_type;\n+  typedef struct tui_win_info *value_type;\n+  typedef struct tui_win_info *&reference;\n+  typedef struct tui_win_info **pointer;\n+  typedef std::forward_iterator_tag iterator_category;\n+  typedef int difference_type;\n+\n+  explicit tui_window_iterator (enum tui_win_type type)\n+    : m_type (type)\n+  {\n+    advance ();\n+  }\n+\n+  tui_window_iterator ()\n+    : m_type (MAX_MAJOR_WINDOWS)\n+  {\n+  }\n+\n+  bool operator!= (const self_type &other) const\n+  {\n+    return m_type != other.m_type;\n+  }\n+\n+  value_type operator* () const\n+  {\n+    gdb_assert (m_type < MAX_MAJOR_WINDOWS);\n+    return tui_win_list[m_type];\n+  }\n+\n+  self_type &operator++ ()\n+  {\n+    ++m_type;\n+    advance ();\n+    return *this;\n+  }\n+\n+private:\n+\n+  void advance ()\n+  {\n+    while (m_type < MAX_MAJOR_WINDOWS && tui_win_list[m_type] == nullptr)\n+      ++m_type;\n+  }\n+\n+  int m_type;\n+};\n+\n+/* A range adapter for iterating over TUI windows.  */\n+\n+struct all_tui_windows\n+{\n+  tui_window_iterator begin () const\n+  {\n+    return tui_window_iterator (SRC_WIN);\n+  }\n+\n+  tui_window_iterator end () const\n+  {\n+    return tui_window_iterator ();\n+  }\n+};\n+\n+\n /* Data Manipulation Functions.  */\n extern void tui_initialize_static_data (void);\n extern struct tui_win_info *tui_partial_win_by_name (const char *);"
    },
    {
      "sha": "a3ded2037362923fd718754cb9988201ac0905ad",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ce3e8442e5bab6f700f5f011de56201f76b8461/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ce3e8442e5bab6f700f5f011de56201f76b8461/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=1ce3e8442e5bab6f700f5f011de56201f76b8461",
      "patch": "@@ -86,7 +86,7 @@ show_layout (enum tui_layout_type layout)\n \t  || layout == DISASSEM_DATA_COMMAND)\n \t{\n \t  show_data (layout);\n-\t  tui_refresh_all (tui_win_list);\n+\t  tui_refresh_all ();\n \t}\n       else\n \t{"
    },
    {
      "sha": "f83281f790259fad4b115024387adc49c6ce9ec3",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 19,
      "deletions": 28,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ce3e8442e5bab6f700f5f011de56201f76b8461/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ce3e8442e5bab6f700f5f011de56201f76b8461/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=1ce3e8442e5bab6f700f5f011de56201f76b8461",
      "patch": "@@ -364,18 +364,16 @@ window_name_completer (completion_tracker &tracker,\n \t\t       const char *text, const char *word)\n {\n   std::vector<const char *> completion_name_vec;\n-  int win_type;\n \n-  for (win_type = SRC_WIN; win_type < MAX_MAJOR_WINDOWS; win_type++)\n+  for (tui_win_info *win_info : all_tui_windows ())\n     {\n       const char *completion_name = NULL;\n \n       /* We can't focus on an invisible window.  */\n-      if (tui_win_list[win_type] == NULL\n-\t  || !tui_win_list[win_type]->is_visible)\n+      if (!win_info->is_visible)\n \tcontinue;\n \n-      completion_name = tui_win_list[win_type]->name ();\n+      completion_name = win_info->name ();\n       gdb_assert (completion_name != NULL);\n       completion_name_vec.push_back (completion_name);\n     }\n@@ -518,25 +516,21 @@ tui_source_window_base::refresh_all ()\n void\n tui_refresh_all_win (void)\n {\n-  int type;\n-\n   clearok (curscr, TRUE);\n-  tui_refresh_all (tui_win_list);\n-  for (type = SRC_WIN; type < MAX_MAJOR_WINDOWS; type++)\n+  tui_refresh_all ();\n+  for (tui_win_info *win_info : all_tui_windows ())\n     {\n-      if (tui_win_list[type] && tui_win_list[type]->is_visible)\n-\ttui_win_list[type]->refresh_all ();\n+      if (win_info->is_visible)\n+\twin_info->refresh_all ();\n     }\n   tui_show_locator_content ();\n }\n \n void\n tui_rehighlight_all (void)\n {\n-  int type;\n-\n-  for (type = SRC_WIN; type < MAX_MAJOR_WINDOWS; type++)\n-    tui_check_and_display_highlight_if_needed (tui_win_list[type]);\n+  for (tui_win_info *win_info : all_tui_windows ())\n+    tui_check_and_display_highlight_if_needed (win_info);\n }\n \n /* Resize all the windows based on the terminal size.  This function\n@@ -885,21 +879,19 @@ tui_set_focus_command (const char *arg, int from_tty)\n static void\n tui_all_windows_info (const char *arg, int from_tty)\n {\n-  int type;\n   struct tui_win_info *win_with_focus = tui_win_with_focus ();\n \n-  for (type = SRC_WIN; (type < MAX_MAJOR_WINDOWS); type++)\n-    if (tui_win_list[type] \n-\t&& tui_win_list[type]->is_visible)\n+  for (tui_win_info *win_info : all_tui_windows ())\n+    if (win_info->is_visible)\n       {\n-\tif (win_with_focus == tui_win_list[type])\n+\tif (win_with_focus == win_info)\n \t  printf_filtered (\"        %s\\t(%d lines)  <has focus>\\n\",\n-\t\t\t   tui_win_list[type]->name (),\n-\t\t\t   tui_win_list[type]->height);\n+\t\t\t   win_info->name (),\n+\t\t\t   win_info->height);\n \telse\n \t  printf_filtered (\"        %s\\t(%d lines)\\n\",\n-\t\t\t   tui_win_list[type]->name (),\n-\t\t\t   tui_win_list[type]->height);\n+\t\t\t   win_info->name (),\n+\t\t\t   win_info->height);\n       }\n }\n \n@@ -940,11 +932,10 @@ tui_source_window_base::update_tab_width ()\n static void\n update_tab_width ()\n {\n-  for (int win_type = SRC_WIN; win_type < MAX_MAJOR_WINDOWS; win_type++)\n+  for (tui_win_info *win_info : all_tui_windows ())\n     {\n-      if (tui_win_list[win_type] != NULL\n-\t  && tui_win_list[win_type]->is_visible)\n-\ttui_win_list[win_type]->update_tab_width ();\n+      if (win_info->is_visible)\n+\twin_info->update_tab_width ();\n     }\n }\n "
    },
    {
      "sha": "22f841eb88c12bc1852eea0dd78cbb5a24a6d7ac",
      "filename": "gdb/tui/tui-wingeneral.c",
      "status": "modified",
      "additions": 6,
      "deletions": 14,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ce3e8442e5bab6f700f5f011de56201f76b8461/gdb/tui/tui-wingeneral.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ce3e8442e5bab6f700f5f011de56201f76b8461/gdb/tui/tui-wingeneral.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-wingeneral.c?ref=1ce3e8442e5bab6f700f5f011de56201f76b8461",
      "patch": "@@ -212,15 +212,8 @@ tui_source_window_base::make_visible (bool visible)\n static void\n make_all_visible (bool visible)\n {\n-  int i;\n-\n-  for (i = 0; i < MAX_MAJOR_WINDOWS; i++)\n-    {\n-      if (tui_win_list[i] != NULL)\n-\ttui_win_list[i]->make_visible (visible);\n-    }\n-\n-  return;\n+  for (tui_win_info *win_info : all_tui_windows ())\n+    win_info->make_visible (visible);\n }\n \n void\n@@ -257,15 +250,14 @@ tui_source_window_base::refresh ()\n /* Function to refresh all the windows currently displayed.  */\n \n void\n-tui_refresh_all (struct tui_win_info **list)\n+tui_refresh_all ()\n {\n-  int type;\n   struct tui_locator_window *locator = tui_locator_win_info_ptr ();\n \n-  for (type = SRC_WIN; (type < MAX_MAJOR_WINDOWS); type++)\n+  for (tui_win_info *win_info : all_tui_windows ())\n     {\n-      if (list[type] && list[type]->is_visible)\n-\tlist[type]->refresh ();\n+      if (win_info->is_visible)\n+\twin_info->refresh ();\n     }\n   if (locator->is_visible)\n     {"
    },
    {
      "sha": "20b7f21c7c0fde1a3d3ae28e105f4cc8f7eab563",
      "filename": "gdb/tui/tui-wingeneral.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ce3e8442e5bab6f700f5f011de56201f76b8461/gdb/tui/tui-wingeneral.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ce3e8442e5bab6f700f5f011de56201f76b8461/gdb/tui/tui-wingeneral.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-wingeneral.h?ref=1ce3e8442e5bab6f700f5f011de56201f76b8461",
      "patch": "@@ -37,7 +37,7 @@ extern struct tui_win_info *tui_copy_win (struct tui_win_info *);\n extern void tui_box_win (struct tui_gen_win_info *, int);\n extern void tui_highlight_win (struct tui_win_info *);\n extern void tui_check_and_display_highlight_if_needed (struct tui_win_info *);\n-extern void tui_refresh_all (struct tui_win_info **);\n+extern void tui_refresh_all ();\n extern void tui_delete_win (WINDOW *window);\n \n #endif /* TUI_TUI_WINGENERAL_H */"
    }
  ]
}