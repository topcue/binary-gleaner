{
  "sha": "468c0cbb327fadf28386a989f929fcbed4aed8b9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDY4YzBjYmIzMjdmYWRmMjgzODZhOTg5ZjkyOWZjYmVkNGFlZDhiOQ==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-11-04T19:12:09Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-11-12T21:21:35Z"
    },
    "message": "Make struct symbol inherit from general_symbol_info\n\nSince this is now no longer a POD, also give it a constructor that\ninitializes all fields. (I have considered overloading operator new\nto zero-initialize the memory instead; let me know if you prefer that)\n\ngdb/ChangeLog:\n\n2019-11-12  Christian Biesinger  <cbiesinger@google.com>\n\n\t* ada-exp.y (write_ambiguous_var): Update.\n\t* buildsym.c (add_symbol_to_list): Update.\n\t* dwarf2read.c (read_variable): Update.\n\t(new_symbol): Update.\n\t* jit.c (finalize_symtab): Update.\n\t* language.c (language_alloc_type_symbol): Update.\n\t* symtab.c (fixup_symbol_section): Update.\n\t(initialize_objfile_symbol_1): Move code to...\n\t(initialize_objfile_symbol): ...here. Remove now-unnecessary memset.\n\t(allocate_symbol): Update.\n\t(allocate_template_symbol): Update.\n\t(get_symbol_address): Update.\n\t* symtab.h (struct symbol): Inherit from general_symbol_info instead\n\tof having as a field, and add a constructor.\n\t(SYMBOL_VALUE): Update.\n\t(SYMBOL_VALUE_ADDRESS): Update.\n\t(SET_SYMBOL_VALUE_ADDRESS): Update.\n\t(SYMBOL_VALUE_BYTES): Update.\n\t(SYMBOL_VALUE_COMMON_BLOCK): Update.\n\t(SYMBOL_BLOCK_VALUE): Update.\n\t(SYMBOL_VALUE_CHAIN): Update.\n\t(SYMBOL_LANGUAGE): Update.\n\t(SYMBOL_SECTION): Update.\n\t(SYMBOL_OBJ_SECTION): Update.\n\t(SYMBOL_SET_LANGUAGE): Update.\n\t(SYMBOL_SET_LINKAGE_NAME): Update.\n\t(SYMBOL_SET_NAMES): Update.\n\t(SYMBOL_NATURAL_NAME): Update.\n\t(SYMBOL_LINKAGE_NAME): Update.\n\t(SYMBOL_DEMANGLED_NAME): Update.\n\t(SYMBOL_SEARCH_NAME): Update.\n\t(SYMBOL_MATCHES_SEARCH_NAME): Update.\n\t(struct symbol): Update.\n\t(struct template_symbol): Update.\n\t(struct rust_vtable_symbol): Update.\n\t* xcoffread.c (SYMBOL_DUP): Update.\n\nChange-Id: I05b1628455bcce3efaa101e65ef051708d17eb07",
    "tree": {
      "sha": "df5e63c82ad35603b4fbc8716e72dd417176601e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/df5e63c82ad35603b4fbc8716e72dd417176601e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/468c0cbb327fadf28386a989f929fcbed4aed8b9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/468c0cbb327fadf28386a989f929fcbed4aed8b9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/468c0cbb327fadf28386a989f929fcbed4aed8b9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/468c0cbb327fadf28386a989f929fcbed4aed8b9/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ed2c82c364043cf4726541cc7e8011197185b3f8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ed2c82c364043cf4726541cc7e8011197185b3f8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ed2c82c364043cf4726541cc7e8011197185b3f8"
    }
  ],
  "stats": {
    "total": 182,
    "additions": 109,
    "deletions": 73
  },
  "files": [
    {
      "sha": "44ace04beb905c5458f055e50524bb0dd430df87",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/468c0cbb327fadf28386a989f929fcbed4aed8b9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/468c0cbb327fadf28386a989f929fcbed4aed8b9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=468c0cbb327fadf28386a989f929fcbed4aed8b9",
      "patch": "@@ -1,3 +1,42 @@\n+2019-11-12  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* ada-exp.y (write_ambiguous_var): Update.\n+\t* buildsym.c (add_symbol_to_list): Update.\n+\t* dwarf2read.c (read_variable): Update.\n+\t(new_symbol): Update.\n+\t* jit.c (finalize_symtab): Update.\n+\t* language.c (language_alloc_type_symbol): Update.\n+\t* symtab.c (fixup_symbol_section): Update.\n+\t(initialize_objfile_symbol_1): Move code to...\n+\t(initialize_objfile_symbol): ...here. Remove now-unnecessary memset.\n+\t(allocate_symbol): Update.\n+\t(allocate_template_symbol): Update.\n+\t(get_symbol_address): Update.\n+\t* symtab.h (struct symbol): Inherit from general_symbol_info instead\n+\tof having as a field, and add a constructor.\n+\t(SYMBOL_VALUE): Update.\n+\t(SYMBOL_VALUE_ADDRESS): Update.\n+\t(SET_SYMBOL_VALUE_ADDRESS): Update.\n+\t(SYMBOL_VALUE_BYTES): Update.\n+\t(SYMBOL_VALUE_COMMON_BLOCK): Update.\n+\t(SYMBOL_BLOCK_VALUE): Update.\n+\t(SYMBOL_VALUE_CHAIN): Update.\n+\t(SYMBOL_LANGUAGE): Update.\n+\t(SYMBOL_SECTION): Update.\n+\t(SYMBOL_OBJ_SECTION): Update.\n+\t(SYMBOL_SET_LANGUAGE): Update.\n+\t(SYMBOL_SET_LINKAGE_NAME): Update.\n+\t(SYMBOL_SET_NAMES): Update.\n+\t(SYMBOL_NATURAL_NAME): Update.\n+\t(SYMBOL_LINKAGE_NAME): Update.\n+\t(SYMBOL_DEMANGLED_NAME): Update.\n+\t(SYMBOL_SEARCH_NAME): Update.\n+\t(SYMBOL_MATCHES_SEARCH_NAME): Update.\n+\t(struct symbol): Update.\n+\t(struct template_symbol): Update.\n+\t(struct rust_vtable_symbol): Update.\n+\t* xcoffread.c (SYMBOL_DUP): Update.\n+\n 2019-11-12  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-layout.c (show_layout): Set current_layout."
    },
    {
      "sha": "ff3ce7639244ade6a7eadf1abeea7545d8f428d5",
      "filename": "gdb/ada-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/468c0cbb327fadf28386a989f929fcbed4aed8b9/gdb/ada-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/468c0cbb327fadf28386a989f929fcbed4aed8b9/gdb/ada-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.y?ref=468c0cbb327fadf28386a989f929fcbed4aed8b9",
      "patch": "@@ -1102,9 +1102,8 @@ static void\n write_ambiguous_var (struct parser_state *par_state,\n \t\t     const struct block *block, char *name, int len)\n {\n-  struct symbol *sym = XOBNEW (&temp_parse_space, struct symbol);\n+  struct symbol *sym = new (&temp_parse_space) symbol ();\n \n-  memset (sym, 0, sizeof (struct symbol));\n   SYMBOL_DOMAIN (sym) = UNDEF_DOMAIN;\n   SYMBOL_LINKAGE_NAME (sym) = obstack_strndup (&temp_parse_space, name, len);\n   SYMBOL_LANGUAGE (sym) = language_ada;"
    },
    {
      "sha": "24d1e0f806b412ff487c09aae0eb41e4f365e18d",
      "filename": "gdb/buildsym.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/468c0cbb327fadf28386a989f929fcbed4aed8b9/gdb/buildsym.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/468c0cbb327fadf28386a989f929fcbed4aed8b9/gdb/buildsym.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/buildsym.c?ref=468c0cbb327fadf28386a989f929fcbed4aed8b9",
      "patch": "@@ -135,7 +135,7 @@ add_symbol_to_list (struct symbol *symbol, struct pending **listhead)\n   struct pending *link;\n \n   /* If this is an alias for another symbol, don't add it.  */\n-  if (symbol->ginfo.name && symbol->ginfo.name[0] == '#')\n+  if (symbol->name && symbol->name[0] == '#')\n     return;\n \n   /* We keep PENDINGSIZE symbols in each link of the list.  If we"
    },
    {
      "sha": "bbfa442d577f993146e77bf7437f323d9d646504",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/468c0cbb327fadf28386a989f929fcbed4aed8b9/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/468c0cbb327fadf28386a989f929fcbed4aed8b9/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=468c0cbb327fadf28386a989f929fcbed4aed8b9",
      "patch": "@@ -14320,8 +14320,7 @@ read_variable (struct die_info *die, struct dwarf2_cu *cu)\n \t{\n \t  struct objfile *objfile = cu->per_cu->dwarf2_per_objfile->objfile;\n \n-\t  storage = OBSTACK_ZALLOC (&objfile->objfile_obstack,\n-\t\t\t\t    struct rust_vtable_symbol);\n+\t  storage = new (&objfile->objfile_obstack) rust_vtable_symbol ();\n \t  initialize_objfile_symbol (storage);\n \t  storage->concrete_type = containing_type;\n \t  storage->subclass = SYMBOL_RUST_VTABLE;\n@@ -21636,8 +21635,8 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n       /* Fortran does not have mangling standard and the mangling does differ\n \t between gfortran, iFort etc.  */\n       if (cu->language == language_fortran\n-          && symbol_get_demangled_name (&(sym->ginfo)) == NULL)\n-\tsymbol_set_demangled_name (&(sym->ginfo),\n+          && symbol_get_demangled_name (sym) == NULL)\n+\tsymbol_set_demangled_name (sym,\n \t\t\t\t   dwarf2_full_name (name, die, cu),\n \t                           NULL);\n "
    },
    {
      "sha": "85a01ef2c748e169aadc73ea2f6047477ece5a45",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/468c0cbb327fadf28386a989f929fcbed4aed8b9/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/468c0cbb327fadf28386a989f929fcbed4aed8b9/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=468c0cbb327fadf28386a989f929fcbed4aed8b9",
      "patch": "@@ -700,8 +700,8 @@ finalize_symtab (struct gdb_symtab *stab, struct objfile *objfile)\n       SYMBOL_TYPE (block_name) = lookup_function_type (block_type);\n       SYMBOL_BLOCK_VALUE (block_name) = new_block;\n \n-      block_name->ginfo.name = obstack_strdup (&objfile->objfile_obstack,\n-\t\t\t\t\t       gdb_block_iter->name);\n+      block_name->name = obstack_strdup (&objfile->objfile_obstack,\n+\t\t\t\t\t gdb_block_iter->name);\n \n       BLOCK_FUNCTION (new_block) = block_name;\n "
    },
    {
      "sha": "6ab0ca323d20e2afa5a6f1ab2be56d60b8028779",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/468c0cbb327fadf28386a989f929fcbed4aed8b9/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/468c0cbb327fadf28386a989f929fcbed4aed8b9/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=468c0cbb327fadf28386a989f929fcbed4aed8b9",
      "patch": "@@ -1048,10 +1048,10 @@ language_alloc_type_symbol (enum language lang, struct type *type)\n   gdb_assert (!TYPE_OBJFILE_OWNED (type));\n \n   gdbarch = TYPE_OWNER (type).gdbarch;\n-  symbol = GDBARCH_OBSTACK_ZALLOC (gdbarch, struct symbol);\n+  symbol = new (gdbarch_obstack (gdbarch)) struct symbol ();\n \n-  symbol->ginfo.name = TYPE_NAME (type);\n-  symbol->ginfo.language = lang;\n+  symbol->name = TYPE_NAME (type);\n+  symbol->language = lang;\n   symbol->owner.arch = gdbarch;\n   SYMBOL_OBJFILE_OWNED (symbol) = 0;\n   SYMBOL_TYPE (symbol) = type;"
    },
    {
      "sha": "0064800313d222564334ab37555ec8831a4a7342",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 8,
      "deletions": 19,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/468c0cbb327fadf28386a989f929fcbed4aed8b9/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/468c0cbb327fadf28386a989f929fcbed4aed8b9/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=468c0cbb327fadf28386a989f929fcbed4aed8b9",
      "patch": "@@ -1759,7 +1759,7 @@ fixup_symbol_section (struct symbol *sym, struct objfile *objfile)\n       return sym;\n     }\n \n-  fixup_section (&sym->ginfo, addr, objfile);\n+  fixup_section (sym, addr, objfile);\n \n   return sym;\n }\n@@ -6208,23 +6208,13 @@ initialize_ordinary_address_classes (void)\n \n \f\n \n-/* Helper function to initialize the fields of an objfile-owned symbol.\n-   It assumed that *SYM is already all zeroes.  */\n-\n-static void\n-initialize_objfile_symbol_1 (struct symbol *sym)\n-{\n-  SYMBOL_OBJFILE_OWNED (sym) = 1;\n-  SYMBOL_SECTION (sym) = -1;\n-}\n-\n /* Initialize the symbol SYM, and mark it as being owned by an objfile.  */\n \n void\n initialize_objfile_symbol (struct symbol *sym)\n {\n-  memset (sym, 0, sizeof (*sym));\n-  initialize_objfile_symbol_1 (sym);\n+  SYMBOL_OBJFILE_OWNED (sym) = 1;\n+  SYMBOL_SECTION (sym) = -1;\n }\n \n /* Allocate and initialize a new 'struct symbol' on OBJFILE's\n@@ -6233,10 +6223,9 @@ initialize_objfile_symbol (struct symbol *sym)\n struct symbol *\n allocate_symbol (struct objfile *objfile)\n {\n-  struct symbol *result;\n+  struct symbol *result = new (&objfile->objfile_obstack) symbol ();\n \n-  result = OBSTACK_ZALLOC (&objfile->objfile_obstack, struct symbol);\n-  initialize_objfile_symbol_1 (result);\n+  initialize_objfile_symbol (result);\n \n   return result;\n }\n@@ -6249,8 +6238,8 @@ allocate_template_symbol (struct objfile *objfile)\n {\n   struct template_symbol *result;\n \n-  result = OBSTACK_ZALLOC (&objfile->objfile_obstack, struct template_symbol);\n-  initialize_objfile_symbol_1 (result);\n+  result = new (&objfile->objfile_obstack) template_symbol ();\n+  initialize_objfile_symbol (result);\n \n   return result;\n }\n@@ -6309,7 +6298,7 @@ get_symbol_address (const struct symbol *sym)\n       if (minsym.minsym != nullptr)\n \treturn BMSYMBOL_VALUE_ADDRESS (minsym);\n     }\n-  return sym->ginfo.value.address;\n+  return sym->value.address;\n }\n \n /* See symtab.h.  */"
    },
    {
      "sha": "390aee4218b8ea0e89cf615fb5ccd074e9c4a9e3",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 51,
      "deletions": 41,
      "changes": 92,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/468c0cbb327fadf28386a989f929fcbed4aed8b9/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/468c0cbb327fadf28386a989f929fcbed4aed8b9/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=468c0cbb327fadf28386a989f929fcbed4aed8b9",
      "patch": "@@ -25,6 +25,7 @@\n #include <string>\n #include \"gdbsupport/gdb_vecs.h\"\n #include \"gdbtypes.h\"\n+#include \"gdb_obstack.h\"\n #include \"gdb_regex.h\"\n #include \"gdbsupport/enum-flags.h\"\n #include \"gdbsupport/function-view.h\"\n@@ -470,35 +471,29 @@ extern CORE_ADDR symbol_overlayed_address (CORE_ADDR, struct obj_section *);\n \n extern CORE_ADDR get_symbol_address (const struct symbol *sym);\n \n-/* Note that all the following SYMBOL_* macros are used with the\n-   SYMBOL argument being either a partial symbol or\n-   a full symbol.  Both types have a ginfo field.  In particular\n-   the SYMBOL_SET_LANGUAGE, SYMBOL_DEMANGLED_NAME, etc.\n-   macros cannot be entirely substituted by\n-   functions, unless the callers are changed to pass in the ginfo\n-   field only, instead of the SYMBOL parameter.  */\n+/* Note that these macros only work with symbol, not partial_symbol.  */\n \n-#define SYMBOL_VALUE(symbol)\t\t(symbol)->ginfo.value.ivalue\n+#define SYMBOL_VALUE(symbol)\t\t(symbol)->value.ivalue\n #define SYMBOL_VALUE_ADDRESS(symbol)\t\t\t      \\\n   (((symbol)->maybe_copied) ? get_symbol_address (symbol)     \\\n-   : ((symbol)->ginfo.value.address))\n+   : ((symbol)->value.address))\n #define SET_SYMBOL_VALUE_ADDRESS(symbol, new_value)\t\\\n-  ((symbol)->ginfo.value.address = (new_value))\n-#define SYMBOL_VALUE_BYTES(symbol)\t(symbol)->ginfo.value.bytes\n-#define SYMBOL_VALUE_COMMON_BLOCK(symbol) (symbol)->ginfo.value.common_block\n-#define SYMBOL_BLOCK_VALUE(symbol)\t(symbol)->ginfo.value.block\n-#define SYMBOL_VALUE_CHAIN(symbol)\t(symbol)->ginfo.value.chain\n-#define SYMBOL_LANGUAGE(symbol)\t\t(symbol)->ginfo.language\n-#define SYMBOL_SECTION(symbol)\t\t(symbol)->ginfo.section\n+  ((symbol)->value.address = (new_value))\n+#define SYMBOL_VALUE_BYTES(symbol)\t(symbol)->value.bytes\n+#define SYMBOL_VALUE_COMMON_BLOCK(symbol) (symbol)->value.common_block\n+#define SYMBOL_BLOCK_VALUE(symbol)\t(symbol)->value.block\n+#define SYMBOL_VALUE_CHAIN(symbol)\t(symbol)->value.chain\n+#define SYMBOL_LANGUAGE(symbol)\t\t(symbol)->language\n+#define SYMBOL_SECTION(symbol)\t\t(symbol)->section\n #define SYMBOL_OBJ_SECTION(objfile, symbol)\t\t\t\\\n-  (((symbol)->ginfo.section >= 0)\t\t\t\t\\\n-   ? (&(((objfile)->sections)[(symbol)->ginfo.section]))\t\\\n+  (((symbol)->section >= 0)\t\t\t\t\\\n+   ? (&(((objfile)->sections)[(symbol)->section]))\t\\\n    : NULL)\n \n /* Initializes the language dependent portion of a symbol\n    depending upon the language for the symbol.  */\n #define SYMBOL_SET_LANGUAGE(symbol,language,obstack)\t\\\n-  (symbol_set_language (&(symbol)->ginfo, (language), (obstack)))\n+  (symbol_set_language ((symbol), (language), (obstack)))\n extern void symbol_set_language (struct general_symbol_info *symbol,\n                                  enum language language,\n \t\t\t\t struct obstack *obstack);\n@@ -509,13 +504,13 @@ extern void symbol_set_language (struct general_symbol_info *symbol,\n    be terminated and either already on the objfile's obstack or\n    permanently allocated.  */\n #define SYMBOL_SET_LINKAGE_NAME(symbol,linkage_name) \\\n-  (symbol)->ginfo.name = (linkage_name)\n+  (symbol)->name = (linkage_name)\n \n /* Set the linkage and natural names of a symbol, by demangling\n    the linkage name.  If linkage_name may not be nullterminated,\n    copy_name must be set to true.  */\n #define SYMBOL_SET_NAMES(symbol,linkage_name,copy_name,objfile)\t\\\n-  symbol_set_names (&(symbol)->ginfo, linkage_name, copy_name, \\\n+  symbol_set_names ((symbol), linkage_name, copy_name, \\\n \t\t    (objfile)->per_bfd)\n extern void symbol_set_names (struct general_symbol_info *symbol,\n \t\t\t      gdb::string_view linkage_name, bool copy_name,\n@@ -535,7 +530,7 @@ extern void symbol_set_names (struct general_symbol_info *symbol,\n    demangled name.  */\n \n #define SYMBOL_NATURAL_NAME(symbol) \\\n-  (symbol_natural_name (&(symbol)->ginfo))\n+  (symbol_natural_name ((symbol)))\n extern const char *symbol_natural_name\n   (const struct general_symbol_info *symbol);\n \n@@ -544,12 +539,12 @@ extern const char *symbol_natural_name\n    manipulation by the linker, this is the mangled name; otherwise,\n    it's the same as SYMBOL_NATURAL_NAME.  */\n \n-#define SYMBOL_LINKAGE_NAME(symbol)\t(symbol)->ginfo.name\n+#define SYMBOL_LINKAGE_NAME(symbol)\t(symbol)->name\n \n /* Return the demangled name for a symbol based on the language for\n    that symbol.  If no demangled name exists, return NULL.  */\n #define SYMBOL_DEMANGLED_NAME(symbol) \\\n-  (symbol_demangled_name (&(symbol)->ginfo))\n+  (symbol_demangled_name ((symbol)))\n extern const char *symbol_demangled_name\n   (const struct general_symbol_info *symbol);\n \n@@ -560,7 +555,7 @@ extern const char *symbol_demangled_name\n    The result should never be NULL.  Don't use this for internal\n    purposes (e.g. storing in a hashtable): it's only suitable for output.\n \n-   N.B. symbol may be anything with a ginfo member,\n+   N.B. symbol may be anything inheriting from general_symbol_info,\n    e.g., struct symbol or struct minimal_symbol.  */\n \n #define SYMBOL_PRINT_NAME(symbol)\t\t\t\t\t\\\n@@ -573,13 +568,13 @@ extern bool demangle;\n    name.  If there is no distinct demangled name, then SYMBOL_SEARCH_NAME\n    returns the same value (same pointer) as SYMBOL_LINKAGE_NAME.  */\n #define SYMBOL_SEARCH_NAME(symbol)\t\t\t\t\t \\\n-   (symbol_search_name (&(symbol)->ginfo))\n+   (symbol_search_name (symbol))\n extern const char *symbol_search_name (const struct general_symbol_info *ginfo);\n \n /* Return true if NAME matches the \"search\" name of SYMBOL, according\n    to the symbol's language.  */\n #define SYMBOL_MATCHES_SEARCH_NAME(symbol, name)                       \\\n-  symbol_matches_search_name (&(symbol)->ginfo, (name))\n+  symbol_matches_search_name ((symbol), (name))\n \n /* Helper for SYMBOL_MATCHES_SEARCH_NAME that works with both symbols\n    and psymbols.  */\n@@ -1105,16 +1100,31 @@ enum symbol_subclass_kind\n \n /* This structure is space critical.  See space comments at the top.  */\n \n-struct symbol\n+struct symbol : public general_symbol_info, public allocate_on_obstack\n {\n-\n-  /* The general symbol info required for all types of symbols.  */\n-\n-  struct general_symbol_info ginfo;\n+  symbol ()\n+    /* Class-initialization of bitfields is only allowed in C++20.  */\n+    : domain (UNDEF_DOMAIN),\n+      aclass_index (0),\n+      is_objfile_owned (0),\n+      is_argument (0),\n+      is_inlined (0),\n+      maybe_copied (0),\n+      subclass (SYMBOL_NONE)\n+    {\n+      /* We can't use an initializer list for members of a base class, and\n+         general_symbol_info needs to stay a POD type.  */\n+      name = nullptr;\n+      value.ivalue = 0;\n+      language_specific.obstack = nullptr;\n+      language = language_unknown;\n+      ada_mangled = 0;\n+      section = 0;\n+    }\n \n   /* Data type of value */\n \n-  struct type *type;\n+  struct type *type = nullptr;\n \n   /* The owner of this symbol.\n      Which one to use is defined by symbol.is_objfile_owned.  */\n@@ -1124,7 +1134,7 @@ struct symbol\n     /* The symbol table containing this symbol.  This is the file associated\n        with LINE.  It can be NULL during symbols read-in but it is never NULL\n        during normal operation.  */\n-    struct symtab *symtab;\n+    struct symtab *symtab = nullptr;\n \n     /* For types defined by the architecture.  */\n     struct gdbarch *arch;\n@@ -1141,7 +1151,7 @@ struct symbol\n   unsigned int aclass_index : SYMBOL_ACLASS_BITS;\n \n   /* If non-zero then symbol is objfile-owned, use owner.symtab.\n-     Otherwise symbol is arch-owned, use owner.arch.  */\n+       Otherwise symbol is arch-owned, use owner.arch.  */\n \n   unsigned int is_objfile_owned : 1;\n \n@@ -1175,7 +1185,7 @@ struct symbol\n      to debug files longer than 64K lines?  What about machine\n      generated programs?  */\n \n-  unsigned short line;\n+  unsigned short line = 0;\n \n   /* An arbitrary data pointer, allowing symbol readers to record\n      additional information on a per-symbol basis.  Note that this data\n@@ -1189,9 +1199,9 @@ struct symbol\n      to add a magic symbol to the block containing this information,\n      or to have a generic debug info annotation slot for symbols.  */\n \n-  void *aux_value;\n+  void *aux_value = nullptr;\n \n-  struct symbol *hash_next;\n+  struct symbol *hash_next = nullptr;\n };\n \n /* This struct is size-critical (see comment at the top), so this assert\n@@ -1272,11 +1282,11 @@ extern void symbol_set_symtab (struct symbol *symbol, struct symtab *symtab);\n struct template_symbol : public symbol\n {\n   /* The number of template arguments.  */\n-  int n_template_arguments;\n+  int n_template_arguments = 0;\n \n   /* The template arguments.  This is an array with\n      N_TEMPLATE_ARGUMENTS elements.  */\n-  struct symbol **template_arguments;\n+  struct symbol **template_arguments = nullptr;\n };\n \n /* A symbol that represents a Rust virtual table object.  */\n@@ -1285,7 +1295,7 @@ struct rust_vtable_symbol : public symbol\n {\n   /* The concrete type for which this vtable was created; that is, in\n      \"impl Trait for Type\", this is \"Type\".  */\n-  struct type *concrete_type;\n+  struct type *concrete_type = nullptr;\n };\n \n \f"
    },
    {
      "sha": "4ea9b0b5bddc24b27a9f14fb78d5f88084f0b34a",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/468c0cbb327fadf28386a989f929fcbed4aed8b9/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/468c0cbb327fadf28386a989f929fcbed4aed8b9/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=468c0cbb327fadf28386a989f929fcbed4aed8b9",
      "patch": "@@ -1522,7 +1522,7 @@ read_xcoff_symtab (struct objfile *objfile, struct partial_symtab *pst)\n }\n \n #define\tSYMBOL_DUP(SYMBOL1, SYMBOL2)\t\\\n-  (SYMBOL2) = XOBNEW (&objfile->objfile_obstack, struct symbol); \\\n+  (SYMBOL2) = new (&objfile->objfile_obstack) symbol (); \\\n   *(SYMBOL2) = *(SYMBOL1);\n \n "
    }
  ]
}