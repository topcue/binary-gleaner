{
  "sha": "6c92c339539ec87dc12783e9c8f1688a4a370c03",
  "node_id": "C_kwDOANOeidoAKDZjOTJjMzM5NTM5ZWM4N2RjMTI3ODNlOWM4ZjE2ODhhNGEzNzBjMDM",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-12-30T16:46:02Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2022-01-26T22:19:13Z"
    },
    "message": "Convert wrap_here to use integer parameter\n\nI think it only really makes sense to call wrap_here with an argument\nconsisting solely of spaces.  Given this, it seemed better to me that\nthe argument be an int, rather than a string.  This patch is the\nresult.  Much of it was written by a script.",
    "tree": {
      "sha": "5f3d0621646cae14436ab8e63edcf3542c236f86",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5f3d0621646cae14436ab8e63edcf3542c236f86"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6c92c339539ec87dc12783e9c8f1688a4a370c03",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6c92c339539ec87dc12783e9c8f1688a4a370c03",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6c92c339539ec87dc12783e9c8f1688a4a370c03",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6c92c339539ec87dc12783e9c8f1688a4a370c03/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bbea68079781ac4c2fc941867ee9888585cafb77",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bbea68079781ac4c2fc941867ee9888585cafb77",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bbea68079781ac4c2fc941867ee9888585cafb77"
    }
  ],
  "stats": {
    "total": 268,
    "additions": 122,
    "deletions": 146
  },
  "files": [
    {
      "sha": "c6a3867d53fc96ccf0641c217bcae29986a1b6ab",
      "filename": "gdb/ada-typeprint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/ada-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/ada-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-typeprint.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -317,15 +317,15 @@ print_enum_type (struct type *type, struct ui_file *stream)\n   LONGEST lastval;\n \n   fprintf_filtered (stream, \"(\");\n-  wrap_here (\" \");\n+  wrap_here (1);\n \n   lastval = 0;\n   for (i = 0; i < len; i++)\n     {\n       QUIT;\n       if (i)\n \tfprintf_filtered (stream, \", \");\n-      wrap_here (\"    \");\n+      wrap_here (4);\n       fputs_styled (ada_enum_name (type->field (i).name ()),\n \t\t    variable_name_style.style (), stream);\n       if (lastval != type->field (i).loc_enumval ())\n@@ -416,7 +416,7 @@ print_array_type (struct type *type, struct ui_file *stream, int show,\n \n   elt_type = ada_array_element_type (type, n_indices);\n   fprintf_filtered (stream, \") of \");\n-  wrap_here (\"\");\n+  wrap_here (0);\n   ada_print_type (elt_type, \"\", stream, show == 0 ? 0 : show - 1, level + 1,\n \t\t  flags);\n   /* Arrays with variable-length elements are never bit-packed in practice but\n@@ -892,7 +892,7 @@ print_func_type (struct type *type, struct ui_file *stream, const char *name,\n \t  if (i > 0)\n \t    {\n \t      fputs_filtered (\"; \", stream);\n-\t      wrap_here (\"    \");\n+\t      wrap_here (4);\n \t    }\n \t  fprintf_filtered (stream, \"a%d: \", i + 1);\n \t  ada_print_type (type->field (i).type (), \"\", stream, -1, 0,"
    },
    {
      "sha": "352568d80459865595c29229c690b2f264e2ae20",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -178,7 +178,7 @@ val_print_packed_array_elements (struct type *type, const gdb_byte *valaddr,\n \t  fprintf_filtered (stream, \"\\n\");\n \t  print_spaces_filtered (2 + 2 * recurse, stream);\n \t}\n-      wrap_here (n_spaces (2 + 2 * recurse));\n+      wrap_here (2 + 2 * recurse);\n       maybe_print_array_index (index_type, i + low, stream, options);\n \n       i0 = i;\n@@ -235,7 +235,7 @@ val_print_packed_array_elements (struct type *type, const gdb_byte *valaddr,\n \t\t    {\n \t\t      fprintf_filtered (stream, \", \");\n \t\t    }\n-\t\t  wrap_here (n_spaces (2 + 2 * recurse));\n+\t\t  wrap_here (2 + 2 * recurse);\n \t\t  maybe_print_array_index (index_type, j + low,\n \t\t\t\t\t   stream, options);\n \t\t}\n@@ -614,7 +614,7 @@ print_field_values (struct value *value, struct value *outer_value,\n \t}\n       else\n \t{\n-\t  wrap_here (n_spaces (2 + 2 * recurse));\n+\t  wrap_here (2 + 2 * recurse);\n \t}\n \n       annotate_field_begin (type->field (i).type ());"
    },
    {
      "sha": "9567c737cabfdd9ded46630f18c93348ff5740b5",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 11,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -5788,33 +5788,26 @@ bpstat_causes_stop (bpstat *bs)\n \n \f\n \n-/* Compute a string of spaces suitable to indent the next line\n+/* Compute a number of spaces suitable to indent the next line\n    so it starts at the position corresponding to the table column\n    named COL_NAME in the currently active table of UIOUT.  */\n \n-static char *\n+static int\n wrap_indent_at_field (struct ui_out *uiout, const char *col_name)\n {\n-  static char wrap_indent[80];\n   int i, total_width, width, align;\n   const char *text;\n \n   total_width = 0;\n   for (i = 1; uiout->query_table_field (i, &width, &align, &text); i++)\n     {\n       if (strcmp (text, col_name) == 0)\n-\t{\n-\t  gdb_assert (total_width < sizeof wrap_indent);\n-\t  memset (wrap_indent, ' ', total_width);\n-\t  wrap_indent[total_width] = 0;\n-\n-\t  return wrap_indent;\n-\t}\n+\treturn total_width;\n \n       total_width += width + 1;\n     }\n \n-  return NULL;\n+  return 0;\n }\n \n /* Determine if the locations of this breakpoint will have their conditions"
    },
    {
      "sha": "d20b71124aeac768fa6168a17b3a5a79d190af53",
      "filename": "gdb/c-typeprint.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/c-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/c-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-typeprint.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -250,7 +250,7 @@ cp_type_print_derivation_info (struct ui_file *stream,\n \n   for (i = 0; i < TYPE_N_BASECLASSES (type); i++)\n     {\n-      wrap_here (\"        \");\n+      wrap_here (8);\n       fputs_filtered (i == 0 ? \": \" : \", \", stream);\n       fprintf_filtered (stream, \"%s%s \",\n \t\t\tBASETYPE_VIA_PUBLIC (type, i)\n@@ -310,7 +310,7 @@ cp_type_print_method_args (struct type *mtype, const char *prefix,\n \t  else if (i < nargs)\n \t    {\n \t      fprintf_filtered (stream, \", \");\n-\t      wrap_here (\"        \");\n+\t      wrap_here (8);\n \t    }\n \t}\n     }\n@@ -573,7 +573,7 @@ c_type_print_args (struct type *type, struct ui_file *stream,\n       if (printed_any)\n \t{\n \t  fprintf_filtered (stream, \", \");\n-\t  wrap_here (\"    \");\n+\t  wrap_here (4);\n \t}\n \n       param_type = type->field (i).type ();\n@@ -602,7 +602,7 @@ c_type_print_args (struct type *type, struct ui_file *stream,\n       if (printed_any && type->has_varargs ())\n \t{\n \t  fprintf_filtered (stream, \", \");\n-\t  wrap_here (\"    \");\n+\t  wrap_here (4);\n \t  fprintf_filtered (stream, \"...\");\n \t}\n     }\n@@ -888,14 +888,14 @@ c_type_print_template_args (const struct type_print_options *flags,\n \n       if (first)\n \t{\n-\t  wrap_here (\"    \");\n+\t  wrap_here (4);\n \t  fprintf_filtered (stream, _(\"[with %s = \"), sym->linkage_name ());\n \t  first = 0;\n \t}\n       else\n \t{\n \t  fputs_filtered (\", \", stream);\n-\t  wrap_here (\"         \");\n+\t  wrap_here (9);\n \t  fprintf_filtered (stream, \"%s = \", sym->linkage_name ());\n \t}\n \n@@ -1559,7 +1559,7 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n \t    fputs_filtered (\" \", stream);\n \t}\n \n-      wrap_here (\"    \");\n+      wrap_here (4);\n       if (show < 0)\n \t{\n \t  /* If we just printed a tag name, no need to print anything\n@@ -1594,7 +1594,7 @@ c_type_print_base_1 (struct type *type, struct ui_file *stream,\n \t      QUIT;\n \t      if (i)\n \t\tfprintf_filtered (stream, \", \");\n-\t      wrap_here (\"    \");\n+\t      wrap_here (4);\n \t      fputs_styled (type->field (i).name (),\n \t\t\t    variable_name_style.style (), stream);\n \t      if (lastval != type->field (i).loc_enumval ())"
    },
    {
      "sha": "925ba8a73690baf49e7b49b427926ee85e3bd39f",
      "filename": "gdb/cli-out.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/cli-out.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/cli-out.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli-out.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -238,12 +238,12 @@ cli_ui_out::do_message (const ui_file_style &style,\n }\n \n void\n-cli_ui_out::do_wrap_hint (const char *identstring)\n+cli_ui_out::do_wrap_hint (int indent)\n {\n   if (m_suppress_output)\n     return;\n \n-  wrap_here (identstring);\n+  wrap_here (indent);\n }\n \n void"
    },
    {
      "sha": "3fc794b61a403572d002ba7d0d0f4786826a4848",
      "filename": "gdb/cli-out.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/cli-out.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/cli-out.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli-out.h?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -67,7 +67,7 @@ class cli_ui_out : public ui_out\n   virtual void do_message (const ui_file_style &style,\n \t\t\t   const char *format, va_list args) override\n     ATTRIBUTE_PRINTF (3,0);\n-  virtual void do_wrap_hint (const char *identstring) override;\n+  virtual void do_wrap_hint (int indent) override;\n   virtual void do_flush () override;\n   virtual void do_redirect (struct ui_file *outstream) override;\n "
    },
    {
      "sha": "943d4db94de9764505ee0c46ef9d12de4cbebe91",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -841,7 +841,7 @@ echo_command (const char *text, int from_tty)\n   reset_terminal_style (gdb_stdout);\n \n   /* Force this output to appear now.  */\n-  wrap_here (\"\");\n+  wrap_here (0);\n   gdb_flush (gdb_stdout);\n }\n "
    },
    {
      "sha": "24c80dc7bd50fd29b84aa9cfe62af16c5bfdc08b",
      "filename": "gdb/cli/cli-decode.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/cli/cli-decode.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/cli/cli-decode.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-decode.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -1414,7 +1414,7 @@ fput_command_names_styled (const cmd_list_element &c,\n \tcontinue;\n \n       fputs_filtered (\", \", stream);\n-      wrap_here (\"   \");\n+      wrap_here (3);\n       fput_command_name_styled (alias, stream);\n     }\n \n@@ -1651,7 +1651,7 @@ help_list (struct cmd_list_element *list, const char *cmdtype,\n       fprintf_filtered (stream, \"\\n\\\n Type \\\"help%s\\\" followed by a class name for a list of commands in \",\n \t\t\tcmdtype1);\n-      wrap_here (\"\");\n+      wrap_here (0);\n       fprintf_filtered (stream, \"that class.\");\n \n       fprintf_filtered (stream, \"\\n\\\n@@ -1660,16 +1660,16 @@ Type \\\"help all\\\" for the list of all commands.\");\n \n   fprintf_filtered (stream, \"\\nType \\\"help%s\\\" followed by %scommand name \",\n \t\t    cmdtype1, cmdtype2);\n-  wrap_here (\"\");\n+  wrap_here (0);\n   fputs_filtered (\"for \", stream);\n-  wrap_here (\"\");\n+  wrap_here (0);\n   fputs_filtered (\"full \", stream);\n-  wrap_here (\"\");\n+  wrap_here (0);\n   fputs_filtered (\"documentation.\\n\", stream);\n   fputs_filtered (\"Type \\\"apropos word\\\" to search \"\n \t\t  \"for commands related to \\\"word\\\".\\n\", stream);\n   fputs_filtered (\"Type \\\"apropos -v word\\\" for full documentation\", stream);\n-  wrap_here (\"\");\n+  wrap_here (0);\n   fputs_filtered (\" of commands related to \\\"word\\\".\\n\", stream);\n   fputs_filtered (\"Command name abbreviations are allowed if unambiguous.\\n\",\n \t\t  stream);"
    },
    {
      "sha": "3b0e1df7a1fe9aafe3d0136f8f354d3870222aa7",
      "filename": "gdb/cp-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/cp-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/cp-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-valprint.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -222,7 +222,7 @@ cp_print_value_fields (struct value *val, struct ui_file *stream,\n \t    }\n \t  else\n \t    {\n-\t      wrap_here (n_spaces (2 + 2 * recurse));\n+\t      wrap_here (2 + 2 * recurse);\n \t    }\n \n \t  annotate_field_begin (type->field (i).type ());"
    },
    {
      "sha": "46aa995a9d5924e99538c629691d633f58e82d30",
      "filename": "gdb/disasm.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/disasm.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -1118,7 +1118,7 @@ The following disassembler options are supported for use with the\\n\\\n \t    fprintf_filtered (file, \"%s\", valid_options->arg[i]->name);\n \t  if (valid_options->name[i + 1] != NULL)\n \t    fprintf_filtered (file, \", \");\n-\t  wrap_here (\"  \");\n+\t  wrap_here (2);\n \t}\n       fprintf_filtered (file, \"\\n\");\n     }\n@@ -1136,7 +1136,7 @@ The following disassembler options are supported for use with the\\n\\\n \t  for (j = 0; valid_args[i].values[j] != NULL; j++)\n \t    {\n \t      fprintf_filtered (file, \" %s\", valid_args[i].values[j]);\n-\t      wrap_here (\"   \");\n+\t      wrap_here (3);\n \t    }\n \t  fprintf_filtered (file, \"\\n\");\n \t}"
    },
    {
      "sha": "404cd4c403854c7ef36d64d3d5faf6de3d840c3b",
      "filename": "gdb/exceptions.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/exceptions.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/exceptions.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exceptions.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -52,7 +52,7 @@ print_flush (void)\n \n   /* 1.  The _filtered buffer.  */\n   if (filtered_printing_initialized ())\n-    wrap_here (\"\");\n+    wrap_here (0);\n \n   /* 2.  The stdio buffer.  */\n   gdb_flush (gdb_stdout);"
    },
    {
      "sha": "c4161b58e733f2f0637fda1655532de7a5884116",
      "filename": "gdb/exec.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/exec.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/exec.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/exec.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -909,7 +909,7 @@ print_section_info (const target_section_table *t, bfd *abfd)\n   printf_filtered (\"\\t`%ps', \",\n \t\t   styled_string (file_name_style.style (),\n \t\t\t\t  bfd_get_filename (abfd)));\n-  wrap_here (\"        \");\n+  wrap_here (8);\n   printf_filtered (_(\"file type %s.\\n\"), bfd_get_target (abfd));\n   if (abfd == current_program_space->exec_bfd ())\n     {"
    },
    {
      "sha": "3e419a74a9fce79c2d8ce841b55956ea4ab9817c",
      "filename": "gdb/f-typeprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/f-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/f-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-typeprint.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -250,7 +250,7 @@ f_language::f_type_print_varspec_suffix (struct type *type,\n \t      if (i > 0)\n \t\t{\n \t\t  fputs_filtered (\", \", stream);\n-\t\t  wrap_here (\"    \");\n+\t\t  wrap_here (4);\n \t\t}\n \t      print_type (type->field (i).type (), \"\", stream, -1, 0, 0);\n \t    }\n@@ -290,7 +290,7 @@ f_language::f_type_print_base (struct type *type, struct ui_file *stream,\n \n   QUIT;\n \n-  wrap_here (\"    \");\n+  wrap_here (4);\n   if (type == NULL)\n     {\n       fputs_styled (\"<type unknown>\", metadata_style.style (), stream);"
    },
    {
      "sha": "814a7e7a4bc37cde686677d4514b31b5dd3f7239",
      "filename": "gdb/guile/scm-pretty-print.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/guile/scm-pretty-print.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/guile/scm-pretty-print.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-pretty-print.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -861,7 +861,7 @@ ppscm_print_children (SCM printer, enum display_hint hint,\n \t      print_spaces_filtered (2 + 2 * recurse, stream);\n \t    }\n \t  else\n-\t    wrap_here (n_spaces (2 + 2 *recurse));\n+\t    wrap_here (2 + 2 *recurse);\n \t}\n \n       if (is_map && i % 2 == 0)"
    },
    {
      "sha": "cbb6b545d4f7ce41f8e9dfa6c0e83c91270fcbd7",
      "filename": "gdb/m2-typeprint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/m2-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/m2-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-typeprint.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -79,7 +79,7 @@ m2_print_type (struct type *type, const char *varstring,\n \n   QUIT;\n \n-  wrap_here (\"    \");\n+  wrap_here (4);\n   if (type == NULL)\n     {\n       fputs_styled (_(\"<type unknown>\"), metadata_style.style (), stream);\n@@ -292,7 +292,7 @@ m2_procedure (struct type *type, struct ui_file *stream,\n \t  if (i > 0)\n \t    {\n \t      fputs_filtered (\", \", stream);\n-\t      wrap_here (\"    \");\n+\t      wrap_here (4);\n \t    }\n \t  m2_print_type (type->field (i).type (), \"\", stream, -1, 0, flags);\n \t}\n@@ -539,7 +539,7 @@ m2_record_fields (struct type *type, struct ui_file *stream, int show,\n \t    fprintf_filtered (stream, \" = \");\n \t}\n     }\n-  wrap_here (\"    \");\n+  wrap_here (4);\n   if (show < 0)\n     {\n       if (type->code () == TYPE_CODE_STRUCT)\n@@ -608,7 +608,7 @@ m2_enum (struct type *type, struct ui_file *stream, int show, int level)\n \t  QUIT;\n \t  if (i > 0)\n \t    fprintf_filtered (stream, \", \");\n-\t  wrap_here (\"    \");\n+\t  wrap_here (4);\n \t  fputs_styled (type->field (i).name (),\n \t\t\tvariable_name_style.style (), stream);\n \t  if (lastval != type->field (i).loc_enumval ())"
    },
    {
      "sha": "6b312f85f2bf2fda5f46617aec10a5e92f18e3fa",
      "filename": "gdb/main.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/main.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -1121,7 +1121,7 @@ captured_main_1 (struct captured_main_args *context)\n   if (print_version)\n     {\n       print_gdb_version (gdb_stdout, false);\n-      wrap_here (\"\");\n+      wrap_here (0);\n       printf_filtered (\"\\n\");\n       exit (0);\n     }\n@@ -1135,7 +1135,7 @@ captured_main_1 (struct captured_main_args *context)\n   if (print_configuration)\n     {\n       print_gdb_configuration (gdb_stdout);\n-      wrap_here (\"\");\n+      wrap_here (0);\n       printf_filtered (\"\\n\");\n       exit (0);\n     }\n@@ -1151,7 +1151,7 @@ captured_main_1 (struct captured_main_args *context)\n       print_gdb_version (gdb_stdout, true);\n       if (symarg)\n \tprintf_filtered (\"..\");\n-      wrap_here (\"\");\n+      wrap_here (0);\n       printf_filtered (\"\\n\");\n       gdb_flush (gdb_stdout);\t/* Force to screen during slow\n \t\t\t\t   operations.  */\n@@ -1172,7 +1172,7 @@ captured_main_1 (struct captured_main_args *context)\n       print_gdb_version (gdb_stdout, true);\n       if (symarg)\n \tprintf_filtered (\"..\");\n-      wrap_here (\"\");\n+      wrap_here (0);\n       printf_filtered (\"\\n\");\n       gdb_flush (gdb_stdout);\t/* Force to screen during slow\n \t\t\t\t   operations.  */"
    },
    {
      "sha": "49e62292324e21824f59853c4b09a726f5f84ef4",
      "filename": "gdb/maint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/maint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/maint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/maint.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -364,9 +364,9 @@ maint_print_all_sections (const char *header, bfd *abfd, objfile *objfile,\n \t\t\t  const char *arg)\n {\n   puts_filtered (header);\n-  wrap_here (\"        \");\n+  wrap_here (8);\n   printf_filtered (\"`%s', \", bfd_get_filename (abfd));\n-  wrap_here (\"        \");\n+  wrap_here (8);\n   printf_filtered (_(\"file type %s.\\n\"), bfd_get_target (abfd));\n \n   int section_count = gdb_bfd_count_sections (abfd);"
    },
    {
      "sha": "72ae36dd4183fe348f2dd7f7918b8bc8aa062d34",
      "filename": "gdb/mi/mi-out.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/mi/mi-out.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/mi/mi-out.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-out.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -172,9 +172,9 @@ mi_ui_out::do_message (const ui_file_style &style,\n }\n \n void\n-mi_ui_out::do_wrap_hint (const char *identstring)\n+mi_ui_out::do_wrap_hint (int indent)\n {\n-  wrap_here (identstring);\n+  wrap_here (indent);\n }\n \n void"
    },
    {
      "sha": "8f2f2d82ec0af243653c75103c5e1c4d018077ad",
      "filename": "gdb/mi/mi-out.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/mi/mi-out.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/mi/mi-out.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-out.h?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -76,7 +76,7 @@ class mi_ui_out : public ui_out\n   virtual void do_message (const ui_file_style &style,\n \t\t\t   const char *format, va_list args) override\n     ATTRIBUTE_PRINTF (3,0);\n-  virtual void do_wrap_hint (const char *identstring) override;\n+  virtual void do_wrap_hint (int indent) override;\n   virtual void do_flush () override;\n   virtual void do_redirect (struct ui_file *outstream) override;\n "
    },
    {
      "sha": "a105d297bc40b8cc3a30a165e680bb8ac4c98035",
      "filename": "gdb/p-typeprint.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/p-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/p-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-typeprint.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -287,7 +287,7 @@ pascal_language::print_func_args (struct type *type, struct ui_file *stream,\n       if (i > 0)\n \t{\n \t  fputs_filtered (\", \", stream);\n-\t  wrap_here (\"    \");\n+\t  wrap_here (4);\n \t}\n       /*  Can we find if it is a var parameter ??\n \t  if ( TYPE_FIELD(type, i) == )\n@@ -419,7 +419,7 @@ pascal_language::type_print_base (struct type *type, struct ui_file *stream, int\n   section_type;\n \n   QUIT;\n-  wrap_here (\"    \");\n+  wrap_here (4);\n   if (type == NULL)\n     {\n       fputs_styled (\"<type unknown>\", metadata_style.style (), stream);\n@@ -487,7 +487,7 @@ pascal_language::type_print_base (struct type *type, struct ui_file *stream, int\n       fprintf_filtered (stream, \"case <?> of \");\n \n     struct_union:\n-      wrap_here (\"    \");\n+      wrap_here (4);\n       if (show < 0)\n \t{\n \t  /* If we just printed a tag name, no need to print anything else.  */\n@@ -692,7 +692,7 @@ pascal_language::type_print_base (struct type *type, struct ui_file *stream, int\n       /* enum is just defined by\n \t type enume_name = (enum_member1,enum_member2,...)  */\n       fprintf_filtered (stream, \" = \");\n-      wrap_here (\"    \");\n+      wrap_here (4);\n       if (show < 0)\n \t{\n \t  /* If we just printed a tag name, no need to print anything else.  */\n@@ -709,7 +709,7 @@ pascal_language::type_print_base (struct type *type, struct ui_file *stream, int\n \t      QUIT;\n \t      if (i)\n \t\tfprintf_filtered (stream, \", \");\n-\t      wrap_here (\"    \");\n+\t      wrap_here (4);\n \t      fputs_filtered (type->field (i).name (), stream);\n \t      if (lastval != type->field (i).loc_enumval ())\n \t\t{"
    },
    {
      "sha": "2019a1d40df120d59b1bf74ec34484483e03f3f1",
      "filename": "gdb/p-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/p-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/p-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-valprint.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -574,7 +574,7 @@ pascal_object_print_value_fields (struct value *val, struct ui_file *stream,\n \t    }\n \t  else\n \t    {\n-\t      wrap_here (n_spaces (2 + 2 * recurse));\n+\t      wrap_here (2 + 2 * recurse);\n \t    }\n \n \t  annotate_field_begin (type->field (i).type ());"
    },
    {
      "sha": "e1444ac1c83caaa1c462c160ebdca25713ea6269",
      "filename": "gdb/printcmd.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/printcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/printcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/printcmd.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -317,7 +317,7 @@ print_formatted (struct value *val, int size,\n \n \tcase 'i':\n \t  /* We often wrap here if there are long symbolic names.  */\n-\t  wrap_here (\"    \");\n+\t  wrap_here (4);\n \t  next_address = (value_address (val)\n \t\t\t  + gdb_print_insn (type->arch (),\n \t\t\t\t\t    value_address (val), stream,\n@@ -826,7 +826,7 @@ find_instruction_backward (struct gdbarch *gdbarch, CORE_ADDR addr,\n \t     is calculated after the loop.  */\n \t  printf_filtered (_(\"No line number information available \"\n \t\t\t     \"for address \"));\n-\t  wrap_here (\"  \");\n+\t  wrap_here (2);\n \t  print_address (gdbarch, loop_start - 1, gdb_stdout);\n \t  printf_filtered (\"\\n\");\n \t  break;\n@@ -1498,7 +1498,7 @@ output_command (const char *exp, int from_tty)\n \n   annotate_value_end ();\n \n-  wrap_here (\"\");\n+  wrap_here (0);\n   gdb_flush (gdb_stdout);\n }\n \n@@ -2895,7 +2895,7 @@ printf_command (const char *arg, int from_tty)\n {\n   ui_printf (arg, gdb_stdout);\n   reset_terminal_style (gdb_stdout);\n-  wrap_here (\"\");\n+  wrap_here (0);\n   gdb_stdout->flush ();\n }\n "
    },
    {
      "sha": "11063bd597510fa35dbb08d6fe9ff41ddedde61c",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -1422,11 +1422,11 @@ partial_symtab::expand_dependencies (struct objfile *objfile)\n \t  if (info_verbose)\n \t    {\n \t      puts_filtered (\" \");\n-\t      wrap_here (\"\");\n+\t      wrap_here (0);\n \t      puts_filtered (\"and \");\n-\t      wrap_here (\"\");\n+\t      wrap_here (0);\n \t      printf_filtered (\"%s...\", dependencies[i]->filename);\n-\t      wrap_here (\"\");\t/* Flush output */\n+\t      wrap_here (0);\t/* Flush output */\n \t      gdb_flush (gdb_stdout);\n \t    }\n \t  dependencies[i]->expand_psymtab (objfile);\n@@ -1679,14 +1679,14 @@ maintenance_info_psymtabs (const char *regexp, int from_tty)\n \t\t    if (! printed_objfile_start)\n \t\t      {\n \t\t\tprintf_filtered (\"{ objfile %s \", objfile_name (objfile));\n-\t\t\twrap_here (\"  \");\n+\t\t\twrap_here (2);\n \t\t\tprintf_filtered (\"((struct objfile *) %s)\\n\",\n \t\t\t\t\t host_address_to_string (objfile));\n \t\t\tprinted_objfile_start = 1;\n \t\t      }\n \n \t\t    printf_filtered (\"  { psymtab %s \", psymtab->filename);\n-\t\t    wrap_here (\"    \");\n+\t\t    wrap_here (4);\n \t\t    printf_filtered (\"((struct partial_symtab *) %s)\\n\",\n \t\t\t\t     host_address_to_string (psymtab));\n "
    },
    {
      "sha": "708fcc535e20dec92380c2c57d1b0a171b6b9551",
      "filename": "gdb/python/py-framefilter.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/python/py-framefilter.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/python/py-framefilter.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-framefilter.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -501,7 +501,7 @@ enumerate_args (PyObject *iter,\n \t      if (arg.entry_kind != print_entry_values_only)\n \t\t{\n \t\t  out->text (\", \");\n-\t\t  out->wrap_hint (\"    \");\n+\t\t  out->wrap_hint (4);\n \t\t}\n \n \t      py_print_single_arg (out, NULL, &entryarg, NULL, &opts,\n@@ -705,7 +705,7 @@ py_print_args (PyObject *filter,\n \n   ui_out_emit_list list_emitter (out, \"args\");\n \n-  out->wrap_hint (\"   \");\n+  out->wrap_hint (3);\n   annotate_frame_args ();\n   out->text (\" (\");\n \n@@ -984,7 +984,7 @@ py_print_frame (PyObject *filter, frame_filter_flags flags,\n \t      if (filename == NULL)\n \t\treturn EXT_LANG_BT_ERROR;\n \n-\t      out->wrap_hint (\"   \");\n+\t      out->wrap_hint (3);\n \t      out->text (\" at \");\n \t      annotate_frame_source_file ();\n \t      out->field_string (\"file\", filename.get (),"
    },
    {
      "sha": "59c311c9b664d8e0c80ce6338cbfb7fb280373af",
      "filename": "gdb/python/py-prettyprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/python/py-prettyprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/python/py-prettyprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-prettyprint.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -474,7 +474,7 @@ print_children (PyObject *printer, const char *hint,\n \t      print_spaces_filtered (2 + 2 * recurse, stream);\n \t    }\n \t  else\n-\t    wrap_here (n_spaces (2 + 2 *recurse));\n+\t    wrap_here (2 + 2 *recurse);\n \t}\n \n       if (is_map && i % 2 == 0)"
    },
    {
      "sha": "2b0a5c9b4078da7755e1f1aef8274364ed8781dd",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -1548,7 +1548,7 @@ info_line_command (const char *arg, int from_tty)\n \t\t user about a source line, at least let them have the symbolic\n \t\t address.  */\n \t      printf_filtered (\" for address \");\n-\t      wrap_here (\"  \");\n+\t      wrap_here (2);\n \t      print_address (gdbarch, sal.pc, gdb_stdout);\n \t    }\n \t  else\n@@ -1565,21 +1565,21 @@ info_line_command (const char *arg, int from_tty)\n \t      printf_filtered (\"Line %d of \\\"%s\\\"\",\n \t\t\t       sal.line,\n \t\t\t       symtab_to_filename_for_display (sal.symtab));\n-\t      wrap_here (\"  \");\n+\t      wrap_here (2);\n \t      printf_filtered (\" is at address \");\n \t      print_address (gdbarch, start_pc, gdb_stdout);\n-\t      wrap_here (\"  \");\n+\t      wrap_here (2);\n \t      printf_filtered (\" but contains no code.\\n\");\n \t    }\n \t  else\n \t    {\n \t      printf_filtered (\"Line %d of \\\"%s\\\"\",\n \t\t\t       sal.line,\n \t\t\t       symtab_to_filename_for_display (sal.symtab));\n-\t      wrap_here (\"  \");\n+\t      wrap_here (2);\n \t      printf_filtered (\" starts at address \");\n \t      print_address (gdbarch, start_pc, gdb_stdout);\n-\t      wrap_here (\"  \");\n+\t      wrap_here (2);\n \t      printf_filtered (\" and ends at \");\n \t      print_address (gdbarch, end_pc, gdb_stdout);\n \t      printf_filtered (\".\\n\");"
    },
    {
      "sha": "6c3707f1b87e23d25562d3d9a36da4e4c762106d",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 10,
      "deletions": 10,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -875,7 +875,7 @@ print_frame_args (const frame_print_options &fp_opts,\n \t  /* Print the current arg.  */\n \t  if (!first)\n \t    uiout->text (\", \");\n-\t  uiout->wrap_hint (\"    \");\n+\t  uiout->wrap_hint (4);\n \n \t  if (!print_args)\n \t    {\n@@ -895,7 +895,7 @@ print_frame_args (const frame_print_options &fp_opts,\n \t      if (arg.entry_kind != print_entry_values_only)\n \t\t{\n \t\t  uiout->text (\", \");\n-\t\t  uiout->wrap_hint (\"    \");\n+\t\t  uiout->wrap_hint (4);\n \t\t}\n \n \t      print_frame_arg (fp_opts, &entryarg);\n@@ -1368,7 +1368,7 @@ print_frame (const frame_print_options &fp_opts,\n     string_file stb;\n     fputs_filtered (funname ? funname.get () : \"??\", &stb);\n     uiout->field_stream (\"func\", stb, function_name_style.style ());\n-    uiout->wrap_hint (\"   \");\n+    uiout->wrap_hint (3);\n     annotate_frame_args ();\n \n     uiout->text (\" (\");\n@@ -1406,7 +1406,7 @@ print_frame (const frame_print_options &fp_opts,\n       \n \tfilename_display = symtab_to_filename_for_display (sal.symtab);\n \tannotate_frame_source_begin ();\n-\tuiout->wrap_hint (\"   \");\n+\tuiout->wrap_hint (3);\n \tuiout->text (\" at \");\n \tannotate_frame_source_file ();\n \tuiout->field_string (\"file\", filename_display,\n@@ -1433,7 +1433,7 @@ print_frame (const frame_print_options &fp_opts,\n \tif (lib)\n \t  {\n \t    annotate_frame_where ();\n-\t    uiout->wrap_hint (\"  \");\n+\t    uiout->wrap_hint (2);\n \t    uiout->text (\" from \");\n \t    uiout->field_string (\"from\", lib, file_name_style.style ());\n \t  }\n@@ -1557,21 +1557,21 @@ info_frame_command_core (struct frame_info *fi, bool selected_frame_p)\n   else\n     fputs_styled (\"<unavailable>\", metadata_style.style (), gdb_stdout);\n \n-  wrap_here (\"   \");\n+  wrap_here (3);\n   if (funname)\n     {\n       printf_filtered (\" in \");\n       puts_filtered (funname);\n     }\n-  wrap_here (\"   \");\n+  wrap_here (3);\n   if (sal.symtab)\n     printf_filtered\n       (\" (%ps:%d)\",\n        styled_string (file_name_style.style (),\n \t\t      symtab_to_filename_for_display (sal.symtab)),\n        sal.line);\n   puts_filtered (\"; \");\n-  wrap_here (\"    \");\n+  wrap_here (4);\n   printf_filtered (\"saved %s = \", pc_regname);\n \n   if (!frame_id_p (frame_unwind_caller_id (fi)))\n@@ -1627,7 +1627,7 @@ info_frame_command_core (struct frame_info *fi, bool selected_frame_p)\n     }\n   if (get_next_frame (fi) && calling_frame_info)\n     puts_filtered (\",\");\n-  wrap_here (\"   \");\n+  wrap_here (3);\n   if (get_next_frame (fi))\n     {\n       printf_filtered (\" caller of frame at \");\n@@ -1765,7 +1765,7 @@ info_frame_command_core (struct frame_info *fi, bool selected_frame_p)\n \t\tputs_filtered (\" Saved registers:\\n \");\n \t      else\n \t\tputs_filtered (\",\");\n-\t      wrap_here (\" \");\n+\t      wrap_here (1);\n \t      printf_filtered (\" %s at \",\n \t\t\t       gdbarch_register_name (gdbarch, i));\n \t      puts_filtered (paddress (gdbarch, addr));"
    },
    {
      "sha": "f0a7c7f7c5a7e22d9ff827999aa554e961245677",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -2607,9 +2607,9 @@ reread_symbols (int from_tty)\n \n \t  if (!objfile_has_symbols (objfile))\n \t    {\n-\t      wrap_here (\"\");\n+\t      wrap_here (0);\n \t      printf_filtered (_(\"(no debugging symbols found)\\n\"));\n-\t      wrap_here (\"\");\n+\t      wrap_here (0);\n \t    }\n \n \t  /* We're done reading the symbol file; finish off complaints.  */"
    },
    {
      "sha": "65b06c4030f13f0b9301affe0bf199fc1762b79d",
      "filename": "gdb/symmisc.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/symmisc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/symmisc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symmisc.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -766,7 +766,7 @@ maintenance_info_symtabs (const char *regexp, int from_tty)\n \t\t    if (! printed_objfile_start)\n \t\t      {\n \t\t\tprintf_filtered (\"{ objfile %s \", objfile_name (objfile));\n-\t\t\twrap_here (\"  \");\n+\t\t\twrap_here (2);\n \t\t\tprintf_filtered (\"((struct objfile *) %s)\\n\",\n \t\t\t\t\t host_address_to_string (objfile));\n \t\t\tprinted_objfile_start = 1;\n@@ -816,7 +816,7 @@ maintenance_info_symtabs (const char *regexp, int from_tty)\n \n \t\t    printf_filtered (\"\\t{ symtab %s \",\n \t\t\t\t     symtab_to_filename_for_display (symtab));\n-\t\t    wrap_here (\"    \");\n+\t\t    wrap_here (4);\n \t\t    printf_filtered (\"((struct symtab *) %s)\\n\",\n \t\t\t\t     host_address_to_string (symtab));\n \t\t    printf_filtered (\"\\t  fullname %s\\n\",\n@@ -873,7 +873,7 @@ maintenance_check_symtabs (const char *ignore, int from_tty)\n \t\tif (! printed_objfile_start)\n \t\t  {\n \t\t    printf_filtered (\"{ objfile %s \", objfile_name (objfile));\n-\t\t    wrap_here (\"  \");\n+\t\t    wrap_here (2);\n \t\t    printf_filtered (\"((struct objfile *) %s)\\n\",\n \t\t\t\t     host_address_to_string (objfile));\n \t\t    printed_objfile_start = 1;"
    },
    {
      "sha": "d0cda253bf2fed60c63e59e4daac18a700534e2c",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -4380,7 +4380,7 @@ output_source_filename_data::output (const char *disp_name,\n     m_uiout->text (\", \");\n   m_first = false;\n \n-  wrap_here (\"\");\n+  wrap_here (0);\n   if (m_uiout->is_mi_like_p ())\n     {\n       m_uiout->field_string (\"file\", disp_name, file_name_style.style ());"
    },
    {
      "sha": "46983d1fb6f0b8b95a1c72fbb93976f1499d947c",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -1364,7 +1364,7 @@ command_line_input (const char *prompt_arg, const char *annotation_suffix)\n       /* Make sure that all output has been output.  Some machines may\n \t let you get away with leaving out some of the gdb_flush, but\n \t not all.  */\n-      wrap_here (\"\");\n+      wrap_here (0);\n       gdb_flush (gdb_stdout);\n       gdb_flush (gdb_stderr);\n "
    },
    {
      "sha": "016bce0bf9b6c132004c20b74309039a8100c84e",
      "filename": "gdb/tracepoint.c",
      "status": "modified",
      "additions": 6,
      "deletions": 9,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -2395,10 +2395,10 @@ tfind_line_command (const char *args, int from_tty)\n \t  printf_filtered (\"Line %d of \\\"%s\\\"\",\n \t\t\t   sal.line,\n \t\t\t   symtab_to_filename_for_display (sal.symtab));\n-\t  wrap_here (\"  \");\n+\t  wrap_here (2);\n \t  printf_filtered (\" is at address \");\n \t  print_address (get_current_arch (), start_pc, gdb_stdout);\n-\t  wrap_here (\"  \");\n+\t  wrap_here (2);\n \t  printf_filtered (\" but contains no code.\\n\");\n \t  sal = find_pc_line (start_pc, 0);\n \t  if (sal.line > 0\n@@ -3660,8 +3660,6 @@ print_one_static_tracepoint_marker (int count,\n {\n   struct symbol *sym;\n \n-  char wrap_indent[80];\n-  char extra_field_indent[80];\n   struct ui_out *uiout = current_uiout;\n \n   symtab_and_line sal;\n@@ -3682,14 +3680,13 @@ print_one_static_tracepoint_marker (int count,\n \t\t    !tracepoints.empty () ? 'y' : 'n');\n   uiout->spaces (2);\n \n-  strcpy (wrap_indent, \"                                   \");\n-\n+  int wrap_indent = 35;\n   if (gdbarch_addr_bit (marker.gdbarch) <= 32)\n-    strcat (wrap_indent, \"           \");\n+    wrap_indent += 11;\n   else\n-    strcat (wrap_indent, \"                   \");\n+    wrap_indent += 19;\n \n-  strcpy (extra_field_indent, \"         \");\n+  const char *extra_field_indent = \"         \";\n \n   uiout->field_core_addr (\"addr\", marker.gdbarch, marker.address);\n "
    },
    {
      "sha": "e34e40fae762efaff3980dccd110ce1e254180b8",
      "filename": "gdb/ui-out.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/ui-out.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/ui-out.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ui-out.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -790,9 +790,9 @@ ui_out::message (const char *format, ...)\n }\n \n void\n-ui_out::wrap_hint (const char *identstring)\n+ui_out::wrap_hint (int indent)\n {\n-  do_wrap_hint (identstring);\n+  do_wrap_hint (indent);\n }\n \n void"
    },
    {
      "sha": "60dd6fc2d37a6439a49d22437c7ba64c4d681651",
      "filename": "gdb/ui-out.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/ui-out.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/ui-out.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ui-out.h?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -257,7 +257,7 @@ class ui_out\n   void vmessage (const ui_file_style &in_style,\n \t\t const char *format, va_list args) ATTRIBUTE_PRINTF (3, 0);\n \n-  void wrap_hint (const char *identstring);\n+  void wrap_hint (int indent);\n \n   void flush ();\n \n@@ -343,7 +343,7 @@ class ui_out\n   virtual void do_message (const ui_file_style &style,\n \t\t\t   const char *format, va_list args)\n     ATTRIBUTE_PRINTF (3,0) = 0;\n-  virtual void do_wrap_hint (const char *identstring) = 0;\n+  virtual void do_wrap_hint (int indent) = 0;\n   virtual void do_flush () = 0;\n   virtual void do_redirect (struct ui_file *outstream) = 0;\n "
    },
    {
      "sha": "3a019d7d1d443015e50f32e1db2d67de86b1f38a",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 19,
      "deletions": 33,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -154,7 +154,7 @@ vwarning (const char *string, va_list args)\n \t  target_terminal::ours_for_output ();\n \t}\n       if (filtered_printing_initialized ())\n-\twrap_here (\"\");\t\t/* Force out any buffered output.  */\n+\twrap_here (0);\t\t/* Force out any buffered output.  */\n       gdb_flush (gdb_stdout);\n       if (warning_pre_print)\n \tfputs_unfiltered (warning_pre_print, gdb_stderr);\n@@ -881,7 +881,7 @@ defaulted_query (const char *ctlstr, const char defchar, va_list args)\n     {\n       target_terminal::scoped_restore_terminal_state term_state;\n       target_terminal::ours_for_output ();\n-      wrap_here (\"\");\n+      wrap_here (0);\n       vfprintf_filtered (gdb_stdout, ctlstr, args);\n \n       printf_filtered (_(\"(%s or %s) [answered %c; \"\n@@ -1175,9 +1175,8 @@ static bool filter_initialized = false;\n    already been counted in chars_printed).  */\n static std::string wrap_buffer;\n \n-/* String to indent by if the wrap occurs.  Must not be NULL if wrap_column\n-   is non-zero.  */\n-static const char *wrap_indent;\n+/* String to indent by if the wrap occurs.  */\n+static int wrap_indent;\n \n /* Column number on the screen where wrap_buffer begins, or 0 if wrapping\n    is not in effect.  */\n@@ -1520,12 +1519,10 @@ get_chars_per_line ()\n   return chars_per_line;\n }\n \n-/* Indicate that if the next sequence of characters overflows the line,\n-   a newline should be inserted here rather than when it hits the end.\n-   If INDENT is non-null, it is a string to be printed to indent the\n-   wrapped part on the next line.  INDENT must remain accessible until\n-   the next call to wrap_here() or until a newline is printed through\n-   fputs_filtered().\n+/* Indicate that if the next sequence of characters overflows the\n+   line, a newline should be inserted here rather than when it hits\n+   the end.  If INDENT is non-zero, it is a number of spaces to be\n+   printed to indent the wrapped part on the next line.\n \n    If the line is already overfull, we immediately print a newline and\n    the indentation, and disable further wrapping.\n@@ -1534,15 +1531,12 @@ get_chars_per_line ()\n    we must not wrap words, but should still keep track of newlines\n    that were explicitly printed.\n \n-   INDENT should not contain tabs, as that will mess up the char count\n-   on the next line.  FIXME.\n-\n    This routine is guaranteed to force out any output which has been\n-   squirreled away in the wrap_buffer, so wrap_here ((char *)0) can be\n+   squirreled away in the wrap_buffer, so wrap_here (0) can be\n    used to force out output from the wrap_buffer.  */\n \n void\n-wrap_here (const char *indent)\n+wrap_here (int indent)\n {\n   /* This should have been allocated, but be paranoid anyway.  */\n   gdb_assert (filter_initialized);\n@@ -1555,17 +1549,14 @@ wrap_here (const char *indent)\n   else if (chars_printed >= chars_per_line)\n     {\n       puts_filtered (\"\\n\");\n-      if (indent != NULL)\n-\tputs_filtered (indent);\n+      if (indent != 0)\n+\tputs_filtered (n_spaces (indent));\n       wrap_column = 0;\n     }\n   else\n     {\n       wrap_column = chars_printed;\n-      if (indent == NULL)\n-\twrap_indent = \"\";\n-      else\n-\twrap_indent = indent;\n+      wrap_indent = indent;\n       wrap_style = applied_style;\n     }\n }\n@@ -1672,7 +1663,7 @@ fputs_maybe_filtered (const char *linebuffer, struct ui_file *stream,\n \t\t       {\n \t\t\t wrap_buffer.clear ();\n \t\t\t wrap_column = 0;\n-\t\t\t wrap_indent = \"\";\n+\t\t\t wrap_indent = 0;\n \t\t       });\n \n   /* Go through and output each character.  Show line extension\n@@ -1777,7 +1768,7 @@ fputs_maybe_filtered (const char *linebuffer, struct ui_file *stream,\n \t      /* Now output indentation and wrapped string.  */\n \t      if (wrap_column)\n \t\t{\n-\t\t  stream->puts (wrap_indent);\n+\t\t  stream->puts (n_spaces (wrap_indent));\n \n \t\t  /* Having finished inserting the wrapping we should\n \t\t     restore the style as it was at the WRAP_COLUMN.  */\n@@ -1791,14 +1782,9 @@ fputs_maybe_filtered (const char *linebuffer, struct ui_file *stream,\n \t\t     in WRAP_BUFFER.  */\n \t\t  applied_style = save_style;\n \n-\t\t  /* FIXME, this strlen is what prevents wrap_indent from\n-\t\t     containing tabs.  However, if we recurse to print it\n-\t\t     and count its chars, we risk trouble if wrap_indent is\n-\t\t     longer than (the user settable) chars_per_line.\n-\t\t     Note also that this can set chars_printed > chars_per_line\n+\t\t  /* Note that this can set chars_printed > chars_per_line\n \t\t     if we are printing a long string.  */\n-\t\t  chars_printed = strlen (wrap_indent)\n-\t\t    + (save_chars - wrap_column);\n+\t\t  chars_printed = wrap_indent + (save_chars - wrap_column);\n \t\t  wrap_column = 0;\t/* And disable fancy wrap */\n \t\t}\n \t      else if (did_paginate && stream->can_emit_style_escape ())\n@@ -1809,8 +1795,8 @@ fputs_maybe_filtered (const char *linebuffer, struct ui_file *stream,\n       if (*lineptr == '\\n')\n \t{\n \t  chars_printed = 0;\n-\t  wrap_here ((char *) 0);\t/* Spit out chars, cancel\n-\t\t\t\t\t   further wraps.  */\n+\t  wrap_here (0);\t/* Spit out chars, cancel\n+\t\t\t\t   further wraps.  */\n \t  lines_printed++;\n \t  /* XXX: The ideal thing would be to call\n \t     'stream->putc' here, but we can't because it"
    },
    {
      "sha": "027f433f69133f8f11b15f7ea228205de5dd9493",
      "filename": "gdb/utils.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.h?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -172,7 +172,7 @@ extern int yquery (const char *, ...) ATTRIBUTE_PRINTF (1, 2);\n \n extern void begin_line (void);\n \n-extern void wrap_here (const char *);\n+extern void wrap_here (int);\n \n extern void reinitialize_more_filter (void);\n "
    },
    {
      "sha": "1fc007f6147878a3a935edb3a4d739eecfbd7533",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6c92c339539ec87dc12783e9c8f1688a4a370c03/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=6c92c339539ec87dc12783e9c8f1688a4a370c03",
      "patch": "@@ -1946,7 +1946,7 @@ value_print_array_elements (struct value *val, struct ui_file *stream,\n \t  fprintf_filtered (stream, \"\\n\");\n \t  print_spaces_filtered (2 + 2 * recurse, stream);\n \t}\n-      wrap_here (n_spaces (2 + 2 * recurse));\n+      wrap_here (2 + 2 * recurse);\n       maybe_print_array_index (index_type, i + low_bound,\n \t\t\t       stream, options);\n "
    }
  ]
}