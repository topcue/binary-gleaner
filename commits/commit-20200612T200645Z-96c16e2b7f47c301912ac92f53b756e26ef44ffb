{
  "sha": "96c16e2b7f47c301912ac92f53b756e26ef44ffb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTZjMTZlMmI3ZjQ3YzMwMTkxMmFjOTJmNTNiNzU2ZTI2ZWY0NGZmYg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-06-12T20:06:44Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-06-12T20:06:45Z"
    },
    "message": "gdbserver: remove support for Tile\n\nThis port has been unmaintained for years and the upstream Linux kernel\ndoes not support this architecture anymore, remove it.\n\ngdbserver/ChangeLog:\n\n\t* Makefile.in (SFILES): linux-tile-low.cc.\n\t* configure.srv: Remove tilegx case.\n\t* linux-tile-low.cc: Remove.\n\nChange-Id: I1c2910d04ddbd6013e5d228047106b41d80f9477",
    "tree": {
      "sha": "b9b3a499b9cfaab738d06348da17674319d713a3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b9b3a499b9cfaab738d06348da17674319d713a3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/96c16e2b7f47c301912ac92f53b756e26ef44ffb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96c16e2b7f47c301912ac92f53b756e26ef44ffb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/96c16e2b7f47c301912ac92f53b756e26ef44ffb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96c16e2b7f47c301912ac92f53b756e26ef44ffb/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb"
    }
  ],
  "stats": {
    "total": 240,
    "additions": 6,
    "deletions": 234
  },
  "files": [
    {
      "sha": "70a2a821dc3e2db60e075680cb3aa1e40e8c6284",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96c16e2b7f47c301912ac92f53b756e26ef44ffb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96c16e2b7f47c301912ac92f53b756e26ef44ffb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=96c16e2b7f47c301912ac92f53b756e26ef44ffb",
      "patch": "@@ -1,3 +1,9 @@\n+2020-06-12  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* Makefile.in (SFILES): linux-tile-low.cc.\n+\t* configure.srv: Remove tilegx case.\n+\t* linux-tile-low.cc: Remove.\n+\n 2020-06-12  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* Makefile.in (SFILES): Remove linux-m32r-low.cc."
    },
    {
      "sha": "cc5fa427c93353ec374a08e71447177b6e9f8c4b",
      "filename": "gdbserver/Makefile.in",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96c16e2b7f47c301912ac92f53b756e26ef44ffb/gdbserver/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96c16e2b7f47c301912ac92f53b756e26ef44ffb/gdbserver/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/Makefile.in?ref=96c16e2b7f47c301912ac92f53b756e26ef44ffb",
      "patch": "@@ -190,7 +190,6 @@ SFILES = \\\n \t$(srcdir)/linux-s390-low.cc \\\n \t$(srcdir)/linux-sh-low.cc \\\n \t$(srcdir)/linux-sparc-low.cc \\\n-\t$(srcdir)/linux-tile-low.cc \\\n \t$(srcdir)/linux-x86-low.cc \\\n \t$(srcdir)/linux-xtensa-low.cc \\\n \t$(srcdir)/mem-break.cc \\"
    },
    {
      "sha": "b376cb13449cf23b805ab7ee6058613e276bc768",
      "filename": "gdbserver/configure.srv",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96c16e2b7f47c301912ac92f53b756e26ef44ffb/gdbserver/configure.srv",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96c16e2b7f47c301912ac92f53b756e26ef44ffb/gdbserver/configure.srv",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/configure.srv?ref=96c16e2b7f47c301912ac92f53b756e26ef44ffb",
      "patch": "@@ -375,12 +375,6 @@ case \"${gdbserver_host}\" in\n \t\t\tsrv_linux_regsets=yes\n \t\t\tsrv_linux_thread_db=yes\n \t\t\t;;\n-  tilegx-*-linux*)\tsrv_regobj=reg-tilegx.o\n-\t\t\tsrv_regobj=\"${srv_regobj} reg-tilegx32.o\"\n-\t\t\tsrv_tgtobj=\"$srv_linux_obj linux-tile-low.o\"\n-\t\t\tsrv_linux_regsets=yes\n-\t\t\tsrv_linux_thread_db=yes\n-\t\t\t;;\n   *)\n \t\t\t# Who are you?\n \t\t\tUNSUPPORTED=1"
    },
    {
      "sha": "fa24b0899c028d7af74fd71fcbc0cd9a41d15a6a",
      "filename": "gdbserver/linux-tile-low.cc",
      "status": "removed",
      "additions": 0,
      "deletions": 227,
      "changes": 227,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb/gdbserver/linux-tile-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb/gdbserver/linux-tile-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-tile-low.cc?ref=bd1467aee8dff8f1ea196b1ae10b14b6d1709dfb",
      "patch": "@@ -1,227 +0,0 @@\n-/* GNU/Linux/TILE-Gx specific low level interface, GDBserver.\n-\n-   Copyright (C) 2012-2020 Free Software Foundation, Inc.\n-\n-   This file is part of GDB.\n-\n-   This program is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3 of the License, or\n-   (at your option) any later version.\n-\n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n-\n-#include \"server.h\"\n-#include \"linux-low.h\"\n-\n-#include <arch/abi.h>\n-#include \"nat/gdb_ptrace.h\"\n-\n-/* Linux target op definitions for the TILE-Gx architecture.  */\n-\n-class tile_target : public linux_process_target\n-{\n-public:\n-\n-  const regs_info *get_regs_info () override;\n-\n-  const gdb_byte *sw_breakpoint_from_kind (int kind, int *size) override;\n-\n-protected:\n-\n-  void low_arch_setup () override;\n-\n-  bool low_cannot_fetch_register (int regno) override;\n-\n-  bool low_cannot_store_register (int regno) override;\n-\n-  bool low_supports_breakpoints () override;\n-\n-  CORE_ADDR low_get_pc (regcache *regcache) override;\n-\n-  void low_set_pc (regcache *regcache, CORE_ADDR newpc) override;\n-\n-  bool low_breakpoint_at (CORE_ADDR pc) override;\n-};\n-\n-/* The singleton target ops object.  */\n-\n-static tile_target the_tile_target;\n-\n-bool\n-tile_target::low_supports_breakpoints ()\n-{\n-  return true;\n-}\n-\n-CORE_ADDR\n-tile_target::low_get_pc (regcache *regcache)\n-{\n-  return linux_get_pc_64bit (regcache);\n-}\n-\n-void\n-tile_target::low_set_pc (regcache *regcache, CORE_ADDR pc)\n-{\n-  linux_set_pc_64bit (regcache, pc);\n-}\n-\n-/* Defined in auto-generated file reg-tilegx.c.  */\n-void init_registers_tilegx (void);\n-extern const struct target_desc *tdesc_tilegx;\n-\n-/* Defined in auto-generated file reg-tilegx32.c.  */\n-void init_registers_tilegx32 (void);\n-extern const struct target_desc *tdesc_tilegx32;\n-\n-#define tile_num_regs 65\n-\n-static int tile_regmap[] =\n-{\n-   0,  1,  2,  3,  4,  5,  6,  7,\n-   8,  9, 10, 11, 12, 13, 14, 15,\n-  16, 17, 18, 19, 20, 21, 22, 23,\n-  24, 25, 26, 27, 28, 29, 30, 31,\n-  32, 33, 34, 35, 36, 37, 38, 39,\n-  40, 41, 42, 43, 44, 45, 46, 47,\n-  48, 49, 50, 51, 52, 53, 54, 55,\n-  -1, -1, -1, -1, -1, -1, -1, -1,\n-  56\n-};\n-\n-bool\n-tile_target::low_cannot_fetch_register (int regno)\n-{\n-  if (regno >= 0 && regno < 56)\n-    return false;\n-  else if (regno == 64)\n-    return false;\n-  else\n-    return true;\n-}\n-\n-bool\n-tile_target::low_cannot_store_register (int regno)\n-{\n-  if (regno >= 0 && regno < 56)\n-    return false;\n-  else if (regno == 64)\n-    return false;\n-  else\n-    return true;\n-}\n-\n-static uint64_t tile_breakpoint = 0x400b3cae70166000ULL;\n-#define tile_breakpoint_len 8\n-\n-/* Implementation of target ops method \"sw_breakpoint_from_kind\".  */\n-\n-const gdb_byte *\n-tile_target::sw_breakpoint_from_kind (int kind, int *size)\n-{\n-  *size = tile_breakpoint_len;\n-  return (const gdb_byte *) &tile_breakpoint;\n-}\n-\n-bool\n-tile_target::low_breakpoint_at (CORE_ADDR where)\n-{\n-  uint64_t insn;\n-\n-  read_memory (where, (unsigned char *) &insn, 8);\n-  if (insn == tile_breakpoint)\n-    return true;\n-\n-  /* If necessary, recognize more trap instructions here.  GDB only uses the\n-     one.  */\n-  return false;\n-}\n-\n-static void\n-tile_fill_gregset (struct regcache *regcache, void *buf)\n-{\n-  int i;\n-\n-  for (i = 0; i < tile_num_regs; i++)\n-    if (tile_regmap[i] != -1)\n-      collect_register (regcache, i, ((uint_reg_t *) buf) + tile_regmap[i]);\n-}\n-\n-static void\n-tile_store_gregset (struct regcache *regcache, const void *buf)\n-{\n-  int i;\n-\n-  for (i = 0; i < tile_num_regs; i++)\n-    if (tile_regmap[i] != -1)\n-      supply_register (regcache, i, ((uint_reg_t *) buf) + tile_regmap[i]);\n-}\n-\n-static struct regset_info tile_regsets[] =\n-{\n-  { PTRACE_GETREGS, PTRACE_SETREGS, 0, tile_num_regs * 8,\n-    GENERAL_REGS, tile_fill_gregset, tile_store_gregset },\n-  NULL_REGSET\n-};\n-\n-static struct regsets_info tile_regsets_info =\n-  {\n-    tile_regsets, /* regsets */\n-    0, /* num_regsets */\n-    NULL, /* disabled_regsets */\n-  };\n-\n-static struct usrregs_info tile_usrregs_info =\n-  {\n-    tile_num_regs,\n-    tile_regmap,\n-  };\n-\n-static struct regs_info myregs_info =\n-  {\n-    NULL, /* regset_bitmap */\n-    &tile_usrregs_info,\n-    &tile_regsets_info,\n-  };\n-\n-const regs_info *\n-tile_target::get_regs_info ()\n-{\n-  return &myregs_info;\n-}\n-\n-void\n-tile_target::low_arch_setup ()\n-{\n-  int pid = pid_of (current_thread);\n-  unsigned int machine;\n-  int is_elf64 = linux_pid_exe_is_elf_64_file (pid, &machine);\n-\n-  if (sizeof (void *) == 4)\n-    if (is_elf64 > 0)\n-      error (_(\"Can't debug 64-bit process with 32-bit GDBserver\"));\n-\n-  if (!is_elf64)\n-    current_process ()->tdesc = tdesc_tilegx32;\n-  else\n-    current_process ()->tdesc = tdesc_tilegx;\n-}\n-\n-/* The linux target ops object.  */\n-\n-linux_process_target *the_linux_target = &the_tile_target;\n-\n-void\n-initialize_low_arch (void)\n-{\n-  init_registers_tilegx32();\n-  init_registers_tilegx();\n-\n-  initialize_regsets_info (&tile_regsets_info);\n-}"
    }
  ]
}