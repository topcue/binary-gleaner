{
  "sha": "d8af906814bd69dad694e475288401b1dee6ac3a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDhhZjkwNjgxNGJkNjlkYWQ2OTRlNDc1Mjg4NDAxYjFkZWU2YWMzYQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-03-30T17:50:35Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-03-30T17:54:50Z"
    },
    "message": "Change ada_which_variant_applies to value API\n\nWhile debugging an Ada regression, I noticed that all the callers of\nada_which_variant_applies desconstruct a value, only to have it be\nreconstructed by this function.\n\nThis patch removes this inefficiency in favor of simply passing in the\nvalue directly.\n\nTested on x86-64 Fedora 30.\n\ngdb/ChangeLog\n2020-03-30  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-valprint.c (print_variant_part): Update.\n\t* ada-lang.h (ada_which_variant_applies): Update.\n\t* ada-lang.c (ada_which_variant_applies): Remove outer_type and\n\touter_valaddr parameters; replace with \"outer\" value parameter.\n\t(to_fixed_variant_branch_type): Update.",
    "tree": {
      "sha": "0e95af57f2a2ff0ca8fb515d6b12ff62c2d7498d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0e95af57f2a2ff0ca8fb515d6b12ff62c2d7498d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d8af906814bd69dad694e475288401b1dee6ac3a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d8af906814bd69dad694e475288401b1dee6ac3a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d8af906814bd69dad694e475288401b1dee6ac3a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d8af906814bd69dad694e475288401b1dee6ac3a/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "00386881a3d0f7ac89fcc5cc912da8cd69c04324",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/00386881a3d0f7ac89fcc5cc912da8cd69c04324",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/00386881a3d0f7ac89fcc5cc912da8cd69c04324"
    }
  ],
  "stats": {
    "total": 28,
    "additions": 13,
    "deletions": 15
  },
  "files": [
    {
      "sha": "af7e151fa94b2d6efe3281a0d7fb9dd0baaf0207",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8af906814bd69dad694e475288401b1dee6ac3a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8af906814bd69dad694e475288401b1dee6ac3a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d8af906814bd69dad694e475288401b1dee6ac3a",
      "patch": "@@ -1,3 +1,11 @@\n+2020-03-30  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-valprint.c (print_variant_part): Update.\n+\t* ada-lang.h (ada_which_variant_applies): Update.\n+\t* ada-lang.c (ada_which_variant_applies): Remove outer_type and\n+\touter_valaddr parameters; replace with \"outer\" value parameter.\n+\t(to_fixed_variant_branch_type): Update.\n+\n 2020-03-30  Pedro Franco de Carvalho  <pedromfc@linux.ibm.com>\n \n \t* ppc-linux-nat.c: Include <algorithm>, <unordered_map>, and"
    },
    {
      "sha": "565299a5ca1be0df2def93e7d8f5779a0d22dec7",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 3,
      "deletions": 10,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8af906814bd69dad694e475288401b1dee6ac3a/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8af906814bd69dad694e475288401b1dee6ac3a/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=d8af906814bd69dad694e475288401b1dee6ac3a",
      "patch": "@@ -7661,26 +7661,21 @@ is_unchecked_variant (struct type *var_type, struct type *outer_type)\n \n \n /* Assuming that VAR_TYPE is the type of a variant part of a record (a union),\n-   within a value of type OUTER_TYPE that is stored in GDB at\n-   OUTER_VALADDR, determine which variant clause (field number in VAR_TYPE,\n+   within OUTER, determine which variant clause (field number in VAR_TYPE,\n    numbering from 0) is applicable.  Returns -1 if none are.  */\n \n int\n-ada_which_variant_applies (struct type *var_type, struct type *outer_type,\n-                           const gdb_byte *outer_valaddr)\n+ada_which_variant_applies (struct type *var_type, struct value *outer)\n {\n   int others_clause;\n   int i;\n   const char *discrim_name = ada_variant_discrim_name (var_type);\n-  struct value *outer;\n   struct value *discrim;\n   LONGEST discrim_val;\n \n   /* Using plain value_from_contents_and_address here causes problems\n      because we will end up trying to resolve a type that is currently\n      being constructed.  */\n-  outer = value_from_contents_and_address_unresolved (outer_type,\n-\t\t\t\t\t\t      outer_valaddr, 0);\n   discrim = ada_value_struct_elt (outer, discrim_name, 1);\n   if (discrim == NULL)\n     return -1;\n@@ -8555,9 +8550,7 @@ to_fixed_variant_branch_type (struct type *var_type0, const gdb_byte *valaddr,\n \n   if (is_unchecked_variant (var_type, value_type (dval)))\n       return var_type0;\n-  which =\n-    ada_which_variant_applies (var_type,\n-                               value_type (dval), value_contents (dval));\n+  which = ada_which_variant_applies (var_type, dval);\n \n   if (which < 0)\n     return empty_record (var_type);"
    },
    {
      "sha": "bb9e3c3027b4d7ec9106874bdad7a7fbf6cec893",
      "filename": "gdb/ada-lang.h",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8af906814bd69dad694e475288401b1dee6ac3a/gdb/ada-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8af906814bd69dad694e475288401b1dee6ac3a/gdb/ada-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.h?ref=d8af906814bd69dad694e475288401b1dee6ac3a",
      "patch": "@@ -284,8 +284,7 @@ extern struct value *ada_delta (struct type *);\n \n extern struct value *ada_scaling_factor (struct type *);\n \n-extern int ada_which_variant_applies (struct type *, struct type *,\n-\t\t\t\t      const gdb_byte *);\n+extern int ada_which_variant_applies (struct type *, struct value *);\n \n extern struct type *ada_to_fixed_type (struct type *, const gdb_byte *,\n \t\t\t\t       CORE_ADDR, struct value *,"
    },
    {
      "sha": "2f2375a0ffa0006c72c62a56e82b26d916adc9b4",
      "filename": "gdb/ada-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 3,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8af906814bd69dad694e475288401b1dee6ac3a/gdb/ada-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8af906814bd69dad694e475288401b1dee6ac3a/gdb/ada-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-valprint.c?ref=d8af906814bd69dad694e475288401b1dee6ac3a",
      "patch": "@@ -560,9 +560,7 @@ print_variant_part (struct value *value, int field_num,\n {\n   struct type *type = value_type (value);\n   struct type *var_type = TYPE_FIELD_TYPE (type, field_num);\n-  int which = ada_which_variant_applies (var_type,\n-\t\t\t\t\t value_type (outer_value),\n-\t\t\t\t\t value_contents (outer_value));\n+  int which = ada_which_variant_applies (var_type, outer_value);\n \n   if (which < 0)\n     return 0;"
    }
  ]
}