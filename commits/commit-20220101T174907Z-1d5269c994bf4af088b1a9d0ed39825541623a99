{
  "sha": "1d5269c994bf4af088b1a9d0ed39825541623a99",
  "node_id": "C_kwDOANOeidoAKDFkNTI2OWM5OTRiZjRhZjA4OGIxYTlkMGVkMzk4MjU1NDE2MjNhOTk",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-12-04T05:28:14Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2022-01-01T17:49:07Z"
    },
    "message": "unify 64-bit bfd checks\n\nMove the 64-bit bfd logic out of bfd/configure.ac and into bfd64.m4\nunder config so it can be shared between all the other subdirs.\n\nThis replaces want64 with enable_64_bit_bfd which was already being\ndeclared, but not used directly.",
    "tree": {
      "sha": "427712dedcd41fc7d1d0e8f837444ec8f6c6c762",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/427712dedcd41fc7d1d0e8f837444ec8f6c6c762"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1d5269c994bf4af088b1a9d0ed39825541623a99",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d5269c994bf4af088b1a9d0ed39825541623a99",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1d5269c994bf4af088b1a9d0ed39825541623a99",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1d5269c994bf4af088b1a9d0ed39825541623a99/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3cc8ed6aaee33355a5d911a7401db3f1b05a2714",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3cc8ed6aaee33355a5d911a7401db3f1b05a2714",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3cc8ed6aaee33355a5d911a7401db3f1b05a2714"
    }
  ],
  "stats": {
    "total": 797,
    "additions": 579,
    "deletions": 218
  },
  "files": [
    {
      "sha": "69a8848a6dbf7890492c08fe797c6c58798d7f06",
      "filename": "bfd/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/bfd/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/bfd/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/Makefile.in?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -114,6 +114,7 @@ target_triplet = @target@\n subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n+\t$(top_srcdir)/../config/bfd64.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/gettext-sister.m4 \\\n \t$(top_srcdir)/../config/jobserver.m4 \\"
    },
    {
      "sha": "0f8aa1d4518b629810c44de0a549f2c62c554ae1",
      "filename": "bfd/aclocal.m4",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/bfd/aclocal.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/bfd/aclocal.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/aclocal.m4?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -1168,6 +1168,7 @@ AC_SUBST([am__untar])\n ]) # _AM_PROG_TAR\n \n m4_include([../config/acx.m4])\n+m4_include([../config/bfd64.m4])\n m4_include([../config/depstand.m4])\n m4_include([../config/gettext-sister.m4])\n m4_include([../config/jobserver.m4])"
    },
    {
      "sha": "b09702f26e12d215118eccba4b53750775709c6b",
      "filename": "bfd/configure",
      "status": "modified",
      "additions": 71,
      "deletions": 6,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/bfd/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/bfd/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -697,6 +697,8 @@ REPORT_BUGS_TEXI\n REPORT_BUGS_TO\n PKGVERSION\n DEBUGDIR\n+ENABLE_BFD_64_BIT_FALSE\n+ENABLE_BFD_64_BIT_TRUE\n PLUGINS_FALSE\n PLUGINS_TRUE\n LARGEFILE_CPPFLAGS\n@@ -11084,7 +11086,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11087 \"configure\"\n+#line 11089 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11190,7 +11192,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11193 \"configure\"\n+#line 11195 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11847,11 +11849,70 @@ fi\n \n # Check whether --enable-64-bit-bfd was given.\n if test \"${enable_64_bit_bfd+set}\" = set; then :\n-  enableval=$enable_64_bit_bfd; case \"${enableval}\" in\n-  yes)  want64=true  ;;\n-  no)   want64=false ;;\n-  *)    as_fn_error $? \"bad value ${enableval} for 64-bit-bfd option\" \"$LINENO\" 5 ;;\n+  enableval=$enable_64_bit_bfd; case $enableval in #(\n+  yes|no) :\n+     ;; #(\n+  *) :\n+    as_fn_error $? \"bad value ${enableval} for 64-bit-bfd option\" \"$LINENO\" 5 ;; #(\n+  *) :\n+     ;;\n esac\n+else\n+  enable_64_bit_bfd=no\n+fi\n+\n+\n+if test \"x$enable_64_bit_bfd\" = \"xno\"; then :\n+    # The cast to long int works around a bug in the HP C Compiler\n+# version HP92453-01 B.11.11.23709.GP, which incorrectly rejects\n+# declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.\n+# This bug is HP SR number 8606223364.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking size of void *\" >&5\n+$as_echo_n \"checking size of void *... \" >&6; }\n+if ${ac_cv_sizeof_void_p+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if ac_fn_c_compute_int \"$LINENO\" \"(long int) (sizeof (void *))\" \"ac_cv_sizeof_void_p\"        \"$ac_includes_default\"; then :\n+\n+else\n+  if test \"$ac_cv_type_void_p\" = yes; then\n+     { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error 77 \"cannot compute sizeof (void *)\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+   else\n+     ac_cv_sizeof_void_p=0\n+   fi\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sizeof_void_p\" >&5\n+$as_echo \"$ac_cv_sizeof_void_p\" >&6; }\n+\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define SIZEOF_VOID_P $ac_cv_sizeof_void_p\n+_ACEOF\n+\n+\n+  if test \"x$ac_cv_sizeof_void_p\" = \"x8\"; then :\n+  enable_64_bit_bfd=yes\n+fi\n+\n+fi\n+\n+ if test \"x$enable_64_bit_bfd\" = \"xyes\"; then\n+  ENABLE_BFD_64_BIT_TRUE=\n+  ENABLE_BFD_64_BIT_FALSE='#'\n+else\n+  ENABLE_BFD_64_BIT_TRUE='#'\n+  ENABLE_BFD_64_BIT_FALSE=\n+fi\n+\n+\n+if test $enable_64_bit_bfd = yes ; then\n+  want64=true\n else\n   want64=false\n fi\n@@ -15182,6 +15243,10 @@ if test -z \"${PLUGINS_TRUE}\" && test -z \"${PLUGINS_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"PLUGINS\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${ENABLE_BFD_64_BIT_TRUE}\" && test -z \"${ENABLE_BFD_64_BIT_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"ENABLE_BFD_64_BIT\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${MAINTAINER_MODE_TRUE}\" && test -z \"${MAINTAINER_MODE_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"MAINTAINER_MODE\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"
    },
    {
      "sha": "bdc2fc41527a27d628c4937e9501c9818ba23d2a",
      "filename": "bfd/configure.ac",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/bfd/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/bfd/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure.ac?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -82,13 +82,12 @@ if test x$ac_checking != x ; then\n   AC_DEFINE(ENABLE_CHECKING, 1, [Define if you want run-time sanity checks.])\n fi\n \n-AC_ARG_ENABLE(64-bit-bfd,\n-[  --enable-64-bit-bfd     64-bit support (on hosts with narrower word sizes)],\n-[case \"${enableval}\" in\n-  yes)  want64=true  ;;\n-  no)   want64=false ;;\n-  *)    AC_MSG_ERROR(bad value ${enableval} for 64-bit-bfd option) ;;\n-esac],[want64=false])dnl\n+BFD_64_BIT\n+if test $enable_64_bit_bfd = yes ; then\n+  want64=true\n+else\n+  want64=false\n+fi\n \n AC_ARG_ENABLE(targets,\n [  --enable-targets        alternative target configurations],"
    },
    {
      "sha": "f4d1ba7d2b42e91e0d88b9d824c7dd046882cc62",
      "filename": "bfd/doc/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/bfd/doc/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/bfd/doc/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/doc/Makefile.in?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -109,6 +109,7 @@ target_triplet = @target@\n subdir = doc\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../config/acx.m4 \\\n+\t$(top_srcdir)/../config/bfd64.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/gettext-sister.m4 \\\n \t$(top_srcdir)/../config/jobserver.m4 \\"
    },
    {
      "sha": "d134f1a5765ea7ac541bcea09ab3ba3f7f763204",
      "filename": "config/bfd64.m4",
      "status": "added",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/config/bfd64.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/config/bfd64.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/config/bfd64.m4?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -0,0 +1,36 @@\n+dnl\n+dnl   Copyright (C) 2012-2022 Free Software Foundation, Inc.\n+dnl\n+dnl This file is free software; you can redistribute it and/or modify\n+dnl it under the terms of the GNU General Public License as published by\n+dnl the Free Software Foundation; either version 3 of the License, or\n+dnl (at your option) any later version.\n+dnl\n+dnl This program is distributed in the hope that it will be useful,\n+dnl but WITHOUT ANY WARRANTY; without even the implied warranty of\n+dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+dnl GNU General Public License for more details.\n+dnl\n+dnl You should have received a copy of the GNU General Public License\n+dnl along with this program; see the file COPYING3.  If not see\n+dnl <http://www.gnu.org/licenses/>.\n+dnl\n+\n+dnl See whether 64-bit bfd lib has been enabled.\n+AC_DEFUN([BFD_64_BIT], [dnl\n+AC_ARG_ENABLE(64-bit-bfd,\n+  AS_HELP_STRING([--enable-64-bit-bfd],\n+\t\t [64-bit support (on hosts with narrower word sizes)]),\n+  [AS_CASE([$enableval],\n+\t   [yes|no], [],\n+\t   [*], [AC_MSG_ERROR(bad value ${enableval} for 64-bit-bfd option)])],\n+  [enable_64_bit_bfd=no])\n+\n+dnl If the host is 64-bit, then 64-bit bfd is enabled automatically.\n+AS_IF([test \"x$enable_64_bit_bfd\" = \"xno\"], [dnl\n+  AC_CHECK_SIZEOF(void *)\n+  AS_IF([test \"x$ac_cv_sizeof_void_p\" = \"x8\"], [enable_64_bit_bfd=yes])\n+])\n+\n+AM_CONDITIONAL([ENABLE_BFD_64_BIT], [test \"x$enable_64_bit_bfd\" = \"xyes\"])\n+])"
    },
    {
      "sha": "3ed4a58d39f72a438be06050757b0db0cd1baa7a",
      "filename": "gdb/aclocal.m4",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/gdb/aclocal.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/gdb/aclocal.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aclocal.m4?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -201,6 +201,7 @@ AC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])\n \n m4_include([../config/acx.m4])\n m4_include([../config/ax_pthread.m4])\n+m4_include([../config/bfd64.m4])\n m4_include([../config/debuginfod.m4])\n m4_include([../config/depstand.m4])\n m4_include([../config/enable.m4])"
    },
    {
      "sha": "cd9f252eba176e384c7f6ae45917473db5642e0a",
      "filename": "gdb/config.in",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/gdb/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/gdb/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/config.in?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -685,9 +685,6 @@\n /* Define to 1 if the `setpgrp' function takes no argument. */\n #undef SETPGRP_VOID\n \n-/* The size of `long', as computed by sizeof. */\n-#undef SIZEOF_LONG\n-\n /* The size of `long long', as computed by sizeof. */\n #undef SIZEOF_LONG_LONG\n \n@@ -700,6 +697,9 @@\n /* The size of `unsigned __int128', as computed by sizeof. */\n #undef SIZEOF_UNSIGNED___INT128\n \n+/* The size of `void *', as computed by sizeof. */\n+#undef SIZEOF_VOID_P\n+\n /* If using the C implementation of alloca, define if you know the\n    direction of stack growth for your system; otherwise it will be\n    automatically deduced at runtime."
    },
    {
      "sha": "429eaebe5688a4b798a496f100f4dfe6e41c454d",
      "filename": "gdb/configure",
      "status": "modified",
      "additions": 67,
      "deletions": 56,
      "changes": 123,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/gdb/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/gdb/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -772,6 +772,8 @@ PKG_CONFIG_PATH\n PKG_CONFIG\n HAVE_NATIVE_GCORE_TARGET\n TARGET_OBS\n+ENABLE_BFD_64_BIT_FALSE\n+ENABLE_BFD_64_BIT_TRUE\n subdirs\n GDB_DATADIR\n DEBUGDIR\n@@ -6649,17 +6651,70 @@ esac\n fi\n \n \n-# Check whether to enable 64-bit support on 32-bit hosts\n # Check whether --enable-64-bit-bfd was given.\n if test \"${enable_64_bit_bfd+set}\" = set; then :\n-  enableval=$enable_64_bit_bfd; case \"${enableval}\" in\n-  yes)  want64=true  ;;\n-  no)   want64=false ;;\n-  *)    as_fn_error $? \"bad value ${enableval} for 64-bit-bfd option\" \"$LINENO\" 5 ;;\n+  enableval=$enable_64_bit_bfd; case $enableval in #(\n+  yes|no) :\n+     ;; #(\n+  *) :\n+    as_fn_error $? \"bad value ${enableval} for 64-bit-bfd option\" \"$LINENO\" 5 ;; #(\n+  *) :\n+     ;;\n esac\n else\n-  want64=false\n+  enable_64_bit_bfd=no\n+fi\n+\n+\n+if test \"x$enable_64_bit_bfd\" = \"xno\"; then :\n+    # The cast to long int works around a bug in the HP C Compiler\n+# version HP92453-01 B.11.11.23709.GP, which incorrectly rejects\n+# declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.\n+# This bug is HP SR number 8606223364.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking size of void *\" >&5\n+$as_echo_n \"checking size of void *... \" >&6; }\n+if ${ac_cv_sizeof_void_p+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if ac_fn_c_compute_int \"$LINENO\" \"(long int) (sizeof (void *))\" \"ac_cv_sizeof_void_p\"        \"$ac_includes_default\"; then :\n+\n+else\n+  if test \"$ac_cv_type_void_p\" = yes; then\n+     { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error 77 \"cannot compute sizeof (void *)\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+   else\n+     ac_cv_sizeof_void_p=0\n+   fi\n+fi\n+\n fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sizeof_void_p\" >&5\n+$as_echo \"$ac_cv_sizeof_void_p\" >&6; }\n+\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define SIZEOF_VOID_P $ac_cv_sizeof_void_p\n+_ACEOF\n+\n+\n+  if test \"x$ac_cv_sizeof_void_p\" = \"x8\"; then :\n+  enable_64_bit_bfd=yes\n+fi\n+\n+fi\n+\n+ if test \"x$enable_64_bit_bfd\" = \"xyes\"; then\n+  ENABLE_BFD_64_BIT_TRUE=\n+  ENABLE_BFD_64_BIT_FALSE='#'\n+else\n+  ENABLE_BFD_64_BIT_TRUE='#'\n+  ENABLE_BFD_64_BIT_FALSE=\n+fi\n+\n+\n \n # Provide defaults for some variables set by the per-host and per-target\n # configuration.\n@@ -6709,7 +6764,7 @@ fi\n     done\n \n     # Check whether this target needs 64-bit CORE_ADDR\n-    if test x${want64} = xfalse; then\n+    if test x${enable_64_bit_bfd} = xno; then\n       . ${srcdir}/../bfd/config.bfd\n     fi\n \n@@ -6722,55 +6777,7 @@ fi\n done\n \n if test x${all_targets} = xtrue; then\n-\n-  # We want all 64-bit targets if we either:\n-  #  - run on a 64-bit host  or\n-  #  - already require 64-bit support for some other target  or\n-  #  - the --enable-64-bit-bfd option was supplied\n-  # Otherwise we only support all 32-bit targets.\n-  #\n-  # NOTE: This test must be in sync with the corresponding\n-  #       tests in BFD!\n-\n-  if test x${want64} = xfalse; then\n-    # The cast to long int works around a bug in the HP C Compiler\n-# version HP92453-01 B.11.11.23709.GP, which incorrectly rejects\n-# declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.\n-# This bug is HP SR number 8606223364.\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking size of long\" >&5\n-$as_echo_n \"checking size of long... \" >&6; }\n-if ${ac_cv_sizeof_long+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  if ac_fn_c_compute_int \"$LINENO\" \"(long int) (sizeof (long))\" \"ac_cv_sizeof_long\"        \"$ac_includes_default\"; then :\n-\n-else\n-  if test \"$ac_cv_type_long\" = yes; then\n-     { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n-$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n-as_fn_error 77 \"cannot compute sizeof (long)\n-See \\`config.log' for more details\" \"$LINENO\" 5; }\n-   else\n-     ac_cv_sizeof_long=0\n-   fi\n-fi\n-\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sizeof_long\" >&5\n-$as_echo \"$ac_cv_sizeof_long\" >&6; }\n-\n-\n-\n-cat >>confdefs.h <<_ACEOF\n-#define SIZEOF_LONG $ac_cv_sizeof_long\n-_ACEOF\n-\n-\n-    if test \"x${ac_cv_sizeof_long}\" = \"x8\"; then\n-      want64=true\n-    fi\n-  fi\n-  if test x${want64} = xtrue; then\n+  if test x${enable_64_bit_bfd} = xyes; then\n     TARGET_OBS='$(ALL_TARGET_OBS) $(ALL_64_TARGET_OBS)'\n   else\n     TARGET_OBS='$(ALL_TARGET_OBS)'\n@@ -20126,6 +20133,10 @@ if test -z \"${MAINTAINER_MODE_TRUE}\" && test -z \"${MAINTAINER_MODE_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"MAINTAINER_MODE\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${ENABLE_BFD_64_BIT_TRUE}\" && test -z \"${ENABLE_BFD_64_BIT_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"ENABLE_BFD_64_BIT\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${HAVE_PYTHON_TRUE}\" && test -z \"${HAVE_PYTHON_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"HAVE_PYTHON\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"
    },
    {
      "sha": "13e880d59a99cf3b1f8b4b2dbb4ab3a6ba5263c7",
      "filename": "gdb/configure.ac",
      "status": "modified",
      "additions": 3,
      "deletions": 26,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/gdb/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/gdb/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.ac?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -165,14 +165,7 @@ AS_HELP_STRING([--enable-targets=TARGETS], [alternative target configurations]),\n   *)        enable_targets=$enableval ;;\n esac])\n \n-# Check whether to enable 64-bit support on 32-bit hosts\n-AC_ARG_ENABLE(64-bit-bfd,\n-AS_HELP_STRING([--enable-64-bit-bfd], [64-bit support (on hosts with narrower word sizes)]),\n-[case \"${enableval}\" in\n-  yes)  want64=true  ;;\n-  no)   want64=false ;;\n-  *)    AC_MSG_ERROR(bad value ${enableval} for 64-bit-bfd option) ;;\n-esac],[want64=false])dnl\n+BFD_64_BIT\n \n # Provide defaults for some variables set by the per-host and per-target\n # configuration.\n@@ -221,7 +214,7 @@ do\n     done\n \n     # Check whether this target needs 64-bit CORE_ADDR\n-    if test x${want64} = xfalse; then\n+    if test x${enable_64_bit_bfd} = xno; then\n       . ${srcdir}/../bfd/config.bfd\n     fi\n \n@@ -234,23 +227,7 @@ do\n done\n \n if test x${all_targets} = xtrue; then\n-\n-  # We want all 64-bit targets if we either:\n-  #  - run on a 64-bit host  or\n-  #  - already require 64-bit support for some other target  or\n-  #  - the --enable-64-bit-bfd option was supplied\n-  # Otherwise we only support all 32-bit targets.\n-  #\n-  # NOTE: This test must be in sync with the corresponding\n-  #       tests in BFD!\n-\n-  if test x${want64} = xfalse; then\n-    AC_CHECK_SIZEOF(long)\n-    if test \"x${ac_cv_sizeof_long}\" = \"x8\"; then\n-      want64=true\n-    fi\n-  fi\n-  if test x${want64} = xtrue; then\n+  if test x${enable_64_bit_bfd} = xyes; then\n     TARGET_OBS='$(ALL_TARGET_OBS) $(ALL_64_TARGET_OBS)'\n   else\n     TARGET_OBS='$(ALL_TARGET_OBS)'"
    },
    {
      "sha": "51c62a0da7fd13cc6ba24ad8c0c06da9446020fe",
      "filename": "ld/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/ld/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/ld/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/Makefile.in?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -112,6 +112,7 @@ subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../bfd/acinclude.m4 \\\n \t$(top_srcdir)/../bfd/warning.m4 $(top_srcdir)/../config/acx.m4 \\\n+\t$(top_srcdir)/../config/bfd64.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/enable.m4 \\\n \t$(top_srcdir)/../config/gettext-sister.m4 \\"
    },
    {
      "sha": "631ead7b2cab1a66c8856fb4ec071988d7957250",
      "filename": "ld/aclocal.m4",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/ld/aclocal.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/ld/aclocal.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/aclocal.m4?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -1188,6 +1188,7 @@ AC_SUBST([am__untar])\n m4_include([../bfd/acinclude.m4])\n m4_include([../bfd/warning.m4])\n m4_include([../config/acx.m4])\n+m4_include([../config/bfd64.m4])\n m4_include([../config/depstand.m4])\n m4_include([../config/enable.m4])\n m4_include([../config/gettext-sister.m4])"
    },
    {
      "sha": "f5c329c1f12af6deafb3096f2f11a8d56f3e733b",
      "filename": "ld/configure",
      "status": "modified",
      "additions": 117,
      "deletions": 97,
      "changes": 214,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/ld/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/ld/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/configure?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -686,6 +686,8 @@ install_as_default\n TARGET_SYSTEM_ROOT_DEFINE\n TARGET_SYSTEM_ROOT\n use_sysroot\n+ENABLE_BFD_64_BIT_FALSE\n+ENABLE_BFD_64_BIT_TRUE\n LARGEFILE_CPPFLAGS\n CXXCPP\n OTOOL64\n@@ -2097,52 +2099,6 @@ fi\n \n } # ac_fn_cxx_try_link\n \n-# ac_fn_c_check_decl LINENO SYMBOL VAR INCLUDES\n-# ---------------------------------------------\n-# Tests whether SYMBOL is declared in INCLUDES, setting cache variable VAR\n-# accordingly.\n-ac_fn_c_check_decl ()\n-{\n-  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n-  as_decl_name=`echo $2|sed 's/ *(.*//'`\n-  as_decl_use=`echo $2|sed -e 's/(/((/' -e 's/)/) 0&/' -e 's/,/) 0& (/g'`\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether $as_decl_name is declared\" >&5\n-$as_echo_n \"checking whether $as_decl_name is declared... \" >&6; }\n-if eval \\${$3+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-$4\n-int\n-main ()\n-{\n-#ifndef $as_decl_name\n-#ifdef __cplusplus\n-  (void) $as_decl_use;\n-#else\n-  (void) $as_decl_name;\n-#endif\n-#endif\n-\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_c_try_compile \"$LINENO\"; then :\n-  eval \"$3=yes\"\n-else\n-  eval \"$3=no\"\n-fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-fi\n-eval ac_res=\\$$3\n-\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n-$as_echo \"$ac_res\" >&6; }\n-  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n-\n-} # ac_fn_c_check_decl\n-\n # ac_fn_c_compute_int LINENO EXPR VAR INCLUDES\n # --------------------------------------------\n # Tries to find the compile-time value of EXPR in a program that includes\n@@ -2325,6 +2281,52 @@ rm -f conftest.val\n   as_fn_set_status $ac_retval\n \n } # ac_fn_c_compute_int\n+\n+# ac_fn_c_check_decl LINENO SYMBOL VAR INCLUDES\n+# ---------------------------------------------\n+# Tests whether SYMBOL is declared in INCLUDES, setting cache variable VAR\n+# accordingly.\n+ac_fn_c_check_decl ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  as_decl_name=`echo $2|sed 's/ *(.*//'`\n+  as_decl_use=`echo $2|sed -e 's/(/((/' -e 's/)/) 0&/' -e 's/,/) 0& (/g'`\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether $as_decl_name is declared\" >&5\n+$as_echo_n \"checking whether $as_decl_name is declared... \" >&6; }\n+if eval \\${$3+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+#ifndef $as_decl_name\n+#ifdef __cplusplus\n+  (void) $as_decl_use;\n+#else\n+  (void) $as_decl_name;\n+#endif\n+#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  eval \"$3=yes\"\n+else\n+  eval \"$3=no\"\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+eval ac_res=\\$$3\n+\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n+$as_echo \"$ac_res\" >&6; }\n+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n+\n+} # ac_fn_c_check_decl\n cat >config.log <<_ACEOF\n This file contains any messages produced by compilers while\n running configure, to aid debugging if configure makes a mistake.\n@@ -11452,7 +11454,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11455 \"configure\"\n+#line 11457 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11558,7 +11560,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11561 \"configure\"\n+#line 11563 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15200,17 +15202,72 @@ if test \"${enable_targets+set}\" = set; then :\n   *)        enable_targets=$enableval ;;\n esac\n fi\n+\n # Check whether --enable-64-bit-bfd was given.\n if test \"${enable_64_bit_bfd+set}\" = set; then :\n-  enableval=$enable_64_bit_bfd; case \"${enableval}\" in\n-  yes)  want64=true  ;;\n-  no)   want64=false ;;\n-  *)    as_fn_error $? \"bad value ${enableval} for 64-bit-bfd option\" \"$LINENO\" 5 ;;\n+  enableval=$enable_64_bit_bfd; case $enableval in #(\n+  yes|no) :\n+     ;; #(\n+  *) :\n+    as_fn_error $? \"bad value ${enableval} for 64-bit-bfd option\" \"$LINENO\" 5 ;; #(\n+  *) :\n+     ;;\n esac\n else\n-  want64=false\n+  enable_64_bit_bfd=no\n+fi\n+\n+\n+if test \"x$enable_64_bit_bfd\" = \"xno\"; then :\n+    # The cast to long int works around a bug in the HP C Compiler\n+# version HP92453-01 B.11.11.23709.GP, which incorrectly rejects\n+# declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.\n+# This bug is HP SR number 8606223364.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking size of void *\" >&5\n+$as_echo_n \"checking size of void *... \" >&6; }\n+if ${ac_cv_sizeof_void_p+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if ac_fn_c_compute_int \"$LINENO\" \"(long int) (sizeof (void *))\" \"ac_cv_sizeof_void_p\"        \"$ac_includes_default\"; then :\n+\n+else\n+  if test \"$ac_cv_type_void_p\" = yes; then\n+     { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error 77 \"cannot compute sizeof (void *)\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+   else\n+     ac_cv_sizeof_void_p=0\n+   fi\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sizeof_void_p\" >&5\n+$as_echo \"$ac_cv_sizeof_void_p\" >&6; }\n+\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define SIZEOF_VOID_P $ac_cv_sizeof_void_p\n+_ACEOF\n+\n+\n+  if test \"x$ac_cv_sizeof_void_p\" = \"x8\"; then :\n+  enable_64_bit_bfd=yes\n fi\n \n+fi\n+\n+ if test \"x$enable_64_bit_bfd\" = \"xyes\"; then\n+  ENABLE_BFD_64_BIT_TRUE=\n+  ENABLE_BFD_64_BIT_FALSE='#'\n+else\n+  ENABLE_BFD_64_BIT_TRUE='#'\n+  ENABLE_BFD_64_BIT_FALSE=\n+fi\n+\n+\n+\n \n # Check whether --with-sysroot was given.\n if test \"${with_sysroot+set}\" = set; then :\n@@ -16739,47 +16796,6 @@ all_emul_extras=\n all_libpath=\n TDIRS=\n \n-# If the host is 64-bit, then we enable 64-bit targets by default.\n-# This is consistent with what ../bfd/configure.ac does.\n-if test x${want64} = xfalse; then\n-  # The cast to long int works around a bug in the HP C Compiler\n-# version HP92453-01 B.11.11.23709.GP, which incorrectly rejects\n-# declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.\n-# This bug is HP SR number 8606223364.\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking size of void *\" >&5\n-$as_echo_n \"checking size of void *... \" >&6; }\n-if ${ac_cv_sizeof_void_p+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  if ac_fn_c_compute_int \"$LINENO\" \"(long int) (sizeof (void *))\" \"ac_cv_sizeof_void_p\"        \"$ac_includes_default\"; then :\n-\n-else\n-  if test \"$ac_cv_type_void_p\" = yes; then\n-     { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n-$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n-as_fn_error 77 \"cannot compute sizeof (void *)\n-See \\`config.log' for more details\" \"$LINENO\" 5; }\n-   else\n-     ac_cv_sizeof_void_p=0\n-   fi\n-fi\n-\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sizeof_void_p\" >&5\n-$as_echo \"$ac_cv_sizeof_void_p\" >&6; }\n-\n-\n-\n-cat >>confdefs.h <<_ACEOF\n-#define SIZEOF_VOID_P $ac_cv_sizeof_void_p\n-_ACEOF\n-\n-\n-  if test \"x${ac_cv_sizeof_void_p}\" = \"x8\"; then\n-    want64=true\n-  fi\n-fi\n-\n elf_list_options=false\n elf_shlib_list_options=false\n elf_plt_unwind_list_options=false\n@@ -16805,11 +16821,11 @@ do\n       EMUL=$targ_emul\n     fi\n \n-    if test x${want64} = xfalse; then\n+    if test x${enable_64_bit_bfd} = xno; then\n       . ${srcdir}/../bfd/config.bfd\n     fi\n \n-    if test x${want64} = xtrue; then\n+    if test x${enable_64_bit_bfd} = xyes; then\n       targ_extra_emuls=\"$targ_extra_emuls $targ64_extra_emuls\"\n       targ_extra_libpath=\"$targ_extra_libpath $targ64_extra_libpath\"\n     fi\n@@ -16962,7 +16978,7 @@ _ACEOF\n \n \n if test x${all_targets} = xtrue; then\n-  if test x${want64} = xtrue; then\n+  if test x${enable_64_bit_bfd} = xyes; then\n     EMULATION_OFILES='$(ALL_EMULATIONS) $(ALL_64_EMULATIONS)'\n     EMUL_EXTRA_OFILES='$(ALL_EMUL_EXTRA_OFILES) $(ALL_64_EMUL_EXTRA_OFILES)'\n   else\n@@ -17162,6 +17178,10 @@ if test -z \"${am__fastdepCXX_TRUE}\" && test -z \"${am__fastdepCXX_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"am__fastdepCXX\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${ENABLE_BFD_64_BIT_TRUE}\" && test -z \"${ENABLE_BFD_64_BIT_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"ENABLE_BFD_64_BIT\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${ENABLE_LIBCTF_TRUE}\" && test -z \"${ENABLE_LIBCTF_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"ENABLE_LIBCTF\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"
    },
    {
      "sha": "5e930ab6d3bc0096f88d14f7cf9720b8b7bce183",
      "filename": "ld/configure.ac",
      "status": "modified",
      "additions": 5,
      "deletions": 19,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/ld/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/ld/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/configure.ac?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -60,13 +60,8 @@ AC_ARG_ENABLE(targets,\n   no)       enable_targets= ;;\n   *)        enable_targets=$enableval ;;\n esac])dnl\n-AC_ARG_ENABLE(64-bit-bfd,\n-[  --enable-64-bit-bfd     64-bit support (on hosts with narrower word sizes)],\n-[case \"${enableval}\" in\n-  yes)  want64=true  ;;\n-  no)   want64=false ;;\n-  *)    AC_MSG_ERROR(bad value ${enableval} for 64-bit-bfd option) ;;\n-esac],[want64=false])dnl\n+\n+BFD_64_BIT\n \n AC_ARG_WITH(sysroot,\n [  --with-sysroot[=DIR] Search for usr/lib et al within DIR.],\n@@ -366,15 +361,6 @@ all_emul_extras=\n all_libpath=\n TDIRS=\n \n-# If the host is 64-bit, then we enable 64-bit targets by default.\n-# This is consistent with what ../bfd/configure.ac does.\n-if test x${want64} = xfalse; then\n-  AC_CHECK_SIZEOF(void *)\n-  if test \"x${ac_cv_sizeof_void_p}\" = \"x8\"; then\n-    want64=true\n-  fi\n-fi\n-\n elf_list_options=false\n elf_shlib_list_options=false\n elf_plt_unwind_list_options=false\n@@ -400,11 +386,11 @@ do\n       EMUL=$targ_emul\n     fi\n \n-    if test x${want64} = xfalse; then\n+    if test x${enable_64_bit_bfd} = xno; then\n       . ${srcdir}/../bfd/config.bfd\n     fi\n \n-    if test x${want64} = xtrue; then\n+    if test x${enable_64_bit_bfd} = xyes; then\n       targ_extra_emuls=\"$targ_extra_emuls $targ64_extra_emuls\"\n       targ_extra_libpath=\"$targ_extra_libpath $targ64_extra_libpath\"\n     fi\n@@ -539,7 +525,7 @@ AC_SUBST(TDIRS)\n AM_SUBST_NOTMAKE(TDIRS)\n \n if test x${all_targets} = xtrue; then\n-  if test x${want64} = xtrue; then\n+  if test x${enable_64_bit_bfd} = xyes; then\n     EMULATION_OFILES='$(ALL_EMULATIONS) $(ALL_64_EMULATIONS)'\n     EMUL_EXTRA_OFILES='$(ALL_EMUL_EXTRA_OFILES) $(ALL_64_EMUL_EXTRA_OFILES)'\n   else"
    },
    {
      "sha": "5d1704872f581535ecdfbd71510ef300ed525ad1",
      "filename": "opcodes/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/opcodes/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/opcodes/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/Makefile.in?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -114,6 +114,7 @@ subdir = .\n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n am__aclocal_m4_deps = $(top_srcdir)/../bfd/acinclude.m4 \\\n \t$(top_srcdir)/../bfd/warning.m4 $(top_srcdir)/../config/acx.m4 \\\n+\t$(top_srcdir)/../config/bfd64.m4 \\\n \t$(top_srcdir)/../config/depstand.m4 \\\n \t$(top_srcdir)/../config/gettext-sister.m4 \\\n \t$(top_srcdir)/../config/jobserver.m4 \\"
    },
    {
      "sha": "ac0d92925faa9ab71886e766a5411e51a782106d",
      "filename": "opcodes/aclocal.m4",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/opcodes/aclocal.m4",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/opcodes/aclocal.m4",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aclocal.m4?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -1170,6 +1170,7 @@ AC_SUBST([am__untar])\n m4_include([../bfd/acinclude.m4])\n m4_include([../bfd/warning.m4])\n m4_include([../config/acx.m4])\n+m4_include([../config/bfd64.m4])\n m4_include([../config/depstand.m4])\n m4_include([../config/gettext-sister.m4])\n m4_include([../config/jobserver.m4])"
    },
    {
      "sha": "4cd636e52edd5d872b302bc59702f9934b491335",
      "filename": "opcodes/config.in",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/opcodes/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/opcodes/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/config.in?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -80,6 +80,9 @@\n /* Define to the version of this package. */\n #undef PACKAGE_VERSION\n \n+/* The size of `void *', as computed by sizeof. */\n+#undef SIZEOF_VOID_P\n+\n /* Define to 1 if you have the ANSI C header files. */\n #undef STDC_HEADERS\n "
    },
    {
      "sha": "d3cef604c85a7f0cbf0fa0ca645c9f859e943169",
      "filename": "opcodes/configure",
      "status": "modified",
      "additions": 258,
      "deletions": 3,
      "changes": 261,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/opcodes/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/opcodes/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/configure?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -645,6 +645,8 @@ cgendir\n CGEN_MAINT_FALSE\n CGEN_MAINT_TRUE\n HDEFINES\n+ENABLE_BFD_64_BIT_FALSE\n+ENABLE_BFD_64_BIT_TRUE\n EXEEXT_FOR_BUILD\n CC_FOR_BUILD\n MSGMERGE\n@@ -806,6 +808,7 @@ enable_build_warnings\n enable_maintainer_mode\n enable_install_libbfd\n enable_nls\n+enable_64_bit_bfd\n enable_cgen_maint\n '\n       ac_precious_vars='build_alias\n@@ -1456,6 +1459,7 @@ Optional Features:\n                           sometimes confusing) to the casual installer\n   --enable-install-libbfd controls installation of libbfd and related headers\n   --disable-nls           do not use Native Language Support\n+  --enable-64-bit-bfd     64-bit support (on hosts with narrower word sizes)\n   --enable-cgen-maint=dir    build cgen generated files\n \n Optional Packages:\n@@ -1903,6 +1907,189 @@ $as_echo \"$ac_res\" >&6; }\n \n } # ac_fn_c_check_func\n \n+# ac_fn_c_compute_int LINENO EXPR VAR INCLUDES\n+# --------------------------------------------\n+# Tries to find the compile-time value of EXPR in a program that includes\n+# INCLUDES, setting VAR accordingly. Returns whether the value could be\n+# computed\n+ac_fn_c_compute_int ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  if test \"$cross_compiling\" = yes; then\n+    # Depending upon the size, compute the lo and hi bounds.\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(($2) >= 0)];\n+test_array [0] = 0;\n+return test_array [0];\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_lo=0 ac_mid=0\n+  while :; do\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(($2) <= $ac_mid)];\n+test_array [0] = 0;\n+return test_array [0];\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_hi=$ac_mid; break\n+else\n+  as_fn_arith $ac_mid + 1 && ac_lo=$as_val\n+\t\t\tif test $ac_lo -le $ac_mid; then\n+\t\t\t  ac_lo= ac_hi=\n+\t\t\t  break\n+\t\t\tfi\n+\t\t\tas_fn_arith 2 '*' $ac_mid + 1 && ac_mid=$as_val\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  done\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(($2) < 0)];\n+test_array [0] = 0;\n+return test_array [0];\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_hi=-1 ac_mid=-1\n+  while :; do\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(($2) >= $ac_mid)];\n+test_array [0] = 0;\n+return test_array [0];\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_lo=$ac_mid; break\n+else\n+  as_fn_arith '(' $ac_mid ')' - 1 && ac_hi=$as_val\n+\t\t\tif test $ac_mid -le $ac_hi; then\n+\t\t\t  ac_lo= ac_hi=\n+\t\t\t  break\n+\t\t\tfi\n+\t\t\tas_fn_arith 2 '*' $ac_mid && ac_mid=$as_val\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  done\n+else\n+  ac_lo= ac_hi=\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+# Binary search between lo and hi bounds.\n+while test \"x$ac_lo\" != \"x$ac_hi\"; do\n+  as_fn_arith '(' $ac_hi - $ac_lo ')' / 2 + $ac_lo && ac_mid=$as_val\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+static int test_array [1 - 2 * !(($2) <= $ac_mid)];\n+test_array [0] = 0;\n+return test_array [0];\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  ac_hi=$ac_mid\n+else\n+  as_fn_arith '(' $ac_mid ')' + 1 && ac_lo=$as_val\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+done\n+case $ac_lo in #((\n+?*) eval \"$3=\\$ac_lo\"; ac_retval=0 ;;\n+'') ac_retval=1 ;;\n+esac\n+  else\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+static long int longval () { return $2; }\n+static unsigned long int ulongval () { return $2; }\n+#include <stdio.h>\n+#include <stdlib.h>\n+int\n+main ()\n+{\n+\n+  FILE *f = fopen (\"conftest.val\", \"w\");\n+  if (! f)\n+    return 1;\n+  if (($2) < 0)\n+    {\n+      long int i = longval ();\n+      if (i != ($2))\n+\treturn 1;\n+      fprintf (f, \"%ld\", i);\n+    }\n+  else\n+    {\n+      unsigned long int i = ulongval ();\n+      if (i != ($2))\n+\treturn 1;\n+      fprintf (f, \"%lu\", i);\n+    }\n+  /* Do not output a trailing newline, as this causes \\r\\n confusion\n+     on some platforms.  */\n+  return ferror (f) || fclose (f) != 0;\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  echo >>conftest.val; read $3 <conftest.val; ac_retval=0\n+else\n+  ac_retval=1\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n+rm -f conftest.val\n+\n+  fi\n+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n+  as_fn_set_status $ac_retval\n+\n+} # ac_fn_c_compute_int\n+\n # ac_fn_c_check_decl LINENO SYMBOL VAR INCLUDES\n # ---------------------------------------------\n # Tests whether SYMBOL is declared in INCLUDES, setting cache variable VAR\n@@ -10848,7 +11035,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10851 \"configure\"\n+#line 11038 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -10954,7 +11141,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 10957 \"configure\"\n+#line 11144 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11883,6 +12070,70 @@ $as_echo \"$bfd_cv_build_exeext\" >&6; }\n   test x\"${bfd_cv_build_exeext}\" != xno && EXEEXT_FOR_BUILD=${bfd_cv_build_exeext}\n fi\n \n+# Check whether --enable-64-bit-bfd was given.\n+if test \"${enable_64_bit_bfd+set}\" = set; then :\n+  enableval=$enable_64_bit_bfd; case $enableval in #(\n+  yes|no) :\n+     ;; #(\n+  *) :\n+    as_fn_error $? \"bad value ${enableval} for 64-bit-bfd option\" \"$LINENO\" 5 ;; #(\n+  *) :\n+     ;;\n+esac\n+else\n+  enable_64_bit_bfd=no\n+fi\n+\n+\n+if test \"x$enable_64_bit_bfd\" = \"xno\"; then :\n+    # The cast to long int works around a bug in the HP C Compiler\n+# version HP92453-01 B.11.11.23709.GP, which incorrectly rejects\n+# declarations like `int a3[[(sizeof (unsigned char)) >= 0]];'.\n+# This bug is HP SR number 8606223364.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking size of void *\" >&5\n+$as_echo_n \"checking size of void *... \" >&6; }\n+if ${ac_cv_sizeof_void_p+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  if ac_fn_c_compute_int \"$LINENO\" \"(long int) (sizeof (void *))\" \"ac_cv_sizeof_void_p\"        \"$ac_includes_default\"; then :\n+\n+else\n+  if test \"$ac_cv_type_void_p\" = yes; then\n+     { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n+$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n+as_fn_error 77 \"cannot compute sizeof (void *)\n+See \\`config.log' for more details\" \"$LINENO\" 5; }\n+   else\n+     ac_cv_sizeof_void_p=0\n+   fi\n+fi\n+\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_sizeof_void_p\" >&5\n+$as_echo \"$ac_cv_sizeof_void_p\" >&6; }\n+\n+\n+\n+cat >>confdefs.h <<_ACEOF\n+#define SIZEOF_VOID_P $ac_cv_sizeof_void_p\n+_ACEOF\n+\n+\n+  if test \"x$ac_cv_sizeof_void_p\" = \"x8\"; then :\n+  enable_64_bit_bfd=yes\n+fi\n+\n+fi\n+\n+ if test \"x$enable_64_bit_bfd\" = \"xyes\"; then\n+  ENABLE_BFD_64_BIT_TRUE=\n+  ENABLE_BFD_64_BIT_FALSE='#'\n+else\n+  ENABLE_BFD_64_BIT_TRUE='#'\n+  ENABLE_BFD_64_BIT_FALSE=\n+fi\n+\n+\n \n \n \n@@ -12358,7 +12609,7 @@ if test x${all_targets} = xfalse ; then\n \n else\t# all_targets is true\n     archdefs=-DARCH_all\n-    if grep '#define BFD_ARCH_SIZE 64' ../bfd/bfd-in3.h > /dev/null; then\n+    if test \"$enable_64_bit_bfd\" = \"yes\" ; then\n \tBFD_MACHINES='$(ALL32_MACHINES) $(ALL64_MACHINES)'\n     else\n \tBFD_MACHINES='$(ALL32_MACHINES)'\n@@ -12511,6 +12762,10 @@ if test -z \"${INSTALL_LIBBFD_TRUE}\" && test -z \"${INSTALL_LIBBFD_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"INSTALL_LIBBFD\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${ENABLE_BFD_64_BIT_TRUE}\" && test -z \"${ENABLE_BFD_64_BIT_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"ENABLE_BFD_64_BIT\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${CGEN_MAINT_TRUE}\" && test -z \"${CGEN_MAINT_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"CGEN_MAINT\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"
    },
    {
      "sha": "ccf4926678e43dc74bedc9e99c58f2dd05665935",
      "filename": "opcodes/configure.ac",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1d5269c994bf4af088b1a9d0ed39825541623a99/opcodes/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1d5269c994bf4af088b1a9d0ed39825541623a99/opcodes/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/configure.ac?ref=1d5269c994bf4af088b1a9d0ed39825541623a99",
      "patch": "@@ -93,6 +93,7 @@ AM_PO_SUBDIRS\n . ${srcdir}/../bfd/configure.host\n \n BFD_CC_FOR_BUILD\n+BFD_64_BIT\n \n AC_SUBST(HDEFINES)\n AC_PROG_INSTALL\n@@ -380,7 +381,7 @@ if test x${all_targets} = xfalse ; then\n \n else\t# all_targets is true\n     archdefs=-DARCH_all\n-    if grep '#define BFD_ARCH_SIZE 64' ../bfd/bfd-in3.h > /dev/null; then\n+    if test \"$enable_64_bit_bfd\" = \"yes\" ; then\n \tBFD_MACHINES='$(ALL32_MACHINES) $(ALL64_MACHINES)'\n     else\n \tBFD_MACHINES='$(ALL32_MACHINES)'"
    }
  ]
}