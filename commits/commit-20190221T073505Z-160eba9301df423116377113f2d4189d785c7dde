{
  "sha": "160eba9301df423116377113f2d4189d785c7dde",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTYwZWJhOTMwMWRmNDIzMTE2Mzc3MTEzZjJkNDE4OWQ3ODVjN2RkZQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-02-21T07:11:47Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-02-21T07:35:05Z"
    },
    "message": "PowerPC __tls_get_addr arg parsing\n\nThe syntax we ended up with for -m32 -fPIC calls to __tls_get_addr is\nrather weird.\n    bl __tls_get_addr+0x8000(gd0@tlsgd)@plt\nThis came about by accident, probably due to requiring the arg reloc\nbefore the call reloc.\n\nOf course the @plt really belongs with __tls_get_addr since it affects\nthe call rather than the call arg, and it isn't a great deal of\ntrouble to ensure the relocs are emitted in the correct order.  This\npatch supports a newer syntax, like so:\n    bl __tls_get_addr+0x8000@plt(gd0@tlsgd)\n\ngas/\n\t* config/tc-ppc.c (parse_tls_arg): New function, extracted..\n\t(md_assembler): ..from here.  Call it after parsing other\n\tsuffix modifiers too.\nld/\n\t* testsuite/ld-powerpc/tls32.s: Test new @plt syntax.",
    "tree": {
      "sha": "4d7ea53d3c4c1622c7b8caeec879c639690c7a1d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4d7ea53d3c4c1622c7b8caeec879c639690c7a1d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/160eba9301df423116377113f2d4189d785c7dde",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/160eba9301df423116377113f2d4189d785c7dde",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/160eba9301df423116377113f2d4189d785c7dde",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/160eba9301df423116377113f2d4189d785c7dde/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "56b80d4c4c24c6acacad15530a3a7b483b6e0f3f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/56b80d4c4c24c6acacad15530a3a7b483b6e0f3f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/56b80d4c4c24c6acacad15530a3a7b483b6e0f3f"
    }
  ],
  "stats": {
    "total": 95,
    "additions": 54,
    "deletions": 41
  },
  "files": [
    {
      "sha": "35d85a4520cba50ba71d498d5efccecae51f2716",
      "filename": "gas/config/tc-ppc.c",
      "status": "modified",
      "additions": 52,
      "deletions": 40,
      "changes": 92,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/160eba9301df423116377113f2d4189d785c7dde/gas/config/tc-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/160eba9301df423116377113f2d4189d785c7dde/gas/config/tc-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-ppc.c?ref=160eba9301df423116377113f2d4189d785c7dde",
      "patch": "@@ -2999,6 +2999,43 @@ fixup_size (bfd_reloc_code_real_type reloc, bfd_boolean *pc_relative)\n   return size;\n }\n \n+/* If we have parsed a call to __tls_get_addr, parse an argument like\n+   (gd0@tlsgd).  *STR is the leading parenthesis on entry.  If an arg\n+   is successfully parsed, *STR is updated past the trailing\n+   parenthesis and trailing white space, and *TLS_FIX contains the\n+   reloc and arg expression.  */\n+\n+static int\n+parse_tls_arg (char **str, const expressionS *exp, struct ppc_fixup *tls_fix)\n+{\n+  const char *sym_name = S_GET_NAME (exp->X_add_symbol);\n+  if (sym_name[0] == '.')\n+    ++sym_name;\n+\n+  tls_fix->reloc = BFD_RELOC_NONE;\n+  if (strcasecmp (sym_name, \"__tls_get_addr\") == 0)\n+    {\n+      char *hold = input_line_pointer;\n+      input_line_pointer = *str + 1;\n+      expression (&tls_fix->exp);\n+      if (tls_fix->exp.X_op == O_symbol)\n+\t{\n+\t  if (strncasecmp (input_line_pointer, \"@tlsgd)\", 7) == 0)\n+\t    tls_fix->reloc = BFD_RELOC_PPC_TLSGD;\n+\t  else if (strncasecmp (input_line_pointer, \"@tlsld)\", 7) == 0)\n+\t    tls_fix->reloc = BFD_RELOC_PPC_TLSLD;\n+\t  if (tls_fix->reloc != BFD_RELOC_NONE)\n+\t    {\n+\t      input_line_pointer += 7;\n+\t      SKIP_WHITESPACE ();\n+\t      *str = input_line_pointer;\n+\t    }\n+\t}\n+      input_line_pointer = hold;\n+    }\n+  return tls_fix->reloc != BFD_RELOC_NONE;\n+}\n+\n /* This routine is called for each instruction to be assembled.  */\n \n void\n@@ -3388,47 +3425,12 @@ md_assemble (char *str)\n \t{\n \t  bfd_reloc_code_real_type reloc = BFD_RELOC_NONE;\n #ifdef OBJ_ELF\n-\t  if (ex.X_op == O_symbol && str[0] == '(')\n+\t  /* Look for a __tls_get_addr arg using the insane old syntax.  */\n+\t  if (ex.X_op == O_symbol && *str == '(' && fc < MAX_INSN_FIXUPS\n+\t      && parse_tls_arg (&str, &ex, &fixups[fc]))\n \t    {\n-\t      const char *sym_name = S_GET_NAME (ex.X_add_symbol);\n-\t      if (sym_name[0] == '.')\n-\t\t++sym_name;\n-\n-\t      if (strcasecmp (sym_name, \"__tls_get_addr\") == 0)\n-\t\t{\n-\t\t  expressionS tls_exp;\n-\n-\t\t  hold = input_line_pointer;\n-\t\t  input_line_pointer = str + 1;\n-\t\t  expression (&tls_exp);\n-\t\t  if (tls_exp.X_op == O_symbol)\n-\t\t    {\n-\t\t      reloc = BFD_RELOC_NONE;\n-\t\t      if (strncasecmp (input_line_pointer, \"@tlsgd)\", 7) == 0)\n-\t\t\t{\n-\t\t\t  reloc = BFD_RELOC_PPC_TLSGD;\n-\t\t\t  input_line_pointer += 7;\n-\t\t\t}\n-\t\t      else if (strncasecmp (input_line_pointer, \"@tlsld)\", 7) == 0)\n-\t\t\t{\n-\t\t\t  reloc = BFD_RELOC_PPC_TLSLD;\n-\t\t\t  input_line_pointer += 7;\n-\t\t\t}\n-\t\t      if (reloc != BFD_RELOC_NONE)\n-\t\t\t{\n-\t\t\t  SKIP_WHITESPACE ();\n-\t\t\t  str = input_line_pointer;\n-\n-\t\t\t  if (fc >= MAX_INSN_FIXUPS)\n-\t\t\t    as_fatal (_(\"too many fixups\"));\n-\t\t\t  fixups[fc].exp = tls_exp;\n-\t\t\t  fixups[fc].opindex = *opindex_ptr;\n-\t\t\t  fixups[fc].reloc = reloc;\n-\t\t\t  ++fc;\n-\t\t\t}\n-\t\t    }\n-\t\t  input_line_pointer = hold;\n-\t\t}\n+\t      fixups[fc].opindex = *opindex_ptr;\n+\t      ++fc;\n \t    }\n \n \t  if ((reloc = ppc_elf_suffix (&str, &ex)) != BFD_RELOC_NONE)\n@@ -3703,6 +3705,16 @@ md_assemble (char *str)\n \t\t  break;\n \t\t}\n \t    }\n+\n+\t  /* Look for a __tls_get_addr arg after any __tls_get_addr\n+\t     modifiers like @plt.  This fixup must be emitted before\n+\t     the usual call fixup.  */\n+\t  if (ex.X_op == O_symbol && *str == '(' && fc < MAX_INSN_FIXUPS\n+\t      && parse_tls_arg (&str, &ex, &fixups[fc]))\n+\t    {\n+\t      fixups[fc].opindex = *opindex_ptr;\n+\t      ++fc;\n+\t    }\n #endif\n \n \t  /* We need to generate a fixup for this expression.  */"
    },
    {
      "sha": "2893ad2103af3821e266d5af389f1272659ac1f7",
      "filename": "ld/testsuite/ld-powerpc/tls32.s",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/160eba9301df423116377113f2d4189d785c7dde/ld/testsuite/ld-powerpc/tls32.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/160eba9301df423116377113f2d4189d785c7dde/ld/testsuite/ld-powerpc/tls32.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/tls32.s?ref=160eba9301df423116377113f2d4189d785c7dde",
      "patch": "@@ -62,7 +62,8 @@ _start:\n #LD\n  addi 3,31,ld0@got@tlsld\t#R_PPC_GOT_TLSLD16\tld0\n  .ifdef TLSMARK\n- bl __tls_get_addr+0x8000(ld0@tlsld)@plt #R_PPC_TLSLD\tld0\n+#exercise saner new syntax with @plt before the arg\n+ bl __tls_get_addr+0x8000@plt(ld0@tlsld) #R_PPC_TLSLD\tld0\n \t\t\t\t#R_PPC_PLTREL24\t\t__tls_get_addr+0x8000\n  .else\n  bl __tls_get_addr+0x8000@plt\t#R_PPC_PLTREL24\t\t__tls_get_addr+0x8000"
    }
  ]
}