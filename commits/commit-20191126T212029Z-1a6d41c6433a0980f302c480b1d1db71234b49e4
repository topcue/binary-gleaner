{
  "sha": "1a6d41c6433a0980f302c480b1d1db71234b49e4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWE2ZDQxYzY0MzNhMDk4MGYzMDJjNDgwYjFkMWRiNzEyMzRiNDllNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-11-15T23:49:17Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-11-26T21:20:29Z"
    },
    "message": "Add add_internal_function overload\n\nadd_internal_function sets a command destroyer that frees the doc\nstring.  However, many callers do not pass in an allocated doc string.\n\nThis adds a new overload to clearly differentiate the two cases,\nfixing the latent bug.\n\ngdb/ChangeLog\n2019-11-26  Tom Tromey  <tom@tromey.com>\n\n\t* value.h (add_internal_function): Add new overload.  Move\n\tdocumentation from value.h.\n\t* value.c (do_add_internal_function): New function.\n\t(add_internal_function): Use it.  Add new overload.\n\t(function_destroyer): Don't free doc.\n\t* python/py-function.c (fnpy_init): Update.\n\nChange-Id: I3f6df925bc6b3e1bccbad9eeebc487b908bb5a2a",
    "tree": {
      "sha": "d751d01c179f3b3d40ca503d3a73a11056177536",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d751d01c179f3b3d40ca503d3a73a11056177536"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1a6d41c6433a0980f302c480b1d1db71234b49e4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a6d41c6433a0980f302c480b1d1db71234b49e4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1a6d41c6433a0980f302c480b1d1db71234b49e4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a6d41c6433a0980f302c480b1d1db71234b49e4/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8318f3c337cf46ee6309b4a7f06f3934fc94b4bd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8318f3c337cf46ee6309b4a7f06f3934fc94b4bd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8318f3c337cf46ee6309b4a7f06f3934fc94b4bd"
    }
  ],
  "stats": {
    "total": 67,
    "additions": 54,
    "deletions": 13
  },
  "files": [
    {
      "sha": "3d8d582d651fb5c99c878af8a1d9cb6dc9c0e0da",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a6d41c6433a0980f302c480b1d1db71234b49e4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a6d41c6433a0980f302c480b1d1db71234b49e4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1a6d41c6433a0980f302c480b1d1db71234b49e4",
      "patch": "@@ -1,3 +1,12 @@\n+2019-11-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* value.h (add_internal_function): Add new overload.  Move\n+\tdocumentation from value.h.\n+\t* value.c (do_add_internal_function): New function.\n+\t(add_internal_function): Use it.  Add new overload.\n+\t(function_destroyer): Don't free doc.\n+\t* python/py-function.c (fnpy_init): Update.\n+\n 2019-11-26  Tom Tromey  <tom@tromey.com>\n \n \t* python/py-cmd.c (cmdpy_destroyer): Don't free \"doc\"."
    },
    {
      "sha": "1c4588780e241ead98411c04435b7a48ada3cf78",
      "filename": "gdb/python/py-function.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a6d41c6433a0980f302c480b1d1db71234b49e4/gdb/python/py-function.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a6d41c6433a0980f302c480b1d1db71234b49e4/gdb/python/py-function.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-function.c?ref=1a6d41c6433a0980f302c480b1d1db71234b49e4",
      "patch": "@@ -127,7 +127,7 @@ fnpy_init (PyObject *self, PyObject *args, PyObject *kwds)\n   if (! docstring)\n     docstring.reset (xstrdup (_(\"This function is not documented.\")));\n \n-  add_internal_function (name, docstring.release (), fnpy_call,\n+  add_internal_function (name, std::move (docstring), fnpy_call,\n \t\t\t self_ref.release ());\n   return 0;\n }"
    },
    {
      "sha": "8e22ac7f8c1bce79605e7679ea2a4a3d5d214314",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 28,
      "deletions": 9,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a6d41c6433a0980f302c480b1d1db71234b49e4/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a6d41c6433a0980f302c480b1d1db71234b49e4/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=1a6d41c6433a0980f302c480b1d1db71234b49e4",
      "patch": "@@ -2426,17 +2426,13 @@ static void\n function_destroyer (struct cmd_list_element *self, void *ignore)\n {\n   xfree ((char *) self->name);\n-  xfree ((char *) self->doc);\n }\n \n-/* Add a new internal function.  NAME is the name of the function; DOC\n-   is a documentation string describing the function.  HANDLER is\n-   called when the function is invoked.  COOKIE is an arbitrary\n-   pointer which is passed to HANDLER and is intended for \"user\n-   data\".  */\n-void\n-add_internal_function (const char *name, const char *doc,\n-\t\t       internal_function_fn handler, void *cookie)\n+/* Helper function that does the work for add_internal_function.  */\n+\n+static struct cmd_list_element *\n+do_add_internal_function (const char *name, const char *doc,\n+\t\t\t  internal_function_fn handler, void *cookie)\n {\n   struct cmd_list_element *cmd;\n   struct internal_function *ifn;\n@@ -2448,6 +2444,29 @@ add_internal_function (const char *name, const char *doc,\n   cmd = add_cmd (xstrdup (name), no_class, function_command, (char *) doc,\n \t\t &functionlist);\n   cmd->destroyer = function_destroyer;\n+\n+  return cmd;\n+}\n+\n+/* See value.h.  */\n+\n+void\n+add_internal_function (const char *name, const char *doc,\n+\t\t       internal_function_fn handler, void *cookie)\n+{\n+  do_add_internal_function (name, doc, handler, cookie);\n+}\n+\n+/* See value.h.  */\n+\n+void\n+add_internal_function (const char *name, gdb::unique_xmalloc_ptr<char> &&doc,\n+\t\t       internal_function_fn handler, void *cookie)\n+{\n+  struct cmd_list_element *cmd\n+    = do_add_internal_function (name, doc.get (), handler, cookie);\n+  doc.release ();\n+  cmd->doc_allocated = 1;\n }\n \n /* Update VALUE before discarding OBJFILE.  COPIED_TYPES is used to"
    },
    {
      "sha": "fdef835f8d749644fc5aca1e85235bb12757edd7",
      "filename": "gdb/value.h",
      "status": "modified",
      "additions": 16,
      "deletions": 3,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a6d41c6433a0980f302c480b1d1db71234b49e4/gdb/value.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a6d41c6433a0980f302c480b1d1db71234b49e4/gdb/value.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.h?ref=1a6d41c6433a0980f302c480b1d1db71234b49e4",
      "patch": "@@ -1165,9 +1165,22 @@ typedef struct value *(*internal_function_fn) (struct gdbarch *gdbarch,\n \t\t\t\t\t       int argc,\n \t\t\t\t\t       struct value **argv);\n \n-void add_internal_function (const char *name, const char *doc,\n-\t\t\t    internal_function_fn handler,\n-\t\t\t    void *cookie);\n+/* Add a new internal function.  NAME is the name of the function; DOC\n+   is a documentation string describing the function.  HANDLER is\n+   called when the function is invoked.  COOKIE is an arbitrary\n+   pointer which is passed to HANDLER and is intended for \"user\n+   data\".  */\n+\n+extern void add_internal_function (const char *name, const char *doc,\n+\t\t\t\t   internal_function_fn handler,\n+\t\t\t\t   void *cookie);\n+\n+/* This overload takes an allocated documentation string.  */\n+\n+extern void add_internal_function (const char *name,\n+\t\t\t\t   gdb::unique_xmalloc_ptr<char> &&doc,\n+\t\t\t\t   internal_function_fn handler,\n+\t\t\t\t   void *cookie);\n \n struct value *call_internal_function (struct gdbarch *gdbarch,\n \t\t\t\t      const struct language_defn *language,"
    }
  ]
}