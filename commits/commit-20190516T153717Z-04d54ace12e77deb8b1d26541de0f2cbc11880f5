{
  "sha": "04d54ace12e77deb8b1d26541de0f2cbc11880f5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDRkNTRhY2UxMmU3N2RlYjhiMWQyNjU0MWRlMGYyY2JjMTE4ODBmNQ==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T13:04:35Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:37:17Z"
    },
    "message": "[PATCH 41/57][Arm][OBJDUMP] Add support for MVE instructions: vld[24] and vst[24]\n\nopcodes/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\t    Michael Collison <michael.collison@arm.com>\n\n\t* arm-dis.c (enum mve_instructions): Add new instructions.\n\t(enum mve_unpredictable): Add new reasons.\n\t(is_mve_encoding_conflict): Handle new instructions.\n\t(is_mve_unpredictable): Likewise.\n\t(mve_opcodes): Add new instructions.\n\t(print_mve_unpredictable): Handle new reasons.\n\t(print_mve_register_blocks): New print function.\n\t(print_mve_size): Handle new instructions.\n\t(print_insn_mve): Likewise.",
    "tree": {
      "sha": "45c3f5926dabfcf39269956dff77d505a1a3ba8d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/45c3f5926dabfcf39269956dff77d505a1a3ba8d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/04d54ace12e77deb8b1d26541de0f2cbc11880f5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/04d54ace12e77deb8b1d26541de0f2cbc11880f5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/04d54ace12e77deb8b1d26541de0f2cbc11880f5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/04d54ace12e77deb8b1d26541de0f2cbc11880f5/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9743db035e9bc256b5accdcbdecd7d1e9b41d4be",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9743db035e9bc256b5accdcbdecd7d1e9b41d4be",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9743db035e9bc256b5accdcbdecd7d1e9b41d4be"
    }
  ],
  "stats": {
    "total": 191,
    "additions": 191,
    "deletions": 0
  },
  "files": [
    {
      "sha": "25a86e2ffdb6f7d2fbee0e161e15d2e3be396e7e",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/04d54ace12e77deb8b1d26541de0f2cbc11880f5/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/04d54ace12e77deb8b1d26541de0f2cbc11880f5/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=04d54ace12e77deb8b1d26541de0f2cbc11880f5",
      "patch": "@@ -1,3 +1,16 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Michael Collison <michael.collison@arm.com>\n+\n+\t* arm-dis.c (enum mve_instructions): Add new instructions.\n+\t(enum mve_unpredictable): Add new reasons.\n+\t(is_mve_encoding_conflict): Handle new instructions.\n+\t(is_mve_unpredictable): Likewise.\n+\t(mve_opcodes): Add new instructions.\n+\t(print_mve_unpredictable): Handle new reasons.\n+\t(print_mve_register_blocks): New print function.\n+\t(print_mve_size): Handle new instructions.\n+\t(print_insn_mve): Likewise.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \t    Michael Collison <michael.collison@arm.com>\n "
    },
    {
      "sha": "8ebf2278efd067e1f287aaa30c1e89c37d84538c",
      "filename": "opcodes/arm-dis.c",
      "status": "modified",
      "additions": 178,
      "deletions": 0,
      "changes": 178,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/04d54ace12e77deb8b1d26541de0f2cbc11880f5/opcodes/arm-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/04d54ace12e77deb8b1d26541de0f2cbc11880f5/opcodes/arm-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/arm-dis.c?ref=04d54ace12e77deb8b1d26541de0f2cbc11880f5",
      "patch": "@@ -98,6 +98,10 @@ enum mve_instructions\n   MVE_VHSUB_T1,\n   MVE_VHSUB_T2,\n   MVE_VRHADD,\n+  MVE_VLD2,\n+  MVE_VLD4,\n+  MVE_VST2,\n+  MVE_VST4,\n   MVE_NONE\n };\n \n@@ -110,6 +114,12 @@ enum mve_unpredictable\n   UNPRED_R13,\t\t\t/* Unpredictable because r13 (sp) or\n \t\t\t\t   r15 (sp) used.  */\n   UNPRED_R15,\t\t\t/* Unpredictable because r15 (pc) is used.  */\n+  UNPRED_Q_GT_4,\t\t/* Unpredictable because\n+\t\t\t\t   vec reg start > 4 (vld4/st4).  */\n+  UNPRED_Q_GT_6,\t\t/* Unpredictable because\n+\t\t\t\t   vec reg start > 6 (vld2/st2).  */\n+  UNPRED_R13_AND_WB,\t\t/* Unpredictable becase gp reg = r13\n+\t\t\t\t   and WB bit = 1.  */\n   UNPRED_NONE\t\t\t/* No unpredictable behavior.  */\n };\n \n@@ -1823,7 +1833,11 @@ static const struct opcode32 neon_opcodes[] =\n    %n\t\t\tprint vector comparison code for predicated instruction\n    %v\t\t\tprint vector predicate for instruction in predicated\n \t\t\tblock\n+   %w\t\t\tprint writeback mode for MVE v{st,ld}[24]\n+   %B\t\t\tprint v{st,ld}[24] any one operands\n+\n    %<bitfield>r\t\tprint as an ARM register\n+   %<bitfield>d\t\tprint the bitfield in decimal\n    %<bitfield>Q\t\tprint as a MVE Q register\n    %<bitfield>Z\t\tas %<>r but r15 is ZR instead of PC and r13 is\n \t\t\tUNPREDICTABLE\n@@ -1997,6 +2011,42 @@ static const struct mopcode32 mve_opcodes[] =\n    0xef000140, 0xef811f51,\n    \"vrhadd%v.%u%20-21s\\t%13-15,22Q, %17-19,7Q, %1-3,5Q\"},\n \n+  /* Vector VLD2.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VLD2,\n+   0xfc901e00, 0xff901e5f,\n+   \"vld2%5d.%7-8s\\t%B, [%16-19r]%w\"},\n+\n+  /* Vector VLD4.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VLD4,\n+   0xfc901e01, 0xff901e1f,\n+   \"vld4%5-6d.%7-8s\\t%B, [%16-19r]%w\"},\n+\n+  /* Vector VST2 no writeback.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VST2,\n+   0xfc801e00, 0xffb01e5f,\n+   \"vst2%5d.%7-8s\\t%B, [%16-19r]\"},\n+\n+  /* Vector VST2 writeback.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VST2,\n+   0xfca01e00, 0xffb01e5f,\n+   \"vst2%5d.%7-8s\\t%B, [%16-19r]!\"},\n+\n+  /* Vector VST4 no writeback.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VST4,\n+   0xfc801e01, 0xffb01e1f,\n+   \"vst4%5-6d.%7-8s\\t%B, [%16-19r]\"},\n+\n+  /* Vector VST4 writeback.  */\n+  {ARM_FEATURE_COPROC (FPU_MVE),\n+   MVE_VST4,\n+   0xfca01e01, 0xffb01e1f,\n+   \"vst4%5-6d.%7-8s\\t%B, [%16-19r]!\"},\n+\n   {ARM_FEATURE_CORE_LOW (0),\n    MVE_NONE,\n    0x00000000, 0x00000000, 0}\n@@ -4015,6 +4065,15 @@ is_mve_encoding_conflict (unsigned long given,\n       else\n \treturn FALSE;\n \n+    case MVE_VLD2:\n+    case MVE_VLD4:\n+    case MVE_VST2:\n+    case MVE_VST4:\n+      if (arm_decode_field (given, 7, 8) == 3)\n+\treturn TRUE;\n+      else\n+\treturn FALSE;\n+\n     default:\n       return FALSE;\n \n@@ -4132,6 +4191,58 @@ is_mve_unpredictable (unsigned long given, enum mve_instructions matched_insn,\n \treturn FALSE;\n       }\n \n+    case MVE_VLD2:\n+    case MVE_VST2:\n+      {\n+\tunsigned long rn = arm_decode_field (given, 16, 19);\n+\n+\tif ((rn == 0xd) && (arm_decode_field (given, 21, 21) == 1))\n+\t  {\n+\t    *unpredictable_code = UNPRED_R13_AND_WB;\n+\t    return TRUE;\n+\t  }\n+\n+\tif (rn == 0xf)\n+\t  {\n+\t    *unpredictable_code = UNPRED_R15;\n+\t    return TRUE;\n+\t  }\n+\n+\tif (arm_decode_field_multiple (given, 13, 15, 22, 22) > 6)\n+\t  {\n+\t    *unpredictable_code = UNPRED_Q_GT_6;\n+\t    return TRUE;\n+\t  }\n+\telse\n+\t  return FALSE;\n+      }\n+\n+    case MVE_VLD4:\n+    case MVE_VST4:\n+      {\n+\tunsigned long rn = arm_decode_field (given, 16, 19);\n+\n+\tif ((rn == 0xd) && (arm_decode_field (given, 21, 21) == 1))\n+\t  {\n+\t    *unpredictable_code = UNPRED_R13_AND_WB;\n+\t    return TRUE;\n+\t  }\n+\n+\tif (rn == 0xf)\n+\t  {\n+\t    *unpredictable_code = UNPRED_R15;\n+\t    return TRUE;\n+\t  }\n+\n+\tif (arm_decode_field_multiple (given, 13, 15, 22, 22) > 4)\n+\t  {\n+\t    *unpredictable_code = UNPRED_Q_GT_4;\n+\t    return TRUE;\n+\t  }\n+\telse\n+\t  return FALSE;\n+      }\n+\n     default:\n       return FALSE;\n     }\n@@ -4185,11 +4296,61 @@ print_mve_unpredictable (struct disassemble_info *info,\n       func (stream, \"use of r15 (pc)\");\n       break;\n \n+    case UNPRED_Q_GT_4:\n+      func (stream, \"start register block > r4\");\n+      break;\n+\n+    case UNPRED_Q_GT_6:\n+      func (stream, \"start register block > r6\");\n+      break;\n+\n+    case UNPRED_R13_AND_WB:\n+      func (stream, \"use of r13 and write back\");\n+      break;\n+\n     case UNPRED_NONE:\n       break;\n     }\n }\n \n+/* Print register block operand for mve vld2/vld4/vst2/vld4.  */\n+\n+static void\n+print_mve_register_blocks (struct disassemble_info *info,\n+\t\t\t   unsigned long given,\n+\t\t\t   enum mve_instructions matched_insn)\n+{\n+  void *stream = info->stream;\n+  fprintf_ftype func = info->fprintf_func;\n+\n+  unsigned long q_reg_start = arm_decode_field_multiple (given,\n+\t\t\t\t\t\t\t 13, 15,\n+\t\t\t\t\t\t\t 22, 22);\n+  switch (matched_insn)\n+    {\n+    case MVE_VLD2:\n+    case MVE_VST2:\n+      if (q_reg_start <= 6)\n+\tfunc (stream, \"{q%ld, q%ld}\", q_reg_start, q_reg_start + 1);\n+      else\n+\tfunc (stream, \"<illegal reg q%ld>\", q_reg_start);\n+      break;\n+\n+    case MVE_VLD4:\n+    case MVE_VST4:\n+      if (q_reg_start <= 4)\n+\tfunc (stream, \"{q%ld, q%ld, q%ld, q%ld}\", q_reg_start,\n+\t      q_reg_start + 1, q_reg_start + 2,\n+\t      q_reg_start + 3);\n+      else\n+\tfunc (stream, \"<illegal reg q%ld>\", q_reg_start);\n+      break;\n+\n+    default:\n+      break;\n+    }\n+}\n+\n static void\n print_instruction_predicate (struct disassemble_info *info)\n {\n@@ -4222,13 +4383,17 @@ print_mve_size (struct disassemble_info *info,\n     case MVE_VHADD_T2:\n     case MVE_VHSUB_T1:\n     case MVE_VHSUB_T2:\n+    case MVE_VLD2:\n+    case MVE_VLD4:\n     case MVE_VPT_VEC_T1:\n     case MVE_VPT_VEC_T2:\n     case MVE_VPT_VEC_T3:\n     case MVE_VPT_VEC_T4:\n     case MVE_VPT_VEC_T5:\n     case MVE_VPT_VEC_T6:\n     case MVE_VRHADD:\n+    case MVE_VST2:\n+    case MVE_VST4:\n       if (size <= 3)\n \tfunc (stream, \"%s\", mve_vec_sizename[size]);\n       else\n@@ -5721,6 +5886,15 @@ print_insn_mve (struct disassemble_info *info, long given)\n \t\t      print_instruction_predicate (info);\n \t\t      break;\n \n+\t\t    case 'w':\n+\t\t      if (arm_decode_field (given, 21, 21) == 1)\n+\t\t\tfunc (stream, \"!\");\n+\t\t      break;\n+\n+\t\t    case 'B':\n+\t\t      print_mve_register_blocks (info, given, insn->mve_op);\n+\t\t      break;\n+\n \t\t    case '0': case '1': case '2': case '3': case '4':\n \t\t    case '5': case '6': case '7': case '8': case '9':\n \t\t      {\n@@ -5747,6 +5921,10 @@ print_insn_mve (struct disassemble_info *info, long given)\n \t\t\t  case 'r':\n \t\t\t    func (stream, \"%s\", arm_regnames[value]);\n \t\t\t    break;\n+\t\t\t  case 'd':\n+\t\t\t    func (stream, \"%ld\", value);\n+\t\t\t    value_in_comment = value;\n+\t\t\t    break;\n \t\t\t  case 'Q':\n \t\t\t    if (value & 0x8)\n \t\t\t      func (stream, \"<illegal reg q%ld.5>\", value);"
    }
  ]
}