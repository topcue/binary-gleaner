{
  "sha": "49a9ec7f6a37117519aba9d3e31b1fe17a9dc029",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDlhOWVjN2Y2YTM3MTE3NTE5YWJhOWQzZTMxYjFmZTE3YTlkYzAyOQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-10T15:16:48Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-10T15:16:48Z"
    },
    "message": "[gdb/testsuite] Handle unrecognized command line option in gdb_compile_test\n\nWhen running the gdb testsuite with gnatmake-4.8, I get many fails of the\nfollowing form:\n...\ngcc: error: unrecognized command line option '-fgnat-encodings=all'^M\ngnatmake: \"gdb.ada/O2_float_param/foo.adb\" compilation error^M\ncompiler exited with status 1\ncompilation failed: gcc ... gdb.ada/O2_float_param/foo.adb\ngcc: error: unrecognized command line option '-fgnat-encodings=all'\ngnatmake: \"gdb.ada/O2_float_param/foo.adb\" compilation error\nFAIL: gdb.ada/O2_float_param.exp: scenario=all: compilation foo.adb\n...\n\nFix this by marking the test unsupported instead, such that we have:\n...\nUNSUPPORTED: gdb.ada/O2_float_param.exp: scenario=all: compilation foo.adb \\\n  (unsupported option '-fgnat-encodings=all')\n...\n\nTested on x86_64-linux.",
    "tree": {
      "sha": "c64db3ecfc42a69a456e00b1035cfd74a0d0ba46",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c64db3ecfc42a69a456e00b1035cfd74a0d0ba46"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/49a9ec7f6a37117519aba9d3e31b1fe17a9dc029",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/49a9ec7f6a37117519aba9d3e31b1fe17a9dc029",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/49a9ec7f6a37117519aba9d3e31b1fe17a9dc029",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/49a9ec7f6a37117519aba9d3e31b1fe17a9dc029/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e7776f52fedcafc63619abb2928151cf5bbfcce2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e7776f52fedcafc63619abb2928151cf5bbfcce2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e7776f52fedcafc63619abb2928151cf5bbfcce2"
    }
  ],
  "stats": {
    "total": 35,
    "additions": 24,
    "deletions": 11
  },
  "files": [
    {
      "sha": "926c33293d24010af98adfa318d6ffe49c2cb2c5",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 24,
      "deletions": 11,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/49a9ec7f6a37117519aba9d3e31b1fe17a9dc029/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/49a9ec7f6a37117519aba9d3e31b1fe17a9dc029/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=49a9ec7f6a37117519aba9d3e31b1fe17a9dc029",
      "patch": "@@ -2202,21 +2202,34 @@ proc gdb_interact { } {\n # Examine the output of compilation to determine whether compilation\n # failed or not.  If it failed determine whether it is due to missing\n # compiler or due to compiler error.  Report pass, fail or unsupported\n-# as appropriate\n+# as appropriate.\n \n proc gdb_compile_test {src output} {\n+    set msg \"compilation [file tail $src]\"\n+\n     if { $output == \"\" } {\n-\tpass \"compilation [file tail $src]\"\n-    } elseif { [regexp {^[a-zA-Z_0-9]+: Can't find [^ ]+\\.$} $output] } {\n-\tunsupported \"compilation [file tail $src]\"\n-    } elseif { [regexp {.*: command not found[\\r|\\n]*$} $output] } {\n-\tunsupported \"compilation [file tail $src]\"\n-    } elseif { [regexp {.*: [^\\r\\n]*compiler not installed[^\\r\\n]*[\\r|\\n]*$} $output] } {\n-\tunsupported \"compilation [file tail $src]\"\n-    } else {\n-\tverbose -log \"compilation failed: $output\" 2\n-\tfail \"compilation [file tail $src]\"\n+\tpass $msg\n+\treturn\n+    }\n+\n+    if { [regexp {^[a-zA-Z_0-9]+: Can't find [^ ]+\\.$} $output]\n+\t || [regexp {.*: command not found[\\r|\\n]*$} $output]\n+\t || [regexp {.*: [^\\r\\n]*compiler not installed[^\\r\\n]*[\\r|\\n]*$} $output] } {\n+\tunsupported \"$msg (missing compiler)\"\n+\treturn\n     }\n+\n+    set gcc_re \".*: error: unrecognized command line option \"\n+    set clang_re \".*: error: unsupported option \"\n+    if { [regexp \"(?:$gcc_re|$clang_re)(\\[^ \\t;\\r\\n\\]*)\" $output dummy option]\n+\t && $option != \"\" } {\n+\tunsupported \"$msg (unsupported option $option)\"\n+\treturn\n+    }\n+\n+    # Unclassified compilation failure, be more verbose.\n+    verbose -log \"compilation failed: $output\" 2\n+    fail \"$msg\"\n }\n \n # Return a 1 for configurations for which we don't even want to try to"
    }
  ]
}