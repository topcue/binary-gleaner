{
  "sha": "122373f7f25946cfc51de9e19ba1d173195f9910",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTIyMzczZjdmMjU5NDZjZmM1MWRlOWUxOWJhMWQxNzMxOTVmOTkxMA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-08T20:50:53Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-06-08T20:51:00Z"
    },
    "message": "gdb: try to load libthread_db only after reading all shared libraries when attaching / handling a fork child\n\nWhen trying to attach to a pthread process on a Linux system with glibc 2.33,\nwe get:\n\n    $ ./gdb -q -nx --data-directory=data-directory -p 1472010\n    Attaching to process 1472010\n    [New LWP 1472013]\n    [New LWP 1472014]\n    [New LWP 1472015]\n    Error while reading shared library symbols for /usr/lib/libpthread.so.0:\n    Cannot find user-level thread for LWP 1472015: generic error\n    0x00007ffff6d3637f in poll () from /usr/lib/libc.so.6\n    (gdb)\n\nWhen attaching to a process (or handling a fork child, an operation very\nsimilar to attaching), GDB reads the shared library list from the\nprocess.  For each shared library (if \"set auto-solib-add\" is on), it\nreads its symbols and calls the \"new_objfile\" observable.\n\nThe libthread-db code monitors this observable, and if it sees an\nobjfile named somewhat like \"libpthread.so\" go by, it tries to load\nlibthread_db.so in the GDB process itself.  libthread_db knows how to\nnavigate libpthread's data structures to get information about the\nexisting threads.\n\nTo locate these data structures, libthread_db calls ps_pglobal_lookup\n(implemented in proc-service.c), passing in a symbol name and expecting\nan address in return.\n\nBefore glibc 2.33, libthread_db always asked for symbols found in\nlibpthread.  There was no ordering problem: since we were always trying\nto load libthread_db in reaction to processing libpthread (and reading\nin its symbols) and libthread_db only asked symbols from libpthread, the\nrequested symbols could always be found.  Starting with glibc 2.33,\nlibthread_db now asks for a symbol name that can be found in\n/lib/ld-linux-x86-64.so.2 (_rtld_global).  And the ordering in which GDB\nreads the shared libraries from the inferior when attaching is\nunfortunate, in that libpthread is processed before ld-linux.  So when\nloading libthread_db in reaction to processing libpthread, and\nlibthread_db requests the symbol that is from ld-linux, GDB is not yet\nable to supply it.\n\nThat problematic symbol lookup happens in the thread_from_lwp function,\nwhen we call td_ta_map_lwp2thr_p, and an exception is thrown at this\npoint:\n\n    #0  0x00007ffff6681012 in __cxxabiv1::__cxa_throw (obj=0x60e000006100, tinfo=0x555560033b50 <typeinfo for gdb_exception_error>, dest=0x55555d9404bc <gdb_exception_error::~gdb_exception_error()>) at /build/gcc/src/gcc/libstdc++-v3/libsupc++/eh_throw.cc:78\n    #1  0x000055555e5d3734 in throw_it(return_reason, errors, const char *, typedef __va_list_tag __va_list_tag *) (reason=RETURN_ERROR, error=GENERIC_ERROR, fmt=0x55555f0c5360 \"Cannot find user-level thread for LWP %ld: %s\", ap=0x7fffffffaae0) at /home/simark/src/binutils-gdb/gdbsupport/common-exceptions.cc:200\n    #2  0x000055555e5d37d4 in throw_verror (error=GENERIC_ERROR, fmt=0x55555f0c5360 \"Cannot find user-level thread for LWP %ld: %s\", ap=0x7fffffffaae0) at /home/simark/src/binutils-gdb/gdbsupport/common-exceptions.cc:208\n    #3  0x000055555e0b0ed2 in verror (string=0x55555f0c5360 \"Cannot find user-level thread for LWP %ld: %s\", args=0x7fffffffaae0) at /home/simark/src/binutils-gdb/gdb/utils.c:171\n    #4  0x000055555e5e898a in error (fmt=0x55555f0c5360 \"Cannot find user-level thread for LWP %ld: %s\") at /home/simark/src/binutils-gdb/gdbsupport/errors.cc:43\n    #5  0x000055555d06b4bc in thread_from_lwp (stopped=0x617000035d80, ptid=...) at /home/simark/src/binutils-gdb/gdb/linux-thread-db.c:418\n    #6  0x000055555d07040d in try_thread_db_load_1 (info=0x60c000011140) at /home/simark/src/binutils-gdb/gdb/linux-thread-db.c:912\n    #7  0x000055555d071103 in try_thread_db_load (library=0x55555f0c62a0 \"libthread_db.so.1\", check_auto_load_safe=false) at /home/simark/src/binutils-gdb/gdb/linux-thread-db.c:1014\n    #8  0x000055555d072168 in try_thread_db_load_from_sdir () at /home/simark/src/binutils-gdb/gdb/linux-thread-db.c:1091\n    #9  0x000055555d072d1c in thread_db_load_search () at /home/simark/src/binutils-gdb/gdb/linux-thread-db.c:1146\n    #10 0x000055555d07365c in thread_db_load () at /home/simark/src/binutils-gdb/gdb/linux-thread-db.c:1203\n    #11 0x000055555d07373e in check_for_thread_db () at /home/simark/src/binutils-gdb/gdb/linux-thread-db.c:1246\n    #12 0x000055555d0738ab in thread_db_new_objfile (objfile=0x61300000c0c0) at /home/simark/src/binutils-gdb/gdb/linux-thread-db.c:1275\n    #13 0x000055555bd10740 in std::__invoke_impl<void, void (*&)(objfile*), objfile*> (__f=@0x616000068d88: 0x55555d073745 <thread_db_new_objfile(objfile*)>) at /usr/include/c++/10.2.0/bits/invoke.h:60\n    #14 0x000055555bd02096 in std::__invoke_r<void, void (*&)(objfile*), objfile*> (__fn=@0x616000068d88: 0x55555d073745 <thread_db_new_objfile(objfile*)>) at /usr/include/c++/10.2.0/bits/invoke.h:153\n    #15 0x000055555bce0392 in std::_Function_handler<void (objfile*), void (*)(objfile*)>::_M_invoke(std::_Any_data const&, objfile*&&) (__functor=..., __args#0=@0x7fffffffb4a0: 0x61300000c0c0) at /usr/include/c++/10.2.0/bits/std_function.h:291\n    #16 0x000055555d3595c0 in std::function<void (objfile*)>::operator()(objfile*) const (this=0x616000068d88, __args#0=0x61300000c0c0) at /usr/include/c++/10.2.0/bits/std_function.h:622\n    #17 0x000055555d356b7f in gdb::observers::observable<objfile*>::notify (this=0x555566727020 <gdb::observers::new_objfile>, args#0=0x61300000c0c0) at /home/simark/src/binutils-gdb/gdb/../gdbsupport/observable.h:106\n    #18 0x000055555da3f228 in symbol_file_add_with_addrs (abfd=0x61200001ccc0, name=0x6190000d9090 \"/usr/lib/libpthread.so.0\", add_flags=..., addrs=0x7fffffffbc10, flags=..., parent=0x0) at /home/simark/src/binutils-gdb/gdb/symfile.c:1131\n    #19 0x000055555da3f763 in symbol_file_add_from_bfd (abfd=0x61200001ccc0, name=0x6190000d9090 \"/usr/lib/libpthread.so.0\", add_flags=<error reading variable: Cannot access memory at address 0xffffffffffffffb0>, addrs=0x7fffffffbc10, flags=<error reading variable: Cannot access memory at address 0xffffffffffffffc0>, parent=0x0) at /home/simark/src/binutils-gdb/gdb/symfile.c:1167\n    #20 0x000055555d95f9fa in solib_read_symbols (so=0x6190000d8e80, flags=...) at /home/simark/src/binutils-gdb/gdb/solib.c:681\n    #21 0x000055555d96233d in solib_add (pattern=0x0, from_tty=0, readsyms=1) at /home/simark/src/binutils-gdb/gdb/solib.c:987\n    #22 0x000055555d93646e in enable_break (info=0x608000008f20, from_tty=0) at /home/simark/src/binutils-gdb/gdb/solib-svr4.c:2238\n    #23 0x000055555d93cfc0 in svr4_solib_create_inferior_hook (from_tty=0) at /home/simark/src/binutils-gdb/gdb/solib-svr4.c:3049\n    #24 0x000055555d96610d in solib_create_inferior_hook (from_tty=0) at /home/simark/src/binutils-gdb/gdb/solib.c:1195\n    #25 0x000055555cdee318 in post_create_inferior (from_tty=0) at /home/simark/src/binutils-gdb/gdb/infcmd.c:318\n    #26 0x000055555ce00e6e in setup_inferior (from_tty=0) at /home/simark/src/binutils-gdb/gdb/infcmd.c:2439\n    #27 0x000055555ce59c34 in handle_one (event=...) at /home/simark/src/binutils-gdb/gdb/infrun.c:4887\n    #28 0x000055555ce5cd00 in stop_all_threads () at /home/simark/src/binutils-gdb/gdb/infrun.c:5064\n    #29 0x000055555ce7f0da in stop_waiting (ecs=0x7fffffffd170) at /home/simark/src/binutils-gdb/gdb/infrun.c:8006\n    #30 0x000055555ce67f5c in handle_signal_stop (ecs=0x7fffffffd170) at /home/simark/src/binutils-gdb/gdb/infrun.c:6062\n    #31 0x000055555ce63653 in handle_inferior_event (ecs=0x7fffffffd170) at /home/simark/src/binutils-gdb/gdb/infrun.c:5727\n    #32 0x000055555ce4f297 in fetch_inferior_event () at /home/simark/src/binutils-gdb/gdb/infrun.c:4105\n    #33 0x000055555cdbe3bf in inferior_event_handler (event_type=INF_REG_EVENT) at /home/simark/src/binutils-gdb/gdb/inf-loop.c:42\n    #34 0x000055555d018047 in handle_target_event (error=0, client_data=0x0) at /home/simark/src/binutils-gdb/gdb/linux-nat.c:4060\n    #35 0x000055555e5ea77e in handle_file_event (file_ptr=0x60600008b1c0, ready_mask=1) at /home/simark/src/binutils-gdb/gdbsupport/event-loop.cc:575\n    #36 0x000055555e5eb09c in gdb_wait_for_event (block=0) at /home/simark/src/binutils-gdb/gdbsupport/event-loop.cc:701\n    #37 0x000055555e5e8d19 in gdb_do_one_event () at /home/simark/src/binutils-gdb/gdbsupport/event-loop.cc:212\n    #38 0x000055555dd6e0d4 in wait_sync_command_done () at /home/simark/src/binutils-gdb/gdb/top.c:528\n    #39 0x000055555dd6e372 in maybe_wait_sync_command_done (was_sync=0) at /home/simark/src/binutils-gdb/gdb/top.c:545\n    #40 0x000055555d0ec7c8 in catch_command_errors (command=0x55555ce01bb8 <attach_command(char const*, int)>, arg=0x7fffffffe28d \"1472010\", from_tty=1, do_bp_actions=false) at /home/simark/src/binutils-gdb/gdb/main.c:452\n    #41 0x000055555d0f03ad in captured_main_1 (context=0x7fffffffdd10) at /home/simark/src/binutils-gdb/gdb/main.c:1149\n    #42 0x000055555d0f1239 in captured_main (data=0x7fffffffdd10) at /home/simark/src/binutils-gdb/gdb/main.c:1232\n    #43 0x000055555d0f1315 in gdb_main (args=0x7fffffffdd10) at /home/simark/src/binutils-gdb/gdb/main.c:1257\n    #44 0x000055555bb70cf9 in main (argc=7, argv=0x7fffffffde88) at /home/simark/src/binutils-gdb/gdb/gdb.c:32\n\nThe exception is caught here:\n\n    #0  __cxxabiv1::__cxa_begin_catch (exc_obj_in=0x60e0000060e0) at /build/gcc/src/gcc/libstdc++-v3/libsupc++/eh_catch.cc:84\n    #1  0x000055555d95fded in solib_read_symbols (so=0x6190000d8e80, flags=...) at /home/simark/src/binutils-gdb/gdb/solib.c:689\n    #2  0x000055555d96233d in solib_add (pattern=0x0, from_tty=0, readsyms=1) at /home/simark/src/binutils-gdb/gdb/solib.c:987\n    #3  0x000055555d93646e in enable_break (info=0x608000008f20, from_tty=0) at /home/simark/src/binutils-gdb/gdb/solib-svr4.c:2238\n    #4  0x000055555d93cfc0 in svr4_solib_create_inferior_hook (from_tty=0) at /home/simark/src/binutils-gdb/gdb/solib-svr4.c:3049\n    #5  0x000055555d96610d in solib_create_inferior_hook (from_tty=0) at /home/simark/src/binutils-gdb/gdb/solib.c:1195\n    #6  0x000055555cdee318 in post_create_inferior (from_tty=0) at /home/simark/src/binutils-gdb/gdb/infcmd.c:318\n    #7  0x000055555ce00e6e in setup_inferior (from_tty=0) at /home/simark/src/binutils-gdb/gdb/infcmd.c:2439\n    #8  0x000055555ce59c34 in handle_one (event=...) at /home/simark/src/binutils-gdb/gdb/infrun.c:4887\n    #9  0x000055555ce5cd00 in stop_all_threads () at /home/simark/src/binutils-gdb/gdb/infrun.c:5064\n    #10 0x000055555ce7f0da in stop_waiting (ecs=0x7fffffffd170) at /home/simark/src/binutils-gdb/gdb/infrun.c:8006\n    #11 0x000055555ce67f5c in handle_signal_stop (ecs=0x7fffffffd170) at /home/simark/src/binutils-gdb/gdb/infrun.c:6062\n    #12 0x000055555ce63653 in handle_inferior_event (ecs=0x7fffffffd170) at /home/simark/src/binutils-gdb/gdb/infrun.c:5727\n    #13 0x000055555ce4f297 in fetch_inferior_event () at /home/simark/src/binutils-gdb/gdb/infrun.c:4105\n    #14 0x000055555cdbe3bf in inferior_event_handler (event_type=INF_REG_EVENT) at /home/simark/src/binutils-gdb/gdb/inf-loop.c:42\n    #15 0x000055555d018047 in handle_target_event (error=0, client_data=0x0) at /home/simark/src/binutils-gdb/gdb/linux-nat.c:4060\n    #16 0x000055555e5ea77e in handle_file_event (file_ptr=0x60600008b1c0, ready_mask=1) at /home/simark/src/binutils-gdb/gdbsupport/event-loop.cc:575\n    #17 0x000055555e5eb09c in gdb_wait_for_event (block=0) at /home/simark/src/binutils-gdb/gdbsupport/event-loop.cc:701\n    #18 0x000055555e5e8d19 in gdb_do_one_event () at /home/simark/src/binutils-gdb/gdbsupport/event-loop.cc:212\n    #19 0x000055555dd6e0d4 in wait_sync_command_done () at /home/simark/src/binutils-gdb/gdb/top.c:528\n    #20 0x000055555dd6e372 in maybe_wait_sync_command_done (was_sync=0) at /home/simark/src/binutils-gdb/gdb/top.c:545\n    #21 0x000055555d0ec7c8 in catch_command_errors (command=0x55555ce01bb8 <attach_command(char const*, int)>, arg=0x7fffffffe28d \"1472010\", from_tty=1, do_bp_actions=false) at /home/simark/src/binutils-gdb/gdb/main.c:452\n    #22 0x000055555d0f03ad in captured_main_1 (context=0x7fffffffdd10) at /home/simark/src/binutils-gdb/gdb/main.c:1149\n    #23 0x000055555d0f1239 in captured_main (data=0x7fffffffdd10) at /home/simark/src/binutils-gdb/gdb/main.c:1232\n    #24 0x000055555d0f1315 in gdb_main (args=0x7fffffffdd10) at /home/simark/src/binutils-gdb/gdb/main.c:1257\n    #25 0x000055555bb70cf9 in main (argc=7, argv=0x7fffffffde88) at /home/simark/src/binutils-gdb/gdb/gdb.c:32\n\nCatching the exception at this point means that the thread_db_info\nobject for this inferior will be left in place, despite the failure to\nload libthread_db.  This means that there won't be further attempts at\nloading libthread_db, because thread_db_load will think that\nlibthread_db is already loaded for this inferior and will always exit\nearly.  To fix this, add a try/catch around calling try_thread_db_load_1\nin try_thread_db_load, such that if some exception is thrown while\ntrying to load libthread_db, we reset / delete the thread_db_info for\nthat inferior.  That alone makes attach work fine again, because\ncheck_for_thread_db is called again in the thread_db_inferior_created\nobserver (that happens after we learned about all shared libraries and\ntheir symbols), and libthread_db is successfully loaded then.\n\nWhen attaching, I think that the inferior_created observer is a good\nplace to try to load libthread_db: it is called once everything has\nstabilized, when we learned about all shared libraries.\n\nThe only problem then is that when we first try (and fail) to load\nlibthread_db, in reaction to learning about libpthread, we show this\nwarning:\n\n    warning: Unable to find libthread_db matching inferior's thread library, thread debugging will not be available.\n\nThis is misleading, because we do succeed in loading it later.  So when\nattaching, I think we shouldn't try to load libthread_db in reaction to\nthe new_objfile events, we should wait until we have learned about all\nshared libraries (using the inferior_created observable).  To do so, add\nan `in_initial_library_scan` flag to struct inferior.  This flag is used\nto postpone loading libthread_db if we are attaching or handling a fork\nchild.\n\nWhen debugging remotely with GDBserver, the same problem happens, except\nthat the qSymbol mechanism (allowing the remote side to ask GDB for\nsymbols values) is involved.  The fix there is the same idea, we make\nGDB wait until all shared libraries and their symbols are known before\nsending out a qSymbol packet.  This way, we never present the remote\nside a state where libpthread.so's symbols are known but ld-linux's\nsymbols aren't.\n\ngdb/ChangeLog:\n\n\t* inferior.h (class inferior) <in_initial_library_scan>: New.\n\t* infcmd.c (post_create_inferior): Set in_initial_library_scan.\n\t* infrun.c (follow_fork_inferior): Likewise.\n\t* linux-thread-db.c (try_thread_db_load): Catch exception thrown\n\tby try_thread_db_load_1\n\t(thread_db_load): Return early if in_initial_library_scan is\n\tset.\n\t* remote.c (remote_new_objfile): Return early if\n\tin_initial_library_scan is set.\n\nChange-Id: I7a279836cfbb2b362b4fde11b196b4aab82f5efb",
    "tree": {
      "sha": "05dd8c92cc310ad03f06de7fc50e12b18a65aab2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/05dd8c92cc310ad03f06de7fc50e12b18a65aab2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/122373f7f25946cfc51de9e19ba1d173195f9910",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/122373f7f25946cfc51de9e19ba1d173195f9910",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/122373f7f25946cfc51de9e19ba1d173195f9910",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/122373f7f25946cfc51de9e19ba1d173195f9910/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5804373d03ee946df59f21131299554a1bddb799",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5804373d03ee946df59f21131299554a1bddb799",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5804373d03ee946df59f21131299554a1bddb799"
    }
  ],
  "stats": {
    "total": 71,
    "additions": 64,
    "deletions": 7
  },
  "files": [
    {
      "sha": "05c307bd303882fa7b8390d66a8db1d728c330b7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/122373f7f25946cfc51de9e19ba1d173195f9910/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/122373f7f25946cfc51de9e19ba1d173195f9910/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=122373f7f25946cfc51de9e19ba1d173195f9910",
      "patch": "@@ -1,3 +1,15 @@\n+2021-06-08  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* inferior.h (class inferior) <in_initial_library_scan>: New.\n+\t* infcmd.c (post_create_inferior): Set in_initial_library_scan.\n+\t* infrun.c (follow_fork_inferior): Likewise.\n+\t* linux-thread-db.c (try_thread_db_load): Catch exception thrown\n+\tby try_thread_db_load_1\n+\t(thread_db_load): Return early if in_initial_library_scan is\n+\tset.\n+\t* remote.c (remote_new_objfile): Return early if\n+\tin_initial_library_scan is set.\n+\n 2021-06-07  Pedro Alves  <pedro@palves.net>\n \n \t* dwarf2/read.c (struct partial_die_info): Add defaulted copy"
    },
    {
      "sha": "8190ba36565eca56c1942a074af1c05ac30dba21",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/122373f7f25946cfc51de9e19ba1d173195f9910/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/122373f7f25946cfc51de9e19ba1d173195f9910/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=122373f7f25946cfc51de9e19ba1d173195f9910",
      "patch": "@@ -315,6 +315,10 @@ post_create_inferior (int from_tty)\n       const unsigned solib_add_generation\n \t= current_program_space->solib_add_generation;\n \n+      scoped_restore restore_in_initial_library_scan\n+\t= make_scoped_restore (&current_inferior ()->in_initial_library_scan,\n+\t\t\t       true);\n+\n       /* Create the hooks to handle shared library load and unload\n \t events.  */\n       solib_create_inferior_hook (from_tty);"
    },
    {
      "sha": "f61b5889e858f69e9c4f3f140f929e1a2ae7dfa1",
      "filename": "gdb/inferior.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/122373f7f25946cfc51de9e19ba1d173195f9910/gdb/inferior.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/122373f7f25946cfc51de9e19ba1d173195f9910/gdb/inferior.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.h?ref=122373f7f25946cfc51de9e19ba1d173195f9910",
      "patch": "@@ -522,6 +522,10 @@ class inferior : public refcounted_object\n      architecture/description.  */\n   bool needs_setup = false;\n \n+  /* True when we are reading the library list of the inferior during an\n+     attach or handling a fork child.  */\n+  bool in_initial_library_scan = false;\n+\n   /* Private data used by the target vector implementation.  */\n   std::unique_ptr<private_inferior> priv;\n "
    },
    {
      "sha": "4bd21fde590790d8b442db5d387870ae26733022",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/122373f7f25946cfc51de9e19ba1d173195f9910/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/122373f7f25946cfc51de9e19ba1d173195f9910/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=122373f7f25946cfc51de9e19ba1d173195f9910",
      "patch": "@@ -521,6 +521,9 @@ holding the child stopped.  Try \\\"set detach-on-fork\\\" or \\\n \t\t breakpoint.  If a \"cloned-VM\" event was propagated\n \t\t better throughout the core, this wouldn't be\n \t\t required.  */\n+\t      scoped_restore restore_in_initial_library_scan\n+\t\t= make_scoped_restore (&child_inf->in_initial_library_scan,\n+\t\t\t\t       true);\n \t      solib_create_inferior_hook (0);\n \t    }\n \t}\n@@ -656,6 +659,8 @@ holding the child stopped.  Try \\\"set detach-on-fork\\\" or \\\n \t     shared libraries, and install the solib event breakpoint.\n \t     If a \"cloned-VM\" event was propagated better throughout\n \t     the core, this wouldn't be required.  */\n+\t  scoped_restore restore_in_initial_library_scan\n+\t    = make_scoped_restore (&child_inf->in_initial_library_scan, true);\n \t  solib_create_inferior_hook (0);\n \t}\n "
    },
    {
      "sha": "d1e8c22ac96233f9171ce88cb8aa19f44d97ab02",
      "filename": "gdb/linux-thread-db.c",
      "status": "modified",
      "additions": 19,
      "deletions": 5,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/122373f7f25946cfc51de9e19ba1d173195f9910/gdb/linux-thread-db.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/122373f7f25946cfc51de9e19ba1d173195f9910/gdb/linux-thread-db.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-thread-db.c?ref=122373f7f25946cfc51de9e19ba1d173195f9910",
      "patch": "@@ -1012,8 +1012,17 @@ try_thread_db_load (const char *library, bool check_auto_load_safe)\n   if (strchr (library, '/') != NULL)\n     info->filename = gdb_realpath (library).release ();\n \n-  if (try_thread_db_load_1 (info))\n-    return true;\n+  try\n+    {\n+      if (try_thread_db_load_1 (info))\n+\treturn true;\n+    }\n+  catch (const gdb_exception_error &except)\n+    {\n+      if (libthread_db_debug)\n+\texception_fprintf (gdb_stdlog, except,\n+\t\t\t   \"Warning: While trying to load libthread_db: \");\n+    }\n \n   /* This library \"refused\" to work on current inferior.  */\n   delete_thread_db_info (current_inferior ()->process_target (),\n@@ -1184,10 +1193,15 @@ has_libpthread (void)\n static bool\n thread_db_load (void)\n {\n-  struct thread_db_info *info;\n+  inferior *inf = current_inferior ();\n \n-  info = get_thread_db_info (current_inferior ()->process_target (),\n-\t\t\t     inferior_ptid.pid ());\n+  /* When attaching / handling fork child, don't try loading libthread_db\n+     until we know about all shared libraries.  */\n+  if (inf->in_initial_library_scan)\n+    return false;\n+\n+  thread_db_info *info = get_thread_db_info (inf->process_target (),\n+\t\t\t\t\t     inferior_ptid.pid ());\n \n   if (info != NULL)\n     return true;"
    },
    {
      "sha": "39bdd2e4ab08246b9c8fde9198f4c87ebb27c0a0",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 20,
      "deletions": 2,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/122373f7f25946cfc51de9e19ba1d173195f9910/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/122373f7f25946cfc51de9e19ba1d173195f9910/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=122373f7f25946cfc51de9e19ba1d173195f9910",
      "patch": "@@ -14522,8 +14522,26 @@ remote_new_objfile (struct objfile *objfile)\n {\n   remote_target *remote = get_current_remote_target ();\n \n-  if (remote != NULL)\t\t\t/* Have a remote connection.  */\n-    remote->remote_check_symbols ();\n+  /* First, check whether the current inferior's process target is a remote\n+     target.  */\n+  if (remote == nullptr)\n+    return;\n+\n+  /* When we are attaching or handling a fork child and the shared library\n+     subsystem reads the list of loaded libraries, we receive new objfile\n+     events in between each found library.  The libraries are read in an\n+     undefined order, so if we gave the remote side a chance to look up\n+     symbols between each objfile, we might give it an inconsistent picture\n+     of the inferior.  It could appear that a library A appears loaded but\n+     a library B does not, even though library A requires library B.  That\n+     would present a state that couldn't normally exist in the inferior.\n+\n+     So, skip these events, we'll give the remote a chance to look up symbols\n+     once all the loaded libraries and their symbols are known to GDB.  */\n+    if (current_inferior ()->in_initial_library_scan)\n+      return;\n+\n+  remote->remote_check_symbols ();\n }\n \n /* Pull all the tracepoints defined on the target and create local"
    }
  ]
}