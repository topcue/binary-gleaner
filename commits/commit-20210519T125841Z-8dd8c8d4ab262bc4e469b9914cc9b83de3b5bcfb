{
  "sha": "8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGRkOGM4ZDRhYjI2MmJjNGU0NjliOTkxNGNjOWI4M2RlM2I1YmNmYg==",
  "commit": {
    "author": {
      "name": "Marco Barisione",
      "email": "mbarisione@undo.io",
      "date": "2021-05-19T12:58:41Z"
    },
    "committer": {
      "name": "Marco Barisione",
      "email": "mbarisione@undo.io",
      "date": "2021-05-19T12:58:41Z"
    },
    "message": "gdb: Pass std::strings to ui_out::field_string () where convenient\n\nWhile adding a ui_out::text () overload accepting a std::string, I\nnoticed that several callers of ui_out::field_string () were converting\nstd::string instances to char pointers even if not necessary.\n\ngdb/ChangeLog:\n\n\t* ui-out.c (ui_out::field_string): Add missing style_argument\n\tto the overload accepting a std::string, to make it equivalent\n\tto the char pointer version.\n\t* ui-out.h (class ui_out): Ditto.\n\t* break-catch-sig.c (signal_catchpoint_print_one): Do not\n\tconvert std::strings to char pointers before passing them to\n\tui_out::field_string ().\n\t* break-catch-throw.c (print_one_detail_exception_catchpoint):\n\tDitto.\n\t* cli/cli-setshow.c (do_show_command): Ditto.\n\t* disasm.c (gdb_pretty_print_disassembler::pretty_print_insn):\n\tDitto.\n\t* infcmd.c (print_return_value_1): Ditto.\n\t* inferior.c (print_inferior): Ditto.\n\t* linux-thread-db.c (info_auto_load_libthread_db): Ditto.\n\t* mi/mi-cmd-var.c (print_varobj): Ditto.\n\t(mi_cmd_var_set_format): Ditto.\n\t(mi_cmd_var_info_type): Ditto.\n\t(mi_cmd_var_info_expression): Ditto.\n\t(mi_cmd_var_evaluate_expression): Ditto.\n\t(mi_cmd_var_assign): Ditto.\n\t(varobj_update_one): Ditto.\n\t* mi/mi-main.c (list_available_thread_groups): Ditto.\n\t(mi_cmd_data_read_memory_bytes): Ditto.\n\t(mi_cmd_trace_frame_collected): Ditto.\n\t* osdata.c (info_osdata): Ditto.\n\t* probe.c (info_probes_for_spops): Ditto.\n\t* target-connection.c (print_connection): Ditto.\n\t* thread.c (print_thread_info_1): Ditto.\n\t* tracepoint.c (print_one_static_tracepoint_marker): Ditto.",
    "tree": {
      "sha": "cfdd37aeb050c92492e6c559fc0bbd78427f0a7e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cfdd37aeb050c92492e6c559fc0bbd78427f0a7e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/comments",
  "author": {
    "login": "barisione",
    "id": 4679325,
    "node_id": "MDQ6VXNlcjQ2NzkzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4679325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisione",
    "html_url": "https://github.com/barisione",
    "followers_url": "https://api.github.com/users/barisione/followers",
    "following_url": "https://api.github.com/users/barisione/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisione/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisione/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisione/subscriptions",
    "organizations_url": "https://api.github.com/users/barisione/orgs",
    "repos_url": "https://api.github.com/users/barisione/repos",
    "events_url": "https://api.github.com/users/barisione/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisione/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisione",
    "id": 4679325,
    "node_id": "MDQ6VXNlcjQ2NzkzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4679325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisione",
    "html_url": "https://github.com/barisione",
    "followers_url": "https://api.github.com/users/barisione/followers",
    "following_url": "https://api.github.com/users/barisione/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisione/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisione/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisione/subscriptions",
    "organizations_url": "https://api.github.com/users/barisione/orgs",
    "repos_url": "https://api.github.com/users/barisione/repos",
    "events_url": "https://api.github.com/users/barisione/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisione/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4915bfdcfb271cab6ca7534916c42e98cf22f953",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4915bfdcfb271cab6ca7534916c42e98cf22f953",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4915bfdcfb271cab6ca7534916c42e98cf22f953"
    }
  ],
  "stats": {
    "total": 75,
    "additions": 37,
    "deletions": 38
  },
  "files": [
    {
      "sha": "9530dea86ba4ab192f3b94192d6929f62d9b688e",
      "filename": "gdb/break-catch-sig.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/break-catch-sig.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/break-catch-sig.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/break-catch-sig.c?ref=8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
      "patch": "@@ -237,7 +237,7 @@ signal_catchpoint_print_one (struct breakpoint *b,\n \n \t  text += name;\n \t}\n-      uiout->field_string (\"what\", text.c_str ());\n+      uiout->field_string (\"what\", text);\n     }\n   else\n     uiout->field_string (\"what\","
    },
    {
      "sha": "7fc6953b90cd597a871f81d5ab4509920a4cd8f8",
      "filename": "gdb/break-catch-throw.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/break-catch-throw.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/break-catch-throw.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/break-catch-throw.c?ref=8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
      "patch": "@@ -300,7 +300,7 @@ print_one_detail_exception_catchpoint (const struct breakpoint *b,\n   if (!cp->exception_rx.empty ())\n     {\n       uiout->text (_(\"\\tmatching: \"));\n-      uiout->field_string (\"regexp\", cp->exception_rx.c_str ());\n+      uiout->field_string (\"regexp\", cp->exception_rx);\n       uiout->text (\"\\n\");\n     }\n }"
    },
    {
      "sha": "5fd5fd15c6ad119f35f9aa83d731be5cf3975fdd",
      "filename": "gdb/cli/cli-setshow.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/cli/cli-setshow.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/cli/cli-setshow.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-setshow.c?ref=8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
      "patch": "@@ -714,7 +714,7 @@ do_show_command (const char *arg, int from_tty, struct cmd_list_element *c)\n      versions of code to print the value out.  */\n \n   if (uiout->is_mi_like_p ())\n-    uiout->field_string (\"value\", val.c_str ());\n+    uiout->field_string (\"value\", val);\n   else\n     {\n       if (c->show_value_func != NULL)"
    },
    {
      "sha": "70c54220a29819895550cb9c2f9505a5948bd023",
      "filename": "gdb/disasm.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/disasm.c?ref=8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
      "patch": "@@ -244,7 +244,7 @@ gdb_pretty_print_disassembler::pretty_print_insn (const struct disasm_insn *insn\n \t   the future.  */\n \tm_uiout->text (\" <\");\n \tif (!omit_fname)\n-\t  m_uiout->field_string (\"func-name\", name.c_str (),\n+\t  m_uiout->field_string (\"func-name\", name,\n \t\t\t\t function_name_style.style ());\n \t/* For negative offsets, avoid displaying them as +-N; the sign of\n \t   the offset takes the place of the \"+\" here.  */"
    },
    {
      "sha": "4351409af500022216f5c98f1e1277afa59499f6",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
      "patch": "@@ -1539,7 +1539,7 @@ print_return_value_1 (struct ui_out *uiout, struct return_value_info *rv)\n     {\n       std::string type_name = type_to_string (rv->type);\n       uiout->text (\"Value returned has type: \");\n-      uiout->field_string (\"return-type\", type_name.c_str ());\n+      uiout->field_string (\"return-type\", type_name);\n       uiout->text (\".\");\n       uiout->text (\" Cannot determine contents\\n\");\n     }"
    },
    {
      "sha": "059839ec962697a7116c4a772637e5c62511f1ab",
      "filename": "gdb/inferior.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inferior.c?ref=8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
      "patch": "@@ -529,7 +529,7 @@ print_inferior (struct ui_out *uiout, const char *requested_inferiors)\n       uiout->field_string (\"target-id\", inferior_pid_to_str (inf->pid));\n \n       std::string conn = uiout_field_connection (inf->process_target ());\n-      uiout->field_string (\"connection-id\", conn.c_str ());\n+      uiout->field_string (\"connection-id\", conn);\n \n       if (inf->pspace->exec_filename != nullptr)\n \tuiout->field_string (\"exec\", inf->pspace->exec_filename.get ());"
    },
    {
      "sha": "9925b02e7780258c611a2ee9e8a9a90bb73ae947",
      "filename": "gdb/linux-thread-db.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/linux-thread-db.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/linux-thread-db.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-thread-db.c?ref=8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
      "patch": "@@ -1935,7 +1935,7 @@ info_auto_load_libthread_db (const char *args, int from_tty)\n \t    i++;\n \t  }\n \n-\tuiout->field_string (\"pids\", pids.c_str ());\n+\tuiout->field_string (\"pids\", pids);\n \n \tuiout->text (\"\\n\");\n       }"
    },
    {
      "sha": "61bc169304b12df3fa4eff79c219d97d80f5ae64",
      "filename": "gdb/mi/mi-cmd-var.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/mi/mi-cmd-var.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/mi/mi-cmd-var.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-var.c?ref=8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
      "patch": "@@ -56,20 +56,20 @@ print_varobj (struct varobj *var, enum print_values print_values,\n     {\n       std::string exp = varobj_get_expression (var);\n \n-      uiout->field_string (\"exp\", exp.c_str ());\n+      uiout->field_string (\"exp\", exp);\n     }\n   uiout->field_signed (\"numchild\", varobj_get_num_children (var));\n   \n   if (mi_print_value_p (var, print_values))\n     {\n       std::string val = varobj_get_value (var);\n \n-      uiout->field_string (\"value\", val.c_str ());\n+      uiout->field_string (\"value\", val);\n     }\n \n   std::string type = varobj_get_type (var);\n   if (!type.empty ())\n-    uiout->field_string (\"type\", type.c_str ());\n+    uiout->field_string (\"type\", type);\n \n   thread_id = varobj_get_thread_id (var);\n   if (thread_id > 0)\n@@ -236,7 +236,7 @@ mi_cmd_var_set_format (const char *command, char **argv, int argc)\n  \n   /* Report the value in the new format.  */\n   std::string val = varobj_get_value (var);\n-  uiout->field_string (\"value\", val.c_str ());\n+  uiout->field_string (\"value\", val);\n }\n \n void\n@@ -423,7 +423,7 @@ mi_cmd_var_info_type (const char *command, char **argv, int argc)\n   var = varobj_get_handle (argv[0]);\n \n   std::string type_name = varobj_get_type (var);\n-  uiout->field_string (\"type\", type_name.c_str ());\n+  uiout->field_string (\"type\", type_name);\n }\n \n void\n@@ -461,7 +461,7 @@ mi_cmd_var_info_expression (const char *command, char **argv, int argc)\n   uiout->field_string (\"lang\", lang->natural_name ());\n \n   std::string exp = varobj_get_expression (var);\n-  uiout->field_string (\"exp\", exp.c_str ());\n+  uiout->field_string (\"exp\", exp);\n }\n \n void\n@@ -545,13 +545,13 @@ mi_cmd_var_evaluate_expression (const char *command, char **argv, int argc)\n     {\n       std::string val = varobj_get_formatted_value (var, format);\n \n-      uiout->field_string (\"value\", val.c_str ());\n+      uiout->field_string (\"value\", val);\n     }\n   else\n     {\n       std::string val = varobj_get_value (var);\n \n-      uiout->field_string (\"value\", val.c_str ());\n+      uiout->field_string (\"value\", val);\n     }\n }\n \n@@ -582,7 +582,7 @@ mi_cmd_var_assign (const char *command, char **argv, int argc)\n \t     \"expression to variable object\"));\n \n   std::string val = varobj_get_value (var);\n-  uiout->field_string (\"value\", val.c_str ());\n+  uiout->field_string (\"value\", val);\n }\n \n /* Helper for mi_cmd_var_update - update each VAR.  */\n@@ -692,7 +692,7 @@ varobj_update_one (struct varobj *var, enum print_values print_values,\n \t    {\n \t      std::string val = varobj_get_value (r.varobj);\n \n-\t      uiout->field_string (\"value\", val.c_str ());\n+\t      uiout->field_string (\"value\", val);\n \t    }\n \t  uiout->field_string (\"in_scope\", \"true\");\n \t  break;\n@@ -716,7 +716,7 @@ varobj_update_one (struct varobj *var, enum print_values print_values,\n \t{\n \t  std::string type_name = varobj_get_type (r.varobj);\n \n-\t  uiout->field_string (\"new_type\", type_name.c_str ());\n+\t  uiout->field_string (\"new_type\", type_name);\n \t}\n \n       if (r.type_changed || r.children_changed)"
    },
    {
      "sha": "9d205f0208bba7b6822c7e14b97135f10b545682",
      "filename": "gdb/mi/mi-main.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/mi/mi-main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/mi/mi-main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-main.c?ref=8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
      "patch": "@@ -738,12 +738,12 @@ list_available_thread_groups (const std::set<int> &ids, int recurse)\n \n       ui_out_emit_tuple tuple_emitter (uiout, NULL);\n \n-      uiout->field_string (\"id\", pid->c_str ());\n+      uiout->field_string (\"id\", *pid);\n       uiout->field_string (\"type\", \"process\");\n       if (cmd)\n-\tuiout->field_string (\"description\", cmd->c_str ());\n+\tuiout->field_string (\"description\", *cmd);\n       if (user)\n-\tuiout->field_string (\"user\", user->c_str ());\n+\tuiout->field_string (\"user\", *user);\n       if (cores)\n \toutput_cores (uiout, \"cores\", cores->c_str ());\n \n@@ -762,9 +762,9 @@ list_available_thread_groups (const std::set<int> &ids, int recurse)\n \t\t  const std::string *tid = get_osdata_column (child, \"tid\");\n \t\t  const std::string *tcore = get_osdata_column (child, \"core\");\n \n-\t\t  uiout->field_string (\"id\", tid->c_str ());\n+\t\t  uiout->field_string (\"id\", *tid);\n \t\t  if (tcore)\n-\t\t    uiout->field_string (\"core\", tcore->c_str ());\n+\t\t    uiout->field_string (\"core\", *tcore);\n \t\t}\n \t    }\n \t}\n@@ -1470,7 +1470,7 @@ mi_cmd_data_read_memory_bytes (const char *command, char **argv, int argc)\n       std::string data = bin2hex (read_result.data.get (),\n \t\t\t\t  (read_result.end - read_result.begin)\n \t\t\t\t  * unit_size);\n-      uiout->field_string (\"contents\", data.c_str ());\n+      uiout->field_string (\"contents\", data);\n     }\n }\n \n@@ -2670,7 +2670,7 @@ mi_cmd_trace_frame_collected (const char *command, char **argv, int argc)\n \t    if (target_read_memory (r.start, data.data (), r.length) == 0)\n \t      {\n \t\tstd::string data_str = bin2hex (data.data (), r.length);\n-\t\tuiout->field_string (\"contents\", data_str.c_str ());\n+\t\tuiout->field_string (\"contents\", data_str);\n \t      }\n \t    else\n \t      uiout->field_skip (\"contents\");"
    },
    {
      "sha": "bc621cb233226dc8683cb380ff8dee678a1a2552",
      "filename": "gdb/osdata.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/osdata.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/osdata.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/osdata.c?ref=8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
      "patch": "@@ -273,8 +273,7 @@ info_osdata (const char *type)\n \t\t continue;\n \n \t       snprintf (col_name, 32, \"col%d\", ix_cols);\n-\t       uiout->field_string (col_name,\n-\t\t\t\t    item.columns[ix_cols].value.c_str ());\n+\t       uiout->field_string (col_name, item.columns[ix_cols].value);\n \t     }\n \t }\n "
    },
    {
      "sha": "d9a06e53416d276ce7d3c238772d6f2ed2512777",
      "filename": "gdb/probe.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/probe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/probe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/probe.c?ref=8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
      "patch": "@@ -571,9 +571,8 @@ info_probes_for_spops (const char *arg, int from_tty,\n \tui_out_emit_tuple tuple_emitter (current_uiout, \"probe\");\n \n \tcurrent_uiout->field_string (\"type\", probe_type);\n-\tcurrent_uiout->field_string (\"provider\",\n-\t\t\t\t     probe.prob->get_provider ().c_str ());\n-\tcurrent_uiout->field_string (\"name\", probe.prob->get_name ().c_str ());\n+\tcurrent_uiout->field_string (\"provider\", probe.prob->get_provider ());\n+\tcurrent_uiout->field_string (\"name\", probe.prob->get_name ());\n \tcurrent_uiout->field_core_addr (\"addr\", probe.prob->get_gdbarch (),\n \t\t\t\t\tprobe.prob->get_relocated_address\n \t\t\t\t\t(probe.objfile));"
    },
    {
      "sha": "a649423e07e771457c623d1a5a18d4322752a271",
      "filename": "gdb/target-connection.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/target-connection.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/target-connection.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-connection.c?ref=8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
      "patch": "@@ -133,7 +133,7 @@ print_connection (struct ui_out *uiout, const char *requested_connections)\n \n       uiout->field_signed (\"number\", t->connection_number);\n \n-      uiout->field_string (\"what\", make_target_connection_string (t).c_str ());\n+      uiout->field_string (\"what\", make_target_connection_string (t));\n \n       uiout->field_string (\"description\", t->longname ());\n "
    },
    {
      "sha": "40051013c0aa97364acb79c1694a02fa3118b4e4",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
      "patch": "@@ -1184,8 +1184,7 @@ print_thread_info_1 (struct ui_out *uiout, const char *requested_threads,\n \t    }\n \t  else\n \t    {\n-\t      uiout->field_string (\"target-id\",\n-\t\t\t\t   thread_target_id_str (tp).c_str ());\n+\t      uiout->field_string (\"target-id\", thread_target_id_str (tp));\n \t    }\n \n \t  if (tp->state == THREAD_RUNNING)"
    },
    {
      "sha": "da0e976c869442fa12bca6a331416e243b3ebb12",
      "filename": "gdb/tracepoint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/tracepoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/tracepoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tracepoint.c?ref=8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
      "patch": "@@ -3678,7 +3678,7 @@ print_one_static_tracepoint_marker (int count,\n      identifier!  */\n   uiout->field_signed (\"count\", count);\n \n-  uiout->field_string (\"marker-id\", marker.str_id.c_str ());\n+  uiout->field_string (\"marker-id\", marker.str_id);\n \n   uiout->field_fmt (\"enabled\", \"%c\",\n \t\t    !tracepoints.empty () ? 'y' : 'n');\n@@ -3735,7 +3735,7 @@ print_one_static_tracepoint_marker (int count,\n   uiout->text (\"\\n\");\n   uiout->text (extra_field_indent);\n   uiout->text (_(\"Data: \\\"\"));\n-  uiout->field_string (\"extra-data\", marker.extra.c_str ());\n+  uiout->field_string (\"extra-data\", marker.extra);\n   uiout->text (\"\\\"\\n\");\n \n   if (!tracepoints.empty ())"
    },
    {
      "sha": "c091af6cad3815e2b556c52e32f1d65c5dcad489",
      "filename": "gdb/ui-out.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/ui-out.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/ui-out.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ui-out.c?ref=8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
      "patch": "@@ -528,9 +528,10 @@ ui_out::field_string (const char *fldname, const char *string,\n }\n \n void\n-ui_out::field_string (const char *fldname, const std::string &string)\n+ui_out::field_string (const char *fldname, const std::string &string,\n+\t\t      const ui_file_style &style)\n {\n-  field_string (fldname, string.c_str ());\n+  field_string (fldname, string.c_str (), style);\n }\n \n /* VARARGS */"
    },
    {
      "sha": "46dfe28c1e146e81aed92ba43853175a4409b18f",
      "filename": "gdb/ui-out.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/ui-out.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb/gdb/ui-out.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ui-out.h?ref=8dd8c8d4ab262bc4e469b9914cc9b83de3b5bcfb",
      "patch": "@@ -191,7 +191,8 @@ class ui_out\n \t\t\tCORE_ADDR address);\n   void field_string (const char *fldname, const char *string,\n \t\t     const ui_file_style &style = ui_file_style ());\n-  void field_string (const char *fldname, const std::string &string);\n+  void field_string (const char *fldname, const std::string &string,\n+\t\t     const ui_file_style &style = ui_file_style ());\n   void field_stream (const char *fldname, string_file &stream,\n \t\t     const ui_file_style &style = ui_file_style ());\n   void field_skip (const char *fldname);"
    }
  ]
}