{
  "sha": "441f6aca3923ba65db139f5c2557a5f01e190edc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDQxZjZhY2EzOTIzYmE2NWRiMTM5ZjVjMjU1N2E1ZjAxZTE5MGVkYw==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-03-23T16:08:39Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-03-23T16:08:39Z"
    },
    "message": "x86: split opcode prefix and opcode space representation\n\nCommit 8b65b8953af2 (\"x86: Remove the prefix byte from non-VEX/EVEX\nbase_opcode\") used the opcodeprefix field for two distinct purposes. In\npreparation of having VEX/XOP/EVEX and non-VEX templates become similar\nin the representatioon of both encoding space and opcode prefixes, split\nthe field to have a separate one holding an insn's opcode space.",
    "tree": {
      "sha": "3db030cdeae0a950236523451d774b374f26a274",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3db030cdeae0a950236523451d774b374f26a274"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/441f6aca3923ba65db139f5c2557a5f01e190edc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/441f6aca3923ba65db139f5c2557a5f01e190edc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/441f6aca3923ba65db139f5c2557a5f01e190edc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/441f6aca3923ba65db139f5c2557a5f01e190edc/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "66848ebca8da38ce395d74d25d604646738514a7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/66848ebca8da38ce395d74d25d604646738514a7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/66848ebca8da38ce395d74d25d604646738514a7"
    }
  ],
  "stats": {
    "total": 18736,
    "additions": 9374,
    "deletions": 9362
  },
  "files": [
    {
      "sha": "58145416fc2cf8a95e917e909231b1514047314c",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/441f6aca3923ba65db139f5c2557a5f01e190edc/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/441f6aca3923ba65db139f5c2557a5f01e190edc/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=441f6aca3923ba65db139f5c2557a5f01e190edc",
      "patch": "@@ -1,3 +1,10 @@\n+2021-03-23  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (pte): Print prefix and encoding space.\n+\t(build_vex_prefix): Check opcodespace instead of opcodeprefix.\n+\t(build_evex_prefix): Likewise.\n+\t(load_insn_p): Likewise.\n+\n 2021-03-23  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (load_insn_p): Use PREFIX_NONE. Fold two"
    },
    {
      "sha": "1aa815df5a10b9847a491a4a97f2a175543c4674",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 26,
      "deletions": 48,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/441f6aca3923ba65db139f5c2557a5f01e190edc/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/441f6aca3923ba65db139f5c2557a5f01e190edc/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=441f6aca3923ba65db139f5c2557a5f01e190edc",
      "patch": "@@ -3239,8 +3239,18 @@ pi (const char *line, i386_insn *x)\n static void\n pte (insn_template *t)\n {\n+  static const unsigned char opc_pfx[] = { 0, 0x66, 0xf2, 0xf3 };\n+  static const char *const opc_spc[] = {\n+    NULL, \"0f\", \"0f38\", \"0f3a\", NULL, NULL, NULL, NULL,\n+    \"XOP08\", \"XOP09\", \"XOP0A\",\n+  };\n   unsigned int j;\n+\n   fprintf (stdout, \" %d operands \", t->operands);\n+  if (opc_pfx[t->opcode_modifier.opcodeprefix])\n+    fprintf (stdout, \"pfx %x \", opc_pfx[t->opcode_modifier.opcodeprefix]);\n+  if (opc_spc[t->opcode_modifier.opcodespace])\n+    fprintf (stdout, \"space %s \", opc_spc[t->opcode_modifier.opcodespace]);\n   fprintf (stdout, \"opcode %x \", t->base_opcode);\n   if (t->extension_opcode != None)\n     fprintf (stdout, \"ext %x \", t->extension_opcode);\n@@ -3599,7 +3609,7 @@ build_vex_prefix (const insn_template *t)\n       && i.dir_encoding == dir_encoding_default\n       && i.operands == i.reg_operands\n       && operand_type_equal (&i.types[0], &i.types[i.operands - 1])\n-      && i.tm.opcode_modifier.opcodeprefix == VEX0F\n+      && i.tm.opcode_modifier.opcodespace == SPACE_0F\n       && (i.tm.opcode_modifier.load || i.tm.opcode_modifier.d)\n       && i.rex == REX_B)\n     {\n@@ -3644,7 +3654,7 @@ build_vex_prefix (const insn_template *t)\n       union i386_op temp_op;\n       i386_operand_type temp_type;\n \n-      gas_assert (i.tm.opcode_modifier.opcodeprefix == VEX0F);\n+      gas_assert (i.tm.opcode_modifier.opcodespace == SPACE_0F);\n       gas_assert (!i.tm.opcode_modifier.sae);\n       gas_assert (operand_type_equal (&i.types[i.operands - 2],\n                                       &i.types[i.operands - 3]));\n@@ -3715,7 +3725,7 @@ build_vex_prefix (const insn_template *t)\n   /* Use 2-byte VEX prefix if possible.  */\n   if (w == 0\n       && i.vec_encoding != vex_encoding_vex3\n-      && i.tm.opcode_modifier.opcodeprefix == VEX0F\n+      && i.tm.opcode_modifier.opcodespace == SPACE_0F\n       && (i.rex & (REX_W | REX_X | REX_B)) == 0)\n     {\n       /* 2-byte VEX prefix.  */\n@@ -3734,34 +3744,18 @@ build_vex_prefix (const insn_template *t)\n   else\n     {\n       /* 3-byte VEX prefix.  */\n-      unsigned int m;\n-\n       i.vex.length = 3;\n \n-      switch (i.tm.opcode_modifier.opcodeprefix)\n+      switch (i.tm.opcode_modifier.opcodespace)\n \t{\n-\tcase VEX0F:\n-\t  m = 0x1;\n+\tcase SPACE_0F:\n+\tcase SPACE_0F38:\n+\tcase SPACE_0F3A:\n \t  i.vex.bytes[0] = 0xc4;\n \t  break;\n-\tcase VEX0F38:\n-\t  m = 0x2;\n-\t  i.vex.bytes[0] = 0xc4;\n-\t  break;\n-\tcase VEX0F3A:\n-\t  m = 0x3;\n-\t  i.vex.bytes[0] = 0xc4;\n-\t  break;\n-\tcase XOP08:\n-\t  m = 0x8;\n-\t  i.vex.bytes[0] = 0x8f;\n-\t  break;\n-\tcase XOP09:\n-\t  m = 0x9;\n-\t  i.vex.bytes[0] = 0x8f;\n-\t  break;\n-\tcase XOP0A:\n-\t  m = 0xa;\n+\tcase SPACE_XOP08:\n+\tcase SPACE_XOP09:\n+\tcase SPACE_XOP0A:\n \t  i.vex.bytes[0] = 0x8f;\n \t  break;\n \tdefault:\n@@ -3770,7 +3764,7 @@ build_vex_prefix (const insn_template *t)\n \n       /* The high 3 bits of the second VEX byte are 1's compliment\n \t of RXB bits from REX.  */\n-      i.vex.bytes[1] = (~i.rex & 0x7) << 5 | m;\n+      i.vex.bytes[1] = (~i.rex & 0x7) << 5 | i.tm.opcode_modifier.opcodespace;\n \n       i.vex.bytes[2] = (w << 7\n \t\t\t| register_specifier << 3\n@@ -3799,8 +3793,7 @@ static void\n build_evex_prefix (void)\n {\n   unsigned int register_specifier;\n-  unsigned int implied_prefix;\n-  unsigned int m, w;\n+  unsigned int implied_prefix, w;\n   rex_byte vrex_used = 0;\n \n   /* Check register specifier.  */\n@@ -3851,26 +3844,11 @@ build_evex_prefix (void)\n   i.vex.length = 4;\n   i.vex.bytes[0] = 0x62;\n \n-  /* mmmm bits.  */\n-  switch (i.tm.opcode_modifier.opcodeprefix)\n-    {\n-    case VEX0F:\n-      m = 1;\n-      break;\n-    case VEX0F38:\n-      m = 2;\n-      break;\n-    case VEX0F3A:\n-      m = 3;\n-      break;\n-    default:\n-      abort ();\n-      break;\n-    }\n-\n   /* The high 3 bits of the second EVEX byte are 1's compliment of RXB\n      bits from REX.  */\n-  i.vex.bytes[1] = (~i.rex & 0x7) << 5 | m;\n+  gas_assert (i.tm.opcode_modifier.opcodespace >= SPACE_0F);\n+  gas_assert (i.tm.opcode_modifier.opcodespace <= SPACE_0F3A);\n+  i.vex.bytes[1] = (~i.rex & 0x7) << 5 | i.tm.opcode_modifier.opcodespace;\n \n   /* The fifth bit of the second EVEX byte is 1's compliment of the\n      REX_R bit in VREX.  */\n@@ -4416,7 +4394,7 @@ load_insn_p (void)\n       /* vldmxcsr.  */\n       if (i.tm.base_opcode == 0xae\n \t  && i.tm.opcode_modifier.vex\n-\t  && i.tm.opcode_modifier.opcodeprefix == VEX0F\n+\t  && i.tm.opcode_modifier.opcodespace == SPACE_0F\n \t  && i.tm.extension_opcode == 2)\n \treturn 1;\n     }"
    },
    {
      "sha": "aba592bbb88440f047a704df199c6f060115dae0",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/441f6aca3923ba65db139f5c2557a5f01e190edc/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/441f6aca3923ba65db139f5c2557a5f01e190edc/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=441f6aca3923ba65db139f5c2557a5f01e190edc",
      "patch": "@@ -1,3 +1,17 @@\n+2021-03-23  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-gen.c (opcode_modifiers): New OpcodeSpace element.\n+\t* i386-opc.h (OpcodeSpace): New enumerator.\n+\t(VEX0F, VEX0F38, VEX0F3A, XOP08, XOP09, XOP0A): Rename to ...\n+\t(SPACE_BASE, SPACE_0F, SPACE_0F38, SPACE_0F3A, SPACE_XOP08,\n+\tSPACE_XOP09, SPACE_XOP0A): ... respectively.\n+\t(struct i386_opcode_modifier): New field opcodespace. Shrink\n+\topcodeprefix field.\n+\ti386-opc.tbl (Space0F, Space0F38, Space0F3A, SpaceXOP08,\n+\tSpaceXOP09, SpaceXOP0A): Define. Use them to replace\n+\tOpcodePrefix uses.\n+\t* i386-tbl.h: Re-generate.\n+\n 2021-03-22  Martin Liska  <mliska@suse.cz>\n \n \t* aarch64-dis.c (parse_aarch64_dis_option): Replace usage of CONST_STRNEQ with startswith."
    },
    {
      "sha": "84dbd45c552ce853ebdbb5e1bf4ca487f80de85f",
      "filename": "opcodes/i386-gen.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/441f6aca3923ba65db139f5c2557a5f01e190edc/opcodes/i386-gen.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/441f6aca3923ba65db139f5c2557a5f01e190edc/opcodes/i386-gen.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-gen.c?ref=441f6aca3923ba65db139f5c2557a5f01e190edc",
      "patch": "@@ -719,6 +719,7 @@ static bitfield opcode_modifiers[] =\n   BITFIELD (Vex),\n   BITFIELD (VexVVVV),\n   BITFIELD (VexW),\n+  BITFIELD (OpcodeSpace),\n   BITFIELD (OpcodePrefix),\n   BITFIELD (VexSources),\n   BITFIELD (SIB),"
    },
    {
      "sha": "4708d8681cc473dc0e60f037ac1610870f32b074",
      "filename": "opcodes/i386-opc.h",
      "status": "modified",
      "additions": 21,
      "deletions": 16,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/441f6aca3923ba65db139f5c2557a5f01e190edc/opcodes/i386-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/441f6aca3923ba65db139f5c2557a5f01e190edc/opcodes/i386-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.h?ref=441f6aca3923ba65db139f5c2557a5f01e190edc",
      "patch": "@@ -575,7 +575,25 @@ enum\n #define VEXW1\t2\n #define VEXWIG\t3\n   VexW,\n-  /* Regular opcode prefix:\n+  /* Opcode encoding space (values chosen to be usable directly in\n+     VEX/XOP mmmmm and EVEX mm fields):\n+     0: Base opcode space.\n+     1: 0F opcode prefix / space.\n+     2: 0F38 opcode prefix / space.\n+     3: 0F3A opcode prefix / space.\n+     8: XOP 08 opcode space.\n+     9: XOP 09 opcode space.\n+     A: XOP 0A opcode space.\n+   */\n+#define SPACE_BASE\t0\n+#define SPACE_0F\t1\n+#define SPACE_0F38\t2\n+#define SPACE_0F3A\t3\n+#define SPACE_XOP08\t8\n+#define SPACE_XOP09\t9\n+#define SPACE_XOP0A\t0xA\n+  OpcodeSpace,\n+  /* Opcode prefix:\n      0: None\n      1: Add 0x66 opcode prefix.\n      2: Add 0xf2 opcode prefix.\n@@ -585,20 +603,6 @@ enum\n #define PREFIX_0X66\t1\n #define PREFIX_0XF2\t2\n #define PREFIX_0XF3\t3\n-  /* VEX opcode prefix:\n-     0: VEX 0x0F opcode prefix.\n-     1: VEX 0x0F38 opcode prefix.\n-     2: VEX 0x0F3A opcode prefix\n-     3: XOP 0x08 opcode prefix.\n-     4: XOP 0x09 opcode prefix\n-     5: XOP 0x0A opcode prefix.\n-   */\n-#define VEX0F\t\t0\n-#define VEX0F38\t\t1\n-#define VEX0F3A\t\t2\n-#define XOP08\t\t3\n-#define XOP09\t\t4\n-#define XOP0A\t\t5\n   OpcodePrefix,\n   /* number of VEX source operands:\n      0: <= 2 source operands.\n@@ -742,7 +746,8 @@ typedef struct i386_opcode_modifier\n   unsigned int vex:2;\n   unsigned int vexvvvv:2;\n   unsigned int vexw:2;\n-  unsigned int opcodeprefix:3;\n+  unsigned int opcodespace:4;\n+  unsigned int opcodeprefix:2;\n   unsigned int vexsources:2;\n   unsigned int sib:3;\n   unsigned int sse2avx:1;"
    },
    {
      "sha": "7d0ec3c1f3c23bfb25cd3ca433025b96dae6fa97",
      "filename": "opcodes/i386-opc.tbl",
      "status": "modified",
      "additions": 2149,
      "deletions": 2142,
      "changes": 4291,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/441f6aca3923ba65db139f5c2557a5f01e190edc/opcodes/i386-opc.tbl",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/441f6aca3923ba65db139f5c2557a5f01e190edc/opcodes/i386-opc.tbl",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.tbl?ref=441f6aca3923ba65db139f5c2557a5f01e190edc"
    },
    {
      "sha": "947aa9ce765f7fcee285975bffc607cbd4c1243a",
      "filename": "opcodes/i386-tbl.h",
      "status": "modified",
      "additions": 7156,
      "deletions": 7156,
      "changes": 14312,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/441f6aca3923ba65db139f5c2557a5f01e190edc/opcodes/i386-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/441f6aca3923ba65db139f5c2557a5f01e190edc/opcodes/i386-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-tbl.h?ref=441f6aca3923ba65db139f5c2557a5f01e190edc"
    }
  ]
}