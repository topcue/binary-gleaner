{
  "sha": "28688adf8f883fdd8b642a446ec5578236e84b1e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Mjg2ODhhZGY4Zjg4M2ZkZDhiNjQyYTQ0NmVjNTU3ODIzNmU4NGIxZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:33:35Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:47:58Z"
    },
    "message": "Share thread_rec between gdb and gdbserver\n\nThis changes gdb and gdbserver to use the same calling convention for\nthe \"thread_rec\" helper function.  Fully merging these is difficult\ndue to differences in how threads are managed by the enclosing\napplications; but sharing a declaration makes it possible for future\nshared code to call this method.\n\ngdb/ChangeLog\n2020-04-08  Tom Tromey  <tromey@adacore.com>\n\n\t* windows-nat.c (enum thread_disposition_type): Move to\n\tnat/windows-nat.h.\n\t(windows_nat::thread_rec): Rename from thread_rec.  No longer\n\tstatic.\n\t(windows_add_thread, windows_nat_target::fetch_registers)\n\t(windows_nat_target::store_registers, handle_exception)\n\t(windows_nat_target::resume, get_windows_debug_event)\n\t(windows_nat_target::get_tib_address)\n\t(windows_nat_target::thread_name)\n\t(windows_nat_target::thread_alive): Update.\n\t* nat/windows-nat.h (enum thread_disposition_type): Move from\n\twindows-nat.c.\n\t(thread_rec): Declare.\n\ngdbserver/ChangeLog\n2020-04-08  Tom Tromey  <tromey@adacore.com>\n\n\t* win32-low.c (windows_nat::thread_rec): Rename from thread_rec.\n\tNo longer static.  Change parameters.\n\t(child_add_thread, child_fetch_inferior_registers)\n\t(child_store_inferior_registers, win32_resume)\n\t(win32_get_tib_address): Update.",
    "tree": {
      "sha": "2183e5c7e4a1f52946c5d2c7b6d4bf1deeff1d09",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2183e5c7e4a1f52946c5d2c7b6d4bf1deeff1d09"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/28688adf8f883fdd8b642a446ec5578236e84b1e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/28688adf8f883fdd8b642a446ec5578236e84b1e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/28688adf8f883fdd8b642a446ec5578236e84b1e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/28688adf8f883fdd8b642a446ec5578236e84b1e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4834dad062658ef49ef86c9c48eb004c48a242a5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4834dad062658ef49ef86c9c48eb004c48a242a5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4834dad062658ef49ef86c9c48eb004c48a242a5"
    }
  ],
  "stats": {
    "total": 128,
    "additions": 79,
    "deletions": 49
  },
  "files": [
    {
      "sha": "9b2ec339d711c7c0baa50e4fe057b158e8f55239",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28688adf8f883fdd8b642a446ec5578236e84b1e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28688adf8f883fdd8b642a446ec5578236e84b1e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=28688adf8f883fdd8b642a446ec5578236e84b1e",
      "patch": "@@ -1,3 +1,19 @@\n+2020-04-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* windows-nat.c (enum thread_disposition_type): Move to\n+\tnat/windows-nat.h.\n+\t(windows_nat::thread_rec): Rename from thread_rec.  No longer\n+\tstatic.\n+\t(windows_add_thread, windows_nat_target::fetch_registers)\n+\t(windows_nat_target::store_registers, handle_exception)\n+\t(windows_nat_target::resume, get_windows_debug_event)\n+\t(windows_nat_target::get_tib_address)\n+\t(windows_nat_target::thread_name)\n+\t(windows_nat_target::thread_alive): Update.\n+\t* nat/windows-nat.h (enum thread_disposition_type): Move from\n+\twindows-nat.c.\n+\t(thread_rec): Declare.\n+\n 2020-04-08  Tom Tromey  <tromey@adacore.com>\n \n \t* windows-nat.c: Add \"using namespace\"."
    },
    {
      "sha": "e63ef753c920f29931eb0eef260aaa3b576697fd",
      "filename": "gdb/nat/windows-nat.h",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28688adf8f883fdd8b642a446ec5578236e84b1e/gdb/nat/windows-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28688adf8f883fdd8b642a446ec5578236e84b1e/gdb/nat/windows-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.h?ref=28688adf8f883fdd8b642a446ec5578236e84b1e",
      "patch": "@@ -90,6 +90,27 @@ struct windows_thread_info\n   gdb::unique_xmalloc_ptr<char> name;\n };\n \n+\n+/* Possible values to pass to 'thread_rec'.  */\n+enum thread_disposition_type\n+{\n+  /* Do not invalidate the thread's context, and do not suspend the\n+     thread.  */\n+  DONT_INVALIDATE_CONTEXT,\n+  /* Invalidate the context, but do not suspend the thread.  */\n+  DONT_SUSPEND,\n+  /* Invalidate the context and suspend the thread.  */\n+  INVALIDATE_CONTEXT\n+};\n+\n+/* Find a thread record given a thread id.  THREAD_DISPOSITION\n+   controls whether the thread is suspended, and whether the context\n+   is invalidated.\n+\n+   This function must be supplied by the embedding application.  */\n+extern windows_thread_info *thread_rec (ptid_t ptid,\n+\t\t\t\t\tthread_disposition_type disposition);\n+\n }\n \n #endif"
    },
    {
      "sha": "550a8cfc3d32c2f9f9efee5657c62108a5c3eeae",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 22,
      "deletions": 39,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28688adf8f883fdd8b642a446ec5578236e84b1e/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28688adf8f883fdd8b642a446ec5578236e84b1e/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=28688adf8f883fdd8b642a446ec5578236e84b1e",
      "patch": "@@ -456,26 +456,13 @@ check (BOOL ok, const char *file, int line)\n \t\t     (unsigned) GetLastError ());\n }\n \n-/* Possible values to pass to 'thread_rec'.  */\n-enum thread_disposition_type\n-{\n-  /* Do not invalidate the thread's context, and do not suspend the\n-     thread.  */\n-  DONT_INVALIDATE_CONTEXT,\n-  /* Invalidate the context, but do not suspend the thread.  */\n-  DONT_SUSPEND,\n-  /* Invalidate the context and suspend the thread.  */\n-  INVALIDATE_CONTEXT\n-};\n+/* See nat/windows-nat.h.  */\n \n-/* Find a thread record given a thread id.  THREAD_DISPOSITION\n-   controls whether the thread is suspended, and whether the context\n-   is invalidated.  */\n-static windows_thread_info *\n-thread_rec (DWORD id, enum thread_disposition_type disposition)\n+windows_thread_info *\n+windows_nat::thread_rec (ptid_t ptid, thread_disposition_type disposition)\n {\n   for (windows_thread_info *th : thread_list)\n-    if (th->tid == id)\n+    if (th->tid == ptid.lwp ())\n       {\n \tif (!th->suspended)\n \t  {\n@@ -485,7 +472,7 @@ thread_rec (DWORD id, enum thread_disposition_type disposition)\n \t\t/* Nothing.  */\n \t\tbreak;\n \t      case INVALIDATE_CONTEXT:\n-\t\tif (id != current_event.dwThreadId)\n+\t\tif (ptid.lwp () != current_event.dwThreadId)\n \t\t  th->suspend ();\n \t\tth->reload_context = true;\n \t\tbreak;\n@@ -513,13 +500,10 @@ static windows_thread_info *\n windows_add_thread (ptid_t ptid, HANDLE h, void *tlb, bool main_thread_p)\n {\n   windows_thread_info *th;\n-  DWORD id;\n \n   gdb_assert (ptid.lwp () != 0);\n \n-  id = ptid.lwp ();\n-\n-  if ((th = thread_rec (id, DONT_INVALIDATE_CONTEXT)))\n+  if ((th = thread_rec (ptid, DONT_INVALIDATE_CONTEXT)))\n     return th;\n \n   CORE_ADDR base = (CORE_ADDR) (uintptr_t) tlb;\n@@ -529,7 +513,7 @@ windows_add_thread (ptid_t ptid, HANDLE h, void *tlb, bool main_thread_p)\n   if (wow64_process)\n     base += 0x2000;\n #endif\n-  th = new windows_thread_info (id, h, base);\n+  th = new windows_thread_info (ptid.lwp (), h, base);\n   thread_list.push_back (th);\n \n   /* Add this new thread to the list of threads.\n@@ -716,8 +700,7 @@ windows_fetch_one_register (struct regcache *regcache,\n void\n windows_nat_target::fetch_registers (struct regcache *regcache, int r)\n {\n-  DWORD tid = regcache->ptid ().lwp ();\n-  windows_thread_info *th = thread_rec (tid, INVALIDATE_CONTEXT);\n+  windows_thread_info *th = thread_rec (regcache->ptid (), INVALIDATE_CONTEXT);\n \n   /* Check if TH exists.  Windows sometimes uses a non-existent\n      thread id in its events.  */\n@@ -812,8 +795,7 @@ windows_store_one_register (const struct regcache *regcache,\n void\n windows_nat_target::store_registers (struct regcache *regcache, int r)\n {\n-  DWORD tid = regcache->ptid ().lwp ();\n-  windows_thread_info *th = thread_rec (tid, INVALIDATE_CONTEXT);\n+  windows_thread_info *th = thread_rec (regcache->ptid (), INVALIDATE_CONTEXT);\n \n   /* Check if TH exists.  Windows sometimes uses a non-existent\n      thread id in its events.  */\n@@ -1353,7 +1335,8 @@ handle_exception (struct target_waitstatus *ourstatus)\n   ourstatus->kind = TARGET_WAITKIND_STOPPED;\n \n   /* Record the context of the current thread.  */\n-  thread_rec (current_event.dwThreadId, DONT_SUSPEND);\n+  thread_rec (ptid_t (current_event.dwProcessId, current_event.dwThreadId, 0),\n+\t      DONT_SUSPEND);\n \n   switch (code)\n     {\n@@ -1483,7 +1466,9 @@ handle_exception (struct target_waitstatus *ourstatus)\n \t  if (named_thread_id == (DWORD) -1)\n \t    named_thread_id = current_event.dwThreadId;\n \n-\t  named_thread = thread_rec (named_thread_id, DONT_INVALIDATE_CONTEXT);\n+\t  named_thread = thread_rec (ptid_t (current_event.dwProcessId,\n+\t\t\t\t\t     named_thread_id, 0),\n+\t\t\t\t     DONT_INVALIDATE_CONTEXT);\n \t  if (named_thread != NULL)\n \t    {\n \t      int thread_name_len;\n@@ -1714,7 +1699,7 @@ windows_nat_target::resume (ptid_t ptid, int step, enum gdb_signal sig)\n \t       ptid.pid (), (unsigned) ptid.lwp (), step, sig));\n \n   /* Get context for currently selected thread.  */\n-  th = thread_rec (inferior_ptid.lwp (), DONT_INVALIDATE_CONTEXT);\n+  th = thread_rec (inferior_ptid, DONT_INVALIDATE_CONTEXT);\n   if (th)\n     {\n #ifdef __x86_64__\n@@ -1847,7 +1832,7 @@ windows_nat_target::get_windows_debug_event (int pid,\n \t  current_event = iter->event;\n \n \t  inferior_ptid = ptid_t (current_event.dwProcessId, thread_id, 0);\n-\t  current_thread = thread_rec (thread_id, INVALIDATE_CONTEXT);\n+\t  current_thread = thread_rec (inferior_ptid, INVALIDATE_CONTEXT);\n \t  current_thread->reload_context = 1;\n \n \t  DEBUG_EVENTS ((\"get_windows_debug_event - \"\n@@ -2060,7 +2045,8 @@ windows_nat_target::get_windows_debug_event (int pid,\n \t      == EXCEPTION_BREAKPOINT)\n \t  && windows_initialization_done)\n \t{\n-\t  th = thread_rec (thread_id, INVALIDATE_CONTEXT);\n+\t  ptid_t ptid = ptid_t (current_event.dwProcessId, thread_id, 0);\n+\t  th = thread_rec (ptid, INVALIDATE_CONTEXT);\n \t  th->stopped_at_software_breakpoint = true;\n \t}\n       pending_stops.push_back ({thread_id, *ourstatus, current_event});\n@@ -2072,7 +2058,7 @@ windows_nat_target::get_windows_debug_event (int pid,\n       inferior_ptid = ptid_t (current_event.dwProcessId, thread_id, 0);\n       current_thread = th;\n       if (!current_thread)\n-\tcurrent_thread = thread_rec (thread_id, INVALIDATE_CONTEXT);\n+\tcurrent_thread = thread_rec (inferior_ptid, INVALIDATE_CONTEXT);\n     }\n \n out:\n@@ -3548,7 +3534,7 @@ windows_nat_target::get_tib_address (ptid_t ptid, CORE_ADDR *addr)\n {\n   windows_thread_info *th;\n \n-  th = thread_rec (ptid.lwp (), DONT_INVALIDATE_CONTEXT);\n+  th = thread_rec (ptid, DONT_INVALIDATE_CONTEXT);\n   if (th == NULL)\n     return false;\n \n@@ -3569,7 +3555,7 @@ windows_nat_target::get_ada_task_ptid (long lwp, long thread)\n const char *\n windows_nat_target::thread_name (struct thread_info *thr)\n {\n-  return thread_rec (thr->ptid.lwp (), DONT_INVALIDATE_CONTEXT)->name.get ();\n+  return thread_rec (thr->ptid, DONT_INVALIDATE_CONTEXT)->name.get ();\n }\n \n \n@@ -3728,12 +3714,9 @@ cygwin_get_dr7 (void)\n bool\n windows_nat_target::thread_alive (ptid_t ptid)\n {\n-  int tid;\n-\n   gdb_assert (ptid.lwp () != 0);\n-  tid = ptid.lwp ();\n \n-  return (WaitForSingleObject (thread_rec (tid, DONT_INVALIDATE_CONTEXT)->h, 0)\n+  return (WaitForSingleObject (thread_rec (ptid, DONT_INVALIDATE_CONTEXT)->h, 0)\n \t  != WAIT_OBJECT_0);\n }\n "
    },
    {
      "sha": "0ef8b48986465524a51b854f5816b1288e12ec9a",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28688adf8f883fdd8b642a446ec5578236e84b1e/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28688adf8f883fdd8b642a446ec5578236e84b1e/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=28688adf8f883fdd8b642a446ec5578236e84b1e",
      "patch": "@@ -1,3 +1,11 @@\n+2020-04-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* win32-low.c (windows_nat::thread_rec): Rename from thread_rec.\n+\tNo longer static.  Change parameters.\n+\t(child_add_thread, child_fetch_inferior_registers)\n+\t(child_store_inferior_registers, win32_resume)\n+\t(win32_get_tib_address): Update.\n+\n 2020-04-08  Tom Tromey  <tromey@adacore.com>\n \n \t* win32-low.h (struct win32_target_ops): Use qualified names where"
    },
    {
      "sha": "1e86b3b59264579572ef67ddf7beeea59e2e249a",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 12,
      "deletions": 10,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28688adf8f883fdd8b642a446ec5578236e84b1e/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28688adf8f883fdd8b642a446ec5578236e84b1e/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=28688adf8f883fdd8b642a446ec5578236e84b1e",
      "patch": "@@ -178,17 +178,17 @@ win32_require_context (windows_thread_info *th)\n     }\n }\n \n-/* Find a thread record given a thread id.  If GET_CONTEXT is set then\n-   also retrieve the context for this thread.  */\n-static windows_thread_info *\n-thread_rec (ptid_t ptid, int get_context)\n+/* See nat/windows-nat.h.  */\n+\n+windows_thread_info *\n+windows_nat::thread_rec (ptid_t ptid, thread_disposition_type disposition)\n {\n   thread_info *thread = find_thread_ptid (ptid);\n   if (thread == NULL)\n     return NULL;\n \n   windows_thread_info *th = (windows_thread_info *) thread_target_data (thread);\n-  if (get_context)\n+  if (disposition != DONT_INVALIDATE_CONTEXT)\n     win32_require_context (th);\n   return th;\n }\n@@ -200,7 +200,7 @@ child_add_thread (DWORD pid, DWORD tid, HANDLE h, void *tlb)\n   windows_thread_info *th;\n   ptid_t ptid = ptid_t (pid, tid, 0);\n \n-  if ((th = thread_rec (ptid, FALSE)))\n+  if ((th = thread_rec (ptid, DONT_INVALIDATE_CONTEXT)))\n     return th;\n \n   th = new windows_thread_info (tid, h, (CORE_ADDR) (uintptr_t) tlb);\n@@ -454,7 +454,8 @@ static void\n child_fetch_inferior_registers (struct regcache *regcache, int r)\n {\n   int regno;\n-  windows_thread_info *th = thread_rec (current_thread_ptid (), TRUE);\n+  windows_thread_info *th = thread_rec (current_thread_ptid (),\n+\t\t\t\t\tINVALIDATE_CONTEXT);\n   if (r == -1 || r > NUM_REGS)\n     child_fetch_inferior_registers (regcache, NUM_REGS);\n   else\n@@ -468,7 +469,8 @@ static void\n child_store_inferior_registers (struct regcache *regcache, int r)\n {\n   int regno;\n-  windows_thread_info *th = thread_rec (current_thread_ptid (), TRUE);\n+  windows_thread_info *th = thread_rec (current_thread_ptid (),\n+\t\t\t\t\tINVALIDATE_CONTEXT);\n   if (r == -1 || r == 0 || r > NUM_REGS)\n     child_store_inferior_registers (regcache, NUM_REGS);\n   else\n@@ -937,7 +939,7 @@ win32_process_target::resume (thread_resume *resume_info, size_t n)\n \n   /* Get context for the currently selected thread.  */\n   ptid = debug_event_ptid (&current_event);\n-  th = thread_rec (ptid, FALSE);\n+  th = thread_rec (ptid, DONT_INVALIDATE_CONTEXT);\n   if (th)\n     {\n       win32_prepare_to_resume (th);\n@@ -1807,7 +1809,7 @@ int\n win32_process_target::get_tib_address (ptid_t ptid, CORE_ADDR *addr)\n {\n   windows_thread_info *th;\n-  th = thread_rec (ptid, 0);\n+  th = thread_rec (ptid, DONT_INVALIDATE_CONTEXT);\n   if (th == NULL)\n     return 0;\n   if (addr != NULL)"
    }
  ]
}