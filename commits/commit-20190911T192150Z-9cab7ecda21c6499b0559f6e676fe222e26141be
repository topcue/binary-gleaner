{
  "sha": "9cab7ecda21c6499b0559f6e676fe222e26141be",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWNhYjdlY2RhMjFjNjQ5OWIwNTU5ZjZlNjc2ZmUyMjJlMjYxNDFiZQ==",
  "commit": {
    "author": {
      "name": "Ali Tamur",
      "email": "tamur@google.com",
      "date": "2019-08-28T01:58:57Z"
    },
    "committer": {
      "name": "Ali Tamur",
      "email": "tamur@google.com",
      "date": "2019-09-11T19:21:50Z"
    },
    "message": "Fix float to LONGEST conversion.\n\nThe code used to have undefined behaviour when template parameter is float and\nhost_float is NaN, because it attempted to convert NaN value to LONGEST at the\nlast statement. This frequently caused crashes on tests that checked \"info\nall-registers\" (at least when the code is compiled with clang; I didn't test\nwith gdb).\n\ngdb/ChangeLog:\n\n\t*target-float.c (host_float_ops<T>::to_longest): Update\n\timplementation.",
    "tree": {
      "sha": "48692643c655d394dfc56b8afa81d738b6821ccf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/48692643c655d394dfc56b8afa81d738b6821ccf"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9cab7ecda21c6499b0559f6e676fe222e26141be",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9cab7ecda21c6499b0559f6e676fe222e26141be",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9cab7ecda21c6499b0559f6e676fe222e26141be",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9cab7ecda21c6499b0559f6e676fe222e26141be/comments",
  "author": {
    "login": "alitamur",
    "id": 59383390,
    "node_id": "MDQ6VXNlcjU5MzgzMzkw",
    "avatar_url": "https://avatars.githubusercontent.com/u/59383390?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alitamur",
    "html_url": "https://github.com/alitamur",
    "followers_url": "https://api.github.com/users/alitamur/followers",
    "following_url": "https://api.github.com/users/alitamur/following{/other_user}",
    "gists_url": "https://api.github.com/users/alitamur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alitamur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alitamur/subscriptions",
    "organizations_url": "https://api.github.com/users/alitamur/orgs",
    "repos_url": "https://api.github.com/users/alitamur/repos",
    "events_url": "https://api.github.com/users/alitamur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alitamur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "alitamur",
    "id": 59383390,
    "node_id": "MDQ6VXNlcjU5MzgzMzkw",
    "avatar_url": "https://avatars.githubusercontent.com/u/59383390?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alitamur",
    "html_url": "https://github.com/alitamur",
    "followers_url": "https://api.github.com/users/alitamur/followers",
    "following_url": "https://api.github.com/users/alitamur/following{/other_user}",
    "gists_url": "https://api.github.com/users/alitamur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alitamur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alitamur/subscriptions",
    "organizations_url": "https://api.github.com/users/alitamur/orgs",
    "repos_url": "https://api.github.com/users/alitamur/repos",
    "events_url": "https://api.github.com/users/alitamur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alitamur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "67547d896b0593b0fa62e23ac68c483a7e8566e2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/67547d896b0593b0fa62e23ac68c483a7e8566e2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/67547d896b0593b0fa62e23ac68c483a7e8566e2"
    }
  ],
  "stats": {
    "total": 22,
    "additions": 16,
    "deletions": 6
  },
  "files": [
    {
      "sha": "eccd4ef2bdd79da07c56cd34c2ea3f4216ecf4a8",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9cab7ecda21c6499b0559f6e676fe222e26141be/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9cab7ecda21c6499b0559f6e676fe222e26141be/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9cab7ecda21c6499b0559f6e676fe222e26141be",
      "patch": "@@ -1,3 +1,8 @@\n+2019-09-11  Ali Tamur  <tamur@google.com>\n+\n+\t*gdb/target-float.c (host_float_ops<T>::to_longest): Update\n+\timplementation.\n+\n 2019-09-11  Christian Biesinger  <cbiesinger@google.com>\n \n \t* dbxread.c (read_dbx_symtab): Update."
    },
    {
      "sha": "0fd71c0dc335f0e6b0fa76a7e8ad24187d97bf79",
      "filename": "gdb/target-float.c",
      "status": "modified",
      "additions": 11,
      "deletions": 6,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9cab7ecda21c6499b0559f6e676fe222e26141be/gdb/target-float.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9cab7ecda21c6499b0559f6e676fe222e26141be/gdb/target-float.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-float.c?ref=9cab7ecda21c6499b0559f6e676fe222e26141be",
      "patch": "@@ -1007,13 +1007,18 @@ host_float_ops<T>::to_longest (const gdb_byte *addr,\n {\n   T host_float;\n   from_target (type, addr, &host_float);\n-  /* Converting an out-of-range value is undefined behavior in C, but we\n-     prefer to return a defined value here.  */\n-  if (host_float > std::numeric_limits<LONGEST>::max())\n-    return std::numeric_limits<LONGEST>::max();\n-  if (host_float < std::numeric_limits<LONGEST>::min())\n+  T min_possible_range = static_cast<T>(std::numeric_limits<LONGEST>::min());\n+  T max_possible_range = -min_possible_range;\n+  /* host_float can be converted to an integer as long as it's in\n+     the range [min_possible_range, max_possible_range). If not, it is either\n+     too large, or too small, or is NaN; in this case return the maximum or\n+     minimum possible value.  */\n+  if (host_float < max_possible_range && host_float >= min_possible_range)\n+    return static_cast<LONGEST> (host_float);\n+  if (host_float < min_possible_range)\n     return std::numeric_limits<LONGEST>::min();\n-  return (LONGEST) host_float;\n+  /* This line will be executed if host_float is NaN.  */\n+  return std::numeric_limits<LONGEST>::max();\n }\n \n /* Convert signed integer VAL to a target floating-number of type TYPE"
    }
  ]
}