{
  "sha": "2f2287318b33ddf855a692fcc191f6b25caf4644",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmYyMjg3MzE4YjMzZGRmODU1YTY5MmZjYzE5MWY2YjI1Y2FmNDY0NA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-16T17:18:40Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-12-16T17:18:40Z"
    },
    "message": "[gdb/cli] Add a progress meter\n\nAdd a progress meter.  It's not used anywhere yet.\n\ngdb/ChangeLog:\n\n2020-12-16  Tom Tromey  <tom@tromey.com>\n\t    Tom Tromey  <tromey@redhat.com>\n\t    Tom de Vries  <tdevries@suse.de>\n\n\t* utils.h (get_chars_per_line): Declare.\n\t* utils.c (get_chars_per_line): New function.\n\t(fputs_maybe_filtered): Handle '\\r'.\n\t* ui-out.h (ui_out::progress_meter): New class.\n\t(ui_out::progress, ui_out::do_progress_start)\n\t(ui_out::do_progress_notify, ui_out::do_progress_end): New\n\tmethods.\n\t* ui-out.c (do_progress_end)\n\t(make_cleanup_ui_out_progress_begin_end, ui_out_progress): New\n\tfunctions.\n\t* mi/mi-out.h (mi_ui_out::do_progress_start)\n\t(mi_ui_out::do_progress_notify, mi_ui_out::do_progress_end): New\n\tmethods.\n\t* cli-out.h (struct cli_ui_out) <do_progress_start,\n\tdo_progress_notify, do_progress_end>: New methods.\n\t<enum meter_stat, struct cli_progress_info>: New.\n\t<m_meters>: New member.\n\t* cli-out.c (cli_ui_out::do_progress_start)\n\t(cli_ui_out::do_progress_notify, cli_ui_out::do_progress_end): New\n\tmethods.",
    "tree": {
      "sha": "a4ed9af701499455d0eb659a29e912117b565a1e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a4ed9af701499455d0eb659a29e912117b565a1e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2f2287318b33ddf855a692fcc191f6b25caf4644",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f2287318b33ddf855a692fcc191f6b25caf4644",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2f2287318b33ddf855a692fcc191f6b25caf4644",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f2287318b33ddf855a692fcc191f6b25caf4644/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1e61189d0ab0905178002120eb0a380858ed6dc0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1e61189d0ab0905178002120eb0a380858ed6dc0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1e61189d0ab0905178002120eb0a380858ed6dc0"
    }
  ],
  "stats": {
    "total": 224,
    "additions": 224,
    "deletions": 0
  },
  "files": [
    {
      "sha": "5dc879b0443375584e6d644c548d2f348852e324",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f2287318b33ddf855a692fcc191f6b25caf4644/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f2287318b33ddf855a692fcc191f6b25caf4644/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2f2287318b33ddf855a692fcc191f6b25caf4644",
      "patch": "@@ -1,3 +1,28 @@\n+2020-12-16  Tom Tromey  <tom@tromey.com>\n+\t    Tom Tromey  <tromey@redhat.com>\n+\t    Tom de Vries  <tdevries@suse.de>\n+\n+\t* utils.h (get_chars_per_line): Declare.\n+\t* utils.c (get_chars_per_line): New function.\n+\t(fputs_maybe_filtered): Handle '\\r'.\n+\t* ui-out.h (ui_out::progress_meter): New class.\n+\t(ui_out::progress, ui_out::do_progress_start)\n+\t(ui_out::do_progress_notify, ui_out::do_progress_end): New\n+\tmethods.\n+\t* ui-out.c (do_progress_end)\n+\t(make_cleanup_ui_out_progress_begin_end, ui_out_progress): New\n+\tfunctions.\n+\t* mi/mi-out.h (mi_ui_out::do_progress_start)\n+\t(mi_ui_out::do_progress_notify, mi_ui_out::do_progress_end): New\n+\tmethods.\n+\t* cli-out.h (struct cli_ui_out) <do_progress_start,\n+\tdo_progress_notify, do_progress_end>: New methods.\n+\t<enum meter_stat, struct cli_progress_info>: New.\n+\t<m_meters>: New member.\n+\t* cli-out.c (cli_ui_out::do_progress_start)\n+\t(cli_ui_out::do_progress_notify, cli_ui_out::do_progress_end): New\n+\tmethods.\n+\n 2020-12-16  Luis Machado  <luis.machado@linaro.org>\n \n \t* aarch64-tdep.c (aarch64_record_data_proc_simd_fp): Record FPSR."
    },
    {
      "sha": "7722ecc4fec3bc39a49879499ac5207a26c030ee",
      "filename": "gdb/cli-out.c",
      "status": "modified",
      "additions": 101,
      "deletions": 0,
      "changes": 101,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f2287318b33ddf855a692fcc191f6b25caf4644/gdb/cli-out.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f2287318b33ddf855a692fcc191f6b25caf4644/gdb/cli-out.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli-out.c?ref=2f2287318b33ddf855a692fcc191f6b25caf4644",
      "patch": "@@ -265,6 +265,107 @@ cli_ui_out::do_redirect (ui_file *outstream)\n     m_streams.pop_back ();\n }\n \n+/* The cli_ui_out::do_progress_* functions result in the following:\n+   - printed for tty, SHOULD_PRINT == true:\n+     <NAME\n+      [#####                      ]\\r>\n+   - printed for tty, SHOULD_PRINT == false:\n+     <>\n+   - printed for not-a-tty:\n+     <NAME...done.\n+     >\n+*/\n+\n+void\n+cli_ui_out::do_progress_start (const std::string &name, bool should_print)\n+{\n+  struct ui_file *stream = m_streams.back ();\n+  cli_progress_info meter;\n+\n+  meter.last_value = 0;\n+  meter.name = name;\n+  if (!stream->isatty ())\n+    {\n+      fprintf_unfiltered (stream, \"%s...\", meter.name.c_str ());\n+      gdb_flush (stream);\n+      meter.printing = WORKING;\n+    }\n+  else\n+    {\n+      /* Don't actually emit anything until the first call notifies us\n+\t of progress.  This makes it so a second progress message can\n+\t be started before the first one has been notified, without\n+\t messy output.  */\n+      meter.printing = should_print ? START : NO_PRINT;\n+    }\n+\n+  m_meters.push_back (std::move (meter));\n+}\n+\n+void\n+cli_ui_out::do_progress_notify (double howmuch)\n+{\n+  struct ui_file *stream = m_streams.back ();\n+  cli_progress_info &meter (m_meters.back ());\n+\n+  if (meter.printing == NO_PRINT)\n+    return;\n+\n+  if (meter.printing == START)\n+    {\n+      fprintf_unfiltered (stream, \"%s\\n\", meter.name.c_str ());\n+      gdb_flush (stream);\n+      meter.printing = WORKING;\n+    }\n+\n+  if (meter.printing == WORKING && howmuch >= 1.0)\n+    return;\n+\n+  if (!stream->isatty ())\n+    return;\n+\n+  int chars_per_line = get_chars_per_line ();\n+  if (chars_per_line > 0)\n+    {\n+      int i, max;\n+      int width = chars_per_line - 3;\n+\n+      max = width * howmuch;\n+      fprintf_unfiltered (stream, \"\\r[\");\n+      for (i = 0; i < width; ++i)\n+\tfprintf_unfiltered (stream, i < max ? \"#\" : \" \");\n+      fprintf_unfiltered (stream, \"]\");\n+      gdb_flush (stream);\n+      meter.printing = PROGRESS;\n+    }\n+}\n+\n+void\n+cli_ui_out::do_progress_end ()\n+{\n+  struct ui_file *stream = m_streams.back ();\n+  cli_progress_info &meter = m_meters.back ();\n+\n+  if (!stream->isatty ())\n+    {\n+      fprintf_unfiltered (stream, \"done.\\n\");\n+      gdb_flush (stream);\n+    }\n+  else if (meter.printing == PROGRESS)\n+    {\n+      int i;\n+      int width = get_chars_per_line () - 3;\n+\n+      fprintf_unfiltered (stream, \"\\r\");\n+      for (i = 0; i < width + 2; ++i)\n+\tfprintf_unfiltered (stream, \" \");\n+      fprintf_unfiltered (stream, \"\\r\");\n+      gdb_flush (stream);\n+    }\n+\n+  m_meters.pop_back ();\n+}\n+\n /* local functions */\n \n void"
    },
    {
      "sha": "5f55554fdbce31d4398aa323582900c5f4a2a398",
      "filename": "gdb/cli-out.h",
      "status": "modified",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f2287318b33ddf855a692fcc191f6b25caf4644/gdb/cli-out.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f2287318b33ddf855a692fcc191f6b25caf4644/gdb/cli-out.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli-out.h?ref=2f2287318b33ddf855a692fcc191f6b25caf4644",
      "patch": "@@ -71,6 +71,10 @@ class cli_ui_out : public ui_out\n   virtual void do_flush () override;\n   virtual void do_redirect (struct ui_file *outstream) override;\n \n+  virtual void do_progress_start (const std::string &, bool) override;\n+  virtual void do_progress_notify (double) override;\n+  virtual void do_progress_end () override;\n+\n   bool suppress_output ()\n   { return m_suppress_output; }\n \n@@ -80,6 +84,33 @@ class cli_ui_out : public ui_out\n \n   std::vector<ui_file *> m_streams;\n   bool m_suppress_output;\n+\n+  /* Represents the printing state of a progress meter.  */\n+  enum meter_state\n+  {\n+    /* Printing will start with the next output.  */\n+    START,\n+    /* Printing has already started.  */\n+    WORKING,\n+    /* Progress printing has already started.  */\n+    PROGRESS,\n+    /* Printing should not be done.  */\n+    NO_PRINT\n+  };\n+\n+  /* The state of a recent progress meter.  */\n+  struct cli_progress_info\n+  {\n+    /* The current state.  */\n+    enum meter_state printing;\n+    /* The name to print.  */\n+    std::string name;\n+    /* The last notification value.  */\n+    double last_value;\n+  };\n+\n+  /* Stack of progress meters.  */\n+  std::vector<cli_progress_info> m_meters;\n };\n \n extern cli_ui_out *cli_out_new (struct ui_file *stream);"
    },
    {
      "sha": "da8f4e645745d0f1f88ab6047b728b4d8033b60a",
      "filename": "gdb/mi/mi-out.h",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f2287318b33ddf855a692fcc191f6b25caf4644/gdb/mi/mi-out.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f2287318b33ddf855a692fcc191f6b25caf4644/gdb/mi/mi-out.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-out.h?ref=2f2287318b33ddf855a692fcc191f6b25caf4644",
      "patch": "@@ -83,6 +83,18 @@ class mi_ui_out : public ui_out\n   virtual bool do_is_mi_like_p () const override\n   { return true; }\n \n+  virtual void do_progress_start (const std::string &, bool) override\n+  {\n+  }\n+\n+  virtual void do_progress_notify (double) override\n+  {\n+  }\n+\n+  virtual void do_progress_end () override\n+  {\n+  }\n+\n private:\n \n   void field_separator ();"
    },
    {
      "sha": "dfd9679e4c8860fd98c3be3133fb9ebef5b60642",
      "filename": "gdb/ui-out.h",
      "status": "modified",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f2287318b33ddf855a692fcc191f6b25caf4644/gdb/ui-out.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f2287318b33ddf855a692fcc191f6b25caf4644/gdb/ui-out.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ui-out.h?ref=2f2287318b33ddf855a692fcc191f6b25caf4644",
      "patch": "@@ -275,6 +275,39 @@ class ui_out\n      escapes.  */\n   virtual bool can_emit_style_escape () const = 0;\n \n+  /* An object that starts and finishes a progress meter.  */\n+  class progress_meter\n+  {\n+  public:\n+    /* SHOULD_PRINT indicates whether something should be printed for a tty.  */\n+    progress_meter (struct ui_out *uiout, const std::string &name,\n+\t\t    bool should_print)\n+      : m_uiout (uiout)\n+    {\n+      m_uiout->do_progress_start (name, should_print);\n+    }\n+\n+    ~progress_meter ()\n+    {\n+      m_uiout->do_progress_notify (1.0);\n+      m_uiout->do_progress_end ();\n+    }\n+\n+    progress_meter (const progress_meter &) = delete;\n+    progress_meter &operator= (const progress_meter &) = delete;\n+\n+  private:\n+\n+    struct ui_out *m_uiout;\n+  };\n+\n+  /* Emit some progress corresponding to the most recently created\n+     progress meter.  HOWMUCH may range from 0.0 to 1.0.  */\n+  void progress (double howmuch)\n+  {\n+    do_progress_notify (howmuch);\n+  }\n+\n  protected:\n \n   virtual void do_table_begin (int nbrofcols, int nr_rows, const char *tblid)\n@@ -309,6 +342,10 @@ class ui_out\n   virtual void do_flush () = 0;\n   virtual void do_redirect (struct ui_file *outstream) = 0;\n \n+  virtual void do_progress_start (const std::string &, bool) = 0;\n+  virtual void do_progress_notify (double) = 0;\n+  virtual void do_progress_end () = 0;\n+\n   /* Set as not MI-like by default.  It is overridden in subclasses if\n      necessary.  */\n "
    },
    {
      "sha": "abcf6e256b0dab215cefee199b4962b6f0aa1e3b",
      "filename": "gdb/utils.c",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f2287318b33ddf855a692fcc191f6b25caf4644/gdb/utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f2287318b33ddf855a692fcc191f6b25caf4644/gdb/utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.c?ref=2f2287318b33ddf855a692fcc191f6b25caf4644",
      "patch": "@@ -1579,6 +1579,14 @@ gdb_flush (struct ui_file *stream)\n   stream->flush ();\n }\n \n+/* See utils.h.  */\n+\n+int\n+get_chars_per_line ()\n+{\n+  return chars_per_line;\n+}\n+\n /* Indicate that if the next sequence of characters overflows the line,\n    a newline should be inserted here rather than when it hits the end.\n    If INDENT is non-null, it is a string to be printed to indent the\n@@ -1769,6 +1777,12 @@ fputs_maybe_filtered (const char *linebuffer, struct ui_file *stream,\n \t\t don't increment chars_printed here.  */\n \t      lineptr += skip_bytes;\n \t    }\n+\t  else if (*lineptr == '\\r')\n+\t    {\n+\t      wrap_buffer.push_back (*lineptr);\n+\t      chars_printed = 0;\n+\t      lineptr++;\n+\t    }\n \t  else\n \t    {\n \t      wrap_buffer.push_back (*lineptr);"
    },
    {
      "sha": "e87ce11323f73623400774b7f1021990c2909f8c",
      "filename": "gdb/utils.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2f2287318b33ddf855a692fcc191f6b25caf4644/gdb/utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2f2287318b33ddf855a692fcc191f6b25caf4644/gdb/utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/utils.h?ref=2f2287318b33ddf855a692fcc191f6b25caf4644",
      "patch": "@@ -364,6 +364,10 @@ extern void wrap_here (const char *);\n \n extern void reinitialize_more_filter (void);\n \n+/* Return the number of characters in a line.  */\n+\n+extern int get_chars_per_line ();\n+\n extern bool pagination_enabled;\n \n extern struct ui_file **current_ui_gdb_stdout_ptr (void);"
    }
  ]
}