{
  "sha": "2365f8d70c50afbfd6be69a4076ea6e78fb5485d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjM2NWY4ZDcwYzUwYWZiZmQ2YmU2OWE0MDc2ZWE2ZTc4ZmI1NDg1ZA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-18T08:03:14Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-18T08:08:13Z"
    },
    "message": "Yet more signed overflow fixes\n\n\t* elf-bfd.h (ELF_LOCAL_SYMBOL_HASH): Avoid signed overflow.\n\t* elf32-hppa.c (final_link_relocate): Likewise.\n\t* elf32-ppc.c (_bfd_elf_ppc_at_tls_transform): Likewise.\n\t(_bfd_elf_ppc_at_tprel_transform, is_insn_ds_form): Likewise.\n\t(is_insn_dq_form, ppc_elf_relocate_section): Likewise.\n\t* elf64-ppc.c (ok_lo_toc_insn, ppc64_elf_edit_toc): Likewise.\n\t(ppc64_elf_relocate_section): Likewise.\n\t* elfxx-mips.c (mips_elf_perform_relocation): Likewise.\n\t* netbsd.h (N_SET_FLAGS): Likewise.",
    "tree": {
      "sha": "fbb92f4ec54f3a4fb3efdff76ca0a248f6faf121",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fbb92f4ec54f3a4fb3efdff76ca0a248f6faf121"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2365f8d70c50afbfd6be69a4076ea6e78fb5485d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2365f8d70c50afbfd6be69a4076ea6e78fb5485d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2365f8d70c50afbfd6be69a4076ea6e78fb5485d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2365f8d70c50afbfd6be69a4076ea6e78fb5485d/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2480b6fa946bb2d2dc993b1c4a83a8e1258a75e8"
    }
  ],
  "stats": {
    "total": 232,
    "additions": 122,
    "deletions": 110
  },
  "files": [
    {
      "sha": "5d55a41a307cff171bf2c74b6bf9d0dc1ef2aca3",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2365f8d70c50afbfd6be69a4076ea6e78fb5485d/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2365f8d70c50afbfd6be69a4076ea6e78fb5485d/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=2365f8d70c50afbfd6be69a4076ea6e78fb5485d",
      "patch": "@@ -1,3 +1,15 @@\n+2019-12-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf-bfd.h (ELF_LOCAL_SYMBOL_HASH): Avoid signed overflow.\n+\t* elf32-hppa.c (final_link_relocate): Likewise.\n+\t* elf32-ppc.c (_bfd_elf_ppc_at_tls_transform): Likewise.\n+\t(_bfd_elf_ppc_at_tprel_transform, is_insn_ds_form): Likewise.\n+\t(is_insn_dq_form, ppc_elf_relocate_section): Likewise.\n+\t* elf64-ppc.c (ok_lo_toc_insn, ppc64_elf_edit_toc): Likewise.\n+\t(ppc64_elf_relocate_section): Likewise.\n+\t* elfxx-mips.c (mips_elf_perform_relocation): Likewise.\n+\t* netbsd.h (N_SET_FLAGS): Likewise.\n+\n 2019-12-17  Alan Modra  <amodra@gmail.com>\n \n \t* coff-tic80.c: Delete file."
    },
    {
      "sha": "2db6fcdb41c69765bb18b07aff447c11676b839a",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2365f8d70c50afbfd6be69a4076ea6e78fb5485d/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2365f8d70c50afbfd6be69a4076ea6e78fb5485d/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=2365f8d70c50afbfd6be69a4076ea6e78fb5485d",
      "patch": "@@ -2836,8 +2836,8 @@ extern asection _bfd_elf_large_com_section;\n /* Hash for local symbol with the first section id, ID, in the input\n    file and the local symbol index, SYM.  */\n #define ELF_LOCAL_SYMBOL_HASH(ID, SYM) \\\n-  (((((ID) & 0xff) << 24) | (((ID) & 0xff00) << 8)) \\\n-   ^ (SYM) ^ ((ID) >> 16))\n+  (((((ID) & 0xffU) << 24) | (((ID) & 0xff00) << 8)) \\\n+   ^ (SYM) ^ (((ID) & 0xffff0000U) >> 16))\n \n /* This is the condition under which finish_dynamic_symbol will be called.\n    If our finish_dynamic_symbol isn't called, we'll need to do something"
    },
    {
      "sha": "25b2cd5c17cb728ed6d8c5d85ccb574a5e6113e9",
      "filename": "bfd/elf32-hppa.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2365f8d70c50afbfd6be69a4076ea6e78fb5485d/bfd/elf32-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2365f8d70c50afbfd6be69a4076ea6e78fb5485d/bfd/elf32-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-hppa.c?ref=2365f8d70c50afbfd6be69a4076ea6e78fb5485d",
      "patch": "@@ -3221,7 +3221,7 @@ final_link_relocate (asection *input_section,\n \t\t     struct elf32_hppa_link_hash_entry *hh,\n \t\t     struct bfd_link_info *info)\n {\n-  int insn;\n+  unsigned int insn;\n   unsigned int r_type = ELF32_R_TYPE (rela->r_info);\n   unsigned int orig_r_type = r_type;\n   reloc_howto_type *howto = elf_hppa_howto_table + r_type;\n@@ -3340,7 +3340,7 @@ final_link_relocate (asection *input_section,\n \t      /* GCC sometimes uses a register other than r19 for the\n \t\t operation, so we must convert any addil instruction\n \t\t that uses this relocation.  */\n-\t      if ((insn & 0xfc000000) == ((int) OP_ADDIL << 26))\n+\t      if ((insn & 0xfc000000) == OP_ADDIL << 26)\n \t\tinsn = ADDIL_DP;\n \t      else\n \t\t/* We must have a ldil instruction.  It's too hard to find\n@@ -3374,8 +3374,8 @@ final_link_relocate (asection *input_section,\n \t instance: \"extern int foo\" with foo defined as \"const int foo\".  */\n       if (sym_sec == NULL || (sym_sec->flags & SEC_CODE) != 0)\n \t{\n-\t  if ((insn & ((0x3f << 26) | (0x1f << 21)))\n-\t      == (((int) OP_ADDIL << 26) | (27 << 21)))\n+\t  if ((insn & ((0x3fu << 26) | (0x1f << 21)))\n+\t      == ((OP_ADDIL << 26) | (27 << 21)))\n \t    {\n \t      insn &= ~ (0x1f << 21);\n \t    }"
    },
    {
      "sha": "71c35ad7871ed738d7e5709775aca49da4944b6c",
      "filename": "bfd/elf32-ppc.c",
      "status": "modified",
      "additions": 59,
      "deletions": 59,
      "changes": 118,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2365f8d70c50afbfd6be69a4076ea6e78fb5485d/bfd/elf32-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2365f8d70c50afbfd6be69a4076ea6e78fb5485d/bfd/elf32-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-ppc.c?ref=2365f8d70c50afbfd6be69a4076ea6e78fb5485d",
      "patch": "@@ -6843,7 +6843,7 @@ _bfd_elf_ppc_at_tls_transform (unsigned int insn, unsigned int reg)\n {\n   unsigned int rtra;\n \n-  if ((insn & (0x3f << 26)) != 31 << 26)\n+  if ((insn & (0x3fu << 26)) != 31 << 26)\n     return 0;\n \n   if (reg == 0 || ((insn >> 11) & 0x1f) == reg)\n@@ -6861,13 +6861,13 @@ _bfd_elf_ppc_at_tls_transform (unsigned int insn, unsigned int reg)\n \t       || ((insn & (0x1f << 6)) >= 16 << 6\n \t\t   && (insn & (0x1f << 6)) < 24 << 6)))\n     /* load and store indexed -> dform.  */\n-    insn = (32 | ((insn >> 6) & 0x1f)) << 26;\n+    insn = (32u | ((insn >> 6) & 0x1f)) << 26;\n   else if ((insn & (((0x1a << 5) | 0x1f) << 1)) == 21 << 1)\n     /* ldx, ldux, stdx, stdux -> ld, ldu, std, stdu.  */\n-    insn = ((58 | ((insn >> 6) & 4)) << 26) | ((insn >> 6) & 1);\n+    insn = ((58u | ((insn >> 6) & 4)) << 26) | ((insn >> 6) & 1);\n   else if ((insn & (((0x1f << 5) | 0x1f) << 1)) == 341 << 1)\n     /* lwax -> lwa.  */\n-    insn = (58 << 26) | 2;\n+    insn = (58u << 26) | 2;\n   else\n     return 0;\n   insn |= rtra;\n@@ -6882,36 +6882,36 @@ unsigned int\n _bfd_elf_ppc_at_tprel_transform (unsigned int insn, unsigned int reg)\n {\n   if ((insn & (0x1f << 16)) == reg << 16\n-      && ((insn & (0x3f << 26)) == 14u << 26 /* addi */\n-\t  || (insn & (0x3f << 26)) == 15u << 26 /* addis */\n-\t  || (insn & (0x3f << 26)) == 32u << 26 /* lwz */\n-\t  || (insn & (0x3f << 26)) == 34u << 26 /* lbz */\n-\t  || (insn & (0x3f << 26)) == 36u << 26 /* stw */\n-\t  || (insn & (0x3f << 26)) == 38u << 26 /* stb */\n-\t  || (insn & (0x3f << 26)) == 40u << 26 /* lhz */\n-\t  || (insn & (0x3f << 26)) == 42u << 26 /* lha */\n-\t  || (insn & (0x3f << 26)) == 44u << 26 /* sth */\n-\t  || (insn & (0x3f << 26)) == 46u << 26 /* lmw */\n-\t  || (insn & (0x3f << 26)) == 47u << 26 /* stmw */\n-\t  || (insn & (0x3f << 26)) == 48u << 26 /* lfs */\n-\t  || (insn & (0x3f << 26)) == 50u << 26 /* lfd */\n-\t  || (insn & (0x3f << 26)) == 52u << 26 /* stfs */\n-\t  || (insn & (0x3f << 26)) == 54u << 26 /* stfd */\n-\t  || ((insn & (0x3f << 26)) == 58u << 26 /* lwa,ld,lmd */\n+      && ((insn & (0x3fu << 26)) == 14u << 26 /* addi */\n+\t  || (insn & (0x3fu << 26)) == 15u << 26 /* addis */\n+\t  || (insn & (0x3fu << 26)) == 32u << 26 /* lwz */\n+\t  || (insn & (0x3fu << 26)) == 34u << 26 /* lbz */\n+\t  || (insn & (0x3fu << 26)) == 36u << 26 /* stw */\n+\t  || (insn & (0x3fu << 26)) == 38u << 26 /* stb */\n+\t  || (insn & (0x3fu << 26)) == 40u << 26 /* lhz */\n+\t  || (insn & (0x3fu << 26)) == 42u << 26 /* lha */\n+\t  || (insn & (0x3fu << 26)) == 44u << 26 /* sth */\n+\t  || (insn & (0x3fu << 26)) == 46u << 26 /* lmw */\n+\t  || (insn & (0x3fu << 26)) == 47u << 26 /* stmw */\n+\t  || (insn & (0x3fu << 26)) == 48u << 26 /* lfs */\n+\t  || (insn & (0x3fu << 26)) == 50u << 26 /* lfd */\n+\t  || (insn & (0x3fu << 26)) == 52u << 26 /* stfs */\n+\t  || (insn & (0x3fu << 26)) == 54u << 26 /* stfd */\n+\t  || ((insn & (0x3fu << 26)) == 58u << 26 /* lwa,ld,lmd */\n \t      && (insn & 3) != 1)\n-\t  || ((insn & (0x3f << 26)) == 62u << 26 /* std, stmd */\n+\t  || ((insn & (0x3fu << 26)) == 62u << 26 /* std, stmd */\n \t      && ((insn & 3) == 0 || (insn & 3) == 3))))\n     {\n       insn &= ~(0x1f << 16);\n     }\n   else if ((insn & (0x1f << 21)) == reg << 21\n-\t   && ((insn & (0x3e << 26)) == 24u << 26 /* ori, oris */\n-\t       || (insn & (0x3e << 26)) == 26u << 26 /* xori,xoris */\n-\t       || (insn & (0x3e << 26)) == 28u << 26 /* andi,andis */))\n+\t   && ((insn & (0x3eu << 26)) == 24u << 26 /* ori, oris */\n+\t       || (insn & (0x3eu << 26)) == 26u << 26 /* xori,xoris */\n+\t       || (insn & (0x3eu << 26)) == 28u << 26 /* andi,andis */))\n     {\n       insn &= ~(0x1f << 21);\n       insn |= (insn & (0x1f << 16)) << 5;\n-      if ((insn & (0x3e << 26)) == 26 << 26 /* xori,xoris */)\n+      if ((insn & (0x3eu << 26)) == 26u << 26 /* xori,xoris */)\n \tinsn -= 2 >> 26;  /* convert to ori,oris */\n     }\n   else\n@@ -6922,17 +6922,17 @@ _bfd_elf_ppc_at_tprel_transform (unsigned int insn, unsigned int reg)\n static bfd_boolean\n is_insn_ds_form (unsigned int insn)\n {\n-  return ((insn & (0x3f << 26)) == 58u << 26 /* ld,ldu,lwa */\n-\t  || (insn & (0x3f << 26)) == 62u << 26 /* std,stdu,stq */\n-\t  || (insn & (0x3f << 26)) == 57u << 26 /* lfdp */\n-\t  || (insn & (0x3f << 26)) == 61u << 26 /* stfdp */);\n+  return ((insn & (0x3fu << 26)) == 58u << 26 /* ld,ldu,lwa */\n+\t  || (insn & (0x3fu << 26)) == 62u << 26 /* std,stdu,stq */\n+\t  || (insn & (0x3fu << 26)) == 57u << 26 /* lfdp */\n+\t  || (insn & (0x3fu << 26)) == 61u << 26 /* stfdp */);\n }\n \n static bfd_boolean\n is_insn_dq_form (unsigned int insn)\n {\n-  return ((insn & (0x3f << 26)) == 56u << 26 /* lq */\n-\t  || ((insn & (0x3f << 26)) == (61u << 26) /* lxv, stxv */\n+  return ((insn & (0x3fu << 26)) == 56u << 26 /* lq */\n+\t  || ((insn & (0x3fu << 26)) == (61u << 26) /* lxv, stxv */\n \t      && (insn & 3) == 1));\n }\n \n@@ -7245,7 +7245,7 @@ ppc_elf_relocate_section (bfd *output_bfd,\n \t\t{\n \t\t  /* IE */\n \t\t  insn1 &= (0x1f << 21) | (0x1f << 16);\n-\t\t  insn1 |= 32 << 26;\t/* lwz */\n+\t\t  insn1 |= 32u << 26;\t/* lwz */\n \t\t  if (offset != (bfd_vma) -1)\n \t\t    {\n \t\t      rel[1].r_info = ELF32_R_INFO (STN_UNDEF, R_PPC_NONE);\n@@ -7414,7 +7414,7 @@ ppc_elf_relocate_section (bfd *output_bfd,\n \n \t    insn = bfd_get_32 (input_bfd,\n \t\t\t       contents + rel->r_offset - d_offset);\n-\t    if ((insn & (0x3f << 26)) == 15u << 26\n+\t    if ((insn & (0x3fu << 26)) == 15u << 26\n \t\t&& (insn & (0x1f << 16)) != 0)\n \t      {\n \t\tif (!bfd_link_pic (info))\n@@ -7450,7 +7450,7 @@ ppc_elf_relocate_section (bfd *output_bfd,\n \t    {\n \t      insn = bfd_get_32 (input_bfd,\n \t\t\t\t contents + rel->r_offset - d_offset);\n-\t      if ((insn & (0x3f << 26)) == (15u << 26)\n+\t      if ((insn & (0x3fu << 26)) == (15u << 26)\n \t\t  && (insn & (0x1f << 16)) == 0 /* lis */)\n \t\t{\n \t\t  bfd_byte *p;\n@@ -7513,23 +7513,23 @@ ppc_elf_relocate_section (bfd *output_bfd,\n \t    {\n \t      insn = bfd_get_32 (input_bfd,\n \t\t\t\t contents + rel->r_offset - d_offset);\n-\t      if ((insn & (0x3f << 26)) == 14u << 26    /* addi */\n-\t\t  || (insn & (0x3f << 26)) == 32u << 26 /* lwz */\n-\t\t  || (insn & (0x3f << 26)) == 34u << 26 /* lbz */\n-\t\t  || (insn & (0x3f << 26)) == 36u << 26 /* stw */\n-\t\t  || (insn & (0x3f << 26)) == 38u << 26 /* stb */\n-\t\t  || (insn & (0x3f << 26)) == 40u << 26 /* lhz */\n-\t\t  || (insn & (0x3f << 26)) == 42u << 26 /* lha */\n-\t\t  || (insn & (0x3f << 26)) == 44u << 26 /* sth */\n-\t\t  || (insn & (0x3f << 26)) == 46u << 26 /* lmw */\n-\t\t  || (insn & (0x3f << 26)) == 47u << 26 /* stmw */\n-\t\t  || (insn & (0x3f << 26)) == 48u << 26 /* lfs */\n-\t\t  || (insn & (0x3f << 26)) == 50u << 26 /* lfd */\n-\t\t  || (insn & (0x3f << 26)) == 52u << 26 /* stfs */\n-\t\t  || (insn & (0x3f << 26)) == 54u << 26 /* stfd */\n-\t\t  || ((insn & (0x3f << 26)) == 58u << 26 /* lwa,ld,lmd */\n+\t      if ((insn & (0x3fu << 26)) == 14u << 26    /* addi */\n+\t\t  || (insn & (0x3fu << 26)) == 32u << 26 /* lwz */\n+\t\t  || (insn & (0x3fu << 26)) == 34u << 26 /* lbz */\n+\t\t  || (insn & (0x3fu << 26)) == 36u << 26 /* stw */\n+\t\t  || (insn & (0x3fu << 26)) == 38u << 26 /* stb */\n+\t\t  || (insn & (0x3fu << 26)) == 40u << 26 /* lhz */\n+\t\t  || (insn & (0x3fu << 26)) == 42u << 26 /* lha */\n+\t\t  || (insn & (0x3fu << 26)) == 44u << 26 /* sth */\n+\t\t  || (insn & (0x3fu << 26)) == 46u << 26 /* lmw */\n+\t\t  || (insn & (0x3fu << 26)) == 47u << 26 /* stmw */\n+\t\t  || (insn & (0x3fu << 26)) == 48u << 26 /* lfs */\n+\t\t  || (insn & (0x3fu << 26)) == 50u << 26 /* lfd */\n+\t\t  || (insn & (0x3fu << 26)) == 52u << 26 /* stfs */\n+\t\t  || (insn & (0x3fu << 26)) == 54u << 26 /* stfd */\n+\t\t  || ((insn & (0x3fu << 26)) == 58u << 26 /* lwa,ld,lmd */\n \t\t      && (insn & 3) != 1)\n-\t\t  || ((insn & (0x3f << 26)) == 62u << 26 /* std, stmd */\n+\t\t  || ((insn & (0x3fu << 26)) == 62u << 26 /* std, stmd */\n \t\t      && ((insn & 3) == 0 || (insn & 3) == 3)))\n \t\t{\n \t\t  /* Arrange to apply the reloc addend, if any.  */\n@@ -7639,7 +7639,7 @@ ppc_elf_relocate_section (bfd *output_bfd,\n \t    {\n \t      bfd_byte *p = contents + (rel->r_offset & ~3);\n \t      unsigned int insn = bfd_get_32 (input_bfd, p);\n-\t      if ((insn & ((0x3f << 26) | 0x1f << 16))\n+\t      if ((insn & ((0x3fu << 26) | 0x1f << 16))\n \t\t  != ((15u << 26) | (2 << 16)) /* addis rt,2,imm */)\n \t\t/* xgettext:c-format */\n \t\tinfo->callbacks->minfo\n@@ -8993,11 +8993,11 @@ ppc_elf_relocate_section (bfd *output_bfd,\n \t      unsigned int insn;\n \n \t      insn = bfd_get_32 (input_bfd, contents + (rel->r_offset & ~3));\n-\t      if ((insn & (0x3f << 26)) == 10u << 26 /* cmpli */)\n+\t      if ((insn & (0x3fu << 26)) == 10u << 26 /* cmpli */)\n \t\tcomplain = complain_overflow_bitfield;\n-\t      else if ((insn & (0x3f << 26)) == 28u << 26 /* andi */\n-\t\t       || (insn & (0x3f << 26)) == 24u << 26 /* ori */\n-\t\t       || (insn & (0x3f << 26)) == 26u << 26 /* xori */)\n+\t      else if ((insn & (0x3fu << 26)) == 28u << 26 /* andi */\n+\t\t       || (insn & (0x3fu << 26)) == 24u << 26 /* ori */\n+\t\t       || (insn & (0x3fu << 26)) == 26u << 26 /* xori */)\n \t\tcomplain = complain_overflow_unsigned;\n \t    }\n \t  if (howto->complain_on_overflow != complain)\n@@ -9221,10 +9221,10 @@ ppc_elf_relocate_section (bfd *output_bfd,\n \t     . new_page:\t\tnew_page:\n \t     .  */\n \t  insn = bfd_get_32 (input_bfd, contents + offset);\n-\t  if ((insn & (0x3f << 26)) == (18u << 26)\t    /* b,bl,ba,bla */\n-\t      || ((insn & (0x3f << 26)) == (16u << 26)\t    /* bc,bcl,bca,bcla*/\n+\t  if ((insn & (0x3fu << 26)) == (18u << 26)\t    /* b,bl,ba,bla */\n+\t      || ((insn & (0x3fu << 26)) == (16u << 26)\t    /* bc,bcl,bca,bcla*/\n \t\t  && (insn & (0x14 << 21)) == (0x14 << 21)) /*\t with BO=0x14 */\n-\t      || ((insn & (0x3f << 26)) == (19u << 26)\n+\t      || ((insn & (0x3fu << 26)) == (19u << 26)\n \t\t  && (insn & (0x3ff << 1)) == (16u << 1)    /* bclr,bclrl */\n \t\t  && (insn & (0x14 << 21)) == (0x14 << 21)))/*\t with BO=0x14 */\n \t    continue;\n@@ -9308,7 +9308,7 @@ ppc_elf_relocate_section (bfd *output_bfd,\n \t  else\n \t    rel = NULL;\n \n-\t  if ((insn & (0x3f << 26)) == (16u << 26) /* bc */\n+\t  if ((insn & (0x3fu << 26)) == (16u << 26) /* bc */\n \t      && (insn & 2) == 0 /* relative */)\n \t    {\n \t      bfd_vma delta = ((insn & 0xfffc) ^ 0x8000) - 0x8000;"
    },
    {
      "sha": "52a96cffc1df5cc2ce29c416e9f2d1d0c1724096",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 43,
      "deletions": 43,
      "changes": 86,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2365f8d70c50afbfd6be69a4076ea6e78fb5485d/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2365f8d70c50afbfd6be69a4076ea6e78fb5485d/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=2365f8d70c50afbfd6be69a4076ea6e78fb5485d",
      "patch": "@@ -8259,34 +8259,34 @@ adjust_toc_syms (struct elf_link_hash_entry *h, void *inf)\n static bfd_boolean\n ok_lo_toc_insn (unsigned int insn, enum elf_ppc64_reloc_type r_type)\n {\n-  return ((insn & (0x3f << 26)) == 12u << 26 /* addic */\n-\t  || (insn & (0x3f << 26)) == 14u << 26 /* addi */\n-\t  || (insn & (0x3f << 26)) == 32u << 26 /* lwz */\n-\t  || (insn & (0x3f << 26)) == 34u << 26 /* lbz */\n-\t  || (insn & (0x3f << 26)) == 36u << 26 /* stw */\n-\t  || (insn & (0x3f << 26)) == 38u << 26 /* stb */\n-\t  || (insn & (0x3f << 26)) == 40u << 26 /* lhz */\n-\t  || (insn & (0x3f << 26)) == 42u << 26 /* lha */\n-\t  || (insn & (0x3f << 26)) == 44u << 26 /* sth */\n-\t  || (insn & (0x3f << 26)) == 46u << 26 /* lmw */\n-\t  || (insn & (0x3f << 26)) == 47u << 26 /* stmw */\n-\t  || (insn & (0x3f << 26)) == 48u << 26 /* lfs */\n-\t  || (insn & (0x3f << 26)) == 50u << 26 /* lfd */\n-\t  || (insn & (0x3f << 26)) == 52u << 26 /* stfs */\n-\t  || (insn & (0x3f << 26)) == 54u << 26 /* stfd */\n-\t  || (insn & (0x3f << 26)) == 56u << 26 /* lq,lfq */\n-\t  || ((insn & (0x3f << 26)) == 57u << 26 /* lxsd,lxssp,lfdp */\n+  return ((insn & (0x3fu << 26)) == 12u << 26 /* addic */\n+\t  || (insn & (0x3fu << 26)) == 14u << 26 /* addi */\n+\t  || (insn & (0x3fu << 26)) == 32u << 26 /* lwz */\n+\t  || (insn & (0x3fu << 26)) == 34u << 26 /* lbz */\n+\t  || (insn & (0x3fu << 26)) == 36u << 26 /* stw */\n+\t  || (insn & (0x3fu << 26)) == 38u << 26 /* stb */\n+\t  || (insn & (0x3fu << 26)) == 40u << 26 /* lhz */\n+\t  || (insn & (0x3fu << 26)) == 42u << 26 /* lha */\n+\t  || (insn & (0x3fu << 26)) == 44u << 26 /* sth */\n+\t  || (insn & (0x3fu << 26)) == 46u << 26 /* lmw */\n+\t  || (insn & (0x3fu << 26)) == 47u << 26 /* stmw */\n+\t  || (insn & (0x3fu << 26)) == 48u << 26 /* lfs */\n+\t  || (insn & (0x3fu << 26)) == 50u << 26 /* lfd */\n+\t  || (insn & (0x3fu << 26)) == 52u << 26 /* stfs */\n+\t  || (insn & (0x3fu << 26)) == 54u << 26 /* stfd */\n+\t  || (insn & (0x3fu << 26)) == 56u << 26 /* lq,lfq */\n+\t  || ((insn & (0x3fu << 26)) == 57u << 26 /* lxsd,lxssp,lfdp */\n \t      /* Exclude lfqu by testing reloc.  If relocs are ever\n \t\t defined for the reduced D field in psq_lu then those\n \t\t will need testing too.  */\n \t      && r_type != R_PPC64_TOC16_LO && r_type != R_PPC64_GOT16_LO)\n-\t  || ((insn & (0x3f << 26)) == 58u << 26 /* ld,lwa */\n+\t  || ((insn & (0x3fu << 26)) == 58u << 26 /* ld,lwa */\n \t      && (insn & 1) == 0)\n-\t  || (insn & (0x3f << 26)) == 60u << 26 /* stfq */\n-\t  || ((insn & (0x3f << 26)) == 61u << 26 /* lxv,stx{v,sd,ssp},stfdp */\n+\t  || (insn & (0x3fu << 26)) == 60u << 26 /* stfq */\n+\t  || ((insn & (0x3fu << 26)) == 61u << 26 /* lxv,stx{v,sd,ssp},stfdp */\n \t      /* Exclude stfqu.  psq_stu as above for psq_lu.  */\n \t      && r_type != R_PPC64_TOC16_LO && r_type != R_PPC64_GOT16_LO)\n-\t  || ((insn & (0x3f << 26)) == 62u << 26 /* std,stq */\n+\t  || ((insn & (0x3fu << 26)) == 62u << 26 /* std,stq */\n \t      && (insn & 1) == 0));\n }\n \n@@ -9117,7 +9117,7 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n \t\t  insn = bfd_get_32 (ibfd, buf);\n \t\t  if (insn_check == check_lo\n \t\t      ? !ok_lo_toc_insn (insn, r_type)\n-\t\t      : ((insn & ((0x3f << 26) | 0x1f << 16))\n+\t\t      : ((insn & ((0x3fu << 26) | 0x1f << 16))\n \t\t\t != ((15u << 26) | (2 << 16)) /* addis rt,2,imm */))\n \t\t    {\n \t\t      char str[12];\n@@ -9188,7 +9188,7 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n \t\t\t\t\t\t rel->r_offset & ~3, 4))\n \t\t    goto got_error_ret;\n \t\t  insn = bfd_get_32 (ibfd, buf);\n-\t\t  if (((insn & ((0x3f << 26) | 0x1f << 16))\n+\t\t  if (((insn & ((0x3fu << 26) | 0x1f << 16))\n \t\t       != ((15u << 26) | (2 << 16)) /* addis rt,2,imm */))\n \t\t    continue;\n \t\t  break;\n@@ -9201,7 +9201,7 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n \t\t\t\t\t\t rel->r_offset & ~3, 4))\n \t\t    goto got_error_ret;\n \t\t  insn = bfd_get_32 (ibfd, buf);\n-\t\t  if ((insn & (0x3f << 26 | 0x3)) != 58u << 26 /* ld */)\n+\t\t  if ((insn & (0x3fu << 26 | 0x3)) != 58u << 26 /* ld */)\n \t\t    continue;\n \t\t  break;\n \n@@ -9218,7 +9218,7 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n \t\t  if ((insn & (-1u << 18)) != ((1u << 26) | (1u << 20)))\n \t\t    continue;\n \t\t  insn = bfd_get_32 (ibfd, buf + 4);\n-\t\t  if ((insn & (0x3f << 26)) != 57u << 26)\n+\t\t  if ((insn & (0x3fu << 26)) != 57u << 26)\n \t\t    continue;\n \t\t  break;\n \t\t}\n@@ -14537,7 +14537,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \n \tcase R_PPC64_LO_DS_OPT:\n \t  insn = bfd_get_32 (input_bfd, contents + rel->r_offset - d_offset);\n-\t  if ((insn & (0x3f << 26)) != 58u << 26)\n+\t  if ((insn & (0x3fu << 26)) != 58u << 26)\n \t    abort ();\n \t  insn += (14u << 26) - (58u << 26);\n \t  bfd_put_32 (input_bfd, insn, contents + rel->r_offset - d_offset);\n@@ -14679,7 +14679,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t  /* For pcrel IE to LE we already have the full\n \t\t     offset and thus don't need an addi here.  A nop\n \t\t     or mr will do.  */\n-\t\t  if ((insn & (0x3f << 26)) == 14 << 26)\n+\t\t  if ((insn & (0x3fu << 26)) == 14 << 26)\n \t\t    {\n \t\t      /* Extract regs from addi rt,ra,si.  */\n \t\t      unsigned int rt = (insn >> 21) & 0x1f;\n@@ -14759,7 +14759,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t{\n \t\t  /* IE */\n \t\t  insn1 &= (0x1f << 21) | (0x1f << 16);\n-\t\t  insn1 |= 58 << 26;\t/* ld */\n+\t\t  insn1 |= 58u << 26;\t/* ld */\n \t\t  insn2 = 0x7c636a14;\t/* add 3,3,13 */\n \t\t  if (offset != (bfd_vma) -1)\n \t\t    rel[1].r_info = ELF64_R_INFO (STN_UNDEF, R_PPC64_NONE);\n@@ -15434,7 +15434,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t      && SYMBOL_REFERENCES_LOCAL (info, &h->elf))\n \t    {\n \t      insn = bfd_get_32 (input_bfd, contents + (rel->r_offset & ~3));\n-\t      if ((insn & (0x3f << 26 | 0x3)) == 58u << 26 /* ld */)\n+\t      if ((insn & (0x3fu << 26 | 0x3)) == 58u << 26 /* ld */)\n \t\t{\n \t\t  insn += (14u << 26) - (58u << 26);\n \t\t  bfd_put_32 (input_bfd, insn, contents + (rel->r_offset & ~3));\n@@ -15451,14 +15451,14 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t      && SYMBOL_REFERENCES_LOCAL (info, &h->elf))\n \t    {\n \t      insn = bfd_get_32 (input_bfd, contents + (rel->r_offset & ~3));\n-\t      if ((insn & (0x3f << 26 | 0x3)) == 58u << 26 /* ld */)\n+\t      if ((insn & (0x3fu << 26 | 0x3)) == 58u << 26 /* ld */)\n \t\t{\n \t\t  insn += (14u << 26) - (58u << 26);\n \t\t  bfd_put_32 (input_bfd, insn, contents + (rel->r_offset & ~3));\n \t\t  r_type = R_PPC64_TOC16_LO;\n \t\t  rel->r_info = ELF64_R_INFO (r_symndx, r_type);\n \t\t}\n-\t      else if ((insn & (0x3f << 26)) == 15u << 26 /* addis */)\n+\t      else if ((insn & (0x3fu << 26)) == 15u << 26 /* addis */)\n \t\t{\n \t\t  r_type = R_PPC64_TOC16_HA;\n \t\t  rel->r_info = ELF64_R_INFO (r_symndx, r_type);\n@@ -16418,10 +16418,10 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    {\n \t      bfd_byte *p = contents + (rel->r_offset & ~3);\n \t      insn = bfd_get_32 (input_bfd, p);\n-\t      if ((insn & (0x3f << 26)) == 12u << 26 /* addic */)\n+\t      if ((insn & (0x3fu << 26)) == 12u << 26 /* addic */)\n \t\t{\n \t\t  /* Transform addic to addi when we change reg.  */\n-\t\t  insn &= ~((0x3f << 26) | (0x1f << 16));\n+\t\t  insn &= ~((0x3fu << 26) | (0x1f << 16));\n \t\t  insn |= (14u << 26) | (2 << 16);\n \t\t}\n \t      else\n@@ -16438,7 +16438,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    {\n \t      bfd_byte *p = contents + (rel->r_offset & ~3);\n \t      insn = bfd_get_32 (input_bfd, p);\n-\t      if ((insn & ((0x3f << 26) | 0x1f << 16))\n+\t      if ((insn & ((0x3fu << 26) | 0x1f << 16))\n \t\t  != ((15u << 26) | (13 << 16)) /* addis rt,13,imm */)\n \t\t/* xgettext:c-format */\n \t\tinfo->callbacks->minfo\n@@ -16547,8 +16547,8 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t     forms of all the _DS relocs bloats all reloc switches in\n \t     this file.  It doesn't make much sense to use these\n \t     relocs in data, so testing the insn should be safe.  */\n-\t  if ((insn & (0x3f << 26)) == (56u << 26)\n-\t      || ((insn & (0x3f << 26)) == (61u << 26) && (insn & 3) == 1))\n+\t  if ((insn & (0x3fu << 26)) == (56u << 26)\n+\t      || ((insn & (0x3fu << 26)) == (61u << 26) && (insn & 3) == 1))\n \t    mask = 15;\n \t  relocation += addend;\n \t  addend = insn & (mask ^ 3);\n@@ -16597,15 +16597,15 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t  enum complain_overflow complain = complain_overflow_signed;\n \n \t  insn = bfd_get_32 (input_bfd, contents + (rel->r_offset & ~3));\n-\t  if ((insn & (0x3f << 26)) == 10u << 26 /* cmpli */)\n+\t  if ((insn & (0x3fu << 26)) == 10u << 26 /* cmpli */)\n \t    complain = complain_overflow_bitfield;\n \t  else if (howto->rightshift == 0\n-\t\t   ? ((insn & (0x3f << 26)) == 28u << 26 /* andi */\n-\t\t      || (insn & (0x3f << 26)) == 24u << 26 /* ori */\n-\t\t      || (insn & (0x3f << 26)) == 26u << 26 /* xori */)\n-\t\t   : ((insn & (0x3f << 26)) == 29u << 26 /* andis */\n-\t\t      || (insn & (0x3f << 26)) == 25u << 26 /* oris */\n-\t\t      || (insn & (0x3f << 26)) == 27u << 26 /* xoris */))\n+\t\t   ? ((insn & (0x3fu << 26)) == 28u << 26 /* andi */\n+\t\t      || (insn & (0x3fu << 26)) == 24u << 26 /* ori */\n+\t\t      || (insn & (0x3fu << 26)) == 26u << 26 /* xori */)\n+\t\t   : ((insn & (0x3fu << 26)) == 29u << 26 /* andis */\n+\t\t      || (insn & (0x3fu << 26)) == 25u << 26 /* oris */\n+\t\t      || (insn & (0x3fu << 26)) == 27u << 26 /* xoris */))\n \t    complain = complain_overflow_unsigned;\n \t  if (howto->complain_on_overflow != complain)\n \t    {"
    },
    {
      "sha": "3656046eea4f43e48836a53abf7719d7a7f07ca2",
      "filename": "bfd/elfxx-mips.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2365f8d70c50afbfd6be69a4076ea6e78fb5485d/bfd/elfxx-mips.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2365f8d70c50afbfd6be69a4076ea6e78fb5485d/bfd/elfxx-mips.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-mips.c?ref=2365f8d70c50afbfd6be69a4076ea6e78fb5485d",
      "patch": "@@ -6602,7 +6602,7 @@ mips_elf_perform_relocation (struct bfd_link_info *info,\n \t}\n \n       /* Make this the JALX opcode.  */\n-      x = (x & ~(0x3f << 26)) | (jalx_opcode << 26);\n+      x = (x & ~(0x3fu << 26)) | (jalx_opcode << 26);\n     }\n   else if (cross_mode_jump_p && b_reloc_p (r_type))\n     {"
    },
    {
      "sha": "47963dc3e451f8afadbff69050f1d8018c2fd255",
      "filename": "bfd/netbsd.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2365f8d70c50afbfd6be69a4076ea6e78fb5485d/bfd/netbsd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2365f8d70c50afbfd6be69a4076ea6e78fb5485d/bfd/netbsd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/netbsd.h?ref=2365f8d70c50afbfd6be69a4076ea6e78fb5485d",
      "patch": "@@ -48,7 +48,7 @@\n \t ((execp)->a_info & 0xfb00ffff) | ((((int) (machtype)) & 0x3ff) << 16))\n #define N_SET_FLAGS(execp, flags) \\\n \t((execp)->a_info = \\\n-\t ((execp)->a_info & 0x03ffffff) | ((flags & 0x03f) << 26))\n+\t ((execp)->a_info & 0x03ffffff) | ((flags & 0x3fu) << 26))\n \n #include \"sysdep.h\"\n #include \"bfd.h\""
    }
  ]
}