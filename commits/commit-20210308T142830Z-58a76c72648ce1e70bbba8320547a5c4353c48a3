{
  "sha": "58a76c72648ce1e70bbba8320547a5c4353c48a3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NThhNzZjNzI2NDhjZTFlNzBiYmJhODMyMDU0N2E1YzQzNTNjNDhhMw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:30Z"
    },
    "message": "Introduce classes for Fortran bound intrinsics\n\nThis adds class fortran_bound_1arg and fortran_bound_2arg, to\nimplement the Fortran lbound and ubound intrinsics.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* f-lang.c (fortran_bound_1arg::evaluate)\n\t(fortran_bound_2arg::evaluate): New methods.\n\t* f-exp.h (class fortran_bound_1arg, class fortran_bound_2arg):\n\tNew.",
    "tree": {
      "sha": "71d17343d39255fa0d26caa31eb6d1e27349ce1b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/71d17343d39255fa0d26caa31eb6d1e27349ce1b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/58a76c72648ce1e70bbba8320547a5c4353c48a3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/58a76c72648ce1e70bbba8320547a5c4353c48a3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/58a76c72648ce1e70bbba8320547a5c4353c48a3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/58a76c72648ce1e70bbba8320547a5c4353c48a3/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2f98abe174b50cf347761345c5e2dc8859dc63b9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f98abe174b50cf347761345c5e2dc8859dc63b9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2f98abe174b50cf347761345c5e2dc8859dc63b9"
    }
  ],
  "stats": {
    "total": 73,
    "additions": 73,
    "deletions": 0
  },
  "files": [
    {
      "sha": "6f3037c8c2804a35e40f228a4f2f858e26c23b49",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/58a76c72648ce1e70bbba8320547a5c4353c48a3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/58a76c72648ce1e70bbba8320547a5c4353c48a3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=58a76c72648ce1e70bbba8320547a5c4353c48a3",
      "patch": "@@ -1,3 +1,10 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* f-lang.c (fortran_bound_1arg::evaluate)\n+\t(fortran_bound_2arg::evaluate): New methods.\n+\t* f-exp.h (class fortran_bound_1arg, class fortran_bound_2arg):\n+\tNew.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (class unop_addr_operation) <get_expression>: New"
    },
    {
      "sha": "e1d351a2bb421c915ac754bba9447eca3a91a0a0",
      "filename": "gdb/f-exp.h",
      "status": "modified",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/58a76c72648ce1e70bbba8320547a5c4353c48a3/gdb/f-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/58a76c72648ce1e70bbba8320547a5c4353c48a3/gdb/f-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.h?ref=58a76c72648ce1e70bbba8320547a5c4353c48a3",
      "patch": "@@ -159,6 +159,38 @@ class fortran_undetermined\n \t\t\t enum noside noside);\n };\n \n+/* Single-argument form of Fortran ubound/lbound intrinsics.  */\n+class fortran_bound_1arg\n+  : public tuple_holding_operation<exp_opcode, operation_up>\n+{\n+public:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override;\n+\n+  enum exp_opcode opcode () const override\n+  { return std::get<0> (m_storage); }\n+};\n+\n+/* Two-argument form of Fortran ubound/lbound intrinsics.  */\n+class fortran_bound_2arg\n+  : public tuple_holding_operation<exp_opcode, operation_up, operation_up>\n+{\n+public:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override;\n+\n+  enum exp_opcode opcode () const override\n+  { return std::get<0> (m_storage); }\n+};\n+\n } /* namespace expr */\n \n #endif /* FORTRAN_EXP_H */"
    },
    {
      "sha": "dcd7c48bbcfec4b6a4395ad69017f3bfbdc874b6",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/58a76c72648ce1e70bbba8320547a5c4353c48a3/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/58a76c72648ce1e70bbba8320547a5c4353c48a3/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=58a76c72648ce1e70bbba8320547a5c4353c48a3",
      "patch": "@@ -1865,6 +1865,40 @@ fortran_undetermined::evaluate (struct type *expect_type,\n     }\n }\n \n+value *\n+fortran_bound_1arg::evaluate (struct type *expect_type,\n+\t\t\t      struct expression *exp,\n+\t\t\t      enum noside noside)\n+{\n+  bool lbound_p = std::get<0> (m_storage) == FORTRAN_LBOUND;\n+  value *arg1 = std::get<1> (m_storage)->evaluate (nullptr, exp, noside);\n+  fortran_require_array (value_type (arg1), lbound_p);\n+  return fortran_bounds_all_dims (lbound_p, exp->gdbarch, arg1);\n+}\n+\n+value *\n+fortran_bound_2arg::evaluate (struct type *expect_type,\n+\t\t\t      struct expression *exp,\n+\t\t\t      enum noside noside)\n+{\n+  bool lbound_p = std::get<0> (m_storage) == FORTRAN_LBOUND;\n+  value *arg1 = std::get<1> (m_storage)->evaluate (nullptr, exp, noside);\n+  fortran_require_array (value_type (arg1), lbound_p);\n+\n+  /* User asked for the bounds of a specific dimension of the array.  */\n+  value *arg2 = std::get<2> (m_storage)->evaluate (nullptr, exp, noside);\n+  struct type *type = check_typedef (value_type (arg2));\n+  if (type->code () != TYPE_CODE_INT)\n+    {\n+      if (lbound_p)\n+\terror (_(\"LBOUND second argument should be an integer\"));\n+      else\n+\terror (_(\"UBOUND second argument should be an integer\"));\n+    }\n+\n+  return fortran_bounds_for_dimension (lbound_p, exp->gdbarch, arg1, arg2);\n+}\n+\n } /* namespace expr */\n \n /* Special expression lengths for Fortran.  */"
    }
  ]
}