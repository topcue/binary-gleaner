{
  "sha": "aa1da9ed50fba2474438f83e6da577bb01ed4613",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWExZGE5ZWQ1MGZiYTI0NzQ0MzhmODNlNmRhNTc3YmIwMWVkNDYxMw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:40Z"
    },
    "message": "Remove now-unused Rust evaluator code\n\nNow that the Rust parser has switched to the new style, there is no\nneed for the old Rust evaluation code.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* rust-lang.h (class rust_language) <expression_ops,\n\texp_descriptor_tab>: Remove.\n\t* rust-lang.c (rust_evaluate_funcall): Remove.\n\t(rust_range, rust_subscript, eval_op_rust_complement): Don't use\n\tEVAL_SKIP.\n\t(rust_evaluate_subexp): Remove.\n\t(rust_aggregate_operation::evaluate): Don't use EVAL_SKIP.\n\t(rust_operator_length, rust_dump_subexp_body, rust_print_subexp)\n\t(rust_operator_check, rust_language::exp_descriptor_tab): Remove.",
    "tree": {
      "sha": "067271ca5285eba37ef9c46f976ece55738d2981",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/067271ca5285eba37ef9c46f976ece55738d2981"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/aa1da9ed50fba2474438f83e6da577bb01ed4613",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa1da9ed50fba2474438f83e6da577bb01ed4613",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/aa1da9ed50fba2474438f83e6da577bb01ed4613",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa1da9ed50fba2474438f83e6da577bb01ed4613/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "08a057e64bb74f4194a216f6693e04b1ad230f48",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/08a057e64bb74f4194a216f6693e04b1ad230f48",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/08a057e64bb74f4194a216f6693e04b1ad230f48"
    }
  ],
  "stats": {
    "total": 529,
    "additions": 13,
    "deletions": 516
  },
  "files": [
    {
      "sha": "9cafd0ce141fb9b182dffc19ed912d9875714e55",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa1da9ed50fba2474438f83e6da577bb01ed4613/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa1da9ed50fba2474438f83e6da577bb01ed4613/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=aa1da9ed50fba2474438f83e6da577bb01ed4613",
      "patch": "@@ -1,3 +1,15 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* rust-lang.h (class rust_language) <expression_ops,\n+\texp_descriptor_tab>: Remove.\n+\t* rust-lang.c (rust_evaluate_funcall): Remove.\n+\t(rust_range, rust_subscript, eval_op_rust_complement): Don't use\n+\tEVAL_SKIP.\n+\t(rust_evaluate_subexp): Remove.\n+\t(rust_aggregate_operation::evaluate): Don't use EVAL_SKIP.\n+\t(rust_operator_length, rust_dump_subexp_body, rust_print_subexp)\n+\t(rust_operator_check, rust_language::exp_descriptor_tab): Remove.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* ada-exp.y: Create operations."
    },
    {
      "sha": "a57ee988668c5a6bcd7e662c17d434f996c8ded3",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 506,
      "changes": 507,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa1da9ed50fba2474438f83e6da577bb01ed4613/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa1da9ed50fba2474438f83e6da577bb01ed4613/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=aa1da9ed50fba2474438f83e6da577bb01ed4613",
      "patch": "@@ -963,82 +963,6 @@ rust_slice_type (const char *name, struct type *elt_type,\n \n \f\n \n-/* A helper for rust_evaluate_subexp that handles OP_FUNCALL.  */\n-\n-static struct value *\n-rust_evaluate_funcall (struct expression *exp, int *pos, enum noside noside)\n-{\n-  int i;\n-  int num_args = exp->elts[*pos + 1].longconst;\n-  const char *method;\n-  struct value *function, *result, *arg0;\n-  struct type *type, *fn_type;\n-  const struct block *block;\n-  struct block_symbol sym;\n-\n-  /* For an ordinary function call we can simply defer to the\n-     generic implementation.  */\n-  if (exp->elts[*pos + 3].opcode != STRUCTOP_STRUCT)\n-    return evaluate_subexp_standard (NULL, exp, pos, noside);\n-\n-  /* Skip over the OP_FUNCALL and the STRUCTOP_STRUCT.  */\n-  *pos += 4;\n-  method = &exp->elts[*pos + 1].string;\n-  *pos += 3 + BYTES_TO_EXP_ELEM (exp->elts[*pos].longconst + 1);\n-\n-  /* Evaluate the argument to STRUCTOP_STRUCT, then find its\n-     type in order to look up the method.  */\n-  arg0 = evaluate_subexp (nullptr, exp, pos, noside);\n-\n-  if (noside == EVAL_SKIP)\n-    {\n-      for (i = 0; i < num_args; ++i)\n-\tevaluate_subexp (nullptr, exp, pos, noside);\n-      return arg0;\n-    }\n-\n-  std::vector<struct value *> args (num_args + 1);\n-  args[0] = arg0;\n-\n-  /* We don't yet implement real Deref semantics.  */\n-  while (value_type (args[0])->code () == TYPE_CODE_PTR)\n-    args[0] = value_ind (args[0]);\n-\n-  type = value_type (args[0]);\n-  if ((type->code () != TYPE_CODE_STRUCT\n-       && type->code () != TYPE_CODE_UNION\n-       && type->code () != TYPE_CODE_ENUM)\n-      || rust_tuple_type_p (type))\n-    error (_(\"Method calls only supported on struct or enum types\"));\n-  if (type->name () == NULL)\n-    error (_(\"Method call on nameless type\"));\n-\n-  std::string name = std::string (type->name ()) + \"::\" + method;\n-\n-  block = get_selected_block (0);\n-  sym = lookup_symbol (name.c_str (), block, VAR_DOMAIN, NULL);\n-  if (sym.symbol == NULL)\n-    error (_(\"Could not find function named '%s'\"), name.c_str ());\n-\n-  fn_type = SYMBOL_TYPE (sym.symbol);\n-  if (fn_type->num_fields () == 0)\n-    error (_(\"Function '%s' takes no arguments\"), name.c_str ());\n-\n-  if (fn_type->field (0).type ()->code () == TYPE_CODE_PTR)\n-    args[0] = value_addr (args[0]);\n-\n-  function = address_of_variable (sym.symbol, block);\n-\n-  for (i = 0; i < num_args; ++i)\n-    args[i + 1] = evaluate_subexp (nullptr, exp, pos, noside);\n-\n-  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n-    result = value_zero (TYPE_TARGET_TYPE (fn_type), not_lval);\n-  else\n-    result = call_function_by_hand (function, NULL, args);\n-  return result;\n-}\n-\n /* A helper for rust_evaluate_subexp that handles OP_RANGE.  */\n \n struct value *\n@@ -1055,9 +979,6 @@ rust_range (struct type *expect_type, struct expression *exp,\n \n   bool inclusive = !(kind & RANGE_HIGH_BOUND_EXCLUSIVE);\n \n-  if (noside == EVAL_SKIP)\n-    return value_from_longest (builtin_type (exp->gdbarch)->builtin_int, 1);\n-\n   if (low == NULL)\n     {\n       if (high == NULL)\n@@ -1181,9 +1102,6 @@ rust_subscript (struct type *expect_type, struct expression *exp,\n   LONGEST high = 0;\n   int want_slice = 0;\n \n-  if (noside == EVAL_SKIP)\n-    return lhs;\n-\n   rhstype = check_typedef (value_type (rhs));\n   if (rust_range_type_p (rhstype))\n     {\n@@ -1347,11 +1265,6 @@ eval_op_rust_complement (struct type *expect_type, struct expression *exp,\n \t\t\t enum exp_opcode opcode,\n \t\t\t struct value *value)\n {\n-  if (noside == EVAL_SKIP)\n-    {\n-      /* Preserving the type is enough.  */\n-      return value;\n-    }\n   if (value_type (value)->code () == TYPE_CODE_BOOL)\n     return value_from_longest (value_type (value), value_logical_not (value));\n   return value_complement (value);\n@@ -1502,204 +1415,6 @@ eval_op_rust_structop (struct type *expect_type, struct expression *exp,\n   return result;\n }\n \n-/* evaluate_exp implementation for Rust.  */\n-\n-static struct value *\n-rust_evaluate_subexp (struct type *expect_type, struct expression *exp,\n-\t\t      int *pos, enum noside noside)\n-{\n-  struct value *result;\n-  enum exp_opcode op = exp->elts[*pos].opcode;\n-\n-  switch (op)\n-    {\n-    case UNOP_IND:\n-      {\n-\tif (noside != EVAL_NORMAL)\n-\t  result = evaluate_subexp_standard (expect_type, exp, pos, noside);\n-\telse\n-\t  {\n-\t    ++*pos;\n-\t    struct value *value = evaluate_subexp (expect_type, exp, pos,\n-\t\t\t\t\t\t   noside);\n-\t    result = eval_op_rust_ind (expect_type, exp, noside, op, value);\n-\t  }\n-      }\n-      break;\n-\n-    case UNOP_COMPLEMENT:\n-      {\n-\tstruct value *value;\n-\n-\t++*pos;\n-\tvalue = evaluate_subexp (nullptr, exp, pos, noside);\n-\tresult = eval_op_rust_complement (expect_type, exp, noside, op, value);\n-      }\n-      break;\n-\n-    case BINOP_SUBSCRIPT:\n-      {\n-\t++*pos;\n-\tstruct value *lhs = evaluate_subexp (nullptr, exp, pos, noside);\n-\tstruct value *rhs = evaluate_subexp (nullptr, exp, pos, noside);\n-\tresult = rust_subscript (expect_type, exp, noside, false, lhs, rhs);\n-      }\n-      break;\n-\n-    case OP_FUNCALL:\n-      result = rust_evaluate_funcall (exp, pos, noside);\n-      break;\n-\n-    case OP_AGGREGATE:\n-      {\n-\tint pc = (*pos)++;\n-\tstruct type *type = exp->elts[pc + 1].type;\n-\tint arglen = longest_to_int (exp->elts[pc + 2].longconst);\n-\tint i;\n-\tCORE_ADDR addr = 0;\n-\tstruct value *addrval = NULL;\n-\n-\t*pos += 3;\n-\n-\tif (noside == EVAL_NORMAL)\n-\t  {\n-\t    addrval = value_allocate_space_in_inferior (TYPE_LENGTH (type));\n-\t    addr = value_as_long (addrval);\n-\t    result = value_at_lazy (type, addr);\n-\t  }\n-\n-\tif (arglen > 0 && exp->elts[*pos].opcode == OP_OTHERS)\n-\t  {\n-\t    struct value *init;\n-\n-\t    ++*pos;\n-\t    init = rust_evaluate_subexp (NULL, exp, pos, noside);\n-\t    if (noside == EVAL_NORMAL)\n-\t      {\n-\t\t/* This isn't quite right but will do for the time\n-\t\t   being, seeing that we can't implement the Copy\n-\t\t   trait anyway.  */\n-\t\tvalue_assign (result, init);\n-\t      }\n-\n-\t    --arglen;\n-\t  }\n-\n-\tgdb_assert (arglen % 2 == 0);\n-\tfor (i = 0; i < arglen; i += 2)\n-\t  {\n-\t    int len;\n-\t    const char *fieldname;\n-\t    struct value *value, *field;\n-\n-\t    gdb_assert (exp->elts[*pos].opcode == OP_NAME);\n-\t    ++*pos;\n-\t    len = longest_to_int (exp->elts[*pos].longconst);\n-\t    ++*pos;\n-\t    fieldname = &exp->elts[*pos].string;\n-\t    *pos += 2 + BYTES_TO_EXP_ELEM (len + 1);\n-\n-\t    value = rust_evaluate_subexp (NULL, exp, pos, noside);\n-\t    if (noside == EVAL_NORMAL)\n-\t      {\n-\t\tfield = value_struct_elt (&result, NULL, fieldname, NULL,\n-\t\t\t\t\t  \"structure\");\n-\t\tvalue_assign (field, value);\n-\t      }\n-\t  }\n-\n-\tif (noside == EVAL_SKIP)\n-\t  return value_from_longest (builtin_type (exp->gdbarch)->builtin_int,\n-\t\t\t\t     1);\n-\telse if (noside == EVAL_AVOID_SIDE_EFFECTS)\n-\t  result = allocate_value (type);\n-\telse\n-\t  result = value_at_lazy (type, addr);\n-      }\n-      break;\n-\n-    case OP_RUST_ARRAY:\n-      {\n-\t(*pos)++;\n-\tstruct value *elt;\n-\tstruct value *ncopies;\n-\n-\telt = rust_evaluate_subexp (NULL, exp, pos, noside);\n-\tncopies = rust_evaluate_subexp (NULL, exp, pos, noside);\n-\treturn eval_op_rust_array (expect_type, exp, noside, op, elt, ncopies);\n-      }\n-      break;\n-\n-    case STRUCTOP_ANONYMOUS:\n-      {\n-\t/* Anonymous field access, i.e. foo.1.  */\n-\tstruct value *lhs;\n-\tint pc, field_number;\n-\n-\tpc = (*pos)++;\n-\tfield_number = longest_to_int (exp->elts[pc + 1].longconst);\n-\t(*pos) += 2;\n-\tlhs = evaluate_subexp (nullptr, exp, pos, noside);\n-\n-\treturn eval_op_rust_struct_anon (expect_type, exp, noside,\n-\t\t\t\t\t field_number, lhs);\n-      }\n-      break;\n-\n-    case STRUCTOP_STRUCT:\n-      {\n-\tstruct value *lhs;\n-\tint tem, pc;\n-\n-\tpc = (*pos)++;\n-\ttem = longest_to_int (exp->elts[pc + 1].longconst);\n-\t(*pos) += 3 + BYTES_TO_EXP_ELEM (tem + 1);\n-\tlhs = evaluate_subexp (nullptr, exp, pos, noside);\n-\n-\tconst char *field_name = &exp->elts[pc + 2].string;\n-\treturn eval_op_rust_structop (expect_type, exp, noside, lhs,\n-\t\t\t\t      field_name);\n-      }\n-      break;\n-\n-    case OP_RANGE:\n-      {\n-\tstruct value *low = NULL, *high = NULL;\n-\tauto kind\n-\t  = (enum range_flag) longest_to_int (exp->elts[*pos + 1].longconst);\n-\t*pos += 3;\n-\n-\tif (!(kind & RANGE_LOW_BOUND_DEFAULT))\n-\t  low = evaluate_subexp (nullptr, exp, pos, noside);\n-\tif (!(kind & RANGE_HIGH_BOUND_DEFAULT))\n-\t  high = evaluate_subexp (nullptr, exp, pos, noside);\n-\n-\tresult = rust_range (expect_type, exp, noside, kind, low, high);\n-      }\n-      break;\n-\n-    case UNOP_ADDR:\n-      /* We might have &array[range], in which case we need to make a\n-\t slice.  */\n-      if (exp->elts[*pos + 1].opcode == BINOP_SUBSCRIPT)\n-\t{\n-\t  ++*pos;\n-\t  ++*pos;\n-\t  struct value *lhs = evaluate_subexp (nullptr, exp, pos, noside);\n-\t  struct value *rhs = evaluate_subexp (nullptr, exp, pos, noside);\n-\n-\t  result = rust_subscript (expect_type, exp, noside, true, lhs, rhs);\n-\t  break;\n-\t}\n-      /* Fall through.  */\n-    default:\n-      result = evaluate_subexp_standard (expect_type, exp, pos, noside);\n-      break;\n-    }\n-\n-  return result;\n-}\n-\n namespace expr\n {\n \n@@ -1746,9 +1461,7 @@ rust_aggregate_operation::evaluate (struct type *expect_type,\n \t}\n     }\n \n-  if (noside == EVAL_SKIP)\n-    result = value_from_longest (builtin_type (exp->gdbarch)->builtin_int, 1);\n-  else if (noside == EVAL_AVOID_SIDE_EFFECTS)\n+  if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     result = allocate_value (type);\n   else\n     result = value_at_lazy (type, addr);\n@@ -1808,226 +1521,8 @@ rust_structop::evaluate_funcall (struct type *expect_type,\n \n }\n \n-/* operator_length implementation for Rust.  */\n-\n-static void\n-rust_operator_length (const struct expression *exp, int pc, int *oplenp,\n-\t\t      int *argsp)\n-{\n-  int oplen = 1;\n-  int args = 0;\n-\n-  switch (exp->elts[pc - 1].opcode)\n-    {\n-    case OP_AGGREGATE:\n-      /* We handle aggregate as a type and argument count.  The first\n-\t argument might be OP_OTHERS.  After that the arguments\n-\t alternate: first an OP_NAME, then an expression.  */\n-      oplen = 4;\n-      args = longest_to_int (exp->elts[pc - 2].longconst);\n-      break;\n-\n-    case OP_OTHERS:\n-      oplen = 1;\n-      args = 1;\n-      break;\n-\n-    case STRUCTOP_ANONYMOUS:\n-      oplen = 3;\n-      args = 1;\n-      break;\n-\n-    case OP_RUST_ARRAY:\n-      oplen = 1;\n-      args = 2;\n-      break;\n-\n-    default:\n-      operator_length_standard (exp, pc, oplenp, argsp);\n-      return;\n-    }\n-\n-  *oplenp = oplen;\n-  *argsp = args;\n-}\n-\n-/* dump_subexp_body implementation for Rust.  */\n-\n-static int\n-rust_dump_subexp_body (struct expression *exp, struct ui_file *stream,\n-\t\t       int elt)\n-{\n-  switch (exp->elts[elt].opcode)\n-    {\n-    case OP_AGGREGATE:\n-      {\n-\tint length = longest_to_int (exp->elts[elt + 2].longconst);\n-\tint i;\n-\n-\tfprintf_filtered (stream, \"Type @\");\n-\tgdb_print_host_address (exp->elts[elt + 1].type, stream);\n-\tfprintf_filtered (stream, \" (\");\n-\ttype_print (exp->elts[elt + 1].type, NULL, stream, 0);\n-\tfprintf_filtered (stream, \"), length %d\", length);\n-\n-\telt += 4;\n-\tfor (i = 0; i < length; ++i)\n-\t  elt = dump_subexp (exp, stream, elt);\n-      }\n-      break;\n-\n-    case OP_STRING:\n-    case OP_NAME:\n-      {\n-\tLONGEST len = exp->elts[elt + 1].longconst;\n-\n-\tfprintf_filtered (stream, \"%s: %s\",\n-\t\t\t  (exp->elts[elt].opcode == OP_STRING\n-\t\t\t   ? \"string\" : \"name\"),\n-\t\t\t  &exp->elts[elt + 2].string);\n-\telt += 4 + BYTES_TO_EXP_ELEM (len + 1);\n-      }\n-      break;\n-\n-    case OP_OTHERS:\n-      elt = dump_subexp (exp, stream, elt + 1);\n-      break;\n-\n-    case STRUCTOP_ANONYMOUS:\n-      {\n-\tint field_number;\n-\n-\tfield_number = longest_to_int (exp->elts[elt + 1].longconst);\n-\n-\tfprintf_filtered (stream, \"Field number: %d\", field_number);\n-\telt = dump_subexp (exp, stream, elt + 3);\n-      }\n-      break;\n-\n-    case OP_RUST_ARRAY:\n-      ++elt;\n-      break;\n-\n-    default:\n-      elt = dump_subexp_body_standard (exp, stream, elt);\n-      break;\n-    }\n-\n-  return elt;\n-}\n-\n-/* print_subexp implementation for Rust.  */\n-\n-static void\n-rust_print_subexp (struct expression *exp, int *pos, struct ui_file *stream,\n-\t\t   enum precedence prec)\n-{\n-  switch (exp->elts[*pos].opcode)\n-    {\n-    case OP_AGGREGATE:\n-      {\n-\tint length = longest_to_int (exp->elts[*pos + 2].longconst);\n-\tint i;\n-\n-\ttype_print (exp->elts[*pos + 1].type, \"\", stream, 0);\n-\tfputs_filtered (\" { \", stream);\n-\n-\t*pos += 4;\n-\tfor (i = 0; i < length; ++i)\n-\t  {\n-\t    rust_print_subexp (exp, pos, stream, prec);\n-\t    fputs_filtered (\", \", stream);\n-\t  }\n-\tfputs_filtered (\" }\", stream);\n-      }\n-      break;\n-\n-    case OP_NAME:\n-      {\n-\tLONGEST len = exp->elts[*pos + 1].longconst;\n-\n-\tfputs_filtered (&exp->elts[*pos + 2].string, stream);\n-\t*pos += 4 + BYTES_TO_EXP_ELEM (len + 1);\n-      }\n-      break;\n-\n-    case OP_OTHERS:\n-      {\n-\tfputs_filtered (\"<<others>> (\", stream);\n-\t++*pos;\n-\trust_print_subexp (exp, pos, stream, prec);\n-\tfputs_filtered (\")\", stream);\n-      }\n-      break;\n-\n-    case STRUCTOP_ANONYMOUS:\n-      {\n-\tint tem = longest_to_int (exp->elts[*pos + 1].longconst);\n-\n-\t(*pos) += 3;\n-\tprint_subexp (exp, pos, stream, PREC_SUFFIX);\n-\tfprintf_filtered (stream, \".%d\", tem);\n-      }\n-      break;\n-\n-    case OP_RUST_ARRAY:\n-      ++*pos;\n-      fprintf_filtered (stream, \"[\");\n-      rust_print_subexp (exp, pos, stream, prec);\n-      fprintf_filtered (stream, \"; \");\n-      rust_print_subexp (exp, pos, stream, prec);\n-      fprintf_filtered (stream, \"]\");\n-      break;\n-\n-    default:\n-      print_subexp_standard (exp, pos, stream, prec);\n-      break;\n-    }\n-}\n-\n-/* operator_check implementation for Rust.  */\n-\n-static int\n-rust_operator_check (struct expression *exp, int pos,\n-\t\t     int (*objfile_func) (struct objfile *objfile,\n-\t\t\t\t\t  void *data),\n-\t\t     void *data)\n-{\n-  switch (exp->elts[pos].opcode)\n-    {\n-    case OP_AGGREGATE:\n-      {\n-\tstruct type *type = exp->elts[pos + 1].type;\n-\tstruct objfile *objfile = type->objfile_owner ();\n-\n-\tif (objfile != NULL && (*objfile_func) (objfile, data))\n-\t  return 1;\n-      }\n-      break;\n-\n-    case OP_OTHERS:\n-    case OP_NAME:\n-    case OP_RUST_ARRAY:\n-      break;\n-\n-    default:\n-      return operator_check_standard (exp, pos, objfile_func, data);\n-    }\n-\n-  return 0;\n-}\n-\n \f\n \n-const struct exp_descriptor rust_language::exp_descriptor_tab =\n-{\n-  rust_print_subexp,\n-  rust_operator_length,\n-  rust_operator_check,\n-  rust_dump_subexp_body,\n-  rust_evaluate_subexp\n-};\n-\n /* See language.h.  */\n \n void"
    },
    {
      "sha": "ec97cac3dae17b2e67290901cbe3029716e6c395",
      "filename": "gdb/rust-lang.h",
      "status": "modified",
      "additions": 0,
      "deletions": 10,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa1da9ed50fba2474438f83e6da577bb01ed4613/gdb/rust-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa1da9ed50fba2474438f83e6da577bb01ed4613/gdb/rust-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.h?ref=aa1da9ed50fba2474438f83e6da577bb01ed4613",
      "patch": "@@ -211,21 +211,11 @@ class rust_language : public language_defn\n \n   /* See language.h.  */\n \n-  const struct exp_descriptor *expression_ops () const override\n-  { return &exp_descriptor_tab; }\n-\n-  /* See language.h.  */\n-\n   const struct op_print *opcode_print_table () const override\n   { return c_op_print_tab; }\n \n private:\n \n-  /* Table of expression handling functions for use by EXPRESSION_OPS\n-     member function.  */\n-\n-  static const struct exp_descriptor exp_descriptor_tab;\n-\n   /* Helper for value_print_inner, arguments are as for that function.\n      Prints structs and untagged unions.  */\n "
    }
  ]
}