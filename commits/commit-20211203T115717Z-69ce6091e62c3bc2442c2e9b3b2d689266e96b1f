{
  "sha": "69ce6091e62c3bc2442c2e9b3b2d689266e96b1f",
  "node_id": "C_kwDOANOeidoAKDY5Y2U2MDkxZTYyYzNiYzI0NDJjMmU5YjNiMmQ2ODkyNjZlOTZiMWY",
  "commit": {
    "author": {
      "name": "Richard Sandiford",
      "email": "richard.sandiford@arm.com",
      "date": "2021-12-03T11:57:17Z"
    },
    "committer": {
      "name": "Richard Sandiford",
      "email": "richard.sandiford@arm.com",
      "date": "2021-12-03T11:57:17Z"
    },
    "message": "aarch64: Fix uninitialised memory\n\nAARCH64_OPDE_EXPECTED_A_AFTER_B and AARCH64_OPDE_A_SHOULD_FOLLOW_B\nare not paired with an error string, but we had an assert that the\nerror was nonnull.  Previously this assert was testing uninitialised\nmemory and so could pass or fail arbitrarily.\n\nopcodes/\n\t* aarch64-opc.c (verify_mops_pme_sequence): Initialize the error\n\tfield to null for AARCH64_OPDE_EXPECTED_A_AFTER_B and\n\tAARCH64_OPDE_A_SHOULD_FOLLOW_B.\n\t* aarch64-dis.c (print_verifier_notes): Move assert.",
    "tree": {
      "sha": "647fdb8e22801ee6c78134c94af65e66c61792a1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/647fdb8e22801ee6c78134c94af65e66c61792a1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/69ce6091e62c3bc2442c2e9b3b2d689266e96b1f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/69ce6091e62c3bc2442c2e9b3b2d689266e96b1f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/69ce6091e62c3bc2442c2e9b3b2d689266e96b1f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/69ce6091e62c3bc2442c2e9b3b2d689266e96b1f/comments",
  "author": {
    "login": "rsandifo-arm",
    "id": 28043039,
    "node_id": "MDQ6VXNlcjI4MDQzMDM5",
    "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rsandifo-arm",
    "html_url": "https://github.com/rsandifo-arm",
    "followers_url": "https://api.github.com/users/rsandifo-arm/followers",
    "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs",
    "repos_url": "https://api.github.com/users/rsandifo-arm/repos",
    "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "rsandifo-arm",
    "id": 28043039,
    "node_id": "MDQ6VXNlcjI4MDQzMDM5",
    "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rsandifo-arm",
    "html_url": "https://github.com/rsandifo-arm",
    "followers_url": "https://api.github.com/users/rsandifo-arm/followers",
    "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs",
    "repos_url": "https://api.github.com/users/rsandifo-arm/repos",
    "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bf94cfb6318572bc3eece37273140d45279a8768",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf94cfb6318572bc3eece37273140d45279a8768",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bf94cfb6318572bc3eece37273140d45279a8768"
    }
  ],
  "stats": {
    "total": 4,
    "additions": 3,
    "deletions": 1
  },
  "files": [
    {
      "sha": "c0fb83122af8de1abad8e1f3ded11e8b02b3afd8",
      "filename": "opcodes/aarch64-dis.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/69ce6091e62c3bc2442c2e9b3b2d689266e96b1f/opcodes/aarch64-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/69ce6091e62c3bc2442c2e9b3b2d689266e96b1f/opcodes/aarch64-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.c?ref=69ce6091e62c3bc2442c2e9b3b2d689266e96b1f",
      "patch": "@@ -3386,7 +3386,6 @@ print_verifier_notes (aarch64_operand_error *detail,\n   /* The output of the verifier cannot be a fatal error, otherwise the assembly\n      would not have succeeded.  We can safely ignore these.  */\n   assert (detail->non_fatal);\n-  assert (detail->error);\n \n   (*info->fprintf_func) (info->stream, \"  // note: \");\n   switch (detail->kind)\n@@ -3405,6 +3404,7 @@ print_verifier_notes (aarch64_operand_error *detail,\n       break;\n \n     default:\n+      assert (detail->error);\n       (*info->fprintf_func) (info->stream, \"%s\", detail->error);\n       if (detail->index >= 0)\n \t(*info->fprintf_func) (info->stream, \" at operand %d\","
    },
    {
      "sha": "7aa37a5f0ab167c36b3b359140fa6bf003d0f011",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/69ce6091e62c3bc2442c2e9b3b2d689266e96b1f/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/69ce6091e62c3bc2442c2e9b3b2d689266e96b1f/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=69ce6091e62c3bc2442c2e9b3b2d689266e96b1f",
      "patch": "@@ -5522,6 +5522,7 @@ verify_mops_pme_sequence (const struct aarch64_inst *inst,\n       && prev_insn->opcode != opcode - 1)\n     {\n       mismatch_detail->kind = AARCH64_OPDE_EXPECTED_A_AFTER_B;\n+      mismatch_detail->error = NULL;\n       mismatch_detail->index = -1;\n       mismatch_detail->data[0].s = prev_insn->opcode[1].name;\n       mismatch_detail->data[1].s = prev_insn->opcode->name;\n@@ -5534,6 +5535,7 @@ verify_mops_pme_sequence (const struct aarch64_inst *inst,\n       if (is_new_section || !prev_insn || prev_insn->opcode != opcode - 1)\n \t{\n \t  mismatch_detail->kind = AARCH64_OPDE_A_SHOULD_FOLLOW_B;\n+\t  mismatch_detail->error = NULL;\n \t  mismatch_detail->index = -1;\n \t  mismatch_detail->data[0].s = opcode->name;\n \t  mismatch_detail->data[1].s = opcode[-1].name;"
    }
  ]
}