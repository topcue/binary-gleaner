{
  "sha": "39856def4f717a1d938b80f76d86202dd88abc10",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Mzk4NTZkZWY0ZjcxN2ExZDkzOGI4MGY3NmQ4NjIwMmRkODhhYmMxMA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:40:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:41:00Z"
    },
    "message": "Remove DWARF queue-related globals\n\nThis removes some queue-related globals from the DWARF reader, in\nfavor of a new member on dwarf2_per_objfile.  Globals must be avoided\nin this code, because they prevent multi-threading the reader.\n\ngdb/ChangeLog\n2020-02-08  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.h (struct dwarf2_queue_item): Move from\n\tdwarf2/read.c.  Remove \"next\" member.  Add constructor ntad\n\tdestructor.\n\t(struct dwarf2_per_objfile) <queue>: New member.\n\t* dwarf2/read.c (struct dwarf2_queue_item): Move to\n\tdwarf2/read.h.\n\t(dwarf2_queue, dwarf2_queue_tail): Remove.\n\t(class dwarf2_queue_guard): Add parameter to constructor.  Use\n\tDISABLE_COPY_AND_ASSIGN.\n\t<m_per_objfile>: New member.\n\t<~dwarf2_queue_guard>: Rewrite.\n\t(dw2_do_instantiate_symtab, queue_comp_unit, process_queue):\n\tUpdate.\n\t(~dwarf2_queue_item): New.\n\nChange-Id: Ied1f6ff3691352a66c4709b0b2cba0588f49f79a",
    "tree": {
      "sha": "6bb853eca72e031dc54597207f389ef5757d6d90",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6bb853eca72e031dc54597207f389ef5757d6d90"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/39856def4f717a1d938b80f76d86202dd88abc10",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39856def4f717a1d938b80f76d86202dd88abc10",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/39856def4f717a1d938b80f76d86202dd88abc10",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39856def4f717a1d938b80f76d86202dd88abc10/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3e225074507540c866704f4de6b70eb0fcd37013",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3e225074507540c866704f4de6b70eb0fcd37013",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3e225074507540c866704f4de6b70eb0fcd37013"
    }
  ],
  "stats": {
    "total": 136,
    "additions": 76,
    "deletions": 60
  },
  "files": [
    {
      "sha": "cae5468ba766468865ed1c9e50be081c454dbc22",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39856def4f717a1d938b80f76d86202dd88abc10/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39856def4f717a1d938b80f76d86202dd88abc10/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=39856def4f717a1d938b80f76d86202dd88abc10",
      "patch": "@@ -1,3 +1,20 @@\n+2020-02-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.h (struct dwarf2_queue_item): Move from\n+\tdwarf2/read.c.  Remove \"next\" member.  Add constructor ntad\n+\tdestructor.\n+\t(struct dwarf2_per_objfile) <queue>: New member.\n+\t* dwarf2/read.c (struct dwarf2_queue_item): Move to\n+\tdwarf2/read.h.\n+\t(dwarf2_queue, dwarf2_queue_tail): Remove.\n+\t(class dwarf2_queue_guard): Add parameter to constructor.  Use\n+\tDISABLE_COPY_AND_ASSIGN.\n+\t<m_per_objfile>: New member.\n+\t<~dwarf2_queue_guard>: Rewrite.\n+\t(dw2_do_instantiate_symtab, queue_comp_unit, process_queue):\n+\tUpdate.\n+\t(~dwarf2_queue_item): New.\n+\n 2020-02-08  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (struct die_info) <has_children>: New member."
    },
    {
      "sha": "527ed2e4221aa1eb32aa4c81e15c8f0ee5e6d059",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 36,
      "deletions": 60,
      "changes": 96,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39856def4f717a1d938b80f76d86202dd88abc10/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39856def4f717a1d938b80f76d86202dd88abc10/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=39856def4f717a1d938b80f76d86202dd88abc10",
      "patch": "@@ -1335,18 +1335,6 @@ struct field_info\n     std::vector<struct decl_field> nested_types_list;\n   };\n \n-/* One item on the queue of compilation units to read in full symbols\n-   for.  */\n-struct dwarf2_queue_item\n-{\n-  struct dwarf2_per_cu_data *per_cu;\n-  enum language pretend_language;\n-  struct dwarf2_queue_item *next;\n-};\n-\n-/* The current queue.  */\n-static struct dwarf2_queue_item *dwarf2_queue, *dwarf2_queue_tail;\n-\n /* Loaded secondary compilation units are kept in memory until they\n    have not been referenced for the processing of this many\n    compilation units.  Set this to zero to disable caching.  Cache\n@@ -1813,35 +1801,38 @@ static struct type *dwarf2_per_cu_int_type\n class dwarf2_queue_guard\n {\n public:\n-  dwarf2_queue_guard () = default;\n+  explicit dwarf2_queue_guard (dwarf2_per_objfile *per_objfile)\n+    : m_per_objfile (per_objfile)\n+  {\n+  }\n \n   /* Free any entries remaining on the queue.  There should only be\n      entries left if we hit an error while processing the dwarf.  */\n   ~dwarf2_queue_guard ()\n   {\n-    struct dwarf2_queue_item *item, *last;\n-\n-    item = dwarf2_queue;\n-    while (item)\n-      {\n-\t/* Anything still marked queued is likely to be in an\n-\t   inconsistent state, so discard it.  */\n-\tif (item->per_cu->queued)\n-\t  {\n-\t    if (item->per_cu->cu != NULL)\n-\t      free_one_cached_comp_unit (item->per_cu);\n-\t    item->per_cu->queued = 0;\n-\t  }\n+    /* Ensure that no memory is allocated by the queue.  */\n+    std::queue<dwarf2_queue_item> empty;\n+    std::swap (m_per_objfile->queue, empty);\n+  }\n \n-\tlast = item;\n-\titem = item->next;\n-\txfree (last);\n-      }\n+  DISABLE_COPY_AND_ASSIGN (dwarf2_queue_guard);\n \n-    dwarf2_queue = dwarf2_queue_tail = NULL;\n-  }\n+private:\n+  dwarf2_per_objfile *m_per_objfile;\n };\n \n+dwarf2_queue_item::~dwarf2_queue_item ()\n+{\n+  /* Anything still marked queued is likely to be in an\n+     inconsistent state, so discard it.  */\n+  if (per_cu->queued)\n+    {\n+      if (per_cu->cu != NULL)\n+\tfree_one_cached_comp_unit (per_cu);\n+      per_cu->queued = 0;\n+    }\n+}\n+\n /* The return type of find_file_and_directory.  Note, the enclosed\n    string pointers are only valid while this object is valid.  */\n \n@@ -2577,7 +2568,7 @@ dw2_do_instantiate_symtab (struct dwarf2_per_cu_data *per_cu, bool skip_partial)\n   /* The destructor of dwarf2_queue_guard frees any entries left on\n      the queue.  After this point we're guaranteed to leave this function\n      with the dwarf queue empty.  */\n-  dwarf2_queue_guard q_guard;\n+  dwarf2_queue_guard q_guard (dwarf2_per_objfile);\n \n   if (dwarf2_per_objfile->using_index\n       ? per_cu->v.quick->compunit_symtab == NULL\n@@ -9161,20 +9152,8 @@ static void\n queue_comp_unit (struct dwarf2_per_cu_data *per_cu,\n \t\t enum language pretend_language)\n {\n-  struct dwarf2_queue_item *item;\n-\n   per_cu->queued = 1;\n-  item = XNEW (struct dwarf2_queue_item);\n-  item->per_cu = per_cu;\n-  item->pretend_language = pretend_language;\n-  item->next = NULL;\n-\n-  if (dwarf2_queue == NULL)\n-    dwarf2_queue = item;\n-  else\n-    dwarf2_queue_tail->next = item;\n-\n-  dwarf2_queue_tail = item;\n+  per_cu->dwarf2_per_objfile->queue.emplace (per_cu, pretend_language);\n }\n \n /* If PER_CU is not yet queued, add it to the queue.\n@@ -9229,8 +9208,6 @@ maybe_queue_comp_unit (struct dwarf2_cu *dependent_cu,\n static void\n process_queue (struct dwarf2_per_objfile *dwarf2_per_objfile)\n {\n-  struct dwarf2_queue_item *item, *next_item;\n-\n   if (dwarf_read_debug)\n     {\n       fprintf_unfiltered (gdb_stdlog,\n@@ -9240,15 +9217,17 @@ process_queue (struct dwarf2_per_objfile *dwarf2_per_objfile)\n \n   /* The queue starts out with one item, but following a DIE reference\n      may load a new CU, adding it to the end of the queue.  */\n-  for (item = dwarf2_queue; item != NULL; dwarf2_queue = item = next_item)\n+  while (!dwarf2_per_objfile->queue.empty ())\n     {\n+      dwarf2_queue_item &item = dwarf2_per_objfile->queue.front ();\n+\n       if ((dwarf2_per_objfile->using_index\n-\t   ? !item->per_cu->v.quick->compunit_symtab\n-\t   : (item->per_cu->v.psymtab && !item->per_cu->v.psymtab->readin))\n+\t   ? !item.per_cu->v.quick->compunit_symtab\n+\t   : (item.per_cu->v.psymtab && !item.per_cu->v.psymtab->readin))\n \t  /* Skip dummy CUs.  */\n-\t  && item->per_cu->cu != NULL)\n+\t  && item.per_cu->cu != NULL)\n \t{\n-\t  struct dwarf2_per_cu_data *per_cu = item->per_cu;\n+\t  struct dwarf2_per_cu_data *per_cu = item.per_cu;\n \t  unsigned int debug_print_threshold;\n \t  char buf[100];\n \n@@ -9275,21 +9254,18 @@ process_queue (struct dwarf2_per_objfile *dwarf2_per_objfile)\n \t    fprintf_unfiltered (gdb_stdlog, \"Expanding symtab of %s\\n\", buf);\n \n \t  if (per_cu->is_debug_types)\n-\t    process_full_type_unit (per_cu, item->pretend_language);\n+\t    process_full_type_unit (per_cu, item.pretend_language);\n \t  else\n-\t    process_full_comp_unit (per_cu, item->pretend_language);\n+\t    process_full_comp_unit (per_cu, item.pretend_language);\n \n \t  if (dwarf_read_debug >= debug_print_threshold)\n \t    fprintf_unfiltered (gdb_stdlog, \"Done expanding %s\\n\", buf);\n \t}\n \n-      item->per_cu->queued = 0;\n-      next_item = item->next;\n-      xfree (item);\n+      item.per_cu->queued = 0;\n+      dwarf2_per_objfile->queue.pop ();\n     }\n \n-  dwarf2_queue_tail = NULL;\n-\n   if (dwarf_read_debug)\n     {\n       fprintf_unfiltered (gdb_stdlog, \"Done expanding symtabs of %s.\\n\","
    },
    {
      "sha": "13b5878ca23759c3cfe3be315170774bc3bce2bd",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39856def4f717a1d938b80f76d86202dd88abc10/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39856def4f717a1d938b80f76d86202dd88abc10/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=39856def4f717a1d938b80f76d86202dd88abc10",
      "patch": "@@ -20,6 +20,7 @@\n #ifndef DWARF2READ_H\n #define DWARF2READ_H\n \n+#include <queue>\n #include <unordered_map>\n #include \"dwarf2/index-cache.h\"\n #include \"dwarf2/section.h\"\n@@ -44,10 +45,29 @@ struct tu_stats\n };\n \n struct dwarf2_debug_sections;\n+struct dwarf2_per_cu_data;\n struct mapped_index;\n struct mapped_debug_names;\n struct signatured_type;\n \n+/* One item on the queue of compilation units to read in full symbols\n+   for.  */\n+struct dwarf2_queue_item\n+{\n+  dwarf2_queue_item (dwarf2_per_cu_data *cu, enum language lang)\n+    : per_cu (cu),\n+      pretend_language (lang)\n+  {\n+  }\n+\n+  ~dwarf2_queue_item ();\n+\n+  DISABLE_COPY_AND_ASSIGN (dwarf2_queue_item);\n+\n+  struct dwarf2_per_cu_data *per_cu;\n+  enum language pretend_language;\n+};\n+\n /* Collection of data recorded per objfile.\n    This hangs off of dwarf2_objfile_data_key.  */\n \n@@ -215,6 +235,9 @@ struct dwarf2_per_objfile\n   std::unordered_map<sect_offset, std::vector<sect_offset>,\n \t\t     gdb::hash_enum<sect_offset>>\n     abstract_to_concrete;\n+\n+  /* CUs that are queued to be read.  */\n+  std::queue<dwarf2_queue_item> queue;\n };\n \n /* Get the dwarf2_per_objfile associated to OBJFILE.  */"
    }
  ]
}