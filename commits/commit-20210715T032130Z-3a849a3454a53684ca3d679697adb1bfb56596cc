{
  "sha": "3a849a3454a53684ca3d679697adb1bfb56596cc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2E4NDlhMzQ1NGE1MzY4NGNhM2Q2Nzk2OTdhZGIxYmZiNTY1OTZjYw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-05-31T17:00:32Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-07-15T03:21:30Z"
    },
    "message": "gdb: pass child_ptid and fork kind to target_ops::follow_fork\n\nThis is a small cleanup I think would be nice, that I spotted while\ndoing the following patch.\n\ngdb/ChangeLog:\n\n\t* target.h (struct target_ops) <follow_fork>: Add ptid and\n\ttarget_waitkind parameters.\n\t(target_follow_fork): Likewise.\n\t* target.c (default_follow_fork): Likewise.\n\t(target_follow_fork): Likewise.\n\t* fbsd-nat.h (class fbsd_nat_target) <follow_fork>: Likewise.\n\t* fbsd-nat.c (fbsd_nat_target::follow_fork): Likewise.\n\t* linux-nat.h (class linux_nat_target) <follow_fork>: Likewise.\n\t* linux-nat.c (linux_nat_target::follow_fork): Likewise.\n\t* obsd-nat.h (class obsd_nat_target) <follow_fork>: Likewise.\n\t* obsd-nat.c (obsd_nat_target::follow_fork): Likewise.\n\t* remote.c (class remote_target) <follow_fork>: Likewise.\n\t* target-debug.h (target_debug_print_target_waitkind): New.\n\t* target-delegates.c: Re-generate.\n\nChange-Id: I5421a542f2e19100a22b74cc333d2b235d0de3c8",
    "tree": {
      "sha": "bee2c0eb1fac46adad4de1fefeda09d41c2aa14c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bee2c0eb1fac46adad4de1fefeda09d41c2aa14c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3a849a3454a53684ca3d679697adb1bfb56596cc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3a849a3454a53684ca3d679697adb1bfb56596cc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3a849a3454a53684ca3d679697adb1bfb56596cc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3a849a3454a53684ca3d679697adb1bfb56596cc/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ff77083572522d805e631b287b4b9db68f596503",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ff77083572522d805e631b287b4b9db68f596503",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ff77083572522d805e631b287b4b9db68f596503"
    }
  ],
  "stats": {
    "total": 123,
    "additions": 59,
    "deletions": 64
  },
  "files": [
    {
      "sha": "0ae1195791cb6e45b42b39136a423bc5f0ca9297",
      "filename": "gdb/fbsd-nat.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/fbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/fbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.c?ref=3a849a3454a53684ca3d679697adb1bfb56596cc",
      "patch": "@@ -1471,12 +1471,12 @@ fbsd_nat_target::create_inferior (const char *exec_file,\n    the ptid of the followed inferior.  */\n \n void\n-fbsd_nat_target::follow_fork (bool follow_child, bool detach_fork)\n+fbsd_nat_target::follow_fork (ptid_t child_ptid, target_waitkind fork_kind,\n+\t\t\t      bool follow_child, bool detach_fork)\n {\n   if (!follow_child && detach_fork)\n     {\n-      struct thread_info *tp = inferior_thread ();\n-      pid_t child_pid = tp->pending_follow.value.related_pid.pid ();\n+      pid_t child_pid = child_ptid.pid ();\n \n       /* Breakpoints have already been detached from the child by\n \t infrun.c.  */\n@@ -1485,7 +1485,7 @@ fbsd_nat_target::follow_fork (bool follow_child, bool detach_fork)\n \tperror_with_name ((\"ptrace\"));\n \n #ifndef PTRACE_VFORK\n-      if (tp->pending_follow.kind == TARGET_WAITKIND_VFORKED)\n+      if (fork_kind == TARGET_WAITKIND_VFORKED)\n \t{\n \t  /* We can't insert breakpoints until the child process has\n \t     finished with the shared memory region.  The parent"
    },
    {
      "sha": "3fb502ca8d089e8c01550e03e657907ccfa150e0",
      "filename": "gdb/fbsd-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/fbsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/fbsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/fbsd-nat.h?ref=3a849a3454a53684ca3d679697adb1bfb56596cc",
      "patch": "@@ -85,7 +85,7 @@ class fbsd_nat_target : public inf_ptrace_target\n #endif\n \n #ifdef TDP_RFPPWAIT\n-  void follow_fork (bool, bool) override;\n+  void follow_fork (ptid_t, target_waitkind, bool, bool) override;\n \n   int insert_fork_catchpoint (int) override;\n   int remove_fork_catchpoint (int) override;"
    },
    {
      "sha": "815ebf45c1fd4bfbbf3f2e88b7bb501bc5dd1799",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 7,
      "deletions": 8,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=3a849a3454a53684ca3d679697adb1bfb56596cc",
      "patch": "@@ -404,13 +404,12 @@ show_follow_fork_mode_string (struct ui_file *file, int from_tty,\n static bool\n follow_fork_inferior (bool follow_child, bool detach_fork)\n {\n-  int has_vforked;\n-  ptid_t parent_ptid, child_ptid;\n-\n-  has_vforked = (inferior_thread ()->pending_follow.kind\n-\t\t == TARGET_WAITKIND_VFORKED);\n-  parent_ptid = inferior_ptid;\n-  child_ptid = inferior_thread ()->pending_follow.value.related_pid;\n+  target_waitkind fork_kind = inferior_thread ()->pending_follow.kind;\n+  gdb_assert (fork_kind == TARGET_WAITKIND_FORKED\n+\t      || fork_kind == TARGET_WAITKIND_VFORKED);\n+  bool has_vforked = fork_kind == TARGET_WAITKIND_VFORKED;\n+  ptid_t parent_ptid = inferior_ptid;\n+  ptid_t child_ptid = inferior_thread ()->pending_follow.value.related_pid;\n \n   if (has_vforked\n       && !non_stop /* Non-stop always resumes both branches.  */\n@@ -649,7 +648,7 @@ holding the child stopped.  Try \\\"set detach-on-fork\\\" or \\\n       switch_to_thread (child_thr);\n     }\n \n-  target_follow_fork (follow_child, detach_fork);\n+  target_follow_fork (child_ptid, fork_kind, follow_child, detach_fork);\n \n   /* If we ended up creating a new inferior, call post_create_inferior to inform\n      the various subcomponents.  */"
    },
    {
      "sha": "e4d0206eaac86490f3fdaed0041d92ce7c336984",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 7,
      "deletions": 12,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=3a849a3454a53684ca3d679697adb1bfb56596cc",
      "patch": "@@ -449,24 +449,19 @@ typedef std::unique_ptr<struct lwp_info, lwp_deleter> lwp_info_up;\n    unchanged.  */\n \n void\n-linux_nat_target::follow_fork (bool follow_child, bool detach_fork)\n+linux_nat_target::follow_fork (ptid_t child_ptid, target_waitkind fork_kind,\n+\t\t\t       bool follow_child, bool detach_fork)\n {\n   if (!follow_child)\n     {\n-      struct lwp_info *child_lp = NULL;\n-      int has_vforked;\n-      ptid_t parent_ptid, child_ptid;\n-      int parent_pid, child_pid;\n-\n-      has_vforked = (inferior_thread ()->pending_follow.kind\n-\t\t     == TARGET_WAITKIND_VFORKED);\n-      parent_ptid = inferior_ptid;\n+      bool has_vforked = fork_kind == TARGET_WAITKIND_VFORKED;\n+      ptid_t parent_ptid = inferior_ptid;\n       child_ptid = inferior_thread ()->pending_follow.value.related_pid;\n-      parent_pid = parent_ptid.lwp ();\n-      child_pid = child_ptid.lwp ();\n+      int parent_pid = parent_ptid.lwp ();\n+      int child_pid = child_ptid.lwp ();\n \n       /* We're already attached to the parent, by default.  */\n-      child_lp = add_lwp (child_ptid);\n+      lwp_info *child_lp = add_lwp (child_ptid);\n       child_lp->stopped = 1;\n       child_lp->last_resume_kind = resume_stop;\n "
    },
    {
      "sha": "ee36c56519b2cf2a0a11ce9e4e99a41c88600c3f",
      "filename": "gdb/linux-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/linux-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/linux-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.h?ref=3a849a3454a53684ca3d679697adb1bfb56596cc",
      "patch": "@@ -133,7 +133,7 @@ class linux_nat_target : public inf_ptrace_target\n \n   void post_attach (int) override;\n \n-  void follow_fork (bool, bool) override;\n+  void follow_fork (ptid_t, target_waitkind, bool, bool) override;\n \n   std::vector<static_tracepoint_marker>\n     static_tracepoint_markers_by_strid (const char *id) override;"
    },
    {
      "sha": "46fdc0676eab2beb48300b781c706b9c92030de0",
      "filename": "gdb/obsd-nat.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/obsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/obsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/obsd-nat.c?ref=3a849a3454a53684ca3d679697adb1bfb56596cc",
      "patch": "@@ -194,17 +194,15 @@ obsd_nat_target::post_startup_inferior (ptid_t pid)\n    the ptid of the followed inferior.  */\n \n void\n-obsd_nat_target::follow_fork (bool follow_child, bool detach_fork)\n+obsd_nat_target::follow_fork (ptid_t child_ptid, target_waitkind fork_kind,\n+\t\t\t      bool follow_child, bool detach_fork)\n {\n   if (!follow_child)\n     {\n-      struct thread_info *tp = inferior_thread ();\n-      pid_t child_pid = tp->pending_follow.value.related_pid.pid ();\n-\n       /* Breakpoints have already been detached from the child by\n \t infrun.c.  */\n \n-      if (ptrace (PT_DETACH, child_pid, (PTRACE_TYPE_ARG3)1, 0) == -1)\n+      if (ptrace (PT_DETACH, child_ptid.pid (), (PTRACE_TYPE_ARG3)1, 0) == -1)\n \tperror_with_name ((\"ptrace\"));\n     }\n }"
    },
    {
      "sha": "ddd4baf776146cfae4aac1f79f6bade0d7737290",
      "filename": "gdb/obsd-nat.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/obsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/obsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/obsd-nat.h?ref=3a849a3454a53684ca3d679697adb1bfb56596cc",
      "patch": "@@ -30,7 +30,7 @@ class obsd_nat_target : public inf_ptrace_target\n   ptid_t wait (ptid_t, struct target_waitstatus *, target_wait_flags) override;\n \n #ifdef PT_GET_PROCESS_STATE\n-  void follow_fork (bool, bool) override;\n+  void follow_fork (ptid_t, target_waitkind, bool, bool) override;\n \n   int insert_fork_catchpoint (int) override;\n "
    },
    {
      "sha": "e488ca6277e163590daad55a1c6f396f31556b0b",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 6,
      "deletions": 12,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=3a849a3454a53684ca3d679697adb1bfb56596cc",
      "patch": "@@ -682,7 +682,7 @@ class remote_target : public process_stratum_target\n \n   const struct btrace_config *btrace_conf (const struct btrace_target_info *) override;\n   bool augmented_libraries_svr4_read () override;\n-  void follow_fork (bool, bool) override;\n+  void follow_fork (ptid_t, target_waitkind, bool, bool) override;\n   void follow_exec (inferior *, ptid_t, const char *) override;\n   int insert_fork_catchpoint (int) override;\n   int remove_fork_catchpoint (int) override;\n@@ -5920,13 +5920,13 @@ extended_remote_target::detach (inferior *inf, int from_tty)\n    remote target as well.  */\n \n void\n-remote_target::follow_fork (bool follow_child, bool detach_fork)\n+remote_target::follow_fork (ptid_t child_ptid, target_waitkind fork_kind,\n+\t\t\t    bool follow_child, bool detach_fork)\n {\n   struct remote_state *rs = get_remote_state ();\n-  enum target_waitkind kind = inferior_thread ()->pending_follow.kind;\n \n-  if ((kind == TARGET_WAITKIND_FORKED && remote_fork_event_p (rs))\n-      || (kind == TARGET_WAITKIND_VFORKED && remote_vfork_event_p (rs)))\n+  if ((fork_kind == TARGET_WAITKIND_FORKED && remote_fork_event_p (rs))\n+      || (fork_kind == TARGET_WAITKIND_VFORKED && remote_vfork_event_p (rs)))\n     {\n       /* When following the parent and detaching the child, we detach\n \t the child here.  For the case of following the child and\n@@ -5937,13 +5937,7 @@ remote_target::follow_fork (bool follow_child, bool detach_fork)\n       if (detach_fork && !follow_child)\n \t{\n \t  /* Detach the fork child.  */\n-\t  ptid_t child_ptid;\n-\t  pid_t child_pid;\n-\n-\t  child_ptid = inferior_thread ()->pending_follow.value.related_pid;\n-\t  child_pid = child_ptid.pid ();\n-\n-\t  remote_detach_pid (child_pid);\n+\t  remote_detach_pid (child_ptid.pid ());\n \t}\n     }\n }"
    },
    {
      "sha": "5949441bc66c66cef67a304eca5d122369588ce0",
      "filename": "gdb/target-debug.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/target-debug.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/target-debug.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-debug.h?ref=3a849a3454a53684ca3d679697adb1bfb56596cc",
      "patch": "@@ -174,6 +174,8 @@\n   target_debug_do_print (host_address_to_string (X.data ()))\n #define target_debug_print_gdb_unique_xmalloc_ptr_char(X) \\\n   target_debug_do_print (X.get ())\n+#define target_debug_print_target_waitkind(X) \\\n+  target_debug_do_print (pulongest (X))\n \n static void\n target_debug_print_struct_target_waitstatus_p (struct target_waitstatus *status)"
    },
    {
      "sha": "fa4cc5bb2dfca4cec140470c74f6e1475c1df1ed",
      "filename": "gdb/target-delegates.c",
      "status": "modified",
      "additions": 14,
      "deletions": 10,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/target-delegates.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/target-delegates.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target-delegates.c?ref=3a849a3454a53684ca3d679697adb1bfb56596cc",
      "patch": "@@ -56,7 +56,7 @@ struct dummy_target : public target_ops\n   int remove_fork_catchpoint (int arg0) override;\n   int insert_vfork_catchpoint (int arg0) override;\n   int remove_vfork_catchpoint (int arg0) override;\n-  void follow_fork (bool arg0, bool arg1) override;\n+  void follow_fork (ptid_t arg0, target_waitkind arg1, bool arg2, bool arg3) override;\n   int insert_exec_catchpoint (int arg0) override;\n   int remove_exec_catchpoint (int arg0) override;\n   void follow_exec (inferior *arg0, ptid_t arg1, const char *arg2) override;\n@@ -231,7 +231,7 @@ struct debug_target : public target_ops\n   int remove_fork_catchpoint (int arg0) override;\n   int insert_vfork_catchpoint (int arg0) override;\n   int remove_vfork_catchpoint (int arg0) override;\n-  void follow_fork (bool arg0, bool arg1) override;\n+  void follow_fork (ptid_t arg0, target_waitkind arg1, bool arg2, bool arg3) override;\n   int insert_exec_catchpoint (int arg0) override;\n   int remove_exec_catchpoint (int arg0) override;\n   void follow_exec (inferior *arg0, ptid_t arg1, const char *arg2) override;\n@@ -1519,26 +1519,30 @@ debug_target::remove_vfork_catchpoint (int arg0)\n }\n \n void\n-target_ops::follow_fork (bool arg0, bool arg1)\n+target_ops::follow_fork (ptid_t arg0, target_waitkind arg1, bool arg2, bool arg3)\n {\n-  this->beneath ()->follow_fork (arg0, arg1);\n+  this->beneath ()->follow_fork (arg0, arg1, arg2, arg3);\n }\n \n void\n-dummy_target::follow_fork (bool arg0, bool arg1)\n+dummy_target::follow_fork (ptid_t arg0, target_waitkind arg1, bool arg2, bool arg3)\n {\n-  default_follow_fork (this, arg0, arg1);\n+  default_follow_fork (this, arg0, arg1, arg2, arg3);\n }\n \n void\n-debug_target::follow_fork (bool arg0, bool arg1)\n+debug_target::follow_fork (ptid_t arg0, target_waitkind arg1, bool arg2, bool arg3)\n {\n   fprintf_unfiltered (gdb_stdlog, \"-> %s->follow_fork (...)\\n\", this->beneath ()->shortname ());\n-  this->beneath ()->follow_fork (arg0, arg1);\n+  this->beneath ()->follow_fork (arg0, arg1, arg2, arg3);\n   fprintf_unfiltered (gdb_stdlog, \"<- %s->follow_fork (\", this->beneath ()->shortname ());\n-  target_debug_print_bool (arg0);\n+  target_debug_print_ptid_t (arg0);\n   fputs_unfiltered (\", \", gdb_stdlog);\n-  target_debug_print_bool (arg1);\n+  target_debug_print_target_waitkind (arg1);\n+  fputs_unfiltered (\", \", gdb_stdlog);\n+  target_debug_print_bool (arg2);\n+  fputs_unfiltered (\", \", gdb_stdlog);\n+  target_debug_print_bool (arg3);\n   fputs_unfiltered (\")\\n\", gdb_stdlog);\n }\n "
    },
    {
      "sha": "b0f3e88edd9ba68022dafeda58129e264600ee20",
      "filename": "gdb/target.c",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.c?ref=3a849a3454a53684ca3d679697adb1bfb56596cc",
      "patch": "@@ -2701,7 +2701,8 @@ target_program_signals (gdb::array_view<const unsigned char> program_signals)\n }\n \n static void\n-default_follow_fork (struct target_ops *self, bool follow_child,\n+default_follow_fork (struct target_ops *self, ptid_t child_ptid,\n+\t\t     target_waitkind fork_kind, bool follow_child,\n \t\t     bool detach_fork)\n {\n   /* Some target returned a fork event, but did not know how to follow it.  */\n@@ -2712,11 +2713,12 @@ default_follow_fork (struct target_ops *self, bool follow_child,\n /* See target.h.  */\n \n void\n-target_follow_fork (bool follow_child, bool detach_fork)\n+target_follow_fork (ptid_t child_ptid, target_waitkind fork_kind,\n+\t\t    bool follow_child, bool detach_fork)\n {\n   target_ops *target = current_inferior ()->top_target ();\n \n-  return target->follow_fork (follow_child, detach_fork);\n+  return target->follow_fork (child_ptid, fork_kind, follow_child, detach_fork);\n }\n \n /* See target.h.  */"
    },
    {
      "sha": "5ba73f4a5d91dcd204a01e3742236e9236937ed3",
      "filename": "gdb/target.h",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a849a3454a53684ca3d679697adb1bfb56596cc/gdb/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/target.h?ref=3a849a3454a53684ca3d679697adb1bfb56596cc",
      "patch": "@@ -636,7 +636,7 @@ struct target_ops\n       TARGET_DEFAULT_RETURN (1);\n     virtual int remove_vfork_catchpoint (int)\n       TARGET_DEFAULT_RETURN (1);\n-    virtual void follow_fork (bool, bool)\n+    virtual void follow_fork (ptid_t, target_waitkind, bool, bool)\n       TARGET_DEFAULT_FUNC (default_follow_fork);\n     virtual int insert_exec_catchpoint (int)\n       TARGET_DEFAULT_RETURN (1);\n@@ -1713,13 +1713,14 @@ extern int target_insert_vfork_catchpoint (int pid);\n \n extern int target_remove_vfork_catchpoint (int pid);\n \n-/* If the inferior forks or vforks, this function will be called at\n-   the next resume in order to perform any bookkeeping and fiddling\n-   necessary to continue debugging either the parent or child, as\n-   requested, and releasing the other.  Information about the fork\n-   or vfork event is available via get_last_target_status ().  */\n+/* Call the follow_fork method on the current target stack.\n \n-void target_follow_fork (bool follow_child, bool detach_fork);\n+   This function is called when the inferior forks or vforks, to perform any\n+   bookkeeping and fiddling necessary to continue debugging either the parent,\n+   the child or both.  */\n+\n+void target_follow_fork (ptid_t child_ptid, target_waitkind fork_kind,\n+\t\t\t bool follow_child, bool detach_fork);\n \n /* Handle the target-specific bookkeeping required when the inferior makes an\n    exec call."
    }
  ]
}