{
  "sha": "bf227d6105cb3908cde816429c84569da12e829c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmYyMjdkNjEwNWNiMzkwOGNkZTgxNjQyOWM4NDU2OWRhMTJlODI5Yw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-01-20T04:30:36Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-04-10T14:05:17Z"
    },
    "message": "Remove some uses of \"object_files\"\n\nThe \"object_files\" macro is sometimes used when iterating over\nobjfiles.  This patch removes a few such uses in favor of the new\nrange adapter.\n\ngdb/ChangeLog\n2019-04-10  Tom Tromey  <tom@tromey.com>\n\n\t* ia64-tdep.c (ia64_get_dyn_info_list): Use foreach.\n\t* minsyms.c (lookup_minimal_symbol): Use foreach.\n\t(lookup_minimal_symbol_text, lookup_minimal_symbol_by_pc_name)\n\t(lookup_minimal_symbol_solib_trampoline): Likewise.\n\t* symfile.c (reread_symbols): Use foreach.",
    "tree": {
      "sha": "d7022aa84f98f332460726b0a1e944c7c14db563",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d7022aa84f98f332460726b0a1e944c7c14db563"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bf227d6105cb3908cde816429c84569da12e829c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf227d6105cb3908cde816429c84569da12e829c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bf227d6105cb3908cde816429c84569da12e829c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf227d6105cb3908cde816429c84569da12e829c/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b05971a652c35ed72d3c95290e18d8f6e4ef6c46",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b05971a652c35ed72d3c95290e18d8f6e4ef6c46",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b05971a652c35ed72d3c95290e18d8f6e4ef6c46"
    }
  ],
  "stats": {
    "total": 40,
    "additions": 20,
    "deletions": 20
  },
  "files": [
    {
      "sha": "8b43298be2396dd4126095de1c64f2c5e24f6a6b",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf227d6105cb3908cde816429c84569da12e829c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf227d6105cb3908cde816429c84569da12e829c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bf227d6105cb3908cde816429c84569da12e829c",
      "patch": "@@ -1,3 +1,11 @@\n+2019-04-10  Tom Tromey  <tom@tromey.com>\n+\n+\t* ia64-tdep.c (ia64_get_dyn_info_list): Use foreach.\n+\t* minsyms.c (lookup_minimal_symbol): Use foreach.\n+\t(lookup_minimal_symbol_text, lookup_minimal_symbol_by_pc_name)\n+\t(lookup_minimal_symbol_solib_trampoline): Likewise.\n+\t* symfile.c (reread_symbols): Use foreach.\n+\n 2019-04-09  Ivan Begert  <ivanbegert@gmail.com>\n \t    Tom Tromey  <tromey@adacore.com>\n "
    },
    {
      "sha": "f46673986ba781da4bd5a2617e8669006aa5b3f2",
      "filename": "gdb/ia64-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf227d6105cb3908cde816429c84569da12e829c/gdb/ia64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf227d6105cb3908cde816429c84569da12e829c/gdb/ia64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ia64-tdep.c?ref=bf227d6105cb3908cde816429c84569da12e829c",
      "patch": "@@ -2845,15 +2845,14 @@ ia64_get_dyn_info_list (unw_addr_space_t as,\n \t\t\tunw_word_t *dilap, void *arg)\n {\n   struct obj_section *text_sec;\n-  struct objfile *objfile;\n   unw_word_t ip, addr;\n   unw_dyn_info_t di;\n   int ret;\n \n   if (!libunwind_is_initialized ())\n     return -UNW_ENOINFO;\n \n-  for (objfile = object_files; objfile; objfile = objfile->next)\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       void *buf = NULL;\n "
    },
    {
      "sha": "34198d122dc9b875e6383c4fb616bbf98deef750",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 10,
      "deletions": 16,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf227d6105cb3908cde816429c84569da12e829c/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf227d6105cb3908cde816429c84569da12e829c/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=bf227d6105cb3908cde816429c84569da12e829c",
      "patch": "@@ -308,7 +308,6 @@ struct bound_minimal_symbol\n lookup_minimal_symbol (const char *name, const char *sfile,\n \t\t       struct objfile *objf)\n {\n-  struct objfile *objfile;\n   found_minimal_symbols found;\n \n   unsigned int mangled_hash = msymbol_hash (name) % MINIMAL_SYMBOL_HASH_SIZE;\n@@ -323,10 +322,11 @@ lookup_minimal_symbol (const char *name, const char *sfile,\n \n   lookup_name_info lookup_name (name, symbol_name_match_type::FULL);\n \n-  for (objfile = object_files;\n-       objfile != NULL && found.external_symbol.minsym == NULL;\n-       objfile = objfile->next)\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n+      if (found.external_symbol.minsym != NULL)\n+\tbreak;\n+\n       if (objf == NULL || objf == objfile\n \t  || objf == objfile->separate_debug_objfile_backlink)\n \t{\n@@ -522,17 +522,17 @@ iterate_over_minimal_symbols\n struct bound_minimal_symbol\n lookup_minimal_symbol_text (const char *name, struct objfile *objf)\n {\n-  struct objfile *objfile;\n   struct minimal_symbol *msymbol;\n   struct bound_minimal_symbol found_symbol = { NULL, NULL };\n   struct bound_minimal_symbol found_file_symbol = { NULL, NULL };\n \n   unsigned int hash = msymbol_hash (name) % MINIMAL_SYMBOL_HASH_SIZE;\n \n-  for (objfile = object_files;\n-       objfile != NULL && found_symbol.minsym == NULL;\n-       objfile = objfile->next)\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n+      if (found_symbol.minsym != NULL)\n+\tbreak;\n+\n       if (objf == NULL || objf == objfile\n \t  || objf == objfile->separate_debug_objfile_backlink)\n \t{\n@@ -574,14 +574,11 @@ struct minimal_symbol *\n lookup_minimal_symbol_by_pc_name (CORE_ADDR pc, const char *name,\n \t\t\t\t  struct objfile *objf)\n {\n-  struct objfile *objfile;\n   struct minimal_symbol *msymbol;\n \n   unsigned int hash = msymbol_hash (name) % MINIMAL_SYMBOL_HASH_SIZE;\n \n-  for (objfile = object_files;\n-       objfile != NULL;\n-       objfile = objfile->next)\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       if (objf == NULL || objf == objfile\n \t  || objf == objfile->separate_debug_objfile_backlink)\n@@ -606,15 +603,12 @@ struct bound_minimal_symbol\n lookup_minimal_symbol_solib_trampoline (const char *name,\n \t\t\t\t\tstruct objfile *objf)\n {\n-  struct objfile *objfile;\n   struct minimal_symbol *msymbol;\n   struct bound_minimal_symbol found_symbol = { NULL, NULL };\n \n   unsigned int hash = msymbol_hash (name) % MINIMAL_SYMBOL_HASH_SIZE;\n \n-  for (objfile = object_files;\n-       objfile != NULL;\n-       objfile = objfile->next)\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       if (objf == NULL || objf == objfile\n \t  || objf == objfile->separate_debug_objfile_backlink)"
    },
    {
      "sha": "ba82f1b83ca13e1c5b71777dbbc3149cf7fa290a",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bf227d6105cb3908cde816429c84569da12e829c/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bf227d6105cb3908cde816429c84569da12e829c/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=bf227d6105cb3908cde816429c84569da12e829c",
      "patch": "@@ -2427,7 +2427,6 @@ remove_symbol_file_command (const char *args, int from_tty)\n void\n reread_symbols (void)\n {\n-  struct objfile *objfile;\n   long new_modtime;\n   struct stat new_statbuf;\n   int res;\n@@ -2439,7 +2438,7 @@ reread_symbols (void)\n      This routine should then walk down each partial symbol table\n      and see if the symbol table that it originates from has been changed.  */\n \n-  for (objfile = object_files; objfile; objfile = objfile->next)\n+  for (objfile *objfile : current_program_space->objfiles ())\n     {\n       if (objfile->obfd == NULL)\n \tcontinue;"
    }
  ]
}