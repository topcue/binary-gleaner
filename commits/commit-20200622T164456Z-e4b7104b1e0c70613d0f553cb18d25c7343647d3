{
  "sha": "e4b7104b1e0c70613d0f553cb18d25c7343647d3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTRiNzEwNGIxZTBjNzA2MTNkMGY1NTNjYjE4ZDI1YzczNDM2NDdkMw==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-06-22T16:44:56Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-06-22T16:44:56Z"
    },
    "message": "Add support for decoding the DW_MACRO_define_strx and DW_MACRO_undef_strx operands found in DWARF-5 .debug_macro sections.\n\n\tPR 26112\n\t* dwarf.c (display_debug_str_offsets): Add code to display the\n\tcontents of the .debug_str_offsets section.\n\t(display_debug_macro): Add support for DW_MACRO_define_strx and\n\tDW_MACRO_undef_strx.",
    "tree": {
      "sha": "2b6a482972f5b2e7ba593c7fedf41696c67d784d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2b6a482972f5b2e7ba593c7fedf41696c67d784d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e4b7104b1e0c70613d0f553cb18d25c7343647d3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4b7104b1e0c70613d0f553cb18d25c7343647d3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e4b7104b1e0c70613d0f553cb18d25c7343647d3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4b7104b1e0c70613d0f553cb18d25c7343647d3/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "359157df2087894563a900e5f63299b42f460be2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/359157df2087894563a900e5f63299b42f460be2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/359157df2087894563a900e5f63299b42f460be2"
    }
  ],
  "stats": {
    "total": 209,
    "additions": 168,
    "deletions": 41
  },
  "files": [
    {
      "sha": "7537fcbadb08ce09bf1f12f67af1618d8a67f0b4",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4b7104b1e0c70613d0f553cb18d25c7343647d3/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4b7104b1e0c70613d0f553cb18d25c7343647d3/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=e4b7104b1e0c70613d0f553cb18d25c7343647d3",
      "patch": "@@ -1,3 +1,11 @@\n+2020-06-22  Nick Clifton  <nickc@redhat.com>\n+\n+\tPR 26112\n+\t* dwarf.c (display_debug_str_offsets): Add code to display the\n+\tcontents of the .debug_str_offsets section.\n+\t(display_debug_macro): Add support for DW_MACRO_define_strx and\n+\tDW_MACRO_undef_strx.\n+\n 2020-06-22  Saagar Jha  <saagar@saagarjha.com>\n \n \t* od-macho.c: Dump linkedit data for new load commands."
    },
    {
      "sha": "2cf81879df629388a6ca35b47bb4431a091d12ee",
      "filename": "binutils/doc/binutils.texi",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4b7104b1e0c70613d0f553cb18d25c7343647d3/binutils/doc/binutils.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4b7104b1e0c70613d0f553cb18d25c7343647d3/binutils/doc/binutils.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/doc/binutils.texi?ref=e4b7104b1e0c70613d0f553cb18d25c7343647d3",
      "patch": "@@ -2153,8 +2153,8 @@ objdump [@option{-a}|@option{--archive-headers}]\n         [@option{-r}|@option{--reloc}]\n         [@option{-R}|@option{--dynamic-reloc}]\n         [@option{-s}|@option{--full-contents}]\n-        [@option{-W[lLiaprmfFsoRtUuTgAckK]}|\n-         @option{--dwarf}[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges,=gdb_index,=addr,=cu_index,=links,=follow-links]]\n+        [@option{-W[lLiaprmfFsoORtUuTgAckK]}|\n+         @option{--dwarf}[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=str-offsets,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges,=gdb_index,=addr,=cu_index,=links,=follow-links]]\n         [@option{--ctf=}@var{section}]\n         [@option{-G}|@option{--stabs}]\n         [@option{-t}|@option{--syms}]\n@@ -2704,8 +2704,8 @@ If it is necessary to disable the @option{visualize-jumps} option\n after it has previously been enabled then use\n @option{visualize-jumps=off}.\n \n-@item -W[lLiaprmfFsoRtUuTgAckK]\n-@itemx --dwarf[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges,=gdb_index,=addr,=cu_index,=links,=follow-links]\n+@item -W[lLiaprmfFsoORtUuTgAckK]\n+@itemx --dwarf[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=str-offsets,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges,=gdb_index,=addr,=cu_index,=links,=follow-links]\n @include debug.options.texi\n \n @item --dwarf-check\n@@ -4714,8 +4714,8 @@ readelf [@option{-a}|@option{--all}]\n         [@option{-R} <number or name>|@option{--relocated-dump=}<number or name>]\n         [@option{-z}|@option{--decompress}]\n         [@option{-c}|@option{--archive-index}]\n-        [@option{-w[lLiaprmfFsoRtUuTgAckK]}|\n-         @option{--debug-dump}[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges,=gdb_index,=addr,=cu_index,=links,=follow-links]]\n+        [@option{-w[lLiaprmfFsoORtUuTgAckK]}|\n+         @option{--debug-dump}[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=str-offsets,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges,=gdb_index,=addr,=cu_index,=links,=follow-links]]\n         [@option{--dwarf-depth=@var{n}}]\n         [@option{--dwarf-start=@var{n}}]\n         [@option{--ctf=}@var{section}]\n@@ -4907,8 +4907,8 @@ Displays the file symbol index information contained in the header part\n of binary archives.  Performs the same function as the @option{t}\n command to @command{ar}, but without using the BFD library.  @xref{ar}.\n \n-@item -w[lLiaprmfFsoRtUuTgAckK]\n-@itemx --debug-dump[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges,=gdb_index,=addr,=cu_index,=links,=follow-links]\n+@item -w[lLiaprmfFsOoRtUuTgAckK]\n+@itemx --debug-dump[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,=frames-interp,=str,=str-offsets,=loc,=Ranges,=pubtypes,=trace_info,=trace_abbrev,=trace_aranges,=gdb_index,=addr,=cu_index,=links,=follow-links]\n @include debug.options.texi\n \n @include ctf.options.texi"
    },
    {
      "sha": "31260c1d19ec8377a6baa2defbb951cd51b9e6b3",
      "filename": "binutils/doc/debug.options.texi",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4b7104b1e0c70613d0f553cb18d25c7343647d3/binutils/doc/debug.options.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4b7104b1e0c70613d0f553cb18d25c7343647d3/binutils/doc/debug.options.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/doc/debug.options.texi?ref=e4b7104b1e0c70613d0f553cb18d25c7343647d3",
      "patch": "@@ -80,6 +80,10 @@ Displays the contents of the @samp{.debug_macro} and/or\n Displays the contents of the @samp{.debug_loc} and/or\n @samp{.debug_loclists} sections.\n \n+@item O\n+@itemx =str-offsets\n+Displays the contents of the @samp{.debug_str_offsets} section.\n+\n @item p\n @itemx =pubnames\n Displays the contents of the @samp{.debug_pubnames} and/or"
    },
    {
      "sha": "54acd53bd71853a80981fbcb6ea11a6cbb9a494d",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 141,
      "deletions": 28,
      "changes": 169,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4b7104b1e0c70613d0f553cb18d25c7343647d3/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4b7104b1e0c70613d0f553cb18d25c7343647d3/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=e4b7104b1e0c70613d0f553cb18d25c7343647d3",
      "patch": "@@ -88,6 +88,7 @@ int do_debug_frames;\n int do_debug_frames_interp;\n int do_debug_macinfo;\n int do_debug_str;\n+int do_debug_str_offsets;\n int do_debug_loc;\n int do_gdb_index;\n int do_trace_info;\n@@ -726,28 +727,63 @@ fetch_indexed_string (dwarf_vma idx, struct cu_tu_set *this_set,\n   enum dwarf_section_display_enum idx_sec_idx = dwo ? str_index_dwo : str_index;\n   struct dwarf_section *index_section = &debug_displays [idx_sec_idx].section;\n   struct dwarf_section *str_section = &debug_displays [str_sec_idx].section;\n-  dwarf_vma index_offset = idx * offset_size;\n+  dwarf_vma index_offset;\n   dwarf_vma str_offset;\n   const char * ret;\n+  unsigned char *curr = index_section->start;\n+  const unsigned char *end = curr + index_section->size;\n+  dwarf_vma length;\n \n   if (index_section->start == NULL)\n     return (dwo ? _(\"<no .debug_str_offsets.dwo section>\")\n \t\t: _(\"<no .debug_str_offsets section>\"));\n \n+  if (str_section->start == NULL)\n+    return (dwo ? _(\"<no .debug_str.dwo section>\")\n+\t\t: _(\"<no .debug_str section>\"));\n+\n+  /* FIXME: We should cache the length...  */\n+  SAFE_BYTE_GET_AND_INC (length, curr, 4, end);\n+  if (length == 0xffffffff)\n+    {\n+      if (offset_size != 8)\n+\twarn (_(\"UGG\"));\n+      SAFE_BYTE_GET_AND_INC (length, curr, 8, end);\n+    }\n+  else if (offset_size != 4)\n+    {\n+      warn (_(\"ugg\"));\n+    }\n+\n+  /* Skip the version and padding bytes.\n+     We assume that they are correct.  */\n+  curr += 4;\n+\n+  /* FIXME: The code below assumes that there is only one table\n+     in the .debug_str_offsets section, so check that now.  */\n+  if ((offset_size == 4 && curr + length < (end - 8))\n+      || (offset_size == 8 && curr + length < (end - 16)))\n+    {\n+      warn (_(\"index table size is too small %s vs %s\\n\"),\n+\t    dwarf_vmatoa (\"x\", length),\n+\t    dwarf_vmatoa (\"x\", index_section->size));\n+      return _(\"<table too small\");\n+    }\n+\n+  index_offset = idx * offset_size;\n+      \n   if (this_set != NULL)\n     index_offset += this_set->section_offsets [DW_SECT_STR_OFFSETS];\n-  if (index_offset >= index_section->size)\n+\n+  if (index_offset >= length)\n     {\n-      warn (_(\"DW_FORM_GNU_str_index offset too big: %s\\n\"),\n-\t    dwarf_vmatoa (\"x\", index_offset));\n+      warn (_(\"DW_FORM_GNU_str_index offset too big: %s vs %s\\n\"),\n+\t    dwarf_vmatoa (\"x\", index_offset),\n+\t    dwarf_vmatoa (\"x\", length));\n       return _(\"<index offset is too big>\");\n     }\n \n-  if (str_section->start == NULL)\n-    return (dwo ? _(\"<no .debug_str.dwo section>\")\n-\t\t: _(\"<no .debug_str section>\"));\n-\n-  str_offset = byte_get (index_section->start + index_offset, offset_size);\n+  str_offset = byte_get (curr + index_offset, offset_size);\n   str_offset -= str_section->address;\n   if (str_offset >= str_section->size)\n     {\n@@ -3161,7 +3197,7 @@ process_debug_info (struct dwarf_section *           section,\n       load_debug_section_with_follow (str_index_dwo, file);\n       load_debug_section_with_follow (debug_addr, file);\n     }\n-\n+  \n   load_debug_section_with_follow (abbrev_sec, file);\n   if (debug_displays [abbrev_sec].section.start == NULL)\n     {\n@@ -5382,6 +5418,7 @@ display_debug_macro (struct dwarf_section *section,\n \n   load_debug_section_with_follow (str, file);\n   load_debug_section_with_follow (line, file);\n+  load_debug_section_with_follow (str_index, file);\n \n   introduce (section, FALSE);\n \n@@ -5488,6 +5525,22 @@ display_debug_macro (struct dwarf_section *section,\n \n \t  switch (op)\n \t    {\n+\t    case DW_MACRO_define:\n+\t      READ_ULEB (lineno, curr, end);\n+\t      string = curr;\n+\t      curr += strnlen ((char *) string, end - string) + 1;\n+\t      printf (_(\" DW_MACRO_define - lineno : %d macro : %s\\n\"),\n+\t\t      lineno, string);\n+\t      break;\n+\n+\t    case DW_MACRO_undef:\n+\t      READ_ULEB (lineno, curr, end);\n+\t      string = curr;\n+\t      curr += strnlen ((char *) string, end - string) + 1;\n+\t      printf (_(\" DW_MACRO_undef - lineno : %d macro : %s\\n\"),\n+\t\t      lineno, string);\n+\t      break;\n+\n \t    case DW_MACRO_start_file:\n \t      {\n \t\tunsigned int filenum;\n@@ -5517,22 +5570,6 @@ display_debug_macro (struct dwarf_section *section,\n \t      printf (_(\" DW_MACRO_end_file\\n\"));\n \t      break;\n \n-\t    case DW_MACRO_define:\n-\t      READ_ULEB (lineno, curr, end);\n-\t      string = curr;\n-\t      curr += strnlen ((char *) string, end - string) + 1;\n-\t      printf (_(\" DW_MACRO_define - lineno : %d macro : %s\\n\"),\n-\t\t      lineno, string);\n-\t      break;\n-\n-\t    case DW_MACRO_undef:\n-\t      READ_ULEB (lineno, curr, end);\n-\t      string = curr;\n-\t      curr += strnlen ((char *) string, end - string) + 1;\n-\t      printf (_(\" DW_MACRO_undef - lineno : %d macro : %s\\n\"),\n-\t\t      lineno, string);\n-\t      break;\n-\n \t    case DW_MACRO_define_strp:\n \t      READ_ULEB (lineno, curr, end);\n \t      SAFE_BYTE_GET_AND_INC (offset, curr, offset_size, end);\n@@ -5575,7 +5612,29 @@ display_debug_macro (struct dwarf_section *section,\n \t\t      (unsigned long) offset);\n \t      break;\n \n+\t    case DW_MACRO_define_strx:\n+\t    case DW_MACRO_undef_strx:\n+\t      READ_ULEB (lineno, curr, end);\n+\t      READ_ULEB (offset, curr, end);\n+\t      string = (const unsigned char *)\n+\t\tfetch_indexed_string (offset, NULL, offset_size, FALSE);\n+\t      if (op == DW_MACRO_define_strx)\n+\t\tprintf (\" DW_MACRO_define_strx \");\n+\t      else\n+\t\tprintf (\" DW_MACRO_undef_strx \");\n+\t      if (do_wide)\n+\t\tprintf (_(\"(with offset %s) \"), dwarf_vmatoa (NULL, offset));\n+\t      printf (_(\"lineno : %d macro : %s\\n\"),\n+\t\t      lineno, string);\n+\t      break;\n+\n \t    default:\n+\t      if (op >= DW_MACRO_lo_user && op <= DW_MACRO_hi_user)\n+\t\t{\n+\t\t  printf (_(\" <Target Specific macro op: %#x - UNHANDLED\"), op);\n+\t\t  break;\n+\t\t}\n+\n \t      if (extended_ops == NULL || extended_ops[op] == NULL)\n \t\t{\n \t\t  error (_(\" Unknown macro opcode %02x seen\\n\"), op);\n@@ -6784,6 +6843,57 @@ display_debug_str_offsets (struct dwarf_section *section,\n       printf (_(\"\\nThe %s section is empty.\\n\"), section->name);\n       return 0;\n     }\n+\n+  unsigned char *start = section->start;\n+  unsigned char *end = start + section->size;\n+  unsigned char *curr = start;\n+\n+  load_debug_section_with_follow (str, file);\n+\n+  introduce (section, FALSE);\n+\n+  while (curr < end)\n+    {\n+      dwarf_vma length;\n+      dwarf_vma entry_length;\n+\n+      SAFE_BYTE_GET_AND_INC (length, curr, 4, end);\n+      /* FIXME: We assume that this means 64-bit DWARF is being used.  */\n+      if (length == 0xffffffff)\n+\t{\n+\t  SAFE_BYTE_GET (length, curr, 8, end);\n+\t  entry_length = 8;\n+\t}\n+      else\n+\tentry_length = 4;\n+\n+      int version;\n+      SAFE_BYTE_GET_AND_INC (version, curr, 2, end);\n+      if (version != 5)\n+\twarn (_(\"Unexpected version number in str_offset header: %#x\\n\"), version);\n+\n+      int padding;\n+      SAFE_BYTE_GET_AND_INC (padding, curr, 2, end);\n+      if (padding != 0)\n+\twarn (_(\"Unexpected value in str_offset header's padding field: %#x\\n\"), padding);\n+\n+      printf (_(\"    Length: %#lx\\n\"), (unsigned long) length);\n+      printf (_(\"    Version: %#lx\\n\"), (unsigned long) version);\n+      printf (_(\"       Index Offset   [String]\\n\"));\n+\n+      unsigned long index;\n+      for (index = 0; length >= entry_length && curr < end; index ++)\n+\t{\n+\t  dwarf_vma offset;\n+\t  const unsigned char * string;\n+\n+\t  SAFE_BYTE_GET_AND_INC (offset, curr, entry_length, end);\n+\t  string = fetch_indirect_string (offset);\n+\t  printf (\"    %8lu %s %s\\n\", index,\n+\t\t  dwarf_vmatoa (NULL, offset),\n+\t\t  string);\n+\t}\n+    }\n   /* TODO: Dump the contents.  This is made somewhat difficult by not knowing\n      what the offset size is for this section.  */\n   return 1;\n@@ -10663,6 +10773,7 @@ dwarf_select_sections_by_names (const char *names)\n       { \"ranges\", & do_debug_aranges, 1 },\n       { \"rawline\", & do_debug_lines, FLAG_DEBUG_LINES_RAW },\n       { \"str\", & do_debug_str, 1 },\n+      { \"str-offsets\", & do_debug_str_offsets, 1 },\n       /* These trace_* sections are used by Itanium VMS.  */\n       { \"trace_abbrev\", & do_trace_abbrevs, 1 },\n       { \"trace_aranges\", & do_trace_aranges, 1 },\n@@ -10729,6 +10840,7 @@ dwarf_select_sections_by_letters (const char *letters)\n       case 'l':\tdo_debug_lines |= FLAG_DEBUG_LINES_RAW;\tbreak;\n       case 'L':\tdo_debug_lines |= FLAG_DEBUG_LINES_DECODED; break;\n       case 'm': do_debug_macinfo = 1; break;\n+      case 'O':\tdo_debug_str_offsets = 1; break;\n       case 'o':\tdo_debug_loc = 1; break;\n       case 'p':\tdo_debug_pubnames = 1; break;\n       case 'R':\tdo_debug_ranges = 1; break;\n@@ -10767,6 +10879,7 @@ dwarf_select_sections_all (void)\n   do_debug_cu_index = 1;\n   do_follow_links = 1;\n   do_debug_links = 1;\n+  do_debug_str_offsets = 1;\n }\n \n #define NO_ABBREVS   NULL, NULL, NULL, 0, 0, 0, NULL, 0, NULL\n@@ -10811,8 +10924,8 @@ struct dwarf_section_display debug_displays[] =\n   { { \".debug_macro.dwo\",   \".zdebug_macro.dwo\", NO_ABBREVS },     display_debug_macro,    &do_debug_macinfo,\tTRUE },\n   { { \".debug_macinfo.dwo\", \".zdebug_macinfo.dwo\", NO_ABBREVS },   display_debug_macinfo,  &do_debug_macinfo,\tFALSE },\n   { { \".debug_str.dwo\",     \".zdebug_str.dwo\",  NO_ABBREVS },      display_debug_str,      &do_debug_str,\tTRUE },\n-  { { \".debug_str_offsets\", \".zdebug_str_offsets\", NO_ABBREVS },   display_debug_str_offsets, NULL,\t\tFALSE },\n-  { { \".debug_str_offsets.dwo\", \".zdebug_str_offsets.dwo\", NO_ABBREVS }, display_debug_str_offsets, NULL,\tFALSE },\n+  { { \".debug_str_offsets\", \".zdebug_str_offsets\", NO_ABBREVS },   display_debug_str_offsets, &do_debug_str_offsets, TRUE },\n+  { { \".debug_str_offsets.dwo\", \".zdebug_str_offsets.dwo\", NO_ABBREVS }, display_debug_str_offsets, &do_debug_str_offsets, TRUE },\n   { { \".debug_addr\",\t    \".zdebug_addr\",     NO_ABBREVS },      display_debug_addr,     &do_debug_addr,\tTRUE },\n   { { \".debug_cu_index\",    \"\",\t\t\tNO_ABBREVS },      display_cu_index,       &do_debug_cu_index,\tFALSE },\n   { { \".debug_tu_index\",    \"\",\t\t\tNO_ABBREVS },      display_cu_index,       &do_debug_cu_index,\tFALSE },"
    },
    {
      "sha": "bb7f5536e35842b07f48ec2f1975e28cdec4d445",
      "filename": "binutils/dwarf.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4b7104b1e0c70613d0f553cb18d25c7343647d3/binutils/dwarf.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4b7104b1e0c70613d0f553cb18d25c7343647d3/binutils/dwarf.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.h?ref=e4b7104b1e0c70613d0f553cb18d25c7343647d3",
      "patch": "@@ -211,6 +211,7 @@ extern int do_debug_frames;\n extern int do_debug_frames_interp;\n extern int do_debug_macinfo;\n extern int do_debug_str;\n+extern int do_debug_str_offsets;\n extern int do_debug_loc;\n extern int do_gdb_index;\n extern int do_trace_info;"
    },
    {
      "sha": "c582feb70a7301a79ac19a9f69078ec23d7c68a2",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4b7104b1e0c70613d0f553cb18d25c7343647d3/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4b7104b1e0c70613d0f553cb18d25c7343647d3/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=e4b7104b1e0c70613d0f553cb18d25c7343647d3",
      "patch": "@@ -229,9 +229,9 @@ usage (FILE *stream, int status)\n   -g, --debugging          Display debug information in object file\\n\\\n   -e, --debugging-tags     Display debug information using ctags style\\n\\\n   -G, --stabs              Display (in raw form) any STABS info in the file\\n\\\n-  -W[lLiaprmfFsoRtUuTgAckK] or\\n\\\n+  -W[lLiaprmfFsoORtUuTgAckK] or\\n\\\n   --dwarf[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,\\n\\\n-          =frames-interp,=str,=loc,=Ranges,=pubtypes,\\n\\\n+          =frames-interp,=str,=str-offsets,=loc,=Ranges,=pubtypes,\\n\\\n           =gdb_index,=trace_info,=trace_abbrev,=trace_aranges,\\n\\\n           =addr,=cu_index,=links,=follow-links]\\n\\\n                            Display DWARF info in the file\\n\\"
    },
    {
      "sha": "9e4fa3327b175b43c034d41bd82a76f526264613",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4b7104b1e0c70613d0f553cb18d25c7343647d3/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4b7104b1e0c70613d0f553cb18d25c7343647d3/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=e4b7104b1e0c70613d0f553cb18d25c7343647d3",
      "patch": "@@ -4548,9 +4548,9 @@ usage (FILE * stream)\n   -R --relocated-dump=<number|name>\\n\\\n                          Dump the contents of section <number|name> as relocated bytes\\n\\\n   -z --decompress        Decompress section before dumping it\\n\\\n-  -w[lLiaprmfFsoRtUuTgAckK] or\\n\\\n+  -w[lLiaprmfFsoORtUuTgAckK] or\\n\\\n   --debug-dump[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,\\n\\\n-               =frames-interp,=str,=loc,=Ranges,=pubtypes,\\n\\\n+               =frames-interp,=str,=str-offsets,=loc,=Ranges,=pubtypes,\\n\\\n                =gdb_index,=trace_info,=trace_abbrev,=trace_aranges,\\n\\\n                =addr,=cu_index,=links,=follow-links]\\n\\\n                          Display the contents of DWARF debug sections\\n\"));\n@@ -6388,7 +6388,7 @@ process_section_headers (Filedata * filedata)\n       if ((do_debugging || do_debug_info || do_debug_abbrevs\n \t   || do_debug_lines || do_debug_pubnames || do_debug_pubtypes\n \t   || do_debug_aranges || do_debug_frames || do_debug_macinfo\n-\t   || do_debug_str || do_debug_loc || do_debug_ranges\n+\t   || do_debug_str || do_debug_str_offsets || do_debug_loc || do_debug_ranges\n \t   || do_debug_addr || do_debug_cu_index || do_debug_links)\n \t  && (const_strneq (name, \".debug_\")\n \t      || const_strneq (name, \".zdebug_\")))\n@@ -6415,6 +6415,7 @@ process_section_headers (Filedata * filedata)\n \t      || (do_debug_macinfo  && const_strneq (name, \"macinfo\"))\n \t      || (do_debug_macinfo  && const_strneq (name, \"macro\"))\n \t      || (do_debug_str      && const_strneq (name, \"str\"))\n+\t      || (do_debug_str_offsets && const_strneq (name, \"str_offsets\"))\n \t      || (do_debug_loc      && const_strneq (name, \"loc\"))\n \t      || (do_debug_loc      && const_strneq (name, \"loclists\"))\n \t      || (do_debug_addr     && const_strneq (name, \"addr\"))"
    }
  ]
}