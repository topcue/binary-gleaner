{
  "sha": "3c76026df83bed7d97ed45e5b906b679a154b076",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2M3NjAyNmRmODNiZWQ3ZDk3ZWQ0NWU1YjkwNmI2NzlhMTU0YjA3Ng==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:33:35Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-08T20:47:58Z"
    },
    "message": "Share some Windows-related globals\n\nThis moves some Windows-related globals into nat/windows-nat.c,\nsharing them between gdb and gdbserver.\n\ngdb/ChangeLog\n2020-04-08  Tom Tromey  <tromey@adacore.com>\n\n\t* windows-nat.c (current_process_handle, current_process_id)\n\t(main_thread_id, last_sig, current_event, last_wait_event)\n\t(current_windows_thread, desired_stop_thread_id, pending_stops)\n\t(struct pending_stop, siginfo_er): Move to nat/windows-nat.c.\n\t(display_selectors, fake_create_process)\n\t(get_windows_debug_event): Update.\n\t* nat/windows-nat.h (current_process_handle, current_process_id)\n\t(main_thread_id, last_sig, current_event, last_wait_event)\n\t(current_windows_thread, desired_stop_thread_id, pending_stops)\n\t(struct pending_stop, siginfo_er): Move from windows-nat.c.\n\t* nat/windows-nat.c (current_process_handle, current_process_id)\n\t(main_thread_id, last_sig, current_event, last_wait_event)\n\t(current_windows_thread, desired_stop_thread_id, pending_stops)\n\t(siginfo_er): New globals.  Move from windows-nat.c.\n\ngdbserver/ChangeLog\n2020-04-08  Tom Tromey  <tromey@adacore.com>\n\n\t* win32-low.c (current_process_handle, current_process_id)\n\t(main_thread_id, last_sig, current_event, siginfo_er): Move to\n\tnat/windows-nat.c.",
    "tree": {
      "sha": "01c44d3a79ed16ce070e5ad10c669e8be9ecb5de",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/01c44d3a79ed16ce070e5ad10c669e8be9ecb5de"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3c76026df83bed7d97ed45e5b906b679a154b076",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3c76026df83bed7d97ed45e5b906b679a154b076",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3c76026df83bed7d97ed45e5b906b679a154b076",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3c76026df83bed7d97ed45e5b906b679a154b076/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9d8679cc712d4c31d218cc141fe700d8e6394964",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9d8679cc712d4c31d218cc141fe700d8e6394964",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9d8679cc712d4c31d218cc141fe700d8e6394964"
    }
  ],
  "stats": {
    "total": 226,
    "additions": 130,
    "deletions": 96
  },
  "files": [
    {
      "sha": "caf72cf296a0f09422538cb8b4e1a84a9cd69d07",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c76026df83bed7d97ed45e5b906b679a154b076/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c76026df83bed7d97ed45e5b906b679a154b076/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3c76026df83bed7d97ed45e5b906b679a154b076",
      "patch": "@@ -1,3 +1,20 @@\n+2020-04-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* windows-nat.c (current_process_handle, current_process_id)\n+\t(main_thread_id, last_sig, current_event, last_wait_event)\n+\t(current_windows_thread, desired_stop_thread_id, pending_stops)\n+\t(struct pending_stop, siginfo_er): Move to nat/windows-nat.c.\n+\t(display_selectors, fake_create_process)\n+\t(get_windows_debug_event): Update.\n+\t* nat/windows-nat.h (current_process_handle, current_process_id)\n+\t(main_thread_id, last_sig, current_event, last_wait_event)\n+\t(current_windows_thread, desired_stop_thread_id, pending_stops)\n+\t(struct pending_stop, siginfo_er): Move from windows-nat.c.\n+\t* nat/windows-nat.c (current_process_handle, current_process_id)\n+\t(main_thread_id, last_sig, current_event, last_wait_event)\n+\t(current_windows_thread, desired_stop_thread_id, pending_stops)\n+\t(siginfo_er): New globals.  Move from windows-nat.c.\n+\n 2020-04-08  Tom Tromey  <tromey@adacore.com>\n \n \t* windows-nat.c (get_image_name): Move to nat/windows-nat.c."
    },
    {
      "sha": "80a1583b8843e8b4ff86c483e690f224819bbc95",
      "filename": "gdb/nat/windows-nat.c",
      "status": "modified",
      "additions": 12,
      "deletions": 1,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c76026df83bed7d97ed45e5b906b679a154b076/gdb/nat/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c76026df83bed7d97ed45e5b906b679a154b076/gdb/nat/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.c?ref=3c76026df83bed7d97ed45e5b906b679a154b076",
      "patch": "@@ -1,5 +1,5 @@\n /* Internal interfaces for the Windows code\n-   Copyright (C) 1995-2019 Free Software Foundation, Inc.\n+   Copyright (C) 1995-2020 Free Software Foundation, Inc.\n \n    This file is part of GDB.\n \n@@ -22,6 +22,17 @@\n namespace windows_nat\n {\n \n+HANDLE current_process_handle;\n+DWORD current_process_id;\n+DWORD main_thread_id;\n+enum gdb_signal last_sig = GDB_SIGNAL_0;\n+DEBUG_EVENT current_event;\n+DEBUG_EVENT last_wait_event;\n+windows_thread_info *current_windows_thread;\n+DWORD desired_stop_thread_id = -1;\n+std::vector<pending_stop> pending_stops;\n+EXCEPTION_RECORD siginfo_er;\n+\n windows_thread_info::~windows_thread_info ()\n {\n   CloseHandle (h);"
    },
    {
      "sha": "501147b2c901dfd4b1ec4fee62b128b3f54b5168",
      "filename": "gdb/nat/windows-nat.h",
      "status": "modified",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c76026df83bed7d97ed45e5b906b679a154b076/gdb/nat/windows-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c76026df83bed7d97ed45e5b906b679a154b076/gdb/nat/windows-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/windows-nat.h?ref=3c76026df83bed7d97ed45e5b906b679a154b076",
      "patch": "@@ -20,6 +20,9 @@\n #define NAT_WINDOWS_NAT_H\n \n #include <windows.h>\n+#include <vector>\n+\n+#include \"target/waitstatus.h\"\n \n namespace windows_nat\n {\n@@ -111,6 +114,60 @@ enum thread_disposition_type\n extern windows_thread_info *thread_rec (ptid_t ptid,\n \t\t\t\t\tthread_disposition_type disposition);\n \n+/* Currently executing process */\n+extern HANDLE current_process_handle;\n+extern DWORD current_process_id;\n+extern DWORD main_thread_id;\n+extern enum gdb_signal last_sig;\n+\n+/* The current debug event from WaitForDebugEvent or from a pending\n+   stop.  */\n+extern DEBUG_EVENT current_event;\n+\n+/* The most recent event from WaitForDebugEvent.  Unlike\n+   current_event, this is guaranteed never to come from a pending\n+   stop.  This is important because only data from the most recent\n+   event from WaitForDebugEvent can be used when calling\n+   ContinueDebugEvent.  */\n+extern DEBUG_EVENT last_wait_event;\n+\n+/* Info on currently selected thread */\n+extern windows_thread_info *current_windows_thread;\n+\n+/* The ID of the thread for which we anticipate a stop event.\n+   Normally this is -1, meaning we'll accept an event in any\n+   thread.  */\n+extern DWORD desired_stop_thread_id;\n+\n+/* A single pending stop.  See \"pending_stops\" for more\n+   information.  */\n+struct pending_stop\n+{\n+  /* The thread id.  */\n+  DWORD thread_id;\n+\n+  /* The target waitstatus we computed.  */\n+  target_waitstatus status;\n+\n+  /* The event.  A few fields of this can be referenced after a stop,\n+     and it seemed simplest to store the entire event.  */\n+  DEBUG_EVENT event;\n+};\n+\n+/* A vector of pending stops.  Sometimes, Windows will report a stop\n+   on a thread that has been ostensibly suspended.  We believe what\n+   happens here is that two threads hit a breakpoint simultaneously,\n+   and the Windows kernel queues the stop events.  However, this can\n+   result in the strange effect of trying to single step thread A --\n+   leaving all other threads suspended -- and then seeing a stop in\n+   thread B.  To handle this scenario, we queue all such \"pending\"\n+   stops here, and then process them once the step has completed.  See\n+   PR gdb/22992.  */\n+extern std::vector<pending_stop> pending_stops;\n+\n+/* Contents of $_siginfo */\n+extern EXCEPTION_RECORD siginfo_er;\n+\n /* Return the name of the DLL referenced by H at ADDRESS.  UNICODE\n    determines what sort of string is read from the inferior.  Returns\n    the name of the DLL, or NULL on error.  If a name is returned, it"
    },
    {
      "sha": "83bf3394237b1c7b46336043b178df7b57c2ef96",
      "filename": "gdb/windows-nat.c",
      "status": "modified",
      "additions": 38,
      "deletions": 87,
      "changes": 125,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c76026df83bed7d97ed45e5b906b679a154b076/gdb/windows-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c76026df83bed7d97ed45e5b906b679a154b076/gdb/windows-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-nat.c?ref=3c76026df83bed7d97ed45e5b906b679a154b076",
      "patch": "@@ -244,28 +244,8 @@ static CORE_ADDR cygwin_get_dr (int i);\n static unsigned long cygwin_get_dr6 (void);\n static unsigned long cygwin_get_dr7 (void);\n \n-static enum gdb_signal last_sig = GDB_SIGNAL_0;\n-/* Set if a signal was received from the debugged process.  */\n-\n static std::vector<windows_thread_info *> thread_list;\n \n-/* The process and thread handles for the above context.  */\n-\n-/* The current debug event from WaitForDebugEvent or from a pending\n-   stop.  */\n-static DEBUG_EVENT current_event;\n-\n-/* The most recent event from WaitForDebugEvent.  Unlike\n-   current_event, this is guaranteed never to come from a pending\n-   stop.  This is important because only data from the most recent\n-   event from WaitForDebugEvent can be used when calling\n-   ContinueDebugEvent.  */\n-static DEBUG_EVENT last_wait_event;\n-\n-static HANDLE current_process_handle;\t/* Currently executing process */\n-static windows_thread_info *current_thread;\t/* Info on currently selected thread */\n-static EXCEPTION_RECORD siginfo_er;\t/* Contents of $_siginfo */\n-\n /* Counts of things.  */\n static int exception_count = 0;\n static int event_count = 0;\n@@ -336,37 +316,6 @@ static const struct xlate_exception xlate[] =\n \n #endif /* 0 */\n \n-/* The ID of the thread for which we anticipate a stop event.\n-   Normally this is -1, meaning we'll accept an event in any\n-   thread.  */\n-static DWORD desired_stop_thread_id = -1;\n-\n-/* A single pending stop.  See \"pending_stops\" for more\n-   information.  */\n-struct pending_stop\n-{\n-  /* The thread id.  */\n-  DWORD thread_id;\n-\n-  /* The target waitstatus we computed.  */\n-  target_waitstatus status;\n-\n-  /* The event.  A few fields of this can be referenced after a stop,\n-     and it seemed simplest to store the entire event.  */\n-  DEBUG_EVENT event;\n-};\n-\n-/* A vector of pending stops.  Sometimes, Windows will report a stop\n-   on a thread that has been ostensibly suspended.  We believe what\n-   happens here is that two threads hit a breakpoint simultaneously,\n-   and the Windows kernel queues the stop events.  However, this can\n-   result in the strange effect of trying to single step thread A --\n-   leaving all other threads suspended -- and then seeing a stop in\n-   thread B.  To handle this scenario, we queue all such \"pending\"\n-   stops here, and then process them once the step has completed.  See\n-   PR gdb/22992.  */\n-static std::vector<pending_stop> pending_stops;\n-\n struct windows_nat_target final : public x86_nat_target<inf_child_target>\n {\n   void close () override;\n@@ -387,7 +336,7 @@ struct windows_nat_target final : public x86_nat_target<inf_child_target>\n \n   bool stopped_by_sw_breakpoint () override\n   {\n-    return current_thread->stopped_at_software_breakpoint;\n+    return current_windows_thread->stopped_at_software_breakpoint;\n   }\n \n   bool supports_stopped_by_sw_breakpoint () override\n@@ -1207,7 +1156,7 @@ display_selector (HANDLE thread, DWORD sel)\n static void\n display_selectors (const char * args, int from_tty)\n {\n-  if (!current_thread)\n+  if (!current_windows_thread)\n     {\n       puts_filtered (\"Impossible to display selectors now.\\n\");\n       return;\n@@ -1218,53 +1167,53 @@ display_selectors (const char * args, int from_tty)\n       if (wow64_process)\n \t{\n \t  puts_filtered (\"Selector $cs\\n\");\n-\t  display_selector (current_thread->h,\n-\t\t\t    current_thread->wow64_context.SegCs);\n+\t  display_selector (current_windows_thread->h,\n+\t\t\t    current_windows_thread->wow64_context.SegCs);\n \t  puts_filtered (\"Selector $ds\\n\");\n-\t  display_selector (current_thread->h,\n-\t\t\t    current_thread->wow64_context.SegDs);\n+\t  display_selector (current_windows_thread->h,\n+\t\t\t    current_windows_thread->wow64_context.SegDs);\n \t  puts_filtered (\"Selector $es\\n\");\n-\t  display_selector (current_thread->h,\n-\t\t\t    current_thread->wow64_context.SegEs);\n+\t  display_selector (current_windows_thread->h,\n+\t\t\t    current_windows_thread->wow64_context.SegEs);\n \t  puts_filtered (\"Selector $ss\\n\");\n-\t  display_selector (current_thread->h,\n-\t\t\t    current_thread->wow64_context.SegSs);\n+\t  display_selector (current_windows_thread->h,\n+\t\t\t    current_windows_thread->wow64_context.SegSs);\n \t  puts_filtered (\"Selector $fs\\n\");\n-\t  display_selector (current_thread->h,\n-\t\t\t    current_thread->wow64_context.SegFs);\n+\t  display_selector (current_windows_thread->h,\n+\t\t\t    current_windows_thread->wow64_context.SegFs);\n \t  puts_filtered (\"Selector $gs\\n\");\n-\t  display_selector (current_thread->h,\n-\t\t\t    current_thread->wow64_context.SegGs);\n+\t  display_selector (current_windows_thread->h,\n+\t\t\t    current_windows_thread->wow64_context.SegGs);\n \t}\n       else\n #endif\n \t{\n \t  puts_filtered (\"Selector $cs\\n\");\n-\t  display_selector (current_thread->h,\n-\t\t\t    current_thread->context.SegCs);\n+\t  display_selector (current_windows_thread->h,\n+\t\t\t    current_windows_thread->context.SegCs);\n \t  puts_filtered (\"Selector $ds\\n\");\n-\t  display_selector (current_thread->h,\n-\t\t\t    current_thread->context.SegDs);\n+\t  display_selector (current_windows_thread->h,\n+\t\t\t    current_windows_thread->context.SegDs);\n \t  puts_filtered (\"Selector $es\\n\");\n-\t  display_selector (current_thread->h,\n-\t\t\t    current_thread->context.SegEs);\n+\t  display_selector (current_windows_thread->h,\n+\t\t\t    current_windows_thread->context.SegEs);\n \t  puts_filtered (\"Selector $ss\\n\");\n-\t  display_selector (current_thread->h,\n-\t\t\t    current_thread->context.SegSs);\n+\t  display_selector (current_windows_thread->h,\n+\t\t\t    current_windows_thread->context.SegSs);\n \t  puts_filtered (\"Selector $fs\\n\");\n-\t  display_selector (current_thread->h,\n-\t\t\t    current_thread->context.SegFs);\n+\t  display_selector (current_windows_thread->h,\n+\t\t\t    current_windows_thread->context.SegFs);\n \t  puts_filtered (\"Selector $gs\\n\");\n-\t  display_selector (current_thread->h,\n-\t\t\t    current_thread->context.SegGs);\n+\t  display_selector (current_windows_thread->h,\n+\t\t\t    current_windows_thread->context.SegGs);\n \t}\n     }\n   else\n     {\n       int sel;\n       sel = parse_and_eval_long (args);\n       printf_filtered (\"Selector \\\"%s\\\"\\n\",args);\n-      display_selector (current_thread->h, sel);\n+      display_selector (current_windows_thread->h, sel);\n     }\n }\n \n@@ -1587,7 +1536,7 @@ fake_create_process (void)\n        (unsigned) GetLastError ());\n       /*  We can not debug anything in that case.  */\n     }\n-  current_thread\n+  current_windows_thread\n     = windows_add_thread (ptid_t (current_event.dwProcessId,\n \t\t\t\t  current_event.dwThreadId, 0),\n \t\t\t  current_event.u.CreateThread.hThread,\n@@ -1782,8 +1731,9 @@ windows_nat_target::get_windows_debug_event (int pid,\n \t  current_event = iter->event;\n \n \t  inferior_ptid = ptid_t (current_event.dwProcessId, thread_id, 0);\n-\t  current_thread = thread_rec (inferior_ptid, INVALIDATE_CONTEXT);\n-\t  current_thread->reload_context = 1;\n+\t  current_windows_thread = thread_rec (inferior_ptid,\n+\t\t\t\t\t       INVALIDATE_CONTEXT);\n+\t  current_windows_thread->reload_context = 1;\n \n \t  DEBUG_EVENTS ((\"get_windows_debug_event - \"\n \t\t\t \"pending stop found in 0x%x (desired=0x%x)\\n\",\n@@ -2006,9 +1956,10 @@ windows_nat_target::get_windows_debug_event (int pid,\n   else\n     {\n       inferior_ptid = ptid_t (current_event.dwProcessId, thread_id, 0);\n-      current_thread = th;\n-      if (!current_thread)\n-\tcurrent_thread = thread_rec (inferior_ptid, INVALIDATE_CONTEXT);\n+      current_windows_thread = th;\n+      if (!current_windows_thread)\n+\tcurrent_windows_thread = thread_rec (inferior_ptid,\n+\t\t\t\t\t     INVALIDATE_CONTEXT);\n     }\n \n out:\n@@ -2066,14 +2017,14 @@ windows_nat_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n \t{\n \t  ptid_t result = ptid_t (current_event.dwProcessId, retval, 0);\n \n-\t  if (current_thread != nullptr)\n+\t  if (current_windows_thread != nullptr)\n \t    {\n-\t      current_thread->stopped_at_software_breakpoint = false;\n+\t      current_windows_thread->stopped_at_software_breakpoint = false;\n \t      if (current_event.dwDebugEventCode == EXCEPTION_DEBUG_EVENT\n \t\t  && (current_event.u.Exception.ExceptionRecord.ExceptionCode\n \t\t      == EXCEPTION_BREAKPOINT)\n \t\t  && windows_initialization_done)\n-\t\tcurrent_thread->stopped_at_software_breakpoint = true;\n+\t\tcurrent_windows_thread->stopped_at_software_breakpoint = true;\n \t    }\n \n \t  return result;"
    },
    {
      "sha": "ce547c13e408b109c6155e86c66ad29e0cea80e4",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c76026df83bed7d97ed45e5b906b679a154b076/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c76026df83bed7d97ed45e5b906b679a154b076/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=3c76026df83bed7d97ed45e5b906b679a154b076",
      "patch": "@@ -1,3 +1,9 @@\n+2020-04-08  Tom Tromey  <tromey@adacore.com>\n+\n+\t* win32-low.c (current_process_handle, current_process_id)\n+\t(main_thread_id, last_sig, current_event, siginfo_er): Move to\n+\tnat/windows-nat.c.\n+\n 2020-04-08  Tom Tromey  <tromey@adacore.com>\n \n \t* win32-low.c (get_image_name): Remove."
    },
    {
      "sha": "7060b6d152723b57d79e5ace2dbb311622212f9e",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c76026df83bed7d97ed45e5b906b679a154b076/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c76026df83bed7d97ed45e5b906b679a154b076/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=3c76026df83bed7d97ed45e5b906b679a154b076",
      "patch": "@@ -74,14 +74,6 @@ int using_threads = 1;\n \n /* Globals.  */\n static int attaching = 0;\n-static HANDLE current_process_handle = NULL;\n-static DWORD current_process_id = 0;\n-static DWORD main_thread_id = 0;\n-static EXCEPTION_RECORD siginfo_er;\t/* Contents of $_siginfo */\n-static enum gdb_signal last_sig = GDB_SIGNAL_0;\n-\n-/* The current debug event from WaitForDebugEvent.  */\n-static DEBUG_EVENT current_event;\n \n /* A status that hasn't been reported to the core yet, and so\n    win32_wait should return it next, instead of fetching the next"
    }
  ]
}