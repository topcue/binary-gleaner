{
  "sha": "1dadb1dd718f93801bcca669a0fb38e3da6177b8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWRhZGIxZGQ3MThmOTM4MDFiY2NhNjY5YTBmYjM4ZTNkYTYxNzdiOA==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-10T20:06:09Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-10T20:06:09Z"
    },
    "message": "Add multi-target tests\n\nThis adds a testcase exercising multi-target features.  It spawns 6\ninferiors, like this:\n\n inferior 1 -> native\n inferior 2 -> extended-remote 1\n inferior 3 -> core\n inferior 4 -> native\n inferior 5 -> extended-remote 2\n inferior 6 -> core\n\nand then tests various details, including:\n\n - running to breakpoints\n\n - interrupting with Ctrl-C and \"interrupt -a\"\n\n - \"next\" bouncing between two breakpoints in two threads running in\n   different targets.\n\n - since we have cores and live inferiors mixed in the same session,\n   this makes sure that gdb doesn't try to remove a core dump's\n   threads.\n\n - all-stop and non-stop modes.\n\nThis testcase caught a _lot_ of bugs in development.\n\ngdb/testsuite/ChangeLog:\n2020-01-10  Pedro Alves  <palves@redhat.com>\n\n\t* gdb.multi/multi-target.c: New file.\n\t* gdb.multi/multi-target.exp: New file.\n\t* lib/gdbserver-support.exp (gdb_target_cmd): Handle \"Non-stop\n\tmode requested, but remote does not support non-stop\".",
    "tree": {
      "sha": "7b196aa81d9c1b3c57e639606948ff99f83d0f2f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7b196aa81d9c1b3c57e639606948ff99f83d0f2f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1dadb1dd718f93801bcca669a0fb38e3da6177b8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1dadb1dd718f93801bcca669a0fb38e3da6177b8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1dadb1dd718f93801bcca669a0fb38e3da6177b8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1dadb1dd718f93801bcca669a0fb38e3da6177b8/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5b6d1e4fa4fc6827c7b3f0e99ff120dfa14d65d2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b6d1e4fa4fc6827c7b3f0e99ff120dfa14d65d2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5b6d1e4fa4fc6827c7b3f0e99ff120dfa14d65d2"
    }
  ],
  "stats": {
    "total": 472,
    "additions": 472,
    "deletions": 0
  },
  "files": [
    {
      "sha": "9297fa2dd735a09f7621eab13fac1fcc98da677b",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1dadb1dd718f93801bcca669a0fb38e3da6177b8/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1dadb1dd718f93801bcca669a0fb38e3da6177b8/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=1dadb1dd718f93801bcca669a0fb38e3da6177b8",
      "patch": "@@ -1,3 +1,10 @@\n+2020-01-10  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdb.multi/multi-target.c: New file.\n+\t* gdb.multi/multi-target.exp: New file.\n+\t* lib/gdbserver-support.exp (gdb_target_cmd): Handle \"Non-stop\n+\tmode requested, but remote does not support non-stop\".\n+\n 2020-01-10  Pedro Alves  <palves@redhat.com>\n \n \t* gdb.server/extended-remote-restart.exp (test_reload): Explicitly"
    },
    {
      "sha": "23ec6bd600f86fe40904b8069baa815e6bd7b9e4",
      "filename": "gdb/testsuite/gdb.multi/multi-target.c",
      "status": "added",
      "additions": 100,
      "deletions": 0,
      "changes": 100,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1dadb1dd718f93801bcca669a0fb38e3da6177b8/gdb/testsuite/gdb.multi/multi-target.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1dadb1dd718f93801bcca669a0fb38e3da6177b8/gdb/testsuite/gdb.multi/multi-target.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/multi-target.c?ref=1dadb1dd718f93801bcca669a0fb38e3da6177b8",
      "patch": "@@ -0,0 +1,100 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2017-2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <unistd.h>\n+#include <limits.h>\n+#include <string.h>\n+#include <pthread.h>\n+\n+#define NUM_THREADS 1\n+\n+static pthread_barrier_t barrier;\n+\n+static void *\n+thread_start (void *arg)\n+{\n+  pthread_barrier_wait (&barrier);\n+\n+  while (1)\n+    sleep (1);\n+  return NULL;\n+}\n+\n+static void\n+all_started (void)\n+{\n+}\n+\n+int wait_for_gdb;\n+\n+static void\n+function1 (void)\n+{\n+  while (wait_for_gdb)\n+    sleep (1);\n+}\n+\n+static void\n+function2 (void)\n+{\n+  while (wait_for_gdb)\n+    sleep (1);\n+}\n+\n+static void\n+function3 (void)\n+{\n+}\n+\n+static void\n+function4 (void)\n+{\n+}\n+\n+static void\n+function5 (void)\n+{\n+}\n+\n+int\n+main (int argc, char ** argv)\n+{\n+  pthread_t thread;\n+  int len;\n+\n+  alarm (360);\n+\n+  pthread_barrier_init (&barrier, NULL, NUM_THREADS + 1);\n+  pthread_create (&thread, NULL, thread_start, NULL);\n+\n+  pthread_barrier_wait (&barrier);\n+  all_started ();\n+\n+  while (1)\n+    {\n+      function1 (); /* set break 1 here */\n+      function2 (); /* set break 2 here */\n+      function3 ();\n+      function4 ();\n+      function5 ();\n+      sleep (1);\n+    }\n+\n+  return 0;\n+}"
    },
    {
      "sha": "cd0db126fba136bd9e1d1da2a5dd80363af1cfa2",
      "filename": "gdb/testsuite/gdb.multi/multi-target.exp",
      "status": "added",
      "additions": 361,
      "deletions": 0,
      "changes": 361,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1dadb1dd718f93801bcca669a0fb38e3da6177b8/gdb/testsuite/gdb.multi/multi-target.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1dadb1dd718f93801bcca669a0fb38e3da6177b8/gdb/testsuite/gdb.multi/multi-target.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.multi/multi-target.exp?ref=1dadb1dd718f93801bcca669a0fb38e3da6177b8",
      "patch": "@@ -0,0 +1,361 @@\n+# Copyright 2017-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test multi-target features.\n+\n+load_lib gdbserver-support.exp\n+\n+standard_testfile\n+\n+# The plain remote target can't do multiple inferiors.\n+if {[target_info gdb_protocol] != \"\"} {\n+    return\n+}\n+\n+if { [prepare_for_testing \"failed to prepare\" ${binfile} \"${srcfile}\" \\\n+\t  {debug pthreads}] } {\n+    return\n+}\n+\n+proc connect_target_extended_remote {binfile} {\n+    set res [gdbserver_start \"--multi\" \"\"]\n+    set gdbserver_gdbport [lindex $res 1]\n+    return [gdb_target_cmd \"extended-remote\" $gdbserver_gdbport]\n+}\n+\n+# Add and start inferior number NUM.  Returns true on success, false\n+# otherwise.\n+proc add_inferior {num target binfile {gcorefile \"\"}} {\n+    # Start another inferior.\n+    gdb_test \"add-inferior -no-connection\" \"Added inferior $num\" \\\n+\t\"add empty inferior $num\"\n+    gdb_test \"inferior $num\" \"Switching to inferior $num.*\" \\\n+\t\"switch to inferior $num\"\n+    gdb_test \"file ${binfile}\" \".*\" \"load file in inferior $num\"\n+    gdb_test_no_output \"set remote exec-file ${binfile}\" \\\n+\t\"set remote-exec file in inferior $num\"\n+\n+    if {$target == \"core\"} {\n+\tgdb_test \"core $gcorefile\" \"Core was generated by.*\" \\\n+\t    \"core [file tail $gcorefile], inf $num\"\n+\treturn 1\n+    }\n+\n+    if {$target == \"extended-remote\"} {\n+\tif {[connect_target_extended_remote $binfile]} {\n+\t    return 0\n+\t}\n+    }\n+    if ![runto \"all_started\"] then {\n+\treturn 0\n+    }\n+    delete_breakpoints\n+\n+    return 1\n+}\n+\n+proc prepare_core {} {\n+    global gcorefile gcore_created\n+    global binfile\n+\n+    clean_restart ${binfile}\n+\n+    if ![runto all_started] then {\n+\treturn -1\n+    }\n+\n+    global testfile\n+    set gcorefile [standard_output_file $testfile.gcore]\n+    set gcore_created [gdb_gcore_cmd $gcorefile \"save a core file\"]\n+}\n+\n+proc next_live_inferior {inf} {\n+    incr inf\n+    if {$inf == 3} {\n+\t# 3 is a core.\n+\treturn 4\n+    }\n+    if {$inf > 5} {\n+\t# 6 is a core.\n+\treturn 1\n+    }\n+\n+    return $inf\n+}\n+\n+# Return true on success, false otherwise.\n+\n+proc setup {non-stop} {\n+    global gcorefile gcore_created\n+    global binfile\n+\n+    clean_restart ${binfile}\n+\n+    # multi-target depends on target running in non-stop mode.  Force\n+    # it on for remote targets, until this is the default.\n+    gdb_test_no_output \"maint set target-non-stop on\"\n+\n+    gdb_test_no_output \"set non-stop ${non-stop}\"\n+\n+    if ![runto all_started] then {\n+\treturn 0\n+    }\n+\n+    delete_breakpoints\n+\n+    # inferior 1 -> native\n+    # inferior 2 -> extended-remote\n+    # inferior 3 -> core\n+    # inferior 4 -> native\n+    # inferior 5 -> extended-remote\n+    # inferior 6 -> core\n+    if {![add_inferior 2 \"extended-remote\" $binfile]} {\n+\treturn 0\n+    }\n+    if {![add_inferior 3 \"core\" $binfile $gcorefile]} {\n+\treturn 0\n+    }\n+    if {![add_inferior 4 \"native\" $binfile]} {\n+\treturn 0\n+    }\n+    if {![add_inferior 5 \"extended-remote\" $binfile]} {\n+\treturn 0\n+    }\n+    if {![add_inferior 6 \"core\" $binfile $gcorefile]} {\n+\treturn 0\n+    }\n+\n+    # For debugging.\n+    gdb_test \"info inferiors\" \".*\"\n+    gdb_test \"info threads\" \".*\"\n+\n+    # Make \"continue\" resume all inferiors.\n+    if {${non-stop} == \"off\"} {\n+\tgdb_test_no_output \"set schedule-multiple on\"\n+    }\n+\n+    return 1\n+}\n+\n+# Test \"continue\" to breakpoints in different targets.  In non-stop\n+# mode, also tests \"interrupt -a\".\n+proc test_continue {non-stop} {\n+    if {![setup ${non-stop}]} {\n+\tuntested \"setup failed\"\n+\treturn\n+    }\n+\n+    proc set_break {inf} {\n+\tgdb_test \"break function${inf} thread ${inf}.1\" \\\n+\t\"Breakpoint .* function${inf}\\\\..*\"\n+    }\n+\n+    # Select inferior INF, and then run to a breakpoint on inferior\n+    # INF+1.\n+    proc test_continue_inf {inf} {\n+\tupvar 1 non-stop non-stop\n+\n+\tglobal gdb_prompt\n+\tdelete_breakpoints\n+\n+\tset next_inf [next_live_inferior $inf]\n+\n+\tgdb_test \"inferior $inf\" \"Switching to inferior $inf.*\"\n+\tset_break $next_inf\n+\n+\tif {${non-stop} == \"off\"} {\n+\t    gdb_test \"continue\" \"hit Breakpoint .* function${next_inf}.*\"\n+\t} else {\n+\t    set msg \"continue\"\n+\t    gdb_test_multiple \"continue -a&\" $msg {\n+\t\t-re \"Continuing.*$gdb_prompt \" {\n+\t\t    pass $msg\n+\t\t}\n+\t    }\n+\n+\t    set msg \"hit bp\"\n+\t    gdb_test_multiple \"\" $msg {\n+\t\t-re \"hit Breakpoint .* function${next_inf}\" {\n+\t\t    pass $msg\n+\t\t}\n+\t    }\n+\n+\t    set msg \"stop all threads\"\n+\t    gdb_test_multiple \"interrupt -a\" $msg {\n+\t\t-re \"$gdb_prompt \" {\n+\t\t    for {set i 0} {$i < 7} {incr i} {\n+\t\t\tset ok 0\n+\t\t\tgdb_test_multiple \"\" $msg {\n+\t\t\t    -re \"Thread\\[^\\r\\n\\]*stopped\\\\.\" {\n+\t\t\t\tset ok 1\n+\t\t\t    }\n+\t\t\t}\n+\t\t\tif {!$ok} {\n+\t\t\t    break\n+\t\t\t}\n+\t\t    }\n+\t\t    gdb_assert $ok $msg\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+    for {set i 1} {$i <= 5} {incr i} {\n+\tif {$i == 3} {\n+\t    # This is a core inferior.\n+\t    continue\n+\t}\n+\n+\twith_test_prefix \"inf$i\" {\n+\t    test_continue_inf $i\n+\t}\n+    }\n+}\n+\n+# Test interrupting multiple targets with Ctrl-C.\n+\n+proc test_ctrlc {} {\n+    if {![setup \"off\"]} {\n+\tuntested \"setup failed\"\n+\treturn\n+    }\n+\n+    delete_breakpoints\n+\n+    # Select inferior INF, continue all inferiors, and then Ctrl-C.\n+    proc test_ctrlc_inf {inf} {\n+\tglobal gdb_prompt\n+\n+\tgdb_test \"inferior $inf\" \"Switching to inferior $inf.*\"\n+\n+\tset msg \"continue\"\n+\tgdb_test_multiple \"continue\" $msg {\n+\t    -re \"Continuing\" {\n+\t\tpass $msg\n+\t    }\n+\t}\n+\n+\tafter 200 { send_gdb \"\\003\" }\n+\n+\tset msg \"send_gdb control C\"\n+\tgdb_test_multiple \"\" $msg {\n+\t    -re \"received signal SIGINT.*$gdb_prompt $\" {\n+\t\tpass $msg\n+\t    }\n+\t}\n+\n+\tset msg \"all threads stopped\"\n+\tgdb_test_multiple \"info threads\" \"$msg\" {\n+\t    -re \"\\\\\\(running\\\\\\).*$gdb_prompt $\" {\n+\t\tfail $msg\n+\t    }\n+\t    -re \"$gdb_prompt $\" {\n+\t\tpass $msg\n+\t    }\n+\t}\n+    }\n+\n+    for {set i 1} {$i <= 5} {incr i} {\n+\tif {$i == 3} {\n+\t    # This is a core inferior.\n+\t    continue\n+\t}\n+\n+\twith_test_prefix \"inf$i\" {\n+\t    test_ctrlc_inf $i\n+\t}\n+    }\n+}\n+\n+# Test \"next\" bouncing between two breakpoints in two threads running\n+# in different targets.\n+proc test_ping_pong_next {} {\n+    global srcfile\n+\n+    if {![setup \"off\"]} {\n+\tuntested \"setup failed\"\n+\treturn\n+    }\n+\n+    # block/unblock inferiors 1 and 2 according to INF1 and INF2.\n+    proc block {inf1 inf2} {\n+\tgdb_test \"thread apply 1.1 p wait_for_gdb = $inf1\" \" = $inf1\"\n+\tgdb_test \"thread apply 2.1 p wait_for_gdb = $inf2\" \" = $inf2\"\n+    }\n+\n+    # We're use inferiors 1 and 2.  Make sure they're really connected\n+    # to different targets.\n+    gdb_test \"thread apply 1.1 maint print target-stack\" \\\n+\t\"- native.*\"\n+    gdb_test \"thread apply 2.1 maint print target-stack\" \\\n+\t\"- extended-remote.*\"\n+\n+    # Set two breakpoints, one for each of inferior 1 and 2.  Inferior\n+    # 1 is running on the native target, and inferior 2 is running on\n+    # extended-gdbserver.  Run to breakpoint 1 to gets things started.\n+    set line1 [gdb_get_line_number \"set break 1 here\"]\n+    set line2 [gdb_get_line_number \"set break 2 here\"]\n+\n+    gdb_test \"thread 1.1\" \"Switching to thread 1.1 .*\"\n+\n+    gdb_test \"break $srcfile:$line1 thread 1.1\" \\\n+\t\"Breakpoint .*$srcfile:$line1\\\\..*\"\n+\n+    gdb_test \"continue\" \"hit Breakpoint .*\"\n+\n+    gdb_test \"break $srcfile:$line2 thread 2.1\" \\\n+\t\"Breakpoint .*$srcfile:$line2\\\\..*\"\n+\n+    # Now block inferior 1 and issue \"next\".  We should stop at the\n+    # breakpoint for inferior 2, given schedlock off.\n+    with_test_prefix \"next inf 1\" {\n+\tblock 1 0\n+\tgdb_test \"next\" \"Thread 2.1 .*hit Breakpoint .*$srcfile:$line2.*\"\n+    }\n+\n+    # Now unblock inferior 2 and block inferior 1.  \"next\" should run\n+    # into the breakpoint in inferior 1.\n+    with_test_prefix \"next inf 2\" {\n+\tblock 0 1\n+\tgdb_test \"next\" \"Thread 1.1 .*hit Breakpoint .*$srcfile:$line1.*\"\n+    }\n+\n+    # Try nexting inferior 1 again.\n+    with_test_prefix \"next inf 1 again\" {\n+\tblock 1 0\n+\tgdb_test \"next\" \"Thread 2.1 .*hit Breakpoint .*$srcfile:$line2.*\"\n+    }\n+}\n+\n+# Make a core file with two threads upfront.  Several tests load the\n+# same core file.\n+prepare_core\n+\n+# Some basic \"continue\" + breakpoints tests.\n+with_test_prefix \"continue\" {\n+    foreach_with_prefix non-stop {\"off\" \"on\"} {\n+\ttest_continue ${non-stop}\n+    }\n+}\n+\n+# Some basic all-stop Ctrl-C tests.\n+with_test_prefix \"interrupt\" {\n+    test_ctrlc\n+}\n+\n+# Test ping-ponging between two targets with \"next\".\n+with_test_prefix \"ping-pong\" {\n+    test_ping_pong_next\n+}"
    },
    {
      "sha": "12796e8a41edcf4e0f3680a61f60ab31073cf829",
      "filename": "gdb/testsuite/lib/gdbserver-support.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1dadb1dd718f93801bcca669a0fb38e3da6177b8/gdb/testsuite/lib/gdbserver-support.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1dadb1dd718f93801bcca669a0fb38e3da6177b8/gdb/testsuite/lib/gdbserver-support.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdbserver-support.exp?ref=1dadb1dd718f93801bcca669a0fb38e3da6177b8",
      "patch": "@@ -64,6 +64,10 @@ proc gdb_target_cmd_ext { targetname serialport {additional_text \"\"} } {\n \t    -re \"Couldn't establish connection to remote.*$gdb_prompt $\" {\n \t\tverbose \"Connection failed\"\n \t    }\n+\t    -re \"Non-stop mode requested, but remote does not support non-stop.*$gdb_prompt $\" {\n+\t\tverbose \"remote does not support non-stop\"\n+\t\treturn 1\n+\t    }\n \t    -re \"Remote MIPS debugging.*$additional_text.*$gdb_prompt\" {\n \t\tverbose \"Set target to $targetname\"\n \t\treturn 0"
    }
  ]
}