{
  "sha": "b56f80d8b27dffd0f8c02b8b11068b71b9fec375",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjU2ZjgwZDhiMjdkZmZkMGY4YzAyYjhiMTEwNjhiNzFiOWZlYzM3NQ==",
  "commit": {
    "author": {
      "name": "Keith Seitz",
      "email": "keiths@redhat.com",
      "date": "2019-01-10T21:57:09Z"
    },
    "committer": {
      "name": "Keith Seitz",
      "email": "keiths@redhat.com",
      "date": "2019-01-10T21:57:09Z"
    },
    "message": "gdb/23712: Test case for multidictionary\n\nThis is a test derived from one of the reproducers in symtab/23010.\nThe DIE tree used here is typical of compilations with LTO, where an\nartificial parent DIE of language C99 imports DIEs of other languages.\n\ngdb/testsuite/ChangeLog:\n\n\tPR gdb/23712\n\tPR symtab/23010\n\t* gdb.dwarf2/multidictionary.exp: New file.",
    "tree": {
      "sha": "982a663921de4520e88f87753a3144089da85636",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/982a663921de4520e88f87753a3144089da85636"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b56f80d8b27dffd0f8c02b8b11068b71b9fec375",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b56f80d8b27dffd0f8c02b8b11068b71b9fec375",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b56f80d8b27dffd0f8c02b8b11068b71b9fec375",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b56f80d8b27dffd0f8c02b8b11068b71b9fec375/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "d3cb68081112a4976979df3f8eae7ca926e76519",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d3cb68081112a4976979df3f8eae7ca926e76519",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d3cb68081112a4976979df3f8eae7ca926e76519"
    }
  ],
  "stats": {
    "total": 163,
    "additions": 163,
    "deletions": 0
  },
  "files": [
    {
      "sha": "b0dec0d9bf84e5270aec610274c34739eebc991c",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b56f80d8b27dffd0f8c02b8b11068b71b9fec375/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b56f80d8b27dffd0f8c02b8b11068b71b9fec375/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=b56f80d8b27dffd0f8c02b8b11068b71b9fec375",
      "patch": "@@ -1,3 +1,9 @@\n+2019-01-10  Keith Seitz  <keiths@redhat.com>\n+\n+\tPR gdb/23712\n+\tPR symtab/23010\n+\t* gdb.dwarf2/multidictionary.exp: New file.\n+\n 2019-01-09  Simon Marchi  <simon.marchi@ericsson.com>\n \n \t* gdb.cp/demangle.exp (test_gnu_style_demangling): Rename to..."
    },
    {
      "sha": "5588ef214411ae40221a212c8a04964c04f240dd",
      "filename": "gdb/testsuite/gdb.dwarf2/multidictionary.exp",
      "status": "added",
      "additions": 157,
      "deletions": 0,
      "changes": 157,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b56f80d8b27dffd0f8c02b8b11068b71b9fec375/gdb/testsuite/gdb.dwarf2/multidictionary.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b56f80d8b27dffd0f8c02b8b11068b71b9fec375/gdb/testsuite/gdb.dwarf2/multidictionary.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.dwarf2/multidictionary.exp?ref=b56f80d8b27dffd0f8c02b8b11068b71b9fec375",
      "patch": "@@ -0,0 +1,157 @@\n+# Copyright 2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# A test of multi-language dictionaries, a solution to symtab/23010 et al.\n+\n+load_lib dwarf.exp\n+\n+# This test can only be run on targets which support DWARF.\n+if {![dwarf2_support]} {\n+    return 0\n+}\n+\n+standard_testfile main.c .S\n+\n+# Create the DWARF.  This is derived from the reproducer in the bug\n+# mentioned above.  This DIE tree is typical of compilations wtih\n+# LTO enabled.\n+\n+set asm_file [standard_output_file $srcfile2]\n+Dwarf::assemble $asm_file {\n+    declare_labels D45d9 D5079 D5080 D50a9 D50af D5ab2 D5ac2 D5ace D5acf\n+    declare_labels D2135f D2216a D22171 D226c4 D226ca D244ca \\\n+\tD245da D245e6\n+    declare_labels D41c21 D42025 D42045 D42038 D42045 D420b5\n+\n+    cu {} {\n+\tD45d9: compile_unit {\n+\t    {language @DW_LANG_C_plus_plus}\n+\t    {name \"SerialPortUtils.cpp\"}\n+\t} {\n+\t    D5079: base_type {\n+\t\t{byte_size 1 sdata}\n+\t\t{encoding @DW_ATE_unsigned}\n+\t\t{name \"char\"}\n+\t    }\n+\n+\t    D5080: const_type {\n+\t\t{type :$D5079}\n+\t    }\n+\n+\t    D50a9: pointer_type {\n+\t\t{byte_size 4 sdata}\n+\t\t{type :$D5080}\n+\t    }\n+\n+\t    D50af: const_type {\n+\t\t{type :$D50a9}\n+\t    }\n+\n+\t    D5ab2: subprogram {\n+\t\t{external 1 flag}\n+\t\t{linkage_name \"_Z18SerialSyncWriteStrPKc\"}\n+\t    } {\n+\t\tD5ac2: formal_parameter {\n+\t\t    {name \"msg\"}\n+\t\t    {type :$D50af}\n+\t\t}\n+\t\tD5ace: lexical_block {} {\n+\t\t    D5acf: DW_TAG_variable {\n+\t\t\t{name \"p\"}\n+\t\t\t{type :$D50a9}\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+    cu {} {\n+\tD2135f: compile_unit {\n+\t    {language @DW_LANG_C_plus_plus}\n+\t    {name \"Main.cpp\"}\n+\t} {\n+\t    D2216a: base_type {\n+\t\t{byte_size 1 sdata}\n+\t\t{encoding @DW_ATE_unsigned_char}\n+\t\t{name \"char\"}\n+\t    }\n+\n+\t    D22171: const_type {\n+\t\t{type :$D2216a}\n+\t    }\n+\n+\t    D226c4: pointer_type {\n+\t\t{byte_size 4 sdata}\n+\t\t{type :$D22171}\n+\t    }\n+\n+\t    D226ca: const_type {\n+\t\t{type :$D226c4}\n+\t    }\n+\n+\t    D245da: subprogram {\n+\t\t{name \"PrintPanicMsg\"}\n+\t    } {\n+\t\tD245e6: formal_parameter {\n+\t\t    {name \"msg\"}\n+\t\t    {type :$D226ca}\n+\t\t}\n+\t    }\n+\t}\n+    }\n+\n+    cu {} {\n+       D41c21: compile_unit {\n+           {language @DW_LANG_C99}\n+           {name \"<artificial>\"}\n+       } {\n+           D42025: subprogram {\n+               {abstract_origin %$D245da}\n+               {low_pc 0x80b60 addr}\n+               {high_pc 0x6c data4}\n+           } {\n+\t       D42038: formal_parameter {\n+\t\t   {abstract_origin %$D245e6}\n+\t       }\n+\n+\t       D42045: inlined_subroutine {\n+                   {abstract_origin %$D5ab2}\n+                   {low_pc 0x8060 addr}\n+                   {high_pc 0xc data4}\n+               } {\n+                   D420b5: formal_parameter {\n+                       {abstract_origin %$D5ac2}\n+                   }\n+               }\n+           }\n+       }\n+    }\n+}\n+\n+# Build the test executable.\n+if {[build_executable $testfile.exp $testfile [list $asm_file $srcfile] {}] \\\n+\t== -1} {\n+    return -1\n+}\n+\n+# We force the DIEs above to be read in via \"-readnow\".\n+gdb_spawn_with_cmdline_opts \"-readnow\"\n+gdb_load $binfile\n+\n+# All we need to do is check whether GDB is alive.  Without\n+# multidictionaries, it will either crash, assert, or throw an\n+# internal_error.\n+gdb_test \"p 1\" \"= 1\" \"GDB is alive\"\n+"
    }
  ]
}