{
  "sha": "0a709cba00d36d490482d0e8673e323ac1e897a6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGE3MDljYmEwMGQzNmQ0OTA0ODJkMGU4NjczZTMyM2FjMWU4OTdhNg==",
  "commit": {
    "author": {
      "name": "Alok Kumar Sharma",
      "email": "AlokKumar.Sharma@amd.com",
      "date": "2020-03-04T11:46:52Z"
    },
    "committer": {
      "name": "Alok Kumar Sharma",
      "email": "AlokKumar.Sharma@amd.com",
      "date": "2020-03-04T11:46:52Z"
    },
    "message": "gdb.fortran: Allow Flang kind printing in fortran testing\n\nIn lib/fortran.exp, in the helper function fortran_int4, kind\nparameter is expected to be printed as (kind=4) for the LLVM\nFortran compiler, Flang along with gfortran.  And in the helper\nfunction fortran_int8 kind parameter is expected to be printed\nas (kind=8).  But for the Flang compiler default kind is not\nprinted and non default kind is printed differently than gfortran\nas below.\n  integer(kind=4) => integer\n  integer(kind=8) => integer*8\n  real(kind=4) => real\n  real(kind=8) => double precision\n  complex(kind=4) => complex\n  logical(kind=4) => logical\n  character(kind=1) => character\nThis commit adds support for printing of kind parameter for the\nFlang.  There should be no change when testing with gfortran.\n\nNote: The current patch overrides earlier patch with below details.\n  commit c3b149eb7697b376df1b3a47d0102afda389ee6d\n  Author Alok Kumar Sharma (alokkumar.sharma@amd.com)\nEarlier patch was incomplete and based on assumption that flang\nshould be changed to dump a type with kind like the way gfortan does.\nLater it was realized that the way flang dumps this info is not\nincorrect but different. And changes in gdb test framework are\nfinalized.\n\ngdb/testsuite/ChangeLog:\n\n\t* lib/fortran.exp (fortran_int4): Handle flang kind printing.\n\t(fortran_int8): Likewise.\n\t(fortran_real4): Likewise.\n\t(fortran_real8): Likewise.\n\t(fortran_complex4): Likewise.\n\t(fortran_logical4): Likewise.\n\t(fortran_character1): Likewise.",
    "tree": {
      "sha": "eec6d653bec494e2b109872d22694d12540f9f92",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/eec6d653bec494e2b109872d22694d12540f9f92"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0a709cba00d36d490482d0e8673e323ac1e897a6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0a709cba00d36d490482d0e8673e323ac1e897a6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0a709cba00d36d490482d0e8673e323ac1e897a6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0a709cba00d36d490482d0e8673e323ac1e897a6/comments",
  "author": {
    "login": "alokkrsharma",
    "id": 60725621,
    "node_id": "MDQ6VXNlcjYwNzI1NjIx",
    "avatar_url": "https://avatars.githubusercontent.com/u/60725621?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alokkrsharma",
    "html_url": "https://github.com/alokkrsharma",
    "followers_url": "https://api.github.com/users/alokkrsharma/followers",
    "following_url": "https://api.github.com/users/alokkrsharma/following{/other_user}",
    "gists_url": "https://api.github.com/users/alokkrsharma/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alokkrsharma/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alokkrsharma/subscriptions",
    "organizations_url": "https://api.github.com/users/alokkrsharma/orgs",
    "repos_url": "https://api.github.com/users/alokkrsharma/repos",
    "events_url": "https://api.github.com/users/alokkrsharma/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alokkrsharma/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "alokkrsharma",
    "id": 60725621,
    "node_id": "MDQ6VXNlcjYwNzI1NjIx",
    "avatar_url": "https://avatars.githubusercontent.com/u/60725621?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/alokkrsharma",
    "html_url": "https://github.com/alokkrsharma",
    "followers_url": "https://api.github.com/users/alokkrsharma/followers",
    "following_url": "https://api.github.com/users/alokkrsharma/following{/other_user}",
    "gists_url": "https://api.github.com/users/alokkrsharma/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/alokkrsharma/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/alokkrsharma/subscriptions",
    "organizations_url": "https://api.github.com/users/alokkrsharma/orgs",
    "repos_url": "https://api.github.com/users/alokkrsharma/repos",
    "events_url": "https://api.github.com/users/alokkrsharma/events{/privacy}",
    "received_events_url": "https://api.github.com/users/alokkrsharma/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a847e32224d9a4297514a9a291c024c207eefdb9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a847e32224d9a4297514a9a291c024c207eefdb9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a847e32224d9a4297514a9a291c024c207eefdb9"
    }
  ],
  "stats": {
    "total": 45,
    "additions": 31,
    "deletions": 14
  },
  "files": [
    {
      "sha": "acd155f924450b69169abd38f5f8a8e2bf778ab4",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0a709cba00d36d490482d0e8673e323ac1e897a6/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0a709cba00d36d490482d0e8673e323ac1e897a6/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=0a709cba00d36d490482d0e8673e323ac1e897a6",
      "patch": "@@ -1,3 +1,13 @@\n+2020-03-04  Alok Kumar Sharma  <AlokKumar.Sharma@amd.com>\n+\n+\t* lib/fortran.exp (fortran_int4): Handle flang kind printing.\n+\t(fortran_int8): Likewise.\n+\t(fortran_real4): Likewise.\n+\t(fortran_real8): Likewise.\n+\t(fortran_complex4): Likewise.\n+\t(fortran_logical4): Likewise.\n+\t(fortran_character1): Likewise.\n+\n 2020-03-03  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.fortran/logical.exp: Add tests that any non-zero value is"
    },
    {
      "sha": "549ed657904fad2f6b1c11051f608b3e643b243b",
      "filename": "gdb/testsuite/lib/fortran.exp",
      "status": "modified",
      "additions": 21,
      "deletions": 14,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0a709cba00d36d490482d0e8673e323ac1e897a6/gdb/testsuite/lib/fortran.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0a709cba00d36d490482d0e8673e323ac1e897a6/gdb/testsuite/lib/fortran.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/fortran.exp?ref=0a709cba00d36d490482d0e8673e323ac1e897a6",
      "patch": "@@ -32,9 +32,10 @@ proc set_lang_fortran {} {\n proc fortran_int4 {} {\n     if {[test_compiler_info {gcc-4-[012]-*}]} {\n \treturn \"int4\"\n-    } elseif {[test_compiler_info {gcc-*}]\n-\t      || [test_compiler_info {clang-*}]} {\n+    } elseif {[test_compiler_info {gcc-*}]} {\n \treturn \"integer\\\\(kind=4\\\\)\"\n+    } elseif {[test_compiler_info {clang-*}]} {\n+\treturn \"integer\"\n     } elseif {[test_compiler_info {icc-*}]} {\n \treturn \"INTEGER\\\\(4\\\\)\"\n     } else {\n@@ -45,9 +46,10 @@ proc fortran_int4 {} {\n proc fortran_int8 {} {\n     if {[test_compiler_info {gcc-4-[012]-*}]} {\n \treturn \"int8\"\n-    } elseif {[test_compiler_info {gcc-*}]\n-\t      || [test_compiler_info {clang-*}]} {\n+    } elseif {[test_compiler_info {gcc-*}]} {\n \treturn \"integer\\\\(kind=8\\\\)\"\n+    } elseif {[test_compiler_info {clang-*}]} {\n+\treturn \"integer*8\"\n     } elseif {[test_compiler_info {icc-*}]} {\n \treturn \"INTEGER\\\\(8\\\\)\"\n     } else {\n@@ -58,9 +60,10 @@ proc fortran_int8 {} {\n proc fortran_real4 {} {\n     if {[test_compiler_info {gcc-4-[012]-*}]} {\n \treturn \"real4\"\n-    } elseif {[test_compiler_info {gcc-*}]\n-\t      || [test_compiler_info {clang-*}]} {\n+    } elseif {[test_compiler_info {gcc-*}]} {\n \treturn \"real\\\\(kind=4\\\\)\"\n+    } elseif {[test_compiler_info {clang-*}]} {\n+\treturn \"real\"\n     } elseif {[test_compiler_info {icc-*}]} {\n \treturn \"REAL\\\\(4\\\\)\"\n     } else {\n@@ -71,9 +74,10 @@ proc fortran_real4 {} {\n proc fortran_real8 {} {\n     if {[test_compiler_info {gcc-4-[012]-*}]} {\n \treturn \"real8\"\n-    } elseif {[test_compiler_info {gcc-*}]\n-\t      || [test_compiler_info {clang-*}]} {\n+    } elseif {[test_compiler_info {gcc-*}]} {\n \treturn \"real\\\\(kind=8\\\\)\"\n+    } elseif {[test_compiler_info {clang-*}]} {\n+\treturn \"double precision\"\n     } elseif {[test_compiler_info {icc-*}]} {\n \treturn \"REAL\\\\(8\\\\)\"\n     } else {\n@@ -84,9 +88,10 @@ proc fortran_real8 {} {\n proc fortran_complex4 {} {\n     if {[test_compiler_info {gcc-4-[012]-*}]} {\n \treturn \"complex4\"\n-    } elseif {[test_compiler_info {gcc-*}]\n-\t      || [test_compiler_info {clang-*}]} {\n+    } elseif {[test_compiler_info {gcc-*}]} {\n \treturn \"complex\\\\(kind=4\\\\)\"\n+    } elseif {[test_compiler_info {clang-*}]} {\n+\treturn \"complex\"\n     } elseif {[test_compiler_info {icc-*}]} {\n \treturn \"COMPLEX\\\\(4\\\\)\"\n     } else {\n@@ -97,9 +102,10 @@ proc fortran_complex4 {} {\n proc fortran_logical4 {} {\n     if {[test_compiler_info {gcc-4-[012]-*}]} {\n \treturn \"logical4\"\n-    } elseif {[test_compiler_info {gcc-*}]\n-\t      || [test_compiler_info {clang-*}]} {\n+    } elseif {[test_compiler_info {gcc-*}]} {\n \treturn \"logical\\\\(kind=4\\\\)\"\n+    } elseif {[test_compiler_info {clang-*}]} {\n+\treturn \"logical\"\n     } elseif {[test_compiler_info {icc-*}]} {\n \treturn \"LOGICAL\\\\(4\\\\)\"\n     } else {\n@@ -110,9 +116,10 @@ proc fortran_logical4 {} {\n proc fortran_character1 {} {\n     if {[test_compiler_info {gcc-4-[012]-*}]} {\n \treturn \"character1\"\n-    } elseif {[test_compiler_info {gcc-*}]\n-\t      || [test_compiler_info {clang-*}]} {\n+    } elseif {[test_compiler_info {gcc-*}]} {\n \treturn \"character\\\\(kind=1\\\\)\"\n+    } elseif {[test_compiler_info {clang-*}]} {\n+\treturn \"character\"\n     } elseif {[test_compiler_info {icc-*}]} {\n \treturn \"CHARACTER\\\\(1\\\\)\"\n     } else {"
    }
  ]
}