{
  "sha": "fc6a93854b3c9520259926891c3a5c559d3545d1",
  "node_id": "C_kwDOANOeidoAKGZjNmE5Mzg1NGIzYzk1MjAyNTk5MjY4OTFjM2E1YzU1OWQzNTQ1ZDE",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-11-22T08:14:15Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-11-22T08:14:15Z"
    },
    "message": "[gdb/testsuite] Speed up MACRO_AT_* calls\n\nCurrently, for each MACRO_AT_range or MACRO_AT_func in dwarf assembly the\nfollowing is done:\n- $srcdir/$subdir/$srcfile is compiled to an executable using\n  flags \"debug\"\n- a new gdb instance is started\n- the new executable is loaded.\n\nThis is inefficient, because the executable is identical within the same\nDwarf::assemble call.\n\nShare the gdb instance in the same Dwarf::assemble invocation, which speeds\nup a make check with RUNTESTFLAGS like this to catch all dwarf assembly\ntest-cases:\n...\nrtf=$(echo $(cd src/gdb/testsuite; find gdb.* -type f -name \"*.exp\" \\\n      | xargs grep -l Dwarf::assemble))\n...\nfrom:\n...\nreal    1m39.916s\nuser    1m25.668s\nsys     0m21.377s\n...\nto:\n...\nreal    1m29.512s\nuser    1m17.316s\nsys     0m19.100s\n...\n\nTested on x86_64-linux.",
    "tree": {
      "sha": "4a951f6f82077c6c568c0d9575fbb8f7eb6a1e86",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4a951f6f82077c6c568c0d9575fbb8f7eb6a1e86"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fc6a93854b3c9520259926891c3a5c559d3545d1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc6a93854b3c9520259926891c3a5c559d3545d1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fc6a93854b3c9520259926891c3a5c559d3545d1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fc6a93854b3c9520259926891c3a5c559d3545d1/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b4ab41207051793d280aeba47abe8e6ed3ac5861",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b4ab41207051793d280aeba47abe8e6ed3ac5861",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b4ab41207051793d280aeba47abe8e6ed3ac5861"
    }
  ],
  "stats": {
    "total": 160,
    "additions": 148,
    "deletions": 12
  },
  "files": [
    {
      "sha": "22124f6a080ce774fd6ea31b50e57f9443533efb",
      "filename": "gdb/testsuite/lib/dwarf.exp",
      "status": "modified",
      "additions": 148,
      "deletions": 12,
      "changes": 160,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fc6a93854b3c9520259926891c3a5c559d3545d1/gdb/testsuite/lib/dwarf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fc6a93854b3c9520259926891c3a5c559d3545d1/gdb/testsuite/lib/dwarf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/dwarf.exp?ref=fc6a93854b3c9520259926891c3a5c559d3545d1",
      "patch": "@@ -196,6 +196,145 @@ proc build_executable_and_dwo_files { testname executable options args } {\n     return 0\n }\n \n+# Utility function for procs shared_gdb_*.\n+\n+proc init_shared_gdb {} {\n+    global shared_gdb_enabled\n+    global shared_gdb_started\n+\n+    if { ! [info exists shared_gdb_enabled] } {\n+\tset shared_gdb_enabled 0\n+\tset shared_gdb_started 0\n+    }\n+}\n+\n+# Cluster of four procs:\n+# - shared_gdb_enable\n+# - shared_gdb_disable\n+# - shared_gdb_start_use SRC OPTIONS\n+# - shared_gdb_end_use\n+#\n+# Can be used like so:\n+#\n+#   {\n+#     if { $share } shared_gdb_enable\n+#     ...\n+#     shared_gdb_start_use $src $options\n+#     ...\n+#     shared_gdb_end_use\n+#     ...\n+#     shared_gdb_start_use $src $options\n+#     ...\n+#     shared_gdb_end_use\n+#     ...\n+#     if { $share } shared_gdb_disable\n+#   }\n+#\n+# to write functionalty that could share ($share == 1) or could not\n+# share ($share == 0) a gdb session between two uses.\n+\n+proc shared_gdb_enable {} {\n+    set me shared_gdb_enable\n+\n+    init_shared_gdb\n+    global shared_gdb_enabled\n+    global shared_gdb_started\n+\n+    if { $shared_gdb_enabled } {\n+\terror \"$me: gdb sharing already enabled\"\n+    }\n+    set shared_gdb_enabled 1\n+\n+    if { $shared_gdb_started } {\n+\terror \"$me: gdb sharing not stopped\"\n+    }\n+}\n+\n+# See above.\n+\n+proc shared_gdb_disable {} {\n+    init_shared_gdb\n+    global shared_gdb_enabled\n+    global shared_gdb_started\n+\n+    if { ! $shared_gdb_enabled } {\n+\terror \"$me: gdb sharing not enabled\"\n+    }\n+    set shared_gdb_enabled 0\n+\n+    if { $shared_gdb_started } {\n+\tgdb_exit\n+\tset shared_gdb_started 0\n+    }\n+}\n+\n+# See above.\n+\n+proc shared_gdb_start_use { src options } {\n+    set me shared_gdb_start_use\n+\n+    init_shared_gdb\n+    global shared_gdb_enabled\n+    global shared_gdb_started\n+    global shared_gdb_src\n+    global shared_gdb_options\n+\n+    set do_start 1\n+    if { $shared_gdb_enabled && $shared_gdb_started } {\n+\tif { $shared_gdb_src != $src\n+\t     || $shared_gdb_options != $options } {\n+\t    error \"$me: gdb sharing inconsistent\"\n+\t}\n+\n+\tset do_start 0\n+    }\n+\n+    if { $do_start } {\n+\tset exe [standard_temp_file func_addr[pid].x]\n+\n+\tgdb_compile $src $exe executable $options\n+\n+\tgdb_exit\n+\tgdb_start\n+\tgdb_load \"$exe\"\n+\n+\tif { $shared_gdb_enabled } {\n+\t    set shared_gdb_started 1\n+\t    set shared_gdb_src $src\n+\t    set shared_gdb_options $options\n+\t}\n+    }\n+}\n+\n+# See above.\n+\n+proc shared_gdb_end_use {} {\n+    init_shared_gdb\n+    global shared_gdb_enabled\n+\n+    if { ! $shared_gdb_enabled } {\n+\tgdb_exit\n+    }\n+}\n+\n+# Enable gdb session sharing within BODY.\n+\n+proc with_shared_gdb { body } {\n+    shared_gdb_enable\n+    set code [catch { uplevel 1 $body } result]\n+    shared_gdb_disable\n+\n+    # Return as appropriate.\n+    if { $code == 1 } {\n+\tglobal errorInfo errorCode\n+\treturn -code error -errorinfo $errorInfo -errorcode $errorCode $result\n+    } elseif { $code > 1 } {\n+\treturn -code $code $result\n+    }\n+\n+    return $result\n+}\n+\n # Return a list of expressions about function FUNC's address and length.\n # The first expression is the address of function FUNC, and the second\n # one is FUNC's length.  SRC is the source file having function FUNC.\n@@ -227,13 +366,7 @@ proc build_executable_and_dwo_files { testname executable options args } {\n proc function_range { func src {options {debug}} } {\n     global decimal gdb_prompt\n \n-    set exe [standard_temp_file func_addr[pid].x]\n-\n-    gdb_compile $src $exe executable $options\n-\n-    gdb_exit\n-    gdb_start\n-    gdb_load \"$exe\"\n+    shared_gdb_start_use $src $options\n \n     # Compute the label offset, and we can get the function start address\n     # by \"${func}_label - $func_label_offset\".\n@@ -271,7 +404,8 @@ proc function_range { func src {options {debug}} } {\n \t}\n     }\n \n-    gdb_exit\n+    shared_gdb_end_use\n+\n     return [list \"${func}_label - $func_label_offset\" $func_length]\n }\n \n@@ -2624,10 +2758,12 @@ namespace eval Dwarf {\n \t# the first in .debug_info.\n \tdummy_cu\n \n-\t# Not \"uplevel\" here, because we want to evaluate in this\n-\t# namespace.  This is somewhat bad because it means we can't\n-\t# readily refer to outer variables.\n-\teval $body\n+\twith_shared_gdb {\n+\t    # Not \"uplevel\" here, because we want to evaluate in this\n+\t    # namespace.  This is somewhat bad because it means we can't\n+\t    # readily refer to outer variables.\n+\t    eval $body\n+\t}\n \n \t# Dummy CU at the end to ensure that the last CU in $body is not\n \t# the last in .debug_info."
    }
  ]
}