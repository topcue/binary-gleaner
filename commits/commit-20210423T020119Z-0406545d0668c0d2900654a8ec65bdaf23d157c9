{
  "sha": "0406545d0668c0d2900654a8ec65bdaf23d157c9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDQwNjU0NWQwNjY4YzBkMjkwMDY1NGE4ZWM2NWJkYWYyM2QxNTdjOQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-04-23T02:00:39Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-04-23T02:01:19Z"
    },
    "message": "gdb: use function_view for iterate_over_bp_locations' callback\n\nUse a function_view instead of function pointer + data.  Actually,\nnothing uses the data anyway, but that makes iterate_over_bp_locations\nmore like iterate_over_breakpoints.\n\ngdb/ChangeLog:\n\n\t* breakpoint.c (iterate_over_bp_locations): Change callback to\n\tfunction view, remove data parameter.\n\t* breakpoint.h (iterate_over_bp_locations): Likewise.\n\t* record-full.c (record_full_sync_record_breakpoints): Remove\n\tdata parameter.\n\nChange-Id: I66cdc94a505f67bc640bcc66865fb535ee939a57",
    "tree": {
      "sha": "1497f66bdea1e7f786a3c12f4dcc7b637447af3e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1497f66bdea1e7f786a3c12f4dcc7b637447af3e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0406545d0668c0d2900654a8ec65bdaf23d157c9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0406545d0668c0d2900654a8ec65bdaf23d157c9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0406545d0668c0d2900654a8ec65bdaf23d157c9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0406545d0668c0d2900654a8ec65bdaf23d157c9/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "19f6a43c6c17147acba638eab64f2bf8de4b1447",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/19f6a43c6c17147acba638eab64f2bf8de4b1447",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/19f6a43c6c17147acba638eab64f2bf8de4b1447"
    }
  ],
  "stats": {
    "total": 19,
    "additions": 13,
    "deletions": 6
  },
  "files": [
    {
      "sha": "7e4b0bd95db8d60a037f092691bb10bd6d2913b0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0406545d0668c0d2900654a8ec65bdaf23d157c9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0406545d0668c0d2900654a8ec65bdaf23d157c9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0406545d0668c0d2900654a8ec65bdaf23d157c9",
      "patch": "@@ -1,3 +1,11 @@\n+2021-04-22  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* breakpoint.c (iterate_over_bp_locations): Change callback to\n+\tfunction view, remove data parameter.\n+\t* breakpoint.h (iterate_over_bp_locations): Likewise.\n+\t* record-full.c (record_full_sync_record_breakpoints): Remove\n+\tdata parameter.\n+\n 2021-04-22  Tom Tromey  <tom@tromey.com>\n \n \t* c-typeprint.c (c_type_print_base_struct_union): Use"
    },
    {
      "sha": "a20464a10623184d1eeea7e0afa88348f2efbe6c",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0406545d0668c0d2900654a8ec65bdaf23d157c9/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0406545d0668c0d2900654a8ec65bdaf23d157c9/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=0406545d0668c0d2900654a8ec65bdaf23d157c9",
      "patch": "@@ -2943,13 +2943,13 @@ insert_breakpoints (void)\n /* Invoke CALLBACK for each of bp_location.  */\n \n void\n-iterate_over_bp_locations (walk_bp_location_callback callback)\n+iterate_over_bp_locations (gdb::function_view<void (bp_location *)> callback)\n {\n   struct bp_location *loc, **loc_tmp;\n \n   ALL_BP_LOCATIONS (loc, loc_tmp)\n     {\n-      callback (loc, NULL);\n+      callback (loc);\n     }\n }\n "
    },
    {
      "sha": "3447e25da205b93821308abae52b9898ace4a542",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0406545d0668c0d2900654a8ec65bdaf23d157c9/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0406545d0668c0d2900654a8ec65bdaf23d157c9/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=0406545d0668c0d2900654a8ec65bdaf23d157c9",
      "patch": "@@ -1304,9 +1304,8 @@ extern void breakpoint_init_inferior (enum inf_context);\n \n extern void breakpoint_auto_delete (bpstat);\n \n-typedef void (*walk_bp_location_callback) (struct bp_location *, void *);\n-\n-extern void iterate_over_bp_locations (walk_bp_location_callback);\n+extern void iterate_over_bp_locations\n+  (gdb::function_view<void (bp_location *)> callback);\n \n /* Return the chain of command lines to execute when this breakpoint\n    is hit.  */"
    },
    {
      "sha": "8a035b2663eab04926184fa744a07d952f1df147",
      "filename": "gdb/record-full.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0406545d0668c0d2900654a8ec65bdaf23d157c9/gdb/record-full.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0406545d0668c0d2900654a8ec65bdaf23d157c9/gdb/record-full.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/record-full.c?ref=0406545d0668c0d2900654a8ec65bdaf23d157c9",
      "patch": "@@ -1720,7 +1720,7 @@ struct record_full_breakpoint\n static std::vector<record_full_breakpoint> record_full_breakpoints;\n \n static void\n-record_full_sync_record_breakpoints (struct bp_location *loc, void *data)\n+record_full_sync_record_breakpoints (struct bp_location *loc)\n {\n   if (loc->loc_type != bp_loc_software_breakpoint)\n       return;"
    }
  ]
}