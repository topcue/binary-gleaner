{
  "sha": "932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTMyNTM5ZDdhMzVjY2MxNTMxNmVjOGNjMGVmMGZlZmNiM2MwOGY0ZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-10-17T18:34:53Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-10-17T18:34:53Z"
    },
    "message": "Have partial symbol tables own psymbol vectors\n\nCurrently pointers to all partial symbols are stored in two vectors;\nand then indices into these vectors are stored in each partial_symtab.\n\nThis patch changes this so that each partial symtab instead has\nvectors of symbols.  add_psymbol_to_list can now be changed into a\nmethod on partial_symtab as well.\n\nMy main motivation for doing this is that I am looking into calling\nsort_pst_symbols in the background.  However, I haven't actually\nimplemented this yet.  (Also this may make it more feasible to also\nsort the static psymbols, though I haven't tried that either.)\n\nAlso, though, this lets us remove the \"current_global_psymbols\"\nvector, because now the callers can simply refer directly to the\npsymtab that they are modifying (formerly this was implicit).\n\nThe main drawback of this patch is that it increases the size of\npartial symtab.\n\ngdb/ChangeLog\n2020-10-17  Tom Tromey  <tom@tromey.com>\n\n\t* xcoffread.c (xcoff_end_psymtab): Use partial_symtab::empty.\n\t(scan_xcoff_symtab): Update.\n\t* psymtab.h (class psymtab_storage) <global_psymbols,\n\tstatic_psymbols, current_global_psymbols,\n\tcurrent_static_psymbols>: Remove.\n\t* psymtab.c (require_partial_symbols, find_pc_sect_psymbol)\n\t(match_partial_symbol, lookup_partial_symbol): Update.\n\t(print_partial_symbols): Change parameters.\n\t(dump_psymtab, recursively_search_psymtabs)\n\t(psym_fill_psymbol_map, psym_find_compunit_symtab_by_address)\n\t(sort_pst_symbols, partial_symtab::partial_symtab): Update.\n\t(concat): Remove.\n\t(end_psymtab_common): Simplify.\n\t(append_psymbol_to_list): Change parameters.\n\t(partial_symtabs::add_psymbol): Rename from add_psymbol_to_list.\n\t(init_psymbol_list): Simplify.\n\t(maintenance_info_psymtabs, maintenance_check_psymtabs): Update.\n\t* psympriv.h (struct partial_symtab) <empty>: New method.\n\t<globals_offset, n_global_syms, statics_offset, n_static_syms>:\n\tRemove.\n\t<global_psymbols, static_psymbols>: New members.\n\t<add_psymbol>: New methods.\n\t(add_psymbol_to_list): Don't declare.\n\t(psymbol_placement): Move earlier.\n\t* mdebugread.c (parse_partial_symbols): Update.\n\t(handle_psymbol_enumerators): Change parameters.\n\t(mdebug_expand_psymtab): Update.\n\t* dwarf2/read.c (process_psymtab_comp_unit_reader)\n\t(add_partial_symbol): Update.\n\t* dwarf2/index-write.c (write_psymbols): Change parameters.\n\t(write_one_signatured_type): Update.\n\t(recursively_count_psymbols): Update.\n\t(recursively_write_psymbols): Update.\n\t(class debug_names) <recursively_write_psymbols>: Update.\n\t<write_psymbols>: Change parameters.\n\t<write_one_signatured_type>: Update.\n\t* dbxread.c (read_dbx_symtab): Update.\n\t(dbx_end_psymtab): Use partial_symtab::empty.\n\t* ctfread.c (struct ctf_context) <pst>: New member.\n\t(create_partial_symtab): Set it.\n\t(ctf_psymtab_type_cb, ctf_psymtab_var_cb): Update.\n\t(scan_partial_symbols): Use the psymtab's context.  Update.",
    "tree": {
      "sha": "0d5429e890098ea06ec1eec96cc2aafd45fe6e33",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0d5429e890098ea06ec1eec96cc2aafd45fe6e33"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cfabbd351a174406fd5aa063303f5c8bf9266bbc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cfabbd351a174406fd5aa063303f5c8bf9266bbc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cfabbd351a174406fd5aa063303f5c8bf9266bbc"
    }
  ],
  "stats": {
    "total": 860,
    "additions": 392,
    "deletions": 468
  },
  "files": [
    {
      "sha": "419b716eb41b2009b45619f3618377ee99f415cb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d",
      "patch": "@@ -1,3 +1,48 @@\n+2020-10-17  Tom Tromey  <tom@tromey.com>\n+\n+\t* xcoffread.c (xcoff_end_psymtab): Use partial_symtab::empty.\n+\t(scan_xcoff_symtab): Update.\n+\t* psymtab.h (class psymtab_storage) <global_psymbols,\n+\tstatic_psymbols, current_global_psymbols,\n+\tcurrent_static_psymbols>: Remove.\n+\t* psymtab.c (require_partial_symbols, find_pc_sect_psymbol)\n+\t(match_partial_symbol, lookup_partial_symbol): Update.\n+\t(print_partial_symbols): Change parameters.\n+\t(dump_psymtab, recursively_search_psymtabs)\n+\t(psym_fill_psymbol_map, psym_find_compunit_symtab_by_address)\n+\t(sort_pst_symbols, partial_symtab::partial_symtab): Update.\n+\t(concat): Remove.\n+\t(end_psymtab_common): Simplify.\n+\t(append_psymbol_to_list): Change parameters.\n+\t(partial_symtabs::add_psymbol): Rename from add_psymbol_to_list.\n+\t(init_psymbol_list): Simplify.\n+\t(maintenance_info_psymtabs, maintenance_check_psymtabs): Update.\n+\t* psympriv.h (struct partial_symtab) <empty>: New method.\n+\t<globals_offset, n_global_syms, statics_offset, n_static_syms>:\n+\tRemove.\n+\t<global_psymbols, static_psymbols>: New members.\n+\t<add_psymbol>: New methods.\n+\t(add_psymbol_to_list): Don't declare.\n+\t(psymbol_placement): Move earlier.\n+\t* mdebugread.c (parse_partial_symbols): Update.\n+\t(handle_psymbol_enumerators): Change parameters.\n+\t(mdebug_expand_psymtab): Update.\n+\t* dwarf2/read.c (process_psymtab_comp_unit_reader)\n+\t(add_partial_symbol): Update.\n+\t* dwarf2/index-write.c (write_psymbols): Change parameters.\n+\t(write_one_signatured_type): Update.\n+\t(recursively_count_psymbols): Update.\n+\t(recursively_write_psymbols): Update.\n+\t(class debug_names) <recursively_write_psymbols>: Update.\n+\t<write_psymbols>: Change parameters.\n+\t<write_one_signatured_type>: Update.\n+\t* dbxread.c (read_dbx_symtab): Update.\n+\t(dbx_end_psymtab): Use partial_symtab::empty.\n+\t* ctfread.c (struct ctf_context) <pst>: New member.\n+\t(create_partial_symtab): Set it.\n+\t(ctf_psymtab_type_cb, ctf_psymtab_var_cb): Update.\n+\t(scan_partial_symbols): Use the psymtab's context.  Update.\n+\n 2020-10-17  Tom Tromey  <tom@tromey.com>\n \n \t* valprint.c (generic_value_print): Remove comment."
    },
    {
      "sha": "3c506dd42f8f61a220ceaaee5f037b47df75246c",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 15,
      "deletions": 14,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d",
      "patch": "@@ -115,6 +115,7 @@ struct ctf_context\n {\n   ctf_file_t *fp;\n   struct objfile *of;\n+  partial_symtab *pst;\n   struct buildsym_compunit *builder;\n };\n \n@@ -1320,6 +1321,8 @@ create_partial_symtab (const char *name,\n   ccx = XOBNEW (&objfile->objfile_obstack, struct ctf_context);\n   ccx->fp = cfp;\n   ccx->of = objfile;\n+  ccx->pst = pst;\n+  ccx->builder = nullptr;\n   pst->context = ccx;\n \n   return pst;\n@@ -1377,7 +1380,7 @@ ctf_psymtab_type_cb (ctf_id_t tid, void *arg)\n \treturn 0;\n     }\n \n-    add_psymbol_to_list (name.get (), true,\n+  ccp->pst->add_psymbol (name.get (), true,\n \t\t\t domain, aclass, section,\n \t\t\t psymbol_placement::GLOBAL,\n \t\t\t 0, language_c, ccp->of);\n@@ -1392,10 +1395,10 @@ ctf_psymtab_var_cb (const char *name, ctf_id_t id, void *arg)\n {\n   struct ctf_context *ccp = (struct ctf_context *) arg;\n \n-  add_psymbol_to_list (name, true,\n-\t\t       VAR_DOMAIN, LOC_STATIC, -1,\n-\t\t       psymbol_placement::GLOBAL,\n-\t\t       0, language_c, ccp->of);\n+  ccp->pst->add_psymbol (name, true,\n+\t\t\t VAR_DOMAIN, LOC_STATIC, -1,\n+\t\t\t psymbol_placement::GLOBAL,\n+\t\t\t 0, language_c, ccp->of);\n   return 0;\n }\n \n@@ -1405,19 +1408,17 @@ ctf_psymtab_var_cb (const char *name, ctf_id_t id, void *arg)\n static void\n scan_partial_symbols (ctf_file_t *cfp, struct objfile *of)\n {\n-  struct ctf_context ccx;\n   bfd *abfd = of->obfd;\n   const char *name = bfd_get_filename (abfd);\n   ctf_psymtab *pst = create_partial_symtab (name, cfp, of);\n \n-  ccx.fp = cfp;\n-  ccx.of = of;\n+  struct ctf_context *ccx = pst->context;\n \n-  if (ctf_type_iter (cfp, ctf_psymtab_type_cb, &ccx) == CTF_ERR)\n+  if (ctf_type_iter (cfp, ctf_psymtab_type_cb, ccx) == CTF_ERR)\n     complaint (_(\"ctf_type_iter scan_partial_symbols failed - %s\"),\n \t       ctf_errmsg (ctf_errno (cfp)));\n \n-  if (ctf_variable_iter (cfp, ctf_psymtab_var_cb, &ccx) == CTF_ERR)\n+  if (ctf_variable_iter (cfp, ctf_psymtab_var_cb, ccx) == CTF_ERR)\n     complaint (_(\"ctf_variable_iter scan_partial_symbols failed - %s\"),\n \t       ctf_errmsg (ctf_errno (cfp)));\n \n@@ -1457,10 +1458,10 @@ scan_partial_symbols (ctf_file_t *cfp, struct objfile *of)\n       else\n \taclass = LOC_TYPEDEF;\n \n-      add_psymbol_to_list (tname.get (), true,\n-\t\t\t   tdomain, aclass, -1,\n-\t\t\t   psymbol_placement::STATIC,\n-\t\t\t   0, language_c, of);\n+      pst->add_psymbol (tname.get (), true,\n+\t\t\ttdomain, aclass, -1,\n+\t\t\tpsymbol_placement::STATIC,\n+\t\t\t0, language_c, of);\n     }\n \n   end_psymtab_common (of, pst);"
    },
    {
      "sha": "4665cddc5f190182fb14134bcc90f5751cb11c98",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 41,
      "deletions": 42,
      "changes": 83,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d",
      "patch": "@@ -1460,21 +1460,21 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \t  switch (p[1])\n \t    {\n \t    case 'S':\n-\t      add_psymbol_to_list (gdb::string_view (sym_name, sym_len), true,\n-\t\t\t\t   VAR_DOMAIN, LOC_STATIC,\n-\t\t\t\t   data_sect_index,\n-\t\t\t\t   psymbol_placement::STATIC,\n-\t\t\t\t   nlist.n_value, psymtab_language, objfile);\n+\t      pst->add_psymbol (gdb::string_view (sym_name, sym_len), true,\n+\t\t\t\tVAR_DOMAIN, LOC_STATIC,\n+\t\t\t\tdata_sect_index,\n+\t\t\t\tpsymbol_placement::STATIC,\n+\t\t\t\tnlist.n_value, psymtab_language, objfile);\n \t      continue;\n \n \t    case 'G':\n \t      /* The addresses in these entries are reported to be\n \t\t wrong.  See the code that reads 'G's for symtabs.  */\n-\t      add_psymbol_to_list (gdb::string_view (sym_name, sym_len), true,\n-\t\t\t\t   VAR_DOMAIN, LOC_STATIC,\n-\t\t\t\t   data_sect_index,\n-\t\t\t\t   psymbol_placement::GLOBAL,\n-\t\t\t\t   nlist.n_value, psymtab_language, objfile);\n+\t      pst->add_psymbol (gdb::string_view (sym_name, sym_len), true,\n+\t\t\t\tVAR_DOMAIN, LOC_STATIC,\n+\t\t\t\tdata_sect_index,\n+\t\t\t\tpsymbol_placement::GLOBAL,\n+\t\t\t\tnlist.n_value, psymtab_language, objfile);\n \t      continue;\n \n \t    case 'T':\n@@ -1488,17 +1488,17 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \t\t  || (p == namestring + 1\n \t\t      && namestring[0] != ' '))\n \t\t{\n-\t\t  add_psymbol_to_list (gdb::string_view (sym_name, sym_len),\n-\t\t\t\t       true, STRUCT_DOMAIN, LOC_TYPEDEF, -1,\n-\t\t\t\t       psymbol_placement::STATIC,\n-\t\t\t\t       0, psymtab_language, objfile);\n+\t\t  pst->add_psymbol (gdb::string_view (sym_name, sym_len),\n+\t\t\t\t    true, STRUCT_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t\t\t    psymbol_placement::STATIC,\n+\t\t\t\t    0, psymtab_language, objfile);\n \t\t  if (p[2] == 't')\n \t\t    {\n \t\t      /* Also a typedef with the same name.  */\n-\t\t      add_psymbol_to_list (gdb::string_view (sym_name, sym_len),\n-\t\t\t\t\t   true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n-\t\t\t\t\t   psymbol_placement::STATIC,\n-\t\t\t\t\t   0, psymtab_language, objfile);\n+\t\t      pst->add_psymbol (gdb::string_view (sym_name, sym_len),\n+\t\t\t\t\ttrue, VAR_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t\t\t\tpsymbol_placement::STATIC,\n+\t\t\t\t\t0, psymtab_language, objfile);\n \t\t      p += 1;\n \t\t    }\n \t\t}\n@@ -1507,10 +1507,10 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \t    case 't':\n \t      if (p != namestring)\t/* a name is there, not just :T...  */\n \t\t{\n-\t\t  add_psymbol_to_list (gdb::string_view (sym_name, sym_len),\n-\t\t\t\t       true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n-\t\t\t\t       psymbol_placement::STATIC,\n-\t\t\t\t       0, psymtab_language, objfile);\n+\t\t  pst->add_psymbol (gdb::string_view (sym_name, sym_len),\n+\t\t\t\t    true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t\t\t    psymbol_placement::STATIC,\n+\t\t\t\t    0, psymtab_language, objfile);\n \t\t}\n \t    check_enum:\n \t      /* If this is an enumerated type, we need to\n@@ -1568,10 +1568,10 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \t\t\t;\n \t\t      /* Note that the value doesn't matter for\n \t\t\t enum constants in psymtabs, just in symtabs.  */\n-\t\t      add_psymbol_to_list (gdb::string_view (p, q - p), true,\n-\t\t\t\t\t   VAR_DOMAIN, LOC_CONST, -1,\n-\t\t\t\t\t   psymbol_placement::STATIC, 0,\n-\t\t\t\t\t   psymtab_language, objfile);\n+\t\t      pst->add_psymbol (gdb::string_view (p, q - p), true,\n+\t\t\t\t\tVAR_DOMAIN, LOC_CONST, -1,\n+\t\t\t\t\tpsymbol_placement::STATIC, 0,\n+\t\t\t\t\tpsymtab_language, objfile);\n \t\t      /* Point past the name.  */\n \t\t      p = q;\n \t\t      /* Skip over the value.  */\n@@ -1586,10 +1586,10 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \n \t    case 'c':\n \t      /* Constant, e.g. from \"const\" in Pascal.  */\n-\t      add_psymbol_to_list (gdb::string_view (sym_name, sym_len), true,\n-\t\t\t\t   VAR_DOMAIN, LOC_CONST, -1,\n-\t\t\t\t   psymbol_placement::STATIC, 0,\n-\t\t\t\t   psymtab_language, objfile);\n+\t      pst->add_psymbol (gdb::string_view (sym_name, sym_len), true,\n+\t\t\t\tVAR_DOMAIN, LOC_CONST, -1,\n+\t\t\t\tpsymbol_placement::STATIC, 0,\n+\t\t\t\tpsymtab_language, objfile);\n \t      continue;\n \n \t    case 'f':\n@@ -1641,11 +1641,11 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \t\t  pst->set_text_low (nlist.n_value);\n \t\t  textlow_not_set = 0;\n \t\t}\n-\t      add_psymbol_to_list (gdb::string_view (sym_name, sym_len), true,\n-\t\t\t\t   VAR_DOMAIN, LOC_BLOCK,\n-\t\t\t\t   SECT_OFF_TEXT (objfile),\n-\t\t\t\t   psymbol_placement::STATIC,\n-\t\t\t\t   nlist.n_value, psymtab_language, objfile);\n+\t      pst->add_psymbol (gdb::string_view (sym_name, sym_len), true,\n+\t\t\t\tVAR_DOMAIN, LOC_BLOCK,\n+\t\t\t\tSECT_OFF_TEXT (objfile),\n+\t\t\t\tpsymbol_placement::STATIC,\n+\t\t\t\tnlist.n_value, psymtab_language, objfile);\n \t      continue;\n \n \t      /* Global functions were ignored here, but now they\n@@ -1700,11 +1700,11 @@ read_dbx_symtab (minimal_symbol_reader &reader, struct objfile *objfile)\n \t\t  pst->set_text_low (nlist.n_value);\n \t\t  textlow_not_set = 0;\n \t\t}\n-\t      add_psymbol_to_list (gdb::string_view (sym_name, sym_len), true,\n-\t\t\t\t   VAR_DOMAIN, LOC_BLOCK,\n-\t\t\t\t   SECT_OFF_TEXT (objfile),\n-\t\t\t\t   psymbol_placement::GLOBAL,\n-\t\t\t\t   nlist.n_value, psymtab_language, objfile);\n+\t      pst->add_psymbol (gdb::string_view (sym_name, sym_len), true,\n+\t\t\t\tVAR_DOMAIN, LOC_BLOCK,\n+\t\t\t\tSECT_OFF_TEXT (objfile),\n+\t\t\t\tpsymbol_placement::GLOBAL,\n+\t\t\t\tnlist.n_value, psymtab_language, objfile);\n \t      continue;\n \n \t      /* Two things show up here (hopefully); static symbols of\n@@ -2043,8 +2043,7 @@ dbx_end_psymtab (struct objfile *objfile, legacy_psymtab *pst,\n \n   if (num_includes == 0\n       && number_dependencies == 0\n-      && pst->n_global_syms == 0\n-      && pst->n_static_syms == 0\n+      && pst->empty ()\n       && has_line_numbers == 0)\n     {\n       /* Throw away this psymtab, it's empty.  */"
    },
    {
      "sha": "e6188f79333e432d78a89bda676156f88e9ae0bd",
      "filename": "gdb/dwarf2/index-write.c",
      "status": "modified",
      "additions": 23,
      "deletions": 49,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/dwarf2/index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/dwarf2/index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-write.c?ref=932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d",
      "patch": "@@ -539,14 +539,12 @@ symbol_kind (struct partial_symbol *psym)\n static void\n write_psymbols (struct mapped_symtab *symtab,\n \t\tstd::unordered_set<partial_symbol *> &psyms_seen,\n-\t\tstruct partial_symbol **psymp,\n-\t\tint count,\n+\t\tconst std::vector<partial_symbol *> &symbols,\n \t\toffset_type cu_index,\n \t\tint is_static)\n {\n-  for (; count-- > 0; ++psymp)\n+  for (partial_symbol *psym : symbols)\n     {\n-      struct partial_symbol *psym = *psymp;\n       const char *name = psym->ginfo.search_name ();\n \n       if (psym->ginfo.language () == language_ada)\n@@ -618,17 +616,11 @@ write_one_signatured_type (void **slot, void *d)\n   struct signatured_type *entry = (struct signatured_type *) *slot;\n   partial_symtab *psymtab = entry->per_cu.v.psymtab;\n \n-  write_psymbols (info->symtab,\n-\t\t  info->psyms_seen,\n-\t\t  (info->objfile->partial_symtabs->global_psymbols.data ()\n-\t\t   + psymtab->globals_offset),\n-\t\t  psymtab->n_global_syms, info->cu_index,\n+  write_psymbols (info->symtab, info->psyms_seen,\n+\t\t  psymtab->global_psymbols, info->cu_index,\n \t\t  0);\n-  write_psymbols (info->symtab,\n-\t\t  info->psyms_seen,\n-\t\t  (info->objfile->partial_symtabs->static_psymbols.data ()\n-\t\t   + psymtab->statics_offset),\n-\t\t  psymtab->n_static_syms, info->cu_index,\n+  write_psymbols (info->symtab, info->psyms_seen,\n+\t\t  psymtab->static_psymbols, info->cu_index,\n \t\t  1);\n \n   info->types_list.append_uint (8, BFD_ENDIAN_LITTLE,\n@@ -654,8 +646,8 @@ recursively_count_psymbols (partial_symtab *psymtab,\n       recursively_count_psymbols (psymtab->dependencies[i],\n \t\t\t\t  psyms_seen);\n \n-  psyms_seen += psymtab->n_global_syms;\n-  psyms_seen += psymtab->n_static_syms;\n+  psyms_seen += psymtab->global_psymbols.size ();\n+  psyms_seen += psymtab->static_psymbols.size ();\n }\n \n /* Recurse into all \"included\" dependencies and write their symbols as\n@@ -676,17 +668,11 @@ recursively_write_psymbols (struct objfile *objfile,\n \t\t\t\t  psymtab->dependencies[i],\n \t\t\t\t  symtab, psyms_seen, cu_index);\n \n-  write_psymbols (symtab,\n-\t\t  psyms_seen,\n-\t\t  (objfile->partial_symtabs->global_psymbols.data ()\n-\t\t   + psymtab->globals_offset),\n-\t\t  psymtab->n_global_syms, cu_index,\n+  write_psymbols (symtab, psyms_seen,\n+\t\t  psymtab->global_psymbols, cu_index,\n \t\t  0);\n-  write_psymbols (symtab,\n-\t\t  psyms_seen,\n-\t\t  (objfile->partial_symtabs->static_psymbols.data ()\n-\t\t   + psymtab->statics_offset),\n-\t\t  psymtab->n_static_syms, cu_index,\n+  write_psymbols (symtab, psyms_seen,\n+\t\t  psymtab->static_psymbols, cu_index,\n \t\t  1);\n }\n \n@@ -912,14 +898,10 @@ class debug_names\n \trecursively_write_psymbols\n \t  (objfile, psymtab->dependencies[i], psyms_seen, cu_index);\n \n-    write_psymbols (psyms_seen,\n-\t\t    (objfile->partial_symtabs->global_psymbols.data ()\n-\t\t     + psymtab->globals_offset),\n-\t\t    psymtab->n_global_syms, cu_index, false, unit_kind::cu);\n-    write_psymbols (psyms_seen,\n-\t\t    (objfile->partial_symtabs->static_psymbols.data ()\n-\t\t     + psymtab->statics_offset),\n-\t\t    psymtab->n_static_syms, cu_index, true, unit_kind::cu);\n+    write_psymbols (psyms_seen, psymtab->global_psymbols,\n+\t\t    cu_index, false, unit_kind::cu);\n+    write_psymbols (psyms_seen, psymtab->static_psymbols,\n+\t\t    cu_index, true, unit_kind::cu);\n   }\n \n   /* Return number of bytes the .debug_names section will have.  This\n@@ -1251,13 +1233,11 @@ class debug_names\n \n   /* Call insert for all partial symbols and mark them in PSYMS_SEEN.  */\n   void write_psymbols (std::unordered_set<partial_symbol *> &psyms_seen,\n-\t\t       struct partial_symbol **psymp, int count, int cu_index,\n-\t\t       bool is_static, unit_kind kind)\n+\t\t       const std::vector<partial_symbol *> &symbols,\n+\t\t       int cu_index, bool is_static, unit_kind kind)\n   {\n-    for (; count-- > 0; ++psymp)\n+    for (partial_symbol *psym : symbols)\n       {\n-\tstruct partial_symbol *psym = *psymp;\n-\n \t/* Only add a given psymbol once.  */\n \tif (psyms_seen.insert (psym).second)\n \t  insert (psym, cu_index, is_static, kind);\n@@ -1272,16 +1252,10 @@ class debug_names\n   {\n     partial_symtab *psymtab = entry->per_cu.v.psymtab;\n \n-    write_psymbols (info->psyms_seen,\n-\t\t    (info->objfile->partial_symtabs->global_psymbols.data ()\n-\t\t     + psymtab->globals_offset),\n-\t\t    psymtab->n_global_syms, info->cu_index, false,\n-\t\t    unit_kind::tu);\n-    write_psymbols (info->psyms_seen,\n-\t\t    (info->objfile->partial_symtabs->static_psymbols.data ()\n-\t\t     + psymtab->statics_offset),\n-\t\t    psymtab->n_static_syms, info->cu_index, true,\n-\t\t    unit_kind::tu);\n+    write_psymbols (info->psyms_seen, psymtab->global_psymbols,\n+\t\t    info->cu_index, false, unit_kind::tu);\n+    write_psymbols (info->psyms_seen, psymtab->static_psymbols,\n+\t\t    info->cu_index, true, unit_kind::tu);\n \n     info->types_list.append_uint (dwarf5_offset_size (), m_dwarf5_byte_order,\n \t\t\t\t  to_underlying (entry->per_cu.sect_off));"
    },
    {
      "sha": "37409c5c3fc64093ac1b23086572b0b3a575cafa",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d",
      "patch": "@@ -7667,7 +7667,8 @@ process_psymtab_comp_unit_reader (const struct die_reader_specs *reader,\n \t\t\tsect_offset_str (per_cu->sect_off),\n \t\t\tpaddress (gdbarch, pst->text_low (objfile)),\n \t\t\tpaddress (gdbarch, pst->text_high (objfile)),\n-\t\t\tpst->n_global_syms, pst->n_static_syms);\n+\t\t\t(int) pst->global_psymbols.size (),\n+\t\t\t(int) pst->static_psymbols.size ());\n }\n \n /* Subroutine of dwarf2_build_psymtabs_hard to simplify it.\n@@ -8640,7 +8641,7 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n \t\t\t\t\t    &objfile->objfile_obstack);\n \t  psymbol.ginfo.set_linkage_name (pdi->linkage_name);\n \t}\n-      add_psymbol_to_list (psymbol, *where, objfile);\n+      cu->per_cu->v.psymtab->add_psymbol (psymbol, *where, objfile);\n     }\n }\n "
    },
    {
      "sha": "1b2e3523df9172a90bbc4068561d9ebe89cdd182",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 78,
      "deletions": 79,
      "changes": 157,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d",
      "patch": "@@ -264,8 +264,8 @@ static int add_line (struct linetable *, int, CORE_ADDR, int);\n \n static struct linetable *shrink_linetable (struct linetable *);\n \n-static void handle_psymbol_enumerators (struct objfile *, FDR *, int,\n-\t\t\t\t\tCORE_ADDR);\n+static void handle_psymbol_enumerators (struct objfile *, partial_symtab *,\n+\t\t\t\t\tFDR *, int, CORE_ADDR);\n \n static const char *mdebug_next_symbol_text (struct objfile *);\n \f\n@@ -3029,25 +3029,25 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t    switch (p[1])\n \t\t      {\n \t\t      case 'S':\n-\t\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n-\t\t\t\t\t\t\t       p - namestring),\n-\t\t\t\t\t     true, VAR_DOMAIN, LOC_STATIC,\n-\t\t\t\t\t     SECT_OFF_DATA (objfile),\n-\t\t\t\t\t     psymbol_placement::STATIC,\n-\t\t\t\t\t     sh.value,\n-\t\t\t\t\t     psymtab_language, objfile);\n+\t\t\tpst->add_psymbol (gdb::string_view (namestring,\n+\t\t\t\t\t\t\t    p - namestring),\n+\t\t\t\t\t  true, VAR_DOMAIN, LOC_STATIC,\n+\t\t\t\t\t  SECT_OFF_DATA (objfile),\n+\t\t\t\t\t  psymbol_placement::STATIC,\n+\t\t\t\t\t  sh.value,\n+\t\t\t\t\t  psymtab_language, objfile);\n \t\t\tcontinue;\n \t\t      case 'G':\n \t\t\t/* The addresses in these entries are reported\n \t\t\t   to be wrong.  See the code that reads 'G's\n \t\t\t   for symtabs.  */\n-\t\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n-\t\t\t\t\t\t\t       p - namestring),\n-\t\t\t\t\t     true, VAR_DOMAIN, LOC_STATIC,\n-\t\t\t\t\t     SECT_OFF_DATA (objfile),\n-\t\t\t\t\t     psymbol_placement::GLOBAL,\n-\t\t\t\t\t     sh.value,\n-\t\t\t\t\t     psymtab_language, objfile);\n+\t\t\tpst->add_psymbol (gdb::string_view (namestring,\n+\t\t\t\t\t\t\t    p - namestring),\n+\t\t\t\t\t  true, VAR_DOMAIN, LOC_STATIC,\n+\t\t\t\t\t  SECT_OFF_DATA (objfile),\n+\t\t\t\t\t  psymbol_placement::GLOBAL,\n+\t\t\t\t\t  sh.value,\n+\t\t\t\t\t  psymtab_language, objfile);\n \t\t\tcontinue;\n \n \t\t      case 'T':\n@@ -3061,15 +3061,15 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t    || (p == namestring + 1\n \t\t\t\t&& namestring[0] != ' '))\n \t\t\t  {\n-\t\t\t    add_psymbol_to_list\n+\t\t\t    pst->add_psymbol\n \t\t\t      (gdb::string_view (namestring, p - namestring),\n \t\t\t       true, STRUCT_DOMAIN, LOC_TYPEDEF, -1,\n \t\t\t       psymbol_placement::STATIC, 0, psymtab_language,\n \t\t\t       objfile);\n \t\t\t    if (p[2] == 't')\n \t\t\t      {\n \t\t\t\t/* Also a typedef with the same name.  */\n-\t\t\t\tadd_psymbol_to_list\n+\t\t\t\tpst->add_psymbol\n \t\t\t\t  (gdb::string_view (namestring,\n \t\t\t\t\t\t     p - namestring),\n \t\t\t\t   true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n@@ -3083,7 +3083,7 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\tif (p != namestring)\t/* a name is there, not\n \t\t\t\t\t\t   just :T...  */\n \t\t\t  {\n-\t\t\t    add_psymbol_to_list\n+\t\t\t    pst->add_psymbol\n \t\t\t      (gdb::string_view (namestring,\n \t\t\t\t\t\t p - namestring),\n \t\t\t       true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n@@ -3149,13 +3149,13 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t\t/* Note that the value doesn't matter for\n \t\t\t\t   enum constants in psymtabs, just in\n \t\t\t\t   symtabs.  */\n-\t\t\t\tadd_psymbol_to_list (gdb::string_view (p,\n-\t\t\t\t\t\t\t\t       q - p),\n-\t\t\t\t\t\t     true, VAR_DOMAIN,\n-\t\t\t\t\t\t     LOC_CONST, -1,\n-\t\t\t\t\t\t     psymbol_placement::STATIC,\n-\t\t\t\t\t\t     0, psymtab_language,\n-\t\t\t\t\t\t     objfile);\n+\t\t\t\tpst->add_psymbol (gdb::string_view (p,\n+\t\t\t\t\t\t\t\t    q - p),\n+\t\t\t\t\t\t  true, VAR_DOMAIN,\n+\t\t\t\t\t\t  LOC_CONST, -1,\n+\t\t\t\t\t\t  psymbol_placement::STATIC,\n+\t\t\t\t\t\t  0, psymtab_language,\n+\t\t\t\t\t\t  objfile);\n \t\t\t\t/* Point past the name.  */\n \t\t\t\tp = q;\n \t\t\t\t/* Skip over the value.  */\n@@ -3169,11 +3169,11 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\tcontinue;\n \t\t      case 'c':\n \t\t\t/* Constant, e.g. from \"const\" in Pascal.  */\n-\t\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n-\t\t\t\t\t\t\t       p - namestring),\n-\t\t\t\t\t     true, VAR_DOMAIN, LOC_CONST, -1,\n-\t\t\t\t\t     psymbol_placement::STATIC,\n-\t\t\t\t\t     0, psymtab_language, objfile);\n+\t\t\tpst->add_psymbol (gdb::string_view (namestring,\n+\t\t\t\t\t\t\t    p - namestring),\n+\t\t\t\t\t  true, VAR_DOMAIN, LOC_CONST, -1,\n+\t\t\t\t\t  psymbol_placement::STATIC,\n+\t\t\t\t\t  0, psymtab_language, objfile);\n \t\t\tcontinue;\n \n \t\t      case 'f':\n@@ -3183,13 +3183,13 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t    function_outside_compilation_unit_complaint\n \t\t\t      (copy.c_str ());\n \t\t\t  }\n-\t\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n-\t\t\t\t\t\t\t       p - namestring),\n-\t\t\t\t\t     true, VAR_DOMAIN, LOC_BLOCK,\n-\t\t\t\t\t     SECT_OFF_TEXT (objfile),\n-\t\t\t\t\t     psymbol_placement::STATIC,\n-\t\t\t\t\t     sh.value,\n-\t\t\t\t\t     psymtab_language, objfile);\n+\t\t\tpst->add_psymbol (gdb::string_view (namestring,\n+\t\t\t\t\t\t\t    p - namestring),\n+\t\t\t\t\t  true, VAR_DOMAIN, LOC_BLOCK,\n+\t\t\t\t\t  SECT_OFF_TEXT (objfile),\n+\t\t\t\t\t  psymbol_placement::STATIC,\n+\t\t\t\t\t  sh.value,\n+\t\t\t\t\t  psymtab_language, objfile);\n \t\t\tcontinue;\n \n \t\t\t/* Global functions were ignored here, but now they\n@@ -3203,13 +3203,13 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t\t    function_outside_compilation_unit_complaint\n \t\t\t      (copy.c_str ());\n \t\t\t  }\n-\t\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n-\t\t\t\t\t\t\t       p - namestring),\n-\t\t\t\t\t     true, VAR_DOMAIN, LOC_BLOCK,\n-\t\t\t\t\t     SECT_OFF_TEXT (objfile),\n-\t\t\t\t\t     psymbol_placement::GLOBAL,\n-\t\t\t\t\t     sh.value,\n-\t\t\t\t\t     psymtab_language, objfile);\n+\t\t\tpst->add_psymbol (gdb::string_view (namestring,\n+\t\t\t\t\t\t\t    p - namestring),\n+\t\t\t\t\t  true, VAR_DOMAIN, LOC_BLOCK,\n+\t\t\t\t\t  SECT_OFF_TEXT (objfile),\n+\t\t\t\t\t  psymbol_placement::GLOBAL,\n+\t\t\t\t\t  sh.value,\n+\t\t\t\t\t  psymtab_language, objfile);\n \t\t\tcontinue;\n \n \t\t\t/* Two things show up here (hopefully); static\n@@ -3439,17 +3439,17 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t     symbol table, and the MAIN__ symbol via the minimal\n \t\t     symbol table.  */\n \t\t  if (sh.st == stProc)\n-\t\t    add_psymbol_to_list (sym_name, true,\n-\t\t\t\t\t VAR_DOMAIN, LOC_BLOCK,\n-\t\t\t\t\t section,\n-\t\t\t\t\t psymbol_placement::GLOBAL,\n-\t\t\t\t\t sh.value, psymtab_language, objfile);\n+\t\t    pst->add_psymbol (sym_name, true,\n+\t\t\t\t      VAR_DOMAIN, LOC_BLOCK,\n+\t\t\t\t      section,\n+\t\t\t\t      psymbol_placement::GLOBAL,\n+\t\t\t\t      sh.value, psymtab_language, objfile);\n \t\t  else\n-\t\t    add_psymbol_to_list (sym_name, true,\n-\t\t\t\t\t VAR_DOMAIN, LOC_BLOCK,\n-\t\t\t\t\t section,\n-\t\t\t\t\t psymbol_placement::STATIC,\n-\t\t\t\t\t sh.value, psymtab_language, objfile);\n+\t\t    pst->add_psymbol (sym_name, true,\n+\t\t\t\t      VAR_DOMAIN, LOC_BLOCK,\n+\t\t\t\t      section,\n+\t\t\t\t      psymbol_placement::STATIC,\n+\t\t\t\t      sh.value, psymtab_language, objfile);\n \n \t\t  procaddr = sh.value;\n \n@@ -3512,12 +3512,13 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t      && sh.iss != 0\n \t\t      && sh.index != cur_sdx + 2)\n \t\t    {\n-\t\t      add_psymbol_to_list (sym_name, true,\n-\t\t\t\t\t   STRUCT_DOMAIN, LOC_TYPEDEF, -1,\n-\t\t\t\t\t   psymbol_placement::STATIC,\n-\t\t\t\t\t   0, psymtab_language, objfile);\n+\t\t      pst->add_psymbol (sym_name, true,\n+\t\t\t\t\tSTRUCT_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t\t\t\tpsymbol_placement::STATIC,\n+\t\t\t\t\t0, psymtab_language, objfile);\n \t\t    }\n-\t\t  handle_psymbol_enumerators (objfile, fh, sh.st, sh.value);\n+\t\t  handle_psymbol_enumerators (objfile, pst, fh,\n+\t\t\t\t\t      sh.st, sh.value);\n \n \t\t  /* Skip over the block.  */\n \t\t  new_sdx = sh.index;\n@@ -3552,10 +3553,10 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t  continue;\n \t\t}\n \t      /* Use this gdb symbol.  */\n-\t      add_psymbol_to_list (sym_name, true,\n-\t\t\t\t   VAR_DOMAIN, theclass, section,\n-\t\t\t\t   psymbol_placement::STATIC,\n-\t\t\t\t   sh.value, psymtab_language, objfile);\n+\t      pst->add_psymbol (sym_name, true,\n+\t\t\t\tVAR_DOMAIN, theclass, section,\n+\t\t\t\tpsymbol_placement::STATIC,\n+\t\t\t\tsh.value, psymtab_language, objfile);\n \t    skip:\n \t      cur_sdx++;\t/* Go to next file symbol.  */\n \t    }\n@@ -3630,11 +3631,11 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n \t\t  break;\n \t\t}\n \t      char *sym_name = debug_info->ssext + psh->iss;\n-\t      add_psymbol_to_list (sym_name, true,\n-\t\t\t\t   VAR_DOMAIN, theclass,\n-\t\t\t\t   section,\n-\t\t\t\t   psymbol_placement::GLOBAL,\n-\t\t\t\t   svalue, psymtab_language, objfile);\n+\t      pst->add_psymbol (sym_name, true,\n+\t\t\t\tVAR_DOMAIN, theclass,\n+\t\t\t\tsection,\n+\t\t\t\tpsymbol_placement::GLOBAL,\n+\t\t\t\tsvalue, psymtab_language, objfile);\n \t    }\n \t}\n \n@@ -3728,17 +3729,16 @@ parse_partial_symbols (minimal_symbol_reader &reader,\n   partial_symtab *pst_del = objfile->partial_symtabs->psymtabs;\n   if (pst_del->next == NULL\n       && pst_del->number_of_dependencies == 0\n-      && pst_del->n_global_syms == 0\n-      && pst_del->n_static_syms == 0)\n+      && pst_del->empty ())\n     objfile->partial_symtabs->discard_psymtab (pst_del);\n }\n \n /* If the current psymbol has an enumerated type, we need to add\n    all the enum constants to the partial symbol table.  */\n \n static void\n-handle_psymbol_enumerators (struct objfile *objfile, FDR *fh, int stype,\n-\t\t\t    CORE_ADDR svalue)\n+handle_psymbol_enumerators (struct objfile *objfile, partial_symtab *pst,\n+\t\t\t    FDR *fh, int stype, CORE_ADDR svalue)\n {\n   const bfd_size_type external_sym_size = debug_swap->external_sym_size;\n   void (*const swap_sym_in) (bfd *, void *, SYMR *) = debug_swap->swap_sym_in;\n@@ -3793,10 +3793,10 @@ handle_psymbol_enumerators (struct objfile *objfile, FDR *fh, int stype,\n \n       /* Note that the value doesn't matter for enum constants\n          in psymtabs, just in symtabs.  */\n-      add_psymbol_to_list (name, true,\n-\t\t\t   VAR_DOMAIN, LOC_CONST, -1,\n-\t\t\t   psymbol_placement::STATIC, 0,\n-\t\t\t   psymtab_language, objfile);\n+      pst->add_psymbol (name, true,\n+\t\t\tVAR_DOMAIN, LOC_CONST, -1,\n+\t\t\tpsymbol_placement::STATIC, 0,\n+\t\t\tpsymtab_language, objfile);\n       ext_sym += external_sym_size;\n     }\n }\n@@ -3853,8 +3853,7 @@ mdebug_expand_psymtab (legacy_psymtab *pst, struct objfile *objfile)\n \n   /* Do nothing if this is a dummy psymtab.  */\n \n-  if (pst->n_global_syms == 0 && pst->n_static_syms == 0\n-      && !pst->text_low_valid && !pst->text_high_valid)\n+  if (pst->empty () && !pst->text_low_valid && !pst->text_high_valid)\n     return;\n \n   /* Now read the symbols for this symtab.  */"
    },
    {
      "sha": "97f9b3b596c5d77d2f0cf3a1187807684662aeb6",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 55,
      "deletions": 52,
      "changes": 107,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d",
      "patch": "@@ -92,6 +92,15 @@ enum psymtab_search_status\n     PST_SEARCHED_AND_NOT_FOUND\n   };\n \n+/* Specify whether a partial psymbol should be allocated on the global\n+   list or the static list.  */\n+\n+enum class psymbol_placement\n+{\n+  STATIC,\n+  GLOBAL\n+};\n+\n /* Each source file that has not been fully read in is represented by\n    a partial_symtab.  This contains the information on where in the\n    executable the debugging symbols for a specific file are, and a\n@@ -196,6 +205,48 @@ struct partial_symtab\n     text_high_valid = 1;\n   }\n \n+  /* Return true if this symtab is empty -- meaning that it contains\n+     no symbols.  It may still have dependencies.  */\n+  bool empty () const\n+  {\n+    return global_psymbols.empty () && static_psymbols.empty ();\n+  }\n+\n+  /* Add a symbol to this partial symbol table of OBJFILE.\n+\n+     If COPY_NAME is true, make a copy of NAME, otherwise use the passed\n+     reference.\n+\n+     THECLASS is the type of symbol.\n+\n+     SECTION is the index of the section of OBJFILE in which the symbol is found.\n+\n+     WHERE determines whether the symbol goes in the list of static or global\n+     partial symbols.\n+\n+     COREADDR is the address of the symbol.  For partial symbols that don't have\n+     an address, zero is passed.\n+\n+     LANGUAGE is the language from which the symbol originates.  This will\n+     influence, amongst other things, how the symbol name is demangled. */\n+\n+  void add_psymbol (gdb::string_view name,\n+\t\t    bool copy_name, domain_enum domain,\n+\t\t    enum address_class theclass,\n+\t\t    short section,\n+\t\t    psymbol_placement where,\n+\t\t    CORE_ADDR coreaddr,\n+\t\t    enum language language,\n+\t\t    struct objfile *objfile);\n+\n+  /* Add a symbol to this partial symbol table of OBJFILE.  The psymbol\n+     must be fully constructed, and the names must be set and intern'd\n+     as appropriate.  */\n+\n+  void add_psymbol (const partial_symbol &psym,\n+\t\t    psymbol_placement where,\n+\t\t    struct objfile *objfile);\n+\n \n   /* Chain of all existing partial symtabs.  */\n \n@@ -269,22 +320,18 @@ struct partial_symtab\n \n   /* Global symbol list.  This list will be sorted after readin to\n      improve access.  Binary search will be the usual method of\n-     finding a symbol within it.  globals_offset is an integer offset\n-     within global_psymbols[].  */\n+     finding a symbol within it.  */\n \n-  int globals_offset = 0;\n-  int n_global_syms = 0;\n+  std::vector<partial_symbol *> global_psymbols;\n \n   /* Static symbol list.  This list will *not* be sorted after readin;\n      to find a symbol in it, exhaustive search must be used.  This is\n      reasonable because searches through this list will eventually\n      lead to either the read in of a files symbols for real (assumed\n      to take a *lot* of time; check) or an error (and we don't care\n-     how long errors take).  This is an offset and size within\n-     static_psymbols[].  */\n+     how long errors take).  */\n \n-  int statics_offset = 0;\n-  int n_static_syms = 0;\n+  std::vector<partial_symbol *> static_psymbols;\n \n   /* True iff objfile->psymtabs_addrmap is properly populated for this\n      partial_symtab.  For discontiguous overlapping psymtabs is the only usable\n@@ -389,50 +436,6 @@ struct legacy_psymtab : public standard_psymtab\n   void *read_symtab_private = nullptr;\n };\n \n-/* Specify whether a partial psymbol should be allocated on the global\n-   list or the static list.  */\n-\n-enum class psymbol_placement\n-{\n-  STATIC,\n-  GLOBAL\n-};\n-\n-/* Add a symbol to the partial symbol table of OBJFILE.\n-\n-   If COPY_NAME is true, make a copy of NAME, otherwise use the passed\n-   reference.\n-\n-   THECLASS is the type of symbol.\n-\n-   SECTION is the index of the section of OBJFILE in which the symbol is found.\n-\n-   WHERE determines whether the symbol goes in the list of static or global\n-   partial symbols of OBJFILE.\n-\n-   COREADDR is the address of the symbol.  For partial symbols that don't have\n-   an address, zero is passed.\n-\n-   LANGUAGE is the language from which the symbol originates.  This will\n-   influence, amongst other things, how the symbol name is demangled. */\n-\n-extern void add_psymbol_to_list (gdb::string_view name,\n-\t\t\t\t bool copy_name, domain_enum domain,\n-\t\t\t\t enum address_class theclass,\n-\t\t\t\t short section,\n-\t\t\t\t psymbol_placement where,\n-\t\t\t\t CORE_ADDR coreaddr,\n-\t\t\t\t enum language language,\n-\t\t\t\t struct objfile *objfile);\n-\n-/* Add a symbol to the partial symbol table of OBJFILE.  The psymbol\n-   must be fully constructed, and the names must be set and intern'd\n-   as appropriate.  */\n-\n-extern void add_psymbol_to_list (const partial_symbol &psym,\n-\t\t\t\t psymbol_placement where,\n-\t\t\t\t struct objfile *objfile);\n-\n /* Initialize storage for partial symbols.  If partial symbol storage\n    has already been initialized, this does nothing.  TOTAL_SYMBOLS is\n    an estimate of how many symbols there will be.  */"
    },
    {
      "sha": "acccfca9d9141eec4fed8f53289c22dd3d926bad",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 79,
      "deletions": 164,
      "changes": 243,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d",
      "patch": "@@ -91,11 +91,6 @@ require_partial_symbols (struct objfile *objfile, bool verbose)\n \t\t\t     objfile_name (objfile));\n \t  (*objfile->sf->sym_read_psymbols) (objfile);\n \n-\t  /* Partial symbols list are not expected to changed after this\n-\t     point.  */\n-\t  objfile->partial_symtabs->global_psymbols.shrink_to_fit ();\n-\t  objfile->partial_symtabs->static_psymbols.shrink_to_fit ();\n-\n \t  if (verbose && !objfile_has_symbols (objfile))\n \t    printf_filtered (_(\"(No debugging symbols found in %s)\\n\"),\n \t\t\t     objfile_name (objfile));\n@@ -407,12 +402,8 @@ find_pc_sect_psymbol (struct objfile *objfile,\n   /* Search the global symbols as well as the static symbols, so that\n      find_pc_partial_function doesn't use a minimal symbol and thus\n      cache a bad endaddr.  */\n-  for (int i = 0; i < psymtab->n_global_syms; i++)\n+  for (partial_symbol *p : psymtab->global_psymbols)\n     {\n-      partial_symbol *p\n-\t= objfile->partial_symtabs->global_psymbols[psymtab->globals_offset\n-\t\t\t\t\t\t    + i];\n-\n       if (p->domain == VAR_DOMAIN\n \t  && p->aclass == LOC_BLOCK\n \t  && pc >= p->address (objfile)\n@@ -431,12 +422,8 @@ find_pc_sect_psymbol (struct objfile *objfile,\n \t}\n     }\n \n-  for (int i = 0; i < psymtab->n_static_syms; i++)\n+  for (partial_symbol *p : psymtab->static_psymbols)\n     {\n-      partial_symbol *p\n-\t= objfile->partial_symtabs->static_psymbols[psymtab->statics_offset\n-\t\t\t\t\t\t    + i];\n-\n       if (p->domain == VAR_DOMAIN\n \t  && p->aclass == LOC_BLOCK\n \t  && pc >= p->address (objfile)\n@@ -567,15 +554,17 @@ match_partial_symbol (struct objfile *objfile,\n {\n   struct partial_symbol **start, **psym;\n   struct partial_symbol **top, **real_top, **bottom, **center;\n-  int length = (global ? pst->n_global_syms : pst->n_static_syms);\n+  int length = (global\n+\t\t? pst->global_psymbols.size ()\n+\t\t: pst->static_psymbols.size ());\n   int do_linear_search = 1;\n \n   if (length == 0)\n     return NULL;\n \n   start = (global ?\n-\t   &objfile->partial_symtabs->global_psymbols[pst->globals_offset] :\n-\t   &objfile->partial_symtabs->static_psymbols[pst->statics_offset]);\n+\t   &pst->global_psymbols[0] :\n+\t   &pst->static_psymbols[0]);\n \n   if (global && ordered_compare)  /* Can use a binary search.  */\n     {\n@@ -645,15 +634,17 @@ lookup_partial_symbol (struct objfile *objfile,\n {\n   struct partial_symbol **start, **psym;\n   struct partial_symbol **top, **real_top, **bottom, **center;\n-  int length = (global ? pst->n_global_syms : pst->n_static_syms);\n+  int length = (global\n+\t\t? pst->global_psymbols.size ()\n+\t\t: pst->static_psymbols.size ());\n   int do_linear_search = 1;\n \n   if (length == 0)\n     return NULL;\n \n   start = (global ?\n-\t   &objfile->partial_symtabs->global_psymbols[pst->globals_offset] :\n-\t   &objfile->partial_symtabs->static_psymbols[pst->statics_offset]);\n+\t   &pst->global_psymbols[0] :\n+\t   &pst->static_psymbols[0]);\n \n   if (global)\t\t\t/* This means we can use a binary search.  */\n     {\n@@ -815,21 +806,21 @@ psym_forget_cached_source_info (struct objfile *objfile)\n \n static void\n print_partial_symbols (struct gdbarch *gdbarch, struct objfile *objfile,\n-\t\t       struct partial_symbol **p, int count, const char *what,\n-\t\t       struct ui_file *outfile)\n+\t\t       const std::vector<partial_symbol *> &symbols,\n+\t\t       const char *what, struct ui_file *outfile)\n {\n   fprintf_filtered (outfile, \"  %s partial symbols:\\n\", what);\n-  while (count-- > 0)\n+  for (partial_symbol *p : symbols)\n     {\n       QUIT;\n-      fprintf_filtered (outfile, \"    `%s'\", (*p)->ginfo.linkage_name ());\n-      if ((*p)->ginfo.demangled_name () != NULL)\n+      fprintf_filtered (outfile, \"    `%s'\", p->ginfo.linkage_name ());\n+      if (p->ginfo.demangled_name () != NULL)\n \t{\n \t  fprintf_filtered (outfile, \"  `%s'\",\n-\t\t\t    (*p)->ginfo.demangled_name ());\n+\t\t\t    p->ginfo.demangled_name ());\n \t}\n       fputs_filtered (\", \", outfile);\n-      switch ((*p)->domain)\n+      switch (p->domain)\n \t{\n \tcase UNDEF_DOMAIN:\n \t  fputs_filtered (\"undefined domain, \", outfile);\n@@ -853,7 +844,7 @@ print_partial_symbols (struct gdbarch *gdbarch, struct objfile *objfile,\n \t  fputs_filtered (\"<invalid domain>, \", outfile);\n \t  break;\n \t}\n-      switch ((*p)->aclass)\n+      switch (p->aclass)\n \t{\n \tcase LOC_UNDEF:\n \t  fputs_filtered (\"undefined\", outfile);\n@@ -905,9 +896,8 @@ print_partial_symbols (struct gdbarch *gdbarch, struct objfile *objfile,\n \t  break;\n \t}\n       fputs_filtered (\", \", outfile);\n-      fputs_filtered (paddress (gdbarch, (*p)->unrelocated_address ()), outfile);\n+      fputs_filtered (paddress (gdbarch, p->unrelocated_address ()), outfile);\n       fprintf_filtered (outfile, \"\\n\");\n-      p++;\n     }\n }\n \n@@ -966,19 +956,17 @@ dump_psymtab (struct objfile *objfile, struct partial_symtab *psymtab,\n       gdb_print_host_address (psymtab->user, outfile);\n       fprintf_filtered (outfile, \"\\n\");\n     }\n-  if (psymtab->n_global_syms > 0)\n+  if (!psymtab->global_psymbols.empty ())\n     {\n       print_partial_symbols\n-\t(gdbarch, objfile,\n-\t &objfile->partial_symtabs->global_psymbols[psymtab->globals_offset],\n-\t psymtab->n_global_syms, \"Global\", outfile);\n+\t(gdbarch, objfile, psymtab->global_psymbols,\n+\t \"Global\", outfile);\n     }\n-  if (psymtab->n_static_syms > 0)\n+  if (!psymtab->static_psymbols.empty ())\n     {\n       print_partial_symbols\n-\t(gdbarch, objfile,\n-\t &objfile->partial_symtabs->static_psymbols[psymtab->statics_offset],\n-\t psymtab->n_static_syms, \"Static\", outfile);\n+\t(gdbarch, objfile, psymtab->static_psymbols,\n+\t \"Static\", outfile);\n     }\n   fprintf_filtered (outfile, \"\\n\");\n }\n@@ -1229,26 +1217,22 @@ recursively_search_psymtabs\n \t}\n     }\n \n-  partial_symbol **gbound\n-    = (objfile->partial_symtabs->global_psymbols.data ()\n-       + ps->globals_offset + ps->n_global_syms);\n-  partial_symbol **sbound\n-    = (objfile->partial_symtabs->static_psymbols.data ()\n-       + ps->statics_offset + ps->n_static_syms);\n+  partial_symbol **gbound = (ps->global_psymbols.data ()\n+\t\t\t     + ps->global_psymbols.size ());\n+  partial_symbol **sbound = (ps->static_psymbols.data ()\n+\t\t\t     + ps->static_psymbols.size ());\n   partial_symbol **bound = gbound;\n \n   /* Go through all of the symbols stored in a partial\n      symtab in one loop.  */\n-  partial_symbol **psym = (objfile->partial_symtabs->global_psymbols.data ()\n-\t\t\t   + ps->globals_offset);\n+  partial_symbol **psym = ps->global_psymbols.data ();\n   while (keep_going)\n     {\n       if (psym >= bound)\n \t{\n-\t  if (bound == gbound && ps->n_static_syms != 0)\n+\t  if (bound == gbound && !ps->static_psymbols.empty ())\n \t    {\n-\t      psym = (objfile->partial_symtabs->static_psymbols.data ()\n-\t\t      + ps->statics_offset);\n+\t      psym = ps->static_psymbols.data ();\n \t      bound = sbound;\n \t    }\n \t  else\n@@ -1363,14 +1347,10 @@ static void\n psym_fill_psymbol_map (struct objfile *objfile,\n \t\t       struct partial_symtab *psymtab,\n \t\t       std::set<CORE_ADDR> *seen_addrs,\n-\t\t       const std::vector<partial_symbol *> &symbols,\n-\t\t       int start,\n-\t\t       int length)\n+\t\t       const std::vector<partial_symbol *> &symbols)\n {\n-  for (int i = 0; i < length; ++i)\n+  for (partial_symbol *psym : symbols)\n     {\n-      struct partial_symbol *psym = symbols[start + i];\n-\n       if (psym->aclass == LOC_STATIC)\n \t{\n \t  CORE_ADDR addr = psym->address (objfile);\n@@ -1398,14 +1378,10 @@ psym_find_compunit_symtab_by_address (struct objfile *objfile,\n \t{\n \t  psym_fill_psymbol_map (objfile, pst,\n \t\t\t\t &seen_addrs,\n-\t\t\t\t objfile->partial_symtabs->global_psymbols,\n-\t\t\t\t pst->globals_offset,\n-\t\t\t\t pst->n_global_syms);\n+\t\t\t\t pst->global_psymbols);\n \t  psym_fill_psymbol_map (objfile, pst,\n \t\t\t\t &seen_addrs,\n-\t\t\t\t objfile->partial_symtabs->static_psymbols,\n-\t\t\t\t pst->statics_offset,\n-\t\t\t\t pst->n_static_syms);\n+\t\t\t\t pst->static_psymbols);\n \t}\n \n       objfile->psymbol_map.shrink_to_fit ();\n@@ -1458,14 +1434,9 @@ static void\n sort_pst_symbols (struct objfile *objfile, struct partial_symtab *pst)\n {\n   /* Sort the global list; don't sort the static list.  */\n-  auto begin = objfile->partial_symtabs->global_psymbols.begin ();\n-  std::advance (begin, pst->globals_offset);\n-\n-  /* The psymbols for this partial_symtab are currently at the end of the\n-     vector.  */\n-  auto end = objfile->partial_symtabs->global_psymbols.end ();\n-\n-  std::sort (begin, end, [] (partial_symbol *s1, partial_symbol *s2)\n+  std::sort (pst->global_psymbols.begin (),\n+\t     pst->global_psymbols.end (),\n+\t     [] (partial_symbol *s1, partial_symbol *s2)\n     {\n       return strcmp_iw_ordered (s1->ginfo.search_name (),\n \t\t\t\ts2->ginfo.search_name ()) < 0;\n@@ -1482,47 +1453,15 @@ partial_symtab::partial_symtab (const char *filename,\n {\n   set_text_low (textlow);\n   set_text_high (raw_text_low ()); /* default */\n-\n-  auto *v1 = new std::vector<partial_symbol *>;\n-  objfile->partial_symtabs->current_global_psymbols.push_back (v1);\n-  auto *v2 = new std::vector<partial_symbol *>;\n-  objfile->partial_symtabs->current_static_psymbols.push_back (v2);\n-}\n-\n-/* Concat vectors V1 and V2.  */\n-\n-static void\n-concat (std::vector<partial_symbol *> *v1, std::vector<partial_symbol *> *v2)\n-{\n-  v1->insert (v1->end (), v2->begin (), v2->end ());\n-  v2->clear ();\n }\n \n /* Perform \"finishing up\" operations of a partial symtab.  */\n \n void\n end_psymtab_common (struct objfile *objfile, struct partial_symtab *pst)\n {\n-  pst->globals_offset = objfile->partial_symtabs->global_psymbols.size ();\n-  pst->statics_offset = objfile->partial_symtabs->static_psymbols.size ();\n-\n-  auto *current_global_psymbols\n-    = objfile->partial_symtabs->current_global_psymbols.back ();\n-  auto *current_static_psymbols\n-    = objfile->partial_symtabs->current_static_psymbols.back ();\n-  objfile->partial_symtabs->current_global_psymbols.pop_back ();\n-  objfile->partial_symtabs->current_static_psymbols.pop_back ();\n-\n-  pst->n_global_syms\n-    = current_global_psymbols->size ();\n-  pst->n_static_syms\n-    = current_static_psymbols->size ();\n-\n-  concat (&objfile->partial_symtabs->global_psymbols, current_global_psymbols);\n-  concat (&objfile->partial_symtabs->static_psymbols, current_static_psymbols);\n-\n-  delete current_global_psymbols;\n-  delete current_static_psymbols;\n+  pst->global_psymbols.shrink_to_fit ();\n+  pst->static_psymbols.shrink_to_fit ();\n \n   sort_pst_symbols (objfile, pst);\n }\n@@ -1587,20 +1526,20 @@ add_psymbol_to_bcache (const partial_symbol &psymbol, struct objfile *objfile,\n /* Helper function, adds partial symbol to the given partial symbol list.  */\n \n static void\n-append_psymbol_to_list (std::vector<partial_symbol *> *list,\n+append_psymbol_to_list (std::vector<partial_symbol *> &list,\n \t\t\tstruct partial_symbol *psym,\n \t\t\tstruct objfile *objfile)\n {\n-  list->push_back (psym);\n+  list.push_back (psym);\n   OBJSTAT (objfile, n_psyms++);\n }\n \n /* See psympriv.h.  */\n \n void\n-add_psymbol_to_list (const partial_symbol &psymbol,\n-\t\t     psymbol_placement where,\n-\t\t     struct objfile *objfile)\n+partial_symtab::add_psymbol (const partial_symbol &psymbol,\n+\t\t\t     psymbol_placement where,\n+\t\t\t     struct objfile *objfile)\n {\n   bool added;\n \n@@ -1612,23 +1551,23 @@ add_psymbol_to_list (const partial_symbol &psymbol,\n     return;\n \n   /* Save pointer to partial symbol in psymtab, growing symtab if needed.  */\n-  std::vector<partial_symbol *> *list\n+  std::vector<partial_symbol *> &list\n     = (where == psymbol_placement::STATIC\n-       ? objfile->partial_symtabs->current_static_psymbols.back ()\n-       : objfile->partial_symtabs->current_global_psymbols.back ());\n+       ? static_psymbols\n+       : global_psymbols);\n   append_psymbol_to_list (list, psym, objfile);\n }\n \n /* See psympriv.h.  */\n \n void\n-add_psymbol_to_list (gdb::string_view name, bool copy_name,\n-\t\t     domain_enum domain,\n-\t\t     enum address_class theclass,\n-\t\t     short section,\n-\t\t     psymbol_placement where,\n-\t\t     CORE_ADDR coreaddr,\n-\t\t     enum language language, struct objfile *objfile)\n+partial_symtab::add_psymbol (gdb::string_view name, bool copy_name,\n+\t\t\t     domain_enum domain,\n+\t\t\t     enum address_class theclass,\n+\t\t\t     short section,\n+\t\t\t     psymbol_placement where,\n+\t\t\t     CORE_ADDR coreaddr,\n+\t\t\t     enum language language, struct objfile *objfile)\n {\n   struct partial_symbol psymbol;\n   memset (&psymbol, 0, sizeof (psymbol));\n@@ -1640,24 +1579,14 @@ add_psymbol_to_list (gdb::string_view name, bool copy_name,\n   psymbol.ginfo.set_language (language, objfile->partial_symtabs->obstack ());\n   psymbol.ginfo.compute_and_set_names (name, copy_name, objfile->per_bfd);\n \n-  add_psymbol_to_list (psymbol, where, objfile);\n+  add_psymbol (psymbol, where, objfile);\n }\n \n /* See psympriv.h.  */\n \n void\n init_psymbol_list (struct objfile *objfile, int total_symbols)\n {\n-  if (objfile->partial_symtabs->global_psymbols.capacity () == 0\n-      && objfile->partial_symtabs->static_psymbols.capacity () == 0)\n-    {\n-      /* Current best guess is that approximately a twentieth of the\n-\t total symbols (in a debugging file) are global or static\n-\t oriented symbols, then multiply that by slop factor of\n-\t two.  */\n-      objfile->partial_symtabs->global_psymbols.reserve (total_symbols / 10);\n-      objfile->partial_symtabs->static_psymbols.reserve (total_symbols / 10);\n-    }\n }\n \n /* See psympriv.h.  */\n@@ -2027,29 +1956,19 @@ maintenance_info_psymtabs (const char *regexp, int from_tty)\n \t\t\t\t (psymtab->psymtabs_addrmap_supported\n \t\t\t\t  ? \"yes\" : \"no\"));\n \t\tprintf_filtered (\"    globals \");\n-\t\tif (psymtab->n_global_syms)\n-\t\t  {\n-\t\t    auto p = &(objfile->partial_symtabs\n-\t\t\t       ->global_psymbols[psymtab->globals_offset]);\n-\n-\t\t    printf_filtered\n-\t\t      (\"(* (struct partial_symbol **) %s @ %d)\\n\",\n-\t\t       host_address_to_string (p),\n-\t\t       psymtab->n_global_syms);\n-\t\t  }\n+\t\tif (!psymtab->global_psymbols.empty ())\n+\t\t  printf_filtered\n+\t\t    (\"(* (struct partial_symbol **) %s @ %d)\\n\",\n+\t\t     host_address_to_string (psymtab->global_psymbols.data ()),\n+\t\t     (int) psymtab->global_psymbols.size ());\n \t\telse\n \t\t  printf_filtered (\"(none)\\n\");\n \t\tprintf_filtered (\"    statics \");\n-\t\tif (psymtab->n_static_syms)\n-\t\t  {\n-\t\t    auto p = &(objfile->partial_symtabs\n-\t\t\t       ->static_psymbols[psymtab->statics_offset]);\n-\n-\t\t    printf_filtered\n-\t\t      (\"(* (struct partial_symbol **) %s @ %d)\\n\",\n-\t\t       host_address_to_string (p),\n-\t\t       psymtab->n_static_syms);\n-\t\t  }\n+\t\tif (!psymtab->static_psymbols.empty ())\n+\t\t  printf_filtered\n+\t\t    (\"(* (struct partial_symbol **) %s @ %d)\\n\",\n+\t\t     host_address_to_string (psymtab->static_psymbols.data ()),\n+\t\t     (int) psymtab->static_psymbols.size ());\n \t\telse\n \t\t  printf_filtered (\"(none)\\n\");\n \t\tif (psymtab->user)\n@@ -2096,7 +2015,6 @@ maintenance_check_psymtabs (const char *ignore, int from_tty)\n   struct compunit_symtab *cust = NULL;\n   const struct blockvector *bv;\n   const struct block *b;\n-  int i;\n \n   for (objfile *objfile : current_program_space->objfiles ())\n     for (partial_symtab *ps : require_partial_symbols (objfile, true))\n@@ -2128,39 +2046,36 @@ maintenance_check_psymtabs (const char *ignore, int from_tty)\n \t  continue;\n \tbv = COMPUNIT_BLOCKVECTOR (cust);\n \tb = BLOCKVECTOR_BLOCK (bv, STATIC_BLOCK);\n-\tpartial_symbol **psym\n-\t  = &objfile->partial_symtabs->static_psymbols[ps->statics_offset];\n-\tfor (i = 0; i < ps->n_static_syms; psym++, i++)\n+\tfor (partial_symbol *psym : ps->static_psymbols)\n \t  {\n \t    /* Skip symbols for inlined functions without address.  These may\n \t       or may not have a match in the full symtab.  */\n-\t    if ((*psym)->aclass == LOC_BLOCK\n-\t\t&& (*psym)->ginfo.value.address == 0)\n+\t    if (psym->aclass == LOC_BLOCK\n+\t\t&& psym->ginfo.value.address == 0)\n \t      continue;\n \n-\t    sym = block_lookup_symbol (b, (*psym)->ginfo.search_name (),\n+\t    sym = block_lookup_symbol (b, psym->ginfo.search_name (),\n \t\t\t\t       symbol_name_match_type::SEARCH_NAME,\n-\t\t\t\t       (*psym)->domain);\n+\t\t\t\t       psym->domain);\n \t    if (!sym)\n \t      {\n \t\tprintf_filtered (\"Static symbol `\");\n-\t\tputs_filtered ((*psym)->ginfo.linkage_name ());\n+\t\tputs_filtered (psym->ginfo.linkage_name ());\n \t\tprintf_filtered (\"' only found in \");\n \t\tputs_filtered (ps->filename);\n \t\tprintf_filtered (\" psymtab\\n\");\n \t      }\n \t  }\n \tb = BLOCKVECTOR_BLOCK (bv, GLOBAL_BLOCK);\n-\tpsym = &objfile->partial_symtabs->global_psymbols[ps->globals_offset];\n-\tfor (i = 0; i < ps->n_global_syms; psym++, i++)\n+\tfor (partial_symbol *psym : ps->global_psymbols)\n \t  {\n-\t    sym = block_lookup_symbol (b, (*psym)->ginfo.search_name (),\n+\t    sym = block_lookup_symbol (b, psym->ginfo.search_name (),\n \t\t\t\t       symbol_name_match_type::SEARCH_NAME,\n-\t\t\t\t       (*psym)->domain);\n+\t\t\t\t       psym->domain);\n \t    if (!sym)\n \t      {\n \t\tprintf_filtered (\"Global symbol `\");\n-\t\tputs_filtered ((*psym)->ginfo.linkage_name ());\n+\t\tputs_filtered (psym->ginfo.linkage_name ());\n \t\tprintf_filtered (\"' only found in \");\n \t\tputs_filtered (ps->filename);\n \t\tprintf_filtered (\" psymtab\\n\");"
    },
    {
      "sha": "85bc48cbe1153cd461a6168b204da0154c26b98a",
      "filename": "gdb/psymtab.h",
      "status": "modified",
      "additions": 0,
      "deletions": 12,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/psymtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/psymtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.h?ref=932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d",
      "patch": "@@ -137,18 +137,6 @@ class psymtab_storage\n \n   psymbol_bcache psymbol_cache;\n \n-  /* Vectors of all partial symbols read in from file.  The actual data\n-     is stored in the objfile_obstack.  */\n-\n-  std::vector<partial_symbol *> global_psymbols;\n-  std::vector<partial_symbol *> static_psymbols;\n-\n-  /* Stack of vectors of partial symbols, using during psymtab\n-     initialization.  */\n-\n-  std::vector<std::vector<partial_symbol *>*> current_global_psymbols;\n-  std::vector<std::vector<partial_symbol *>*> current_static_psymbols;\n-\n private:\n \n   /* The obstack where allocations are made.  This is lazily allocated"
    },
    {
      "sha": "3588aaed0160c2858ae6ba1d79343d3be03282cd",
      "filename": "gdb/xcoffread.c",
      "status": "modified",
      "additions": 53,
      "deletions": 54,
      "changes": 107,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/xcoffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d/gdb/xcoffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/xcoffread.c?ref=932539d7a35ccc15316ec8cc0ef0fefcb3c08f4d",
      "patch": "@@ -2035,8 +2035,7 @@ xcoff_end_psymtab (struct objfile *objfile, legacy_psymtab *pst,\n \n   if (num_includes == 0\n       && number_dependencies == 0\n-      && pst->n_global_syms == 0\n-      && pst->n_static_syms == 0)\n+      && pst->empty ())\n     {\n       /* Throw away this psymtab, it's empty.  */\n       /* Empty psymtabs happen as a result of header files which don't have\n@@ -2575,25 +2574,25 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t    switch (p[1])\n \t      {\n \t      case 'S':\n-\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n-\t\t\t\t\t\t       p - namestring),\n-\t\t\t\t     true, VAR_DOMAIN, LOC_STATIC,\n-\t\t\t\t     SECT_OFF_DATA (objfile),\n-\t\t\t\t     psymbol_placement::STATIC,\n-\t\t\t\t     symbol.n_value,\n-\t\t\t\t     psymtab_language, objfile);\n+\t\tpst->add_psymbol (gdb::string_view (namestring,\n+\t\t\t\t\t\t    p - namestring),\n+\t\t\t\t  true, VAR_DOMAIN, LOC_STATIC,\n+\t\t\t\t  SECT_OFF_DATA (objfile),\n+\t\t\t\t  psymbol_placement::STATIC,\n+\t\t\t\t  symbol.n_value,\n+\t\t\t\t  psymtab_language, objfile);\n \t\tcontinue;\n \n \t      case 'G':\n \t\t/* The addresses in these entries are reported to be\n \t\t   wrong.  See the code that reads 'G's for symtabs.  */\n-\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n-\t\t\t\t\t\t       p - namestring),\n-\t\t\t\t     true, VAR_DOMAIN, LOC_STATIC,\n-\t\t\t\t     SECT_OFF_DATA (objfile),\n-\t\t\t\t     psymbol_placement::GLOBAL,\n-\t\t\t\t     symbol.n_value,\n-\t\t\t\t     psymtab_language, objfile);\n+\t\tpst->add_psymbol (gdb::string_view (namestring,\n+\t\t\t\t\t\t    p - namestring),\n+\t\t\t\t  true, VAR_DOMAIN, LOC_STATIC,\n+\t\t\t\t  SECT_OFF_DATA (objfile),\n+\t\t\t\t  psymbol_placement::GLOBAL,\n+\t\t\t\t  symbol.n_value,\n+\t\t\t\t  psymtab_language, objfile);\n \t\tcontinue;\n \n \t      case 'T':\n@@ -2607,19 +2606,19 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t    || (p == namestring + 1\n \t\t\t&& namestring[0] != ' '))\n \t\t  {\n-\t\t    add_psymbol_to_list (gdb::string_view (namestring,\n-\t\t\t\t\t\t\t   p - namestring),\n-\t\t\t\t\t true, STRUCT_DOMAIN, LOC_TYPEDEF, -1,\n-\t\t\t\t\t psymbol_placement::STATIC,\n-\t\t\t\t\t 0, psymtab_language, objfile);\n+\t\t    pst->add_psymbol (gdb::string_view (namestring,\n+\t\t\t\t\t\t\tp - namestring),\n+\t\t\t\t      true, STRUCT_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t\t\t      psymbol_placement::STATIC,\n+\t\t\t\t      0, psymtab_language, objfile);\n \t\t    if (p[2] == 't')\n \t\t      {\n \t\t\t/* Also a typedef with the same name.  */\n-\t\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n-\t\t\t\t\t\t\t       p - namestring),\n-\t\t\t\t\t     true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n-\t\t\t\t\t     psymbol_placement::STATIC,\n-\t\t\t\t\t     0, psymtab_language, objfile);\n+\t\t\tpst->add_psymbol (gdb::string_view (namestring,\n+\t\t\t\t\t\t\t    p - namestring),\n+\t\t\t\t\t  true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t\t\t\t  psymbol_placement::STATIC,\n+\t\t\t\t\t  0, psymtab_language, objfile);\n \t\t\tp += 1;\n \t\t      }\n \t\t  }\n@@ -2628,11 +2627,11 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t      case 't':\n \t\tif (p != namestring)\t/* a name is there, not just :T...  */\n \t\t  {\n-\t\t    add_psymbol_to_list (gdb::string_view (namestring,\n-\t\t\t\t\t\t\t   p - namestring),\n-\t\t\t\t\t true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n-\t\t\t\t\t psymbol_placement::STATIC,\n-\t\t\t\t\t 0, psymtab_language, objfile);\n+\t\t    pst->add_psymbol (gdb::string_view (namestring,\n+\t\t\t\t\t\t\tp - namestring),\n+\t\t\t\t      true, VAR_DOMAIN, LOC_TYPEDEF, -1,\n+\t\t\t\t      psymbol_placement::STATIC,\n+\t\t\t\t      0, psymtab_language, objfile);\n \t\t  }\n \t      check_enum:\n \t\t/* If this is an enumerated type, we need to\n@@ -2691,10 +2690,10 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t\t  ;\n \t\t\t/* Note that the value doesn't matter for\n \t\t\t   enum constants in psymtabs, just in symtabs.  */\n-\t\t\tadd_psymbol_to_list (gdb::string_view (p, q - p), true,\n-\t\t\t\t\t     VAR_DOMAIN, LOC_CONST, -1,\n-\t\t\t\t\t     psymbol_placement::STATIC,\n-\t\t\t\t\t     0, psymtab_language, objfile);\n+\t\t\tpst->add_psymbol (gdb::string_view (p, q - p), true,\n+\t\t\t\t\t  VAR_DOMAIN, LOC_CONST, -1,\n+\t\t\t\t\t  psymbol_placement::STATIC,\n+\t\t\t\t\t  0, psymtab_language, objfile);\n \t\t\t/* Point past the name.  */\n \t\t\tp = q;\n \t\t\t/* Skip over the value.  */\n@@ -2709,11 +2708,11 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \n \t      case 'c':\n \t\t/* Constant, e.g. from \"const\" in Pascal.  */\n-\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n-\t\t\t\t\t\t       p - namestring),\n-\t\t\t\t     true, VAR_DOMAIN, LOC_CONST, -1,\n-\t\t\t\t     psymbol_placement::STATIC,\n-\t\t\t\t     0, psymtab_language, objfile);\n+\t\tpst->add_psymbol (gdb::string_view (namestring,\n+\t\t\t\t\t\t    p - namestring),\n+\t\t\t\t  true, VAR_DOMAIN, LOC_CONST, -1,\n+\t\t\t\t  psymbol_placement::STATIC,\n+\t\t\t\t  0, psymtab_language, objfile);\n \t\tcontinue;\n \n \t      case 'f':\n@@ -2727,13 +2726,13 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\t    function_outside_compilation_unit_complaint (name);\n \t\t    xfree (name);\n \t\t  }\n-\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n-\t\t\t\t\t\t       p - namestring),\n-\t\t\t\t     true, VAR_DOMAIN, LOC_BLOCK,\n-\t\t\t\t     SECT_OFF_TEXT (objfile),\n-\t\t\t\t     psymbol_placement::STATIC,\n-\t\t\t\t     symbol.n_value,\n-\t\t\t\t     psymtab_language, objfile);\n+\t\tpst->add_psymbol (gdb::string_view (namestring,\n+\t\t\t\t\t\t    p - namestring),\n+\t\t\t\t  true, VAR_DOMAIN, LOC_BLOCK,\n+\t\t\t\t  SECT_OFF_TEXT (objfile),\n+\t\t\t\t  psymbol_placement::STATIC,\n+\t\t\t\t  symbol.n_value,\n+\t\t\t\t  psymtab_language, objfile);\n \t\tcontinue;\n \n \t\t/* Global functions were ignored here, but now they\n@@ -2758,13 +2757,13 @@ scan_xcoff_symtab (minimal_symbol_reader &reader,\n \t\tif (startswith (namestring, \"@FIX\"))\n \t\t  continue;\n \n-\t\tadd_psymbol_to_list (gdb::string_view (namestring,\n-\t\t\t\t\t\t       p - namestring),\n-\t\t\t\t     true, VAR_DOMAIN, LOC_BLOCK,\n-\t\t\t\t     SECT_OFF_TEXT (objfile),\n-\t\t\t\t     psymbol_placement::GLOBAL,\n-\t\t\t\t     symbol.n_value,\n-\t\t\t\t     psymtab_language, objfile);\n+\t\tpst->add_psymbol (gdb::string_view (namestring,\n+\t\t\t\t\t\t    p - namestring),\n+\t\t\t\t  true, VAR_DOMAIN, LOC_BLOCK,\n+\t\t\t\t  SECT_OFF_TEXT (objfile),\n+\t\t\t\t  psymbol_placement::GLOBAL,\n+\t\t\t\t  symbol.n_value,\n+\t\t\t\t  psymtab_language, objfile);\n \t\tcontinue;\n \n \t\t/* Two things show up here (hopefully); static symbols of"
    }
  ]
}