{
  "sha": "a19a650fcca359a02bfadb201c9b032ce7479525",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTE5YTY1MGZjY2EzNTlhMDJiZmFkYjIwMWM5YjAzMmNlNzQ3OTUyNQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2018-09-09T16:10:21Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-02-27T14:54:43Z"
    },
    "message": "gdb/arm: Use default gdbarch methods where possible\n\nMake use of the default gdbarch methods for gdbarch_dummy_id,\ngdbarch_unwind_pc, and gdbarch_unwind_sp where possible.\n\nI have not tested this change but, by inspecting the code, I believe\nthe default methods are equivalent to the code being deleted.\n\ngdb/ChangeLog:\n\n\t* gdb/arm-tdep.c (arm_dummy_id): Delete.\n\t(arm_unwind_pc): Delete.\n\t(arm_unwind_sp): Delete.\n\t(arm_gdbarch_init): Don't register deleted functions with gdbarch.",
    "tree": {
      "sha": "22ea316417ea9beba396cfcda10ab48b7cd5e46c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/22ea316417ea9beba396cfcda10ab48b7cd5e46c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a19a650fcca359a02bfadb201c9b032ce7479525",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a19a650fcca359a02bfadb201c9b032ce7479525",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a19a650fcca359a02bfadb201c9b032ce7479525",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a19a650fcca359a02bfadb201c9b032ce7479525/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f8278c3c7e0212e810fa7d65f6202b607c9cf3ca",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f8278c3c7e0212e810fa7d65f6202b607c9cf3ca",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f8278c3c7e0212e810fa7d65f6202b607c9cf3ca"
    }
  ],
  "stats": {
    "total": 44,
    "additions": 7,
    "deletions": 37
  },
  "files": [
    {
      "sha": "a35fc7c7f341a3b95e2d995820f7d2b0ed576dff",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a19a650fcca359a02bfadb201c9b032ce7479525/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a19a650fcca359a02bfadb201c9b032ce7479525/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a19a650fcca359a02bfadb201c9b032ce7479525",
      "patch": "@@ -1,3 +1,10 @@\n+2019-02-27  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb/arm-tdep.c (arm_dummy_id): Delete.\n+\t(arm_unwind_pc): Delete.\n+\t(arm_unwind_sp): Delete.\n+\t(arm_gdbarch_init): Don't register deleted functions with gdbarch.\n+\n 2019-02-27  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb/arc-tdep.c (arc_dummy_id): Delete."
    },
    {
      "sha": "599f785b3494929cd53343f60fcf3f80e5762dbf",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 0,
      "deletions": 37,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a19a650fcca359a02bfadb201c9b032ce7479525/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a19a650fcca359a02bfadb201c9b032ce7479525/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=a19a650fcca359a02bfadb201c9b032ce7479525",
      "patch": "@@ -3059,38 +3059,6 @@ struct frame_base arm_normal_base = {\n   arm_normal_frame_base\n };\n \n-/* Assuming THIS_FRAME is a dummy, return the frame ID of that\n-   dummy frame.  The frame ID's base needs to match the TOS value\n-   saved by save_dummy_frame_tos() and returned from\n-   arm_push_dummy_call, and the PC needs to match the dummy frame's\n-   breakpoint.  */\n-\n-static struct frame_id\n-arm_dummy_id (struct gdbarch *gdbarch, struct frame_info *this_frame)\n-{\n-  return frame_id_build (get_frame_register_unsigned (this_frame,\n-\t\t\t\t\t\t      ARM_SP_REGNUM),\n-\t\t\t get_frame_pc (this_frame));\n-}\n-\n-/* Given THIS_FRAME, find the previous frame's resume PC (which will\n-   be used to construct the previous frame's ID, after looking up the\n-   containing function).  */\n-\n-static CORE_ADDR\n-arm_unwind_pc (struct gdbarch *gdbarch, struct frame_info *this_frame)\n-{\n-  CORE_ADDR pc;\n-  pc = frame_unwind_register_unsigned (this_frame, ARM_PC_REGNUM);\n-  return arm_addr_bits_remove (gdbarch, pc);\n-}\n-\n-static CORE_ADDR\n-arm_unwind_sp (struct gdbarch *gdbarch, struct frame_info *this_frame)\n-{\n-  return frame_unwind_register_unsigned (this_frame, ARM_SP_REGNUM);\n-}\n-\n static struct value *\n arm_dwarf2_prev_register (struct frame_info *this_frame, void **this_cache,\n \t\t\t  int regnum)\n@@ -9362,11 +9330,6 @@ arm_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n \n   set_gdbarch_write_pc (gdbarch, arm_write_pc);\n \n-  /* Frame handling.  */\n-  set_gdbarch_dummy_id (gdbarch, arm_dummy_id);\n-  set_gdbarch_unwind_pc (gdbarch, arm_unwind_pc);\n-  set_gdbarch_unwind_sp (gdbarch, arm_unwind_sp);\n-\n   frame_base_set_default (gdbarch, &arm_normal_base);\n \n   /* Address manipulation.  */"
    }
  ]
}