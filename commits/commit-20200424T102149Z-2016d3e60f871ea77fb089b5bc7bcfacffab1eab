{
  "sha": "2016d3e60f871ea77fb089b5bc7bcfacffab1eab",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjAxNmQzZTYwZjg3MWVhNzdmYjA4OWI1YmM3YmNmYWNmZmFiMWVhYg==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-04-24T10:21:49Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-04-24T10:21:49Z"
    },
    "message": "[gdb/testsuite] Reduce errors after gdb exit in default_gdb_start\n\nWhen running test-case gdb.base/readnever.exp with target board readnow, and\nwithout commit 96038148d0e \"[gdb/testsuite] Skip gdb.base/readnever.exp with\ntarget board readnow\", we run into a bunch of errors, starting with:\n...\nspawn gdb -nw -nx -data-directory data-directory -ex set sysroot -readnow \\\n  --readnever^M\ngdb: '--readnow' and '--readnever' cannot be specified simultaneously^M\nERROR: : spawn id exp9 not open\n    while executing\n\"expect {\n-i exp9 -timeout 10\n        -re \"$gdb_prompt $\" {\n            verbose \"Setting height to 0.\" 2\n        }\n...\n\nThe illegal combination of --readnow and --readnever causes gdb to start,\nprint an error message and exit.  There's a gdb_expect in default_gdb_start\nthat is supposed to detect the initial gdb prompt and handle related problems,\nbut since there's no eof case it succeeds, and default_gdb_start continues as\nif the gdb prompt had been detected, causing the error above.\n\nFix this by adding an eof case to the gdb_expect, such that we have the more\naccurate:\n...\nERROR: (eof) GDB never initialized.\n...\n\nFurther errors are triggered in clean_restart, because we're not testing for\ngdb_start success.  Fix this by detecting gdb_start failure, and bailing out.\n\nFinally, we're running into further errors in gdb.base/readnever.exp because\nwe're not testing for clean_restart success.  Fix this by making clean_restart\nreturn -1 upon error, and testing for this.\n\nTested on x86_64-linux.\n\ngdb/testsuite/ChangeLog:\n\n2020-04-24  Tom de Vries  <tdevries@suse.de>\n\n\t* lib/gdb.exp (default_gdb_start): Handle eof.\n\t(clean_restart): Detect and handle gdb_start failure.  Return -1 upon\n\tfailure.\n\t* gdb.base/readnever.exp: Handle clean_restart failure.",
    "tree": {
      "sha": "0d73d7da4ff4f4a925d4496c7bab510259258ddd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0d73d7da4ff4f4a925d4496c7bab510259258ddd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2016d3e60f871ea77fb089b5bc7bcfacffab1eab",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2016d3e60f871ea77fb089b5bc7bcfacffab1eab",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2016d3e60f871ea77fb089b5bc7bcfacffab1eab",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2016d3e60f871ea77fb089b5bc7bcfacffab1eab/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f80cb3b46ae19c6a7c39916916374410f5cc37bc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f80cb3b46ae19c6a7c39916916374410f5cc37bc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f80cb3b46ae19c6a7c39916916374410f5cc37bc"
    }
  ],
  "stats": {
    "total": 34,
    "additions": 32,
    "deletions": 2
  },
  "files": [
    {
      "sha": "ecccb6130459800055c6598ba894f29aaf72f58f",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2016d3e60f871ea77fb089b5bc7bcfacffab1eab/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2016d3e60f871ea77fb089b5bc7bcfacffab1eab/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=2016d3e60f871ea77fb089b5bc7bcfacffab1eab",
      "patch": "@@ -1,3 +1,10 @@\n+2020-04-24  Tom de Vries  <tdevries@suse.de>\n+\n+\t* lib/gdb.exp (default_gdb_start): Handle eof.\n+\t(clean_restart): Detect and handle gdb_start failure.  Return -1 upon\n+\tfailure.\n+\t* gdb.base/readnever.exp: Handle clean_restart failure.\n+\n 2020-04-23  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.base/decl-before-def.exp: Run to main and print a again."
    },
    {
      "sha": "113176c1789de6e0b9bad041137af6d8353c4a09",
      "filename": "gdb/testsuite/gdb.base/readnever.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2016d3e60f871ea77fb089b5bc7bcfacffab1eab/gdb/testsuite/gdb.base/readnever.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2016d3e60f871ea77fb089b5bc7bcfacffab1eab/gdb/testsuite/gdb.base/readnever.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/readnever.exp?ref=2016d3e60f871ea77fb089b5bc7bcfacffab1eab",
      "patch": "@@ -29,7 +29,9 @@ if { [lsearch -exact $GDBFLAGS -readnow] != -1 \\\n \n save_vars { GDBFLAGS } {\n     append GDBFLAGS \" --readnever\"\n-    clean_restart ${binfile}\n+    if { [clean_restart ${binfile}] == -1 } {\n+       return -1\n+    }\n }\n \n if ![runto_main] then {"
    },
    {
      "sha": "cdf96e3c7032e2e5abb2e53478b9543512588548",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 22,
      "deletions": 1,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2016d3e60f871ea77fb089b5bc7bcfacffab1eab/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2016d3e60f871ea77fb089b5bc7bcfacffab1eab/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=2016d3e60f871ea77fb089b5bc7bcfacffab1eab",
      "patch": "@@ -1894,6 +1894,11 @@ proc default_gdb_start { } {\n \t    unset gdb_spawn_id\n \t    return -1\n \t}\n+\teof {\n+\t    perror \"(eof) GDB never initialized.\"\n+\t    unset gdb_spawn_id\n+\t    return -1\n+\t}\n     }\n \n     # force the height to \"unlimited\", so no pagers get used\n@@ -6097,24 +6102,40 @@ proc build_executable { testname executable {sources \"\"} {options {debug}} } {\n # Starts fresh GDB binary and loads an optional executable into GDB.\n # Usage: clean_restart [executable]\n # EXECUTABLE is the basename of the binary.\n+# Return -1 if starting gdb or loading the executable failed.\n \n proc clean_restart { args } {\n     global srcdir\n     global subdir\n+    global errcnt\n \n     if { [llength $args] > 1 } {\n \terror \"bad number of args: [llength $args]\"\n     }\n \n     gdb_exit\n+\n+    # We'd like to do:\n+    #   if { [gdb_start] == -1 } {\n+    #     return -1\n+    #   }\n+    # but gdb_start is a ${tool}_start proc, which doesn't have a defined\n+    # return value.  So instead, we test for errcnt.\n+    set saved_errcnt $errcnt\n     gdb_start\n+    if { $errcnt > $saved_errcnt } {\n+\treturn -1\n+    }\n+\n     gdb_reinitialize_dir $srcdir/$subdir\n \n     if { [llength $args] >= 1 } {\n \tset executable [lindex $args 0]\n \tset binfile [standard_output_file ${executable}]\n-\tgdb_load ${binfile}\n+\treturn [gdb_load ${binfile}]\n     }\n+\n+    return 0\n }\n \n # Prepares for testing by calling build_executable_full, then"
    }
  ]
}