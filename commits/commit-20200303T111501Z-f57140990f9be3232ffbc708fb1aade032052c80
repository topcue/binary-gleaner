{
  "sha": "f57140990f9be3232ffbc708fb1aade032052c80",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjU3MTQwOTkwZjliZTMyMzJmZmJjNzA4ZmIxYWFkZTAzMjA1MmM4MA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-03T09:57:36Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-03T11:15:01Z"
    },
    "message": "bfd_check_format_matches preserving matches vs. cleanups\n\nIt didn't take long for oss-fuzz to find double frees due to a bug in\nthe cleanup logic.  It's seen when reading in any alpha-vms object\nfile except when alpha_vms_vec is the default.  But alpha_vms_vec is\nof course the default when building for --target=alpha-dec-vms (and\nnaturally what I used to  test the cleanup support since that is the\nonly target with a cleanup that does anything currently).\n\nAnyway, the bug is that if bfd_check_format_matches is to preserve a\nmatch the cleanup for that match can't be run.  Quite obviously that\nwould destroy part of the match state.\n\n\t* format.c (struct bfd_preserve): Add cleanup field.\n\t(bfd_preserve_save): Add cleanup param and save.\n\t(bfd_preserve_restore): Return cleanup.\n\t(bfd_preserve_finish): Call the cleanup for the discarded match.\n\t(bfd_check_format_matches): Pass cleanup to bfd_preserve_save,\n\tand clear when preserving a match.  Restore cleanup too when\n\trestoring that match.",
    "tree": {
      "sha": "d189ac35c8ddb88c775e61a68addf7507469340b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d189ac35c8ddb88c775e61a68addf7507469340b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f57140990f9be3232ffbc708fb1aade032052c80",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f57140990f9be3232ffbc708fb1aade032052c80",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f57140990f9be3232ffbc708fb1aade032052c80",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f57140990f9be3232ffbc708fb1aade032052c80/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "478e490a4df79436d678ca5f5f1d7c7ac7befa79",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/478e490a4df79436d678ca5f5f1d7c7ac7befa79",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/478e490a4df79436d678ca5f5f1d7c7ac7befa79"
    }
  ],
  "stats": {
    "total": 34,
    "additions": 29,
    "deletions": 5
  },
  "files": [
    {
      "sha": "ff2881f966fe4444ed4febd3f543ddad75220203",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f57140990f9be3232ffbc708fb1aade032052c80/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f57140990f9be3232ffbc708fb1aade032052c80/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=f57140990f9be3232ffbc708fb1aade032052c80",
      "patch": "@@ -1,3 +1,13 @@\n+2020-03-03  Alan Modra  <amodra@gmail.com>\n+\n+\t* format.c (struct bfd_preserve): Add cleanup field.\n+\t(bfd_preserve_save): Add cleanup param and save.\n+\t(bfd_preserve_restore): Return cleanup.\n+\t(bfd_preserve_finish): Call the cleanup for the discarded match.\n+\t(bfd_check_format_matches): Pass cleanup to bfd_preserve_save,\n+\tand clear when preserving a match.  Restore cleanup too when\n+\trestoring that match.\n+\n 2020-03-02  Alan Modra  <amodra@gmail.com>\n \n \t* cisco-core.c (cisco_core_file_p): Return bfd_cleanup."
    },
    {
      "sha": "61f26c6042ae3b3f957951c793cae12d1b1e3811",
      "filename": "bfd/format.c",
      "status": "modified",
      "additions": 19,
      "deletions": 5,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f57140990f9be3232ffbc708fb1aade032052c80/bfd/format.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f57140990f9be3232ffbc708fb1aade032052c80/bfd/format.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/format.c?ref=f57140990f9be3232ffbc708fb1aade032052c80",
      "patch": "@@ -106,6 +106,7 @@ struct bfd_preserve\n   unsigned int section_id;\n   struct bfd_hash_table section_htab;\n   const struct bfd_build_id *build_id;\n+  bfd_cleanup cleanup;\n };\n \n /* When testing an object for compatibility with a particular target\n@@ -118,7 +119,8 @@ struct bfd_preserve\n    the subset.  */\n \n static bfd_boolean\n-bfd_preserve_save (bfd *abfd, struct bfd_preserve *preserve)\n+bfd_preserve_save (bfd *abfd, struct bfd_preserve *preserve,\n+\t\t   bfd_cleanup cleanup)\n {\n   preserve->tdata = abfd->tdata.any;\n   preserve->arch_info = abfd->arch_info;\n@@ -130,6 +132,7 @@ bfd_preserve_save (bfd *abfd, struct bfd_preserve *preserve)\n   preserve->section_htab = abfd->section_htab;\n   preserve->marker = bfd_alloc (abfd, 1);\n   preserve->build_id = abfd->build_id;\n+  preserve->cleanup = cleanup;\n   if (preserve->marker == NULL)\n     return FALSE;\n \n@@ -153,7 +156,7 @@ bfd_reinit (bfd *abfd, unsigned int section_id, bfd_cleanup cleanup)\n \n /* Restores bfd state saved by bfd_preserve_save.  */\n \n-static void\n+static bfd_cleanup\n bfd_preserve_restore (bfd *abfd, struct bfd_preserve *preserve)\n {\n   bfd_hash_table_free (&abfd->section_htab);\n@@ -172,6 +175,7 @@ bfd_preserve_restore (bfd *abfd, struct bfd_preserve *preserve)\n      its arg, as well as its arg.  */\n   bfd_release (abfd, preserve->marker);\n   preserve->marker = NULL;\n+  return preserve->cleanup;\n }\n \n /* Called when the bfd state saved by bfd_preserve_save is no longer\n@@ -180,6 +184,15 @@ bfd_preserve_restore (bfd *abfd, struct bfd_preserve *preserve)\n static void\n bfd_preserve_finish (bfd *abfd ATTRIBUTE_UNUSED, struct bfd_preserve *preserve)\n {\n+  if (preserve->cleanup)\n+    {\n+      /* Run the cleanup, assuming that all it will need is the\n+\t tdata at the time the cleanup was returned.  */\n+      void *tdata = abfd->tdata.any;\n+      abfd->tdata.any = preserve->tdata;\n+      preserve->cleanup (abfd);\n+      abfd->tdata.any = tdata;\n+    }\n   /* It would be nice to be able to free more memory here, eg. old\n      tdata, but that's not possible since these blocks are sitting\n      inside bfd_alloc'd memory.  The section hash is on a separate\n@@ -252,7 +265,7 @@ bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)\n   save_targ = abfd->xvec;\n \n   preserve_match.marker = NULL;\n-  if (!bfd_preserve_save (abfd, &preserve))\n+  if (!bfd_preserve_save (abfd, &preserve, NULL))\n     goto err_ret;\n \n   /* If the target type was explicitly specified, just check that target.  */\n@@ -381,8 +394,9 @@ bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)\n \t  if (preserve_match.marker == NULL)\n \t    {\n \t      match_targ = abfd->xvec;\n-\t      if (!bfd_preserve_save (abfd, &preserve_match))\n+\t      if (!bfd_preserve_save (abfd, &preserve_match, cleanup))\n \t\tgoto err_ret;\n+\t      cleanup = NULL;\n \t    }\n \t}\n     }\n@@ -455,7 +469,7 @@ bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)\n      whole bfd and restoring it would be even worse; the first thing\n      you notice is that the cached bfd file position gets out of sync.  */\n   if (preserve_match.marker != NULL)\n-    bfd_preserve_restore (abfd, &preserve_match);\n+    cleanup = bfd_preserve_restore (abfd, &preserve_match);\n \n   if (match_count == 1)\n     {"
    }
  ]
}