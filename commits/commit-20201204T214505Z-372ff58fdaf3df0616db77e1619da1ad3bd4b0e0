{
  "sha": "372ff58fdaf3df0616db77e1619da1ad3bd4b0e0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzcyZmY1OGZkYWYzZGYwNjE2ZGI3N2UxNjE5ZGExYWQzYmQ0YjBlMA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-12-04T21:44:55Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-12-04T21:45:05Z"
    },
    "message": "gdb: use two displaced step buffers on amd64/Linux\n\nAs observed on a binary compiled on AMD64 Ubuntu 20.04, against glibc\n2.31 (I think it's the libc that provides this startup code, right?),\nthere are enough bytes at the executable's entry point to hold more than\none displaced step buffer.  gdbarch_max_insn_length is 16, and the\ncode at _start looks like:\n\n0000000000001040 <_start>:\n    1040:       f3 0f 1e fa             endbr64\n    1044:       31 ed                   xor    %ebp,%ebp\n    1046:       49 89 d1                mov    %rdx,%r9\n    1049:       5e                      pop    %rsi\n    104a:       48 89 e2                mov    %rsp,%rdx\n    104d:       48 83 e4 f0             and    $0xfffffffffffffff0,%rsp\n    1051:       50                      push   %rax\n    1052:       54                      push   %rsp\n    1053:       4c 8d 05 56 01 00 00    lea    0x156(%rip),%r8        # 11b0 <__libc_csu_fini>\n    105a:       48 8d 0d df 00 00 00    lea    0xdf(%rip),%rcx        # 1140 <__libc_csu_init>\n    1061:       48 8d 3d c1 00 00 00    lea    0xc1(%rip),%rdi        # 1129 <main>\n    1068:       ff 15 72 2f 00 00       callq  *0x2f72(%rip)        # 3fe0 <__libc_start_main@GLIBC_2.2.5>\n    106e:       f4                      hlt\n    106f:       90                      nop\n\nThe two buffers would occupy [0x1040, 0x1060).\n\nI checked on Alpine, which uses the musl C library, the startup code\nlooks like:\n\n0000000000001048 <_start>:\n    1048:       48 31 ed                xor    %rbp,%rbp\n    104b:       48 89 e7                mov    %rsp,%rdi\n    104e:       48 8d 35 e3 2d 00 00    lea    0x2de3(%rip),%rsi        # 3e38 <_DYNAMIC>\n    1055:       48 83 e4 f0             and    $0xfffffffffffffff0,%rsp\n    1059:       e8 00 00 00 00          callq  105e <_start_c>\n\n000000000000105e <_start_c>:\n    105e:       48 8b 37                mov    (%rdi),%rsi\n    1061:       48 8d 57 08             lea    0x8(%rdi),%rdx\n    1065:       45 31 c9                xor    %r9d,%r9d\n    1068:       4c 8d 05 47 01 00 00    lea    0x147(%rip),%r8        # 11b6 <_fini>\n    106f:       48 8d 0d 8a ff ff ff    lea    -0x76(%rip),%rcx        # 1000 <_init>\n    1076:       48 8d 3d 0c 01 00 00    lea    0x10c(%rip),%rdi        # 1189 <main>\n    107d:       e9 9e ff ff ff          jmpq   1020 <__libc_start_main@plt>\n\nEven though there's a _start_c symbol, it all appears to be code that\nruns once at the very beginning of the program, so it looks fine if the\ntwo buffers occupy [0x1048, 0x1068).\n\nOne important thing I discovered while doing this is that when debugging\na dynamically-linked executable, breakpoints in the shared library\nloader are hit before executing the _start code, and these breakpoints\nmay be displaced-stepped.  So it's very important that the buffer bytes\nare restored properly after doing the displaced steps, otherwise the\n_start code will be corrupted once we try to execute it.\n\nAnother thing that made me think about is that library constructors (as\nin `__attribute__((constructor))`) run before _start.  And they are free\nto spawn threads.  What if one of these threads executes a displaced\nstep, therefore changing the bytes at _start, while the main thread\nexecutes _start?  That doesn't sound good and I don't know how we could\nprevent it.  But this is a problem that predates the current patch.\n\nEven when stress-testing the implementation, by making many threads do\ndisplaced steps over and over, I didn't see a significant performance (I\nconfirmed that the two buffers were used by checking the \"set debug\ndisplaced\" logs though).  However, this patch mostly helps make the\nfeature testable by anybody with an AMD64/Linux machine, so I think it's\nuseful.\n\ngdb/ChangeLog:\n\n\t* amd64-linux-tdep.c (amd64_linux_init_abi): Pass 2 as the\n\tnumber of displaced step buffers.\n\nChange-Id: Ia0c96ea0fcda893f4726df6fdac7be5214620112",
    "tree": {
      "sha": "0dde60f508450a53da303a22c6f93cab7c1fc62f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0dde60f508450a53da303a22c6f93cab7c1fc62f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/372ff58fdaf3df0616db77e1619da1ad3bd4b0e0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/372ff58fdaf3df0616db77e1619da1ad3bd4b0e0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/372ff58fdaf3df0616db77e1619da1ad3bd4b0e0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/372ff58fdaf3df0616db77e1619da1ad3bd4b0e0/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "480af54cf68b5bb079f070b587f95620d114e87c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/480af54cf68b5bb079f070b587f95620d114e87c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/480af54cf68b5bb079f070b587f95620d114e87c"
    }
  ],
  "stats": {
    "total": 7,
    "additions": 6,
    "deletions": 1
  },
  "files": [
    {
      "sha": "8252c71452b063cee7ba7da2ffd051f527580da8",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/372ff58fdaf3df0616db77e1619da1ad3bd4b0e0/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/372ff58fdaf3df0616db77e1619da1ad3bd4b0e0/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=372ff58fdaf3df0616db77e1619da1ad3bd4b0e0",
      "patch": "@@ -1,3 +1,8 @@\n+2020-12-04  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* amd64-linux-tdep.c (amd64_linux_init_abi): Pass 2 as the\n+\tnumber of displaced step buffers.\n+\n 2020-12-04  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* displaced-stepping.h (struct displaced_step_buffer): Rename"
    },
    {
      "sha": "4f2d83f0286f7c7b71c5d4251d0c2b8e92288e0e",
      "filename": "gdb/amd64-linux-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/372ff58fdaf3df0616db77e1619da1ad3bd4b0e0/gdb/amd64-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/372ff58fdaf3df0616db77e1619da1ad3bd4b0e0/gdb/amd64-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-linux-tdep.c?ref=372ff58fdaf3df0616db77e1619da1ad3bd4b0e0",
      "patch": "@@ -1880,7 +1880,7 @@ amd64_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   if (!valid_p)\n     return;\n \n-  amd64_linux_init_abi_common (info, gdbarch, 1);\n+  amd64_linux_init_abi_common (info, gdbarch, 2);\n \n   /* Initialize the amd64_linux_record_tdep.  */\n   /* These values are the size of the type that will be used in a system"
    }
  ]
}