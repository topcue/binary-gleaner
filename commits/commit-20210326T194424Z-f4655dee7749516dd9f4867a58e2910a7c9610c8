{
  "sha": "f4655dee7749516dd9f4867a58e2910a7c9610c8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjQ2NTVkZWU3NzQ5NTE2ZGQ5ZjQ4NjdhNThlMjkxMGE3Yzk2MTBjOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-26T19:44:24Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-26T19:44:24Z"
    },
    "message": "Use function view in quick_symbol_functions::map_symbol_filenames\n\nThis changes quick_symbol_functions::map_symbol_filenames to use a\nfunction_view, and updates all the uses.  It also changes the final\nparameter to 'bool'.  A couple of spots are further updated to use\noperator() rather than a lambda.\n\ngdb/ChangeLog\n2021-03-26  Tom Tromey  <tom@tromey.com>\n\n\t* symtab.c (struct output_source_filename_data): Add 'output'\n\tmethod and operator().\n\t(output_source_filename_data::output): Rename from\n\toutput_source_filename.\n\t(output_partial_symbol_filename): Remove.\n\t(info_sources_command): Update.\n\t(struct add_partial_filename_data): Add operator().\n\t(add_partial_filename_data::operator()): Rename from\n\tmaybe_add_partial_symtab_filename.\n\t(make_source_files_completion_list): Update.\n\t* symfile.c (quick_symbol_functions): Update.\n\t* symfile-debug.c (objfile::map_symbol_filenames): Update.\n\t* quick-symbol.h (symbol_filename_ftype): Change type of 'fun' and\n\t'need_fullname'.  Remove 'data' parameter.\n\t(struct quick_symbol_functions) <map_symbol_filenames>: Likewise.\n\t* psymtab.c (psymbol_functions::map_symbol_filenames): Update.\n\t* psympriv.h (struct psymbol_functions) <map_symbol_filenames>:\n\tChange type of 'fun' and 'need_fullname'.  Remove 'data'\n\tparameter.\n\t* objfiles.h (struct objfile) <map_symbol_filenames>: Change type\n\tof 'fun' and 'need_fullname'.  Remove 'data' parameter.\n\t* mi/mi-cmd-file.c (print_partial_file_name): Remove 'ignore'\n\tparameter.\n\t(mi_cmd_file_list_exec_source_files): Update.\n\t* dwarf2/read.c\n\t(dwarf2_base_index_functions::map_symbol_filenames): Update.",
    "tree": {
      "sha": "5c267433b9ccefa9c425905f28469604bafd9462",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5c267433b9ccefa9c425905f28469604bafd9462"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f4655dee7749516dd9f4867a58e2910a7c9610c8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f4655dee7749516dd9f4867a58e2910a7c9610c8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f4655dee7749516dd9f4867a58e2910a7c9610c8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f4655dee7749516dd9f4867a58e2910a7c9610c8/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2315bb2d5764527617aef124cbcd52a13395e245",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2315bb2d5764527617aef124cbcd52a13395e245",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2315bb2d5764527617aef124cbcd52a13395e245"
    }
  ],
  "stats": {
    "total": 181,
    "additions": 100,
    "deletions": 81
  },
  "files": [
    {
      "sha": "f62af51671e0b76f9a0a373f364128c819346ae2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=f4655dee7749516dd9f4867a58e2910a7c9610c8",
      "patch": "@@ -1,3 +1,32 @@\n+2021-03-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* symtab.c (struct output_source_filename_data): Add 'output'\n+\tmethod and operator().\n+\t(output_source_filename_data::output): Rename from\n+\toutput_source_filename.\n+\t(output_partial_symbol_filename): Remove.\n+\t(info_sources_command): Update.\n+\t(struct add_partial_filename_data): Add operator().\n+\t(add_partial_filename_data::operator()): Rename from\n+\tmaybe_add_partial_symtab_filename.\n+\t(make_source_files_completion_list): Update.\n+\t* symfile.c (quick_symbol_functions): Update.\n+\t* symfile-debug.c (objfile::map_symbol_filenames): Update.\n+\t* quick-symbol.h (symbol_filename_ftype): Change type of 'fun' and\n+\t'need_fullname'.  Remove 'data' parameter.\n+\t(struct quick_symbol_functions) <map_symbol_filenames>: Likewise.\n+\t* psymtab.c (psymbol_functions::map_symbol_filenames): Update.\n+\t* psympriv.h (struct psymbol_functions) <map_symbol_filenames>:\n+\tChange type of 'fun' and 'need_fullname'.  Remove 'data'\n+\tparameter.\n+\t* objfiles.h (struct objfile) <map_symbol_filenames>: Change type\n+\tof 'fun' and 'need_fullname'.  Remove 'data' parameter.\n+\t* mi/mi-cmd-file.c (print_partial_file_name): Remove 'ignore'\n+\tparameter.\n+\t(mi_cmd_file_list_exec_source_files): Update.\n+\t* dwarf2/read.c\n+\t(dwarf2_base_index_functions::map_symbol_filenames): Update.\n+\n 2021-03-26  Tom Tromey  <tom@tromey.com>\n \n \t* ada-lang.c (struct match_data): Add operator()."
    },
    {
      "sha": "b324541ee9f0551127dd73d62d78ac34b3d0581d",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=f4655dee7749516dd9f4867a58e2910a7c9610c8",
      "patch": "@@ -2230,8 +2230,8 @@ struct dwarf2_base_index_functions : public quick_symbol_functions\n   }\n \n   void map_symbol_filenames (struct objfile *objfile,\n-\t\t\t     symbol_filename_ftype *fun, void *data,\n-\t\t\t     int need_fullname) override;\n+\t\t\t     gdb::function_view<symbol_filename_ftype> fun,\n+\t\t\t     bool need_fullname) override;\n };\n \n struct dwarf2_gdb_index : public dwarf2_base_index_functions\n@@ -4945,10 +4945,10 @@ dwarf2_base_index_functions::find_pc_sect_compunit_symtab\n }\n \n void\n-dwarf2_base_index_functions::map_symbol_filenames (struct objfile *objfile,\n-\t\t\t\t\t\t   symbol_filename_ftype *fun,\n-\t\t\t\t\t\t   void *data,\n-\t\t\t\t\t\t   int need_fullname)\n+dwarf2_base_index_functions::map_symbol_filenames\n+     (struct objfile *objfile,\n+      gdb::function_view<symbol_filename_ftype> fun,\n+      bool need_fullname)\n {\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n \n@@ -5009,7 +5009,7 @@ dwarf2_base_index_functions::map_symbol_filenames (struct objfile *objfile,\n \n       if (need_fullname)\n \tthis_real_name = gdb_realpath (filename);\n-      (*fun) (filename, this_real_name.get (), data);\n+      fun (filename, this_real_name.get ());\n     });\n }\n "
    },
    {
      "sha": "430449c919e1d251f23bb38f59189b413dff4cab",
      "filename": "gdb/mi/mi-cmd-file.c",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/mi/mi-cmd-file.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/mi/mi-cmd-file.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-file.c?ref=f4655dee7749516dd9f4867a58e2910a7c9610c8",
      "patch": "@@ -65,8 +65,7 @@ mi_cmd_file_list_exec_source_file (const char *command, char **argv, int argc)\n /* A callback for map_partial_symbol_filenames.  */\n \n static void\n-print_partial_file_name (const char *filename, const char *fullname,\n-\t\t\t void *ignore)\n+print_partial_file_name (const char *filename, const char *fullname)\n {\n   struct ui_out *uiout = current_uiout;\n \n@@ -108,8 +107,7 @@ mi_cmd_file_list_exec_source_files (const char *command, char **argv, int argc)\n \t}\n     }\n \n-  map_symbol_filenames (print_partial_file_name, NULL,\n-\t\t\t1 /*need_fullname*/);\n+  map_symbol_filenames (print_partial_file_name, true /*need_fullname*/);\n \n   uiout->end (ui_out_type_list);\n }"
    },
    {
      "sha": "4cd392bd7f022e71571346a0e850395c5f27002a",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=f4655dee7749516dd9f4867a58e2910a7c9610c8",
      "patch": "@@ -590,8 +590,8 @@ struct objfile\n      int warn_if_readin);\n \n   /* See quick_symbol_functions.  */\n-  void map_symbol_filenames (symbol_filename_ftype *fun, void *data,\n-\t\t\t     int need_fullname);\n+  void map_symbol_filenames (gdb::function_view<symbol_filename_ftype> fun,\n+\t\t\t     bool need_fullname);\n \n   /* See quick_symbol_functions.  */\n   struct compunit_symtab *find_compunit_symtab_by_address (CORE_ADDR address);"
    },
    {
      "sha": "193d64fbcf2ff88c967254e67394185806cf1307",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=f4655dee7749516dd9f4867a58e2910a7c9610c8",
      "patch": "@@ -556,8 +556,8 @@ struct psymbol_functions : public quick_symbol_functions\n     (struct objfile *objfile, CORE_ADDR address) override;\n \n   void map_symbol_filenames (struct objfile *objfile,\n-\t\t\t     symbol_filename_ftype *fun, void *data,\n-\t\t\t     int need_fullname) override;\n+\t\t\t     gdb::function_view<symbol_filename_ftype> fun,\n+\t\t\t     bool need_fullname) override;\n \n   void relocated () override\n   {"
    },
    {
      "sha": "b51881d3bd6fdac2134553b3179a86d0408f0056",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=f4655dee7749516dd9f4867a58e2910a7c9610c8",
      "patch": "@@ -1092,10 +1092,10 @@ psymbol_functions::expand_symtabs_with_fullname (struct objfile *objfile,\n    the definition of quick_symbol_functions in symfile.h.  */\n \n void\n-psymbol_functions::map_symbol_filenames (struct objfile *objfile,\n-\t\t\t\t\t symbol_filename_ftype *fun,\n-\t\t\t\t\t void *data,\n-\t\t\t\t\t int need_fullname)\n+psymbol_functions::map_symbol_filenames\n+     (struct objfile *objfile,\n+      gdb::function_view<symbol_filename_ftype> fun,\n+      bool need_fullname)\n {\n   for (partial_symtab *ps : require_partial_symbols (objfile))\n     {\n@@ -1118,7 +1118,7 @@ psymbol_functions::map_symbol_filenames (struct objfile *objfile,\n \tfullname = psymtab_to_fullname (ps);\n       else\n \tfullname = NULL;\n-      (*fun) (ps->filename, fullname, data);\n+      fun (ps->filename, fullname);\n     }\n }\n "
    },
    {
      "sha": "d907b1df488d38693390849c22b4076de051f9ba",
      "filename": "gdb/quick-symbol.h",
      "status": "modified",
      "additions": 8,
      "deletions": 7,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/quick-symbol.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/quick-symbol.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/quick-symbol.h?ref=f4655dee7749516dd9f4867a58e2910a7c9610c8",
      "patch": "@@ -28,7 +28,7 @@ typedef int (symbol_compare_ftype) (const char *string1,\n /* Callback for quick_symbol_functions->map_symbol_filenames.  */\n \n typedef void (symbol_filename_ftype) (const char *filename,\n-\t\t\t\t      const char *fullname, void *data);\n+\t\t\t\t      const char *fullname);\n \n /* Callback for quick_symbol_functions->expand_symtabs_matching\n    to match a file name.  */\n@@ -224,12 +224,13 @@ struct quick_symbol_functions\n     (struct objfile *objfile, CORE_ADDR address) = 0;\n \n   /* Call a callback for every file defined in OBJFILE whose symtab is\n-     not already read in.  FUN is the callback.  It is passed the file's\n-     FILENAME, the file's FULLNAME (if need_fullname is non-zero), and\n-     the DATA passed to this function.  */\n-  virtual void map_symbol_filenames (struct objfile *objfile,\n-\t\t\t\t     symbol_filename_ftype *fun, void *data,\n-\t\t\t\t     int need_fullname) = 0;\n+     not already read in.  FUN is the callback.  It is passed the\n+     file's FILENAME and the file's FULLNAME (if need_fullname is\n+     non-zero).  */\n+  virtual void map_symbol_filenames\n+       (struct objfile *objfile,\n+\tgdb::function_view<symbol_filename_ftype> fun,\n+\tbool need_fullname) = 0;\n \n   /* This is called when the objfile is relocated.  It can be used to\n      clean up any internal caches.  */"
    },
    {
      "sha": "d811809514b0e7cfd8f658b72066be8f691d6ea3",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=f4655dee7749516dd9f4867a58e2910a7c9610c8",
      "patch": "@@ -323,19 +323,17 @@ objfile::find_pc_sect_compunit_symtab (struct bound_minimal_symbol msymbol,\n }\n \n void\n-objfile::map_symbol_filenames (symbol_filename_ftype *fun, void *data,\n-\t\t\t       int need_fullname)\n+objfile::map_symbol_filenames (gdb::function_view<symbol_filename_ftype> fun,\n+\t\t\t       bool need_fullname)\n {\n   if (debug_symfile)\n     fprintf_filtered (gdb_stdlog,\n-\t\t      \"qf->map_symbol_filenames (%s, %s, %s, %d)\\n\",\n+\t\t      \"qf->map_symbol_filenames (%s, ..., %d)\\n\",\n \t\t      objfile_debug_name (this),\n-\t\t      host_address_to_string (fun),\n-\t\t      host_address_to_string (data),\n \t\t      need_fullname);\n \n   for (const auto &iter : qf)\n-    iter->map_symbol_filenames (this, fun, data, need_fullname);\n+    iter->map_symbol_filenames (this, fun, need_fullname);\n }\n \n struct compunit_symtab *"
    },
    {
      "sha": "b71eb1915d287db0914dea15d7b6717f79aeed9b",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=f4655dee7749516dd9f4867a58e2910a7c9610c8",
      "patch": "@@ -3737,11 +3737,11 @@ expand_symtabs_matching\n    See quick_symbol_functions.map_symbol_filenames for details.  */\n \n void\n-map_symbol_filenames (symbol_filename_ftype *fun, void *data,\n-\t\t      int need_fullname)\n+map_symbol_filenames (gdb::function_view<symbol_filename_ftype> fun,\n+\t\t      bool need_fullname)\n {\n   for (objfile *objfile : current_program_space->objfiles ())\n-    objfile->map_symbol_filenames (fun, data, need_fullname);\n+    objfile->map_symbol_filenames (fun, need_fullname);\n }\n \n #if GDB_SELF_TEST"
    },
    {
      "sha": "bda1c578773b75df6aa52c84fddb13865a9d543c",
      "filename": "gdb/symfile.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/symfile.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/symfile.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.h?ref=f4655dee7749516dd9f4867a58e2910a7c9610c8",
      "patch": "@@ -328,8 +328,8 @@ void expand_symtabs_matching\n    gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n    enum search_domain kind);\n \n-void map_symbol_filenames (symbol_filename_ftype *fun, void *data,\n-\t\t\t   int need_fullname);\n+void map_symbol_filenames (gdb::function_view<symbol_filename_ftype> fun,\n+\t\t\t   bool need_fullname);\n \n /* Target-agnostic function to load the sections of an executable into memory.\n "
    },
    {
      "sha": "9615216d6dfde31599f23113a9c43ecf3cd7bc21",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 36,
      "deletions": 43,
      "changes": 79,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f4655dee7749516dd9f4867a58e2910a7c9610c8/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=f4655dee7749516dd9f4867a58e2910a7c9610c8",
      "patch": "@@ -4227,15 +4227,21 @@ struct output_source_filename_data\n \n   /* Flag of whether we're printing the first one.  */\n   int first;\n-};\n \n-/* Slave routine for sources_info.  Force line breaks at ,'s.\n-   NAME is the name to print.\n-   DATA contains the state for printing and watching for duplicates.  */\n+  /* Worker for sources_info.  Force line breaks at ,'s.\n+     NAME is the name to print.  */\n+  void output (const char *name);\n \n-static void\n-output_source_filename (const char *name,\n-\t\t\tstruct output_source_filename_data *data)\n+  /* An overload suitable for use as a callback to\n+     quick_symbol_functions::map_symbol_filenames.  */\n+  void operator() (const char *filename, const char *fullname)\n+  {\n+    output (fullname != nullptr ? fullname : filename);\n+  }\n+};\n+\n+void\n+output_source_filename_data::output (const char *name)\n {\n   /* Since a single source file can result in several partial symbol\n      tables, we need to avoid printing it more than once.  Note: if\n@@ -4247,51 +4253,41 @@ output_source_filename (const char *name,\n      symtabs; it doesn't hurt to check.  */\n \n   /* Was NAME already seen?  */\n-  if (data->filename_seen_cache->seen (name))\n+  if (filename_seen_cache->seen (name))\n     {\n       /* Yes; don't print it again.  */\n       return;\n     }\n \n-  /* Does it match data->regexp?  */\n-  if (data->c_regexp.has_value ())\n+  /* Does it match regexp?  */\n+  if (c_regexp.has_value ())\n     {\n       const char *to_match;\n       std::string dirname;\n \n-      if (data->partial_match.dirname)\n+      if (partial_match.dirname)\n \t{\n \t  dirname = ldirname (name);\n \t  to_match = dirname.c_str ();\n \t}\n-      else if (data->partial_match.basename)\n+      else if (partial_match.basename)\n \tto_match = lbasename (name);\n       else\n \tto_match = name;\n \n-      if (data->c_regexp->exec (to_match, 0, NULL, 0) != 0)\n+      if (c_regexp->exec (to_match, 0, NULL, 0) != 0)\n \treturn;\n     }\n \n   /* Print it and reset *FIRST.  */\n-  if (! data->first)\n+  if (! first)\n     printf_filtered (\", \");\n-  data->first = 0;\n+  first = 0;\n \n   wrap_here (\"\");\n   fputs_styled (name, file_name_style.style (), gdb_stdout);\n }\n \n-/* A callback for map_partial_symbol_filenames.  */\n-\n-static void\n-output_partial_symbol_filename (const char *filename, const char *fullname,\n-\t\t\t\tvoid *data)\n-{\n-  output_source_filename (fullname ? fullname : filename,\n-\t\t\t  (struct output_source_filename_data *) data);\n-}\n-\n using isrc_flag_option_def\n   = gdb::option::flag_option_def<filename_partial_match_opts>;\n \n@@ -4410,7 +4406,7 @@ info_sources_command (const char *args, int from_tty)\n \t    {\n \t      const char *fullname = symtab_to_fullname (s);\n \n-\t      output_source_filename (fullname, &data);\n+\t      data.output (fullname);\n \t    }\n \t}\n     }\n@@ -4421,8 +4417,7 @@ info_sources_command (const char *args, int from_tty)\n \n   filenames_seen.clear ();\n   data.first = 1;\n-  map_symbol_filenames (output_partial_symbol_filename, &data,\n-\t\t\t1 /*need_fullname*/);\n+  map_symbol_filenames (data, true /*need_fullname*/);\n   printf_filtered (\"\\n\");\n }\n \n@@ -5957,7 +5952,7 @@ not_interesting_fname (const char *fname)\n   return 0;\n }\n \n-/* An object of this type is passed as the user_data argument to\n+/* An object of this type is passed as the callback argument to\n    map_partial_symbol_filenames.  */\n struct add_partial_filename_data\n {\n@@ -5966,34 +5961,33 @@ struct add_partial_filename_data\n   const char *word;\n   int text_len;\n   completion_list *list;\n+\n+  void operator() (const char *filename, const char *fullname);\n };\n \n /* A callback for map_partial_symbol_filenames.  */\n \n-static void\n-maybe_add_partial_symtab_filename (const char *filename, const char *fullname,\n-\t\t\t\t   void *user_data)\n+void\n+add_partial_filename_data::operator() (const char *filename,\n+\t\t\t\t       const char *fullname)\n {\n-  struct add_partial_filename_data *data\n-    = (struct add_partial_filename_data *) user_data;\n-\n   if (not_interesting_fname (filename))\n     return;\n-  if (!data->filename_seen_cache->seen (filename)\n-      && filename_ncmp (filename, data->text, data->text_len) == 0)\n+  if (!filename_seen_cache->seen (filename)\n+      && filename_ncmp (filename, text, text_len) == 0)\n     {\n       /* This file matches for a completion; add it to the\n \t current list of matches.  */\n-      add_filename_to_list (filename, data->text, data->word, data->list);\n+      add_filename_to_list (filename, text, word, list);\n     }\n   else\n     {\n       const char *base_name = lbasename (filename);\n \n       if (base_name != filename\n-\t  && !data->filename_seen_cache->seen (base_name)\n-\t  && filename_ncmp (base_name, data->text, data->text_len) == 0)\n-\tadd_filename_to_list (base_name, data->text, data->word, data->list);\n+\t  && !filename_seen_cache->seen (base_name)\n+\t  && filename_ncmp (base_name, text, text_len) == 0)\n+\tadd_filename_to_list (base_name, text, word, list);\n     }\n }\n \n@@ -6050,8 +6044,7 @@ make_source_files_completion_list (const char *text, const char *word)\n   datum.word = word;\n   datum.text_len = text_len;\n   datum.list = &list;\n-  map_symbol_filenames (maybe_add_partial_symtab_filename, &datum,\n-\t\t\t0 /*need_fullname*/);\n+  map_symbol_filenames (datum, false /*need_fullname*/);\n \n   return list;\n }"
    }
  ]
}