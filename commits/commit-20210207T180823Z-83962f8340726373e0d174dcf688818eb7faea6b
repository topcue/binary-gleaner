{
  "sha": "83962f8340726373e0d174dcf688818eb7faea6b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODM5NjJmODM0MDcyNjM3M2UwZDE3NGRjZjY4ODgxOGViN2ZhZWE2Yg==",
  "commit": {
    "author": {
      "name": "Hannes Domani",
      "email": "ssbssa@yahoo.de",
      "date": "2020-12-18T17:23:41Z"
    },
    "committer": {
      "name": "Hannes Domani",
      "email": "ssbssa@yahoo.de",
      "date": "2021-02-07T18:08:23Z"
    },
    "message": "Also compare frame_id_is_next in frapy_richcompare\n\nThe last frame in a corrupt stack stores the frame_id of the next frame,\nso these two frames currently compare as equal.\n\nSo if you have a backtrace where the oldest frame is corrupt, this happens:\n\n(gdb) py\n >f = gdb.selected_frame()\n >while f.older():\n >  f = f.older()\n >print(f == f.newer())\n >end\nTrue\n\nWith this change, that same example returns False.\n\ngdb/ChangeLog:\n\n2021-02-07  Hannes Domani  <ssbssa@yahoo.de>\n\n\t* python/py-frame.c (frapy_richcompare): Compare frame_id_is_next.",
    "tree": {
      "sha": "78a229831c029e1721224978f48066bf1515a308",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/78a229831c029e1721224978f48066bf1515a308"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/83962f8340726373e0d174dcf688818eb7faea6b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/83962f8340726373e0d174dcf688818eb7faea6b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/83962f8340726373e0d174dcf688818eb7faea6b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/83962f8340726373e0d174dcf688818eb7faea6b/comments",
  "author": {
    "login": "ssbssa",
    "id": 40947,
    "node_id": "MDQ6VXNlcjQwOTQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40947?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ssbssa",
    "html_url": "https://github.com/ssbssa",
    "followers_url": "https://api.github.com/users/ssbssa/followers",
    "following_url": "https://api.github.com/users/ssbssa/following{/other_user}",
    "gists_url": "https://api.github.com/users/ssbssa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ssbssa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ssbssa/subscriptions",
    "organizations_url": "https://api.github.com/users/ssbssa/orgs",
    "repos_url": "https://api.github.com/users/ssbssa/repos",
    "events_url": "https://api.github.com/users/ssbssa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ssbssa/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "ssbssa",
    "id": 40947,
    "node_id": "MDQ6VXNlcjQwOTQ3",
    "avatar_url": "https://avatars.githubusercontent.com/u/40947?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/ssbssa",
    "html_url": "https://github.com/ssbssa",
    "followers_url": "https://api.github.com/users/ssbssa/followers",
    "following_url": "https://api.github.com/users/ssbssa/following{/other_user}",
    "gists_url": "https://api.github.com/users/ssbssa/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/ssbssa/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/ssbssa/subscriptions",
    "organizations_url": "https://api.github.com/users/ssbssa/orgs",
    "repos_url": "https://api.github.com/users/ssbssa/repos",
    "events_url": "https://api.github.com/users/ssbssa/events{/privacy}",
    "received_events_url": "https://api.github.com/users/ssbssa/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "de8d4203109ae04c05a716c1afb2d5a487e9b1fe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/de8d4203109ae04c05a716c1afb2d5a487e9b1fe",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/de8d4203109ae04c05a716c1afb2d5a487e9b1fe"
    }
  ],
  "stats": {
    "total": 11,
    "additions": 9,
    "deletions": 2
  },
  "files": [
    {
      "sha": "9e66fad08022d237a5925cf3bf00e00c97bb383d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/83962f8340726373e0d174dcf688818eb7faea6b/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/83962f8340726373e0d174dcf688818eb7faea6b/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=83962f8340726373e0d174dcf688818eb7faea6b",
      "patch": "@@ -1,3 +1,7 @@\n+2021-02-07  Hannes Domani  <ssbssa@yahoo.de>\n+\n+\t* python/py-frame.c (frapy_richcompare): Compare frame_id_is_next.\n+\n 2021-02-05  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* symmisc.c (std_in, std_out, std_err): Remove."
    },
    {
      "sha": "8e32ba55de4909c25326aed7fc39c7e672a43093",
      "filename": "gdb/python/py-frame.c",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/83962f8340726373e0d174dcf688818eb7faea6b/gdb/python/py-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/83962f8340726373e0d174dcf688818eb7faea6b/gdb/python/py-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-frame.c?ref=83962f8340726373e0d174dcf688818eb7faea6b",
      "patch": "@@ -658,8 +658,11 @@ frapy_richcompare (PyObject *self, PyObject *other, int op)\n       return Py_NotImplemented;\n     }\n \n-  if (frame_id_eq (((frame_object *) self)->frame_id,\n-\t\t   ((frame_object *) other)->frame_id))\n+  frame_object *self_frame = (frame_object *) self;\n+  frame_object *other_frame = (frame_object *) other;\n+\n+  if (self_frame->frame_id_is_next == other_frame->frame_id_is_next\n+      && frame_id_eq (self_frame->frame_id, other_frame->frame_id))\n     result = Py_EQ;\n   else\n     result = Py_NE;"
    }
  ]
}