{
  "sha": "1b95cdb76caca1b7a9ecf9324acf23139f11f7d1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWI5NWNkYjc2Y2FjYTFiN2E5ZWNmOTMyNGFjZjIzMTM5ZjExZjdkMQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-04-28T13:49:58Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-04-28T13:50:12Z"
    },
    "message": "gdb: use gdb:hash_enum as hash function in offset_map_type\n\nWhen building with g++ 4.8, we get this error (just an excerpt, because\ng++ outputs a very long error message):\n\n      CXX    dwarf2/read.o\n    ...\n    /home/smarchi/src/binutils-gdb/gdb/dwarf2/read.c:14616:31:   required from here\n    /usr/include/c++/4.8/bits/hashtable_policy.h:1070:12: error: invalid use of incomplete type \u2018struct std::hash<sect_offset>\u2019\n         struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2,\n\nThis is the same problem and fix as in commit f23f598e28ad (\"[gdb] Fix\nbuild breaker with gcc 4.8\").  Pass an explicit hash function rather\nthan relying on the default std::hash<sect_offset>.\n\ngdb/ChangeLog:\n\n\tPR gdb/25881\n\t* dwarf2/read.c (offset_map_type): Use\n\tgdb:hash_enum<sect_offset> as hash function.",
    "tree": {
      "sha": "d1c8f27c992e1f62e45214a3c5d098bf20ac78c0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d1c8f27c992e1f62e45214a3c5d098bf20ac78c0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1b95cdb76caca1b7a9ecf9324acf23139f11f7d1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b95cdb76caca1b7a9ecf9324acf23139f11f7d1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1b95cdb76caca1b7a9ecf9324acf23139f11f7d1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b95cdb76caca1b7a9ecf9324acf23139f11f7d1/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "56b1e56d2c2fa7611dc87192f26aac1da9fc63df",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/56b1e56d2c2fa7611dc87192f26aac1da9fc63df",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/56b1e56d2c2fa7611dc87192f26aac1da9fc63df"
    }
  ],
  "stats": {
    "total": 9,
    "additions": 8,
    "deletions": 1
  },
  "files": [
    {
      "sha": "f7931c23c60239192935b2c6b6515f22c61e64cb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b95cdb76caca1b7a9ecf9324acf23139f11f7d1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b95cdb76caca1b7a9ecf9324acf23139f11f7d1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1b95cdb76caca1b7a9ecf9324acf23139f11f7d1",
      "patch": "@@ -1,3 +1,9 @@\n+2020-04-28  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\tPR gdb/25881\n+\t* dwarf2/read.c (offset_map_type): Use\n+\tgdb:hash_enum<sect_offset> as hash function.\n+\n 2020-04-28  Tom de Vries  <tdevries@suse.de>\n \n \t* dwarf2/read.c (process_structure_scope): Add symbol for struct decl"
    },
    {
      "sha": "c5528887fafe98598ea560105d9a9d6d886a106f",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b95cdb76caca1b7a9ecf9324acf23139f11f7d1/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b95cdb76caca1b7a9ecf9324acf23139f11f7d1/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=1b95cdb76caca1b7a9ecf9324acf23139f11f7d1",
      "patch": "@@ -14513,7 +14513,8 @@ dwarf2_add_type_defn (struct field_info *fip, struct die_info *die,\n \n /* A convenience typedef that's used when finding the discriminant\n    field for a variant part.  */\n-typedef std::unordered_map<sect_offset, int> offset_map_type;\n+typedef std::unordered_map<sect_offset, int, gdb::hash_enum<sect_offset>>\n+  offset_map_type;\n \n /* Compute the discriminant range for a given variant.  OBSTACK is\n    where the results will be stored.  VARIANT is the variant to"
    }
  ]
}