{
  "sha": "d0922fcf02c6f60ca17cbddccd8b9c8f789eef8c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDA5MjJmY2YwMmM2ZjYwY2ExN2NiZGRjY2Q4YjljOGY3ODllZWY4Yw==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2019-12-20T17:23:32Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2019-12-20T18:27:29Z"
    },
    "message": "Use enum bitfield for the calling_convention attribute of a subroutine\n\nThis is a refactoring.  Instead of a plain unsigned value, use an enum\nbitfield.\n\ngdb/ChangeLog:\n2019-12-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* dwarf2read.c (is_valid_DW_AT_calling_convention_for_subroutine):\n\tNew function.\n\t(read_subroutine_type): Validate the parsed\n\tDW_AT_calling_convention value before assigning it to a\n\tsubroutine's calling_convention attribute.\n\t* gdbtypes.h (struct func_type) <calling_convention>: Use\n\tan enum bitfield as its type, instead of plain unsigned.\n\nChange-Id: Ibc6b2f71e885cbc5c3c9d49734f7125acbfd1bcd",
    "tree": {
      "sha": "b2686ddf77366db1c6a3646d22b687b2d27b3c88",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b2686ddf77366db1c6a3646d22b687b2d27b3c88"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d0922fcf02c6f60ca17cbddccd8b9c8f789eef8c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d0922fcf02c6f60ca17cbddccd8b9c8f789eef8c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d0922fcf02c6f60ca17cbddccd8b9c8f789eef8c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d0922fcf02c6f60ca17cbddccd8b9c8f789eef8c/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c855a9125ade61c046091373bafdae0c719118e0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c855a9125ade61c046091373bafdae0c719118e0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c855a9125ade61c046091373bafdae0c719118e0"
    }
  ],
  "stats": {
    "total": 46,
    "additions": 42,
    "deletions": 4
  },
  "files": [
    {
      "sha": "d4b17abbdc60f26aa4d14cbf3e8a0a2b94fa3be3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0922fcf02c6f60ca17cbddccd8b9c8f789eef8c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0922fcf02c6f60ca17cbddccd8b9c8f789eef8c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d0922fcf02c6f60ca17cbddccd8b9c8f789eef8c",
      "patch": "@@ -1,3 +1,13 @@\n+2019-12-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* dwarf2read.c (is_valid_DW_AT_calling_convention_for_subroutine):\n+\tNew function.\n+\t(read_subroutine_type): Validate the parsed\n+\tDW_AT_calling_convention value before assigning it to a\n+\tsubroutine's calling_convention attribute.\n+\t* gdbtypes.h (struct func_type) <calling_convention>: Use\n+\tan enum bitfield as its type, instead of plain unsigned.\n+\n 2019-12-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tPR gdb/25054"
    },
    {
      "sha": "685d9962978ccf665d5d1f35593c7d4bc07a5155",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 30,
      "deletions": 2,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0922fcf02c6f60ca17cbddccd8b9c8f789eef8c/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0922fcf02c6f60ca17cbddccd8b9c8f789eef8c/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=d0922fcf02c6f60ca17cbddccd8b9c8f789eef8c",
      "patch": "@@ -15872,6 +15872,32 @@ is_valid_DW_AT_calling_convention_for_type (ULONGEST value)\n     }\n }\n \n+/* Check if the given VALUE is a valid enum dwarf_calling_convention\n+   constant for a subroutine, according to DWARF5 spec, Table 3.3, and\n+   also according to GNU-specific values (see include/dwarf2.h).  */\n+\n+static bool\n+is_valid_DW_AT_calling_convention_for_subroutine (ULONGEST value)\n+{\n+  switch (value)\n+    {\n+    case DW_CC_normal:\n+    case DW_CC_program:\n+    case DW_CC_nocall:\n+      return true;\n+\n+    case DW_CC_GNU_renesas_sh:\n+    case DW_CC_GNU_borland_fastcall_i386:\n+    case DW_CC_GDB_IBM_OpenCL:\n+      return true;\n+\n+    default:\n+      complaint (_(\"unrecognized DW_AT_calling_convention value \"\n+\t\t   \"(%lu) for a subroutine\"), value);\n+      return false;\n+    }\n+}\n+\n /* Called when we find the DIE that starts a structure or union scope\n    (definition) to create a type for the structure or union.  Fill in\n    the type's name and general properties; the members will not be\n@@ -17540,8 +17566,10 @@ read_subroutine_type (struct die_info *die, struct dwarf2_cu *cu)\n      the subroutine die.  Otherwise set the calling convention to\n      the default value DW_CC_normal.  */\n   attr = dwarf2_attr (die, DW_AT_calling_convention, cu);\n-  if (attr != nullptr)\n-    TYPE_CALLING_CONVENTION (ftype) = DW_UNSND (attr);\n+  if (attr != nullptr\n+      && is_valid_DW_AT_calling_convention_for_subroutine (DW_UNSND (attr)))\n+    TYPE_CALLING_CONVENTION (ftype)\n+      = (enum dwarf_calling_convention) (DW_UNSND (attr));\n   else if (cu->producer && strstr (cu->producer, \"IBM XL C for OpenCL\"))\n     TYPE_CALLING_CONVENTION (ftype) = DW_CC_GDB_IBM_OpenCL;\n   else"
    },
    {
      "sha": "167fd803ea25f65dc42cdeafcc347e7116165963",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d0922fcf02c6f60ca17cbddccd8b9c8f789eef8c/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d0922fcf02c6f60ca17cbddccd8b9c8f789eef8c/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=d0922fcf02c6f60ca17cbddccd8b9c8f789eef8c",
      "patch": "@@ -1157,9 +1157,9 @@ struct func_type\n     /* * The calling convention for targets supporting multiple ABIs.\n        Right now this is only fetched from the Dwarf-2\n        DW_AT_calling_convention attribute.  The value is one of the\n-       DW_CC enum dwarf_calling_convention constants.  */\n+       DW_CC constants.  */\n \n-    unsigned calling_convention : 8;\n+    ENUM_BITFIELD (dwarf_calling_convention) calling_convention : 8;\n \n     /* * Whether this function normally returns to its caller.  It is\n        set from the DW_AT_noreturn attribute if set on the"
    }
  ]
}