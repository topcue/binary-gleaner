{
  "sha": "3a76f8f489428bada97c9dea2145448a3e0f7135",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2E3NmY4ZjQ4OTQyOGJhZGE5N2M5ZGVhMjE0NTQ0OGEzZTBmNzEzNQ==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2021-07-12T17:03:22Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2021-07-13T14:30:04Z"
    },
    "message": "Avoid letting exceptions escape gdb_bfd_iovec_fileio_close (PR gdb/28080)\n\nBefore PR gdb/28080 was fixed by the previous patch, GDB was crashing\nlike this:\n\n (gdb) detach\n Detaching from program: target:/any/program, process 3671843\n Detaching from process 3671843\n Ending remote debugging.\n [Inferior 1 (process 3671843) detached]\n In main\n terminate called after throwing an instance of 'gdb_exception_error'\n Aborted (core dumped)\n\nHere's the exception above being thrown:\n\n (top-gdb) bt\n #0  throw_error (error=TARGET_CLOSE_ERROR, fmt=0x555556035588 \"Remote connection closed\") at src/gdbsupport/common-exceptions.cc:222\n #1  0x0000555555bbaa46 in remote_target::readchar (this=0x555556a11040, timeout=10000) at src/gdb/remote.c:9440\n #2  0x0000555555bbb9e5 in remote_target::getpkt_or_notif_sane_1 (this=0x555556a11040, buf=0x555556a11058, forever=0, expecting_notif=0, is_notif=0x0) at src/gdb/remote.c:9928\n #3  0x0000555555bbbda9 in remote_target::getpkt_sane (this=0x555556a11040, buf=0x555556a11058, forever=0) at src/gdb/remote.c:10030\n #4  0x0000555555bc0e75 in remote_target::remote_hostio_send_command (this=0x555556a11040, command_bytes=13, which_packet=14, remote_errno=0x7fffffffcfd0, attachment=0x0, attachment_len=0x0) at src/gdb/remote.c:12137\n #5  0x0000555555bc1b6c in remote_target::remote_hostio_close (this=0x555556a11040, fd=8, remote_errno=0x7fffffffcfd0) at src/gdb/remote.c:12455\n #6  0x0000555555bc1bb4 in remote_target::fileio_close (During symbol reading: .debug_line address at offset 0x64f417 is 0 [in module build/gdb/gdb]\n this=0x555556a11040, fd=8, remote_errno=0x7fffffffcfd0) at src/gdb/remote.c:12462\n #7  0x0000555555c9274c in target_fileio_close (fd=3, target_errno=0x7fffffffcfd0) at src/gdb/target.c:3365\n #8  0x000055555595a19d in gdb_bfd_iovec_fileio_close (abfd=0x555556b9f8a0, stream=0x555556b11530) at src/gdb/gdb_bfd.c:439\n #9  0x0000555555e09e3f in opncls_bclose (abfd=0x555556b9f8a0) at src/bfd/opncls.c:599\n #10 0x0000555555e0a2c7 in bfd_close_all_done (abfd=0x555556b9f8a0) at src/bfd/opncls.c:847\n #11 0x0000555555e0a27a in bfd_close (abfd=0x555556b9f8a0) at src/bfd/opncls.c:814\n #12 0x000055555595a9d3 in gdb_bfd_close_or_warn (abfd=0x555556b9f8a0) at src/gdb/gdb_bfd.c:626\n #13 0x000055555595ad29 in gdb_bfd_unref (abfd=0x555556b9f8a0) at src/gdb/gdb_bfd.c:715\n #14 0x0000555555ae4730 in objfile::~objfile (this=0x555556515540, __in_chrg=<optimized out>) at src/gdb/objfiles.c:573\n #15 0x0000555555ae955a in std::_Sp_counted_ptr<objfile*, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x555556c20db0) at /usr/include/c++/9/bits/shared_ptr_base.h:377\n #16 0x000055555572b7c8 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x555556c20db0) at /usr/include/c++/9/bits/shared_ptr_base.h:155\n #17 0x00005555557263c3 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x555556bf0588, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/shared_ptr_base.h:730\n #18 0x0000555555ae745e in std::__shared_ptr<objfile, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x555556bf0580, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/shared_ptr_base.h:1169\n #19 0x0000555555ae747e in std::shared_ptr<objfile>::~shared_ptr (this=0x555556bf0580, __in_chrg=<optimized out>) at /usr/include/c++/9/bits/shared_ptr.h:103\n #20 0x0000555555b1c1dc in __gnu_cxx::new_allocator<std::_List_node<std::shared_ptr<objfile> > >::destroy<std::shared_ptr<objfile> > (this=0x5555564cdd60, __p=0x555556bf0580) at /usr/include/c++/9/ext/new_allocator.h:153\n #21 0x0000555555b1bb1d in std::allocator_traits<std::allocator<std::_List_node<std::shared_ptr<objfile> > > >::destroy<std::shared_ptr<objfile> > (__a=..., __p=0x555556bf0580) at /usr/include/c++/9/bits/alloc_traits.h:497\n #22 0x0000555555b1b73e in std::__cxx11::list<std::shared_ptr<objfile>, std::allocator<std::shared_ptr<objfile> > >::_M_erase (this=0x5555564cdd60, __position=std::shared_ptr<objfile> (expired, weak count 1) = {get() = 0x555556515540}) at /usr/include/c++/9/bits/stl_list.h:1921\n #23 0x0000555555b1afeb in std::__cxx11::list<std::shared_ptr<objfile>, std::allocator<std::shared_ptr<objfile> > >::erase (this=0x5555564cdd60, __position=std::shared_ptr<objfile> (expired, weak count 1) = {get() = 0x555556515540}) at /usr/include/c++/9/bits/list.tcc:158\n #24 0x0000555555b19576 in program_space::remove_objfile (this=0x5555564cdd20, objfile=0x555556515540) at src/gdb/progspace.c:210\n #25 0x0000555555ae4502 in objfile::unlink (this=0x555556515540) at src/gdb/objfiles.c:487\n #26 0x0000555555ae5a12 in objfile_purge_solibs () at src/gdb/objfiles.c:875\n #27 0x0000555555c09686 in no_shared_libraries (ignored=0x0, from_tty=1) at src/gdb/solib.c:1236\n #28 0x00005555559e3f5f in detach_command (args=0x0, from_tty=1) at src/gdb/infcmd.c:2769\n\nNote frame #14:\n\n #14 0x0000555555ae4730 in objfile::~objfile (this=0x555556515540, __in_chrg=<optimized out>) at src/gdb/objfiles.c:573\n\nThat's a dtor, thus noexcept.  That's the reason for the\nstd::terminate.\n\nThe previous patch fixed things such that the exception above isn't\nthrown anymore.  However, it's possible that e.g., the remote\nconnection drops just while a user types \"nosharedlibrary\", or some\nother reason that leads to objfile::~objfile, and then we end up the\nsame std::terminate problem.\n\nAlso notice that frames #9-#11 are BFD frames:\n\n #9  0x0000555555e09e3f in opncls_bclose (abfd=0x555556bc27e0) at src/bfd/opncls.c:599\n #10 0x0000555555e0a2c7 in bfd_close_all_done (abfd=0x555556bc27e0) at src/bfd/opncls.c:847\n #11 0x0000555555e0a27a in bfd_close (abfd=0x555556bc27e0) at src/bfd/opncls.c:814\n\nBFD is written in C and thus throwing exceptions over such frames may\neither not clean up properly, or, may abort if bfd is not compiled\nwith -fasynchronous-unwind-tables (x86-64 defaults that on, but not\nall GCC ports do).\n\nThus frame #8 seems like a good place to swallow exceptions.  More so\nsince in this spot we already ignore target_fileio_close return\nerrors.  That's what this commit does.  Without the previous fix, we'd\nsee:\n\n (gdb) detach\n Detaching from program: target:/any/program, process 2197701\n Ending remote debugging.\n [Inferior 1 (process 2197701) detached]\n warning: cannot close \"target:/lib64/ld-linux-x86-64.so.2\": Remote connection closed\n\nNote it prints a warning, which would still be a regression compared\nto GDB 10, if it weren't for the previous fix.\n\ngdb/ChangeLog:\nyyyy-mm-dd  Pedro Alves  <pedro@palves.net>\n\n\tPR gdb/28080\n\t* gdb_bfd.c (gdb_bfd_close_warning): New.\n\t(gdb_bfd_iovec_fileio_close): Wrap target_fileio_close in\n\ttry/catch and print warning on exception.\n\t(gdb_bfd_close_or_warn): Use gdb_bfd_close_warning.\n\nChange-Id: Ic7a26ddba0a4444e3377b0e7c1c89934a84545d7",
    "tree": {
      "sha": "30e12183eb765f85ee708814b4c76cfb8b07be0b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/30e12183eb765f85ee708814b4c76cfb8b07be0b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3a76f8f489428bada97c9dea2145448a3e0f7135",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3a76f8f489428bada97c9dea2145448a3e0f7135",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3a76f8f489428bada97c9dea2145448a3e0f7135",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3a76f8f489428bada97c9dea2145448a3e0f7135/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d7cb0ef35b112e35a3e9b4dc30ffd800c9d0a4fe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d7cb0ef35b112e35a3e9b4dc30ffd800c9d0a4fe",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d7cb0ef35b112e35a3e9b4dc30ffd800c9d0a4fe"
    }
  ],
  "stats": {
    "total": 24,
    "additions": 21,
    "deletions": 3
  },
  "files": [
    {
      "sha": "312442a466e275092525acebe8cdd544fc635abc",
      "filename": "gdb/gdb_bfd.c",
      "status": "modified",
      "additions": 21,
      "deletions": 3,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3a76f8f489428bada97c9dea2145448a3e0f7135/gdb/gdb_bfd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3a76f8f489428bada97c9dea2145448a3e0f7135/gdb/gdb_bfd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdb_bfd.c?ref=3a76f8f489428bada97c9dea2145448a3e0f7135",
      "patch": "@@ -423,6 +423,15 @@ gdb_bfd_iovec_fileio_pread (struct bfd *abfd, void *stream, void *buf,\n   return pos;\n }\n \n+/* Warn that it wasn't possible to close a bfd for file NAME, because\n+   of REASON.  */\n+\n+static void\n+gdb_bfd_close_warning (const char *name, const char *reason)\n+{\n+  warning (_(\"cannot close \\\"%s\\\": %s\"), name, reason);\n+}\n+\n /* Wrapper for target_fileio_close suitable for passing as the\n    CLOSE_FUNC argument to gdb_bfd_openr_iovec.  */\n \n@@ -436,7 +445,16 @@ gdb_bfd_iovec_fileio_close (struct bfd *abfd, void *stream)\n \n   /* Ignore errors on close.  These may happen with remote\n      targets if the connection has already been torn down.  */\n-  target_fileio_close (fd, &target_errno);\n+  try\n+    {\n+      target_fileio_close (fd, &target_errno);\n+    }\n+  catch (const gdb_exception &ex)\n+    {\n+      /* Also avoid crossing exceptions over bfd.  */\n+      gdb_bfd_close_warning (bfd_get_filename (abfd),\n+\t\t\t     ex.message->c_str ());\n+    }\n \n   /* Zero means success.  */\n   return 0;\n@@ -626,8 +644,8 @@ gdb_bfd_close_or_warn (struct bfd *abfd)\n   ret = bfd_close (abfd);\n \n   if (!ret)\n-    warning (_(\"cannot close \\\"%s\\\": %s\"),\n-\t     name, bfd_errmsg (bfd_get_error ()));\n+    gdb_bfd_close_warning (name,\n+\t\t\t   bfd_errmsg (bfd_get_error ()));\n \n   return ret;\n }"
    }
  ]
}