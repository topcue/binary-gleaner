{
  "sha": "d412e69677c6ca145ea8f5ff8c61a22952cb0855",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDQxMmU2OTY3N2M2Y2ExNDVlYThmNWZmOGM2MWEyMjk1MmNiMDg1NQ==",
  "commit": {
    "author": {
      "name": "Rainer Orth",
      "email": "ro@CeBiTec.Uni-Bielefeld.DE",
      "date": "2020-06-25T11:43:46Z"
    },
    "committer": {
      "name": "Rainer Orth",
      "email": "ro@CeBiTec.Uni-Bielefeld.DE",
      "date": "2020-06-25T11:43:46Z"
    },
    "message": "Move common handlers to sol2_init_abi\n\nThere's some overlap and duplication between 32 and 64-bit Solaris/SPARC\nand x86 tdep files, in particular\n\n        sol2_core_pid_to_str\n\t*_sol2_sigtramp_p\n        sol2_skip_solib_resolver\n        *_sol2_static_transform_name (forgotten on amd64)\n        set_gdbarch_sofun_address_maybe_missing (likewise)\n\nThis patch avoids this by centralizing common code in sol2-tdep.c.\nWhile sparc_sol2_pc_in_sigtramp and sparc_sol2_static_transform_name\nwere declared in the shared sparc-tdep.h, they were only used in Solaris\nfiles.\n\nTested on amd64-pc-solaris2.11, i386-pc-solaris2.11,\nsparcv9-sun-solaris2.11, and sparc-sun-solaris2.11, and\nsparc64-unknown-linux-gnu.\n\n\t* amd64-sol2-tdep.c (amd64_sol2_sigtramp_p): Remove.\n\t(amd64_sol2_init_abi): Use sol2_sigtramp_p.\n\tCall sol2_init_abi.\n \tRemove calls to set_gdbarch_skip_solib_resolver,\n\tset_gdbarch_core_pid_to_str.\n\t* i386-sol2-tdep.c (i386_sol2_sigtramp_p): Remove.\n\t(i386_sol2_static_transform_name): Remove.\n\t(i386_sol2_init_abi): Call sol2_init_abi.\n\tRemove calls to set_gdbarch_sofun_address_maybe_missing,\n\tset_gdbarch_static_transform_name,\n\tset_gdbarch_skip_solib_resolver, set_gdbarch_core_pid_to_str.\n\tUse sol2_sigtramp_p.\n\t* sol2-tdep.c (sol2_pc_in_sigtramp): New function.\n\t(sol2_sigtramp_p): New function.\n\t(sol2_static_transform_name): New function.\n\t(sol2_skip_solib_resolver, sol2_core_pid_to_str): Make static.\n\t(sol2_init_abi): New function.\n\t* sol2-tdep.h (sol2_sigtramp_p, sol2_init_abi): Declare.\n\t(sol2_skip_solib_resolver, sol2_core_pid_to_str): Remove.\n\t* sparc-sol2-tdep.c (sparc_sol2_pc_in_sigtramp): Remove.\n\t(sparc32_sol2_sigtramp_frame_sniffer): Just call sol2_sigtramp_p.\n\t(sparc_sol2_static_transform_name): Remove.\n\t(sparc32_sol2_init_abi): Call sol2_init_abi.\n\tRemove calls to set_gdbarch_sofun_address_maybe_missing,\n\tset_gdbarch_static_transform_name,\n\tset_gdbarch_skip_solib_resolver,\n\tset_gdbarch_core_pid_to_str.\n\t* sparc-tdep.h (sparc_sol2_pc_in_sigtramp)\n\t(sparc_sol2_static_transform_name): Remove\n\t* sparc64-sol2-tdep.c (sparc64_sol2_sigtramp_frame_sniffer): Just\n\tcall sol2_sigtramp_p.\n\t(sparc64_sol2_init_abi): Call sol2_init_abi.\n\tRemove calls to set_gdbarch_sofun_address_maybe_missing,\n\tset_gdbarch_static_transform_name,\n\tset_gdbarch_skip_solib_resolver, set_gdbarch_core_pid_to_str.",
    "tree": {
      "sha": "85fb98a2122dfff9a1ff8602d140735e32fe1c5c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/85fb98a2122dfff9a1ff8602d140735e32fe1c5c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d412e69677c6ca145ea8f5ff8c61a22952cb0855",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d412e69677c6ca145ea8f5ff8c61a22952cb0855",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d412e69677c6ca145ea8f5ff8c61a22952cb0855",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d412e69677c6ca145ea8f5ff8c61a22952cb0855/comments",
  "author": {
    "login": "rorth",
    "id": 3930951,
    "node_id": "MDQ6VXNlcjM5MzA5NTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rorth",
    "html_url": "https://github.com/rorth",
    "followers_url": "https://api.github.com/users/rorth/followers",
    "following_url": "https://api.github.com/users/rorth/following{/other_user}",
    "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rorth/subscriptions",
    "organizations_url": "https://api.github.com/users/rorth/orgs",
    "repos_url": "https://api.github.com/users/rorth/repos",
    "events_url": "https://api.github.com/users/rorth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rorth/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "rorth",
    "id": 3930951,
    "node_id": "MDQ6VXNlcjM5MzA5NTE=",
    "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/rorth",
    "html_url": "https://github.com/rorth",
    "followers_url": "https://api.github.com/users/rorth/followers",
    "following_url": "https://api.github.com/users/rorth/following{/other_user}",
    "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/rorth/subscriptions",
    "organizations_url": "https://api.github.com/users/rorth/orgs",
    "repos_url": "https://api.github.com/users/rorth/repos",
    "events_url": "https://api.github.com/users/rorth/events{/privacy}",
    "received_events_url": "https://api.github.com/users/rorth/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "42cc83080dee2c23635130c11b3f71f1ca1f5871",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/42cc83080dee2c23635130c11b3f71f1ca1f5871",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/42cc83080dee2c23635130c11b3f71f1ca1f5871"
    }
  ],
  "stats": {
    "total": 338,
    "additions": 158,
    "deletions": 180
  },
  "files": [
    {
      "sha": "0799ec3a5c83231f136f249c99b7d590b1bf0b6f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d412e69677c6ca145ea8f5ff8c61a22952cb0855/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d412e69677c6ca145ea8f5ff8c61a22952cb0855/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d412e69677c6ca145ea8f5ff8c61a22952cb0855",
      "patch": "@@ -1,3 +1,41 @@\n+2020-06-25  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\t* amd64-sol2-tdep.c (amd64_sol2_sigtramp_p): Remove.\n+\t(amd64_sol2_init_abi): Use sol2_sigtramp_p.\n+\tCall sol2_init_abi.\n+ \tRemove calls to set_gdbarch_skip_solib_resolver,\n+\tset_gdbarch_core_pid_to_str.\n+\t* i386-sol2-tdep.c (i386_sol2_sigtramp_p): Remove.\n+\t(i386_sol2_static_transform_name): Remove.\n+\t(i386_sol2_init_abi): Call sol2_init_abi.\n+\tRemove calls to set_gdbarch_sofun_address_maybe_missing,\n+\tset_gdbarch_static_transform_name,\n+\tset_gdbarch_skip_solib_resolver, set_gdbarch_core_pid_to_str.\n+\tUse sol2_sigtramp_p.\n+\t* sol2-tdep.c (sol2_pc_in_sigtramp): New function.\n+\t(sol2_sigtramp_p): New function.\n+\t(sol2_static_transform_name): New function.\n+\t(sol2_skip_solib_resolver, sol2_core_pid_to_str): Make static.\n+\t(sol2_init_abi): New function.\n+\t* sol2-tdep.h (sol2_sigtramp_p, sol2_init_abi): Declare.\n+\t(sol2_skip_solib_resolver, sol2_core_pid_to_str): Remove.\n+\t* sparc-sol2-tdep.c (sparc_sol2_pc_in_sigtramp): Remove.\n+\t(sparc32_sol2_sigtramp_frame_sniffer): Just call sol2_sigtramp_p.\n+\t(sparc_sol2_static_transform_name): Remove.\n+\t(sparc32_sol2_init_abi): Call sol2_init_abi.\n+\tRemove calls to set_gdbarch_sofun_address_maybe_missing,\n+\tset_gdbarch_static_transform_name,\n+\tset_gdbarch_skip_solib_resolver,\n+\tset_gdbarch_core_pid_to_str.\n+\t* sparc-tdep.h (sparc_sol2_pc_in_sigtramp)\n+\t(sparc_sol2_static_transform_name): Remove\n+\t* sparc64-sol2-tdep.c (sparc64_sol2_sigtramp_frame_sniffer): Just\n+\tcall sol2_sigtramp_p.\n+\t(sparc64_sol2_init_abi): Call sol2_init_abi.\n+\tRemove calls to set_gdbarch_sofun_address_maybe_missing,\n+\tset_gdbarch_static_transform_name,\n+\tset_gdbarch_skip_solib_resolver, set_gdbarch_core_pid_to_str.\n+\n 2020-06-24  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n \n \t* symfile-add-flags.h: New flag SYMFILE_ALWAYS_CONFIRM."
    },
    {
      "sha": "f1eba8113bbbece7d68ef007f70a4076693435dd",
      "filename": "gdb/amd64-sol2-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 20,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d412e69677c6ca145ea8f5ff8c61a22952cb0855/gdb/amd64-sol2-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d412e69677c6ca145ea8f5ff8c61a22952cb0855/gdb/amd64-sol2-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-sol2-tdep.c?ref=d412e69677c6ca145ea8f5ff8c61a22952cb0855",
      "patch": "@@ -63,21 +63,6 @@ static int amd64_sol2_gregset_reg_offset[] = {\n };\n \f\n \n-/* Return whether THIS_FRAME corresponds to a Solaris sigtramp\n-   routine.  */\n-\n-static int\n-amd64_sol2_sigtramp_p (struct frame_info *this_frame)\n-{\n-  CORE_ADDR pc = get_frame_pc (this_frame);\n-  const char *name;\n-\n-  find_pc_partial_function (pc, &name, NULL, NULL);\n-  return (name && (strcmp (\"sigacthandler\", name) == 0\n-\t\t   || strcmp (name, \"ucbsigvechandler\") == 0\n-\t\t   || strcmp (name, \"__sighndlr\") == 0));\n-}\n-\n /* Solaris doesn't have a 'struct sigcontext', but it does have a\n    'mcontext_t' that contains the saved set of machine registers.  */\n \n@@ -104,18 +89,16 @@ amd64_sol2_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   amd64_init_abi (info, gdbarch,\n \t\t  amd64_target_description (X86_XSTATE_SSE_MASK, true));\n \n-  tdep->sigtramp_p = amd64_sol2_sigtramp_p;\n+  sol2_init_abi (info, gdbarch);\n+\n+  tdep->sigtramp_p = sol2_sigtramp_p;\n   tdep->sigcontext_addr = amd64_sol2_mcontext_addr;\n   tdep->sc_reg_offset = tdep->gregset_reg_offset;\n   tdep->sc_num_regs = tdep->gregset_num_regs;\n \n   /* Solaris uses SVR4-style shared libraries.  */\n-  set_gdbarch_skip_solib_resolver (gdbarch, sol2_skip_solib_resolver);\n   set_solib_svr4_fetch_link_map_offsets\n     (gdbarch, svr4_lp64_fetch_link_map_offsets);\n-\n-  /* How to print LWP PTIDs from core files.  */\n-  set_gdbarch_core_pid_to_str (gdbarch, sol2_core_pid_to_str);\n }\n \n void _initialize_amd64_sol2_tdep ();"
    },
    {
      "sha": "0d8eb40119ba327cd39691ac28eea902a7030acf",
      "filename": "gdb/i386-sol2-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 50,
      "changes": 52,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d412e69677c6ca145ea8f5ff8c61a22952cb0855/gdb/i386-sol2-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d412e69677c6ca145ea8f5ff8c61a22952cb0855/gdb/i386-sol2-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/i386-sol2-tdep.c?ref=d412e69677c6ca145ea8f5ff8c61a22952cb0855",
      "patch": "@@ -46,21 +46,6 @@ static int i386_sol2_gregset_reg_offset[] =\n   0 * 4\t\t\t\t/* %gs */\n };\n \n-/* Return whether THIS_FRAME corresponds to a Solaris sigtramp\n-   routine.  */\n-\n-static int\n-i386_sol2_sigtramp_p (struct frame_info *this_frame)\n-{\n-  CORE_ADDR pc = get_frame_pc (this_frame);\n-  const char *name;\n-\n-  find_pc_partial_function (pc, &name, NULL, NULL);\n-  return (name && (strcmp (\"sigacthandler\", name) == 0\n-\t\t   || strcmp (name, \"ucbsigvechandler\") == 0\n-\t\t   || strcmp (name, \"__sighndlr\") == 0));\n-}\n-\n /* Solaris doesn't have a `struct sigcontext', but it does have a\n    `mcontext_t' that contains the saved set of machine registers.  */\n \n@@ -75,30 +60,6 @@ i386_sol2_mcontext_addr (struct frame_info *this_frame)\n   return ucontext_addr + 36;\n }\n \n-/* SunPRO encodes the static variables.  This is not related to C++\n-   mangling, it is done for C too.  */\n-\n-static const char *\n-i386_sol2_static_transform_name (const char *name)\n-{\n-  if (name[0] == '.')\n-    {\n-      const char *p;\n-\n-      /* For file-local statics there will be a period, a bunch of\n-         junk (the contents of which match a string given in the\n-         N_OPT), a period and the name.  For function-local statics\n-         there will be a bunch of junk (which seems to change the\n-         second character from 'A' to 'B'), a period, the name of the\n-         function, and the name.  So just skip everything before the\n-         last period.  */\n-      p = strrchr (name, '.');\n-      if (p != NULL)\n-        name = p + 1;\n-    }\n-  return name;\n-}\n-\n /* Solaris 2.  */\n \n static void\n@@ -109,12 +70,7 @@ i386_sol2_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   /* Solaris is SVR4-based.  */\n   i386_svr4_init_abi (info, gdbarch);\n \n-  /* The SunPRO compiler puts out 0 instead of the address in N_SO symbols,\n-     and for SunPRO 3.0, N_FUN symbols too.  */\n-  set_gdbarch_sofun_address_maybe_missing (gdbarch, 1);\n-\n-  /* Handle SunPRO encoding of static symbols.  */\n-  set_gdbarch_static_transform_name (gdbarch, i386_sol2_static_transform_name);\n+  sol2_init_abi (info, gdbarch);\n \n   /* Solaris reserves space for its FPU emulator in `fpregset_t'.\n      There is also some space reserved for the registers of a Weitek\n@@ -125,18 +81,14 @@ i386_sol2_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   tdep->sizeof_fpregset = 380;\n \n   /* Signal trampolines are slightly different from SVR4.  */\n-  tdep->sigtramp_p = i386_sol2_sigtramp_p;\n+  tdep->sigtramp_p = sol2_sigtramp_p;\n   tdep->sigcontext_addr = i386_sol2_mcontext_addr;\n   tdep->sc_reg_offset = tdep->gregset_reg_offset;\n   tdep->sc_num_regs = tdep->gregset_num_regs;\n \n   /* Solaris has SVR4-style shared libraries.  */\n-  set_gdbarch_skip_solib_resolver (gdbarch, sol2_skip_solib_resolver);\n   set_solib_svr4_fetch_link_map_offsets\n     (gdbarch, svr4_ilp32_fetch_link_map_offsets);\n-\n-  /* How to print LWP PTIDs from core files.  */\n-  set_gdbarch_core_pid_to_str (gdbarch, sol2_core_pid_to_str);\n }\n \f\n "
    },
    {
      "sha": "179c8aeea5758e98dd8273f9bebfad0b274ad705",
      "filename": "gdb/sol2-tdep.c",
      "status": "modified",
      "additions": 108,
      "deletions": 8,
      "changes": 116,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d412e69677c6ca145ea8f5ff8c61a22952cb0855/gdb/sol2-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d412e69677c6ca145ea8f5ff8c61a22952cb0855/gdb/sol2-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sol2-tdep.c?ref=d412e69677c6ca145ea8f5ff8c61a22952cb0855",
      "patch": "@@ -25,7 +25,89 @@\n \n #include \"sol2-tdep.h\"\n \n-CORE_ADDR\n+/* The Solaris signal trampolines reside in libc.  For normal signals,\n+   the function `sigacthandler' is used.  This signal trampoline will\n+   call the signal handler using the System V calling convention,\n+   where the third argument is a pointer to an instance of\n+   `ucontext_t', which has a member `uc_mcontext' that contains the\n+   saved registers.  Incidentally, the kernel passes the `ucontext_t'\n+   pointer as the third argument of the signal trampoline too, and\n+   `sigacthandler' simply passes it on.  However, if you link your\n+   program with \"-L/usr/ucblib -R/usr/ucblib -lucb\", the function\n+   `ucbsigvechandler' will be used, which invokes the using the BSD\n+   convention, where the third argument is a pointer to an instance of\n+   `struct sigcontext'.  It is the `ucbsigvechandler' function that\n+   converts the `ucontext_t' to a `sigcontext', and back.  Unless the\n+   signal handler modifies the `struct sigcontext' we can safely\n+   ignore this.  */\n+\n+static int\n+sol2_pc_in_sigtramp (CORE_ADDR pc, const char *name)\n+{\n+  return (name && (strcmp (name, \"sigacthandler\") == 0\n+\t\t   || strcmp (name, \"ucbsigvechandler\") == 0\n+\t\t   || strcmp (name, \"__sighndlr\") == 0));\n+}\n+\n+/* Return whether THIS_FRAME corresponds to a Solaris sigtramp routine.  */\n+\n+int\n+sol2_sigtramp_p (struct frame_info *this_frame)\n+{\n+  CORE_ADDR pc = get_frame_pc (this_frame);\n+  const char *name;\n+\n+  find_pc_partial_function (pc, &name, NULL, NULL);\n+  return sol2_pc_in_sigtramp (pc, name);\n+}\n+\n+/* Unglobalize NAME.  */\n+\n+static const char *\n+sol2_static_transform_name (const char *name)\n+{\n+  /* The Sun compilers (Sun ONE Studio, Forte Developer, Sun WorkShop,\n+     SunPRO) convert file static variables into global values, a\n+     process known as globalization.  In order to do this, the\n+     compiler will create a unique prefix and prepend it to each file\n+     static variable.  For static variables within a function, this\n+     globalization prefix is followed by the function name (nested\n+     static variables within a function are supposed to generate a\n+     warning message, and are left alone).  The procedure is\n+     documented in the Stabs Interface Manual, which is distributed\n+     with the compilers, although version 4.0 of the manual seems to\n+     be incorrect in some places, at least for SPARC.  The\n+     globalization prefix is encoded into an N_OPT stab, with the form\n+     \"G=<prefix>\".  The globalization prefix always seems to start\n+     with a dollar sign '$' (sparc) resp. a dot '.' (x86); a dot '.'\n+     is used as a separator.  So we  simply strip everything up until\n+     the last dot.  */\n+  int prefix;\n+  \n+  switch (gdbarch_bfd_arch_info (target_gdbarch ())->arch)\n+    {\n+    case bfd_arch_i386:\n+      prefix = '.';\n+      break;\n+    case bfd_arch_sparc:\n+      prefix = '$';\n+      break;\n+    default:\n+      internal_error (__FILE__, __LINE__, \"Unexpected arch\");\n+      break;\n+    }\n+\n+  if (name[0] == prefix)\n+    {\n+      const char *p = strrchr (name, '.');\n+      if (p)\n+        return p + 1;\n+    }\n+\n+  return name;\n+}\n+\n+static CORE_ADDR\n sol2_skip_solib_resolver (struct gdbarch *gdbarch, CORE_ADDR pc)\n {\n   struct bound_minimal_symbol msym;\n@@ -37,17 +119,15 @@ sol2_skip_solib_resolver (struct gdbarch *gdbarch, CORE_ADDR pc)\n   return 0;\n }\n \n-/* This is how we want PTIDs from Solaris core files to be\n-   printed.  */\n+/* This is how we want PTIDs from Solaris core files to be printed.  */\n \n-std::string\n+static std::string\n sol2_core_pid_to_str (struct gdbarch *gdbarch, ptid_t ptid)\n {\n   struct inferior *inf;\n   int pid;\n \n-  /* Check whether we're printing an LWP (gdb thread) or a\n-     process.  */\n+  /* Check whether we're printing an LWP (gdb thread) or a process.  */\n   pid = ptid.lwp ();\n   if (pid != 0)\n     {\n@@ -56,12 +136,32 @@ sol2_core_pid_to_str (struct gdbarch *gdbarch, ptid_t ptid)\n     }\n \n   /* GDB didn't use to put a NT_PSTATUS note in Solaris cores.  If\n-     that's missing, then we're dealing with a fake PID corelow.c made\n-     up.  */\n+     that's missing, then we're dealing with a fake PID corelow.c made up.  */\n   inf = find_inferior_ptid (current_inferior ()->process_target (), ptid);\n   if (inf == NULL || inf->fake_pid_p)\n     return \"<core>\";\n \n   /* Not fake; print as usual.  */\n   return normal_pid_to_str (ptid);\n }\n+\n+/* To be called from GDB_OSABI_SOLARIS handlers.  */\n+\n+void\n+sol2_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n+{\n+  /* The Sun compilers (Sun ONE Studio, Forte Developer, Sun WorkShop, SunPRO)\n+     compiler puts out 0 instead of the address in N_SO stabs.  Starting with\n+     SunPRO 3.0, the compiler does this for N_FUN stabs too.  */\n+  set_gdbarch_sofun_address_maybe_missing (gdbarch, 1);\n+\n+  /* The Sun compilers also do \"globalization\"; see the comment in\n+     sol2_static_transform_name for more information.  */\n+  set_gdbarch_static_transform_name (gdbarch, sol2_static_transform_name);\n+\n+  /* Solaris uses SVR4-style shared libraries.  */\n+  set_gdbarch_skip_solib_resolver (gdbarch, sol2_skip_solib_resolver);\n+\n+  /* How to print LWP PTIDs from core files.  */\n+  set_gdbarch_core_pid_to_str (gdbarch, sol2_core_pid_to_str);\n+}"
    },
    {
      "sha": "ecace995a3422fc3488f19a898de52cc13c6ae69",
      "filename": "gdb/sol2-tdep.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d412e69677c6ca145ea8f5ff8c61a22952cb0855/gdb/sol2-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d412e69677c6ca145ea8f5ff8c61a22952cb0855/gdb/sol2-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sol2-tdep.h?ref=d412e69677c6ca145ea8f5ff8c61a22952cb0855",
      "patch": "@@ -22,8 +22,8 @@\n \n struct gdbarch;\n \n-CORE_ADDR sol2_skip_solib_resolver (struct gdbarch *, CORE_ADDR);\n+int sol2_sigtramp_p (struct frame_info *this_frame);\n \n-std::string sol2_core_pid_to_str (struct gdbarch *gdbarch, ptid_t ptid);\n+void sol2_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch);\n \n #endif /* sol2-tdep.h */"
    },
    {
      "sha": "dfd6e3454e5477d63c428ccfadfd939c41284d9e",
      "filename": "gdb/sparc-sol2-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 75,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d412e69677c6ca145ea8f5ff8c61a22952cb0855/gdb/sparc-sol2-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d412e69677c6ca145ea8f5ff8c61a22952cb0855/gdb/sparc-sol2-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc-sol2-tdep.c?ref=d412e69677c6ca145ea8f5ff8c61a22952cb0855",
      "patch": "@@ -99,30 +99,6 @@ static const struct regset sparc32_sol2_fpregset =\n   };\n \f\n \n-/* The Solaris signal trampolines reside in libc.  For normal signals,\n-   the function `sigacthandler' is used.  This signal trampoline will\n-   call the signal handler using the System V calling convention,\n-   where the third argument is a pointer to an instance of\n-   `ucontext_t', which has a member `uc_mcontext' that contains the\n-   saved registers.  Incidentally, the kernel passes the `ucontext_t'\n-   pointer as the third argument of the signal trampoline too, and\n-   `sigacthandler' simply passes it on.  However, if you link your\n-   program with \"-L/usr/ucblib -R/usr/ucblib -lucb\", the function\n-   `ucbsigvechandler' will be used, which invokes the using the BSD\n-   convention, where the third argument is a pointer to an instance of\n-   `struct sigcontext'.  It is the `ucbsigvechandler' function that\n-   converts the `ucontext_t' to a `sigcontext', and back.  Unless the\n-   signal handler modifies the `struct sigcontext' we can safely\n-   ignore this.  */\n-\n-int\n-sparc_sol2_pc_in_sigtramp (CORE_ADDR pc, const char *name)\n-{\n-  return (name && (strcmp (name, \"sigacthandler\") == 0\n-\t\t   || strcmp (name, \"ucbsigvechandler\") == 0\n-\t\t   || strcmp (name, \"__sighndlr\") == 0));\n-}\n-\n static struct sparc_frame_cache *\n sparc32_sol2_sigtramp_frame_cache (struct frame_info *this_frame,\n \t\t\t\t   void **this_cache)\n@@ -201,14 +177,7 @@ sparc32_sol2_sigtramp_frame_sniffer (const struct frame_unwind *self,\n \t\t\t\t     struct frame_info *this_frame,\n \t\t\t\t     void **this_cache)\n {\n-  CORE_ADDR pc = get_frame_pc (this_frame);\n-  const char *name;\n-\n-  find_pc_partial_function (pc, &name, NULL, NULL);\n-  if (sparc_sol2_pc_in_sigtramp (pc, name))\n-    return 1;\n-\n-  return 0;\n+  return sol2_sigtramp_p (this_frame);\n }\n \n static const struct frame_unwind sparc32_sol2_sigtramp_frame_unwind =\n@@ -221,36 +190,6 @@ static const struct frame_unwind sparc32_sol2_sigtramp_frame_unwind =\n   sparc32_sol2_sigtramp_frame_sniffer\n };\n \n-/* Unglobalize NAME.  */\n-\n-const char *\n-sparc_sol2_static_transform_name (const char *name)\n-{\n-  /* The Sun compilers (Sun ONE Studio, Forte Developer, Sun WorkShop,\n-     SunPRO) convert file static variables into global values, a\n-     process known as globalization.  In order to do this, the\n-     compiler will create a unique prefix and prepend it to each file\n-     static variable.  For static variables within a function, this\n-     globalization prefix is followed by the function name (nested\n-     static variables within a function are supposed to generate a\n-     warning message, and are left alone).  The procedure is\n-     documented in the Stabs Interface Manual, which is distributed\n-     with the compilers, although version 4.0 of the manual seems to\n-     be incorrect in some places, at least for SPARC.  The\n-     globalization prefix is encoded into an N_OPT stab, with the form\n-     \"G=<prefix>\".  The globalization prefix always seems to start\n-     with a dollar sign '$'; a dot '.' is used as a separator.  So we\n-     simply strip everything up until the last dot.  */\n-\n-  if (name[0] == '$')\n-    {\n-      const char *p = strrchr (name, '.');\n-      if (p)\n-        return p + 1;\n-    }\n-\n-  return name;\n-}\n \f\n \n void\n@@ -264,19 +203,10 @@ sparc32_sol2_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   tdep->fpregset = &sparc32_sol2_fpregset;\n   tdep->sizeof_fpregset = 400;\n \n-  /* The Sun compilers (Sun ONE Studio, Forte Developer, Sun WorkShop, SunPRO)\n-     compiler puts out 0 instead of the address in N_SO stabs.  Starting with\n-     SunPRO 3.0, the compiler does this for N_FUN stabs too.  */\n-  set_gdbarch_sofun_address_maybe_missing (gdbarch, 1);\n-\n-  /* The Sun compilers also do \"globalization\"; see the comment in\n-     sparc_sol2_static_transform_name for more information.  */\n-  set_gdbarch_static_transform_name\n-    (gdbarch, sparc_sol2_static_transform_name);\n+  sol2_init_abi (info, gdbarch);\n \n   /* Solaris has SVR4-style shared libraries...  */\n   set_gdbarch_skip_trampoline_code (gdbarch, find_solib_trampoline_target);\n-  set_gdbarch_skip_solib_resolver (gdbarch, sol2_skip_solib_resolver);\n   set_solib_svr4_fetch_link_map_offsets\n     (gdbarch, svr4_ilp32_fetch_link_map_offsets);\n \n@@ -288,9 +218,6 @@ sparc32_sol2_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   set_gdbarch_software_single_step (gdbarch, NULL);\n \n   frame_unwind_append_unwinder (gdbarch, &sparc32_sol2_sigtramp_frame_unwind);\n-\n-  /* How to print LWP PTIDs from core files.  */\n-  set_gdbarch_core_pid_to_str (gdbarch, sol2_core_pid_to_str);\n }\n \n void _initialize_sparc_sol2_tdep ();"
    },
    {
      "sha": "59eaf29be4db26b40edf5007009c98acafad5b94",
      "filename": "gdb/sparc-tdep.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d412e69677c6ca145ea8f5ff8c61a22952cb0855/gdb/sparc-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d412e69677c6ca145ea8f5ff8c61a22952cb0855/gdb/sparc-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc-tdep.h?ref=d412e69677c6ca145ea8f5ff8c61a22952cb0855",
      "patch": "@@ -245,10 +245,6 @@ extern int sparc_is_annulled_branch_insn (CORE_ADDR pc);\n extern const struct sparc_gregmap sparc32_sol2_gregmap;\n extern const struct sparc_fpregmap sparc32_sol2_fpregmap;\n \n-extern int sparc_sol2_pc_in_sigtramp (CORE_ADDR pc, const char *name);\n-\n-extern const char *sparc_sol2_static_transform_name (const char *name);\n-\n extern void sparc32_sol2_init_abi (struct gdbarch_info info,\n \t\t\t\t   struct gdbarch *gdbarch);\n "
    },
    {
      "sha": "31ee8739e6f8569cb13a1e60cd81d69a56327786",
      "filename": "gdb/sparc64-sol2-tdep.c",
      "status": "modified",
      "additions": 3,
      "deletions": 21,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d412e69677c6ca145ea8f5ff8c61a22952cb0855/gdb/sparc64-sol2-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d412e69677c6ca145ea8f5ff8c61a22952cb0855/gdb/sparc64-sol2-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/sparc64-sol2-tdep.c?ref=d412e69677c6ca145ea8f5ff8c61a22952cb0855",
      "patch": "@@ -180,15 +180,9 @@ sparc64_sol2_sigtramp_frame_sniffer (const struct frame_unwind *self,\n \t\t\t\t     struct frame_info *this_frame,\n \t\t\t\t     void **this_cache)\n {\n-  CORE_ADDR pc = get_frame_pc (this_frame);\n-  const char *name;\n-\n-  find_pc_partial_function (pc, &name, NULL, NULL);\n-  if (sparc_sol2_pc_in_sigtramp (pc, name))\n-    return 1;\n-\n-  return 0;\n+  return sol2_sigtramp_p (this_frame);\n }\n+\n static const struct frame_unwind sparc64_sol2_sigtramp_frame_unwind =\n {\n   SIGTRAMP_FRAME,\n@@ -216,19 +210,10 @@ sparc64_sol2_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n \n   sparc64_init_abi (info, gdbarch);\n \n-  /* The Sun compilers (Sun ONE Studio, Forte Developer, Sun WorkShop, SunPRO)\n-     compiler puts out 0 instead of the address in N_SO stabs.  Starting with\n-     SunPRO 3.0, the compiler does this for N_FUN stabs too.  */\n-  set_gdbarch_sofun_address_maybe_missing (gdbarch, 1);\n-\n-  /* The Sun compilers also do \"globalization\"; see the comment in\n-     sparc_sol2_static_transform_name for more information.  */\n-  set_gdbarch_static_transform_name\n-    (gdbarch, sparc_sol2_static_transform_name);\n+  sol2_init_abi (info, gdbarch);\n \n   /* Solaris has SVR4-style shared libraries...  */\n   set_gdbarch_skip_trampoline_code (gdbarch, find_solib_trampoline_target);\n-  set_gdbarch_skip_solib_resolver (gdbarch, sol2_skip_solib_resolver);\n   set_solib_svr4_fetch_link_map_offsets\n     (gdbarch, svr4_lp64_fetch_link_map_offsets);\n \n@@ -238,9 +223,6 @@ sparc64_sol2_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n \n   /* Solaris has kernel-assisted single-stepping support.  */\n   set_gdbarch_software_single_step (gdbarch, NULL);\n-\n-  /* How to print LWP PTIDs from core files.  */\n-  set_gdbarch_core_pid_to_str (gdbarch, sol2_core_pid_to_str);\n }\n \n void _initialize_sparc64_sol2_tdep ();"
    }
  ]
}