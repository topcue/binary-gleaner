{
  "sha": "1a9f72a7a8f445b8d665eb36b053a18e758e63e6",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWE5ZjcyYTdhOGY0NDViOGQ2NjVlYjM2YjA1M2ExOGU3NThlNjNlNg==",
  "commit": {
    "author": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2020-08-05T11:55:07Z"
    },
    "committer": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2020-08-06T10:19:36Z"
    },
    "message": "MSP430: ld: Update output section tail when shuffling \".either\" sections\n\nThe MSP430 linker shuffles input sections with names beginning with\n\".either\" between the upper and lower memory regions, to try to avoid\none region overflowing when there is space in the other region.\n\nHowever, when an \".either\" input section attached to the tail of an\noutput section was moved to a different output section in the other\nregion, that tail wasn't being updated to the new section at the end\nof the original output section.\n\nThis caused a bug where a shuffled section could end up in the\nmiddle of another section in the output executable, resulting in\ncorrupted code or data.\n\nWhen changing the output section of an input section attached to the\ntail of its output section, that tail is now updated to point to\nthe new input section at the end of the section list.\n\nld/ChangeLog:\n\n2020-08-06  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* emultempl/msp430.em (change_output_section): Update the tail\n\tof the output section statement list when moving the original\n\ttail to a different output section.\n\t(eval_upper_either_sections): Don't move sections from the upper\n\tregion to the lower region unless the upper region is\n\toverflowing.",
    "tree": {
      "sha": "550308f9d1d9aac07f047803a31470b844c5a9b5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/550308f9d1d9aac07f047803a31470b844c5a9b5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1a9f72a7a8f445b8d665eb36b053a18e758e63e6",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a9f72a7a8f445b8d665eb36b053a18e758e63e6",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1a9f72a7a8f445b8d665eb36b053a18e758e63e6",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a9f72a7a8f445b8d665eb36b053a18e758e63e6/comments",
  "author": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b5582ab72f025c54d4a6e8f459f78a8c92e6df29",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b5582ab72f025c54d4a6e8f459f78a8c92e6df29",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b5582ab72f025c54d4a6e8f459f78a8c92e6df29"
    }
  ],
  "stats": {
    "total": 41,
    "additions": 31,
    "deletions": 10
  },
  "files": [
    {
      "sha": "b413418471441bf2dff6a988264cc2f93bfd175d",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a9f72a7a8f445b8d665eb36b053a18e758e63e6/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a9f72a7a8f445b8d665eb36b053a18e758e63e6/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=1a9f72a7a8f445b8d665eb36b053a18e758e63e6",
      "patch": "@@ -1,3 +1,12 @@\n+2020-08-06  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* emultempl/msp430.em (change_output_section): Update the tail\n+\tof the output section statement list when moving the original\n+\ttail to a different output section.\n+\t(eval_upper_either_sections): Don't move sections from the upper\n+\tregion to the lower region unless the upper region is\n+\toverflowing.\n+\n 2020-08-03  Alan Modra  <amodra@gmail.com>\n \n \t* ldlex.l (yy_create_string_buffer): Use xmalloc rather than malloc."
    },
    {
      "sha": "2a840c1e2bfcbe742994adcbb38d446b8800ebd4",
      "filename": "ld/emultempl/msp430.em",
      "status": "modified",
      "additions": 22,
      "deletions": 10,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a9f72a7a8f445b8d665eb36b053a18e758e63e6/ld/emultempl/msp430.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a9f72a7a8f445b8d665eb36b053a18e758e63e6/ld/emultempl/msp430.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/msp430.em?ref=1a9f72a7a8f445b8d665eb36b053a18e758e63e6",
      "patch": "@@ -339,9 +339,10 @@ fi\n fragment <<EOF\n \n static bfd_boolean\n-change_output_section (lang_statement_union_type ** head,\n+change_output_section (lang_statement_union_type **head,\n \t\t       asection *s,\n-\t\t       lang_output_section_statement_type * new_output_section)\n+\t\t       lang_output_section_statement_type *new_os,\n+\t\t       lang_output_section_statement_type *old_os)\n {\n   asection *is;\n   lang_statement_union_type * prev = NULL;\n@@ -356,20 +357,27 @@ change_output_section (lang_statement_union_type ** head,\n \t  is = curr->input_section.section;\n \t  if (is == s)\n \t    {\n+\t      lang_statement_list_type *old_list\n+\t\t= (lang_statement_list_type *) &old_os->children;\n \t      s->output_section = NULL;\n-\t      lang_add_section (& (new_output_section->children), s, NULL,\n-\t\t\t\tnew_output_section);\n+\t      lang_add_section (&new_os->children, s, NULL, new_os);\n+\n \t      /* Remove the section from the old output section.  */\n \t      if (prev == NULL)\n \t\t*head = curr->header.next;\n \t      else\n \t\tprev->header.next = curr->header.next;\n+\t      /* If the input section we just moved is the tail of the old\n+\t\t output section, then we also need to adjust that tail.  */\n+\t      if (old_list->tail == (lang_statement_union_type **) curr)\n+\t\told_list->tail = (lang_statement_union_type **) prev;\n+\n \t      return TRUE;\n \t    }\n \t  break;\n \tcase lang_wild_statement_enum:\n \t  if (change_output_section (&(curr->wild_statement.children.head),\n-\t\t\t\t     s, new_output_section))\n+\t\t\t\t     s, new_os, old_os))\n \t    return TRUE;\n \t  break;\n \tdefault:\n@@ -606,11 +614,15 @@ eval_upper_either_sections (bfd *abfd ATTRIBUTE_UNUSED,\n       upper_size = &upper_size_ram;\n     }\n \n-  /* Move sections in the upper region that would fit in the lower\n-     region to the lower region.  */\n-  if (*lower_size + s->size < lower->region->length)\n+  /* If the upper region is overflowing, try moving sections to the lower\n+     region.\n+     Note that there isn't any general benefit to using lower memory over upper\n+     memory, so we only move sections around with the goal of making the program\n+     fit.  */\n+  if (*upper_size > upper->region->length\n+      && *lower_size + s->size < lower->region->length)\n     {\n-      if (change_output_section (&(upper->children.head), s, lower))\n+      if (change_output_section (&(upper->children.head), s, lower, upper))\n \t{\n \t  *upper_size -= s->size;\n \t  *lower_size += s->size;\n@@ -700,7 +712,7 @@ eval_lower_either_sections (bfd *abfd ATTRIBUTE_UNUSED,\n     }\n   /* Move sections that cause the lower region to overflow to the upper region.  */\n   if (*lower_size + s->size > output_sec->region->length)\n-    change_output_section (&(output_sec->children.head), s, upper);\n+    change_output_section (&(output_sec->children.head), s, upper, output_sec);\n   else\n     *lower_size += s->size;\n  end:"
    }
  ]
}