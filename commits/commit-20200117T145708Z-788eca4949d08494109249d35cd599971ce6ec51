{
  "sha": "788eca4949d08494109249d35cd599971ce6ec51",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Nzg4ZWNhNDk0OWQwODQ5NDEwOTI0OWQzNWNkNTk5OTcxY2U2ZWM1MQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-01-17T14:57:07Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-01-17T14:57:08Z"
    },
    "message": "gdb: remove use of iterate_over_inferiors in mi/mi-interp.c\n\nReplace it with a range-based for.  I've updated the comment in\nmi_interp::init, which was a bit stale.\n\ngdb/ChangeLog:\n\n\t* mi/mi-interp.c (report_initial_inferior): Remove.\n\t(mi_interp::init): Use range-based for to iterate over inferiors.",
    "tree": {
      "sha": "3c4d9c4a10316577278301145062f906922c5069",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3c4d9c4a10316577278301145062f906922c5069"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/788eca4949d08494109249d35cd599971ce6ec51",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/788eca4949d08494109249d35cd599971ce6ec51",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/788eca4949d08494109249d35cd599971ce6ec51",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/788eca4949d08494109249d35cd599971ce6ec51/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d9bc85b65b3daab0c3579be0efc3b33c1ef24620",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d9bc85b65b3daab0c3579be0efc3b33c1ef24620",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d9bc85b65b3daab0c3579be0efc3b33c1ef24620"
    }
  ],
  "stats": {
    "total": 54,
    "additions": 26,
    "deletions": 28
  },
  "files": [
    {
      "sha": "c68bc990d042e6c84610b7abd91cc0196d9d6f7a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/788eca4949d08494109249d35cd599971ce6ec51/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/788eca4949d08494109249d35cd599971ce6ec51/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=788eca4949d08494109249d35cd599971ce6ec51",
      "patch": "@@ -1,3 +1,8 @@\n+2020-01-17  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* mi/mi-interp.c (report_initial_inferior): Remove.\n+\t(mi_interp::init): Use range-based for to iterate over inferiors.\n+\n 2020-01-17  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* python/py-inferior.c (build_inferior_list): Remove."
    },
    {
      "sha": "e77093cfa2820064c6f3fb6b7ce61938cbd9269a",
      "filename": "gdb/mi/mi-interp.c",
      "status": "modified",
      "additions": 21,
      "deletions": 28,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/788eca4949d08494109249d35cd599971ce6ec51/gdb/mi/mi-interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/788eca4949d08494109249d35cd599971ce6ec51/gdb/mi/mi-interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-interp.c?ref=788eca4949d08494109249d35cd599971ce6ec51",
      "patch": "@@ -91,8 +91,6 @@ static void mi_memory_changed (struct inferior *inf, CORE_ADDR memaddr,\n \t\t\t       ssize_t len, const bfd_byte *myaddr);\n static void mi_on_sync_execution_done (void);\n \n-static int report_initial_inferior (struct inferior *inf, void *closure);\n-\n /* Display the MI prompt.  */\n \n static void\n@@ -137,12 +135,27 @@ mi_interp::init (bool top_level)\n \n   if (top_level)\n     {\n-      /* The initial inferior is created before this function is\n-\t called, so we need to report it explicitly.  Use iteration in\n-\t case future version of GDB creates more than one inferior\n-\t up-front.  */\n-      iterate_over_inferiors (report_initial_inferior, mi);\n-    }\n+      /* The initial inferior is created before this function is called, so we\n+\t need to report it explicitly when initializing the top-level MI\n+\t interpreter.\n+\n+\t This is also called when additional MI interpreters are added (using\n+\t the new-ui command), when multiple inferiors possibly exist, so we need\n+\t to use iteration to report all the inferiors.  mi_inferior_added can't\n+\t be used, because it would print the event on all the other MI UIs.  */\n+\n+      for (inferior *inf : all_inferiors ())\n+\t{\n+\t  target_terminal::scoped_restore_terminal_state term_state;\n+\t  target_terminal::ours_for_output ();\n+\n+\t  fprintf_unfiltered (mi->event_channel,\n+\t\t\t      \"thread-group-added,id=\\\"i%d\\\"\",\n+\t\t\t      inf->num);\n+\n+\t  gdb_flush (mi->event_channel);\n+\t}\n+  }\n }\n \n void\n@@ -1253,26 +1266,6 @@ mi_user_selected_context_changed (user_selected_what selection)\n     }\n }\n \n-static int\n-report_initial_inferior (struct inferior *inf, void *closure)\n-{\n-  /* This function is called from mi_interpreter_init, and since\n-     mi_inferior_added assumes that inferior is fully initialized\n-     and top_level_interpreter_data is set, we cannot call\n-     it here.  */\n-  struct mi_interp *mi = (struct mi_interp *) closure;\n-\n-  target_terminal::scoped_restore_terminal_state term_state;\n-  target_terminal::ours_for_output ();\n-\n-  fprintf_unfiltered (mi->event_channel,\n-\t\t      \"thread-group-added,id=\\\"i%d\\\"\",\n-\t\t      inf->num);\n-  gdb_flush (mi->event_channel);\n-\n-  return 0;\n-}\n-\n ui_out *\n mi_interp::interp_ui_out ()\n {"
    }
  ]
}