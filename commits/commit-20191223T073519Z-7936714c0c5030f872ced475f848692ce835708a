{
  "sha": "7936714c0c5030f872ced475f848692ce835708a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzkzNjcxNGMwYzUwMzBmODcyY2VkNDc1Zjg0ODY5MmNlODM1NzA4YQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-23T07:35:19Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-23T07:35:19Z"
    },
    "message": "ubsan: score: left shift of 2 by 31 places cannot be represented in type 'int'\n\n\t* score-dis.c (print_insn_score32): Avoid signed overflow.\n\t(print_insn_score48): Likewise.  Don't cast to int when printing\n\thex values.",
    "tree": {
      "sha": "15b807e01301ce46dfa1ada647270261cbc187a4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/15b807e01301ce46dfa1ada647270261cbc187a4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7936714c0c5030f872ced475f848692ce835708a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7936714c0c5030f872ced475f848692ce835708a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7936714c0c5030f872ced475f848692ce835708a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7936714c0c5030f872ced475f848692ce835708a/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3e1056a1a6336f289d3f0def8f6a3632c8a75393",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3e1056a1a6336f289d3f0def8f6a3632c8a75393",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3e1056a1a6336f289d3f0def8f6a3632c8a75393"
    }
  ],
  "stats": {
    "total": 53,
    "additions": 28,
    "deletions": 25
  },
  "files": [
    {
      "sha": "a374397b8b4e3f31dcaba7a44fccd01f258ff7d6",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7936714c0c5030f872ced475f848692ce835708a/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7936714c0c5030f872ced475f848692ce835708a/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=7936714c0c5030f872ced475f848692ce835708a",
      "patch": "@@ -1,3 +1,9 @@\n+2019-12-23  Alan Modra  <amodra@gmail.com>\n+\n+\t* score-dis.c (print_insn_score32): Avoid signed overflow.\n+\t(print_insn_score48): Likewise.  Don't cast to int when printing\n+\thex values.\n+\n 2019-12-23  Alan Modra  <amodra@gmail.com>\n \n \t* iq2000-ibld.c: Regenerate."
    },
    {
      "sha": "e760b92f1f3f1adb00b41d77da27920868915427",
      "filename": "opcodes/score-dis.c",
      "status": "modified",
      "additions": 22,
      "deletions": 25,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7936714c0c5030f872ced475f848692ce835708a/opcodes/score-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7936714c0c5030f872ced475f848692ce835708a/opcodes/score-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/score-dis.c?ref=7936714c0c5030f872ced475f848692ce835708a",
      "patch": "@@ -568,7 +568,7 @@ print_insn_score48 (struct disassemble_info *info, bfd_vma given)\n                                   long reg;\n \n                                   reg = given >> bitstart;\n-                                  reg &= (2 << (bitend - bitstart)) - 1;\n+                                  reg &= (2u << (bitend - bitstart)) - 1;\n \n                                   func (stream, \"%s\", score_regnames[reg]);\n                                 }\n@@ -578,7 +578,7 @@ print_insn_score48 (struct disassemble_info *info, bfd_vma given)\n                                   long reg;\n \n                                   reg = given >> bitstart;\n-                                  reg &= (2 << (bitend - bitstart)) - 1;\n+                                  reg &= (2u << (bitend - bitstart)) - 1;\n \n                                   func (stream, \"%ld\", reg);\n                                 }\n@@ -587,9 +587,9 @@ print_insn_score48 (struct disassemble_info *info, bfd_vma given)\n                                 {\n                                   long reg;\n                                   reg = given >> bitstart;\n-                                  reg &= (2 << (bitend - bitstart)) - 1;\n-                                  reg = ((reg ^ (1 << (bitend - bitstart))) -\n-                                        (1 << (bitend - bitstart)));\n+                                  reg &= (2u << (bitend - bitstart)) - 1;\n+                                  reg = ((reg ^ (1u << (bitend - bitstart)))\n+\t\t\t\t\t - (1u << (bitend - bitstart)));\n                                   /* Fix bug: s3_testsuite 64-bit.\n                                      Remove high 32 bits.  */\n                                   reg = (int) reg;\n@@ -610,10 +610,7 @@ print_insn_score48 (struct disassemble_info *info, bfd_vma given)\n                                   long reg;\n \n                                   reg = given >> bitstart;\n-                                  reg &= (2 << (bitend - bitstart)) - 1;\n-                                  /* Fix bug: s3_testsuite 64-bit.\n-                                     Remove high 32 bits.  */\n-                                  reg = (int) reg;\n+                                  reg &= (2u << (bitend - bitstart)) - 1;\n \n                                   func (stream, \"%lx\", reg);\n                                 }\n@@ -622,8 +619,8 @@ print_insn_score48 (struct disassemble_info *info, bfd_vma given)\n                                 {\n                                     long reg;\n                                     reg = given >> bitstart;\n-                                    reg &= (2 << (bitend - bitstart)) - 1;\n-                                    reg <<=2;\n+                                    reg &= (2u << (bitend - bitstart)) - 1;\n+                                    reg <<= 2;\n                                     func (stream, \"%lx\", reg);\n                                 }\n                                 break;\n@@ -635,12 +632,12 @@ print_insn_score48 (struct disassemble_info *info, bfd_vma given)\n \n                           case '`':\n                             c++;\n-                            if ((given & (1 << bitstart)) == 0)\n+                            if ((given & (1u << bitstart)) == 0)\n                               func (stream, \"%c\", *c);\n                             break;\n                           case '\\'':\n                             c++;\n-                            if ((given & (1 << bitstart)) != 0)\n+                            if ((given & (1u << bitstart)) != 0)\n                               func (stream, \"%c\", *c);\n                             break;\n                           default:\n@@ -738,7 +735,7 @@ print_insn_score32 (bfd_vma pc, struct disassemble_info *info, long given)\n                                int bitstart = 10;\n                                int bitend = 14;\n                                reg = given >> bitstart;\n-                               reg &= (2 << (bitend - bitstart)) - 1;\n+                               reg &= (2u << (bitend - bitstart)) - 1;\n                                /* Sign-extend a 20-bit number.  */\n                                int disp = (given&1)<<1 |((given>>7)&7)<<2 |((given>>20)&0x1f)<<5;\n                                int target = (pc + SEXT10 (disp));\n@@ -790,7 +787,7 @@ print_insn_score32 (bfd_vma pc, struct disassemble_info *info, long given)\n                                   long reg;\n \n                                   reg = given >> bitstart;\n-                                  reg &= (2 << (bitend - bitstart)) - 1;\n+                                  reg &= (2u << (bitend - bitstart)) - 1;\n \n                                   func (stream, \"%s\", score_regnames[reg]);\n                                 }\n@@ -800,7 +797,7 @@ print_insn_score32 (bfd_vma pc, struct disassemble_info *info, long given)\n                                   long reg;\n \n                                   reg = given >> bitstart;\n-                                  reg &= (2 << (bitend - bitstart)) - 1;\n+                                  reg &= (2u << (bitend - bitstart)) - 1;\n \n                                   func (stream, \"%ld\", reg);\n                                 }\n@@ -810,9 +807,9 @@ print_insn_score32 (bfd_vma pc, struct disassemble_info *info, long given)\n                                   long reg;\n \n                                   reg = given >> bitstart;\n-                                  reg &= (2 << (bitend - bitstart)) - 1;\n-                                  reg = ((reg ^ (1 << (bitend - bitstart))) -\n-                                        (1 << (bitend - bitstart)));\n+                                  reg &= (2u << (bitend - bitstart)) - 1;\n+                                  reg = ((reg ^ (1u << (bitend - bitstart)))\n+\t\t\t\t\t - (1u << (bitend - bitstart)));\n \n                                   if (((given & insn->mask) == 0x0c00000a)      /* ldc1  */\n                                       || ((given & insn->mask) == 0x0c000012)   /* ldc2  */\n@@ -830,7 +827,7 @@ print_insn_score32 (bfd_vma pc, struct disassemble_info *info, long given)\n                                   long reg;\n \n                                   reg = given >> bitstart;\n-                                  reg &= (2 << (bitend - bitstart)) - 1;\n+                                  reg &= (2u << (bitend - bitstart)) - 1;\n \n                                   func (stream, \"%lx\", reg);\n                                 }\n@@ -842,12 +839,12 @@ print_insn_score32 (bfd_vma pc, struct disassemble_info *info, long given)\n \n                           case '`':\n                             c++;\n-                            if ((given & (1 << bitstart)) == 0)\n+                            if ((given & (1u << bitstart)) == 0)\n                               func (stream, \"%c\", *c);\n                             break;\n                           case '\\'':\n                             c++;\n-                            if ((given & (1 << bitstart)) != 0)\n+                            if ((given & (1u << bitstart)) != 0)\n                               func (stream, \"%c\", *c);\n                             break;\n                           default:\n@@ -952,7 +949,7 @@ print_insn_score16 (bfd_vma pc, struct disassemble_info *info, long given)\n                               if (!bitend)\n                                 abort ();\n                               reg = given >> bitstart;\n-                              reg &= (2 << (bitend - bitstart)) - 1;\n+                              reg &= (2u << (bitend - bitstart)) - 1;\n \n                               switch (*c)\n                                 {\n@@ -995,7 +992,7 @@ print_insn_score16 (bfd_vma pc, struct disassemble_info *info, long given)\n                                     }\n                                   break;\n                                 case 'i':\n-                                  reg = ((reg ^ (1 << bitend)) - (1 << bitend));\n+                                  reg = (reg ^ (1u << bitend)) - (1u << bitend);\n                                   func (stream, \"%ld\", reg);\n                                   break;\n                                 default:\n@@ -1006,7 +1003,7 @@ print_insn_score16 (bfd_vma pc, struct disassemble_info *info, long given)\n \n                           case '\\'':\n                             c++;\n-                            if ((given & (1 << bitstart)) != 0)\n+                            if ((given & (1u << bitstart)) != 0)\n                               func (stream, \"%c\", *c);\n                             break;\n                           default:"
    }
  ]
}