{
  "sha": "ececd218c5254902db3301d700546f6702112c85",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZWNlY2QyMThjNTI1NDkwMmRiMzMwMWQ3MDA1NDZmNjcwMjExMmM4NQ==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-09-24T21:43:18Z"
    },
    "committer": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-09-26T16:36:40Z"
    },
    "message": "Convert symtab.h function signatures to use bool instead of int\n\ngdb/ChangeLog:\n\n2019-09-26  Christian Biesinger  <cbiesinger@google.com>\n\n\t* blockframe.c (find_pc_partial_function): Change return type to bool.\n\t* elfread.c (elf_gnu_ifunc_resolve_name): Likewise.\n\t* minsyms.c (in_gnu_ifunc_stub): Likewise.\n\t(stub_gnu_ifunc_resolve_name): Likewise.\n\t* symtab.c (compare_filenames_for_search): Likewise.\n\t(compare_glob_filenames_for_search): Likewise.\n\t(matching_obj_sections): Likewise.\n\t(symbol_matches_domain): Likewise.\n\t(find_line_symtab): Change out param EXACT_MATCH to bool *.\n\t(find_line_pc): Change return type to bool.\n\t(find_line_pc_range): Likewise.\n\t(producer_is_realview): Likewise.\n\t* symtab.h (symbol_matches_domain): Likewise.\n\t(find_pc_partial_function): Likewise.\n\t(find_pc_line_pc_range): Likewise.\n\t(in_gnu_ifunc_stub): Likewise.\n\t(struct gnu_ifunc_fns) <gnu_ifunc_resolve_name>: Likewise.\n\t(find_line_pc): Likewise.\n\t(find_line_pc_range): Likewise.\n\t(matching_obj_sections): Likewise.\n\t(find_line_symtab): Change out parameter to bool.\n\t(producer_is_realview): Change return type to bool.\n\t(compare_filenames_for_search): Likewise.\n\t(compare_glob_filenames_for_search): Likewise.",
    "tree": {
      "sha": "4f99db1e48244cf2e3d86b867a90314dcf6d7777",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4f99db1e48244cf2e3d86b867a90314dcf6d7777"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ececd218c5254902db3301d700546f6702112c85",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ececd218c5254902db3301d700546f6702112c85",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ececd218c5254902db3301d700546f6702112c85",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ececd218c5254902db3301d700546f6702112c85/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "27a900b8657d8e20a24026bb3485a5f6c9729615",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/27a900b8657d8e20a24026bb3485a5f6c9729615",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/27a900b8657d8e20a24026bb3485a5f6c9729615"
    }
  ],
  "stats": {
    "total": 163,
    "additions": 95,
    "deletions": 68
  },
  "files": [
    {
      "sha": "f323cf6b14d692b3465084efb2d8497e1a0ea4f0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ececd218c5254902db3301d700546f6702112c85/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ececd218c5254902db3301d700546f6702112c85/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ececd218c5254902db3301d700546f6702112c85",
      "patch": "@@ -1,3 +1,30 @@\n+2019-09-26  Christian Biesinger  <cbiesinger@google.com>\n+\n+\t* blockframe.c (find_pc_partial_function): Change return type to bool.\n+\t* elfread.c (elf_gnu_ifunc_resolve_name): Likewise.\n+\t* minsyms.c (in_gnu_ifunc_stub): Likewise.\n+\t(stub_gnu_ifunc_resolve_name): Likewise.\n+\t* symtab.c (compare_filenames_for_search): Likewise.\n+\t(compare_glob_filenames_for_search): Likewise.\n+\t(matching_obj_sections): Likewise.\n+\t(symbol_matches_domain): Likewise.\n+\t(find_line_symtab): Change out param EXACT_MATCH to bool *.\n+\t(find_line_pc): Change return type to bool.\n+\t(find_line_pc_range): Likewise.\n+\t(producer_is_realview): Likewise.\n+\t* symtab.h (symbol_matches_domain): Likewise.\n+\t(find_pc_partial_function): Likewise.\n+\t(find_pc_line_pc_range): Likewise.\n+\t(in_gnu_ifunc_stub): Likewise.\n+\t(struct gnu_ifunc_fns) <gnu_ifunc_resolve_name>: Likewise.\n+\t(find_line_pc): Likewise.\n+\t(find_line_pc_range): Likewise.\n+\t(matching_obj_sections): Likewise.\n+\t(find_line_symtab): Change out parameter to bool.\n+\t(producer_is_realview): Change return type to bool.\n+\t(compare_filenames_for_search): Likewise.\n+\t(compare_glob_filenames_for_search): Likewise.\n+\n 2019-09-26  Tom Tromey  <tom@tromey.com>\n \n \t* Makefile.in (COMMON_SFILES): Remove gdb_usleep.c."
    },
    {
      "sha": "a3f82ef5a9c76cc36ed810a0af2f9284d89a0a69",
      "filename": "gdb/blockframe.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ececd218c5254902db3301d700546f6702112c85/gdb/blockframe.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ececd218c5254902db3301d700546f6702112c85/gdb/blockframe.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/blockframe.c?ref=ececd218c5254902db3301d700546f6702112c85",
      "patch": "@@ -209,7 +209,7 @@ clear_pc_function_cache (void)\n \n /* See symtab.h.  */\n \n-int\n+bool\n find_pc_partial_function (CORE_ADDR pc, const char **name, CORE_ADDR *address,\n \t\t\t  CORE_ADDR *endaddr, const struct block **block)\n {\n@@ -333,7 +333,7 @@ find_pc_partial_function (CORE_ADDR pc, const char **name, CORE_ADDR *address,\n \t*endaddr = 0;\n       if (block != nullptr)\n \t*block = nullptr;\n-      return 0;\n+      return false;\n     }\n \n   cache_pc_function_low = BMSYMBOL_VALUE_ADDRESS (msymbol);\n@@ -374,7 +374,7 @@ find_pc_partial_function (CORE_ADDR pc, const char **name, CORE_ADDR *address,\n   if (block != nullptr)\n     *block = cache_pc_function_block;\n \n-  return 1;\n+  return true;\n }\n \n /* See symtab.h.  */"
    },
    {
      "sha": "a3d17e54a2f1eb3482d08f9e88a3e8beed37630b",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ececd218c5254902db3301d700546f6702112c85/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ececd218c5254902db3301d700546f6702112c85/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=ececd218c5254902db3301d700546f6702112c85",
      "patch": "@@ -850,21 +850,21 @@ elf_gnu_ifunc_resolve_by_got (const char *name, CORE_ADDR *addr_p)\n \n /* Try to find the target resolved function entry address of a STT_GNU_IFUNC\n    function NAME.  If the address is found it is stored to *ADDR_P (if ADDR_P\n-   is not NULL) and the function returns 1.  It returns 0 otherwise.\n+   is not NULL) and the function returns true.  It returns false otherwise.\n \n    Both the elf_objfile_gnu_ifunc_cache_data hash table and\n    SYMBOL_GOT_PLT_SUFFIX locations are searched by this function.  */\n \n-static int\n+static bool\n elf_gnu_ifunc_resolve_name (const char *name, CORE_ADDR *addr_p)\n {\n   if (elf_gnu_ifunc_resolve_by_cache (name, addr_p))\n-    return 1;\n+    return true;\n \n   if (elf_gnu_ifunc_resolve_by_got (name, addr_p))\n-    return 1;\n+    return true;\n \n-  return 0;\n+  return false;\n }\n \n /* Call STT_GNU_IFUNC - a function returning addresss of a real function to"
    },
    {
      "sha": "f06de4d88eb2e6cb64dd3b42a8e03d68e7497459",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ececd218c5254902db3301d700546f6702112c85/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ececd218c5254902db3301d700546f6702112c85/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=ececd218c5254902db3301d700546f6702112c85",
      "patch": "@@ -895,7 +895,7 @@ lookup_minimal_symbol_by_pc (CORE_ADDR pc)\n \n /* Return non-zero iff PC is in an STT_GNU_IFUNC function resolver.  */\n \n-int\n+bool\n in_gnu_ifunc_stub (CORE_ADDR pc)\n {\n   bound_minimal_symbol msymbol\n@@ -916,7 +916,7 @@ stub_gnu_ifunc_resolve_addr (struct gdbarch *gdbarch, CORE_ADDR pc)\n \n /* See elf_gnu_ifunc_resolve_name for its real implementation.  */\n \n-static int\n+static bool\n stub_gnu_ifunc_resolve_name (const char *function_name,\n \t\t\t     CORE_ADDR *function_address_p)\n {"
    },
    {
      "sha": "6ea9fc6971e0f0228f0934321aae81aa75a44e0e",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 37,
      "deletions": 37,
      "changes": 74,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ececd218c5254902db3301d700546f6702112c85/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ececd218c5254902db3301d700546f6702112c85/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=ececd218c5254902db3301d700546f6702112c85",
      "patch": "@@ -355,18 +355,18 @@ minimal_symbol::text_p () const\n    describes what we advertise).  Returns true if they match, false\n    otherwise.  */\n \n-int\n+bool\n compare_filenames_for_search (const char *filename, const char *search_name)\n {\n   int len = strlen (filename);\n   size_t search_len = strlen (search_name);\n \n   if (len < search_len)\n-    return 0;\n+    return false;\n \n   /* The tail of FILENAME must match.  */\n   if (FILENAME_CMP (filename + len - search_len, search_name) != 0)\n-    return 0;\n+    return false;\n \n   /* Either the names must completely match, or the character\n      preceding the trailing SEARCH_NAME segment of FILENAME must be a\n@@ -393,7 +393,7 @@ compare_filenames_for_search (const char *filename, const char *search_name)\n    compare_filenames_for_search, but it's the opposite of the order of\n    arguments to gdb_filename_fnmatch.  */\n \n-int\n+bool\n compare_glob_filenames_for_search (const char *filename,\n \t\t\t\t   const char *search_name)\n {\n@@ -403,7 +403,7 @@ compare_glob_filenames_for_search (const char *filename,\n   int search_path_elements = count_path_elements (search_name);\n \n   if (search_path_elements > file_path_elements)\n-    return 0;\n+    return false;\n \n   if (IS_ABSOLUTE_PATH (search_name))\n     {\n@@ -1002,11 +1002,11 @@ symbol_matches_search_name (const struct general_symbol_info *gsymbol,\n \n \f\n \n-/* Return 1 if the two sections are the same, or if they could\n+/* Return true if the two sections are the same, or if they could\n    plausibly be copies of each other, one in an original object\n    file and another in a separated debug file.  */\n \n-int\n+bool\n matching_obj_sections (struct obj_section *obj_first,\n \t\t       struct obj_section *obj_second)\n {\n@@ -1015,36 +1015,36 @@ matching_obj_sections (struct obj_section *obj_first,\n \n   /* If they're the same section, then they match.  */\n   if (first == second)\n-    return 1;\n+    return true;\n \n   /* If either is NULL, give up.  */\n   if (first == NULL || second == NULL)\n-    return 0;\n+    return false;\n \n   /* This doesn't apply to absolute symbols.  */\n   if (first->owner == NULL || second->owner == NULL)\n-    return 0;\n+    return false;\n \n   /* If they're in the same object file, they must be different sections.  */\n   if (first->owner == second->owner)\n-    return 0;\n+    return false;\n \n   /* Check whether the two sections are potentially corresponding.  They must\n      have the same size, address, and name.  We can't compare section indexes,\n      which would be more reliable, because some sections may have been\n      stripped.  */\n   if (bfd_section_size (first) != bfd_section_size (second))\n-    return 0;\n+    return false;\n \n   /* In-memory addresses may start at a different offset, relativize them.  */\n   if (bfd_section_vma (first) - bfd_get_start_address (first->owner)\n       != bfd_section_vma (second) - bfd_get_start_address (second->owner))\n-    return 0;\n+    return false;\n \n   if (bfd_section_name (first) == NULL\n       || bfd_section_name (second) == NULL\n       || strcmp (bfd_section_name (first), bfd_section_name (second)) != 0)\n-    return 0;\n+    return false;\n \n   /* Otherwise check that they are in corresponding objfiles.  */\n \n@@ -1059,12 +1059,12 @@ matching_obj_sections (struct obj_section *obj_first,\n \n   if (obj->separate_debug_objfile != NULL\n       && obj->separate_debug_objfile->obfd == second->owner)\n-    return 1;\n+    return true;\n   if (obj->separate_debug_objfile_backlink != NULL\n       && obj->separate_debug_objfile_backlink->obfd == second->owner)\n-    return 1;\n+    return true;\n \n-  return 0;\n+  return false;\n }\n \n /* See symtab.h.  */\n@@ -2674,7 +2674,7 @@ lookup_global_symbol (const char *name,\n   return lookup_global_or_static_symbol (name, GLOBAL_BLOCK, objfile, domain);\n }\n \n-int\n+bool\n symbol_matches_domain (enum language symbol_language,\n \t\t       domain_enum symbol_domain,\n \t\t       domain_enum domain)\n@@ -2688,7 +2688,7 @@ symbol_matches_domain (enum language symbol_language,\n     {\n       if ((domain == VAR_DOMAIN || domain == STRUCT_DOMAIN)\n \t  && symbol_domain == STRUCT_DOMAIN)\n-\treturn 1;\n+\treturn true;\n     }\n   /* For all other languages, strict match is required.  */\n   return (symbol_domain == domain);\n@@ -3297,14 +3297,14 @@ find_pc_line_symtab (CORE_ADDR pc)\n \n    If found, return the symtab that contains the linetable in which it was\n    found, set *INDEX to the index in the linetable of the best entry\n-   found, and set *EXACT_MATCH nonzero if the value returned is an\n+   found, and set *EXACT_MATCH to true if the value returned is an\n    exact match.\n \n    If not found, return NULL.  */\n \n struct symtab *\n find_line_symtab (struct symtab *sym_tab, int line,\n-\t\t  int *index, int *exact_match)\n+\t\t  int *index, bool *exact_match)\n {\n   int exact = 0;  /* Initialized here to avoid a compiler warning.  */\n \n@@ -3389,7 +3389,7 @@ find_line_symtab (struct symtab *sym_tab, int line,\n   if (index)\n     *index = best_index;\n   if (exact_match)\n-    *exact_match = exact;\n+    *exact_match = (exact != 0);\n \n   return best_symtab;\n }\n@@ -3435,37 +3435,37 @@ find_pcs_for_symtab_line (struct symtab *symtab, int line,\n \n \f\n /* Set the PC value for a given source file and line number and return true.\n-   Returns zero for invalid line number (and sets the PC to 0).\n+   Returns false for invalid line number (and sets the PC to 0).\n    The source file is specified with a struct symtab.  */\n \n-int\n+bool\n find_line_pc (struct symtab *symtab, int line, CORE_ADDR *pc)\n {\n   struct linetable *l;\n   int ind;\n \n   *pc = 0;\n   if (symtab == 0)\n-    return 0;\n+    return false;\n \n   symtab = find_line_symtab (symtab, line, &ind, NULL);\n   if (symtab != NULL)\n     {\n       l = SYMTAB_LINETABLE (symtab);\n       *pc = l->item[ind].pc;\n-      return 1;\n+      return true;\n     }\n   else\n-    return 0;\n+    return false;\n }\n \n /* Find the range of pc values in a line.\n    Store the starting pc of the line into *STARTPTR\n    and the ending pc (start of next line) into *ENDPTR.\n-   Returns 1 to indicate success.\n-   Returns 0 if could not find the specified line.  */\n+   Returns true to indicate success.\n+   Returns false if could not find the specified line.  */\n \n-int\n+bool\n find_line_pc_range (struct symtab_and_line sal, CORE_ADDR *startptr,\n \t\t    CORE_ADDR *endptr)\n {\n@@ -3474,7 +3474,7 @@ find_line_pc_range (struct symtab_and_line sal, CORE_ADDR *startptr,\n \n   startaddr = sal.pc;\n   if (startaddr == 0 && !find_line_pc (sal.symtab, sal.line, &startaddr))\n-    return 0;\n+    return false;\n \n   /* This whole function is based on address.  For example, if line 10 has\n      two parts, one from 0x100 to 0x200 and one from 0x300 to 0x400, then\n@@ -3495,7 +3495,7 @@ find_line_pc_range (struct symtab_and_line sal, CORE_ADDR *startptr,\n       *startptr = found_sal.pc;\n       *endptr = found_sal.end;\n     }\n-  return 1;\n+  return true;\n }\n \n /* Given a line table and a line number, return the index into the line\n@@ -3549,7 +3549,7 @@ find_line_common (struct linetable *l, int lineno,\n   return best_index;\n }\n \n-int\n+bool\n find_pc_line_pc_range (CORE_ADDR pc, CORE_ADDR *startptr, CORE_ADDR *endptr)\n {\n   struct symtab_and_line sal;\n@@ -6062,7 +6062,7 @@ symtab_observer_executable_changed (void)\n /* Return 1 if the supplied producer string matches the ARM RealView\n    compiler (armcc).  */\n \n-int\n+bool\n producer_is_realview (const char *producer)\n {\n   static const char *const arm_idents[] = {\n@@ -6076,13 +6076,13 @@ producer_is_realview (const char *producer)\n   int i;\n \n   if (producer == NULL)\n-    return 0;\n+    return false;\n \n   for (i = 0; i < ARRAY_SIZE (arm_idents); i++)\n     if (startswith (producer, arm_idents[i]))\n-      return 1;\n+      return true;\n \n-  return 0;\n+  return false;\n }\n \n \f"
    },
    {
      "sha": "1f0fc62a657dbc7a042bef905d8af5ac99be13e0",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 21,
      "deletions": 21,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ececd218c5254902db3301d700546f6702112c85/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ececd218c5254902db3301d700546f6702112c85/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=ececd218c5254902db3301d700546f6702112c85",
      "patch": "@@ -1518,9 +1518,9 @@ extern const char multiple_symbols_cancel[];\n \n const char *multiple_symbols_select_mode (void);\n \n-int symbol_matches_domain (enum language symbol_language, \n-\t\t\t   domain_enum symbol_domain,\n-\t\t\t   domain_enum domain);\n+bool symbol_matches_domain (enum language symbol_language,\n+\t\t\t    domain_enum symbol_domain,\n+\t\t\t    domain_enum domain);\n \n /* lookup a symbol table by source file name.  */\n \n@@ -1689,8 +1689,8 @@ extern struct symbol *find_symbol_at_address (CORE_ADDR);\n    nullptr is used as a return value for *BLOCK if no block is found. \n    This function either succeeds or fails (not halfway succeeds).  If\n    it succeeds, it sets *NAME, *ADDRESS, and *ENDADDR to real\n-   information and returns 1.  If it fails, it sets *NAME, *ADDRESS\n-   and *ENDADDR to zero and returns 0.\n+   information and returns true.  If it fails, it sets *NAME, *ADDRESS\n+   and *ENDADDR to zero and returns false.\n    \n    If the function in question occupies non-contiguous ranges,\n    *ADDRESS and *ENDADDR are (subject to the conditions noted above) set\n@@ -1716,9 +1716,9 @@ extern struct symbol *find_symbol_at_address (CORE_ADDR);\n    containing the entry pc should instead call\n    find_function_entry_range_from_pc.  */\n \n-extern int find_pc_partial_function (CORE_ADDR pc, const char **name,\n-\t\t\t\t     CORE_ADDR *address, CORE_ADDR *endaddr,\n-\t\t\t\t     const struct block **block = nullptr);\n+extern bool find_pc_partial_function (CORE_ADDR pc, const char **name,\n+\t\t\t\t      CORE_ADDR *address, CORE_ADDR *endaddr,\n+\t\t\t\t      const struct block **block = nullptr);\n \n /* Like find_pc_partial_function, above, but *ADDRESS and *ENDADDR are\n    set to start and end addresses of the range containing the entry pc.\n@@ -1764,7 +1764,7 @@ extern struct compunit_symtab *find_pc_compunit_symtab (CORE_ADDR);\n extern struct compunit_symtab *\n   find_pc_sect_compunit_symtab (CORE_ADDR, struct obj_section *);\n \n-extern int find_pc_line_pc_range (CORE_ADDR, CORE_ADDR *, CORE_ADDR *);\n+extern bool find_pc_line_pc_range (CORE_ADDR, CORE_ADDR *, CORE_ADDR *);\n \n extern void reread_symbols (void);\n \n@@ -1786,7 +1786,7 @@ extern struct type *basic_lookup_transparent_type (const char *);\n #define GCC2_COMPILED_FLAG_SYMBOL \"gcc2_compiled.\"\n #endif\n \n-extern int in_gnu_ifunc_stub (CORE_ADDR pc);\n+extern bool in_gnu_ifunc_stub (CORE_ADDR pc);\n \n /* Functions for resolving STT_GNU_IFUNC symbols which are implemented only\n    for ELF symbol files.  */\n@@ -1797,7 +1797,7 @@ struct gnu_ifunc_fns\n   CORE_ADDR (*gnu_ifunc_resolve_addr) (struct gdbarch *gdbarch, CORE_ADDR pc);\n \n   /* See elf_gnu_ifunc_resolve_name for its real implementation.  */\n-  int (*gnu_ifunc_resolve_name) (const char *function_name,\n+  bool (*gnu_ifunc_resolve_name) (const char *function_name,\n \t\t\t\t CORE_ADDR *function_address_p);\n \n   /* See elf_gnu_ifunc_resolver_stop for its real implementation.  */\n@@ -1861,10 +1861,10 @@ extern struct symtab *find_pc_line_symtab (CORE_ADDR);\n \n /* Given a symtab and line number, return the pc there.  */\n \n-extern int find_line_pc (struct symtab *, int, CORE_ADDR *);\n+extern bool find_line_pc (struct symtab *, int, CORE_ADDR *);\n \n-extern int find_line_pc_range (struct symtab_and_line, CORE_ADDR *,\n-\t\t\t       CORE_ADDR *);\n+extern bool find_line_pc_range (struct symtab_and_line, CORE_ADDR *,\n+\t\t\t\tCORE_ADDR *);\n \n extern void resolve_sal_pc (struct symtab_and_line *);\n \n@@ -1936,9 +1936,9 @@ completion_skip_symbol (complete_symbol_mode mode, Symbol *sym)\n \n /* symtab.c */\n \n-int matching_obj_sections (struct obj_section *, struct obj_section *);\n+bool matching_obj_sections (struct obj_section *, struct obj_section *);\n \n-extern struct symtab *find_line_symtab (struct symtab *, int, int *, int *);\n+extern struct symtab *find_line_symtab (struct symtab *, int, int *, bool *);\n \n /* Given a function symbol SYM, find the symtab and line for the start\n    of the function.  If FUNFIRSTLINE is true, we want the first line\n@@ -2051,7 +2051,7 @@ extern struct block_symbol\n \n /* Return 1 if the supplied producer string matches the ARM RealView\n    compiler (armcc).  */\n-int producer_is_realview (const char *producer);\n+bool producer_is_realview (const char *producer);\n \n void fixup_section (struct general_symbol_info *ginfo,\n \t\t    CORE_ADDR addr, struct objfile *objfile);\n@@ -2066,11 +2066,11 @@ extern unsigned int symbol_lookup_debug;\n \n extern bool basenames_may_differ;\n \n-int compare_filenames_for_search (const char *filename,\n-\t\t\t\t  const char *search_name);\n+bool compare_filenames_for_search (const char *filename,\n+\t\t\t\t   const char *search_name);\n \n-int compare_glob_filenames_for_search (const char *filename,\n-\t\t\t\t       const char *search_name);\n+bool compare_glob_filenames_for_search (const char *filename,\n+\t\t\t\t\tconst char *search_name);\n \n bool iterate_over_some_symtabs (const char *name,\n \t\t\t\tconst char *real_path,"
    }
  ]
}