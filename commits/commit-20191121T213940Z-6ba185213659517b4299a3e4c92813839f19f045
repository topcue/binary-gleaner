{
  "sha": "6ba185213659517b4299a3e4c92813839f19f045",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NmJhMTg1MjEzNjU5NTE3YjQyOTlhM2U0YzkyODEzODM5ZjE5ZjA0NQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-11-14T22:00:19Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-11-21T21:39:40Z"
    },
    "message": "Handle %I64d in format_pieces\n\nWe found a bug internally where gdb would crash while disassembling a\ncertain instruction.  This was tracked down to the handling of %I64d\nin format_pieces.\n\nformat_pieces will convert %ll to %I64d on mingw -- so format_pieces\nshould also handle parsing this format.  In this patch, I've made the\nparsing unconditional, since I think it is harmless to accept extra\nformats.  I've also taken the opportunity to convert the length\nmodifier test to a \"switch\".\n\nTested internally using our failing test case.\n\ngdb/ChangeLog\n2019-11-21  Tom Tromey  <tromey@adacore.com>\n\n\t* gdbsupport/format.c (format_pieces): Parse %I64d.\n\t* unittests/format_pieces-selftests.c (test_windows_formats): New\n\tfunction.\n\t(run_tests): Call it.\n\nChange-Id: If335c7c2fc8d01e629cd55182394a483334d79c7",
    "tree": {
      "sha": "78644366f6071accd40a41a98eaea41d1d0e0615",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/78644366f6071accd40a41a98eaea41d1d0e0615"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/6ba185213659517b4299a3e4c92813839f19f045",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6ba185213659517b4299a3e4c92813839f19f045",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/6ba185213659517b4299a3e4c92813839f19f045",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6ba185213659517b4299a3e4c92813839f19f045/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "34877895ca38f74ae31bd65a6916560020d9d62b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/34877895ca38f74ae31bd65a6916560020d9d62b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/34877895ca38f74ae31bd65a6916560020d9d62b"
    }
  ],
  "stats": {
    "total": 69,
    "additions": 48,
    "deletions": 21
  },
  "files": [
    {
      "sha": "0c81de4a6bc3c6b5f4d23bc403f05638ebaa2ead",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6ba185213659517b4299a3e4c92813839f19f045/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6ba185213659517b4299a3e4c92813839f19f045/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=6ba185213659517b4299a3e4c92813839f19f045",
      "patch": "@@ -1,3 +1,10 @@\n+2019-11-21  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdbsupport/format.c (format_pieces): Parse %I64d.\n+\t* unittests/format_pieces-selftests.c (test_windows_formats): New\n+\tfunction.\n+\t(run_tests): Call it.\n+\n 2019-11-21  Peeter Joot  <peeter.joot@lzlabs.com>\n \n \tByte reverse display of variables with DW_END_big, DW_END_little"
    },
    {
      "sha": "67daa6d6df3332c6abd8eddf2f34551494ef4c3b",
      "filename": "gdb/gdbsupport/format.c",
      "status": "modified",
      "additions": 30,
      "deletions": 21,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6ba185213659517b4299a3e4c92813839f19f045/gdb/gdbsupport/format.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6ba185213659517b4299a3e4c92813839f19f045/gdb/gdbsupport/format.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/format.c?ref=6ba185213659517b4299a3e4c92813839f19f045",
      "patch": "@@ -126,6 +126,7 @@ format_pieces::format_pieces (const char **arg, bool gdb_extensions)\n \tint seen_size_t = 0;\n \tint bad = 0;\n \tint n_int_args = 0;\n+\tbool seen_i64 = false;\n \n \t/* Skip over \"%%\", it will become part of a literal piece.  */\n \tif (*f == '%')\n@@ -195,35 +196,32 @@ format_pieces::format_pieces (const char **arg, bool gdb_extensions)\n \t  }\n \n \t/* The next part of a format specifier is a length modifier.  */\n-\tif (*f == 'h')\n+\tswitch (*f)\n \t  {\n+\t  case 'h':\n \t    seen_h = 1;\n \t    f++;\n-\t  }\n-\telse if (*f == 'l')\n-\t  {\n+\t    break;\n+\t  case 'l':\n \t    f++;\n \t    lcount++;\n \t    if (*f == 'l')\n \t      {\n \t\tf++;\n \t\tlcount++;\n \t      }\n-\t  }\n-\telse if (*f == 'L')\n-\t  {\n+\t    break;\n+\t  case 'L':\n \t    seen_big_l = 1;\n \t    f++;\n-\t  }\n-\t/* Decimal32 modifier.  */\n-\telse if (*f == 'H')\n-\t  {\n+\t    break;\n+\t  case 'H':\n+\t    /* Decimal32 modifier.  */\n \t    seen_big_h = 1;\n \t    f++;\n-\t  }\n-\t/* Decimal64 and Decimal128 modifiers.  */\n-\telse if (*f == 'D')\n-\t  {\n+\t    break;\n+\t  case 'D':\n+\t    /* Decimal64 and Decimal128 modifiers.  */\n \t    f++;\n \n \t    /* Check for a Decimal128.  */\n@@ -234,13 +232,24 @@ format_pieces::format_pieces (const char **arg, bool gdb_extensions)\n \t      }\n \t    else\n \t      seen_big_d = 1;\n-\t  }\n-\t/* For size_t or ssize_t.  */\n-\telse if (*f == 'z')\n-\t  {\n+\t    break;\n+\t  case 'z':\n+\t    /* For size_t or ssize_t.  */\n \t    seen_size_t = 1;\n \t    f++;\n-\t  }\n+\t    break;\n+\t  case 'I':\n+\t    /* Support the Windows '%I64' extension, because an\n+\t       earlier call to format_pieces might have converted %lld\n+\t       to %I64d.  */\n+\t    if (f[1] == '6' && f[2] == '4')\n+\t      {\n+\t\tf += 3;\n+\t\tlcount = 2;\n+\t\tseen_i64 = true;\n+\t      }\n+\t    break;\n+\t}\n \n \tswitch (*f)\n \t  {\n@@ -353,7 +362,7 @@ format_pieces::format_pieces (const char **arg, bool gdb_extensions)\n \n \tsub_start = current_substring;\n \n-\tif (lcount > 1 && USE_PRINTF_I64)\n+\tif (lcount > 1 && !seen_i64 && USE_PRINTF_I64)\n \t  {\n \t    /* Windows' printf does support long long, but not the usual way.\n \t       Convert %lld to %I64d.  */"
    },
    {
      "sha": "d7e97d4069f178afe2316056b46e45b01b393127",
      "filename": "gdb/unittests/format_pieces-selftests.c",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/6ba185213659517b4299a3e4c92813839f19f045/gdb/unittests/format_pieces-selftests.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/6ba185213659517b4299a3e4c92813839f19f045/gdb/unittests/format_pieces-selftests.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/unittests/format_pieces-selftests.c?ref=6ba185213659517b4299a3e4c92813839f19f045",
      "patch": "@@ -119,13 +119,24 @@ test_format_int_sizes ()\n     });\n }\n \n+static void\n+test_windows_formats ()\n+{\n+  check (\"rc%I64d\",\n+    {\n+     format_piece (\"rc\", literal_piece, 0),\n+     format_piece (\"%I64d\", long_long_arg, 0),\n+    });\n+}\n+\n static void\n run_tests ()\n {\n   test_escape_sequences ();\n   test_format_specifier ();\n   test_gdb_formats ();\n   test_format_int_sizes ();\n+  test_windows_formats ();\n }\n \n } /* namespace format_pieces */"
    }
  ]
}