{
  "sha": "ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2VhY2JmNmVkZjJjNzJhYWExNjI4MDIwNWE5YmZjODUxM2U5ZWQyNw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-05-23T21:39:54Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-05-23T21:39:54Z"
    },
    "message": "gdb: remove TYPE_FIELD macro\n\nReplace all uses of it by type::field.\n\nNote that since type::field returns a reference to the field, some spots\nare used to assign the whole field structure.  See ctfread.c, function\nattach_fields_to_type, for example.  This is the same as was happening\nwith the macro, so I don't think it's a problem, but if anybody sees a\nreally nicer way to do this, now could be a good time to implement it.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (TYPE_FIELD): Remove.  Replace all uses with\n\ttype::field.",
    "tree": {
      "sha": "0e801f13f8c4c59f584af1e1cd5c9e49b225c3ab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0e801f13f8c4c59f584af1e1cd5c9e49b225c3ab"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "26f16254544873f4d7450f6fbbc8f34bf3d2e359",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/26f16254544873f4d7450f6fbbc8f34bf3d2e359",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/26f16254544873f4d7450f6fbbc8f34bf3d2e359"
    }
  ],
  "stats": {
    "total": 165,
    "additions": 84,
    "deletions": 81
  },
  "files": [
    {
      "sha": "35fdc614ee47cac95c80ee5f7619e0c1da411407",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -1,3 +1,8 @@\n+2020-05-23  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* gdbtypes.h (TYPE_FIELD): Remove.  Replace all uses with\n+\ttype::field.\n+\n 2020-05-23  Joel Brobecker  <brobecker@adacore.com>\n \n \tGDB 9.2 released."
    },
    {
      "sha": "91ea562248df9d553b86a698d7b4a4576ad35f60",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -1349,7 +1349,7 @@ aapcs_is_vfp_call_or_return_candidate_1 (struct type *type,\n \tfor (int i = 0; i < type->num_fields (); i++)\n \t  {\n \t    /* Ignore any static fields.  */\n-\t    if (field_is_static (&TYPE_FIELD (type, i)))\n+\t    if (field_is_static (&type->field (i)))\n \t      continue;\n \n \t    struct type *member = check_typedef (TYPE_FIELD_TYPE (type, i));\n@@ -1631,7 +1631,7 @@ pass_in_v_vfp_candidate (struct gdbarch *gdbarch, struct regcache *regcache,\n       for (int i = 0; i < arg_type->num_fields (); i++)\n \t{\n \t  /* Don't include static fields.  */\n-\t  if (field_is_static (&TYPE_FIELD (arg_type, i)))\n+\t  if (field_is_static (&arg_type->field (i)))\n \t    continue;\n \n \t  struct value *field = value_primitive_field (arg, 0, i, arg_type);"
    },
    {
      "sha": "7522917401cf60af5a517baf06d74ff09458ab64",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -8090,7 +8090,7 @@ ada_template_to_fixed_record_type_1 (struct type *type,\n     {\n       off = align_up (off, field_alignment (type, f))\n \t+ TYPE_FIELD_BITPOS (type, f);\n-      SET_FIELD_BITPOS (TYPE_FIELD (rtype, f), off);\n+      SET_FIELD_BITPOS (rtype->field (f), off);\n       TYPE_FIELD_BITSIZE (rtype, f) = 0;\n \n       if (ada_is_variant_part (type, f))"
    },
    {
      "sha": "f96a9868259ef521d4041b81d2312bdb097f6beb",
      "filename": "gdb/amd64-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/amd64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/amd64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/amd64-tdep.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -558,7 +558,7 @@ amd64_has_unaligned_fields (struct type *type)\n \t  /* Ignore static fields, empty fields (for example nested\n \t     empty structures), and bitfields (these are handled by\n \t     the caller).  */\n-\t  if (field_is_static (&TYPE_FIELD (type, i))\n+\t  if (field_is_static (&type->field (i))\n \t      || (TYPE_FIELD_BITSIZE (type, i) == 0\n \t\t  && TYPE_LENGTH (subtype) == 0)\n \t      || TYPE_FIELD_PACKED (type, i))\n@@ -600,7 +600,7 @@ amd64_classify_aggregate_field (struct type *type, int i,\n \n   /* Ignore static fields, or empty fields, for example nested\n      empty structures.*/\n-  if (field_is_static (&TYPE_FIELD (type, i)) || bitsize == 0)\n+  if (field_is_static (&type->field (i)) || bitsize == 0)\n     return;\n \n   if (subtype->code () == TYPE_CODE_STRUCT"
    },
    {
      "sha": "3e085245c8e85ea0d0549fb6986e33f690b0c204",
      "filename": "gdb/arm-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/arm-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/arm-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arm-tdep.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -3501,7 +3501,7 @@ arm_vfp_cprc_sub_candidate (struct type *t,\n \t  {\n \t    int sub_count = 0;\n \n-\t    if (!field_is_static (&TYPE_FIELD (t, i)))\n+\t    if (!field_is_static (&t->field (i)))\n \t      sub_count = arm_vfp_cprc_sub_candidate (TYPE_FIELD_TYPE (t, i),\n \t\t\t\t\t\t      base_type);\n \t    if (sub_count == -1)"
    },
    {
      "sha": "54643dd79ba33a22454f47f7fec48c27aa461c16",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -318,7 +318,7 @@ gen_trace_static_fields (struct agent_expr *ax,\n \n   for (i = type->num_fields () - 1; i >= nbases; i--)\n     {\n-      if (field_is_static (&TYPE_FIELD (type, i)))\n+      if (field_is_static (&type->field (i)))\n \t{\n \t  gen_static_field (ax, &value, type, i);\n \t  if (value.optimized_out)\n@@ -1456,7 +1456,7 @@ gen_struct_ref_recursive (struct agent_expr *ax, struct axs_value *value,\n \t\t \"this\") will have been generated already, which will\n \t\t be unnecessary but not harmful if the static field is\n \t\t being handled as a global.  */\n-\t      if (field_is_static (&TYPE_FIELD (type, i)))\n+\t      if (field_is_static (&type->field (i)))\n \t\t{\n \t\t  gen_static_field (ax, value, type, i);\n \t\t  if (value->optimized_out)\n@@ -1594,7 +1594,7 @@ gen_struct_elt_for_reference (struct agent_expr *ax, struct axs_value *value,\n \n       if (t_field_name && strcmp (t_field_name, fieldname) == 0)\n \t{\n-\t  if (field_is_static (&TYPE_FIELD (t, i)))\n+\t  if (field_is_static (&t->field (i)))\n \t    {\n \t      gen_static_field (ax, value, t, i);\n \t      if (value->optimized_out)"
    },
    {
      "sha": "8ed6c06781117caea9d20b12539843db010213a5",
      "filename": "gdb/c-typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/c-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/c-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-typeprint.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -1167,7 +1167,7 @@ c_type_print_base_struct_union (struct type *type, struct ui_file *stream,\n \t\t TYPE_FIELD_PRIVATE (type, i), flags);\n \t    }\n \n-\t  bool is_static = field_is_static (&TYPE_FIELD (type, i));\n+\t  bool is_static = field_is_static (&type->field (i));\n \n \t  if (flags->print_offsets)\n \t    podata->update (type, i, stream);"
    },
    {
      "sha": "2be447a86609a1a82eeb743fd16b317907bab564",
      "filename": "gdb/c-varobj.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/c-varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/c-varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-varobj.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -254,7 +254,7 @@ value_struct_element_index (struct value *value, int type_index)\n \n   try\n     {\n-      if (field_is_static (&TYPE_FIELD (type, type_index)))\n+      if (field_is_static (&type->field (type_index)))\n \tresult = value_static_field (type, type_index);\n       else\n \tresult = value_primitive_field (value, 0, type_index, type);"
    },
    {
      "sha": "8b1f040f95f4fa157536fb2ee2504d88fad73239",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -2045,7 +2045,7 @@ coff_read_struct_type (int index, int length, int lastsym,\n   /* Copy the saved-up fields into the field vector.  */\n \n   for (n = nfields; list; list = list->next)\n-    TYPE_FIELD (type, --n) = list->field;\n+    type->field (--n) = list->field;\n \n   return type;\n }\n@@ -2142,7 +2142,7 @@ coff_read_enum_type (int index, int length, int lastsym,\n \n \t  SYMBOL_TYPE (xsym) = type;\n \t  TYPE_FIELD_NAME (type, n) = xsym->linkage_name ();\n-\t  SET_FIELD_ENUMVAL (TYPE_FIELD (type, n), SYMBOL_VALUE (xsym));\n+\t  SET_FIELD_ENUMVAL (type->field (n), SYMBOL_VALUE (xsym));\n \t  if (SYMBOL_VALUE (xsym) < 0)\n \t    unsigned_enum = 0;\n \t  TYPE_FIELD_BITSIZE (type, n) = 0;"
    },
    {
      "sha": "758b12db1a784370b38bd48b0cdc3b6943405f48",
      "filename": "gdb/compile/compile-c-symbols.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/compile/compile-c-symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/compile/compile-c-symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-symbols.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -527,7 +527,7 @@ generate_vla_size (compile_instance *compiler,\n \tint i;\n \n \tfor (i = 0; i < type->num_fields (); ++i)\n-\t  if (!field_is_static (&TYPE_FIELD (type, i)))\n+\t  if (!field_is_static (&type->field (i)))\n \t    generate_vla_size (compiler, stream, gdbarch, registers_used, pc,\n \t\t\t       TYPE_FIELD_TYPE (type, i), sym);\n       }"
    },
    {
      "sha": "eb70dfe967a44747e936033d32070e92bfad01db",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -595,7 +595,7 @@ compile_cplus_convert_struct_or_union_members\n       gcc_type field_type\n \t= instance->convert_type (TYPE_FIELD_TYPE (type, i));\n \n-      if (field_is_static (&TYPE_FIELD (type, i)))\n+      if (field_is_static (&type->field (i)))\n \t{\n \t  CORE_ADDR physaddr;\n "
    },
    {
      "sha": "0c79b025bd3a98896cc3cb9c35c4744bb2130436",
      "filename": "gdb/cp-valprint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/cp-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/cp-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-valprint.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -191,7 +191,7 @@ cp_print_value_fields (struct value *val, struct ui_file *stream,\n \n \t  /* If requested, skip printing of static fields.  */\n \t  if (!options->static_field_print\n-\t      && field_is_static (&TYPE_FIELD (type, i)))\n+\t      && field_is_static (&type->field (i)))\n \t    continue;\n \n \t  if (fields_seen)\n@@ -225,7 +225,7 @@ cp_print_value_fields (struct value *val, struct ui_file *stream,\n \n \t  annotate_field_begin (TYPE_FIELD_TYPE (type, i));\n \n-\t  if (field_is_static (&TYPE_FIELD (type, i)))\n+\t  if (field_is_static (&type->field (i)))\n \t    {\n \t      fputs_filtered (\"static \", stream);\n \t      fprintf_symbol_filtered (stream,\n@@ -256,7 +256,7 @@ cp_print_value_fields (struct value *val, struct ui_file *stream,\n \t    }\n \t  annotate_field_value ();\n \n-\t  if (!field_is_static (&TYPE_FIELD (type, i))\n+\t  if (!field_is_static (&type->field (i))\n \t      && TYPE_FIELD_PACKED (type, i))\n \t    {\n \t      struct value *v;\n@@ -295,7 +295,7 @@ cp_print_value_fields (struct value *val, struct ui_file *stream,\n \t\t  fputs_styled (\"<optimized out or zero length>\",\n \t\t\t\tmetadata_style.style (), stream);\n \t\t}\n-\t      else if (field_is_static (&TYPE_FIELD (type, i)))\n+\t      else if (field_is_static (&type->field (i)))\n \t\t{\n \t\t  try\n \t\t    {"
    },
    {
      "sha": "57a376329385eb6763c4288ea14b4b3dc96db929",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -316,7 +316,7 @@ attach_fields_to_type (struct ctf_field_info *fip, struct type *type)\n   for (int i = 0; i < nfields; ++i)\n     {\n       struct ctf_nextfield &field = fip->fields[i];\n-      TYPE_FIELD (type, i) = field.field;\n+      type->field (i) = field.field;\n     }\n }\n "
    },
    {
      "sha": "ec3844188ee6a21d4fa45682ebbc5b159a404334",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -9364,19 +9364,19 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n       type->set_code (TYPE_CODE_STRUCT);\n       type->set_num_fields (3);\n       /* Save the field we care about.  */\n-      struct field saved_field = TYPE_FIELD (type, 0);\n+      struct field saved_field = type->field (0);\n       type->set_fields\n \t((struct field *) TYPE_ZALLOC (type, 3 * sizeof (struct field)));\n \n       /* Put the discriminant at index 0.  */\n       TYPE_FIELD_TYPE (type, 0) = field_type;\n       TYPE_FIELD_ARTIFICIAL (type, 0) = 1;\n       TYPE_FIELD_NAME (type, 0) = \"<<discriminant>>\";\n-      SET_FIELD_BITPOS (TYPE_FIELD (type, 0), bit_offset);\n+      SET_FIELD_BITPOS (type->field (0), bit_offset);\n \n       /* The order of fields doesn't really matter, so put the real\n \t field at index 1 and the data-less field at index 2.  */\n-      TYPE_FIELD (type, 1) = saved_field;\n+      type->field (1) = saved_field;\n       TYPE_FIELD_NAME (type, 1)\n \t= rust_last_path_segment (TYPE_FIELD_TYPE (type, 1)->name ());\n       TYPE_FIELD_TYPE (type, 1)->set_name\n@@ -9392,7 +9392,7 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n       /* NAME points into the original discriminant name, which\n \t already has the correct lifetime.  */\n       TYPE_FIELD_NAME (type, 2) = name;\n-      SET_FIELD_BITPOS (TYPE_FIELD (type, 2), 0);\n+      SET_FIELD_BITPOS (type->field (2), 0);\n \n       /* Indicate that this is a variant type.  */\n       static discriminant_range ranges[1] = { { 0, 0 } };\n@@ -9454,7 +9454,7 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n       type->set_code (TYPE_CODE_STRUCT);\n \n       /* Make space for the discriminant field.  */\n-      struct field *disr_field = &TYPE_FIELD (disr_type, 0);\n+      struct field *disr_field = &disr_type->field (0);\n       field *new_fields\n \t= (struct field *) TYPE_ZALLOC (type, ((type->num_fields () + 1)\n \t\t\t\t\t       * sizeof (struct field)));\n@@ -9464,7 +9464,7 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n       type->set_num_fields (type->num_fields () + 1);\n \n       /* Install the discriminant at index 0 in the union.  */\n-      TYPE_FIELD (type, 0) = *disr_field;\n+      type->field (0) = *disr_field;\n       TYPE_FIELD_ARTIFICIAL (type, 0) = 1;\n       TYPE_FIELD_NAME (type, 0) = \"<<discriminant>>\";\n \n@@ -14849,7 +14849,7 @@ dwarf2_attach_fields_to_type (struct field_info *fip, struct type *type,\n \t= ((i < fip->baseclasses.size ()) ? fip->baseclasses[i]\n \t   : fip->fields[i - fip->baseclasses.size ()]);\n \n-      TYPE_FIELD (type, i) = field.field;\n+      type->field (i) = field.field;\n       switch (field.accessibility)\n \t{\n \tcase DW_ACCESS_private:"
    },
    {
      "sha": "20533abf93d0f72aa5100e711d06e1b5f8fedf6b",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -296,8 +296,7 @@ evaluate_struct_tuple (struct value *struct_val,\n       fieldno++;\n       /* Skip static fields.  */\n       while (fieldno < struct_type->num_fields ()\n-\t     && field_is_static (&TYPE_FIELD (struct_type,\n-\t\t\t\t\t      fieldno)))\n+\t     && field_is_static (&struct_type->field (fieldno)))\n \tfieldno++;\n       if (fieldno >= struct_type->num_fields ())\n \terror (_(\"too many initializers\"));"
    },
    {
      "sha": "4fe8d9a8e9cc3b439113427b0694676dd0f76023",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -1757,7 +1757,7 @@ lookup_struct_elt (struct type *type, const char *name, int noerr)\n \n       if (t_field_name && (strcmp_iw (t_field_name, name) == 0))\n \t{\n-\t  return {&TYPE_FIELD (type, i), TYPE_FIELD_BITPOS (type, i)};\n+\t  return {&type->field (i), TYPE_FIELD_BITPOS (type, i)};\n \t}\n      else if (!t_field_name || *t_field_name == '\\0')\n \t{\n@@ -2039,7 +2039,7 @@ is_dynamic_type_internal (struct type *type, int top_level)\n \tfor (i = 0; i < type->num_fields (); ++i)\n \t  {\n \t    /* Static fields can be ignored here.  */\n-\t    if (field_is_static (&TYPE_FIELD (type, i)))\n+\t    if (field_is_static (&type->field (i)))\n \t      continue;\n \t    /* If the field has dynamic type, then so does TYPE.  */\n \t    if (is_dynamic_type_internal (TYPE_FIELD_TYPE (type, i), 0))\n@@ -2249,7 +2249,7 @@ resolve_dynamic_union (struct type *type,\n     {\n       struct type *t;\n \n-      if (field_is_static (&TYPE_FIELD (type, i)))\n+      if (field_is_static (&type->field (i)))\n \tcontinue;\n \n       t = resolve_dynamic_type_internal (TYPE_FIELD_TYPE (resolved_type, i),\n@@ -2415,7 +2415,7 @@ compute_variant_fields (struct type *type,\n       if (!flags[i])\n \tcontinue;\n \n-      TYPE_FIELD (resolved_type, out) = TYPE_FIELD (type, i);\n+      resolved_type->field (out) = type->field (i);\n       ++out;\n     }\n }\n@@ -2463,7 +2463,7 @@ resolve_dynamic_struct (struct type *type,\n       unsigned new_bit_length;\n       struct property_addr_info pinfo;\n \n-      if (field_is_static (&TYPE_FIELD (resolved_type, i)))\n+      if (field_is_static (&resolved_type->field (i)))\n \tcontinue;\n \n       if (TYPE_FIELD_LOC_KIND (resolved_type, i) == FIELD_LOC_KIND_DWARF_BLOCK)\n@@ -2480,7 +2480,7 @@ resolve_dynamic_struct (struct type *type,\n \t  CORE_ADDR addr;\n \t  if (dwarf2_evaluate_property (&prop, nullptr, addr_stack, &addr,\n \t\t\t\t\ttrue))\n-\t    SET_FIELD_BITPOS (TYPE_FIELD (resolved_type, i),\n+\t    SET_FIELD_BITPOS (resolved_type->field (i),\n \t\t\t      TARGET_CHAR_BIT * (addr - addr_stack->addr));\n \t}\n \n@@ -3391,7 +3391,7 @@ type_align (struct type *type)\n \tint number_of_non_static_fields = 0;\n \tfor (unsigned i = 0; i < type->num_fields (); ++i)\n \t  {\n-\t    if (!field_is_static (&TYPE_FIELD (type, i)))\n+\t    if (!field_is_static (&type->field (i)))\n \t      {\n \t\tnumber_of_non_static_fields++;\n \t\tULONGEST f_align = type_align (TYPE_FIELD_TYPE (type, i));\n@@ -4028,8 +4028,8 @@ check_types_equal (struct type *type1, struct type *type2,\n \n       for (i = 0; i < type1->num_fields (); ++i)\n \t{\n-\t  const struct field *field1 = &TYPE_FIELD (type1, i);\n-\t  const struct field *field2 = &TYPE_FIELD (type2, i);\n+\t  const struct field *field1 = &type1->field (i);\n+\t  const struct field *field2 = &type2->field (i);\n \n \t  if (FIELD_ARTIFICIAL (*field1) != FIELD_ARTIFICIAL (*field2)\n \t      || FIELD_BITSIZE (*field1) != FIELD_BITSIZE (*field2)\n@@ -5321,19 +5321,19 @@ copy_type_recursive (struct objfile *objfile,\n \t  switch (TYPE_FIELD_LOC_KIND (type, i))\n \t    {\n \t    case FIELD_LOC_KIND_BITPOS:\n-\t      SET_FIELD_BITPOS (TYPE_FIELD (new_type, i),\n+\t      SET_FIELD_BITPOS (new_type->field (i),\n \t\t\t\tTYPE_FIELD_BITPOS (type, i));\n \t      break;\n \t    case FIELD_LOC_KIND_ENUMVAL:\n-\t      SET_FIELD_ENUMVAL (TYPE_FIELD (new_type, i),\n+\t      SET_FIELD_ENUMVAL (new_type->field (i),\n \t\t\t\t TYPE_FIELD_ENUMVAL (type, i));\n \t      break;\n \t    case FIELD_LOC_KIND_PHYSADDR:\n-\t      SET_FIELD_PHYSADDR (TYPE_FIELD (new_type, i),\n+\t      SET_FIELD_PHYSADDR (new_type->field (i),\n \t\t\t\t  TYPE_FIELD_STATIC_PHYSADDR (type, i));\n \t      break;\n \t    case FIELD_LOC_KIND_PHYSNAME:\n-\t      SET_FIELD_PHYSNAME (TYPE_FIELD (new_type, i),\n+\t      SET_FIELD_PHYSNAME (new_type->field (i),\n \t\t\t\t  xstrdup (TYPE_FIELD_STATIC_PHYSNAME (type,\n \t\t\t\t\t\t\t\t       i)));\n \t      break;\n@@ -5588,7 +5588,7 @@ append_flags_type_field (struct type *type, int start_bitpos, int nr_bits,\n \n   TYPE_FIELD_NAME (type, field_nr) = xstrdup (name);\n   TYPE_FIELD_TYPE (type, field_nr) = field_type;\n-  SET_FIELD_BITPOS (TYPE_FIELD (type, field_nr), start_bitpos);\n+  SET_FIELD_BITPOS (type->field (field_nr), start_bitpos);\n   TYPE_FIELD_BITSIZE (type, field_nr) = nr_bits;\n   type->set_num_fields (type->num_fields () + 1);\n }"
    },
    {
      "sha": "60cbcd1003f6ae745835d1deb5e8c7772414d8da",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 11,
      "deletions": 12,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -1613,18 +1613,17 @@ extern void set_type_vptr_basetype (struct type *, struct type *);\n #define FIELD_ARTIFICIAL(thisfld) ((thisfld).artificial)\n #define FIELD_BITSIZE(thisfld) ((thisfld).bitsize)\n \n-#define TYPE_FIELD(thistype, n) TYPE_MAIN_TYPE(thistype)->flds_bnds.fields[n]\n-#define TYPE_FIELD_TYPE(thistype, n) FIELD_TYPE(TYPE_FIELD(thistype, n))\n-#define TYPE_FIELD_NAME(thistype, n) FIELD_NAME(TYPE_FIELD(thistype, n))\n-#define TYPE_FIELD_LOC_KIND(thistype, n) FIELD_LOC_KIND (TYPE_FIELD (thistype, n))\n-#define TYPE_FIELD_BITPOS(thistype, n) FIELD_BITPOS (TYPE_FIELD (thistype, n))\n-#define TYPE_FIELD_ENUMVAL(thistype, n) FIELD_ENUMVAL (TYPE_FIELD (thistype, n))\n-#define TYPE_FIELD_STATIC_PHYSNAME(thistype, n) FIELD_STATIC_PHYSNAME (TYPE_FIELD (thistype, n))\n-#define TYPE_FIELD_STATIC_PHYSADDR(thistype, n) FIELD_STATIC_PHYSADDR (TYPE_FIELD (thistype, n))\n-#define TYPE_FIELD_DWARF_BLOCK(thistype, n) FIELD_DWARF_BLOCK (TYPE_FIELD (thistype, n))\n-#define TYPE_FIELD_ARTIFICIAL(thistype, n) FIELD_ARTIFICIAL(TYPE_FIELD(thistype,n))\n-#define TYPE_FIELD_BITSIZE(thistype, n) FIELD_BITSIZE(TYPE_FIELD(thistype,n))\n-#define TYPE_FIELD_PACKED(thistype, n) (FIELD_BITSIZE(TYPE_FIELD(thistype,n))!=0)\n+#define TYPE_FIELD_TYPE(thistype, n) FIELD_TYPE((thistype)->field (n))\n+#define TYPE_FIELD_NAME(thistype, n) FIELD_NAME((thistype)->field (n))\n+#define TYPE_FIELD_LOC_KIND(thistype, n) FIELD_LOC_KIND ((thistype)->field (n))\n+#define TYPE_FIELD_BITPOS(thistype, n) FIELD_BITPOS ((thistype)->field (n))\n+#define TYPE_FIELD_ENUMVAL(thistype, n) FIELD_ENUMVAL ((thistype)->field (n))\n+#define TYPE_FIELD_STATIC_PHYSNAME(thistype, n) FIELD_STATIC_PHYSNAME ((thistype)->field (n))\n+#define TYPE_FIELD_STATIC_PHYSADDR(thistype, n) FIELD_STATIC_PHYSADDR ((thistype)->field (n))\n+#define TYPE_FIELD_DWARF_BLOCK(thistype, n) FIELD_DWARF_BLOCK ((thistype)->field (n))\n+#define TYPE_FIELD_ARTIFICIAL(thistype, n) FIELD_ARTIFICIAL((thistype)->field (n))\n+#define TYPE_FIELD_BITSIZE(thistype, n) FIELD_BITSIZE((thistype)->field (n))\n+#define TYPE_FIELD_PACKED(thistype, n) (FIELD_BITSIZE((thistype)->field (n))!=0)\n \n #define TYPE_FIELD_PRIVATE_BITS(thistype) \\\n   TYPE_CPLUS_SPECIFIC(thistype)->private_field_bits"
    },
    {
      "sha": "6faaca2e0416d2b991e3f6eed004b1c47d5367f1",
      "filename": "gdb/gnu-v3-abi.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/gnu-v3-abi.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/gnu-v3-abi.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gnu-v3-abi.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -1528,7 +1528,7 @@ gnuv3_pass_by_reference (struct type *type)\n      about recursive loops here, since we are only looking at members\n      of complete class type.  Also ignore any static members.  */\n   for (fieldnum = 0; fieldnum < type->num_fields (); fieldnum++)\n-    if (!field_is_static (&TYPE_FIELD (type, fieldnum)))\n+    if (!field_is_static (&type->field (fieldnum)))\n       {\n \tstruct type *field_type = TYPE_FIELD_TYPE (type, fieldnum);\n "
    },
    {
      "sha": "6c0c3fd3617c750c1ac2025d3c5d7f8b9a7d03be",
      "filename": "gdb/guile/scm-type.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/guile/scm-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/guile/scm-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-type.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -514,7 +514,7 @@ tyscm_field_smob_to_field (field_smob *f_smob)\n   /* This should be non-NULL by construction.  */\n   gdb_assert (type->fields () != NULL);\n \n-  return &TYPE_FIELD (type, f_smob->field_num);\n+  return &type->field (f_smob->field_num);\n }\n \f\n /* Type smob accessors.  */"
    },
    {
      "sha": "d700dd8ebd02845d651f06b381326b9278c668c2",
      "filename": "gdb/mips-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/mips-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/mips-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mips-tdep.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -4856,7 +4856,7 @@ mips_n32n64_fp_arg_chunk_p (struct gdbarch *gdbarch, struct type *arg_type,\n       struct type *field_type;\n \n       /* We're only looking at normal fields.  */\n-      if (field_is_static (&TYPE_FIELD (arg_type, i))\n+      if (field_is_static (&arg_type->field (i))\n \t  || (TYPE_FIELD_BITPOS (arg_type, i) % 8) != 0)\n \tcontinue;\n "
    },
    {
      "sha": "70a8308b047e2ef51cc06b808b033cb7310a6254",
      "filename": "gdb/p-typeprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/p-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/p-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-typeprint.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -618,12 +618,12 @@ pascal_type_print_base (struct type *type, struct ui_file *stream, int show,\n \t\t}\n \n \t      print_spaces_filtered (level + 4, stream);\n-\t      if (field_is_static (&TYPE_FIELD (type, i)))\n+\t      if (field_is_static (&type->field (i)))\n \t\tfprintf_filtered (stream, \"static \");\n \t      pascal_print_type (TYPE_FIELD_TYPE (type, i),\n \t\t\t\t TYPE_FIELD_NAME (type, i),\n \t\t\t\t stream, show - 1, level + 4, flags);\n-\t      if (!field_is_static (&TYPE_FIELD (type, i))\n+\t      if (!field_is_static (&type->field (i))\n \t\t  && TYPE_FIELD_PACKED (type, i))\n \t\t{\n \t\t  /* It is a bitfield.  This code does not attempt"
    },
    {
      "sha": "cf902ac7fbe1758ae2442887ae69e11f7625ca75",
      "filename": "gdb/p-valprint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/p-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/p-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-valprint.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -553,7 +553,7 @@ pascal_object_print_value_fields (struct value *val, struct ui_file *stream,\n \t{\n \t  /* If requested, skip printing of static fields.  */\n \t  if (!options->pascal_static_field_print\n-\t      && field_is_static (&TYPE_FIELD (type, i)))\n+\t      && field_is_static (&type->field (i)))\n \t    continue;\n \t  if (fields_seen)\n \t    fprintf_filtered (stream, \", \");\n@@ -582,7 +582,7 @@ pascal_object_print_value_fields (struct value *val, struct ui_file *stream,\n \n \t  annotate_field_begin (TYPE_FIELD_TYPE (type, i));\n \n-\t  if (field_is_static (&TYPE_FIELD (type, i)))\n+\t  if (field_is_static (&type->field (i)))\n \t    {\n \t      fputs_filtered (\"static \", stream);\n \t      fprintf_symbol_filtered (stream,\n@@ -597,7 +597,7 @@ pascal_object_print_value_fields (struct value *val, struct ui_file *stream,\n \t  fputs_filtered (\" = \", stream);\n \t  annotate_field_value ();\n \n-\t  if (!field_is_static (&TYPE_FIELD (type, i))\n+\t  if (!field_is_static (&type->field (i))\n \t      && TYPE_FIELD_PACKED (type, i))\n \t    {\n \t      struct value *v;\n@@ -636,7 +636,7 @@ pascal_object_print_value_fields (struct value *val, struct ui_file *stream,\n \t\t  fputs_styled (\"<optimized out or zero length>\",\n \t\t\t\tmetadata_style.style (), stream);\n \t\t}\n-\t      else if (field_is_static (&TYPE_FIELD (type, i)))\n+\t      else if (field_is_static (&type->field (i)))\n \t\t{\n \t\t  /* struct value *v = value_static_field (type, i);\n \t\t     v4.17 specific.  */"
    },
    {
      "sha": "2dc896202dc7f01c556336d3cf8f374ecde2119f",
      "filename": "gdb/ppc-sysv-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/ppc-sysv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/ppc-sysv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ppc-sysv-tdep.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -1142,7 +1142,7 @@ ppc64_aggregate_candidate (struct type *type,\n \t    {\n \t      LONGEST sub_count;\n \n-\t      if (field_is_static (&TYPE_FIELD (type, i)))\n+\t      if (field_is_static (&type->field (i)))\n \t\tcontinue;\n \n \t      sub_count = ppc64_aggregate_candidate"
    },
    {
      "sha": "7862f70d472b61f5aa66e80f9b056429f1f6b2a0",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -177,7 +177,7 @@ convert_field (struct type *type, int field)\n   if (PyObject_SetAttrString (result.get (), \"parent_type\", arg.get ()) < 0)\n     return NULL;\n \n-  if (!field_is_static (&TYPE_FIELD (type, field)))\n+  if (!field_is_static (&type->field (field)))\n     {\n       const char *attrstring;\n "
    },
    {
      "sha": "5958b058c10cceb05392b3a1f4ec4054f9183a57",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -128,7 +128,7 @@ rust_underscore_fields (struct type *type)\n     return false;\n   for (i = 0; i < type->num_fields (); ++i)\n     {\n-      if (!field_is_static (&TYPE_FIELD (type, i)))\n+      if (!field_is_static (&type->field (i)))\n \t{\n \t  char buf[20];\n \n@@ -420,7 +420,7 @@ val_print_struct (struct value *val, struct ui_file *stream, int recurse,\n   first_field = 1;\n   for (i = 0; i < type->num_fields (); ++i)\n     {\n-      if (field_is_static (&TYPE_FIELD (type, i)))\n+      if (field_is_static (&type->field (i)))\n         continue;\n \n       if (!first_field)\n@@ -735,7 +735,7 @@ rust_print_struct_def (struct type *type, const char *varstring,\n   std::vector<int> fields;\n   for (int i = 0; i < type->num_fields (); ++i)\n     {\n-      if (field_is_static (&TYPE_FIELD (type, i)))\n+      if (field_is_static (&type->field (i)))\n \tcontinue;\n       if (is_enum && TYPE_FIELD_ARTIFICIAL (type, i))\n \tcontinue;\n@@ -753,7 +753,7 @@ rust_print_struct_def (struct type *type, const char *varstring,\n     {\n       QUIT;\n \n-      gdb_assert (!field_is_static (&TYPE_FIELD (type, i)));\n+      gdb_assert (!field_is_static (&type->field (i)));\n       gdb_assert (! (is_enum && TYPE_FIELD_ARTIFICIAL (type, i)));\n \n       if (flags->print_offsets)\n@@ -992,7 +992,7 @@ rust_composite_type (struct type *original,\n   bitpos = 0;\n   if (field1 != NULL)\n     {\n-      struct field *field = &TYPE_FIELD (result, i);\n+      struct field *field = &result->field (i);\n \n       SET_FIELD_BITPOS (*field, bitpos);\n       bitpos += TYPE_LENGTH (type1) * TARGET_CHAR_BIT;\n@@ -1003,7 +1003,7 @@ rust_composite_type (struct type *original,\n     }\n   if (field2 != NULL)\n     {\n-      struct field *field = &TYPE_FIELD (result, i);\n+      struct field *field = &result->field (i);\n       unsigned align = type_align (type2);\n \n       if (align != 0)"
    },
    {
      "sha": "a7f71f85b299abb4511771a823d5c793d665f681",
      "filename": "gdb/s390-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/s390-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/s390-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/s390-tdep.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -1646,7 +1646,7 @@ s390_effective_inner_type (struct type *type, unsigned int min_size)\n \t abort the unwrapping.  */\n       for (int i = 0; i < type->num_fields (); i++)\n \t{\n-\t  struct field f = TYPE_FIELD (type, i);\n+\t  struct field f = type->field (i);\n \n \t  if (field_is_static (&f))\n \t    continue;"
    },
    {
      "sha": "179a0fb610bc8f9b2d1330ec924db8b5875f1999",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -3339,7 +3339,7 @@ attach_fields_to_type (struct stab_field_info *fip, struct type *type,\n \n   while (nfields-- > 0)\n     {\n-      TYPE_FIELD (type, nfields) = fip->list->field;\n+      type->field (nfields) = fip->list->field;\n       switch (fip->list->visibility)\n \t{\n \tcase VISIBILITY_PRIVATE:\n@@ -3681,7 +3681,7 @@ read_enum_type (const char **pp, struct type *type,\n \n \t  SYMBOL_TYPE (xsym) = type;\n \t  TYPE_FIELD_NAME (type, n) = xsym->linkage_name ();\n-\t  SET_FIELD_ENUMVAL (TYPE_FIELD (type, n), SYMBOL_VALUE (xsym));\n+\t  SET_FIELD_ENUMVAL (type->field (n), SYMBOL_VALUE (xsym));\n \t  TYPE_FIELD_BITSIZE (type, n) = 0;\n \t}\n       if (syms == osyms)"
    },
    {
      "sha": "3f90ea996478db072983b6450732679ca0bff34f",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -1973,7 +1973,7 @@ check_field (struct type *type, const char *name,\n       if (t_field_name && (strcmp_iw (t_field_name, name) == 0))\n \t{\n \t  is_a_field_of_this->type = type;\n-\t  is_a_field_of_this->field = &TYPE_FIELD (type, i);\n+\t  is_a_field_of_this->field = &type->field (i);\n \t  return 1;\n \t}\n     }"
    },
    {
      "sha": "3d1204e244c972f87abb3d3fd516dc88810d911a",
      "filename": "gdb/typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/typeprint.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -110,7 +110,7 @@ void\n print_offset_data::update (struct type *type, unsigned int field_idx,\n \t\t\t   struct ui_file *stream)\n {\n-  if (field_is_static (&TYPE_FIELD (type, field_idx)))\n+  if (field_is_static (&type->field (field_idx)))\n     {\n       print_spaces_filtered (indentation, stream);\n       return;"
    },
    {
      "sha": "bde4684a82b14fc0a00bcde773fd8dc10d13fa7e",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -1813,7 +1813,7 @@ do_search_struct_field (const char *name, struct value *arg1, LONGEST offset,\n \t  {\n \t    struct value *v;\n \n-\t    if (field_is_static (&TYPE_FIELD (type, i)))\n+\t    if (field_is_static (&type->field (i)))\n \t      v = value_static_field (type, i);\n \t    else\n \t      v = value_primitive_field (arg1, offset, i, type);\n@@ -2221,7 +2221,7 @@ value_struct_elt_bitpos (struct value **argp, int bitpos, struct type *ftype,\n \n   for (i = TYPE_N_BASECLASSES (t); i < t->num_fields (); i++)\n     {\n-      if (!field_is_static (&TYPE_FIELD (t, i))\n+      if (!field_is_static (&t->field (i))\n \t  && bitpos == TYPE_FIELD_BITPOS (t, i)\n \t  && types_equal (ftype, TYPE_FIELD_TYPE (t, i)))\n \treturn value_primitive_field (*argp, 0, i, t);\n@@ -3299,7 +3299,7 @@ value_struct_elt_for_reference (struct type *domain, int offset,\n \n       if (t_field_name && strcmp (t_field_name, name) == 0)\n \t{\n-\t  if (field_is_static (&TYPE_FIELD (t, i)))\n+\t  if (field_is_static (&t->field (i)))\n \t    {\n \t      struct value *v = value_static_field (t, i);\n \t      if (want_address)"
    },
    {
      "sha": "aa0adeba99b7a9358ba09e3a5a0db32e8a6ce8e8",
      "filename": "gdb/windows-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/windows-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ceacbf6edf2c72aaa16280205a9bfc8513e9ed27/gdb/windows-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/windows-tdep.c?ref=ceacbf6edf2c72aaa16280205a9bfc8513e9ed27",
      "patch": "@@ -759,7 +759,7 @@ create_enum (struct gdbarch *gdbarch, int bit, const char *name,\n   for (i = 0; i < count; i++)\n   {\n     TYPE_FIELD_NAME (type, i) = values[i].name;\n-    SET_FIELD_ENUMVAL (TYPE_FIELD (type, i), values[i].value);\n+    SET_FIELD_ENUMVAL (type->field (i), values[i].value);\n   }\n \n   return type;"
    }
  ]
}