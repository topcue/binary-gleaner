{
  "sha": "8844c11b8bc1cfa70a63a8875e08345c96abecfe",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODg0NGMxMWI4YmMxY2ZhNzBhNjNhODg3NWUwODM0NWM5NmFiZWNmZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-26T15:28:08Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-26T15:28:15Z"
    },
    "message": "Make some line_header methods const\n\nThis changes a few line_header methods to be const.  In some cases, a\nconst overload is added.\n\ngdb/ChangeLog\n2020-03-26  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/line-header.h (struct line_header) <is_valid_file_index,\n\tfile_names_size, file_full_name, file_file_name>: Use const.\n\t<file_name_at, file_names>: Add const overload.\n\t* dwarf2/line-header.c (line_header::file_file_name)\n\t(line_header::file_full_name): Update.",
    "tree": {
      "sha": "0d179a74826a2d344353febd311591f9af2a7ac5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0d179a74826a2d344353febd311591f9af2a7ac5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8844c11b8bc1cfa70a63a8875e08345c96abecfe",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8844c11b8bc1cfa70a63a8875e08345c96abecfe",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8844c11b8bc1cfa70a63a8875e08345c96abecfe",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8844c11b8bc1cfa70a63a8875e08345c96abecfe/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c90ec28ae44ebf72d57d58439d02fc5aab90f1f6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c90ec28ae44ebf72d57d58439d02fc5aab90f1f6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c90ec28ae44ebf72d57d58439d02fc5aab90f1f6"
    }
  ],
  "stats": {
    "total": 30,
    "additions": 24,
    "deletions": 6
  },
  "files": [
    {
      "sha": "4599b0df4ffb10c367f27e56f57bffcda38dfa06",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8844c11b8bc1cfa70a63a8875e08345c96abecfe/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8844c11b8bc1cfa70a63a8875e08345c96abecfe/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8844c11b8bc1cfa70a63a8875e08345c96abecfe",
      "patch": "@@ -1,3 +1,11 @@\n+2020-03-26  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/line-header.h (struct line_header) <is_valid_file_index,\n+\tfile_names_size, file_full_name, file_file_name>: Use const.\n+\t<file_name_at, file_names>: Add const overload.\n+\t* dwarf2/line-header.c (line_header::file_file_name)\n+\t(line_header::file_full_name): Update.\n+\n 2020-03-26  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (dwarf2_macro_malformed_definition_complaint)"
    },
    {
      "sha": "f417f2d0faef6c4b0684c926bb9bf5f16abd62fa",
      "filename": "gdb/dwarf2/line-header.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8844c11b8bc1cfa70a63a8875e08345c96abecfe/gdb/dwarf2/line-header.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8844c11b8bc1cfa70a63a8875e08345c96abecfe/gdb/dwarf2/line-header.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/line-header.c?ref=8844c11b8bc1cfa70a63a8875e08345c96abecfe",
      "patch": "@@ -59,7 +59,7 @@ line_header::add_file_name (const char *name,\n }\n \n gdb::unique_xmalloc_ptr<char>\n-line_header::file_file_name (int file)\n+line_header::file_file_name (int file) const\n {\n   /* Is the file number a valid index into the line header's file name\n      table?  Remember that file numbers start with one, not zero.  */\n@@ -95,7 +95,7 @@ line_header::file_file_name (int file)\n }\n \n gdb::unique_xmalloc_ptr<char>\n-line_header::file_full_name (int file, const char *comp_dir)\n+line_header::file_full_name (int file, const char *comp_dir) const\n {\n   /* Is the file number a valid index into the line header's file name\n      table?  Remember that file numbers start with one, not zero.  */"
    },
    {
      "sha": "30bc37fb85a6ed29120b7db38f700c72ba0620ef",
      "filename": "gdb/dwarf2/line-header.h",
      "status": "modified",
      "additions": 14,
      "deletions": 4,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8844c11b8bc1cfa70a63a8875e08345c96abecfe/gdb/dwarf2/line-header.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8844c11b8bc1cfa70a63a8875e08345c96abecfe/gdb/dwarf2/line-header.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/line-header.h?ref=8844c11b8bc1cfa70a63a8875e08345c96abecfe",
      "patch": "@@ -96,7 +96,7 @@ struct line_header\n     return m_include_dirs[vec_index];\n   }\n \n-  bool is_valid_file_index (int file_index)\n+  bool is_valid_file_index (int file_index) const\n   {\n     if (version >= 5)\n       return 0 <= file_index && file_index < file_names_size ();\n@@ -117,11 +117,21 @@ struct line_header\n     return &m_file_names[vec_index];\n   }\n \n+  /* A const overload of the same.  */\n+  const file_entry *file_name_at (file_name_index index) const\n+  {\n+    line_header *lh = const_cast<line_header *> (this);\n+    return lh->file_name_at (index);\n+  }\n+\n   /* The indexes are 0-based in DWARF 5 and 1-based in DWARF 4. Therefore,\n      this method should only be used to iterate through all file entries in an\n      index-agnostic manner.  */\n   std::vector<file_entry> &file_names ()\n   { return m_file_names; }\n+  /* A const overload of the same.  */\n+  const std::vector<file_entry> &file_names () const\n+  { return m_file_names; }\n \n   /* Offset of line number information in .debug_line section.  */\n   sect_offset sect_off {};\n@@ -145,7 +155,7 @@ struct line_header\n      element is standard_opcode_lengths[opcode_base - 1].  */\n   std::unique_ptr<unsigned char[]> standard_opcode_lengths;\n \n-  int file_names_size ()\n+  int file_names_size () const\n   { return m_file_names.size(); }\n \n   /* The start and end of the statement program following this\n@@ -157,13 +167,13 @@ struct line_header\n      compilation.  The result is allocated using xmalloc; the caller\n      is responsible for freeing it.  */\n   gdb::unique_xmalloc_ptr<char> file_full_name (int file,\n-\t\t\t\t\t\tconst char *comp_dir);\n+\t\t\t\t\t\tconst char *comp_dir) const;\n \n   /* Return file name relative to the compilation directory of file\n      number I in this object's file name table.  The result is\n      allocated using xmalloc; the caller is responsible for freeing\n      it.  */\n-  gdb::unique_xmalloc_ptr<char> file_file_name (int file);\n+  gdb::unique_xmalloc_ptr<char> file_file_name (int file) const;\n \n  private:\n   /* The include_directories table.  Note these are observing"
    }
  ]
}