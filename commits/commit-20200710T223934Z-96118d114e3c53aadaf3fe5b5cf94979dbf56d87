{
  "sha": "96118d114e3c53aadaf3fe5b5cf94979dbf56d87",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTYxMThkMTE0ZTNjNTNhYWRhZjNmZTViNWNmOTQ5NzlkYmY1NmQ4Nw==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-07-10T22:39:34Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-07-10T22:39:34Z"
    },
    "message": "Fix spurious unhandled remote %Stop notifications\n\nIn non-stop mode, remote targets mark an async event source whose\ncallback is supposed to result in calling remote_target::wait_ns to\neither process the event queue, or acknowledge an incoming %Stop\nnotification.\n\nThe callback in question is remote_async_inferior_event_handler, where\nwe call inferior_event_handler, to end up in fetch_inferior_event ->\ntarget_wait -> remote_target::wait -> remote_target::wait_ns.\n\nA problem here however is that when debugging multiple targets,\nfetch_inferior_event can pull events out of any target picked at\nrandom, for event fairness.  This means that when\nremote_async_inferior_event_handler returns, remote_target::wait may\nhave not been called at all, and thus pending notifications may have\nnot been acked.  Because async event sources auto-clear, when\nremote_async_inferior_event_handler returns the async event handler is\nno longer marked, so the event loop won't automatically call\nremote_async_inferior_event_handler again to try to process the\npending remote notifications/queue.  The result is that stop events\nmay end up not processed, e.g., \"interrupt -a\" seemingly not managing\nto stop all threads.\n\nFix this by making remote_async_inferior_event_handler mark the event\nhandler again before returning, if necessary.\n\nMaybe a better fix would be to make async event handlers not\nauto-clear themselves, make that the responsibility of the callback,\nso that the event loop would keep calling the callback automatically.\nOr, we could try making so that fetch_inferior_event would optionally\nhandle events only for the target that it got passed down via\nparameter.  However, I don't think now just before branching is the\ntime to try to do any such change.\n\ngdb/ChangeLog:\n\n\tPR gdb/26199\n\t* remote.c (remote_target::open_1): Pass remote target pointer as\n\tdata to create_async_event_handler.\n\t(remote_async_inferior_event_handler): Mark async event handler\n\tbefore returning if the remote target still has either pending\n\tevents or unacknowledged notifications.",
    "tree": {
      "sha": "3353dc8f58455ff61922c7b2ff1f266dbd954f9d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3353dc8f58455ff61922c7b2ff1f266dbd954f9d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/96118d114e3c53aadaf3fe5b5cf94979dbf56d87",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96118d114e3c53aadaf3fe5b5cf94979dbf56d87",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/96118d114e3c53aadaf3fe5b5cf94979dbf56d87",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96118d114e3c53aadaf3fe5b5cf94979dbf56d87/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "54904d818b4d6b71101d4eec4bfab6342617ea5e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/54904d818b4d6b71101d4eec4bfab6342617ea5e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/54904d818b4d6b71101d4eec4bfab6342617ea5e"
    }
  ],
  "stats": {
    "total": 24,
    "additions": 23,
    "deletions": 1
  },
  "files": [
    {
      "sha": "b90e45581d33022f8f9348198e56a7ceecf9fbe5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96118d114e3c53aadaf3fe5b5cf94979dbf56d87/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96118d114e3c53aadaf3fe5b5cf94979dbf56d87/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=96118d114e3c53aadaf3fe5b5cf94979dbf56d87",
      "patch": "@@ -1,3 +1,12 @@\n+2020-07-10  Pedro Alves  <pedro@palves.net>\n+\n+\tPR gdb/26199\n+\t* remote.c (remote_target::open_1): Pass remote target pointer as\n+\tdata to create_async_event_handler.\n+\t(remote_async_inferior_event_handler): Mark async event handler\n+\tbefore returning if the remote target still has either pending\n+\tevents or unacknowledged notifications.\n+\n 2020-07-10  John Baldwin  <jhb@FreeBSD.org>\n \n \t* fbsd-nat.h (fbsd_nat_target::supports_multi_process): New"
    },
    {
      "sha": "59075cb09f2052cac6a9332e8ce553c92bf037dd",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 14,
      "deletions": 1,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96118d114e3c53aadaf3fe5b5cf94979dbf56d87/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96118d114e3c53aadaf3fe5b5cf94979dbf56d87/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=96118d114e3c53aadaf3fe5b5cf94979dbf56d87",
      "patch": "@@ -5605,7 +5605,7 @@ remote_target::open_1 (const char *name, int from_tty, int extended_p)\n \n   /* Register extra event sources in the event loop.  */\n   rs->remote_async_inferior_event_token\n-    = create_async_event_handler (remote_async_inferior_event_handler, NULL);\n+    = create_async_event_handler (remote_async_inferior_event_handler, remote);\n   rs->notif_state = remote_notif_state_allocate (remote);\n \n   /* Reset the target state; these things will be queried either by\n@@ -14164,6 +14164,19 @@ static void\n remote_async_inferior_event_handler (gdb_client_data data)\n {\n   inferior_event_handler (INF_REG_EVENT);\n+\n+  remote_target *remote = (remote_target *) data;\n+  remote_state *rs = remote->get_remote_state ();\n+\n+  /* inferior_event_handler may have consumed an event pending on the\n+     infrun side without calling target_wait on the REMOTE target, or\n+     may have pulled an event out of a different target.  Keep trying\n+     for this remote target as long it still has either pending events\n+     or unacknowledged notifications.  */\n+\n+  if (rs->notif_state->pending_event[notif_client_stop.id] != NULL\n+      || !rs->stop_reply_queue.empty ())\n+    mark_async_event_handler (rs->remote_async_inferior_event_token);\n }\n \n int"
    }
  ]
}