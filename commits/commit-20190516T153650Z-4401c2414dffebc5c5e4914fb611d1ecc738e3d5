{
  "sha": "4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDQwMWMyNDE0ZGZmZWJjNWM1ZTQ5MTRmYjYxMWQxZWNjNzM4ZTNkNQ==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T11:08:38Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:36:50Z"
    },
    "message": "[PATCH 33/57][Arm][GAS] Add support for MVE instructions: vshr, vrshr, vsli, vsri, vrev16, vrev32 and vrev64\n\ngas/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/tc-arm.c (do_neon_sli): Accept MVE variants.\n\t(do_neon_sri): Likewise.\n\t(do_neon_rev): Likewise.\n\t(do_neon_rshift_round_imm): Likewise.\n\t(insns): Likewise.\n\t* testsuite/gas/arm/mve-vrev-bad.d: New test.\n\t* testsuite/gas/arm/mve-vrev-bad.l: New test.\n\t* testsuite/gas/arm/mve-vrev-bad.s: New test.\n\t* testsuite/gas/arm/mve-vshr-bad.d: New test.\n\t* testsuite/gas/arm/mve-vshr-bad.l: New test.\n\t* testsuite/gas/arm/mve-vshr-bad.s: New test.\n\t* testsuite/gas/arm/mve-vsli-bad.d: New test.\n\t* testsuite/gas/arm/mve-vsli-bad.l: New test.\n\t* testsuite/gas/arm/mve-vsli-bad.s: New test.\n\t* testsuite/gas/arm/mve-vsri-bad.d: New test.\n\t* testsuite/gas/arm/mve-vsri-bad.l: New test.\n\t* testsuite/gas/arm/mve-vsri-bad.s: New test.",
    "tree": {
      "sha": "88401f491e1e3d20f6c8e51537a677544dacb3ba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/88401f491e1e3d20f6c8e51537a677544dacb3ba"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a710b305c5ca8307e8b9d14bbb014641f60d3b48",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a710b305c5ca8307e8b9d14bbb014641f60d3b48",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a710b305c5ca8307e8b9d14bbb014641f60d3b48"
    }
  ],
  "stats": {
    "total": 359,
    "additions": 343,
    "deletions": 16
  },
  "files": [
    {
      "sha": "a2d8e06212b013fbcfc65b922d3f5c39403e35f9",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
      "patch": "@@ -1,3 +1,23 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/tc-arm.c (do_neon_sli): Accept MVE variants.\n+\t(do_neon_sri): Likewise.\n+\t(do_neon_rev): Likewise.\n+\t(do_neon_rshift_round_imm): Likewise.\n+\t(insns): Likewise.\n+\t* testsuite/gas/arm/mve-vrev-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vrev-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vrev-bad.s: New test.\n+\t* testsuite/gas/arm/mve-vshr-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vshr-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vshr-bad.s: New test.\n+\t* testsuite/gas/arm/mve-vsli-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vsli-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vsli-bad.s: New test.\n+\t* testsuite/gas/arm/mve-vsri-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vsri-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vsri-bad.s: New test.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/tc-arm.c (do_vrint_1): Accept MVE variants."
    },
    {
      "sha": "a06d8389c6ca6eb5cb6e28411592a270c03e21a2",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 72,
      "deletions": 16,
      "changes": 88,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
      "patch": "@@ -17873,9 +17873,23 @@ do_neon_abs_neg (void)\n static void\n do_neon_sli (void)\n {\n-  enum neon_shape rs = neon_select_shape (NS_DDI, NS_QQI, NS_NULL);\n-  struct neon_type_el et = neon_check_type (2, rs,\n-    N_EQK, N_8 | N_16 | N_32 | N_64 | N_KEY);\n+  if (check_simd_pred_availability (0, NEON_CHECK_ARCH | NEON_CHECK_CC))\n+    return;\n+\n+  enum neon_shape rs;\n+  struct neon_type_el et;\n+  if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+    {\n+      rs = neon_select_shape (NS_QQI, NS_NULL);\n+      et = neon_check_type (2, rs, N_EQK, N_8 | N_16 | N_32 | N_KEY);\n+    }\n+  else\n+    {\n+      rs = neon_select_shape (NS_DDI, NS_QQI, NS_NULL);\n+      et = neon_check_type (2, rs, N_EQK, N_8 | N_16 | N_32 | N_64 | N_KEY);\n+    }\n+\n+\n   int imm = inst.operands[2].imm;\n   constraint (imm < 0 || (unsigned)imm >= et.size,\n \t      _(\"immediate out of range for insert\"));\n@@ -17885,9 +17899,22 @@ do_neon_sli (void)\n static void\n do_neon_sri (void)\n {\n-  enum neon_shape rs = neon_select_shape (NS_DDI, NS_QQI, NS_NULL);\n-  struct neon_type_el et = neon_check_type (2, rs,\n-    N_EQK, N_8 | N_16 | N_32 | N_64 | N_KEY);\n+  if (check_simd_pred_availability (0, NEON_CHECK_ARCH | NEON_CHECK_CC))\n+    return;\n+\n+  enum neon_shape rs;\n+  struct neon_type_el et;\n+  if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+    {\n+      rs = neon_select_shape (NS_QQI, NS_NULL);\n+      et = neon_check_type (2, rs, N_EQK, N_8 | N_16 | N_32 | N_KEY);\n+    }\n+  else\n+    {\n+      rs = neon_select_shape (NS_DDI, NS_QQI, NS_NULL);\n+      et = neon_check_type (2, rs, N_EQK, N_8 | N_16 | N_32 | N_64 | N_KEY);\n+    }\n+\n   int imm = inst.operands[2].imm;\n   constraint (imm < 1 || (unsigned)imm > et.size,\n \t      _(\"immediate out of range for insert\"));\n@@ -19112,14 +19139,29 @@ do_neon_ext (void)\n static void\n do_neon_rev (void)\n {\n-  enum neon_shape rs = neon_select_shape (NS_DD, NS_QQ, NS_NULL);\n+  if (check_simd_pred_availability (0, NEON_CHECK_ARCH | NEON_CHECK_CC))\n+   return;\n+\n+  enum neon_shape rs;\n+  if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+    rs = neon_select_shape (NS_QQ, NS_NULL);\n+  else\n+    rs = neon_select_shape (NS_DD, NS_QQ, NS_NULL);\n+\n   struct neon_type_el et = neon_check_type (2, rs,\n     N_EQK, N_8 | N_16 | N_32 | N_KEY);\n+\n   unsigned op = (inst.instruction >> 7) & 3;\n   /* N (width of reversed regions) is encoded as part of the bitmask. We\n      extract it here to check the elements to be reversed are smaller.\n      Otherwise we'd get a reserved instruction.  */\n   unsigned elsize = (op == 2) ? 16 : (op == 1) ? 32 : (op == 0) ? 64 : 0;\n+\n+  if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext) && elsize == 64\n+      && inst.operands[0].reg == inst.operands[1].reg)\n+    as_tsktsk (_(\"Warning: 64-bit element size and same destination and source\"\n+\t\t \" operands makes instruction UNPREDICTABLE\"));\n+\n   gas_assert (elsize != 0);\n   constraint (et.size >= elsize,\n \t      _(\"elements must be smaller than reversal region\"));\n@@ -19663,8 +19705,22 @@ do_mve_movl (void)\n static void\n do_neon_rshift_round_imm (void)\n {\n-  enum neon_shape rs = neon_select_shape (NS_DDI, NS_QQI, NS_NULL);\n-  struct neon_type_el et = neon_check_type (2, rs, N_EQK, N_SU_ALL | N_KEY);\n+  if (check_simd_pred_availability (0, NEON_CHECK_ARCH | NEON_CHECK_CC))\n+   return;\n+\n+  enum neon_shape rs;\n+  struct neon_type_el et;\n+\n+  if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+    {\n+      rs = neon_select_shape (NS_QQI, NS_NULL);\n+      et = neon_check_type (2, rs, N_EQK, N_SU_MVE | N_KEY);\n+    }\n+  else\n+    {\n+      rs = neon_select_shape (NS_DDI, NS_QQI, NS_NULL);\n+      et = neon_check_type (2, rs, N_EQK, N_SU_ALL | N_KEY);\n+    }\n   int imm = inst.operands[2].imm;\n \n   /* imm == 0 case is encoded as VMOV for V{R}SHR.  */\n@@ -24323,18 +24379,14 @@ static const struct asm_opcode insns[] =\n   /* Data processing with two registers and a shift amount.  */\n   /* Right shifts, and variants with rounding.\n      Types accepted S8 S16 S32 S64 U8 U16 U32 U64.  */\n- NUF(vshr,      0800010, 3, (RNDQ, oRNDQ, I64z), neon_rshift_round_imm),\n  NUF(vshrq,     0800010, 3, (RNQ,  oRNQ,  I64z), neon_rshift_round_imm),\n- NUF(vrshr,     0800210, 3, (RNDQ, oRNDQ, I64z), neon_rshift_round_imm),\n  NUF(vrshrq,    0800210, 3, (RNQ,  oRNQ,  I64z), neon_rshift_round_imm),\n  NUF(vsra,      0800110, 3, (RNDQ, oRNDQ, I64),  neon_rshift_round_imm),\n  NUF(vsraq,     0800110, 3, (RNQ,  oRNQ,  I64),  neon_rshift_round_imm),\n  NUF(vrsra,     0800310, 3, (RNDQ, oRNDQ, I64),  neon_rshift_round_imm),\n  NUF(vrsraq,    0800310, 3, (RNQ,  oRNQ,  I64),  neon_rshift_round_imm),\n   /* Shift and insert. Sizes accepted 8 16 32 64.  */\n- NUF(vsli,      1800510, 3, (RNDQ, oRNDQ, I63), neon_sli),\n  NUF(vsliq,     1800510, 3, (RNQ,  oRNQ,  I63), neon_sli),\n- NUF(vsri,      1800410, 3, (RNDQ, oRNDQ, I64), neon_sri),\n  NUF(vsriq,     1800410, 3, (RNQ,  oRNQ,  I64), neon_sri),\n   /* QSHL{U} immediate accepts S8 S16 S32 S64 U8 U16 U32 U64.  */\n  NUF(vqshlu,    1800610, 3, (RNDQ, oRNDQ, I63), neon_qshlu_imm),\n@@ -24385,11 +24437,8 @@ static const struct asm_opcode insns[] =\n \n   /* Two registers, miscellaneous.  */\n   /* Reverse. Sizes 8 16 32 (must be < size in opcode).  */\n- NUF(vrev64,    1b00000, 2, (RNDQ, RNDQ),     neon_rev),\n  NUF(vrev64q,   1b00000, 2, (RNQ,  RNQ),      neon_rev),\n- NUF(vrev32,    1b00080, 2, (RNDQ, RNDQ),     neon_rev),\n  NUF(vrev32q,   1b00080, 2, (RNQ,  RNQ),      neon_rev),\n- NUF(vrev16,    1b00100, 2, (RNDQ, RNDQ),     neon_rev),\n  NUF(vrev16q,   1b00100, 2, (RNQ,  RNQ),      neon_rev),\n   /* Vector replicate. Sizes 8 16 32.  */\n  nCE(vdupq,     _vdup,    2, (RNQ,  RR_RNSC),  neon_dup),\n@@ -25109,6 +25158,13 @@ static const struct asm_opcode insns[] =\n  mnUF(vqrdmulh,  _vqrdmulh,3, (RNDQMQ, oRNDQMQ, RNDQMQ_RNSC_RR), neon_qdmulh),\n  MNUF(vqrshl,    0000510,  3, (RNDQMQ, oRNDQMQ, RNDQMQR), neon_rshl),\n  MNUF(vrshl,     0000500,  3, (RNDQMQ, oRNDQMQ, RNDQMQR), neon_rshl),\n+ MNUF(vshr,      0800010,  3, (RNDQMQ, oRNDQMQ, I64z), neon_rshift_round_imm),\n+ MNUF(vrshr,     0800210,  3, (RNDQMQ, oRNDQMQ, I64z), neon_rshift_round_imm),\n+ MNUF(vsli,      1800510,  3, (RNDQMQ, oRNDQMQ, I63),  neon_sli),\n+ MNUF(vsri,      1800410,  3, (RNDQMQ, oRNDQMQ, I64z), neon_sri),\n+ MNUF(vrev64,    1b00000,  2, (RNDQMQ, RNDQMQ),     neon_rev),\n+ MNUF(vrev32,    1b00080,  2, (RNDQMQ, RNDQMQ),     neon_rev),\n+ MNUF(vrev16,    1b00100,  2, (RNDQMQ, RNDQMQ),     neon_rev),\n \n #undef\tARM_VARIANT\n #define ARM_VARIANT & arm_ext_v8_3"
    },
    {
      "sha": "8051d7bd01d003ce4257894eb90755f13a6d16af",
      "filename": "gas/testsuite/gas/arm/mve-vrev-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vrev-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vrev-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vrev-bad.d?ref=4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VREV16, VREV32 and VREV64 instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vrev-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "028c2532762284ad7c0fdb4f7fd6a6868f6ed5a8",
      "filename": "gas/testsuite/gas/arm/mve-vrev-bad.l",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vrev-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vrev-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vrev-bad.l?ref=4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
      "patch": "@@ -0,0 +1,38 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: elements must be smaller than reversal region -- `vrev16.16 q0,q1'\n+[^:]*:11: Error: elements must be smaller than reversal region -- `vrev32.32 q0,q1'\n+[^:]*:12: Error: elements must be smaller than reversal region -- `vrev64.64 q0,q1'\n+[^:]*:13: Warning: 64-bit element size and same destination and source operands makes instruction UNPREDICTABLE\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:15: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:16: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:16: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:16: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:16: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:16: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:16: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:18: Error: syntax error -- `vrev16eq.8 q0,q1'\n+[^:]*:19: Error: syntax error -- `vrev16eq.8 q0,q1'\n+[^:]*:21: Error: syntax error -- `vrev16eq.8 q0,q1'\n+[^:]*:22: Error: vector predicated instruction should be in VPT/VPST block -- `vrev16t.8 q0,q1'\n+[^:]*:24: Error: instruction missing MVE vector predication code -- `vrev16.8 q0,q1'\n+[^:]*:26: Error: syntax error -- `vrev32eq.8 q0,q1'\n+[^:]*:27: Error: syntax error -- `vrev32eq.8 q0,q1'\n+[^:]*:29: Error: syntax error -- `vrev32eq.8 q0,q1'\n+[^:]*:30: Error: vector predicated instruction should be in VPT/VPST block -- `vrev32t.8 q0,q1'\n+[^:]*:32: Error: instruction missing MVE vector predication code -- `vrev32.8 q0,q1'\n+[^:]*:34: Error: syntax error -- `vrev64eq.8 q0,q1'\n+[^:]*:35: Error: syntax error -- `vrev64eq.8 q0,q1'\n+[^:]*:37: Error: syntax error -- `vrev64eq.8 q0,q1'\n+[^:]*:38: Error: vector predicated instruction should be in VPT/VPST block -- `vrev64t.8 q0,q1'\n+[^:]*:40: Error: instruction missing MVE vector predication code -- `vrev64.8 q0,q1'"
    },
    {
      "sha": "b1b5acab71d43ef12d4a8d8a9b41006c892733c2",
      "filename": "gas/testsuite/gas/arm/mve-vrev-bad.s",
      "status": "added",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vrev-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vrev-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vrev-bad.s?ref=4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
      "patch": "@@ -0,0 +1,40 @@\n+.macro cond op\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+\\op\\().8 q0, q1\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vrev16.16 q0, q1\n+vrev32.32 q0, q1\n+vrev64.64 q0, q1\n+vrev64.8  q0, q0\n+cond vrev16\n+cond vrev32\n+cond vrev64\n+it eq\n+vrev16eq.8 q0, q1\n+vrev16eq.8 q0, q1\n+vpst\n+vrev16eq.8 q0, q1\n+vrev16t.8 q0, q1\n+vpst\n+vrev16.8 q0, q1\n+it eq\n+vrev32eq.8 q0, q1\n+vrev32eq.8 q0, q1\n+vpst\n+vrev32eq.8 q0, q1\n+vrev32t.8 q0, q1\n+vpst\n+vrev32.8 q0, q1\n+it eq\n+vrev64eq.8 q0, q1\n+vrev64eq.8 q0, q1\n+vpst\n+vrev64eq.8 q0, q1\n+vrev64t.8 q0, q1\n+vpst\n+vrev64.8 q0, q1"
    },
    {
      "sha": "12a9937846b03dd0614304743ccfe368c88e7925",
      "filename": "gas/testsuite/gas/arm/mve-vshr-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vshr-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vshr-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vshr-bad.d?ref=4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VSHR and VRSHR instructions\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-vshr-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "38fb370a6d7dc11ddbefabea0a45f347d277606b",
      "filename": "gas/testsuite/gas/arm/mve-vshr-bad.l",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vshr-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vshr-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vshr-bad.l?ref=4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
      "patch": "@@ -0,0 +1,33 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: bad type in SIMD instruction -- `vshr.s64 q0,q1,#1'\n+[^:]*:11: Error: bad type in SIMD instruction -- `vshr.i32 q0,q1,#1'\n+[^:]*:12: Error: bad type in SIMD instruction -- `vrshr.u64 q0,q1,#1'\n+[^:]*:13: Error: bad type in SIMD instruction -- `vrshr.i32 q0,q1,#1'\n+[^:]*:14: Error: immediate out of range for shift -- `vshr.s8 q0,q1,#9'\n+[^:]*:15: Error: immediate out of range for shift -- `vshr.u8 q0,q1,#9'\n+[^:]*:16: Error: immediate out of range for shift -- `vshr.s16 q0,q1,#17'\n+[^:]*:17: Error: immediate out of range for shift -- `vshr.u16 q0,q1,#17'\n+[^:]*:18: Error: immediate out of range for shift -- `vshr.s32 q0,q1,#33'\n+[^:]*:19: Error: immediate out of range for shift -- `vshr.u32 q0,q1,#33'\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:21: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:21: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:21: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:21: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:21: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:21: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:23: Error: syntax error -- `vshreq.s32 q0,q1,#1'\n+[^:]*:24: Error: syntax error -- `vshreq.s32 q0,q1,#1'\n+[^:]*:26: Error: syntax error -- `vshreq.s32 q0,q1,#1'\n+[^:]*:27: Error: vector predicated instruction should be in VPT/VPST block -- `vshrt.s32 q0,q1,#1'\n+[^:]*:29: Error: instruction missing MVE vector predication code -- `vshr.s32 q0,q1,#1'\n+[^:]*:31: Error: syntax error -- `vrshreq.s32 q0,q1,#1'\n+[^:]*:32: Error: syntax error -- `vrshreq.s32 q0,q1,#1'\n+[^:]*:34: Error: syntax error -- `vrshreq.s32 q0,q1,#1'\n+[^:]*:35: Error: vector predicated instruction should be in VPT/VPST block -- `vrshrt.s32 q0,q1,#1'\n+[^:]*:37: Error: instruction missing MVE vector predication code -- `vrshr.s32 q0,q1,#1'"
    },
    {
      "sha": "2ec9f57121cfc78e16673df3f03b3e11112ae8e8",
      "filename": "gas/testsuite/gas/arm/mve-vshr-bad.s",
      "status": "added",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vshr-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vshr-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vshr-bad.s?ref=4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
      "patch": "@@ -0,0 +1,37 @@\n+.macro cond op\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+\\op\\().s32 q0, q1, #1\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vshr.s64 q0, q1, #1\n+vshr.i32 q0, q1, #1\n+vrshr.u64 q0, q1, #1\n+vrshr.i32 q0, q1, #1\n+vshr.s8 q0, q1, #9\n+vshr.u8 q0, q1, #9\n+vshr.s16 q0, q1, #17\n+vshr.u16 q0, q1, #17\n+vshr.s32 q0, q1, #33\n+vshr.u32 q0, q1, #33\n+cond vshr\n+cond vrshr\n+it eq\n+vshreq.s32 q0, q1, #1\n+vshreq.s32 q0, q1, #1\n+vpst\n+vshreq.s32 q0, q1, #1\n+vshrt.s32 q0, q1, #1\n+vpst\n+vshr.s32 q0, q1, #1\n+it eq\n+vrshreq.s32 q0, q1, #1\n+vrshreq.s32 q0, q1, #1\n+vpst\n+vrshreq.s32 q0, q1, #1\n+vrshrt.s32 q0, q1, #1\n+vpst\n+vrshr.s32 q0, q1, #1"
    },
    {
      "sha": "a0a9a2a588209350f4d7d6c89b9a25871bd2d55b",
      "filename": "gas/testsuite/gas/arm/mve-vsli-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vsli-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vsli-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vsli-bad.d?ref=4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VSLI instructions\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-vsli-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "bde2a6d23b4df3b1ed05e83c6caea4ea0f067154",
      "filename": "gas/testsuite/gas/arm/mve-vsli-bad.l",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vsli-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vsli-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vsli-bad.l?ref=4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
      "patch": "@@ -0,0 +1,16 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: bad type in SIMD instruction -- `vsli.64 q0,q1,#1'\n+[^:]*:11: Error: immediate out of range for insert -- `vsli.8 q0,q1,#8'\n+[^:]*:12: Error: immediate out of range for insert -- `vsli.16 q0,q1,#16'\n+[^:]*:13: Error: immediate out of range for insert -- `vsli.32 q0,q1,#32'\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:14: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:16: Error: syntax error -- `vslieq.8 q0,q1,#2'\n+[^:]*:17: Error: syntax error -- `vslieq.8 q0,q1,#2'\n+[^:]*:19: Error: syntax error -- `vslieq.8 q0,q1,#2'\n+[^:]*:20: Error: vector predicated instruction should be in VPT/VPST block -- `vslit.8 q0,q1,#2'\n+[^:]*:22: Error: instruction missing MVE vector predication code -- `vsli.8 q0,q1,#2'"
    },
    {
      "sha": "0bb17830cc32f3582a76a3f30afbcbbc794f35e1",
      "filename": "gas/testsuite/gas/arm/mve-vsli-bad.s",
      "status": "added",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vsli-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vsli-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vsli-bad.s?ref=4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
      "patch": "@@ -0,0 +1,22 @@\n+.macro cond\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vsli.16 q0, q1, #4\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vsli.64 q0, q1, #1\n+vsli.8 q0, q1, #8\n+vsli.16 q0, q1, #16\n+vsli.32 q0, q1, #32\n+cond\n+it eq\n+vslieq.8 q0, q1, #2\n+vslieq.8 q0, q1, #2\n+vpst\n+vslieq.8 q0, q1, #2\n+vslit.8 q0, q1, #2\n+vpst\n+vsli.8 q0, q1, #2"
    },
    {
      "sha": "77e0a24a053d57d66983eb7abcfd96b83919619d",
      "filename": "gas/testsuite/gas/arm/mve-vsri-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vsri-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vsri-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vsri-bad.d?ref=4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VSRI instructions\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-vsri-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "1d7df2072b5d5e1233c4e535d89e6e1b43ee4e5c",
      "filename": "gas/testsuite/gas/arm/mve-vsri-bad.l",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vsri-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vsri-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vsri-bad.l?ref=4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
      "patch": "@@ -0,0 +1,19 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: bad type in SIMD instruction -- `vsri.64 q0,q1,#1'\n+[^:]*:11: Error: immediate out of range for insert -- `vsri.8 q0,q1,#0'\n+[^:]*:12: Error: immediate out of range for insert -- `vsri.8 q0,q1,#9'\n+[^:]*:13: Error: immediate out of range for insert -- `vsri.16 q0,q1,#0'\n+[^:]*:14: Error: immediate out of range for insert -- `vsri.16 q0,q1,#17'\n+[^:]*:15: Error: immediate out of range for insert -- `vsri.32 q0,q1,#0'\n+[^:]*:16: Error: immediate out of range for insert -- `vsri.32 q0,q1,#33'\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:19: Error: syntax error -- `vsrieq.8 q0,q1,#2'\n+[^:]*:20: Error: syntax error -- `vsrieq.8 q0,q1,#2'\n+[^:]*:22: Error: syntax error -- `vsrieq.8 q0,q1,#2'\n+[^:]*:23: Error: vector predicated instruction should be in VPT/VPST block -- `vsrit.8 q0,q1,#2'\n+[^:]*:25: Error: instruction missing MVE vector predication code -- `vsri.8 q0,q1,#2'"
    },
    {
      "sha": "4f07014f6321716b6ae1f3c96fadcf7555b97a4f",
      "filename": "gas/testsuite/gas/arm/mve-vsri-bad.s",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vsri-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4401c2414dffebc5c5e4914fb611d1ecc738e3d5/gas/testsuite/gas/arm/mve-vsri-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vsri-bad.s?ref=4401c2414dffebc5c5e4914fb611d1ecc738e3d5",
      "patch": "@@ -0,0 +1,26 @@\n+.macro cond\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vsri.16 q0, q1, #4\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vsri.64 q0, q1, #1\n+vsri.8 q0, q1, #0\n+vsri.8 q0, q1, #9\n+vsri.16 q0, q1, #0\n+vsri.16 q0, q1, #17\n+vsri.32 q0, q1, #0\n+vsri.32 q0, q1, #33\n+cond\n+it eq\n+vsrieq.8 q0, q1, #2\n+vsrieq.8 q0, q1, #2\n+vpst\n+vsrieq.8 q0, q1, #2\n+vsrit.8 q0, q1, #2\n+vpst\n+vsri.8 q0, q1, #2\n+"
    }
  ]
}