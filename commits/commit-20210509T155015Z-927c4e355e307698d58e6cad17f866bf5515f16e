{
  "sha": "927c4e355e307698d58e6cad17f866bf5515f16e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTI3YzRlMzU1ZTMwNzY5OGQ1OGU2Y2FkMTdmODY2YmY1NTE1ZjE2ZQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-05-08T14:43:56Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-05-09T15:50:15Z"
    },
    "message": "gdb: replace fprint_frame_id\n\nReplace fprint_frame_id with a member function frame_id::to_string\nthat returns a std::string.  Convert all of the previous users of\nfprint_frame_id to use the new member function.  This means that\ninstead of writing things like this:\n\n  fprintf_unfiltered (file, \" id=\");\n  fprint_frame_id (file, s->id.id);\n\nWe can write this:\n\n  fprintf_unfiltered (file, \" id=%s\", s->id.id.to_string ().c_str ());\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* dummy-frame.c (fprint_dummy_frames): Convert use of\n\tfprint_frame_id to use frame_id::to_string.\n\t* frame.c (fprint_field): Delete.\n\t(fprint_frame_id): Moved to...\n\t(frame_id::to_string): ...this, rewritten to return a string.\n\t(fprint_frame): Convert use of fprint_frame_id to use\n\tframe_id::to_string.\n\t(compute_frame_id): Likewise.\n\t(frame_id_p): Likewise.\n\t(frame_id_eq): Likewise.\n\t(frame_id_inner): Likewise.\n\t* frame.h (struct frame_id) <to_string>: New member function.\n\t(fprint_frame_id): Delete declaration.\n\t* guile/scm-frame.c (frscm_print_frame_smob): Convert use of\n\tfprint_frame_id to use frame_id::to_string.\n\t* python/py-frame.c (frame_object_to_frame_info): Likewise.\n\t* python/py-unwind.c (unwind_infopy_str): Likewise.\n\t(pyuw_this_id): Likewise.",
    "tree": {
      "sha": "710668ca49bc67b07e1a8741517028e5aa6ef32e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/710668ca49bc67b07e1a8741517028e5aa6ef32e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/927c4e355e307698d58e6cad17f866bf5515f16e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/927c4e355e307698d58e6cad17f866bf5515f16e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/927c4e355e307698d58e6cad17f866bf5515f16e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/927c4e355e307698d58e6cad17f866bf5515f16e/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4821e618adddf77138279883b72e87c2211418d5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4821e618adddf77138279883b72e87c2211418d5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4821e618adddf77138279883b72e87c2211418d5"
    }
  ],
  "stats": {
    "total": 143,
    "additions": 68,
    "deletions": 75
  },
  "files": [
    {
      "sha": "23710bc7bad2d9c42a803037f0e466c74dd2f8c3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/927c4e355e307698d58e6cad17f866bf5515f16e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/927c4e355e307698d58e6cad17f866bf5515f16e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=927c4e355e307698d58e6cad17f866bf5515f16e",
      "patch": "@@ -1,3 +1,24 @@\n+2021-05-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* dummy-frame.c (fprint_dummy_frames): Convert use of\n+\tfprint_frame_id to use frame_id::to_string.\n+\t* frame.c (fprint_field): Delete.\n+\t(fprint_frame_id): Moved to...\n+\t(frame_id::to_string): ...this, rewritten to return a string.\n+\t(fprint_frame): Convert use of fprint_frame_id to use\n+\tframe_id::to_string.\n+\t(compute_frame_id): Likewise.\n+\t(frame_id_p): Likewise.\n+\t(frame_id_eq): Likewise.\n+\t(frame_id_inner): Likewise.\n+\t* frame.h (struct frame_id) <to_string>: New member function.\n+\t(fprint_frame_id): Delete declaration.\n+\t* guile/scm-frame.c (frscm_print_frame_smob): Convert use of\n+\tfprint_frame_id to use frame_id::to_string.\n+\t* python/py-frame.c (frame_object_to_frame_info): Likewise.\n+\t* python/py-unwind.c (unwind_infopy_str): Likewise.\n+\t(pyuw_this_id): Likewise.\n+\n 2021-05-08  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* nat/linux-waitpid.c (status_to_str): Return std::string."
    },
    {
      "sha": "155dec377f34435a4cf1cbedac3636a20889daab",
      "filename": "gdb/dummy-frame.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/927c4e355e307698d58e6cad17f866bf5515f16e/gdb/dummy-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/927c4e355e307698d58e6cad17f866bf5515f16e/gdb/dummy-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dummy-frame.c?ref=927c4e355e307698d58e6cad17f866bf5515f16e",
      "patch": "@@ -408,8 +408,7 @@ fprint_dummy_frames (struct ui_file *file)\n     {\n       gdb_print_host_address (s, file);\n       fprintf_unfiltered (file, \":\");\n-      fprintf_unfiltered (file, \" id=\");\n-      fprint_frame_id (file, s->id.id);\n+      fprintf_unfiltered (file, \" id=%s\", s->id.id.to_string ().c_str ());\n       fprintf_unfiltered (file, \", ptid=%s\",\n \t\t\t  target_pid_to_str (s->id.thread->ptid).c_str ());\n       fprintf_unfiltered (file, \"\\n\");"
    },
    {
      "sha": "cd10f3f0770b593e1b7ba8e0f4a8a08e7f705c07",
      "filename": "gdb/frame.c",
      "status": "modified",
      "additions": 35,
      "deletions": 49,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/927c4e355e307698d58e6cad17f866bf5515f16e/gdb/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/927c4e355e307698d58e6cad17f866bf5515f16e/gdb/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.c?ref=927c4e355e307698d58e6cad17f866bf5515f16e",
      "patch": "@@ -373,43 +373,44 @@ show_backtrace_limit (struct ui_file *file, int from_tty,\n \t\t    value);\n }\n \n+/* See frame.h.  */\n \n-static void\n-fprint_field (struct ui_file *file, const char *name, int p, CORE_ADDR addr)\n+std::string\n+frame_id::to_string () const\n {\n-  if (p)\n-    fprintf_unfiltered (file, \"%s=%s\", name, hex_string (addr));\n-  else\n-    fprintf_unfiltered (file, \"!%s\", name);\n-}\n+  const struct frame_id &id = *this;\n \n-void\n-fprint_frame_id (struct ui_file *file, struct frame_id id)\n-{\n-  fprintf_unfiltered (file, \"{\");\n+  std::string res = \"{\";\n \n   if (id.stack_status == FID_STACK_INVALID)\n-    fprintf_unfiltered (file, \"!stack\");\n+    res += \"!stack\";\n   else if (id.stack_status == FID_STACK_UNAVAILABLE)\n-    fprintf_unfiltered (file, \"stack=<unavailable>\");\n+    res += \"stack=<unavailable>\";\n   else if (id.stack_status == FID_STACK_SENTINEL)\n-    fprintf_unfiltered (file, \"stack=<sentinel>\");\n+    res += \"stack=<sentinel>\";\n   else if (id.stack_status == FID_STACK_OUTER)\n-    fprintf_unfiltered (file, \"stack=<outer>\");\n+    res += \"stack=<outer>\";\n   else\n-    fprintf_unfiltered (file, \"stack=%s\", hex_string (id.stack_addr));\n-\n-  fprintf_unfiltered (file, \",\");\n+    res += std::string (\"stack=\") + hex_string (id.stack_addr);\n \n-  fprint_field (file, \"code\", id.code_addr_p, id.code_addr);\n-  fprintf_unfiltered (file, \",\");\n+  /* Helper function to format 'N=A' if P is true, otherwise '!N'.  */\n+  auto field_to_string = [] (const char *n, bool p, CORE_ADDR a) -> std::string\n+  {\n+    if (p)\n+      return std::string (n) + \"=\" + core_addr_to_string (a);\n+    else\n+      return std::string (\"!\") + std::string (n);\n+  };\n \n-  fprint_field (file, \"special\", id.special_addr_p, id.special_addr);\n+  res += (std::string (\",\")\n+\t  + field_to_string (\"code\", id.code_addr_p, id.code_addr)\n+\t  + std::string (\",\")\n+\t  + field_to_string (\"special\", id.special_addr_p, id.special_addr));\n \n   if (id.artificial_depth)\n-    fprintf_unfiltered (file, \",artificial=%d\", id.artificial_depth);\n-\n-  fprintf_unfiltered (file, \"}\");\n+    res += \",artificial=\" + std::to_string (id.artificial_depth);\n+  res += \"}\";\n+  return res;\n }\n \n static void\n@@ -492,7 +493,7 @@ fprint_frame (struct ui_file *file, struct frame_info *fi)\n   else if (fi->this_id.p == frame_id_status::COMPUTING)\n     fprintf_unfiltered (file, \"<computing>\");\n   else\n-    fprint_frame_id (file, fi->this_id.value);\n+    fprintf_unfiltered (file, \"%s\", fi->this_id.value.to_string ().c_str ());\n   fprintf_unfiltered (file, \",\");\n \n   fprintf_unfiltered (file, \"func=\");\n@@ -592,11 +593,8 @@ compute_frame_id (struct frame_info *fi)\n       fi->this_id.p = frame_id_status::COMPUTED;\n \n       if (frame_debug)\n-\t{\n-\t  fprintf_unfiltered (gdb_stdlog, \"-> \");\n-\t  fprint_frame_id (gdb_stdlog, fi->this_id.value);\n-\t  fprintf_unfiltered (gdb_stdlog, \" }\\n\");\n-\t}\n+\tfprintf_unfiltered (gdb_stdlog, \"-> %s }\\n\",\n+\t\t\t    fi->this_id.value.to_string ().c_str ());\n     }\n   catch (const gdb_exception &ex)\n     {\n@@ -748,11 +746,8 @@ frame_id_p (frame_id l)\n   bool p = l.stack_status != FID_STACK_INVALID;\n \n   if (frame_debug)\n-    {\n-      fprintf_unfiltered (gdb_stdlog, \"{ frame_id_p (l=\");\n-      fprint_frame_id (gdb_stdlog, l);\n-      fprintf_unfiltered (gdb_stdlog, \") -> %d }\\n\", p);\n-    }\n+    fprintf_unfiltered (gdb_stdlog, \"{ frame_id_p (l=%s) -> %d }\\n\",\n+\t\t\tl.to_string ().c_str (), p);\n \n   return p;\n }\n@@ -796,13 +791,8 @@ frame_id_eq (frame_id l, frame_id r)\n     eq = true;\n \n   if (frame_debug)\n-    {\n-      fprintf_unfiltered (gdb_stdlog, \"{ frame_id_eq (l=\");\n-      fprint_frame_id (gdb_stdlog, l);\n-      fprintf_unfiltered (gdb_stdlog, \",r=\");\n-      fprint_frame_id (gdb_stdlog, r);\n-      fprintf_unfiltered (gdb_stdlog, \") -> %d }\\n\", eq);\n-    }\n+    fprintf_unfiltered (gdb_stdlog, \"{ frame_id_eq (l=%s,r=%s) -> %d }\\n\",\n+\t\t\tl.to_string ().c_str (), r.to_string ().c_str (), eq);\n \n   return eq;\n }\n@@ -879,13 +869,9 @@ frame_id_inner (struct gdbarch *gdbarch, struct frame_id l, struct frame_id r)\n     inner = gdbarch_inner_than (gdbarch, l.stack_addr, r.stack_addr);\n \n   if (frame_debug)\n-    {\n-      fprintf_unfiltered (gdb_stdlog, \"{ frame_id_inner (l=\");\n-      fprint_frame_id (gdb_stdlog, l);\n-      fprintf_unfiltered (gdb_stdlog, \",r=\");\n-      fprint_frame_id (gdb_stdlog, r);\n-      fprintf_unfiltered (gdb_stdlog, \") -> %d }\\n\", inner);\n-    }\n+    fprintf_unfiltered (gdb_stdlog, \"{ frame_id_inner (l=%s,r=%s) -> %d }\\n\",\n+\t\t\tl.to_string ().c_str (), r.to_string ().c_str (),\n+\t\t\tinner);\n \n   return inner;\n }"
    },
    {
      "sha": "da52522ad2aafe16308c922dc59d288e696ce2f9",
      "filename": "gdb/frame.h",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/927c4e355e307698d58e6cad17f866bf5515f16e/gdb/frame.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/927c4e355e307698d58e6cad17f866bf5515f16e/gdb/frame.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.h?ref=927c4e355e307698d58e6cad17f866bf5515f16e",
      "patch": "@@ -169,6 +169,9 @@ struct frame_id\n      Caller of inlined function will have it zero, each more inner called frame\n      will have it increasingly one, two etc.  Similarly for TAILCALL_FRAME.  */\n   int artificial_depth;\n+\n+  /* Return a string representation of this frame id.  */\n+  std::string to_string () const;\n };\n \n /* Save and restore the currently selected frame.  */\n@@ -258,11 +261,6 @@ extern bool frame_id_artificial_p (frame_id l);\n /* Returns true when L and R identify the same frame.  */\n extern bool frame_id_eq (frame_id l, frame_id r);\n \n-/* Write the internal representation of a frame ID on the specified\n-   stream.  */\n-extern void fprint_frame_id (struct ui_file *file, struct frame_id id);\n-\n-\n /* Frame types.  Some are real, some are signal trampolines, and some\n    are completely artificial (dummy).  */\n "
    },
    {
      "sha": "eb32f9a2ef0057e902d022fb571c8f1e4f86f764",
      "filename": "gdb/guile/scm-frame.c",
      "status": "modified",
      "additions": 3,
      "deletions": 8,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/927c4e355e307698d58e6cad17f866bf5515f16e/gdb/guile/scm-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/927c4e355e307698d58e6cad17f866bf5515f16e/gdb/guile/scm-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-frame.c?ref=927c4e355e307698d58e6cad17f866bf5515f16e",
      "patch": "@@ -156,14 +156,9 @@ frscm_print_frame_smob (SCM self, SCM port, scm_print_state *pstate)\n {\n   frame_smob *f_smob = (frame_smob *) SCM_SMOB_DATA (self);\n \n-  gdbscm_printf (port, \"#<%s \", frame_smob_name);\n-\n-  string_file strfile;\n-  fprint_frame_id (&strfile, f_smob->frame_id);\n-  gdbscm_printf (port, \"%s\", strfile.c_str ());\n-\n-  scm_puts (\">\", port);\n-\n+  gdbscm_printf (port, \"#<%s %s>\",\n+\t\t frame_smob_name,\n+\t\t f_smob->frame_id.to_string ().c_str ());\n   scm_remember_upto_here_1 (self);\n \n   /* Non-zero means success.  */"
    },
    {
      "sha": "c8eab5291ea471199fc405a5ba50c713196ff0d3",
      "filename": "gdb/python/py-frame.c",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/927c4e355e307698d58e6cad17f866bf5515f16e/gdb/python/py-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/927c4e355e307698d58e6cad17f866bf5515f16e/gdb/python/py-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-frame.c?ref=927c4e355e307698d58e6cad17f866bf5515f16e",
      "patch": "@@ -79,10 +79,8 @@ frame_object_to_frame_info (PyObject *obj)\n static PyObject *\n frapy_str (PyObject *self)\n {\n-  string_file strfile;\n-\n-  fprint_frame_id (&strfile, ((frame_object *) self)->frame_id);\n-  return PyString_FromString (strfile.c_str ());\n+  const frame_id &fid = ((frame_object *) self)->frame_id;\n+  return PyString_FromString (fid.to_string ().c_str ());\n }\n \n /* Implementation of gdb.Frame.is_valid (self) -> Boolean."
    },
    {
      "sha": "c82fa3dbe972010a30b27a3f4fea512e57258275",
      "filename": "gdb/python/py-unwind.c",
      "status": "modified",
      "additions": 3,
      "deletions": 7,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/927c4e355e307698d58e6cad17f866bf5515f16e/gdb/python/py-unwind.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/927c4e355e307698d58e6cad17f866bf5515f16e/gdb/python/py-unwind.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-unwind.c?ref=927c4e355e307698d58e6cad17f866bf5515f16e",
      "patch": "@@ -163,8 +163,7 @@ unwind_infopy_str (PyObject *self)\n   unwind_info_object *unwind_info = (unwind_info_object *) self;\n   string_file stb;\n \n-  stb.puts (\"Frame ID: \");\n-  fprint_frame_id (&stb, unwind_info->frame_id);\n+  stb.printf (\"Frame ID: %s\", unwind_info->frame_id.to_string ().c_str ());\n   {\n     const char *sep = \"\";\n     struct value_print_options opts;\n@@ -433,11 +432,8 @@ pyuw_this_id (struct frame_info *this_frame, void **cache_ptr,\n {\n   *this_id = ((cached_frame_info *) *cache_ptr)->frame_id;\n   if (pyuw_debug >= 1)\n-    {\n-      fprintf_unfiltered (gdb_stdlog, \"%s: frame_id: \", __FUNCTION__);\n-      fprint_frame_id (gdb_stdlog, *this_id);\n-      fprintf_unfiltered (gdb_stdlog, \"\\n\");\n-    }\n+    fprintf_unfiltered (gdb_stdlog, \"%s: frame_id: %s\\n\", __FUNCTION__,\n+\t\t\tthis_id->to_string ().c_str ());\n }\n \n /* frame_unwind.prev_register.  */"
    }
  ]
}