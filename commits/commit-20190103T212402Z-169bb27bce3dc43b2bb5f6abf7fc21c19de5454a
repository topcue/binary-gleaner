{
  "sha": "169bb27bce3dc43b2bb5f6abf7fc21c19de5454a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTY5YmIyN2JjZTNkYzQzYjJiYjVmNmFiZjdmYzIxYzE5ZGU1NDU0YQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2018-12-31T22:20:56Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-03T21:24:02Z"
    },
    "message": "gdb: Remove cleanup from linux_nat_target::follow_fork\n\nRemove cleanup from linux_nat_target::follow_fork, instead add a new\nunique_ptr specialisation for holding lwp_info pointers and use this\nto ensure the pointer is cleaned up when needed.\n\ngdb/ChangeLog:\n\n\t* linux-nat.c (delete_lwp_cleanup): Delete.\n\t(struct lwp_deleter): New struct.\n\t(lwp_info_up): New typedef.\n\t(linux_nat_target::follow_fork): Delete cleanup, and make use of\n\tlwp_info_up.",
    "tree": {
      "sha": "53d44279a7d4e81306d70eea2c0234eece5f2eaa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/53d44279a7d4e81306d70eea2c0234eece5f2eaa"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/169bb27bce3dc43b2bb5f6abf7fc21c19de5454a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/169bb27bce3dc43b2bb5f6abf7fc21c19de5454a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/169bb27bce3dc43b2bb5f6abf7fc21c19de5454a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/169bb27bce3dc43b2bb5f6abf7fc21c19de5454a/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a07c88800e88e26fc3a746739f0d2cc8abd30c5d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a07c88800e88e26fc3a746739f0d2cc8abd30c5d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a07c88800e88e26fc3a746739f0d2cc8abd30c5d"
    }
  ],
  "stats": {
    "total": 35,
    "additions": 24,
    "deletions": 11
  },
  "files": [
    {
      "sha": "da92e3f95e61421e0e5510ada05ee51068331700",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/169bb27bce3dc43b2bb5f6abf7fc21c19de5454a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/169bb27bce3dc43b2bb5f6abf7fc21c19de5454a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=169bb27bce3dc43b2bb5f6abf7fc21c19de5454a",
      "patch": "@@ -1,3 +1,11 @@\n+2019-01-03  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* linux-nat.c (delete_lwp_cleanup): Delete.\n+\t(struct lwp_deleter): New struct.\n+\t(lwp_info_up): New typedef.\n+\t(linux_nat_target::follow_fork): Delete cleanup, and make use of\n+\tlwp_info_up.\n+\n 2019-01-03  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* linux-fork.c (class scoped_switch_fork_info): New class."
    },
    {
      "sha": "73d4fd193ae14b29752dfe024296fb99786474a6",
      "filename": "gdb/linux-nat.c",
      "status": "modified",
      "additions": 16,
      "deletions": 11,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/169bb27bce3dc43b2bb5f6abf7fc21c19de5454a/gdb/linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/169bb27bce3dc43b2bb5f6abf7fc21c19de5454a/gdb/linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/linux-nat.c?ref=169bb27bce3dc43b2bb5f6abf7fc21c19de5454a",
      "patch": "@@ -425,15 +425,19 @@ num_lwps (int pid)\n   return count;\n }\n \n-/* Call delete_lwp with prototype compatible for make_cleanup.  */\n+/* Deleter for lwp_info unique_ptr specialisation.  */\n \n-static void\n-delete_lwp_cleanup (void *lp_voidp)\n+struct lwp_deleter\n {\n-  struct lwp_info *lp = (struct lwp_info *) lp_voidp;\n+  void operator() (struct lwp_info *lwp) const\n+  {\n+    delete_lwp (lwp->ptid);\n+  }\n+};\n \n-  delete_lwp (lp->ptid);\n-}\n+/* A unique_ptr specialisation for lwp_info.  */\n+\n+typedef std::unique_ptr<struct lwp_info, lwp_deleter> lwp_info_up;\n \n /* Target hook for follow_fork.  On entry inferior_ptid must be the\n    ptid of the followed inferior.  At return, inferior_ptid will be\n@@ -466,10 +470,13 @@ linux_nat_target::follow_fork (int follow_child, int detach_fork)\n \t{\n \t  int child_stop_signal = 0;\n \t  bool detach_child = true;\n-\t  struct cleanup *old_chain = make_cleanup (delete_lwp_cleanup,\n-\t\t\t\t\t\t    child_lp);\n \n-\t  linux_target->low_prepare_to_resume (child_lp);\n+\t  /* Move CHILD_LP into a unique_ptr and clear the source pointer\n+\t     to prevent us doing anything stupid with it.  */\n+\t  lwp_info_up child_lp_ptr (child_lp);\n+\t  child_lp = nullptr;\n+\n+\t  linux_target->low_prepare_to_resume (child_lp_ptr.get ());\n \n \t  /* When debugging an inferior in an architecture that supports\n \t     hardware single stepping on a kernel without commit\n@@ -508,8 +515,6 @@ linux_nat_target::follow_fork (int follow_child, int detach_fork)\n \t\tsigno = 0;\n \t      ptrace (PTRACE_DETACH, child_pid, 0, signo);\n \t    }\n-\n-\t  do_cleanups (old_chain);\n \t}\n       else\n \t{"
    }
  ]
}