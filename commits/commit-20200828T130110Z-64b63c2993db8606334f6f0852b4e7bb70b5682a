{
  "sha": "64b63c2993db8606334f6f0852b4e7bb70b5682a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjRiNjNjMjk5M2RiODYwNjMzNGY2ZjA4NTJiNGU3YmI3MGI1NjgyYQ==",
  "commit": {
    "author": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2020-08-28T12:56:53Z"
    },
    "committer": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2020-08-28T13:01:10Z"
    },
    "message": "MSP430: Fix alignment of __*_array_start symbols in default linker script\n\n__{preinit,init,fini}_array_start symbols must be word aligned in\nlinker scripts. If the section preceding the __*_array_start symbol\nhas an odd size, then a NULL byte will be present between the start\nsymbol and the .*_array section itself, when the section gets\nautomatically word-aligned.\n\nThis results in a branch to an invalid address when the CRT startup\ncode tries to run through the functions listed in the array sections.\n\nSome MSP430 linker scripts do not align the __*_array start symbols, so\nthis added warning will catch that problem and help the user avoid\nthe potential incorrect execution of the program.\n\nld/ChangeLog:\n\n\t* emultempl/msp430.em (input_section_exists): New.\n\t(check_array_section_alignment): New.\n\t(gld${EMULATION_NAME}_finish): New.\n\t* scripttempl/elf32msp430.sc: Add ALIGN directives before the\n\tdefinition of __*_array_start symbols.\n\t* testsuite/ld-msp430-elf/finiarray-warn.ld: New test.\n\t* testsuite/ld-msp430-elf/finiarray-warn.r: New test.\n\t* testsuite/ld-msp430-elf/initarray-nowarn.ld: New test.\n\t* testsuite/ld-msp430-elf/initarray-warn.ld: New test.\n\t* testsuite/ld-msp430-elf/initarray-warn.r: New test.\n\t* testsuite/ld-msp430-elf/initarray.s: New test.\n\t* testsuite/ld-msp430-elf/msp430-elf.exp: Run new tests.\n\t* testsuite/ld-msp430-elf/preinitarray-warn.ld: New test.\n\t* testsuite/ld-msp430-elf/preinitarray-warn.r: New test.",
    "tree": {
      "sha": "ac258fac488e748215125eb78ed3e556e8b627c5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ac258fac488e748215125eb78ed3e556e8b627c5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/64b63c2993db8606334f6f0852b4e7bb70b5682a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64b63c2993db8606334f6f0852b4e7bb70b5682a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/64b63c2993db8606334f6f0852b4e7bb70b5682a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/64b63c2993db8606334f6f0852b4e7bb70b5682a/comments",
  "author": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "87870682f3a7fc29208026dfa4aac75b195cc990",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/87870682f3a7fc29208026dfa4aac75b195cc990",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/87870682f3a7fc29208026dfa4aac75b195cc990"
    }
  ],
  "stats": {
    "total": 321,
    "additions": 320,
    "deletions": 1
  },
  "files": [
    {
      "sha": "77e39a56145d7c1d990c77059a0d320eaf98be6f",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=64b63c2993db8606334f6f0852b4e7bb70b5682a",
      "patch": "@@ -1,3 +1,20 @@\n+2020-08-28  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* emultempl/msp430.em (input_section_exists): New.\n+\t(check_array_section_alignment): New.\n+\t(gld${EMULATION_NAME}_finish): New.\n+\t* scripttempl/elf32msp430.sc: Add ALIGN directives before the\n+\tdefinition of __*_array_start symbols.\n+\t* testsuite/ld-msp430-elf/finiarray-warn.ld: New test.\n+\t* testsuite/ld-msp430-elf/finiarray-warn.r: New test.\n+\t* testsuite/ld-msp430-elf/initarray-nowarn.ld: New test.\n+\t* testsuite/ld-msp430-elf/initarray-warn.ld: New test.\n+\t* testsuite/ld-msp430-elf/initarray-warn.r: New test.\n+\t* testsuite/ld-msp430-elf/initarray.s: New test.\n+\t* testsuite/ld-msp430-elf/msp430-elf.exp: Run new tests.\n+\t* testsuite/ld-msp430-elf/preinitarray-warn.ld: New test.\n+\t* testsuite/ld-msp430-elf/preinitarray-warn.r: New test.\n+\n 2020-08-28  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* ldmisc.c (vfinfo): Support new \"%pU\" format specifier."
    },
    {
      "sha": "7b78a53d7e13804466332a5dbfe4fbfbbd090ac1",
      "filename": "ld/emultempl/msp430.em",
      "status": "modified",
      "additions": 80,
      "deletions": 1,
      "changes": 81,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/emultempl/msp430.em",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/emultempl/msp430.em",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emultempl/msp430.em?ref=64b63c2993db8606334f6f0852b4e7bb70b5682a",
      "patch": "@@ -826,6 +826,85 @@ msp430_elf_after_allocation (void)\n   gld${EMULATION_NAME}_after_allocation ();\n }\n \n+/* Return TRUE if a non-debug input section in L has positive size and matches\n+   the given name.  */\n+static int\n+input_section_exists (lang_statement_union_type * l, const char * name)\n+{\n+  while (l != NULL)\n+    {\n+      switch (l->header.type)\n+\t{\n+\tcase lang_input_section_enum:\n+\t  if ((l->input_section.section->flags & SEC_ALLOC)\n+\t      && l->input_section.section->size > 0\n+\t      && !strcmp (l->input_section.section->name, name))\n+\t    return TRUE;\n+\t  break;\n+\n+\tcase lang_wild_statement_enum:\n+\t  if (input_section_exists (l->wild_statement.children.head, name))\n+\t    return TRUE;\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+      l = l->header.next;\n+    }\n+  return FALSE;\n+}\n+\n+/* Some MSP430 linker scripts do not include ALIGN directives to ensure\n+   __preinit_array_start, __init_array_start or __fini_array_start are word\n+   aligned.\n+   If __*_array_start symbols are not word aligned, the code in crt0 to run\n+   through the array and call the functions will crash.\n+   To avoid warning unnecessarily when the .*_array sections are not being\n+   used for running constructors/destructors, only emit the warning if\n+   the associated section exists and has size.  */\n+static void\n+check_array_section_alignment (void)\n+{\n+  int i;\n+  lang_output_section_statement_type * rodata_sec;\n+  lang_output_section_statement_type * rodata2_sec;\n+  const char * array_names[3][2] = { { \".init_array\", \"__init_array_start\" },\n+\t{ \".preinit_array\", \"__preinit_array_start\" },\n+\t{ \".fini_array\", \"__fini_array_start\" } };\n+\n+  /* .{preinit,init,fini}_array could be in either .rodata or .rodata2.  */\n+  rodata_sec = lang_output_section_find (\".rodata\");\n+  rodata2_sec = lang_output_section_find (\".rodata2\");\n+  if (rodata_sec == NULL && rodata2_sec == NULL)\n+    return;\n+\n+  /* There are 3 .*_array sections which must be checked for alignment.  */\n+  for (i = 0; i < 3; i++)\n+    {\n+      struct bfd_link_hash_entry * sym;\n+      if (((rodata_sec && input_section_exists (rodata_sec->children.head,\n+\t\t\t\t\t\tarray_names[i][0]))\n+\t   || (rodata2_sec && input_section_exists (rodata2_sec->children.head,\n+\t\t\t\t\t\t    array_names[i][0])))\n+\t  && (sym = bfd_link_hash_lookup (link_info.hash, array_names[i][1],\n+\t\t\t\t\t  FALSE, FALSE, TRUE))\n+\t  && sym->type == bfd_link_hash_defined\n+\t  && sym->u.def.value % 2)\n+\t{\n+\t  einfo (\"%P: warning: \\\"%s\\\" symbol (%pU) is not word aligned\\n\",\n+\t\t array_names[i][1], NULL);\n+\t}\n+    }\n+}\n+\n+static void\n+gld${EMULATION_NAME}_finish (void)\n+{\n+  finish_default ();\n+  check_array_section_alignment ();\n+}\n+\n struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n {\n   ${LDEMUL_BEFORE_PARSE-gld${EMULATION_NAME}_before_parse},\n@@ -842,7 +921,7 @@ struct ld_emulation_xfer_struct ld_${EMULATION_NAME}_emulation =\n   ${LDEMUL_GET_SCRIPT-gld${EMULATION_NAME}_get_script},\n   \"${EMULATION_NAME}\",\n   \"${OUTPUT_FORMAT}\",\n-  ${LDEMUL_FINISH-finish_default},\n+  gld${EMULATION_NAME}_finish,\n   ${LDEMUL_CREATE_OUTPUT_SECTION_STATEMENTS-NULL},\n   ${LDEMUL_OPEN_DYNAMIC_ARCHIVE-NULL},\n   ${LDEMUL_PLACE_ORPHAN-gld${EMULATION_NAME}_place_orphan},"
    },
    {
      "sha": "4206d797b871c664d79e742a226cc6c71f28ca12",
      "filename": "ld/scripttempl/elf32msp430.sc",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/scripttempl/elf32msp430.sc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/scripttempl/elf32msp430.sc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/scripttempl/elf32msp430.sc?ref=64b63c2993db8606334f6f0852b4e7bb70b5682a",
      "patch": "@@ -208,15 +208,18 @@ SECTIONS\n \n     KEEP (*(.gcc_except_table)) *(.gcc_except_table.*)\n \n+    . = ALIGN(2);\n     PROVIDE (__preinit_array_start = .);\n     KEEP (*(.preinit_array))\n     PROVIDE (__preinit_array_end = .);\n \n+    . = ALIGN(2);\n     PROVIDE (__init_array_start = .);\n     KEEP (*(SORT(.init_array.*)))\n     KEEP (*(.init_array))\n     PROVIDE (__init_array_end = .);\n \n+    . = ALIGN(2);\n     PROVIDE (__fini_array_start = .);\n     KEEP (*(.fini_array))\n     KEEP (*(SORT(.fini_array.*)))"
    },
    {
      "sha": "c9342934b458510aebaf5b8ab8aa81a45abd62d3",
      "filename": "ld/testsuite/ld-msp430-elf/finiarray-warn.ld",
      "status": "added",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/finiarray-warn.ld",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/finiarray-warn.ld",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-msp430-elf/finiarray-warn.ld?ref=64b63c2993db8606334f6f0852b4e7bb70b5682a",
      "patch": "@@ -0,0 +1,46 @@\n+/* Script for ld testsuite */\n+OUTPUT_ARCH(msp430)\n+ENTRY(_start)\n+\n+SECTIONS\n+{\n+  .text :\n+  {\n+    PROVIDE (_start = .);\n+    . = ALIGN(2);\n+    *(.text .stub .text.* .gnu.linkonce.t.* .text:*)\n+  }\n+\n+  .rodata :\n+  {\n+    *(.rodata.* .rodata)\n+    . = ALIGN(2);\n+    PROVIDE (__preinit_array_start = .);\n+    KEEP (*(SORT(.preinit_array.*)))\n+    KEEP (*(.preinit_array))\n+    PROVIDE (__preinit_array_end = .);\n+    . = ALIGN(2);\n+    PROVIDE (__init_array_start = .);\n+    KEEP (*(SORT(.init_array.*)))\n+    KEEP (*(.init_array))\n+    PROVIDE (__init_array_end = .);\n+    . = ALIGN(2);\n+    . += 1;\n+    PROVIDE (__fini_array_start = .);\n+    KEEP (*(SORT(.fini_array.*)))\n+    KEEP (*(.fini_array))\n+    PROVIDE (__fini_array_end = .);\n+  }\n+\n+  .data :\n+  {\n+    . = ALIGN(2);\n+    *(.data.* .data)\n+  }\n+\n+  .bss :\n+  {\n+    . = ALIGN(2);\n+    *(.bss.* .bss)\n+  }\n+}"
    },
    {
      "sha": "ba3fa8348bdac9b79f37a5dd16656fd995caec6e",
      "filename": "ld/testsuite/ld-msp430-elf/finiarray-warn.r",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/finiarray-warn.r",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/finiarray-warn.r",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-msp430-elf/finiarray-warn.r?ref=64b63c2993db8606334f6f0852b4e7bb70b5682a",
      "patch": "@@ -0,0 +1 @@\n+.*warning: \"__fini_array_start\" symbol \\(finiarray-warn.ld\\) is not word aligned"
    },
    {
      "sha": "866c3241380b25fdd9a0c85653a8935c74637a70",
      "filename": "ld/testsuite/ld-msp430-elf/initarray-nowarn.ld",
      "status": "added",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/initarray-nowarn.ld",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/initarray-nowarn.ld",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-msp430-elf/initarray-nowarn.ld?ref=64b63c2993db8606334f6f0852b4e7bb70b5682a",
      "patch": "@@ -0,0 +1,45 @@\n+/* Script for ld testsuite */\n+OUTPUT_ARCH(msp430)\n+ENTRY(_start)\n+\n+SECTIONS\n+{\n+  .text :\n+  {\n+    PROVIDE (_start = .);\n+    . = ALIGN(2);\n+    *(.text .stub .text.* .gnu.linkonce.t.* .text:*)\n+  }\n+\n+  .rodata :\n+  {\n+    *(.rodata.* .rodata)\n+    . = ALIGN(2);\n+    PROVIDE (__preinit_array_start = .);\n+    KEEP (*(SORT(.preinit_array.*)))\n+    KEEP (*(.preinit_array))\n+    PROVIDE (__preinit_array_end = .);\n+    . = ALIGN(2);\n+    PROVIDE (__init_array_start = .);\n+    KEEP (*(SORT(.init_array.*)))\n+    KEEP (*(.init_array))\n+    PROVIDE (__init_array_end = .);\n+    . = ALIGN(2);\n+    PROVIDE (__fini_array_start = .);\n+    KEEP (*(SORT(.fini_array.*)))\n+    KEEP (*(.fini_array))\n+    PROVIDE (__fini_array_end = .);\n+  }\n+\n+  .data :\n+  {\n+    . = ALIGN(2);\n+    *(.data.* .data)\n+  }\n+\n+  .bss :\n+  {\n+    . = ALIGN(2);\n+    *(.bss.* .bss)\n+  }\n+}"
    },
    {
      "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "filename": "ld/testsuite/ld-msp430-elf/initarray-nowarn.r",
      "status": "added",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/initarray-nowarn.r",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/initarray-nowarn.r",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-msp430-elf/initarray-nowarn.r?ref=64b63c2993db8606334f6f0852b4e7bb70b5682a"
    },
    {
      "sha": "fc00d9025e5f4b5c15da8e80fee08c4c784a653a",
      "filename": "ld/testsuite/ld-msp430-elf/initarray-warn.ld",
      "status": "added",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/initarray-warn.ld",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/initarray-warn.ld",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-msp430-elf/initarray-warn.ld?ref=64b63c2993db8606334f6f0852b4e7bb70b5682a",
      "patch": "@@ -0,0 +1,46 @@\n+/* Script for ld testsuite */\n+OUTPUT_ARCH(msp430)\n+ENTRY(_start)\n+\n+SECTIONS\n+{\n+  .text :\n+  {\n+    PROVIDE (_start = .);\n+    . = ALIGN(2);\n+    *(.text .stub .text.* .gnu.linkonce.t.* .text:*)\n+  }\n+\n+  .rodata :\n+  {\n+    *(.rodata.* .rodata)\n+    . = ALIGN(2);\n+    PROVIDE (__preinit_array_start = .);\n+    KEEP (*(SORT(.preinit_array.*)))\n+    KEEP (*(.preinit_array))\n+    PROVIDE (__preinit_array_end = .);\n+    . = ALIGN(2);\n+    . += 1;\n+    PROVIDE (__init_array_start = .);\n+    KEEP (*(SORT(.init_array.*)))\n+    KEEP (*(.init_array))\n+    PROVIDE (__init_array_end = .);\n+    . = ALIGN(2);\n+    PROVIDE (__fini_array_start = .);\n+    KEEP (*(SORT(.fini_array.*)))\n+    KEEP (*(.fini_array))\n+    PROVIDE (__fini_array_end = .);\n+  }\n+\n+  .data :\n+  {\n+    . = ALIGN(2);\n+    *(.data.* .data)\n+  }\n+\n+  .bss :\n+  {\n+    . = ALIGN(2);\n+    *(.bss.* .bss)\n+  }\n+}"
    },
    {
      "sha": "35abd7bfe97f5ddd7841e8e0ec62631fda96436a",
      "filename": "ld/testsuite/ld-msp430-elf/initarray-warn.r",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/initarray-warn.r",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/initarray-warn.r",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-msp430-elf/initarray-warn.r?ref=64b63c2993db8606334f6f0852b4e7bb70b5682a",
      "patch": "@@ -0,0 +1 @@\n+.*warning: \"__init_array_start\" symbol \\(initarray-warn.ld\\) is not word aligned"
    },
    {
      "sha": "abbf86e8838c68d515c071f273bbd5d58123c64c",
      "filename": "ld/testsuite/ld-msp430-elf/initarray.s",
      "status": "added",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/initarray.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/initarray.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-msp430-elf/initarray.s?ref=64b63c2993db8606334f6f0852b4e7bb70b5682a",
      "patch": "@@ -0,0 +1,21 @@\n+.text\n+\t.section\t.preinit_array,\"aw\"\n+\t.short 42\n+\n+\t.section\t.init_array,\"aw\"\n+\t.short 43\n+\n+\t.section\t.fini_array,\"aw\"\n+\t.short 44\n+\n+.text\n+\t.global\tmain\n+\t.type\tmain, @function\n+main:\n+\tMOV #__preinit_array_start, R8\n+\tMOV #__init_array_start, R9\n+\tMOV #__fini_array_start, R10\n+  CALL @R8\n+  CALL @R9\n+  CALL @R10\n+\tRET"
    },
    {
      "sha": "a2fa4db48d45bec9a39b9aca54e47e42f29f67d6",
      "filename": "ld/testsuite/ld-msp430-elf/msp430-elf.exp",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/msp430-elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/msp430-elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-msp430-elf/msp430-elf.exp?ref=64b63c2993db8606334f6f0852b4e7bb70b5682a",
      "patch": "@@ -163,6 +163,19 @@ set msp430warntests {\n         {{ld warn-no-lower-data.r}} \"warn-no-lower-data\"}\n }\n \n+set msp430arraytests {\n+    { \"Warn when __preinit_array_start is not word aligned\" \"-T preinitarray-warn.ld\" \"\" \"\"\n+        {initarray.s} {{ld preinitarray-warn.r}} \"preinitarray-warn\"}\n+    { \"Warn when __init_array_start is not word aligned\" \"-T initarray-warn.ld\" \"\" \"\"\n+        {initarray.s} {{ld initarray-warn.r}} \"initarray-warn\"}\n+    { \"Warn when __fini_array_start is not word aligned\" \"-T finiarray-warn.ld\" \"\" \"\"\n+        {initarray.s} {{ld finiarray-warn.r}} \"finiarray-warn\"}\n+    { \"Don't warn when __{preinit,init,fini}_array_start are word aligned\" \"-T initarray-nowarn.ld\" \"\" \"\"\n+        {initarray.s} {{ld initarray-nowarn.r}} \"initarray-nowarn\"}\n+}\n+\n+run_ld_link_tests $msp430arraytests\n+\n # Don't run further tests when msp430 ISA is selected\n if {[string match \"*-mcpu=msp430 *\" [board_info [target_info name] multilib_flags]]\n   || [string match \"*-mcpu=msp430\" [board_info [target_info name] multilib_flags]]} {"
    },
    {
      "sha": "acbe7f5e65ef7d68d1823a58fc7805870117246d",
      "filename": "ld/testsuite/ld-msp430-elf/preinitarray-warn.ld",
      "status": "added",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/preinitarray-warn.ld",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/preinitarray-warn.ld",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-msp430-elf/preinitarray-warn.ld?ref=64b63c2993db8606334f6f0852b4e7bb70b5682a",
      "patch": "@@ -0,0 +1,46 @@\n+/* Script for ld testsuite */\n+OUTPUT_ARCH(msp430)\n+ENTRY(_start)\n+\n+SECTIONS\n+{\n+  .text :\n+  {\n+    PROVIDE (_start = .);\n+    . = ALIGN(2);\n+    *(.text .stub .text.* .gnu.linkonce.t.* .text:*)\n+  }\n+\n+  .rodata :\n+  {\n+    *(.rodata.* .rodata)\n+    . = ALIGN(2);\n+    . += 1;\n+    PROVIDE (__preinit_array_start = .);\n+    KEEP (*(SORT(.preinit_array.*)))\n+    KEEP (*(.preinit_array))\n+    PROVIDE (__preinit_array_end = .);\n+    . = ALIGN(2);\n+    PROVIDE (__init_array_start = .);\n+    KEEP (*(SORT(.init_array.*)))\n+    KEEP (*(.init_array))\n+    PROVIDE (__init_array_end = .);\n+    . = ALIGN(2);\n+    PROVIDE (__fini_array_start = .);\n+    KEEP (*(SORT(.fini_array.*)))\n+    KEEP (*(.fini_array))\n+    PROVIDE (__fini_array_end = .);\n+  }\n+\n+  .data :\n+  {\n+    . = ALIGN(2);\n+    *(.data.* .data)\n+  }\n+\n+  .bss :\n+  {\n+    . = ALIGN(2);\n+    *(.bss.* .bss)\n+  }\n+}"
    },
    {
      "sha": "ab12e42d46e287f121e1cdc56b2fdd10b5be5955",
      "filename": "ld/testsuite/ld-msp430-elf/preinitarray-warn.r",
      "status": "added",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/preinitarray-warn.r",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/64b63c2993db8606334f6f0852b4e7bb70b5682a/ld/testsuite/ld-msp430-elf/preinitarray-warn.r",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-msp430-elf/preinitarray-warn.r?ref=64b63c2993db8606334f6f0852b4e7bb70b5682a",
      "patch": "@@ -0,0 +1 @@\n+.*warning: \"__preinit_array_start\" symbol \\(preinitarray-warn.ld\\) is not word aligned"
    }
  ]
}