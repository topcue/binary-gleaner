{
  "sha": "fe07eca59d0544eb6c56c3559da9ceece23cae6e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmUwN2VjYTU5ZDA1NDRlYjZjNTZjMzU1OWRhOWNlZWNlMjNjYWU2ZQ==",
  "commit": {
    "author": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2019-02-17T00:46:33Z"
    },
    "committer": {
      "name": "Kevin Buettner",
      "email": "kevinb@redhat.com",
      "date": "2019-02-26T17:23:23Z"
    },
    "message": "Define gdb.Value(bufobj, type) constructor\n\nProvided a buffer BUFOBJ and a type TYPE, construct a gdb.Value object\nwith type TYPE, where the value's contents are taken from BUFOBJ.\n\nE.g...\n\n(gdb) python import struct\n(gdb) python unsigned_int_type=gdb.lookup_type('unsigned int')\n(gdb) python b=struct.pack('=I',0xdeadbeef)\n(gdb) python v=gdb.Value(b, unsigned_int_type) ; print(\"%#x\" % v)\n0xdeadbeef\n\nThis two argument form of the gdb.Value constructor may also be used\nto obtain gdb values from selected portions of buffers read with\nInferior.read_memory().  The test case (which is in a separate patch)\ndemonstrates this use case.\n\ngdb/ChangeLog:\n\n\t* python/py-value.c (convert_buffer_and_type_to_value): New\n\tfunction.\n\t(valpy_new): Parse arguments via gdb_PyArg_ParseTupleAndKeywords.\n\tAdd support for handling an optional second argument.  Call\n\tconvert_buffer_and_type_to_value as appropriate.",
    "tree": {
      "sha": "a5330ff950e45356c2a64e43cb521ec67649c79f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a5330ff950e45356c2a64e43cb521ec67649c79f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fe07eca59d0544eb6c56c3559da9ceece23cae6e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe07eca59d0544eb6c56c3559da9ceece23cae6e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fe07eca59d0544eb6c56c3559da9ceece23cae6e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fe07eca59d0544eb6c56c3559da9ceece23cae6e/comments",
  "author": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "KevinBuettner",
    "id": 65747518,
    "node_id": "MDQ6VXNlcjY1NzQ3NTE4",
    "avatar_url": "https://avatars.githubusercontent.com/u/65747518?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/KevinBuettner",
    "html_url": "https://github.com/KevinBuettner",
    "followers_url": "https://api.github.com/users/KevinBuettner/followers",
    "following_url": "https://api.github.com/users/KevinBuettner/following{/other_user}",
    "gists_url": "https://api.github.com/users/KevinBuettner/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/KevinBuettner/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/KevinBuettner/subscriptions",
    "organizations_url": "https://api.github.com/users/KevinBuettner/orgs",
    "repos_url": "https://api.github.com/users/KevinBuettner/repos",
    "events_url": "https://api.github.com/users/KevinBuettner/events{/privacy}",
    "received_events_url": "https://api.github.com/users/KevinBuettner/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "26c897821b37af894088ec5731f93dc82e79b6d4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/26c897821b37af894088ec5731f93dc82e79b6d4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/26c897821b37af894088ec5731f93dc82e79b6d4"
    }
  ],
  "stats": {
    "total": 77,
    "additions": 67,
    "deletions": 10
  },
  "files": [
    {
      "sha": "5d845e9a214b2c7d5b0531b61c7133b834e0da43",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe07eca59d0544eb6c56c3559da9ceece23cae6e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe07eca59d0544eb6c56c3559da9ceece23cae6e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=fe07eca59d0544eb6c56c3559da9ceece23cae6e",
      "patch": "@@ -1,5 +1,10 @@\n 2019-02-26  Kevin Buettner  <kevinb@redhat.com>\n \n+\t* python/py-value.c (convert_buffer_and_type_to_value): New\n+\tfunction.\n+\t(valpy_new): Parse arguments via gdb_PyArg_ParseTupleAndKeywords.\n+\tAdd support for handling an optional second argument.  Call\n+\tconvert_buffer_and_type_to_value as appropriate.\n \t* python/python-internal.h (Py_buffer_deleter): New struct.\n \t(Py_buffer_up): New typedef.\n "
    },
    {
      "sha": "445be72946746c2ca781c56a18e6d2a0db46c47e",
      "filename": "gdb/python/py-value.c",
      "status": "modified",
      "additions": 62,
      "deletions": 10,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fe07eca59d0544eb6c56c3559da9ceece23cae6e/gdb/python/py-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fe07eca59d0544eb6c56c3559da9ceece23cae6e/gdb/python/py-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-value.c?ref=fe07eca59d0544eb6c56c3559da9ceece23cae6e",
      "patch": "@@ -107,31 +107,83 @@ note_value (value_object *value_obj)\n   values_in_python = value_obj;\n }\n \n+/* Convert a python object OBJ with type TYPE to a gdb value.  The\n+   python object in question must conform to the python buffer\n+   protocol.  On success, return the converted value, otherwise\n+   nullptr.  */\n+\n+static struct value *\n+convert_buffer_and_type_to_value (PyObject *obj, struct type *type)\n+{\n+  Py_buffer_up buffer_up;\n+  Py_buffer py_buf;\n+\n+  if (PyObject_CheckBuffer (obj) \n+      && PyObject_GetBuffer (obj, &py_buf, PyBUF_SIMPLE) == 0)\n+    {\n+      /* Got a buffer, py_buf, out of obj.  Cause it to be released\n+         when it goes out of scope.  */\n+      buffer_up.reset (&py_buf);\n+    }\n+  else\n+    {\n+      PyErr_SetString (PyExc_TypeError,\n+\t\t       _(\"Object must support the python buffer protocol.\"));\n+      return nullptr;\n+    }\n+\n+  if (TYPE_LENGTH (type) > py_buf.len)\n+    {\n+      PyErr_SetString (PyExc_ValueError,\n+\t\t       _(\"Size of type is larger than that of buffer object.\"));\n+      return nullptr;\n+    }\n+\n+  return value_from_contents (type, (const gdb_byte *) py_buf.buf);\n+}\n+\n /* Called when a new gdb.Value object needs to be allocated.  Returns NULL on\n    error, with a python exception set.  */\n static PyObject *\n-valpy_new (PyTypeObject *subtype, PyObject *args, PyObject *keywords)\n+valpy_new (PyTypeObject *subtype, PyObject *args, PyObject *kwargs)\n {\n-  struct value *value = NULL;   /* Initialize to appease gcc warning.  */\n-  value_object *value_obj;\n+  static const char *keywords[] = { \"val\", \"type\", NULL };\n+  PyObject *val_obj = nullptr;\n+  PyObject *type_obj = nullptr;\n+\n+  if (!gdb_PyArg_ParseTupleAndKeywords (args, kwargs, \"O|O\", keywords,\n+\t\t\t\t\t&val_obj, &type_obj))\n+    return nullptr;\n \n-  if (PyTuple_Size (args) != 1)\n+  struct type *type = nullptr;\n+\n+  if (type_obj != nullptr)\n     {\n-      PyErr_SetString (PyExc_TypeError, _(\"Value object creation takes only \"\n-\t\t\t\t\t  \"1 argument\"));\n-      return NULL;\n+      type = type_object_to_type (type_obj);\n+      if (type == nullptr)\n+        {\n+\t  PyErr_SetString (PyExc_TypeError,\n+\t\t\t   _(\"type argument must be a gdb.Type.\"));\n+\t  return nullptr;\n+\t}\n     }\n \n-  value_obj = (value_object *) subtype->tp_alloc (subtype, 1);\n+  value_object *value_obj = (value_object *) subtype->tp_alloc (subtype, 1);\n   if (value_obj == NULL)\n     {\n       PyErr_SetString (PyExc_MemoryError, _(\"Could not allocate memory to \"\n \t\t\t\t\t    \"create Value object.\"));\n       return NULL;\n     }\n \n-  value = convert_value_from_python (PyTuple_GetItem (args, 0));\n-  if (value == NULL)\n+  struct value *value;\n+\n+  if (type == nullptr)\n+    value = convert_value_from_python (val_obj);\n+  else\n+    value = convert_buffer_and_type_to_value (val_obj, type);\n+\n+  if (value == nullptr)\n     {\n       subtype->tp_free (value_obj);\n       return NULL;"
    }
  ]
}