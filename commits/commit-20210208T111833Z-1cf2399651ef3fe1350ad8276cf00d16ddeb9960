{
  "sha": "1cf2399651ef3fe1350ad8276cf00d16ddeb9960",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWNmMjM5OTY1MWVmM2ZlMTM1MGFkODI3NmNmMDBkMTZkZGViOTk2MA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-01-25T15:46:58Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-02-08T11:18:33Z"
    },
    "message": "gdb/tui: don't add windows to global list from tui_layout:window::apply\n\nThis commit was inspired by this mailing list patch:\n\n  https://sourceware.org/pipermail/gdb-patches/2021-January/174713.html\n\nCurrently, calling tui_layout_window::apply will add the window from\nthe layout object to the global tui_windows list.\n\nUnfortunately, when the user runs the 'winheight' command, this calls\ntui_adjust_window_height, which calls the tui_layout_base::adjust_size\nfunction, which can then call tui_layout_base::apply.  The consequence\nof this is that when the user does 'winheight' duplicate copies of a\nwindow can be added to the global tui_windows list.\n\nThe original patch fixed this by changing the apply function to only\nupdate the global list some of the time.\n\nThis patch takes a different approach.  The apply function no longer\nupdates the global tui_windows list.  Instead a new virtual function\nis added to tui_layout_base which is used to gather all the currently\napplied windows into a vector.  Finally tui_apply_current_layout is\nupdated to make use of this new function to update the tui_windows\nlist.\n\nThe benefits I see in this approach are, (a) the apply function now no\nlonger touches global state, this solves the immediate problem,\nand (b) now that tui_windows is updated directly in the function\ntui_apply_current_layout, we can drop the saved_tui_windows global.\n\ngdb/ChangeLog:\n\n\t* tui-layout.c (saved_tui_windows): Delete.\n\t(tui_apply_current_layout): Don't make use of saved_tui_windows,\n\tcall new get_windows member function instead.\n\t(tui_get_window_by_name): Check in tui_windows.\n\t(tui_layout_window::apply): Don't add to tui_windows.\n\t* tui-layout.h (tui_layout_base::get_windows): New member function.\n\t(tui_layout_window::get_windows): Likewise.\n\t(tui_layout_split::get_windows): Likewise.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.tui/winheight.exp: Add more tests.",
    "tree": {
      "sha": "ef7670ef713ccdc3f2013d9477a0c4882032c5d7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ef7670ef713ccdc3f2013d9477a0c4882032c5d7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1cf2399651ef3fe1350ad8276cf00d16ddeb9960",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1cf2399651ef3fe1350ad8276cf00d16ddeb9960",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1cf2399651ef3fe1350ad8276cf00d16ddeb9960",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1cf2399651ef3fe1350ad8276cf00d16ddeb9960/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a53a265752ef4b911d175aea62e082e54e717497",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a53a265752ef4b911d175aea62e082e54e717497",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a53a265752ef4b911d175aea62e082e54e717497"
    }
  ],
  "stats": {
    "total": 71,
    "additions": 56,
    "deletions": 15
  },
  "files": [
    {
      "sha": "d450be6433dc4b3344a71662644c7e91e22d1806",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cf2399651ef3fe1350ad8276cf00d16ddeb9960/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cf2399651ef3fe1350ad8276cf00d16ddeb9960/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1cf2399651ef3fe1350ad8276cf00d16ddeb9960",
      "patch": "@@ -1,3 +1,14 @@\n+2021-02-08  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* tui-layout.c (saved_tui_windows): Delete.\n+\t(tui_apply_current_layout): Don't make use of saved_tui_windows,\n+\tcall new get_windows member function instead.\n+\t(tui_get_window_by_name): Check in tui_windows.\n+\t(tui_layout_window::apply): Don't add to tui_windows.\n+\t* tui-layout.h (tui_layout_base::get_windows): New member function.\n+\t(tui_layout_window::get_windows): Likewise.\n+\t(tui_layout_split::get_windows): Likewise.\n+\n 2021-02-08  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* tui/tui-layout.c (tui_apply_current_layout): Restore the delete"
    },
    {
      "sha": "de68598dc5ffa7991ec98e6e026cbc1d22b9eba2",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cf2399651ef3fe1350ad8276cf00d16ddeb9960/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cf2399651ef3fe1350ad8276cf00d16ddeb9960/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=1cf2399651ef3fe1350ad8276cf00d16ddeb9960",
      "patch": "@@ -1,3 +1,7 @@\n+2021-02-08  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.tui/winheight.exp: Add more tests.\n+\n 2021-02-08  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.python/py-framefilter.exp: Update expected results."
    },
    {
      "sha": "04de35d2f45c244f61af0721fdaea9a7f87d93a8",
      "filename": "gdb/testsuite/gdb.tui/winheight.exp",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cf2399651ef3fe1350ad8276cf00d16ddeb9960/gdb/testsuite/gdb.tui/winheight.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cf2399651ef3fe1350ad8276cf00d16ddeb9960/gdb/testsuite/gdb.tui/winheight.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.tui/winheight.exp?ref=1cf2399651ef3fe1350ad8276cf00d16ddeb9960",
      "patch": "@@ -36,3 +36,17 @@ Term::check_box \"smaller source box\" 0 0 80 10\n \n Term::command \"winheight cmd -5\"\n Term::check_box \"larger source box\" 0 0 80 15\n+\n+Term::command \"winheight src -5\"\n+Term::check_box \"smaller source box again\" 0 0 80 10\n+\n+Term::command \"winheight src +5\"\n+Term::check_box \"larger source box again\" 0 0 80 15\n+\n+# At one point we had a bug where adjusting the winheight would result\n+# in GDB keeping hold of duplicate window pointers, which it might\n+# then try to delete when the layout was changed.  Running this test\n+# under valgrind would expose that bug.\n+Term::command \"layout asm\"\n+Term::check_box \"check for asm window\" 0 0 80 15\n+"
    },
    {
      "sha": "f08d62d681fb1a8486cadc57d6e08e6ab9b15971",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 11,
      "deletions": 15,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cf2399651ef3fe1350ad8276cf00d16ddeb9960/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cf2399651ef3fe1350ad8276cf00d16ddeb9960/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=1cf2399651ef3fe1350ad8276cf00d16ddeb9960",
      "patch": "@@ -64,11 +64,6 @@ static tui_layout_split *asm_regs_layout;\n /* See tui-data.h.  */\n std::vector<tui_win_info *> tui_windows;\n \n-/* When applying a layout, this is the list of all windows that were\n-   in the previous layout.  This is used to re-use windows when\n-   changing a layout.  */\n-static std::vector<tui_win_info *> saved_tui_windows;\n-\n /* See tui-layout.h.  */\n \n void\n@@ -79,10 +74,7 @@ tui_apply_current_layout ()\n \n   extract_display_start_addr (&gdbarch, &addr);\n \n-  saved_tui_windows = std::move (tui_windows);\n-  tui_windows.clear ();\n-\n-  for (tui_win_info *win_info : saved_tui_windows)\n+  for (tui_win_info *win_info : tui_windows)\n     win_info->make_visible (false);\n \n   applied_layout->apply (0, 0, tui_term_width (), tui_term_height ());\n@@ -96,23 +88,28 @@ tui_apply_current_layout ()\n   /* This should always be made visible by a layout.  */\n   gdb_assert (TUI_CMD_WIN->is_visible ());\n \n+  /* Get the new list of currently visible windows.  */\n+  std::vector<tui_win_info *> new_tui_windows;\n+  applied_layout->get_windows (&new_tui_windows);\n+\n   /* Now delete any window that was not re-applied.  */\n   tui_win_info *focus = tui_win_with_focus ();\n-  for (tui_win_info *win_info : saved_tui_windows)\n+  for (tui_win_info *win_info : tui_windows)\n     {\n       if (!win_info->is_visible ())\n \t{\n \t  if (focus == win_info)\n-\t    tui_set_win_focus_to (tui_windows[0]);\n+\t    tui_set_win_focus_to (new_tui_windows[0]);\n \t  delete win_info;\n \t}\n     }\n \n+  /* Replace the global list of active windows.  */\n+  tui_windows = std::move (new_tui_windows);\n+\n   if (gdbarch == nullptr && TUI_DISASM_WIN != nullptr)\n     tui_get_begin_asm_address (&gdbarch, &addr);\n   tui_update_source_windows_with_addr (gdbarch, addr);\n-\n-  saved_tui_windows.clear ();\n }\n \n /* See tui-layout.  */\n@@ -343,7 +340,7 @@ static std::unordered_map<std::string, window_factory> *known_window_types;\n static tui_win_info *\n tui_get_window_by_name (const std::string &name)\n {\n-  for (tui_win_info *window : saved_tui_windows)\n+  for (tui_win_info *window : tui_windows)\n     if (name == window->name ())\n       return window;\n \n@@ -415,7 +412,6 @@ tui_layout_window::apply (int x_, int y_, int width_, int height_)\n   height = height_;\n   gdb_assert (m_window != nullptr);\n   m_window->resize (height, width, x, y);\n-  tui_windows.push_back (m_window);\n }\n \n /* See tui-layout.h.  */"
    },
    {
      "sha": "f89166eae3789621fc20ea79f6612e6b1d0be20a",
      "filename": "gdb/tui/tui-layout.h",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1cf2399651ef3fe1350ad8276cf00d16ddeb9960/gdb/tui/tui-layout.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1cf2399651ef3fe1350ad8276cf00d16ddeb9960/gdb/tui/tui-layout.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.h?ref=1cf2399651ef3fe1350ad8276cf00d16ddeb9960",
      "patch": "@@ -91,6 +91,9 @@ class tui_layout_base\n      depth of this layout in the hierarchy (zero-based).  */\n   virtual void specification (ui_file *output, int depth) = 0;\n \n+  /* Add all windows to the WINDOWS vector.  */\n+  virtual void get_windows (std::vector<tui_win_info *> *windows) = 0;\n+\n   /* The most recent space allocation.  */\n   int x = 0;\n   int y = 0;\n@@ -141,6 +144,12 @@ class tui_layout_window : public tui_layout_base\n \n   void specification (ui_file *output, int depth) override;\n \n+  /* See tui_layout_base::get_windows.  */\n+  void get_windows (std::vector<tui_win_info *> *windows) override\n+  {\n+    windows->push_back (m_window);\n+  }\n+\n protected:\n \n   void get_sizes (bool height, int *min_value, int *max_value) override;\n@@ -195,6 +204,13 @@ class tui_layout_split : public tui_layout_base\n \n   void specification (ui_file *output, int depth) override;\n \n+  /* See tui_layout_base::get_windows.  */\n+  void get_windows (std::vector<tui_win_info *> *windows) override\n+  {\n+    for (auto &item : m_splits)\n+      item.layout->get_windows (windows);\n+  }\n+\n protected:\n \n   void get_sizes (bool height, int *min_value, int *max_value) override;"
    }
  ]
}